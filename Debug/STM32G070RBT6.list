
STM32G070RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cf4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08017db0  08017db0  00027db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018898  08018898  0003329c  2**0
                  CONTENTS
  4 .ARM          00000000  08018898  08018898  0003329c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018898  08018898  0003329c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018898  08018898  00028898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801889c  0801889c  0002889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000329c  20000000  080188a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  2000329c  0801bb3c  0003329c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003a8c  0801bb3c  00033a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003329c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b4b  00000000  00000000  000332c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d7  00000000  00000000  00053e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  000587e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  0005a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e372  00000000  00000000  0005bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000264e1  00000000  00000000  00079f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f394  00000000  00000000  000a042b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f7bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000756c  00000000  00000000  0013f810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000329c 	.word	0x2000329c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08017d94 	.word	0x08017d94

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200032a0 	.word	0x200032a0
 80000fc:	08017d94 	.word	0x08017d94

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fe25 	bl	8002098 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd75 	bl	8001f48 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe17 	bl	8002098 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe0d 	bl	8002098 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd9d 	bl	8001fcc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fd93 	bl	8001fcc <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fb8b 	bl	8000bd8 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb17 	bl	8000b00 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb7d 	bl	8000bd8 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb73 	bl	8000bd8 <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb23 	bl	8000b4c <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb19 	bl	8000b4c <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_f2uiz>:
 8000528:	219e      	movs	r1, #158	; 0x9e
 800052a:	b510      	push	{r4, lr}
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	1c04      	adds	r4, r0, #0
 8000530:	f7ff fff0 	bl	8000514 <__aeabi_fcmpge>
 8000534:	2800      	cmp	r0, #0
 8000536:	d103      	bne.n	8000540 <__aeabi_f2uiz+0x18>
 8000538:	1c20      	adds	r0, r4, #0
 800053a:	f000 fe65 	bl	8001208 <__aeabi_f2iz>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	219e      	movs	r1, #158	; 0x9e
 8000542:	1c20      	adds	r0, r4, #0
 8000544:	05c9      	lsls	r1, r1, #23
 8000546:	f000 fcb1 	bl	8000eac <__aeabi_fsub>
 800054a:	f000 fe5d 	bl	8001208 <__aeabi_f2iz>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	061b      	lsls	r3, r3, #24
 8000552:	469c      	mov	ip, r3
 8000554:	4460      	add	r0, ip
 8000556:	e7f2      	b.n	800053e <__aeabi_f2uiz+0x16>

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff9d 	bl	80004a0 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fc13 	bl	8002d98 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f85c 	bl	8002638 <__aeabi_dsub>
 8000580:	f002 fc0a 	bl	8002d98 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_fadd>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	46c6      	mov	lr, r8
 8000598:	0243      	lsls	r3, r0, #9
 800059a:	0a5b      	lsrs	r3, r3, #9
 800059c:	024e      	lsls	r6, r1, #9
 800059e:	0045      	lsls	r5, r0, #1
 80005a0:	004f      	lsls	r7, r1, #1
 80005a2:	00da      	lsls	r2, r3, #3
 80005a4:	0fc4      	lsrs	r4, r0, #31
 80005a6:	469c      	mov	ip, r3
 80005a8:	0a70      	lsrs	r0, r6, #9
 80005aa:	4690      	mov	r8, r2
 80005ac:	b500      	push	{lr}
 80005ae:	0e2d      	lsrs	r5, r5, #24
 80005b0:	0e3f      	lsrs	r7, r7, #24
 80005b2:	0fc9      	lsrs	r1, r1, #31
 80005b4:	09b6      	lsrs	r6, r6, #6
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d04b      	beq.n	8000652 <__aeabi_fadd+0xbe>
 80005ba:	1bea      	subs	r2, r5, r7
 80005bc:	2a00      	cmp	r2, #0
 80005be:	dd36      	ble.n	800062e <__aeabi_fadd+0x9a>
 80005c0:	2f00      	cmp	r7, #0
 80005c2:	d061      	beq.n	8000688 <__aeabi_fadd+0xf4>
 80005c4:	2dff      	cmp	r5, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x36>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x192>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	04db      	lsls	r3, r3, #19
 80005ce:	431e      	orrs	r6, r3
 80005d0:	2a1b      	cmp	r2, #27
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_fadd+0x42>
 80005d4:	e0d3      	b.n	800077e <__aeabi_fadd+0x1ea>
 80005d6:	2001      	movs	r0, #1
 80005d8:	4643      	mov	r3, r8
 80005da:	1a18      	subs	r0, r3, r0
 80005dc:	0143      	lsls	r3, r0, #5
 80005de:	d400      	bmi.n	80005e2 <__aeabi_fadd+0x4e>
 80005e0:	e08c      	b.n	80006fc <__aeabi_fadd+0x168>
 80005e2:	0180      	lsls	r0, r0, #6
 80005e4:	0987      	lsrs	r7, r0, #6
 80005e6:	0038      	movs	r0, r7
 80005e8:	f002 fd32 	bl	8003050 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4087      	lsls	r7, r0
 80005f0:	4285      	cmp	r5, r0
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fadd+0x62>
 80005f4:	e0b6      	b.n	8000764 <__aeabi_fadd+0x1d0>
 80005f6:	1a2d      	subs	r5, r5, r0
 80005f8:	48b3      	ldr	r0, [pc, #716]	; (80008c8 <__aeabi_fadd+0x334>)
 80005fa:	4038      	ands	r0, r7
 80005fc:	0743      	lsls	r3, r0, #29
 80005fe:	d004      	beq.n	800060a <__aeabi_fadd+0x76>
 8000600:	230f      	movs	r3, #15
 8000602:	4003      	ands	r3, r0
 8000604:	2b04      	cmp	r3, #4
 8000606:	d000      	beq.n	800060a <__aeabi_fadd+0x76>
 8000608:	3004      	adds	r0, #4
 800060a:	0143      	lsls	r3, r0, #5
 800060c:	d400      	bmi.n	8000610 <__aeabi_fadd+0x7c>
 800060e:	e078      	b.n	8000702 <__aeabi_fadd+0x16e>
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	2dfe      	cmp	r5, #254	; 0xfe
 8000614:	d065      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 8000616:	0180      	lsls	r0, r0, #6
 8000618:	0a43      	lsrs	r3, r0, #9
 800061a:	469c      	mov	ip, r3
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	4663      	mov	r3, ip
 8000620:	05d0      	lsls	r0, r2, #23
 8000622:	4318      	orrs	r0, r3
 8000624:	07e4      	lsls	r4, r4, #31
 8000626:	4320      	orrs	r0, r4
 8000628:	bc80      	pop	{r7}
 800062a:	46b8      	mov	r8, r7
 800062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062e:	2a00      	cmp	r2, #0
 8000630:	d035      	beq.n	800069e <__aeabi_fadd+0x10a>
 8000632:	1b7a      	subs	r2, r7, r5
 8000634:	2d00      	cmp	r5, #0
 8000636:	d000      	beq.n	800063a <__aeabi_fadd+0xa6>
 8000638:	e0af      	b.n	800079a <__aeabi_fadd+0x206>
 800063a:	4643      	mov	r3, r8
 800063c:	2b00      	cmp	r3, #0
 800063e:	d100      	bne.n	8000642 <__aeabi_fadd+0xae>
 8000640:	e0a7      	b.n	8000792 <__aeabi_fadd+0x1fe>
 8000642:	1e53      	subs	r3, r2, #1
 8000644:	2a01      	cmp	r2, #1
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0xb6>
 8000648:	e12f      	b.n	80008aa <__aeabi_fadd+0x316>
 800064a:	2aff      	cmp	r2, #255	; 0xff
 800064c:	d069      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800064e:	001a      	movs	r2, r3
 8000650:	e0aa      	b.n	80007a8 <__aeabi_fadd+0x214>
 8000652:	1be9      	subs	r1, r5, r7
 8000654:	2900      	cmp	r1, #0
 8000656:	dd70      	ble.n	800073a <__aeabi_fadd+0x1a6>
 8000658:	2f00      	cmp	r7, #0
 800065a:	d037      	beq.n	80006cc <__aeabi_fadd+0x138>
 800065c:	2dff      	cmp	r5, #255	; 0xff
 800065e:	d062      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	04db      	lsls	r3, r3, #19
 8000664:	431e      	orrs	r6, r3
 8000666:	291b      	cmp	r1, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0xd8>
 800066a:	e0b0      	b.n	80007ce <__aeabi_fadd+0x23a>
 800066c:	2001      	movs	r0, #1
 800066e:	4440      	add	r0, r8
 8000670:	0143      	lsls	r3, r0, #5
 8000672:	d543      	bpl.n	80006fc <__aeabi_fadd+0x168>
 8000674:	3501      	adds	r5, #1
 8000676:	2dff      	cmp	r5, #255	; 0xff
 8000678:	d033      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800067a:	2301      	movs	r3, #1
 800067c:	4a93      	ldr	r2, [pc, #588]	; (80008cc <__aeabi_fadd+0x338>)
 800067e:	4003      	ands	r3, r0
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	4010      	ands	r0, r2
 8000684:	4318      	orrs	r0, r3
 8000686:	e7b9      	b.n	80005fc <__aeabi_fadd+0x68>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0xfa>
 800068c:	e083      	b.n	8000796 <__aeabi_fadd+0x202>
 800068e:	1e51      	subs	r1, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x102>
 8000694:	e0d8      	b.n	8000848 <__aeabi_fadd+0x2b4>
 8000696:	2aff      	cmp	r2, #255	; 0xff
 8000698:	d045      	beq.n	8000726 <__aeabi_fadd+0x192>
 800069a:	000a      	movs	r2, r1
 800069c:	e798      	b.n	80005d0 <__aeabi_fadd+0x3c>
 800069e:	27fe      	movs	r7, #254	; 0xfe
 80006a0:	1c6a      	adds	r2, r5, #1
 80006a2:	4217      	tst	r7, r2
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x114>
 80006a6:	e086      	b.n	80007b6 <__aeabi_fadd+0x222>
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x11a>
 80006ac:	e0b7      	b.n	800081e <__aeabi_fadd+0x28a>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x122>
 80006b4:	e0f3      	b.n	800089e <__aeabi_fadd+0x30a>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d0b0      	beq.n	800061e <__aeabi_fadd+0x8a>
 80006bc:	1b98      	subs	r0, r3, r6
 80006be:	0143      	lsls	r3, r0, #5
 80006c0:	d400      	bmi.n	80006c4 <__aeabi_fadd+0x130>
 80006c2:	e0fa      	b.n	80008ba <__aeabi_fadd+0x326>
 80006c4:	4643      	mov	r3, r8
 80006c6:	000c      	movs	r4, r1
 80006c8:	1af0      	subs	r0, r6, r3
 80006ca:	e797      	b.n	80005fc <__aeabi_fadd+0x68>
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x13e>
 80006d0:	e0c8      	b.n	8000864 <__aeabi_fadd+0x2d0>
 80006d2:	1e4a      	subs	r2, r1, #1
 80006d4:	2901      	cmp	r1, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x146>
 80006d8:	e0ae      	b.n	8000838 <__aeabi_fadd+0x2a4>
 80006da:	29ff      	cmp	r1, #255	; 0xff
 80006dc:	d023      	beq.n	8000726 <__aeabi_fadd+0x192>
 80006de:	0011      	movs	r1, r2
 80006e0:	e7c1      	b.n	8000666 <__aeabi_fadd+0xd2>
 80006e2:	2300      	movs	r3, #0
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	469c      	mov	ip, r3
 80006e8:	e799      	b.n	800061e <__aeabi_fadd+0x8a>
 80006ea:	21fe      	movs	r1, #254	; 0xfe
 80006ec:	1c6a      	adds	r2, r5, #1
 80006ee:	4211      	tst	r1, r2
 80006f0:	d077      	beq.n	80007e2 <__aeabi_fadd+0x24e>
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 80006f6:	0015      	movs	r5, r2
 80006f8:	4446      	add	r6, r8
 80006fa:	0870      	lsrs	r0, r6, #1
 80006fc:	0743      	lsls	r3, r0, #29
 80006fe:	d000      	beq.n	8000702 <__aeabi_fadd+0x16e>
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x6c>
 8000702:	08c3      	lsrs	r3, r0, #3
 8000704:	2dff      	cmp	r5, #255	; 0xff
 8000706:	d00e      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	469c      	mov	ip, r3
 800070e:	b2ea      	uxtb	r2, r5
 8000710:	e785      	b.n	800061e <__aeabi_fadd+0x8a>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d007      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	03d2      	lsls	r2, r2, #15
 800071a:	4213      	tst	r3, r2
 800071c:	d003      	beq.n	8000726 <__aeabi_fadd+0x192>
 800071e:	4210      	tst	r0, r2
 8000720:	d101      	bne.n	8000726 <__aeabi_fadd+0x192>
 8000722:	000c      	movs	r4, r1
 8000724:	0003      	movs	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0db      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4318      	orrs	r0, r3
 8000730:	0240      	lsls	r0, r0, #9
 8000732:	0a43      	lsrs	r3, r0, #9
 8000734:	469c      	mov	ip, r3
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	e771      	b.n	800061e <__aeabi_fadd+0x8a>
 800073a:	2900      	cmp	r1, #0
 800073c:	d0d5      	beq.n	80006ea <__aeabi_fadd+0x156>
 800073e:	1b7a      	subs	r2, r7, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d160      	bne.n	8000806 <__aeabi_fadd+0x272>
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d024      	beq.n	8000794 <__aeabi_fadd+0x200>
 800074a:	1e53      	subs	r3, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d073      	beq.n	8000838 <__aeabi_fadd+0x2a4>
 8000750:	2aff      	cmp	r2, #255	; 0xff
 8000752:	d0e7      	beq.n	8000724 <__aeabi_fadd+0x190>
 8000754:	001a      	movs	r2, r3
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dc00      	bgt.n	800075c <__aeabi_fadd+0x1c8>
 800075a:	e085      	b.n	8000868 <__aeabi_fadd+0x2d4>
 800075c:	2001      	movs	r0, #1
 800075e:	003d      	movs	r5, r7
 8000760:	1980      	adds	r0, r0, r6
 8000762:	e785      	b.n	8000670 <__aeabi_fadd+0xdc>
 8000764:	2320      	movs	r3, #32
 8000766:	003a      	movs	r2, r7
 8000768:	1b45      	subs	r5, r0, r5
 800076a:	0038      	movs	r0, r7
 800076c:	3501      	adds	r5, #1
 800076e:	40ea      	lsrs	r2, r5
 8000770:	1b5d      	subs	r5, r3, r5
 8000772:	40a8      	lsls	r0, r5
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	2500      	movs	r5, #0
 800077a:	4310      	orrs	r0, r2
 800077c:	e73e      	b.n	80005fc <__aeabi_fadd+0x68>
 800077e:	2320      	movs	r3, #32
 8000780:	0030      	movs	r0, r6
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	0031      	movs	r1, r6
 8000786:	4098      	lsls	r0, r3
 8000788:	40d1      	lsrs	r1, r2
 800078a:	1e43      	subs	r3, r0, #1
 800078c:	4198      	sbcs	r0, r3
 800078e:	4308      	orrs	r0, r1
 8000790:	e722      	b.n	80005d8 <__aeabi_fadd+0x44>
 8000792:	000c      	movs	r4, r1
 8000794:	0003      	movs	r3, r0
 8000796:	0015      	movs	r5, r2
 8000798:	e7b4      	b.n	8000704 <__aeabi_fadd+0x170>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d0c1      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	4640      	mov	r0, r8
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	4318      	orrs	r0, r3
 80007a6:	4680      	mov	r8, r0
 80007a8:	2a1b      	cmp	r2, #27
 80007aa:	dd51      	ble.n	8000850 <__aeabi_fadd+0x2bc>
 80007ac:	2001      	movs	r0, #1
 80007ae:	000c      	movs	r4, r1
 80007b0:	003d      	movs	r5, r7
 80007b2:	1a30      	subs	r0, r6, r0
 80007b4:	e712      	b.n	80005dc <__aeabi_fadd+0x48>
 80007b6:	4643      	mov	r3, r8
 80007b8:	1b9f      	subs	r7, r3, r6
 80007ba:	017b      	lsls	r3, r7, #5
 80007bc:	d42b      	bmi.n	8000816 <__aeabi_fadd+0x282>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80007c2:	e710      	b.n	80005e6 <__aeabi_fadd+0x52>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	469c      	mov	ip, r3
 80007cc:	e727      	b.n	800061e <__aeabi_fadd+0x8a>
 80007ce:	2320      	movs	r3, #32
 80007d0:	0032      	movs	r2, r6
 80007d2:	0030      	movs	r0, r6
 80007d4:	40ca      	lsrs	r2, r1
 80007d6:	1a59      	subs	r1, r3, r1
 80007d8:	4088      	lsls	r0, r1
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
 80007de:	4310      	orrs	r0, r2
 80007e0:	e745      	b.n	800066e <__aeabi_fadd+0xda>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d14a      	bne.n	800087c <__aeabi_fadd+0x2e8>
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d063      	beq.n	80008b4 <__aeabi_fadd+0x320>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x260>
 80007f2:	e714      	b.n	800061e <__aeabi_fadd+0x8a>
 80007f4:	0030      	movs	r0, r6
 80007f6:	4440      	add	r0, r8
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	d400      	bmi.n	80007fe <__aeabi_fadd+0x26a>
 80007fc:	e77e      	b.n	80006fc <__aeabi_fadd+0x168>
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <__aeabi_fadd+0x334>)
 8000800:	3501      	adds	r5, #1
 8000802:	4018      	ands	r0, r3
 8000804:	e77a      	b.n	80006fc <__aeabi_fadd+0x168>
 8000806:	2fff      	cmp	r7, #255	; 0xff
 8000808:	d08c      	beq.n	8000724 <__aeabi_fadd+0x190>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	4641      	mov	r1, r8
 800080e:	04db      	lsls	r3, r3, #19
 8000810:	4319      	orrs	r1, r3
 8000812:	4688      	mov	r8, r1
 8000814:	e79f      	b.n	8000756 <__aeabi_fadd+0x1c2>
 8000816:	4643      	mov	r3, r8
 8000818:	000c      	movs	r4, r1
 800081a:	1af7      	subs	r7, r6, r3
 800081c:	e6e3      	b.n	80005e6 <__aeabi_fadd+0x52>
 800081e:	4642      	mov	r2, r8
 8000820:	2a00      	cmp	r2, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x292>
 8000824:	e775      	b.n	8000712 <__aeabi_fadd+0x17e>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x298>
 800082a:	e77a      	b.n	8000722 <__aeabi_fadd+0x18e>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	2400      	movs	r4, #0
 8000832:	469c      	mov	ip, r3
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	e6f2      	b.n	800061e <__aeabi_fadd+0x8a>
 8000838:	0030      	movs	r0, r6
 800083a:	4440      	add	r0, r8
 800083c:	2501      	movs	r5, #1
 800083e:	0143      	lsls	r3, r0, #5
 8000840:	d400      	bmi.n	8000844 <__aeabi_fadd+0x2b0>
 8000842:	e75b      	b.n	80006fc <__aeabi_fadd+0x168>
 8000844:	2502      	movs	r5, #2
 8000846:	e718      	b.n	800067a <__aeabi_fadd+0xe6>
 8000848:	4643      	mov	r3, r8
 800084a:	2501      	movs	r5, #1
 800084c:	1b98      	subs	r0, r3, r6
 800084e:	e6c5      	b.n	80005dc <__aeabi_fadd+0x48>
 8000850:	2320      	movs	r3, #32
 8000852:	4644      	mov	r4, r8
 8000854:	4640      	mov	r0, r8
 8000856:	40d4      	lsrs	r4, r2
 8000858:	1a9a      	subs	r2, r3, r2
 800085a:	4090      	lsls	r0, r2
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	4320      	orrs	r0, r4
 8000862:	e7a4      	b.n	80007ae <__aeabi_fadd+0x21a>
 8000864:	000d      	movs	r5, r1
 8000866:	e74d      	b.n	8000704 <__aeabi_fadd+0x170>
 8000868:	2320      	movs	r3, #32
 800086a:	4641      	mov	r1, r8
 800086c:	4640      	mov	r0, r8
 800086e:	40d1      	lsrs	r1, r2
 8000870:	1a9a      	subs	r2, r3, r2
 8000872:	4090      	lsls	r0, r2
 8000874:	1e43      	subs	r3, r0, #1
 8000876:	4198      	sbcs	r0, r3
 8000878:	4308      	orrs	r0, r1
 800087a:	e770      	b.n	800075e <__aeabi_fadd+0x1ca>
 800087c:	4642      	mov	r2, r8
 800087e:	2a00      	cmp	r2, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x2f0>
 8000882:	e74f      	b.n	8000724 <__aeabi_fadd+0x190>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x2f6>
 8000888:	e74d      	b.n	8000726 <__aeabi_fadd+0x192>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	03d2      	lsls	r2, r2, #15
 800088e:	4213      	tst	r3, r2
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x300>
 8000892:	e748      	b.n	8000726 <__aeabi_fadd+0x192>
 8000894:	4210      	tst	r0, r2
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x306>
 8000898:	e745      	b.n	8000726 <__aeabi_fadd+0x192>
 800089a:	0003      	movs	r3, r0
 800089c:	e743      	b.n	8000726 <__aeabi_fadd+0x192>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d090      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80008a2:	000c      	movs	r4, r1
 80008a4:	4684      	mov	ip, r0
 80008a6:	2200      	movs	r2, #0
 80008a8:	e6b9      	b.n	800061e <__aeabi_fadd+0x8a>
 80008aa:	4643      	mov	r3, r8
 80008ac:	000c      	movs	r4, r1
 80008ae:	1af0      	subs	r0, r6, r3
 80008b0:	3501      	adds	r5, #1
 80008b2:	e693      	b.n	80005dc <__aeabi_fadd+0x48>
 80008b4:	4684      	mov	ip, r0
 80008b6:	2200      	movs	r2, #0
 80008b8:	e6b1      	b.n	800061e <__aeabi_fadd+0x8a>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x32c>
 80008be:	e71d      	b.n	80006fc <__aeabi_fadd+0x168>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2400      	movs	r4, #0
 80008c4:	469c      	mov	ip, r3
 80008c6:	e6aa      	b.n	800061e <__aeabi_fadd+0x8a>
 80008c8:	fbffffff 	.word	0xfbffffff
 80008cc:	7dffffff 	.word	0x7dffffff

080008d0 <__aeabi_fdiv>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	464f      	mov	r7, r9
 80008d4:	4646      	mov	r6, r8
 80008d6:	46d6      	mov	lr, sl
 80008d8:	0245      	lsls	r5, r0, #9
 80008da:	b5c0      	push	{r6, r7, lr}
 80008dc:	0047      	lsls	r7, r0, #1
 80008de:	1c0c      	adds	r4, r1, #0
 80008e0:	0a6d      	lsrs	r5, r5, #9
 80008e2:	0e3f      	lsrs	r7, r7, #24
 80008e4:	0fc6      	lsrs	r6, r0, #31
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0x1c>
 80008ea:	e070      	b.n	80009ce <__aeabi_fdiv+0xfe>
 80008ec:	2fff      	cmp	r7, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fdiv+0x22>
 80008f0:	e075      	b.n	80009de <__aeabi_fdiv+0x10e>
 80008f2:	00eb      	lsls	r3, r5, #3
 80008f4:	2580      	movs	r5, #128	; 0x80
 80008f6:	04ed      	lsls	r5, r5, #19
 80008f8:	431d      	orrs	r5, r3
 80008fa:	2300      	movs	r3, #0
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	3f7f      	subs	r7, #127	; 0x7f
 8000902:	0260      	lsls	r0, r4, #9
 8000904:	0a43      	lsrs	r3, r0, #9
 8000906:	4698      	mov	r8, r3
 8000908:	0063      	lsls	r3, r4, #1
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	0fe4      	lsrs	r4, r4, #31
 800090e:	2b00      	cmp	r3, #0
 8000910:	d04e      	beq.n	80009b0 <__aeabi_fdiv+0xe0>
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d046      	beq.n	80009a4 <__aeabi_fdiv+0xd4>
 8000916:	4642      	mov	r2, r8
 8000918:	00d0      	lsls	r0, r2, #3
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	04d2      	lsls	r2, r2, #19
 800091e:	4302      	orrs	r2, r0
 8000920:	4690      	mov	r8, r2
 8000922:	2200      	movs	r2, #0
 8000924:	3b7f      	subs	r3, #127	; 0x7f
 8000926:	0031      	movs	r1, r6
 8000928:	1aff      	subs	r7, r7, r3
 800092a:	464b      	mov	r3, r9
 800092c:	4061      	eors	r1, r4
 800092e:	b2c9      	uxtb	r1, r1
 8000930:	4313      	orrs	r3, r2
 8000932:	2b0f      	cmp	r3, #15
 8000934:	d900      	bls.n	8000938 <__aeabi_fdiv+0x68>
 8000936:	e0b5      	b.n	8000aa4 <__aeabi_fdiv+0x1d4>
 8000938:	486e      	ldr	r0, [pc, #440]	; (8000af4 <__aeabi_fdiv+0x224>)
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	58c3      	ldr	r3, [r0, r3]
 800093e:	469f      	mov	pc, r3
 8000940:	2300      	movs	r3, #0
 8000942:	4698      	mov	r8, r3
 8000944:	0026      	movs	r6, r4
 8000946:	4645      	mov	r5, r8
 8000948:	4692      	mov	sl, r2
 800094a:	4653      	mov	r3, sl
 800094c:	2b02      	cmp	r3, #2
 800094e:	d100      	bne.n	8000952 <__aeabi_fdiv+0x82>
 8000950:	e089      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000952:	2b03      	cmp	r3, #3
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x88>
 8000956:	e09e      	b.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000958:	2b01      	cmp	r3, #1
 800095a:	d018      	beq.n	800098e <__aeabi_fdiv+0xbe>
 800095c:	003b      	movs	r3, r7
 800095e:	337f      	adds	r3, #127	; 0x7f
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd69      	ble.n	8000a38 <__aeabi_fdiv+0x168>
 8000964:	076a      	lsls	r2, r5, #29
 8000966:	d004      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000968:	220f      	movs	r2, #15
 800096a:	402a      	ands	r2, r5
 800096c:	2a04      	cmp	r2, #4
 800096e:	d000      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000970:	3504      	adds	r5, #4
 8000972:	012a      	lsls	r2, r5, #4
 8000974:	d503      	bpl.n	800097e <__aeabi_fdiv+0xae>
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <__aeabi_fdiv+0x228>)
 8000978:	401d      	ands	r5, r3
 800097a:	003b      	movs	r3, r7
 800097c:	3380      	adds	r3, #128	; 0x80
 800097e:	2bfe      	cmp	r3, #254	; 0xfe
 8000980:	dd00      	ble.n	8000984 <__aeabi_fdiv+0xb4>
 8000982:	e070      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e002      	b.n	8000992 <__aeabi_fdiv+0xc2>
 800098c:	000e      	movs	r6, r1
 800098e:	2000      	movs	r0, #0
 8000990:	2500      	movs	r5, #0
 8000992:	05c0      	lsls	r0, r0, #23
 8000994:	4328      	orrs	r0, r5
 8000996:	07f6      	lsls	r6, r6, #31
 8000998:	4330      	orrs	r0, r6
 800099a:	bce0      	pop	{r5, r6, r7}
 800099c:	46ba      	mov	sl, r7
 800099e:	46b1      	mov	r9, r6
 80009a0:	46a8      	mov	r8, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d13f      	bne.n	8000a2a <__aeabi_fdiv+0x15a>
 80009aa:	2202      	movs	r2, #2
 80009ac:	3fff      	subs	r7, #255	; 0xff
 80009ae:	e003      	b.n	80009b8 <__aeabi_fdiv+0xe8>
 80009b0:	4643      	mov	r3, r8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12d      	bne.n	8000a12 <__aeabi_fdiv+0x142>
 80009b6:	2201      	movs	r2, #1
 80009b8:	0031      	movs	r1, r6
 80009ba:	464b      	mov	r3, r9
 80009bc:	4061      	eors	r1, r4
 80009be:	b2c9      	uxtb	r1, r1
 80009c0:	4313      	orrs	r3, r2
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d834      	bhi.n	8000a30 <__aeabi_fdiv+0x160>
 80009c6:	484d      	ldr	r0, [pc, #308]	; (8000afc <__aeabi_fdiv+0x22c>)
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	58c3      	ldr	r3, [r0, r3]
 80009cc:	469f      	mov	pc, r3
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d113      	bne.n	80009fa <__aeabi_fdiv+0x12a>
 80009d2:	2304      	movs	r3, #4
 80009d4:	4699      	mov	r9, r3
 80009d6:	3b03      	subs	r3, #3
 80009d8:	2700      	movs	r7, #0
 80009da:	469a      	mov	sl, r3
 80009dc:	e791      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d105      	bne.n	80009ee <__aeabi_fdiv+0x11e>
 80009e2:	2308      	movs	r3, #8
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b06      	subs	r3, #6
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e789      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009ee:	230c      	movs	r3, #12
 80009f0:	4699      	mov	r9, r3
 80009f2:	3b09      	subs	r3, #9
 80009f4:	27ff      	movs	r7, #255	; 0xff
 80009f6:	469a      	mov	sl, r3
 80009f8:	e783      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009fa:	0028      	movs	r0, r5
 80009fc:	f002 fb28 	bl	8003050 <__clzsi2>
 8000a00:	2776      	movs	r7, #118	; 0x76
 8000a02:	1f43      	subs	r3, r0, #5
 8000a04:	409d      	lsls	r5, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	427f      	negs	r7, r7
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	1a3f      	subs	r7, r7, r0
 8000a10:	e777      	b.n	8000902 <__aeabi_fdiv+0x32>
 8000a12:	4640      	mov	r0, r8
 8000a14:	f002 fb1c 	bl	8003050 <__clzsi2>
 8000a18:	4642      	mov	r2, r8
 8000a1a:	1f43      	subs	r3, r0, #5
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	2376      	movs	r3, #118	; 0x76
 8000a20:	425b      	negs	r3, r3
 8000a22:	4690      	mov	r8, r2
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	2200      	movs	r2, #0
 8000a28:	e77d      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	e77a      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a30:	000e      	movs	r6, r1
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2500      	movs	r5, #0
 8000a36:	e7ac      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	1ac0      	subs	r0, r0, r3
 8000a3c:	281b      	cmp	r0, #27
 8000a3e:	dca6      	bgt.n	800098e <__aeabi_fdiv+0xbe>
 8000a40:	379e      	adds	r7, #158	; 0x9e
 8000a42:	002a      	movs	r2, r5
 8000a44:	40bd      	lsls	r5, r7
 8000a46:	40c2      	lsrs	r2, r0
 8000a48:	1e6b      	subs	r3, r5, #1
 8000a4a:	419d      	sbcs	r5, r3
 8000a4c:	4315      	orrs	r5, r2
 8000a4e:	076b      	lsls	r3, r5, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a52:	230f      	movs	r3, #15
 8000a54:	402b      	ands	r3, r5
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a5a:	3504      	adds	r5, #4
 8000a5c:	016b      	lsls	r3, r5, #5
 8000a5e:	d544      	bpl.n	8000aea <__aeabi_fdiv+0x21a>
 8000a60:	2001      	movs	r0, #1
 8000a62:	2500      	movs	r5, #0
 8000a64:	e795      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a66:	20ff      	movs	r0, #255	; 0xff
 8000a68:	2500      	movs	r5, #0
 8000a6a:	e792      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	2600      	movs	r6, #0
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	03ed      	lsls	r5, r5, #15
 8000a74:	e78d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a76:	2300      	movs	r3, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	03c0      	lsls	r0, r0, #15
 8000a7e:	4205      	tst	r5, r0
 8000a80:	d009      	beq.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a82:	4643      	mov	r3, r8
 8000a84:	4203      	tst	r3, r0
 8000a86:	d106      	bne.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a88:	4645      	mov	r5, r8
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	026d      	lsls	r5, r5, #9
 8000a8e:	0026      	movs	r6, r4
 8000a90:	20ff      	movs	r0, #255	; 0xff
 8000a92:	0a6d      	lsrs	r5, r5, #9
 8000a94:	e77d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a96:	2080      	movs	r0, #128	; 0x80
 8000a98:	03c0      	lsls	r0, r0, #15
 8000a9a:	4305      	orrs	r5, r0
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	0a6d      	lsrs	r5, r5, #9
 8000aa2:	e776      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	0150      	lsls	r0, r2, #5
 8000aaa:	4283      	cmp	r3, r0
 8000aac:	d219      	bcs.n	8000ae2 <__aeabi_fdiv+0x212>
 8000aae:	221b      	movs	r2, #27
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	3f01      	subs	r7, #1
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	006d      	lsls	r5, r5, #1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	db01      	blt.n	8000ac4 <__aeabi_fdiv+0x1f4>
 8000ac0:	4298      	cmp	r0, r3
 8000ac2:	d801      	bhi.n	8000ac8 <__aeabi_fdiv+0x1f8>
 8000ac4:	1a1b      	subs	r3, r3, r0
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d1f3      	bne.n	8000ab6 <__aeabi_fdiv+0x1e6>
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	4193      	sbcs	r3, r2
 8000ad2:	431d      	orrs	r5, r3
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	000e      	movs	r6, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_fdiv+0x210>
 8000ade:	e741      	b.n	8000964 <__aeabi_fdiv+0x94>
 8000ae0:	e7aa      	b.n	8000a38 <__aeabi_fdiv+0x168>
 8000ae2:	221a      	movs	r2, #26
 8000ae4:	2501      	movs	r5, #1
 8000ae6:	1a1b      	subs	r3, r3, r0
 8000ae8:	e7e4      	b.n	8000ab4 <__aeabi_fdiv+0x1e4>
 8000aea:	01ad      	lsls	r5, r5, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	e74f      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	08018018 	.word	0x08018018
 8000af8:	f7ffffff 	.word	0xf7ffffff
 8000afc:	08018058 	.word	0x08018058

08000b00 <__eqsf2>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	0042      	lsls	r2, r0, #1
 8000b04:	0245      	lsls	r5, r0, #9
 8000b06:	024e      	lsls	r6, r1, #9
 8000b08:	004c      	lsls	r4, r1, #1
 8000b0a:	0fc3      	lsrs	r3, r0, #31
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	2001      	movs	r0, #1
 8000b10:	0e12      	lsrs	r2, r2, #24
 8000b12:	0a76      	lsrs	r6, r6, #9
 8000b14:	0e24      	lsrs	r4, r4, #24
 8000b16:	0fc9      	lsrs	r1, r1, #31
 8000b18:	2aff      	cmp	r2, #255	; 0xff
 8000b1a:	d006      	beq.n	8000b2a <__eqsf2+0x2a>
 8000b1c:	2cff      	cmp	r4, #255	; 0xff
 8000b1e:	d003      	beq.n	8000b28 <__eqsf2+0x28>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	d101      	bne.n	8000b28 <__eqsf2+0x28>
 8000b24:	42b5      	cmp	r5, r6
 8000b26:	d006      	beq.n	8000b36 <__eqsf2+0x36>
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d1fc      	bne.n	8000b28 <__eqsf2+0x28>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d1fa      	bne.n	8000b28 <__eqsf2+0x28>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1f8      	bne.n	8000b28 <__eqsf2+0x28>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d006      	beq.n	8000b48 <__eqsf2+0x48>
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d1f3      	bne.n	8000b28 <__eqsf2+0x28>
 8000b40:	0028      	movs	r0, r5
 8000b42:	1e43      	subs	r3, r0, #1
 8000b44:	4198      	sbcs	r0, r3
 8000b46:	e7ef      	b.n	8000b28 <__eqsf2+0x28>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7ed      	b.n	8000b28 <__eqsf2+0x28>

08000b4c <__gesf2>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	0042      	lsls	r2, r0, #1
 8000b50:	0245      	lsls	r5, r0, #9
 8000b52:	024e      	lsls	r6, r1, #9
 8000b54:	004c      	lsls	r4, r1, #1
 8000b56:	0fc3      	lsrs	r3, r0, #31
 8000b58:	0a6d      	lsrs	r5, r5, #9
 8000b5a:	0e12      	lsrs	r2, r2, #24
 8000b5c:	0a76      	lsrs	r6, r6, #9
 8000b5e:	0e24      	lsrs	r4, r4, #24
 8000b60:	0fc8      	lsrs	r0, r1, #31
 8000b62:	2aff      	cmp	r2, #255	; 0xff
 8000b64:	d01b      	beq.n	8000b9e <__gesf2+0x52>
 8000b66:	2cff      	cmp	r4, #255	; 0xff
 8000b68:	d00e      	beq.n	8000b88 <__gesf2+0x3c>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d11b      	bne.n	8000ba6 <__gesf2+0x5a>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d101      	bne.n	8000b76 <__gesf2+0x2a>
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d01c      	beq.n	8000bb0 <__gesf2+0x64>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d00c      	beq.n	8000b94 <__gesf2+0x48>
 8000b7a:	4283      	cmp	r3, r0
 8000b7c:	d01c      	beq.n	8000bb8 <__gesf2+0x6c>
 8000b7e:	2102      	movs	r1, #2
 8000b80:	1e58      	subs	r0, r3, #1
 8000b82:	4008      	ands	r0, r1
 8000b84:	3801      	subs	r0, #1
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d122      	bne.n	8000bd2 <__gesf2+0x86>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d1f4      	bne.n	8000b7a <__gesf2+0x2e>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1f2      	bne.n	8000b7a <__gesf2+0x2e>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1f6      	bne.n	8000b86 <__gesf2+0x3a>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	e7f3      	b.n	8000b86 <__gesf2+0x3a>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d117      	bne.n	8000bd2 <__gesf2+0x86>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d0f0      	beq.n	8000b88 <__gesf2+0x3c>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d1e7      	bne.n	8000b7a <__gesf2+0x2e>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d1e5      	bne.n	8000b7a <__gesf2+0x2e>
 8000bae:	e7e6      	b.n	8000b7e <__gesf2+0x32>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e7      	beq.n	8000b86 <__gesf2+0x3a>
 8000bb6:	e7e2      	b.n	8000b7e <__gesf2+0x32>
 8000bb8:	42a2      	cmp	r2, r4
 8000bba:	dc05      	bgt.n	8000bc8 <__gesf2+0x7c>
 8000bbc:	dbea      	blt.n	8000b94 <__gesf2+0x48>
 8000bbe:	42b5      	cmp	r5, r6
 8000bc0:	d802      	bhi.n	8000bc8 <__gesf2+0x7c>
 8000bc2:	d3e7      	bcc.n	8000b94 <__gesf2+0x48>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7de      	b.n	8000b86 <__gesf2+0x3a>
 8000bc8:	4243      	negs	r3, r0
 8000bca:	4158      	adcs	r0, r3
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7d9      	b.n	8000b86 <__gesf2+0x3a>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	e7d6      	b.n	8000b86 <__gesf2+0x3a>

08000bd8 <__lesf2>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0245      	lsls	r5, r0, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	0a76      	lsrs	r6, r6, #9
 8000bea:	0e24      	lsrs	r4, r4, #24
 8000bec:	0fc8      	lsrs	r0, r1, #31
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d00b      	beq.n	8000c0a <__lesf2+0x32>
 8000bf2:	2cff      	cmp	r4, #255	; 0xff
 8000bf4:	d00d      	beq.n	8000c12 <__lesf2+0x3a>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d11f      	bne.n	8000c3a <__lesf2+0x62>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d116      	bne.n	8000c2c <__lesf2+0x54>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d114      	bne.n	8000c2c <__lesf2+0x54>
 8000c02:	2000      	movs	r0, #0
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d010      	beq.n	8000c2a <__lesf2+0x52>
 8000c08:	e009      	b.n	8000c1e <__lesf2+0x46>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d10c      	bne.n	8000c28 <__lesf2+0x50>
 8000c0e:	2cff      	cmp	r4, #255	; 0xff
 8000c10:	d113      	bne.n	8000c3a <__lesf2+0x62>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d108      	bne.n	8000c28 <__lesf2+0x50>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d008      	beq.n	8000c2c <__lesf2+0x54>
 8000c1a:	4283      	cmp	r3, r0
 8000c1c:	d012      	beq.n	8000c44 <__lesf2+0x6c>
 8000c1e:	2102      	movs	r1, #2
 8000c20:	1e58      	subs	r0, r3, #1
 8000c22:	4008      	ands	r0, r1
 8000c24:	3801      	subs	r0, #1
 8000c26:	e000      	b.n	8000c2a <__lesf2+0x52>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d1f4      	bne.n	8000c1a <__lesf2+0x42>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d1fa      	bne.n	8000c2a <__lesf2+0x52>
 8000c34:	2001      	movs	r0, #1
 8000c36:	4240      	negs	r0, r0
 8000c38:	e7f7      	b.n	8000c2a <__lesf2+0x52>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d1ed      	bne.n	8000c1a <__lesf2+0x42>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d1eb      	bne.n	8000c1a <__lesf2+0x42>
 8000c42:	e7ec      	b.n	8000c1e <__lesf2+0x46>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__lesf2+0x7c>
 8000c48:	dbf2      	blt.n	8000c30 <__lesf2+0x58>
 8000c4a:	42b5      	cmp	r5, r6
 8000c4c:	d802      	bhi.n	8000c54 <__lesf2+0x7c>
 8000c4e:	d3ef      	bcc.n	8000c30 <__lesf2+0x58>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7ea      	b.n	8000c2a <__lesf2+0x52>
 8000c54:	4243      	negs	r3, r0
 8000c56:	4158      	adcs	r0, r3
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	3801      	subs	r0, #1
 8000c5c:	e7e5      	b.n	8000c2a <__lesf2+0x52>
 8000c5e:	46c0      	nop			; (mov r8, r8)

08000c60 <__aeabi_fmul>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	464f      	mov	r7, r9
 8000c64:	4646      	mov	r6, r8
 8000c66:	46d6      	mov	lr, sl
 8000c68:	0244      	lsls	r4, r0, #9
 8000c6a:	0045      	lsls	r5, r0, #1
 8000c6c:	b5c0      	push	{r6, r7, lr}
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	1c0f      	adds	r7, r1, #0
 8000c72:	0e2d      	lsrs	r5, r5, #24
 8000c74:	0fc6      	lsrs	r6, r0, #31
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fmul+0x1c>
 8000c7a:	e08d      	b.n	8000d98 <__aeabi_fmul+0x138>
 8000c7c:	2dff      	cmp	r5, #255	; 0xff
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_fmul+0x22>
 8000c80:	e092      	b.n	8000da8 <__aeabi_fmul+0x148>
 8000c82:	2300      	movs	r3, #0
 8000c84:	2080      	movs	r0, #128	; 0x80
 8000c86:	4699      	mov	r9, r3
 8000c88:	469a      	mov	sl, r3
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	04c0      	lsls	r0, r0, #19
 8000c8e:	4304      	orrs	r4, r0
 8000c90:	3d7f      	subs	r5, #127	; 0x7f
 8000c92:	0278      	lsls	r0, r7, #9
 8000c94:	0a43      	lsrs	r3, r0, #9
 8000c96:	4698      	mov	r8, r3
 8000c98:	007b      	lsls	r3, r7, #1
 8000c9a:	0e1b      	lsrs	r3, r3, #24
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fmul+0x44>
 8000ca2:	e070      	b.n	8000d86 <__aeabi_fmul+0x126>
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fmul+0x4a>
 8000ca8:	e086      	b.n	8000db8 <__aeabi_fmul+0x158>
 8000caa:	4642      	mov	r2, r8
 8000cac:	00d0      	lsls	r0, r2, #3
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	3b7f      	subs	r3, #127	; 0x7f
 8000cb2:	18ed      	adds	r5, r5, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	04d2      	lsls	r2, r2, #19
 8000cb8:	4302      	orrs	r2, r0
 8000cba:	4690      	mov	r8, r2
 8000cbc:	469c      	mov	ip, r3
 8000cbe:	0031      	movs	r1, r6
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	4079      	eors	r1, r7
 8000cc4:	1c68      	adds	r0, r5, #1
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d81c      	bhi.n	8000d04 <__aeabi_fmul+0xa4>
 8000cca:	4a76      	ldr	r2, [pc, #472]	; (8000ea4 <__aeabi_fmul+0x244>)
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	0039      	movs	r1, r7
 8000cd4:	4644      	mov	r4, r8
 8000cd6:	46e2      	mov	sl, ip
 8000cd8:	4653      	mov	r3, sl
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d00f      	beq.n	8000cfe <__aeabi_fmul+0x9e>
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fmul+0x84>
 8000ce2:	e0d7      	b.n	8000e94 <__aeabi_fmul+0x234>
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d137      	bne.n	8000d58 <__aeabi_fmul+0xf8>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	2400      	movs	r4, #0
 8000cec:	05c0      	lsls	r0, r0, #23
 8000cee:	4320      	orrs	r0, r4
 8000cf0:	07c9      	lsls	r1, r1, #31
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	bce0      	pop	{r5, r6, r7}
 8000cf6:	46ba      	mov	sl, r7
 8000cf8:	46b1      	mov	r9, r6
 8000cfa:	46a8      	mov	r8, r5
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfe:	20ff      	movs	r0, #255	; 0xff
 8000d00:	2400      	movs	r4, #0
 8000d02:	e7f3      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d04:	0c26      	lsrs	r6, r4, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c22      	lsrs	r2, r4, #16
 8000d0a:	4644      	mov	r4, r8
 8000d0c:	0424      	lsls	r4, r4, #16
 8000d0e:	0c24      	lsrs	r4, r4, #16
 8000d10:	4643      	mov	r3, r8
 8000d12:	0027      	movs	r7, r4
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	4357      	muls	r7, r2
 8000d18:	4374      	muls	r4, r6
 8000d1a:	435a      	muls	r2, r3
 8000d1c:	435e      	muls	r6, r3
 8000d1e:	1912      	adds	r2, r2, r4
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	189b      	adds	r3, r3, r2
 8000d24:	429c      	cmp	r4, r3
 8000d26:	d903      	bls.n	8000d30 <__aeabi_fmul+0xd0>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	4466      	add	r6, ip
 8000d30:	043f      	lsls	r7, r7, #16
 8000d32:	041a      	lsls	r2, r3, #16
 8000d34:	0c3f      	lsrs	r7, r7, #16
 8000d36:	19d2      	adds	r2, r2, r7
 8000d38:	0194      	lsls	r4, r2, #6
 8000d3a:	1e67      	subs	r7, r4, #1
 8000d3c:	41bc      	sbcs	r4, r7
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	0e92      	lsrs	r2, r2, #26
 8000d42:	199b      	adds	r3, r3, r6
 8000d44:	4314      	orrs	r4, r2
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	d400      	bmi.n	8000d50 <__aeabi_fmul+0xf0>
 8000d4e:	e09b      	b.n	8000e88 <__aeabi_fmul+0x228>
 8000d50:	2301      	movs	r3, #1
 8000d52:	0862      	lsrs	r2, r4, #1
 8000d54:	401c      	ands	r4, r3
 8000d56:	4314      	orrs	r4, r2
 8000d58:	0002      	movs	r2, r0
 8000d5a:	327f      	adds	r2, #127	; 0x7f
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	dd64      	ble.n	8000e2a <__aeabi_fmul+0x1ca>
 8000d60:	0763      	lsls	r3, r4, #29
 8000d62:	d004      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d64:	230f      	movs	r3, #15
 8000d66:	4023      	ands	r3, r4
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d6c:	3404      	adds	r4, #4
 8000d6e:	0123      	lsls	r3, r4, #4
 8000d70:	d503      	bpl.n	8000d7a <__aeabi_fmul+0x11a>
 8000d72:	0002      	movs	r2, r0
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <__aeabi_fmul+0x248>)
 8000d76:	3280      	adds	r2, #128	; 0x80
 8000d78:	401c      	ands	r4, r3
 8000d7a:	2afe      	cmp	r2, #254	; 0xfe
 8000d7c:	dcbf      	bgt.n	8000cfe <__aeabi_fmul+0x9e>
 8000d7e:	01a4      	lsls	r4, r4, #6
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	b2d0      	uxtb	r0, r2
 8000d84:	e7b2      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d86:	4643      	mov	r3, r8
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d13d      	bne.n	8000e08 <__aeabi_fmul+0x1a8>
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	3301      	adds	r3, #1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	e792      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d129      	bne.n	8000df0 <__aeabi_fmul+0x190>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b03      	subs	r3, #3
 8000da2:	2500      	movs	r5, #0
 8000da4:	469a      	mov	sl, r3
 8000da6:	e774      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d11b      	bne.n	8000de4 <__aeabi_fmul+0x184>
 8000dac:	2308      	movs	r3, #8
 8000dae:	4699      	mov	r9, r3
 8000db0:	3b06      	subs	r3, #6
 8000db2:	25ff      	movs	r5, #255	; 0xff
 8000db4:	469a      	mov	sl, r3
 8000db6:	e76c      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000db8:	4643      	mov	r3, r8
 8000dba:	35ff      	adds	r5, #255	; 0xff
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10b      	bne.n	8000dd8 <__aeabi_fmul+0x178>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	469c      	mov	ip, r3
 8000dca:	e778      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000dcc:	4653      	mov	r3, sl
 8000dce:	0031      	movs	r1, r6
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fmul+0x176>
 8000dd4:	e783      	b.n	8000cde <__aeabi_fmul+0x7e>
 8000dd6:	e792      	b.n	8000cfe <__aeabi_fmul+0x9e>
 8000dd8:	2303      	movs	r3, #3
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000de4:	230c      	movs	r3, #12
 8000de6:	4699      	mov	r9, r3
 8000de8:	3b09      	subs	r3, #9
 8000dea:	25ff      	movs	r5, #255	; 0xff
 8000dec:	469a      	mov	sl, r3
 8000dee:	e750      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000df0:	0020      	movs	r0, r4
 8000df2:	f002 f92d 	bl	8003050 <__clzsi2>
 8000df6:	2576      	movs	r5, #118	; 0x76
 8000df8:	1f43      	subs	r3, r0, #5
 8000dfa:	409c      	lsls	r4, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	426d      	negs	r5, r5
 8000e00:	4699      	mov	r9, r3
 8000e02:	469a      	mov	sl, r3
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	e744      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f002 f921 	bl	8003050 <__clzsi2>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	1f43      	subs	r3, r0, #5
 8000e12:	409a      	lsls	r2, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	1a2d      	subs	r5, r5, r0
 8000e18:	4690      	mov	r8, r2
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	3d76      	subs	r5, #118	; 0x76
 8000e1e:	e74e      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	2100      	movs	r1, #0
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	03e4      	lsls	r4, r4, #15
 8000e28:	e760      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	2b1b      	cmp	r3, #27
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fmul+0x1d4>
 8000e32:	e759      	b.n	8000ce8 <__aeabi_fmul+0x88>
 8000e34:	0022      	movs	r2, r4
 8000e36:	309e      	adds	r0, #158	; 0x9e
 8000e38:	40da      	lsrs	r2, r3
 8000e3a:	4084      	lsls	r4, r0
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	1e62      	subs	r2, r4, #1
 8000e40:	4194      	sbcs	r4, r2
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0763      	lsls	r3, r4, #29
 8000e46:	d004      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e48:	230f      	movs	r3, #15
 8000e4a:	4023      	ands	r3, r4
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e50:	3404      	adds	r4, #4
 8000e52:	0163      	lsls	r3, r4, #5
 8000e54:	d51a      	bpl.n	8000e8c <__aeabi_fmul+0x22c>
 8000e56:	2001      	movs	r0, #1
 8000e58:	2400      	movs	r4, #0
 8000e5a:	e747      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e5c:	2080      	movs	r0, #128	; 0x80
 8000e5e:	03c0      	lsls	r0, r0, #15
 8000e60:	4204      	tst	r4, r0
 8000e62:	d009      	beq.n	8000e78 <__aeabi_fmul+0x218>
 8000e64:	4643      	mov	r3, r8
 8000e66:	4203      	tst	r3, r0
 8000e68:	d106      	bne.n	8000e78 <__aeabi_fmul+0x218>
 8000e6a:	4644      	mov	r4, r8
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	0264      	lsls	r4, r4, #9
 8000e70:	0039      	movs	r1, r7
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	0a64      	lsrs	r4, r4, #9
 8000e76:	e739      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e78:	2080      	movs	r0, #128	; 0x80
 8000e7a:	03c0      	lsls	r0, r0, #15
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	0264      	lsls	r4, r4, #9
 8000e80:	0031      	movs	r1, r6
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	0a64      	lsrs	r4, r4, #9
 8000e86:	e731      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e88:	0028      	movs	r0, r5
 8000e8a:	e765      	b.n	8000d58 <__aeabi_fmul+0xf8>
 8000e8c:	01a4      	lsls	r4, r4, #6
 8000e8e:	2000      	movs	r0, #0
 8000e90:	0a64      	lsrs	r4, r4, #9
 8000e92:	e72b      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e94:	2080      	movs	r0, #128	; 0x80
 8000e96:	03c0      	lsls	r0, r0, #15
 8000e98:	4304      	orrs	r4, r0
 8000e9a:	0264      	lsls	r4, r4, #9
 8000e9c:	20ff      	movs	r0, #255	; 0xff
 8000e9e:	0a64      	lsrs	r4, r4, #9
 8000ea0:	e724      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	08018098 	.word	0x08018098
 8000ea8:	f7ffffff 	.word	0xf7ffffff

08000eac <__aeabi_fsub>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	46ce      	mov	lr, r9
 8000eb0:	4647      	mov	r7, r8
 8000eb2:	0243      	lsls	r3, r0, #9
 8000eb4:	0a5b      	lsrs	r3, r3, #9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	00da      	lsls	r2, r3, #3
 8000eba:	4694      	mov	ip, r2
 8000ebc:	0a72      	lsrs	r2, r6, #9
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	0045      	lsls	r5, r0, #1
 8000ec2:	004a      	lsls	r2, r1, #1
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	0e2d      	lsrs	r5, r5, #24
 8000ec8:	001f      	movs	r7, r3
 8000eca:	0fc4      	lsrs	r4, r0, #31
 8000ecc:	0e12      	lsrs	r2, r2, #24
 8000ece:	0fc9      	lsrs	r1, r1, #31
 8000ed0:	09b6      	lsrs	r6, r6, #6
 8000ed2:	2aff      	cmp	r2, #255	; 0xff
 8000ed4:	d05b      	beq.n	8000f8e <__aeabi_fsub+0xe2>
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4041      	eors	r1, r0
 8000eda:	428c      	cmp	r4, r1
 8000edc:	d039      	beq.n	8000f52 <__aeabi_fsub+0xa6>
 8000ede:	1aa8      	subs	r0, r5, r2
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	dd5a      	ble.n	8000f9a <__aeabi_fsub+0xee>
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d06a      	beq.n	8000fbe <__aeabi_fsub+0x112>
 8000ee8:	2dff      	cmp	r5, #255	; 0xff
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x42>
 8000eec:	e0d9      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	04d2      	lsls	r2, r2, #19
 8000ef2:	4316      	orrs	r6, r2
 8000ef4:	281b      	cmp	r0, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0x4e>
 8000ef8:	e0e9      	b.n	80010ce <__aeabi_fsub+0x222>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4663      	mov	r3, ip
 8000efe:	1a18      	subs	r0, r3, r0
 8000f00:	0143      	lsls	r3, r0, #5
 8000f02:	d400      	bmi.n	8000f06 <__aeabi_fsub+0x5a>
 8000f04:	e0b4      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8000f06:	0180      	lsls	r0, r0, #6
 8000f08:	0987      	lsrs	r7, r0, #6
 8000f0a:	0038      	movs	r0, r7
 8000f0c:	f002 f8a0 	bl	8003050 <__clzsi2>
 8000f10:	3805      	subs	r0, #5
 8000f12:	4087      	lsls	r7, r0
 8000f14:	4285      	cmp	r5, r0
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x6e>
 8000f18:	e0cc      	b.n	80010b4 <__aeabi_fsub+0x208>
 8000f1a:	1a2d      	subs	r5, r5, r0
 8000f1c:	48b5      	ldr	r0, [pc, #724]	; (80011f4 <__aeabi_fsub+0x348>)
 8000f1e:	4038      	ands	r0, r7
 8000f20:	0743      	lsls	r3, r0, #29
 8000f22:	d004      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f24:	230f      	movs	r3, #15
 8000f26:	4003      	ands	r3, r0
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f2c:	3004      	adds	r0, #4
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0x88>
 8000f32:	e0a0      	b.n	8001076 <__aeabi_fsub+0x1ca>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	; 0xfe
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x90>
 8000f3a:	e08d      	b.n	8001058 <__aeabi_fsub+0x1ac>
 8000f3c:	0180      	lsls	r0, r0, #6
 8000f3e:	0a47      	lsrs	r7, r0, #9
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	05d0      	lsls	r0, r2, #23
 8000f44:	4338      	orrs	r0, r7
 8000f46:	07e4      	lsls	r4, r4, #31
 8000f48:	4320      	orrs	r0, r4
 8000f4a:	bcc0      	pop	{r6, r7}
 8000f4c:	46b9      	mov	r9, r7
 8000f4e:	46b0      	mov	r8, r6
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f52:	1aa8      	subs	r0, r5, r2
 8000f54:	4680      	mov	r8, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	dd45      	ble.n	8000fe6 <__aeabi_fsub+0x13a>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d070      	beq.n	8001040 <__aeabi_fsub+0x194>
 8000f5e:	2dff      	cmp	r5, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0xb8>
 8000f62:	e09e      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	04db      	lsls	r3, r3, #19
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	2b1b      	cmp	r3, #27
 8000f6e:	dc00      	bgt.n	8000f72 <__aeabi_fsub+0xc6>
 8000f70:	e0d2      	b.n	8001118 <__aeabi_fsub+0x26c>
 8000f72:	2001      	movs	r0, #1
 8000f74:	4460      	add	r0, ip
 8000f76:	0143      	lsls	r3, r0, #5
 8000f78:	d57a      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 8000f7a:	3501      	adds	r5, #1
 8000f7c:	2dff      	cmp	r5, #255	; 0xff
 8000f7e:	d06b      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4a9d      	ldr	r2, [pc, #628]	; (80011f8 <__aeabi_fsub+0x34c>)
 8000f84:	4003      	ands	r3, r0
 8000f86:	0840      	lsrs	r0, r0, #1
 8000f88:	4010      	ands	r0, r2
 8000f8a:	4318      	orrs	r0, r3
 8000f8c:	e7c8      	b.n	8000f20 <__aeabi_fsub+0x74>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d020      	beq.n	8000fd4 <__aeabi_fsub+0x128>
 8000f92:	428c      	cmp	r4, r1
 8000f94:	d023      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000f96:	0028      	movs	r0, r5
 8000f98:	38ff      	subs	r0, #255	; 0xff
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d039      	beq.n	8001012 <__aeabi_fsub+0x166>
 8000f9e:	1b57      	subs	r7, r2, r5
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0xfa>
 8000fa4:	e09d      	b.n	80010e2 <__aeabi_fsub+0x236>
 8000fa6:	4663      	mov	r3, ip
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x102>
 8000fac:	e0db      	b.n	8001166 <__aeabi_fsub+0x2ba>
 8000fae:	1e7b      	subs	r3, r7, #1
 8000fb0:	2f01      	cmp	r7, #1
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x10a>
 8000fb4:	e10d      	b.n	80011d2 <__aeabi_fsub+0x326>
 8000fb6:	2fff      	cmp	r7, #255	; 0xff
 8000fb8:	d071      	beq.n	800109e <__aeabi_fsub+0x1f2>
 8000fba:	001f      	movs	r7, r3
 8000fbc:	e098      	b.n	80010f0 <__aeabi_fsub+0x244>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x118>
 8000fc2:	e0a7      	b.n	8001114 <__aeabi_fsub+0x268>
 8000fc4:	1e42      	subs	r2, r0, #1
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x120>
 8000fca:	e0e6      	b.n	800119a <__aeabi_fsub+0x2ee>
 8000fcc:	28ff      	cmp	r0, #255	; 0xff
 8000fce:	d068      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	e78f      	b.n	8000ef4 <__aeabi_fsub+0x48>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	4041      	eors	r1, r0
 8000fd8:	42a1      	cmp	r1, r4
 8000fda:	d000      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000fdc:	e77f      	b.n	8000ede <__aeabi_fsub+0x32>
 8000fde:	20ff      	movs	r0, #255	; 0xff
 8000fe0:	4240      	negs	r0, r0
 8000fe2:	4680      	mov	r8, r0
 8000fe4:	44a8      	add	r8, r5
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d038      	beq.n	800105e <__aeabi_fsub+0x1b2>
 8000fec:	1b51      	subs	r1, r2, r5
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x148>
 8000ff2:	e0ae      	b.n	8001152 <__aeabi_fsub+0x2a6>
 8000ff4:	2aff      	cmp	r2, #255	; 0xff
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x14e>
 8000ff8:	e0df      	b.n	80011ba <__aeabi_fsub+0x30e>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	4318      	orrs	r0, r3
 8001002:	4684      	mov	ip, r0
 8001004:	291b      	cmp	r1, #27
 8001006:	dc00      	bgt.n	800100a <__aeabi_fsub+0x15e>
 8001008:	e0d9      	b.n	80011be <__aeabi_fsub+0x312>
 800100a:	2001      	movs	r0, #1
 800100c:	0015      	movs	r5, r2
 800100e:	1980      	adds	r0, r0, r6
 8001010:	e7b1      	b.n	8000f76 <__aeabi_fsub+0xca>
 8001012:	20fe      	movs	r0, #254	; 0xfe
 8001014:	1c6a      	adds	r2, r5, #1
 8001016:	4210      	tst	r0, r2
 8001018:	d171      	bne.n	80010fe <__aeabi_fsub+0x252>
 800101a:	2d00      	cmp	r5, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x174>
 800101e:	e0a6      	b.n	800116e <__aeabi_fsub+0x2c2>
 8001020:	4663      	mov	r3, ip
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x17c>
 8001026:	e0d9      	b.n	80011dc <__aeabi_fsub+0x330>
 8001028:	2200      	movs	r2, #0
 800102a:	2e00      	cmp	r6, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x184>
 800102e:	e788      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001030:	1b98      	subs	r0, r3, r6
 8001032:	0143      	lsls	r3, r0, #5
 8001034:	d400      	bmi.n	8001038 <__aeabi_fsub+0x18c>
 8001036:	e0e1      	b.n	80011fc <__aeabi_fsub+0x350>
 8001038:	4663      	mov	r3, ip
 800103a:	000c      	movs	r4, r1
 800103c:	1af0      	subs	r0, r6, r3
 800103e:	e76f      	b.n	8000f20 <__aeabi_fsub+0x74>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x19a>
 8001044:	e0b7      	b.n	80011b6 <__aeabi_fsub+0x30a>
 8001046:	0002      	movs	r2, r0
 8001048:	3a01      	subs	r2, #1
 800104a:	2801      	cmp	r0, #1
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x1a4>
 800104e:	e09c      	b.n	800118a <__aeabi_fsub+0x2de>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d026      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001054:	4690      	mov	r8, r2
 8001056:	e788      	b.n	8000f6a <__aeabi_fsub+0xbe>
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	2700      	movs	r7, #0
 800105c:	e771      	b.n	8000f42 <__aeabi_fsub+0x96>
 800105e:	20fe      	movs	r0, #254	; 0xfe
 8001060:	1c6a      	adds	r2, r5, #1
 8001062:	4210      	tst	r0, r2
 8001064:	d064      	beq.n	8001130 <__aeabi_fsub+0x284>
 8001066:	2aff      	cmp	r2, #255	; 0xff
 8001068:	d0f6      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 800106a:	0015      	movs	r5, r2
 800106c:	4466      	add	r6, ip
 800106e:	0870      	lsrs	r0, r6, #1
 8001070:	0743      	lsls	r3, r0, #29
 8001072:	d000      	beq.n	8001076 <__aeabi_fsub+0x1ca>
 8001074:	e756      	b.n	8000f24 <__aeabi_fsub+0x78>
 8001076:	08c3      	lsrs	r3, r0, #3
 8001078:	2dff      	cmp	r5, #255	; 0xff
 800107a:	d012      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	0a5f      	lsrs	r7, r3, #9
 8001080:	b2ea      	uxtb	r2, r5
 8001082:	e75e      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001084:	4662      	mov	r2, ip
 8001086:	2a00      	cmp	r2, #0
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x1e0>
 800108a:	e096      	b.n	80011ba <__aeabi_fsub+0x30e>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d008      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	03d2      	lsls	r2, r2, #15
 8001094:	4213      	tst	r3, r2
 8001096:	d004      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001098:	4648      	mov	r0, r9
 800109a:	4210      	tst	r0, r2
 800109c:	d101      	bne.n	80010a2 <__aeabi_fsub+0x1f6>
 800109e:	000c      	movs	r4, r1
 80010a0:	464b      	mov	r3, r9
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0d8      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 80010a6:	2780      	movs	r7, #128	; 0x80
 80010a8:	03ff      	lsls	r7, r7, #15
 80010aa:	431f      	orrs	r7, r3
 80010ac:	027f      	lsls	r7, r7, #9
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	0a7f      	lsrs	r7, r7, #9
 80010b2:	e746      	b.n	8000f42 <__aeabi_fsub+0x96>
 80010b4:	2320      	movs	r3, #32
 80010b6:	003a      	movs	r2, r7
 80010b8:	1b45      	subs	r5, r0, r5
 80010ba:	0038      	movs	r0, r7
 80010bc:	3501      	adds	r5, #1
 80010be:	40ea      	lsrs	r2, r5
 80010c0:	1b5d      	subs	r5, r3, r5
 80010c2:	40a8      	lsls	r0, r5
 80010c4:	1e43      	subs	r3, r0, #1
 80010c6:	4198      	sbcs	r0, r3
 80010c8:	2500      	movs	r5, #0
 80010ca:	4310      	orrs	r0, r2
 80010cc:	e728      	b.n	8000f20 <__aeabi_fsub+0x74>
 80010ce:	2320      	movs	r3, #32
 80010d0:	1a1b      	subs	r3, r3, r0
 80010d2:	0032      	movs	r2, r6
 80010d4:	409e      	lsls	r6, r3
 80010d6:	40c2      	lsrs	r2, r0
 80010d8:	0030      	movs	r0, r6
 80010da:	1e43      	subs	r3, r0, #1
 80010dc:	4198      	sbcs	r0, r3
 80010de:	4310      	orrs	r0, r2
 80010e0:	e70c      	b.n	8000efc <__aeabi_fsub+0x50>
 80010e2:	2aff      	cmp	r2, #255	; 0xff
 80010e4:	d0db      	beq.n	800109e <__aeabi_fsub+0x1f2>
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	4660      	mov	r0, ip
 80010ea:	04db      	lsls	r3, r3, #19
 80010ec:	4318      	orrs	r0, r3
 80010ee:	4684      	mov	ip, r0
 80010f0:	2f1b      	cmp	r7, #27
 80010f2:	dd56      	ble.n	80011a2 <__aeabi_fsub+0x2f6>
 80010f4:	2001      	movs	r0, #1
 80010f6:	000c      	movs	r4, r1
 80010f8:	0015      	movs	r5, r2
 80010fa:	1a30      	subs	r0, r6, r0
 80010fc:	e700      	b.n	8000f00 <__aeabi_fsub+0x54>
 80010fe:	4663      	mov	r3, ip
 8001100:	1b9f      	subs	r7, r3, r6
 8001102:	017b      	lsls	r3, r7, #5
 8001104:	d43d      	bmi.n	8001182 <__aeabi_fsub+0x2d6>
 8001106:	2f00      	cmp	r7, #0
 8001108:	d000      	beq.n	800110c <__aeabi_fsub+0x260>
 800110a:	e6fe      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800110c:	2400      	movs	r4, #0
 800110e:	2200      	movs	r2, #0
 8001110:	2700      	movs	r7, #0
 8001112:	e716      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001114:	0005      	movs	r5, r0
 8001116:	e7af      	b.n	8001078 <__aeabi_fsub+0x1cc>
 8001118:	0032      	movs	r2, r6
 800111a:	4643      	mov	r3, r8
 800111c:	4641      	mov	r1, r8
 800111e:	40da      	lsrs	r2, r3
 8001120:	2320      	movs	r3, #32
 8001122:	1a5b      	subs	r3, r3, r1
 8001124:	409e      	lsls	r6, r3
 8001126:	0030      	movs	r0, r6
 8001128:	1e43      	subs	r3, r0, #1
 800112a:	4198      	sbcs	r0, r3
 800112c:	4310      	orrs	r0, r2
 800112e:	e721      	b.n	8000f74 <__aeabi_fsub+0xc8>
 8001130:	2d00      	cmp	r5, #0
 8001132:	d1a7      	bne.n	8001084 <__aeabi_fsub+0x1d8>
 8001134:	4663      	mov	r3, ip
 8001136:	2b00      	cmp	r3, #0
 8001138:	d059      	beq.n	80011ee <__aeabi_fsub+0x342>
 800113a:	2200      	movs	r2, #0
 800113c:	2e00      	cmp	r6, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_fsub+0x296>
 8001140:	e6ff      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001142:	0030      	movs	r0, r6
 8001144:	4460      	add	r0, ip
 8001146:	0143      	lsls	r3, r0, #5
 8001148:	d592      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <__aeabi_fsub+0x348>)
 800114c:	3501      	adds	r5, #1
 800114e:	4018      	ands	r0, r3
 8001150:	e78e      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001152:	4663      	mov	r3, ip
 8001154:	2b00      	cmp	r3, #0
 8001156:	d047      	beq.n	80011e8 <__aeabi_fsub+0x33c>
 8001158:	1e4b      	subs	r3, r1, #1
 800115a:	2901      	cmp	r1, #1
 800115c:	d015      	beq.n	800118a <__aeabi_fsub+0x2de>
 800115e:	29ff      	cmp	r1, #255	; 0xff
 8001160:	d02b      	beq.n	80011ba <__aeabi_fsub+0x30e>
 8001162:	0019      	movs	r1, r3
 8001164:	e74e      	b.n	8001004 <__aeabi_fsub+0x158>
 8001166:	000c      	movs	r4, r1
 8001168:	464b      	mov	r3, r9
 800116a:	003d      	movs	r5, r7
 800116c:	e784      	b.n	8001078 <__aeabi_fsub+0x1cc>
 800116e:	4662      	mov	r2, ip
 8001170:	2a00      	cmp	r2, #0
 8001172:	d18b      	bne.n	800108c <__aeabi_fsub+0x1e0>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d192      	bne.n	800109e <__aeabi_fsub+0x1f2>
 8001178:	2780      	movs	r7, #128	; 0x80
 800117a:	2400      	movs	r4, #0
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	03ff      	lsls	r7, r7, #15
 8001180:	e6df      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001182:	4663      	mov	r3, ip
 8001184:	000c      	movs	r4, r1
 8001186:	1af7      	subs	r7, r6, r3
 8001188:	e6bf      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800118a:	0030      	movs	r0, r6
 800118c:	4460      	add	r0, ip
 800118e:	2501      	movs	r5, #1
 8001190:	0143      	lsls	r3, r0, #5
 8001192:	d400      	bmi.n	8001196 <__aeabi_fsub+0x2ea>
 8001194:	e76c      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001196:	2502      	movs	r5, #2
 8001198:	e6f2      	b.n	8000f80 <__aeabi_fsub+0xd4>
 800119a:	4663      	mov	r3, ip
 800119c:	2501      	movs	r5, #1
 800119e:	1b98      	subs	r0, r3, r6
 80011a0:	e6ae      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011a2:	2320      	movs	r3, #32
 80011a4:	4664      	mov	r4, ip
 80011a6:	4660      	mov	r0, ip
 80011a8:	40fc      	lsrs	r4, r7
 80011aa:	1bdf      	subs	r7, r3, r7
 80011ac:	40b8      	lsls	r0, r7
 80011ae:	1e43      	subs	r3, r0, #1
 80011b0:	4198      	sbcs	r0, r3
 80011b2:	4320      	orrs	r0, r4
 80011b4:	e79f      	b.n	80010f6 <__aeabi_fsub+0x24a>
 80011b6:	0005      	movs	r5, r0
 80011b8:	e75e      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ba:	464b      	mov	r3, r9
 80011bc:	e771      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 80011be:	2320      	movs	r3, #32
 80011c0:	4665      	mov	r5, ip
 80011c2:	4660      	mov	r0, ip
 80011c4:	40cd      	lsrs	r5, r1
 80011c6:	1a59      	subs	r1, r3, r1
 80011c8:	4088      	lsls	r0, r1
 80011ca:	1e43      	subs	r3, r0, #1
 80011cc:	4198      	sbcs	r0, r3
 80011ce:	4328      	orrs	r0, r5
 80011d0:	e71c      	b.n	800100c <__aeabi_fsub+0x160>
 80011d2:	4663      	mov	r3, ip
 80011d4:	000c      	movs	r4, r1
 80011d6:	2501      	movs	r5, #1
 80011d8:	1af0      	subs	r0, r6, r3
 80011da:	e691      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d095      	beq.n	800110c <__aeabi_fsub+0x260>
 80011e0:	000c      	movs	r4, r1
 80011e2:	464f      	mov	r7, r9
 80011e4:	2200      	movs	r2, #0
 80011e6:	e6ac      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011e8:	464b      	mov	r3, r9
 80011ea:	000d      	movs	r5, r1
 80011ec:	e744      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ee:	464f      	mov	r7, r9
 80011f0:	2200      	movs	r2, #0
 80011f2:	e6a6      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011f4:	fbffffff 	.word	0xfbffffff
 80011f8:	7dffffff 	.word	0x7dffffff
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d000      	beq.n	8001202 <__aeabi_fsub+0x356>
 8001200:	e736      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001202:	2400      	movs	r4, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e69c      	b.n	8000f42 <__aeabi_fsub+0x96>

08001208 <__aeabi_f2iz>:
 8001208:	0241      	lsls	r1, r0, #9
 800120a:	0042      	lsls	r2, r0, #1
 800120c:	0fc3      	lsrs	r3, r0, #31
 800120e:	0a49      	lsrs	r1, r1, #9
 8001210:	2000      	movs	r0, #0
 8001212:	0e12      	lsrs	r2, r2, #24
 8001214:	2a7e      	cmp	r2, #126	; 0x7e
 8001216:	dd03      	ble.n	8001220 <__aeabi_f2iz+0x18>
 8001218:	2a9d      	cmp	r2, #157	; 0x9d
 800121a:	dd02      	ble.n	8001222 <__aeabi_f2iz+0x1a>
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <__aeabi_f2iz+0x3c>)
 800121e:	1898      	adds	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	2080      	movs	r0, #128	; 0x80
 8001224:	0400      	lsls	r0, r0, #16
 8001226:	4301      	orrs	r1, r0
 8001228:	2a95      	cmp	r2, #149	; 0x95
 800122a:	dc07      	bgt.n	800123c <__aeabi_f2iz+0x34>
 800122c:	2096      	movs	r0, #150	; 0x96
 800122e:	1a82      	subs	r2, r0, r2
 8001230:	40d1      	lsrs	r1, r2
 8001232:	4248      	negs	r0, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f3      	bne.n	8001220 <__aeabi_f2iz+0x18>
 8001238:	0008      	movs	r0, r1
 800123a:	e7f1      	b.n	8001220 <__aeabi_f2iz+0x18>
 800123c:	3a96      	subs	r2, #150	; 0x96
 800123e:	4091      	lsls	r1, r2
 8001240:	e7f7      	b.n	8001232 <__aeabi_f2iz+0x2a>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	7fffffff 	.word	0x7fffffff

08001248 <__aeabi_i2f>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	2800      	cmp	r0, #0
 800124c:	d013      	beq.n	8001276 <__aeabi_i2f+0x2e>
 800124e:	17c3      	asrs	r3, r0, #31
 8001250:	18c6      	adds	r6, r0, r3
 8001252:	405e      	eors	r6, r3
 8001254:	0fc4      	lsrs	r4, r0, #31
 8001256:	0030      	movs	r0, r6
 8001258:	f001 fefa 	bl	8003050 <__clzsi2>
 800125c:	239e      	movs	r3, #158	; 0x9e
 800125e:	0005      	movs	r5, r0
 8001260:	1a1b      	subs	r3, r3, r0
 8001262:	2b96      	cmp	r3, #150	; 0x96
 8001264:	dc0f      	bgt.n	8001286 <__aeabi_i2f+0x3e>
 8001266:	2808      	cmp	r0, #8
 8001268:	dd01      	ble.n	800126e <__aeabi_i2f+0x26>
 800126a:	3d08      	subs	r5, #8
 800126c:	40ae      	lsls	r6, r5
 800126e:	0276      	lsls	r6, r6, #9
 8001270:	0a76      	lsrs	r6, r6, #9
 8001272:	b2d8      	uxtb	r0, r3
 8001274:	e002      	b.n	800127c <__aeabi_i2f+0x34>
 8001276:	2400      	movs	r4, #0
 8001278:	2000      	movs	r0, #0
 800127a:	2600      	movs	r6, #0
 800127c:	05c0      	lsls	r0, r0, #23
 800127e:	4330      	orrs	r0, r6
 8001280:	07e4      	lsls	r4, r4, #31
 8001282:	4320      	orrs	r0, r4
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001286:	2b99      	cmp	r3, #153	; 0x99
 8001288:	dd0c      	ble.n	80012a4 <__aeabi_i2f+0x5c>
 800128a:	2205      	movs	r2, #5
 800128c:	0031      	movs	r1, r6
 800128e:	1a12      	subs	r2, r2, r0
 8001290:	40d1      	lsrs	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	0001      	movs	r1, r0
 8001296:	0030      	movs	r0, r6
 8001298:	311b      	adds	r1, #27
 800129a:	4088      	lsls	r0, r1
 800129c:	1e41      	subs	r1, r0, #1
 800129e:	4188      	sbcs	r0, r1
 80012a0:	4302      	orrs	r2, r0
 80012a2:	0016      	movs	r6, r2
 80012a4:	2d05      	cmp	r5, #5
 80012a6:	dc12      	bgt.n	80012ce <__aeabi_i2f+0x86>
 80012a8:	0031      	movs	r1, r6
 80012aa:	4f0d      	ldr	r7, [pc, #52]	; (80012e0 <__aeabi_i2f+0x98>)
 80012ac:	4039      	ands	r1, r7
 80012ae:	0772      	lsls	r2, r6, #29
 80012b0:	d009      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012b2:	200f      	movs	r0, #15
 80012b4:	4030      	ands	r0, r6
 80012b6:	2804      	cmp	r0, #4
 80012b8:	d005      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012ba:	3104      	adds	r1, #4
 80012bc:	014a      	lsls	r2, r1, #5
 80012be:	d502      	bpl.n	80012c6 <__aeabi_i2f+0x7e>
 80012c0:	239f      	movs	r3, #159	; 0x9f
 80012c2:	4039      	ands	r1, r7
 80012c4:	1b5b      	subs	r3, r3, r5
 80012c6:	0189      	lsls	r1, r1, #6
 80012c8:	0a4e      	lsrs	r6, r1, #9
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	e7d6      	b.n	800127c <__aeabi_i2f+0x34>
 80012ce:	1f6a      	subs	r2, r5, #5
 80012d0:	4096      	lsls	r6, r2
 80012d2:	0031      	movs	r1, r6
 80012d4:	4f02      	ldr	r7, [pc, #8]	; (80012e0 <__aeabi_i2f+0x98>)
 80012d6:	4039      	ands	r1, r7
 80012d8:	0772      	lsls	r2, r6, #29
 80012da:	d0f4      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012dc:	e7e9      	b.n	80012b2 <__aeabi_i2f+0x6a>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	fbffffff 	.word	0xfbffffff

080012e4 <__aeabi_dadd>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464f      	mov	r7, r9
 80012e8:	4646      	mov	r6, r8
 80012ea:	46d6      	mov	lr, sl
 80012ec:	000d      	movs	r5, r1
 80012ee:	0004      	movs	r4, r0
 80012f0:	b5c0      	push	{r6, r7, lr}
 80012f2:	001f      	movs	r7, r3
 80012f4:	0011      	movs	r1, r2
 80012f6:	0328      	lsls	r0, r5, #12
 80012f8:	0f62      	lsrs	r2, r4, #29
 80012fa:	0a40      	lsrs	r0, r0, #9
 80012fc:	4310      	orrs	r0, r2
 80012fe:	007a      	lsls	r2, r7, #1
 8001300:	0d52      	lsrs	r2, r2, #21
 8001302:	00e3      	lsls	r3, r4, #3
 8001304:	033c      	lsls	r4, r7, #12
 8001306:	4691      	mov	r9, r2
 8001308:	0a64      	lsrs	r4, r4, #9
 800130a:	0ffa      	lsrs	r2, r7, #31
 800130c:	0f4f      	lsrs	r7, r1, #29
 800130e:	006e      	lsls	r6, r5, #1
 8001310:	4327      	orrs	r7, r4
 8001312:	4692      	mov	sl, r2
 8001314:	46b8      	mov	r8, r7
 8001316:	0d76      	lsrs	r6, r6, #21
 8001318:	0fed      	lsrs	r5, r5, #31
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	4295      	cmp	r5, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x3e>
 8001320:	e099      	b.n	8001456 <__aeabi_dadd+0x172>
 8001322:	464c      	mov	r4, r9
 8001324:	1b34      	subs	r4, r6, r4
 8001326:	46a4      	mov	ip, r4
 8001328:	2c00      	cmp	r4, #0
 800132a:	dc00      	bgt.n	800132e <__aeabi_dadd+0x4a>
 800132c:	e07c      	b.n	8001428 <__aeabi_dadd+0x144>
 800132e:	464a      	mov	r2, r9
 8001330:	2a00      	cmp	r2, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x52>
 8001334:	e0b8      	b.n	80014a8 <__aeabi_dadd+0x1c4>
 8001336:	4ac5      	ldr	r2, [pc, #788]	; (800164c <__aeabi_dadd+0x368>)
 8001338:	4296      	cmp	r6, r2
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x5a>
 800133c:	e11c      	b.n	8001578 <__aeabi_dadd+0x294>
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	003c      	movs	r4, r7
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	4314      	orrs	r4, r2
 8001346:	46a0      	mov	r8, r4
 8001348:	4662      	mov	r2, ip
 800134a:	2a38      	cmp	r2, #56	; 0x38
 800134c:	dd00      	ble.n	8001350 <__aeabi_dadd+0x6c>
 800134e:	e161      	b.n	8001614 <__aeabi_dadd+0x330>
 8001350:	2a1f      	cmp	r2, #31
 8001352:	dd00      	ble.n	8001356 <__aeabi_dadd+0x72>
 8001354:	e1cc      	b.n	80016f0 <__aeabi_dadd+0x40c>
 8001356:	4664      	mov	r4, ip
 8001358:	2220      	movs	r2, #32
 800135a:	1b12      	subs	r2, r2, r4
 800135c:	4644      	mov	r4, r8
 800135e:	4094      	lsls	r4, r2
 8001360:	000f      	movs	r7, r1
 8001362:	46a1      	mov	r9, r4
 8001364:	4664      	mov	r4, ip
 8001366:	4091      	lsls	r1, r2
 8001368:	40e7      	lsrs	r7, r4
 800136a:	464c      	mov	r4, r9
 800136c:	1e4a      	subs	r2, r1, #1
 800136e:	4191      	sbcs	r1, r2
 8001370:	433c      	orrs	r4, r7
 8001372:	4642      	mov	r2, r8
 8001374:	4321      	orrs	r1, r4
 8001376:	4664      	mov	r4, ip
 8001378:	40e2      	lsrs	r2, r4
 800137a:	1a80      	subs	r0, r0, r2
 800137c:	1a5c      	subs	r4, r3, r1
 800137e:	42a3      	cmp	r3, r4
 8001380:	419b      	sbcs	r3, r3
 8001382:	425f      	negs	r7, r3
 8001384:	1bc7      	subs	r7, r0, r7
 8001386:	023b      	lsls	r3, r7, #8
 8001388:	d400      	bmi.n	800138c <__aeabi_dadd+0xa8>
 800138a:	e0d0      	b.n	800152e <__aeabi_dadd+0x24a>
 800138c:	027f      	lsls	r7, r7, #9
 800138e:	0a7f      	lsrs	r7, r7, #9
 8001390:	2f00      	cmp	r7, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0xb2>
 8001394:	e0ff      	b.n	8001596 <__aeabi_dadd+0x2b2>
 8001396:	0038      	movs	r0, r7
 8001398:	f001 fe5a 	bl	8003050 <__clzsi2>
 800139c:	0001      	movs	r1, r0
 800139e:	3908      	subs	r1, #8
 80013a0:	2320      	movs	r3, #32
 80013a2:	0022      	movs	r2, r4
 80013a4:	1a5b      	subs	r3, r3, r1
 80013a6:	408f      	lsls	r7, r1
 80013a8:	40da      	lsrs	r2, r3
 80013aa:	408c      	lsls	r4, r1
 80013ac:	4317      	orrs	r7, r2
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	da00      	bge.n	80013b4 <__aeabi_dadd+0xd0>
 80013b2:	e0ff      	b.n	80015b4 <__aeabi_dadd+0x2d0>
 80013b4:	1b89      	subs	r1, r1, r6
 80013b6:	1c4b      	adds	r3, r1, #1
 80013b8:	2b1f      	cmp	r3, #31
 80013ba:	dd00      	ble.n	80013be <__aeabi_dadd+0xda>
 80013bc:	e0a8      	b.n	8001510 <__aeabi_dadd+0x22c>
 80013be:	2220      	movs	r2, #32
 80013c0:	0039      	movs	r1, r7
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	0020      	movs	r0, r4
 80013c6:	4094      	lsls	r4, r2
 80013c8:	4091      	lsls	r1, r2
 80013ca:	40d8      	lsrs	r0, r3
 80013cc:	1e62      	subs	r2, r4, #1
 80013ce:	4194      	sbcs	r4, r2
 80013d0:	40df      	lsrs	r7, r3
 80013d2:	2600      	movs	r6, #0
 80013d4:	4301      	orrs	r1, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	0763      	lsls	r3, r4, #29
 80013da:	d009      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013dc:	230f      	movs	r3, #15
 80013de:	4023      	ands	r3, r4
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d005      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013e4:	1d23      	adds	r3, r4, #4
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	41a4      	sbcs	r4, r4
 80013ea:	4264      	negs	r4, r4
 80013ec:	193f      	adds	r7, r7, r4
 80013ee:	001c      	movs	r4, r3
 80013f0:	023b      	lsls	r3, r7, #8
 80013f2:	d400      	bmi.n	80013f6 <__aeabi_dadd+0x112>
 80013f4:	e09e      	b.n	8001534 <__aeabi_dadd+0x250>
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <__aeabi_dadd+0x368>)
 80013f8:	3601      	adds	r6, #1
 80013fa:	429e      	cmp	r6, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x11c>
 80013fe:	e0b7      	b.n	8001570 <__aeabi_dadd+0x28c>
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <__aeabi_dadd+0x36c>)
 8001402:	08e4      	lsrs	r4, r4, #3
 8001404:	4017      	ands	r7, r2
 8001406:	077b      	lsls	r3, r7, #29
 8001408:	0571      	lsls	r1, r6, #21
 800140a:	027f      	lsls	r7, r7, #9
 800140c:	4323      	orrs	r3, r4
 800140e:	0b3f      	lsrs	r7, r7, #12
 8001410:	0d4a      	lsrs	r2, r1, #21
 8001412:	0512      	lsls	r2, r2, #20
 8001414:	433a      	orrs	r2, r7
 8001416:	07ed      	lsls	r5, r5, #31
 8001418:	432a      	orrs	r2, r5
 800141a:	0018      	movs	r0, r3
 800141c:	0011      	movs	r1, r2
 800141e:	bce0      	pop	{r5, r6, r7}
 8001420:	46ba      	mov	sl, r7
 8001422:	46b1      	mov	r9, r6
 8001424:	46a8      	mov	r8, r5
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	2c00      	cmp	r4, #0
 800142a:	d04b      	beq.n	80014c4 <__aeabi_dadd+0x1e0>
 800142c:	464c      	mov	r4, r9
 800142e:	1ba4      	subs	r4, r4, r6
 8001430:	46a4      	mov	ip, r4
 8001432:	2e00      	cmp	r6, #0
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x154>
 8001436:	e123      	b.n	8001680 <__aeabi_dadd+0x39c>
 8001438:	0004      	movs	r4, r0
 800143a:	431c      	orrs	r4, r3
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x15c>
 800143e:	e1af      	b.n	80017a0 <__aeabi_dadd+0x4bc>
 8001440:	4662      	mov	r2, ip
 8001442:	1e54      	subs	r4, r2, #1
 8001444:	2a01      	cmp	r2, #1
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x166>
 8001448:	e215      	b.n	8001876 <__aeabi_dadd+0x592>
 800144a:	4d80      	ldr	r5, [pc, #512]	; (800164c <__aeabi_dadd+0x368>)
 800144c:	45ac      	cmp	ip, r5
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x16e>
 8001450:	e1c8      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001452:	46a4      	mov	ip, r4
 8001454:	e11b      	b.n	800168e <__aeabi_dadd+0x3aa>
 8001456:	464a      	mov	r2, r9
 8001458:	1ab2      	subs	r2, r6, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2a00      	cmp	r2, #0
 800145e:	dc00      	bgt.n	8001462 <__aeabi_dadd+0x17e>
 8001460:	e0ac      	b.n	80015bc <__aeabi_dadd+0x2d8>
 8001462:	464a      	mov	r2, r9
 8001464:	2a00      	cmp	r2, #0
 8001466:	d043      	beq.n	80014f0 <__aeabi_dadd+0x20c>
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <__aeabi_dadd+0x368>)
 800146a:	4296      	cmp	r6, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x18c>
 800146e:	e1af      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	003c      	movs	r4, r7
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	4314      	orrs	r4, r2
 8001478:	46a0      	mov	r8, r4
 800147a:	4662      	mov	r2, ip
 800147c:	2a38      	cmp	r2, #56	; 0x38
 800147e:	dc67      	bgt.n	8001550 <__aeabi_dadd+0x26c>
 8001480:	2a1f      	cmp	r2, #31
 8001482:	dc00      	bgt.n	8001486 <__aeabi_dadd+0x1a2>
 8001484:	e15f      	b.n	8001746 <__aeabi_dadd+0x462>
 8001486:	4647      	mov	r7, r8
 8001488:	3a20      	subs	r2, #32
 800148a:	40d7      	lsrs	r7, r2
 800148c:	4662      	mov	r2, ip
 800148e:	2a20      	cmp	r2, #32
 8001490:	d005      	beq.n	800149e <__aeabi_dadd+0x1ba>
 8001492:	4664      	mov	r4, ip
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	1b12      	subs	r2, r2, r4
 8001498:	4644      	mov	r4, r8
 800149a:	4094      	lsls	r4, r2
 800149c:	4321      	orrs	r1, r4
 800149e:	1e4a      	subs	r2, r1, #1
 80014a0:	4191      	sbcs	r1, r2
 80014a2:	000c      	movs	r4, r1
 80014a4:	433c      	orrs	r4, r7
 80014a6:	e057      	b.n	8001558 <__aeabi_dadd+0x274>
 80014a8:	003a      	movs	r2, r7
 80014aa:	430a      	orrs	r2, r1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1cc>
 80014ae:	e105      	b.n	80016bc <__aeabi_dadd+0x3d8>
 80014b0:	0022      	movs	r2, r4
 80014b2:	3a01      	subs	r2, #1
 80014b4:	2c01      	cmp	r4, #1
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0x1d6>
 80014b8:	e182      	b.n	80017c0 <__aeabi_dadd+0x4dc>
 80014ba:	4c64      	ldr	r4, [pc, #400]	; (800164c <__aeabi_dadd+0x368>)
 80014bc:	45a4      	cmp	ip, r4
 80014be:	d05b      	beq.n	8001578 <__aeabi_dadd+0x294>
 80014c0:	4694      	mov	ip, r2
 80014c2:	e741      	b.n	8001348 <__aeabi_dadd+0x64>
 80014c4:	4c63      	ldr	r4, [pc, #396]	; (8001654 <__aeabi_dadd+0x370>)
 80014c6:	1c77      	adds	r7, r6, #1
 80014c8:	4227      	tst	r7, r4
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x1ea>
 80014cc:	e0c4      	b.n	8001658 <__aeabi_dadd+0x374>
 80014ce:	0004      	movs	r4, r0
 80014d0:	431c      	orrs	r4, r3
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dadd+0x1f4>
 80014d6:	e169      	b.n	80017ac <__aeabi_dadd+0x4c8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x1fa>
 80014dc:	e1bf      	b.n	800185e <__aeabi_dadd+0x57a>
 80014de:	4644      	mov	r4, r8
 80014e0:	430c      	orrs	r4, r1
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x202>
 80014e4:	e1d0      	b.n	8001888 <__aeabi_dadd+0x5a4>
 80014e6:	0742      	lsls	r2, r0, #29
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	08c0      	lsrs	r0, r0, #3
 80014ee:	e029      	b.n	8001544 <__aeabi_dadd+0x260>
 80014f0:	003a      	movs	r2, r7
 80014f2:	430a      	orrs	r2, r1
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x214>
 80014f6:	e170      	b.n	80017da <__aeabi_dadd+0x4f6>
 80014f8:	4662      	mov	r2, ip
 80014fa:	4664      	mov	r4, ip
 80014fc:	3a01      	subs	r2, #1
 80014fe:	2c01      	cmp	r4, #1
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x220>
 8001502:	e0e0      	b.n	80016c6 <__aeabi_dadd+0x3e2>
 8001504:	4c51      	ldr	r4, [pc, #324]	; (800164c <__aeabi_dadd+0x368>)
 8001506:	45a4      	cmp	ip, r4
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x228>
 800150a:	e161      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 800150c:	4694      	mov	ip, r2
 800150e:	e7b4      	b.n	800147a <__aeabi_dadd+0x196>
 8001510:	003a      	movs	r2, r7
 8001512:	391f      	subs	r1, #31
 8001514:	40ca      	lsrs	r2, r1
 8001516:	0011      	movs	r1, r2
 8001518:	2b20      	cmp	r3, #32
 800151a:	d003      	beq.n	8001524 <__aeabi_dadd+0x240>
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	409f      	lsls	r7, r3
 8001522:	433c      	orrs	r4, r7
 8001524:	1e63      	subs	r3, r4, #1
 8001526:	419c      	sbcs	r4, r3
 8001528:	2700      	movs	r7, #0
 800152a:	2600      	movs	r6, #0
 800152c:	430c      	orrs	r4, r1
 800152e:	0763      	lsls	r3, r4, #29
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x250>
 8001532:	e753      	b.n	80013dc <__aeabi_dadd+0xf8>
 8001534:	46b4      	mov	ip, r6
 8001536:	08e4      	lsrs	r4, r4, #3
 8001538:	077b      	lsls	r3, r7, #29
 800153a:	4323      	orrs	r3, r4
 800153c:	08f8      	lsrs	r0, r7, #3
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <__aeabi_dadd+0x368>)
 8001540:	4594      	cmp	ip, r2
 8001542:	d01d      	beq.n	8001580 <__aeabi_dadd+0x29c>
 8001544:	4662      	mov	r2, ip
 8001546:	0307      	lsls	r7, r0, #12
 8001548:	0552      	lsls	r2, r2, #21
 800154a:	0b3f      	lsrs	r7, r7, #12
 800154c:	0d52      	lsrs	r2, r2, #21
 800154e:	e760      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001550:	4644      	mov	r4, r8
 8001552:	430c      	orrs	r4, r1
 8001554:	1e62      	subs	r2, r4, #1
 8001556:	4194      	sbcs	r4, r2
 8001558:	18e4      	adds	r4, r4, r3
 800155a:	429c      	cmp	r4, r3
 800155c:	419b      	sbcs	r3, r3
 800155e:	425f      	negs	r7, r3
 8001560:	183f      	adds	r7, r7, r0
 8001562:	023b      	lsls	r3, r7, #8
 8001564:	d5e3      	bpl.n	800152e <__aeabi_dadd+0x24a>
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <__aeabi_dadd+0x368>)
 8001568:	3601      	adds	r6, #1
 800156a:	429e      	cmp	r6, r3
 800156c:	d000      	beq.n	8001570 <__aeabi_dadd+0x28c>
 800156e:	e0b5      	b.n	80016dc <__aeabi_dadd+0x3f8>
 8001570:	0032      	movs	r2, r6
 8001572:	2700      	movs	r7, #0
 8001574:	2300      	movs	r3, #0
 8001576:	e74c      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001578:	0742      	lsls	r2, r0, #29
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	4313      	orrs	r3, r2
 800157e:	08c0      	lsrs	r0, r0, #3
 8001580:	001a      	movs	r2, r3
 8001582:	4302      	orrs	r2, r0
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x2a4>
 8001586:	e1e1      	b.n	800194c <__aeabi_dadd+0x668>
 8001588:	2780      	movs	r7, #128	; 0x80
 800158a:	033f      	lsls	r7, r7, #12
 800158c:	4307      	orrs	r7, r0
 800158e:	033f      	lsls	r7, r7, #12
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <__aeabi_dadd+0x368>)
 8001592:	0b3f      	lsrs	r7, r7, #12
 8001594:	e73d      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001596:	0020      	movs	r0, r4
 8001598:	f001 fd5a 	bl	8003050 <__clzsi2>
 800159c:	0001      	movs	r1, r0
 800159e:	3118      	adds	r1, #24
 80015a0:	291f      	cmp	r1, #31
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dadd+0x2c2>
 80015a4:	e6fc      	b.n	80013a0 <__aeabi_dadd+0xbc>
 80015a6:	3808      	subs	r0, #8
 80015a8:	4084      	lsls	r4, r0
 80015aa:	0027      	movs	r7, r4
 80015ac:	2400      	movs	r4, #0
 80015ae:	42b1      	cmp	r1, r6
 80015b0:	db00      	blt.n	80015b4 <__aeabi_dadd+0x2d0>
 80015b2:	e6ff      	b.n	80013b4 <__aeabi_dadd+0xd0>
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <__aeabi_dadd+0x36c>)
 80015b6:	1a76      	subs	r6, r6, r1
 80015b8:	4017      	ands	r7, r2
 80015ba:	e70d      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d02f      	beq.n	8001620 <__aeabi_dadd+0x33c>
 80015c0:	464a      	mov	r2, r9
 80015c2:	1b92      	subs	r2, r2, r6
 80015c4:	4694      	mov	ip, r2
 80015c6:	2e00      	cmp	r6, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x2e8>
 80015ca:	e0ad      	b.n	8001728 <__aeabi_dadd+0x444>
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <__aeabi_dadd+0x368>)
 80015ce:	4591      	cmp	r9, r2
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x2f0>
 80015d2:	e10f      	b.n	80017f4 <__aeabi_dadd+0x510>
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	4310      	orrs	r0, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	2a38      	cmp	r2, #56	; 0x38
 80015de:	dd00      	ble.n	80015e2 <__aeabi_dadd+0x2fe>
 80015e0:	e10f      	b.n	8001802 <__aeabi_dadd+0x51e>
 80015e2:	2a1f      	cmp	r2, #31
 80015e4:	dd00      	ble.n	80015e8 <__aeabi_dadd+0x304>
 80015e6:	e180      	b.n	80018ea <__aeabi_dadd+0x606>
 80015e8:	4664      	mov	r4, ip
 80015ea:	2220      	movs	r2, #32
 80015ec:	001e      	movs	r6, r3
 80015ee:	1b12      	subs	r2, r2, r4
 80015f0:	4667      	mov	r7, ip
 80015f2:	0004      	movs	r4, r0
 80015f4:	4093      	lsls	r3, r2
 80015f6:	4094      	lsls	r4, r2
 80015f8:	40fe      	lsrs	r6, r7
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4193      	sbcs	r3, r2
 80015fe:	40f8      	lsrs	r0, r7
 8001600:	4334      	orrs	r4, r6
 8001602:	431c      	orrs	r4, r3
 8001604:	4480      	add	r8, r0
 8001606:	1864      	adds	r4, r4, r1
 8001608:	428c      	cmp	r4, r1
 800160a:	41bf      	sbcs	r7, r7
 800160c:	427f      	negs	r7, r7
 800160e:	464e      	mov	r6, r9
 8001610:	4447      	add	r7, r8
 8001612:	e7a6      	b.n	8001562 <__aeabi_dadd+0x27e>
 8001614:	4642      	mov	r2, r8
 8001616:	430a      	orrs	r2, r1
 8001618:	0011      	movs	r1, r2
 800161a:	1e4a      	subs	r2, r1, #1
 800161c:	4191      	sbcs	r1, r2
 800161e:	e6ad      	b.n	800137c <__aeabi_dadd+0x98>
 8001620:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <__aeabi_dadd+0x370>)
 8001622:	1c72      	adds	r2, r6, #1
 8001624:	4222      	tst	r2, r4
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x346>
 8001628:	e0a1      	b.n	800176e <__aeabi_dadd+0x48a>
 800162a:	0002      	movs	r2, r0
 800162c:	431a      	orrs	r2, r3
 800162e:	2e00      	cmp	r6, #0
 8001630:	d000      	beq.n	8001634 <__aeabi_dadd+0x350>
 8001632:	e0fa      	b.n	800182a <__aeabi_dadd+0x546>
 8001634:	2a00      	cmp	r2, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x356>
 8001638:	e145      	b.n	80018c6 <__aeabi_dadd+0x5e2>
 800163a:	003a      	movs	r2, r7
 800163c:	430a      	orrs	r2, r1
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x35e>
 8001640:	e146      	b.n	80018d0 <__aeabi_dadd+0x5ec>
 8001642:	0742      	lsls	r2, r0, #29
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	4313      	orrs	r3, r2
 8001648:	08c0      	lsrs	r0, r0, #3
 800164a:	e77b      	b.n	8001544 <__aeabi_dadd+0x260>
 800164c:	000007ff 	.word	0x000007ff
 8001650:	ff7fffff 	.word	0xff7fffff
 8001654:	000007fe 	.word	0x000007fe
 8001658:	4647      	mov	r7, r8
 800165a:	1a5c      	subs	r4, r3, r1
 800165c:	1bc2      	subs	r2, r0, r7
 800165e:	42a3      	cmp	r3, r4
 8001660:	41bf      	sbcs	r7, r7
 8001662:	427f      	negs	r7, r7
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	464a      	mov	r2, r9
 800166a:	1abf      	subs	r7, r7, r2
 800166c:	023a      	lsls	r2, r7, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dadd+0x38e>
 8001670:	e08d      	b.n	800178e <__aeabi_dadd+0x4aa>
 8001672:	0023      	movs	r3, r4
 8001674:	433b      	orrs	r3, r7
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x396>
 8001678:	e68a      	b.n	8001390 <__aeabi_dadd+0xac>
 800167a:	2000      	movs	r0, #0
 800167c:	2500      	movs	r5, #0
 800167e:	e761      	b.n	8001544 <__aeabi_dadd+0x260>
 8001680:	4cb4      	ldr	r4, [pc, #720]	; (8001954 <__aeabi_dadd+0x670>)
 8001682:	45a1      	cmp	r9, r4
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x3a4>
 8001686:	e0ad      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	0424      	lsls	r4, r4, #16
 800168c:	4320      	orrs	r0, r4
 800168e:	4664      	mov	r4, ip
 8001690:	2c38      	cmp	r4, #56	; 0x38
 8001692:	dc3d      	bgt.n	8001710 <__aeabi_dadd+0x42c>
 8001694:	4662      	mov	r2, ip
 8001696:	2c1f      	cmp	r4, #31
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0x3b8>
 800169a:	e0b7      	b.n	800180c <__aeabi_dadd+0x528>
 800169c:	2520      	movs	r5, #32
 800169e:	001e      	movs	r6, r3
 80016a0:	1b2d      	subs	r5, r5, r4
 80016a2:	0004      	movs	r4, r0
 80016a4:	40ab      	lsls	r3, r5
 80016a6:	40ac      	lsls	r4, r5
 80016a8:	40d6      	lsrs	r6, r2
 80016aa:	40d0      	lsrs	r0, r2
 80016ac:	4642      	mov	r2, r8
 80016ae:	1e5d      	subs	r5, r3, #1
 80016b0:	41ab      	sbcs	r3, r5
 80016b2:	4334      	orrs	r4, r6
 80016b4:	1a12      	subs	r2, r2, r0
 80016b6:	4690      	mov	r8, r2
 80016b8:	4323      	orrs	r3, r4
 80016ba:	e02c      	b.n	8001716 <__aeabi_dadd+0x432>
 80016bc:	0742      	lsls	r2, r0, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c0      	lsrs	r0, r0, #3
 80016c4:	e73b      	b.n	800153e <__aeabi_dadd+0x25a>
 80016c6:	185c      	adds	r4, r3, r1
 80016c8:	429c      	cmp	r4, r3
 80016ca:	419b      	sbcs	r3, r3
 80016cc:	4440      	add	r0, r8
 80016ce:	425b      	negs	r3, r3
 80016d0:	18c7      	adds	r7, r0, r3
 80016d2:	2601      	movs	r6, #1
 80016d4:	023b      	lsls	r3, r7, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dadd+0x3f6>
 80016d8:	e729      	b.n	800152e <__aeabi_dadd+0x24a>
 80016da:	2602      	movs	r6, #2
 80016dc:	4a9e      	ldr	r2, [pc, #632]	; (8001958 <__aeabi_dadd+0x674>)
 80016de:	0863      	lsrs	r3, r4, #1
 80016e0:	4017      	ands	r7, r2
 80016e2:	2201      	movs	r2, #1
 80016e4:	4014      	ands	r4, r2
 80016e6:	431c      	orrs	r4, r3
 80016e8:	07fb      	lsls	r3, r7, #31
 80016ea:	431c      	orrs	r4, r3
 80016ec:	087f      	lsrs	r7, r7, #1
 80016ee:	e673      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80016f0:	4644      	mov	r4, r8
 80016f2:	3a20      	subs	r2, #32
 80016f4:	40d4      	lsrs	r4, r2
 80016f6:	4662      	mov	r2, ip
 80016f8:	2a20      	cmp	r2, #32
 80016fa:	d005      	beq.n	8001708 <__aeabi_dadd+0x424>
 80016fc:	4667      	mov	r7, ip
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	1bd2      	subs	r2, r2, r7
 8001702:	4647      	mov	r7, r8
 8001704:	4097      	lsls	r7, r2
 8001706:	4339      	orrs	r1, r7
 8001708:	1e4a      	subs	r2, r1, #1
 800170a:	4191      	sbcs	r1, r2
 800170c:	4321      	orrs	r1, r4
 800170e:	e635      	b.n	800137c <__aeabi_dadd+0x98>
 8001710:	4303      	orrs	r3, r0
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	4183      	sbcs	r3, r0
 8001716:	1acc      	subs	r4, r1, r3
 8001718:	42a1      	cmp	r1, r4
 800171a:	41bf      	sbcs	r7, r7
 800171c:	4643      	mov	r3, r8
 800171e:	427f      	negs	r7, r7
 8001720:	4655      	mov	r5, sl
 8001722:	464e      	mov	r6, r9
 8001724:	1bdf      	subs	r7, r3, r7
 8001726:	e62e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001728:	0002      	movs	r2, r0
 800172a:	431a      	orrs	r2, r3
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x44c>
 800172e:	e0bd      	b.n	80018ac <__aeabi_dadd+0x5c8>
 8001730:	4662      	mov	r2, ip
 8001732:	4664      	mov	r4, ip
 8001734:	3a01      	subs	r2, #1
 8001736:	2c01      	cmp	r4, #1
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x458>
 800173a:	e0e5      	b.n	8001908 <__aeabi_dadd+0x624>
 800173c:	4c85      	ldr	r4, [pc, #532]	; (8001954 <__aeabi_dadd+0x670>)
 800173e:	45a4      	cmp	ip, r4
 8001740:	d058      	beq.n	80017f4 <__aeabi_dadd+0x510>
 8001742:	4694      	mov	ip, r2
 8001744:	e749      	b.n	80015da <__aeabi_dadd+0x2f6>
 8001746:	4664      	mov	r4, ip
 8001748:	2220      	movs	r2, #32
 800174a:	1b12      	subs	r2, r2, r4
 800174c:	4644      	mov	r4, r8
 800174e:	4094      	lsls	r4, r2
 8001750:	000f      	movs	r7, r1
 8001752:	46a1      	mov	r9, r4
 8001754:	4664      	mov	r4, ip
 8001756:	4091      	lsls	r1, r2
 8001758:	40e7      	lsrs	r7, r4
 800175a:	464c      	mov	r4, r9
 800175c:	1e4a      	subs	r2, r1, #1
 800175e:	4191      	sbcs	r1, r2
 8001760:	433c      	orrs	r4, r7
 8001762:	4642      	mov	r2, r8
 8001764:	430c      	orrs	r4, r1
 8001766:	4661      	mov	r1, ip
 8001768:	40ca      	lsrs	r2, r1
 800176a:	1880      	adds	r0, r0, r2
 800176c:	e6f4      	b.n	8001558 <__aeabi_dadd+0x274>
 800176e:	4c79      	ldr	r4, [pc, #484]	; (8001954 <__aeabi_dadd+0x670>)
 8001770:	42a2      	cmp	r2, r4
 8001772:	d100      	bne.n	8001776 <__aeabi_dadd+0x492>
 8001774:	e6fd      	b.n	8001572 <__aeabi_dadd+0x28e>
 8001776:	1859      	adds	r1, r3, r1
 8001778:	4299      	cmp	r1, r3
 800177a:	419b      	sbcs	r3, r3
 800177c:	4440      	add	r0, r8
 800177e:	425f      	negs	r7, r3
 8001780:	19c7      	adds	r7, r0, r7
 8001782:	07fc      	lsls	r4, r7, #31
 8001784:	0849      	lsrs	r1, r1, #1
 8001786:	0016      	movs	r6, r2
 8001788:	430c      	orrs	r4, r1
 800178a:	087f      	lsrs	r7, r7, #1
 800178c:	e6cf      	b.n	800152e <__aeabi_dadd+0x24a>
 800178e:	1acc      	subs	r4, r1, r3
 8001790:	42a1      	cmp	r1, r4
 8001792:	41bf      	sbcs	r7, r7
 8001794:	4643      	mov	r3, r8
 8001796:	427f      	negs	r7, r7
 8001798:	1a18      	subs	r0, r3, r0
 800179a:	4655      	mov	r5, sl
 800179c:	1bc7      	subs	r7, r0, r7
 800179e:	e5f7      	b.n	8001390 <__aeabi_dadd+0xac>
 80017a0:	08c9      	lsrs	r1, r1, #3
 80017a2:	077b      	lsls	r3, r7, #29
 80017a4:	4655      	mov	r5, sl
 80017a6:	430b      	orrs	r3, r1
 80017a8:	08f8      	lsrs	r0, r7, #3
 80017aa:	e6c8      	b.n	800153e <__aeabi_dadd+0x25a>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x4ce>
 80017b0:	e081      	b.n	80018b6 <__aeabi_dadd+0x5d2>
 80017b2:	4643      	mov	r3, r8
 80017b4:	430b      	orrs	r3, r1
 80017b6:	d115      	bne.n	80017e4 <__aeabi_dadd+0x500>
 80017b8:	2080      	movs	r0, #128	; 0x80
 80017ba:	2500      	movs	r5, #0
 80017bc:	0300      	lsls	r0, r0, #12
 80017be:	e6e3      	b.n	8001588 <__aeabi_dadd+0x2a4>
 80017c0:	1a5c      	subs	r4, r3, r1
 80017c2:	42a3      	cmp	r3, r4
 80017c4:	419b      	sbcs	r3, r3
 80017c6:	1bc7      	subs	r7, r0, r7
 80017c8:	425b      	negs	r3, r3
 80017ca:	2601      	movs	r6, #1
 80017cc:	1aff      	subs	r7, r7, r3
 80017ce:	e5da      	b.n	8001386 <__aeabi_dadd+0xa2>
 80017d0:	0742      	lsls	r2, r0, #29
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	08c0      	lsrs	r0, r0, #3
 80017d8:	e6d2      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017da:	0742      	lsls	r2, r0, #29
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	4313      	orrs	r3, r2
 80017e0:	08c0      	lsrs	r0, r0, #3
 80017e2:	e6ac      	b.n	800153e <__aeabi_dadd+0x25a>
 80017e4:	4643      	mov	r3, r8
 80017e6:	4642      	mov	r2, r8
 80017e8:	08c9      	lsrs	r1, r1, #3
 80017ea:	075b      	lsls	r3, r3, #29
 80017ec:	4655      	mov	r5, sl
 80017ee:	430b      	orrs	r3, r1
 80017f0:	08d0      	lsrs	r0, r2, #3
 80017f2:	e6c5      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017f4:	4643      	mov	r3, r8
 80017f6:	4642      	mov	r2, r8
 80017f8:	075b      	lsls	r3, r3, #29
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	430b      	orrs	r3, r1
 80017fe:	08d0      	lsrs	r0, r2, #3
 8001800:	e6be      	b.n	8001580 <__aeabi_dadd+0x29c>
 8001802:	4303      	orrs	r3, r0
 8001804:	001c      	movs	r4, r3
 8001806:	1e63      	subs	r3, r4, #1
 8001808:	419c      	sbcs	r4, r3
 800180a:	e6fc      	b.n	8001606 <__aeabi_dadd+0x322>
 800180c:	0002      	movs	r2, r0
 800180e:	3c20      	subs	r4, #32
 8001810:	40e2      	lsrs	r2, r4
 8001812:	0014      	movs	r4, r2
 8001814:	4662      	mov	r2, ip
 8001816:	2a20      	cmp	r2, #32
 8001818:	d003      	beq.n	8001822 <__aeabi_dadd+0x53e>
 800181a:	2540      	movs	r5, #64	; 0x40
 800181c:	1aad      	subs	r5, r5, r2
 800181e:	40a8      	lsls	r0, r5
 8001820:	4303      	orrs	r3, r0
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	4183      	sbcs	r3, r0
 8001826:	4323      	orrs	r3, r4
 8001828:	e775      	b.n	8001716 <__aeabi_dadd+0x432>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d0e2      	beq.n	80017f4 <__aeabi_dadd+0x510>
 800182e:	003a      	movs	r2, r7
 8001830:	430a      	orrs	r2, r1
 8001832:	d0cd      	beq.n	80017d0 <__aeabi_dadd+0x4ec>
 8001834:	0742      	lsls	r2, r0, #29
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	4313      	orrs	r3, r2
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	08c0      	lsrs	r0, r0, #3
 800183e:	0312      	lsls	r2, r2, #12
 8001840:	4210      	tst	r0, r2
 8001842:	d006      	beq.n	8001852 <__aeabi_dadd+0x56e>
 8001844:	08fc      	lsrs	r4, r7, #3
 8001846:	4214      	tst	r4, r2
 8001848:	d103      	bne.n	8001852 <__aeabi_dadd+0x56e>
 800184a:	0020      	movs	r0, r4
 800184c:	08cb      	lsrs	r3, r1, #3
 800184e:	077a      	lsls	r2, r7, #29
 8001850:	4313      	orrs	r3, r2
 8001852:	0f5a      	lsrs	r2, r3, #29
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	0752      	lsls	r2, r2, #29
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	4313      	orrs	r3, r2
 800185c:	e690      	b.n	8001580 <__aeabi_dadd+0x29c>
 800185e:	4643      	mov	r3, r8
 8001860:	430b      	orrs	r3, r1
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x582>
 8001864:	e709      	b.n	800167a <__aeabi_dadd+0x396>
 8001866:	4643      	mov	r3, r8
 8001868:	4642      	mov	r2, r8
 800186a:	08c9      	lsrs	r1, r1, #3
 800186c:	075b      	lsls	r3, r3, #29
 800186e:	4655      	mov	r5, sl
 8001870:	430b      	orrs	r3, r1
 8001872:	08d0      	lsrs	r0, r2, #3
 8001874:	e666      	b.n	8001544 <__aeabi_dadd+0x260>
 8001876:	1acc      	subs	r4, r1, r3
 8001878:	42a1      	cmp	r1, r4
 800187a:	4189      	sbcs	r1, r1
 800187c:	1a3f      	subs	r7, r7, r0
 800187e:	4249      	negs	r1, r1
 8001880:	4655      	mov	r5, sl
 8001882:	2601      	movs	r6, #1
 8001884:	1a7f      	subs	r7, r7, r1
 8001886:	e57e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001888:	4642      	mov	r2, r8
 800188a:	1a5c      	subs	r4, r3, r1
 800188c:	1a87      	subs	r7, r0, r2
 800188e:	42a3      	cmp	r3, r4
 8001890:	4192      	sbcs	r2, r2
 8001892:	4252      	negs	r2, r2
 8001894:	1abf      	subs	r7, r7, r2
 8001896:	023a      	lsls	r2, r7, #8
 8001898:	d53d      	bpl.n	8001916 <__aeabi_dadd+0x632>
 800189a:	1acc      	subs	r4, r1, r3
 800189c:	42a1      	cmp	r1, r4
 800189e:	4189      	sbcs	r1, r1
 80018a0:	4643      	mov	r3, r8
 80018a2:	4249      	negs	r1, r1
 80018a4:	1a1f      	subs	r7, r3, r0
 80018a6:	4655      	mov	r5, sl
 80018a8:	1a7f      	subs	r7, r7, r1
 80018aa:	e595      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80018ac:	077b      	lsls	r3, r7, #29
 80018ae:	08c9      	lsrs	r1, r1, #3
 80018b0:	430b      	orrs	r3, r1
 80018b2:	08f8      	lsrs	r0, r7, #3
 80018b4:	e643      	b.n	800153e <__aeabi_dadd+0x25a>
 80018b6:	4644      	mov	r4, r8
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	430c      	orrs	r4, r1
 80018bc:	d130      	bne.n	8001920 <__aeabi_dadd+0x63c>
 80018be:	0742      	lsls	r2, r0, #29
 80018c0:	4313      	orrs	r3, r2
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	e65c      	b.n	8001580 <__aeabi_dadd+0x29c>
 80018c6:	077b      	lsls	r3, r7, #29
 80018c8:	08c9      	lsrs	r1, r1, #3
 80018ca:	430b      	orrs	r3, r1
 80018cc:	08f8      	lsrs	r0, r7, #3
 80018ce:	e639      	b.n	8001544 <__aeabi_dadd+0x260>
 80018d0:	185c      	adds	r4, r3, r1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	4440      	add	r0, r8
 80018d8:	425b      	negs	r3, r3
 80018da:	18c7      	adds	r7, r0, r3
 80018dc:	023b      	lsls	r3, r7, #8
 80018de:	d400      	bmi.n	80018e2 <__aeabi_dadd+0x5fe>
 80018e0:	e625      	b.n	800152e <__aeabi_dadd+0x24a>
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <__aeabi_dadd+0x674>)
 80018e4:	2601      	movs	r6, #1
 80018e6:	401f      	ands	r7, r3
 80018e8:	e621      	b.n	800152e <__aeabi_dadd+0x24a>
 80018ea:	0004      	movs	r4, r0
 80018ec:	3a20      	subs	r2, #32
 80018ee:	40d4      	lsrs	r4, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	2a20      	cmp	r2, #32
 80018f4:	d004      	beq.n	8001900 <__aeabi_dadd+0x61c>
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	4666      	mov	r6, ip
 80018fa:	1b92      	subs	r2, r2, r6
 80018fc:	4090      	lsls	r0, r2
 80018fe:	4303      	orrs	r3, r0
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	4193      	sbcs	r3, r2
 8001904:	431c      	orrs	r4, r3
 8001906:	e67e      	b.n	8001606 <__aeabi_dadd+0x322>
 8001908:	185c      	adds	r4, r3, r1
 800190a:	428c      	cmp	r4, r1
 800190c:	4189      	sbcs	r1, r1
 800190e:	4440      	add	r0, r8
 8001910:	4249      	negs	r1, r1
 8001912:	1847      	adds	r7, r0, r1
 8001914:	e6dd      	b.n	80016d2 <__aeabi_dadd+0x3ee>
 8001916:	0023      	movs	r3, r4
 8001918:	433b      	orrs	r3, r7
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x63a>
 800191c:	e6ad      	b.n	800167a <__aeabi_dadd+0x396>
 800191e:	e606      	b.n	800152e <__aeabi_dadd+0x24a>
 8001920:	0744      	lsls	r4, r0, #29
 8001922:	4323      	orrs	r3, r4
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	08c0      	lsrs	r0, r0, #3
 8001928:	0324      	lsls	r4, r4, #12
 800192a:	4220      	tst	r0, r4
 800192c:	d008      	beq.n	8001940 <__aeabi_dadd+0x65c>
 800192e:	4642      	mov	r2, r8
 8001930:	08d6      	lsrs	r6, r2, #3
 8001932:	4226      	tst	r6, r4
 8001934:	d104      	bne.n	8001940 <__aeabi_dadd+0x65c>
 8001936:	4655      	mov	r5, sl
 8001938:	0030      	movs	r0, r6
 800193a:	08cb      	lsrs	r3, r1, #3
 800193c:	0751      	lsls	r1, r2, #29
 800193e:	430b      	orrs	r3, r1
 8001940:	0f5a      	lsrs	r2, r3, #29
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	0752      	lsls	r2, r2, #29
 8001948:	4313      	orrs	r3, r2
 800194a:	e619      	b.n	8001580 <__aeabi_dadd+0x29c>
 800194c:	2300      	movs	r3, #0
 800194e:	4a01      	ldr	r2, [pc, #4]	; (8001954 <__aeabi_dadd+0x670>)
 8001950:	001f      	movs	r7, r3
 8001952:	e55e      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001954:	000007ff 	.word	0x000007ff
 8001958:	ff7fffff 	.word	0xff7fffff

0800195c <__aeabi_ddiv>:
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	4657      	mov	r7, sl
 8001960:	464e      	mov	r6, r9
 8001962:	4645      	mov	r5, r8
 8001964:	46de      	mov	lr, fp
 8001966:	b5e0      	push	{r5, r6, r7, lr}
 8001968:	4681      	mov	r9, r0
 800196a:	0005      	movs	r5, r0
 800196c:	030c      	lsls	r4, r1, #12
 800196e:	0048      	lsls	r0, r1, #1
 8001970:	4692      	mov	sl, r2
 8001972:	001f      	movs	r7, r3
 8001974:	b085      	sub	sp, #20
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	0d40      	lsrs	r0, r0, #21
 800197a:	0fce      	lsrs	r6, r1, #31
 800197c:	2800      	cmp	r0, #0
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0x26>
 8001980:	e156      	b.n	8001c30 <__aeabi_ddiv+0x2d4>
 8001982:	4bd4      	ldr	r3, [pc, #848]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001984:	4298      	cmp	r0, r3
 8001986:	d100      	bne.n	800198a <__aeabi_ddiv+0x2e>
 8001988:	e172      	b.n	8001c70 <__aeabi_ddiv+0x314>
 800198a:	0f6b      	lsrs	r3, r5, #29
 800198c:	00e4      	lsls	r4, r4, #3
 800198e:	431c      	orrs	r4, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	4323      	orrs	r3, r4
 8001996:	4698      	mov	r8, r3
 8001998:	4bcf      	ldr	r3, [pc, #828]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 800199a:	00ed      	lsls	r5, r5, #3
 800199c:	469b      	mov	fp, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	4699      	mov	r9, r3
 80019a2:	4483      	add	fp, r0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	033c      	lsls	r4, r7, #12
 80019a8:	007b      	lsls	r3, r7, #1
 80019aa:	4650      	mov	r0, sl
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	0fff      	lsrs	r7, r7, #31
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x5c>
 80019b6:	e11f      	b.n	8001bf8 <__aeabi_ddiv+0x29c>
 80019b8:	4ac6      	ldr	r2, [pc, #792]	; (8001cd4 <__aeabi_ddiv+0x378>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x64>
 80019be:	e162      	b.n	8001c86 <__aeabi_ddiv+0x32a>
 80019c0:	49c5      	ldr	r1, [pc, #788]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 80019c2:	0f42      	lsrs	r2, r0, #29
 80019c4:	468c      	mov	ip, r1
 80019c6:	00e4      	lsls	r4, r4, #3
 80019c8:	4659      	mov	r1, fp
 80019ca:	4314      	orrs	r4, r2
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	4463      	add	r3, ip
 80019d0:	0412      	lsls	r2, r2, #16
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	4314      	orrs	r4, r2
 80019d6:	469b      	mov	fp, r3
 80019d8:	00c2      	lsls	r2, r0, #3
 80019da:	2000      	movs	r0, #0
 80019dc:	0033      	movs	r3, r6
 80019de:	407b      	eors	r3, r7
 80019e0:	469a      	mov	sl, r3
 80019e2:	464b      	mov	r3, r9
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d827      	bhi.n	8001a38 <__aeabi_ddiv+0xdc>
 80019e8:	49bc      	ldr	r1, [pc, #752]	; (8001cdc <__aeabi_ddiv+0x380>)
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	58cb      	ldr	r3, [r1, r3]
 80019ee:	469f      	mov	pc, r3
 80019f0:	46b2      	mov	sl, r6
 80019f2:	9b00      	ldr	r3, [sp, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d016      	beq.n	8001a26 <__aeabi_ddiv+0xca>
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d100      	bne.n	80019fe <__aeabi_ddiv+0xa2>
 80019fc:	e28e      	b.n	8001f1c <__aeabi_ddiv+0x5c0>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d000      	beq.n	8001a04 <__aeabi_ddiv+0xa8>
 8001a02:	e0d9      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2400      	movs	r4, #0
 8001a08:	2500      	movs	r5, #0
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	051b      	lsls	r3, r3, #20
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	07d2      	lsls	r2, r2, #31
 8001a12:	4313      	orrs	r3, r2
 8001a14:	0028      	movs	r0, r5
 8001a16:	0019      	movs	r1, r3
 8001a18:	b005      	add	sp, #20
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	46a9      	mov	r9, r5
 8001a22:	46a0      	mov	r8, r4
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	2400      	movs	r4, #0
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4baa      	ldr	r3, [pc, #680]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001a2c:	e7ed      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001a2e:	46ba      	mov	sl, r7
 8001a30:	46a0      	mov	r8, r4
 8001a32:	0015      	movs	r5, r2
 8001a34:	9000      	str	r0, [sp, #0]
 8001a36:	e7dc      	b.n	80019f2 <__aeabi_ddiv+0x96>
 8001a38:	4544      	cmp	r4, r8
 8001a3a:	d200      	bcs.n	8001a3e <__aeabi_ddiv+0xe2>
 8001a3c:	e1c7      	b.n	8001dce <__aeabi_ddiv+0x472>
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_ddiv+0xe6>
 8001a40:	e1c2      	b.n	8001dc8 <__aeabi_ddiv+0x46c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	425b      	negs	r3, r3
 8001a46:	469c      	mov	ip, r3
 8001a48:	002e      	movs	r6, r5
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	44e3      	add	fp, ip
 8001a50:	0223      	lsls	r3, r4, #8
 8001a52:	0e14      	lsrs	r4, r2, #24
 8001a54:	431c      	orrs	r4, r3
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	4699      	mov	r9, r3
 8001a5a:	0423      	lsls	r3, r4, #16
 8001a5c:	0c1f      	lsrs	r7, r3, #16
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4649      	mov	r1, r9
 8001a62:	9200      	str	r2, [sp, #0]
 8001a64:	9701      	str	r7, [sp, #4]
 8001a66:	f7fe fbf7 	bl	8000258 <__aeabi_uidivmod>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	437a      	muls	r2, r7
 8001a6e:	040b      	lsls	r3, r1, #16
 8001a70:	0c31      	lsrs	r1, r6, #16
 8001a72:	4680      	mov	r8, r0
 8001a74:	4319      	orrs	r1, r3
 8001a76:	428a      	cmp	r2, r1
 8001a78:	d907      	bls.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	469c      	mov	ip, r3
 8001a80:	1909      	adds	r1, r1, r4
 8001a82:	44e0      	add	r8, ip
 8001a84:	428c      	cmp	r4, r1
 8001a86:	d800      	bhi.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a88:	e207      	b.n	8001e9a <__aeabi_ddiv+0x53e>
 8001a8a:	1a88      	subs	r0, r1, r2
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fbe3 	bl	8000258 <__aeabi_uidivmod>
 8001a92:	0409      	lsls	r1, r1, #16
 8001a94:	468c      	mov	ip, r1
 8001a96:	0431      	lsls	r1, r6, #16
 8001a98:	4666      	mov	r6, ip
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	0c09      	lsrs	r1, r1, #16
 8001a9e:	4342      	muls	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	4331      	orrs	r1, r6
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d904      	bls.n	8001ab2 <__aeabi_ddiv+0x156>
 8001aa8:	1909      	adds	r1, r1, r4
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	428c      	cmp	r4, r1
 8001aae:	d800      	bhi.n	8001ab2 <__aeabi_ddiv+0x156>
 8001ab0:	e1ed      	b.n	8001e8e <__aeabi_ddiv+0x532>
 8001ab2:	1a88      	subs	r0, r1, r2
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4641      	mov	r1, r8
 8001abe:	9b00      	ldr	r3, [sp, #0]
 8001ac0:	040e      	lsls	r6, r1, #16
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	001f      	movs	r7, r3
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	0c36      	lsrs	r6, r6, #16
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c19      	lsrs	r1, r3, #16
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	4373      	muls	r3, r6
 8001ad4:	0c12      	lsrs	r2, r2, #16
 8001ad6:	437e      	muls	r6, r7
 8001ad8:	9103      	str	r1, [sp, #12]
 8001ada:	4351      	muls	r1, r2
 8001adc:	437a      	muls	r2, r7
 8001ade:	0c1f      	lsrs	r7, r3, #16
 8001ae0:	46bc      	mov	ip, r7
 8001ae2:	1876      	adds	r6, r6, r1
 8001ae4:	4466      	add	r6, ip
 8001ae6:	42b1      	cmp	r1, r6
 8001ae8:	d903      	bls.n	8001af2 <__aeabi_ddiv+0x196>
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	468c      	mov	ip, r1
 8001af0:	4462      	add	r2, ip
 8001af2:	0c31      	lsrs	r1, r6, #16
 8001af4:	188a      	adds	r2, r1, r2
 8001af6:	0431      	lsls	r1, r6, #16
 8001af8:	041e      	lsls	r6, r3, #16
 8001afa:	0c36      	lsrs	r6, r6, #16
 8001afc:	198e      	adds	r6, r1, r6
 8001afe:	4290      	cmp	r0, r2
 8001b00:	d302      	bcc.n	8001b08 <__aeabi_ddiv+0x1ac>
 8001b02:	d112      	bne.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b04:	42b5      	cmp	r5, r6
 8001b06:	d210      	bcs.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	469c      	mov	ip, r3
 8001b10:	4465      	add	r5, ip
 8001b12:	001f      	movs	r7, r3
 8001b14:	429d      	cmp	r5, r3
 8001b16:	419b      	sbcs	r3, r3
 8001b18:	425b      	negs	r3, r3
 8001b1a:	191b      	adds	r3, r3, r4
 8001b1c:	18c0      	adds	r0, r0, r3
 8001b1e:	4284      	cmp	r4, r0
 8001b20:	d200      	bcs.n	8001b24 <__aeabi_ddiv+0x1c8>
 8001b22:	e1a0      	b.n	8001e66 <__aeabi_ddiv+0x50a>
 8001b24:	d100      	bne.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001b26:	e19b      	b.n	8001e60 <__aeabi_ddiv+0x504>
 8001b28:	4688      	mov	r8, r1
 8001b2a:	1bae      	subs	r6, r5, r6
 8001b2c:	42b5      	cmp	r5, r6
 8001b2e:	41ad      	sbcs	r5, r5
 8001b30:	1a80      	subs	r0, r0, r2
 8001b32:	426d      	negs	r5, r5
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	4284      	cmp	r4, r0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x1e0>
 8001b3a:	e1d5      	b.n	8001ee8 <__aeabi_ddiv+0x58c>
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	f7fe fb8b 	bl	8000258 <__aeabi_uidivmod>
 8001b42:	9a01      	ldr	r2, [sp, #4]
 8001b44:	040b      	lsls	r3, r1, #16
 8001b46:	4342      	muls	r2, r0
 8001b48:	0c31      	lsrs	r1, r6, #16
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	428a      	cmp	r2, r1
 8001b50:	d900      	bls.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001b52:	e16c      	b.n	8001e2e <__aeabi_ddiv+0x4d2>
 8001b54:	1a88      	subs	r0, r1, r2
 8001b56:	4649      	mov	r1, r9
 8001b58:	f7fe fb7e 	bl	8000258 <__aeabi_uidivmod>
 8001b5c:	9a01      	ldr	r2, [sp, #4]
 8001b5e:	0436      	lsls	r6, r6, #16
 8001b60:	4342      	muls	r2, r0
 8001b62:	0409      	lsls	r1, r1, #16
 8001b64:	0c36      	lsrs	r6, r6, #16
 8001b66:	0003      	movs	r3, r0
 8001b68:	430e      	orrs	r6, r1
 8001b6a:	42b2      	cmp	r2, r6
 8001b6c:	d900      	bls.n	8001b70 <__aeabi_ddiv+0x214>
 8001b6e:	e153      	b.n	8001e18 <__aeabi_ddiv+0x4bc>
 8001b70:	9803      	ldr	r0, [sp, #12]
 8001b72:	1ab6      	subs	r6, r6, r2
 8001b74:	0002      	movs	r2, r0
 8001b76:	042d      	lsls	r5, r5, #16
 8001b78:	431d      	orrs	r5, r3
 8001b7a:	9f02      	ldr	r7, [sp, #8]
 8001b7c:	042b      	lsls	r3, r5, #16
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	435a      	muls	r2, r3
 8001b82:	437b      	muls	r3, r7
 8001b84:	469c      	mov	ip, r3
 8001b86:	0c29      	lsrs	r1, r5, #16
 8001b88:	4348      	muls	r0, r1
 8001b8a:	0c13      	lsrs	r3, r2, #16
 8001b8c:	4484      	add	ip, r0
 8001b8e:	4463      	add	r3, ip
 8001b90:	4379      	muls	r1, r7
 8001b92:	4298      	cmp	r0, r3
 8001b94:	d903      	bls.n	8001b9e <__aeabi_ddiv+0x242>
 8001b96:	2080      	movs	r0, #128	; 0x80
 8001b98:	0240      	lsls	r0, r0, #9
 8001b9a:	4684      	mov	ip, r0
 8001b9c:	4461      	add	r1, ip
 8001b9e:	0c18      	lsrs	r0, r3, #16
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c12      	lsrs	r2, r2, #16
 8001ba6:	1841      	adds	r1, r0, r1
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	428e      	cmp	r6, r1
 8001bac:	d200      	bcs.n	8001bb0 <__aeabi_ddiv+0x254>
 8001bae:	e0ff      	b.n	8001db0 <__aeabi_ddiv+0x454>
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_ddiv+0x258>
 8001bb2:	e0fa      	b.n	8001daa <__aeabi_ddiv+0x44e>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <__aeabi_ddiv+0x384>)
 8001bba:	445a      	add	r2, fp
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	dc00      	bgt.n	8001bc2 <__aeabi_ddiv+0x266>
 8001bc0:	e0aa      	b.n	8001d18 <__aeabi_ddiv+0x3bc>
 8001bc2:	076b      	lsls	r3, r5, #29
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001bc6:	e13d      	b.n	8001e44 <__aeabi_ddiv+0x4e8>
 8001bc8:	08ed      	lsrs	r5, r5, #3
 8001bca:	4643      	mov	r3, r8
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	d506      	bpl.n	8001bde <__aeabi_ddiv+0x282>
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <__aeabi_ddiv+0x388>)
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	00d2      	lsls	r2, r2, #3
 8001bdc:	445a      	add	r2, fp
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <__aeabi_ddiv+0x38c>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dd00      	ble.n	8001be6 <__aeabi_ddiv+0x28a>
 8001be4:	e71f      	b.n	8001a26 <__aeabi_ddiv+0xca>
 8001be6:	4643      	mov	r3, r8
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	431d      	orrs	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	025c      	lsls	r4, r3, #9
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	0d53      	lsrs	r3, r2, #21
 8001bf6:	e708      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_ddiv+0x2a4>
 8001bfe:	e07b      	b.n	8001cf8 <__aeabi_ddiv+0x39c>
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x2aa>
 8001c04:	e0fa      	b.n	8001dfc <__aeabi_ddiv+0x4a0>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f001 fa22 	bl	8003050 <__clzsi2>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	3a0b      	subs	r2, #11
 8001c10:	231d      	movs	r3, #29
 8001c12:	0001      	movs	r1, r0
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	4652      	mov	r2, sl
 8001c18:	3908      	subs	r1, #8
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	408c      	lsls	r4, r1
 8001c1e:	4314      	orrs	r4, r2
 8001c20:	4652      	mov	r2, sl
 8001c22:	408a      	lsls	r2, r1
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <__aeabi_ddiv+0x390>)
 8001c26:	4458      	add	r0, fp
 8001c28:	469b      	mov	fp, r3
 8001c2a:	4483      	add	fp, r0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e6d5      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001c30:	464b      	mov	r3, r9
 8001c32:	4323      	orrs	r3, r4
 8001c34:	4698      	mov	r8, r3
 8001c36:	d044      	beq.n	8001cc2 <__aeabi_ddiv+0x366>
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_ddiv+0x2e2>
 8001c3c:	e0ce      	b.n	8001ddc <__aeabi_ddiv+0x480>
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f001 fa06 	bl	8003050 <__clzsi2>
 8001c44:	0001      	movs	r1, r0
 8001c46:	0002      	movs	r2, r0
 8001c48:	390b      	subs	r1, #11
 8001c4a:	231d      	movs	r3, #29
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	0010      	movs	r0, r2
 8001c52:	40d9      	lsrs	r1, r3
 8001c54:	3808      	subs	r0, #8
 8001c56:	4084      	lsls	r4, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	464d      	mov	r5, r9
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	4698      	mov	r8, r3
 8001c60:	4085      	lsls	r5, r0
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <__aeabi_ddiv+0x394>)
 8001c64:	1a83      	subs	r3, r0, r2
 8001c66:	469b      	mov	fp, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	e69a      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c70:	464b      	mov	r3, r9
 8001c72:	4323      	orrs	r3, r4
 8001c74:	4698      	mov	r8, r3
 8001c76:	d11d      	bne.n	8001cb4 <__aeabi_ddiv+0x358>
 8001c78:	2308      	movs	r3, #8
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	3b06      	subs	r3, #6
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4683      	mov	fp, r0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	e68f      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c86:	4652      	mov	r2, sl
 8001c88:	4322      	orrs	r2, r4
 8001c8a:	d109      	bne.n	8001ca0 <__aeabi_ddiv+0x344>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4319      	orrs	r1, r3
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001c94:	4689      	mov	r9, r1
 8001c96:	469c      	mov	ip, r3
 8001c98:	2400      	movs	r4, #0
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	44e3      	add	fp, ip
 8001c9e:	e69d      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	464a      	mov	r2, r9
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001ca8:	4691      	mov	r9, r2
 8001caa:	469c      	mov	ip, r3
 8001cac:	4652      	mov	r2, sl
 8001cae:	2003      	movs	r0, #3
 8001cb0:	44e3      	add	fp, ip
 8001cb2:	e693      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	3b09      	subs	r3, #9
 8001cba:	46a0      	mov	r8, r4
 8001cbc:	4683      	mov	fp, r0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	e671      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	2500      	movs	r5, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	e669      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	080180d8 	.word	0x080180d8
 8001ce0:	000003ff 	.word	0x000003ff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	000003f3 	.word	0x000003f3
 8001cf0:	fffffc0d 	.word	0xfffffc0d
 8001cf4:	fffff801 	.word	0xfffff801
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4689      	mov	r9, r1
 8001d00:	2400      	movs	r4, #0
 8001d02:	2001      	movs	r0, #1
 8001d04:	e66a      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	469a      	mov	sl, r3
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	e67a      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d14:	2501      	movs	r5, #1
 8001d16:	426d      	negs	r5, r5
 8001d18:	2301      	movs	r3, #1
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	2b38      	cmp	r3, #56	; 0x38
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_ddiv+0x3c6>
 8001d20:	e670      	b.n	8001a04 <__aeabi_ddiv+0xa8>
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_ddiv+0x3cc>
 8001d26:	e0bf      	b.n	8001ea8 <__aeabi_ddiv+0x54c>
 8001d28:	211f      	movs	r1, #31
 8001d2a:	4249      	negs	r1, r1
 8001d2c:	1a8a      	subs	r2, r1, r2
 8001d2e:	4641      	mov	r1, r8
 8001d30:	40d1      	lsrs	r1, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d004      	beq.n	8001d42 <__aeabi_ddiv+0x3e6>
 8001d38:	4641      	mov	r1, r8
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <__aeabi_ddiv+0x5e0>)
 8001d3c:	445b      	add	r3, fp
 8001d3e:	4099      	lsls	r1, r3
 8001d40:	430d      	orrs	r5, r1
 8001d42:	1e6b      	subs	r3, r5, #1
 8001d44:	419d      	sbcs	r5, r3
 8001d46:	2307      	movs	r3, #7
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	001d      	movs	r5, r3
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4015      	ands	r5, r2
 8001d50:	4213      	tst	r3, r2
 8001d52:	d100      	bne.n	8001d56 <__aeabi_ddiv+0x3fa>
 8001d54:	e0d4      	b.n	8001f00 <__aeabi_ddiv+0x5a4>
 8001d56:	210f      	movs	r1, #15
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4011      	ands	r1, r2
 8001d5c:	2904      	cmp	r1, #4
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x406>
 8001d60:	e0cb      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d62:	1d11      	adds	r1, r2, #4
 8001d64:	4291      	cmp	r1, r2
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	0219      	lsls	r1, r3, #8
 8001d70:	d400      	bmi.n	8001d74 <__aeabi_ddiv+0x418>
 8001d72:	e0c2      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d74:	2301      	movs	r3, #1
 8001d76:	2400      	movs	r4, #0
 8001d78:	2500      	movs	r5, #0
 8001d7a:	e646      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	4641      	mov	r1, r8
 8001d80:	031b      	lsls	r3, r3, #12
 8001d82:	4219      	tst	r1, r3
 8001d84:	d008      	beq.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d86:	421c      	tst	r4, r3
 8001d88:	d106      	bne.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d8a:	431c      	orrs	r4, r3
 8001d8c:	0324      	lsls	r4, r4, #12
 8001d8e:	46ba      	mov	sl, r7
 8001d90:	0015      	movs	r5, r2
 8001d92:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	e638      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	431c      	orrs	r4, r3
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	46b2      	mov	sl, r6
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001da6:	0b24      	lsrs	r4, r4, #12
 8001da8:	e62f      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_ddiv+0x454>
 8001dae:	e703      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001db0:	19a6      	adds	r6, r4, r6
 8001db2:	1e68      	subs	r0, r5, #1
 8001db4:	42a6      	cmp	r6, r4
 8001db6:	d200      	bcs.n	8001dba <__aeabi_ddiv+0x45e>
 8001db8:	e08d      	b.n	8001ed6 <__aeabi_ddiv+0x57a>
 8001dba:	428e      	cmp	r6, r1
 8001dbc:	d200      	bcs.n	8001dc0 <__aeabi_ddiv+0x464>
 8001dbe:	e0a3      	b.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x468>
 8001dc2:	e0b3      	b.n	8001f2c <__aeabi_ddiv+0x5d0>
 8001dc4:	0005      	movs	r5, r0
 8001dc6:	e6f5      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001dc8:	42aa      	cmp	r2, r5
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x472>
 8001dcc:	e639      	b.n	8001a42 <__aeabi_ddiv+0xe6>
 8001dce:	4643      	mov	r3, r8
 8001dd0:	07de      	lsls	r6, r3, #31
 8001dd2:	0858      	lsrs	r0, r3, #1
 8001dd4:	086b      	lsrs	r3, r5, #1
 8001dd6:	431e      	orrs	r6, r3
 8001dd8:	07ed      	lsls	r5, r5, #31
 8001dda:	e639      	b.n	8001a50 <__aeabi_ddiv+0xf4>
 8001ddc:	4648      	mov	r0, r9
 8001dde:	f001 f937 	bl	8003050 <__clzsi2>
 8001de2:	0001      	movs	r1, r0
 8001de4:	0002      	movs	r2, r0
 8001de6:	3115      	adds	r1, #21
 8001de8:	3220      	adds	r2, #32
 8001dea:	291c      	cmp	r1, #28
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_ddiv+0x494>
 8001dee:	e72c      	b.n	8001c4a <__aeabi_ddiv+0x2ee>
 8001df0:	464b      	mov	r3, r9
 8001df2:	3808      	subs	r0, #8
 8001df4:	4083      	lsls	r3, r0
 8001df6:	2500      	movs	r5, #0
 8001df8:	4698      	mov	r8, r3
 8001dfa:	e732      	b.n	8001c62 <__aeabi_ddiv+0x306>
 8001dfc:	f001 f928 	bl	8003050 <__clzsi2>
 8001e00:	0003      	movs	r3, r0
 8001e02:	001a      	movs	r2, r3
 8001e04:	3215      	adds	r2, #21
 8001e06:	3020      	adds	r0, #32
 8001e08:	2a1c      	cmp	r2, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_ddiv+0x4b2>
 8001e0c:	e700      	b.n	8001c10 <__aeabi_ddiv+0x2b4>
 8001e0e:	4654      	mov	r4, sl
 8001e10:	3b08      	subs	r3, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	409c      	lsls	r4, r3
 8001e16:	e705      	b.n	8001c24 <__aeabi_ddiv+0x2c8>
 8001e18:	1936      	adds	r6, r6, r4
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	42b4      	cmp	r4, r6
 8001e1e:	d900      	bls.n	8001e22 <__aeabi_ddiv+0x4c6>
 8001e20:	e6a6      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e22:	42b2      	cmp	r2, r6
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x4cc>
 8001e26:	e6a3      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e28:	1e83      	subs	r3, r0, #2
 8001e2a:	1936      	adds	r6, r6, r4
 8001e2c:	e6a0      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e2e:	1909      	adds	r1, r1, r4
 8001e30:	3d01      	subs	r5, #1
 8001e32:	428c      	cmp	r4, r1
 8001e34:	d900      	bls.n	8001e38 <__aeabi_ddiv+0x4dc>
 8001e36:	e68d      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d800      	bhi.n	8001e3e <__aeabi_ddiv+0x4e2>
 8001e3c:	e68a      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e3e:	1e85      	subs	r5, r0, #2
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	e687      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e44:	230f      	movs	r3, #15
 8001e46:	402b      	ands	r3, r5
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_ddiv+0x4f2>
 8001e4c:	e6bc      	b.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	425b      	negs	r3, r3
 8001e52:	42ab      	cmp	r3, r5
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	3504      	adds	r5, #4
 8001e58:	425b      	negs	r3, r3
 8001e5a:	08ed      	lsrs	r5, r5, #3
 8001e5c:	4498      	add	r8, r3
 8001e5e:	e6b4      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001e60:	42af      	cmp	r7, r5
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x50a>
 8001e64:	e660      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e66:	4282      	cmp	r2, r0
 8001e68:	d804      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x512>
 8001e6c:	e65c      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e6e:	42ae      	cmp	r6, r5
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e72:	e659      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e74:	2302      	movs	r3, #2
 8001e76:	425b      	negs	r3, r3
 8001e78:	469c      	mov	ip, r3
 8001e7a:	9b00      	ldr	r3, [sp, #0]
 8001e7c:	44e0      	add	r8, ip
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4465      	add	r5, ip
 8001e82:	429d      	cmp	r5, r3
 8001e84:	419b      	sbcs	r3, r3
 8001e86:	425b      	negs	r3, r3
 8001e88:	191b      	adds	r3, r3, r4
 8001e8a:	18c0      	adds	r0, r0, r3
 8001e8c:	e64d      	b.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001e8e:	428a      	cmp	r2, r1
 8001e90:	d800      	bhi.n	8001e94 <__aeabi_ddiv+0x538>
 8001e92:	e60e      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	1909      	adds	r1, r1, r4
 8001e98:	e60b      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d800      	bhi.n	8001ea0 <__aeabi_ddiv+0x544>
 8001e9e:	e5f4      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea0:	1e83      	subs	r3, r0, #2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	1909      	adds	r1, r1, r4
 8001ea6:	e5f0      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea8:	4925      	ldr	r1, [pc, #148]	; (8001f40 <__aeabi_ddiv+0x5e4>)
 8001eaa:	0028      	movs	r0, r5
 8001eac:	4459      	add	r1, fp
 8001eae:	408d      	lsls	r5, r1
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	408a      	lsls	r2, r1
 8001eb4:	1e69      	subs	r1, r5, #1
 8001eb6:	418d      	sbcs	r5, r1
 8001eb8:	4641      	mov	r1, r8
 8001eba:	40d8      	lsrs	r0, r3
 8001ebc:	40d9      	lsrs	r1, r3
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	432a      	orrs	r2, r5
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	0751      	lsls	r1, r2, #29
 8001ec6:	d100      	bne.n	8001eca <__aeabi_ddiv+0x56e>
 8001ec8:	e751      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001eca:	210f      	movs	r1, #15
 8001ecc:	4011      	ands	r1, r2
 8001ece:	2904      	cmp	r1, #4
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_ddiv+0x578>
 8001ed2:	e746      	b.n	8001d62 <__aeabi_ddiv+0x406>
 8001ed4:	e74b      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001ed6:	0005      	movs	r5, r0
 8001ed8:	428e      	cmp	r6, r1
 8001eda:	d000      	beq.n	8001ede <__aeabi_ddiv+0x582>
 8001edc:	e66a      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ede:	9a00      	ldr	r2, [sp, #0]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_ddiv+0x58a>
 8001ee4:	e666      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ee6:	e667      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <__aeabi_ddiv+0x5e8>)
 8001eea:	445a      	add	r2, fp
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x596>
 8001ef0:	e710      	b.n	8001d14 <__aeabi_ddiv+0x3b8>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4498      	add	r8, r3
 8001ef8:	e667      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001efa:	075d      	lsls	r5, r3, #29
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	0b1c      	lsrs	r4, r3, #12
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	2300      	movs	r3, #0
 8001f04:	4315      	orrs	r5, r2
 8001f06:	e580      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f08:	9800      	ldr	r0, [sp, #0]
 8001f0a:	3d02      	subs	r5, #2
 8001f0c:	0042      	lsls	r2, r0, #1
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	41bf      	sbcs	r7, r7
 8001f12:	427f      	negs	r7, r7
 8001f14:	193c      	adds	r4, r7, r4
 8001f16:	1936      	adds	r6, r6, r4
 8001f18:	9200      	str	r2, [sp, #0]
 8001f1a:	e7dd      	b.n	8001ed8 <__aeabi_ddiv+0x57c>
 8001f1c:	2480      	movs	r4, #128	; 0x80
 8001f1e:	4643      	mov	r3, r8
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	e56e      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f2c:	9a00      	ldr	r2, [sp, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3ea      	bcc.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001f32:	0005      	movs	r5, r0
 8001f34:	e7d3      	b.n	8001ede <__aeabi_ddiv+0x582>
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	0000043e 	.word	0x0000043e
 8001f40:	0000041e 	.word	0x0000041e
 8001f44:	000003ff 	.word	0x000003ff

08001f48 <__eqdf2>:
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	464e      	mov	r6, r9
 8001f4c:	4645      	mov	r5, r8
 8001f4e:	46de      	mov	lr, fp
 8001f50:	4657      	mov	r7, sl
 8001f52:	4690      	mov	r8, r2
 8001f54:	b5e0      	push	{r5, r6, r7, lr}
 8001f56:	0017      	movs	r7, r2
 8001f58:	031a      	lsls	r2, r3, #12
 8001f5a:	0b12      	lsrs	r2, r2, #12
 8001f5c:	0005      	movs	r5, r0
 8001f5e:	4684      	mov	ip, r0
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <__eqdf2+0x80>)
 8001f62:	030e      	lsls	r6, r1, #12
 8001f64:	004c      	lsls	r4, r1, #1
 8001f66:	4691      	mov	r9, r2
 8001f68:	005a      	lsls	r2, r3, #1
 8001f6a:	0fdb      	lsrs	r3, r3, #31
 8001f6c:	469b      	mov	fp, r3
 8001f6e:	0b36      	lsrs	r6, r6, #12
 8001f70:	0d64      	lsrs	r4, r4, #21
 8001f72:	0fc9      	lsrs	r1, r1, #31
 8001f74:	0d52      	lsrs	r2, r2, #21
 8001f76:	4284      	cmp	r4, r0
 8001f78:	d019      	beq.n	8001fae <__eqdf2+0x66>
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	d010      	beq.n	8001fa0 <__eqdf2+0x58>
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4294      	cmp	r4, r2
 8001f82:	d10e      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f84:	454e      	cmp	r6, r9
 8001f86:	d10c      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f88:	2001      	movs	r0, #1
 8001f8a:	45c4      	cmp	ip, r8
 8001f8c:	d109      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f8e:	4559      	cmp	r1, fp
 8001f90:	d017      	beq.n	8001fc2 <__eqdf2+0x7a>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d105      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f96:	0030      	movs	r0, r6
 8001f98:	4328      	orrs	r0, r5
 8001f9a:	1e43      	subs	r3, r0, #1
 8001f9c:	4198      	sbcs	r0, r3
 8001f9e:	e000      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa4:	46bb      	mov	fp, r7
 8001fa6:	46b2      	mov	sl, r6
 8001fa8:	46a9      	mov	r9, r5
 8001faa:	46a0      	mov	r8, r4
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	0033      	movs	r3, r6
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	432b      	orrs	r3, r5
 8001fb4:	d1f5      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fb6:	42a2      	cmp	r2, r4
 8001fb8:	d1f3      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fba:	464b      	mov	r3, r9
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	d1f0      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fc0:	e7e2      	b.n	8001f88 <__eqdf2+0x40>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	e7ed      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__gedf2>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4647      	mov	r7, r8
 8001fd0:	46ce      	mov	lr, r9
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	0b1b      	lsrs	r3, r3, #12
 8001fdc:	4d2d      	ldr	r5, [pc, #180]	; (8002094 <__gedf2+0xc8>)
 8001fde:	004a      	lsls	r2, r1, #1
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	0043      	lsls	r3, r0, #1
 8001fe6:	030f      	lsls	r7, r1, #12
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	46b0      	mov	r8, r6
 8001fec:	0b3f      	lsrs	r7, r7, #12
 8001fee:	0d52      	lsrs	r2, r2, #21
 8001ff0:	0fc9      	lsrs	r1, r1, #31
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	0fc0      	lsrs	r0, r0, #31
 8001ff6:	42aa      	cmp	r2, r5
 8001ff8:	d021      	beq.n	800203e <__gedf2+0x72>
 8001ffa:	42ab      	cmp	r3, r5
 8001ffc:	d013      	beq.n	8002026 <__gedf2+0x5a>
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d122      	bne.n	8002048 <__gedf2+0x7c>
 8002002:	433c      	orrs	r4, r7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <__gedf2+0x42>
 8002008:	464d      	mov	r5, r9
 800200a:	432e      	orrs	r6, r5
 800200c:	d022      	beq.n	8002054 <__gedf2+0x88>
 800200e:	2c00      	cmp	r4, #0
 8002010:	d010      	beq.n	8002034 <__gedf2+0x68>
 8002012:	4281      	cmp	r1, r0
 8002014:	d022      	beq.n	800205c <__gedf2+0x90>
 8002016:	2002      	movs	r0, #2
 8002018:	3901      	subs	r1, #1
 800201a:	4008      	ands	r0, r1
 800201c:	3801      	subs	r0, #1
 800201e:	bcc0      	pop	{r6, r7}
 8002020:	46b9      	mov	r9, r7
 8002022:	46b0      	mov	r8, r6
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	464d      	mov	r5, r9
 8002028:	432e      	orrs	r6, r5
 800202a:	d129      	bne.n	8002080 <__gedf2+0xb4>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d1f0      	bne.n	8002012 <__gedf2+0x46>
 8002030:	433c      	orrs	r4, r7
 8002032:	d1ee      	bne.n	8002012 <__gedf2+0x46>
 8002034:	2800      	cmp	r0, #0
 8002036:	d1f2      	bne.n	800201e <__gedf2+0x52>
 8002038:	2001      	movs	r0, #1
 800203a:	4240      	negs	r0, r0
 800203c:	e7ef      	b.n	800201e <__gedf2+0x52>
 800203e:	003d      	movs	r5, r7
 8002040:	4325      	orrs	r5, r4
 8002042:	d11d      	bne.n	8002080 <__gedf2+0xb4>
 8002044:	4293      	cmp	r3, r2
 8002046:	d0ee      	beq.n	8002026 <__gedf2+0x5a>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e2      	bne.n	8002012 <__gedf2+0x46>
 800204c:	464c      	mov	r4, r9
 800204e:	4326      	orrs	r6, r4
 8002050:	d1df      	bne.n	8002012 <__gedf2+0x46>
 8002052:	e7e0      	b.n	8002016 <__gedf2+0x4a>
 8002054:	2000      	movs	r0, #0
 8002056:	2c00      	cmp	r4, #0
 8002058:	d0e1      	beq.n	800201e <__gedf2+0x52>
 800205a:	e7dc      	b.n	8002016 <__gedf2+0x4a>
 800205c:	429a      	cmp	r2, r3
 800205e:	dc0a      	bgt.n	8002076 <__gedf2+0xaa>
 8002060:	dbe8      	blt.n	8002034 <__gedf2+0x68>
 8002062:	454f      	cmp	r7, r9
 8002064:	d8d7      	bhi.n	8002016 <__gedf2+0x4a>
 8002066:	d00e      	beq.n	8002086 <__gedf2+0xba>
 8002068:	2000      	movs	r0, #0
 800206a:	454f      	cmp	r7, r9
 800206c:	d2d7      	bcs.n	800201e <__gedf2+0x52>
 800206e:	2900      	cmp	r1, #0
 8002070:	d0e2      	beq.n	8002038 <__gedf2+0x6c>
 8002072:	0008      	movs	r0, r1
 8002074:	e7d3      	b.n	800201e <__gedf2+0x52>
 8002076:	4243      	negs	r3, r0
 8002078:	4158      	adcs	r0, r3
 800207a:	0040      	lsls	r0, r0, #1
 800207c:	3801      	subs	r0, #1
 800207e:	e7ce      	b.n	800201e <__gedf2+0x52>
 8002080:	2002      	movs	r0, #2
 8002082:	4240      	negs	r0, r0
 8002084:	e7cb      	b.n	800201e <__gedf2+0x52>
 8002086:	45c4      	cmp	ip, r8
 8002088:	d8c5      	bhi.n	8002016 <__gedf2+0x4a>
 800208a:	2000      	movs	r0, #0
 800208c:	45c4      	cmp	ip, r8
 800208e:	d2c6      	bcs.n	800201e <__gedf2+0x52>
 8002090:	e7ed      	b.n	800206e <__gedf2+0xa2>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000007ff 	.word	0x000007ff

08002098 <__ledf2>:
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	4647      	mov	r7, r8
 800209c:	46ce      	mov	lr, r9
 800209e:	0004      	movs	r4, r0
 80020a0:	0018      	movs	r0, r3
 80020a2:	0016      	movs	r6, r2
 80020a4:	031b      	lsls	r3, r3, #12
 80020a6:	0b1b      	lsrs	r3, r3, #12
 80020a8:	4d2c      	ldr	r5, [pc, #176]	; (800215c <__ledf2+0xc4>)
 80020aa:	004a      	lsls	r2, r1, #1
 80020ac:	4699      	mov	r9, r3
 80020ae:	b580      	push	{r7, lr}
 80020b0:	0043      	lsls	r3, r0, #1
 80020b2:	030f      	lsls	r7, r1, #12
 80020b4:	46a4      	mov	ip, r4
 80020b6:	46b0      	mov	r8, r6
 80020b8:	0b3f      	lsrs	r7, r7, #12
 80020ba:	0d52      	lsrs	r2, r2, #21
 80020bc:	0fc9      	lsrs	r1, r1, #31
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	0fc0      	lsrs	r0, r0, #31
 80020c2:	42aa      	cmp	r2, r5
 80020c4:	d00d      	beq.n	80020e2 <__ledf2+0x4a>
 80020c6:	42ab      	cmp	r3, r5
 80020c8:	d010      	beq.n	80020ec <__ledf2+0x54>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d127      	bne.n	800211e <__ledf2+0x86>
 80020ce:	433c      	orrs	r4, r7
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <__ledf2+0x60>
 80020d4:	464d      	mov	r5, r9
 80020d6:	432e      	orrs	r6, r5
 80020d8:	d10e      	bne.n	80020f8 <__ledf2+0x60>
 80020da:	2000      	movs	r0, #0
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d015      	beq.n	800210c <__ledf2+0x74>
 80020e0:	e00e      	b.n	8002100 <__ledf2+0x68>
 80020e2:	003d      	movs	r5, r7
 80020e4:	4325      	orrs	r5, r4
 80020e6:	d110      	bne.n	800210a <__ledf2+0x72>
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d118      	bne.n	800211e <__ledf2+0x86>
 80020ec:	464d      	mov	r5, r9
 80020ee:	432e      	orrs	r6, r5
 80020f0:	d10b      	bne.n	800210a <__ledf2+0x72>
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d102      	bne.n	80020fc <__ledf2+0x64>
 80020f6:	433c      	orrs	r4, r7
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d00b      	beq.n	8002114 <__ledf2+0x7c>
 80020fc:	4281      	cmp	r1, r0
 80020fe:	d014      	beq.n	800212a <__ledf2+0x92>
 8002100:	2002      	movs	r0, #2
 8002102:	3901      	subs	r1, #1
 8002104:	4008      	ands	r0, r1
 8002106:	3801      	subs	r0, #1
 8002108:	e000      	b.n	800210c <__ledf2+0x74>
 800210a:	2002      	movs	r0, #2
 800210c:	bcc0      	pop	{r6, r7}
 800210e:	46b9      	mov	r9, r7
 8002110:	46b0      	mov	r8, r6
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002114:	2800      	cmp	r0, #0
 8002116:	d1f9      	bne.n	800210c <__ledf2+0x74>
 8002118:	2001      	movs	r0, #1
 800211a:	4240      	negs	r0, r0
 800211c:	e7f6      	b.n	800210c <__ledf2+0x74>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ec      	bne.n	80020fc <__ledf2+0x64>
 8002122:	464c      	mov	r4, r9
 8002124:	4326      	orrs	r6, r4
 8002126:	d1e9      	bne.n	80020fc <__ledf2+0x64>
 8002128:	e7ea      	b.n	8002100 <__ledf2+0x68>
 800212a:	429a      	cmp	r2, r3
 800212c:	dd04      	ble.n	8002138 <__ledf2+0xa0>
 800212e:	4243      	negs	r3, r0
 8002130:	4158      	adcs	r0, r3
 8002132:	0040      	lsls	r0, r0, #1
 8002134:	3801      	subs	r0, #1
 8002136:	e7e9      	b.n	800210c <__ledf2+0x74>
 8002138:	429a      	cmp	r2, r3
 800213a:	dbeb      	blt.n	8002114 <__ledf2+0x7c>
 800213c:	454f      	cmp	r7, r9
 800213e:	d8df      	bhi.n	8002100 <__ledf2+0x68>
 8002140:	d006      	beq.n	8002150 <__ledf2+0xb8>
 8002142:	2000      	movs	r0, #0
 8002144:	454f      	cmp	r7, r9
 8002146:	d2e1      	bcs.n	800210c <__ledf2+0x74>
 8002148:	2900      	cmp	r1, #0
 800214a:	d0e5      	beq.n	8002118 <__ledf2+0x80>
 800214c:	0008      	movs	r0, r1
 800214e:	e7dd      	b.n	800210c <__ledf2+0x74>
 8002150:	45c4      	cmp	ip, r8
 8002152:	d8d5      	bhi.n	8002100 <__ledf2+0x68>
 8002154:	2000      	movs	r0, #0
 8002156:	45c4      	cmp	ip, r8
 8002158:	d2d8      	bcs.n	800210c <__ledf2+0x74>
 800215a:	e7f5      	b.n	8002148 <__ledf2+0xb0>
 800215c:	000007ff 	.word	0x000007ff

08002160 <__aeabi_dmul>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	4645      	mov	r5, r8
 8002168:	46de      	mov	lr, fp
 800216a:	b5e0      	push	{r5, r6, r7, lr}
 800216c:	4698      	mov	r8, r3
 800216e:	030c      	lsls	r4, r1, #12
 8002170:	004b      	lsls	r3, r1, #1
 8002172:	0006      	movs	r6, r0
 8002174:	4692      	mov	sl, r2
 8002176:	b087      	sub	sp, #28
 8002178:	0b24      	lsrs	r4, r4, #12
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	0fcf      	lsrs	r7, r1, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dmul+0x24>
 8002182:	e15c      	b.n	800243e <__aeabi_dmul+0x2de>
 8002184:	4ad9      	ldr	r2, [pc, #868]	; (80024ec <__aeabi_dmul+0x38c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d100      	bne.n	800218c <__aeabi_dmul+0x2c>
 800218a:	e175      	b.n	8002478 <__aeabi_dmul+0x318>
 800218c:	0f42      	lsrs	r2, r0, #29
 800218e:	00e4      	lsls	r4, r4, #3
 8002190:	4314      	orrs	r4, r2
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	4314      	orrs	r4, r2
 8002198:	4ad5      	ldr	r2, [pc, #852]	; (80024f0 <__aeabi_dmul+0x390>)
 800219a:	00c5      	lsls	r5, r0, #3
 800219c:	4694      	mov	ip, r2
 800219e:	4463      	add	r3, ip
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	4699      	mov	r9, r3
 80021a6:	469b      	mov	fp, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	4642      	mov	r2, r8
 80021ac:	031e      	lsls	r6, r3, #12
 80021ae:	0fd2      	lsrs	r2, r2, #31
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4650      	mov	r0, sl
 80021b4:	4690      	mov	r8, r2
 80021b6:	0b36      	lsrs	r6, r6, #12
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	d100      	bne.n	80021be <__aeabi_dmul+0x5e>
 80021bc:	e120      	b.n	8002400 <__aeabi_dmul+0x2a0>
 80021be:	4acb      	ldr	r2, [pc, #812]	; (80024ec <__aeabi_dmul+0x38c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x66>
 80021c4:	e162      	b.n	800248c <__aeabi_dmul+0x32c>
 80021c6:	49ca      	ldr	r1, [pc, #808]	; (80024f0 <__aeabi_dmul+0x390>)
 80021c8:	0f42      	lsrs	r2, r0, #29
 80021ca:	468c      	mov	ip, r1
 80021cc:	9900      	ldr	r1, [sp, #0]
 80021ce:	4463      	add	r3, ip
 80021d0:	00f6      	lsls	r6, r6, #3
 80021d2:	468c      	mov	ip, r1
 80021d4:	4316      	orrs	r6, r2
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	449c      	add	ip, r3
 80021da:	0412      	lsls	r2, r2, #16
 80021dc:	4663      	mov	r3, ip
 80021de:	4316      	orrs	r6, r2
 80021e0:	00c2      	lsls	r2, r0, #3
 80021e2:	2000      	movs	r0, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	4643      	mov	r3, r8
 80021ea:	3101      	adds	r1, #1
 80021ec:	468c      	mov	ip, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	407b      	eors	r3, r7
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	290f      	cmp	r1, #15
 80021f6:	d826      	bhi.n	8002246 <__aeabi_dmul+0xe6>
 80021f8:	4bbe      	ldr	r3, [pc, #760]	; (80024f4 <__aeabi_dmul+0x394>)
 80021fa:	0089      	lsls	r1, r1, #2
 80021fc:	5859      	ldr	r1, [r3, r1]
 80021fe:	468f      	mov	pc, r1
 8002200:	4643      	mov	r3, r8
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	0034      	movs	r4, r6
 8002206:	0015      	movs	r5, r2
 8002208:	4683      	mov	fp, r0
 800220a:	465b      	mov	r3, fp
 800220c:	2b02      	cmp	r3, #2
 800220e:	d016      	beq.n	800223e <__aeabi_dmul+0xde>
 8002210:	2b03      	cmp	r3, #3
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0xb6>
 8002214:	e203      	b.n	800261e <__aeabi_dmul+0x4be>
 8002216:	2b01      	cmp	r3, #1
 8002218:	d000      	beq.n	800221c <__aeabi_dmul+0xbc>
 800221a:	e0cd      	b.n	80023b8 <__aeabi_dmul+0x258>
 800221c:	2200      	movs	r2, #0
 800221e:	2400      	movs	r4, #0
 8002220:	2500      	movs	r5, #0
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	0512      	lsls	r2, r2, #20
 8002226:	4322      	orrs	r2, r4
 8002228:	07db      	lsls	r3, r3, #31
 800222a:	431a      	orrs	r2, r3
 800222c:	0028      	movs	r0, r5
 800222e:	0011      	movs	r1, r2
 8002230:	b007      	add	sp, #28
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	46bb      	mov	fp, r7
 8002236:	46b2      	mov	sl, r6
 8002238:	46a9      	mov	r9, r5
 800223a:	46a0      	mov	r8, r4
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223e:	2400      	movs	r4, #0
 8002240:	2500      	movs	r5, #0
 8002242:	4aaa      	ldr	r2, [pc, #680]	; (80024ec <__aeabi_dmul+0x38c>)
 8002244:	e7ed      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002246:	0c28      	lsrs	r0, r5, #16
 8002248:	042d      	lsls	r5, r5, #16
 800224a:	0c2d      	lsrs	r5, r5, #16
 800224c:	002b      	movs	r3, r5
 800224e:	0c11      	lsrs	r1, r2, #16
 8002250:	0412      	lsls	r2, r2, #16
 8002252:	0c12      	lsrs	r2, r2, #16
 8002254:	4353      	muls	r3, r2
 8002256:	4698      	mov	r8, r3
 8002258:	0013      	movs	r3, r2
 800225a:	002f      	movs	r7, r5
 800225c:	4343      	muls	r3, r0
 800225e:	4699      	mov	r9, r3
 8002260:	434f      	muls	r7, r1
 8002262:	444f      	add	r7, r9
 8002264:	46bb      	mov	fp, r7
 8002266:	4647      	mov	r7, r8
 8002268:	000b      	movs	r3, r1
 800226a:	0c3f      	lsrs	r7, r7, #16
 800226c:	46ba      	mov	sl, r7
 800226e:	4343      	muls	r3, r0
 8002270:	44da      	add	sl, fp
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	45d1      	cmp	r9, sl
 8002276:	d904      	bls.n	8002282 <__aeabi_dmul+0x122>
 8002278:	2780      	movs	r7, #128	; 0x80
 800227a:	027f      	lsls	r7, r7, #9
 800227c:	46b9      	mov	r9, r7
 800227e:	444b      	add	r3, r9
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	4653      	mov	r3, sl
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	469b      	mov	fp, r3
 8002288:	4653      	mov	r3, sl
 800228a:	041f      	lsls	r7, r3, #16
 800228c:	4643      	mov	r3, r8
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	4698      	mov	r8, r3
 8002294:	003b      	movs	r3, r7
 8002296:	4443      	add	r3, r8
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	0c33      	lsrs	r3, r6, #16
 800229c:	0436      	lsls	r6, r6, #16
 800229e:	0c36      	lsrs	r6, r6, #16
 80022a0:	4698      	mov	r8, r3
 80022a2:	0033      	movs	r3, r6
 80022a4:	4343      	muls	r3, r0
 80022a6:	4699      	mov	r9, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4343      	muls	r3, r0
 80022ac:	002f      	movs	r7, r5
 80022ae:	469a      	mov	sl, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	4377      	muls	r7, r6
 80022b4:	435d      	muls	r5, r3
 80022b6:	0c38      	lsrs	r0, r7, #16
 80022b8:	444d      	add	r5, r9
 80022ba:	1945      	adds	r5, r0, r5
 80022bc:	45a9      	cmp	r9, r5
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x168>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4699      	mov	r9, r3
 80022c6:	44ca      	add	sl, r9
 80022c8:	043f      	lsls	r7, r7, #16
 80022ca:	0c28      	lsrs	r0, r5, #16
 80022cc:	0c3f      	lsrs	r7, r7, #16
 80022ce:	042d      	lsls	r5, r5, #16
 80022d0:	19ed      	adds	r5, r5, r7
 80022d2:	0c27      	lsrs	r7, r4, #16
 80022d4:	0424      	lsls	r4, r4, #16
 80022d6:	0c24      	lsrs	r4, r4, #16
 80022d8:	0003      	movs	r3, r0
 80022da:	0020      	movs	r0, r4
 80022dc:	4350      	muls	r0, r2
 80022de:	437a      	muls	r2, r7
 80022e0:	4691      	mov	r9, r2
 80022e2:	003a      	movs	r2, r7
 80022e4:	4453      	add	r3, sl
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	0c03      	lsrs	r3, r0, #16
 80022ea:	469a      	mov	sl, r3
 80022ec:	434a      	muls	r2, r1
 80022ee:	4361      	muls	r1, r4
 80022f0:	4449      	add	r1, r9
 80022f2:	4451      	add	r1, sl
 80022f4:	44ab      	add	fp, r5
 80022f6:	4589      	cmp	r9, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x1a2>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	4699      	mov	r9, r3
 8002300:	444a      	add	r2, r9
 8002302:	0400      	lsls	r0, r0, #16
 8002304:	0c0b      	lsrs	r3, r1, #16
 8002306:	0c00      	lsrs	r0, r0, #16
 8002308:	0409      	lsls	r1, r1, #16
 800230a:	1809      	adds	r1, r1, r0
 800230c:	0020      	movs	r0, r4
 800230e:	4699      	mov	r9, r3
 8002310:	4643      	mov	r3, r8
 8002312:	4370      	muls	r0, r6
 8002314:	435c      	muls	r4, r3
 8002316:	437e      	muls	r6, r7
 8002318:	435f      	muls	r7, r3
 800231a:	0c03      	lsrs	r3, r0, #16
 800231c:	4698      	mov	r8, r3
 800231e:	19a4      	adds	r4, r4, r6
 8002320:	4444      	add	r4, r8
 8002322:	444a      	add	r2, r9
 8002324:	9703      	str	r7, [sp, #12]
 8002326:	42a6      	cmp	r6, r4
 8002328:	d904      	bls.n	8002334 <__aeabi_dmul+0x1d4>
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	4698      	mov	r8, r3
 8002330:	4447      	add	r7, r8
 8002332:	9703      	str	r7, [sp, #12]
 8002334:	0423      	lsls	r3, r4, #16
 8002336:	9e02      	ldr	r6, [sp, #8]
 8002338:	469a      	mov	sl, r3
 800233a:	9b05      	ldr	r3, [sp, #20]
 800233c:	445e      	add	r6, fp
 800233e:	4698      	mov	r8, r3
 8002340:	42ae      	cmp	r6, r5
 8002342:	41ad      	sbcs	r5, r5
 8002344:	1876      	adds	r6, r6, r1
 8002346:	428e      	cmp	r6, r1
 8002348:	4189      	sbcs	r1, r1
 800234a:	0400      	lsls	r0, r0, #16
 800234c:	0c00      	lsrs	r0, r0, #16
 800234e:	4450      	add	r0, sl
 8002350:	4440      	add	r0, r8
 8002352:	426d      	negs	r5, r5
 8002354:	1947      	adds	r7, r0, r5
 8002356:	46b8      	mov	r8, r7
 8002358:	4693      	mov	fp, r2
 800235a:	4249      	negs	r1, r1
 800235c:	4689      	mov	r9, r1
 800235e:	44c3      	add	fp, r8
 8002360:	44d9      	add	r9, fp
 8002362:	4298      	cmp	r0, r3
 8002364:	4180      	sbcs	r0, r0
 8002366:	45a8      	cmp	r8, r5
 8002368:	41ad      	sbcs	r5, r5
 800236a:	4593      	cmp	fp, r2
 800236c:	4192      	sbcs	r2, r2
 800236e:	4589      	cmp	r9, r1
 8002370:	4189      	sbcs	r1, r1
 8002372:	426d      	negs	r5, r5
 8002374:	4240      	negs	r0, r0
 8002376:	4328      	orrs	r0, r5
 8002378:	0c24      	lsrs	r4, r4, #16
 800237a:	4252      	negs	r2, r2
 800237c:	4249      	negs	r1, r1
 800237e:	430a      	orrs	r2, r1
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	1900      	adds	r0, r0, r4
 8002384:	1880      	adds	r0, r0, r2
 8002386:	18c7      	adds	r7, r0, r3
 8002388:	464b      	mov	r3, r9
 800238a:	0ddc      	lsrs	r4, r3, #23
 800238c:	9b04      	ldr	r3, [sp, #16]
 800238e:	0275      	lsls	r5, r6, #9
 8002390:	431d      	orrs	r5, r3
 8002392:	1e6a      	subs	r2, r5, #1
 8002394:	4195      	sbcs	r5, r2
 8002396:	464b      	mov	r3, r9
 8002398:	0df6      	lsrs	r6, r6, #23
 800239a:	027f      	lsls	r7, r7, #9
 800239c:	4335      	orrs	r5, r6
 800239e:	025a      	lsls	r2, r3, #9
 80023a0:	433c      	orrs	r4, r7
 80023a2:	4315      	orrs	r5, r2
 80023a4:	01fb      	lsls	r3, r7, #7
 80023a6:	d400      	bmi.n	80023aa <__aeabi_dmul+0x24a>
 80023a8:	e11c      	b.n	80025e4 <__aeabi_dmul+0x484>
 80023aa:	2101      	movs	r1, #1
 80023ac:	086a      	lsrs	r2, r5, #1
 80023ae:	400d      	ands	r5, r1
 80023b0:	4315      	orrs	r5, r2
 80023b2:	07e2      	lsls	r2, r4, #31
 80023b4:	4315      	orrs	r5, r2
 80023b6:	0864      	lsrs	r4, r4, #1
 80023b8:	494f      	ldr	r1, [pc, #316]	; (80024f8 <__aeabi_dmul+0x398>)
 80023ba:	4461      	add	r1, ip
 80023bc:	2900      	cmp	r1, #0
 80023be:	dc00      	bgt.n	80023c2 <__aeabi_dmul+0x262>
 80023c0:	e0b0      	b.n	8002524 <__aeabi_dmul+0x3c4>
 80023c2:	076b      	lsls	r3, r5, #29
 80023c4:	d009      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023c6:	220f      	movs	r2, #15
 80023c8:	402a      	ands	r2, r5
 80023ca:	2a04      	cmp	r2, #4
 80023cc:	d005      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023ce:	1d2a      	adds	r2, r5, #4
 80023d0:	42aa      	cmp	r2, r5
 80023d2:	41ad      	sbcs	r5, r5
 80023d4:	426d      	negs	r5, r5
 80023d6:	1964      	adds	r4, r4, r5
 80023d8:	0015      	movs	r5, r2
 80023da:	01e3      	lsls	r3, r4, #7
 80023dc:	d504      	bpl.n	80023e8 <__aeabi_dmul+0x288>
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	4a46      	ldr	r2, [pc, #280]	; (80024fc <__aeabi_dmul+0x39c>)
 80023e2:	00c9      	lsls	r1, r1, #3
 80023e4:	4014      	ands	r4, r2
 80023e6:	4461      	add	r1, ip
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <__aeabi_dmul+0x3a0>)
 80023ea:	4291      	cmp	r1, r2
 80023ec:	dd00      	ble.n	80023f0 <__aeabi_dmul+0x290>
 80023ee:	e726      	b.n	800223e <__aeabi_dmul+0xde>
 80023f0:	0762      	lsls	r2, r4, #29
 80023f2:	08ed      	lsrs	r5, r5, #3
 80023f4:	0264      	lsls	r4, r4, #9
 80023f6:	0549      	lsls	r1, r1, #21
 80023f8:	4315      	orrs	r5, r2
 80023fa:	0b24      	lsrs	r4, r4, #12
 80023fc:	0d4a      	lsrs	r2, r1, #21
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002400:	4652      	mov	r2, sl
 8002402:	4332      	orrs	r2, r6
 8002404:	d100      	bne.n	8002408 <__aeabi_dmul+0x2a8>
 8002406:	e07f      	b.n	8002508 <__aeabi_dmul+0x3a8>
 8002408:	2e00      	cmp	r6, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dmul+0x2ae>
 800240c:	e0dc      	b.n	80025c8 <__aeabi_dmul+0x468>
 800240e:	0030      	movs	r0, r6
 8002410:	f000 fe1e 	bl	8003050 <__clzsi2>
 8002414:	0002      	movs	r2, r0
 8002416:	3a0b      	subs	r2, #11
 8002418:	231d      	movs	r3, #29
 800241a:	0001      	movs	r1, r0
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	4652      	mov	r2, sl
 8002420:	3908      	subs	r1, #8
 8002422:	40da      	lsrs	r2, r3
 8002424:	408e      	lsls	r6, r1
 8002426:	4316      	orrs	r6, r2
 8002428:	4652      	mov	r2, sl
 800242a:	408a      	lsls	r2, r1
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	4935      	ldr	r1, [pc, #212]	; (8002504 <__aeabi_dmul+0x3a4>)
 8002430:	1a18      	subs	r0, r3, r0
 8002432:	0003      	movs	r3, r0
 8002434:	468c      	mov	ip, r1
 8002436:	4463      	add	r3, ip
 8002438:	2000      	movs	r0, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	e6d3      	b.n	80021e6 <__aeabi_dmul+0x86>
 800243e:	0025      	movs	r5, r4
 8002440:	4305      	orrs	r5, r0
 8002442:	d04a      	beq.n	80024da <__aeabi_dmul+0x37a>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d100      	bne.n	800244a <__aeabi_dmul+0x2ea>
 8002448:	e0b0      	b.n	80025ac <__aeabi_dmul+0x44c>
 800244a:	0020      	movs	r0, r4
 800244c:	f000 fe00 	bl	8003050 <__clzsi2>
 8002450:	0001      	movs	r1, r0
 8002452:	0002      	movs	r2, r0
 8002454:	390b      	subs	r1, #11
 8002456:	231d      	movs	r3, #29
 8002458:	0010      	movs	r0, r2
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	0031      	movs	r1, r6
 800245e:	0035      	movs	r5, r6
 8002460:	3808      	subs	r0, #8
 8002462:	4084      	lsls	r4, r0
 8002464:	40d9      	lsrs	r1, r3
 8002466:	4085      	lsls	r5, r0
 8002468:	430c      	orrs	r4, r1
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <__aeabi_dmul+0x3a4>)
 800246c:	1a83      	subs	r3, r0, r2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	4699      	mov	r9, r3
 8002474:	469b      	mov	fp, r3
 8002476:	e697      	b.n	80021a8 <__aeabi_dmul+0x48>
 8002478:	0005      	movs	r5, r0
 800247a:	4325      	orrs	r5, r4
 800247c:	d126      	bne.n	80024cc <__aeabi_dmul+0x36c>
 800247e:	2208      	movs	r2, #8
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	2400      	movs	r4, #0
 8002486:	4691      	mov	r9, r2
 8002488:	469b      	mov	fp, r3
 800248a:	e68d      	b.n	80021a8 <__aeabi_dmul+0x48>
 800248c:	4652      	mov	r2, sl
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	4332      	orrs	r2, r6
 8002492:	d110      	bne.n	80024b6 <__aeabi_dmul+0x356>
 8002494:	4915      	ldr	r1, [pc, #84]	; (80024ec <__aeabi_dmul+0x38c>)
 8002496:	2600      	movs	r6, #0
 8002498:	468c      	mov	ip, r1
 800249a:	4463      	add	r3, ip
 800249c:	4649      	mov	r1, r9
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2302      	movs	r3, #2
 80024a2:	4319      	orrs	r1, r3
 80024a4:	4689      	mov	r9, r1
 80024a6:	2002      	movs	r0, #2
 80024a8:	e69d      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024aa:	465b      	mov	r3, fp
 80024ac:	9701      	str	r7, [sp, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d000      	beq.n	80024b4 <__aeabi_dmul+0x354>
 80024b2:	e6ad      	b.n	8002210 <__aeabi_dmul+0xb0>
 80024b4:	e6c3      	b.n	800223e <__aeabi_dmul+0xde>
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <__aeabi_dmul+0x38c>)
 80024b8:	2003      	movs	r0, #3
 80024ba:	4694      	mov	ip, r2
 80024bc:	4463      	add	r3, ip
 80024be:	464a      	mov	r2, r9
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2303      	movs	r3, #3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	4652      	mov	r2, sl
 80024ca:	e68c      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024cc:	220c      	movs	r2, #12
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2303      	movs	r3, #3
 80024d2:	0005      	movs	r5, r0
 80024d4:	4691      	mov	r9, r2
 80024d6:	469b      	mov	fp, r3
 80024d8:	e666      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024da:	2304      	movs	r3, #4
 80024dc:	4699      	mov	r9, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	2400      	movs	r4, #0
 80024e6:	469b      	mov	fp, r3
 80024e8:	e65e      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000007ff 	.word	0x000007ff
 80024f0:	fffffc01 	.word	0xfffffc01
 80024f4:	08018118 	.word	0x08018118
 80024f8:	000003ff 	.word	0x000003ff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	000007fe 	.word	0x000007fe
 8002504:	fffffc0d 	.word	0xfffffc0d
 8002508:	4649      	mov	r1, r9
 800250a:	2301      	movs	r3, #1
 800250c:	4319      	orrs	r1, r3
 800250e:	4689      	mov	r9, r1
 8002510:	2600      	movs	r6, #0
 8002512:	2001      	movs	r0, #1
 8002514:	e667      	b.n	80021e6 <__aeabi_dmul+0x86>
 8002516:	2300      	movs	r3, #0
 8002518:	2480      	movs	r4, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <__aeabi_dmul+0x4cc>)
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	0324      	lsls	r4, r4, #12
 8002522:	e67e      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002524:	2001      	movs	r0, #1
 8002526:	1a40      	subs	r0, r0, r1
 8002528:	2838      	cmp	r0, #56	; 0x38
 800252a:	dd00      	ble.n	800252e <__aeabi_dmul+0x3ce>
 800252c:	e676      	b.n	800221c <__aeabi_dmul+0xbc>
 800252e:	281f      	cmp	r0, #31
 8002530:	dd5b      	ble.n	80025ea <__aeabi_dmul+0x48a>
 8002532:	221f      	movs	r2, #31
 8002534:	0023      	movs	r3, r4
 8002536:	4252      	negs	r2, r2
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	0019      	movs	r1, r3
 800253e:	2820      	cmp	r0, #32
 8002540:	d003      	beq.n	800254a <__aeabi_dmul+0x3ea>
 8002542:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <__aeabi_dmul+0x4d0>)
 8002544:	4462      	add	r2, ip
 8002546:	4094      	lsls	r4, r2
 8002548:	4325      	orrs	r5, r4
 800254a:	1e6a      	subs	r2, r5, #1
 800254c:	4195      	sbcs	r5, r2
 800254e:	002a      	movs	r2, r5
 8002550:	430a      	orrs	r2, r1
 8002552:	2107      	movs	r1, #7
 8002554:	000d      	movs	r5, r1
 8002556:	2400      	movs	r4, #0
 8002558:	4015      	ands	r5, r2
 800255a:	4211      	tst	r1, r2
 800255c:	d05b      	beq.n	8002616 <__aeabi_dmul+0x4b6>
 800255e:	210f      	movs	r1, #15
 8002560:	2400      	movs	r4, #0
 8002562:	4011      	ands	r1, r2
 8002564:	2904      	cmp	r1, #4
 8002566:	d053      	beq.n	8002610 <__aeabi_dmul+0x4b0>
 8002568:	1d11      	adds	r1, r2, #4
 800256a:	4291      	cmp	r1, r2
 800256c:	4192      	sbcs	r2, r2
 800256e:	4252      	negs	r2, r2
 8002570:	18a4      	adds	r4, r4, r2
 8002572:	000a      	movs	r2, r1
 8002574:	0223      	lsls	r3, r4, #8
 8002576:	d54b      	bpl.n	8002610 <__aeabi_dmul+0x4b0>
 8002578:	2201      	movs	r2, #1
 800257a:	2400      	movs	r4, #0
 800257c:	2500      	movs	r5, #0
 800257e:	e650      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	031b      	lsls	r3, r3, #12
 8002584:	421c      	tst	r4, r3
 8002586:	d009      	beq.n	800259c <__aeabi_dmul+0x43c>
 8002588:	421e      	tst	r6, r3
 800258a:	d107      	bne.n	800259c <__aeabi_dmul+0x43c>
 800258c:	4333      	orrs	r3, r6
 800258e:	031c      	lsls	r4, r3, #12
 8002590:	4643      	mov	r3, r8
 8002592:	0015      	movs	r5, r2
 8002594:	0b24      	lsrs	r4, r4, #12
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <__aeabi_dmul+0x4cc>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	e642      	b.n	8002222 <__aeabi_dmul+0xc2>
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0312      	lsls	r2, r2, #12
 80025a0:	4314      	orrs	r4, r2
 80025a2:	0324      	lsls	r4, r4, #12
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <__aeabi_dmul+0x4cc>)
 80025a6:	0b24      	lsrs	r4, r4, #12
 80025a8:	9701      	str	r7, [sp, #4]
 80025aa:	e63a      	b.n	8002222 <__aeabi_dmul+0xc2>
 80025ac:	f000 fd50 	bl	8003050 <__clzsi2>
 80025b0:	0001      	movs	r1, r0
 80025b2:	0002      	movs	r2, r0
 80025b4:	3115      	adds	r1, #21
 80025b6:	3220      	adds	r2, #32
 80025b8:	291c      	cmp	r1, #28
 80025ba:	dc00      	bgt.n	80025be <__aeabi_dmul+0x45e>
 80025bc:	e74b      	b.n	8002456 <__aeabi_dmul+0x2f6>
 80025be:	0034      	movs	r4, r6
 80025c0:	3808      	subs	r0, #8
 80025c2:	2500      	movs	r5, #0
 80025c4:	4084      	lsls	r4, r0
 80025c6:	e750      	b.n	800246a <__aeabi_dmul+0x30a>
 80025c8:	f000 fd42 	bl	8003050 <__clzsi2>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	3215      	adds	r2, #21
 80025d2:	3020      	adds	r0, #32
 80025d4:	2a1c      	cmp	r2, #28
 80025d6:	dc00      	bgt.n	80025da <__aeabi_dmul+0x47a>
 80025d8:	e71e      	b.n	8002418 <__aeabi_dmul+0x2b8>
 80025da:	4656      	mov	r6, sl
 80025dc:	3b08      	subs	r3, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	409e      	lsls	r6, r3
 80025e2:	e723      	b.n	800242c <__aeabi_dmul+0x2cc>
 80025e4:	9b00      	ldr	r3, [sp, #0]
 80025e6:	469c      	mov	ip, r3
 80025e8:	e6e6      	b.n	80023b8 <__aeabi_dmul+0x258>
 80025ea:	4912      	ldr	r1, [pc, #72]	; (8002634 <__aeabi_dmul+0x4d4>)
 80025ec:	0022      	movs	r2, r4
 80025ee:	4461      	add	r1, ip
 80025f0:	002e      	movs	r6, r5
 80025f2:	408d      	lsls	r5, r1
 80025f4:	408a      	lsls	r2, r1
 80025f6:	40c6      	lsrs	r6, r0
 80025f8:	1e69      	subs	r1, r5, #1
 80025fa:	418d      	sbcs	r5, r1
 80025fc:	4332      	orrs	r2, r6
 80025fe:	432a      	orrs	r2, r5
 8002600:	40c4      	lsrs	r4, r0
 8002602:	0753      	lsls	r3, r2, #29
 8002604:	d0b6      	beq.n	8002574 <__aeabi_dmul+0x414>
 8002606:	210f      	movs	r1, #15
 8002608:	4011      	ands	r1, r2
 800260a:	2904      	cmp	r1, #4
 800260c:	d1ac      	bne.n	8002568 <__aeabi_dmul+0x408>
 800260e:	e7b1      	b.n	8002574 <__aeabi_dmul+0x414>
 8002610:	0765      	lsls	r5, r4, #29
 8002612:	0264      	lsls	r4, r4, #9
 8002614:	0b24      	lsrs	r4, r4, #12
 8002616:	08d2      	lsrs	r2, r2, #3
 8002618:	4315      	orrs	r5, r2
 800261a:	2200      	movs	r2, #0
 800261c:	e601      	b.n	8002222 <__aeabi_dmul+0xc2>
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0312      	lsls	r2, r2, #12
 8002622:	4314      	orrs	r4, r2
 8002624:	0324      	lsls	r4, r4, #12
 8002626:	4a01      	ldr	r2, [pc, #4]	; (800262c <__aeabi_dmul+0x4cc>)
 8002628:	0b24      	lsrs	r4, r4, #12
 800262a:	e5fa      	b.n	8002222 <__aeabi_dmul+0xc2>
 800262c:	000007ff 	.word	0x000007ff
 8002630:	0000043e 	.word	0x0000043e
 8002634:	0000041e 	.word	0x0000041e

08002638 <__aeabi_dsub>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	4657      	mov	r7, sl
 800263c:	464e      	mov	r6, r9
 800263e:	4645      	mov	r5, r8
 8002640:	46de      	mov	lr, fp
 8002642:	b5e0      	push	{r5, r6, r7, lr}
 8002644:	001e      	movs	r6, r3
 8002646:	0017      	movs	r7, r2
 8002648:	004a      	lsls	r2, r1, #1
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0d52      	lsrs	r2, r2, #21
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	4690      	mov	r8, r2
 8002652:	0f42      	lsrs	r2, r0, #29
 8002654:	431a      	orrs	r2, r3
 8002656:	0fcd      	lsrs	r5, r1, #31
 8002658:	4ccd      	ldr	r4, [pc, #820]	; (8002990 <__aeabi_dsub+0x358>)
 800265a:	0331      	lsls	r1, r6, #12
 800265c:	00c3      	lsls	r3, r0, #3
 800265e:	4694      	mov	ip, r2
 8002660:	0070      	lsls	r0, r6, #1
 8002662:	0f7a      	lsrs	r2, r7, #29
 8002664:	0a49      	lsrs	r1, r1, #9
 8002666:	00ff      	lsls	r7, r7, #3
 8002668:	469a      	mov	sl, r3
 800266a:	46b9      	mov	r9, r7
 800266c:	0d40      	lsrs	r0, r0, #21
 800266e:	0ff6      	lsrs	r6, r6, #31
 8002670:	4311      	orrs	r1, r2
 8002672:	42a0      	cmp	r0, r4
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x40>
 8002676:	e0b1      	b.n	80027dc <__aeabi_dsub+0x1a4>
 8002678:	2201      	movs	r2, #1
 800267a:	4056      	eors	r6, r2
 800267c:	46b3      	mov	fp, r6
 800267e:	42b5      	cmp	r5, r6
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x4c>
 8002682:	e088      	b.n	8002796 <__aeabi_dsub+0x15e>
 8002684:	4642      	mov	r2, r8
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	2a00      	cmp	r2, #0
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x56>
 800268c:	e0ae      	b.n	80027ec <__aeabi_dsub+0x1b4>
 800268e:	2800      	cmp	r0, #0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x5c>
 8002692:	e0c1      	b.n	8002818 <__aeabi_dsub+0x1e0>
 8002694:	48be      	ldr	r0, [pc, #760]	; (8002990 <__aeabi_dsub+0x358>)
 8002696:	4580      	cmp	r8, r0
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x64>
 800269a:	e151      	b.n	8002940 <__aeabi_dsub+0x308>
 800269c:	2080      	movs	r0, #128	; 0x80
 800269e:	0400      	lsls	r0, r0, #16
 80026a0:	4301      	orrs	r1, r0
 80026a2:	2a38      	cmp	r2, #56	; 0x38
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dsub+0x70>
 80026a6:	e17b      	b.n	80029a0 <__aeabi_dsub+0x368>
 80026a8:	2a1f      	cmp	r2, #31
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dsub+0x76>
 80026ac:	e1ee      	b.n	8002a8c <__aeabi_dsub+0x454>
 80026ae:	2020      	movs	r0, #32
 80026b0:	003e      	movs	r6, r7
 80026b2:	1a80      	subs	r0, r0, r2
 80026b4:	000c      	movs	r4, r1
 80026b6:	40d6      	lsrs	r6, r2
 80026b8:	40d1      	lsrs	r1, r2
 80026ba:	4087      	lsls	r7, r0
 80026bc:	4662      	mov	r2, ip
 80026be:	4084      	lsls	r4, r0
 80026c0:	1a52      	subs	r2, r2, r1
 80026c2:	1e78      	subs	r0, r7, #1
 80026c4:	4187      	sbcs	r7, r0
 80026c6:	4694      	mov	ip, r2
 80026c8:	4334      	orrs	r4, r6
 80026ca:	4327      	orrs	r7, r4
 80026cc:	1bdc      	subs	r4, r3, r7
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	419b      	sbcs	r3, r3
 80026d2:	4662      	mov	r2, ip
 80026d4:	425b      	negs	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4699      	mov	r9, r3
 80026da:	464b      	mov	r3, r9
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0xaa>
 80026e0:	e118      	b.n	8002914 <__aeabi_dsub+0x2dc>
 80026e2:	464b      	mov	r3, r9
 80026e4:	0258      	lsls	r0, r3, #9
 80026e6:	0a43      	lsrs	r3, r0, #9
 80026e8:	4699      	mov	r9, r3
 80026ea:	464b      	mov	r3, r9
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0xba>
 80026f0:	e137      	b.n	8002962 <__aeabi_dsub+0x32a>
 80026f2:	4648      	mov	r0, r9
 80026f4:	f000 fcac 	bl	8003050 <__clzsi2>
 80026f8:	0001      	movs	r1, r0
 80026fa:	3908      	subs	r1, #8
 80026fc:	2320      	movs	r3, #32
 80026fe:	0022      	movs	r2, r4
 8002700:	4648      	mov	r0, r9
 8002702:	1a5b      	subs	r3, r3, r1
 8002704:	40da      	lsrs	r2, r3
 8002706:	4088      	lsls	r0, r1
 8002708:	408c      	lsls	r4, r1
 800270a:	4643      	mov	r3, r8
 800270c:	4310      	orrs	r0, r2
 800270e:	4588      	cmp	r8, r1
 8002710:	dd00      	ble.n	8002714 <__aeabi_dsub+0xdc>
 8002712:	e136      	b.n	8002982 <__aeabi_dsub+0x34a>
 8002714:	1ac9      	subs	r1, r1, r3
 8002716:	1c4b      	adds	r3, r1, #1
 8002718:	2b1f      	cmp	r3, #31
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0xe6>
 800271c:	e0ea      	b.n	80028f4 <__aeabi_dsub+0x2bc>
 800271e:	2220      	movs	r2, #32
 8002720:	0026      	movs	r6, r4
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	0001      	movs	r1, r0
 8002726:	4094      	lsls	r4, r2
 8002728:	40de      	lsrs	r6, r3
 800272a:	40d8      	lsrs	r0, r3
 800272c:	2300      	movs	r3, #0
 800272e:	4091      	lsls	r1, r2
 8002730:	1e62      	subs	r2, r4, #1
 8002732:	4194      	sbcs	r4, r2
 8002734:	4681      	mov	r9, r0
 8002736:	4698      	mov	r8, r3
 8002738:	4331      	orrs	r1, r6
 800273a:	430c      	orrs	r4, r1
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	d009      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002740:	230f      	movs	r3, #15
 8002742:	4023      	ands	r3, r4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	42a3      	cmp	r3, r4
 800274c:	41a4      	sbcs	r4, r4
 800274e:	4264      	negs	r4, r4
 8002750:	44a1      	add	r9, r4
 8002752:	001c      	movs	r4, r3
 8002754:	464b      	mov	r3, r9
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	d400      	bmi.n	800275c <__aeabi_dsub+0x124>
 800275a:	e0de      	b.n	800291a <__aeabi_dsub+0x2e2>
 800275c:	4641      	mov	r1, r8
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <__aeabi_dsub+0x358>)
 8002760:	3101      	adds	r1, #1
 8002762:	4299      	cmp	r1, r3
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x130>
 8002766:	e0e7      	b.n	8002938 <__aeabi_dsub+0x300>
 8002768:	464b      	mov	r3, r9
 800276a:	488a      	ldr	r0, [pc, #552]	; (8002994 <__aeabi_dsub+0x35c>)
 800276c:	08e4      	lsrs	r4, r4, #3
 800276e:	4003      	ands	r3, r0
 8002770:	0018      	movs	r0, r3
 8002772:	0549      	lsls	r1, r1, #21
 8002774:	075b      	lsls	r3, r3, #29
 8002776:	0240      	lsls	r0, r0, #9
 8002778:	4323      	orrs	r3, r4
 800277a:	0d4a      	lsrs	r2, r1, #21
 800277c:	0b04      	lsrs	r4, r0, #12
 800277e:	0512      	lsls	r2, r2, #20
 8002780:	07ed      	lsls	r5, r5, #31
 8002782:	4322      	orrs	r2, r4
 8002784:	432a      	orrs	r2, r5
 8002786:	0018      	movs	r0, r3
 8002788:	0011      	movs	r1, r2
 800278a:	bcf0      	pop	{r4, r5, r6, r7}
 800278c:	46bb      	mov	fp, r7
 800278e:	46b2      	mov	sl, r6
 8002790:	46a9      	mov	r9, r5
 8002792:	46a0      	mov	r8, r4
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002796:	4642      	mov	r2, r8
 8002798:	1a12      	subs	r2, r2, r0
 800279a:	2a00      	cmp	r2, #0
 800279c:	dd52      	ble.n	8002844 <__aeabi_dsub+0x20c>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x16c>
 80027a2:	e09c      	b.n	80028de <__aeabi_dsub+0x2a6>
 80027a4:	45a0      	cmp	r8, r4
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x172>
 80027a8:	e0ca      	b.n	8002940 <__aeabi_dsub+0x308>
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	0400      	lsls	r0, r0, #16
 80027ae:	4301      	orrs	r1, r0
 80027b0:	2a38      	cmp	r2, #56	; 0x38
 80027b2:	dd00      	ble.n	80027b6 <__aeabi_dsub+0x17e>
 80027b4:	e149      	b.n	8002a4a <__aeabi_dsub+0x412>
 80027b6:	2a1f      	cmp	r2, #31
 80027b8:	dc00      	bgt.n	80027bc <__aeabi_dsub+0x184>
 80027ba:	e197      	b.n	8002aec <__aeabi_dsub+0x4b4>
 80027bc:	0010      	movs	r0, r2
 80027be:	000e      	movs	r6, r1
 80027c0:	3820      	subs	r0, #32
 80027c2:	40c6      	lsrs	r6, r0
 80027c4:	2a20      	cmp	r2, #32
 80027c6:	d004      	beq.n	80027d2 <__aeabi_dsub+0x19a>
 80027c8:	2040      	movs	r0, #64	; 0x40
 80027ca:	1a82      	subs	r2, r0, r2
 80027cc:	4091      	lsls	r1, r2
 80027ce:	430f      	orrs	r7, r1
 80027d0:	46b9      	mov	r9, r7
 80027d2:	464c      	mov	r4, r9
 80027d4:	1e62      	subs	r2, r4, #1
 80027d6:	4194      	sbcs	r4, r2
 80027d8:	4334      	orrs	r4, r6
 80027da:	e13a      	b.n	8002a52 <__aeabi_dsub+0x41a>
 80027dc:	000a      	movs	r2, r1
 80027de:	433a      	orrs	r2, r7
 80027e0:	d028      	beq.n	8002834 <__aeabi_dsub+0x1fc>
 80027e2:	46b3      	mov	fp, r6
 80027e4:	42b5      	cmp	r5, r6
 80027e6:	d02b      	beq.n	8002840 <__aeabi_dsub+0x208>
 80027e8:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <__aeabi_dsub+0x360>)
 80027ea:	4442      	add	r2, r8
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d05d      	beq.n	80028ac <__aeabi_dsub+0x274>
 80027f0:	4642      	mov	r2, r8
 80027f2:	4644      	mov	r4, r8
 80027f4:	1a82      	subs	r2, r0, r2
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	d000      	beq.n	80027fc <__aeabi_dsub+0x1c4>
 80027fa:	e0f5      	b.n	80029e8 <__aeabi_dsub+0x3b0>
 80027fc:	4665      	mov	r5, ip
 80027fe:	431d      	orrs	r5, r3
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x1cc>
 8002802:	e19c      	b.n	8002b3e <__aeabi_dsub+0x506>
 8002804:	1e55      	subs	r5, r2, #1
 8002806:	2a01      	cmp	r2, #1
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x1d4>
 800280a:	e1fb      	b.n	8002c04 <__aeabi_dsub+0x5cc>
 800280c:	4c60      	ldr	r4, [pc, #384]	; (8002990 <__aeabi_dsub+0x358>)
 800280e:	42a2      	cmp	r2, r4
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x1dc>
 8002812:	e1bd      	b.n	8002b90 <__aeabi_dsub+0x558>
 8002814:	002a      	movs	r2, r5
 8002816:	e0f0      	b.n	80029fa <__aeabi_dsub+0x3c2>
 8002818:	0008      	movs	r0, r1
 800281a:	4338      	orrs	r0, r7
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x1e8>
 800281e:	e0c3      	b.n	80029a8 <__aeabi_dsub+0x370>
 8002820:	1e50      	subs	r0, r2, #1
 8002822:	2a01      	cmp	r2, #1
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x1f0>
 8002826:	e1a8      	b.n	8002b7a <__aeabi_dsub+0x542>
 8002828:	4c59      	ldr	r4, [pc, #356]	; (8002990 <__aeabi_dsub+0x358>)
 800282a:	42a2      	cmp	r2, r4
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x1f8>
 800282e:	e087      	b.n	8002940 <__aeabi_dsub+0x308>
 8002830:	0002      	movs	r2, r0
 8002832:	e736      	b.n	80026a2 <__aeabi_dsub+0x6a>
 8002834:	2201      	movs	r2, #1
 8002836:	4056      	eors	r6, r2
 8002838:	46b3      	mov	fp, r6
 800283a:	42b5      	cmp	r5, r6
 800283c:	d000      	beq.n	8002840 <__aeabi_dsub+0x208>
 800283e:	e721      	b.n	8002684 <__aeabi_dsub+0x4c>
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <__aeabi_dsub+0x360>)
 8002842:	4442      	add	r2, r8
 8002844:	2a00      	cmp	r2, #0
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x212>
 8002848:	e0b5      	b.n	80029b6 <__aeabi_dsub+0x37e>
 800284a:	4642      	mov	r2, r8
 800284c:	4644      	mov	r4, r8
 800284e:	1a82      	subs	r2, r0, r2
 8002850:	2c00      	cmp	r4, #0
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x21e>
 8002854:	e138      	b.n	8002ac8 <__aeabi_dsub+0x490>
 8002856:	4e4e      	ldr	r6, [pc, #312]	; (8002990 <__aeabi_dsub+0x358>)
 8002858:	42b0      	cmp	r0, r6
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x226>
 800285c:	e1de      	b.n	8002c1c <__aeabi_dsub+0x5e4>
 800285e:	2680      	movs	r6, #128	; 0x80
 8002860:	4664      	mov	r4, ip
 8002862:	0436      	lsls	r6, r6, #16
 8002864:	4334      	orrs	r4, r6
 8002866:	46a4      	mov	ip, r4
 8002868:	2a38      	cmp	r2, #56	; 0x38
 800286a:	dd00      	ble.n	800286e <__aeabi_dsub+0x236>
 800286c:	e196      	b.n	8002b9c <__aeabi_dsub+0x564>
 800286e:	2a1f      	cmp	r2, #31
 8002870:	dd00      	ble.n	8002874 <__aeabi_dsub+0x23c>
 8002872:	e224      	b.n	8002cbe <__aeabi_dsub+0x686>
 8002874:	2620      	movs	r6, #32
 8002876:	1ab4      	subs	r4, r6, r2
 8002878:	46a2      	mov	sl, r4
 800287a:	4664      	mov	r4, ip
 800287c:	4656      	mov	r6, sl
 800287e:	40b4      	lsls	r4, r6
 8002880:	46a1      	mov	r9, r4
 8002882:	001c      	movs	r4, r3
 8002884:	464e      	mov	r6, r9
 8002886:	40d4      	lsrs	r4, r2
 8002888:	4326      	orrs	r6, r4
 800288a:	0034      	movs	r4, r6
 800288c:	4656      	mov	r6, sl
 800288e:	40b3      	lsls	r3, r6
 8002890:	1e5e      	subs	r6, r3, #1
 8002892:	41b3      	sbcs	r3, r6
 8002894:	431c      	orrs	r4, r3
 8002896:	4663      	mov	r3, ip
 8002898:	40d3      	lsrs	r3, r2
 800289a:	18c9      	adds	r1, r1, r3
 800289c:	19e4      	adds	r4, r4, r7
 800289e:	42bc      	cmp	r4, r7
 80028a0:	41bf      	sbcs	r7, r7
 80028a2:	427f      	negs	r7, r7
 80028a4:	46b9      	mov	r9, r7
 80028a6:	4680      	mov	r8, r0
 80028a8:	4489      	add	r9, r1
 80028aa:	e0d8      	b.n	8002a5e <__aeabi_dsub+0x426>
 80028ac:	4640      	mov	r0, r8
 80028ae:	4c3b      	ldr	r4, [pc, #236]	; (800299c <__aeabi_dsub+0x364>)
 80028b0:	3001      	adds	r0, #1
 80028b2:	4220      	tst	r0, r4
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x280>
 80028b6:	e0b4      	b.n	8002a22 <__aeabi_dsub+0x3ea>
 80028b8:	4640      	mov	r0, r8
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d000      	beq.n	80028c0 <__aeabi_dsub+0x288>
 80028be:	e144      	b.n	8002b4a <__aeabi_dsub+0x512>
 80028c0:	4660      	mov	r0, ip
 80028c2:	4318      	orrs	r0, r3
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x290>
 80028c6:	e190      	b.n	8002bea <__aeabi_dsub+0x5b2>
 80028c8:	0008      	movs	r0, r1
 80028ca:	4338      	orrs	r0, r7
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x298>
 80028ce:	e1aa      	b.n	8002c26 <__aeabi_dsub+0x5ee>
 80028d0:	4661      	mov	r1, ip
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	0749      	lsls	r1, r1, #29
 80028d6:	430b      	orrs	r3, r1
 80028d8:	4661      	mov	r1, ip
 80028da:	08cc      	lsrs	r4, r1, #3
 80028dc:	e027      	b.n	800292e <__aeabi_dsub+0x2f6>
 80028de:	0008      	movs	r0, r1
 80028e0:	4338      	orrs	r0, r7
 80028e2:	d061      	beq.n	80029a8 <__aeabi_dsub+0x370>
 80028e4:	1e50      	subs	r0, r2, #1
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x2b4>
 80028ea:	e139      	b.n	8002b60 <__aeabi_dsub+0x528>
 80028ec:	42a2      	cmp	r2, r4
 80028ee:	d027      	beq.n	8002940 <__aeabi_dsub+0x308>
 80028f0:	0002      	movs	r2, r0
 80028f2:	e75d      	b.n	80027b0 <__aeabi_dsub+0x178>
 80028f4:	0002      	movs	r2, r0
 80028f6:	391f      	subs	r1, #31
 80028f8:	40ca      	lsrs	r2, r1
 80028fa:	0011      	movs	r1, r2
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d003      	beq.n	8002908 <__aeabi_dsub+0x2d0>
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4098      	lsls	r0, r3
 8002906:	4304      	orrs	r4, r0
 8002908:	1e63      	subs	r3, r4, #1
 800290a:	419c      	sbcs	r4, r3
 800290c:	2300      	movs	r3, #0
 800290e:	4699      	mov	r9, r3
 8002910:	4698      	mov	r8, r3
 8002912:	430c      	orrs	r4, r1
 8002914:	0763      	lsls	r3, r4, #29
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x2e2>
 8002918:	e712      	b.n	8002740 <__aeabi_dsub+0x108>
 800291a:	464b      	mov	r3, r9
 800291c:	464a      	mov	r2, r9
 800291e:	08e4      	lsrs	r4, r4, #3
 8002920:	075b      	lsls	r3, r3, #29
 8002922:	4323      	orrs	r3, r4
 8002924:	08d4      	lsrs	r4, r2, #3
 8002926:	4642      	mov	r2, r8
 8002928:	4919      	ldr	r1, [pc, #100]	; (8002990 <__aeabi_dsub+0x358>)
 800292a:	428a      	cmp	r2, r1
 800292c:	d00e      	beq.n	800294c <__aeabi_dsub+0x314>
 800292e:	0324      	lsls	r4, r4, #12
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	0b24      	lsrs	r4, r4, #12
 8002934:	0d52      	lsrs	r2, r2, #21
 8002936:	e722      	b.n	800277e <__aeabi_dsub+0x146>
 8002938:	000a      	movs	r2, r1
 800293a:	2400      	movs	r4, #0
 800293c:	2300      	movs	r3, #0
 800293e:	e71e      	b.n	800277e <__aeabi_dsub+0x146>
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	4662      	mov	r2, ip
 8002944:	0752      	lsls	r2, r2, #29
 8002946:	4313      	orrs	r3, r2
 8002948:	4662      	mov	r2, ip
 800294a:	08d4      	lsrs	r4, r2, #3
 800294c:	001a      	movs	r2, r3
 800294e:	4322      	orrs	r2, r4
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x31c>
 8002952:	e1fc      	b.n	8002d4e <__aeabi_dsub+0x716>
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0312      	lsls	r2, r2, #12
 8002958:	4314      	orrs	r4, r2
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <__aeabi_dsub+0x358>)
 800295e:	0b24      	lsrs	r4, r4, #12
 8002960:	e70d      	b.n	800277e <__aeabi_dsub+0x146>
 8002962:	0020      	movs	r0, r4
 8002964:	f000 fb74 	bl	8003050 <__clzsi2>
 8002968:	0001      	movs	r1, r0
 800296a:	3118      	adds	r1, #24
 800296c:	291f      	cmp	r1, #31
 800296e:	dc00      	bgt.n	8002972 <__aeabi_dsub+0x33a>
 8002970:	e6c4      	b.n	80026fc <__aeabi_dsub+0xc4>
 8002972:	3808      	subs	r0, #8
 8002974:	4084      	lsls	r4, r0
 8002976:	4643      	mov	r3, r8
 8002978:	0020      	movs	r0, r4
 800297a:	2400      	movs	r4, #0
 800297c:	4588      	cmp	r8, r1
 800297e:	dc00      	bgt.n	8002982 <__aeabi_dsub+0x34a>
 8002980:	e6c8      	b.n	8002714 <__aeabi_dsub+0xdc>
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__aeabi_dsub+0x35c>)
 8002984:	1a5b      	subs	r3, r3, r1
 8002986:	4010      	ands	r0, r2
 8002988:	4698      	mov	r8, r3
 800298a:	4681      	mov	r9, r0
 800298c:	e6d6      	b.n	800273c <__aeabi_dsub+0x104>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	000007ff 	.word	0x000007ff
 8002994:	ff7fffff 	.word	0xff7fffff
 8002998:	fffff801 	.word	0xfffff801
 800299c:	000007fe 	.word	0x000007fe
 80029a0:	430f      	orrs	r7, r1
 80029a2:	1e7a      	subs	r2, r7, #1
 80029a4:	4197      	sbcs	r7, r2
 80029a6:	e691      	b.n	80026cc <__aeabi_dsub+0x94>
 80029a8:	4661      	mov	r1, ip
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	0749      	lsls	r1, r1, #29
 80029ae:	430b      	orrs	r3, r1
 80029b0:	4661      	mov	r1, ip
 80029b2:	08cc      	lsrs	r4, r1, #3
 80029b4:	e7b8      	b.n	8002928 <__aeabi_dsub+0x2f0>
 80029b6:	4640      	mov	r0, r8
 80029b8:	4cd3      	ldr	r4, [pc, #844]	; (8002d08 <__aeabi_dsub+0x6d0>)
 80029ba:	3001      	adds	r0, #1
 80029bc:	4220      	tst	r0, r4
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x38a>
 80029c0:	e0a2      	b.n	8002b08 <__aeabi_dsub+0x4d0>
 80029c2:	4640      	mov	r0, r8
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d000      	beq.n	80029ca <__aeabi_dsub+0x392>
 80029c8:	e101      	b.n	8002bce <__aeabi_dsub+0x596>
 80029ca:	4660      	mov	r0, ip
 80029cc:	4318      	orrs	r0, r3
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x39a>
 80029d0:	e15e      	b.n	8002c90 <__aeabi_dsub+0x658>
 80029d2:	0008      	movs	r0, r1
 80029d4:	4338      	orrs	r0, r7
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3a2>
 80029d8:	e15f      	b.n	8002c9a <__aeabi_dsub+0x662>
 80029da:	4661      	mov	r1, ip
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	0749      	lsls	r1, r1, #29
 80029e0:	430b      	orrs	r3, r1
 80029e2:	4661      	mov	r1, ip
 80029e4:	08cc      	lsrs	r4, r1, #3
 80029e6:	e7a2      	b.n	800292e <__aeabi_dsub+0x2f6>
 80029e8:	4dc8      	ldr	r5, [pc, #800]	; (8002d0c <__aeabi_dsub+0x6d4>)
 80029ea:	42a8      	cmp	r0, r5
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x3b8>
 80029ee:	e0cf      	b.n	8002b90 <__aeabi_dsub+0x558>
 80029f0:	2580      	movs	r5, #128	; 0x80
 80029f2:	4664      	mov	r4, ip
 80029f4:	042d      	lsls	r5, r5, #16
 80029f6:	432c      	orrs	r4, r5
 80029f8:	46a4      	mov	ip, r4
 80029fa:	2a38      	cmp	r2, #56	; 0x38
 80029fc:	dc56      	bgt.n	8002aac <__aeabi_dsub+0x474>
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x3cc>
 8002a02:	e0d1      	b.n	8002ba8 <__aeabi_dsub+0x570>
 8002a04:	2520      	movs	r5, #32
 8002a06:	001e      	movs	r6, r3
 8002a08:	1aad      	subs	r5, r5, r2
 8002a0a:	4664      	mov	r4, ip
 8002a0c:	40ab      	lsls	r3, r5
 8002a0e:	40ac      	lsls	r4, r5
 8002a10:	40d6      	lsrs	r6, r2
 8002a12:	1e5d      	subs	r5, r3, #1
 8002a14:	41ab      	sbcs	r3, r5
 8002a16:	4334      	orrs	r4, r6
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	4664      	mov	r4, ip
 8002a1c:	40d4      	lsrs	r4, r2
 8002a1e:	1b09      	subs	r1, r1, r4
 8002a20:	e049      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002a22:	4660      	mov	r0, ip
 8002a24:	1bdc      	subs	r4, r3, r7
 8002a26:	1a46      	subs	r6, r0, r1
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	4180      	sbcs	r0, r0
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	4681      	mov	r9, r0
 8002a30:	0030      	movs	r0, r6
 8002a32:	464e      	mov	r6, r9
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	4681      	mov	r9, r0
 8002a38:	0200      	lsls	r0, r0, #8
 8002a3a:	d476      	bmi.n	8002b2a <__aeabi_dsub+0x4f2>
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	d000      	beq.n	8002a44 <__aeabi_dsub+0x40c>
 8002a42:	e652      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002a44:	2400      	movs	r4, #0
 8002a46:	2500      	movs	r5, #0
 8002a48:	e771      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002a4a:	4339      	orrs	r1, r7
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	1e62      	subs	r2, r4, #1
 8002a50:	4194      	sbcs	r4, r2
 8002a52:	18e4      	adds	r4, r4, r3
 8002a54:	429c      	cmp	r4, r3
 8002a56:	419b      	sbcs	r3, r3
 8002a58:	425b      	negs	r3, r3
 8002a5a:	4463      	add	r3, ip
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	464b      	mov	r3, r9
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	d400      	bmi.n	8002a66 <__aeabi_dsub+0x42e>
 8002a64:	e756      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002a66:	2301      	movs	r3, #1
 8002a68:	469c      	mov	ip, r3
 8002a6a:	4ba8      	ldr	r3, [pc, #672]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002a6c:	44e0      	add	r8, ip
 8002a6e:	4598      	cmp	r8, r3
 8002a70:	d038      	beq.n	8002ae4 <__aeabi_dsub+0x4ac>
 8002a72:	464b      	mov	r3, r9
 8002a74:	48a6      	ldr	r0, [pc, #664]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	4003      	ands	r3, r0
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	0863      	lsrs	r3, r4, #1
 8002a7e:	4014      	ands	r4, r2
 8002a80:	431c      	orrs	r4, r3
 8002a82:	07c3      	lsls	r3, r0, #31
 8002a84:	431c      	orrs	r4, r3
 8002a86:	0843      	lsrs	r3, r0, #1
 8002a88:	4699      	mov	r9, r3
 8002a8a:	e657      	b.n	800273c <__aeabi_dsub+0x104>
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	000e      	movs	r6, r1
 8002a90:	3820      	subs	r0, #32
 8002a92:	40c6      	lsrs	r6, r0
 8002a94:	2a20      	cmp	r2, #32
 8002a96:	d004      	beq.n	8002aa2 <__aeabi_dsub+0x46a>
 8002a98:	2040      	movs	r0, #64	; 0x40
 8002a9a:	1a82      	subs	r2, r0, r2
 8002a9c:	4091      	lsls	r1, r2
 8002a9e:	430f      	orrs	r7, r1
 8002aa0:	46b9      	mov	r9, r7
 8002aa2:	464f      	mov	r7, r9
 8002aa4:	1e7a      	subs	r2, r7, #1
 8002aa6:	4197      	sbcs	r7, r2
 8002aa8:	4337      	orrs	r7, r6
 8002aaa:	e60f      	b.n	80026cc <__aeabi_dsub+0x94>
 8002aac:	4662      	mov	r2, ip
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	1afc      	subs	r4, r7, r3
 8002ab8:	42a7      	cmp	r7, r4
 8002aba:	41bf      	sbcs	r7, r7
 8002abc:	427f      	negs	r7, r7
 8002abe:	1bcb      	subs	r3, r1, r7
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	465d      	mov	r5, fp
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	e608      	b.n	80026da <__aeabi_dsub+0xa2>
 8002ac8:	4666      	mov	r6, ip
 8002aca:	431e      	orrs	r6, r3
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x498>
 8002ace:	e0be      	b.n	8002c4e <__aeabi_dsub+0x616>
 8002ad0:	1e56      	subs	r6, r2, #1
 8002ad2:	2a01      	cmp	r2, #1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x4a0>
 8002ad6:	e109      	b.n	8002cec <__aeabi_dsub+0x6b4>
 8002ad8:	4c8c      	ldr	r4, [pc, #560]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x4a8>
 8002ade:	e119      	b.n	8002d14 <__aeabi_dsub+0x6dc>
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	e6c1      	b.n	8002868 <__aeabi_dsub+0x230>
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e648      	b.n	800277e <__aeabi_dsub+0x146>
 8002aec:	2020      	movs	r0, #32
 8002aee:	000c      	movs	r4, r1
 8002af0:	1a80      	subs	r0, r0, r2
 8002af2:	003e      	movs	r6, r7
 8002af4:	4087      	lsls	r7, r0
 8002af6:	4084      	lsls	r4, r0
 8002af8:	40d6      	lsrs	r6, r2
 8002afa:	1e78      	subs	r0, r7, #1
 8002afc:	4187      	sbcs	r7, r0
 8002afe:	40d1      	lsrs	r1, r2
 8002b00:	4334      	orrs	r4, r6
 8002b02:	433c      	orrs	r4, r7
 8002b04:	448c      	add	ip, r1
 8002b06:	e7a4      	b.n	8002a52 <__aeabi_dsub+0x41a>
 8002b08:	4a80      	ldr	r2, [pc, #512]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x4d8>
 8002b0e:	e0e9      	b.n	8002ce4 <__aeabi_dsub+0x6ac>
 8002b10:	19df      	adds	r7, r3, r7
 8002b12:	429f      	cmp	r7, r3
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	4461      	add	r1, ip
 8002b18:	425b      	negs	r3, r3
 8002b1a:	18c9      	adds	r1, r1, r3
 8002b1c:	07cc      	lsls	r4, r1, #31
 8002b1e:	087f      	lsrs	r7, r7, #1
 8002b20:	084b      	lsrs	r3, r1, #1
 8002b22:	4699      	mov	r9, r3
 8002b24:	4680      	mov	r8, r0
 8002b26:	433c      	orrs	r4, r7
 8002b28:	e6f4      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b2a:	1afc      	subs	r4, r7, r3
 8002b2c:	42a7      	cmp	r7, r4
 8002b2e:	41bf      	sbcs	r7, r7
 8002b30:	4663      	mov	r3, ip
 8002b32:	427f      	negs	r7, r7
 8002b34:	1ac9      	subs	r1, r1, r3
 8002b36:	1bcb      	subs	r3, r1, r7
 8002b38:	4699      	mov	r9, r3
 8002b3a:	465d      	mov	r5, fp
 8002b3c:	e5d5      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002b3e:	08ff      	lsrs	r7, r7, #3
 8002b40:	074b      	lsls	r3, r1, #29
 8002b42:	465d      	mov	r5, fp
 8002b44:	433b      	orrs	r3, r7
 8002b46:	08cc      	lsrs	r4, r1, #3
 8002b48:	e6ee      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002b4a:	4662      	mov	r2, ip
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_dsub+0x51a>
 8002b50:	e082      	b.n	8002c58 <__aeabi_dsub+0x620>
 8002b52:	000b      	movs	r3, r1
 8002b54:	433b      	orrs	r3, r7
 8002b56:	d11b      	bne.n	8002b90 <__aeabi_dsub+0x558>
 8002b58:	2480      	movs	r4, #128	; 0x80
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	0324      	lsls	r4, r4, #12
 8002b5e:	e6f9      	b.n	8002954 <__aeabi_dsub+0x31c>
 8002b60:	19dc      	adds	r4, r3, r7
 8002b62:	429c      	cmp	r4, r3
 8002b64:	419b      	sbcs	r3, r3
 8002b66:	4461      	add	r1, ip
 8002b68:	4689      	mov	r9, r1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	4499      	add	r9, r3
 8002b6e:	464b      	mov	r3, r9
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	d444      	bmi.n	8002bfe <__aeabi_dsub+0x5c6>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4698      	mov	r8, r3
 8002b78:	e6cc      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b7a:	1bdc      	subs	r4, r3, r7
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	42a3      	cmp	r3, r4
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	1a51      	subs	r1, r2, r1
 8002b84:	425b      	negs	r3, r3
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	4699      	mov	r9, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	e5a4      	b.n	80026da <__aeabi_dsub+0xa2>
 8002b90:	08ff      	lsrs	r7, r7, #3
 8002b92:	074b      	lsls	r3, r1, #29
 8002b94:	465d      	mov	r5, fp
 8002b96:	433b      	orrs	r3, r7
 8002b98:	08cc      	lsrs	r4, r1, #3
 8002b9a:	e6d7      	b.n	800294c <__aeabi_dsub+0x314>
 8002b9c:	4662      	mov	r2, ip
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	0014      	movs	r4, r2
 8002ba2:	1e63      	subs	r3, r4, #1
 8002ba4:	419c      	sbcs	r4, r3
 8002ba6:	e679      	b.n	800289c <__aeabi_dsub+0x264>
 8002ba8:	0015      	movs	r5, r2
 8002baa:	4664      	mov	r4, ip
 8002bac:	3d20      	subs	r5, #32
 8002bae:	40ec      	lsrs	r4, r5
 8002bb0:	46a0      	mov	r8, r4
 8002bb2:	2a20      	cmp	r2, #32
 8002bb4:	d005      	beq.n	8002bc2 <__aeabi_dsub+0x58a>
 8002bb6:	2540      	movs	r5, #64	; 0x40
 8002bb8:	4664      	mov	r4, ip
 8002bba:	1aaa      	subs	r2, r5, r2
 8002bbc:	4094      	lsls	r4, r2
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	469a      	mov	sl, r3
 8002bc2:	4654      	mov	r4, sl
 8002bc4:	1e63      	subs	r3, r4, #1
 8002bc6:	419c      	sbcs	r4, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	4323      	orrs	r3, r4
 8002bcc:	e773      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	d023      	beq.n	8002c1c <__aeabi_dsub+0x5e4>
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	433a      	orrs	r2, r7
 8002bd8:	d000      	beq.n	8002bdc <__aeabi_dsub+0x5a4>
 8002bda:	e0a0      	b.n	8002d1e <__aeabi_dsub+0x6e6>
 8002bdc:	4662      	mov	r2, ip
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	0752      	lsls	r2, r2, #29
 8002be2:	4313      	orrs	r3, r2
 8002be4:	4662      	mov	r2, ip
 8002be6:	08d4      	lsrs	r4, r2, #3
 8002be8:	e6b0      	b.n	800294c <__aeabi_dsub+0x314>
 8002bea:	000b      	movs	r3, r1
 8002bec:	433b      	orrs	r3, r7
 8002bee:	d100      	bne.n	8002bf2 <__aeabi_dsub+0x5ba>
 8002bf0:	e728      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002bf2:	08ff      	lsrs	r7, r7, #3
 8002bf4:	074b      	lsls	r3, r1, #29
 8002bf6:	465d      	mov	r5, fp
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	08cc      	lsrs	r4, r1, #3
 8002bfc:	e697      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	4698      	mov	r8, r3
 8002c02:	e736      	b.n	8002a72 <__aeabi_dsub+0x43a>
 8002c04:	1afc      	subs	r4, r7, r3
 8002c06:	42a7      	cmp	r7, r4
 8002c08:	41bf      	sbcs	r7, r7
 8002c0a:	4663      	mov	r3, ip
 8002c0c:	427f      	negs	r7, r7
 8002c0e:	1ac9      	subs	r1, r1, r3
 8002c10:	1bcb      	subs	r3, r1, r7
 8002c12:	4699      	mov	r9, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	465d      	mov	r5, fp
 8002c18:	4698      	mov	r8, r3
 8002c1a:	e55e      	b.n	80026da <__aeabi_dsub+0xa2>
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	08ff      	lsrs	r7, r7, #3
 8002c20:	433b      	orrs	r3, r7
 8002c22:	08cc      	lsrs	r4, r1, #3
 8002c24:	e692      	b.n	800294c <__aeabi_dsub+0x314>
 8002c26:	1bdc      	subs	r4, r3, r7
 8002c28:	4660      	mov	r0, ip
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	41b6      	sbcs	r6, r6
 8002c2e:	1a40      	subs	r0, r0, r1
 8002c30:	4276      	negs	r6, r6
 8002c32:	1b80      	subs	r0, r0, r6
 8002c34:	4681      	mov	r9, r0
 8002c36:	0200      	lsls	r0, r0, #8
 8002c38:	d560      	bpl.n	8002cfc <__aeabi_dsub+0x6c4>
 8002c3a:	1afc      	subs	r4, r7, r3
 8002c3c:	42a7      	cmp	r7, r4
 8002c3e:	41bf      	sbcs	r7, r7
 8002c40:	4663      	mov	r3, ip
 8002c42:	427f      	negs	r7, r7
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	1bcb      	subs	r3, r1, r7
 8002c48:	4699      	mov	r9, r3
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	e576      	b.n	800273c <__aeabi_dsub+0x104>
 8002c4e:	08ff      	lsrs	r7, r7, #3
 8002c50:	074b      	lsls	r3, r1, #29
 8002c52:	433b      	orrs	r3, r7
 8002c54:	08cc      	lsrs	r4, r1, #3
 8002c56:	e667      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002c58:	000a      	movs	r2, r1
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	433a      	orrs	r2, r7
 8002c5e:	d100      	bne.n	8002c62 <__aeabi_dsub+0x62a>
 8002c60:	e66f      	b.n	8002942 <__aeabi_dsub+0x30a>
 8002c62:	4662      	mov	r2, ip
 8002c64:	0752      	lsls	r2, r2, #29
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4662      	mov	r2, ip
 8002c6a:	08d4      	lsrs	r4, r2, #3
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	4214      	tst	r4, r2
 8002c72:	d007      	beq.n	8002c84 <__aeabi_dsub+0x64c>
 8002c74:	08c8      	lsrs	r0, r1, #3
 8002c76:	4210      	tst	r0, r2
 8002c78:	d104      	bne.n	8002c84 <__aeabi_dsub+0x64c>
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	0004      	movs	r4, r0
 8002c7e:	08fb      	lsrs	r3, r7, #3
 8002c80:	0749      	lsls	r1, r1, #29
 8002c82:	430b      	orrs	r3, r1
 8002c84:	0f5a      	lsrs	r2, r3, #29
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	0752      	lsls	r2, r2, #29
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	e65d      	b.n	800294c <__aeabi_dsub+0x314>
 8002c90:	074b      	lsls	r3, r1, #29
 8002c92:	08ff      	lsrs	r7, r7, #3
 8002c94:	433b      	orrs	r3, r7
 8002c96:	08cc      	lsrs	r4, r1, #3
 8002c98:	e649      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002c9a:	19dc      	adds	r4, r3, r7
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	419b      	sbcs	r3, r3
 8002ca0:	4461      	add	r1, ip
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	4499      	add	r9, r3
 8002ca8:	464b      	mov	r3, r9
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	d400      	bmi.n	8002cb0 <__aeabi_dsub+0x678>
 8002cae:	e631      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4691      	mov	r9, r2
 8002cba:	4698      	mov	r8, r3
 8002cbc:	e62a      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cbe:	0016      	movs	r6, r2
 8002cc0:	4664      	mov	r4, ip
 8002cc2:	3e20      	subs	r6, #32
 8002cc4:	40f4      	lsrs	r4, r6
 8002cc6:	46a0      	mov	r8, r4
 8002cc8:	2a20      	cmp	r2, #32
 8002cca:	d005      	beq.n	8002cd8 <__aeabi_dsub+0x6a0>
 8002ccc:	2640      	movs	r6, #64	; 0x40
 8002cce:	4664      	mov	r4, ip
 8002cd0:	1ab2      	subs	r2, r6, r2
 8002cd2:	4094      	lsls	r4, r2
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	469a      	mov	sl, r3
 8002cd8:	4654      	mov	r4, sl
 8002cda:	1e63      	subs	r3, r4, #1
 8002cdc:	419c      	sbcs	r4, r3
 8002cde:	4643      	mov	r3, r8
 8002ce0:	431c      	orrs	r4, r3
 8002ce2:	e5db      	b.n	800289c <__aeabi_dsub+0x264>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e548      	b.n	800277e <__aeabi_dsub+0x146>
 8002cec:	19dc      	adds	r4, r3, r7
 8002cee:	42bc      	cmp	r4, r7
 8002cf0:	41bf      	sbcs	r7, r7
 8002cf2:	4461      	add	r1, ip
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	427f      	negs	r7, r7
 8002cf8:	44b9      	add	r9, r7
 8002cfa:	e738      	b.n	8002b6e <__aeabi_dsub+0x536>
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	d100      	bne.n	8002d04 <__aeabi_dsub+0x6cc>
 8002d02:	e69f      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002d04:	e606      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	000007fe 	.word	0x000007fe
 8002d0c:	000007ff 	.word	0x000007ff
 8002d10:	ff7fffff 	.word	0xff7fffff
 8002d14:	08ff      	lsrs	r7, r7, #3
 8002d16:	074b      	lsls	r3, r1, #29
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e616      	b.n	800294c <__aeabi_dsub+0x314>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	0752      	lsls	r2, r2, #29
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4662      	mov	r2, ip
 8002d28:	08d4      	lsrs	r4, r2, #3
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0312      	lsls	r2, r2, #12
 8002d2e:	4214      	tst	r4, r2
 8002d30:	d007      	beq.n	8002d42 <__aeabi_dsub+0x70a>
 8002d32:	08c8      	lsrs	r0, r1, #3
 8002d34:	4210      	tst	r0, r2
 8002d36:	d104      	bne.n	8002d42 <__aeabi_dsub+0x70a>
 8002d38:	465d      	mov	r5, fp
 8002d3a:	0004      	movs	r4, r0
 8002d3c:	08fb      	lsrs	r3, r7, #3
 8002d3e:	0749      	lsls	r1, r1, #29
 8002d40:	430b      	orrs	r3, r1
 8002d42:	0f5a      	lsrs	r2, r3, #29
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	0752      	lsls	r2, r2, #29
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	e5fe      	b.n	800294c <__aeabi_dsub+0x314>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4a01      	ldr	r2, [pc, #4]	; (8002d58 <__aeabi_dsub+0x720>)
 8002d52:	001c      	movs	r4, r3
 8002d54:	e513      	b.n	800277e <__aeabi_dsub+0x146>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000007ff 	.word	0x000007ff

08002d5c <__aeabi_dcmpun>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	0005      	movs	r5, r0
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d62:	031c      	lsls	r4, r3, #12
 8002d64:	0016      	movs	r6, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	030a      	lsls	r2, r1, #12
 8002d6a:	0049      	lsls	r1, r1, #1
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	0d49      	lsrs	r1, r1, #21
 8002d70:	0b24      	lsrs	r4, r4, #12
 8002d72:	0d5b      	lsrs	r3, r3, #21
 8002d74:	4281      	cmp	r1, r0
 8002d76:	d008      	beq.n	8002d8a <__aeabi_dcmpun+0x2e>
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d80:	0020      	movs	r0, r4
 8002d82:	4330      	orrs	r0, r6
 8002d84:	1e43      	subs	r3, r0, #1
 8002d86:	4198      	sbcs	r0, r3
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	432a      	orrs	r2, r5
 8002d8e:	d1fb      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d90:	e7f2      	b.n	8002d78 <__aeabi_dcmpun+0x1c>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	000007ff 	.word	0x000007ff

08002d98 <__aeabi_d2iz>:
 8002d98:	000a      	movs	r2, r1
 8002d9a:	b530      	push	{r4, r5, lr}
 8002d9c:	4c13      	ldr	r4, [pc, #76]	; (8002dec <__aeabi_d2iz+0x54>)
 8002d9e:	0053      	lsls	r3, r2, #1
 8002da0:	0309      	lsls	r1, r1, #12
 8002da2:	0005      	movs	r5, r0
 8002da4:	0b09      	lsrs	r1, r1, #12
 8002da6:	2000      	movs	r0, #0
 8002da8:	0d5b      	lsrs	r3, r3, #21
 8002daa:	0fd2      	lsrs	r2, r2, #31
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	dd04      	ble.n	8002dba <__aeabi_d2iz+0x22>
 8002db0:	480f      	ldr	r0, [pc, #60]	; (8002df0 <__aeabi_d2iz+0x58>)
 8002db2:	4283      	cmp	r3, r0
 8002db4:	dd02      	ble.n	8002dbc <__aeabi_d2iz+0x24>
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_d2iz+0x5c>)
 8002db8:	18d0      	adds	r0, r2, r3
 8002dba:	bd30      	pop	{r4, r5, pc}
 8002dbc:	2080      	movs	r0, #128	; 0x80
 8002dbe:	0340      	lsls	r0, r0, #13
 8002dc0:	4301      	orrs	r1, r0
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <__aeabi_d2iz+0x60>)
 8002dc4:	1ac0      	subs	r0, r0, r3
 8002dc6:	281f      	cmp	r0, #31
 8002dc8:	dd08      	ble.n	8002ddc <__aeabi_d2iz+0x44>
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <__aeabi_d2iz+0x64>)
 8002dcc:	1ac3      	subs	r3, r0, r3
 8002dce:	40d9      	lsrs	r1, r3
 8002dd0:	000b      	movs	r3, r1
 8002dd2:	4258      	negs	r0, r3
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d1f0      	bne.n	8002dba <__aeabi_d2iz+0x22>
 8002dd8:	0018      	movs	r0, r3
 8002dda:	e7ee      	b.n	8002dba <__aeabi_d2iz+0x22>
 8002ddc:	4c08      	ldr	r4, [pc, #32]	; (8002e00 <__aeabi_d2iz+0x68>)
 8002dde:	40c5      	lsrs	r5, r0
 8002de0:	46a4      	mov	ip, r4
 8002de2:	4463      	add	r3, ip
 8002de4:	4099      	lsls	r1, r3
 8002de6:	000b      	movs	r3, r1
 8002de8:	432b      	orrs	r3, r5
 8002dea:	e7f2      	b.n	8002dd2 <__aeabi_d2iz+0x3a>
 8002dec:	000003fe 	.word	0x000003fe
 8002df0:	0000041d 	.word	0x0000041d
 8002df4:	7fffffff 	.word	0x7fffffff
 8002df8:	00000433 	.word	0x00000433
 8002dfc:	00000413 	.word	0x00000413
 8002e00:	fffffbed 	.word	0xfffffbed

08002e04 <__aeabi_i2d>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d016      	beq.n	8002e38 <__aeabi_i2d+0x34>
 8002e0a:	17c3      	asrs	r3, r0, #31
 8002e0c:	18c5      	adds	r5, r0, r3
 8002e0e:	405d      	eors	r5, r3
 8002e10:	0fc4      	lsrs	r4, r0, #31
 8002e12:	0028      	movs	r0, r5
 8002e14:	f000 f91c 	bl	8003050 <__clzsi2>
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <__aeabi_i2d+0x5c>)
 8002e1a:	1a12      	subs	r2, r2, r0
 8002e1c:	280a      	cmp	r0, #10
 8002e1e:	dc16      	bgt.n	8002e4e <__aeabi_i2d+0x4a>
 8002e20:	0003      	movs	r3, r0
 8002e22:	002e      	movs	r6, r5
 8002e24:	3315      	adds	r3, #21
 8002e26:	409e      	lsls	r6, r3
 8002e28:	230b      	movs	r3, #11
 8002e2a:	1a18      	subs	r0, r3, r0
 8002e2c:	40c5      	lsrs	r5, r0
 8002e2e:	0552      	lsls	r2, r2, #21
 8002e30:	032d      	lsls	r5, r5, #12
 8002e32:	0b2d      	lsrs	r5, r5, #12
 8002e34:	0d53      	lsrs	r3, r2, #21
 8002e36:	e003      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e38:	2400      	movs	r4, #0
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	2600      	movs	r6, #0
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	432b      	orrs	r3, r5
 8002e44:	07e4      	lsls	r4, r4, #31
 8002e46:	4323      	orrs	r3, r4
 8002e48:	0030      	movs	r0, r6
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	380b      	subs	r0, #11
 8002e50:	4085      	lsls	r5, r0
 8002e52:	0552      	lsls	r2, r2, #21
 8002e54:	032d      	lsls	r5, r5, #12
 8002e56:	2600      	movs	r6, #0
 8002e58:	0b2d      	lsrs	r5, r5, #12
 8002e5a:	0d53      	lsrs	r3, r2, #21
 8002e5c:	e7f0      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	0000041e 	.word	0x0000041e

08002e64 <__aeabi_ui2d>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	1e04      	subs	r4, r0, #0
 8002e68:	d010      	beq.n	8002e8c <__aeabi_ui2d+0x28>
 8002e6a:	f000 f8f1 	bl	8003050 <__clzsi2>
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <__aeabi_ui2d+0x48>)
 8002e70:	1a1b      	subs	r3, r3, r0
 8002e72:	280a      	cmp	r0, #10
 8002e74:	dc11      	bgt.n	8002e9a <__aeabi_ui2d+0x36>
 8002e76:	220b      	movs	r2, #11
 8002e78:	0021      	movs	r1, r4
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	40d1      	lsrs	r1, r2
 8002e7e:	3015      	adds	r0, #21
 8002e80:	030a      	lsls	r2, r1, #12
 8002e82:	055b      	lsls	r3, r3, #21
 8002e84:	4084      	lsls	r4, r0
 8002e86:	0b12      	lsrs	r2, r2, #12
 8002e88:	0d5b      	lsrs	r3, r3, #21
 8002e8a:	e001      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	051b      	lsls	r3, r3, #20
 8002e92:	4313      	orrs	r3, r2
 8002e94:	0020      	movs	r0, r4
 8002e96:	0019      	movs	r1, r3
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	0022      	movs	r2, r4
 8002e9c:	380b      	subs	r0, #11
 8002e9e:	4082      	lsls	r2, r0
 8002ea0:	055b      	lsls	r3, r3, #21
 8002ea2:	0312      	lsls	r2, r2, #12
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e7f1      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002eac:	0000041e 	.word	0x0000041e

08002eb0 <__aeabi_f2d>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	0043      	lsls	r3, r0, #1
 8002eb4:	0246      	lsls	r6, r0, #9
 8002eb6:	0fc4      	lsrs	r4, r0, #31
 8002eb8:	20fe      	movs	r0, #254	; 0xfe
 8002eba:	0e1b      	lsrs	r3, r3, #24
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	0a75      	lsrs	r5, r6, #9
 8002ec0:	4208      	tst	r0, r1
 8002ec2:	d00c      	beq.n	8002ede <__aeabi_f2d+0x2e>
 8002ec4:	22e0      	movs	r2, #224	; 0xe0
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	4694      	mov	ip, r2
 8002eca:	076d      	lsls	r5, r5, #29
 8002ecc:	0b36      	lsrs	r6, r6, #12
 8002ece:	4463      	add	r3, ip
 8002ed0:	051b      	lsls	r3, r3, #20
 8002ed2:	4333      	orrs	r3, r6
 8002ed4:	07e4      	lsls	r4, r4, #31
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	0028      	movs	r0, r5
 8002eda:	0019      	movs	r1, r3
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d114      	bne.n	8002f0c <__aeabi_f2d+0x5c>
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	d01b      	beq.n	8002f1e <__aeabi_f2d+0x6e>
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	f000 f8b2 	bl	8003050 <__clzsi2>
 8002eec:	280a      	cmp	r0, #10
 8002eee:	dc1c      	bgt.n	8002f2a <__aeabi_f2d+0x7a>
 8002ef0:	230b      	movs	r3, #11
 8002ef2:	002e      	movs	r6, r5
 8002ef4:	1a1b      	subs	r3, r3, r0
 8002ef6:	40de      	lsrs	r6, r3
 8002ef8:	0003      	movs	r3, r0
 8002efa:	3315      	adds	r3, #21
 8002efc:	409d      	lsls	r5, r3
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <__aeabi_f2d+0x88>)
 8002f00:	0336      	lsls	r6, r6, #12
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	0552      	lsls	r2, r2, #21
 8002f06:	0b36      	lsrs	r6, r6, #12
 8002f08:	0d53      	lsrs	r3, r2, #21
 8002f0a:	e7e1      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	d009      	beq.n	8002f24 <__aeabi_f2d+0x74>
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0b36      	lsrs	r6, r6, #12
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f18:	076d      	lsls	r5, r5, #29
 8002f1a:	4316      	orrs	r6, r2
 8002f1c:	e7d8      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2600      	movs	r6, #0
 8002f22:	e7d5      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f24:	2600      	movs	r6, #0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f28:	e7d2      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	3b0b      	subs	r3, #11
 8002f2e:	409d      	lsls	r5, r3
 8002f30:	002e      	movs	r6, r5
 8002f32:	2500      	movs	r5, #0
 8002f34:	e7e3      	b.n	8002efe <__aeabi_f2d+0x4e>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	00000389 	.word	0x00000389
 8002f3c:	000007ff 	.word	0x000007ff

08002f40 <__aeabi_d2f>:
 8002f40:	0002      	movs	r2, r0
 8002f42:	004b      	lsls	r3, r1, #1
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	030c      	lsls	r4, r1, #12
 8002f4a:	4e3d      	ldr	r6, [pc, #244]	; (8003040 <__aeabi_d2f+0x100>)
 8002f4c:	0a64      	lsrs	r4, r4, #9
 8002f4e:	0f40      	lsrs	r0, r0, #29
 8002f50:	1c5f      	adds	r7, r3, #1
 8002f52:	0fc9      	lsrs	r1, r1, #31
 8002f54:	4304      	orrs	r4, r0
 8002f56:	00d5      	lsls	r5, r2, #3
 8002f58:	4237      	tst	r7, r6
 8002f5a:	d00a      	beq.n	8002f72 <__aeabi_d2f+0x32>
 8002f5c:	4839      	ldr	r0, [pc, #228]	; (8003044 <__aeabi_d2f+0x104>)
 8002f5e:	181e      	adds	r6, r3, r0
 8002f60:	2efe      	cmp	r6, #254	; 0xfe
 8002f62:	dd16      	ble.n	8002f92 <__aeabi_d2f+0x52>
 8002f64:	20ff      	movs	r0, #255	; 0xff
 8002f66:	2400      	movs	r4, #0
 8002f68:	05c0      	lsls	r0, r0, #23
 8002f6a:	4320      	orrs	r0, r4
 8002f6c:	07c9      	lsls	r1, r1, #31
 8002f6e:	4308      	orrs	r0, r1
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <__aeabi_d2f+0x44>
 8002f76:	432c      	orrs	r4, r5
 8002f78:	d026      	beq.n	8002fc8 <__aeabi_d2f+0x88>
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	0192      	lsls	r2, r2, #6
 8002f7e:	0a54      	lsrs	r4, r2, #9
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	e7f1      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f84:	4325      	orrs	r5, r4
 8002f86:	d0ed      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002f88:	2080      	movs	r0, #128	; 0x80
 8002f8a:	03c0      	lsls	r0, r0, #15
 8002f8c:	4304      	orrs	r4, r0
 8002f8e:	20ff      	movs	r0, #255	; 0xff
 8002f90:	e7ea      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f92:	2e00      	cmp	r6, #0
 8002f94:	dd1b      	ble.n	8002fce <__aeabi_d2f+0x8e>
 8002f96:	0192      	lsls	r2, r2, #6
 8002f98:	1e53      	subs	r3, r2, #1
 8002f9a:	419a      	sbcs	r2, r3
 8002f9c:	00e4      	lsls	r4, r4, #3
 8002f9e:	0f6d      	lsrs	r5, r5, #29
 8002fa0:	4322      	orrs	r2, r4
 8002fa2:	432a      	orrs	r2, r5
 8002fa4:	0753      	lsls	r3, r2, #29
 8002fa6:	d048      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fa8:	230f      	movs	r3, #15
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d000      	beq.n	8002fb2 <__aeabi_d2f+0x72>
 8002fb0:	3204      	adds	r2, #4
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	04db      	lsls	r3, r3, #19
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d03f      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fba:	1c70      	adds	r0, r6, #1
 8002fbc:	2efe      	cmp	r6, #254	; 0xfe
 8002fbe:	d0d1      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002fc0:	0192      	lsls	r2, r2, #6
 8002fc2:	0a54      	lsrs	r4, r2, #9
 8002fc4:	b2c0      	uxtb	r0, r0
 8002fc6:	e7cf      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e7cc      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fce:	0032      	movs	r2, r6
 8002fd0:	3217      	adds	r2, #23
 8002fd2:	db22      	blt.n	800301a <__aeabi_d2f+0xda>
 8002fd4:	2080      	movs	r0, #128	; 0x80
 8002fd6:	0400      	lsls	r0, r0, #16
 8002fd8:	4320      	orrs	r0, r4
 8002fda:	241e      	movs	r4, #30
 8002fdc:	1ba4      	subs	r4, r4, r6
 8002fde:	2c1f      	cmp	r4, #31
 8002fe0:	dd1d      	ble.n	800301e <__aeabi_d2f+0xde>
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	1b96      	subs	r6, r2, r6
 8002fe8:	0002      	movs	r2, r0
 8002fea:	40f2      	lsrs	r2, r6
 8002fec:	0016      	movs	r6, r2
 8002fee:	2c20      	cmp	r4, #32
 8002ff0:	d004      	beq.n	8002ffc <__aeabi_d2f+0xbc>
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <__aeabi_d2f+0x108>)
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	4463      	add	r3, ip
 8002ff8:	4098      	lsls	r0, r3
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	002a      	movs	r2, r5
 8002ffe:	1e53      	subs	r3, r2, #1
 8003000:	419a      	sbcs	r2, r3
 8003002:	4332      	orrs	r2, r6
 8003004:	2600      	movs	r6, #0
 8003006:	0753      	lsls	r3, r2, #29
 8003008:	d1ce      	bne.n	8002fa8 <__aeabi_d2f+0x68>
 800300a:	2480      	movs	r4, #128	; 0x80
 800300c:	0013      	movs	r3, r2
 800300e:	04e4      	lsls	r4, r4, #19
 8003010:	2001      	movs	r0, #1
 8003012:	4023      	ands	r3, r4
 8003014:	4222      	tst	r2, r4
 8003016:	d1d3      	bne.n	8002fc0 <__aeabi_d2f+0x80>
 8003018:	e7b0      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800301a:	2300      	movs	r3, #0
 800301c:	e7ad      	b.n	8002f7a <__aeabi_d2f+0x3a>
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <__aeabi_d2f+0x10c>)
 8003020:	4694      	mov	ip, r2
 8003022:	002a      	movs	r2, r5
 8003024:	40e2      	lsrs	r2, r4
 8003026:	0014      	movs	r4, r2
 8003028:	002a      	movs	r2, r5
 800302a:	4463      	add	r3, ip
 800302c:	409a      	lsls	r2, r3
 800302e:	4098      	lsls	r0, r3
 8003030:	1e55      	subs	r5, r2, #1
 8003032:	41aa      	sbcs	r2, r5
 8003034:	4302      	orrs	r2, r0
 8003036:	4322      	orrs	r2, r4
 8003038:	e7e4      	b.n	8003004 <__aeabi_d2f+0xc4>
 800303a:	0033      	movs	r3, r6
 800303c:	e79e      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007fe 	.word	0x000007fe
 8003044:	fffffc80 	.word	0xfffffc80
 8003048:	fffffca2 	.word	0xfffffca2
 800304c:	fffffc82 	.word	0xfffffc82

08003050 <__clzsi2>:
 8003050:	211c      	movs	r1, #28
 8003052:	2301      	movs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	4298      	cmp	r0, r3
 8003058:	d301      	bcc.n	800305e <__clzsi2+0xe>
 800305a:	0c00      	lsrs	r0, r0, #16
 800305c:	3910      	subs	r1, #16
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	4298      	cmp	r0, r3
 8003062:	d301      	bcc.n	8003068 <__clzsi2+0x18>
 8003064:	0a00      	lsrs	r0, r0, #8
 8003066:	3908      	subs	r1, #8
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	4298      	cmp	r0, r3
 800306c:	d301      	bcc.n	8003072 <__clzsi2+0x22>
 800306e:	0900      	lsrs	r0, r0, #4
 8003070:	3904      	subs	r1, #4
 8003072:	a202      	add	r2, pc, #8	; (adr r2, 800307c <__clzsi2+0x2c>)
 8003074:	5c10      	ldrb	r0, [r2, r0]
 8003076:	1840      	adds	r0, r0, r1
 8003078:	4770      	bx	lr
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	02020304 	.word	0x02020304
 8003080:	01010101 	.word	0x01010101
	...

0800308c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	0018      	movs	r0, r3
 8003096:	230c      	movs	r3, #12
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f011 f80d 	bl	80140ba <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <MX_ADC1_Init+0xf8>)
 80030a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80030a6:	4b36      	ldr	r3, [pc, #216]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	0392      	lsls	r2, r2, #14
 80030ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0392      	lsls	r2, r2, #14
 80030c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030c4:	2208      	movs	r2, #8
 80030c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030dc:	2202      	movs	r2, #2
 80030de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030e2:	2220      	movs	r2, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f6:	222c      	movs	r2, #44	; 0x2c
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003104:	2205      	movs	r2, #5
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <MX_ADC1_Init+0xf4>)
 800310a:	2205      	movs	r2, #5
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003110:	223c      	movs	r2, #60	; 0x3c
 8003112:	2100      	movs	r1, #0
 8003114:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003118:	2200      	movs	r2, #0
 800311a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <MX_ADC1_Init+0xf4>)
 800311e:	0018      	movs	r0, r3
 8003120:	f002 fa08 	bl	8005534 <HAL_ADC_Init>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003128:	f000 fc0a 	bl	8003940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <MX_ADC1_Init+0xfc>)
 8003130:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800313e:	1d3a      	adds	r2, r7, #4
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f002 fdcd 	bl	8005ce4 <HAL_ADC_ConfigChannel>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d001      	beq.n	8003152 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800314e:	f000 fbf7 	bl	8003940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2204      	movs	r2, #4
 8003156:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003158:	1d3a      	adds	r2, r7, #4
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_ADC1_Init+0xf4>)
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f002 fdc0 	bl	8005ce4 <HAL_ADC_ConfigChannel>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8003168:	f000 fbea 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <MX_ADC1_Init+0x100>)
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003170:	2202      	movs	r2, #2
 8003172:	0018      	movs	r0, r3
 8003174:	f002 fb86 	bl	8005884 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200032b8 	.word	0x200032b8
 8003184:	40012400 	.word	0x40012400
 8003188:	20000100 	.word	0x20000100
 800318c:	200039c4 	.word	0x200039c4

08003190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b091      	sub	sp, #68	; 0x44
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	232c      	movs	r3, #44	; 0x2c
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f010 ff89 	bl	80140ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	2410      	movs	r4, #16
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	0018      	movs	r0, r3
 80031ae:	231c      	movs	r3, #28
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f010 ff81 	bl	80140ba <memset>
  if(adcHandle->Instance==ADC1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a39      	ldr	r2, [pc, #228]	; (80032a4 <HAL_ADC_MspInit+0x114>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d16b      	bne.n	800329a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	01d2      	lsls	r2, r2, #7
 80031c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	f004 fbdc 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d001      	beq.n	80031e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031dc:	f000 fbb0 	bl	8003940 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0349      	lsls	r1, r1, #13
 80031ea:	430a      	orrs	r2, r1
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 8003202:	2102      	movs	r1, #2
 8003204:	430a      	orrs	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	; 0x34
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_CH0_temp1_Pin|ADC1_CH1_temp2_Pin;
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2203      	movs	r2, #3
 800321a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2203      	movs	r2, #3
 8003220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	187b      	adds	r3, r7, r1
 800322a:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_ADC_MspInit+0x11c>)
 800322c:	0019      	movs	r1, r3
 800322e:	0010      	movs	r0, r2
 8003230:	f003 fd0a 	bl	8006c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_ADC_MspInit+0x124>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800323c:	2205      	movs	r2, #5
 800323e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	0052      	lsls	r2, r2, #1
 8003258:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	00d2      	lsls	r2, r2, #3
 8003260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003264:	2200      	movs	r2, #0
 8003266:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003270:	0018      	movs	r0, r3
 8003272:	f003 f9c1 	bl	80065f8 <HAL_DMA_Init>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800327a:	f000 fb61 	bl	8003940 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	200c      	movs	r0, #12
 8003290:	f003 f980 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003294:	200c      	movs	r0, #12
 8003296:	f003 f992 	bl	80065be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b011      	add	sp, #68	; 0x44
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40012400 	.word	0x40012400
 80032a8:	40021000 	.word	0x40021000
 80032ac:	50000400 	.word	0x50000400
 80032b0:	2000331c 	.word	0x2000331c
 80032b4:	40020030 	.word	0x40020030

080032b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_DMA_Init+0x58>)
 80032c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_DMA_Init+0x58>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_DMA_Init+0x58>)
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	2009      	movs	r0, #9
 80032dc:	f003 f95a 	bl	8006594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032e0:	2009      	movs	r0, #9
 80032e2:	f003 f96c 	bl	80065be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	200a      	movs	r0, #10
 80032ec:	f003 f952 	bl	8006594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80032f0:	200a      	movs	r0, #10
 80032f2:	f003 f964 	bl	80065be <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	200b      	movs	r0, #11
 80032fc:	f003 f94a 	bl	8006594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8003300:	200b      	movs	r0, #11
 8003302:	f003 f95c 	bl	80065be <HAL_NVIC_EnableIRQ>

}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b002      	add	sp, #8
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40021000 	.word	0x40021000

08003314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b08b      	sub	sp, #44	; 0x2c
 8003318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	2414      	movs	r4, #20
 800331c:	193b      	adds	r3, r7, r4
 800331e:	0018      	movs	r0, r3
 8003320:	2314      	movs	r3, #20
 8003322:	001a      	movs	r2, r3
 8003324:	2100      	movs	r1, #0
 8003326:	f010 fec8 	bl	80140ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <MX_GPIO_Init+0x15c>)
 800332c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003330:	2104      	movs	r1, #4
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2204      	movs	r2, #4
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003342:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003348:	2120      	movs	r1, #32
 800334a:	430a      	orrs	r2, r1
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
 800334e:	4b48      	ldr	r3, [pc, #288]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b45      	ldr	r3, [pc, #276]	; (8003470 <MX_GPIO_Init+0x15c>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003360:	2101      	movs	r1, #1
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
 8003366:	4b42      	ldr	r3, [pc, #264]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003378:	2102      	movs	r1, #2
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <MX_GPIO_Init+0x15c>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003390:	2108      	movs	r1, #8
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2208      	movs	r2, #8
 800339c:	4013      	ands	r3, r2
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <MX_GPIO_Init+0x160>)
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <MX_GPIO_Init+0x164>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	0018      	movs	r0, r3
 80033aa:	f003 fdce 	bl	8006f4a <HAL_GPIO_WritePin>
                          |softstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin, GPIO_PIN_SET);
 80033ae:	4933      	ldr	r1, [pc, #204]	; (800347c <MX_GPIO_Init+0x168>)
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <MX_GPIO_Init+0x164>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	0018      	movs	r0, r3
 80033b6:	f003 fdc8 	bl	8006f4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <MX_GPIO_Init+0x160>)
 80033be:	601a      	str	r2, [r3, #0]
                          |softstart_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	2201      	movs	r2, #1
 80033c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <MX_GPIO_Init+0x164>)
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f003 fc35 	bl	8006c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin;
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <MX_GPIO_Init+0x168>)
 80033e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	2201      	movs	r2, #1
 80033e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	2201      	movs	r2, #1
 80033ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <MX_GPIO_Init+0x164>)
 80033fa:	0019      	movs	r1, r3
 80033fc:	0010      	movs	r0, r2
 80033fe:	f003 fc23 	bl	8006c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTP1_Pin|OTP2_Pin;
 8003402:	0021      	movs	r1, r4
 8003404:	187b      	adds	r3, r7, r1
 8003406:	22c0      	movs	r2, #192	; 0xc0
 8003408:	0152      	lsls	r2, r2, #5
 800340a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340c:	000c      	movs	r4, r1
 800340e:	193b      	adds	r3, r7, r4
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	193b      	adds	r3, r7, r4
 8003416:	2201      	movs	r2, #1
 8003418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	193b      	adds	r3, r7, r4
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <MX_GPIO_Init+0x16c>)
 800341e:	0019      	movs	r1, r3
 8003420:	0010      	movs	r0, r2
 8003422:	f003 fc11 	bl	8006c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_enter_Pin;
 8003426:	193b      	adds	r3, r7, r4
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	0052      	lsls	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800342e:	193b      	adds	r3, r7, r4
 8003430:	2284      	movs	r2, #132	; 0x84
 8003432:	0392      	lsls	r2, r2, #14
 8003434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003436:	193b      	adds	r3, r7, r4
 8003438:	2201      	movs	r2, #1
 800343a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_enter_GPIO_Port, &GPIO_InitStruct);
 800343c:	193a      	adds	r2, r7, r4
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f003 fbff 	bl	8006c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = X1_Pin|X2_Pin|X1D2_Pin|X4_Pin
 800344a:	193b      	adds	r3, r7, r4
 800344c:	227f      	movs	r2, #127	; 0x7f
 800344e:	601a      	str	r2, [r3, #0]
                          |X5_Pin|X6_Pin|X7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003456:	193b      	adds	r3, r7, r4
 8003458:	2201      	movs	r2, #1
 800345a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800345c:	193b      	adds	r3, r7, r4
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <MX_GPIO_Init+0x170>)
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f003 fbf0 	bl	8006c48 <HAL_GPIO_Init>

}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b00b      	add	sp, #44	; 0x2c
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	00001027 	.word	0x00001027
 8003478:	50000800 	.word	0x50000800
 800347c:	0000e008 	.word	0x0000e008
 8003480:	50000400 	.word	0x50000400
 8003484:	50000c00 	.word	0x50000c00

08003488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800348c:	f001 fe32 	bl	80050f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003490:	f000 f827 	bl	80034e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003494:	f7ff ff3e 	bl	8003314 <MX_GPIO_Init>
  MX_DMA_Init();
 8003498:	f7ff ff0e 	bl	80032b8 <MX_DMA_Init>
  MX_SPI1_Init();
 800349c:	f000 fa56 	bl	800394c <MX_SPI1_Init>
  MX_TIM3_Init();
 80034a0:	f000 fd46 	bl	8003f30 <MX_TIM3_Init>
  MX_TIM6_Init();
 80034a4:	f000 fdaa 	bl	8003ffc <MX_TIM6_Init>
  MX_TIM7_Init();
 80034a8:	f000 fdea 	bl	8004080 <MX_TIM7_Init>
  MX_TIM15_Init();
 80034ac:	f000 fe56 	bl	800415c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80034b0:	f001 fb1e 	bl	8004af0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80034b4:	f001 fb6e 	bl	8004b94 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80034b8:	f7ff fde8 	bl	800308c <MX_ADC1_Init>
  MX_TIM16_Init();
 80034bc:	f000 ff28 	bl	8004310 <MX_TIM16_Init>
  MX_TIM17_Init();
 80034c0:	f000 ff72 	bl	80043a8 <MX_TIM17_Init>
  MX_TIM14_Init();
 80034c4:	f000 fe20 	bl	8004108 <MX_TIM14_Init>
  MX_TIM1_Init();
 80034c8:	f000 fcb4 	bl	8003e34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80034cc:	f001 fac2 	bl	8004a54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  My_sys_Init();
 80034d0:	f000 f85c 	bl	800358c <My_sys_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/*encoder&Cursor&key*/
	IT_handle();
 80034d4:	f000 f908 	bl	80036e8 <IT_handle>
	/*LCD update*/
	Display_Interface();
 80034d8:	f010 fce0 	bl	8013e9c <Display_Interface>

	Check_Error();
 80034dc:	f00d ff98 	bl	8011410 <Check_Error>
	IT_handle();
 80034e0:	e7f8      	b.n	80034d4 <main+0x4c>

080034e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034e2:	b590      	push	{r4, r7, lr}
 80034e4:	b093      	sub	sp, #76	; 0x4c
 80034e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034e8:	2414      	movs	r4, #20
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	0018      	movs	r0, r3
 80034ee:	2334      	movs	r3, #52	; 0x34
 80034f0:	001a      	movs	r2, r3
 80034f2:	2100      	movs	r1, #0
 80034f4:	f010 fde1 	bl	80140ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	0018      	movs	r0, r3
 80034fc:	2310      	movs	r3, #16
 80034fe:	001a      	movs	r2, r3
 8003500:	2100      	movs	r1, #0
 8003502:	f010 fdda 	bl	80140ba <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	0018      	movs	r0, r3
 800350c:	f003 fd3a 	bl	8006f84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003510:	193b      	adds	r3, r7, r4
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	0252      	lsls	r2, r2, #9
 800351c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800351e:	0021      	movs	r1, r4
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2202      	movs	r2, #2
 8003524:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2203      	movs	r2, #3
 800352a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2210      	movs	r2, #16
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2210      	movs	r2, #16
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	0292      	lsls	r2, r2, #10
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8003540:	187b      	adds	r3, r7, r1
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	05d2      	lsls	r2, r2, #23
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003548:	187b      	adds	r3, r7, r1
 800354a:	0018      	movs	r0, r3
 800354c:	f003 fd66 	bl	800701c <HAL_RCC_OscConfig>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003554:	f000 f9f4 	bl	8003940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	2207      	movs	r2, #7
 800355c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	2202      	movs	r2, #2
 8003562:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	01d2      	lsls	r2, r2, #7
 8003570:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2102      	movs	r1, #2
 8003576:	0018      	movs	r0, r3
 8003578:	f004 f860 	bl	800763c <HAL_RCC_ClockConfig>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003580:	f000 f9de 	bl	8003940 <Error_Handler>
  }
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b013      	add	sp, #76	; 0x4c
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <My_sys_Init>:

/* USER CODE BEGIN 4 */
void My_sys_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
	Flag.ADC1_IT=0;
 8003592:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <My_sys_Init+0x128>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
	Flag.TIM7_IT=0;
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <My_sys_Init+0x128>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
	Flag.TIM3_IT=0;
 800359e:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <My_sys_Init+0x128>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
	Flag.TIM6_IT=0;
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <My_sys_Init+0x128>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
	Flag.TIM7_IT=0;
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <My_sys_Init+0x128>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
	Flag.TIM17_IT=0;
 80035b0:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <My_sys_Init+0x128>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
	Flag.ERROR_Flag=0;
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <My_sys_Init+0x128>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
	Flag.Encoder_BF=0;
 80035bc:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <My_sys_Init+0x128>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
	/*main interface*/
	xyz.coordinates1=0;
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <My_sys_Init+0x12c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
	xyz.coordinates2=0;
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <My_sys_Init+0x12c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
	xyz.coordinates3=0;
 80035ce:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <My_sys_Init+0x12c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
	/*power off till soft start*/
	Power_AC_Off;
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <My_sys_Init+0x130>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	2120      	movs	r1, #32
 80035da:	0018      	movs	r0, r3
 80035dc:	f003 fcb5 	bl	8006f4a <HAL_GPIO_WritePin>
	/*Disable the key at first*/
	keys_EN = DISABLE;
 80035e0:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <My_sys_Init+0x134>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
	//PD0 PD2 key scan init
	SYSCFG_TypeDef  *SYScfg=SYSCFG;
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <My_sys_Init+0x138>)
 80035e8:	607b      	str	r3, [r7, #4]
	SYScfg->CFGR1|=(SYSCFG_CFGR1_UCPD2_STROBE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	00d2      	lsls	r2, r2, #3
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
	//PA8
	SYSCFG_TypeDef  *SYScfg1=SYSCFG;
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <My_sys_Init+0x138>)
 80035fa:	603b      	str	r3, [r7, #0]
	SYScfg1->CFGR1|=(SYSCFG_CFGR1_UCPD1_STROBE);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	431a      	orrs	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	601a      	str	r2, [r3, #0]
	/*other device init*/
	AT_25_init();
 800360a:	f008 fc4d 	bl	800bea8 <AT_25_init>
	AT25_Reset();
 800360e:	f009 f847 	bl	800c6a0 <AT25_Reset>
	AT25_load_AD_Param();
 8003612:	f008 ffdd 	bl	800c5d0 <AT25_load_AD_Param>
	OLED_Init();
 8003616:	f00e f979 	bl	801190c <OLED_Init>
	/*Cursor off*/
	__HAL_TIM_DISABLE(&htim6);
 800361a:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <My_sys_Init+0x13c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <My_sys_Init+0x140>)
 8003622:	4013      	ands	r3, r2
 8003624:	d10d      	bne.n	8003642 <My_sys_Init+0xb6>
 8003626:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <My_sys_Init+0x13c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <My_sys_Init+0x144>)
 800362e:	4013      	ands	r3, r2
 8003630:	d107      	bne.n	8003642 <My_sys_Init+0xb6>
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <My_sys_Init+0x13c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <My_sys_Init+0x13c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
	/*check temperature*/
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 8003642:	4924      	ldr	r1, [pc, #144]	; (80036d4 <My_sys_Init+0x148>)
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <My_sys_Init+0x14c>)
 8003646:	2202      	movs	r2, #2
 8003648:	0018      	movs	r0, r3
 800364a:	f002 f91b 	bl	8005884 <HAL_ADC_Start_DMA>
	/*start to communicate with mini board*/
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <My_sys_Init+0x150>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b21      	ldr	r3, [pc, #132]	; (80036dc <My_sys_Init+0x150>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2110      	movs	r1, #16
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
	UART_Start_Receive_DMA(&huart2,Uart2_Receive_buffer,20);
 800365e:	4920      	ldr	r1, [pc, #128]	; (80036e0 <My_sys_Init+0x154>)
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <My_sys_Init+0x150>)
 8003662:	2214      	movs	r2, #20
 8003664:	0018      	movs	r0, r3
 8003666:	f007 fe47 	bl	800b2f8 <UART_Start_Receive_DMA>
	__HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <My_sys_Init+0x150>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	621a      	str	r2, [r3, #32]
	/*Delay on soft start*/
	DAC_Cmd_send(1,2,0x01);
 8003672:	2201      	movs	r2, #1
 8003674:	2102      	movs	r1, #2
 8003676:	2001      	movs	r0, #1
 8003678:	f009 f8d8 	bl	800c82c <DAC_Cmd_send>
	HAL_Delay(10);
 800367c:	200a      	movs	r0, #10
 800367e:	f001 fdbf 	bl	8005200 <HAL_Delay>
	DAC_Cmd_send(1,4,100);
 8003682:	2264      	movs	r2, #100	; 0x64
 8003684:	2104      	movs	r1, #4
 8003686:	2001      	movs	r0, #1
 8003688:	f009 f8d0 	bl	800c82c <DAC_Cmd_send>
	HAL_Delay(10);
 800368c:	200a      	movs	r0, #10
 800368e:	f001 fdb7 	bl	8005200 <HAL_Delay>
	DAC_Cmd_send(1,5,100);
 8003692:	2264      	movs	r2, #100	; 0x64
 8003694:	2105      	movs	r1, #5
 8003696:	2001      	movs	r0, #1
 8003698:	f009 f8c8 	bl	800c82c <DAC_Cmd_send>
	HAL_Delay(10);
 800369c:	200a      	movs	r0, #10
 800369e:	f001 fdaf 	bl	8005200 <HAL_Delay>
	/*all device initialize�?? soft start timer on，power on*/
	HAL_TIM_Base_Start_IT(&htim1);
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <My_sys_Init+0x158>)
 80036a4:	0018      	movs	r0, r3
 80036a6:	f005 fa4f 	bl	8008b48 <HAL_TIM_Base_Start_IT>

}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b002      	add	sp, #8
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	20003378 	.word	0x20003378
 80036b8:	200039e0 	.word	0x200039e0
 80036bc:	50000800 	.word	0x50000800
 80036c0:	2000396d 	.word	0x2000396d
 80036c4:	40010000 	.word	0x40010000
 80036c8:	200034b4 	.word	0x200034b4
 80036cc:	00001111 	.word	0x00001111
 80036d0:	00000444 	.word	0x00000444
 80036d4:	200039c4 	.word	0x200039c4
 80036d8:	200032b8 	.word	0x200032b8
 80036dc:	20003728 	.word	0x20003728
 80036e0:	20003688 	.word	0x20003688
 80036e4:	2000341c 	.word	0x2000341c

080036e8 <IT_handle>:
/**
  * @brief
  * @retval None
  */
void IT_handle(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0

		if(Flag.TIM3_IT==1)
 80036ec:	4b7e      	ldr	r3, [pc, #504]	; (80038e8 <IT_handle+0x200>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d104      	bne.n	80036fe <IT_handle+0x16>
		{
			Encoder_Data_refresh();
 80036f4:	f00a fca4 	bl	800e040 <Encoder_Data_refresh>
			Flag.Encoder_BF=0;
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <IT_handle+0x200>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]
		}
		/*key scan 100Hz*/
		if(Flag.TIM7_IT==1)
 80036fe:	4b7a      	ldr	r3, [pc, #488]	; (80038e8 <IT_handle+0x200>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d104      	bne.n	8003710 <IT_handle+0x28>
		{
			Flag.TIM7_IT=0;
 8003706:	4b78      	ldr	r3, [pc, #480]	; (80038e8 <IT_handle+0x200>)
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
			KEY_Handle();
 800370c:	f00d fd98 	bl	8011240 <KEY_Handle>
		}
		/*Cursor flash*/
		if(Flag.TIM6_IT==1)
 8003710:	4b75      	ldr	r3, [pc, #468]	; (80038e8 <IT_handle+0x200>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d104      	bne.n	8003722 <IT_handle+0x3a>
		{
			Flag.TIM6_IT=0;
 8003718:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <IT_handle+0x200>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
			Cursor_flash();
 800371e:	f010 fa9d 	bl	8013c5c <Cursor_flash>

		}
		if(Flag.ADC1_IT==1)
 8003722:	4b71      	ldr	r3, [pc, #452]	; (80038e8 <IT_handle+0x200>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d000      	beq.n	800372c <IT_handle+0x44>
 800372a:	e0cb      	b.n	80038c4 <IT_handle+0x1dc>
		{
			Flag.ADC1_IT=0;
 800372c:	4b6e      	ldr	r3, [pc, #440]	; (80038e8 <IT_handle+0x200>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
			static float R1,R2,T;
			static uint16_t Voltage_Temperature[2];

			Voltage_Temperature[0]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[0],ADC_RESOLUTION_12B);//mv
 8003732:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <IT_handle+0x204>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	001a      	movs	r2, r3
 8003738:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <IT_handle+0x208>)
 800373a:	4353      	muls	r3, r2
 800373c:	496d      	ldr	r1, [pc, #436]	; (80038f4 <IT_handle+0x20c>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7fc fd04 	bl	800014c <__udivsi3>
 8003744:	0003      	movs	r3, r0
 8003746:	b29a      	uxth	r2, r3
 8003748:	4b6b      	ldr	r3, [pc, #428]	; (80038f8 <IT_handle+0x210>)
 800374a:	801a      	strh	r2, [r3, #0]
			Voltage_Temperature[1]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[1],ADC_RESOLUTION_12B);//mv
 800374c:	4b67      	ldr	r3, [pc, #412]	; (80038ec <IT_handle+0x204>)
 800374e:	885b      	ldrh	r3, [r3, #2]
 8003750:	001a      	movs	r2, r3
 8003752:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <IT_handle+0x208>)
 8003754:	4353      	muls	r3, r2
 8003756:	4967      	ldr	r1, [pc, #412]	; (80038f4 <IT_handle+0x20c>)
 8003758:	0018      	movs	r0, r3
 800375a:	f7fc fcf7 	bl	800014c <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <IT_handle+0x210>)
 8003764:	805a      	strh	r2, [r3, #2]

			R1=Voltage_Temperature[0]/(Voltage_Temperature[0]-2970);
 8003766:	4b64      	ldr	r3, [pc, #400]	; (80038f8 <IT_handle+0x210>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	001a      	movs	r2, r3
 800376c:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <IT_handle+0x210>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4962      	ldr	r1, [pc, #392]	; (80038fc <IT_handle+0x214>)
 8003772:	468c      	mov	ip, r1
 8003774:	4463      	add	r3, ip
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f7fc fd71 	bl	8000260 <__divsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	0018      	movs	r0, r3
 8003782:	f7fd fd61 	bl	8001248 <__aeabi_i2f>
 8003786:	1c02      	adds	r2, r0, #0
 8003788:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <IT_handle+0x218>)
 800378a:	601a      	str	r2, [r3, #0]
			R2=Voltage_Temperature[1]/(Voltage_Temperature[1]-2970);
 800378c:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <IT_handle+0x210>)
 800378e:	885b      	ldrh	r3, [r3, #2]
 8003790:	001a      	movs	r2, r3
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <IT_handle+0x210>)
 8003794:	885b      	ldrh	r3, [r3, #2]
 8003796:	4959      	ldr	r1, [pc, #356]	; (80038fc <IT_handle+0x214>)
 8003798:	468c      	mov	ip, r1
 800379a:	4463      	add	r3, ip
 800379c:	0019      	movs	r1, r3
 800379e:	0010      	movs	r0, r2
 80037a0:	f7fc fd5e 	bl	8000260 <__divsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fd fd4e 	bl	8001248 <__aeabi_i2f>
 80037ac:	1c02      	adds	r2, r0, #0
 80037ae:	4b55      	ldr	r3, [pc, #340]	; (8003904 <IT_handle+0x21c>)
 80037b0:	601a      	str	r2, [r3, #0]
			T=-6.25*(R1+R2)/2+87.5;//温度电阻曲线 Kohm
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <IT_handle+0x218>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b53      	ldr	r3, [pc, #332]	; (8003904 <IT_handle+0x21c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1c19      	adds	r1, r3, #0
 80037bc:	1c10      	adds	r0, r2, #0
 80037be:	f7fc fee9 	bl	8000594 <__aeabi_fadd>
 80037c2:	1c03      	adds	r3, r0, #0
 80037c4:	1c18      	adds	r0, r3, #0
 80037c6:	f7ff fb73 	bl	8002eb0 <__aeabi_f2d>
 80037ca:	2200      	movs	r2, #0
 80037cc:	4b4e      	ldr	r3, [pc, #312]	; (8003908 <IT_handle+0x220>)
 80037ce:	f7fe fcc7 	bl	8002160 <__aeabi_dmul>
 80037d2:	0002      	movs	r2, r0
 80037d4:	000b      	movs	r3, r1
 80037d6:	0010      	movs	r0, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	2200      	movs	r2, #0
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	05db      	lsls	r3, r3, #23
 80037e0:	f7fe f8bc 	bl	800195c <__aeabi_ddiv>
 80037e4:	0002      	movs	r2, r0
 80037e6:	000b      	movs	r3, r1
 80037e8:	0010      	movs	r0, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	2200      	movs	r2, #0
 80037ee:	4b47      	ldr	r3, [pc, #284]	; (800390c <IT_handle+0x224>)
 80037f0:	f7fd fd78 	bl	80012e4 <__aeabi_dadd>
 80037f4:	0002      	movs	r2, r0
 80037f6:	000b      	movs	r3, r1
 80037f8:	0010      	movs	r0, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	f7ff fba0 	bl	8002f40 <__aeabi_d2f>
 8003800:	1c02      	adds	r2, r0, #0
 8003802:	4b43      	ldr	r3, [pc, #268]	; (8003910 <IT_handle+0x228>)
 8003804:	601a      	str	r2, [r3, #0]
			sprintf(String_Temperature_CH1, "%6.2f", T);//update temperature
 8003806:	4b42      	ldr	r3, [pc, #264]	; (8003910 <IT_handle+0x228>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1c18      	adds	r0, r3, #0
 800380c:	f7ff fb50 	bl	8002eb0 <__aeabi_f2d>
 8003810:	0002      	movs	r2, r0
 8003812:	000b      	movs	r3, r1
 8003814:	493f      	ldr	r1, [pc, #252]	; (8003914 <IT_handle+0x22c>)
 8003816:	4840      	ldr	r0, [pc, #256]	; (8003918 <IT_handle+0x230>)
 8003818:	f011 f9ba 	bl	8014b90 <siprintf>
			Flag.FAN_LEVEL=99/5.0*T-485;//compare value
 800381c:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <IT_handle+0x228>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1c18      	adds	r0, r3, #0
 8003822:	f7ff fb45 	bl	8002eb0 <__aeabi_f2d>
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <IT_handle+0x234>)
 8003828:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <IT_handle+0x238>)
 800382a:	f7fe fc99 	bl	8002160 <__aeabi_dmul>
 800382e:	0002      	movs	r2, r0
 8003830:	000b      	movs	r3, r1
 8003832:	0010      	movs	r0, r2
 8003834:	0019      	movs	r1, r3
 8003836:	2200      	movs	r2, #0
 8003838:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <IT_handle+0x23c>)
 800383a:	f7fe fefd 	bl	8002638 <__aeabi_dsub>
 800383e:	0002      	movs	r2, r0
 8003840:	000b      	movs	r3, r1
 8003842:	0010      	movs	r0, r2
 8003844:	0019      	movs	r1, r3
 8003846:	f7ff fb7b 	bl	8002f40 <__aeabi_d2f>
 800384a:	1c02      	adds	r2, r0, #0
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <IT_handle+0x200>)
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,(uint16_t)Flag.FAN_LEVEL);//set compare value
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <IT_handle+0x200>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	1c18      	adds	r0, r3, #0
 8003856:	f7fc fe67 	bl	8000528 <__aeabi_f2uiz>
 800385a:	0003      	movs	r3, r0
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b32      	ldr	r3, [pc, #200]	; (8003928 <IT_handle+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,(uint16_t)Flag.FAN_LEVEL);
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <IT_handle+0x200>)
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	1c18      	adds	r0, r3, #0
 800386a:	f7fc fe5d 	bl	8000528 <__aeabi_f2uiz>
 800386e:	0003      	movs	r3, r0
 8003870:	b29a      	uxth	r2, r3
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <IT_handle+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
			/*过温判别*/
			if(Voltage_Temperature[0]<1500||Voltage_Temperature[1]<1500)
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <IT_handle+0x210>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <IT_handle+0x244>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d904      	bls.n	800388c <IT_handle+0x1a4>
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <IT_handle+0x210>)
 8003884:	885b      	ldrh	r3, [r3, #2]
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <IT_handle+0x244>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d81b      	bhi.n	80038c4 <IT_handle+0x1dc>
			{
				ON_OFF = OFF;
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <IT_handle+0x248>)
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
				OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8003892:	4b28      	ldr	r3, [pc, #160]	; (8003934 <IT_handle+0x24c>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
				Output_Zero();
 8003898:	f009 f8b2 	bl	800ca00 <Output_Zero>
				TIM16_DELAY_OFF();
 800389c:	f00d ff28 	bl	80116f0 <TIM16_DELAY_OFF>
				TIM17_CYCLE_OFF();
 80038a0:	f00d ff9a 	bl	80117d8 <TIM17_CYCLE_OFF>
				Error |= OTP;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <IT_handle+0x250>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2204      	movs	r2, #4
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <IT_handle+0x250>)
 80038b0:	701a      	strb	r2, [r3, #0]
				xyz.coordinates1=4;
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <IT_handle+0x254>)
 80038b4:	2204      	movs	r2, #4
 80038b6:	601a      	str	r2, [r3, #0]
				xyz.coordinates2=1;
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <IT_handle+0x254>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	605a      	str	r2, [r3, #4]
				xyz.coordinates3=0;
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <IT_handle+0x254>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
			}


		}
		if(Flag.TIM14_IT==1)
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <IT_handle+0x200>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d102      	bne.n	80038d2 <IT_handle+0x1ea>
		{
			Flag.TIM14_IT=0;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <IT_handle+0x200>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	621a      	str	r2, [r3, #32]

		}
		if(Flag.TIM17_IT==1)
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <IT_handle+0x200>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <IT_handle+0x1f8>
		{
			Flag.TIM17_IT=0;
 80038da:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <IT_handle+0x200>)
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]

		}


}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20003378 	.word	0x20003378
 80038ec:	200039c4 	.word	0x200039c4
 80038f0:	00000ce4 	.word	0x00000ce4
 80038f4:	00000fff 	.word	0x00000fff
 80038f8:	200033a4 	.word	0x200033a4
 80038fc:	fffff466 	.word	0xfffff466
 8003900:	200033a8 	.word	0x200033a8
 8003904:	200033ac 	.word	0x200033ac
 8003908:	c0190000 	.word	0xc0190000
 800390c:	4055e000 	.word	0x4055e000
 8003910:	200033b0 	.word	0x200033b0
 8003914:	08017db0 	.word	0x08017db0
 8003918:	20003078 	.word	0x20003078
 800391c:	cccccccd 	.word	0xcccccccd
 8003920:	4033cccc 	.word	0x4033cccc
 8003924:	407e5000 	.word	0x407e5000
 8003928:	20003598 	.word	0x20003598
 800392c:	000005db 	.word	0x000005db
 8003930:	20003970 	.word	0x20003970
 8003934:	20003971 	.word	0x20003971
 8003938:	200039c1 	.word	0x200039c1
 800393c:	200039e0 	.word	0x200039e0

08003940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003944:	b672      	cpsid	i
}
 8003946:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003948:	e7fe      	b.n	8003948 <Error_Handler+0x8>
	...

0800394c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <MX_SPI1_Init+0x78>)
 8003954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003958:	2282      	movs	r2, #130	; 0x82
 800395a:	0052      	lsls	r2, r2, #1
 800395c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003966:	22e0      	movs	r2, #224	; 0xe0
 8003968:	00d2      	lsls	r2, r2, #3
 800396a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <MX_SPI1_Init+0x74>)
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <MX_SPI1_Init+0x74>)
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003982:	2208      	movs	r2, #8
 8003984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003988:	2200      	movs	r2, #0
 800398a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <MX_SPI1_Init+0x74>)
 800398e:	2200      	movs	r2, #0
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003994:	2200      	movs	r2, #0
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <MX_SPI1_Init+0x74>)
 800399a:	2207      	movs	r2, #7
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <MX_SPI1_Init+0x74>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <MX_SPI1_Init+0x74>)
 80039a6:	2208      	movs	r2, #8
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <MX_SPI1_Init+0x74>)
 80039ac:	0018      	movs	r0, r3
 80039ae:	f004 f923 	bl	8007bf8 <HAL_SPI_Init>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d001      	beq.n	80039ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80039b6:	f7ff ffc3 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200033b4 	.word	0x200033b4
 80039c4:	40013000 	.word	0x40013000

080039c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b08b      	sub	sp, #44	; 0x2c
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	2414      	movs	r4, #20
 80039d2:	193b      	adds	r3, r7, r4
 80039d4:	0018      	movs	r0, r3
 80039d6:	2314      	movs	r3, #20
 80039d8:	001a      	movs	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	f010 fb6d 	bl	80140ba <memset>
  if(spiHandle->Instance==SPI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_SPI_MspInit+0xd4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d153      	bne.n	8003a92 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039ea:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	0149      	lsls	r1, r1, #5
 80039f4:	430a      	orrs	r2, r1
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
 80039f8:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 80039fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	015b      	lsls	r3, r3, #5
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	635a      	str	r2, [r3, #52]	; 0x34
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	2208      	movs	r2, #8
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	430a      	orrs	r2, r1
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	0052      	lsls	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	2202      	movs	r2, #2
 8003a42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2201      	movs	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_SPI_MspInit+0xdc>)
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	f003 f8f3 	bl	8006c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a62:	0021      	movs	r1, r4
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	22c0      	movs	r2, #192	; 0xc0
 8003a68:	0152      	lsls	r2, r2, #5
 8003a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2202      	movs	r2, #2
 8003a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a84:	187a      	adds	r2, r7, r1
 8003a86:	23a0      	movs	r3, #160	; 0xa0
 8003a88:	05db      	lsls	r3, r3, #23
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f003 f8db 	bl	8006c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b00b      	add	sp, #44	; 0x2c
 8003a98:	bd90      	pop	{r4, r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	40013000 	.word	0x40013000
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	50000c00 	.word	0x50000c00

08003aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_MspInit+0x44>)
 8003ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_MspInit+0x44>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_MspInit+0x44>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_MspInit+0x44>)
 8003ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_MspInit+0x44>)
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	0549      	lsls	r1, r1, #21
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_MspInit+0x44>)
 8003ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	055b      	lsls	r3, r3, #21
 8003adc:	4013      	ands	r3, r2
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	40021000 	.word	0x40021000

08003af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <NMI_Handler+0x4>

08003af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afa:	e7fe      	b.n	8003afa <HardFault_Handler+0x4>

08003afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b14:	f001 fb58 	bl	80051c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <DMA1_Channel1_IRQHandler+0x14>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f002 ff42 	bl	80069b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20003850 	.word	0x20003850

08003b38 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <DMA1_Channel2_3_IRQHandler+0x14>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f002 ff36 	bl	80069b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	2000331c 	.word	0x2000331c

08003b50 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8003b56:	0018      	movs	r0, r3
 8003b58:	f002 ff2a 	bl	80069b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f002 ff26 	bl	80069b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	200038ac 	.word	0x200038ac
 8003b70:	20003908 	.word	0x20003908

08003b74 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <ADC1_IRQHandler+0x14>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f001 ff82 	bl	8005a84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	200032b8 	.word	0x200032b8

08003b8c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003b92:	0018      	movs	r0, r3
 8003b94:	f005 fabe 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	2000341c 	.word	0x2000341c

08003ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <TIM3_IRQHandler+0x14>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f005 fab2 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	20003468 	.word	0x20003468

08003bbc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <TIM6_IRQHandler+0x14>)
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f005 faa6 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  //TIM6_Protect_IT_Handle();
  /* USER CODE END TIM6_IRQn 1 */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	200034b4 	.word	0x200034b4

08003bd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <TIM7_IRQHandler+0x14>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f005 fa9a 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  //OLED光标显示接口
  //TIM7_Oled_IT_Handle();
  /* USER CODE END TIM7_IRQn 1 */
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20003500 	.word	0x20003500

08003bec <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <TIM14_IRQHandler+0x14>)
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f005 fa8e 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	2000354c 	.word	0x2000354c

08003c04 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <TIM16_IRQHandler+0x14>)
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f005 fa82 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */


  /* USER CODE END TIM16_IRQn 1 */
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	200035e4 	.word	0x200035e4

08003c1c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <TIM17_IRQHandler+0x14>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f005 fa76 	bl	8009114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */


  /* USER CODE END TIM17_IRQn 1 */
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20003630 	.word	0x20003630

08003c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <USART1_IRQHandler+0x14>)
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f006 fc9c 	bl	800a578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	20003694 	.word	0x20003694

08003c4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c50:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c52:	0018      	movs	r0, r3
 8003c54:	f006 fc90 	bl	800a578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	2210      	movs	r2, #16
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d11d      	bne.n	8003ca2 <USART2_IRQHandler+0x56>
  {

	    //HAL_UART_DMAStop(&huart2);
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);    //关了空闲中断
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2110      	movs	r1, #16
 8003c72:	438a      	bics	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
	    __HAL_UART_CLEAR_IDLEFLAG(&huart2);				//清除IDLE标志
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	621a      	str	r2, [r3, #32]
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);	//清除IDLE标志
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2110      	movs	r1, #16
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

	    USART2_IDLECallback();
 8003c8e:	f001 f95b 	bl	8004f48 <USART2_IDLECallback>

	    __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);    	//使能空闲中断
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2110      	movs	r1, #16
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20003728 	.word	0x20003728

08003cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  return 1;
 8003cb0:	2301      	movs	r3, #1
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_kill>:

int _kill(int pid, int sig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cc2:	f010 f9bd 	bl	8014040 <__errno>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	2216      	movs	r2, #22
 8003cca:	601a      	str	r2, [r3, #0]
  return -1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	425b      	negs	r3, r3
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_exit>:

void _exit (int status)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	425a      	negs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ffe5 	bl	8003cb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cee:	e7fe      	b.n	8003cee <_exit+0x16>

08003cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e00a      	b.n	8003d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d02:	e000      	b.n	8003d06 <_read+0x16>
 8003d04:	bf00      	nop
 8003d06:	0001      	movs	r1, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	60ba      	str	r2, [r7, #8]
 8003d0e:	b2ca      	uxtb	r2, r1
 8003d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dbf0      	blt.n	8003d02 <_read+0x12>
  }

  return len;
 8003d20:	687b      	ldr	r3, [r7, #4]
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e009      	b.n	8003d50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	60ba      	str	r2, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	0018      	movs	r0, r3
 8003d46:	e000      	b.n	8003d4a <_write+0x20>
 8003d48:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	dbf1      	blt.n	8003d3c <_write+0x12>
  }
  return len;
 8003d58:	687b      	ldr	r3, [r7, #4]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_close>:

int _close(int file)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	425b      	negs	r3, r3
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	0192      	lsls	r2, r2, #6
 8003d86:	605a      	str	r2, [r3, #4]
  return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_isatty>:

int _isatty(int file)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <_sbrk+0x5c>)
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <_sbrk+0x60>)
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <_sbrk+0x64>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <_sbrk+0x64>)
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <_sbrk+0x68>)
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <_sbrk+0x64>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d207      	bcs.n	8003dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dec:	f010 f928 	bl	8014040 <__errno>
 8003df0:	0003      	movs	r3, r0
 8003df2:	220c      	movs	r2, #12
 8003df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	425b      	negs	r3, r3
 8003dfa:	e009      	b.n	8003e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <_sbrk+0x64>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <_sbrk+0x64>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	18d2      	adds	r2, r2, r3
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <_sbrk+0x64>)
 8003e0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b006      	add	sp, #24
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20009000 	.word	0x20009000
 8003e1c:	00000400 	.word	0x00000400
 8003e20:	20003418 	.word	0x20003418
 8003e24:	20003a90 	.word	0x20003a90

08003e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	0018      	movs	r0, r3
 8003e40:	2310      	movs	r3, #16
 8003e42:	001a      	movs	r2, r3
 8003e44:	2100      	movs	r1, #0
 8003e46:	f010 f938 	bl	80140ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	230c      	movs	r3, #12
 8003e50:	001a      	movs	r2, r3
 8003e52:	2100      	movs	r1, #0
 8003e54:	f010 f931 	bl	80140ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e58:	4b2f      	ldr	r3, [pc, #188]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e5a:	4a30      	ldr	r2, [pc, #192]	; (8003f1c <MX_TIM1_Init+0xe8>)
 8003e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <MX_TIM1_Init+0xec>)
 8003e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e64:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <MX_TIM1_Init+0xf0>)
 8003e6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e70:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e82:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e84:	0018      	movs	r0, r3
 8003e86:	f004 fdb9 	bl	80089fc <HAL_TIM_Base_Init>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003e8e:	f7ff fd57 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e92:	2110      	movs	r1, #16
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	0152      	lsls	r2, r2, #5
 8003e9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e9c:	187a      	adds	r2, r7, r1
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f005 fb68 	bl	8009578 <HAL_TIM_ConfigClockSource>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003eac:	f7ff fd48 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ec2:	1d3a      	adds	r2, r7, #4
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f006 f845 	bl	8009f58 <HAL_TIMEx_MasterConfigSynchronization>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003ed2:	f7ff fd35 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2202      	movs	r2, #2
 8003edc:	4252      	negs	r2, r2
 8003ede:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim1,0x00);
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim1);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <MX_TIM1_Init+0xf4>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d10d      	bne.n	8003f10 <MX_TIM1_Init+0xdc>
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <MX_TIM1_Init+0xf8>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	d107      	bne.n	8003f10 <MX_TIM1_Init+0xdc>
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b008      	add	sp, #32
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	2000341c 	.word	0x2000341c
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	0000f9ff 	.word	0x0000f9ff
 8003f24:	00001387 	.word	0x00001387
 8003f28:	00001111 	.word	0x00001111
 8003f2c:	00000444 	.word	0x00000444

08003f30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b08d      	sub	sp, #52	; 0x34
 8003f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f36:	240c      	movs	r4, #12
 8003f38:	193b      	adds	r3, r7, r4
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	2324      	movs	r3, #36	; 0x24
 8003f3e:	001a      	movs	r2, r3
 8003f40:	2100      	movs	r1, #0
 8003f42:	f010 f8ba 	bl	80140ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f46:	003b      	movs	r3, r7
 8003f48:	0018      	movs	r0, r3
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	001a      	movs	r2, r3
 8003f4e:	2100      	movs	r1, #0
 8003f50:	f010 f8b3 	bl	80140ba <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f56:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <MX_TIM3_Init+0xc8>)
 8003f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f5a:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f78:	0021      	movs	r1, r4
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	2200      	movs	r2, #0
 8003f84:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	2201      	movs	r2, #1
 8003f8a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	2200      	movs	r2, #0
 8003fae:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003fb0:	187a      	adds	r2, r7, r1
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003fb4:	0011      	movs	r1, r2
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f004 ff60 	bl	8008e7c <HAL_TIM_Encoder_Init>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003fc0:	f7ff fcbe 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc4:	003b      	movs	r3, r7
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fca:	003b      	movs	r3, r7
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fd0:	003a      	movs	r2, r7
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f005 ffbe 	bl	8009f58 <HAL_TIMEx_MasterConfigSynchronization>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003fe0:	f7ff fcae 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);//encoder on
  /* USER CODE END TIM3_Init 2 */

}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b00d      	add	sp, #52	; 0x34
 8003ff2:	bd90      	pop	{r4, r7, pc}
 8003ff4:	20003468 	.word	0x20003468
 8003ff8:	40000400 	.word	0x40000400

08003ffc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	0018      	movs	r0, r3
 8004006:	230c      	movs	r3, #12
 8004008:	001a      	movs	r2, r3
 800400a:	2100      	movs	r1, #0
 800400c:	f010 f855 	bl	80140ba <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <MX_TIM6_Init+0x74>)
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <MX_TIM6_Init+0x78>)
 8004014:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6399;
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <MX_TIM6_Init+0x74>)
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <MX_TIM6_Init+0x7c>)
 800401a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <MX_TIM6_Init+0x74>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <MX_TIM6_Init+0x74>)
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <MX_TIM6_Init+0x80>)
 8004026:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <MX_TIM6_Init+0x74>)
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <MX_TIM6_Init+0x74>)
 8004030:	0018      	movs	r0, r3
 8004032:	f004 fce3 	bl	80089fc <HAL_TIM_Base_Init>
 8004036:	1e03      	subs	r3, r0, #0
 8004038:	d001      	beq.n	800403e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800403a:	f7ff fc81 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403e:	1d3b      	adds	r3, r7, #4
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800404a:	1d3a      	adds	r2, r7, #4
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <MX_TIM6_Init+0x74>)
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f005 ff81 	bl	8009f58 <HAL_TIMEx_MasterConfigSynchronization>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800405a:	f7ff fc71 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <MX_TIM6_Init+0x74>)
 8004060:	0018      	movs	r0, r3
 8004062:	f004 fd71 	bl	8008b48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	200034b4 	.word	0x200034b4
 8004074:	40001000 	.word	0x40001000
 8004078:	000018ff 	.word	0x000018ff
 800407c:	00001387 	.word	0x00001387

08004080 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	0018      	movs	r0, r3
 800408a:	230c      	movs	r3, #12
 800408c:	001a      	movs	r2, r3
 800408e:	2100      	movs	r1, #0
 8004090:	f010 f813 	bl	80140ba <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <MX_TIM7_Init+0x7c>)
 8004096:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <MX_TIM7_Init+0x80>)
 8004098:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6399;
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <MX_TIM7_Init+0x7c>)
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <MX_TIM7_Init+0x84>)
 800409e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040a8:	2209      	movs	r2, #9
 80040aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040b4:	0018      	movs	r0, r3
 80040b6:	f004 fca1 	bl	80089fc <HAL_TIM_Base_Init>
 80040ba:	1e03      	subs	r3, r0, #0
 80040bc:	d001      	beq.n	80040c2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80040be:	f7ff fc3f 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80040ce:	1d3a      	adds	r2, r7, #4
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f005 ff3f 	bl	8009f58 <HAL_TIMEx_MasterConfigSynchronization>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80040de:	f7ff fc2f 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim7,TIM_IT_UPDATE);
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4252      	negs	r2, r2
 80040ea:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim7);
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f004 fd2a 	bl	8008b48 <HAL_TIM_Base_Start_IT>
  //__HAL_TIM_DISABLE(&htim7);
  /* USER CODE END TIM7_Init 2 */

}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20003500 	.word	0x20003500
 8004100:	40001400 	.word	0x40001400
 8004104:	000018ff 	.word	0x000018ff

08004108 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <MX_TIM14_Init+0x48>)
 800410e:	4a11      	ldr	r2, [pc, #68]	; (8004154 <MX_TIM14_Init+0x4c>)
 8004110:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63999;
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <MX_TIM14_Init+0x48>)
 8004114:	4a10      	ldr	r2, [pc, #64]	; (8004158 <MX_TIM14_Init+0x50>)
 8004116:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <MX_TIM14_Init+0x48>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <MX_TIM14_Init+0x48>)
 8004120:	22f4      	movs	r2, #244	; 0xf4
 8004122:	32ff      	adds	r2, #255	; 0xff
 8004124:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <MX_TIM14_Init+0x48>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800412c:	4b08      	ldr	r3, [pc, #32]	; (8004150 <MX_TIM14_Init+0x48>)
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <MX_TIM14_Init+0x48>)
 8004134:	0018      	movs	r0, r3
 8004136:	f004 fc61 	bl	80089fc <HAL_TIM_Base_Init>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d001      	beq.n	8004142 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800413e:	f7ff fbff 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
	/*check error*/
	HAL_TIM_Base_Start_IT(&htim14);
 8004142:	4b03      	ldr	r3, [pc, #12]	; (8004150 <MX_TIM14_Init+0x48>)
 8004144:	0018      	movs	r0, r3
 8004146:	f004 fcff 	bl	8008b48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	2000354c 	.word	0x2000354c
 8004154:	40002000 	.word	0x40002000
 8004158:	0000f9ff 	.word	0x0000f9ff

0800415c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b09c      	sub	sp, #112	; 0x70
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004162:	2360      	movs	r3, #96	; 0x60
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	0018      	movs	r0, r3
 8004168:	2310      	movs	r3, #16
 800416a:	001a      	movs	r2, r3
 800416c:	2100      	movs	r1, #0
 800416e:	f00f ffa4 	bl	80140ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004172:	2354      	movs	r3, #84	; 0x54
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	0018      	movs	r0, r3
 8004178:	230c      	movs	r3, #12
 800417a:	001a      	movs	r2, r3
 800417c:	2100      	movs	r1, #0
 800417e:	f00f ff9c 	bl	80140ba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004182:	2338      	movs	r3, #56	; 0x38
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	0018      	movs	r0, r3
 8004188:	231c      	movs	r3, #28
 800418a:	001a      	movs	r2, r3
 800418c:	2100      	movs	r1, #0
 800418e:	f00f ff94 	bl	80140ba <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	0018      	movs	r0, r3
 8004196:	2334      	movs	r3, #52	; 0x34
 8004198:	001a      	movs	r2, r3
 800419a:	2100      	movs	r1, #0
 800419c:	f00f ff8d 	bl	80140ba <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80041a0:	4b58      	ldr	r3, [pc, #352]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041a2:	4a59      	ldr	r2, [pc, #356]	; (8004308 <MX_TIM15_Init+0x1ac>)
 80041a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80041a6:	4b57      	ldr	r3, [pc, #348]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041a8:	223f      	movs	r2, #63	; 0x3f
 80041aa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ac:	4b55      	ldr	r3, [pc, #340]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80041b2:	4b54      	ldr	r3, [pc, #336]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041b4:	4a55      	ldr	r2, [pc, #340]	; (800430c <MX_TIM15_Init+0x1b0>)
 80041b6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b8:	4b52      	ldr	r3, [pc, #328]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80041be:	4b51      	ldr	r3, [pc, #324]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80041ca:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041cc:	0018      	movs	r0, r3
 80041ce:	f004 fc15 	bl	80089fc <HAL_TIM_Base_Init>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80041d6:	f7ff fbb3 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041da:	2160      	movs	r1, #96	; 0x60
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	0152      	lsls	r2, r2, #5
 80041e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80041e4:	187a      	adds	r2, r7, r1
 80041e6:	4b47      	ldr	r3, [pc, #284]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f005 f9c4 	bl	8009578 <HAL_TIM_ConfigClockSource>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d001      	beq.n	80041f8 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80041f4:	f7ff fba4 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80041f8:	4b42      	ldr	r3, [pc, #264]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041fa:	0018      	movs	r0, r3
 80041fc:	f004 fcfa 	bl	8008bf4 <HAL_TIM_PWM_Init>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8004204:	f7ff fb9c 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004208:	2154      	movs	r1, #84	; 0x54
 800420a:	187b      	adds	r3, r7, r1
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004210:	187b      	adds	r3, r7, r1
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004216:	187a      	adds	r2, r7, r1
 8004218:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <MX_TIM15_Init+0x1a8>)
 800421a:	0011      	movs	r1, r2
 800421c:	0018      	movs	r0, r3
 800421e:	f005 fe9b 	bl	8009f58 <HAL_TIMEx_MasterConfigSynchronization>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d001      	beq.n	800422a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8004226:	f7ff fb8b 	bl	8003940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800422a:	2138      	movs	r1, #56	; 0x38
 800422c:	187b      	adds	r3, r7, r1
 800422e:	2260      	movs	r2, #96	; 0x60
 8004230:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 99;
 8004232:	187b      	adds	r3, r7, r1
 8004234:	2263      	movs	r2, #99	; 0x63
 8004236:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004238:	187b      	adds	r3, r7, r1
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800423e:	187b      	adds	r3, r7, r1
 8004240:	2200      	movs	r2, #0
 8004242:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004244:	187b      	adds	r3, r7, r1
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800424a:	187b      	adds	r3, r7, r1
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004250:	187b      	adds	r3, r7, r1
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004256:	1879      	adds	r1, r7, r1
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <MX_TIM15_Init+0x1a8>)
 800425a:	2200      	movs	r2, #0
 800425c:	0018      	movs	r0, r3
 800425e:	f005 f88b 	bl	8009378 <HAL_TIM_PWM_ConfigChannel>
 8004262:	1e03      	subs	r3, r0, #0
 8004264:	d001      	beq.n	800426a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004266:	f7ff fb6b 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800426a:	2338      	movs	r3, #56	; 0x38
 800426c:	18f9      	adds	r1, r7, r3
 800426e:	4b25      	ldr	r3, [pc, #148]	; (8004304 <MX_TIM15_Init+0x1a8>)
 8004270:	2204      	movs	r2, #4
 8004272:	0018      	movs	r0, r3
 8004274:	f005 f880 	bl	8009378 <HAL_TIM_PWM_ConfigChannel>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d001      	beq.n	8004280 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 800427c:	f7ff fb60 	bl	8003940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	2200      	movs	r2, #0
 8004296:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	0192      	lsls	r2, r2, #6
 80042a4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042ac:	1d3b      	adds	r3, r7, #4
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80042b2:	1d3a      	adds	r2, r7, #4
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042b6:	0011      	movs	r1, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f005 feb5 	bl	800a028 <HAL_TIMEx_ConfigBreakDeadTime>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d001      	beq.n	80042c6 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 80042c2:	f7ff fb3d 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
	HAL_TIM_Base_Start(&htim15);
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042c8:	0018      	movs	r0, r3
 80042ca:	f004 fbef 	bl	8008aac <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 10);
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	220a      	movs	r2, #10
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 10);
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	220a      	movs	r2, #10
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042e0:	2100      	movs	r1, #0
 80042e2:	0018      	movs	r0, r3
 80042e4:	f004 fce6 	bl	8008cb4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042ea:	2104      	movs	r1, #4
 80042ec:	0018      	movs	r0, r3
 80042ee:	f004 fce1 	bl	8008cb4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80042f2:	4b04      	ldr	r3, [pc, #16]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042f4:	0018      	movs	r0, r3
 80042f6:	f000 f9c3 	bl	8004680 <HAL_TIM_MspPostInit>

}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b01c      	add	sp, #112	; 0x70
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20003598 	.word	0x20003598
 8004308:	40014000 	.word	0x40014000
 800430c:	000003e7 	.word	0x000003e7

08004310 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004314:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <MX_TIM16_Init+0x80>)
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <MX_TIM16_Init+0x84>)
 8004318:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63999;
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <MX_TIM16_Init+0x80>)
 800431c:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <MX_TIM16_Init+0x88>)
 800431e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <MX_TIM16_Init+0x80>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <MX_TIM16_Init+0x80>)
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <MX_TIM16_Init+0x8c>)
 800432a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <MX_TIM16_Init+0x80>)
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004332:	4b17      	ldr	r3, [pc, #92]	; (8004390 <MX_TIM16_Init+0x80>)
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <MX_TIM16_Init+0x80>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800433e:	4b14      	ldr	r3, [pc, #80]	; (8004390 <MX_TIM16_Init+0x80>)
 8004340:	0018      	movs	r0, r3
 8004342:	f004 fb5b 	bl	80089fc <HAL_TIM_Base_Init>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d001      	beq.n	800434e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800434a:	f7ff faf9 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <MX_TIM16_Init+0x80>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2202      	movs	r2, #2
 8004354:	4252      	negs	r2, r2
 8004356:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim16,0x00);
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <MX_TIM16_Init+0x80>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim16);
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <MX_TIM16_Init+0x80>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <MX_TIM16_Init+0x90>)
 8004368:	4013      	ands	r3, r2
 800436a:	d10d      	bne.n	8004388 <MX_TIM16_Init+0x78>
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <MX_TIM16_Init+0x80>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <MX_TIM16_Init+0x94>)
 8004374:	4013      	ands	r3, r2
 8004376:	d107      	bne.n	8004388 <MX_TIM16_Init+0x78>
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <MX_TIM16_Init+0x80>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <MX_TIM16_Init+0x80>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2101      	movs	r1, #1
 8004384:	438a      	bics	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM16_Init 2 */

}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	200035e4 	.word	0x200035e4
 8004394:	40014400 	.word	0x40014400
 8004398:	0000f9ff 	.word	0x0000f9ff
 800439c:	00001387 	.word	0x00001387
 80043a0:	00001111 	.word	0x00001111
 80043a4:	00000444 	.word	0x00000444

080043a8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <MX_TIM17_Init+0x80>)
 80043ae:	4a1f      	ldr	r2, [pc, #124]	; (800442c <MX_TIM17_Init+0x84>)
 80043b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6399;
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <MX_TIM17_Init+0x80>)
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <MX_TIM17_Init+0x88>)
 80043b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <MX_TIM17_Init+0x80>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9;
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <MX_TIM17_Init+0x80>)
 80043c0:	2209      	movs	r2, #9
 80043c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <MX_TIM17_Init+0x80>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80043ca:	4b17      	ldr	r3, [pc, #92]	; (8004428 <MX_TIM17_Init+0x80>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <MX_TIM17_Init+0x80>)
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <MX_TIM17_Init+0x80>)
 80043d8:	0018      	movs	r0, r3
 80043da:	f004 fb0f 	bl	80089fc <HAL_TIM_Base_Init>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80043e2:	f7ff faad 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim17,TIM_IT_UPDATE);
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <MX_TIM17_Init+0x80>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2202      	movs	r2, #2
 80043ec:	4252      	negs	r2, r2
 80043ee:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim17,0x00);
 80043f0:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <MX_TIM17_Init+0x80>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim17);
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <MX_TIM17_Init+0x80>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <MX_TIM17_Init+0x8c>)
 8004400:	4013      	ands	r3, r2
 8004402:	d10d      	bne.n	8004420 <MX_TIM17_Init+0x78>
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <MX_TIM17_Init+0x80>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <MX_TIM17_Init+0x90>)
 800440c:	4013      	ands	r3, r2
 800440e:	d107      	bne.n	8004420 <MX_TIM17_Init+0x78>
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <MX_TIM17_Init+0x80>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b04      	ldr	r3, [pc, #16]	; (8004428 <MX_TIM17_Init+0x80>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	438a      	bics	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM17_Init 2 */

}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	20003630 	.word	0x20003630
 800442c:	40014800 	.word	0x40014800
 8004430:	000018ff 	.word	0x000018ff
 8004434:	00001111 	.word	0x00001111
 8004438:	00000444 	.word	0x00000444

0800443c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a5c      	ldr	r2, [pc, #368]	; (80045bc <HAL_TIM_Base_MspInit+0x180>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d116      	bne.n	800447c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800444e:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004452:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004454:	2180      	movs	r1, #128	; 0x80
 8004456:	0109      	lsls	r1, r1, #4
 8004458:	430a      	orrs	r2, r1
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
 800445c:	4b58      	ldr	r3, [pc, #352]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800445e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4013      	ands	r3, r2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800446a:	2200      	movs	r2, #0
 800446c:	2100      	movs	r1, #0
 800446e:	200d      	movs	r0, #13
 8004470:	f002 f890 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004474:	200d      	movs	r0, #13
 8004476:	f002 f8a2 	bl	80065be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800447a:	e09a      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a50      	ldr	r2, [pc, #320]	; (80045c4 <HAL_TIM_Base_MspInit+0x188>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d114      	bne.n	80044b0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004486:	4b4e      	ldr	r3, [pc, #312]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448a:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800448c:	2110      	movs	r1, #16
 800448e:	430a      	orrs	r2, r1
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c
 8004492:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	2210      	movs	r2, #16
 8004498:	4013      	ands	r3, r2
 800449a:	623b      	str	r3, [r7, #32]
 800449c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	2100      	movs	r1, #0
 80044a2:	2011      	movs	r0, #17
 80044a4:	f002 f876 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80044a8:	2011      	movs	r0, #17
 80044aa:	f002 f888 	bl	80065be <HAL_NVIC_EnableIRQ>
}
 80044ae:	e080      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a44      	ldr	r2, [pc, #272]	; (80045c8 <HAL_TIM_Base_MspInit+0x18c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d114      	bne.n	80044e4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044be:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044c0:	2120      	movs	r1, #32
 80044c2:	430a      	orrs	r2, r1
 80044c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	2220      	movs	r2, #32
 80044cc:	4013      	ands	r3, r2
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2100      	movs	r1, #0
 80044d6:	2012      	movs	r0, #18
 80044d8:	f002 f85c 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80044dc:	2012      	movs	r0, #18
 80044de:	f002 f86e 	bl	80065be <HAL_NVIC_EnableIRQ>
}
 80044e2:	e066      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM14)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a38      	ldr	r2, [pc, #224]	; (80045cc <HAL_TIM_Base_MspInit+0x190>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d116      	bne.n	800451c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044ee:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f2:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044f4:	2180      	movs	r1, #128	; 0x80
 80044f6:	0209      	lsls	r1, r1, #8
 80044f8:	430a      	orrs	r2, r1
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
 80044fc:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	2013      	movs	r0, #19
 8004510:	f002 f840 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004514:	2013      	movs	r0, #19
 8004516:	f002 f852 	bl	80065be <HAL_NVIC_EnableIRQ>
}
 800451a:	e04a      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <HAL_TIM_Base_MspInit+0x194>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800452a:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	0249      	lsls	r1, r1, #9
 8004530:	430a      	orrs	r2, r1
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
 8004534:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	025b      	lsls	r3, r3, #9
 800453c:	4013      	ands	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697b      	ldr	r3, [r7, #20]
}
 8004542:	e036      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <HAL_TIM_Base_MspInit+0x198>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d116      	bne.n	800457c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800454e:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0289      	lsls	r1, r1, #10
 8004558:	430a      	orrs	r2, r1
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
 800455c:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800455e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	029b      	lsls	r3, r3, #10
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800456a:	2200      	movs	r2, #0
 800456c:	2100      	movs	r1, #0
 800456e:	2015      	movs	r0, #21
 8004570:	f002 f810 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004574:	2015      	movs	r0, #21
 8004576:	f002 f822 	bl	80065be <HAL_NVIC_EnableIRQ>
}
 800457a:	e01a      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_TIM_Base_MspInit+0x19c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d115      	bne.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004586:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	02c9      	lsls	r1, r1, #11
 8004590:	430a      	orrs	r2, r1
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	02db      	lsls	r3, r3, #11
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	2016      	movs	r0, #22
 80045a8:	f001 fff4 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80045ac:	2016      	movs	r0, #22
 80045ae:	f002 f806 	bl	80065be <HAL_NVIC_EnableIRQ>
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b00a      	add	sp, #40	; 0x28
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40001000 	.word	0x40001000
 80045c8:	40001400 	.word	0x40001400
 80045cc:	40002000 	.word	0x40002000
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b08b      	sub	sp, #44	; 0x2c
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	2414      	movs	r4, #20
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	0018      	movs	r0, r3
 80045ea:	2314      	movs	r3, #20
 80045ec:	001a      	movs	r2, r3
 80045ee:	2100      	movs	r1, #0
 80045f0:	f00f fd63 	bl	80140ba <memset>
  if(tim_encoderHandle->Instance==TIM3)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_TIM_Encoder_MspInit+0x98>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d135      	bne.n	800466a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004604:	2102      	movs	r1, #2
 8004606:	430a      	orrs	r2, r1
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
 800460a:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	2202      	movs	r2, #2
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004616:	4b18      	ldr	r3, [pc, #96]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 800461c:	2104      	movs	r1, #4
 800461e:	430a      	orrs	r2, r1
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	2204      	movs	r2, #4
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800462e:	0021      	movs	r1, r4
 8004630:	187b      	adds	r3, r7, r1
 8004632:	22c0      	movs	r2, #192	; 0xc0
 8004634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	187b      	adds	r3, r7, r1
 8004638:	2202      	movs	r2, #2
 800463a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004642:	187b      	adds	r3, r7, r1
 8004644:	2200      	movs	r2, #0
 8004646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004648:	187b      	adds	r3, r7, r1
 800464a:	2201      	movs	r2, #1
 800464c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800464e:	187b      	adds	r3, r7, r1
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <HAL_TIM_Encoder_MspInit+0xa0>)
 8004652:	0019      	movs	r1, r3
 8004654:	0010      	movs	r0, r2
 8004656:	f002 faf7 	bl	8006c48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	2010      	movs	r0, #16
 8004660:	f001 ff98 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004664:	2010      	movs	r0, #16
 8004666:	f001 ffaa 	bl	80065be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b00b      	add	sp, #44	; 0x2c
 8004670:	bd90      	pop	{r4, r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	40000400 	.word	0x40000400
 8004678:	40021000 	.word	0x40021000
 800467c:	50000800 	.word	0x50000800

08004680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	240c      	movs	r4, #12
 800468a:	193b      	adds	r3, r7, r4
 800468c:	0018      	movs	r0, r3
 800468e:	2314      	movs	r3, #20
 8004690:	001a      	movs	r2, r3
 8004692:	2100      	movs	r1, #0
 8004694:	f00f fd11 	bl	80140ba <memset>
  if(timHandle->Instance==TIM15)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <HAL_TIM_MspPostInit+0x70>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d122      	bne.n	80046e8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_TIM_MspPostInit+0x74>)
 80046a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <HAL_TIM_MspPostInit+0x74>)
 80046a8:	2102      	movs	r1, #2
 80046aa:	430a      	orrs	r2, r1
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_TIM_MspPostInit+0x74>)
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = FAN_CRTL1_Pin|FAN_CTRL2_Pin;
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	22c0      	movs	r2, #192	; 0xc0
 80046be:	0212      	lsls	r2, r2, #8
 80046c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	0021      	movs	r1, r4
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	2202      	movs	r2, #2
 80046c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	187b      	adds	r3, r7, r1
 80046cc:	2200      	movs	r2, #0
 80046ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	2200      	movs	r2, #0
 80046d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2205      	movs	r2, #5
 80046da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	4a06      	ldr	r2, [pc, #24]	; (80046f8 <HAL_TIM_MspPostInit+0x78>)
 80046e0:	0019      	movs	r1, r3
 80046e2:	0010      	movs	r0, r2
 80046e4:	f002 fab0 	bl	8006c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b009      	add	sp, #36	; 0x24
 80046ee:	bd90      	pop	{r4, r7, pc}
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40021000 	.word	0x40021000
 80046f8:	50000400 	.word	0x50000400

080046fc <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

	/*soft start*/
	if(htim==&htim1)
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4bb5      	ldr	r3, [pc, #724]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004708:	429a      	cmp	r2, r3
 800470a:	d000      	beq.n	800470e <HAL_TIM_PeriodElapsedCallback+0x12>
 800470c:	e0b2      	b.n	8004874 <HAL_TIM_PeriodElapsedCallback+0x178>
	{
		keys_EN = ENABLE;//ENABLE按键
 800470e:	4bb4      	ldr	r3, [pc, #720]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim3);
 8004714:	4bb3      	ldr	r3, [pc, #716]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4bb2      	ldr	r3, [pc, #712]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2101      	movs	r1, #1
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8004724:	4baf      	ldr	r3, [pc, #700]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	4bae      	ldr	r3, [pc, #696]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004734:	4bab      	ldr	r3, [pc, #684]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004736:	213c      	movs	r1, #60	; 0x3c
 8004738:	0018      	movs	r0, r3
 800473a:	f004 fc47 	bl	8008fcc <HAL_TIM_Encoder_Start>
		Power_AC_On;	 //time to soft start
 800473e:	4baa      	ldr	r3, [pc, #680]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004740:	2201      	movs	r2, #1
 8004742:	2120      	movs	r1, #32
 8004744:	0018      	movs	r0, r3
 8004746:	f002 fc00 	bl	8006f4a <HAL_GPIO_WritePin>

		/*OVP*/
		if(Voltage_Actual> 150)
 800474a:	4ba8      	ldr	r3, [pc, #672]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	49a8      	ldr	r1, [pc, #672]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004750:	1c18      	adds	r0, r3, #0
 8004752:	f7fb fed5 	bl	8000500 <__aeabi_fcmpgt>
 8004756:	1e03      	subs	r3, r0, #0
 8004758:	d01e      	beq.n	8004798 <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			ON_OFF = OFF;
 800475a:	4ba6      	ldr	r3, [pc, #664]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8004760:	4ba5      	ldr	r3, [pc, #660]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 8004766:	2200      	movs	r2, #0
 8004768:	2108      	movs	r1, #8
 800476a:	2001      	movs	r0, #1
 800476c:	f008 f85e 	bl	800c82c <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 8004770:	f00c ffbe 	bl	80116f0 <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 8004774:	f00d f830 	bl	80117d8 <TIM17_CYCLE_OFF>
			Error |= OVP;
 8004778:	4ba0      	ldr	r3, [pc, #640]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	4313      	orrs	r3, r2
 8004780:	b2da      	uxtb	r2, r3
 8004782:	4b9e      	ldr	r3, [pc, #632]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004784:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 8004786:	4b9e      	ldr	r3, [pc, #632]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004788:	2204      	movs	r2, #4
 800478a:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800478c:	4b9c      	ldr	r3, [pc, #624]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800478e:	2201      	movs	r2, #1
 8004790:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8004792:	4b9b      	ldr	r3, [pc, #620]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004794:	2201      	movs	r2, #1
 8004796:	609a      	str	r2, [r3, #8]
		}
		/*OCP*/
		if(Current_Actual > 50)
 8004798:	4b9a      	ldr	r3, [pc, #616]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	499a      	ldr	r1, [pc, #616]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800479e:	1c18      	adds	r0, r3, #0
 80047a0:	f7fb feae 	bl	8000500 <__aeabi_fcmpgt>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d01e      	beq.n	80047e6 <HAL_TIM_PeriodElapsedCallback+0xea>
		{
			ON_OFF = OFF;
 80047a8:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 80047ae:	4b92      	ldr	r3, [pc, #584]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 80047b4:	2200      	movs	r2, #0
 80047b6:	2108      	movs	r1, #8
 80047b8:	2001      	movs	r0, #1
 80047ba:	f008 f837 	bl	800c82c <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 80047be:	f00c ff97 	bl	80116f0 <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 80047c2:	f00d f809 	bl	80117d8 <TIM17_CYCLE_OFF>
			Error |= OCP;
 80047c6:	4b8d      	ldr	r3, [pc, #564]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2202      	movs	r2, #2
 80047cc:	4313      	orrs	r3, r2
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b8a      	ldr	r3, [pc, #552]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 80047d2:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 80047d4:	4b8a      	ldr	r3, [pc, #552]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80047d6:	2204      	movs	r2, #4
 80047d8:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 80047da:	4b89      	ldr	r3, [pc, #548]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80047dc:	2201      	movs	r2, #1
 80047de:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 80047e0:	4b87      	ldr	r3, [pc, #540]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	609a      	str	r2, [r3, #8]
		}
		/*OPP*/
		if(Current_Actual*Voltage_Actual>7500)
 80047e6:	4b87      	ldr	r3, [pc, #540]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b80      	ldr	r3, [pc, #512]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	1c19      	adds	r1, r3, #0
 80047f0:	1c10      	adds	r0, r2, #0
 80047f2:	f7fc fa35 	bl	8000c60 <__aeabi_fmul>
 80047f6:	1c03      	adds	r3, r0, #0
 80047f8:	4984      	ldr	r1, [pc, #528]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x310>)
 80047fa:	1c18      	adds	r0, r3, #0
 80047fc:	f7fb fe80 	bl	8000500 <__aeabi_fcmpgt>
 8004800:	1e03      	subs	r3, r0, #0
 8004802:	d01e      	beq.n	8004842 <HAL_TIM_PeriodElapsedCallback+0x146>
		{
			ON_OFF = OFF;
 8004804:	4b7b      	ldr	r3, [pc, #492]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 800480a:	4b7b      	ldr	r3, [pc, #492]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 8004810:	2200      	movs	r2, #0
 8004812:	2108      	movs	r1, #8
 8004814:	2001      	movs	r0, #1
 8004816:	f008 f809 	bl	800c82c <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 800481a:	f00c ff69 	bl	80116f0 <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 800481e:	f00c ffdb 	bl	80117d8 <TIM17_CYCLE_OFF>
			Error |= OCP;
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2202      	movs	r2, #2
 8004828:	4313      	orrs	r3, r2
 800482a:	b2da      	uxtb	r2, r3
 800482c:	4b73      	ldr	r3, [pc, #460]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 800482e:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 8004830:	4b73      	ldr	r3, [pc, #460]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004832:	2204      	movs	r2, #4
 8004834:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004838:	2201      	movs	r2, #1
 800483a:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 800483c:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800483e:	2201      	movs	r2, #1
 8004840:	609a      	str	r2, [r3, #8]
		}
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8004842:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2202      	movs	r2, #2
 8004848:	4252      	negs	r2, r2
 800484a:	611a      	str	r2, [r3, #16]
		__HAL_TIM_DISABLE(&htim1);
 800484c:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	4a6f      	ldr	r2, [pc, #444]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004854:	4013      	ands	r3, r2
 8004856:	d10d      	bne.n	8004874 <HAL_TIM_PeriodElapsedCallback+0x178>
 8004858:	4b60      	ldr	r3, [pc, #384]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	4a6d      	ldr	r2, [pc, #436]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004860:	4013      	ands	r3, r2
 8004862:	d107      	bne.n	8004874 <HAL_TIM_PeriodElapsedCallback+0x178>
 8004864:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b5c      	ldr	r3, [pc, #368]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2101      	movs	r1, #1
 8004870:	438a      	bics	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

	}
	/*key scan*/
	if(htim==&htim7)
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d106      	bne.n	800488a <HAL_TIM_PeriodElapsedCallback+0x18e>
	{
		Flag.TIM7_IT=1;
 800487c:	4b67      	ldr	r3, [pc, #412]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 800487e:	2201      	movs	r2, #1
 8004880:	605a      	str	r2, [r3, #4]
		key_scan();
 8004882:	f00c fb8d 	bl	8010fa0 <key_scan>
		Encoder_Enter_Handle();
 8004886:	f009 fc89 	bl	800e19c <Encoder_Enter_Handle>

	}
	/*encoder*/
	if(htim==&htim3)
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4b55      	ldr	r3, [pc, #340]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800488e:	429a      	cmp	r2, r3
 8004890:	d11f      	bne.n	80048d2 <HAL_TIM_PeriodElapsedCallback+0x1d6>
	{

		Flag.TIM3_IT=1;
 8004892:	4b62      	ldr	r3, [pc, #392]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004894:	2201      	movs	r2, #1
 8004896:	609a      	str	r2, [r3, #8]
		static int count;

		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==1)
 8004898:	4b52      	ldr	r3, [pc, #328]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2210      	movs	r2, #16
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d104      	bne.n	80048b0 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		{
			count=-1;
 80048a6:	4b5e      	ldr	r3, [pc, #376]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	4252      	negs	r2, r2
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e009      	b.n	80048c4 <HAL_TIM_PeriodElapsedCallback+0x1c8>

		}
		else if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==0)
 80048b0:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2210      	movs	r2, #16
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d002      	beq.n	80048c4 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		{
			count=1;
 80048be:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

		}
		Flag.Encoder_BF+=count;
 80048c4:	4b55      	ldr	r3, [pc, #340]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	4b55      	ldr	r3, [pc, #340]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	18d2      	adds	r2, r2, r3
 80048ce:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80048d0:	61da      	str	r2, [r3, #28]
	}
	/*cursor flash*/
	if(htim==&htim6)
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d102      	bne.n	80048e0 <HAL_TIM_PeriodElapsedCallback+0x1e4>
	{
		Flag.TIM6_IT=1;
 80048da:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80048dc:	2201      	movs	r2, #1
 80048de:	60da      	str	r2, [r3, #12]
	}
	/**/
	if(htim==&htim14)
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4b51      	ldr	r3, [pc, #324]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d102      	bne.n	80048ee <HAL_TIM_PeriodElapsedCallback+0x1f2>
	{
		Flag.TIM14_IT=1;
 80048e8:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	621a      	str	r2, [r3, #32]

	}
	if(htim==&htim16)
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4b4e      	ldr	r3, [pc, #312]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x330>)
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d11b      	bne.n	800492e <HAL_TIM_PeriodElapsedCallback+0x232>
	{
		//tim16 delay soft start delay 5s

		TIM16_DELAY_OFF();//到时间了,关闭延时功能
 80048f6:	f00c fefb 	bl	80116f0 <TIM16_DELAY_OFF>

		if(Cycle_Function_On_Off == Cycle_Function_On)     //打开了循环功能，调用循环函数
 80048fa:	4b4d      	ldr	r3, [pc, #308]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d102      	bne.n	8004908 <HAL_TIM_PeriodElapsedCallback+0x20c>
		{
			TIM17_CYCLE_ON();
 8004902:	f00c ff19 	bl	8011738 <TIM17_CYCLE_ON>
 8004906:	e00d      	b.n	8004924 <HAL_TIM_PeriodElapsedCallback+0x228>
		}
		else if(Cycle_Function_On_Off == Cycle_Function_Off)
 8004908:	4b49      	ldr	r3, [pc, #292]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PeriodElapsedCallback+0x228>
		{
			ON_OFF =ON;
 8004910:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
			DAC_Cmd_send(1,4,Set_Voltage);
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	001a      	movs	r2, r3
 800491c:	2104      	movs	r1, #4
 800491e:	2001      	movs	r0, #1
 8004920:	f007 ff84 	bl	800c82c <DAC_Cmd_send>
		}


		__HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 8004924:	4b41      	ldr	r3, [pc, #260]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2202      	movs	r2, #2
 800492a:	4252      	negs	r2, r2
 800492c:	611a      	str	r2, [r3, #16]
	}

	if(htim==&htim17)
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004932:	429a      	cmp	r2, r3
 8004934:	d14d      	bne.n	80049d2 <HAL_TIM_PeriodElapsedCallback+0x2d6>
	{
		Flag.TIM17_IT=1;
 8004936:	4b39      	ldr	r3, [pc, #228]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004938:	2201      	movs	r2, #1
 800493a:	611a      	str	r2, [r3, #16]

		if(OUTPUT_NOT_OUTPUT == OUTPUT)
 800493c:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d146      	bne.n	80049d2 <HAL_TIM_PeriodElapsedCallback+0x2d6>
		{
			if(ON_OFF == ON)
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d11f      	bne.n	800498c <HAL_TIM_PeriodElapsedCallback+0x290>
			{
				if(Cycle_On_Time > 0)
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x340>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_TIM_PeriodElapsedCallback+0x264>
				{
				  Cycle_On_Time --;
 8004954:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	1e5a      	subs	r2, r3, #1
 800495a:	4b38      	ldr	r3, [pc, #224]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x340>)
 800495c:	601a      	str	r2, [r3, #0]

		}

	}

}
 800495e:	e038      	b.n	80049d2 <HAL_TIM_PeriodElapsedCallback+0x2d6>
					Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	001a      	movs	r2, r3
 8004966:	0013      	movs	r3, r2
 8004968:	015b      	lsls	r3, r3, #5
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	189b      	adds	r3, r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	001a      	movs	r2, r3
 8004974:	4b33      	ldr	r3, [pc, #204]	; (8004a44 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	18d3      	adds	r3, r2, r3
 800497a:	001a      	movs	r2, r3
 800497c:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x340>)
 800497e:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=0;
 8004980:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004982:	2200      	movs	r2, #0
 8004984:	615a      	str	r2, [r3, #20]
					power_off();
 8004986:	f008 f817 	bl	800c9b8 <power_off>
}
 800498a:	e022      	b.n	80049d2 <HAL_TIM_PeriodElapsedCallback+0x2d6>
			else if(ON_OFF == OFF)
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11e      	bne.n	80049d2 <HAL_TIM_PeriodElapsedCallback+0x2d6>
				if(Cycle_Close_Time >0)
 8004994:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_TIM_PeriodElapsedCallback+0x2ac>
					Cycle_Close_Time --;
 800499c:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	1e5a      	subs	r2, r3, #1
 80049a2:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80049a4:	601a      	str	r2, [r3, #0]
}
 80049a6:	e014      	b.n	80049d2 <HAL_TIM_PeriodElapsedCallback+0x2d6>
					Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms );
 80049a8:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <HAL_TIM_PeriodElapsedCallback+0x350>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	001a      	movs	r2, r3
 80049ae:	0013      	movs	r3, r2
 80049b0:	015b      	lsls	r3, r3, #5
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	001a      	movs	r2, r3
 80049bc:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	18d3      	adds	r3, r2, r3
 80049c2:	001a      	movs	r2, r3
 80049c4:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80049c6:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=1;
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	615a      	str	r2, [r3, #20]
					power_on();
 80049ce:	f007 ffd3 	bl	800c978 <power_on>
}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b002      	add	sp, #8
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	2000341c 	.word	0x2000341c
 80049e0:	2000396d 	.word	0x2000396d
 80049e4:	20003468 	.word	0x20003468
 80049e8:	50000800 	.word	0x50000800
 80049ec:	20003984 	.word	0x20003984
 80049f0:	43160000 	.word	0x43160000
 80049f4:	20003970 	.word	0x20003970
 80049f8:	20003971 	.word	0x20003971
 80049fc:	200039c1 	.word	0x200039c1
 8004a00:	200039e0 	.word	0x200039e0
 8004a04:	20003988 	.word	0x20003988
 8004a08:	42480000 	.word	0x42480000
 8004a0c:	45ea6000 	.word	0x45ea6000
 8004a10:	00001111 	.word	0x00001111
 8004a14:	00000444 	.word	0x00000444
 8004a18:	20003500 	.word	0x20003500
 8004a1c:	20003378 	.word	0x20003378
 8004a20:	2000367c 	.word	0x2000367c
 8004a24:	200034b4 	.word	0x200034b4
 8004a28:	2000354c 	.word	0x2000354c
 8004a2c:	200035e4 	.word	0x200035e4
 8004a30:	200039c8 	.word	0x200039c8
 8004a34:	20002fda 	.word	0x20002fda
 8004a38:	20003630 	.word	0x20003630
 8004a3c:	200039cc 	.word	0x200039cc
 8004a40:	20003978 	.word	0x20003978
 8004a44:	20002fd6 	.word	0x20002fd6
 8004a48:	200039d0 	.word	0x200039d0
 8004a4c:	2000397a 	.word	0x2000397a
 8004a50:	20002fd8 	.word	0x20002fd8

08004a54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a58:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a5a:	4a24      	ldr	r2, [pc, #144]	; (8004aec <MX_USART1_UART_Init+0x98>)
 8004a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a5e:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a60:	22e1      	movs	r2, #225	; 0xe1
 8004a62:	0252      	lsls	r2, r2, #9
 8004a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a7a:	220c      	movs	r2, #12
 8004a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a84:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f005 fb80 	bl	800a1a4 <HAL_UART_Init>
 8004aa4:	1e03      	subs	r3, r0, #0
 8004aa6:	d001      	beq.n	8004aac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004aa8:	f7fe ff4a 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aac:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004aae:	2100      	movs	r1, #0
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f007 f919 	bl	800bce8 <HAL_UARTEx_SetTxFifoThreshold>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d001      	beq.n	8004abe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004aba:	f7fe ff41 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f007 f950 	bl	800bd68 <HAL_UARTEx_SetRxFifoThreshold>
 8004ac8:	1e03      	subs	r3, r0, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004acc:	f7fe ff38 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <MX_USART1_UART_Init+0x94>)
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f007 f8ce 	bl	800bc74 <HAL_UARTEx_DisableFifoMode>
 8004ad8:	1e03      	subs	r3, r0, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004adc:	f7fe ff30 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	20003694 	.word	0x20003694
 8004aec:	40013800 	.word	0x40013800

08004af0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004af4:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004af6:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <MX_USART2_UART_Init+0xa0>)
 8004af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004afc:	22e1      	movs	r2, #225	; 0xe1
 8004afe:	0252      	lsls	r2, r2, #9
 8004b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004b02:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004b08:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b16:	220c      	movs	r2, #12
 8004b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b2c:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f005 fb32 	bl	800a1a4 <HAL_UART_Init>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d001      	beq.n	8004b48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004b44:	f7fe fefc 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f007 f8cb 	bl	800bce8 <HAL_UARTEx_SetTxFifoThreshold>
 8004b52:	1e03      	subs	r3, r0, #0
 8004b54:	d001      	beq.n	8004b5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004b56:	f7fe fef3 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f007 f902 	bl	800bd68 <HAL_UARTEx_SetRxFifoThreshold>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d001      	beq.n	8004b6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b68:	f7fe feea 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f007 f880 	bl	800bc74 <HAL_UARTEx_DisableFifoMode>
 8004b74:	1e03      	subs	r3, r0, #0
 8004b76:	d001      	beq.n	8004b7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b78:	f7fe fee2 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  __HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <MX_USART2_UART_Init+0x9c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2210      	movs	r2, #16
 8004b82:	621a      	str	r2, [r3, #32]
  /* USER CODE END USART2_Init 2 */

}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	20003728 	.word	0x20003728
 8004b90:	40004400 	.word	0x40004400

08004b94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b98:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004b9a:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <MX_USART3_UART_Init+0x68>)
 8004b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004ba0:	22e1      	movs	r2, #225	; 0xe1
 8004ba2:	0252      	lsls	r2, r2, #9
 8004ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004bac:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bba:	220c      	movs	r2, #12
 8004bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004bdc:	4806      	ldr	r0, [pc, #24]	; (8004bf8 <MX_USART3_UART_Init+0x64>)
 8004bde:	2300      	movs	r3, #0
 8004be0:	2200      	movs	r2, #0
 8004be2:	2100      	movs	r1, #0
 8004be4:	f006 ffbc 	bl	800bb60 <HAL_RS485Ex_Init>
 8004be8:	1e03      	subs	r3, r0, #0
 8004bea:	d001      	beq.n	8004bf0 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8004bec:	f7fe fea8 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	200037bc 	.word	0x200037bc
 8004bfc:	40004800 	.word	0x40004800

08004c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b097      	sub	sp, #92	; 0x5c
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	2344      	movs	r3, #68	; 0x44
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	2314      	movs	r3, #20
 8004c10:	001a      	movs	r2, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	f00f fa51 	bl	80140ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c18:	2428      	movs	r4, #40	; 0x28
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	231c      	movs	r3, #28
 8004c20:	001a      	movs	r2, r3
 8004c22:	2100      	movs	r1, #0
 8004c24:	f00f fa49 	bl	80140ba <memset>
  if(uartHandle->Instance==USART1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4abb      	ldr	r2, [pc, #748]	; (8004f1c <HAL_UART_MspInit+0x31c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d148      	bne.n	8004cc4 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c32:	193b      	adds	r3, r7, r4
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004c38:	193b      	adds	r3, r7, r4
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c3e:	193b      	adds	r3, r7, r4
 8004c40:	0018      	movs	r0, r3
 8004c42:	f002 fea5 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 8004c46:	1e03      	subs	r3, r0, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c4a:	f7fe fe79 	bl	8003940 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c4e:	4bb4      	ldr	r3, [pc, #720]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c52:	4bb3      	ldr	r3, [pc, #716]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	01c9      	lsls	r1, r1, #7
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8004c5c:	4bb0      	ldr	r3, [pc, #704]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	01db      	lsls	r3, r3, #7
 8004c64:	4013      	ands	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6a:	4bad      	ldr	r3, [pc, #692]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6e:	4bac      	ldr	r3, [pc, #688]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004c70:	2101      	movs	r1, #1
 8004c72:	430a      	orrs	r2, r1
 8004c74:	635a      	str	r2, [r3, #52]	; 0x34
 8004c76:	4baa      	ldr	r3, [pc, #680]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c82:	2144      	movs	r1, #68	; 0x44
 8004c84:	187b      	adds	r3, r7, r1
 8004c86:	22c0      	movs	r2, #192	; 0xc0
 8004c88:	00d2      	lsls	r2, r2, #3
 8004c8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	2202      	movs	r2, #2
 8004c90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	187b      	adds	r3, r7, r1
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca4:	187a      	adds	r2, r7, r1
 8004ca6:	23a0      	movs	r3, #160	; 0xa0
 8004ca8:	05db      	lsls	r3, r3, #23
 8004caa:	0011      	movs	r1, r2
 8004cac:	0018      	movs	r0, r3
 8004cae:	f001 ffcb 	bl	8006c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	201b      	movs	r0, #27
 8004cb8:	f001 fc6c 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cbc:	201b      	movs	r0, #27
 8004cbe:	f001 fc7e 	bl	80065be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004cc2:	e127      	b.n	8004f14 <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART2)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a96      	ldr	r2, [pc, #600]	; (8004f24 <HAL_UART_MspInit+0x324>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d173      	bne.n	8004db6 <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004cce:	2128      	movs	r1, #40	; 0x28
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	2200      	movs	r2, #0
 8004cda:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f002 fe56 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_UART_MspInit+0xec>
      Error_Handler();
 8004ce8:	f7fe fe2a 	bl	8003940 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cec:	4b8c      	ldr	r3, [pc, #560]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf0:	4b8b      	ldr	r3, [pc, #556]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004cf2:	2180      	movs	r1, #128	; 0x80
 8004cf4:	0289      	lsls	r1, r1, #10
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cfa:	4b89      	ldr	r3, [pc, #548]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	4013      	ands	r3, r2
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d08:	4b85      	ldr	r3, [pc, #532]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0c:	4b84      	ldr	r3, [pc, #528]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004d0e:	2101      	movs	r1, #1
 8004d10:	430a      	orrs	r2, r1
 8004d12:	635a      	str	r2, [r3, #52]	; 0x34
 8004d14:	4b82      	ldr	r3, [pc, #520]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	2201      	movs	r2, #1
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = miniboard1_Pin|miniboard2_Pin;
 8004d20:	2144      	movs	r1, #68	; 0x44
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	220c      	movs	r2, #12
 8004d26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	187b      	adds	r3, r7, r1
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d34:	187b      	adds	r3, r7, r1
 8004d36:	2200      	movs	r2, #0
 8004d38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004d3a:	187b      	adds	r3, r7, r1
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d40:	187a      	adds	r2, r7, r1
 8004d42:	23a0      	movs	r3, #160	; 0xa0
 8004d44:	05db      	lsls	r3, r3, #23
 8004d46:	0011      	movs	r1, r2
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f001 ff7d 	bl	8006c48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004d4e:	4b76      	ldr	r3, [pc, #472]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d50:	4a76      	ldr	r2, [pc, #472]	; (8004f2c <HAL_UART_MspInit+0x32c>)
 8004d52:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004d54:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d56:	2234      	movs	r2, #52	; 0x34
 8004d58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d5a:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d60:	4b71      	ldr	r3, [pc, #452]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d66:	4b70      	ldr	r3, [pc, #448]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d6c:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d72:	4b6d      	ldr	r3, [pc, #436]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d78:	4b6b      	ldr	r3, [pc, #428]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d7e:	4b6a      	ldr	r3, [pc, #424]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	0152      	lsls	r2, r2, #5
 8004d84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d86:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f001 fc35 	bl	80065f8 <HAL_DMA_Init>
 8004d8e:	1e03      	subs	r3, r0, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8004d92:	f7fe fdd5 	bl	8003940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2180      	movs	r1, #128	; 0x80
 8004d9a:	4a63      	ldr	r2, [pc, #396]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004d9c:	505a      	str	r2, [r3, r1]
 8004d9e:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <HAL_UART_MspInit+0x328>)
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004da4:	2200      	movs	r2, #0
 8004da6:	2100      	movs	r1, #0
 8004da8:	201c      	movs	r0, #28
 8004daa:	f001 fbf3 	bl	8006594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004dae:	201c      	movs	r0, #28
 8004db0:	f001 fc05 	bl	80065be <HAL_NVIC_EnableIRQ>
}
 8004db4:	e0ae      	b.n	8004f14 <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART3)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a5d      	ldr	r2, [pc, #372]	; (8004f30 <HAL_UART_MspInit+0x330>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d000      	beq.n	8004dc2 <HAL_UART_MspInit+0x1c2>
 8004dc0:	e0a8      	b.n	8004f14 <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004dc2:	4b57      	ldr	r3, [pc, #348]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc6:	4b56      	ldr	r3, [pc, #344]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	02c9      	lsls	r1, r1, #11
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dd0:	4b53      	ldr	r3, [pc, #332]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	02db      	lsls	r3, r3, #11
 8004dd8:	4013      	ands	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dde:	4b50      	ldr	r3, [pc, #320]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de2:	4b4f      	ldr	r3, [pc, #316]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004de4:	2101      	movs	r1, #1
 8004de6:	430a      	orrs	r2, r1
 8004de8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dea:	4b4d      	ldr	r3, [pc, #308]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	2201      	movs	r2, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df6:	4b4a      	ldr	r3, [pc, #296]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfa:	4b49      	ldr	r3, [pc, #292]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	635a      	str	r2, [r3, #52]	; 0x34
 8004e02:	4b47      	ldr	r3, [pc, #284]	; (8004f20 <HAL_UART_MspInit+0x320>)
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	2202      	movs	r2, #2
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e0e:	2144      	movs	r1, #68	; 0x44
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e18:	000c      	movs	r4, r1
 8004e1a:	193b      	adds	r3, r7, r4
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e20:	193b      	adds	r3, r7, r4
 8004e22:	2200      	movs	r2, #0
 8004e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e26:	193b      	adds	r3, r7, r4
 8004e28:	2200      	movs	r2, #0
 8004e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART3;
 8004e2c:	193b      	adds	r3, r7, r4
 8004e2e:	2205      	movs	r2, #5
 8004e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e32:	193a      	adds	r2, r7, r4
 8004e34:	23a0      	movs	r3, #160	; 0xa0
 8004e36:	05db      	lsls	r3, r3, #23
 8004e38:	0011      	movs	r1, r2
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f001 ff04 	bl	8006c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e40:	0021      	movs	r1, r4
 8004e42:	187b      	adds	r3, r7, r1
 8004e44:	22c0      	movs	r2, #192	; 0xc0
 8004e46:	0092      	lsls	r2, r2, #2
 8004e48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	2200      	movs	r2, #0
 8004e5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	2204      	movs	r2, #4
 8004e60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	4a33      	ldr	r2, [pc, #204]	; (8004f34 <HAL_UART_MspInit+0x334>)
 8004e66:	0019      	movs	r1, r3
 8004e68:	0010      	movs	r0, r2
 8004e6a:	f001 feed 	bl	8006c48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel4;
 8004e6e:	4b32      	ldr	r3, [pc, #200]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e70:	4a32      	ldr	r2, [pc, #200]	; (8004f3c <HAL_UART_MspInit+0x33c>)
 8004e72:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004e74:	4b30      	ldr	r3, [pc, #192]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e76:	2236      	movs	r2, #54	; 0x36
 8004e78:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e80:	4b2d      	ldr	r3, [pc, #180]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e86:	4b2c      	ldr	r3, [pc, #176]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e88:	2280      	movs	r2, #128	; 0x80
 8004e8a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e8c:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e92:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004e98:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e9e:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004ea4:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f001 fba6 	bl	80065f8 <HAL_DMA_Init>
 8004eac:	1e03      	subs	r3, r0, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8004eb0:	f7fe fd46 	bl	8003940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004eba:	505a      	str	r2, [r3, r1]
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_UART_MspInit+0x338>)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel5;
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_UART_MspInit+0x344>)
 8004ec6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004eca:	2237      	movs	r2, #55	; 0x37
 8004ecc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ece:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ee6:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004efa:	0018      	movs	r0, r3
 8004efc:	f001 fb7c 	bl	80065f8 <HAL_DMA_Init>
 8004f00:	1e03      	subs	r3, r0, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_UART_MspInit+0x308>
      Error_Handler();
 8004f04:	f7fe fd1c 	bl	8003940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a0d      	ldr	r2, [pc, #52]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004f0c:	67da      	str	r2, [r3, #124]	; 0x7c
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <HAL_UART_MspInit+0x340>)
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b017      	add	sp, #92	; 0x5c
 8004f1a:	bd90      	pop	{r4, r7, pc}
 8004f1c:	40013800 	.word	0x40013800
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40004400 	.word	0x40004400
 8004f28:	20003850 	.word	0x20003850
 8004f2c:	40020008 	.word	0x40020008
 8004f30:	40004800 	.word	0x40004800
 8004f34:	50000400 	.word	0x50000400
 8004f38:	200038ac 	.word	0x200038ac
 8004f3c:	40020044 	.word	0x40020044
 8004f40:	20003908 	.word	0x20003908
 8004f44:	40020058 	.word	0x40020058

08004f48 <USART2_IDLECallback>:
  * @brief  串口2的接收空闲回调，用于和控制板通信
  * @param  None
  * @retval None
  */
void USART2_IDLECallback(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0

	HAL_UART_DMAStop(&huart2);
 8004f4e:	4b48      	ldr	r3, [pc, #288]	; (8005070 <USART2_IDLECallback+0x128>)
 8004f50:	0018      	movs	r0, r3
 8004f52:	f005 fa7c 	bl	800a44e <HAL_UART_DMAStop>


	if(Uart2_Receive_buffer[0]==RS232_ID||Uart2_Receive_buffer[0]==0)
 8004f56:	4b47      	ldr	r3, [pc, #284]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	4b46      	ldr	r3, [pc, #280]	; (8005078 <USART2_IDLECallback+0x130>)
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d003      	beq.n	8004f6c <USART2_IDLECallback+0x24>
 8004f64:	4b43      	ldr	r3, [pc, #268]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d173      	bne.n	8005054 <USART2_IDLECallback+0x10c>

		}
#endif

#ifdef ADD_CHECK
		uint16_t addvalue=( (Uart2_Receive_buffer [USART2_Received_Length-2])|(Uart2_Receive_buffer[USART2_Received_Length-1]<<8) );
 8004f6c:	4b43      	ldr	r3, [pc, #268]	; (800507c <USART2_IDLECallback+0x134>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	3b02      	subs	r3, #2
 8004f72:	4a40      	ldr	r2, [pc, #256]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004f74:	5cd3      	ldrb	r3, [r2, r3]
 8004f76:	b21a      	sxth	r2, r3
 8004f78:	4b40      	ldr	r3, [pc, #256]	; (800507c <USART2_IDLECallback+0x134>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	493d      	ldr	r1, [pc, #244]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004f80:	5ccb      	ldrb	r3, [r1, r3]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b21a      	sxth	r2, r3
 8004f8a:	1dbb      	adds	r3, r7, #6
 8004f8c:	801a      	strh	r2, [r3, #0]
		//接收端用CRC16算法对接到的数据进行校验，计算出的结果和传过来的CRC字节比较是否相等
		if(addvalue==ADD(Uart2_Receive_buffer,USART2_Received_Length-2))
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	; (800507c <USART2_IDLECallback+0x134>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	3b02      	subs	r3, #2
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4b37      	ldr	r3, [pc, #220]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004f98:	0011      	movs	r1, r2
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f007 fc14 	bl	800c7c8 <ADD>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	1dbb      	adds	r3, r7, #6
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d153      	bne.n	8005054 <USART2_IDLECallback+0x10c>
		{
				switch(Uart2_Receive_buffer[1])
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d051      	beq.n	8005058 <USART2_IDLECallback+0x110>
 8004fb4:	2b12      	cmp	r3, #18
 8004fb6:	d000      	beq.n	8004fba <USART2_IDLECallback+0x72>
						break;
					}



					default: break;
 8004fb8:	e04f      	b.n	800505a <USART2_IDLECallback+0x112>
						Voltage_Actual=ADC_Gain_V*(Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4])+Eror_ADC_V;
 8004fba:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004fbc:	78db      	ldrb	r3, [r3, #3]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004fc2:	7912      	ldrb	r2, [r2, #4]
 8004fc4:	189b      	adds	r3, r3, r2
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7fc f93e 	bl	8001248 <__aeabi_i2f>
 8004fcc:	1c02      	adds	r2, r0, #0
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <USART2_IDLECallback+0x138>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	1c19      	adds	r1, r3, #0
 8004fd4:	1c10      	adds	r0, r2, #0
 8004fd6:	f7fb fe43 	bl	8000c60 <__aeabi_fmul>
 8004fda:	1c03      	adds	r3, r0, #0
 8004fdc:	1c1a      	adds	r2, r3, #0
 8004fde:	4b29      	ldr	r3, [pc, #164]	; (8005084 <USART2_IDLECallback+0x13c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	1c19      	adds	r1, r3, #0
 8004fe4:	1c10      	adds	r0, r2, #0
 8004fe6:	f7fb fad5 	bl	8000594 <__aeabi_fadd>
 8004fea:	1c03      	adds	r3, r0, #0
 8004fec:	1c1a      	adds	r2, r3, #0
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <USART2_IDLECallback+0x140>)
 8004ff0:	601a      	str	r2, [r3, #0]
						Current_Actual=ADC_Gain_I*(Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6])+Eror_ADC_I;
 8004ff2:	4b20      	ldr	r3, [pc, #128]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004ff4:	795b      	ldrb	r3, [r3, #5]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <USART2_IDLECallback+0x12c>)
 8004ffa:	7992      	ldrb	r2, [r2, #6]
 8004ffc:	189b      	adds	r3, r3, r2
 8004ffe:	0018      	movs	r0, r3
 8005000:	f7fc f922 	bl	8001248 <__aeabi_i2f>
 8005004:	1c02      	adds	r2, r0, #0
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <USART2_IDLECallback+0x144>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1c19      	adds	r1, r3, #0
 800500c:	1c10      	adds	r0, r2, #0
 800500e:	f7fb fe27 	bl	8000c60 <__aeabi_fmul>
 8005012:	1c03      	adds	r3, r0, #0
 8005014:	1c1a      	adds	r2, r3, #0
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <USART2_IDLECallback+0x148>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1c19      	adds	r1, r3, #0
 800501c:	1c10      	adds	r0, r2, #0
 800501e:	f7fb fab9 	bl	8000594 <__aeabi_fadd>
 8005022:	1c03      	adds	r3, r0, #0
 8005024:	1c1a      	adds	r2, r3, #0
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <USART2_IDLECallback+0x14c>)
 8005028:	601a      	str	r2, [r3, #0]
						Current_Actual*=1000;//61mv/A
 800502a:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <USART2_IDLECallback+0x14c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	491a      	ldr	r1, [pc, #104]	; (8005098 <USART2_IDLECallback+0x150>)
 8005030:	1c18      	adds	r0, r3, #0
 8005032:	f7fb fe15 	bl	8000c60 <__aeabi_fmul>
 8005036:	1c03      	adds	r3, r0, #0
 8005038:	1c1a      	adds	r2, r3, #0
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <USART2_IDLECallback+0x14c>)
 800503c:	601a      	str	r2, [r3, #0]
						Current_Actual/=61;
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <USART2_IDLECallback+0x14c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4916      	ldr	r1, [pc, #88]	; (800509c <USART2_IDLECallback+0x154>)
 8005044:	1c18      	adds	r0, r3, #0
 8005046:	f7fb fc43 	bl	80008d0 <__aeabi_fdiv>
 800504a:	1c03      	adds	r3, r0, #0
 800504c:	1c1a      	adds	r2, r3, #0
 800504e:	4b11      	ldr	r3, [pc, #68]	; (8005094 <USART2_IDLECallback+0x14c>)
 8005050:	601a      	str	r2, [r3, #0]
						break;
 8005052:	e002      	b.n	800505a <USART2_IDLECallback+0x112>
				}

		}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	e000      	b.n	800505a <USART2_IDLECallback+0x112>
						break;
 8005058:	46c0      	nop			; (mov r8, r8)

	}



	HAL_UART_Receive_DMA(&huart2, &Uart2_Receive_buffer[0],9);
 800505a:	4906      	ldr	r1, [pc, #24]	; (8005074 <USART2_IDLECallback+0x12c>)
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <USART2_IDLECallback+0x128>)
 800505e:	2209      	movs	r2, #9
 8005060:	0018      	movs	r0, r3
 8005062:	f005 f99d 	bl	800a3a0 <HAL_UART_Receive_DMA>


}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	b002      	add	sp, #8
 800506c:	bd80      	pop	{r7, pc}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	20003728 	.word	0x20003728
 8005074:	20003688 	.word	0x20003688
 8005078:	200030c8 	.word	0x200030c8
 800507c:	20000004 	.word	0x20000004
 8005080:	20002fec 	.word	0x20002fec
 8005084:	20002ff4 	.word	0x20002ff4
 8005088:	20003984 	.word	0x20003984
 800508c:	20002ff0 	.word	0x20002ff0
 8005090:	20002ff8 	.word	0x20002ff8
 8005094:	20003988 	.word	0x20003988
 8005098:	447a0000 	.word	0x447a0000
 800509c:	42740000 	.word	0x42740000

080050a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050a4:	f7fe fec0 	bl	8003e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050a8:	480c      	ldr	r0, [pc, #48]	; (80050dc <LoopForever+0x6>)
  ldr r1, =_edata
 80050aa:	490d      	ldr	r1, [pc, #52]	; (80050e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050ac:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <LoopForever+0xe>)
  movs r3, #0
 80050ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050b0:	e002      	b.n	80050b8 <LoopCopyDataInit>

080050b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050b6:	3304      	adds	r3, #4

080050b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050bc:	d3f9      	bcc.n	80050b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050be:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050c0:	4c0a      	ldr	r4, [pc, #40]	; (80050ec <LoopForever+0x16>)
  movs r3, #0
 80050c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050c4:	e001      	b.n	80050ca <LoopFillZerobss>

080050c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c8:	3204      	adds	r2, #4

080050ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050cc:	d3fb      	bcc.n	80050c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80050ce:	f00e ffbd 	bl	801404c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80050d2:	f7fe f9d9 	bl	8003488 <main>

080050d6 <LoopForever>:

LoopForever:
  b LoopForever
 80050d6:	e7fe      	b.n	80050d6 <LoopForever>
  ldr   r0, =_estack
 80050d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80050dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050e0:	2000329c 	.word	0x2000329c
  ldr r2, =_sidata
 80050e4:	080188a0 	.word	0x080188a0
  ldr r2, =_sbss
 80050e8:	2000329c 	.word	0x2000329c
  ldr r4, =_ebss
 80050ec:	20003a8c 	.word	0x20003a8c

080050f0 <EXTI0_1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050f0:	e7fe      	b.n	80050f0 <EXTI0_1_IRQHandler>
	...

080050f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050fa:	1dfb      	adds	r3, r7, #7
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_Init+0x3c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <HAL_Init+0x3c>)
 8005106:	2180      	movs	r1, #128	; 0x80
 8005108:	0049      	lsls	r1, r1, #1
 800510a:	430a      	orrs	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800510e:	2003      	movs	r0, #3
 8005110:	f000 f810 	bl	8005134 <HAL_InitTick>
 8005114:	1e03      	subs	r3, r0, #0
 8005116:	d003      	beq.n	8005120 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e001      	b.n	8005124 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005120:	f7fe fcc2 	bl	8003aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005124:	1dfb      	adds	r3, r7, #7
 8005126:	781b      	ldrb	r3, [r3, #0]
}
 8005128:	0018      	movs	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40022000 	.word	0x40022000

08005134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800513c:	230f      	movs	r3, #15
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005144:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <HAL_InitTick+0x88>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02b      	beq.n	80051a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800514c:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <HAL_InitTick+0x8c>)
 800514e:	681c      	ldr	r4, [r3, #0]
 8005150:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <HAL_InitTick+0x88>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	0019      	movs	r1, r3
 8005156:	23fa      	movs	r3, #250	; 0xfa
 8005158:	0098      	lsls	r0, r3, #2
 800515a:	f7fa fff7 	bl	800014c <__udivsi3>
 800515e:	0003      	movs	r3, r0
 8005160:	0019      	movs	r1, r3
 8005162:	0020      	movs	r0, r4
 8005164:	f7fa fff2 	bl	800014c <__udivsi3>
 8005168:	0003      	movs	r3, r0
 800516a:	0018      	movs	r0, r3
 800516c:	f001 fa37 	bl	80065de <HAL_SYSTICK_Config>
 8005170:	1e03      	subs	r3, r0, #0
 8005172:	d112      	bne.n	800519a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d80a      	bhi.n	8005190 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	2301      	movs	r3, #1
 800517e:	425b      	negs	r3, r3
 8005180:	2200      	movs	r2, #0
 8005182:	0018      	movs	r0, r3
 8005184:	f001 fa06 	bl	8006594 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <HAL_InitTick+0x90>)
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e00d      	b.n	80051ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005190:	230f      	movs	r3, #15
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e008      	b.n	80051ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800519a:	230f      	movs	r3, #15
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e003      	b.n	80051ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051a4:	230f      	movs	r3, #15
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80051ac:	230f      	movs	r3, #15
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	781b      	ldrb	r3, [r3, #0]
}
 80051b2:	0018      	movs	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b005      	add	sp, #20
 80051b8:	bd90      	pop	{r4, r7, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	2000000c 	.word	0x2000000c
 80051c0:	20000000 	.word	0x20000000
 80051c4:	20000008 	.word	0x20000008

080051c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_IncTick+0x1c>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	001a      	movs	r2, r3
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_IncTick+0x20>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	18d2      	adds	r2, r2, r3
 80051d8:	4b03      	ldr	r3, [pc, #12]	; (80051e8 <HAL_IncTick+0x20>)
 80051da:	601a      	str	r2, [r3, #0]
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	20003964 	.word	0x20003964

080051ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  return uwTick;
 80051f0:	4b02      	ldr	r3, [pc, #8]	; (80051fc <HAL_GetTick+0x10>)
 80051f2:	681b      	ldr	r3, [r3, #0]
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	20003964 	.word	0x20003964

08005200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005208:	f7ff fff0 	bl	80051ec <HAL_GetTick>
 800520c:	0003      	movs	r3, r0
 800520e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3301      	adds	r3, #1
 8005218:	d005      	beq.n	8005226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800521a:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <HAL_Delay+0x44>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	001a      	movs	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	189b      	adds	r3, r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	f7ff ffe0 	bl	80051ec <HAL_GetTick>
 800522c:	0002      	movs	r2, r0
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	429a      	cmp	r2, r3
 8005236:	d8f7      	bhi.n	8005228 <HAL_Delay+0x28>
  {
  }
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	46bd      	mov	sp, r7
 800523e:	b004      	add	sp, #16
 8005240:	bd80      	pop	{r7, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	2000000c 	.word	0x2000000c

08005248 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005258:	401a      	ands	r2, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	b002      	add	sp, #8
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	fe3fffff 	.word	0xfe3fffff

08005270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	23e0      	movs	r3, #224	; 0xe0
 800527e:	045b      	lsls	r3, r3, #17
 8005280:	4013      	ands	r3, r2
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b002      	add	sp, #8
 8005288:	bd80      	pop	{r7, pc}

0800528a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	2104      	movs	r1, #4
 800529e:	400a      	ands	r2, r1
 80052a0:	2107      	movs	r1, #7
 80052a2:	4091      	lsls	r1, r2
 80052a4:	000a      	movs	r2, r1
 80052a6:	43d2      	mvns	r2, r2
 80052a8:	401a      	ands	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2104      	movs	r1, #4
 80052ae:	400b      	ands	r3, r1
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4099      	lsls	r1, r3
 80052b4:	000b      	movs	r3, r1
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	2104      	movs	r1, #4
 80052d6:	400a      	ands	r2, r1
 80052d8:	2107      	movs	r1, #7
 80052da:	4091      	lsls	r1, r2
 80052dc:	000a      	movs	r2, r1
 80052de:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2104      	movs	r1, #4
 80052e4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80052e6:	40da      	lsrs	r2, r3
 80052e8:	0013      	movs	r3, r2
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b002      	add	sp, #8
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	23c0      	movs	r3, #192	; 0xc0
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	4013      	ands	r3, r2
 8005304:	d101      	bne.n	800530a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800530a:	2300      	movs	r3, #0
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b002      	add	sp, #8
 8005312:	bd80      	pop	{r7, pc}

08005314 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	211f      	movs	r1, #31
 8005328:	400a      	ands	r2, r1
 800532a:	210f      	movs	r1, #15
 800532c:	4091      	lsls	r1, r2
 800532e:	000a      	movs	r2, r1
 8005330:	43d2      	mvns	r2, r2
 8005332:	401a      	ands	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	0e9b      	lsrs	r3, r3, #26
 8005338:	210f      	movs	r1, #15
 800533a:	4019      	ands	r1, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	201f      	movs	r0, #31
 8005340:	4003      	ands	r3, r0
 8005342:	4099      	lsls	r1, r3
 8005344:	000b      	movs	r3, r1
 8005346:	431a      	orrs	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}

08005354 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	035b      	lsls	r3, r3, #13
 8005366:	0b5b      	lsrs	r3, r3, #13
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}

08005376 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	0352      	lsls	r2, r2, #13
 8005388:	0b52      	lsrs	r2, r2, #13
 800538a:	43d2      	mvns	r2, r2
 800538c:	401a      	ands	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}

0800539a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2203      	movs	r2, #3
 80053a8:	4013      	ands	r3, r2
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b002      	add	sp, #8
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	0212      	lsls	r2, r2, #8
 80053c8:	43d2      	mvns	r2, r2
 80053ca:	401a      	ands	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	400b      	ands	r3, r1
 80053d4:	4904      	ldr	r1, [pc, #16]	; (80053e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80053d6:	400b      	ands	r3, r1
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b004      	add	sp, #16
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	07ffff00 	.word	0x07ffff00

080053ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a05      	ldr	r2, [pc, #20]	; (8005410 <LL_ADC_EnableInternalRegulator+0x24>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	2280      	movs	r2, #128	; 0x80
 80053fe:	0552      	lsls	r2, r2, #21
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b002      	add	sp, #8
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	6fffffe8 	.word	0x6fffffe8

08005414 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	055b      	lsls	r3, r3, #21
 8005424:	401a      	ands	r2, r3
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	055b      	lsls	r3, r3, #21
 800542a:	429a      	cmp	r2, r3
 800542c:	d101      	bne.n	8005432 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a04      	ldr	r2, [pc, #16]	; (800545c <LL_ADC_Enable+0x20>)
 800544a:	4013      	ands	r3, r2
 800544c:	2201      	movs	r2, #1
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}
 800545c:	7fffffe8 	.word	0x7fffffe8

08005460 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <LL_ADC_Disable+0x20>)
 800546e:	4013      	ands	r3, r2
 8005470:	2202      	movs	r2, #2
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	b002      	add	sp, #8
 800547e:	bd80      	pop	{r7, pc}
 8005480:	7fffffe8 	.word	0x7fffffe8

08005484 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2201      	movs	r2, #1
 8005492:	4013      	ands	r3, r2
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <LL_ADC_IsEnabled+0x18>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <LL_ADC_IsEnabled+0x1a>
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b002      	add	sp, #8
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d101      	bne.n	80054be <LL_ADC_IsDisableOngoing+0x18>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <LL_ADC_IsDisableOngoing+0x1a>
 80054be:	2300      	movs	r3, #0
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <LL_ADC_REG_StartConversion+0x20>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	2204      	movs	r2, #4
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b002      	add	sp, #8
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	7fffffe8 	.word	0x7fffffe8

080054ec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4a04      	ldr	r2, [pc, #16]	; (800550c <LL_ADC_REG_StopConversion+0x20>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	2210      	movs	r2, #16
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}
 800550c:	7fffffe8 	.word	0x7fffffe8

08005510 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2204      	movs	r2, #4
 800551e:	4013      	ands	r3, r2
 8005520:	2b04      	cmp	r3, #4
 8005522:	d101      	bne.n	8005528 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005528:	2300      	movs	r3, #0
}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b002      	add	sp, #8
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800553c:	231f      	movs	r3, #31
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005544:	2300      	movs	r3, #0
 8005546:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e17f      	b.n	800585a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	0018      	movs	r0, r3
 8005566:	f7fd fe13 	bl	8003190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2254      	movs	r2, #84	; 0x54
 8005574:	2100      	movs	r1, #0
 8005576:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0018      	movs	r0, r3
 800557e:	f7ff ff49 	bl	8005414 <LL_ADC_IsInternalRegulatorEnabled>
 8005582:	1e03      	subs	r3, r0, #0
 8005584:	d115      	bne.n	80055b2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	0018      	movs	r0, r3
 800558c:	f7ff ff2e 	bl	80053ec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005590:	4bb4      	ldr	r3, [pc, #720]	; (8005864 <HAL_ADC_Init+0x330>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	49b4      	ldr	r1, [pc, #720]	; (8005868 <HAL_ADC_Init+0x334>)
 8005596:	0018      	movs	r0, r3
 8005598:	f7fa fdd8 	bl	800014c <__udivsi3>
 800559c:	0003      	movs	r3, r0
 800559e:	3301      	adds	r3, #1
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055a4:	e002      	b.n	80055ac <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f9      	bne.n	80055a6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7ff ff2c 	bl	8005414 <LL_ADC_IsInternalRegulatorEnabled>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d10f      	bne.n	80055e0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c4:	2210      	movs	r2, #16
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	2201      	movs	r2, #1
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80055d8:	231f      	movs	r3, #31
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	2201      	movs	r2, #1
 80055de:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7ff ff93 	bl	8005510 <LL_ADC_REG_IsConversionOngoing>
 80055ea:	0003      	movs	r3, r0
 80055ec:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f2:	2210      	movs	r2, #16
 80055f4:	4013      	ands	r3, r2
 80055f6:	d000      	beq.n	80055fa <HAL_ADC_Init+0xc6>
 80055f8:	e122      	b.n	8005840 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d000      	beq.n	8005602 <HAL_ADC_Init+0xce>
 8005600:	e11e      	b.n	8005840 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	4a99      	ldr	r2, [pc, #612]	; (800586c <HAL_ADC_Init+0x338>)
 8005608:	4013      	ands	r3, r2
 800560a:	2202      	movs	r2, #2
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	0018      	movs	r0, r3
 8005618:	f7ff ff34 	bl	8005484 <LL_ADC_IsEnabled>
 800561c:	1e03      	subs	r3, r0, #0
 800561e:	d000      	beq.n	8005622 <HAL_ADC_Init+0xee>
 8005620:	e0ad      	b.n	800577e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7e1b      	ldrb	r3, [r3, #24]
 800562a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800562c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7e5b      	ldrb	r3, [r3, #25]
 8005632:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005634:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	7e9b      	ldrb	r3, [r3, #26]
 800563a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800563c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_ADC_Init+0x118>
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	015b      	lsls	r3, r3, #5
 800564a:	e000      	b.n	800564e <HAL_ADC_Init+0x11a>
 800564c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800564e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005654:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da04      	bge.n	8005668 <HAL_ADC_Init+0x134>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	e001      	b.n	800566c <HAL_ADC_Init+0x138>
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800566c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	212c      	movs	r1, #44	; 0x2c
 8005672:	5c5b      	ldrb	r3, [r3, r1]
 8005674:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005676:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	5c9b      	ldrb	r3, [r3, r2]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d115      	bne.n	80056b4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7e9b      	ldrb	r3, [r3, #26]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2280      	movs	r2, #128	; 0x80
 8005694:	0252      	lsls	r2, r2, #9
 8005696:	4313      	orrs	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e00b      	b.n	80056b4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	2220      	movs	r2, #32
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	2201      	movs	r2, #1
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056c0:	23e0      	movs	r3, #224	; 0xe0
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056ca:	4313      	orrs	r3, r2
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a65      	ldr	r2, [pc, #404]	; (8005870 <HAL_ADC_Init+0x33c>)
 80056da:	4013      	ands	r3, r2
 80056dc:	0019      	movs	r1, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	0f9b      	lsrs	r3, r3, #30
 80056ee:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056f4:	4313      	orrs	r3, r2
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	223c      	movs	r2, #60	; 0x3c
 8005700:	5c9b      	ldrb	r3, [r3, r2]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d111      	bne.n	800572a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	0f9b      	lsrs	r3, r3, #30
 800570c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005712:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005718:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800571e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	2201      	movs	r2, #1
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	4a50      	ldr	r2, [pc, #320]	; (8005874 <HAL_ADC_Init+0x340>)
 8005732:	4013      	ands	r3, r2
 8005734:	0019      	movs	r1, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	430a      	orrs	r2, r1
 800573e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	23c0      	movs	r3, #192	; 0xc0
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	429a      	cmp	r2, r3
 800574a:	d018      	beq.n	800577e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	05db      	lsls	r3, r3, #23
 8005754:	429a      	cmp	r2, r3
 8005756:	d012      	beq.n	800577e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	429a      	cmp	r2, r3
 8005762:	d00c      	beq.n	800577e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005764:	4b44      	ldr	r3, [pc, #272]	; (8005878 <HAL_ADC_Init+0x344>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a44      	ldr	r2, [pc, #272]	; (800587c <HAL_ADC_Init+0x348>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	23f0      	movs	r3, #240	; 0xf0
 8005774:	039b      	lsls	r3, r3, #14
 8005776:	401a      	ands	r2, r3
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <HAL_ADC_Init+0x344>)
 800577a:	430a      	orrs	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	001a      	movs	r2, r3
 8005788:	2100      	movs	r1, #0
 800578a:	f7ff fd7e 	bl	800528a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	493a      	ldr	r1, [pc, #232]	; (8005880 <HAL_ADC_Init+0x34c>)
 8005798:	001a      	movs	r2, r3
 800579a:	f7ff fd76 	bl	800528a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2110      	movs	r1, #16
 80057b2:	4249      	negs	r1, r1
 80057b4:	430a      	orrs	r2, r1
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
 80057b8:	e018      	b.n	80057ec <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	039b      	lsls	r3, r3, #14
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d112      	bne.n	80057ec <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	221c      	movs	r2, #28
 80057d6:	4013      	ands	r3, r2
 80057d8:	2210      	movs	r2, #16
 80057da:	4252      	negs	r2, r2
 80057dc:	409a      	lsls	r2, r3
 80057de:	0011      	movs	r1, r2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2100      	movs	r1, #0
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7ff fd66 	bl	80052c4 <LL_ADC_GetSamplingTimeCommonChannels>
 80057f8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80057fe:	429a      	cmp	r2, r3
 8005800:	d10b      	bne.n	800581a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	2203      	movs	r2, #3
 800580e:	4393      	bics	r3, r2
 8005810:	2201      	movs	r2, #1
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005818:	e01c      	b.n	8005854 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581e:	2212      	movs	r2, #18
 8005820:	4393      	bics	r3, r2
 8005822:	2210      	movs	r2, #16
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582e:	2201      	movs	r2, #1
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005836:	231f      	movs	r3, #31
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800583e:	e009      	b.n	8005854 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005844:	2210      	movs	r2, #16
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800584c:	231f      	movs	r3, #31
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005854:	231f      	movs	r3, #31
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	781b      	ldrb	r3, [r3, #0]
}
 800585a:	0018      	movs	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	b008      	add	sp, #32
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	20000000 	.word	0x20000000
 8005868:	00030d40 	.word	0x00030d40
 800586c:	fffffefd 	.word	0xfffffefd
 8005870:	fffe0201 	.word	0xfffe0201
 8005874:	1ffffc02 	.word	0x1ffffc02
 8005878:	40012708 	.word	0x40012708
 800587c:	ffc3ffff 	.word	0xffc3ffff
 8005880:	07ffff04 	.word	0x07ffff04

08005884 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005884:	b5b0      	push	{r4, r5, r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	0018      	movs	r0, r3
 8005896:	f7ff fe3b 	bl	8005510 <LL_ADC_REG_IsConversionOngoing>
 800589a:	1e03      	subs	r3, r0, #0
 800589c:	d16c      	bne.n	8005978 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2254      	movs	r2, #84	; 0x54
 80058a2:	5c9b      	ldrb	r3, [r3, r2]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_ADC_Start_DMA+0x28>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e06c      	b.n	8005986 <HAL_ADC_Start_DMA+0x102>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2254      	movs	r2, #84	; 0x54
 80058b0:	2101      	movs	r1, #1
 80058b2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	4013      	ands	r3, r2
 80058be:	d113      	bne.n	80058e8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff fddd 	bl	8005484 <LL_ADC_IsEnabled>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f7ff fdc4 	bl	8005460 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2101      	movs	r1, #1
 80058e4:	430a      	orrs	r2, r1
 80058e6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80058e8:	2517      	movs	r5, #23
 80058ea:	197c      	adds	r4, r7, r5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 fc12 	bl	8006118 <ADC_Enable>
 80058f4:	0003      	movs	r3, r0
 80058f6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80058f8:	002c      	movs	r4, r5
 80058fa:	193b      	adds	r3, r7, r4
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d13e      	bne.n	8005980 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_ADC_Start_DMA+0x10c>)
 8005908:	4013      	ands	r3, r2
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	0052      	lsls	r2, r2, #1
 800590e:	431a      	orrs	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591e:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <HAL_ADC_Start_DMA+0x110>)
 8005920:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005926:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <HAL_ADC_Start_DMA+0x114>)
 8005928:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592e:	4a1b      	ldr	r2, [pc, #108]	; (800599c <HAL_ADC_Start_DMA+0x118>)
 8005930:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	221c      	movs	r2, #28
 8005938:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2254      	movs	r2, #84	; 0x54
 800593e:	2100      	movs	r1, #0
 8005940:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2110      	movs	r1, #16
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3340      	adds	r3, #64	; 0x40
 800595c:	0019      	movs	r1, r3
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	193c      	adds	r4, r7, r4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f000 fed2 	bl	800670c <HAL_DMA_Start_IT>
 8005968:	0003      	movs	r3, r0
 800596a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0018      	movs	r0, r3
 8005972:	f7ff fda9 	bl	80054c8 <LL_ADC_REG_StartConversion>
 8005976:	e003      	b.n	8005980 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005978:	2317      	movs	r3, #23
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	2202      	movs	r2, #2
 800597e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005980:	2317      	movs	r3, #23
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	781b      	ldrb	r3, [r3, #0]
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b006      	add	sp, #24
 800598c:	bdb0      	pop	{r4, r5, r7, pc}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	fffff0fe 	.word	0xfffff0fe
 8005994:	080062e1 	.word	0x080062e1
 8005998:	080063a9 	.word	0x080063a9
 800599c:	080063c7 	.word	0x080063c7

080059a0 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80059a0:	b5b0      	push	{r4, r5, r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2254      	movs	r2, #84	; 0x54
 80059ac:	5c9b      	ldrb	r3, [r3, r2]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_ADC_Stop_DMA+0x16>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e05f      	b.n	8005a76 <HAL_ADC_Stop_DMA+0xd6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2254      	movs	r2, #84	; 0x54
 80059ba:	2101      	movs	r1, #1
 80059bc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80059be:	250f      	movs	r5, #15
 80059c0:	197c      	adds	r4, r7, r5
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 fb65 	bl	8006094 <ADC_ConversionStop>
 80059ca:	0003      	movs	r3, r0
 80059cc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80059ce:	0029      	movs	r1, r5
 80059d0:	187b      	adds	r3, r7, r1
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d147      	bne.n	8005a68 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059dc:	2225      	movs	r2, #37	; 0x25
 80059de:	5c9b      	ldrb	r3, [r3, r2]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d112      	bne.n	8005a0c <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ea:	000d      	movs	r5, r1
 80059ec:	187c      	adds	r4, r7, r1
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 ff12 	bl	8006818 <HAL_DMA_Abort>
 80059f4:	0003      	movs	r3, r0
 80059f6:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80059f8:	197b      	adds	r3, r7, r5
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	2240      	movs	r2, #64	; 0x40
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2110      	movs	r1, #16
 8005a18:	438a      	bics	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005a1c:	220f      	movs	r2, #15
 8005a1e:	18bb      	adds	r3, r7, r2
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005a26:	18bc      	adds	r4, r7, r2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 fbfa 	bl	8006224 <ADC_Disable>
 8005a30:	0003      	movs	r3, r0
 8005a32:	7023      	strb	r3, [r4, #0]
 8005a34:	e003      	b.n	8005a3e <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fbf3 	bl	8006224 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005a3e:	230f      	movs	r3, #15
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <HAL_ADC_Stop_DMA+0xe0>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2201      	movs	r2, #1
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2101      	movs	r1, #1
 8005a64:	438a      	bics	r2, r1
 8005a66:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2254      	movs	r2, #84	; 0x54
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005a70:	230f      	movs	r3, #15
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	781b      	ldrb	r3, [r3, #0]
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b004      	add	sp, #16
 8005a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	fffffefe 	.word	0xfffffefe

08005a84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d017      	beq.n	8005ad8 <HAL_ADC_IRQHandler+0x54>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	4013      	ands	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d106      	bne.n	8005ac8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	2280      	movs	r2, #128	; 0x80
 8005ac0:	0112      	lsls	r2, r2, #4
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 fca6 	bl	800641c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2204      	movs	r2, #4
 8005adc:	4013      	ands	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <HAL_ADC_IRQHandler+0x64>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d107      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2208      	movs	r2, #8
 8005aec:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005aee:	d04d      	beq.n	8005b8c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2208      	movs	r2, #8
 8005af4:	4013      	ands	r3, r2
 8005af6:	d049      	beq.n	8005b8c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	2210      	movs	r2, #16
 8005afe:	4013      	ands	r3, r2
 8005b00:	d106      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	0092      	lsls	r2, r2, #2
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	0018      	movs	r0, r3
 8005b16:	f7ff fbec 	bl	80052f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d02e      	beq.n	8005b7c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	7e9b      	ldrb	r3, [r3, #26]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d12a      	bne.n	8005b7c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d123      	bne.n	8005b7c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7ff fce9 	bl	8005510 <LL_ADC_REG_IsConversionOngoing>
 8005b3e:	1e03      	subs	r3, r0, #0
 8005b40:	d110      	bne.n	8005b64 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	210c      	movs	r1, #12
 8005b4e:	438a      	bics	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	4a56      	ldr	r2, [pc, #344]	; (8005cb0 <HAL_ADC_IRQHandler+0x22c>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58
 8005b62:	e00b      	b.n	8005b7c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	2220      	movs	r2, #32
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b74:	2201      	movs	r2, #1
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f00b fc26 	bl	80113d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	220c      	movs	r2, #12
 8005b8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	4013      	ands	r3, r2
 8005b92:	d012      	beq.n	8005bba <HAL_ADC_IRQHandler+0x136>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	0252      	lsls	r2, r2, #9
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f889 	bl	8005cc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2280      	movs	r2, #128	; 0x80
 8005bb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d014      	beq.n	8005bee <HAL_ADC_IRQHandler+0x16a>
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	0292      	lsls	r2, r2, #10
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 fc0c 	bl	80063fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2280      	movs	r2, #128	; 0x80
 8005bea:	0052      	lsls	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d014      	beq.n	8005c22 <HAL_ADC_IRQHandler+0x19e>
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d00f      	beq.n	8005c22 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	02d2      	lsls	r2, r2, #11
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 fbfa 	bl	800640c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2280      	movs	r2, #128	; 0x80
 8005c1e:	0092      	lsls	r2, r2, #2
 8005c20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2210      	movs	r2, #16
 8005c26:	4013      	ands	r3, r2
 8005c28:	d02b      	beq.n	8005c82 <HAL_ADC_IRQHandler+0x1fe>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d027      	beq.n	8005c82 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e008      	b.n	8005c52 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff fba8 	bl	800539a <LL_ADC_REG_GetDMATransfer>
 8005c4a:	1e03      	subs	r3, r0, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d110      	bne.n	8005c7a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	00d2      	lsls	r2, r2, #3
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f000 f82d 	bl	8005cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2210      	movs	r2, #16
 8005c80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	019b      	lsls	r3, r3, #6
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d00d      	beq.n	8005ca8 <HAL_ADC_IRQHandler+0x224>
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	019b      	lsls	r3, r3, #6
 8005c92:	4013      	ands	r3, r2
 8005c94:	d008      	beq.n	8005ca8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 fbc7 	bl	800642c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	0192      	lsls	r2, r2, #6
 8005ca6:	601a      	str	r2, [r3, #0]
  }
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b006      	add	sp, #24
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	fffffefe 	.word	0xfffffefe

08005cb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b002      	add	sp, #8
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005ccc:	46c0      	nop			; (mov r8, r8)
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b002      	add	sp, #8
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005cdc:	46c0      	nop			; (mov r8, r8)
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b002      	add	sp, #8
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cee:	2317      	movs	r3, #23
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2254      	movs	r2, #84	; 0x54
 8005cfe:	5c9b      	ldrb	r3, [r3, r2]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x24>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e1c0      	b.n	800608a <HAL_ADC_ConfigChannel+0x3a6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2254      	movs	r2, #84	; 0x54
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fbfb 	bl	8005510 <LL_ADC_REG_IsConversionOngoing>
 8005d1a:	1e03      	subs	r3, r0, #0
 8005d1c:	d000      	beq.n	8005d20 <HAL_ADC_ConfigChannel+0x3c>
 8005d1e:	e1a3      	b.n	8006068 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d100      	bne.n	8005d2a <HAL_ADC_ConfigChannel+0x46>
 8005d28:	e143      	b.n	8005fb2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	061b      	lsls	r3, r3, #24
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d004      	beq.n	8005d40 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d3a:	4ac1      	ldr	r2, [pc, #772]	; (8006040 <HAL_ADC_ConfigChannel+0x35c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d108      	bne.n	8005d52 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	0019      	movs	r1, r3
 8005d4a:	0010      	movs	r0, r2
 8005d4c:	f7ff fb02 	bl	8005354 <LL_ADC_REG_SetSequencerChAdd>
 8005d50:	e0c9      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	211f      	movs	r1, #31
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	210f      	movs	r1, #15
 8005d60:	4099      	lsls	r1, r3
 8005d62:	000b      	movs	r3, r1
 8005d64:	43db      	mvns	r3, r3
 8005d66:	4013      	ands	r3, r2
 8005d68:	0019      	movs	r1, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	035b      	lsls	r3, r3, #13
 8005d70:	0b5b      	lsrs	r3, r3, #13
 8005d72:	d105      	bne.n	8005d80 <HAL_ADC_ConfigChannel+0x9c>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	0e9b      	lsrs	r3, r3, #26
 8005d7a:	221f      	movs	r2, #31
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	e098      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2201      	movs	r2, #1
 8005d86:	4013      	ands	r3, r2
 8005d88:	d000      	beq.n	8005d8c <HAL_ADC_ConfigChannel+0xa8>
 8005d8a:	e091      	b.n	8005eb0 <HAL_ADC_ConfigChannel+0x1cc>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2202      	movs	r2, #2
 8005d92:	4013      	ands	r3, r2
 8005d94:	d000      	beq.n	8005d98 <HAL_ADC_ConfigChannel+0xb4>
 8005d96:	e089      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1c8>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d000      	beq.n	8005da4 <HAL_ADC_ConfigChannel+0xc0>
 8005da2:	e081      	b.n	8005ea8 <HAL_ADC_ConfigChannel+0x1c4>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2208      	movs	r2, #8
 8005daa:	4013      	ands	r3, r2
 8005dac:	d000      	beq.n	8005db0 <HAL_ADC_ConfigChannel+0xcc>
 8005dae:	e079      	b.n	8005ea4 <HAL_ADC_ConfigChannel+0x1c0>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2210      	movs	r2, #16
 8005db6:	4013      	ands	r3, r2
 8005db8:	d000      	beq.n	8005dbc <HAL_ADC_ConfigChannel+0xd8>
 8005dba:	e071      	b.n	8005ea0 <HAL_ADC_ConfigChannel+0x1bc>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d000      	beq.n	8005dc8 <HAL_ADC_ConfigChannel+0xe4>
 8005dc6:	e069      	b.n	8005e9c <HAL_ADC_ConfigChannel+0x1b8>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2240      	movs	r2, #64	; 0x40
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d000      	beq.n	8005dd4 <HAL_ADC_ConfigChannel+0xf0>
 8005dd2:	e061      	b.n	8005e98 <HAL_ADC_ConfigChannel+0x1b4>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2280      	movs	r2, #128	; 0x80
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d000      	beq.n	8005de0 <HAL_ADC_ConfigChannel+0xfc>
 8005dde:	e059      	b.n	8005e94 <HAL_ADC_ConfigChannel+0x1b0>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	4013      	ands	r3, r2
 8005dea:	d151      	bne.n	8005e90 <HAL_ADC_ConfigChannel+0x1ac>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4013      	ands	r3, r2
 8005df6:	d149      	bne.n	8005e8c <HAL_ADC_ConfigChannel+0x1a8>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4013      	ands	r3, r2
 8005e02:	d141      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x1a4>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d139      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x1a0>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	015b      	lsls	r3, r3, #5
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d131      	bne.n	8005e80 <HAL_ADC_ConfigChannel+0x19c>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	019b      	lsls	r3, r3, #6
 8005e24:	4013      	ands	r3, r2
 8005e26:	d129      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0x198>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	01db      	lsls	r3, r3, #7
 8005e30:	4013      	ands	r3, r2
 8005e32:	d121      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x194>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d119      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x190>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	025b      	lsls	r3, r3, #9
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d111      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x18c>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	029b      	lsls	r3, r3, #10
 8005e54:	4013      	ands	r3, r2
 8005e56:	d109      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x188>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	02db      	lsls	r3, r3, #11
 8005e60:	4013      	ands	r3, r2
 8005e62:	d001      	beq.n	8005e68 <HAL_ADC_ConfigChannel+0x184>
 8005e64:	2312      	movs	r3, #18
 8005e66:	e024      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e022      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e6c:	2311      	movs	r3, #17
 8005e6e:	e020      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e70:	2310      	movs	r3, #16
 8005e72:	e01e      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e74:	230f      	movs	r3, #15
 8005e76:	e01c      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e78:	230e      	movs	r3, #14
 8005e7a:	e01a      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e7c:	230d      	movs	r3, #13
 8005e7e:	e018      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e80:	230c      	movs	r3, #12
 8005e82:	e016      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e84:	230b      	movs	r3, #11
 8005e86:	e014      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e88:	230a      	movs	r3, #10
 8005e8a:	e012      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e8c:	2309      	movs	r3, #9
 8005e8e:	e010      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e90:	2308      	movs	r3, #8
 8005e92:	e00e      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e94:	2307      	movs	r3, #7
 8005e96:	e00c      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e98:	2306      	movs	r3, #6
 8005e9a:	e00a      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e9c:	2305      	movs	r3, #5
 8005e9e:	e008      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	e006      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e004      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e002      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	6852      	ldr	r2, [r2, #4]
 8005eb6:	201f      	movs	r0, #31
 8005eb8:	4002      	ands	r2, r0
 8005eba:	4093      	lsls	r3, r2
 8005ebc:	000a      	movs	r2, r1
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	089b      	lsrs	r3, r3, #2
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d808      	bhi.n	8005ee6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	001a      	movs	r2, r3
 8005ee2:	f7ff fa17 	bl	8005314 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	001a      	movs	r2, r3
 8005ef4:	f7ff fa5e 	bl	80053b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	db00      	blt.n	8005f02 <HAL_ADC_ConfigChannel+0x21e>
 8005f00:	e0bc      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f02:	4b50      	ldr	r3, [pc, #320]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7ff f9b3 	bl	8005270 <LL_ADC_GetCommonPathInternalCh>
 8005f0a:	0003      	movs	r3, r0
 8005f0c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4d      	ldr	r2, [pc, #308]	; (8006048 <HAL_ADC_ConfigChannel+0x364>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d122      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f20:	d11d      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2280      	movs	r2, #128	; 0x80
 8005f26:	0412      	lsls	r2, r2, #16
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	4a46      	ldr	r2, [pc, #280]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	0010      	movs	r0, r2
 8005f30:	f7ff f98a 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f34:	4b45      	ldr	r3, [pc, #276]	; (800604c <HAL_ADC_ConfigChannel+0x368>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4945      	ldr	r1, [pc, #276]	; (8006050 <HAL_ADC_ConfigChannel+0x36c>)
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7fa f906 	bl	800014c <__udivsi3>
 8005f40:	0003      	movs	r3, r0
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	0013      	movs	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f4e:	e002      	b.n	8005f56 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f9      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f5c:	e08e      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a3c      	ldr	r2, [pc, #240]	; (8006054 <HAL_ADC_ConfigChannel+0x370>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d10e      	bne.n	8005f86 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	045b      	lsls	r3, r3, #17
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d109      	bne.n	8005f86 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2280      	movs	r2, #128	; 0x80
 8005f76:	0452      	lsls	r2, r2, #17
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	4a32      	ldr	r2, [pc, #200]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	0010      	movs	r0, r2
 8005f80:	f7ff f962 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8005f84:	e07a      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a33      	ldr	r2, [pc, #204]	; (8006058 <HAL_ADC_ConfigChannel+0x374>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d000      	beq.n	8005f92 <HAL_ADC_ConfigChannel+0x2ae>
 8005f90:	e074      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	03db      	lsls	r3, r3, #15
 8005f98:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005f9a:	d000      	beq.n	8005f9e <HAL_ADC_ConfigChannel+0x2ba>
 8005f9c:	e06e      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	03d2      	lsls	r2, r2, #15
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a27      	ldr	r2, [pc, #156]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 8005fa8:	0019      	movs	r1, r3
 8005faa:	0010      	movs	r0, r2
 8005fac:	f7ff f94c 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8005fb0:	e064      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	061b      	lsls	r3, r3, #24
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d004      	beq.n	8005fc8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_ADC_ConfigChannel+0x35c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d107      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	0019      	movs	r1, r3
 8005fd2:	0010      	movs	r0, r2
 8005fd4:	f7ff f9cf 	bl	8005376 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da4d      	bge.n	800607c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fe0:	4b18      	ldr	r3, [pc, #96]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f7ff f944 	bl	8005270 <LL_ADC_GetCommonPathInternalCh>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <HAL_ADC_ConfigChannel+0x364>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d108      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	; (800605c <HAL_ADC_ConfigChannel+0x378>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	4a11      	ldr	r2, [pc, #68]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 8005ffe:	0019      	movs	r1, r3
 8006000:	0010      	movs	r0, r2
 8006002:	f7ff f921 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8006006:	e039      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a11      	ldr	r2, [pc, #68]	; (8006054 <HAL_ADC_ConfigChannel+0x370>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4a12      	ldr	r2, [pc, #72]	; (8006060 <HAL_ADC_ConfigChannel+0x37c>)
 8006016:	4013      	ands	r3, r2
 8006018:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 800601a:	0019      	movs	r1, r3
 800601c:	0010      	movs	r0, r2
 800601e:	f7ff f913 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 8006022:	e02b      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0b      	ldr	r2, [pc, #44]	; (8006058 <HAL_ADC_ConfigChannel+0x374>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d126      	bne.n	800607c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <HAL_ADC_ConfigChannel+0x380>)
 8006032:	4013      	ands	r3, r2
 8006034:	4a03      	ldr	r2, [pc, #12]	; (8006044 <HAL_ADC_ConfigChannel+0x360>)
 8006036:	0019      	movs	r1, r3
 8006038:	0010      	movs	r0, r2
 800603a:	f7ff f905 	bl	8005248 <LL_ADC_SetCommonPathInternalCh>
 800603e:	e01d      	b.n	800607c <HAL_ADC_ConfigChannel+0x398>
 8006040:	80000004 	.word	0x80000004
 8006044:	40012708 	.word	0x40012708
 8006048:	b0001000 	.word	0xb0001000
 800604c:	20000000 	.word	0x20000000
 8006050:	00030d40 	.word	0x00030d40
 8006054:	b8004000 	.word	0xb8004000
 8006058:	b4002000 	.word	0xb4002000
 800605c:	ff7fffff 	.word	0xff7fffff
 8006060:	feffffff 	.word	0xfeffffff
 8006064:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	2220      	movs	r2, #32
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006074:	2317      	movs	r3, #23
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2254      	movs	r2, #84	; 0x54
 8006080:	2100      	movs	r1, #0
 8006082:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006084:	2317      	movs	r3, #23
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	781b      	ldrb	r3, [r3, #0]
}
 800608a:	0018      	movs	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	b006      	add	sp, #24
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)

08006094 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7ff fa35 	bl	8005510 <LL_ADC_REG_IsConversionOngoing>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d031      	beq.n	800610e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff f9f9 	bl	80054a6 <LL_ADC_IsDisableOngoing>
 80060b4:	1e03      	subs	r3, r0, #0
 80060b6:	d104      	bne.n	80060c2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	0018      	movs	r0, r3
 80060be:	f7ff fa15 	bl	80054ec <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060c2:	f7ff f893 	bl	80051ec <HAL_GetTick>
 80060c6:	0003      	movs	r3, r0
 80060c8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80060ca:	e01a      	b.n	8006102 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80060cc:	f7ff f88e 	bl	80051ec <HAL_GetTick>
 80060d0:	0002      	movs	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d913      	bls.n	8006102 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2204      	movs	r2, #4
 80060e2:	4013      	ands	r3, r2
 80060e4:	d00d      	beq.n	8006102 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	2210      	movs	r2, #16
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f6:	2201      	movs	r2, #1
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e006      	b.n	8006110 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2204      	movs	r2, #4
 800610a:	4013      	ands	r3, r2
 800610c:	d1de      	bne.n	80060cc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b004      	add	sp, #16
 8006116:	bd80      	pop	{r7, pc}

08006118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006120:	2300      	movs	r3, #0
 8006122:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	0018      	movs	r0, r3
 800612a:	f7ff f9ab 	bl	8005484 <LL_ADC_IsEnabled>
 800612e:	1e03      	subs	r3, r0, #0
 8006130:	d000      	beq.n	8006134 <ADC_Enable+0x1c>
 8006132:	e069      	b.n	8006208 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	4a36      	ldr	r2, [pc, #216]	; (8006214 <ADC_Enable+0xfc>)
 800613c:	4013      	ands	r3, r2
 800613e:	d00d      	beq.n	800615c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006144:	2210      	movs	r2, #16
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	2201      	movs	r2, #1
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e056      	b.n	800620a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	0018      	movs	r0, r3
 8006162:	f7ff f96b 	bl	800543c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006166:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <ADC_Enable+0x100>)
 8006168:	0018      	movs	r0, r3
 800616a:	f7ff f881 	bl	8005270 <LL_ADC_GetCommonPathInternalCh>
 800616e:	0002      	movs	r2, r0
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	4013      	ands	r3, r2
 8006176:	d00f      	beq.n	8006198 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006178:	4b28      	ldr	r3, [pc, #160]	; (800621c <ADC_Enable+0x104>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4928      	ldr	r1, [pc, #160]	; (8006220 <ADC_Enable+0x108>)
 800617e:	0018      	movs	r0, r3
 8006180:	f7f9 ffe4 	bl	800014c <__udivsi3>
 8006184:	0003      	movs	r3, r0
 8006186:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8006188:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800618a:	e002      	b.n	8006192 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3b01      	subs	r3, #1
 8006190:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f9      	bne.n	800618c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7e5b      	ldrb	r3, [r3, #25]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d033      	beq.n	8006208 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80061a0:	f7ff f824 	bl	80051ec <HAL_GetTick>
 80061a4:	0003      	movs	r3, r0
 80061a6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061a8:	e027      	b.n	80061fa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f7ff f968 	bl	8005484 <LL_ADC_IsEnabled>
 80061b4:	1e03      	subs	r3, r0, #0
 80061b6:	d104      	bne.n	80061c2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	0018      	movs	r0, r3
 80061be:	f7ff f93d 	bl	800543c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061c2:	f7ff f813 	bl	80051ec <HAL_GetTick>
 80061c6:	0002      	movs	r2, r0
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d914      	bls.n	80061fa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2201      	movs	r2, #1
 80061d8:	4013      	ands	r3, r2
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d00d      	beq.n	80061fa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e2:	2210      	movs	r2, #16
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	2201      	movs	r2, #1
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e007      	b.n	800620a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2201      	movs	r2, #1
 8006202:	4013      	ands	r3, r2
 8006204:	2b01      	cmp	r3, #1
 8006206:	d1d0      	bne.n	80061aa <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b004      	add	sp, #16
 8006210:	bd80      	pop	{r7, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	80000017 	.word	0x80000017
 8006218:	40012708 	.word	0x40012708
 800621c:	20000000 	.word	0x20000000
 8006220:	00030d40 	.word	0x00030d40

08006224 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	0018      	movs	r0, r3
 8006232:	f7ff f938 	bl	80054a6 <LL_ADC_IsDisableOngoing>
 8006236:	0003      	movs	r3, r0
 8006238:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	0018      	movs	r0, r3
 8006240:	f7ff f920 	bl	8005484 <LL_ADC_IsEnabled>
 8006244:	1e03      	subs	r3, r0, #0
 8006246:	d046      	beq.n	80062d6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d143      	bne.n	80062d6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2205      	movs	r2, #5
 8006256:	4013      	ands	r3, r2
 8006258:	2b01      	cmp	r3, #1
 800625a:	d10d      	bne.n	8006278 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	0018      	movs	r0, r3
 8006262:	f7ff f8fd 	bl	8005460 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2203      	movs	r2, #3
 800626c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800626e:	f7fe ffbd 	bl	80051ec <HAL_GetTick>
 8006272:	0003      	movs	r3, r0
 8006274:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006276:	e028      	b.n	80062ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627c:	2210      	movs	r2, #16
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006288:	2201      	movs	r2, #1
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e021      	b.n	80062d8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006294:	f7fe ffaa 	bl	80051ec <HAL_GetTick>
 8006298:	0002      	movs	r2, r0
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d913      	bls.n	80062ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2201      	movs	r2, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	d00d      	beq.n	80062ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b2:	2210      	movs	r2, #16
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	2201      	movs	r2, #1
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e006      	b.n	80062d8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2201      	movs	r2, #1
 80062d2:	4013      	ands	r3, r2
 80062d4:	d1de      	bne.n	8006294 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	0018      	movs	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	b004      	add	sp, #16
 80062de:	bd80      	pop	{r7, pc}

080062e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	2250      	movs	r2, #80	; 0x50
 80062f4:	4013      	ands	r3, r2
 80062f6:	d141      	bne.n	800637c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fc:	2280      	movs	r2, #128	; 0x80
 80062fe:	0092      	lsls	r2, r2, #2
 8006300:	431a      	orrs	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	0018      	movs	r0, r3
 800630c:	f7fe fff1 	bl	80052f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006310:	1e03      	subs	r3, r0, #0
 8006312:	d02e      	beq.n	8006372 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	7e9b      	ldrb	r3, [r3, #26]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d12a      	bne.n	8006372 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2208      	movs	r2, #8
 8006324:	4013      	ands	r3, r2
 8006326:	2b08      	cmp	r3, #8
 8006328:	d123      	bne.n	8006372 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	0018      	movs	r0, r3
 8006330:	f7ff f8ee 	bl	8005510 <LL_ADC_REG_IsConversionOngoing>
 8006334:	1e03      	subs	r3, r0, #0
 8006336:	d110      	bne.n	800635a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	210c      	movs	r1, #12
 8006344:	438a      	bics	r2, r1
 8006346:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634c:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <ADC_DMAConvCplt+0xc4>)
 800634e:	4013      	ands	r3, r2
 8006350:	2201      	movs	r2, #1
 8006352:	431a      	orrs	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	659a      	str	r2, [r3, #88]	; 0x58
 8006358:	e00b      	b.n	8006372 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635e:	2220      	movs	r2, #32
 8006360:	431a      	orrs	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636a:	2201      	movs	r2, #1
 800636c:	431a      	orrs	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0018      	movs	r0, r3
 8006376:	f00b f82b 	bl	80113d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800637a:	e00f      	b.n	800639c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	2210      	movs	r2, #16
 8006382:	4013      	ands	r3, r2
 8006384:	d004      	beq.n	8006390 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	0018      	movs	r0, r3
 800638a:	f7ff fca3 	bl	8005cd4 <HAL_ADC_ErrorCallback>
}
 800638e:	e005      	b.n	800639c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	0010      	movs	r0, r2
 800639a:	4798      	blx	r3
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b004      	add	sp, #16
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	fffffefe 	.word	0xfffffefe

080063a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	0018      	movs	r0, r3
 80063ba:	f7ff fc7b 	bl	8005cb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b004      	add	sp, #16
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	2240      	movs	r2, #64	; 0x40
 80063da:	431a      	orrs	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	2204      	movs	r2, #4
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7ff fc70 	bl	8005cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b004      	add	sp, #16
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	46bd      	mov	sp, r7
 8006408:	b002      	add	sp, #8
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b002      	add	sp, #8
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006424:	46c0      	nop			; (mov r8, r8)
 8006426:	46bd      	mov	sp, r7
 8006428:	b002      	add	sp, #8
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b002      	add	sp, #8
 800643a:	bd80      	pop	{r7, pc}

0800643c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	0002      	movs	r2, r0
 8006444:	1dfb      	adds	r3, r7, #7
 8006446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006448:	1dfb      	adds	r3, r7, #7
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b7f      	cmp	r3, #127	; 0x7f
 800644e:	d809      	bhi.n	8006464 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006450:	1dfb      	adds	r3, r7, #7
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	001a      	movs	r2, r3
 8006456:	231f      	movs	r3, #31
 8006458:	401a      	ands	r2, r3
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <__NVIC_EnableIRQ+0x30>)
 800645c:	2101      	movs	r1, #1
 800645e:	4091      	lsls	r1, r2
 8006460:	000a      	movs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006464:	46c0      	nop			; (mov r8, r8)
 8006466:	46bd      	mov	sp, r7
 8006468:	b002      	add	sp, #8
 800646a:	bd80      	pop	{r7, pc}
 800646c:	e000e100 	.word	0xe000e100

08006470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	0002      	movs	r2, r0
 8006478:	6039      	str	r1, [r7, #0]
 800647a:	1dfb      	adds	r3, r7, #7
 800647c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800647e:	1dfb      	adds	r3, r7, #7
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b7f      	cmp	r3, #127	; 0x7f
 8006484:	d828      	bhi.n	80064d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006486:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <__NVIC_SetPriority+0xd4>)
 8006488:	1dfb      	adds	r3, r7, #7
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b25b      	sxtb	r3, r3
 800648e:	089b      	lsrs	r3, r3, #2
 8006490:	33c0      	adds	r3, #192	; 0xc0
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	589b      	ldr	r3, [r3, r2]
 8006496:	1dfa      	adds	r2, r7, #7
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	0011      	movs	r1, r2
 800649c:	2203      	movs	r2, #3
 800649e:	400a      	ands	r2, r1
 80064a0:	00d2      	lsls	r2, r2, #3
 80064a2:	21ff      	movs	r1, #255	; 0xff
 80064a4:	4091      	lsls	r1, r2
 80064a6:	000a      	movs	r2, r1
 80064a8:	43d2      	mvns	r2, r2
 80064aa:	401a      	ands	r2, r3
 80064ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	019b      	lsls	r3, r3, #6
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	401a      	ands	r2, r3
 80064b6:	1dfb      	adds	r3, r7, #7
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	0018      	movs	r0, r3
 80064bc:	2303      	movs	r3, #3
 80064be:	4003      	ands	r3, r0
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064c4:	481f      	ldr	r0, [pc, #124]	; (8006544 <__NVIC_SetPriority+0xd4>)
 80064c6:	1dfb      	adds	r3, r7, #7
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	089b      	lsrs	r3, r3, #2
 80064ce:	430a      	orrs	r2, r1
 80064d0:	33c0      	adds	r3, #192	; 0xc0
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80064d6:	e031      	b.n	800653c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <__NVIC_SetPriority+0xd8>)
 80064da:	1dfb      	adds	r3, r7, #7
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	0019      	movs	r1, r3
 80064e0:	230f      	movs	r3, #15
 80064e2:	400b      	ands	r3, r1
 80064e4:	3b08      	subs	r3, #8
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	3306      	adds	r3, #6
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	18d3      	adds	r3, r2, r3
 80064ee:	3304      	adds	r3, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	1dfa      	adds	r2, r7, #7
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	0011      	movs	r1, r2
 80064f8:	2203      	movs	r2, #3
 80064fa:	400a      	ands	r2, r1
 80064fc:	00d2      	lsls	r2, r2, #3
 80064fe:	21ff      	movs	r1, #255	; 0xff
 8006500:	4091      	lsls	r1, r2
 8006502:	000a      	movs	r2, r1
 8006504:	43d2      	mvns	r2, r2
 8006506:	401a      	ands	r2, r3
 8006508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	019b      	lsls	r3, r3, #6
 800650e:	22ff      	movs	r2, #255	; 0xff
 8006510:	401a      	ands	r2, r3
 8006512:	1dfb      	adds	r3, r7, #7
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	0018      	movs	r0, r3
 8006518:	2303      	movs	r3, #3
 800651a:	4003      	ands	r3, r0
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006520:	4809      	ldr	r0, [pc, #36]	; (8006548 <__NVIC_SetPriority+0xd8>)
 8006522:	1dfb      	adds	r3, r7, #7
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	001c      	movs	r4, r3
 8006528:	230f      	movs	r3, #15
 800652a:	4023      	ands	r3, r4
 800652c:	3b08      	subs	r3, #8
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	430a      	orrs	r2, r1
 8006532:	3306      	adds	r3, #6
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	18c3      	adds	r3, r0, r3
 8006538:	3304      	adds	r3, #4
 800653a:	601a      	str	r2, [r3, #0]
}
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	46bd      	mov	sp, r7
 8006540:	b003      	add	sp, #12
 8006542:	bd90      	pop	{r4, r7, pc}
 8006544:	e000e100 	.word	0xe000e100
 8006548:	e000ed00 	.word	0xe000ed00

0800654c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	1e5a      	subs	r2, r3, #1
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	045b      	lsls	r3, r3, #17
 800655c:	429a      	cmp	r2, r3
 800655e:	d301      	bcc.n	8006564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006560:	2301      	movs	r3, #1
 8006562:	e010      	b.n	8006586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <SysTick_Config+0x44>)
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	3a01      	subs	r2, #1
 800656a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800656c:	2301      	movs	r3, #1
 800656e:	425b      	negs	r3, r3
 8006570:	2103      	movs	r1, #3
 8006572:	0018      	movs	r0, r3
 8006574:	f7ff ff7c 	bl	8006470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <SysTick_Config+0x44>)
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <SysTick_Config+0x44>)
 8006580:	2207      	movs	r2, #7
 8006582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006584:	2300      	movs	r3, #0
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b002      	add	sp, #8
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	e000e010 	.word	0xe000e010

08006594 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
 800659e:	210f      	movs	r1, #15
 80065a0:	187b      	adds	r3, r7, r1
 80065a2:	1c02      	adds	r2, r0, #0
 80065a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	187b      	adds	r3, r7, r1
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	0011      	movs	r1, r2
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7ff ff5d 	bl	8006470 <__NVIC_SetPriority>
}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b004      	add	sp, #16
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	0002      	movs	r2, r0
 80065c6:	1dfb      	adds	r3, r7, #7
 80065c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065ca:	1dfb      	adds	r3, r7, #7
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7ff ff33 	bl	800643c <__NVIC_EnableIRQ>
}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff ffaf 	bl	800654c <SysTick_Config>
 80065ee:	0003      	movs	r3, r0
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b002      	add	sp, #8
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e077      	b.n	80066fa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3d      	ldr	r2, [pc, #244]	; (8006704 <HAL_DMA_Init+0x10c>)
 8006610:	4694      	mov	ip, r2
 8006612:	4463      	add	r3, ip
 8006614:	2114      	movs	r1, #20
 8006616:	0018      	movs	r0, r3
 8006618:	f7f9 fd98 	bl	800014c <__udivsi3>
 800661c:	0003      	movs	r3, r0
 800661e:	009a      	lsls	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2225      	movs	r2, #37	; 0x25
 8006628:	2102      	movs	r1, #2
 800662a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4934      	ldr	r1, [pc, #208]	; (8006708 <HAL_DMA_Init+0x110>)
 8006638:	400a      	ands	r2, r1
 800663a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	0018      	movs	r0, r3
 8006676:	f000 fa97 	bl	8006ba8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	2380      	movs	r3, #128	; 0x80
 8006680:	01db      	lsls	r3, r3, #7
 8006682:	429a      	cmp	r2, r3
 8006684:	d102      	bne.n	800668c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	213f      	movs	r1, #63	; 0x3f
 8006696:	400a      	ands	r2, r1
 8006698:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80066a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d011      	beq.n	80066d0 <HAL_DMA_Init+0xd8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d80d      	bhi.n	80066d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 faa2 	bl	8006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	e008      	b.n	80066e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2225      	movs	r2, #37	; 0x25
 80066ec:	2101      	movs	r1, #1
 80066ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2224      	movs	r2, #36	; 0x24
 80066f4:	2100      	movs	r1, #0
 80066f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	0018      	movs	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b002      	add	sp, #8
 8006700:	bd80      	pop	{r7, pc}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	bffdfff8 	.word	0xbffdfff8
 8006708:	ffff800f 	.word	0xffff800f

0800670c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2317      	movs	r3, #23
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2224      	movs	r2, #36	; 0x24
 8006726:	5c9b      	ldrb	r3, [r3, r2]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_DMA_Start_IT+0x24>
 800672c:	2302      	movs	r3, #2
 800672e:	e06f      	b.n	8006810 <HAL_DMA_Start_IT+0x104>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2224      	movs	r2, #36	; 0x24
 8006734:	2101      	movs	r1, #1
 8006736:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2225      	movs	r2, #37	; 0x25
 800673c:	5c9b      	ldrb	r3, [r3, r2]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	d157      	bne.n	80067f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2225      	movs	r2, #37	; 0x25
 8006748:	2102      	movs	r1, #2
 800674a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2101      	movs	r1, #1
 800675e:	438a      	bics	r2, r1
 8006760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f9dd 	bl	8006b28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	210e      	movs	r1, #14
 8006782:	430a      	orrs	r2, r1
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e00f      	b.n	80067a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2104      	movs	r1, #4
 8006794:	438a      	bics	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	210a      	movs	r1, #10
 80067a4:	430a      	orrs	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	025b      	lsls	r3, r3, #9
 80067b2:	4013      	ands	r3, r2
 80067b4:	d008      	beq.n	80067c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	0049      	lsls	r1, r1, #1
 80067c4:	430a      	orrs	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d008      	beq.n	80067e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	0049      	lsls	r1, r1, #1
 80067de:	430a      	orrs	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2101      	movs	r1, #1
 80067ee:	430a      	orrs	r2, r1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e00a      	b.n	800680a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2224      	movs	r2, #36	; 0x24
 80067fe:	2100      	movs	r1, #0
 8006800:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006802:	2317      	movs	r3, #23
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	2201      	movs	r2, #1
 8006808:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800680a:	2317      	movs	r3, #23
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	781b      	ldrb	r3, [r3, #0]
}
 8006810:	0018      	movs	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	b006      	add	sp, #24
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e050      	b.n	80068cc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2225      	movs	r2, #37	; 0x25
 800682e:	5c9b      	ldrb	r3, [r3, r2]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d008      	beq.n	8006848 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	; 0x24
 8006840:	2100      	movs	r1, #0
 8006842:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e041      	b.n	80068cc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	210e      	movs	r1, #14
 8006854:	438a      	bics	r2, r1
 8006856:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	491c      	ldr	r1, [pc, #112]	; (80068d4 <HAL_DMA_Abort+0xbc>)
 8006864:	400a      	ands	r2, r1
 8006866:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2101      	movs	r1, #1
 8006874:	438a      	bics	r2, r1
 8006876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006878:	4b17      	ldr	r3, [pc, #92]	; (80068d8 <HAL_DMA_Abort+0xc0>)
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	221c      	movs	r2, #28
 8006882:	4013      	ands	r3, r2
 8006884:	2201      	movs	r2, #1
 8006886:	409a      	lsls	r2, r3
 8006888:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <HAL_DMA_Abort+0xc0>)
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006896:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	490a      	ldr	r1, [pc, #40]	; (80068d4 <HAL_DMA_Abort+0xbc>)
 80068ac:	400a      	ands	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80068b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2225      	movs	r2, #37	; 0x25
 80068be:	2101      	movs	r1, #1
 80068c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2224      	movs	r2, #36	; 0x24
 80068c6:	2100      	movs	r1, #0
 80068c8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	0018      	movs	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b002      	add	sp, #8
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	fffffeff 	.word	0xfffffeff
 80068d8:	40020000 	.word	0x40020000

080068dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e4:	210f      	movs	r1, #15
 80068e6:	187b      	adds	r3, r7, r1
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2225      	movs	r2, #37	; 0x25
 80068f0:	5c9b      	ldrb	r3, [r3, r2]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d006      	beq.n	8006906 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2204      	movs	r2, #4
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80068fe:	187b      	adds	r3, r7, r1
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e049      	b.n	800699a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	210e      	movs	r1, #14
 8006912:	438a      	bics	r2, r1
 8006914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2101      	movs	r1, #1
 8006922:	438a      	bics	r2, r1
 8006924:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	491d      	ldr	r1, [pc, #116]	; (80069a8 <HAL_DMA_Abort_IT+0xcc>)
 8006932:	400a      	ands	r2, r1
 8006934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006936:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_DMA_Abort_IT+0xd0>)
 8006938:	6859      	ldr	r1, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	221c      	movs	r2, #28
 8006940:	4013      	ands	r3, r2
 8006942:	2201      	movs	r2, #1
 8006944:	409a      	lsls	r2, r3
 8006946:	4b19      	ldr	r3, [pc, #100]	; (80069ac <HAL_DMA_Abort_IT+0xd0>)
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006954:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	490f      	ldr	r1, [pc, #60]	; (80069a8 <HAL_DMA_Abort_IT+0xcc>)
 800696a:	400a      	ands	r2, r1
 800696c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006976:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2225      	movs	r2, #37	; 0x25
 800697c:	2101      	movs	r1, #1
 800697e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2224      	movs	r2, #36	; 0x24
 8006984:	2100      	movs	r1, #0
 8006986:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	0010      	movs	r0, r2
 8006998:	4798      	blx	r3
    }
  }
  return status;
 800699a:	230f      	movs	r3, #15
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	781b      	ldrb	r3, [r3, #0]
}
 80069a0:	0018      	movs	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b004      	add	sp, #16
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	fffffeff 	.word	0xfffffeff
 80069ac:	40020000 	.word	0x40020000

080069b0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80069b8:	4b55      	ldr	r3, [pc, #340]	; (8006b10 <HAL_DMA_IRQHandler+0x160>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	221c      	movs	r2, #28
 80069cc:	4013      	ands	r3, r2
 80069ce:	2204      	movs	r2, #4
 80069d0:	409a      	lsls	r2, r3
 80069d2:	0013      	movs	r3, r2
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4013      	ands	r3, r2
 80069d8:	d027      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x7a>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2204      	movs	r2, #4
 80069de:	4013      	ands	r3, r2
 80069e0:	d023      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2220      	movs	r2, #32
 80069ea:	4013      	ands	r3, r2
 80069ec:	d107      	bne.n	80069fe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2104      	movs	r1, #4
 80069fa:	438a      	bics	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80069fe:	4b44      	ldr	r3, [pc, #272]	; (8006b10 <HAL_DMA_IRQHandler+0x160>)
 8006a00:	6859      	ldr	r1, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	221c      	movs	r2, #28
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	4b40      	ldr	r3, [pc, #256]	; (8006b10 <HAL_DMA_IRQHandler+0x160>)
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d100      	bne.n	8006a1e <HAL_DMA_IRQHandler+0x6e>
 8006a1c:	e073      	b.n	8006b06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	0010      	movs	r0, r2
 8006a26:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006a28:	e06d      	b.n	8006b06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	221c      	movs	r2, #28
 8006a30:	4013      	ands	r3, r2
 8006a32:	2202      	movs	r2, #2
 8006a34:	409a      	lsls	r2, r3
 8006a36:	0013      	movs	r3, r2
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	d02e      	beq.n	8006a9c <HAL_DMA_IRQHandler+0xec>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2202      	movs	r2, #2
 8006a42:	4013      	ands	r3, r2
 8006a44:	d02a      	beq.n	8006a9c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d10b      	bne.n	8006a6a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	210a      	movs	r1, #10
 8006a5e:	438a      	bics	r2, r1
 8006a60:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2225      	movs	r2, #37	; 0x25
 8006a66:	2101      	movs	r1, #1
 8006a68:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006a6a:	4b29      	ldr	r3, [pc, #164]	; (8006b10 <HAL_DMA_IRQHandler+0x160>)
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	221c      	movs	r2, #28
 8006a74:	4013      	ands	r3, r2
 8006a76:	2202      	movs	r2, #2
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <HAL_DMA_IRQHandler+0x160>)
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	2100      	movs	r1, #0
 8006a86:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d03a      	beq.n	8006b06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	0010      	movs	r0, r2
 8006a98:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006a9a:	e034      	b.n	8006b06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	221c      	movs	r2, #28
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	0013      	movs	r3, r2
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4013      	ands	r3, r2
 8006aae:	d02b      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x158>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d027      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	210e      	movs	r1, #14
 8006ac4:	438a      	bics	r2, r1
 8006ac6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <HAL_DMA_IRQHandler+0x160>)
 8006aca:	6859      	ldr	r1, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	221c      	movs	r2, #28
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <HAL_DMA_IRQHandler+0x160>)
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2225      	movs	r2, #37	; 0x25
 8006ae8:	2101      	movs	r1, #1
 8006aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2224      	movs	r2, #36	; 0x24
 8006af0:	2100      	movs	r1, #0
 8006af2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	0010      	movs	r0, r2
 8006b04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	46c0      	nop			; (mov r8, r8)
}
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b004      	add	sp, #16
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40020000 	.word	0x40020000

08006b14 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006b20:	0018      	movs	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b002      	add	sp, #8
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006b3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b50:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006b52:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <DMA_SetConfig+0x7c>)
 8006b54:	6859      	ldr	r1, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	221c      	movs	r2, #28
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2201      	movs	r2, #1
 8006b60:	409a      	lsls	r2, r3
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <DMA_SetConfig+0x7c>)
 8006b64:	430a      	orrs	r2, r1
 8006b66:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d108      	bne.n	8006b8a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b88:	e007      	b.n	8006b9a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]
}
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	b004      	add	sp, #16
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	40020000 	.word	0x40020000

08006ba8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	089b      	lsrs	r3, r3, #2
 8006bb6:	4a10      	ldr	r2, [pc, #64]	; (8006bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006bb8:	4694      	mov	ip, r2
 8006bba:	4463      	add	r3, ip
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	001a      	movs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	001a      	movs	r2, r3
 8006bca:	23ff      	movs	r3, #255	; 0xff
 8006bcc:	4013      	ands	r3, r2
 8006bce:	3b08      	subs	r3, #8
 8006bd0:	2114      	movs	r1, #20
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f7f9 faba 	bl	800014c <__udivsi3>
 8006bd8:	0003      	movs	r3, r0
 8006bda:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a07      	ldr	r2, [pc, #28]	; (8006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006be0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	221f      	movs	r2, #31
 8006be6:	4013      	ands	r3, r2
 8006be8:	2201      	movs	r2, #1
 8006bea:	409a      	lsls	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b004      	add	sp, #16
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	10008200 	.word	0x10008200
 8006bfc:	40020880 	.word	0x40020880

08006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	223f      	movs	r2, #63	; 0x3f
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a0a      	ldr	r2, [pc, #40]	; (8006c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006c16:	4694      	mov	ip, r2
 8006c18:	4463      	add	r3, ip
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	001a      	movs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a07      	ldr	r2, [pc, #28]	; (8006c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c26:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2201      	movs	r2, #1
 8006c32:	409a      	lsls	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b004      	add	sp, #16
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	1000823f 	.word	0x1000823f
 8006c44:	40020940 	.word	0x40020940

08006c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c56:	e147      	b.n	8006ee8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4091      	lsls	r1, r2
 8006c62:	000a      	movs	r2, r1
 8006c64:	4013      	ands	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d100      	bne.n	8006c70 <HAL_GPIO_Init+0x28>
 8006c6e:	e138      	b.n	8006ee2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2203      	movs	r2, #3
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d005      	beq.n	8006c88 <HAL_GPIO_Init+0x40>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2203      	movs	r2, #3
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d130      	bne.n	8006cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	2203      	movs	r2, #3
 8006c94:	409a      	lsls	r2, r3
 8006c96:	0013      	movs	r3, r2
 8006c98:	43da      	mvns	r2, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	409a      	lsls	r2, r3
 8006caa:	0013      	movs	r3, r2
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	0013      	movs	r3, r2
 8006cc6:	43da      	mvns	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	091b      	lsrs	r3, r3, #4
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	401a      	ands	r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	0013      	movs	r3, r2
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2203      	movs	r2, #3
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d017      	beq.n	8006d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	2203      	movs	r2, #3
 8006d02:	409a      	lsls	r2, r3
 8006d04:	0013      	movs	r3, r2
 8006d06:	43da      	mvns	r2, r3
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	409a      	lsls	r2, r3
 8006d18:	0013      	movs	r3, r2
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d123      	bne.n	8006d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	08da      	lsrs	r2, r3, #3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3208      	adds	r2, #8
 8006d3a:	0092      	lsls	r2, r2, #2
 8006d3c:	58d3      	ldr	r3, [r2, r3]
 8006d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2207      	movs	r2, #7
 8006d44:	4013      	ands	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	220f      	movs	r2, #15
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	0013      	movs	r3, r2
 8006d4e:	43da      	mvns	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4013      	ands	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2107      	movs	r1, #7
 8006d5e:	400b      	ands	r3, r1
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	409a      	lsls	r2, r3
 8006d64:	0013      	movs	r3, r2
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	08da      	lsrs	r2, r3, #3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3208      	adds	r2, #8
 8006d74:	0092      	lsls	r2, r2, #2
 8006d76:	6939      	ldr	r1, [r7, #16]
 8006d78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	2203      	movs	r2, #3
 8006d86:	409a      	lsls	r2, r3
 8006d88:	0013      	movs	r3, r2
 8006d8a:	43da      	mvns	r2, r3
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2203      	movs	r2, #3
 8006d98:	401a      	ands	r2, r3
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	0013      	movs	r3, r2
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	23c0      	movs	r3, #192	; 0xc0
 8006db4:	029b      	lsls	r3, r3, #10
 8006db6:	4013      	ands	r3, r2
 8006db8:	d100      	bne.n	8006dbc <HAL_GPIO_Init+0x174>
 8006dba:	e092      	b.n	8006ee2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006dbc:	4a50      	ldr	r2, [pc, #320]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	089b      	lsrs	r3, r3, #2
 8006dc2:	3318      	adds	r3, #24
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	589b      	ldr	r3, [r3, r2]
 8006dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	4013      	ands	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	220f      	movs	r2, #15
 8006dd4:	409a      	lsls	r2, r3
 8006dd6:	0013      	movs	r3, r2
 8006dd8:	43da      	mvns	r2, r3
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	23a0      	movs	r3, #160	; 0xa0
 8006de4:	05db      	lsls	r3, r3, #23
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d013      	beq.n	8006e12 <HAL_GPIO_Init+0x1ca>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a45      	ldr	r2, [pc, #276]	; (8006f04 <HAL_GPIO_Init+0x2bc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00d      	beq.n	8006e0e <HAL_GPIO_Init+0x1c6>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a44      	ldr	r2, [pc, #272]	; (8006f08 <HAL_GPIO_Init+0x2c0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <HAL_GPIO_Init+0x1c2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a43      	ldr	r2, [pc, #268]	; (8006f0c <HAL_GPIO_Init+0x2c4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d101      	bne.n	8006e06 <HAL_GPIO_Init+0x1be>
 8006e02:	2303      	movs	r3, #3
 8006e04:	e006      	b.n	8006e14 <HAL_GPIO_Init+0x1cc>
 8006e06:	2305      	movs	r3, #5
 8006e08:	e004      	b.n	8006e14 <HAL_GPIO_Init+0x1cc>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e002      	b.n	8006e14 <HAL_GPIO_Init+0x1cc>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <HAL_GPIO_Init+0x1cc>
 8006e12:	2300      	movs	r3, #0
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	2103      	movs	r1, #3
 8006e18:	400a      	ands	r2, r1
 8006e1a:	00d2      	lsls	r2, r2, #3
 8006e1c:	4093      	lsls	r3, r2
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006e24:	4936      	ldr	r1, [pc, #216]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	089b      	lsrs	r3, r3, #2
 8006e2a:	3318      	adds	r3, #24
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e32:	4b33      	ldr	r3, [pc, #204]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	43da      	mvns	r2, r3
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	035b      	lsls	r3, r3, #13
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e56:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006e5c:	4b28      	ldr	r3, [pc, #160]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	43da      	mvns	r2, r3
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	2380      	movs	r3, #128	; 0x80
 8006e72:	039b      	lsls	r3, r3, #14
 8006e74:	4013      	ands	r3, r2
 8006e76:	d003      	beq.n	8006e80 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e80:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006e86:	4a1e      	ldr	r2, [pc, #120]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006e88:	2384      	movs	r3, #132	; 0x84
 8006e8a:	58d3      	ldr	r3, [r2, r3]
 8006e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	43da      	mvns	r2, r3
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4013      	ands	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d003      	beq.n	8006eac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006eac:	4914      	ldr	r1, [pc, #80]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006eae:	2284      	movs	r2, #132	; 0x84
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006eb4:	4a12      	ldr	r2, [pc, #72]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006eb6:	2380      	movs	r3, #128	; 0x80
 8006eb8:	58d3      	ldr	r3, [r2, r3]
 8006eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	43da      	mvns	r2, r3
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	2380      	movs	r3, #128	; 0x80
 8006ecc:	025b      	lsls	r3, r3, #9
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d003      	beq.n	8006eda <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006eda:	4909      	ldr	r1, [pc, #36]	; (8006f00 <HAL_GPIO_Init+0x2b8>)
 8006edc:	2280      	movs	r2, #128	; 0x80
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	40da      	lsrs	r2, r3
 8006ef0:	1e13      	subs	r3, r2, #0
 8006ef2:	d000      	beq.n	8006ef6 <HAL_GPIO_Init+0x2ae>
 8006ef4:	e6b0      	b.n	8006c58 <HAL_GPIO_Init+0x10>
  }
}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	46c0      	nop			; (mov r8, r8)
 8006efa:	46bd      	mov	sp, r7
 8006efc:	b006      	add	sp, #24
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021800 	.word	0x40021800
 8006f04:	50000400 	.word	0x50000400
 8006f08:	50000800 	.word	0x50000800
 8006f0c:	50000c00 	.word	0x50000c00

08006f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	000a      	movs	r2, r1
 8006f1a:	1cbb      	adds	r3, r7, #2
 8006f1c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	1cba      	adds	r2, r7, #2
 8006f24:	8812      	ldrh	r2, [r2, #0]
 8006f26:	4013      	ands	r3, r2
 8006f28:	d004      	beq.n	8006f34 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006f2a:	230f      	movs	r3, #15
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	2201      	movs	r2, #1
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e003      	b.n	8006f3c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f34:	230f      	movs	r3, #15
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006f3c:	230f      	movs	r3, #15
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	781b      	ldrb	r3, [r3, #0]
}
 8006f42:	0018      	movs	r0, r3
 8006f44:	46bd      	mov	sp, r7
 8006f46:	b004      	add	sp, #16
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	0008      	movs	r0, r1
 8006f54:	0011      	movs	r1, r2
 8006f56:	1cbb      	adds	r3, r7, #2
 8006f58:	1c02      	adds	r2, r0, #0
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	1c7b      	adds	r3, r7, #1
 8006f5e:	1c0a      	adds	r2, r1, #0
 8006f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f62:	1c7b      	adds	r3, r7, #1
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f6a:	1cbb      	adds	r3, r7, #2
 8006f6c:	881a      	ldrh	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f72:	e003      	b.n	8006f7c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f74:	1cbb      	adds	r3, r7, #2
 8006f76:	881a      	ldrh	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b002      	add	sp, #8
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006f92:	4013      	ands	r3, r2
 8006f94:	0019      	movs	r1, r3
 8006f96:	4b17      	ldr	r3, [pc, #92]	; (8006ff4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	2380      	movs	r3, #128	; 0x80
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d11f      	bne.n	8006fe8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	0013      	movs	r3, r2
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	189b      	adds	r3, r3, r2
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	4912      	ldr	r1, [pc, #72]	; (8007000 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f7f9 f8c8 	bl	800014c <__udivsi3>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fc2:	e008      	b.n	8006fd6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e001      	b.n	8006fd6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e009      	b.n	8006fea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	2380      	movs	r3, #128	; 0x80
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	401a      	ands	r2, r3
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d0ed      	beq.n	8006fc4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	0018      	movs	r0, r3
 8006fec:	46bd      	mov	sp, r7
 8006fee:	b004      	add	sp, #16
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	40007000 	.word	0x40007000
 8006ff8:	fffff9ff 	.word	0xfffff9ff
 8006ffc:	20000000 	.word	0x20000000
 8007000:	000f4240 	.word	0x000f4240

08007004 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007008:	4b03      	ldr	r3, [pc, #12]	; (8007018 <LL_RCC_GetAPB1Prescaler+0x14>)
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	23e0      	movs	r3, #224	; 0xe0
 800700e:	01db      	lsls	r3, r3, #7
 8007010:	4013      	ands	r3, r2
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40021000 	.word	0x40021000

0800701c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e2f3      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2201      	movs	r2, #1
 8007034:	4013      	ands	r3, r2
 8007036:	d100      	bne.n	800703a <HAL_RCC_OscConfig+0x1e>
 8007038:	e07c      	b.n	8007134 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800703a:	4bc3      	ldr	r3, [pc, #780]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2238      	movs	r2, #56	; 0x38
 8007040:	4013      	ands	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007044:	4bc0      	ldr	r3, [pc, #768]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2203      	movs	r2, #3
 800704a:	4013      	ands	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b10      	cmp	r3, #16
 8007052:	d102      	bne.n	800705a <HAL_RCC_OscConfig+0x3e>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d002      	beq.n	8007060 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d10b      	bne.n	8007078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007060:	4bb9      	ldr	r3, [pc, #740]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	029b      	lsls	r3, r3, #10
 8007068:	4013      	ands	r3, r2
 800706a:	d062      	beq.n	8007132 <HAL_RCC_OscConfig+0x116>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d15e      	bne.n	8007132 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e2ce      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	025b      	lsls	r3, r3, #9
 8007080:	429a      	cmp	r2, r3
 8007082:	d107      	bne.n	8007094 <HAL_RCC_OscConfig+0x78>
 8007084:	4bb0      	ldr	r3, [pc, #704]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4baf      	ldr	r3, [pc, #700]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 800708a:	2180      	movs	r1, #128	; 0x80
 800708c:	0249      	lsls	r1, r1, #9
 800708e:	430a      	orrs	r2, r1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e020      	b.n	80070d6 <HAL_RCC_OscConfig+0xba>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	23a0      	movs	r3, #160	; 0xa0
 800709a:	02db      	lsls	r3, r3, #11
 800709c:	429a      	cmp	r2, r3
 800709e:	d10e      	bne.n	80070be <HAL_RCC_OscConfig+0xa2>
 80070a0:	4ba9      	ldr	r3, [pc, #676]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	4ba8      	ldr	r3, [pc, #672]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070a6:	2180      	movs	r1, #128	; 0x80
 80070a8:	02c9      	lsls	r1, r1, #11
 80070aa:	430a      	orrs	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	4ba6      	ldr	r3, [pc, #664]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4ba5      	ldr	r3, [pc, #660]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070b4:	2180      	movs	r1, #128	; 0x80
 80070b6:	0249      	lsls	r1, r1, #9
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e00b      	b.n	80070d6 <HAL_RCC_OscConfig+0xba>
 80070be:	4ba2      	ldr	r3, [pc, #648]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4ba1      	ldr	r3, [pc, #644]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070c4:	49a1      	ldr	r1, [pc, #644]	; (800734c <HAL_RCC_OscConfig+0x330>)
 80070c6:	400a      	ands	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	4b9f      	ldr	r3, [pc, #636]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b9e      	ldr	r3, [pc, #632]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070d0:	499f      	ldr	r1, [pc, #636]	; (8007350 <HAL_RCC_OscConfig+0x334>)
 80070d2:	400a      	ands	r2, r1
 80070d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d014      	beq.n	8007108 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fe f885 	bl	80051ec <HAL_GetTick>
 80070e2:	0003      	movs	r3, r0
 80070e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e8:	f7fe f880 	bl	80051ec <HAL_GetTick>
 80070ec:	0002      	movs	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b64      	cmp	r3, #100	; 0x64
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e28d      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070fa:	4b93      	ldr	r3, [pc, #588]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	2380      	movs	r3, #128	; 0x80
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	4013      	ands	r3, r2
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0xcc>
 8007106:	e015      	b.n	8007134 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007108:	f7fe f870 	bl	80051ec <HAL_GetTick>
 800710c:	0003      	movs	r3, r0
 800710e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007112:	f7fe f86b 	bl	80051ec <HAL_GetTick>
 8007116:	0002      	movs	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b64      	cmp	r3, #100	; 0x64
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e278      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007124:	4b88      	ldr	r3, [pc, #544]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	2380      	movs	r3, #128	; 0x80
 800712a:	029b      	lsls	r3, r3, #10
 800712c:	4013      	ands	r3, r2
 800712e:	d1f0      	bne.n	8007112 <HAL_RCC_OscConfig+0xf6>
 8007130:	e000      	b.n	8007134 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007132:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2202      	movs	r2, #2
 800713a:	4013      	ands	r3, r2
 800713c:	d100      	bne.n	8007140 <HAL_RCC_OscConfig+0x124>
 800713e:	e099      	b.n	8007274 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007140:	4b81      	ldr	r3, [pc, #516]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	2238      	movs	r2, #56	; 0x38
 8007146:	4013      	ands	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800714a:	4b7f      	ldr	r3, [pc, #508]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2203      	movs	r2, #3
 8007150:	4013      	ands	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b10      	cmp	r3, #16
 8007158:	d102      	bne.n	8007160 <HAL_RCC_OscConfig+0x144>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d002      	beq.n	8007166 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d135      	bne.n	80071d2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007166:	4b78      	ldr	r3, [pc, #480]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	2380      	movs	r3, #128	; 0x80
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4013      	ands	r3, r2
 8007170:	d005      	beq.n	800717e <HAL_RCC_OscConfig+0x162>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e24b      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717e:	4b72      	ldr	r3, [pc, #456]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	4a74      	ldr	r2, [pc, #464]	; (8007354 <HAL_RCC_OscConfig+0x338>)
 8007184:	4013      	ands	r3, r2
 8007186:	0019      	movs	r1, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	021a      	lsls	r2, r3, #8
 800718e:	4b6e      	ldr	r3, [pc, #440]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d112      	bne.n	80071c0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800719a:	4b6b      	ldr	r3, [pc, #428]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a6e      	ldr	r2, [pc, #440]	; (8007358 <HAL_RCC_OscConfig+0x33c>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	0019      	movs	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	4b67      	ldr	r3, [pc, #412]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80071aa:	430a      	orrs	r2, r1
 80071ac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80071ae:	4b66      	ldr	r3, [pc, #408]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	0adb      	lsrs	r3, r3, #11
 80071b4:	2207      	movs	r2, #7
 80071b6:	4013      	ands	r3, r2
 80071b8:	4a68      	ldr	r2, [pc, #416]	; (800735c <HAL_RCC_OscConfig+0x340>)
 80071ba:	40da      	lsrs	r2, r3
 80071bc:	4b68      	ldr	r3, [pc, #416]	; (8007360 <HAL_RCC_OscConfig+0x344>)
 80071be:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071c0:	4b68      	ldr	r3, [pc, #416]	; (8007364 <HAL_RCC_OscConfig+0x348>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7fd ffb5 	bl	8005134 <HAL_InitTick>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d051      	beq.n	8007272 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e221      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d030      	beq.n	800723c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071da:	4b5b      	ldr	r3, [pc, #364]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a5e      	ldr	r2, [pc, #376]	; (8007358 <HAL_RCC_OscConfig+0x33c>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	0019      	movs	r1, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	4b57      	ldr	r3, [pc, #348]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80071ea:	430a      	orrs	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80071ee:	4b56      	ldr	r3, [pc, #344]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b55      	ldr	r3, [pc, #340]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80071f4:	2180      	movs	r1, #128	; 0x80
 80071f6:	0049      	lsls	r1, r1, #1
 80071f8:	430a      	orrs	r2, r1
 80071fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fd fff6 	bl	80051ec <HAL_GetTick>
 8007200:	0003      	movs	r3, r0
 8007202:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007206:	f7fd fff1 	bl	80051ec <HAL_GetTick>
 800720a:	0002      	movs	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e1fe      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007218:	4b4b      	ldr	r3, [pc, #300]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	2380      	movs	r3, #128	; 0x80
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4013      	ands	r3, r2
 8007222:	d0f0      	beq.n	8007206 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007224:	4b48      	ldr	r3, [pc, #288]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	4a4a      	ldr	r2, [pc, #296]	; (8007354 <HAL_RCC_OscConfig+0x338>)
 800722a:	4013      	ands	r3, r2
 800722c:	0019      	movs	r1, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	4b44      	ldr	r3, [pc, #272]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	e01b      	b.n	8007274 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800723c:	4b42      	ldr	r3, [pc, #264]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007242:	4949      	ldr	r1, [pc, #292]	; (8007368 <HAL_RCC_OscConfig+0x34c>)
 8007244:	400a      	ands	r2, r1
 8007246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fd ffd0 	bl	80051ec <HAL_GetTick>
 800724c:	0003      	movs	r3, r0
 800724e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007252:	f7fd ffcb 	bl	80051ec <HAL_GetTick>
 8007256:	0002      	movs	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e1d8      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007264:	4b38      	ldr	r3, [pc, #224]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	4013      	ands	r3, r2
 800726e:	d1f0      	bne.n	8007252 <HAL_RCC_OscConfig+0x236>
 8007270:	e000      	b.n	8007274 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007272:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2208      	movs	r2, #8
 800727a:	4013      	ands	r3, r2
 800727c:	d047      	beq.n	800730e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800727e:	4b32      	ldr	r3, [pc, #200]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2238      	movs	r2, #56	; 0x38
 8007284:	4013      	ands	r3, r2
 8007286:	2b18      	cmp	r3, #24
 8007288:	d10a      	bne.n	80072a0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800728a:	4b2f      	ldr	r3, [pc, #188]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	2202      	movs	r2, #2
 8007290:	4013      	ands	r3, r2
 8007292:	d03c      	beq.n	800730e <HAL_RCC_OscConfig+0x2f2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d138      	bne.n	800730e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e1ba      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d019      	beq.n	80072dc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80072a8:	4b27      	ldr	r3, [pc, #156]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80072aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072ac:	4b26      	ldr	r3, [pc, #152]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80072ae:	2101      	movs	r1, #1
 80072b0:	430a      	orrs	r2, r1
 80072b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b4:	f7fd ff9a 	bl	80051ec <HAL_GetTick>
 80072b8:	0003      	movs	r3, r0
 80072ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072be:	f7fd ff95 	bl	80051ec <HAL_GetTick>
 80072c2:	0002      	movs	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e1a2      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072d0:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80072d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d4:	2202      	movs	r2, #2
 80072d6:	4013      	ands	r3, r2
 80072d8:	d0f1      	beq.n	80072be <HAL_RCC_OscConfig+0x2a2>
 80072da:	e018      	b.n	800730e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80072dc:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80072de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072e0:	4b19      	ldr	r3, [pc, #100]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 80072e2:	2101      	movs	r1, #1
 80072e4:	438a      	bics	r2, r1
 80072e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e8:	f7fd ff80 	bl	80051ec <HAL_GetTick>
 80072ec:	0003      	movs	r3, r0
 80072ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072f2:	f7fd ff7b 	bl	80051ec <HAL_GetTick>
 80072f6:	0002      	movs	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e188      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007304:	4b10      	ldr	r3, [pc, #64]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007308:	2202      	movs	r2, #2
 800730a:	4013      	ands	r3, r2
 800730c:	d1f1      	bne.n	80072f2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2204      	movs	r2, #4
 8007314:	4013      	ands	r3, r2
 8007316:	d100      	bne.n	800731a <HAL_RCC_OscConfig+0x2fe>
 8007318:	e0c6      	b.n	80074a8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731a:	231f      	movs	r3, #31
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2238      	movs	r2, #56	; 0x38
 8007328:	4013      	ands	r3, r2
 800732a:	2b20      	cmp	r3, #32
 800732c:	d11e      	bne.n	800736c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RCC_OscConfig+0x32c>)
 8007330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007332:	2202      	movs	r2, #2
 8007334:	4013      	ands	r3, r2
 8007336:	d100      	bne.n	800733a <HAL_RCC_OscConfig+0x31e>
 8007338:	e0b6      	b.n	80074a8 <HAL_RCC_OscConfig+0x48c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d000      	beq.n	8007344 <HAL_RCC_OscConfig+0x328>
 8007342:	e0b1      	b.n	80074a8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e166      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
 8007348:	40021000 	.word	0x40021000
 800734c:	fffeffff 	.word	0xfffeffff
 8007350:	fffbffff 	.word	0xfffbffff
 8007354:	ffff80ff 	.word	0xffff80ff
 8007358:	ffffc7ff 	.word	0xffffc7ff
 800735c:	00f42400 	.word	0x00f42400
 8007360:	20000000 	.word	0x20000000
 8007364:	20000008 	.word	0x20000008
 8007368:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800736c:	4bac      	ldr	r3, [pc, #688]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800736e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007370:	2380      	movs	r3, #128	; 0x80
 8007372:	055b      	lsls	r3, r3, #21
 8007374:	4013      	ands	r3, r2
 8007376:	d101      	bne.n	800737c <HAL_RCC_OscConfig+0x360>
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <HAL_RCC_OscConfig+0x362>
 800737c:	2300      	movs	r3, #0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d011      	beq.n	80073a6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007382:	4ba7      	ldr	r3, [pc, #668]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007386:	4ba6      	ldr	r3, [pc, #664]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	0549      	lsls	r1, r1, #21
 800738c:	430a      	orrs	r2, r1
 800738e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007390:	4ba3      	ldr	r3, [pc, #652]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007394:	2380      	movs	r3, #128	; 0x80
 8007396:	055b      	lsls	r3, r3, #21
 8007398:	4013      	ands	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800739e:	231f      	movs	r3, #31
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	2201      	movs	r2, #1
 80073a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a6:	4b9f      	ldr	r3, [pc, #636]	; (8007624 <HAL_RCC_OscConfig+0x608>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	2380      	movs	r3, #128	; 0x80
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	4013      	ands	r3, r2
 80073b0:	d11a      	bne.n	80073e8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073b2:	4b9c      	ldr	r3, [pc, #624]	; (8007624 <HAL_RCC_OscConfig+0x608>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b9b      	ldr	r3, [pc, #620]	; (8007624 <HAL_RCC_OscConfig+0x608>)
 80073b8:	2180      	movs	r1, #128	; 0x80
 80073ba:	0049      	lsls	r1, r1, #1
 80073bc:	430a      	orrs	r2, r1
 80073be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80073c0:	f7fd ff14 	bl	80051ec <HAL_GetTick>
 80073c4:	0003      	movs	r3, r0
 80073c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ca:	f7fd ff0f 	bl	80051ec <HAL_GetTick>
 80073ce:	0002      	movs	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e11c      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073dc:	4b91      	ldr	r3, [pc, #580]	; (8007624 <HAL_RCC_OscConfig+0x608>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	2380      	movs	r3, #128	; 0x80
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4013      	ands	r3, r2
 80073e6:	d0f0      	beq.n	80073ca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d106      	bne.n	80073fe <HAL_RCC_OscConfig+0x3e2>
 80073f0:	4b8b      	ldr	r3, [pc, #556]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80073f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073f4:	4b8a      	ldr	r3, [pc, #552]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80073f6:	2101      	movs	r1, #1
 80073f8:	430a      	orrs	r2, r1
 80073fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80073fc:	e01c      	b.n	8007438 <HAL_RCC_OscConfig+0x41c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b05      	cmp	r3, #5
 8007404:	d10c      	bne.n	8007420 <HAL_RCC_OscConfig+0x404>
 8007406:	4b86      	ldr	r3, [pc, #536]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800740a:	4b85      	ldr	r3, [pc, #532]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800740c:	2104      	movs	r1, #4
 800740e:	430a      	orrs	r2, r1
 8007410:	65da      	str	r2, [r3, #92]	; 0x5c
 8007412:	4b83      	ldr	r3, [pc, #524]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007416:	4b82      	ldr	r3, [pc, #520]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007418:	2101      	movs	r1, #1
 800741a:	430a      	orrs	r2, r1
 800741c:	65da      	str	r2, [r3, #92]	; 0x5c
 800741e:	e00b      	b.n	8007438 <HAL_RCC_OscConfig+0x41c>
 8007420:	4b7f      	ldr	r3, [pc, #508]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007424:	4b7e      	ldr	r3, [pc, #504]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007426:	2101      	movs	r1, #1
 8007428:	438a      	bics	r2, r1
 800742a:	65da      	str	r2, [r3, #92]	; 0x5c
 800742c:	4b7c      	ldr	r3, [pc, #496]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800742e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007430:	4b7b      	ldr	r3, [pc, #492]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007432:	2104      	movs	r1, #4
 8007434:	438a      	bics	r2, r1
 8007436:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d014      	beq.n	800746a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007440:	f7fd fed4 	bl	80051ec <HAL_GetTick>
 8007444:	0003      	movs	r3, r0
 8007446:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007448:	e009      	b.n	800745e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744a:	f7fd fecf 	bl	80051ec <HAL_GetTick>
 800744e:	0002      	movs	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	4a74      	ldr	r2, [pc, #464]	; (8007628 <HAL_RCC_OscConfig+0x60c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e0db      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800745e:	4b70      	ldr	r3, [pc, #448]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007462:	2202      	movs	r2, #2
 8007464:	4013      	ands	r3, r2
 8007466:	d0f0      	beq.n	800744a <HAL_RCC_OscConfig+0x42e>
 8007468:	e013      	b.n	8007492 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746a:	f7fd febf 	bl	80051ec <HAL_GetTick>
 800746e:	0003      	movs	r3, r0
 8007470:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007472:	e009      	b.n	8007488 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007474:	f7fd feba 	bl	80051ec <HAL_GetTick>
 8007478:	0002      	movs	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	4a6a      	ldr	r2, [pc, #424]	; (8007628 <HAL_RCC_OscConfig+0x60c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e0c6      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007488:	4b65      	ldr	r3, [pc, #404]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800748a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748c:	2202      	movs	r2, #2
 800748e:	4013      	ands	r3, r2
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007492:	231f      	movs	r3, #31
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d105      	bne.n	80074a8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800749c:	4b60      	ldr	r3, [pc, #384]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800749e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a0:	4b5f      	ldr	r3, [pc, #380]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80074a2:	4962      	ldr	r1, [pc, #392]	; (800762c <HAL_RCC_OscConfig+0x610>)
 80074a4:	400a      	ands	r2, r1
 80074a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d100      	bne.n	80074b2 <HAL_RCC_OscConfig+0x496>
 80074b0:	e0b0      	b.n	8007614 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074b2:	4b5b      	ldr	r3, [pc, #364]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2238      	movs	r2, #56	; 0x38
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b10      	cmp	r3, #16
 80074bc:	d100      	bne.n	80074c0 <HAL_RCC_OscConfig+0x4a4>
 80074be:	e078      	b.n	80075b2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d153      	bne.n	8007570 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c8:	4b55      	ldr	r3, [pc, #340]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	4b54      	ldr	r3, [pc, #336]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80074ce:	4958      	ldr	r1, [pc, #352]	; (8007630 <HAL_RCC_OscConfig+0x614>)
 80074d0:	400a      	ands	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d4:	f7fd fe8a 	bl	80051ec <HAL_GetTick>
 80074d8:	0003      	movs	r3, r0
 80074da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074dc:	e008      	b.n	80074f0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074de:	f7fd fe85 	bl	80051ec <HAL_GetTick>
 80074e2:	0002      	movs	r2, r0
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e092      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074f0:	4b4b      	ldr	r3, [pc, #300]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	049b      	lsls	r3, r3, #18
 80074f8:	4013      	ands	r3, r2
 80074fa:	d1f0      	bne.n	80074de <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074fc:	4b48      	ldr	r3, [pc, #288]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4a4c      	ldr	r2, [pc, #304]	; (8007634 <HAL_RCC_OscConfig+0x618>)
 8007502:	4013      	ands	r3, r2
 8007504:	0019      	movs	r1, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	431a      	orrs	r2, r3
 8007524:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007526:	430a      	orrs	r2, r1
 8007528:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800752a:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b3c      	ldr	r3, [pc, #240]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	0449      	lsls	r1, r1, #17
 8007534:	430a      	orrs	r2, r1
 8007536:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007538:	4b39      	ldr	r3, [pc, #228]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	4b38      	ldr	r3, [pc, #224]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800753e:	2180      	movs	r1, #128	; 0x80
 8007540:	0549      	lsls	r1, r1, #21
 8007542:	430a      	orrs	r2, r1
 8007544:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007546:	f7fd fe51 	bl	80051ec <HAL_GetTick>
 800754a:	0003      	movs	r3, r0
 800754c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007550:	f7fd fe4c 	bl	80051ec <HAL_GetTick>
 8007554:	0002      	movs	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e059      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007562:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	2380      	movs	r3, #128	; 0x80
 8007568:	049b      	lsls	r3, r3, #18
 800756a:	4013      	ands	r3, r2
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0x534>
 800756e:	e051      	b.n	8007614 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007570:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4b2a      	ldr	r3, [pc, #168]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 8007576:	492e      	ldr	r1, [pc, #184]	; (8007630 <HAL_RCC_OscConfig+0x614>)
 8007578:	400a      	ands	r2, r1
 800757a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757c:	f7fd fe36 	bl	80051ec <HAL_GetTick>
 8007580:	0003      	movs	r3, r0
 8007582:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007584:	e008      	b.n	8007598 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007586:	f7fd fe31 	bl	80051ec <HAL_GetTick>
 800758a:	0002      	movs	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e03e      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007598:	4b21      	ldr	r3, [pc, #132]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	2380      	movs	r3, #128	; 0x80
 800759e:	049b      	lsls	r3, r3, #18
 80075a0:	4013      	ands	r3, r2
 80075a2:	d1f0      	bne.n	8007586 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80075a4:	4b1e      	ldr	r3, [pc, #120]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80075aa:	4923      	ldr	r1, [pc, #140]	; (8007638 <HAL_RCC_OscConfig+0x61c>)
 80075ac:	400a      	ands	r2, r1
 80075ae:	60da      	str	r2, [r3, #12]
 80075b0:	e030      	b.n	8007614 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e02b      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80075be:	4b18      	ldr	r3, [pc, #96]	; (8007620 <HAL_RCC_OscConfig+0x604>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2203      	movs	r2, #3
 80075c8:	401a      	ands	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d11e      	bne.n	8007610 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2270      	movs	r2, #112	; 0x70
 80075d6:	401a      	ands	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075dc:	429a      	cmp	r2, r3
 80075de:	d117      	bne.n	8007610 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	23fe      	movs	r3, #254	; 0xfe
 80075e4:	01db      	lsls	r3, r3, #7
 80075e6:	401a      	ands	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d10e      	bne.n	8007610 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	23f8      	movs	r3, #248	; 0xf8
 80075f6:	039b      	lsls	r3, r3, #14
 80075f8:	401a      	ands	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075fe:	429a      	cmp	r2, r3
 8007600:	d106      	bne.n	8007610 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	0f5b      	lsrs	r3, r3, #29
 8007606:	075a      	lsls	r2, r3, #29
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800760c:	429a      	cmp	r2, r3
 800760e:	d001      	beq.n	8007614 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	0018      	movs	r0, r3
 8007618:	46bd      	mov	sp, r7
 800761a:	b008      	add	sp, #32
 800761c:	bd80      	pop	{r7, pc}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	40021000 	.word	0x40021000
 8007624:	40007000 	.word	0x40007000
 8007628:	00001388 	.word	0x00001388
 800762c:	efffffff 	.word	0xefffffff
 8007630:	feffffff 	.word	0xfeffffff
 8007634:	1fc1808c 	.word	0x1fc1808c
 8007638:	effefffc 	.word	0xeffefffc

0800763c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0e9      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007650:	4b76      	ldr	r3, [pc, #472]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2207      	movs	r2, #7
 8007656:	4013      	ands	r3, r2
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d91e      	bls.n	800769c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800765e:	4b73      	ldr	r3, [pc, #460]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2207      	movs	r2, #7
 8007664:	4393      	bics	r3, r2
 8007666:	0019      	movs	r1, r3
 8007668:	4b70      	ldr	r3, [pc, #448]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007670:	f7fd fdbc 	bl	80051ec <HAL_GetTick>
 8007674:	0003      	movs	r3, r0
 8007676:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007678:	e009      	b.n	800768e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800767a:	f7fd fdb7 	bl	80051ec <HAL_GetTick>
 800767e:	0002      	movs	r2, r0
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	4a6a      	ldr	r2, [pc, #424]	; (8007830 <HAL_RCC_ClockConfig+0x1f4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d901      	bls.n	800768e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e0ca      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800768e:	4b67      	ldr	r3, [pc, #412]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2207      	movs	r2, #7
 8007694:	4013      	ands	r3, r2
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d1ee      	bne.n	800767a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2202      	movs	r2, #2
 80076a2:	4013      	ands	r3, r2
 80076a4:	d015      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2204      	movs	r2, #4
 80076ac:	4013      	ands	r3, r2
 80076ae:	d006      	beq.n	80076be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80076b0:	4b60      	ldr	r3, [pc, #384]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	4b5f      	ldr	r3, [pc, #380]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80076b6:	21e0      	movs	r1, #224	; 0xe0
 80076b8:	01c9      	lsls	r1, r1, #7
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076be:	4b5d      	ldr	r3, [pc, #372]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4a5d      	ldr	r2, [pc, #372]	; (8007838 <HAL_RCC_ClockConfig+0x1fc>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	0019      	movs	r1, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	4b59      	ldr	r3, [pc, #356]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80076ce:	430a      	orrs	r2, r1
 80076d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2201      	movs	r2, #1
 80076d8:	4013      	ands	r3, r2
 80076da:	d057      	beq.n	800778c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d107      	bne.n	80076f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076e4:	4b53      	ldr	r3, [pc, #332]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	029b      	lsls	r3, r3, #10
 80076ec:	4013      	ands	r3, r2
 80076ee:	d12b      	bne.n	8007748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e097      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d107      	bne.n	800770c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076fc:	4b4d      	ldr	r3, [pc, #308]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	049b      	lsls	r3, r3, #18
 8007704:	4013      	ands	r3, r2
 8007706:	d11f      	bne.n	8007748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e08b      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d107      	bne.n	8007724 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007714:	4b47      	ldr	r3, [pc, #284]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4013      	ands	r3, r2
 800771e:	d113      	bne.n	8007748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e07f      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d106      	bne.n	800773a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800772c:	4b41      	ldr	r3, [pc, #260]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 800772e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007730:	2202      	movs	r2, #2
 8007732:	4013      	ands	r3, r2
 8007734:	d108      	bne.n	8007748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e074      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800773a:	4b3e      	ldr	r3, [pc, #248]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 800773c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773e:	2202      	movs	r2, #2
 8007740:	4013      	ands	r3, r2
 8007742:	d101      	bne.n	8007748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e06d      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007748:	4b3a      	ldr	r3, [pc, #232]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2207      	movs	r2, #7
 800774e:	4393      	bics	r3, r2
 8007750:	0019      	movs	r1, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	4b37      	ldr	r3, [pc, #220]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 8007758:	430a      	orrs	r2, r1
 800775a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775c:	f7fd fd46 	bl	80051ec <HAL_GetTick>
 8007760:	0003      	movs	r3, r0
 8007762:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007764:	e009      	b.n	800777a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007766:	f7fd fd41 	bl	80051ec <HAL_GetTick>
 800776a:	0002      	movs	r2, r0
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	4a2f      	ldr	r2, [pc, #188]	; (8007830 <HAL_RCC_ClockConfig+0x1f4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d901      	bls.n	800777a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e054      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777a:	4b2e      	ldr	r3, [pc, #184]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2238      	movs	r2, #56	; 0x38
 8007780:	401a      	ands	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	429a      	cmp	r2, r3
 800778a:	d1ec      	bne.n	8007766 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800778c:	4b27      	ldr	r3, [pc, #156]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2207      	movs	r2, #7
 8007792:	4013      	ands	r3, r2
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d21e      	bcs.n	80077d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2207      	movs	r2, #7
 80077a0:	4393      	bics	r3, r2
 80077a2:	0019      	movs	r1, r3
 80077a4:	4b21      	ldr	r3, [pc, #132]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077ac:	f7fd fd1e 	bl	80051ec <HAL_GetTick>
 80077b0:	0003      	movs	r3, r0
 80077b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077b4:	e009      	b.n	80077ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b6:	f7fd fd19 	bl	80051ec <HAL_GetTick>
 80077ba:	0002      	movs	r2, r0
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <HAL_RCC_ClockConfig+0x1f4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e02c      	b.n	8007824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <HAL_RCC_ClockConfig+0x1f0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2207      	movs	r2, #7
 80077d0:	4013      	ands	r3, r2
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d1ee      	bne.n	80077b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2204      	movs	r2, #4
 80077de:	4013      	ands	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	4a15      	ldr	r2, [pc, #84]	; (800783c <HAL_RCC_ClockConfig+0x200>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	0019      	movs	r1, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	4b10      	ldr	r3, [pc, #64]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80077f2:	430a      	orrs	r2, r1
 80077f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80077f6:	f000 f829 	bl	800784c <HAL_RCC_GetSysClockFreq>
 80077fa:	0001      	movs	r1, r0
 80077fc:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <HAL_RCC_ClockConfig+0x1f8>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	0a1b      	lsrs	r3, r3, #8
 8007802:	220f      	movs	r2, #15
 8007804:	401a      	ands	r2, r3
 8007806:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <HAL_RCC_ClockConfig+0x204>)
 8007808:	0092      	lsls	r2, r2, #2
 800780a:	58d3      	ldr	r3, [r2, r3]
 800780c:	221f      	movs	r2, #31
 800780e:	4013      	ands	r3, r2
 8007810:	000a      	movs	r2, r1
 8007812:	40da      	lsrs	r2, r3
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <HAL_RCC_ClockConfig+0x208>)
 8007816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007818:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <HAL_RCC_ClockConfig+0x20c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	0018      	movs	r0, r3
 800781e:	f7fd fc89 	bl	8005134 <HAL_InitTick>
 8007822:	0003      	movs	r3, r0
}
 8007824:	0018      	movs	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	b004      	add	sp, #16
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40022000 	.word	0x40022000
 8007830:	00001388 	.word	0x00001388
 8007834:	40021000 	.word	0x40021000
 8007838:	fffff0ff 	.word	0xfffff0ff
 800783c:	ffff8fff 	.word	0xffff8fff
 8007840:	08018158 	.word	0x08018158
 8007844:	20000000 	.word	0x20000000
 8007848:	20000008 	.word	0x20000008

0800784c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007852:	4b3c      	ldr	r3, [pc, #240]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2238      	movs	r2, #56	; 0x38
 8007858:	4013      	ands	r3, r2
 800785a:	d10f      	bne.n	800787c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800785c:	4b39      	ldr	r3, [pc, #228]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	0adb      	lsrs	r3, r3, #11
 8007862:	2207      	movs	r2, #7
 8007864:	4013      	ands	r3, r2
 8007866:	2201      	movs	r2, #1
 8007868:	409a      	lsls	r2, r3
 800786a:	0013      	movs	r3, r2
 800786c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	4835      	ldr	r0, [pc, #212]	; (8007948 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007872:	f7f8 fc6b 	bl	800014c <__udivsi3>
 8007876:	0003      	movs	r3, r0
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	e05d      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800787c:	4b31      	ldr	r3, [pc, #196]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2238      	movs	r2, #56	; 0x38
 8007882:	4013      	ands	r3, r2
 8007884:	2b08      	cmp	r3, #8
 8007886:	d102      	bne.n	800788e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007888:	4b30      	ldr	r3, [pc, #192]	; (800794c <HAL_RCC_GetSysClockFreq+0x100>)
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	e054      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800788e:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2238      	movs	r2, #56	; 0x38
 8007894:	4013      	ands	r3, r2
 8007896:	2b10      	cmp	r3, #16
 8007898:	d138      	bne.n	800790c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800789a:	4b2a      	ldr	r3, [pc, #168]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2203      	movs	r2, #3
 80078a0:	4013      	ands	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078a4:	4b27      	ldr	r3, [pc, #156]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	091b      	lsrs	r3, r3, #4
 80078aa:	2207      	movs	r2, #7
 80078ac:	4013      	ands	r3, r2
 80078ae:	3301      	adds	r3, #1
 80078b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d10d      	bne.n	80078d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	4824      	ldr	r0, [pc, #144]	; (800794c <HAL_RCC_GetSysClockFreq+0x100>)
 80078bc:	f7f8 fc46 	bl	800014c <__udivsi3>
 80078c0:	0003      	movs	r3, r0
 80078c2:	0019      	movs	r1, r3
 80078c4:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	227f      	movs	r2, #127	; 0x7f
 80078cc:	4013      	ands	r3, r2
 80078ce:	434b      	muls	r3, r1
 80078d0:	617b      	str	r3, [r7, #20]
        break;
 80078d2:	e00d      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	481c      	ldr	r0, [pc, #112]	; (8007948 <HAL_RCC_GetSysClockFreq+0xfc>)
 80078d8:	f7f8 fc38 	bl	800014c <__udivsi3>
 80078dc:	0003      	movs	r3, r0
 80078de:	0019      	movs	r1, r3
 80078e0:	4b18      	ldr	r3, [pc, #96]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	0a1b      	lsrs	r3, r3, #8
 80078e6:	227f      	movs	r2, #127	; 0x7f
 80078e8:	4013      	ands	r3, r2
 80078ea:	434b      	muls	r3, r1
 80078ec:	617b      	str	r3, [r7, #20]
        break;
 80078ee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80078f0:	4b14      	ldr	r3, [pc, #80]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	0f5b      	lsrs	r3, r3, #29
 80078f6:	2207      	movs	r2, #7
 80078f8:	4013      	ands	r3, r2
 80078fa:	3301      	adds	r3, #1
 80078fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	6978      	ldr	r0, [r7, #20]
 8007902:	f7f8 fc23 	bl	800014c <__udivsi3>
 8007906:	0003      	movs	r3, r0
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	e015      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2238      	movs	r2, #56	; 0x38
 8007912:	4013      	ands	r3, r2
 8007914:	2b20      	cmp	r3, #32
 8007916:	d103      	bne.n	8007920 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007918:	2380      	movs	r3, #128	; 0x80
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	e00b      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007920:	4b08      	ldr	r3, [pc, #32]	; (8007944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2238      	movs	r2, #56	; 0x38
 8007926:	4013      	ands	r3, r2
 8007928:	2b18      	cmp	r3, #24
 800792a:	d103      	bne.n	8007934 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800792c:	23fa      	movs	r3, #250	; 0xfa
 800792e:	01db      	lsls	r3, r3, #7
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	e001      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007938:	693b      	ldr	r3, [r7, #16]
}
 800793a:	0018      	movs	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	b006      	add	sp, #24
 8007940:	bd80      	pop	{r7, pc}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	40021000 	.word	0x40021000
 8007948:	00f42400 	.word	0x00f42400
 800794c:	016e3600 	.word	0x016e3600

08007950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007954:	4b02      	ldr	r3, [pc, #8]	; (8007960 <HAL_RCC_GetHCLKFreq+0x10>)
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	0018      	movs	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	20000000 	.word	0x20000000

08007964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007964:	b5b0      	push	{r4, r5, r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007968:	f7ff fff2 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 800796c:	0004      	movs	r4, r0
 800796e:	f7ff fb49 	bl	8007004 <LL_RCC_GetAPB1Prescaler>
 8007972:	0003      	movs	r3, r0
 8007974:	0b1a      	lsrs	r2, r3, #12
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007978:	0092      	lsls	r2, r2, #2
 800797a:	58d3      	ldr	r3, [r2, r3]
 800797c:	221f      	movs	r2, #31
 800797e:	4013      	ands	r3, r2
 8007980:	40dc      	lsrs	r4, r3
 8007982:	0023      	movs	r3, r4
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	bdb0      	pop	{r4, r5, r7, pc}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	08018198 	.word	0x08018198

08007990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007998:	2313      	movs	r3, #19
 800799a:	18fb      	adds	r3, r7, r3
 800799c:	2200      	movs	r2, #0
 800799e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079a0:	2312      	movs	r3, #18
 80079a2:	18fb      	adds	r3, r7, r3
 80079a4:	2200      	movs	r2, #0
 80079a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	2380      	movs	r3, #128	; 0x80
 80079ae:	029b      	lsls	r3, r3, #10
 80079b0:	4013      	ands	r3, r2
 80079b2:	d100      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80079b4:	e0a3      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079b6:	2011      	movs	r0, #17
 80079b8:	183b      	adds	r3, r7, r0
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079be:	4b86      	ldr	r3, [pc, #536]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c2:	2380      	movs	r3, #128	; 0x80
 80079c4:	055b      	lsls	r3, r3, #21
 80079c6:	4013      	ands	r3, r2
 80079c8:	d110      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ca:	4b83      	ldr	r3, [pc, #524]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ce:	4b82      	ldr	r3, [pc, #520]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079d0:	2180      	movs	r1, #128	; 0x80
 80079d2:	0549      	lsls	r1, r1, #21
 80079d4:	430a      	orrs	r2, r1
 80079d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80079d8:	4b7f      	ldr	r3, [pc, #508]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079dc:	2380      	movs	r3, #128	; 0x80
 80079de:	055b      	lsls	r3, r3, #21
 80079e0:	4013      	ands	r3, r2
 80079e2:	60bb      	str	r3, [r7, #8]
 80079e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079e6:	183b      	adds	r3, r7, r0
 80079e8:	2201      	movs	r2, #1
 80079ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079ec:	4b7b      	ldr	r3, [pc, #492]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b7a      	ldr	r3, [pc, #488]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	0049      	lsls	r1, r1, #1
 80079f6:	430a      	orrs	r2, r1
 80079f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079fa:	f7fd fbf7 	bl	80051ec <HAL_GetTick>
 80079fe:	0003      	movs	r3, r0
 8007a00:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a02:	e00b      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a04:	f7fd fbf2 	bl	80051ec <HAL_GetTick>
 8007a08:	0002      	movs	r2, r0
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d904      	bls.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007a12:	2313      	movs	r3, #19
 8007a14:	18fb      	adds	r3, r7, r3
 8007a16:	2203      	movs	r2, #3
 8007a18:	701a      	strb	r2, [r3, #0]
        break;
 8007a1a:	e005      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a1c:	4b6f      	ldr	r3, [pc, #444]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4013      	ands	r3, r2
 8007a26:	d0ed      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007a28:	2313      	movs	r3, #19
 8007a2a:	18fb      	adds	r3, r7, r3
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d154      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a32:	4b69      	ldr	r3, [pc, #420]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a36:	23c0      	movs	r3, #192	; 0xc0
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d019      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d014      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a4e:	4b62      	ldr	r3, [pc, #392]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a52:	4a63      	ldr	r2, [pc, #396]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a58:	4b5f      	ldr	r3, [pc, #380]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a5c:	4b5e      	ldr	r3, [pc, #376]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a5e:	2180      	movs	r1, #128	; 0x80
 8007a60:	0249      	lsls	r1, r1, #9
 8007a62:	430a      	orrs	r2, r1
 8007a64:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a66:	4b5c      	ldr	r3, [pc, #368]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a6a:	4b5b      	ldr	r3, [pc, #364]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a6c:	495d      	ldr	r1, [pc, #372]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a6e:	400a      	ands	r2, r1
 8007a70:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a72:	4b59      	ldr	r3, [pc, #356]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	d016      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a80:	f7fd fbb4 	bl	80051ec <HAL_GetTick>
 8007a84:	0003      	movs	r3, r0
 8007a86:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a88:	e00c      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a8a:	f7fd fbaf 	bl	80051ec <HAL_GetTick>
 8007a8e:	0002      	movs	r2, r0
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	4a54      	ldr	r2, [pc, #336]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d904      	bls.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007a9a:	2313      	movs	r3, #19
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	701a      	strb	r2, [r3, #0]
            break;
 8007aa2:	e004      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aa4:	4b4c      	ldr	r3, [pc, #304]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	4013      	ands	r3, r2
 8007aac:	d0ed      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007aae:	2313      	movs	r3, #19
 8007ab0:	18fb      	adds	r3, r7, r3
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ab8:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abc:	4a48      	ldr	r2, [pc, #288]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	0019      	movs	r1, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	4b44      	ldr	r3, [pc, #272]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	65da      	str	r2, [r3, #92]	; 0x5c
 8007acc:	e00c      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ace:	2312      	movs	r3, #18
 8007ad0:	18fb      	adds	r3, r7, r3
 8007ad2:	2213      	movs	r2, #19
 8007ad4:	18ba      	adds	r2, r7, r2
 8007ad6:	7812      	ldrb	r2, [r2, #0]
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e005      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	2312      	movs	r3, #18
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2213      	movs	r2, #19
 8007ae2:	18ba      	adds	r2, r7, r2
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ae8:	2311      	movs	r3, #17
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d105      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af2:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af6:	4b38      	ldr	r3, [pc, #224]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007af8:	493c      	ldr	r1, [pc, #240]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007afa:	400a      	ands	r2, r1
 8007afc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2201      	movs	r2, #1
 8007b04:	4013      	ands	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b08:	4b33      	ldr	r3, [pc, #204]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	4393      	bics	r3, r2
 8007b10:	0019      	movs	r1, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	4b30      	ldr	r3, [pc, #192]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2202      	movs	r2, #2
 8007b22:	4013      	ands	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b26:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	220c      	movs	r2, #12
 8007b2c:	4393      	bics	r3, r2
 8007b2e:	0019      	movs	r1, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	4b28      	ldr	r3, [pc, #160]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b36:	430a      	orrs	r2, r1
 8007b38:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	4013      	ands	r3, r2
 8007b42:	d009      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b44:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b48:	4a29      	ldr	r2, [pc, #164]	; (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	0019      	movs	r1, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b54:	430a      	orrs	r2, r1
 8007b56:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	2380      	movs	r3, #128	; 0x80
 8007b5e:	01db      	lsls	r3, r3, #7
 8007b60:	4013      	ands	r3, r2
 8007b62:	d015      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b64:	4b1c      	ldr	r3, [pc, #112]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	0899      	lsrs	r1, r3, #2
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	695a      	ldr	r2, [r3, #20]
 8007b70:	4b19      	ldr	r3, [pc, #100]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b72:	430a      	orrs	r2, r1
 8007b74:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695a      	ldr	r2, [r3, #20]
 8007b7a:	2380      	movs	r3, #128	; 0x80
 8007b7c:	05db      	lsls	r3, r3, #23
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d106      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b88:	2180      	movs	r1, #128	; 0x80
 8007b8a:	0249      	lsls	r1, r1, #9
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	2380      	movs	r3, #128	; 0x80
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	4013      	ands	r3, r2
 8007b9a:	d016      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	0019      	movs	r1, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bac:	430a      	orrs	r2, r1
 8007bae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	2380      	movs	r3, #128	; 0x80
 8007bb6:	01db      	lsls	r3, r3, #7
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d106      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bc2:	2180      	movs	r1, #128	; 0x80
 8007bc4:	0249      	lsls	r1, r1, #9
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007bca:	2312      	movs	r3, #18
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	781b      	ldrb	r3, [r3, #0]
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	b006      	add	sp, #24
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	40007000 	.word	0x40007000
 8007be0:	fffffcff 	.word	0xfffffcff
 8007be4:	fffeffff 	.word	0xfffeffff
 8007be8:	00001388 	.word	0x00001388
 8007bec:	efffffff 	.word	0xefffffff
 8007bf0:	ffffcfff 	.word	0xffffcfff
 8007bf4:	ffff3fff 	.word	0xffff3fff

08007bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e0a8      	b.n	8007d5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	2382      	movs	r3, #130	; 0x82
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d009      	beq.n	8007c32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	61da      	str	r2, [r3, #28]
 8007c24:	e005      	b.n	8007c32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	225d      	movs	r2, #93	; 0x5d
 8007c3c:	5c9b      	ldrb	r3, [r3, r2]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d107      	bne.n	8007c54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	225c      	movs	r2, #92	; 0x5c
 8007c48:	2100      	movs	r1, #0
 8007c4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f7fb feba 	bl	80039c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	225d      	movs	r2, #93	; 0x5d
 8007c58:	2102      	movs	r1, #2
 8007c5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2140      	movs	r1, #64	; 0x40
 8007c68:	438a      	bics	r2, r1
 8007c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	23e0      	movs	r3, #224	; 0xe0
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d902      	bls.n	8007c7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e002      	b.n	8007c84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c7e:	2380      	movs	r3, #128	; 0x80
 8007c80:	015b      	lsls	r3, r3, #5
 8007c82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	23f0      	movs	r3, #240	; 0xf0
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d008      	beq.n	8007ca2 <HAL_SPI_Init+0xaa>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	23e0      	movs	r3, #224	; 0xe0
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d002      	beq.n	8007ca2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	2382      	movs	r3, #130	; 0x82
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	401a      	ands	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6899      	ldr	r1, [r3, #8]
 8007cb0:	2384      	movs	r3, #132	; 0x84
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	400b      	ands	r3, r1
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2102      	movs	r1, #2
 8007cbe:	400b      	ands	r3, r1
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	400b      	ands	r3, r1
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6999      	ldr	r1, [r3, #24]
 8007cd0:	2380      	movs	r3, #128	; 0x80
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	400b      	ands	r3, r1
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	2138      	movs	r1, #56	; 0x38
 8007cde:	400b      	ands	r3, r1
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	2180      	movs	r1, #128	; 0x80
 8007ce8:	400b      	ands	r3, r1
 8007cea:	431a      	orrs	r2, r3
 8007cec:	0011      	movs	r1, r2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cf2:	2380      	movs	r3, #128	; 0x80
 8007cf4:	019b      	lsls	r3, r3, #6
 8007cf6:	401a      	ands	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	2204      	movs	r2, #4
 8007d08:	401a      	ands	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2110      	movs	r1, #16
 8007d10:	400b      	ands	r3, r1
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d18:	2108      	movs	r1, #8
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68d9      	ldr	r1, [r3, #12]
 8007d22:	23f0      	movs	r3, #240	; 0xf0
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	400b      	ands	r3, r1
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	0011      	movs	r1, r2
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	2380      	movs	r3, #128	; 0x80
 8007d30:	015b      	lsls	r3, r3, #5
 8007d32:	401a      	ands	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69da      	ldr	r2, [r3, #28]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4907      	ldr	r1, [pc, #28]	; (8007d64 <HAL_SPI_Init+0x16c>)
 8007d48:	400a      	ands	r2, r1
 8007d4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	225d      	movs	r2, #93	; 0x5d
 8007d56:	2101      	movs	r1, #1
 8007d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	b004      	add	sp, #16
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	fffff7ff 	.word	0xfffff7ff

08007d68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	1dbb      	adds	r3, r7, #6
 8007d76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d78:	231f      	movs	r3, #31
 8007d7a:	18fb      	adds	r3, r7, r3
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	225c      	movs	r2, #92	; 0x5c
 8007d84:	5c9b      	ldrb	r3, [r3, r2]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_SPI_Transmit+0x26>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e140      	b.n	8008010 <HAL_SPI_Transmit+0x2a8>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	225c      	movs	r2, #92	; 0x5c
 8007d92:	2101      	movs	r1, #1
 8007d94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d96:	f7fd fa29 	bl	80051ec <HAL_GetTick>
 8007d9a:	0003      	movs	r3, r0
 8007d9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007d9e:	2316      	movs	r3, #22
 8007da0:	18fb      	adds	r3, r7, r3
 8007da2:	1dba      	adds	r2, r7, #6
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	225d      	movs	r2, #93	; 0x5d
 8007dac:	5c9b      	ldrb	r3, [r3, r2]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d004      	beq.n	8007dbe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007db4:	231f      	movs	r3, #31
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	2202      	movs	r2, #2
 8007dba:	701a      	strb	r2, [r3, #0]
    goto error;
 8007dbc:	e11d      	b.n	8007ffa <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_SPI_Transmit+0x64>
 8007dc4:	1dbb      	adds	r3, r7, #6
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007dcc:	231f      	movs	r3, #31
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8007dd4:	e111      	b.n	8007ffa <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	225d      	movs	r2, #93	; 0x5d
 8007dda:	2103      	movs	r1, #3
 8007ddc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	1dba      	adds	r2, r7, #6
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1dba      	adds	r2, r7, #6
 8007df6:	8812      	ldrh	r2, [r2, #0]
 8007df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2244      	movs	r2, #68	; 0x44
 8007e04:	2100      	movs	r1, #0
 8007e06:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2246      	movs	r2, #70	; 0x46
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	2380      	movs	r3, #128	; 0x80
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d110      	bne.n	8007e4a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2140      	movs	r1, #64	; 0x40
 8007e34:	438a      	bics	r2, r1
 8007e36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2180      	movs	r1, #128	; 0x80
 8007e44:	01c9      	lsls	r1, r1, #7
 8007e46:	430a      	orrs	r2, r1
 8007e48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2240      	movs	r2, #64	; 0x40
 8007e52:	4013      	ands	r3, r2
 8007e54:	2b40      	cmp	r3, #64	; 0x40
 8007e56:	d007      	beq.n	8007e68 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2140      	movs	r1, #64	; 0x40
 8007e64:	430a      	orrs	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	23e0      	movs	r3, #224	; 0xe0
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d94e      	bls.n	8007f12 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d004      	beq.n	8007e86 <HAL_SPI_Transmit+0x11e>
 8007e7c:	2316      	movs	r3, #22
 8007e7e:	18fb      	adds	r3, r7, r3
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d13f      	bne.n	8007f06 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	881a      	ldrh	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	1c9a      	adds	r2, r3, #2
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007eaa:	e02c      	b.n	8007f06 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d112      	bne.n	8007ee0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	881a      	ldrh	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	1c9a      	adds	r2, r3, #2
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ede:	e012      	b.n	8007f06 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ee0:	f7fd f984 	bl	80051ec <HAL_GetTick>
 8007ee4:	0002      	movs	r2, r0
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d802      	bhi.n	8007ef6 <HAL_SPI_Transmit+0x18e>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	d102      	bne.n	8007efc <HAL_SPI_Transmit+0x194>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d104      	bne.n	8007f06 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007efc:	231f      	movs	r3, #31
 8007efe:	18fb      	adds	r3, r7, r3
 8007f00:	2203      	movs	r2, #3
 8007f02:	701a      	strb	r2, [r3, #0]
          goto error;
 8007f04:	e079      	b.n	8007ffa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1cd      	bne.n	8007eac <HAL_SPI_Transmit+0x144>
 8007f10:	e04f      	b.n	8007fb2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <HAL_SPI_Transmit+0x1bc>
 8007f1a:	2316      	movs	r3, #22
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d141      	bne.n	8007fa8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007f4a:	e02d      	b.n	8007fa8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2202      	movs	r2, #2
 8007f54:	4013      	ands	r3, r2
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d113      	bne.n	8007f82 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	330c      	adds	r3, #12
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f80:	e012      	b.n	8007fa8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f82:	f7fd f933 	bl	80051ec <HAL_GetTick>
 8007f86:	0002      	movs	r2, r0
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d802      	bhi.n	8007f98 <HAL_SPI_Transmit+0x230>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	d102      	bne.n	8007f9e <HAL_SPI_Transmit+0x236>
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d104      	bne.n	8007fa8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8007f9e:	231f      	movs	r3, #31
 8007fa0:	18fb      	adds	r3, r7, r3
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	701a      	strb	r2, [r3, #0]
          goto error;
 8007fa6:	e028      	b.n	8007ffa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1cc      	bne.n	8007f4c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f000 fcd9 	bl	8008970 <SPI_EndRxTxTransaction>
 8007fbe:	1e03      	subs	r3, r0, #0
 8007fc0:	d002      	beq.n	8007fc8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	613b      	str	r3, [r7, #16]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007fee:	231f      	movs	r3, #31
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	e000      	b.n	8007ffa <HAL_SPI_Transmit+0x292>
  }

error:
 8007ff8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	225d      	movs	r2, #93	; 0x5d
 8007ffe:	2101      	movs	r1, #1
 8008000:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	225c      	movs	r2, #92	; 0x5c
 8008006:	2100      	movs	r1, #0
 8008008:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800800a:	231f      	movs	r3, #31
 800800c:	18fb      	adds	r3, r7, r3
 800800e:	781b      	ldrb	r3, [r3, #0]
}
 8008010:	0018      	movs	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	b008      	add	sp, #32
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008018:	b590      	push	{r4, r7, lr}
 800801a:	b089      	sub	sp, #36	; 0x24
 800801c:	af02      	add	r7, sp, #8
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	1dbb      	adds	r3, r7, #6
 8008026:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008028:	2317      	movs	r3, #23
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	2382      	movs	r3, #130	; 0x82
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	429a      	cmp	r2, r3
 800803a:	d113      	bne.n	8008064 <HAL_SPI_Receive+0x4c>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10f      	bne.n	8008064 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	225d      	movs	r2, #93	; 0x5d
 8008048:	2104      	movs	r1, #4
 800804a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800804c:	1dbb      	adds	r3, r7, #6
 800804e:	881c      	ldrh	r4, [r3, #0]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	0023      	movs	r3, r4
 800805c:	f000 f928 	bl	80082b0 <HAL_SPI_TransmitReceive>
 8008060:	0003      	movs	r3, r0
 8008062:	e11c      	b.n	800829e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	225c      	movs	r2, #92	; 0x5c
 8008068:	5c9b      	ldrb	r3, [r3, r2]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_SPI_Receive+0x5a>
 800806e:	2302      	movs	r3, #2
 8008070:	e115      	b.n	800829e <HAL_SPI_Receive+0x286>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	225c      	movs	r2, #92	; 0x5c
 8008076:	2101      	movs	r1, #1
 8008078:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800807a:	f7fd f8b7 	bl	80051ec <HAL_GetTick>
 800807e:	0003      	movs	r3, r0
 8008080:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	225d      	movs	r2, #93	; 0x5d
 8008086:	5c9b      	ldrb	r3, [r3, r2]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b01      	cmp	r3, #1
 800808c:	d004      	beq.n	8008098 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800808e:	2317      	movs	r3, #23
 8008090:	18fb      	adds	r3, r7, r3
 8008092:	2202      	movs	r2, #2
 8008094:	701a      	strb	r2, [r3, #0]
    goto error;
 8008096:	e0f7      	b.n	8008288 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_SPI_Receive+0x8e>
 800809e:	1dbb      	adds	r3, r7, #6
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d104      	bne.n	80080b0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80080a6:	2317      	movs	r3, #23
 80080a8:	18fb      	adds	r3, r7, r3
 80080aa:	2201      	movs	r2, #1
 80080ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80080ae:	e0eb      	b.n	8008288 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	225d      	movs	r2, #93	; 0x5d
 80080b4:	2104      	movs	r1, #4
 80080b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	1dba      	adds	r2, r7, #6
 80080c8:	2144      	movs	r1, #68	; 0x44
 80080ca:	8812      	ldrh	r2, [r2, #0]
 80080cc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	1dba      	adds	r2, r7, #6
 80080d2:	2146      	movs	r1, #70	; 0x46
 80080d4:	8812      	ldrh	r2, [r2, #0]
 80080d6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	23e0      	movs	r3, #224	; 0xe0
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	429a      	cmp	r2, r3
 8008100:	d908      	bls.n	8008114 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4966      	ldr	r1, [pc, #408]	; (80082a8 <HAL_SPI_Receive+0x290>)
 800810e:	400a      	ands	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
 8008112:	e008      	b.n	8008126 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2180      	movs	r1, #128	; 0x80
 8008120:	0149      	lsls	r1, r1, #5
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	2380      	movs	r3, #128	; 0x80
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	429a      	cmp	r2, r3
 8008130:	d10f      	bne.n	8008152 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2140      	movs	r1, #64	; 0x40
 800813e:	438a      	bics	r2, r1
 8008140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4957      	ldr	r1, [pc, #348]	; (80082ac <HAL_SPI_Receive+0x294>)
 800814e:	400a      	ands	r2, r1
 8008150:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2240      	movs	r2, #64	; 0x40
 800815a:	4013      	ands	r3, r2
 800815c:	2b40      	cmp	r3, #64	; 0x40
 800815e:	d007      	beq.n	8008170 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2140      	movs	r1, #64	; 0x40
 800816c:	430a      	orrs	r2, r1
 800816e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	23e0      	movs	r3, #224	; 0xe0
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	429a      	cmp	r2, r3
 800817a:	d900      	bls.n	800817e <HAL_SPI_Receive+0x166>
 800817c:	e069      	b.n	8008252 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800817e:	e031      	b.n	80081e4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	2201      	movs	r2, #1
 8008188:	4013      	ands	r3, r2
 800818a:	2b01      	cmp	r3, #1
 800818c:	d117      	bne.n	80081be <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	330c      	adds	r3, #12
 8008194:	001a      	movs	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	7812      	ldrb	r2, [r2, #0]
 800819c:	b2d2      	uxtb	r2, r2
 800819e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2246      	movs	r2, #70	; 0x46
 80081ae:	5a9b      	ldrh	r3, [r3, r2]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b299      	uxth	r1, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2246      	movs	r2, #70	; 0x46
 80081ba:	5299      	strh	r1, [r3, r2]
 80081bc:	e012      	b.n	80081e4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081be:	f7fd f815 	bl	80051ec <HAL_GetTick>
 80081c2:	0002      	movs	r2, r0
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d802      	bhi.n	80081d4 <HAL_SPI_Receive+0x1bc>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	3301      	adds	r3, #1
 80081d2:	d102      	bne.n	80081da <HAL_SPI_Receive+0x1c2>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80081da:	2317      	movs	r3, #23
 80081dc:	18fb      	adds	r3, r7, r3
 80081de:	2203      	movs	r2, #3
 80081e0:	701a      	strb	r2, [r3, #0]
          goto error;
 80081e2:	e051      	b.n	8008288 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2246      	movs	r2, #70	; 0x46
 80081e8:	5a9b      	ldrh	r3, [r3, r2]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1c7      	bne.n	8008180 <HAL_SPI_Receive+0x168>
 80081f0:	e035      	b.n	800825e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	2201      	movs	r2, #1
 80081fa:	4013      	ands	r3, r2
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d115      	bne.n	800822c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	b292      	uxth	r2, r2
 800820c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	1c9a      	adds	r2, r3, #2
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2246      	movs	r2, #70	; 0x46
 800821c:	5a9b      	ldrh	r3, [r3, r2]
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b299      	uxth	r1, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2246      	movs	r2, #70	; 0x46
 8008228:	5299      	strh	r1, [r3, r2]
 800822a:	e012      	b.n	8008252 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800822c:	f7fc ffde 	bl	80051ec <HAL_GetTick>
 8008230:	0002      	movs	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d802      	bhi.n	8008242 <HAL_SPI_Receive+0x22a>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	d102      	bne.n	8008248 <HAL_SPI_Receive+0x230>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d104      	bne.n	8008252 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8008248:	2317      	movs	r3, #23
 800824a:	18fb      	adds	r3, r7, r3
 800824c:	2203      	movs	r2, #3
 800824e:	701a      	strb	r2, [r3, #0]
          goto error;
 8008250:	e01a      	b.n	8008288 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2246      	movs	r2, #70	; 0x46
 8008256:	5a9b      	ldrh	r3, [r3, r2]
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1c9      	bne.n	80081f2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	0018      	movs	r0, r3
 8008266:	f000 fb25 	bl	80088b4 <SPI_EndRxTransaction>
 800826a:	1e03      	subs	r3, r0, #0
 800826c:	d002      	beq.n	8008274 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800827c:	2317      	movs	r3, #23
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	2201      	movs	r2, #1
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e000      	b.n	8008288 <HAL_SPI_Receive+0x270>
  }

error :
 8008286:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	225d      	movs	r2, #93	; 0x5d
 800828c:	2101      	movs	r1, #1
 800828e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	225c      	movs	r2, #92	; 0x5c
 8008294:	2100      	movs	r1, #0
 8008296:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008298:	2317      	movs	r3, #23
 800829a:	18fb      	adds	r3, r7, r3
 800829c:	781b      	ldrb	r3, [r3, #0]
}
 800829e:	0018      	movs	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	b007      	add	sp, #28
 80082a4:	bd90      	pop	{r4, r7, pc}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	ffffefff 	.word	0xffffefff
 80082ac:	ffffbfff 	.word	0xffffbfff

080082b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08a      	sub	sp, #40	; 0x28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	001a      	movs	r2, r3
 80082be:	1cbb      	adds	r3, r7, #2
 80082c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082c2:	2301      	movs	r3, #1
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082c6:	2323      	movs	r3, #35	; 0x23
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	225c      	movs	r2, #92	; 0x5c
 80082d2:	5c9b      	ldrb	r3, [r3, r2]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_SPI_TransmitReceive+0x2c>
 80082d8:	2302      	movs	r3, #2
 80082da:	e1b5      	b.n	8008648 <HAL_SPI_TransmitReceive+0x398>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	225c      	movs	r2, #92	; 0x5c
 80082e0:	2101      	movs	r1, #1
 80082e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082e4:	f7fc ff82 	bl	80051ec <HAL_GetTick>
 80082e8:	0003      	movs	r3, r0
 80082ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082ec:	201b      	movs	r0, #27
 80082ee:	183b      	adds	r3, r7, r0
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	215d      	movs	r1, #93	; 0x5d
 80082f4:	5c52      	ldrb	r2, [r2, r1]
 80082f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80082fe:	2312      	movs	r3, #18
 8008300:	18fb      	adds	r3, r7, r3
 8008302:	1cba      	adds	r2, r7, #2
 8008304:	8812      	ldrh	r2, [r2, #0]
 8008306:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008308:	183b      	adds	r3, r7, r0
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d011      	beq.n	8008334 <HAL_SPI_TransmitReceive+0x84>
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	2382      	movs	r3, #130	; 0x82
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	429a      	cmp	r2, r3
 8008318:	d107      	bne.n	800832a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <HAL_SPI_TransmitReceive+0x7a>
 8008322:	183b      	adds	r3, r7, r0
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b04      	cmp	r3, #4
 8008328:	d004      	beq.n	8008334 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800832a:	2323      	movs	r3, #35	; 0x23
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	2202      	movs	r2, #2
 8008330:	701a      	strb	r2, [r3, #0]
    goto error;
 8008332:	e17e      	b.n	8008632 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d006      	beq.n	8008348 <HAL_SPI_TransmitReceive+0x98>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_SPI_TransmitReceive+0x98>
 8008340:	1cbb      	adds	r3, r7, #2
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d104      	bne.n	8008352 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008348:	2323      	movs	r3, #35	; 0x23
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	2201      	movs	r2, #1
 800834e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008350:	e16f      	b.n	8008632 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	225d      	movs	r2, #93	; 0x5d
 8008356:	5c9b      	ldrb	r3, [r3, r2]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b04      	cmp	r3, #4
 800835c:	d003      	beq.n	8008366 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	225d      	movs	r2, #93	; 0x5d
 8008362:	2105      	movs	r1, #5
 8008364:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1cba      	adds	r2, r7, #2
 8008376:	2146      	movs	r1, #70	; 0x46
 8008378:	8812      	ldrh	r2, [r2, #0]
 800837a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	1cba      	adds	r2, r7, #2
 8008380:	2144      	movs	r1, #68	; 0x44
 8008382:	8812      	ldrh	r2, [r2, #0]
 8008384:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	1cba      	adds	r2, r7, #2
 8008390:	8812      	ldrh	r2, [r2, #0]
 8008392:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	1cba      	adds	r2, r7, #2
 8008398:	8812      	ldrh	r2, [r2, #0]
 800839a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	23e0      	movs	r3, #224	; 0xe0
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d908      	bls.n	80083c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	49a4      	ldr	r1, [pc, #656]	; (8008650 <HAL_SPI_TransmitReceive+0x3a0>)
 80083c0:	400a      	ands	r2, r1
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	e008      	b.n	80083d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2180      	movs	r1, #128	; 0x80
 80083d2:	0149      	lsls	r1, r1, #5
 80083d4:	430a      	orrs	r2, r1
 80083d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2240      	movs	r2, #64	; 0x40
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b40      	cmp	r3, #64	; 0x40
 80083e4:	d007      	beq.n	80083f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2140      	movs	r1, #64	; 0x40
 80083f2:	430a      	orrs	r2, r1
 80083f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	23e0      	movs	r3, #224	; 0xe0
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	429a      	cmp	r2, r3
 8008400:	d800      	bhi.n	8008404 <HAL_SPI_TransmitReceive+0x154>
 8008402:	e07f      	b.n	8008504 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_SPI_TransmitReceive+0x168>
 800840c:	2312      	movs	r3, #18
 800840e:	18fb      	adds	r3, r7, r3
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d000      	beq.n	8008418 <HAL_SPI_TransmitReceive+0x168>
 8008416:	e069      	b.n	80084ec <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	881a      	ldrh	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	1c9a      	adds	r2, r3, #2
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008432:	b29b      	uxth	r3, r3
 8008434:	3b01      	subs	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800843c:	e056      	b.n	80084ec <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2202      	movs	r2, #2
 8008446:	4013      	ands	r3, r2
 8008448:	2b02      	cmp	r3, #2
 800844a:	d11b      	bne.n	8008484 <HAL_SPI_TransmitReceive+0x1d4>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <HAL_SPI_TransmitReceive+0x1d4>
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	2b01      	cmp	r3, #1
 800845a:	d113      	bne.n	8008484 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	881a      	ldrh	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2201      	movs	r2, #1
 800848c:	4013      	ands	r3, r2
 800848e:	2b01      	cmp	r3, #1
 8008490:	d11c      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x21c>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2246      	movs	r2, #70	; 0x46
 8008496:	5a9b      	ldrh	r3, [r3, r2]
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d016      	beq.n	80084cc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a8:	b292      	uxth	r2, r2
 80084aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	1c9a      	adds	r2, r3, #2
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2246      	movs	r2, #70	; 0x46
 80084ba:	5a9b      	ldrh	r3, [r3, r2]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	b299      	uxth	r1, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2246      	movs	r2, #70	; 0x46
 80084c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084c8:	2301      	movs	r3, #1
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084cc:	f7fc fe8e 	bl	80051ec <HAL_GetTick>
 80084d0:	0002      	movs	r2, r0
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d8:	429a      	cmp	r2, r3
 80084da:	d807      	bhi.n	80084ec <HAL_SPI_TransmitReceive+0x23c>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	3301      	adds	r3, #1
 80084e0:	d004      	beq.n	80084ec <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80084e2:	2323      	movs	r3, #35	; 0x23
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	2203      	movs	r2, #3
 80084e8:	701a      	strb	r2, [r3, #0]
        goto error;
 80084ea:	e0a2      	b.n	8008632 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1a3      	bne.n	800843e <HAL_SPI_TransmitReceive+0x18e>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2246      	movs	r2, #70	; 0x46
 80084fa:	5a9b      	ldrh	r3, [r3, r2]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d19d      	bne.n	800843e <HAL_SPI_TransmitReceive+0x18e>
 8008502:	e085      	b.n	8008610 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <HAL_SPI_TransmitReceive+0x268>
 800850c:	2312      	movs	r3, #18
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d000      	beq.n	8008518 <HAL_SPI_TransmitReceive+0x268>
 8008516:	e070      	b.n	80085fa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	330c      	adds	r3, #12
 8008522:	7812      	ldrb	r2, [r2, #0]
 8008524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800853e:	e05c      	b.n	80085fa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	2202      	movs	r2, #2
 8008548:	4013      	ands	r3, r2
 800854a:	2b02      	cmp	r3, #2
 800854c:	d11c      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x2d8>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d017      	beq.n	8008588 <HAL_SPI_TransmitReceive+0x2d8>
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b01      	cmp	r3, #1
 800855c:	d114      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	330c      	adds	r3, #12
 8008568:	7812      	ldrb	r2, [r2, #0]
 800856a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2201      	movs	r2, #1
 8008590:	4013      	ands	r3, r2
 8008592:	2b01      	cmp	r3, #1
 8008594:	d11e      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x324>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2246      	movs	r2, #70	; 0x46
 800859a:	5a9b      	ldrh	r3, [r3, r2]
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d018      	beq.n	80085d4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	330c      	adds	r3, #12
 80085a8:	001a      	movs	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2246      	movs	r2, #70	; 0x46
 80085c2:	5a9b      	ldrh	r3, [r3, r2]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	3b01      	subs	r3, #1
 80085c8:	b299      	uxth	r1, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2246      	movs	r2, #70	; 0x46
 80085ce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085d0:	2301      	movs	r3, #1
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085d4:	f7fc fe0a 	bl	80051ec <HAL_GetTick>
 80085d8:	0002      	movs	r2, r0
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d802      	bhi.n	80085ea <HAL_SPI_TransmitReceive+0x33a>
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	3301      	adds	r3, #1
 80085e8:	d102      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x340>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d104      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80085f0:	2323      	movs	r3, #35	; 0x23
 80085f2:	18fb      	adds	r3, r7, r3
 80085f4:	2203      	movs	r2, #3
 80085f6:	701a      	strb	r2, [r3, #0]
        goto error;
 80085f8:	e01b      	b.n	8008632 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d19d      	bne.n	8008540 <HAL_SPI_TransmitReceive+0x290>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2246      	movs	r2, #70	; 0x46
 8008608:	5a9b      	ldrh	r3, [r3, r2]
 800860a:	b29b      	uxth	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d197      	bne.n	8008540 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	0018      	movs	r0, r3
 8008618:	f000 f9aa 	bl	8008970 <SPI_EndRxTxTransaction>
 800861c:	1e03      	subs	r3, r0, #0
 800861e:	d007      	beq.n	8008630 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8008620:	2323      	movs	r3, #35	; 0x23
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	2201      	movs	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	661a      	str	r2, [r3, #96]	; 0x60
 800862e:	e000      	b.n	8008632 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8008630:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	225d      	movs	r2, #93	; 0x5d
 8008636:	2101      	movs	r1, #1
 8008638:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	225c      	movs	r2, #92	; 0x5c
 800863e:	2100      	movs	r1, #0
 8008640:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008642:	2323      	movs	r3, #35	; 0x23
 8008644:	18fb      	adds	r3, r7, r3
 8008646:	781b      	ldrb	r3, [r3, #0]
}
 8008648:	0018      	movs	r0, r3
 800864a:	46bd      	mov	sp, r7
 800864c:	b00a      	add	sp, #40	; 0x28
 800864e:	bd80      	pop	{r7, pc}
 8008650:	ffffefff 	.word	0xffffefff

08008654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	1dfb      	adds	r3, r7, #7
 8008662:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008664:	f7fc fdc2 	bl	80051ec <HAL_GetTick>
 8008668:	0002      	movs	r2, r0
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	1a9b      	subs	r3, r3, r2
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	18d3      	adds	r3, r2, r3
 8008672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008674:	f7fc fdba 	bl	80051ec <HAL_GetTick>
 8008678:	0003      	movs	r3, r0
 800867a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800867c:	4b3a      	ldr	r3, [pc, #232]	; (8008768 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	015b      	lsls	r3, r3, #5
 8008682:	0d1b      	lsrs	r3, r3, #20
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	4353      	muls	r3, r2
 8008688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800868a:	e058      	b.n	800873e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	3301      	adds	r3, #1
 8008690:	d055      	beq.n	800873e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008692:	f7fc fdab 	bl	80051ec <HAL_GetTick>
 8008696:	0002      	movs	r2, r0
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d902      	bls.n	80086a8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d142      	bne.n	800872e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	21e0      	movs	r1, #224	; 0xe0
 80086b4:	438a      	bics	r2, r1
 80086b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	2382      	movs	r3, #130	; 0x82
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d113      	bne.n	80086ec <SPI_WaitFlagStateUntilTimeout+0x98>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	2380      	movs	r3, #128	; 0x80
 80086ca:	021b      	lsls	r3, r3, #8
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d005      	beq.n	80086dc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	2380      	movs	r3, #128	; 0x80
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	429a      	cmp	r2, r3
 80086da:	d107      	bne.n	80086ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2140      	movs	r1, #64	; 0x40
 80086e8:	438a      	bics	r2, r1
 80086ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086f0:	2380      	movs	r3, #128	; 0x80
 80086f2:	019b      	lsls	r3, r3, #6
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d110      	bne.n	800871a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	491a      	ldr	r1, [pc, #104]	; (800876c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008704:	400a      	ands	r2, r1
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2180      	movs	r1, #128	; 0x80
 8008714:	0189      	lsls	r1, r1, #6
 8008716:	430a      	orrs	r2, r1
 8008718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	225d      	movs	r2, #93	; 0x5d
 800871e:	2101      	movs	r1, #1
 8008720:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	225c      	movs	r2, #92	; 0x5c
 8008726:	2100      	movs	r1, #0
 8008728:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e017      	b.n	800875e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	3b01      	subs	r3, #1
 800873c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	4013      	ands	r3, r2
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	425a      	negs	r2, r3
 800874e:	4153      	adcs	r3, r2
 8008750:	b2db      	uxtb	r3, r3
 8008752:	001a      	movs	r2, r3
 8008754:	1dfb      	adds	r3, r7, #7
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d197      	bne.n	800868c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	0018      	movs	r0, r3
 8008760:	46bd      	mov	sp, r7
 8008762:	b008      	add	sp, #32
 8008764:	bd80      	pop	{r7, pc}
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	20000000 	.word	0x20000000
 800876c:	ffffdfff 	.word	0xffffdfff

08008770 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800877e:	2317      	movs	r3, #23
 8008780:	18fb      	adds	r3, r7, r3
 8008782:	2200      	movs	r2, #0
 8008784:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008786:	f7fc fd31 	bl	80051ec <HAL_GetTick>
 800878a:	0002      	movs	r2, r0
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	18d3      	adds	r3, r2, r3
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008796:	f7fc fd29 	bl	80051ec <HAL_GetTick>
 800879a:	0003      	movs	r3, r0
 800879c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	330c      	adds	r3, #12
 80087a4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087a6:	4b41      	ldr	r3, [pc, #260]	; (80088ac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	0013      	movs	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	189b      	adds	r3, r3, r2
 80087b0:	00da      	lsls	r2, r3, #3
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	0d1b      	lsrs	r3, r3, #20
 80087b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b8:	4353      	muls	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80087bc:	e068      	b.n	8008890 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	23c0      	movs	r3, #192	; 0xc0
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d10a      	bne.n	80087de <SPI_WaitFifoStateUntilTimeout+0x6e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d107      	bne.n	80087de <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	2117      	movs	r1, #23
 80087d6:	187b      	adds	r3, r7, r1
 80087d8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80087da:	187b      	adds	r3, r7, r1
 80087dc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	d055      	beq.n	8008890 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087e4:	f7fc fd02 	bl	80051ec <HAL_GetTick>
 80087e8:	0002      	movs	r2, r0
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d902      	bls.n	80087fa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d142      	bne.n	8008880 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	21e0      	movs	r1, #224	; 0xe0
 8008806:	438a      	bics	r2, r1
 8008808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	2382      	movs	r3, #130	; 0x82
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	429a      	cmp	r2, r3
 8008814:	d113      	bne.n	800883e <SPI_WaitFifoStateUntilTimeout+0xce>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689a      	ldr	r2, [r3, #8]
 800881a:	2380      	movs	r3, #128	; 0x80
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	429a      	cmp	r2, r3
 8008820:	d005      	beq.n	800882e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	2380      	movs	r3, #128	; 0x80
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	429a      	cmp	r2, r3
 800882c:	d107      	bne.n	800883e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2140      	movs	r1, #64	; 0x40
 800883a:	438a      	bics	r2, r1
 800883c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008842:	2380      	movs	r3, #128	; 0x80
 8008844:	019b      	lsls	r3, r3, #6
 8008846:	429a      	cmp	r2, r3
 8008848:	d110      	bne.n	800886c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4916      	ldr	r1, [pc, #88]	; (80088b0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008856:	400a      	ands	r2, r1
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2180      	movs	r1, #128	; 0x80
 8008866:	0189      	lsls	r1, r1, #6
 8008868:	430a      	orrs	r2, r1
 800886a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	225d      	movs	r2, #93	; 0x5d
 8008870:	2101      	movs	r1, #1
 8008872:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	225c      	movs	r2, #92	; 0x5c
 8008878:	2100      	movs	r1, #0
 800887a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e010      	b.n	80088a2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	3b01      	subs	r3, #1
 800888e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4013      	ands	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d18e      	bne.n	80087be <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	0018      	movs	r0, r3
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b00a      	add	sp, #40	; 0x28
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	20000000 	.word	0x20000000
 80088b0:	ffffdfff 	.word	0xffffdfff

080088b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	2382      	movs	r3, #130	; 0x82
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d113      	bne.n	80088f4 <SPI_EndRxTransaction+0x40>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d005      	beq.n	80088e4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	2380      	movs	r3, #128	; 0x80
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d107      	bne.n	80088f4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2140      	movs	r1, #64	; 0x40
 80088f0:	438a      	bics	r2, r1
 80088f2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	0013      	movs	r3, r2
 80088fe:	2200      	movs	r2, #0
 8008900:	2180      	movs	r1, #128	; 0x80
 8008902:	f7ff fea7 	bl	8008654 <SPI_WaitFlagStateUntilTimeout>
 8008906:	1e03      	subs	r3, r0, #0
 8008908:	d007      	beq.n	800891a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890e:	2220      	movs	r2, #32
 8008910:	431a      	orrs	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e026      	b.n	8008968 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	2382      	movs	r3, #130	; 0x82
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	429a      	cmp	r2, r3
 8008924:	d11f      	bne.n	8008966 <SPI_EndRxTransaction+0xb2>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	2380      	movs	r3, #128	; 0x80
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	429a      	cmp	r2, r3
 8008930:	d005      	beq.n	800893e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	689a      	ldr	r2, [r3, #8]
 8008936:	2380      	movs	r3, #128	; 0x80
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	429a      	cmp	r2, r3
 800893c:	d113      	bne.n	8008966 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	23c0      	movs	r3, #192	; 0xc0
 8008942:	00d9      	lsls	r1, r3, #3
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	0013      	movs	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	f7ff ff0f 	bl	8008770 <SPI_WaitFifoStateUntilTimeout>
 8008952:	1e03      	subs	r3, r0, #0
 8008954:	d007      	beq.n	8008966 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895a:	2220      	movs	r2, #32
 800895c:	431a      	orrs	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e000      	b.n	8008968 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	0018      	movs	r0, r3
 800896a:	46bd      	mov	sp, r7
 800896c:	b004      	add	sp, #16
 800896e:	bd80      	pop	{r7, pc}

08008970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af02      	add	r7, sp, #8
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	23c0      	movs	r3, #192	; 0xc0
 8008980:	0159      	lsls	r1, r3, #5
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	0013      	movs	r3, r2
 800898a:	2200      	movs	r2, #0
 800898c:	f7ff fef0 	bl	8008770 <SPI_WaitFifoStateUntilTimeout>
 8008990:	1e03      	subs	r3, r0, #0
 8008992:	d007      	beq.n	80089a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008998:	2220      	movs	r2, #32
 800899a:	431a      	orrs	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e027      	b.n	80089f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	0013      	movs	r3, r2
 80089ae:	2200      	movs	r2, #0
 80089b0:	2180      	movs	r1, #128	; 0x80
 80089b2:	f7ff fe4f 	bl	8008654 <SPI_WaitFlagStateUntilTimeout>
 80089b6:	1e03      	subs	r3, r0, #0
 80089b8:	d007      	beq.n	80089ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089be:	2220      	movs	r2, #32
 80089c0:	431a      	orrs	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e014      	b.n	80089f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	23c0      	movs	r3, #192	; 0xc0
 80089ce:	00d9      	lsls	r1, r3, #3
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	0013      	movs	r3, r2
 80089d8:	2200      	movs	r2, #0
 80089da:	f7ff fec9 	bl	8008770 <SPI_WaitFifoStateUntilTimeout>
 80089de:	1e03      	subs	r3, r0, #0
 80089e0:	d007      	beq.n	80089f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e6:	2220      	movs	r2, #32
 80089e8:	431a      	orrs	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e000      	b.n	80089f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b004      	add	sp, #16
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e04a      	b.n	8008aa4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	223d      	movs	r2, #61	; 0x3d
 8008a12:	5c9b      	ldrb	r3, [r3, r2]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d107      	bne.n	8008a2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	223c      	movs	r2, #60	; 0x3c
 8008a1e:	2100      	movs	r1, #0
 8008a20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	0018      	movs	r0, r3
 8008a26:	f7fb fd09 	bl	800443c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	223d      	movs	r2, #61	; 0x3d
 8008a2e:	2102      	movs	r1, #2
 8008a30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	0019      	movs	r1, r3
 8008a3c:	0010      	movs	r0, r2
 8008a3e:	f000 fe91 	bl	8009764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2248      	movs	r2, #72	; 0x48
 8008a46:	2101      	movs	r1, #1
 8008a48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	223e      	movs	r2, #62	; 0x3e
 8008a4e:	2101      	movs	r1, #1
 8008a50:	5499      	strb	r1, [r3, r2]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	223f      	movs	r2, #63	; 0x3f
 8008a56:	2101      	movs	r1, #1
 8008a58:	5499      	strb	r1, [r3, r2]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2240      	movs	r2, #64	; 0x40
 8008a5e:	2101      	movs	r1, #1
 8008a60:	5499      	strb	r1, [r3, r2]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2241      	movs	r2, #65	; 0x41
 8008a66:	2101      	movs	r1, #1
 8008a68:	5499      	strb	r1, [r3, r2]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2242      	movs	r2, #66	; 0x42
 8008a6e:	2101      	movs	r1, #1
 8008a70:	5499      	strb	r1, [r3, r2]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2243      	movs	r2, #67	; 0x43
 8008a76:	2101      	movs	r1, #1
 8008a78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2244      	movs	r2, #68	; 0x44
 8008a7e:	2101      	movs	r1, #1
 8008a80:	5499      	strb	r1, [r3, r2]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2245      	movs	r2, #69	; 0x45
 8008a86:	2101      	movs	r1, #1
 8008a88:	5499      	strb	r1, [r3, r2]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2246      	movs	r2, #70	; 0x46
 8008a8e:	2101      	movs	r1, #1
 8008a90:	5499      	strb	r1, [r3, r2]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2247      	movs	r2, #71	; 0x47
 8008a96:	2101      	movs	r1, #1
 8008a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	223d      	movs	r2, #61	; 0x3d
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	b002      	add	sp, #8
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	223d      	movs	r2, #61	; 0x3d
 8008ab8:	5c9b      	ldrb	r3, [r3, r2]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d001      	beq.n	8008ac4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e034      	b.n	8008b2e <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	223d      	movs	r2, #61	; 0x3d
 8008ac8:	2102      	movs	r1, #2
 8008aca:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a19      	ldr	r2, [pc, #100]	; (8008b38 <HAL_TIM_Base_Start+0x8c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d009      	beq.n	8008aea <HAL_TIM_Base_Start+0x3e>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <HAL_TIM_Base_Start+0x90>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d004      	beq.n	8008aea <HAL_TIM_Base_Start+0x3e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <HAL_TIM_Base_Start+0x94>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d116      	bne.n	8008b18 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	4a14      	ldr	r2, [pc, #80]	; (8008b44 <HAL_TIM_Base_Start+0x98>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b06      	cmp	r3, #6
 8008afa:	d016      	beq.n	8008b2a <HAL_TIM_Base_Start+0x7e>
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	2380      	movs	r3, #128	; 0x80
 8008b00:	025b      	lsls	r3, r3, #9
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d011      	beq.n	8008b2a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2101      	movs	r1, #1
 8008b12:	430a      	orrs	r2, r1
 8008b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b16:	e008      	b.n	8008b2a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2101      	movs	r1, #1
 8008b24:	430a      	orrs	r2, r1
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e000      	b.n	8008b2c <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b2a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	0018      	movs	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b004      	add	sp, #16
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40000400 	.word	0x40000400
 8008b40:	40014000 	.word	0x40014000
 8008b44:	00010007 	.word	0x00010007

08008b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	223d      	movs	r2, #61	; 0x3d
 8008b54:	5c9b      	ldrb	r3, [r3, r2]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d001      	beq.n	8008b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e03c      	b.n	8008bda <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	223d      	movs	r2, #61	; 0x3d
 8008b64:	2102      	movs	r1, #2
 8008b66:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2101      	movs	r1, #1
 8008b74:	430a      	orrs	r2, r1
 8008b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a19      	ldr	r2, [pc, #100]	; (8008be4 <HAL_TIM_Base_Start_IT+0x9c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d009      	beq.n	8008b96 <HAL_TIM_Base_Start_IT+0x4e>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a18      	ldr	r2, [pc, #96]	; (8008be8 <HAL_TIM_Base_Start_IT+0xa0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d004      	beq.n	8008b96 <HAL_TIM_Base_Start_IT+0x4e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a16      	ldr	r2, [pc, #88]	; (8008bec <HAL_TIM_Base_Start_IT+0xa4>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d116      	bne.n	8008bc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4a14      	ldr	r2, [pc, #80]	; (8008bf0 <HAL_TIM_Base_Start_IT+0xa8>)
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b06      	cmp	r3, #6
 8008ba6:	d016      	beq.n	8008bd6 <HAL_TIM_Base_Start_IT+0x8e>
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	2380      	movs	r3, #128	; 0x80
 8008bac:	025b      	lsls	r3, r3, #9
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d011      	beq.n	8008bd6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc2:	e008      	b.n	8008bd6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2101      	movs	r1, #1
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e000      	b.n	8008bd8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bd6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	0018      	movs	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	b004      	add	sp, #16
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	40012c00 	.word	0x40012c00
 8008be8:	40000400 	.word	0x40000400
 8008bec:	40014000 	.word	0x40014000
 8008bf0:	00010007 	.word	0x00010007

08008bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e04a      	b.n	8008c9c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	223d      	movs	r2, #61	; 0x3d
 8008c0a:	5c9b      	ldrb	r3, [r3, r2]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d107      	bne.n	8008c22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	223c      	movs	r2, #60	; 0x3c
 8008c16:	2100      	movs	r1, #0
 8008c18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f000 f841 	bl	8008ca4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	223d      	movs	r2, #61	; 0x3d
 8008c26:	2102      	movs	r1, #2
 8008c28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3304      	adds	r3, #4
 8008c32:	0019      	movs	r1, r3
 8008c34:	0010      	movs	r0, r2
 8008c36:	f000 fd95 	bl	8009764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2248      	movs	r2, #72	; 0x48
 8008c3e:	2101      	movs	r1, #1
 8008c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	223e      	movs	r2, #62	; 0x3e
 8008c46:	2101      	movs	r1, #1
 8008c48:	5499      	strb	r1, [r3, r2]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	223f      	movs	r2, #63	; 0x3f
 8008c4e:	2101      	movs	r1, #1
 8008c50:	5499      	strb	r1, [r3, r2]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2240      	movs	r2, #64	; 0x40
 8008c56:	2101      	movs	r1, #1
 8008c58:	5499      	strb	r1, [r3, r2]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2241      	movs	r2, #65	; 0x41
 8008c5e:	2101      	movs	r1, #1
 8008c60:	5499      	strb	r1, [r3, r2]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2242      	movs	r2, #66	; 0x42
 8008c66:	2101      	movs	r1, #1
 8008c68:	5499      	strb	r1, [r3, r2]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2243      	movs	r2, #67	; 0x43
 8008c6e:	2101      	movs	r1, #1
 8008c70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2244      	movs	r2, #68	; 0x44
 8008c76:	2101      	movs	r1, #1
 8008c78:	5499      	strb	r1, [r3, r2]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2245      	movs	r2, #69	; 0x45
 8008c7e:	2101      	movs	r1, #1
 8008c80:	5499      	strb	r1, [r3, r2]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2246      	movs	r2, #70	; 0x46
 8008c86:	2101      	movs	r1, #1
 8008c88:	5499      	strb	r1, [r3, r2]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2247      	movs	r2, #71	; 0x47
 8008c8e:	2101      	movs	r1, #1
 8008c90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	223d      	movs	r2, #61	; 0x3d
 8008c96:	2101      	movs	r1, #1
 8008c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	b002      	add	sp, #8
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008cac:	46c0      	nop			; (mov r8, r8)
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	b002      	add	sp, #8
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d108      	bne.n	8008cd6 <HAL_TIM_PWM_Start+0x22>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	223e      	movs	r2, #62	; 0x3e
 8008cc8:	5c9b      	ldrb	r3, [r3, r2]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	1e5a      	subs	r2, r3, #1
 8008cd0:	4193      	sbcs	r3, r2
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	e037      	b.n	8008d46 <HAL_TIM_PWM_Start+0x92>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d108      	bne.n	8008cee <HAL_TIM_PWM_Start+0x3a>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	223f      	movs	r2, #63	; 0x3f
 8008ce0:	5c9b      	ldrb	r3, [r3, r2]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	1e5a      	subs	r2, r3, #1
 8008ce8:	4193      	sbcs	r3, r2
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	e02b      	b.n	8008d46 <HAL_TIM_PWM_Start+0x92>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d108      	bne.n	8008d06 <HAL_TIM_PWM_Start+0x52>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2240      	movs	r2, #64	; 0x40
 8008cf8:	5c9b      	ldrb	r3, [r3, r2]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	1e5a      	subs	r2, r3, #1
 8008d00:	4193      	sbcs	r3, r2
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	e01f      	b.n	8008d46 <HAL_TIM_PWM_Start+0x92>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b0c      	cmp	r3, #12
 8008d0a:	d108      	bne.n	8008d1e <HAL_TIM_PWM_Start+0x6a>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2241      	movs	r2, #65	; 0x41
 8008d10:	5c9b      	ldrb	r3, [r3, r2]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	1e5a      	subs	r2, r3, #1
 8008d18:	4193      	sbcs	r3, r2
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	e013      	b.n	8008d46 <HAL_TIM_PWM_Start+0x92>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b10      	cmp	r3, #16
 8008d22:	d108      	bne.n	8008d36 <HAL_TIM_PWM_Start+0x82>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2242      	movs	r2, #66	; 0x42
 8008d28:	5c9b      	ldrb	r3, [r3, r2]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	1e5a      	subs	r2, r3, #1
 8008d30:	4193      	sbcs	r3, r2
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	e007      	b.n	8008d46 <HAL_TIM_PWM_Start+0x92>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2243      	movs	r2, #67	; 0x43
 8008d3a:	5c9b      	ldrb	r3, [r3, r2]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	4193      	sbcs	r3, r2
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e085      	b.n	8008e5a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d104      	bne.n	8008d5e <HAL_TIM_PWM_Start+0xaa>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	223e      	movs	r2, #62	; 0x3e
 8008d58:	2102      	movs	r1, #2
 8008d5a:	5499      	strb	r1, [r3, r2]
 8008d5c:	e023      	b.n	8008da6 <HAL_TIM_PWM_Start+0xf2>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d104      	bne.n	8008d6e <HAL_TIM_PWM_Start+0xba>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	223f      	movs	r2, #63	; 0x3f
 8008d68:	2102      	movs	r1, #2
 8008d6a:	5499      	strb	r1, [r3, r2]
 8008d6c:	e01b      	b.n	8008da6 <HAL_TIM_PWM_Start+0xf2>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d104      	bne.n	8008d7e <HAL_TIM_PWM_Start+0xca>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2240      	movs	r2, #64	; 0x40
 8008d78:	2102      	movs	r1, #2
 8008d7a:	5499      	strb	r1, [r3, r2]
 8008d7c:	e013      	b.n	8008da6 <HAL_TIM_PWM_Start+0xf2>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b0c      	cmp	r3, #12
 8008d82:	d104      	bne.n	8008d8e <HAL_TIM_PWM_Start+0xda>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2241      	movs	r2, #65	; 0x41
 8008d88:	2102      	movs	r1, #2
 8008d8a:	5499      	strb	r1, [r3, r2]
 8008d8c:	e00b      	b.n	8008da6 <HAL_TIM_PWM_Start+0xf2>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b10      	cmp	r3, #16
 8008d92:	d104      	bne.n	8008d9e <HAL_TIM_PWM_Start+0xea>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2242      	movs	r2, #66	; 0x42
 8008d98:	2102      	movs	r1, #2
 8008d9a:	5499      	strb	r1, [r3, r2]
 8008d9c:	e003      	b.n	8008da6 <HAL_TIM_PWM_Start+0xf2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2243      	movs	r2, #67	; 0x43
 8008da2:	2102      	movs	r1, #2
 8008da4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	2201      	movs	r2, #1
 8008dae:	0018      	movs	r0, r3
 8008db0:	f001 f8ae 	bl	8009f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a2a      	ldr	r2, [pc, #168]	; (8008e64 <HAL_TIM_PWM_Start+0x1b0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00e      	beq.n	8008ddc <HAL_TIM_PWM_Start+0x128>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a29      	ldr	r2, [pc, #164]	; (8008e68 <HAL_TIM_PWM_Start+0x1b4>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d009      	beq.n	8008ddc <HAL_TIM_PWM_Start+0x128>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a27      	ldr	r2, [pc, #156]	; (8008e6c <HAL_TIM_PWM_Start+0x1b8>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d004      	beq.n	8008ddc <HAL_TIM_PWM_Start+0x128>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a26      	ldr	r2, [pc, #152]	; (8008e70 <HAL_TIM_PWM_Start+0x1bc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d101      	bne.n	8008de0 <HAL_TIM_PWM_Start+0x12c>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e000      	b.n	8008de2 <HAL_TIM_PWM_Start+0x12e>
 8008de0:	2300      	movs	r3, #0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d008      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2180      	movs	r1, #128	; 0x80
 8008df2:	0209      	lsls	r1, r1, #8
 8008df4:	430a      	orrs	r2, r1
 8008df6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a19      	ldr	r2, [pc, #100]	; (8008e64 <HAL_TIM_PWM_Start+0x1b0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d009      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x162>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1b      	ldr	r2, [pc, #108]	; (8008e74 <HAL_TIM_PWM_Start+0x1c0>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d004      	beq.n	8008e16 <HAL_TIM_PWM_Start+0x162>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a15      	ldr	r2, [pc, #84]	; (8008e68 <HAL_TIM_PWM_Start+0x1b4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d116      	bne.n	8008e44 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	4a16      	ldr	r2, [pc, #88]	; (8008e78 <HAL_TIM_PWM_Start+0x1c4>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b06      	cmp	r3, #6
 8008e26:	d016      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x1a2>
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	2380      	movs	r3, #128	; 0x80
 8008e2c:	025b      	lsls	r3, r3, #9
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d011      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e42:	e008      	b.n	8008e56 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2101      	movs	r1, #1
 8008e50:	430a      	orrs	r2, r1
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e000      	b.n	8008e58 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e56:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	b004      	add	sp, #16
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	46c0      	nop			; (mov r8, r8)
 8008e64:	40012c00 	.word	0x40012c00
 8008e68:	40014000 	.word	0x40014000
 8008e6c:	40014400 	.word	0x40014400
 8008e70:	40014800 	.word	0x40014800
 8008e74:	40000400 	.word	0x40000400
 8008e78:	00010007 	.word	0x00010007

08008e7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e090      	b.n	8008fb2 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	223d      	movs	r2, #61	; 0x3d
 8008e94:	5c9b      	ldrb	r3, [r3, r2]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d107      	bne.n	8008eac <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	223c      	movs	r2, #60	; 0x3c
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7fb fb98 	bl	80045dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	223d      	movs	r2, #61	; 0x3d
 8008eb0:	2102      	movs	r1, #2
 8008eb2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689a      	ldr	r2, [r3, #8]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	493f      	ldr	r1, [pc, #252]	; (8008fbc <HAL_TIM_Encoder_Init+0x140>)
 8008ec0:	400a      	ands	r2, r1
 8008ec2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	0019      	movs	r1, r3
 8008ece:	0010      	movs	r0, r2
 8008ed0:	f000 fc48 	bl	8009764 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	4a31      	ldr	r2, [pc, #196]	; (8008fc0 <HAL_TIM_Encoder_Init+0x144>)
 8008efa:	4013      	ands	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	4a2c      	ldr	r2, [pc, #176]	; (8008fc4 <HAL_TIM_Encoder_Init+0x148>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	4a2b      	ldr	r2, [pc, #172]	; (8008fc8 <HAL_TIM_Encoder_Init+0x14c>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	011a      	lsls	r2, r3, #4
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	031b      	lsls	r3, r3, #12
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2222      	movs	r2, #34	; 0x22
 8008f4a:	4393      	bics	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2288      	movs	r2, #136	; 0x88
 8008f52:	4393      	bics	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	4313      	orrs	r3, r2
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2248      	movs	r2, #72	; 0x48
 8008f84:	2101      	movs	r1, #1
 8008f86:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	223e      	movs	r2, #62	; 0x3e
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	223f      	movs	r2, #63	; 0x3f
 8008f94:	2101      	movs	r1, #1
 8008f96:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2244      	movs	r2, #68	; 0x44
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2245      	movs	r2, #69	; 0x45
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	223d      	movs	r2, #61	; 0x3d
 8008fac:	2101      	movs	r1, #1
 8008fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b006      	add	sp, #24
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	46c0      	nop			; (mov r8, r8)
 8008fbc:	fffebff8 	.word	0xfffebff8
 8008fc0:	fffffcfc 	.word	0xfffffcfc
 8008fc4:	fffff3f3 	.word	0xfffff3f3
 8008fc8:	ffff0f0f 	.word	0xffff0f0f

08008fcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fcc:	b590      	push	{r4, r7, lr}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008fd6:	200f      	movs	r0, #15
 8008fd8:	183b      	adds	r3, r7, r0
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	213e      	movs	r1, #62	; 0x3e
 8008fde:	5c52      	ldrb	r2, [r2, r1]
 8008fe0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008fe2:	230e      	movs	r3, #14
 8008fe4:	18fb      	adds	r3, r7, r3
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	213f      	movs	r1, #63	; 0x3f
 8008fea:	5c52      	ldrb	r2, [r2, r1]
 8008fec:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008fee:	240d      	movs	r4, #13
 8008ff0:	193b      	adds	r3, r7, r4
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	2144      	movs	r1, #68	; 0x44
 8008ff6:	5c52      	ldrb	r2, [r2, r1]
 8008ff8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	18fb      	adds	r3, r7, r3
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	2145      	movs	r1, #69	; 0x45
 8009002:	5c52      	ldrb	r2, [r2, r1]
 8009004:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d112      	bne.n	8009032 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800900c:	183b      	adds	r3, r7, r0
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d103      	bne.n	800901c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009014:	193b      	adds	r3, r7, r4
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d001      	beq.n	8009020 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e075      	b.n	800910c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	223e      	movs	r2, #62	; 0x3e
 8009024:	2102      	movs	r1, #2
 8009026:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2244      	movs	r2, #68	; 0x44
 800902c:	2102      	movs	r1, #2
 800902e:	5499      	strb	r1, [r3, r2]
 8009030:	e03d      	b.n	80090ae <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b04      	cmp	r3, #4
 8009036:	d114      	bne.n	8009062 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009038:	230e      	movs	r3, #14
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d104      	bne.n	800904c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009042:	230c      	movs	r3, #12
 8009044:	18fb      	adds	r3, r7, r3
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d001      	beq.n	8009050 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e05d      	b.n	800910c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	223f      	movs	r2, #63	; 0x3f
 8009054:	2102      	movs	r1, #2
 8009056:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2245      	movs	r2, #69	; 0x45
 800905c:	2102      	movs	r1, #2
 800905e:	5499      	strb	r1, [r3, r2]
 8009060:	e025      	b.n	80090ae <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009062:	230f      	movs	r3, #15
 8009064:	18fb      	adds	r3, r7, r3
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d10e      	bne.n	800908a <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800906c:	230e      	movs	r3, #14
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d109      	bne.n	800908a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009076:	230d      	movs	r3, #13
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d104      	bne.n	800908a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009080:	230c      	movs	r3, #12
 8009082:	18fb      	adds	r3, r7, r3
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d001      	beq.n	800908e <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e03e      	b.n	800910c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	223e      	movs	r2, #62	; 0x3e
 8009092:	2102      	movs	r1, #2
 8009094:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	223f      	movs	r2, #63	; 0x3f
 800909a:	2102      	movs	r1, #2
 800909c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2244      	movs	r2, #68	; 0x44
 80090a2:	2102      	movs	r1, #2
 80090a4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2245      	movs	r2, #69	; 0x45
 80090aa:	2102      	movs	r1, #2
 80090ac:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <HAL_TIM_Encoder_Start+0xf0>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d008      	beq.n	80090cc <HAL_TIM_Encoder_Start+0x100>
 80090ba:	e00f      	b.n	80090dc <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2201      	movs	r2, #1
 80090c2:	2100      	movs	r1, #0
 80090c4:	0018      	movs	r0, r3
 80090c6:	f000 ff23 	bl	8009f10 <TIM_CCxChannelCmd>
      break;
 80090ca:	e016      	b.n	80090fa <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2201      	movs	r2, #1
 80090d2:	2104      	movs	r1, #4
 80090d4:	0018      	movs	r0, r3
 80090d6:	f000 ff1b 	bl	8009f10 <TIM_CCxChannelCmd>
      break;
 80090da:	e00e      	b.n	80090fa <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2201      	movs	r2, #1
 80090e2:	2100      	movs	r1, #0
 80090e4:	0018      	movs	r0, r3
 80090e6:	f000 ff13 	bl	8009f10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2201      	movs	r2, #1
 80090f0:	2104      	movs	r1, #4
 80090f2:	0018      	movs	r0, r3
 80090f4:	f000 ff0c 	bl	8009f10 <TIM_CCxChannelCmd>
      break;
 80090f8:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2101      	movs	r1, #1
 8009106:	430a      	orrs	r2, r1
 8009108:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	0018      	movs	r0, r3
 800910e:	46bd      	mov	sp, r7
 8009110:	b005      	add	sp, #20
 8009112:	bd90      	pop	{r4, r7, pc}

08009114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2202      	movs	r2, #2
 8009124:	4013      	ands	r3, r2
 8009126:	2b02      	cmp	r3, #2
 8009128:	d124      	bne.n	8009174 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2202      	movs	r2, #2
 8009132:	4013      	ands	r3, r2
 8009134:	2b02      	cmp	r3, #2
 8009136:	d11d      	bne.n	8009174 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2203      	movs	r2, #3
 800913e:	4252      	negs	r2, r2
 8009140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	2203      	movs	r2, #3
 8009150:	4013      	ands	r3, r2
 8009152:	d004      	beq.n	800915e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	0018      	movs	r0, r3
 8009158:	f000 faec 	bl	8009734 <HAL_TIM_IC_CaptureCallback>
 800915c:	e007      	b.n	800916e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	0018      	movs	r0, r3
 8009162:	f000 fadf 	bl	8009724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	0018      	movs	r0, r3
 800916a:	f000 faeb 	bl	8009744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2204      	movs	r2, #4
 800917c:	4013      	ands	r3, r2
 800917e:	2b04      	cmp	r3, #4
 8009180:	d125      	bne.n	80091ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2204      	movs	r2, #4
 800918a:	4013      	ands	r3, r2
 800918c:	2b04      	cmp	r3, #4
 800918e:	d11e      	bne.n	80091ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2205      	movs	r2, #5
 8009196:	4252      	negs	r2, r2
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	23c0      	movs	r3, #192	; 0xc0
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4013      	ands	r3, r2
 80091ac:	d004      	beq.n	80091b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	0018      	movs	r0, r3
 80091b2:	f000 fabf 	bl	8009734 <HAL_TIM_IC_CaptureCallback>
 80091b6:	e007      	b.n	80091c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	0018      	movs	r0, r3
 80091bc:	f000 fab2 	bl	8009724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	0018      	movs	r0, r3
 80091c4:	f000 fabe 	bl	8009744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2208      	movs	r2, #8
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d124      	bne.n	8009226 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	2208      	movs	r2, #8
 80091e4:	4013      	ands	r3, r2
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d11d      	bne.n	8009226 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2209      	movs	r2, #9
 80091f0:	4252      	negs	r2, r2
 80091f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2204      	movs	r2, #4
 80091f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	2203      	movs	r2, #3
 8009202:	4013      	ands	r3, r2
 8009204:	d004      	beq.n	8009210 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	0018      	movs	r0, r3
 800920a:	f000 fa93 	bl	8009734 <HAL_TIM_IC_CaptureCallback>
 800920e:	e007      	b.n	8009220 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	0018      	movs	r0, r3
 8009214:	f000 fa86 	bl	8009724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	0018      	movs	r0, r3
 800921c:	f000 fa92 	bl	8009744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2210      	movs	r2, #16
 800922e:	4013      	ands	r3, r2
 8009230:	2b10      	cmp	r3, #16
 8009232:	d125      	bne.n	8009280 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2210      	movs	r2, #16
 800923c:	4013      	ands	r3, r2
 800923e:	2b10      	cmp	r3, #16
 8009240:	d11e      	bne.n	8009280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2211      	movs	r2, #17
 8009248:	4252      	negs	r2, r2
 800924a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2208      	movs	r2, #8
 8009250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69da      	ldr	r2, [r3, #28]
 8009258:	23c0      	movs	r3, #192	; 0xc0
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4013      	ands	r3, r2
 800925e:	d004      	beq.n	800926a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	0018      	movs	r0, r3
 8009264:	f000 fa66 	bl	8009734 <HAL_TIM_IC_CaptureCallback>
 8009268:	e007      	b.n	800927a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	0018      	movs	r0, r3
 800926e:	f000 fa59 	bl	8009724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	0018      	movs	r0, r3
 8009276:	f000 fa65 	bl	8009744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	2201      	movs	r2, #1
 8009288:	4013      	ands	r3, r2
 800928a:	2b01      	cmp	r3, #1
 800928c:	d10f      	bne.n	80092ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	4013      	ands	r3, r2
 8009298:	2b01      	cmp	r3, #1
 800929a:	d108      	bne.n	80092ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2202      	movs	r2, #2
 80092a2:	4252      	negs	r2, r2
 80092a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	0018      	movs	r0, r3
 80092aa:	f7fb fa27 	bl	80046fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	2280      	movs	r2, #128	; 0x80
 80092b6:	4013      	ands	r3, r2
 80092b8:	2b80      	cmp	r3, #128	; 0x80
 80092ba:	d10f      	bne.n	80092dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	2280      	movs	r2, #128	; 0x80
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b80      	cmp	r3, #128	; 0x80
 80092c8:	d108      	bne.n	80092dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2281      	movs	r2, #129	; 0x81
 80092d0:	4252      	negs	r2, r2
 80092d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	0018      	movs	r0, r3
 80092d8:	f000 ff54 	bl	800a184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691a      	ldr	r2, [r3, #16]
 80092e2:	2380      	movs	r3, #128	; 0x80
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	401a      	ands	r2, r3
 80092e8:	2380      	movs	r3, #128	; 0x80
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d10e      	bne.n	800930e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	2280      	movs	r2, #128	; 0x80
 80092f8:	4013      	ands	r3, r2
 80092fa:	2b80      	cmp	r3, #128	; 0x80
 80092fc:	d107      	bne.n	800930e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1c      	ldr	r2, [pc, #112]	; (8009374 <HAL_TIM_IRQHandler+0x260>)
 8009304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	0018      	movs	r0, r3
 800930a:	f000 ff43 	bl	800a194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	2240      	movs	r2, #64	; 0x40
 8009316:	4013      	ands	r3, r2
 8009318:	2b40      	cmp	r3, #64	; 0x40
 800931a:	d10f      	bne.n	800933c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	2240      	movs	r2, #64	; 0x40
 8009324:	4013      	ands	r3, r2
 8009326:	2b40      	cmp	r3, #64	; 0x40
 8009328:	d108      	bne.n	800933c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2241      	movs	r2, #65	; 0x41
 8009330:	4252      	negs	r2, r2
 8009332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	0018      	movs	r0, r3
 8009338:	f000 fa0c 	bl	8009754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	2220      	movs	r2, #32
 8009344:	4013      	ands	r3, r2
 8009346:	2b20      	cmp	r3, #32
 8009348:	d10f      	bne.n	800936a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	4013      	ands	r3, r2
 8009354:	2b20      	cmp	r3, #32
 8009356:	d108      	bne.n	800936a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2221      	movs	r2, #33	; 0x21
 800935e:	4252      	negs	r2, r2
 8009360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	0018      	movs	r0, r3
 8009366:	f000 ff05 	bl	800a174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	46bd      	mov	sp, r7
 800936e:	b002      	add	sp, #8
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	fffffeff 	.word	0xfffffeff

08009378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009384:	2317      	movs	r3, #23
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	2200      	movs	r2, #0
 800938a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	223c      	movs	r2, #60	; 0x3c
 8009390:	5c9b      	ldrb	r3, [r3, r2]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_TIM_PWM_ConfigChannel+0x22>
 8009396:	2302      	movs	r3, #2
 8009398:	e0e5      	b.n	8009566 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	223c      	movs	r2, #60	; 0x3c
 800939e:	2101      	movs	r1, #1
 80093a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b14      	cmp	r3, #20
 80093a6:	d900      	bls.n	80093aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80093a8:	e0d1      	b.n	800954e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	009a      	lsls	r2, r3, #2
 80093ae:	4b70      	ldr	r3, [pc, #448]	; (8009570 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80093b0:	18d3      	adds	r3, r2, r3
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	0011      	movs	r1, r2
 80093be:	0018      	movs	r0, r3
 80093c0:	f000 fa46 	bl	8009850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2108      	movs	r1, #8
 80093d0:	430a      	orrs	r2, r1
 80093d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2104      	movs	r1, #4
 80093e0:	438a      	bics	r2, r1
 80093e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6999      	ldr	r1, [r3, #24]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	691a      	ldr	r2, [r3, #16]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	619a      	str	r2, [r3, #24]
      break;
 80093f6:	e0af      	b.n	8009558 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	0011      	movs	r1, r2
 8009400:	0018      	movs	r0, r3
 8009402:	f000 faaf 	bl	8009964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2180      	movs	r1, #128	; 0x80
 8009412:	0109      	lsls	r1, r1, #4
 8009414:	430a      	orrs	r2, r1
 8009416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4954      	ldr	r1, [pc, #336]	; (8009574 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009424:	400a      	ands	r2, r1
 8009426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6999      	ldr	r1, [r3, #24]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	021a      	lsls	r2, r3, #8
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	619a      	str	r2, [r3, #24]
      break;
 800943c:	e08c      	b.n	8009558 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	0011      	movs	r1, r2
 8009446:	0018      	movs	r0, r3
 8009448:	f000 fb10 	bl	8009a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69da      	ldr	r2, [r3, #28]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2108      	movs	r1, #8
 8009458:	430a      	orrs	r2, r1
 800945a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69da      	ldr	r2, [r3, #28]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2104      	movs	r1, #4
 8009468:	438a      	bics	r2, r1
 800946a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69d9      	ldr	r1, [r3, #28]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	61da      	str	r2, [r3, #28]
      break;
 800947e:	e06b      	b.n	8009558 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	0011      	movs	r1, r2
 8009488:	0018      	movs	r0, r3
 800948a:	f000 fb77 	bl	8009b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69da      	ldr	r2, [r3, #28]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2180      	movs	r1, #128	; 0x80
 800949a:	0109      	lsls	r1, r1, #4
 800949c:	430a      	orrs	r2, r1
 800949e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69da      	ldr	r2, [r3, #28]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4932      	ldr	r1, [pc, #200]	; (8009574 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80094ac:	400a      	ands	r2, r1
 80094ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69d9      	ldr	r1, [r3, #28]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	021a      	lsls	r2, r3, #8
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	61da      	str	r2, [r3, #28]
      break;
 80094c4:	e048      	b.n	8009558 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	0011      	movs	r1, r2
 80094ce:	0018      	movs	r0, r3
 80094d0:	f000 fbbe 	bl	8009c50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2108      	movs	r1, #8
 80094e0:	430a      	orrs	r2, r1
 80094e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2104      	movs	r1, #4
 80094f0:	438a      	bics	r2, r1
 80094f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	691a      	ldr	r2, [r3, #16]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009506:	e027      	b.n	8009558 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	0011      	movs	r1, r2
 8009510:	0018      	movs	r0, r3
 8009512:	f000 fbfd 	bl	8009d10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2180      	movs	r1, #128	; 0x80
 8009522:	0109      	lsls	r1, r1, #4
 8009524:	430a      	orrs	r2, r1
 8009526:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4910      	ldr	r1, [pc, #64]	; (8009574 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009534:	400a      	ands	r2, r1
 8009536:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	021a      	lsls	r2, r3, #8
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800954c:	e004      	b.n	8009558 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800954e:	2317      	movs	r3, #23
 8009550:	18fb      	adds	r3, r7, r3
 8009552:	2201      	movs	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]
      break;
 8009556:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	223c      	movs	r2, #60	; 0x3c
 800955c:	2100      	movs	r1, #0
 800955e:	5499      	strb	r1, [r3, r2]

  return status;
 8009560:	2317      	movs	r3, #23
 8009562:	18fb      	adds	r3, r7, r3
 8009564:	781b      	ldrb	r3, [r3, #0]
}
 8009566:	0018      	movs	r0, r3
 8009568:	46bd      	mov	sp, r7
 800956a:	b006      	add	sp, #24
 800956c:	bd80      	pop	{r7, pc}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	080181b8 	.word	0x080181b8
 8009574:	fffffbff 	.word	0xfffffbff

08009578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009582:	230f      	movs	r3, #15
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	223c      	movs	r2, #60	; 0x3c
 800958e:	5c9b      	ldrb	r3, [r3, r2]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_TIM_ConfigClockSource+0x20>
 8009594:	2302      	movs	r3, #2
 8009596:	e0bc      	b.n	8009712 <HAL_TIM_ConfigClockSource+0x19a>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	223c      	movs	r2, #60	; 0x3c
 800959c:	2101      	movs	r1, #1
 800959e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	223d      	movs	r2, #61	; 0x3d
 80095a4:	2102      	movs	r1, #2
 80095a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4a5a      	ldr	r2, [pc, #360]	; (800971c <HAL_TIM_ConfigClockSource+0x1a4>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4a59      	ldr	r2, [pc, #356]	; (8009720 <HAL_TIM_ConfigClockSource+0x1a8>)
 80095bc:	4013      	ands	r3, r2
 80095be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2280      	movs	r2, #128	; 0x80
 80095ce:	0192      	lsls	r2, r2, #6
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d040      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0xde>
 80095d4:	2280      	movs	r2, #128	; 0x80
 80095d6:	0192      	lsls	r2, r2, #6
 80095d8:	4293      	cmp	r3, r2
 80095da:	d900      	bls.n	80095de <HAL_TIM_ConfigClockSource+0x66>
 80095dc:	e088      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 80095de:	2280      	movs	r2, #128	; 0x80
 80095e0:	0152      	lsls	r2, r2, #5
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d100      	bne.n	80095e8 <HAL_TIM_ConfigClockSource+0x70>
 80095e6:	e088      	b.n	80096fa <HAL_TIM_ConfigClockSource+0x182>
 80095e8:	2280      	movs	r2, #128	; 0x80
 80095ea:	0152      	lsls	r2, r2, #5
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d900      	bls.n	80095f2 <HAL_TIM_ConfigClockSource+0x7a>
 80095f0:	e07e      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 80095f2:	2b70      	cmp	r3, #112	; 0x70
 80095f4:	d018      	beq.n	8009628 <HAL_TIM_ConfigClockSource+0xb0>
 80095f6:	d900      	bls.n	80095fa <HAL_TIM_ConfigClockSource+0x82>
 80095f8:	e07a      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 80095fa:	2b60      	cmp	r3, #96	; 0x60
 80095fc:	d04f      	beq.n	800969e <HAL_TIM_ConfigClockSource+0x126>
 80095fe:	d900      	bls.n	8009602 <HAL_TIM_ConfigClockSource+0x8a>
 8009600:	e076      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 8009602:	2b50      	cmp	r3, #80	; 0x50
 8009604:	d03b      	beq.n	800967e <HAL_TIM_ConfigClockSource+0x106>
 8009606:	d900      	bls.n	800960a <HAL_TIM_ConfigClockSource+0x92>
 8009608:	e072      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 800960a:	2b40      	cmp	r3, #64	; 0x40
 800960c:	d057      	beq.n	80096be <HAL_TIM_ConfigClockSource+0x146>
 800960e:	d900      	bls.n	8009612 <HAL_TIM_ConfigClockSource+0x9a>
 8009610:	e06e      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 8009612:	2b30      	cmp	r3, #48	; 0x30
 8009614:	d063      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x166>
 8009616:	d86b      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 8009618:	2b20      	cmp	r3, #32
 800961a:	d060      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x166>
 800961c:	d868      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d05d      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x166>
 8009622:	2b10      	cmp	r3, #16
 8009624:	d05b      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x166>
 8009626:	e063      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6818      	ldr	r0, [r3, #0]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	6899      	ldr	r1, [r3, #8]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f000 fc4a 	bl	8009ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2277      	movs	r2, #119	; 0x77
 8009648:	4313      	orrs	r3, r2
 800964a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	609a      	str	r2, [r3, #8]
      break;
 8009654:	e052      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	6899      	ldr	r1, [r3, #8]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f000 fc33 	bl	8009ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2180      	movs	r1, #128	; 0x80
 8009676:	01c9      	lsls	r1, r1, #7
 8009678:	430a      	orrs	r2, r1
 800967a:	609a      	str	r2, [r3, #8]
      break;
 800967c:	e03e      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	6859      	ldr	r1, [r3, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	001a      	movs	r2, r3
 800968c:	f000 fba4 	bl	8009dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2150      	movs	r1, #80	; 0x50
 8009696:	0018      	movs	r0, r3
 8009698:	f000 fbfe 	bl	8009e98 <TIM_ITRx_SetConfig>
      break;
 800969c:	e02e      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	6859      	ldr	r1, [r3, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	001a      	movs	r2, r3
 80096ac:	f000 fbc2 	bl	8009e34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2160      	movs	r1, #96	; 0x60
 80096b6:	0018      	movs	r0, r3
 80096b8:	f000 fbee 	bl	8009e98 <TIM_ITRx_SetConfig>
      break;
 80096bc:	e01e      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	6859      	ldr	r1, [r3, #4]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	001a      	movs	r2, r3
 80096cc:	f000 fb84 	bl	8009dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2140      	movs	r1, #64	; 0x40
 80096d6:	0018      	movs	r0, r3
 80096d8:	f000 fbde 	bl	8009e98 <TIM_ITRx_SetConfig>
      break;
 80096dc:	e00e      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	0019      	movs	r1, r3
 80096e8:	0010      	movs	r0, r2
 80096ea:	f000 fbd5 	bl	8009e98 <TIM_ITRx_SetConfig>
      break;
 80096ee:	e005      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80096f0:	230f      	movs	r3, #15
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	2201      	movs	r2, #1
 80096f6:	701a      	strb	r2, [r3, #0]
      break;
 80096f8:	e000      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80096fa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	223d      	movs	r2, #61	; 0x3d
 8009700:	2101      	movs	r1, #1
 8009702:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	223c      	movs	r2, #60	; 0x3c
 8009708:	2100      	movs	r1, #0
 800970a:	5499      	strb	r1, [r3, r2]

  return status;
 800970c:	230f      	movs	r3, #15
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	781b      	ldrb	r3, [r3, #0]
}
 8009712:	0018      	movs	r0, r3
 8009714:	46bd      	mov	sp, r7
 8009716:	b004      	add	sp, #16
 8009718:	bd80      	pop	{r7, pc}
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	ffceff88 	.word	0xffceff88
 8009720:	ffff00ff 	.word	0xffff00ff

08009724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800972c:	46c0      	nop			; (mov r8, r8)
 800972e:	46bd      	mov	sp, r7
 8009730:	b002      	add	sp, #8
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800973c:	46c0      	nop			; (mov r8, r8)
 800973e:	46bd      	mov	sp, r7
 8009740:	b002      	add	sp, #8
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800974c:	46c0      	nop			; (mov r8, r8)
 800974e:	46bd      	mov	sp, r7
 8009750:	b002      	add	sp, #8
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800975c:	46c0      	nop			; (mov r8, r8)
 800975e:	46bd      	mov	sp, r7
 8009760:	b002      	add	sp, #8
 8009762:	bd80      	pop	{r7, pc}

08009764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a2f      	ldr	r2, [pc, #188]	; (8009834 <TIM_Base_SetConfig+0xd0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_Base_SetConfig+0x20>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a2e      	ldr	r2, [pc, #184]	; (8009838 <TIM_Base_SetConfig+0xd4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d108      	bne.n	8009796 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2270      	movs	r2, #112	; 0x70
 8009788:	4393      	bics	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a26      	ldr	r2, [pc, #152]	; (8009834 <TIM_Base_SetConfig+0xd0>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d013      	beq.n	80097c6 <TIM_Base_SetConfig+0x62>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a25      	ldr	r2, [pc, #148]	; (8009838 <TIM_Base_SetConfig+0xd4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00f      	beq.n	80097c6 <TIM_Base_SetConfig+0x62>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a24      	ldr	r2, [pc, #144]	; (800983c <TIM_Base_SetConfig+0xd8>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d00b      	beq.n	80097c6 <TIM_Base_SetConfig+0x62>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a23      	ldr	r2, [pc, #140]	; (8009840 <TIM_Base_SetConfig+0xdc>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d007      	beq.n	80097c6 <TIM_Base_SetConfig+0x62>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a22      	ldr	r2, [pc, #136]	; (8009844 <TIM_Base_SetConfig+0xe0>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d003      	beq.n	80097c6 <TIM_Base_SetConfig+0x62>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a21      	ldr	r2, [pc, #132]	; (8009848 <TIM_Base_SetConfig+0xe4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d108      	bne.n	80097d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4a20      	ldr	r2, [pc, #128]	; (800984c <TIM_Base_SetConfig+0xe8>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2280      	movs	r2, #128	; 0x80
 80097dc:	4393      	bics	r3, r2
 80097de:	001a      	movs	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a0c      	ldr	r2, [pc, #48]	; (8009834 <TIM_Base_SetConfig+0xd0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d00b      	beq.n	800981e <TIM_Base_SetConfig+0xba>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a0d      	ldr	r2, [pc, #52]	; (8009840 <TIM_Base_SetConfig+0xdc>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d007      	beq.n	800981e <TIM_Base_SetConfig+0xba>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a0c      	ldr	r2, [pc, #48]	; (8009844 <TIM_Base_SetConfig+0xe0>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d003      	beq.n	800981e <TIM_Base_SetConfig+0xba>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a0b      	ldr	r2, [pc, #44]	; (8009848 <TIM_Base_SetConfig+0xe4>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d103      	bne.n	8009826 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	691a      	ldr	r2, [r3, #16]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	615a      	str	r2, [r3, #20]
}
 800982c:	46c0      	nop			; (mov r8, r8)
 800982e:	46bd      	mov	sp, r7
 8009830:	b004      	add	sp, #16
 8009832:	bd80      	pop	{r7, pc}
 8009834:	40012c00 	.word	0x40012c00
 8009838:	40000400 	.word	0x40000400
 800983c:	40002000 	.word	0x40002000
 8009840:	40014000 	.word	0x40014000
 8009844:	40014400 	.word	0x40014400
 8009848:	40014800 	.word	0x40014800
 800984c:	fffffcff 	.word	0xfffffcff

08009850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	2201      	movs	r2, #1
 8009860:	4393      	bics	r3, r2
 8009862:	001a      	movs	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a32      	ldr	r2, [pc, #200]	; (8009948 <TIM_OC1_SetConfig+0xf8>)
 800987e:	4013      	ands	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2203      	movs	r2, #3
 8009886:	4393      	bics	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2202      	movs	r2, #2
 8009898:	4393      	bics	r3, r2
 800989a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a28      	ldr	r2, [pc, #160]	; (800994c <TIM_OC1_SetConfig+0xfc>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d00b      	beq.n	80098c6 <TIM_OC1_SetConfig+0x76>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a27      	ldr	r2, [pc, #156]	; (8009950 <TIM_OC1_SetConfig+0x100>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d007      	beq.n	80098c6 <TIM_OC1_SetConfig+0x76>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a26      	ldr	r2, [pc, #152]	; (8009954 <TIM_OC1_SetConfig+0x104>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d003      	beq.n	80098c6 <TIM_OC1_SetConfig+0x76>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a25      	ldr	r2, [pc, #148]	; (8009958 <TIM_OC1_SetConfig+0x108>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d10c      	bne.n	80098e0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2208      	movs	r2, #8
 80098ca:	4393      	bics	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2204      	movs	r2, #4
 80098dc:	4393      	bics	r3, r2
 80098de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1a      	ldr	r2, [pc, #104]	; (800994c <TIM_OC1_SetConfig+0xfc>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d00b      	beq.n	8009900 <TIM_OC1_SetConfig+0xb0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a19      	ldr	r2, [pc, #100]	; (8009950 <TIM_OC1_SetConfig+0x100>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d007      	beq.n	8009900 <TIM_OC1_SetConfig+0xb0>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a18      	ldr	r2, [pc, #96]	; (8009954 <TIM_OC1_SetConfig+0x104>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_OC1_SetConfig+0xb0>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a17      	ldr	r2, [pc, #92]	; (8009958 <TIM_OC1_SetConfig+0x108>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d111      	bne.n	8009924 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4a16      	ldr	r2, [pc, #88]	; (800995c <TIM_OC1_SetConfig+0x10c>)
 8009904:	4013      	ands	r3, r2
 8009906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	4a15      	ldr	r2, [pc, #84]	; (8009960 <TIM_OC1_SetConfig+0x110>)
 800990c:	4013      	ands	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	4313      	orrs	r3, r2
 8009918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	621a      	str	r2, [r3, #32]
}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	46bd      	mov	sp, r7
 8009942:	b006      	add	sp, #24
 8009944:	bd80      	pop	{r7, pc}
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	fffeff8f 	.word	0xfffeff8f
 800994c:	40012c00 	.word	0x40012c00
 8009950:	40014000 	.word	0x40014000
 8009954:	40014400 	.word	0x40014400
 8009958:	40014800 	.word	0x40014800
 800995c:	fffffeff 	.word	0xfffffeff
 8009960:	fffffdff 	.word	0xfffffdff

08009964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	2210      	movs	r2, #16
 8009974:	4393      	bics	r3, r2
 8009976:	001a      	movs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4a2e      	ldr	r2, [pc, #184]	; (8009a4c <TIM_OC2_SetConfig+0xe8>)
 8009992:	4013      	ands	r3, r2
 8009994:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4a2d      	ldr	r2, [pc, #180]	; (8009a50 <TIM_OC2_SetConfig+0xec>)
 800999a:	4013      	ands	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	021b      	lsls	r3, r3, #8
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2220      	movs	r2, #32
 80099ae:	4393      	bics	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a24      	ldr	r2, [pc, #144]	; (8009a54 <TIM_OC2_SetConfig+0xf0>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d10d      	bne.n	80099e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2280      	movs	r2, #128	; 0x80
 80099ca:	4393      	bics	r3, r2
 80099cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2240      	movs	r2, #64	; 0x40
 80099de:	4393      	bics	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a1b      	ldr	r2, [pc, #108]	; (8009a54 <TIM_OC2_SetConfig+0xf0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d00b      	beq.n	8009a02 <TIM_OC2_SetConfig+0x9e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a1a      	ldr	r2, [pc, #104]	; (8009a58 <TIM_OC2_SetConfig+0xf4>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d007      	beq.n	8009a02 <TIM_OC2_SetConfig+0x9e>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a19      	ldr	r2, [pc, #100]	; (8009a5c <TIM_OC2_SetConfig+0xf8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d003      	beq.n	8009a02 <TIM_OC2_SetConfig+0x9e>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a18      	ldr	r2, [pc, #96]	; (8009a60 <TIM_OC2_SetConfig+0xfc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d113      	bne.n	8009a2a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	4a17      	ldr	r2, [pc, #92]	; (8009a64 <TIM_OC2_SetConfig+0x100>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	4a16      	ldr	r2, [pc, #88]	; (8009a68 <TIM_OC2_SetConfig+0x104>)
 8009a0e:	4013      	ands	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	621a      	str	r2, [r3, #32]
}
 8009a44:	46c0      	nop			; (mov r8, r8)
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b006      	add	sp, #24
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	feff8fff 	.word	0xfeff8fff
 8009a50:	fffffcff 	.word	0xfffffcff
 8009a54:	40012c00 	.word	0x40012c00
 8009a58:	40014000 	.word	0x40014000
 8009a5c:	40014400 	.word	0x40014400
 8009a60:	40014800 	.word	0x40014800
 8009a64:	fffffbff 	.word	0xfffffbff
 8009a68:	fffff7ff 	.word	0xfffff7ff

08009a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	4a35      	ldr	r2, [pc, #212]	; (8009b50 <TIM_OC3_SetConfig+0xe4>)
 8009a7c:	401a      	ands	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4a2f      	ldr	r2, [pc, #188]	; (8009b54 <TIM_OC3_SetConfig+0xe8>)
 8009a98:	4013      	ands	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2203      	movs	r2, #3
 8009aa0:	4393      	bics	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	4a29      	ldr	r2, [pc, #164]	; (8009b58 <TIM_OC3_SetConfig+0xec>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	021b      	lsls	r3, r3, #8
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a25      	ldr	r2, [pc, #148]	; (8009b5c <TIM_OC3_SetConfig+0xf0>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d10d      	bne.n	8009ae6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	4a24      	ldr	r2, [pc, #144]	; (8009b60 <TIM_OC3_SetConfig+0xf4>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	021b      	lsls	r3, r3, #8
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	4a20      	ldr	r2, [pc, #128]	; (8009b64 <TIM_OC3_SetConfig+0xf8>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a1c      	ldr	r2, [pc, #112]	; (8009b5c <TIM_OC3_SetConfig+0xf0>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d00b      	beq.n	8009b06 <TIM_OC3_SetConfig+0x9a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a1d      	ldr	r2, [pc, #116]	; (8009b68 <TIM_OC3_SetConfig+0xfc>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d007      	beq.n	8009b06 <TIM_OC3_SetConfig+0x9a>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a1c      	ldr	r2, [pc, #112]	; (8009b6c <TIM_OC3_SetConfig+0x100>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d003      	beq.n	8009b06 <TIM_OC3_SetConfig+0x9a>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a1b      	ldr	r2, [pc, #108]	; (8009b70 <TIM_OC3_SetConfig+0x104>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d113      	bne.n	8009b2e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	4a1a      	ldr	r2, [pc, #104]	; (8009b74 <TIM_OC3_SetConfig+0x108>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	4a19      	ldr	r2, [pc, #100]	; (8009b78 <TIM_OC3_SetConfig+0x10c>)
 8009b12:	4013      	ands	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	621a      	str	r2, [r3, #32]
}
 8009b48:	46c0      	nop			; (mov r8, r8)
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	b006      	add	sp, #24
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	fffffeff 	.word	0xfffffeff
 8009b54:	fffeff8f 	.word	0xfffeff8f
 8009b58:	fffffdff 	.word	0xfffffdff
 8009b5c:	40012c00 	.word	0x40012c00
 8009b60:	fffff7ff 	.word	0xfffff7ff
 8009b64:	fffffbff 	.word	0xfffffbff
 8009b68:	40014000 	.word	0x40014000
 8009b6c:	40014400 	.word	0x40014400
 8009b70:	40014800 	.word	0x40014800
 8009b74:	ffffefff 	.word	0xffffefff
 8009b78:	ffffdfff 	.word	0xffffdfff

08009b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	4a28      	ldr	r2, [pc, #160]	; (8009c2c <TIM_OC4_SetConfig+0xb0>)
 8009b8c:	401a      	ands	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4a22      	ldr	r2, [pc, #136]	; (8009c30 <TIM_OC4_SetConfig+0xb4>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4a21      	ldr	r2, [pc, #132]	; (8009c34 <TIM_OC4_SetConfig+0xb8>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	021b      	lsls	r3, r3, #8
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4a1d      	ldr	r2, [pc, #116]	; (8009c38 <TIM_OC4_SetConfig+0xbc>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	031b      	lsls	r3, r3, #12
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a19      	ldr	r2, [pc, #100]	; (8009c3c <TIM_OC4_SetConfig+0xc0>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d00b      	beq.n	8009bf4 <TIM_OC4_SetConfig+0x78>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a18      	ldr	r2, [pc, #96]	; (8009c40 <TIM_OC4_SetConfig+0xc4>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d007      	beq.n	8009bf4 <TIM_OC4_SetConfig+0x78>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a17      	ldr	r2, [pc, #92]	; (8009c44 <TIM_OC4_SetConfig+0xc8>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d003      	beq.n	8009bf4 <TIM_OC4_SetConfig+0x78>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a16      	ldr	r2, [pc, #88]	; (8009c48 <TIM_OC4_SetConfig+0xcc>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d109      	bne.n	8009c08 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	4a15      	ldr	r2, [pc, #84]	; (8009c4c <TIM_OC4_SetConfig+0xd0>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	019b      	lsls	r3, r3, #6
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	621a      	str	r2, [r3, #32]
}
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	46bd      	mov	sp, r7
 8009c26:	b006      	add	sp, #24
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	46c0      	nop			; (mov r8, r8)
 8009c2c:	ffffefff 	.word	0xffffefff
 8009c30:	feff8fff 	.word	0xfeff8fff
 8009c34:	fffffcff 	.word	0xfffffcff
 8009c38:	ffffdfff 	.word	0xffffdfff
 8009c3c:	40012c00 	.word	0x40012c00
 8009c40:	40014000 	.word	0x40014000
 8009c44:	40014400 	.word	0x40014400
 8009c48:	40014800 	.word	0x40014800
 8009c4c:	ffffbfff 	.word	0xffffbfff

08009c50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	4a25      	ldr	r2, [pc, #148]	; (8009cf4 <TIM_OC5_SetConfig+0xa4>)
 8009c60:	401a      	ands	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4a1f      	ldr	r2, [pc, #124]	; (8009cf8 <TIM_OC5_SetConfig+0xa8>)
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	4a1b      	ldr	r2, [pc, #108]	; (8009cfc <TIM_OC5_SetConfig+0xac>)
 8009c8e:	4013      	ands	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	041b      	lsls	r3, r3, #16
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a17      	ldr	r2, [pc, #92]	; (8009d00 <TIM_OC5_SetConfig+0xb0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00b      	beq.n	8009cbe <TIM_OC5_SetConfig+0x6e>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <TIM_OC5_SetConfig+0xb4>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d007      	beq.n	8009cbe <TIM_OC5_SetConfig+0x6e>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a15      	ldr	r2, [pc, #84]	; (8009d08 <TIM_OC5_SetConfig+0xb8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d003      	beq.n	8009cbe <TIM_OC5_SetConfig+0x6e>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a14      	ldr	r2, [pc, #80]	; (8009d0c <TIM_OC5_SetConfig+0xbc>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d109      	bne.n	8009cd2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	4a0c      	ldr	r2, [pc, #48]	; (8009cf4 <TIM_OC5_SetConfig+0xa4>)
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	621a      	str	r2, [r3, #32]
}
 8009cec:	46c0      	nop			; (mov r8, r8)
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	b006      	add	sp, #24
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	fffeffff 	.word	0xfffeffff
 8009cf8:	fffeff8f 	.word	0xfffeff8f
 8009cfc:	fffdffff 	.word	0xfffdffff
 8009d00:	40012c00 	.word	0x40012c00
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	40014800 	.word	0x40014800

08009d10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	4a26      	ldr	r2, [pc, #152]	; (8009db8 <TIM_OC6_SetConfig+0xa8>)
 8009d20:	401a      	ands	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4a20      	ldr	r2, [pc, #128]	; (8009dbc <TIM_OC6_SetConfig+0xac>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	4a1c      	ldr	r2, [pc, #112]	; (8009dc0 <TIM_OC6_SetConfig+0xb0>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	051b      	lsls	r3, r3, #20
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a18      	ldr	r2, [pc, #96]	; (8009dc4 <TIM_OC6_SetConfig+0xb4>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d00b      	beq.n	8009d80 <TIM_OC6_SetConfig+0x70>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <TIM_OC6_SetConfig+0xb8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d007      	beq.n	8009d80 <TIM_OC6_SetConfig+0x70>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a16      	ldr	r2, [pc, #88]	; (8009dcc <TIM_OC6_SetConfig+0xbc>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d003      	beq.n	8009d80 <TIM_OC6_SetConfig+0x70>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a15      	ldr	r2, [pc, #84]	; (8009dd0 <TIM_OC6_SetConfig+0xc0>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d109      	bne.n	8009d94 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	4a14      	ldr	r2, [pc, #80]	; (8009dd4 <TIM_OC6_SetConfig+0xc4>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	029b      	lsls	r3, r3, #10
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	621a      	str	r2, [r3, #32]
}
 8009dae:	46c0      	nop			; (mov r8, r8)
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b006      	add	sp, #24
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	ffefffff 	.word	0xffefffff
 8009dbc:	feff8fff 	.word	0xfeff8fff
 8009dc0:	ffdfffff 	.word	0xffdfffff
 8009dc4:	40012c00 	.word	0x40012c00
 8009dc8:	40014000 	.word	0x40014000
 8009dcc:	40014400 	.word	0x40014400
 8009dd0:	40014800 	.word	0x40014800
 8009dd4:	fffbffff 	.word	0xfffbffff

08009dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6a1b      	ldr	r3, [r3, #32]
 8009de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	2201      	movs	r2, #1
 8009df0:	4393      	bics	r3, r2
 8009df2:	001a      	movs	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	22f0      	movs	r2, #240	; 0xf0
 8009e02:	4393      	bics	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	220a      	movs	r2, #10
 8009e14:	4393      	bics	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	621a      	str	r2, [r3, #32]
}
 8009e2c:	46c0      	nop			; (mov r8, r8)
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	b006      	add	sp, #24
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	2210      	movs	r2, #16
 8009e46:	4393      	bics	r3, r2
 8009e48:	001a      	movs	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	4a0d      	ldr	r2, [pc, #52]	; (8009e94 <TIM_TI2_ConfigInputStage+0x60>)
 8009e5e:	4013      	ands	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	031b      	lsls	r3, r3, #12
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	22a0      	movs	r2, #160	; 0xa0
 8009e70:	4393      	bics	r3, r2
 8009e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	621a      	str	r2, [r3, #32]
}
 8009e8a:	46c0      	nop			; (mov r8, r8)
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b006      	add	sp, #24
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	ffff0fff 	.word	0xffff0fff

08009e98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4a08      	ldr	r2, [pc, #32]	; (8009ecc <TIM_ITRx_SetConfig+0x34>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	2207      	movs	r2, #7
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	609a      	str	r2, [r3, #8]
}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b004      	add	sp, #16
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	ffcfff8f 	.word	0xffcfff8f

08009ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	4a09      	ldr	r2, [pc, #36]	; (8009f0c <TIM_ETR_SetConfig+0x3c>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	021a      	lsls	r2, r3, #8
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	609a      	str	r2, [r3, #8]
}
 8009f04:	46c0      	nop			; (mov r8, r8)
 8009f06:	46bd      	mov	sp, r7
 8009f08:	b006      	add	sp, #24
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	ffff00ff 	.word	0xffff00ff

08009f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	221f      	movs	r2, #31
 8009f20:	4013      	ands	r3, r2
 8009f22:	2201      	movs	r2, #1
 8009f24:	409a      	lsls	r2, r3
 8009f26:	0013      	movs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	43d2      	mvns	r2, r2
 8009f32:	401a      	ands	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6a1a      	ldr	r2, [r3, #32]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	211f      	movs	r1, #31
 8009f40:	400b      	ands	r3, r1
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4099      	lsls	r1, r3
 8009f46:	000b      	movs	r3, r1
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	621a      	str	r2, [r3, #32]
}
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	46bd      	mov	sp, r7
 8009f52:	b006      	add	sp, #24
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	223c      	movs	r2, #60	; 0x3c
 8009f66:	5c9b      	ldrb	r3, [r3, r2]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d101      	bne.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	e04f      	b.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	223c      	movs	r2, #60	; 0x3c
 8009f74:	2101      	movs	r1, #1
 8009f76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	223d      	movs	r2, #61	; 0x3d
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a20      	ldr	r2, [pc, #128]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d108      	bne.n	8009fac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4a1f      	ldr	r2, [pc, #124]	; (800a01c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2270      	movs	r2, #112	; 0x70
 8009fb0:	4393      	bics	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a13      	ldr	r2, [pc, #76]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d009      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a12      	ldr	r2, [pc, #72]	; (800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a11      	ldr	r2, [pc, #68]	; (800a024 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d10c      	bne.n	8009ffe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2280      	movs	r2, #128	; 0x80
 8009fe8:	4393      	bics	r3, r2
 8009fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	223d      	movs	r2, #61	; 0x3d
 800a002:	2101      	movs	r1, #1
 800a004:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	223c      	movs	r2, #60	; 0x3c
 800a00a:	2100      	movs	r1, #0
 800a00c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	b004      	add	sp, #16
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40012c00 	.word	0x40012c00
 800a01c:	ff0fffff 	.word	0xff0fffff
 800a020:	40000400 	.word	0x40000400
 800a024:	40014000 	.word	0x40014000

0800a028 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	223c      	movs	r2, #60	; 0x3c
 800a03a:	5c9b      	ldrb	r3, [r3, r2]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a040:	2302      	movs	r3, #2
 800a042:	e079      	b.n	800a138 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	223c      	movs	r2, #60	; 0x3c
 800a048:	2101      	movs	r1, #1
 800a04a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	22ff      	movs	r2, #255	; 0xff
 800a050:	4393      	bics	r3, r2
 800a052:	001a      	movs	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	4313      	orrs	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4a38      	ldr	r2, [pc, #224]	; (800a140 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a060:	401a      	ands	r2, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	4313      	orrs	r3, r2
 800a068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a35      	ldr	r2, [pc, #212]	; (800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a06e:	401a      	ands	r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	4313      	orrs	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4a33      	ldr	r2, [pc, #204]	; (800a148 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a07c:	401a      	ands	r2, r3
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4a30      	ldr	r2, [pc, #192]	; (800a14c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a08a:	401a      	ands	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4a2e      	ldr	r2, [pc, #184]	; (800a150 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a098:	401a      	ands	r2, r3
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4a2b      	ldr	r2, [pc, #172]	; (800a154 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a0a6:	401a      	ands	r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4a29      	ldr	r2, [pc, #164]	; (800a158 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a0b4:	401a      	ands	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	041b      	lsls	r3, r3, #16
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a25      	ldr	r2, [pc, #148]	; (800a15c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d106      	bne.n	800a0d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4a24      	ldr	r2, [pc, #144]	; (800a160 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0ce:	401a      	ands	r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d121      	bne.n	800a126 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4a1f      	ldr	r2, [pc, #124]	; (800a164 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a0e6:	401a      	ands	r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ec:	051b      	lsls	r3, r3, #20
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4a1c      	ldr	r2, [pc, #112]	; (800a168 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800a0f6:	401a      	ands	r2, r3
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4a1a      	ldr	r2, [pc, #104]	; (800a16c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800a104:	401a      	ands	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a12      	ldr	r2, [pc, #72]	; (800a15c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d106      	bne.n	800a126 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a15      	ldr	r2, [pc, #84]	; (800a170 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800a11c:	401a      	ands	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	223c      	movs	r2, #60	; 0x3c
 800a132:	2100      	movs	r1, #0
 800a134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	0018      	movs	r0, r3
 800a13a:	46bd      	mov	sp, r7
 800a13c:	b004      	add	sp, #16
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	fffffcff 	.word	0xfffffcff
 800a144:	fffffbff 	.word	0xfffffbff
 800a148:	fffff7ff 	.word	0xfffff7ff
 800a14c:	ffffefff 	.word	0xffffefff
 800a150:	ffffdfff 	.word	0xffffdfff
 800a154:	ffffbfff 	.word	0xffffbfff
 800a158:	fff0ffff 	.word	0xfff0ffff
 800a15c:	40012c00 	.word	0x40012c00
 800a160:	efffffff 	.word	0xefffffff
 800a164:	ff0fffff 	.word	0xff0fffff
 800a168:	feffffff 	.word	0xfeffffff
 800a16c:	fdffffff 	.word	0xfdffffff
 800a170:	dfffffff 	.word	0xdfffffff

0800a174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a17c:	46c0      	nop			; (mov r8, r8)
 800a17e:	46bd      	mov	sp, r7
 800a180:	b002      	add	sp, #8
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a18c:	46c0      	nop			; (mov r8, r8)
 800a18e:	46bd      	mov	sp, r7
 800a190:	b002      	add	sp, #8
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a19c:	46c0      	nop			; (mov r8, r8)
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e046      	b.n	800a244 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2288      	movs	r2, #136	; 0x88
 800a1ba:	589b      	ldr	r3, [r3, r2]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d107      	bne.n	800a1d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2284      	movs	r2, #132	; 0x84
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f7fa fd18 	bl	8004c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2288      	movs	r2, #136	; 0x88
 800a1d4:	2124      	movs	r1, #36	; 0x24
 800a1d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	438a      	bics	r2, r1
 800a1e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f000 fd16 	bl	800ac1c <UART_SetConfig>
 800a1f0:	0003      	movs	r3, r0
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d101      	bne.n	800a1fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e024      	b.n	800a244 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	0018      	movs	r0, r3
 800a206:	f000 fead 	bl	800af64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	490d      	ldr	r1, [pc, #52]	; (800a24c <HAL_UART_Init+0xa8>)
 800a216:	400a      	ands	r2, r1
 800a218:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	212a      	movs	r1, #42	; 0x2a
 800a226:	438a      	bics	r2, r1
 800a228:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2101      	movs	r1, #1
 800a236:	430a      	orrs	r2, r1
 800a238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	0018      	movs	r0, r3
 800a23e:	f000 ff45 	bl	800b0cc <UART_CheckIdleState>
 800a242:	0003      	movs	r3, r0
}
 800a244:	0018      	movs	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	b002      	add	sp, #8
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	ffffb7ff 	.word	0xffffb7ff

0800a250 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08c      	sub	sp, #48	; 0x30
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	1dbb      	adds	r3, r7, #6
 800a25c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2288      	movs	r2, #136	; 0x88
 800a262:	589b      	ldr	r3, [r3, r2]
 800a264:	2b20      	cmp	r3, #32
 800a266:	d000      	beq.n	800a26a <HAL_UART_Transmit_IT+0x1a>
 800a268:	e08d      	b.n	800a386 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <HAL_UART_Transmit_IT+0x28>
 800a270:	1dbb      	adds	r3, r7, #6
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e085      	b.n	800a388 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	2380      	movs	r3, #128	; 0x80
 800a282:	015b      	lsls	r3, r3, #5
 800a284:	429a      	cmp	r2, r3
 800a286:	d109      	bne.n	800a29c <HAL_UART_Transmit_IT+0x4c>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d105      	bne.n	800a29c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2201      	movs	r2, #1
 800a294:	4013      	ands	r3, r2
 800a296:	d001      	beq.n	800a29c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e075      	b.n	800a388 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	1dba      	adds	r2, r7, #6
 800a2a6:	2154      	movs	r1, #84	; 0x54
 800a2a8:	8812      	ldrh	r2, [r2, #0]
 800a2aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	1dba      	adds	r2, r7, #6
 800a2b0:	2156      	movs	r1, #86	; 0x56
 800a2b2:	8812      	ldrh	r2, [r2, #0]
 800a2b4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2290      	movs	r2, #144	; 0x90
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2288      	movs	r2, #136	; 0x88
 800a2c8:	2121      	movs	r1, #33	; 0x21
 800a2ca:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a2d0:	2380      	movs	r3, #128	; 0x80
 800a2d2:	059b      	lsls	r3, r3, #22
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d12a      	bne.n	800a32e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	2380      	movs	r3, #128	; 0x80
 800a2de:	015b      	lsls	r3, r3, #5
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d107      	bne.n	800a2f4 <HAL_UART_Transmit_IT+0xa4>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4a28      	ldr	r2, [pc, #160]	; (800a390 <HAL_UART_Transmit_IT+0x140>)
 800a2f0:	679a      	str	r2, [r3, #120]	; 0x78
 800a2f2:	e002      	b.n	800a2fa <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4a27      	ldr	r2, [pc, #156]	; (800a394 <HAL_UART_Transmit_IT+0x144>)
 800a2f8:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fe:	61fb      	str	r3, [r7, #28]
  return(result);
 800a300:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a302:	62bb      	str	r3, [r7, #40]	; 0x28
 800a304:	2301      	movs	r3, #1
 800a306:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	f383 8810 	msr	PRIMASK, r3
}
 800a30e:	46c0      	nop			; (mov r8, r8)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2180      	movs	r1, #128	; 0x80
 800a31c:	0409      	lsls	r1, r1, #16
 800a31e:	430a      	orrs	r2, r1
 800a320:	609a      	str	r2, [r3, #8]
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	f383 8810 	msr	PRIMASK, r3
}
 800a32c:	e029      	b.n	800a382 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	2380      	movs	r3, #128	; 0x80
 800a334:	015b      	lsls	r3, r3, #5
 800a336:	429a      	cmp	r2, r3
 800a338:	d107      	bne.n	800a34a <HAL_UART_Transmit_IT+0xfa>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d103      	bne.n	800a34a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	4a14      	ldr	r2, [pc, #80]	; (800a398 <HAL_UART_Transmit_IT+0x148>)
 800a346:	679a      	str	r2, [r3, #120]	; 0x78
 800a348:	e002      	b.n	800a350 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	4a13      	ldr	r2, [pc, #76]	; (800a39c <HAL_UART_Transmit_IT+0x14c>)
 800a34e:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a350:	f3ef 8310 	mrs	r3, PRIMASK
 800a354:	613b      	str	r3, [r7, #16]
  return(result);
 800a356:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a35a:	2301      	movs	r3, #1
 800a35c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f383 8810 	msr	PRIMASK, r3
}
 800a364:	46c0      	nop			; (mov r8, r8)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2180      	movs	r1, #128	; 0x80
 800a372:	430a      	orrs	r2, r1
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	f383 8810 	msr	PRIMASK, r3
}
 800a380:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e000      	b.n	800a388 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800a386:	2302      	movs	r3, #2
  }
}
 800a388:	0018      	movs	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	b00c      	add	sp, #48	; 0x30
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	0800ba15 	.word	0x0800ba15
 800a394:	0800b929 	.word	0x0800b929
 800a398:	0800b86b 	.word	0x0800b86b
 800a39c:	0800b7b7 	.word	0x0800b7b7

0800a3a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	1dbb      	adds	r3, r7, #6
 800a3ac:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	228c      	movs	r2, #140	; 0x8c
 800a3b2:	589b      	ldr	r3, [r3, r2]
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	d145      	bne.n	800a444 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_UART_Receive_DMA+0x26>
 800a3be:	1dbb      	adds	r3, r7, #6
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e03d      	b.n	800a446 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	2380      	movs	r3, #128	; 0x80
 800a3d0:	015b      	lsls	r3, r3, #5
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d109      	bne.n	800a3ea <HAL_UART_Receive_DMA+0x4a>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d105      	bne.n	800a3ea <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	d001      	beq.n	800a3ea <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e02d      	b.n	800a446 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	2380      	movs	r3, #128	; 0x80
 800a3f8:	041b      	lsls	r3, r3, #16
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	d019      	beq.n	800a432 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a402:	613b      	str	r3, [r7, #16]
  return(result);
 800a404:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a406:	61fb      	str	r3, [r7, #28]
 800a408:	2301      	movs	r3, #1
 800a40a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f383 8810 	msr	PRIMASK, r3
}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2180      	movs	r1, #128	; 0x80
 800a420:	04c9      	lsls	r1, r1, #19
 800a422:	430a      	orrs	r2, r1
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	f383 8810 	msr	PRIMASK, r3
}
 800a430:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a432:	1dbb      	adds	r3, r7, #6
 800a434:	881a      	ldrh	r2, [r3, #0]
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0018      	movs	r0, r3
 800a43c:	f000 ff5c 	bl	800b2f8 <UART_Start_Receive_DMA>
 800a440:	0003      	movs	r3, r0
 800a442:	e000      	b.n	800a446 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a444:	2302      	movs	r3, #2
  }
}
 800a446:	0018      	movs	r0, r3
 800a448:	46bd      	mov	sp, r7
 800a44a:	b008      	add	sp, #32
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b08c      	sub	sp, #48	; 0x30
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2288      	movs	r2, #136	; 0x88
 800a45a:	589b      	ldr	r3, [r3, r2]
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	228c      	movs	r2, #140	; 0x8c
 800a462:	589b      	ldr	r3, [r3, r2]
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2280      	movs	r2, #128	; 0x80
 800a46e:	4013      	ands	r3, r2
 800a470:	2b80      	cmp	r3, #128	; 0x80
 800a472:	d138      	bne.n	800a4e6 <HAL_UART_DMAStop+0x98>
 800a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a476:	2b21      	cmp	r3, #33	; 0x21
 800a478:	d135      	bne.n	800a4e6 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a47a:	f3ef 8310 	mrs	r3, PRIMASK
 800a47e:	617b      	str	r3, [r7, #20]
  return(result);
 800a480:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
 800a484:	2301      	movs	r3, #1
 800a486:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	f383 8810 	msr	PRIMASK, r3
}
 800a48e:	46c0      	nop			; (mov r8, r8)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2180      	movs	r1, #128	; 0x80
 800a49c:	438a      	bics	r2, r1
 800a49e:	609a      	str	r2, [r3, #8]
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	f383 8810 	msr	PRIMASK, r3
}
 800a4aa:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d014      	beq.n	800a4de <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	f7fc f9ad 	bl	8006818 <HAL_DMA_Abort>
 800a4be:	1e03      	subs	r3, r0, #0
 800a4c0:	d00d      	beq.n	800a4de <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f7fc fb24 	bl	8006b14 <HAL_DMA_GetError>
 800a4cc:	0003      	movs	r3, r0
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	d105      	bne.n	800a4de <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2290      	movs	r2, #144	; 0x90
 800a4d6:	2110      	movs	r1, #16
 800a4d8:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e047      	b.n	800a56e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f000 ffaf 	bl	800b444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2240      	movs	r2, #64	; 0x40
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	d13b      	bne.n	800a56c <HAL_UART_DMAStop+0x11e>
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	2b22      	cmp	r3, #34	; 0x22
 800a4f8:	d138      	bne.n	800a56c <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a4fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800a500:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a502:	623b      	str	r3, [r7, #32]
 800a504:	2301      	movs	r3, #1
 800a506:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f383 8810 	msr	PRIMASK, r3
}
 800a50e:	46c0      	nop			; (mov r8, r8)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689a      	ldr	r2, [r3, #8]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2140      	movs	r1, #64	; 0x40
 800a51c:	438a      	bics	r2, r1
 800a51e:	609a      	str	r2, [r3, #8]
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	f383 8810 	msr	PRIMASK, r3
}
 800a52a:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2280      	movs	r2, #128	; 0x80
 800a530:	589b      	ldr	r3, [r3, r2]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d016      	beq.n	800a564 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2280      	movs	r2, #128	; 0x80
 800a53a:	589b      	ldr	r3, [r3, r2]
 800a53c:	0018      	movs	r0, r3
 800a53e:	f7fc f96b 	bl	8006818 <HAL_DMA_Abort>
 800a542:	1e03      	subs	r3, r0, #0
 800a544:	d00e      	beq.n	800a564 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2280      	movs	r2, #128	; 0x80
 800a54a:	589b      	ldr	r3, [r3, r2]
 800a54c:	0018      	movs	r0, r3
 800a54e:	f7fc fae1 	bl	8006b14 <HAL_DMA_GetError>
 800a552:	0003      	movs	r3, r0
 800a554:	2b20      	cmp	r3, #32
 800a556:	d105      	bne.n	800a564 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2290      	movs	r2, #144	; 0x90
 800a55c:	2110      	movs	r1, #16
 800a55e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e004      	b.n	800a56e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	0018      	movs	r0, r3
 800a568:	f000 ffac 	bl	800b4c4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	0018      	movs	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	b00c      	add	sp, #48	; 0x30
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a578:	b5b0      	push	{r4, r5, r7, lr}
 800a57a:	b0aa      	sub	sp, #168	; 0xa8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	22a4      	movs	r2, #164	; 0xa4
 800a588:	18b9      	adds	r1, r7, r2
 800a58a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	20a0      	movs	r0, #160	; 0xa0
 800a594:	1839      	adds	r1, r7, r0
 800a596:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	249c      	movs	r4, #156	; 0x9c
 800a5a0:	1939      	adds	r1, r7, r4
 800a5a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5a4:	0011      	movs	r1, r2
 800a5a6:	18bb      	adds	r3, r7, r2
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4aa2      	ldr	r2, [pc, #648]	; (800a834 <HAL_UART_IRQHandler+0x2bc>)
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	2298      	movs	r2, #152	; 0x98
 800a5b0:	18bd      	adds	r5, r7, r2
 800a5b2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a5b4:	18bb      	adds	r3, r7, r2
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d11a      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5bc:	187b      	adds	r3, r7, r1
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	d015      	beq.n	800a5f2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5c6:	183b      	adds	r3, r7, r0
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	d105      	bne.n	800a5dc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5d0:	193b      	adds	r3, r7, r4
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	2380      	movs	r3, #128	; 0x80
 800a5d6:	055b      	lsls	r3, r3, #21
 800a5d8:	4013      	ands	r3, r2
 800a5da:	d00a      	beq.n	800a5f2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d100      	bne.n	800a5e6 <HAL_UART_IRQHandler+0x6e>
 800a5e4:	e2dc      	b.n	800aba0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	0010      	movs	r0, r2
 800a5ee:	4798      	blx	r3
      }
      return;
 800a5f0:	e2d6      	b.n	800aba0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5f2:	2398      	movs	r3, #152	; 0x98
 800a5f4:	18fb      	adds	r3, r7, r3
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d100      	bne.n	800a5fe <HAL_UART_IRQHandler+0x86>
 800a5fc:	e122      	b.n	800a844 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5fe:	239c      	movs	r3, #156	; 0x9c
 800a600:	18fb      	adds	r3, r7, r3
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a8c      	ldr	r2, [pc, #560]	; (800a838 <HAL_UART_IRQHandler+0x2c0>)
 800a606:	4013      	ands	r3, r2
 800a608:	d106      	bne.n	800a618 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a60a:	23a0      	movs	r3, #160	; 0xa0
 800a60c:	18fb      	adds	r3, r7, r3
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a8a      	ldr	r2, [pc, #552]	; (800a83c <HAL_UART_IRQHandler+0x2c4>)
 800a612:	4013      	ands	r3, r2
 800a614:	d100      	bne.n	800a618 <HAL_UART_IRQHandler+0xa0>
 800a616:	e115      	b.n	800a844 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a618:	23a4      	movs	r3, #164	; 0xa4
 800a61a:	18fb      	adds	r3, r7, r3
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2201      	movs	r2, #1
 800a620:	4013      	ands	r3, r2
 800a622:	d012      	beq.n	800a64a <HAL_UART_IRQHandler+0xd2>
 800a624:	23a0      	movs	r3, #160	; 0xa0
 800a626:	18fb      	adds	r3, r7, r3
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	2380      	movs	r3, #128	; 0x80
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4013      	ands	r3, r2
 800a630:	d00b      	beq.n	800a64a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2201      	movs	r2, #1
 800a638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2290      	movs	r2, #144	; 0x90
 800a63e:	589b      	ldr	r3, [r3, r2]
 800a640:	2201      	movs	r2, #1
 800a642:	431a      	orrs	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2190      	movs	r1, #144	; 0x90
 800a648:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a64a:	23a4      	movs	r3, #164	; 0xa4
 800a64c:	18fb      	adds	r3, r7, r3
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2202      	movs	r2, #2
 800a652:	4013      	ands	r3, r2
 800a654:	d011      	beq.n	800a67a <HAL_UART_IRQHandler+0x102>
 800a656:	239c      	movs	r3, #156	; 0x9c
 800a658:	18fb      	adds	r3, r7, r3
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2201      	movs	r2, #1
 800a65e:	4013      	ands	r3, r2
 800a660:	d00b      	beq.n	800a67a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2202      	movs	r2, #2
 800a668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2290      	movs	r2, #144	; 0x90
 800a66e:	589b      	ldr	r3, [r3, r2]
 800a670:	2204      	movs	r2, #4
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2190      	movs	r1, #144	; 0x90
 800a678:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a67a:	23a4      	movs	r3, #164	; 0xa4
 800a67c:	18fb      	adds	r3, r7, r3
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2204      	movs	r2, #4
 800a682:	4013      	ands	r3, r2
 800a684:	d011      	beq.n	800a6aa <HAL_UART_IRQHandler+0x132>
 800a686:	239c      	movs	r3, #156	; 0x9c
 800a688:	18fb      	adds	r3, r7, r3
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2201      	movs	r2, #1
 800a68e:	4013      	ands	r3, r2
 800a690:	d00b      	beq.n	800a6aa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2204      	movs	r2, #4
 800a698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2290      	movs	r2, #144	; 0x90
 800a69e:	589b      	ldr	r3, [r3, r2]
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2190      	movs	r1, #144	; 0x90
 800a6a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6aa:	23a4      	movs	r3, #164	; 0xa4
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	d017      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6b6:	23a0      	movs	r3, #160	; 0xa0
 800a6b8:	18fb      	adds	r3, r7, r3
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	4013      	ands	r3, r2
 800a6c0:	d105      	bne.n	800a6ce <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a6c2:	239c      	movs	r3, #156	; 0x9c
 800a6c4:	18fb      	adds	r3, r7, r3
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a5b      	ldr	r2, [pc, #364]	; (800a838 <HAL_UART_IRQHandler+0x2c0>)
 800a6ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6cc:	d00b      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2290      	movs	r2, #144	; 0x90
 800a6da:	589b      	ldr	r3, [r3, r2]
 800a6dc:	2208      	movs	r2, #8
 800a6de:	431a      	orrs	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2190      	movs	r1, #144	; 0x90
 800a6e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6e6:	23a4      	movs	r3, #164	; 0xa4
 800a6e8:	18fb      	adds	r3, r7, r3
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	2380      	movs	r3, #128	; 0x80
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	d013      	beq.n	800a71c <HAL_UART_IRQHandler+0x1a4>
 800a6f4:	23a0      	movs	r3, #160	; 0xa0
 800a6f6:	18fb      	adds	r3, r7, r3
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	2380      	movs	r3, #128	; 0x80
 800a6fc:	04db      	lsls	r3, r3, #19
 800a6fe:	4013      	ands	r3, r2
 800a700:	d00c      	beq.n	800a71c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2280      	movs	r2, #128	; 0x80
 800a708:	0112      	lsls	r2, r2, #4
 800a70a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2290      	movs	r2, #144	; 0x90
 800a710:	589b      	ldr	r3, [r3, r2]
 800a712:	2220      	movs	r2, #32
 800a714:	431a      	orrs	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2190      	movs	r1, #144	; 0x90
 800a71a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2290      	movs	r2, #144	; 0x90
 800a720:	589b      	ldr	r3, [r3, r2]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d100      	bne.n	800a728 <HAL_UART_IRQHandler+0x1b0>
 800a726:	e23d      	b.n	800aba4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a728:	23a4      	movs	r3, #164	; 0xa4
 800a72a:	18fb      	adds	r3, r7, r3
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2220      	movs	r2, #32
 800a730:	4013      	ands	r3, r2
 800a732:	d015      	beq.n	800a760 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a734:	23a0      	movs	r3, #160	; 0xa0
 800a736:	18fb      	adds	r3, r7, r3
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2220      	movs	r2, #32
 800a73c:	4013      	ands	r3, r2
 800a73e:	d106      	bne.n	800a74e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a740:	239c      	movs	r3, #156	; 0x9c
 800a742:	18fb      	adds	r3, r7, r3
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	2380      	movs	r3, #128	; 0x80
 800a748:	055b      	lsls	r3, r3, #21
 800a74a:	4013      	ands	r3, r2
 800a74c:	d008      	beq.n	800a760 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a752:	2b00      	cmp	r3, #0
 800a754:	d004      	beq.n	800a760 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	0010      	movs	r0, r2
 800a75e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2290      	movs	r2, #144	; 0x90
 800a764:	589b      	ldr	r3, [r3, r2]
 800a766:	2194      	movs	r1, #148	; 0x94
 800a768:	187a      	adds	r2, r7, r1
 800a76a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	2240      	movs	r2, #64	; 0x40
 800a774:	4013      	ands	r3, r2
 800a776:	2b40      	cmp	r3, #64	; 0x40
 800a778:	d004      	beq.n	800a784 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a77a:	187b      	adds	r3, r7, r1
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2228      	movs	r2, #40	; 0x28
 800a780:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a782:	d04c      	beq.n	800a81e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	0018      	movs	r0, r3
 800a788:	f000 fe9c 	bl	800b4c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	2240      	movs	r2, #64	; 0x40
 800a794:	4013      	ands	r3, r2
 800a796:	2b40      	cmp	r3, #64	; 0x40
 800a798:	d13c      	bne.n	800a814 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a79a:	f3ef 8310 	mrs	r3, PRIMASK
 800a79e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a7a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a2:	2090      	movs	r0, #144	; 0x90
 800a7a4:	183a      	adds	r2, r7, r0
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ae:	f383 8810 	msr	PRIMASK, r3
}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2140      	movs	r1, #64	; 0x40
 800a7c0:	438a      	bics	r2, r1
 800a7c2:	609a      	str	r2, [r3, #8]
 800a7c4:	183b      	adds	r3, r7, r0
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7cc:	f383 8810 	msr	PRIMASK, r3
}
 800a7d0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2280      	movs	r2, #128	; 0x80
 800a7d6:	589b      	ldr	r3, [r3, r2]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d016      	beq.n	800a80a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2280      	movs	r2, #128	; 0x80
 800a7e0:	589b      	ldr	r3, [r3, r2]
 800a7e2:	4a17      	ldr	r2, [pc, #92]	; (800a840 <HAL_UART_IRQHandler+0x2c8>)
 800a7e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2280      	movs	r2, #128	; 0x80
 800a7ea:	589b      	ldr	r3, [r3, r2]
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	f7fc f875 	bl	80068dc <HAL_DMA_Abort_IT>
 800a7f2:	1e03      	subs	r3, r0, #0
 800a7f4:	d01c      	beq.n	800a830 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2280      	movs	r2, #128	; 0x80
 800a7fa:	589b      	ldr	r3, [r3, r2]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	2180      	movs	r1, #128	; 0x80
 800a802:	5852      	ldr	r2, [r2, r1]
 800a804:	0010      	movs	r0, r2
 800a806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a808:	e012      	b.n	800a830 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	0018      	movs	r0, r3
 800a80e:	f000 f9f1 	bl	800abf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a812:	e00d      	b.n	800a830 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	0018      	movs	r0, r3
 800a818:	f000 f9ec 	bl	800abf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a81c:	e008      	b.n	800a830 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	0018      	movs	r0, r3
 800a822:	f000 f9e7 	bl	800abf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2290      	movs	r2, #144	; 0x90
 800a82a:	2100      	movs	r1, #0
 800a82c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a82e:	e1b9      	b.n	800aba4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a830:	46c0      	nop			; (mov r8, r8)
    return;
 800a832:	e1b7      	b.n	800aba4 <HAL_UART_IRQHandler+0x62c>
 800a834:	0000080f 	.word	0x0000080f
 800a838:	10000001 	.word	0x10000001
 800a83c:	04000120 	.word	0x04000120
 800a840:	0800b789 	.word	0x0800b789

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d000      	beq.n	800a84e <HAL_UART_IRQHandler+0x2d6>
 800a84c:	e13e      	b.n	800aacc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a84e:	23a4      	movs	r3, #164	; 0xa4
 800a850:	18fb      	adds	r3, r7, r3
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2210      	movs	r2, #16
 800a856:	4013      	ands	r3, r2
 800a858:	d100      	bne.n	800a85c <HAL_UART_IRQHandler+0x2e4>
 800a85a:	e137      	b.n	800aacc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a85c:	23a0      	movs	r3, #160	; 0xa0
 800a85e:	18fb      	adds	r3, r7, r3
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2210      	movs	r2, #16
 800a864:	4013      	ands	r3, r2
 800a866:	d100      	bne.n	800a86a <HAL_UART_IRQHandler+0x2f2>
 800a868:	e130      	b.n	800aacc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2210      	movs	r2, #16
 800a870:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	2240      	movs	r2, #64	; 0x40
 800a87a:	4013      	ands	r3, r2
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d000      	beq.n	800a882 <HAL_UART_IRQHandler+0x30a>
 800a880:	e0a4      	b.n	800a9cc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2280      	movs	r2, #128	; 0x80
 800a886:	589b      	ldr	r3, [r3, r2]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	217e      	movs	r1, #126	; 0x7e
 800a88e:	187b      	adds	r3, r7, r1
 800a890:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a892:	187b      	adds	r3, r7, r1
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d100      	bne.n	800a89c <HAL_UART_IRQHandler+0x324>
 800a89a:	e185      	b.n	800aba8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	225c      	movs	r2, #92	; 0x5c
 800a8a0:	5a9b      	ldrh	r3, [r3, r2]
 800a8a2:	187a      	adds	r2, r7, r1
 800a8a4:	8812      	ldrh	r2, [r2, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d300      	bcc.n	800a8ac <HAL_UART_IRQHandler+0x334>
 800a8aa:	e17d      	b.n	800aba8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	187a      	adds	r2, r7, r1
 800a8b0:	215e      	movs	r1, #94	; 0x5e
 800a8b2:	8812      	ldrh	r2, [r2, #0]
 800a8b4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2280      	movs	r2, #128	; 0x80
 800a8ba:	589b      	ldr	r3, [r3, r2]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	d170      	bne.n	800a9a8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	f383 8810 	msr	PRIMASK, r3
}
 800a8da:	46c0      	nop			; (mov r8, r8)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	49b4      	ldr	r1, [pc, #720]	; (800abb8 <HAL_UART_IRQHandler+0x640>)
 800a8e8:	400a      	ands	r2, r1
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	f383 8810 	msr	PRIMASK, r3
}
 800a8f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a900:	677b      	str	r3, [r7, #116]	; 0x74
 800a902:	2301      	movs	r3, #1
 800a904:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a908:	f383 8810 	msr	PRIMASK, r3
}
 800a90c:	46c0      	nop			; (mov r8, r8)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689a      	ldr	r2, [r3, #8]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2101      	movs	r1, #1
 800a91a:	438a      	bics	r2, r1
 800a91c:	609a      	str	r2, [r3, #8]
 800a91e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a920:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a924:	f383 8810 	msr	PRIMASK, r3
}
 800a928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a92a:	f3ef 8310 	mrs	r3, PRIMASK
 800a92e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a930:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a932:	673b      	str	r3, [r7, #112]	; 0x70
 800a934:	2301      	movs	r3, #1
 800a936:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a93a:	f383 8810 	msr	PRIMASK, r3
}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689a      	ldr	r2, [r3, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2140      	movs	r1, #64	; 0x40
 800a94c:	438a      	bics	r2, r1
 800a94e:	609a      	str	r2, [r3, #8]
 800a950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a952:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a956:	f383 8810 	msr	PRIMASK, r3
}
 800a95a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	228c      	movs	r2, #140	; 0x8c
 800a960:	2120      	movs	r1, #32
 800a962:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a96a:	f3ef 8310 	mrs	r3, PRIMASK
 800a96e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a970:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a972:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a974:	2301      	movs	r3, #1
 800a976:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a97a:	f383 8810 	msr	PRIMASK, r3
}
 800a97e:	46c0      	nop			; (mov r8, r8)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2110      	movs	r1, #16
 800a98c:	438a      	bics	r2, r1
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a992:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a996:	f383 8810 	msr	PRIMASK, r3
}
 800a99a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2280      	movs	r2, #128	; 0x80
 800a9a0:	589b      	ldr	r3, [r3, r2]
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f7fb ff38 	bl	8006818 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	225c      	movs	r2, #92	; 0x5c
 800a9b2:	5a9a      	ldrh	r2, [r3, r2]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	215e      	movs	r1, #94	; 0x5e
 800a9b8:	5a5b      	ldrh	r3, [r3, r1]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	0011      	movs	r1, r2
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	f000 f91d 	bl	800ac04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9ca:	e0ed      	b.n	800aba8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	225c      	movs	r2, #92	; 0x5c
 800a9d0:	5a99      	ldrh	r1, [r3, r2]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	225e      	movs	r2, #94	; 0x5e
 800a9d6:	5a9b      	ldrh	r3, [r3, r2]
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	208e      	movs	r0, #142	; 0x8e
 800a9dc:	183b      	adds	r3, r7, r0
 800a9de:	1a8a      	subs	r2, r1, r2
 800a9e0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	225e      	movs	r2, #94	; 0x5e
 800a9e6:	5a9b      	ldrh	r3, [r3, r2]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d100      	bne.n	800a9f0 <HAL_UART_IRQHandler+0x478>
 800a9ee:	e0dd      	b.n	800abac <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800a9f0:	183b      	adds	r3, r7, r0
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d100      	bne.n	800a9fa <HAL_UART_IRQHandler+0x482>
 800a9f8:	e0d8      	b.n	800abac <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa02:	2488      	movs	r4, #136	; 0x88
 800aa04:	193a      	adds	r2, r7, r4
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	2301      	movs	r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	f383 8810 	msr	PRIMASK, r3
}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4967      	ldr	r1, [pc, #412]	; (800abbc <HAL_UART_IRQHandler+0x644>)
 800aa20:	400a      	ands	r2, r1
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	193b      	adds	r3, r7, r4
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f383 8810 	msr	PRIMASK, r3
}
 800aa30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa32:	f3ef 8310 	mrs	r3, PRIMASK
 800aa36:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa3a:	2484      	movs	r4, #132	; 0x84
 800aa3c:	193a      	adds	r2, r7, r4
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	2301      	movs	r3, #1
 800aa42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f383 8810 	msr	PRIMASK, r3
}
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689a      	ldr	r2, [r3, #8]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	495a      	ldr	r1, [pc, #360]	; (800abc0 <HAL_UART_IRQHandler+0x648>)
 800aa58:	400a      	ands	r2, r1
 800aa5a:	609a      	str	r2, [r3, #8]
 800aa5c:	193b      	adds	r3, r7, r4
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	f383 8810 	msr	PRIMASK, r3
}
 800aa68:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	228c      	movs	r2, #140	; 0x8c
 800aa6e:	2120      	movs	r1, #32
 800aa70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa7e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa82:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa86:	2480      	movs	r4, #128	; 0x80
 800aa88:	193a      	adds	r2, r7, r4
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	f383 8810 	msr	PRIMASK, r3
}
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2110      	movs	r1, #16
 800aaa4:	438a      	bics	r2, r1
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	193b      	adds	r3, r7, r4
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	f383 8810 	msr	PRIMASK, r3
}
 800aab4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2202      	movs	r2, #2
 800aaba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aabc:	183b      	adds	r3, r7, r0
 800aabe:	881a      	ldrh	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	0011      	movs	r1, r2
 800aac4:	0018      	movs	r0, r3
 800aac6:	f000 f89d 	bl	800ac04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaca:	e06f      	b.n	800abac <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aacc:	23a4      	movs	r3, #164	; 0xa4
 800aace:	18fb      	adds	r3, r7, r3
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	2380      	movs	r3, #128	; 0x80
 800aad4:	035b      	lsls	r3, r3, #13
 800aad6:	4013      	ands	r3, r2
 800aad8:	d010      	beq.n	800aafc <HAL_UART_IRQHandler+0x584>
 800aada:	239c      	movs	r3, #156	; 0x9c
 800aadc:	18fb      	adds	r3, r7, r3
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	2380      	movs	r3, #128	; 0x80
 800aae2:	03db      	lsls	r3, r3, #15
 800aae4:	4013      	ands	r3, r2
 800aae6:	d009      	beq.n	800aafc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2280      	movs	r2, #128	; 0x80
 800aaee:	0352      	lsls	r2, r2, #13
 800aaf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f001 f8a5 	bl	800bc44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aafa:	e05a      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aafc:	23a4      	movs	r3, #164	; 0xa4
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2280      	movs	r2, #128	; 0x80
 800ab04:	4013      	ands	r3, r2
 800ab06:	d016      	beq.n	800ab36 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab08:	23a0      	movs	r3, #160	; 0xa0
 800ab0a:	18fb      	adds	r3, r7, r3
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2280      	movs	r2, #128	; 0x80
 800ab10:	4013      	ands	r3, r2
 800ab12:	d106      	bne.n	800ab22 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab14:	239c      	movs	r3, #156	; 0x9c
 800ab16:	18fb      	adds	r3, r7, r3
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	2380      	movs	r3, #128	; 0x80
 800ab1c:	041b      	lsls	r3, r3, #16
 800ab1e:	4013      	ands	r3, r2
 800ab20:	d009      	beq.n	800ab36 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d042      	beq.n	800abb0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	0010      	movs	r0, r2
 800ab32:	4798      	blx	r3
    }
    return;
 800ab34:	e03c      	b.n	800abb0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab36:	23a4      	movs	r3, #164	; 0xa4
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2240      	movs	r2, #64	; 0x40
 800ab3e:	4013      	ands	r3, r2
 800ab40:	d00a      	beq.n	800ab58 <HAL_UART_IRQHandler+0x5e0>
 800ab42:	23a0      	movs	r3, #160	; 0xa0
 800ab44:	18fb      	adds	r3, r7, r3
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2240      	movs	r2, #64	; 0x40
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	d004      	beq.n	800ab58 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	0018      	movs	r0, r3
 800ab52:	f000 ffd9 	bl	800bb08 <UART_EndTransmit_IT>
    return;
 800ab56:	e02c      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab58:	23a4      	movs	r3, #164	; 0xa4
 800ab5a:	18fb      	adds	r3, r7, r3
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	2380      	movs	r3, #128	; 0x80
 800ab60:	041b      	lsls	r3, r3, #16
 800ab62:	4013      	ands	r3, r2
 800ab64:	d00b      	beq.n	800ab7e <HAL_UART_IRQHandler+0x606>
 800ab66:	23a0      	movs	r3, #160	; 0xa0
 800ab68:	18fb      	adds	r3, r7, r3
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	2380      	movs	r3, #128	; 0x80
 800ab6e:	05db      	lsls	r3, r3, #23
 800ab70:	4013      	ands	r3, r2
 800ab72:	d004      	beq.n	800ab7e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	0018      	movs	r0, r3
 800ab78:	f001 f874 	bl	800bc64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab7c:	e019      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab7e:	23a4      	movs	r3, #164	; 0xa4
 800ab80:	18fb      	adds	r3, r7, r3
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	2380      	movs	r3, #128	; 0x80
 800ab86:	045b      	lsls	r3, r3, #17
 800ab88:	4013      	ands	r3, r2
 800ab8a:	d012      	beq.n	800abb2 <HAL_UART_IRQHandler+0x63a>
 800ab8c:	23a0      	movs	r3, #160	; 0xa0
 800ab8e:	18fb      	adds	r3, r7, r3
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	da0d      	bge.n	800abb2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	0018      	movs	r0, r3
 800ab9a:	f001 f85b 	bl	800bc54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab9e:	e008      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
      return;
 800aba0:	46c0      	nop			; (mov r8, r8)
 800aba2:	e006      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
    return;
 800aba4:	46c0      	nop			; (mov r8, r8)
 800aba6:	e004      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
      return;
 800aba8:	46c0      	nop			; (mov r8, r8)
 800abaa:	e002      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
      return;
 800abac:	46c0      	nop			; (mov r8, r8)
 800abae:	e000      	b.n	800abb2 <HAL_UART_IRQHandler+0x63a>
    return;
 800abb0:	46c0      	nop			; (mov r8, r8)
  }
}
 800abb2:	46bd      	mov	sp, r7
 800abb4:	b02a      	add	sp, #168	; 0xa8
 800abb6:	bdb0      	pop	{r4, r5, r7, pc}
 800abb8:	fffffeff 	.word	0xfffffeff
 800abbc:	fffffedf 	.word	0xfffffedf
 800abc0:	effffffe 	.word	0xeffffffe

0800abc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800abcc:	46c0      	nop			; (mov r8, r8)
 800abce:	46bd      	mov	sp, r7
 800abd0:	b002      	add	sp, #8
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800abdc:	46c0      	nop			; (mov r8, r8)
 800abde:	46bd      	mov	sp, r7
 800abe0:	b002      	add	sp, #8
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800abec:	46c0      	nop			; (mov r8, r8)
 800abee:	46bd      	mov	sp, r7
 800abf0:	b002      	add	sp, #8
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abfc:	46c0      	nop			; (mov r8, r8)
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b002      	add	sp, #8
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	000a      	movs	r2, r1
 800ac0e:	1cbb      	adds	r3, r7, #2
 800ac10:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	46bd      	mov	sp, r7
 800ac16:	b002      	add	sp, #8
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac24:	231a      	movs	r3, #26
 800ac26:	18fb      	adds	r3, r7, r3
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	431a      	orrs	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4abc      	ldr	r2, [pc, #752]	; (800af3c <UART_SetConfig+0x320>)
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	0019      	movs	r1, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4ab7      	ldr	r2, [pc, #732]	; (800af40 <UART_SetConfig+0x324>)
 800ac62:	4013      	ands	r3, r2
 800ac64:	0019      	movs	r1, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	4aae      	ldr	r2, [pc, #696]	; (800af44 <UART_SetConfig+0x328>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	0019      	movs	r1, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69fa      	ldr	r2, [r7, #28]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	220f      	movs	r2, #15
 800aca0:	4393      	bics	r3, r2
 800aca2:	0019      	movs	r1, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	430a      	orrs	r2, r1
 800acae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4aa4      	ldr	r2, [pc, #656]	; (800af48 <UART_SetConfig+0x32c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d127      	bne.n	800ad0a <UART_SetConfig+0xee>
 800acba:	4ba4      	ldr	r3, [pc, #656]	; (800af4c <UART_SetConfig+0x330>)
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	2203      	movs	r2, #3
 800acc0:	4013      	ands	r3, r2
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d017      	beq.n	800acf6 <UART_SetConfig+0xda>
 800acc6:	d81b      	bhi.n	800ad00 <UART_SetConfig+0xe4>
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d00a      	beq.n	800ace2 <UART_SetConfig+0xc6>
 800accc:	d818      	bhi.n	800ad00 <UART_SetConfig+0xe4>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <UART_SetConfig+0xbc>
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d00a      	beq.n	800acec <UART_SetConfig+0xd0>
 800acd6:	e013      	b.n	800ad00 <UART_SetConfig+0xe4>
 800acd8:	231b      	movs	r3, #27
 800acda:	18fb      	adds	r3, r7, r3
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	e058      	b.n	800ad94 <UART_SetConfig+0x178>
 800ace2:	231b      	movs	r3, #27
 800ace4:	18fb      	adds	r3, r7, r3
 800ace6:	2202      	movs	r2, #2
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	e053      	b.n	800ad94 <UART_SetConfig+0x178>
 800acec:	231b      	movs	r3, #27
 800acee:	18fb      	adds	r3, r7, r3
 800acf0:	2204      	movs	r2, #4
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	e04e      	b.n	800ad94 <UART_SetConfig+0x178>
 800acf6:	231b      	movs	r3, #27
 800acf8:	18fb      	adds	r3, r7, r3
 800acfa:	2208      	movs	r2, #8
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e049      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad00:	231b      	movs	r3, #27
 800ad02:	18fb      	adds	r3, r7, r3
 800ad04:	2210      	movs	r2, #16
 800ad06:	701a      	strb	r2, [r3, #0]
 800ad08:	e044      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a90      	ldr	r2, [pc, #576]	; (800af50 <UART_SetConfig+0x334>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d127      	bne.n	800ad64 <UART_SetConfig+0x148>
 800ad14:	4b8d      	ldr	r3, [pc, #564]	; (800af4c <UART_SetConfig+0x330>)
 800ad16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad18:	220c      	movs	r2, #12
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	2b0c      	cmp	r3, #12
 800ad1e:	d017      	beq.n	800ad50 <UART_SetConfig+0x134>
 800ad20:	d81b      	bhi.n	800ad5a <UART_SetConfig+0x13e>
 800ad22:	2b08      	cmp	r3, #8
 800ad24:	d00a      	beq.n	800ad3c <UART_SetConfig+0x120>
 800ad26:	d818      	bhi.n	800ad5a <UART_SetConfig+0x13e>
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <UART_SetConfig+0x116>
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d00a      	beq.n	800ad46 <UART_SetConfig+0x12a>
 800ad30:	e013      	b.n	800ad5a <UART_SetConfig+0x13e>
 800ad32:	231b      	movs	r3, #27
 800ad34:	18fb      	adds	r3, r7, r3
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	e02b      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad3c:	231b      	movs	r3, #27
 800ad3e:	18fb      	adds	r3, r7, r3
 800ad40:	2202      	movs	r2, #2
 800ad42:	701a      	strb	r2, [r3, #0]
 800ad44:	e026      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad46:	231b      	movs	r3, #27
 800ad48:	18fb      	adds	r3, r7, r3
 800ad4a:	2204      	movs	r2, #4
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	e021      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad50:	231b      	movs	r3, #27
 800ad52:	18fb      	adds	r3, r7, r3
 800ad54:	2208      	movs	r2, #8
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	e01c      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad5a:	231b      	movs	r3, #27
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	2210      	movs	r2, #16
 800ad60:	701a      	strb	r2, [r3, #0]
 800ad62:	e017      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a7a      	ldr	r2, [pc, #488]	; (800af54 <UART_SetConfig+0x338>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d104      	bne.n	800ad78 <UART_SetConfig+0x15c>
 800ad6e:	231b      	movs	r3, #27
 800ad70:	18fb      	adds	r3, r7, r3
 800ad72:	2200      	movs	r2, #0
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	e00d      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a76      	ldr	r2, [pc, #472]	; (800af58 <UART_SetConfig+0x33c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d104      	bne.n	800ad8c <UART_SetConfig+0x170>
 800ad82:	231b      	movs	r3, #27
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e003      	b.n	800ad94 <UART_SetConfig+0x178>
 800ad8c:	231b      	movs	r3, #27
 800ad8e:	18fb      	adds	r3, r7, r3
 800ad90:	2210      	movs	r2, #16
 800ad92:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	2380      	movs	r3, #128	; 0x80
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d000      	beq.n	800ada2 <UART_SetConfig+0x186>
 800ada0:	e065      	b.n	800ae6e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800ada2:	231b      	movs	r3, #27
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b08      	cmp	r3, #8
 800adaa:	d015      	beq.n	800add8 <UART_SetConfig+0x1bc>
 800adac:	dc18      	bgt.n	800ade0 <UART_SetConfig+0x1c4>
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d00d      	beq.n	800adce <UART_SetConfig+0x1b2>
 800adb2:	dc15      	bgt.n	800ade0 <UART_SetConfig+0x1c4>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <UART_SetConfig+0x1a2>
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d005      	beq.n	800adc8 <UART_SetConfig+0x1ac>
 800adbc:	e010      	b.n	800ade0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adbe:	f7fc fdd1 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 800adc2:	0003      	movs	r3, r0
 800adc4:	617b      	str	r3, [r7, #20]
        break;
 800adc6:	e012      	b.n	800adee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adc8:	4b64      	ldr	r3, [pc, #400]	; (800af5c <UART_SetConfig+0x340>)
 800adca:	617b      	str	r3, [r7, #20]
        break;
 800adcc:	e00f      	b.n	800adee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adce:	f7fc fd3d 	bl	800784c <HAL_RCC_GetSysClockFreq>
 800add2:	0003      	movs	r3, r0
 800add4:	617b      	str	r3, [r7, #20]
        break;
 800add6:	e00a      	b.n	800adee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800add8:	2380      	movs	r3, #128	; 0x80
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	617b      	str	r3, [r7, #20]
        break;
 800adde:	e006      	b.n	800adee <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ade4:	231a      	movs	r3, #26
 800ade6:	18fb      	adds	r3, r7, r3
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]
        break;
 800adec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d100      	bne.n	800adf6 <UART_SetConfig+0x1da>
 800adf4:	e08d      	b.n	800af12 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adfa:	4b59      	ldr	r3, [pc, #356]	; (800af60 <UART_SetConfig+0x344>)
 800adfc:	0052      	lsls	r2, r2, #1
 800adfe:	5ad3      	ldrh	r3, [r2, r3]
 800ae00:	0019      	movs	r1, r3
 800ae02:	6978      	ldr	r0, [r7, #20]
 800ae04:	f7f5 f9a2 	bl	800014c <__udivsi3>
 800ae08:	0003      	movs	r3, r0
 800ae0a:	005a      	lsls	r2, r3, #1
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	085b      	lsrs	r3, r3, #1
 800ae12:	18d2      	adds	r2, r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	0019      	movs	r1, r3
 800ae1a:	0010      	movs	r0, r2
 800ae1c:	f7f5 f996 	bl	800014c <__udivsi3>
 800ae20:	0003      	movs	r3, r0
 800ae22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2b0f      	cmp	r3, #15
 800ae28:	d91c      	bls.n	800ae64 <UART_SetConfig+0x248>
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	2380      	movs	r3, #128	; 0x80
 800ae2e:	025b      	lsls	r3, r3, #9
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d217      	bcs.n	800ae64 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	200e      	movs	r0, #14
 800ae3a:	183b      	adds	r3, r7, r0
 800ae3c:	210f      	movs	r1, #15
 800ae3e:	438a      	bics	r2, r1
 800ae40:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	085b      	lsrs	r3, r3, #1
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	2207      	movs	r2, #7
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	b299      	uxth	r1, r3
 800ae4e:	183b      	adds	r3, r7, r0
 800ae50:	183a      	adds	r2, r7, r0
 800ae52:	8812      	ldrh	r2, [r2, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	183a      	adds	r2, r7, r0
 800ae5e:	8812      	ldrh	r2, [r2, #0]
 800ae60:	60da      	str	r2, [r3, #12]
 800ae62:	e056      	b.n	800af12 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800ae64:	231a      	movs	r3, #26
 800ae66:	18fb      	adds	r3, r7, r3
 800ae68:	2201      	movs	r2, #1
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	e051      	b.n	800af12 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae6e:	231b      	movs	r3, #27
 800ae70:	18fb      	adds	r3, r7, r3
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b08      	cmp	r3, #8
 800ae76:	d015      	beq.n	800aea4 <UART_SetConfig+0x288>
 800ae78:	dc18      	bgt.n	800aeac <UART_SetConfig+0x290>
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d00d      	beq.n	800ae9a <UART_SetConfig+0x27e>
 800ae7e:	dc15      	bgt.n	800aeac <UART_SetConfig+0x290>
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <UART_SetConfig+0x26e>
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d005      	beq.n	800ae94 <UART_SetConfig+0x278>
 800ae88:	e010      	b.n	800aeac <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae8a:	f7fc fd6b 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 800ae8e:	0003      	movs	r3, r0
 800ae90:	617b      	str	r3, [r7, #20]
        break;
 800ae92:	e012      	b.n	800aeba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae94:	4b31      	ldr	r3, [pc, #196]	; (800af5c <UART_SetConfig+0x340>)
 800ae96:	617b      	str	r3, [r7, #20]
        break;
 800ae98:	e00f      	b.n	800aeba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae9a:	f7fc fcd7 	bl	800784c <HAL_RCC_GetSysClockFreq>
 800ae9e:	0003      	movs	r3, r0
 800aea0:	617b      	str	r3, [r7, #20]
        break;
 800aea2:	e00a      	b.n	800aeba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aea4:	2380      	movs	r3, #128	; 0x80
 800aea6:	021b      	lsls	r3, r3, #8
 800aea8:	617b      	str	r3, [r7, #20]
        break;
 800aeaa:	e006      	b.n	800aeba <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aeb0:	231a      	movs	r3, #26
 800aeb2:	18fb      	adds	r3, r7, r3
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	701a      	strb	r2, [r3, #0]
        break;
 800aeb8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d028      	beq.n	800af12 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aec4:	4b26      	ldr	r3, [pc, #152]	; (800af60 <UART_SetConfig+0x344>)
 800aec6:	0052      	lsls	r2, r2, #1
 800aec8:	5ad3      	ldrh	r3, [r2, r3]
 800aeca:	0019      	movs	r1, r3
 800aecc:	6978      	ldr	r0, [r7, #20]
 800aece:	f7f5 f93d 	bl	800014c <__udivsi3>
 800aed2:	0003      	movs	r3, r0
 800aed4:	001a      	movs	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	085b      	lsrs	r3, r3, #1
 800aedc:	18d2      	adds	r2, r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	0019      	movs	r1, r3
 800aee4:	0010      	movs	r0, r2
 800aee6:	f7f5 f931 	bl	800014c <__udivsi3>
 800aeea:	0003      	movs	r3, r0
 800aeec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2b0f      	cmp	r3, #15
 800aef2:	d90a      	bls.n	800af0a <UART_SetConfig+0x2ee>
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	2380      	movs	r3, #128	; 0x80
 800aef8:	025b      	lsls	r3, r3, #9
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d205      	bcs.n	800af0a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	b29a      	uxth	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	60da      	str	r2, [r3, #12]
 800af08:	e003      	b.n	800af12 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800af0a:	231a      	movs	r3, #26
 800af0c:	18fb      	adds	r3, r7, r3
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	226a      	movs	r2, #106	; 0x6a
 800af16:	2101      	movs	r1, #1
 800af18:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2268      	movs	r2, #104	; 0x68
 800af1e:	2101      	movs	r1, #1
 800af20:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800af2e:	231a      	movs	r3, #26
 800af30:	18fb      	adds	r3, r7, r3
 800af32:	781b      	ldrb	r3, [r3, #0]
}
 800af34:	0018      	movs	r0, r3
 800af36:	46bd      	mov	sp, r7
 800af38:	b008      	add	sp, #32
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	cfff69f3 	.word	0xcfff69f3
 800af40:	ffffcfff 	.word	0xffffcfff
 800af44:	11fff4ff 	.word	0x11fff4ff
 800af48:	40013800 	.word	0x40013800
 800af4c:	40021000 	.word	0x40021000
 800af50:	40004400 	.word	0x40004400
 800af54:	40004800 	.word	0x40004800
 800af58:	40004c00 	.word	0x40004c00
 800af5c:	00f42400 	.word	0x00f42400
 800af60:	0801820c 	.word	0x0801820c

0800af64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af70:	2201      	movs	r2, #1
 800af72:	4013      	ands	r3, r2
 800af74:	d00b      	beq.n	800af8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	4a4a      	ldr	r2, [pc, #296]	; (800b0a8 <UART_AdvFeatureConfig+0x144>)
 800af7e:	4013      	ands	r3, r2
 800af80:	0019      	movs	r1, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af92:	2202      	movs	r2, #2
 800af94:	4013      	ands	r3, r2
 800af96:	d00b      	beq.n	800afb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4a43      	ldr	r2, [pc, #268]	; (800b0ac <UART_AdvFeatureConfig+0x148>)
 800afa0:	4013      	ands	r3, r2
 800afa2:	0019      	movs	r1, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	430a      	orrs	r2, r1
 800afae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb4:	2204      	movs	r2, #4
 800afb6:	4013      	ands	r3, r2
 800afb8:	d00b      	beq.n	800afd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4a3b      	ldr	r2, [pc, #236]	; (800b0b0 <UART_AdvFeatureConfig+0x14c>)
 800afc2:	4013      	ands	r3, r2
 800afc4:	0019      	movs	r1, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	2208      	movs	r2, #8
 800afd8:	4013      	ands	r3, r2
 800afda:	d00b      	beq.n	800aff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	4a34      	ldr	r2, [pc, #208]	; (800b0b4 <UART_AdvFeatureConfig+0x150>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	0019      	movs	r1, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff8:	2210      	movs	r2, #16
 800affa:	4013      	ands	r3, r2
 800affc:	d00b      	beq.n	800b016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	4a2c      	ldr	r2, [pc, #176]	; (800b0b8 <UART_AdvFeatureConfig+0x154>)
 800b006:	4013      	ands	r3, r2
 800b008:	0019      	movs	r1, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	2220      	movs	r2, #32
 800b01c:	4013      	ands	r3, r2
 800b01e:	d00b      	beq.n	800b038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	4a25      	ldr	r2, [pc, #148]	; (800b0bc <UART_AdvFeatureConfig+0x158>)
 800b028:	4013      	ands	r3, r2
 800b02a:	0019      	movs	r1, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	2240      	movs	r2, #64	; 0x40
 800b03e:	4013      	ands	r3, r2
 800b040:	d01d      	beq.n	800b07e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4a1d      	ldr	r2, [pc, #116]	; (800b0c0 <UART_AdvFeatureConfig+0x15c>)
 800b04a:	4013      	ands	r3, r2
 800b04c:	0019      	movs	r1, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b05e:	2380      	movs	r3, #128	; 0x80
 800b060:	035b      	lsls	r3, r3, #13
 800b062:	429a      	cmp	r2, r3
 800b064:	d10b      	bne.n	800b07e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	4a15      	ldr	r2, [pc, #84]	; (800b0c4 <UART_AdvFeatureConfig+0x160>)
 800b06e:	4013      	ands	r3, r2
 800b070:	0019      	movs	r1, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	2280      	movs	r2, #128	; 0x80
 800b084:	4013      	ands	r3, r2
 800b086:	d00b      	beq.n	800b0a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4a0e      	ldr	r2, [pc, #56]	; (800b0c8 <UART_AdvFeatureConfig+0x164>)
 800b090:	4013      	ands	r3, r2
 800b092:	0019      	movs	r1, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	605a      	str	r2, [r3, #4]
  }
}
 800b0a0:	46c0      	nop			; (mov r8, r8)
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	fffdffff 	.word	0xfffdffff
 800b0ac:	fffeffff 	.word	0xfffeffff
 800b0b0:	fffbffff 	.word	0xfffbffff
 800b0b4:	ffff7fff 	.word	0xffff7fff
 800b0b8:	ffffefff 	.word	0xffffefff
 800b0bc:	ffffdfff 	.word	0xffffdfff
 800b0c0:	ffefffff 	.word	0xffefffff
 800b0c4:	ff9fffff 	.word	0xff9fffff
 800b0c8:	fff7ffff 	.word	0xfff7ffff

0800b0cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af02      	add	r7, sp, #8
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2290      	movs	r2, #144	; 0x90
 800b0d8:	2100      	movs	r1, #0
 800b0da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0dc:	f7fa f886 	bl	80051ec <HAL_GetTick>
 800b0e0:	0003      	movs	r3, r0
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2208      	movs	r2, #8
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	2b08      	cmp	r3, #8
 800b0f0:	d10c      	bne.n	800b10c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2280      	movs	r2, #128	; 0x80
 800b0f6:	0391      	lsls	r1, r2, #14
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	4a1a      	ldr	r2, [pc, #104]	; (800b164 <UART_CheckIdleState+0x98>)
 800b0fc:	9200      	str	r2, [sp, #0]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f000 f832 	bl	800b168 <UART_WaitOnFlagUntilTimeout>
 800b104:	1e03      	subs	r3, r0, #0
 800b106:	d001      	beq.n	800b10c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e026      	b.n	800b15a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2204      	movs	r2, #4
 800b114:	4013      	ands	r3, r2
 800b116:	2b04      	cmp	r3, #4
 800b118:	d10c      	bne.n	800b134 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2280      	movs	r2, #128	; 0x80
 800b11e:	03d1      	lsls	r1, r2, #15
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	4a10      	ldr	r2, [pc, #64]	; (800b164 <UART_CheckIdleState+0x98>)
 800b124:	9200      	str	r2, [sp, #0]
 800b126:	2200      	movs	r2, #0
 800b128:	f000 f81e 	bl	800b168 <UART_WaitOnFlagUntilTimeout>
 800b12c:	1e03      	subs	r3, r0, #0
 800b12e:	d001      	beq.n	800b134 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b130:	2303      	movs	r3, #3
 800b132:	e012      	b.n	800b15a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2288      	movs	r2, #136	; 0x88
 800b138:	2120      	movs	r1, #32
 800b13a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	228c      	movs	r2, #140	; 0x8c
 800b140:	2120      	movs	r1, #32
 800b142:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2284      	movs	r2, #132	; 0x84
 800b154:	2100      	movs	r1, #0
 800b156:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	0018      	movs	r0, r3
 800b15c:	46bd      	mov	sp, r7
 800b15e:	b004      	add	sp, #16
 800b160:	bd80      	pop	{r7, pc}
 800b162:	46c0      	nop			; (mov r8, r8)
 800b164:	01ffffff 	.word	0x01ffffff

0800b168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b094      	sub	sp, #80	; 0x50
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	1dfb      	adds	r3, r7, #7
 800b176:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b178:	e0a7      	b.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b17a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b17c:	3301      	adds	r3, #1
 800b17e:	d100      	bne.n	800b182 <UART_WaitOnFlagUntilTimeout+0x1a>
 800b180:	e0a3      	b.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b182:	f7fa f833 	bl	80051ec <HAL_GetTick>
 800b186:	0002      	movs	r2, r0
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b18e:	429a      	cmp	r2, r3
 800b190:	d302      	bcc.n	800b198 <UART_WaitOnFlagUntilTimeout+0x30>
 800b192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b194:	2b00      	cmp	r3, #0
 800b196:	d13f      	bne.n	800b218 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b198:	f3ef 8310 	mrs	r3, PRIMASK
 800b19c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	f383 8810 	msr	PRIMASK, r3
}
 800b1ac:	46c0      	nop			; (mov r8, r8)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	494e      	ldr	r1, [pc, #312]	; (800b2f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b1ba:	400a      	ands	r2, r1
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	f383 8810 	msr	PRIMASK, r3
}
 800b1c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d2:	643b      	str	r3, [r7, #64]	; 0x40
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	f383 8810 	msr	PRIMASK, r3
}
 800b1de:	46c0      	nop			; (mov r8, r8)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689a      	ldr	r2, [r3, #8]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	438a      	bics	r2, r1
 800b1ee:	609a      	str	r2, [r3, #8]
 800b1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f6:	f383 8810 	msr	PRIMASK, r3
}
 800b1fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2288      	movs	r2, #136	; 0x88
 800b200:	2120      	movs	r1, #32
 800b202:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	228c      	movs	r2, #140	; 0x8c
 800b208:	2120      	movs	r1, #32
 800b20a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2284      	movs	r2, #132	; 0x84
 800b210:	2100      	movs	r1, #0
 800b212:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e069      	b.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2204      	movs	r2, #4
 800b220:	4013      	ands	r3, r2
 800b222:	d052      	beq.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	69da      	ldr	r2, [r3, #28]
 800b22a:	2380      	movs	r3, #128	; 0x80
 800b22c:	011b      	lsls	r3, r3, #4
 800b22e:	401a      	ands	r2, r3
 800b230:	2380      	movs	r3, #128	; 0x80
 800b232:	011b      	lsls	r3, r3, #4
 800b234:	429a      	cmp	r2, r3
 800b236:	d148      	bne.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2280      	movs	r2, #128	; 0x80
 800b23e:	0112      	lsls	r2, r2, #4
 800b240:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b242:	f3ef 8310 	mrs	r3, PRIMASK
 800b246:	613b      	str	r3, [r7, #16]
  return(result);
 800b248:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b24a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b24c:	2301      	movs	r3, #1
 800b24e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f383 8810 	msr	PRIMASK, r3
}
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4924      	ldr	r1, [pc, #144]	; (800b2f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b264:	400a      	ands	r2, r1
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	f383 8810 	msr	PRIMASK, r3
}
 800b272:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b274:	f3ef 8310 	mrs	r3, PRIMASK
 800b278:	61fb      	str	r3, [r7, #28]
  return(result);
 800b27a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b27e:	2301      	movs	r3, #1
 800b280:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	f383 8810 	msr	PRIMASK, r3
}
 800b288:	46c0      	nop			; (mov r8, r8)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2101      	movs	r1, #1
 800b296:	438a      	bics	r2, r1
 800b298:	609a      	str	r2, [r3, #8]
 800b29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	f383 8810 	msr	PRIMASK, r3
}
 800b2a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2288      	movs	r2, #136	; 0x88
 800b2aa:	2120      	movs	r1, #32
 800b2ac:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	228c      	movs	r2, #140	; 0x8c
 800b2b2:	2120      	movs	r1, #32
 800b2b4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2290      	movs	r2, #144	; 0x90
 800b2ba:	2120      	movs	r1, #32
 800b2bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2284      	movs	r2, #132	; 0x84
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e010      	b.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	425a      	negs	r2, r3
 800b2da:	4153      	adcs	r3, r2
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	001a      	movs	r2, r3
 800b2e0:	1dfb      	adds	r3, r7, #7
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d100      	bne.n	800b2ea <UART_WaitOnFlagUntilTimeout+0x182>
 800b2e8:	e747      	b.n	800b17a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	b014      	add	sp, #80	; 0x50
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	fffffe5f 	.word	0xfffffe5f

0800b2f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b090      	sub	sp, #64	; 0x40
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	1dbb      	adds	r3, r7, #6
 800b304:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	1dba      	adds	r2, r7, #6
 800b310:	215c      	movs	r1, #92	; 0x5c
 800b312:	8812      	ldrh	r2, [r2, #0]
 800b314:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2290      	movs	r2, #144	; 0x90
 800b31a:	2100      	movs	r1, #0
 800b31c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	228c      	movs	r2, #140	; 0x8c
 800b322:	2122      	movs	r1, #34	; 0x22
 800b324:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2280      	movs	r2, #128	; 0x80
 800b32a:	589b      	ldr	r3, [r3, r2]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d02d      	beq.n	800b38c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2280      	movs	r2, #128	; 0x80
 800b334:	589b      	ldr	r3, [r3, r2]
 800b336:	4a40      	ldr	r2, [pc, #256]	; (800b438 <UART_Start_Receive_DMA+0x140>)
 800b338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2280      	movs	r2, #128	; 0x80
 800b33e:	589b      	ldr	r3, [r3, r2]
 800b340:	4a3e      	ldr	r2, [pc, #248]	; (800b43c <UART_Start_Receive_DMA+0x144>)
 800b342:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2280      	movs	r2, #128	; 0x80
 800b348:	589b      	ldr	r3, [r3, r2]
 800b34a:	4a3d      	ldr	r2, [pc, #244]	; (800b440 <UART_Start_Receive_DMA+0x148>)
 800b34c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2280      	movs	r2, #128	; 0x80
 800b352:	589b      	ldr	r3, [r3, r2]
 800b354:	2200      	movs	r2, #0
 800b356:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2280      	movs	r2, #128	; 0x80
 800b35c:	5898      	ldr	r0, [r3, r2]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3324      	adds	r3, #36	; 0x24
 800b364:	0019      	movs	r1, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36a:	001a      	movs	r2, r3
 800b36c:	1dbb      	adds	r3, r7, #6
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	f7fb f9cc 	bl	800670c <HAL_DMA_Start_IT>
 800b374:	1e03      	subs	r3, r0, #0
 800b376:	d009      	beq.n	800b38c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2290      	movs	r2, #144	; 0x90
 800b37c:	2110      	movs	r1, #16
 800b37e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	228c      	movs	r2, #140	; 0x8c
 800b384:	2120      	movs	r1, #32
 800b386:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e050      	b.n	800b42e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d019      	beq.n	800b3c8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b394:	f3ef 8310 	mrs	r3, PRIMASK
 800b398:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b39c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b39e:	2301      	movs	r3, #1
 800b3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	f383 8810 	msr	PRIMASK, r3
}
 800b3a8:	46c0      	nop			; (mov r8, r8)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2180      	movs	r1, #128	; 0x80
 800b3b6:	0049      	lsls	r1, r1, #1
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	f383 8810 	msr	PRIMASK, r3
}
 800b3c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3cc:	613b      	str	r3, [r7, #16]
  return(result);
 800b3ce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f383 8810 	msr	PRIMASK, r3
}
 800b3dc:	46c0      	nop			; (mov r8, r8)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689a      	ldr	r2, [r3, #8]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	609a      	str	r2, [r3, #8]
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	f383 8810 	msr	PRIMASK, r3
}
 800b3f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b3fe:	61fb      	str	r3, [r7, #28]
  return(result);
 800b400:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
 800b404:	2301      	movs	r3, #1
 800b406:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	f383 8810 	msr	PRIMASK, r3
}
 800b40e:	46c0      	nop			; (mov r8, r8)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689a      	ldr	r2, [r3, #8]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2140      	movs	r1, #64	; 0x40
 800b41c:	430a      	orrs	r2, r1
 800b41e:	609a      	str	r2, [r3, #8]
 800b420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b422:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	f383 8810 	msr	PRIMASK, r3
}
 800b42a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	0018      	movs	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	b010      	add	sp, #64	; 0x40
 800b434:	bd80      	pop	{r7, pc}
 800b436:	46c0      	nop			; (mov r8, r8)
 800b438:	0800b591 	.word	0x0800b591
 800b43c:	0800b6c1 	.word	0x0800b6c1
 800b440:	0800b703 	.word	0x0800b703

0800b444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08a      	sub	sp, #40	; 0x28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b44c:	f3ef 8310 	mrs	r3, PRIMASK
 800b450:	60bb      	str	r3, [r7, #8]
  return(result);
 800b452:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
 800b456:	2301      	movs	r3, #1
 800b458:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f383 8810 	msr	PRIMASK, r3
}
 800b460:	46c0      	nop			; (mov r8, r8)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	21c0      	movs	r1, #192	; 0xc0
 800b46e:	438a      	bics	r2, r1
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f383 8810 	msr	PRIMASK, r3
}
 800b47c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b47e:	f3ef 8310 	mrs	r3, PRIMASK
 800b482:	617b      	str	r3, [r7, #20]
  return(result);
 800b484:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b486:	623b      	str	r3, [r7, #32]
 800b488:	2301      	movs	r3, #1
 800b48a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	f383 8810 	msr	PRIMASK, r3
}
 800b492:	46c0      	nop			; (mov r8, r8)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4908      	ldr	r1, [pc, #32]	; (800b4c0 <UART_EndTxTransfer+0x7c>)
 800b4a0:	400a      	ands	r2, r1
 800b4a2:	609a      	str	r2, [r3, #8]
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	f383 8810 	msr	PRIMASK, r3
}
 800b4ae:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2288      	movs	r2, #136	; 0x88
 800b4b4:	2120      	movs	r1, #32
 800b4b6:	5099      	str	r1, [r3, r2]
}
 800b4b8:	46c0      	nop			; (mov r8, r8)
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	b00a      	add	sp, #40	; 0x28
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	ff7fffff 	.word	0xff7fffff

0800b4c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08e      	sub	sp, #56	; 0x38
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b4d0:	617b      	str	r3, [r7, #20]
  return(result);
 800b4d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	f383 8810 	msr	PRIMASK, r3
}
 800b4e0:	46c0      	nop			; (mov r8, r8)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4926      	ldr	r1, [pc, #152]	; (800b588 <UART_EndRxTransfer+0xc4>)
 800b4ee:	400a      	ands	r2, r1
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	f383 8810 	msr	PRIMASK, r3
}
 800b4fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b502:	623b      	str	r3, [r7, #32]
  return(result);
 800b504:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b506:	633b      	str	r3, [r7, #48]	; 0x30
 800b508:	2301      	movs	r3, #1
 800b50a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	f383 8810 	msr	PRIMASK, r3
}
 800b512:	46c0      	nop			; (mov r8, r8)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	689a      	ldr	r2, [r3, #8]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	491b      	ldr	r1, [pc, #108]	; (800b58c <UART_EndRxTransfer+0xc8>)
 800b520:	400a      	ands	r2, r1
 800b522:	609a      	str	r2, [r3, #8]
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	f383 8810 	msr	PRIMASK, r3
}
 800b52e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b534:	2b01      	cmp	r3, #1
 800b536:	d118      	bne.n	800b56a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b538:	f3ef 8310 	mrs	r3, PRIMASK
 800b53c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b53e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b540:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b542:	2301      	movs	r3, #1
 800b544:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f383 8810 	msr	PRIMASK, r3
}
 800b54c:	46c0      	nop			; (mov r8, r8)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2110      	movs	r1, #16
 800b55a:	438a      	bics	r2, r1
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f383 8810 	msr	PRIMASK, r3
}
 800b568:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	228c      	movs	r2, #140	; 0x8c
 800b56e:	2120      	movs	r1, #32
 800b570:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b57e:	46c0      	nop			; (mov r8, r8)
 800b580:	46bd      	mov	sp, r7
 800b582:	b00e      	add	sp, #56	; 0x38
 800b584:	bd80      	pop	{r7, pc}
 800b586:	46c0      	nop			; (mov r8, r8)
 800b588:	fffffedf 	.word	0xfffffedf
 800b58c:	effffffe 	.word	0xeffffffe

0800b590 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b094      	sub	sp, #80	; 0x50
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b59c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	d16f      	bne.n	800b68a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ac:	225e      	movs	r2, #94	; 0x5e
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5bc:	2301      	movs	r3, #1
 800b5be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	f383 8810 	msr	PRIMASK, r3
}
 800b5c6:	46c0      	nop			; (mov r8, r8)
 800b5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	493a      	ldr	r1, [pc, #232]	; (800b6bc <UART_DMAReceiveCplt+0x12c>)
 800b5d4:	400a      	ands	r2, r1
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	f383 8810 	msr	PRIMASK, r3
}
 800b5e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ec:	647b      	str	r3, [r7, #68]	; 0x44
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	f383 8810 	msr	PRIMASK, r3
}
 800b5f8:	46c0      	nop			; (mov r8, r8)
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	689a      	ldr	r2, [r3, #8]
 800b600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2101      	movs	r1, #1
 800b606:	438a      	bics	r2, r1
 800b608:	609a      	str	r2, [r3, #8]
 800b60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b60c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b610:	f383 8810 	msr	PRIMASK, r3
}
 800b614:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b616:	f3ef 8310 	mrs	r3, PRIMASK
 800b61a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b61e:	643b      	str	r3, [r7, #64]	; 0x40
 800b620:	2301      	movs	r3, #1
 800b622:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b626:	f383 8810 	msr	PRIMASK, r3
}
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2140      	movs	r1, #64	; 0x40
 800b638:	438a      	bics	r2, r1
 800b63a:	609a      	str	r2, [r3, #8]
 800b63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	f383 8810 	msr	PRIMASK, r3
}
 800b646:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64a:	228c      	movs	r2, #140	; 0x8c
 800b64c:	2120      	movs	r1, #32
 800b64e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b654:	2b01      	cmp	r3, #1
 800b656:	d118      	bne.n	800b68a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b658:	f3ef 8310 	mrs	r3, PRIMASK
 800b65c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b65e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b662:	2301      	movs	r3, #1
 800b664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f383 8810 	msr	PRIMASK, r3
}
 800b66c:	46c0      	nop			; (mov r8, r8)
 800b66e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2110      	movs	r1, #16
 800b67a:	438a      	bics	r2, r1
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b680:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f383 8810 	msr	PRIMASK, r3
}
 800b688:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b68c:	2200      	movs	r2, #0
 800b68e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b694:	2b01      	cmp	r3, #1
 800b696:	d108      	bne.n	800b6aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69a:	225c      	movs	r2, #92	; 0x5c
 800b69c:	5a9a      	ldrh	r2, [r3, r2]
 800b69e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a0:	0011      	movs	r1, r2
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f7ff faae 	bl	800ac04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6a8:	e003      	b.n	800b6b2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ac:	0018      	movs	r0, r3
 800b6ae:	f7ff fa91 	bl	800abd4 <HAL_UART_RxCpltCallback>
}
 800b6b2:	46c0      	nop			; (mov r8, r8)
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	b014      	add	sp, #80	; 0x50
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	46c0      	nop			; (mov r8, r8)
 800b6bc:	fffffeff 	.word	0xfffffeff

0800b6c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d10a      	bne.n	800b6f2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	225c      	movs	r2, #92	; 0x5c
 800b6e0:	5a9b      	ldrh	r3, [r3, r2]
 800b6e2:	085b      	lsrs	r3, r3, #1
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	0011      	movs	r1, r2
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f7ff fa8a 	bl	800ac04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6f0:	e003      	b.n	800b6fa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	0018      	movs	r0, r3
 800b6f6:	f7ff fa75 	bl	800abe4 <HAL_UART_RxHalfCpltCallback>
}
 800b6fa:	46c0      	nop			; (mov r8, r8)
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	b004      	add	sp, #16
 800b700:	bd80      	pop	{r7, pc}

0800b702 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b086      	sub	sp, #24
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2288      	movs	r2, #136	; 0x88
 800b714:	589b      	ldr	r3, [r3, r2]
 800b716:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	228c      	movs	r2, #140	; 0x8c
 800b71c:	589b      	ldr	r3, [r3, r2]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	2280      	movs	r2, #128	; 0x80
 800b728:	4013      	ands	r3, r2
 800b72a:	2b80      	cmp	r3, #128	; 0x80
 800b72c:	d10a      	bne.n	800b744 <UART_DMAError+0x42>
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b21      	cmp	r3, #33	; 0x21
 800b732:	d107      	bne.n	800b744 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2256      	movs	r2, #86	; 0x56
 800b738:	2100      	movs	r1, #0
 800b73a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	0018      	movs	r0, r3
 800b740:	f7ff fe80 	bl	800b444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	2240      	movs	r2, #64	; 0x40
 800b74c:	4013      	ands	r3, r2
 800b74e:	2b40      	cmp	r3, #64	; 0x40
 800b750:	d10a      	bne.n	800b768 <UART_DMAError+0x66>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b22      	cmp	r3, #34	; 0x22
 800b756:	d107      	bne.n	800b768 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	225e      	movs	r2, #94	; 0x5e
 800b75c:	2100      	movs	r1, #0
 800b75e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	0018      	movs	r0, r3
 800b764:	f7ff feae 	bl	800b4c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2290      	movs	r2, #144	; 0x90
 800b76c:	589b      	ldr	r3, [r3, r2]
 800b76e:	2210      	movs	r2, #16
 800b770:	431a      	orrs	r2, r3
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2190      	movs	r1, #144	; 0x90
 800b776:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	0018      	movs	r0, r3
 800b77c:	f7ff fa3a 	bl	800abf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b780:	46c0      	nop			; (mov r8, r8)
 800b782:	46bd      	mov	sp, r7
 800b784:	b006      	add	sp, #24
 800b786:	bd80      	pop	{r7, pc}

0800b788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	225e      	movs	r2, #94	; 0x5e
 800b79a:	2100      	movs	r1, #0
 800b79c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2256      	movs	r2, #86	; 0x56
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f7ff fa23 	bl	800abf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b004      	add	sp, #16
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b08a      	sub	sp, #40	; 0x28
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2288      	movs	r2, #136	; 0x88
 800b7c2:	589b      	ldr	r3, [r3, r2]
 800b7c4:	2b21      	cmp	r3, #33	; 0x21
 800b7c6:	d14c      	bne.n	800b862 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2256      	movs	r2, #86	; 0x56
 800b7cc:	5a9b      	ldrh	r3, [r3, r2]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d132      	bne.n	800b83a <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7da:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7de:	2301      	movs	r3, #1
 800b7e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f383 8810 	msr	PRIMASK, r3
}
 800b7e8:	46c0      	nop			; (mov r8, r8)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2180      	movs	r1, #128	; 0x80
 800b7f6:	438a      	bics	r2, r1
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	f383 8810 	msr	PRIMASK, r3
}
 800b804:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b806:	f3ef 8310 	mrs	r3, PRIMASK
 800b80a:	617b      	str	r3, [r7, #20]
  return(result);
 800b80c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b80e:	623b      	str	r3, [r7, #32]
 800b810:	2301      	movs	r3, #1
 800b812:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	f383 8810 	msr	PRIMASK, r3
}
 800b81a:	46c0      	nop			; (mov r8, r8)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2140      	movs	r1, #64	; 0x40
 800b828:	430a      	orrs	r2, r1
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	f383 8810 	msr	PRIMASK, r3
}
 800b836:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b838:	e013      	b.n	800b862 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b83e:	781a      	ldrb	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2256      	movs	r2, #86	; 0x56
 800b854:	5a9b      	ldrh	r3, [r3, r2]
 800b856:	b29b      	uxth	r3, r3
 800b858:	3b01      	subs	r3, #1
 800b85a:	b299      	uxth	r1, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2256      	movs	r2, #86	; 0x56
 800b860:	5299      	strh	r1, [r3, r2]
}
 800b862:	46c0      	nop			; (mov r8, r8)
 800b864:	46bd      	mov	sp, r7
 800b866:	b00a      	add	sp, #40	; 0x28
 800b868:	bd80      	pop	{r7, pc}

0800b86a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b08c      	sub	sp, #48	; 0x30
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2288      	movs	r2, #136	; 0x88
 800b876:	589b      	ldr	r3, [r3, r2]
 800b878:	2b21      	cmp	r3, #33	; 0x21
 800b87a:	d151      	bne.n	800b920 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2256      	movs	r2, #86	; 0x56
 800b880:	5a9b      	ldrh	r3, [r3, r2]
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d132      	bne.n	800b8ee <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b888:	f3ef 8310 	mrs	r3, PRIMASK
 800b88c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b88e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b890:	62bb      	str	r3, [r7, #40]	; 0x28
 800b892:	2301      	movs	r3, #1
 800b894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f383 8810 	msr	PRIMASK, r3
}
 800b89c:	46c0      	nop			; (mov r8, r8)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2180      	movs	r1, #128	; 0x80
 800b8aa:	438a      	bics	r2, r1
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f383 8810 	msr	PRIMASK, r3
}
 800b8b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b8be:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8c0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	f383 8810 	msr	PRIMASK, r3
}
 800b8ce:	46c0      	nop			; (mov r8, r8)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2140      	movs	r1, #64	; 0x40
 800b8dc:	430a      	orrs	r2, r1
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	f383 8810 	msr	PRIMASK, r3
}
 800b8ea:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b8ec:	e018      	b.n	800b920 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	001a      	movs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	05d2      	lsls	r2, r2, #23
 800b900:	0dd2      	lsrs	r2, r2, #23
 800b902:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b908:	1c9a      	adds	r2, r3, #2
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2256      	movs	r2, #86	; 0x56
 800b912:	5a9b      	ldrh	r3, [r3, r2]
 800b914:	b29b      	uxth	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	b299      	uxth	r1, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2256      	movs	r2, #86	; 0x56
 800b91e:	5299      	strh	r1, [r3, r2]
}
 800b920:	46c0      	nop			; (mov r8, r8)
 800b922:	46bd      	mov	sp, r7
 800b924:	b00c      	add	sp, #48	; 0x30
 800b926:	bd80      	pop	{r7, pc}

0800b928 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08c      	sub	sp, #48	; 0x30
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2288      	movs	r2, #136	; 0x88
 800b934:	589b      	ldr	r3, [r3, r2]
 800b936:	2b21      	cmp	r3, #33	; 0x21
 800b938:	d165      	bne.n	800ba06 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b93a:	232e      	movs	r3, #46	; 0x2e
 800b93c:	18fb      	adds	r3, r7, r3
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	216a      	movs	r1, #106	; 0x6a
 800b942:	5a52      	ldrh	r2, [r2, r1]
 800b944:	801a      	strh	r2, [r3, #0]
 800b946:	e059      	b.n	800b9fc <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2256      	movs	r2, #86	; 0x56
 800b94c:	5a9b      	ldrh	r3, [r3, r2]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d133      	bne.n	800b9bc <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b954:	f3ef 8310 	mrs	r3, PRIMASK
 800b958:	60fb      	str	r3, [r7, #12]
  return(result);
 800b95a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b95c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b95e:	2301      	movs	r3, #1
 800b960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	f383 8810 	msr	PRIMASK, r3
}
 800b968:	46c0      	nop			; (mov r8, r8)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4926      	ldr	r1, [pc, #152]	; (800ba10 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800b976:	400a      	ands	r2, r1
 800b978:	609a      	str	r2, [r3, #8]
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f383 8810 	msr	PRIMASK, r3
}
 800b984:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b986:	f3ef 8310 	mrs	r3, PRIMASK
 800b98a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b98c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
 800b990:	2301      	movs	r3, #1
 800b992:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f383 8810 	msr	PRIMASK, r3
}
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2140      	movs	r1, #64	; 0x40
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	f383 8810 	msr	PRIMASK, r3
}
 800b9b6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b9b8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b9ba:	e024      	b.n	800ba06 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	69db      	ldr	r3, [r3, #28]
 800b9c2:	2280      	movs	r2, #128	; 0x80
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	d013      	beq.n	800b9f0 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9cc:	781a      	ldrb	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2256      	movs	r2, #86	; 0x56
 800b9e2:	5a9b      	ldrh	r3, [r3, r2]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b299      	uxth	r1, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2256      	movs	r2, #86	; 0x56
 800b9ee:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b9f0:	212e      	movs	r1, #46	; 0x2e
 800b9f2:	187b      	adds	r3, r7, r1
 800b9f4:	881a      	ldrh	r2, [r3, #0]
 800b9f6:	187b      	adds	r3, r7, r1
 800b9f8:	3a01      	subs	r2, #1
 800b9fa:	801a      	strh	r2, [r3, #0]
 800b9fc:	232e      	movs	r3, #46	; 0x2e
 800b9fe:	18fb      	adds	r3, r7, r3
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1a0      	bne.n	800b948 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800ba06:	46c0      	nop			; (mov r8, r8)
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	b00c      	add	sp, #48	; 0x30
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	46c0      	nop			; (mov r8, r8)
 800ba10:	ff7fffff 	.word	0xff7fffff

0800ba14 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b08c      	sub	sp, #48	; 0x30
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2288      	movs	r2, #136	; 0x88
 800ba20:	589b      	ldr	r3, [r3, r2]
 800ba22:	2b21      	cmp	r3, #33	; 0x21
 800ba24:	d16a      	bne.n	800bafc <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba26:	232e      	movs	r3, #46	; 0x2e
 800ba28:	18fb      	adds	r3, r7, r3
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	216a      	movs	r1, #106	; 0x6a
 800ba2e:	5a52      	ldrh	r2, [r2, r1]
 800ba30:	801a      	strh	r2, [r3, #0]
 800ba32:	e05e      	b.n	800baf2 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2256      	movs	r2, #86	; 0x56
 800ba38:	5a9b      	ldrh	r3, [r3, r2]
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d133      	bne.n	800baa8 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba40:	f3ef 8310 	mrs	r3, PRIMASK
 800ba44:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba46:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f383 8810 	msr	PRIMASK, r3
}
 800ba54:	46c0      	nop			; (mov r8, r8)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	689a      	ldr	r2, [r3, #8]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4928      	ldr	r1, [pc, #160]	; (800bb04 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800ba62:	400a      	ands	r2, r1
 800ba64:	609a      	str	r2, [r3, #8]
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f383 8810 	msr	PRIMASK, r3
}
 800ba70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba72:	f3ef 8310 	mrs	r3, PRIMASK
 800ba76:	617b      	str	r3, [r7, #20]
  return(result);
 800ba78:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba7a:	623b      	str	r3, [r7, #32]
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	f383 8810 	msr	PRIMASK, r3
}
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2140      	movs	r1, #64	; 0x40
 800ba94:	430a      	orrs	r2, r1
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	f383 8810 	msr	PRIMASK, r3
}
 800baa2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800baa4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800baa6:	e029      	b.n	800bafc <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	2280      	movs	r2, #128	; 0x80
 800bab0:	4013      	ands	r3, r2
 800bab2:	d018      	beq.n	800bae6 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab8:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	001a      	movs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	05d2      	lsls	r2, r2, #23
 800bac6:	0dd2      	lsrs	r2, r2, #23
 800bac8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bace:	1c9a      	adds	r2, r3, #2
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2256      	movs	r2, #86	; 0x56
 800bad8:	5a9b      	ldrh	r3, [r3, r2]
 800bada:	b29b      	uxth	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	b299      	uxth	r1, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2256      	movs	r2, #86	; 0x56
 800bae4:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bae6:	212e      	movs	r1, #46	; 0x2e
 800bae8:	187b      	adds	r3, r7, r1
 800baea:	881a      	ldrh	r2, [r3, #0]
 800baec:	187b      	adds	r3, r7, r1
 800baee:	3a01      	subs	r2, #1
 800baf0:	801a      	strh	r2, [r3, #0]
 800baf2:	232e      	movs	r3, #46	; 0x2e
 800baf4:	18fb      	adds	r3, r7, r3
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d19b      	bne.n	800ba34 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800bafc:	46c0      	nop			; (mov r8, r8)
 800bafe:	46bd      	mov	sp, r7
 800bb00:	b00c      	add	sp, #48	; 0x30
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	ff7fffff 	.word	0xff7fffff

0800bb08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb10:	f3ef 8310 	mrs	r3, PRIMASK
 800bb14:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb16:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f383 8810 	msr	PRIMASK, r3
}
 800bb24:	46c0      	nop			; (mov r8, r8)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2140      	movs	r1, #64	; 0x40
 800bb32:	438a      	bics	r2, r1
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f383 8810 	msr	PRIMASK, r3
}
 800bb40:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2288      	movs	r2, #136	; 0x88
 800bb46:	2120      	movs	r1, #32
 800bb48:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	0018      	movs	r0, r3
 800bb54:	f7ff f836 	bl	800abc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb58:	46c0      	nop			; (mov r8, r8)
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	b006      	add	sp, #24
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e05d      	b.n	800bc34 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2288      	movs	r2, #136	; 0x88
 800bb7c:	589b      	ldr	r3, [r3, r2]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d107      	bne.n	800bb92 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2284      	movs	r2, #132	; 0x84
 800bb86:	2100      	movs	r1, #0
 800bb88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	f7f9 f837 	bl	8004c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2288      	movs	r2, #136	; 0x88
 800bb96:	2124      	movs	r1, #36	; 0x24
 800bb98:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2101      	movs	r1, #1
 800bba6:	438a      	bics	r2, r1
 800bba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	0018      	movs	r0, r3
 800bbae:	f7ff f835 	bl	800ac1c <UART_SetConfig>
 800bbb2:	0003      	movs	r3, r0
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d101      	bne.n	800bbbc <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e03b      	b.n	800bc34 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	f7ff f9cc 	bl	800af64 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689a      	ldr	r2, [r3, #8]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2180      	movs	r1, #128	; 0x80
 800bbd8:	01c9      	lsls	r1, r1, #7
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	4a15      	ldr	r2, [pc, #84]	; (800bc3c <HAL_RS485Ex_Init+0xdc>)
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	0019      	movs	r1, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	055b      	lsls	r3, r3, #21
 800bbf8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	041b      	lsls	r3, r3, #16
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a0d      	ldr	r2, [pc, #52]	; (800bc40 <HAL_RS485Ex_Init+0xe0>)
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	0019      	movs	r1, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	430a      	orrs	r2, r1
 800bc18:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2101      	movs	r1, #1
 800bc26:	430a      	orrs	r2, r1
 800bc28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f7ff fa4d 	bl	800b0cc <UART_CheckIdleState>
 800bc32:	0003      	movs	r3, r0
}
 800bc34:	0018      	movs	r0, r3
 800bc36:	46bd      	mov	sp, r7
 800bc38:	b006      	add	sp, #24
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	ffff7fff 	.word	0xffff7fff
 800bc40:	fc00ffff 	.word	0xfc00ffff

0800bc44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc4c:	46c0      	nop			; (mov r8, r8)
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	b002      	add	sp, #8
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc5c:	46c0      	nop			; (mov r8, r8)
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	b002      	add	sp, #8
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc6c:	46c0      	nop			; (mov r8, r8)
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	b002      	add	sp, #8
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2284      	movs	r2, #132	; 0x84
 800bc80:	5c9b      	ldrb	r3, [r3, r2]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d101      	bne.n	800bc8a <HAL_UARTEx_DisableFifoMode+0x16>
 800bc86:	2302      	movs	r3, #2
 800bc88:	e027      	b.n	800bcda <HAL_UARTEx_DisableFifoMode+0x66>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2284      	movs	r2, #132	; 0x84
 800bc8e:	2101      	movs	r1, #1
 800bc90:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2288      	movs	r2, #136	; 0x88
 800bc96:	2124      	movs	r1, #36	; 0x24
 800bc98:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2101      	movs	r1, #1
 800bcae:	438a      	bics	r2, r1
 800bcb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4a0b      	ldr	r2, [pc, #44]	; (800bce4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2288      	movs	r2, #136	; 0x88
 800bccc:	2120      	movs	r1, #32
 800bcce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2284      	movs	r2, #132	; 0x84
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	0018      	movs	r0, r3
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	b004      	add	sp, #16
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	46c0      	nop			; (mov r8, r8)
 800bce4:	dfffffff 	.word	0xdfffffff

0800bce8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2284      	movs	r2, #132	; 0x84
 800bcf6:	5c9b      	ldrb	r3, [r3, r2]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d101      	bne.n	800bd00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	e02e      	b.n	800bd5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2284      	movs	r2, #132	; 0x84
 800bd04:	2101      	movs	r1, #1
 800bd06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2288      	movs	r2, #136	; 0x88
 800bd0c:	2124      	movs	r1, #36	; 0x24
 800bd0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2101      	movs	r1, #1
 800bd24:	438a      	bics	r2, r1
 800bd26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	08d9      	lsrs	r1, r3, #3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f000 f854 	bl	800bdec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2288      	movs	r2, #136	; 0x88
 800bd50:	2120      	movs	r1, #32
 800bd52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2284      	movs	r2, #132	; 0x84
 800bd58:	2100      	movs	r1, #0
 800bd5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	0018      	movs	r0, r3
 800bd60:	46bd      	mov	sp, r7
 800bd62:	b004      	add	sp, #16
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2284      	movs	r2, #132	; 0x84
 800bd76:	5c9b      	ldrb	r3, [r3, r2]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d101      	bne.n	800bd80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e02f      	b.n	800bde0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2284      	movs	r2, #132	; 0x84
 800bd84:	2101      	movs	r1, #1
 800bd86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2288      	movs	r2, #136	; 0x88
 800bd8c:	2124      	movs	r1, #36	; 0x24
 800bd8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2101      	movs	r1, #1
 800bda4:	438a      	bics	r2, r1
 800bda6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	4a0e      	ldr	r2, [pc, #56]	; (800bde8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	0019      	movs	r1, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	0018      	movs	r0, r3
 800bdc2:	f000 f813 	bl	800bdec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2288      	movs	r2, #136	; 0x88
 800bdd2:	2120      	movs	r1, #32
 800bdd4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2284      	movs	r2, #132	; 0x84
 800bdda:	2100      	movs	r1, #0
 800bddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	0018      	movs	r0, r3
 800bde2:	46bd      	mov	sp, r7
 800bde4:	b004      	add	sp, #16
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	f1ffffff 	.word	0xf1ffffff

0800bdec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d108      	bne.n	800be0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	226a      	movs	r2, #106	; 0x6a
 800be00:	2101      	movs	r1, #1
 800be02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2268      	movs	r2, #104	; 0x68
 800be08:	2101      	movs	r1, #1
 800be0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be0c:	e043      	b.n	800be96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be0e:	260f      	movs	r6, #15
 800be10:	19bb      	adds	r3, r7, r6
 800be12:	2208      	movs	r2, #8
 800be14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be16:	200e      	movs	r0, #14
 800be18:	183b      	adds	r3, r7, r0
 800be1a:	2208      	movs	r2, #8
 800be1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	0e5b      	lsrs	r3, r3, #25
 800be26:	b2da      	uxtb	r2, r3
 800be28:	240d      	movs	r4, #13
 800be2a:	193b      	adds	r3, r7, r4
 800be2c:	2107      	movs	r1, #7
 800be2e:	400a      	ands	r2, r1
 800be30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	0f5b      	lsrs	r3, r3, #29
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	250c      	movs	r5, #12
 800be3e:	197b      	adds	r3, r7, r5
 800be40:	2107      	movs	r1, #7
 800be42:	400a      	ands	r2, r1
 800be44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be46:	183b      	adds	r3, r7, r0
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	197a      	adds	r2, r7, r5
 800be4c:	7812      	ldrb	r2, [r2, #0]
 800be4e:	4914      	ldr	r1, [pc, #80]	; (800bea0 <UARTEx_SetNbDataToProcess+0xb4>)
 800be50:	5c8a      	ldrb	r2, [r1, r2]
 800be52:	435a      	muls	r2, r3
 800be54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800be56:	197b      	adds	r3, r7, r5
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	4a12      	ldr	r2, [pc, #72]	; (800bea4 <UARTEx_SetNbDataToProcess+0xb8>)
 800be5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be5e:	0019      	movs	r1, r3
 800be60:	f7f4 f9fe 	bl	8000260 <__divsi3>
 800be64:	0003      	movs	r3, r0
 800be66:	b299      	uxth	r1, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	226a      	movs	r2, #106	; 0x6a
 800be6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be6e:	19bb      	adds	r3, r7, r6
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	193a      	adds	r2, r7, r4
 800be74:	7812      	ldrb	r2, [r2, #0]
 800be76:	490a      	ldr	r1, [pc, #40]	; (800bea0 <UARTEx_SetNbDataToProcess+0xb4>)
 800be78:	5c8a      	ldrb	r2, [r1, r2]
 800be7a:	435a      	muls	r2, r3
 800be7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800be7e:	193b      	adds	r3, r7, r4
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	4a08      	ldr	r2, [pc, #32]	; (800bea4 <UARTEx_SetNbDataToProcess+0xb8>)
 800be84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be86:	0019      	movs	r1, r3
 800be88:	f7f4 f9ea 	bl	8000260 <__divsi3>
 800be8c:	0003      	movs	r3, r0
 800be8e:	b299      	uxth	r1, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2268      	movs	r2, #104	; 0x68
 800be94:	5299      	strh	r1, [r3, r2]
}
 800be96:	46c0      	nop			; (mov r8, r8)
 800be98:	46bd      	mov	sp, r7
 800be9a:	b005      	add	sp, #20
 800be9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be9e:	46c0      	nop			; (mov r8, r8)
 800bea0:	08018224 	.word	0x08018224
 800bea4:	0801822c 	.word	0x0801822c

0800bea8 <AT_25_init>:
	else return 0xff;

}

void AT_25_init(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
	uint8_t buffer[1]={0};
 800beae:	1d3b      	adds	r3, r7, #4
 800beb0:	4a31      	ldr	r2, [pc, #196]	; (800bf78 <AT_25_init+0xd0>)
 800beb2:	7812      	ldrb	r2, [r2, #0]
 800beb4:	701a      	strb	r2, [r3, #0]
	uint8_t RDY=0x01;
 800beb6:	1dfb      	adds	r3, r7, #7
 800beb8:	2201      	movs	r2, #1
 800beba:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1
 800bebc:	4b2f      	ldr	r3, [pc, #188]	; (800bf7c <AT_25_init+0xd4>)
 800bebe:	2201      	movs	r2, #1
 800bec0:	2101      	movs	r1, #1
 800bec2:	0018      	movs	r0, r3
 800bec4:	f7fb f841 	bl	8006f4a <HAL_GPIO_WritePin>
	AT25CS_LOW;
 800bec8:	4b2c      	ldr	r3, [pc, #176]	; (800bf7c <AT_25_init+0xd4>)
 800beca:	2200      	movs	r2, #0
 800becc:	2108      	movs	r1, #8
 800bece:	0018      	movs	r0, r3
 800bed0:	f7fb f83b 	bl	8006f4a <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800bed4:	1d3b      	adds	r3, r7, #4
 800bed6:	2206      	movs	r2, #6
 800bed8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800beda:	23fa      	movs	r3, #250	; 0xfa
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	1d39      	adds	r1, r7, #4
 800bee0:	4827      	ldr	r0, [pc, #156]	; (800bf80 <AT_25_init+0xd8>)
 800bee2:	2201      	movs	r2, #1
 800bee4:	f7fb ff40 	bl	8007d68 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800bee8:	1d3b      	adds	r3, r7, #4
 800beea:	2201      	movs	r2, #1
 800beec:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800beee:	23fa      	movs	r3, #250	; 0xfa
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	1d39      	adds	r1, r7, #4
 800bef4:	4822      	ldr	r0, [pc, #136]	; (800bf80 <AT_25_init+0xd8>)
 800bef6:	2201      	movs	r2, #1
 800bef8:	f7fb ff36 	bl	8007d68 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800befc:	1d3b      	adds	r3, r7, #4
 800befe:	22f2      	movs	r2, #242	; 0xf2
 800bf00:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800bf02:	23fa      	movs	r3, #250	; 0xfa
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	1d39      	adds	r1, r7, #4
 800bf08:	481d      	ldr	r0, [pc, #116]	; (800bf80 <AT_25_init+0xd8>)
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f7fb ff2c 	bl	8007d68 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800bf10:	4b1a      	ldr	r3, [pc, #104]	; (800bf7c <AT_25_init+0xd4>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	2108      	movs	r1, #8
 800bf16:	0018      	movs	r0, r3
 800bf18:	f7fb f817 	bl	8006f4a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	f7f9 f96f 	bl	8005200 <HAL_Delay>
	//wait for AT25 ready
	do
	{
		AT25CS_LOW;
 800bf22:	4b16      	ldr	r3, [pc, #88]	; (800bf7c <AT_25_init+0xd4>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	2108      	movs	r1, #8
 800bf28:	0018      	movs	r0, r3
 800bf2a:	f7fb f80e 	bl	8006f4a <HAL_GPIO_WritePin>
		buffer[0]=AT25_RDSR;
 800bf2e:	1d3b      	adds	r3, r7, #4
 800bf30:	2205      	movs	r2, #5
 800bf32:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800bf34:	23fa      	movs	r3, #250	; 0xfa
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	1d39      	adds	r1, r7, #4
 800bf3a:	4811      	ldr	r0, [pc, #68]	; (800bf80 <AT_25_init+0xd8>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f7fb ff13 	bl	8007d68 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1,buffer,1,1000);
 800bf42:	23fa      	movs	r3, #250	; 0xfa
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	1d39      	adds	r1, r7, #4
 800bf48:	480d      	ldr	r0, [pc, #52]	; (800bf80 <AT_25_init+0xd8>)
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f7fc f864 	bl	8008018 <HAL_SPI_Receive>
		AT25CS_HIGH;
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <AT_25_init+0xd4>)
 800bf52:	2201      	movs	r2, #1
 800bf54:	2108      	movs	r1, #8
 800bf56:	0018      	movs	r0, r3
 800bf58:	f7fa fff7 	bl	8006f4a <HAL_GPIO_WritePin>
		RDY=buffer[0];
 800bf5c:	1dfb      	adds	r3, r7, #7
 800bf5e:	1d3a      	adds	r2, r7, #4
 800bf60:	7812      	ldrb	r2, [r2, #0]
 800bf62:	701a      	strb	r2, [r3, #0]
	}
	while((RDY&0x01) == 1);
 800bf64:	1dfb      	adds	r3, r7, #7
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	d1d9      	bne.n	800bf22 <AT_25_init+0x7a>


}
 800bf6e:	46c0      	nop			; (mov r8, r8)
 800bf70:	46c0      	nop			; (mov r8, r8)
 800bf72:	46bd      	mov	sp, r7
 800bf74:	b002      	add	sp, #8
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	08017db8 	.word	0x08017db8
 800bf7c:	50000800 	.word	0x50000800
 800bf80:	200033b4 	.word	0x200033b4

0800bf84 <SPI_Save_Word_16bits>:
 * @param  data，要存入的数据
 * @param  addr，要存入的地址
 * @retval 无
 */
void SPI_Save_Word_16bits(uint16_t data,uint8_t addr)
{
 800bf84:	b590      	push	{r4, r7, lr}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	0002      	movs	r2, r0
 800bf8c:	1dbb      	adds	r3, r7, #6
 800bf8e:	801a      	strh	r2, [r3, #0]
 800bf90:	1d7b      	adds	r3, r7, #5
 800bf92:	1c0a      	adds	r2, r1, #0
 800bf94:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[1]={0};
 800bf96:	240c      	movs	r4, #12
 800bf98:	193b      	adds	r3, r7, r4
 800bf9a:	4a3a      	ldr	r2, [pc, #232]	; (800c084 <SPI_Save_Word_16bits+0x100>)
 800bf9c:	7812      	ldrb	r2, [r2, #0]
 800bf9e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd off
 800bfa0:	4b39      	ldr	r3, [pc, #228]	; (800c088 <SPI_Save_Word_16bits+0x104>)
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	0018      	movs	r0, r3
 800bfa8:	f7fa ffcf 	bl	8006f4a <HAL_GPIO_WritePin>
	/*AT25 config*/
	AT25CS_LOW;
 800bfac:	4b36      	ldr	r3, [pc, #216]	; (800c088 <SPI_Save_Word_16bits+0x104>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2108      	movs	r1, #8
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	f7fa ffc9 	bl	8006f4a <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800bfb8:	193b      	adds	r3, r7, r4
 800bfba:	2206      	movs	r2, #6
 800bfbc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800bfbe:	23fa      	movs	r3, #250	; 0xfa
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	1939      	adds	r1, r7, r4
 800bfc4:	4831      	ldr	r0, [pc, #196]	; (800c08c <SPI_Save_Word_16bits+0x108>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f7fb fece 	bl	8007d68 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800bfcc:	193b      	adds	r3, r7, r4
 800bfce:	2201      	movs	r2, #1
 800bfd0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800bfd2:	23fa      	movs	r3, #250	; 0xfa
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	1939      	adds	r1, r7, r4
 800bfd8:	482c      	ldr	r0, [pc, #176]	; (800c08c <SPI_Save_Word_16bits+0x108>)
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f7fb fec4 	bl	8007d68 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800bfe0:	193b      	adds	r3, r7, r4
 800bfe2:	22f2      	movs	r2, #242	; 0xf2
 800bfe4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800bfe6:	23fa      	movs	r3, #250	; 0xfa
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	1939      	adds	r1, r7, r4
 800bfec:	4827      	ldr	r0, [pc, #156]	; (800c08c <SPI_Save_Word_16bits+0x108>)
 800bfee:	2201      	movs	r2, #1
 800bff0:	f7fb feba 	bl	8007d68 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800bff4:	4b24      	ldr	r3, [pc, #144]	; (800c088 <SPI_Save_Word_16bits+0x104>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	2108      	movs	r1, #8
 800bffa:	0018      	movs	r0, r3
 800bffc:	f7fa ffa5 	bl	8006f4a <HAL_GPIO_WritePin>

	/*16bits data send*/
	AT25CS_LOW;
 800c000:	4b21      	ldr	r3, [pc, #132]	; (800c088 <SPI_Save_Word_16bits+0x104>)
 800c002:	2200      	movs	r2, #0
 800c004:	2108      	movs	r1, #8
 800c006:	0018      	movs	r0, r3
 800c008:	f7fa ff9f 	bl	8006f4a <HAL_GPIO_WritePin>
	buffer[0]=AT25_Write;
 800c00c:	193b      	adds	r3, r7, r4
 800c00e:	2202      	movs	r2, #2
 800c010:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd:write status register
 800c012:	23fa      	movs	r3, #250	; 0xfa
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	1939      	adds	r1, r7, r4
 800c018:	481c      	ldr	r0, [pc, #112]	; (800c08c <SPI_Save_Word_16bits+0x108>)
 800c01a:	2201      	movs	r2, #1
 800c01c:	f7fb fea4 	bl	8007d68 <HAL_SPI_Transmit>

	buffer[0]=addr;
 800c020:	193b      	adds	r3, r7, r4
 800c022:	1d7a      	adds	r2, r7, #5
 800c024:	7812      	ldrb	r2, [r2, #0]
 800c026:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//adress
 800c028:	23fa      	movs	r3, #250	; 0xfa
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	1939      	adds	r1, r7, r4
 800c02e:	4817      	ldr	r0, [pc, #92]	; (800c08c <SPI_Save_Word_16bits+0x108>)
 800c030:	2201      	movs	r2, #1
 800c032:	f7fb fe99 	bl	8007d68 <HAL_SPI_Transmit>

	buffer[0]=(data>>8);
 800c036:	1dbb      	adds	r3, r7, #6
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	0a1b      	lsrs	r3, r3, #8
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	193b      	adds	r3, r7, r4
 800c042:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data high
 800c044:	23fa      	movs	r3, #250	; 0xfa
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	1939      	adds	r1, r7, r4
 800c04a:	4810      	ldr	r0, [pc, #64]	; (800c08c <SPI_Save_Word_16bits+0x108>)
 800c04c:	2201      	movs	r2, #1
 800c04e:	f7fb fe8b 	bl	8007d68 <HAL_SPI_Transmit>

	buffer[0]=data;
 800c052:	1dbb      	adds	r3, r7, #6
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b2da      	uxtb	r2, r3
 800c058:	193b      	adds	r3, r7, r4
 800c05a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data low
 800c05c:	23fa      	movs	r3, #250	; 0xfa
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	1939      	adds	r1, r7, r4
 800c062:	480a      	ldr	r0, [pc, #40]	; (800c08c <SPI_Save_Word_16bits+0x108>)
 800c064:	2201      	movs	r2, #1
 800c066:	f7fb fe7f 	bl	8007d68 <HAL_SPI_Transmit>
	AT25CS_HIGH;
 800c06a:	4b07      	ldr	r3, [pc, #28]	; (800c088 <SPI_Save_Word_16bits+0x104>)
 800c06c:	2201      	movs	r2, #1
 800c06e:	2108      	movs	r1, #8
 800c070:	0018      	movs	r0, r3
 800c072:	f7fa ff6a 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800c076:	2001      	movs	r0, #1
 800c078:	f7f9 f8c2 	bl	8005200 <HAL_Delay>
}
 800c07c:	46c0      	nop			; (mov r8, r8)
 800c07e:	46bd      	mov	sp, r7
 800c080:	b005      	add	sp, #20
 800c082:	bd90      	pop	{r4, r7, pc}
 800c084:	08017db8 	.word	0x08017db8
 800c088:	50000800 	.word	0x50000800
 800c08c:	200033b4 	.word	0x200033b4

0800c090 <SPI_Load_Word_16bits>:
 * @brief  从at25取出一个长度16bits的数据
 * @param  addr，要取数据的地址
 * @retval 无
 */
uint16_t SPI_Load_Word_16bits(uint8_t addr)
{
 800c090:	b5b0      	push	{r4, r5, r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	0002      	movs	r2, r0
 800c098:	1dfb      	adds	r3, r7, #7
 800c09a:	701a      	strb	r2, [r3, #0]

	uint16_t tmp=0x00;
 800c09c:	250e      	movs	r5, #14
 800c09e:	197b      	adds	r3, r7, r5
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	801a      	strh	r2, [r3, #0]

	uint8_t buffer[1];
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1 off
 800c0a4:	4b2e      	ldr	r3, [pc, #184]	; (800c160 <SPI_Load_Word_16bits+0xd0>)
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	0018      	movs	r0, r3
 800c0ac:	f7fa ff4d 	bl	8006f4a <HAL_GPIO_WritePin>

	/*load word 8bits*/
	AT25CS_LOW;
 800c0b0:	4b2b      	ldr	r3, [pc, #172]	; (800c160 <SPI_Load_Word_16bits+0xd0>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2108      	movs	r1, #8
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	f7fa ff47 	bl	8006f4a <HAL_GPIO_WritePin>
	buffer[0]=AT25_Read;
 800c0bc:	200c      	movs	r0, #12
 800c0be:	183b      	adds	r3, r7, r0
 800c0c0:	2203      	movs	r2, #3
 800c0c2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd
 800c0c4:	23fa      	movs	r3, #250	; 0xfa
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	0004      	movs	r4, r0
 800c0ca:	1839      	adds	r1, r7, r0
 800c0cc:	4825      	ldr	r0, [pc, #148]	; (800c164 <SPI_Load_Word_16bits+0xd4>)
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f7fb fe4a 	bl	8007d68 <HAL_SPI_Transmit>
	buffer[0]=addr;
 800c0d4:	0020      	movs	r0, r4
 800c0d6:	183b      	adds	r3, r7, r0
 800c0d8:	1dfa      	adds	r2, r7, #7
 800c0da:	7812      	ldrb	r2, [r2, #0]
 800c0dc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//address
 800c0de:	23fa      	movs	r3, #250	; 0xfa
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	0004      	movs	r4, r0
 800c0e4:	1839      	adds	r1, r7, r0
 800c0e6:	481f      	ldr	r0, [pc, #124]	; (800c164 <SPI_Load_Word_16bits+0xd4>)
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f7fb fe3d 	bl	8007d68 <HAL_SPI_Transmit>
	buffer[0]=0x00;//clear the buffer
 800c0ee:	0020      	movs	r0, r4
 800c0f0:	183b      	adds	r3, r7, r0
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c0f6:	23fa      	movs	r3, #250	; 0xfa
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	0004      	movs	r4, r0
 800c0fc:	1839      	adds	r1, r7, r0
 800c0fe:	4819      	ldr	r0, [pc, #100]	; (800c164 <SPI_Load_Word_16bits+0xd4>)
 800c100:	2201      	movs	r2, #1
 800c102:	f7fb ff89 	bl	8008018 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c106:	0020      	movs	r0, r4
 800c108:	183b      	adds	r3, r7, r0
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b299      	uxth	r1, r3
 800c10e:	197b      	adds	r3, r7, r5
 800c110:	197a      	adds	r2, r7, r5
 800c112:	8812      	ldrh	r2, [r2, #0]
 800c114:	430a      	orrs	r2, r1
 800c116:	801a      	strh	r2, [r3, #0]
	tmp<<=8;
 800c118:	197b      	adds	r3, r7, r5
 800c11a:	197a      	adds	r2, r7, r5
 800c11c:	8812      	ldrh	r2, [r2, #0]
 800c11e:	0212      	lsls	r2, r2, #8
 800c120:	801a      	strh	r2, [r3, #0]
	buffer[0]=0x00;//clear the buffer
 800c122:	183b      	adds	r3, r7, r0
 800c124:	2200      	movs	r2, #0
 800c126:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c128:	23fa      	movs	r3, #250	; 0xfa
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	0004      	movs	r4, r0
 800c12e:	1839      	adds	r1, r7, r0
 800c130:	480c      	ldr	r0, [pc, #48]	; (800c164 <SPI_Load_Word_16bits+0xd4>)
 800c132:	2201      	movs	r2, #1
 800c134:	f7fb ff70 	bl	8008018 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c138:	193b      	adds	r3, r7, r4
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	b299      	uxth	r1, r3
 800c13e:	197b      	adds	r3, r7, r5
 800c140:	197a      	adds	r2, r7, r5
 800c142:	8812      	ldrh	r2, [r2, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	801a      	strh	r2, [r3, #0]
	AT25CS_HIGH;
 800c148:	4b05      	ldr	r3, [pc, #20]	; (800c160 <SPI_Load_Word_16bits+0xd0>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	2108      	movs	r1, #8
 800c14e:	0018      	movs	r0, r3
 800c150:	f7fa fefb 	bl	8006f4a <HAL_GPIO_WritePin>

	return tmp;
 800c154:	197b      	adds	r3, r7, r5
 800c156:	881b      	ldrh	r3, [r3, #0]
}
 800c158:	0018      	movs	r0, r3
 800c15a:	46bd      	mov	sp, r7
 800c15c:	b004      	add	sp, #16
 800c15e:	bdb0      	pop	{r4, r5, r7, pc}
 800c160:	50000800 	.word	0x50000800
 800c164:	200033b4 	.word	0x200033b4

0800c168 <SPI_AT25_Write>:
 * @param  WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度，必须小于等于SPI_FLASH_PerWritePageSize
 * @retval 无
 */
void SPI_AT25_Write(uint16_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	0008      	movs	r0, r1
 800c172:	0011      	movs	r1, r2
 800c174:	1cfb      	adds	r3, r7, #3
 800c176:	1c02      	adds	r2, r0, #0
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	003b      	movs	r3, r7
 800c17c:	1c0a      	adds	r2, r1, #0
 800c17e:	801a      	strh	r2, [r3, #0]
	NumByteToWrite = NumByteToWrite/2;
 800c180:	003b      	movs	r3, r7
 800c182:	003a      	movs	r2, r7
 800c184:	8812      	ldrh	r2, [r2, #0]
 800c186:	0852      	lsrs	r2, r2, #1
 800c188:	801a      	strh	r2, [r3, #0]

	 while (NumByteToWrite > 0)
 800c18a:	e013      	b.n	800c1b4 <SPI_AT25_Write+0x4c>
	 {
			SPI_Save_Word_16bits(*pBuffer++, WriteAddr);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	1c9a      	adds	r2, r3, #2
 800c190:	607a      	str	r2, [r7, #4]
 800c192:	881a      	ldrh	r2, [r3, #0]
 800c194:	1cfb      	adds	r3, r7, #3
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	0019      	movs	r1, r3
 800c19a:	0010      	movs	r0, r2
 800c19c:	f7ff fef2 	bl	800bf84 <SPI_Save_Word_16bits>
			NumByteToWrite --;
 800c1a0:	003b      	movs	r3, r7
 800c1a2:	881a      	ldrh	r2, [r3, #0]
 800c1a4:	003b      	movs	r3, r7
 800c1a6:	3a01      	subs	r2, #1
 800c1a8:	801a      	strh	r2, [r3, #0]
			WriteAddr+=2;
 800c1aa:	1cfb      	adds	r3, r7, #3
 800c1ac:	1cfa      	adds	r2, r7, #3
 800c1ae:	7812      	ldrb	r2, [r2, #0]
 800c1b0:	3202      	adds	r2, #2
 800c1b2:	701a      	strb	r2, [r3, #0]
	 while (NumByteToWrite > 0)
 800c1b4:	003b      	movs	r3, r7
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e7      	bne.n	800c18c <SPI_AT25_Write+0x24>
	 }
}
 800c1bc:	46c0      	nop			; (mov r8, r8)
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	b002      	add	sp, #8
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <SPI_AT25_Read>:
 * @param   ReadAddr，读取地址
 * @param   NumByteToRead，读取数据长度
 * @retval  无
 */
void SPI_AT25_Read(uint16_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800c1c6:	b590      	push	{r4, r7, lr}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	0008      	movs	r0, r1
 800c1d0:	0011      	movs	r1, r2
 800c1d2:	1cfb      	adds	r3, r7, #3
 800c1d4:	1c02      	adds	r2, r0, #0
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	003b      	movs	r3, r7
 800c1da:	1c0a      	adds	r2, r1, #0
 800c1dc:	801a      	strh	r2, [r3, #0]
	NumByteToRead = NumByteToRead/2;
 800c1de:	003b      	movs	r3, r7
 800c1e0:	003a      	movs	r2, r7
 800c1e2:	8812      	ldrh	r2, [r2, #0]
 800c1e4:	0852      	lsrs	r2, r2, #1
 800c1e6:	801a      	strh	r2, [r3, #0]

	/* 读取数据 */
 while (NumByteToRead > 0) /* while there is data to be read */
 800c1e8:	e013      	b.n	800c212 <SPI_AT25_Read+0x4c>
 {
		*pBuffer++ = SPI_Load_Word_16bits(ReadAddr);
 800c1ea:	687c      	ldr	r4, [r7, #4]
 800c1ec:	1ca3      	adds	r3, r4, #2
 800c1ee:	607b      	str	r3, [r7, #4]
 800c1f0:	1cfb      	adds	r3, r7, #3
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	0018      	movs	r0, r3
 800c1f6:	f7ff ff4b 	bl	800c090 <SPI_Load_Word_16bits>
 800c1fa:	0003      	movs	r3, r0
 800c1fc:	8023      	strh	r3, [r4, #0]
		NumByteToRead--;
 800c1fe:	003b      	movs	r3, r7
 800c200:	881a      	ldrh	r2, [r3, #0]
 800c202:	003b      	movs	r3, r7
 800c204:	3a01      	subs	r2, #1
 800c206:	801a      	strh	r2, [r3, #0]
		ReadAddr = ReadAddr + 2;
 800c208:	1cfb      	adds	r3, r7, #3
 800c20a:	1cfa      	adds	r2, r7, #3
 800c20c:	7812      	ldrb	r2, [r2, #0]
 800c20e:	3202      	adds	r2, #2
 800c210:	701a      	strb	r2, [r3, #0]
 while (NumByteToRead > 0) /* while there is data to be read */
 800c212:	003b      	movs	r3, r7
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1e7      	bne.n	800c1ea <SPI_AT25_Read+0x24>
 }


}
 800c21a:	46c0      	nop			; (mov r8, r8)
 800c21c:	46c0      	nop			; (mov r8, r8)
 800c21e:	46bd      	mov	sp, r7
 800c220:	b003      	add	sp, #12
 800c222:	bd90      	pop	{r4, r7, pc}

0800c224 <AT25_Save_VISet>:
 * @brief  对AT25写入电流电压设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_VISet(void)
{
 800c224:	b5b0      	push	{r4, r5, r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
	uint16_t temp[3];
	float Power=(Set_Voltage/100.0)*(Set_Current/100.0);
 800c22a:	4b1e      	ldr	r3, [pc, #120]	; (800c2a4 <AT25_Save_VISet+0x80>)
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	0018      	movs	r0, r3
 800c230:	f7f6 fde8 	bl	8002e04 <__aeabi_i2d>
 800c234:	2200      	movs	r2, #0
 800c236:	4b1c      	ldr	r3, [pc, #112]	; (800c2a8 <AT25_Save_VISet+0x84>)
 800c238:	f7f5 fb90 	bl	800195c <__aeabi_ddiv>
 800c23c:	0002      	movs	r2, r0
 800c23e:	000b      	movs	r3, r1
 800c240:	0014      	movs	r4, r2
 800c242:	001d      	movs	r5, r3
 800c244:	4b19      	ldr	r3, [pc, #100]	; (800c2ac <AT25_Save_VISet+0x88>)
 800c246:	881b      	ldrh	r3, [r3, #0]
 800c248:	0018      	movs	r0, r3
 800c24a:	f7f6 fddb 	bl	8002e04 <__aeabi_i2d>
 800c24e:	2200      	movs	r2, #0
 800c250:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <AT25_Save_VISet+0x84>)
 800c252:	f7f5 fb83 	bl	800195c <__aeabi_ddiv>
 800c256:	0002      	movs	r2, r0
 800c258:	000b      	movs	r3, r1
 800c25a:	0020      	movs	r0, r4
 800c25c:	0029      	movs	r1, r5
 800c25e:	f7f5 ff7f 	bl	8002160 <__aeabi_dmul>
 800c262:	0002      	movs	r2, r0
 800c264:	000b      	movs	r3, r1
 800c266:	0010      	movs	r0, r2
 800c268:	0019      	movs	r1, r3
 800c26a:	f7f6 fe69 	bl	8002f40 <__aeabi_d2f>
 800c26e:	1c03      	adds	r3, r0, #0
 800c270:	60fb      	str	r3, [r7, #12]
	//将设定值强制类型转换成uint16_t
	temp[0] = (uint16_t) Set_Voltage;
 800c272:	4b0c      	ldr	r3, [pc, #48]	; (800c2a4 <AT25_Save_VISet+0x80>)
 800c274:	881a      	ldrh	r2, [r3, #0]
 800c276:	1d3b      	adds	r3, r7, #4
 800c278:	801a      	strh	r2, [r3, #0]
	temp[1] = (uint16_t) Set_Current;
 800c27a:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <AT25_Save_VISet+0x88>)
 800c27c:	881a      	ldrh	r2, [r3, #0]
 800c27e:	1d3b      	adds	r3, r7, #4
 800c280:	805a      	strh	r2, [r3, #2]
	temp[2] = (uint16_t) Power;
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f7f4 f950 	bl	8000528 <__aeabi_f2uiz>
 800c288:	0003      	movs	r3, r0
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	1d3b      	adds	r3, r7, #4
 800c28e:	809a      	strh	r2, [r3, #4]

	SPI_AT25_Write(temp, 0, sizeof(temp));
 800c290:	1d3b      	adds	r3, r7, #4
 800c292:	2206      	movs	r2, #6
 800c294:	2100      	movs	r1, #0
 800c296:	0018      	movs	r0, r3
 800c298:	f7ff ff66 	bl	800c168 <SPI_AT25_Write>
}
 800c29c:	46c0      	nop			; (mov r8, r8)
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	b004      	add	sp, #16
 800c2a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c2a4:	20002fda 	.word	0x20002fda
 800c2a8:	40590000 	.word	0x40590000
 800c2ac:	20002fdc 	.word	0x20002fdc

0800c2b0 <AT25_Save_Recall_Save_VI>:
 * @brief  对AT25写入设定的电流电压值
 * @param	Recall_Save的编号
 * @retval 无
 */
void AT25_Save_Recall_Save_VI(uint8_t Number)
{
 800c2b0:	b590      	push	{r4, r7, lr}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	0002      	movs	r2, r0
 800c2b8:	1dfb      	adds	r3, r7, #7
 800c2ba:	701a      	strb	r2, [r3, #0]
	uint16_t temp;
	//将设定值强制类型转换成uint16_t(保留两位小数)
	temp = (uint16_t) (Recall_Save_Voltage[Number] * 100.0);//保留两位小数
 800c2bc:	1dfb      	adds	r3, r7, #7
 800c2be:	781a      	ldrb	r2, [r3, #0]
 800c2c0:	4b2d      	ldr	r3, [pc, #180]	; (800c378 <AT25_Save_Recall_Save_VI+0xc8>)
 800c2c2:	0092      	lsls	r2, r2, #2
 800c2c4:	58d3      	ldr	r3, [r2, r3]
 800c2c6:	1c18      	adds	r0, r3, #0
 800c2c8:	f7f6 fdf2 	bl	8002eb0 <__aeabi_f2d>
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	4b2b      	ldr	r3, [pc, #172]	; (800c37c <AT25_Save_Recall_Save_VI+0xcc>)
 800c2d0:	f7f5 ff46 	bl	8002160 <__aeabi_dmul>
 800c2d4:	0002      	movs	r2, r0
 800c2d6:	000b      	movs	r3, r1
 800c2d8:	0010      	movs	r0, r2
 800c2da:	0019      	movs	r1, r3
 800c2dc:	f7f4 f93c 	bl	8000558 <__aeabi_d2uiz>
 800c2e0:	0003      	movs	r3, r0
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	240e      	movs	r4, #14
 800c2e6:	193b      	adds	r3, r7, r4
 800c2e8:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 6+2*Number,sizeof(temp));//6 7、8 9...24、25
 800c2ea:	1dfb      	adds	r3, r7, #7
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	3303      	adds	r3, #3
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	18db      	adds	r3, r3, r3
 800c2f4:	b2d9      	uxtb	r1, r3
 800c2f6:	193b      	adds	r3, r7, r4
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f7ff ff34 	bl	800c168 <SPI_AT25_Write>

	temp = (uint16_t) (Recall_Save_Current[Number] * 100.0);
 800c300:	1dfb      	adds	r3, r7, #7
 800c302:	781a      	ldrb	r2, [r3, #0]
 800c304:	4b1e      	ldr	r3, [pc, #120]	; (800c380 <AT25_Save_Recall_Save_VI+0xd0>)
 800c306:	0092      	lsls	r2, r2, #2
 800c308:	58d3      	ldr	r3, [r2, r3]
 800c30a:	1c18      	adds	r0, r3, #0
 800c30c:	f7f6 fdd0 	bl	8002eb0 <__aeabi_f2d>
 800c310:	2200      	movs	r2, #0
 800c312:	4b1a      	ldr	r3, [pc, #104]	; (800c37c <AT25_Save_Recall_Save_VI+0xcc>)
 800c314:	f7f5 ff24 	bl	8002160 <__aeabi_dmul>
 800c318:	0002      	movs	r2, r0
 800c31a:	000b      	movs	r3, r1
 800c31c:	0010      	movs	r0, r2
 800c31e:	0019      	movs	r1, r3
 800c320:	f7f4 f91a 	bl	8000558 <__aeabi_d2uiz>
 800c324:	0003      	movs	r3, r0
 800c326:	b29a      	uxth	r2, r3
 800c328:	193b      	adds	r3, r7, r4
 800c32a:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 26+2*Number,sizeof(temp));//26 27、28 29...44、45
 800c32c:	1dfb      	adds	r3, r7, #7
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	330d      	adds	r3, #13
 800c332:	b2db      	uxtb	r3, r3
 800c334:	18db      	adds	r3, r3, r3
 800c336:	b2d9      	uxtb	r1, r3
 800c338:	193b      	adds	r3, r7, r4
 800c33a:	2202      	movs	r2, #2
 800c33c:	0018      	movs	r0, r3
 800c33e:	f7ff ff13 	bl	800c168 <SPI_AT25_Write>

	temp=Recall_Save_Power[Number];//W
 800c342:	1dfb      	adds	r3, r7, #7
 800c344:	781a      	ldrb	r2, [r3, #0]
 800c346:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <AT25_Save_Recall_Save_VI+0xd4>)
 800c348:	0092      	lsls	r2, r2, #2
 800c34a:	58d3      	ldr	r3, [r2, r3]
 800c34c:	1c18      	adds	r0, r3, #0
 800c34e:	f7f4 f8eb 	bl	8000528 <__aeabi_f2uiz>
 800c352:	0003      	movs	r3, r0
 800c354:	b29a      	uxth	r2, r3
 800c356:	193b      	adds	r3, r7, r4
 800c358:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 46+2*Number,sizeof(temp));//46、47...64、65
 800c35a:	1dfb      	adds	r3, r7, #7
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	3317      	adds	r3, #23
 800c360:	b2db      	uxtb	r3, r3
 800c362:	18db      	adds	r3, r3, r3
 800c364:	b2d9      	uxtb	r1, r3
 800c366:	193b      	adds	r3, r7, r4
 800c368:	2202      	movs	r2, #2
 800c36a:	0018      	movs	r0, r3
 800c36c:	f7ff fefc 	bl	800c168 <SPI_AT25_Write>

}
 800c370:	46c0      	nop			; (mov r8, r8)
 800c372:	46bd      	mov	sp, r7
 800c374:	b005      	add	sp, #20
 800c376:	bd90      	pop	{r4, r7, pc}
 800c378:	200039f8 	.word	0x200039f8
 800c37c:	40590000 	.word	0x40590000
 800c380:	20003a20 	.word	0x20003a20
 800c384:	20003a48 	.word	0x20003a48

0800c388 <AT25_Save_Recall_Recall_VI>:



uint16_t AT25_Save_Recall_Recall_VI(uint8_t Number)
{
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	0002      	movs	r2, r0
 800c390:	1dfb      	adds	r3, r7, #7
 800c392:	701a      	strb	r2, [r3, #0]

	uint16_t temp;
	if(xyz.coordinates3==1)//V
 800c394:	4b1b      	ldr	r3, [pc, #108]	; (800c404 <AT25_Save_Recall_Recall_VI+0x7c>)
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d10e      	bne.n	800c3ba <AT25_Save_Recall_Recall_VI+0x32>
	{
		SPI_AT25_Read(&temp,6+2*Number,2);
 800c39c:	1dfb      	adds	r3, r7, #7
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	3303      	adds	r3, #3
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	18db      	adds	r3, r3, r3
 800c3a6:	b2d9      	uxtb	r1, r3
 800c3a8:	240e      	movs	r4, #14
 800c3aa:	193b      	adds	r3, r7, r4
 800c3ac:	2202      	movs	r2, #2
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	f7ff ff09 	bl	800c1c6 <SPI_AT25_Read>

		return temp;
 800c3b4:	193b      	adds	r3, r7, r4
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	e020      	b.n	800c3fc <AT25_Save_Recall_Recall_VI+0x74>
	}
	else if(xyz.coordinates3==2)//I
 800c3ba:	4b12      	ldr	r3, [pc, #72]	; (800c404 <AT25_Save_Recall_Recall_VI+0x7c>)
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d10e      	bne.n	800c3e0 <AT25_Save_Recall_Recall_VI+0x58>
	{
		SPI_AT25_Read(&temp,26+2*Number,2);
 800c3c2:	1dfb      	adds	r3, r7, #7
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	330d      	adds	r3, #13
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	18db      	adds	r3, r3, r3
 800c3cc:	b2d9      	uxtb	r1, r3
 800c3ce:	240e      	movs	r4, #14
 800c3d0:	193b      	adds	r3, r7, r4
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	0018      	movs	r0, r3
 800c3d6:	f7ff fef6 	bl	800c1c6 <SPI_AT25_Read>

		return temp;
 800c3da:	193b      	adds	r3, r7, r4
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	e00d      	b.n	800c3fc <AT25_Save_Recall_Recall_VI+0x74>
	}

	SPI_AT25_Read(&temp,46+2*Number,2);//P
 800c3e0:	1dfb      	adds	r3, r7, #7
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	3317      	adds	r3, #23
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	18db      	adds	r3, r3, r3
 800c3ea:	b2d9      	uxtb	r1, r3
 800c3ec:	240e      	movs	r4, #14
 800c3ee:	193b      	adds	r3, r7, r4
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	0018      	movs	r0, r3
 800c3f4:	f7ff fee7 	bl	800c1c6 <SPI_AT25_Read>
	return temp;
 800c3f8:	193b      	adds	r3, r7, r4
 800c3fa:	881b      	ldrh	r3, [r3, #0]


}
 800c3fc:	0018      	movs	r0, r3
 800c3fe:	46bd      	mov	sp, r7
 800c400:	b005      	add	sp, #20
 800c402:	bd90      	pop	{r4, r7, pc}
 800c404:	200039e0 	.word	0x200039e0

0800c408 <AT25_Save_Delay>:
 * @brief  对AT25写入延时时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Delay(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
	uint8_t temp[4];
	uint8_t temp_1[2];

	temp[0] = Delay_h;
 800c40e:	4b13      	ldr	r3, [pc, #76]	; (800c45c <AT25_Save_Delay+0x54>)
 800c410:	781a      	ldrb	r2, [r3, #0]
 800c412:	1d3b      	adds	r3, r7, #4
 800c414:	701a      	strb	r2, [r3, #0]
	temp[1] = Delay_m;
 800c416:	4b12      	ldr	r3, [pc, #72]	; (800c460 <AT25_Save_Delay+0x58>)
 800c418:	781a      	ldrb	r2, [r3, #0]
 800c41a:	1d3b      	adds	r3, r7, #4
 800c41c:	705a      	strb	r2, [r3, #1]
	temp[2] = Delay_s;
 800c41e:	4b11      	ldr	r3, [pc, #68]	; (800c464 <AT25_Save_Delay+0x5c>)
 800c420:	781a      	ldrb	r2, [r3, #0]
 800c422:	1d3b      	adds	r3, r7, #4
 800c424:	709a      	strb	r2, [r3, #2]
	temp[3] = 0x00;
 800c426:	1d3b      	adds	r3, r7, #4
 800c428:	2200      	movs	r2, #0
 800c42a:	70da      	strb	r2, [r3, #3]

	temp_1[0] = Delay_Function_On_Off;
 800c42c:	4b0e      	ldr	r3, [pc, #56]	; (800c468 <AT25_Save_Delay+0x60>)
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	003b      	movs	r3, r7
 800c432:	701a      	strb	r2, [r3, #0]
	temp_1[1] = 0x00;
 800c434:	003b      	movs	r3, r7
 800c436:	2200      	movs	r2, #0
 800c438:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write((uint16_t*)temp, 78, sizeof(temp));
 800c43a:	1d3b      	adds	r3, r7, #4
 800c43c:	2204      	movs	r2, #4
 800c43e:	214e      	movs	r1, #78	; 0x4e
 800c440:	0018      	movs	r0, r3
 800c442:	f7ff fe91 	bl	800c168 <SPI_AT25_Write>
	SPI_AT25_Write((uint16_t*)temp_1, 108, sizeof(temp_1));
 800c446:	003b      	movs	r3, r7
 800c448:	2202      	movs	r2, #2
 800c44a:	216c      	movs	r1, #108	; 0x6c
 800c44c:	0018      	movs	r0, r3
 800c44e:	f7ff fe8b 	bl	800c168 <SPI_AT25_Write>
}
 800c452:	46c0      	nop			; (mov r8, r8)
 800c454:	46bd      	mov	sp, r7
 800c456:	b002      	add	sp, #8
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	2000397c 	.word	0x2000397c
 800c460:	2000397d 	.word	0x2000397d
 800c464:	2000397e 	.word	0x2000397e
 800c468:	20002fe8 	.word	0x20002fe8

0800c46c <AT25_Save_Cycle>:
 * @brief  对AT25写入循环时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Cycle(void)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
	uint16_t temp[4];

	uint8_t temp_1[2];

	temp[0] = Cycle_On_s;
 800c472:	4b14      	ldr	r3, [pc, #80]	; (800c4c4 <AT25_Save_Cycle+0x58>)
 800c474:	881a      	ldrh	r2, [r3, #0]
 800c476:	2108      	movs	r1, #8
 800c478:	187b      	adds	r3, r7, r1
 800c47a:	801a      	strh	r2, [r3, #0]
	temp[1] = Cycle_On_ms;
 800c47c:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <AT25_Save_Cycle+0x5c>)
 800c47e:	881a      	ldrh	r2, [r3, #0]
 800c480:	187b      	adds	r3, r7, r1
 800c482:	805a      	strh	r2, [r3, #2]
	temp[2] = Cycle_Close_s;
 800c484:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <AT25_Save_Cycle+0x60>)
 800c486:	881a      	ldrh	r2, [r3, #0]
 800c488:	187b      	adds	r3, r7, r1
 800c48a:	809a      	strh	r2, [r3, #4]
	temp[3] = Cycle_Close_ms;
 800c48c:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <AT25_Save_Cycle+0x64>)
 800c48e:	881a      	ldrh	r2, [r3, #0]
 800c490:	187b      	adds	r3, r7, r1
 800c492:	80da      	strh	r2, [r3, #6]

	temp_1[0] = Cycle_Function_On_Off;
 800c494:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <AT25_Save_Cycle+0x68>)
 800c496:	781a      	ldrb	r2, [r3, #0]
 800c498:	1d3b      	adds	r3, r7, #4
 800c49a:	701a      	strb	r2, [r3, #0]
	temp_1[1] = 0x00;
 800c49c:	1d3b      	adds	r3, r7, #4
 800c49e:	2200      	movs	r2, #0
 800c4a0:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c4a2:	187b      	adds	r3, r7, r1
 800c4a4:	2208      	movs	r2, #8
 800c4a6:	2152      	movs	r1, #82	; 0x52
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	f7ff fe5d 	bl	800c168 <SPI_AT25_Write>
	SPI_AT25_Write((uint16_t*)temp_1, 110, sizeof(temp_1));
 800c4ae:	1d3b      	adds	r3, r7, #4
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	216e      	movs	r1, #110	; 0x6e
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	f7ff fe57 	bl	800c168 <SPI_AT25_Write>
}
 800c4ba:	46c0      	nop			; (mov r8, r8)
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	b004      	add	sp, #16
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	46c0      	nop			; (mov r8, r8)
 800c4c4:	20003978 	.word	0x20003978
 800c4c8:	20002fd6 	.word	0x20002fd6
 800c4cc:	2000397a 	.word	0x2000397a
 800c4d0:	20002fd8 	.word	0x20002fd8
 800c4d4:	200039c8 	.word	0x200039c8

0800c4d8 <AT25_Save_CC_CV_CP>:
 * @brief  对AT25写入CC_CV_CP设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_CC_CV_CP(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
	uint8_t temp[2];

	temp[0] = CV_CC_CP;
 800c4de:	4b08      	ldr	r3, [pc, #32]	; (800c500 <AT25_Save_CC_CV_CP+0x28>)
 800c4e0:	781a      	ldrb	r2, [r3, #0]
 800c4e2:	1d3b      	adds	r3, r7, #4
 800c4e4:	701a      	strb	r2, [r3, #0]
	temp[1] = 0x00;
 800c4e6:	1d3b      	adds	r3, r7, #4
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write((uint16_t*)temp, 80, sizeof(temp));
 800c4ec:	1d3b      	adds	r3, r7, #4
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	2150      	movs	r1, #80	; 0x50
 800c4f2:	0018      	movs	r0, r3
 800c4f4:	f7ff fe38 	bl	800c168 <SPI_AT25_Write>
}
 800c4f8:	46c0      	nop			; (mov r8, r8)
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	b002      	add	sp, #8
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20003972 	.word	0x20003972

0800c504 <AT25_Save_VI_Rate>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_VI_Rate(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
	uint16_t temp[2];

	temp[0] = Set_V_Slope;
 800c50a:	4b0a      	ldr	r3, [pc, #40]	; (800c534 <AT25_Save_VI_Rate+0x30>)
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	b29a      	uxth	r2, r3
 800c510:	1d3b      	adds	r3, r7, #4
 800c512:	801a      	strh	r2, [r3, #0]
	temp[1] = Set_I_Slope;
 800c514:	4b08      	ldr	r3, [pc, #32]	; (800c538 <AT25_Save_VI_Rate+0x34>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	b29a      	uxth	r2, r3
 800c51a:	1d3b      	adds	r3, r7, #4
 800c51c:	805a      	strh	r2, [r3, #2]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c51e:	1d3b      	adds	r3, r7, #4
 800c520:	2204      	movs	r2, #4
 800c522:	2152      	movs	r1, #82	; 0x52
 800c524:	0018      	movs	r0, r3
 800c526:	f7ff fe1f 	bl	800c168 <SPI_AT25_Write>

}
 800c52a:	46c0      	nop			; (mov r8, r8)
 800c52c:	46bd      	mov	sp, r7
 800c52e:	b002      	add	sp, #8
 800c530:	bd80      	pop	{r7, pc}
 800c532:	46c0      	nop			; (mov r8, r8)
 800c534:	2000397f 	.word	0x2000397f
 800c538:	20003980 	.word	0x20003980

0800c53c <AT25_Save_AD_Param>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_AD_Param(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
	uint16_t temp[4];

	temp[0] = ADC_Gain_V*1000000;
 800c542:	4b1f      	ldr	r3, [pc, #124]	; (800c5c0 <AT25_Save_AD_Param+0x84>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	491f      	ldr	r1, [pc, #124]	; (800c5c4 <AT25_Save_AD_Param+0x88>)
 800c548:	1c18      	adds	r0, r3, #0
 800c54a:	f7f4 fb89 	bl	8000c60 <__aeabi_fmul>
 800c54e:	1c03      	adds	r3, r0, #0
 800c550:	1c18      	adds	r0, r3, #0
 800c552:	f7f3 ffe9 	bl	8000528 <__aeabi_f2uiz>
 800c556:	0003      	movs	r3, r0
 800c558:	b29a      	uxth	r2, r3
 800c55a:	003b      	movs	r3, r7
 800c55c:	801a      	strh	r2, [r3, #0]
	temp[1] = temp[0];
 800c55e:	003b      	movs	r3, r7
 800c560:	881a      	ldrh	r2, [r3, #0]
 800c562:	003b      	movs	r3, r7
 800c564:	805a      	strh	r2, [r3, #2]
	/*test*/
	temp[2] = (-1*Eror_ADC_V)*10000;
 800c566:	4b18      	ldr	r3, [pc, #96]	; (800c5c8 <AT25_Save_AD_Param+0x8c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2280      	movs	r2, #128	; 0x80
 800c56c:	0612      	lsls	r2, r2, #24
 800c56e:	4053      	eors	r3, r2
 800c570:	4916      	ldr	r1, [pc, #88]	; (800c5cc <AT25_Save_AD_Param+0x90>)
 800c572:	1c18      	adds	r0, r3, #0
 800c574:	f7f4 fb74 	bl	8000c60 <__aeabi_fmul>
 800c578:	1c03      	adds	r3, r0, #0
 800c57a:	1c18      	adds	r0, r3, #0
 800c57c:	f7f3 ffd4 	bl	8000528 <__aeabi_f2uiz>
 800c580:	0003      	movs	r3, r0
 800c582:	b29a      	uxth	r2, r3
 800c584:	003b      	movs	r3, r7
 800c586:	809a      	strh	r2, [r3, #4]
	temp[3] = (-1*Eror_ADC_V)*10000;
 800c588:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <AT25_Save_AD_Param+0x8c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2280      	movs	r2, #128	; 0x80
 800c58e:	0612      	lsls	r2, r2, #24
 800c590:	4053      	eors	r3, r2
 800c592:	490e      	ldr	r1, [pc, #56]	; (800c5cc <AT25_Save_AD_Param+0x90>)
 800c594:	1c18      	adds	r0, r3, #0
 800c596:	f7f4 fb63 	bl	8000c60 <__aeabi_fmul>
 800c59a:	1c03      	adds	r3, r0, #0
 800c59c:	1c18      	adds	r0, r3, #0
 800c59e:	f7f3 ffc3 	bl	8000528 <__aeabi_f2uiz>
 800c5a2:	0003      	movs	r3, r0
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	003b      	movs	r3, r7
 800c5a8:	80da      	strh	r2, [r3, #6]

	SPI_AT25_Write(temp, 86, sizeof(temp));
 800c5aa:	003b      	movs	r3, r7
 800c5ac:	2208      	movs	r2, #8
 800c5ae:	2156      	movs	r1, #86	; 0x56
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	f7ff fdd9 	bl	800c168 <SPI_AT25_Write>

}
 800c5b6:	46c0      	nop			; (mov r8, r8)
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	b002      	add	sp, #8
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	46c0      	nop			; (mov r8, r8)
 800c5c0:	20002fec 	.word	0x20002fec
 800c5c4:	49742400 	.word	0x49742400
 800c5c8:	20002ff4 	.word	0x20002ff4
 800c5cc:	461c4000 	.word	0x461c4000

0800c5d0 <AT25_load_AD_Param>:

void AT25_load_AD_Param(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0

	uint16_t temp[4];

	SPI_AT25_Read((uint16_t*)temp, 86, sizeof(temp));
 800c5d6:	003b      	movs	r3, r7
 800c5d8:	2208      	movs	r2, #8
 800c5da:	2156      	movs	r1, #86	; 0x56
 800c5dc:	0018      	movs	r0, r3
 800c5de:	f7ff fdf2 	bl	800c1c6 <SPI_AT25_Read>

	ADC_Gain_V=temp[0]/1000000.0;
 800c5e2:	003b      	movs	r3, r7
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	0018      	movs	r0, r3
 800c5e8:	f7f6 fc0c 	bl	8002e04 <__aeabi_i2d>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4b26      	ldr	r3, [pc, #152]	; (800c688 <AT25_load_AD_Param+0xb8>)
 800c5f0:	f7f5 f9b4 	bl	800195c <__aeabi_ddiv>
 800c5f4:	0002      	movs	r2, r0
 800c5f6:	000b      	movs	r3, r1
 800c5f8:	0010      	movs	r0, r2
 800c5fa:	0019      	movs	r1, r3
 800c5fc:	f7f6 fca0 	bl	8002f40 <__aeabi_d2f>
 800c600:	1c02      	adds	r2, r0, #0
 800c602:	4b22      	ldr	r3, [pc, #136]	; (800c68c <AT25_load_AD_Param+0xbc>)
 800c604:	601a      	str	r2, [r3, #0]
	ADC_Gain_I=temp[1]/1000000.0;
 800c606:	003b      	movs	r3, r7
 800c608:	885b      	ldrh	r3, [r3, #2]
 800c60a:	0018      	movs	r0, r3
 800c60c:	f7f6 fbfa 	bl	8002e04 <__aeabi_i2d>
 800c610:	2200      	movs	r2, #0
 800c612:	4b1d      	ldr	r3, [pc, #116]	; (800c688 <AT25_load_AD_Param+0xb8>)
 800c614:	f7f5 f9a2 	bl	800195c <__aeabi_ddiv>
 800c618:	0002      	movs	r2, r0
 800c61a:	000b      	movs	r3, r1
 800c61c:	0010      	movs	r0, r2
 800c61e:	0019      	movs	r1, r3
 800c620:	f7f6 fc8e 	bl	8002f40 <__aeabi_d2f>
 800c624:	1c02      	adds	r2, r0, #0
 800c626:	4b1a      	ldr	r3, [pc, #104]	; (800c690 <AT25_load_AD_Param+0xc0>)
 800c628:	601a      	str	r2, [r3, #0]
	Eror_ADC_V=-(temp[2]/10000.0);
 800c62a:	003b      	movs	r3, r7
 800c62c:	889b      	ldrh	r3, [r3, #4]
 800c62e:	0018      	movs	r0, r3
 800c630:	f7f6 fbe8 	bl	8002e04 <__aeabi_i2d>
 800c634:	2200      	movs	r2, #0
 800c636:	4b17      	ldr	r3, [pc, #92]	; (800c694 <AT25_load_AD_Param+0xc4>)
 800c638:	f7f5 f990 	bl	800195c <__aeabi_ddiv>
 800c63c:	0002      	movs	r2, r0
 800c63e:	000b      	movs	r3, r1
 800c640:	0010      	movs	r0, r2
 800c642:	0019      	movs	r1, r3
 800c644:	f7f6 fc7c 	bl	8002f40 <__aeabi_d2f>
 800c648:	1c02      	adds	r2, r0, #0
 800c64a:	2380      	movs	r3, #128	; 0x80
 800c64c:	061b      	lsls	r3, r3, #24
 800c64e:	405a      	eors	r2, r3
 800c650:	4b11      	ldr	r3, [pc, #68]	; (800c698 <AT25_load_AD_Param+0xc8>)
 800c652:	601a      	str	r2, [r3, #0]
	Eror_ADC_I=-(temp[3]/10000.0);
 800c654:	003b      	movs	r3, r7
 800c656:	88db      	ldrh	r3, [r3, #6]
 800c658:	0018      	movs	r0, r3
 800c65a:	f7f6 fbd3 	bl	8002e04 <__aeabi_i2d>
 800c65e:	2200      	movs	r2, #0
 800c660:	4b0c      	ldr	r3, [pc, #48]	; (800c694 <AT25_load_AD_Param+0xc4>)
 800c662:	f7f5 f97b 	bl	800195c <__aeabi_ddiv>
 800c666:	0002      	movs	r2, r0
 800c668:	000b      	movs	r3, r1
 800c66a:	0010      	movs	r0, r2
 800c66c:	0019      	movs	r1, r3
 800c66e:	f7f6 fc67 	bl	8002f40 <__aeabi_d2f>
 800c672:	1c02      	adds	r2, r0, #0
 800c674:	2380      	movs	r3, #128	; 0x80
 800c676:	061b      	lsls	r3, r3, #24
 800c678:	405a      	eors	r2, r3
 800c67a:	4b08      	ldr	r3, [pc, #32]	; (800c69c <AT25_load_AD_Param+0xcc>)
 800c67c:	601a      	str	r2, [r3, #0]
}
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	46bd      	mov	sp, r7
 800c682:	b002      	add	sp, #8
 800c684:	bd80      	pop	{r7, pc}
 800c686:	46c0      	nop			; (mov r8, r8)
 800c688:	412e8480 	.word	0x412e8480
 800c68c:	20002fec 	.word	0x20002fec
 800c690:	20002ff0 	.word	0x20002ff0
 800c694:	40c38800 	.word	0x40c38800
 800c698:	20002ff4 	.word	0x20002ff4
 800c69c:	20002ff8 	.word	0x20002ff8

0800c6a0 <AT25_Reset>:
 * @brief  对AT25重置所有设定值
 * @param	无
 * @retval 无
 */
void AT25_Reset(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b090      	sub	sp, #64	; 0x40
 800c6a4:	af00      	add	r7, sp, #0
	AT_25_init();
 800c6a6:	f7ff fbff 	bl	800bea8 <AT_25_init>

	CV_CC_CP = CV;
 800c6aa:	4b42      	ldr	r3, [pc, #264]	; (800c7b4 <AT25_Reset+0x114>)
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	701a      	strb	r2, [r3, #0]
	AT25_Save_CC_CV_CP();
 800c6b0:	f7ff ff12 	bl	800c4d8 <AT25_Save_CC_CV_CP>
	Set_V_Slope=15;
 800c6b4:	4b40      	ldr	r3, [pc, #256]	; (800c7b8 <AT25_Reset+0x118>)
 800c6b6:	220f      	movs	r2, #15
 800c6b8:	701a      	strb	r2, [r3, #0]
	Set_I_Slope=5;
 800c6ba:	4b40      	ldr	r3, [pc, #256]	; (800c7bc <AT25_Reset+0x11c>)
 800c6bc:	2205      	movs	r2, #5
 800c6be:	701a      	strb	r2, [r3, #0]
	AT25_Save_VI_Rate();
 800c6c0:	f7ff ff20 	bl	800c504 <AT25_Save_VI_Rate>
	Set_Current=0;
 800c6c4:	4b3e      	ldr	r3, [pc, #248]	; (800c7c0 <AT25_Reset+0x120>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	801a      	strh	r2, [r3, #0]
	Set_Voltage=0;
 800c6ca:	4b3e      	ldr	r3, [pc, #248]	; (800c7c4 <AT25_Reset+0x124>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	801a      	strh	r2, [r3, #0]
	AT25_Save_VISet();
 800c6d0:	f7ff fda8 	bl	800c224 <AT25_Save_VISet>
	/*save recall reset*/
	uint16_t temp[30] = {0};
 800c6d4:	003b      	movs	r3, r7
 800c6d6:	0018      	movs	r0, r3
 800c6d8:	233c      	movs	r3, #60	; 0x3c
 800c6da:	001a      	movs	r2, r3
 800c6dc:	2100      	movs	r1, #0
 800c6de:	f007 fcec 	bl	80140ba <memset>
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c6e2:	233f      	movs	r3, #63	; 0x3f
 800c6e4:	18fb      	adds	r3, r7, r3
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	e012      	b.n	800c712 <AT25_Reset+0x72>
	{
		temp[i]=1000*(i+1);
 800c6ec:	203f      	movs	r0, #63	; 0x3f
 800c6ee:	183b      	adds	r3, r7, r0
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	183a      	adds	r2, r7, r0
 800c6f8:	7812      	ldrb	r2, [r2, #0]
 800c6fa:	21fa      	movs	r1, #250	; 0xfa
 800c6fc:	0089      	lsls	r1, r1, #2
 800c6fe:	434b      	muls	r3, r1
 800c700:	b299      	uxth	r1, r3
 800c702:	003b      	movs	r3, r7
 800c704:	0052      	lsls	r2, r2, #1
 800c706:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c708:	183b      	adds	r3, r7, r0
 800c70a:	781a      	ldrb	r2, [r3, #0]
 800c70c:	183b      	adds	r3, r7, r0
 800c70e:	3201      	adds	r2, #1
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	233f      	movs	r3, #63	; 0x3f
 800c714:	18fb      	adds	r3, r7, r3
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b09      	cmp	r3, #9
 800c71a:	d9e7      	bls.n	800c6ec <AT25_Reset+0x4c>
	}
	for(uint8_t j=10;j<20;j++)//100-1000
 800c71c:	233e      	movs	r3, #62	; 0x3e
 800c71e:	18fb      	adds	r3, r7, r3
 800c720:	220a      	movs	r2, #10
 800c722:	701a      	strb	r2, [r3, #0]
 800c724:	e011      	b.n	800c74a <AT25_Reset+0xaa>
	{
		temp[j]=(j-9)*100;
 800c726:	203e      	movs	r0, #62	; 0x3e
 800c728:	183b      	adds	r3, r7, r0
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	3b09      	subs	r3, #9
 800c72e:	b29b      	uxth	r3, r3
 800c730:	183a      	adds	r2, r7, r0
 800c732:	7812      	ldrb	r2, [r2, #0]
 800c734:	2164      	movs	r1, #100	; 0x64
 800c736:	434b      	muls	r3, r1
 800c738:	b299      	uxth	r1, r3
 800c73a:	003b      	movs	r3, r7
 800c73c:	0052      	lsls	r2, r2, #1
 800c73e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=10;j<20;j++)//100-1000
 800c740:	183b      	adds	r3, r7, r0
 800c742:	781a      	ldrb	r2, [r3, #0]
 800c744:	183b      	adds	r3, r7, r0
 800c746:	3201      	adds	r2, #1
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	233e      	movs	r3, #62	; 0x3e
 800c74c:	18fb      	adds	r3, r7, r3
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b13      	cmp	r3, #19
 800c752:	d9e8      	bls.n	800c726 <AT25_Reset+0x86>
	}
	for(uint8_t k=20;k<30;k++)
 800c754:	233d      	movs	r3, #61	; 0x3d
 800c756:	18fb      	adds	r3, r7, r3
 800c758:	2214      	movs	r2, #20
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	e01a      	b.n	800c794 <AT25_Reset+0xf4>
	{
		temp[k]=temp[k-20]*temp[k-10];
 800c75e:	203d      	movs	r0, #61	; 0x3d
 800c760:	183b      	adds	r3, r7, r0
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	3b14      	subs	r3, #20
 800c766:	001a      	movs	r2, r3
 800c768:	003b      	movs	r3, r7
 800c76a:	0052      	lsls	r2, r2, #1
 800c76c:	5ad3      	ldrh	r3, [r2, r3]
 800c76e:	183a      	adds	r2, r7, r0
 800c770:	7812      	ldrb	r2, [r2, #0]
 800c772:	3a0a      	subs	r2, #10
 800c774:	0011      	movs	r1, r2
 800c776:	003a      	movs	r2, r7
 800c778:	0049      	lsls	r1, r1, #1
 800c77a:	5a89      	ldrh	r1, [r1, r2]
 800c77c:	183a      	adds	r2, r7, r0
 800c77e:	7812      	ldrb	r2, [r2, #0]
 800c780:	434b      	muls	r3, r1
 800c782:	b299      	uxth	r1, r3
 800c784:	003b      	movs	r3, r7
 800c786:	0052      	lsls	r2, r2, #1
 800c788:	52d1      	strh	r1, [r2, r3]
	for(uint8_t k=20;k<30;k++)
 800c78a:	183b      	adds	r3, r7, r0
 800c78c:	781a      	ldrb	r2, [r3, #0]
 800c78e:	183b      	adds	r3, r7, r0
 800c790:	3201      	adds	r2, #1
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	233d      	movs	r3, #61	; 0x3d
 800c796:	18fb      	adds	r3, r7, r3
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b1d      	cmp	r3, #29
 800c79c:	d9df      	bls.n	800c75e <AT25_Reset+0xbe>
	}
	SPI_AT25_Write(temp,0x06, sizeof(temp));
 800c79e:	003b      	movs	r3, r7
 800c7a0:	223c      	movs	r2, #60	; 0x3c
 800c7a2:	2106      	movs	r1, #6
 800c7a4:	0018      	movs	r0, r3
 800c7a6:	f7ff fcdf 	bl	800c168 <SPI_AT25_Write>



}
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	b010      	add	sp, #64	; 0x40
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	20003972 	.word	0x20003972
 800c7b8:	2000397f 	.word	0x2000397f
 800c7bc:	20003980 	.word	0x20003980
 800c7c0:	20002fdc 	.word	0x20002fdc
 800c7c4:	20002fda 	.word	0x20002fda

0800c7c8 <ADD>:
		}
		return (uchCRCHi<<8|uchCRCLo);
}
#endif
uint16_t ADD(uint8_t *puchMsg,uint8_t usDataLen)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	000a      	movs	r2, r1
 800c7d2:	1cfb      	adds	r3, r7, #3
 800c7d4:	701a      	strb	r2, [r3, #0]

	uint16_t sum=0;
 800c7d6:	2316      	movs	r3, #22
 800c7d8:	18fb      	adds	r3, r7, r3
 800c7da:	2200      	movs	r2, #0
 800c7dc:	801a      	strh	r2, [r3, #0]
	uint8_t * pindex=puchMsg;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<usDataLen;i++)
 800c7e2:	230f      	movs	r3, #15
 800c7e4:	18fb      	adds	r3, r7, r3
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	701a      	strb	r2, [r3, #0]
 800c7ea:	e010      	b.n	800c80e <ADD+0x46>
	{
		sum+=*(pindex++);
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	1c5a      	adds	r2, r3, #1
 800c7f0:	613a      	str	r2, [r7, #16]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	b299      	uxth	r1, r3
 800c7f6:	2216      	movs	r2, #22
 800c7f8:	18bb      	adds	r3, r7, r2
 800c7fa:	18ba      	adds	r2, r7, r2
 800c7fc:	8812      	ldrh	r2, [r2, #0]
 800c7fe:	188a      	adds	r2, r1, r2
 800c800:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<usDataLen;i++)
 800c802:	210f      	movs	r1, #15
 800c804:	187b      	adds	r3, r7, r1
 800c806:	781a      	ldrb	r2, [r3, #0]
 800c808:	187b      	adds	r3, r7, r1
 800c80a:	3201      	adds	r2, #1
 800c80c:	701a      	strb	r2, [r3, #0]
 800c80e:	230f      	movs	r3, #15
 800c810:	18fa      	adds	r2, r7, r3
 800c812:	1cfb      	adds	r3, r7, #3
 800c814:	7812      	ldrb	r2, [r2, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d3e7      	bcc.n	800c7ec <ADD+0x24>
	}

	return sum;
 800c81c:	2316      	movs	r3, #22
 800c81e:	18fb      	adds	r3, r7, r3
 800c820:	881b      	ldrh	r3, [r3, #0]
}
 800c822:	0018      	movs	r0, r3
 800c824:	46bd      	mov	sp, r7
 800c826:	b006      	add	sp, #24
 800c828:	bd80      	pop	{r7, pc}
	...

0800c82c <DAC_Cmd_send>:
  * @param  command
  * @param  Date need to be send
  * @retval
  */
void DAC_Cmd_send(uint8_t IDindex,uint8_t cmd,uint16_t Data_To_Send)
{
 800c82c:	b590      	push	{r4, r7, lr}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	0004      	movs	r4, r0
 800c834:	0008      	movs	r0, r1
 800c836:	0011      	movs	r1, r2
 800c838:	1dfb      	adds	r3, r7, #7
 800c83a:	1c22      	adds	r2, r4, #0
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	1dbb      	adds	r3, r7, #6
 800c840:	1c02      	adds	r2, r0, #0
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	1d3b      	adds	r3, r7, #4
 800c846:	1c0a      	adds	r2, r1, #0
 800c848:	801a      	strh	r2, [r3, #0]

	__HAL_UART_ENABLE(&huart2);
 800c84a:	4b48      	ldr	r3, [pc, #288]	; (800c96c <DAC_Cmd_send+0x140>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	4b46      	ldr	r3, [pc, #280]	; (800c96c <DAC_Cmd_send+0x140>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2101      	movs	r1, #1
 800c856:	430a      	orrs	r2, r1
 800c858:	601a      	str	r2, [r3, #0]
	/*********************ID&Command*********************/
	Uart2_Send_buffer[0]=IDindex;//id
 800c85a:	4b45      	ldr	r3, [pc, #276]	; (800c970 <DAC_Cmd_send+0x144>)
 800c85c:	1dfa      	adds	r2, r7, #7
 800c85e:	7812      	ldrb	r2, [r2, #0]
 800c860:	701a      	strb	r2, [r3, #0]
	Uart2_Send_buffer[1]=cmd;//cmd
 800c862:	4b43      	ldr	r3, [pc, #268]	; (800c970 <DAC_Cmd_send+0x144>)
 800c864:	1dba      	adds	r2, r7, #6
 800c866:	7812      	ldrb	r2, [r2, #0]
 800c868:	705a      	strb	r2, [r3, #1]
	 /*********************data length*********************/
	 if((Data_To_Send&0xff00))
 800c86a:	1d3b      	adds	r3, r7, #4
 800c86c:	881a      	ldrh	r2, [r3, #0]
 800c86e:	23ff      	movs	r3, #255	; 0xff
 800c870:	021b      	lsls	r3, r3, #8
 800c872:	4013      	ands	r3, r2
 800c874:	d003      	beq.n	800c87e <DAC_Cmd_send+0x52>
	 {
		 Uart2_Send_buffer[2]=0x02;
 800c876:	4b3e      	ldr	r3, [pc, #248]	; (800c970 <DAC_Cmd_send+0x144>)
 800c878:	2202      	movs	r2, #2
 800c87a:	709a      	strb	r2, [r3, #2]
 800c87c:	e00b      	b.n	800c896 <DAC_Cmd_send+0x6a>
	 }
	 else if((Data_To_Send&0x00ff))
 800c87e:	1d3b      	adds	r3, r7, #4
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	22ff      	movs	r2, #255	; 0xff
 800c884:	4013      	ands	r3, r2
 800c886:	d003      	beq.n	800c890 <DAC_Cmd_send+0x64>
	 {
		 Uart2_Send_buffer[2]=0x01;
 800c888:	4b39      	ldr	r3, [pc, #228]	; (800c970 <DAC_Cmd_send+0x144>)
 800c88a:	2201      	movs	r2, #1
 800c88c:	709a      	strb	r2, [r3, #2]
 800c88e:	e002      	b.n	800c896 <DAC_Cmd_send+0x6a>
	 }
	 else Uart2_Send_buffer[2]=0x00;
 800c890:	4b37      	ldr	r3, [pc, #220]	; (800c970 <DAC_Cmd_send+0x144>)
 800c892:	2200      	movs	r2, #0
 800c894:	709a      	strb	r2, [r3, #2]
	 /*********************data convert*********************/
	  Uart2_Send_buffer[3]=0x00;//data H
 800c896:	4b36      	ldr	r3, [pc, #216]	; (800c970 <DAC_Cmd_send+0x144>)
 800c898:	2200      	movs	r2, #0
 800c89a:	70da      	strb	r2, [r3, #3]
	  Uart2_Send_buffer[4]=0x00;//data L
 800c89c:	4b34      	ldr	r3, [pc, #208]	; (800c970 <DAC_Cmd_send+0x144>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	711a      	strb	r2, [r3, #4]
	  switch(cmd)
 800c8a2:	1dbb      	adds	r3, r7, #6
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	2b0b      	cmp	r3, #11
 800c8a8:	d83e      	bhi.n	800c928 <DAC_Cmd_send+0xfc>
 800c8aa:	009a      	lsls	r2, r3, #2
 800c8ac:	4b31      	ldr	r3, [pc, #196]	; (800c974 <DAC_Cmd_send+0x148>)
 800c8ae:	18d3      	adds	r3, r2, r3
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	469f      	mov	pc, r3

		  /*set max voltage current*/
		  case 4://set voltage
		  case 5://set current
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//low max_voltage
 800c8b4:	4b2e      	ldr	r3, [pc, #184]	; (800c970 <DAC_Cmd_send+0x144>)
 800c8b6:	791b      	ldrb	r3, [r3, #4]
 800c8b8:	b25a      	sxtb	r2, r3
 800c8ba:	1d3b      	adds	r3, r7, #4
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	b25b      	sxtb	r3, r3
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	b25b      	sxtb	r3, r3
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	4b2a      	ldr	r3, [pc, #168]	; (800c970 <DAC_Cmd_send+0x144>)
 800c8c8:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//Hight max_voltage
 800c8ca:	4b29      	ldr	r3, [pc, #164]	; (800c970 <DAC_Cmd_send+0x144>)
 800c8cc:	78da      	ldrb	r2, [r3, #3]
 800c8ce:	1d3b      	adds	r3, r7, #4
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	0a1b      	lsrs	r3, r3, #8
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	4b24      	ldr	r3, [pc, #144]	; (800c970 <DAC_Cmd_send+0x144>)
 800c8de:	70da      	strb	r2, [r3, #3]
			  break;
 800c8e0:	e025      	b.n	800c92e <DAC_Cmd_send+0x102>
		  }
		  /*set min voltage current*/
		  case 6://set voltage
		  case 7://set current
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//Low min_voltage
 800c8e2:	4b23      	ldr	r3, [pc, #140]	; (800c970 <DAC_Cmd_send+0x144>)
 800c8e4:	791b      	ldrb	r3, [r3, #4]
 800c8e6:	b25a      	sxtb	r2, r3
 800c8e8:	1d3b      	adds	r3, r7, #4
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	b25b      	sxtb	r3, r3
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	4b1e      	ldr	r3, [pc, #120]	; (800c970 <DAC_Cmd_send+0x144>)
 800c8f6:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//high min_voltage
 800c8f8:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <DAC_Cmd_send+0x144>)
 800c8fa:	78da      	ldrb	r2, [r3, #3]
 800c8fc:	1d3b      	adds	r3, r7, #4
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	0a1b      	lsrs	r3, r3, #8
 800c902:	b29b      	uxth	r3, r3
 800c904:	b2db      	uxtb	r3, r3
 800c906:	4313      	orrs	r3, r2
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	4b19      	ldr	r3, [pc, #100]	; (800c970 <DAC_Cmd_send+0x144>)
 800c90c:	70da      	strb	r2, [r3, #3]
			  break;
 800c90e:	e00e      	b.n	800c92e <DAC_Cmd_send+0x102>
		  }
		  /*set rate*/
		  case 8://set V rate
		  case 9://set I rate
		  {
			  Uart2_Send_buffer[4]=Data_To_Send;//Low :fall time
 800c910:	1d3b      	adds	r3, r7, #4
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	b2da      	uxtb	r2, r3
 800c916:	4b16      	ldr	r3, [pc, #88]	; (800c970 <DAC_Cmd_send+0x144>)
 800c918:	711a      	strb	r2, [r3, #4]
			  break;
 800c91a:	e008      	b.n	800c92e <DAC_Cmd_send+0x102>
		  }
		  /*rise/fall ctrl*/
		  case 10:
		  {
			  Uart2_Send_buffer[4]=Data_To_Send;//Low
 800c91c:	1d3b      	adds	r3, r7, #4
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	b2da      	uxtb	r2, r3
 800c922:	4b13      	ldr	r3, [pc, #76]	; (800c970 <DAC_Cmd_send+0x144>)
 800c924:	711a      	strb	r2, [r3, #4]
			  break;
 800c926:	e002      	b.n	800c92e <DAC_Cmd_send+0x102>
		  }//start Rise ON/OFF
		  case 11:break;//start Fall ON/OFF

		  default: break;
 800c928:	46c0      	nop			; (mov r8, r8)
 800c92a:	e000      	b.n	800c92e <DAC_Cmd_send+0x102>
		  case 11:break;//start Fall ON/OFF
 800c92c:	46c0      	nop			; (mov r8, r8)
	  /*********************CRC Calculate*********************/
	  Uart2_Send_buffer[5]=CRC16(Uart2_Send_buffer,5);//CRC L
	  Uart2_Send_buffer[6]=(CRC16(Uart2_Send_buffer,5)>>8);//CRC H
#endif
#ifdef ADD_CHECK
	  Uart2_Send_buffer[5]=ADD(Uart2_Send_buffer,5);//Low
 800c92e:	4b10      	ldr	r3, [pc, #64]	; (800c970 <DAC_Cmd_send+0x144>)
 800c930:	2105      	movs	r1, #5
 800c932:	0018      	movs	r0, r3
 800c934:	f7ff ff48 	bl	800c7c8 <ADD>
 800c938:	0003      	movs	r3, r0
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	4b0c      	ldr	r3, [pc, #48]	; (800c970 <DAC_Cmd_send+0x144>)
 800c93e:	715a      	strb	r2, [r3, #5]
	  Uart2_Send_buffer[6]=(ADD(Uart2_Send_buffer,5)>>8);//High
 800c940:	4b0b      	ldr	r3, [pc, #44]	; (800c970 <DAC_Cmd_send+0x144>)
 800c942:	2105      	movs	r1, #5
 800c944:	0018      	movs	r0, r3
 800c946:	f7ff ff3f 	bl	800c7c8 <ADD>
 800c94a:	0003      	movs	r3, r0
 800c94c:	0a1b      	lsrs	r3, r3, #8
 800c94e:	b29b      	uxth	r3, r3
 800c950:	b2da      	uxtb	r2, r3
 800c952:	4b07      	ldr	r3, [pc, #28]	; (800c970 <DAC_Cmd_send+0x144>)
 800c954:	719a      	strb	r2, [r3, #6]
#endif

	  HAL_UART_Transmit_IT(&huart2,Uart2_Send_buffer,7);
 800c956:	4906      	ldr	r1, [pc, #24]	; (800c970 <DAC_Cmd_send+0x144>)
 800c958:	4b04      	ldr	r3, [pc, #16]	; (800c96c <DAC_Cmd_send+0x140>)
 800c95a:	2207      	movs	r2, #7
 800c95c:	0018      	movs	r0, r3
 800c95e:	f7fd fc77 	bl	800a250 <HAL_UART_Transmit_IT>

}
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	46bd      	mov	sp, r7
 800c966:	b003      	add	sp, #12
 800c968:	bd90      	pop	{r4, r7, pc}
 800c96a:	46c0      	nop			; (mov r8, r8)
 800c96c:	20003728 	.word	0x20003728
 800c970:	20003680 	.word	0x20003680
 800c974:	08018234 	.word	0x08018234

0800c978 <power_on>:
  * @brief  开始输出
  * @param  无
  * @retval 无
  */
void power_on(void)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	af00      	add	r7, sp, #0


	ON_OFF =ON;
 800c97c:	4b0b      	ldr	r3, [pc, #44]	; (800c9ac <power_on+0x34>)
 800c97e:	2201      	movs	r2, #1
 800c980:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,4,Set_Voltage);
 800c982:	4b0b      	ldr	r3, [pc, #44]	; (800c9b0 <power_on+0x38>)
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	001a      	movs	r2, r3
 800c988:	2104      	movs	r1, #4
 800c98a:	2001      	movs	r0, #1
 800c98c:	f7ff ff4e 	bl	800c82c <DAC_Cmd_send>
	HAL_Delay(10);
 800c990:	200a      	movs	r0, #10
 800c992:	f7f8 fc35 	bl	8005200 <HAL_Delay>
	DAC_Cmd_send(1,5,Set_Current);
 800c996:	4b07      	ldr	r3, [pc, #28]	; (800c9b4 <power_on+0x3c>)
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	001a      	movs	r2, r3
 800c99c:	2105      	movs	r1, #5
 800c99e:	2001      	movs	r0, #1
 800c9a0:	f7ff ff44 	bl	800c82c <DAC_Cmd_send>
}
 800c9a4:	46c0      	nop			; (mov r8, r8)
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	46c0      	nop			; (mov r8, r8)
 800c9ac:	20003970 	.word	0x20003970
 800c9b0:	20002fda 	.word	0x20002fda
 800c9b4:	20002fdc 	.word	0x20002fdc

0800c9b8 <power_off>:
  * @brief  关闭输出
  * @param  无
  * @retval 无
  */
void power_off(void)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0

	ON_OFF =OFF;
 800c9be:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <power_off+0x44>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,4,100);
 800c9c4:	2264      	movs	r2, #100	; 0x64
 800c9c6:	2104      	movs	r1, #4
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	f7ff ff2f 	bl	800c82c <DAC_Cmd_send>
	for(uint8_t i=0;i<100;i++)
 800c9ce:	1dfb      	adds	r3, r7, #7
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	e004      	b.n	800c9e0 <power_off+0x28>
 800c9d6:	1dfb      	adds	r3, r7, #7
 800c9d8:	781a      	ldrb	r2, [r3, #0]
 800c9da:	1dfb      	adds	r3, r7, #7
 800c9dc:	3201      	adds	r2, #1
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	1dfb      	adds	r3, r7, #7
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	2b63      	cmp	r3, #99	; 0x63
 800c9e6:	d9f6      	bls.n	800c9d6 <power_off+0x1e>
		;
	DAC_Cmd_send(1,5,100);
 800c9e8:	2264      	movs	r2, #100	; 0x64
 800c9ea:	2105      	movs	r1, #5
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	f7ff ff1d 	bl	800c82c <DAC_Cmd_send>

}
 800c9f2:	46c0      	nop			; (mov r8, r8)
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	b002      	add	sp, #8
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	46c0      	nop			; (mov r8, r8)
 800c9fc:	20003970 	.word	0x20003970

0800ca00 <Output_Zero>:
  * @brief  输出零
  * @param  无
  * @retval 无
  */
void Output_Zero(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	af00      	add	r7, sp, #0

	DAC_Cmd_send(1,4,100);
 800ca04:	2264      	movs	r2, #100	; 0x64
 800ca06:	2104      	movs	r1, #4
 800ca08:	2001      	movs	r0, #1
 800ca0a:	f7ff ff0f 	bl	800c82c <DAC_Cmd_send>
	HAL_Delay(10);
 800ca0e:	200a      	movs	r0, #10
 800ca10:	f7f8 fbf6 	bl	8005200 <HAL_Delay>
	DAC_Cmd_send(1,5,100);
 800ca14:	2264      	movs	r2, #100	; 0x64
 800ca16:	2105      	movs	r1, #5
 800ca18:	2001      	movs	r0, #1
 800ca1a:	f7ff ff07 	bl	800c82c <DAC_Cmd_send>

}
 800ca1e:	46c0      	nop			; (mov r8, r8)
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <First_menu_data_Refresh>:
#include "encoder.h"

static void First_menu_data_Refresh(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
	xyz.coordinates2+=Flag.Encoder_BF;
 800ca28:	4b0b      	ldr	r3, [pc, #44]	; (800ca58 <First_menu_data_Refresh+0x34>)
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	4b0b      	ldr	r3, [pc, #44]	; (800ca5c <First_menu_data_Refresh+0x38>)
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	18d2      	adds	r2, r2, r3
 800ca32:	4b09      	ldr	r3, [pc, #36]	; (800ca58 <First_menu_data_Refresh+0x34>)
 800ca34:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2<1)	xyz.coordinates2=8;
 800ca36:	4b08      	ldr	r3, [pc, #32]	; (800ca58 <First_menu_data_Refresh+0x34>)
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dc02      	bgt.n	800ca44 <First_menu_data_Refresh+0x20>
 800ca3e:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <First_menu_data_Refresh+0x34>)
 800ca40:	2208      	movs	r2, #8
 800ca42:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2>8)  xyz.coordinates2=1;
 800ca44:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <First_menu_data_Refresh+0x34>)
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	2b08      	cmp	r3, #8
 800ca4a:	dd02      	ble.n	800ca52 <First_menu_data_Refresh+0x2e>
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <First_menu_data_Refresh+0x34>)
 800ca4e:	2201      	movs	r2, #1
 800ca50:	605a      	str	r2, [r3, #4]
}
 800ca52:	46c0      	nop			; (mov r8, r8)
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	200039e0 	.word	0x200039e0
 800ca5c:	20003378 	.word	0x20003378

0800ca60 <Calibration_V_data_Refresh>:

static void Calibration_V_data_Refresh(void)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	af00      	add	r7, sp, #0

	String_Calibration_Vlotage[Cursor_Position-9]+=Flag.Encoder_BF;
 800ca64:	4b8a      	ldr	r3, [pc, #552]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	3b09      	subs	r3, #9
 800ca6a:	4a8a      	ldr	r2, [pc, #552]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800ca6c:	5cd1      	ldrb	r1, [r2, r3]
 800ca6e:	4b8a      	ldr	r3, [pc, #552]	; (800cc98 <Calibration_V_data_Refresh+0x238>)
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	4b86      	ldr	r3, [pc, #536]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	3b09      	subs	r3, #9
 800ca7a:	188a      	adds	r2, r1, r2
 800ca7c:	b2d1      	uxtb	r1, r2
 800ca7e:	4a85      	ldr	r2, [pc, #532]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800ca80:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Vlotage[Cursor_Position-9]<'0')//退位
 800ca82:	4b83      	ldr	r3, [pc, #524]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	3b09      	subs	r3, #9
 800ca88:	4a82      	ldr	r2, [pc, #520]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800ca8a:	5cd3      	ldrb	r3, [r2, r3]
 800ca8c:	2b2f      	cmp	r3, #47	; 0x2f
 800ca8e:	d900      	bls.n	800ca92 <Calibration_V_data_Refresh+0x32>
 800ca90:	e0a3      	b.n	800cbda <Calibration_V_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800ca92:	4b7f      	ldr	r3, [pc, #508]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	2b0b      	cmp	r3, #11
 800ca98:	d165      	bne.n	800cb66 <Calibration_V_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800ca9a:	4b7d      	ldr	r3, [pc, #500]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	4b7b      	ldr	r3, [pc, #492]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800caa4:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800caa6:	4b7a      	ldr	r3, [pc, #488]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	3b09      	subs	r3, #9
 800caac:	4a79      	ldr	r2, [pc, #484]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800caae:	5cd3      	ldrb	r3, [r2, r3]
 800cab0:	2b30      	cmp	r3, #48	; 0x30
 800cab2:	d915      	bls.n	800cae0 <Calibration_V_data_Refresh+0x80>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cab4:	4b76      	ldr	r3, [pc, #472]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	3b09      	subs	r3, #9
 800caba:	4a76      	ldr	r2, [pc, #472]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cabc:	5cd2      	ldrb	r2, [r2, r3]
 800cabe:	3a01      	subs	r2, #1
 800cac0:	b2d1      	uxtb	r1, r2
 800cac2:	4a74      	ldr	r2, [pc, #464]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cac4:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cac6:	4b72      	ldr	r3, [pc, #456]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	4b70      	ldr	r3, [pc, #448]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cad0:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cad2:	4b6f      	ldr	r3, [pc, #444]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	3b09      	subs	r3, #9
 800cad8:	4a6e      	ldr	r2, [pc, #440]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cada:	2139      	movs	r1, #57	; 0x39
 800cadc:	54d1      	strb	r1, [r2, r3]
 800cade:	e07c      	b.n	800cbda <Calibration_V_data_Refresh+0x17a>

			}
			else if(String_Calibration_Vlotage[Cursor_Position-9]=='0')
 800cae0:	4b6b      	ldr	r3, [pc, #428]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	3b09      	subs	r3, #9
 800cae6:	4a6b      	ldr	r2, [pc, #428]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cae8:	5cd3      	ldrb	r3, [r2, r3]
 800caea:	2b30      	cmp	r3, #48	; 0x30
 800caec:	d175      	bne.n	800cbda <Calibration_V_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800caee:	4b68      	ldr	r3, [pc, #416]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	4b66      	ldr	r3, [pc, #408]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800caf8:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cafa:	4b65      	ldr	r3, [pc, #404]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	3b09      	subs	r3, #9
 800cb00:	4a64      	ldr	r2, [pc, #400]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb02:	5cd3      	ldrb	r3, [r2, r3]
 800cb04:	2b30      	cmp	r3, #48	; 0x30
 800cb06:	d921      	bls.n	800cb4c <Calibration_V_data_Refresh+0xec>
				{
					String_Calibration_Vlotage[Cursor_Position-9]--;
 800cb08:	4b61      	ldr	r3, [pc, #388]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	3b09      	subs	r3, #9
 800cb0e:	4a61      	ldr	r2, [pc, #388]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb10:	5cd2      	ldrb	r2, [r2, r3]
 800cb12:	3a01      	subs	r2, #1
 800cb14:	b2d1      	uxtb	r1, r2
 800cb16:	4a5f      	ldr	r2, [pc, #380]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb18:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cb1a:	4b5d      	ldr	r3, [pc, #372]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	4b5b      	ldr	r3, [pc, #364]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb24:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cb26:	4b5a      	ldr	r3, [pc, #360]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	3b09      	subs	r3, #9
 800cb2c:	4a59      	ldr	r2, [pc, #356]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb2e:	2139      	movs	r1, #57	; 0x39
 800cb30:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cb32:	4b57      	ldr	r3, [pc, #348]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	3301      	adds	r3, #1
 800cb38:	b2da      	uxtb	r2, r3
 800cb3a:	4b55      	ldr	r3, [pc, #340]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb3c:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cb3e:	4b54      	ldr	r3, [pc, #336]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	3b09      	subs	r3, #9
 800cb44:	4a53      	ldr	r2, [pc, #332]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb46:	2139      	movs	r1, #57	; 0x39
 800cb48:	54d1      	strb	r1, [r2, r3]
 800cb4a:	e046      	b.n	800cbda <Calibration_V_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cb4c:	4b50      	ldr	r3, [pc, #320]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	3302      	adds	r3, #2
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	4b4e      	ldr	r3, [pc, #312]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb56:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cb58:	4b4d      	ldr	r3, [pc, #308]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	3b09      	subs	r3, #9
 800cb5e:	4a4d      	ldr	r2, [pc, #308]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb60:	2130      	movs	r1, #48	; 0x30
 800cb62:	54d1      	strb	r1, [r2, r3]
 800cb64:	e039      	b.n	800cbda <Calibration_V_data_Refresh+0x17a>

			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800cb66:	4b4a      	ldr	r3, [pc, #296]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	2b0a      	cmp	r3, #10
 800cb6c:	d12f      	bne.n	800cbce <Calibration_V_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800cb6e:	4b48      	ldr	r3, [pc, #288]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	3b01      	subs	r3, #1
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	4b46      	ldr	r3, [pc, #280]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb78:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cb7a:	4b45      	ldr	r3, [pc, #276]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	3b09      	subs	r3, #9
 800cb80:	4a44      	ldr	r2, [pc, #272]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb82:	5cd3      	ldrb	r3, [r2, r3]
 800cb84:	2b30      	cmp	r3, #48	; 0x30
 800cb86:	d915      	bls.n	800cbb4 <Calibration_V_data_Refresh+0x154>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cb88:	4b41      	ldr	r3, [pc, #260]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	3b09      	subs	r3, #9
 800cb8e:	4a41      	ldr	r2, [pc, #260]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb90:	5cd2      	ldrb	r2, [r2, r3]
 800cb92:	3a01      	subs	r2, #1
 800cb94:	b2d1      	uxtb	r1, r2
 800cb96:	4a3f      	ldr	r2, [pc, #252]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cb98:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cb9a:	4b3d      	ldr	r3, [pc, #244]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	4b3b      	ldr	r3, [pc, #236]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cba4:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cba6:	4b3a      	ldr	r3, [pc, #232]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	3b09      	subs	r3, #9
 800cbac:	4a39      	ldr	r2, [pc, #228]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cbae:	2139      	movs	r1, #57	; 0x39
 800cbb0:	54d1      	strb	r1, [r2, r3]
 800cbb2:	e012      	b.n	800cbda <Calibration_V_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800cbb4:	4b36      	ldr	r3, [pc, #216]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	4b34      	ldr	r3, [pc, #208]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbbe:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cbc0:	4b33      	ldr	r3, [pc, #204]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	3b09      	subs	r3, #9
 800cbc6:	4a33      	ldr	r2, [pc, #204]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cbc8:	2130      	movs	r1, #48	; 0x30
 800cbca:	54d1      	strb	r1, [r2, r3]
 800cbcc:	e005      	b.n	800cbda <Calibration_V_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cbce:	4b30      	ldr	r3, [pc, #192]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	3b09      	subs	r3, #9
 800cbd4:	4a2f      	ldr	r2, [pc, #188]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cbd6:	2130      	movs	r1, #48	; 0x30
 800cbd8:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Vlotage[Cursor_Position-9]>'9')
 800cbda:	4b2d      	ldr	r3, [pc, #180]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	3b09      	subs	r3, #9
 800cbe0:	4a2c      	ldr	r2, [pc, #176]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cbe2:	5cd3      	ldrb	r3, [r2, r3]
 800cbe4:	2b39      	cmp	r3, #57	; 0x39
 800cbe6:	d94f      	bls.n	800cc88 <Calibration_V_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800cbe8:	4b29      	ldr	r3, [pc, #164]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d041      	beq.n	800cc74 <Calibration_V_data_Refresh+0x214>
		{
			String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cbf0:	4b27      	ldr	r3, [pc, #156]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	3b09      	subs	r3, #9
 800cbf6:	4a27      	ldr	r2, [pc, #156]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cbf8:	2130      	movs	r1, #48	; 0x30
 800cbfa:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800cbfc:	4b24      	ldr	r3, [pc, #144]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	4b22      	ldr	r3, [pc, #136]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc06:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]++;
 800cc08:	4b21      	ldr	r3, [pc, #132]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	3b09      	subs	r3, #9
 800cc0e:	4a21      	ldr	r2, [pc, #132]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cc10:	5cd2      	ldrb	r2, [r2, r3]
 800cc12:	3201      	adds	r2, #1
 800cc14:	b2d1      	uxtb	r1, r2
 800cc16:	4a1f      	ldr	r2, [pc, #124]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cc18:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800cc1a:	4b1d      	ldr	r3, [pc, #116]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	3b09      	subs	r3, #9
 800cc20:	4a1c      	ldr	r2, [pc, #112]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cc22:	5cd3      	ldrb	r3, [r2, r3]
 800cc24:	2b39      	cmp	r3, #57	; 0x39
 800cc26:	d91e      	bls.n	800cc66 <Calibration_V_data_Refresh+0x206>
 800cc28:	4b19      	ldr	r3, [pc, #100]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01a      	beq.n	800cc66 <Calibration_V_data_Refresh+0x206>
			{
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cc30:	4b17      	ldr	r3, [pc, #92]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	3b09      	subs	r3, #9
 800cc36:	4a17      	ldr	r2, [pc, #92]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cc38:	2130      	movs	r1, #48	; 0x30
 800cc3a:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800cc3c:	4b14      	ldr	r3, [pc, #80]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	4b12      	ldr	r3, [pc, #72]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc46:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]++;
 800cc48:	4b11      	ldr	r3, [pc, #68]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	3b09      	subs	r3, #9
 800cc4e:	4a11      	ldr	r2, [pc, #68]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cc50:	5cd2      	ldrb	r2, [r2, r3]
 800cc52:	3201      	adds	r2, #1
 800cc54:	b2d1      	uxtb	r1, r2
 800cc56:	4a0f      	ldr	r2, [pc, #60]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cc58:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cc5a:	4b0d      	ldr	r3, [pc, #52]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	4b0b      	ldr	r3, [pc, #44]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc64:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800cc66:	4b0a      	ldr	r3, [pc, #40]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	4b08      	ldr	r3, [pc, #32]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc70:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]='9';
		}

	}

}
 800cc72:	e009      	b.n	800cc88 <Calibration_V_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800cc74:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d105      	bne.n	800cc88 <Calibration_V_data_Refresh+0x228>
			String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cc7c:	4b04      	ldr	r3, [pc, #16]	; (800cc90 <Calibration_V_data_Refresh+0x230>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	3b09      	subs	r3, #9
 800cc82:	4a04      	ldr	r2, [pc, #16]	; (800cc94 <Calibration_V_data_Refresh+0x234>)
 800cc84:	2139      	movs	r1, #57	; 0x39
 800cc86:	54d1      	strb	r1, [r2, r3]
}
 800cc88:	46c0      	nop			; (mov r8, r8)
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	46c0      	nop			; (mov r8, r8)
 800cc90:	20003976 	.word	0x20003976
 800cc94:	20003090 	.word	0x20003090
 800cc98:	20003378 	.word	0x20003378

0800cc9c <Calibration_I_data_Refresh>:


static void Calibration_I_data_Refresh(void)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	af00      	add	r7, sp, #0

	String_Calibration_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800cca0:	4b8a      	ldr	r3, [pc, #552]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	3b09      	subs	r3, #9
 800cca6:	4a8a      	ldr	r2, [pc, #552]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cca8:	5cd1      	ldrb	r1, [r2, r3]
 800ccaa:	4b8a      	ldr	r3, [pc, #552]	; (800ced4 <Calibration_I_data_Refresh+0x238>)
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	4b86      	ldr	r3, [pc, #536]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	3b09      	subs	r3, #9
 800ccb6:	188a      	adds	r2, r1, r2
 800ccb8:	b2d1      	uxtb	r1, r2
 800ccba:	4a85      	ldr	r2, [pc, #532]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ccbc:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Current[Cursor_Position-9]<'0')//退位
 800ccbe:	4b83      	ldr	r3, [pc, #524]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	3b09      	subs	r3, #9
 800ccc4:	4a82      	ldr	r2, [pc, #520]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ccc6:	5cd3      	ldrb	r3, [r2, r3]
 800ccc8:	2b2f      	cmp	r3, #47	; 0x2f
 800ccca:	d900      	bls.n	800ccce <Calibration_I_data_Refresh+0x32>
 800cccc:	e0a3      	b.n	800ce16 <Calibration_I_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800ccce:	4b7f      	ldr	r3, [pc, #508]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	2b0b      	cmp	r3, #11
 800ccd4:	d165      	bne.n	800cda2 <Calibration_I_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800ccd6:	4b7d      	ldr	r3, [pc, #500]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	4b7b      	ldr	r3, [pc, #492]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cce0:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cce2:	4b7a      	ldr	r3, [pc, #488]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	3b09      	subs	r3, #9
 800cce8:	4a79      	ldr	r2, [pc, #484]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ccea:	5cd3      	ldrb	r3, [r2, r3]
 800ccec:	2b30      	cmp	r3, #48	; 0x30
 800ccee:	d915      	bls.n	800cd1c <Calibration_I_data_Refresh+0x80>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800ccf0:	4b76      	ldr	r3, [pc, #472]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	3b09      	subs	r3, #9
 800ccf6:	4a76      	ldr	r2, [pc, #472]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ccf8:	5cd2      	ldrb	r2, [r2, r3]
 800ccfa:	3a01      	subs	r2, #1
 800ccfc:	b2d1      	uxtb	r1, r2
 800ccfe:	4a74      	ldr	r2, [pc, #464]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd00:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cd02:	4b72      	ldr	r3, [pc, #456]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	3301      	adds	r3, #1
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	4b70      	ldr	r3, [pc, #448]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd0c:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800cd0e:	4b6f      	ldr	r3, [pc, #444]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	3b09      	subs	r3, #9
 800cd14:	4a6e      	ldr	r2, [pc, #440]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd16:	2139      	movs	r1, #57	; 0x39
 800cd18:	54d1      	strb	r1, [r2, r3]
 800cd1a:	e07c      	b.n	800ce16 <Calibration_I_data_Refresh+0x17a>

			}
			else if(String_Calibration_Current[Cursor_Position-9]=='0')
 800cd1c:	4b6b      	ldr	r3, [pc, #428]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	3b09      	subs	r3, #9
 800cd22:	4a6b      	ldr	r2, [pc, #428]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd24:	5cd3      	ldrb	r3, [r2, r3]
 800cd26:	2b30      	cmp	r3, #48	; 0x30
 800cd28:	d175      	bne.n	800ce16 <Calibration_I_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cd2a:	4b68      	ldr	r3, [pc, #416]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	4b66      	ldr	r3, [pc, #408]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd34:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cd36:	4b65      	ldr	r3, [pc, #404]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	3b09      	subs	r3, #9
 800cd3c:	4a64      	ldr	r2, [pc, #400]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd3e:	5cd3      	ldrb	r3, [r2, r3]
 800cd40:	2b30      	cmp	r3, #48	; 0x30
 800cd42:	d921      	bls.n	800cd88 <Calibration_I_data_Refresh+0xec>
				{
					String_Calibration_Current[Cursor_Position-9]--;
 800cd44:	4b61      	ldr	r3, [pc, #388]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	3b09      	subs	r3, #9
 800cd4a:	4a61      	ldr	r2, [pc, #388]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd4c:	5cd2      	ldrb	r2, [r2, r3]
 800cd4e:	3a01      	subs	r2, #1
 800cd50:	b2d1      	uxtb	r1, r2
 800cd52:	4a5f      	ldr	r2, [pc, #380]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd54:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cd56:	4b5d      	ldr	r3, [pc, #372]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	4b5b      	ldr	r3, [pc, #364]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd60:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cd62:	4b5a      	ldr	r3, [pc, #360]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	3b09      	subs	r3, #9
 800cd68:	4a59      	ldr	r2, [pc, #356]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd6a:	2139      	movs	r1, #57	; 0x39
 800cd6c:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cd6e:	4b57      	ldr	r3, [pc, #348]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	3301      	adds	r3, #1
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	4b55      	ldr	r3, [pc, #340]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd78:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cd7a:	4b54      	ldr	r3, [pc, #336]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	3b09      	subs	r3, #9
 800cd80:	4a53      	ldr	r2, [pc, #332]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd82:	2139      	movs	r1, #57	; 0x39
 800cd84:	54d1      	strb	r1, [r2, r3]
 800cd86:	e046      	b.n	800ce16 <Calibration_I_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cd88:	4b50      	ldr	r3, [pc, #320]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	3302      	adds	r3, #2
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	4b4e      	ldr	r3, [pc, #312]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd92:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='0';
 800cd94:	4b4d      	ldr	r3, [pc, #308]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	3b09      	subs	r3, #9
 800cd9a:	4a4d      	ldr	r2, [pc, #308]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cd9c:	2130      	movs	r1, #48	; 0x30
 800cd9e:	54d1      	strb	r1, [r2, r3]
 800cda0:	e039      	b.n	800ce16 <Calibration_I_data_Refresh+0x17a>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800cda2:	4b4a      	ldr	r3, [pc, #296]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b0a      	cmp	r3, #10
 800cda8:	d12f      	bne.n	800ce0a <Calibration_I_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800cdaa:	4b48      	ldr	r3, [pc, #288]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	4b46      	ldr	r3, [pc, #280]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdb4:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cdb6:	4b45      	ldr	r3, [pc, #276]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	3b09      	subs	r3, #9
 800cdbc:	4a44      	ldr	r2, [pc, #272]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cdbe:	5cd3      	ldrb	r3, [r2, r3]
 800cdc0:	2b30      	cmp	r3, #48	; 0x30
 800cdc2:	d915      	bls.n	800cdf0 <Calibration_I_data_Refresh+0x154>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800cdc4:	4b41      	ldr	r3, [pc, #260]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	3b09      	subs	r3, #9
 800cdca:	4a41      	ldr	r2, [pc, #260]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cdcc:	5cd2      	ldrb	r2, [r2, r3]
 800cdce:	3a01      	subs	r2, #1
 800cdd0:	b2d1      	uxtb	r1, r2
 800cdd2:	4a3f      	ldr	r2, [pc, #252]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cdd4:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cdd6:	4b3d      	ldr	r3, [pc, #244]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	3301      	adds	r3, #1
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	4b3b      	ldr	r3, [pc, #236]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cde0:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800cde2:	4b3a      	ldr	r3, [pc, #232]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	3b09      	subs	r3, #9
 800cde8:	4a39      	ldr	r2, [pc, #228]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cdea:	2139      	movs	r1, #57	; 0x39
 800cdec:	54d1      	strb	r1, [r2, r3]
 800cdee:	e012      	b.n	800ce16 <Calibration_I_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800cdf0:	4b36      	ldr	r3, [pc, #216]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	4b34      	ldr	r3, [pc, #208]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdfa:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='0';
 800cdfc:	4b33      	ldr	r3, [pc, #204]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	3b09      	subs	r3, #9
 800ce02:	4a33      	ldr	r2, [pc, #204]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce04:	2130      	movs	r1, #48	; 0x30
 800ce06:	54d1      	strb	r1, [r2, r3]
 800ce08:	e005      	b.n	800ce16 <Calibration_I_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Current[Cursor_Position-9]='0';
 800ce0a:	4b30      	ldr	r3, [pc, #192]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	3b09      	subs	r3, #9
 800ce10:	4a2f      	ldr	r2, [pc, #188]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce12:	2130      	movs	r1, #48	; 0x30
 800ce14:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Current[Cursor_Position-9]>'9')
 800ce16:	4b2d      	ldr	r3, [pc, #180]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	3b09      	subs	r3, #9
 800ce1c:	4a2c      	ldr	r2, [pc, #176]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce1e:	5cd3      	ldrb	r3, [r2, r3]
 800ce20:	2b39      	cmp	r3, #57	; 0x39
 800ce22:	d94f      	bls.n	800cec4 <Calibration_I_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800ce24:	4b29      	ldr	r3, [pc, #164]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d041      	beq.n	800ceb0 <Calibration_I_data_Refresh+0x214>
		{
			String_Calibration_Current[Cursor_Position-9]='0';
 800ce2c:	4b27      	ldr	r3, [pc, #156]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	3b09      	subs	r3, #9
 800ce32:	4a27      	ldr	r2, [pc, #156]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce34:	2130      	movs	r1, #48	; 0x30
 800ce36:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800ce38:	4b24      	ldr	r3, [pc, #144]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	4b22      	ldr	r3, [pc, #136]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce42:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]++;
 800ce44:	4b21      	ldr	r3, [pc, #132]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	3b09      	subs	r3, #9
 800ce4a:	4a21      	ldr	r2, [pc, #132]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce4c:	5cd2      	ldrb	r2, [r2, r3]
 800ce4e:	3201      	adds	r2, #1
 800ce50:	b2d1      	uxtb	r1, r2
 800ce52:	4a1f      	ldr	r2, [pc, #124]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce54:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800ce56:	4b1d      	ldr	r3, [pc, #116]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	3b09      	subs	r3, #9
 800ce5c:	4a1c      	ldr	r2, [pc, #112]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce5e:	5cd3      	ldrb	r3, [r2, r3]
 800ce60:	2b39      	cmp	r3, #57	; 0x39
 800ce62:	d91e      	bls.n	800cea2 <Calibration_I_data_Refresh+0x206>
 800ce64:	4b19      	ldr	r3, [pc, #100]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d01a      	beq.n	800cea2 <Calibration_I_data_Refresh+0x206>
			{
				String_Calibration_Current[Cursor_Position-9]='0';
 800ce6c:	4b17      	ldr	r3, [pc, #92]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	3b09      	subs	r3, #9
 800ce72:	4a17      	ldr	r2, [pc, #92]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce74:	2130      	movs	r1, #48	; 0x30
 800ce76:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800ce78:	4b14      	ldr	r3, [pc, #80]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	4b12      	ldr	r3, [pc, #72]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce82:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]++;
 800ce84:	4b11      	ldr	r3, [pc, #68]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	3b09      	subs	r3, #9
 800ce8a:	4a11      	ldr	r2, [pc, #68]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce8c:	5cd2      	ldrb	r2, [r2, r3]
 800ce8e:	3201      	adds	r2, #1
 800ce90:	b2d1      	uxtb	r1, r2
 800ce92:	4a0f      	ldr	r2, [pc, #60]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800ce94:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ce96:	4b0d      	ldr	r3, [pc, #52]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	4b0b      	ldr	r3, [pc, #44]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cea0:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800cea2:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	4b08      	ldr	r3, [pc, #32]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ceac:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]='9';
		}

	}

}
 800ceae:	e009      	b.n	800cec4 <Calibration_I_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800ceb0:	4b06      	ldr	r3, [pc, #24]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d105      	bne.n	800cec4 <Calibration_I_data_Refresh+0x228>
			String_Calibration_Current[Cursor_Position-9]='9';
 800ceb8:	4b04      	ldr	r3, [pc, #16]	; (800cecc <Calibration_I_data_Refresh+0x230>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	3b09      	subs	r3, #9
 800cebe:	4a04      	ldr	r2, [pc, #16]	; (800ced0 <Calibration_I_data_Refresh+0x234>)
 800cec0:	2139      	movs	r1, #57	; 0x39
 800cec2:	54d1      	strb	r1, [r2, r3]
}
 800cec4:	46c0      	nop			; (mov r8, r8)
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	46c0      	nop			; (mov r8, r8)
 800cecc:	20003976 	.word	0x20003976
 800ced0:	2000309c 	.word	0x2000309c
 800ced4:	20003378 	.word	0x20003378

0800ced8 <Vset_data_Refresh>:

static void Vset_data_Refresh(void)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	af00      	add	r7, sp, #0
	String_Voltage[Cursor_Position]+=Flag.Encoder_BF;
 800cedc:	4b9e      	ldr	r3, [pc, #632]	; (800d158 <Vset_data_Refresh+0x280>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	001a      	movs	r2, r3
 800cee2:	4b9e      	ldr	r3, [pc, #632]	; (800d15c <Vset_data_Refresh+0x284>)
 800cee4:	5c9a      	ldrb	r2, [r3, r2]
 800cee6:	4b9e      	ldr	r3, [pc, #632]	; (800d160 <Vset_data_Refresh+0x288>)
 800cee8:	69db      	ldr	r3, [r3, #28]
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	499a      	ldr	r1, [pc, #616]	; (800d158 <Vset_data_Refresh+0x280>)
 800ceee:	7809      	ldrb	r1, [r1, #0]
 800cef0:	18d3      	adds	r3, r2, r3
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	4b99      	ldr	r3, [pc, #612]	; (800d15c <Vset_data_Refresh+0x284>)
 800cef6:	545a      	strb	r2, [r3, r1]
	if(String_Voltage[Cursor_Position]<'0')
 800cef8:	4b97      	ldr	r3, [pc, #604]	; (800d158 <Vset_data_Refresh+0x280>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	001a      	movs	r2, r3
 800cefe:	4b97      	ldr	r3, [pc, #604]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf00:	5c9b      	ldrb	r3, [r3, r2]
 800cf02:	2b2f      	cmp	r3, #47	; 0x2f
 800cf04:	d900      	bls.n	800cf08 <Vset_data_Refresh+0x30>
 800cf06:	e0a0      	b.n	800d04a <Vset_data_Refresh+0x172>
	{
		/*第三位退位*/
		if(Cursor_Position==2)
 800cf08:	4b93      	ldr	r3, [pc, #588]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d163      	bne.n	800cfd8 <Vset_data_Refresh+0x100>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cf10:	4b91      	ldr	r3, [pc, #580]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	4b8f      	ldr	r3, [pc, #572]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf1a:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800cf1c:	4b8e      	ldr	r3, [pc, #568]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	001a      	movs	r2, r3
 800cf22:	4b8e      	ldr	r3, [pc, #568]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf24:	5c9b      	ldrb	r3, [r3, r2]
 800cf26:	2b30      	cmp	r3, #48	; 0x30
 800cf28:	d914      	bls.n	800cf54 <Vset_data_Refresh+0x7c>
			{
				String_Voltage[Cursor_Position]--;
 800cf2a:	4b8b      	ldr	r3, [pc, #556]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	4a8b      	ldr	r2, [pc, #556]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf30:	5cd2      	ldrb	r2, [r2, r3]
 800cf32:	3a01      	subs	r2, #1
 800cf34:	b2d1      	uxtb	r1, r2
 800cf36:	4a89      	ldr	r2, [pc, #548]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf38:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cf3a:	4b87      	ldr	r3, [pc, #540]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	4b85      	ldr	r3, [pc, #532]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf44:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800cf46:	4b84      	ldr	r3, [pc, #528]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	001a      	movs	r2, r3
 800cf4c:	4b83      	ldr	r3, [pc, #524]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf4e:	2139      	movs	r1, #57	; 0x39
 800cf50:	5499      	strb	r1, [r3, r2]
 800cf52:	e07a      	b.n	800d04a <Vset_data_Refresh+0x172>

			}
			else if(String_Voltage[Cursor_Position]=='0')
 800cf54:	4b80      	ldr	r3, [pc, #512]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	001a      	movs	r2, r3
 800cf5a:	4b80      	ldr	r3, [pc, #512]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf5c:	5c9b      	ldrb	r3, [r3, r2]
 800cf5e:	2b30      	cmp	r3, #48	; 0x30
 800cf60:	d173      	bne.n	800d04a <Vset_data_Refresh+0x172>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cf62:	4b7d      	ldr	r3, [pc, #500]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	3b01      	subs	r3, #1
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	4b7b      	ldr	r3, [pc, #492]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf6c:	701a      	strb	r2, [r3, #0]
				if(String_Voltage[Cursor_Position]>'0')
 800cf6e:	4b7a      	ldr	r3, [pc, #488]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	001a      	movs	r2, r3
 800cf74:	4b79      	ldr	r3, [pc, #484]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf76:	5c9b      	ldrb	r3, [r3, r2]
 800cf78:	2b30      	cmp	r3, #48	; 0x30
 800cf7a:	d920      	bls.n	800cfbe <Vset_data_Refresh+0xe6>
				{
					String_Voltage[Cursor_Position]--;
 800cf7c:	4b76      	ldr	r3, [pc, #472]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	4a76      	ldr	r2, [pc, #472]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf82:	5cd2      	ldrb	r2, [r2, r3]
 800cf84:	3a01      	subs	r2, #1
 800cf86:	b2d1      	uxtb	r1, r2
 800cf88:	4a74      	ldr	r2, [pc, #464]	; (800d15c <Vset_data_Refresh+0x284>)
 800cf8a:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cf8c:	4b72      	ldr	r3, [pc, #456]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	3301      	adds	r3, #1
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	4b70      	ldr	r3, [pc, #448]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf96:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800cf98:	4b6f      	ldr	r3, [pc, #444]	; (800d158 <Vset_data_Refresh+0x280>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	001a      	movs	r2, r3
 800cf9e:	4b6f      	ldr	r3, [pc, #444]	; (800d15c <Vset_data_Refresh+0x284>)
 800cfa0:	2139      	movs	r1, #57	; 0x39
 800cfa2:	5499      	strb	r1, [r3, r2]
					Cursor_Position++;
 800cfa4:	4b6c      	ldr	r3, [pc, #432]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	4b6a      	ldr	r3, [pc, #424]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfae:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800cfb0:	4b69      	ldr	r3, [pc, #420]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	001a      	movs	r2, r3
 800cfb6:	4b69      	ldr	r3, [pc, #420]	; (800d15c <Vset_data_Refresh+0x284>)
 800cfb8:	2139      	movs	r1, #57	; 0x39
 800cfba:	5499      	strb	r1, [r3, r2]
 800cfbc:	e045      	b.n	800d04a <Vset_data_Refresh+0x172>


				}
				else
				{
					Cursor_Position+=2;
 800cfbe:	4b66      	ldr	r3, [pc, #408]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	3302      	adds	r3, #2
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	4b64      	ldr	r3, [pc, #400]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfc8:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='0';
 800cfca:	4b63      	ldr	r3, [pc, #396]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	001a      	movs	r2, r3
 800cfd0:	4b62      	ldr	r3, [pc, #392]	; (800d15c <Vset_data_Refresh+0x284>)
 800cfd2:	2130      	movs	r1, #48	; 0x30
 800cfd4:	5499      	strb	r1, [r3, r2]
 800cfd6:	e038      	b.n	800d04a <Vset_data_Refresh+0x172>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1)
 800cfd8:	4b5f      	ldr	r3, [pc, #380]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d12e      	bne.n	800d03e <Vset_data_Refresh+0x166>
		{
			Cursor_Position--;
 800cfe0:	4b5d      	ldr	r3, [pc, #372]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	4b5b      	ldr	r3, [pc, #364]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfea:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800cfec:	4b5a      	ldr	r3, [pc, #360]	; (800d158 <Vset_data_Refresh+0x280>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	001a      	movs	r2, r3
 800cff2:	4b5a      	ldr	r3, [pc, #360]	; (800d15c <Vset_data_Refresh+0x284>)
 800cff4:	5c9b      	ldrb	r3, [r3, r2]
 800cff6:	2b30      	cmp	r3, #48	; 0x30
 800cff8:	d914      	bls.n	800d024 <Vset_data_Refresh+0x14c>
			{
				String_Voltage[Cursor_Position]--;
 800cffa:	4b57      	ldr	r3, [pc, #348]	; (800d158 <Vset_data_Refresh+0x280>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	4a57      	ldr	r2, [pc, #348]	; (800d15c <Vset_data_Refresh+0x284>)
 800d000:	5cd2      	ldrb	r2, [r2, r3]
 800d002:	3a01      	subs	r2, #1
 800d004:	b2d1      	uxtb	r1, r2
 800d006:	4a55      	ldr	r2, [pc, #340]	; (800d15c <Vset_data_Refresh+0x284>)
 800d008:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d00a:	4b53      	ldr	r3, [pc, #332]	; (800d158 <Vset_data_Refresh+0x280>)
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	3301      	adds	r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	4b51      	ldr	r3, [pc, #324]	; (800d158 <Vset_data_Refresh+0x280>)
 800d014:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800d016:	4b50      	ldr	r3, [pc, #320]	; (800d158 <Vset_data_Refresh+0x280>)
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	001a      	movs	r2, r3
 800d01c:	4b4f      	ldr	r3, [pc, #316]	; (800d15c <Vset_data_Refresh+0x284>)
 800d01e:	2139      	movs	r1, #57	; 0x39
 800d020:	5499      	strb	r1, [r3, r2]
 800d022:	e012      	b.n	800d04a <Vset_data_Refresh+0x172>

			}
			else
			{
				Cursor_Position++;
 800d024:	4b4c      	ldr	r3, [pc, #304]	; (800d158 <Vset_data_Refresh+0x280>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	3301      	adds	r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	4b4a      	ldr	r3, [pc, #296]	; (800d158 <Vset_data_Refresh+0x280>)
 800d02e:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='0';
 800d030:	4b49      	ldr	r3, [pc, #292]	; (800d158 <Vset_data_Refresh+0x280>)
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	001a      	movs	r2, r3
 800d036:	4b49      	ldr	r3, [pc, #292]	; (800d15c <Vset_data_Refresh+0x284>)
 800d038:	2130      	movs	r1, #48	; 0x30
 800d03a:	5499      	strb	r1, [r3, r2]
 800d03c:	e005      	b.n	800d04a <Vset_data_Refresh+0x172>
			}
		}
		else String_Voltage[Cursor_Position]='0';
 800d03e:	4b46      	ldr	r3, [pc, #280]	; (800d158 <Vset_data_Refresh+0x280>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	001a      	movs	r2, r3
 800d044:	4b45      	ldr	r3, [pc, #276]	; (800d15c <Vset_data_Refresh+0x284>)
 800d046:	2130      	movs	r1, #48	; 0x30
 800d048:	5499      	strb	r1, [r3, r2]
	}
	if(String_Voltage[Cursor_Position]>'9')
 800d04a:	4b43      	ldr	r3, [pc, #268]	; (800d158 <Vset_data_Refresh+0x280>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	001a      	movs	r2, r3
 800d050:	4b42      	ldr	r3, [pc, #264]	; (800d15c <Vset_data_Refresh+0x284>)
 800d052:	5c9b      	ldrb	r3, [r3, r2]
 800d054:	2b39      	cmp	r3, #57	; 0x39
 800d056:	d94d      	bls.n	800d0f4 <Vset_data_Refresh+0x21c>
	{
		/*进位处理*/
		if(Cursor_Position!=0)
 800d058:	4b3f      	ldr	r3, [pc, #252]	; (800d158 <Vset_data_Refresh+0x280>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d03f      	beq.n	800d0e0 <Vset_data_Refresh+0x208>
		{
			String_Voltage[Cursor_Position]='0';
 800d060:	4b3d      	ldr	r3, [pc, #244]	; (800d158 <Vset_data_Refresh+0x280>)
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	001a      	movs	r2, r3
 800d066:	4b3d      	ldr	r3, [pc, #244]	; (800d15c <Vset_data_Refresh+0x284>)
 800d068:	2130      	movs	r1, #48	; 0x30
 800d06a:	5499      	strb	r1, [r3, r2]
			Cursor_Position--;
 800d06c:	4b3a      	ldr	r3, [pc, #232]	; (800d158 <Vset_data_Refresh+0x280>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	3b01      	subs	r3, #1
 800d072:	b2da      	uxtb	r2, r3
 800d074:	4b38      	ldr	r3, [pc, #224]	; (800d158 <Vset_data_Refresh+0x280>)
 800d076:	701a      	strb	r2, [r3, #0]
			String_Voltage[Cursor_Position]++;
 800d078:	4b37      	ldr	r3, [pc, #220]	; (800d158 <Vset_data_Refresh+0x280>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	4a37      	ldr	r2, [pc, #220]	; (800d15c <Vset_data_Refresh+0x284>)
 800d07e:	5cd2      	ldrb	r2, [r2, r3]
 800d080:	3201      	adds	r2, #1
 800d082:	b2d1      	uxtb	r1, r2
 800d084:	4a35      	ldr	r2, [pc, #212]	; (800d15c <Vset_data_Refresh+0x284>)
 800d086:	54d1      	strb	r1, [r2, r3]
			if(String_Voltage[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800d088:	4b33      	ldr	r3, [pc, #204]	; (800d158 <Vset_data_Refresh+0x280>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	001a      	movs	r2, r3
 800d08e:	4b33      	ldr	r3, [pc, #204]	; (800d15c <Vset_data_Refresh+0x284>)
 800d090:	5c9b      	ldrb	r3, [r3, r2]
 800d092:	2b39      	cmp	r3, #57	; 0x39
 800d094:	d91d      	bls.n	800d0d2 <Vset_data_Refresh+0x1fa>
 800d096:	4b30      	ldr	r3, [pc, #192]	; (800d158 <Vset_data_Refresh+0x280>)
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d019      	beq.n	800d0d2 <Vset_data_Refresh+0x1fa>
			{
				String_Voltage[Cursor_Position]='0';
 800d09e:	4b2e      	ldr	r3, [pc, #184]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	001a      	movs	r2, r3
 800d0a4:	4b2d      	ldr	r3, [pc, #180]	; (800d15c <Vset_data_Refresh+0x284>)
 800d0a6:	2130      	movs	r1, #48	; 0x30
 800d0a8:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800d0aa:	4b2b      	ldr	r3, [pc, #172]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	4b29      	ldr	r3, [pc, #164]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0b4:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]++;
 800d0b6:	4b28      	ldr	r3, [pc, #160]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	4a28      	ldr	r2, [pc, #160]	; (800d15c <Vset_data_Refresh+0x284>)
 800d0bc:	5cd2      	ldrb	r2, [r2, r3]
 800d0be:	3201      	adds	r2, #1
 800d0c0:	b2d1      	uxtb	r1, r2
 800d0c2:	4a26      	ldr	r2, [pc, #152]	; (800d15c <Vset_data_Refresh+0x284>)
 800d0c4:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d0c6:	4b24      	ldr	r3, [pc, #144]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	4b22      	ldr	r3, [pc, #136]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0d0:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d0d2:	4b21      	ldr	r3, [pc, #132]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	4b1f      	ldr	r3, [pc, #124]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0dc:	701a      	strb	r2, [r3, #0]
 800d0de:	e009      	b.n	800d0f4 <Vset_data_Refresh+0x21c>
		}
		else if(Cursor_Position==0)
 800d0e0:	4b1d      	ldr	r3, [pc, #116]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d105      	bne.n	800d0f4 <Vset_data_Refresh+0x21c>
		{
			String_Voltage[Cursor_Position]='9';
 800d0e8:	4b1b      	ldr	r3, [pc, #108]	; (800d158 <Vset_data_Refresh+0x280>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	001a      	movs	r2, r3
 800d0ee:	4b1b      	ldr	r3, [pc, #108]	; (800d15c <Vset_data_Refresh+0x284>)
 800d0f0:	2139      	movs	r1, #57	; 0x39
 800d0f2:	5499      	strb	r1, [r3, r2]
		}

	}

	if(Inner_Mode==ENABLE)
 800d0f4:	4b1b      	ldr	r3, [pc, #108]	; (800d164 <Vset_data_Refresh+0x28c>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d12a      	bne.n	800d152 <Vset_data_Refresh+0x27a>
	{
		/*确认设定电压，发送给mini board*/
		Set_Voltage = String_To_Float(String_Voltage)*100;
 800d0fc:	4b17      	ldr	r3, [pc, #92]	; (800d15c <Vset_data_Refresh+0x284>)
 800d0fe:	0018      	movs	r0, r3
 800d100:	f001 f8a2 	bl	800e248 <String_To_Float>
 800d104:	1c03      	adds	r3, r0, #0
 800d106:	4918      	ldr	r1, [pc, #96]	; (800d168 <Vset_data_Refresh+0x290>)
 800d108:	1c18      	adds	r0, r3, #0
 800d10a:	f7f3 fda9 	bl	8000c60 <__aeabi_fmul>
 800d10e:	1c03      	adds	r3, r0, #0
 800d110:	1c18      	adds	r0, r3, #0
 800d112:	f7f3 fa09 	bl	8000528 <__aeabi_f2uiz>
 800d116:	0003      	movs	r3, r0
 800d118:	b29a      	uxth	r2, r3
 800d11a:	4b14      	ldr	r3, [pc, #80]	; (800d16c <Vset_data_Refresh+0x294>)
 800d11c:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 14900) Set_Voltage = 14900;//150V
 800d11e:	4b13      	ldr	r3, [pc, #76]	; (800d16c <Vset_data_Refresh+0x294>)
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	4a13      	ldr	r2, [pc, #76]	; (800d170 <Vset_data_Refresh+0x298>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d902      	bls.n	800d12e <Vset_data_Refresh+0x256>
 800d128:	4b10      	ldr	r3, [pc, #64]	; (800d16c <Vset_data_Refresh+0x294>)
 800d12a:	4a11      	ldr	r2, [pc, #68]	; (800d170 <Vset_data_Refresh+0x298>)
 800d12c:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage <100||Set_Voltage==100)	Set_Voltage=100;
 800d12e:	4b0f      	ldr	r3, [pc, #60]	; (800d16c <Vset_data_Refresh+0x294>)
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	2b63      	cmp	r3, #99	; 0x63
 800d134:	d903      	bls.n	800d13e <Vset_data_Refresh+0x266>
 800d136:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <Vset_data_Refresh+0x294>)
 800d138:	881b      	ldrh	r3, [r3, #0]
 800d13a:	2b64      	cmp	r3, #100	; 0x64
 800d13c:	d102      	bne.n	800d144 <Vset_data_Refresh+0x26c>
 800d13e:	4b0b      	ldr	r3, [pc, #44]	; (800d16c <Vset_data_Refresh+0x294>)
 800d140:	2264      	movs	r2, #100	; 0x64
 800d142:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,4,Set_Voltage);
 800d144:	4b09      	ldr	r3, [pc, #36]	; (800d16c <Vset_data_Refresh+0x294>)
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	001a      	movs	r2, r3
 800d14a:	2104      	movs	r1, #4
 800d14c:	2001      	movs	r0, #1
 800d14e:	f7ff fb6d 	bl	800c82c <DAC_Cmd_send>

	}

}
 800d152:	46c0      	nop			; (mov r8, r8)
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20003976 	.word	0x20003976
 800d15c:	2000305c 	.word	0x2000305c
 800d160:	20003378 	.word	0x20003378
 800d164:	2000396e 	.word	0x2000396e
 800d168:	42c80000 	.word	0x42c80000
 800d16c:	20002fda 	.word	0x20002fda
 800d170:	00003a34 	.word	0x00003a34

0800d174 <Iset_data_Refresh>:


static void Iset_data_Refresh(void)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	af00      	add	r7, sp, #0
	String_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800d178:	4ba1      	ldr	r3, [pc, #644]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	3b09      	subs	r3, #9
 800d17e:	4aa1      	ldr	r2, [pc, #644]	; (800d404 <Iset_data_Refresh+0x290>)
 800d180:	5cd1      	ldrb	r1, [r2, r3]
 800d182:	4ba1      	ldr	r3, [pc, #644]	; (800d408 <Iset_data_Refresh+0x294>)
 800d184:	69db      	ldr	r3, [r3, #28]
 800d186:	b2da      	uxtb	r2, r3
 800d188:	4b9d      	ldr	r3, [pc, #628]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	3b09      	subs	r3, #9
 800d18e:	188a      	adds	r2, r1, r2
 800d190:	b2d1      	uxtb	r1, r2
 800d192:	4a9c      	ldr	r2, [pc, #624]	; (800d404 <Iset_data_Refresh+0x290>)
 800d194:	54d1      	strb	r1, [r2, r3]
	if(String_Current[Cursor_Position-9]<'0')//退位
 800d196:	4b9a      	ldr	r3, [pc, #616]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	3b09      	subs	r3, #9
 800d19c:	4a99      	ldr	r2, [pc, #612]	; (800d404 <Iset_data_Refresh+0x290>)
 800d19e:	5cd3      	ldrb	r3, [r2, r3]
 800d1a0:	2b2f      	cmp	r3, #47	; 0x2f
 800d1a2:	d900      	bls.n	800d1a6 <Iset_data_Refresh+0x32>
 800d1a4:	e0a3      	b.n	800d2ee <Iset_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800d1a6:	4b96      	ldr	r3, [pc, #600]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	2b0b      	cmp	r3, #11
 800d1ac:	d165      	bne.n	800d27a <Iset_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d1ae:	4b94      	ldr	r3, [pc, #592]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	4b92      	ldr	r3, [pc, #584]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1b8:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d1ba:	4b91      	ldr	r3, [pc, #580]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	3b09      	subs	r3, #9
 800d1c0:	4a90      	ldr	r2, [pc, #576]	; (800d404 <Iset_data_Refresh+0x290>)
 800d1c2:	5cd3      	ldrb	r3, [r2, r3]
 800d1c4:	2b30      	cmp	r3, #48	; 0x30
 800d1c6:	d915      	bls.n	800d1f4 <Iset_data_Refresh+0x80>
			{
				String_Current[Cursor_Position-9]--;
 800d1c8:	4b8d      	ldr	r3, [pc, #564]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	3b09      	subs	r3, #9
 800d1ce:	4a8d      	ldr	r2, [pc, #564]	; (800d404 <Iset_data_Refresh+0x290>)
 800d1d0:	5cd2      	ldrb	r2, [r2, r3]
 800d1d2:	3a01      	subs	r2, #1
 800d1d4:	b2d1      	uxtb	r1, r2
 800d1d6:	4a8b      	ldr	r2, [pc, #556]	; (800d404 <Iset_data_Refresh+0x290>)
 800d1d8:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d1da:	4b89      	ldr	r3, [pc, #548]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	4b87      	ldr	r3, [pc, #540]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1e4:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d1e6:	4b86      	ldr	r3, [pc, #536]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	3b09      	subs	r3, #9
 800d1ec:	4a85      	ldr	r2, [pc, #532]	; (800d404 <Iset_data_Refresh+0x290>)
 800d1ee:	2139      	movs	r1, #57	; 0x39
 800d1f0:	54d1      	strb	r1, [r2, r3]
 800d1f2:	e07c      	b.n	800d2ee <Iset_data_Refresh+0x17a>

			}
			else if(String_Current[Cursor_Position-9]=='0')
 800d1f4:	4b82      	ldr	r3, [pc, #520]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	3b09      	subs	r3, #9
 800d1fa:	4a82      	ldr	r2, [pc, #520]	; (800d404 <Iset_data_Refresh+0x290>)
 800d1fc:	5cd3      	ldrb	r3, [r2, r3]
 800d1fe:	2b30      	cmp	r3, #48	; 0x30
 800d200:	d175      	bne.n	800d2ee <Iset_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800d202:	4b7f      	ldr	r3, [pc, #508]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	3b01      	subs	r3, #1
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	4b7d      	ldr	r3, [pc, #500]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d20c:	701a      	strb	r2, [r3, #0]
				if(String_Current[Cursor_Position-9]>'0')
 800d20e:	4b7c      	ldr	r3, [pc, #496]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	3b09      	subs	r3, #9
 800d214:	4a7b      	ldr	r2, [pc, #492]	; (800d404 <Iset_data_Refresh+0x290>)
 800d216:	5cd3      	ldrb	r3, [r2, r3]
 800d218:	2b30      	cmp	r3, #48	; 0x30
 800d21a:	d921      	bls.n	800d260 <Iset_data_Refresh+0xec>
				{
					String_Current[Cursor_Position-9]--;
 800d21c:	4b78      	ldr	r3, [pc, #480]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	3b09      	subs	r3, #9
 800d222:	4a78      	ldr	r2, [pc, #480]	; (800d404 <Iset_data_Refresh+0x290>)
 800d224:	5cd2      	ldrb	r2, [r2, r3]
 800d226:	3a01      	subs	r2, #1
 800d228:	b2d1      	uxtb	r1, r2
 800d22a:	4a76      	ldr	r2, [pc, #472]	; (800d404 <Iset_data_Refresh+0x290>)
 800d22c:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d22e:	4b74      	ldr	r3, [pc, #464]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	3301      	adds	r3, #1
 800d234:	b2da      	uxtb	r2, r3
 800d236:	4b72      	ldr	r3, [pc, #456]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d238:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d23a:	4b71      	ldr	r3, [pc, #452]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	3b09      	subs	r3, #9
 800d240:	4a70      	ldr	r2, [pc, #448]	; (800d404 <Iset_data_Refresh+0x290>)
 800d242:	2139      	movs	r1, #57	; 0x39
 800d244:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d246:	4b6e      	ldr	r3, [pc, #440]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	3301      	adds	r3, #1
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4b6c      	ldr	r3, [pc, #432]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d250:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d252:	4b6b      	ldr	r3, [pc, #428]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	3b09      	subs	r3, #9
 800d258:	4a6a      	ldr	r2, [pc, #424]	; (800d404 <Iset_data_Refresh+0x290>)
 800d25a:	2139      	movs	r1, #57	; 0x39
 800d25c:	54d1      	strb	r1, [r2, r3]
 800d25e:	e046      	b.n	800d2ee <Iset_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800d260:	4b67      	ldr	r3, [pc, #412]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	3302      	adds	r3, #2
 800d266:	b2da      	uxtb	r2, r3
 800d268:	4b65      	ldr	r3, [pc, #404]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d26a:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='0';
 800d26c:	4b64      	ldr	r3, [pc, #400]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	3b09      	subs	r3, #9
 800d272:	4a64      	ldr	r2, [pc, #400]	; (800d404 <Iset_data_Refresh+0x290>)
 800d274:	2130      	movs	r1, #48	; 0x30
 800d276:	54d1      	strb	r1, [r2, r3]
 800d278:	e039      	b.n	800d2ee <Iset_data_Refresh+0x17a>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800d27a:	4b61      	ldr	r3, [pc, #388]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b0a      	cmp	r3, #10
 800d280:	d12f      	bne.n	800d2e2 <Iset_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800d282:	4b5f      	ldr	r3, [pc, #380]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	3b01      	subs	r3, #1
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	4b5d      	ldr	r3, [pc, #372]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d28c:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d28e:	4b5c      	ldr	r3, [pc, #368]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	3b09      	subs	r3, #9
 800d294:	4a5b      	ldr	r2, [pc, #364]	; (800d404 <Iset_data_Refresh+0x290>)
 800d296:	5cd3      	ldrb	r3, [r2, r3]
 800d298:	2b30      	cmp	r3, #48	; 0x30
 800d29a:	d915      	bls.n	800d2c8 <Iset_data_Refresh+0x154>
			{
				String_Current[Cursor_Position-9]--;
 800d29c:	4b58      	ldr	r3, [pc, #352]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	3b09      	subs	r3, #9
 800d2a2:	4a58      	ldr	r2, [pc, #352]	; (800d404 <Iset_data_Refresh+0x290>)
 800d2a4:	5cd2      	ldrb	r2, [r2, r3]
 800d2a6:	3a01      	subs	r2, #1
 800d2a8:	b2d1      	uxtb	r1, r2
 800d2aa:	4a56      	ldr	r2, [pc, #344]	; (800d404 <Iset_data_Refresh+0x290>)
 800d2ac:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d2ae:	4b54      	ldr	r3, [pc, #336]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	4b52      	ldr	r3, [pc, #328]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2b8:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d2ba:	4b51      	ldr	r3, [pc, #324]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	3b09      	subs	r3, #9
 800d2c0:	4a50      	ldr	r2, [pc, #320]	; (800d404 <Iset_data_Refresh+0x290>)
 800d2c2:	2139      	movs	r1, #57	; 0x39
 800d2c4:	54d1      	strb	r1, [r2, r3]
 800d2c6:	e012      	b.n	800d2ee <Iset_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800d2c8:	4b4d      	ldr	r3, [pc, #308]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	4b4b      	ldr	r3, [pc, #300]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2d2:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='0';
 800d2d4:	4b4a      	ldr	r3, [pc, #296]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	3b09      	subs	r3, #9
 800d2da:	4a4a      	ldr	r2, [pc, #296]	; (800d404 <Iset_data_Refresh+0x290>)
 800d2dc:	2130      	movs	r1, #48	; 0x30
 800d2de:	54d1      	strb	r1, [r2, r3]
 800d2e0:	e005      	b.n	800d2ee <Iset_data_Refresh+0x17a>
			}
		}
		else String_Current[Cursor_Position-9]='0';
 800d2e2:	4b47      	ldr	r3, [pc, #284]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	3b09      	subs	r3, #9
 800d2e8:	4a46      	ldr	r2, [pc, #280]	; (800d404 <Iset_data_Refresh+0x290>)
 800d2ea:	2130      	movs	r1, #48	; 0x30
 800d2ec:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Current[Cursor_Position-9]>'9')
 800d2ee:	4b44      	ldr	r3, [pc, #272]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	3b09      	subs	r3, #9
 800d2f4:	4a43      	ldr	r2, [pc, #268]	; (800d404 <Iset_data_Refresh+0x290>)
 800d2f6:	5cd3      	ldrb	r3, [r2, r3]
 800d2f8:	2b39      	cmp	r3, #57	; 0x39
 800d2fa:	d94f      	bls.n	800d39c <Iset_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800d2fc:	4b40      	ldr	r3, [pc, #256]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d041      	beq.n	800d388 <Iset_data_Refresh+0x214>
		{
			String_Current[Cursor_Position-9]='0';
 800d304:	4b3e      	ldr	r3, [pc, #248]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	3b09      	subs	r3, #9
 800d30a:	4a3e      	ldr	r2, [pc, #248]	; (800d404 <Iset_data_Refresh+0x290>)
 800d30c:	2130      	movs	r1, #48	; 0x30
 800d30e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d310:	4b3b      	ldr	r3, [pc, #236]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	3b01      	subs	r3, #1
 800d316:	b2da      	uxtb	r2, r3
 800d318:	4b39      	ldr	r3, [pc, #228]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d31a:	701a      	strb	r2, [r3, #0]
			String_Current[Cursor_Position-9]++;
 800d31c:	4b38      	ldr	r3, [pc, #224]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	3b09      	subs	r3, #9
 800d322:	4a38      	ldr	r2, [pc, #224]	; (800d404 <Iset_data_Refresh+0x290>)
 800d324:	5cd2      	ldrb	r2, [r2, r3]
 800d326:	3201      	adds	r2, #1
 800d328:	b2d1      	uxtb	r1, r2
 800d32a:	4a36      	ldr	r2, [pc, #216]	; (800d404 <Iset_data_Refresh+0x290>)
 800d32c:	54d1      	strb	r1, [r2, r3]
			if(String_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800d32e:	4b34      	ldr	r3, [pc, #208]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	3b09      	subs	r3, #9
 800d334:	4a33      	ldr	r2, [pc, #204]	; (800d404 <Iset_data_Refresh+0x290>)
 800d336:	5cd3      	ldrb	r3, [r2, r3]
 800d338:	2b39      	cmp	r3, #57	; 0x39
 800d33a:	d91e      	bls.n	800d37a <Iset_data_Refresh+0x206>
 800d33c:	4b30      	ldr	r3, [pc, #192]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d01a      	beq.n	800d37a <Iset_data_Refresh+0x206>
			{
				String_Current[Cursor_Position-9]='0';
 800d344:	4b2e      	ldr	r3, [pc, #184]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	3b09      	subs	r3, #9
 800d34a:	4a2e      	ldr	r2, [pc, #184]	; (800d404 <Iset_data_Refresh+0x290>)
 800d34c:	2130      	movs	r1, #48	; 0x30
 800d34e:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d350:	4b2b      	ldr	r3, [pc, #172]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	3b01      	subs	r3, #1
 800d356:	b2da      	uxtb	r2, r3
 800d358:	4b29      	ldr	r3, [pc, #164]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d35a:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]++;
 800d35c:	4b28      	ldr	r3, [pc, #160]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	3b09      	subs	r3, #9
 800d362:	4a28      	ldr	r2, [pc, #160]	; (800d404 <Iset_data_Refresh+0x290>)
 800d364:	5cd2      	ldrb	r2, [r2, r3]
 800d366:	3201      	adds	r2, #1
 800d368:	b2d1      	uxtb	r1, r2
 800d36a:	4a26      	ldr	r2, [pc, #152]	; (800d404 <Iset_data_Refresh+0x290>)
 800d36c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d36e:	4b24      	ldr	r3, [pc, #144]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	b2da      	uxtb	r2, r3
 800d376:	4b22      	ldr	r3, [pc, #136]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d378:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d37a:	4b21      	ldr	r3, [pc, #132]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	3301      	adds	r3, #1
 800d380:	b2da      	uxtb	r2, r3
 800d382:	4b1f      	ldr	r3, [pc, #124]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d384:	701a      	strb	r2, [r3, #0]
 800d386:	e009      	b.n	800d39c <Iset_data_Refresh+0x228>
		}
		else if(Cursor_Position==0)
 800d388:	4b1d      	ldr	r3, [pc, #116]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d105      	bne.n	800d39c <Iset_data_Refresh+0x228>
		{
			String_Current[Cursor_Position-9]='9';
 800d390:	4b1b      	ldr	r3, [pc, #108]	; (800d400 <Iset_data_Refresh+0x28c>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	3b09      	subs	r3, #9
 800d396:	4a1b      	ldr	r2, [pc, #108]	; (800d404 <Iset_data_Refresh+0x290>)
 800d398:	2139      	movs	r1, #57	; 0x39
 800d39a:	54d1      	strb	r1, [r2, r3]
		}

	}
	if(Inner_Mode==ENABLE)
 800d39c:	4b1b      	ldr	r3, [pc, #108]	; (800d40c <Iset_data_Refresh+0x298>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d12a      	bne.n	800d3fa <Iset_data_Refresh+0x286>
	{
		/*确认设定电压，发送给mini board*/
		Set_Current = String_To_Float(String_Current)*100;
 800d3a4:	4b17      	ldr	r3, [pc, #92]	; (800d404 <Iset_data_Refresh+0x290>)
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	f000 ff4e 	bl	800e248 <String_To_Float>
 800d3ac:	1c03      	adds	r3, r0, #0
 800d3ae:	4918      	ldr	r1, [pc, #96]	; (800d410 <Iset_data_Refresh+0x29c>)
 800d3b0:	1c18      	adds	r0, r3, #0
 800d3b2:	f7f3 fc55 	bl	8000c60 <__aeabi_fmul>
 800d3b6:	1c03      	adds	r3, r0, #0
 800d3b8:	1c18      	adds	r0, r3, #0
 800d3ba:	f7f3 f8b5 	bl	8000528 <__aeabi_f2uiz>
 800d3be:	0003      	movs	r3, r0
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	4b14      	ldr	r3, [pc, #80]	; (800d414 <Iset_data_Refresh+0x2a0>)
 800d3c4:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 4900) Set_Current = 4900;//150V
 800d3c6:	4b13      	ldr	r3, [pc, #76]	; (800d414 <Iset_data_Refresh+0x2a0>)
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	4a13      	ldr	r2, [pc, #76]	; (800d418 <Iset_data_Refresh+0x2a4>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d902      	bls.n	800d3d6 <Iset_data_Refresh+0x262>
 800d3d0:	4b10      	ldr	r3, [pc, #64]	; (800d414 <Iset_data_Refresh+0x2a0>)
 800d3d2:	4a11      	ldr	r2, [pc, #68]	; (800d418 <Iset_data_Refresh+0x2a4>)
 800d3d4:	801a      	strh	r2, [r3, #0]
		if(Set_Current <100||Set_Current==100)	Set_Current=100;
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <Iset_data_Refresh+0x2a0>)
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	2b63      	cmp	r3, #99	; 0x63
 800d3dc:	d903      	bls.n	800d3e6 <Iset_data_Refresh+0x272>
 800d3de:	4b0d      	ldr	r3, [pc, #52]	; (800d414 <Iset_data_Refresh+0x2a0>)
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	2b64      	cmp	r3, #100	; 0x64
 800d3e4:	d102      	bne.n	800d3ec <Iset_data_Refresh+0x278>
 800d3e6:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <Iset_data_Refresh+0x2a0>)
 800d3e8:	2264      	movs	r2, #100	; 0x64
 800d3ea:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,5,Set_Current);
 800d3ec:	4b09      	ldr	r3, [pc, #36]	; (800d414 <Iset_data_Refresh+0x2a0>)
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	001a      	movs	r2, r3
 800d3f2:	2105      	movs	r1, #5
 800d3f4:	2001      	movs	r0, #1
 800d3f6:	f7ff fa19 	bl	800c82c <DAC_Cmd_send>

	}

}
 800d3fa:	46c0      	nop			; (mov r8, r8)
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	20003976 	.word	0x20003976
 800d404:	20003064 	.word	0x20003064
 800d408:	20003378 	.word	0x20003378
 800d40c:	2000396e 	.word	0x2000396e
 800d410:	42c80000 	.word	0x42c80000
 800d414:	20002fdc 	.word	0x20002fdc
 800d418:	00001324 	.word	0x00001324

0800d41c <VRate_data_Refresh>:



static void VRate_data_Refresh(void)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	af00      	add	r7, sp, #0
	String_V_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800d420:	4bdc      	ldr	r3, [pc, #880]	; (800d794 <VRate_data_Refresh+0x378>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	3b06      	subs	r3, #6
 800d426:	4adc      	ldr	r2, [pc, #880]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d428:	5cd1      	ldrb	r1, [r2, r3]
 800d42a:	4bdc      	ldr	r3, [pc, #880]	; (800d79c <VRate_data_Refresh+0x380>)
 800d42c:	69db      	ldr	r3, [r3, #28]
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	4bd8      	ldr	r3, [pc, #864]	; (800d794 <VRate_data_Refresh+0x378>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	3b06      	subs	r3, #6
 800d436:	188a      	adds	r2, r1, r2
 800d438:	b2d1      	uxtb	r1, r2
 800d43a:	4ad7      	ldr	r2, [pc, #860]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d43c:	54d1      	strb	r1, [r2, r3]
	/*退位处理*/
	if(String_V_Rate[Cursor_Position-6]<'0')
 800d43e:	4bd5      	ldr	r3, [pc, #852]	; (800d794 <VRate_data_Refresh+0x378>)
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	3b06      	subs	r3, #6
 800d444:	4ad4      	ldr	r2, [pc, #848]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d446:	5cd3      	ldrb	r3, [r2, r3]
 800d448:	2b2f      	cmp	r3, #47	; 0x2f
 800d44a:	d900      	bls.n	800d44e <VRate_data_Refresh+0x32>
 800d44c:	e0c2      	b.n	800d5d4 <VRate_data_Refresh+0x1b8>
	{

		/*小数第二位退位*/
		if(Cursor_Position==3+6)
 800d44e:	4bd1      	ldr	r3, [pc, #836]	; (800d794 <VRate_data_Refresh+0x378>)
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	2b09      	cmp	r3, #9
 800d454:	d172      	bne.n	800d53c <VRate_data_Refresh+0x120>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d456:	4bcf      	ldr	r3, [pc, #828]	; (800d794 <VRate_data_Refresh+0x378>)
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	4bcd      	ldr	r3, [pc, #820]	; (800d794 <VRate_data_Refresh+0x378>)
 800d460:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')
 800d462:	4bcc      	ldr	r3, [pc, #816]	; (800d794 <VRate_data_Refresh+0x378>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	3b06      	subs	r3, #6
 800d468:	4acb      	ldr	r2, [pc, #812]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d46a:	5cd3      	ldrb	r3, [r2, r3]
 800d46c:	2b30      	cmp	r3, #48	; 0x30
 800d46e:	d915      	bls.n	800d49c <VRate_data_Refresh+0x80>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d470:	4bc8      	ldr	r3, [pc, #800]	; (800d794 <VRate_data_Refresh+0x378>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	3b06      	subs	r3, #6
 800d476:	4ac8      	ldr	r2, [pc, #800]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d478:	5cd2      	ldrb	r2, [r2, r3]
 800d47a:	3a01      	subs	r2, #1
 800d47c:	b2d1      	uxtb	r1, r2
 800d47e:	4ac6      	ldr	r2, [pc, #792]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d480:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d482:	4bc4      	ldr	r3, [pc, #784]	; (800d794 <VRate_data_Refresh+0x378>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	3301      	adds	r3, #1
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	4bc2      	ldr	r3, [pc, #776]	; (800d794 <VRate_data_Refresh+0x378>)
 800d48c:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d48e:	4bc1      	ldr	r3, [pc, #772]	; (800d794 <VRate_data_Refresh+0x378>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	3b06      	subs	r3, #6
 800d494:	4ac0      	ldr	r2, [pc, #768]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d496:	2139      	movs	r1, #57	; 0x39
 800d498:	54d1      	strb	r1, [r2, r3]
 800d49a:	e09b      	b.n	800d5d4 <VRate_data_Refresh+0x1b8>

			}
			else if(String_V_Rate[Cursor_Position-6]=='0')
 800d49c:	4bbd      	ldr	r3, [pc, #756]	; (800d794 <VRate_data_Refresh+0x378>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	3b06      	subs	r3, #6
 800d4a2:	4abd      	ldr	r2, [pc, #756]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d4a4:	5cd3      	ldrb	r3, [r2, r3]
 800d4a6:	2b30      	cmp	r3, #48	; 0x30
 800d4a8:	d000      	beq.n	800d4ac <VRate_data_Refresh+0x90>
 800d4aa:	e093      	b.n	800d5d4 <VRate_data_Refresh+0x1b8>
			{
				/*否则再看个位是否大于0*/
				Cursor_Position--;
 800d4ac:	4bb9      	ldr	r3, [pc, #740]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	4bb7      	ldr	r3, [pc, #732]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4b6:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d4b8:	4bb6      	ldr	r3, [pc, #728]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	4bb4      	ldr	r3, [pc, #720]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4c2:	701a      	strb	r2, [r3, #0]
				if(String_V_Rate[Cursor_Position-6]>'0')
 800d4c4:	4bb3      	ldr	r3, [pc, #716]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	3b06      	subs	r3, #6
 800d4ca:	4ab3      	ldr	r2, [pc, #716]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d4cc:	5cd3      	ldrb	r3, [r2, r3]
 800d4ce:	2b30      	cmp	r3, #48	; 0x30
 800d4d0:	d927      	bls.n	800d522 <VRate_data_Refresh+0x106>
				{
					String_V_Rate[Cursor_Position-6]--;
 800d4d2:	4bb0      	ldr	r3, [pc, #704]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	3b06      	subs	r3, #6
 800d4d8:	4aaf      	ldr	r2, [pc, #700]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d4da:	5cd2      	ldrb	r2, [r2, r3]
 800d4dc:	3a01      	subs	r2, #1
 800d4de:	b2d1      	uxtb	r1, r2
 800d4e0:	4aad      	ldr	r2, [pc, #692]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d4e2:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d4e4:	4bab      	ldr	r3, [pc, #684]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	4ba9      	ldr	r3, [pc, #676]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4ee:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d4f0:	4ba8      	ldr	r3, [pc, #672]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	4ba6      	ldr	r3, [pc, #664]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4fa:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数一位
 800d4fc:	4ba5      	ldr	r3, [pc, #660]	; (800d794 <VRate_data_Refresh+0x378>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	3b06      	subs	r3, #6
 800d502:	4aa5      	ldr	r2, [pc, #660]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d504:	2139      	movs	r1, #57	; 0x39
 800d506:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d508:	4ba2      	ldr	r3, [pc, #648]	; (800d794 <VRate_data_Refresh+0x378>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	3301      	adds	r3, #1
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	4ba0      	ldr	r3, [pc, #640]	; (800d794 <VRate_data_Refresh+0x378>)
 800d512:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数二位
 800d514:	4b9f      	ldr	r3, [pc, #636]	; (800d794 <VRate_data_Refresh+0x378>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	3b06      	subs	r3, #6
 800d51a:	4a9f      	ldr	r2, [pc, #636]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d51c:	2139      	movs	r1, #57	; 0x39
 800d51e:	54d1      	strb	r1, [r2, r3]
 800d520:	e058      	b.n	800d5d4 <VRate_data_Refresh+0x1b8>


				}
				else
				{
					Cursor_Position+=3;
 800d522:	4b9c      	ldr	r3, [pc, #624]	; (800d794 <VRate_data_Refresh+0x378>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	3303      	adds	r3, #3
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	4b9a      	ldr	r3, [pc, #616]	; (800d794 <VRate_data_Refresh+0x378>)
 800d52c:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';
 800d52e:	4b99      	ldr	r3, [pc, #612]	; (800d794 <VRate_data_Refresh+0x378>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	3b06      	subs	r3, #6
 800d534:	4a98      	ldr	r2, [pc, #608]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d536:	2130      	movs	r1, #48	; 0x30
 800d538:	54d1      	strb	r1, [r2, r3]
 800d53a:	e04b      	b.n	800d5d4 <VRate_data_Refresh+0x1b8>
				}
			}

		}
		/*小数第一位退位*/
		else if(Cursor_Position==2+6)
 800d53c:	4b95      	ldr	r3, [pc, #596]	; (800d794 <VRate_data_Refresh+0x378>)
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	2b08      	cmp	r3, #8
 800d542:	d141      	bne.n	800d5c8 <VRate_data_Refresh+0x1ac>
		{
			Cursor_Position--;
 800d544:	4b93      	ldr	r3, [pc, #588]	; (800d794 <VRate_data_Refresh+0x378>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	3b01      	subs	r3, #1
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	4b91      	ldr	r3, [pc, #580]	; (800d794 <VRate_data_Refresh+0x378>)
 800d54e:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d550:	4b90      	ldr	r3, [pc, #576]	; (800d794 <VRate_data_Refresh+0x378>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	3b01      	subs	r3, #1
 800d556:	b2da      	uxtb	r2, r3
 800d558:	4b8e      	ldr	r3, [pc, #568]	; (800d794 <VRate_data_Refresh+0x378>)
 800d55a:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')//个位
 800d55c:	4b8d      	ldr	r3, [pc, #564]	; (800d794 <VRate_data_Refresh+0x378>)
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	3b06      	subs	r3, #6
 800d562:	4a8d      	ldr	r2, [pc, #564]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d564:	5cd3      	ldrb	r3, [r2, r3]
 800d566:	2b30      	cmp	r3, #48	; 0x30
 800d568:	d91b      	bls.n	800d5a2 <VRate_data_Refresh+0x186>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d56a:	4b8a      	ldr	r3, [pc, #552]	; (800d794 <VRate_data_Refresh+0x378>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	3b06      	subs	r3, #6
 800d570:	4a89      	ldr	r2, [pc, #548]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d572:	5cd2      	ldrb	r2, [r2, r3]
 800d574:	3a01      	subs	r2, #1
 800d576:	b2d1      	uxtb	r1, r2
 800d578:	4a87      	ldr	r2, [pc, #540]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d57a:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d57c:	4b85      	ldr	r3, [pc, #532]	; (800d794 <VRate_data_Refresh+0x378>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	b2da      	uxtb	r2, r3
 800d584:	4b83      	ldr	r3, [pc, #524]	; (800d794 <VRate_data_Refresh+0x378>)
 800d586:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d588:	4b82      	ldr	r3, [pc, #520]	; (800d794 <VRate_data_Refresh+0x378>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	3301      	adds	r3, #1
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	4b80      	ldr	r3, [pc, #512]	; (800d794 <VRate_data_Refresh+0x378>)
 800d592:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d594:	4b7f      	ldr	r3, [pc, #508]	; (800d794 <VRate_data_Refresh+0x378>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	3b06      	subs	r3, #6
 800d59a:	4a7f      	ldr	r2, [pc, #508]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d59c:	2139      	movs	r1, #57	; 0x39
 800d59e:	54d1      	strb	r1, [r2, r3]
 800d5a0:	e018      	b.n	800d5d4 <VRate_data_Refresh+0x1b8>

			}
			else
			{
				Cursor_Position++;
 800d5a2:	4b7c      	ldr	r3, [pc, #496]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	4b7a      	ldr	r3, [pc, #488]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5ac:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d5ae:	4b79      	ldr	r3, [pc, #484]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	4b77      	ldr	r3, [pc, #476]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5b8:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='0';
 800d5ba:	4b76      	ldr	r3, [pc, #472]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	3b06      	subs	r3, #6
 800d5c0:	4a75      	ldr	r2, [pc, #468]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d5c2:	2130      	movs	r1, #48	; 0x30
 800d5c4:	54d1      	strb	r1, [r2, r3]
 800d5c6:	e005      	b.n	800d5d4 <VRate_data_Refresh+0x1b8>
			}
		}
		else String_V_Rate[Cursor_Position-6]='0';
 800d5c8:	4b72      	ldr	r3, [pc, #456]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	3b06      	subs	r3, #6
 800d5ce:	4a72      	ldr	r2, [pc, #456]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d5d0:	2130      	movs	r1, #48	; 0x30
 800d5d2:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_V_Rate[Cursor_Position-6]>'9')
 800d5d4:	4b6f      	ldr	r3, [pc, #444]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	3b06      	subs	r3, #6
 800d5da:	4a6f      	ldr	r2, [pc, #444]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d5dc:	5cd3      	ldrb	r3, [r2, r3]
 800d5de:	2b39      	cmp	r3, #57	; 0x39
 800d5e0:	d800      	bhi.n	800d5e4 <VRate_data_Refresh+0x1c8>
 800d5e2:	e0e7      	b.n	800d7b4 <VRate_data_Refresh+0x398>
	{

		if(Cursor_Position==2+6)
 800d5e4:	4b6b      	ldr	r3, [pc, #428]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	2b08      	cmp	r3, #8
 800d5ea:	d146      	bne.n	800d67a <VRate_data_Refresh+0x25e>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d5ec:	4b69      	ldr	r3, [pc, #420]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	3b06      	subs	r3, #6
 800d5f2:	4a69      	ldr	r2, [pc, #420]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d5f4:	2130      	movs	r1, #48	; 0x30
 800d5f6:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d5f8:	4b66      	ldr	r3, [pc, #408]	; (800d794 <VRate_data_Refresh+0x378>)
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	4b64      	ldr	r3, [pc, #400]	; (800d794 <VRate_data_Refresh+0x378>)
 800d602:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d604:	4b63      	ldr	r3, [pc, #396]	; (800d794 <VRate_data_Refresh+0x378>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	3b01      	subs	r3, #1
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	4b61      	ldr	r3, [pc, #388]	; (800d794 <VRate_data_Refresh+0x378>)
 800d60e:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d610:	4b60      	ldr	r3, [pc, #384]	; (800d794 <VRate_data_Refresh+0x378>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	3b06      	subs	r3, #6
 800d616:	4a60      	ldr	r2, [pc, #384]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d618:	5cd2      	ldrb	r2, [r2, r3]
 800d61a:	3201      	adds	r2, #1
 800d61c:	b2d1      	uxtb	r1, r2
 800d61e:	4a5e      	ldr	r2, [pc, #376]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d620:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//下一位也进位
 800d622:	4b5c      	ldr	r3, [pc, #368]	; (800d794 <VRate_data_Refresh+0x378>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	3b06      	subs	r3, #6
 800d628:	4a5b      	ldr	r2, [pc, #364]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d62a:	5cd3      	ldrb	r3, [r2, r3]
 800d62c:	2b39      	cmp	r3, #57	; 0x39
 800d62e:	d917      	bls.n	800d660 <VRate_data_Refresh+0x244>
			{
				String_V_Rate[Cursor_Position-6]='9';
 800d630:	4b58      	ldr	r3, [pc, #352]	; (800d794 <VRate_data_Refresh+0x378>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	3b06      	subs	r3, #6
 800d636:	4a58      	ldr	r2, [pc, #352]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d638:	2139      	movs	r1, #57	; 0x39
 800d63a:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d63c:	4b55      	ldr	r3, [pc, #340]	; (800d794 <VRate_data_Refresh+0x378>)
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	3301      	adds	r3, #1
 800d642:	b2da      	uxtb	r2, r3
 800d644:	4b53      	ldr	r3, [pc, #332]	; (800d794 <VRate_data_Refresh+0x378>)
 800d646:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d648:	4b52      	ldr	r3, [pc, #328]	; (800d794 <VRate_data_Refresh+0x378>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	3301      	adds	r3, #1
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	4b50      	ldr	r3, [pc, #320]	; (800d794 <VRate_data_Refresh+0x378>)
 800d652:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d654:	4b4f      	ldr	r3, [pc, #316]	; (800d794 <VRate_data_Refresh+0x378>)
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	3b06      	subs	r3, #6
 800d65a:	4a4f      	ldr	r2, [pc, #316]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d65c:	2139      	movs	r1, #57	; 0x39
 800d65e:	54d1      	strb	r1, [r2, r3]

			}
			Cursor_Position++;
 800d660:	4b4c      	ldr	r3, [pc, #304]	; (800d794 <VRate_data_Refresh+0x378>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	3301      	adds	r3, #1
 800d666:	b2da      	uxtb	r2, r3
 800d668:	4b4a      	ldr	r3, [pc, #296]	; (800d794 <VRate_data_Refresh+0x378>)
 800d66a:	701a      	strb	r2, [r3, #0]
			Cursor_Position++;
 800d66c:	4b49      	ldr	r3, [pc, #292]	; (800d794 <VRate_data_Refresh+0x378>)
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	3301      	adds	r3, #1
 800d672:	b2da      	uxtb	r2, r3
 800d674:	4b47      	ldr	r3, [pc, #284]	; (800d794 <VRate_data_Refresh+0x378>)
 800d676:	701a      	strb	r2, [r3, #0]
 800d678:	e09c      	b.n	800d7b4 <VRate_data_Refresh+0x398>
		}
		else if(Cursor_Position==3+6)
 800d67a:	4b46      	ldr	r3, [pc, #280]	; (800d794 <VRate_data_Refresh+0x378>)
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b09      	cmp	r3, #9
 800d680:	d000      	beq.n	800d684 <VRate_data_Refresh+0x268>
 800d682:	e08d      	b.n	800d7a0 <VRate_data_Refresh+0x384>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d684:	4b43      	ldr	r3, [pc, #268]	; (800d794 <VRate_data_Refresh+0x378>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	3b06      	subs	r3, #6
 800d68a:	4a43      	ldr	r2, [pc, #268]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d68c:	2130      	movs	r1, #48	; 0x30
 800d68e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d690:	4b40      	ldr	r3, [pc, #256]	; (800d794 <VRate_data_Refresh+0x378>)
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	3b01      	subs	r3, #1
 800d696:	b2da      	uxtb	r2, r3
 800d698:	4b3e      	ldr	r3, [pc, #248]	; (800d794 <VRate_data_Refresh+0x378>)
 800d69a:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d69c:	4b3d      	ldr	r3, [pc, #244]	; (800d794 <VRate_data_Refresh+0x378>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	3b06      	subs	r3, #6
 800d6a2:	4a3d      	ldr	r2, [pc, #244]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d6a4:	5cd2      	ldrb	r2, [r2, r3]
 800d6a6:	3201      	adds	r2, #1
 800d6a8:	b2d1      	uxtb	r1, r2
 800d6aa:	4a3b      	ldr	r2, [pc, #236]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d6ac:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//小数一位也进位
 800d6ae:	4b39      	ldr	r3, [pc, #228]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	3b06      	subs	r3, #6
 800d6b4:	4a38      	ldr	r2, [pc, #224]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d6b6:	5cd3      	ldrb	r3, [r2, r3]
 800d6b8:	2b39      	cmp	r3, #57	; 0x39
 800d6ba:	d95e      	bls.n	800d77a <VRate_data_Refresh+0x35e>
			{
				Cursor_Position--;
 800d6bc:	4b35      	ldr	r3, [pc, #212]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	4b33      	ldr	r3, [pc, #204]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6c6:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d6c8:	4b32      	ldr	r3, [pc, #200]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	4b30      	ldr	r3, [pc, #192]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6d2:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]++;
 800d6d4:	4b2f      	ldr	r3, [pc, #188]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	3b06      	subs	r3, #6
 800d6da:	4a2f      	ldr	r2, [pc, #188]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d6dc:	5cd2      	ldrb	r2, [r2, r3]
 800d6de:	3201      	adds	r2, #1
 800d6e0:	b2d1      	uxtb	r1, r2
 800d6e2:	4a2d      	ldr	r2, [pc, #180]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d6e4:	54d1      	strb	r1, [r2, r3]
				if(String_V_Rate[Cursor_Position-6]>'9')//个位也进位
 800d6e6:	4b2b      	ldr	r3, [pc, #172]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	3b06      	subs	r3, #6
 800d6ec:	4a2a      	ldr	r2, [pc, #168]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d6ee:	5cd3      	ldrb	r3, [r2, r3]
 800d6f0:	2b39      	cmp	r3, #57	; 0x39
 800d6f2:	d924      	bls.n	800d73e <VRate_data_Refresh+0x322>
				{
					String_V_Rate[Cursor_Position-6]='9';
 800d6f4:	4b27      	ldr	r3, [pc, #156]	; (800d794 <VRate_data_Refresh+0x378>)
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	3b06      	subs	r3, #6
 800d6fa:	4a27      	ldr	r2, [pc, #156]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d6fc:	2139      	movs	r1, #57	; 0x39
 800d6fe:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d700:	4b24      	ldr	r3, [pc, #144]	; (800d794 <VRate_data_Refresh+0x378>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	3301      	adds	r3, #1
 800d706:	b2da      	uxtb	r2, r3
 800d708:	4b22      	ldr	r3, [pc, #136]	; (800d794 <VRate_data_Refresh+0x378>)
 800d70a:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d70c:	4b21      	ldr	r3, [pc, #132]	; (800d794 <VRate_data_Refresh+0x378>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	3301      	adds	r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	4b1f      	ldr	r3, [pc, #124]	; (800d794 <VRate_data_Refresh+0x378>)
 800d716:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d718:	4b1e      	ldr	r3, [pc, #120]	; (800d794 <VRate_data_Refresh+0x378>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	3b06      	subs	r3, #6
 800d71e:	4a1e      	ldr	r2, [pc, #120]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d720:	2139      	movs	r1, #57	; 0x39
 800d722:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d724:	4b1b      	ldr	r3, [pc, #108]	; (800d794 <VRate_data_Refresh+0x378>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	3301      	adds	r3, #1
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	4b19      	ldr	r3, [pc, #100]	; (800d794 <VRate_data_Refresh+0x378>)
 800d72e:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d730:	4b18      	ldr	r3, [pc, #96]	; (800d794 <VRate_data_Refresh+0x378>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	3b06      	subs	r3, #6
 800d736:	4a18      	ldr	r2, [pc, #96]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d738:	2139      	movs	r1, #57	; 0x39
 800d73a:	54d1      	strb	r1, [r2, r3]
 800d73c:	e01d      	b.n	800d77a <VRate_data_Refresh+0x35e>

				}
				else//个位正常进位，小数一位为0，小数二位
				{
					Cursor_Position++;
 800d73e:	4b15      	ldr	r3, [pc, #84]	; (800d794 <VRate_data_Refresh+0x378>)
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	3301      	adds	r3, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	4b13      	ldr	r3, [pc, #76]	; (800d794 <VRate_data_Refresh+0x378>)
 800d748:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d74a:	4b12      	ldr	r3, [pc, #72]	; (800d794 <VRate_data_Refresh+0x378>)
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	3301      	adds	r3, #1
 800d750:	b2da      	uxtb	r2, r3
 800d752:	4b10      	ldr	r3, [pc, #64]	; (800d794 <VRate_data_Refresh+0x378>)
 800d754:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数一位为0
 800d756:	4b0f      	ldr	r3, [pc, #60]	; (800d794 <VRate_data_Refresh+0x378>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	3b06      	subs	r3, #6
 800d75c:	4a0e      	ldr	r2, [pc, #56]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d75e:	2130      	movs	r1, #48	; 0x30
 800d760:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d762:	4b0c      	ldr	r3, [pc, #48]	; (800d794 <VRate_data_Refresh+0x378>)
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	3301      	adds	r3, #1
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	4b0a      	ldr	r3, [pc, #40]	; (800d794 <VRate_data_Refresh+0x378>)
 800d76c:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数二位为0
 800d76e:	4b09      	ldr	r3, [pc, #36]	; (800d794 <VRate_data_Refresh+0x378>)
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	3b06      	subs	r3, #6
 800d774:	4a08      	ldr	r2, [pc, #32]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d776:	2130      	movs	r1, #48	; 0x30
 800d778:	54d1      	strb	r1, [r2, r3]

				}

			}

			Cursor_Position++;
 800d77a:	4b06      	ldr	r3, [pc, #24]	; (800d794 <VRate_data_Refresh+0x378>)
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	3301      	adds	r3, #1
 800d780:	b2da      	uxtb	r2, r3
 800d782:	4b04      	ldr	r3, [pc, #16]	; (800d794 <VRate_data_Refresh+0x378>)
 800d784:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]='0';
 800d786:	4b03      	ldr	r3, [pc, #12]	; (800d794 <VRate_data_Refresh+0x378>)
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	3b06      	subs	r3, #6
 800d78c:	4a02      	ldr	r2, [pc, #8]	; (800d798 <VRate_data_Refresh+0x37c>)
 800d78e:	2130      	movs	r1, #48	; 0x30
 800d790:	54d1      	strb	r1, [r2, r3]
 800d792:	e00f      	b.n	800d7b4 <VRate_data_Refresh+0x398>
 800d794:	20003976 	.word	0x20003976
 800d798:	20003050 	.word	0x20003050
 800d79c:	20003378 	.word	0x20003378
		}
		else if(Cursor_Position==0+6)
 800d7a0:	4b1b      	ldr	r3, [pc, #108]	; (800d810 <VRate_data_Refresh+0x3f4>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	2b06      	cmp	r3, #6
 800d7a6:	d105      	bne.n	800d7b4 <VRate_data_Refresh+0x398>
		{
			String_V_Rate[Cursor_Position-6]='9';
 800d7a8:	4b19      	ldr	r3, [pc, #100]	; (800d810 <VRate_data_Refresh+0x3f4>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	3b06      	subs	r3, #6
 800d7ae:	4a19      	ldr	r2, [pc, #100]	; (800d814 <VRate_data_Refresh+0x3f8>)
 800d7b0:	2139      	movs	r1, #57	; 0x39
 800d7b2:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_V_Slope = String_To_Float(String_V_Rate)*10;
 800d7b4:	4b17      	ldr	r3, [pc, #92]	; (800d814 <VRate_data_Refresh+0x3f8>)
 800d7b6:	0018      	movs	r0, r3
 800d7b8:	f000 fd46 	bl	800e248 <String_To_Float>
 800d7bc:	1c03      	adds	r3, r0, #0
 800d7be:	4916      	ldr	r1, [pc, #88]	; (800d818 <VRate_data_Refresh+0x3fc>)
 800d7c0:	1c18      	adds	r0, r3, #0
 800d7c2:	f7f3 fa4d 	bl	8000c60 <__aeabi_fmul>
 800d7c6:	1c03      	adds	r3, r0, #0
 800d7c8:	1c18      	adds	r0, r3, #0
 800d7ca:	f7f2 fead 	bl	8000528 <__aeabi_f2uiz>
 800d7ce:	0003      	movs	r3, r0
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	4b12      	ldr	r3, [pc, #72]	; (800d81c <VRate_data_Refresh+0x400>)
 800d7d4:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope > 30) Set_V_Slope = 30;//150V
 800d7d6:	4b11      	ldr	r3, [pc, #68]	; (800d81c <VRate_data_Refresh+0x400>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	2b1e      	cmp	r3, #30
 800d7dc:	d902      	bls.n	800d7e4 <VRate_data_Refresh+0x3c8>
 800d7de:	4b0f      	ldr	r3, [pc, #60]	; (800d81c <VRate_data_Refresh+0x400>)
 800d7e0:	221e      	movs	r2, #30
 800d7e2:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope <1||Set_Voltage==1)	Set_V_Slope=1;
 800d7e4:	4b0d      	ldr	r3, [pc, #52]	; (800d81c <VRate_data_Refresh+0x400>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <VRate_data_Refresh+0x3d8>
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <VRate_data_Refresh+0x404>)
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d102      	bne.n	800d7fa <VRate_data_Refresh+0x3de>
 800d7f4:	4b09      	ldr	r3, [pc, #36]	; (800d81c <VRate_data_Refresh+0x400>)
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_V_Slope);
 800d7fa:	4b08      	ldr	r3, [pc, #32]	; (800d81c <VRate_data_Refresh+0x400>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	001a      	movs	r2, r3
 800d802:	2108      	movs	r1, #8
 800d804:	2001      	movs	r0, #1
 800d806:	f7ff f811 	bl	800c82c <DAC_Cmd_send>


}
 800d80a:	46c0      	nop			; (mov r8, r8)
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	20003976 	.word	0x20003976
 800d814:	20003050 	.word	0x20003050
 800d818:	41200000 	.word	0x41200000
 800d81c:	2000397f 	.word	0x2000397f
 800d820:	20002fda 	.word	0x20002fda

0800d824 <IRate_data_Refresh>:

static void IRate_data_Refresh(void)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	af00      	add	r7, sp, #0
	String_I_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800d828:	4b50      	ldr	r3, [pc, #320]	; (800d96c <IRate_data_Refresh+0x148>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	3b06      	subs	r3, #6
 800d82e:	4a50      	ldr	r2, [pc, #320]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d830:	5cd1      	ldrb	r1, [r2, r3]
 800d832:	4b50      	ldr	r3, [pc, #320]	; (800d974 <IRate_data_Refresh+0x150>)
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	b2da      	uxtb	r2, r3
 800d838:	4b4c      	ldr	r3, [pc, #304]	; (800d96c <IRate_data_Refresh+0x148>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	3b06      	subs	r3, #6
 800d83e:	188a      	adds	r2, r1, r2
 800d840:	b2d1      	uxtb	r1, r2
 800d842:	4a4b      	ldr	r2, [pc, #300]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d844:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]<'0')	String_I_Rate[Cursor_Position-6]='0';
 800d846:	4b49      	ldr	r3, [pc, #292]	; (800d96c <IRate_data_Refresh+0x148>)
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	3b06      	subs	r3, #6
 800d84c:	4a48      	ldr	r2, [pc, #288]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d84e:	5cd3      	ldrb	r3, [r2, r3]
 800d850:	2b2f      	cmp	r3, #47	; 0x2f
 800d852:	d805      	bhi.n	800d860 <IRate_data_Refresh+0x3c>
 800d854:	4b45      	ldr	r3, [pc, #276]	; (800d96c <IRate_data_Refresh+0x148>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	3b06      	subs	r3, #6
 800d85a:	4a45      	ldr	r2, [pc, #276]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d85c:	2130      	movs	r1, #48	; 0x30
 800d85e:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]>'9')
 800d860:	4b42      	ldr	r3, [pc, #264]	; (800d96c <IRate_data_Refresh+0x148>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	3b06      	subs	r3, #6
 800d866:	4a42      	ldr	r2, [pc, #264]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d868:	5cd3      	ldrb	r3, [r2, r3]
 800d86a:	2b39      	cmp	r3, #57	; 0x39
 800d86c:	d94f      	bls.n	800d90e <IRate_data_Refresh+0xea>
	{
		/*进位处理*/
		if(Cursor_Position!=0+6)
 800d86e:	4b3f      	ldr	r3, [pc, #252]	; (800d96c <IRate_data_Refresh+0x148>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	2b06      	cmp	r3, #6
 800d874:	d041      	beq.n	800d8fa <IRate_data_Refresh+0xd6>
		{
			String_I_Rate[Cursor_Position-6]='0';
 800d876:	4b3d      	ldr	r3, [pc, #244]	; (800d96c <IRate_data_Refresh+0x148>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	3b06      	subs	r3, #6
 800d87c:	4a3c      	ldr	r2, [pc, #240]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d87e:	2130      	movs	r1, #48	; 0x30
 800d880:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d882:	4b3a      	ldr	r3, [pc, #232]	; (800d96c <IRate_data_Refresh+0x148>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	3b01      	subs	r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	4b38      	ldr	r3, [pc, #224]	; (800d96c <IRate_data_Refresh+0x148>)
 800d88c:	701a      	strb	r2, [r3, #0]
			String_I_Rate[Cursor_Position-6]++;
 800d88e:	4b37      	ldr	r3, [pc, #220]	; (800d96c <IRate_data_Refresh+0x148>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	3b06      	subs	r3, #6
 800d894:	4a36      	ldr	r2, [pc, #216]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d896:	5cd2      	ldrb	r2, [r2, r3]
 800d898:	3201      	adds	r2, #1
 800d89a:	b2d1      	uxtb	r1, r2
 800d89c:	4a34      	ldr	r2, [pc, #208]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d89e:	54d1      	strb	r1, [r2, r3]
			if(String_I_Rate[Cursor_Position-6]>'9'&&Cursor_Position!=0+6)//下一位也进位
 800d8a0:	4b32      	ldr	r3, [pc, #200]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	3b06      	subs	r3, #6
 800d8a6:	4a32      	ldr	r2, [pc, #200]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d8a8:	5cd3      	ldrb	r3, [r2, r3]
 800d8aa:	2b39      	cmp	r3, #57	; 0x39
 800d8ac:	d91e      	bls.n	800d8ec <IRate_data_Refresh+0xc8>
 800d8ae:	4b2f      	ldr	r3, [pc, #188]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2b06      	cmp	r3, #6
 800d8b4:	d01a      	beq.n	800d8ec <IRate_data_Refresh+0xc8>
			{
				String_I_Rate[Cursor_Position-6]='0';
 800d8b6:	4b2d      	ldr	r3, [pc, #180]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	3b06      	subs	r3, #6
 800d8bc:	4a2c      	ldr	r2, [pc, #176]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d8be:	2130      	movs	r1, #48	; 0x30
 800d8c0:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d8c2:	4b2a      	ldr	r3, [pc, #168]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	4b28      	ldr	r3, [pc, #160]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8cc:	701a      	strb	r2, [r3, #0]
				String_I_Rate[Cursor_Position-6]++;
 800d8ce:	4b27      	ldr	r3, [pc, #156]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	3b06      	subs	r3, #6
 800d8d4:	4a26      	ldr	r2, [pc, #152]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d8d6:	5cd2      	ldrb	r2, [r2, r3]
 800d8d8:	3201      	adds	r2, #1
 800d8da:	b2d1      	uxtb	r1, r2
 800d8dc:	4a24      	ldr	r2, [pc, #144]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d8de:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d8e0:	4b22      	ldr	r3, [pc, #136]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	4b20      	ldr	r3, [pc, #128]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8ea:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d8ec:	4b1f      	ldr	r3, [pc, #124]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	4b1d      	ldr	r3, [pc, #116]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8f6:	701a      	strb	r2, [r3, #0]
 800d8f8:	e009      	b.n	800d90e <IRate_data_Refresh+0xea>
		}
		else if(Cursor_Position==0+6)
 800d8fa:	4b1c      	ldr	r3, [pc, #112]	; (800d96c <IRate_data_Refresh+0x148>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	2b06      	cmp	r3, #6
 800d900:	d105      	bne.n	800d90e <IRate_data_Refresh+0xea>
		{
			String_I_Rate[Cursor_Position-6]='9';
 800d902:	4b1a      	ldr	r3, [pc, #104]	; (800d96c <IRate_data_Refresh+0x148>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	3b06      	subs	r3, #6
 800d908:	4a19      	ldr	r2, [pc, #100]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d90a:	2139      	movs	r1, #57	; 0x39
 800d90c:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_I_Slope = String_To_Float(String_I_Rate)*100;
 800d90e:	4b18      	ldr	r3, [pc, #96]	; (800d970 <IRate_data_Refresh+0x14c>)
 800d910:	0018      	movs	r0, r3
 800d912:	f000 fc99 	bl	800e248 <String_To_Float>
 800d916:	1c03      	adds	r3, r0, #0
 800d918:	4917      	ldr	r1, [pc, #92]	; (800d978 <IRate_data_Refresh+0x154>)
 800d91a:	1c18      	adds	r0, r3, #0
 800d91c:	f7f3 f9a0 	bl	8000c60 <__aeabi_fmul>
 800d920:	1c03      	adds	r3, r0, #0
 800d922:	1c18      	adds	r0, r3, #0
 800d924:	f7f2 fe00 	bl	8000528 <__aeabi_f2uiz>
 800d928:	0003      	movs	r3, r0
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	4b13      	ldr	r3, [pc, #76]	; (800d97c <IRate_data_Refresh+0x158>)
 800d92e:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope > 30) Set_I_Slope = 30;//150V
 800d930:	4b12      	ldr	r3, [pc, #72]	; (800d97c <IRate_data_Refresh+0x158>)
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b1e      	cmp	r3, #30
 800d936:	d902      	bls.n	800d93e <IRate_data_Refresh+0x11a>
 800d938:	4b10      	ldr	r3, [pc, #64]	; (800d97c <IRate_data_Refresh+0x158>)
 800d93a:	221e      	movs	r2, #30
 800d93c:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope <1||Set_Voltage==1)	Set_I_Slope=1;
 800d93e:	4b0f      	ldr	r3, [pc, #60]	; (800d97c <IRate_data_Refresh+0x158>)
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d003      	beq.n	800d94e <IRate_data_Refresh+0x12a>
 800d946:	4b0e      	ldr	r3, [pc, #56]	; (800d980 <IRate_data_Refresh+0x15c>)
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d102      	bne.n	800d954 <IRate_data_Refresh+0x130>
 800d94e:	4b0b      	ldr	r3, [pc, #44]	; (800d97c <IRate_data_Refresh+0x158>)
 800d950:	2201      	movs	r2, #1
 800d952:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,9,Set_I_Slope);
 800d954:	4b09      	ldr	r3, [pc, #36]	; (800d97c <IRate_data_Refresh+0x158>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	b29b      	uxth	r3, r3
 800d95a:	001a      	movs	r2, r3
 800d95c:	2109      	movs	r1, #9
 800d95e:	2001      	movs	r0, #1
 800d960:	f7fe ff64 	bl	800c82c <DAC_Cmd_send>

}
 800d964:	46c0      	nop			; (mov r8, r8)
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	46c0      	nop			; (mov r8, r8)
 800d96c:	20003976 	.word	0x20003976
 800d970:	20003044 	.word	0x20003044
 800d974:	20003378 	.word	0x20003378
 800d978:	42c80000 	.word	0x42c80000
 800d97c:	20003980 	.word	0x20003980
 800d980:	20002fda 	.word	0x20002fda

0800d984 <Save_data_Refresh>:

static void Save_data_Refresh(void)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)//Vset
 800d988:	4b76      	ldr	r3, [pc, #472]	; (800db64 <Save_data_Refresh+0x1e0>)
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d172      	bne.n	800da76 <Save_data_Refresh+0xf2>
	{
		String_Save_V[Cursor_Position]+=Flag.Encoder_BF;
 800d990:	4b75      	ldr	r3, [pc, #468]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	001a      	movs	r2, r3
 800d996:	4b75      	ldr	r3, [pc, #468]	; (800db6c <Save_data_Refresh+0x1e8>)
 800d998:	5c9a      	ldrb	r2, [r3, r2]
 800d99a:	4b75      	ldr	r3, [pc, #468]	; (800db70 <Save_data_Refresh+0x1ec>)
 800d99c:	69db      	ldr	r3, [r3, #28]
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	4971      	ldr	r1, [pc, #452]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9a2:	7809      	ldrb	r1, [r1, #0]
 800d9a4:	18d3      	adds	r3, r2, r3
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	4b70      	ldr	r3, [pc, #448]	; (800db6c <Save_data_Refresh+0x1e8>)
 800d9aa:	545a      	strb	r2, [r3, r1]
		if(String_Save_V[Cursor_Position]<'0')	String_Save_V[Cursor_Position]='0';
 800d9ac:	4b6e      	ldr	r3, [pc, #440]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	001a      	movs	r2, r3
 800d9b2:	4b6e      	ldr	r3, [pc, #440]	; (800db6c <Save_data_Refresh+0x1e8>)
 800d9b4:	5c9b      	ldrb	r3, [r3, r2]
 800d9b6:	2b2f      	cmp	r3, #47	; 0x2f
 800d9b8:	d805      	bhi.n	800d9c6 <Save_data_Refresh+0x42>
 800d9ba:	4b6b      	ldr	r3, [pc, #428]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	001a      	movs	r2, r3
 800d9c0:	4b6a      	ldr	r3, [pc, #424]	; (800db6c <Save_data_Refresh+0x1e8>)
 800d9c2:	2130      	movs	r1, #48	; 0x30
 800d9c4:	5499      	strb	r1, [r3, r2]
		if(String_Save_V[Cursor_Position]>'9')
 800d9c6:	4b68      	ldr	r3, [pc, #416]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	001a      	movs	r2, r3
 800d9cc:	4b67      	ldr	r3, [pc, #412]	; (800db6c <Save_data_Refresh+0x1e8>)
 800d9ce:	5c9b      	ldrb	r3, [r3, r2]
 800d9d0:	2b39      	cmp	r3, #57	; 0x39
 800d9d2:	d800      	bhi.n	800d9d6 <Save_data_Refresh+0x52>
 800d9d4:	e0c3      	b.n	800db5e <Save_data_Refresh+0x1da>
		{
			/*进位处理*/
			if(Cursor_Position!=0)
 800d9d6:	4b64      	ldr	r3, [pc, #400]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d03f      	beq.n	800da5e <Save_data_Refresh+0xda>
			{
				String_Save_V[Cursor_Position]='0';
 800d9de:	4b62      	ldr	r3, [pc, #392]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	001a      	movs	r2, r3
 800d9e4:	4b61      	ldr	r3, [pc, #388]	; (800db6c <Save_data_Refresh+0x1e8>)
 800d9e6:	2130      	movs	r1, #48	; 0x30
 800d9e8:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800d9ea:	4b5f      	ldr	r3, [pc, #380]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	4b5d      	ldr	r3, [pc, #372]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9f4:	701a      	strb	r2, [r3, #0]
				String_Save_V[Cursor_Position]++;
 800d9f6:	4b5c      	ldr	r3, [pc, #368]	; (800db68 <Save_data_Refresh+0x1e4>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	4a5c      	ldr	r2, [pc, #368]	; (800db6c <Save_data_Refresh+0x1e8>)
 800d9fc:	5cd2      	ldrb	r2, [r2, r3]
 800d9fe:	3201      	adds	r2, #1
 800da00:	b2d1      	uxtb	r1, r2
 800da02:	4a5a      	ldr	r2, [pc, #360]	; (800db6c <Save_data_Refresh+0x1e8>)
 800da04:	54d1      	strb	r1, [r2, r3]
				if(String_Save_V[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800da06:	4b58      	ldr	r3, [pc, #352]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	001a      	movs	r2, r3
 800da0c:	4b57      	ldr	r3, [pc, #348]	; (800db6c <Save_data_Refresh+0x1e8>)
 800da0e:	5c9b      	ldrb	r3, [r3, r2]
 800da10:	2b39      	cmp	r3, #57	; 0x39
 800da12:	d91d      	bls.n	800da50 <Save_data_Refresh+0xcc>
 800da14:	4b54      	ldr	r3, [pc, #336]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d019      	beq.n	800da50 <Save_data_Refresh+0xcc>
				{
					String_Save_V[Cursor_Position]='0';
 800da1c:	4b52      	ldr	r3, [pc, #328]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	001a      	movs	r2, r3
 800da22:	4b52      	ldr	r3, [pc, #328]	; (800db6c <Save_data_Refresh+0x1e8>)
 800da24:	2130      	movs	r1, #48	; 0x30
 800da26:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800da28:	4b4f      	ldr	r3, [pc, #316]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	4b4d      	ldr	r3, [pc, #308]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da32:	701a      	strb	r2, [r3, #0]
					String_Save_V[Cursor_Position]++;
 800da34:	4b4c      	ldr	r3, [pc, #304]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	4a4c      	ldr	r2, [pc, #304]	; (800db6c <Save_data_Refresh+0x1e8>)
 800da3a:	5cd2      	ldrb	r2, [r2, r3]
 800da3c:	3201      	adds	r2, #1
 800da3e:	b2d1      	uxtb	r1, r2
 800da40:	4a4a      	ldr	r2, [pc, #296]	; (800db6c <Save_data_Refresh+0x1e8>)
 800da42:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800da44:	4b48      	ldr	r3, [pc, #288]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	3301      	adds	r3, #1
 800da4a:	b2da      	uxtb	r2, r3
 800da4c:	4b46      	ldr	r3, [pc, #280]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da4e:	701a      	strb	r2, [r3, #0]
				}
				Cursor_Position++;
 800da50:	4b45      	ldr	r3, [pc, #276]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	3301      	adds	r3, #1
 800da56:	b2da      	uxtb	r2, r3
 800da58:	4b43      	ldr	r3, [pc, #268]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da5a:	701a      	strb	r2, [r3, #0]

		}

	}

}
 800da5c:	e07f      	b.n	800db5e <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800da5e:	4b42      	ldr	r3, [pc, #264]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d000      	beq.n	800da68 <Save_data_Refresh+0xe4>
 800da66:	e07a      	b.n	800db5e <Save_data_Refresh+0x1da>
				String_Save_V[Cursor_Position]='9';
 800da68:	4b3f      	ldr	r3, [pc, #252]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	001a      	movs	r2, r3
 800da6e:	4b3f      	ldr	r3, [pc, #252]	; (800db6c <Save_data_Refresh+0x1e8>)
 800da70:	2139      	movs	r1, #57	; 0x39
 800da72:	5499      	strb	r1, [r3, r2]
}
 800da74:	e073      	b.n	800db5e <Save_data_Refresh+0x1da>
	else if(xyz.coordinates3==2)//Iset
 800da76:	4b3b      	ldr	r3, [pc, #236]	; (800db64 <Save_data_Refresh+0x1e0>)
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d16f      	bne.n	800db5e <Save_data_Refresh+0x1da>
		String_Save_I[Cursor_Position]+=Flag.Encoder_BF;
 800da7e:	4b3a      	ldr	r3, [pc, #232]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	001a      	movs	r2, r3
 800da84:	4b3b      	ldr	r3, [pc, #236]	; (800db74 <Save_data_Refresh+0x1f0>)
 800da86:	5c9a      	ldrb	r2, [r3, r2]
 800da88:	4b39      	ldr	r3, [pc, #228]	; (800db70 <Save_data_Refresh+0x1ec>)
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	4936      	ldr	r1, [pc, #216]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da90:	7809      	ldrb	r1, [r1, #0]
 800da92:	18d3      	adds	r3, r2, r3
 800da94:	b2da      	uxtb	r2, r3
 800da96:	4b37      	ldr	r3, [pc, #220]	; (800db74 <Save_data_Refresh+0x1f0>)
 800da98:	545a      	strb	r2, [r3, r1]
		if(String_Save_I[Cursor_Position]<'0')	String_Save_I[Cursor_Position]='0';
 800da9a:	4b33      	ldr	r3, [pc, #204]	; (800db68 <Save_data_Refresh+0x1e4>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	001a      	movs	r2, r3
 800daa0:	4b34      	ldr	r3, [pc, #208]	; (800db74 <Save_data_Refresh+0x1f0>)
 800daa2:	5c9b      	ldrb	r3, [r3, r2]
 800daa4:	2b2f      	cmp	r3, #47	; 0x2f
 800daa6:	d805      	bhi.n	800dab4 <Save_data_Refresh+0x130>
 800daa8:	4b2f      	ldr	r3, [pc, #188]	; (800db68 <Save_data_Refresh+0x1e4>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	001a      	movs	r2, r3
 800daae:	4b31      	ldr	r3, [pc, #196]	; (800db74 <Save_data_Refresh+0x1f0>)
 800dab0:	2130      	movs	r1, #48	; 0x30
 800dab2:	5499      	strb	r1, [r3, r2]
		if(String_Save_I[Cursor_Position]>'9')
 800dab4:	4b2c      	ldr	r3, [pc, #176]	; (800db68 <Save_data_Refresh+0x1e4>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	001a      	movs	r2, r3
 800daba:	4b2e      	ldr	r3, [pc, #184]	; (800db74 <Save_data_Refresh+0x1f0>)
 800dabc:	5c9b      	ldrb	r3, [r3, r2]
 800dabe:	2b39      	cmp	r3, #57	; 0x39
 800dac0:	d94d      	bls.n	800db5e <Save_data_Refresh+0x1da>
			if(Cursor_Position!=0)
 800dac2:	4b29      	ldr	r3, [pc, #164]	; (800db68 <Save_data_Refresh+0x1e4>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d03f      	beq.n	800db4a <Save_data_Refresh+0x1c6>
				String_Save_I[Cursor_Position]='0';
 800daca:	4b27      	ldr	r3, [pc, #156]	; (800db68 <Save_data_Refresh+0x1e4>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	001a      	movs	r2, r3
 800dad0:	4b28      	ldr	r3, [pc, #160]	; (800db74 <Save_data_Refresh+0x1f0>)
 800dad2:	2130      	movs	r1, #48	; 0x30
 800dad4:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800dad6:	4b24      	ldr	r3, [pc, #144]	; (800db68 <Save_data_Refresh+0x1e4>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	3b01      	subs	r3, #1
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	4b22      	ldr	r3, [pc, #136]	; (800db68 <Save_data_Refresh+0x1e4>)
 800dae0:	701a      	strb	r2, [r3, #0]
				String_Save_I[Cursor_Position]++;
 800dae2:	4b21      	ldr	r3, [pc, #132]	; (800db68 <Save_data_Refresh+0x1e4>)
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	4a23      	ldr	r2, [pc, #140]	; (800db74 <Save_data_Refresh+0x1f0>)
 800dae8:	5cd2      	ldrb	r2, [r2, r3]
 800daea:	3201      	adds	r2, #1
 800daec:	b2d1      	uxtb	r1, r2
 800daee:	4a21      	ldr	r2, [pc, #132]	; (800db74 <Save_data_Refresh+0x1f0>)
 800daf0:	54d1      	strb	r1, [r2, r3]
				if(String_Save_I[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800daf2:	4b1d      	ldr	r3, [pc, #116]	; (800db68 <Save_data_Refresh+0x1e4>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	001a      	movs	r2, r3
 800daf8:	4b1e      	ldr	r3, [pc, #120]	; (800db74 <Save_data_Refresh+0x1f0>)
 800dafa:	5c9b      	ldrb	r3, [r3, r2]
 800dafc:	2b39      	cmp	r3, #57	; 0x39
 800dafe:	d91d      	bls.n	800db3c <Save_data_Refresh+0x1b8>
 800db00:	4b19      	ldr	r3, [pc, #100]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d019      	beq.n	800db3c <Save_data_Refresh+0x1b8>
					String_Save_I[Cursor_Position]='0';
 800db08:	4b17      	ldr	r3, [pc, #92]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	001a      	movs	r2, r3
 800db0e:	4b19      	ldr	r3, [pc, #100]	; (800db74 <Save_data_Refresh+0x1f0>)
 800db10:	2130      	movs	r1, #48	; 0x30
 800db12:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800db14:	4b14      	ldr	r3, [pc, #80]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	3b01      	subs	r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	4b12      	ldr	r3, [pc, #72]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db1e:	701a      	strb	r2, [r3, #0]
					String_Save_I[Cursor_Position]++;
 800db20:	4b11      	ldr	r3, [pc, #68]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	4a13      	ldr	r2, [pc, #76]	; (800db74 <Save_data_Refresh+0x1f0>)
 800db26:	5cd2      	ldrb	r2, [r2, r3]
 800db28:	3201      	adds	r2, #1
 800db2a:	b2d1      	uxtb	r1, r2
 800db2c:	4a11      	ldr	r2, [pc, #68]	; (800db74 <Save_data_Refresh+0x1f0>)
 800db2e:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800db30:	4b0d      	ldr	r3, [pc, #52]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	3301      	adds	r3, #1
 800db36:	b2da      	uxtb	r2, r3
 800db38:	4b0b      	ldr	r3, [pc, #44]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db3a:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800db3c:	4b0a      	ldr	r3, [pc, #40]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	3301      	adds	r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	4b08      	ldr	r3, [pc, #32]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db46:	701a      	strb	r2, [r3, #0]
}
 800db48:	e009      	b.n	800db5e <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800db4a:	4b07      	ldr	r3, [pc, #28]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d105      	bne.n	800db5e <Save_data_Refresh+0x1da>
				String_Save_I[Cursor_Position]='9';
 800db52:	4b05      	ldr	r3, [pc, #20]	; (800db68 <Save_data_Refresh+0x1e4>)
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	001a      	movs	r2, r3
 800db58:	4b06      	ldr	r3, [pc, #24]	; (800db74 <Save_data_Refresh+0x1f0>)
 800db5a:	2139      	movs	r1, #57	; 0x39
 800db5c:	5499      	strb	r1, [r3, r2]
}
 800db5e:	46c0      	nop			; (mov r8, r8)
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	200039e0 	.word	0x200039e0
 800db68:	20003976 	.word	0x20003976
 800db6c:	20003020 	.word	0x20003020
 800db70:	20003378 	.word	0x20003378
 800db74:	2000302c 	.word	0x2000302c

0800db78 <Recall_data_Refresh>:

static void Recall_data_Refresh(void)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	af00      	add	r7, sp, #0
	Recall_Save_Number+=Flag.Encoder_BF;
 800db7c:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <Recall_data_Refresh+0x2c>)
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	b2da      	uxtb	r2, r3
 800db82:	4b09      	ldr	r3, [pc, #36]	; (800dba8 <Recall_data_Refresh+0x30>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	18d3      	adds	r3, r2, r3
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <Recall_data_Refresh+0x30>)
 800db8c:	701a      	strb	r2, [r3, #0]
	if(Recall_Save_Number<0)	Recall_Save_Number=9;
	if(Recall_Save_Number>9)	Recall_Save_Number=0;
 800db8e:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <Recall_data_Refresh+0x30>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b09      	cmp	r3, #9
 800db94:	d902      	bls.n	800db9c <Recall_data_Refresh+0x24>
 800db96:	4b04      	ldr	r3, [pc, #16]	; (800dba8 <Recall_data_Refresh+0x30>)
 800db98:	2200      	movs	r2, #0
 800db9a:	701a      	strb	r2, [r3, #0]
}
 800db9c:	46c0      	nop			; (mov r8, r8)
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	46c0      	nop			; (mov r8, r8)
 800dba4:	20003378 	.word	0x20003378
 800dba8:	20003975 	.word	0x20003975

0800dbac <Timer_data_Refresh>:

static void Timer_data_Refresh(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)
 800dbb0:	4b45      	ldr	r3, [pc, #276]	; (800dcc8 <Timer_data_Refresh+0x11c>)
 800dbb2:	689b      	ldr	r3, [r3, #8]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d129      	bne.n	800dc0c <Timer_data_Refresh+0x60>
	{
		String_Delay[Cursor_Position-6]+=Flag.Encoder_BF;
 800dbb8:	4b44      	ldr	r3, [pc, #272]	; (800dccc <Timer_data_Refresh+0x120>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	3b06      	subs	r3, #6
 800dbbe:	4a44      	ldr	r2, [pc, #272]	; (800dcd0 <Timer_data_Refresh+0x124>)
 800dbc0:	5cd1      	ldrb	r1, [r2, r3]
 800dbc2:	4b44      	ldr	r3, [pc, #272]	; (800dcd4 <Timer_data_Refresh+0x128>)
 800dbc4:	69db      	ldr	r3, [r3, #28]
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	4b40      	ldr	r3, [pc, #256]	; (800dccc <Timer_data_Refresh+0x120>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	3b06      	subs	r3, #6
 800dbce:	188a      	adds	r2, r1, r2
 800dbd0:	b2d1      	uxtb	r1, r2
 800dbd2:	4a3f      	ldr	r2, [pc, #252]	; (800dcd0 <Timer_data_Refresh+0x124>)
 800dbd4:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]<'0')	String_Delay[Cursor_Position-6]='0';
 800dbd6:	4b3d      	ldr	r3, [pc, #244]	; (800dccc <Timer_data_Refresh+0x120>)
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	3b06      	subs	r3, #6
 800dbdc:	4a3c      	ldr	r2, [pc, #240]	; (800dcd0 <Timer_data_Refresh+0x124>)
 800dbde:	5cd3      	ldrb	r3, [r2, r3]
 800dbe0:	2b2f      	cmp	r3, #47	; 0x2f
 800dbe2:	d805      	bhi.n	800dbf0 <Timer_data_Refresh+0x44>
 800dbe4:	4b39      	ldr	r3, [pc, #228]	; (800dccc <Timer_data_Refresh+0x120>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	3b06      	subs	r3, #6
 800dbea:	4a39      	ldr	r2, [pc, #228]	; (800dcd0 <Timer_data_Refresh+0x124>)
 800dbec:	2130      	movs	r1, #48	; 0x30
 800dbee:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]>'9')	String_Delay[Cursor_Position-6]='9';
 800dbf0:	4b36      	ldr	r3, [pc, #216]	; (800dccc <Timer_data_Refresh+0x120>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	3b06      	subs	r3, #6
 800dbf6:	4a36      	ldr	r2, [pc, #216]	; (800dcd0 <Timer_data_Refresh+0x124>)
 800dbf8:	5cd3      	ldrb	r3, [r2, r3]
 800dbfa:	2b39      	cmp	r3, #57	; 0x39
 800dbfc:	d961      	bls.n	800dcc2 <Timer_data_Refresh+0x116>
 800dbfe:	4b33      	ldr	r3, [pc, #204]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	3b06      	subs	r3, #6
 800dc04:	4a32      	ldr	r2, [pc, #200]	; (800dcd0 <Timer_data_Refresh+0x124>)
 800dc06:	2139      	movs	r1, #57	; 0x39
 800dc08:	54d1      	strb	r1, [r2, r3]
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
	}

}
 800dc0a:	e05a      	b.n	800dcc2 <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==2)
 800dc0c:	4b2e      	ldr	r3, [pc, #184]	; (800dcc8 <Timer_data_Refresh+0x11c>)
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	2b02      	cmp	r3, #2
 800dc12:	d129      	bne.n	800dc68 <Timer_data_Refresh+0xbc>
		String_Cycle_On[Cursor_Position-6]+=Flag.Encoder_BF;
 800dc14:	4b2d      	ldr	r3, [pc, #180]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	3b06      	subs	r3, #6
 800dc1a:	4a2f      	ldr	r2, [pc, #188]	; (800dcd8 <Timer_data_Refresh+0x12c>)
 800dc1c:	5cd1      	ldrb	r1, [r2, r3]
 800dc1e:	4b2d      	ldr	r3, [pc, #180]	; (800dcd4 <Timer_data_Refresh+0x128>)
 800dc20:	69db      	ldr	r3, [r3, #28]
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	4b29      	ldr	r3, [pc, #164]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	3b06      	subs	r3, #6
 800dc2a:	188a      	adds	r2, r1, r2
 800dc2c:	b2d1      	uxtb	r1, r2
 800dc2e:	4a2a      	ldr	r2, [pc, #168]	; (800dcd8 <Timer_data_Refresh+0x12c>)
 800dc30:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]<'0')	String_Cycle_On[Cursor_Position-6]='0';
 800dc32:	4b26      	ldr	r3, [pc, #152]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	3b06      	subs	r3, #6
 800dc38:	4a27      	ldr	r2, [pc, #156]	; (800dcd8 <Timer_data_Refresh+0x12c>)
 800dc3a:	5cd3      	ldrb	r3, [r2, r3]
 800dc3c:	2b2f      	cmp	r3, #47	; 0x2f
 800dc3e:	d805      	bhi.n	800dc4c <Timer_data_Refresh+0xa0>
 800dc40:	4b22      	ldr	r3, [pc, #136]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	3b06      	subs	r3, #6
 800dc46:	4a24      	ldr	r2, [pc, #144]	; (800dcd8 <Timer_data_Refresh+0x12c>)
 800dc48:	2130      	movs	r1, #48	; 0x30
 800dc4a:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]>'9')	String_Cycle_On[Cursor_Position-6]='9';
 800dc4c:	4b1f      	ldr	r3, [pc, #124]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	3b06      	subs	r3, #6
 800dc52:	4a21      	ldr	r2, [pc, #132]	; (800dcd8 <Timer_data_Refresh+0x12c>)
 800dc54:	5cd3      	ldrb	r3, [r2, r3]
 800dc56:	2b39      	cmp	r3, #57	; 0x39
 800dc58:	d933      	bls.n	800dcc2 <Timer_data_Refresh+0x116>
 800dc5a:	4b1c      	ldr	r3, [pc, #112]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	3b06      	subs	r3, #6
 800dc60:	4a1d      	ldr	r2, [pc, #116]	; (800dcd8 <Timer_data_Refresh+0x12c>)
 800dc62:	2139      	movs	r1, #57	; 0x39
 800dc64:	54d1      	strb	r1, [r2, r3]
}
 800dc66:	e02c      	b.n	800dcc2 <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==3)
 800dc68:	4b17      	ldr	r3, [pc, #92]	; (800dcc8 <Timer_data_Refresh+0x11c>)
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	d128      	bne.n	800dcc2 <Timer_data_Refresh+0x116>
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
 800dc70:	4b16      	ldr	r3, [pc, #88]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	3b06      	subs	r3, #6
 800dc76:	4a19      	ldr	r2, [pc, #100]	; (800dcdc <Timer_data_Refresh+0x130>)
 800dc78:	5cd1      	ldrb	r1, [r2, r3]
 800dc7a:	4b16      	ldr	r3, [pc, #88]	; (800dcd4 <Timer_data_Refresh+0x128>)
 800dc7c:	69db      	ldr	r3, [r3, #28]
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	4b12      	ldr	r3, [pc, #72]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	3b06      	subs	r3, #6
 800dc86:	188a      	adds	r2, r1, r2
 800dc88:	b2d1      	uxtb	r1, r2
 800dc8a:	4a14      	ldr	r2, [pc, #80]	; (800dcdc <Timer_data_Refresh+0x130>)
 800dc8c:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
 800dc8e:	4b0f      	ldr	r3, [pc, #60]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	3b06      	subs	r3, #6
 800dc94:	4a11      	ldr	r2, [pc, #68]	; (800dcdc <Timer_data_Refresh+0x130>)
 800dc96:	5cd3      	ldrb	r3, [r2, r3]
 800dc98:	2b2f      	cmp	r3, #47	; 0x2f
 800dc9a:	d805      	bhi.n	800dca8 <Timer_data_Refresh+0xfc>
 800dc9c:	4b0b      	ldr	r3, [pc, #44]	; (800dccc <Timer_data_Refresh+0x120>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	3b06      	subs	r3, #6
 800dca2:	4a0e      	ldr	r2, [pc, #56]	; (800dcdc <Timer_data_Refresh+0x130>)
 800dca4:	2130      	movs	r1, #48	; 0x30
 800dca6:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
 800dca8:	4b08      	ldr	r3, [pc, #32]	; (800dccc <Timer_data_Refresh+0x120>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	3b06      	subs	r3, #6
 800dcae:	4a0b      	ldr	r2, [pc, #44]	; (800dcdc <Timer_data_Refresh+0x130>)
 800dcb0:	5cd3      	ldrb	r3, [r2, r3]
 800dcb2:	2b39      	cmp	r3, #57	; 0x39
 800dcb4:	d905      	bls.n	800dcc2 <Timer_data_Refresh+0x116>
 800dcb6:	4b05      	ldr	r3, [pc, #20]	; (800dccc <Timer_data_Refresh+0x120>)
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	3b06      	subs	r3, #6
 800dcbc:	4a07      	ldr	r2, [pc, #28]	; (800dcdc <Timer_data_Refresh+0x130>)
 800dcbe:	2139      	movs	r1, #57	; 0x39
 800dcc0:	54d1      	strb	r1, [r2, r3]
}
 800dcc2:	46c0      	nop			; (mov r8, r8)
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	200039e0 	.word	0x200039e0
 800dccc:	20003976 	.word	0x20003976
 800dcd0:	20003014 	.word	0x20003014
 800dcd4:	20003378 	.word	0x20003378
 800dcd8:	20002ffc 	.word	0x20002ffc
 800dcdc:	20003008 	.word	0x20003008

0800dce0 <Light_data_Refresh>:

static void Light_data_Refresh(void)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800dce4:	4b12      	ldr	r3, [pc, #72]	; (800dd30 <Light_data_Refresh+0x50>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d103      	bne.n	800dcf4 <Light_data_Refresh+0x14>
 800dcec:	4b11      	ldr	r3, [pc, #68]	; (800dd34 <Light_data_Refresh+0x54>)
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	db18      	blt.n	800dd26 <Light_data_Refresh+0x46>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800dcf4:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <Light_data_Refresh+0x50>)
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b0f      	cmp	r3, #15
 800dcfa:	d103      	bne.n	800dd04 <Light_data_Refresh+0x24>
 800dcfc:	4b0d      	ldr	r3, [pc, #52]	; (800dd34 <Light_data_Refresh+0x54>)
 800dcfe:	69db      	ldr	r3, [r3, #28]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	dc12      	bgt.n	800dd2a <Light_data_Refresh+0x4a>
	else Light+=Flag.Encoder_BF;
 800dd04:	4b0b      	ldr	r3, [pc, #44]	; (800dd34 <Light_data_Refresh+0x54>)
 800dd06:	69db      	ldr	r3, [r3, #28]
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	4b09      	ldr	r3, [pc, #36]	; (800dd30 <Light_data_Refresh+0x50>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	18d3      	adds	r3, r2, r3
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <Light_data_Refresh+0x50>)
 800dd14:	701a      	strb	r2, [r3, #0]
	if(Light>=0x0f)	Light=0x0f;
 800dd16:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <Light_data_Refresh+0x50>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	2b0e      	cmp	r3, #14
 800dd1c:	d906      	bls.n	800dd2c <Light_data_Refresh+0x4c>
 800dd1e:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <Light_data_Refresh+0x50>)
 800dd20:	220f      	movs	r2, #15
 800dd22:	701a      	strb	r2, [r3, #0]
 800dd24:	e002      	b.n	800dd2c <Light_data_Refresh+0x4c>
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800dd26:	46c0      	nop			; (mov r8, r8)
 800dd28:	e000      	b.n	800dd2c <Light_data_Refresh+0x4c>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800dd2a:	46c0      	nop			; (mov r8, r8)
}
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	200030b7 	.word	0x200030b7
 800dd34:	20003378 	.word	0x20003378

0800dd38 <FAN_data_Refresh>:

static void FAN_data_Refresh(void)
{
 800dd38:	b5b0      	push	{r4, r5, r7, lr}
 800dd3a:	af00      	add	r7, sp, #0
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800dd3c:	4b22      	ldr	r3, [pc, #136]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd40:	21fe      	movs	r1, #254	; 0xfe
 800dd42:	0589      	lsls	r1, r1, #22
 800dd44:	1c18      	adds	r0, r3, #0
 800dd46:	f7f2 fbc1 	bl	80004cc <__aeabi_fcmpeq>
 800dd4a:	1e03      	subs	r3, r0, #0
 800dd4c:	d003      	beq.n	800dd56 <FAN_data_Refresh+0x1e>
 800dd4e:	4b1e      	ldr	r3, [pc, #120]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd50:	69db      	ldr	r3, [r3, #28]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	db32      	blt.n	800ddbc <FAN_data_Refresh+0x84>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800dd56:	4b1c      	ldr	r3, [pc, #112]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5a:	491c      	ldr	r1, [pc, #112]	; (800ddcc <FAN_data_Refresh+0x94>)
 800dd5c:	1c18      	adds	r0, r3, #0
 800dd5e:	f7f2 fbb5 	bl	80004cc <__aeabi_fcmpeq>
 800dd62:	1e03      	subs	r3, r0, #0
 800dd64:	d003      	beq.n	800dd6e <FAN_data_Refresh+0x36>
 800dd66:	4b18      	ldr	r3, [pc, #96]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd68:	69db      	ldr	r3, [r3, #28]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dc28      	bgt.n	800ddc0 <FAN_data_Refresh+0x88>
	else Flag.FAN_LEVEL+=Flag.Encoder_BF;
 800dd6e:	4b16      	ldr	r3, [pc, #88]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd70:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800dd72:	4b15      	ldr	r3, [pc, #84]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	0018      	movs	r0, r3
 800dd78:	f7f3 fa66 	bl	8001248 <__aeabi_i2f>
 800dd7c:	1c03      	adds	r3, r0, #0
 800dd7e:	1c19      	adds	r1, r3, #0
 800dd80:	1c20      	adds	r0, r4, #0
 800dd82:	f7f2 fc07 	bl	8000594 <__aeabi_fadd>
 800dd86:	1c03      	adds	r3, r0, #0
 800dd88:	1c1a      	adds	r2, r3, #0
 800dd8a:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd8c:	629a      	str	r2, [r3, #40]	; 0x28
	if(Flag.FAN_LEVEL>=1000)	Flag.FAN_LEVEL=1000;
 800dd8e:	4b0e      	ldr	r3, [pc, #56]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd92:	490e      	ldr	r1, [pc, #56]	; (800ddcc <FAN_data_Refresh+0x94>)
 800dd94:	1c18      	adds	r0, r3, #0
 800dd96:	f7f2 fbbd 	bl	8000514 <__aeabi_fcmpge>
 800dd9a:	1e03      	subs	r3, r0, #0
 800dd9c:	d002      	beq.n	800dda4 <FAN_data_Refresh+0x6c>
 800dd9e:	4b0a      	ldr	r3, [pc, #40]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dda0:	4a0a      	ldr	r2, [pc, #40]	; (800ddcc <FAN_data_Refresh+0x94>)
 800dda2:	629a      	str	r2, [r3, #40]	; 0x28

	sprintf(String_FAN, "%6.2f", Flag.FAN_LEVEL);
 800dda4:	4b08      	ldr	r3, [pc, #32]	; (800ddc8 <FAN_data_Refresh+0x90>)
 800dda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda8:	1c18      	adds	r0, r3, #0
 800ddaa:	f7f5 f881 	bl	8002eb0 <__aeabi_f2d>
 800ddae:	0002      	movs	r2, r0
 800ddb0:	000b      	movs	r3, r1
 800ddb2:	4907      	ldr	r1, [pc, #28]	; (800ddd0 <FAN_data_Refresh+0x98>)
 800ddb4:	4807      	ldr	r0, [pc, #28]	; (800ddd4 <FAN_data_Refresh+0x9c>)
 800ddb6:	f006 feeb 	bl	8014b90 <siprintf>
 800ddba:	e002      	b.n	800ddc2 <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800ddbc:	46c0      	nop			; (mov r8, r8)
 800ddbe:	e000      	b.n	800ddc2 <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800ddc0:	46c0      	nop			; (mov r8, r8)

}
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bdb0      	pop	{r4, r5, r7, pc}
 800ddc6:	46c0      	nop			; (mov r8, r8)
 800ddc8:	20003378 	.word	0x20003378
 800ddcc:	447a0000 	.word	0x447a0000
 800ddd0:	08017dbc 	.word	0x08017dbc
 800ddd4:	20003084 	.word	0x20003084

0800ddd8 <enter_action>:
 * @brief  编码器按键动作响应
 * @param  none
 * @retval None
 */
static void enter_action(void)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	af00      	add	r7, sp, #0
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800dddc:	4b95      	ldr	r3, [pc, #596]	; (800e034 <enter_action+0x25c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d10a      	bne.n	800ddfa <enter_action+0x22>
 800dde4:	4b93      	ldr	r3, [pc, #588]	; (800e034 <enter_action+0x25c>)
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d006      	beq.n	800ddfa <enter_action+0x22>
 800ddec:	4b91      	ldr	r3, [pc, #580]	; (800e034 <enter_action+0x25c>)
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d102      	bne.n	800ddfa <enter_action+0x22>
	{
		xyz.coordinates3=1;//enter second menu
 800ddf4:	4b8f      	ldr	r3, [pc, #572]	; (800e034 <enter_action+0x25c>)
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	609a      	str	r2, [r3, #8]
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800ddfa:	4b8e      	ldr	r3, [pc, #568]	; (800e034 <enter_action+0x25c>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d14f      	bne.n	800dea2 <enter_action+0xca>
 800de02:	4b8c      	ldr	r3, [pc, #560]	; (800e034 <enter_action+0x25c>)
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d04b      	beq.n	800dea2 <enter_action+0xca>
 800de0a:	4b8a      	ldr	r3, [pc, #552]	; (800e034 <enter_action+0x25c>)
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d047      	beq.n	800dea2 <enter_action+0xca>
	{
		switch(xyz.coordinates2)
 800de12:	4b88      	ldr	r3, [pc, #544]	; (800e034 <enter_action+0x25c>)
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	2b05      	cmp	r3, #5
 800de18:	d83b      	bhi.n	800de92 <enter_action+0xba>
 800de1a:	009a      	lsls	r2, r3, #2
 800de1c:	4b86      	ldr	r3, [pc, #536]	; (800e038 <enter_action+0x260>)
 800de1e:	18d3      	adds	r3, r2, r3
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	469f      	mov	pc, r3
		{
			case 1:break;
			case 2://rate
			{
				Cursor_Position++;
 800de24:	4b85      	ldr	r3, [pc, #532]	; (800e03c <enter_action+0x264>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	3301      	adds	r3, #1
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	4b83      	ldr	r3, [pc, #524]	; (800e03c <enter_action+0x264>)
 800de2e:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>4+6) Cursor_Position=0+6;
 800de30:	4b82      	ldr	r3, [pc, #520]	; (800e03c <enter_action+0x264>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b0a      	cmp	r3, #10
 800de36:	d92e      	bls.n	800de96 <enter_action+0xbe>
 800de38:	4b80      	ldr	r3, [pc, #512]	; (800e03c <enter_action+0x264>)
 800de3a:	2206      	movs	r2, #6
 800de3c:	701a      	strb	r2, [r3, #0]
				break;
 800de3e:	e02a      	b.n	800de96 <enter_action+0xbe>
			}
			case 3:break;//以后补充
			case 4://cycle on/off delay
			{
				if(Cursor_Position==3+6)	Cursor_Position=4+6;
 800de40:	4b7e      	ldr	r3, [pc, #504]	; (800e03c <enter_action+0x264>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b09      	cmp	r3, #9
 800de46:	d102      	bne.n	800de4e <enter_action+0x76>
 800de48:	4b7c      	ldr	r3, [pc, #496]	; (800e03c <enter_action+0x264>)
 800de4a:	220a      	movs	r2, #10
 800de4c:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800de4e:	4b7b      	ldr	r3, [pc, #492]	; (800e03c <enter_action+0x264>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	3301      	adds	r3, #1
 800de54:	b2da      	uxtb	r2, r3
 800de56:	4b79      	ldr	r3, [pc, #484]	; (800e03c <enter_action+0x264>)
 800de58:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>7+6) 	Cursor_Position=0+6;
 800de5a:	4b78      	ldr	r3, [pc, #480]	; (800e03c <enter_action+0x264>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b0d      	cmp	r3, #13
 800de60:	d91b      	bls.n	800de9a <enter_action+0xc2>
 800de62:	4b76      	ldr	r3, [pc, #472]	; (800e03c <enter_action+0x264>)
 800de64:	2206      	movs	r2, #6
 800de66:	701a      	strb	r2, [r3, #0]
				break;
 800de68:	e017      	b.n	800de9a <enter_action+0xc2>
			}
			case 5:
			{
				if(xyz.coordinates3==2)//gain
 800de6a:	4b72      	ldr	r3, [pc, #456]	; (800e034 <enter_action+0x25c>)
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d115      	bne.n	800de9e <enter_action+0xc6>
				{
					if(Cursor_Position==4+6)
 800de72:	4b72      	ldr	r3, [pc, #456]	; (800e03c <enter_action+0x264>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	2b0a      	cmp	r3, #10
 800de78:	d103      	bne.n	800de82 <enter_action+0xaa>
					{
						Cursor_Position=5+6;
 800de7a:	4b70      	ldr	r3, [pc, #448]	; (800e03c <enter_action+0x264>)
 800de7c:	220b      	movs	r2, #11
 800de7e:	701a      	strb	r2, [r3, #0]
				}
				if(xyz.coordinates3==3)//frq
				{
					;
				}
				break;
 800de80:	e00d      	b.n	800de9e <enter_action+0xc6>
					else if(Cursor_Position==5+6)
 800de82:	4b6e      	ldr	r3, [pc, #440]	; (800e03c <enter_action+0x264>)
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	2b0b      	cmp	r3, #11
 800de88:	d109      	bne.n	800de9e <enter_action+0xc6>
						Cursor_Position=4+6;
 800de8a:	4b6c      	ldr	r3, [pc, #432]	; (800e03c <enter_action+0x264>)
 800de8c:	220a      	movs	r2, #10
 800de8e:	701a      	strb	r2, [r3, #0]
				break;
 800de90:	e005      	b.n	800de9e <enter_action+0xc6>

			}
			default: break;
 800de92:	46c0      	nop			; (mov r8, r8)
 800de94:	e043      	b.n	800df1e <enter_action+0x146>
				break;
 800de96:	46c0      	nop			; (mov r8, r8)
 800de98:	e041      	b.n	800df1e <enter_action+0x146>
				break;
 800de9a:	46c0      	nop			; (mov r8, r8)
 800de9c:	e03f      	b.n	800df1e <enter_action+0x146>
				break;
 800de9e:	46c0      	nop			; (mov r8, r8)
		switch(xyz.coordinates2)
 800dea0:	e03d      	b.n	800df1e <enter_action+0x146>
		}

	}
	/*V I Set*/
	else if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800dea2:	4b64      	ldr	r3, [pc, #400]	; (800e034 <enter_action+0x25c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d134      	bne.n	800df14 <enter_action+0x13c>
 800deaa:	4b62      	ldr	r3, [pc, #392]	; (800e034 <enter_action+0x25c>)
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d030      	beq.n	800df14 <enter_action+0x13c>
	{
		switch(xyz.coordinates2)
 800deb2:	4b60      	ldr	r3, [pc, #384]	; (800e034 <enter_action+0x25c>)
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d002      	beq.n	800dec0 <enter_action+0xe8>
 800deba:	2b02      	cmp	r3, #2
 800debc:	d015      	beq.n	800deea <enter_action+0x112>
 800debe:	e02e      	b.n	800df1e <enter_action+0x146>
		{
			case 1://I set
			{
				Cursor_Position++;
 800dec0:	4b5e      	ldr	r3, [pc, #376]	; (800e03c <enter_action+0x264>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	3301      	adds	r3, #1
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	4b5c      	ldr	r3, [pc, #368]	; (800e03c <enter_action+0x264>)
 800deca:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800decc:	4b5b      	ldr	r3, [pc, #364]	; (800e03c <enter_action+0x264>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b0c      	cmp	r3, #12
 800ded2:	d102      	bne.n	800deda <enter_action+0x102>
 800ded4:	4b59      	ldr	r3, [pc, #356]	; (800e03c <enter_action+0x264>)
 800ded6:	220d      	movs	r2, #13
 800ded8:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800deda:	4b58      	ldr	r3, [pc, #352]	; (800e03c <enter_action+0x264>)
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b0f      	cmp	r3, #15
 800dee0:	d11a      	bne.n	800df18 <enter_action+0x140>
 800dee2:	4b56      	ldr	r3, [pc, #344]	; (800e03c <enter_action+0x264>)
 800dee4:	2209      	movs	r2, #9
 800dee6:	701a      	strb	r2, [r3, #0]
				break;
 800dee8:	e016      	b.n	800df18 <enter_action+0x140>
			}
			case 2://V set
			{
				Cursor_Position++;
 800deea:	4b54      	ldr	r3, [pc, #336]	; (800e03c <enter_action+0x264>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	3301      	adds	r3, #1
 800def0:	b2da      	uxtb	r2, r3
 800def2:	4b52      	ldr	r3, [pc, #328]	; (800e03c <enter_action+0x264>)
 800def4:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800def6:	4b51      	ldr	r3, [pc, #324]	; (800e03c <enter_action+0x264>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b03      	cmp	r3, #3
 800defc:	d102      	bne.n	800df04 <enter_action+0x12c>
 800defe:	4b4f      	ldr	r3, [pc, #316]	; (800e03c <enter_action+0x264>)
 800df00:	2204      	movs	r2, #4
 800df02:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800df04:	4b4d      	ldr	r3, [pc, #308]	; (800e03c <enter_action+0x264>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b06      	cmp	r3, #6
 800df0a:	d107      	bne.n	800df1c <enter_action+0x144>
 800df0c:	4b4b      	ldr	r3, [pc, #300]	; (800e03c <enter_action+0x264>)
 800df0e:	2200      	movs	r2, #0
 800df10:	701a      	strb	r2, [r3, #0]
				break;
 800df12:	e003      	b.n	800df1c <enter_action+0x144>
			}
		}

	}
 800df14:	46c0      	nop			; (mov r8, r8)
 800df16:	e002      	b.n	800df1e <enter_action+0x146>
				break;
 800df18:	46c0      	nop			; (mov r8, r8)
 800df1a:	e000      	b.n	800df1e <enter_action+0x146>
				break;
 800df1c:	46c0      	nop			; (mov r8, r8)
	/*save load */
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800df1e:	4b45      	ldr	r3, [pc, #276]	; (800e034 <enter_action+0x25c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b03      	cmp	r3, #3
 800df24:	d139      	bne.n	800df9a <enter_action+0x1c2>
 800df26:	4b43      	ldr	r3, [pc, #268]	; (800e034 <enter_action+0x25c>)
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d035      	beq.n	800df9a <enter_action+0x1c2>
	{
		switch(xyz.coordinates2)
 800df2e:	4b41      	ldr	r3, [pc, #260]	; (800e034 <enter_action+0x25c>)
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d133      	bne.n	800df9e <enter_action+0x1c6>
		{
			case 1://save
			{
				if(xyz.coordinates3==1)//v est
 800df36:	4b3f      	ldr	r3, [pc, #252]	; (800e034 <enter_action+0x25c>)
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d114      	bne.n	800df68 <enter_action+0x190>
				{
					Cursor_Position++;
 800df3e:	4b3f      	ldr	r3, [pc, #252]	; (800e03c <enter_action+0x264>)
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	3301      	adds	r3, #1
 800df44:	b2da      	uxtb	r2, r3
 800df46:	4b3d      	ldr	r3, [pc, #244]	; (800e03c <enter_action+0x264>)
 800df48:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2)	Cursor_Position=4;
 800df4a:	4b3c      	ldr	r3, [pc, #240]	; (800e03c <enter_action+0x264>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d102      	bne.n	800df58 <enter_action+0x180>
 800df52:	4b3a      	ldr	r3, [pc, #232]	; (800e03c <enter_action+0x264>)
 800df54:	2204      	movs	r2, #4
 800df56:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5)	Cursor_Position=0;
 800df58:	4b38      	ldr	r3, [pc, #224]	; (800e03c <enter_action+0x264>)
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b05      	cmp	r3, #5
 800df5e:	d120      	bne.n	800dfa2 <enter_action+0x1ca>
 800df60:	4b36      	ldr	r3, [pc, #216]	; (800e03c <enter_action+0x264>)
 800df62:	2200      	movs	r2, #0
 800df64:	701a      	strb	r2, [r3, #0]
					break;
 800df66:	e01c      	b.n	800dfa2 <enter_action+0x1ca>
				}
				else if(xyz.coordinates3==2)//I set
 800df68:	4b32      	ldr	r3, [pc, #200]	; (800e034 <enter_action+0x25c>)
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	d116      	bne.n	800df9e <enter_action+0x1c6>
				{
					Cursor_Position++;
 800df70:	4b32      	ldr	r3, [pc, #200]	; (800e03c <enter_action+0x264>)
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	3301      	adds	r3, #1
 800df76:	b2da      	uxtb	r2, r3
 800df78:	4b30      	ldr	r3, [pc, #192]	; (800e03c <enter_action+0x264>)
 800df7a:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2+9)	Cursor_Position=4;
 800df7c:	4b2f      	ldr	r3, [pc, #188]	; (800e03c <enter_action+0x264>)
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2b0b      	cmp	r3, #11
 800df82:	d102      	bne.n	800df8a <enter_action+0x1b2>
 800df84:	4b2d      	ldr	r3, [pc, #180]	; (800e03c <enter_action+0x264>)
 800df86:	2204      	movs	r2, #4
 800df88:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5+9)	Cursor_Position=0;
 800df8a:	4b2c      	ldr	r3, [pc, #176]	; (800e03c <enter_action+0x264>)
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	2b0e      	cmp	r3, #14
 800df90:	d109      	bne.n	800dfa6 <enter_action+0x1ce>
 800df92:	4b2a      	ldr	r3, [pc, #168]	; (800e03c <enter_action+0x264>)
 800df94:	2200      	movs	r2, #0
 800df96:	701a      	strb	r2, [r3, #0]
					break;
 800df98:	e005      	b.n	800dfa6 <enter_action+0x1ce>
			{
				break;
			}

		}
	}
 800df9a:	46c0      	nop			; (mov r8, r8)
 800df9c:	e004      	b.n	800dfa8 <enter_action+0x1d0>
				break;
 800df9e:	46c0      	nop			; (mov r8, r8)
 800dfa0:	e002      	b.n	800dfa8 <enter_action+0x1d0>
					break;
 800dfa2:	46c0      	nop			; (mov r8, r8)
 800dfa4:	e000      	b.n	800dfa8 <enter_action+0x1d0>
					break;
 800dfa6:	46c0      	nop			; (mov r8, r8)
	if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800dfa8:	4b22      	ldr	r3, [pc, #136]	; (800e034 <enter_action+0x25c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d138      	bne.n	800e022 <enter_action+0x24a>
 800dfb0:	4b20      	ldr	r3, [pc, #128]	; (800e034 <enter_action+0x25c>)
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	2b08      	cmp	r3, #8
 800dfb6:	d134      	bne.n	800e022 <enter_action+0x24a>
	{
		switch(xyz.coordinates3)
 800dfb8:	4b1e      	ldr	r3, [pc, #120]	; (800e034 <enter_action+0x25c>)
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	dc02      	bgt.n	800dfc6 <enter_action+0x1ee>
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	dc04      	bgt.n	800dfce <enter_action+0x1f6>
			}

		}
	}

}
 800dfc4:	e032      	b.n	800e02c <enter_action+0x254>
 800dfc6:	3b03      	subs	r3, #3
		switch(xyz.coordinates3)
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d82f      	bhi.n	800e02c <enter_action+0x254>
 800dfcc:	e014      	b.n	800dff8 <enter_action+0x220>
				Cursor_Position++;
 800dfce:	4b1b      	ldr	r3, [pc, #108]	; (800e03c <enter_action+0x264>)
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	4b19      	ldr	r3, [pc, #100]	; (800e03c <enter_action+0x264>)
 800dfd8:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800dfda:	4b18      	ldr	r3, [pc, #96]	; (800e03c <enter_action+0x264>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	d102      	bne.n	800dfe8 <enter_action+0x210>
 800dfe2:	4b16      	ldr	r3, [pc, #88]	; (800e03c <enter_action+0x264>)
 800dfe4:	2204      	movs	r2, #4
 800dfe6:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800dfe8:	4b14      	ldr	r3, [pc, #80]	; (800e03c <enter_action+0x264>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	2b06      	cmp	r3, #6
 800dfee:	d11a      	bne.n	800e026 <enter_action+0x24e>
 800dff0:	4b12      	ldr	r3, [pc, #72]	; (800e03c <enter_action+0x264>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	701a      	strb	r2, [r3, #0]
				break;
 800dff6:	e016      	b.n	800e026 <enter_action+0x24e>
				Cursor_Position++;
 800dff8:	4b10      	ldr	r3, [pc, #64]	; (800e03c <enter_action+0x264>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	3301      	adds	r3, #1
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	4b0e      	ldr	r3, [pc, #56]	; (800e03c <enter_action+0x264>)
 800e002:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800e004:	4b0d      	ldr	r3, [pc, #52]	; (800e03c <enter_action+0x264>)
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	2b0c      	cmp	r3, #12
 800e00a:	d102      	bne.n	800e012 <enter_action+0x23a>
 800e00c:	4b0b      	ldr	r3, [pc, #44]	; (800e03c <enter_action+0x264>)
 800e00e:	220d      	movs	r2, #13
 800e010:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800e012:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <enter_action+0x264>)
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b0f      	cmp	r3, #15
 800e018:	d107      	bne.n	800e02a <enter_action+0x252>
 800e01a:	4b08      	ldr	r3, [pc, #32]	; (800e03c <enter_action+0x264>)
 800e01c:	2209      	movs	r2, #9
 800e01e:	701a      	strb	r2, [r3, #0]
				break;
 800e020:	e003      	b.n	800e02a <enter_action+0x252>
	}
 800e022:	46c0      	nop			; (mov r8, r8)
 800e024:	e002      	b.n	800e02c <enter_action+0x254>
				break;
 800e026:	46c0      	nop			; (mov r8, r8)
 800e028:	e000      	b.n	800e02c <enter_action+0x254>
				break;
 800e02a:	46c0      	nop			; (mov r8, r8)
}
 800e02c:	46c0      	nop			; (mov r8, r8)
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	46c0      	nop			; (mov r8, r8)
 800e034:	200039e0 	.word	0x200039e0
 800e038:	08018264 	.word	0x08018264
 800e03c:	20003976 	.word	0x20003976

0800e040 <Encoder_Data_refresh>:
 * @brief  编码器转动数据更新
 * @param  none
 * @retval None
 */
void Encoder_Data_refresh(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	af00      	add	r7, sp, #0
	if(Flag.TIM3_IT==1)
 800e044:	4b52      	ldr	r3, [pc, #328]	; (800e190 <Encoder_Data_refresh+0x150>)
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d000      	beq.n	800e04e <Encoder_Data_refresh+0xe>
 800e04c:	e09c      	b.n	800e188 <Encoder_Data_refresh+0x148>
	{
		Flag.TIM3_IT=0;
 800e04e:	4b50      	ldr	r3, [pc, #320]	; (800e190 <Encoder_Data_refresh+0x150>)
 800e050:	2200      	movs	r2, #0
 800e052:	609a      	str	r2, [r3, #8]
		/*first menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800e054:	4b4f      	ldr	r3, [pc, #316]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d109      	bne.n	800e070 <Encoder_Data_refresh+0x30>
 800e05c:	4b4d      	ldr	r3, [pc, #308]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d005      	beq.n	800e070 <Encoder_Data_refresh+0x30>
 800e064:	4b4b      	ldr	r3, [pc, #300]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <Encoder_Data_refresh+0x30>
		{
			First_menu_data_Refresh();
 800e06c:	f7fe fcda 	bl	800ca24 <First_menu_data_Refresh>
		}
		/*second menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800e070:	4b48      	ldr	r3, [pc, #288]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d121      	bne.n	800e0bc <Encoder_Data_refresh+0x7c>
 800e078:	4b46      	ldr	r3, [pc, #280]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01d      	beq.n	800e0bc <Encoder_Data_refresh+0x7c>
 800e080:	4b44      	ldr	r3, [pc, #272]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d019      	beq.n	800e0bc <Encoder_Data_refresh+0x7c>
		{
			switch(xyz.coordinates2)
 800e088:	4b42      	ldr	r3, [pc, #264]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	2b05      	cmp	r3, #5
 800e08e:	d817      	bhi.n	800e0c0 <Encoder_Data_refresh+0x80>
 800e090:	009a      	lsls	r2, r3, #2
 800e092:	4b41      	ldr	r3, [pc, #260]	; (800e198 <Encoder_Data_refresh+0x158>)
 800e094:	18d3      	adds	r3, r2, r3
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	469f      	mov	pc, r3
			{
				case 1:break;
				case 2://rate
				{
					if(xyz.coordinates3==1)//I rate
 800e09a:	4b3e      	ldr	r3, [pc, #248]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d102      	bne.n	800e0a8 <Encoder_Data_refresh+0x68>
					{
						IRate_data_Refresh();
 800e0a2:	f7ff fbbf 	bl	800d824 <IRate_data_Refresh>
					}
					else if(xyz.coordinates3==2)//V rate
					{
						VRate_data_Refresh();
					}
					break;
 800e0a6:	e00d      	b.n	800e0c4 <Encoder_Data_refresh+0x84>
					else if(xyz.coordinates3==2)//V rate
 800e0a8:	4b3a      	ldr	r3, [pc, #232]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d109      	bne.n	800e0c4 <Encoder_Data_refresh+0x84>
						VRate_data_Refresh();
 800e0b0:	f7ff f9b4 	bl	800d41c <VRate_data_Refresh>
					break;
 800e0b4:	e006      	b.n	800e0c4 <Encoder_Data_refresh+0x84>
				}
				case 3:break;
				case 4://delay cycle on/off
				{
					Timer_data_Refresh();
 800e0b6:	f7ff fd79 	bl	800dbac <Timer_data_Refresh>
					break;
 800e0ba:	e004      	b.n	800e0c6 <Encoder_Data_refresh+0x86>
					}
					break;
				}
				default: break;
			}
		}
 800e0bc:	46c0      	nop			; (mov r8, r8)
 800e0be:	e002      	b.n	800e0c6 <Encoder_Data_refresh+0x86>
				default: break;
 800e0c0:	46c0      	nop			; (mov r8, r8)
 800e0c2:	e000      	b.n	800e0c6 <Encoder_Data_refresh+0x86>
					break;
 800e0c4:	46c0      	nop			; (mov r8, r8)
		/*V I set*/
		if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e0c6:	4b33      	ldr	r3, [pc, #204]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	d110      	bne.n	800e0f0 <Encoder_Data_refresh+0xb0>
 800e0ce:	4b31      	ldr	r3, [pc, #196]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00c      	beq.n	800e0f0 <Encoder_Data_refresh+0xb0>
		{
			switch(xyz.coordinates2)
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d002      	beq.n	800e0e4 <Encoder_Data_refresh+0xa4>
 800e0de:	2b02      	cmp	r3, #2
 800e0e0:	d003      	beq.n	800e0ea <Encoder_Data_refresh+0xaa>
 800e0e2:	e006      	b.n	800e0f2 <Encoder_Data_refresh+0xb2>
			{
				case 1:
				{
					Iset_data_Refresh();
 800e0e4:	f7ff f846 	bl	800d174 <Iset_data_Refresh>
					break;
 800e0e8:	e003      	b.n	800e0f2 <Encoder_Data_refresh+0xb2>
				}
				case 2:
				{
					Vset_data_Refresh();
 800e0ea:	f7fe fef5 	bl	800ced8 <Vset_data_Refresh>
					break;
 800e0ee:	e000      	b.n	800e0f2 <Encoder_Data_refresh+0xb2>
				}

			}

		}
 800e0f0:	46c0      	nop			; (mov r8, r8)
		/*save load */
		if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800e0f2:	4b28      	ldr	r3, [pc, #160]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d110      	bne.n	800e11c <Encoder_Data_refresh+0xdc>
 800e0fa:	4b26      	ldr	r3, [pc, #152]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00c      	beq.n	800e11c <Encoder_Data_refresh+0xdc>
		{
			switch(xyz.coordinates2)
 800e102:	4b24      	ldr	r3, [pc, #144]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d002      	beq.n	800e110 <Encoder_Data_refresh+0xd0>
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d003      	beq.n	800e116 <Encoder_Data_refresh+0xd6>
 800e10e:	e006      	b.n	800e11e <Encoder_Data_refresh+0xde>
			{
				case 1://save
				{
					Save_data_Refresh();
 800e110:	f7ff fc38 	bl	800d984 <Save_data_Refresh>
					break;
 800e114:	e003      	b.n	800e11e <Encoder_Data_refresh+0xde>
				}
				case 2://recall
				{
					Recall_data_Refresh();
 800e116:	f7ff fd2f 	bl	800db78 <Recall_data_Refresh>
					break;
 800e11a:	e000      	b.n	800e11e <Encoder_Data_refresh+0xde>
				}

			}
		}
 800e11c:	46c0      	nop			; (mov r8, r8)
		/*light set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==1)
 800e11e:	4b1d      	ldr	r3, [pc, #116]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b01      	cmp	r3, #1
 800e124:	d109      	bne.n	800e13a <Encoder_Data_refresh+0xfa>
 800e126:	4b1b      	ldr	r3, [pc, #108]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	2b06      	cmp	r3, #6
 800e12c:	d105      	bne.n	800e13a <Encoder_Data_refresh+0xfa>
 800e12e:	4b19      	ldr	r3, [pc, #100]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d101      	bne.n	800e13a <Encoder_Data_refresh+0xfa>
		{
			Light_data_Refresh();
 800e136:	f7ff fdd3 	bl	800dce0 <Light_data_Refresh>
		}
		/*FAN set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==3)
 800e13a:	4b16      	ldr	r3, [pc, #88]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d109      	bne.n	800e156 <Encoder_Data_refresh+0x116>
 800e142:	4b14      	ldr	r3, [pc, #80]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	2b06      	cmp	r3, #6
 800e148:	d105      	bne.n	800e156 <Encoder_Data_refresh+0x116>
 800e14a:	4b12      	ldr	r3, [pc, #72]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d101      	bne.n	800e156 <Encoder_Data_refresh+0x116>
		{
			FAN_data_Refresh();
 800e152:	f7ff fdf1 	bl	800dd38 <FAN_data_Refresh>
		}

		if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800e156:	4b0f      	ldr	r3, [pc, #60]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d114      	bne.n	800e188 <Encoder_Data_refresh+0x148>
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	2b08      	cmp	r3, #8
 800e164:	d110      	bne.n	800e188 <Encoder_Data_refresh+0x148>
		{
			switch(xyz.coordinates3)
 800e166:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <Encoder_Data_refresh+0x154>)
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	dc02      	bgt.n	800e174 <Encoder_Data_refresh+0x134>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	dc04      	bgt.n	800e17c <Encoder_Data_refresh+0x13c>
		}


	}

}
 800e172:	e00a      	b.n	800e18a <Encoder_Data_refresh+0x14a>
 800e174:	3b03      	subs	r3, #3
			switch(xyz.coordinates3)
 800e176:	2b01      	cmp	r3, #1
 800e178:	d807      	bhi.n	800e18a <Encoder_Data_refresh+0x14a>
 800e17a:	e002      	b.n	800e182 <Encoder_Data_refresh+0x142>
					Calibration_V_data_Refresh();
 800e17c:	f7fe fc70 	bl	800ca60 <Calibration_V_data_Refresh>
					break;
 800e180:	e003      	b.n	800e18a <Encoder_Data_refresh+0x14a>
					Calibration_I_data_Refresh();
 800e182:	f7fe fd8b 	bl	800cc9c <Calibration_I_data_Refresh>
					break;
 800e186:	e000      	b.n	800e18a <Encoder_Data_refresh+0x14a>
		}
 800e188:	46c0      	nop			; (mov r8, r8)
}
 800e18a:	46c0      	nop			; (mov r8, r8)
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20003378 	.word	0x20003378
 800e194:	200039e0 	.word	0x200039e0
 800e198:	0801827c 	.word	0x0801827c

0800e19c <Encoder_Enter_Handle>:
 * @brief  编码器按键动作
 * @param  none
 * @retval None
 */
void Encoder_Enter_Handle(void)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	af00      	add	r7, sp, #0

	static 	FunctionalState ENCODER_PRESS=DISABLE;
	static int count;

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET)
 800e1a0:	2380      	movs	r3, #128	; 0x80
 800e1a2:	005a      	lsls	r2, r3, #1
 800e1a4:	23a0      	movs	r3, #160	; 0xa0
 800e1a6:	05db      	lsls	r3, r3, #23
 800e1a8:	0011      	movs	r1, r2
 800e1aa:	0018      	movs	r0, r3
 800e1ac:	f7f8 feb0 	bl	8006f10 <HAL_GPIO_ReadPin>
 800e1b0:	1e03      	subs	r3, r0, #0
 800e1b2:	d10f      	bne.n	800e1d4 <Encoder_Enter_Handle+0x38>
	{

		if(++count>=5)
 800e1b4:	4b19      	ldr	r3, [pc, #100]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	4b18      	ldr	r3, [pc, #96]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	4b17      	ldr	r3, [pc, #92]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b04      	cmp	r3, #4
 800e1c4:	dd26      	ble.n	800e214 <Encoder_Enter_Handle+0x78>
		{
			count=5;
 800e1c6:	4b15      	ldr	r3, [pc, #84]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e1c8:	2205      	movs	r2, #5
 800e1ca:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=ENABLE;
 800e1cc:	4b14      	ldr	r3, [pc, #80]	; (800e220 <Encoder_Enter_Handle+0x84>)
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	701a      	strb	r2, [r3, #0]
		}

	}


}
 800e1d2:	e01f      	b.n	800e214 <Encoder_Enter_Handle+0x78>
	else if(ENCODER_PRESS==ENABLE && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_SET)
 800e1d4:	4b12      	ldr	r3, [pc, #72]	; (800e220 <Encoder_Enter_Handle+0x84>)
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d11b      	bne.n	800e214 <Encoder_Enter_Handle+0x78>
 800e1dc:	2380      	movs	r3, #128	; 0x80
 800e1de:	005a      	lsls	r2, r3, #1
 800e1e0:	23a0      	movs	r3, #160	; 0xa0
 800e1e2:	05db      	lsls	r3, r3, #23
 800e1e4:	0011      	movs	r1, r2
 800e1e6:	0018      	movs	r0, r3
 800e1e8:	f7f8 fe92 	bl	8006f10 <HAL_GPIO_ReadPin>
 800e1ec:	0003      	movs	r3, r0
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d110      	bne.n	800e214 <Encoder_Enter_Handle+0x78>
		if(--count<=0)
 800e1f2:	4b0a      	ldr	r3, [pc, #40]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	1e5a      	subs	r2, r3, #1
 800e1f8:	4b08      	ldr	r3, [pc, #32]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	4b07      	ldr	r3, [pc, #28]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	dc07      	bgt.n	800e214 <Encoder_Enter_Handle+0x78>
			count=0;
 800e204:	4b05      	ldr	r3, [pc, #20]	; (800e21c <Encoder_Enter_Handle+0x80>)
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=DISABLE;
 800e20a:	4b05      	ldr	r3, [pc, #20]	; (800e220 <Encoder_Enter_Handle+0x84>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	701a      	strb	r2, [r3, #0]
			enter_action();//动作响应
 800e210:	f7ff fde2 	bl	800ddd8 <enter_action>
}
 800e214:	46c0      	nop			; (mov r8, r8)
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	46c0      	nop			; (mov r8, r8)
 800e21c:	20003968 	.word	0x20003968
 800e220:	2000396c 	.word	0x2000396c

0800e224 <__NVIC_SystemReset>:
{
 800e224:	b580      	push	{r7, lr}
 800e226:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e228:	f3bf 8f4f 	dsb	sy
}
 800e22c:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e22e:	4b04      	ldr	r3, [pc, #16]	; (800e240 <__NVIC_SystemReset+0x1c>)
 800e230:	4a04      	ldr	r2, [pc, #16]	; (800e244 <__NVIC_SystemReset+0x20>)
 800e232:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e234:	f3bf 8f4f 	dsb	sy
}
 800e238:	46c0      	nop			; (mov r8, r8)
    __NOP();
 800e23a:	46c0      	nop			; (mov r8, r8)
 800e23c:	e7fd      	b.n	800e23a <__NVIC_SystemReset+0x16>
 800e23e:	46c0      	nop			; (mov r8, r8)
 800e240:	e000ed00 	.word	0xe000ed00
 800e244:	05fa0004 	.word	0x05fa0004

0800e248 <String_To_Float>:
 * @brief  将设定电压电流功率字符数组变为浮点数
 * @param	数组名
 * @retval 对应的浮点数
 */
float String_To_Float(char* string)
{
 800e248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24a:	b087      	sub	sp, #28
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]

	float sum=0.0;
 800e250:	2300      	movs	r3, #0
 800e252:	617b      	str	r3, [r7, #20]
	/*V set I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e254:	4bdc      	ldr	r3, [pc, #880]	; (800e5c8 <String_To_Float+0x380>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d000      	beq.n	800e25e <String_To_Float+0x16>
 800e25c:	e081      	b.n	800e362 <String_To_Float+0x11a>
 800e25e:	4bda      	ldr	r3, [pc, #872]	; (800e5c8 <String_To_Float+0x380>)
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d100      	bne.n	800e268 <String_To_Float+0x20>
 800e266:	e07c      	b.n	800e362 <String_To_Float+0x11a>
	{
		for(uint8_t i=0;i<3;i++)
 800e268:	2313      	movs	r3, #19
 800e26a:	18fb      	adds	r3, r7, r3
 800e26c:	2200      	movs	r2, #0
 800e26e:	701a      	strb	r2, [r3, #0]
 800e270:	e038      	b.n	800e2e4 <String_To_Float+0x9c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e272:	2613      	movs	r6, #19
 800e274:	19bb      	adds	r3, r7, r6
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	18d3      	adds	r3, r2, r3
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	3b30      	subs	r3, #48	; 0x30
 800e280:	0018      	movs	r0, r3
 800e282:	f7f4 fdbf 	bl	8002e04 <__aeabi_i2d>
 800e286:	0004      	movs	r4, r0
 800e288:	000d      	movs	r5, r1
 800e28a:	19bb      	adds	r3, r7, r6
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	2202      	movs	r2, #2
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	0018      	movs	r0, r3
 800e294:	f7f4 fdb6 	bl	8002e04 <__aeabi_i2d>
 800e298:	0002      	movs	r2, r0
 800e29a:	000b      	movs	r3, r1
 800e29c:	2000      	movs	r0, #0
 800e29e:	49cb      	ldr	r1, [pc, #812]	; (800e5cc <String_To_Float+0x384>)
 800e2a0:	f008 fe9a 	bl	8016fd8 <pow>
 800e2a4:	0002      	movs	r2, r0
 800e2a6:	000b      	movs	r3, r1
 800e2a8:	0020      	movs	r0, r4
 800e2aa:	0029      	movs	r1, r5
 800e2ac:	f7f3 ff58 	bl	8002160 <__aeabi_dmul>
 800e2b0:	0002      	movs	r2, r0
 800e2b2:	000b      	movs	r3, r1
 800e2b4:	0014      	movs	r4, r2
 800e2b6:	001d      	movs	r5, r3
 800e2b8:	6978      	ldr	r0, [r7, #20]
 800e2ba:	f7f4 fdf9 	bl	8002eb0 <__aeabi_f2d>
 800e2be:	0002      	movs	r2, r0
 800e2c0:	000b      	movs	r3, r1
 800e2c2:	0020      	movs	r0, r4
 800e2c4:	0029      	movs	r1, r5
 800e2c6:	f7f3 f80d 	bl	80012e4 <__aeabi_dadd>
 800e2ca:	0002      	movs	r2, r0
 800e2cc:	000b      	movs	r3, r1
 800e2ce:	0010      	movs	r0, r2
 800e2d0:	0019      	movs	r1, r3
 800e2d2:	f7f4 fe35 	bl	8002f40 <__aeabi_d2f>
 800e2d6:	1c03      	adds	r3, r0, #0
 800e2d8:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<3;i++)
 800e2da:	19bb      	adds	r3, r7, r6
 800e2dc:	781a      	ldrb	r2, [r3, #0]
 800e2de:	19bb      	adds	r3, r7, r6
 800e2e0:	3201      	adds	r2, #1
 800e2e2:	701a      	strb	r2, [r3, #0]
 800e2e4:	2313      	movs	r3, #19
 800e2e6:	18fb      	adds	r3, r7, r3
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d9c1      	bls.n	800e272 <String_To_Float+0x2a>
		}
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e2ee:	2312      	movs	r3, #18
 800e2f0:	18fb      	adds	r3, r7, r3
 800e2f2:	2204      	movs	r2, #4
 800e2f4:	701a      	strb	r2, [r3, #0]
 800e2f6:	e02d      	b.n	800e354 <String_To_Float+0x10c>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e2f8:	2512      	movs	r5, #18
 800e2fa:	197b      	adds	r3, r7, r5
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	18d3      	adds	r3, r2, r3
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	3b30      	subs	r3, #48	; 0x30
 800e306:	0018      	movs	r0, r3
 800e308:	f7f2 ff9e 	bl	8001248 <__aeabi_i2f>
 800e30c:	1c04      	adds	r4, r0, #0
 800e30e:	197b      	adds	r3, r7, r5
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	3b03      	subs	r3, #3
 800e314:	0018      	movs	r0, r3
 800e316:	f7f4 fd75 	bl	8002e04 <__aeabi_i2d>
 800e31a:	0002      	movs	r2, r0
 800e31c:	000b      	movs	r3, r1
 800e31e:	2000      	movs	r0, #0
 800e320:	49aa      	ldr	r1, [pc, #680]	; (800e5cc <String_To_Float+0x384>)
 800e322:	f008 fe59 	bl	8016fd8 <pow>
 800e326:	0002      	movs	r2, r0
 800e328:	000b      	movs	r3, r1
 800e32a:	0010      	movs	r0, r2
 800e32c:	0019      	movs	r1, r3
 800e32e:	f7f4 fe07 	bl	8002f40 <__aeabi_d2f>
 800e332:	1c03      	adds	r3, r0, #0
 800e334:	1c19      	adds	r1, r3, #0
 800e336:	1c20      	adds	r0, r4, #0
 800e338:	f7f2 faca 	bl	80008d0 <__aeabi_fdiv>
 800e33c:	1c03      	adds	r3, r0, #0
 800e33e:	1c19      	adds	r1, r3, #0
 800e340:	6978      	ldr	r0, [r7, #20]
 800e342:	f7f2 f927 	bl	8000594 <__aeabi_fadd>
 800e346:	1c03      	adds	r3, r0, #0
 800e348:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e34a:	197b      	adds	r3, r7, r5
 800e34c:	781a      	ldrb	r2, [r3, #0]
 800e34e:	197b      	adds	r3, r7, r5
 800e350:	3201      	adds	r2, #1
 800e352:	701a      	strb	r2, [r3, #0]
 800e354:	2312      	movs	r3, #18
 800e356:	18fb      	adds	r3, r7, r3
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	2b05      	cmp	r3, #5
 800e35c:	d9cc      	bls.n	800e2f8 <String_To_Float+0xb0>
		}
		return sum;
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	e284      	b.n	800e86c <String_To_Float+0x624>
	}
	//rata set
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 800e362:	4b99      	ldr	r3, [pc, #612]	; (800e5c8 <String_To_Float+0x380>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d000      	beq.n	800e36c <String_To_Float+0x124>
 800e36a:	e085      	b.n	800e478 <String_To_Float+0x230>
 800e36c:	4b96      	ldr	r3, [pc, #600]	; (800e5c8 <String_To_Float+0x380>)
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	2b02      	cmp	r3, #2
 800e372:	d000      	beq.n	800e376 <String_To_Float+0x12e>
 800e374:	e080      	b.n	800e478 <String_To_Float+0x230>
 800e376:	4b94      	ldr	r3, [pc, #592]	; (800e5c8 <String_To_Float+0x380>)
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d100      	bne.n	800e380 <String_To_Float+0x138>
 800e37e:	e07b      	b.n	800e478 <String_To_Float+0x230>
	{
		for(uint8_t i=0;i<1;i++)
 800e380:	2311      	movs	r3, #17
 800e382:	18fb      	adds	r3, r7, r3
 800e384:	2200      	movs	r2, #0
 800e386:	701a      	strb	r2, [r3, #0]
 800e388:	e037      	b.n	800e3fa <String_To_Float+0x1b2>
		{
			sum+=(string[i]-'0')*(pow(10,(0-i)));
 800e38a:	2611      	movs	r6, #17
 800e38c:	19bb      	adds	r3, r7, r6
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	18d3      	adds	r3, r2, r3
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	3b30      	subs	r3, #48	; 0x30
 800e398:	0018      	movs	r0, r3
 800e39a:	f7f4 fd33 	bl	8002e04 <__aeabi_i2d>
 800e39e:	0004      	movs	r4, r0
 800e3a0:	000d      	movs	r5, r1
 800e3a2:	19bb      	adds	r3, r7, r6
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	425b      	negs	r3, r3
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	f7f4 fd2b 	bl	8002e04 <__aeabi_i2d>
 800e3ae:	0002      	movs	r2, r0
 800e3b0:	000b      	movs	r3, r1
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	4985      	ldr	r1, [pc, #532]	; (800e5cc <String_To_Float+0x384>)
 800e3b6:	f008 fe0f 	bl	8016fd8 <pow>
 800e3ba:	0002      	movs	r2, r0
 800e3bc:	000b      	movs	r3, r1
 800e3be:	0020      	movs	r0, r4
 800e3c0:	0029      	movs	r1, r5
 800e3c2:	f7f3 fecd 	bl	8002160 <__aeabi_dmul>
 800e3c6:	0002      	movs	r2, r0
 800e3c8:	000b      	movs	r3, r1
 800e3ca:	0014      	movs	r4, r2
 800e3cc:	001d      	movs	r5, r3
 800e3ce:	6978      	ldr	r0, [r7, #20]
 800e3d0:	f7f4 fd6e 	bl	8002eb0 <__aeabi_f2d>
 800e3d4:	0002      	movs	r2, r0
 800e3d6:	000b      	movs	r3, r1
 800e3d8:	0020      	movs	r0, r4
 800e3da:	0029      	movs	r1, r5
 800e3dc:	f7f2 ff82 	bl	80012e4 <__aeabi_dadd>
 800e3e0:	0002      	movs	r2, r0
 800e3e2:	000b      	movs	r3, r1
 800e3e4:	0010      	movs	r0, r2
 800e3e6:	0019      	movs	r1, r3
 800e3e8:	f7f4 fdaa 	bl	8002f40 <__aeabi_d2f>
 800e3ec:	1c03      	adds	r3, r0, #0
 800e3ee:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<1;i++)
 800e3f0:	19bb      	adds	r3, r7, r6
 800e3f2:	781a      	ldrb	r2, [r3, #0]
 800e3f4:	19bb      	adds	r3, r7, r6
 800e3f6:	3201      	adds	r2, #1
 800e3f8:	701a      	strb	r2, [r3, #0]
 800e3fa:	2311      	movs	r3, #17
 800e3fc:	18fb      	adds	r3, r7, r3
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0c2      	beq.n	800e38a <String_To_Float+0x142>
		}
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e404:	2310      	movs	r3, #16
 800e406:	18fb      	adds	r3, r7, r3
 800e408:	2202      	movs	r2, #2
 800e40a:	701a      	strb	r2, [r3, #0]
 800e40c:	e02d      	b.n	800e46a <String_To_Float+0x222>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-1)));
 800e40e:	2510      	movs	r5, #16
 800e410:	197b      	adds	r3, r7, r5
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	18d3      	adds	r3, r2, r3
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	3b30      	subs	r3, #48	; 0x30
 800e41c:	0018      	movs	r0, r3
 800e41e:	f7f2 ff13 	bl	8001248 <__aeabi_i2f>
 800e422:	1c04      	adds	r4, r0, #0
 800e424:	197b      	adds	r3, r7, r5
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	3b01      	subs	r3, #1
 800e42a:	0018      	movs	r0, r3
 800e42c:	f7f4 fcea 	bl	8002e04 <__aeabi_i2d>
 800e430:	0002      	movs	r2, r0
 800e432:	000b      	movs	r3, r1
 800e434:	2000      	movs	r0, #0
 800e436:	4965      	ldr	r1, [pc, #404]	; (800e5cc <String_To_Float+0x384>)
 800e438:	f008 fdce 	bl	8016fd8 <pow>
 800e43c:	0002      	movs	r2, r0
 800e43e:	000b      	movs	r3, r1
 800e440:	0010      	movs	r0, r2
 800e442:	0019      	movs	r1, r3
 800e444:	f7f4 fd7c 	bl	8002f40 <__aeabi_d2f>
 800e448:	1c03      	adds	r3, r0, #0
 800e44a:	1c19      	adds	r1, r3, #0
 800e44c:	1c20      	adds	r0, r4, #0
 800e44e:	f7f2 fa3f 	bl	80008d0 <__aeabi_fdiv>
 800e452:	1c03      	adds	r3, r0, #0
 800e454:	1c19      	adds	r1, r3, #0
 800e456:	6978      	ldr	r0, [r7, #20]
 800e458:	f7f2 f89c 	bl	8000594 <__aeabi_fadd>
 800e45c:	1c03      	adds	r3, r0, #0
 800e45e:	617b      	str	r3, [r7, #20]
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e460:	197b      	adds	r3, r7, r5
 800e462:	781a      	ldrb	r2, [r3, #0]
 800e464:	197b      	adds	r3, r7, r5
 800e466:	3201      	adds	r2, #1
 800e468:	701a      	strb	r2, [r3, #0]
 800e46a:	2310      	movs	r3, #16
 800e46c:	18fb      	adds	r3, r7, r3
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	2b03      	cmp	r3, #3
 800e472:	d9cc      	bls.n	800e40e <String_To_Float+0x1c6>
		}
		return sum;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	e1f9      	b.n	800e86c <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))
 800e478:	4b53      	ldr	r3, [pc, #332]	; (800e5c8 <String_To_Float+0x380>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d14c      	bne.n	800e51a <String_To_Float+0x2d2>
 800e480:	4b51      	ldr	r3, [pc, #324]	; (800e5c8 <String_To_Float+0x380>)
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	2b05      	cmp	r3, #5
 800e486:	d148      	bne.n	800e51a <String_To_Float+0x2d2>
 800e488:	4b4f      	ldr	r3, [pc, #316]	; (800e5c8 <String_To_Float+0x380>)
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d144      	bne.n	800e51a <String_To_Float+0x2d2>
	{
		for(uint8_t i=0;i<2;i++)
 800e490:	230f      	movs	r3, #15
 800e492:	18fb      	adds	r3, r7, r3
 800e494:	2200      	movs	r2, #0
 800e496:	701a      	strb	r2, [r3, #0]
 800e498:	e038      	b.n	800e50c <String_To_Float+0x2c4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e49a:	260f      	movs	r6, #15
 800e49c:	19bb      	adds	r3, r7, r6
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	18d3      	adds	r3, r2, r3
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	3b30      	subs	r3, #48	; 0x30
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f7f4 fcab 	bl	8002e04 <__aeabi_i2d>
 800e4ae:	0004      	movs	r4, r0
 800e4b0:	000d      	movs	r5, r1
 800e4b2:	19bb      	adds	r3, r7, r6
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	0018      	movs	r0, r3
 800e4bc:	f7f4 fca2 	bl	8002e04 <__aeabi_i2d>
 800e4c0:	0002      	movs	r2, r0
 800e4c2:	000b      	movs	r3, r1
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	4941      	ldr	r1, [pc, #260]	; (800e5cc <String_To_Float+0x384>)
 800e4c8:	f008 fd86 	bl	8016fd8 <pow>
 800e4cc:	0002      	movs	r2, r0
 800e4ce:	000b      	movs	r3, r1
 800e4d0:	0020      	movs	r0, r4
 800e4d2:	0029      	movs	r1, r5
 800e4d4:	f7f3 fe44 	bl	8002160 <__aeabi_dmul>
 800e4d8:	0002      	movs	r2, r0
 800e4da:	000b      	movs	r3, r1
 800e4dc:	0014      	movs	r4, r2
 800e4de:	001d      	movs	r5, r3
 800e4e0:	6978      	ldr	r0, [r7, #20]
 800e4e2:	f7f4 fce5 	bl	8002eb0 <__aeabi_f2d>
 800e4e6:	0002      	movs	r2, r0
 800e4e8:	000b      	movs	r3, r1
 800e4ea:	0020      	movs	r0, r4
 800e4ec:	0029      	movs	r1, r5
 800e4ee:	f7f2 fef9 	bl	80012e4 <__aeabi_dadd>
 800e4f2:	0002      	movs	r2, r0
 800e4f4:	000b      	movs	r3, r1
 800e4f6:	0010      	movs	r0, r2
 800e4f8:	0019      	movs	r1, r3
 800e4fa:	f7f4 fd21 	bl	8002f40 <__aeabi_d2f>
 800e4fe:	1c03      	adds	r3, r0, #0
 800e500:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800e502:	19bb      	adds	r3, r7, r6
 800e504:	781a      	ldrb	r2, [r3, #0]
 800e506:	19bb      	adds	r3, r7, r6
 800e508:	3201      	adds	r2, #1
 800e50a:	701a      	strb	r2, [r3, #0]
 800e50c:	230f      	movs	r3, #15
 800e50e:	18fb      	adds	r3, r7, r3
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d9c1      	bls.n	800e49a <String_To_Float+0x252>
		}

		return sum;
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	e1a8      	b.n	800e86c <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 800e51a:	4b2b      	ldr	r3, [pc, #172]	; (800e5c8 <String_To_Float+0x380>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d000      	beq.n	800e524 <String_To_Float+0x2dc>
 800e522:	e08a      	b.n	800e63a <String_To_Float+0x3f2>
 800e524:	4b28      	ldr	r3, [pc, #160]	; (800e5c8 <String_To_Float+0x380>)
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	2b05      	cmp	r3, #5
 800e52a:	d000      	beq.n	800e52e <String_To_Float+0x2e6>
 800e52c:	e085      	b.n	800e63a <String_To_Float+0x3f2>
 800e52e:	4b26      	ldr	r3, [pc, #152]	; (800e5c8 <String_To_Float+0x380>)
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	2b02      	cmp	r3, #2
 800e534:	d000      	beq.n	800e538 <String_To_Float+0x2f0>
 800e536:	e080      	b.n	800e63a <String_To_Float+0x3f2>
	{
		for(uint8_t i=0;i<2;i++)
 800e538:	230e      	movs	r3, #14
 800e53a:	18fb      	adds	r3, r7, r3
 800e53c:	2200      	movs	r2, #0
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	e038      	b.n	800e5b4 <String_To_Float+0x36c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e542:	260e      	movs	r6, #14
 800e544:	19bb      	adds	r3, r7, r6
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	18d3      	adds	r3, r2, r3
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	3b30      	subs	r3, #48	; 0x30
 800e550:	0018      	movs	r0, r3
 800e552:	f7f4 fc57 	bl	8002e04 <__aeabi_i2d>
 800e556:	0004      	movs	r4, r0
 800e558:	000d      	movs	r5, r1
 800e55a:	19bb      	adds	r3, r7, r6
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	2202      	movs	r2, #2
 800e560:	1ad3      	subs	r3, r2, r3
 800e562:	0018      	movs	r0, r3
 800e564:	f7f4 fc4e 	bl	8002e04 <__aeabi_i2d>
 800e568:	0002      	movs	r2, r0
 800e56a:	000b      	movs	r3, r1
 800e56c:	2000      	movs	r0, #0
 800e56e:	4917      	ldr	r1, [pc, #92]	; (800e5cc <String_To_Float+0x384>)
 800e570:	f008 fd32 	bl	8016fd8 <pow>
 800e574:	0002      	movs	r2, r0
 800e576:	000b      	movs	r3, r1
 800e578:	0020      	movs	r0, r4
 800e57a:	0029      	movs	r1, r5
 800e57c:	f7f3 fdf0 	bl	8002160 <__aeabi_dmul>
 800e580:	0002      	movs	r2, r0
 800e582:	000b      	movs	r3, r1
 800e584:	0014      	movs	r4, r2
 800e586:	001d      	movs	r5, r3
 800e588:	6978      	ldr	r0, [r7, #20]
 800e58a:	f7f4 fc91 	bl	8002eb0 <__aeabi_f2d>
 800e58e:	0002      	movs	r2, r0
 800e590:	000b      	movs	r3, r1
 800e592:	0020      	movs	r0, r4
 800e594:	0029      	movs	r1, r5
 800e596:	f7f2 fea5 	bl	80012e4 <__aeabi_dadd>
 800e59a:	0002      	movs	r2, r0
 800e59c:	000b      	movs	r3, r1
 800e59e:	0010      	movs	r0, r2
 800e5a0:	0019      	movs	r1, r3
 800e5a2:	f7f4 fccd 	bl	8002f40 <__aeabi_d2f>
 800e5a6:	1c03      	adds	r3, r0, #0
 800e5a8:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800e5aa:	19bb      	adds	r3, r7, r6
 800e5ac:	781a      	ldrb	r2, [r3, #0]
 800e5ae:	19bb      	adds	r3, r7, r6
 800e5b0:	3201      	adds	r2, #1
 800e5b2:	701a      	strb	r2, [r3, #0]
 800e5b4:	230e      	movs	r3, #14
 800e5b6:	18fb      	adds	r3, r7, r3
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d9c1      	bls.n	800e542 <String_To_Float+0x2fa>
		}
		for(uint8_t i=4;i<=5;i++)
 800e5be:	230d      	movs	r3, #13
 800e5c0:	18fb      	adds	r3, r7, r3
 800e5c2:	2204      	movs	r2, #4
 800e5c4:	701a      	strb	r2, [r3, #0]
 800e5c6:	e031      	b.n	800e62c <String_To_Float+0x3e4>
 800e5c8:	200039e0 	.word	0x200039e0
 800e5cc:	40240000 	.word	0x40240000
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e5d0:	250d      	movs	r5, #13
 800e5d2:	197b      	adds	r3, r7, r5
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	18d3      	adds	r3, r2, r3
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	3b30      	subs	r3, #48	; 0x30
 800e5de:	0018      	movs	r0, r3
 800e5e0:	f7f2 fe32 	bl	8001248 <__aeabi_i2f>
 800e5e4:	1c04      	adds	r4, r0, #0
 800e5e6:	197b      	adds	r3, r7, r5
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	3b03      	subs	r3, #3
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	f7f4 fc09 	bl	8002e04 <__aeabi_i2d>
 800e5f2:	0002      	movs	r2, r0
 800e5f4:	000b      	movs	r3, r1
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	499e      	ldr	r1, [pc, #632]	; (800e874 <String_To_Float+0x62c>)
 800e5fa:	f008 fced 	bl	8016fd8 <pow>
 800e5fe:	0002      	movs	r2, r0
 800e600:	000b      	movs	r3, r1
 800e602:	0010      	movs	r0, r2
 800e604:	0019      	movs	r1, r3
 800e606:	f7f4 fc9b 	bl	8002f40 <__aeabi_d2f>
 800e60a:	1c03      	adds	r3, r0, #0
 800e60c:	1c19      	adds	r1, r3, #0
 800e60e:	1c20      	adds	r0, r4, #0
 800e610:	f7f2 f95e 	bl	80008d0 <__aeabi_fdiv>
 800e614:	1c03      	adds	r3, r0, #0
 800e616:	1c19      	adds	r1, r3, #0
 800e618:	6978      	ldr	r0, [r7, #20]
 800e61a:	f7f1 ffbb 	bl	8000594 <__aeabi_fadd>
 800e61e:	1c03      	adds	r3, r0, #0
 800e620:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800e622:	197b      	adds	r3, r7, r5
 800e624:	781a      	ldrb	r2, [r3, #0]
 800e626:	197b      	adds	r3, r7, r5
 800e628:	3201      	adds	r2, #1
 800e62a:	701a      	strb	r2, [r3, #0]
 800e62c:	230d      	movs	r3, #13
 800e62e:	18fb      	adds	r3, r7, r3
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	2b05      	cmp	r3, #5
 800e634:	d9cc      	bls.n	800e5d0 <String_To_Float+0x388>
		}

		return sum;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	e118      	b.n	800e86c <String_To_Float+0x624>
	}
	/*save load*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 800e63a:	4b8f      	ldr	r3, [pc, #572]	; (800e878 <String_To_Float+0x630>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b03      	cmp	r3, #3
 800e640:	d000      	beq.n	800e644 <String_To_Float+0x3fc>
 800e642:	e086      	b.n	800e752 <String_To_Float+0x50a>
 800e644:	4b8c      	ldr	r3, [pc, #560]	; (800e878 <String_To_Float+0x630>)
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d100      	bne.n	800e64e <String_To_Float+0x406>
 800e64c:	e081      	b.n	800e752 <String_To_Float+0x50a>
 800e64e:	4b8a      	ldr	r3, [pc, #552]	; (800e878 <String_To_Float+0x630>)
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d100      	bne.n	800e658 <String_To_Float+0x410>
 800e656:	e07c      	b.n	800e752 <String_To_Float+0x50a>
	{
		for(uint8_t i=0;i<=2;i++)
 800e658:	230c      	movs	r3, #12
 800e65a:	18fb      	adds	r3, r7, r3
 800e65c:	2200      	movs	r2, #0
 800e65e:	701a      	strb	r2, [r3, #0]
 800e660:	e038      	b.n	800e6d4 <String_To_Float+0x48c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e662:	260c      	movs	r6, #12
 800e664:	19bb      	adds	r3, r7, r6
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	18d3      	adds	r3, r2, r3
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	3b30      	subs	r3, #48	; 0x30
 800e670:	0018      	movs	r0, r3
 800e672:	f7f4 fbc7 	bl	8002e04 <__aeabi_i2d>
 800e676:	0004      	movs	r4, r0
 800e678:	000d      	movs	r5, r1
 800e67a:	19bb      	adds	r3, r7, r6
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	2202      	movs	r2, #2
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	0018      	movs	r0, r3
 800e684:	f7f4 fbbe 	bl	8002e04 <__aeabi_i2d>
 800e688:	0002      	movs	r2, r0
 800e68a:	000b      	movs	r3, r1
 800e68c:	2000      	movs	r0, #0
 800e68e:	4979      	ldr	r1, [pc, #484]	; (800e874 <String_To_Float+0x62c>)
 800e690:	f008 fca2 	bl	8016fd8 <pow>
 800e694:	0002      	movs	r2, r0
 800e696:	000b      	movs	r3, r1
 800e698:	0020      	movs	r0, r4
 800e69a:	0029      	movs	r1, r5
 800e69c:	f7f3 fd60 	bl	8002160 <__aeabi_dmul>
 800e6a0:	0002      	movs	r2, r0
 800e6a2:	000b      	movs	r3, r1
 800e6a4:	0014      	movs	r4, r2
 800e6a6:	001d      	movs	r5, r3
 800e6a8:	6978      	ldr	r0, [r7, #20]
 800e6aa:	f7f4 fc01 	bl	8002eb0 <__aeabi_f2d>
 800e6ae:	0002      	movs	r2, r0
 800e6b0:	000b      	movs	r3, r1
 800e6b2:	0020      	movs	r0, r4
 800e6b4:	0029      	movs	r1, r5
 800e6b6:	f7f2 fe15 	bl	80012e4 <__aeabi_dadd>
 800e6ba:	0002      	movs	r2, r0
 800e6bc:	000b      	movs	r3, r1
 800e6be:	0010      	movs	r0, r2
 800e6c0:	0019      	movs	r1, r3
 800e6c2:	f7f4 fc3d 	bl	8002f40 <__aeabi_d2f>
 800e6c6:	1c03      	adds	r3, r0, #0
 800e6c8:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800e6ca:	19bb      	adds	r3, r7, r6
 800e6cc:	781a      	ldrb	r2, [r3, #0]
 800e6ce:	19bb      	adds	r3, r7, r6
 800e6d0:	3201      	adds	r2, #1
 800e6d2:	701a      	strb	r2, [r3, #0]
 800e6d4:	230c      	movs	r3, #12
 800e6d6:	18fb      	adds	r3, r7, r3
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b02      	cmp	r3, #2
 800e6dc:	d9c1      	bls.n	800e662 <String_To_Float+0x41a>
		}
		for(uint8_t i=4;i<=5;i++)
 800e6de:	230b      	movs	r3, #11
 800e6e0:	18fb      	adds	r3, r7, r3
 800e6e2:	2204      	movs	r2, #4
 800e6e4:	701a      	strb	r2, [r3, #0]
 800e6e6:	e02d      	b.n	800e744 <String_To_Float+0x4fc>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e6e8:	250b      	movs	r5, #11
 800e6ea:	197b      	adds	r3, r7, r5
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	18d3      	adds	r3, r2, r3
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	3b30      	subs	r3, #48	; 0x30
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	f7f2 fda6 	bl	8001248 <__aeabi_i2f>
 800e6fc:	1c04      	adds	r4, r0, #0
 800e6fe:	197b      	adds	r3, r7, r5
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	3b03      	subs	r3, #3
 800e704:	0018      	movs	r0, r3
 800e706:	f7f4 fb7d 	bl	8002e04 <__aeabi_i2d>
 800e70a:	0002      	movs	r2, r0
 800e70c:	000b      	movs	r3, r1
 800e70e:	2000      	movs	r0, #0
 800e710:	4958      	ldr	r1, [pc, #352]	; (800e874 <String_To_Float+0x62c>)
 800e712:	f008 fc61 	bl	8016fd8 <pow>
 800e716:	0002      	movs	r2, r0
 800e718:	000b      	movs	r3, r1
 800e71a:	0010      	movs	r0, r2
 800e71c:	0019      	movs	r1, r3
 800e71e:	f7f4 fc0f 	bl	8002f40 <__aeabi_d2f>
 800e722:	1c03      	adds	r3, r0, #0
 800e724:	1c19      	adds	r1, r3, #0
 800e726:	1c20      	adds	r0, r4, #0
 800e728:	f7f2 f8d2 	bl	80008d0 <__aeabi_fdiv>
 800e72c:	1c03      	adds	r3, r0, #0
 800e72e:	1c19      	adds	r1, r3, #0
 800e730:	6978      	ldr	r0, [r7, #20]
 800e732:	f7f1 ff2f 	bl	8000594 <__aeabi_fadd>
 800e736:	1c03      	adds	r3, r0, #0
 800e738:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800e73a:	197b      	adds	r3, r7, r5
 800e73c:	781a      	ldrb	r2, [r3, #0]
 800e73e:	197b      	adds	r3, r7, r5
 800e740:	3201      	adds	r2, #1
 800e742:	701a      	strb	r2, [r3, #0]
 800e744:	230b      	movs	r3, #11
 800e746:	18fb      	adds	r3, r7, r3
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	2b05      	cmp	r3, #5
 800e74c:	d9cc      	bls.n	800e6e8 <String_To_Float+0x4a0>
		}

		return sum;
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	e08c      	b.n	800e86c <String_To_Float+0x624>
	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))
 800e752:	4b49      	ldr	r3, [pc, #292]	; (800e878 <String_To_Float+0x630>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d000      	beq.n	800e75c <String_To_Float+0x514>
 800e75a:	e086      	b.n	800e86a <String_To_Float+0x622>
 800e75c:	4b46      	ldr	r3, [pc, #280]	; (800e878 <String_To_Float+0x630>)
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	2b08      	cmp	r3, #8
 800e762:	d000      	beq.n	800e766 <String_To_Float+0x51e>
 800e764:	e081      	b.n	800e86a <String_To_Float+0x622>
 800e766:	4b44      	ldr	r3, [pc, #272]	; (800e878 <String_To_Float+0x630>)
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d100      	bne.n	800e770 <String_To_Float+0x528>
 800e76e:	e07c      	b.n	800e86a <String_To_Float+0x622>
	{
		for(uint8_t i=0;i<=2;i++)
 800e770:	230a      	movs	r3, #10
 800e772:	18fb      	adds	r3, r7, r3
 800e774:	2200      	movs	r2, #0
 800e776:	701a      	strb	r2, [r3, #0]
 800e778:	e038      	b.n	800e7ec <String_To_Float+0x5a4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e77a:	260a      	movs	r6, #10
 800e77c:	19bb      	adds	r3, r7, r6
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	18d3      	adds	r3, r2, r3
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	3b30      	subs	r3, #48	; 0x30
 800e788:	0018      	movs	r0, r3
 800e78a:	f7f4 fb3b 	bl	8002e04 <__aeabi_i2d>
 800e78e:	0004      	movs	r4, r0
 800e790:	000d      	movs	r5, r1
 800e792:	19bb      	adds	r3, r7, r6
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2202      	movs	r2, #2
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	0018      	movs	r0, r3
 800e79c:	f7f4 fb32 	bl	8002e04 <__aeabi_i2d>
 800e7a0:	0002      	movs	r2, r0
 800e7a2:	000b      	movs	r3, r1
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	4933      	ldr	r1, [pc, #204]	; (800e874 <String_To_Float+0x62c>)
 800e7a8:	f008 fc16 	bl	8016fd8 <pow>
 800e7ac:	0002      	movs	r2, r0
 800e7ae:	000b      	movs	r3, r1
 800e7b0:	0020      	movs	r0, r4
 800e7b2:	0029      	movs	r1, r5
 800e7b4:	f7f3 fcd4 	bl	8002160 <__aeabi_dmul>
 800e7b8:	0002      	movs	r2, r0
 800e7ba:	000b      	movs	r3, r1
 800e7bc:	0014      	movs	r4, r2
 800e7be:	001d      	movs	r5, r3
 800e7c0:	6978      	ldr	r0, [r7, #20]
 800e7c2:	f7f4 fb75 	bl	8002eb0 <__aeabi_f2d>
 800e7c6:	0002      	movs	r2, r0
 800e7c8:	000b      	movs	r3, r1
 800e7ca:	0020      	movs	r0, r4
 800e7cc:	0029      	movs	r1, r5
 800e7ce:	f7f2 fd89 	bl	80012e4 <__aeabi_dadd>
 800e7d2:	0002      	movs	r2, r0
 800e7d4:	000b      	movs	r3, r1
 800e7d6:	0010      	movs	r0, r2
 800e7d8:	0019      	movs	r1, r3
 800e7da:	f7f4 fbb1 	bl	8002f40 <__aeabi_d2f>
 800e7de:	1c03      	adds	r3, r0, #0
 800e7e0:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800e7e2:	19bb      	adds	r3, r7, r6
 800e7e4:	781a      	ldrb	r2, [r3, #0]
 800e7e6:	19bb      	adds	r3, r7, r6
 800e7e8:	3201      	adds	r2, #1
 800e7ea:	701a      	strb	r2, [r3, #0]
 800e7ec:	230a      	movs	r3, #10
 800e7ee:	18fb      	adds	r3, r7, r3
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d9c1      	bls.n	800e77a <String_To_Float+0x532>
		}
		for(uint8_t i=4;i<=5;i++)
 800e7f6:	2309      	movs	r3, #9
 800e7f8:	18fb      	adds	r3, r7, r3
 800e7fa:	2204      	movs	r2, #4
 800e7fc:	701a      	strb	r2, [r3, #0]
 800e7fe:	e02d      	b.n	800e85c <String_To_Float+0x614>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e800:	2509      	movs	r5, #9
 800e802:	197b      	adds	r3, r7, r5
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	18d3      	adds	r3, r2, r3
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	3b30      	subs	r3, #48	; 0x30
 800e80e:	0018      	movs	r0, r3
 800e810:	f7f2 fd1a 	bl	8001248 <__aeabi_i2f>
 800e814:	1c04      	adds	r4, r0, #0
 800e816:	197b      	adds	r3, r7, r5
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	3b03      	subs	r3, #3
 800e81c:	0018      	movs	r0, r3
 800e81e:	f7f4 faf1 	bl	8002e04 <__aeabi_i2d>
 800e822:	0002      	movs	r2, r0
 800e824:	000b      	movs	r3, r1
 800e826:	2000      	movs	r0, #0
 800e828:	4912      	ldr	r1, [pc, #72]	; (800e874 <String_To_Float+0x62c>)
 800e82a:	f008 fbd5 	bl	8016fd8 <pow>
 800e82e:	0002      	movs	r2, r0
 800e830:	000b      	movs	r3, r1
 800e832:	0010      	movs	r0, r2
 800e834:	0019      	movs	r1, r3
 800e836:	f7f4 fb83 	bl	8002f40 <__aeabi_d2f>
 800e83a:	1c03      	adds	r3, r0, #0
 800e83c:	1c19      	adds	r1, r3, #0
 800e83e:	1c20      	adds	r0, r4, #0
 800e840:	f7f2 f846 	bl	80008d0 <__aeabi_fdiv>
 800e844:	1c03      	adds	r3, r0, #0
 800e846:	1c19      	adds	r1, r3, #0
 800e848:	6978      	ldr	r0, [r7, #20]
 800e84a:	f7f1 fea3 	bl	8000594 <__aeabi_fadd>
 800e84e:	1c03      	adds	r3, r0, #0
 800e850:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800e852:	197b      	adds	r3, r7, r5
 800e854:	781a      	ldrb	r2, [r3, #0]
 800e856:	197b      	adds	r3, r7, r5
 800e858:	3201      	adds	r2, #1
 800e85a:	701a      	strb	r2, [r3, #0]
 800e85c:	2309      	movs	r3, #9
 800e85e:	18fb      	adds	r3, r7, r3
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	2b05      	cmp	r3, #5
 800e864:	d9cc      	bls.n	800e800 <String_To_Float+0x5b8>
		}

		return sum;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	e000      	b.n	800e86c <String_To_Float+0x624>
	}

	else return 0.0;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	1c18      	adds	r0, r3, #0
 800e86e:	46bd      	mov	sp, r7
 800e870:	b007      	add	sp, #28
 800e872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e874:	40240000 	.word	0x40240000
 800e878:	200039e0 	.word	0x200039e0

0800e87c <Keys_Input_Set_Voltage>:
 * @brief  数字键盘输入设定电压的处理函数
 * @param  数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Voltage(char Number)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	0002      	movs	r2, r0
 800e884:	1dfb      	adds	r3, r7, #7
 800e886:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (LOCK_UNLOCK == UNLOCK) )
 800e888:	4b23      	ldr	r3, [pc, #140]	; (800e918 <Keys_Input_Set_Voltage+0x9c>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d13f      	bne.n	800e910 <Keys_Input_Set_Voltage+0x94>
 800e890:	4b21      	ldr	r3, [pc, #132]	; (800e918 <Keys_Input_Set_Voltage+0x9c>)
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	2b02      	cmp	r3, #2
 800e896:	d13b      	bne.n	800e910 <Keys_Input_Set_Voltage+0x94>
 800e898:	4b20      	ldr	r3, [pc, #128]	; (800e91c <Keys_Input_Set_Voltage+0xa0>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d137      	bne.n	800e910 <Keys_Input_Set_Voltage+0x94>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800e8a0:	4b1f      	ldr	r3, [pc, #124]	; (800e920 <Keys_Input_Set_Voltage+0xa4>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d008      	beq.n	800e8ba <Keys_Input_Set_Voltage+0x3e>
		{
		  Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800e8a8:	4b1d      	ldr	r3, [pc, #116]	; (800e920 <Keys_Input_Set_Voltage+0xa4>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	701a      	strb	r2, [r3, #0]

			Cursor_Position = 0;                                    //指针设为0位
 800e8ae:	4b1d      	ldr	r3, [pc, #116]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	701a      	strb	r2, [r3, #0]


			String_Voltage[3] = '.';
 800e8b4:	4b1c      	ldr	r3, [pc, #112]	; (800e928 <Keys_Input_Set_Voltage+0xac>)
 800e8b6:	222e      	movs	r2, #46	; 0x2e
 800e8b8:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2)
 800e8ba:	4b1a      	ldr	r3, [pc, #104]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d10a      	bne.n	800e8d8 <Keys_Input_Set_Voltage+0x5c>
		{
			String_Voltage[Cursor_Position] = Number;
 800e8c2:	4b18      	ldr	r3, [pc, #96]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	0019      	movs	r1, r3
 800e8c8:	4b17      	ldr	r3, [pc, #92]	; (800e928 <Keys_Input_Set_Voltage+0xac>)
 800e8ca:	1dfa      	adds	r2, r7, #7
 800e8cc:	7812      	ldrb	r2, [r2, #0]
 800e8ce:	545a      	strb	r2, [r3, r1]
			Cursor_Position=4;
 800e8d0:	4b14      	ldr	r3, [pc, #80]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8d2:	2204      	movs	r2, #4
 800e8d4:	701a      	strb	r2, [r3, #0]
			return;
 800e8d6:	e01b      	b.n	800e910 <Keys_Input_Set_Voltage+0x94>
		}
		if(Cursor_Position == 5)
 800e8d8:	4b12      	ldr	r3, [pc, #72]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b05      	cmp	r3, #5
 800e8de:	d10a      	bne.n	800e8f6 <Keys_Input_Set_Voltage+0x7a>
		{
			String_Voltage[Cursor_Position] = Number;
 800e8e0:	4b10      	ldr	r3, [pc, #64]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	0019      	movs	r1, r3
 800e8e6:	4b10      	ldr	r3, [pc, #64]	; (800e928 <Keys_Input_Set_Voltage+0xac>)
 800e8e8:	1dfa      	adds	r2, r7, #7
 800e8ea:	7812      	ldrb	r2, [r2, #0]
 800e8ec:	545a      	strb	r2, [r3, r1]
			Cursor_Position = 0;
 800e8ee:	4b0d      	ldr	r3, [pc, #52]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	701a      	strb	r2, [r3, #0]
			return;
 800e8f4:	e00c      	b.n	800e910 <Keys_Input_Set_Voltage+0x94>
		}
		String_Voltage[Cursor_Position] = Number;                  //使光标位置置Number
 800e8f6:	4b0b      	ldr	r3, [pc, #44]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	0019      	movs	r1, r3
 800e8fc:	4b0a      	ldr	r3, [pc, #40]	; (800e928 <Keys_Input_Set_Voltage+0xac>)
 800e8fe:	1dfa      	adds	r2, r7, #7
 800e900:	7812      	ldrb	r2, [r2, #0]
 800e902:	545a      	strb	r2, [r3, r1]
		Cursor_Position ++;                                        //光标位置加1
 800e904:	4b07      	ldr	r3, [pc, #28]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	3301      	adds	r3, #1
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	4b05      	ldr	r3, [pc, #20]	; (800e924 <Keys_Input_Set_Voltage+0xa8>)
 800e90e:	701a      	strb	r2, [r3, #0]

	}

}
 800e910:	46bd      	mov	sp, r7
 800e912:	b002      	add	sp, #8
 800e914:	bd80      	pop	{r7, pc}
 800e916:	46c0      	nop			; (mov r8, r8)
 800e918:	200039e0 	.word	0x200039e0
 800e91c:	20003973 	.word	0x20003973
 800e920:	20002fd4 	.word	0x20002fd4
 800e924:	20003976 	.word	0x20003976
 800e928:	2000305c 	.word	0x2000305c

0800e92c <Keys_Input_Set_Current>:
 * @brief  数字键盘输入设定电流的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Current(char Number)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	0002      	movs	r2, r0
 800e934:	1dfb      	adds	r3, r7, #7
 800e936:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (LOCK_UNLOCK == UNLOCK) )
 800e938:	4b23      	ldr	r3, [pc, #140]	; (800e9c8 <Keys_Input_Set_Current+0x9c>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d13f      	bne.n	800e9c0 <Keys_Input_Set_Current+0x94>
 800e940:	4b21      	ldr	r3, [pc, #132]	; (800e9c8 <Keys_Input_Set_Current+0x9c>)
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	2b01      	cmp	r3, #1
 800e946:	d13b      	bne.n	800e9c0 <Keys_Input_Set_Current+0x94>
 800e948:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <Keys_Input_Set_Current+0xa0>)
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d137      	bne.n	800e9c0 <Keys_Input_Set_Current+0x94>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800e950:	4b1f      	ldr	r3, [pc, #124]	; (800e9d0 <Keys_Input_Set_Current+0xa4>)
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d008      	beq.n	800e96a <Keys_Input_Set_Current+0x3e>
		{
		  Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800e958:	4b1d      	ldr	r3, [pc, #116]	; (800e9d0 <Keys_Input_Set_Current+0xa4>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	701a      	strb	r2, [r3, #0]

			Cursor_Position = 9;                                    //指针设为0位
 800e95e:	4b1d      	ldr	r3, [pc, #116]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e960:	2209      	movs	r2, #9
 800e962:	701a      	strb	r2, [r3, #0]

			String_Current[3] = '.';
 800e964:	4b1c      	ldr	r3, [pc, #112]	; (800e9d8 <Keys_Input_Set_Current+0xac>)
 800e966:	222e      	movs	r2, #46	; 0x2e
 800e968:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==11)
 800e96a:	4b1a      	ldr	r3, [pc, #104]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	2b0b      	cmp	r3, #11
 800e970:	d10a      	bne.n	800e988 <Keys_Input_Set_Current+0x5c>
		{
			String_Current[Cursor_Position-9] = Number;
 800e972:	4b18      	ldr	r3, [pc, #96]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	3b09      	subs	r3, #9
 800e978:	4a17      	ldr	r2, [pc, #92]	; (800e9d8 <Keys_Input_Set_Current+0xac>)
 800e97a:	1df9      	adds	r1, r7, #7
 800e97c:	7809      	ldrb	r1, [r1, #0]
 800e97e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=13;
 800e980:	4b14      	ldr	r3, [pc, #80]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e982:	220d      	movs	r2, #13
 800e984:	701a      	strb	r2, [r3, #0]
			return;
 800e986:	e01b      	b.n	800e9c0 <Keys_Input_Set_Current+0x94>
		}
		if(Cursor_Position == 14)
 800e988:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	2b0e      	cmp	r3, #14
 800e98e:	d10a      	bne.n	800e9a6 <Keys_Input_Set_Current+0x7a>
		{
			String_Current[Cursor_Position-9] = Number;
 800e990:	4b10      	ldr	r3, [pc, #64]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	3b09      	subs	r3, #9
 800e996:	4a10      	ldr	r2, [pc, #64]	; (800e9d8 <Keys_Input_Set_Current+0xac>)
 800e998:	1df9      	adds	r1, r7, #7
 800e99a:	7809      	ldrb	r1, [r1, #0]
 800e99c:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 9;
 800e99e:	4b0d      	ldr	r3, [pc, #52]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e9a0:	2209      	movs	r2, #9
 800e9a2:	701a      	strb	r2, [r3, #0]
			return;
 800e9a4:	e00c      	b.n	800e9c0 <Keys_Input_Set_Current+0x94>
		}
		String_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800e9a6:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	3b09      	subs	r3, #9
 800e9ac:	4a0a      	ldr	r2, [pc, #40]	; (800e9d8 <Keys_Input_Set_Current+0xac>)
 800e9ae:	1df9      	adds	r1, r7, #7
 800e9b0:	7809      	ldrb	r1, [r1, #0]
 800e9b2:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800e9b4:	4b07      	ldr	r3, [pc, #28]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <Keys_Input_Set_Current+0xa8>)
 800e9be:	701a      	strb	r2, [r3, #0]


	}

}
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	b002      	add	sp, #8
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	46c0      	nop			; (mov r8, r8)
 800e9c8:	200039e0 	.word	0x200039e0
 800e9cc:	20003973 	.word	0x20003973
 800e9d0:	20002fd4 	.word	0x20002fd4
 800e9d4:	20003976 	.word	0x20003976
 800e9d8:	20003064 	.word	0x20003064

0800e9dc <Keys_Input_Set_V_Rate>:
 * @brief  数字键盘输入设定V_Rate时间的处理函数（暂定0-30）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_V_Rate(char Number)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	0002      	movs	r2, r0
 800e9e4:	1dfb      	adds	r3, r7, #7
 800e9e6:	701a      	strb	r2, [r3, #0]

	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800e9e8:	4b37      	ldr	r3, [pc, #220]	; (800eac8 <Keys_Input_Set_V_Rate+0xec>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d167      	bne.n	800eac0 <Keys_Input_Set_V_Rate+0xe4>
 800e9f0:	4b35      	ldr	r3, [pc, #212]	; (800eac8 <Keys_Input_Set_V_Rate+0xec>)
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d163      	bne.n	800eac0 <Keys_Input_Set_V_Rate+0xe4>
 800e9f8:	4b33      	ldr	r3, [pc, #204]	; (800eac8 <Keys_Input_Set_V_Rate+0xec>)
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d15f      	bne.n	800eac0 <Keys_Input_Set_V_Rate+0xe4>
 800ea00:	4b32      	ldr	r3, [pc, #200]	; (800eacc <Keys_Input_Set_V_Rate+0xf0>)
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d15b      	bne.n	800eac0 <Keys_Input_Set_V_Rate+0xe4>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ea08:	4b31      	ldr	r3, [pc, #196]	; (800ead0 <Keys_Input_Set_V_Rate+0xf4>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d020      	beq.n	800ea52 <Keys_Input_Set_V_Rate+0x76>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ea10:	4b2f      	ldr	r3, [pc, #188]	; (800ead0 <Keys_Input_Set_V_Rate+0xf4>)
 800ea12:	2200      	movs	r2, #0
 800ea14:	701a      	strb	r2, [r3, #0]

			Cursor_Position = 6;                                     //指针设为0位
 800ea16:	4b2f      	ldr	r3, [pc, #188]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800ea18:	2206      	movs	r2, #6
 800ea1a:	701a      	strb	r2, [r3, #0]

			String_V_Rate[0] = '0';                                 //初始化
 800ea1c:	4b2e      	ldr	r3, [pc, #184]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea1e:	2230      	movs	r2, #48	; 0x30
 800ea20:	701a      	strb	r2, [r3, #0]
			String_V_Rate[1] = '.';
 800ea22:	4b2d      	ldr	r3, [pc, #180]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea24:	222e      	movs	r2, #46	; 0x2e
 800ea26:	705a      	strb	r2, [r3, #1]
			String_V_Rate[2] = '0';
 800ea28:	4b2b      	ldr	r3, [pc, #172]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea2a:	2230      	movs	r2, #48	; 0x30
 800ea2c:	709a      	strb	r2, [r3, #2]
			String_V_Rate[3] = '0';
 800ea2e:	4b2a      	ldr	r3, [pc, #168]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea30:	2230      	movs	r2, #48	; 0x30
 800ea32:	70da      	strb	r2, [r3, #3]
			String_V_Rate[4] = ' ';
 800ea34:	4b28      	ldr	r3, [pc, #160]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea36:	2220      	movs	r2, #32
 800ea38:	711a      	strb	r2, [r3, #4]

			String_V_Rate[5] = 'V';
 800ea3a:	4b27      	ldr	r3, [pc, #156]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea3c:	2256      	movs	r2, #86	; 0x56
 800ea3e:	715a      	strb	r2, [r3, #5]
			String_V_Rate[6] = '/';
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea42:	222f      	movs	r2, #47	; 0x2f
 800ea44:	719a      	strb	r2, [r3, #6]
			String_V_Rate[7] = 'm';
 800ea46:	4b24      	ldr	r3, [pc, #144]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea48:	226d      	movs	r2, #109	; 0x6d
 800ea4a:	71da      	strb	r2, [r3, #7]
			String_V_Rate[8] = 's';
 800ea4c:	4b22      	ldr	r3, [pc, #136]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea4e:	2273      	movs	r2, #115	; 0x73
 800ea50:	721a      	strb	r2, [r3, #8]

		}
		String_V_Rate[5] = 'V';
 800ea52:	4b21      	ldr	r3, [pc, #132]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea54:	2256      	movs	r2, #86	; 0x56
 800ea56:	715a      	strb	r2, [r3, #5]
		String_V_Rate[6] = '/';
 800ea58:	4b1f      	ldr	r3, [pc, #124]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea5a:	222f      	movs	r2, #47	; 0x2f
 800ea5c:	719a      	strb	r2, [r3, #6]
		String_V_Rate[7] = 'm';
 800ea5e:	4b1e      	ldr	r3, [pc, #120]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea60:	226d      	movs	r2, #109	; 0x6d
 800ea62:	71da      	strb	r2, [r3, #7]
		String_V_Rate[8] = 's';
 800ea64:	4b1c      	ldr	r3, [pc, #112]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea66:	2273      	movs	r2, #115	; 0x73
 800ea68:	721a      	strb	r2, [r3, #8]

		if(Cursor_Position==0+6)
 800ea6a:	4b1a      	ldr	r3, [pc, #104]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	2b06      	cmp	r3, #6
 800ea70:	d10a      	bne.n	800ea88 <Keys_Input_Set_V_Rate+0xac>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800ea72:	4b18      	ldr	r3, [pc, #96]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	3b06      	subs	r3, #6
 800ea78:	4a17      	ldr	r2, [pc, #92]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea7a:	1df9      	adds	r1, r7, #7
 800ea7c:	7809      	ldrb	r1, [r1, #0]
 800ea7e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800ea80:	4b14      	ldr	r3, [pc, #80]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800ea82:	2208      	movs	r2, #8
 800ea84:	701a      	strb	r2, [r3, #0]
			return;
 800ea86:	e01b      	b.n	800eac0 <Keys_Input_Set_V_Rate+0xe4>
		}
		if(Cursor_Position == 3+6)
 800ea88:	4b12      	ldr	r3, [pc, #72]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	2b09      	cmp	r3, #9
 800ea8e:	d10a      	bne.n	800eaa6 <Keys_Input_Set_V_Rate+0xca>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800ea90:	4b10      	ldr	r3, [pc, #64]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	3b06      	subs	r3, #6
 800ea96:	4a10      	ldr	r2, [pc, #64]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800ea98:	1df9      	adds	r1, r7, #7
 800ea9a:	7809      	ldrb	r1, [r1, #0]
 800ea9c:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800ea9e:	4b0d      	ldr	r3, [pc, #52]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800eaa0:	2206      	movs	r2, #6
 800eaa2:	701a      	strb	r2, [r3, #0]
			return;
 800eaa4:	e00c      	b.n	800eac0 <Keys_Input_Set_V_Rate+0xe4>
		}
		String_V_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800eaa6:	4b0b      	ldr	r3, [pc, #44]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	3b06      	subs	r3, #6
 800eaac:	4a0a      	ldr	r2, [pc, #40]	; (800ead8 <Keys_Input_Set_V_Rate+0xfc>)
 800eaae:	1df9      	adds	r1, r7, #7
 800eab0:	7809      	ldrb	r1, [r1, #0]
 800eab2:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800eab4:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	3301      	adds	r3, #1
 800eaba:	b2da      	uxtb	r2, r3
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <Keys_Input_Set_V_Rate+0xf8>)
 800eabe:	701a      	strb	r2, [r3, #0]
	}


}
 800eac0:	46bd      	mov	sp, r7
 800eac2:	b002      	add	sp, #8
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	46c0      	nop			; (mov r8, r8)
 800eac8:	200039e0 	.word	0x200039e0
 800eacc:	20003973 	.word	0x20003973
 800ead0:	20002fd4 	.word	0x20002fd4
 800ead4:	20003976 	.word	0x20003976
 800ead8:	20003050 	.word	0x20003050

0800eadc <Keys_Input_Set_I_Rate>:
 * @brief  数字键盘输入设定I_Rate时间的处理函数（暂定0-10）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_I_Rate(char Number)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	0002      	movs	r2, r0
 800eae4:	1dfb      	adds	r3, r7, #7
 800eae6:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800eae8:	4b37      	ldr	r3, [pc, #220]	; (800ebc8 <Keys_Input_Set_I_Rate+0xec>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d167      	bne.n	800ebc0 <Keys_Input_Set_I_Rate+0xe4>
 800eaf0:	4b35      	ldr	r3, [pc, #212]	; (800ebc8 <Keys_Input_Set_I_Rate+0xec>)
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	2b02      	cmp	r3, #2
 800eaf6:	d163      	bne.n	800ebc0 <Keys_Input_Set_I_Rate+0xe4>
 800eaf8:	4b33      	ldr	r3, [pc, #204]	; (800ebc8 <Keys_Input_Set_I_Rate+0xec>)
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d15f      	bne.n	800ebc0 <Keys_Input_Set_I_Rate+0xe4>
 800eb00:	4b32      	ldr	r3, [pc, #200]	; (800ebcc <Keys_Input_Set_I_Rate+0xf0>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d15b      	bne.n	800ebc0 <Keys_Input_Set_I_Rate+0xe4>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                           //第一次按下按键
 800eb08:	4b31      	ldr	r3, [pc, #196]	; (800ebd0 <Keys_Input_Set_I_Rate+0xf4>)
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d020      	beq.n	800eb52 <Keys_Input_Set_I_Rate+0x76>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800eb10:	4b2f      	ldr	r3, [pc, #188]	; (800ebd0 <Keys_Input_Set_I_Rate+0xf4>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 6;                                     //指针设为0位
 800eb16:	4b2f      	ldr	r3, [pc, #188]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eb18:	2206      	movs	r2, #6
 800eb1a:	701a      	strb	r2, [r3, #0]

			String_I_Rate[0] = '0';                                  //初始化接收输入的字符串
 800eb1c:	4b2e      	ldr	r3, [pc, #184]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb1e:	2230      	movs	r2, #48	; 0x30
 800eb20:	701a      	strb	r2, [r3, #0]
			String_I_Rate[1] = '.';
 800eb22:	4b2d      	ldr	r3, [pc, #180]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb24:	222e      	movs	r2, #46	; 0x2e
 800eb26:	705a      	strb	r2, [r3, #1]
			String_I_Rate[2] = '0';
 800eb28:	4b2b      	ldr	r3, [pc, #172]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb2a:	2230      	movs	r2, #48	; 0x30
 800eb2c:	709a      	strb	r2, [r3, #2]
			String_I_Rate[3] = '0';
 800eb2e:	4b2a      	ldr	r3, [pc, #168]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb30:	2230      	movs	r2, #48	; 0x30
 800eb32:	70da      	strb	r2, [r3, #3]
			String_I_Rate[5] = ' ';
 800eb34:	4b28      	ldr	r3, [pc, #160]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb36:	2220      	movs	r2, #32
 800eb38:	715a      	strb	r2, [r3, #5]
			String_I_Rate[6] = 'A';
 800eb3a:	4b27      	ldr	r3, [pc, #156]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb3c:	2241      	movs	r2, #65	; 0x41
 800eb3e:	719a      	strb	r2, [r3, #6]
			String_I_Rate[7] = '/';
 800eb40:	4b25      	ldr	r3, [pc, #148]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb42:	222f      	movs	r2, #47	; 0x2f
 800eb44:	71da      	strb	r2, [r3, #7]
			String_I_Rate[8] = 'm';
 800eb46:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb48:	226d      	movs	r2, #109	; 0x6d
 800eb4a:	721a      	strb	r2, [r3, #8]
			String_I_Rate[9] = 's';
 800eb4c:	4b22      	ldr	r3, [pc, #136]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb4e:	2273      	movs	r2, #115	; 0x73
 800eb50:	725a      	strb	r2, [r3, #9]
		}
		String_I_Rate[6] = 'A';
 800eb52:	4b21      	ldr	r3, [pc, #132]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb54:	2241      	movs	r2, #65	; 0x41
 800eb56:	719a      	strb	r2, [r3, #6]
		String_I_Rate[7] = '/';
 800eb58:	4b1f      	ldr	r3, [pc, #124]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb5a:	222f      	movs	r2, #47	; 0x2f
 800eb5c:	71da      	strb	r2, [r3, #7]
		String_I_Rate[8] = 'm';
 800eb5e:	4b1e      	ldr	r3, [pc, #120]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb60:	226d      	movs	r2, #109	; 0x6d
 800eb62:	721a      	strb	r2, [r3, #8]
		String_I_Rate[9] = 's';
 800eb64:	4b1c      	ldr	r3, [pc, #112]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb66:	2273      	movs	r2, #115	; 0x73
 800eb68:	725a      	strb	r2, [r3, #9]

		if(Cursor_Position==0+6)
 800eb6a:	4b1a      	ldr	r3, [pc, #104]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	2b06      	cmp	r3, #6
 800eb70:	d10a      	bne.n	800eb88 <Keys_Input_Set_I_Rate+0xac>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800eb72:	4b18      	ldr	r3, [pc, #96]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	3b06      	subs	r3, #6
 800eb78:	4a17      	ldr	r2, [pc, #92]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb7a:	1df9      	adds	r1, r7, #7
 800eb7c:	7809      	ldrb	r1, [r1, #0]
 800eb7e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800eb80:	4b14      	ldr	r3, [pc, #80]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eb82:	2208      	movs	r2, #8
 800eb84:	701a      	strb	r2, [r3, #0]
			return;
 800eb86:	e01b      	b.n	800ebc0 <Keys_Input_Set_I_Rate+0xe4>
		}
		if(Cursor_Position == 3+6)
 800eb88:	4b12      	ldr	r3, [pc, #72]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	2b09      	cmp	r3, #9
 800eb8e:	d10a      	bne.n	800eba6 <Keys_Input_Set_I_Rate+0xca>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800eb90:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	3b06      	subs	r3, #6
 800eb96:	4a10      	ldr	r2, [pc, #64]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800eb98:	1df9      	adds	r1, r7, #7
 800eb9a:	7809      	ldrb	r1, [r1, #0]
 800eb9c:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800eb9e:	4b0d      	ldr	r3, [pc, #52]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eba0:	2206      	movs	r2, #6
 800eba2:	701a      	strb	r2, [r3, #0]
			return;
 800eba4:	e00c      	b.n	800ebc0 <Keys_Input_Set_I_Rate+0xe4>
		}
		String_I_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800eba6:	4b0b      	ldr	r3, [pc, #44]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	3b06      	subs	r3, #6
 800ebac:	4a0a      	ldr	r2, [pc, #40]	; (800ebd8 <Keys_Input_Set_I_Rate+0xfc>)
 800ebae:	1df9      	adds	r1, r7, #7
 800ebb0:	7809      	ldrb	r1, [r1, #0]
 800ebb2:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                       //光标位置加1
 800ebb4:	4b07      	ldr	r3, [pc, #28]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	b2da      	uxtb	r2, r3
 800ebbc:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <Keys_Input_Set_I_Rate+0xf8>)
 800ebbe:	701a      	strb	r2, [r3, #0]

	}
}
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	b002      	add	sp, #8
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	46c0      	nop			; (mov r8, r8)
 800ebc8:	200039e0 	.word	0x200039e0
 800ebcc:	20003973 	.word	0x20003973
 800ebd0:	20002fd4 	.word	0x20002fd4
 800ebd4:	20003976 	.word	0x20003976
 800ebd8:	20003044 	.word	0x20003044

0800ebdc <Keys_Input_RS232>:
 * @brief  数字键盘输入设定串口ID的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_RS232(char Number)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	0002      	movs	r2, r0
 800ebe4:	1dfb      	adds	r3, r7, #7
 800ebe6:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800ebe8:	4b1e      	ldr	r3, [pc, #120]	; (800ec64 <Keys_Input_RS232+0x88>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d136      	bne.n	800ec5e <Keys_Input_RS232+0x82>
 800ebf0:	4b1c      	ldr	r3, [pc, #112]	; (800ec64 <Keys_Input_RS232+0x88>)
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	d132      	bne.n	800ec5e <Keys_Input_RS232+0x82>
 800ebf8:	4b1a      	ldr	r3, [pc, #104]	; (800ec64 <Keys_Input_RS232+0x88>)
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d12e      	bne.n	800ec5e <Keys_Input_RS232+0x82>
 800ec00:	4b19      	ldr	r3, [pc, #100]	; (800ec68 <Keys_Input_RS232+0x8c>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d12a      	bne.n	800ec5e <Keys_Input_RS232+0x82>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ec08:	4b18      	ldr	r3, [pc, #96]	; (800ec6c <Keys_Input_RS232+0x90>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00b      	beq.n	800ec28 <Keys_Input_RS232+0x4c>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ec10:	4b16      	ldr	r3, [pc, #88]	; (800ec6c <Keys_Input_RS232+0x90>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 0;                                     //指针设为0位
 800ec16:	4b16      	ldr	r3, [pc, #88]	; (800ec70 <Keys_Input_RS232+0x94>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[0] = ' ';                                 //清空字符串
 800ec1c:	4b15      	ldr	r3, [pc, #84]	; (800ec74 <Keys_Input_RS232+0x98>)
 800ec1e:	2220      	movs	r2, #32
 800ec20:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[1] = ' ';
 800ec22:	4b14      	ldr	r3, [pc, #80]	; (800ec74 <Keys_Input_RS232+0x98>)
 800ec24:	2220      	movs	r2, #32
 800ec26:	705a      	strb	r2, [r3, #1]
		}

		if(Cursor_Position == 2)
 800ec28:	4b11      	ldr	r3, [pc, #68]	; (800ec70 <Keys_Input_RS232+0x94>)
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d103      	bne.n	800ec38 <Keys_Input_RS232+0x5c>
		{
			Cursor_Position = 0;                                     //如果光标超过范围，回到启始位置
 800ec30:	4b0f      	ldr	r3, [pc, #60]	; (800ec70 <Keys_Input_RS232+0x94>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	701a      	strb	r2, [r3, #0]
			return;
 800ec36:	e012      	b.n	800ec5e <Keys_Input_RS232+0x82>
		}

		String_RS232_ID[Cursor_Position] = Number;                  //使光标位置置Number
 800ec38:	4b0d      	ldr	r3, [pc, #52]	; (800ec70 <Keys_Input_RS232+0x94>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	0019      	movs	r1, r3
 800ec3e:	4b0d      	ldr	r3, [pc, #52]	; (800ec74 <Keys_Input_RS232+0x98>)
 800ec40:	1dfa      	adds	r2, r7, #7
 800ec42:	7812      	ldrb	r2, [r2, #0]
 800ec44:	545a      	strb	r2, [r3, r1]

		Cursor_Position ++;                                         //光标位置加1
 800ec46:	4b0a      	ldr	r3, [pc, #40]	; (800ec70 <Keys_Input_RS232+0x94>)
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	b2da      	uxtb	r2, r3
 800ec4e:	4b08      	ldr	r3, [pc, #32]	; (800ec70 <Keys_Input_RS232+0x94>)
 800ec50:	701a      	strb	r2, [r3, #0]
		Write_String_8x16AsicII(48,38,String_RS232_ID);           //显示输入值
 800ec52:	4b08      	ldr	r3, [pc, #32]	; (800ec74 <Keys_Input_RS232+0x98>)
 800ec54:	001a      	movs	r2, r3
 800ec56:	2126      	movs	r1, #38	; 0x26
 800ec58:	2030      	movs	r0, #48	; 0x30
 800ec5a:	f003 fcfd 	bl	8012658 <Write_String_8x16AsicII>
	}
}
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	b002      	add	sp, #8
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	200039e0 	.word	0x200039e0
 800ec68:	20003973 	.word	0x20003973
 800ec6c:	20002fd4 	.word	0x20002fd4
 800ec70:	20003976 	.word	0x20003976
 800ec74:	20003a70 	.word	0x20003a70

0800ec78 <Keys_Input_Cycle>:
 * @brief  数字键盘输入设定Cycle时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Cycle(char Number)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	0002      	movs	r2, r0
 800ec80:	1dfb      	adds	r3, r7, #7
 800ec82:	701a      	strb	r2, [r3, #0]
	//cycle on time
	if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800ec84:	4b4f      	ldr	r3, [pc, #316]	; (800edc4 <Keys_Input_Cycle+0x14c>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d149      	bne.n	800ed20 <Keys_Input_Cycle+0xa8>
 800ec8c:	4b4d      	ldr	r3, [pc, #308]	; (800edc4 <Keys_Input_Cycle+0x14c>)
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	2b04      	cmp	r3, #4
 800ec92:	d145      	bne.n	800ed20 <Keys_Input_Cycle+0xa8>
 800ec94:	4b4b      	ldr	r3, [pc, #300]	; (800edc4 <Keys_Input_Cycle+0x14c>)
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d141      	bne.n	800ed20 <Keys_Input_Cycle+0xa8>
 800ec9c:	4b4a      	ldr	r3, [pc, #296]	; (800edc8 <Keys_Input_Cycle+0x150>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d13d      	bne.n	800ed20 <Keys_Input_Cycle+0xa8>
	{
		String_Cycle_On[4]='s';
 800eca4:	4b49      	ldr	r3, [pc, #292]	; (800edcc <Keys_Input_Cycle+0x154>)
 800eca6:	2273      	movs	r2, #115	; 0x73
 800eca8:	711a      	strb	r2, [r3, #4]
		String_Cycle_On[8]='m';
 800ecaa:	4b48      	ldr	r3, [pc, #288]	; (800edcc <Keys_Input_Cycle+0x154>)
 800ecac:	226d      	movs	r2, #109	; 0x6d
 800ecae:	721a      	strb	r2, [r3, #8]
		String_Cycle_On[9]='s';
 800ecb0:	4b46      	ldr	r3, [pc, #280]	; (800edcc <Keys_Input_Cycle+0x154>)
 800ecb2:	2273      	movs	r2, #115	; 0x73
 800ecb4:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ecb6:	4b46      	ldr	r3, [pc, #280]	; (800edd0 <Keys_Input_Cycle+0x158>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d005      	beq.n	800ecca <Keys_Input_Cycle+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ecbe:	4b44      	ldr	r3, [pc, #272]	; (800edd0 <Keys_Input_Cycle+0x158>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 0+6;                                     //指针设为0位
 800ecc4:	4b43      	ldr	r3, [pc, #268]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ecc6:	2206      	movs	r2, #6
 800ecc8:	701a      	strb	r2, [r3, #0]
		}
		if( (Cursor_Position<4+6) || ((Cursor_Position>4+6) && (Cursor_Position<8+6)) )
 800ecca:	4b42      	ldr	r3, [pc, #264]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b09      	cmp	r3, #9
 800ecd0:	d907      	bls.n	800ece2 <Keys_Input_Cycle+0x6a>
 800ecd2:	4b40      	ldr	r3, [pc, #256]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	2b0a      	cmp	r3, #10
 800ecd8:	d90a      	bls.n	800ecf0 <Keys_Input_Cycle+0x78>
 800ecda:	4b3e      	ldr	r3, [pc, #248]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	2b0d      	cmp	r3, #13
 800ece0:	d806      	bhi.n	800ecf0 <Keys_Input_Cycle+0x78>
		{
			String_Cycle_On[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800ece2:	4b3c      	ldr	r3, [pc, #240]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	3b06      	subs	r3, #6
 800ece8:	4a38      	ldr	r2, [pc, #224]	; (800edcc <Keys_Input_Cycle+0x154>)
 800ecea:	1df9      	adds	r1, r7, #7
 800ecec:	7809      	ldrb	r1, [r1, #0]
 800ecee:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                         //光标位置加1
 800ecf0:	4b38      	ldr	r3, [pc, #224]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	b2da      	uxtb	r2, r3
 800ecf8:	4b36      	ldr	r3, [pc, #216]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ecfa:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800ecfc:	4b35      	ldr	r3, [pc, #212]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	2b0a      	cmp	r3, #10
 800ed02:	d105      	bne.n	800ed10 <Keys_Input_Cycle+0x98>
		{
			Cursor_Position +=1;//位置4不设置，跳过到下一位
 800ed04:	4b33      	ldr	r3, [pc, #204]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	b2da      	uxtb	r2, r3
 800ed0c:	4b31      	ldr	r3, [pc, #196]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed0e:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)
 800ed10:	4b30      	ldr	r3, [pc, #192]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	2b0e      	cmp	r3, #14
 800ed16:	d151      	bne.n	800edbc <Keys_Input_Cycle+0x144>
		{
			Cursor_Position=0+6;
 800ed18:	4b2e      	ldr	r3, [pc, #184]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed1a:	2206      	movs	r2, #6
 800ed1c:	701a      	strb	r2, [r3, #0]
			return;
 800ed1e:	e04d      	b.n	800edbc <Keys_Input_Cycle+0x144>
		}

	}
	//cycle off time
	else if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==3) && (LOCK_UNLOCK == UNLOCK))
 800ed20:	4b28      	ldr	r3, [pc, #160]	; (800edc4 <Keys_Input_Cycle+0x14c>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d149      	bne.n	800edbc <Keys_Input_Cycle+0x144>
 800ed28:	4b26      	ldr	r3, [pc, #152]	; (800edc4 <Keys_Input_Cycle+0x14c>)
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	2b04      	cmp	r3, #4
 800ed2e:	d145      	bne.n	800edbc <Keys_Input_Cycle+0x144>
 800ed30:	4b24      	ldr	r3, [pc, #144]	; (800edc4 <Keys_Input_Cycle+0x14c>)
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	2b03      	cmp	r3, #3
 800ed36:	d141      	bne.n	800edbc <Keys_Input_Cycle+0x144>
 800ed38:	4b23      	ldr	r3, [pc, #140]	; (800edc8 <Keys_Input_Cycle+0x150>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d13d      	bne.n	800edbc <Keys_Input_Cycle+0x144>
	{
		String_Cycle_Close[4]='s';
 800ed40:	4b25      	ldr	r3, [pc, #148]	; (800edd8 <Keys_Input_Cycle+0x160>)
 800ed42:	2273      	movs	r2, #115	; 0x73
 800ed44:	711a      	strb	r2, [r3, #4]
		String_Cycle_Close[8]='m';
 800ed46:	4b24      	ldr	r3, [pc, #144]	; (800edd8 <Keys_Input_Cycle+0x160>)
 800ed48:	226d      	movs	r2, #109	; 0x6d
 800ed4a:	721a      	strb	r2, [r3, #8]
		String_Cycle_Close[9]='s';
 800ed4c:	4b22      	ldr	r3, [pc, #136]	; (800edd8 <Keys_Input_Cycle+0x160>)
 800ed4e:	2273      	movs	r2, #115	; 0x73
 800ed50:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ed52:	4b1f      	ldr	r3, [pc, #124]	; (800edd0 <Keys_Input_Cycle+0x158>)
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d005      	beq.n	800ed66 <Keys_Input_Cycle+0xee>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ed5a:	4b1d      	ldr	r3, [pc, #116]	; (800edd0 <Keys_Input_Cycle+0x158>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 0+6;                                     //指针设为0位
 800ed60:	4b1c      	ldr	r3, [pc, #112]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed62:	2206      	movs	r2, #6
 800ed64:	701a      	strb	r2, [r3, #0]

		}
		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800ed66:	4b1b      	ldr	r3, [pc, #108]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	2b09      	cmp	r3, #9
 800ed6c:	d907      	bls.n	800ed7e <Keys_Input_Cycle+0x106>
 800ed6e:	4b19      	ldr	r3, [pc, #100]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	2b0a      	cmp	r3, #10
 800ed74:	d90a      	bls.n	800ed8c <Keys_Input_Cycle+0x114>
 800ed76:	4b17      	ldr	r3, [pc, #92]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b0d      	cmp	r3, #13
 800ed7c:	d806      	bhi.n	800ed8c <Keys_Input_Cycle+0x114>
		{
			String_Cycle_Close[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800ed7e:	4b15      	ldr	r3, [pc, #84]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	3b06      	subs	r3, #6
 800ed84:	4a14      	ldr	r2, [pc, #80]	; (800edd8 <Keys_Input_Cycle+0x160>)
 800ed86:	1df9      	adds	r1, r7, #7
 800ed88:	7809      	ldrb	r1, [r1, #0]
 800ed8a:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800ed8c:	4b11      	ldr	r3, [pc, #68]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	3301      	adds	r3, #1
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	4b0f      	ldr	r3, [pc, #60]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed96:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800ed98:	4b0e      	ldr	r3, [pc, #56]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	2b0a      	cmp	r3, #10
 800ed9e:	d105      	bne.n	800edac <Keys_Input_Cycle+0x134>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800eda0:	4b0c      	ldr	r3, [pc, #48]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	3301      	adds	r3, #1
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800edaa:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800edac:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2b0e      	cmp	r3, #14
 800edb2:	d103      	bne.n	800edbc <Keys_Input_Cycle+0x144>
		{
			Cursor_Position=0+6;
 800edb4:	4b07      	ldr	r3, [pc, #28]	; (800edd4 <Keys_Input_Cycle+0x15c>)
 800edb6:	2206      	movs	r2, #6
 800edb8:	701a      	strb	r2, [r3, #0]
			return;
 800edba:	46c0      	nop			; (mov r8, r8)

		}

	}

}
 800edbc:	46bd      	mov	sp, r7
 800edbe:	b002      	add	sp, #8
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	46c0      	nop			; (mov r8, r8)
 800edc4:	200039e0 	.word	0x200039e0
 800edc8:	20003973 	.word	0x20003973
 800edcc:	20002ffc 	.word	0x20002ffc
 800edd0:	20002fd4 	.word	0x20002fd4
 800edd4:	20003976 	.word	0x20003976
 800edd8:	20003008 	.word	0x20003008

0800eddc <Keys_Input_Delay>:
 * @brief  数字键盘输入设定Delay时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Delay(char Number)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	0002      	movs	r2, r0
 800ede4:	1dfb      	adds	r3, r7, #7
 800ede6:	701a      	strb	r2, [r3, #0]
	//设置软起动延时
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800ede8:	4b28      	ldr	r3, [pc, #160]	; (800ee8c <Keys_Input_Delay+0xb0>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d149      	bne.n	800ee84 <Keys_Input_Delay+0xa8>
 800edf0:	4b26      	ldr	r3, [pc, #152]	; (800ee8c <Keys_Input_Delay+0xb0>)
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	2b04      	cmp	r3, #4
 800edf6:	d145      	bne.n	800ee84 <Keys_Input_Delay+0xa8>
 800edf8:	4b24      	ldr	r3, [pc, #144]	; (800ee8c <Keys_Input_Delay+0xb0>)
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d141      	bne.n	800ee84 <Keys_Input_Delay+0xa8>
 800ee00:	4b23      	ldr	r3, [pc, #140]	; (800ee90 <Keys_Input_Delay+0xb4>)
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d13d      	bne.n	800ee84 <Keys_Input_Delay+0xa8>
	{
		String_Delay[4]='s';
 800ee08:	4b22      	ldr	r3, [pc, #136]	; (800ee94 <Keys_Input_Delay+0xb8>)
 800ee0a:	2273      	movs	r2, #115	; 0x73
 800ee0c:	711a      	strb	r2, [r3, #4]
		String_Delay[8]='m';
 800ee0e:	4b21      	ldr	r3, [pc, #132]	; (800ee94 <Keys_Input_Delay+0xb8>)
 800ee10:	226d      	movs	r2, #109	; 0x6d
 800ee12:	721a      	strb	r2, [r3, #8]
		String_Delay[9]='s';
 800ee14:	4b1f      	ldr	r3, [pc, #124]	; (800ee94 <Keys_Input_Delay+0xb8>)
 800ee16:	2273      	movs	r2, #115	; 0x73
 800ee18:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ee1a:	4b1f      	ldr	r3, [pc, #124]	; (800ee98 <Keys_Input_Delay+0xbc>)
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d005      	beq.n	800ee2e <Keys_Input_Delay+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ee22:	4b1d      	ldr	r3, [pc, #116]	; (800ee98 <Keys_Input_Delay+0xbc>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 6;                                     //指针设为0位
 800ee28:	4b1c      	ldr	r3, [pc, #112]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee2a:	2206      	movs	r2, #6
 800ee2c:	701a      	strb	r2, [r3, #0]
		}

		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800ee2e:	4b1b      	ldr	r3, [pc, #108]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b09      	cmp	r3, #9
 800ee34:	d907      	bls.n	800ee46 <Keys_Input_Delay+0x6a>
 800ee36:	4b19      	ldr	r3, [pc, #100]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	2b0a      	cmp	r3, #10
 800ee3c:	d90a      	bls.n	800ee54 <Keys_Input_Delay+0x78>
 800ee3e:	4b17      	ldr	r3, [pc, #92]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	2b0d      	cmp	r3, #13
 800ee44:	d806      	bhi.n	800ee54 <Keys_Input_Delay+0x78>
		{
			String_Delay[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800ee46:	4b15      	ldr	r3, [pc, #84]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	3b06      	subs	r3, #6
 800ee4c:	4a11      	ldr	r2, [pc, #68]	; (800ee94 <Keys_Input_Delay+0xb8>)
 800ee4e:	1df9      	adds	r1, r7, #7
 800ee50:	7809      	ldrb	r1, [r1, #0]
 800ee52:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800ee54:	4b11      	ldr	r3, [pc, #68]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	4b0f      	ldr	r3, [pc, #60]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee5e:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800ee60:	4b0e      	ldr	r3, [pc, #56]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	2b0a      	cmp	r3, #10
 800ee66:	d105      	bne.n	800ee74 <Keys_Input_Delay+0x98>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800ee68:	4b0c      	ldr	r3, [pc, #48]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	4b0a      	ldr	r3, [pc, #40]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee72:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800ee74:	4b09      	ldr	r3, [pc, #36]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b0e      	cmp	r3, #14
 800ee7a:	d103      	bne.n	800ee84 <Keys_Input_Delay+0xa8>
		{
			Cursor_Position=0+6;
 800ee7c:	4b07      	ldr	r3, [pc, #28]	; (800ee9c <Keys_Input_Delay+0xc0>)
 800ee7e:	2206      	movs	r2, #6
 800ee80:	701a      	strb	r2, [r3, #0]
			return;
 800ee82:	46c0      	nop			; (mov r8, r8)
		}
	}

}
 800ee84:	46bd      	mov	sp, r7
 800ee86:	b002      	add	sp, #8
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	46c0      	nop			; (mov r8, r8)
 800ee8c:	200039e0 	.word	0x200039e0
 800ee90:	20003973 	.word	0x20003973
 800ee94:	20003014 	.word	0x20003014
 800ee98:	20002fd4 	.word	0x20002fd4
 800ee9c:	20003976 	.word	0x20003976

0800eea0 <Keys_Input_Save>:

static void Keys_Input_Save(char Number)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	0002      	movs	r2, r0
 800eea8:	1dfb      	adds	r3, r7, #7
 800eeaa:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800eeac:	4b3f      	ldr	r3, [pc, #252]	; (800efac <Keys_Input_Save+0x10c>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b03      	cmp	r3, #3
 800eeb2:	d000      	beq.n	800eeb6 <Keys_Input_Save+0x16>
 800eeb4:	e076      	b.n	800efa4 <Keys_Input_Save+0x104>
 800eeb6:	4b3d      	ldr	r3, [pc, #244]	; (800efac <Keys_Input_Save+0x10c>)
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d000      	beq.n	800eec0 <Keys_Input_Save+0x20>
 800eebe:	e071      	b.n	800efa4 <Keys_Input_Save+0x104>
 800eec0:	4b3a      	ldr	r3, [pc, #232]	; (800efac <Keys_Input_Save+0x10c>)
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d100      	bne.n	800eeca <Keys_Input_Save+0x2a>
 800eec8:	e06c      	b.n	800efa4 <Keys_Input_Save+0x104>
 800eeca:	4b39      	ldr	r3, [pc, #228]	; (800efb0 <Keys_Input_Save+0x110>)
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d168      	bne.n	800efa4 <Keys_Input_Save+0x104>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800eed2:	4b38      	ldr	r3, [pc, #224]	; (800efb4 <Keys_Input_Save+0x114>)
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d005      	beq.n	800eee6 <Keys_Input_Save+0x46>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800eeda:	4b36      	ldr	r3, [pc, #216]	; (800efb4 <Keys_Input_Save+0x114>)
 800eedc:	2200      	movs	r2, #0
 800eede:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 0;                                     //指针设为0位
 800eee0:	4b35      	ldr	r3, [pc, #212]	; (800efb8 <Keys_Input_Save+0x118>)
 800eee2:	2200      	movs	r2, #0
 800eee4:	701a      	strb	r2, [r3, #0]
		}
		if(xyz.coordinates3==1)//voltage set
 800eee6:	4b31      	ldr	r3, [pc, #196]	; (800efac <Keys_Input_Save+0x10c>)
 800eee8:	689b      	ldr	r3, [r3, #8]
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d12b      	bne.n	800ef46 <Keys_Input_Save+0xa6>
		{

			if(Cursor_Position==2)
 800eeee:	4b32      	ldr	r3, [pc, #200]	; (800efb8 <Keys_Input_Save+0x118>)
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d10a      	bne.n	800ef0c <Keys_Input_Save+0x6c>
			{
				String_Save_V[Cursor_Position]=Number;
 800eef6:	4b30      	ldr	r3, [pc, #192]	; (800efb8 <Keys_Input_Save+0x118>)
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	0019      	movs	r1, r3
 800eefc:	4b2f      	ldr	r3, [pc, #188]	; (800efbc <Keys_Input_Save+0x11c>)
 800eefe:	1dfa      	adds	r2, r7, #7
 800ef00:	7812      	ldrb	r2, [r2, #0]
 800ef02:	545a      	strb	r2, [r3, r1]
				Cursor_Position=4;
 800ef04:	4b2c      	ldr	r3, [pc, #176]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef06:	2204      	movs	r2, #4
 800ef08:	701a      	strb	r2, [r3, #0]
				return;
 800ef0a:	e04b      	b.n	800efa4 <Keys_Input_Save+0x104>
			}
			if(Cursor_Position==5)
 800ef0c:	4b2a      	ldr	r3, [pc, #168]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b05      	cmp	r3, #5
 800ef12:	d10a      	bne.n	800ef2a <Keys_Input_Save+0x8a>
			{
				String_Save_V[Cursor_Position]=Number;
 800ef14:	4b28      	ldr	r3, [pc, #160]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	0019      	movs	r1, r3
 800ef1a:	4b28      	ldr	r3, [pc, #160]	; (800efbc <Keys_Input_Save+0x11c>)
 800ef1c:	1dfa      	adds	r2, r7, #7
 800ef1e:	7812      	ldrb	r2, [r2, #0]
 800ef20:	545a      	strb	r2, [r3, r1]
				Cursor_Position=0;
 800ef22:	4b25      	ldr	r3, [pc, #148]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	701a      	strb	r2, [r3, #0]
				return;
 800ef28:	e03c      	b.n	800efa4 <Keys_Input_Save+0x104>
			}
			String_Save_V[Cursor_Position]=Number;
 800ef2a:	4b23      	ldr	r3, [pc, #140]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	0019      	movs	r1, r3
 800ef30:	4b22      	ldr	r3, [pc, #136]	; (800efbc <Keys_Input_Save+0x11c>)
 800ef32:	1dfa      	adds	r2, r7, #7
 800ef34:	7812      	ldrb	r2, [r2, #0]
 800ef36:	545a      	strb	r2, [r3, r1]
			Cursor_Position++;
 800ef38:	4b1f      	ldr	r3, [pc, #124]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	4b1d      	ldr	r3, [pc, #116]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	e02e      	b.n	800efa4 <Keys_Input_Save+0x104>
		}
		else if(xyz.coordinates3==2)//current set
 800ef46:	4b19      	ldr	r3, [pc, #100]	; (800efac <Keys_Input_Save+0x10c>)
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	2b02      	cmp	r3, #2
 800ef4c:	d12a      	bne.n	800efa4 <Keys_Input_Save+0x104>
		{
			if(Cursor_Position==2+9)
 800ef4e:	4b1a      	ldr	r3, [pc, #104]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	2b0b      	cmp	r3, #11
 800ef54:	d10a      	bne.n	800ef6c <Keys_Input_Save+0xcc>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800ef56:	4b18      	ldr	r3, [pc, #96]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	3b09      	subs	r3, #9
 800ef5c:	4a18      	ldr	r2, [pc, #96]	; (800efc0 <Keys_Input_Save+0x120>)
 800ef5e:	1df9      	adds	r1, r7, #7
 800ef60:	7809      	ldrb	r1, [r1, #0]
 800ef62:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=4+9;
 800ef64:	4b14      	ldr	r3, [pc, #80]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef66:	220d      	movs	r2, #13
 800ef68:	701a      	strb	r2, [r3, #0]
				return;
 800ef6a:	e01b      	b.n	800efa4 <Keys_Input_Save+0x104>
			}
			if(Cursor_Position==5+9)
 800ef6c:	4b12      	ldr	r3, [pc, #72]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	2b0e      	cmp	r3, #14
 800ef72:	d10a      	bne.n	800ef8a <Keys_Input_Save+0xea>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800ef74:	4b10      	ldr	r3, [pc, #64]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	3b09      	subs	r3, #9
 800ef7a:	4a11      	ldr	r2, [pc, #68]	; (800efc0 <Keys_Input_Save+0x120>)
 800ef7c:	1df9      	adds	r1, r7, #7
 800ef7e:	7809      	ldrb	r1, [r1, #0]
 800ef80:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=0+9;
 800ef82:	4b0d      	ldr	r3, [pc, #52]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef84:	2209      	movs	r2, #9
 800ef86:	701a      	strb	r2, [r3, #0]
				return;
 800ef88:	e00c      	b.n	800efa4 <Keys_Input_Save+0x104>
			}
			String_Save_I[Cursor_Position-9]=Number;
 800ef8a:	4b0b      	ldr	r3, [pc, #44]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	3b09      	subs	r3, #9
 800ef90:	4a0b      	ldr	r2, [pc, #44]	; (800efc0 <Keys_Input_Save+0x120>)
 800ef92:	1df9      	adds	r1, r7, #7
 800ef94:	7809      	ldrb	r1, [r1, #0]
 800ef96:	54d1      	strb	r1, [r2, r3]
			Cursor_Position++;
 800ef98:	4b07      	ldr	r3, [pc, #28]	; (800efb8 <Keys_Input_Save+0x118>)
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <Keys_Input_Save+0x118>)
 800efa2:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800efa4:	46bd      	mov	sp, r7
 800efa6:	b002      	add	sp, #8
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	46c0      	nop			; (mov r8, r8)
 800efac:	200039e0 	.word	0x200039e0
 800efb0:	20003973 	.word	0x20003973
 800efb4:	20002fd4 	.word	0x20002fd4
 800efb8:	20003976 	.word	0x20003976
 800efbc:	20003020 	.word	0x20003020
 800efc0:	2000302c 	.word	0x2000302c

0800efc4 <Keys_Input_Recall>:

static void Keys_Input_Recall(char Number)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	0002      	movs	r2, r0
 800efcc:	1dfb      	adds	r3, r7, #7
 800efce:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800efd0:	4b04      	ldr	r3, [pc, #16]	; (800efe4 <Keys_Input_Recall+0x20>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b03      	cmp	r3, #3
 800efd6:	d101      	bne.n	800efdc <Keys_Input_Recall+0x18>
 800efd8:	4b02      	ldr	r3, [pc, #8]	; (800efe4 <Keys_Input_Recall+0x20>)
 800efda:	685b      	ldr	r3, [r3, #4]
	{
		//不可参数设定

	}
}
 800efdc:	46c0      	nop			; (mov r8, r8)
 800efde:	46bd      	mov	sp, r7
 800efe0:	b002      	add	sp, #8
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	200039e0 	.word	0x200039e0

0800efe8 <Keys_Input_Password>:




static void Keys_Input_Password(char Number)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	0002      	movs	r2, r0
 800eff0:	1dfb      	adds	r3, r7, #7
 800eff2:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK) )
 800eff4:	4b17      	ldr	r3, [pc, #92]	; (800f054 <Keys_Input_Password+0x6c>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d127      	bne.n	800f04c <Keys_Input_Password+0x64>
 800effc:	4b15      	ldr	r3, [pc, #84]	; (800f054 <Keys_Input_Password+0x6c>)
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	2b05      	cmp	r3, #5
 800f002:	d123      	bne.n	800f04c <Keys_Input_Password+0x64>
 800f004:	4b13      	ldr	r3, [pc, #76]	; (800f054 <Keys_Input_Password+0x6c>)
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d11f      	bne.n	800f04c <Keys_Input_Password+0x64>
 800f00c:	4b12      	ldr	r3, [pc, #72]	; (800f058 <Keys_Input_Password+0x70>)
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d11b      	bne.n	800f04c <Keys_Input_Password+0x64>
	{


		if(Cursor_Position == 5+6)
 800f014:	4b11      	ldr	r3, [pc, #68]	; (800f05c <Keys_Input_Password+0x74>)
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b0b      	cmp	r3, #11
 800f01a:	d10a      	bne.n	800f032 <Keys_Input_Password+0x4a>
		{
			String_Password[Cursor_Position-6] = Number;
 800f01c:	4b0f      	ldr	r3, [pc, #60]	; (800f05c <Keys_Input_Password+0x74>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	3b06      	subs	r3, #6
 800f022:	4a0f      	ldr	r2, [pc, #60]	; (800f060 <Keys_Input_Password+0x78>)
 800f024:	1df9      	adds	r1, r7, #7
 800f026:	7809      	ldrb	r1, [r1, #0]
 800f028:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800f02a:	4b0c      	ldr	r3, [pc, #48]	; (800f05c <Keys_Input_Password+0x74>)
 800f02c:	2206      	movs	r2, #6
 800f02e:	701a      	strb	r2, [r3, #0]
			return;
 800f030:	e00c      	b.n	800f04c <Keys_Input_Password+0x64>
		}
		String_Password[Cursor_Position-6] = Number;                  //使光标位置置Number
 800f032:	4b0a      	ldr	r3, [pc, #40]	; (800f05c <Keys_Input_Password+0x74>)
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	3b06      	subs	r3, #6
 800f038:	4a09      	ldr	r2, [pc, #36]	; (800f060 <Keys_Input_Password+0x78>)
 800f03a:	1df9      	adds	r1, r7, #7
 800f03c:	7809      	ldrb	r1, [r1, #0]
 800f03e:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f040:	4b06      	ldr	r3, [pc, #24]	; (800f05c <Keys_Input_Password+0x74>)
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	3301      	adds	r3, #1
 800f046:	b2da      	uxtb	r2, r3
 800f048:	4b04      	ldr	r3, [pc, #16]	; (800f05c <Keys_Input_Password+0x74>)
 800f04a:	701a      	strb	r2, [r3, #0]

	}
}
 800f04c:	46bd      	mov	sp, r7
 800f04e:	b002      	add	sp, #8
 800f050:	bd80      	pop	{r7, pc}
 800f052:	46c0      	nop			; (mov r8, r8)
 800f054:	200039e0 	.word	0x200039e0
 800f058:	20003973 	.word	0x20003973
 800f05c:	20003976 	.word	0x20003976
 800f060:	200030a8 	.word	0x200030a8

0800f064 <Keys_Input_Calibration_Voltage>:

static void Keys_Input_Calibration_Voltage(char Number)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	0002      	movs	r2, r0
 800f06c:	1dfb      	adds	r3, r7, #7
 800f06e:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1||xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK) )
 800f070:	4b27      	ldr	r3, [pc, #156]	; (800f110 <Keys_Input_Calibration_Voltage+0xac>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d147      	bne.n	800f108 <Keys_Input_Calibration_Voltage+0xa4>
 800f078:	4b25      	ldr	r3, [pc, #148]	; (800f110 <Keys_Input_Calibration_Voltage+0xac>)
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	2b08      	cmp	r3, #8
 800f07e:	d143      	bne.n	800f108 <Keys_Input_Calibration_Voltage+0xa4>
 800f080:	4b23      	ldr	r3, [pc, #140]	; (800f110 <Keys_Input_Calibration_Voltage+0xac>)
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	2b01      	cmp	r3, #1
 800f086:	d003      	beq.n	800f090 <Keys_Input_Calibration_Voltage+0x2c>
 800f088:	4b21      	ldr	r3, [pc, #132]	; (800f110 <Keys_Input_Calibration_Voltage+0xac>)
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	2b02      	cmp	r3, #2
 800f08e:	d13b      	bne.n	800f108 <Keys_Input_Calibration_Voltage+0xa4>
 800f090:	4b20      	ldr	r3, [pc, #128]	; (800f114 <Keys_Input_Calibration_Voltage+0xb0>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d137      	bne.n	800f108 <Keys_Input_Calibration_Voltage+0xa4>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f098:	4b1f      	ldr	r3, [pc, #124]	; (800f118 <Keys_Input_Calibration_Voltage+0xb4>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d008      	beq.n	800f0b2 <Keys_Input_Calibration_Voltage+0x4e>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f0a0:	4b1d      	ldr	r3, [pc, #116]	; (800f118 <Keys_Input_Calibration_Voltage+0xb4>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	701a      	strb	r2, [r3, #0]

			Cursor_Position = 9;                                    //指针设为0位
 800f0a6:	4b1d      	ldr	r3, [pc, #116]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0a8:	2209      	movs	r2, #9
 800f0aa:	701a      	strb	r2, [r3, #0]

			String_Calibration_Vlotage[3] = '.';
 800f0ac:	4b1c      	ldr	r3, [pc, #112]	; (800f120 <Keys_Input_Calibration_Voltage+0xbc>)
 800f0ae:	222e      	movs	r2, #46	; 0x2e
 800f0b0:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f0b2:	4b1a      	ldr	r3, [pc, #104]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b0b      	cmp	r3, #11
 800f0b8:	d10a      	bne.n	800f0d0 <Keys_Input_Calibration_Voltage+0x6c>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f0ba:	4b18      	ldr	r3, [pc, #96]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	3b09      	subs	r3, #9
 800f0c0:	4a17      	ldr	r2, [pc, #92]	; (800f120 <Keys_Input_Calibration_Voltage+0xbc>)
 800f0c2:	1df9      	adds	r1, r7, #7
 800f0c4:	7809      	ldrb	r1, [r1, #0]
 800f0c6:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f0c8:	4b14      	ldr	r3, [pc, #80]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0ca:	220d      	movs	r2, #13
 800f0cc:	701a      	strb	r2, [r3, #0]
			return;
 800f0ce:	e01b      	b.n	800f108 <Keys_Input_Calibration_Voltage+0xa4>
		}
		if(Cursor_Position == 5+9)
 800f0d0:	4b12      	ldr	r3, [pc, #72]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	2b0e      	cmp	r3, #14
 800f0d6:	d10a      	bne.n	800f0ee <Keys_Input_Calibration_Voltage+0x8a>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f0d8:	4b10      	ldr	r3, [pc, #64]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	3b09      	subs	r3, #9
 800f0de:	4a10      	ldr	r2, [pc, #64]	; (800f120 <Keys_Input_Calibration_Voltage+0xbc>)
 800f0e0:	1df9      	adds	r1, r7, #7
 800f0e2:	7809      	ldrb	r1, [r1, #0]
 800f0e4:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f0e6:	4b0d      	ldr	r3, [pc, #52]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0e8:	2209      	movs	r2, #9
 800f0ea:	701a      	strb	r2, [r3, #0]
			return;
 800f0ec:	e00c      	b.n	800f108 <Keys_Input_Calibration_Voltage+0xa4>
		}
		String_Calibration_Vlotage[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f0ee:	4b0b      	ldr	r3, [pc, #44]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	3b09      	subs	r3, #9
 800f0f4:	4a0a      	ldr	r2, [pc, #40]	; (800f120 <Keys_Input_Calibration_Voltage+0xbc>)
 800f0f6:	1df9      	adds	r1, r7, #7
 800f0f8:	7809      	ldrb	r1, [r1, #0]
 800f0fa:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f0fc:	4b07      	ldr	r3, [pc, #28]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	3301      	adds	r3, #1
 800f102:	b2da      	uxtb	r2, r3
 800f104:	4b05      	ldr	r3, [pc, #20]	; (800f11c <Keys_Input_Calibration_Voltage+0xb8>)
 800f106:	701a      	strb	r2, [r3, #0]

	}

}
 800f108:	46bd      	mov	sp, r7
 800f10a:	b002      	add	sp, #8
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	46c0      	nop			; (mov r8, r8)
 800f110:	200039e0 	.word	0x200039e0
 800f114:	20003973 	.word	0x20003973
 800f118:	20002fd4 	.word	0x20002fd4
 800f11c:	20003976 	.word	0x20003976
 800f120:	20003090 	.word	0x20003090

0800f124 <Keys_Input_Calibration_Current>:

static void Keys_Input_Calibration_Current(char Number)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	0002      	movs	r2, r0
 800f12c:	1dfb      	adds	r3, r7, #7
 800f12e:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3||xyz.coordinates3==4) && (LOCK_UNLOCK == UNLOCK) )
 800f130:	4b27      	ldr	r3, [pc, #156]	; (800f1d0 <Keys_Input_Calibration_Current+0xac>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d147      	bne.n	800f1c8 <Keys_Input_Calibration_Current+0xa4>
 800f138:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <Keys_Input_Calibration_Current+0xac>)
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	2b08      	cmp	r3, #8
 800f13e:	d143      	bne.n	800f1c8 <Keys_Input_Calibration_Current+0xa4>
 800f140:	4b23      	ldr	r3, [pc, #140]	; (800f1d0 <Keys_Input_Calibration_Current+0xac>)
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	2b03      	cmp	r3, #3
 800f146:	d003      	beq.n	800f150 <Keys_Input_Calibration_Current+0x2c>
 800f148:	4b21      	ldr	r3, [pc, #132]	; (800f1d0 <Keys_Input_Calibration_Current+0xac>)
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	2b04      	cmp	r3, #4
 800f14e:	d13b      	bne.n	800f1c8 <Keys_Input_Calibration_Current+0xa4>
 800f150:	4b20      	ldr	r3, [pc, #128]	; (800f1d4 <Keys_Input_Calibration_Current+0xb0>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d137      	bne.n	800f1c8 <Keys_Input_Calibration_Current+0xa4>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f158:	4b1f      	ldr	r3, [pc, #124]	; (800f1d8 <Keys_Input_Calibration_Current+0xb4>)
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d008      	beq.n	800f172 <Keys_Input_Calibration_Current+0x4e>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f160:	4b1d      	ldr	r3, [pc, #116]	; (800f1d8 <Keys_Input_Calibration_Current+0xb4>)
 800f162:	2200      	movs	r2, #0
 800f164:	701a      	strb	r2, [r3, #0]

			Cursor_Position = 9;                                    //指针设为0位
 800f166:	4b1d      	ldr	r3, [pc, #116]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f168:	2209      	movs	r2, #9
 800f16a:	701a      	strb	r2, [r3, #0]

			String_Calibration_Current[3] = '.';
 800f16c:	4b1c      	ldr	r3, [pc, #112]	; (800f1e0 <Keys_Input_Calibration_Current+0xbc>)
 800f16e:	222e      	movs	r2, #46	; 0x2e
 800f170:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f172:	4b1a      	ldr	r3, [pc, #104]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	2b0b      	cmp	r3, #11
 800f178:	d10a      	bne.n	800f190 <Keys_Input_Calibration_Current+0x6c>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f17a:	4b18      	ldr	r3, [pc, #96]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	3b09      	subs	r3, #9
 800f180:	4a17      	ldr	r2, [pc, #92]	; (800f1e0 <Keys_Input_Calibration_Current+0xbc>)
 800f182:	1df9      	adds	r1, r7, #7
 800f184:	7809      	ldrb	r1, [r1, #0]
 800f186:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f188:	4b14      	ldr	r3, [pc, #80]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f18a:	220d      	movs	r2, #13
 800f18c:	701a      	strb	r2, [r3, #0]
			return;
 800f18e:	e01b      	b.n	800f1c8 <Keys_Input_Calibration_Current+0xa4>
		}
		if(Cursor_Position == 5+9)
 800f190:	4b12      	ldr	r3, [pc, #72]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2b0e      	cmp	r3, #14
 800f196:	d10a      	bne.n	800f1ae <Keys_Input_Calibration_Current+0x8a>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f198:	4b10      	ldr	r3, [pc, #64]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	3b09      	subs	r3, #9
 800f19e:	4a10      	ldr	r2, [pc, #64]	; (800f1e0 <Keys_Input_Calibration_Current+0xbc>)
 800f1a0:	1df9      	adds	r1, r7, #7
 800f1a2:	7809      	ldrb	r1, [r1, #0]
 800f1a4:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f1a6:	4b0d      	ldr	r3, [pc, #52]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f1a8:	2209      	movs	r2, #9
 800f1aa:	701a      	strb	r2, [r3, #0]
			return;
 800f1ac:	e00c      	b.n	800f1c8 <Keys_Input_Calibration_Current+0xa4>
		}
		String_Calibration_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f1ae:	4b0b      	ldr	r3, [pc, #44]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	3b09      	subs	r3, #9
 800f1b4:	4a0a      	ldr	r2, [pc, #40]	; (800f1e0 <Keys_Input_Calibration_Current+0xbc>)
 800f1b6:	1df9      	adds	r1, r7, #7
 800f1b8:	7809      	ldrb	r1, [r1, #0]
 800f1ba:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f1bc:	4b07      	ldr	r3, [pc, #28]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	4b05      	ldr	r3, [pc, #20]	; (800f1dc <Keys_Input_Calibration_Current+0xb8>)
 800f1c6:	701a      	strb	r2, [r3, #0]

	}

}
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	b002      	add	sp, #8
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	46c0      	nop			; (mov r8, r8)
 800f1d0:	200039e0 	.word	0x200039e0
 800f1d4:	20003973 	.word	0x20003973
 800f1d8:	20002fd4 	.word	0x20002fd4
 800f1dc:	20003976 	.word	0x20003976
 800f1e0:	2000309c 	.word	0x2000309c

0800f1e4 <key_num_handle>:
 * @brief  数字按键的扫描服务函数
 * @param  数字0~9&point(10)
 * @retval None
 */
void key_num_handle(int key_number)
{
 800f1e4:	b590      	push	{r4, r7, lr}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
	//number
	if(key_number<=9&&key_number>=0)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b09      	cmp	r3, #9
 800f1f0:	dc47      	bgt.n	800f282 <key_num_handle+0x9e>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	db44      	blt.n	800f282 <key_num_handle+0x9e>
	{
		char number=key_number+'0';
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	210f      	movs	r1, #15
 800f1fe:	187b      	adds	r3, r7, r1
 800f200:	3230      	adds	r2, #48	; 0x30
 800f202:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f204:	000c      	movs	r4, r1
 800f206:	193b      	adds	r3, r7, r4
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	0018      	movs	r0, r3
 800f20c:	f7ff fb36 	bl	800e87c <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f210:	193b      	adds	r3, r7, r4
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	0018      	movs	r0, r3
 800f216:	f7ff fb89 	bl	800e92c <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f21a:	193b      	adds	r3, r7, r4
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	0018      	movs	r0, r3
 800f220:	f7ff fbdc 	bl	800e9dc <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f224:	193b      	adds	r3, r7, r4
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	0018      	movs	r0, r3
 800f22a:	f7ff fc57 	bl	800eadc <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f22e:	193b      	adds	r3, r7, r4
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	0018      	movs	r0, r3
 800f234:	f7ff fcd2 	bl	800ebdc <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f238:	193b      	adds	r3, r7, r4
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	0018      	movs	r0, r3
 800f23e:	f7ff fd1b 	bl	800ec78 <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f242:	193b      	adds	r3, r7, r4
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	0018      	movs	r0, r3
 800f248:	f7ff fdc8 	bl	800eddc <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f24c:	193b      	adds	r3, r7, r4
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	0018      	movs	r0, r3
 800f252:	f7ff fe25 	bl	800eea0 <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f256:	193b      	adds	r3, r7, r4
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	0018      	movs	r0, r3
 800f25c:	f7ff feb2 	bl	800efc4 <Keys_Input_Recall>
		Keys_Input_Password(number);
 800f260:	193b      	adds	r3, r7, r4
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	0018      	movs	r0, r3
 800f266:	f7ff febf 	bl	800efe8 <Keys_Input_Password>
		Keys_Input_Calibration_Voltage(number);
 800f26a:	193b      	adds	r3, r7, r4
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	0018      	movs	r0, r3
 800f270:	f7ff fef8 	bl	800f064 <Keys_Input_Calibration_Voltage>
		Keys_Input_Calibration_Current(number);
 800f274:	193b      	adds	r3, r7, r4
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	0018      	movs	r0, r3
 800f27a:	f7ff ff53 	bl	800f124 <Keys_Input_Calibration_Current>
	{
 800f27e:	46c0      	nop			; (mov r8, r8)
		Keys_Input_Delay(number);
		Keys_Input_Save(number);
		Keys_Input_Recall(number);
	}

}
 800f280:	e033      	b.n	800f2ea <key_num_handle+0x106>
	else if(key_number==10)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b0a      	cmp	r3, #10
 800f286:	d130      	bne.n	800f2ea <key_num_handle+0x106>
		char number='.';
 800f288:	240e      	movs	r4, #14
 800f28a:	193b      	adds	r3, r7, r4
 800f28c:	222e      	movs	r2, #46	; 0x2e
 800f28e:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f290:	193b      	adds	r3, r7, r4
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	0018      	movs	r0, r3
 800f296:	f7ff faf1 	bl	800e87c <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f29a:	193b      	adds	r3, r7, r4
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	0018      	movs	r0, r3
 800f2a0:	f7ff fb44 	bl	800e92c <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f2a4:	193b      	adds	r3, r7, r4
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	0018      	movs	r0, r3
 800f2aa:	f7ff fb97 	bl	800e9dc <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f2ae:	193b      	adds	r3, r7, r4
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	0018      	movs	r0, r3
 800f2b4:	f7ff fc12 	bl	800eadc <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f2b8:	193b      	adds	r3, r7, r4
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f7ff fc8d 	bl	800ebdc <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f2c2:	193b      	adds	r3, r7, r4
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	0018      	movs	r0, r3
 800f2c8:	f7ff fcd6 	bl	800ec78 <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f2cc:	193b      	adds	r3, r7, r4
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	f7ff fd83 	bl	800eddc <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f2d6:	193b      	adds	r3, r7, r4
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	0018      	movs	r0, r3
 800f2dc:	f7ff fde0 	bl	800eea0 <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f2e0:	193b      	adds	r3, r7, r4
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	0018      	movs	r0, r3
 800f2e6:	f7ff fe6d 	bl	800efc4 <Keys_Input_Recall>
}
 800f2ea:	46c0      	nop			; (mov r8, r8)
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	b005      	add	sp, #20
 800f2f0:	bd90      	pop	{r4, r7, pc}
	...

0800f2f4 <Key_V_set>:
 * @brief  按键V-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_V_set(void)
{
 800f2f4:	b590      	push	{r4, r7, lr}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800f2fa:	4b91      	ldr	r3, [pc, #580]	; (800f540 <Key_V_set+0x24c>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d14b      	bne.n	800f39a <Key_V_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)   //当复用该按键时，该按键为菜单进入键
 800f302:	4b90      	ldr	r3, [pc, #576]	; (800f544 <Key_V_set+0x250>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	2b01      	cmp	r3, #1
 800f308:	d10e      	bne.n	800f328 <Key_V_set+0x34>
		{
			xyz.coordinates1=1;//更新界面为一级菜单界面system
 800f30a:	4b8f      	ldr	r3, [pc, #572]	; (800f548 <Key_V_set+0x254>)
 800f30c:	2201      	movs	r2, #1
 800f30e:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800f310:	4b8d      	ldr	r3, [pc, #564]	; (800f548 <Key_V_set+0x254>)
 800f312:	2201      	movs	r2, #1
 800f314:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f316:	4b8c      	ldr	r3, [pc, #560]	; (800f548 <Key_V_set+0x254>)
 800f318:	2200      	movs	r2, #0
 800f31a:	609a      	str	r2, [r3, #8]
			Cursor_flash_off();
 800f31c:	f004 fd78 	bl	8013e10 <Cursor_flash_off>
			Shift_Not_Shift=Not_Shift;
 800f320:	4b88      	ldr	r3, [pc, #544]	; (800f544 <Key_V_set+0x250>)
 800f322:	2200      	movs	r2, #0
 800f324:	701a      	strb	r2, [r3, #0]
 800f326:	e038      	b.n	800f39a <Key_V_set+0xa6>

		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )
 800f328:	4b87      	ldr	r3, [pc, #540]	; (800f548 <Key_V_set+0x254>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d134      	bne.n	800f39a <Key_V_set+0xa6>
 800f330:	4b85      	ldr	r3, [pc, #532]	; (800f548 <Key_V_set+0x254>)
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d130      	bne.n	800f39a <Key_V_set+0xa6>
 800f338:	4b83      	ldr	r3, [pc, #524]	; (800f548 <Key_V_set+0x254>)
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d12c      	bne.n	800f39a <Key_V_set+0xa6>
 800f340:	4b80      	ldr	r3, [pc, #512]	; (800f544 <Key_V_set+0x250>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d128      	bne.n	800f39a <Key_V_set+0xa6>
		{

			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800f348:	4b80      	ldr	r3, [pc, #512]	; (800f54c <Key_V_set+0x258>)
 800f34a:	2201      	movs	r2, #1
 800f34c:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800f34e:	1d3b      	adds	r3, r7, #4
 800f350:	4a7d      	ldr	r2, [pc, #500]	; (800f548 <Key_V_set+0x254>)
 800f352:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f354:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800f356:	4b7c      	ldr	r3, [pc, #496]	; (800f548 <Key_V_set+0x254>)
 800f358:	2202      	movs	r2, #2
 800f35a:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 800f35c:	4b7a      	ldr	r3, [pc, #488]	; (800f548 <Key_V_set+0x254>)
 800f35e:	2202      	movs	r2, #2
 800f360:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f362:	4b79      	ldr	r3, [pc, #484]	; (800f548 <Key_V_set+0x254>)
 800f364:	2200      	movs	r2, #0
 800f366:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)  Clear_Screen();//更新前后的界面不同，清屏
 800f368:	1d3b      	adds	r3, r7, #4
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	4b76      	ldr	r3, [pc, #472]	; (800f548 <Key_V_set+0x254>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	429a      	cmp	r2, r3
 800f372:	d10b      	bne.n	800f38c <Key_V_set+0x98>
 800f374:	1d3b      	adds	r3, r7, #4
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	4b73      	ldr	r3, [pc, #460]	; (800f548 <Key_V_set+0x254>)
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d105      	bne.n	800f38c <Key_V_set+0x98>
 800f380:	1d3b      	adds	r3, r7, #4
 800f382:	689a      	ldr	r2, [r3, #8]
 800f384:	4b70      	ldr	r3, [pc, #448]	; (800f548 <Key_V_set+0x254>)
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d001      	beq.n	800f390 <Key_V_set+0x9c>
 800f38c:	f003 f8ca 	bl	8012524 <Clear_Screen>
			Cursor_Position = 0;   //令光标位于最低位
 800f390:	4b6f      	ldr	r3, [pc, #444]	; (800f550 <Key_V_set+0x25c>)
 800f392:	2200      	movs	r2, #0
 800f394:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800f396:	f004 fd71 	bl	8013e7c <Cursor_flash_on>


	}
	/*特殊复用功能*/
	/*I set change to v set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800f39a:	4b6b      	ldr	r3, [pc, #428]	; (800f548 <Key_V_set+0x254>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d11f      	bne.n	800f3e2 <Key_V_set+0xee>
 800f3a2:	4b69      	ldr	r3, [pc, #420]	; (800f548 <Key_V_set+0x254>)
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d11b      	bne.n	800f3e2 <Key_V_set+0xee>
 800f3aa:	4b67      	ldr	r3, [pc, #412]	; (800f548 <Key_V_set+0x254>)
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d117      	bne.n	800f3e2 <Key_V_set+0xee>
 800f3b2:	4b63      	ldr	r3, [pc, #396]	; (800f540 <Key_V_set+0x24c>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d113      	bne.n	800f3e2 <Key_V_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800f3ba:	4b63      	ldr	r3, [pc, #396]	; (800f548 <Key_V_set+0x254>)
 800f3bc:	2202      	movs	r2, #2
 800f3be:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=2;
 800f3c0:	4b61      	ldr	r3, [pc, #388]	; (800f548 <Key_V_set+0x254>)
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f3c6:	4b60      	ldr	r3, [pc, #384]	; (800f548 <Key_V_set+0x254>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	609a      	str	r2, [r3, #8]

		Cursor_Position = 0;   //令光标位于最低位
 800f3cc:	4b60      	ldr	r3, [pc, #384]	; (800f550 <Key_V_set+0x25c>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800f3d2:	4b60      	ldr	r3, [pc, #384]	; (800f554 <Key_V_set+0x260>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	4b5e      	ldr	r3, [pc, #376]	; (800f554 <Key_V_set+0x260>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2101      	movs	r1, #1
 800f3de:	430a      	orrs	r2, r1
 800f3e0:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f3e2:	4b59      	ldr	r3, [pc, #356]	; (800f548 <Key_V_set+0x254>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d120      	bne.n	800f42c <Key_V_set+0x138>
 800f3ea:	4b57      	ldr	r3, [pc, #348]	; (800f548 <Key_V_set+0x254>)
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d11c      	bne.n	800f42c <Key_V_set+0x138>
 800f3f2:	4b55      	ldr	r3, [pc, #340]	; (800f548 <Key_V_set+0x254>)
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d018      	beq.n	800f42c <Key_V_set+0x138>
 800f3fa:	4b51      	ldr	r3, [pc, #324]	; (800f540 <Key_V_set+0x24c>)
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d114      	bne.n	800f42c <Key_V_set+0x138>
	{
		if(Cursor_Position==0)
 800f402:	4b53      	ldr	r3, [pc, #332]	; (800f550 <Key_V_set+0x25c>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d103      	bne.n	800f412 <Key_V_set+0x11e>
		{
			Cursor_Position=4;
 800f40a:	4b51      	ldr	r3, [pc, #324]	; (800f550 <Key_V_set+0x25c>)
 800f40c:	2204      	movs	r2, #4
 800f40e:	701a      	strb	r2, [r3, #0]
			return;
 800f410:	e093      	b.n	800f53a <Key_V_set+0x246>
		}
		if(Cursor_Position==3)
 800f412:	4b4f      	ldr	r3, [pc, #316]	; (800f550 <Key_V_set+0x25c>)
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	2b03      	cmp	r3, #3
 800f418:	d102      	bne.n	800f420 <Key_V_set+0x12c>
		{
			Cursor_Position=2;
 800f41a:	4b4d      	ldr	r3, [pc, #308]	; (800f550 <Key_V_set+0x25c>)
 800f41c:	2202      	movs	r2, #2
 800f41e:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 800f420:	4b4b      	ldr	r3, [pc, #300]	; (800f550 <Key_V_set+0x25c>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	3b01      	subs	r3, #1
 800f426:	b2da      	uxtb	r2, r3
 800f428:	4b49      	ldr	r3, [pc, #292]	; (800f550 <Key_V_set+0x25c>)
 800f42a:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f42c:	4b46      	ldr	r3, [pc, #280]	; (800f548 <Key_V_set+0x254>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d120      	bne.n	800f476 <Key_V_set+0x182>
 800f434:	4b44      	ldr	r3, [pc, #272]	; (800f548 <Key_V_set+0x254>)
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	2b04      	cmp	r3, #4
 800f43a:	d11c      	bne.n	800f476 <Key_V_set+0x182>
 800f43c:	4b42      	ldr	r3, [pc, #264]	; (800f548 <Key_V_set+0x254>)
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d018      	beq.n	800f476 <Key_V_set+0x182>
 800f444:	4b3e      	ldr	r3, [pc, #248]	; (800f540 <Key_V_set+0x24c>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d114      	bne.n	800f476 <Key_V_set+0x182>
	{
		if(Cursor_Position==0)
 800f44c:	4b40      	ldr	r3, [pc, #256]	; (800f550 <Key_V_set+0x25c>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d103      	bne.n	800f45c <Key_V_set+0x168>
		{
			Cursor_Position=7;
 800f454:	4b3e      	ldr	r3, [pc, #248]	; (800f550 <Key_V_set+0x25c>)
 800f456:	2207      	movs	r2, #7
 800f458:	701a      	strb	r2, [r3, #0]
			return;
 800f45a:	e06e      	b.n	800f53a <Key_V_set+0x246>
		}
		if(Cursor_Position==5)
 800f45c:	4b3c      	ldr	r3, [pc, #240]	; (800f550 <Key_V_set+0x25c>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2b05      	cmp	r3, #5
 800f462:	d102      	bne.n	800f46a <Key_V_set+0x176>
		{
			Cursor_Position=4;
 800f464:	4b3a      	ldr	r3, [pc, #232]	; (800f550 <Key_V_set+0x25c>)
 800f466:	2204      	movs	r2, #4
 800f468:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f46a:	4b39      	ldr	r3, [pc, #228]	; (800f550 <Key_V_set+0x25c>)
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	3b01      	subs	r3, #1
 800f470:	b2da      	uxtb	r2, r3
 800f472:	4b37      	ldr	r3, [pc, #220]	; (800f550 <Key_V_set+0x25c>)
 800f474:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800f476:	4b34      	ldr	r3, [pc, #208]	; (800f548 <Key_V_set+0x254>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d11f      	bne.n	800f4be <Key_V_set+0x1ca>
 800f47e:	4b32      	ldr	r3, [pc, #200]	; (800f548 <Key_V_set+0x254>)
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	2b05      	cmp	r3, #5
 800f484:	d11b      	bne.n	800f4be <Key_V_set+0x1ca>
 800f486:	4b30      	ldr	r3, [pc, #192]	; (800f548 <Key_V_set+0x254>)
 800f488:	2201      	movs	r2, #1
 800f48a:	609a      	str	r2, [r3, #8]
 800f48c:	4b2c      	ldr	r3, [pc, #176]	; (800f540 <Key_V_set+0x24c>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d114      	bne.n	800f4be <Key_V_set+0x1ca>
	{
		if(Cursor_Position==0)
 800f494:	4b2e      	ldr	r3, [pc, #184]	; (800f550 <Key_V_set+0x25c>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d103      	bne.n	800f4a4 <Key_V_set+0x1b0>
		{
			Cursor_Position=5;
 800f49c:	4b2c      	ldr	r3, [pc, #176]	; (800f550 <Key_V_set+0x25c>)
 800f49e:	2205      	movs	r2, #5
 800f4a0:	701a      	strb	r2, [r3, #0]
			return;
 800f4a2:	e04a      	b.n	800f53a <Key_V_set+0x246>
		}
		if(Cursor_Position==4)
 800f4a4:	4b2a      	ldr	r3, [pc, #168]	; (800f550 <Key_V_set+0x25c>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	d102      	bne.n	800f4b2 <Key_V_set+0x1be>
		{
			Cursor_Position=3;
 800f4ac:	4b28      	ldr	r3, [pc, #160]	; (800f550 <Key_V_set+0x25c>)
 800f4ae:	2203      	movs	r2, #3
 800f4b0:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f4b2:	4b27      	ldr	r3, [pc, #156]	; (800f550 <Key_V_set+0x25c>)
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	b2da      	uxtb	r2, r3
 800f4ba:	4b25      	ldr	r3, [pc, #148]	; (800f550 <Key_V_set+0x25c>)
 800f4bc:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800f4be:	4b22      	ldr	r3, [pc, #136]	; (800f548 <Key_V_set+0x254>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d118      	bne.n	800f4f8 <Key_V_set+0x204>
 800f4c6:	4b20      	ldr	r3, [pc, #128]	; (800f548 <Key_V_set+0x254>)
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	2b05      	cmp	r3, #5
 800f4cc:	d114      	bne.n	800f4f8 <Key_V_set+0x204>
 800f4ce:	4b1e      	ldr	r3, [pc, #120]	; (800f548 <Key_V_set+0x254>)
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	609a      	str	r2, [r3, #8]
 800f4d4:	4b1a      	ldr	r3, [pc, #104]	; (800f540 <Key_V_set+0x24c>)
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d10d      	bne.n	800f4f8 <Key_V_set+0x204>
	{
		if(Cursor_Position==0)
 800f4dc:	4b1c      	ldr	r3, [pc, #112]	; (800f550 <Key_V_set+0x25c>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d103      	bne.n	800f4ec <Key_V_set+0x1f8>
		{
			Cursor_Position=2;
 800f4e4:	4b1a      	ldr	r3, [pc, #104]	; (800f550 <Key_V_set+0x25c>)
 800f4e6:	2202      	movs	r2, #2
 800f4e8:	701a      	strb	r2, [r3, #0]
			return;
 800f4ea:	e026      	b.n	800f53a <Key_V_set+0x246>
		}
		Cursor_Position--;
 800f4ec:	4b18      	ldr	r3, [pc, #96]	; (800f550 <Key_V_set+0x25c>)
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	4b16      	ldr	r3, [pc, #88]	; (800f550 <Key_V_set+0x25c>)
 800f4f6:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800f4f8:	4b13      	ldr	r3, [pc, #76]	; (800f548 <Key_V_set+0x254>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b03      	cmp	r3, #3
 800f4fe:	d11a      	bne.n	800f536 <Key_V_set+0x242>
 800f500:	4b11      	ldr	r3, [pc, #68]	; (800f548 <Key_V_set+0x254>)
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d016      	beq.n	800f536 <Key_V_set+0x242>
 800f508:	4b0d      	ldr	r3, [pc, #52]	; (800f540 <Key_V_set+0x24c>)
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d112      	bne.n	800f536 <Key_V_set+0x242>
	{
		if(xyz.coordinates2==2)//recall
 800f510:	4b0d      	ldr	r3, [pc, #52]	; (800f548 <Key_V_set+0x254>)
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	2b02      	cmp	r3, #2
 800f516:	d102      	bne.n	800f51e <Key_V_set+0x22a>
		{
			Cursor_flash_off();
 800f518:	f004 fc7a 	bl	8013e10 <Cursor_flash_off>
 800f51c:	e00b      	b.n	800f536 <Key_V_set+0x242>
		}
		else if(xyz.coordinates2==1)//save
 800f51e:	4b0a      	ldr	r3, [pc, #40]	; (800f548 <Key_V_set+0x254>)
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d107      	bne.n	800f536 <Key_V_set+0x242>
		{
			xyz.coordinates3=1;
 800f526:	4b08      	ldr	r3, [pc, #32]	; (800f548 <Key_V_set+0x254>)
 800f528:	2201      	movs	r2, #1
 800f52a:	609a      	str	r2, [r3, #8]
			Cursor_Position=0;
 800f52c:	4b08      	ldr	r3, [pc, #32]	; (800f550 <Key_V_set+0x25c>)
 800f52e:	2200      	movs	r2, #0
 800f530:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800f532:	f004 fca3 	bl	8013e7c <Cursor_flash_on>
		}


	}

	Display_Interface();
 800f536:	f004 fcb1 	bl	8013e9c <Display_Interface>


}
 800f53a:	46bd      	mov	sp, r7
 800f53c:	b005      	add	sp, #20
 800f53e:	bd90      	pop	{r4, r7, pc}
 800f540:	20003973 	.word	0x20003973
 800f544:	2000396f 	.word	0x2000396f
 800f548:	200039e0 	.word	0x200039e0
 800f54c:	20002fd4 	.word	0x20002fd4
 800f550:	20003976 	.word	0x20003976
 800f554:	200034b4 	.word	0x200034b4

0800f558 <Key_I_set>:
 * @brief  按键I-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_I_set(void)
{
 800f558:	b590      	push	{r4, r7, lr}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800f55e:	4b90      	ldr	r3, [pc, #576]	; (800f7a0 <Key_I_set+0x248>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d14b      	bne.n	800f5fe <Key_I_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)
 800f566:	4b8f      	ldr	r3, [pc, #572]	; (800f7a4 <Key_I_set+0x24c>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d10e      	bne.n	800f58c <Key_I_set+0x34>
		{

			/*进入设定值展示界面*/
			xyz.coordinates1=9;
 800f56e:	4b8e      	ldr	r3, [pc, #568]	; (800f7a8 <Key_I_set+0x250>)
 800f570:	2209      	movs	r2, #9
 800f572:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=9;
 800f574:	4b8c      	ldr	r3, [pc, #560]	; (800f7a8 <Key_I_set+0x250>)
 800f576:	2209      	movs	r2, #9
 800f578:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=9;
 800f57a:	4b8b      	ldr	r3, [pc, #556]	; (800f7a8 <Key_I_set+0x250>)
 800f57c:	2209      	movs	r2, #9
 800f57e:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift=Not_Shift;
 800f580:	4b88      	ldr	r3, [pc, #544]	; (800f7a4 <Key_I_set+0x24c>)
 800f582:	2200      	movs	r2, #0
 800f584:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f586:	f004 fc43 	bl	8013e10 <Cursor_flash_off>
 800f58a:	e038      	b.n	800f5fe <Key_I_set+0xa6>
		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )//补充一个设定界面坐标
 800f58c:	4b86      	ldr	r3, [pc, #536]	; (800f7a8 <Key_I_set+0x250>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d134      	bne.n	800f5fe <Key_I_set+0xa6>
 800f594:	4b84      	ldr	r3, [pc, #528]	; (800f7a8 <Key_I_set+0x250>)
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d130      	bne.n	800f5fe <Key_I_set+0xa6>
 800f59c:	4b82      	ldr	r3, [pc, #520]	; (800f7a8 <Key_I_set+0x250>)
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d12c      	bne.n	800f5fe <Key_I_set+0xa6>
 800f5a4:	4b7f      	ldr	r3, [pc, #508]	; (800f7a4 <Key_I_set+0x24c>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d128      	bne.n	800f5fe <Key_I_set+0xa6>
		{
			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800f5ac:	4b7f      	ldr	r3, [pc, #508]	; (800f7ac <Key_I_set+0x254>)
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800f5b2:	1d3b      	adds	r3, r7, #4
 800f5b4:	4a7c      	ldr	r2, [pc, #496]	; (800f7a8 <Key_I_set+0x250>)
 800f5b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f5b8:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800f5ba:	4b7b      	ldr	r3, [pc, #492]	; (800f7a8 <Key_I_set+0x250>)
 800f5bc:	2202      	movs	r2, #2
 800f5be:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800f5c0:	4b79      	ldr	r3, [pc, #484]	; (800f7a8 <Key_I_set+0x250>)
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f5c6:	4b78      	ldr	r3, [pc, #480]	; (800f7a8 <Key_I_set+0x250>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)   Clear_Screen();;//更新前后的界面不同，清屏
 800f5cc:	1d3b      	adds	r3, r7, #4
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	4b75      	ldr	r3, [pc, #468]	; (800f7a8 <Key_I_set+0x250>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d10b      	bne.n	800f5f0 <Key_I_set+0x98>
 800f5d8:	1d3b      	adds	r3, r7, #4
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	4b72      	ldr	r3, [pc, #456]	; (800f7a8 <Key_I_set+0x250>)
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d105      	bne.n	800f5f0 <Key_I_set+0x98>
 800f5e4:	1d3b      	adds	r3, r7, #4
 800f5e6:	689a      	ldr	r2, [r3, #8]
 800f5e8:	4b6f      	ldr	r3, [pc, #444]	; (800f7a8 <Key_I_set+0x250>)
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d001      	beq.n	800f5f4 <Key_I_set+0x9c>
 800f5f0:	f002 ff98 	bl	8012524 <Clear_Screen>
			Cursor_Position = 9;   //Cursor reset
 800f5f4:	4b6e      	ldr	r3, [pc, #440]	; (800f7b0 <Key_I_set+0x258>)
 800f5f6:	2209      	movs	r2, #9
 800f5f8:	701a      	strb	r2, [r3, #0]


			Cursor_flash_on();
 800f5fa:	f004 fc3f 	bl	8013e7c <Cursor_flash_on>

	}

	/*特殊复用功能*/
	/*V set change to I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800f5fe:	4b6a      	ldr	r3, [pc, #424]	; (800f7a8 <Key_I_set+0x250>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2b02      	cmp	r3, #2
 800f604:	d11f      	bne.n	800f646 <Key_I_set+0xee>
 800f606:	4b68      	ldr	r3, [pc, #416]	; (800f7a8 <Key_I_set+0x250>)
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	d11b      	bne.n	800f646 <Key_I_set+0xee>
 800f60e:	4b66      	ldr	r3, [pc, #408]	; (800f7a8 <Key_I_set+0x250>)
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d117      	bne.n	800f646 <Key_I_set+0xee>
 800f616:	4b62      	ldr	r3, [pc, #392]	; (800f7a0 <Key_I_set+0x248>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d113      	bne.n	800f646 <Key_I_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800f61e:	4b62      	ldr	r3, [pc, #392]	; (800f7a8 <Key_I_set+0x250>)
 800f620:	2202      	movs	r2, #2
 800f622:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 800f624:	4b60      	ldr	r3, [pc, #384]	; (800f7a8 <Key_I_set+0x250>)
 800f626:	2201      	movs	r2, #1
 800f628:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f62a:	4b5f      	ldr	r3, [pc, #380]	; (800f7a8 <Key_I_set+0x250>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	609a      	str	r2, [r3, #8]

		Cursor_Position = 9;   //令光标位于最低位
 800f630:	4b5f      	ldr	r3, [pc, #380]	; (800f7b0 <Key_I_set+0x258>)
 800f632:	2209      	movs	r2, #9
 800f634:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800f636:	4b5f      	ldr	r3, [pc, #380]	; (800f7b4 <Key_I_set+0x25c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	4b5d      	ldr	r3, [pc, #372]	; (800f7b4 <Key_I_set+0x25c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2101      	movs	r1, #1
 800f642:	430a      	orrs	r2, r1
 800f644:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f646:	4b58      	ldr	r3, [pc, #352]	; (800f7a8 <Key_I_set+0x250>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d120      	bne.n	800f690 <Key_I_set+0x138>
 800f64e:	4b56      	ldr	r3, [pc, #344]	; (800f7a8 <Key_I_set+0x250>)
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	2b02      	cmp	r3, #2
 800f654:	d11c      	bne.n	800f690 <Key_I_set+0x138>
 800f656:	4b54      	ldr	r3, [pc, #336]	; (800f7a8 <Key_I_set+0x250>)
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d018      	beq.n	800f690 <Key_I_set+0x138>
 800f65e:	4b50      	ldr	r3, [pc, #320]	; (800f7a0 <Key_I_set+0x248>)
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d114      	bne.n	800f690 <Key_I_set+0x138>
	{
		if(Cursor_Position==4)
 800f666:	4b52      	ldr	r3, [pc, #328]	; (800f7b0 <Key_I_set+0x258>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	2b04      	cmp	r3, #4
 800f66c:	d103      	bne.n	800f676 <Key_I_set+0x11e>
		{
			Cursor_Position=0;
 800f66e:	4b50      	ldr	r3, [pc, #320]	; (800f7b0 <Key_I_set+0x258>)
 800f670:	2200      	movs	r2, #0
 800f672:	701a      	strb	r2, [r3, #0]
			return;
 800f674:	e091      	b.n	800f79a <Key_I_set+0x242>
		}
		if(Cursor_Position==1)
 800f676:	4b4e      	ldr	r3, [pc, #312]	; (800f7b0 <Key_I_set+0x258>)
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d102      	bne.n	800f684 <Key_I_set+0x12c>
		{
			Cursor_Position=2;
 800f67e:	4b4c      	ldr	r3, [pc, #304]	; (800f7b0 <Key_I_set+0x258>)
 800f680:	2202      	movs	r2, #2
 800f682:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800f684:	4b4a      	ldr	r3, [pc, #296]	; (800f7b0 <Key_I_set+0x258>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	3301      	adds	r3, #1
 800f68a:	b2da      	uxtb	r2, r3
 800f68c:	4b48      	ldr	r3, [pc, #288]	; (800f7b0 <Key_I_set+0x258>)
 800f68e:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f690:	4b45      	ldr	r3, [pc, #276]	; (800f7a8 <Key_I_set+0x250>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d120      	bne.n	800f6da <Key_I_set+0x182>
 800f698:	4b43      	ldr	r3, [pc, #268]	; (800f7a8 <Key_I_set+0x250>)
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	2b04      	cmp	r3, #4
 800f69e:	d11c      	bne.n	800f6da <Key_I_set+0x182>
 800f6a0:	4b41      	ldr	r3, [pc, #260]	; (800f7a8 <Key_I_set+0x250>)
 800f6a2:	689b      	ldr	r3, [r3, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d018      	beq.n	800f6da <Key_I_set+0x182>
 800f6a8:	4b3d      	ldr	r3, [pc, #244]	; (800f7a0 <Key_I_set+0x248>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d114      	bne.n	800f6da <Key_I_set+0x182>
	{
		if(Cursor_Position==7)
 800f6b0:	4b3f      	ldr	r3, [pc, #252]	; (800f7b0 <Key_I_set+0x258>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b07      	cmp	r3, #7
 800f6b6:	d103      	bne.n	800f6c0 <Key_I_set+0x168>
		{
			Cursor_Position=0;
 800f6b8:	4b3d      	ldr	r3, [pc, #244]	; (800f7b0 <Key_I_set+0x258>)
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	701a      	strb	r2, [r3, #0]
			return;
 800f6be:	e06c      	b.n	800f79a <Key_I_set+0x242>
		}
		if(Cursor_Position==3)
 800f6c0:	4b3b      	ldr	r3, [pc, #236]	; (800f7b0 <Key_I_set+0x258>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	d102      	bne.n	800f6ce <Key_I_set+0x176>
		{
			Cursor_Position=4;
 800f6c8:	4b39      	ldr	r3, [pc, #228]	; (800f7b0 <Key_I_set+0x258>)
 800f6ca:	2204      	movs	r2, #4
 800f6cc:	701a      	strb	r2, [r3, #0]

		}

		Cursor_Position++;
 800f6ce:	4b38      	ldr	r3, [pc, #224]	; (800f7b0 <Key_I_set+0x258>)
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	4b36      	ldr	r3, [pc, #216]	; (800f7b0 <Key_I_set+0x258>)
 800f6d8:	701a      	strb	r2, [r3, #0]
	}
	/*AD*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800f6da:	4b33      	ldr	r3, [pc, #204]	; (800f7a8 <Key_I_set+0x250>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d11f      	bne.n	800f722 <Key_I_set+0x1ca>
 800f6e2:	4b31      	ldr	r3, [pc, #196]	; (800f7a8 <Key_I_set+0x250>)
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	2b05      	cmp	r3, #5
 800f6e8:	d11b      	bne.n	800f722 <Key_I_set+0x1ca>
 800f6ea:	4b2f      	ldr	r3, [pc, #188]	; (800f7a8 <Key_I_set+0x250>)
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	609a      	str	r2, [r3, #8]
 800f6f0:	4b2b      	ldr	r3, [pc, #172]	; (800f7a0 <Key_I_set+0x248>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d114      	bne.n	800f722 <Key_I_set+0x1ca>
	{
		if(Cursor_Position==5)
 800f6f8:	4b2d      	ldr	r3, [pc, #180]	; (800f7b0 <Key_I_set+0x258>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2b05      	cmp	r3, #5
 800f6fe:	d103      	bne.n	800f708 <Key_I_set+0x1b0>
		{
			Cursor_Position=0;
 800f700:	4b2b      	ldr	r3, [pc, #172]	; (800f7b0 <Key_I_set+0x258>)
 800f702:	2200      	movs	r2, #0
 800f704:	701a      	strb	r2, [r3, #0]
			return;
 800f706:	e048      	b.n	800f79a <Key_I_set+0x242>
		}
		if(Cursor_Position==2)
 800f708:	4b29      	ldr	r3, [pc, #164]	; (800f7b0 <Key_I_set+0x258>)
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	d102      	bne.n	800f716 <Key_I_set+0x1be>
		{
			Cursor_Position=3;
 800f710:	4b27      	ldr	r3, [pc, #156]	; (800f7b0 <Key_I_set+0x258>)
 800f712:	2203      	movs	r2, #3
 800f714:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800f716:	4b26      	ldr	r3, [pc, #152]	; (800f7b0 <Key_I_set+0x258>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	3301      	adds	r3, #1
 800f71c:	b2da      	uxtb	r2, r3
 800f71e:	4b24      	ldr	r3, [pc, #144]	; (800f7b0 <Key_I_set+0x258>)
 800f720:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800f722:	4b21      	ldr	r3, [pc, #132]	; (800f7a8 <Key_I_set+0x250>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b01      	cmp	r3, #1
 800f728:	d118      	bne.n	800f75c <Key_I_set+0x204>
 800f72a:	4b1f      	ldr	r3, [pc, #124]	; (800f7a8 <Key_I_set+0x250>)
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	2b05      	cmp	r3, #5
 800f730:	d114      	bne.n	800f75c <Key_I_set+0x204>
 800f732:	4b1d      	ldr	r3, [pc, #116]	; (800f7a8 <Key_I_set+0x250>)
 800f734:	2202      	movs	r2, #2
 800f736:	609a      	str	r2, [r3, #8]
 800f738:	4b19      	ldr	r3, [pc, #100]	; (800f7a0 <Key_I_set+0x248>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d10d      	bne.n	800f75c <Key_I_set+0x204>
	{
		if(Cursor_Position==2)
 800f740:	4b1b      	ldr	r3, [pc, #108]	; (800f7b0 <Key_I_set+0x258>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2b02      	cmp	r3, #2
 800f746:	d103      	bne.n	800f750 <Key_I_set+0x1f8>
		{
			Cursor_Position=0;
 800f748:	4b19      	ldr	r3, [pc, #100]	; (800f7b0 <Key_I_set+0x258>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	701a      	strb	r2, [r3, #0]
			return;
 800f74e:	e024      	b.n	800f79a <Key_I_set+0x242>
		}
		Cursor_Position++;
 800f750:	4b17      	ldr	r3, [pc, #92]	; (800f7b0 <Key_I_set+0x258>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	3301      	adds	r3, #1
 800f756:	b2da      	uxtb	r2, r3
 800f758:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <Key_I_set+0x258>)
 800f75a:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800f75c:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <Key_I_set+0x250>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b03      	cmp	r3, #3
 800f762:	d11a      	bne.n	800f79a <Key_I_set+0x242>
 800f764:	4b10      	ldr	r3, [pc, #64]	; (800f7a8 <Key_I_set+0x250>)
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d016      	beq.n	800f79a <Key_I_set+0x242>
 800f76c:	4b0c      	ldr	r3, [pc, #48]	; (800f7a0 <Key_I_set+0x248>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d112      	bne.n	800f79a <Key_I_set+0x242>
	{
		if(xyz.coordinates2==2)//recall
 800f774:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <Key_I_set+0x250>)
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	2b02      	cmp	r3, #2
 800f77a:	d102      	bne.n	800f782 <Key_I_set+0x22a>
		{
			Cursor_flash_off();
 800f77c:	f004 fb48 	bl	8013e10 <Cursor_flash_off>
 800f780:	e00b      	b.n	800f79a <Key_I_set+0x242>
		}
		else if(xyz.coordinates2==1)
 800f782:	4b09      	ldr	r3, [pc, #36]	; (800f7a8 <Key_I_set+0x250>)
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	2b01      	cmp	r3, #1
 800f788:	d107      	bne.n	800f79a <Key_I_set+0x242>
		{
			xyz.coordinates3=2;
 800f78a:	4b07      	ldr	r3, [pc, #28]	; (800f7a8 <Key_I_set+0x250>)
 800f78c:	2202      	movs	r2, #2
 800f78e:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <Key_I_set+0x258>)
 800f792:	2209      	movs	r2, #9
 800f794:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800f796:	f004 fb71 	bl	8013e7c <Cursor_flash_on>
		}

	}

}
 800f79a:	46bd      	mov	sp, r7
 800f79c:	b005      	add	sp, #20
 800f79e:	bd90      	pop	{r4, r7, pc}
 800f7a0:	20003973 	.word	0x20003973
 800f7a4:	2000396f 	.word	0x2000396f
 800f7a8:	200039e0 	.word	0x200039e0
 800f7ac:	20002fd4 	.word	0x20002fd4
 800f7b0:	20003976 	.word	0x20003976
 800f7b4:	200034b4 	.word	0x200034b4

0800f7b8 <enter_second_menu>:


static void enter_second_menu(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
	switch(xyz.coordinates2)
 800f7bc:	4b13      	ldr	r3, [pc, #76]	; (800f80c <enter_second_menu+0x54>)
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	2b08      	cmp	r3, #8
 800f7c2:	d81f      	bhi.n	800f804 <enter_second_menu+0x4c>
 800f7c4:	009a      	lsls	r2, r3, #2
 800f7c6:	4b12      	ldr	r3, [pc, #72]	; (800f810 <enter_second_menu+0x58>)
 800f7c8:	18d3      	adds	r3, r2, r3
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	469f      	mov	pc, r3
	{
		case 1://system to reset
		case 3://RS232 to braudrate
		case 7://protect
		{
			Cursor_Position=0;
 800f7ce:	4b11      	ldr	r3, [pc, #68]	; (800f814 <enter_second_menu+0x5c>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f7d4:	f004 fb1c 	bl	8013e10 <Cursor_flash_off>
			xyz.coordinates3=1;
 800f7d8:	4b0c      	ldr	r3, [pc, #48]	; (800f80c <enter_second_menu+0x54>)
 800f7da:	2201      	movs	r2, #1
 800f7dc:	609a      	str	r2, [r3, #8]
			break;
 800f7de:	e011      	b.n	800f804 <enter_second_menu+0x4c>
		case 5://ADparam show
		case 2://slope to rate
		case 4://timer to delay cycle
		case 6://hard param
		{
			Cursor_Position=6;
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <enter_second_menu+0x5c>)
 800f7e2:	2206      	movs	r2, #6
 800f7e4:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800f7e6:	f004 fb49 	bl	8013e7c <Cursor_flash_on>
			xyz.coordinates3=1;
 800f7ea:	4b08      	ldr	r3, [pc, #32]	; (800f80c <enter_second_menu+0x54>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	609a      	str	r2, [r3, #8]
			break;
 800f7f0:	e008      	b.n	800f804 <enter_second_menu+0x4c>
		}
		case 8://calibration
		{
			Cursor_flash_on();
 800f7f2:	f004 fb43 	bl	8013e7c <Cursor_flash_on>
			Cursor_Position=9;
 800f7f6:	4b07      	ldr	r3, [pc, #28]	; (800f814 <enter_second_menu+0x5c>)
 800f7f8:	2209      	movs	r2, #9
 800f7fa:	701a      	strb	r2, [r3, #0]
			xyz.coordinates3=1;
 800f7fc:	4b03      	ldr	r3, [pc, #12]	; (800f80c <enter_second_menu+0x54>)
 800f7fe:	2201      	movs	r2, #1
 800f800:	609a      	str	r2, [r3, #8]
			break;
 800f802:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 800f804:	46c0      	nop			; (mov r8, r8)
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	46c0      	nop			; (mov r8, r8)
 800f80c:	200039e0 	.word	0x200039e0
 800f810:	0801829c 	.word	0x0801829c
 800f814:	20003976 	.word	0x20003976

0800f818 <ISET_enter>:

static void ISET_enter(void)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800f81c:	4b59      	ldr	r3, [pc, #356]	; (800f984 <ISET_enter+0x16c>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d154      	bne.n	800f8ce <ISET_enter+0xb6>
	{
		Set_Current = String_To_Float(String_Current)*100;
 800f824:	4b58      	ldr	r3, [pc, #352]	; (800f988 <ISET_enter+0x170>)
 800f826:	0018      	movs	r0, r3
 800f828:	f7fe fd0e 	bl	800e248 <String_To_Float>
 800f82c:	1c03      	adds	r3, r0, #0
 800f82e:	4957      	ldr	r1, [pc, #348]	; (800f98c <ISET_enter+0x174>)
 800f830:	1c18      	adds	r0, r3, #0
 800f832:	f7f1 fa15 	bl	8000c60 <__aeabi_fmul>
 800f836:	1c03      	adds	r3, r0, #0
 800f838:	1c18      	adds	r0, r3, #0
 800f83a:	f7f0 fe75 	bl	8000528 <__aeabi_f2uiz>
 800f83e:	0003      	movs	r3, r0
 800f840:	b29a      	uxth	r2, r3
 800f842:	4b53      	ldr	r3, [pc, #332]	; (800f990 <ISET_enter+0x178>)
 800f844:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800f846:	4b52      	ldr	r3, [pc, #328]	; (800f990 <ISET_enter+0x178>)
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	4a52      	ldr	r2, [pc, #328]	; (800f994 <ISET_enter+0x17c>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d902      	bls.n	800f856 <ISET_enter+0x3e>
 800f850:	4b4f      	ldr	r3, [pc, #316]	; (800f990 <ISET_enter+0x178>)
 800f852:	4a50      	ldr	r2, [pc, #320]	; (800f994 <ISET_enter+0x17c>)
 800f854:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=100)   Set_Current=100;
 800f856:	4b4e      	ldr	r3, [pc, #312]	; (800f990 <ISET_enter+0x178>)
 800f858:	881b      	ldrh	r3, [r3, #0]
 800f85a:	2b64      	cmp	r3, #100	; 0x64
 800f85c:	d802      	bhi.n	800f864 <ISET_enter+0x4c>
 800f85e:	4b4c      	ldr	r3, [pc, #304]	; (800f990 <ISET_enter+0x178>)
 800f860:	2264      	movs	r2, #100	; 0x64
 800f862:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800f864:	f7fc fcde 	bl	800c224 <AT25_Save_VISet>

		DAC_Cmd_send(1,4,Set_Voltage);
 800f868:	4b4b      	ldr	r3, [pc, #300]	; (800f998 <ISET_enter+0x180>)
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	001a      	movs	r2, r3
 800f86e:	2104      	movs	r1, #4
 800f870:	2001      	movs	r0, #1
 800f872:	f7fc ffdb 	bl	800c82c <DAC_Cmd_send>
		HAL_Delay(5);
 800f876:	2005      	movs	r0, #5
 800f878:	f7f5 fcc2 	bl	8005200 <HAL_Delay>
		DAC_Cmd_send(1,5,Set_Current);
 800f87c:	4b44      	ldr	r3, [pc, #272]	; (800f990 <ISET_enter+0x178>)
 800f87e:	881b      	ldrh	r3, [r3, #0]
 800f880:	001a      	movs	r2, r3
 800f882:	2105      	movs	r1, #5
 800f884:	2001      	movs	r0, #1
 800f886:	f7fc ffd1 	bl	800c82c <DAC_Cmd_send>

		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))//处于非延时输出
 800f88a:	4b44      	ldr	r3, [pc, #272]	; (800f99c <ISET_enter+0x184>)
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d10e      	bne.n	800f8b0 <ISET_enter+0x98>
 800f892:	4b43      	ldr	r3, [pc, #268]	; (800f9a0 <ISET_enter+0x188>)
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	2bff      	cmp	r3, #255	; 0xff
 800f898:	d10a      	bne.n	800f8b0 <ISET_enter+0x98>
 800f89a:	4b42      	ldr	r3, [pc, #264]	; (800f9a4 <ISET_enter+0x18c>)
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d106      	bne.n	800f8b0 <ISET_enter+0x98>
		{

			DAC_Cmd_send(1,5,Set_Current);
 800f8a2:	4b3b      	ldr	r3, [pc, #236]	; (800f990 <ISET_enter+0x178>)
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	001a      	movs	r2, r3
 800f8a8:	2105      	movs	r1, #5
 800f8aa:	2001      	movs	r0, #1
 800f8ac:	f7fc ffbe 	bl	800c82c <DAC_Cmd_send>
		}
		xyz.coordinates1=0;
 800f8b0:	4b3d      	ldr	r3, [pc, #244]	; (800f9a8 <ISET_enter+0x190>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 800f8b6:	4b3c      	ldr	r3, [pc, #240]	; (800f9a8 <ISET_enter+0x190>)
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f8bc:	4b3a      	ldr	r3, [pc, #232]	; (800f9a8 <ISET_enter+0x190>)
 800f8be:	2200      	movs	r2, #0
 800f8c0:	609a      	str	r2, [r3, #8]
		Cursor_Position=0;
 800f8c2:	4b3a      	ldr	r3, [pc, #232]	; (800f9ac <ISET_enter+0x194>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	701a      	strb	r2, [r3, #0]
		Cursor_flash_off();
 800f8c8:	f004 faa2 	bl	8013e10 <Cursor_flash_off>
		Cursor_Position=0;
		Keys_Encoder_Mode=Encoder_Mode;
		Cursor_flash_off();
	}

}
 800f8cc:	e056      	b.n	800f97c <ISET_enter+0x164>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800f8ce:	4b2d      	ldr	r3, [pc, #180]	; (800f984 <ISET_enter+0x16c>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d152      	bne.n	800f97c <ISET_enter+0x164>
		Keys_Encoder_Mode = Encoder_Mode;//恢复为编码器输入模式
 800f8d6:	4b2b      	ldr	r3, [pc, #172]	; (800f984 <ISET_enter+0x16c>)
 800f8d8:	2201      	movs	r2, #1
 800f8da:	701a      	strb	r2, [r3, #0]
		Set_Current = String_To_Float(String_Current)*100;
 800f8dc:	4b2a      	ldr	r3, [pc, #168]	; (800f988 <ISET_enter+0x170>)
 800f8de:	0018      	movs	r0, r3
 800f8e0:	f7fe fcb2 	bl	800e248 <String_To_Float>
 800f8e4:	1c03      	adds	r3, r0, #0
 800f8e6:	4929      	ldr	r1, [pc, #164]	; (800f98c <ISET_enter+0x174>)
 800f8e8:	1c18      	adds	r0, r3, #0
 800f8ea:	f7f1 f9b9 	bl	8000c60 <__aeabi_fmul>
 800f8ee:	1c03      	adds	r3, r0, #0
 800f8f0:	1c18      	adds	r0, r3, #0
 800f8f2:	f7f0 fe19 	bl	8000528 <__aeabi_f2uiz>
 800f8f6:	0003      	movs	r3, r0
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	4b25      	ldr	r3, [pc, #148]	; (800f990 <ISET_enter+0x178>)
 800f8fc:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800f8fe:	4b24      	ldr	r3, [pc, #144]	; (800f990 <ISET_enter+0x178>)
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	4a24      	ldr	r2, [pc, #144]	; (800f994 <ISET_enter+0x17c>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d902      	bls.n	800f90e <ISET_enter+0xf6>
 800f908:	4b21      	ldr	r3, [pc, #132]	; (800f990 <ISET_enter+0x178>)
 800f90a:	4a22      	ldr	r2, [pc, #136]	; (800f994 <ISET_enter+0x17c>)
 800f90c:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=100)   Set_Current=100;
 800f90e:	4b20      	ldr	r3, [pc, #128]	; (800f990 <ISET_enter+0x178>)
 800f910:	881b      	ldrh	r3, [r3, #0]
 800f912:	2b64      	cmp	r3, #100	; 0x64
 800f914:	d802      	bhi.n	800f91c <ISET_enter+0x104>
 800f916:	4b1e      	ldr	r3, [pc, #120]	; (800f990 <ISET_enter+0x178>)
 800f918:	2264      	movs	r2, #100	; 0x64
 800f91a:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800f91c:	f7fc fc82 	bl	800c224 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))//处于非延时输出模式
 800f920:	4b1e      	ldr	r3, [pc, #120]	; (800f99c <ISET_enter+0x184>)
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d118      	bne.n	800f95a <ISET_enter+0x142>
 800f928:	4b1d      	ldr	r3, [pc, #116]	; (800f9a0 <ISET_enter+0x188>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	2bff      	cmp	r3, #255	; 0xff
 800f92e:	d114      	bne.n	800f95a <ISET_enter+0x142>
 800f930:	4b1c      	ldr	r3, [pc, #112]	; (800f9a4 <ISET_enter+0x18c>)
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2b01      	cmp	r3, #1
 800f936:	d110      	bne.n	800f95a <ISET_enter+0x142>
			DAC_Cmd_send(1,4,Set_Voltage);
 800f938:	4b17      	ldr	r3, [pc, #92]	; (800f998 <ISET_enter+0x180>)
 800f93a:	881b      	ldrh	r3, [r3, #0]
 800f93c:	001a      	movs	r2, r3
 800f93e:	2104      	movs	r1, #4
 800f940:	2001      	movs	r0, #1
 800f942:	f7fc ff73 	bl	800c82c <DAC_Cmd_send>
			HAL_Delay(5);
 800f946:	2005      	movs	r0, #5
 800f948:	f7f5 fc5a 	bl	8005200 <HAL_Delay>
			DAC_Cmd_send(1,5,Set_Current);
 800f94c:	4b10      	ldr	r3, [pc, #64]	; (800f990 <ISET_enter+0x178>)
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	001a      	movs	r2, r3
 800f952:	2105      	movs	r1, #5
 800f954:	2001      	movs	r0, #1
 800f956:	f7fc ff69 	bl	800c82c <DAC_Cmd_send>
		xyz.coordinates1=0;
 800f95a:	4b13      	ldr	r3, [pc, #76]	; (800f9a8 <ISET_enter+0x190>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 800f960:	4b11      	ldr	r3, [pc, #68]	; (800f9a8 <ISET_enter+0x190>)
 800f962:	2200      	movs	r2, #0
 800f964:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f966:	4b10      	ldr	r3, [pc, #64]	; (800f9a8 <ISET_enter+0x190>)
 800f968:	2200      	movs	r2, #0
 800f96a:	609a      	str	r2, [r3, #8]
		Cursor_Position=0;
 800f96c:	4b0f      	ldr	r3, [pc, #60]	; (800f9ac <ISET_enter+0x194>)
 800f96e:	2200      	movs	r2, #0
 800f970:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode=Encoder_Mode;
 800f972:	4b04      	ldr	r3, [pc, #16]	; (800f984 <ISET_enter+0x16c>)
 800f974:	2201      	movs	r2, #1
 800f976:	701a      	strb	r2, [r3, #0]
		Cursor_flash_off();
 800f978:	f004 fa4a 	bl	8013e10 <Cursor_flash_off>
}
 800f97c:	46c0      	nop			; (mov r8, r8)
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	46c0      	nop			; (mov r8, r8)
 800f984:	20002fd4 	.word	0x20002fd4
 800f988:	20003064 	.word	0x20003064
 800f98c:	42c80000 	.word	0x42c80000
 800f990:	20002fdc 	.word	0x20002fdc
 800f994:	00001388 	.word	0x00001388
 800f998:	20002fda 	.word	0x20002fda
 800f99c:	20003971 	.word	0x20003971
 800f9a0:	20002fd1 	.word	0x20002fd1
 800f9a4:	20003970 	.word	0x20003970
 800f9a8:	200039e0 	.word	0x200039e0
 800f9ac:	20003976 	.word	0x20003976

0800f9b0 <VSET_enter>:

static void VSET_enter(void)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800f9b4:	4b46      	ldr	r3, [pc, #280]	; (800fad0 <VSET_enter+0x120>)
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d13f      	bne.n	800fa3c <VSET_enter+0x8c>
	{
		Set_Voltage = String_To_Float(String_Voltage)*100;   //更新设定电压
 800f9bc:	4b45      	ldr	r3, [pc, #276]	; (800fad4 <VSET_enter+0x124>)
 800f9be:	0018      	movs	r0, r3
 800f9c0:	f7fe fc42 	bl	800e248 <String_To_Float>
 800f9c4:	1c03      	adds	r3, r0, #0
 800f9c6:	4944      	ldr	r1, [pc, #272]	; (800fad8 <VSET_enter+0x128>)
 800f9c8:	1c18      	adds	r0, r3, #0
 800f9ca:	f7f1 f949 	bl	8000c60 <__aeabi_fmul>
 800f9ce:	1c03      	adds	r3, r0, #0
 800f9d0:	1c18      	adds	r0, r3, #0
 800f9d2:	f7f0 fda9 	bl	8000528 <__aeabi_f2uiz>
 800f9d6:	0003      	movs	r3, r0
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	4b40      	ldr	r3, [pc, #256]	; (800fadc <VSET_enter+0x12c>)
 800f9dc:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000) Set_Voltage = 15000;  //限制电压最大值为150V
 800f9de:	4b3f      	ldr	r3, [pc, #252]	; (800fadc <VSET_enter+0x12c>)
 800f9e0:	881b      	ldrh	r3, [r3, #0]
 800f9e2:	4a3f      	ldr	r2, [pc, #252]	; (800fae0 <VSET_enter+0x130>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d902      	bls.n	800f9ee <VSET_enter+0x3e>
 800f9e8:	4b3c      	ldr	r3, [pc, #240]	; (800fadc <VSET_enter+0x12c>)
 800f9ea:	4a3d      	ldr	r2, [pc, #244]	; (800fae0 <VSET_enter+0x130>)
 800f9ec:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage<100||Set_Voltage==100)	Set_Voltage=100;
 800f9ee:	4b3b      	ldr	r3, [pc, #236]	; (800fadc <VSET_enter+0x12c>)
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	2b63      	cmp	r3, #99	; 0x63
 800f9f4:	d903      	bls.n	800f9fe <VSET_enter+0x4e>
 800f9f6:	4b39      	ldr	r3, [pc, #228]	; (800fadc <VSET_enter+0x12c>)
 800f9f8:	881b      	ldrh	r3, [r3, #0]
 800f9fa:	2b64      	cmp	r3, #100	; 0x64
 800f9fc:	d102      	bne.n	800fa04 <VSET_enter+0x54>
 800f9fe:	4b37      	ldr	r3, [pc, #220]	; (800fadc <VSET_enter+0x12c>)
 800fa00:	2264      	movs	r2, #100	; 0x64
 800fa02:	801a      	strh	r2, [r3, #0]


		AT25_Save_VISet();
 800fa04:	f7fc fc0e 	bl	800c224 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))//非延时输出
 800fa08:	4b36      	ldr	r3, [pc, #216]	; (800fae4 <VSET_enter+0x134>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d10e      	bne.n	800fa2e <VSET_enter+0x7e>
 800fa10:	4b35      	ldr	r3, [pc, #212]	; (800fae8 <VSET_enter+0x138>)
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	2bff      	cmp	r3, #255	; 0xff
 800fa16:	d10a      	bne.n	800fa2e <VSET_enter+0x7e>
 800fa18:	4b34      	ldr	r3, [pc, #208]	; (800faec <VSET_enter+0x13c>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d106      	bne.n	800fa2e <VSET_enter+0x7e>
		{
			DAC_Cmd_send(1,4,Set_Voltage);
 800fa20:	4b2e      	ldr	r3, [pc, #184]	; (800fadc <VSET_enter+0x12c>)
 800fa22:	881b      	ldrh	r3, [r3, #0]
 800fa24:	001a      	movs	r2, r3
 800fa26:	2104      	movs	r1, #4
 800fa28:	2001      	movs	r0, #1
 800fa2a:	f7fc feff 	bl	800c82c <DAC_Cmd_send>
		}

		xyz.coordinates2=1;//change to I set
 800fa2e:	4b30      	ldr	r3, [pc, #192]	; (800faf0 <VSET_enter+0x140>)
 800fa30:	2201      	movs	r2, #1
 800fa32:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800fa34:	4b2f      	ldr	r3, [pc, #188]	; (800faf4 <VSET_enter+0x144>)
 800fa36:	2209      	movs	r2, #9
 800fa38:	701a      	strb	r2, [r3, #0]

		xyz.coordinates2=1;//change to I set
		Cursor_Position=9;//光标更新

	}
}
 800fa3a:	e045      	b.n	800fac8 <VSET_enter+0x118>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800fa3c:	4b24      	ldr	r3, [pc, #144]	; (800fad0 <VSET_enter+0x120>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d141      	bne.n	800fac8 <VSET_enter+0x118>
		Keys_Encoder_Mode = Encoder_Mode;   //恢复为编码器输入模式
 800fa44:	4b22      	ldr	r3, [pc, #136]	; (800fad0 <VSET_enter+0x120>)
 800fa46:	2201      	movs	r2, #1
 800fa48:	701a      	strb	r2, [r3, #0]
		Set_Voltage = String_To_Float(String_Voltage)*100;
 800fa4a:	4b22      	ldr	r3, [pc, #136]	; (800fad4 <VSET_enter+0x124>)
 800fa4c:	0018      	movs	r0, r3
 800fa4e:	f7fe fbfb 	bl	800e248 <String_To_Float>
 800fa52:	1c03      	adds	r3, r0, #0
 800fa54:	4920      	ldr	r1, [pc, #128]	; (800fad8 <VSET_enter+0x128>)
 800fa56:	1c18      	adds	r0, r3, #0
 800fa58:	f7f1 f902 	bl	8000c60 <__aeabi_fmul>
 800fa5c:	1c03      	adds	r3, r0, #0
 800fa5e:	1c18      	adds	r0, r3, #0
 800fa60:	f7f0 fd62 	bl	8000528 <__aeabi_f2uiz>
 800fa64:	0003      	movs	r3, r0
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	4b1c      	ldr	r3, [pc, #112]	; (800fadc <VSET_enter+0x12c>)
 800fa6a:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000) Set_Voltage = 15000;  //限制电压最大值为150V
 800fa6c:	4b1b      	ldr	r3, [pc, #108]	; (800fadc <VSET_enter+0x12c>)
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	4a1b      	ldr	r2, [pc, #108]	; (800fae0 <VSET_enter+0x130>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d902      	bls.n	800fa7c <VSET_enter+0xcc>
 800fa76:	4b19      	ldr	r3, [pc, #100]	; (800fadc <VSET_enter+0x12c>)
 800fa78:	4a19      	ldr	r2, [pc, #100]	; (800fae0 <VSET_enter+0x130>)
 800fa7a:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage<100||Set_Voltage==100)	Set_Voltage=100;
 800fa7c:	4b17      	ldr	r3, [pc, #92]	; (800fadc <VSET_enter+0x12c>)
 800fa7e:	881b      	ldrh	r3, [r3, #0]
 800fa80:	2b63      	cmp	r3, #99	; 0x63
 800fa82:	d903      	bls.n	800fa8c <VSET_enter+0xdc>
 800fa84:	4b15      	ldr	r3, [pc, #84]	; (800fadc <VSET_enter+0x12c>)
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	2b64      	cmp	r3, #100	; 0x64
 800fa8a:	d102      	bne.n	800fa92 <VSET_enter+0xe2>
 800fa8c:	4b13      	ldr	r3, [pc, #76]	; (800fadc <VSET_enter+0x12c>)
 800fa8e:	2264      	movs	r2, #100	; 0x64
 800fa90:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fa92:	f7fc fbc7 	bl	800c224 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))
 800fa96:	4b13      	ldr	r3, [pc, #76]	; (800fae4 <VSET_enter+0x134>)
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d10e      	bne.n	800fabc <VSET_enter+0x10c>
 800fa9e:	4b12      	ldr	r3, [pc, #72]	; (800fae8 <VSET_enter+0x138>)
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2bff      	cmp	r3, #255	; 0xff
 800faa4:	d10a      	bne.n	800fabc <VSET_enter+0x10c>
 800faa6:	4b11      	ldr	r3, [pc, #68]	; (800faec <VSET_enter+0x13c>)
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d106      	bne.n	800fabc <VSET_enter+0x10c>
			DAC_Cmd_send(1,4,Set_Voltage);
 800faae:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <VSET_enter+0x12c>)
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	001a      	movs	r2, r3
 800fab4:	2104      	movs	r1, #4
 800fab6:	2001      	movs	r0, #1
 800fab8:	f7fc feb8 	bl	800c82c <DAC_Cmd_send>
		xyz.coordinates2=1;//change to I set
 800fabc:	4b0c      	ldr	r3, [pc, #48]	; (800faf0 <VSET_enter+0x140>)
 800fabe:	2201      	movs	r2, #1
 800fac0:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800fac2:	4b0c      	ldr	r3, [pc, #48]	; (800faf4 <VSET_enter+0x144>)
 800fac4:	2209      	movs	r2, #9
 800fac6:	701a      	strb	r2, [r3, #0]
}
 800fac8:	46c0      	nop			; (mov r8, r8)
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	46c0      	nop			; (mov r8, r8)
 800fad0:	20002fd4 	.word	0x20002fd4
 800fad4:	2000305c 	.word	0x2000305c
 800fad8:	42c80000 	.word	0x42c80000
 800fadc:	20002fda 	.word	0x20002fda
 800fae0:	00003a98 	.word	0x00003a98
 800fae4:	20003971 	.word	0x20003971
 800fae8:	20002fd1 	.word	0x20002fd1
 800faec:	20003970 	.word	0x20003970
 800faf0:	200039e0 	.word	0x200039e0
 800faf4:	20003976 	.word	0x20003976

0800faf8 <Password_enter>:

static void Password_enter(void)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
	if(strcmp(String_Password,Password)==0)//密码正确
 800fafe:	4a27      	ldr	r2, [pc, #156]	; (800fb9c <Password_enter+0xa4>)
 800fb00:	4b27      	ldr	r3, [pc, #156]	; (800fba0 <Password_enter+0xa8>)
 800fb02:	0011      	movs	r1, r2
 800fb04:	0018      	movs	r0, r3
 800fb06:	f7f0 fafb 	bl	8000100 <strcmp>
 800fb0a:	1e03      	subs	r3, r0, #0
 800fb0c:	d122      	bne.n	800fb54 <Password_enter+0x5c>
	{
		Third_Menu_Flag=1;
 800fb0e:	4b25      	ldr	r3, [pc, #148]	; (800fba4 <Password_enter+0xac>)
 800fb10:	2201      	movs	r2, #1
 800fb12:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=2;//更新为显示隐藏界面
 800fb14:	4b24      	ldr	r3, [pc, #144]	; (800fba8 <Password_enter+0xb0>)
 800fb16:	2202      	movs	r2, #2
 800fb18:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 800fb1a:	4b24      	ldr	r3, [pc, #144]	; (800fbac <Password_enter+0xb4>)
 800fb1c:	220a      	movs	r2, #10
 800fb1e:	701a      	strb	r2, [r3, #0]
		Cursor_flash_off();
 800fb20:	f004 f976 	bl	8013e10 <Cursor_flash_off>

		for(uint8_t i=0;i<6;i++)
 800fb24:	1dfb      	adds	r3, r7, #7
 800fb26:	2200      	movs	r2, #0
 800fb28:	701a      	strb	r2, [r3, #0]
 800fb2a:	e00e      	b.n	800fb4a <Password_enter+0x52>
		{
			String_Password_mask[i]=' ';
 800fb2c:	1dfb      	adds	r3, r7, #7
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	4a1f      	ldr	r2, [pc, #124]	; (800fbb0 <Password_enter+0xb8>)
 800fb32:	2120      	movs	r1, #32
 800fb34:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 800fb36:	1dfb      	adds	r3, r7, #7
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	4a19      	ldr	r2, [pc, #100]	; (800fba0 <Password_enter+0xa8>)
 800fb3c:	2120      	movs	r1, #32
 800fb3e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 800fb40:	1dfb      	adds	r3, r7, #7
 800fb42:	781a      	ldrb	r2, [r3, #0]
 800fb44:	1dfb      	adds	r3, r7, #7
 800fb46:	3201      	adds	r2, #1
 800fb48:	701a      	strb	r2, [r3, #0]
 800fb4a:	1dfb      	adds	r3, r7, #7
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	2b05      	cmp	r3, #5
 800fb50:	d9ec      	bls.n	800fb2c <Password_enter+0x34>
			String_Password[i]=' ';
		}

	}

}
 800fb52:	e01f      	b.n	800fb94 <Password_enter+0x9c>
		Third_Menu_Flag=1;
 800fb54:	4b13      	ldr	r3, [pc, #76]	; (800fba4 <Password_enter+0xac>)
 800fb56:	2201      	movs	r2, #1
 800fb58:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=1;
 800fb5a:	4b13      	ldr	r3, [pc, #76]	; (800fba8 <Password_enter+0xb0>)
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 800fb60:	4b12      	ldr	r3, [pc, #72]	; (800fbac <Password_enter+0xb4>)
 800fb62:	220a      	movs	r2, #10
 800fb64:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<6;i++)
 800fb66:	1dbb      	adds	r3, r7, #6
 800fb68:	2200      	movs	r2, #0
 800fb6a:	701a      	strb	r2, [r3, #0]
 800fb6c:	e00e      	b.n	800fb8c <Password_enter+0x94>
			String_Password_mask[i]=' ';
 800fb6e:	1dbb      	adds	r3, r7, #6
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	4a0f      	ldr	r2, [pc, #60]	; (800fbb0 <Password_enter+0xb8>)
 800fb74:	2120      	movs	r1, #32
 800fb76:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 800fb78:	1dbb      	adds	r3, r7, #6
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	4a08      	ldr	r2, [pc, #32]	; (800fba0 <Password_enter+0xa8>)
 800fb7e:	2120      	movs	r1, #32
 800fb80:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 800fb82:	1dbb      	adds	r3, r7, #6
 800fb84:	781a      	ldrb	r2, [r3, #0]
 800fb86:	1dbb      	adds	r3, r7, #6
 800fb88:	3201      	adds	r2, #1
 800fb8a:	701a      	strb	r2, [r3, #0]
 800fb8c:	1dbb      	adds	r3, r7, #6
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	2b05      	cmp	r3, #5
 800fb92:	d9ec      	bls.n	800fb6e <Password_enter+0x76>
}
 800fb94:	46c0      	nop			; (mov r8, r8)
 800fb96:	46bd      	mov	sp, r7
 800fb98:	b002      	add	sp, #8
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	08018294 	.word	0x08018294
 800fba0:	200030a8 	.word	0x200030a8
 800fba4:	20002fd2 	.word	0x20002fd2
 800fba8:	200039e0 	.word	0x200039e0
 800fbac:	20003976 	.word	0x20003976
 800fbb0:	200030b0 	.word	0x200030b0

0800fbb4 <IRateSET_enter>:

static void IRateSET_enter(void)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_V_Slope=String_To_Float(String_I_Rate);
 800fbb8:	4b13      	ldr	r3, [pc, #76]	; (800fc08 <IRateSET_enter+0x54>)
 800fbba:	0018      	movs	r0, r3
 800fbbc:	f7fe fb44 	bl	800e248 <String_To_Float>
 800fbc0:	1c03      	adds	r3, r0, #0
 800fbc2:	1c18      	adds	r0, r3, #0
 800fbc4:	f7f0 fcb0 	bl	8000528 <__aeabi_f2uiz>
 800fbc8:	0003      	movs	r3, r0
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	4b0f      	ldr	r3, [pc, #60]	; (800fc0c <IRateSET_enter+0x58>)
 800fbce:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,9,Set_I_Slope*10);
 800fbd0:	4b0f      	ldr	r3, [pc, #60]	; (800fc10 <IRateSET_enter+0x5c>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	1c1a      	adds	r2, r3, #0
 800fbd8:	0092      	lsls	r2, r2, #2
 800fbda:	18d3      	adds	r3, r2, r3
 800fbdc:	18db      	adds	r3, r3, r3
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	001a      	movs	r2, r3
 800fbe2:	2109      	movs	r1, #9
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	f7fc fe21 	bl	800c82c <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 800fbea:	f7fc fc8b 	bl	800c504 <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 800fbee:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <IRateSET_enter+0x60>)
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=2;//完成后设定，进入下一设定
 800fbf4:	4b08      	ldr	r3, [pc, #32]	; (800fc18 <IRateSET_enter+0x64>)
 800fbf6:	2202      	movs	r2, #2
 800fbf8:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 800fbfa:	4b08      	ldr	r3, [pc, #32]	; (800fc1c <IRateSET_enter+0x68>)
 800fbfc:	2206      	movs	r2, #6
 800fbfe:	701a      	strb	r2, [r3, #0]


}
 800fc00:	46c0      	nop			; (mov r8, r8)
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	46c0      	nop			; (mov r8, r8)
 800fc08:	20003044 	.word	0x20003044
 800fc0c:	2000397f 	.word	0x2000397f
 800fc10:	20003980 	.word	0x20003980
 800fc14:	20002fd2 	.word	0x20002fd2
 800fc18:	200039e0 	.word	0x200039e0
 800fc1c:	20003976 	.word	0x20003976

0800fc20 <VRateSET_enter>:

static void VRateSET_enter(void)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_V_Slope=String_To_Float(String_V_Rate)*10;
 800fc24:	4b14      	ldr	r3, [pc, #80]	; (800fc78 <VRateSET_enter+0x58>)
 800fc26:	0018      	movs	r0, r3
 800fc28:	f7fe fb0e 	bl	800e248 <String_To_Float>
 800fc2c:	1c03      	adds	r3, r0, #0
 800fc2e:	4913      	ldr	r1, [pc, #76]	; (800fc7c <VRateSET_enter+0x5c>)
 800fc30:	1c18      	adds	r0, r3, #0
 800fc32:	f7f1 f815 	bl	8000c60 <__aeabi_fmul>
 800fc36:	1c03      	adds	r3, r0, #0
 800fc38:	1c18      	adds	r0, r3, #0
 800fc3a:	f7f0 fc75 	bl	8000528 <__aeabi_f2uiz>
 800fc3e:	0003      	movs	r3, r0
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	4b0f      	ldr	r3, [pc, #60]	; (800fc80 <VRateSET_enter+0x60>)
 800fc44:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_V_Slope);
 800fc46:	4b0e      	ldr	r3, [pc, #56]	; (800fc80 <VRateSET_enter+0x60>)
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	001a      	movs	r2, r3
 800fc4e:	2108      	movs	r1, #8
 800fc50:	2001      	movs	r0, #1
 800fc52:	f7fc fdeb 	bl	800c82c <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 800fc56:	f7fc fc55 	bl	800c504 <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 800fc5a:	4b0a      	ldr	r3, [pc, #40]	; (800fc84 <VRateSET_enter+0x64>)
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=0;//完成后设定，返回上一级
 800fc60:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <VRateSET_enter+0x68>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 800fc66:	4b09      	ldr	r3, [pc, #36]	; (800fc8c <VRateSET_enter+0x6c>)
 800fc68:	2206      	movs	r2, #6
 800fc6a:	701a      	strb	r2, [r3, #0]
	Cursor_flash_off();
 800fc6c:	f004 f8d0 	bl	8013e10 <Cursor_flash_off>
}
 800fc70:	46c0      	nop			; (mov r8, r8)
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	46c0      	nop			; (mov r8, r8)
 800fc78:	20003050 	.word	0x20003050
 800fc7c:	41200000 	.word	0x41200000
 800fc80:	2000397f 	.word	0x2000397f
 800fc84:	20002fd2 	.word	0x20002fd2
 800fc88:	200039e0 	.word	0x200039e0
 800fc8c:	20003976 	.word	0x20003976

0800fc90 <Save_enter>:

static void Save_enter(void)
{
 800fc90:	b5b0      	push	{r4, r5, r7, lr}
 800fc92:	af00      	add	r7, sp, #0
	Recall_Save_Voltage[Recall_Save_Number]=String_To_Float(String_Save_V);//将交互界面的数值进行转换
 800fc94:	4b22      	ldr	r3, [pc, #136]	; (800fd20 <Save_enter+0x90>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	001c      	movs	r4, r3
 800fc9a:	4b22      	ldr	r3, [pc, #136]	; (800fd24 <Save_enter+0x94>)
 800fc9c:	0018      	movs	r0, r3
 800fc9e:	f7fe fad3 	bl	800e248 <String_To_Float>
 800fca2:	1c01      	adds	r1, r0, #0
 800fca4:	4b20      	ldr	r3, [pc, #128]	; (800fd28 <Save_enter+0x98>)
 800fca6:	00a2      	lsls	r2, r4, #2
 800fca8:	50d1      	str	r1, [r2, r3]
	Recall_Save_Current[Recall_Save_Number]=String_To_Float(String_Save_I);
 800fcaa:	4b1d      	ldr	r3, [pc, #116]	; (800fd20 <Save_enter+0x90>)
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	001c      	movs	r4, r3
 800fcb0:	4b1e      	ldr	r3, [pc, #120]	; (800fd2c <Save_enter+0x9c>)
 800fcb2:	0018      	movs	r0, r3
 800fcb4:	f7fe fac8 	bl	800e248 <String_To_Float>
 800fcb8:	1c01      	adds	r1, r0, #0
 800fcba:	4b1d      	ldr	r3, [pc, #116]	; (800fd30 <Save_enter+0xa0>)
 800fcbc:	00a2      	lsls	r2, r4, #2
 800fcbe:	50d1      	str	r1, [r2, r3]
	Recall_Save_Power[Recall_Save_Number]=Recall_Save_Voltage[Recall_Save_Number]*Recall_Save_Current[Recall_Save_Number];
 800fcc0:	4b17      	ldr	r3, [pc, #92]	; (800fd20 <Save_enter+0x90>)
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	001a      	movs	r2, r3
 800fcc6:	4b18      	ldr	r3, [pc, #96]	; (800fd28 <Save_enter+0x98>)
 800fcc8:	0092      	lsls	r2, r2, #2
 800fcca:	58d0      	ldr	r0, [r2, r3]
 800fccc:	4b14      	ldr	r3, [pc, #80]	; (800fd20 <Save_enter+0x90>)
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	001a      	movs	r2, r3
 800fcd2:	4b17      	ldr	r3, [pc, #92]	; (800fd30 <Save_enter+0xa0>)
 800fcd4:	0092      	lsls	r2, r2, #2
 800fcd6:	58d2      	ldr	r2, [r2, r3]
 800fcd8:	4b11      	ldr	r3, [pc, #68]	; (800fd20 <Save_enter+0x90>)
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	001c      	movs	r4, r3
 800fcde:	1c11      	adds	r1, r2, #0
 800fce0:	f7f0 ffbe 	bl	8000c60 <__aeabi_fmul>
 800fce4:	1c03      	adds	r3, r0, #0
 800fce6:	1c19      	adds	r1, r3, #0
 800fce8:	4b12      	ldr	r3, [pc, #72]	; (800fd34 <Save_enter+0xa4>)
 800fcea:	00a2      	lsls	r2, r4, #2
 800fcec:	50d1      	str	r1, [r2, r3]
	AT25_Save_Recall_Save_VI(Recall_Save_Number);
 800fcee:	4b0c      	ldr	r3, [pc, #48]	; (800fd20 <Save_enter+0x90>)
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	0018      	movs	r0, r3
 800fcf4:	f7fc fadc 	bl	800c2b0 <AT25_Save_Recall_Save_VI>

	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 800fcf8:	4b0f      	ldr	r3, [pc, #60]	; (800fd38 <Save_enter+0xa8>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d109      	bne.n	800fd14 <Save_enter+0x84>
 800fd00:	4b0e      	ldr	r3, [pc, #56]	; (800fd3c <Save_enter+0xac>)
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2bff      	cmp	r3, #255	; 0xff
 800fd06:	d105      	bne.n	800fd14 <Save_enter+0x84>
 800fd08:	4b0d      	ldr	r3, [pc, #52]	; (800fd40 <Save_enter+0xb0>)
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d101      	bne.n	800fd14 <Save_enter+0x84>
	{
		power_on();
 800fd10:	f7fc fe32 	bl	800c978 <power_on>
	}
	Cursor_Position=0;
 800fd14:	4b0b      	ldr	r3, [pc, #44]	; (800fd44 <Save_enter+0xb4>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	701a      	strb	r2, [r3, #0]
}
 800fd1a:	46c0      	nop			; (mov r8, r8)
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd20:	20003975 	.word	0x20003975
 800fd24:	20003020 	.word	0x20003020
 800fd28:	200039f8 	.word	0x200039f8
 800fd2c:	2000302c 	.word	0x2000302c
 800fd30:	20003a20 	.word	0x20003a20
 800fd34:	20003a48 	.word	0x20003a48
 800fd38:	20003971 	.word	0x20003971
 800fd3c:	20002fd1 	.word	0x20002fd1
 800fd40:	20003970 	.word	0x20003970
 800fd44:	20003976 	.word	0x20003976

0800fd48 <Load_enter>:

static void Load_enter(void)
{
 800fd48:	b5b0      	push	{r4, r5, r7, lr}
 800fd4a:	af00      	add	r7, sp, #0

	xyz.coordinates3=1;
 800fd4c:	4b37      	ldr	r3, [pc, #220]	; (800fe2c <Load_enter+0xe4>)
 800fd4e:	2201      	movs	r2, #1
 800fd50:	609a      	str	r2, [r3, #8]
	Recall_Save_Voltage[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 800fd52:	4b37      	ldr	r3, [pc, #220]	; (800fe30 <Load_enter+0xe8>)
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	0018      	movs	r0, r3
 800fd58:	f7fc fb16 	bl	800c388 <AT25_Save_Recall_Recall_VI>
 800fd5c:	0003      	movs	r3, r0
 800fd5e:	0018      	movs	r0, r3
 800fd60:	f7f3 f850 	bl	8002e04 <__aeabi_i2d>
 800fd64:	2200      	movs	r2, #0
 800fd66:	4b33      	ldr	r3, [pc, #204]	; (800fe34 <Load_enter+0xec>)
 800fd68:	f7f1 fdf8 	bl	800195c <__aeabi_ddiv>
 800fd6c:	0002      	movs	r2, r0
 800fd6e:	000b      	movs	r3, r1
 800fd70:	492f      	ldr	r1, [pc, #188]	; (800fe30 <Load_enter+0xe8>)
 800fd72:	7809      	ldrb	r1, [r1, #0]
 800fd74:	000c      	movs	r4, r1
 800fd76:	0010      	movs	r0, r2
 800fd78:	0019      	movs	r1, r3
 800fd7a:	f7f3 f8e1 	bl	8002f40 <__aeabi_d2f>
 800fd7e:	1c01      	adds	r1, r0, #0
 800fd80:	4b2d      	ldr	r3, [pc, #180]	; (800fe38 <Load_enter+0xf0>)
 800fd82:	00a2      	lsls	r2, r4, #2
 800fd84:	50d1      	str	r1, [r2, r3]
	Set_Voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 800fd86:	4b2a      	ldr	r3, [pc, #168]	; (800fe30 <Load_enter+0xe8>)
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	0018      	movs	r0, r3
 800fd8c:	f7fc fafc 	bl	800c388 <AT25_Save_Recall_Recall_VI>
 800fd90:	0003      	movs	r3, r0
 800fd92:	001a      	movs	r2, r3
 800fd94:	4b29      	ldr	r3, [pc, #164]	; (800fe3c <Load_enter+0xf4>)
 800fd96:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,4,Set_Voltage);
 800fd98:	4b28      	ldr	r3, [pc, #160]	; (800fe3c <Load_enter+0xf4>)
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	001a      	movs	r2, r3
 800fd9e:	2104      	movs	r1, #4
 800fda0:	2001      	movs	r0, #1
 800fda2:	f7fc fd43 	bl	800c82c <DAC_Cmd_send>
	HAL_Delay(10);
 800fda6:	200a      	movs	r0, #10
 800fda8:	f7f5 fa2a 	bl	8005200 <HAL_Delay>
	xyz.coordinates3=2;
 800fdac:	4b1f      	ldr	r3, [pc, #124]	; (800fe2c <Load_enter+0xe4>)
 800fdae:	2202      	movs	r2, #2
 800fdb0:	609a      	str	r2, [r3, #8]
	Recall_Save_Current[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 800fdb2:	4b1f      	ldr	r3, [pc, #124]	; (800fe30 <Load_enter+0xe8>)
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	0018      	movs	r0, r3
 800fdb8:	f7fc fae6 	bl	800c388 <AT25_Save_Recall_Recall_VI>
 800fdbc:	0003      	movs	r3, r0
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f7f3 f820 	bl	8002e04 <__aeabi_i2d>
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	4b1b      	ldr	r3, [pc, #108]	; (800fe34 <Load_enter+0xec>)
 800fdc8:	f7f1 fdc8 	bl	800195c <__aeabi_ddiv>
 800fdcc:	0002      	movs	r2, r0
 800fdce:	000b      	movs	r3, r1
 800fdd0:	4917      	ldr	r1, [pc, #92]	; (800fe30 <Load_enter+0xe8>)
 800fdd2:	7809      	ldrb	r1, [r1, #0]
 800fdd4:	000c      	movs	r4, r1
 800fdd6:	0010      	movs	r0, r2
 800fdd8:	0019      	movs	r1, r3
 800fdda:	f7f3 f8b1 	bl	8002f40 <__aeabi_d2f>
 800fdde:	1c01      	adds	r1, r0, #0
 800fde0:	4b17      	ldr	r3, [pc, #92]	; (800fe40 <Load_enter+0xf8>)
 800fde2:	00a2      	lsls	r2, r4, #2
 800fde4:	50d1      	str	r1, [r2, r3]
	Set_Current=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 800fde6:	4b12      	ldr	r3, [pc, #72]	; (800fe30 <Load_enter+0xe8>)
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	0018      	movs	r0, r3
 800fdec:	f7fc facc 	bl	800c388 <AT25_Save_Recall_Recall_VI>
 800fdf0:	0003      	movs	r3, r0
 800fdf2:	001a      	movs	r2, r3
 800fdf4:	4b13      	ldr	r3, [pc, #76]	; (800fe44 <Load_enter+0xfc>)
 800fdf6:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,5,Set_Current);
 800fdf8:	4b12      	ldr	r3, [pc, #72]	; (800fe44 <Load_enter+0xfc>)
 800fdfa:	881b      	ldrh	r3, [r3, #0]
 800fdfc:	001a      	movs	r2, r3
 800fdfe:	2105      	movs	r1, #5
 800fe00:	2001      	movs	r0, #1
 800fe02:	f7fc fd13 	bl	800c82c <DAC_Cmd_send>
	/*
	Recall_Save_Power[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
	Set_Power=Recall_Save_Power[Recall_Save_Number];
	 */

	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 800fe06:	4b10      	ldr	r3, [pc, #64]	; (800fe48 <Load_enter+0x100>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
	{
		//power_on();
	}

	Cursor_Position=0;//光标复位
 800fe0a:	4b10      	ldr	r3, [pc, #64]	; (800fe4c <Load_enter+0x104>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	701a      	strb	r2, [r3, #0]
	xyz.coordinates1=0;
 800fe10:	4b06      	ldr	r3, [pc, #24]	; (800fe2c <Load_enter+0xe4>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	601a      	str	r2, [r3, #0]
	xyz.coordinates2=0;
 800fe16:	4b05      	ldr	r3, [pc, #20]	; (800fe2c <Load_enter+0xe4>)
 800fe18:	2200      	movs	r2, #0
 800fe1a:	605a      	str	r2, [r3, #4]
	xyz.coordinates3=0;
 800fe1c:	4b03      	ldr	r3, [pc, #12]	; (800fe2c <Load_enter+0xe4>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	609a      	str	r2, [r3, #8]
	Cursor_flash_off();
 800fe22:	f003 fff5 	bl	8013e10 <Cursor_flash_off>

}
 800fe26:	46c0      	nop			; (mov r8, r8)
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe2c:	200039e0 	.word	0x200039e0
 800fe30:	20003975 	.word	0x20003975
 800fe34:	40590000 	.word	0x40590000
 800fe38:	200039f8 	.word	0x200039f8
 800fe3c:	20002fda 	.word	0x20002fda
 800fe40:	20003a20 	.word	0x20003a20
 800fe44:	20002fdc 	.word	0x20002fdc
 800fe48:	20003971 	.word	0x20003971
 800fe4c:	20003976 	.word	0x20003976

0800fe50 <Delay_enter>:

static void Delay_enter(void)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	af00      	add	r7, sp, #0

	Delay_h = (String_Delay[0] - '0') * 10 + (String_Delay[1] - '0');
 800fe54:	4b3d      	ldr	r3, [pc, #244]	; (800ff4c <Delay_enter+0xfc>)
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	3b30      	subs	r3, #48	; 0x30
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	1c1a      	adds	r2, r3, #0
 800fe5e:	0092      	lsls	r2, r2, #2
 800fe60:	18d3      	adds	r3, r2, r3
 800fe62:	18db      	adds	r3, r3, r3
 800fe64:	b2da      	uxtb	r2, r3
 800fe66:	4b39      	ldr	r3, [pc, #228]	; (800ff4c <Delay_enter+0xfc>)
 800fe68:	785b      	ldrb	r3, [r3, #1]
 800fe6a:	18d3      	adds	r3, r2, r3
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	3b30      	subs	r3, #48	; 0x30
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	4b37      	ldr	r3, [pc, #220]	; (800ff50 <Delay_enter+0x100>)
 800fe74:	701a      	strb	r2, [r3, #0]
	Delay_m = (String_Delay[3] - '0') * 10 + (String_Delay[4] - '0');
 800fe76:	4b35      	ldr	r3, [pc, #212]	; (800ff4c <Delay_enter+0xfc>)
 800fe78:	78db      	ldrb	r3, [r3, #3]
 800fe7a:	3b30      	subs	r3, #48	; 0x30
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	1c1a      	adds	r2, r3, #0
 800fe80:	0092      	lsls	r2, r2, #2
 800fe82:	18d3      	adds	r3, r2, r3
 800fe84:	18db      	adds	r3, r3, r3
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	4b30      	ldr	r3, [pc, #192]	; (800ff4c <Delay_enter+0xfc>)
 800fe8a:	791b      	ldrb	r3, [r3, #4]
 800fe8c:	18d3      	adds	r3, r2, r3
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	3b30      	subs	r3, #48	; 0x30
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	4b2f      	ldr	r3, [pc, #188]	; (800ff54 <Delay_enter+0x104>)
 800fe96:	701a      	strb	r2, [r3, #0]
	Delay_s = (String_Delay[6] - '0') * 10 + (String_Delay[7] - '0');
 800fe98:	4b2c      	ldr	r3, [pc, #176]	; (800ff4c <Delay_enter+0xfc>)
 800fe9a:	799b      	ldrb	r3, [r3, #6]
 800fe9c:	3b30      	subs	r3, #48	; 0x30
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	1c1a      	adds	r2, r3, #0
 800fea2:	0092      	lsls	r2, r2, #2
 800fea4:	18d3      	adds	r3, r2, r3
 800fea6:	18db      	adds	r3, r3, r3
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	4b28      	ldr	r3, [pc, #160]	; (800ff4c <Delay_enter+0xfc>)
 800feac:	79db      	ldrb	r3, [r3, #7]
 800feae:	18d3      	adds	r3, r2, r3
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	3b30      	subs	r3, #48	; 0x30
 800feb4:	b2da      	uxtb	r2, r3
 800feb6:	4b28      	ldr	r3, [pc, #160]	; (800ff58 <Delay_enter+0x108>)
 800feb8:	701a      	strb	r2, [r3, #0]
	if(Delay_h > 99) Delay_h = 99;
 800feba:	4b25      	ldr	r3, [pc, #148]	; (800ff50 <Delay_enter+0x100>)
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	2b63      	cmp	r3, #99	; 0x63
 800fec0:	d902      	bls.n	800fec8 <Delay_enter+0x78>
 800fec2:	4b23      	ldr	r3, [pc, #140]	; (800ff50 <Delay_enter+0x100>)
 800fec4:	2263      	movs	r2, #99	; 0x63
 800fec6:	701a      	strb	r2, [r3, #0]
	if(Delay_m > 59) Delay_m = 59;
 800fec8:	4b22      	ldr	r3, [pc, #136]	; (800ff54 <Delay_enter+0x104>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	2b3b      	cmp	r3, #59	; 0x3b
 800fece:	d902      	bls.n	800fed6 <Delay_enter+0x86>
 800fed0:	4b20      	ldr	r3, [pc, #128]	; (800ff54 <Delay_enter+0x104>)
 800fed2:	223b      	movs	r2, #59	; 0x3b
 800fed4:	701a      	strb	r2, [r3, #0]
	if(Delay_s > 59) Delay_s = 59;
 800fed6:	4b20      	ldr	r3, [pc, #128]	; (800ff58 <Delay_enter+0x108>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	2b3b      	cmp	r3, #59	; 0x3b
 800fedc:	d902      	bls.n	800fee4 <Delay_enter+0x94>
 800fede:	4b1e      	ldr	r3, [pc, #120]	; (800ff58 <Delay_enter+0x108>)
 800fee0:	223b      	movs	r2, #59	; 0x3b
 800fee2:	701a      	strb	r2, [r3, #0]

	Keys_Encoder_Mode = Encoder_Mode;
 800fee4:	4b1d      	ldr	r3, [pc, #116]	; (800ff5c <Delay_enter+0x10c>)
 800fee6:	2201      	movs	r2, #1
 800fee8:	701a      	strb	r2, [r3, #0]
	if((Delay_h == 0) && (Delay_m == 0) && (Delay_s == 0)) Delay_Function_On_Off = Delay_Function_Off;
 800feea:	4b19      	ldr	r3, [pc, #100]	; (800ff50 <Delay_enter+0x100>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10b      	bne.n	800ff0a <Delay_enter+0xba>
 800fef2:	4b18      	ldr	r3, [pc, #96]	; (800ff54 <Delay_enter+0x104>)
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d107      	bne.n	800ff0a <Delay_enter+0xba>
 800fefa:	4b17      	ldr	r3, [pc, #92]	; (800ff58 <Delay_enter+0x108>)
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d103      	bne.n	800ff0a <Delay_enter+0xba>
 800ff02:	4b17      	ldr	r3, [pc, #92]	; (800ff60 <Delay_enter+0x110>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	701a      	strb	r2, [r3, #0]
 800ff08:	e006      	b.n	800ff18 <Delay_enter+0xc8>
	else if(Delay_Function_On_Off == Delay_Function_Off)   Delay_Function_On_Off = Delay_Function_On;
 800ff0a:	4b15      	ldr	r3, [pc, #84]	; (800ff60 <Delay_enter+0x110>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d102      	bne.n	800ff18 <Delay_enter+0xc8>
 800ff12:	4b13      	ldr	r3, [pc, #76]	; (800ff60 <Delay_enter+0x110>)
 800ff14:	2201      	movs	r2, #1
 800ff16:	701a      	strb	r2, [r3, #0]

	AT25_Save_Delay();
 800ff18:	f7fc fa76 	bl	800c408 <AT25_Save_Delay>

	Third_Menu_Flag=1;
 800ff1c:	4b11      	ldr	r3, [pc, #68]	; (800ff64 <Delay_enter+0x114>)
 800ff1e:	2201      	movs	r2, #1
 800ff20:	701a      	strb	r2, [r3, #0]

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 800ff22:	4b11      	ldr	r3, [pc, #68]	; (800ff68 <Delay_enter+0x118>)
 800ff24:	689b      	ldr	r3, [r3, #8]
 800ff26:	2b03      	cmp	r3, #3
 800ff28:	d103      	bne.n	800ff32 <Delay_enter+0xe2>
 800ff2a:	4b0f      	ldr	r3, [pc, #60]	; (800ff68 <Delay_enter+0x118>)
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	609a      	str	r2, [r3, #8]
 800ff30:	e004      	b.n	800ff3c <Delay_enter+0xec>
	else xyz.coordinates3++;//完成后设定，进入下一级
 800ff32:	4b0d      	ldr	r3, [pc, #52]	; (800ff68 <Delay_enter+0x118>)
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	1c5a      	adds	r2, r3, #1
 800ff38:	4b0b      	ldr	r3, [pc, #44]	; (800ff68 <Delay_enter+0x118>)
 800ff3a:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 800ff3c:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <Delay_enter+0x11c>)
 800ff3e:	2206      	movs	r2, #6
 800ff40:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 800ff42:	f003 ff9b 	bl	8013e7c <Cursor_flash_on>

}
 800ff46:	46c0      	nop			; (mov r8, r8)
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	20003014 	.word	0x20003014
 800ff50:	2000397c 	.word	0x2000397c
 800ff54:	2000397d 	.word	0x2000397d
 800ff58:	2000397e 	.word	0x2000397e
 800ff5c:	20002fd4 	.word	0x20002fd4
 800ff60:	20002fe8 	.word	0x20002fe8
 800ff64:	20002fd2 	.word	0x20002fd2
 800ff68:	200039e0 	.word	0x200039e0
 800ff6c:	20003976 	.word	0x20003976

0800ff70 <Cycle_enter>:

static void Cycle_enter(void)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	af00      	add	r7, sp, #0
	//计算Cycle功能的导通和关断时间，加以限制并存储
	Cycle_On_s = (String_Cycle_On[0] - '0') * 1000 + (String_Cycle_On[1] - '0') * 100 + (String_Cycle_On[2] - '0') * 10 + (String_Cycle_On[3] - '0');
 800ff74:	4b8c      	ldr	r3, [pc, #560]	; (80101a8 <Cycle_enter+0x238>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	3b30      	subs	r3, #48	; 0x30
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	22fa      	movs	r2, #250	; 0xfa
 800ff7e:	0092      	lsls	r2, r2, #2
 800ff80:	4353      	muls	r3, r2
 800ff82:	b29a      	uxth	r2, r3
 800ff84:	4b88      	ldr	r3, [pc, #544]	; (80101a8 <Cycle_enter+0x238>)
 800ff86:	785b      	ldrb	r3, [r3, #1]
 800ff88:	3b30      	subs	r3, #48	; 0x30
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	2164      	movs	r1, #100	; 0x64
 800ff8e:	434b      	muls	r3, r1
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	18d3      	adds	r3, r2, r3
 800ff94:	b29a      	uxth	r2, r3
 800ff96:	4b84      	ldr	r3, [pc, #528]	; (80101a8 <Cycle_enter+0x238>)
 800ff98:	789b      	ldrb	r3, [r3, #2]
 800ff9a:	3b30      	subs	r3, #48	; 0x30
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	1c19      	adds	r1, r3, #0
 800ffa0:	0089      	lsls	r1, r1, #2
 800ffa2:	18cb      	adds	r3, r1, r3
 800ffa4:	18db      	adds	r3, r3, r3
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	18d3      	adds	r3, r2, r3
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	4b7e      	ldr	r3, [pc, #504]	; (80101a8 <Cycle_enter+0x238>)
 800ffae:	78db      	ldrb	r3, [r3, #3]
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	18d3      	adds	r3, r2, r3
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	3b30      	subs	r3, #48	; 0x30
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	4b7c      	ldr	r3, [pc, #496]	; (80101ac <Cycle_enter+0x23c>)
 800ffbc:	801a      	strh	r2, [r3, #0]
	Cycle_On_ms = (String_Cycle_On[5] - '0') * 100 + (String_Cycle_On[6] - '0') * 10 + (String_Cycle_On[7] - '0');
 800ffbe:	4b7a      	ldr	r3, [pc, #488]	; (80101a8 <Cycle_enter+0x238>)
 800ffc0:	795b      	ldrb	r3, [r3, #5]
 800ffc2:	3b30      	subs	r3, #48	; 0x30
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	2264      	movs	r2, #100	; 0x64
 800ffc8:	4353      	muls	r3, r2
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	4b76      	ldr	r3, [pc, #472]	; (80101a8 <Cycle_enter+0x238>)
 800ffce:	799b      	ldrb	r3, [r3, #6]
 800ffd0:	3b30      	subs	r3, #48	; 0x30
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	1c19      	adds	r1, r3, #0
 800ffd6:	0089      	lsls	r1, r1, #2
 800ffd8:	18cb      	adds	r3, r1, r3
 800ffda:	18db      	adds	r3, r3, r3
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	18d3      	adds	r3, r2, r3
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	4b71      	ldr	r3, [pc, #452]	; (80101a8 <Cycle_enter+0x238>)
 800ffe4:	79db      	ldrb	r3, [r3, #7]
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	18d3      	adds	r3, r2, r3
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	3b30      	subs	r3, #48	; 0x30
 800ffee:	b29a      	uxth	r2, r3
 800fff0:	4b6f      	ldr	r3, [pc, #444]	; (80101b0 <Cycle_enter+0x240>)
 800fff2:	801a      	strh	r2, [r3, #0]

	Cycle_Close_s = (String_Cycle_Close[0] - '0') * 1000 + (String_Cycle_Close[1] - '0') * 100 + (String_Cycle_Close[2] - '0') * 10 + (String_Cycle_Close[3] - '0');
 800fff4:	4b6f      	ldr	r3, [pc, #444]	; (80101b4 <Cycle_enter+0x244>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	3b30      	subs	r3, #48	; 0x30
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	22fa      	movs	r2, #250	; 0xfa
 800fffe:	0092      	lsls	r2, r2, #2
 8010000:	4353      	muls	r3, r2
 8010002:	b29a      	uxth	r2, r3
 8010004:	4b6b      	ldr	r3, [pc, #428]	; (80101b4 <Cycle_enter+0x244>)
 8010006:	785b      	ldrb	r3, [r3, #1]
 8010008:	3b30      	subs	r3, #48	; 0x30
 801000a:	b29b      	uxth	r3, r3
 801000c:	2164      	movs	r1, #100	; 0x64
 801000e:	434b      	muls	r3, r1
 8010010:	b29b      	uxth	r3, r3
 8010012:	18d3      	adds	r3, r2, r3
 8010014:	b29a      	uxth	r2, r3
 8010016:	4b67      	ldr	r3, [pc, #412]	; (80101b4 <Cycle_enter+0x244>)
 8010018:	789b      	ldrb	r3, [r3, #2]
 801001a:	3b30      	subs	r3, #48	; 0x30
 801001c:	b29b      	uxth	r3, r3
 801001e:	1c19      	adds	r1, r3, #0
 8010020:	0089      	lsls	r1, r1, #2
 8010022:	18cb      	adds	r3, r1, r3
 8010024:	18db      	adds	r3, r3, r3
 8010026:	b29b      	uxth	r3, r3
 8010028:	18d3      	adds	r3, r2, r3
 801002a:	b29a      	uxth	r2, r3
 801002c:	4b61      	ldr	r3, [pc, #388]	; (80101b4 <Cycle_enter+0x244>)
 801002e:	78db      	ldrb	r3, [r3, #3]
 8010030:	b29b      	uxth	r3, r3
 8010032:	18d3      	adds	r3, r2, r3
 8010034:	b29b      	uxth	r3, r3
 8010036:	3b30      	subs	r3, #48	; 0x30
 8010038:	b29a      	uxth	r2, r3
 801003a:	4b5f      	ldr	r3, [pc, #380]	; (80101b8 <Cycle_enter+0x248>)
 801003c:	801a      	strh	r2, [r3, #0]
	Cycle_Close_ms = (String_Cycle_Close[5] - '0') * 100 + (String_Cycle_Close[6] - '0') * 10 + (String_Cycle_Close[7] - '0');
 801003e:	4b5d      	ldr	r3, [pc, #372]	; (80101b4 <Cycle_enter+0x244>)
 8010040:	795b      	ldrb	r3, [r3, #5]
 8010042:	3b30      	subs	r3, #48	; 0x30
 8010044:	b29b      	uxth	r3, r3
 8010046:	2264      	movs	r2, #100	; 0x64
 8010048:	4353      	muls	r3, r2
 801004a:	b29a      	uxth	r2, r3
 801004c:	4b59      	ldr	r3, [pc, #356]	; (80101b4 <Cycle_enter+0x244>)
 801004e:	799b      	ldrb	r3, [r3, #6]
 8010050:	3b30      	subs	r3, #48	; 0x30
 8010052:	b29b      	uxth	r3, r3
 8010054:	1c19      	adds	r1, r3, #0
 8010056:	0089      	lsls	r1, r1, #2
 8010058:	18cb      	adds	r3, r1, r3
 801005a:	18db      	adds	r3, r3, r3
 801005c:	b29b      	uxth	r3, r3
 801005e:	18d3      	adds	r3, r2, r3
 8010060:	b29a      	uxth	r2, r3
 8010062:	4b54      	ldr	r3, [pc, #336]	; (80101b4 <Cycle_enter+0x244>)
 8010064:	79db      	ldrb	r3, [r3, #7]
 8010066:	b29b      	uxth	r3, r3
 8010068:	18d3      	adds	r3, r2, r3
 801006a:	b29b      	uxth	r3, r3
 801006c:	3b30      	subs	r3, #48	; 0x30
 801006e:	b29a      	uxth	r2, r3
 8010070:	4b52      	ldr	r3, [pc, #328]	; (80101bc <Cycle_enter+0x24c>)
 8010072:	801a      	strh	r2, [r3, #0]
	//最短也是5Hz的波
	if ((Cycle_On_s == 0) && (Cycle_On_ms > 0))
 8010074:	4b4d      	ldr	r3, [pc, #308]	; (80101ac <Cycle_enter+0x23c>)
 8010076:	881b      	ldrh	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d109      	bne.n	8010090 <Cycle_enter+0x120>
 801007c:	4b4c      	ldr	r3, [pc, #304]	; (80101b0 <Cycle_enter+0x240>)
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d005      	beq.n	8010090 <Cycle_enter+0x120>
	{
		Cycle_On_s = 1;
 8010084:	4b49      	ldr	r3, [pc, #292]	; (80101ac <Cycle_enter+0x23c>)
 8010086:	2201      	movs	r2, #1
 8010088:	801a      	strh	r2, [r3, #0]
		Cycle_On_ms = 0;
 801008a:	4b49      	ldr	r3, [pc, #292]	; (80101b0 <Cycle_enter+0x240>)
 801008c:	2200      	movs	r2, #0
 801008e:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_On_s > 9999) Cycle_On_s = 9999;
 8010090:	4b46      	ldr	r3, [pc, #280]	; (80101ac <Cycle_enter+0x23c>)
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	4a4a      	ldr	r2, [pc, #296]	; (80101c0 <Cycle_enter+0x250>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d902      	bls.n	80100a0 <Cycle_enter+0x130>
 801009a:	4b44      	ldr	r3, [pc, #272]	; (80101ac <Cycle_enter+0x23c>)
 801009c:	4a48      	ldr	r2, [pc, #288]	; (80101c0 <Cycle_enter+0x250>)
 801009e:	801a      	strh	r2, [r3, #0]
	if (Cycle_On_ms > 1000) Cycle_On_ms = 1000;
 80100a0:	4b43      	ldr	r3, [pc, #268]	; (80101b0 <Cycle_enter+0x240>)
 80100a2:	881a      	ldrh	r2, [r3, #0]
 80100a4:	23fa      	movs	r3, #250	; 0xfa
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d903      	bls.n	80100b4 <Cycle_enter+0x144>
 80100ac:	4b40      	ldr	r3, [pc, #256]	; (80101b0 <Cycle_enter+0x240>)
 80100ae:	22fa      	movs	r2, #250	; 0xfa
 80100b0:	0092      	lsls	r2, r2, #2
 80100b2:	801a      	strh	r2, [r3, #0]
	if ((Cycle_Close_s == 0) && (Cycle_Close_ms > 0))
 80100b4:	4b40      	ldr	r3, [pc, #256]	; (80101b8 <Cycle_enter+0x248>)
 80100b6:	881b      	ldrh	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d109      	bne.n	80100d0 <Cycle_enter+0x160>
 80100bc:	4b3f      	ldr	r3, [pc, #252]	; (80101bc <Cycle_enter+0x24c>)
 80100be:	881b      	ldrh	r3, [r3, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d005      	beq.n	80100d0 <Cycle_enter+0x160>
	{
		Cycle_Close_s = 1;
 80100c4:	4b3c      	ldr	r3, [pc, #240]	; (80101b8 <Cycle_enter+0x248>)
 80100c6:	2201      	movs	r2, #1
 80100c8:	801a      	strh	r2, [r3, #0]
		Cycle_Close_ms = 0;
 80100ca:	4b3c      	ldr	r3, [pc, #240]	; (80101bc <Cycle_enter+0x24c>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_Close_s > 9999) Cycle_Close_s = 9999;
 80100d0:	4b39      	ldr	r3, [pc, #228]	; (80101b8 <Cycle_enter+0x248>)
 80100d2:	881b      	ldrh	r3, [r3, #0]
 80100d4:	4a3a      	ldr	r2, [pc, #232]	; (80101c0 <Cycle_enter+0x250>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d902      	bls.n	80100e0 <Cycle_enter+0x170>
 80100da:	4b37      	ldr	r3, [pc, #220]	; (80101b8 <Cycle_enter+0x248>)
 80100dc:	4a38      	ldr	r2, [pc, #224]	; (80101c0 <Cycle_enter+0x250>)
 80100de:	801a      	strh	r2, [r3, #0]
	if (Cycle_Close_ms > 1000) Cycle_On_ms = 1000;
 80100e0:	4b36      	ldr	r3, [pc, #216]	; (80101bc <Cycle_enter+0x24c>)
 80100e2:	881a      	ldrh	r2, [r3, #0]
 80100e4:	23fa      	movs	r3, #250	; 0xfa
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d903      	bls.n	80100f4 <Cycle_enter+0x184>
 80100ec:	4b30      	ldr	r3, [pc, #192]	; (80101b0 <Cycle_enter+0x240>)
 80100ee:	22fa      	movs	r2, #250	; 0xfa
 80100f0:	0092      	lsls	r2, r2, #2
 80100f2:	801a      	strh	r2, [r3, #0]
	//判断是否为Cycle功能输出模式
	if(((Cycle_On_s == 0) && (Cycle_On_ms == 0)) || ((Cycle_Close_s == 0) && (Cycle_Close_ms == 0)))
 80100f4:	4b2d      	ldr	r3, [pc, #180]	; (80101ac <Cycle_enter+0x23c>)
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d103      	bne.n	8010104 <Cycle_enter+0x194>
 80100fc:	4b2c      	ldr	r3, [pc, #176]	; (80101b0 <Cycle_enter+0x240>)
 80100fe:	881b      	ldrh	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d007      	beq.n	8010114 <Cycle_enter+0x1a4>
 8010104:	4b2c      	ldr	r3, [pc, #176]	; (80101b8 <Cycle_enter+0x248>)
 8010106:	881b      	ldrh	r3, [r3, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d10a      	bne.n	8010122 <Cycle_enter+0x1b2>
 801010c:	4b2b      	ldr	r3, [pc, #172]	; (80101bc <Cycle_enter+0x24c>)
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d106      	bne.n	8010122 <Cycle_enter+0x1b2>
	{
		Cycle_Function_On_Off = Cycle_Function_Off;
 8010114:	4b2b      	ldr	r3, [pc, #172]	; (80101c4 <Cycle_enter+0x254>)
 8010116:	2200      	movs	r2, #0
 8010118:	701a      	strb	r2, [r3, #0]
		CYCLE_NOT_CYCLE = NOT_CYCLE;
 801011a:	4b2b      	ldr	r3, [pc, #172]	; (80101c8 <Cycle_enter+0x258>)
 801011c:	22f0      	movs	r2, #240	; 0xf0
 801011e:	701a      	strb	r2, [r3, #0]
 8010120:	e015      	b.n	801014e <Cycle_enter+0x1de>
	}
	else if((Cycle_On_s != 0) || (Cycle_On_ms != 0) || (Cycle_Close_s != 0) || (Cycle_Close_ms != 0))
 8010122:	4b22      	ldr	r3, [pc, #136]	; (80101ac <Cycle_enter+0x23c>)
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d10b      	bne.n	8010142 <Cycle_enter+0x1d2>
 801012a:	4b21      	ldr	r3, [pc, #132]	; (80101b0 <Cycle_enter+0x240>)
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d107      	bne.n	8010142 <Cycle_enter+0x1d2>
 8010132:	4b21      	ldr	r3, [pc, #132]	; (80101b8 <Cycle_enter+0x248>)
 8010134:	881b      	ldrh	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d103      	bne.n	8010142 <Cycle_enter+0x1d2>
 801013a:	4b20      	ldr	r3, [pc, #128]	; (80101bc <Cycle_enter+0x24c>)
 801013c:	881b      	ldrh	r3, [r3, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d005      	beq.n	801014e <Cycle_enter+0x1de>
	{
		Cycle_Function_On_Off = Cycle_Function_On;
 8010142:	4b20      	ldr	r3, [pc, #128]	; (80101c4 <Cycle_enter+0x254>)
 8010144:	2201      	movs	r2, #1
 8010146:	701a      	strb	r2, [r3, #0]
		CYCLE_NOT_CYCLE = CYCLE;
 8010148:	4b1f      	ldr	r3, [pc, #124]	; (80101c8 <Cycle_enter+0x258>)
 801014a:	220f      	movs	r2, #15
 801014c:	701a      	strb	r2, [r3, #0]
	}
	AT25_Save_Cycle();
 801014e:	f7fc f98d 	bl	800c46c <AT25_Save_Cycle>

	//输出
	if(OUTPUT_NOT_OUTPUT == OUTPUT)
 8010152:	4b1e      	ldr	r3, [pc, #120]	; (80101cc <Cycle_enter+0x25c>)
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	2b01      	cmp	r3, #1
 8010158:	d111      	bne.n	801017e <Cycle_enter+0x20e>
	{
		/*先输出零，延时一段时间后开始循环输出*/
		Output_Zero();
 801015a:	f7fc fc51 	bl	800ca00 <Output_Zero>
		if(Delay_Function_On_Off == Delay_Function_On) TIM16_DELAY_ON();
 801015e:	4b1c      	ldr	r3, [pc, #112]	; (80101d0 <Cycle_enter+0x260>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	2b01      	cmp	r3, #1
 8010164:	d102      	bne.n	801016c <Cycle_enter+0x1fc>
 8010166:	f001 fa83 	bl	8011670 <TIM16_DELAY_ON>
 801016a:	e008      	b.n	801017e <Cycle_enter+0x20e>
		else if(Cycle_Function_On_Off == Cycle_Function_On) TIM17_CYCLE_ON();
 801016c:	4b15      	ldr	r3, [pc, #84]	; (80101c4 <Cycle_enter+0x254>)
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d102      	bne.n	801017a <Cycle_enter+0x20a>
 8010174:	f001 fae0 	bl	8011738 <TIM17_CYCLE_ON>
 8010178:	e001      	b.n	801017e <Cycle_enter+0x20e>
		else power_on();//直接输出
 801017a:	f7fc fbfd 	bl	800c978 <power_on>
	}

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 801017e:	4b15      	ldr	r3, [pc, #84]	; (80101d4 <Cycle_enter+0x264>)
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	2b03      	cmp	r3, #3
 8010184:	d103      	bne.n	801018e <Cycle_enter+0x21e>
 8010186:	4b13      	ldr	r3, [pc, #76]	; (80101d4 <Cycle_enter+0x264>)
 8010188:	2201      	movs	r2, #1
 801018a:	609a      	str	r2, [r3, #8]
 801018c:	e004      	b.n	8010198 <Cycle_enter+0x228>
	else xyz.coordinates3++;//完成后设定，进入下一级
 801018e:	4b11      	ldr	r3, [pc, #68]	; (80101d4 <Cycle_enter+0x264>)
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	1c5a      	adds	r2, r3, #1
 8010194:	4b0f      	ldr	r3, [pc, #60]	; (80101d4 <Cycle_enter+0x264>)
 8010196:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 8010198:	4b0f      	ldr	r3, [pc, #60]	; (80101d8 <Cycle_enter+0x268>)
 801019a:	2206      	movs	r2, #6
 801019c:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 801019e:	f003 fe6d 	bl	8013e7c <Cursor_flash_on>
}
 80101a2:	46c0      	nop			; (mov r8, r8)
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	20002ffc 	.word	0x20002ffc
 80101ac:	20003978 	.word	0x20003978
 80101b0:	20002fd6 	.word	0x20002fd6
 80101b4:	20003008 	.word	0x20003008
 80101b8:	2000397a 	.word	0x2000397a
 80101bc:	20002fd8 	.word	0x20002fd8
 80101c0:	0000270f 	.word	0x0000270f
 80101c4:	200039c8 	.word	0x200039c8
 80101c8:	20002fd0 	.word	0x20002fd0
 80101cc:	20003971 	.word	0x20003971
 80101d0:	20002fe8 	.word	0x20002fe8
 80101d4:	200039e0 	.word	0x200039e0
 80101d8:	20003976 	.word	0x20003976

080101dc <Reset_enter>:

static void Reset_enter(void)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	af00      	add	r7, sp, #0

	AT25_Reset();
 80101e0:	f7fc fa5e 	bl	800c6a0 <AT25_Reset>
	DAC_Cmd_send(1,11,0);
 80101e4:	2200      	movs	r2, #0
 80101e6:	210b      	movs	r1, #11
 80101e8:	2001      	movs	r0, #1
 80101ea:	f7fc fb1f 	bl	800c82c <DAC_Cmd_send>
	HAL_Delay(10);//等控制板复位完成
 80101ee:	200a      	movs	r0, #10
 80101f0:	f7f5 f806 	bl	8005200 <HAL_Delay>
	NVIC_SystemReset();
 80101f4:	f7fe f816 	bl	800e224 <__NVIC_SystemReset>

080101f8 <Sample_show_enter>:
	Cursor_Position=6;//光标复位
	Cursor_flash_off();
}

static void Sample_show_enter(void)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	af00      	add	r7, sp, #0

	static uint8_t count=1;
	if(count==1)
 80101fc:	4b0f      	ldr	r3, [pc, #60]	; (801023c <Sample_show_enter+0x44>)
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d108      	bne.n	8010216 <Sample_show_enter+0x1e>
	{
		count=2;
 8010204:	4b0d      	ldr	r3, [pc, #52]	; (801023c <Sample_show_enter+0x44>)
 8010206:	2202      	movs	r2, #2
 8010208:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x00);
 801020a:	2200      	movs	r2, #0
 801020c:	2102      	movs	r1, #2
 801020e:	2001      	movs	r0, #1
 8010210:	f7fc fb0c 	bl	800c82c <DAC_Cmd_send>
 8010214:	e00b      	b.n	801022e <Sample_show_enter+0x36>
	}
	else if(count==2)
 8010216:	4b09      	ldr	r3, [pc, #36]	; (801023c <Sample_show_enter+0x44>)
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	2b02      	cmp	r3, #2
 801021c:	d107      	bne.n	801022e <Sample_show_enter+0x36>
	{
		count=1;
 801021e:	4b07      	ldr	r3, [pc, #28]	; (801023c <Sample_show_enter+0x44>)
 8010220:	2201      	movs	r2, #1
 8010222:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x01);
 8010224:	2201      	movs	r2, #1
 8010226:	2102      	movs	r1, #2
 8010228:	2001      	movs	r0, #1
 801022a:	f7fc faff 	bl	800c82c <DAC_Cmd_send>
	}
	Shift_Not_Shift=Not_Shift;
 801022e:	4b04      	ldr	r3, [pc, #16]	; (8010240 <Sample_show_enter+0x48>)
 8010230:	2200      	movs	r2, #0
 8010232:	701a      	strb	r2, [r3, #0]
}
 8010234:	46c0      	nop			; (mov r8, r8)
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	46c0      	nop			; (mov r8, r8)
 801023c:	20002fe4 	.word	0x20002fe4
 8010240:	2000396f 	.word	0x2000396f

08010244 <Key_Enter>:
 * @brief  按键Enter的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Enter(void)
{
 8010244:	b5b0      	push	{r4, r5, r7, lr}
 8010246:	af00      	add	r7, sp, #0
	if(LOCK_UNLOCK == UNLOCK)
 8010248:	4bb7      	ldr	r3, [pc, #732]	; (8010528 <Key_Enter+0x2e4>)
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d000      	beq.n	8010252 <Key_Enter+0xe>
 8010250:	e1d7      	b.n	8010602 <Key_Enter+0x3be>
	{
		if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010252:	4bb6      	ldr	r3, [pc, #728]	; (801052c <Key_Enter+0x2e8>)
 8010254:	681b      	ldr	r3, [r3, #0]
			if(Inner_Mode==ENABLE) Inner_Mode=DISABLE;
			else if(Inner_Mode==DISABLE) Inner_Mode=ENABLE;
			*/
		}
		/*first menu enter second menu*/
		if( xyz.coordinates1==1 && (xyz.coordinates3==0) )//当处于第一级菜单,按下enter进入二级菜单
 8010256:	4bb5      	ldr	r3, [pc, #724]	; (801052c <Key_Enter+0x2e8>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d106      	bne.n	801026c <Key_Enter+0x28>
 801025e:	4bb3      	ldr	r3, [pc, #716]	; (801052c <Key_Enter+0x2e8>)
 8010260:	689b      	ldr	r3, [r3, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d102      	bne.n	801026c <Key_Enter+0x28>
		{
			enter_second_menu();
 8010266:	f7ff faa7 	bl	800f7b8 <enter_second_menu>
			return;
 801026a:	e1ca      	b.n	8010602 <Key_Enter+0x3be>
		}
		/*I——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) )//I_set 按下enter
 801026c:	4baf      	ldr	r3, [pc, #700]	; (801052c <Key_Enter+0x2e8>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2b02      	cmp	r3, #2
 8010272:	d109      	bne.n	8010288 <Key_Enter+0x44>
 8010274:	4bad      	ldr	r3, [pc, #692]	; (801052c <Key_Enter+0x2e8>)
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d105      	bne.n	8010288 <Key_Enter+0x44>
 801027c:	4bab      	ldr	r3, [pc, #684]	; (801052c <Key_Enter+0x2e8>)
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d101      	bne.n	8010288 <Key_Enter+0x44>
		{
			ISET_enter();
 8010284:	f7ff fac8 	bl	800f818 <ISET_enter>
		}
		/*V——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) )//V_set 按下enter
 8010288:	4ba8      	ldr	r3, [pc, #672]	; (801052c <Key_Enter+0x2e8>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b02      	cmp	r3, #2
 801028e:	d109      	bne.n	80102a4 <Key_Enter+0x60>
 8010290:	4ba6      	ldr	r3, [pc, #664]	; (801052c <Key_Enter+0x2e8>)
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	2b02      	cmp	r3, #2
 8010296:	d105      	bne.n	80102a4 <Key_Enter+0x60>
 8010298:	4ba4      	ldr	r3, [pc, #656]	; (801052c <Key_Enter+0x2e8>)
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d101      	bne.n	80102a4 <Key_Enter+0x60>
		{
			VSET_enter();
 80102a0:	f7ff fb86 	bl	800f9b0 <VSET_enter>
		}
		/*AD GAIN FRQ enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))//GAIN
 80102a4:	4ba1      	ldr	r3, [pc, #644]	; (801052c <Key_Enter+0x2e8>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d109      	bne.n	80102c0 <Key_Enter+0x7c>
 80102ac:	4b9f      	ldr	r3, [pc, #636]	; (801052c <Key_Enter+0x2e8>)
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	2b05      	cmp	r3, #5
 80102b2:	d105      	bne.n	80102c0 <Key_Enter+0x7c>
 80102b4:	4b9d      	ldr	r3, [pc, #628]	; (801052c <Key_Enter+0x2e8>)
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d101      	bne.n	80102c0 <Key_Enter+0x7c>
		{
			Password_enter();
 80102bc:	f7ff fc1c 	bl	800faf8 <Password_enter>
		}
		/*rate set*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) )//i rate
 80102c0:	4b9a      	ldr	r3, [pc, #616]	; (801052c <Key_Enter+0x2e8>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d109      	bne.n	80102dc <Key_Enter+0x98>
 80102c8:	4b98      	ldr	r3, [pc, #608]	; (801052c <Key_Enter+0x2e8>)
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d105      	bne.n	80102dc <Key_Enter+0x98>
 80102d0:	4b96      	ldr	r3, [pc, #600]	; (801052c <Key_Enter+0x2e8>)
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	d101      	bne.n	80102dc <Key_Enter+0x98>
		{
			IRateSET_enter();
 80102d8:	f7ff fc6c 	bl	800fbb4 <IRateSET_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) )//v rate
 80102dc:	4b93      	ldr	r3, [pc, #588]	; (801052c <Key_Enter+0x2e8>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d109      	bne.n	80102f8 <Key_Enter+0xb4>
 80102e4:	4b91      	ldr	r3, [pc, #580]	; (801052c <Key_Enter+0x2e8>)
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	2b02      	cmp	r3, #2
 80102ea:	d105      	bne.n	80102f8 <Key_Enter+0xb4>
 80102ec:	4b8f      	ldr	r3, [pc, #572]	; (801052c <Key_Enter+0x2e8>)
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d101      	bne.n	80102f8 <Key_Enter+0xb4>
		{
			VRateSET_enter();
 80102f4:	f7ff fc94 	bl	800fc20 <VRateSET_enter>
		}
		/*CYCLE DELAY enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) )//delay third menu enter
 80102f8:	4b8c      	ldr	r3, [pc, #560]	; (801052c <Key_Enter+0x2e8>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d109      	bne.n	8010314 <Key_Enter+0xd0>
 8010300:	4b8a      	ldr	r3, [pc, #552]	; (801052c <Key_Enter+0x2e8>)
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	2b04      	cmp	r3, #4
 8010306:	d105      	bne.n	8010314 <Key_Enter+0xd0>
 8010308:	4b88      	ldr	r3, [pc, #544]	; (801052c <Key_Enter+0x2e8>)
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d101      	bne.n	8010314 <Key_Enter+0xd0>
		{
			Delay_enter();
 8010310:	f7ff fd9e 	bl	800fe50 <Delay_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && ((xyz.coordinates3==2) || (xyz.coordinates3==3)))//cycle third menu enter
 8010314:	4b85      	ldr	r3, [pc, #532]	; (801052c <Key_Enter+0x2e8>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d10d      	bne.n	8010338 <Key_Enter+0xf4>
 801031c:	4b83      	ldr	r3, [pc, #524]	; (801052c <Key_Enter+0x2e8>)
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	2b04      	cmp	r3, #4
 8010322:	d109      	bne.n	8010338 <Key_Enter+0xf4>
 8010324:	4b81      	ldr	r3, [pc, #516]	; (801052c <Key_Enter+0x2e8>)
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	2b02      	cmp	r3, #2
 801032a:	d003      	beq.n	8010334 <Key_Enter+0xf0>
 801032c:	4b7f      	ldr	r3, [pc, #508]	; (801052c <Key_Enter+0x2e8>)
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	2b03      	cmp	r3, #3
 8010332:	d101      	bne.n	8010338 <Key_Enter+0xf4>
		{
			Cycle_enter();
 8010334:	f7ff fe1c 	bl	800ff70 <Cycle_enter>
		}
		/*Save  enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 8010338:	4b7c      	ldr	r3, [pc, #496]	; (801052c <Key_Enter+0x2e8>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b03      	cmp	r3, #3
 801033e:	d109      	bne.n	8010354 <Key_Enter+0x110>
 8010340:	4b7a      	ldr	r3, [pc, #488]	; (801052c <Key_Enter+0x2e8>)
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	2b01      	cmp	r3, #1
 8010346:	d105      	bne.n	8010354 <Key_Enter+0x110>
 8010348:	4b78      	ldr	r3, [pc, #480]	; (801052c <Key_Enter+0x2e8>)
 801034a:	689b      	ldr	r3, [r3, #8]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d001      	beq.n	8010354 <Key_Enter+0x110>
		{
			Save_enter();
 8010350:	f7ff fc9e 	bl	800fc90 <Save_enter>
		}
		/*load enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 8010354:	4b75      	ldr	r3, [pc, #468]	; (801052c <Key_Enter+0x2e8>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b03      	cmp	r3, #3
 801035a:	d109      	bne.n	8010370 <Key_Enter+0x12c>
 801035c:	4b73      	ldr	r3, [pc, #460]	; (801052c <Key_Enter+0x2e8>)
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	2b02      	cmp	r3, #2
 8010362:	d105      	bne.n	8010370 <Key_Enter+0x12c>
 8010364:	4b71      	ldr	r3, [pc, #452]	; (801052c <Key_Enter+0x2e8>)
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d001      	beq.n	8010370 <Key_Enter+0x12c>
		{
			Load_enter();
 801036c:	f7ff fcec 	bl	800fd48 <Load_enter>
		}
		/*reset enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==1) && (xyz.coordinates3==1))
 8010370:	4b6e      	ldr	r3, [pc, #440]	; (801052c <Key_Enter+0x2e8>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b01      	cmp	r3, #1
 8010376:	d109      	bne.n	801038c <Key_Enter+0x148>
 8010378:	4b6c      	ldr	r3, [pc, #432]	; (801052c <Key_Enter+0x2e8>)
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d105      	bne.n	801038c <Key_Enter+0x148>
 8010380:	4b6a      	ldr	r3, [pc, #424]	; (801052c <Key_Enter+0x2e8>)
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	2b01      	cmp	r3, #1
 8010386:	d101      	bne.n	801038c <Key_Enter+0x148>
		{
			Reset_enter();
 8010388:	f7ff ff28 	bl	80101dc <Reset_enter>
		}
		/*light level ennter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3==1))
 801038c:	4b67      	ldr	r3, [pc, #412]	; (801052c <Key_Enter+0x2e8>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d109      	bne.n	80103a8 <Key_Enter+0x164>
 8010394:	4b65      	ldr	r3, [pc, #404]	; (801052c <Key_Enter+0x2e8>)
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	2b06      	cmp	r3, #6
 801039a:	d105      	bne.n	80103a8 <Key_Enter+0x164>
 801039c:	4b63      	ldr	r3, [pc, #396]	; (801052c <Key_Enter+0x2e8>)
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d101      	bne.n	80103a8 <Key_Enter+0x164>
		{
			Cursor_flash_off();
 80103a4:	f003 fd34 	bl	8013e10 <Cursor_flash_off>
		}

		if(Shift_Not_Shift==Shift && (xyz.coordinates1==0 && xyz.coordinates2==0 && xyz.coordinates3==0))
 80103a8:	4b61      	ldr	r3, [pc, #388]	; (8010530 <Key_Enter+0x2ec>)
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d10d      	bne.n	80103cc <Key_Enter+0x188>
 80103b0:	4b5e      	ldr	r3, [pc, #376]	; (801052c <Key_Enter+0x2e8>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d109      	bne.n	80103cc <Key_Enter+0x188>
 80103b8:	4b5c      	ldr	r3, [pc, #368]	; (801052c <Key_Enter+0x2e8>)
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d105      	bne.n	80103cc <Key_Enter+0x188>
 80103c0:	4b5a      	ldr	r3, [pc, #360]	; (801052c <Key_Enter+0x2e8>)
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d101      	bne.n	80103cc <Key_Enter+0x188>
		{
			Sample_show_enter();
 80103c8:	f7ff ff16 	bl	80101f8 <Sample_show_enter>
		}
		/*gain frq*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 80103cc:	4b57      	ldr	r3, [pc, #348]	; (801052c <Key_Enter+0x2e8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
		{
			//Frq_enter();

		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==3))
 80103d0:	4b56      	ldr	r3, [pc, #344]	; (801052c <Key_Enter+0x2e8>)
 80103d2:	681b      	ldr	r3, [r3, #0]
			Cursor_flash_off();
			*/
		}
		/*V calibration*/
		//此处采用两点法校准
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1))
 80103d4:	4b55      	ldr	r3, [pc, #340]	; (801052c <Key_Enter+0x2e8>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d123      	bne.n	8010424 <Key_Enter+0x1e0>
 80103dc:	4b53      	ldr	r3, [pc, #332]	; (801052c <Key_Enter+0x2e8>)
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	2b08      	cmp	r3, #8
 80103e2:	d11f      	bne.n	8010424 <Key_Enter+0x1e0>
 80103e4:	4b51      	ldr	r3, [pc, #324]	; (801052c <Key_Enter+0x2e8>)
 80103e6:	689b      	ldr	r3, [r3, #8]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d11b      	bne.n	8010424 <Key_Enter+0x1e0>
		{
			data_V[0]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 80103ec:	4b51      	ldr	r3, [pc, #324]	; (8010534 <Key_Enter+0x2f0>)
 80103ee:	78db      	ldrb	r3, [r3, #3]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	021b      	lsls	r3, r3, #8
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	4b4f      	ldr	r3, [pc, #316]	; (8010534 <Key_Enter+0x2f0>)
 80103f8:	791b      	ldrb	r3, [r3, #4]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	18d3      	adds	r3, r2, r3
 80103fe:	b29a      	uxth	r2, r3
 8010400:	4b4d      	ldr	r3, [pc, #308]	; (8010538 <Key_Enter+0x2f4>)
 8010402:	801a      	strh	r2, [r3, #0]
			Vref[0]=String_To_Float(String_Calibration_Vlotage);
 8010404:	4b4d      	ldr	r3, [pc, #308]	; (801053c <Key_Enter+0x2f8>)
 8010406:	0018      	movs	r0, r3
 8010408:	f7fd ff1e 	bl	800e248 <String_To_Float>
 801040c:	1c02      	adds	r2, r0, #0
 801040e:	4b4c      	ldr	r3, [pc, #304]	; (8010540 <Key_Enter+0x2fc>)
 8010410:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 8010412:	4b46      	ldr	r3, [pc, #280]	; (801052c <Key_Enter+0x2e8>)
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	1c5a      	adds	r2, r3, #1
 8010418:	4b44      	ldr	r3, [pc, #272]	; (801052c <Key_Enter+0x2e8>)
 801041a:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 801041c:	4b49      	ldr	r3, [pc, #292]	; (8010544 <Key_Enter+0x300>)
 801041e:	2209      	movs	r2, #9
 8010420:	701a      	strb	r2, [r3, #0]
			return;
 8010422:	e0ee      	b.n	8010602 <Key_Enter+0x3be>
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==2))
 8010424:	4b41      	ldr	r3, [pc, #260]	; (801052c <Key_Enter+0x2e8>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2b01      	cmp	r3, #1
 801042a:	d158      	bne.n	80104de <Key_Enter+0x29a>
 801042c:	4b3f      	ldr	r3, [pc, #252]	; (801052c <Key_Enter+0x2e8>)
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	2b08      	cmp	r3, #8
 8010432:	d154      	bne.n	80104de <Key_Enter+0x29a>
 8010434:	4b3d      	ldr	r3, [pc, #244]	; (801052c <Key_Enter+0x2e8>)
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	2b02      	cmp	r3, #2
 801043a:	d150      	bne.n	80104de <Key_Enter+0x29a>
		{
			data_V[1]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 801043c:	4b3d      	ldr	r3, [pc, #244]	; (8010534 <Key_Enter+0x2f0>)
 801043e:	78db      	ldrb	r3, [r3, #3]
 8010440:	b29b      	uxth	r3, r3
 8010442:	021b      	lsls	r3, r3, #8
 8010444:	b29a      	uxth	r2, r3
 8010446:	4b3b      	ldr	r3, [pc, #236]	; (8010534 <Key_Enter+0x2f0>)
 8010448:	791b      	ldrb	r3, [r3, #4]
 801044a:	b29b      	uxth	r3, r3
 801044c:	18d3      	adds	r3, r2, r3
 801044e:	b29a      	uxth	r2, r3
 8010450:	4b39      	ldr	r3, [pc, #228]	; (8010538 <Key_Enter+0x2f4>)
 8010452:	805a      	strh	r2, [r3, #2]
			Vref[1]=String_To_Float(String_Calibration_Vlotage);
 8010454:	4b39      	ldr	r3, [pc, #228]	; (801053c <Key_Enter+0x2f8>)
 8010456:	0018      	movs	r0, r3
 8010458:	f7fd fef6 	bl	800e248 <String_To_Float>
 801045c:	1c02      	adds	r2, r0, #0
 801045e:	4b38      	ldr	r3, [pc, #224]	; (8010540 <Key_Enter+0x2fc>)
 8010460:	605a      	str	r2, [r3, #4]
			ADC_Gain_V=(Vref[1]-Vref[0])/(data_V[1]-data_V[0]);
 8010462:	4b37      	ldr	r3, [pc, #220]	; (8010540 <Key_Enter+0x2fc>)
 8010464:	685a      	ldr	r2, [r3, #4]
 8010466:	4b36      	ldr	r3, [pc, #216]	; (8010540 <Key_Enter+0x2fc>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	1c19      	adds	r1, r3, #0
 801046c:	1c10      	adds	r0, r2, #0
 801046e:	f7f0 fd1d 	bl	8000eac <__aeabi_fsub>
 8010472:	1c03      	adds	r3, r0, #0
 8010474:	1c1c      	adds	r4, r3, #0
 8010476:	4b30      	ldr	r3, [pc, #192]	; (8010538 <Key_Enter+0x2f4>)
 8010478:	885b      	ldrh	r3, [r3, #2]
 801047a:	001a      	movs	r2, r3
 801047c:	4b2e      	ldr	r3, [pc, #184]	; (8010538 <Key_Enter+0x2f4>)
 801047e:	881b      	ldrh	r3, [r3, #0]
 8010480:	1ad3      	subs	r3, r2, r3
 8010482:	0018      	movs	r0, r3
 8010484:	f7f0 fee0 	bl	8001248 <__aeabi_i2f>
 8010488:	1c03      	adds	r3, r0, #0
 801048a:	1c19      	adds	r1, r3, #0
 801048c:	1c20      	adds	r0, r4, #0
 801048e:	f7f0 fa1f 	bl	80008d0 <__aeabi_fdiv>
 8010492:	1c03      	adds	r3, r0, #0
 8010494:	1c1a      	adds	r2, r3, #0
 8010496:	4b2c      	ldr	r3, [pc, #176]	; (8010548 <Key_Enter+0x304>)
 8010498:	601a      	str	r2, [r3, #0]
			Eror_ADC_V=Vref[0]-ADC_Gain_V*data_V[0];
 801049a:	4b29      	ldr	r3, [pc, #164]	; (8010540 <Key_Enter+0x2fc>)
 801049c:	681c      	ldr	r4, [r3, #0]
 801049e:	4b26      	ldr	r3, [pc, #152]	; (8010538 <Key_Enter+0x2f4>)
 80104a0:	881b      	ldrh	r3, [r3, #0]
 80104a2:	0018      	movs	r0, r3
 80104a4:	f7f0 fed0 	bl	8001248 <__aeabi_i2f>
 80104a8:	1c02      	adds	r2, r0, #0
 80104aa:	4b27      	ldr	r3, [pc, #156]	; (8010548 <Key_Enter+0x304>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	1c19      	adds	r1, r3, #0
 80104b0:	1c10      	adds	r0, r2, #0
 80104b2:	f7f0 fbd5 	bl	8000c60 <__aeabi_fmul>
 80104b6:	1c03      	adds	r3, r0, #0
 80104b8:	1c19      	adds	r1, r3, #0
 80104ba:	1c20      	adds	r0, r4, #0
 80104bc:	f7f0 fcf6 	bl	8000eac <__aeabi_fsub>
 80104c0:	1c03      	adds	r3, r0, #0
 80104c2:	1c1a      	adds	r2, r3, #0
 80104c4:	4b21      	ldr	r3, [pc, #132]	; (801054c <Key_Enter+0x308>)
 80104c6:	601a      	str	r2, [r3, #0]
			AT25_Save_AD_Param();
 80104c8:	f7fc f838 	bl	800c53c <AT25_Save_AD_Param>
			xyz.coordinates3++;
 80104cc:	4b17      	ldr	r3, [pc, #92]	; (801052c <Key_Enter+0x2e8>)
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	1c5a      	adds	r2, r3, #1
 80104d2:	4b16      	ldr	r3, [pc, #88]	; (801052c <Key_Enter+0x2e8>)
 80104d4:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 80104d6:	4b1b      	ldr	r3, [pc, #108]	; (8010544 <Key_Enter+0x300>)
 80104d8:	2209      	movs	r2, #9
 80104da:	701a      	strb	r2, [r3, #0]
			return;
 80104dc:	e091      	b.n	8010602 <Key_Enter+0x3be>
		}
		/*I calibration*/
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3))
 80104de:	4b13      	ldr	r3, [pc, #76]	; (801052c <Key_Enter+0x2e8>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d13a      	bne.n	801055c <Key_Enter+0x318>
 80104e6:	4b11      	ldr	r3, [pc, #68]	; (801052c <Key_Enter+0x2e8>)
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	2b08      	cmp	r3, #8
 80104ec:	d136      	bne.n	801055c <Key_Enter+0x318>
 80104ee:	4b0f      	ldr	r3, [pc, #60]	; (801052c <Key_Enter+0x2e8>)
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	2b03      	cmp	r3, #3
 80104f4:	d132      	bne.n	801055c <Key_Enter+0x318>
		{
			data_I[0]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 80104f6:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <Key_Enter+0x2f0>)
 80104f8:	795b      	ldrb	r3, [r3, #5]
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	021b      	lsls	r3, r3, #8
 80104fe:	b29a      	uxth	r2, r3
 8010500:	4b0c      	ldr	r3, [pc, #48]	; (8010534 <Key_Enter+0x2f0>)
 8010502:	799b      	ldrb	r3, [r3, #6]
 8010504:	b29b      	uxth	r3, r3
 8010506:	18d3      	adds	r3, r2, r3
 8010508:	b29a      	uxth	r2, r3
 801050a:	4b11      	ldr	r3, [pc, #68]	; (8010550 <Key_Enter+0x30c>)
 801050c:	801a      	strh	r2, [r3, #0]
			Iref[0]=String_To_Float(String_Calibration_Current);
 801050e:	4b11      	ldr	r3, [pc, #68]	; (8010554 <Key_Enter+0x310>)
 8010510:	0018      	movs	r0, r3
 8010512:	f7fd fe99 	bl	800e248 <String_To_Float>
 8010516:	1c02      	adds	r2, r0, #0
 8010518:	4b0f      	ldr	r3, [pc, #60]	; (8010558 <Key_Enter+0x314>)
 801051a:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 801051c:	4b03      	ldr	r3, [pc, #12]	; (801052c <Key_Enter+0x2e8>)
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	1c5a      	adds	r2, r3, #1
 8010522:	4b02      	ldr	r3, [pc, #8]	; (801052c <Key_Enter+0x2e8>)
 8010524:	609a      	str	r2, [r3, #8]
			return;
 8010526:	e06c      	b.n	8010602 <Key_Enter+0x3be>
 8010528:	20003973 	.word	0x20003973
 801052c:	200039e0 	.word	0x200039e0
 8010530:	2000396f 	.word	0x2000396f
 8010534:	20003688 	.word	0x20003688
 8010538:	2000399c 	.word	0x2000399c
 801053c:	20003090 	.word	0x20003090
 8010540:	2000398c 	.word	0x2000398c
 8010544:	20003976 	.word	0x20003976
 8010548:	20002fec 	.word	0x20002fec
 801054c:	20002ff4 	.word	0x20002ff4
 8010550:	200039a0 	.word	0x200039a0
 8010554:	2000309c 	.word	0x2000309c
 8010558:	20003994 	.word	0x20003994
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==4))
 801055c:	4b2a      	ldr	r3, [pc, #168]	; (8010608 <Key_Enter+0x3c4>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d14e      	bne.n	8010602 <Key_Enter+0x3be>
 8010564:	4b28      	ldr	r3, [pc, #160]	; (8010608 <Key_Enter+0x3c4>)
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	2b08      	cmp	r3, #8
 801056a:	d14a      	bne.n	8010602 <Key_Enter+0x3be>
 801056c:	4b26      	ldr	r3, [pc, #152]	; (8010608 <Key_Enter+0x3c4>)
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	2b04      	cmp	r3, #4
 8010572:	d146      	bne.n	8010602 <Key_Enter+0x3be>
		{
			data_I[1]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 8010574:	4b25      	ldr	r3, [pc, #148]	; (801060c <Key_Enter+0x3c8>)
 8010576:	795b      	ldrb	r3, [r3, #5]
 8010578:	b29b      	uxth	r3, r3
 801057a:	021b      	lsls	r3, r3, #8
 801057c:	b29a      	uxth	r2, r3
 801057e:	4b23      	ldr	r3, [pc, #140]	; (801060c <Key_Enter+0x3c8>)
 8010580:	799b      	ldrb	r3, [r3, #6]
 8010582:	b29b      	uxth	r3, r3
 8010584:	18d3      	adds	r3, r2, r3
 8010586:	b29a      	uxth	r2, r3
 8010588:	4b21      	ldr	r3, [pc, #132]	; (8010610 <Key_Enter+0x3cc>)
 801058a:	805a      	strh	r2, [r3, #2]
			Iref[1]=String_To_Float(String_Calibration_Current);
 801058c:	4b21      	ldr	r3, [pc, #132]	; (8010614 <Key_Enter+0x3d0>)
 801058e:	0018      	movs	r0, r3
 8010590:	f7fd fe5a 	bl	800e248 <String_To_Float>
 8010594:	1c02      	adds	r2, r0, #0
 8010596:	4b20      	ldr	r3, [pc, #128]	; (8010618 <Key_Enter+0x3d4>)
 8010598:	605a      	str	r2, [r3, #4]
			ADC_Gain_I=(Iref[1]-Iref[0])/(data_I[1]-data_I[0]);
 801059a:	4b1f      	ldr	r3, [pc, #124]	; (8010618 <Key_Enter+0x3d4>)
 801059c:	685a      	ldr	r2, [r3, #4]
 801059e:	4b1e      	ldr	r3, [pc, #120]	; (8010618 <Key_Enter+0x3d4>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	1c19      	adds	r1, r3, #0
 80105a4:	1c10      	adds	r0, r2, #0
 80105a6:	f7f0 fc81 	bl	8000eac <__aeabi_fsub>
 80105aa:	1c03      	adds	r3, r0, #0
 80105ac:	1c1c      	adds	r4, r3, #0
 80105ae:	4b18      	ldr	r3, [pc, #96]	; (8010610 <Key_Enter+0x3cc>)
 80105b0:	885b      	ldrh	r3, [r3, #2]
 80105b2:	001a      	movs	r2, r3
 80105b4:	4b16      	ldr	r3, [pc, #88]	; (8010610 <Key_Enter+0x3cc>)
 80105b6:	881b      	ldrh	r3, [r3, #0]
 80105b8:	1ad3      	subs	r3, r2, r3
 80105ba:	0018      	movs	r0, r3
 80105bc:	f7f0 fe44 	bl	8001248 <__aeabi_i2f>
 80105c0:	1c03      	adds	r3, r0, #0
 80105c2:	1c19      	adds	r1, r3, #0
 80105c4:	1c20      	adds	r0, r4, #0
 80105c6:	f7f0 f983 	bl	80008d0 <__aeabi_fdiv>
 80105ca:	1c03      	adds	r3, r0, #0
 80105cc:	1c1a      	adds	r2, r3, #0
 80105ce:	4b13      	ldr	r3, [pc, #76]	; (801061c <Key_Enter+0x3d8>)
 80105d0:	601a      	str	r2, [r3, #0]
			//AT25_Save_AD_Param();
			Eror_ADC_I=Iref[0]-ADC_Gain_I*data_I[0];
 80105d2:	4b11      	ldr	r3, [pc, #68]	; (8010618 <Key_Enter+0x3d4>)
 80105d4:	681c      	ldr	r4, [r3, #0]
 80105d6:	4b0e      	ldr	r3, [pc, #56]	; (8010610 <Key_Enter+0x3cc>)
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	0018      	movs	r0, r3
 80105dc:	f7f0 fe34 	bl	8001248 <__aeabi_i2f>
 80105e0:	1c02      	adds	r2, r0, #0
 80105e2:	4b0e      	ldr	r3, [pc, #56]	; (801061c <Key_Enter+0x3d8>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	1c19      	adds	r1, r3, #0
 80105e8:	1c10      	adds	r0, r2, #0
 80105ea:	f7f0 fb39 	bl	8000c60 <__aeabi_fmul>
 80105ee:	1c03      	adds	r3, r0, #0
 80105f0:	1c19      	adds	r1, r3, #0
 80105f2:	1c20      	adds	r0, r4, #0
 80105f4:	f7f0 fc5a 	bl	8000eac <__aeabi_fsub>
 80105f8:	1c03      	adds	r3, r0, #0
 80105fa:	1c1a      	adds	r2, r3, #0
 80105fc:	4b08      	ldr	r3, [pc, #32]	; (8010620 <Key_Enter+0x3dc>)
 80105fe:	601a      	str	r2, [r3, #0]
			return;
 8010600:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 8010602:	46bd      	mov	sp, r7
 8010604:	bdb0      	pop	{r4, r5, r7, pc}
 8010606:	46c0      	nop			; (mov r8, r8)
 8010608:	200039e0 	.word	0x200039e0
 801060c:	20003688 	.word	0x20003688
 8010610:	200039a0 	.word	0x200039a0
 8010614:	2000309c 	.word	0x2000309c
 8010618:	20003994 	.word	0x20003994
 801061c:	20002ff0 	.word	0x20002ff0
 8010620:	20002ff8 	.word	0x20002ff8

08010624 <Key_Shift>:
 * @brief  按键Shift的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Shift(void)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	af00      	add	r7, sp, #0
	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0)) || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9)) )
 8010628:	4b22      	ldr	r3, [pc, #136]	; (80106b4 <Key_Shift+0x90>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d107      	bne.n	8010640 <Key_Shift+0x1c>
 8010630:	4b20      	ldr	r3, [pc, #128]	; (80106b4 <Key_Shift+0x90>)
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d103      	bne.n	8010640 <Key_Shift+0x1c>
 8010638:	4b1e      	ldr	r3, [pc, #120]	; (80106b4 <Key_Shift+0x90>)
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00b      	beq.n	8010658 <Key_Shift+0x34>
 8010640:	4b1c      	ldr	r3, [pc, #112]	; (80106b4 <Key_Shift+0x90>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b09      	cmp	r3, #9
 8010646:	d116      	bne.n	8010676 <Key_Shift+0x52>
 8010648:	4b1a      	ldr	r3, [pc, #104]	; (80106b4 <Key_Shift+0x90>)
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	2b09      	cmp	r3, #9
 801064e:	d112      	bne.n	8010676 <Key_Shift+0x52>
 8010650:	4b18      	ldr	r3, [pc, #96]	; (80106b4 <Key_Shift+0x90>)
 8010652:	689b      	ldr	r3, [r3, #8]
 8010654:	2b09      	cmp	r3, #9
 8010656:	d10e      	bne.n	8010676 <Key_Shift+0x52>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 8010658:	4b17      	ldr	r3, [pc, #92]	; (80106b8 <Key_Shift+0x94>)
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d103      	bne.n	8010668 <Key_Shift+0x44>
 8010660:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <Key_Shift+0x94>)
 8010662:	2201      	movs	r2, #1
 8010664:	701a      	strb	r2, [r3, #0]
 8010666:	e006      	b.n	8010676 <Key_Shift+0x52>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 8010668:	4b13      	ldr	r3, [pc, #76]	; (80106b8 <Key_Shift+0x94>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d102      	bne.n	8010676 <Key_Shift+0x52>
 8010670:	4b11      	ldr	r3, [pc, #68]	; (80106b8 <Key_Shift+0x94>)
 8010672:	2200      	movs	r2, #0
 8010674:	701a      	strb	r2, [r3, #0]
	}

	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) )
 8010676:	4b0f      	ldr	r3, [pc, #60]	; (80106b4 <Key_Shift+0x90>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d116      	bne.n	80106ac <Key_Shift+0x88>
 801067e:	4b0d      	ldr	r3, [pc, #52]	; (80106b4 <Key_Shift+0x90>)
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	2b05      	cmp	r3, #5
 8010684:	d112      	bne.n	80106ac <Key_Shift+0x88>
 8010686:	4b0b      	ldr	r3, [pc, #44]	; (80106b4 <Key_Shift+0x90>)
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d10e      	bne.n	80106ac <Key_Shift+0x88>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 801068e:	4b0a      	ldr	r3, [pc, #40]	; (80106b8 <Key_Shift+0x94>)
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d103      	bne.n	801069e <Key_Shift+0x7a>
 8010696:	4b08      	ldr	r3, [pc, #32]	; (80106b8 <Key_Shift+0x94>)
 8010698:	2201      	movs	r2, #1
 801069a:	701a      	strb	r2, [r3, #0]
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
	}
}
 801069c:	e006      	b.n	80106ac <Key_Shift+0x88>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 801069e:	4b06      	ldr	r3, [pc, #24]	; (80106b8 <Key_Shift+0x94>)
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d102      	bne.n	80106ac <Key_Shift+0x88>
 80106a6:	4b04      	ldr	r3, [pc, #16]	; (80106b8 <Key_Shift+0x94>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	701a      	strb	r2, [r3, #0]
}
 80106ac:	46c0      	nop			; (mov r8, r8)
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	46c0      	nop			; (mov r8, r8)
 80106b4:	200039e0 	.word	0x200039e0
 80106b8:	2000396f 	.word	0x2000396f

080106bc <Key_ON_OFF>:
 * @brief  按键ON/OFF的扫描服务函数
 * @param  None
 * @retval None
 */
void Key_ON_OFF(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0

	/* actual interface */
	if((xyz.coordinates1==0)&&(xyz.coordinates2==0)&&(xyz.coordinates3==0))
 80106c0:	4b2d      	ldr	r3, [pc, #180]	; (8010778 <Key_ON_OFF+0xbc>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d11a      	bne.n	80106fe <Key_ON_OFF+0x42>
 80106c8:	4b2b      	ldr	r3, [pc, #172]	; (8010778 <Key_ON_OFF+0xbc>)
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d116      	bne.n	80106fe <Key_ON_OFF+0x42>
 80106d0:	4b29      	ldr	r3, [pc, #164]	; (8010778 <Key_ON_OFF+0xbc>)
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d112      	bne.n	80106fe <Key_ON_OFF+0x42>
	{
		if(OUTPUT_NOT_OUTPUT ==NOT_OUTPUT)
 80106d8:	4b28      	ldr	r3, [pc, #160]	; (801077c <Key_ON_OFF+0xc0>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d105      	bne.n	80106ec <Key_ON_OFF+0x30>
		{
			OUTPUT_NOT_OUTPUT =OUTPUT;
 80106e0:	4b26      	ldr	r3, [pc, #152]	; (801077c <Key_ON_OFF+0xc0>)
 80106e2:	2201      	movs	r2, #1
 80106e4:	701a      	strb	r2, [r3, #0]
			power_on();
 80106e6:	f7fc f947 	bl	800c978 <power_on>
 80106ea:	e008      	b.n	80106fe <Key_ON_OFF+0x42>

		}
		else if(OUTPUT_NOT_OUTPUT ==OUTPUT)
 80106ec:	4b23      	ldr	r3, [pc, #140]	; (801077c <Key_ON_OFF+0xc0>)
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d104      	bne.n	80106fe <Key_ON_OFF+0x42>
		{
			OUTPUT_NOT_OUTPUT =NOT_OUTPUT;
 80106f4:	4b21      	ldr	r3, [pc, #132]	; (801077c <Key_ON_OFF+0xc0>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	701a      	strb	r2, [r3, #0]
			power_off();
 80106fa:	f7fc f95d 	bl	800c9b8 <power_off>
		}

	}
	/* timer */
	if( (xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))
 80106fe:	4b1e      	ldr	r3, [pc, #120]	; (8010778 <Key_ON_OFF+0xbc>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b01      	cmp	r3, #1
 8010704:	d131      	bne.n	801076a <Key_ON_OFF+0xae>
 8010706:	4b1c      	ldr	r3, [pc, #112]	; (8010778 <Key_ON_OFF+0xbc>)
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	2b04      	cmp	r3, #4
 801070c:	d12d      	bne.n	801076a <Key_ON_OFF+0xae>
 801070e:	4b1a      	ldr	r3, [pc, #104]	; (8010778 <Key_ON_OFF+0xbc>)
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d029      	beq.n	801076a <Key_ON_OFF+0xae>
	{
		switch(xyz.coordinates3)
 8010716:	4b18      	ldr	r3, [pc, #96]	; (8010778 <Key_ON_OFF+0xbc>)
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	2b01      	cmp	r3, #1
 801071c:	d005      	beq.n	801072a <Key_ON_OFF+0x6e>
 801071e:	2b00      	cmp	r3, #0
 8010720:	dd26      	ble.n	8010770 <Key_ON_OFF+0xb4>
 8010722:	3b02      	subs	r3, #2
 8010724:	2b01      	cmp	r3, #1
 8010726:	d823      	bhi.n	8010770 <Key_ON_OFF+0xb4>
 8010728:	e00f      	b.n	801074a <Key_ON_OFF+0x8e>
		{
			case 1:
			{
				if(DELAY_NOT_DELAY==NOT_DELAY)
 801072a:	4b15      	ldr	r3, [pc, #84]	; (8010780 <Key_ON_OFF+0xc4>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2bff      	cmp	r3, #255	; 0xff
 8010730:	d103      	bne.n	801073a <Key_ON_OFF+0x7e>
				{
					DELAY_NOT_DELAY=DELAY;
 8010732:	4b13      	ldr	r3, [pc, #76]	; (8010780 <Key_ON_OFF+0xc4>)
 8010734:	2200      	movs	r2, #0
 8010736:	701a      	strb	r2, [r3, #0]
					break;
 8010738:	e01a      	b.n	8010770 <Key_ON_OFF+0xb4>
				}
				else if(DELAY_NOT_DELAY==DELAY)
 801073a:	4b11      	ldr	r3, [pc, #68]	; (8010780 <Key_ON_OFF+0xc4>)
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d103      	bne.n	801074a <Key_ON_OFF+0x8e>
				{
					DELAY_NOT_DELAY=NOT_DELAY;
 8010742:	4b0f      	ldr	r3, [pc, #60]	; (8010780 <Key_ON_OFF+0xc4>)
 8010744:	22ff      	movs	r2, #255	; 0xff
 8010746:	701a      	strb	r2, [r3, #0]
					break;
 8010748:	e012      	b.n	8010770 <Key_ON_OFF+0xb4>

			}
			case 2:
			case 3:
			{
				if(CYCLE_NOT_CYCLE==CYCLE)
 801074a:	4b0e      	ldr	r3, [pc, #56]	; (8010784 <Key_ON_OFF+0xc8>)
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	2b0f      	cmp	r3, #15
 8010750:	d103      	bne.n	801075a <Key_ON_OFF+0x9e>
				{
					CYCLE_NOT_CYCLE=NOT_CYCLE;
 8010752:	4b0c      	ldr	r3, [pc, #48]	; (8010784 <Key_ON_OFF+0xc8>)
 8010754:	22f0      	movs	r2, #240	; 0xf0
 8010756:	701a      	strb	r2, [r3, #0]
				else if(CYCLE_NOT_CYCLE==NOT_CYCLE)
				{
					CYCLE_NOT_CYCLE=CYCLE;
				}

				break;
 8010758:	e009      	b.n	801076e <Key_ON_OFF+0xb2>
				else if(CYCLE_NOT_CYCLE==NOT_CYCLE)
 801075a:	4b0a      	ldr	r3, [pc, #40]	; (8010784 <Key_ON_OFF+0xc8>)
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2bf0      	cmp	r3, #240	; 0xf0
 8010760:	d105      	bne.n	801076e <Key_ON_OFF+0xb2>
					CYCLE_NOT_CYCLE=CYCLE;
 8010762:	4b08      	ldr	r3, [pc, #32]	; (8010784 <Key_ON_OFF+0xc8>)
 8010764:	220f      	movs	r2, #15
 8010766:	701a      	strb	r2, [r3, #0]
				break;
 8010768:	e001      	b.n	801076e <Key_ON_OFF+0xb2>
			}

		}


	}
 801076a:	46c0      	nop			; (mov r8, r8)
 801076c:	e000      	b.n	8010770 <Key_ON_OFF+0xb4>
				break;
 801076e:	46c0      	nop			; (mov r8, r8)

}
 8010770:	46c0      	nop			; (mov r8, r8)
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	46c0      	nop			; (mov r8, r8)
 8010778:	200039e0 	.word	0x200039e0
 801077c:	20003971 	.word	0x20003971
 8010780:	20002fd1 	.word	0x20002fd1
 8010784:	20002fd0 	.word	0x20002fd0

08010788 <Key_Preset_Lock>:
 * @brief  按键Preset/Lock的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Preset_Lock(void)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
	if(Shift_Not_Shift == Not_Shift)//当不复用该按键时，该按键为切换功能，切换实时值和设定值界面
 801078c:	4b17      	ldr	r3, [pc, #92]	; (80107ec <Key_Preset_Lock+0x64>)
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d109      	bne.n	80107a8 <Key_Preset_Lock+0x20>
	{
		xyz.coordinates1=9;
 8010794:	4b16      	ldr	r3, [pc, #88]	; (80107f0 <Key_Preset_Lock+0x68>)
 8010796:	2209      	movs	r2, #9
 8010798:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=9;
 801079a:	4b15      	ldr	r3, [pc, #84]	; (80107f0 <Key_Preset_Lock+0x68>)
 801079c:	2209      	movs	r2, #9
 801079e:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=9;
 80107a0:	4b13      	ldr	r3, [pc, #76]	; (80107f0 <Key_Preset_Lock+0x68>)
 80107a2:	2209      	movs	r2, #9
 80107a4:	609a      	str	r2, [r3, #8]
		{
			LOCK_UNLOCK = UNLOCK;
		}

	}
}
 80107a6:	e01e      	b.n	80107e6 <Key_Preset_Lock+0x5e>
	else if(Shift_Not_Shift == Shift)
 80107a8:	4b10      	ldr	r3, [pc, #64]	; (80107ec <Key_Preset_Lock+0x64>)
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d11a      	bne.n	80107e6 <Key_Preset_Lock+0x5e>
		if(LOCK_UNLOCK == UNLOCK)
 80107b0:	4b10      	ldr	r3, [pc, #64]	; (80107f4 <Key_Preset_Lock+0x6c>)
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d10f      	bne.n	80107d8 <Key_Preset_Lock+0x50>
			LOCK_UNLOCK = LOCK;
 80107b8:	4b0e      	ldr	r3, [pc, #56]	; (80107f4 <Key_Preset_Lock+0x6c>)
 80107ba:	2201      	movs	r2, #1
 80107bc:	701a      	strb	r2, [r3, #0]
			Shift_Not_Shift =Not_Shift;
 80107be:	4b0b      	ldr	r3, [pc, #44]	; (80107ec <Key_Preset_Lock+0x64>)
 80107c0:	2200      	movs	r2, #0
 80107c2:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=0;
 80107c4:	4b0a      	ldr	r3, [pc, #40]	; (80107f0 <Key_Preset_Lock+0x68>)
 80107c6:	2200      	movs	r2, #0
 80107c8:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 80107ca:	4b09      	ldr	r3, [pc, #36]	; (80107f0 <Key_Preset_Lock+0x68>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 80107d0:	4b07      	ldr	r3, [pc, #28]	; (80107f0 <Key_Preset_Lock+0x68>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	609a      	str	r2, [r3, #8]
}
 80107d6:	e006      	b.n	80107e6 <Key_Preset_Lock+0x5e>
		else if(LOCK_UNLOCK == LOCK)
 80107d8:	4b06      	ldr	r3, [pc, #24]	; (80107f4 <Key_Preset_Lock+0x6c>)
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d102      	bne.n	80107e6 <Key_Preset_Lock+0x5e>
			LOCK_UNLOCK = UNLOCK;
 80107e0:	4b04      	ldr	r3, [pc, #16]	; (80107f4 <Key_Preset_Lock+0x6c>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	701a      	strb	r2, [r3, #0]
}
 80107e6:	46c0      	nop			; (mov r8, r8)
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	2000396f 	.word	0x2000396f
 80107f0:	200039e0 	.word	0x200039e0
 80107f4:	20003973 	.word	0x20003973

080107f8 <Key_Recall_Save>:
 * @brief  按键Recall/Save的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Recall_Save(void)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	af00      	add	r7, sp, #0

	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (LOCK_UNLOCK==UNLOCK))
 80107fc:	4b31      	ldr	r3, [pc, #196]	; (80108c4 <Key_Recall_Save+0xcc>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d10b      	bne.n	801081c <Key_Recall_Save+0x24>
 8010804:	4b2f      	ldr	r3, [pc, #188]	; (80108c4 <Key_Recall_Save+0xcc>)
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d107      	bne.n	801081c <Key_Recall_Save+0x24>
 801080c:	4b2d      	ldr	r3, [pc, #180]	; (80108c4 <Key_Recall_Save+0xcc>)
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d103      	bne.n	801081c <Key_Recall_Save+0x24>
 8010814:	4b2c      	ldr	r3, [pc, #176]	; (80108c8 <Key_Recall_Save+0xd0>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00f      	beq.n	801083c <Key_Recall_Save+0x44>
	 || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9) && (LOCK_UNLOCK==UNLOCK)) )
 801081c:	4b29      	ldr	r3, [pc, #164]	; (80108c4 <Key_Recall_Save+0xcc>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2b09      	cmp	r3, #9
 8010822:	d14b      	bne.n	80108bc <Key_Recall_Save+0xc4>
 8010824:	4b27      	ldr	r3, [pc, #156]	; (80108c4 <Key_Recall_Save+0xcc>)
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	2b09      	cmp	r3, #9
 801082a:	d147      	bne.n	80108bc <Key_Recall_Save+0xc4>
 801082c:	4b25      	ldr	r3, [pc, #148]	; (80108c4 <Key_Recall_Save+0xcc>)
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	2b09      	cmp	r3, #9
 8010832:	d143      	bne.n	80108bc <Key_Recall_Save+0xc4>
 8010834:	4b24      	ldr	r3, [pc, #144]	; (80108c8 <Key_Recall_Save+0xd0>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d13f      	bne.n	80108bc <Key_Recall_Save+0xc4>
	{
		if(Shift_Not_Shift == Not_Shift)          //无复用，处于取界面
 801083c:	4b23      	ldr	r3, [pc, #140]	; (80108cc <Key_Recall_Save+0xd4>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d120      	bne.n	8010886 <Key_Recall_Save+0x8e>
		{
			Recall_Save_Number = 0;//组别
 8010844:	4b22      	ldr	r3, [pc, #136]	; (80108d0 <Key_Recall_Save+0xd8>)
 8010846:	2200      	movs	r2, #0
 8010848:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 801084a:	4b1e      	ldr	r3, [pc, #120]	; (80108c4 <Key_Recall_Save+0xcc>)
 801084c:	2203      	movs	r2, #3
 801084e:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 8010850:	4b1c      	ldr	r3, [pc, #112]	; (80108c4 <Key_Recall_Save+0xcc>)
 8010852:	2202      	movs	r2, #2
 8010854:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;//无用
 8010856:	4b1b      	ldr	r3, [pc, #108]	; (80108c4 <Key_Recall_Save+0xcc>)
 8010858:	2201      	movs	r2, #1
 801085a:	609a      	str	r2, [r3, #8]
			__HAL_TIM_DISABLE(&htim6);//cursor flash off
 801085c:	4b1d      	ldr	r3, [pc, #116]	; (80108d4 <Key_Recall_Save+0xdc>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6a1b      	ldr	r3, [r3, #32]
 8010862:	4a1d      	ldr	r2, [pc, #116]	; (80108d8 <Key_Recall_Save+0xe0>)
 8010864:	4013      	ands	r3, r2
 8010866:	d129      	bne.n	80108bc <Key_Recall_Save+0xc4>
 8010868:	4b1a      	ldr	r3, [pc, #104]	; (80108d4 <Key_Recall_Save+0xdc>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	6a1b      	ldr	r3, [r3, #32]
 801086e:	4a1b      	ldr	r2, [pc, #108]	; (80108dc <Key_Recall_Save+0xe4>)
 8010870:	4013      	ands	r3, r2
 8010872:	d123      	bne.n	80108bc <Key_Recall_Save+0xc4>
 8010874:	4b17      	ldr	r3, [pc, #92]	; (80108d4 <Key_Recall_Save+0xdc>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	4b16      	ldr	r3, [pc, #88]	; (80108d4 <Key_Recall_Save+0xdc>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2101      	movs	r1, #1
 8010880:	438a      	bics	r2, r1
 8010882:	601a      	str	r2, [r3, #0]
		}

	}


}
 8010884:	e01a      	b.n	80108bc <Key_Recall_Save+0xc4>
		else if(Shift_Not_Shift == Shift)//save
 8010886:	4b11      	ldr	r3, [pc, #68]	; (80108cc <Key_Recall_Save+0xd4>)
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	2b01      	cmp	r3, #1
 801088c:	d116      	bne.n	80108bc <Key_Recall_Save+0xc4>
			Recall_Save_Number = 0;//组别
 801088e:	4b10      	ldr	r3, [pc, #64]	; (80108d0 <Key_Recall_Save+0xd8>)
 8010890:	2200      	movs	r2, #0
 8010892:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 8010894:	4b0b      	ldr	r3, [pc, #44]	; (80108c4 <Key_Recall_Save+0xcc>)
 8010896:	2203      	movs	r2, #3
 8010898:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 801089a:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <Key_Recall_Save+0xcc>)
 801089c:	2201      	movs	r2, #1
 801089e:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 80108a0:	4b08      	ldr	r3, [pc, #32]	; (80108c4 <Key_Recall_Save+0xcc>)
 80108a2:	2201      	movs	r2, #1
 80108a4:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift = Not_Shift;
 80108a6:	4b09      	ldr	r3, [pc, #36]	; (80108cc <Key_Recall_Save+0xd4>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim6);//cursor flash off
 80108ac:	4b09      	ldr	r3, [pc, #36]	; (80108d4 <Key_Recall_Save+0xdc>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	4b08      	ldr	r3, [pc, #32]	; (80108d4 <Key_Recall_Save+0xdc>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2101      	movs	r1, #1
 80108b8:	430a      	orrs	r2, r1
 80108ba:	601a      	str	r2, [r3, #0]
}
 80108bc:	46c0      	nop			; (mov r8, r8)
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	46c0      	nop			; (mov r8, r8)
 80108c4:	200039e0 	.word	0x200039e0
 80108c8:	20003973 	.word	0x20003973
 80108cc:	2000396f 	.word	0x2000396f
 80108d0:	20003975 	.word	0x20003975
 80108d4:	200034b4 	.word	0x200034b4
 80108d8:	00001111 	.word	0x00001111
 80108dc:	00000444 	.word	0x00000444

080108e0 <Key_Up>:
 * @brief  按键Up的扫描服务函数(Cursor_Position move)
 * @param	None
 * @retval None
 */
void Key_Up(void)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	af00      	add	r7, sp, #0
	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 80108e4:	4ba3      	ldr	r3, [pc, #652]	; (8010b74 <Key_Up+0x294>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10c      	bne.n	8010906 <Key_Up+0x26>
 80108ec:	4ba1      	ldr	r3, [pc, #644]	; (8010b74 <Key_Up+0x294>)
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d108      	bne.n	8010906 <Key_Up+0x26>
 80108f4:	4b9f      	ldr	r3, [pc, #636]	; (8010b74 <Key_Up+0x294>)
 80108f6:	689b      	ldr	r3, [r3, #8]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d104      	bne.n	8010906 <Key_Up+0x26>
	{

		//get_voltage_current(READ_VOLTAGE);
		DAC_Cmd_send(1,0x0a,0x00);//rise
 80108fc:	2200      	movs	r2, #0
 80108fe:	210a      	movs	r1, #10
 8010900:	2001      	movs	r0, #1
 8010902:	f7fb ff93 	bl	800c82c <DAC_Cmd_send>

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010906:	4b9b      	ldr	r3, [pc, #620]	; (8010b74 <Key_Up+0x294>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d110      	bne.n	8010930 <Key_Up+0x50>
 801090e:	4b99      	ldr	r3, [pc, #612]	; (8010b74 <Key_Up+0x294>)
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d10c      	bne.n	8010930 <Key_Up+0x50>
	{
		if(xyz.coordinates2==8) xyz.coordinates2=1;
 8010916:	4b97      	ldr	r3, [pc, #604]	; (8010b74 <Key_Up+0x294>)
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	2b08      	cmp	r3, #8
 801091c:	d103      	bne.n	8010926 <Key_Up+0x46>
 801091e:	4b95      	ldr	r3, [pc, #596]	; (8010b74 <Key_Up+0x294>)
 8010920:	2201      	movs	r2, #1
 8010922:	605a      	str	r2, [r3, #4]
 8010924:	e004      	b.n	8010930 <Key_Up+0x50>
		else 					xyz.coordinates2++;
 8010926:	4b93      	ldr	r3, [pc, #588]	; (8010b74 <Key_Up+0x294>)
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	1c5a      	adds	r2, r3, #1
 801092c:	4b91      	ldr	r3, [pc, #580]	; (8010b74 <Key_Up+0x294>)
 801092e:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 8010930:	4b90      	ldr	r3, [pc, #576]	; (8010b74 <Key_Up+0x294>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	2b02      	cmp	r3, #2
 8010936:	d11b      	bne.n	8010970 <Key_Up+0x90>
 8010938:	4b8e      	ldr	r3, [pc, #568]	; (8010b74 <Key_Up+0x294>)
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	2b02      	cmp	r3, #2
 801093e:	d117      	bne.n	8010970 <Key_Up+0x90>
 8010940:	4b8c      	ldr	r3, [pc, #560]	; (8010b74 <Key_Up+0x294>)
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d113      	bne.n	8010970 <Key_Up+0x90>
	{
		Cursor_Position++;
 8010948:	4b8b      	ldr	r3, [pc, #556]	; (8010b78 <Key_Up+0x298>)
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	3301      	adds	r3, #1
 801094e:	b2da      	uxtb	r2, r3
 8010950:	4b89      	ldr	r3, [pc, #548]	; (8010b78 <Key_Up+0x298>)
 8010952:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3)	Cursor_Position=4;
 8010954:	4b88      	ldr	r3, [pc, #544]	; (8010b78 <Key_Up+0x298>)
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	2b03      	cmp	r3, #3
 801095a:	d102      	bne.n	8010962 <Key_Up+0x82>
 801095c:	4b86      	ldr	r3, [pc, #536]	; (8010b78 <Key_Up+0x298>)
 801095e:	2204      	movs	r2, #4
 8010960:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6)	Cursor_Position=0;
 8010962:	4b85      	ldr	r3, [pc, #532]	; (8010b78 <Key_Up+0x298>)
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b06      	cmp	r3, #6
 8010968:	d102      	bne.n	8010970 <Key_Up+0x90>
 801096a:	4b83      	ldr	r3, [pc, #524]	; (8010b78 <Key_Up+0x298>)
 801096c:	2200      	movs	r2, #0
 801096e:	701a      	strb	r2, [r3, #0]
	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8010970:	4b80      	ldr	r3, [pc, #512]	; (8010b74 <Key_Up+0x294>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d11b      	bne.n	80109b0 <Key_Up+0xd0>
 8010978:	4b7e      	ldr	r3, [pc, #504]	; (8010b74 <Key_Up+0x294>)
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d117      	bne.n	80109b0 <Key_Up+0xd0>
 8010980:	4b7c      	ldr	r3, [pc, #496]	; (8010b74 <Key_Up+0x294>)
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d113      	bne.n	80109b0 <Key_Up+0xd0>
	{
		Cursor_Position++;
 8010988:	4b7b      	ldr	r3, [pc, #492]	; (8010b78 <Key_Up+0x298>)
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	3301      	adds	r3, #1
 801098e:	b2da      	uxtb	r2, r3
 8010990:	4b79      	ldr	r3, [pc, #484]	; (8010b78 <Key_Up+0x298>)
 8010992:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3+9)	Cursor_Position=4+9;
 8010994:	4b78      	ldr	r3, [pc, #480]	; (8010b78 <Key_Up+0x298>)
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	2b0c      	cmp	r3, #12
 801099a:	d102      	bne.n	80109a2 <Key_Up+0xc2>
 801099c:	4b76      	ldr	r3, [pc, #472]	; (8010b78 <Key_Up+0x298>)
 801099e:	220d      	movs	r2, #13
 80109a0:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6+9)	Cursor_Position=0+9;
 80109a2:	4b75      	ldr	r3, [pc, #468]	; (8010b78 <Key_Up+0x298>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2b0f      	cmp	r3, #15
 80109a8:	d102      	bne.n	80109b0 <Key_Up+0xd0>
 80109aa:	4b73      	ldr	r3, [pc, #460]	; (8010b78 <Key_Up+0x298>)
 80109ac:	2209      	movs	r2, #9
 80109ae:	701a      	strb	r2, [r3, #0]
	}

	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 80109b0:	4b70      	ldr	r3, [pc, #448]	; (8010b74 <Key_Up+0x294>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d114      	bne.n	80109e2 <Key_Up+0x102>
 80109b8:	4b6e      	ldr	r3, [pc, #440]	; (8010b74 <Key_Up+0x294>)
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	2b05      	cmp	r3, #5
 80109be:	d110      	bne.n	80109e2 <Key_Up+0x102>
 80109c0:	4b6c      	ldr	r3, [pc, #432]	; (8010b74 <Key_Up+0x294>)
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	dd0c      	ble.n	80109e2 <Key_Up+0x102>
	{
		if(xyz.coordinates3==3)	xyz.coordinates3=2;
 80109c8:	4b6a      	ldr	r3, [pc, #424]	; (8010b74 <Key_Up+0x294>)
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	2b03      	cmp	r3, #3
 80109ce:	d103      	bne.n	80109d8 <Key_Up+0xf8>
 80109d0:	4b68      	ldr	r3, [pc, #416]	; (8010b74 <Key_Up+0x294>)
 80109d2:	2202      	movs	r2, #2
 80109d4:	609a      	str	r2, [r3, #8]
 80109d6:	e004      	b.n	80109e2 <Key_Up+0x102>
		else 					xyz.coordinates3++;
 80109d8:	4b66      	ldr	r3, [pc, #408]	; (8010b74 <Key_Up+0x294>)
 80109da:	689b      	ldr	r3, [r3, #8]
 80109dc:	1c5a      	adds	r2, r3, #1
 80109de:	4b65      	ldr	r3, [pc, #404]	; (8010b74 <Key_Up+0x294>)
 80109e0:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 80109e2:	4b64      	ldr	r3, [pc, #400]	; (8010b74 <Key_Up+0x294>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d107      	bne.n	80109fa <Key_Up+0x11a>
 80109ea:	4b62      	ldr	r3, [pc, #392]	; (8010b74 <Key_Up+0x294>)
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	2b02      	cmp	r3, #2
 80109f0:	d103      	bne.n	80109fa <Key_Up+0x11a>
 80109f2:	4b60      	ldr	r3, [pc, #384]	; (8010b74 <Key_Up+0x294>)
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d00b      	beq.n	8010a12 <Key_Up+0x132>
 80109fa:	4b5e      	ldr	r3, [pc, #376]	; (8010b74 <Key_Up+0x294>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d117      	bne.n	8010a32 <Key_Up+0x152>
 8010a02:	4b5c      	ldr	r3, [pc, #368]	; (8010b74 <Key_Up+0x294>)
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d113      	bne.n	8010a32 <Key_Up+0x152>
 8010a0a:	4b5a      	ldr	r3, [pc, #360]	; (8010b74 <Key_Up+0x294>)
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	d10f      	bne.n	8010a32 <Key_Up+0x152>
	{
		Cursor_Position=6;
 8010a12:	4b59      	ldr	r3, [pc, #356]	; (8010b78 <Key_Up+0x298>)
 8010a14:	2206      	movs	r2, #6
 8010a16:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==2)	xyz.coordinates3=1;
 8010a18:	4b56      	ldr	r3, [pc, #344]	; (8010b74 <Key_Up+0x294>)
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	2b02      	cmp	r3, #2
 8010a1e:	d103      	bne.n	8010a28 <Key_Up+0x148>
 8010a20:	4b54      	ldr	r3, [pc, #336]	; (8010b74 <Key_Up+0x294>)
 8010a22:	2201      	movs	r2, #1
 8010a24:	609a      	str	r2, [r3, #8]
 8010a26:	e004      	b.n	8010a32 <Key_Up+0x152>
		else 					xyz.coordinates3++;
 8010a28:	4b52      	ldr	r3, [pc, #328]	; (8010b74 <Key_Up+0x294>)
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	1c5a      	adds	r2, r3, #1
 8010a2e:	4b51      	ldr	r3, [pc, #324]	; (8010b74 <Key_Up+0x294>)
 8010a30:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0)))
 8010a32:	4b50      	ldr	r3, [pc, #320]	; (8010b74 <Key_Up+0x294>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2b03      	cmp	r3, #3
 8010a38:	d107      	bne.n	8010a4a <Key_Up+0x16a>
 8010a3a:	4b4e      	ldr	r3, [pc, #312]	; (8010b74 <Key_Up+0x294>)
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d103      	bne.n	8010a4a <Key_Up+0x16a>
 8010a42:	4b4c      	ldr	r3, [pc, #304]	; (8010b74 <Key_Up+0x294>)
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10b      	bne.n	8010a62 <Key_Up+0x182>
 8010a4a:	4b4a      	ldr	r3, [pc, #296]	; (8010b74 <Key_Up+0x294>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b03      	cmp	r3, #3
 8010a50:	d13c      	bne.n	8010acc <Key_Up+0x1ec>
 8010a52:	4b48      	ldr	r3, [pc, #288]	; (8010b74 <Key_Up+0x294>)
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d138      	bne.n	8010acc <Key_Up+0x1ec>
 8010a5a:	4b46      	ldr	r3, [pc, #280]	; (8010b74 <Key_Up+0x294>)
 8010a5c:	689b      	ldr	r3, [r3, #8]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d034      	beq.n	8010acc <Key_Up+0x1ec>
	{
		Cursor_Position=0;
 8010a62:	4b45      	ldr	r3, [pc, #276]	; (8010b78 <Key_Up+0x298>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 8010a68:	4b44      	ldr	r3, [pc, #272]	; (8010b7c <Key_Up+0x29c>)
 8010a6a:	2230      	movs	r2, #48	; 0x30
 8010a6c:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 8010a6e:	4b43      	ldr	r3, [pc, #268]	; (8010b7c <Key_Up+0x29c>)
 8010a70:	2230      	movs	r2, #48	; 0x30
 8010a72:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 8010a74:	4b41      	ldr	r3, [pc, #260]	; (8010b7c <Key_Up+0x29c>)
 8010a76:	2230      	movs	r2, #48	; 0x30
 8010a78:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 8010a7a:	4b40      	ldr	r3, [pc, #256]	; (8010b7c <Key_Up+0x29c>)
 8010a7c:	222e      	movs	r2, #46	; 0x2e
 8010a7e:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 8010a80:	4b3e      	ldr	r3, [pc, #248]	; (8010b7c <Key_Up+0x29c>)
 8010a82:	2230      	movs	r2, #48	; 0x30
 8010a84:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 8010a86:	4b3d      	ldr	r3, [pc, #244]	; (8010b7c <Key_Up+0x29c>)
 8010a88:	2230      	movs	r2, #48	; 0x30
 8010a8a:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 8010a8c:	4b3c      	ldr	r3, [pc, #240]	; (8010b80 <Key_Up+0x2a0>)
 8010a8e:	2230      	movs	r2, #48	; 0x30
 8010a90:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 8010a92:	4b3b      	ldr	r3, [pc, #236]	; (8010b80 <Key_Up+0x2a0>)
 8010a94:	2230      	movs	r2, #48	; 0x30
 8010a96:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 8010a98:	4b39      	ldr	r3, [pc, #228]	; (8010b80 <Key_Up+0x2a0>)
 8010a9a:	2230      	movs	r2, #48	; 0x30
 8010a9c:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 8010a9e:	4b38      	ldr	r3, [pc, #224]	; (8010b80 <Key_Up+0x2a0>)
 8010aa0:	222e      	movs	r2, #46	; 0x2e
 8010aa2:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 8010aa4:	4b36      	ldr	r3, [pc, #216]	; (8010b80 <Key_Up+0x2a0>)
 8010aa6:	2230      	movs	r2, #48	; 0x30
 8010aa8:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 8010aaa:	4b35      	ldr	r3, [pc, #212]	; (8010b80 <Key_Up+0x2a0>)
 8010aac:	2230      	movs	r2, #48	; 0x30
 8010aae:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==9) Recall_Save_Number=0;
 8010ab0:	4b34      	ldr	r3, [pc, #208]	; (8010b84 <Key_Up+0x2a4>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	2b09      	cmp	r3, #9
 8010ab6:	d103      	bne.n	8010ac0 <Key_Up+0x1e0>
 8010ab8:	4b32      	ldr	r3, [pc, #200]	; (8010b84 <Key_Up+0x2a4>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	701a      	strb	r2, [r3, #0]
 8010abe:	e005      	b.n	8010acc <Key_Up+0x1ec>
		else 					  Recall_Save_Number++;
 8010ac0:	4b30      	ldr	r3, [pc, #192]	; (8010b84 <Key_Up+0x2a4>)
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	4b2e      	ldr	r3, [pc, #184]	; (8010b84 <Key_Up+0x2a4>)
 8010aca:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 8010acc:	4b29      	ldr	r3, [pc, #164]	; (8010b74 <Key_Up+0x294>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d114      	bne.n	8010afe <Key_Up+0x21e>
 8010ad4:	4b27      	ldr	r3, [pc, #156]	; (8010b74 <Key_Up+0x294>)
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	2b04      	cmp	r3, #4
 8010ada:	d110      	bne.n	8010afe <Key_Up+0x21e>
 8010adc:	4b25      	ldr	r3, [pc, #148]	; (8010b74 <Key_Up+0x294>)
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00c      	beq.n	8010afe <Key_Up+0x21e>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 8010ae4:	4b23      	ldr	r3, [pc, #140]	; (8010b74 <Key_Up+0x294>)
 8010ae6:	689b      	ldr	r3, [r3, #8]
 8010ae8:	2b03      	cmp	r3, #3
 8010aea:	d103      	bne.n	8010af4 <Key_Up+0x214>
 8010aec:	4b21      	ldr	r3, [pc, #132]	; (8010b74 <Key_Up+0x294>)
 8010aee:	2201      	movs	r2, #1
 8010af0:	609a      	str	r2, [r3, #8]
 8010af2:	e004      	b.n	8010afe <Key_Up+0x21e>
		else                    xyz.coordinates3++;
 8010af4:	4b1f      	ldr	r3, [pc, #124]	; (8010b74 <Key_Up+0x294>)
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	1c5a      	adds	r2, r3, #1
 8010afa:	4b1e      	ldr	r3, [pc, #120]	; (8010b74 <Key_Up+0x294>)
 8010afc:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 8010afe:	4b1d      	ldr	r3, [pc, #116]	; (8010b74 <Key_Up+0x294>)
 8010b00:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 8010b02:	4b1c      	ldr	r3, [pc, #112]	; (8010b74 <Key_Up+0x294>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d114      	bne.n	8010b34 <Key_Up+0x254>
 8010b0a:	4b1a      	ldr	r3, [pc, #104]	; (8010b74 <Key_Up+0x294>)
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	2b06      	cmp	r3, #6
 8010b10:	d110      	bne.n	8010b34 <Key_Up+0x254>
 8010b12:	4b18      	ldr	r3, [pc, #96]	; (8010b74 <Key_Up+0x294>)
 8010b14:	689b      	ldr	r3, [r3, #8]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d00c      	beq.n	8010b34 <Key_Up+0x254>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 8010b1a:	4b16      	ldr	r3, [pc, #88]	; (8010b74 <Key_Up+0x294>)
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	2b03      	cmp	r3, #3
 8010b20:	d103      	bne.n	8010b2a <Key_Up+0x24a>
 8010b22:	4b14      	ldr	r3, [pc, #80]	; (8010b74 <Key_Up+0x294>)
 8010b24:	2201      	movs	r2, #1
 8010b26:	609a      	str	r2, [r3, #8]
 8010b28:	e004      	b.n	8010b34 <Key_Up+0x254>
		else                    xyz.coordinates3++;
 8010b2a:	4b12      	ldr	r3, [pc, #72]	; (8010b74 <Key_Up+0x294>)
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	1c5a      	adds	r2, r3, #1
 8010b30:	4b10      	ldr	r3, [pc, #64]	; (8010b74 <Key_Up+0x294>)
 8010b32:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 8010b34:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <Key_Up+0x294>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d117      	bne.n	8010b6c <Key_Up+0x28c>
 8010b3c:	4b0d      	ldr	r3, [pc, #52]	; (8010b74 <Key_Up+0x294>)
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	2b08      	cmp	r3, #8
 8010b42:	d113      	bne.n	8010b6c <Key_Up+0x28c>
 8010b44:	4b0b      	ldr	r3, [pc, #44]	; (8010b74 <Key_Up+0x294>)
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00f      	beq.n	8010b6c <Key_Up+0x28c>
	{
		Cursor_Position=9;
 8010b4c:	4b0a      	ldr	r3, [pc, #40]	; (8010b78 <Key_Up+0x298>)
 8010b4e:	2209      	movs	r2, #9
 8010b50:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==4) xyz.coordinates3=1;
 8010b52:	4b08      	ldr	r3, [pc, #32]	; (8010b74 <Key_Up+0x294>)
 8010b54:	689b      	ldr	r3, [r3, #8]
 8010b56:	2b04      	cmp	r3, #4
 8010b58:	d103      	bne.n	8010b62 <Key_Up+0x282>
 8010b5a:	4b06      	ldr	r3, [pc, #24]	; (8010b74 <Key_Up+0x294>)
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	609a      	str	r2, [r3, #8]
		else                    xyz.coordinates3++;

	}

}
 8010b60:	e004      	b.n	8010b6c <Key_Up+0x28c>
		else                    xyz.coordinates3++;
 8010b62:	4b04      	ldr	r3, [pc, #16]	; (8010b74 <Key_Up+0x294>)
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	1c5a      	adds	r2, r3, #1
 8010b68:	4b02      	ldr	r3, [pc, #8]	; (8010b74 <Key_Up+0x294>)
 8010b6a:	609a      	str	r2, [r3, #8]
}
 8010b6c:	46c0      	nop			; (mov r8, r8)
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	46c0      	nop			; (mov r8, r8)
 8010b74:	200039e0 	.word	0x200039e0
 8010b78:	20003976 	.word	0x20003976
 8010b7c:	20003020 	.word	0x20003020
 8010b80:	2000302c 	.word	0x2000302c
 8010b84:	20003975 	.word	0x20003975

08010b88 <Key_Down>:
 * @brief  按键Up的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Down(void)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	af00      	add	r7, sp, #0


	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010b8c:	4b9f      	ldr	r3, [pc, #636]	; (8010e0c <Key_Down+0x284>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10c      	bne.n	8010bae <Key_Down+0x26>
 8010b94:	4b9d      	ldr	r3, [pc, #628]	; (8010e0c <Key_Down+0x284>)
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d108      	bne.n	8010bae <Key_Down+0x26>
 8010b9c:	4b9b      	ldr	r3, [pc, #620]	; (8010e0c <Key_Down+0x284>)
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d104      	bne.n	8010bae <Key_Down+0x26>
	{
		//get_voltage_current(READ_CURRENT);
		DAC_Cmd_send(1,0x0a,0x01);//fall
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	210a      	movs	r1, #10
 8010ba8:	2001      	movs	r0, #1
 8010baa:	f7fb fe3f 	bl	800c82c <DAC_Cmd_send>

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010bae:	4b97      	ldr	r3, [pc, #604]	; (8010e0c <Key_Down+0x284>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d110      	bne.n	8010bd8 <Key_Down+0x50>
 8010bb6:	4b95      	ldr	r3, [pc, #596]	; (8010e0c <Key_Down+0x284>)
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d10c      	bne.n	8010bd8 <Key_Down+0x50>
	{
		if(xyz.coordinates2==1) xyz.coordinates2=8;
 8010bbe:	4b93      	ldr	r3, [pc, #588]	; (8010e0c <Key_Down+0x284>)
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d103      	bne.n	8010bce <Key_Down+0x46>
 8010bc6:	4b91      	ldr	r3, [pc, #580]	; (8010e0c <Key_Down+0x284>)
 8010bc8:	2208      	movs	r2, #8
 8010bca:	605a      	str	r2, [r3, #4]
 8010bcc:	e004      	b.n	8010bd8 <Key_Down+0x50>
		else 					xyz.coordinates2--;
 8010bce:	4b8f      	ldr	r3, [pc, #572]	; (8010e0c <Key_Down+0x284>)
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	1e5a      	subs	r2, r3, #1
 8010bd4:	4b8d      	ldr	r3, [pc, #564]	; (8010e0c <Key_Down+0x284>)
 8010bd6:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 8010bd8:	4b8c      	ldr	r3, [pc, #560]	; (8010e0c <Key_Down+0x284>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d11c      	bne.n	8010c1a <Key_Down+0x92>
 8010be0:	4b8a      	ldr	r3, [pc, #552]	; (8010e0c <Key_Down+0x284>)
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d118      	bne.n	8010c1a <Key_Down+0x92>
 8010be8:	4b88      	ldr	r3, [pc, #544]	; (8010e0c <Key_Down+0x284>)
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d114      	bne.n	8010c1a <Key_Down+0x92>
	{
		if(Cursor_Position==0)
 8010bf0:	4b87      	ldr	r3, [pc, #540]	; (8010e10 <Key_Down+0x288>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d103      	bne.n	8010c00 <Key_Down+0x78>
		{
			Cursor_Position=5;
 8010bf8:	4b85      	ldr	r3, [pc, #532]	; (8010e10 <Key_Down+0x288>)
 8010bfa:	2205      	movs	r2, #5
 8010bfc:	701a      	strb	r2, [r3, #0]
			return;
 8010bfe:	e103      	b.n	8010e08 <Key_Down+0x280>
		}
		if(Cursor_Position==4)
 8010c00:	4b83      	ldr	r3, [pc, #524]	; (8010e10 <Key_Down+0x288>)
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	2b04      	cmp	r3, #4
 8010c06:	d102      	bne.n	8010c0e <Key_Down+0x86>
		{
			Cursor_Position=3;
 8010c08:	4b81      	ldr	r3, [pc, #516]	; (8010e10 <Key_Down+0x288>)
 8010c0a:	2203      	movs	r2, #3
 8010c0c:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 8010c0e:	4b80      	ldr	r3, [pc, #512]	; (8010e10 <Key_Down+0x288>)
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	3b01      	subs	r3, #1
 8010c14:	b2da      	uxtb	r2, r3
 8010c16:	4b7e      	ldr	r3, [pc, #504]	; (8010e10 <Key_Down+0x288>)
 8010c18:	701a      	strb	r2, [r3, #0]

	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8010c1a:	4b7c      	ldr	r3, [pc, #496]	; (8010e0c <Key_Down+0x284>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	d11c      	bne.n	8010c5c <Key_Down+0xd4>
 8010c22:	4b7a      	ldr	r3, [pc, #488]	; (8010e0c <Key_Down+0x284>)
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d118      	bne.n	8010c5c <Key_Down+0xd4>
 8010c2a:	4b78      	ldr	r3, [pc, #480]	; (8010e0c <Key_Down+0x284>)
 8010c2c:	689b      	ldr	r3, [r3, #8]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d114      	bne.n	8010c5c <Key_Down+0xd4>
	{
		if(Cursor_Position==0+9)
 8010c32:	4b77      	ldr	r3, [pc, #476]	; (8010e10 <Key_Down+0x288>)
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	2b09      	cmp	r3, #9
 8010c38:	d103      	bne.n	8010c42 <Key_Down+0xba>
		{
			Cursor_Position=5+9;
 8010c3a:	4b75      	ldr	r3, [pc, #468]	; (8010e10 <Key_Down+0x288>)
 8010c3c:	220e      	movs	r2, #14
 8010c3e:	701a      	strb	r2, [r3, #0]
			return;
 8010c40:	e0e2      	b.n	8010e08 <Key_Down+0x280>
		}
		if(Cursor_Position==4+9)
 8010c42:	4b73      	ldr	r3, [pc, #460]	; (8010e10 <Key_Down+0x288>)
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	2b0d      	cmp	r3, #13
 8010c48:	d102      	bne.n	8010c50 <Key_Down+0xc8>
		{
			Cursor_Position=3+9;
 8010c4a:	4b71      	ldr	r3, [pc, #452]	; (8010e10 <Key_Down+0x288>)
 8010c4c:	220c      	movs	r2, #12
 8010c4e:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 8010c50:	4b6f      	ldr	r3, [pc, #444]	; (8010e10 <Key_Down+0x288>)
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	3b01      	subs	r3, #1
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	4b6d      	ldr	r3, [pc, #436]	; (8010e10 <Key_Down+0x288>)
 8010c5a:	701a      	strb	r2, [r3, #0]
	}

	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 8010c5c:	4b6b      	ldr	r3, [pc, #428]	; (8010e0c <Key_Down+0x284>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d114      	bne.n	8010c8e <Key_Down+0x106>
 8010c64:	4b69      	ldr	r3, [pc, #420]	; (8010e0c <Key_Down+0x284>)
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	2b05      	cmp	r3, #5
 8010c6a:	d110      	bne.n	8010c8e <Key_Down+0x106>
 8010c6c:	4b67      	ldr	r3, [pc, #412]	; (8010e0c <Key_Down+0x284>)
 8010c6e:	689b      	ldr	r3, [r3, #8]
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	dd0c      	ble.n	8010c8e <Key_Down+0x106>
	{
		if(xyz.coordinates3==2)	xyz.coordinates3=3;
 8010c74:	4b65      	ldr	r3, [pc, #404]	; (8010e0c <Key_Down+0x284>)
 8010c76:	689b      	ldr	r3, [r3, #8]
 8010c78:	2b02      	cmp	r3, #2
 8010c7a:	d103      	bne.n	8010c84 <Key_Down+0xfc>
 8010c7c:	4b63      	ldr	r3, [pc, #396]	; (8010e0c <Key_Down+0x284>)
 8010c7e:	2203      	movs	r2, #3
 8010c80:	609a      	str	r2, [r3, #8]
 8010c82:	e004      	b.n	8010c8e <Key_Down+0x106>
		else 					xyz.coordinates3--;
 8010c84:	4b61      	ldr	r3, [pc, #388]	; (8010e0c <Key_Down+0x284>)
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	1e5a      	subs	r2, r3, #1
 8010c8a:	4b60      	ldr	r3, [pc, #384]	; (8010e0c <Key_Down+0x284>)
 8010c8c:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 8010c8e:	4b5f      	ldr	r3, [pc, #380]	; (8010e0c <Key_Down+0x284>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d107      	bne.n	8010ca6 <Key_Down+0x11e>
 8010c96:	4b5d      	ldr	r3, [pc, #372]	; (8010e0c <Key_Down+0x284>)
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d103      	bne.n	8010ca6 <Key_Down+0x11e>
 8010c9e:	4b5b      	ldr	r3, [pc, #364]	; (8010e0c <Key_Down+0x284>)
 8010ca0:	689b      	ldr	r3, [r3, #8]
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d00b      	beq.n	8010cbe <Key_Down+0x136>
 8010ca6:	4b59      	ldr	r3, [pc, #356]	; (8010e0c <Key_Down+0x284>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d117      	bne.n	8010cde <Key_Down+0x156>
 8010cae:	4b57      	ldr	r3, [pc, #348]	; (8010e0c <Key_Down+0x284>)
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	2b02      	cmp	r3, #2
 8010cb4:	d113      	bne.n	8010cde <Key_Down+0x156>
 8010cb6:	4b55      	ldr	r3, [pc, #340]	; (8010e0c <Key_Down+0x284>)
 8010cb8:	689b      	ldr	r3, [r3, #8]
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d10f      	bne.n	8010cde <Key_Down+0x156>
	{
		Cursor_Position=6;
 8010cbe:	4b54      	ldr	r3, [pc, #336]	; (8010e10 <Key_Down+0x288>)
 8010cc0:	2206      	movs	r2, #6
 8010cc2:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1)	xyz.coordinates3=2;
 8010cc4:	4b51      	ldr	r3, [pc, #324]	; (8010e0c <Key_Down+0x284>)
 8010cc6:	689b      	ldr	r3, [r3, #8]
 8010cc8:	2b01      	cmp	r3, #1
 8010cca:	d103      	bne.n	8010cd4 <Key_Down+0x14c>
 8010ccc:	4b4f      	ldr	r3, [pc, #316]	; (8010e0c <Key_Down+0x284>)
 8010cce:	2202      	movs	r2, #2
 8010cd0:	609a      	str	r2, [r3, #8]
 8010cd2:	e004      	b.n	8010cde <Key_Down+0x156>
		else 					xyz.coordinates3--;
 8010cd4:	4b4d      	ldr	r3, [pc, #308]	; (8010e0c <Key_Down+0x284>)
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	1e5a      	subs	r2, r3, #1
 8010cda:	4b4c      	ldr	r3, [pc, #304]	; (8010e0c <Key_Down+0x284>)
 8010cdc:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 8010cde:	4b4b      	ldr	r3, [pc, #300]	; (8010e0c <Key_Down+0x284>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b03      	cmp	r3, #3
 8010ce4:	d103      	bne.n	8010cee <Key_Down+0x166>
 8010ce6:	4b49      	ldr	r3, [pc, #292]	; (8010e0c <Key_Down+0x284>)
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d007      	beq.n	8010cfe <Key_Down+0x176>
 8010cee:	4b47      	ldr	r3, [pc, #284]	; (8010e0c <Key_Down+0x284>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2b03      	cmp	r3, #3
 8010cf4:	d138      	bne.n	8010d68 <Key_Down+0x1e0>
 8010cf6:	4b45      	ldr	r3, [pc, #276]	; (8010e0c <Key_Down+0x284>)
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	d134      	bne.n	8010d68 <Key_Down+0x1e0>
	{
		Cursor_Position=0;
 8010cfe:	4b44      	ldr	r3, [pc, #272]	; (8010e10 <Key_Down+0x288>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 8010d04:	4b43      	ldr	r3, [pc, #268]	; (8010e14 <Key_Down+0x28c>)
 8010d06:	2230      	movs	r2, #48	; 0x30
 8010d08:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 8010d0a:	4b42      	ldr	r3, [pc, #264]	; (8010e14 <Key_Down+0x28c>)
 8010d0c:	2230      	movs	r2, #48	; 0x30
 8010d0e:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 8010d10:	4b40      	ldr	r3, [pc, #256]	; (8010e14 <Key_Down+0x28c>)
 8010d12:	2230      	movs	r2, #48	; 0x30
 8010d14:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 8010d16:	4b3f      	ldr	r3, [pc, #252]	; (8010e14 <Key_Down+0x28c>)
 8010d18:	222e      	movs	r2, #46	; 0x2e
 8010d1a:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 8010d1c:	4b3d      	ldr	r3, [pc, #244]	; (8010e14 <Key_Down+0x28c>)
 8010d1e:	2230      	movs	r2, #48	; 0x30
 8010d20:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 8010d22:	4b3c      	ldr	r3, [pc, #240]	; (8010e14 <Key_Down+0x28c>)
 8010d24:	2230      	movs	r2, #48	; 0x30
 8010d26:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 8010d28:	4b3b      	ldr	r3, [pc, #236]	; (8010e18 <Key_Down+0x290>)
 8010d2a:	2230      	movs	r2, #48	; 0x30
 8010d2c:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 8010d2e:	4b3a      	ldr	r3, [pc, #232]	; (8010e18 <Key_Down+0x290>)
 8010d30:	2230      	movs	r2, #48	; 0x30
 8010d32:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 8010d34:	4b38      	ldr	r3, [pc, #224]	; (8010e18 <Key_Down+0x290>)
 8010d36:	2230      	movs	r2, #48	; 0x30
 8010d38:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 8010d3a:	4b37      	ldr	r3, [pc, #220]	; (8010e18 <Key_Down+0x290>)
 8010d3c:	222e      	movs	r2, #46	; 0x2e
 8010d3e:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 8010d40:	4b35      	ldr	r3, [pc, #212]	; (8010e18 <Key_Down+0x290>)
 8010d42:	2230      	movs	r2, #48	; 0x30
 8010d44:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 8010d46:	4b34      	ldr	r3, [pc, #208]	; (8010e18 <Key_Down+0x290>)
 8010d48:	2230      	movs	r2, #48	; 0x30
 8010d4a:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==0) Recall_Save_Number=9;
 8010d4c:	4b33      	ldr	r3, [pc, #204]	; (8010e1c <Key_Down+0x294>)
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d103      	bne.n	8010d5c <Key_Down+0x1d4>
 8010d54:	4b31      	ldr	r3, [pc, #196]	; (8010e1c <Key_Down+0x294>)
 8010d56:	2209      	movs	r2, #9
 8010d58:	701a      	strb	r2, [r3, #0]
 8010d5a:	e005      	b.n	8010d68 <Key_Down+0x1e0>
		else 					   Recall_Save_Number--;
 8010d5c:	4b2f      	ldr	r3, [pc, #188]	; (8010e1c <Key_Down+0x294>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	3b01      	subs	r3, #1
 8010d62:	b2da      	uxtb	r2, r3
 8010d64:	4b2d      	ldr	r3, [pc, #180]	; (8010e1c <Key_Down+0x294>)
 8010d66:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 8010d68:	4b28      	ldr	r3, [pc, #160]	; (8010e0c <Key_Down+0x284>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d114      	bne.n	8010d9a <Key_Down+0x212>
 8010d70:	4b26      	ldr	r3, [pc, #152]	; (8010e0c <Key_Down+0x284>)
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	2b04      	cmp	r3, #4
 8010d76:	d110      	bne.n	8010d9a <Key_Down+0x212>
 8010d78:	4b24      	ldr	r3, [pc, #144]	; (8010e0c <Key_Down+0x284>)
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00c      	beq.n	8010d9a <Key_Down+0x212>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 8010d80:	4b22      	ldr	r3, [pc, #136]	; (8010e0c <Key_Down+0x284>)
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	d103      	bne.n	8010d90 <Key_Down+0x208>
 8010d88:	4b20      	ldr	r3, [pc, #128]	; (8010e0c <Key_Down+0x284>)
 8010d8a:	2203      	movs	r2, #3
 8010d8c:	609a      	str	r2, [r3, #8]
 8010d8e:	e004      	b.n	8010d9a <Key_Down+0x212>
		else                    xyz.coordinates3--;
 8010d90:	4b1e      	ldr	r3, [pc, #120]	; (8010e0c <Key_Down+0x284>)
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	1e5a      	subs	r2, r3, #1
 8010d96:	4b1d      	ldr	r3, [pc, #116]	; (8010e0c <Key_Down+0x284>)
 8010d98:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 8010d9a:	4b1c      	ldr	r3, [pc, #112]	; (8010e0c <Key_Down+0x284>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 8010d9e:	4b1b      	ldr	r3, [pc, #108]	; (8010e0c <Key_Down+0x284>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d114      	bne.n	8010dd0 <Key_Down+0x248>
 8010da6:	4b19      	ldr	r3, [pc, #100]	; (8010e0c <Key_Down+0x284>)
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	2b06      	cmp	r3, #6
 8010dac:	d110      	bne.n	8010dd0 <Key_Down+0x248>
 8010dae:	4b17      	ldr	r3, [pc, #92]	; (8010e0c <Key_Down+0x284>)
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00c      	beq.n	8010dd0 <Key_Down+0x248>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 8010db6:	4b15      	ldr	r3, [pc, #84]	; (8010e0c <Key_Down+0x284>)
 8010db8:	689b      	ldr	r3, [r3, #8]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d103      	bne.n	8010dc6 <Key_Down+0x23e>
 8010dbe:	4b13      	ldr	r3, [pc, #76]	; (8010e0c <Key_Down+0x284>)
 8010dc0:	2203      	movs	r2, #3
 8010dc2:	609a      	str	r2, [r3, #8]
 8010dc4:	e004      	b.n	8010dd0 <Key_Down+0x248>
		else                    xyz.coordinates3--;
 8010dc6:	4b11      	ldr	r3, [pc, #68]	; (8010e0c <Key_Down+0x284>)
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	1e5a      	subs	r2, r3, #1
 8010dcc:	4b0f      	ldr	r3, [pc, #60]	; (8010e0c <Key_Down+0x284>)
 8010dce:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 8010dd0:	4b0e      	ldr	r3, [pc, #56]	; (8010e0c <Key_Down+0x284>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d117      	bne.n	8010e08 <Key_Down+0x280>
 8010dd8:	4b0c      	ldr	r3, [pc, #48]	; (8010e0c <Key_Down+0x284>)
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	2b08      	cmp	r3, #8
 8010dde:	d113      	bne.n	8010e08 <Key_Down+0x280>
 8010de0:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <Key_Down+0x284>)
 8010de2:	689b      	ldr	r3, [r3, #8]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d00f      	beq.n	8010e08 <Key_Down+0x280>
	{
		Cursor_Position=9;
 8010de8:	4b09      	ldr	r3, [pc, #36]	; (8010e10 <Key_Down+0x288>)
 8010dea:	2209      	movs	r2, #9
 8010dec:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1) xyz.coordinates3=4;
 8010dee:	4b07      	ldr	r3, [pc, #28]	; (8010e0c <Key_Down+0x284>)
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d103      	bne.n	8010dfe <Key_Down+0x276>
 8010df6:	4b05      	ldr	r3, [pc, #20]	; (8010e0c <Key_Down+0x284>)
 8010df8:	2204      	movs	r2, #4
 8010dfa:	609a      	str	r2, [r3, #8]
 8010dfc:	e004      	b.n	8010e08 <Key_Down+0x280>
		else                    xyz.coordinates3--;
 8010dfe:	4b03      	ldr	r3, [pc, #12]	; (8010e0c <Key_Down+0x284>)
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	1e5a      	subs	r2, r3, #1
 8010e04:	4b01      	ldr	r3, [pc, #4]	; (8010e0c <Key_Down+0x284>)
 8010e06:	609a      	str	r2, [r3, #8]

	}


}
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	200039e0 	.word	0x200039e0
 8010e10:	20003976 	.word	0x20003976
 8010e14:	20003020 	.word	0x20003020
 8010e18:	2000302c 	.word	0x2000302c
 8010e1c:	20003975 	.word	0x20003975

08010e20 <Key_ESC>:
 * @brief  按键ESC的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_ESC(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	af00      	add	r7, sp, #0
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010e24:	4b5b      	ldr	r3, [pc, #364]	; (8010f94 <Key_ESC+0x174>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d10d      	bne.n	8010e48 <Key_ESC+0x28>
 8010e2c:	4b59      	ldr	r3, [pc, #356]	; (8010f94 <Key_ESC+0x174>)
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d109      	bne.n	8010e48 <Key_ESC+0x28>
 8010e34:	4b57      	ldr	r3, [pc, #348]	; (8010f94 <Key_ESC+0x174>)
 8010e36:	689b      	ldr	r3, [r3, #8]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d105      	bne.n	8010e48 <Key_ESC+0x28>
	{
		COUNT_ESC++;
 8010e3c:	4b56      	ldr	r3, [pc, #344]	; (8010f98 <Key_ESC+0x178>)
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	3301      	adds	r3, #1
 8010e42:	b2da      	uxtb	r2, r3
 8010e44:	4b54      	ldr	r3, [pc, #336]	; (8010f98 <Key_ESC+0x178>)
 8010e46:	701a      	strb	r2, [r3, #0]
	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010e48:	4b52      	ldr	r3, [pc, #328]	; (8010f94 <Key_ESC+0x174>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d10c      	bne.n	8010e6a <Key_ESC+0x4a>
 8010e50:	4b50      	ldr	r3, [pc, #320]	; (8010f94 <Key_ESC+0x174>)
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d108      	bne.n	8010e6a <Key_ESC+0x4a>
	{
		xyz.coordinates1=0;
 8010e58:	4b4e      	ldr	r3, [pc, #312]	; (8010f94 <Key_ESC+0x174>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8010e5e:	4b4d      	ldr	r3, [pc, #308]	; (8010f94 <Key_ESC+0x174>)
 8010e60:	2200      	movs	r2, #0
 8010e62:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8010e64:	4b4b      	ldr	r3, [pc, #300]	; (8010f94 <Key_ESC+0x174>)
 8010e66:	2200      	movs	r2, #0
 8010e68:	609a      	str	r2, [r3, #8]
	}
	/*second menu enter*/
	if( (xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 8010e6a:	4b4a      	ldr	r3, [pc, #296]	; (8010f94 <Key_ESC+0x174>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d10d      	bne.n	8010e8e <Key_ESC+0x6e>
 8010e72:	4b48      	ldr	r3, [pc, #288]	; (8010f94 <Key_ESC+0x174>)
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d009      	beq.n	8010e8e <Key_ESC+0x6e>
 8010e7a:	4b46      	ldr	r3, [pc, #280]	; (8010f94 <Key_ESC+0x174>)
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d005      	beq.n	8010e8e <Key_ESC+0x6e>
	{
		Cursor_Position=0;
 8010e82:	4b46      	ldr	r3, [pc, #280]	; (8010f9c <Key_ESC+0x17c>)
 8010e84:	2200      	movs	r2, #0
 8010e86:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=0;
 8010e88:	4b42      	ldr	r3, [pc, #264]	; (8010f94 <Key_ESC+0x174>)
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	609a      	str	r2, [r3, #8]
	}
	/*I——SET V——SET*/
	if( ((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0)) || ((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0)) )
 8010e8e:	4b41      	ldr	r3, [pc, #260]	; (8010f94 <Key_ESC+0x174>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d107      	bne.n	8010ea6 <Key_ESC+0x86>
 8010e96:	4b3f      	ldr	r3, [pc, #252]	; (8010f94 <Key_ESC+0x174>)
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d103      	bne.n	8010ea6 <Key_ESC+0x86>
 8010e9e:	4b3d      	ldr	r3, [pc, #244]	; (8010f94 <Key_ESC+0x174>)
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d00b      	beq.n	8010ebe <Key_ESC+0x9e>
 8010ea6:	4b3b      	ldr	r3, [pc, #236]	; (8010f94 <Key_ESC+0x174>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d110      	bne.n	8010ed0 <Key_ESC+0xb0>
 8010eae:	4b39      	ldr	r3, [pc, #228]	; (8010f94 <Key_ESC+0x174>)
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	d10c      	bne.n	8010ed0 <Key_ESC+0xb0>
 8010eb6:	4b37      	ldr	r3, [pc, #220]	; (8010f94 <Key_ESC+0x174>)
 8010eb8:	689b      	ldr	r3, [r3, #8]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d108      	bne.n	8010ed0 <Key_ESC+0xb0>
	{
		xyz.coordinates1=0;
 8010ebe:	4b35      	ldr	r3, [pc, #212]	; (8010f94 <Key_ESC+0x174>)
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8010ec4:	4b33      	ldr	r3, [pc, #204]	; (8010f94 <Key_ESC+0x174>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8010eca:	4b32      	ldr	r3, [pc, #200]	; (8010f94 <Key_ESC+0x174>)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	609a      	str	r2, [r3, #8]
	}
	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3!=0))
 8010ed0:	4b30      	ldr	r3, [pc, #192]	; (8010f94 <Key_ESC+0x174>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d10a      	bne.n	8010eee <Key_ESC+0xce>
 8010ed8:	4b2e      	ldr	r3, [pc, #184]	; (8010f94 <Key_ESC+0x174>)
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	2b05      	cmp	r3, #5
 8010ede:	d106      	bne.n	8010eee <Key_ESC+0xce>
 8010ee0:	4b2c      	ldr	r3, [pc, #176]	; (8010f94 <Key_ESC+0x174>)
 8010ee2:	689b      	ldr	r3, [r3, #8]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d002      	beq.n	8010eee <Key_ESC+0xce>
	{
		xyz.coordinates3=0;
 8010ee8:	4b2a      	ldr	r3, [pc, #168]	; (8010f94 <Key_ESC+0x174>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	609a      	str	r2, [r3, #8]
	}

	/*I rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1))
 8010eee:	4b29      	ldr	r3, [pc, #164]	; (8010f94 <Key_ESC+0x174>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
	{

	}
	/*V rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2))
 8010ef2:	4b28      	ldr	r3, [pc, #160]	; (8010f94 <Key_ESC+0x174>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2b01      	cmp	r3, #1
 8010ef8:	d10a      	bne.n	8010f10 <Key_ESC+0xf0>
 8010efa:	4b26      	ldr	r3, [pc, #152]	; (8010f94 <Key_ESC+0x174>)
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d106      	bne.n	8010f10 <Key_ESC+0xf0>
 8010f02:	4b24      	ldr	r3, [pc, #144]	; (8010f94 <Key_ESC+0x174>)
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d102      	bne.n	8010f10 <Key_ESC+0xf0>
	{
		xyz.coordinates3=0;
 8010f0a:	4b22      	ldr	r3, [pc, #136]	; (8010f94 <Key_ESC+0x174>)
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 8010f10:	4b20      	ldr	r3, [pc, #128]	; (8010f94 <Key_ESC+0x174>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b03      	cmp	r3, #3
 8010f16:	d103      	bne.n	8010f20 <Key_ESC+0x100>
 8010f18:	4b1e      	ldr	r3, [pc, #120]	; (8010f94 <Key_ESC+0x174>)
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d007      	beq.n	8010f30 <Key_ESC+0x110>
 8010f20:	4b1c      	ldr	r3, [pc, #112]	; (8010f94 <Key_ESC+0x174>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b03      	cmp	r3, #3
 8010f26:	d10e      	bne.n	8010f46 <Key_ESC+0x126>
 8010f28:	4b1a      	ldr	r3, [pc, #104]	; (8010f94 <Key_ESC+0x174>)
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d10a      	bne.n	8010f46 <Key_ESC+0x126>
	{
		xyz.coordinates1=0;
 8010f30:	4b18      	ldr	r3, [pc, #96]	; (8010f94 <Key_ESC+0x174>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8010f36:	4b17      	ldr	r3, [pc, #92]	; (8010f94 <Key_ESC+0x174>)
 8010f38:	2200      	movs	r2, #0
 8010f3a:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8010f3c:	4b15      	ldr	r3, [pc, #84]	; (8010f94 <Key_ESC+0x174>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 8010f42:	f002 ff65 	bl	8013e10 <Cursor_flash_off>
	}
	/*protect*/
	if( (xyz.coordinates1==4) && (xyz.coordinates2==1) )
 8010f46:	4b13      	ldr	r3, [pc, #76]	; (8010f94 <Key_ESC+0x174>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	2b04      	cmp	r3, #4
 8010f4c:	d105      	bne.n	8010f5a <Key_ESC+0x13a>
 8010f4e:	4b11      	ldr	r3, [pc, #68]	; (8010f94 <Key_ESC+0x174>)
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d101      	bne.n	8010f5a <Key_ESC+0x13a>
	{

		NVIC_SystemReset();
 8010f56:	f7fd f965 	bl	800e224 <__NVIC_SystemReset>

	}
	if( (xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 8010f5a:	4b0e      	ldr	r3, [pc, #56]	; (8010f94 <Key_ESC+0x174>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2b09      	cmp	r3, #9
 8010f60:	d112      	bne.n	8010f88 <Key_ESC+0x168>
 8010f62:	4b0c      	ldr	r3, [pc, #48]	; (8010f94 <Key_ESC+0x174>)
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	2b09      	cmp	r3, #9
 8010f68:	d10e      	bne.n	8010f88 <Key_ESC+0x168>
 8010f6a:	4b0a      	ldr	r3, [pc, #40]	; (8010f94 <Key_ESC+0x174>)
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	2b09      	cmp	r3, #9
 8010f70:	d10a      	bne.n	8010f88 <Key_ESC+0x168>
	{
		xyz.coordinates1=0;
 8010f72:	4b08      	ldr	r3, [pc, #32]	; (8010f94 <Key_ESC+0x174>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8010f78:	4b06      	ldr	r3, [pc, #24]	; (8010f94 <Key_ESC+0x174>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8010f7e:	4b05      	ldr	r3, [pc, #20]	; (8010f94 <Key_ESC+0x174>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 8010f84:	f002 ff44 	bl	8013e10 <Cursor_flash_off>
	}
	//Write_String_8x16AsicII(32,38,"          ");
	Cursor_flash_off();
 8010f88:	f002 ff42 	bl	8013e10 <Cursor_flash_off>


}
 8010f8c:	46c0      	nop			; (mov r8, r8)
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	46c0      	nop			; (mov r8, r8)
 8010f94:	200039e0 	.word	0x200039e0
 8010f98:	20003974 	.word	0x20003974
 8010f9c:	20003976 	.word	0x20003976

08010fa0 <key_scan>:
 * @brief  按键扫描函数
 * @param	None
 * @retval None
 */
void key_scan(void)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
	if(keys_EN==DISABLE) return;
 8010fa6:	4b97      	ldr	r3, [pc, #604]	; (8011204 <key_scan+0x264>)
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d100      	bne.n	8010fb0 <key_scan+0x10>
 8010fae:	e11c      	b.n	80111ea <key_scan+0x24a>
	static int Press_Status2;
	static int Press_Status3;


	/*IO RESET*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);
 8010fb0:	2380      	movs	r3, #128	; 0x80
 8010fb2:	019b      	lsls	r3, r3, #6
 8010fb4:	4894      	ldr	r0, [pc, #592]	; (8011208 <key_scan+0x268>)
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	0019      	movs	r1, r3
 8010fba:	f7f5 ffc6 	bl	8006f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);
 8010fbe:	2380      	movs	r3, #128	; 0x80
 8010fc0:	01db      	lsls	r3, r3, #7
 8010fc2:	4891      	ldr	r0, [pc, #580]	; (8011208 <key_scan+0x268>)
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	0019      	movs	r1, r3
 8010fc8:	f7f5 ffbf 	bl	8006f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_SET);
 8010fcc:	2380      	movs	r3, #128	; 0x80
 8010fce:	021b      	lsls	r3, r3, #8
 8010fd0:	488d      	ldr	r0, [pc, #564]	; (8011208 <key_scan+0x268>)
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	0019      	movs	r1, r3
 8010fd6:	f7f5 ffb8 	bl	8006f4a <HAL_GPIO_WritePin>

	/*Scan the firest row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_RESET);
 8010fda:	2380      	movs	r3, #128	; 0x80
 8010fdc:	019b      	lsls	r3, r3, #6
 8010fde:	488a      	ldr	r0, [pc, #552]	; (8011208 <key_scan+0x268>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	0019      	movs	r1, r3
 8010fe4:	f7f5 ffb1 	bl	8006f4a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 8010fe8:	1dfb      	adds	r3, r7, #7
 8010fea:	2200      	movs	r2, #0
 8010fec:	701a      	strb	r2, [r3, #0]
 8010fee:	e004      	b.n	8010ffa <key_scan+0x5a>
 8010ff0:	1dfb      	adds	r3, r7, #7
 8010ff2:	781a      	ldrb	r2, [r3, #0]
 8010ff4:	1dfb      	adds	r3, r7, #7
 8010ff6:	3201      	adds	r2, #1
 8010ff8:	701a      	strb	r2, [r3, #0]
 8010ffa:	1dfb      	adds	r3, r7, #7
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	2b63      	cmp	r3, #99	; 0x63
 8011000:	d9f6      	bls.n	8010ff0 <key_scan+0x50>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 8011002:	4b82      	ldr	r3, [pc, #520]	; (801120c <key_scan+0x26c>)
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	b29b      	uxth	r3, r3
 8011008:	227f      	movs	r2, #127	; 0x7f
 801100a:	4013      	ands	r3, r2
 801100c:	b29a      	uxth	r2, r3
 801100e:	4b80      	ldr	r3, [pc, #512]	; (8011210 <key_scan+0x270>)
 8011010:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 8011012:	4b7f      	ldr	r3, [pc, #508]	; (8011210 <key_scan+0x270>)
 8011014:	881b      	ldrh	r3, [r3, #0]
 8011016:	2b7f      	cmp	r3, #127	; 0x7f
 8011018:	d017      	beq.n	801104a <key_scan+0xaa>
	{
		Press_Status1=1;//第一行按键按下
 801101a:	4b7e      	ldr	r3, [pc, #504]	; (8011214 <key_scan+0x274>)
 801101c:	2201      	movs	r2, #1
 801101e:	601a      	str	r2, [r3, #0]
		if(++Key_Count1>5)
 8011020:	4b7d      	ldr	r3, [pc, #500]	; (8011218 <key_scan+0x278>)
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	3301      	adds	r3, #1
 8011026:	b2da      	uxtb	r2, r3
 8011028:	4b7b      	ldr	r3, [pc, #492]	; (8011218 <key_scan+0x278>)
 801102a:	701a      	strb	r2, [r3, #0]
 801102c:	4b7a      	ldr	r3, [pc, #488]	; (8011218 <key_scan+0x278>)
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	2b05      	cmp	r3, #5
 8011032:	d90d      	bls.n	8011050 <key_scan+0xb0>
		{
			Row_Flag=1;
 8011034:	4b79      	ldr	r3, [pc, #484]	; (801121c <key_scan+0x27c>)
 8011036:	2201      	movs	r2, #1
 8011038:	601a      	str	r2, [r3, #0]
			Key_Count1=5;
 801103a:	4b77      	ldr	r3, [pc, #476]	; (8011218 <key_scan+0x278>)
 801103c:	2205      	movs	r2, #5
 801103e:	701a      	strb	r2, [r3, #0]
			Key_Value1 = IO_Status;	//记下键值
 8011040:	4b73      	ldr	r3, [pc, #460]	; (8011210 <key_scan+0x270>)
 8011042:	881a      	ldrh	r2, [r3, #0]
 8011044:	4b76      	ldr	r3, [pc, #472]	; (8011220 <key_scan+0x280>)
 8011046:	801a      	strh	r2, [r3, #0]
 8011048:	e002      	b.n	8011050 <key_scan+0xb0>
		}

	}
	else Press_Status1=0;
 801104a:	4b72      	ldr	r3, [pc, #456]	; (8011214 <key_scan+0x274>)
 801104c:	2200      	movs	r2, #0
 801104e:	601a      	str	r2, [r3, #0]
	/*scan the second row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);//第一行恢复
 8011050:	2380      	movs	r3, #128	; 0x80
 8011052:	019b      	lsls	r3, r3, #6
 8011054:	486c      	ldr	r0, [pc, #432]	; (8011208 <key_scan+0x268>)
 8011056:	2201      	movs	r2, #1
 8011058:	0019      	movs	r1, r3
 801105a:	f7f5 ff76 	bl	8006f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_RESET);//拉低第二行
 801105e:	2380      	movs	r3, #128	; 0x80
 8011060:	01db      	lsls	r3, r3, #7
 8011062:	4869      	ldr	r0, [pc, #420]	; (8011208 <key_scan+0x268>)
 8011064:	2200      	movs	r2, #0
 8011066:	0019      	movs	r1, r3
 8011068:	f7f5 ff6f 	bl	8006f4a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 801106c:	1dbb      	adds	r3, r7, #6
 801106e:	2200      	movs	r2, #0
 8011070:	701a      	strb	r2, [r3, #0]
 8011072:	e004      	b.n	801107e <key_scan+0xde>
 8011074:	1dbb      	adds	r3, r7, #6
 8011076:	781a      	ldrb	r2, [r3, #0]
 8011078:	1dbb      	adds	r3, r7, #6
 801107a:	3201      	adds	r2, #1
 801107c:	701a      	strb	r2, [r3, #0]
 801107e:	1dbb      	adds	r3, r7, #6
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	2b63      	cmp	r3, #99	; 0x63
 8011084:	d9f6      	bls.n	8011074 <key_scan+0xd4>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 8011086:	4b61      	ldr	r3, [pc, #388]	; (801120c <key_scan+0x26c>)
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	b29b      	uxth	r3, r3
 801108c:	227f      	movs	r2, #127	; 0x7f
 801108e:	4013      	ands	r3, r2
 8011090:	b29a      	uxth	r2, r3
 8011092:	4b5f      	ldr	r3, [pc, #380]	; (8011210 <key_scan+0x270>)
 8011094:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 8011096:	4b5e      	ldr	r3, [pc, #376]	; (8011210 <key_scan+0x270>)
 8011098:	881b      	ldrh	r3, [r3, #0]
 801109a:	2b7f      	cmp	r3, #127	; 0x7f
 801109c:	d017      	beq.n	80110ce <key_scan+0x12e>
	{
		Press_Status2=1;//第二行按键按下
 801109e:	4b61      	ldr	r3, [pc, #388]	; (8011224 <key_scan+0x284>)
 80110a0:	2201      	movs	r2, #1
 80110a2:	601a      	str	r2, [r3, #0]
		if(++Key_Count2>5)
 80110a4:	4b60      	ldr	r3, [pc, #384]	; (8011228 <key_scan+0x288>)
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	3301      	adds	r3, #1
 80110aa:	b2da      	uxtb	r2, r3
 80110ac:	4b5e      	ldr	r3, [pc, #376]	; (8011228 <key_scan+0x288>)
 80110ae:	701a      	strb	r2, [r3, #0]
 80110b0:	4b5d      	ldr	r3, [pc, #372]	; (8011228 <key_scan+0x288>)
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	2b05      	cmp	r3, #5
 80110b6:	d90d      	bls.n	80110d4 <key_scan+0x134>
		{
			Row_Flag=2;
 80110b8:	4b58      	ldr	r3, [pc, #352]	; (801121c <key_scan+0x27c>)
 80110ba:	2202      	movs	r2, #2
 80110bc:	601a      	str	r2, [r3, #0]
			Key_Count2=5;
 80110be:	4b5a      	ldr	r3, [pc, #360]	; (8011228 <key_scan+0x288>)
 80110c0:	2205      	movs	r2, #5
 80110c2:	701a      	strb	r2, [r3, #0]
			Key_Value2 = IO_Status;	//记下键值
 80110c4:	4b52      	ldr	r3, [pc, #328]	; (8011210 <key_scan+0x270>)
 80110c6:	881a      	ldrh	r2, [r3, #0]
 80110c8:	4b58      	ldr	r3, [pc, #352]	; (801122c <key_scan+0x28c>)
 80110ca:	801a      	strh	r2, [r3, #0]
 80110cc:	e002      	b.n	80110d4 <key_scan+0x134>
		}
	}
	else Press_Status2=0;
 80110ce:	4b55      	ldr	r3, [pc, #340]	; (8011224 <key_scan+0x284>)
 80110d0:	2200      	movs	r2, #0
 80110d2:	601a      	str	r2, [r3, #0]
	/*scan the third row */
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);//第二行恢复
 80110d4:	2380      	movs	r3, #128	; 0x80
 80110d6:	01db      	lsls	r3, r3, #7
 80110d8:	484b      	ldr	r0, [pc, #300]	; (8011208 <key_scan+0x268>)
 80110da:	2201      	movs	r2, #1
 80110dc:	0019      	movs	r1, r3
 80110de:	f7f5 ff34 	bl	8006f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_RESET);//第三行拉低
 80110e2:	2380      	movs	r3, #128	; 0x80
 80110e4:	021b      	lsls	r3, r3, #8
 80110e6:	4848      	ldr	r0, [pc, #288]	; (8011208 <key_scan+0x268>)
 80110e8:	2200      	movs	r2, #0
 80110ea:	0019      	movs	r1, r3
 80110ec:	f7f5 ff2d 	bl	8006f4a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 80110f0:	1d7b      	adds	r3, r7, #5
 80110f2:	2200      	movs	r2, #0
 80110f4:	701a      	strb	r2, [r3, #0]
 80110f6:	e004      	b.n	8011102 <key_scan+0x162>
 80110f8:	1d7b      	adds	r3, r7, #5
 80110fa:	781a      	ldrb	r2, [r3, #0]
 80110fc:	1d7b      	adds	r3, r7, #5
 80110fe:	3201      	adds	r2, #1
 8011100:	701a      	strb	r2, [r3, #0]
 8011102:	1d7b      	adds	r3, r7, #5
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	2b63      	cmp	r3, #99	; 0x63
 8011108:	d9f6      	bls.n	80110f8 <key_scan+0x158>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 801110a:	4b40      	ldr	r3, [pc, #256]	; (801120c <key_scan+0x26c>)
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	b29b      	uxth	r3, r3
 8011110:	227f      	movs	r2, #127	; 0x7f
 8011112:	4013      	ands	r3, r2
 8011114:	b29a      	uxth	r2, r3
 8011116:	4b3e      	ldr	r3, [pc, #248]	; (8011210 <key_scan+0x270>)
 8011118:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 801111a:	4b3d      	ldr	r3, [pc, #244]	; (8011210 <key_scan+0x270>)
 801111c:	881b      	ldrh	r3, [r3, #0]
 801111e:	2b7f      	cmp	r3, #127	; 0x7f
 8011120:	d017      	beq.n	8011152 <key_scan+0x1b2>
	{
		Press_Status3=1;//第三行按键按下
 8011122:	4b43      	ldr	r3, [pc, #268]	; (8011230 <key_scan+0x290>)
 8011124:	2201      	movs	r2, #1
 8011126:	601a      	str	r2, [r3, #0]
		if(++Key_Count3>5)
 8011128:	4b42      	ldr	r3, [pc, #264]	; (8011234 <key_scan+0x294>)
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	3301      	adds	r3, #1
 801112e:	b2da      	uxtb	r2, r3
 8011130:	4b40      	ldr	r3, [pc, #256]	; (8011234 <key_scan+0x294>)
 8011132:	701a      	strb	r2, [r3, #0]
 8011134:	4b3f      	ldr	r3, [pc, #252]	; (8011234 <key_scan+0x294>)
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	2b05      	cmp	r3, #5
 801113a:	d90d      	bls.n	8011158 <key_scan+0x1b8>
		{
			Row_Flag=3;
 801113c:	4b37      	ldr	r3, [pc, #220]	; (801121c <key_scan+0x27c>)
 801113e:	2203      	movs	r2, #3
 8011140:	601a      	str	r2, [r3, #0]
			Key_Count3=5;
 8011142:	4b3c      	ldr	r3, [pc, #240]	; (8011234 <key_scan+0x294>)
 8011144:	2205      	movs	r2, #5
 8011146:	701a      	strb	r2, [r3, #0]
			Key_Value3 = IO_Status;	//记下键值
 8011148:	4b31      	ldr	r3, [pc, #196]	; (8011210 <key_scan+0x270>)
 801114a:	881a      	ldrh	r2, [r3, #0]
 801114c:	4b3a      	ldr	r3, [pc, #232]	; (8011238 <key_scan+0x298>)
 801114e:	801a      	strh	r2, [r3, #0]
 8011150:	e002      	b.n	8011158 <key_scan+0x1b8>
		}
	}
	else Press_Status3=0;
 8011152:	4b37      	ldr	r3, [pc, #220]	; (8011230 <key_scan+0x290>)
 8011154:	2200      	movs	r2, #0
 8011156:	601a      	str	r2, [r3, #0]


	if(Press_Status1==0 && Press_Status2==0 && Press_Status3==0)//无按键按下
 8011158:	4b2e      	ldr	r3, [pc, #184]	; (8011214 <key_scan+0x274>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d14d      	bne.n	80111fc <key_scan+0x25c>
 8011160:	4b30      	ldr	r3, [pc, #192]	; (8011224 <key_scan+0x284>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d149      	bne.n	80111fc <key_scan+0x25c>
 8011168:	4b31      	ldr	r3, [pc, #196]	; (8011230 <key_scan+0x290>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d145      	bne.n	80111fc <key_scan+0x25c>
	{
		switch(Row_Flag)
 8011170:	4b2a      	ldr	r3, [pc, #168]	; (801121c <key_scan+0x27c>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b03      	cmp	r3, #3
 8011176:	d027      	beq.n	80111c8 <key_scan+0x228>
 8011178:	dc39      	bgt.n	80111ee <key_scan+0x24e>
 801117a:	2b01      	cmp	r3, #1
 801117c:	d002      	beq.n	8011184 <key_scan+0x1e4>
 801117e:	2b02      	cmp	r3, #2
 8011180:	d011      	beq.n	80111a6 <key_scan+0x206>
					}
					break;

			}

			default :break;
 8011182:	e034      	b.n	80111ee <key_scan+0x24e>
					Key_Count1--;
 8011184:	4b24      	ldr	r3, [pc, #144]	; (8011218 <key_scan+0x278>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	3b01      	subs	r3, #1
 801118a:	b2da      	uxtb	r2, r3
 801118c:	4b22      	ldr	r3, [pc, #136]	; (8011218 <key_scan+0x278>)
 801118e:	701a      	strb	r2, [r3, #0]
					if(Key_Count1<=0)
 8011190:	4b21      	ldr	r3, [pc, #132]	; (8011218 <key_scan+0x278>)
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d12c      	bne.n	80111f2 <key_scan+0x252>
						Key_Count1=0;
 8011198:	4b1f      	ldr	r3, [pc, #124]	; (8011218 <key_scan+0x278>)
 801119a:	2200      	movs	r2, #0
 801119c:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 801119e:	4b27      	ldr	r3, [pc, #156]	; (801123c <key_scan+0x29c>)
 80111a0:	2201      	movs	r2, #1
 80111a2:	701a      	strb	r2, [r3, #0]
					break;
 80111a4:	e025      	b.n	80111f2 <key_scan+0x252>
					Key_Count2--;
 80111a6:	4b20      	ldr	r3, [pc, #128]	; (8011228 <key_scan+0x288>)
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	3b01      	subs	r3, #1
 80111ac:	b2da      	uxtb	r2, r3
 80111ae:	4b1e      	ldr	r3, [pc, #120]	; (8011228 <key_scan+0x288>)
 80111b0:	701a      	strb	r2, [r3, #0]
					if(Key_Count2<=0)
 80111b2:	4b1d      	ldr	r3, [pc, #116]	; (8011228 <key_scan+0x288>)
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d11d      	bne.n	80111f6 <key_scan+0x256>
						Key_Count2=0;
 80111ba:	4b1b      	ldr	r3, [pc, #108]	; (8011228 <key_scan+0x288>)
 80111bc:	2200      	movs	r2, #0
 80111be:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 80111c0:	4b1e      	ldr	r3, [pc, #120]	; (801123c <key_scan+0x29c>)
 80111c2:	2201      	movs	r2, #1
 80111c4:	701a      	strb	r2, [r3, #0]
					break;
 80111c6:	e016      	b.n	80111f6 <key_scan+0x256>
					Key_Count3--;
 80111c8:	4b1a      	ldr	r3, [pc, #104]	; (8011234 <key_scan+0x294>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	3b01      	subs	r3, #1
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	4b18      	ldr	r3, [pc, #96]	; (8011234 <key_scan+0x294>)
 80111d2:	701a      	strb	r2, [r3, #0]
					if(Key_Count3<=0)
 80111d4:	4b17      	ldr	r3, [pc, #92]	; (8011234 <key_scan+0x294>)
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d10e      	bne.n	80111fa <key_scan+0x25a>
						Key_Count3=0;
 80111dc:	4b15      	ldr	r3, [pc, #84]	; (8011234 <key_scan+0x294>)
 80111de:	2200      	movs	r2, #0
 80111e0:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 80111e2:	4b16      	ldr	r3, [pc, #88]	; (801123c <key_scan+0x29c>)
 80111e4:	2201      	movs	r2, #1
 80111e6:	701a      	strb	r2, [r3, #0]
					break;
 80111e8:	e007      	b.n	80111fa <key_scan+0x25a>
	if(keys_EN==DISABLE) return;
 80111ea:	46c0      	nop			; (mov r8, r8)
 80111ec:	e006      	b.n	80111fc <key_scan+0x25c>
			default :break;
 80111ee:	46c0      	nop			; (mov r8, r8)
 80111f0:	e004      	b.n	80111fc <key_scan+0x25c>
					break;
 80111f2:	46c0      	nop			; (mov r8, r8)
 80111f4:	e002      	b.n	80111fc <key_scan+0x25c>
					break;
 80111f6:	46c0      	nop			; (mov r8, r8)
 80111f8:	e000      	b.n	80111fc <key_scan+0x25c>
					break;
 80111fa:	46c0      	nop			; (mov r8, r8)

	}



}
 80111fc:	46bd      	mov	sp, r7
 80111fe:	b002      	add	sp, #8
 8011200:	bd80      	pop	{r7, pc}
 8011202:	46c0      	nop			; (mov r8, r8)
 8011204:	2000396d 	.word	0x2000396d
 8011208:	50000800 	.word	0x50000800
 801120c:	50000c00 	.word	0x50000c00
 8011210:	200039aa 	.word	0x200039aa
 8011214:	200039ac 	.word	0x200039ac
 8011218:	200039b0 	.word	0x200039b0
 801121c:	200039a4 	.word	0x200039a4
 8011220:	20002fde 	.word	0x20002fde
 8011224:	200039b4 	.word	0x200039b4
 8011228:	200039b8 	.word	0x200039b8
 801122c:	20002fe0 	.word	0x20002fe0
 8011230:	200039bc 	.word	0x200039bc
 8011234:	200039c0 	.word	0x200039c0
 8011238:	20002fe2 	.word	0x20002fe2
 801123c:	200039a8 	.word	0x200039a8

08011240 <KEY_Handle>:
 * @brief  按键处理函数（先判断行列，再调用按键函数）
 * @param	None
 * @retval None
 */
void KEY_Handle(void)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	af00      	add	r7, sp, #0
	if(Key_Enable==ENABLE)
 8011244:	4b5a      	ldr	r3, [pc, #360]	; (80113b0 <KEY_Handle+0x170>)
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d000      	beq.n	801124e <KEY_Handle+0xe>
 801124c:	e0ac      	b.n	80113a8 <KEY_Handle+0x168>
	{

		switch(Row_Flag)
 801124e:	4b59      	ldr	r3, [pc, #356]	; (80113b4 <KEY_Handle+0x174>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2b03      	cmp	r3, #3
 8011254:	d100      	bne.n	8011258 <KEY_Handle+0x18>
 8011256:	e065      	b.n	8011324 <KEY_Handle+0xe4>
 8011258:	dd00      	ble.n	801125c <KEY_Handle+0x1c>
 801125a:	e096      	b.n	801138a <KEY_Handle+0x14a>
 801125c:	2b01      	cmp	r3, #1
 801125e:	d002      	beq.n	8011266 <KEY_Handle+0x26>
 8011260:	2b02      	cmp	r3, #2
 8011262:	d031      	beq.n	80112c8 <KEY_Handle+0x88>
 8011264:	e091      	b.n	801138a <KEY_Handle+0x14a>
			{
				case 1:
				{
					Row_Flag=0;
 8011266:	4b53      	ldr	r3, [pc, #332]	; (80113b4 <KEY_Handle+0x174>)
 8011268:	2200      	movs	r2, #0
 801126a:	601a      	str	r2, [r3, #0]
					switch(Key_Value1)
 801126c:	4b52      	ldr	r3, [pc, #328]	; (80113b8 <KEY_Handle+0x178>)
 801126e:	881b      	ldrh	r3, [r3, #0]
 8011270:	2b3f      	cmp	r3, #63	; 0x3f
 8011272:	d025      	beq.n	80112c0 <KEY_Handle+0x80>
 8011274:	da00      	bge.n	8011278 <KEY_Handle+0x38>
 8011276:	e083      	b.n	8011380 <KEY_Handle+0x140>
 8011278:	2b7e      	cmp	r3, #126	; 0x7e
 801127a:	dd00      	ble.n	801127e <KEY_Handle+0x3e>
 801127c:	e080      	b.n	8011380 <KEY_Handle+0x140>
 801127e:	2b5f      	cmp	r3, #95	; 0x5f
 8011280:	da00      	bge.n	8011284 <KEY_Handle+0x44>
 8011282:	e07d      	b.n	8011380 <KEY_Handle+0x140>
 8011284:	3b5f      	subs	r3, #95	; 0x5f
 8011286:	2b1f      	cmp	r3, #31
 8011288:	d900      	bls.n	801128c <KEY_Handle+0x4c>
 801128a:	e079      	b.n	8011380 <KEY_Handle+0x140>
 801128c:	009a      	lsls	r2, r3, #2
 801128e:	4b4b      	ldr	r3, [pc, #300]	; (80113bc <KEY_Handle+0x17c>)
 8011290:	18d3      	adds	r3, r2, r3
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(1);
 8011296:	2001      	movs	r0, #1
 8011298:	f7fd ffa4 	bl	800f1e4 <key_num_handle>
							break;
 801129c:	e013      	b.n	80112c6 <KEY_Handle+0x86>
						}
						case 0x7d:
						{
							key_num_handle(2);
 801129e:	2002      	movs	r0, #2
 80112a0:	f7fd ffa0 	bl	800f1e4 <key_num_handle>
							break;
 80112a4:	e00f      	b.n	80112c6 <KEY_Handle+0x86>
						}
						case 0x7b:
						{
							key_num_handle(3);
 80112a6:	2003      	movs	r0, #3
 80112a8:	f7fd ff9c 	bl	800f1e4 <key_num_handle>
							break;
 80112ac:	e00b      	b.n	80112c6 <KEY_Handle+0x86>
						}
						case 0x77:
						{
							Key_ESC();
 80112ae:	f7ff fdb7 	bl	8010e20 <Key_ESC>
							break;
 80112b2:	e008      	b.n	80112c6 <KEY_Handle+0x86>
						}
						case 0x6f:
						{
							Key_V_set();
 80112b4:	f7fe f81e 	bl	800f2f4 <Key_V_set>
							break;
 80112b8:	e005      	b.n	80112c6 <KEY_Handle+0x86>
						}
						case 0x5f:
						{
							Key_I_set();
 80112ba:	f7fe f94d 	bl	800f558 <Key_I_set>
							break;
 80112be:	e002      	b.n	80112c6 <KEY_Handle+0x86>
						}
						case 0x3f:
						{
							Key_Up();
 80112c0:	f7ff fb0e 	bl	80108e0 <Key_Up>
							break;
 80112c4:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 80112c6:	e05b      	b.n	8011380 <KEY_Handle+0x140>

				}
				case 2:
				{
					Row_Flag=0;
 80112c8:	4b3a      	ldr	r3, [pc, #232]	; (80113b4 <KEY_Handle+0x174>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	601a      	str	r2, [r3, #0]
					switch(Key_Value2)
 80112ce:	4b3c      	ldr	r3, [pc, #240]	; (80113c0 <KEY_Handle+0x180>)
 80112d0:	881b      	ldrh	r3, [r3, #0]
 80112d2:	2b3f      	cmp	r3, #63	; 0x3f
 80112d4:	d022      	beq.n	801131c <KEY_Handle+0xdc>
 80112d6:	db55      	blt.n	8011384 <KEY_Handle+0x144>
 80112d8:	2b7e      	cmp	r3, #126	; 0x7e
 80112da:	dc53      	bgt.n	8011384 <KEY_Handle+0x144>
 80112dc:	2b5f      	cmp	r3, #95	; 0x5f
 80112de:	db51      	blt.n	8011384 <KEY_Handle+0x144>
 80112e0:	3b5f      	subs	r3, #95	; 0x5f
 80112e2:	2b1f      	cmp	r3, #31
 80112e4:	d84e      	bhi.n	8011384 <KEY_Handle+0x144>
 80112e6:	009a      	lsls	r2, r3, #2
 80112e8:	4b36      	ldr	r3, [pc, #216]	; (80113c4 <KEY_Handle+0x184>)
 80112ea:	18d3      	adds	r3, r2, r3
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(4);
 80112f0:	2004      	movs	r0, #4
 80112f2:	f7fd ff77 	bl	800f1e4 <key_num_handle>
							break;
 80112f6:	e014      	b.n	8011322 <KEY_Handle+0xe2>
						}
						case 0x7d:
						{
							key_num_handle(5);
 80112f8:	2005      	movs	r0, #5
 80112fa:	f7fd ff73 	bl	800f1e4 <key_num_handle>
							break;
 80112fe:	e010      	b.n	8011322 <KEY_Handle+0xe2>
						}
						case 0x7b:
						{
							key_num_handle(6);
 8011300:	2006      	movs	r0, #6
 8011302:	f7fd ff6f 	bl	800f1e4 <key_num_handle>
							break;
 8011306:	e00c      	b.n	8011322 <KEY_Handle+0xe2>
						}
						case 0x77:
						{
							key_num_handle(0);
 8011308:	2000      	movs	r0, #0
 801130a:	f7fd ff6b 	bl	800f1e4 <key_num_handle>
							break;
 801130e:	e008      	b.n	8011322 <KEY_Handle+0xe2>
						}
						case 0x6f:
						{
							Key_Recall_Save();
 8011310:	f7ff fa72 	bl	80107f8 <Key_Recall_Save>
							break;
 8011314:	e005      	b.n	8011322 <KEY_Handle+0xe2>
						}
						case 0x5f:
						{
							Key_Preset_Lock();
 8011316:	f7ff fa37 	bl	8010788 <Key_Preset_Lock>
							break;
 801131a:	e002      	b.n	8011322 <KEY_Handle+0xe2>
						}
						case 0x3f:
						{
							Key_Enter();
 801131c:	f7fe ff92 	bl	8010244 <Key_Enter>
							break;
 8011320:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 8011322:	e02f      	b.n	8011384 <KEY_Handle+0x144>

				}
				case 3:
				{
					Row_Flag=0;
 8011324:	4b23      	ldr	r3, [pc, #140]	; (80113b4 <KEY_Handle+0x174>)
 8011326:	2200      	movs	r2, #0
 8011328:	601a      	str	r2, [r3, #0]
					switch(Key_Value3)
 801132a:	4b27      	ldr	r3, [pc, #156]	; (80113c8 <KEY_Handle+0x188>)
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	2b3f      	cmp	r3, #63	; 0x3f
 8011330:	d022      	beq.n	8011378 <KEY_Handle+0x138>
 8011332:	db29      	blt.n	8011388 <KEY_Handle+0x148>
 8011334:	2b7e      	cmp	r3, #126	; 0x7e
 8011336:	dc27      	bgt.n	8011388 <KEY_Handle+0x148>
 8011338:	2b5f      	cmp	r3, #95	; 0x5f
 801133a:	db25      	blt.n	8011388 <KEY_Handle+0x148>
 801133c:	3b5f      	subs	r3, #95	; 0x5f
 801133e:	2b1f      	cmp	r3, #31
 8011340:	d822      	bhi.n	8011388 <KEY_Handle+0x148>
 8011342:	009a      	lsls	r2, r3, #2
 8011344:	4b21      	ldr	r3, [pc, #132]	; (80113cc <KEY_Handle+0x18c>)
 8011346:	18d3      	adds	r3, r2, r3
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(7);
 801134c:	2007      	movs	r0, #7
 801134e:	f7fd ff49 	bl	800f1e4 <key_num_handle>
							break;
 8011352:	e014      	b.n	801137e <KEY_Handle+0x13e>
						}
						case 0x7d:
						{
							key_num_handle(8);
 8011354:	2008      	movs	r0, #8
 8011356:	f7fd ff45 	bl	800f1e4 <key_num_handle>
							break;
 801135a:	e010      	b.n	801137e <KEY_Handle+0x13e>
						}
						case 0x7b:
						{
							key_num_handle(9);
 801135c:	2009      	movs	r0, #9
 801135e:	f7fd ff41 	bl	800f1e4 <key_num_handle>
							break;
 8011362:	e00c      	b.n	801137e <KEY_Handle+0x13e>
						}
						case 0x77:
						{
							key_num_handle(10);
 8011364:	200a      	movs	r0, #10
 8011366:	f7fd ff3d 	bl	800f1e4 <key_num_handle>
							break;
 801136a:	e008      	b.n	801137e <KEY_Handle+0x13e>
						}
						case 0x6f:
						{
							Key_Shift();
 801136c:	f7ff f95a 	bl	8010624 <Key_Shift>
							break;
 8011370:	e005      	b.n	801137e <KEY_Handle+0x13e>
						}
						case 0x5f:
						{
							Key_ON_OFF();
 8011372:	f7ff f9a3 	bl	80106bc <Key_ON_OFF>
							break;
 8011376:	e002      	b.n	801137e <KEY_Handle+0x13e>
						}
						case 0x3f:
						{
							Key_Down();
 8011378:	f7ff fc06 	bl	8010b88 <Key_Down>
							break;
 801137c:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 801137e:	e003      	b.n	8011388 <KEY_Handle+0x148>
					break;
 8011380:	46c0      	nop			; (mov r8, r8)
 8011382:	e002      	b.n	801138a <KEY_Handle+0x14a>
					break;
 8011384:	46c0      	nop			; (mov r8, r8)
 8011386:	e000      	b.n	801138a <KEY_Handle+0x14a>
					break;
 8011388:	46c0      	nop			; (mov r8, r8)

				}


			}
		Key_Enable=DISABLE;
 801138a:	4b09      	ldr	r3, [pc, #36]	; (80113b0 <KEY_Handle+0x170>)
 801138c:	2200      	movs	r2, #0
 801138e:	701a      	strb	r2, [r3, #0]
		Row_Flag=0;
 8011390:	4b08      	ldr	r3, [pc, #32]	; (80113b4 <KEY_Handle+0x174>)
 8011392:	2200      	movs	r2, #0
 8011394:	601a      	str	r2, [r3, #0]
		Key_Value1=0x7f;
 8011396:	4b08      	ldr	r3, [pc, #32]	; (80113b8 <KEY_Handle+0x178>)
 8011398:	227f      	movs	r2, #127	; 0x7f
 801139a:	801a      	strh	r2, [r3, #0]
		Key_Value2=0x7f;
 801139c:	4b08      	ldr	r3, [pc, #32]	; (80113c0 <KEY_Handle+0x180>)
 801139e:	227f      	movs	r2, #127	; 0x7f
 80113a0:	801a      	strh	r2, [r3, #0]
		Key_Value3=0x7f;
 80113a2:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <KEY_Handle+0x188>)
 80113a4:	227f      	movs	r2, #127	; 0x7f
 80113a6:	801a      	strh	r2, [r3, #0]

	}

}
 80113a8:	46c0      	nop			; (mov r8, r8)
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	46c0      	nop			; (mov r8, r8)
 80113b0:	200039a8 	.word	0x200039a8
 80113b4:	200039a4 	.word	0x200039a4
 80113b8:	20002fde 	.word	0x20002fde
 80113bc:	080182c0 	.word	0x080182c0
 80113c0:	20002fe0 	.word	0x20002fe0
 80113c4:	08018340 	.word	0x08018340
 80113c8:	20002fe2 	.word	0x20002fe2
 80113cc:	080183c0 	.word	0x080183c0

080113d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  温度传感器检测的中断服务函数，检测IGBT温度，软件层保护
  * @param  None
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]



	if(hadc==&hadc1)
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	4b0a      	ldr	r3, [pc, #40]	; (8011404 <HAL_ADC_ConvCpltCallback+0x34>)
 80113dc:	429a      	cmp	r2, r3
 80113de:	d10c      	bne.n	80113fa <HAL_ADC_ConvCpltCallback+0x2a>
	{
		Flag.ADC1_IT=1;
 80113e0:	4b09      	ldr	r3, [pc, #36]	; (8011408 <HAL_ADC_ConvCpltCallback+0x38>)
 80113e2:	2201      	movs	r2, #1
 80113e4:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 80113e6:	4b07      	ldr	r3, [pc, #28]	; (8011404 <HAL_ADC_ConvCpltCallback+0x34>)
 80113e8:	0018      	movs	r0, r3
 80113ea:	f7f4 fad9 	bl	80059a0 <HAL_ADC_Stop_DMA>


		HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 80113ee:	4907      	ldr	r1, [pc, #28]	; (801140c <HAL_ADC_ConvCpltCallback+0x3c>)
 80113f0:	4b04      	ldr	r3, [pc, #16]	; (8011404 <HAL_ADC_ConvCpltCallback+0x34>)
 80113f2:	2202      	movs	r2, #2
 80113f4:	0018      	movs	r0, r3
 80113f6:	f7f4 fa45 	bl	8005884 <HAL_ADC_Start_DMA>
	}

}
 80113fa:	46c0      	nop			; (mov r8, r8)
 80113fc:	46bd      	mov	sp, r7
 80113fe:	b002      	add	sp, #8
 8011400:	bd80      	pop	{r7, pc}
 8011402:	46c0      	nop			; (mov r8, r8)
 8011404:	200032b8 	.word	0x200032b8
 8011408:	20003378 	.word	0x20003378
 801140c:	200039c4 	.word	0x200039c4

08011410 <Check_Error>:
  * @brief  OTP/OVP/OCP的硬件保护服务函数(硬件保护)
  * @param  None
  * @retval None
  */
void Check_Error()
{
 8011410:	b5b0      	push	{r4, r5, r7, lr}
 8011412:	af00      	add	r7, sp, #0
	static uint8_t ERROR_Flag=1;
	static uint8_t ERROR_Flag2=1;
	static uint8_t ERROR_Flag3=1;
	static uint8_t ERROR_Flag4=1;

	if(Voltage_Actual>100)
 8011414:	4b85      	ldr	r3, [pc, #532]	; (801162c <Check_Error+0x21c>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4985      	ldr	r1, [pc, #532]	; (8011630 <Check_Error+0x220>)
 801141a:	1c18      	adds	r0, r3, #0
 801141c:	f7ef f870 	bl	8000500 <__aeabi_fcmpgt>
 8011420:	1e03      	subs	r3, r0, #0
 8011422:	d019      	beq.n	8011458 <Check_Error+0x48>
	{


		Error|=OVP;
 8011424:	4b83      	ldr	r3, [pc, #524]	; (8011634 <Check_Error+0x224>)
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	2201      	movs	r2, #1
 801142a:	4313      	orrs	r3, r2
 801142c:	b2da      	uxtb	r2, r3
 801142e:	4b81      	ldr	r3, [pc, #516]	; (8011634 <Check_Error+0x224>)
 8011430:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 8011432:	4b81      	ldr	r3, [pc, #516]	; (8011638 <Check_Error+0x228>)
 8011434:	2204      	movs	r2, #4
 8011436:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011438:	4b7f      	ldr	r3, [pc, #508]	; (8011638 <Check_Error+0x228>)
 801143a:	2201      	movs	r2, #1
 801143c:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 801143e:	4b7e      	ldr	r3, [pc, #504]	; (8011638 <Check_Error+0x228>)
 8011440:	2201      	movs	r2, #1
 8011442:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag==1)
 8011444:	4b7d      	ldr	r3, [pc, #500]	; (801163c <Check_Error+0x22c>)
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	2b01      	cmp	r3, #1
 801144a:	d10f      	bne.n	801146c <Check_Error+0x5c>
		{
			ERROR_Flag=2;
 801144c:	4b7b      	ldr	r3, [pc, #492]	; (801163c <Check_Error+0x22c>)
 801144e:	2202      	movs	r2, #2
 8011450:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 8011452:	f7fb fad5 	bl	800ca00 <Output_Zero>
 8011456:	e009      	b.n	801146c <Check_Error+0x5c>
		}

	}
	else
	{
		ERROR_Flag=1;
 8011458:	4b78      	ldr	r3, [pc, #480]	; (801163c <Check_Error+0x22c>)
 801145a:	2201      	movs	r2, #1
 801145c:	701a      	strb	r2, [r3, #0]
		Error&=0xfe;//解除电压警报
 801145e:	4b75      	ldr	r3, [pc, #468]	; (8011634 <Check_Error+0x224>)
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	2201      	movs	r2, #1
 8011464:	4393      	bics	r3, r2
 8011466:	b2da      	uxtb	r2, r3
 8011468:	4b72      	ldr	r3, [pc, #456]	; (8011634 <Check_Error+0x224>)
 801146a:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual>50)
 801146c:	4b74      	ldr	r3, [pc, #464]	; (8011640 <Check_Error+0x230>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4974      	ldr	r1, [pc, #464]	; (8011644 <Check_Error+0x234>)
 8011472:	1c18      	adds	r0, r3, #0
 8011474:	f7ef f844 	bl	8000500 <__aeabi_fcmpgt>
 8011478:	1e03      	subs	r3, r0, #0
 801147a:	d019      	beq.n	80114b0 <Check_Error+0xa0>
	{

		Error|=OCP;
 801147c:	4b6d      	ldr	r3, [pc, #436]	; (8011634 <Check_Error+0x224>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2202      	movs	r2, #2
 8011482:	4313      	orrs	r3, r2
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b6b      	ldr	r3, [pc, #428]	; (8011634 <Check_Error+0x224>)
 8011488:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 801148a:	4b6b      	ldr	r3, [pc, #428]	; (8011638 <Check_Error+0x228>)
 801148c:	2204      	movs	r2, #4
 801148e:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011490:	4b69      	ldr	r3, [pc, #420]	; (8011638 <Check_Error+0x228>)
 8011492:	2201      	movs	r2, #1
 8011494:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 8011496:	4b68      	ldr	r3, [pc, #416]	; (8011638 <Check_Error+0x228>)
 8011498:	2201      	movs	r2, #1
 801149a:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag2==1)
 801149c:	4b6a      	ldr	r3, [pc, #424]	; (8011648 <Check_Error+0x238>)
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d10f      	bne.n	80114c4 <Check_Error+0xb4>
		{
			ERROR_Flag2=2;
 80114a4:	4b68      	ldr	r3, [pc, #416]	; (8011648 <Check_Error+0x238>)
 80114a6:	2202      	movs	r2, #2
 80114a8:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 80114aa:	f7fb faa9 	bl	800ca00 <Output_Zero>
 80114ae:	e009      	b.n	80114c4 <Check_Error+0xb4>
		}
	}
	else
	{
		ERROR_Flag2=1;
 80114b0:	4b65      	ldr	r3, [pc, #404]	; (8011648 <Check_Error+0x238>)
 80114b2:	2201      	movs	r2, #1
 80114b4:	701a      	strb	r2, [r3, #0]
		Error&=0xfd;//解除电流警报
 80114b6:	4b5f      	ldr	r3, [pc, #380]	; (8011634 <Check_Error+0x224>)
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	2202      	movs	r2, #2
 80114bc:	4393      	bics	r3, r2
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	4b5c      	ldr	r3, [pc, #368]	; (8011634 <Check_Error+0x224>)
 80114c2:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual*Voltage_Actual>7500)
 80114c4:	4b5e      	ldr	r3, [pc, #376]	; (8011640 <Check_Error+0x230>)
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	4b58      	ldr	r3, [pc, #352]	; (801162c <Check_Error+0x21c>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	1c19      	adds	r1, r3, #0
 80114ce:	1c10      	adds	r0, r2, #0
 80114d0:	f7ef fbc6 	bl	8000c60 <__aeabi_fmul>
 80114d4:	1c03      	adds	r3, r0, #0
 80114d6:	495d      	ldr	r1, [pc, #372]	; (801164c <Check_Error+0x23c>)
 80114d8:	1c18      	adds	r0, r3, #0
 80114da:	f7ef f811 	bl	8000500 <__aeabi_fcmpgt>
 80114de:	1e03      	subs	r3, r0, #0
 80114e0:	d019      	beq.n	8011516 <Check_Error+0x106>
	{

		Error|=CPP;
 80114e2:	4b54      	ldr	r3, [pc, #336]	; (8011634 <Check_Error+0x224>)
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	2208      	movs	r2, #8
 80114e8:	4313      	orrs	r3, r2
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	4b51      	ldr	r3, [pc, #324]	; (8011634 <Check_Error+0x224>)
 80114ee:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 80114f0:	4b51      	ldr	r3, [pc, #324]	; (8011638 <Check_Error+0x228>)
 80114f2:	2204      	movs	r2, #4
 80114f4:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 80114f6:	4b50      	ldr	r3, [pc, #320]	; (8011638 <Check_Error+0x228>)
 80114f8:	2201      	movs	r2, #1
 80114fa:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 80114fc:	4b4e      	ldr	r3, [pc, #312]	; (8011638 <Check_Error+0x228>)
 80114fe:	2201      	movs	r2, #1
 8011500:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag3==1)
 8011502:	4b53      	ldr	r3, [pc, #332]	; (8011650 <Check_Error+0x240>)
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	2b01      	cmp	r3, #1
 8011508:	d10f      	bne.n	801152a <Check_Error+0x11a>
		{
			ERROR_Flag3=2;
 801150a:	4b51      	ldr	r3, [pc, #324]	; (8011650 <Check_Error+0x240>)
 801150c:	2202      	movs	r2, #2
 801150e:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 8011510:	f7fb fa76 	bl	800ca00 <Output_Zero>
 8011514:	e009      	b.n	801152a <Check_Error+0x11a>

		}
	}
	else
	{
		ERROR_Flag3=1;
 8011516:	4b4e      	ldr	r3, [pc, #312]	; (8011650 <Check_Error+0x240>)
 8011518:	2201      	movs	r2, #1
 801151a:	701a      	strb	r2, [r3, #0]
		Error&=0xf7;//解除电流警报
 801151c:	4b45      	ldr	r3, [pc, #276]	; (8011634 <Check_Error+0x224>)
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	2208      	movs	r2, #8
 8011522:	4393      	bics	r3, r2
 8011524:	b2da      	uxtb	r2, r3
 8011526:	4b43      	ldr	r3, [pc, #268]	; (8011634 <Check_Error+0x224>)
 8011528:	701a      	strb	r2, [r3, #0]
		ERROR_Flag4=1;
		Error&=0xfb;//解除电流警报
	}
*/

	if(Voltage_Actual*100>0.95*Set_Voltage && Voltage_Actual*100<1.05*Set_Voltage)
 801152a:	4b40      	ldr	r3, [pc, #256]	; (801162c <Check_Error+0x21c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4940      	ldr	r1, [pc, #256]	; (8011630 <Check_Error+0x220>)
 8011530:	1c18      	adds	r0, r3, #0
 8011532:	f7ef fb95 	bl	8000c60 <__aeabi_fmul>
 8011536:	1c03      	adds	r3, r0, #0
 8011538:	1c18      	adds	r0, r3, #0
 801153a:	f7f1 fcb9 	bl	8002eb0 <__aeabi_f2d>
 801153e:	0004      	movs	r4, r0
 8011540:	000d      	movs	r5, r1
 8011542:	4b44      	ldr	r3, [pc, #272]	; (8011654 <Check_Error+0x244>)
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	0018      	movs	r0, r3
 8011548:	f7f1 fc5c 	bl	8002e04 <__aeabi_i2d>
 801154c:	4a42      	ldr	r2, [pc, #264]	; (8011658 <Check_Error+0x248>)
 801154e:	4b43      	ldr	r3, [pc, #268]	; (801165c <Check_Error+0x24c>)
 8011550:	f7f0 fe06 	bl	8002160 <__aeabi_dmul>
 8011554:	0002      	movs	r2, r0
 8011556:	000b      	movs	r3, r1
 8011558:	0020      	movs	r0, r4
 801155a:	0029      	movs	r1, r5
 801155c:	f7ee ff96 	bl	800048c <__aeabi_dcmpgt>
 8011560:	1e03      	subs	r3, r0, #0
 8011562:	d020      	beq.n	80115a6 <Check_Error+0x196>
 8011564:	4b31      	ldr	r3, [pc, #196]	; (801162c <Check_Error+0x21c>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4931      	ldr	r1, [pc, #196]	; (8011630 <Check_Error+0x220>)
 801156a:	1c18      	adds	r0, r3, #0
 801156c:	f7ef fb78 	bl	8000c60 <__aeabi_fmul>
 8011570:	1c03      	adds	r3, r0, #0
 8011572:	1c18      	adds	r0, r3, #0
 8011574:	f7f1 fc9c 	bl	8002eb0 <__aeabi_f2d>
 8011578:	0004      	movs	r4, r0
 801157a:	000d      	movs	r5, r1
 801157c:	4b35      	ldr	r3, [pc, #212]	; (8011654 <Check_Error+0x244>)
 801157e:	881b      	ldrh	r3, [r3, #0]
 8011580:	0018      	movs	r0, r3
 8011582:	f7f1 fc3f 	bl	8002e04 <__aeabi_i2d>
 8011586:	4a36      	ldr	r2, [pc, #216]	; (8011660 <Check_Error+0x250>)
 8011588:	4b36      	ldr	r3, [pc, #216]	; (8011664 <Check_Error+0x254>)
 801158a:	f7f0 fde9 	bl	8002160 <__aeabi_dmul>
 801158e:	0002      	movs	r2, r0
 8011590:	000b      	movs	r3, r1
 8011592:	0020      	movs	r0, r4
 8011594:	0029      	movs	r1, r5
 8011596:	f7ee ff65 	bl	8000464 <__aeabi_dcmplt>
 801159a:	1e03      	subs	r3, r0, #0
 801159c:	d003      	beq.n	80115a6 <Check_Error+0x196>
	{
		CV_CC_CP=CV;
 801159e:	4b32      	ldr	r3, [pc, #200]	; (8011668 <Check_Error+0x258>)
 80115a0:	2201      	movs	r2, #1
 80115a2:	701a      	strb	r2, [r3, #0]
	}




}
 80115a4:	e03e      	b.n	8011624 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 80115a6:	4b26      	ldr	r3, [pc, #152]	; (8011640 <Check_Error+0x230>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4921      	ldr	r1, [pc, #132]	; (8011630 <Check_Error+0x220>)
 80115ac:	1c18      	adds	r0, r3, #0
 80115ae:	f7ef fb57 	bl	8000c60 <__aeabi_fmul>
 80115b2:	1c03      	adds	r3, r0, #0
 80115b4:	1c18      	adds	r0, r3, #0
 80115b6:	f7f1 fc7b 	bl	8002eb0 <__aeabi_f2d>
 80115ba:	0004      	movs	r4, r0
 80115bc:	000d      	movs	r5, r1
 80115be:	4b2b      	ldr	r3, [pc, #172]	; (801166c <Check_Error+0x25c>)
 80115c0:	881b      	ldrh	r3, [r3, #0]
 80115c2:	0018      	movs	r0, r3
 80115c4:	f7f1 fc1e 	bl	8002e04 <__aeabi_i2d>
 80115c8:	4a23      	ldr	r2, [pc, #140]	; (8011658 <Check_Error+0x248>)
 80115ca:	4b24      	ldr	r3, [pc, #144]	; (801165c <Check_Error+0x24c>)
 80115cc:	f7f0 fdc8 	bl	8002160 <__aeabi_dmul>
 80115d0:	0002      	movs	r2, r0
 80115d2:	000b      	movs	r3, r1
 80115d4:	0020      	movs	r0, r4
 80115d6:	0029      	movs	r1, r5
 80115d8:	f7ee ff58 	bl	800048c <__aeabi_dcmpgt>
 80115dc:	1e03      	subs	r3, r0, #0
 80115de:	d100      	bne.n	80115e2 <Check_Error+0x1d2>
}
 80115e0:	e020      	b.n	8011624 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 80115e2:	4b17      	ldr	r3, [pc, #92]	; (8011640 <Check_Error+0x230>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4912      	ldr	r1, [pc, #72]	; (8011630 <Check_Error+0x220>)
 80115e8:	1c18      	adds	r0, r3, #0
 80115ea:	f7ef fb39 	bl	8000c60 <__aeabi_fmul>
 80115ee:	1c03      	adds	r3, r0, #0
 80115f0:	1c18      	adds	r0, r3, #0
 80115f2:	f7f1 fc5d 	bl	8002eb0 <__aeabi_f2d>
 80115f6:	0004      	movs	r4, r0
 80115f8:	000d      	movs	r5, r1
 80115fa:	4b1c      	ldr	r3, [pc, #112]	; (801166c <Check_Error+0x25c>)
 80115fc:	881b      	ldrh	r3, [r3, #0]
 80115fe:	0018      	movs	r0, r3
 8011600:	f7f1 fc00 	bl	8002e04 <__aeabi_i2d>
 8011604:	4a16      	ldr	r2, [pc, #88]	; (8011660 <Check_Error+0x250>)
 8011606:	4b17      	ldr	r3, [pc, #92]	; (8011664 <Check_Error+0x254>)
 8011608:	f7f0 fdaa 	bl	8002160 <__aeabi_dmul>
 801160c:	0002      	movs	r2, r0
 801160e:	000b      	movs	r3, r1
 8011610:	0020      	movs	r0, r4
 8011612:	0029      	movs	r1, r5
 8011614:	f7ee ff26 	bl	8000464 <__aeabi_dcmplt>
 8011618:	1e03      	subs	r3, r0, #0
 801161a:	d100      	bne.n	801161e <Check_Error+0x20e>
}
 801161c:	e002      	b.n	8011624 <Check_Error+0x214>
		CV_CC_CP=CC;
 801161e:	4b12      	ldr	r3, [pc, #72]	; (8011668 <Check_Error+0x258>)
 8011620:	2202      	movs	r2, #2
 8011622:	701a      	strb	r2, [r3, #0]
}
 8011624:	46c0      	nop			; (mov r8, r8)
 8011626:	46bd      	mov	sp, r7
 8011628:	bdb0      	pop	{r4, r5, r7, pc}
 801162a:	46c0      	nop			; (mov r8, r8)
 801162c:	20003984 	.word	0x20003984
 8011630:	42c80000 	.word	0x42c80000
 8011634:	200039c1 	.word	0x200039c1
 8011638:	200039e0 	.word	0x200039e0
 801163c:	20002fe5 	.word	0x20002fe5
 8011640:	20003988 	.word	0x20003988
 8011644:	42480000 	.word	0x42480000
 8011648:	20002fe6 	.word	0x20002fe6
 801164c:	45ea6000 	.word	0x45ea6000
 8011650:	20002fe7 	.word	0x20002fe7
 8011654:	20002fda 	.word	0x20002fda
 8011658:	66666666 	.word	0x66666666
 801165c:	3fee6666 	.word	0x3fee6666
 8011660:	cccccccd 	.word	0xcccccccd
 8011664:	3ff0cccc 	.word	0x3ff0cccc
 8011668:	20003972 	.word	0x20003972
 801166c:	20002fdc 	.word	0x20002fdc

08011670 <TIM16_DELAY_ON>:
  * @brief  开启DELAY功能，设置定时器时间和使能定时器
  * @param  None
  * @retval None
  */
void TIM16_DELAY_ON(void)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	af00      	add	r7, sp, #0
	TIM_Delay_time = Delay_h * 3600 + Delay_m * 60 + Delay_s;
 8011674:	4b17      	ldr	r3, [pc, #92]	; (80116d4 <TIM16_DELAY_ON+0x64>)
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	001a      	movs	r2, r3
 801167a:	0013      	movs	r3, r2
 801167c:	011b      	lsls	r3, r3, #4
 801167e:	1a9b      	subs	r3, r3, r2
 8011680:	011a      	lsls	r2, r3, #4
 8011682:	1ad2      	subs	r2, r2, r3
 8011684:	0113      	lsls	r3, r2, #4
 8011686:	001a      	movs	r2, r3
 8011688:	0011      	movs	r1, r2
 801168a:	4b13      	ldr	r3, [pc, #76]	; (80116d8 <TIM16_DELAY_ON+0x68>)
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	001a      	movs	r2, r3
 8011690:	0013      	movs	r3, r2
 8011692:	011b      	lsls	r3, r3, #4
 8011694:	1a9b      	subs	r3, r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	18cb      	adds	r3, r1, r3
 801169a:	4a10      	ldr	r2, [pc, #64]	; (80116dc <TIM16_DELAY_ON+0x6c>)
 801169c:	7812      	ldrb	r2, [r2, #0]
 801169e:	189b      	adds	r3, r3, r2
 80116a0:	001a      	movs	r2, r3
 80116a2:	4b0f      	ldr	r3, [pc, #60]	; (80116e0 <TIM16_DELAY_ON+0x70>)
 80116a4:	601a      	str	r2, [r3, #0]
	DELAY_NOT_DELAY = DELAY;
 80116a6:	4b0f      	ldr	r3, [pc, #60]	; (80116e4 <TIM16_DELAY_ON+0x74>)
 80116a8:	2200      	movs	r2, #0
 80116aa:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 80116ac:	4b0e      	ldr	r3, [pc, #56]	; (80116e8 <TIM16_DELAY_ON+0x78>)
 80116ae:	2200      	movs	r2, #0
 80116b0:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim16,0x00);
 80116b2:	4b0e      	ldr	r3, [pc, #56]	; (80116ec <TIM16_DELAY_ON+0x7c>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2200      	movs	r2, #0
 80116b8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim16,TIM_FLAG_UPDATE);
 80116ba:	4b0c      	ldr	r3, [pc, #48]	; (80116ec <TIM16_DELAY_ON+0x7c>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2202      	movs	r2, #2
 80116c0:	4252      	negs	r2, r2
 80116c2:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim16);
 80116c4:	4b09      	ldr	r3, [pc, #36]	; (80116ec <TIM16_DELAY_ON+0x7c>)
 80116c6:	0018      	movs	r0, r3
 80116c8:	f7f7 fa3e 	bl	8008b48 <HAL_TIM_Base_Start_IT>

}
 80116cc:	46c0      	nop			; (mov r8, r8)
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	46c0      	nop			; (mov r8, r8)
 80116d4:	2000397c 	.word	0x2000397c
 80116d8:	2000397d 	.word	0x2000397d
 80116dc:	2000397e 	.word	0x2000397e
 80116e0:	200039d4 	.word	0x200039d4
 80116e4:	20002fd1 	.word	0x20002fd1
 80116e8:	20003970 	.word	0x20003970
 80116ec:	200035e4 	.word	0x200035e4

080116f0 <TIM16_DELAY_OFF>:
  * @brief  关闭DELAY功能
  * @param  None
  * @retval None
  */
void TIM16_DELAY_OFF(void)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	af00      	add	r7, sp, #0
	DELAY_NOT_DELAY = NOT_DELAY;
 80116f4:	4b0c      	ldr	r3, [pc, #48]	; (8011728 <TIM16_DELAY_OFF+0x38>)
 80116f6:	22ff      	movs	r2, #255	; 0xff
 80116f8:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim16);
 80116fa:	4b0c      	ldr	r3, [pc, #48]	; (801172c <TIM16_DELAY_OFF+0x3c>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	6a1b      	ldr	r3, [r3, #32]
 8011700:	4a0b      	ldr	r2, [pc, #44]	; (8011730 <TIM16_DELAY_OFF+0x40>)
 8011702:	4013      	ands	r3, r2
 8011704:	d10d      	bne.n	8011722 <TIM16_DELAY_OFF+0x32>
 8011706:	4b09      	ldr	r3, [pc, #36]	; (801172c <TIM16_DELAY_OFF+0x3c>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	6a1b      	ldr	r3, [r3, #32]
 801170c:	4a09      	ldr	r2, [pc, #36]	; (8011734 <TIM16_DELAY_OFF+0x44>)
 801170e:	4013      	ands	r3, r2
 8011710:	d107      	bne.n	8011722 <TIM16_DELAY_OFF+0x32>
 8011712:	4b06      	ldr	r3, [pc, #24]	; (801172c <TIM16_DELAY_OFF+0x3c>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	4b04      	ldr	r3, [pc, #16]	; (801172c <TIM16_DELAY_OFF+0x3c>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	2101      	movs	r1, #1
 801171e:	438a      	bics	r2, r1
 8011720:	601a      	str	r2, [r3, #0]
}
 8011722:	46c0      	nop			; (mov r8, r8)
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	20002fd1 	.word	0x20002fd1
 801172c:	200035e4 	.word	0x200035e4
 8011730:	00001111 	.word	0x00001111
 8011734:	00000444 	.word	0x00000444

08011738 <TIM17_CYCLE_ON>:
  * @brief  打开CYCLE，打开TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_ON(void)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	af00      	add	r7, sp, #0
	Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 801173c:	4b1d      	ldr	r3, [pc, #116]	; (80117b4 <TIM17_CYCLE_ON+0x7c>)
 801173e:	881b      	ldrh	r3, [r3, #0]
 8011740:	001a      	movs	r2, r3
 8011742:	0013      	movs	r3, r2
 8011744:	015b      	lsls	r3, r3, #5
 8011746:	1a9b      	subs	r3, r3, r2
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	189b      	adds	r3, r3, r2
 801174c:	00db      	lsls	r3, r3, #3
 801174e:	001a      	movs	r2, r3
 8011750:	4b19      	ldr	r3, [pc, #100]	; (80117b8 <TIM17_CYCLE_ON+0x80>)
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	18d3      	adds	r3, r2, r3
 8011756:	001a      	movs	r2, r3
 8011758:	4b18      	ldr	r3, [pc, #96]	; (80117bc <TIM17_CYCLE_ON+0x84>)
 801175a:	601a      	str	r2, [r3, #0]
	Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms);
 801175c:	4b18      	ldr	r3, [pc, #96]	; (80117c0 <TIM17_CYCLE_ON+0x88>)
 801175e:	881b      	ldrh	r3, [r3, #0]
 8011760:	001a      	movs	r2, r3
 8011762:	0013      	movs	r3, r2
 8011764:	015b      	lsls	r3, r3, #5
 8011766:	1a9b      	subs	r3, r3, r2
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	189b      	adds	r3, r3, r2
 801176c:	00db      	lsls	r3, r3, #3
 801176e:	001a      	movs	r2, r3
 8011770:	4b14      	ldr	r3, [pc, #80]	; (80117c4 <TIM17_CYCLE_ON+0x8c>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	18d3      	adds	r3, r2, r3
 8011776:	001a      	movs	r2, r3
 8011778:	4b13      	ldr	r3, [pc, #76]	; (80117c8 <TIM17_CYCLE_ON+0x90>)
 801177a:	601a      	str	r2, [r3, #0]

	CYCLE_NOT_CYCLE = CYCLE;
 801177c:	4b13      	ldr	r3, [pc, #76]	; (80117cc <TIM17_CYCLE_ON+0x94>)
 801177e:	220f      	movs	r2, #15
 8011780:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 8011782:	4b13      	ldr	r3, [pc, #76]	; (80117d0 <TIM17_CYCLE_ON+0x98>)
 8011784:	2200      	movs	r2, #0
 8011786:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim17,0x00);
 8011788:	4b12      	ldr	r3, [pc, #72]	; (80117d4 <TIM17_CYCLE_ON+0x9c>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	2200      	movs	r2, #0
 801178e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim17,TIM_FLAG_UPDATE);
 8011790:	4b10      	ldr	r3, [pc, #64]	; (80117d4 <TIM17_CYCLE_ON+0x9c>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2202      	movs	r2, #2
 8011796:	4252      	negs	r2, r2
 8011798:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim17);
 801179a:	4b0e      	ldr	r3, [pc, #56]	; (80117d4 <TIM17_CYCLE_ON+0x9c>)
 801179c:	0018      	movs	r0, r3
 801179e:	f7f7 f9d3 	bl	8008b48 <HAL_TIM_Base_Start_IT>
	DAC_Cmd_send(1,0xff,0x00);
 80117a2:	2200      	movs	r2, #0
 80117a4:	21ff      	movs	r1, #255	; 0xff
 80117a6:	2001      	movs	r0, #1
 80117a8:	f7fb f840 	bl	800c82c <DAC_Cmd_send>

}
 80117ac:	46c0      	nop			; (mov r8, r8)
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	46c0      	nop			; (mov r8, r8)
 80117b4:	20003978 	.word	0x20003978
 80117b8:	20002fd6 	.word	0x20002fd6
 80117bc:	200039cc 	.word	0x200039cc
 80117c0:	2000397a 	.word	0x2000397a
 80117c4:	20002fd8 	.word	0x20002fd8
 80117c8:	200039d0 	.word	0x200039d0
 80117cc:	20002fd0 	.word	0x20002fd0
 80117d0:	20003970 	.word	0x20003970
 80117d4:	20003630 	.word	0x20003630

080117d8 <TIM17_CYCLE_OFF>:
  * @brief  关闭CYCLE，关闭TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_OFF(void)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	af00      	add	r7, sp, #0
	CYCLE_NOT_CYCLE = NOT_CYCLE;
 80117dc:	4b0e      	ldr	r3, [pc, #56]	; (8011818 <TIM17_CYCLE_OFF+0x40>)
 80117de:	22f0      	movs	r2, #240	; 0xf0
 80117e0:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 80117e2:	4b0e      	ldr	r3, [pc, #56]	; (801181c <TIM17_CYCLE_OFF+0x44>)
 80117e4:	2200      	movs	r2, #0
 80117e6:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim17);
 80117e8:	4b0d      	ldr	r3, [pc, #52]	; (8011820 <TIM17_CYCLE_OFF+0x48>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	4a0d      	ldr	r2, [pc, #52]	; (8011824 <TIM17_CYCLE_OFF+0x4c>)
 80117f0:	4013      	ands	r3, r2
 80117f2:	d10d      	bne.n	8011810 <TIM17_CYCLE_OFF+0x38>
 80117f4:	4b0a      	ldr	r3, [pc, #40]	; (8011820 <TIM17_CYCLE_OFF+0x48>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	6a1b      	ldr	r3, [r3, #32]
 80117fa:	4a0b      	ldr	r2, [pc, #44]	; (8011828 <TIM17_CYCLE_OFF+0x50>)
 80117fc:	4013      	ands	r3, r2
 80117fe:	d107      	bne.n	8011810 <TIM17_CYCLE_OFF+0x38>
 8011800:	4b07      	ldr	r3, [pc, #28]	; (8011820 <TIM17_CYCLE_OFF+0x48>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	4b06      	ldr	r3, [pc, #24]	; (8011820 <TIM17_CYCLE_OFF+0x48>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2101      	movs	r1, #1
 801180c:	438a      	bics	r2, r1
 801180e:	601a      	str	r2, [r3, #0]
}
 8011810:	46c0      	nop			; (mov r8, r8)
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	46c0      	nop			; (mov r8, r8)
 8011818:	20002fd0 	.word	0x20002fd0
 801181c:	20003970 	.word	0x20003970
 8011820:	20003630 	.word	0x20003630
 8011824:	00001111 	.word	0x00001111
 8011828:	00000444 	.word	0x00000444

0801182c <SPI_OLED_SendData>:
	* @brief  向OLED发送数据
	* @param  要发送的数据
	* @retval None
	*/
void SPI_OLED_SendData(uint8_t byte)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	0002      	movs	r2, r0
 8011834:	1dfb      	adds	r3, r7, #7
 8011836:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011838:	4b15      	ldr	r3, [pc, #84]	; (8011890 <SPI_OLED_SendData+0x64>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	68da      	ldr	r2, [r3, #12]
 801183e:	4b14      	ldr	r3, [pc, #80]	; (8011890 <SPI_OLED_SendData+0x64>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2101      	movs	r1, #1
 8011844:	438a      	bics	r2, r1
 8011846:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011848:	4b12      	ldr	r3, [pc, #72]	; (8011894 <SPI_OLED_SendData+0x68>)
 801184a:	2201      	movs	r2, #1
 801184c:	2102      	movs	r1, #2
 801184e:	0018      	movs	r0, r3
 8011850:	f7f5 fb7b 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011854:	4b0f      	ldr	r3, [pc, #60]	; (8011894 <SPI_OLED_SendData+0x68>)
 8011856:	2200      	movs	r2, #0
 8011858:	2101      	movs	r1, #1
 801185a:	0018      	movs	r0, r3
 801185c:	f7f5 fb75 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 8011860:	1df9      	adds	r1, r7, #7
 8011862:	480d      	ldr	r0, [pc, #52]	; (8011898 <SPI_OLED_SendData+0x6c>)
 8011864:	230a      	movs	r3, #10
 8011866:	2201      	movs	r2, #1
 8011868:	f7f6 fa7e 	bl	8007d68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 801186c:	4b09      	ldr	r3, [pc, #36]	; (8011894 <SPI_OLED_SendData+0x68>)
 801186e:	2201      	movs	r2, #1
 8011870:	2101      	movs	r1, #1
 8011872:	0018      	movs	r0, r3
 8011874:	f7f5 fb69 	bl	8006f4a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011878:	4b05      	ldr	r3, [pc, #20]	; (8011890 <SPI_OLED_SendData+0x64>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	68da      	ldr	r2, [r3, #12]
 801187e:	4b04      	ldr	r3, [pc, #16]	; (8011890 <SPI_OLED_SendData+0x64>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2101      	movs	r1, #1
 8011884:	430a      	orrs	r2, r1
 8011886:	60da      	str	r2, [r3, #12]

}
 8011888:	46c0      	nop			; (mov r8, r8)
 801188a:	46bd      	mov	sp, r7
 801188c:	b002      	add	sp, #8
 801188e:	bd80      	pop	{r7, pc}
 8011890:	20003468 	.word	0x20003468
 8011894:	50000800 	.word	0x50000800
 8011898:	200033b4 	.word	0x200033b4

0801189c <SPI_OLED_SendCommond>:
	* @brief  向OLED发送命令
	* @param  要发送的命令
	* @retval None
	*/
void SPI_OLED_SendCommond(uint8_t byte)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	0002      	movs	r2, r0
 80118a4:	1dfb      	adds	r3, r7, #7
 80118a6:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80118a8:	4b15      	ldr	r3, [pc, #84]	; (8011900 <SPI_OLED_SendCommond+0x64>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68da      	ldr	r2, [r3, #12]
 80118ae:	4b14      	ldr	r3, [pc, #80]	; (8011900 <SPI_OLED_SendCommond+0x64>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2101      	movs	r1, #1
 80118b4:	438a      	bics	r2, r1
 80118b6:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);//dc 0
 80118b8:	4b12      	ldr	r3, [pc, #72]	; (8011904 <SPI_OLED_SendCommond+0x68>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	2102      	movs	r1, #2
 80118be:	0018      	movs	r0, r3
 80118c0:	f7f5 fb43 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <SPI_OLED_SendCommond+0x68>)
 80118c6:	2200      	movs	r2, #0
 80118c8:	2101      	movs	r1, #1
 80118ca:	0018      	movs	r0, r3
 80118cc:	f7f5 fb3d 	bl	8006f4a <HAL_GPIO_WritePin>


	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 80118d0:	1df9      	adds	r1, r7, #7
 80118d2:	480d      	ldr	r0, [pc, #52]	; (8011908 <SPI_OLED_SendCommond+0x6c>)
 80118d4:	230a      	movs	r3, #10
 80118d6:	2201      	movs	r2, #1
 80118d8:	f7f6 fa46 	bl	8007d68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 80118dc:	4b09      	ldr	r3, [pc, #36]	; (8011904 <SPI_OLED_SendCommond+0x68>)
 80118de:	2201      	movs	r2, #1
 80118e0:	2101      	movs	r1, #1
 80118e2:	0018      	movs	r0, r3
 80118e4:	f7f5 fb31 	bl	8006f4a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 80118e8:	4b05      	ldr	r3, [pc, #20]	; (8011900 <SPI_OLED_SendCommond+0x64>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	68da      	ldr	r2, [r3, #12]
 80118ee:	4b04      	ldr	r3, [pc, #16]	; (8011900 <SPI_OLED_SendCommond+0x64>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2101      	movs	r1, #1
 80118f4:	430a      	orrs	r2, r1
 80118f6:	60da      	str	r2, [r3, #12]
}
 80118f8:	46c0      	nop			; (mov r8, r8)
 80118fa:	46bd      	mov	sp, r7
 80118fc:	b002      	add	sp, #8
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	20003468 	.word	0x20003468
 8011904:	50000800 	.word	0x50000800
 8011908:	200033b4 	.word	0x200033b4

0801190c <OLED_Init>:

void OLED_Init(void)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	af00      	add	r7, sp, #0

	res_OLED;							//将SPI3_RES引脚置0
 8011910:	4b6b      	ldr	r3, [pc, #428]	; (8011ac0 <OLED_Init+0x1b4>)
 8011912:	2200      	movs	r2, #0
 8011914:	2104      	movs	r1, #4
 8011916:	0018      	movs	r0, r3
 8011918:	f7f5 fb17 	bl	8006f4a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 801191c:	2001      	movs	r0, #1
 801191e:	f7f3 fc6f 	bl	8005200 <HAL_Delay>
	set_OLED; 						//将SPI3_RES引脚置1
 8011922:	4b67      	ldr	r3, [pc, #412]	; (8011ac0 <OLED_Init+0x1b4>)
 8011924:	2201      	movs	r2, #1
 8011926:	2104      	movs	r1, #4
 8011928:	0018      	movs	r0, r3
 801192a:	f7f5 fb0e 	bl	8006f4a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 801192e:	2005      	movs	r0, #5
 8011930:	f7f3 fc66 	bl	8005200 <HAL_Delay>

	SPI_OLED_SendCommond(Set_Command_Lock);//开锁
 8011934:	20fd      	movs	r0, #253	; 0xfd
 8011936:	f7ff ffb1 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x12);
 801193a:	2012      	movs	r0, #18
 801193c:	f7ff ff76 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Column_Address_Commond);//设置列地址
 8011940:	2015      	movs	r0, #21
 8011942:	f7ff ffab 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c);
 8011946:	201c      	movs	r0, #28
 8011948:	f7ff ff70 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x5b);
 801194c:	205b      	movs	r0, #91	; 0x5b
 801194e:	f7ff ff6d 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Row_Address_Commond);//设置行地址
 8011952:	2075      	movs	r0, #117	; 0x75
 8011954:	f7ff ffa2 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011958:	2000      	movs	r0, #0
 801195a:	f7ff ff67 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3f);
 801195e:	203f      	movs	r0, #63	; 0x3f
 8011960:	f7ff ff64 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Sleep_mode_ON);//休眠
 8011964:	20ae      	movs	r0, #174	; 0xae
 8011966:	f7ff ff99 	bl	801189c <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Front_Clock_Divider);//设置前时钟分频器/振荡器频率
 801196a:	20b3      	movs	r0, #179	; 0xb3
 801196c:	f7ff ff96 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x91);
 8011970:	2091      	movs	r0, #145	; 0x91
 8011972:	f7ff ff5b 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_MUX_Ratio);//设置多路选择开关比值
 8011976:	20ca      	movs	r0, #202	; 0xca
 8011978:	f7ff ff90 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x3f);
 801197c:	203f      	movs	r0, #63	; 0x3f
 801197e:	f7ff ff55 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Offset);//从0-127设置垂直滚动
 8011982:	20a2      	movs	r0, #162	; 0xa2
 8011984:	f7ff ff8a 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011988:	2000      	movs	r0, #0
 801198a:	f7ff ff4f 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Start_Line);//设置启动行
 801198e:	20a1      	movs	r0, #161	; 0xa1
 8011990:	f7ff ff84 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011994:	2000      	movs	r0, #0
 8011996:	f7ff ff49 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//设置正常显示
 801199a:	20a6      	movs	r0, #166	; 0xa6
 801199c:	f7ff ff7e 	bl	801189c <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 80119a0:	20a0      	movs	r0, #160	; 0xa0
 80119a2:	f7ff ff7b 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 80119a6:	2014      	movs	r0, #20
 80119a8:	f7ff ff40 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 80119ac:	2011      	movs	r0, #17
 80119ae:	f7ff ff3d 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_GPIO);//引脚设定
 80119b2:	20b5      	movs	r0, #181	; 0xb5
 80119b4:	f7ff ff72 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 80119b8:	2000      	movs	r0, #0
 80119ba:	f7ff ff37 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Function_Selection);//内部电压调节
 80119be:	20ab      	movs	r0, #171	; 0xab
 80119c0:	f7ff ff6c 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x01);
 80119c4:	2001      	movs	r0, #1
 80119c6:	f7ff ff31 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xb4);
 80119ca:	20b4      	movs	r0, #180	; 0xb4
 80119cc:	f7ff ff66 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa0);
 80119d0:	20a0      	movs	r0, #160	; 0xa0
 80119d2:	f7ff ff2b 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0xfd);
 80119d6:	20fd      	movs	r0, #253	; 0xfd
 80119d8:	f7ff ff28 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Contrast_Current);//设置对比度电流
 80119dc:	20c1      	movs	r0, #193	; 0xc1
 80119de:	f7ff ff5d 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xaf);
 80119e2:	20af      	movs	r0, #175	; 0xaf
 80119e4:	f7ff ff22 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Master_Contrast_Current_Control);//主对比度电流控制
 80119e8:	20c7      	movs	r0, #199	; 0xc7
 80119ea:	f7ff ff57 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0f);
 80119ee:	200f      	movs	r0, #15
 80119f0:	f7ff ff1c 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Gray_Scale_Table);//设置灰度表
 80119f4:	20b8      	movs	r0, #184	; 0xb8
 80119f6:	f7ff ff51 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0c);
 80119fa:	200c      	movs	r0, #12
 80119fc:	f7ff ff16 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x18);
 8011a00:	2018      	movs	r0, #24
 8011a02:	f7ff ff13 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x24);
 8011a06:	2024      	movs	r0, #36	; 0x24
 8011a08:	f7ff ff10 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x30);
 8011a0c:	2030      	movs	r0, #48	; 0x30
 8011a0e:	f7ff ff0d 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3c);
 8011a12:	203c      	movs	r0, #60	; 0x3c
 8011a14:	f7ff ff0a 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x48);
 8011a18:	2048      	movs	r0, #72	; 0x48
 8011a1a:	f7ff ff07 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x54);
 8011a1e:	2054      	movs	r0, #84	; 0x54
 8011a20:	f7ff ff04 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x60);
 8011a24:	2060      	movs	r0, #96	; 0x60
 8011a26:	f7ff ff01 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x6c);
 8011a2a:	206c      	movs	r0, #108	; 0x6c
 8011a2c:	f7ff fefe 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x78);
 8011a30:	2078      	movs	r0, #120	; 0x78
 8011a32:	f7ff fefb 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x84);
 8011a36:	2084      	movs	r0, #132	; 0x84
 8011a38:	f7ff fef8 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x90);
 8011a3c:	2090      	movs	r0, #144	; 0x90
 8011a3e:	f7ff fef5 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x9c);
 8011a42:	209c      	movs	r0, #156	; 0x9c
 8011a44:	f7ff fef2 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0xa8);
 8011a48:	20a8      	movs	r0, #168	; 0xa8
 8011a4a:	f7ff feef 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0xb4);
 8011a4e:	20b4      	movs	r0, #180	; 0xb4
 8011a50:	f7ff feec 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Enable_Gray_Scale_table);//开启灰度表
 8011a54:	2000      	movs	r0, #0
 8011a56:	f7ff ff21 	bl	801189c <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Phase_Length);//设置相位长度
 8011a5a:	20b1      	movs	r0, #177	; 0xb1
 8011a5c:	f7ff ff1e 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xE2);
 8011a60:	20e2      	movs	r0, #226	; 0xe2
 8011a62:	f7ff fee3 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xD1); 								//Display Enhancement B
 8011a66:	20d1      	movs	r0, #209	; 0xd1
 8011a68:	f7ff ff18 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa2);
 8011a6c:	20a2      	movs	r0, #162	; 0xa2
 8011a6e:	f7ff fedd 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x20);										//反显
 8011a72:	2020      	movs	r0, #32
 8011a74:	f7ff feda 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Pre_charge_voltage);//设置预充电电压
 8011a78:	20bb      	movs	r0, #187	; 0xbb
 8011a7a:	f7ff ff0f 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1F);
 8011a7e:	201f      	movs	r0, #31
 8011a80:	f7ff fed4 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Second_Precharge_Period);//设置第二预充期间
 8011a84:	20b6      	movs	r0, #182	; 0xb6
 8011a86:	f7ff ff09 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x08);
 8011a8a:	2008      	movs	r0, #8
 8011a8c:	f7ff fece 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_VCOMH );//设置COM取消选择电压等级
 8011a90:	20be      	movs	r0, #190	; 0xbe
 8011a92:	f7ff ff03 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x07);
 8011a96:	2007      	movs	r0, #7
 8011a98:	f7ff fec8 	bl	801182c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//正常显示
 8011a9c:	20a6      	movs	r0, #166	; 0xa6
 8011a9e:	f7ff fefd 	bl	801189c <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Exit_Partial_Display);//该命令被发送到退出部分显示模式
 8011aa2:	20a9      	movs	r0, #169	; 0xa9
 8011aa4:	f7ff fefa 	bl	801189c <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Write_RAM_Command);
 8011aa8:	205c      	movs	r0, #92	; 0x5c
 8011aaa:	f7ff fef7 	bl	801189c <SPI_OLED_SendCommond>

	Fill_RAM(0x00);   //清屏
 8011aae:	2000      	movs	r0, #0
 8011ab0:	f000 fcf8 	bl	80124a4 <Fill_RAM>

	SPI_OLED_SendCommond(Sleep_mode_OFF);//关休眠
 8011ab4:	20af      	movs	r0, #175	; 0xaf
 8011ab6:	f7ff fef1 	bl	801189c <SPI_OLED_SendCommond>

}
 8011aba:	46c0      	nop			; (mov r8, r8)
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	50000800 	.word	0x50000800

08011ac4 <Font_1Bit_To_4Bit>:
 * @brief  转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据（字模表的元素）
 * @retval None
 */
void Font_1Bit_To_4Bit(uint8_t Data)
{
 8011ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ac6:	b087      	sub	sp, #28
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	0002      	movs	r2, r0
 8011acc:	1dfb      	adds	r3, r7, #7
 8011ace:	701a      	strb	r2, [r3, #0]
	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 uint8_t mask=0x01;
 8011ad0:	2317      	movs	r3, #23
 8011ad2:	18fb      	adds	r3, r7, r3
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8011ad8:	230c      	movs	r3, #12
 8011ada:	18fb      	adds	r3, r7, r3
 8011adc:	2200      	movs	r2, #0
 8011ade:	601a      	str	r2, [r3, #0]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 8011ae4:	2308      	movs	r3, #8
 8011ae6:	18fb      	adds	r3, r7, r3
 8011ae8:	2200      	movs	r2, #0
 8011aea:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 8011aec:	2316      	movs	r3, #22
 8011aee:	18fb      	adds	r3, r7, r3
 8011af0:	2200      	movs	r2, #0
 8011af2:	701a      	strb	r2, [r3, #0]
 8011af4:	e037      	b.n	8011b66 <Font_1Bit_To_4Bit+0xa2>
	 {
		 if((Data&mask)==mask) temp[i]|=Light;//low 4 bits set
 8011af6:	1dfb      	adds	r3, r7, #7
 8011af8:	2117      	movs	r1, #23
 8011afa:	187a      	adds	r2, r7, r1
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	7812      	ldrb	r2, [r2, #0]
 8011b00:	4013      	ands	r3, r2
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	187a      	adds	r2, r7, r1
 8011b06:	7812      	ldrb	r2, [r2, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d10e      	bne.n	8011b2a <Font_1Bit_To_4Bit+0x66>
 8011b0c:	2016      	movs	r0, #22
 8011b0e:	183b      	adds	r3, r7, r0
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	240c      	movs	r4, #12
 8011b14:	193a      	adds	r2, r7, r4
 8011b16:	5cd1      	ldrb	r1, [r2, r3]
 8011b18:	4b54      	ldr	r3, [pc, #336]	; (8011c6c <Font_1Bit_To_4Bit+0x1a8>)
 8011b1a:	781a      	ldrb	r2, [r3, #0]
 8011b1c:	183b      	adds	r3, r7, r0
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	430a      	orrs	r2, r1
 8011b22:	b2d1      	uxtb	r1, r2
 8011b24:	193a      	adds	r2, r7, r4
 8011b26:	54d1      	strb	r1, [r2, r3]
 8011b28:	e011      	b.n	8011b4e <Font_1Bit_To_4Bit+0x8a>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 8011b2a:	2116      	movs	r1, #22
 8011b2c:	187b      	adds	r3, r7, r1
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	200c      	movs	r0, #12
 8011b32:	183a      	adds	r2, r7, r0
 8011b34:	5cd3      	ldrb	r3, [r2, r3]
 8011b36:	b25b      	sxtb	r3, r3
 8011b38:	4a4c      	ldr	r2, [pc, #304]	; (8011c6c <Font_1Bit_To_4Bit+0x1a8>)
 8011b3a:	7812      	ldrb	r2, [r2, #0]
 8011b3c:	0112      	lsls	r2, r2, #4
 8011b3e:	b252      	sxtb	r2, r2
 8011b40:	4013      	ands	r3, r2
 8011b42:	b25a      	sxtb	r2, r3
 8011b44:	187b      	adds	r3, r7, r1
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	b2d1      	uxtb	r1, r2
 8011b4a:	183a      	adds	r2, r7, r0
 8011b4c:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8011b4e:	2317      	movs	r3, #23
 8011b50:	18fa      	adds	r2, r7, r3
 8011b52:	18fb      	adds	r3, r7, r3
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	18db      	adds	r3, r3, r3
 8011b58:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 8011b5a:	2116      	movs	r1, #22
 8011b5c:	187b      	adds	r3, r7, r1
 8011b5e:	781a      	ldrb	r2, [r3, #0]
 8011b60:	187b      	adds	r3, r7, r1
 8011b62:	3201      	adds	r2, #1
 8011b64:	701a      	strb	r2, [r3, #0]
 8011b66:	2316      	movs	r3, #22
 8011b68:	18fb      	adds	r3, r7, r3
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	2b07      	cmp	r3, #7
 8011b6e:	d9c2      	bls.n	8011af6 <Font_1Bit_To_4Bit+0x32>

	 }
	 mask=0x0f;
 8011b70:	2317      	movs	r3, #23
 8011b72:	18fb      	adds	r3, r7, r3
 8011b74:	220f      	movs	r2, #15
 8011b76:	701a      	strb	r2, [r3, #0]
	 uint8_t index=3;
 8011b78:	2315      	movs	r3, #21
 8011b7a:	18fb      	adds	r3, r7, r3
 8011b7c:	2203      	movs	r2, #3
 8011b7e:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8011b80:	2314      	movs	r3, #20
 8011b82:	18fb      	adds	r3, r7, r3
 8011b84:	2200      	movs	r2, #0
 8011b86:	701a      	strb	r2, [r3, #0]
 8011b88:	e03d      	b.n	8011c06 <Font_1Bit_To_4Bit+0x142>
	 {
		 data_send[index]|=(temp[j]&mask);//0 2 4 6 low
 8011b8a:	2015      	movs	r0, #21
 8011b8c:	183b      	adds	r3, r7, r0
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	2508      	movs	r5, #8
 8011b92:	197a      	adds	r2, r7, r5
 8011b94:	5cd1      	ldrb	r1, [r2, r3]
 8011b96:	2414      	movs	r4, #20
 8011b98:	193b      	adds	r3, r7, r4
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	260c      	movs	r6, #12
 8011b9e:	19ba      	adds	r2, r7, r6
 8011ba0:	5cd3      	ldrb	r3, [r2, r3]
 8011ba2:	2217      	movs	r2, #23
 8011ba4:	18ba      	adds	r2, r7, r2
 8011ba6:	7812      	ldrb	r2, [r2, #0]
 8011ba8:	4013      	ands	r3, r2
 8011baa:	b2da      	uxtb	r2, r3
 8011bac:	183b      	adds	r3, r7, r0
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	430a      	orrs	r2, r1
 8011bb2:	b2d1      	uxtb	r1, r2
 8011bb4:	197a      	adds	r2, r7, r5
 8011bb6:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8011bb8:	183b      	adds	r3, r7, r0
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	197a      	adds	r2, r7, r5
 8011bbe:	5cd3      	ldrb	r3, [r2, r3]
 8011bc0:	b25a      	sxtb	r2, r3
 8011bc2:	193b      	adds	r3, r7, r4
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	19b9      	adds	r1, r7, r6
 8011bca:	5ccb      	ldrb	r3, [r1, r3]
 8011bcc:	2117      	movs	r1, #23
 8011bce:	1879      	adds	r1, r7, r1
 8011bd0:	7809      	ldrb	r1, [r1, #0]
 8011bd2:	400b      	ands	r3, r1
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	011b      	lsls	r3, r3, #4
 8011bd8:	b25b      	sxtb	r3, r3
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	b25a      	sxtb	r2, r3
 8011bde:	183b      	adds	r3, r7, r0
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	b2d1      	uxtb	r1, r2
 8011be4:	197a      	adds	r2, r7, r5
 8011be6:	54d1      	strb	r1, [r2, r3]
		 j++;
 8011be8:	193b      	adds	r3, r7, r4
 8011bea:	781a      	ldrb	r2, [r3, #0]
 8011bec:	193b      	adds	r3, r7, r4
 8011bee:	3201      	adds	r2, #1
 8011bf0:	701a      	strb	r2, [r3, #0]
		 j++;
 8011bf2:	193b      	adds	r3, r7, r4
 8011bf4:	781a      	ldrb	r2, [r3, #0]
 8011bf6:	193b      	adds	r3, r7, r4
 8011bf8:	3201      	adds	r2, #1
 8011bfa:	701a      	strb	r2, [r3, #0]
		 index--;
 8011bfc:	183b      	adds	r3, r7, r0
 8011bfe:	781a      	ldrb	r2, [r3, #0]
 8011c00:	183b      	adds	r3, r7, r0
 8011c02:	3a01      	subs	r2, #1
 8011c04:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8011c06:	2314      	movs	r3, #20
 8011c08:	18fb      	adds	r3, r7, r3
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	2b07      	cmp	r3, #7
 8011c0e:	d9bc      	bls.n	8011b8a <Font_1Bit_To_4Bit+0xc6>

	 }
	 //写RAM

		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011c10:	4b17      	ldr	r3, [pc, #92]	; (8011c70 <Font_1Bit_To_4Bit+0x1ac>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	68da      	ldr	r2, [r3, #12]
 8011c16:	4b16      	ldr	r3, [pc, #88]	; (8011c70 <Font_1Bit_To_4Bit+0x1ac>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2101      	movs	r1, #1
 8011c1c:	438a      	bics	r2, r1
 8011c1e:	60da      	str	r2, [r3, #12]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011c20:	4b14      	ldr	r3, [pc, #80]	; (8011c74 <Font_1Bit_To_4Bit+0x1b0>)
 8011c22:	2201      	movs	r2, #1
 8011c24:	2102      	movs	r1, #2
 8011c26:	0018      	movs	r0, r3
 8011c28:	f7f5 f98f 	bl	8006f4a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011c2c:	4b11      	ldr	r3, [pc, #68]	; (8011c74 <Font_1Bit_To_4Bit+0x1b0>)
 8011c2e:	2200      	movs	r2, #0
 8011c30:	2101      	movs	r1, #1
 8011c32:	0018      	movs	r0, r3
 8011c34:	f7f5 f989 	bl	8006f4a <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1,data_send,4,100);
 8011c38:	2308      	movs	r3, #8
 8011c3a:	18f9      	adds	r1, r7, r3
 8011c3c:	480e      	ldr	r0, [pc, #56]	; (8011c78 <Font_1Bit_To_4Bit+0x1b4>)
 8011c3e:	2364      	movs	r3, #100	; 0x64
 8011c40:	2204      	movs	r2, #4
 8011c42:	f7f6 f891 	bl	8007d68 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011c46:	4b0b      	ldr	r3, [pc, #44]	; (8011c74 <Font_1Bit_To_4Bit+0x1b0>)
 8011c48:	2201      	movs	r2, #1
 8011c4a:	2101      	movs	r1, #1
 8011c4c:	0018      	movs	r0, r3
 8011c4e:	f7f5 f97c 	bl	8006f4a <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011c52:	4b07      	ldr	r3, [pc, #28]	; (8011c70 <Font_1Bit_To_4Bit+0x1ac>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	68da      	ldr	r2, [r3, #12]
 8011c58:	4b05      	ldr	r3, [pc, #20]	; (8011c70 <Font_1Bit_To_4Bit+0x1ac>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2101      	movs	r1, #1
 8011c5e:	430a      	orrs	r2, r1
 8011c60:	60da      	str	r2, [r3, #12]


}
 8011c62:	46c0      	nop			; (mov r8, r8)
 8011c64:	46bd      	mov	sp, r7
 8011c66:	b007      	add	sp, #28
 8011c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c6a:	46c0      	nop			; (mov r8, r8)
 8011c6c:	200030b7 	.word	0x200030b7
 8011c70:	20003468 	.word	0x20003468
 8011c74:	50000800 	.word	0x50000800
 8011c78:	200033b4 	.word	0x200033b4

08011c7c <_1Bit_To_4Bit_16x32>:

static void _1Bit_To_4Bit_16x32(uint8_t* Pdata)
{
 8011c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c7e:	b0c7      	sub	sp, #284	; 0x11c
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]

	 uint8_t data_send_buffer[4*64]={0x00};
 8011c84:	4b9e      	ldr	r3, [pc, #632]	; (8011f00 <_1Bit_To_4Bit_16x32+0x284>)
 8011c86:	248c      	movs	r4, #140	; 0x8c
 8011c88:	0064      	lsls	r4, r4, #1
 8011c8a:	191b      	adds	r3, r3, r4
 8011c8c:	19db      	adds	r3, r3, r7
 8011c8e:	2200      	movs	r2, #0
 8011c90:	601a      	str	r2, [r3, #0]
 8011c92:	3304      	adds	r3, #4
 8011c94:	22fc      	movs	r2, #252	; 0xfc
 8011c96:	2100      	movs	r1, #0
 8011c98:	0018      	movs	r0, r3
 8011c9a:	f002 fa0e 	bl	80140ba <memset>
	 uint8_t mask=0x01;
 8011c9e:	2318      	movs	r3, #24
 8011ca0:	33ff      	adds	r3, #255	; 0xff
 8011ca2:	18fb      	adds	r3, r7, r3
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8011ca8:	4b96      	ldr	r3, [pc, #600]	; (8011f04 <_1Bit_To_4Bit_16x32+0x288>)
 8011caa:	191b      	adds	r3, r3, r4
 8011cac:	19db      	adds	r3, r3, r7
 8011cae:	2200      	movs	r2, #0
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<64;index++)
 8011cb6:	238b      	movs	r3, #139	; 0x8b
 8011cb8:	005b      	lsls	r3, r3, #1
 8011cba:	18fb      	adds	r3, r7, r3
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	701a      	strb	r2, [r3, #0]
 8011cc0:	e0e9      	b.n	8011e96 <_1Bit_To_4Bit_16x32+0x21a>
	 {
		 memset(&temp[0],0,8);
 8011cc2:	2308      	movs	r3, #8
 8011cc4:	18fb      	adds	r3, r7, r3
 8011cc6:	2208      	movs	r2, #8
 8011cc8:	2100      	movs	r1, #0
 8011cca:	0018      	movs	r0, r3
 8011ccc:	f002 f9f5 	bl	80140ba <memset>
		 mask=0x01;
 8011cd0:	2318      	movs	r3, #24
 8011cd2:	33ff      	adds	r3, #255	; 0xff
 8011cd4:	18fb      	adds	r3, r7, r3
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 8011cda:	2316      	movs	r3, #22
 8011cdc:	33ff      	adds	r3, #255	; 0xff
 8011cde:	18fb      	adds	r3, r7, r3
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	701a      	strb	r2, [r3, #0]
 8011ce4:	e04b      	b.n	8011d7e <_1Bit_To_4Bit_16x32+0x102>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 8011ce6:	238b      	movs	r3, #139	; 0x8b
 8011ce8:	005b      	lsls	r3, r3, #1
 8011cea:	18fb      	adds	r3, r7, r3
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	18d3      	adds	r3, r2, r3
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	2118      	movs	r1, #24
 8011cf6:	31ff      	adds	r1, #255	; 0xff
 8011cf8:	187a      	adds	r2, r7, r1
 8011cfa:	7812      	ldrb	r2, [r2, #0]
 8011cfc:	4013      	ands	r3, r2
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	187a      	adds	r2, r7, r1
 8011d02:	7812      	ldrb	r2, [r2, #0]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d114      	bne.n	8011d32 <_1Bit_To_4Bit_16x32+0xb6>
 8011d08:	2016      	movs	r0, #22
 8011d0a:	30ff      	adds	r0, #255	; 0xff
 8011d0c:	183b      	adds	r3, r7, r0
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	4a7c      	ldr	r2, [pc, #496]	; (8011f04 <_1Bit_To_4Bit_16x32+0x288>)
 8011d12:	248c      	movs	r4, #140	; 0x8c
 8011d14:	0064      	lsls	r4, r4, #1
 8011d16:	1912      	adds	r2, r2, r4
 8011d18:	19d2      	adds	r2, r2, r7
 8011d1a:	5cd1      	ldrb	r1, [r2, r3]
 8011d1c:	4b7a      	ldr	r3, [pc, #488]	; (8011f08 <_1Bit_To_4Bit_16x32+0x28c>)
 8011d1e:	781a      	ldrb	r2, [r3, #0]
 8011d20:	183b      	adds	r3, r7, r0
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	430a      	orrs	r2, r1
 8011d26:	b2d1      	uxtb	r1, r2
 8011d28:	4a76      	ldr	r2, [pc, #472]	; (8011f04 <_1Bit_To_4Bit_16x32+0x288>)
 8011d2a:	1912      	adds	r2, r2, r4
 8011d2c:	19d2      	adds	r2, r2, r7
 8011d2e:	54d1      	strb	r1, [r2, r3]
 8011d30:	e017      	b.n	8011d62 <_1Bit_To_4Bit_16x32+0xe6>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 8011d32:	2116      	movs	r1, #22
 8011d34:	31ff      	adds	r1, #255	; 0xff
 8011d36:	187b      	adds	r3, r7, r1
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	4a72      	ldr	r2, [pc, #456]	; (8011f04 <_1Bit_To_4Bit_16x32+0x288>)
 8011d3c:	208c      	movs	r0, #140	; 0x8c
 8011d3e:	0040      	lsls	r0, r0, #1
 8011d40:	1812      	adds	r2, r2, r0
 8011d42:	19d2      	adds	r2, r2, r7
 8011d44:	5cd3      	ldrb	r3, [r2, r3]
 8011d46:	b25b      	sxtb	r3, r3
 8011d48:	4a6f      	ldr	r2, [pc, #444]	; (8011f08 <_1Bit_To_4Bit_16x32+0x28c>)
 8011d4a:	7812      	ldrb	r2, [r2, #0]
 8011d4c:	0112      	lsls	r2, r2, #4
 8011d4e:	b252      	sxtb	r2, r2
 8011d50:	4013      	ands	r3, r2
 8011d52:	b25a      	sxtb	r2, r3
 8011d54:	187b      	adds	r3, r7, r1
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	b2d1      	uxtb	r1, r2
 8011d5a:	4a6a      	ldr	r2, [pc, #424]	; (8011f04 <_1Bit_To_4Bit_16x32+0x288>)
 8011d5c:	1812      	adds	r2, r2, r0
 8011d5e:	19d2      	adds	r2, r2, r7
 8011d60:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 8011d62:	2318      	movs	r3, #24
 8011d64:	33ff      	adds	r3, #255	; 0xff
 8011d66:	18fa      	adds	r2, r7, r3
 8011d68:	18fb      	adds	r3, r7, r3
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	18db      	adds	r3, r3, r3
 8011d6e:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 8011d70:	2116      	movs	r1, #22
 8011d72:	31ff      	adds	r1, #255	; 0xff
 8011d74:	187b      	adds	r3, r7, r1
 8011d76:	781a      	ldrb	r2, [r3, #0]
 8011d78:	187b      	adds	r3, r7, r1
 8011d7a:	3201      	adds	r2, #1
 8011d7c:	701a      	strb	r2, [r3, #0]
 8011d7e:	2316      	movs	r3, #22
 8011d80:	33ff      	adds	r3, #255	; 0xff
 8011d82:	18fb      	adds	r3, r7, r3
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	2b07      	cmp	r3, #7
 8011d88:	d9ad      	bls.n	8011ce6 <_1Bit_To_4Bit_16x32+0x6a>

		 }

		 mask=0x0f;
 8011d8a:	2318      	movs	r3, #24
 8011d8c:	33ff      	adds	r3, #255	; 0xff
 8011d8e:	18fb      	adds	r3, r7, r3
 8011d90:	220f      	movs	r2, #15
 8011d92:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 8011d94:	238a      	movs	r3, #138	; 0x8a
 8011d96:	005b      	lsls	r3, r3, #1
 8011d98:	18fb      	adds	r3, r7, r3
 8011d9a:	2203      	movs	r2, #3
 8011d9c:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8011d9e:	2314      	movs	r3, #20
 8011da0:	33ff      	adds	r3, #255	; 0xff
 8011da2:	18fb      	adds	r3, r7, r3
 8011da4:	2200      	movs	r2, #0
 8011da6:	701a      	strb	r2, [r3, #0]
 8011da8:	e068      	b.n	8011e7c <_1Bit_To_4Bit_16x32+0x200>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 8011daa:	208a      	movs	r0, #138	; 0x8a
 8011dac:	0040      	lsls	r0, r0, #1
 8011dae:	183b      	adds	r3, r7, r0
 8011db0:	781a      	ldrb	r2, [r3, #0]
 8011db2:	238b      	movs	r3, #139	; 0x8b
 8011db4:	005b      	lsls	r3, r3, #1
 8011db6:	18fb      	adds	r3, r7, r3
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	18d3      	adds	r3, r2, r3
 8011dbe:	4a50      	ldr	r2, [pc, #320]	; (8011f00 <_1Bit_To_4Bit_16x32+0x284>)
 8011dc0:	258c      	movs	r5, #140	; 0x8c
 8011dc2:	006d      	lsls	r5, r5, #1
 8011dc4:	1952      	adds	r2, r2, r5
 8011dc6:	19d2      	adds	r2, r2, r7
 8011dc8:	5cd1      	ldrb	r1, [r2, r3]
 8011dca:	2614      	movs	r6, #20
 8011dcc:	36ff      	adds	r6, #255	; 0xff
 8011dce:	19bb      	adds	r3, r7, r6
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	4a4c      	ldr	r2, [pc, #304]	; (8011f04 <_1Bit_To_4Bit_16x32+0x288>)
 8011dd4:	1952      	adds	r2, r2, r5
 8011dd6:	19d2      	adds	r2, r2, r7
 8011dd8:	5cd3      	ldrb	r3, [r2, r3]
 8011dda:	2218      	movs	r2, #24
 8011ddc:	32ff      	adds	r2, #255	; 0xff
 8011dde:	18ba      	adds	r2, r7, r2
 8011de0:	7812      	ldrb	r2, [r2, #0]
 8011de2:	4013      	ands	r3, r2
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	0004      	movs	r4, r0
 8011de8:	183b      	adds	r3, r7, r0
 8011dea:	7818      	ldrb	r0, [r3, #0]
 8011dec:	238b      	movs	r3, #139	; 0x8b
 8011dee:	005b      	lsls	r3, r3, #1
 8011df0:	18fb      	adds	r3, r7, r3
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	18c3      	adds	r3, r0, r3
 8011df8:	430a      	orrs	r2, r1
 8011dfa:	b2d1      	uxtb	r1, r2
 8011dfc:	4a40      	ldr	r2, [pc, #256]	; (8011f00 <_1Bit_To_4Bit_16x32+0x284>)
 8011dfe:	1950      	adds	r0, r2, r5
 8011e00:	19c2      	adds	r2, r0, r7
 8011e02:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8011e04:	0020      	movs	r0, r4
 8011e06:	183b      	adds	r3, r7, r0
 8011e08:	781a      	ldrb	r2, [r3, #0]
 8011e0a:	238b      	movs	r3, #139	; 0x8b
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	18fb      	adds	r3, r7, r3
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	18d3      	adds	r3, r2, r3
 8011e16:	4a3a      	ldr	r2, [pc, #232]	; (8011f00 <_1Bit_To_4Bit_16x32+0x284>)
 8011e18:	1954      	adds	r4, r2, r5
 8011e1a:	19e2      	adds	r2, r4, r7
 8011e1c:	5cd3      	ldrb	r3, [r2, r3]
 8011e1e:	b25a      	sxtb	r2, r3
 8011e20:	19bb      	adds	r3, r7, r6
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	3301      	adds	r3, #1
 8011e26:	4937      	ldr	r1, [pc, #220]	; (8011f04 <_1Bit_To_4Bit_16x32+0x288>)
 8011e28:	002c      	movs	r4, r5
 8011e2a:	194d      	adds	r5, r1, r5
 8011e2c:	19e9      	adds	r1, r5, r7
 8011e2e:	5ccb      	ldrb	r3, [r1, r3]
 8011e30:	2118      	movs	r1, #24
 8011e32:	31ff      	adds	r1, #255	; 0xff
 8011e34:	1879      	adds	r1, r7, r1
 8011e36:	7809      	ldrb	r1, [r1, #0]
 8011e38:	400b      	ands	r3, r1
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	011b      	lsls	r3, r3, #4
 8011e3e:	b25b      	sxtb	r3, r3
 8011e40:	4313      	orrs	r3, r2
 8011e42:	b259      	sxtb	r1, r3
 8011e44:	183b      	adds	r3, r7, r0
 8011e46:	781a      	ldrb	r2, [r3, #0]
 8011e48:	238b      	movs	r3, #139	; 0x8b
 8011e4a:	005b      	lsls	r3, r3, #1
 8011e4c:	18fb      	adds	r3, r7, r3
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	009b      	lsls	r3, r3, #2
 8011e52:	18d3      	adds	r3, r2, r3
 8011e54:	b2c9      	uxtb	r1, r1
 8011e56:	4a2a      	ldr	r2, [pc, #168]	; (8011f00 <_1Bit_To_4Bit_16x32+0x284>)
 8011e58:	1912      	adds	r2, r2, r4
 8011e5a:	19d2      	adds	r2, r2, r7
 8011e5c:	54d1      	strb	r1, [r2, r3]
			 j++;
 8011e5e:	19bb      	adds	r3, r7, r6
 8011e60:	781a      	ldrb	r2, [r3, #0]
 8011e62:	19bb      	adds	r3, r7, r6
 8011e64:	3201      	adds	r2, #1
 8011e66:	701a      	strb	r2, [r3, #0]
			 j++;
 8011e68:	19bb      	adds	r3, r7, r6
 8011e6a:	781a      	ldrb	r2, [r3, #0]
 8011e6c:	19bb      	adds	r3, r7, r6
 8011e6e:	3201      	adds	r2, #1
 8011e70:	701a      	strb	r2, [r3, #0]
			 k--;
 8011e72:	183b      	adds	r3, r7, r0
 8011e74:	781a      	ldrb	r2, [r3, #0]
 8011e76:	183b      	adds	r3, r7, r0
 8011e78:	3a01      	subs	r2, #1
 8011e7a:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8011e7c:	2314      	movs	r3, #20
 8011e7e:	33ff      	adds	r3, #255	; 0xff
 8011e80:	18fb      	adds	r3, r7, r3
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	2b07      	cmp	r3, #7
 8011e86:	d990      	bls.n	8011daa <_1Bit_To_4Bit_16x32+0x12e>
	 for(uint8_t index=0;index<64;index++)
 8011e88:	218b      	movs	r1, #139	; 0x8b
 8011e8a:	0049      	lsls	r1, r1, #1
 8011e8c:	187b      	adds	r3, r7, r1
 8011e8e:	781a      	ldrb	r2, [r3, #0]
 8011e90:	187b      	adds	r3, r7, r1
 8011e92:	3201      	adds	r2, #1
 8011e94:	701a      	strb	r2, [r3, #0]
 8011e96:	238b      	movs	r3, #139	; 0x8b
 8011e98:	005b      	lsls	r3, r3, #1
 8011e9a:	18fb      	adds	r3, r7, r3
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	2b3f      	cmp	r3, #63	; 0x3f
 8011ea0:	d800      	bhi.n	8011ea4 <_1Bit_To_4Bit_16x32+0x228>
 8011ea2:	e70e      	b.n	8011cc2 <_1Bit_To_4Bit_16x32+0x46>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011ea4:	4b19      	ldr	r3, [pc, #100]	; (8011f0c <_1Bit_To_4Bit_16x32+0x290>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	68da      	ldr	r2, [r3, #12]
 8011eaa:	4b18      	ldr	r3, [pc, #96]	; (8011f0c <_1Bit_To_4Bit_16x32+0x290>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2101      	movs	r1, #1
 8011eb0:	438a      	bics	r2, r1
 8011eb2:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011eb4:	4b16      	ldr	r3, [pc, #88]	; (8011f10 <_1Bit_To_4Bit_16x32+0x294>)
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	2102      	movs	r1, #2
 8011eba:	0018      	movs	r0, r3
 8011ebc:	f7f5 f845 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011ec0:	4b13      	ldr	r3, [pc, #76]	; (8011f10 <_1Bit_To_4Bit_16x32+0x294>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	0018      	movs	r0, r3
 8011ec8:	f7f5 f83f 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*64,100);
 8011ecc:	2380      	movs	r3, #128	; 0x80
 8011ece:	005a      	lsls	r2, r3, #1
 8011ed0:	2310      	movs	r3, #16
 8011ed2:	18f9      	adds	r1, r7, r3
 8011ed4:	480f      	ldr	r0, [pc, #60]	; (8011f14 <_1Bit_To_4Bit_16x32+0x298>)
 8011ed6:	2364      	movs	r3, #100	; 0x64
 8011ed8:	f7f5 ff46 	bl	8007d68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011edc:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <_1Bit_To_4Bit_16x32+0x294>)
 8011ede:	2201      	movs	r2, #1
 8011ee0:	2101      	movs	r1, #1
 8011ee2:	0018      	movs	r0, r3
 8011ee4:	f7f5 f831 	bl	8006f4a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011ee8:	4b08      	ldr	r3, [pc, #32]	; (8011f0c <_1Bit_To_4Bit_16x32+0x290>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	68da      	ldr	r2, [r3, #12]
 8011eee:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <_1Bit_To_4Bit_16x32+0x290>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	430a      	orrs	r2, r1
 8011ef6:	60da      	str	r2, [r3, #12]


}
 8011ef8:	46c0      	nop			; (mov r8, r8)
 8011efa:	46bd      	mov	sp, r7
 8011efc:	b047      	add	sp, #284	; 0x11c
 8011efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f00:	fffffef8 	.word	0xfffffef8
 8011f04:	fffffef0 	.word	0xfffffef0
 8011f08:	200030b7 	.word	0x200030b7
 8011f0c:	20003468 	.word	0x20003468
 8011f10:	50000800 	.word	0x50000800
 8011f14:	200033b4 	.word	0x200033b4

08011f18 <_1Bit_To_4Bit_8x16>:

static void _1Bit_To_4Bit_8x16(uint8_t* Pdata)
{
 8011f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f1a:	b097      	sub	sp, #92	; 0x5c
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
	 uint8_t data_send_buffer[4*16]={0x00};
 8011f20:	2310      	movs	r3, #16
 8011f22:	18fb      	adds	r3, r7, r3
 8011f24:	2200      	movs	r2, #0
 8011f26:	601a      	str	r2, [r3, #0]
 8011f28:	3304      	adds	r3, #4
 8011f2a:	223c      	movs	r2, #60	; 0x3c
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	0018      	movs	r0, r3
 8011f30:	f002 f8c3 	bl	80140ba <memset>
	 uint8_t mask=0x01;
 8011f34:	2357      	movs	r3, #87	; 0x57
 8011f36:	18fb      	adds	r3, r7, r3
 8011f38:	2201      	movs	r2, #1
 8011f3a:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8011f3c:	2308      	movs	r3, #8
 8011f3e:	18fb      	adds	r3, r7, r3
 8011f40:	2200      	movs	r2, #0
 8011f42:	601a      	str	r2, [r3, #0]
 8011f44:	2200      	movs	r2, #0
 8011f46:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<16;index++)
 8011f48:	2356      	movs	r3, #86	; 0x56
 8011f4a:	18fb      	adds	r3, r7, r3
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	701a      	strb	r2, [r3, #0]
 8011f50:	e0bd      	b.n	80120ce <_1Bit_To_4Bit_8x16+0x1b6>
	 {
		 memset(&temp[0],0,8);
 8011f52:	2308      	movs	r3, #8
 8011f54:	18fb      	adds	r3, r7, r3
 8011f56:	2208      	movs	r2, #8
 8011f58:	2100      	movs	r1, #0
 8011f5a:	0018      	movs	r0, r3
 8011f5c:	f002 f8ad 	bl	80140ba <memset>
		 mask=0x01;
 8011f60:	2357      	movs	r3, #87	; 0x57
 8011f62:	18fb      	adds	r3, r7, r3
 8011f64:	2201      	movs	r2, #1
 8011f66:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 8011f68:	2355      	movs	r3, #85	; 0x55
 8011f6a:	18fb      	adds	r3, r7, r3
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	701a      	strb	r2, [r3, #0]
 8011f70:	e03b      	b.n	8011fea <_1Bit_To_4Bit_8x16+0xd2>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 8011f72:	2356      	movs	r3, #86	; 0x56
 8011f74:	18fb      	adds	r3, r7, r3
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	18d3      	adds	r3, r2, r3
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	2157      	movs	r1, #87	; 0x57
 8011f80:	187a      	adds	r2, r7, r1
 8011f82:	7812      	ldrb	r2, [r2, #0]
 8011f84:	4013      	ands	r3, r2
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	187a      	adds	r2, r7, r1
 8011f8a:	7812      	ldrb	r2, [r2, #0]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d10e      	bne.n	8011fae <_1Bit_To_4Bit_8x16+0x96>
 8011f90:	2055      	movs	r0, #85	; 0x55
 8011f92:	183b      	adds	r3, r7, r0
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	2408      	movs	r4, #8
 8011f98:	193a      	adds	r2, r7, r4
 8011f9a:	5cd1      	ldrb	r1, [r2, r3]
 8011f9c:	4b65      	ldr	r3, [pc, #404]	; (8012134 <_1Bit_To_4Bit_8x16+0x21c>)
 8011f9e:	781a      	ldrb	r2, [r3, #0]
 8011fa0:	183b      	adds	r3, r7, r0
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	430a      	orrs	r2, r1
 8011fa6:	b2d1      	uxtb	r1, r2
 8011fa8:	193a      	adds	r2, r7, r4
 8011faa:	54d1      	strb	r1, [r2, r3]
 8011fac:	e011      	b.n	8011fd2 <_1Bit_To_4Bit_8x16+0xba>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 8011fae:	2155      	movs	r1, #85	; 0x55
 8011fb0:	187b      	adds	r3, r7, r1
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	2008      	movs	r0, #8
 8011fb6:	183a      	adds	r2, r7, r0
 8011fb8:	5cd3      	ldrb	r3, [r2, r3]
 8011fba:	b25b      	sxtb	r3, r3
 8011fbc:	4a5d      	ldr	r2, [pc, #372]	; (8012134 <_1Bit_To_4Bit_8x16+0x21c>)
 8011fbe:	7812      	ldrb	r2, [r2, #0]
 8011fc0:	0112      	lsls	r2, r2, #4
 8011fc2:	b252      	sxtb	r2, r2
 8011fc4:	4013      	ands	r3, r2
 8011fc6:	b25a      	sxtb	r2, r3
 8011fc8:	187b      	adds	r3, r7, r1
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	b2d1      	uxtb	r1, r2
 8011fce:	183a      	adds	r2, r7, r0
 8011fd0:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 8011fd2:	2357      	movs	r3, #87	; 0x57
 8011fd4:	18fa      	adds	r2, r7, r3
 8011fd6:	18fb      	adds	r3, r7, r3
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	18db      	adds	r3, r3, r3
 8011fdc:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 8011fde:	2155      	movs	r1, #85	; 0x55
 8011fe0:	187b      	adds	r3, r7, r1
 8011fe2:	781a      	ldrb	r2, [r3, #0]
 8011fe4:	187b      	adds	r3, r7, r1
 8011fe6:	3201      	adds	r2, #1
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	2355      	movs	r3, #85	; 0x55
 8011fec:	18fb      	adds	r3, r7, r3
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	2b07      	cmp	r3, #7
 8011ff2:	d9be      	bls.n	8011f72 <_1Bit_To_4Bit_8x16+0x5a>

		 }

		 mask=0x0f;
 8011ff4:	2357      	movs	r3, #87	; 0x57
 8011ff6:	18fb      	adds	r3, r7, r3
 8011ff8:	220f      	movs	r2, #15
 8011ffa:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 8011ffc:	2354      	movs	r3, #84	; 0x54
 8011ffe:	18fb      	adds	r3, r7, r3
 8012000:	2203      	movs	r2, #3
 8012002:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8012004:	2353      	movs	r3, #83	; 0x53
 8012006:	18fb      	adds	r3, r7, r3
 8012008:	2200      	movs	r2, #0
 801200a:	701a      	strb	r2, [r3, #0]
 801200c:	e054      	b.n	80120b8 <_1Bit_To_4Bit_8x16+0x1a0>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 801200e:	2054      	movs	r0, #84	; 0x54
 8012010:	183b      	adds	r3, r7, r0
 8012012:	781a      	ldrb	r2, [r3, #0]
 8012014:	2656      	movs	r6, #86	; 0x56
 8012016:	19bb      	adds	r3, r7, r6
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	18d3      	adds	r3, r2, r3
 801201e:	2210      	movs	r2, #16
 8012020:	18ba      	adds	r2, r7, r2
 8012022:	5cd1      	ldrb	r1, [r2, r3]
 8012024:	2553      	movs	r5, #83	; 0x53
 8012026:	197b      	adds	r3, r7, r5
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	2408      	movs	r4, #8
 801202c:	193a      	adds	r2, r7, r4
 801202e:	5cd3      	ldrb	r3, [r2, r3]
 8012030:	2457      	movs	r4, #87	; 0x57
 8012032:	193a      	adds	r2, r7, r4
 8012034:	7812      	ldrb	r2, [r2, #0]
 8012036:	4013      	ands	r3, r2
 8012038:	b2da      	uxtb	r2, r3
 801203a:	0004      	movs	r4, r0
 801203c:	183b      	adds	r3, r7, r0
 801203e:	7818      	ldrb	r0, [r3, #0]
 8012040:	19bb      	adds	r3, r7, r6
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	009b      	lsls	r3, r3, #2
 8012046:	18c3      	adds	r3, r0, r3
 8012048:	430a      	orrs	r2, r1
 801204a:	b2d1      	uxtb	r1, r2
 801204c:	2210      	movs	r2, #16
 801204e:	18ba      	adds	r2, r7, r2
 8012050:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8012052:	0020      	movs	r0, r4
 8012054:	183b      	adds	r3, r7, r0
 8012056:	781a      	ldrb	r2, [r3, #0]
 8012058:	0034      	movs	r4, r6
 801205a:	19bb      	adds	r3, r7, r6
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	18d3      	adds	r3, r2, r3
 8012062:	2610      	movs	r6, #16
 8012064:	19ba      	adds	r2, r7, r6
 8012066:	5cd3      	ldrb	r3, [r2, r3]
 8012068:	b25a      	sxtb	r2, r3
 801206a:	197b      	adds	r3, r7, r5
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	3301      	adds	r3, #1
 8012070:	2108      	movs	r1, #8
 8012072:	1879      	adds	r1, r7, r1
 8012074:	5ccb      	ldrb	r3, [r1, r3]
 8012076:	2157      	movs	r1, #87	; 0x57
 8012078:	1879      	adds	r1, r7, r1
 801207a:	7809      	ldrb	r1, [r1, #0]
 801207c:	400b      	ands	r3, r1
 801207e:	b2db      	uxtb	r3, r3
 8012080:	011b      	lsls	r3, r3, #4
 8012082:	b25b      	sxtb	r3, r3
 8012084:	4313      	orrs	r3, r2
 8012086:	b259      	sxtb	r1, r3
 8012088:	183b      	adds	r3, r7, r0
 801208a:	781a      	ldrb	r2, [r3, #0]
 801208c:	193b      	adds	r3, r7, r4
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	009b      	lsls	r3, r3, #2
 8012092:	18d3      	adds	r3, r2, r3
 8012094:	b2c9      	uxtb	r1, r1
 8012096:	19ba      	adds	r2, r7, r6
 8012098:	54d1      	strb	r1, [r2, r3]
			 j++;
 801209a:	197b      	adds	r3, r7, r5
 801209c:	781a      	ldrb	r2, [r3, #0]
 801209e:	197b      	adds	r3, r7, r5
 80120a0:	3201      	adds	r2, #1
 80120a2:	701a      	strb	r2, [r3, #0]
			 j++;
 80120a4:	197b      	adds	r3, r7, r5
 80120a6:	781a      	ldrb	r2, [r3, #0]
 80120a8:	197b      	adds	r3, r7, r5
 80120aa:	3201      	adds	r2, #1
 80120ac:	701a      	strb	r2, [r3, #0]
			 k--;
 80120ae:	183b      	adds	r3, r7, r0
 80120b0:	781a      	ldrb	r2, [r3, #0]
 80120b2:	183b      	adds	r3, r7, r0
 80120b4:	3a01      	subs	r2, #1
 80120b6:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 80120b8:	2353      	movs	r3, #83	; 0x53
 80120ba:	18fb      	adds	r3, r7, r3
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	2b07      	cmp	r3, #7
 80120c0:	d9a5      	bls.n	801200e <_1Bit_To_4Bit_8x16+0xf6>
	 for(uint8_t index=0;index<16;index++)
 80120c2:	2156      	movs	r1, #86	; 0x56
 80120c4:	187b      	adds	r3, r7, r1
 80120c6:	781a      	ldrb	r2, [r3, #0]
 80120c8:	187b      	adds	r3, r7, r1
 80120ca:	3201      	adds	r2, #1
 80120cc:	701a      	strb	r2, [r3, #0]
 80120ce:	2356      	movs	r3, #86	; 0x56
 80120d0:	18fb      	adds	r3, r7, r3
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	2b0f      	cmp	r3, #15
 80120d6:	d800      	bhi.n	80120da <_1Bit_To_4Bit_8x16+0x1c2>
 80120d8:	e73b      	b.n	8011f52 <_1Bit_To_4Bit_8x16+0x3a>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80120da:	4b17      	ldr	r3, [pc, #92]	; (8012138 <_1Bit_To_4Bit_8x16+0x220>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	68da      	ldr	r2, [r3, #12]
 80120e0:	4b15      	ldr	r3, [pc, #84]	; (8012138 <_1Bit_To_4Bit_8x16+0x220>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2101      	movs	r1, #1
 80120e6:	438a      	bics	r2, r1
 80120e8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 80120ea:	4b14      	ldr	r3, [pc, #80]	; (801213c <_1Bit_To_4Bit_8x16+0x224>)
 80120ec:	2201      	movs	r2, #1
 80120ee:	2102      	movs	r1, #2
 80120f0:	0018      	movs	r0, r3
 80120f2:	f7f4 ff2a 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 80120f6:	4b11      	ldr	r3, [pc, #68]	; (801213c <_1Bit_To_4Bit_8x16+0x224>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	2101      	movs	r1, #1
 80120fc:	0018      	movs	r0, r3
 80120fe:	f7f4 ff24 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*16,100);
 8012102:	2310      	movs	r3, #16
 8012104:	18f9      	adds	r1, r7, r3
 8012106:	480e      	ldr	r0, [pc, #56]	; (8012140 <_1Bit_To_4Bit_8x16+0x228>)
 8012108:	2364      	movs	r3, #100	; 0x64
 801210a:	2240      	movs	r2, #64	; 0x40
 801210c:	f7f5 fe2c 	bl	8007d68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8012110:	4b0a      	ldr	r3, [pc, #40]	; (801213c <_1Bit_To_4Bit_8x16+0x224>)
 8012112:	2201      	movs	r2, #1
 8012114:	2101      	movs	r1, #1
 8012116:	0018      	movs	r0, r3
 8012118:	f7f4 ff17 	bl	8006f4a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 801211c:	4b06      	ldr	r3, [pc, #24]	; (8012138 <_1Bit_To_4Bit_8x16+0x220>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	68da      	ldr	r2, [r3, #12]
 8012122:	4b05      	ldr	r3, [pc, #20]	; (8012138 <_1Bit_To_4Bit_8x16+0x220>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2101      	movs	r1, #1
 8012128:	430a      	orrs	r2, r1
 801212a:	60da      	str	r2, [r3, #12]

}
 801212c:	46c0      	nop			; (mov r8, r8)
 801212e:	46bd      	mov	sp, r7
 8012130:	b017      	add	sp, #92	; 0x5c
 8012132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012134:	200030b7 	.word	0x200030b7
 8012138:	20003468 	.word	0x20003468
 801213c:	50000800 	.word	0x50000800
 8012140:	200033b4 	.word	0x200033b4

08012144 <Font_1Bit_To_4Bit_12x24>:
 * @brief  12x24专用的转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据
 * @retval None
 */
void Font_1Bit_To_4Bit_12x24(uint8_t Data0, uint8_t Data1)
{
 8012144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012146:	b08d      	sub	sp, #52	; 0x34
 8012148:	af00      	add	r7, sp, #0
 801214a:	0002      	movs	r2, r0
 801214c:	1dfb      	adds	r3, r7, #7
 801214e:	701a      	strb	r2, [r3, #0]
 8012150:	1dbb      	adds	r3, r7, #6
 8012152:	1c0a      	adds	r2, r1, #0
 8012154:	701a      	strb	r2, [r3, #0]

	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 /*8位data0*/
	 uint8_t mask=0x01;
 8012156:	232f      	movs	r3, #47	; 0x2f
 8012158:	18fb      	adds	r3, r7, r3
 801215a:	2201      	movs	r2, #1
 801215c:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 801215e:	2318      	movs	r3, #24
 8012160:	18fb      	adds	r3, r7, r3
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]
 8012166:	2200      	movs	r2, #0
 8012168:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 801216a:	2314      	movs	r3, #20
 801216c:	18fb      	adds	r3, r7, r3
 801216e:	2200      	movs	r2, #0
 8012170:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 8012172:	232e      	movs	r3, #46	; 0x2e
 8012174:	18fb      	adds	r3, r7, r3
 8012176:	2200      	movs	r2, #0
 8012178:	701a      	strb	r2, [r3, #0]
 801217a:	e037      	b.n	80121ec <Font_1Bit_To_4Bit_12x24+0xa8>
	 {
		 if((Data0&mask)==mask) temp[i]|=Light;//low 4 bits set
 801217c:	1dfb      	adds	r3, r7, #7
 801217e:	212f      	movs	r1, #47	; 0x2f
 8012180:	187a      	adds	r2, r7, r1
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	7812      	ldrb	r2, [r2, #0]
 8012186:	4013      	ands	r3, r2
 8012188:	b2db      	uxtb	r3, r3
 801218a:	187a      	adds	r2, r7, r1
 801218c:	7812      	ldrb	r2, [r2, #0]
 801218e:	429a      	cmp	r2, r3
 8012190:	d10e      	bne.n	80121b0 <Font_1Bit_To_4Bit_12x24+0x6c>
 8012192:	202e      	movs	r0, #46	; 0x2e
 8012194:	183b      	adds	r3, r7, r0
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	2418      	movs	r4, #24
 801219a:	193a      	adds	r2, r7, r4
 801219c:	5cd1      	ldrb	r1, [r2, r3]
 801219e:	4ba0      	ldr	r3, [pc, #640]	; (8012420 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 80121a0:	781a      	ldrb	r2, [r3, #0]
 80121a2:	183b      	adds	r3, r7, r0
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	430a      	orrs	r2, r1
 80121a8:	b2d1      	uxtb	r1, r2
 80121aa:	193a      	adds	r2, r7, r4
 80121ac:	54d1      	strb	r1, [r2, r3]
 80121ae:	e011      	b.n	80121d4 <Font_1Bit_To_4Bit_12x24+0x90>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 80121b0:	212e      	movs	r1, #46	; 0x2e
 80121b2:	187b      	adds	r3, r7, r1
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	2018      	movs	r0, #24
 80121b8:	183a      	adds	r2, r7, r0
 80121ba:	5cd3      	ldrb	r3, [r2, r3]
 80121bc:	b25b      	sxtb	r3, r3
 80121be:	4a98      	ldr	r2, [pc, #608]	; (8012420 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 80121c0:	7812      	ldrb	r2, [r2, #0]
 80121c2:	0112      	lsls	r2, r2, #4
 80121c4:	b252      	sxtb	r2, r2
 80121c6:	4013      	ands	r3, r2
 80121c8:	b25a      	sxtb	r2, r3
 80121ca:	187b      	adds	r3, r7, r1
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	b2d1      	uxtb	r1, r2
 80121d0:	183a      	adds	r2, r7, r0
 80121d2:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 80121d4:	232f      	movs	r3, #47	; 0x2f
 80121d6:	18fa      	adds	r2, r7, r3
 80121d8:	18fb      	adds	r3, r7, r3
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	18db      	adds	r3, r3, r3
 80121de:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 80121e0:	212e      	movs	r1, #46	; 0x2e
 80121e2:	187b      	adds	r3, r7, r1
 80121e4:	781a      	ldrb	r2, [r3, #0]
 80121e6:	187b      	adds	r3, r7, r1
 80121e8:	3201      	adds	r2, #1
 80121ea:	701a      	strb	r2, [r3, #0]
 80121ec:	232e      	movs	r3, #46	; 0x2e
 80121ee:	18fb      	adds	r3, r7, r3
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	2b07      	cmp	r3, #7
 80121f4:	d9c2      	bls.n	801217c <Font_1Bit_To_4Bit_12x24+0x38>

	 }
	 mask=0x0f;
 80121f6:	232f      	movs	r3, #47	; 0x2f
 80121f8:	18fb      	adds	r3, r7, r3
 80121fa:	220f      	movs	r2, #15
 80121fc:	701a      	strb	r2, [r3, #0]
	 uint8_t index=0;
 80121fe:	232d      	movs	r3, #45	; 0x2d
 8012200:	18fb      	adds	r3, r7, r3
 8012202:	2200      	movs	r2, #0
 8012204:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8012206:	232c      	movs	r3, #44	; 0x2c
 8012208:	18fb      	adds	r3, r7, r3
 801220a:	2200      	movs	r2, #0
 801220c:	701a      	strb	r2, [r3, #0]
 801220e:	e03d      	b.n	801228c <Font_1Bit_To_4Bit_12x24+0x148>
	 {
		 data_send[index]|=(temp[j]&mask);
 8012210:	202d      	movs	r0, #45	; 0x2d
 8012212:	183b      	adds	r3, r7, r0
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	2514      	movs	r5, #20
 8012218:	197a      	adds	r2, r7, r5
 801221a:	5cd1      	ldrb	r1, [r2, r3]
 801221c:	242c      	movs	r4, #44	; 0x2c
 801221e:	193b      	adds	r3, r7, r4
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	2618      	movs	r6, #24
 8012224:	19ba      	adds	r2, r7, r6
 8012226:	5cd3      	ldrb	r3, [r2, r3]
 8012228:	222f      	movs	r2, #47	; 0x2f
 801222a:	18ba      	adds	r2, r7, r2
 801222c:	7812      	ldrb	r2, [r2, #0]
 801222e:	4013      	ands	r3, r2
 8012230:	b2da      	uxtb	r2, r3
 8012232:	183b      	adds	r3, r7, r0
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	430a      	orrs	r2, r1
 8012238:	b2d1      	uxtb	r1, r2
 801223a:	197a      	adds	r2, r7, r5
 801223c:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);
 801223e:	183b      	adds	r3, r7, r0
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	197a      	adds	r2, r7, r5
 8012244:	5cd3      	ldrb	r3, [r2, r3]
 8012246:	b25a      	sxtb	r2, r3
 8012248:	193b      	adds	r3, r7, r4
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	3301      	adds	r3, #1
 801224e:	19b9      	adds	r1, r7, r6
 8012250:	5ccb      	ldrb	r3, [r1, r3]
 8012252:	212f      	movs	r1, #47	; 0x2f
 8012254:	1879      	adds	r1, r7, r1
 8012256:	7809      	ldrb	r1, [r1, #0]
 8012258:	400b      	ands	r3, r1
 801225a:	b2db      	uxtb	r3, r3
 801225c:	011b      	lsls	r3, r3, #4
 801225e:	b25b      	sxtb	r3, r3
 8012260:	4313      	orrs	r3, r2
 8012262:	b25a      	sxtb	r2, r3
 8012264:	183b      	adds	r3, r7, r0
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	b2d1      	uxtb	r1, r2
 801226a:	197a      	adds	r2, r7, r5
 801226c:	54d1      	strb	r1, [r2, r3]
		 j++;
 801226e:	193b      	adds	r3, r7, r4
 8012270:	781a      	ldrb	r2, [r3, #0]
 8012272:	193b      	adds	r3, r7, r4
 8012274:	3201      	adds	r2, #1
 8012276:	701a      	strb	r2, [r3, #0]
		 j++;
 8012278:	193b      	adds	r3, r7, r4
 801227a:	781a      	ldrb	r2, [r3, #0]
 801227c:	193b      	adds	r3, r7, r4
 801227e:	3201      	adds	r2, #1
 8012280:	701a      	strb	r2, [r3, #0]
		 index++;
 8012282:	183b      	adds	r3, r7, r0
 8012284:	781a      	ldrb	r2, [r3, #0]
 8012286:	183b      	adds	r3, r7, r0
 8012288:	3201      	adds	r2, #1
 801228a:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 801228c:	232c      	movs	r3, #44	; 0x2c
 801228e:	18fb      	adds	r3, r7, r3
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	2b07      	cmp	r3, #7
 8012294:	d9bc      	bls.n	8012210 <Font_1Bit_To_4Bit_12x24+0xcc>

	 }
	 /*高四位data1*/
	 mask=0x10;
 8012296:	232f      	movs	r3, #47	; 0x2f
 8012298:	18fb      	adds	r3, r7, r3
 801229a:	2210      	movs	r2, #16
 801229c:	701a      	strb	r2, [r3, #0]
	 uint8_t temp1[4]={0x00};
 801229e:	2310      	movs	r3, #16
 80122a0:	18fb      	adds	r3, r7, r3
 80122a2:	2200      	movs	r2, #0
 80122a4:	601a      	str	r2, [r3, #0]
	 uint8_t data_send1[2]={0x00};
 80122a6:	230c      	movs	r3, #12
 80122a8:	18fb      	adds	r3, r7, r3
 80122aa:	2200      	movs	r2, #0
 80122ac:	801a      	strh	r2, [r3, #0]
	 for(uint8_t i=0;i<4;i++)
 80122ae:	232b      	movs	r3, #43	; 0x2b
 80122b0:	18fb      	adds	r3, r7, r3
 80122b2:	2200      	movs	r2, #0
 80122b4:	701a      	strb	r2, [r3, #0]
 80122b6:	e037      	b.n	8012328 <Font_1Bit_To_4Bit_12x24+0x1e4>
	 {
		 if((Data1&mask)==mask) temp1[i]|=Light;//low 4 bits set
 80122b8:	1dbb      	adds	r3, r7, #6
 80122ba:	212f      	movs	r1, #47	; 0x2f
 80122bc:	187a      	adds	r2, r7, r1
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	7812      	ldrb	r2, [r2, #0]
 80122c2:	4013      	ands	r3, r2
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	187a      	adds	r2, r7, r1
 80122c8:	7812      	ldrb	r2, [r2, #0]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d10e      	bne.n	80122ec <Font_1Bit_To_4Bit_12x24+0x1a8>
 80122ce:	202b      	movs	r0, #43	; 0x2b
 80122d0:	183b      	adds	r3, r7, r0
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	2410      	movs	r4, #16
 80122d6:	193a      	adds	r2, r7, r4
 80122d8:	5cd1      	ldrb	r1, [r2, r3]
 80122da:	4b51      	ldr	r3, [pc, #324]	; (8012420 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 80122dc:	781a      	ldrb	r2, [r3, #0]
 80122de:	183b      	adds	r3, r7, r0
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	430a      	orrs	r2, r1
 80122e4:	b2d1      	uxtb	r1, r2
 80122e6:	193a      	adds	r2, r7, r4
 80122e8:	54d1      	strb	r1, [r2, r3]
 80122ea:	e011      	b.n	8012310 <Font_1Bit_To_4Bit_12x24+0x1cc>
		 else 				   temp1[i]&=(Light<<4);//low 4 bits reset
 80122ec:	212b      	movs	r1, #43	; 0x2b
 80122ee:	187b      	adds	r3, r7, r1
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	2010      	movs	r0, #16
 80122f4:	183a      	adds	r2, r7, r0
 80122f6:	5cd3      	ldrb	r3, [r2, r3]
 80122f8:	b25b      	sxtb	r3, r3
 80122fa:	4a49      	ldr	r2, [pc, #292]	; (8012420 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 80122fc:	7812      	ldrb	r2, [r2, #0]
 80122fe:	0112      	lsls	r2, r2, #4
 8012300:	b252      	sxtb	r2, r2
 8012302:	4013      	ands	r3, r2
 8012304:	b25a      	sxtb	r2, r3
 8012306:	187b      	adds	r3, r7, r1
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	b2d1      	uxtb	r1, r2
 801230c:	183a      	adds	r2, r7, r0
 801230e:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8012310:	232f      	movs	r3, #47	; 0x2f
 8012312:	18fa      	adds	r2, r7, r3
 8012314:	18fb      	adds	r3, r7, r3
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	18db      	adds	r3, r3, r3
 801231a:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<4;i++)
 801231c:	212b      	movs	r1, #43	; 0x2b
 801231e:	187b      	adds	r3, r7, r1
 8012320:	781a      	ldrb	r2, [r3, #0]
 8012322:	187b      	adds	r3, r7, r1
 8012324:	3201      	adds	r2, #1
 8012326:	701a      	strb	r2, [r3, #0]
 8012328:	232b      	movs	r3, #43	; 0x2b
 801232a:	18fb      	adds	r3, r7, r3
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	2b03      	cmp	r3, #3
 8012330:	d9c2      	bls.n	80122b8 <Font_1Bit_To_4Bit_12x24+0x174>

	 }
	 mask=0x0f;
 8012332:	232f      	movs	r3, #47	; 0x2f
 8012334:	18fb      	adds	r3, r7, r3
 8012336:	220f      	movs	r2, #15
 8012338:	701a      	strb	r2, [r3, #0]
	 index=0;
 801233a:	232d      	movs	r3, #45	; 0x2d
 801233c:	18fb      	adds	r3, r7, r3
 801233e:	2200      	movs	r2, #0
 8012340:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 8012342:	232a      	movs	r3, #42	; 0x2a
 8012344:	18fb      	adds	r3, r7, r3
 8012346:	2200      	movs	r2, #0
 8012348:	701a      	strb	r2, [r3, #0]
 801234a:	e03d      	b.n	80123c8 <Font_1Bit_To_4Bit_12x24+0x284>
	 {
		 data_send1[index]|=(temp1[j]&mask);
 801234c:	202d      	movs	r0, #45	; 0x2d
 801234e:	183b      	adds	r3, r7, r0
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	250c      	movs	r5, #12
 8012354:	197a      	adds	r2, r7, r5
 8012356:	5cd1      	ldrb	r1, [r2, r3]
 8012358:	242a      	movs	r4, #42	; 0x2a
 801235a:	193b      	adds	r3, r7, r4
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	2610      	movs	r6, #16
 8012360:	19ba      	adds	r2, r7, r6
 8012362:	5cd3      	ldrb	r3, [r2, r3]
 8012364:	222f      	movs	r2, #47	; 0x2f
 8012366:	18ba      	adds	r2, r7, r2
 8012368:	7812      	ldrb	r2, [r2, #0]
 801236a:	4013      	ands	r3, r2
 801236c:	b2da      	uxtb	r2, r3
 801236e:	183b      	adds	r3, r7, r0
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	430a      	orrs	r2, r1
 8012374:	b2d1      	uxtb	r1, r2
 8012376:	197a      	adds	r2, r7, r5
 8012378:	54d1      	strb	r1, [r2, r3]
		 data_send1[index]|=((temp1[j+1]&mask)<<4);
 801237a:	183b      	adds	r3, r7, r0
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	197a      	adds	r2, r7, r5
 8012380:	5cd3      	ldrb	r3, [r2, r3]
 8012382:	b25a      	sxtb	r2, r3
 8012384:	193b      	adds	r3, r7, r4
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	3301      	adds	r3, #1
 801238a:	19b9      	adds	r1, r7, r6
 801238c:	5ccb      	ldrb	r3, [r1, r3]
 801238e:	212f      	movs	r1, #47	; 0x2f
 8012390:	1879      	adds	r1, r7, r1
 8012392:	7809      	ldrb	r1, [r1, #0]
 8012394:	400b      	ands	r3, r1
 8012396:	b2db      	uxtb	r3, r3
 8012398:	011b      	lsls	r3, r3, #4
 801239a:	b25b      	sxtb	r3, r3
 801239c:	4313      	orrs	r3, r2
 801239e:	b25a      	sxtb	r2, r3
 80123a0:	183b      	adds	r3, r7, r0
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	b2d1      	uxtb	r1, r2
 80123a6:	197a      	adds	r2, r7, r5
 80123a8:	54d1      	strb	r1, [r2, r3]
		 j++;
 80123aa:	193b      	adds	r3, r7, r4
 80123ac:	781a      	ldrb	r2, [r3, #0]
 80123ae:	193b      	adds	r3, r7, r4
 80123b0:	3201      	adds	r2, #1
 80123b2:	701a      	strb	r2, [r3, #0]
		 j++;
 80123b4:	193b      	adds	r3, r7, r4
 80123b6:	781a      	ldrb	r2, [r3, #0]
 80123b8:	193b      	adds	r3, r7, r4
 80123ba:	3201      	adds	r2, #1
 80123bc:	701a      	strb	r2, [r3, #0]
		 index++;
 80123be:	183b      	adds	r3, r7, r0
 80123c0:	781a      	ldrb	r2, [r3, #0]
 80123c2:	183b      	adds	r3, r7, r0
 80123c4:	3201      	adds	r2, #1
 80123c6:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 80123c8:	232a      	movs	r3, #42	; 0x2a
 80123ca:	18fb      	adds	r3, r7, r3
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	2b03      	cmp	r3, #3
 80123d0:	d9bc      	bls.n	801234c <Font_1Bit_To_4Bit_12x24+0x208>

	 }

	 //写RAM
	 for(int k=3;k>=0;k--)
 80123d2:	2303      	movs	r3, #3
 80123d4:	627b      	str	r3, [r7, #36]	; 0x24
 80123d6:	e00a      	b.n	80123ee <Font_1Bit_To_4Bit_12x24+0x2aa>
	 {
		 SPI_OLED_SendData(data_send[k]);//一次写两个像素点，写四次
 80123d8:	2314      	movs	r3, #20
 80123da:	18fa      	adds	r2, r7, r3
 80123dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123de:	18d3      	adds	r3, r2, r3
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	0018      	movs	r0, r3
 80123e4:	f7ff fa22 	bl	801182c <SPI_OLED_SendData>
	 for(int k=3;k>=0;k--)
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	3b01      	subs	r3, #1
 80123ec:	627b      	str	r3, [r7, #36]	; 0x24
 80123ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	daf1      	bge.n	80123d8 <Font_1Bit_To_4Bit_12x24+0x294>
	 }
	 for(int k=1;k>=0;k--)
 80123f4:	2301      	movs	r3, #1
 80123f6:	623b      	str	r3, [r7, #32]
 80123f8:	e00a      	b.n	8012410 <Font_1Bit_To_4Bit_12x24+0x2cc>
	 {
		 SPI_OLED_SendData(data_send1[k]);//一次写两个像素点，写两次
 80123fa:	230c      	movs	r3, #12
 80123fc:	18fa      	adds	r2, r7, r3
 80123fe:	6a3b      	ldr	r3, [r7, #32]
 8012400:	18d3      	adds	r3, r2, r3
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	0018      	movs	r0, r3
 8012406:	f7ff fa11 	bl	801182c <SPI_OLED_SendData>
	 for(int k=1;k>=0;k--)
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	3b01      	subs	r3, #1
 801240e:	623b      	str	r3, [r7, #32]
 8012410:	6a3b      	ldr	r3, [r7, #32]
 8012412:	2b00      	cmp	r3, #0
 8012414:	daf1      	bge.n	80123fa <Font_1Bit_To_4Bit_12x24+0x2b6>
	 }


}
 8012416:	46c0      	nop			; (mov r8, r8)
 8012418:	46c0      	nop			; (mov r8, r8)
 801241a:	46bd      	mov	sp, r7
 801241c:	b00d      	add	sp, #52	; 0x34
 801241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012420:	200030b7 	.word	0x200030b7

08012424 <Set_Column_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Column_Address(uint8_t a, uint8_t b)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	0002      	movs	r2, r0
 801242c:	1dfb      	adds	r3, r7, #7
 801242e:	701a      	strb	r2, [r3, #0]
 8012430:	1dbb      	adds	r3, r7, #6
 8012432:	1c0a      	adds	r2, r1, #0
 8012434:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Column_Address_Commond);			//Set Column Address
 8012436:	2015      	movs	r0, #21
 8012438:	f7ff fa30 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c+a);					                  //0x1c地址偏移量()
 801243c:	1dfb      	adds	r3, r7, #7
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	331c      	adds	r3, #28
 8012442:	b2db      	uxtb	r3, r3
 8012444:	0018      	movs	r0, r3
 8012446:	f7ff f9f1 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x1c+b);
 801244a:	1dbb      	adds	r3, r7, #6
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	331c      	adds	r3, #28
 8012450:	b2db      	uxtb	r3, r3
 8012452:	0018      	movs	r0, r3
 8012454:	f7ff f9ea 	bl	801182c <SPI_OLED_SendData>
}
 8012458:	46c0      	nop			; (mov r8, r8)
 801245a:	46bd      	mov	sp, r7
 801245c:	b002      	add	sp, #8
 801245e:	bd80      	pop	{r7, pc}

08012460 <Set_Row_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Row_Address(uint8_t a, uint8_t b)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	0002      	movs	r2, r0
 8012468:	1dfb      	adds	r3, r7, #7
 801246a:	701a      	strb	r2, [r3, #0]
 801246c:	1dbb      	adds	r3, r7, #6
 801246e:	1c0a      	adds	r2, r1, #0
 8012470:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Row_Address_Commond);			// Set Row Address
 8012472:	2075      	movs	r0, #117	; 0x75
 8012474:	f7ff fa12 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(a);					//   Default => 0x00
 8012478:	1dfb      	adds	r3, r7, #7
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	0018      	movs	r0, r3
 801247e:	f7ff f9d5 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(b);					//   Default => 0x7F
 8012482:	1dbb      	adds	r3, r7, #6
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	0018      	movs	r0, r3
 8012488:	f7ff f9d0 	bl	801182c <SPI_OLED_SendData>
}
 801248c:	46c0      	nop			; (mov r8, r8)
 801248e:	46bd      	mov	sp, r7
 8012490:	b002      	add	sp, #8
 8012492:	bd80      	pop	{r7, pc}

08012494 <Set_WriteData>:
	* @brief  写命令
	* @param  None
	* @retval None
	*/
void Set_WriteData(void)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	af00      	add	r7, sp, #0
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012498:	205c      	movs	r0, #92	; 0x5c
 801249a:	f7ff f9ff 	bl	801189c <SPI_OLED_SendCommond>
}
 801249e:	46c0      	nop			; (mov r8, r8)
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <Fill_RAM>:
	* @brief  整屏显示
	* @param  要整屏显示的颜色
	* @retval None
	*/
void Fill_RAM(uint8_t Data)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	0002      	movs	r2, r0
 80124ac:	1dfb      	adds	r3, r7, #7
 80124ae:	701a      	strb	r2, [r3, #0]
	unsigned char i,j;

	Set_Column_Address(0x00,0x3f);//0到63列
 80124b0:	213f      	movs	r1, #63	; 0x3f
 80124b2:	2000      	movs	r0, #0
 80124b4:	f7ff ffb6 	bl	8012424 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 80124b8:	213f      	movs	r1, #63	; 0x3f
 80124ba:	2000      	movs	r0, #0
 80124bc:	f7ff ffd0 	bl	8012460 <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 80124c0:	205c      	movs	r0, #92	; 0x5c
 80124c2:	f7ff f9eb 	bl	801189c <SPI_OLED_SendCommond>

	for(i=0;i<64;i++)             //一共64行
 80124c6:	230f      	movs	r3, #15
 80124c8:	18fb      	adds	r3, r7, r3
 80124ca:	2200      	movs	r2, #0
 80124cc:	701a      	strb	r2, [r3, #0]
 80124ce:	e01f      	b.n	8012510 <Fill_RAM+0x6c>
	{
		for(j=0;j<64;j++)           //一共64列
 80124d0:	230e      	movs	r3, #14
 80124d2:	18fb      	adds	r3, r7, r3
 80124d4:	2200      	movs	r2, #0
 80124d6:	701a      	strb	r2, [r3, #0]
 80124d8:	e00f      	b.n	80124fa <Fill_RAM+0x56>
		{
			//每次发八位数据，发送两次构成16位数据，完成四个像素点的控制（列地址对应四个像素点）
			//指定行和列地址后相当于选中了四个像素点，每次发送八位数据设置两个像素点，因此要发两次
			SPI_OLED_SendData(Data);
 80124da:	1dfb      	adds	r3, r7, #7
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	0018      	movs	r0, r3
 80124e0:	f7ff f9a4 	bl	801182c <SPI_OLED_SendData>
			SPI_OLED_SendData(Data);
 80124e4:	1dfb      	adds	r3, r7, #7
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	0018      	movs	r0, r3
 80124ea:	f7ff f99f 	bl	801182c <SPI_OLED_SendData>
		for(j=0;j<64;j++)           //一共64列
 80124ee:	210e      	movs	r1, #14
 80124f0:	187b      	adds	r3, r7, r1
 80124f2:	781a      	ldrb	r2, [r3, #0]
 80124f4:	187b      	adds	r3, r7, r1
 80124f6:	3201      	adds	r2, #1
 80124f8:	701a      	strb	r2, [r3, #0]
 80124fa:	230e      	movs	r3, #14
 80124fc:	18fb      	adds	r3, r7, r3
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	2b3f      	cmp	r3, #63	; 0x3f
 8012502:	d9ea      	bls.n	80124da <Fill_RAM+0x36>
	for(i=0;i<64;i++)             //一共64行
 8012504:	210f      	movs	r1, #15
 8012506:	187b      	adds	r3, r7, r1
 8012508:	781a      	ldrb	r2, [r3, #0]
 801250a:	187b      	adds	r3, r7, r1
 801250c:	3201      	adds	r2, #1
 801250e:	701a      	strb	r2, [r3, #0]
 8012510:	230f      	movs	r3, #15
 8012512:	18fb      	adds	r3, r7, r3
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	2b3f      	cmp	r3, #63	; 0x3f
 8012518:	d9da      	bls.n	80124d0 <Fill_RAM+0x2c>

		}
	}
}
 801251a:	46c0      	nop			; (mov r8, r8)
 801251c:	46c0      	nop			; (mov r8, r8)
 801251e:	46bd      	mov	sp, r7
 8012520:	b004      	add	sp, #16
 8012522:	bd80      	pop	{r7, pc}

08012524 <Clear_Screen>:


void Clear_Screen(void)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	4f25      	ldr	r7, [pc, #148]	; (80125bc <Clear_Screen+0x98>)
 8012528:	44bd      	add	sp, r7
 801252a:	af00      	add	r7, sp, #0
	uint8_t clear_arry[64*128]={0x00};
 801252c:	4b23      	ldr	r3, [pc, #140]	; (80125bc <Clear_Screen+0x98>)
 801252e:	2280      	movs	r2, #128	; 0x80
 8012530:	0192      	lsls	r2, r2, #6
 8012532:	189b      	adds	r3, r3, r2
 8012534:	19db      	adds	r3, r3, r7
 8012536:	2200      	movs	r2, #0
 8012538:	601a      	str	r2, [r3, #0]
 801253a:	3304      	adds	r3, #4
 801253c:	4a20      	ldr	r2, [pc, #128]	; (80125c0 <Clear_Screen+0x9c>)
 801253e:	2100      	movs	r1, #0
 8012540:	0018      	movs	r0, r3
 8012542:	f001 fdba 	bl	80140ba <memset>

	Set_Column_Address(0x00,0x3f);//0到63列
 8012546:	213f      	movs	r1, #63	; 0x3f
 8012548:	2000      	movs	r0, #0
 801254a:	f7ff ff6b 	bl	8012424 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 801254e:	213f      	movs	r1, #63	; 0x3f
 8012550:	2000      	movs	r0, #0
 8012552:	f7ff ff85 	bl	8012460 <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 8012556:	205c      	movs	r0, #92	; 0x5c
 8012558:	f7ff f9a0 	bl	801189c <SPI_OLED_SendCommond>

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 801255c:	4b19      	ldr	r3, [pc, #100]	; (80125c4 <Clear_Screen+0xa0>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	68da      	ldr	r2, [r3, #12]
 8012562:	4b18      	ldr	r3, [pc, #96]	; (80125c4 <Clear_Screen+0xa0>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	2101      	movs	r1, #1
 8012568:	438a      	bics	r2, r1
 801256a:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 801256c:	4b16      	ldr	r3, [pc, #88]	; (80125c8 <Clear_Screen+0xa4>)
 801256e:	2201      	movs	r2, #1
 8012570:	2102      	movs	r1, #2
 8012572:	0018      	movs	r0, r3
 8012574:	f7f4 fce9 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8012578:	4b13      	ldr	r3, [pc, #76]	; (80125c8 <Clear_Screen+0xa4>)
 801257a:	2200      	movs	r2, #0
 801257c:	2101      	movs	r1, #1
 801257e:	0018      	movs	r0, r3
 8012580:	f7f4 fce3 	bl	8006f4a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,clear_arry,64*128,1000);
 8012584:	23fa      	movs	r3, #250	; 0xfa
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	2280      	movs	r2, #128	; 0x80
 801258a:	0192      	lsls	r2, r2, #6
 801258c:	0039      	movs	r1, r7
 801258e:	480f      	ldr	r0, [pc, #60]	; (80125cc <Clear_Screen+0xa8>)
 8012590:	f7f5 fbea 	bl	8007d68 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8012594:	4b0c      	ldr	r3, [pc, #48]	; (80125c8 <Clear_Screen+0xa4>)
 8012596:	2201      	movs	r2, #1
 8012598:	2101      	movs	r1, #1
 801259a:	0018      	movs	r0, r3
 801259c:	f7f4 fcd5 	bl	8006f4a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 80125a0:	4b08      	ldr	r3, [pc, #32]	; (80125c4 <Clear_Screen+0xa0>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	68da      	ldr	r2, [r3, #12]
 80125a6:	4b07      	ldr	r3, [pc, #28]	; (80125c4 <Clear_Screen+0xa0>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2101      	movs	r1, #1
 80125ac:	430a      	orrs	r2, r1
 80125ae:	60da      	str	r2, [r3, #12]


}
 80125b0:	46c0      	nop			; (mov r8, r8)
 80125b2:	46bd      	mov	sp, r7
 80125b4:	2380      	movs	r3, #128	; 0x80
 80125b6:	019b      	lsls	r3, r3, #6
 80125b8:	449d      	add	sp, r3
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	ffffe000 	.word	0xffffe000
 80125c0:	00001ffc 	.word	0x00001ffc
 80125c4:	20003468 	.word	0x20003468
 80125c8:	50000800 	.word	0x50000800
 80125cc:	200033b4 	.word	0x200033b4

080125d0 <Write_Single_8x16AsicII>:
  * @brief  写一个8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_Single_8x16AsicII(uint8_t Row, uint8_t Column, char Data)
{
 80125d0:	b590      	push	{r4, r7, lr}
 80125d2:	b085      	sub	sp, #20
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	0004      	movs	r4, r0
 80125d8:	0008      	movs	r0, r1
 80125da:	0011      	movs	r1, r2
 80125dc:	1dfb      	adds	r3, r7, #7
 80125de:	1c22      	adds	r2, r4, #0
 80125e0:	701a      	strb	r2, [r3, #0]
 80125e2:	1dbb      	adds	r3, r7, #6
 80125e4:	1c02      	adds	r2, r0, #0
 80125e6:	701a      	strb	r2, [r3, #0]
 80125e8:	1d7b      	adds	r3, r7, #5
 80125ea:	1c0a      	adds	r2, r1, #0
 80125ec:	701a      	strb	r2, [r3, #0]

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 80125ee:	20a0      	movs	r0, #160	; 0xa0
 80125f0:	f7ff f954 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 80125f4:	2014      	movs	r0, #20
 80125f6:	f7ff f919 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 80125fa:	2011      	movs	r0, #17
 80125fc:	f7ff f916 	bl	801182c <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+1);    //设置列地址，两列（8个像素点）
 8012600:	1dbb      	adds	r3, r7, #6
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	3301      	adds	r3, #1
 8012606:	b2da      	uxtb	r2, r3
 8012608:	1dbb      	adds	r3, r7, #6
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	0011      	movs	r1, r2
 801260e:	0018      	movs	r0, r3
 8012610:	f7ff ff08 	bl	8012424 <Set_Column_Address>
	Set_Row_Address(Row, Row+15);            //设置行地址，16行（16个像素点）
 8012614:	1dfb      	adds	r3, r7, #7
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	330f      	adds	r3, #15
 801261a:	b2da      	uxtb	r2, r3
 801261c:	1dfb      	adds	r3, r7, #7
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	0011      	movs	r1, r2
 8012622:	0018      	movs	r0, r3
 8012624:	f7ff ff1c 	bl	8012460 <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012628:	205c      	movs	r0, #92	; 0x5c
 801262a:	f7ff f937 	bl	801189c <SPI_OLED_SendCommond>

	uint16_t k=(Data-' ')*16;//求对空格的偏移量，确定是哪个字模（*16是因为一行有16个u8数据，构成一个字符）
 801262e:	1d7b      	adds	r3, r7, #5
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	3b20      	subs	r3, #32
 8012634:	b29a      	uxth	r2, r3
 8012636:	210e      	movs	r1, #14
 8012638:	187b      	adds	r3, r7, r1
 801263a:	0112      	lsls	r2, r2, #4
 801263c:	801a      	strh	r2, [r3, #0]
							 //确定字模及其偏移量后将那行的16个u8数据取出

	_1Bit_To_4Bit_8x16(&Fonts_AsicII_8x16[k]);
 801263e:	187b      	adds	r3, r7, r1
 8012640:	881a      	ldrh	r2, [r3, #0]
 8012642:	4b04      	ldr	r3, [pc, #16]	; (8012654 <Write_Single_8x16AsicII+0x84>)
 8012644:	18d3      	adds	r3, r2, r3
 8012646:	0018      	movs	r0, r3
 8012648:	f7ff fc66 	bl	8011f18 <_1Bit_To_4Bit_8x16>


}
 801264c:	46c0      	nop			; (mov r8, r8)
 801264e:	46bd      	mov	sp, r7
 8012650:	b005      	add	sp, #20
 8012652:	bd90      	pop	{r4, r7, pc}
 8012654:	20000010 	.word	0x20000010

08012658 <Write_String_8x16AsicII>:
  * @brief  写一行8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_String_8x16AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012658:	b590      	push	{r4, r7, lr}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	603a      	str	r2, [r7, #0]
 8012660:	1dfb      	adds	r3, r7, #7
 8012662:	1c02      	adds	r2, r0, #0
 8012664:	701a      	strb	r2, [r3, #0]
 8012666:	1dbb      	adds	r3, r7, #6
 8012668:	1c0a      	adds	r2, r1, #0
 801266a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	0018      	movs	r0, r3
 8012670:	f7ed fd50 	bl	8000114 <strlen>
 8012674:	0002      	movs	r2, r0
 8012676:	230e      	movs	r3, #14
 8012678:	18fb      	adds	r3, r7, r3
 801267a:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 801267c:	230f      	movs	r3, #15
 801267e:	18fb      	adds	r3, r7, r3
 8012680:	2200      	movs	r2, #0
 8012682:	701a      	strb	r2, [r3, #0]
 8012684:	e018      	b.n	80126b8 <Write_String_8x16AsicII+0x60>
	{
	 Write_Single_8x16AsicII(Row,Column+2*i,Data[i]);
 8012686:	200f      	movs	r0, #15
 8012688:	183b      	adds	r3, r7, r0
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	18db      	adds	r3, r3, r3
 801268e:	b2da      	uxtb	r2, r3
 8012690:	1dbb      	adds	r3, r7, #6
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	18d3      	adds	r3, r2, r3
 8012696:	b2d9      	uxtb	r1, r3
 8012698:	0004      	movs	r4, r0
 801269a:	183b      	adds	r3, r7, r0
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	683a      	ldr	r2, [r7, #0]
 80126a0:	18d3      	adds	r3, r2, r3
 80126a2:	781a      	ldrb	r2, [r3, #0]
 80126a4:	1dfb      	adds	r3, r7, #7
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	0018      	movs	r0, r3
 80126aa:	f7ff ff91 	bl	80125d0 <Write_Single_8x16AsicII>
	for(i=0;i<k;i++)
 80126ae:	193b      	adds	r3, r7, r4
 80126b0:	781a      	ldrb	r2, [r3, #0]
 80126b2:	193b      	adds	r3, r7, r4
 80126b4:	3201      	adds	r2, #1
 80126b6:	701a      	strb	r2, [r3, #0]
 80126b8:	230f      	movs	r3, #15
 80126ba:	18fa      	adds	r2, r7, r3
 80126bc:	230e      	movs	r3, #14
 80126be:	18fb      	adds	r3, r7, r3
 80126c0:	7812      	ldrb	r2, [r2, #0]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d3de      	bcc.n	8012686 <Write_String_8x16AsicII+0x2e>
	}
}
 80126c8:	46c0      	nop			; (mov r8, r8)
 80126ca:	46c0      	nop			; (mov r8, r8)
 80126cc:	46bd      	mov	sp, r7
 80126ce:	b005      	add	sp, #20
 80126d0:	bd90      	pop	{r4, r7, pc}
	...

080126d4 <Write_Single_16x32AsicII>:
 * @brief  写一个16x32数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_16x32AsicII(uint8_t Row, uint8_t Column, char Data)
{
 80126d4:	b590      	push	{r4, r7, lr}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	0004      	movs	r4, r0
 80126dc:	0008      	movs	r0, r1
 80126de:	0011      	movs	r1, r2
 80126e0:	1dfb      	adds	r3, r7, #7
 80126e2:	1c22      	adds	r2, r4, #0
 80126e4:	701a      	strb	r2, [r3, #0]
 80126e6:	1dbb      	adds	r3, r7, #6
 80126e8:	1c02      	adds	r2, r0, #0
 80126ea:	701a      	strb	r2, [r3, #0]
 80126ec:	1d7b      	adds	r3, r7, #5
 80126ee:	1c0a      	adds	r2, r1, #0
 80126f0:	701a      	strb	r2, [r3, #0]

	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 80126f2:	20a0      	movs	r0, #160	; 0xa0
 80126f4:	f7ff f8d2 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 80126f8:	2014      	movs	r0, #20
 80126fa:	f7ff f897 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 80126fe:	2011      	movs	r0, #17
 8012700:	f7ff f894 	bl	801182c <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+3);    //设置列地址
 8012704:	1dbb      	adds	r3, r7, #6
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	3303      	adds	r3, #3
 801270a:	b2da      	uxtb	r2, r3
 801270c:	1dbb      	adds	r3, r7, #6
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	0011      	movs	r1, r2
 8012712:	0018      	movs	r0, r3
 8012714:	f7ff fe86 	bl	8012424 <Set_Column_Address>
	Set_Row_Address(Row, Row+31);            //设置行地址
 8012718:	1dfb      	adds	r3, r7, #7
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	331f      	adds	r3, #31
 801271e:	b2da      	uxtb	r2, r3
 8012720:	1dfb      	adds	r3, r7, #7
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	0011      	movs	r1, r2
 8012726:	0018      	movs	r0, r3
 8012728:	f7ff fe9a 	bl	8012460 <Set_Row_Address>

	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 801272c:	205c      	movs	r0, #92	; 0x5c
 801272e:	f7ff f8b5 	bl	801189c <SPI_OLED_SendCommond>

	k=(Data-' ')*64;//求对空格的偏移量
 8012732:	1d7b      	adds	r3, r7, #5
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	3b20      	subs	r3, #32
 8012738:	b29a      	uxth	r2, r3
 801273a:	210e      	movs	r1, #14
 801273c:	187b      	adds	r3, r7, r1
 801273e:	0192      	lsls	r2, r2, #6
 8012740:	801a      	strh	r2, [r3, #0]

	_1Bit_To_4Bit_16x32(&Fonts_AsicII_16x32[k]);
 8012742:	187b      	adds	r3, r7, r1
 8012744:	881a      	ldrh	r2, [r3, #0]
 8012746:	4b04      	ldr	r3, [pc, #16]	; (8012758 <Write_Single_16x32AsicII+0x84>)
 8012748:	18d3      	adds	r3, r2, r3
 801274a:	0018      	movs	r0, r3
 801274c:	f7ff fa96 	bl	8011c7c <_1Bit_To_4Bit_16x32>


}
 8012750:	46c0      	nop			; (mov r8, r8)
 8012752:	46bd      	mov	sp, r7
 8012754:	b005      	add	sp, #20
 8012756:	bd90      	pop	{r4, r7, pc}
 8012758:	20001810 	.word	0x20001810

0801275c <Write_String_16x32AsicII>:
 * @brief  写一行16x32数字、字母(ASIC II)   分辨率256*64，16*24==长16，宽32
 * @param  行，列，要写入的数字、字母         Row==行的左上角   Column==列的左边（总共64）
 * @retval None
 */
void Write_String_16x32AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 801275c:	b590      	push	{r4, r7, lr}
 801275e:	b085      	sub	sp, #20
 8012760:	af00      	add	r7, sp, #0
 8012762:	603a      	str	r2, [r7, #0]
 8012764:	1dfb      	adds	r3, r7, #7
 8012766:	1c02      	adds	r2, r0, #0
 8012768:	701a      	strb	r2, [r3, #0]
 801276a:	1dbb      	adds	r3, r7, #6
 801276c:	1c0a      	adds	r2, r1, #0
 801276e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	0018      	movs	r0, r3
 8012774:	f7ed fcce 	bl	8000114 <strlen>
 8012778:	0002      	movs	r2, r0
 801277a:	230e      	movs	r3, #14
 801277c:	18fb      	adds	r3, r7, r3
 801277e:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 8012780:	230f      	movs	r3, #15
 8012782:	18fb      	adds	r3, r7, r3
 8012784:	2200      	movs	r2, #0
 8012786:	701a      	strb	r2, [r3, #0]
 8012788:	e018      	b.n	80127bc <Write_String_16x32AsicII+0x60>
	{
	 Write_Single_16x32AsicII(Row,Column+4*i,Data[i]);
 801278a:	200f      	movs	r0, #15
 801278c:	183b      	adds	r3, r7, r0
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	009b      	lsls	r3, r3, #2
 8012792:	b2da      	uxtb	r2, r3
 8012794:	1dbb      	adds	r3, r7, #6
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	18d3      	adds	r3, r2, r3
 801279a:	b2d9      	uxtb	r1, r3
 801279c:	0004      	movs	r4, r0
 801279e:	183b      	adds	r3, r7, r0
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	18d3      	adds	r3, r2, r3
 80127a6:	781a      	ldrb	r2, [r3, #0]
 80127a8:	1dfb      	adds	r3, r7, #7
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	0018      	movs	r0, r3
 80127ae:	f7ff ff91 	bl	80126d4 <Write_Single_16x32AsicII>
	for(i=0;i<k;i++)
 80127b2:	193b      	adds	r3, r7, r4
 80127b4:	781a      	ldrb	r2, [r3, #0]
 80127b6:	193b      	adds	r3, r7, r4
 80127b8:	3201      	adds	r2, #1
 80127ba:	701a      	strb	r2, [r3, #0]
 80127bc:	230f      	movs	r3, #15
 80127be:	18fa      	adds	r2, r7, r3
 80127c0:	230e      	movs	r3, #14
 80127c2:	18fb      	adds	r3, r7, r3
 80127c4:	7812      	ldrb	r2, [r2, #0]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d3de      	bcc.n	801278a <Write_String_16x32AsicII+0x2e>
	}
}
 80127cc:	46c0      	nop			; (mov r8, r8)
 80127ce:	46c0      	nop			; (mov r8, r8)
 80127d0:	46bd      	mov	sp, r7
 80127d2:	b005      	add	sp, #20
 80127d4:	bd90      	pop	{r4, r7, pc}
	...

080127d8 <Write_Single_12x24AsicII>:
 * @brief  写一个12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_12x24AsicII(uint8_t Row, uint8_t Column, char Data)
{
 80127d8:	b590      	push	{r4, r7, lr}
 80127da:	b085      	sub	sp, #20
 80127dc:	af00      	add	r7, sp, #0
 80127de:	0004      	movs	r4, r0
 80127e0:	0008      	movs	r0, r1
 80127e2:	0011      	movs	r1, r2
 80127e4:	1dfb      	adds	r3, r7, #7
 80127e6:	1c22      	adds	r2, r4, #0
 80127e8:	701a      	strb	r2, [r3, #0]
 80127ea:	1dbb      	adds	r3, r7, #6
 80127ec:	1c02      	adds	r2, r0, #0
 80127ee:	701a      	strb	r2, [r3, #0]
 80127f0:	1d7b      	adds	r3, r7, #5
 80127f2:	1c0a      	adds	r2, r1, #0
 80127f4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 80127f6:	20a0      	movs	r0, #160	; 0xa0
 80127f8:	f7ff f850 	bl	801189c <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 80127fc:	2014      	movs	r0, #20
 80127fe:	f7ff f815 	bl	801182c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012802:	2011      	movs	r0, #17
 8012804:	f7ff f812 	bl	801182c <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+2);    //设置列地址
 8012808:	1dbb      	adds	r3, r7, #6
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	3302      	adds	r3, #2
 801280e:	b2da      	uxtb	r2, r3
 8012810:	1dbb      	adds	r3, r7, #6
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	0011      	movs	r1, r2
 8012816:	0018      	movs	r0, r3
 8012818:	f7ff fe04 	bl	8012424 <Set_Column_Address>
	Set_Row_Address(Row, Row+23);            //设置行地址
 801281c:	1dfb      	adds	r3, r7, #7
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	3317      	adds	r3, #23
 8012822:	b2da      	uxtb	r2, r3
 8012824:	1dfb      	adds	r3, r7, #7
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	0011      	movs	r1, r2
 801282a:	0018      	movs	r0, r3
 801282c:	f7ff fe18 	bl	8012460 <Set_Row_Address>

	Set_WriteData();
 8012830:	f7ff fe30 	bl	8012494 <Set_WriteData>

	k=(Data-' ')*48;//求对空格的偏移量
 8012834:	1d7b      	adds	r3, r7, #5
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	3b20      	subs	r3, #32
 801283a:	b29a      	uxth	r2, r3
 801283c:	230c      	movs	r3, #12
 801283e:	18fb      	adds	r3, r7, r3
 8012840:	2130      	movs	r1, #48	; 0x30
 8012842:	434a      	muls	r2, r1
 8012844:	801a      	strh	r2, [r3, #0]

	for(i=0;i<24;i++)
 8012846:	230f      	movs	r3, #15
 8012848:	18fb      	adds	r3, r7, r3
 801284a:	2200      	movs	r2, #0
 801284c:	701a      	strb	r2, [r3, #0]
 801284e:	e017      	b.n	8012880 <Write_Single_12x24AsicII+0xa8>
	{
		/*12*24 12bits用两个8bit组合描述，因此，每次需要访问两个u8*/
		Font_1Bit_To_4Bit_12x24(Fonts_AsicII_12x24[k],Fonts_AsicII_12x24[k+1]);
 8012850:	240c      	movs	r4, #12
 8012852:	193b      	adds	r3, r7, r4
 8012854:	881b      	ldrh	r3, [r3, #0]
 8012856:	4a0f      	ldr	r2, [pc, #60]	; (8012894 <Write_Single_12x24AsicII+0xbc>)
 8012858:	5cd0      	ldrb	r0, [r2, r3]
 801285a:	193b      	adds	r3, r7, r4
 801285c:	881b      	ldrh	r3, [r3, #0]
 801285e:	3301      	adds	r3, #1
 8012860:	4a0c      	ldr	r2, [pc, #48]	; (8012894 <Write_Single_12x24AsicII+0xbc>)
 8012862:	5cd3      	ldrb	r3, [r2, r3]
 8012864:	0019      	movs	r1, r3
 8012866:	f7ff fc6d 	bl	8012144 <Font_1Bit_To_4Bit_12x24>
		k=k+2;
 801286a:	193b      	adds	r3, r7, r4
 801286c:	193a      	adds	r2, r7, r4
 801286e:	8812      	ldrh	r2, [r2, #0]
 8012870:	3202      	adds	r2, #2
 8012872:	801a      	strh	r2, [r3, #0]
	for(i=0;i<24;i++)
 8012874:	210f      	movs	r1, #15
 8012876:	187b      	adds	r3, r7, r1
 8012878:	781a      	ldrb	r2, [r3, #0]
 801287a:	187b      	adds	r3, r7, r1
 801287c:	3201      	adds	r2, #1
 801287e:	701a      	strb	r2, [r3, #0]
 8012880:	230f      	movs	r3, #15
 8012882:	18fb      	adds	r3, r7, r3
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	2b17      	cmp	r3, #23
 8012888:	d9e2      	bls.n	8012850 <Write_Single_12x24AsicII+0x78>
	}
}
 801288a:	46c0      	nop			; (mov r8, r8)
 801288c:	46c0      	nop			; (mov r8, r8)
 801288e:	46bd      	mov	sp, r7
 8012890:	b005      	add	sp, #20
 8012892:	bd90      	pop	{r4, r7, pc}
 8012894:	20000640 	.word	0x20000640

08012898 <Write_String_12x24AsicII>:
 * @brief  写一行12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_String_12x24AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012898:	b590      	push	{r4, r7, lr}
 801289a:	b085      	sub	sp, #20
 801289c:	af00      	add	r7, sp, #0
 801289e:	603a      	str	r2, [r7, #0]
 80128a0:	1dfb      	adds	r3, r7, #7
 80128a2:	1c02      	adds	r2, r0, #0
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	1dbb      	adds	r3, r7, #6
 80128a8:	1c0a      	adds	r2, r1, #0
 80128aa:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	0018      	movs	r0, r3
 80128b0:	f7ed fc30 	bl	8000114 <strlen>
 80128b4:	0002      	movs	r2, r0
 80128b6:	230e      	movs	r3, #14
 80128b8:	18fb      	adds	r3, r7, r3
 80128ba:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 80128bc:	230f      	movs	r3, #15
 80128be:	18fb      	adds	r3, r7, r3
 80128c0:	2200      	movs	r2, #0
 80128c2:	701a      	strb	r2, [r3, #0]
 80128c4:	e01a      	b.n	80128fc <Write_String_12x24AsicII+0x64>
	{
		Write_Single_12x24AsicII(Row,Column+3*i,Data[i]);
 80128c6:	200f      	movs	r0, #15
 80128c8:	183b      	adds	r3, r7, r0
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	1c1a      	adds	r2, r3, #0
 80128ce:	1892      	adds	r2, r2, r2
 80128d0:	18d3      	adds	r3, r2, r3
 80128d2:	b2da      	uxtb	r2, r3
 80128d4:	1dbb      	adds	r3, r7, #6
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	18d3      	adds	r3, r2, r3
 80128da:	b2d9      	uxtb	r1, r3
 80128dc:	0004      	movs	r4, r0
 80128de:	183b      	adds	r3, r7, r0
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	18d3      	adds	r3, r2, r3
 80128e6:	781a      	ldrb	r2, [r3, #0]
 80128e8:	1dfb      	adds	r3, r7, #7
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	0018      	movs	r0, r3
 80128ee:	f7ff ff73 	bl	80127d8 <Write_Single_12x24AsicII>
	for(i=0;i<k;i++)
 80128f2:	193b      	adds	r3, r7, r4
 80128f4:	781a      	ldrb	r2, [r3, #0]
 80128f6:	193b      	adds	r3, r7, r4
 80128f8:	3201      	adds	r2, #1
 80128fa:	701a      	strb	r2, [r3, #0]
 80128fc:	230f      	movs	r3, #15
 80128fe:	18fa      	adds	r2, r7, r3
 8012900:	230e      	movs	r3, #14
 8012902:	18fb      	adds	r3, r7, r3
 8012904:	7812      	ldrb	r2, [r2, #0]
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	429a      	cmp	r2, r3
 801290a:	d3dc      	bcc.n	80128c6 <Write_String_12x24AsicII+0x2e>
	}
}
 801290c:	46c0      	nop			; (mov r8, r8)
 801290e:	46c0      	nop			; (mov r8, r8)
 8012910:	46bd      	mov	sp, r7
 8012912:	b005      	add	sp, #20
 8012914:	bd90      	pop	{r4, r7, pc}
	...

08012918 <Display_Main_Interface_Voltage>:
  * @brief  将电压值显示出来
  * @param  电压值
  * @retval None
  */
void Display_Main_Interface_Voltage(float Voltage)
{
 8012918:	b5b0      	push	{r4, r5, r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
	char String_voltage_real[7]={'0','0','0','.','0','0'};
 8012920:	2408      	movs	r4, #8
 8012922:	193b      	adds	r3, r7, r4
 8012924:	4a2c      	ldr	r2, [pc, #176]	; (80129d8 <Display_Main_Interface_Voltage+0xc0>)
 8012926:	6811      	ldr	r1, [r2, #0]
 8012928:	6019      	str	r1, [r3, #0]
 801292a:	8891      	ldrh	r1, [r2, #4]
 801292c:	8099      	strh	r1, [r3, #4]
 801292e:	7992      	ldrb	r2, [r2, #6]
 8012930:	719a      	strb	r2, [r3, #6]
	if(Voltage>=100)   		sprintf(String_voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 8012932:	492a      	ldr	r1, [pc, #168]	; (80129dc <Display_Main_Interface_Voltage+0xc4>)
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ed fded 	bl	8000514 <__aeabi_fcmpge>
 801293a:	1e03      	subs	r3, r0, #0
 801293c:	d009      	beq.n	8012952 <Display_Main_Interface_Voltage+0x3a>
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f7f0 fab6 	bl	8002eb0 <__aeabi_f2d>
 8012944:	0002      	movs	r2, r0
 8012946:	000b      	movs	r3, r1
 8012948:	4925      	ldr	r1, [pc, #148]	; (80129e0 <Display_Main_Interface_Voltage+0xc8>)
 801294a:	1938      	adds	r0, r7, r4
 801294c:	f002 f920 	bl	8014b90 <siprintf>
 8012950:	e030      	b.n	80129b4 <Display_Main_Interface_Voltage+0x9c>
	else if(Voltage>=9.99)
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7f0 faac 	bl	8002eb0 <__aeabi_f2d>
 8012958:	4a22      	ldr	r2, [pc, #136]	; (80129e4 <Display_Main_Interface_Voltage+0xcc>)
 801295a:	4b23      	ldr	r3, [pc, #140]	; (80129e8 <Display_Main_Interface_Voltage+0xd0>)
 801295c:	f7ed fda0 	bl	80004a0 <__aeabi_dcmpge>
 8012960:	1e03      	subs	r3, r0, #0
 8012962:	d00f      	beq.n	8012984 <Display_Main_Interface_Voltage+0x6c>
	{
		String_voltage_real[0]='0';
 8012964:	2508      	movs	r5, #8
 8012966:	197b      	adds	r3, r7, r5
 8012968:	2230      	movs	r2, #48	; 0x30
 801296a:	701a      	strb	r2, [r3, #0]
		sprintf(&String_voltage_real[1], "%5.2f", Voltage);//保留两位小数
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f7f0 fa9f 	bl	8002eb0 <__aeabi_f2d>
 8012972:	0002      	movs	r2, r0
 8012974:	000b      	movs	r3, r1
 8012976:	4c1d      	ldr	r4, [pc, #116]	; (80129ec <Display_Main_Interface_Voltage+0xd4>)
 8012978:	1979      	adds	r1, r7, r5
 801297a:	1c48      	adds	r0, r1, #1
 801297c:	0021      	movs	r1, r4
 801297e:	f002 f907 	bl	8014b90 <siprintf>
 8012982:	e017      	b.n	80129b4 <Display_Main_Interface_Voltage+0x9c>
	}
	else if(Voltage>=0)
 8012984:	2100      	movs	r1, #0
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f7ed fdc4 	bl	8000514 <__aeabi_fcmpge>
 801298c:	1e03      	subs	r3, r0, #0
 801298e:	d011      	beq.n	80129b4 <Display_Main_Interface_Voltage+0x9c>
	{
		String_voltage_real[0]='0';
 8012990:	2508      	movs	r5, #8
 8012992:	197b      	adds	r3, r7, r5
 8012994:	2230      	movs	r2, #48	; 0x30
 8012996:	701a      	strb	r2, [r3, #0]
		String_voltage_real[1]='0';
 8012998:	197b      	adds	r3, r7, r5
 801299a:	2230      	movs	r2, #48	; 0x30
 801299c:	705a      	strb	r2, [r3, #1]
		sprintf(&String_voltage_real[2], "%4.2f", Voltage);
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f7f0 fa86 	bl	8002eb0 <__aeabi_f2d>
 80129a4:	0002      	movs	r2, r0
 80129a6:	000b      	movs	r3, r1
 80129a8:	4c11      	ldr	r4, [pc, #68]	; (80129f0 <Display_Main_Interface_Voltage+0xd8>)
 80129aa:	1979      	adds	r1, r7, r5
 80129ac:	1c88      	adds	r0, r1, #2
 80129ae:	0021      	movs	r1, r4
 80129b0:	f002 f8ee 	bl	8014b90 <siprintf>

	}


	Write_String_16x32AsicII(0, 0, String_voltage_real);
 80129b4:	2308      	movs	r3, #8
 80129b6:	18fb      	adds	r3, r7, r3
 80129b8:	001a      	movs	r2, r3
 80129ba:	2100      	movs	r1, #0
 80129bc:	2000      	movs	r0, #0
 80129be:	f7ff fecd 	bl	801275c <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0, 24, "V");
 80129c2:	4b0c      	ldr	r3, [pc, #48]	; (80129f4 <Display_Main_Interface_Voltage+0xdc>)
 80129c4:	001a      	movs	r2, r3
 80129c6:	2118      	movs	r1, #24
 80129c8:	2000      	movs	r0, #0
 80129ca:	f7ff fec7 	bl	801275c <Write_String_16x32AsicII>


}
 80129ce:	46c0      	nop			; (mov r8, r8)
 80129d0:	46bd      	mov	sp, r7
 80129d2:	b004      	add	sp, #16
 80129d4:	bdb0      	pop	{r4, r5, r7, pc}
 80129d6:	46c0      	nop			; (mov r8, r8)
 80129d8:	08017de0 	.word	0x08017de0
 80129dc:	42c80000 	.word	0x42c80000
 80129e0:	08017dc4 	.word	0x08017dc4
 80129e4:	47ae147b 	.word	0x47ae147b
 80129e8:	4023fae1 	.word	0x4023fae1
 80129ec:	08017dcc 	.word	0x08017dcc
 80129f0:	08017dd4 	.word	0x08017dd4
 80129f4:	08017ddc 	.word	0x08017ddc

080129f8 <Display_Main_Interface_Current>:
  * @brief  将电流值显示出来
  * @param  电流值
  * @retval None
  */
void Display_Main_Interface_Current(float Current)
{
 80129f8:	b5b0      	push	{r4, r5, r7, lr}
 80129fa:	b084      	sub	sp, #16
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
	char String_Current_real[7]={'0','0','0','.','0','0'};
 8012a00:	2408      	movs	r4, #8
 8012a02:	193b      	adds	r3, r7, r4
 8012a04:	4a2c      	ldr	r2, [pc, #176]	; (8012ab8 <Display_Main_Interface_Current+0xc0>)
 8012a06:	6811      	ldr	r1, [r2, #0]
 8012a08:	6019      	str	r1, [r3, #0]
 8012a0a:	8891      	ldrh	r1, [r2, #4]
 8012a0c:	8099      	strh	r1, [r3, #4]
 8012a0e:	7992      	ldrb	r2, [r2, #6]
 8012a10:	719a      	strb	r2, [r3, #6]
	if(Current>=100)     	sprintf(String_Current_real, "%6.2f", Current);//将float转为string，数据长度为6，保留两位小数
 8012a12:	492a      	ldr	r1, [pc, #168]	; (8012abc <Display_Main_Interface_Current+0xc4>)
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7ed fd7d 	bl	8000514 <__aeabi_fcmpge>
 8012a1a:	1e03      	subs	r3, r0, #0
 8012a1c:	d009      	beq.n	8012a32 <Display_Main_Interface_Current+0x3a>
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f7f0 fa46 	bl	8002eb0 <__aeabi_f2d>
 8012a24:	0002      	movs	r2, r0
 8012a26:	000b      	movs	r3, r1
 8012a28:	4925      	ldr	r1, [pc, #148]	; (8012ac0 <Display_Main_Interface_Current+0xc8>)
 8012a2a:	1938      	adds	r0, r7, r4
 8012a2c:	f002 f8b0 	bl	8014b90 <siprintf>
 8012a30:	e030      	b.n	8012a94 <Display_Main_Interface_Current+0x9c>
	else if(Current>=9.99)
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7f0 fa3c 	bl	8002eb0 <__aeabi_f2d>
 8012a38:	4a22      	ldr	r2, [pc, #136]	; (8012ac4 <Display_Main_Interface_Current+0xcc>)
 8012a3a:	4b23      	ldr	r3, [pc, #140]	; (8012ac8 <Display_Main_Interface_Current+0xd0>)
 8012a3c:	f7ed fd30 	bl	80004a0 <__aeabi_dcmpge>
 8012a40:	1e03      	subs	r3, r0, #0
 8012a42:	d00f      	beq.n	8012a64 <Display_Main_Interface_Current+0x6c>
	{
		String_Current_real[0]='0';
 8012a44:	2508      	movs	r5, #8
 8012a46:	197b      	adds	r3, r7, r5
 8012a48:	2230      	movs	r2, #48	; 0x30
 8012a4a:	701a      	strb	r2, [r3, #0]
		sprintf(&String_Current_real[1], "%5.2f", Current);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7f0 fa2f 	bl	8002eb0 <__aeabi_f2d>
 8012a52:	0002      	movs	r2, r0
 8012a54:	000b      	movs	r3, r1
 8012a56:	4c1d      	ldr	r4, [pc, #116]	; (8012acc <Display_Main_Interface_Current+0xd4>)
 8012a58:	1979      	adds	r1, r7, r5
 8012a5a:	1c48      	adds	r0, r1, #1
 8012a5c:	0021      	movs	r1, r4
 8012a5e:	f002 f897 	bl	8014b90 <siprintf>
 8012a62:	e017      	b.n	8012a94 <Display_Main_Interface_Current+0x9c>
	}
	else if(Current>=0)
 8012a64:	2100      	movs	r1, #0
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ed fd54 	bl	8000514 <__aeabi_fcmpge>
 8012a6c:	1e03      	subs	r3, r0, #0
 8012a6e:	d011      	beq.n	8012a94 <Display_Main_Interface_Current+0x9c>
	{
		String_Current_real[0]='0';
 8012a70:	2508      	movs	r5, #8
 8012a72:	197b      	adds	r3, r7, r5
 8012a74:	2230      	movs	r2, #48	; 0x30
 8012a76:	701a      	strb	r2, [r3, #0]
		String_Current_real[1]='0';
 8012a78:	197b      	adds	r3, r7, r5
 8012a7a:	2230      	movs	r2, #48	; 0x30
 8012a7c:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Current_real[2],"%4.2f", Current);
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f7f0 fa16 	bl	8002eb0 <__aeabi_f2d>
 8012a84:	0002      	movs	r2, r0
 8012a86:	000b      	movs	r3, r1
 8012a88:	4c11      	ldr	r4, [pc, #68]	; (8012ad0 <Display_Main_Interface_Current+0xd8>)
 8012a8a:	1979      	adds	r1, r7, r5
 8012a8c:	1c88      	adds	r0, r1, #2
 8012a8e:	0021      	movs	r1, r4
 8012a90:	f002 f87e 	bl	8014b90 <siprintf>
	}

	Write_String_16x32AsicII(0,36, String_Current_real);
 8012a94:	2308      	movs	r3, #8
 8012a96:	18fb      	adds	r3, r7, r3
 8012a98:	001a      	movs	r2, r3
 8012a9a:	2124      	movs	r1, #36	; 0x24
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	f7ff fe5d 	bl	801275c <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0,60, "A");
 8012aa2:	4b0c      	ldr	r3, [pc, #48]	; (8012ad4 <Display_Main_Interface_Current+0xdc>)
 8012aa4:	001a      	movs	r2, r3
 8012aa6:	213c      	movs	r1, #60	; 0x3c
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	f7ff fe57 	bl	801275c <Write_String_16x32AsicII>

}
 8012aae:	46c0      	nop			; (mov r8, r8)
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	b004      	add	sp, #16
 8012ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ab6:	46c0      	nop			; (mov r8, r8)
 8012ab8:	08017de0 	.word	0x08017de0
 8012abc:	42c80000 	.word	0x42c80000
 8012ac0:	08017dc4 	.word	0x08017dc4
 8012ac4:	47ae147b 	.word	0x47ae147b
 8012ac8:	4023fae1 	.word	0x4023fae1
 8012acc:	08017dcc 	.word	0x08017dcc
 8012ad0:	08017dd4 	.word	0x08017dd4
 8012ad4:	08017de8 	.word	0x08017de8

08012ad8 <Display_Main_Interface_Power>:
 * @brief  显示功率
 * @param  Shift/not Shift
 * @retval None
 */
void Display_Main_Interface_Power(float Voltage,float Current)
{
 8012ad8:	b5b0      	push	{r4, r5, r7, lr}
 8012ada:	b086      	sub	sp, #24
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
	char String_Power_real[10]={'0','0','0','.','0','0'};
 8012ae2:	2408      	movs	r4, #8
 8012ae4:	1939      	adds	r1, r7, r4
 8012ae6:	4a49      	ldr	r2, [pc, #292]	; (8012c0c <Display_Main_Interface_Power+0x134>)
 8012ae8:	000b      	movs	r3, r1
 8012aea:	6810      	ldr	r0, [r2, #0]
 8012aec:	6018      	str	r0, [r3, #0]
 8012aee:	8890      	ldrh	r0, [r2, #4]
 8012af0:	8098      	strh	r0, [r3, #4]
 8012af2:	7992      	ldrb	r2, [r2, #6]
 8012af4:	719a      	strb	r2, [r3, #6]
 8012af6:	2307      	movs	r3, #7
 8012af8:	18cb      	adds	r3, r1, r3
 8012afa:	2203      	movs	r2, #3
 8012afc:	2100      	movs	r1, #0
 8012afe:	0018      	movs	r0, r3
 8012b00:	f001 fadb 	bl	80140ba <memset>
	float Power=Voltage*Current;
 8012b04:	6839      	ldr	r1, [r7, #0]
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ee f8aa 	bl	8000c60 <__aeabi_fmul>
 8012b0c:	1c03      	adds	r3, r0, #0
 8012b0e:	617b      	str	r3, [r7, #20]


	if(Power>1000)
 8012b10:	493f      	ldr	r1, [pc, #252]	; (8012c10 <Display_Main_Interface_Power+0x138>)
 8012b12:	6978      	ldr	r0, [r7, #20]
 8012b14:	f7ed fcf4 	bl	8000500 <__aeabi_fcmpgt>
 8012b18:	1e03      	subs	r3, r0, #0
 8012b1a:	d024      	beq.n	8012b66 <Display_Main_Interface_Power+0x8e>
	{
		Power/=1000.0;
 8012b1c:	493c      	ldr	r1, [pc, #240]	; (8012c10 <Display_Main_Interface_Power+0x138>)
 8012b1e:	6978      	ldr	r0, [r7, #20]
 8012b20:	f7ed fed6 	bl	80008d0 <__aeabi_fdiv>
 8012b24:	1c03      	adds	r3, r0, #0
 8012b26:	617b      	str	r3, [r7, #20]
		String_Power_real[0]='0';
 8012b28:	193b      	adds	r3, r7, r4
 8012b2a:	2230      	movs	r2, #48	; 0x30
 8012b2c:	701a      	strb	r2, [r3, #0]
		String_Power_real[1]='0';
 8012b2e:	0025      	movs	r5, r4
 8012b30:	193b      	adds	r3, r7, r4
 8012b32:	2230      	movs	r2, #48	; 0x30
 8012b34:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Power_real[2], "%4.2f", Power);
 8012b36:	6978      	ldr	r0, [r7, #20]
 8012b38:	f7f0 f9ba 	bl	8002eb0 <__aeabi_f2d>
 8012b3c:	0002      	movs	r2, r0
 8012b3e:	000b      	movs	r3, r1
 8012b40:	4c34      	ldr	r4, [pc, #208]	; (8012c14 <Display_Main_Interface_Power+0x13c>)
 8012b42:	1979      	adds	r1, r7, r5
 8012b44:	1c88      	adds	r0, r1, #2
 8012b46:	0021      	movs	r1, r4
 8012b48:	f002 f822 	bl	8014b90 <siprintf>

		Write_String_16x32AsicII(32,0,String_Power_real);
 8012b4c:	197b      	adds	r3, r7, r5
 8012b4e:	001a      	movs	r2, r3
 8012b50:	2100      	movs	r1, #0
 8012b52:	2020      	movs	r0, #32
 8012b54:	f7ff fe02 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(32,24,"KW");
 8012b58:	4b2f      	ldr	r3, [pc, #188]	; (8012c18 <Display_Main_Interface_Power+0x140>)
 8012b5a:	001a      	movs	r2, r3
 8012b5c:	2118      	movs	r1, #24
 8012b5e:	2020      	movs	r0, #32
 8012b60:	f7ff fdfc 	bl	801275c <Write_String_16x32AsicII>

		Write_String_12x24AsicII(40,0,String_Power_real);
		Write_Single_12x24AsicII(40,24,'W');
	}

}
 8012b64:	e04d      	b.n	8012c02 <Display_Main_Interface_Power+0x12a>
		if(Power>=100)     	sprintf(String_Power_real, "%6.2f", Power);//将float转为string，数据长度为6，保留两位小数
 8012b66:	492d      	ldr	r1, [pc, #180]	; (8012c1c <Display_Main_Interface_Power+0x144>)
 8012b68:	6978      	ldr	r0, [r7, #20]
 8012b6a:	f7ed fcd3 	bl	8000514 <__aeabi_fcmpge>
 8012b6e:	1e03      	subs	r3, r0, #0
 8012b70:	d00a      	beq.n	8012b88 <Display_Main_Interface_Power+0xb0>
 8012b72:	6978      	ldr	r0, [r7, #20]
 8012b74:	f7f0 f99c 	bl	8002eb0 <__aeabi_f2d>
 8012b78:	0002      	movs	r2, r0
 8012b7a:	000b      	movs	r3, r1
 8012b7c:	4928      	ldr	r1, [pc, #160]	; (8012c20 <Display_Main_Interface_Power+0x148>)
 8012b7e:	2008      	movs	r0, #8
 8012b80:	1838      	adds	r0, r7, r0
 8012b82:	f002 f805 	bl	8014b90 <siprintf>
 8012b86:	e030      	b.n	8012bea <Display_Main_Interface_Power+0x112>
		else if(Power>=9.99)
 8012b88:	6978      	ldr	r0, [r7, #20]
 8012b8a:	f7f0 f991 	bl	8002eb0 <__aeabi_f2d>
 8012b8e:	4a25      	ldr	r2, [pc, #148]	; (8012c24 <Display_Main_Interface_Power+0x14c>)
 8012b90:	4b25      	ldr	r3, [pc, #148]	; (8012c28 <Display_Main_Interface_Power+0x150>)
 8012b92:	f7ed fc85 	bl	80004a0 <__aeabi_dcmpge>
 8012b96:	1e03      	subs	r3, r0, #0
 8012b98:	d00f      	beq.n	8012bba <Display_Main_Interface_Power+0xe2>
			String_Power_real[0]=' ';
 8012b9a:	2508      	movs	r5, #8
 8012b9c:	197b      	adds	r3, r7, r5
 8012b9e:	2220      	movs	r2, #32
 8012ba0:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Power_real[1], "%5.2f", Power);
 8012ba2:	6978      	ldr	r0, [r7, #20]
 8012ba4:	f7f0 f984 	bl	8002eb0 <__aeabi_f2d>
 8012ba8:	0002      	movs	r2, r0
 8012baa:	000b      	movs	r3, r1
 8012bac:	4c1f      	ldr	r4, [pc, #124]	; (8012c2c <Display_Main_Interface_Power+0x154>)
 8012bae:	1979      	adds	r1, r7, r5
 8012bb0:	1c48      	adds	r0, r1, #1
 8012bb2:	0021      	movs	r1, r4
 8012bb4:	f001 ffec 	bl	8014b90 <siprintf>
 8012bb8:	e017      	b.n	8012bea <Display_Main_Interface_Power+0x112>
		else if(Power>=0)
 8012bba:	2100      	movs	r1, #0
 8012bbc:	6978      	ldr	r0, [r7, #20]
 8012bbe:	f7ed fca9 	bl	8000514 <__aeabi_fcmpge>
 8012bc2:	1e03      	subs	r3, r0, #0
 8012bc4:	d011      	beq.n	8012bea <Display_Main_Interface_Power+0x112>
			String_Power_real[0]=' ';
 8012bc6:	2508      	movs	r5, #8
 8012bc8:	197b      	adds	r3, r7, r5
 8012bca:	2220      	movs	r2, #32
 8012bcc:	701a      	strb	r2, [r3, #0]
			String_Power_real[1]=' ';
 8012bce:	197b      	adds	r3, r7, r5
 8012bd0:	2220      	movs	r2, #32
 8012bd2:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Power_real[2],"%4.2f", Power);
 8012bd4:	6978      	ldr	r0, [r7, #20]
 8012bd6:	f7f0 f96b 	bl	8002eb0 <__aeabi_f2d>
 8012bda:	0002      	movs	r2, r0
 8012bdc:	000b      	movs	r3, r1
 8012bde:	4c0d      	ldr	r4, [pc, #52]	; (8012c14 <Display_Main_Interface_Power+0x13c>)
 8012be0:	1979      	adds	r1, r7, r5
 8012be2:	1c88      	adds	r0, r1, #2
 8012be4:	0021      	movs	r1, r4
 8012be6:	f001 ffd3 	bl	8014b90 <siprintf>
		Write_String_12x24AsicII(40,0,String_Power_real);
 8012bea:	2308      	movs	r3, #8
 8012bec:	18fb      	adds	r3, r7, r3
 8012bee:	001a      	movs	r2, r3
 8012bf0:	2100      	movs	r1, #0
 8012bf2:	2028      	movs	r0, #40	; 0x28
 8012bf4:	f7ff fe50 	bl	8012898 <Write_String_12x24AsicII>
		Write_Single_12x24AsicII(40,24,'W');
 8012bf8:	2257      	movs	r2, #87	; 0x57
 8012bfa:	2118      	movs	r1, #24
 8012bfc:	2028      	movs	r0, #40	; 0x28
 8012bfe:	f7ff fdeb 	bl	80127d8 <Write_Single_12x24AsicII>
}
 8012c02:	46c0      	nop			; (mov r8, r8)
 8012c04:	46bd      	mov	sp, r7
 8012c06:	b006      	add	sp, #24
 8012c08:	bdb0      	pop	{r4, r5, r7, pc}
 8012c0a:	46c0      	nop			; (mov r8, r8)
 8012c0c:	08017df0 	.word	0x08017df0
 8012c10:	447a0000 	.word	0x447a0000
 8012c14:	08017dd4 	.word	0x08017dd4
 8012c18:	08017dec 	.word	0x08017dec
 8012c1c:	42c80000 	.word	0x42c80000
 8012c20:	08017dc4 	.word	0x08017dc4
 8012c24:	47ae147b 	.word	0x47ae147b
 8012c28:	4023fae1 	.word	0x4023fae1
 8012c2c:	08017dcc 	.word	0x08017dcc

08012c30 <Display_Main_Interface_Lock>:
 * @brief  显示键盘锁定状态
 * @param  显示ON，不显示OFF
 * @retval None
 */
static void Display_Main_Interface_Lock(uint8_t State)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	0002      	movs	r2, r0
 8012c38:	1dfb      	adds	r3, r7, #7
 8012c3a:	701a      	strb	r2, [r3, #0]
	if(State==UNLOCK) Write_String_8x16AsicII(32,36, "      ");
 8012c3c:	1dfb      	adds	r3, r7, #7
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d106      	bne.n	8012c52 <Display_Main_Interface_Lock+0x22>
 8012c44:	4b08      	ldr	r3, [pc, #32]	; (8012c68 <Display_Main_Interface_Lock+0x38>)
 8012c46:	001a      	movs	r2, r3
 8012c48:	2124      	movs	r1, #36	; 0x24
 8012c4a:	2020      	movs	r0, #32
 8012c4c:	f7ff fd04 	bl	8012658 <Write_String_8x16AsicII>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");

}
 8012c50:	e005      	b.n	8012c5e <Display_Main_Interface_Lock+0x2e>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");
 8012c52:	4b06      	ldr	r3, [pc, #24]	; (8012c6c <Display_Main_Interface_Lock+0x3c>)
 8012c54:	001a      	movs	r2, r3
 8012c56:	2124      	movs	r1, #36	; 0x24
 8012c58:	2020      	movs	r0, #32
 8012c5a:	f7ff fcfd 	bl	8012658 <Write_String_8x16AsicII>
}
 8012c5e:	46c0      	nop			; (mov r8, r8)
 8012c60:	46bd      	mov	sp, r7
 8012c62:	b002      	add	sp, #8
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	46c0      	nop			; (mov r8, r8)
 8012c68:	08017dfc 	.word	0x08017dfc
 8012c6c:	08017e04 	.word	0x08017e04

08012c70 <Display_Main_Interface_CV_CC_CP>:
 * @brief  显示处于CV/CC/CP状态
 * @param  CV/CC/CP
 * @retval None
 */
void Display_Main_Interface_CV_CC_CP(uint8_t CV_CC_CP)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	0002      	movs	r2, r0
 8012c78:	1dfb      	adds	r3, r7, #7
 8012c7a:	701a      	strb	r2, [r3, #0]
	uint8_t State;

	State = CV_CC_CP;
 8012c7c:	210f      	movs	r1, #15
 8012c7e:	187b      	adds	r3, r7, r1
 8012c80:	1dfa      	adds	r2, r7, #7
 8012c82:	7812      	ldrb	r2, [r2, #0]
 8012c84:	701a      	strb	r2, [r3, #0]
	switch(State)
 8012c86:	187b      	adds	r3, r7, r1
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	2b01      	cmp	r3, #1
 8012c8c:	d002      	beq.n	8012c94 <Display_Main_Interface_CV_CC_CP+0x24>
 8012c8e:	2b02      	cmp	r3, #2
 8012c90:	d007      	beq.n	8012ca2 <Display_Main_Interface_CV_CC_CP+0x32>
 8012c92:	e00d      	b.n	8012cb0 <Display_Main_Interface_CV_CC_CP+0x40>
	{
		case CV:
			Write_String_8x16AsicII(48, 36, "CV");break;
 8012c94:	4b0c      	ldr	r3, [pc, #48]	; (8012cc8 <Display_Main_Interface_CV_CC_CP+0x58>)
 8012c96:	001a      	movs	r2, r3
 8012c98:	2124      	movs	r1, #36	; 0x24
 8012c9a:	2030      	movs	r0, #48	; 0x30
 8012c9c:	f7ff fcdc 	bl	8012658 <Write_String_8x16AsicII>
 8012ca0:	e00d      	b.n	8012cbe <Display_Main_Interface_CV_CC_CP+0x4e>
		case CC:
			Write_String_8x16AsicII(48, 36, "CC");break;
 8012ca2:	4b0a      	ldr	r3, [pc, #40]	; (8012ccc <Display_Main_Interface_CV_CC_CP+0x5c>)
 8012ca4:	001a      	movs	r2, r3
 8012ca6:	2124      	movs	r1, #36	; 0x24
 8012ca8:	2030      	movs	r0, #48	; 0x30
 8012caa:	f7ff fcd5 	bl	8012658 <Write_String_8x16AsicII>
 8012cae:	e006      	b.n	8012cbe <Display_Main_Interface_CV_CC_CP+0x4e>
		default:
			{
				Write_String_8x16AsicII(48, 36, "  ");
 8012cb0:	4b07      	ldr	r3, [pc, #28]	; (8012cd0 <Display_Main_Interface_CV_CC_CP+0x60>)
 8012cb2:	001a      	movs	r2, r3
 8012cb4:	2124      	movs	r1, #36	; 0x24
 8012cb6:	2030      	movs	r0, #48	; 0x30
 8012cb8:	f7ff fcce 	bl	8012658 <Write_String_8x16AsicII>
				break;
 8012cbc:	46c0      	nop			; (mov r8, r8)
			}
	}
}
 8012cbe:	46c0      	nop			; (mov r8, r8)
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	b004      	add	sp, #16
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	46c0      	nop			; (mov r8, r8)
 8012cc8:	08017e0c 	.word	0x08017e0c
 8012ccc:	08017e10 	.word	0x08017e10
 8012cd0:	08017e14 	.word	0x08017e14

08012cd4 <Display_Main_Interface_ON_OFF>:
 * @brief  显示处于ON/OFF状态
 * @param  ON/OFF
 * @retval None
 */
void Display_Main_Interface_ON_OFF(uint8_t State)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	0002      	movs	r2, r0
 8012cdc:	1dfb      	adds	r3, r7, #7
 8012cde:	701a      	strb	r2, [r3, #0]
	if(State==OUTPUT)
 8012ce0:	1dfb      	adds	r3, r7, #7
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	d106      	bne.n	8012cf6 <Display_Main_Interface_ON_OFF+0x22>
	{
		Write_String_8x16AsicII(48, 58, "ON ");
 8012ce8:	4b08      	ldr	r3, [pc, #32]	; (8012d0c <Display_Main_Interface_ON_OFF+0x38>)
 8012cea:	001a      	movs	r2, r3
 8012cec:	213a      	movs	r1, #58	; 0x3a
 8012cee:	2030      	movs	r0, #48	; 0x30
 8012cf0:	f7ff fcb2 	bl	8012658 <Write_String_8x16AsicII>
	}
	else
	{
		Write_String_8x16AsicII(48, 58, "OFF");
	}
}
 8012cf4:	e005      	b.n	8012d02 <Display_Main_Interface_ON_OFF+0x2e>
		Write_String_8x16AsicII(48, 58, "OFF");
 8012cf6:	4b06      	ldr	r3, [pc, #24]	; (8012d10 <Display_Main_Interface_ON_OFF+0x3c>)
 8012cf8:	001a      	movs	r2, r3
 8012cfa:	213a      	movs	r1, #58	; 0x3a
 8012cfc:	2030      	movs	r0, #48	; 0x30
 8012cfe:	f7ff fcab 	bl	8012658 <Write_String_8x16AsicII>
}
 8012d02:	46c0      	nop			; (mov r8, r8)
 8012d04:	46bd      	mov	sp, r7
 8012d06:	b002      	add	sp, #8
 8012d08:	bd80      	pop	{r7, pc}
 8012d0a:	46c0      	nop			; (mov r8, r8)
 8012d0c:	08017e18 	.word	0x08017e18
 8012d10:	08017e1c 	.word	0x08017e1c

08012d14 <Display_Main_Interface_Shift>:
 * @brief  显示处于Shift/not Shift状态
 * @param  Shift/not Shift
 * @retval None
 */
static void Display_Main_Interface_Shift(uint8_t State)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	0002      	movs	r2, r0
 8012d1c:	1dfb      	adds	r3, r7, #7
 8012d1e:	701a      	strb	r2, [r3, #0]
	switch(State)
 8012d20:	1dfb      	adds	r3, r7, #7
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d008      	beq.n	8012d3a <Display_Main_Interface_Shift+0x26>
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d10d      	bne.n	8012d48 <Display_Main_Interface_Shift+0x34>
	{
		case Shift: Write_String_8x16AsicII(48,44, "Shift"); break;
 8012d2c:	4b09      	ldr	r3, [pc, #36]	; (8012d54 <Display_Main_Interface_Shift+0x40>)
 8012d2e:	001a      	movs	r2, r3
 8012d30:	212c      	movs	r1, #44	; 0x2c
 8012d32:	2030      	movs	r0, #48	; 0x30
 8012d34:	f7ff fc90 	bl	8012658 <Write_String_8x16AsicII>
 8012d38:	e007      	b.n	8012d4a <Display_Main_Interface_Shift+0x36>
		case Not_Shift: Write_String_8x16AsicII(48, 44, "     "); break;
 8012d3a:	4b07      	ldr	r3, [pc, #28]	; (8012d58 <Display_Main_Interface_Shift+0x44>)
 8012d3c:	001a      	movs	r2, r3
 8012d3e:	212c      	movs	r1, #44	; 0x2c
 8012d40:	2030      	movs	r0, #48	; 0x30
 8012d42:	f7ff fc89 	bl	8012658 <Write_String_8x16AsicII>
 8012d46:	e000      	b.n	8012d4a <Display_Main_Interface_Shift+0x36>
		default: break;
 8012d48:	46c0      	nop			; (mov r8, r8)
	}
}
 8012d4a:	46c0      	nop			; (mov r8, r8)
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	b002      	add	sp, #8
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	46c0      	nop			; (mov r8, r8)
 8012d54:	08017e20 	.word	0x08017e20
 8012d58:	08017e28 	.word	0x08017e28

08012d5c <Display_Main_Interface_V_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_V_set  (void)

{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,56,"VSET");
 8012d62:	4b36      	ldr	r3, [pc, #216]	; (8012e3c <Display_Main_Interface_V_set+0xe0>)
 8012d64:	001a      	movs	r2, r3
 8012d66:	2138      	movs	r1, #56	; 0x38
 8012d68:	2030      	movs	r0, #48	; 0x30
 8012d6a:	f7ff fc75 	bl	8012658 <Write_String_8x16AsicII>
	Write_String_16x32AsicII(16,0,String_Voltage);
 8012d6e:	4b34      	ldr	r3, [pc, #208]	; (8012e40 <Display_Main_Interface_V_set+0xe4>)
 8012d70:	001a      	movs	r2, r3
 8012d72:	2100      	movs	r1, #0
 8012d74:	2010      	movs	r0, #16
 8012d76:	f7ff fcf1 	bl	801275c <Write_String_16x32AsicII>

	//显示之前电流设定值
	float Current=Set_Current/100.0;
 8012d7a:	4b32      	ldr	r3, [pc, #200]	; (8012e44 <Display_Main_Interface_V_set+0xe8>)
 8012d7c:	881b      	ldrh	r3, [r3, #0]
 8012d7e:	0018      	movs	r0, r3
 8012d80:	f7f0 f840 	bl	8002e04 <__aeabi_i2d>
 8012d84:	2200      	movs	r2, #0
 8012d86:	4b30      	ldr	r3, [pc, #192]	; (8012e48 <Display_Main_Interface_V_set+0xec>)
 8012d88:	f7ee fde8 	bl	800195c <__aeabi_ddiv>
 8012d8c:	0002      	movs	r2, r0
 8012d8e:	000b      	movs	r3, r1
 8012d90:	0010      	movs	r0, r2
 8012d92:	0019      	movs	r1, r3
 8012d94:	f7f0 f8d4 	bl	8002f40 <__aeabi_d2f>
 8012d98:	1c03      	adds	r3, r0, #0
 8012d9a:	607b      	str	r3, [r7, #4]
	static char String_Current_real[7]={'0','0','0','.','0','0'};
	if(Current>=100)   		sprintf(String_Current_real, "%6.2f", Current);//将float转为string，保留一位小数
 8012d9c:	492b      	ldr	r1, [pc, #172]	; (8012e4c <Display_Main_Interface_V_set+0xf0>)
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7ed fbb8 	bl	8000514 <__aeabi_fcmpge>
 8012da4:	1e03      	subs	r3, r0, #0
 8012da6:	d009      	beq.n	8012dbc <Display_Main_Interface_V_set+0x60>
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7f0 f881 	bl	8002eb0 <__aeabi_f2d>
 8012dae:	0002      	movs	r2, r0
 8012db0:	000b      	movs	r3, r1
 8012db2:	4927      	ldr	r1, [pc, #156]	; (8012e50 <Display_Main_Interface_V_set+0xf4>)
 8012db4:	4827      	ldr	r0, [pc, #156]	; (8012e54 <Display_Main_Interface_V_set+0xf8>)
 8012db6:	f001 feeb 	bl	8014b90 <siprintf>
 8012dba:	e02a      	b.n	8012e12 <Display_Main_Interface_V_set+0xb6>
	else if(Current>=9.99)
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f7f0 f877 	bl	8002eb0 <__aeabi_f2d>
 8012dc2:	4a25      	ldr	r2, [pc, #148]	; (8012e58 <Display_Main_Interface_V_set+0xfc>)
 8012dc4:	4b25      	ldr	r3, [pc, #148]	; (8012e5c <Display_Main_Interface_V_set+0x100>)
 8012dc6:	f7ed fb6b 	bl	80004a0 <__aeabi_dcmpge>
 8012dca:	1e03      	subs	r3, r0, #0
 8012dcc:	d00c      	beq.n	8012de8 <Display_Main_Interface_V_set+0x8c>
	{
		String_Current_real[0]='0';
 8012dce:	4b21      	ldr	r3, [pc, #132]	; (8012e54 <Display_Main_Interface_V_set+0xf8>)
 8012dd0:	2230      	movs	r2, #48	; 0x30
 8012dd2:	701a      	strb	r2, [r3, #0]
		sprintf(&String_Current_real[1], "%5.2f", Current);//保留两位小数
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f7f0 f86b 	bl	8002eb0 <__aeabi_f2d>
 8012dda:	0002      	movs	r2, r0
 8012ddc:	000b      	movs	r3, r1
 8012dde:	4920      	ldr	r1, [pc, #128]	; (8012e60 <Display_Main_Interface_V_set+0x104>)
 8012de0:	4820      	ldr	r0, [pc, #128]	; (8012e64 <Display_Main_Interface_V_set+0x108>)
 8012de2:	f001 fed5 	bl	8014b90 <siprintf>
 8012de6:	e014      	b.n	8012e12 <Display_Main_Interface_V_set+0xb6>
	}
	else if(Current>=0)
 8012de8:	2100      	movs	r1, #0
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ed fb92 	bl	8000514 <__aeabi_fcmpge>
 8012df0:	1e03      	subs	r3, r0, #0
 8012df2:	d00e      	beq.n	8012e12 <Display_Main_Interface_V_set+0xb6>
	{
		String_Current_real[0]='0';
 8012df4:	4b17      	ldr	r3, [pc, #92]	; (8012e54 <Display_Main_Interface_V_set+0xf8>)
 8012df6:	2230      	movs	r2, #48	; 0x30
 8012df8:	701a      	strb	r2, [r3, #0]
		String_Current_real[1]='0';
 8012dfa:	4b16      	ldr	r3, [pc, #88]	; (8012e54 <Display_Main_Interface_V_set+0xf8>)
 8012dfc:	2230      	movs	r2, #48	; 0x30
 8012dfe:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Current_real[2], "%4.2f", Current);
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f7f0 f855 	bl	8002eb0 <__aeabi_f2d>
 8012e06:	0002      	movs	r2, r0
 8012e08:	000b      	movs	r3, r1
 8012e0a:	4917      	ldr	r1, [pc, #92]	; (8012e68 <Display_Main_Interface_V_set+0x10c>)
 8012e0c:	4817      	ldr	r0, [pc, #92]	; (8012e6c <Display_Main_Interface_V_set+0x110>)
 8012e0e:	f001 febf 	bl	8014b90 <siprintf>

	}
	Write_String_16x32AsicII(16,36,String_Current_real);
 8012e12:	4b10      	ldr	r3, [pc, #64]	; (8012e54 <Display_Main_Interface_V_set+0xf8>)
 8012e14:	001a      	movs	r2, r3
 8012e16:	2124      	movs	r1, #36	; 0x24
 8012e18:	2010      	movs	r0, #16
 8012e1a:	f7ff fc9f 	bl	801275c <Write_String_16x32AsicII>
	Write_Single_16x32AsicII(16,60,'A');
 8012e1e:	2241      	movs	r2, #65	; 0x41
 8012e20:	213c      	movs	r1, #60	; 0x3c
 8012e22:	2010      	movs	r0, #16
 8012e24:	f7ff fc56 	bl	80126d4 <Write_Single_16x32AsicII>
	/*显示电压设定值*/
	Write_String_16x32AsicII(16,0,String_Voltage);
 8012e28:	4b05      	ldr	r3, [pc, #20]	; (8012e40 <Display_Main_Interface_V_set+0xe4>)
 8012e2a:	001a      	movs	r2, r3
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	2010      	movs	r0, #16
 8012e30:	f7ff fc94 	bl	801275c <Write_String_16x32AsicII>

}
 8012e34:	46c0      	nop			; (mov r8, r8)
 8012e36:	46bd      	mov	sp, r7
 8012e38:	b002      	add	sp, #8
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	08017e60 	.word	0x08017e60
 8012e40:	2000305c 	.word	0x2000305c
 8012e44:	20002fdc 	.word	0x20002fdc
 8012e48:	40590000 	.word	0x40590000
 8012e4c:	42c80000 	.word	0x42c80000
 8012e50:	08017dc4 	.word	0x08017dc4
 8012e54:	200030b8 	.word	0x200030b8
 8012e58:	47ae147b 	.word	0x47ae147b
 8012e5c:	4023fae1 	.word	0x4023fae1
 8012e60:	08017dcc 	.word	0x08017dcc
 8012e64:	200030b9 	.word	0x200030b9
 8012e68:	08017dd4 	.word	0x08017dd4
 8012e6c:	200030ba 	.word	0x200030ba

08012e70 <Display_Main_Interface_I_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_I_set  (void)

{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b082      	sub	sp, #8
 8012e74:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,56,"ISET");
 8012e76:	4b33      	ldr	r3, [pc, #204]	; (8012f44 <Display_Main_Interface_I_set+0xd4>)
 8012e78:	001a      	movs	r2, r3
 8012e7a:	2138      	movs	r1, #56	; 0x38
 8012e7c:	2030      	movs	r0, #48	; 0x30
 8012e7e:	f7ff fbeb 	bl	8012658 <Write_String_8x16AsicII>
	float Voltage=Set_Voltage/100.0;
 8012e82:	4b31      	ldr	r3, [pc, #196]	; (8012f48 <Display_Main_Interface_I_set+0xd8>)
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	0018      	movs	r0, r3
 8012e88:	f7ef ffbc 	bl	8002e04 <__aeabi_i2d>
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	4b2f      	ldr	r3, [pc, #188]	; (8012f4c <Display_Main_Interface_I_set+0xdc>)
 8012e90:	f7ee fd64 	bl	800195c <__aeabi_ddiv>
 8012e94:	0002      	movs	r2, r0
 8012e96:	000b      	movs	r3, r1
 8012e98:	0010      	movs	r0, r2
 8012e9a:	0019      	movs	r1, r3
 8012e9c:	f7f0 f850 	bl	8002f40 <__aeabi_d2f>
 8012ea0:	1c03      	adds	r3, r0, #0
 8012ea2:	607b      	str	r3, [r7, #4]
	//显示之前电压设定值
	static char String_Voltage_real[7]={'0','0','0','.','0','0'};
	if(Voltage>=100)   		sprintf(String_Voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 8012ea4:	492a      	ldr	r1, [pc, #168]	; (8012f50 <Display_Main_Interface_I_set+0xe0>)
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7ed fb34 	bl	8000514 <__aeabi_fcmpge>
 8012eac:	1e03      	subs	r3, r0, #0
 8012eae:	d009      	beq.n	8012ec4 <Display_Main_Interface_I_set+0x54>
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f7ef fffd 	bl	8002eb0 <__aeabi_f2d>
 8012eb6:	0002      	movs	r2, r0
 8012eb8:	000b      	movs	r3, r1
 8012eba:	4926      	ldr	r1, [pc, #152]	; (8012f54 <Display_Main_Interface_I_set+0xe4>)
 8012ebc:	4826      	ldr	r0, [pc, #152]	; (8012f58 <Display_Main_Interface_I_set+0xe8>)
 8012ebe:	f001 fe67 	bl	8014b90 <siprintf>
 8012ec2:	e02a      	b.n	8012f1a <Display_Main_Interface_I_set+0xaa>
	else if(Voltage>=9.99)
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7ef fff3 	bl	8002eb0 <__aeabi_f2d>
 8012eca:	4a24      	ldr	r2, [pc, #144]	; (8012f5c <Display_Main_Interface_I_set+0xec>)
 8012ecc:	4b24      	ldr	r3, [pc, #144]	; (8012f60 <Display_Main_Interface_I_set+0xf0>)
 8012ece:	f7ed fae7 	bl	80004a0 <__aeabi_dcmpge>
 8012ed2:	1e03      	subs	r3, r0, #0
 8012ed4:	d00c      	beq.n	8012ef0 <Display_Main_Interface_I_set+0x80>
	{
		String_Voltage_real[0]='0';
 8012ed6:	4b20      	ldr	r3, [pc, #128]	; (8012f58 <Display_Main_Interface_I_set+0xe8>)
 8012ed8:	2230      	movs	r2, #48	; 0x30
 8012eda:	701a      	strb	r2, [r3, #0]
		sprintf(&String_Voltage_real[1], "%5.2f", Voltage);//保留两位小数
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f7ef ffe7 	bl	8002eb0 <__aeabi_f2d>
 8012ee2:	0002      	movs	r2, r0
 8012ee4:	000b      	movs	r3, r1
 8012ee6:	491f      	ldr	r1, [pc, #124]	; (8012f64 <Display_Main_Interface_I_set+0xf4>)
 8012ee8:	481f      	ldr	r0, [pc, #124]	; (8012f68 <Display_Main_Interface_I_set+0xf8>)
 8012eea:	f001 fe51 	bl	8014b90 <siprintf>
 8012eee:	e014      	b.n	8012f1a <Display_Main_Interface_I_set+0xaa>
	}
	else if(Voltage>=0)
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f7ed fb0e 	bl	8000514 <__aeabi_fcmpge>
 8012ef8:	1e03      	subs	r3, r0, #0
 8012efa:	d00e      	beq.n	8012f1a <Display_Main_Interface_I_set+0xaa>
	{
		String_Voltage_real[0]='0';
 8012efc:	4b16      	ldr	r3, [pc, #88]	; (8012f58 <Display_Main_Interface_I_set+0xe8>)
 8012efe:	2230      	movs	r2, #48	; 0x30
 8012f00:	701a      	strb	r2, [r3, #0]
		String_Voltage_real[1]='0';
 8012f02:	4b15      	ldr	r3, [pc, #84]	; (8012f58 <Display_Main_Interface_I_set+0xe8>)
 8012f04:	2230      	movs	r2, #48	; 0x30
 8012f06:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Voltage_real[2], "%4.2f", Voltage);
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7ef ffd1 	bl	8002eb0 <__aeabi_f2d>
 8012f0e:	0002      	movs	r2, r0
 8012f10:	000b      	movs	r3, r1
 8012f12:	4916      	ldr	r1, [pc, #88]	; (8012f6c <Display_Main_Interface_I_set+0xfc>)
 8012f14:	4816      	ldr	r0, [pc, #88]	; (8012f70 <Display_Main_Interface_I_set+0x100>)
 8012f16:	f001 fe3b 	bl	8014b90 <siprintf>

	}

	Write_String_16x32AsicII(16, 0, String_Voltage_real);
 8012f1a:	4b0f      	ldr	r3, [pc, #60]	; (8012f58 <Display_Main_Interface_I_set+0xe8>)
 8012f1c:	001a      	movs	r2, r3
 8012f1e:	2100      	movs	r1, #0
 8012f20:	2010      	movs	r0, #16
 8012f22:	f7ff fc1b 	bl	801275c <Write_String_16x32AsicII>
	Write_Single_16x32AsicII(16,24, 'V');
 8012f26:	2256      	movs	r2, #86	; 0x56
 8012f28:	2118      	movs	r1, #24
 8012f2a:	2010      	movs	r0, #16
 8012f2c:	f7ff fbd2 	bl	80126d4 <Write_Single_16x32AsicII>
	/*显示电流设定值*/
	Write_String_16x32AsicII(16,36,String_Current);
 8012f30:	4b10      	ldr	r3, [pc, #64]	; (8012f74 <Display_Main_Interface_I_set+0x104>)
 8012f32:	001a      	movs	r2, r3
 8012f34:	2124      	movs	r1, #36	; 0x24
 8012f36:	2010      	movs	r0, #16
 8012f38:	f7ff fc10 	bl	801275c <Write_String_16x32AsicII>

}
 8012f3c:	46c0      	nop			; (mov r8, r8)
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	b002      	add	sp, #8
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	08017e68 	.word	0x08017e68
 8012f48:	20002fda 	.word	0x20002fda
 8012f4c:	40590000 	.word	0x40590000
 8012f50:	42c80000 	.word	0x42c80000
 8012f54:	08017dc4 	.word	0x08017dc4
 8012f58:	200030c0 	.word	0x200030c0
 8012f5c:	47ae147b 	.word	0x47ae147b
 8012f60:	4023fae1 	.word	0x4023fae1
 8012f64:	08017dcc 	.word	0x08017dcc
 8012f68:	200030c1 	.word	0x200030c1
 8012f6c:	08017dd4 	.word	0x08017dd4
 8012f70:	200030c2 	.word	0x200030c2
 8012f74:	20003064 	.word	0x20003064

08012f78 <Display_Main_Interface>:
							const uint8_t DELAY_NOT_DELAY,
							const uint8_t Preset_Actual,
							const uint8_t LOCK_UNLOCK,
							const uint8_t Shift_NotShift)

{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	60f8      	str	r0, [r7, #12]
 8012f80:	60b9      	str	r1, [r7, #8]
 8012f82:	0019      	movs	r1, r3
 8012f84:	1dfb      	adds	r3, r7, #7
 8012f86:	701a      	strb	r2, [r3, #0]
 8012f88:	1dbb      	adds	r3, r7, #6
 8012f8a:	1c0a      	adds	r2, r1, #0
 8012f8c:	701a      	strb	r2, [r3, #0]


		//Current_Actual=Current_real;
		Display_Main_Interface_Voltage(Voltage_Actual);
 8012f8e:	4b16      	ldr	r3, [pc, #88]	; (8012fe8 <Display_Main_Interface+0x70>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	1c18      	adds	r0, r3, #0
 8012f94:	f7ff fcc0 	bl	8012918 <Display_Main_Interface_Voltage>
		Display_Main_Interface_Current(Current_Actual);
 8012f98:	4b14      	ldr	r3, [pc, #80]	; (8012fec <Display_Main_Interface+0x74>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	1c18      	adds	r0, r3, #0
 8012f9e:	f7ff fd2b 	bl	80129f8 <Display_Main_Interface_Current>
		Display_Main_Interface_Power(Voltage_Actual,Current_Actual);
 8012fa2:	4b11      	ldr	r3, [pc, #68]	; (8012fe8 <Display_Main_Interface+0x70>)
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	4b11      	ldr	r3, [pc, #68]	; (8012fec <Display_Main_Interface+0x74>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	1c19      	adds	r1, r3, #0
 8012fac:	1c10      	adds	r0, r2, #0
 8012fae:	f7ff fd93 	bl	8012ad8 <Display_Main_Interface_Power>
		Display_Main_Interface_Lock(LOCK_UNLOCK);
 8012fb2:	2324      	movs	r3, #36	; 0x24
 8012fb4:	18fb      	adds	r3, r7, r3
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	0018      	movs	r0, r3
 8012fba:	f7ff fe39 	bl	8012c30 <Display_Main_Interface_Lock>

		Display_Main_Interface_CV_CC_CP(CV_CC_CP);
 8012fbe:	1dbb      	adds	r3, r7, #6
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	0018      	movs	r0, r3
 8012fc4:	f7ff fe54 	bl	8012c70 <Display_Main_Interface_CV_CC_CP>
		//Display_Main_Interface_CYCLE_DELAY(CYCLE_NOT_CYCLE, DELAY_NOT_DELAY);
		Display_Main_Interface_ON_OFF(OUTPUT_NOT_OUTPUT);
 8012fc8:	4b09      	ldr	r3, [pc, #36]	; (8012ff0 <Display_Main_Interface+0x78>)
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	0018      	movs	r0, r3
 8012fce:	f7ff fe81 	bl	8012cd4 <Display_Main_Interface_ON_OFF>
		Display_Main_Interface_Shift(Shift_NotShift);
 8012fd2:	2328      	movs	r3, #40	; 0x28
 8012fd4:	18fb      	adds	r3, r7, r3
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	0018      	movs	r0, r3
 8012fda:	f7ff fe9b 	bl	8012d14 <Display_Main_Interface_Shift>
		//Display_Vertical_Line_1(44,0,63);

//		Voltage_index++;

}
 8012fde:	46c0      	nop			; (mov r8, r8)
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	b004      	add	sp, #16
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	46c0      	nop			; (mov r8, r8)
 8012fe8:	20003984 	.word	0x20003984
 8012fec:	20003988 	.word	0x20003988
 8012ff0:	20003971 	.word	0x20003971

08012ff4 <Display_Param_Interface>:

void Display_Param_Interface(const uint16_t Set_Voltage,const uint16_t Set_Current)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	0002      	movs	r2, r0
 8012ffc:	1dbb      	adds	r3, r7, #6
 8012ffe:	801a      	strh	r2, [r3, #0]
 8013000:	1d3b      	adds	r3, r7, #4
 8013002:	1c0a      	adds	r2, r1, #0
 8013004:	801a      	strh	r2, [r3, #0]

	float Voltage,Current;
	Voltage=Set_Voltage/100.0;
 8013006:	1dbb      	adds	r3, r7, #6
 8013008:	881b      	ldrh	r3, [r3, #0]
 801300a:	0018      	movs	r0, r3
 801300c:	f7ef fefa 	bl	8002e04 <__aeabi_i2d>
 8013010:	2200      	movs	r2, #0
 8013012:	4b17      	ldr	r3, [pc, #92]	; (8013070 <Display_Param_Interface+0x7c>)
 8013014:	f7ee fca2 	bl	800195c <__aeabi_ddiv>
 8013018:	0002      	movs	r2, r0
 801301a:	000b      	movs	r3, r1
 801301c:	0010      	movs	r0, r2
 801301e:	0019      	movs	r1, r3
 8013020:	f7ef ff8e 	bl	8002f40 <__aeabi_d2f>
 8013024:	1c03      	adds	r3, r0, #0
 8013026:	60fb      	str	r3, [r7, #12]
	Current=Set_Current/100.0;
 8013028:	1d3b      	adds	r3, r7, #4
 801302a:	881b      	ldrh	r3, [r3, #0]
 801302c:	0018      	movs	r0, r3
 801302e:	f7ef fee9 	bl	8002e04 <__aeabi_i2d>
 8013032:	2200      	movs	r2, #0
 8013034:	4b0e      	ldr	r3, [pc, #56]	; (8013070 <Display_Param_Interface+0x7c>)
 8013036:	f7ee fc91 	bl	800195c <__aeabi_ddiv>
 801303a:	0002      	movs	r2, r0
 801303c:	000b      	movs	r3, r1
 801303e:	0010      	movs	r0, r2
 8013040:	0019      	movs	r1, r3
 8013042:	f7ef ff7d 	bl	8002f40 <__aeabi_d2f>
 8013046:	1c03      	adds	r3, r0, #0
 8013048:	60bb      	str	r3, [r7, #8]
	Display_Main_Interface_Voltage(Voltage);
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	1c18      	adds	r0, r3, #0
 801304e:	f7ff fc63 	bl	8012918 <Display_Main_Interface_Voltage>
	Display_Main_Interface_Current(Current);
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	1c18      	adds	r0, r3, #0
 8013056:	f7ff fccf 	bl	80129f8 <Display_Main_Interface_Current>
	Display_Main_Interface_Power(Voltage,Current);
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	1c11      	adds	r1, r2, #0
 8013060:	1c18      	adds	r0, r3, #0
 8013062:	f7ff fd39 	bl	8012ad8 <Display_Main_Interface_Power>
}
 8013066:	46c0      	nop			; (mov r8, r8)
 8013068:	46bd      	mov	sp, r7
 801306a:	b004      	add	sp, #16
 801306c:	bd80      	pop	{r7, pc}
 801306e:	46c0      	nop			; (mov r8, r8)
 8013070:	40590000 	.word	0x40590000

08013074 <Display_Access_Interface_Voltage>:
 * @brief  显示存取界面电压值
 * @param  设定的电压值，范围0到99.99V
 * @retval None
 */
static void Display_Access_Interface_Voltage(float Voltage)
{
 8013074:	b5b0      	push	{r4, r5, r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]

	char string_voltage[7]={0};
 801307c:	2408      	movs	r4, #8
 801307e:	193b      	adds	r3, r7, r4
 8013080:	2200      	movs	r2, #0
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	3304      	adds	r3, #4
 8013086:	2203      	movs	r2, #3
 8013088:	2100      	movs	r1, #0
 801308a:	0018      	movs	r0, r3
 801308c:	f001 f815 	bl	80140ba <memset>
	if(Voltage>=100)      sprintf(string_voltage, "%6.2f", Voltage);
 8013090:	4931      	ldr	r1, [pc, #196]	; (8013158 <Display_Access_Interface_Voltage+0xe4>)
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7ed fa3e 	bl	8000514 <__aeabi_fcmpge>
 8013098:	1e03      	subs	r3, r0, #0
 801309a:	d009      	beq.n	80130b0 <Display_Access_Interface_Voltage+0x3c>
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f7ef ff07 	bl	8002eb0 <__aeabi_f2d>
 80130a2:	0002      	movs	r2, r0
 80130a4:	000b      	movs	r3, r1
 80130a6:	492d      	ldr	r1, [pc, #180]	; (801315c <Display_Access_Interface_Voltage+0xe8>)
 80130a8:	1938      	adds	r0, r7, r4
 80130aa:	f001 fd71 	bl	8014b90 <siprintf>
 80130ae:	e02d      	b.n	801310c <Display_Access_Interface_Voltage+0x98>
	else if(Voltage>=10)
 80130b0:	492b      	ldr	r1, [pc, #172]	; (8013160 <Display_Access_Interface_Voltage+0xec>)
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f7ed fa2e 	bl	8000514 <__aeabi_fcmpge>
 80130b8:	1e03      	subs	r3, r0, #0
 80130ba:	d00f      	beq.n	80130dc <Display_Access_Interface_Voltage+0x68>
	{
		string_voltage[0]='0';
 80130bc:	2508      	movs	r5, #8
 80130be:	197b      	adds	r3, r7, r5
 80130c0:	2230      	movs	r2, #48	; 0x30
 80130c2:	701a      	strb	r2, [r3, #0]
		sprintf(&string_voltage[1], "%5.2f", Voltage);
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7ef fef3 	bl	8002eb0 <__aeabi_f2d>
 80130ca:	0002      	movs	r2, r0
 80130cc:	000b      	movs	r3, r1
 80130ce:	4c25      	ldr	r4, [pc, #148]	; (8013164 <Display_Access_Interface_Voltage+0xf0>)
 80130d0:	1979      	adds	r1, r7, r5
 80130d2:	1c48      	adds	r0, r1, #1
 80130d4:	0021      	movs	r1, r4
 80130d6:	f001 fd5b 	bl	8014b90 <siprintf>
 80130da:	e017      	b.n	801310c <Display_Access_Interface_Voltage+0x98>

	}
	else if(Voltage>=0)
 80130dc:	2100      	movs	r1, #0
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7ed fa18 	bl	8000514 <__aeabi_fcmpge>
 80130e4:	1e03      	subs	r3, r0, #0
 80130e6:	d011      	beq.n	801310c <Display_Access_Interface_Voltage+0x98>
	{
		string_voltage[0]='0';
 80130e8:	2508      	movs	r5, #8
 80130ea:	197b      	adds	r3, r7, r5
 80130ec:	2230      	movs	r2, #48	; 0x30
 80130ee:	701a      	strb	r2, [r3, #0]
		string_voltage[1]='0';
 80130f0:	197b      	adds	r3, r7, r5
 80130f2:	2230      	movs	r2, #48	; 0x30
 80130f4:	705a      	strb	r2, [r3, #1]
		sprintf(&string_voltage[2], "%4.2f", Voltage);
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f7ef feda 	bl	8002eb0 <__aeabi_f2d>
 80130fc:	0002      	movs	r2, r0
 80130fe:	000b      	movs	r3, r1
 8013100:	4c19      	ldr	r4, [pc, #100]	; (8013168 <Display_Access_Interface_Voltage+0xf4>)
 8013102:	1979      	adds	r1, r7, r5
 8013104:	1c88      	adds	r0, r1, #2
 8013106:	0021      	movs	r1, r4
 8013108:	f001 fd42 	bl	8014b90 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 801310c:	4b17      	ldr	r3, [pc, #92]	; (801316c <Display_Access_Interface_Voltage+0xf8>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2b03      	cmp	r3, #3
 8013112:	d110      	bne.n	8013136 <Display_Access_Interface_Voltage+0xc2>
 8013114:	4b15      	ldr	r3, [pc, #84]	; (801316c <Display_Access_Interface_Voltage+0xf8>)
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	2b02      	cmp	r3, #2
 801311a:	d10c      	bne.n	8013136 <Display_Access_Interface_Voltage+0xc2>
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 801311c:	2308      	movs	r3, #8
 801311e:	18fb      	adds	r3, r7, r3
 8013120:	001a      	movs	r2, r3
 8013122:	2100      	movs	r1, #0
 8013124:	2010      	movs	r0, #16
 8013126:	f7ff fb19 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 801312a:	2256      	movs	r2, #86	; 0x56
 801312c:	2118      	movs	r1, #24
 801312e:	2010      	movs	r0, #16
 8013130:	f7ff fad0 	bl	80126d4 <Write_Single_16x32AsicII>
 8013134:	e00c      	b.n	8013150 <Display_Access_Interface_Voltage+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 8013136:	2308      	movs	r3, #8
 8013138:	18fb      	adds	r3, r7, r3
 801313a:	001a      	movs	r2, r3
 801313c:	2100      	movs	r1, #0
 801313e:	2010      	movs	r0, #16
 8013140:	f7ff fb0c 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 8013144:	2256      	movs	r2, #86	; 0x56
 8013146:	2118      	movs	r1, #24
 8013148:	2010      	movs	r0, #16
 801314a:	f7ff fac3 	bl	80126d4 <Write_Single_16x32AsicII>
	}


}
 801314e:	46c0      	nop			; (mov r8, r8)
 8013150:	46c0      	nop			; (mov r8, r8)
 8013152:	46bd      	mov	sp, r7
 8013154:	b004      	add	sp, #16
 8013156:	bdb0      	pop	{r4, r5, r7, pc}
 8013158:	42c80000 	.word	0x42c80000
 801315c:	08017dc4 	.word	0x08017dc4
 8013160:	41200000 	.word	0x41200000
 8013164:	08017dcc 	.word	0x08017dcc
 8013168:	08017dd4 	.word	0x08017dd4
 801316c:	200039e0 	.word	0x200039e0

08013170 <Display_Access_Interface_Current>:
 * @brief  显示存取界面电流值
 * @param  设定的电流值，范围0到999.99A
 * @retval None
 */
static void Display_Access_Interface_Current(float Current)
{
 8013170:	b5b0      	push	{r4, r5, r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
	char string_current[7]={0};
 8013178:	2408      	movs	r4, #8
 801317a:	193b      	adds	r3, r7, r4
 801317c:	2200      	movs	r2, #0
 801317e:	601a      	str	r2, [r3, #0]
 8013180:	3304      	adds	r3, #4
 8013182:	2203      	movs	r2, #3
 8013184:	2100      	movs	r1, #0
 8013186:	0018      	movs	r0, r3
 8013188:	f000 ff97 	bl	80140ba <memset>
	if(Current>=100)      sprintf(string_current, "%6.2f", Current);
 801318c:	4931      	ldr	r1, [pc, #196]	; (8013254 <Display_Access_Interface_Current+0xe4>)
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7ed f9c0 	bl	8000514 <__aeabi_fcmpge>
 8013194:	1e03      	subs	r3, r0, #0
 8013196:	d009      	beq.n	80131ac <Display_Access_Interface_Current+0x3c>
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7ef fe89 	bl	8002eb0 <__aeabi_f2d>
 801319e:	0002      	movs	r2, r0
 80131a0:	000b      	movs	r3, r1
 80131a2:	492d      	ldr	r1, [pc, #180]	; (8013258 <Display_Access_Interface_Current+0xe8>)
 80131a4:	1938      	adds	r0, r7, r4
 80131a6:	f001 fcf3 	bl	8014b90 <siprintf>
 80131aa:	e02d      	b.n	8013208 <Display_Access_Interface_Current+0x98>
	else if(Current>=10)
 80131ac:	492b      	ldr	r1, [pc, #172]	; (801325c <Display_Access_Interface_Current+0xec>)
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f7ed f9b0 	bl	8000514 <__aeabi_fcmpge>
 80131b4:	1e03      	subs	r3, r0, #0
 80131b6:	d00f      	beq.n	80131d8 <Display_Access_Interface_Current+0x68>
	{
		string_current[0]='0';
 80131b8:	2508      	movs	r5, #8
 80131ba:	197b      	adds	r3, r7, r5
 80131bc:	2230      	movs	r2, #48	; 0x30
 80131be:	701a      	strb	r2, [r3, #0]
		sprintf(&string_current[1], "%5.2f", Current);
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f7ef fe75 	bl	8002eb0 <__aeabi_f2d>
 80131c6:	0002      	movs	r2, r0
 80131c8:	000b      	movs	r3, r1
 80131ca:	4c25      	ldr	r4, [pc, #148]	; (8013260 <Display_Access_Interface_Current+0xf0>)
 80131cc:	1979      	adds	r1, r7, r5
 80131ce:	1c48      	adds	r0, r1, #1
 80131d0:	0021      	movs	r1, r4
 80131d2:	f001 fcdd 	bl	8014b90 <siprintf>
 80131d6:	e017      	b.n	8013208 <Display_Access_Interface_Current+0x98>

	}
	else if(Current>=0)
 80131d8:	2100      	movs	r1, #0
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f7ed f99a 	bl	8000514 <__aeabi_fcmpge>
 80131e0:	1e03      	subs	r3, r0, #0
 80131e2:	d011      	beq.n	8013208 <Display_Access_Interface_Current+0x98>
	{
		string_current[0]='0';
 80131e4:	2508      	movs	r5, #8
 80131e6:	197b      	adds	r3, r7, r5
 80131e8:	2230      	movs	r2, #48	; 0x30
 80131ea:	701a      	strb	r2, [r3, #0]
		string_current[1]='0';
 80131ec:	197b      	adds	r3, r7, r5
 80131ee:	2230      	movs	r2, #48	; 0x30
 80131f0:	705a      	strb	r2, [r3, #1]
		sprintf(&string_current[2], "%4.2f", Current);
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f7ef fe5c 	bl	8002eb0 <__aeabi_f2d>
 80131f8:	0002      	movs	r2, r0
 80131fa:	000b      	movs	r3, r1
 80131fc:	4c19      	ldr	r4, [pc, #100]	; (8013264 <Display_Access_Interface_Current+0xf4>)
 80131fe:	1979      	adds	r1, r7, r5
 8013200:	1c88      	adds	r0, r1, #2
 8013202:	0021      	movs	r1, r4
 8013204:	f001 fcc4 	bl	8014b90 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 8013208:	4b17      	ldr	r3, [pc, #92]	; (8013268 <Display_Access_Interface_Current+0xf8>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b03      	cmp	r3, #3
 801320e:	d110      	bne.n	8013232 <Display_Access_Interface_Current+0xc2>
 8013210:	4b15      	ldr	r3, [pc, #84]	; (8013268 <Display_Access_Interface_Current+0xf8>)
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	2b02      	cmp	r3, #2
 8013216:	d10c      	bne.n	8013232 <Display_Access_Interface_Current+0xc2>
	{
		Write_String_16x32AsicII(16,36,string_current);
 8013218:	2308      	movs	r3, #8
 801321a:	18fb      	adds	r3, r7, r3
 801321c:	001a      	movs	r2, r3
 801321e:	2124      	movs	r1, #36	; 0x24
 8013220:	2010      	movs	r0, #16
 8013222:	f7ff fa9b 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013226:	2241      	movs	r2, #65	; 0x41
 8013228:	213c      	movs	r1, #60	; 0x3c
 801322a:	2010      	movs	r0, #16
 801322c:	f7ff fa52 	bl	80126d4 <Write_Single_16x32AsicII>
 8013230:	e00c      	b.n	801324c <Display_Access_Interface_Current+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,36,string_current);
 8013232:	2308      	movs	r3, #8
 8013234:	18fb      	adds	r3, r7, r3
 8013236:	001a      	movs	r2, r3
 8013238:	2124      	movs	r1, #36	; 0x24
 801323a:	2010      	movs	r0, #16
 801323c:	f7ff fa8e 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013240:	2241      	movs	r2, #65	; 0x41
 8013242:	213c      	movs	r1, #60	; 0x3c
 8013244:	2010      	movs	r0, #16
 8013246:	f7ff fa45 	bl	80126d4 <Write_Single_16x32AsicII>
	}

}
 801324a:	46c0      	nop			; (mov r8, r8)
 801324c:	46c0      	nop			; (mov r8, r8)
 801324e:	46bd      	mov	sp, r7
 8013250:	b004      	add	sp, #16
 8013252:	bdb0      	pop	{r4, r5, r7, pc}
 8013254:	42c80000 	.word	0x42c80000
 8013258:	08017dc4 	.word	0x08017dc4
 801325c:	41200000 	.word	0x41200000
 8013260:	08017dcc 	.word	0x08017dcc
 8013264:	08017dd4 	.word	0x08017dd4
 8013268:	200039e0 	.word	0x200039e0

0801326c <Display_Access_Interface_Save>:
	}

}

void Display_Access_Interface_Save(void)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"SAVE  ");
 8013272:	4b1d      	ldr	r3, [pc, #116]	; (80132e8 <Display_Access_Interface_Save+0x7c>)
 8013274:	001a      	movs	r2, r3
 8013276:	2124      	movs	r1, #36	; 0x24
 8013278:	2030      	movs	r0, #48	; 0x30
 801327a:	f7ff f9ed 	bl	8012658 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 801327e:	4b1b      	ldr	r3, [pc, #108]	; (80132ec <Display_Access_Interface_Save+0x80>)
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	2b09      	cmp	r3, #9
 8013284:	d80e      	bhi.n	80132a4 <Display_Access_Interface_Save+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 8013286:	2230      	movs	r2, #48	; 0x30
 8013288:	213c      	movs	r1, #60	; 0x3c
 801328a:	2030      	movs	r0, #48	; 0x30
 801328c:	f7ff f9a0 	bl	80125d0 <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 8013290:	4b16      	ldr	r3, [pc, #88]	; (80132ec <Display_Access_Interface_Save+0x80>)
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	3330      	adds	r3, #48	; 0x30
 8013296:	b2db      	uxtb	r3, r3
 8013298:	001a      	movs	r2, r3
 801329a:	213e      	movs	r1, #62	; 0x3e
 801329c:	2030      	movs	r0, #48	; 0x30
 801329e:	f7ff f997 	bl	80125d0 <Write_Single_8x16AsicII>
 80132a2:	e008      	b.n	80132b6 <Display_Access_Interface_Save+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 80132a4:	4b11      	ldr	r3, [pc, #68]	; (80132ec <Display_Access_Interface_Save+0x80>)
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	3330      	adds	r3, #48	; 0x30
 80132aa:	b2db      	uxtb	r3, r3
 80132ac:	001a      	movs	r2, r3
 80132ae:	213c      	movs	r1, #60	; 0x3c
 80132b0:	2030      	movs	r0, #48	; 0x30
 80132b2:	f7ff f98d 	bl	80125d0 <Write_Single_8x16AsicII>



	float voltage=String_To_Float(String_Save_V);
 80132b6:	4b0e      	ldr	r3, [pc, #56]	; (80132f0 <Display_Access_Interface_Save+0x84>)
 80132b8:	0018      	movs	r0, r3
 80132ba:	f7fa ffc5 	bl	800e248 <String_To_Float>
 80132be:	1c03      	adds	r3, r0, #0
 80132c0:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	1c18      	adds	r0, r3, #0
 80132c6:	f7ff fed5 	bl	8013074 <Display_Access_Interface_Voltage>


	float current=String_To_Float(String_Save_I);
 80132ca:	4b0a      	ldr	r3, [pc, #40]	; (80132f4 <Display_Access_Interface_Save+0x88>)
 80132cc:	0018      	movs	r0, r3
 80132ce:	f7fa ffbb 	bl	800e248 <String_To_Float>
 80132d2:	1c03      	adds	r3, r0, #0
 80132d4:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	1c18      	adds	r0, r3, #0
 80132da:	f7ff ff49 	bl	8013170 <Display_Access_Interface_Current>


}
 80132de:	46c0      	nop			; (mov r8, r8)
 80132e0:	46bd      	mov	sp, r7
 80132e2:	b002      	add	sp, #8
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	46c0      	nop			; (mov r8, r8)
 80132e8:	08017e80 	.word	0x08017e80
 80132ec:	20003975 	.word	0x20003975
 80132f0:	20003020 	.word	0x20003020
 80132f4:	2000302c 	.word	0x2000302c

080132f8 <Display_Access_Interface_Recall>:
void Display_Access_Interface_Recall(void)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"RECALL");
 80132fe:	4b2f      	ldr	r3, [pc, #188]	; (80133bc <Display_Access_Interface_Recall+0xc4>)
 8013300:	001a      	movs	r2, r3
 8013302:	2124      	movs	r1, #36	; 0x24
 8013304:	2030      	movs	r0, #48	; 0x30
 8013306:	f7ff f9a7 	bl	8012658 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 801330a:	4b2d      	ldr	r3, [pc, #180]	; (80133c0 <Display_Access_Interface_Recall+0xc8>)
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	2b09      	cmp	r3, #9
 8013310:	d80e      	bhi.n	8013330 <Display_Access_Interface_Recall+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 8013312:	2230      	movs	r2, #48	; 0x30
 8013314:	213c      	movs	r1, #60	; 0x3c
 8013316:	2030      	movs	r0, #48	; 0x30
 8013318:	f7ff f95a 	bl	80125d0 <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 801331c:	4b28      	ldr	r3, [pc, #160]	; (80133c0 <Display_Access_Interface_Recall+0xc8>)
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	3330      	adds	r3, #48	; 0x30
 8013322:	b2db      	uxtb	r3, r3
 8013324:	001a      	movs	r2, r3
 8013326:	213e      	movs	r1, #62	; 0x3e
 8013328:	2030      	movs	r0, #48	; 0x30
 801332a:	f7ff f951 	bl	80125d0 <Write_Single_8x16AsicII>
 801332e:	e008      	b.n	8013342 <Display_Access_Interface_Recall+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 8013330:	4b23      	ldr	r3, [pc, #140]	; (80133c0 <Display_Access_Interface_Recall+0xc8>)
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	3330      	adds	r3, #48	; 0x30
 8013336:	b2db      	uxtb	r3, r3
 8013338:	001a      	movs	r2, r3
 801333a:	213c      	movs	r1, #60	; 0x3c
 801333c:	2030      	movs	r0, #48	; 0x30
 801333e:	f7ff f947 	bl	80125d0 <Write_Single_8x16AsicII>


	//float voltage=String_To_Float(String_Recall_V);
	xyz.coordinates3=1;
 8013342:	4b20      	ldr	r3, [pc, #128]	; (80133c4 <Display_Access_Interface_Recall+0xcc>)
 8013344:	2201      	movs	r2, #1
 8013346:	609a      	str	r2, [r3, #8]
	float voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 8013348:	4b1d      	ldr	r3, [pc, #116]	; (80133c0 <Display_Access_Interface_Recall+0xc8>)
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	0018      	movs	r0, r3
 801334e:	f7f9 f81b 	bl	800c388 <AT25_Save_Recall_Recall_VI>
 8013352:	0003      	movs	r3, r0
 8013354:	0018      	movs	r0, r3
 8013356:	f7ef fd55 	bl	8002e04 <__aeabi_i2d>
 801335a:	2200      	movs	r2, #0
 801335c:	4b1a      	ldr	r3, [pc, #104]	; (80133c8 <Display_Access_Interface_Recall+0xd0>)
 801335e:	f7ee fafd 	bl	800195c <__aeabi_ddiv>
 8013362:	0002      	movs	r2, r0
 8013364:	000b      	movs	r3, r1
 8013366:	0010      	movs	r0, r2
 8013368:	0019      	movs	r1, r3
 801336a:	f7ef fde9 	bl	8002f40 <__aeabi_d2f>
 801336e:	1c03      	adds	r3, r0, #0
 8013370:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	1c18      	adds	r0, r3, #0
 8013376:	f7ff fe7d 	bl	8013074 <Display_Access_Interface_Voltage>

	xyz.coordinates3=2;
 801337a:	4b12      	ldr	r3, [pc, #72]	; (80133c4 <Display_Access_Interface_Recall+0xcc>)
 801337c:	2202      	movs	r2, #2
 801337e:	609a      	str	r2, [r3, #8]
	//float current=String_To_Float(String_Recall_I);
	float current=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 8013380:	4b0f      	ldr	r3, [pc, #60]	; (80133c0 <Display_Access_Interface_Recall+0xc8>)
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	0018      	movs	r0, r3
 8013386:	f7f8 ffff 	bl	800c388 <AT25_Save_Recall_Recall_VI>
 801338a:	0003      	movs	r3, r0
 801338c:	0018      	movs	r0, r3
 801338e:	f7ef fd39 	bl	8002e04 <__aeabi_i2d>
 8013392:	2200      	movs	r2, #0
 8013394:	4b0c      	ldr	r3, [pc, #48]	; (80133c8 <Display_Access_Interface_Recall+0xd0>)
 8013396:	f7ee fae1 	bl	800195c <__aeabi_ddiv>
 801339a:	0002      	movs	r2, r0
 801339c:	000b      	movs	r3, r1
 801339e:	0010      	movs	r0, r2
 80133a0:	0019      	movs	r1, r3
 80133a2:	f7ef fdcd 	bl	8002f40 <__aeabi_d2f>
 80133a6:	1c03      	adds	r3, r0, #0
 80133a8:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	1c18      	adds	r0, r3, #0
 80133ae:	f7ff fedf 	bl	8013170 <Display_Access_Interface_Current>

}
 80133b2:	46c0      	nop			; (mov r8, r8)
 80133b4:	46bd      	mov	sp, r7
 80133b6:	b002      	add	sp, #8
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	46c0      	nop			; (mov r8, r8)
 80133bc:	08017e70 	.word	0x08017e70
 80133c0:	20003975 	.word	0x20003975
 80133c4:	200039e0 	.word	0x200039e0
 80133c8:	40590000 	.word	0x40590000

080133cc <Display_Menu_Function_Interface_First_Menu>:
  * @brief  显示一级菜单界面
  * @param  一级菜单的功能
  * @retval None
  */
void Display_Menu_Function_Interface_First_Menu(int Selection)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b082      	sub	sp, #8
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]

	Write_String_8x16AsicII(0,0,"FUNCTION");
 80133d4:	4b25      	ldr	r3, [pc, #148]	; (801346c <Display_Menu_Function_Interface_First_Menu+0xa0>)
 80133d6:	001a      	movs	r2, r3
 80133d8:	2100      	movs	r1, #0
 80133da:	2000      	movs	r0, #0
 80133dc:	f7ff f93c 	bl	8012658 <Write_String_8x16AsicII>
	switch(Selection)
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2b08      	cmp	r3, #8
 80133e4:	d83d      	bhi.n	8013462 <Display_Menu_Function_Interface_First_Menu+0x96>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	009a      	lsls	r2, r3, #2
 80133ea:	4b21      	ldr	r3, [pc, #132]	; (8013470 <Display_Menu_Function_Interface_First_Menu+0xa4>)
 80133ec:	18d3      	adds	r3, r2, r3
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	469f      	mov	pc, r3
	{
		case 1:
			{
				Write_String_16x32AsicII(16,24,"SYSTEM     ");
 80133f2:	4b20      	ldr	r3, [pc, #128]	; (8013474 <Display_Menu_Function_Interface_First_Menu+0xa8>)
 80133f4:	001a      	movs	r2, r3
 80133f6:	2118      	movs	r1, #24
 80133f8:	2010      	movs	r0, #16
 80133fa:	f7ff f9af 	bl	801275c <Write_String_16x32AsicII>
				break;
 80133fe:	e031      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 2:
			{
				Write_String_16x32AsicII(16,24,"SLOPE      ");
 8013400:	4b1d      	ldr	r3, [pc, #116]	; (8013478 <Display_Menu_Function_Interface_First_Menu+0xac>)
 8013402:	001a      	movs	r2, r3
 8013404:	2118      	movs	r1, #24
 8013406:	2010      	movs	r0, #16
 8013408:	f7ff f9a8 	bl	801275c <Write_String_16x32AsicII>
				break;
 801340c:	e02a      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 3:
			{
				Write_String_16x32AsicII(16,24,"RS232       ");
 801340e:	4b1b      	ldr	r3, [pc, #108]	; (801347c <Display_Menu_Function_Interface_First_Menu+0xb0>)
 8013410:	001a      	movs	r2, r3
 8013412:	2118      	movs	r1, #24
 8013414:	2010      	movs	r0, #16
 8013416:	f7ff f9a1 	bl	801275c <Write_String_16x32AsicII>
				break;
 801341a:	e023      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 4:
			{
				Write_String_16x32AsicII(16,24,"TIMER       ");
 801341c:	4b18      	ldr	r3, [pc, #96]	; (8013480 <Display_Menu_Function_Interface_First_Menu+0xb4>)
 801341e:	001a      	movs	r2, r3
 8013420:	2118      	movs	r1, #24
 8013422:	2010      	movs	r0, #16
 8013424:	f7ff f99a 	bl	801275c <Write_String_16x32AsicII>
				break;
 8013428:	e01c      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 5:
			{
				Write_String_16x32AsicII(16,24,"AD SET      ");
 801342a:	4b16      	ldr	r3, [pc, #88]	; (8013484 <Display_Menu_Function_Interface_First_Menu+0xb8>)
 801342c:	001a      	movs	r2, r3
 801342e:	2118      	movs	r1, #24
 8013430:	2010      	movs	r0, #16
 8013432:	f7ff f993 	bl	801275c <Write_String_16x32AsicII>
				break;
 8013436:	e015      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 6:
			{
				Write_String_16x32AsicII(16,18,"LIGHT TEMP  ");
 8013438:	4b13      	ldr	r3, [pc, #76]	; (8013488 <Display_Menu_Function_Interface_First_Menu+0xbc>)
 801343a:	001a      	movs	r2, r3
 801343c:	2112      	movs	r1, #18
 801343e:	2010      	movs	r0, #16
 8013440:	f7ff f98c 	bl	801275c <Write_String_16x32AsicII>
				break;
 8013444:	e00e      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 7:
			{
				Write_String_16x32AsicII(16,18,"PROTECT     ");
 8013446:	4b11      	ldr	r3, [pc, #68]	; (801348c <Display_Menu_Function_Interface_First_Menu+0xc0>)
 8013448:	001a      	movs	r2, r3
 801344a:	2112      	movs	r1, #18
 801344c:	2010      	movs	r0, #16
 801344e:	f7ff f985 	bl	801275c <Write_String_16x32AsicII>
				break;
 8013452:	e007      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 8:
			{
				Write_String_16x32AsicII(16,18,"CALIRRATION ");
 8013454:	4b0e      	ldr	r3, [pc, #56]	; (8013490 <Display_Menu_Function_Interface_First_Menu+0xc4>)
 8013456:	001a      	movs	r2, r3
 8013458:	2112      	movs	r1, #18
 801345a:	2010      	movs	r0, #16
 801345c:	f7ff f97e 	bl	801275c <Write_String_16x32AsicII>
				break;
 8013460:	e000      	b.n	8013464 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		default :break;
 8013462:	46c0      	nop			; (mov r8, r8)
	}
}
 8013464:	46c0      	nop			; (mov r8, r8)
 8013466:	46bd      	mov	sp, r7
 8013468:	b002      	add	sp, #8
 801346a:	bd80      	pop	{r7, pc}
 801346c:	08017e88 	.word	0x08017e88
 8013470:	08018440 	.word	0x08018440
 8013474:	08017e94 	.word	0x08017e94
 8013478:	08017ea0 	.word	0x08017ea0
 801347c:	08017eac 	.word	0x08017eac
 8013480:	08017ebc 	.word	0x08017ebc
 8013484:	08017ecc 	.word	0x08017ecc
 8013488:	08017edc 	.word	0x08017edc
 801348c:	08017eec 	.word	0x08017eec
 8013490:	08017efc 	.word	0x08017efc

08013494 <second_munu_system>:
/*----------------------------------------------------------------------------------------------二级界面部分-----------------------------------------------------------------------------------------------------*/

static void second_munu_system(int z)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
	Write_String_16x32AsicII(16,24,"RESET");
 801349c:	4b07      	ldr	r3, [pc, #28]	; (80134bc <second_munu_system+0x28>)
 801349e:	001a      	movs	r2, r3
 80134a0:	2118      	movs	r1, #24
 80134a2:	2010      	movs	r0, #16
 80134a4:	f7ff f95a 	bl	801275c <Write_String_16x32AsicII>
	if(z==1)
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d102      	bne.n	80134b4 <second_munu_system+0x20>
	{
		Cursor_flash_off();
 80134ae:	f000 fcaf 	bl	8013e10 <Cursor_flash_off>
		return;
 80134b2:	46c0      	nop			; (mov r8, r8)
	}
	else if(z==2);

}
 80134b4:	46bd      	mov	sp, r7
 80134b6:	b002      	add	sp, #8
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	46c0      	nop			; (mov r8, r8)
 80134bc:	08017f0c 	.word	0x08017f0c

080134c0 <second_munu_slope>:

static void second_munu_slope(int z)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 80134c8:	f000 fcd8 	bl	8013e7c <Cursor_flash_on>
	if(z==1)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	d10c      	bne.n	80134ec <second_munu_slope+0x2c>
	{
		Write_String_16x32AsicII(16,0,"IRate");
 80134d2:	4b10      	ldr	r3, [pc, #64]	; (8013514 <second_munu_slope+0x54>)
 80134d4:	001a      	movs	r2, r3
 80134d6:	2100      	movs	r1, #0
 80134d8:	2010      	movs	r0, #16
 80134da:	f7ff f93f 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_I_Rate);//显示清空后的输入值
 80134de:	4b0e      	ldr	r3, [pc, #56]	; (8013518 <second_munu_slope+0x58>)
 80134e0:	001a      	movs	r2, r3
 80134e2:	2118      	movs	r1, #24
 80134e4:	2010      	movs	r0, #16
 80134e6:	f7ff f939 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,0,"VRate");
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值

	}

}
 80134ea:	e00e      	b.n	801350a <second_munu_slope+0x4a>
	else if(z==2)
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b02      	cmp	r3, #2
 80134f0:	d10b      	bne.n	801350a <second_munu_slope+0x4a>
		Write_String_16x32AsicII(16,0,"VRate");
 80134f2:	4b0a      	ldr	r3, [pc, #40]	; (801351c <second_munu_slope+0x5c>)
 80134f4:	001a      	movs	r2, r3
 80134f6:	2100      	movs	r1, #0
 80134f8:	2010      	movs	r0, #16
 80134fa:	f7ff f92f 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值
 80134fe:	4b08      	ldr	r3, [pc, #32]	; (8013520 <second_munu_slope+0x60>)
 8013500:	001a      	movs	r2, r3
 8013502:	2118      	movs	r1, #24
 8013504:	2010      	movs	r0, #16
 8013506:	f7ff f929 	bl	801275c <Write_String_16x32AsicII>
}
 801350a:	46c0      	nop			; (mov r8, r8)
 801350c:	46bd      	mov	sp, r7
 801350e:	b002      	add	sp, #8
 8013510:	bd80      	pop	{r7, pc}
 8013512:	46c0      	nop			; (mov r8, r8)
 8013514:	08017f14 	.word	0x08017f14
 8013518:	20003044 	.word	0x20003044
 801351c:	08017f1c 	.word	0x08017f1c
 8013520:	20003050 	.word	0x20003050

08013524 <second_munu_RS232>:

static void second_munu_RS232(int z)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
	Cursor_flash_off();
 801352c:	f000 fc70 	bl	8013e10 <Cursor_flash_off>
	Write_String_16x32AsicII(16,0,"BaudRate");
 8013530:	4b09      	ldr	r3, [pc, #36]	; (8013558 <second_munu_RS232+0x34>)
 8013532:	001a      	movs	r2, r3
 8013534:	2100      	movs	r1, #0
 8013536:	2010      	movs	r0, #16
 8013538:	f7ff f910 	bl	801275c <Write_String_16x32AsicII>

	if(z==1) 	  Write_String_16x32AsicII(16,36,String_RS232_Rate);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b01      	cmp	r3, #1
 8013540:	d105      	bne.n	801354e <second_munu_RS232+0x2a>
 8013542:	4b06      	ldr	r3, [pc, #24]	; (801355c <second_munu_RS232+0x38>)
 8013544:	001a      	movs	r2, r3
 8013546:	2124      	movs	r1, #36	; 0x24
 8013548:	2010      	movs	r0, #16
 801354a:	f7ff f907 	bl	801275c <Write_String_16x32AsicII>
	else if(z==2);
}
 801354e:	46c0      	nop			; (mov r8, r8)
 8013550:	46bd      	mov	sp, r7
 8013552:	b002      	add	sp, #8
 8013554:	bd80      	pop	{r7, pc}
 8013556:	46c0      	nop			; (mov r8, r8)
 8013558:	08017f24 	.word	0x08017f24
 801355c:	20003038 	.word	0x20003038

08013560 <second_menu_timer>:

static void second_menu_timer(int z)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 8013568:	f000 fc88 	bl	8013e7c <Cursor_flash_on>
	if(z==1)
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b01      	cmp	r3, #1
 8013570:	d10c      	bne.n	801358c <second_menu_timer+0x2c>
	{
		Write_String_16x32AsicII(16,0,"delay ");
 8013572:	4b18      	ldr	r3, [pc, #96]	; (80135d4 <second_menu_timer+0x74>)
 8013574:	001a      	movs	r2, r3
 8013576:	2100      	movs	r1, #0
 8013578:	2010      	movs	r0, #16
 801357a:	f7ff f8ef 	bl	801275c <Write_String_16x32AsicII>

		Write_String_16x32AsicII(16,24, String_Delay);//显示输入值
 801357e:	4b16      	ldr	r3, [pc, #88]	; (80135d8 <second_menu_timer+0x78>)
 8013580:	001a      	movs	r2, r3
 8013582:	2118      	movs	r1, #24
 8013584:	2010      	movs	r0, #16
 8013586:	f7ff f8e9 	bl	801275c <Write_String_16x32AsicII>
	else if(z==3)
	{
		Write_String_16x32AsicII(16,0,"Toff  ");
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
	}
}
 801358a:	e01e      	b.n	80135ca <second_menu_timer+0x6a>
	else if(z==2)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b02      	cmp	r3, #2
 8013590:	d10c      	bne.n	80135ac <second_menu_timer+0x4c>
		Write_String_16x32AsicII(16,0,"Ton   ");
 8013592:	4b12      	ldr	r3, [pc, #72]	; (80135dc <second_menu_timer+0x7c>)
 8013594:	001a      	movs	r2, r3
 8013596:	2100      	movs	r1, #0
 8013598:	2010      	movs	r0, #16
 801359a:	f7ff f8df 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_On);//显示输入值
 801359e:	4b10      	ldr	r3, [pc, #64]	; (80135e0 <second_menu_timer+0x80>)
 80135a0:	001a      	movs	r2, r3
 80135a2:	2118      	movs	r1, #24
 80135a4:	2010      	movs	r0, #16
 80135a6:	f7ff f8d9 	bl	801275c <Write_String_16x32AsicII>
}
 80135aa:	e00e      	b.n	80135ca <second_menu_timer+0x6a>
	else if(z==3)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b03      	cmp	r3, #3
 80135b0:	d10b      	bne.n	80135ca <second_menu_timer+0x6a>
		Write_String_16x32AsicII(16,0,"Toff  ");
 80135b2:	4b0c      	ldr	r3, [pc, #48]	; (80135e4 <second_menu_timer+0x84>)
 80135b4:	001a      	movs	r2, r3
 80135b6:	2100      	movs	r1, #0
 80135b8:	2010      	movs	r0, #16
 80135ba:	f7ff f8cf 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
 80135be:	4b0a      	ldr	r3, [pc, #40]	; (80135e8 <second_menu_timer+0x88>)
 80135c0:	001a      	movs	r2, r3
 80135c2:	2118      	movs	r1, #24
 80135c4:	2010      	movs	r0, #16
 80135c6:	f7ff f8c9 	bl	801275c <Write_String_16x32AsicII>
}
 80135ca:	46c0      	nop			; (mov r8, r8)
 80135cc:	46bd      	mov	sp, r7
 80135ce:	b002      	add	sp, #8
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	46c0      	nop			; (mov r8, r8)
 80135d4:	08017f30 	.word	0x08017f30
 80135d8:	20003014 	.word	0x20003014
 80135dc:	08017f38 	.word	0x08017f38
 80135e0:	20002ffc 	.word	0x20002ffc
 80135e4:	08017f40 	.word	0x08017f40
 80135e8:	20003008 	.word	0x20003008

080135ec <second_menu_AD>:

static void second_menu_AD(int z)
{
 80135ec:	b590      	push	{r4, r7, lr}
 80135ee:	b087      	sub	sp, #28
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
	if(z==1)
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	d138      	bne.n	801366c <second_menu_AD+0x80>
	{
		Cursor_flash_on();
 80135fa:	f000 fc3f 	bl	8013e7c <Cursor_flash_on>
		/*输入密码界面*/
		Write_String_16x32AsicII(16,0, "INPUT:");
 80135fe:	4b50      	ldr	r3, [pc, #320]	; (8013740 <second_menu_AD+0x154>)
 8013600:	001a      	movs	r2, r3
 8013602:	2100      	movs	r1, #0
 8013604:	2010      	movs	r0, #16
 8013606:	f7ff f8a9 	bl	801275c <Write_String_16x32AsicII>
		if(Shift_Not_Shift == Shift)//显示输入的密码
 801360a:	4b4e      	ldr	r3, [pc, #312]	; (8013744 <second_menu_AD+0x158>)
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	2b01      	cmp	r3, #1
 8013610:	d106      	bne.n	8013620 <second_menu_AD+0x34>
		{
			Write_String_16x32AsicII(16,24, String_Password);
 8013612:	4b4d      	ldr	r3, [pc, #308]	; (8013748 <second_menu_AD+0x15c>)
 8013614:	001a      	movs	r2, r3
 8013616:	2118      	movs	r1, #24
 8013618:	2010      	movs	r0, #16
 801361a:	f7ff f89f 	bl	801275c <Write_String_16x32AsicII>
 801361e:	e025      	b.n	801366c <second_menu_AD+0x80>
		}
		else if(Shift_Not_Shift == Not_Shift)
 8013620:	4b48      	ldr	r3, [pc, #288]	; (8013744 <second_menu_AD+0x158>)
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d121      	bne.n	801366c <second_menu_AD+0x80>
		{
			for(uint8_t i=0;i<6;i++)
 8013628:	2317      	movs	r3, #23
 801362a:	18fb      	adds	r3, r7, r3
 801362c:	2200      	movs	r2, #0
 801362e:	701a      	strb	r2, [r3, #0]
 8013630:	e011      	b.n	8013656 <second_menu_AD+0x6a>
			{
				if(String_Password[i]!=' ')	String_Password_mask[i]='*';
 8013632:	2117      	movs	r1, #23
 8013634:	187b      	adds	r3, r7, r1
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	4a43      	ldr	r2, [pc, #268]	; (8013748 <second_menu_AD+0x15c>)
 801363a:	5cd3      	ldrb	r3, [r2, r3]
 801363c:	2b20      	cmp	r3, #32
 801363e:	d004      	beq.n	801364a <second_menu_AD+0x5e>
 8013640:	187b      	adds	r3, r7, r1
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	4a41      	ldr	r2, [pc, #260]	; (801374c <second_menu_AD+0x160>)
 8013646:	212a      	movs	r1, #42	; 0x2a
 8013648:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0;i<6;i++)
 801364a:	2117      	movs	r1, #23
 801364c:	187b      	adds	r3, r7, r1
 801364e:	781a      	ldrb	r2, [r3, #0]
 8013650:	187b      	adds	r3, r7, r1
 8013652:	3201      	adds	r2, #1
 8013654:	701a      	strb	r2, [r3, #0]
 8013656:	2317      	movs	r3, #23
 8013658:	18fb      	adds	r3, r7, r3
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	2b05      	cmp	r3, #5
 801365e:	d9e8      	bls.n	8013632 <second_menu_AD+0x46>
			}
			Write_String_16x32AsicII(16,24, String_Password_mask);
 8013660:	4b3a      	ldr	r3, [pc, #232]	; (801374c <second_menu_AD+0x160>)
 8013662:	001a      	movs	r2, r3
 8013664:	2118      	movs	r1, #24
 8013666:	2010      	movs	r0, #16
 8013668:	f7ff f878 	bl	801275c <Write_String_16x32AsicII>

		}


	}
	if(z==2)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b02      	cmp	r3, #2
 8013670:	d162      	bne.n	8013738 <second_menu_AD+0x14c>
	{

		Write_String_8x16AsicII(0,0,"GainV:");
 8013672:	4b37      	ldr	r3, [pc, #220]	; (8013750 <second_menu_AD+0x164>)
 8013674:	001a      	movs	r2, r3
 8013676:	2100      	movs	r1, #0
 8013678:	2000      	movs	r0, #0
 801367a:	f7fe ffed 	bl	8012658 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(16,0,"GainI:");
 801367e:	4b35      	ldr	r3, [pc, #212]	; (8013754 <second_menu_AD+0x168>)
 8013680:	001a      	movs	r2, r3
 8013682:	2100      	movs	r1, #0
 8013684:	2010      	movs	r0, #16
 8013686:	f7fe ffe7 	bl	8012658 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(32,0,"interceptV:");
 801368a:	4b33      	ldr	r3, [pc, #204]	; (8013758 <second_menu_AD+0x16c>)
 801368c:	001a      	movs	r2, r3
 801368e:	2100      	movs	r1, #0
 8013690:	2020      	movs	r0, #32
 8013692:	f7fe ffe1 	bl	8012658 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(48,0,"interceptI:");
 8013696:	4b31      	ldr	r3, [pc, #196]	; (801375c <second_menu_AD+0x170>)
 8013698:	001a      	movs	r2, r3
 801369a:	2100      	movs	r1, #0
 801369c:	2030      	movs	r0, #48	; 0x30
 801369e:	f7fe ffdb 	bl	8012658 <Write_String_8x16AsicII>
		char String[9]={'0','0','.','0','0','0','0','0'};
 80136a2:	240c      	movs	r4, #12
 80136a4:	193b      	adds	r3, r7, r4
 80136a6:	4a2e      	ldr	r2, [pc, #184]	; (8013760 <second_menu_AD+0x174>)
 80136a8:	ca03      	ldmia	r2!, {r0, r1}
 80136aa:	c303      	stmia	r3!, {r0, r1}
 80136ac:	7812      	ldrb	r2, [r2, #0]
 80136ae:	701a      	strb	r2, [r3, #0]

		sprintf(String, "%6.5f", ADC_Gain_V);//将float转为string，数据长度为6，保留两位小数
 80136b0:	4b2c      	ldr	r3, [pc, #176]	; (8013764 <second_menu_AD+0x178>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	1c18      	adds	r0, r3, #0
 80136b6:	f7ef fbfb 	bl	8002eb0 <__aeabi_f2d>
 80136ba:	0002      	movs	r2, r0
 80136bc:	000b      	movs	r3, r1
 80136be:	492a      	ldr	r1, [pc, #168]	; (8013768 <second_menu_AD+0x17c>)
 80136c0:	1938      	adds	r0, r7, r4
 80136c2:	f001 fa65 	bl	8014b90 <siprintf>
		Write_String_8x16AsicII(0,26, String);
 80136c6:	193b      	adds	r3, r7, r4
 80136c8:	001a      	movs	r2, r3
 80136ca:	211a      	movs	r1, #26
 80136cc:	2000      	movs	r0, #0
 80136ce:	f7fe ffc3 	bl	8012658 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", ADC_Gain_I);//将float转为string，数据长度为6，保留两位小数
 80136d2:	4b26      	ldr	r3, [pc, #152]	; (801376c <second_menu_AD+0x180>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	1c18      	adds	r0, r3, #0
 80136d8:	f7ef fbea 	bl	8002eb0 <__aeabi_f2d>
 80136dc:	0002      	movs	r2, r0
 80136de:	000b      	movs	r3, r1
 80136e0:	4921      	ldr	r1, [pc, #132]	; (8013768 <second_menu_AD+0x17c>)
 80136e2:	1938      	adds	r0, r7, r4
 80136e4:	f001 fa54 	bl	8014b90 <siprintf>
		Write_String_8x16AsicII(16,26, String);
 80136e8:	193b      	adds	r3, r7, r4
 80136ea:	001a      	movs	r2, r3
 80136ec:	211a      	movs	r1, #26
 80136ee:	2010      	movs	r0, #16
 80136f0:	f7fe ffb2 	bl	8012658 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_V);//将float转为string，数据长度为6，保留两位小数
 80136f4:	4b1e      	ldr	r3, [pc, #120]	; (8013770 <second_menu_AD+0x184>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	1c18      	adds	r0, r3, #0
 80136fa:	f7ef fbd9 	bl	8002eb0 <__aeabi_f2d>
 80136fe:	0002      	movs	r2, r0
 8013700:	000b      	movs	r3, r1
 8013702:	4919      	ldr	r1, [pc, #100]	; (8013768 <second_menu_AD+0x17c>)
 8013704:	1938      	adds	r0, r7, r4
 8013706:	f001 fa43 	bl	8014b90 <siprintf>
		Write_String_8x16AsicII(32,26, String);
 801370a:	193b      	adds	r3, r7, r4
 801370c:	001a      	movs	r2, r3
 801370e:	211a      	movs	r1, #26
 8013710:	2020      	movs	r0, #32
 8013712:	f7fe ffa1 	bl	8012658 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_I);//将float转为string，数据长度为6，保留两位小数
 8013716:	4b17      	ldr	r3, [pc, #92]	; (8013774 <second_menu_AD+0x188>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	1c18      	adds	r0, r3, #0
 801371c:	f7ef fbc8 	bl	8002eb0 <__aeabi_f2d>
 8013720:	0002      	movs	r2, r0
 8013722:	000b      	movs	r3, r1
 8013724:	4910      	ldr	r1, [pc, #64]	; (8013768 <second_menu_AD+0x17c>)
 8013726:	1938      	adds	r0, r7, r4
 8013728:	f001 fa32 	bl	8014b90 <siprintf>
		Write_String_8x16AsicII(48,26, String);
 801372c:	193b      	adds	r3, r7, r4
 801372e:	001a      	movs	r2, r3
 8013730:	211a      	movs	r1, #26
 8013732:	2030      	movs	r0, #48	; 0x30
 8013734:	f7fe ff90 	bl	8012658 <Write_String_8x16AsicII>
	}
	else if(z==3)
	{
		;
	}
}
 8013738:	46c0      	nop			; (mov r8, r8)
 801373a:	46bd      	mov	sp, r7
 801373c:	b007      	add	sp, #28
 801373e:	bd90      	pop	{r4, r7, pc}
 8013740:	08017f48 	.word	0x08017f48
 8013744:	2000396f 	.word	0x2000396f
 8013748:	200030a8 	.word	0x200030a8
 801374c:	200030b0 	.word	0x200030b0
 8013750:	08017f50 	.word	0x08017f50
 8013754:	08017f58 	.word	0x08017f58
 8013758:	08017f60 	.word	0x08017f60
 801375c:	08017f6c 	.word	0x08017f6c
 8013760:	08017f80 	.word	0x08017f80
 8013764:	20002fec 	.word	0x20002fec
 8013768:	08017f78 	.word	0x08017f78
 801376c:	20002ff0 	.word	0x20002ff0
 8013770:	20002ff4 	.word	0x20002ff4
 8013774:	20002ff8 	.word	0x20002ff8

08013778 <second_menu_Hard>:

static void second_menu_Hard(int z)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b01      	cmp	r3, #1
 8013784:	d126      	bne.n	80137d4 <second_menu_Hard+0x5c>
	{
		Write_String_16x32AsicII(16,0,"Light ");
 8013786:	4b27      	ldr	r3, [pc, #156]	; (8013824 <second_menu_Hard+0xac>)
 8013788:	001a      	movs	r2, r3
 801378a:	2100      	movs	r1, #0
 801378c:	2010      	movs	r0, #16
 801378e:	f7fe ffe5 	bl	801275c <Write_String_16x32AsicII>

		String_Light_Level[0]=Light/10+'0';
 8013792:	4b25      	ldr	r3, [pc, #148]	; (8013828 <second_menu_Hard+0xb0>)
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	210a      	movs	r1, #10
 8013798:	0018      	movs	r0, r3
 801379a:	f7ec fcd7 	bl	800014c <__udivsi3>
 801379e:	0003      	movs	r3, r0
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	3330      	adds	r3, #48	; 0x30
 80137a4:	b2da      	uxtb	r2, r3
 80137a6:	4b21      	ldr	r3, [pc, #132]	; (801382c <second_menu_Hard+0xb4>)
 80137a8:	701a      	strb	r2, [r3, #0]
		String_Light_Level[1]=Light%10+'0';
 80137aa:	4b1f      	ldr	r3, [pc, #124]	; (8013828 <second_menu_Hard+0xb0>)
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	210a      	movs	r1, #10
 80137b0:	0018      	movs	r0, r3
 80137b2:	f7ec fd51 	bl	8000258 <__aeabi_uidivmod>
 80137b6:	000b      	movs	r3, r1
 80137b8:	b2db      	uxtb	r3, r3
 80137ba:	3330      	adds	r3, #48	; 0x30
 80137bc:	b2da      	uxtb	r2, r3
 80137be:	4b1b      	ldr	r3, [pc, #108]	; (801382c <second_menu_Hard+0xb4>)
 80137c0:	705a      	strb	r2, [r3, #1]
		Write_String_16x32AsicII(16,30, String_Light_Level);//显示输入值
 80137c2:	4b1a      	ldr	r3, [pc, #104]	; (801382c <second_menu_Hard+0xb4>)
 80137c4:	001a      	movs	r2, r3
 80137c6:	211e      	movs	r1, #30
 80137c8:	2010      	movs	r0, #16
 80137ca:	f7fe ffc7 	bl	801275c <Write_String_16x32AsicII>

		Cursor_flash_off();
 80137ce:	f000 fb1f 	bl	8013e10 <Cursor_flash_off>
		return;
 80137d2:	e023      	b.n	801381c <second_menu_Hard+0xa4>
	}
	else if(z==2)
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	d10e      	bne.n	80137f8 <second_menu_Hard+0x80>
	{
		Write_String_16x32AsicII(16,0,"Temp: ");
 80137da:	4b15      	ldr	r3, [pc, #84]	; (8013830 <second_menu_Hard+0xb8>)
 80137dc:	001a      	movs	r2, r3
 80137de:	2100      	movs	r1, #0
 80137e0:	2010      	movs	r0, #16
 80137e2:	f7fe ffbb 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Temperature_CH1);//显示温度
 80137e6:	4b13      	ldr	r3, [pc, #76]	; (8013834 <second_menu_Hard+0xbc>)
 80137e8:	001a      	movs	r2, r3
 80137ea:	2118      	movs	r1, #24
 80137ec:	2010      	movs	r0, #16
 80137ee:	f7fe ffb5 	bl	801275c <Write_String_16x32AsicII>

		Cursor_flash_off();
 80137f2:	f000 fb0d 	bl	8013e10 <Cursor_flash_off>
		return;
 80137f6:	e011      	b.n	801381c <second_menu_Hard+0xa4>
	}
	else if(z==3)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b03      	cmp	r3, #3
 80137fc:	d10e      	bne.n	801381c <second_menu_Hard+0xa4>
	{
		Write_String_16x32AsicII(16,0,"FANS: ");
 80137fe:	4b0e      	ldr	r3, [pc, #56]	; (8013838 <second_menu_Hard+0xc0>)
 8013800:	001a      	movs	r2, r3
 8013802:	2100      	movs	r1, #0
 8013804:	2010      	movs	r0, #16
 8013806:	f7fe ffa9 	bl	801275c <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_FAN);//转速
 801380a:	4b0c      	ldr	r3, [pc, #48]	; (801383c <second_menu_Hard+0xc4>)
 801380c:	001a      	movs	r2, r3
 801380e:	2118      	movs	r1, #24
 8013810:	2010      	movs	r0, #16
 8013812:	f7fe ffa3 	bl	801275c <Write_String_16x32AsicII>

		Cursor_flash_off();
 8013816:	f000 fafb 	bl	8013e10 <Cursor_flash_off>
		return;
 801381a:	46c0      	nop			; (mov r8, r8)
	}

}
 801381c:	46bd      	mov	sp, r7
 801381e:	b002      	add	sp, #8
 8013820:	bd80      	pop	{r7, pc}
 8013822:	46c0      	nop			; (mov r8, r8)
 8013824:	08017f8c 	.word	0x08017f8c
 8013828:	200030b7 	.word	0x200030b7
 801382c:	2000306c 	.word	0x2000306c
 8013830:	08017f94 	.word	0x08017f94
 8013834:	20003078 	.word	0x20003078
 8013838:	08017f9c 	.word	0x08017f9c
 801383c:	20003084 	.word	0x20003084

08013840 <second_menu_Calibration>:


static void second_menu_Calibration(int z)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2b01      	cmp	r3, #1
 801384c:	d112      	bne.n	8013874 <second_menu_Calibration+0x34>
	{
		Cursor_flash_on();
 801384e:	f000 fb15 	bl	8013e7c <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 8013852:	4b2b      	ldr	r3, [pc, #172]	; (8013900 <second_menu_Calibration+0xc0>)
 8013854:	001a      	movs	r2, r3
 8013856:	2100      	movs	r1, #0
 8013858:	2010      	movs	r0, #16
 801385a:	f7fe ff7f 	bl	801275c <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 801385e:	4b29      	ldr	r3, [pc, #164]	; (8013904 <second_menu_Calibration+0xc4>)
 8013860:	001a      	movs	r2, r3
 8013862:	2124      	movs	r1, #36	; 0x24
 8013864:	2010      	movs	r0, #16
 8013866:	f7fe ff79 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 801386a:	2256      	movs	r2, #86	; 0x56
 801386c:	212c      	movs	r1, #44	; 0x2c
 801386e:	2030      	movs	r0, #48	; 0x30
 8013870:	f7fe feae 	bl	80125d0 <Write_Single_8x16AsicII>

	}
	if(z==2)
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b02      	cmp	r3, #2
 8013878:	d112      	bne.n	80138a0 <second_menu_Calibration+0x60>
	{
		Cursor_flash_on();
 801387a:	f000 faff 	bl	8013e7c <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 801387e:	4b22      	ldr	r3, [pc, #136]	; (8013908 <second_menu_Calibration+0xc8>)
 8013880:	001a      	movs	r2, r3
 8013882:	2100      	movs	r1, #0
 8013884:	2010      	movs	r0, #16
 8013886:	f7fe ff69 	bl	801275c <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 801388a:	4b1e      	ldr	r3, [pc, #120]	; (8013904 <second_menu_Calibration+0xc4>)
 801388c:	001a      	movs	r2, r3
 801388e:	2124      	movs	r1, #36	; 0x24
 8013890:	2010      	movs	r0, #16
 8013892:	f7fe ff63 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 8013896:	2256      	movs	r2, #86	; 0x56
 8013898:	212c      	movs	r1, #44	; 0x2c
 801389a:	2030      	movs	r0, #48	; 0x30
 801389c:	f7fe fe98 	bl	80125d0 <Write_Single_8x16AsicII>

	}

	if(z==3)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b03      	cmp	r3, #3
 80138a4:	d112      	bne.n	80138cc <second_menu_Calibration+0x8c>
	{
		Cursor_flash_on();
 80138a6:	f000 fae9 	bl	8013e7c <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 80138aa:	4b15      	ldr	r3, [pc, #84]	; (8013900 <second_menu_Calibration+0xc0>)
 80138ac:	001a      	movs	r2, r3
 80138ae:	2100      	movs	r1, #0
 80138b0:	2010      	movs	r0, #16
 80138b2:	f7fe ff53 	bl	801275c <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 80138b6:	4b15      	ldr	r3, [pc, #84]	; (801390c <second_menu_Calibration+0xcc>)
 80138b8:	001a      	movs	r2, r3
 80138ba:	2124      	movs	r1, #36	; 0x24
 80138bc:	2010      	movs	r0, #16
 80138be:	f7fe ff4d 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 80138c2:	2241      	movs	r2, #65	; 0x41
 80138c4:	212c      	movs	r1, #44	; 0x2c
 80138c6:	2030      	movs	r0, #48	; 0x30
 80138c8:	f7fe fe82 	bl	80125d0 <Write_Single_8x16AsicII>

	}
	if(z==4)
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b04      	cmp	r3, #4
 80138d0:	d112      	bne.n	80138f8 <second_menu_Calibration+0xb8>
	{
		Cursor_flash_on();
 80138d2:	f000 fad3 	bl	8013e7c <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 80138d6:	4b0c      	ldr	r3, [pc, #48]	; (8013908 <second_menu_Calibration+0xc8>)
 80138d8:	001a      	movs	r2, r3
 80138da:	2100      	movs	r1, #0
 80138dc:	2010      	movs	r0, #16
 80138de:	f7fe ff3d 	bl	801275c <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 80138e2:	4b0a      	ldr	r3, [pc, #40]	; (801390c <second_menu_Calibration+0xcc>)
 80138e4:	001a      	movs	r2, r3
 80138e6:	2124      	movs	r1, #36	; 0x24
 80138e8:	2010      	movs	r0, #16
 80138ea:	f7fe ff37 	bl	801275c <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 80138ee:	2241      	movs	r2, #65	; 0x41
 80138f0:	212c      	movs	r1, #44	; 0x2c
 80138f2:	2030      	movs	r0, #48	; 0x30
 80138f4:	f7fe fe6c 	bl	80125d0 <Write_Single_8x16AsicII>
	}
}
 80138f8:	46c0      	nop			; (mov r8, r8)
 80138fa:	46bd      	mov	sp, r7
 80138fc:	b002      	add	sp, #8
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	08017fa4 	.word	0x08017fa4
 8013904:	20003090 	.word	0x20003090
 8013908:	08017fac 	.word	0x08017fac
 801390c:	2000309c 	.word	0x2000309c

08013910 <Display_Menu_Function_Interface_Second_Menu>:
 * @param  xyz.y
 * @param  xyz.z
 * @retval None
 */
void Display_Menu_Function_Interface_Second_Menu(int y,int z)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]

	Write_String_8x16AsicII(48,48, "2nd Menu");
 801391a:	4b1b      	ldr	r3, [pc, #108]	; (8013988 <Display_Menu_Function_Interface_Second_Menu+0x78>)
 801391c:	001a      	movs	r2, r3
 801391e:	2130      	movs	r1, #48	; 0x30
 8013920:	2030      	movs	r0, #48	; 0x30
 8013922:	f7fe fe99 	bl	8012658 <Write_String_8x16AsicII>
	//一级菜单功能，显示在中间
	switch(y)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2b08      	cmp	r3, #8
 801392a:	d828      	bhi.n	801397e <Display_Menu_Function_Interface_Second_Menu+0x6e>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	009a      	lsls	r2, r3, #2
 8013930:	4b16      	ldr	r3, [pc, #88]	; (801398c <Display_Menu_Function_Interface_Second_Menu+0x7c>)
 8013932:	18d3      	adds	r3, r2, r3
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	469f      	mov	pc, r3
	{
		case 1://system
		{
			second_munu_system(z);
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	0018      	movs	r0, r3
 801393c:	f7ff fdaa 	bl	8013494 <second_munu_system>
			break;
 8013940:	e01e      	b.n	8013980 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 2://slope
		{
			second_munu_slope(z);
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	0018      	movs	r0, r3
 8013946:	f7ff fdbb 	bl	80134c0 <second_munu_slope>
			break;
 801394a:	e019      	b.n	8013980 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 3://Communication
		{
			second_munu_RS232(z);
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	0018      	movs	r0, r3
 8013950:	f7ff fde8 	bl	8013524 <second_munu_RS232>
			break;
 8013954:	e014      	b.n	8013980 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 4://timer
		{
			second_menu_timer(z);
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	0018      	movs	r0, r3
 801395a:	f7ff fe01 	bl	8013560 <second_menu_timer>
			break;
 801395e:	e00f      	b.n	8013980 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 5://AD
		{
			second_menu_AD(z);
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	0018      	movs	r0, r3
 8013964:	f7ff fe42 	bl	80135ec <second_menu_AD>
			break;
 8013968:	e00a      	b.n	8013980 <Display_Menu_Function_Interface_Second_Menu+0x70>

		}
		case 6:
		{
			second_menu_Hard(z);
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	0018      	movs	r0, r3
 801396e:	f7ff ff03 	bl	8013778 <second_menu_Hard>
			break;
 8013972:	e005      	b.n	8013980 <Display_Menu_Function_Interface_Second_Menu+0x70>
			 second_menu_Portect(z);
		}
		*/
		case 8:
		{
			second_menu_Calibration(z);
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	0018      	movs	r0, r3
 8013978:	f7ff ff62 	bl	8013840 <second_menu_Calibration>
			break;
 801397c:	e000      	b.n	8013980 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		default :break;
 801397e:	46c0      	nop			; (mov r8, r8)
	}


}
 8013980:	46c0      	nop			; (mov r8, r8)
 8013982:	46bd      	mov	sp, r7
 8013984:	b002      	add	sp, #8
 8013986:	bd80      	pop	{r7, pc}
 8013988:	08017fb4 	.word	0x08017fb4
 801398c:	08018464 	.word	0x08018464

08013990 <Display_Protect_Interface>:
  * @brief  显示保护界面
  * @param  出现的错误类型
  * @retval None
  */
void Display_Protect_Interface(uint8_t Error)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af00      	add	r7, sp, #0
 8013996:	0002      	movs	r2, r0
 8013998:	1dfb      	adds	r3, r7, #7
 801399a:	701a      	strb	r2, [r3, #0]

	/*解除警报*/

	//v c t p 1 2 4 8
	uint8_t mask=0x01;
 801399c:	210f      	movs	r1, #15
 801399e:	187b      	adds	r3, r7, r1
 80139a0:	2201      	movs	r2, #1
 80139a2:	701a      	strb	r2, [r3, #0]
	static uint8_t count=0;

	count=0;
 80139a4:	4ba4      	ldr	r3, [pc, #656]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 80139a6:	2200      	movs	r2, #0
 80139a8:	701a      	strb	r2, [r3, #0]
	if((Error&mask)==mask)//0x01
 80139aa:	1dfb      	adds	r3, r7, #7
 80139ac:	187a      	adds	r2, r7, r1
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	7812      	ldrb	r2, [r2, #0]
 80139b2:	4013      	ands	r3, r2
 80139b4:	b2db      	uxtb	r3, r3
 80139b6:	187a      	adds	r2, r7, r1
 80139b8:	7812      	ldrb	r2, [r2, #0]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d105      	bne.n	80139ca <Display_Protect_Interface+0x3a>
	{
		count++;
 80139be:	4b9e      	ldr	r3, [pc, #632]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	3301      	adds	r3, #1
 80139c4:	b2da      	uxtb	r2, r3
 80139c6:	4b9c      	ldr	r3, [pc, #624]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 80139c8:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 80139ca:	210f      	movs	r1, #15
 80139cc:	187a      	adds	r2, r7, r1
 80139ce:	187b      	adds	r3, r7, r1
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	18db      	adds	r3, r3, r3
 80139d4:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 80139d6:	1dfb      	adds	r3, r7, #7
 80139d8:	187a      	adds	r2, r7, r1
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	7812      	ldrb	r2, [r2, #0]
 80139de:	4013      	ands	r3, r2
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	187a      	adds	r2, r7, r1
 80139e4:	7812      	ldrb	r2, [r2, #0]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d105      	bne.n	80139f6 <Display_Protect_Interface+0x66>
	{
		count++;
 80139ea:	4b93      	ldr	r3, [pc, #588]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	3301      	adds	r3, #1
 80139f0:	b2da      	uxtb	r2, r3
 80139f2:	4b91      	ldr	r3, [pc, #580]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 80139f4:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 80139f6:	210f      	movs	r1, #15
 80139f8:	187a      	adds	r2, r7, r1
 80139fa:	187b      	adds	r3, r7, r1
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	18db      	adds	r3, r3, r3
 8013a00:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 8013a02:	1dfb      	adds	r3, r7, #7
 8013a04:	187a      	adds	r2, r7, r1
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	7812      	ldrb	r2, [r2, #0]
 8013a0a:	4013      	ands	r3, r2
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	187a      	adds	r2, r7, r1
 8013a10:	7812      	ldrb	r2, [r2, #0]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d105      	bne.n	8013a22 <Display_Protect_Interface+0x92>
	{
		count++;
 8013a16:	4b88      	ldr	r3, [pc, #544]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	b2da      	uxtb	r2, r3
 8013a1e:	4b86      	ldr	r3, [pc, #536]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 8013a20:	701a      	strb	r2, [r3, #0]
	}
	mask=0x01;
 8013a22:	230f      	movs	r3, #15
 8013a24:	18fb      	adds	r3, r7, r3
 8013a26:	2201      	movs	r2, #1
 8013a28:	701a      	strb	r2, [r3, #0]

	switch(count)
 8013a2a:	4b83      	ldr	r3, [pc, #524]	; (8013c38 <Display_Protect_Interface+0x2a8>)
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	d100      	bne.n	8013a34 <Display_Protect_Interface+0xa4>
 8013a32:	e0db      	b.n	8013bec <Display_Protect_Interface+0x25c>
 8013a34:	dd00      	ble.n	8013a38 <Display_Protect_Interface+0xa8>
 8013a36:	e0fb      	b.n	8013c30 <Display_Protect_Interface+0x2a0>
 8013a38:	2b02      	cmp	r3, #2
 8013a3a:	d100      	bne.n	8013a3e <Display_Protect_Interface+0xae>
 8013a3c:	e07e      	b.n	8013b3c <Display_Protect_Interface+0x1ac>
 8013a3e:	dd00      	ble.n	8013a42 <Display_Protect_Interface+0xb2>
 8013a40:	e0f6      	b.n	8013c30 <Display_Protect_Interface+0x2a0>
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d002      	beq.n	8013a4c <Display_Protect_Interface+0xbc>
 8013a46:	2b01      	cmp	r3, #1
 8013a48:	d00b      	beq.n	8013a62 <Display_Protect_Interface+0xd2>

	}



}
 8013a4a:	e0f1      	b.n	8013c30 <Display_Protect_Interface+0x2a0>
			Clear_Screen();
 8013a4c:	f7fe fd6a 	bl	8012524 <Clear_Screen>
			xyz.coordinates1=0;
 8013a50:	4b7a      	ldr	r3, [pc, #488]	; (8013c3c <Display_Protect_Interface+0x2ac>)
 8013a52:	2200      	movs	r2, #0
 8013a54:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 8013a56:	4b79      	ldr	r3, [pc, #484]	; (8013c3c <Display_Protect_Interface+0x2ac>)
 8013a58:	2200      	movs	r2, #0
 8013a5a:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 8013a5c:	4b77      	ldr	r3, [pc, #476]	; (8013c3c <Display_Protect_Interface+0x2ac>)
 8013a5e:	2200      	movs	r2, #0
 8013a60:	609a      	str	r2, [r3, #8]
			if((Error&0x01)==0x01)
 8013a62:	1dfb      	adds	r3, r7, #7
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	2201      	movs	r2, #1
 8013a68:	4013      	ands	r3, r2
 8013a6a:	d01e      	beq.n	8013aaa <Display_Protect_Interface+0x11a>
				Write_String_16x32AsicII(16,4,"   ");
 8013a6c:	4b74      	ldr	r3, [pc, #464]	; (8013c40 <Display_Protect_Interface+0x2b0>)
 8013a6e:	001a      	movs	r2, r3
 8013a70:	2104      	movs	r1, #4
 8013a72:	2010      	movs	r0, #16
 8013a74:	f7fe fe72 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 8013a78:	4b72      	ldr	r3, [pc, #456]	; (8013c44 <Display_Protect_Interface+0x2b4>)
 8013a7a:	001a      	movs	r2, r3
 8013a7c:	2112      	movs	r1, #18
 8013a7e:	2010      	movs	r0, #16
 8013a80:	f7fe fe6c 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OVP");
 8013a84:	4b70      	ldr	r3, [pc, #448]	; (8013c48 <Display_Protect_Interface+0x2b8>)
 8013a86:	001a      	movs	r2, r3
 8013a88:	211a      	movs	r1, #26
 8013a8a:	2010      	movs	r0, #16
 8013a8c:	f7fe fe66 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 8013a90:	4b6c      	ldr	r3, [pc, #432]	; (8013c44 <Display_Protect_Interface+0x2b4>)
 8013a92:	001a      	movs	r2, r3
 8013a94:	2126      	movs	r1, #38	; 0x26
 8013a96:	2010      	movs	r0, #16
 8013a98:	f7fe fe60 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 8013a9c:	4b6b      	ldr	r3, [pc, #428]	; (8013c4c <Display_Protect_Interface+0x2bc>)
 8013a9e:	001a      	movs	r2, r3
 8013aa0:	212c      	movs	r1, #44	; 0x2c
 8013aa2:	2010      	movs	r0, #16
 8013aa4:	f7fe fe5a 	bl	801275c <Write_String_16x32AsicII>
			break;
 8013aa8:	e0bf      	b.n	8013c2a <Display_Protect_Interface+0x29a>
			else if((Error&0x02)==0x02)
 8013aaa:	1dfb      	adds	r3, r7, #7
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	2202      	movs	r2, #2
 8013ab0:	4013      	ands	r3, r2
 8013ab2:	d01e      	beq.n	8013af2 <Display_Protect_Interface+0x162>
				Write_String_16x32AsicII(16,4,"   ");
 8013ab4:	4b62      	ldr	r3, [pc, #392]	; (8013c40 <Display_Protect_Interface+0x2b0>)
 8013ab6:	001a      	movs	r2, r3
 8013ab8:	2104      	movs	r1, #4
 8013aba:	2010      	movs	r0, #16
 8013abc:	f7fe fe4e 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 8013ac0:	4b60      	ldr	r3, [pc, #384]	; (8013c44 <Display_Protect_Interface+0x2b4>)
 8013ac2:	001a      	movs	r2, r3
 8013ac4:	2112      	movs	r1, #18
 8013ac6:	2010      	movs	r0, #16
 8013ac8:	f7fe fe48 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OCP");
 8013acc:	4b60      	ldr	r3, [pc, #384]	; (8013c50 <Display_Protect_Interface+0x2c0>)
 8013ace:	001a      	movs	r2, r3
 8013ad0:	211a      	movs	r1, #26
 8013ad2:	2010      	movs	r0, #16
 8013ad4:	f7fe fe42 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 8013ad8:	4b5a      	ldr	r3, [pc, #360]	; (8013c44 <Display_Protect_Interface+0x2b4>)
 8013ada:	001a      	movs	r2, r3
 8013adc:	2126      	movs	r1, #38	; 0x26
 8013ade:	2010      	movs	r0, #16
 8013ae0:	f7fe fe3c 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 8013ae4:	4b59      	ldr	r3, [pc, #356]	; (8013c4c <Display_Protect_Interface+0x2bc>)
 8013ae6:	001a      	movs	r2, r3
 8013ae8:	212c      	movs	r1, #44	; 0x2c
 8013aea:	2010      	movs	r0, #16
 8013aec:	f7fe fe36 	bl	801275c <Write_String_16x32AsicII>
			break;
 8013af0:	e09b      	b.n	8013c2a <Display_Protect_Interface+0x29a>
			else if((Error&0x04)==0x04)
 8013af2:	1dfb      	adds	r3, r7, #7
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	2204      	movs	r2, #4
 8013af8:	4013      	ands	r3, r2
 8013afa:	d100      	bne.n	8013afe <Display_Protect_Interface+0x16e>
 8013afc:	e095      	b.n	8013c2a <Display_Protect_Interface+0x29a>
				Write_String_16x32AsicII(16,4,"   ");
 8013afe:	4b50      	ldr	r3, [pc, #320]	; (8013c40 <Display_Protect_Interface+0x2b0>)
 8013b00:	001a      	movs	r2, r3
 8013b02:	2104      	movs	r1, #4
 8013b04:	2010      	movs	r0, #16
 8013b06:	f7fe fe29 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 8013b0a:	4b4e      	ldr	r3, [pc, #312]	; (8013c44 <Display_Protect_Interface+0x2b4>)
 8013b0c:	001a      	movs	r2, r3
 8013b0e:	2112      	movs	r1, #18
 8013b10:	2010      	movs	r0, #16
 8013b12:	f7fe fe23 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OTP");
 8013b16:	4b4f      	ldr	r3, [pc, #316]	; (8013c54 <Display_Protect_Interface+0x2c4>)
 8013b18:	001a      	movs	r2, r3
 8013b1a:	211a      	movs	r1, #26
 8013b1c:	2010      	movs	r0, #16
 8013b1e:	f7fe fe1d 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 8013b22:	4b48      	ldr	r3, [pc, #288]	; (8013c44 <Display_Protect_Interface+0x2b4>)
 8013b24:	001a      	movs	r2, r3
 8013b26:	2126      	movs	r1, #38	; 0x26
 8013b28:	2010      	movs	r0, #16
 8013b2a:	f7fe fe17 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 8013b2e:	4b47      	ldr	r3, [pc, #284]	; (8013c4c <Display_Protect_Interface+0x2bc>)
 8013b30:	001a      	movs	r2, r3
 8013b32:	212c      	movs	r1, #44	; 0x2c
 8013b34:	2010      	movs	r0, #16
 8013b36:	f7fe fe11 	bl	801275c <Write_String_16x32AsicII>
			break;
 8013b3a:	e076      	b.n	8013c2a <Display_Protect_Interface+0x29a>
			if((Error&0x02)==0x02 && (Error&0x04)==0x04)
 8013b3c:	1dfb      	adds	r3, r7, #7
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	2202      	movs	r2, #2
 8013b42:	4013      	ands	r3, r2
 8013b44:	d017      	beq.n	8013b76 <Display_Protect_Interface+0x1e6>
 8013b46:	1dfb      	adds	r3, r7, #7
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	2204      	movs	r2, #4
 8013b4c:	4013      	ands	r3, r2
 8013b4e:	d012      	beq.n	8013b76 <Display_Protect_Interface+0x1e6>
				Write_String_16x32AsicII(16,18,"OCP");
 8013b50:	4b3f      	ldr	r3, [pc, #252]	; (8013c50 <Display_Protect_Interface+0x2c0>)
 8013b52:	001a      	movs	r2, r3
 8013b54:	2112      	movs	r1, #18
 8013b56:	2010      	movs	r0, #16
 8013b58:	f7fe fe00 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8013b5c:	4b3e      	ldr	r3, [pc, #248]	; (8013c58 <Display_Protect_Interface+0x2c8>)
 8013b5e:	001a      	movs	r2, r3
 8013b60:	211e      	movs	r1, #30
 8013b62:	2010      	movs	r0, #16
 8013b64:	f7fe fdfa 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 8013b68:	4b3a      	ldr	r3, [pc, #232]	; (8013c54 <Display_Protect_Interface+0x2c4>)
 8013b6a:	001a      	movs	r2, r3
 8013b6c:	2122      	movs	r1, #34	; 0x22
 8013b6e:	2010      	movs	r0, #16
 8013b70:	f7fe fdf4 	bl	801275c <Write_String_16x32AsicII>
 8013b74:	e039      	b.n	8013bea <Display_Protect_Interface+0x25a>
			else if((Error&0x01)==0x01 && (Error&0x04)==0x04)
 8013b76:	1dfb      	adds	r3, r7, #7
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	4013      	ands	r3, r2
 8013b7e:	d017      	beq.n	8013bb0 <Display_Protect_Interface+0x220>
 8013b80:	1dfb      	adds	r3, r7, #7
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	2204      	movs	r2, #4
 8013b86:	4013      	ands	r3, r2
 8013b88:	d012      	beq.n	8013bb0 <Display_Protect_Interface+0x220>
				Write_String_16x32AsicII(16,18,"OVP");
 8013b8a:	4b2f      	ldr	r3, [pc, #188]	; (8013c48 <Display_Protect_Interface+0x2b8>)
 8013b8c:	001a      	movs	r2, r3
 8013b8e:	2112      	movs	r1, #18
 8013b90:	2010      	movs	r0, #16
 8013b92:	f7fe fde3 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8013b96:	4b30      	ldr	r3, [pc, #192]	; (8013c58 <Display_Protect_Interface+0x2c8>)
 8013b98:	001a      	movs	r2, r3
 8013b9a:	211e      	movs	r1, #30
 8013b9c:	2010      	movs	r0, #16
 8013b9e:	f7fe fddd 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 8013ba2:	4b2c      	ldr	r3, [pc, #176]	; (8013c54 <Display_Protect_Interface+0x2c4>)
 8013ba4:	001a      	movs	r2, r3
 8013ba6:	2122      	movs	r1, #34	; 0x22
 8013ba8:	2010      	movs	r0, #16
 8013baa:	f7fe fdd7 	bl	801275c <Write_String_16x32AsicII>
 8013bae:	e01c      	b.n	8013bea <Display_Protect_Interface+0x25a>
			else if((Error&0x02)==0x02 && (Error&0x01)==0x01)
 8013bb0:	1dfb      	adds	r3, r7, #7
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	2202      	movs	r2, #2
 8013bb6:	4013      	ands	r3, r2
 8013bb8:	d039      	beq.n	8013c2e <Display_Protect_Interface+0x29e>
 8013bba:	1dfb      	adds	r3, r7, #7
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	4013      	ands	r3, r2
 8013bc2:	d034      	beq.n	8013c2e <Display_Protect_Interface+0x29e>
				Write_String_16x32AsicII(16,18,"OVP");
 8013bc4:	4b20      	ldr	r3, [pc, #128]	; (8013c48 <Display_Protect_Interface+0x2b8>)
 8013bc6:	001a      	movs	r2, r3
 8013bc8:	2112      	movs	r1, #18
 8013bca:	2010      	movs	r0, #16
 8013bcc:	f7fe fdc6 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8013bd0:	4b21      	ldr	r3, [pc, #132]	; (8013c58 <Display_Protect_Interface+0x2c8>)
 8013bd2:	001a      	movs	r2, r3
 8013bd4:	211e      	movs	r1, #30
 8013bd6:	2010      	movs	r0, #16
 8013bd8:	f7fe fdc0 	bl	801275c <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OCP");
 8013bdc:	4b1c      	ldr	r3, [pc, #112]	; (8013c50 <Display_Protect_Interface+0x2c0>)
 8013bde:	001a      	movs	r2, r3
 8013be0:	2122      	movs	r1, #34	; 0x22
 8013be2:	2010      	movs	r0, #16
 8013be4:	f7fe fdba 	bl	801275c <Write_String_16x32AsicII>
			break;
 8013be8:	e021      	b.n	8013c2e <Display_Protect_Interface+0x29e>
 8013bea:	e020      	b.n	8013c2e <Display_Protect_Interface+0x29e>
			Write_String_16x32AsicII(16,18," ");
 8013bec:	4b1a      	ldr	r3, [pc, #104]	; (8013c58 <Display_Protect_Interface+0x2c8>)
 8013bee:	001a      	movs	r2, r3
 8013bf0:	2112      	movs	r1, #18
 8013bf2:	2010      	movs	r0, #16
 8013bf4:	f7fe fdb2 	bl	801275c <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,4,"OVP");
 8013bf8:	4b13      	ldr	r3, [pc, #76]	; (8013c48 <Display_Protect_Interface+0x2b8>)
 8013bfa:	001a      	movs	r2, r3
 8013bfc:	2104      	movs	r1, #4
 8013bfe:	2010      	movs	r0, #16
 8013c00:	f7fe fdac 	bl	801275c <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,24,"OCP");
 8013c04:	4b12      	ldr	r3, [pc, #72]	; (8013c50 <Display_Protect_Interface+0x2c0>)
 8013c06:	001a      	movs	r2, r3
 8013c08:	2118      	movs	r1, #24
 8013c0a:	2010      	movs	r0, #16
 8013c0c:	f7fe fda6 	bl	801275c <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,44,"OTP");
 8013c10:	4b10      	ldr	r3, [pc, #64]	; (8013c54 <Display_Protect_Interface+0x2c4>)
 8013c12:	001a      	movs	r2, r3
 8013c14:	212c      	movs	r1, #44	; 0x2c
 8013c16:	2010      	movs	r0, #16
 8013c18:	f7fe fda0 	bl	801275c <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,36," ");
 8013c1c:	4b0e      	ldr	r3, [pc, #56]	; (8013c58 <Display_Protect_Interface+0x2c8>)
 8013c1e:	001a      	movs	r2, r3
 8013c20:	2124      	movs	r1, #36	; 0x24
 8013c22:	2010      	movs	r0, #16
 8013c24:	f7fe fd9a 	bl	801275c <Write_String_16x32AsicII>
			break;
 8013c28:	e002      	b.n	8013c30 <Display_Protect_Interface+0x2a0>
			break;
 8013c2a:	46c0      	nop			; (mov r8, r8)
 8013c2c:	e000      	b.n	8013c30 <Display_Protect_Interface+0x2a0>
			break;
 8013c2e:	46c0      	nop			; (mov r8, r8)
}
 8013c30:	46c0      	nop			; (mov r8, r8)
 8013c32:	46bd      	mov	sp, r7
 8013c34:	b004      	add	sp, #16
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	20003a75 	.word	0x20003a75
 8013c3c:	200039e0 	.word	0x200039e0
 8013c40:	08017fc0 	.word	0x08017fc0
 8013c44:	08017e14 	.word	0x08017e14
 8013c48:	08017fc4 	.word	0x08017fc4
 8013c4c:	08017fc8 	.word	0x08017fc8
 8013c50:	08017fd0 	.word	0x08017fd0
 8013c54:	08017fd4 	.word	0x08017fd4
 8013c58:	08017fd8 	.word	0x08017fd8

08013c5c <Cursor_flash>:

}


void Cursor_flash(void)
{
 8013c5c:	b590      	push	{r4, r7, lr}
 8013c5e:	4c5e      	ldr	r4, [pc, #376]	; (8013dd8 <Cursor_flash+0x17c>)
 8013c60:	44a5      	add	sp, r4
 8013c62:	af00      	add	r7, sp, #0
	static int count;
	uint8_t clear_arry[16*64*2]={0x00};
 8013c64:	4b5d      	ldr	r3, [pc, #372]	; (8013ddc <Cursor_flash+0x180>)
 8013c66:	4a5e      	ldr	r2, [pc, #376]	; (8013de0 <Cursor_flash+0x184>)
 8013c68:	189b      	adds	r3, r3, r2
 8013c6a:	19db      	adds	r3, r3, r7
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	601a      	str	r2, [r3, #0]
 8013c70:	3304      	adds	r3, #4
 8013c72:	4a5c      	ldr	r2, [pc, #368]	; (8013de4 <Cursor_flash+0x188>)
 8013c74:	2100      	movs	r1, #0
 8013c76:	0018      	movs	r0, r3
 8013c78:	f000 fa1f 	bl	80140ba <memset>
	count++;
 8013c7c:	4b5a      	ldr	r3, [pc, #360]	; (8013de8 <Cursor_flash+0x18c>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	1c5a      	adds	r2, r3, #1
 8013c82:	4b59      	ldr	r3, [pc, #356]	; (8013de8 <Cursor_flash+0x18c>)
 8013c84:	601a      	str	r2, [r3, #0]
	if(count==2)
 8013c86:	4b58      	ldr	r3, [pc, #352]	; (8013de8 <Cursor_flash+0x18c>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b02      	cmp	r3, #2
 8013c8c:	d16a      	bne.n	8013d64 <Cursor_flash+0x108>
	{
		count=0;
 8013c8e:	4b56      	ldr	r3, [pc, #344]	; (8013de8 <Cursor_flash+0x18c>)
 8013c90:	2200      	movs	r2, #0
 8013c92:	601a      	str	r2, [r3, #0]

		SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);
 8013c94:	20a0      	movs	r0, #160	; 0xa0
 8013c96:	f7fd fe01 	bl	801189c <SPI_OLED_SendCommond>
		SPI_OLED_SendData(0x14);
 8013c9a:	2014      	movs	r0, #20
 8013c9c:	f7fd fdc6 	bl	801182c <SPI_OLED_SendData>
		SPI_OLED_SendData(0x11);
 8013ca0:	2011      	movs	r0, #17
 8013ca2:	f7fd fdc3 	bl	801182c <SPI_OLED_SendData>

		Set_Column_Address(Cursor_Position*4, Cursor_Position*4+1);
 8013ca6:	4b51      	ldr	r3, [pc, #324]	; (8013dec <Cursor_flash+0x190>)
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	009b      	lsls	r3, r3, #2
 8013cac:	b2da      	uxtb	r2, r3
 8013cae:	4b4f      	ldr	r3, [pc, #316]	; (8013dec <Cursor_flash+0x190>)
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	009b      	lsls	r3, r3, #2
 8013cb4:	b2db      	uxtb	r3, r3
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	0019      	movs	r1, r3
 8013cbc:	0010      	movs	r0, r2
 8013cbe:	f7fe fbb1 	bl	8012424 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 8013cc2:	210f      	movs	r1, #15
 8013cc4:	2000      	movs	r0, #0
 8013cc6:	f7fe fbcb 	bl	8012460 <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 8013cca:	205c      	movs	r0, #92	; 0x5c
 8013ccc:	f7fd fde6 	bl	801189c <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 8013cd0:	4b47      	ldr	r3, [pc, #284]	; (8013df0 <Cursor_flash+0x194>)
 8013cd2:	18fb      	adds	r3, r7, r3
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	701a      	strb	r2, [r3, #0]
 8013cd8:	e00e      	b.n	8013cf8 <Cursor_flash+0x9c>
		{
			Font_1Bit_To_4Bit(Pointleft[i]);
 8013cda:	4c45      	ldr	r4, [pc, #276]	; (8013df0 <Cursor_flash+0x194>)
 8013cdc:	193b      	adds	r3, r7, r4
 8013cde:	781a      	ldrb	r2, [r3, #0]
 8013ce0:	4b44      	ldr	r3, [pc, #272]	; (8013df4 <Cursor_flash+0x198>)
 8013ce2:	0052      	lsls	r2, r2, #1
 8013ce4:	5ad3      	ldrh	r3, [r2, r3]
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	0018      	movs	r0, r3
 8013cea:	f7fd feeb 	bl	8011ac4 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 8013cee:	193b      	adds	r3, r7, r4
 8013cf0:	781a      	ldrb	r2, [r3, #0]
 8013cf2:	193b      	adds	r3, r7, r4
 8013cf4:	3201      	adds	r2, #1
 8013cf6:	701a      	strb	r2, [r3, #0]
 8013cf8:	4b3d      	ldr	r3, [pc, #244]	; (8013df0 <Cursor_flash+0x194>)
 8013cfa:	18fb      	adds	r3, r7, r3
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	2b0f      	cmp	r3, #15
 8013d00:	d9eb      	bls.n	8013cda <Cursor_flash+0x7e>
		}
		Set_Column_Address(Cursor_Position*4+2, Cursor_Position*4+3);
 8013d02:	4b3a      	ldr	r3, [pc, #232]	; (8013dec <Cursor_flash+0x190>)
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	009b      	lsls	r3, r3, #2
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	3302      	adds	r3, #2
 8013d0c:	b2da      	uxtb	r2, r3
 8013d0e:	4b37      	ldr	r3, [pc, #220]	; (8013dec <Cursor_flash+0x190>)
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	3303      	adds	r3, #3
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	0019      	movs	r1, r3
 8013d1c:	0010      	movs	r0, r2
 8013d1e:	f7fe fb81 	bl	8012424 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 8013d22:	210f      	movs	r1, #15
 8013d24:	2000      	movs	r0, #0
 8013d26:	f7fe fb9b 	bl	8012460 <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 8013d2a:	205c      	movs	r0, #92	; 0x5c
 8013d2c:	f7fd fdb6 	bl	801189c <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 8013d30:	4b31      	ldr	r3, [pc, #196]	; (8013df8 <Cursor_flash+0x19c>)
 8013d32:	18fb      	adds	r3, r7, r3
 8013d34:	2200      	movs	r2, #0
 8013d36:	701a      	strb	r2, [r3, #0]
 8013d38:	e00e      	b.n	8013d58 <Cursor_flash+0xfc>
		{
			Font_1Bit_To_4Bit(Pointright[i]);
 8013d3a:	4c2f      	ldr	r4, [pc, #188]	; (8013df8 <Cursor_flash+0x19c>)
 8013d3c:	193b      	adds	r3, r7, r4
 8013d3e:	781a      	ldrb	r2, [r3, #0]
 8013d40:	4b2e      	ldr	r3, [pc, #184]	; (8013dfc <Cursor_flash+0x1a0>)
 8013d42:	0052      	lsls	r2, r2, #1
 8013d44:	5ad3      	ldrh	r3, [r2, r3]
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	0018      	movs	r0, r3
 8013d4a:	f7fd febb 	bl	8011ac4 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 8013d4e:	193b      	adds	r3, r7, r4
 8013d50:	781a      	ldrb	r2, [r3, #0]
 8013d52:	193b      	adds	r3, r7, r4
 8013d54:	3201      	adds	r2, #1
 8013d56:	701a      	strb	r2, [r3, #0]
 8013d58:	4b27      	ldr	r3, [pc, #156]	; (8013df8 <Cursor_flash+0x19c>)
 8013d5a:	18fb      	adds	r3, r7, r3
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	2b0f      	cmp	r3, #15
 8013d60:	d9eb      	bls.n	8013d3a <Cursor_flash+0xde>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断

	}


}
 8013d62:	e033      	b.n	8013dcc <Cursor_flash+0x170>
		Set_Column_Address(0x00,0x3f);//0到63列
 8013d64:	213f      	movs	r1, #63	; 0x3f
 8013d66:	2000      	movs	r0, #0
 8013d68:	f7fe fb5c 	bl	8012424 <Set_Column_Address>
		Set_Row_Address(0x00,15);   //0到15行
 8013d6c:	210f      	movs	r1, #15
 8013d6e:	2000      	movs	r0, #0
 8013d70:	f7fe fb76 	bl	8012460 <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 8013d74:	205c      	movs	r0, #92	; 0x5c
 8013d76:	f7fd fd91 	bl	801189c <SPI_OLED_SendCommond>
		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8013d7a:	4b21      	ldr	r3, [pc, #132]	; (8013e00 <Cursor_flash+0x1a4>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	68da      	ldr	r2, [r3, #12]
 8013d80:	4b1f      	ldr	r3, [pc, #124]	; (8013e00 <Cursor_flash+0x1a4>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2101      	movs	r1, #1
 8013d86:	438a      	bics	r2, r1
 8013d88:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8013d8a:	4b1e      	ldr	r3, [pc, #120]	; (8013e04 <Cursor_flash+0x1a8>)
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	2102      	movs	r1, #2
 8013d90:	0018      	movs	r0, r3
 8013d92:	f7f3 f8da 	bl	8006f4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8013d96:	4b1b      	ldr	r3, [pc, #108]	; (8013e04 <Cursor_flash+0x1a8>)
 8013d98:	2200      	movs	r2, #0
 8013d9a:	2101      	movs	r1, #1
 8013d9c:	0018      	movs	r0, r3
 8013d9e:	f7f3 f8d4 	bl	8006f4a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,clear_arry,32*64,100);
 8013da2:	2380      	movs	r3, #128	; 0x80
 8013da4:	011a      	lsls	r2, r3, #4
 8013da6:	1d39      	adds	r1, r7, #4
 8013da8:	4817      	ldr	r0, [pc, #92]	; (8013e08 <Cursor_flash+0x1ac>)
 8013daa:	2364      	movs	r3, #100	; 0x64
 8013dac:	f7f3 ffdc 	bl	8007d68 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8013db0:	4b14      	ldr	r3, [pc, #80]	; (8013e04 <Cursor_flash+0x1a8>)
 8013db2:	2201      	movs	r2, #1
 8013db4:	2101      	movs	r1, #1
 8013db6:	0018      	movs	r0, r3
 8013db8:	f7f3 f8c7 	bl	8006f4a <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8013dbc:	4b10      	ldr	r3, [pc, #64]	; (8013e00 <Cursor_flash+0x1a4>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	68da      	ldr	r2, [r3, #12]
 8013dc2:	4b0f      	ldr	r3, [pc, #60]	; (8013e00 <Cursor_flash+0x1a4>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2101      	movs	r1, #1
 8013dc8:	430a      	orrs	r2, r1
 8013dca:	60da      	str	r2, [r3, #12]
}
 8013dcc:	46c0      	nop			; (mov r8, r8)
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	4b0e      	ldr	r3, [pc, #56]	; (8013e0c <Cursor_flash+0x1b0>)
 8013dd2:	449d      	add	sp, r3
 8013dd4:	bd90      	pop	{r4, r7, pc}
 8013dd6:	46c0      	nop			; (mov r8, r8)
 8013dd8:	fffff7f4 	.word	0xfffff7f4
 8013ddc:	fffff7fc 	.word	0xfffff7fc
 8013de0:	00000808 	.word	0x00000808
 8013de4:	000007fc 	.word	0x000007fc
 8013de8:	20003a78 	.word	0x20003a78
 8013dec:	20003976 	.word	0x20003976
 8013df0:	00000807 	.word	0x00000807
 8013df4:	20000600 	.word	0x20000600
 8013df8:	00000806 	.word	0x00000806
 8013dfc:	20000620 	.word	0x20000620
 8013e00:	20003468 	.word	0x20003468
 8013e04:	50000800 	.word	0x50000800
 8013e08:	200033b4 	.word	0x200033b4
 8013e0c:	0000080c 	.word	0x0000080c

08013e10 <Cursor_flash_off>:

void Cursor_flash_off(void)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<64;i++)
 8013e16:	1dfb      	adds	r3, r7, #7
 8013e18:	2200      	movs	r2, #0
 8013e1a:	701a      	strb	r2, [r3, #0]
 8013e1c:	e00b      	b.n	8013e36 <Cursor_flash_off+0x26>
	{

		Write_Single_8x16AsicII(0,i,' ');
 8013e1e:	1dfb      	adds	r3, r7, #7
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	2220      	movs	r2, #32
 8013e24:	0019      	movs	r1, r3
 8013e26:	2000      	movs	r0, #0
 8013e28:	f7fe fbd2 	bl	80125d0 <Write_Single_8x16AsicII>
	for(uint8_t i=0;i<64;i++)
 8013e2c:	1dfb      	adds	r3, r7, #7
 8013e2e:	781a      	ldrb	r2, [r3, #0]
 8013e30:	1dfb      	adds	r3, r7, #7
 8013e32:	3201      	adds	r2, #1
 8013e34:	701a      	strb	r2, [r3, #0]
 8013e36:	1dfb      	adds	r3, r7, #7
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	2b3f      	cmp	r3, #63	; 0x3f
 8013e3c:	d9ef      	bls.n	8013e1e <Cursor_flash_off+0xe>

	}
	__HAL_TIM_DISABLE(&htim6);//cusor flash off
 8013e3e:	4b0c      	ldr	r3, [pc, #48]	; (8013e70 <Cursor_flash_off+0x60>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	6a1b      	ldr	r3, [r3, #32]
 8013e44:	4a0b      	ldr	r2, [pc, #44]	; (8013e74 <Cursor_flash_off+0x64>)
 8013e46:	4013      	ands	r3, r2
 8013e48:	d10d      	bne.n	8013e66 <Cursor_flash_off+0x56>
 8013e4a:	4b09      	ldr	r3, [pc, #36]	; (8013e70 <Cursor_flash_off+0x60>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	6a1b      	ldr	r3, [r3, #32]
 8013e50:	4a09      	ldr	r2, [pc, #36]	; (8013e78 <Cursor_flash_off+0x68>)
 8013e52:	4013      	ands	r3, r2
 8013e54:	d107      	bne.n	8013e66 <Cursor_flash_off+0x56>
 8013e56:	4b06      	ldr	r3, [pc, #24]	; (8013e70 <Cursor_flash_off+0x60>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	4b04      	ldr	r3, [pc, #16]	; (8013e70 <Cursor_flash_off+0x60>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	2101      	movs	r1, #1
 8013e62:	438a      	bics	r2, r1
 8013e64:	601a      	str	r2, [r3, #0]

}
 8013e66:	46c0      	nop			; (mov r8, r8)
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	b002      	add	sp, #8
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	46c0      	nop			; (mov r8, r8)
 8013e70:	200034b4 	.word	0x200034b4
 8013e74:	00001111 	.word	0x00001111
 8013e78:	00000444 	.word	0x00000444

08013e7c <Cursor_flash_on>:

void Cursor_flash_on(void)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE(&htim6);//开启闪烁
 8013e80:	4b05      	ldr	r3, [pc, #20]	; (8013e98 <Cursor_flash_on+0x1c>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	4b04      	ldr	r3, [pc, #16]	; (8013e98 <Cursor_flash_on+0x1c>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	2101      	movs	r1, #1
 8013e8c:	430a      	orrs	r2, r1
 8013e8e:	601a      	str	r2, [r3, #0]
}
 8013e90:	46c0      	nop			; (mov r8, r8)
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}
 8013e96:	46c0      	nop			; (mov r8, r8)
 8013e98:	200034b4 	.word	0x200034b4

08013e9c <Display_Interface>:
  * @brief  综合各个界面的显示函数
  * @param  需要显示的界面
  * @retval None
  */
void Display_Interface(void)
{
 8013e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e9e:	b087      	sub	sp, #28
 8013ea0:	af06      	add	r7, sp, #24
	if(Sleep_ON_OFF!=0xff) return;
 8013ea2:	4b59      	ldr	r3, [pc, #356]	; (8014008 <Display_Interface+0x16c>)
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	2bff      	cmp	r3, #255	; 0xff
 8013ea8:	d000      	beq.n	8013eac <Display_Interface+0x10>
 8013eaa:	e0a9      	b.n	8014000 <Display_Interface+0x164>
	if(Last_Interface.coordinates1!=xyz.coordinates1
 8013eac:	4b57      	ldr	r3, [pc, #348]	; (801400c <Display_Interface+0x170>)
 8013eae:	681a      	ldr	r2, [r3, #0]
 8013eb0:	4b57      	ldr	r3, [pc, #348]	; (8014010 <Display_Interface+0x174>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d10b      	bne.n	8013ed0 <Display_Interface+0x34>
	   ||Last_Interface.coordinates2!=xyz.coordinates2
 8013eb8:	4b54      	ldr	r3, [pc, #336]	; (801400c <Display_Interface+0x170>)
 8013eba:	685a      	ldr	r2, [r3, #4]
 8013ebc:	4b54      	ldr	r3, [pc, #336]	; (8014010 <Display_Interface+0x174>)
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d105      	bne.n	8013ed0 <Display_Interface+0x34>
	   ||Last_Interface.coordinates3!=xyz.coordinates3)
 8013ec4:	4b51      	ldr	r3, [pc, #324]	; (801400c <Display_Interface+0x170>)
 8013ec6:	689a      	ldr	r2, [r3, #8]
 8013ec8:	4b51      	ldr	r3, [pc, #324]	; (8014010 <Display_Interface+0x174>)
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d001      	beq.n	8013ed4 <Display_Interface+0x38>
	{
		Clear_Screen();
 8013ed0:	f7fe fb28 	bl	8012524 <Clear_Screen>

	}
	/*main interface*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8013ed4:	4b4e      	ldr	r3, [pc, #312]	; (8014010 <Display_Interface+0x174>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d124      	bne.n	8013f26 <Display_Interface+0x8a>
 8013edc:	4b4c      	ldr	r3, [pc, #304]	; (8014010 <Display_Interface+0x174>)
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d120      	bne.n	8013f26 <Display_Interface+0x8a>
 8013ee4:	4b4a      	ldr	r3, [pc, #296]	; (8014010 <Display_Interface+0x174>)
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d11c      	bne.n	8013f26 <Display_Interface+0x8a>
	{
		Display_Main_Interface(Voltage_real,Current_real,ON_OFF,CV_CC_CP,CYCLE_NOT_CYCLE,DELAY_NOT_DELAY,Actual,LOCK_UNLOCK,Shift_Not_Shift);
 8013eec:	4b49      	ldr	r3, [pc, #292]	; (8014014 <Display_Interface+0x178>)
 8013eee:	681c      	ldr	r4, [r3, #0]
 8013ef0:	4b49      	ldr	r3, [pc, #292]	; (8014018 <Display_Interface+0x17c>)
 8013ef2:	681d      	ldr	r5, [r3, #0]
 8013ef4:	4b49      	ldr	r3, [pc, #292]	; (801401c <Display_Interface+0x180>)
 8013ef6:	781e      	ldrb	r6, [r3, #0]
 8013ef8:	4b49      	ldr	r3, [pc, #292]	; (8014020 <Display_Interface+0x184>)
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	469c      	mov	ip, r3
 8013efe:	4b49      	ldr	r3, [pc, #292]	; (8014024 <Display_Interface+0x188>)
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	4a49      	ldr	r2, [pc, #292]	; (8014028 <Display_Interface+0x18c>)
 8013f04:	7812      	ldrb	r2, [r2, #0]
 8013f06:	4949      	ldr	r1, [pc, #292]	; (801402c <Display_Interface+0x190>)
 8013f08:	7809      	ldrb	r1, [r1, #0]
 8013f0a:	4849      	ldr	r0, [pc, #292]	; (8014030 <Display_Interface+0x194>)
 8013f0c:	7800      	ldrb	r0, [r0, #0]
 8013f0e:	9004      	str	r0, [sp, #16]
 8013f10:	9103      	str	r1, [sp, #12]
 8013f12:	2100      	movs	r1, #0
 8013f14:	9102      	str	r1, [sp, #8]
 8013f16:	9201      	str	r2, [sp, #4]
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	4663      	mov	r3, ip
 8013f1c:	0032      	movs	r2, r6
 8013f1e:	1c29      	adds	r1, r5, #0
 8013f20:	1c20      	adds	r0, r4, #0
 8013f22:	f7ff f829 	bl	8012f78 <Display_Main_Interface>
	}
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates3==0))
 8013f26:	4b3a      	ldr	r3, [pc, #232]	; (8014010 <Display_Interface+0x174>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d108      	bne.n	8013f40 <Display_Interface+0xa4>
 8013f2e:	4b38      	ldr	r3, [pc, #224]	; (8014010 <Display_Interface+0x174>)
 8013f30:	689b      	ldr	r3, [r3, #8]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d104      	bne.n	8013f40 <Display_Interface+0xa4>
	{
		Display_Menu_Function_Interface_First_Menu(xyz.coordinates2);
 8013f36:	4b36      	ldr	r3, [pc, #216]	; (8014010 <Display_Interface+0x174>)
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	0018      	movs	r0, r3
 8013f3c:	f7ff fa46 	bl	80133cc <Display_Menu_Function_Interface_First_Menu>
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 8013f40:	4b33      	ldr	r3, [pc, #204]	; (8014010 <Display_Interface+0x174>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d10f      	bne.n	8013f68 <Display_Interface+0xcc>
 8013f48:	4b31      	ldr	r3, [pc, #196]	; (8014010 <Display_Interface+0x174>)
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d00b      	beq.n	8013f68 <Display_Interface+0xcc>
 8013f50:	4b2f      	ldr	r3, [pc, #188]	; (8014010 <Display_Interface+0x174>)
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d007      	beq.n	8013f68 <Display_Interface+0xcc>
	{
		Display_Menu_Function_Interface_Second_Menu(xyz.coordinates2,xyz.coordinates3);
 8013f58:	4b2d      	ldr	r3, [pc, #180]	; (8014010 <Display_Interface+0x174>)
 8013f5a:	685a      	ldr	r2, [r3, #4]
 8013f5c:	4b2c      	ldr	r3, [pc, #176]	; (8014010 <Display_Interface+0x174>)
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	0019      	movs	r1, r3
 8013f62:	0010      	movs	r0, r2
 8013f64:	f7ff fcd4 	bl	8013910 <Display_Menu_Function_Interface_Second_Menu>
	}
	/*V_set I_set*/
	if(xyz.coordinates1==2)
 8013f68:	4b29      	ldr	r3, [pc, #164]	; (8014010 <Display_Interface+0x174>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	2b02      	cmp	r3, #2
 8013f6e:	d10c      	bne.n	8013f8a <Display_Interface+0xee>
	{
		if(xyz.coordinates2==1) 	 Display_Main_Interface_I_set();
 8013f70:	4b27      	ldr	r3, [pc, #156]	; (8014010 <Display_Interface+0x174>)
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	d102      	bne.n	8013f7e <Display_Interface+0xe2>
 8013f78:	f7fe ff7a 	bl	8012e70 <Display_Main_Interface_I_set>
 8013f7c:	e005      	b.n	8013f8a <Display_Interface+0xee>
		else if(xyz.coordinates2==2) Display_Main_Interface_V_set();
 8013f7e:	4b24      	ldr	r3, [pc, #144]	; (8014010 <Display_Interface+0x174>)
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	2b02      	cmp	r3, #2
 8013f84:	d101      	bne.n	8013f8a <Display_Interface+0xee>
 8013f86:	f7fe fee9 	bl	8012d5c <Display_Main_Interface_V_set>
	}
	/*Reacll Save*/
	if(xyz.coordinates1==3)
 8013f8a:	4b21      	ldr	r3, [pc, #132]	; (8014010 <Display_Interface+0x174>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2b03      	cmp	r3, #3
 8013f90:	d114      	bne.n	8013fbc <Display_Interface+0x120>
		if(xyz.coordinates3==0)
		{
			//Display_Access_Interface_default(Recall_Save,Recall_Save_Number);
		}
		//save
		if( (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 8013f92:	4b1f      	ldr	r3, [pc, #124]	; (8014010 <Display_Interface+0x174>)
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d106      	bne.n	8013fa8 <Display_Interface+0x10c>
 8013f9a:	4b1d      	ldr	r3, [pc, #116]	; (8014010 <Display_Interface+0x174>)
 8013f9c:	689b      	ldr	r3, [r3, #8]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d002      	beq.n	8013fa8 <Display_Interface+0x10c>
		{
			Display_Access_Interface_Save();
 8013fa2:	f7ff f963 	bl	801326c <Display_Access_Interface_Save>
 8013fa6:	e009      	b.n	8013fbc <Display_Interface+0x120>
		}
		//recall
		else if( (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 8013fa8:	4b19      	ldr	r3, [pc, #100]	; (8014010 <Display_Interface+0x174>)
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	2b02      	cmp	r3, #2
 8013fae:	d105      	bne.n	8013fbc <Display_Interface+0x120>
 8013fb0:	4b17      	ldr	r3, [pc, #92]	; (8014010 <Display_Interface+0x174>)
 8013fb2:	689b      	ldr	r3, [r3, #8]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d001      	beq.n	8013fbc <Display_Interface+0x120>
		{
			Display_Access_Interface_Recall();
 8013fb8:	f7ff f99e 	bl	80132f8 <Display_Access_Interface_Recall>
		}

	}
	/*Protect*/
	if(xyz.coordinates1==4)
 8013fbc:	4b14      	ldr	r3, [pc, #80]	; (8014010 <Display_Interface+0x174>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	2b04      	cmp	r3, #4
 8013fc2:	d104      	bne.n	8013fce <Display_Interface+0x132>
	{
		Display_Protect_Interface(Error);
 8013fc4:	4b1b      	ldr	r3, [pc, #108]	; (8014034 <Display_Interface+0x198>)
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	0018      	movs	r0, r3
 8013fca:	f7ff fce1 	bl	8013990 <Display_Protect_Interface>
	}
	/*advance interface*/
	if((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 8013fce:	4b10      	ldr	r3, [pc, #64]	; (8014010 <Display_Interface+0x174>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	2b09      	cmp	r3, #9
 8013fd4:	d10f      	bne.n	8013ff6 <Display_Interface+0x15a>
 8013fd6:	4b0e      	ldr	r3, [pc, #56]	; (8014010 <Display_Interface+0x174>)
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	2b09      	cmp	r3, #9
 8013fdc:	d10b      	bne.n	8013ff6 <Display_Interface+0x15a>
 8013fde:	4b0c      	ldr	r3, [pc, #48]	; (8014010 <Display_Interface+0x174>)
 8013fe0:	689b      	ldr	r3, [r3, #8]
 8013fe2:	2b09      	cmp	r3, #9
 8013fe4:	d107      	bne.n	8013ff6 <Display_Interface+0x15a>
	{
		Display_Param_Interface(Set_Voltage,Set_Current);
 8013fe6:	4b14      	ldr	r3, [pc, #80]	; (8014038 <Display_Interface+0x19c>)
 8013fe8:	881a      	ldrh	r2, [r3, #0]
 8013fea:	4b14      	ldr	r3, [pc, #80]	; (801403c <Display_Interface+0x1a0>)
 8013fec:	881b      	ldrh	r3, [r3, #0]
 8013fee:	0019      	movs	r1, r3
 8013ff0:	0010      	movs	r0, r2
 8013ff2:	f7fe ffff 	bl	8012ff4 <Display_Param_Interface>
	}

	Last_Interface=xyz;//记录退出前界面
 8013ff6:	4b05      	ldr	r3, [pc, #20]	; (801400c <Display_Interface+0x170>)
 8013ff8:	4a05      	ldr	r2, [pc, #20]	; (8014010 <Display_Interface+0x174>)
 8013ffa:	ca13      	ldmia	r2!, {r0, r1, r4}
 8013ffc:	c313      	stmia	r3!, {r0, r1, r4}
 8013ffe:	e000      	b.n	8014002 <Display_Interface+0x166>
	if(Sleep_ON_OFF!=0xff) return;
 8014000:	46c0      	nop			; (mov r8, r8)

}
 8014002:	46bd      	mov	sp, r7
 8014004:	b001      	add	sp, #4
 8014006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014008:	20002fd3 	.word	0x20002fd3
 801400c:	200039ec 	.word	0x200039ec
 8014010:	200039e0 	.word	0x200039e0
 8014014:	200039d8 	.word	0x200039d8
 8014018:	200039dc 	.word	0x200039dc
 801401c:	20003970 	.word	0x20003970
 8014020:	20003972 	.word	0x20003972
 8014024:	20002fd0 	.word	0x20002fd0
 8014028:	20002fd1 	.word	0x20002fd1
 801402c:	20003973 	.word	0x20003973
 8014030:	2000396f 	.word	0x2000396f
 8014034:	200039c1 	.word	0x200039c1
 8014038:	20002fda 	.word	0x20002fda
 801403c:	20002fdc 	.word	0x20002fdc

08014040 <__errno>:
 8014040:	4b01      	ldr	r3, [pc, #4]	; (8014048 <__errno+0x8>)
 8014042:	6818      	ldr	r0, [r3, #0]
 8014044:	4770      	bx	lr
 8014046:	46c0      	nop			; (mov r8, r8)
 8014048:	200030cc 	.word	0x200030cc

0801404c <__libc_init_array>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	2600      	movs	r6, #0
 8014050:	4d0c      	ldr	r5, [pc, #48]	; (8014084 <__libc_init_array+0x38>)
 8014052:	4c0d      	ldr	r4, [pc, #52]	; (8014088 <__libc_init_array+0x3c>)
 8014054:	1b64      	subs	r4, r4, r5
 8014056:	10a4      	asrs	r4, r4, #2
 8014058:	42a6      	cmp	r6, r4
 801405a:	d109      	bne.n	8014070 <__libc_init_array+0x24>
 801405c:	2600      	movs	r6, #0
 801405e:	f003 fe99 	bl	8017d94 <_init>
 8014062:	4d0a      	ldr	r5, [pc, #40]	; (801408c <__libc_init_array+0x40>)
 8014064:	4c0a      	ldr	r4, [pc, #40]	; (8014090 <__libc_init_array+0x44>)
 8014066:	1b64      	subs	r4, r4, r5
 8014068:	10a4      	asrs	r4, r4, #2
 801406a:	42a6      	cmp	r6, r4
 801406c:	d105      	bne.n	801407a <__libc_init_array+0x2e>
 801406e:	bd70      	pop	{r4, r5, r6, pc}
 8014070:	00b3      	lsls	r3, r6, #2
 8014072:	58eb      	ldr	r3, [r5, r3]
 8014074:	4798      	blx	r3
 8014076:	3601      	adds	r6, #1
 8014078:	e7ee      	b.n	8014058 <__libc_init_array+0xc>
 801407a:	00b3      	lsls	r3, r6, #2
 801407c:	58eb      	ldr	r3, [r5, r3]
 801407e:	4798      	blx	r3
 8014080:	3601      	adds	r6, #1
 8014082:	e7f2      	b.n	801406a <__libc_init_array+0x1e>
 8014084:	08018898 	.word	0x08018898
 8014088:	08018898 	.word	0x08018898
 801408c:	08018898 	.word	0x08018898
 8014090:	0801889c 	.word	0x0801889c

08014094 <malloc>:
 8014094:	b510      	push	{r4, lr}
 8014096:	4b03      	ldr	r3, [pc, #12]	; (80140a4 <malloc+0x10>)
 8014098:	0001      	movs	r1, r0
 801409a:	6818      	ldr	r0, [r3, #0]
 801409c:	f000 f882 	bl	80141a4 <_malloc_r>
 80140a0:	bd10      	pop	{r4, pc}
 80140a2:	46c0      	nop			; (mov r8, r8)
 80140a4:	200030cc 	.word	0x200030cc

080140a8 <memcpy>:
 80140a8:	2300      	movs	r3, #0
 80140aa:	b510      	push	{r4, lr}
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d100      	bne.n	80140b2 <memcpy+0xa>
 80140b0:	bd10      	pop	{r4, pc}
 80140b2:	5ccc      	ldrb	r4, [r1, r3]
 80140b4:	54c4      	strb	r4, [r0, r3]
 80140b6:	3301      	adds	r3, #1
 80140b8:	e7f8      	b.n	80140ac <memcpy+0x4>

080140ba <memset>:
 80140ba:	0003      	movs	r3, r0
 80140bc:	1882      	adds	r2, r0, r2
 80140be:	4293      	cmp	r3, r2
 80140c0:	d100      	bne.n	80140c4 <memset+0xa>
 80140c2:	4770      	bx	lr
 80140c4:	7019      	strb	r1, [r3, #0]
 80140c6:	3301      	adds	r3, #1
 80140c8:	e7f9      	b.n	80140be <memset+0x4>
	...

080140cc <_free_r>:
 80140cc:	b570      	push	{r4, r5, r6, lr}
 80140ce:	0005      	movs	r5, r0
 80140d0:	2900      	cmp	r1, #0
 80140d2:	d010      	beq.n	80140f6 <_free_r+0x2a>
 80140d4:	1f0c      	subs	r4, r1, #4
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	da00      	bge.n	80140de <_free_r+0x12>
 80140dc:	18e4      	adds	r4, r4, r3
 80140de:	0028      	movs	r0, r5
 80140e0:	f001 fc2c 	bl	801593c <__malloc_lock>
 80140e4:	4a1d      	ldr	r2, [pc, #116]	; (801415c <_free_r+0x90>)
 80140e6:	6813      	ldr	r3, [r2, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d105      	bne.n	80140f8 <_free_r+0x2c>
 80140ec:	6063      	str	r3, [r4, #4]
 80140ee:	6014      	str	r4, [r2, #0]
 80140f0:	0028      	movs	r0, r5
 80140f2:	f001 fc2b 	bl	801594c <__malloc_unlock>
 80140f6:	bd70      	pop	{r4, r5, r6, pc}
 80140f8:	42a3      	cmp	r3, r4
 80140fa:	d908      	bls.n	801410e <_free_r+0x42>
 80140fc:	6821      	ldr	r1, [r4, #0]
 80140fe:	1860      	adds	r0, r4, r1
 8014100:	4283      	cmp	r3, r0
 8014102:	d1f3      	bne.n	80140ec <_free_r+0x20>
 8014104:	6818      	ldr	r0, [r3, #0]
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	1841      	adds	r1, r0, r1
 801410a:	6021      	str	r1, [r4, #0]
 801410c:	e7ee      	b.n	80140ec <_free_r+0x20>
 801410e:	001a      	movs	r2, r3
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d001      	beq.n	801411a <_free_r+0x4e>
 8014116:	42a3      	cmp	r3, r4
 8014118:	d9f9      	bls.n	801410e <_free_r+0x42>
 801411a:	6811      	ldr	r1, [r2, #0]
 801411c:	1850      	adds	r0, r2, r1
 801411e:	42a0      	cmp	r0, r4
 8014120:	d10b      	bne.n	801413a <_free_r+0x6e>
 8014122:	6820      	ldr	r0, [r4, #0]
 8014124:	1809      	adds	r1, r1, r0
 8014126:	1850      	adds	r0, r2, r1
 8014128:	6011      	str	r1, [r2, #0]
 801412a:	4283      	cmp	r3, r0
 801412c:	d1e0      	bne.n	80140f0 <_free_r+0x24>
 801412e:	6818      	ldr	r0, [r3, #0]
 8014130:	685b      	ldr	r3, [r3, #4]
 8014132:	1841      	adds	r1, r0, r1
 8014134:	6011      	str	r1, [r2, #0]
 8014136:	6053      	str	r3, [r2, #4]
 8014138:	e7da      	b.n	80140f0 <_free_r+0x24>
 801413a:	42a0      	cmp	r0, r4
 801413c:	d902      	bls.n	8014144 <_free_r+0x78>
 801413e:	230c      	movs	r3, #12
 8014140:	602b      	str	r3, [r5, #0]
 8014142:	e7d5      	b.n	80140f0 <_free_r+0x24>
 8014144:	6821      	ldr	r1, [r4, #0]
 8014146:	1860      	adds	r0, r4, r1
 8014148:	4283      	cmp	r3, r0
 801414a:	d103      	bne.n	8014154 <_free_r+0x88>
 801414c:	6818      	ldr	r0, [r3, #0]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	1841      	adds	r1, r0, r1
 8014152:	6021      	str	r1, [r4, #0]
 8014154:	6063      	str	r3, [r4, #4]
 8014156:	6054      	str	r4, [r2, #4]
 8014158:	e7ca      	b.n	80140f0 <_free_r+0x24>
 801415a:	46c0      	nop			; (mov r8, r8)
 801415c:	20003a7c 	.word	0x20003a7c

08014160 <sbrk_aligned>:
 8014160:	b570      	push	{r4, r5, r6, lr}
 8014162:	4e0f      	ldr	r6, [pc, #60]	; (80141a0 <sbrk_aligned+0x40>)
 8014164:	000d      	movs	r5, r1
 8014166:	6831      	ldr	r1, [r6, #0]
 8014168:	0004      	movs	r4, r0
 801416a:	2900      	cmp	r1, #0
 801416c:	d102      	bne.n	8014174 <sbrk_aligned+0x14>
 801416e:	f000 fcfd 	bl	8014b6c <_sbrk_r>
 8014172:	6030      	str	r0, [r6, #0]
 8014174:	0029      	movs	r1, r5
 8014176:	0020      	movs	r0, r4
 8014178:	f000 fcf8 	bl	8014b6c <_sbrk_r>
 801417c:	1c43      	adds	r3, r0, #1
 801417e:	d00a      	beq.n	8014196 <sbrk_aligned+0x36>
 8014180:	2303      	movs	r3, #3
 8014182:	1cc5      	adds	r5, r0, #3
 8014184:	439d      	bics	r5, r3
 8014186:	42a8      	cmp	r0, r5
 8014188:	d007      	beq.n	801419a <sbrk_aligned+0x3a>
 801418a:	1a29      	subs	r1, r5, r0
 801418c:	0020      	movs	r0, r4
 801418e:	f000 fced 	bl	8014b6c <_sbrk_r>
 8014192:	1c43      	adds	r3, r0, #1
 8014194:	d101      	bne.n	801419a <sbrk_aligned+0x3a>
 8014196:	2501      	movs	r5, #1
 8014198:	426d      	negs	r5, r5
 801419a:	0028      	movs	r0, r5
 801419c:	bd70      	pop	{r4, r5, r6, pc}
 801419e:	46c0      	nop			; (mov r8, r8)
 80141a0:	20003a80 	.word	0x20003a80

080141a4 <_malloc_r>:
 80141a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141a6:	2203      	movs	r2, #3
 80141a8:	1ccb      	adds	r3, r1, #3
 80141aa:	4393      	bics	r3, r2
 80141ac:	3308      	adds	r3, #8
 80141ae:	0006      	movs	r6, r0
 80141b0:	001f      	movs	r7, r3
 80141b2:	2b0c      	cmp	r3, #12
 80141b4:	d232      	bcs.n	801421c <_malloc_r+0x78>
 80141b6:	270c      	movs	r7, #12
 80141b8:	42b9      	cmp	r1, r7
 80141ba:	d831      	bhi.n	8014220 <_malloc_r+0x7c>
 80141bc:	0030      	movs	r0, r6
 80141be:	f001 fbbd 	bl	801593c <__malloc_lock>
 80141c2:	4d32      	ldr	r5, [pc, #200]	; (801428c <_malloc_r+0xe8>)
 80141c4:	682b      	ldr	r3, [r5, #0]
 80141c6:	001c      	movs	r4, r3
 80141c8:	2c00      	cmp	r4, #0
 80141ca:	d12e      	bne.n	801422a <_malloc_r+0x86>
 80141cc:	0039      	movs	r1, r7
 80141ce:	0030      	movs	r0, r6
 80141d0:	f7ff ffc6 	bl	8014160 <sbrk_aligned>
 80141d4:	0004      	movs	r4, r0
 80141d6:	1c43      	adds	r3, r0, #1
 80141d8:	d11e      	bne.n	8014218 <_malloc_r+0x74>
 80141da:	682c      	ldr	r4, [r5, #0]
 80141dc:	0025      	movs	r5, r4
 80141de:	2d00      	cmp	r5, #0
 80141e0:	d14a      	bne.n	8014278 <_malloc_r+0xd4>
 80141e2:	6823      	ldr	r3, [r4, #0]
 80141e4:	0029      	movs	r1, r5
 80141e6:	18e3      	adds	r3, r4, r3
 80141e8:	0030      	movs	r0, r6
 80141ea:	9301      	str	r3, [sp, #4]
 80141ec:	f000 fcbe 	bl	8014b6c <_sbrk_r>
 80141f0:	9b01      	ldr	r3, [sp, #4]
 80141f2:	4283      	cmp	r3, r0
 80141f4:	d143      	bne.n	801427e <_malloc_r+0xda>
 80141f6:	6823      	ldr	r3, [r4, #0]
 80141f8:	3703      	adds	r7, #3
 80141fa:	1aff      	subs	r7, r7, r3
 80141fc:	2303      	movs	r3, #3
 80141fe:	439f      	bics	r7, r3
 8014200:	3708      	adds	r7, #8
 8014202:	2f0c      	cmp	r7, #12
 8014204:	d200      	bcs.n	8014208 <_malloc_r+0x64>
 8014206:	270c      	movs	r7, #12
 8014208:	0039      	movs	r1, r7
 801420a:	0030      	movs	r0, r6
 801420c:	f7ff ffa8 	bl	8014160 <sbrk_aligned>
 8014210:	1c43      	adds	r3, r0, #1
 8014212:	d034      	beq.n	801427e <_malloc_r+0xda>
 8014214:	6823      	ldr	r3, [r4, #0]
 8014216:	19df      	adds	r7, r3, r7
 8014218:	6027      	str	r7, [r4, #0]
 801421a:	e013      	b.n	8014244 <_malloc_r+0xa0>
 801421c:	2b00      	cmp	r3, #0
 801421e:	dacb      	bge.n	80141b8 <_malloc_r+0x14>
 8014220:	230c      	movs	r3, #12
 8014222:	2500      	movs	r5, #0
 8014224:	6033      	str	r3, [r6, #0]
 8014226:	0028      	movs	r0, r5
 8014228:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801422a:	6822      	ldr	r2, [r4, #0]
 801422c:	1bd1      	subs	r1, r2, r7
 801422e:	d420      	bmi.n	8014272 <_malloc_r+0xce>
 8014230:	290b      	cmp	r1, #11
 8014232:	d917      	bls.n	8014264 <_malloc_r+0xc0>
 8014234:	19e2      	adds	r2, r4, r7
 8014236:	6027      	str	r7, [r4, #0]
 8014238:	42a3      	cmp	r3, r4
 801423a:	d111      	bne.n	8014260 <_malloc_r+0xbc>
 801423c:	602a      	str	r2, [r5, #0]
 801423e:	6863      	ldr	r3, [r4, #4]
 8014240:	6011      	str	r1, [r2, #0]
 8014242:	6053      	str	r3, [r2, #4]
 8014244:	0030      	movs	r0, r6
 8014246:	0025      	movs	r5, r4
 8014248:	f001 fb80 	bl	801594c <__malloc_unlock>
 801424c:	2207      	movs	r2, #7
 801424e:	350b      	adds	r5, #11
 8014250:	1d23      	adds	r3, r4, #4
 8014252:	4395      	bics	r5, r2
 8014254:	1aea      	subs	r2, r5, r3
 8014256:	429d      	cmp	r5, r3
 8014258:	d0e5      	beq.n	8014226 <_malloc_r+0x82>
 801425a:	1b5b      	subs	r3, r3, r5
 801425c:	50a3      	str	r3, [r4, r2]
 801425e:	e7e2      	b.n	8014226 <_malloc_r+0x82>
 8014260:	605a      	str	r2, [r3, #4]
 8014262:	e7ec      	b.n	801423e <_malloc_r+0x9a>
 8014264:	6862      	ldr	r2, [r4, #4]
 8014266:	42a3      	cmp	r3, r4
 8014268:	d101      	bne.n	801426e <_malloc_r+0xca>
 801426a:	602a      	str	r2, [r5, #0]
 801426c:	e7ea      	b.n	8014244 <_malloc_r+0xa0>
 801426e:	605a      	str	r2, [r3, #4]
 8014270:	e7e8      	b.n	8014244 <_malloc_r+0xa0>
 8014272:	0023      	movs	r3, r4
 8014274:	6864      	ldr	r4, [r4, #4]
 8014276:	e7a7      	b.n	80141c8 <_malloc_r+0x24>
 8014278:	002c      	movs	r4, r5
 801427a:	686d      	ldr	r5, [r5, #4]
 801427c:	e7af      	b.n	80141de <_malloc_r+0x3a>
 801427e:	230c      	movs	r3, #12
 8014280:	0030      	movs	r0, r6
 8014282:	6033      	str	r3, [r6, #0]
 8014284:	f001 fb62 	bl	801594c <__malloc_unlock>
 8014288:	e7cd      	b.n	8014226 <_malloc_r+0x82>
 801428a:	46c0      	nop			; (mov r8, r8)
 801428c:	20003a7c 	.word	0x20003a7c

08014290 <__cvt>:
 8014290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014292:	001e      	movs	r6, r3
 8014294:	2300      	movs	r3, #0
 8014296:	0014      	movs	r4, r2
 8014298:	b08b      	sub	sp, #44	; 0x2c
 801429a:	429e      	cmp	r6, r3
 801429c:	da04      	bge.n	80142a8 <__cvt+0x18>
 801429e:	2180      	movs	r1, #128	; 0x80
 80142a0:	0609      	lsls	r1, r1, #24
 80142a2:	1873      	adds	r3, r6, r1
 80142a4:	001e      	movs	r6, r3
 80142a6:	232d      	movs	r3, #45	; 0x2d
 80142a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80142ac:	7013      	strb	r3, [r2, #0]
 80142ae:	2320      	movs	r3, #32
 80142b0:	2203      	movs	r2, #3
 80142b2:	439f      	bics	r7, r3
 80142b4:	2f46      	cmp	r7, #70	; 0x46
 80142b6:	d007      	beq.n	80142c8 <__cvt+0x38>
 80142b8:	003b      	movs	r3, r7
 80142ba:	3b45      	subs	r3, #69	; 0x45
 80142bc:	4259      	negs	r1, r3
 80142be:	414b      	adcs	r3, r1
 80142c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80142c2:	3a01      	subs	r2, #1
 80142c4:	18cb      	adds	r3, r1, r3
 80142c6:	9310      	str	r3, [sp, #64]	; 0x40
 80142c8:	ab09      	add	r3, sp, #36	; 0x24
 80142ca:	9304      	str	r3, [sp, #16]
 80142cc:	ab08      	add	r3, sp, #32
 80142ce:	9303      	str	r3, [sp, #12]
 80142d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142d2:	9200      	str	r2, [sp, #0]
 80142d4:	9302      	str	r3, [sp, #8]
 80142d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142d8:	0022      	movs	r2, r4
 80142da:	9301      	str	r3, [sp, #4]
 80142dc:	0033      	movs	r3, r6
 80142de:	f000 fd03 	bl	8014ce8 <_dtoa_r>
 80142e2:	0005      	movs	r5, r0
 80142e4:	2f47      	cmp	r7, #71	; 0x47
 80142e6:	d102      	bne.n	80142ee <__cvt+0x5e>
 80142e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142ea:	07db      	lsls	r3, r3, #31
 80142ec:	d528      	bpl.n	8014340 <__cvt+0xb0>
 80142ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142f0:	18eb      	adds	r3, r5, r3
 80142f2:	9307      	str	r3, [sp, #28]
 80142f4:	2f46      	cmp	r7, #70	; 0x46
 80142f6:	d114      	bne.n	8014322 <__cvt+0x92>
 80142f8:	782b      	ldrb	r3, [r5, #0]
 80142fa:	2b30      	cmp	r3, #48	; 0x30
 80142fc:	d10c      	bne.n	8014318 <__cvt+0x88>
 80142fe:	2200      	movs	r2, #0
 8014300:	2300      	movs	r3, #0
 8014302:	0020      	movs	r0, r4
 8014304:	0031      	movs	r1, r6
 8014306:	f7ec f8a7 	bl	8000458 <__aeabi_dcmpeq>
 801430a:	2800      	cmp	r0, #0
 801430c:	d104      	bne.n	8014318 <__cvt+0x88>
 801430e:	2301      	movs	r3, #1
 8014310:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014312:	1a9b      	subs	r3, r3, r2
 8014314:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014316:	6013      	str	r3, [r2, #0]
 8014318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801431a:	9a07      	ldr	r2, [sp, #28]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	18d3      	adds	r3, r2, r3
 8014320:	9307      	str	r3, [sp, #28]
 8014322:	2200      	movs	r2, #0
 8014324:	2300      	movs	r3, #0
 8014326:	0020      	movs	r0, r4
 8014328:	0031      	movs	r1, r6
 801432a:	f7ec f895 	bl	8000458 <__aeabi_dcmpeq>
 801432e:	2800      	cmp	r0, #0
 8014330:	d001      	beq.n	8014336 <__cvt+0xa6>
 8014332:	9b07      	ldr	r3, [sp, #28]
 8014334:	9309      	str	r3, [sp, #36]	; 0x24
 8014336:	2230      	movs	r2, #48	; 0x30
 8014338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801433a:	9907      	ldr	r1, [sp, #28]
 801433c:	428b      	cmp	r3, r1
 801433e:	d306      	bcc.n	801434e <__cvt+0xbe>
 8014340:	0028      	movs	r0, r5
 8014342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014344:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014346:	1b5b      	subs	r3, r3, r5
 8014348:	6013      	str	r3, [r2, #0]
 801434a:	b00b      	add	sp, #44	; 0x2c
 801434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801434e:	1c59      	adds	r1, r3, #1
 8014350:	9109      	str	r1, [sp, #36]	; 0x24
 8014352:	701a      	strb	r2, [r3, #0]
 8014354:	e7f0      	b.n	8014338 <__cvt+0xa8>

08014356 <__exponent>:
 8014356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014358:	1c83      	adds	r3, r0, #2
 801435a:	b087      	sub	sp, #28
 801435c:	9303      	str	r3, [sp, #12]
 801435e:	0005      	movs	r5, r0
 8014360:	000c      	movs	r4, r1
 8014362:	232b      	movs	r3, #43	; 0x2b
 8014364:	7002      	strb	r2, [r0, #0]
 8014366:	2900      	cmp	r1, #0
 8014368:	da01      	bge.n	801436e <__exponent+0x18>
 801436a:	424c      	negs	r4, r1
 801436c:	3302      	adds	r3, #2
 801436e:	706b      	strb	r3, [r5, #1]
 8014370:	2c09      	cmp	r4, #9
 8014372:	dd31      	ble.n	80143d8 <__exponent+0x82>
 8014374:	270a      	movs	r7, #10
 8014376:	ab04      	add	r3, sp, #16
 8014378:	1dde      	adds	r6, r3, #7
 801437a:	0020      	movs	r0, r4
 801437c:	0039      	movs	r1, r7
 801437e:	9601      	str	r6, [sp, #4]
 8014380:	f7ec f854 	bl	800042c <__aeabi_idivmod>
 8014384:	3e01      	subs	r6, #1
 8014386:	3130      	adds	r1, #48	; 0x30
 8014388:	0020      	movs	r0, r4
 801438a:	7031      	strb	r1, [r6, #0]
 801438c:	0039      	movs	r1, r7
 801438e:	9402      	str	r4, [sp, #8]
 8014390:	f7eb ff66 	bl	8000260 <__divsi3>
 8014394:	9b02      	ldr	r3, [sp, #8]
 8014396:	0004      	movs	r4, r0
 8014398:	2b63      	cmp	r3, #99	; 0x63
 801439a:	dcee      	bgt.n	801437a <__exponent+0x24>
 801439c:	9b01      	ldr	r3, [sp, #4]
 801439e:	3430      	adds	r4, #48	; 0x30
 80143a0:	1e9a      	subs	r2, r3, #2
 80143a2:	0013      	movs	r3, r2
 80143a4:	9903      	ldr	r1, [sp, #12]
 80143a6:	7014      	strb	r4, [r2, #0]
 80143a8:	a804      	add	r0, sp, #16
 80143aa:	3007      	adds	r0, #7
 80143ac:	4298      	cmp	r0, r3
 80143ae:	d80e      	bhi.n	80143ce <__exponent+0x78>
 80143b0:	ab04      	add	r3, sp, #16
 80143b2:	3307      	adds	r3, #7
 80143b4:	2000      	movs	r0, #0
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d804      	bhi.n	80143c4 <__exponent+0x6e>
 80143ba:	ab04      	add	r3, sp, #16
 80143bc:	3009      	adds	r0, #9
 80143be:	18c0      	adds	r0, r0, r3
 80143c0:	9b01      	ldr	r3, [sp, #4]
 80143c2:	1ac0      	subs	r0, r0, r3
 80143c4:	9b03      	ldr	r3, [sp, #12]
 80143c6:	1818      	adds	r0, r3, r0
 80143c8:	1b40      	subs	r0, r0, r5
 80143ca:	b007      	add	sp, #28
 80143cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ce:	7818      	ldrb	r0, [r3, #0]
 80143d0:	3301      	adds	r3, #1
 80143d2:	7008      	strb	r0, [r1, #0]
 80143d4:	3101      	adds	r1, #1
 80143d6:	e7e7      	b.n	80143a8 <__exponent+0x52>
 80143d8:	2330      	movs	r3, #48	; 0x30
 80143da:	18e4      	adds	r4, r4, r3
 80143dc:	70ab      	strb	r3, [r5, #2]
 80143de:	1d28      	adds	r0, r5, #4
 80143e0:	70ec      	strb	r4, [r5, #3]
 80143e2:	e7f1      	b.n	80143c8 <__exponent+0x72>

080143e4 <_printf_float>:
 80143e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143e6:	b095      	sub	sp, #84	; 0x54
 80143e8:	000c      	movs	r4, r1
 80143ea:	9209      	str	r2, [sp, #36]	; 0x24
 80143ec:	001e      	movs	r6, r3
 80143ee:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80143f0:	0007      	movs	r7, r0
 80143f2:	f001 fa93 	bl	801591c <_localeconv_r>
 80143f6:	6803      	ldr	r3, [r0, #0]
 80143f8:	0018      	movs	r0, r3
 80143fa:	930c      	str	r3, [sp, #48]	; 0x30
 80143fc:	f7eb fe8a 	bl	8000114 <strlen>
 8014400:	2300      	movs	r3, #0
 8014402:	9312      	str	r3, [sp, #72]	; 0x48
 8014404:	7e23      	ldrb	r3, [r4, #24]
 8014406:	2207      	movs	r2, #7
 8014408:	930a      	str	r3, [sp, #40]	; 0x28
 801440a:	6823      	ldr	r3, [r4, #0]
 801440c:	900e      	str	r0, [sp, #56]	; 0x38
 801440e:	930d      	str	r3, [sp, #52]	; 0x34
 8014410:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014412:	682b      	ldr	r3, [r5, #0]
 8014414:	05c9      	lsls	r1, r1, #23
 8014416:	d547      	bpl.n	80144a8 <_printf_float+0xc4>
 8014418:	189b      	adds	r3, r3, r2
 801441a:	4393      	bics	r3, r2
 801441c:	001a      	movs	r2, r3
 801441e:	3208      	adds	r2, #8
 8014420:	602a      	str	r2, [r5, #0]
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	64a2      	str	r2, [r4, #72]	; 0x48
 8014428:	64e3      	str	r3, [r4, #76]	; 0x4c
 801442a:	2201      	movs	r2, #1
 801442c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801442e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8014430:	930b      	str	r3, [sp, #44]	; 0x2c
 8014432:	006b      	lsls	r3, r5, #1
 8014434:	085b      	lsrs	r3, r3, #1
 8014436:	930f      	str	r3, [sp, #60]	; 0x3c
 8014438:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801443a:	4ba7      	ldr	r3, [pc, #668]	; (80146d8 <_printf_float+0x2f4>)
 801443c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801443e:	4252      	negs	r2, r2
 8014440:	f7ee fc8c 	bl	8002d5c <__aeabi_dcmpun>
 8014444:	2800      	cmp	r0, #0
 8014446:	d131      	bne.n	80144ac <_printf_float+0xc8>
 8014448:	2201      	movs	r2, #1
 801444a:	4ba3      	ldr	r3, [pc, #652]	; (80146d8 <_printf_float+0x2f4>)
 801444c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801444e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014450:	4252      	negs	r2, r2
 8014452:	f7ec f811 	bl	8000478 <__aeabi_dcmple>
 8014456:	2800      	cmp	r0, #0
 8014458:	d128      	bne.n	80144ac <_printf_float+0xc8>
 801445a:	2200      	movs	r2, #0
 801445c:	2300      	movs	r3, #0
 801445e:	0029      	movs	r1, r5
 8014460:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014462:	f7eb ffff 	bl	8000464 <__aeabi_dcmplt>
 8014466:	2800      	cmp	r0, #0
 8014468:	d003      	beq.n	8014472 <_printf_float+0x8e>
 801446a:	0023      	movs	r3, r4
 801446c:	222d      	movs	r2, #45	; 0x2d
 801446e:	3343      	adds	r3, #67	; 0x43
 8014470:	701a      	strb	r2, [r3, #0]
 8014472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014474:	4d99      	ldr	r5, [pc, #612]	; (80146dc <_printf_float+0x2f8>)
 8014476:	2b47      	cmp	r3, #71	; 0x47
 8014478:	d900      	bls.n	801447c <_printf_float+0x98>
 801447a:	4d99      	ldr	r5, [pc, #612]	; (80146e0 <_printf_float+0x2fc>)
 801447c:	2303      	movs	r3, #3
 801447e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014480:	6123      	str	r3, [r4, #16]
 8014482:	3301      	adds	r3, #1
 8014484:	439a      	bics	r2, r3
 8014486:	2300      	movs	r3, #0
 8014488:	6022      	str	r2, [r4, #0]
 801448a:	930b      	str	r3, [sp, #44]	; 0x2c
 801448c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801448e:	0021      	movs	r1, r4
 8014490:	0038      	movs	r0, r7
 8014492:	9600      	str	r6, [sp, #0]
 8014494:	aa13      	add	r2, sp, #76	; 0x4c
 8014496:	f000 f9e7 	bl	8014868 <_printf_common>
 801449a:	1c43      	adds	r3, r0, #1
 801449c:	d000      	beq.n	80144a0 <_printf_float+0xbc>
 801449e:	e0a2      	b.n	80145e6 <_printf_float+0x202>
 80144a0:	2001      	movs	r0, #1
 80144a2:	4240      	negs	r0, r0
 80144a4:	b015      	add	sp, #84	; 0x54
 80144a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a8:	3307      	adds	r3, #7
 80144aa:	e7b6      	b.n	801441a <_printf_float+0x36>
 80144ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80144ae:	002b      	movs	r3, r5
 80144b0:	0010      	movs	r0, r2
 80144b2:	0029      	movs	r1, r5
 80144b4:	f7ee fc52 	bl	8002d5c <__aeabi_dcmpun>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d00b      	beq.n	80144d4 <_printf_float+0xf0>
 80144bc:	2d00      	cmp	r5, #0
 80144be:	da03      	bge.n	80144c8 <_printf_float+0xe4>
 80144c0:	0023      	movs	r3, r4
 80144c2:	222d      	movs	r2, #45	; 0x2d
 80144c4:	3343      	adds	r3, #67	; 0x43
 80144c6:	701a      	strb	r2, [r3, #0]
 80144c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ca:	4d86      	ldr	r5, [pc, #536]	; (80146e4 <_printf_float+0x300>)
 80144cc:	2b47      	cmp	r3, #71	; 0x47
 80144ce:	d9d5      	bls.n	801447c <_printf_float+0x98>
 80144d0:	4d85      	ldr	r5, [pc, #532]	; (80146e8 <_printf_float+0x304>)
 80144d2:	e7d3      	b.n	801447c <_printf_float+0x98>
 80144d4:	2220      	movs	r2, #32
 80144d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80144d8:	6863      	ldr	r3, [r4, #4]
 80144da:	4391      	bics	r1, r2
 80144dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80144de:	1c5a      	adds	r2, r3, #1
 80144e0:	d149      	bne.n	8014576 <_printf_float+0x192>
 80144e2:	3307      	adds	r3, #7
 80144e4:	6063      	str	r3, [r4, #4]
 80144e6:	2380      	movs	r3, #128	; 0x80
 80144e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144ea:	00db      	lsls	r3, r3, #3
 80144ec:	4313      	orrs	r3, r2
 80144ee:	2200      	movs	r2, #0
 80144f0:	9206      	str	r2, [sp, #24]
 80144f2:	aa12      	add	r2, sp, #72	; 0x48
 80144f4:	9205      	str	r2, [sp, #20]
 80144f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144f8:	a908      	add	r1, sp, #32
 80144fa:	9204      	str	r2, [sp, #16]
 80144fc:	aa11      	add	r2, sp, #68	; 0x44
 80144fe:	9203      	str	r2, [sp, #12]
 8014500:	2223      	movs	r2, #35	; 0x23
 8014502:	6023      	str	r3, [r4, #0]
 8014504:	9301      	str	r3, [sp, #4]
 8014506:	6863      	ldr	r3, [r4, #4]
 8014508:	1852      	adds	r2, r2, r1
 801450a:	9202      	str	r2, [sp, #8]
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	0038      	movs	r0, r7
 8014510:	002b      	movs	r3, r5
 8014512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014514:	f7ff febc 	bl	8014290 <__cvt>
 8014518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801451a:	0005      	movs	r5, r0
 801451c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801451e:	2b47      	cmp	r3, #71	; 0x47
 8014520:	d108      	bne.n	8014534 <_printf_float+0x150>
 8014522:	1ccb      	adds	r3, r1, #3
 8014524:	db02      	blt.n	801452c <_printf_float+0x148>
 8014526:	6863      	ldr	r3, [r4, #4]
 8014528:	4299      	cmp	r1, r3
 801452a:	dd48      	ble.n	80145be <_printf_float+0x1da>
 801452c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801452e:	3b02      	subs	r3, #2
 8014530:	b2db      	uxtb	r3, r3
 8014532:	930a      	str	r3, [sp, #40]	; 0x28
 8014534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014536:	2b65      	cmp	r3, #101	; 0x65
 8014538:	d824      	bhi.n	8014584 <_printf_float+0x1a0>
 801453a:	0020      	movs	r0, r4
 801453c:	001a      	movs	r2, r3
 801453e:	3901      	subs	r1, #1
 8014540:	3050      	adds	r0, #80	; 0x50
 8014542:	9111      	str	r1, [sp, #68]	; 0x44
 8014544:	f7ff ff07 	bl	8014356 <__exponent>
 8014548:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801454a:	900b      	str	r0, [sp, #44]	; 0x2c
 801454c:	1813      	adds	r3, r2, r0
 801454e:	6123      	str	r3, [r4, #16]
 8014550:	2a01      	cmp	r2, #1
 8014552:	dc02      	bgt.n	801455a <_printf_float+0x176>
 8014554:	6822      	ldr	r2, [r4, #0]
 8014556:	07d2      	lsls	r2, r2, #31
 8014558:	d501      	bpl.n	801455e <_printf_float+0x17a>
 801455a:	3301      	adds	r3, #1
 801455c:	6123      	str	r3, [r4, #16]
 801455e:	2323      	movs	r3, #35	; 0x23
 8014560:	aa08      	add	r2, sp, #32
 8014562:	189b      	adds	r3, r3, r2
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d100      	bne.n	801456c <_printf_float+0x188>
 801456a:	e78f      	b.n	801448c <_printf_float+0xa8>
 801456c:	0023      	movs	r3, r4
 801456e:	222d      	movs	r2, #45	; 0x2d
 8014570:	3343      	adds	r3, #67	; 0x43
 8014572:	701a      	strb	r2, [r3, #0]
 8014574:	e78a      	b.n	801448c <_printf_float+0xa8>
 8014576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014578:	2a47      	cmp	r2, #71	; 0x47
 801457a:	d1b4      	bne.n	80144e6 <_printf_float+0x102>
 801457c:	2b00      	cmp	r3, #0
 801457e:	d1b2      	bne.n	80144e6 <_printf_float+0x102>
 8014580:	3301      	adds	r3, #1
 8014582:	e7af      	b.n	80144e4 <_printf_float+0x100>
 8014584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014586:	2b66      	cmp	r3, #102	; 0x66
 8014588:	d11b      	bne.n	80145c2 <_printf_float+0x1de>
 801458a:	6863      	ldr	r3, [r4, #4]
 801458c:	2900      	cmp	r1, #0
 801458e:	dd0d      	ble.n	80145ac <_printf_float+0x1c8>
 8014590:	6121      	str	r1, [r4, #16]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d102      	bne.n	801459c <_printf_float+0x1b8>
 8014596:	6822      	ldr	r2, [r4, #0]
 8014598:	07d2      	lsls	r2, r2, #31
 801459a:	d502      	bpl.n	80145a2 <_printf_float+0x1be>
 801459c:	3301      	adds	r3, #1
 801459e:	1859      	adds	r1, r3, r1
 80145a0:	6121      	str	r1, [r4, #16]
 80145a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80145a6:	2300      	movs	r3, #0
 80145a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80145aa:	e7d8      	b.n	801455e <_printf_float+0x17a>
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d103      	bne.n	80145b8 <_printf_float+0x1d4>
 80145b0:	2201      	movs	r2, #1
 80145b2:	6821      	ldr	r1, [r4, #0]
 80145b4:	4211      	tst	r1, r2
 80145b6:	d000      	beq.n	80145ba <_printf_float+0x1d6>
 80145b8:	1c9a      	adds	r2, r3, #2
 80145ba:	6122      	str	r2, [r4, #16]
 80145bc:	e7f1      	b.n	80145a2 <_printf_float+0x1be>
 80145be:	2367      	movs	r3, #103	; 0x67
 80145c0:	930a      	str	r3, [sp, #40]	; 0x28
 80145c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145c6:	4293      	cmp	r3, r2
 80145c8:	db06      	blt.n	80145d8 <_printf_float+0x1f4>
 80145ca:	6822      	ldr	r2, [r4, #0]
 80145cc:	6123      	str	r3, [r4, #16]
 80145ce:	07d2      	lsls	r2, r2, #31
 80145d0:	d5e7      	bpl.n	80145a2 <_printf_float+0x1be>
 80145d2:	3301      	adds	r3, #1
 80145d4:	6123      	str	r3, [r4, #16]
 80145d6:	e7e4      	b.n	80145a2 <_printf_float+0x1be>
 80145d8:	2101      	movs	r1, #1
 80145da:	2b00      	cmp	r3, #0
 80145dc:	dc01      	bgt.n	80145e2 <_printf_float+0x1fe>
 80145de:	1849      	adds	r1, r1, r1
 80145e0:	1ac9      	subs	r1, r1, r3
 80145e2:	1852      	adds	r2, r2, r1
 80145e4:	e7e9      	b.n	80145ba <_printf_float+0x1d6>
 80145e6:	6822      	ldr	r2, [r4, #0]
 80145e8:	0553      	lsls	r3, r2, #21
 80145ea:	d407      	bmi.n	80145fc <_printf_float+0x218>
 80145ec:	6923      	ldr	r3, [r4, #16]
 80145ee:	002a      	movs	r2, r5
 80145f0:	0038      	movs	r0, r7
 80145f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145f4:	47b0      	blx	r6
 80145f6:	1c43      	adds	r3, r0, #1
 80145f8:	d128      	bne.n	801464c <_printf_float+0x268>
 80145fa:	e751      	b.n	80144a0 <_printf_float+0xbc>
 80145fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145fe:	2b65      	cmp	r3, #101	; 0x65
 8014600:	d800      	bhi.n	8014604 <_printf_float+0x220>
 8014602:	e0e1      	b.n	80147c8 <_printf_float+0x3e4>
 8014604:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014606:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014608:	2200      	movs	r2, #0
 801460a:	2300      	movs	r3, #0
 801460c:	f7eb ff24 	bl	8000458 <__aeabi_dcmpeq>
 8014610:	2800      	cmp	r0, #0
 8014612:	d031      	beq.n	8014678 <_printf_float+0x294>
 8014614:	2301      	movs	r3, #1
 8014616:	0038      	movs	r0, r7
 8014618:	4a34      	ldr	r2, [pc, #208]	; (80146ec <_printf_float+0x308>)
 801461a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801461c:	47b0      	blx	r6
 801461e:	1c43      	adds	r3, r0, #1
 8014620:	d100      	bne.n	8014624 <_printf_float+0x240>
 8014622:	e73d      	b.n	80144a0 <_printf_float+0xbc>
 8014624:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014626:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014628:	4293      	cmp	r3, r2
 801462a:	db02      	blt.n	8014632 <_printf_float+0x24e>
 801462c:	6823      	ldr	r3, [r4, #0]
 801462e:	07db      	lsls	r3, r3, #31
 8014630:	d50c      	bpl.n	801464c <_printf_float+0x268>
 8014632:	0038      	movs	r0, r7
 8014634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014638:	9909      	ldr	r1, [sp, #36]	; 0x24
 801463a:	47b0      	blx	r6
 801463c:	2500      	movs	r5, #0
 801463e:	1c43      	adds	r3, r0, #1
 8014640:	d100      	bne.n	8014644 <_printf_float+0x260>
 8014642:	e72d      	b.n	80144a0 <_printf_float+0xbc>
 8014644:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014646:	3b01      	subs	r3, #1
 8014648:	42ab      	cmp	r3, r5
 801464a:	dc0a      	bgt.n	8014662 <_printf_float+0x27e>
 801464c:	6823      	ldr	r3, [r4, #0]
 801464e:	079b      	lsls	r3, r3, #30
 8014650:	d500      	bpl.n	8014654 <_printf_float+0x270>
 8014652:	e106      	b.n	8014862 <_printf_float+0x47e>
 8014654:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014656:	68e0      	ldr	r0, [r4, #12]
 8014658:	4298      	cmp	r0, r3
 801465a:	db00      	blt.n	801465e <_printf_float+0x27a>
 801465c:	e722      	b.n	80144a4 <_printf_float+0xc0>
 801465e:	0018      	movs	r0, r3
 8014660:	e720      	b.n	80144a4 <_printf_float+0xc0>
 8014662:	0022      	movs	r2, r4
 8014664:	2301      	movs	r3, #1
 8014666:	0038      	movs	r0, r7
 8014668:	9909      	ldr	r1, [sp, #36]	; 0x24
 801466a:	321a      	adds	r2, #26
 801466c:	47b0      	blx	r6
 801466e:	1c43      	adds	r3, r0, #1
 8014670:	d100      	bne.n	8014674 <_printf_float+0x290>
 8014672:	e715      	b.n	80144a0 <_printf_float+0xbc>
 8014674:	3501      	adds	r5, #1
 8014676:	e7e5      	b.n	8014644 <_printf_float+0x260>
 8014678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801467a:	2b00      	cmp	r3, #0
 801467c:	dc38      	bgt.n	80146f0 <_printf_float+0x30c>
 801467e:	2301      	movs	r3, #1
 8014680:	0038      	movs	r0, r7
 8014682:	4a1a      	ldr	r2, [pc, #104]	; (80146ec <_printf_float+0x308>)
 8014684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014686:	47b0      	blx	r6
 8014688:	1c43      	adds	r3, r0, #1
 801468a:	d100      	bne.n	801468e <_printf_float+0x2aa>
 801468c:	e708      	b.n	80144a0 <_printf_float+0xbc>
 801468e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014690:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014692:	4313      	orrs	r3, r2
 8014694:	d102      	bne.n	801469c <_printf_float+0x2b8>
 8014696:	6823      	ldr	r3, [r4, #0]
 8014698:	07db      	lsls	r3, r3, #31
 801469a:	d5d7      	bpl.n	801464c <_printf_float+0x268>
 801469c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801469e:	0038      	movs	r0, r7
 80146a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146a4:	47b0      	blx	r6
 80146a6:	1c43      	adds	r3, r0, #1
 80146a8:	d100      	bne.n	80146ac <_printf_float+0x2c8>
 80146aa:	e6f9      	b.n	80144a0 <_printf_float+0xbc>
 80146ac:	2300      	movs	r3, #0
 80146ae:	930a      	str	r3, [sp, #40]	; 0x28
 80146b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146b4:	425b      	negs	r3, r3
 80146b6:	4293      	cmp	r3, r2
 80146b8:	dc01      	bgt.n	80146be <_printf_float+0x2da>
 80146ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80146bc:	e797      	b.n	80145ee <_printf_float+0x20a>
 80146be:	0022      	movs	r2, r4
 80146c0:	2301      	movs	r3, #1
 80146c2:	0038      	movs	r0, r7
 80146c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146c6:	321a      	adds	r2, #26
 80146c8:	47b0      	blx	r6
 80146ca:	1c43      	adds	r3, r0, #1
 80146cc:	d100      	bne.n	80146d0 <_printf_float+0x2ec>
 80146ce:	e6e7      	b.n	80144a0 <_printf_float+0xbc>
 80146d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146d2:	3301      	adds	r3, #1
 80146d4:	e7eb      	b.n	80146ae <_printf_float+0x2ca>
 80146d6:	46c0      	nop			; (mov r8, r8)
 80146d8:	7fefffff 	.word	0x7fefffff
 80146dc:	0801848c 	.word	0x0801848c
 80146e0:	08018490 	.word	0x08018490
 80146e4:	08018494 	.word	0x08018494
 80146e8:	08018498 	.word	0x08018498
 80146ec:	0801849c 	.word	0x0801849c
 80146f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80146f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80146f4:	920a      	str	r2, [sp, #40]	; 0x28
 80146f6:	429a      	cmp	r2, r3
 80146f8:	dd00      	ble.n	80146fc <_printf_float+0x318>
 80146fa:	930a      	str	r3, [sp, #40]	; 0x28
 80146fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146fe:	2b00      	cmp	r3, #0
 8014700:	dc3c      	bgt.n	801477c <_printf_float+0x398>
 8014702:	2300      	movs	r3, #0
 8014704:	930d      	str	r3, [sp, #52]	; 0x34
 8014706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014708:	43db      	mvns	r3, r3
 801470a:	17db      	asrs	r3, r3, #31
 801470c:	930f      	str	r3, [sp, #60]	; 0x3c
 801470e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014712:	930b      	str	r3, [sp, #44]	; 0x2c
 8014714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014716:	4013      	ands	r3, r2
 8014718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801471e:	4293      	cmp	r3, r2
 8014720:	dc34      	bgt.n	801478c <_printf_float+0x3a8>
 8014722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014726:	4293      	cmp	r3, r2
 8014728:	db3d      	blt.n	80147a6 <_printf_float+0x3c2>
 801472a:	6823      	ldr	r3, [r4, #0]
 801472c:	07db      	lsls	r3, r3, #31
 801472e:	d43a      	bmi.n	80147a6 <_printf_float+0x3c2>
 8014730:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014734:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014736:	1ad3      	subs	r3, r2, r3
 8014738:	1a52      	subs	r2, r2, r1
 801473a:	920a      	str	r2, [sp, #40]	; 0x28
 801473c:	429a      	cmp	r2, r3
 801473e:	dd00      	ble.n	8014742 <_printf_float+0x35e>
 8014740:	930a      	str	r3, [sp, #40]	; 0x28
 8014742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014744:	2b00      	cmp	r3, #0
 8014746:	dc36      	bgt.n	80147b6 <_printf_float+0x3d2>
 8014748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801474a:	2500      	movs	r5, #0
 801474c:	43db      	mvns	r3, r3
 801474e:	17db      	asrs	r3, r3, #31
 8014750:	930b      	str	r3, [sp, #44]	; 0x2c
 8014752:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014758:	1a9b      	subs	r3, r3, r2
 801475a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801475c:	400a      	ands	r2, r1
 801475e:	1a9b      	subs	r3, r3, r2
 8014760:	42ab      	cmp	r3, r5
 8014762:	dc00      	bgt.n	8014766 <_printf_float+0x382>
 8014764:	e772      	b.n	801464c <_printf_float+0x268>
 8014766:	0022      	movs	r2, r4
 8014768:	2301      	movs	r3, #1
 801476a:	0038      	movs	r0, r7
 801476c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801476e:	321a      	adds	r2, #26
 8014770:	47b0      	blx	r6
 8014772:	1c43      	adds	r3, r0, #1
 8014774:	d100      	bne.n	8014778 <_printf_float+0x394>
 8014776:	e693      	b.n	80144a0 <_printf_float+0xbc>
 8014778:	3501      	adds	r5, #1
 801477a:	e7ea      	b.n	8014752 <_printf_float+0x36e>
 801477c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801477e:	002a      	movs	r2, r5
 8014780:	0038      	movs	r0, r7
 8014782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014784:	47b0      	blx	r6
 8014786:	1c43      	adds	r3, r0, #1
 8014788:	d1bb      	bne.n	8014702 <_printf_float+0x31e>
 801478a:	e689      	b.n	80144a0 <_printf_float+0xbc>
 801478c:	0022      	movs	r2, r4
 801478e:	2301      	movs	r3, #1
 8014790:	0038      	movs	r0, r7
 8014792:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014794:	321a      	adds	r2, #26
 8014796:	47b0      	blx	r6
 8014798:	1c43      	adds	r3, r0, #1
 801479a:	d100      	bne.n	801479e <_printf_float+0x3ba>
 801479c:	e680      	b.n	80144a0 <_printf_float+0xbc>
 801479e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147a0:	3301      	adds	r3, #1
 80147a2:	930d      	str	r3, [sp, #52]	; 0x34
 80147a4:	e7b3      	b.n	801470e <_printf_float+0x32a>
 80147a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147a8:	0038      	movs	r0, r7
 80147aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147ae:	47b0      	blx	r6
 80147b0:	1c43      	adds	r3, r0, #1
 80147b2:	d1bd      	bne.n	8014730 <_printf_float+0x34c>
 80147b4:	e674      	b.n	80144a0 <_printf_float+0xbc>
 80147b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147b8:	0038      	movs	r0, r7
 80147ba:	18ea      	adds	r2, r5, r3
 80147bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147c0:	47b0      	blx	r6
 80147c2:	1c43      	adds	r3, r0, #1
 80147c4:	d1c0      	bne.n	8014748 <_printf_float+0x364>
 80147c6:	e66b      	b.n	80144a0 <_printf_float+0xbc>
 80147c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	dc02      	bgt.n	80147d4 <_printf_float+0x3f0>
 80147ce:	2301      	movs	r3, #1
 80147d0:	421a      	tst	r2, r3
 80147d2:	d034      	beq.n	801483e <_printf_float+0x45a>
 80147d4:	2301      	movs	r3, #1
 80147d6:	002a      	movs	r2, r5
 80147d8:	0038      	movs	r0, r7
 80147da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147dc:	47b0      	blx	r6
 80147de:	1c43      	adds	r3, r0, #1
 80147e0:	d100      	bne.n	80147e4 <_printf_float+0x400>
 80147e2:	e65d      	b.n	80144a0 <_printf_float+0xbc>
 80147e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147e6:	0038      	movs	r0, r7
 80147e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147ec:	47b0      	blx	r6
 80147ee:	1c43      	adds	r3, r0, #1
 80147f0:	d100      	bne.n	80147f4 <_printf_float+0x410>
 80147f2:	e655      	b.n	80144a0 <_printf_float+0xbc>
 80147f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80147f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80147f8:	2200      	movs	r2, #0
 80147fa:	2300      	movs	r3, #0
 80147fc:	f7eb fe2c 	bl	8000458 <__aeabi_dcmpeq>
 8014800:	2800      	cmp	r0, #0
 8014802:	d11a      	bne.n	801483a <_printf_float+0x456>
 8014804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014806:	1c6a      	adds	r2, r5, #1
 8014808:	3b01      	subs	r3, #1
 801480a:	0038      	movs	r0, r7
 801480c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801480e:	47b0      	blx	r6
 8014810:	1c43      	adds	r3, r0, #1
 8014812:	d10e      	bne.n	8014832 <_printf_float+0x44e>
 8014814:	e644      	b.n	80144a0 <_printf_float+0xbc>
 8014816:	0022      	movs	r2, r4
 8014818:	2301      	movs	r3, #1
 801481a:	0038      	movs	r0, r7
 801481c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801481e:	321a      	adds	r2, #26
 8014820:	47b0      	blx	r6
 8014822:	1c43      	adds	r3, r0, #1
 8014824:	d100      	bne.n	8014828 <_printf_float+0x444>
 8014826:	e63b      	b.n	80144a0 <_printf_float+0xbc>
 8014828:	3501      	adds	r5, #1
 801482a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801482c:	3b01      	subs	r3, #1
 801482e:	42ab      	cmp	r3, r5
 8014830:	dcf1      	bgt.n	8014816 <_printf_float+0x432>
 8014832:	0022      	movs	r2, r4
 8014834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014836:	3250      	adds	r2, #80	; 0x50
 8014838:	e6da      	b.n	80145f0 <_printf_float+0x20c>
 801483a:	2500      	movs	r5, #0
 801483c:	e7f5      	b.n	801482a <_printf_float+0x446>
 801483e:	002a      	movs	r2, r5
 8014840:	e7e3      	b.n	801480a <_printf_float+0x426>
 8014842:	0022      	movs	r2, r4
 8014844:	2301      	movs	r3, #1
 8014846:	0038      	movs	r0, r7
 8014848:	9909      	ldr	r1, [sp, #36]	; 0x24
 801484a:	3219      	adds	r2, #25
 801484c:	47b0      	blx	r6
 801484e:	1c43      	adds	r3, r0, #1
 8014850:	d100      	bne.n	8014854 <_printf_float+0x470>
 8014852:	e625      	b.n	80144a0 <_printf_float+0xbc>
 8014854:	3501      	adds	r5, #1
 8014856:	68e3      	ldr	r3, [r4, #12]
 8014858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801485a:	1a9b      	subs	r3, r3, r2
 801485c:	42ab      	cmp	r3, r5
 801485e:	dcf0      	bgt.n	8014842 <_printf_float+0x45e>
 8014860:	e6f8      	b.n	8014654 <_printf_float+0x270>
 8014862:	2500      	movs	r5, #0
 8014864:	e7f7      	b.n	8014856 <_printf_float+0x472>
 8014866:	46c0      	nop			; (mov r8, r8)

08014868 <_printf_common>:
 8014868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801486a:	0015      	movs	r5, r2
 801486c:	9301      	str	r3, [sp, #4]
 801486e:	688a      	ldr	r2, [r1, #8]
 8014870:	690b      	ldr	r3, [r1, #16]
 8014872:	000c      	movs	r4, r1
 8014874:	9000      	str	r0, [sp, #0]
 8014876:	4293      	cmp	r3, r2
 8014878:	da00      	bge.n	801487c <_printf_common+0x14>
 801487a:	0013      	movs	r3, r2
 801487c:	0022      	movs	r2, r4
 801487e:	602b      	str	r3, [r5, #0]
 8014880:	3243      	adds	r2, #67	; 0x43
 8014882:	7812      	ldrb	r2, [r2, #0]
 8014884:	2a00      	cmp	r2, #0
 8014886:	d001      	beq.n	801488c <_printf_common+0x24>
 8014888:	3301      	adds	r3, #1
 801488a:	602b      	str	r3, [r5, #0]
 801488c:	6823      	ldr	r3, [r4, #0]
 801488e:	069b      	lsls	r3, r3, #26
 8014890:	d502      	bpl.n	8014898 <_printf_common+0x30>
 8014892:	682b      	ldr	r3, [r5, #0]
 8014894:	3302      	adds	r3, #2
 8014896:	602b      	str	r3, [r5, #0]
 8014898:	6822      	ldr	r2, [r4, #0]
 801489a:	2306      	movs	r3, #6
 801489c:	0017      	movs	r7, r2
 801489e:	401f      	ands	r7, r3
 80148a0:	421a      	tst	r2, r3
 80148a2:	d027      	beq.n	80148f4 <_printf_common+0x8c>
 80148a4:	0023      	movs	r3, r4
 80148a6:	3343      	adds	r3, #67	; 0x43
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	1e5a      	subs	r2, r3, #1
 80148ac:	4193      	sbcs	r3, r2
 80148ae:	6822      	ldr	r2, [r4, #0]
 80148b0:	0692      	lsls	r2, r2, #26
 80148b2:	d430      	bmi.n	8014916 <_printf_common+0xae>
 80148b4:	0022      	movs	r2, r4
 80148b6:	9901      	ldr	r1, [sp, #4]
 80148b8:	9800      	ldr	r0, [sp, #0]
 80148ba:	9e08      	ldr	r6, [sp, #32]
 80148bc:	3243      	adds	r2, #67	; 0x43
 80148be:	47b0      	blx	r6
 80148c0:	1c43      	adds	r3, r0, #1
 80148c2:	d025      	beq.n	8014910 <_printf_common+0xa8>
 80148c4:	2306      	movs	r3, #6
 80148c6:	6820      	ldr	r0, [r4, #0]
 80148c8:	682a      	ldr	r2, [r5, #0]
 80148ca:	68e1      	ldr	r1, [r4, #12]
 80148cc:	2500      	movs	r5, #0
 80148ce:	4003      	ands	r3, r0
 80148d0:	2b04      	cmp	r3, #4
 80148d2:	d103      	bne.n	80148dc <_printf_common+0x74>
 80148d4:	1a8d      	subs	r5, r1, r2
 80148d6:	43eb      	mvns	r3, r5
 80148d8:	17db      	asrs	r3, r3, #31
 80148da:	401d      	ands	r5, r3
 80148dc:	68a3      	ldr	r3, [r4, #8]
 80148de:	6922      	ldr	r2, [r4, #16]
 80148e0:	4293      	cmp	r3, r2
 80148e2:	dd01      	ble.n	80148e8 <_printf_common+0x80>
 80148e4:	1a9b      	subs	r3, r3, r2
 80148e6:	18ed      	adds	r5, r5, r3
 80148e8:	2700      	movs	r7, #0
 80148ea:	42bd      	cmp	r5, r7
 80148ec:	d120      	bne.n	8014930 <_printf_common+0xc8>
 80148ee:	2000      	movs	r0, #0
 80148f0:	e010      	b.n	8014914 <_printf_common+0xac>
 80148f2:	3701      	adds	r7, #1
 80148f4:	68e3      	ldr	r3, [r4, #12]
 80148f6:	682a      	ldr	r2, [r5, #0]
 80148f8:	1a9b      	subs	r3, r3, r2
 80148fa:	42bb      	cmp	r3, r7
 80148fc:	ddd2      	ble.n	80148a4 <_printf_common+0x3c>
 80148fe:	0022      	movs	r2, r4
 8014900:	2301      	movs	r3, #1
 8014902:	9901      	ldr	r1, [sp, #4]
 8014904:	9800      	ldr	r0, [sp, #0]
 8014906:	9e08      	ldr	r6, [sp, #32]
 8014908:	3219      	adds	r2, #25
 801490a:	47b0      	blx	r6
 801490c:	1c43      	adds	r3, r0, #1
 801490e:	d1f0      	bne.n	80148f2 <_printf_common+0x8a>
 8014910:	2001      	movs	r0, #1
 8014912:	4240      	negs	r0, r0
 8014914:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014916:	2030      	movs	r0, #48	; 0x30
 8014918:	18e1      	adds	r1, r4, r3
 801491a:	3143      	adds	r1, #67	; 0x43
 801491c:	7008      	strb	r0, [r1, #0]
 801491e:	0021      	movs	r1, r4
 8014920:	1c5a      	adds	r2, r3, #1
 8014922:	3145      	adds	r1, #69	; 0x45
 8014924:	7809      	ldrb	r1, [r1, #0]
 8014926:	18a2      	adds	r2, r4, r2
 8014928:	3243      	adds	r2, #67	; 0x43
 801492a:	3302      	adds	r3, #2
 801492c:	7011      	strb	r1, [r2, #0]
 801492e:	e7c1      	b.n	80148b4 <_printf_common+0x4c>
 8014930:	0022      	movs	r2, r4
 8014932:	2301      	movs	r3, #1
 8014934:	9901      	ldr	r1, [sp, #4]
 8014936:	9800      	ldr	r0, [sp, #0]
 8014938:	9e08      	ldr	r6, [sp, #32]
 801493a:	321a      	adds	r2, #26
 801493c:	47b0      	blx	r6
 801493e:	1c43      	adds	r3, r0, #1
 8014940:	d0e6      	beq.n	8014910 <_printf_common+0xa8>
 8014942:	3701      	adds	r7, #1
 8014944:	e7d1      	b.n	80148ea <_printf_common+0x82>
	...

08014948 <_printf_i>:
 8014948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801494a:	b08b      	sub	sp, #44	; 0x2c
 801494c:	9206      	str	r2, [sp, #24]
 801494e:	000a      	movs	r2, r1
 8014950:	3243      	adds	r2, #67	; 0x43
 8014952:	9307      	str	r3, [sp, #28]
 8014954:	9005      	str	r0, [sp, #20]
 8014956:	9204      	str	r2, [sp, #16]
 8014958:	7e0a      	ldrb	r2, [r1, #24]
 801495a:	000c      	movs	r4, r1
 801495c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801495e:	2a78      	cmp	r2, #120	; 0x78
 8014960:	d807      	bhi.n	8014972 <_printf_i+0x2a>
 8014962:	2a62      	cmp	r2, #98	; 0x62
 8014964:	d809      	bhi.n	801497a <_printf_i+0x32>
 8014966:	2a00      	cmp	r2, #0
 8014968:	d100      	bne.n	801496c <_printf_i+0x24>
 801496a:	e0c1      	b.n	8014af0 <_printf_i+0x1a8>
 801496c:	2a58      	cmp	r2, #88	; 0x58
 801496e:	d100      	bne.n	8014972 <_printf_i+0x2a>
 8014970:	e08c      	b.n	8014a8c <_printf_i+0x144>
 8014972:	0026      	movs	r6, r4
 8014974:	3642      	adds	r6, #66	; 0x42
 8014976:	7032      	strb	r2, [r6, #0]
 8014978:	e022      	b.n	80149c0 <_printf_i+0x78>
 801497a:	0010      	movs	r0, r2
 801497c:	3863      	subs	r0, #99	; 0x63
 801497e:	2815      	cmp	r0, #21
 8014980:	d8f7      	bhi.n	8014972 <_printf_i+0x2a>
 8014982:	f7eb fbd9 	bl	8000138 <__gnu_thumb1_case_shi>
 8014986:	0016      	.short	0x0016
 8014988:	fff6001f 	.word	0xfff6001f
 801498c:	fff6fff6 	.word	0xfff6fff6
 8014990:	001ffff6 	.word	0x001ffff6
 8014994:	fff6fff6 	.word	0xfff6fff6
 8014998:	fff6fff6 	.word	0xfff6fff6
 801499c:	003600a8 	.word	0x003600a8
 80149a0:	fff6009a 	.word	0xfff6009a
 80149a4:	00b9fff6 	.word	0x00b9fff6
 80149a8:	0036fff6 	.word	0x0036fff6
 80149ac:	fff6fff6 	.word	0xfff6fff6
 80149b0:	009e      	.short	0x009e
 80149b2:	0026      	movs	r6, r4
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	3642      	adds	r6, #66	; 0x42
 80149b8:	1d11      	adds	r1, r2, #4
 80149ba:	6019      	str	r1, [r3, #0]
 80149bc:	6813      	ldr	r3, [r2, #0]
 80149be:	7033      	strb	r3, [r6, #0]
 80149c0:	2301      	movs	r3, #1
 80149c2:	e0a7      	b.n	8014b14 <_printf_i+0x1cc>
 80149c4:	6808      	ldr	r0, [r1, #0]
 80149c6:	6819      	ldr	r1, [r3, #0]
 80149c8:	1d0a      	adds	r2, r1, #4
 80149ca:	0605      	lsls	r5, r0, #24
 80149cc:	d50b      	bpl.n	80149e6 <_printf_i+0x9e>
 80149ce:	680d      	ldr	r5, [r1, #0]
 80149d0:	601a      	str	r2, [r3, #0]
 80149d2:	2d00      	cmp	r5, #0
 80149d4:	da03      	bge.n	80149de <_printf_i+0x96>
 80149d6:	232d      	movs	r3, #45	; 0x2d
 80149d8:	9a04      	ldr	r2, [sp, #16]
 80149da:	426d      	negs	r5, r5
 80149dc:	7013      	strb	r3, [r2, #0]
 80149de:	4b61      	ldr	r3, [pc, #388]	; (8014b64 <_printf_i+0x21c>)
 80149e0:	270a      	movs	r7, #10
 80149e2:	9303      	str	r3, [sp, #12]
 80149e4:	e01b      	b.n	8014a1e <_printf_i+0xd6>
 80149e6:	680d      	ldr	r5, [r1, #0]
 80149e8:	601a      	str	r2, [r3, #0]
 80149ea:	0641      	lsls	r1, r0, #25
 80149ec:	d5f1      	bpl.n	80149d2 <_printf_i+0x8a>
 80149ee:	b22d      	sxth	r5, r5
 80149f0:	e7ef      	b.n	80149d2 <_printf_i+0x8a>
 80149f2:	680d      	ldr	r5, [r1, #0]
 80149f4:	6819      	ldr	r1, [r3, #0]
 80149f6:	1d08      	adds	r0, r1, #4
 80149f8:	6018      	str	r0, [r3, #0]
 80149fa:	062e      	lsls	r6, r5, #24
 80149fc:	d501      	bpl.n	8014a02 <_printf_i+0xba>
 80149fe:	680d      	ldr	r5, [r1, #0]
 8014a00:	e003      	b.n	8014a0a <_printf_i+0xc2>
 8014a02:	066d      	lsls	r5, r5, #25
 8014a04:	d5fb      	bpl.n	80149fe <_printf_i+0xb6>
 8014a06:	680d      	ldr	r5, [r1, #0]
 8014a08:	b2ad      	uxth	r5, r5
 8014a0a:	4b56      	ldr	r3, [pc, #344]	; (8014b64 <_printf_i+0x21c>)
 8014a0c:	2708      	movs	r7, #8
 8014a0e:	9303      	str	r3, [sp, #12]
 8014a10:	2a6f      	cmp	r2, #111	; 0x6f
 8014a12:	d000      	beq.n	8014a16 <_printf_i+0xce>
 8014a14:	3702      	adds	r7, #2
 8014a16:	0023      	movs	r3, r4
 8014a18:	2200      	movs	r2, #0
 8014a1a:	3343      	adds	r3, #67	; 0x43
 8014a1c:	701a      	strb	r2, [r3, #0]
 8014a1e:	6863      	ldr	r3, [r4, #4]
 8014a20:	60a3      	str	r3, [r4, #8]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	db03      	blt.n	8014a2e <_printf_i+0xe6>
 8014a26:	2204      	movs	r2, #4
 8014a28:	6821      	ldr	r1, [r4, #0]
 8014a2a:	4391      	bics	r1, r2
 8014a2c:	6021      	str	r1, [r4, #0]
 8014a2e:	2d00      	cmp	r5, #0
 8014a30:	d102      	bne.n	8014a38 <_printf_i+0xf0>
 8014a32:	9e04      	ldr	r6, [sp, #16]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d00c      	beq.n	8014a52 <_printf_i+0x10a>
 8014a38:	9e04      	ldr	r6, [sp, #16]
 8014a3a:	0028      	movs	r0, r5
 8014a3c:	0039      	movs	r1, r7
 8014a3e:	f7eb fc0b 	bl	8000258 <__aeabi_uidivmod>
 8014a42:	9b03      	ldr	r3, [sp, #12]
 8014a44:	3e01      	subs	r6, #1
 8014a46:	5c5b      	ldrb	r3, [r3, r1]
 8014a48:	7033      	strb	r3, [r6, #0]
 8014a4a:	002b      	movs	r3, r5
 8014a4c:	0005      	movs	r5, r0
 8014a4e:	429f      	cmp	r7, r3
 8014a50:	d9f3      	bls.n	8014a3a <_printf_i+0xf2>
 8014a52:	2f08      	cmp	r7, #8
 8014a54:	d109      	bne.n	8014a6a <_printf_i+0x122>
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	07db      	lsls	r3, r3, #31
 8014a5a:	d506      	bpl.n	8014a6a <_printf_i+0x122>
 8014a5c:	6863      	ldr	r3, [r4, #4]
 8014a5e:	6922      	ldr	r2, [r4, #16]
 8014a60:	4293      	cmp	r3, r2
 8014a62:	dc02      	bgt.n	8014a6a <_printf_i+0x122>
 8014a64:	2330      	movs	r3, #48	; 0x30
 8014a66:	3e01      	subs	r6, #1
 8014a68:	7033      	strb	r3, [r6, #0]
 8014a6a:	9b04      	ldr	r3, [sp, #16]
 8014a6c:	1b9b      	subs	r3, r3, r6
 8014a6e:	6123      	str	r3, [r4, #16]
 8014a70:	9b07      	ldr	r3, [sp, #28]
 8014a72:	0021      	movs	r1, r4
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	9805      	ldr	r0, [sp, #20]
 8014a78:	9b06      	ldr	r3, [sp, #24]
 8014a7a:	aa09      	add	r2, sp, #36	; 0x24
 8014a7c:	f7ff fef4 	bl	8014868 <_printf_common>
 8014a80:	1c43      	adds	r3, r0, #1
 8014a82:	d14c      	bne.n	8014b1e <_printf_i+0x1d6>
 8014a84:	2001      	movs	r0, #1
 8014a86:	4240      	negs	r0, r0
 8014a88:	b00b      	add	sp, #44	; 0x2c
 8014a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a8c:	3145      	adds	r1, #69	; 0x45
 8014a8e:	700a      	strb	r2, [r1, #0]
 8014a90:	4a34      	ldr	r2, [pc, #208]	; (8014b64 <_printf_i+0x21c>)
 8014a92:	9203      	str	r2, [sp, #12]
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	6821      	ldr	r1, [r4, #0]
 8014a98:	ca20      	ldmia	r2!, {r5}
 8014a9a:	601a      	str	r2, [r3, #0]
 8014a9c:	0608      	lsls	r0, r1, #24
 8014a9e:	d516      	bpl.n	8014ace <_printf_i+0x186>
 8014aa0:	07cb      	lsls	r3, r1, #31
 8014aa2:	d502      	bpl.n	8014aaa <_printf_i+0x162>
 8014aa4:	2320      	movs	r3, #32
 8014aa6:	4319      	orrs	r1, r3
 8014aa8:	6021      	str	r1, [r4, #0]
 8014aaa:	2710      	movs	r7, #16
 8014aac:	2d00      	cmp	r5, #0
 8014aae:	d1b2      	bne.n	8014a16 <_printf_i+0xce>
 8014ab0:	2320      	movs	r3, #32
 8014ab2:	6822      	ldr	r2, [r4, #0]
 8014ab4:	439a      	bics	r2, r3
 8014ab6:	6022      	str	r2, [r4, #0]
 8014ab8:	e7ad      	b.n	8014a16 <_printf_i+0xce>
 8014aba:	2220      	movs	r2, #32
 8014abc:	6809      	ldr	r1, [r1, #0]
 8014abe:	430a      	orrs	r2, r1
 8014ac0:	6022      	str	r2, [r4, #0]
 8014ac2:	0022      	movs	r2, r4
 8014ac4:	2178      	movs	r1, #120	; 0x78
 8014ac6:	3245      	adds	r2, #69	; 0x45
 8014ac8:	7011      	strb	r1, [r2, #0]
 8014aca:	4a27      	ldr	r2, [pc, #156]	; (8014b68 <_printf_i+0x220>)
 8014acc:	e7e1      	b.n	8014a92 <_printf_i+0x14a>
 8014ace:	0648      	lsls	r0, r1, #25
 8014ad0:	d5e6      	bpl.n	8014aa0 <_printf_i+0x158>
 8014ad2:	b2ad      	uxth	r5, r5
 8014ad4:	e7e4      	b.n	8014aa0 <_printf_i+0x158>
 8014ad6:	681a      	ldr	r2, [r3, #0]
 8014ad8:	680d      	ldr	r5, [r1, #0]
 8014ada:	1d10      	adds	r0, r2, #4
 8014adc:	6949      	ldr	r1, [r1, #20]
 8014ade:	6018      	str	r0, [r3, #0]
 8014ae0:	6813      	ldr	r3, [r2, #0]
 8014ae2:	062e      	lsls	r6, r5, #24
 8014ae4:	d501      	bpl.n	8014aea <_printf_i+0x1a2>
 8014ae6:	6019      	str	r1, [r3, #0]
 8014ae8:	e002      	b.n	8014af0 <_printf_i+0x1a8>
 8014aea:	066d      	lsls	r5, r5, #25
 8014aec:	d5fb      	bpl.n	8014ae6 <_printf_i+0x19e>
 8014aee:	8019      	strh	r1, [r3, #0]
 8014af0:	2300      	movs	r3, #0
 8014af2:	9e04      	ldr	r6, [sp, #16]
 8014af4:	6123      	str	r3, [r4, #16]
 8014af6:	e7bb      	b.n	8014a70 <_printf_i+0x128>
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	1d11      	adds	r1, r2, #4
 8014afc:	6019      	str	r1, [r3, #0]
 8014afe:	6816      	ldr	r6, [r2, #0]
 8014b00:	2100      	movs	r1, #0
 8014b02:	0030      	movs	r0, r6
 8014b04:	6862      	ldr	r2, [r4, #4]
 8014b06:	f000 ff0d 	bl	8015924 <memchr>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d001      	beq.n	8014b12 <_printf_i+0x1ca>
 8014b0e:	1b80      	subs	r0, r0, r6
 8014b10:	6060      	str	r0, [r4, #4]
 8014b12:	6863      	ldr	r3, [r4, #4]
 8014b14:	6123      	str	r3, [r4, #16]
 8014b16:	2300      	movs	r3, #0
 8014b18:	9a04      	ldr	r2, [sp, #16]
 8014b1a:	7013      	strb	r3, [r2, #0]
 8014b1c:	e7a8      	b.n	8014a70 <_printf_i+0x128>
 8014b1e:	6923      	ldr	r3, [r4, #16]
 8014b20:	0032      	movs	r2, r6
 8014b22:	9906      	ldr	r1, [sp, #24]
 8014b24:	9805      	ldr	r0, [sp, #20]
 8014b26:	9d07      	ldr	r5, [sp, #28]
 8014b28:	47a8      	blx	r5
 8014b2a:	1c43      	adds	r3, r0, #1
 8014b2c:	d0aa      	beq.n	8014a84 <_printf_i+0x13c>
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	079b      	lsls	r3, r3, #30
 8014b32:	d415      	bmi.n	8014b60 <_printf_i+0x218>
 8014b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b36:	68e0      	ldr	r0, [r4, #12]
 8014b38:	4298      	cmp	r0, r3
 8014b3a:	daa5      	bge.n	8014a88 <_printf_i+0x140>
 8014b3c:	0018      	movs	r0, r3
 8014b3e:	e7a3      	b.n	8014a88 <_printf_i+0x140>
 8014b40:	0022      	movs	r2, r4
 8014b42:	2301      	movs	r3, #1
 8014b44:	9906      	ldr	r1, [sp, #24]
 8014b46:	9805      	ldr	r0, [sp, #20]
 8014b48:	9e07      	ldr	r6, [sp, #28]
 8014b4a:	3219      	adds	r2, #25
 8014b4c:	47b0      	blx	r6
 8014b4e:	1c43      	adds	r3, r0, #1
 8014b50:	d098      	beq.n	8014a84 <_printf_i+0x13c>
 8014b52:	3501      	adds	r5, #1
 8014b54:	68e3      	ldr	r3, [r4, #12]
 8014b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b58:	1a9b      	subs	r3, r3, r2
 8014b5a:	42ab      	cmp	r3, r5
 8014b5c:	dcf0      	bgt.n	8014b40 <_printf_i+0x1f8>
 8014b5e:	e7e9      	b.n	8014b34 <_printf_i+0x1ec>
 8014b60:	2500      	movs	r5, #0
 8014b62:	e7f7      	b.n	8014b54 <_printf_i+0x20c>
 8014b64:	0801849e 	.word	0x0801849e
 8014b68:	080184af 	.word	0x080184af

08014b6c <_sbrk_r>:
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	b570      	push	{r4, r5, r6, lr}
 8014b70:	4d06      	ldr	r5, [pc, #24]	; (8014b8c <_sbrk_r+0x20>)
 8014b72:	0004      	movs	r4, r0
 8014b74:	0008      	movs	r0, r1
 8014b76:	602b      	str	r3, [r5, #0]
 8014b78:	f7ef f920 	bl	8003dbc <_sbrk>
 8014b7c:	1c43      	adds	r3, r0, #1
 8014b7e:	d103      	bne.n	8014b88 <_sbrk_r+0x1c>
 8014b80:	682b      	ldr	r3, [r5, #0]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d000      	beq.n	8014b88 <_sbrk_r+0x1c>
 8014b86:	6023      	str	r3, [r4, #0]
 8014b88:	bd70      	pop	{r4, r5, r6, pc}
 8014b8a:	46c0      	nop			; (mov r8, r8)
 8014b8c:	20003a84 	.word	0x20003a84

08014b90 <siprintf>:
 8014b90:	b40e      	push	{r1, r2, r3}
 8014b92:	b500      	push	{lr}
 8014b94:	490b      	ldr	r1, [pc, #44]	; (8014bc4 <siprintf+0x34>)
 8014b96:	b09c      	sub	sp, #112	; 0x70
 8014b98:	ab1d      	add	r3, sp, #116	; 0x74
 8014b9a:	9002      	str	r0, [sp, #8]
 8014b9c:	9006      	str	r0, [sp, #24]
 8014b9e:	9107      	str	r1, [sp, #28]
 8014ba0:	9104      	str	r1, [sp, #16]
 8014ba2:	4809      	ldr	r0, [pc, #36]	; (8014bc8 <siprintf+0x38>)
 8014ba4:	4909      	ldr	r1, [pc, #36]	; (8014bcc <siprintf+0x3c>)
 8014ba6:	cb04      	ldmia	r3!, {r2}
 8014ba8:	9105      	str	r1, [sp, #20]
 8014baa:	6800      	ldr	r0, [r0, #0]
 8014bac:	a902      	add	r1, sp, #8
 8014bae:	9301      	str	r3, [sp, #4]
 8014bb0:	f001 fafe 	bl	80161b0 <_svfiprintf_r>
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	9a02      	ldr	r2, [sp, #8]
 8014bb8:	7013      	strb	r3, [r2, #0]
 8014bba:	b01c      	add	sp, #112	; 0x70
 8014bbc:	bc08      	pop	{r3}
 8014bbe:	b003      	add	sp, #12
 8014bc0:	4718      	bx	r3
 8014bc2:	46c0      	nop			; (mov r8, r8)
 8014bc4:	7fffffff 	.word	0x7fffffff
 8014bc8:	200030cc 	.word	0x200030cc
 8014bcc:	ffff0208 	.word	0xffff0208

08014bd0 <quorem>:
 8014bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bd2:	0006      	movs	r6, r0
 8014bd4:	690b      	ldr	r3, [r1, #16]
 8014bd6:	6932      	ldr	r2, [r6, #16]
 8014bd8:	b087      	sub	sp, #28
 8014bda:	2000      	movs	r0, #0
 8014bdc:	9103      	str	r1, [sp, #12]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	db65      	blt.n	8014cae <quorem+0xde>
 8014be2:	3b01      	subs	r3, #1
 8014be4:	009c      	lsls	r4, r3, #2
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	000b      	movs	r3, r1
 8014bea:	3314      	adds	r3, #20
 8014bec:	9305      	str	r3, [sp, #20]
 8014bee:	191b      	adds	r3, r3, r4
 8014bf0:	9304      	str	r3, [sp, #16]
 8014bf2:	0033      	movs	r3, r6
 8014bf4:	3314      	adds	r3, #20
 8014bf6:	9302      	str	r3, [sp, #8]
 8014bf8:	191c      	adds	r4, r3, r4
 8014bfa:	9b04      	ldr	r3, [sp, #16]
 8014bfc:	6827      	ldr	r7, [r4, #0]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	0038      	movs	r0, r7
 8014c02:	1c5d      	adds	r5, r3, #1
 8014c04:	0029      	movs	r1, r5
 8014c06:	9301      	str	r3, [sp, #4]
 8014c08:	f7eb faa0 	bl	800014c <__udivsi3>
 8014c0c:	9001      	str	r0, [sp, #4]
 8014c0e:	42af      	cmp	r7, r5
 8014c10:	d324      	bcc.n	8014c5c <quorem+0x8c>
 8014c12:	2500      	movs	r5, #0
 8014c14:	46ac      	mov	ip, r5
 8014c16:	9802      	ldr	r0, [sp, #8]
 8014c18:	9f05      	ldr	r7, [sp, #20]
 8014c1a:	cf08      	ldmia	r7!, {r3}
 8014c1c:	9a01      	ldr	r2, [sp, #4]
 8014c1e:	b299      	uxth	r1, r3
 8014c20:	4351      	muls	r1, r2
 8014c22:	0c1b      	lsrs	r3, r3, #16
 8014c24:	4353      	muls	r3, r2
 8014c26:	1949      	adds	r1, r1, r5
 8014c28:	0c0a      	lsrs	r2, r1, #16
 8014c2a:	189b      	adds	r3, r3, r2
 8014c2c:	6802      	ldr	r2, [r0, #0]
 8014c2e:	b289      	uxth	r1, r1
 8014c30:	b292      	uxth	r2, r2
 8014c32:	4462      	add	r2, ip
 8014c34:	1a52      	subs	r2, r2, r1
 8014c36:	6801      	ldr	r1, [r0, #0]
 8014c38:	0c1d      	lsrs	r5, r3, #16
 8014c3a:	0c09      	lsrs	r1, r1, #16
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	1acb      	subs	r3, r1, r3
 8014c40:	1411      	asrs	r1, r2, #16
 8014c42:	185b      	adds	r3, r3, r1
 8014c44:	1419      	asrs	r1, r3, #16
 8014c46:	b292      	uxth	r2, r2
 8014c48:	041b      	lsls	r3, r3, #16
 8014c4a:	431a      	orrs	r2, r3
 8014c4c:	9b04      	ldr	r3, [sp, #16]
 8014c4e:	468c      	mov	ip, r1
 8014c50:	c004      	stmia	r0!, {r2}
 8014c52:	42bb      	cmp	r3, r7
 8014c54:	d2e1      	bcs.n	8014c1a <quorem+0x4a>
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d030      	beq.n	8014cbe <quorem+0xee>
 8014c5c:	0030      	movs	r0, r6
 8014c5e:	9903      	ldr	r1, [sp, #12]
 8014c60:	f001 f900 	bl	8015e64 <__mcmp>
 8014c64:	2800      	cmp	r0, #0
 8014c66:	db21      	blt.n	8014cac <quorem+0xdc>
 8014c68:	0030      	movs	r0, r6
 8014c6a:	2400      	movs	r4, #0
 8014c6c:	9b01      	ldr	r3, [sp, #4]
 8014c6e:	9903      	ldr	r1, [sp, #12]
 8014c70:	3301      	adds	r3, #1
 8014c72:	9301      	str	r3, [sp, #4]
 8014c74:	3014      	adds	r0, #20
 8014c76:	3114      	adds	r1, #20
 8014c78:	6803      	ldr	r3, [r0, #0]
 8014c7a:	c920      	ldmia	r1!, {r5}
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	1914      	adds	r4, r2, r4
 8014c80:	b2aa      	uxth	r2, r5
 8014c82:	1aa2      	subs	r2, r4, r2
 8014c84:	0c1b      	lsrs	r3, r3, #16
 8014c86:	0c2d      	lsrs	r5, r5, #16
 8014c88:	1414      	asrs	r4, r2, #16
 8014c8a:	1b5b      	subs	r3, r3, r5
 8014c8c:	191b      	adds	r3, r3, r4
 8014c8e:	141c      	asrs	r4, r3, #16
 8014c90:	b292      	uxth	r2, r2
 8014c92:	041b      	lsls	r3, r3, #16
 8014c94:	4313      	orrs	r3, r2
 8014c96:	c008      	stmia	r0!, {r3}
 8014c98:	9b04      	ldr	r3, [sp, #16]
 8014c9a:	428b      	cmp	r3, r1
 8014c9c:	d2ec      	bcs.n	8014c78 <quorem+0xa8>
 8014c9e:	9b00      	ldr	r3, [sp, #0]
 8014ca0:	9a02      	ldr	r2, [sp, #8]
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	18d3      	adds	r3, r2, r3
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	2a00      	cmp	r2, #0
 8014caa:	d015      	beq.n	8014cd8 <quorem+0x108>
 8014cac:	9801      	ldr	r0, [sp, #4]
 8014cae:	b007      	add	sp, #28
 8014cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cb2:	6823      	ldr	r3, [r4, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d106      	bne.n	8014cc6 <quorem+0xf6>
 8014cb8:	9b00      	ldr	r3, [sp, #0]
 8014cba:	3b01      	subs	r3, #1
 8014cbc:	9300      	str	r3, [sp, #0]
 8014cbe:	9b02      	ldr	r3, [sp, #8]
 8014cc0:	3c04      	subs	r4, #4
 8014cc2:	42a3      	cmp	r3, r4
 8014cc4:	d3f5      	bcc.n	8014cb2 <quorem+0xe2>
 8014cc6:	9b00      	ldr	r3, [sp, #0]
 8014cc8:	6133      	str	r3, [r6, #16]
 8014cca:	e7c7      	b.n	8014c5c <quorem+0x8c>
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	2a00      	cmp	r2, #0
 8014cd0:	d106      	bne.n	8014ce0 <quorem+0x110>
 8014cd2:	9a00      	ldr	r2, [sp, #0]
 8014cd4:	3a01      	subs	r2, #1
 8014cd6:	9200      	str	r2, [sp, #0]
 8014cd8:	9a02      	ldr	r2, [sp, #8]
 8014cda:	3b04      	subs	r3, #4
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d3f5      	bcc.n	8014ccc <quorem+0xfc>
 8014ce0:	9b00      	ldr	r3, [sp, #0]
 8014ce2:	6133      	str	r3, [r6, #16]
 8014ce4:	e7e2      	b.n	8014cac <quorem+0xdc>
	...

08014ce8 <_dtoa_r>:
 8014ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cea:	b09d      	sub	sp, #116	; 0x74
 8014cec:	9202      	str	r2, [sp, #8]
 8014cee:	9303      	str	r3, [sp, #12]
 8014cf0:	9b02      	ldr	r3, [sp, #8]
 8014cf2:	9c03      	ldr	r4, [sp, #12]
 8014cf4:	9308      	str	r3, [sp, #32]
 8014cf6:	9409      	str	r4, [sp, #36]	; 0x24
 8014cf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014cfa:	0007      	movs	r7, r0
 8014cfc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8014cfe:	2c00      	cmp	r4, #0
 8014d00:	d10e      	bne.n	8014d20 <_dtoa_r+0x38>
 8014d02:	2010      	movs	r0, #16
 8014d04:	f7ff f9c6 	bl	8014094 <malloc>
 8014d08:	1e02      	subs	r2, r0, #0
 8014d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8014d0c:	d104      	bne.n	8014d18 <_dtoa_r+0x30>
 8014d0e:	21ea      	movs	r1, #234	; 0xea
 8014d10:	4bc7      	ldr	r3, [pc, #796]	; (8015030 <_dtoa_r+0x348>)
 8014d12:	48c8      	ldr	r0, [pc, #800]	; (8015034 <_dtoa_r+0x34c>)
 8014d14:	f001 fb4c 	bl	80163b0 <__assert_func>
 8014d18:	6044      	str	r4, [r0, #4]
 8014d1a:	6084      	str	r4, [r0, #8]
 8014d1c:	6004      	str	r4, [r0, #0]
 8014d1e:	60c4      	str	r4, [r0, #12]
 8014d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d22:	6819      	ldr	r1, [r3, #0]
 8014d24:	2900      	cmp	r1, #0
 8014d26:	d00a      	beq.n	8014d3e <_dtoa_r+0x56>
 8014d28:	685a      	ldr	r2, [r3, #4]
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	4093      	lsls	r3, r2
 8014d2e:	604a      	str	r2, [r1, #4]
 8014d30:	608b      	str	r3, [r1, #8]
 8014d32:	0038      	movs	r0, r7
 8014d34:	f000 fe56 	bl	80159e4 <_Bfree>
 8014d38:	2200      	movs	r2, #0
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3c:	601a      	str	r2, [r3, #0]
 8014d3e:	9b03      	ldr	r3, [sp, #12]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	da20      	bge.n	8014d86 <_dtoa_r+0x9e>
 8014d44:	2301      	movs	r3, #1
 8014d46:	602b      	str	r3, [r5, #0]
 8014d48:	9b03      	ldr	r3, [sp, #12]
 8014d4a:	005b      	lsls	r3, r3, #1
 8014d4c:	085b      	lsrs	r3, r3, #1
 8014d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014d52:	4bb9      	ldr	r3, [pc, #740]	; (8015038 <_dtoa_r+0x350>)
 8014d54:	4ab8      	ldr	r2, [pc, #736]	; (8015038 <_dtoa_r+0x350>)
 8014d56:	402b      	ands	r3, r5
 8014d58:	4293      	cmp	r3, r2
 8014d5a:	d117      	bne.n	8014d8c <_dtoa_r+0xa4>
 8014d5c:	4bb7      	ldr	r3, [pc, #732]	; (801503c <_dtoa_r+0x354>)
 8014d5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014d60:	0328      	lsls	r0, r5, #12
 8014d62:	6013      	str	r3, [r2, #0]
 8014d64:	9b02      	ldr	r3, [sp, #8]
 8014d66:	0b00      	lsrs	r0, r0, #12
 8014d68:	4318      	orrs	r0, r3
 8014d6a:	d101      	bne.n	8014d70 <_dtoa_r+0x88>
 8014d6c:	f000 fdbf 	bl	80158ee <_dtoa_r+0xc06>
 8014d70:	48b3      	ldr	r0, [pc, #716]	; (8015040 <_dtoa_r+0x358>)
 8014d72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014d74:	9006      	str	r0, [sp, #24]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d002      	beq.n	8014d80 <_dtoa_r+0x98>
 8014d7a:	4bb2      	ldr	r3, [pc, #712]	; (8015044 <_dtoa_r+0x35c>)
 8014d7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	9806      	ldr	r0, [sp, #24]
 8014d82:	b01d      	add	sp, #116	; 0x74
 8014d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d86:	2300      	movs	r3, #0
 8014d88:	602b      	str	r3, [r5, #0]
 8014d8a:	e7e1      	b.n	8014d50 <_dtoa_r+0x68>
 8014d8c:	9b08      	ldr	r3, [sp, #32]
 8014d8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d90:	9312      	str	r3, [sp, #72]	; 0x48
 8014d92:	9413      	str	r4, [sp, #76]	; 0x4c
 8014d94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014d96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014d98:	2200      	movs	r2, #0
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	f7eb fb5c 	bl	8000458 <__aeabi_dcmpeq>
 8014da0:	1e04      	subs	r4, r0, #0
 8014da2:	d009      	beq.n	8014db8 <_dtoa_r+0xd0>
 8014da4:	2301      	movs	r3, #1
 8014da6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014da8:	6013      	str	r3, [r2, #0]
 8014daa:	4ba7      	ldr	r3, [pc, #668]	; (8015048 <_dtoa_r+0x360>)
 8014dac:	9306      	str	r3, [sp, #24]
 8014dae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d0e5      	beq.n	8014d80 <_dtoa_r+0x98>
 8014db4:	4ba5      	ldr	r3, [pc, #660]	; (801504c <_dtoa_r+0x364>)
 8014db6:	e7e1      	b.n	8014d7c <_dtoa_r+0x94>
 8014db8:	ab1a      	add	r3, sp, #104	; 0x68
 8014dba:	9301      	str	r3, [sp, #4]
 8014dbc:	ab1b      	add	r3, sp, #108	; 0x6c
 8014dbe:	9300      	str	r3, [sp, #0]
 8014dc0:	0038      	movs	r0, r7
 8014dc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014dc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dc6:	f001 f901 	bl	8015fcc <__d2b>
 8014dca:	006e      	lsls	r6, r5, #1
 8014dcc:	9005      	str	r0, [sp, #20]
 8014dce:	0d76      	lsrs	r6, r6, #21
 8014dd0:	d100      	bne.n	8014dd4 <_dtoa_r+0xec>
 8014dd2:	e07c      	b.n	8014ece <_dtoa_r+0x1e6>
 8014dd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014dd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014dd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dda:	4a9d      	ldr	r2, [pc, #628]	; (8015050 <_dtoa_r+0x368>)
 8014ddc:	031b      	lsls	r3, r3, #12
 8014dde:	0b1b      	lsrs	r3, r3, #12
 8014de0:	431a      	orrs	r2, r3
 8014de2:	0011      	movs	r1, r2
 8014de4:	4b9b      	ldr	r3, [pc, #620]	; (8015054 <_dtoa_r+0x36c>)
 8014de6:	9418      	str	r4, [sp, #96]	; 0x60
 8014de8:	18f6      	adds	r6, r6, r3
 8014dea:	2200      	movs	r2, #0
 8014dec:	4b9a      	ldr	r3, [pc, #616]	; (8015058 <_dtoa_r+0x370>)
 8014dee:	f7ed fc23 	bl	8002638 <__aeabi_dsub>
 8014df2:	4a9a      	ldr	r2, [pc, #616]	; (801505c <_dtoa_r+0x374>)
 8014df4:	4b9a      	ldr	r3, [pc, #616]	; (8015060 <_dtoa_r+0x378>)
 8014df6:	f7ed f9b3 	bl	8002160 <__aeabi_dmul>
 8014dfa:	4a9a      	ldr	r2, [pc, #616]	; (8015064 <_dtoa_r+0x37c>)
 8014dfc:	4b9a      	ldr	r3, [pc, #616]	; (8015068 <_dtoa_r+0x380>)
 8014dfe:	f7ec fa71 	bl	80012e4 <__aeabi_dadd>
 8014e02:	0004      	movs	r4, r0
 8014e04:	0030      	movs	r0, r6
 8014e06:	000d      	movs	r5, r1
 8014e08:	f7ed fffc 	bl	8002e04 <__aeabi_i2d>
 8014e0c:	4a97      	ldr	r2, [pc, #604]	; (801506c <_dtoa_r+0x384>)
 8014e0e:	4b98      	ldr	r3, [pc, #608]	; (8015070 <_dtoa_r+0x388>)
 8014e10:	f7ed f9a6 	bl	8002160 <__aeabi_dmul>
 8014e14:	0002      	movs	r2, r0
 8014e16:	000b      	movs	r3, r1
 8014e18:	0020      	movs	r0, r4
 8014e1a:	0029      	movs	r1, r5
 8014e1c:	f7ec fa62 	bl	80012e4 <__aeabi_dadd>
 8014e20:	0004      	movs	r4, r0
 8014e22:	000d      	movs	r5, r1
 8014e24:	f7ed ffb8 	bl	8002d98 <__aeabi_d2iz>
 8014e28:	2200      	movs	r2, #0
 8014e2a:	9002      	str	r0, [sp, #8]
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	0020      	movs	r0, r4
 8014e30:	0029      	movs	r1, r5
 8014e32:	f7eb fb17 	bl	8000464 <__aeabi_dcmplt>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	d00b      	beq.n	8014e52 <_dtoa_r+0x16a>
 8014e3a:	9802      	ldr	r0, [sp, #8]
 8014e3c:	f7ed ffe2 	bl	8002e04 <__aeabi_i2d>
 8014e40:	002b      	movs	r3, r5
 8014e42:	0022      	movs	r2, r4
 8014e44:	f7eb fb08 	bl	8000458 <__aeabi_dcmpeq>
 8014e48:	4243      	negs	r3, r0
 8014e4a:	4158      	adcs	r0, r3
 8014e4c:	9b02      	ldr	r3, [sp, #8]
 8014e4e:	1a1b      	subs	r3, r3, r0
 8014e50:	9302      	str	r3, [sp, #8]
 8014e52:	2301      	movs	r3, #1
 8014e54:	9316      	str	r3, [sp, #88]	; 0x58
 8014e56:	9b02      	ldr	r3, [sp, #8]
 8014e58:	2b16      	cmp	r3, #22
 8014e5a:	d80f      	bhi.n	8014e7c <_dtoa_r+0x194>
 8014e5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014e5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014e60:	00da      	lsls	r2, r3, #3
 8014e62:	4b84      	ldr	r3, [pc, #528]	; (8015074 <_dtoa_r+0x38c>)
 8014e64:	189b      	adds	r3, r3, r2
 8014e66:	681a      	ldr	r2, [r3, #0]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	f7eb fafb 	bl	8000464 <__aeabi_dcmplt>
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d049      	beq.n	8014f06 <_dtoa_r+0x21e>
 8014e72:	9b02      	ldr	r3, [sp, #8]
 8014e74:	3b01      	subs	r3, #1
 8014e76:	9302      	str	r3, [sp, #8]
 8014e78:	2300      	movs	r3, #0
 8014e7a:	9316      	str	r3, [sp, #88]	; 0x58
 8014e7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014e7e:	1b9e      	subs	r6, r3, r6
 8014e80:	2300      	movs	r3, #0
 8014e82:	930a      	str	r3, [sp, #40]	; 0x28
 8014e84:	0033      	movs	r3, r6
 8014e86:	3b01      	subs	r3, #1
 8014e88:	930d      	str	r3, [sp, #52]	; 0x34
 8014e8a:	d504      	bpl.n	8014e96 <_dtoa_r+0x1ae>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	1b9b      	subs	r3, r3, r6
 8014e90:	930a      	str	r3, [sp, #40]	; 0x28
 8014e92:	2300      	movs	r3, #0
 8014e94:	930d      	str	r3, [sp, #52]	; 0x34
 8014e96:	9b02      	ldr	r3, [sp, #8]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	db36      	blt.n	8014f0a <_dtoa_r+0x222>
 8014e9c:	9a02      	ldr	r2, [sp, #8]
 8014e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ea0:	4694      	mov	ip, r2
 8014ea2:	4463      	add	r3, ip
 8014ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	9215      	str	r2, [sp, #84]	; 0x54
 8014eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8014eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014eae:	2401      	movs	r4, #1
 8014eb0:	2b09      	cmp	r3, #9
 8014eb2:	d864      	bhi.n	8014f7e <_dtoa_r+0x296>
 8014eb4:	2b05      	cmp	r3, #5
 8014eb6:	dd02      	ble.n	8014ebe <_dtoa_r+0x1d6>
 8014eb8:	2400      	movs	r4, #0
 8014eba:	3b04      	subs	r3, #4
 8014ebc:	9322      	str	r3, [sp, #136]	; 0x88
 8014ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ec0:	1e98      	subs	r0, r3, #2
 8014ec2:	2803      	cmp	r0, #3
 8014ec4:	d864      	bhi.n	8014f90 <_dtoa_r+0x2a8>
 8014ec6:	f7eb f92d 	bl	8000124 <__gnu_thumb1_case_uqi>
 8014eca:	3829      	.short	0x3829
 8014ecc:	5836      	.short	0x5836
 8014ece:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014ed0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014ed2:	189e      	adds	r6, r3, r2
 8014ed4:	4b68      	ldr	r3, [pc, #416]	; (8015078 <_dtoa_r+0x390>)
 8014ed6:	18f2      	adds	r2, r6, r3
 8014ed8:	2a20      	cmp	r2, #32
 8014eda:	dd0f      	ble.n	8014efc <_dtoa_r+0x214>
 8014edc:	2340      	movs	r3, #64	; 0x40
 8014ede:	1a9b      	subs	r3, r3, r2
 8014ee0:	409d      	lsls	r5, r3
 8014ee2:	4b66      	ldr	r3, [pc, #408]	; (801507c <_dtoa_r+0x394>)
 8014ee4:	9802      	ldr	r0, [sp, #8]
 8014ee6:	18f3      	adds	r3, r6, r3
 8014ee8:	40d8      	lsrs	r0, r3
 8014eea:	4328      	orrs	r0, r5
 8014eec:	f7ed ffba 	bl	8002e64 <__aeabi_ui2d>
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	4c63      	ldr	r4, [pc, #396]	; (8015080 <_dtoa_r+0x398>)
 8014ef4:	3e01      	subs	r6, #1
 8014ef6:	1909      	adds	r1, r1, r4
 8014ef8:	9318      	str	r3, [sp, #96]	; 0x60
 8014efa:	e776      	b.n	8014dea <_dtoa_r+0x102>
 8014efc:	2320      	movs	r3, #32
 8014efe:	9802      	ldr	r0, [sp, #8]
 8014f00:	1a9b      	subs	r3, r3, r2
 8014f02:	4098      	lsls	r0, r3
 8014f04:	e7f2      	b.n	8014eec <_dtoa_r+0x204>
 8014f06:	9016      	str	r0, [sp, #88]	; 0x58
 8014f08:	e7b8      	b.n	8014e7c <_dtoa_r+0x194>
 8014f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f0c:	9a02      	ldr	r2, [sp, #8]
 8014f0e:	1a9b      	subs	r3, r3, r2
 8014f10:	930a      	str	r3, [sp, #40]	; 0x28
 8014f12:	4253      	negs	r3, r2
 8014f14:	930e      	str	r3, [sp, #56]	; 0x38
 8014f16:	2300      	movs	r3, #0
 8014f18:	9315      	str	r3, [sp, #84]	; 0x54
 8014f1a:	e7c7      	b.n	8014eac <_dtoa_r+0x1c4>
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f22:	930c      	str	r3, [sp, #48]	; 0x30
 8014f24:	9307      	str	r3, [sp, #28]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	dc13      	bgt.n	8014f52 <_dtoa_r+0x26a>
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	001a      	movs	r2, r3
 8014f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8014f30:	9307      	str	r3, [sp, #28]
 8014f32:	9223      	str	r2, [sp, #140]	; 0x8c
 8014f34:	e00d      	b.n	8014f52 <_dtoa_r+0x26a>
 8014f36:	2301      	movs	r3, #1
 8014f38:	e7f1      	b.n	8014f1e <_dtoa_r+0x236>
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f40:	4694      	mov	ip, r2
 8014f42:	9b02      	ldr	r3, [sp, #8]
 8014f44:	4463      	add	r3, ip
 8014f46:	930c      	str	r3, [sp, #48]	; 0x30
 8014f48:	3301      	adds	r3, #1
 8014f4a:	9307      	str	r3, [sp, #28]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	dc00      	bgt.n	8014f52 <_dtoa_r+0x26a>
 8014f50:	2301      	movs	r3, #1
 8014f52:	2200      	movs	r2, #0
 8014f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f56:	6042      	str	r2, [r0, #4]
 8014f58:	3204      	adds	r2, #4
 8014f5a:	0015      	movs	r5, r2
 8014f5c:	3514      	adds	r5, #20
 8014f5e:	6841      	ldr	r1, [r0, #4]
 8014f60:	429d      	cmp	r5, r3
 8014f62:	d919      	bls.n	8014f98 <_dtoa_r+0x2b0>
 8014f64:	0038      	movs	r0, r7
 8014f66:	f000 fcf9 	bl	801595c <_Balloc>
 8014f6a:	9006      	str	r0, [sp, #24]
 8014f6c:	2800      	cmp	r0, #0
 8014f6e:	d117      	bne.n	8014fa0 <_dtoa_r+0x2b8>
 8014f70:	21d5      	movs	r1, #213	; 0xd5
 8014f72:	0002      	movs	r2, r0
 8014f74:	4b43      	ldr	r3, [pc, #268]	; (8015084 <_dtoa_r+0x39c>)
 8014f76:	0049      	lsls	r1, r1, #1
 8014f78:	e6cb      	b.n	8014d12 <_dtoa_r+0x2a>
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	e7de      	b.n	8014f3c <_dtoa_r+0x254>
 8014f7e:	2300      	movs	r3, #0
 8014f80:	940f      	str	r4, [sp, #60]	; 0x3c
 8014f82:	9322      	str	r3, [sp, #136]	; 0x88
 8014f84:	3b01      	subs	r3, #1
 8014f86:	930c      	str	r3, [sp, #48]	; 0x30
 8014f88:	9307      	str	r3, [sp, #28]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	3313      	adds	r3, #19
 8014f8e:	e7d0      	b.n	8014f32 <_dtoa_r+0x24a>
 8014f90:	2301      	movs	r3, #1
 8014f92:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f94:	3b02      	subs	r3, #2
 8014f96:	e7f6      	b.n	8014f86 <_dtoa_r+0x29e>
 8014f98:	3101      	adds	r1, #1
 8014f9a:	6041      	str	r1, [r0, #4]
 8014f9c:	0052      	lsls	r2, r2, #1
 8014f9e:	e7dc      	b.n	8014f5a <_dtoa_r+0x272>
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa2:	9a06      	ldr	r2, [sp, #24]
 8014fa4:	601a      	str	r2, [r3, #0]
 8014fa6:	9b07      	ldr	r3, [sp, #28]
 8014fa8:	2b0e      	cmp	r3, #14
 8014faa:	d900      	bls.n	8014fae <_dtoa_r+0x2c6>
 8014fac:	e0eb      	b.n	8015186 <_dtoa_r+0x49e>
 8014fae:	2c00      	cmp	r4, #0
 8014fb0:	d100      	bne.n	8014fb4 <_dtoa_r+0x2cc>
 8014fb2:	e0e8      	b.n	8015186 <_dtoa_r+0x49e>
 8014fb4:	9b02      	ldr	r3, [sp, #8]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dd68      	ble.n	801508c <_dtoa_r+0x3a4>
 8014fba:	001a      	movs	r2, r3
 8014fbc:	210f      	movs	r1, #15
 8014fbe:	4b2d      	ldr	r3, [pc, #180]	; (8015074 <_dtoa_r+0x38c>)
 8014fc0:	400a      	ands	r2, r1
 8014fc2:	00d2      	lsls	r2, r2, #3
 8014fc4:	189b      	adds	r3, r3, r2
 8014fc6:	681d      	ldr	r5, [r3, #0]
 8014fc8:	685e      	ldr	r6, [r3, #4]
 8014fca:	9b02      	ldr	r3, [sp, #8]
 8014fcc:	111c      	asrs	r4, r3, #4
 8014fce:	2302      	movs	r3, #2
 8014fd0:	9310      	str	r3, [sp, #64]	; 0x40
 8014fd2:	9b02      	ldr	r3, [sp, #8]
 8014fd4:	05db      	lsls	r3, r3, #23
 8014fd6:	d50b      	bpl.n	8014ff0 <_dtoa_r+0x308>
 8014fd8:	4b2b      	ldr	r3, [pc, #172]	; (8015088 <_dtoa_r+0x3a0>)
 8014fda:	400c      	ands	r4, r1
 8014fdc:	6a1a      	ldr	r2, [r3, #32]
 8014fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014fe2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014fe4:	f7ec fcba 	bl	800195c <__aeabi_ddiv>
 8014fe8:	2303      	movs	r3, #3
 8014fea:	9008      	str	r0, [sp, #32]
 8014fec:	9109      	str	r1, [sp, #36]	; 0x24
 8014fee:	9310      	str	r3, [sp, #64]	; 0x40
 8014ff0:	4b25      	ldr	r3, [pc, #148]	; (8015088 <_dtoa_r+0x3a0>)
 8014ff2:	9314      	str	r3, [sp, #80]	; 0x50
 8014ff4:	2c00      	cmp	r4, #0
 8014ff6:	d108      	bne.n	801500a <_dtoa_r+0x322>
 8014ff8:	9808      	ldr	r0, [sp, #32]
 8014ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ffc:	002a      	movs	r2, r5
 8014ffe:	0033      	movs	r3, r6
 8015000:	f7ec fcac 	bl	800195c <__aeabi_ddiv>
 8015004:	9008      	str	r0, [sp, #32]
 8015006:	9109      	str	r1, [sp, #36]	; 0x24
 8015008:	e05c      	b.n	80150c4 <_dtoa_r+0x3dc>
 801500a:	2301      	movs	r3, #1
 801500c:	421c      	tst	r4, r3
 801500e:	d00b      	beq.n	8015028 <_dtoa_r+0x340>
 8015010:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015012:	0028      	movs	r0, r5
 8015014:	3301      	adds	r3, #1
 8015016:	9310      	str	r3, [sp, #64]	; 0x40
 8015018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801501a:	0031      	movs	r1, r6
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	685b      	ldr	r3, [r3, #4]
 8015020:	f7ed f89e 	bl	8002160 <__aeabi_dmul>
 8015024:	0005      	movs	r5, r0
 8015026:	000e      	movs	r6, r1
 8015028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801502a:	1064      	asrs	r4, r4, #1
 801502c:	3308      	adds	r3, #8
 801502e:	e7e0      	b.n	8014ff2 <_dtoa_r+0x30a>
 8015030:	080184cd 	.word	0x080184cd
 8015034:	080184e4 	.word	0x080184e4
 8015038:	7ff00000 	.word	0x7ff00000
 801503c:	0000270f 	.word	0x0000270f
 8015040:	080184c9 	.word	0x080184c9
 8015044:	080184cc 	.word	0x080184cc
 8015048:	0801849c 	.word	0x0801849c
 801504c:	0801849d 	.word	0x0801849d
 8015050:	3ff00000 	.word	0x3ff00000
 8015054:	fffffc01 	.word	0xfffffc01
 8015058:	3ff80000 	.word	0x3ff80000
 801505c:	636f4361 	.word	0x636f4361
 8015060:	3fd287a7 	.word	0x3fd287a7
 8015064:	8b60c8b3 	.word	0x8b60c8b3
 8015068:	3fc68a28 	.word	0x3fc68a28
 801506c:	509f79fb 	.word	0x509f79fb
 8015070:	3fd34413 	.word	0x3fd34413
 8015074:	080185d8 	.word	0x080185d8
 8015078:	00000432 	.word	0x00000432
 801507c:	00000412 	.word	0x00000412
 8015080:	fe100000 	.word	0xfe100000
 8015084:	0801853f 	.word	0x0801853f
 8015088:	080185b0 	.word	0x080185b0
 801508c:	2302      	movs	r3, #2
 801508e:	9310      	str	r3, [sp, #64]	; 0x40
 8015090:	9b02      	ldr	r3, [sp, #8]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d016      	beq.n	80150c4 <_dtoa_r+0x3dc>
 8015096:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015098:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801509a:	425c      	negs	r4, r3
 801509c:	230f      	movs	r3, #15
 801509e:	4ab6      	ldr	r2, [pc, #728]	; (8015378 <_dtoa_r+0x690>)
 80150a0:	4023      	ands	r3, r4
 80150a2:	00db      	lsls	r3, r3, #3
 80150a4:	18d3      	adds	r3, r2, r3
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	f7ed f859 	bl	8002160 <__aeabi_dmul>
 80150ae:	2601      	movs	r6, #1
 80150b0:	2300      	movs	r3, #0
 80150b2:	9008      	str	r0, [sp, #32]
 80150b4:	9109      	str	r1, [sp, #36]	; 0x24
 80150b6:	4db1      	ldr	r5, [pc, #708]	; (801537c <_dtoa_r+0x694>)
 80150b8:	1124      	asrs	r4, r4, #4
 80150ba:	2c00      	cmp	r4, #0
 80150bc:	d000      	beq.n	80150c0 <_dtoa_r+0x3d8>
 80150be:	e094      	b.n	80151ea <_dtoa_r+0x502>
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d19f      	bne.n	8015004 <_dtoa_r+0x31c>
 80150c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d100      	bne.n	80150cc <_dtoa_r+0x3e4>
 80150ca:	e09b      	b.n	8015204 <_dtoa_r+0x51c>
 80150cc:	9c08      	ldr	r4, [sp, #32]
 80150ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80150d0:	2200      	movs	r2, #0
 80150d2:	0020      	movs	r0, r4
 80150d4:	0029      	movs	r1, r5
 80150d6:	4baa      	ldr	r3, [pc, #680]	; (8015380 <_dtoa_r+0x698>)
 80150d8:	f7eb f9c4 	bl	8000464 <__aeabi_dcmplt>
 80150dc:	2800      	cmp	r0, #0
 80150de:	d100      	bne.n	80150e2 <_dtoa_r+0x3fa>
 80150e0:	e090      	b.n	8015204 <_dtoa_r+0x51c>
 80150e2:	9b07      	ldr	r3, [sp, #28]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d100      	bne.n	80150ea <_dtoa_r+0x402>
 80150e8:	e08c      	b.n	8015204 <_dtoa_r+0x51c>
 80150ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	dd46      	ble.n	801517e <_dtoa_r+0x496>
 80150f0:	9b02      	ldr	r3, [sp, #8]
 80150f2:	2200      	movs	r2, #0
 80150f4:	0020      	movs	r0, r4
 80150f6:	0029      	movs	r1, r5
 80150f8:	1e5e      	subs	r6, r3, #1
 80150fa:	4ba2      	ldr	r3, [pc, #648]	; (8015384 <_dtoa_r+0x69c>)
 80150fc:	f7ed f830 	bl	8002160 <__aeabi_dmul>
 8015100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015102:	9008      	str	r0, [sp, #32]
 8015104:	9109      	str	r1, [sp, #36]	; 0x24
 8015106:	3301      	adds	r3, #1
 8015108:	9310      	str	r3, [sp, #64]	; 0x40
 801510a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801510c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801510e:	9c08      	ldr	r4, [sp, #32]
 8015110:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015112:	9314      	str	r3, [sp, #80]	; 0x50
 8015114:	f7ed fe76 	bl	8002e04 <__aeabi_i2d>
 8015118:	0022      	movs	r2, r4
 801511a:	002b      	movs	r3, r5
 801511c:	f7ed f820 	bl	8002160 <__aeabi_dmul>
 8015120:	2200      	movs	r2, #0
 8015122:	4b99      	ldr	r3, [pc, #612]	; (8015388 <_dtoa_r+0x6a0>)
 8015124:	f7ec f8de 	bl	80012e4 <__aeabi_dadd>
 8015128:	9010      	str	r0, [sp, #64]	; 0x40
 801512a:	9111      	str	r1, [sp, #68]	; 0x44
 801512c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801512e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015130:	9208      	str	r2, [sp, #32]
 8015132:	9309      	str	r3, [sp, #36]	; 0x24
 8015134:	4a95      	ldr	r2, [pc, #596]	; (801538c <_dtoa_r+0x6a4>)
 8015136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015138:	4694      	mov	ip, r2
 801513a:	4463      	add	r3, ip
 801513c:	9317      	str	r3, [sp, #92]	; 0x5c
 801513e:	9309      	str	r3, [sp, #36]	; 0x24
 8015140:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015142:	2b00      	cmp	r3, #0
 8015144:	d161      	bne.n	801520a <_dtoa_r+0x522>
 8015146:	2200      	movs	r2, #0
 8015148:	0020      	movs	r0, r4
 801514a:	0029      	movs	r1, r5
 801514c:	4b90      	ldr	r3, [pc, #576]	; (8015390 <_dtoa_r+0x6a8>)
 801514e:	f7ed fa73 	bl	8002638 <__aeabi_dsub>
 8015152:	9a08      	ldr	r2, [sp, #32]
 8015154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015156:	0004      	movs	r4, r0
 8015158:	000d      	movs	r5, r1
 801515a:	f7eb f997 	bl	800048c <__aeabi_dcmpgt>
 801515e:	2800      	cmp	r0, #0
 8015160:	d000      	beq.n	8015164 <_dtoa_r+0x47c>
 8015162:	e2af      	b.n	80156c4 <_dtoa_r+0x9dc>
 8015164:	488b      	ldr	r0, [pc, #556]	; (8015394 <_dtoa_r+0x6ac>)
 8015166:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015168:	4684      	mov	ip, r0
 801516a:	4461      	add	r1, ip
 801516c:	000b      	movs	r3, r1
 801516e:	0020      	movs	r0, r4
 8015170:	0029      	movs	r1, r5
 8015172:	9a08      	ldr	r2, [sp, #32]
 8015174:	f7eb f976 	bl	8000464 <__aeabi_dcmplt>
 8015178:	2800      	cmp	r0, #0
 801517a:	d000      	beq.n	801517e <_dtoa_r+0x496>
 801517c:	e29f      	b.n	80156be <_dtoa_r+0x9d6>
 801517e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015180:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015182:	9308      	str	r3, [sp, #32]
 8015184:	9409      	str	r4, [sp, #36]	; 0x24
 8015186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015188:	2b00      	cmp	r3, #0
 801518a:	da00      	bge.n	801518e <_dtoa_r+0x4a6>
 801518c:	e172      	b.n	8015474 <_dtoa_r+0x78c>
 801518e:	9a02      	ldr	r2, [sp, #8]
 8015190:	2a0e      	cmp	r2, #14
 8015192:	dd00      	ble.n	8015196 <_dtoa_r+0x4ae>
 8015194:	e16e      	b.n	8015474 <_dtoa_r+0x78c>
 8015196:	4b78      	ldr	r3, [pc, #480]	; (8015378 <_dtoa_r+0x690>)
 8015198:	00d2      	lsls	r2, r2, #3
 801519a:	189b      	adds	r3, r3, r2
 801519c:	685c      	ldr	r4, [r3, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	930a      	str	r3, [sp, #40]	; 0x28
 80151a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80151a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	db00      	blt.n	80151ac <_dtoa_r+0x4c4>
 80151aa:	e0f7      	b.n	801539c <_dtoa_r+0x6b4>
 80151ac:	9b07      	ldr	r3, [sp, #28]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	dd00      	ble.n	80151b4 <_dtoa_r+0x4cc>
 80151b2:	e0f3      	b.n	801539c <_dtoa_r+0x6b4>
 80151b4:	d000      	beq.n	80151b8 <_dtoa_r+0x4d0>
 80151b6:	e282      	b.n	80156be <_dtoa_r+0x9d6>
 80151b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151bc:	2200      	movs	r2, #0
 80151be:	4b74      	ldr	r3, [pc, #464]	; (8015390 <_dtoa_r+0x6a8>)
 80151c0:	f7ec ffce 	bl	8002160 <__aeabi_dmul>
 80151c4:	9a08      	ldr	r2, [sp, #32]
 80151c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151c8:	f7eb f96a 	bl	80004a0 <__aeabi_dcmpge>
 80151cc:	9e07      	ldr	r6, [sp, #28]
 80151ce:	0035      	movs	r5, r6
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d000      	beq.n	80151d6 <_dtoa_r+0x4ee>
 80151d4:	e259      	b.n	801568a <_dtoa_r+0x9a2>
 80151d6:	9b06      	ldr	r3, [sp, #24]
 80151d8:	9a06      	ldr	r2, [sp, #24]
 80151da:	3301      	adds	r3, #1
 80151dc:	9308      	str	r3, [sp, #32]
 80151de:	2331      	movs	r3, #49	; 0x31
 80151e0:	7013      	strb	r3, [r2, #0]
 80151e2:	9b02      	ldr	r3, [sp, #8]
 80151e4:	3301      	adds	r3, #1
 80151e6:	9302      	str	r3, [sp, #8]
 80151e8:	e254      	b.n	8015694 <_dtoa_r+0x9ac>
 80151ea:	4234      	tst	r4, r6
 80151ec:	d007      	beq.n	80151fe <_dtoa_r+0x516>
 80151ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151f0:	3301      	adds	r3, #1
 80151f2:	9310      	str	r3, [sp, #64]	; 0x40
 80151f4:	682a      	ldr	r2, [r5, #0]
 80151f6:	686b      	ldr	r3, [r5, #4]
 80151f8:	f7ec ffb2 	bl	8002160 <__aeabi_dmul>
 80151fc:	0033      	movs	r3, r6
 80151fe:	1064      	asrs	r4, r4, #1
 8015200:	3508      	adds	r5, #8
 8015202:	e75a      	b.n	80150ba <_dtoa_r+0x3d2>
 8015204:	9e02      	ldr	r6, [sp, #8]
 8015206:	9b07      	ldr	r3, [sp, #28]
 8015208:	e780      	b.n	801510c <_dtoa_r+0x424>
 801520a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801520c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801520e:	1e5a      	subs	r2, r3, #1
 8015210:	4b59      	ldr	r3, [pc, #356]	; (8015378 <_dtoa_r+0x690>)
 8015212:	00d2      	lsls	r2, r2, #3
 8015214:	189b      	adds	r3, r3, r2
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	2900      	cmp	r1, #0
 801521c:	d051      	beq.n	80152c2 <_dtoa_r+0x5da>
 801521e:	2000      	movs	r0, #0
 8015220:	495d      	ldr	r1, [pc, #372]	; (8015398 <_dtoa_r+0x6b0>)
 8015222:	f7ec fb9b 	bl	800195c <__aeabi_ddiv>
 8015226:	9a08      	ldr	r2, [sp, #32]
 8015228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801522a:	f7ed fa05 	bl	8002638 <__aeabi_dsub>
 801522e:	9a06      	ldr	r2, [sp, #24]
 8015230:	9b06      	ldr	r3, [sp, #24]
 8015232:	4694      	mov	ip, r2
 8015234:	9317      	str	r3, [sp, #92]	; 0x5c
 8015236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015238:	9010      	str	r0, [sp, #64]	; 0x40
 801523a:	9111      	str	r1, [sp, #68]	; 0x44
 801523c:	4463      	add	r3, ip
 801523e:	9319      	str	r3, [sp, #100]	; 0x64
 8015240:	0029      	movs	r1, r5
 8015242:	0020      	movs	r0, r4
 8015244:	f7ed fda8 	bl	8002d98 <__aeabi_d2iz>
 8015248:	9014      	str	r0, [sp, #80]	; 0x50
 801524a:	f7ed fddb 	bl	8002e04 <__aeabi_i2d>
 801524e:	0002      	movs	r2, r0
 8015250:	000b      	movs	r3, r1
 8015252:	0020      	movs	r0, r4
 8015254:	0029      	movs	r1, r5
 8015256:	f7ed f9ef 	bl	8002638 <__aeabi_dsub>
 801525a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801525c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801525e:	3301      	adds	r3, #1
 8015260:	9308      	str	r3, [sp, #32]
 8015262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015264:	0004      	movs	r4, r0
 8015266:	3330      	adds	r3, #48	; 0x30
 8015268:	7013      	strb	r3, [r2, #0]
 801526a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801526c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801526e:	000d      	movs	r5, r1
 8015270:	f7eb f8f8 	bl	8000464 <__aeabi_dcmplt>
 8015274:	2800      	cmp	r0, #0
 8015276:	d175      	bne.n	8015364 <_dtoa_r+0x67c>
 8015278:	0022      	movs	r2, r4
 801527a:	002b      	movs	r3, r5
 801527c:	2000      	movs	r0, #0
 801527e:	4940      	ldr	r1, [pc, #256]	; (8015380 <_dtoa_r+0x698>)
 8015280:	f7ed f9da 	bl	8002638 <__aeabi_dsub>
 8015284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015288:	f7eb f8ec 	bl	8000464 <__aeabi_dcmplt>
 801528c:	2800      	cmp	r0, #0
 801528e:	d000      	beq.n	8015292 <_dtoa_r+0x5aa>
 8015290:	e0d2      	b.n	8015438 <_dtoa_r+0x750>
 8015292:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015294:	9a08      	ldr	r2, [sp, #32]
 8015296:	4293      	cmp	r3, r2
 8015298:	d100      	bne.n	801529c <_dtoa_r+0x5b4>
 801529a:	e770      	b.n	801517e <_dtoa_r+0x496>
 801529c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801529e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80152a0:	2200      	movs	r2, #0
 80152a2:	4b38      	ldr	r3, [pc, #224]	; (8015384 <_dtoa_r+0x69c>)
 80152a4:	f7ec ff5c 	bl	8002160 <__aeabi_dmul>
 80152a8:	4b36      	ldr	r3, [pc, #216]	; (8015384 <_dtoa_r+0x69c>)
 80152aa:	9010      	str	r0, [sp, #64]	; 0x40
 80152ac:	9111      	str	r1, [sp, #68]	; 0x44
 80152ae:	2200      	movs	r2, #0
 80152b0:	0020      	movs	r0, r4
 80152b2:	0029      	movs	r1, r5
 80152b4:	f7ec ff54 	bl	8002160 <__aeabi_dmul>
 80152b8:	9b08      	ldr	r3, [sp, #32]
 80152ba:	0004      	movs	r4, r0
 80152bc:	000d      	movs	r5, r1
 80152be:	9317      	str	r3, [sp, #92]	; 0x5c
 80152c0:	e7be      	b.n	8015240 <_dtoa_r+0x558>
 80152c2:	9808      	ldr	r0, [sp, #32]
 80152c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152c6:	f7ec ff4b 	bl	8002160 <__aeabi_dmul>
 80152ca:	9a06      	ldr	r2, [sp, #24]
 80152cc:	9b06      	ldr	r3, [sp, #24]
 80152ce:	4694      	mov	ip, r2
 80152d0:	9308      	str	r3, [sp, #32]
 80152d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152d4:	9010      	str	r0, [sp, #64]	; 0x40
 80152d6:	9111      	str	r1, [sp, #68]	; 0x44
 80152d8:	4463      	add	r3, ip
 80152da:	9319      	str	r3, [sp, #100]	; 0x64
 80152dc:	0029      	movs	r1, r5
 80152de:	0020      	movs	r0, r4
 80152e0:	f7ed fd5a 	bl	8002d98 <__aeabi_d2iz>
 80152e4:	9017      	str	r0, [sp, #92]	; 0x5c
 80152e6:	f7ed fd8d 	bl	8002e04 <__aeabi_i2d>
 80152ea:	0002      	movs	r2, r0
 80152ec:	000b      	movs	r3, r1
 80152ee:	0020      	movs	r0, r4
 80152f0:	0029      	movs	r1, r5
 80152f2:	f7ed f9a1 	bl	8002638 <__aeabi_dsub>
 80152f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152f8:	9a08      	ldr	r2, [sp, #32]
 80152fa:	3330      	adds	r3, #48	; 0x30
 80152fc:	7013      	strb	r3, [r2, #0]
 80152fe:	0013      	movs	r3, r2
 8015300:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015302:	3301      	adds	r3, #1
 8015304:	0004      	movs	r4, r0
 8015306:	000d      	movs	r5, r1
 8015308:	9308      	str	r3, [sp, #32]
 801530a:	4293      	cmp	r3, r2
 801530c:	d12c      	bne.n	8015368 <_dtoa_r+0x680>
 801530e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015310:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015312:	9a06      	ldr	r2, [sp, #24]
 8015314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015316:	4694      	mov	ip, r2
 8015318:	4463      	add	r3, ip
 801531a:	2200      	movs	r2, #0
 801531c:	9308      	str	r3, [sp, #32]
 801531e:	4b1e      	ldr	r3, [pc, #120]	; (8015398 <_dtoa_r+0x6b0>)
 8015320:	f7eb ffe0 	bl	80012e4 <__aeabi_dadd>
 8015324:	0002      	movs	r2, r0
 8015326:	000b      	movs	r3, r1
 8015328:	0020      	movs	r0, r4
 801532a:	0029      	movs	r1, r5
 801532c:	f7eb f8ae 	bl	800048c <__aeabi_dcmpgt>
 8015330:	2800      	cmp	r0, #0
 8015332:	d000      	beq.n	8015336 <_dtoa_r+0x64e>
 8015334:	e080      	b.n	8015438 <_dtoa_r+0x750>
 8015336:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801533a:	2000      	movs	r0, #0
 801533c:	4916      	ldr	r1, [pc, #88]	; (8015398 <_dtoa_r+0x6b0>)
 801533e:	f7ed f97b 	bl	8002638 <__aeabi_dsub>
 8015342:	0002      	movs	r2, r0
 8015344:	000b      	movs	r3, r1
 8015346:	0020      	movs	r0, r4
 8015348:	0029      	movs	r1, r5
 801534a:	f7eb f88b 	bl	8000464 <__aeabi_dcmplt>
 801534e:	2800      	cmp	r0, #0
 8015350:	d100      	bne.n	8015354 <_dtoa_r+0x66c>
 8015352:	e714      	b.n	801517e <_dtoa_r+0x496>
 8015354:	9b08      	ldr	r3, [sp, #32]
 8015356:	001a      	movs	r2, r3
 8015358:	3a01      	subs	r2, #1
 801535a:	9208      	str	r2, [sp, #32]
 801535c:	7812      	ldrb	r2, [r2, #0]
 801535e:	2a30      	cmp	r2, #48	; 0x30
 8015360:	d0f8      	beq.n	8015354 <_dtoa_r+0x66c>
 8015362:	9308      	str	r3, [sp, #32]
 8015364:	9602      	str	r6, [sp, #8]
 8015366:	e055      	b.n	8015414 <_dtoa_r+0x72c>
 8015368:	2200      	movs	r2, #0
 801536a:	4b06      	ldr	r3, [pc, #24]	; (8015384 <_dtoa_r+0x69c>)
 801536c:	f7ec fef8 	bl	8002160 <__aeabi_dmul>
 8015370:	0004      	movs	r4, r0
 8015372:	000d      	movs	r5, r1
 8015374:	e7b2      	b.n	80152dc <_dtoa_r+0x5f4>
 8015376:	46c0      	nop			; (mov r8, r8)
 8015378:	080185d8 	.word	0x080185d8
 801537c:	080185b0 	.word	0x080185b0
 8015380:	3ff00000 	.word	0x3ff00000
 8015384:	40240000 	.word	0x40240000
 8015388:	401c0000 	.word	0x401c0000
 801538c:	fcc00000 	.word	0xfcc00000
 8015390:	40140000 	.word	0x40140000
 8015394:	7cc00000 	.word	0x7cc00000
 8015398:	3fe00000 	.word	0x3fe00000
 801539c:	9b07      	ldr	r3, [sp, #28]
 801539e:	9e06      	ldr	r6, [sp, #24]
 80153a0:	3b01      	subs	r3, #1
 80153a2:	199b      	adds	r3, r3, r6
 80153a4:	930c      	str	r3, [sp, #48]	; 0x30
 80153a6:	9c08      	ldr	r4, [sp, #32]
 80153a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80153aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153ae:	0020      	movs	r0, r4
 80153b0:	0029      	movs	r1, r5
 80153b2:	f7ec fad3 	bl	800195c <__aeabi_ddiv>
 80153b6:	f7ed fcef 	bl	8002d98 <__aeabi_d2iz>
 80153ba:	9007      	str	r0, [sp, #28]
 80153bc:	f7ed fd22 	bl	8002e04 <__aeabi_i2d>
 80153c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153c4:	f7ec fecc 	bl	8002160 <__aeabi_dmul>
 80153c8:	0002      	movs	r2, r0
 80153ca:	000b      	movs	r3, r1
 80153cc:	0020      	movs	r0, r4
 80153ce:	0029      	movs	r1, r5
 80153d0:	f7ed f932 	bl	8002638 <__aeabi_dsub>
 80153d4:	0033      	movs	r3, r6
 80153d6:	9a07      	ldr	r2, [sp, #28]
 80153d8:	3601      	adds	r6, #1
 80153da:	3230      	adds	r2, #48	; 0x30
 80153dc:	701a      	strb	r2, [r3, #0]
 80153de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153e0:	9608      	str	r6, [sp, #32]
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d139      	bne.n	801545a <_dtoa_r+0x772>
 80153e6:	0002      	movs	r2, r0
 80153e8:	000b      	movs	r3, r1
 80153ea:	f7eb ff7b 	bl	80012e4 <__aeabi_dadd>
 80153ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153f2:	0004      	movs	r4, r0
 80153f4:	000d      	movs	r5, r1
 80153f6:	f7eb f849 	bl	800048c <__aeabi_dcmpgt>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	d11b      	bne.n	8015436 <_dtoa_r+0x74e>
 80153fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015402:	0020      	movs	r0, r4
 8015404:	0029      	movs	r1, r5
 8015406:	f7eb f827 	bl	8000458 <__aeabi_dcmpeq>
 801540a:	2800      	cmp	r0, #0
 801540c:	d002      	beq.n	8015414 <_dtoa_r+0x72c>
 801540e:	9b07      	ldr	r3, [sp, #28]
 8015410:	07db      	lsls	r3, r3, #31
 8015412:	d410      	bmi.n	8015436 <_dtoa_r+0x74e>
 8015414:	0038      	movs	r0, r7
 8015416:	9905      	ldr	r1, [sp, #20]
 8015418:	f000 fae4 	bl	80159e4 <_Bfree>
 801541c:	2300      	movs	r3, #0
 801541e:	9a08      	ldr	r2, [sp, #32]
 8015420:	9802      	ldr	r0, [sp, #8]
 8015422:	7013      	strb	r3, [r2, #0]
 8015424:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015426:	3001      	adds	r0, #1
 8015428:	6018      	str	r0, [r3, #0]
 801542a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801542c:	2b00      	cmp	r3, #0
 801542e:	d100      	bne.n	8015432 <_dtoa_r+0x74a>
 8015430:	e4a6      	b.n	8014d80 <_dtoa_r+0x98>
 8015432:	601a      	str	r2, [r3, #0]
 8015434:	e4a4      	b.n	8014d80 <_dtoa_r+0x98>
 8015436:	9e02      	ldr	r6, [sp, #8]
 8015438:	9b08      	ldr	r3, [sp, #32]
 801543a:	9308      	str	r3, [sp, #32]
 801543c:	3b01      	subs	r3, #1
 801543e:	781a      	ldrb	r2, [r3, #0]
 8015440:	2a39      	cmp	r2, #57	; 0x39
 8015442:	d106      	bne.n	8015452 <_dtoa_r+0x76a>
 8015444:	9a06      	ldr	r2, [sp, #24]
 8015446:	429a      	cmp	r2, r3
 8015448:	d1f7      	bne.n	801543a <_dtoa_r+0x752>
 801544a:	2230      	movs	r2, #48	; 0x30
 801544c:	9906      	ldr	r1, [sp, #24]
 801544e:	3601      	adds	r6, #1
 8015450:	700a      	strb	r2, [r1, #0]
 8015452:	781a      	ldrb	r2, [r3, #0]
 8015454:	3201      	adds	r2, #1
 8015456:	701a      	strb	r2, [r3, #0]
 8015458:	e784      	b.n	8015364 <_dtoa_r+0x67c>
 801545a:	2200      	movs	r2, #0
 801545c:	4baa      	ldr	r3, [pc, #680]	; (8015708 <_dtoa_r+0xa20>)
 801545e:	f7ec fe7f 	bl	8002160 <__aeabi_dmul>
 8015462:	2200      	movs	r2, #0
 8015464:	2300      	movs	r3, #0
 8015466:	0004      	movs	r4, r0
 8015468:	000d      	movs	r5, r1
 801546a:	f7ea fff5 	bl	8000458 <__aeabi_dcmpeq>
 801546e:	2800      	cmp	r0, #0
 8015470:	d09b      	beq.n	80153aa <_dtoa_r+0x6c2>
 8015472:	e7cf      	b.n	8015414 <_dtoa_r+0x72c>
 8015474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015476:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801547a:	2d00      	cmp	r5, #0
 801547c:	d012      	beq.n	80154a4 <_dtoa_r+0x7bc>
 801547e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015480:	2a01      	cmp	r2, #1
 8015482:	dc66      	bgt.n	8015552 <_dtoa_r+0x86a>
 8015484:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015486:	2a00      	cmp	r2, #0
 8015488:	d05d      	beq.n	8015546 <_dtoa_r+0x85e>
 801548a:	4aa0      	ldr	r2, [pc, #640]	; (801570c <_dtoa_r+0xa24>)
 801548c:	189b      	adds	r3, r3, r2
 801548e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015490:	2101      	movs	r1, #1
 8015492:	18d2      	adds	r2, r2, r3
 8015494:	920a      	str	r2, [sp, #40]	; 0x28
 8015496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015498:	0038      	movs	r0, r7
 801549a:	18d3      	adds	r3, r2, r3
 801549c:	930d      	str	r3, [sp, #52]	; 0x34
 801549e:	f000 fb51 	bl	8015b44 <__i2b>
 80154a2:	0005      	movs	r5, r0
 80154a4:	2c00      	cmp	r4, #0
 80154a6:	dd0e      	ble.n	80154c6 <_dtoa_r+0x7de>
 80154a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	dd0b      	ble.n	80154c6 <_dtoa_r+0x7de>
 80154ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154b0:	0023      	movs	r3, r4
 80154b2:	4294      	cmp	r4, r2
 80154b4:	dd00      	ble.n	80154b8 <_dtoa_r+0x7d0>
 80154b6:	0013      	movs	r3, r2
 80154b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154ba:	1ae4      	subs	r4, r4, r3
 80154bc:	1ad2      	subs	r2, r2, r3
 80154be:	920a      	str	r2, [sp, #40]	; 0x28
 80154c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154c2:	1ad3      	subs	r3, r2, r3
 80154c4:	930d      	str	r3, [sp, #52]	; 0x34
 80154c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d01f      	beq.n	801550c <_dtoa_r+0x824>
 80154cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d054      	beq.n	801557c <_dtoa_r+0x894>
 80154d2:	2e00      	cmp	r6, #0
 80154d4:	dd11      	ble.n	80154fa <_dtoa_r+0x812>
 80154d6:	0029      	movs	r1, r5
 80154d8:	0032      	movs	r2, r6
 80154da:	0038      	movs	r0, r7
 80154dc:	f000 fbf8 	bl	8015cd0 <__pow5mult>
 80154e0:	9a05      	ldr	r2, [sp, #20]
 80154e2:	0001      	movs	r1, r0
 80154e4:	0005      	movs	r5, r0
 80154e6:	0038      	movs	r0, r7
 80154e8:	f000 fb42 	bl	8015b70 <__multiply>
 80154ec:	9905      	ldr	r1, [sp, #20]
 80154ee:	9014      	str	r0, [sp, #80]	; 0x50
 80154f0:	0038      	movs	r0, r7
 80154f2:	f000 fa77 	bl	80159e4 <_Bfree>
 80154f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80154f8:	9305      	str	r3, [sp, #20]
 80154fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154fc:	1b9a      	subs	r2, r3, r6
 80154fe:	42b3      	cmp	r3, r6
 8015500:	d004      	beq.n	801550c <_dtoa_r+0x824>
 8015502:	0038      	movs	r0, r7
 8015504:	9905      	ldr	r1, [sp, #20]
 8015506:	f000 fbe3 	bl	8015cd0 <__pow5mult>
 801550a:	9005      	str	r0, [sp, #20]
 801550c:	2101      	movs	r1, #1
 801550e:	0038      	movs	r0, r7
 8015510:	f000 fb18 	bl	8015b44 <__i2b>
 8015514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015516:	0006      	movs	r6, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	dd31      	ble.n	8015580 <_dtoa_r+0x898>
 801551c:	001a      	movs	r2, r3
 801551e:	0001      	movs	r1, r0
 8015520:	0038      	movs	r0, r7
 8015522:	f000 fbd5 	bl	8015cd0 <__pow5mult>
 8015526:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015528:	0006      	movs	r6, r0
 801552a:	2b01      	cmp	r3, #1
 801552c:	dd2d      	ble.n	801558a <_dtoa_r+0x8a2>
 801552e:	2300      	movs	r3, #0
 8015530:	930e      	str	r3, [sp, #56]	; 0x38
 8015532:	6933      	ldr	r3, [r6, #16]
 8015534:	3303      	adds	r3, #3
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	18f3      	adds	r3, r6, r3
 801553a:	6858      	ldr	r0, [r3, #4]
 801553c:	f000 faba 	bl	8015ab4 <__hi0bits>
 8015540:	2320      	movs	r3, #32
 8015542:	1a18      	subs	r0, r3, r0
 8015544:	e039      	b.n	80155ba <_dtoa_r+0x8d2>
 8015546:	2336      	movs	r3, #54	; 0x36
 8015548:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801554a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801554c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801554e:	1a9b      	subs	r3, r3, r2
 8015550:	e79d      	b.n	801548e <_dtoa_r+0x7a6>
 8015552:	9b07      	ldr	r3, [sp, #28]
 8015554:	1e5e      	subs	r6, r3, #1
 8015556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015558:	42b3      	cmp	r3, r6
 801555a:	db07      	blt.n	801556c <_dtoa_r+0x884>
 801555c:	1b9e      	subs	r6, r3, r6
 801555e:	9b07      	ldr	r3, [sp, #28]
 8015560:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015562:	2b00      	cmp	r3, #0
 8015564:	da93      	bge.n	801548e <_dtoa_r+0x7a6>
 8015566:	1ae4      	subs	r4, r4, r3
 8015568:	2300      	movs	r3, #0
 801556a:	e790      	b.n	801548e <_dtoa_r+0x7a6>
 801556c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801556e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015570:	1af3      	subs	r3, r6, r3
 8015572:	18d3      	adds	r3, r2, r3
 8015574:	960e      	str	r6, [sp, #56]	; 0x38
 8015576:	9315      	str	r3, [sp, #84]	; 0x54
 8015578:	2600      	movs	r6, #0
 801557a:	e7f0      	b.n	801555e <_dtoa_r+0x876>
 801557c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801557e:	e7c0      	b.n	8015502 <_dtoa_r+0x81a>
 8015580:	2300      	movs	r3, #0
 8015582:	930e      	str	r3, [sp, #56]	; 0x38
 8015584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015586:	2b01      	cmp	r3, #1
 8015588:	dc13      	bgt.n	80155b2 <_dtoa_r+0x8ca>
 801558a:	2300      	movs	r3, #0
 801558c:	930e      	str	r3, [sp, #56]	; 0x38
 801558e:	9b08      	ldr	r3, [sp, #32]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d10e      	bne.n	80155b2 <_dtoa_r+0x8ca>
 8015594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015596:	031b      	lsls	r3, r3, #12
 8015598:	d10b      	bne.n	80155b2 <_dtoa_r+0x8ca>
 801559a:	4b5d      	ldr	r3, [pc, #372]	; (8015710 <_dtoa_r+0xa28>)
 801559c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801559e:	4213      	tst	r3, r2
 80155a0:	d007      	beq.n	80155b2 <_dtoa_r+0x8ca>
 80155a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155a4:	3301      	adds	r3, #1
 80155a6:	930a      	str	r3, [sp, #40]	; 0x28
 80155a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155aa:	3301      	adds	r3, #1
 80155ac:	930d      	str	r3, [sp, #52]	; 0x34
 80155ae:	2301      	movs	r3, #1
 80155b0:	930e      	str	r3, [sp, #56]	; 0x38
 80155b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155b4:	2001      	movs	r0, #1
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d1bb      	bne.n	8015532 <_dtoa_r+0x84a>
 80155ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155bc:	221f      	movs	r2, #31
 80155be:	1818      	adds	r0, r3, r0
 80155c0:	0003      	movs	r3, r0
 80155c2:	4013      	ands	r3, r2
 80155c4:	4210      	tst	r0, r2
 80155c6:	d046      	beq.n	8015656 <_dtoa_r+0x96e>
 80155c8:	3201      	adds	r2, #1
 80155ca:	1ad2      	subs	r2, r2, r3
 80155cc:	2a04      	cmp	r2, #4
 80155ce:	dd3f      	ble.n	8015650 <_dtoa_r+0x968>
 80155d0:	221c      	movs	r2, #28
 80155d2:	1ad3      	subs	r3, r2, r3
 80155d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155d6:	18e4      	adds	r4, r4, r3
 80155d8:	18d2      	adds	r2, r2, r3
 80155da:	920a      	str	r2, [sp, #40]	; 0x28
 80155dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155de:	18d3      	adds	r3, r2, r3
 80155e0:	930d      	str	r3, [sp, #52]	; 0x34
 80155e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	dd05      	ble.n	80155f4 <_dtoa_r+0x90c>
 80155e8:	001a      	movs	r2, r3
 80155ea:	0038      	movs	r0, r7
 80155ec:	9905      	ldr	r1, [sp, #20]
 80155ee:	f000 fbcb 	bl	8015d88 <__lshift>
 80155f2:	9005      	str	r0, [sp, #20]
 80155f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	dd05      	ble.n	8015606 <_dtoa_r+0x91e>
 80155fa:	0031      	movs	r1, r6
 80155fc:	001a      	movs	r2, r3
 80155fe:	0038      	movs	r0, r7
 8015600:	f000 fbc2 	bl	8015d88 <__lshift>
 8015604:	0006      	movs	r6, r0
 8015606:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015608:	2b00      	cmp	r3, #0
 801560a:	d026      	beq.n	801565a <_dtoa_r+0x972>
 801560c:	0031      	movs	r1, r6
 801560e:	9805      	ldr	r0, [sp, #20]
 8015610:	f000 fc28 	bl	8015e64 <__mcmp>
 8015614:	2800      	cmp	r0, #0
 8015616:	da20      	bge.n	801565a <_dtoa_r+0x972>
 8015618:	9b02      	ldr	r3, [sp, #8]
 801561a:	220a      	movs	r2, #10
 801561c:	3b01      	subs	r3, #1
 801561e:	9302      	str	r3, [sp, #8]
 8015620:	0038      	movs	r0, r7
 8015622:	2300      	movs	r3, #0
 8015624:	9905      	ldr	r1, [sp, #20]
 8015626:	f000 fa01 	bl	8015a2c <__multadd>
 801562a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801562c:	9005      	str	r0, [sp, #20]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d100      	bne.n	8015634 <_dtoa_r+0x94c>
 8015632:	e166      	b.n	8015902 <_dtoa_r+0xc1a>
 8015634:	2300      	movs	r3, #0
 8015636:	0029      	movs	r1, r5
 8015638:	220a      	movs	r2, #10
 801563a:	0038      	movs	r0, r7
 801563c:	f000 f9f6 	bl	8015a2c <__multadd>
 8015640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015642:	0005      	movs	r5, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	dc47      	bgt.n	80156d8 <_dtoa_r+0x9f0>
 8015648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801564a:	2b02      	cmp	r3, #2
 801564c:	dc0d      	bgt.n	801566a <_dtoa_r+0x982>
 801564e:	e043      	b.n	80156d8 <_dtoa_r+0x9f0>
 8015650:	2a04      	cmp	r2, #4
 8015652:	d0c6      	beq.n	80155e2 <_dtoa_r+0x8fa>
 8015654:	0013      	movs	r3, r2
 8015656:	331c      	adds	r3, #28
 8015658:	e7bc      	b.n	80155d4 <_dtoa_r+0x8ec>
 801565a:	9b07      	ldr	r3, [sp, #28]
 801565c:	2b00      	cmp	r3, #0
 801565e:	dc35      	bgt.n	80156cc <_dtoa_r+0x9e4>
 8015660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015662:	2b02      	cmp	r3, #2
 8015664:	dd32      	ble.n	80156cc <_dtoa_r+0x9e4>
 8015666:	9b07      	ldr	r3, [sp, #28]
 8015668:	930c      	str	r3, [sp, #48]	; 0x30
 801566a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10c      	bne.n	801568a <_dtoa_r+0x9a2>
 8015670:	0031      	movs	r1, r6
 8015672:	2205      	movs	r2, #5
 8015674:	0038      	movs	r0, r7
 8015676:	f000 f9d9 	bl	8015a2c <__multadd>
 801567a:	0006      	movs	r6, r0
 801567c:	0001      	movs	r1, r0
 801567e:	9805      	ldr	r0, [sp, #20]
 8015680:	f000 fbf0 	bl	8015e64 <__mcmp>
 8015684:	2800      	cmp	r0, #0
 8015686:	dd00      	ble.n	801568a <_dtoa_r+0x9a2>
 8015688:	e5a5      	b.n	80151d6 <_dtoa_r+0x4ee>
 801568a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801568c:	43db      	mvns	r3, r3
 801568e:	9302      	str	r3, [sp, #8]
 8015690:	9b06      	ldr	r3, [sp, #24]
 8015692:	9308      	str	r3, [sp, #32]
 8015694:	2400      	movs	r4, #0
 8015696:	0031      	movs	r1, r6
 8015698:	0038      	movs	r0, r7
 801569a:	f000 f9a3 	bl	80159e4 <_Bfree>
 801569e:	2d00      	cmp	r5, #0
 80156a0:	d100      	bne.n	80156a4 <_dtoa_r+0x9bc>
 80156a2:	e6b7      	b.n	8015414 <_dtoa_r+0x72c>
 80156a4:	2c00      	cmp	r4, #0
 80156a6:	d005      	beq.n	80156b4 <_dtoa_r+0x9cc>
 80156a8:	42ac      	cmp	r4, r5
 80156aa:	d003      	beq.n	80156b4 <_dtoa_r+0x9cc>
 80156ac:	0021      	movs	r1, r4
 80156ae:	0038      	movs	r0, r7
 80156b0:	f000 f998 	bl	80159e4 <_Bfree>
 80156b4:	0029      	movs	r1, r5
 80156b6:	0038      	movs	r0, r7
 80156b8:	f000 f994 	bl	80159e4 <_Bfree>
 80156bc:	e6aa      	b.n	8015414 <_dtoa_r+0x72c>
 80156be:	2600      	movs	r6, #0
 80156c0:	0035      	movs	r5, r6
 80156c2:	e7e2      	b.n	801568a <_dtoa_r+0x9a2>
 80156c4:	9602      	str	r6, [sp, #8]
 80156c6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80156c8:	0035      	movs	r5, r6
 80156ca:	e584      	b.n	80151d6 <_dtoa_r+0x4ee>
 80156cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d100      	bne.n	80156d4 <_dtoa_r+0x9ec>
 80156d2:	e0ce      	b.n	8015872 <_dtoa_r+0xb8a>
 80156d4:	9b07      	ldr	r3, [sp, #28]
 80156d6:	930c      	str	r3, [sp, #48]	; 0x30
 80156d8:	2c00      	cmp	r4, #0
 80156da:	dd05      	ble.n	80156e8 <_dtoa_r+0xa00>
 80156dc:	0029      	movs	r1, r5
 80156de:	0022      	movs	r2, r4
 80156e0:	0038      	movs	r0, r7
 80156e2:	f000 fb51 	bl	8015d88 <__lshift>
 80156e6:	0005      	movs	r5, r0
 80156e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156ea:	0028      	movs	r0, r5
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d022      	beq.n	8015736 <_dtoa_r+0xa4e>
 80156f0:	0038      	movs	r0, r7
 80156f2:	6869      	ldr	r1, [r5, #4]
 80156f4:	f000 f932 	bl	801595c <_Balloc>
 80156f8:	1e04      	subs	r4, r0, #0
 80156fa:	d10f      	bne.n	801571c <_dtoa_r+0xa34>
 80156fc:	0002      	movs	r2, r0
 80156fe:	4b05      	ldr	r3, [pc, #20]	; (8015714 <_dtoa_r+0xa2c>)
 8015700:	4905      	ldr	r1, [pc, #20]	; (8015718 <_dtoa_r+0xa30>)
 8015702:	f7ff fb06 	bl	8014d12 <_dtoa_r+0x2a>
 8015706:	46c0      	nop			; (mov r8, r8)
 8015708:	40240000 	.word	0x40240000
 801570c:	00000433 	.word	0x00000433
 8015710:	7ff00000 	.word	0x7ff00000
 8015714:	0801853f 	.word	0x0801853f
 8015718:	000002ea 	.word	0x000002ea
 801571c:	0029      	movs	r1, r5
 801571e:	692b      	ldr	r3, [r5, #16]
 8015720:	310c      	adds	r1, #12
 8015722:	1c9a      	adds	r2, r3, #2
 8015724:	0092      	lsls	r2, r2, #2
 8015726:	300c      	adds	r0, #12
 8015728:	f7fe fcbe 	bl	80140a8 <memcpy>
 801572c:	2201      	movs	r2, #1
 801572e:	0021      	movs	r1, r4
 8015730:	0038      	movs	r0, r7
 8015732:	f000 fb29 	bl	8015d88 <__lshift>
 8015736:	9b06      	ldr	r3, [sp, #24]
 8015738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801573a:	930a      	str	r3, [sp, #40]	; 0x28
 801573c:	3b01      	subs	r3, #1
 801573e:	189b      	adds	r3, r3, r2
 8015740:	2201      	movs	r2, #1
 8015742:	002c      	movs	r4, r5
 8015744:	0005      	movs	r5, r0
 8015746:	9314      	str	r3, [sp, #80]	; 0x50
 8015748:	9b08      	ldr	r3, [sp, #32]
 801574a:	4013      	ands	r3, r2
 801574c:	930f      	str	r3, [sp, #60]	; 0x3c
 801574e:	0031      	movs	r1, r6
 8015750:	9805      	ldr	r0, [sp, #20]
 8015752:	f7ff fa3d 	bl	8014bd0 <quorem>
 8015756:	0003      	movs	r3, r0
 8015758:	0021      	movs	r1, r4
 801575a:	3330      	adds	r3, #48	; 0x30
 801575c:	900d      	str	r0, [sp, #52]	; 0x34
 801575e:	9805      	ldr	r0, [sp, #20]
 8015760:	9307      	str	r3, [sp, #28]
 8015762:	f000 fb7f 	bl	8015e64 <__mcmp>
 8015766:	002a      	movs	r2, r5
 8015768:	900e      	str	r0, [sp, #56]	; 0x38
 801576a:	0031      	movs	r1, r6
 801576c:	0038      	movs	r0, r7
 801576e:	f000 fb95 	bl	8015e9c <__mdiff>
 8015772:	68c3      	ldr	r3, [r0, #12]
 8015774:	9008      	str	r0, [sp, #32]
 8015776:	9310      	str	r3, [sp, #64]	; 0x40
 8015778:	2301      	movs	r3, #1
 801577a:	930c      	str	r3, [sp, #48]	; 0x30
 801577c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801577e:	2b00      	cmp	r3, #0
 8015780:	d104      	bne.n	801578c <_dtoa_r+0xaa4>
 8015782:	0001      	movs	r1, r0
 8015784:	9805      	ldr	r0, [sp, #20]
 8015786:	f000 fb6d 	bl	8015e64 <__mcmp>
 801578a:	900c      	str	r0, [sp, #48]	; 0x30
 801578c:	0038      	movs	r0, r7
 801578e:	9908      	ldr	r1, [sp, #32]
 8015790:	f000 f928 	bl	80159e4 <_Bfree>
 8015794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015798:	3301      	adds	r3, #1
 801579a:	9308      	str	r3, [sp, #32]
 801579c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801579e:	4313      	orrs	r3, r2
 80157a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80157a2:	4313      	orrs	r3, r2
 80157a4:	d10c      	bne.n	80157c0 <_dtoa_r+0xad8>
 80157a6:	9b07      	ldr	r3, [sp, #28]
 80157a8:	2b39      	cmp	r3, #57	; 0x39
 80157aa:	d026      	beq.n	80157fa <_dtoa_r+0xb12>
 80157ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	dd02      	ble.n	80157b8 <_dtoa_r+0xad0>
 80157b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157b4:	3331      	adds	r3, #49	; 0x31
 80157b6:	9307      	str	r3, [sp, #28]
 80157b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157ba:	9a07      	ldr	r2, [sp, #28]
 80157bc:	701a      	strb	r2, [r3, #0]
 80157be:	e76a      	b.n	8015696 <_dtoa_r+0x9ae>
 80157c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	db04      	blt.n	80157d0 <_dtoa_r+0xae8>
 80157c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80157c8:	4313      	orrs	r3, r2
 80157ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80157cc:	4313      	orrs	r3, r2
 80157ce:	d11f      	bne.n	8015810 <_dtoa_r+0xb28>
 80157d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	ddf0      	ble.n	80157b8 <_dtoa_r+0xad0>
 80157d6:	9905      	ldr	r1, [sp, #20]
 80157d8:	2201      	movs	r2, #1
 80157da:	0038      	movs	r0, r7
 80157dc:	f000 fad4 	bl	8015d88 <__lshift>
 80157e0:	0031      	movs	r1, r6
 80157e2:	9005      	str	r0, [sp, #20]
 80157e4:	f000 fb3e 	bl	8015e64 <__mcmp>
 80157e8:	2800      	cmp	r0, #0
 80157ea:	dc03      	bgt.n	80157f4 <_dtoa_r+0xb0c>
 80157ec:	d1e4      	bne.n	80157b8 <_dtoa_r+0xad0>
 80157ee:	9b07      	ldr	r3, [sp, #28]
 80157f0:	07db      	lsls	r3, r3, #31
 80157f2:	d5e1      	bpl.n	80157b8 <_dtoa_r+0xad0>
 80157f4:	9b07      	ldr	r3, [sp, #28]
 80157f6:	2b39      	cmp	r3, #57	; 0x39
 80157f8:	d1db      	bne.n	80157b2 <_dtoa_r+0xaca>
 80157fa:	2339      	movs	r3, #57	; 0x39
 80157fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157fe:	7013      	strb	r3, [r2, #0]
 8015800:	9b08      	ldr	r3, [sp, #32]
 8015802:	9308      	str	r3, [sp, #32]
 8015804:	3b01      	subs	r3, #1
 8015806:	781a      	ldrb	r2, [r3, #0]
 8015808:	2a39      	cmp	r2, #57	; 0x39
 801580a:	d068      	beq.n	80158de <_dtoa_r+0xbf6>
 801580c:	3201      	adds	r2, #1
 801580e:	e7d5      	b.n	80157bc <_dtoa_r+0xad4>
 8015810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015812:	2b00      	cmp	r3, #0
 8015814:	dd07      	ble.n	8015826 <_dtoa_r+0xb3e>
 8015816:	9b07      	ldr	r3, [sp, #28]
 8015818:	2b39      	cmp	r3, #57	; 0x39
 801581a:	d0ee      	beq.n	80157fa <_dtoa_r+0xb12>
 801581c:	9b07      	ldr	r3, [sp, #28]
 801581e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015820:	3301      	adds	r3, #1
 8015822:	7013      	strb	r3, [r2, #0]
 8015824:	e737      	b.n	8015696 <_dtoa_r+0x9ae>
 8015826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015828:	9a07      	ldr	r2, [sp, #28]
 801582a:	701a      	strb	r2, [r3, #0]
 801582c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801582e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015830:	4293      	cmp	r3, r2
 8015832:	d03e      	beq.n	80158b2 <_dtoa_r+0xbca>
 8015834:	2300      	movs	r3, #0
 8015836:	220a      	movs	r2, #10
 8015838:	9905      	ldr	r1, [sp, #20]
 801583a:	0038      	movs	r0, r7
 801583c:	f000 f8f6 	bl	8015a2c <__multadd>
 8015840:	2300      	movs	r3, #0
 8015842:	9005      	str	r0, [sp, #20]
 8015844:	220a      	movs	r2, #10
 8015846:	0021      	movs	r1, r4
 8015848:	0038      	movs	r0, r7
 801584a:	42ac      	cmp	r4, r5
 801584c:	d106      	bne.n	801585c <_dtoa_r+0xb74>
 801584e:	f000 f8ed 	bl	8015a2c <__multadd>
 8015852:	0004      	movs	r4, r0
 8015854:	0005      	movs	r5, r0
 8015856:	9b08      	ldr	r3, [sp, #32]
 8015858:	930a      	str	r3, [sp, #40]	; 0x28
 801585a:	e778      	b.n	801574e <_dtoa_r+0xa66>
 801585c:	f000 f8e6 	bl	8015a2c <__multadd>
 8015860:	0029      	movs	r1, r5
 8015862:	0004      	movs	r4, r0
 8015864:	2300      	movs	r3, #0
 8015866:	220a      	movs	r2, #10
 8015868:	0038      	movs	r0, r7
 801586a:	f000 f8df 	bl	8015a2c <__multadd>
 801586e:	0005      	movs	r5, r0
 8015870:	e7f1      	b.n	8015856 <_dtoa_r+0xb6e>
 8015872:	9b07      	ldr	r3, [sp, #28]
 8015874:	930c      	str	r3, [sp, #48]	; 0x30
 8015876:	2400      	movs	r4, #0
 8015878:	0031      	movs	r1, r6
 801587a:	9805      	ldr	r0, [sp, #20]
 801587c:	f7ff f9a8 	bl	8014bd0 <quorem>
 8015880:	9b06      	ldr	r3, [sp, #24]
 8015882:	3030      	adds	r0, #48	; 0x30
 8015884:	5518      	strb	r0, [r3, r4]
 8015886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015888:	3401      	adds	r4, #1
 801588a:	9007      	str	r0, [sp, #28]
 801588c:	42a3      	cmp	r3, r4
 801588e:	dd07      	ble.n	80158a0 <_dtoa_r+0xbb8>
 8015890:	2300      	movs	r3, #0
 8015892:	220a      	movs	r2, #10
 8015894:	0038      	movs	r0, r7
 8015896:	9905      	ldr	r1, [sp, #20]
 8015898:	f000 f8c8 	bl	8015a2c <__multadd>
 801589c:	9005      	str	r0, [sp, #20]
 801589e:	e7eb      	b.n	8015878 <_dtoa_r+0xb90>
 80158a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158a2:	2001      	movs	r0, #1
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	dd00      	ble.n	80158aa <_dtoa_r+0xbc2>
 80158a8:	0018      	movs	r0, r3
 80158aa:	2400      	movs	r4, #0
 80158ac:	9b06      	ldr	r3, [sp, #24]
 80158ae:	181b      	adds	r3, r3, r0
 80158b0:	9308      	str	r3, [sp, #32]
 80158b2:	9905      	ldr	r1, [sp, #20]
 80158b4:	2201      	movs	r2, #1
 80158b6:	0038      	movs	r0, r7
 80158b8:	f000 fa66 	bl	8015d88 <__lshift>
 80158bc:	0031      	movs	r1, r6
 80158be:	9005      	str	r0, [sp, #20]
 80158c0:	f000 fad0 	bl	8015e64 <__mcmp>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	dc9b      	bgt.n	8015800 <_dtoa_r+0xb18>
 80158c8:	d102      	bne.n	80158d0 <_dtoa_r+0xbe8>
 80158ca:	9b07      	ldr	r3, [sp, #28]
 80158cc:	07db      	lsls	r3, r3, #31
 80158ce:	d497      	bmi.n	8015800 <_dtoa_r+0xb18>
 80158d0:	9b08      	ldr	r3, [sp, #32]
 80158d2:	9308      	str	r3, [sp, #32]
 80158d4:	3b01      	subs	r3, #1
 80158d6:	781a      	ldrb	r2, [r3, #0]
 80158d8:	2a30      	cmp	r2, #48	; 0x30
 80158da:	d0fa      	beq.n	80158d2 <_dtoa_r+0xbea>
 80158dc:	e6db      	b.n	8015696 <_dtoa_r+0x9ae>
 80158de:	9a06      	ldr	r2, [sp, #24]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d18e      	bne.n	8015802 <_dtoa_r+0xb1a>
 80158e4:	9b02      	ldr	r3, [sp, #8]
 80158e6:	3301      	adds	r3, #1
 80158e8:	9302      	str	r3, [sp, #8]
 80158ea:	2331      	movs	r3, #49	; 0x31
 80158ec:	e799      	b.n	8015822 <_dtoa_r+0xb3a>
 80158ee:	4b09      	ldr	r3, [pc, #36]	; (8015914 <_dtoa_r+0xc2c>)
 80158f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80158f2:	9306      	str	r3, [sp, #24]
 80158f4:	4b08      	ldr	r3, [pc, #32]	; (8015918 <_dtoa_r+0xc30>)
 80158f6:	2a00      	cmp	r2, #0
 80158f8:	d001      	beq.n	80158fe <_dtoa_r+0xc16>
 80158fa:	f7ff fa3f 	bl	8014d7c <_dtoa_r+0x94>
 80158fe:	f7ff fa3f 	bl	8014d80 <_dtoa_r+0x98>
 8015902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015904:	2b00      	cmp	r3, #0
 8015906:	dcb6      	bgt.n	8015876 <_dtoa_r+0xb8e>
 8015908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801590a:	2b02      	cmp	r3, #2
 801590c:	dd00      	ble.n	8015910 <_dtoa_r+0xc28>
 801590e:	e6ac      	b.n	801566a <_dtoa_r+0x982>
 8015910:	e7b1      	b.n	8015876 <_dtoa_r+0xb8e>
 8015912:	46c0      	nop			; (mov r8, r8)
 8015914:	080184c0 	.word	0x080184c0
 8015918:	080184c8 	.word	0x080184c8

0801591c <_localeconv_r>:
 801591c:	4800      	ldr	r0, [pc, #0]	; (8015920 <_localeconv_r+0x4>)
 801591e:	4770      	bx	lr
 8015920:	20003220 	.word	0x20003220

08015924 <memchr>:
 8015924:	b2c9      	uxtb	r1, r1
 8015926:	1882      	adds	r2, r0, r2
 8015928:	4290      	cmp	r0, r2
 801592a:	d101      	bne.n	8015930 <memchr+0xc>
 801592c:	2000      	movs	r0, #0
 801592e:	4770      	bx	lr
 8015930:	7803      	ldrb	r3, [r0, #0]
 8015932:	428b      	cmp	r3, r1
 8015934:	d0fb      	beq.n	801592e <memchr+0xa>
 8015936:	3001      	adds	r0, #1
 8015938:	e7f6      	b.n	8015928 <memchr+0x4>
	...

0801593c <__malloc_lock>:
 801593c:	b510      	push	{r4, lr}
 801593e:	4802      	ldr	r0, [pc, #8]	; (8015948 <__malloc_lock+0xc>)
 8015940:	f000 fd65 	bl	801640e <__retarget_lock_acquire_recursive>
 8015944:	bd10      	pop	{r4, pc}
 8015946:	46c0      	nop			; (mov r8, r8)
 8015948:	20003a88 	.word	0x20003a88

0801594c <__malloc_unlock>:
 801594c:	b510      	push	{r4, lr}
 801594e:	4802      	ldr	r0, [pc, #8]	; (8015958 <__malloc_unlock+0xc>)
 8015950:	f000 fd5e 	bl	8016410 <__retarget_lock_release_recursive>
 8015954:	bd10      	pop	{r4, pc}
 8015956:	46c0      	nop			; (mov r8, r8)
 8015958:	20003a88 	.word	0x20003a88

0801595c <_Balloc>:
 801595c:	b570      	push	{r4, r5, r6, lr}
 801595e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015960:	0006      	movs	r6, r0
 8015962:	000c      	movs	r4, r1
 8015964:	2d00      	cmp	r5, #0
 8015966:	d10e      	bne.n	8015986 <_Balloc+0x2a>
 8015968:	2010      	movs	r0, #16
 801596a:	f7fe fb93 	bl	8014094 <malloc>
 801596e:	1e02      	subs	r2, r0, #0
 8015970:	6270      	str	r0, [r6, #36]	; 0x24
 8015972:	d104      	bne.n	801597e <_Balloc+0x22>
 8015974:	2166      	movs	r1, #102	; 0x66
 8015976:	4b19      	ldr	r3, [pc, #100]	; (80159dc <_Balloc+0x80>)
 8015978:	4819      	ldr	r0, [pc, #100]	; (80159e0 <_Balloc+0x84>)
 801597a:	f000 fd19 	bl	80163b0 <__assert_func>
 801597e:	6045      	str	r5, [r0, #4]
 8015980:	6085      	str	r5, [r0, #8]
 8015982:	6005      	str	r5, [r0, #0]
 8015984:	60c5      	str	r5, [r0, #12]
 8015986:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8015988:	68eb      	ldr	r3, [r5, #12]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d013      	beq.n	80159b6 <_Balloc+0x5a>
 801598e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015990:	00a2      	lsls	r2, r4, #2
 8015992:	68db      	ldr	r3, [r3, #12]
 8015994:	189b      	adds	r3, r3, r2
 8015996:	6818      	ldr	r0, [r3, #0]
 8015998:	2800      	cmp	r0, #0
 801599a:	d118      	bne.n	80159ce <_Balloc+0x72>
 801599c:	2101      	movs	r1, #1
 801599e:	000d      	movs	r5, r1
 80159a0:	40a5      	lsls	r5, r4
 80159a2:	1d6a      	adds	r2, r5, #5
 80159a4:	0030      	movs	r0, r6
 80159a6:	0092      	lsls	r2, r2, #2
 80159a8:	f000 fb74 	bl	8016094 <_calloc_r>
 80159ac:	2800      	cmp	r0, #0
 80159ae:	d00c      	beq.n	80159ca <_Balloc+0x6e>
 80159b0:	6044      	str	r4, [r0, #4]
 80159b2:	6085      	str	r5, [r0, #8]
 80159b4:	e00d      	b.n	80159d2 <_Balloc+0x76>
 80159b6:	2221      	movs	r2, #33	; 0x21
 80159b8:	2104      	movs	r1, #4
 80159ba:	0030      	movs	r0, r6
 80159bc:	f000 fb6a 	bl	8016094 <_calloc_r>
 80159c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80159c2:	60e8      	str	r0, [r5, #12]
 80159c4:	68db      	ldr	r3, [r3, #12]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d1e1      	bne.n	801598e <_Balloc+0x32>
 80159ca:	2000      	movs	r0, #0
 80159cc:	bd70      	pop	{r4, r5, r6, pc}
 80159ce:	6802      	ldr	r2, [r0, #0]
 80159d0:	601a      	str	r2, [r3, #0]
 80159d2:	2300      	movs	r3, #0
 80159d4:	6103      	str	r3, [r0, #16]
 80159d6:	60c3      	str	r3, [r0, #12]
 80159d8:	e7f8      	b.n	80159cc <_Balloc+0x70>
 80159da:	46c0      	nop			; (mov r8, r8)
 80159dc:	080184cd 	.word	0x080184cd
 80159e0:	08018550 	.word	0x08018550

080159e4 <_Bfree>:
 80159e4:	b570      	push	{r4, r5, r6, lr}
 80159e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80159e8:	0005      	movs	r5, r0
 80159ea:	000c      	movs	r4, r1
 80159ec:	2e00      	cmp	r6, #0
 80159ee:	d10e      	bne.n	8015a0e <_Bfree+0x2a>
 80159f0:	2010      	movs	r0, #16
 80159f2:	f7fe fb4f 	bl	8014094 <malloc>
 80159f6:	1e02      	subs	r2, r0, #0
 80159f8:	6268      	str	r0, [r5, #36]	; 0x24
 80159fa:	d104      	bne.n	8015a06 <_Bfree+0x22>
 80159fc:	218a      	movs	r1, #138	; 0x8a
 80159fe:	4b09      	ldr	r3, [pc, #36]	; (8015a24 <_Bfree+0x40>)
 8015a00:	4809      	ldr	r0, [pc, #36]	; (8015a28 <_Bfree+0x44>)
 8015a02:	f000 fcd5 	bl	80163b0 <__assert_func>
 8015a06:	6046      	str	r6, [r0, #4]
 8015a08:	6086      	str	r6, [r0, #8]
 8015a0a:	6006      	str	r6, [r0, #0]
 8015a0c:	60c6      	str	r6, [r0, #12]
 8015a0e:	2c00      	cmp	r4, #0
 8015a10:	d007      	beq.n	8015a22 <_Bfree+0x3e>
 8015a12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015a14:	6862      	ldr	r2, [r4, #4]
 8015a16:	68db      	ldr	r3, [r3, #12]
 8015a18:	0092      	lsls	r2, r2, #2
 8015a1a:	189b      	adds	r3, r3, r2
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	6022      	str	r2, [r4, #0]
 8015a20:	601c      	str	r4, [r3, #0]
 8015a22:	bd70      	pop	{r4, r5, r6, pc}
 8015a24:	080184cd 	.word	0x080184cd
 8015a28:	08018550 	.word	0x08018550

08015a2c <__multadd>:
 8015a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a2e:	000e      	movs	r6, r1
 8015a30:	9001      	str	r0, [sp, #4]
 8015a32:	000c      	movs	r4, r1
 8015a34:	001d      	movs	r5, r3
 8015a36:	2000      	movs	r0, #0
 8015a38:	690f      	ldr	r7, [r1, #16]
 8015a3a:	3614      	adds	r6, #20
 8015a3c:	6833      	ldr	r3, [r6, #0]
 8015a3e:	3001      	adds	r0, #1
 8015a40:	b299      	uxth	r1, r3
 8015a42:	4351      	muls	r1, r2
 8015a44:	0c1b      	lsrs	r3, r3, #16
 8015a46:	4353      	muls	r3, r2
 8015a48:	1949      	adds	r1, r1, r5
 8015a4a:	0c0d      	lsrs	r5, r1, #16
 8015a4c:	195b      	adds	r3, r3, r5
 8015a4e:	0c1d      	lsrs	r5, r3, #16
 8015a50:	b289      	uxth	r1, r1
 8015a52:	041b      	lsls	r3, r3, #16
 8015a54:	185b      	adds	r3, r3, r1
 8015a56:	c608      	stmia	r6!, {r3}
 8015a58:	4287      	cmp	r7, r0
 8015a5a:	dcef      	bgt.n	8015a3c <__multadd+0x10>
 8015a5c:	2d00      	cmp	r5, #0
 8015a5e:	d022      	beq.n	8015aa6 <__multadd+0x7a>
 8015a60:	68a3      	ldr	r3, [r4, #8]
 8015a62:	42bb      	cmp	r3, r7
 8015a64:	dc19      	bgt.n	8015a9a <__multadd+0x6e>
 8015a66:	6863      	ldr	r3, [r4, #4]
 8015a68:	9801      	ldr	r0, [sp, #4]
 8015a6a:	1c59      	adds	r1, r3, #1
 8015a6c:	f7ff ff76 	bl	801595c <_Balloc>
 8015a70:	1e06      	subs	r6, r0, #0
 8015a72:	d105      	bne.n	8015a80 <__multadd+0x54>
 8015a74:	0002      	movs	r2, r0
 8015a76:	21b5      	movs	r1, #181	; 0xb5
 8015a78:	4b0c      	ldr	r3, [pc, #48]	; (8015aac <__multadd+0x80>)
 8015a7a:	480d      	ldr	r0, [pc, #52]	; (8015ab0 <__multadd+0x84>)
 8015a7c:	f000 fc98 	bl	80163b0 <__assert_func>
 8015a80:	0021      	movs	r1, r4
 8015a82:	6923      	ldr	r3, [r4, #16]
 8015a84:	310c      	adds	r1, #12
 8015a86:	1c9a      	adds	r2, r3, #2
 8015a88:	0092      	lsls	r2, r2, #2
 8015a8a:	300c      	adds	r0, #12
 8015a8c:	f7fe fb0c 	bl	80140a8 <memcpy>
 8015a90:	0021      	movs	r1, r4
 8015a92:	9801      	ldr	r0, [sp, #4]
 8015a94:	f7ff ffa6 	bl	80159e4 <_Bfree>
 8015a98:	0034      	movs	r4, r6
 8015a9a:	1d3b      	adds	r3, r7, #4
 8015a9c:	009b      	lsls	r3, r3, #2
 8015a9e:	18e3      	adds	r3, r4, r3
 8015aa0:	605d      	str	r5, [r3, #4]
 8015aa2:	1c7b      	adds	r3, r7, #1
 8015aa4:	6123      	str	r3, [r4, #16]
 8015aa6:	0020      	movs	r0, r4
 8015aa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015aaa:	46c0      	nop			; (mov r8, r8)
 8015aac:	0801853f 	.word	0x0801853f
 8015ab0:	08018550 	.word	0x08018550

08015ab4 <__hi0bits>:
 8015ab4:	0003      	movs	r3, r0
 8015ab6:	0c02      	lsrs	r2, r0, #16
 8015ab8:	2000      	movs	r0, #0
 8015aba:	4282      	cmp	r2, r0
 8015abc:	d101      	bne.n	8015ac2 <__hi0bits+0xe>
 8015abe:	041b      	lsls	r3, r3, #16
 8015ac0:	3010      	adds	r0, #16
 8015ac2:	0e1a      	lsrs	r2, r3, #24
 8015ac4:	d101      	bne.n	8015aca <__hi0bits+0x16>
 8015ac6:	3008      	adds	r0, #8
 8015ac8:	021b      	lsls	r3, r3, #8
 8015aca:	0f1a      	lsrs	r2, r3, #28
 8015acc:	d101      	bne.n	8015ad2 <__hi0bits+0x1e>
 8015ace:	3004      	adds	r0, #4
 8015ad0:	011b      	lsls	r3, r3, #4
 8015ad2:	0f9a      	lsrs	r2, r3, #30
 8015ad4:	d101      	bne.n	8015ada <__hi0bits+0x26>
 8015ad6:	3002      	adds	r0, #2
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	db03      	blt.n	8015ae6 <__hi0bits+0x32>
 8015ade:	3001      	adds	r0, #1
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	d400      	bmi.n	8015ae6 <__hi0bits+0x32>
 8015ae4:	2020      	movs	r0, #32
 8015ae6:	4770      	bx	lr

08015ae8 <__lo0bits>:
 8015ae8:	6803      	ldr	r3, [r0, #0]
 8015aea:	0002      	movs	r2, r0
 8015aec:	2107      	movs	r1, #7
 8015aee:	0018      	movs	r0, r3
 8015af0:	4008      	ands	r0, r1
 8015af2:	420b      	tst	r3, r1
 8015af4:	d00d      	beq.n	8015b12 <__lo0bits+0x2a>
 8015af6:	3906      	subs	r1, #6
 8015af8:	2000      	movs	r0, #0
 8015afa:	420b      	tst	r3, r1
 8015afc:	d105      	bne.n	8015b0a <__lo0bits+0x22>
 8015afe:	3002      	adds	r0, #2
 8015b00:	4203      	tst	r3, r0
 8015b02:	d003      	beq.n	8015b0c <__lo0bits+0x24>
 8015b04:	40cb      	lsrs	r3, r1
 8015b06:	0008      	movs	r0, r1
 8015b08:	6013      	str	r3, [r2, #0]
 8015b0a:	4770      	bx	lr
 8015b0c:	089b      	lsrs	r3, r3, #2
 8015b0e:	6013      	str	r3, [r2, #0]
 8015b10:	e7fb      	b.n	8015b0a <__lo0bits+0x22>
 8015b12:	b299      	uxth	r1, r3
 8015b14:	2900      	cmp	r1, #0
 8015b16:	d101      	bne.n	8015b1c <__lo0bits+0x34>
 8015b18:	2010      	movs	r0, #16
 8015b1a:	0c1b      	lsrs	r3, r3, #16
 8015b1c:	b2d9      	uxtb	r1, r3
 8015b1e:	2900      	cmp	r1, #0
 8015b20:	d101      	bne.n	8015b26 <__lo0bits+0x3e>
 8015b22:	3008      	adds	r0, #8
 8015b24:	0a1b      	lsrs	r3, r3, #8
 8015b26:	0719      	lsls	r1, r3, #28
 8015b28:	d101      	bne.n	8015b2e <__lo0bits+0x46>
 8015b2a:	3004      	adds	r0, #4
 8015b2c:	091b      	lsrs	r3, r3, #4
 8015b2e:	0799      	lsls	r1, r3, #30
 8015b30:	d101      	bne.n	8015b36 <__lo0bits+0x4e>
 8015b32:	3002      	adds	r0, #2
 8015b34:	089b      	lsrs	r3, r3, #2
 8015b36:	07d9      	lsls	r1, r3, #31
 8015b38:	d4e9      	bmi.n	8015b0e <__lo0bits+0x26>
 8015b3a:	3001      	adds	r0, #1
 8015b3c:	085b      	lsrs	r3, r3, #1
 8015b3e:	d1e6      	bne.n	8015b0e <__lo0bits+0x26>
 8015b40:	2020      	movs	r0, #32
 8015b42:	e7e2      	b.n	8015b0a <__lo0bits+0x22>

08015b44 <__i2b>:
 8015b44:	b510      	push	{r4, lr}
 8015b46:	000c      	movs	r4, r1
 8015b48:	2101      	movs	r1, #1
 8015b4a:	f7ff ff07 	bl	801595c <_Balloc>
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	d106      	bne.n	8015b60 <__i2b+0x1c>
 8015b52:	21a0      	movs	r1, #160	; 0xa0
 8015b54:	0002      	movs	r2, r0
 8015b56:	4b04      	ldr	r3, [pc, #16]	; (8015b68 <__i2b+0x24>)
 8015b58:	4804      	ldr	r0, [pc, #16]	; (8015b6c <__i2b+0x28>)
 8015b5a:	0049      	lsls	r1, r1, #1
 8015b5c:	f000 fc28 	bl	80163b0 <__assert_func>
 8015b60:	2301      	movs	r3, #1
 8015b62:	6144      	str	r4, [r0, #20]
 8015b64:	6103      	str	r3, [r0, #16]
 8015b66:	bd10      	pop	{r4, pc}
 8015b68:	0801853f 	.word	0x0801853f
 8015b6c:	08018550 	.word	0x08018550

08015b70 <__multiply>:
 8015b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b72:	690b      	ldr	r3, [r1, #16]
 8015b74:	0014      	movs	r4, r2
 8015b76:	6912      	ldr	r2, [r2, #16]
 8015b78:	000d      	movs	r5, r1
 8015b7a:	b089      	sub	sp, #36	; 0x24
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	da01      	bge.n	8015b84 <__multiply+0x14>
 8015b80:	0025      	movs	r5, r4
 8015b82:	000c      	movs	r4, r1
 8015b84:	692f      	ldr	r7, [r5, #16]
 8015b86:	6926      	ldr	r6, [r4, #16]
 8015b88:	6869      	ldr	r1, [r5, #4]
 8015b8a:	19bb      	adds	r3, r7, r6
 8015b8c:	9302      	str	r3, [sp, #8]
 8015b8e:	68ab      	ldr	r3, [r5, #8]
 8015b90:	19ba      	adds	r2, r7, r6
 8015b92:	4293      	cmp	r3, r2
 8015b94:	da00      	bge.n	8015b98 <__multiply+0x28>
 8015b96:	3101      	adds	r1, #1
 8015b98:	f7ff fee0 	bl	801595c <_Balloc>
 8015b9c:	9001      	str	r0, [sp, #4]
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	d106      	bne.n	8015bb0 <__multiply+0x40>
 8015ba2:	215e      	movs	r1, #94	; 0x5e
 8015ba4:	0002      	movs	r2, r0
 8015ba6:	4b48      	ldr	r3, [pc, #288]	; (8015cc8 <__multiply+0x158>)
 8015ba8:	4848      	ldr	r0, [pc, #288]	; (8015ccc <__multiply+0x15c>)
 8015baa:	31ff      	adds	r1, #255	; 0xff
 8015bac:	f000 fc00 	bl	80163b0 <__assert_func>
 8015bb0:	9b01      	ldr	r3, [sp, #4]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	3314      	adds	r3, #20
 8015bb6:	469c      	mov	ip, r3
 8015bb8:	19bb      	adds	r3, r7, r6
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4463      	add	r3, ip
 8015bbe:	9303      	str	r3, [sp, #12]
 8015bc0:	4663      	mov	r3, ip
 8015bc2:	9903      	ldr	r1, [sp, #12]
 8015bc4:	428b      	cmp	r3, r1
 8015bc6:	d32c      	bcc.n	8015c22 <__multiply+0xb2>
 8015bc8:	002b      	movs	r3, r5
 8015bca:	0022      	movs	r2, r4
 8015bcc:	3314      	adds	r3, #20
 8015bce:	00bf      	lsls	r7, r7, #2
 8015bd0:	3214      	adds	r2, #20
 8015bd2:	9306      	str	r3, [sp, #24]
 8015bd4:	00b6      	lsls	r6, r6, #2
 8015bd6:	19db      	adds	r3, r3, r7
 8015bd8:	9304      	str	r3, [sp, #16]
 8015bda:	1993      	adds	r3, r2, r6
 8015bdc:	9307      	str	r3, [sp, #28]
 8015bde:	2304      	movs	r3, #4
 8015be0:	9305      	str	r3, [sp, #20]
 8015be2:	002b      	movs	r3, r5
 8015be4:	9904      	ldr	r1, [sp, #16]
 8015be6:	3315      	adds	r3, #21
 8015be8:	9200      	str	r2, [sp, #0]
 8015bea:	4299      	cmp	r1, r3
 8015bec:	d305      	bcc.n	8015bfa <__multiply+0x8a>
 8015bee:	1b4b      	subs	r3, r1, r5
 8015bf0:	3b15      	subs	r3, #21
 8015bf2:	089b      	lsrs	r3, r3, #2
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	009b      	lsls	r3, r3, #2
 8015bf8:	9305      	str	r3, [sp, #20]
 8015bfa:	9b07      	ldr	r3, [sp, #28]
 8015bfc:	9a00      	ldr	r2, [sp, #0]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d311      	bcc.n	8015c26 <__multiply+0xb6>
 8015c02:	9b02      	ldr	r3, [sp, #8]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	dd06      	ble.n	8015c16 <__multiply+0xa6>
 8015c08:	9b03      	ldr	r3, [sp, #12]
 8015c0a:	3b04      	subs	r3, #4
 8015c0c:	9303      	str	r3, [sp, #12]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d053      	beq.n	8015cbe <__multiply+0x14e>
 8015c16:	9b01      	ldr	r3, [sp, #4]
 8015c18:	9a02      	ldr	r2, [sp, #8]
 8015c1a:	0018      	movs	r0, r3
 8015c1c:	611a      	str	r2, [r3, #16]
 8015c1e:	b009      	add	sp, #36	; 0x24
 8015c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c22:	c304      	stmia	r3!, {r2}
 8015c24:	e7cd      	b.n	8015bc2 <__multiply+0x52>
 8015c26:	9b00      	ldr	r3, [sp, #0]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	b298      	uxth	r0, r3
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	d01b      	beq.n	8015c68 <__multiply+0xf8>
 8015c30:	4667      	mov	r7, ip
 8015c32:	2400      	movs	r4, #0
 8015c34:	9e06      	ldr	r6, [sp, #24]
 8015c36:	ce02      	ldmia	r6!, {r1}
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	b28b      	uxth	r3, r1
 8015c3c:	4343      	muls	r3, r0
 8015c3e:	b292      	uxth	r2, r2
 8015c40:	189b      	adds	r3, r3, r2
 8015c42:	191b      	adds	r3, r3, r4
 8015c44:	0c0c      	lsrs	r4, r1, #16
 8015c46:	4344      	muls	r4, r0
 8015c48:	683a      	ldr	r2, [r7, #0]
 8015c4a:	0c11      	lsrs	r1, r2, #16
 8015c4c:	1861      	adds	r1, r4, r1
 8015c4e:	0c1c      	lsrs	r4, r3, #16
 8015c50:	1909      	adds	r1, r1, r4
 8015c52:	0c0c      	lsrs	r4, r1, #16
 8015c54:	b29b      	uxth	r3, r3
 8015c56:	0409      	lsls	r1, r1, #16
 8015c58:	430b      	orrs	r3, r1
 8015c5a:	c708      	stmia	r7!, {r3}
 8015c5c:	9b04      	ldr	r3, [sp, #16]
 8015c5e:	42b3      	cmp	r3, r6
 8015c60:	d8e9      	bhi.n	8015c36 <__multiply+0xc6>
 8015c62:	4663      	mov	r3, ip
 8015c64:	9a05      	ldr	r2, [sp, #20]
 8015c66:	509c      	str	r4, [r3, r2]
 8015c68:	9b00      	ldr	r3, [sp, #0]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	0c1e      	lsrs	r6, r3, #16
 8015c6e:	d020      	beq.n	8015cb2 <__multiply+0x142>
 8015c70:	4663      	mov	r3, ip
 8015c72:	002c      	movs	r4, r5
 8015c74:	4660      	mov	r0, ip
 8015c76:	2700      	movs	r7, #0
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	3414      	adds	r4, #20
 8015c7c:	6822      	ldr	r2, [r4, #0]
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	b291      	uxth	r1, r2
 8015c82:	4371      	muls	r1, r6
 8015c84:	6802      	ldr	r2, [r0, #0]
 8015c86:	0c12      	lsrs	r2, r2, #16
 8015c88:	1889      	adds	r1, r1, r2
 8015c8a:	19cf      	adds	r7, r1, r7
 8015c8c:	0439      	lsls	r1, r7, #16
 8015c8e:	430b      	orrs	r3, r1
 8015c90:	6003      	str	r3, [r0, #0]
 8015c92:	cc02      	ldmia	r4!, {r1}
 8015c94:	6843      	ldr	r3, [r0, #4]
 8015c96:	0c09      	lsrs	r1, r1, #16
 8015c98:	4371      	muls	r1, r6
 8015c9a:	b29b      	uxth	r3, r3
 8015c9c:	0c3f      	lsrs	r7, r7, #16
 8015c9e:	18cb      	adds	r3, r1, r3
 8015ca0:	9a04      	ldr	r2, [sp, #16]
 8015ca2:	19db      	adds	r3, r3, r7
 8015ca4:	0c1f      	lsrs	r7, r3, #16
 8015ca6:	3004      	adds	r0, #4
 8015ca8:	42a2      	cmp	r2, r4
 8015caa:	d8e7      	bhi.n	8015c7c <__multiply+0x10c>
 8015cac:	4662      	mov	r2, ip
 8015cae:	9905      	ldr	r1, [sp, #20]
 8015cb0:	5053      	str	r3, [r2, r1]
 8015cb2:	9b00      	ldr	r3, [sp, #0]
 8015cb4:	3304      	adds	r3, #4
 8015cb6:	9300      	str	r3, [sp, #0]
 8015cb8:	2304      	movs	r3, #4
 8015cba:	449c      	add	ip, r3
 8015cbc:	e79d      	b.n	8015bfa <__multiply+0x8a>
 8015cbe:	9b02      	ldr	r3, [sp, #8]
 8015cc0:	3b01      	subs	r3, #1
 8015cc2:	9302      	str	r3, [sp, #8]
 8015cc4:	e79d      	b.n	8015c02 <__multiply+0x92>
 8015cc6:	46c0      	nop			; (mov r8, r8)
 8015cc8:	0801853f 	.word	0x0801853f
 8015ccc:	08018550 	.word	0x08018550

08015cd0 <__pow5mult>:
 8015cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015cd2:	2303      	movs	r3, #3
 8015cd4:	0015      	movs	r5, r2
 8015cd6:	0007      	movs	r7, r0
 8015cd8:	000e      	movs	r6, r1
 8015cda:	401a      	ands	r2, r3
 8015cdc:	421d      	tst	r5, r3
 8015cde:	d008      	beq.n	8015cf2 <__pow5mult+0x22>
 8015ce0:	4925      	ldr	r1, [pc, #148]	; (8015d78 <__pow5mult+0xa8>)
 8015ce2:	3a01      	subs	r2, #1
 8015ce4:	0092      	lsls	r2, r2, #2
 8015ce6:	5852      	ldr	r2, [r2, r1]
 8015ce8:	2300      	movs	r3, #0
 8015cea:	0031      	movs	r1, r6
 8015cec:	f7ff fe9e 	bl	8015a2c <__multadd>
 8015cf0:	0006      	movs	r6, r0
 8015cf2:	10ad      	asrs	r5, r5, #2
 8015cf4:	d03d      	beq.n	8015d72 <__pow5mult+0xa2>
 8015cf6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8015cf8:	2c00      	cmp	r4, #0
 8015cfa:	d10f      	bne.n	8015d1c <__pow5mult+0x4c>
 8015cfc:	2010      	movs	r0, #16
 8015cfe:	f7fe f9c9 	bl	8014094 <malloc>
 8015d02:	1e02      	subs	r2, r0, #0
 8015d04:	6278      	str	r0, [r7, #36]	; 0x24
 8015d06:	d105      	bne.n	8015d14 <__pow5mult+0x44>
 8015d08:	21d7      	movs	r1, #215	; 0xd7
 8015d0a:	4b1c      	ldr	r3, [pc, #112]	; (8015d7c <__pow5mult+0xac>)
 8015d0c:	481c      	ldr	r0, [pc, #112]	; (8015d80 <__pow5mult+0xb0>)
 8015d0e:	0049      	lsls	r1, r1, #1
 8015d10:	f000 fb4e 	bl	80163b0 <__assert_func>
 8015d14:	6044      	str	r4, [r0, #4]
 8015d16:	6084      	str	r4, [r0, #8]
 8015d18:	6004      	str	r4, [r0, #0]
 8015d1a:	60c4      	str	r4, [r0, #12]
 8015d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1e:	689c      	ldr	r4, [r3, #8]
 8015d20:	9301      	str	r3, [sp, #4]
 8015d22:	2c00      	cmp	r4, #0
 8015d24:	d108      	bne.n	8015d38 <__pow5mult+0x68>
 8015d26:	0038      	movs	r0, r7
 8015d28:	4916      	ldr	r1, [pc, #88]	; (8015d84 <__pow5mult+0xb4>)
 8015d2a:	f7ff ff0b 	bl	8015b44 <__i2b>
 8015d2e:	9b01      	ldr	r3, [sp, #4]
 8015d30:	0004      	movs	r4, r0
 8015d32:	6098      	str	r0, [r3, #8]
 8015d34:	2300      	movs	r3, #0
 8015d36:	6003      	str	r3, [r0, #0]
 8015d38:	2301      	movs	r3, #1
 8015d3a:	421d      	tst	r5, r3
 8015d3c:	d00a      	beq.n	8015d54 <__pow5mult+0x84>
 8015d3e:	0031      	movs	r1, r6
 8015d40:	0022      	movs	r2, r4
 8015d42:	0038      	movs	r0, r7
 8015d44:	f7ff ff14 	bl	8015b70 <__multiply>
 8015d48:	0031      	movs	r1, r6
 8015d4a:	9001      	str	r0, [sp, #4]
 8015d4c:	0038      	movs	r0, r7
 8015d4e:	f7ff fe49 	bl	80159e4 <_Bfree>
 8015d52:	9e01      	ldr	r6, [sp, #4]
 8015d54:	106d      	asrs	r5, r5, #1
 8015d56:	d00c      	beq.n	8015d72 <__pow5mult+0xa2>
 8015d58:	6820      	ldr	r0, [r4, #0]
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	d107      	bne.n	8015d6e <__pow5mult+0x9e>
 8015d5e:	0022      	movs	r2, r4
 8015d60:	0021      	movs	r1, r4
 8015d62:	0038      	movs	r0, r7
 8015d64:	f7ff ff04 	bl	8015b70 <__multiply>
 8015d68:	2300      	movs	r3, #0
 8015d6a:	6020      	str	r0, [r4, #0]
 8015d6c:	6003      	str	r3, [r0, #0]
 8015d6e:	0004      	movs	r4, r0
 8015d70:	e7e2      	b.n	8015d38 <__pow5mult+0x68>
 8015d72:	0030      	movs	r0, r6
 8015d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015d76:	46c0      	nop			; (mov r8, r8)
 8015d78:	080186a0 	.word	0x080186a0
 8015d7c:	080184cd 	.word	0x080184cd
 8015d80:	08018550 	.word	0x08018550
 8015d84:	00000271 	.word	0x00000271

08015d88 <__lshift>:
 8015d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d8a:	000c      	movs	r4, r1
 8015d8c:	0017      	movs	r7, r2
 8015d8e:	6923      	ldr	r3, [r4, #16]
 8015d90:	1155      	asrs	r5, r2, #5
 8015d92:	b087      	sub	sp, #28
 8015d94:	18eb      	adds	r3, r5, r3
 8015d96:	9302      	str	r3, [sp, #8]
 8015d98:	3301      	adds	r3, #1
 8015d9a:	9301      	str	r3, [sp, #4]
 8015d9c:	6849      	ldr	r1, [r1, #4]
 8015d9e:	68a3      	ldr	r3, [r4, #8]
 8015da0:	9004      	str	r0, [sp, #16]
 8015da2:	9a01      	ldr	r2, [sp, #4]
 8015da4:	4293      	cmp	r3, r2
 8015da6:	db10      	blt.n	8015dca <__lshift+0x42>
 8015da8:	9804      	ldr	r0, [sp, #16]
 8015daa:	f7ff fdd7 	bl	801595c <_Balloc>
 8015dae:	2300      	movs	r3, #0
 8015db0:	0002      	movs	r2, r0
 8015db2:	0006      	movs	r6, r0
 8015db4:	0019      	movs	r1, r3
 8015db6:	3214      	adds	r2, #20
 8015db8:	4298      	cmp	r0, r3
 8015dba:	d10c      	bne.n	8015dd6 <__lshift+0x4e>
 8015dbc:	21da      	movs	r1, #218	; 0xda
 8015dbe:	0002      	movs	r2, r0
 8015dc0:	4b26      	ldr	r3, [pc, #152]	; (8015e5c <__lshift+0xd4>)
 8015dc2:	4827      	ldr	r0, [pc, #156]	; (8015e60 <__lshift+0xd8>)
 8015dc4:	31ff      	adds	r1, #255	; 0xff
 8015dc6:	f000 faf3 	bl	80163b0 <__assert_func>
 8015dca:	3101      	adds	r1, #1
 8015dcc:	005b      	lsls	r3, r3, #1
 8015dce:	e7e8      	b.n	8015da2 <__lshift+0x1a>
 8015dd0:	0098      	lsls	r0, r3, #2
 8015dd2:	5011      	str	r1, [r2, r0]
 8015dd4:	3301      	adds	r3, #1
 8015dd6:	42ab      	cmp	r3, r5
 8015dd8:	dbfa      	blt.n	8015dd0 <__lshift+0x48>
 8015dda:	43eb      	mvns	r3, r5
 8015ddc:	17db      	asrs	r3, r3, #31
 8015dde:	401d      	ands	r5, r3
 8015de0:	211f      	movs	r1, #31
 8015de2:	0023      	movs	r3, r4
 8015de4:	0038      	movs	r0, r7
 8015de6:	00ad      	lsls	r5, r5, #2
 8015de8:	1955      	adds	r5, r2, r5
 8015dea:	6922      	ldr	r2, [r4, #16]
 8015dec:	3314      	adds	r3, #20
 8015dee:	0092      	lsls	r2, r2, #2
 8015df0:	4008      	ands	r0, r1
 8015df2:	4684      	mov	ip, r0
 8015df4:	189a      	adds	r2, r3, r2
 8015df6:	420f      	tst	r7, r1
 8015df8:	d02a      	beq.n	8015e50 <__lshift+0xc8>
 8015dfa:	3101      	adds	r1, #1
 8015dfc:	1a09      	subs	r1, r1, r0
 8015dfe:	9105      	str	r1, [sp, #20]
 8015e00:	2100      	movs	r1, #0
 8015e02:	9503      	str	r5, [sp, #12]
 8015e04:	4667      	mov	r7, ip
 8015e06:	6818      	ldr	r0, [r3, #0]
 8015e08:	40b8      	lsls	r0, r7
 8015e0a:	4301      	orrs	r1, r0
 8015e0c:	9803      	ldr	r0, [sp, #12]
 8015e0e:	c002      	stmia	r0!, {r1}
 8015e10:	cb02      	ldmia	r3!, {r1}
 8015e12:	9003      	str	r0, [sp, #12]
 8015e14:	9805      	ldr	r0, [sp, #20]
 8015e16:	40c1      	lsrs	r1, r0
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d8f3      	bhi.n	8015e04 <__lshift+0x7c>
 8015e1c:	0020      	movs	r0, r4
 8015e1e:	3015      	adds	r0, #21
 8015e20:	2304      	movs	r3, #4
 8015e22:	4282      	cmp	r2, r0
 8015e24:	d304      	bcc.n	8015e30 <__lshift+0xa8>
 8015e26:	1b13      	subs	r3, r2, r4
 8015e28:	3b15      	subs	r3, #21
 8015e2a:	089b      	lsrs	r3, r3, #2
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	009b      	lsls	r3, r3, #2
 8015e30:	50e9      	str	r1, [r5, r3]
 8015e32:	2900      	cmp	r1, #0
 8015e34:	d002      	beq.n	8015e3c <__lshift+0xb4>
 8015e36:	9b02      	ldr	r3, [sp, #8]
 8015e38:	3302      	adds	r3, #2
 8015e3a:	9301      	str	r3, [sp, #4]
 8015e3c:	9b01      	ldr	r3, [sp, #4]
 8015e3e:	9804      	ldr	r0, [sp, #16]
 8015e40:	3b01      	subs	r3, #1
 8015e42:	0021      	movs	r1, r4
 8015e44:	6133      	str	r3, [r6, #16]
 8015e46:	f7ff fdcd 	bl	80159e4 <_Bfree>
 8015e4a:	0030      	movs	r0, r6
 8015e4c:	b007      	add	sp, #28
 8015e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e50:	cb02      	ldmia	r3!, {r1}
 8015e52:	c502      	stmia	r5!, {r1}
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d8fb      	bhi.n	8015e50 <__lshift+0xc8>
 8015e58:	e7f0      	b.n	8015e3c <__lshift+0xb4>
 8015e5a:	46c0      	nop			; (mov r8, r8)
 8015e5c:	0801853f 	.word	0x0801853f
 8015e60:	08018550 	.word	0x08018550

08015e64 <__mcmp>:
 8015e64:	6902      	ldr	r2, [r0, #16]
 8015e66:	690b      	ldr	r3, [r1, #16]
 8015e68:	b530      	push	{r4, r5, lr}
 8015e6a:	0004      	movs	r4, r0
 8015e6c:	1ad0      	subs	r0, r2, r3
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d10d      	bne.n	8015e8e <__mcmp+0x2a>
 8015e72:	009b      	lsls	r3, r3, #2
 8015e74:	3414      	adds	r4, #20
 8015e76:	3114      	adds	r1, #20
 8015e78:	18e2      	adds	r2, r4, r3
 8015e7a:	18c9      	adds	r1, r1, r3
 8015e7c:	3a04      	subs	r2, #4
 8015e7e:	3904      	subs	r1, #4
 8015e80:	6815      	ldr	r5, [r2, #0]
 8015e82:	680b      	ldr	r3, [r1, #0]
 8015e84:	429d      	cmp	r5, r3
 8015e86:	d003      	beq.n	8015e90 <__mcmp+0x2c>
 8015e88:	2001      	movs	r0, #1
 8015e8a:	429d      	cmp	r5, r3
 8015e8c:	d303      	bcc.n	8015e96 <__mcmp+0x32>
 8015e8e:	bd30      	pop	{r4, r5, pc}
 8015e90:	4294      	cmp	r4, r2
 8015e92:	d3f3      	bcc.n	8015e7c <__mcmp+0x18>
 8015e94:	e7fb      	b.n	8015e8e <__mcmp+0x2a>
 8015e96:	4240      	negs	r0, r0
 8015e98:	e7f9      	b.n	8015e8e <__mcmp+0x2a>
	...

08015e9c <__mdiff>:
 8015e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e9e:	000e      	movs	r6, r1
 8015ea0:	0007      	movs	r7, r0
 8015ea2:	0011      	movs	r1, r2
 8015ea4:	0030      	movs	r0, r6
 8015ea6:	b087      	sub	sp, #28
 8015ea8:	0014      	movs	r4, r2
 8015eaa:	f7ff ffdb 	bl	8015e64 <__mcmp>
 8015eae:	1e05      	subs	r5, r0, #0
 8015eb0:	d110      	bne.n	8015ed4 <__mdiff+0x38>
 8015eb2:	0001      	movs	r1, r0
 8015eb4:	0038      	movs	r0, r7
 8015eb6:	f7ff fd51 	bl	801595c <_Balloc>
 8015eba:	1e02      	subs	r2, r0, #0
 8015ebc:	d104      	bne.n	8015ec8 <__mdiff+0x2c>
 8015ebe:	4b40      	ldr	r3, [pc, #256]	; (8015fc0 <__mdiff+0x124>)
 8015ec0:	4940      	ldr	r1, [pc, #256]	; (8015fc4 <__mdiff+0x128>)
 8015ec2:	4841      	ldr	r0, [pc, #260]	; (8015fc8 <__mdiff+0x12c>)
 8015ec4:	f000 fa74 	bl	80163b0 <__assert_func>
 8015ec8:	2301      	movs	r3, #1
 8015eca:	6145      	str	r5, [r0, #20]
 8015ecc:	6103      	str	r3, [r0, #16]
 8015ece:	0010      	movs	r0, r2
 8015ed0:	b007      	add	sp, #28
 8015ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	9301      	str	r3, [sp, #4]
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	db04      	blt.n	8015ee6 <__mdiff+0x4a>
 8015edc:	0023      	movs	r3, r4
 8015ede:	0034      	movs	r4, r6
 8015ee0:	001e      	movs	r6, r3
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	9301      	str	r3, [sp, #4]
 8015ee6:	0038      	movs	r0, r7
 8015ee8:	6861      	ldr	r1, [r4, #4]
 8015eea:	f7ff fd37 	bl	801595c <_Balloc>
 8015eee:	1e02      	subs	r2, r0, #0
 8015ef0:	d103      	bne.n	8015efa <__mdiff+0x5e>
 8015ef2:	2190      	movs	r1, #144	; 0x90
 8015ef4:	4b32      	ldr	r3, [pc, #200]	; (8015fc0 <__mdiff+0x124>)
 8015ef6:	0089      	lsls	r1, r1, #2
 8015ef8:	e7e3      	b.n	8015ec2 <__mdiff+0x26>
 8015efa:	9b01      	ldr	r3, [sp, #4]
 8015efc:	2700      	movs	r7, #0
 8015efe:	60c3      	str	r3, [r0, #12]
 8015f00:	6920      	ldr	r0, [r4, #16]
 8015f02:	3414      	adds	r4, #20
 8015f04:	9401      	str	r4, [sp, #4]
 8015f06:	9b01      	ldr	r3, [sp, #4]
 8015f08:	0084      	lsls	r4, r0, #2
 8015f0a:	191b      	adds	r3, r3, r4
 8015f0c:	0034      	movs	r4, r6
 8015f0e:	9302      	str	r3, [sp, #8]
 8015f10:	6933      	ldr	r3, [r6, #16]
 8015f12:	3414      	adds	r4, #20
 8015f14:	0099      	lsls	r1, r3, #2
 8015f16:	1863      	adds	r3, r4, r1
 8015f18:	9303      	str	r3, [sp, #12]
 8015f1a:	0013      	movs	r3, r2
 8015f1c:	3314      	adds	r3, #20
 8015f1e:	469c      	mov	ip, r3
 8015f20:	9305      	str	r3, [sp, #20]
 8015f22:	9b01      	ldr	r3, [sp, #4]
 8015f24:	9304      	str	r3, [sp, #16]
 8015f26:	9b04      	ldr	r3, [sp, #16]
 8015f28:	cc02      	ldmia	r4!, {r1}
 8015f2a:	cb20      	ldmia	r3!, {r5}
 8015f2c:	9304      	str	r3, [sp, #16]
 8015f2e:	b2ab      	uxth	r3, r5
 8015f30:	19df      	adds	r7, r3, r7
 8015f32:	b28b      	uxth	r3, r1
 8015f34:	1afb      	subs	r3, r7, r3
 8015f36:	0c09      	lsrs	r1, r1, #16
 8015f38:	0c2d      	lsrs	r5, r5, #16
 8015f3a:	1a6d      	subs	r5, r5, r1
 8015f3c:	1419      	asrs	r1, r3, #16
 8015f3e:	186d      	adds	r5, r5, r1
 8015f40:	4661      	mov	r1, ip
 8015f42:	142f      	asrs	r7, r5, #16
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	042d      	lsls	r5, r5, #16
 8015f48:	432b      	orrs	r3, r5
 8015f4a:	c108      	stmia	r1!, {r3}
 8015f4c:	9b03      	ldr	r3, [sp, #12]
 8015f4e:	468c      	mov	ip, r1
 8015f50:	42a3      	cmp	r3, r4
 8015f52:	d8e8      	bhi.n	8015f26 <__mdiff+0x8a>
 8015f54:	0031      	movs	r1, r6
 8015f56:	9c03      	ldr	r4, [sp, #12]
 8015f58:	3115      	adds	r1, #21
 8015f5a:	2304      	movs	r3, #4
 8015f5c:	428c      	cmp	r4, r1
 8015f5e:	d304      	bcc.n	8015f6a <__mdiff+0xce>
 8015f60:	1ba3      	subs	r3, r4, r6
 8015f62:	3b15      	subs	r3, #21
 8015f64:	089b      	lsrs	r3, r3, #2
 8015f66:	3301      	adds	r3, #1
 8015f68:	009b      	lsls	r3, r3, #2
 8015f6a:	9901      	ldr	r1, [sp, #4]
 8015f6c:	18cc      	adds	r4, r1, r3
 8015f6e:	9905      	ldr	r1, [sp, #20]
 8015f70:	0026      	movs	r6, r4
 8015f72:	18cb      	adds	r3, r1, r3
 8015f74:	469c      	mov	ip, r3
 8015f76:	9902      	ldr	r1, [sp, #8]
 8015f78:	428e      	cmp	r6, r1
 8015f7a:	d310      	bcc.n	8015f9e <__mdiff+0x102>
 8015f7c:	9e02      	ldr	r6, [sp, #8]
 8015f7e:	1ee1      	subs	r1, r4, #3
 8015f80:	2500      	movs	r5, #0
 8015f82:	428e      	cmp	r6, r1
 8015f84:	d304      	bcc.n	8015f90 <__mdiff+0xf4>
 8015f86:	0031      	movs	r1, r6
 8015f88:	3103      	adds	r1, #3
 8015f8a:	1b0c      	subs	r4, r1, r4
 8015f8c:	08a4      	lsrs	r4, r4, #2
 8015f8e:	00a5      	lsls	r5, r4, #2
 8015f90:	195b      	adds	r3, r3, r5
 8015f92:	3b04      	subs	r3, #4
 8015f94:	6819      	ldr	r1, [r3, #0]
 8015f96:	2900      	cmp	r1, #0
 8015f98:	d00f      	beq.n	8015fba <__mdiff+0x11e>
 8015f9a:	6110      	str	r0, [r2, #16]
 8015f9c:	e797      	b.n	8015ece <__mdiff+0x32>
 8015f9e:	ce02      	ldmia	r6!, {r1}
 8015fa0:	b28d      	uxth	r5, r1
 8015fa2:	19ed      	adds	r5, r5, r7
 8015fa4:	0c0f      	lsrs	r7, r1, #16
 8015fa6:	1429      	asrs	r1, r5, #16
 8015fa8:	1879      	adds	r1, r7, r1
 8015faa:	140f      	asrs	r7, r1, #16
 8015fac:	b2ad      	uxth	r5, r5
 8015fae:	0409      	lsls	r1, r1, #16
 8015fb0:	430d      	orrs	r5, r1
 8015fb2:	4661      	mov	r1, ip
 8015fb4:	c120      	stmia	r1!, {r5}
 8015fb6:	468c      	mov	ip, r1
 8015fb8:	e7dd      	b.n	8015f76 <__mdiff+0xda>
 8015fba:	3801      	subs	r0, #1
 8015fbc:	e7e9      	b.n	8015f92 <__mdiff+0xf6>
 8015fbe:	46c0      	nop			; (mov r8, r8)
 8015fc0:	0801853f 	.word	0x0801853f
 8015fc4:	00000232 	.word	0x00000232
 8015fc8:	08018550 	.word	0x08018550

08015fcc <__d2b>:
 8015fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fce:	2101      	movs	r1, #1
 8015fd0:	0014      	movs	r4, r2
 8015fd2:	001e      	movs	r6, r3
 8015fd4:	9f08      	ldr	r7, [sp, #32]
 8015fd6:	f7ff fcc1 	bl	801595c <_Balloc>
 8015fda:	1e05      	subs	r5, r0, #0
 8015fdc:	d105      	bne.n	8015fea <__d2b+0x1e>
 8015fde:	0002      	movs	r2, r0
 8015fe0:	4b26      	ldr	r3, [pc, #152]	; (801607c <__d2b+0xb0>)
 8015fe2:	4927      	ldr	r1, [pc, #156]	; (8016080 <__d2b+0xb4>)
 8015fe4:	4827      	ldr	r0, [pc, #156]	; (8016084 <__d2b+0xb8>)
 8015fe6:	f000 f9e3 	bl	80163b0 <__assert_func>
 8015fea:	0333      	lsls	r3, r6, #12
 8015fec:	0076      	lsls	r6, r6, #1
 8015fee:	0b1b      	lsrs	r3, r3, #12
 8015ff0:	0d76      	lsrs	r6, r6, #21
 8015ff2:	d124      	bne.n	801603e <__d2b+0x72>
 8015ff4:	9301      	str	r3, [sp, #4]
 8015ff6:	2c00      	cmp	r4, #0
 8015ff8:	d027      	beq.n	801604a <__d2b+0x7e>
 8015ffa:	4668      	mov	r0, sp
 8015ffc:	9400      	str	r4, [sp, #0]
 8015ffe:	f7ff fd73 	bl	8015ae8 <__lo0bits>
 8016002:	9c00      	ldr	r4, [sp, #0]
 8016004:	2800      	cmp	r0, #0
 8016006:	d01e      	beq.n	8016046 <__d2b+0x7a>
 8016008:	9b01      	ldr	r3, [sp, #4]
 801600a:	2120      	movs	r1, #32
 801600c:	001a      	movs	r2, r3
 801600e:	1a09      	subs	r1, r1, r0
 8016010:	408a      	lsls	r2, r1
 8016012:	40c3      	lsrs	r3, r0
 8016014:	4322      	orrs	r2, r4
 8016016:	616a      	str	r2, [r5, #20]
 8016018:	9301      	str	r3, [sp, #4]
 801601a:	9c01      	ldr	r4, [sp, #4]
 801601c:	61ac      	str	r4, [r5, #24]
 801601e:	1e63      	subs	r3, r4, #1
 8016020:	419c      	sbcs	r4, r3
 8016022:	3401      	adds	r4, #1
 8016024:	612c      	str	r4, [r5, #16]
 8016026:	2e00      	cmp	r6, #0
 8016028:	d018      	beq.n	801605c <__d2b+0x90>
 801602a:	4b17      	ldr	r3, [pc, #92]	; (8016088 <__d2b+0xbc>)
 801602c:	18f6      	adds	r6, r6, r3
 801602e:	2335      	movs	r3, #53	; 0x35
 8016030:	1836      	adds	r6, r6, r0
 8016032:	1a18      	subs	r0, r3, r0
 8016034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016036:	603e      	str	r6, [r7, #0]
 8016038:	6018      	str	r0, [r3, #0]
 801603a:	0028      	movs	r0, r5
 801603c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801603e:	2280      	movs	r2, #128	; 0x80
 8016040:	0352      	lsls	r2, r2, #13
 8016042:	4313      	orrs	r3, r2
 8016044:	e7d6      	b.n	8015ff4 <__d2b+0x28>
 8016046:	616c      	str	r4, [r5, #20]
 8016048:	e7e7      	b.n	801601a <__d2b+0x4e>
 801604a:	a801      	add	r0, sp, #4
 801604c:	f7ff fd4c 	bl	8015ae8 <__lo0bits>
 8016050:	2401      	movs	r4, #1
 8016052:	9b01      	ldr	r3, [sp, #4]
 8016054:	612c      	str	r4, [r5, #16]
 8016056:	616b      	str	r3, [r5, #20]
 8016058:	3020      	adds	r0, #32
 801605a:	e7e4      	b.n	8016026 <__d2b+0x5a>
 801605c:	4b0b      	ldr	r3, [pc, #44]	; (801608c <__d2b+0xc0>)
 801605e:	18c0      	adds	r0, r0, r3
 8016060:	4b0b      	ldr	r3, [pc, #44]	; (8016090 <__d2b+0xc4>)
 8016062:	6038      	str	r0, [r7, #0]
 8016064:	18e3      	adds	r3, r4, r3
 8016066:	009b      	lsls	r3, r3, #2
 8016068:	18eb      	adds	r3, r5, r3
 801606a:	6958      	ldr	r0, [r3, #20]
 801606c:	f7ff fd22 	bl	8015ab4 <__hi0bits>
 8016070:	0164      	lsls	r4, r4, #5
 8016072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016074:	1a24      	subs	r4, r4, r0
 8016076:	601c      	str	r4, [r3, #0]
 8016078:	e7df      	b.n	801603a <__d2b+0x6e>
 801607a:	46c0      	nop			; (mov r8, r8)
 801607c:	0801853f 	.word	0x0801853f
 8016080:	0000030a 	.word	0x0000030a
 8016084:	08018550 	.word	0x08018550
 8016088:	fffffbcd 	.word	0xfffffbcd
 801608c:	fffffbce 	.word	0xfffffbce
 8016090:	3fffffff 	.word	0x3fffffff

08016094 <_calloc_r>:
 8016094:	b570      	push	{r4, r5, r6, lr}
 8016096:	0c13      	lsrs	r3, r2, #16
 8016098:	0c0d      	lsrs	r5, r1, #16
 801609a:	d11e      	bne.n	80160da <_calloc_r+0x46>
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10c      	bne.n	80160ba <_calloc_r+0x26>
 80160a0:	b289      	uxth	r1, r1
 80160a2:	b294      	uxth	r4, r2
 80160a4:	434c      	muls	r4, r1
 80160a6:	0021      	movs	r1, r4
 80160a8:	f7fe f87c 	bl	80141a4 <_malloc_r>
 80160ac:	1e05      	subs	r5, r0, #0
 80160ae:	d01b      	beq.n	80160e8 <_calloc_r+0x54>
 80160b0:	0022      	movs	r2, r4
 80160b2:	2100      	movs	r1, #0
 80160b4:	f7fe f801 	bl	80140ba <memset>
 80160b8:	e016      	b.n	80160e8 <_calloc_r+0x54>
 80160ba:	1c1d      	adds	r5, r3, #0
 80160bc:	1c0b      	adds	r3, r1, #0
 80160be:	b292      	uxth	r2, r2
 80160c0:	b289      	uxth	r1, r1
 80160c2:	b29c      	uxth	r4, r3
 80160c4:	4351      	muls	r1, r2
 80160c6:	b2ab      	uxth	r3, r5
 80160c8:	4363      	muls	r3, r4
 80160ca:	0c0c      	lsrs	r4, r1, #16
 80160cc:	191c      	adds	r4, r3, r4
 80160ce:	0c22      	lsrs	r2, r4, #16
 80160d0:	d107      	bne.n	80160e2 <_calloc_r+0x4e>
 80160d2:	0424      	lsls	r4, r4, #16
 80160d4:	b289      	uxth	r1, r1
 80160d6:	430c      	orrs	r4, r1
 80160d8:	e7e5      	b.n	80160a6 <_calloc_r+0x12>
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d101      	bne.n	80160e2 <_calloc_r+0x4e>
 80160de:	1c13      	adds	r3, r2, #0
 80160e0:	e7ed      	b.n	80160be <_calloc_r+0x2a>
 80160e2:	230c      	movs	r3, #12
 80160e4:	2500      	movs	r5, #0
 80160e6:	6003      	str	r3, [r0, #0]
 80160e8:	0028      	movs	r0, r5
 80160ea:	bd70      	pop	{r4, r5, r6, pc}

080160ec <__ssputs_r>:
 80160ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160ee:	688e      	ldr	r6, [r1, #8]
 80160f0:	b085      	sub	sp, #20
 80160f2:	0007      	movs	r7, r0
 80160f4:	000c      	movs	r4, r1
 80160f6:	9203      	str	r2, [sp, #12]
 80160f8:	9301      	str	r3, [sp, #4]
 80160fa:	429e      	cmp	r6, r3
 80160fc:	d83c      	bhi.n	8016178 <__ssputs_r+0x8c>
 80160fe:	2390      	movs	r3, #144	; 0x90
 8016100:	898a      	ldrh	r2, [r1, #12]
 8016102:	00db      	lsls	r3, r3, #3
 8016104:	421a      	tst	r2, r3
 8016106:	d034      	beq.n	8016172 <__ssputs_r+0x86>
 8016108:	6909      	ldr	r1, [r1, #16]
 801610a:	6823      	ldr	r3, [r4, #0]
 801610c:	6960      	ldr	r0, [r4, #20]
 801610e:	1a5b      	subs	r3, r3, r1
 8016110:	9302      	str	r3, [sp, #8]
 8016112:	2303      	movs	r3, #3
 8016114:	4343      	muls	r3, r0
 8016116:	0fdd      	lsrs	r5, r3, #31
 8016118:	18ed      	adds	r5, r5, r3
 801611a:	9b01      	ldr	r3, [sp, #4]
 801611c:	9802      	ldr	r0, [sp, #8]
 801611e:	3301      	adds	r3, #1
 8016120:	181b      	adds	r3, r3, r0
 8016122:	106d      	asrs	r5, r5, #1
 8016124:	42ab      	cmp	r3, r5
 8016126:	d900      	bls.n	801612a <__ssputs_r+0x3e>
 8016128:	001d      	movs	r5, r3
 801612a:	0553      	lsls	r3, r2, #21
 801612c:	d532      	bpl.n	8016194 <__ssputs_r+0xa8>
 801612e:	0029      	movs	r1, r5
 8016130:	0038      	movs	r0, r7
 8016132:	f7fe f837 	bl	80141a4 <_malloc_r>
 8016136:	1e06      	subs	r6, r0, #0
 8016138:	d109      	bne.n	801614e <__ssputs_r+0x62>
 801613a:	230c      	movs	r3, #12
 801613c:	603b      	str	r3, [r7, #0]
 801613e:	2340      	movs	r3, #64	; 0x40
 8016140:	2001      	movs	r0, #1
 8016142:	89a2      	ldrh	r2, [r4, #12]
 8016144:	4240      	negs	r0, r0
 8016146:	4313      	orrs	r3, r2
 8016148:	81a3      	strh	r3, [r4, #12]
 801614a:	b005      	add	sp, #20
 801614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801614e:	9a02      	ldr	r2, [sp, #8]
 8016150:	6921      	ldr	r1, [r4, #16]
 8016152:	f7fd ffa9 	bl	80140a8 <memcpy>
 8016156:	89a3      	ldrh	r3, [r4, #12]
 8016158:	4a14      	ldr	r2, [pc, #80]	; (80161ac <__ssputs_r+0xc0>)
 801615a:	401a      	ands	r2, r3
 801615c:	2380      	movs	r3, #128	; 0x80
 801615e:	4313      	orrs	r3, r2
 8016160:	81a3      	strh	r3, [r4, #12]
 8016162:	9b02      	ldr	r3, [sp, #8]
 8016164:	6126      	str	r6, [r4, #16]
 8016166:	18f6      	adds	r6, r6, r3
 8016168:	6026      	str	r6, [r4, #0]
 801616a:	6165      	str	r5, [r4, #20]
 801616c:	9e01      	ldr	r6, [sp, #4]
 801616e:	1aed      	subs	r5, r5, r3
 8016170:	60a5      	str	r5, [r4, #8]
 8016172:	9b01      	ldr	r3, [sp, #4]
 8016174:	429e      	cmp	r6, r3
 8016176:	d900      	bls.n	801617a <__ssputs_r+0x8e>
 8016178:	9e01      	ldr	r6, [sp, #4]
 801617a:	0032      	movs	r2, r6
 801617c:	9903      	ldr	r1, [sp, #12]
 801617e:	6820      	ldr	r0, [r4, #0]
 8016180:	f000 f959 	bl	8016436 <memmove>
 8016184:	68a3      	ldr	r3, [r4, #8]
 8016186:	2000      	movs	r0, #0
 8016188:	1b9b      	subs	r3, r3, r6
 801618a:	60a3      	str	r3, [r4, #8]
 801618c:	6823      	ldr	r3, [r4, #0]
 801618e:	199e      	adds	r6, r3, r6
 8016190:	6026      	str	r6, [r4, #0]
 8016192:	e7da      	b.n	801614a <__ssputs_r+0x5e>
 8016194:	002a      	movs	r2, r5
 8016196:	0038      	movs	r0, r7
 8016198:	f000 f960 	bl	801645c <_realloc_r>
 801619c:	1e06      	subs	r6, r0, #0
 801619e:	d1e0      	bne.n	8016162 <__ssputs_r+0x76>
 80161a0:	0038      	movs	r0, r7
 80161a2:	6921      	ldr	r1, [r4, #16]
 80161a4:	f7fd ff92 	bl	80140cc <_free_r>
 80161a8:	e7c7      	b.n	801613a <__ssputs_r+0x4e>
 80161aa:	46c0      	nop			; (mov r8, r8)
 80161ac:	fffffb7f 	.word	0xfffffb7f

080161b0 <_svfiprintf_r>:
 80161b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161b2:	b0a1      	sub	sp, #132	; 0x84
 80161b4:	9003      	str	r0, [sp, #12]
 80161b6:	001d      	movs	r5, r3
 80161b8:	898b      	ldrh	r3, [r1, #12]
 80161ba:	000f      	movs	r7, r1
 80161bc:	0016      	movs	r6, r2
 80161be:	061b      	lsls	r3, r3, #24
 80161c0:	d511      	bpl.n	80161e6 <_svfiprintf_r+0x36>
 80161c2:	690b      	ldr	r3, [r1, #16]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d10e      	bne.n	80161e6 <_svfiprintf_r+0x36>
 80161c8:	2140      	movs	r1, #64	; 0x40
 80161ca:	f7fd ffeb 	bl	80141a4 <_malloc_r>
 80161ce:	6038      	str	r0, [r7, #0]
 80161d0:	6138      	str	r0, [r7, #16]
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d105      	bne.n	80161e2 <_svfiprintf_r+0x32>
 80161d6:	230c      	movs	r3, #12
 80161d8:	9a03      	ldr	r2, [sp, #12]
 80161da:	3801      	subs	r0, #1
 80161dc:	6013      	str	r3, [r2, #0]
 80161de:	b021      	add	sp, #132	; 0x84
 80161e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161e2:	2340      	movs	r3, #64	; 0x40
 80161e4:	617b      	str	r3, [r7, #20]
 80161e6:	2300      	movs	r3, #0
 80161e8:	ac08      	add	r4, sp, #32
 80161ea:	6163      	str	r3, [r4, #20]
 80161ec:	3320      	adds	r3, #32
 80161ee:	7663      	strb	r3, [r4, #25]
 80161f0:	3310      	adds	r3, #16
 80161f2:	76a3      	strb	r3, [r4, #26]
 80161f4:	9507      	str	r5, [sp, #28]
 80161f6:	0035      	movs	r5, r6
 80161f8:	782b      	ldrb	r3, [r5, #0]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d001      	beq.n	8016202 <_svfiprintf_r+0x52>
 80161fe:	2b25      	cmp	r3, #37	; 0x25
 8016200:	d147      	bne.n	8016292 <_svfiprintf_r+0xe2>
 8016202:	1bab      	subs	r3, r5, r6
 8016204:	9305      	str	r3, [sp, #20]
 8016206:	42b5      	cmp	r5, r6
 8016208:	d00c      	beq.n	8016224 <_svfiprintf_r+0x74>
 801620a:	0032      	movs	r2, r6
 801620c:	0039      	movs	r1, r7
 801620e:	9803      	ldr	r0, [sp, #12]
 8016210:	f7ff ff6c 	bl	80160ec <__ssputs_r>
 8016214:	1c43      	adds	r3, r0, #1
 8016216:	d100      	bne.n	801621a <_svfiprintf_r+0x6a>
 8016218:	e0ae      	b.n	8016378 <_svfiprintf_r+0x1c8>
 801621a:	6962      	ldr	r2, [r4, #20]
 801621c:	9b05      	ldr	r3, [sp, #20]
 801621e:	4694      	mov	ip, r2
 8016220:	4463      	add	r3, ip
 8016222:	6163      	str	r3, [r4, #20]
 8016224:	782b      	ldrb	r3, [r5, #0]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d100      	bne.n	801622c <_svfiprintf_r+0x7c>
 801622a:	e0a5      	b.n	8016378 <_svfiprintf_r+0x1c8>
 801622c:	2201      	movs	r2, #1
 801622e:	2300      	movs	r3, #0
 8016230:	4252      	negs	r2, r2
 8016232:	6062      	str	r2, [r4, #4]
 8016234:	a904      	add	r1, sp, #16
 8016236:	3254      	adds	r2, #84	; 0x54
 8016238:	1852      	adds	r2, r2, r1
 801623a:	1c6e      	adds	r6, r5, #1
 801623c:	6023      	str	r3, [r4, #0]
 801623e:	60e3      	str	r3, [r4, #12]
 8016240:	60a3      	str	r3, [r4, #8]
 8016242:	7013      	strb	r3, [r2, #0]
 8016244:	65a3      	str	r3, [r4, #88]	; 0x58
 8016246:	2205      	movs	r2, #5
 8016248:	7831      	ldrb	r1, [r6, #0]
 801624a:	4854      	ldr	r0, [pc, #336]	; (801639c <_svfiprintf_r+0x1ec>)
 801624c:	f7ff fb6a 	bl	8015924 <memchr>
 8016250:	1c75      	adds	r5, r6, #1
 8016252:	2800      	cmp	r0, #0
 8016254:	d11f      	bne.n	8016296 <_svfiprintf_r+0xe6>
 8016256:	6822      	ldr	r2, [r4, #0]
 8016258:	06d3      	lsls	r3, r2, #27
 801625a:	d504      	bpl.n	8016266 <_svfiprintf_r+0xb6>
 801625c:	2353      	movs	r3, #83	; 0x53
 801625e:	a904      	add	r1, sp, #16
 8016260:	185b      	adds	r3, r3, r1
 8016262:	2120      	movs	r1, #32
 8016264:	7019      	strb	r1, [r3, #0]
 8016266:	0713      	lsls	r3, r2, #28
 8016268:	d504      	bpl.n	8016274 <_svfiprintf_r+0xc4>
 801626a:	2353      	movs	r3, #83	; 0x53
 801626c:	a904      	add	r1, sp, #16
 801626e:	185b      	adds	r3, r3, r1
 8016270:	212b      	movs	r1, #43	; 0x2b
 8016272:	7019      	strb	r1, [r3, #0]
 8016274:	7833      	ldrb	r3, [r6, #0]
 8016276:	2b2a      	cmp	r3, #42	; 0x2a
 8016278:	d016      	beq.n	80162a8 <_svfiprintf_r+0xf8>
 801627a:	0035      	movs	r5, r6
 801627c:	2100      	movs	r1, #0
 801627e:	200a      	movs	r0, #10
 8016280:	68e3      	ldr	r3, [r4, #12]
 8016282:	782a      	ldrb	r2, [r5, #0]
 8016284:	1c6e      	adds	r6, r5, #1
 8016286:	3a30      	subs	r2, #48	; 0x30
 8016288:	2a09      	cmp	r2, #9
 801628a:	d94e      	bls.n	801632a <_svfiprintf_r+0x17a>
 801628c:	2900      	cmp	r1, #0
 801628e:	d111      	bne.n	80162b4 <_svfiprintf_r+0x104>
 8016290:	e017      	b.n	80162c2 <_svfiprintf_r+0x112>
 8016292:	3501      	adds	r5, #1
 8016294:	e7b0      	b.n	80161f8 <_svfiprintf_r+0x48>
 8016296:	4b41      	ldr	r3, [pc, #260]	; (801639c <_svfiprintf_r+0x1ec>)
 8016298:	6822      	ldr	r2, [r4, #0]
 801629a:	1ac0      	subs	r0, r0, r3
 801629c:	2301      	movs	r3, #1
 801629e:	4083      	lsls	r3, r0
 80162a0:	4313      	orrs	r3, r2
 80162a2:	002e      	movs	r6, r5
 80162a4:	6023      	str	r3, [r4, #0]
 80162a6:	e7ce      	b.n	8016246 <_svfiprintf_r+0x96>
 80162a8:	9b07      	ldr	r3, [sp, #28]
 80162aa:	1d19      	adds	r1, r3, #4
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	9107      	str	r1, [sp, #28]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	db01      	blt.n	80162b8 <_svfiprintf_r+0x108>
 80162b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80162b6:	e004      	b.n	80162c2 <_svfiprintf_r+0x112>
 80162b8:	425b      	negs	r3, r3
 80162ba:	60e3      	str	r3, [r4, #12]
 80162bc:	2302      	movs	r3, #2
 80162be:	4313      	orrs	r3, r2
 80162c0:	6023      	str	r3, [r4, #0]
 80162c2:	782b      	ldrb	r3, [r5, #0]
 80162c4:	2b2e      	cmp	r3, #46	; 0x2e
 80162c6:	d10a      	bne.n	80162de <_svfiprintf_r+0x12e>
 80162c8:	786b      	ldrb	r3, [r5, #1]
 80162ca:	2b2a      	cmp	r3, #42	; 0x2a
 80162cc:	d135      	bne.n	801633a <_svfiprintf_r+0x18a>
 80162ce:	9b07      	ldr	r3, [sp, #28]
 80162d0:	3502      	adds	r5, #2
 80162d2:	1d1a      	adds	r2, r3, #4
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	9207      	str	r2, [sp, #28]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	db2b      	blt.n	8016334 <_svfiprintf_r+0x184>
 80162dc:	9309      	str	r3, [sp, #36]	; 0x24
 80162de:	4e30      	ldr	r6, [pc, #192]	; (80163a0 <_svfiprintf_r+0x1f0>)
 80162e0:	2203      	movs	r2, #3
 80162e2:	0030      	movs	r0, r6
 80162e4:	7829      	ldrb	r1, [r5, #0]
 80162e6:	f7ff fb1d 	bl	8015924 <memchr>
 80162ea:	2800      	cmp	r0, #0
 80162ec:	d006      	beq.n	80162fc <_svfiprintf_r+0x14c>
 80162ee:	2340      	movs	r3, #64	; 0x40
 80162f0:	1b80      	subs	r0, r0, r6
 80162f2:	4083      	lsls	r3, r0
 80162f4:	6822      	ldr	r2, [r4, #0]
 80162f6:	3501      	adds	r5, #1
 80162f8:	4313      	orrs	r3, r2
 80162fa:	6023      	str	r3, [r4, #0]
 80162fc:	7829      	ldrb	r1, [r5, #0]
 80162fe:	2206      	movs	r2, #6
 8016300:	4828      	ldr	r0, [pc, #160]	; (80163a4 <_svfiprintf_r+0x1f4>)
 8016302:	1c6e      	adds	r6, r5, #1
 8016304:	7621      	strb	r1, [r4, #24]
 8016306:	f7ff fb0d 	bl	8015924 <memchr>
 801630a:	2800      	cmp	r0, #0
 801630c:	d03c      	beq.n	8016388 <_svfiprintf_r+0x1d8>
 801630e:	4b26      	ldr	r3, [pc, #152]	; (80163a8 <_svfiprintf_r+0x1f8>)
 8016310:	2b00      	cmp	r3, #0
 8016312:	d125      	bne.n	8016360 <_svfiprintf_r+0x1b0>
 8016314:	2207      	movs	r2, #7
 8016316:	9b07      	ldr	r3, [sp, #28]
 8016318:	3307      	adds	r3, #7
 801631a:	4393      	bics	r3, r2
 801631c:	3308      	adds	r3, #8
 801631e:	9307      	str	r3, [sp, #28]
 8016320:	6963      	ldr	r3, [r4, #20]
 8016322:	9a04      	ldr	r2, [sp, #16]
 8016324:	189b      	adds	r3, r3, r2
 8016326:	6163      	str	r3, [r4, #20]
 8016328:	e765      	b.n	80161f6 <_svfiprintf_r+0x46>
 801632a:	4343      	muls	r3, r0
 801632c:	0035      	movs	r5, r6
 801632e:	2101      	movs	r1, #1
 8016330:	189b      	adds	r3, r3, r2
 8016332:	e7a6      	b.n	8016282 <_svfiprintf_r+0xd2>
 8016334:	2301      	movs	r3, #1
 8016336:	425b      	negs	r3, r3
 8016338:	e7d0      	b.n	80162dc <_svfiprintf_r+0x12c>
 801633a:	2300      	movs	r3, #0
 801633c:	200a      	movs	r0, #10
 801633e:	001a      	movs	r2, r3
 8016340:	3501      	adds	r5, #1
 8016342:	6063      	str	r3, [r4, #4]
 8016344:	7829      	ldrb	r1, [r5, #0]
 8016346:	1c6e      	adds	r6, r5, #1
 8016348:	3930      	subs	r1, #48	; 0x30
 801634a:	2909      	cmp	r1, #9
 801634c:	d903      	bls.n	8016356 <_svfiprintf_r+0x1a6>
 801634e:	2b00      	cmp	r3, #0
 8016350:	d0c5      	beq.n	80162de <_svfiprintf_r+0x12e>
 8016352:	9209      	str	r2, [sp, #36]	; 0x24
 8016354:	e7c3      	b.n	80162de <_svfiprintf_r+0x12e>
 8016356:	4342      	muls	r2, r0
 8016358:	0035      	movs	r5, r6
 801635a:	2301      	movs	r3, #1
 801635c:	1852      	adds	r2, r2, r1
 801635e:	e7f1      	b.n	8016344 <_svfiprintf_r+0x194>
 8016360:	ab07      	add	r3, sp, #28
 8016362:	9300      	str	r3, [sp, #0]
 8016364:	003a      	movs	r2, r7
 8016366:	0021      	movs	r1, r4
 8016368:	4b10      	ldr	r3, [pc, #64]	; (80163ac <_svfiprintf_r+0x1fc>)
 801636a:	9803      	ldr	r0, [sp, #12]
 801636c:	f7fe f83a 	bl	80143e4 <_printf_float>
 8016370:	9004      	str	r0, [sp, #16]
 8016372:	9b04      	ldr	r3, [sp, #16]
 8016374:	3301      	adds	r3, #1
 8016376:	d1d3      	bne.n	8016320 <_svfiprintf_r+0x170>
 8016378:	89bb      	ldrh	r3, [r7, #12]
 801637a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801637c:	065b      	lsls	r3, r3, #25
 801637e:	d400      	bmi.n	8016382 <_svfiprintf_r+0x1d2>
 8016380:	e72d      	b.n	80161de <_svfiprintf_r+0x2e>
 8016382:	2001      	movs	r0, #1
 8016384:	4240      	negs	r0, r0
 8016386:	e72a      	b.n	80161de <_svfiprintf_r+0x2e>
 8016388:	ab07      	add	r3, sp, #28
 801638a:	9300      	str	r3, [sp, #0]
 801638c:	003a      	movs	r2, r7
 801638e:	0021      	movs	r1, r4
 8016390:	4b06      	ldr	r3, [pc, #24]	; (80163ac <_svfiprintf_r+0x1fc>)
 8016392:	9803      	ldr	r0, [sp, #12]
 8016394:	f7fe fad8 	bl	8014948 <_printf_i>
 8016398:	e7ea      	b.n	8016370 <_svfiprintf_r+0x1c0>
 801639a:	46c0      	nop			; (mov r8, r8)
 801639c:	080186ac 	.word	0x080186ac
 80163a0:	080186b2 	.word	0x080186b2
 80163a4:	080186b6 	.word	0x080186b6
 80163a8:	080143e5 	.word	0x080143e5
 80163ac:	080160ed 	.word	0x080160ed

080163b0 <__assert_func>:
 80163b0:	b530      	push	{r4, r5, lr}
 80163b2:	0014      	movs	r4, r2
 80163b4:	001a      	movs	r2, r3
 80163b6:	4b09      	ldr	r3, [pc, #36]	; (80163dc <__assert_func+0x2c>)
 80163b8:	0005      	movs	r5, r0
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	b085      	sub	sp, #20
 80163be:	68d8      	ldr	r0, [r3, #12]
 80163c0:	4b07      	ldr	r3, [pc, #28]	; (80163e0 <__assert_func+0x30>)
 80163c2:	2c00      	cmp	r4, #0
 80163c4:	d101      	bne.n	80163ca <__assert_func+0x1a>
 80163c6:	4b07      	ldr	r3, [pc, #28]	; (80163e4 <__assert_func+0x34>)
 80163c8:	001c      	movs	r4, r3
 80163ca:	9301      	str	r3, [sp, #4]
 80163cc:	9100      	str	r1, [sp, #0]
 80163ce:	002b      	movs	r3, r5
 80163d0:	4905      	ldr	r1, [pc, #20]	; (80163e8 <__assert_func+0x38>)
 80163d2:	9402      	str	r4, [sp, #8]
 80163d4:	f000 f80a 	bl	80163ec <fiprintf>
 80163d8:	f000 faac 	bl	8016934 <abort>
 80163dc:	200030cc 	.word	0x200030cc
 80163e0:	080186bd 	.word	0x080186bd
 80163e4:	080186f8 	.word	0x080186f8
 80163e8:	080186ca 	.word	0x080186ca

080163ec <fiprintf>:
 80163ec:	b40e      	push	{r1, r2, r3}
 80163ee:	b503      	push	{r0, r1, lr}
 80163f0:	0001      	movs	r1, r0
 80163f2:	ab03      	add	r3, sp, #12
 80163f4:	4804      	ldr	r0, [pc, #16]	; (8016408 <fiprintf+0x1c>)
 80163f6:	cb04      	ldmia	r3!, {r2}
 80163f8:	6800      	ldr	r0, [r0, #0]
 80163fa:	9301      	str	r3, [sp, #4]
 80163fc:	f000 f884 	bl	8016508 <_vfiprintf_r>
 8016400:	b002      	add	sp, #8
 8016402:	bc08      	pop	{r3}
 8016404:	b003      	add	sp, #12
 8016406:	4718      	bx	r3
 8016408:	200030cc 	.word	0x200030cc

0801640c <__retarget_lock_init_recursive>:
 801640c:	4770      	bx	lr

0801640e <__retarget_lock_acquire_recursive>:
 801640e:	4770      	bx	lr

08016410 <__retarget_lock_release_recursive>:
 8016410:	4770      	bx	lr

08016412 <__ascii_mbtowc>:
 8016412:	b082      	sub	sp, #8
 8016414:	2900      	cmp	r1, #0
 8016416:	d100      	bne.n	801641a <__ascii_mbtowc+0x8>
 8016418:	a901      	add	r1, sp, #4
 801641a:	1e10      	subs	r0, r2, #0
 801641c:	d006      	beq.n	801642c <__ascii_mbtowc+0x1a>
 801641e:	2b00      	cmp	r3, #0
 8016420:	d006      	beq.n	8016430 <__ascii_mbtowc+0x1e>
 8016422:	7813      	ldrb	r3, [r2, #0]
 8016424:	600b      	str	r3, [r1, #0]
 8016426:	7810      	ldrb	r0, [r2, #0]
 8016428:	1e43      	subs	r3, r0, #1
 801642a:	4198      	sbcs	r0, r3
 801642c:	b002      	add	sp, #8
 801642e:	4770      	bx	lr
 8016430:	2002      	movs	r0, #2
 8016432:	4240      	negs	r0, r0
 8016434:	e7fa      	b.n	801642c <__ascii_mbtowc+0x1a>

08016436 <memmove>:
 8016436:	b510      	push	{r4, lr}
 8016438:	4288      	cmp	r0, r1
 801643a:	d902      	bls.n	8016442 <memmove+0xc>
 801643c:	188b      	adds	r3, r1, r2
 801643e:	4298      	cmp	r0, r3
 8016440:	d303      	bcc.n	801644a <memmove+0x14>
 8016442:	2300      	movs	r3, #0
 8016444:	e007      	b.n	8016456 <memmove+0x20>
 8016446:	5c8b      	ldrb	r3, [r1, r2]
 8016448:	5483      	strb	r3, [r0, r2]
 801644a:	3a01      	subs	r2, #1
 801644c:	d2fb      	bcs.n	8016446 <memmove+0x10>
 801644e:	bd10      	pop	{r4, pc}
 8016450:	5ccc      	ldrb	r4, [r1, r3]
 8016452:	54c4      	strb	r4, [r0, r3]
 8016454:	3301      	adds	r3, #1
 8016456:	429a      	cmp	r2, r3
 8016458:	d1fa      	bne.n	8016450 <memmove+0x1a>
 801645a:	e7f8      	b.n	801644e <memmove+0x18>

0801645c <_realloc_r>:
 801645c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801645e:	0007      	movs	r7, r0
 8016460:	000e      	movs	r6, r1
 8016462:	0014      	movs	r4, r2
 8016464:	2900      	cmp	r1, #0
 8016466:	d105      	bne.n	8016474 <_realloc_r+0x18>
 8016468:	0011      	movs	r1, r2
 801646a:	f7fd fe9b 	bl	80141a4 <_malloc_r>
 801646e:	0005      	movs	r5, r0
 8016470:	0028      	movs	r0, r5
 8016472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016474:	2a00      	cmp	r2, #0
 8016476:	d103      	bne.n	8016480 <_realloc_r+0x24>
 8016478:	f7fd fe28 	bl	80140cc <_free_r>
 801647c:	0025      	movs	r5, r4
 801647e:	e7f7      	b.n	8016470 <_realloc_r+0x14>
 8016480:	f000 fc9a 	bl	8016db8 <_malloc_usable_size_r>
 8016484:	9001      	str	r0, [sp, #4]
 8016486:	4284      	cmp	r4, r0
 8016488:	d803      	bhi.n	8016492 <_realloc_r+0x36>
 801648a:	0035      	movs	r5, r6
 801648c:	0843      	lsrs	r3, r0, #1
 801648e:	42a3      	cmp	r3, r4
 8016490:	d3ee      	bcc.n	8016470 <_realloc_r+0x14>
 8016492:	0021      	movs	r1, r4
 8016494:	0038      	movs	r0, r7
 8016496:	f7fd fe85 	bl	80141a4 <_malloc_r>
 801649a:	1e05      	subs	r5, r0, #0
 801649c:	d0e8      	beq.n	8016470 <_realloc_r+0x14>
 801649e:	9b01      	ldr	r3, [sp, #4]
 80164a0:	0022      	movs	r2, r4
 80164a2:	429c      	cmp	r4, r3
 80164a4:	d900      	bls.n	80164a8 <_realloc_r+0x4c>
 80164a6:	001a      	movs	r2, r3
 80164a8:	0031      	movs	r1, r6
 80164aa:	0028      	movs	r0, r5
 80164ac:	f7fd fdfc 	bl	80140a8 <memcpy>
 80164b0:	0031      	movs	r1, r6
 80164b2:	0038      	movs	r0, r7
 80164b4:	f7fd fe0a 	bl	80140cc <_free_r>
 80164b8:	e7da      	b.n	8016470 <_realloc_r+0x14>

080164ba <__sfputc_r>:
 80164ba:	6893      	ldr	r3, [r2, #8]
 80164bc:	b510      	push	{r4, lr}
 80164be:	3b01      	subs	r3, #1
 80164c0:	6093      	str	r3, [r2, #8]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	da04      	bge.n	80164d0 <__sfputc_r+0x16>
 80164c6:	6994      	ldr	r4, [r2, #24]
 80164c8:	42a3      	cmp	r3, r4
 80164ca:	db07      	blt.n	80164dc <__sfputc_r+0x22>
 80164cc:	290a      	cmp	r1, #10
 80164ce:	d005      	beq.n	80164dc <__sfputc_r+0x22>
 80164d0:	6813      	ldr	r3, [r2, #0]
 80164d2:	1c58      	adds	r0, r3, #1
 80164d4:	6010      	str	r0, [r2, #0]
 80164d6:	7019      	strb	r1, [r3, #0]
 80164d8:	0008      	movs	r0, r1
 80164da:	bd10      	pop	{r4, pc}
 80164dc:	f000 f94e 	bl	801677c <__swbuf_r>
 80164e0:	0001      	movs	r1, r0
 80164e2:	e7f9      	b.n	80164d8 <__sfputc_r+0x1e>

080164e4 <__sfputs_r>:
 80164e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164e6:	0006      	movs	r6, r0
 80164e8:	000f      	movs	r7, r1
 80164ea:	0014      	movs	r4, r2
 80164ec:	18d5      	adds	r5, r2, r3
 80164ee:	42ac      	cmp	r4, r5
 80164f0:	d101      	bne.n	80164f6 <__sfputs_r+0x12>
 80164f2:	2000      	movs	r0, #0
 80164f4:	e007      	b.n	8016506 <__sfputs_r+0x22>
 80164f6:	7821      	ldrb	r1, [r4, #0]
 80164f8:	003a      	movs	r2, r7
 80164fa:	0030      	movs	r0, r6
 80164fc:	f7ff ffdd 	bl	80164ba <__sfputc_r>
 8016500:	3401      	adds	r4, #1
 8016502:	1c43      	adds	r3, r0, #1
 8016504:	d1f3      	bne.n	80164ee <__sfputs_r+0xa>
 8016506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016508 <_vfiprintf_r>:
 8016508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801650a:	b0a1      	sub	sp, #132	; 0x84
 801650c:	0006      	movs	r6, r0
 801650e:	000c      	movs	r4, r1
 8016510:	001f      	movs	r7, r3
 8016512:	9203      	str	r2, [sp, #12]
 8016514:	2800      	cmp	r0, #0
 8016516:	d004      	beq.n	8016522 <_vfiprintf_r+0x1a>
 8016518:	6983      	ldr	r3, [r0, #24]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d101      	bne.n	8016522 <_vfiprintf_r+0x1a>
 801651e:	f000 fb3f 	bl	8016ba0 <__sinit>
 8016522:	4b8e      	ldr	r3, [pc, #568]	; (801675c <_vfiprintf_r+0x254>)
 8016524:	429c      	cmp	r4, r3
 8016526:	d11c      	bne.n	8016562 <_vfiprintf_r+0x5a>
 8016528:	6874      	ldr	r4, [r6, #4]
 801652a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801652c:	07db      	lsls	r3, r3, #31
 801652e:	d405      	bmi.n	801653c <_vfiprintf_r+0x34>
 8016530:	89a3      	ldrh	r3, [r4, #12]
 8016532:	059b      	lsls	r3, r3, #22
 8016534:	d402      	bmi.n	801653c <_vfiprintf_r+0x34>
 8016536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016538:	f7ff ff69 	bl	801640e <__retarget_lock_acquire_recursive>
 801653c:	89a3      	ldrh	r3, [r4, #12]
 801653e:	071b      	lsls	r3, r3, #28
 8016540:	d502      	bpl.n	8016548 <_vfiprintf_r+0x40>
 8016542:	6923      	ldr	r3, [r4, #16]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d11d      	bne.n	8016584 <_vfiprintf_r+0x7c>
 8016548:	0021      	movs	r1, r4
 801654a:	0030      	movs	r0, r6
 801654c:	f000 f97a 	bl	8016844 <__swsetup_r>
 8016550:	2800      	cmp	r0, #0
 8016552:	d017      	beq.n	8016584 <_vfiprintf_r+0x7c>
 8016554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016556:	07db      	lsls	r3, r3, #31
 8016558:	d50d      	bpl.n	8016576 <_vfiprintf_r+0x6e>
 801655a:	2001      	movs	r0, #1
 801655c:	4240      	negs	r0, r0
 801655e:	b021      	add	sp, #132	; 0x84
 8016560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016562:	4b7f      	ldr	r3, [pc, #508]	; (8016760 <_vfiprintf_r+0x258>)
 8016564:	429c      	cmp	r4, r3
 8016566:	d101      	bne.n	801656c <_vfiprintf_r+0x64>
 8016568:	68b4      	ldr	r4, [r6, #8]
 801656a:	e7de      	b.n	801652a <_vfiprintf_r+0x22>
 801656c:	4b7d      	ldr	r3, [pc, #500]	; (8016764 <_vfiprintf_r+0x25c>)
 801656e:	429c      	cmp	r4, r3
 8016570:	d1db      	bne.n	801652a <_vfiprintf_r+0x22>
 8016572:	68f4      	ldr	r4, [r6, #12]
 8016574:	e7d9      	b.n	801652a <_vfiprintf_r+0x22>
 8016576:	89a3      	ldrh	r3, [r4, #12]
 8016578:	059b      	lsls	r3, r3, #22
 801657a:	d4ee      	bmi.n	801655a <_vfiprintf_r+0x52>
 801657c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801657e:	f7ff ff47 	bl	8016410 <__retarget_lock_release_recursive>
 8016582:	e7ea      	b.n	801655a <_vfiprintf_r+0x52>
 8016584:	2300      	movs	r3, #0
 8016586:	ad08      	add	r5, sp, #32
 8016588:	616b      	str	r3, [r5, #20]
 801658a:	3320      	adds	r3, #32
 801658c:	766b      	strb	r3, [r5, #25]
 801658e:	3310      	adds	r3, #16
 8016590:	76ab      	strb	r3, [r5, #26]
 8016592:	9707      	str	r7, [sp, #28]
 8016594:	9f03      	ldr	r7, [sp, #12]
 8016596:	783b      	ldrb	r3, [r7, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <_vfiprintf_r+0x98>
 801659c:	2b25      	cmp	r3, #37	; 0x25
 801659e:	d14e      	bne.n	801663e <_vfiprintf_r+0x136>
 80165a0:	9b03      	ldr	r3, [sp, #12]
 80165a2:	1afb      	subs	r3, r7, r3
 80165a4:	9305      	str	r3, [sp, #20]
 80165a6:	9b03      	ldr	r3, [sp, #12]
 80165a8:	429f      	cmp	r7, r3
 80165aa:	d00d      	beq.n	80165c8 <_vfiprintf_r+0xc0>
 80165ac:	9b05      	ldr	r3, [sp, #20]
 80165ae:	0021      	movs	r1, r4
 80165b0:	0030      	movs	r0, r6
 80165b2:	9a03      	ldr	r2, [sp, #12]
 80165b4:	f7ff ff96 	bl	80164e4 <__sfputs_r>
 80165b8:	1c43      	adds	r3, r0, #1
 80165ba:	d100      	bne.n	80165be <_vfiprintf_r+0xb6>
 80165bc:	e0b5      	b.n	801672a <_vfiprintf_r+0x222>
 80165be:	696a      	ldr	r2, [r5, #20]
 80165c0:	9b05      	ldr	r3, [sp, #20]
 80165c2:	4694      	mov	ip, r2
 80165c4:	4463      	add	r3, ip
 80165c6:	616b      	str	r3, [r5, #20]
 80165c8:	783b      	ldrb	r3, [r7, #0]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d100      	bne.n	80165d0 <_vfiprintf_r+0xc8>
 80165ce:	e0ac      	b.n	801672a <_vfiprintf_r+0x222>
 80165d0:	2201      	movs	r2, #1
 80165d2:	1c7b      	adds	r3, r7, #1
 80165d4:	9303      	str	r3, [sp, #12]
 80165d6:	2300      	movs	r3, #0
 80165d8:	4252      	negs	r2, r2
 80165da:	606a      	str	r2, [r5, #4]
 80165dc:	a904      	add	r1, sp, #16
 80165de:	3254      	adds	r2, #84	; 0x54
 80165e0:	1852      	adds	r2, r2, r1
 80165e2:	602b      	str	r3, [r5, #0]
 80165e4:	60eb      	str	r3, [r5, #12]
 80165e6:	60ab      	str	r3, [r5, #8]
 80165e8:	7013      	strb	r3, [r2, #0]
 80165ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80165ec:	9b03      	ldr	r3, [sp, #12]
 80165ee:	2205      	movs	r2, #5
 80165f0:	7819      	ldrb	r1, [r3, #0]
 80165f2:	485d      	ldr	r0, [pc, #372]	; (8016768 <_vfiprintf_r+0x260>)
 80165f4:	f7ff f996 	bl	8015924 <memchr>
 80165f8:	9b03      	ldr	r3, [sp, #12]
 80165fa:	1c5f      	adds	r7, r3, #1
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d120      	bne.n	8016642 <_vfiprintf_r+0x13a>
 8016600:	682a      	ldr	r2, [r5, #0]
 8016602:	06d3      	lsls	r3, r2, #27
 8016604:	d504      	bpl.n	8016610 <_vfiprintf_r+0x108>
 8016606:	2353      	movs	r3, #83	; 0x53
 8016608:	a904      	add	r1, sp, #16
 801660a:	185b      	adds	r3, r3, r1
 801660c:	2120      	movs	r1, #32
 801660e:	7019      	strb	r1, [r3, #0]
 8016610:	0713      	lsls	r3, r2, #28
 8016612:	d504      	bpl.n	801661e <_vfiprintf_r+0x116>
 8016614:	2353      	movs	r3, #83	; 0x53
 8016616:	a904      	add	r1, sp, #16
 8016618:	185b      	adds	r3, r3, r1
 801661a:	212b      	movs	r1, #43	; 0x2b
 801661c:	7019      	strb	r1, [r3, #0]
 801661e:	9b03      	ldr	r3, [sp, #12]
 8016620:	781b      	ldrb	r3, [r3, #0]
 8016622:	2b2a      	cmp	r3, #42	; 0x2a
 8016624:	d016      	beq.n	8016654 <_vfiprintf_r+0x14c>
 8016626:	2100      	movs	r1, #0
 8016628:	68eb      	ldr	r3, [r5, #12]
 801662a:	9f03      	ldr	r7, [sp, #12]
 801662c:	783a      	ldrb	r2, [r7, #0]
 801662e:	1c78      	adds	r0, r7, #1
 8016630:	3a30      	subs	r2, #48	; 0x30
 8016632:	4684      	mov	ip, r0
 8016634:	2a09      	cmp	r2, #9
 8016636:	d94f      	bls.n	80166d8 <_vfiprintf_r+0x1d0>
 8016638:	2900      	cmp	r1, #0
 801663a:	d111      	bne.n	8016660 <_vfiprintf_r+0x158>
 801663c:	e017      	b.n	801666e <_vfiprintf_r+0x166>
 801663e:	3701      	adds	r7, #1
 8016640:	e7a9      	b.n	8016596 <_vfiprintf_r+0x8e>
 8016642:	4b49      	ldr	r3, [pc, #292]	; (8016768 <_vfiprintf_r+0x260>)
 8016644:	682a      	ldr	r2, [r5, #0]
 8016646:	1ac0      	subs	r0, r0, r3
 8016648:	2301      	movs	r3, #1
 801664a:	4083      	lsls	r3, r0
 801664c:	4313      	orrs	r3, r2
 801664e:	602b      	str	r3, [r5, #0]
 8016650:	9703      	str	r7, [sp, #12]
 8016652:	e7cb      	b.n	80165ec <_vfiprintf_r+0xe4>
 8016654:	9b07      	ldr	r3, [sp, #28]
 8016656:	1d19      	adds	r1, r3, #4
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	9107      	str	r1, [sp, #28]
 801665c:	2b00      	cmp	r3, #0
 801665e:	db01      	blt.n	8016664 <_vfiprintf_r+0x15c>
 8016660:	930b      	str	r3, [sp, #44]	; 0x2c
 8016662:	e004      	b.n	801666e <_vfiprintf_r+0x166>
 8016664:	425b      	negs	r3, r3
 8016666:	60eb      	str	r3, [r5, #12]
 8016668:	2302      	movs	r3, #2
 801666a:	4313      	orrs	r3, r2
 801666c:	602b      	str	r3, [r5, #0]
 801666e:	783b      	ldrb	r3, [r7, #0]
 8016670:	2b2e      	cmp	r3, #46	; 0x2e
 8016672:	d10a      	bne.n	801668a <_vfiprintf_r+0x182>
 8016674:	787b      	ldrb	r3, [r7, #1]
 8016676:	2b2a      	cmp	r3, #42	; 0x2a
 8016678:	d137      	bne.n	80166ea <_vfiprintf_r+0x1e2>
 801667a:	9b07      	ldr	r3, [sp, #28]
 801667c:	3702      	adds	r7, #2
 801667e:	1d1a      	adds	r2, r3, #4
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	9207      	str	r2, [sp, #28]
 8016684:	2b00      	cmp	r3, #0
 8016686:	db2d      	blt.n	80166e4 <_vfiprintf_r+0x1dc>
 8016688:	9309      	str	r3, [sp, #36]	; 0x24
 801668a:	2203      	movs	r2, #3
 801668c:	7839      	ldrb	r1, [r7, #0]
 801668e:	4837      	ldr	r0, [pc, #220]	; (801676c <_vfiprintf_r+0x264>)
 8016690:	f7ff f948 	bl	8015924 <memchr>
 8016694:	2800      	cmp	r0, #0
 8016696:	d007      	beq.n	80166a8 <_vfiprintf_r+0x1a0>
 8016698:	4b34      	ldr	r3, [pc, #208]	; (801676c <_vfiprintf_r+0x264>)
 801669a:	682a      	ldr	r2, [r5, #0]
 801669c:	1ac0      	subs	r0, r0, r3
 801669e:	2340      	movs	r3, #64	; 0x40
 80166a0:	4083      	lsls	r3, r0
 80166a2:	4313      	orrs	r3, r2
 80166a4:	3701      	adds	r7, #1
 80166a6:	602b      	str	r3, [r5, #0]
 80166a8:	7839      	ldrb	r1, [r7, #0]
 80166aa:	1c7b      	adds	r3, r7, #1
 80166ac:	2206      	movs	r2, #6
 80166ae:	4830      	ldr	r0, [pc, #192]	; (8016770 <_vfiprintf_r+0x268>)
 80166b0:	9303      	str	r3, [sp, #12]
 80166b2:	7629      	strb	r1, [r5, #24]
 80166b4:	f7ff f936 	bl	8015924 <memchr>
 80166b8:	2800      	cmp	r0, #0
 80166ba:	d045      	beq.n	8016748 <_vfiprintf_r+0x240>
 80166bc:	4b2d      	ldr	r3, [pc, #180]	; (8016774 <_vfiprintf_r+0x26c>)
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d127      	bne.n	8016712 <_vfiprintf_r+0x20a>
 80166c2:	2207      	movs	r2, #7
 80166c4:	9b07      	ldr	r3, [sp, #28]
 80166c6:	3307      	adds	r3, #7
 80166c8:	4393      	bics	r3, r2
 80166ca:	3308      	adds	r3, #8
 80166cc:	9307      	str	r3, [sp, #28]
 80166ce:	696b      	ldr	r3, [r5, #20]
 80166d0:	9a04      	ldr	r2, [sp, #16]
 80166d2:	189b      	adds	r3, r3, r2
 80166d4:	616b      	str	r3, [r5, #20]
 80166d6:	e75d      	b.n	8016594 <_vfiprintf_r+0x8c>
 80166d8:	210a      	movs	r1, #10
 80166da:	434b      	muls	r3, r1
 80166dc:	4667      	mov	r7, ip
 80166de:	189b      	adds	r3, r3, r2
 80166e0:	3909      	subs	r1, #9
 80166e2:	e7a3      	b.n	801662c <_vfiprintf_r+0x124>
 80166e4:	2301      	movs	r3, #1
 80166e6:	425b      	negs	r3, r3
 80166e8:	e7ce      	b.n	8016688 <_vfiprintf_r+0x180>
 80166ea:	2300      	movs	r3, #0
 80166ec:	001a      	movs	r2, r3
 80166ee:	3701      	adds	r7, #1
 80166f0:	606b      	str	r3, [r5, #4]
 80166f2:	7839      	ldrb	r1, [r7, #0]
 80166f4:	1c78      	adds	r0, r7, #1
 80166f6:	3930      	subs	r1, #48	; 0x30
 80166f8:	4684      	mov	ip, r0
 80166fa:	2909      	cmp	r1, #9
 80166fc:	d903      	bls.n	8016706 <_vfiprintf_r+0x1fe>
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d0c3      	beq.n	801668a <_vfiprintf_r+0x182>
 8016702:	9209      	str	r2, [sp, #36]	; 0x24
 8016704:	e7c1      	b.n	801668a <_vfiprintf_r+0x182>
 8016706:	230a      	movs	r3, #10
 8016708:	435a      	muls	r2, r3
 801670a:	4667      	mov	r7, ip
 801670c:	1852      	adds	r2, r2, r1
 801670e:	3b09      	subs	r3, #9
 8016710:	e7ef      	b.n	80166f2 <_vfiprintf_r+0x1ea>
 8016712:	ab07      	add	r3, sp, #28
 8016714:	9300      	str	r3, [sp, #0]
 8016716:	0022      	movs	r2, r4
 8016718:	0029      	movs	r1, r5
 801671a:	0030      	movs	r0, r6
 801671c:	4b16      	ldr	r3, [pc, #88]	; (8016778 <_vfiprintf_r+0x270>)
 801671e:	f7fd fe61 	bl	80143e4 <_printf_float>
 8016722:	9004      	str	r0, [sp, #16]
 8016724:	9b04      	ldr	r3, [sp, #16]
 8016726:	3301      	adds	r3, #1
 8016728:	d1d1      	bne.n	80166ce <_vfiprintf_r+0x1c6>
 801672a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801672c:	07db      	lsls	r3, r3, #31
 801672e:	d405      	bmi.n	801673c <_vfiprintf_r+0x234>
 8016730:	89a3      	ldrh	r3, [r4, #12]
 8016732:	059b      	lsls	r3, r3, #22
 8016734:	d402      	bmi.n	801673c <_vfiprintf_r+0x234>
 8016736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016738:	f7ff fe6a 	bl	8016410 <__retarget_lock_release_recursive>
 801673c:	89a3      	ldrh	r3, [r4, #12]
 801673e:	065b      	lsls	r3, r3, #25
 8016740:	d500      	bpl.n	8016744 <_vfiprintf_r+0x23c>
 8016742:	e70a      	b.n	801655a <_vfiprintf_r+0x52>
 8016744:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016746:	e70a      	b.n	801655e <_vfiprintf_r+0x56>
 8016748:	ab07      	add	r3, sp, #28
 801674a:	9300      	str	r3, [sp, #0]
 801674c:	0022      	movs	r2, r4
 801674e:	0029      	movs	r1, r5
 8016750:	0030      	movs	r0, r6
 8016752:	4b09      	ldr	r3, [pc, #36]	; (8016778 <_vfiprintf_r+0x270>)
 8016754:	f7fe f8f8 	bl	8014948 <_printf_i>
 8016758:	e7e3      	b.n	8016722 <_vfiprintf_r+0x21a>
 801675a:	46c0      	nop			; (mov r8, r8)
 801675c:	08018824 	.word	0x08018824
 8016760:	08018844 	.word	0x08018844
 8016764:	08018804 	.word	0x08018804
 8016768:	080186ac 	.word	0x080186ac
 801676c:	080186b2 	.word	0x080186b2
 8016770:	080186b6 	.word	0x080186b6
 8016774:	080143e5 	.word	0x080143e5
 8016778:	080164e5 	.word	0x080164e5

0801677c <__swbuf_r>:
 801677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801677e:	0005      	movs	r5, r0
 8016780:	000e      	movs	r6, r1
 8016782:	0014      	movs	r4, r2
 8016784:	2800      	cmp	r0, #0
 8016786:	d004      	beq.n	8016792 <__swbuf_r+0x16>
 8016788:	6983      	ldr	r3, [r0, #24]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d101      	bne.n	8016792 <__swbuf_r+0x16>
 801678e:	f000 fa07 	bl	8016ba0 <__sinit>
 8016792:	4b22      	ldr	r3, [pc, #136]	; (801681c <__swbuf_r+0xa0>)
 8016794:	429c      	cmp	r4, r3
 8016796:	d12e      	bne.n	80167f6 <__swbuf_r+0x7a>
 8016798:	686c      	ldr	r4, [r5, #4]
 801679a:	69a3      	ldr	r3, [r4, #24]
 801679c:	60a3      	str	r3, [r4, #8]
 801679e:	89a3      	ldrh	r3, [r4, #12]
 80167a0:	071b      	lsls	r3, r3, #28
 80167a2:	d532      	bpl.n	801680a <__swbuf_r+0x8e>
 80167a4:	6923      	ldr	r3, [r4, #16]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d02f      	beq.n	801680a <__swbuf_r+0x8e>
 80167aa:	6823      	ldr	r3, [r4, #0]
 80167ac:	6922      	ldr	r2, [r4, #16]
 80167ae:	b2f7      	uxtb	r7, r6
 80167b0:	1a98      	subs	r0, r3, r2
 80167b2:	6963      	ldr	r3, [r4, #20]
 80167b4:	b2f6      	uxtb	r6, r6
 80167b6:	4283      	cmp	r3, r0
 80167b8:	dc05      	bgt.n	80167c6 <__swbuf_r+0x4a>
 80167ba:	0021      	movs	r1, r4
 80167bc:	0028      	movs	r0, r5
 80167be:	f000 f94d 	bl	8016a5c <_fflush_r>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	d127      	bne.n	8016816 <__swbuf_r+0x9a>
 80167c6:	68a3      	ldr	r3, [r4, #8]
 80167c8:	3001      	adds	r0, #1
 80167ca:	3b01      	subs	r3, #1
 80167cc:	60a3      	str	r3, [r4, #8]
 80167ce:	6823      	ldr	r3, [r4, #0]
 80167d0:	1c5a      	adds	r2, r3, #1
 80167d2:	6022      	str	r2, [r4, #0]
 80167d4:	701f      	strb	r7, [r3, #0]
 80167d6:	6963      	ldr	r3, [r4, #20]
 80167d8:	4283      	cmp	r3, r0
 80167da:	d004      	beq.n	80167e6 <__swbuf_r+0x6a>
 80167dc:	89a3      	ldrh	r3, [r4, #12]
 80167de:	07db      	lsls	r3, r3, #31
 80167e0:	d507      	bpl.n	80167f2 <__swbuf_r+0x76>
 80167e2:	2e0a      	cmp	r6, #10
 80167e4:	d105      	bne.n	80167f2 <__swbuf_r+0x76>
 80167e6:	0021      	movs	r1, r4
 80167e8:	0028      	movs	r0, r5
 80167ea:	f000 f937 	bl	8016a5c <_fflush_r>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	d111      	bne.n	8016816 <__swbuf_r+0x9a>
 80167f2:	0030      	movs	r0, r6
 80167f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167f6:	4b0a      	ldr	r3, [pc, #40]	; (8016820 <__swbuf_r+0xa4>)
 80167f8:	429c      	cmp	r4, r3
 80167fa:	d101      	bne.n	8016800 <__swbuf_r+0x84>
 80167fc:	68ac      	ldr	r4, [r5, #8]
 80167fe:	e7cc      	b.n	801679a <__swbuf_r+0x1e>
 8016800:	4b08      	ldr	r3, [pc, #32]	; (8016824 <__swbuf_r+0xa8>)
 8016802:	429c      	cmp	r4, r3
 8016804:	d1c9      	bne.n	801679a <__swbuf_r+0x1e>
 8016806:	68ec      	ldr	r4, [r5, #12]
 8016808:	e7c7      	b.n	801679a <__swbuf_r+0x1e>
 801680a:	0021      	movs	r1, r4
 801680c:	0028      	movs	r0, r5
 801680e:	f000 f819 	bl	8016844 <__swsetup_r>
 8016812:	2800      	cmp	r0, #0
 8016814:	d0c9      	beq.n	80167aa <__swbuf_r+0x2e>
 8016816:	2601      	movs	r6, #1
 8016818:	4276      	negs	r6, r6
 801681a:	e7ea      	b.n	80167f2 <__swbuf_r+0x76>
 801681c:	08018824 	.word	0x08018824
 8016820:	08018844 	.word	0x08018844
 8016824:	08018804 	.word	0x08018804

08016828 <__ascii_wctomb>:
 8016828:	0003      	movs	r3, r0
 801682a:	1e08      	subs	r0, r1, #0
 801682c:	d005      	beq.n	801683a <__ascii_wctomb+0x12>
 801682e:	2aff      	cmp	r2, #255	; 0xff
 8016830:	d904      	bls.n	801683c <__ascii_wctomb+0x14>
 8016832:	228a      	movs	r2, #138	; 0x8a
 8016834:	2001      	movs	r0, #1
 8016836:	601a      	str	r2, [r3, #0]
 8016838:	4240      	negs	r0, r0
 801683a:	4770      	bx	lr
 801683c:	2001      	movs	r0, #1
 801683e:	700a      	strb	r2, [r1, #0]
 8016840:	e7fb      	b.n	801683a <__ascii_wctomb+0x12>
	...

08016844 <__swsetup_r>:
 8016844:	4b37      	ldr	r3, [pc, #220]	; (8016924 <__swsetup_r+0xe0>)
 8016846:	b570      	push	{r4, r5, r6, lr}
 8016848:	681d      	ldr	r5, [r3, #0]
 801684a:	0006      	movs	r6, r0
 801684c:	000c      	movs	r4, r1
 801684e:	2d00      	cmp	r5, #0
 8016850:	d005      	beq.n	801685e <__swsetup_r+0x1a>
 8016852:	69ab      	ldr	r3, [r5, #24]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d102      	bne.n	801685e <__swsetup_r+0x1a>
 8016858:	0028      	movs	r0, r5
 801685a:	f000 f9a1 	bl	8016ba0 <__sinit>
 801685e:	4b32      	ldr	r3, [pc, #200]	; (8016928 <__swsetup_r+0xe4>)
 8016860:	429c      	cmp	r4, r3
 8016862:	d10f      	bne.n	8016884 <__swsetup_r+0x40>
 8016864:	686c      	ldr	r4, [r5, #4]
 8016866:	230c      	movs	r3, #12
 8016868:	5ee2      	ldrsh	r2, [r4, r3]
 801686a:	b293      	uxth	r3, r2
 801686c:	0711      	lsls	r1, r2, #28
 801686e:	d42d      	bmi.n	80168cc <__swsetup_r+0x88>
 8016870:	06d9      	lsls	r1, r3, #27
 8016872:	d411      	bmi.n	8016898 <__swsetup_r+0x54>
 8016874:	2309      	movs	r3, #9
 8016876:	2001      	movs	r0, #1
 8016878:	6033      	str	r3, [r6, #0]
 801687a:	3337      	adds	r3, #55	; 0x37
 801687c:	4313      	orrs	r3, r2
 801687e:	81a3      	strh	r3, [r4, #12]
 8016880:	4240      	negs	r0, r0
 8016882:	bd70      	pop	{r4, r5, r6, pc}
 8016884:	4b29      	ldr	r3, [pc, #164]	; (801692c <__swsetup_r+0xe8>)
 8016886:	429c      	cmp	r4, r3
 8016888:	d101      	bne.n	801688e <__swsetup_r+0x4a>
 801688a:	68ac      	ldr	r4, [r5, #8]
 801688c:	e7eb      	b.n	8016866 <__swsetup_r+0x22>
 801688e:	4b28      	ldr	r3, [pc, #160]	; (8016930 <__swsetup_r+0xec>)
 8016890:	429c      	cmp	r4, r3
 8016892:	d1e8      	bne.n	8016866 <__swsetup_r+0x22>
 8016894:	68ec      	ldr	r4, [r5, #12]
 8016896:	e7e6      	b.n	8016866 <__swsetup_r+0x22>
 8016898:	075b      	lsls	r3, r3, #29
 801689a:	d513      	bpl.n	80168c4 <__swsetup_r+0x80>
 801689c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801689e:	2900      	cmp	r1, #0
 80168a0:	d008      	beq.n	80168b4 <__swsetup_r+0x70>
 80168a2:	0023      	movs	r3, r4
 80168a4:	3344      	adds	r3, #68	; 0x44
 80168a6:	4299      	cmp	r1, r3
 80168a8:	d002      	beq.n	80168b0 <__swsetup_r+0x6c>
 80168aa:	0030      	movs	r0, r6
 80168ac:	f7fd fc0e 	bl	80140cc <_free_r>
 80168b0:	2300      	movs	r3, #0
 80168b2:	6363      	str	r3, [r4, #52]	; 0x34
 80168b4:	2224      	movs	r2, #36	; 0x24
 80168b6:	89a3      	ldrh	r3, [r4, #12]
 80168b8:	4393      	bics	r3, r2
 80168ba:	81a3      	strh	r3, [r4, #12]
 80168bc:	2300      	movs	r3, #0
 80168be:	6063      	str	r3, [r4, #4]
 80168c0:	6923      	ldr	r3, [r4, #16]
 80168c2:	6023      	str	r3, [r4, #0]
 80168c4:	2308      	movs	r3, #8
 80168c6:	89a2      	ldrh	r2, [r4, #12]
 80168c8:	4313      	orrs	r3, r2
 80168ca:	81a3      	strh	r3, [r4, #12]
 80168cc:	6923      	ldr	r3, [r4, #16]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d10b      	bne.n	80168ea <__swsetup_r+0xa6>
 80168d2:	21a0      	movs	r1, #160	; 0xa0
 80168d4:	2280      	movs	r2, #128	; 0x80
 80168d6:	89a3      	ldrh	r3, [r4, #12]
 80168d8:	0089      	lsls	r1, r1, #2
 80168da:	0092      	lsls	r2, r2, #2
 80168dc:	400b      	ands	r3, r1
 80168de:	4293      	cmp	r3, r2
 80168e0:	d003      	beq.n	80168ea <__swsetup_r+0xa6>
 80168e2:	0021      	movs	r1, r4
 80168e4:	0030      	movs	r0, r6
 80168e6:	f000 fa23 	bl	8016d30 <__smakebuf_r>
 80168ea:	220c      	movs	r2, #12
 80168ec:	5ea3      	ldrsh	r3, [r4, r2]
 80168ee:	2001      	movs	r0, #1
 80168f0:	001a      	movs	r2, r3
 80168f2:	b299      	uxth	r1, r3
 80168f4:	4002      	ands	r2, r0
 80168f6:	4203      	tst	r3, r0
 80168f8:	d00f      	beq.n	801691a <__swsetup_r+0xd6>
 80168fa:	2200      	movs	r2, #0
 80168fc:	60a2      	str	r2, [r4, #8]
 80168fe:	6962      	ldr	r2, [r4, #20]
 8016900:	4252      	negs	r2, r2
 8016902:	61a2      	str	r2, [r4, #24]
 8016904:	2000      	movs	r0, #0
 8016906:	6922      	ldr	r2, [r4, #16]
 8016908:	4282      	cmp	r2, r0
 801690a:	d1ba      	bne.n	8016882 <__swsetup_r+0x3e>
 801690c:	060a      	lsls	r2, r1, #24
 801690e:	d5b8      	bpl.n	8016882 <__swsetup_r+0x3e>
 8016910:	2240      	movs	r2, #64	; 0x40
 8016912:	4313      	orrs	r3, r2
 8016914:	81a3      	strh	r3, [r4, #12]
 8016916:	3801      	subs	r0, #1
 8016918:	e7b3      	b.n	8016882 <__swsetup_r+0x3e>
 801691a:	0788      	lsls	r0, r1, #30
 801691c:	d400      	bmi.n	8016920 <__swsetup_r+0xdc>
 801691e:	6962      	ldr	r2, [r4, #20]
 8016920:	60a2      	str	r2, [r4, #8]
 8016922:	e7ef      	b.n	8016904 <__swsetup_r+0xc0>
 8016924:	200030cc 	.word	0x200030cc
 8016928:	08018824 	.word	0x08018824
 801692c:	08018844 	.word	0x08018844
 8016930:	08018804 	.word	0x08018804

08016934 <abort>:
 8016934:	2006      	movs	r0, #6
 8016936:	b510      	push	{r4, lr}
 8016938:	f000 fa70 	bl	8016e1c <raise>
 801693c:	2001      	movs	r0, #1
 801693e:	f7ed f9cb 	bl	8003cd8 <_exit>
	...

08016944 <__sflush_r>:
 8016944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016946:	898b      	ldrh	r3, [r1, #12]
 8016948:	0005      	movs	r5, r0
 801694a:	000c      	movs	r4, r1
 801694c:	071a      	lsls	r2, r3, #28
 801694e:	d45f      	bmi.n	8016a10 <__sflush_r+0xcc>
 8016950:	684a      	ldr	r2, [r1, #4]
 8016952:	2a00      	cmp	r2, #0
 8016954:	dc04      	bgt.n	8016960 <__sflush_r+0x1c>
 8016956:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8016958:	2a00      	cmp	r2, #0
 801695a:	dc01      	bgt.n	8016960 <__sflush_r+0x1c>
 801695c:	2000      	movs	r0, #0
 801695e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016960:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016962:	2f00      	cmp	r7, #0
 8016964:	d0fa      	beq.n	801695c <__sflush_r+0x18>
 8016966:	2200      	movs	r2, #0
 8016968:	2180      	movs	r1, #128	; 0x80
 801696a:	682e      	ldr	r6, [r5, #0]
 801696c:	602a      	str	r2, [r5, #0]
 801696e:	001a      	movs	r2, r3
 8016970:	0149      	lsls	r1, r1, #5
 8016972:	400a      	ands	r2, r1
 8016974:	420b      	tst	r3, r1
 8016976:	d034      	beq.n	80169e2 <__sflush_r+0x9e>
 8016978:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801697a:	89a3      	ldrh	r3, [r4, #12]
 801697c:	075b      	lsls	r3, r3, #29
 801697e:	d506      	bpl.n	801698e <__sflush_r+0x4a>
 8016980:	6863      	ldr	r3, [r4, #4]
 8016982:	1ac0      	subs	r0, r0, r3
 8016984:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016986:	2b00      	cmp	r3, #0
 8016988:	d001      	beq.n	801698e <__sflush_r+0x4a>
 801698a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801698c:	1ac0      	subs	r0, r0, r3
 801698e:	0002      	movs	r2, r0
 8016990:	6a21      	ldr	r1, [r4, #32]
 8016992:	2300      	movs	r3, #0
 8016994:	0028      	movs	r0, r5
 8016996:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016998:	47b8      	blx	r7
 801699a:	89a1      	ldrh	r1, [r4, #12]
 801699c:	1c43      	adds	r3, r0, #1
 801699e:	d106      	bne.n	80169ae <__sflush_r+0x6a>
 80169a0:	682b      	ldr	r3, [r5, #0]
 80169a2:	2b1d      	cmp	r3, #29
 80169a4:	d831      	bhi.n	8016a0a <__sflush_r+0xc6>
 80169a6:	4a2c      	ldr	r2, [pc, #176]	; (8016a58 <__sflush_r+0x114>)
 80169a8:	40da      	lsrs	r2, r3
 80169aa:	07d3      	lsls	r3, r2, #31
 80169ac:	d52d      	bpl.n	8016a0a <__sflush_r+0xc6>
 80169ae:	2300      	movs	r3, #0
 80169b0:	6063      	str	r3, [r4, #4]
 80169b2:	6923      	ldr	r3, [r4, #16]
 80169b4:	6023      	str	r3, [r4, #0]
 80169b6:	04cb      	lsls	r3, r1, #19
 80169b8:	d505      	bpl.n	80169c6 <__sflush_r+0x82>
 80169ba:	1c43      	adds	r3, r0, #1
 80169bc:	d102      	bne.n	80169c4 <__sflush_r+0x80>
 80169be:	682b      	ldr	r3, [r5, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d100      	bne.n	80169c6 <__sflush_r+0x82>
 80169c4:	6560      	str	r0, [r4, #84]	; 0x54
 80169c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169c8:	602e      	str	r6, [r5, #0]
 80169ca:	2900      	cmp	r1, #0
 80169cc:	d0c6      	beq.n	801695c <__sflush_r+0x18>
 80169ce:	0023      	movs	r3, r4
 80169d0:	3344      	adds	r3, #68	; 0x44
 80169d2:	4299      	cmp	r1, r3
 80169d4:	d002      	beq.n	80169dc <__sflush_r+0x98>
 80169d6:	0028      	movs	r0, r5
 80169d8:	f7fd fb78 	bl	80140cc <_free_r>
 80169dc:	2000      	movs	r0, #0
 80169de:	6360      	str	r0, [r4, #52]	; 0x34
 80169e0:	e7bd      	b.n	801695e <__sflush_r+0x1a>
 80169e2:	2301      	movs	r3, #1
 80169e4:	0028      	movs	r0, r5
 80169e6:	6a21      	ldr	r1, [r4, #32]
 80169e8:	47b8      	blx	r7
 80169ea:	1c43      	adds	r3, r0, #1
 80169ec:	d1c5      	bne.n	801697a <__sflush_r+0x36>
 80169ee:	682b      	ldr	r3, [r5, #0]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d0c2      	beq.n	801697a <__sflush_r+0x36>
 80169f4:	2b1d      	cmp	r3, #29
 80169f6:	d001      	beq.n	80169fc <__sflush_r+0xb8>
 80169f8:	2b16      	cmp	r3, #22
 80169fa:	d101      	bne.n	8016a00 <__sflush_r+0xbc>
 80169fc:	602e      	str	r6, [r5, #0]
 80169fe:	e7ad      	b.n	801695c <__sflush_r+0x18>
 8016a00:	2340      	movs	r3, #64	; 0x40
 8016a02:	89a2      	ldrh	r2, [r4, #12]
 8016a04:	4313      	orrs	r3, r2
 8016a06:	81a3      	strh	r3, [r4, #12]
 8016a08:	e7a9      	b.n	801695e <__sflush_r+0x1a>
 8016a0a:	2340      	movs	r3, #64	; 0x40
 8016a0c:	430b      	orrs	r3, r1
 8016a0e:	e7fa      	b.n	8016a06 <__sflush_r+0xc2>
 8016a10:	690f      	ldr	r7, [r1, #16]
 8016a12:	2f00      	cmp	r7, #0
 8016a14:	d0a2      	beq.n	801695c <__sflush_r+0x18>
 8016a16:	680a      	ldr	r2, [r1, #0]
 8016a18:	600f      	str	r7, [r1, #0]
 8016a1a:	1bd2      	subs	r2, r2, r7
 8016a1c:	9201      	str	r2, [sp, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	079b      	lsls	r3, r3, #30
 8016a22:	d100      	bne.n	8016a26 <__sflush_r+0xe2>
 8016a24:	694a      	ldr	r2, [r1, #20]
 8016a26:	60a2      	str	r2, [r4, #8]
 8016a28:	9b01      	ldr	r3, [sp, #4]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	dc00      	bgt.n	8016a30 <__sflush_r+0xec>
 8016a2e:	e795      	b.n	801695c <__sflush_r+0x18>
 8016a30:	003a      	movs	r2, r7
 8016a32:	0028      	movs	r0, r5
 8016a34:	9b01      	ldr	r3, [sp, #4]
 8016a36:	6a21      	ldr	r1, [r4, #32]
 8016a38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016a3a:	47b0      	blx	r6
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	dc06      	bgt.n	8016a4e <__sflush_r+0x10a>
 8016a40:	2340      	movs	r3, #64	; 0x40
 8016a42:	2001      	movs	r0, #1
 8016a44:	89a2      	ldrh	r2, [r4, #12]
 8016a46:	4240      	negs	r0, r0
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	81a3      	strh	r3, [r4, #12]
 8016a4c:	e787      	b.n	801695e <__sflush_r+0x1a>
 8016a4e:	9b01      	ldr	r3, [sp, #4]
 8016a50:	183f      	adds	r7, r7, r0
 8016a52:	1a1b      	subs	r3, r3, r0
 8016a54:	9301      	str	r3, [sp, #4]
 8016a56:	e7e7      	b.n	8016a28 <__sflush_r+0xe4>
 8016a58:	20400001 	.word	0x20400001

08016a5c <_fflush_r>:
 8016a5c:	690b      	ldr	r3, [r1, #16]
 8016a5e:	b570      	push	{r4, r5, r6, lr}
 8016a60:	0005      	movs	r5, r0
 8016a62:	000c      	movs	r4, r1
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d102      	bne.n	8016a6e <_fflush_r+0x12>
 8016a68:	2500      	movs	r5, #0
 8016a6a:	0028      	movs	r0, r5
 8016a6c:	bd70      	pop	{r4, r5, r6, pc}
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	d004      	beq.n	8016a7c <_fflush_r+0x20>
 8016a72:	6983      	ldr	r3, [r0, #24]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d101      	bne.n	8016a7c <_fflush_r+0x20>
 8016a78:	f000 f892 	bl	8016ba0 <__sinit>
 8016a7c:	4b14      	ldr	r3, [pc, #80]	; (8016ad0 <_fflush_r+0x74>)
 8016a7e:	429c      	cmp	r4, r3
 8016a80:	d11b      	bne.n	8016aba <_fflush_r+0x5e>
 8016a82:	686c      	ldr	r4, [r5, #4]
 8016a84:	220c      	movs	r2, #12
 8016a86:	5ea3      	ldrsh	r3, [r4, r2]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d0ed      	beq.n	8016a68 <_fflush_r+0xc>
 8016a8c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016a8e:	07d2      	lsls	r2, r2, #31
 8016a90:	d404      	bmi.n	8016a9c <_fflush_r+0x40>
 8016a92:	059b      	lsls	r3, r3, #22
 8016a94:	d402      	bmi.n	8016a9c <_fflush_r+0x40>
 8016a96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a98:	f7ff fcb9 	bl	801640e <__retarget_lock_acquire_recursive>
 8016a9c:	0028      	movs	r0, r5
 8016a9e:	0021      	movs	r1, r4
 8016aa0:	f7ff ff50 	bl	8016944 <__sflush_r>
 8016aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016aa6:	0005      	movs	r5, r0
 8016aa8:	07db      	lsls	r3, r3, #31
 8016aaa:	d4de      	bmi.n	8016a6a <_fflush_r+0xe>
 8016aac:	89a3      	ldrh	r3, [r4, #12]
 8016aae:	059b      	lsls	r3, r3, #22
 8016ab0:	d4db      	bmi.n	8016a6a <_fflush_r+0xe>
 8016ab2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ab4:	f7ff fcac 	bl	8016410 <__retarget_lock_release_recursive>
 8016ab8:	e7d7      	b.n	8016a6a <_fflush_r+0xe>
 8016aba:	4b06      	ldr	r3, [pc, #24]	; (8016ad4 <_fflush_r+0x78>)
 8016abc:	429c      	cmp	r4, r3
 8016abe:	d101      	bne.n	8016ac4 <_fflush_r+0x68>
 8016ac0:	68ac      	ldr	r4, [r5, #8]
 8016ac2:	e7df      	b.n	8016a84 <_fflush_r+0x28>
 8016ac4:	4b04      	ldr	r3, [pc, #16]	; (8016ad8 <_fflush_r+0x7c>)
 8016ac6:	429c      	cmp	r4, r3
 8016ac8:	d1dc      	bne.n	8016a84 <_fflush_r+0x28>
 8016aca:	68ec      	ldr	r4, [r5, #12]
 8016acc:	e7da      	b.n	8016a84 <_fflush_r+0x28>
 8016ace:	46c0      	nop			; (mov r8, r8)
 8016ad0:	08018824 	.word	0x08018824
 8016ad4:	08018844 	.word	0x08018844
 8016ad8:	08018804 	.word	0x08018804

08016adc <std>:
 8016adc:	2300      	movs	r3, #0
 8016ade:	b510      	push	{r4, lr}
 8016ae0:	0004      	movs	r4, r0
 8016ae2:	6003      	str	r3, [r0, #0]
 8016ae4:	6043      	str	r3, [r0, #4]
 8016ae6:	6083      	str	r3, [r0, #8]
 8016ae8:	8181      	strh	r1, [r0, #12]
 8016aea:	6643      	str	r3, [r0, #100]	; 0x64
 8016aec:	0019      	movs	r1, r3
 8016aee:	81c2      	strh	r2, [r0, #14]
 8016af0:	6103      	str	r3, [r0, #16]
 8016af2:	6143      	str	r3, [r0, #20]
 8016af4:	6183      	str	r3, [r0, #24]
 8016af6:	2208      	movs	r2, #8
 8016af8:	305c      	adds	r0, #92	; 0x5c
 8016afa:	f7fd fade 	bl	80140ba <memset>
 8016afe:	4b05      	ldr	r3, [pc, #20]	; (8016b14 <std+0x38>)
 8016b00:	6224      	str	r4, [r4, #32]
 8016b02:	6263      	str	r3, [r4, #36]	; 0x24
 8016b04:	4b04      	ldr	r3, [pc, #16]	; (8016b18 <std+0x3c>)
 8016b06:	62a3      	str	r3, [r4, #40]	; 0x28
 8016b08:	4b04      	ldr	r3, [pc, #16]	; (8016b1c <std+0x40>)
 8016b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016b0c:	4b04      	ldr	r3, [pc, #16]	; (8016b20 <std+0x44>)
 8016b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8016b10:	bd10      	pop	{r4, pc}
 8016b12:	46c0      	nop			; (mov r8, r8)
 8016b14:	08016e5d 	.word	0x08016e5d
 8016b18:	08016e85 	.word	0x08016e85
 8016b1c:	08016ebd 	.word	0x08016ebd
 8016b20:	08016ee9 	.word	0x08016ee9

08016b24 <_cleanup_r>:
 8016b24:	b510      	push	{r4, lr}
 8016b26:	4902      	ldr	r1, [pc, #8]	; (8016b30 <_cleanup_r+0xc>)
 8016b28:	f000 f8ba 	bl	8016ca0 <_fwalk_reent>
 8016b2c:	bd10      	pop	{r4, pc}
 8016b2e:	46c0      	nop			; (mov r8, r8)
 8016b30:	08016a5d 	.word	0x08016a5d

08016b34 <__sfmoreglue>:
 8016b34:	b570      	push	{r4, r5, r6, lr}
 8016b36:	2568      	movs	r5, #104	; 0x68
 8016b38:	1e4a      	subs	r2, r1, #1
 8016b3a:	4355      	muls	r5, r2
 8016b3c:	000e      	movs	r6, r1
 8016b3e:	0029      	movs	r1, r5
 8016b40:	3174      	adds	r1, #116	; 0x74
 8016b42:	f7fd fb2f 	bl	80141a4 <_malloc_r>
 8016b46:	1e04      	subs	r4, r0, #0
 8016b48:	d008      	beq.n	8016b5c <__sfmoreglue+0x28>
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	002a      	movs	r2, r5
 8016b4e:	6001      	str	r1, [r0, #0]
 8016b50:	6046      	str	r6, [r0, #4]
 8016b52:	300c      	adds	r0, #12
 8016b54:	60a0      	str	r0, [r4, #8]
 8016b56:	3268      	adds	r2, #104	; 0x68
 8016b58:	f7fd faaf 	bl	80140ba <memset>
 8016b5c:	0020      	movs	r0, r4
 8016b5e:	bd70      	pop	{r4, r5, r6, pc}

08016b60 <__sfp_lock_acquire>:
 8016b60:	b510      	push	{r4, lr}
 8016b62:	4802      	ldr	r0, [pc, #8]	; (8016b6c <__sfp_lock_acquire+0xc>)
 8016b64:	f7ff fc53 	bl	801640e <__retarget_lock_acquire_recursive>
 8016b68:	bd10      	pop	{r4, pc}
 8016b6a:	46c0      	nop			; (mov r8, r8)
 8016b6c:	20003a89 	.word	0x20003a89

08016b70 <__sfp_lock_release>:
 8016b70:	b510      	push	{r4, lr}
 8016b72:	4802      	ldr	r0, [pc, #8]	; (8016b7c <__sfp_lock_release+0xc>)
 8016b74:	f7ff fc4c 	bl	8016410 <__retarget_lock_release_recursive>
 8016b78:	bd10      	pop	{r4, pc}
 8016b7a:	46c0      	nop			; (mov r8, r8)
 8016b7c:	20003a89 	.word	0x20003a89

08016b80 <__sinit_lock_acquire>:
 8016b80:	b510      	push	{r4, lr}
 8016b82:	4802      	ldr	r0, [pc, #8]	; (8016b8c <__sinit_lock_acquire+0xc>)
 8016b84:	f7ff fc43 	bl	801640e <__retarget_lock_acquire_recursive>
 8016b88:	bd10      	pop	{r4, pc}
 8016b8a:	46c0      	nop			; (mov r8, r8)
 8016b8c:	20003a8a 	.word	0x20003a8a

08016b90 <__sinit_lock_release>:
 8016b90:	b510      	push	{r4, lr}
 8016b92:	4802      	ldr	r0, [pc, #8]	; (8016b9c <__sinit_lock_release+0xc>)
 8016b94:	f7ff fc3c 	bl	8016410 <__retarget_lock_release_recursive>
 8016b98:	bd10      	pop	{r4, pc}
 8016b9a:	46c0      	nop			; (mov r8, r8)
 8016b9c:	20003a8a 	.word	0x20003a8a

08016ba0 <__sinit>:
 8016ba0:	b513      	push	{r0, r1, r4, lr}
 8016ba2:	0004      	movs	r4, r0
 8016ba4:	f7ff ffec 	bl	8016b80 <__sinit_lock_acquire>
 8016ba8:	69a3      	ldr	r3, [r4, #24]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d002      	beq.n	8016bb4 <__sinit+0x14>
 8016bae:	f7ff ffef 	bl	8016b90 <__sinit_lock_release>
 8016bb2:	bd13      	pop	{r0, r1, r4, pc}
 8016bb4:	64a3      	str	r3, [r4, #72]	; 0x48
 8016bb6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8016bba:	4b13      	ldr	r3, [pc, #76]	; (8016c08 <__sinit+0x68>)
 8016bbc:	4a13      	ldr	r2, [pc, #76]	; (8016c0c <__sinit+0x6c>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8016bc2:	9301      	str	r3, [sp, #4]
 8016bc4:	42a3      	cmp	r3, r4
 8016bc6:	d101      	bne.n	8016bcc <__sinit+0x2c>
 8016bc8:	2301      	movs	r3, #1
 8016bca:	61a3      	str	r3, [r4, #24]
 8016bcc:	0020      	movs	r0, r4
 8016bce:	f000 f81f 	bl	8016c10 <__sfp>
 8016bd2:	6060      	str	r0, [r4, #4]
 8016bd4:	0020      	movs	r0, r4
 8016bd6:	f000 f81b 	bl	8016c10 <__sfp>
 8016bda:	60a0      	str	r0, [r4, #8]
 8016bdc:	0020      	movs	r0, r4
 8016bde:	f000 f817 	bl	8016c10 <__sfp>
 8016be2:	2200      	movs	r2, #0
 8016be4:	2104      	movs	r1, #4
 8016be6:	60e0      	str	r0, [r4, #12]
 8016be8:	6860      	ldr	r0, [r4, #4]
 8016bea:	f7ff ff77 	bl	8016adc <std>
 8016bee:	2201      	movs	r2, #1
 8016bf0:	2109      	movs	r1, #9
 8016bf2:	68a0      	ldr	r0, [r4, #8]
 8016bf4:	f7ff ff72 	bl	8016adc <std>
 8016bf8:	2202      	movs	r2, #2
 8016bfa:	2112      	movs	r1, #18
 8016bfc:	68e0      	ldr	r0, [r4, #12]
 8016bfe:	f7ff ff6d 	bl	8016adc <std>
 8016c02:	2301      	movs	r3, #1
 8016c04:	61a3      	str	r3, [r4, #24]
 8016c06:	e7d2      	b.n	8016bae <__sinit+0xe>
 8016c08:	08018488 	.word	0x08018488
 8016c0c:	08016b25 	.word	0x08016b25

08016c10 <__sfp>:
 8016c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c12:	0007      	movs	r7, r0
 8016c14:	f7ff ffa4 	bl	8016b60 <__sfp_lock_acquire>
 8016c18:	4b1f      	ldr	r3, [pc, #124]	; (8016c98 <__sfp+0x88>)
 8016c1a:	681e      	ldr	r6, [r3, #0]
 8016c1c:	69b3      	ldr	r3, [r6, #24]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d102      	bne.n	8016c28 <__sfp+0x18>
 8016c22:	0030      	movs	r0, r6
 8016c24:	f7ff ffbc 	bl	8016ba0 <__sinit>
 8016c28:	3648      	adds	r6, #72	; 0x48
 8016c2a:	68b4      	ldr	r4, [r6, #8]
 8016c2c:	6873      	ldr	r3, [r6, #4]
 8016c2e:	3b01      	subs	r3, #1
 8016c30:	d504      	bpl.n	8016c3c <__sfp+0x2c>
 8016c32:	6833      	ldr	r3, [r6, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d022      	beq.n	8016c7e <__sfp+0x6e>
 8016c38:	6836      	ldr	r6, [r6, #0]
 8016c3a:	e7f6      	b.n	8016c2a <__sfp+0x1a>
 8016c3c:	220c      	movs	r2, #12
 8016c3e:	5ea5      	ldrsh	r5, [r4, r2]
 8016c40:	2d00      	cmp	r5, #0
 8016c42:	d11a      	bne.n	8016c7a <__sfp+0x6a>
 8016c44:	0020      	movs	r0, r4
 8016c46:	4b15      	ldr	r3, [pc, #84]	; (8016c9c <__sfp+0x8c>)
 8016c48:	3058      	adds	r0, #88	; 0x58
 8016c4a:	60e3      	str	r3, [r4, #12]
 8016c4c:	6665      	str	r5, [r4, #100]	; 0x64
 8016c4e:	f7ff fbdd 	bl	801640c <__retarget_lock_init_recursive>
 8016c52:	f7ff ff8d 	bl	8016b70 <__sfp_lock_release>
 8016c56:	0020      	movs	r0, r4
 8016c58:	2208      	movs	r2, #8
 8016c5a:	0029      	movs	r1, r5
 8016c5c:	6025      	str	r5, [r4, #0]
 8016c5e:	60a5      	str	r5, [r4, #8]
 8016c60:	6065      	str	r5, [r4, #4]
 8016c62:	6125      	str	r5, [r4, #16]
 8016c64:	6165      	str	r5, [r4, #20]
 8016c66:	61a5      	str	r5, [r4, #24]
 8016c68:	305c      	adds	r0, #92	; 0x5c
 8016c6a:	f7fd fa26 	bl	80140ba <memset>
 8016c6e:	6365      	str	r5, [r4, #52]	; 0x34
 8016c70:	63a5      	str	r5, [r4, #56]	; 0x38
 8016c72:	64a5      	str	r5, [r4, #72]	; 0x48
 8016c74:	64e5      	str	r5, [r4, #76]	; 0x4c
 8016c76:	0020      	movs	r0, r4
 8016c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c7a:	3468      	adds	r4, #104	; 0x68
 8016c7c:	e7d7      	b.n	8016c2e <__sfp+0x1e>
 8016c7e:	2104      	movs	r1, #4
 8016c80:	0038      	movs	r0, r7
 8016c82:	f7ff ff57 	bl	8016b34 <__sfmoreglue>
 8016c86:	1e04      	subs	r4, r0, #0
 8016c88:	6030      	str	r0, [r6, #0]
 8016c8a:	d1d5      	bne.n	8016c38 <__sfp+0x28>
 8016c8c:	f7ff ff70 	bl	8016b70 <__sfp_lock_release>
 8016c90:	230c      	movs	r3, #12
 8016c92:	603b      	str	r3, [r7, #0]
 8016c94:	e7ef      	b.n	8016c76 <__sfp+0x66>
 8016c96:	46c0      	nop			; (mov r8, r8)
 8016c98:	08018488 	.word	0x08018488
 8016c9c:	ffff0001 	.word	0xffff0001

08016ca0 <_fwalk_reent>:
 8016ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ca2:	0004      	movs	r4, r0
 8016ca4:	0006      	movs	r6, r0
 8016ca6:	2700      	movs	r7, #0
 8016ca8:	9101      	str	r1, [sp, #4]
 8016caa:	3448      	adds	r4, #72	; 0x48
 8016cac:	6863      	ldr	r3, [r4, #4]
 8016cae:	68a5      	ldr	r5, [r4, #8]
 8016cb0:	9300      	str	r3, [sp, #0]
 8016cb2:	9b00      	ldr	r3, [sp, #0]
 8016cb4:	3b01      	subs	r3, #1
 8016cb6:	9300      	str	r3, [sp, #0]
 8016cb8:	d504      	bpl.n	8016cc4 <_fwalk_reent+0x24>
 8016cba:	6824      	ldr	r4, [r4, #0]
 8016cbc:	2c00      	cmp	r4, #0
 8016cbe:	d1f5      	bne.n	8016cac <_fwalk_reent+0xc>
 8016cc0:	0038      	movs	r0, r7
 8016cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016cc4:	89ab      	ldrh	r3, [r5, #12]
 8016cc6:	2b01      	cmp	r3, #1
 8016cc8:	d908      	bls.n	8016cdc <_fwalk_reent+0x3c>
 8016cca:	220e      	movs	r2, #14
 8016ccc:	5eab      	ldrsh	r3, [r5, r2]
 8016cce:	3301      	adds	r3, #1
 8016cd0:	d004      	beq.n	8016cdc <_fwalk_reent+0x3c>
 8016cd2:	0029      	movs	r1, r5
 8016cd4:	0030      	movs	r0, r6
 8016cd6:	9b01      	ldr	r3, [sp, #4]
 8016cd8:	4798      	blx	r3
 8016cda:	4307      	orrs	r7, r0
 8016cdc:	3568      	adds	r5, #104	; 0x68
 8016cde:	e7e8      	b.n	8016cb2 <_fwalk_reent+0x12>

08016ce0 <__swhatbuf_r>:
 8016ce0:	b570      	push	{r4, r5, r6, lr}
 8016ce2:	000e      	movs	r6, r1
 8016ce4:	001d      	movs	r5, r3
 8016ce6:	230e      	movs	r3, #14
 8016ce8:	5ec9      	ldrsh	r1, [r1, r3]
 8016cea:	0014      	movs	r4, r2
 8016cec:	b096      	sub	sp, #88	; 0x58
 8016cee:	2900      	cmp	r1, #0
 8016cf0:	da08      	bge.n	8016d04 <__swhatbuf_r+0x24>
 8016cf2:	220c      	movs	r2, #12
 8016cf4:	5eb3      	ldrsh	r3, [r6, r2]
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	602a      	str	r2, [r5, #0]
 8016cfa:	061b      	lsls	r3, r3, #24
 8016cfc:	d411      	bmi.n	8016d22 <__swhatbuf_r+0x42>
 8016cfe:	2380      	movs	r3, #128	; 0x80
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	e00f      	b.n	8016d24 <__swhatbuf_r+0x44>
 8016d04:	466a      	mov	r2, sp
 8016d06:	f000 f91b 	bl	8016f40 <_fstat_r>
 8016d0a:	2800      	cmp	r0, #0
 8016d0c:	dbf1      	blt.n	8016cf2 <__swhatbuf_r+0x12>
 8016d0e:	23f0      	movs	r3, #240	; 0xf0
 8016d10:	9901      	ldr	r1, [sp, #4]
 8016d12:	021b      	lsls	r3, r3, #8
 8016d14:	4019      	ands	r1, r3
 8016d16:	4b05      	ldr	r3, [pc, #20]	; (8016d2c <__swhatbuf_r+0x4c>)
 8016d18:	18c9      	adds	r1, r1, r3
 8016d1a:	424b      	negs	r3, r1
 8016d1c:	4159      	adcs	r1, r3
 8016d1e:	6029      	str	r1, [r5, #0]
 8016d20:	e7ed      	b.n	8016cfe <__swhatbuf_r+0x1e>
 8016d22:	2340      	movs	r3, #64	; 0x40
 8016d24:	2000      	movs	r0, #0
 8016d26:	6023      	str	r3, [r4, #0]
 8016d28:	b016      	add	sp, #88	; 0x58
 8016d2a:	bd70      	pop	{r4, r5, r6, pc}
 8016d2c:	ffffe000 	.word	0xffffe000

08016d30 <__smakebuf_r>:
 8016d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d32:	2602      	movs	r6, #2
 8016d34:	898b      	ldrh	r3, [r1, #12]
 8016d36:	0005      	movs	r5, r0
 8016d38:	000c      	movs	r4, r1
 8016d3a:	4233      	tst	r3, r6
 8016d3c:	d006      	beq.n	8016d4c <__smakebuf_r+0x1c>
 8016d3e:	0023      	movs	r3, r4
 8016d40:	3347      	adds	r3, #71	; 0x47
 8016d42:	6023      	str	r3, [r4, #0]
 8016d44:	6123      	str	r3, [r4, #16]
 8016d46:	2301      	movs	r3, #1
 8016d48:	6163      	str	r3, [r4, #20]
 8016d4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016d4c:	466a      	mov	r2, sp
 8016d4e:	ab01      	add	r3, sp, #4
 8016d50:	f7ff ffc6 	bl	8016ce0 <__swhatbuf_r>
 8016d54:	9900      	ldr	r1, [sp, #0]
 8016d56:	0007      	movs	r7, r0
 8016d58:	0028      	movs	r0, r5
 8016d5a:	f7fd fa23 	bl	80141a4 <_malloc_r>
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d108      	bne.n	8016d74 <__smakebuf_r+0x44>
 8016d62:	220c      	movs	r2, #12
 8016d64:	5ea3      	ldrsh	r3, [r4, r2]
 8016d66:	059a      	lsls	r2, r3, #22
 8016d68:	d4ef      	bmi.n	8016d4a <__smakebuf_r+0x1a>
 8016d6a:	2203      	movs	r2, #3
 8016d6c:	4393      	bics	r3, r2
 8016d6e:	431e      	orrs	r6, r3
 8016d70:	81a6      	strh	r6, [r4, #12]
 8016d72:	e7e4      	b.n	8016d3e <__smakebuf_r+0xe>
 8016d74:	4b0f      	ldr	r3, [pc, #60]	; (8016db4 <__smakebuf_r+0x84>)
 8016d76:	62ab      	str	r3, [r5, #40]	; 0x28
 8016d78:	2380      	movs	r3, #128	; 0x80
 8016d7a:	89a2      	ldrh	r2, [r4, #12]
 8016d7c:	6020      	str	r0, [r4, #0]
 8016d7e:	4313      	orrs	r3, r2
 8016d80:	81a3      	strh	r3, [r4, #12]
 8016d82:	9b00      	ldr	r3, [sp, #0]
 8016d84:	6120      	str	r0, [r4, #16]
 8016d86:	6163      	str	r3, [r4, #20]
 8016d88:	9b01      	ldr	r3, [sp, #4]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d00d      	beq.n	8016daa <__smakebuf_r+0x7a>
 8016d8e:	0028      	movs	r0, r5
 8016d90:	230e      	movs	r3, #14
 8016d92:	5ee1      	ldrsh	r1, [r4, r3]
 8016d94:	f000 f8e6 	bl	8016f64 <_isatty_r>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	d006      	beq.n	8016daa <__smakebuf_r+0x7a>
 8016d9c:	2203      	movs	r2, #3
 8016d9e:	89a3      	ldrh	r3, [r4, #12]
 8016da0:	4393      	bics	r3, r2
 8016da2:	001a      	movs	r2, r3
 8016da4:	2301      	movs	r3, #1
 8016da6:	4313      	orrs	r3, r2
 8016da8:	81a3      	strh	r3, [r4, #12]
 8016daa:	89a0      	ldrh	r0, [r4, #12]
 8016dac:	4307      	orrs	r7, r0
 8016dae:	81a7      	strh	r7, [r4, #12]
 8016db0:	e7cb      	b.n	8016d4a <__smakebuf_r+0x1a>
 8016db2:	46c0      	nop			; (mov r8, r8)
 8016db4:	08016b25 	.word	0x08016b25

08016db8 <_malloc_usable_size_r>:
 8016db8:	1f0b      	subs	r3, r1, #4
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	1f18      	subs	r0, r3, #4
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	da01      	bge.n	8016dc6 <_malloc_usable_size_r+0xe>
 8016dc2:	580b      	ldr	r3, [r1, r0]
 8016dc4:	18c0      	adds	r0, r0, r3
 8016dc6:	4770      	bx	lr

08016dc8 <_raise_r>:
 8016dc8:	b570      	push	{r4, r5, r6, lr}
 8016dca:	0004      	movs	r4, r0
 8016dcc:	000d      	movs	r5, r1
 8016dce:	291f      	cmp	r1, #31
 8016dd0:	d904      	bls.n	8016ddc <_raise_r+0x14>
 8016dd2:	2316      	movs	r3, #22
 8016dd4:	6003      	str	r3, [r0, #0]
 8016dd6:	2001      	movs	r0, #1
 8016dd8:	4240      	negs	r0, r0
 8016dda:	bd70      	pop	{r4, r5, r6, pc}
 8016ddc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d004      	beq.n	8016dec <_raise_r+0x24>
 8016de2:	008a      	lsls	r2, r1, #2
 8016de4:	189b      	adds	r3, r3, r2
 8016de6:	681a      	ldr	r2, [r3, #0]
 8016de8:	2a00      	cmp	r2, #0
 8016dea:	d108      	bne.n	8016dfe <_raise_r+0x36>
 8016dec:	0020      	movs	r0, r4
 8016dee:	f000 f831 	bl	8016e54 <_getpid_r>
 8016df2:	002a      	movs	r2, r5
 8016df4:	0001      	movs	r1, r0
 8016df6:	0020      	movs	r0, r4
 8016df8:	f000 f81a 	bl	8016e30 <_kill_r>
 8016dfc:	e7ed      	b.n	8016dda <_raise_r+0x12>
 8016dfe:	2000      	movs	r0, #0
 8016e00:	2a01      	cmp	r2, #1
 8016e02:	d0ea      	beq.n	8016dda <_raise_r+0x12>
 8016e04:	1c51      	adds	r1, r2, #1
 8016e06:	d103      	bne.n	8016e10 <_raise_r+0x48>
 8016e08:	2316      	movs	r3, #22
 8016e0a:	3001      	adds	r0, #1
 8016e0c:	6023      	str	r3, [r4, #0]
 8016e0e:	e7e4      	b.n	8016dda <_raise_r+0x12>
 8016e10:	2400      	movs	r4, #0
 8016e12:	0028      	movs	r0, r5
 8016e14:	601c      	str	r4, [r3, #0]
 8016e16:	4790      	blx	r2
 8016e18:	0020      	movs	r0, r4
 8016e1a:	e7de      	b.n	8016dda <_raise_r+0x12>

08016e1c <raise>:
 8016e1c:	b510      	push	{r4, lr}
 8016e1e:	4b03      	ldr	r3, [pc, #12]	; (8016e2c <raise+0x10>)
 8016e20:	0001      	movs	r1, r0
 8016e22:	6818      	ldr	r0, [r3, #0]
 8016e24:	f7ff ffd0 	bl	8016dc8 <_raise_r>
 8016e28:	bd10      	pop	{r4, pc}
 8016e2a:	46c0      	nop			; (mov r8, r8)
 8016e2c:	200030cc 	.word	0x200030cc

08016e30 <_kill_r>:
 8016e30:	2300      	movs	r3, #0
 8016e32:	b570      	push	{r4, r5, r6, lr}
 8016e34:	4d06      	ldr	r5, [pc, #24]	; (8016e50 <_kill_r+0x20>)
 8016e36:	0004      	movs	r4, r0
 8016e38:	0008      	movs	r0, r1
 8016e3a:	0011      	movs	r1, r2
 8016e3c:	602b      	str	r3, [r5, #0]
 8016e3e:	f7ec ff3b 	bl	8003cb8 <_kill>
 8016e42:	1c43      	adds	r3, r0, #1
 8016e44:	d103      	bne.n	8016e4e <_kill_r+0x1e>
 8016e46:	682b      	ldr	r3, [r5, #0]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d000      	beq.n	8016e4e <_kill_r+0x1e>
 8016e4c:	6023      	str	r3, [r4, #0]
 8016e4e:	bd70      	pop	{r4, r5, r6, pc}
 8016e50:	20003a84 	.word	0x20003a84

08016e54 <_getpid_r>:
 8016e54:	b510      	push	{r4, lr}
 8016e56:	f7ec ff29 	bl	8003cac <_getpid>
 8016e5a:	bd10      	pop	{r4, pc}

08016e5c <__sread>:
 8016e5c:	b570      	push	{r4, r5, r6, lr}
 8016e5e:	000c      	movs	r4, r1
 8016e60:	250e      	movs	r5, #14
 8016e62:	5f49      	ldrsh	r1, [r1, r5]
 8016e64:	f000 f8a4 	bl	8016fb0 <_read_r>
 8016e68:	2800      	cmp	r0, #0
 8016e6a:	db03      	blt.n	8016e74 <__sread+0x18>
 8016e6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8016e6e:	181b      	adds	r3, r3, r0
 8016e70:	6563      	str	r3, [r4, #84]	; 0x54
 8016e72:	bd70      	pop	{r4, r5, r6, pc}
 8016e74:	89a3      	ldrh	r3, [r4, #12]
 8016e76:	4a02      	ldr	r2, [pc, #8]	; (8016e80 <__sread+0x24>)
 8016e78:	4013      	ands	r3, r2
 8016e7a:	81a3      	strh	r3, [r4, #12]
 8016e7c:	e7f9      	b.n	8016e72 <__sread+0x16>
 8016e7e:	46c0      	nop			; (mov r8, r8)
 8016e80:	ffffefff 	.word	0xffffefff

08016e84 <__swrite>:
 8016e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e86:	001f      	movs	r7, r3
 8016e88:	898b      	ldrh	r3, [r1, #12]
 8016e8a:	0005      	movs	r5, r0
 8016e8c:	000c      	movs	r4, r1
 8016e8e:	0016      	movs	r6, r2
 8016e90:	05db      	lsls	r3, r3, #23
 8016e92:	d505      	bpl.n	8016ea0 <__swrite+0x1c>
 8016e94:	230e      	movs	r3, #14
 8016e96:	5ec9      	ldrsh	r1, [r1, r3]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	2302      	movs	r3, #2
 8016e9c:	f000 f874 	bl	8016f88 <_lseek_r>
 8016ea0:	89a3      	ldrh	r3, [r4, #12]
 8016ea2:	4a05      	ldr	r2, [pc, #20]	; (8016eb8 <__swrite+0x34>)
 8016ea4:	0028      	movs	r0, r5
 8016ea6:	4013      	ands	r3, r2
 8016ea8:	81a3      	strh	r3, [r4, #12]
 8016eaa:	0032      	movs	r2, r6
 8016eac:	230e      	movs	r3, #14
 8016eae:	5ee1      	ldrsh	r1, [r4, r3]
 8016eb0:	003b      	movs	r3, r7
 8016eb2:	f000 f81f 	bl	8016ef4 <_write_r>
 8016eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016eb8:	ffffefff 	.word	0xffffefff

08016ebc <__sseek>:
 8016ebc:	b570      	push	{r4, r5, r6, lr}
 8016ebe:	000c      	movs	r4, r1
 8016ec0:	250e      	movs	r5, #14
 8016ec2:	5f49      	ldrsh	r1, [r1, r5]
 8016ec4:	f000 f860 	bl	8016f88 <_lseek_r>
 8016ec8:	89a3      	ldrh	r3, [r4, #12]
 8016eca:	1c42      	adds	r2, r0, #1
 8016ecc:	d103      	bne.n	8016ed6 <__sseek+0x1a>
 8016ece:	4a05      	ldr	r2, [pc, #20]	; (8016ee4 <__sseek+0x28>)
 8016ed0:	4013      	ands	r3, r2
 8016ed2:	81a3      	strh	r3, [r4, #12]
 8016ed4:	bd70      	pop	{r4, r5, r6, pc}
 8016ed6:	2280      	movs	r2, #128	; 0x80
 8016ed8:	0152      	lsls	r2, r2, #5
 8016eda:	4313      	orrs	r3, r2
 8016edc:	81a3      	strh	r3, [r4, #12]
 8016ede:	6560      	str	r0, [r4, #84]	; 0x54
 8016ee0:	e7f8      	b.n	8016ed4 <__sseek+0x18>
 8016ee2:	46c0      	nop			; (mov r8, r8)
 8016ee4:	ffffefff 	.word	0xffffefff

08016ee8 <__sclose>:
 8016ee8:	b510      	push	{r4, lr}
 8016eea:	230e      	movs	r3, #14
 8016eec:	5ec9      	ldrsh	r1, [r1, r3]
 8016eee:	f000 f815 	bl	8016f1c <_close_r>
 8016ef2:	bd10      	pop	{r4, pc}

08016ef4 <_write_r>:
 8016ef4:	b570      	push	{r4, r5, r6, lr}
 8016ef6:	0004      	movs	r4, r0
 8016ef8:	0008      	movs	r0, r1
 8016efa:	0011      	movs	r1, r2
 8016efc:	001a      	movs	r2, r3
 8016efe:	2300      	movs	r3, #0
 8016f00:	4d05      	ldr	r5, [pc, #20]	; (8016f18 <_write_r+0x24>)
 8016f02:	602b      	str	r3, [r5, #0]
 8016f04:	f7ec ff11 	bl	8003d2a <_write>
 8016f08:	1c43      	adds	r3, r0, #1
 8016f0a:	d103      	bne.n	8016f14 <_write_r+0x20>
 8016f0c:	682b      	ldr	r3, [r5, #0]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d000      	beq.n	8016f14 <_write_r+0x20>
 8016f12:	6023      	str	r3, [r4, #0]
 8016f14:	bd70      	pop	{r4, r5, r6, pc}
 8016f16:	46c0      	nop			; (mov r8, r8)
 8016f18:	20003a84 	.word	0x20003a84

08016f1c <_close_r>:
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	b570      	push	{r4, r5, r6, lr}
 8016f20:	4d06      	ldr	r5, [pc, #24]	; (8016f3c <_close_r+0x20>)
 8016f22:	0004      	movs	r4, r0
 8016f24:	0008      	movs	r0, r1
 8016f26:	602b      	str	r3, [r5, #0]
 8016f28:	f7ec ff1b 	bl	8003d62 <_close>
 8016f2c:	1c43      	adds	r3, r0, #1
 8016f2e:	d103      	bne.n	8016f38 <_close_r+0x1c>
 8016f30:	682b      	ldr	r3, [r5, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d000      	beq.n	8016f38 <_close_r+0x1c>
 8016f36:	6023      	str	r3, [r4, #0]
 8016f38:	bd70      	pop	{r4, r5, r6, pc}
 8016f3a:	46c0      	nop			; (mov r8, r8)
 8016f3c:	20003a84 	.word	0x20003a84

08016f40 <_fstat_r>:
 8016f40:	2300      	movs	r3, #0
 8016f42:	b570      	push	{r4, r5, r6, lr}
 8016f44:	4d06      	ldr	r5, [pc, #24]	; (8016f60 <_fstat_r+0x20>)
 8016f46:	0004      	movs	r4, r0
 8016f48:	0008      	movs	r0, r1
 8016f4a:	0011      	movs	r1, r2
 8016f4c:	602b      	str	r3, [r5, #0]
 8016f4e:	f7ec ff12 	bl	8003d76 <_fstat>
 8016f52:	1c43      	adds	r3, r0, #1
 8016f54:	d103      	bne.n	8016f5e <_fstat_r+0x1e>
 8016f56:	682b      	ldr	r3, [r5, #0]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d000      	beq.n	8016f5e <_fstat_r+0x1e>
 8016f5c:	6023      	str	r3, [r4, #0]
 8016f5e:	bd70      	pop	{r4, r5, r6, pc}
 8016f60:	20003a84 	.word	0x20003a84

08016f64 <_isatty_r>:
 8016f64:	2300      	movs	r3, #0
 8016f66:	b570      	push	{r4, r5, r6, lr}
 8016f68:	4d06      	ldr	r5, [pc, #24]	; (8016f84 <_isatty_r+0x20>)
 8016f6a:	0004      	movs	r4, r0
 8016f6c:	0008      	movs	r0, r1
 8016f6e:	602b      	str	r3, [r5, #0]
 8016f70:	f7ec ff0f 	bl	8003d92 <_isatty>
 8016f74:	1c43      	adds	r3, r0, #1
 8016f76:	d103      	bne.n	8016f80 <_isatty_r+0x1c>
 8016f78:	682b      	ldr	r3, [r5, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d000      	beq.n	8016f80 <_isatty_r+0x1c>
 8016f7e:	6023      	str	r3, [r4, #0]
 8016f80:	bd70      	pop	{r4, r5, r6, pc}
 8016f82:	46c0      	nop			; (mov r8, r8)
 8016f84:	20003a84 	.word	0x20003a84

08016f88 <_lseek_r>:
 8016f88:	b570      	push	{r4, r5, r6, lr}
 8016f8a:	0004      	movs	r4, r0
 8016f8c:	0008      	movs	r0, r1
 8016f8e:	0011      	movs	r1, r2
 8016f90:	001a      	movs	r2, r3
 8016f92:	2300      	movs	r3, #0
 8016f94:	4d05      	ldr	r5, [pc, #20]	; (8016fac <_lseek_r+0x24>)
 8016f96:	602b      	str	r3, [r5, #0]
 8016f98:	f7ec ff04 	bl	8003da4 <_lseek>
 8016f9c:	1c43      	adds	r3, r0, #1
 8016f9e:	d103      	bne.n	8016fa8 <_lseek_r+0x20>
 8016fa0:	682b      	ldr	r3, [r5, #0]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d000      	beq.n	8016fa8 <_lseek_r+0x20>
 8016fa6:	6023      	str	r3, [r4, #0]
 8016fa8:	bd70      	pop	{r4, r5, r6, pc}
 8016faa:	46c0      	nop			; (mov r8, r8)
 8016fac:	20003a84 	.word	0x20003a84

08016fb0 <_read_r>:
 8016fb0:	b570      	push	{r4, r5, r6, lr}
 8016fb2:	0004      	movs	r4, r0
 8016fb4:	0008      	movs	r0, r1
 8016fb6:	0011      	movs	r1, r2
 8016fb8:	001a      	movs	r2, r3
 8016fba:	2300      	movs	r3, #0
 8016fbc:	4d05      	ldr	r5, [pc, #20]	; (8016fd4 <_read_r+0x24>)
 8016fbe:	602b      	str	r3, [r5, #0]
 8016fc0:	f7ec fe96 	bl	8003cf0 <_read>
 8016fc4:	1c43      	adds	r3, r0, #1
 8016fc6:	d103      	bne.n	8016fd0 <_read_r+0x20>
 8016fc8:	682b      	ldr	r3, [r5, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d000      	beq.n	8016fd0 <_read_r+0x20>
 8016fce:	6023      	str	r3, [r4, #0]
 8016fd0:	bd70      	pop	{r4, r5, r6, pc}
 8016fd2:	46c0      	nop			; (mov r8, r8)
 8016fd4:	20003a84 	.word	0x20003a84

08016fd8 <pow>:
 8016fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016fda:	0014      	movs	r4, r2
 8016fdc:	001d      	movs	r5, r3
 8016fde:	9000      	str	r0, [sp, #0]
 8016fe0:	9101      	str	r1, [sp, #4]
 8016fe2:	f000 f867 	bl	80170b4 <__ieee754_pow>
 8016fe6:	0022      	movs	r2, r4
 8016fe8:	0006      	movs	r6, r0
 8016fea:	000f      	movs	r7, r1
 8016fec:	002b      	movs	r3, r5
 8016fee:	0020      	movs	r0, r4
 8016ff0:	0029      	movs	r1, r5
 8016ff2:	f7eb feb3 	bl	8002d5c <__aeabi_dcmpun>
 8016ff6:	2800      	cmp	r0, #0
 8016ff8:	d13f      	bne.n	801707a <pow+0xa2>
 8016ffa:	9800      	ldr	r0, [sp, #0]
 8016ffc:	9901      	ldr	r1, [sp, #4]
 8016ffe:	2200      	movs	r2, #0
 8017000:	2300      	movs	r3, #0
 8017002:	f7e9 fa29 	bl	8000458 <__aeabi_dcmpeq>
 8017006:	2800      	cmp	r0, #0
 8017008:	d019      	beq.n	801703e <pow+0x66>
 801700a:	2200      	movs	r2, #0
 801700c:	2300      	movs	r3, #0
 801700e:	0020      	movs	r0, r4
 8017010:	0029      	movs	r1, r5
 8017012:	f7e9 fa21 	bl	8000458 <__aeabi_dcmpeq>
 8017016:	2800      	cmp	r0, #0
 8017018:	d146      	bne.n	80170a8 <pow+0xd0>
 801701a:	0020      	movs	r0, r4
 801701c:	0029      	movs	r1, r5
 801701e:	f000 fe3d 	bl	8017c9c <finite>
 8017022:	2800      	cmp	r0, #0
 8017024:	d029      	beq.n	801707a <pow+0xa2>
 8017026:	2200      	movs	r2, #0
 8017028:	2300      	movs	r3, #0
 801702a:	0020      	movs	r0, r4
 801702c:	0029      	movs	r1, r5
 801702e:	f7e9 fa19 	bl	8000464 <__aeabi_dcmplt>
 8017032:	2800      	cmp	r0, #0
 8017034:	d021      	beq.n	801707a <pow+0xa2>
 8017036:	f7fd f803 	bl	8014040 <__errno>
 801703a:	2322      	movs	r3, #34	; 0x22
 801703c:	e01c      	b.n	8017078 <pow+0xa0>
 801703e:	0030      	movs	r0, r6
 8017040:	0039      	movs	r1, r7
 8017042:	f000 fe2b 	bl	8017c9c <finite>
 8017046:	2800      	cmp	r0, #0
 8017048:	d11b      	bne.n	8017082 <pow+0xaa>
 801704a:	9800      	ldr	r0, [sp, #0]
 801704c:	9901      	ldr	r1, [sp, #4]
 801704e:	f000 fe25 	bl	8017c9c <finite>
 8017052:	2800      	cmp	r0, #0
 8017054:	d015      	beq.n	8017082 <pow+0xaa>
 8017056:	0020      	movs	r0, r4
 8017058:	0029      	movs	r1, r5
 801705a:	f000 fe1f 	bl	8017c9c <finite>
 801705e:	2800      	cmp	r0, #0
 8017060:	d00f      	beq.n	8017082 <pow+0xaa>
 8017062:	0032      	movs	r2, r6
 8017064:	003b      	movs	r3, r7
 8017066:	0030      	movs	r0, r6
 8017068:	0039      	movs	r1, r7
 801706a:	f7eb fe77 	bl	8002d5c <__aeabi_dcmpun>
 801706e:	2800      	cmp	r0, #0
 8017070:	d0e1      	beq.n	8017036 <pow+0x5e>
 8017072:	f7fc ffe5 	bl	8014040 <__errno>
 8017076:	2321      	movs	r3, #33	; 0x21
 8017078:	6003      	str	r3, [r0, #0]
 801707a:	0030      	movs	r0, r6
 801707c:	0039      	movs	r1, r7
 801707e:	b003      	add	sp, #12
 8017080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017082:	2200      	movs	r2, #0
 8017084:	2300      	movs	r3, #0
 8017086:	0030      	movs	r0, r6
 8017088:	0039      	movs	r1, r7
 801708a:	f7e9 f9e5 	bl	8000458 <__aeabi_dcmpeq>
 801708e:	2800      	cmp	r0, #0
 8017090:	d0f3      	beq.n	801707a <pow+0xa2>
 8017092:	9800      	ldr	r0, [sp, #0]
 8017094:	9901      	ldr	r1, [sp, #4]
 8017096:	f000 fe01 	bl	8017c9c <finite>
 801709a:	2800      	cmp	r0, #0
 801709c:	d0ed      	beq.n	801707a <pow+0xa2>
 801709e:	0020      	movs	r0, r4
 80170a0:	0029      	movs	r1, r5
 80170a2:	f000 fdfb 	bl	8017c9c <finite>
 80170a6:	e7c4      	b.n	8017032 <pow+0x5a>
 80170a8:	2600      	movs	r6, #0
 80170aa:	4f01      	ldr	r7, [pc, #4]	; (80170b0 <pow+0xd8>)
 80170ac:	e7e5      	b.n	801707a <pow+0xa2>
 80170ae:	46c0      	nop			; (mov r8, r8)
 80170b0:	3ff00000 	.word	0x3ff00000

080170b4 <__ieee754_pow>:
 80170b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170b6:	b095      	sub	sp, #84	; 0x54
 80170b8:	9202      	str	r2, [sp, #8]
 80170ba:	9303      	str	r3, [sp, #12]
 80170bc:	9b03      	ldr	r3, [sp, #12]
 80170be:	9a03      	ldr	r2, [sp, #12]
 80170c0:	9304      	str	r3, [sp, #16]
 80170c2:	9b02      	ldr	r3, [sp, #8]
 80170c4:	0056      	lsls	r6, r2, #1
 80170c6:	001a      	movs	r2, r3
 80170c8:	0876      	lsrs	r6, r6, #1
 80170ca:	0007      	movs	r7, r0
 80170cc:	000d      	movs	r5, r1
 80170ce:	4332      	orrs	r2, r6
 80170d0:	d119      	bne.n	8017106 <__ieee754_pow+0x52>
 80170d2:	2180      	movs	r1, #128	; 0x80
 80170d4:	0309      	lsls	r1, r1, #12
 80170d6:	4069      	eors	r1, r5
 80170d8:	0002      	movs	r2, r0
 80170da:	000b      	movs	r3, r1
 80170dc:	1892      	adds	r2, r2, r2
 80170de:	415b      	adcs	r3, r3
 80170e0:	4989      	ldr	r1, [pc, #548]	; (8017308 <__ieee754_pow+0x254>)
 80170e2:	428b      	cmp	r3, r1
 80170e4:	d806      	bhi.n	80170f4 <__ieee754_pow+0x40>
 80170e6:	d001      	beq.n	80170ec <__ieee754_pow+0x38>
 80170e8:	f000 fcb6 	bl	8017a58 <__ieee754_pow+0x9a4>
 80170ec:	2a00      	cmp	r2, #0
 80170ee:	d101      	bne.n	80170f4 <__ieee754_pow+0x40>
 80170f0:	f000 fcb2 	bl	8017a58 <__ieee754_pow+0x9a4>
 80170f4:	9a02      	ldr	r2, [sp, #8]
 80170f6:	9b03      	ldr	r3, [sp, #12]
 80170f8:	0038      	movs	r0, r7
 80170fa:	0029      	movs	r1, r5
 80170fc:	f7ea f8f2 	bl	80012e4 <__aeabi_dadd>
 8017100:	9000      	str	r0, [sp, #0]
 8017102:	9101      	str	r1, [sp, #4]
 8017104:	e0ad      	b.n	8017262 <__ieee754_pow+0x1ae>
 8017106:	4a81      	ldr	r2, [pc, #516]	; (801730c <__ieee754_pow+0x258>)
 8017108:	004c      	lsls	r4, r1, #1
 801710a:	9108      	str	r1, [sp, #32]
 801710c:	9000      	str	r0, [sp, #0]
 801710e:	0864      	lsrs	r4, r4, #1
 8017110:	4294      	cmp	r4, r2
 8017112:	dc08      	bgt.n	8017126 <__ieee754_pow+0x72>
 8017114:	d101      	bne.n	801711a <__ieee754_pow+0x66>
 8017116:	2800      	cmp	r0, #0
 8017118:	d1ec      	bne.n	80170f4 <__ieee754_pow+0x40>
 801711a:	4a7c      	ldr	r2, [pc, #496]	; (801730c <__ieee754_pow+0x258>)
 801711c:	4296      	cmp	r6, r2
 801711e:	dc02      	bgt.n	8017126 <__ieee754_pow+0x72>
 8017120:	d10c      	bne.n	801713c <__ieee754_pow+0x88>
 8017122:	2b00      	cmp	r3, #0
 8017124:	d00a      	beq.n	801713c <__ieee754_pow+0x88>
 8017126:	4b7a      	ldr	r3, [pc, #488]	; (8017310 <__ieee754_pow+0x25c>)
 8017128:	18eb      	adds	r3, r5, r3
 801712a:	433b      	orrs	r3, r7
 801712c:	d1e2      	bne.n	80170f4 <__ieee754_pow+0x40>
 801712e:	2180      	movs	r1, #128	; 0x80
 8017130:	9803      	ldr	r0, [sp, #12]
 8017132:	0309      	lsls	r1, r1, #12
 8017134:	4048      	eors	r0, r1
 8017136:	0003      	movs	r3, r0
 8017138:	9a02      	ldr	r2, [sp, #8]
 801713a:	e7cf      	b.n	80170dc <__ieee754_pow+0x28>
 801713c:	2200      	movs	r2, #0
 801713e:	9206      	str	r2, [sp, #24]
 8017140:	2d00      	cmp	r5, #0
 8017142:	da69      	bge.n	8017218 <__ieee754_pow+0x164>
 8017144:	4a73      	ldr	r2, [pc, #460]	; (8017314 <__ieee754_pow+0x260>)
 8017146:	4296      	cmp	r6, r2
 8017148:	dc64      	bgt.n	8017214 <__ieee754_pow+0x160>
 801714a:	4a73      	ldr	r2, [pc, #460]	; (8017318 <__ieee754_pow+0x264>)
 801714c:	4296      	cmp	r6, r2
 801714e:	dd11      	ble.n	8017174 <__ieee754_pow+0xc0>
 8017150:	4972      	ldr	r1, [pc, #456]	; (801731c <__ieee754_pow+0x268>)
 8017152:	1532      	asrs	r2, r6, #20
 8017154:	1852      	adds	r2, r2, r1
 8017156:	2a14      	cmp	r2, #20
 8017158:	dd3c      	ble.n	80171d4 <__ieee754_pow+0x120>
 801715a:	2134      	movs	r1, #52	; 0x34
 801715c:	1a8a      	subs	r2, r1, r2
 801715e:	9902      	ldr	r1, [sp, #8]
 8017160:	40d1      	lsrs	r1, r2
 8017162:	0008      	movs	r0, r1
 8017164:	4090      	lsls	r0, r2
 8017166:	4298      	cmp	r0, r3
 8017168:	d104      	bne.n	8017174 <__ieee754_pow+0xc0>
 801716a:	2201      	movs	r2, #1
 801716c:	4011      	ands	r1, r2
 801716e:	1892      	adds	r2, r2, r2
 8017170:	1a52      	subs	r2, r2, r1
 8017172:	9206      	str	r2, [sp, #24]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d03c      	beq.n	80171f2 <__ieee754_pow+0x13e>
 8017178:	0038      	movs	r0, r7
 801717a:	0029      	movs	r1, r5
 801717c:	f000 fd8b 	bl	8017c96 <fabs>
 8017180:	9000      	str	r0, [sp, #0]
 8017182:	9101      	str	r1, [sp, #4]
 8017184:	2f00      	cmp	r7, #0
 8017186:	d000      	beq.n	801718a <__ieee754_pow+0xd6>
 8017188:	e094      	b.n	80172b4 <__ieee754_pow+0x200>
 801718a:	2c00      	cmp	r4, #0
 801718c:	d005      	beq.n	801719a <__ieee754_pow+0xe6>
 801718e:	4a64      	ldr	r2, [pc, #400]	; (8017320 <__ieee754_pow+0x26c>)
 8017190:	00ab      	lsls	r3, r5, #2
 8017192:	089b      	lsrs	r3, r3, #2
 8017194:	4293      	cmp	r3, r2
 8017196:	d000      	beq.n	801719a <__ieee754_pow+0xe6>
 8017198:	e08c      	b.n	80172b4 <__ieee754_pow+0x200>
 801719a:	9b04      	ldr	r3, [sp, #16]
 801719c:	2b00      	cmp	r3, #0
 801719e:	da07      	bge.n	80171b0 <__ieee754_pow+0xfc>
 80171a0:	9a00      	ldr	r2, [sp, #0]
 80171a2:	9b01      	ldr	r3, [sp, #4]
 80171a4:	2000      	movs	r0, #0
 80171a6:	495e      	ldr	r1, [pc, #376]	; (8017320 <__ieee754_pow+0x26c>)
 80171a8:	f7ea fbd8 	bl	800195c <__aeabi_ddiv>
 80171ac:	9000      	str	r0, [sp, #0]
 80171ae:	9101      	str	r1, [sp, #4]
 80171b0:	9b08      	ldr	r3, [sp, #32]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	da55      	bge.n	8017262 <__ieee754_pow+0x1ae>
 80171b6:	4b56      	ldr	r3, [pc, #344]	; (8017310 <__ieee754_pow+0x25c>)
 80171b8:	18e4      	adds	r4, r4, r3
 80171ba:	9b06      	ldr	r3, [sp, #24]
 80171bc:	431c      	orrs	r4, r3
 80171be:	d000      	beq.n	80171c2 <__ieee754_pow+0x10e>
 80171c0:	e06c      	b.n	801729c <__ieee754_pow+0x1e8>
 80171c2:	9a00      	ldr	r2, [sp, #0]
 80171c4:	9b01      	ldr	r3, [sp, #4]
 80171c6:	0010      	movs	r0, r2
 80171c8:	0019      	movs	r1, r3
 80171ca:	f7eb fa35 	bl	8002638 <__aeabi_dsub>
 80171ce:	0002      	movs	r2, r0
 80171d0:	000b      	movs	r3, r1
 80171d2:	e01c      	b.n	801720e <__ieee754_pow+0x15a>
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d1cf      	bne.n	8017178 <__ieee754_pow+0xc4>
 80171d8:	3314      	adds	r3, #20
 80171da:	1a9a      	subs	r2, r3, r2
 80171dc:	0033      	movs	r3, r6
 80171de:	4113      	asrs	r3, r2
 80171e0:	0019      	movs	r1, r3
 80171e2:	4091      	lsls	r1, r2
 80171e4:	42b1      	cmp	r1, r6
 80171e6:	d104      	bne.n	80171f2 <__ieee754_pow+0x13e>
 80171e8:	2201      	movs	r2, #1
 80171ea:	4013      	ands	r3, r2
 80171ec:	1892      	adds	r2, r2, r2
 80171ee:	1ad3      	subs	r3, r2, r3
 80171f0:	9306      	str	r3, [sp, #24]
 80171f2:	4b4b      	ldr	r3, [pc, #300]	; (8017320 <__ieee754_pow+0x26c>)
 80171f4:	429e      	cmp	r6, r3
 80171f6:	d138      	bne.n	801726a <__ieee754_pow+0x1b6>
 80171f8:	0038      	movs	r0, r7
 80171fa:	0029      	movs	r1, r5
 80171fc:	9b04      	ldr	r3, [sp, #16]
 80171fe:	9000      	str	r0, [sp, #0]
 8017200:	9101      	str	r1, [sp, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	da2d      	bge.n	8017262 <__ieee754_pow+0x1ae>
 8017206:	003a      	movs	r2, r7
 8017208:	002b      	movs	r3, r5
 801720a:	2000      	movs	r0, #0
 801720c:	4944      	ldr	r1, [pc, #272]	; (8017320 <__ieee754_pow+0x26c>)
 801720e:	f7ea fba5 	bl	800195c <__aeabi_ddiv>
 8017212:	e775      	b.n	8017100 <__ieee754_pow+0x4c>
 8017214:	2202      	movs	r2, #2
 8017216:	9206      	str	r2, [sp, #24]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d1ad      	bne.n	8017178 <__ieee754_pow+0xc4>
 801721c:	4b3b      	ldr	r3, [pc, #236]	; (801730c <__ieee754_pow+0x258>)
 801721e:	429e      	cmp	r6, r3
 8017220:	d1e7      	bne.n	80171f2 <__ieee754_pow+0x13e>
 8017222:	4b3b      	ldr	r3, [pc, #236]	; (8017310 <__ieee754_pow+0x25c>)
 8017224:	18e3      	adds	r3, r4, r3
 8017226:	431f      	orrs	r7, r3
 8017228:	d101      	bne.n	801722e <__ieee754_pow+0x17a>
 801722a:	f000 fc15 	bl	8017a58 <__ieee754_pow+0x9a4>
 801722e:	4b3a      	ldr	r3, [pc, #232]	; (8017318 <__ieee754_pow+0x264>)
 8017230:	429c      	cmp	r4, r3
 8017232:	dd09      	ble.n	8017248 <__ieee754_pow+0x194>
 8017234:	9b04      	ldr	r3, [sp, #16]
 8017236:	2b00      	cmp	r3, #0
 8017238:	da01      	bge.n	801723e <__ieee754_pow+0x18a>
 801723a:	f000 fc11 	bl	8017a60 <__ieee754_pow+0x9ac>
 801723e:	9b02      	ldr	r3, [sp, #8]
 8017240:	9c03      	ldr	r4, [sp, #12]
 8017242:	9300      	str	r3, [sp, #0]
 8017244:	9401      	str	r4, [sp, #4]
 8017246:	e00c      	b.n	8017262 <__ieee754_pow+0x1ae>
 8017248:	9b04      	ldr	r3, [sp, #16]
 801724a:	2b00      	cmp	r3, #0
 801724c:	db01      	blt.n	8017252 <__ieee754_pow+0x19e>
 801724e:	f000 fc07 	bl	8017a60 <__ieee754_pow+0x9ac>
 8017252:	2280      	movs	r2, #128	; 0x80
 8017254:	0612      	lsls	r2, r2, #24
 8017256:	4694      	mov	ip, r2
 8017258:	9b02      	ldr	r3, [sp, #8]
 801725a:	9300      	str	r3, [sp, #0]
 801725c:	9b03      	ldr	r3, [sp, #12]
 801725e:	4463      	add	r3, ip
 8017260:	9301      	str	r3, [sp, #4]
 8017262:	9800      	ldr	r0, [sp, #0]
 8017264:	9901      	ldr	r1, [sp, #4]
 8017266:	b015      	add	sp, #84	; 0x54
 8017268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801726a:	2380      	movs	r3, #128	; 0x80
 801726c:	9a04      	ldr	r2, [sp, #16]
 801726e:	05db      	lsls	r3, r3, #23
 8017270:	429a      	cmp	r2, r3
 8017272:	d106      	bne.n	8017282 <__ieee754_pow+0x1ce>
 8017274:	003a      	movs	r2, r7
 8017276:	002b      	movs	r3, r5
 8017278:	0038      	movs	r0, r7
 801727a:	0029      	movs	r1, r5
 801727c:	f7ea ff70 	bl	8002160 <__aeabi_dmul>
 8017280:	e73e      	b.n	8017100 <__ieee754_pow+0x4c>
 8017282:	4b28      	ldr	r3, [pc, #160]	; (8017324 <__ieee754_pow+0x270>)
 8017284:	9a04      	ldr	r2, [sp, #16]
 8017286:	429a      	cmp	r2, r3
 8017288:	d000      	beq.n	801728c <__ieee754_pow+0x1d8>
 801728a:	e775      	b.n	8017178 <__ieee754_pow+0xc4>
 801728c:	2d00      	cmp	r5, #0
 801728e:	da00      	bge.n	8017292 <__ieee754_pow+0x1de>
 8017290:	e772      	b.n	8017178 <__ieee754_pow+0xc4>
 8017292:	0038      	movs	r0, r7
 8017294:	0029      	movs	r1, r5
 8017296:	f000 fc17 	bl	8017ac8 <__ieee754_sqrt>
 801729a:	e731      	b.n	8017100 <__ieee754_pow+0x4c>
 801729c:	9b06      	ldr	r3, [sp, #24]
 801729e:	2b01      	cmp	r3, #1
 80172a0:	d1df      	bne.n	8017262 <__ieee754_pow+0x1ae>
 80172a2:	9800      	ldr	r0, [sp, #0]
 80172a4:	2180      	movs	r1, #128	; 0x80
 80172a6:	0002      	movs	r2, r0
 80172a8:	9801      	ldr	r0, [sp, #4]
 80172aa:	0609      	lsls	r1, r1, #24
 80172ac:	1843      	adds	r3, r0, r1
 80172ae:	9200      	str	r2, [sp, #0]
 80172b0:	9301      	str	r3, [sp, #4]
 80172b2:	e7d6      	b.n	8017262 <__ieee754_pow+0x1ae>
 80172b4:	0feb      	lsrs	r3, r5, #31
 80172b6:	3b01      	subs	r3, #1
 80172b8:	930e      	str	r3, [sp, #56]	; 0x38
 80172ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80172bc:	9b06      	ldr	r3, [sp, #24]
 80172be:	4313      	orrs	r3, r2
 80172c0:	d104      	bne.n	80172cc <__ieee754_pow+0x218>
 80172c2:	003a      	movs	r2, r7
 80172c4:	002b      	movs	r3, r5
 80172c6:	0038      	movs	r0, r7
 80172c8:	0029      	movs	r1, r5
 80172ca:	e77e      	b.n	80171ca <__ieee754_pow+0x116>
 80172cc:	4b16      	ldr	r3, [pc, #88]	; (8017328 <__ieee754_pow+0x274>)
 80172ce:	429e      	cmp	r6, r3
 80172d0:	dc00      	bgt.n	80172d4 <__ieee754_pow+0x220>
 80172d2:	e0ef      	b.n	80174b4 <__ieee754_pow+0x400>
 80172d4:	4b15      	ldr	r3, [pc, #84]	; (801732c <__ieee754_pow+0x278>)
 80172d6:	429e      	cmp	r6, r3
 80172d8:	dd09      	ble.n	80172ee <__ieee754_pow+0x23a>
 80172da:	4b0f      	ldr	r3, [pc, #60]	; (8017318 <__ieee754_pow+0x264>)
 80172dc:	429c      	cmp	r4, r3
 80172de:	dc0c      	bgt.n	80172fa <__ieee754_pow+0x246>
 80172e0:	9b04      	ldr	r3, [sp, #16]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	da0c      	bge.n	8017300 <__ieee754_pow+0x24c>
 80172e6:	2000      	movs	r0, #0
 80172e8:	f000 fcce 	bl	8017c88 <__math_oflow>
 80172ec:	e708      	b.n	8017100 <__ieee754_pow+0x4c>
 80172ee:	4b10      	ldr	r3, [pc, #64]	; (8017330 <__ieee754_pow+0x27c>)
 80172f0:	429c      	cmp	r4, r3
 80172f2:	ddf5      	ble.n	80172e0 <__ieee754_pow+0x22c>
 80172f4:	4b0a      	ldr	r3, [pc, #40]	; (8017320 <__ieee754_pow+0x26c>)
 80172f6:	429c      	cmp	r4, r3
 80172f8:	dd1c      	ble.n	8017334 <__ieee754_pow+0x280>
 80172fa:	9b04      	ldr	r3, [sp, #16]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	dcf2      	bgt.n	80172e6 <__ieee754_pow+0x232>
 8017300:	2000      	movs	r0, #0
 8017302:	f000 fcba 	bl	8017c7a <__math_uflow>
 8017306:	e6fb      	b.n	8017100 <__ieee754_pow+0x4c>
 8017308:	fff00000 	.word	0xfff00000
 801730c:	7ff00000 	.word	0x7ff00000
 8017310:	c0100000 	.word	0xc0100000
 8017314:	433fffff 	.word	0x433fffff
 8017318:	3fefffff 	.word	0x3fefffff
 801731c:	fffffc01 	.word	0xfffffc01
 8017320:	3ff00000 	.word	0x3ff00000
 8017324:	3fe00000 	.word	0x3fe00000
 8017328:	41e00000 	.word	0x41e00000
 801732c:	43f00000 	.word	0x43f00000
 8017330:	3feffffe 	.word	0x3feffffe
 8017334:	2200      	movs	r2, #0
 8017336:	9800      	ldr	r0, [sp, #0]
 8017338:	9901      	ldr	r1, [sp, #4]
 801733a:	4b52      	ldr	r3, [pc, #328]	; (8017484 <__ieee754_pow+0x3d0>)
 801733c:	f7eb f97c 	bl	8002638 <__aeabi_dsub>
 8017340:	22c0      	movs	r2, #192	; 0xc0
 8017342:	4b51      	ldr	r3, [pc, #324]	; (8017488 <__ieee754_pow+0x3d4>)
 8017344:	05d2      	lsls	r2, r2, #23
 8017346:	0004      	movs	r4, r0
 8017348:	000d      	movs	r5, r1
 801734a:	f7ea ff09 	bl	8002160 <__aeabi_dmul>
 801734e:	4a4f      	ldr	r2, [pc, #316]	; (801748c <__ieee754_pow+0x3d8>)
 8017350:	9000      	str	r0, [sp, #0]
 8017352:	9101      	str	r1, [sp, #4]
 8017354:	4b4e      	ldr	r3, [pc, #312]	; (8017490 <__ieee754_pow+0x3dc>)
 8017356:	0020      	movs	r0, r4
 8017358:	0029      	movs	r1, r5
 801735a:	f7ea ff01 	bl	8002160 <__aeabi_dmul>
 801735e:	2200      	movs	r2, #0
 8017360:	9004      	str	r0, [sp, #16]
 8017362:	9105      	str	r1, [sp, #20]
 8017364:	4b4b      	ldr	r3, [pc, #300]	; (8017494 <__ieee754_pow+0x3e0>)
 8017366:	0020      	movs	r0, r4
 8017368:	0029      	movs	r1, r5
 801736a:	f7ea fef9 	bl	8002160 <__aeabi_dmul>
 801736e:	0002      	movs	r2, r0
 8017370:	000b      	movs	r3, r1
 8017372:	4849      	ldr	r0, [pc, #292]	; (8017498 <__ieee754_pow+0x3e4>)
 8017374:	4949      	ldr	r1, [pc, #292]	; (801749c <__ieee754_pow+0x3e8>)
 8017376:	f7eb f95f 	bl	8002638 <__aeabi_dsub>
 801737a:	0022      	movs	r2, r4
 801737c:	002b      	movs	r3, r5
 801737e:	f7ea feef 	bl	8002160 <__aeabi_dmul>
 8017382:	0002      	movs	r2, r0
 8017384:	000b      	movs	r3, r1
 8017386:	2000      	movs	r0, #0
 8017388:	4945      	ldr	r1, [pc, #276]	; (80174a0 <__ieee754_pow+0x3ec>)
 801738a:	f7eb f955 	bl	8002638 <__aeabi_dsub>
 801738e:	0022      	movs	r2, r4
 8017390:	0006      	movs	r6, r0
 8017392:	000f      	movs	r7, r1
 8017394:	002b      	movs	r3, r5
 8017396:	0020      	movs	r0, r4
 8017398:	0029      	movs	r1, r5
 801739a:	f7ea fee1 	bl	8002160 <__aeabi_dmul>
 801739e:	0002      	movs	r2, r0
 80173a0:	000b      	movs	r3, r1
 80173a2:	0030      	movs	r0, r6
 80173a4:	0039      	movs	r1, r7
 80173a6:	f7ea fedb 	bl	8002160 <__aeabi_dmul>
 80173aa:	4a3e      	ldr	r2, [pc, #248]	; (80174a4 <__ieee754_pow+0x3f0>)
 80173ac:	4b36      	ldr	r3, [pc, #216]	; (8017488 <__ieee754_pow+0x3d4>)
 80173ae:	f7ea fed7 	bl	8002160 <__aeabi_dmul>
 80173b2:	0002      	movs	r2, r0
 80173b4:	000b      	movs	r3, r1
 80173b6:	9804      	ldr	r0, [sp, #16]
 80173b8:	9905      	ldr	r1, [sp, #20]
 80173ba:	f7eb f93d 	bl	8002638 <__aeabi_dsub>
 80173be:	0002      	movs	r2, r0
 80173c0:	000b      	movs	r3, r1
 80173c2:	0004      	movs	r4, r0
 80173c4:	000d      	movs	r5, r1
 80173c6:	9800      	ldr	r0, [sp, #0]
 80173c8:	9901      	ldr	r1, [sp, #4]
 80173ca:	f7e9 ff8b 	bl	80012e4 <__aeabi_dadd>
 80173ce:	9a00      	ldr	r2, [sp, #0]
 80173d0:	9b01      	ldr	r3, [sp, #4]
 80173d2:	2000      	movs	r0, #0
 80173d4:	000f      	movs	r7, r1
 80173d6:	0006      	movs	r6, r0
 80173d8:	f7eb f92e 	bl	8002638 <__aeabi_dsub>
 80173dc:	0002      	movs	r2, r0
 80173de:	000b      	movs	r3, r1
 80173e0:	0020      	movs	r0, r4
 80173e2:	0029      	movs	r1, r5
 80173e4:	f7eb f928 	bl	8002638 <__aeabi_dsub>
 80173e8:	9b06      	ldr	r3, [sp, #24]
 80173ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80173ec:	3b01      	subs	r3, #1
 80173ee:	9004      	str	r0, [sp, #16]
 80173f0:	9105      	str	r1, [sp, #20]
 80173f2:	4313      	orrs	r3, r2
 80173f4:	d000      	beq.n	80173f8 <__ieee754_pow+0x344>
 80173f6:	e1db      	b.n	80177b0 <__ieee754_pow+0x6fc>
 80173f8:	2300      	movs	r3, #0
 80173fa:	4c2b      	ldr	r4, [pc, #172]	; (80174a8 <__ieee754_pow+0x3f4>)
 80173fc:	9300      	str	r3, [sp, #0]
 80173fe:	9401      	str	r4, [sp, #4]
 8017400:	9c02      	ldr	r4, [sp, #8]
 8017402:	9d03      	ldr	r5, [sp, #12]
 8017404:	9802      	ldr	r0, [sp, #8]
 8017406:	9903      	ldr	r1, [sp, #12]
 8017408:	2400      	movs	r4, #0
 801740a:	002b      	movs	r3, r5
 801740c:	0022      	movs	r2, r4
 801740e:	f7eb f913 	bl	8002638 <__aeabi_dsub>
 8017412:	0032      	movs	r2, r6
 8017414:	003b      	movs	r3, r7
 8017416:	f7ea fea3 	bl	8002160 <__aeabi_dmul>
 801741a:	9a02      	ldr	r2, [sp, #8]
 801741c:	9b03      	ldr	r3, [sp, #12]
 801741e:	9006      	str	r0, [sp, #24]
 8017420:	9107      	str	r1, [sp, #28]
 8017422:	9804      	ldr	r0, [sp, #16]
 8017424:	9905      	ldr	r1, [sp, #20]
 8017426:	f7ea fe9b 	bl	8002160 <__aeabi_dmul>
 801742a:	0002      	movs	r2, r0
 801742c:	000b      	movs	r3, r1
 801742e:	9806      	ldr	r0, [sp, #24]
 8017430:	9907      	ldr	r1, [sp, #28]
 8017432:	f7e9 ff57 	bl	80012e4 <__aeabi_dadd>
 8017436:	0022      	movs	r2, r4
 8017438:	002b      	movs	r3, r5
 801743a:	9004      	str	r0, [sp, #16]
 801743c:	9105      	str	r1, [sp, #20]
 801743e:	0030      	movs	r0, r6
 8017440:	0039      	movs	r1, r7
 8017442:	f7ea fe8d 	bl	8002160 <__aeabi_dmul>
 8017446:	0006      	movs	r6, r0
 8017448:	000f      	movs	r7, r1
 801744a:	000b      	movs	r3, r1
 801744c:	0002      	movs	r2, r0
 801744e:	9804      	ldr	r0, [sp, #16]
 8017450:	9905      	ldr	r1, [sp, #20]
 8017452:	9606      	str	r6, [sp, #24]
 8017454:	9707      	str	r7, [sp, #28]
 8017456:	f7e9 ff45 	bl	80012e4 <__aeabi_dadd>
 801745a:	4b14      	ldr	r3, [pc, #80]	; (80174ac <__ieee754_pow+0x3f8>)
 801745c:	0005      	movs	r5, r0
 801745e:	000c      	movs	r4, r1
 8017460:	9108      	str	r1, [sp, #32]
 8017462:	4299      	cmp	r1, r3
 8017464:	dc00      	bgt.n	8017468 <__ieee754_pow+0x3b4>
 8017466:	e2d6      	b.n	8017a16 <__ieee754_pow+0x962>
 8017468:	4b11      	ldr	r3, [pc, #68]	; (80174b0 <__ieee754_pow+0x3fc>)
 801746a:	18cb      	adds	r3, r1, r3
 801746c:	4303      	orrs	r3, r0
 801746e:	d100      	bne.n	8017472 <__ieee754_pow+0x3be>
 8017470:	e1d8      	b.n	8017824 <__ieee754_pow+0x770>
 8017472:	9800      	ldr	r0, [sp, #0]
 8017474:	9901      	ldr	r1, [sp, #4]
 8017476:	2300      	movs	r3, #0
 8017478:	2200      	movs	r2, #0
 801747a:	f7e8 fff3 	bl	8000464 <__aeabi_dcmplt>
 801747e:	1e43      	subs	r3, r0, #1
 8017480:	4198      	sbcs	r0, r3
 8017482:	e731      	b.n	80172e8 <__ieee754_pow+0x234>
 8017484:	3ff00000 	.word	0x3ff00000
 8017488:	3ff71547 	.word	0x3ff71547
 801748c:	f85ddf44 	.word	0xf85ddf44
 8017490:	3e54ae0b 	.word	0x3e54ae0b
 8017494:	3fd00000 	.word	0x3fd00000
 8017498:	55555555 	.word	0x55555555
 801749c:	3fd55555 	.word	0x3fd55555
 80174a0:	3fe00000 	.word	0x3fe00000
 80174a4:	652b82fe 	.word	0x652b82fe
 80174a8:	bff00000 	.word	0xbff00000
 80174ac:	408fffff 	.word	0x408fffff
 80174b0:	bf700000 	.word	0xbf700000
 80174b4:	4bc0      	ldr	r3, [pc, #768]	; (80177b8 <__ieee754_pow+0x704>)
 80174b6:	2200      	movs	r2, #0
 80174b8:	422b      	tst	r3, r5
 80174ba:	d10a      	bne.n	80174d2 <__ieee754_pow+0x41e>
 80174bc:	9800      	ldr	r0, [sp, #0]
 80174be:	9901      	ldr	r1, [sp, #4]
 80174c0:	2200      	movs	r2, #0
 80174c2:	4bbe      	ldr	r3, [pc, #760]	; (80177bc <__ieee754_pow+0x708>)
 80174c4:	f7ea fe4c 	bl	8002160 <__aeabi_dmul>
 80174c8:	2235      	movs	r2, #53	; 0x35
 80174ca:	9000      	str	r0, [sp, #0]
 80174cc:	9101      	str	r1, [sp, #4]
 80174ce:	9c01      	ldr	r4, [sp, #4]
 80174d0:	4252      	negs	r2, r2
 80174d2:	49bb      	ldr	r1, [pc, #748]	; (80177c0 <__ieee754_pow+0x70c>)
 80174d4:	1523      	asrs	r3, r4, #20
 80174d6:	185b      	adds	r3, r3, r1
 80174d8:	189b      	adds	r3, r3, r2
 80174da:	0324      	lsls	r4, r4, #12
 80174dc:	4db9      	ldr	r5, [pc, #740]	; (80177c4 <__ieee754_pow+0x710>)
 80174de:	930d      	str	r3, [sp, #52]	; 0x34
 80174e0:	4bb9      	ldr	r3, [pc, #740]	; (80177c8 <__ieee754_pow+0x714>)
 80174e2:	0b22      	lsrs	r2, r4, #12
 80174e4:	4315      	orrs	r5, r2
 80174e6:	2400      	movs	r4, #0
 80174e8:	429a      	cmp	r2, r3
 80174ea:	dd09      	ble.n	8017500 <__ieee754_pow+0x44c>
 80174ec:	4bb7      	ldr	r3, [pc, #732]	; (80177cc <__ieee754_pow+0x718>)
 80174ee:	3401      	adds	r4, #1
 80174f0:	429a      	cmp	r2, r3
 80174f2:	dd05      	ble.n	8017500 <__ieee754_pow+0x44c>
 80174f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174f6:	191b      	adds	r3, r3, r4
 80174f8:	2400      	movs	r4, #0
 80174fa:	930d      	str	r3, [sp, #52]	; 0x34
 80174fc:	4bb4      	ldr	r3, [pc, #720]	; (80177d0 <__ieee754_pow+0x71c>)
 80174fe:	18ed      	adds	r5, r5, r3
 8017500:	00e3      	lsls	r3, r4, #3
 8017502:	930f      	str	r3, [sp, #60]	; 0x3c
 8017504:	4bb3      	ldr	r3, [pc, #716]	; (80177d4 <__ieee754_pow+0x720>)
 8017506:	00e2      	lsls	r2, r4, #3
 8017508:	189b      	adds	r3, r3, r2
 801750a:	9800      	ldr	r0, [sp, #0]
 801750c:	9901      	ldr	r1, [sp, #4]
 801750e:	681a      	ldr	r2, [r3, #0]
 8017510:	685b      	ldr	r3, [r3, #4]
 8017512:	0029      	movs	r1, r5
 8017514:	0006      	movs	r6, r0
 8017516:	920a      	str	r2, [sp, #40]	; 0x28
 8017518:	930b      	str	r3, [sp, #44]	; 0x2c
 801751a:	f7eb f88d 	bl	8002638 <__aeabi_dsub>
 801751e:	0032      	movs	r2, r6
 8017520:	002b      	movs	r3, r5
 8017522:	9010      	str	r0, [sp, #64]	; 0x40
 8017524:	9111      	str	r1, [sp, #68]	; 0x44
 8017526:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801752a:	f7e9 fedb 	bl	80012e4 <__aeabi_dadd>
 801752e:	0002      	movs	r2, r0
 8017530:	000b      	movs	r3, r1
 8017532:	2000      	movs	r0, #0
 8017534:	49a3      	ldr	r1, [pc, #652]	; (80177c4 <__ieee754_pow+0x710>)
 8017536:	f7ea fa11 	bl	800195c <__aeabi_ddiv>
 801753a:	0002      	movs	r2, r0
 801753c:	000b      	movs	r3, r1
 801753e:	9012      	str	r0, [sp, #72]	; 0x48
 8017540:	9113      	str	r1, [sp, #76]	; 0x4c
 8017542:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017544:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017546:	f7ea fe0b 	bl	8002160 <__aeabi_dmul>
 801754a:	9008      	str	r0, [sp, #32]
 801754c:	9109      	str	r1, [sp, #36]	; 0x24
 801754e:	9a08      	ldr	r2, [sp, #32]
 8017550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017552:	2180      	movs	r1, #128	; 0x80
 8017554:	9204      	str	r2, [sp, #16]
 8017556:	9305      	str	r3, [sp, #20]
 8017558:	2300      	movs	r3, #0
 801755a:	002f      	movs	r7, r5
 801755c:	0589      	lsls	r1, r1, #22
 801755e:	106d      	asrs	r5, r5, #1
 8017560:	430d      	orrs	r5, r1
 8017562:	2180      	movs	r1, #128	; 0x80
 8017564:	9304      	str	r3, [sp, #16]
 8017566:	9a04      	ldr	r2, [sp, #16]
 8017568:	9b05      	ldr	r3, [sp, #20]
 801756a:	9200      	str	r2, [sp, #0]
 801756c:	9301      	str	r3, [sp, #4]
 801756e:	2200      	movs	r2, #0
 8017570:	0309      	lsls	r1, r1, #12
 8017572:	186d      	adds	r5, r5, r1
 8017574:	04a1      	lsls	r1, r4, #18
 8017576:	186b      	adds	r3, r5, r1
 8017578:	9800      	ldr	r0, [sp, #0]
 801757a:	9901      	ldr	r1, [sp, #4]
 801757c:	0014      	movs	r4, r2
 801757e:	001d      	movs	r5, r3
 8017580:	f7ea fdee 	bl	8002160 <__aeabi_dmul>
 8017584:	0002      	movs	r2, r0
 8017586:	000b      	movs	r3, r1
 8017588:	9810      	ldr	r0, [sp, #64]	; 0x40
 801758a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801758c:	f7eb f854 	bl	8002638 <__aeabi_dsub>
 8017590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017594:	9010      	str	r0, [sp, #64]	; 0x40
 8017596:	9111      	str	r1, [sp, #68]	; 0x44
 8017598:	0020      	movs	r0, r4
 801759a:	0029      	movs	r1, r5
 801759c:	f7eb f84c 	bl	8002638 <__aeabi_dsub>
 80175a0:	0002      	movs	r2, r0
 80175a2:	000b      	movs	r3, r1
 80175a4:	0030      	movs	r0, r6
 80175a6:	0039      	movs	r1, r7
 80175a8:	f7eb f846 	bl	8002638 <__aeabi_dsub>
 80175ac:	9a00      	ldr	r2, [sp, #0]
 80175ae:	9b01      	ldr	r3, [sp, #4]
 80175b0:	f7ea fdd6 	bl	8002160 <__aeabi_dmul>
 80175b4:	0002      	movs	r2, r0
 80175b6:	000b      	movs	r3, r1
 80175b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80175ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80175bc:	f7eb f83c 	bl	8002638 <__aeabi_dsub>
 80175c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175c4:	f7ea fdcc 	bl	8002160 <__aeabi_dmul>
 80175c8:	9a08      	ldr	r2, [sp, #32]
 80175ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175cc:	900a      	str	r0, [sp, #40]	; 0x28
 80175ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80175d0:	0010      	movs	r0, r2
 80175d2:	0019      	movs	r1, r3
 80175d4:	f7ea fdc4 	bl	8002160 <__aeabi_dmul>
 80175d8:	0006      	movs	r6, r0
 80175da:	000f      	movs	r7, r1
 80175dc:	4a7e      	ldr	r2, [pc, #504]	; (80177d8 <__ieee754_pow+0x724>)
 80175de:	4b7f      	ldr	r3, [pc, #508]	; (80177dc <__ieee754_pow+0x728>)
 80175e0:	f7ea fdbe 	bl	8002160 <__aeabi_dmul>
 80175e4:	4a7e      	ldr	r2, [pc, #504]	; (80177e0 <__ieee754_pow+0x72c>)
 80175e6:	4b7f      	ldr	r3, [pc, #508]	; (80177e4 <__ieee754_pow+0x730>)
 80175e8:	f7e9 fe7c 	bl	80012e4 <__aeabi_dadd>
 80175ec:	0032      	movs	r2, r6
 80175ee:	003b      	movs	r3, r7
 80175f0:	f7ea fdb6 	bl	8002160 <__aeabi_dmul>
 80175f4:	4a7c      	ldr	r2, [pc, #496]	; (80177e8 <__ieee754_pow+0x734>)
 80175f6:	4b7d      	ldr	r3, [pc, #500]	; (80177ec <__ieee754_pow+0x738>)
 80175f8:	f7e9 fe74 	bl	80012e4 <__aeabi_dadd>
 80175fc:	0032      	movs	r2, r6
 80175fe:	003b      	movs	r3, r7
 8017600:	f7ea fdae 	bl	8002160 <__aeabi_dmul>
 8017604:	4a7a      	ldr	r2, [pc, #488]	; (80177f0 <__ieee754_pow+0x73c>)
 8017606:	4b7b      	ldr	r3, [pc, #492]	; (80177f4 <__ieee754_pow+0x740>)
 8017608:	f7e9 fe6c 	bl	80012e4 <__aeabi_dadd>
 801760c:	0032      	movs	r2, r6
 801760e:	003b      	movs	r3, r7
 8017610:	f7ea fda6 	bl	8002160 <__aeabi_dmul>
 8017614:	4a78      	ldr	r2, [pc, #480]	; (80177f8 <__ieee754_pow+0x744>)
 8017616:	4b79      	ldr	r3, [pc, #484]	; (80177fc <__ieee754_pow+0x748>)
 8017618:	f7e9 fe64 	bl	80012e4 <__aeabi_dadd>
 801761c:	0032      	movs	r2, r6
 801761e:	003b      	movs	r3, r7
 8017620:	f7ea fd9e 	bl	8002160 <__aeabi_dmul>
 8017624:	4a76      	ldr	r2, [pc, #472]	; (8017800 <__ieee754_pow+0x74c>)
 8017626:	4b77      	ldr	r3, [pc, #476]	; (8017804 <__ieee754_pow+0x750>)
 8017628:	f7e9 fe5c 	bl	80012e4 <__aeabi_dadd>
 801762c:	0032      	movs	r2, r6
 801762e:	0004      	movs	r4, r0
 8017630:	000d      	movs	r5, r1
 8017632:	003b      	movs	r3, r7
 8017634:	0030      	movs	r0, r6
 8017636:	0039      	movs	r1, r7
 8017638:	f7ea fd92 	bl	8002160 <__aeabi_dmul>
 801763c:	0002      	movs	r2, r0
 801763e:	000b      	movs	r3, r1
 8017640:	0020      	movs	r0, r4
 8017642:	0029      	movs	r1, r5
 8017644:	f7ea fd8c 	bl	8002160 <__aeabi_dmul>
 8017648:	9a00      	ldr	r2, [sp, #0]
 801764a:	9b01      	ldr	r3, [sp, #4]
 801764c:	0004      	movs	r4, r0
 801764e:	000d      	movs	r5, r1
 8017650:	9808      	ldr	r0, [sp, #32]
 8017652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017654:	f7e9 fe46 	bl	80012e4 <__aeabi_dadd>
 8017658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801765a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801765c:	f7ea fd80 	bl	8002160 <__aeabi_dmul>
 8017660:	0022      	movs	r2, r4
 8017662:	002b      	movs	r3, r5
 8017664:	f7e9 fe3e 	bl	80012e4 <__aeabi_dadd>
 8017668:	9a00      	ldr	r2, [sp, #0]
 801766a:	9b01      	ldr	r3, [sp, #4]
 801766c:	9010      	str	r0, [sp, #64]	; 0x40
 801766e:	9111      	str	r1, [sp, #68]	; 0x44
 8017670:	0010      	movs	r0, r2
 8017672:	0019      	movs	r1, r3
 8017674:	f7ea fd74 	bl	8002160 <__aeabi_dmul>
 8017678:	2200      	movs	r2, #0
 801767a:	4b63      	ldr	r3, [pc, #396]	; (8017808 <__ieee754_pow+0x754>)
 801767c:	0004      	movs	r4, r0
 801767e:	000d      	movs	r5, r1
 8017680:	f7e9 fe30 	bl	80012e4 <__aeabi_dadd>
 8017684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017688:	f7e9 fe2c 	bl	80012e4 <__aeabi_dadd>
 801768c:	2600      	movs	r6, #0
 801768e:	000f      	movs	r7, r1
 8017690:	0032      	movs	r2, r6
 8017692:	000b      	movs	r3, r1
 8017694:	9800      	ldr	r0, [sp, #0]
 8017696:	9901      	ldr	r1, [sp, #4]
 8017698:	f7ea fd62 	bl	8002160 <__aeabi_dmul>
 801769c:	2200      	movs	r2, #0
 801769e:	9000      	str	r0, [sp, #0]
 80176a0:	9101      	str	r1, [sp, #4]
 80176a2:	4b59      	ldr	r3, [pc, #356]	; (8017808 <__ieee754_pow+0x754>)
 80176a4:	0030      	movs	r0, r6
 80176a6:	0039      	movs	r1, r7
 80176a8:	f7ea ffc6 	bl	8002638 <__aeabi_dsub>
 80176ac:	0022      	movs	r2, r4
 80176ae:	002b      	movs	r3, r5
 80176b0:	f7ea ffc2 	bl	8002638 <__aeabi_dsub>
 80176b4:	0002      	movs	r2, r0
 80176b6:	000b      	movs	r3, r1
 80176b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80176ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80176bc:	f7ea ffbc 	bl	8002638 <__aeabi_dsub>
 80176c0:	9a08      	ldr	r2, [sp, #32]
 80176c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176c4:	f7ea fd4c 	bl	8002160 <__aeabi_dmul>
 80176c8:	0032      	movs	r2, r6
 80176ca:	0004      	movs	r4, r0
 80176cc:	000d      	movs	r5, r1
 80176ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176d2:	003b      	movs	r3, r7
 80176d4:	f7ea fd44 	bl	8002160 <__aeabi_dmul>
 80176d8:	0002      	movs	r2, r0
 80176da:	000b      	movs	r3, r1
 80176dc:	0020      	movs	r0, r4
 80176de:	0029      	movs	r1, r5
 80176e0:	f7e9 fe00 	bl	80012e4 <__aeabi_dadd>
 80176e4:	0004      	movs	r4, r0
 80176e6:	000d      	movs	r5, r1
 80176e8:	0002      	movs	r2, r0
 80176ea:	000b      	movs	r3, r1
 80176ec:	9800      	ldr	r0, [sp, #0]
 80176ee:	9901      	ldr	r1, [sp, #4]
 80176f0:	f7e9 fdf8 	bl	80012e4 <__aeabi_dadd>
 80176f4:	2600      	movs	r6, #0
 80176f6:	22e0      	movs	r2, #224	; 0xe0
 80176f8:	4b44      	ldr	r3, [pc, #272]	; (801780c <__ieee754_pow+0x758>)
 80176fa:	0612      	lsls	r2, r2, #24
 80176fc:	0030      	movs	r0, r6
 80176fe:	000f      	movs	r7, r1
 8017700:	f7ea fd2e 	bl	8002160 <__aeabi_dmul>
 8017704:	9008      	str	r0, [sp, #32]
 8017706:	9109      	str	r1, [sp, #36]	; 0x24
 8017708:	9a00      	ldr	r2, [sp, #0]
 801770a:	9b01      	ldr	r3, [sp, #4]
 801770c:	0039      	movs	r1, r7
 801770e:	0030      	movs	r0, r6
 8017710:	f7ea ff92 	bl	8002638 <__aeabi_dsub>
 8017714:	0002      	movs	r2, r0
 8017716:	000b      	movs	r3, r1
 8017718:	0020      	movs	r0, r4
 801771a:	0029      	movs	r1, r5
 801771c:	f7ea ff8c 	bl	8002638 <__aeabi_dsub>
 8017720:	4a3b      	ldr	r2, [pc, #236]	; (8017810 <__ieee754_pow+0x75c>)
 8017722:	4b3a      	ldr	r3, [pc, #232]	; (801780c <__ieee754_pow+0x758>)
 8017724:	f7ea fd1c 	bl	8002160 <__aeabi_dmul>
 8017728:	4a3a      	ldr	r2, [pc, #232]	; (8017814 <__ieee754_pow+0x760>)
 801772a:	0004      	movs	r4, r0
 801772c:	000d      	movs	r5, r1
 801772e:	4b3a      	ldr	r3, [pc, #232]	; (8017818 <__ieee754_pow+0x764>)
 8017730:	0039      	movs	r1, r7
 8017732:	0030      	movs	r0, r6
 8017734:	f7ea fd14 	bl	8002160 <__aeabi_dmul>
 8017738:	0002      	movs	r2, r0
 801773a:	000b      	movs	r3, r1
 801773c:	0020      	movs	r0, r4
 801773e:	0029      	movs	r1, r5
 8017740:	f7e9 fdd0 	bl	80012e4 <__aeabi_dadd>
 8017744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017746:	4b35      	ldr	r3, [pc, #212]	; (801781c <__ieee754_pow+0x768>)
 8017748:	189b      	adds	r3, r3, r2
 801774a:	681a      	ldr	r2, [r3, #0]
 801774c:	685b      	ldr	r3, [r3, #4]
 801774e:	f7e9 fdc9 	bl	80012e4 <__aeabi_dadd>
 8017752:	900a      	str	r0, [sp, #40]	; 0x28
 8017754:	910b      	str	r1, [sp, #44]	; 0x2c
 8017756:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017758:	f7eb fb54 	bl	8002e04 <__aeabi_i2d>
 801775c:	0004      	movs	r4, r0
 801775e:	000d      	movs	r5, r1
 8017760:	9808      	ldr	r0, [sp, #32]
 8017762:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017766:	4b2e      	ldr	r3, [pc, #184]	; (8017820 <__ieee754_pow+0x76c>)
 8017768:	189b      	adds	r3, r3, r2
 801776a:	681a      	ldr	r2, [r3, #0]
 801776c:	685b      	ldr	r3, [r3, #4]
 801776e:	9200      	str	r2, [sp, #0]
 8017770:	9301      	str	r3, [sp, #4]
 8017772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017776:	f7e9 fdb5 	bl	80012e4 <__aeabi_dadd>
 801777a:	9a00      	ldr	r2, [sp, #0]
 801777c:	9b01      	ldr	r3, [sp, #4]
 801777e:	f7e9 fdb1 	bl	80012e4 <__aeabi_dadd>
 8017782:	0022      	movs	r2, r4
 8017784:	002b      	movs	r3, r5
 8017786:	f7e9 fdad 	bl	80012e4 <__aeabi_dadd>
 801778a:	0022      	movs	r2, r4
 801778c:	002b      	movs	r3, r5
 801778e:	0030      	movs	r0, r6
 8017790:	000f      	movs	r7, r1
 8017792:	f7ea ff51 	bl	8002638 <__aeabi_dsub>
 8017796:	9a00      	ldr	r2, [sp, #0]
 8017798:	9b01      	ldr	r3, [sp, #4]
 801779a:	f7ea ff4d 	bl	8002638 <__aeabi_dsub>
 801779e:	9a08      	ldr	r2, [sp, #32]
 80177a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177a2:	f7ea ff49 	bl	8002638 <__aeabi_dsub>
 80177a6:	0002      	movs	r2, r0
 80177a8:	000b      	movs	r3, r1
 80177aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177ae:	e619      	b.n	80173e4 <__ieee754_pow+0x330>
 80177b0:	2300      	movs	r3, #0
 80177b2:	4c04      	ldr	r4, [pc, #16]	; (80177c4 <__ieee754_pow+0x710>)
 80177b4:	e622      	b.n	80173fc <__ieee754_pow+0x348>
 80177b6:	46c0      	nop			; (mov r8, r8)
 80177b8:	7ff00000 	.word	0x7ff00000
 80177bc:	43400000 	.word	0x43400000
 80177c0:	fffffc01 	.word	0xfffffc01
 80177c4:	3ff00000 	.word	0x3ff00000
 80177c8:	0003988e 	.word	0x0003988e
 80177cc:	000bb679 	.word	0x000bb679
 80177d0:	fff00000 	.word	0xfff00000
 80177d4:	08018868 	.word	0x08018868
 80177d8:	4a454eef 	.word	0x4a454eef
 80177dc:	3fca7e28 	.word	0x3fca7e28
 80177e0:	93c9db65 	.word	0x93c9db65
 80177e4:	3fcd864a 	.word	0x3fcd864a
 80177e8:	a91d4101 	.word	0xa91d4101
 80177ec:	3fd17460 	.word	0x3fd17460
 80177f0:	518f264d 	.word	0x518f264d
 80177f4:	3fd55555 	.word	0x3fd55555
 80177f8:	db6fabff 	.word	0xdb6fabff
 80177fc:	3fdb6db6 	.word	0x3fdb6db6
 8017800:	33333303 	.word	0x33333303
 8017804:	3fe33333 	.word	0x3fe33333
 8017808:	40080000 	.word	0x40080000
 801780c:	3feec709 	.word	0x3feec709
 8017810:	dc3a03fd 	.word	0xdc3a03fd
 8017814:	145b01f5 	.word	0x145b01f5
 8017818:	be3e2fe0 	.word	0xbe3e2fe0
 801781c:	08018888 	.word	0x08018888
 8017820:	08018878 	.word	0x08018878
 8017824:	4a90      	ldr	r2, [pc, #576]	; (8017a68 <__ieee754_pow+0x9b4>)
 8017826:	4b91      	ldr	r3, [pc, #580]	; (8017a6c <__ieee754_pow+0x9b8>)
 8017828:	9804      	ldr	r0, [sp, #16]
 801782a:	9905      	ldr	r1, [sp, #20]
 801782c:	f7e9 fd5a 	bl	80012e4 <__aeabi_dadd>
 8017830:	0032      	movs	r2, r6
 8017832:	9002      	str	r0, [sp, #8]
 8017834:	9103      	str	r1, [sp, #12]
 8017836:	003b      	movs	r3, r7
 8017838:	0028      	movs	r0, r5
 801783a:	0021      	movs	r1, r4
 801783c:	f7ea fefc 	bl	8002638 <__aeabi_dsub>
 8017840:	0002      	movs	r2, r0
 8017842:	000b      	movs	r3, r1
 8017844:	9802      	ldr	r0, [sp, #8]
 8017846:	9903      	ldr	r1, [sp, #12]
 8017848:	f7e8 fe20 	bl	800048c <__aeabi_dcmpgt>
 801784c:	2800      	cmp	r0, #0
 801784e:	d000      	beq.n	8017852 <__ieee754_pow+0x79e>
 8017850:	e60f      	b.n	8017472 <__ieee754_pow+0x3be>
 8017852:	2100      	movs	r1, #0
 8017854:	4a86      	ldr	r2, [pc, #536]	; (8017a70 <__ieee754_pow+0x9bc>)
 8017856:	0063      	lsls	r3, r4, #1
 8017858:	085b      	lsrs	r3, r3, #1
 801785a:	9102      	str	r1, [sp, #8]
 801785c:	4293      	cmp	r3, r2
 801785e:	dd25      	ble.n	80178ac <__ieee754_pow+0x7f8>
 8017860:	4a84      	ldr	r2, [pc, #528]	; (8017a74 <__ieee754_pow+0x9c0>)
 8017862:	151b      	asrs	r3, r3, #20
 8017864:	189b      	adds	r3, r3, r2
 8017866:	2280      	movs	r2, #128	; 0x80
 8017868:	0352      	lsls	r2, r2, #13
 801786a:	4694      	mov	ip, r2
 801786c:	411a      	asrs	r2, r3
 801786e:	1914      	adds	r4, r2, r4
 8017870:	4b81      	ldr	r3, [pc, #516]	; (8017a78 <__ieee754_pow+0x9c4>)
 8017872:	0060      	lsls	r0, r4, #1
 8017874:	4d81      	ldr	r5, [pc, #516]	; (8017a7c <__ieee754_pow+0x9c8>)
 8017876:	0d40      	lsrs	r0, r0, #21
 8017878:	18c0      	adds	r0, r0, r3
 801787a:	4105      	asrs	r5, r0
 801787c:	0021      	movs	r1, r4
 801787e:	43a9      	bics	r1, r5
 8017880:	000b      	movs	r3, r1
 8017882:	4661      	mov	r1, ip
 8017884:	0324      	lsls	r4, r4, #12
 8017886:	0b24      	lsrs	r4, r4, #12
 8017888:	4321      	orrs	r1, r4
 801788a:	2414      	movs	r4, #20
 801788c:	1a20      	subs	r0, r4, r0
 801788e:	4101      	asrs	r1, r0
 8017890:	9102      	str	r1, [sp, #8]
 8017892:	9908      	ldr	r1, [sp, #32]
 8017894:	2200      	movs	r2, #0
 8017896:	2900      	cmp	r1, #0
 8017898:	da02      	bge.n	80178a0 <__ieee754_pow+0x7ec>
 801789a:	9902      	ldr	r1, [sp, #8]
 801789c:	4249      	negs	r1, r1
 801789e:	9102      	str	r1, [sp, #8]
 80178a0:	0030      	movs	r0, r6
 80178a2:	0039      	movs	r1, r7
 80178a4:	f7ea fec8 	bl	8002638 <__aeabi_dsub>
 80178a8:	9006      	str	r0, [sp, #24]
 80178aa:	9107      	str	r1, [sp, #28]
 80178ac:	9a04      	ldr	r2, [sp, #16]
 80178ae:	9b05      	ldr	r3, [sp, #20]
 80178b0:	9806      	ldr	r0, [sp, #24]
 80178b2:	9907      	ldr	r1, [sp, #28]
 80178b4:	2600      	movs	r6, #0
 80178b6:	f7e9 fd15 	bl	80012e4 <__aeabi_dadd>
 80178ba:	2200      	movs	r2, #0
 80178bc:	0030      	movs	r0, r6
 80178be:	4b70      	ldr	r3, [pc, #448]	; (8017a80 <__ieee754_pow+0x9cc>)
 80178c0:	000f      	movs	r7, r1
 80178c2:	f7ea fc4d 	bl	8002160 <__aeabi_dmul>
 80178c6:	9a06      	ldr	r2, [sp, #24]
 80178c8:	9b07      	ldr	r3, [sp, #28]
 80178ca:	9008      	str	r0, [sp, #32]
 80178cc:	9109      	str	r1, [sp, #36]	; 0x24
 80178ce:	0030      	movs	r0, r6
 80178d0:	0039      	movs	r1, r7
 80178d2:	f7ea feb1 	bl	8002638 <__aeabi_dsub>
 80178d6:	0002      	movs	r2, r0
 80178d8:	000b      	movs	r3, r1
 80178da:	9804      	ldr	r0, [sp, #16]
 80178dc:	9905      	ldr	r1, [sp, #20]
 80178de:	f7ea feab 	bl	8002638 <__aeabi_dsub>
 80178e2:	4a68      	ldr	r2, [pc, #416]	; (8017a84 <__ieee754_pow+0x9d0>)
 80178e4:	4b68      	ldr	r3, [pc, #416]	; (8017a88 <__ieee754_pow+0x9d4>)
 80178e6:	f7ea fc3b 	bl	8002160 <__aeabi_dmul>
 80178ea:	4a68      	ldr	r2, [pc, #416]	; (8017a8c <__ieee754_pow+0x9d8>)
 80178ec:	0004      	movs	r4, r0
 80178ee:	000d      	movs	r5, r1
 80178f0:	0030      	movs	r0, r6
 80178f2:	0039      	movs	r1, r7
 80178f4:	4b66      	ldr	r3, [pc, #408]	; (8017a90 <__ieee754_pow+0x9dc>)
 80178f6:	f7ea fc33 	bl	8002160 <__aeabi_dmul>
 80178fa:	0002      	movs	r2, r0
 80178fc:	000b      	movs	r3, r1
 80178fe:	0020      	movs	r0, r4
 8017900:	0029      	movs	r1, r5
 8017902:	f7e9 fcef 	bl	80012e4 <__aeabi_dadd>
 8017906:	0004      	movs	r4, r0
 8017908:	000d      	movs	r5, r1
 801790a:	0002      	movs	r2, r0
 801790c:	000b      	movs	r3, r1
 801790e:	9808      	ldr	r0, [sp, #32]
 8017910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017912:	f7e9 fce7 	bl	80012e4 <__aeabi_dadd>
 8017916:	9a08      	ldr	r2, [sp, #32]
 8017918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801791a:	0006      	movs	r6, r0
 801791c:	000f      	movs	r7, r1
 801791e:	f7ea fe8b 	bl	8002638 <__aeabi_dsub>
 8017922:	0002      	movs	r2, r0
 8017924:	000b      	movs	r3, r1
 8017926:	0020      	movs	r0, r4
 8017928:	0029      	movs	r1, r5
 801792a:	f7ea fe85 	bl	8002638 <__aeabi_dsub>
 801792e:	0032      	movs	r2, r6
 8017930:	9004      	str	r0, [sp, #16]
 8017932:	9105      	str	r1, [sp, #20]
 8017934:	003b      	movs	r3, r7
 8017936:	0030      	movs	r0, r6
 8017938:	0039      	movs	r1, r7
 801793a:	f7ea fc11 	bl	8002160 <__aeabi_dmul>
 801793e:	0004      	movs	r4, r0
 8017940:	000d      	movs	r5, r1
 8017942:	4a54      	ldr	r2, [pc, #336]	; (8017a94 <__ieee754_pow+0x9e0>)
 8017944:	4b54      	ldr	r3, [pc, #336]	; (8017a98 <__ieee754_pow+0x9e4>)
 8017946:	f7ea fc0b 	bl	8002160 <__aeabi_dmul>
 801794a:	4a54      	ldr	r2, [pc, #336]	; (8017a9c <__ieee754_pow+0x9e8>)
 801794c:	4b54      	ldr	r3, [pc, #336]	; (8017aa0 <__ieee754_pow+0x9ec>)
 801794e:	f7ea fe73 	bl	8002638 <__aeabi_dsub>
 8017952:	0022      	movs	r2, r4
 8017954:	002b      	movs	r3, r5
 8017956:	f7ea fc03 	bl	8002160 <__aeabi_dmul>
 801795a:	4a52      	ldr	r2, [pc, #328]	; (8017aa4 <__ieee754_pow+0x9f0>)
 801795c:	4b52      	ldr	r3, [pc, #328]	; (8017aa8 <__ieee754_pow+0x9f4>)
 801795e:	f7e9 fcc1 	bl	80012e4 <__aeabi_dadd>
 8017962:	0022      	movs	r2, r4
 8017964:	002b      	movs	r3, r5
 8017966:	f7ea fbfb 	bl	8002160 <__aeabi_dmul>
 801796a:	4a50      	ldr	r2, [pc, #320]	; (8017aac <__ieee754_pow+0x9f8>)
 801796c:	4b50      	ldr	r3, [pc, #320]	; (8017ab0 <__ieee754_pow+0x9fc>)
 801796e:	f7ea fe63 	bl	8002638 <__aeabi_dsub>
 8017972:	0022      	movs	r2, r4
 8017974:	002b      	movs	r3, r5
 8017976:	f7ea fbf3 	bl	8002160 <__aeabi_dmul>
 801797a:	4a4e      	ldr	r2, [pc, #312]	; (8017ab4 <__ieee754_pow+0xa00>)
 801797c:	4b4e      	ldr	r3, [pc, #312]	; (8017ab8 <__ieee754_pow+0xa04>)
 801797e:	f7e9 fcb1 	bl	80012e4 <__aeabi_dadd>
 8017982:	0022      	movs	r2, r4
 8017984:	002b      	movs	r3, r5
 8017986:	f7ea fbeb 	bl	8002160 <__aeabi_dmul>
 801798a:	0002      	movs	r2, r0
 801798c:	000b      	movs	r3, r1
 801798e:	0030      	movs	r0, r6
 8017990:	0039      	movs	r1, r7
 8017992:	f7ea fe51 	bl	8002638 <__aeabi_dsub>
 8017996:	0004      	movs	r4, r0
 8017998:	000d      	movs	r5, r1
 801799a:	0002      	movs	r2, r0
 801799c:	000b      	movs	r3, r1
 801799e:	0030      	movs	r0, r6
 80179a0:	0039      	movs	r1, r7
 80179a2:	f7ea fbdd 	bl	8002160 <__aeabi_dmul>
 80179a6:	2380      	movs	r3, #128	; 0x80
 80179a8:	9006      	str	r0, [sp, #24]
 80179aa:	9107      	str	r1, [sp, #28]
 80179ac:	2200      	movs	r2, #0
 80179ae:	0020      	movs	r0, r4
 80179b0:	0029      	movs	r1, r5
 80179b2:	05db      	lsls	r3, r3, #23
 80179b4:	f7ea fe40 	bl	8002638 <__aeabi_dsub>
 80179b8:	0002      	movs	r2, r0
 80179ba:	000b      	movs	r3, r1
 80179bc:	9806      	ldr	r0, [sp, #24]
 80179be:	9907      	ldr	r1, [sp, #28]
 80179c0:	f7e9 ffcc 	bl	800195c <__aeabi_ddiv>
 80179c4:	9a04      	ldr	r2, [sp, #16]
 80179c6:	9b05      	ldr	r3, [sp, #20]
 80179c8:	0004      	movs	r4, r0
 80179ca:	000d      	movs	r5, r1
 80179cc:	0030      	movs	r0, r6
 80179ce:	0039      	movs	r1, r7
 80179d0:	f7ea fbc6 	bl	8002160 <__aeabi_dmul>
 80179d4:	9a04      	ldr	r2, [sp, #16]
 80179d6:	9b05      	ldr	r3, [sp, #20]
 80179d8:	f7e9 fc84 	bl	80012e4 <__aeabi_dadd>
 80179dc:	0002      	movs	r2, r0
 80179de:	000b      	movs	r3, r1
 80179e0:	0020      	movs	r0, r4
 80179e2:	0029      	movs	r1, r5
 80179e4:	f7ea fe28 	bl	8002638 <__aeabi_dsub>
 80179e8:	0032      	movs	r2, r6
 80179ea:	003b      	movs	r3, r7
 80179ec:	f7ea fe24 	bl	8002638 <__aeabi_dsub>
 80179f0:	0002      	movs	r2, r0
 80179f2:	000b      	movs	r3, r1
 80179f4:	2000      	movs	r0, #0
 80179f6:	4931      	ldr	r1, [pc, #196]	; (8017abc <__ieee754_pow+0xa08>)
 80179f8:	f7ea fe1e 	bl	8002638 <__aeabi_dsub>
 80179fc:	9b02      	ldr	r3, [sp, #8]
 80179fe:	051b      	lsls	r3, r3, #20
 8017a00:	185b      	adds	r3, r3, r1
 8017a02:	151a      	asrs	r2, r3, #20
 8017a04:	2a00      	cmp	r2, #0
 8017a06:	dc25      	bgt.n	8017a54 <__ieee754_pow+0x9a0>
 8017a08:	9a02      	ldr	r2, [sp, #8]
 8017a0a:	f000 f94f 	bl	8017cac <scalbn>
 8017a0e:	9a00      	ldr	r2, [sp, #0]
 8017a10:	9b01      	ldr	r3, [sp, #4]
 8017a12:	f7ff fc33 	bl	801727c <__ieee754_pow+0x1c8>
 8017a16:	4a2a      	ldr	r2, [pc, #168]	; (8017ac0 <__ieee754_pow+0xa0c>)
 8017a18:	004b      	lsls	r3, r1, #1
 8017a1a:	085b      	lsrs	r3, r3, #1
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	dc00      	bgt.n	8017a22 <__ieee754_pow+0x96e>
 8017a20:	e717      	b.n	8017852 <__ieee754_pow+0x79e>
 8017a22:	4b28      	ldr	r3, [pc, #160]	; (8017ac4 <__ieee754_pow+0xa10>)
 8017a24:	18cb      	adds	r3, r1, r3
 8017a26:	4303      	orrs	r3, r0
 8017a28:	d008      	beq.n	8017a3c <__ieee754_pow+0x988>
 8017a2a:	9800      	ldr	r0, [sp, #0]
 8017a2c:	9901      	ldr	r1, [sp, #4]
 8017a2e:	2300      	movs	r3, #0
 8017a30:	2200      	movs	r2, #0
 8017a32:	f7e8 fd17 	bl	8000464 <__aeabi_dcmplt>
 8017a36:	1e43      	subs	r3, r0, #1
 8017a38:	4198      	sbcs	r0, r3
 8017a3a:	e462      	b.n	8017302 <__ieee754_pow+0x24e>
 8017a3c:	0032      	movs	r2, r6
 8017a3e:	003b      	movs	r3, r7
 8017a40:	f7ea fdfa 	bl	8002638 <__aeabi_dsub>
 8017a44:	9a04      	ldr	r2, [sp, #16]
 8017a46:	9b05      	ldr	r3, [sp, #20]
 8017a48:	f7e8 fd2a 	bl	80004a0 <__aeabi_dcmpge>
 8017a4c:	2800      	cmp	r0, #0
 8017a4e:	d100      	bne.n	8017a52 <__ieee754_pow+0x99e>
 8017a50:	e6ff      	b.n	8017852 <__ieee754_pow+0x79e>
 8017a52:	e7ea      	b.n	8017a2a <__ieee754_pow+0x976>
 8017a54:	0019      	movs	r1, r3
 8017a56:	e7da      	b.n	8017a0e <__ieee754_pow+0x95a>
 8017a58:	2300      	movs	r3, #0
 8017a5a:	4c18      	ldr	r4, [pc, #96]	; (8017abc <__ieee754_pow+0xa08>)
 8017a5c:	f7ff fbf1 	bl	8017242 <__ieee754_pow+0x18e>
 8017a60:	2300      	movs	r3, #0
 8017a62:	2400      	movs	r4, #0
 8017a64:	f7ff fbed 	bl	8017242 <__ieee754_pow+0x18e>
 8017a68:	652b82fe 	.word	0x652b82fe
 8017a6c:	3c971547 	.word	0x3c971547
 8017a70:	3fe00000 	.word	0x3fe00000
 8017a74:	fffffc02 	.word	0xfffffc02
 8017a78:	fffffc01 	.word	0xfffffc01
 8017a7c:	000fffff 	.word	0x000fffff
 8017a80:	3fe62e43 	.word	0x3fe62e43
 8017a84:	fefa39ef 	.word	0xfefa39ef
 8017a88:	3fe62e42 	.word	0x3fe62e42
 8017a8c:	0ca86c39 	.word	0x0ca86c39
 8017a90:	be205c61 	.word	0xbe205c61
 8017a94:	72bea4d0 	.word	0x72bea4d0
 8017a98:	3e663769 	.word	0x3e663769
 8017a9c:	c5d26bf1 	.word	0xc5d26bf1
 8017aa0:	3ebbbd41 	.word	0x3ebbbd41
 8017aa4:	af25de2c 	.word	0xaf25de2c
 8017aa8:	3f11566a 	.word	0x3f11566a
 8017aac:	16bebd93 	.word	0x16bebd93
 8017ab0:	3f66c16c 	.word	0x3f66c16c
 8017ab4:	5555553e 	.word	0x5555553e
 8017ab8:	3fc55555 	.word	0x3fc55555
 8017abc:	3ff00000 	.word	0x3ff00000
 8017ac0:	4090cbff 	.word	0x4090cbff
 8017ac4:	3f6f3400 	.word	0x3f6f3400

08017ac8 <__ieee754_sqrt>:
 8017ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aca:	000b      	movs	r3, r1
 8017acc:	000c      	movs	r4, r1
 8017ace:	4956      	ldr	r1, [pc, #344]	; (8017c28 <__ieee754_sqrt+0x160>)
 8017ad0:	0005      	movs	r5, r0
 8017ad2:	0002      	movs	r2, r0
 8017ad4:	0008      	movs	r0, r1
 8017ad6:	b085      	sub	sp, #20
 8017ad8:	4020      	ands	r0, r4
 8017ada:	4288      	cmp	r0, r1
 8017adc:	d10f      	bne.n	8017afe <__ieee754_sqrt+0x36>
 8017ade:	0028      	movs	r0, r5
 8017ae0:	0021      	movs	r1, r4
 8017ae2:	f7ea fb3d 	bl	8002160 <__aeabi_dmul>
 8017ae6:	0002      	movs	r2, r0
 8017ae8:	000b      	movs	r3, r1
 8017aea:	0028      	movs	r0, r5
 8017aec:	0021      	movs	r1, r4
 8017aee:	f7e9 fbf9 	bl	80012e4 <__aeabi_dadd>
 8017af2:	0005      	movs	r5, r0
 8017af4:	000c      	movs	r4, r1
 8017af6:	0028      	movs	r0, r5
 8017af8:	0021      	movs	r1, r4
 8017afa:	b005      	add	sp, #20
 8017afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017afe:	2c00      	cmp	r4, #0
 8017b00:	dc10      	bgt.n	8017b24 <__ieee754_sqrt+0x5c>
 8017b02:	0061      	lsls	r1, r4, #1
 8017b04:	0849      	lsrs	r1, r1, #1
 8017b06:	4329      	orrs	r1, r5
 8017b08:	d0f5      	beq.n	8017af6 <__ieee754_sqrt+0x2e>
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	428c      	cmp	r4, r1
 8017b0e:	d100      	bne.n	8017b12 <__ieee754_sqrt+0x4a>
 8017b10:	e080      	b.n	8017c14 <__ieee754_sqrt+0x14c>
 8017b12:	0028      	movs	r0, r5
 8017b14:	0021      	movs	r1, r4
 8017b16:	f7ea fd8f 	bl	8002638 <__aeabi_dsub>
 8017b1a:	0002      	movs	r2, r0
 8017b1c:	000b      	movs	r3, r1
 8017b1e:	f7e9 ff1d 	bl	800195c <__aeabi_ddiv>
 8017b22:	e7e6      	b.n	8017af2 <__ieee754_sqrt+0x2a>
 8017b24:	1521      	asrs	r1, r4, #20
 8017b26:	d075      	beq.n	8017c14 <__ieee754_sqrt+0x14c>
 8017b28:	4840      	ldr	r0, [pc, #256]	; (8017c2c <__ieee754_sqrt+0x164>)
 8017b2a:	031b      	lsls	r3, r3, #12
 8017b2c:	180c      	adds	r4, r1, r0
 8017b2e:	2080      	movs	r0, #128	; 0x80
 8017b30:	0b1b      	lsrs	r3, r3, #12
 8017b32:	0340      	lsls	r0, r0, #13
 8017b34:	4303      	orrs	r3, r0
 8017b36:	07c9      	lsls	r1, r1, #31
 8017b38:	d403      	bmi.n	8017b42 <__ieee754_sqrt+0x7a>
 8017b3a:	0fd1      	lsrs	r1, r2, #31
 8017b3c:	005b      	lsls	r3, r3, #1
 8017b3e:	185b      	adds	r3, r3, r1
 8017b40:	0052      	lsls	r2, r2, #1
 8017b42:	1061      	asrs	r1, r4, #1
 8017b44:	2400      	movs	r4, #0
 8017b46:	9103      	str	r1, [sp, #12]
 8017b48:	005b      	lsls	r3, r3, #1
 8017b4a:	0fd1      	lsrs	r1, r2, #31
 8017b4c:	185b      	adds	r3, r3, r1
 8017b4e:	2180      	movs	r1, #128	; 0x80
 8017b50:	2516      	movs	r5, #22
 8017b52:	0020      	movs	r0, r4
 8017b54:	0052      	lsls	r2, r2, #1
 8017b56:	0389      	lsls	r1, r1, #14
 8017b58:	1846      	adds	r6, r0, r1
 8017b5a:	429e      	cmp	r6, r3
 8017b5c:	dc02      	bgt.n	8017b64 <__ieee754_sqrt+0x9c>
 8017b5e:	1870      	adds	r0, r6, r1
 8017b60:	1b9b      	subs	r3, r3, r6
 8017b62:	1864      	adds	r4, r4, r1
 8017b64:	0fd6      	lsrs	r6, r2, #31
 8017b66:	005b      	lsls	r3, r3, #1
 8017b68:	3d01      	subs	r5, #1
 8017b6a:	18f3      	adds	r3, r6, r3
 8017b6c:	0052      	lsls	r2, r2, #1
 8017b6e:	0849      	lsrs	r1, r1, #1
 8017b70:	2d00      	cmp	r5, #0
 8017b72:	d1f1      	bne.n	8017b58 <__ieee754_sqrt+0x90>
 8017b74:	2620      	movs	r6, #32
 8017b76:	2780      	movs	r7, #128	; 0x80
 8017b78:	0029      	movs	r1, r5
 8017b7a:	9601      	str	r6, [sp, #4]
 8017b7c:	063f      	lsls	r7, r7, #24
 8017b7e:	197e      	adds	r6, r7, r5
 8017b80:	46b4      	mov	ip, r6
 8017b82:	4283      	cmp	r3, r0
 8017b84:	dc02      	bgt.n	8017b8c <__ieee754_sqrt+0xc4>
 8017b86:	d114      	bne.n	8017bb2 <__ieee754_sqrt+0xea>
 8017b88:	4296      	cmp	r6, r2
 8017b8a:	d812      	bhi.n	8017bb2 <__ieee754_sqrt+0xea>
 8017b8c:	4665      	mov	r5, ip
 8017b8e:	4666      	mov	r6, ip
 8017b90:	19ed      	adds	r5, r5, r7
 8017b92:	9002      	str	r0, [sp, #8]
 8017b94:	2e00      	cmp	r6, #0
 8017b96:	da03      	bge.n	8017ba0 <__ieee754_sqrt+0xd8>
 8017b98:	43ee      	mvns	r6, r5
 8017b9a:	0ff6      	lsrs	r6, r6, #31
 8017b9c:	1986      	adds	r6, r0, r6
 8017b9e:	9602      	str	r6, [sp, #8]
 8017ba0:	1a1b      	subs	r3, r3, r0
 8017ba2:	4562      	cmp	r2, ip
 8017ba4:	4180      	sbcs	r0, r0
 8017ba6:	4240      	negs	r0, r0
 8017ba8:	1a1b      	subs	r3, r3, r0
 8017baa:	4660      	mov	r0, ip
 8017bac:	1a12      	subs	r2, r2, r0
 8017bae:	9802      	ldr	r0, [sp, #8]
 8017bb0:	19c9      	adds	r1, r1, r7
 8017bb2:	0fd6      	lsrs	r6, r2, #31
 8017bb4:	005b      	lsls	r3, r3, #1
 8017bb6:	199b      	adds	r3, r3, r6
 8017bb8:	9e01      	ldr	r6, [sp, #4]
 8017bba:	0052      	lsls	r2, r2, #1
 8017bbc:	3e01      	subs	r6, #1
 8017bbe:	087f      	lsrs	r7, r7, #1
 8017bc0:	9601      	str	r6, [sp, #4]
 8017bc2:	2e00      	cmp	r6, #0
 8017bc4:	d1db      	bne.n	8017b7e <__ieee754_sqrt+0xb6>
 8017bc6:	4313      	orrs	r3, r2
 8017bc8:	d003      	beq.n	8017bd2 <__ieee754_sqrt+0x10a>
 8017bca:	1c4b      	adds	r3, r1, #1
 8017bcc:	d127      	bne.n	8017c1e <__ieee754_sqrt+0x156>
 8017bce:	0031      	movs	r1, r6
 8017bd0:	3401      	adds	r4, #1
 8017bd2:	4b17      	ldr	r3, [pc, #92]	; (8017c30 <__ieee754_sqrt+0x168>)
 8017bd4:	1060      	asrs	r0, r4, #1
 8017bd6:	18c0      	adds	r0, r0, r3
 8017bd8:	0849      	lsrs	r1, r1, #1
 8017bda:	07e3      	lsls	r3, r4, #31
 8017bdc:	d502      	bpl.n	8017be4 <__ieee754_sqrt+0x11c>
 8017bde:	2380      	movs	r3, #128	; 0x80
 8017be0:	061b      	lsls	r3, r3, #24
 8017be2:	4319      	orrs	r1, r3
 8017be4:	9b03      	ldr	r3, [sp, #12]
 8017be6:	000d      	movs	r5, r1
 8017be8:	051c      	lsls	r4, r3, #20
 8017bea:	1823      	adds	r3, r4, r0
 8017bec:	001c      	movs	r4, r3
 8017bee:	e782      	b.n	8017af6 <__ieee754_sqrt+0x2e>
 8017bf0:	0ad3      	lsrs	r3, r2, #11
 8017bf2:	3815      	subs	r0, #21
 8017bf4:	0552      	lsls	r2, r2, #21
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d0fa      	beq.n	8017bf0 <__ieee754_sqrt+0x128>
 8017bfa:	2480      	movs	r4, #128	; 0x80
 8017bfc:	0364      	lsls	r4, r4, #13
 8017bfe:	4223      	tst	r3, r4
 8017c00:	d00a      	beq.n	8017c18 <__ieee754_sqrt+0x150>
 8017c02:	2420      	movs	r4, #32
 8017c04:	0016      	movs	r6, r2
 8017c06:	1a64      	subs	r4, r4, r1
 8017c08:	40e6      	lsrs	r6, r4
 8017c0a:	1e4d      	subs	r5, r1, #1
 8017c0c:	408a      	lsls	r2, r1
 8017c0e:	4333      	orrs	r3, r6
 8017c10:	1b41      	subs	r1, r0, r5
 8017c12:	e789      	b.n	8017b28 <__ieee754_sqrt+0x60>
 8017c14:	2000      	movs	r0, #0
 8017c16:	e7ee      	b.n	8017bf6 <__ieee754_sqrt+0x12e>
 8017c18:	005b      	lsls	r3, r3, #1
 8017c1a:	3101      	adds	r1, #1
 8017c1c:	e7ef      	b.n	8017bfe <__ieee754_sqrt+0x136>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	3101      	adds	r1, #1
 8017c22:	4399      	bics	r1, r3
 8017c24:	e7d5      	b.n	8017bd2 <__ieee754_sqrt+0x10a>
 8017c26:	46c0      	nop			; (mov r8, r8)
 8017c28:	7ff00000 	.word	0x7ff00000
 8017c2c:	fffffc01 	.word	0xfffffc01
 8017c30:	3fe00000 	.word	0x3fe00000

08017c34 <with_errno>:
 8017c34:	b570      	push	{r4, r5, r6, lr}
 8017c36:	000d      	movs	r5, r1
 8017c38:	0016      	movs	r6, r2
 8017c3a:	0004      	movs	r4, r0
 8017c3c:	f7fc fa00 	bl	8014040 <__errno>
 8017c40:	0029      	movs	r1, r5
 8017c42:	6006      	str	r6, [r0, #0]
 8017c44:	0020      	movs	r0, r4
 8017c46:	bd70      	pop	{r4, r5, r6, pc}

08017c48 <xflow>:
 8017c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c4a:	0015      	movs	r5, r2
 8017c4c:	001c      	movs	r4, r3
 8017c4e:	2800      	cmp	r0, #0
 8017c50:	d010      	beq.n	8017c74 <xflow+0x2c>
 8017c52:	2380      	movs	r3, #128	; 0x80
 8017c54:	0010      	movs	r0, r2
 8017c56:	061b      	lsls	r3, r3, #24
 8017c58:	18e1      	adds	r1, r4, r3
 8017c5a:	9000      	str	r0, [sp, #0]
 8017c5c:	9101      	str	r1, [sp, #4]
 8017c5e:	9a00      	ldr	r2, [sp, #0]
 8017c60:	9b01      	ldr	r3, [sp, #4]
 8017c62:	0028      	movs	r0, r5
 8017c64:	0021      	movs	r1, r4
 8017c66:	f7ea fa7b 	bl	8002160 <__aeabi_dmul>
 8017c6a:	2222      	movs	r2, #34	; 0x22
 8017c6c:	f7ff ffe2 	bl	8017c34 <with_errno>
 8017c70:	b003      	add	sp, #12
 8017c72:	bd30      	pop	{r4, r5, pc}
 8017c74:	0010      	movs	r0, r2
 8017c76:	0019      	movs	r1, r3
 8017c78:	e7ef      	b.n	8017c5a <xflow+0x12>

08017c7a <__math_uflow>:
 8017c7a:	2380      	movs	r3, #128	; 0x80
 8017c7c:	b510      	push	{r4, lr}
 8017c7e:	2200      	movs	r2, #0
 8017c80:	055b      	lsls	r3, r3, #21
 8017c82:	f7ff ffe1 	bl	8017c48 <xflow>
 8017c86:	bd10      	pop	{r4, pc}

08017c88 <__math_oflow>:
 8017c88:	23e0      	movs	r3, #224	; 0xe0
 8017c8a:	b510      	push	{r4, lr}
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	05db      	lsls	r3, r3, #23
 8017c90:	f7ff ffda 	bl	8017c48 <xflow>
 8017c94:	bd10      	pop	{r4, pc}

08017c96 <fabs>:
 8017c96:	004b      	lsls	r3, r1, #1
 8017c98:	0859      	lsrs	r1, r3, #1
 8017c9a:	4770      	bx	lr

08017c9c <finite>:
 8017c9c:	4b02      	ldr	r3, [pc, #8]	; (8017ca8 <finite+0xc>)
 8017c9e:	0048      	lsls	r0, r1, #1
 8017ca0:	0840      	lsrs	r0, r0, #1
 8017ca2:	18c0      	adds	r0, r0, r3
 8017ca4:	0fc0      	lsrs	r0, r0, #31
 8017ca6:	4770      	bx	lr
 8017ca8:	80100000 	.word	0x80100000

08017cac <scalbn>:
 8017cac:	004b      	lsls	r3, r1, #1
 8017cae:	b570      	push	{r4, r5, r6, lr}
 8017cb0:	0d5b      	lsrs	r3, r3, #21
 8017cb2:	0014      	movs	r4, r2
 8017cb4:	000a      	movs	r2, r1
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d10d      	bne.n	8017cd6 <scalbn+0x2a>
 8017cba:	004b      	lsls	r3, r1, #1
 8017cbc:	085b      	lsrs	r3, r3, #1
 8017cbe:	4303      	orrs	r3, r0
 8017cc0:	d010      	beq.n	8017ce4 <scalbn+0x38>
 8017cc2:	4b27      	ldr	r3, [pc, #156]	; (8017d60 <scalbn+0xb4>)
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	f7ea fa4b 	bl	8002160 <__aeabi_dmul>
 8017cca:	4b26      	ldr	r3, [pc, #152]	; (8017d64 <scalbn+0xb8>)
 8017ccc:	429c      	cmp	r4, r3
 8017cce:	da0a      	bge.n	8017ce6 <scalbn+0x3a>
 8017cd0:	4a25      	ldr	r2, [pc, #148]	; (8017d68 <scalbn+0xbc>)
 8017cd2:	4b26      	ldr	r3, [pc, #152]	; (8017d6c <scalbn+0xc0>)
 8017cd4:	e019      	b.n	8017d0a <scalbn+0x5e>
 8017cd6:	4d26      	ldr	r5, [pc, #152]	; (8017d70 <scalbn+0xc4>)
 8017cd8:	42ab      	cmp	r3, r5
 8017cda:	d108      	bne.n	8017cee <scalbn+0x42>
 8017cdc:	0002      	movs	r2, r0
 8017cde:	000b      	movs	r3, r1
 8017ce0:	f7e9 fb00 	bl	80012e4 <__aeabi_dadd>
 8017ce4:	bd70      	pop	{r4, r5, r6, pc}
 8017ce6:	000a      	movs	r2, r1
 8017ce8:	004b      	lsls	r3, r1, #1
 8017cea:	0d5b      	lsrs	r3, r3, #21
 8017cec:	3b36      	subs	r3, #54	; 0x36
 8017cee:	4d21      	ldr	r5, [pc, #132]	; (8017d74 <scalbn+0xc8>)
 8017cf0:	18e3      	adds	r3, r4, r3
 8017cf2:	42ab      	cmp	r3, r5
 8017cf4:	dd0c      	ble.n	8017d10 <scalbn+0x64>
 8017cf6:	4c20      	ldr	r4, [pc, #128]	; (8017d78 <scalbn+0xcc>)
 8017cf8:	4d20      	ldr	r5, [pc, #128]	; (8017d7c <scalbn+0xd0>)
 8017cfa:	2900      	cmp	r1, #0
 8017cfc:	da01      	bge.n	8017d02 <scalbn+0x56>
 8017cfe:	4c1e      	ldr	r4, [pc, #120]	; (8017d78 <scalbn+0xcc>)
 8017d00:	4d1f      	ldr	r5, [pc, #124]	; (8017d80 <scalbn+0xd4>)
 8017d02:	0020      	movs	r0, r4
 8017d04:	0029      	movs	r1, r5
 8017d06:	4a1c      	ldr	r2, [pc, #112]	; (8017d78 <scalbn+0xcc>)
 8017d08:	4b1c      	ldr	r3, [pc, #112]	; (8017d7c <scalbn+0xd0>)
 8017d0a:	f7ea fa29 	bl	8002160 <__aeabi_dmul>
 8017d0e:	e7e9      	b.n	8017ce4 <scalbn+0x38>
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	dd05      	ble.n	8017d20 <scalbn+0x74>
 8017d14:	4c1b      	ldr	r4, [pc, #108]	; (8017d84 <scalbn+0xd8>)
 8017d16:	051b      	lsls	r3, r3, #20
 8017d18:	4022      	ands	r2, r4
 8017d1a:	431a      	orrs	r2, r3
 8017d1c:	0011      	movs	r1, r2
 8017d1e:	e7e1      	b.n	8017ce4 <scalbn+0x38>
 8017d20:	001d      	movs	r5, r3
 8017d22:	3535      	adds	r5, #53	; 0x35
 8017d24:	da13      	bge.n	8017d4e <scalbn+0xa2>
 8017d26:	4a18      	ldr	r2, [pc, #96]	; (8017d88 <scalbn+0xdc>)
 8017d28:	0fcb      	lsrs	r3, r1, #31
 8017d2a:	4294      	cmp	r4, r2
 8017d2c:	dd08      	ble.n	8017d40 <scalbn+0x94>
 8017d2e:	4812      	ldr	r0, [pc, #72]	; (8017d78 <scalbn+0xcc>)
 8017d30:	4912      	ldr	r1, [pc, #72]	; (8017d7c <scalbn+0xd0>)
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d001      	beq.n	8017d3a <scalbn+0x8e>
 8017d36:	4810      	ldr	r0, [pc, #64]	; (8017d78 <scalbn+0xcc>)
 8017d38:	4911      	ldr	r1, [pc, #68]	; (8017d80 <scalbn+0xd4>)
 8017d3a:	4a0f      	ldr	r2, [pc, #60]	; (8017d78 <scalbn+0xcc>)
 8017d3c:	4b0f      	ldr	r3, [pc, #60]	; (8017d7c <scalbn+0xd0>)
 8017d3e:	e7e4      	b.n	8017d0a <scalbn+0x5e>
 8017d40:	4809      	ldr	r0, [pc, #36]	; (8017d68 <scalbn+0xbc>)
 8017d42:	490a      	ldr	r1, [pc, #40]	; (8017d6c <scalbn+0xc0>)
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d0c3      	beq.n	8017cd0 <scalbn+0x24>
 8017d48:	4807      	ldr	r0, [pc, #28]	; (8017d68 <scalbn+0xbc>)
 8017d4a:	4910      	ldr	r1, [pc, #64]	; (8017d8c <scalbn+0xe0>)
 8017d4c:	e7c0      	b.n	8017cd0 <scalbn+0x24>
 8017d4e:	4c0d      	ldr	r4, [pc, #52]	; (8017d84 <scalbn+0xd8>)
 8017d50:	3336      	adds	r3, #54	; 0x36
 8017d52:	4022      	ands	r2, r4
 8017d54:	051b      	lsls	r3, r3, #20
 8017d56:	4313      	orrs	r3, r2
 8017d58:	0019      	movs	r1, r3
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	4b0c      	ldr	r3, [pc, #48]	; (8017d90 <scalbn+0xe4>)
 8017d5e:	e7d4      	b.n	8017d0a <scalbn+0x5e>
 8017d60:	43500000 	.word	0x43500000
 8017d64:	ffff3cb0 	.word	0xffff3cb0
 8017d68:	c2f8f359 	.word	0xc2f8f359
 8017d6c:	01a56e1f 	.word	0x01a56e1f
 8017d70:	000007ff 	.word	0x000007ff
 8017d74:	000007fe 	.word	0x000007fe
 8017d78:	8800759c 	.word	0x8800759c
 8017d7c:	7e37e43c 	.word	0x7e37e43c
 8017d80:	fe37e43c 	.word	0xfe37e43c
 8017d84:	800fffff 	.word	0x800fffff
 8017d88:	0000c350 	.word	0x0000c350
 8017d8c:	81a56e1f 	.word	0x81a56e1f
 8017d90:	3c900000 	.word	0x3c900000

08017d94 <_init>:
 8017d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d96:	46c0      	nop			; (mov r8, r8)
 8017d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d9a:	bc08      	pop	{r3}
 8017d9c:	469e      	mov	lr, r3
 8017d9e:	4770      	bx	lr

08017da0 <_fini>:
 8017da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017da2:	46c0      	nop			; (mov r8, r8)
 8017da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017da6:	bc08      	pop	{r3}
 8017da8:	469e      	mov	lr, r3
 8017daa:	4770      	bx	lr
