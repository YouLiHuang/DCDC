
STM32G070RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001869c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  08018758  08018758  00028758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019250  08019250  000332a8  2**0
                  CONTENTS
  4 .ARM          00000000  08019250  08019250  000332a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019250  08019250  000332a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019250  08019250  00029250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019254  08019254  00029254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000032a8  20000000  08019258  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  200032a8  0801c500  000332a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c38  0801c500  00033c38  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000332a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217d0  00000000  00000000  000332d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a56  00000000  00000000  00054aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  000594f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  0005b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e372  00000000  00000000  0005c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267f9  00000000  00000000  0007ac72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f39b  00000000  00000000  000a146b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007584  00000000  00000000  00140858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200032a8 	.word	0x200032a8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0801873c 	.word	0x0801873c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200032ac 	.word	0x200032ac
 80000fc:	0801873c 	.word	0x0801873c

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fe25 	bl	8002098 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd75 	bl	8001f48 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe17 	bl	8002098 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe0d 	bl	8002098 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd9d 	bl	8001fcc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fd93 	bl	8001fcc <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fb8b 	bl	8000bd8 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb17 	bl	8000b00 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb7d 	bl	8000bd8 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb73 	bl	8000bd8 <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb23 	bl	8000b4c <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb19 	bl	8000b4c <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_f2uiz>:
 8000528:	219e      	movs	r1, #158	; 0x9e
 800052a:	b510      	push	{r4, lr}
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	1c04      	adds	r4, r0, #0
 8000530:	f7ff fff0 	bl	8000514 <__aeabi_fcmpge>
 8000534:	2800      	cmp	r0, #0
 8000536:	d103      	bne.n	8000540 <__aeabi_f2uiz+0x18>
 8000538:	1c20      	adds	r0, r4, #0
 800053a:	f000 fe65 	bl	8001208 <__aeabi_f2iz>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	219e      	movs	r1, #158	; 0x9e
 8000542:	1c20      	adds	r0, r4, #0
 8000544:	05c9      	lsls	r1, r1, #23
 8000546:	f000 fcb1 	bl	8000eac <__aeabi_fsub>
 800054a:	f000 fe5d 	bl	8001208 <__aeabi_f2iz>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	061b      	lsls	r3, r3, #24
 8000552:	469c      	mov	ip, r3
 8000554:	4460      	add	r0, ip
 8000556:	e7f2      	b.n	800053e <__aeabi_f2uiz+0x16>

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff9d 	bl	80004a0 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fc13 	bl	8002d98 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f85c 	bl	8002638 <__aeabi_dsub>
 8000580:	f002 fc0a 	bl	8002d98 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_fadd>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	46c6      	mov	lr, r8
 8000598:	0243      	lsls	r3, r0, #9
 800059a:	0a5b      	lsrs	r3, r3, #9
 800059c:	024e      	lsls	r6, r1, #9
 800059e:	0045      	lsls	r5, r0, #1
 80005a0:	004f      	lsls	r7, r1, #1
 80005a2:	00da      	lsls	r2, r3, #3
 80005a4:	0fc4      	lsrs	r4, r0, #31
 80005a6:	469c      	mov	ip, r3
 80005a8:	0a70      	lsrs	r0, r6, #9
 80005aa:	4690      	mov	r8, r2
 80005ac:	b500      	push	{lr}
 80005ae:	0e2d      	lsrs	r5, r5, #24
 80005b0:	0e3f      	lsrs	r7, r7, #24
 80005b2:	0fc9      	lsrs	r1, r1, #31
 80005b4:	09b6      	lsrs	r6, r6, #6
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d04b      	beq.n	8000652 <__aeabi_fadd+0xbe>
 80005ba:	1bea      	subs	r2, r5, r7
 80005bc:	2a00      	cmp	r2, #0
 80005be:	dd36      	ble.n	800062e <__aeabi_fadd+0x9a>
 80005c0:	2f00      	cmp	r7, #0
 80005c2:	d061      	beq.n	8000688 <__aeabi_fadd+0xf4>
 80005c4:	2dff      	cmp	r5, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x36>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x192>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	04db      	lsls	r3, r3, #19
 80005ce:	431e      	orrs	r6, r3
 80005d0:	2a1b      	cmp	r2, #27
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_fadd+0x42>
 80005d4:	e0d3      	b.n	800077e <__aeabi_fadd+0x1ea>
 80005d6:	2001      	movs	r0, #1
 80005d8:	4643      	mov	r3, r8
 80005da:	1a18      	subs	r0, r3, r0
 80005dc:	0143      	lsls	r3, r0, #5
 80005de:	d400      	bmi.n	80005e2 <__aeabi_fadd+0x4e>
 80005e0:	e08c      	b.n	80006fc <__aeabi_fadd+0x168>
 80005e2:	0180      	lsls	r0, r0, #6
 80005e4:	0987      	lsrs	r7, r0, #6
 80005e6:	0038      	movs	r0, r7
 80005e8:	f002 fd32 	bl	8003050 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4087      	lsls	r7, r0
 80005f0:	4285      	cmp	r5, r0
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fadd+0x62>
 80005f4:	e0b6      	b.n	8000764 <__aeabi_fadd+0x1d0>
 80005f6:	1a2d      	subs	r5, r5, r0
 80005f8:	48b3      	ldr	r0, [pc, #716]	; (80008c8 <__aeabi_fadd+0x334>)
 80005fa:	4038      	ands	r0, r7
 80005fc:	0743      	lsls	r3, r0, #29
 80005fe:	d004      	beq.n	800060a <__aeabi_fadd+0x76>
 8000600:	230f      	movs	r3, #15
 8000602:	4003      	ands	r3, r0
 8000604:	2b04      	cmp	r3, #4
 8000606:	d000      	beq.n	800060a <__aeabi_fadd+0x76>
 8000608:	3004      	adds	r0, #4
 800060a:	0143      	lsls	r3, r0, #5
 800060c:	d400      	bmi.n	8000610 <__aeabi_fadd+0x7c>
 800060e:	e078      	b.n	8000702 <__aeabi_fadd+0x16e>
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	2dfe      	cmp	r5, #254	; 0xfe
 8000614:	d065      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 8000616:	0180      	lsls	r0, r0, #6
 8000618:	0a43      	lsrs	r3, r0, #9
 800061a:	469c      	mov	ip, r3
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	4663      	mov	r3, ip
 8000620:	05d0      	lsls	r0, r2, #23
 8000622:	4318      	orrs	r0, r3
 8000624:	07e4      	lsls	r4, r4, #31
 8000626:	4320      	orrs	r0, r4
 8000628:	bc80      	pop	{r7}
 800062a:	46b8      	mov	r8, r7
 800062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062e:	2a00      	cmp	r2, #0
 8000630:	d035      	beq.n	800069e <__aeabi_fadd+0x10a>
 8000632:	1b7a      	subs	r2, r7, r5
 8000634:	2d00      	cmp	r5, #0
 8000636:	d000      	beq.n	800063a <__aeabi_fadd+0xa6>
 8000638:	e0af      	b.n	800079a <__aeabi_fadd+0x206>
 800063a:	4643      	mov	r3, r8
 800063c:	2b00      	cmp	r3, #0
 800063e:	d100      	bne.n	8000642 <__aeabi_fadd+0xae>
 8000640:	e0a7      	b.n	8000792 <__aeabi_fadd+0x1fe>
 8000642:	1e53      	subs	r3, r2, #1
 8000644:	2a01      	cmp	r2, #1
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0xb6>
 8000648:	e12f      	b.n	80008aa <__aeabi_fadd+0x316>
 800064a:	2aff      	cmp	r2, #255	; 0xff
 800064c:	d069      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800064e:	001a      	movs	r2, r3
 8000650:	e0aa      	b.n	80007a8 <__aeabi_fadd+0x214>
 8000652:	1be9      	subs	r1, r5, r7
 8000654:	2900      	cmp	r1, #0
 8000656:	dd70      	ble.n	800073a <__aeabi_fadd+0x1a6>
 8000658:	2f00      	cmp	r7, #0
 800065a:	d037      	beq.n	80006cc <__aeabi_fadd+0x138>
 800065c:	2dff      	cmp	r5, #255	; 0xff
 800065e:	d062      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	04db      	lsls	r3, r3, #19
 8000664:	431e      	orrs	r6, r3
 8000666:	291b      	cmp	r1, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0xd8>
 800066a:	e0b0      	b.n	80007ce <__aeabi_fadd+0x23a>
 800066c:	2001      	movs	r0, #1
 800066e:	4440      	add	r0, r8
 8000670:	0143      	lsls	r3, r0, #5
 8000672:	d543      	bpl.n	80006fc <__aeabi_fadd+0x168>
 8000674:	3501      	adds	r5, #1
 8000676:	2dff      	cmp	r5, #255	; 0xff
 8000678:	d033      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800067a:	2301      	movs	r3, #1
 800067c:	4a93      	ldr	r2, [pc, #588]	; (80008cc <__aeabi_fadd+0x338>)
 800067e:	4003      	ands	r3, r0
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	4010      	ands	r0, r2
 8000684:	4318      	orrs	r0, r3
 8000686:	e7b9      	b.n	80005fc <__aeabi_fadd+0x68>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0xfa>
 800068c:	e083      	b.n	8000796 <__aeabi_fadd+0x202>
 800068e:	1e51      	subs	r1, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x102>
 8000694:	e0d8      	b.n	8000848 <__aeabi_fadd+0x2b4>
 8000696:	2aff      	cmp	r2, #255	; 0xff
 8000698:	d045      	beq.n	8000726 <__aeabi_fadd+0x192>
 800069a:	000a      	movs	r2, r1
 800069c:	e798      	b.n	80005d0 <__aeabi_fadd+0x3c>
 800069e:	27fe      	movs	r7, #254	; 0xfe
 80006a0:	1c6a      	adds	r2, r5, #1
 80006a2:	4217      	tst	r7, r2
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x114>
 80006a6:	e086      	b.n	80007b6 <__aeabi_fadd+0x222>
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x11a>
 80006ac:	e0b7      	b.n	800081e <__aeabi_fadd+0x28a>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x122>
 80006b4:	e0f3      	b.n	800089e <__aeabi_fadd+0x30a>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d0b0      	beq.n	800061e <__aeabi_fadd+0x8a>
 80006bc:	1b98      	subs	r0, r3, r6
 80006be:	0143      	lsls	r3, r0, #5
 80006c0:	d400      	bmi.n	80006c4 <__aeabi_fadd+0x130>
 80006c2:	e0fa      	b.n	80008ba <__aeabi_fadd+0x326>
 80006c4:	4643      	mov	r3, r8
 80006c6:	000c      	movs	r4, r1
 80006c8:	1af0      	subs	r0, r6, r3
 80006ca:	e797      	b.n	80005fc <__aeabi_fadd+0x68>
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x13e>
 80006d0:	e0c8      	b.n	8000864 <__aeabi_fadd+0x2d0>
 80006d2:	1e4a      	subs	r2, r1, #1
 80006d4:	2901      	cmp	r1, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x146>
 80006d8:	e0ae      	b.n	8000838 <__aeabi_fadd+0x2a4>
 80006da:	29ff      	cmp	r1, #255	; 0xff
 80006dc:	d023      	beq.n	8000726 <__aeabi_fadd+0x192>
 80006de:	0011      	movs	r1, r2
 80006e0:	e7c1      	b.n	8000666 <__aeabi_fadd+0xd2>
 80006e2:	2300      	movs	r3, #0
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	469c      	mov	ip, r3
 80006e8:	e799      	b.n	800061e <__aeabi_fadd+0x8a>
 80006ea:	21fe      	movs	r1, #254	; 0xfe
 80006ec:	1c6a      	adds	r2, r5, #1
 80006ee:	4211      	tst	r1, r2
 80006f0:	d077      	beq.n	80007e2 <__aeabi_fadd+0x24e>
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 80006f6:	0015      	movs	r5, r2
 80006f8:	4446      	add	r6, r8
 80006fa:	0870      	lsrs	r0, r6, #1
 80006fc:	0743      	lsls	r3, r0, #29
 80006fe:	d000      	beq.n	8000702 <__aeabi_fadd+0x16e>
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x6c>
 8000702:	08c3      	lsrs	r3, r0, #3
 8000704:	2dff      	cmp	r5, #255	; 0xff
 8000706:	d00e      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	469c      	mov	ip, r3
 800070e:	b2ea      	uxtb	r2, r5
 8000710:	e785      	b.n	800061e <__aeabi_fadd+0x8a>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d007      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	03d2      	lsls	r2, r2, #15
 800071a:	4213      	tst	r3, r2
 800071c:	d003      	beq.n	8000726 <__aeabi_fadd+0x192>
 800071e:	4210      	tst	r0, r2
 8000720:	d101      	bne.n	8000726 <__aeabi_fadd+0x192>
 8000722:	000c      	movs	r4, r1
 8000724:	0003      	movs	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0db      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4318      	orrs	r0, r3
 8000730:	0240      	lsls	r0, r0, #9
 8000732:	0a43      	lsrs	r3, r0, #9
 8000734:	469c      	mov	ip, r3
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	e771      	b.n	800061e <__aeabi_fadd+0x8a>
 800073a:	2900      	cmp	r1, #0
 800073c:	d0d5      	beq.n	80006ea <__aeabi_fadd+0x156>
 800073e:	1b7a      	subs	r2, r7, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d160      	bne.n	8000806 <__aeabi_fadd+0x272>
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d024      	beq.n	8000794 <__aeabi_fadd+0x200>
 800074a:	1e53      	subs	r3, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d073      	beq.n	8000838 <__aeabi_fadd+0x2a4>
 8000750:	2aff      	cmp	r2, #255	; 0xff
 8000752:	d0e7      	beq.n	8000724 <__aeabi_fadd+0x190>
 8000754:	001a      	movs	r2, r3
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dc00      	bgt.n	800075c <__aeabi_fadd+0x1c8>
 800075a:	e085      	b.n	8000868 <__aeabi_fadd+0x2d4>
 800075c:	2001      	movs	r0, #1
 800075e:	003d      	movs	r5, r7
 8000760:	1980      	adds	r0, r0, r6
 8000762:	e785      	b.n	8000670 <__aeabi_fadd+0xdc>
 8000764:	2320      	movs	r3, #32
 8000766:	003a      	movs	r2, r7
 8000768:	1b45      	subs	r5, r0, r5
 800076a:	0038      	movs	r0, r7
 800076c:	3501      	adds	r5, #1
 800076e:	40ea      	lsrs	r2, r5
 8000770:	1b5d      	subs	r5, r3, r5
 8000772:	40a8      	lsls	r0, r5
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	2500      	movs	r5, #0
 800077a:	4310      	orrs	r0, r2
 800077c:	e73e      	b.n	80005fc <__aeabi_fadd+0x68>
 800077e:	2320      	movs	r3, #32
 8000780:	0030      	movs	r0, r6
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	0031      	movs	r1, r6
 8000786:	4098      	lsls	r0, r3
 8000788:	40d1      	lsrs	r1, r2
 800078a:	1e43      	subs	r3, r0, #1
 800078c:	4198      	sbcs	r0, r3
 800078e:	4308      	orrs	r0, r1
 8000790:	e722      	b.n	80005d8 <__aeabi_fadd+0x44>
 8000792:	000c      	movs	r4, r1
 8000794:	0003      	movs	r3, r0
 8000796:	0015      	movs	r5, r2
 8000798:	e7b4      	b.n	8000704 <__aeabi_fadd+0x170>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d0c1      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	4640      	mov	r0, r8
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	4318      	orrs	r0, r3
 80007a6:	4680      	mov	r8, r0
 80007a8:	2a1b      	cmp	r2, #27
 80007aa:	dd51      	ble.n	8000850 <__aeabi_fadd+0x2bc>
 80007ac:	2001      	movs	r0, #1
 80007ae:	000c      	movs	r4, r1
 80007b0:	003d      	movs	r5, r7
 80007b2:	1a30      	subs	r0, r6, r0
 80007b4:	e712      	b.n	80005dc <__aeabi_fadd+0x48>
 80007b6:	4643      	mov	r3, r8
 80007b8:	1b9f      	subs	r7, r3, r6
 80007ba:	017b      	lsls	r3, r7, #5
 80007bc:	d42b      	bmi.n	8000816 <__aeabi_fadd+0x282>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80007c2:	e710      	b.n	80005e6 <__aeabi_fadd+0x52>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	469c      	mov	ip, r3
 80007cc:	e727      	b.n	800061e <__aeabi_fadd+0x8a>
 80007ce:	2320      	movs	r3, #32
 80007d0:	0032      	movs	r2, r6
 80007d2:	0030      	movs	r0, r6
 80007d4:	40ca      	lsrs	r2, r1
 80007d6:	1a59      	subs	r1, r3, r1
 80007d8:	4088      	lsls	r0, r1
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
 80007de:	4310      	orrs	r0, r2
 80007e0:	e745      	b.n	800066e <__aeabi_fadd+0xda>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d14a      	bne.n	800087c <__aeabi_fadd+0x2e8>
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d063      	beq.n	80008b4 <__aeabi_fadd+0x320>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x260>
 80007f2:	e714      	b.n	800061e <__aeabi_fadd+0x8a>
 80007f4:	0030      	movs	r0, r6
 80007f6:	4440      	add	r0, r8
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	d400      	bmi.n	80007fe <__aeabi_fadd+0x26a>
 80007fc:	e77e      	b.n	80006fc <__aeabi_fadd+0x168>
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <__aeabi_fadd+0x334>)
 8000800:	3501      	adds	r5, #1
 8000802:	4018      	ands	r0, r3
 8000804:	e77a      	b.n	80006fc <__aeabi_fadd+0x168>
 8000806:	2fff      	cmp	r7, #255	; 0xff
 8000808:	d08c      	beq.n	8000724 <__aeabi_fadd+0x190>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	4641      	mov	r1, r8
 800080e:	04db      	lsls	r3, r3, #19
 8000810:	4319      	orrs	r1, r3
 8000812:	4688      	mov	r8, r1
 8000814:	e79f      	b.n	8000756 <__aeabi_fadd+0x1c2>
 8000816:	4643      	mov	r3, r8
 8000818:	000c      	movs	r4, r1
 800081a:	1af7      	subs	r7, r6, r3
 800081c:	e6e3      	b.n	80005e6 <__aeabi_fadd+0x52>
 800081e:	4642      	mov	r2, r8
 8000820:	2a00      	cmp	r2, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x292>
 8000824:	e775      	b.n	8000712 <__aeabi_fadd+0x17e>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x298>
 800082a:	e77a      	b.n	8000722 <__aeabi_fadd+0x18e>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	2400      	movs	r4, #0
 8000832:	469c      	mov	ip, r3
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	e6f2      	b.n	800061e <__aeabi_fadd+0x8a>
 8000838:	0030      	movs	r0, r6
 800083a:	4440      	add	r0, r8
 800083c:	2501      	movs	r5, #1
 800083e:	0143      	lsls	r3, r0, #5
 8000840:	d400      	bmi.n	8000844 <__aeabi_fadd+0x2b0>
 8000842:	e75b      	b.n	80006fc <__aeabi_fadd+0x168>
 8000844:	2502      	movs	r5, #2
 8000846:	e718      	b.n	800067a <__aeabi_fadd+0xe6>
 8000848:	4643      	mov	r3, r8
 800084a:	2501      	movs	r5, #1
 800084c:	1b98      	subs	r0, r3, r6
 800084e:	e6c5      	b.n	80005dc <__aeabi_fadd+0x48>
 8000850:	2320      	movs	r3, #32
 8000852:	4644      	mov	r4, r8
 8000854:	4640      	mov	r0, r8
 8000856:	40d4      	lsrs	r4, r2
 8000858:	1a9a      	subs	r2, r3, r2
 800085a:	4090      	lsls	r0, r2
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	4320      	orrs	r0, r4
 8000862:	e7a4      	b.n	80007ae <__aeabi_fadd+0x21a>
 8000864:	000d      	movs	r5, r1
 8000866:	e74d      	b.n	8000704 <__aeabi_fadd+0x170>
 8000868:	2320      	movs	r3, #32
 800086a:	4641      	mov	r1, r8
 800086c:	4640      	mov	r0, r8
 800086e:	40d1      	lsrs	r1, r2
 8000870:	1a9a      	subs	r2, r3, r2
 8000872:	4090      	lsls	r0, r2
 8000874:	1e43      	subs	r3, r0, #1
 8000876:	4198      	sbcs	r0, r3
 8000878:	4308      	orrs	r0, r1
 800087a:	e770      	b.n	800075e <__aeabi_fadd+0x1ca>
 800087c:	4642      	mov	r2, r8
 800087e:	2a00      	cmp	r2, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x2f0>
 8000882:	e74f      	b.n	8000724 <__aeabi_fadd+0x190>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x2f6>
 8000888:	e74d      	b.n	8000726 <__aeabi_fadd+0x192>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	03d2      	lsls	r2, r2, #15
 800088e:	4213      	tst	r3, r2
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x300>
 8000892:	e748      	b.n	8000726 <__aeabi_fadd+0x192>
 8000894:	4210      	tst	r0, r2
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x306>
 8000898:	e745      	b.n	8000726 <__aeabi_fadd+0x192>
 800089a:	0003      	movs	r3, r0
 800089c:	e743      	b.n	8000726 <__aeabi_fadd+0x192>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d090      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80008a2:	000c      	movs	r4, r1
 80008a4:	4684      	mov	ip, r0
 80008a6:	2200      	movs	r2, #0
 80008a8:	e6b9      	b.n	800061e <__aeabi_fadd+0x8a>
 80008aa:	4643      	mov	r3, r8
 80008ac:	000c      	movs	r4, r1
 80008ae:	1af0      	subs	r0, r6, r3
 80008b0:	3501      	adds	r5, #1
 80008b2:	e693      	b.n	80005dc <__aeabi_fadd+0x48>
 80008b4:	4684      	mov	ip, r0
 80008b6:	2200      	movs	r2, #0
 80008b8:	e6b1      	b.n	800061e <__aeabi_fadd+0x8a>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x32c>
 80008be:	e71d      	b.n	80006fc <__aeabi_fadd+0x168>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2400      	movs	r4, #0
 80008c4:	469c      	mov	ip, r3
 80008c6:	e6aa      	b.n	800061e <__aeabi_fadd+0x8a>
 80008c8:	fbffffff 	.word	0xfbffffff
 80008cc:	7dffffff 	.word	0x7dffffff

080008d0 <__aeabi_fdiv>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	464f      	mov	r7, r9
 80008d4:	4646      	mov	r6, r8
 80008d6:	46d6      	mov	lr, sl
 80008d8:	0245      	lsls	r5, r0, #9
 80008da:	b5c0      	push	{r6, r7, lr}
 80008dc:	0047      	lsls	r7, r0, #1
 80008de:	1c0c      	adds	r4, r1, #0
 80008e0:	0a6d      	lsrs	r5, r5, #9
 80008e2:	0e3f      	lsrs	r7, r7, #24
 80008e4:	0fc6      	lsrs	r6, r0, #31
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0x1c>
 80008ea:	e070      	b.n	80009ce <__aeabi_fdiv+0xfe>
 80008ec:	2fff      	cmp	r7, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fdiv+0x22>
 80008f0:	e075      	b.n	80009de <__aeabi_fdiv+0x10e>
 80008f2:	00eb      	lsls	r3, r5, #3
 80008f4:	2580      	movs	r5, #128	; 0x80
 80008f6:	04ed      	lsls	r5, r5, #19
 80008f8:	431d      	orrs	r5, r3
 80008fa:	2300      	movs	r3, #0
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	3f7f      	subs	r7, #127	; 0x7f
 8000902:	0260      	lsls	r0, r4, #9
 8000904:	0a43      	lsrs	r3, r0, #9
 8000906:	4698      	mov	r8, r3
 8000908:	0063      	lsls	r3, r4, #1
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	0fe4      	lsrs	r4, r4, #31
 800090e:	2b00      	cmp	r3, #0
 8000910:	d04e      	beq.n	80009b0 <__aeabi_fdiv+0xe0>
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d046      	beq.n	80009a4 <__aeabi_fdiv+0xd4>
 8000916:	4642      	mov	r2, r8
 8000918:	00d0      	lsls	r0, r2, #3
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	04d2      	lsls	r2, r2, #19
 800091e:	4302      	orrs	r2, r0
 8000920:	4690      	mov	r8, r2
 8000922:	2200      	movs	r2, #0
 8000924:	3b7f      	subs	r3, #127	; 0x7f
 8000926:	0031      	movs	r1, r6
 8000928:	1aff      	subs	r7, r7, r3
 800092a:	464b      	mov	r3, r9
 800092c:	4061      	eors	r1, r4
 800092e:	b2c9      	uxtb	r1, r1
 8000930:	4313      	orrs	r3, r2
 8000932:	2b0f      	cmp	r3, #15
 8000934:	d900      	bls.n	8000938 <__aeabi_fdiv+0x68>
 8000936:	e0b5      	b.n	8000aa4 <__aeabi_fdiv+0x1d4>
 8000938:	486e      	ldr	r0, [pc, #440]	; (8000af4 <__aeabi_fdiv+0x224>)
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	58c3      	ldr	r3, [r0, r3]
 800093e:	469f      	mov	pc, r3
 8000940:	2300      	movs	r3, #0
 8000942:	4698      	mov	r8, r3
 8000944:	0026      	movs	r6, r4
 8000946:	4645      	mov	r5, r8
 8000948:	4692      	mov	sl, r2
 800094a:	4653      	mov	r3, sl
 800094c:	2b02      	cmp	r3, #2
 800094e:	d100      	bne.n	8000952 <__aeabi_fdiv+0x82>
 8000950:	e089      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000952:	2b03      	cmp	r3, #3
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x88>
 8000956:	e09e      	b.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000958:	2b01      	cmp	r3, #1
 800095a:	d018      	beq.n	800098e <__aeabi_fdiv+0xbe>
 800095c:	003b      	movs	r3, r7
 800095e:	337f      	adds	r3, #127	; 0x7f
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd69      	ble.n	8000a38 <__aeabi_fdiv+0x168>
 8000964:	076a      	lsls	r2, r5, #29
 8000966:	d004      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000968:	220f      	movs	r2, #15
 800096a:	402a      	ands	r2, r5
 800096c:	2a04      	cmp	r2, #4
 800096e:	d000      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000970:	3504      	adds	r5, #4
 8000972:	012a      	lsls	r2, r5, #4
 8000974:	d503      	bpl.n	800097e <__aeabi_fdiv+0xae>
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <__aeabi_fdiv+0x228>)
 8000978:	401d      	ands	r5, r3
 800097a:	003b      	movs	r3, r7
 800097c:	3380      	adds	r3, #128	; 0x80
 800097e:	2bfe      	cmp	r3, #254	; 0xfe
 8000980:	dd00      	ble.n	8000984 <__aeabi_fdiv+0xb4>
 8000982:	e070      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e002      	b.n	8000992 <__aeabi_fdiv+0xc2>
 800098c:	000e      	movs	r6, r1
 800098e:	2000      	movs	r0, #0
 8000990:	2500      	movs	r5, #0
 8000992:	05c0      	lsls	r0, r0, #23
 8000994:	4328      	orrs	r0, r5
 8000996:	07f6      	lsls	r6, r6, #31
 8000998:	4330      	orrs	r0, r6
 800099a:	bce0      	pop	{r5, r6, r7}
 800099c:	46ba      	mov	sl, r7
 800099e:	46b1      	mov	r9, r6
 80009a0:	46a8      	mov	r8, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d13f      	bne.n	8000a2a <__aeabi_fdiv+0x15a>
 80009aa:	2202      	movs	r2, #2
 80009ac:	3fff      	subs	r7, #255	; 0xff
 80009ae:	e003      	b.n	80009b8 <__aeabi_fdiv+0xe8>
 80009b0:	4643      	mov	r3, r8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12d      	bne.n	8000a12 <__aeabi_fdiv+0x142>
 80009b6:	2201      	movs	r2, #1
 80009b8:	0031      	movs	r1, r6
 80009ba:	464b      	mov	r3, r9
 80009bc:	4061      	eors	r1, r4
 80009be:	b2c9      	uxtb	r1, r1
 80009c0:	4313      	orrs	r3, r2
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d834      	bhi.n	8000a30 <__aeabi_fdiv+0x160>
 80009c6:	484d      	ldr	r0, [pc, #308]	; (8000afc <__aeabi_fdiv+0x22c>)
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	58c3      	ldr	r3, [r0, r3]
 80009cc:	469f      	mov	pc, r3
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d113      	bne.n	80009fa <__aeabi_fdiv+0x12a>
 80009d2:	2304      	movs	r3, #4
 80009d4:	4699      	mov	r9, r3
 80009d6:	3b03      	subs	r3, #3
 80009d8:	2700      	movs	r7, #0
 80009da:	469a      	mov	sl, r3
 80009dc:	e791      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d105      	bne.n	80009ee <__aeabi_fdiv+0x11e>
 80009e2:	2308      	movs	r3, #8
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b06      	subs	r3, #6
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e789      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009ee:	230c      	movs	r3, #12
 80009f0:	4699      	mov	r9, r3
 80009f2:	3b09      	subs	r3, #9
 80009f4:	27ff      	movs	r7, #255	; 0xff
 80009f6:	469a      	mov	sl, r3
 80009f8:	e783      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009fa:	0028      	movs	r0, r5
 80009fc:	f002 fb28 	bl	8003050 <__clzsi2>
 8000a00:	2776      	movs	r7, #118	; 0x76
 8000a02:	1f43      	subs	r3, r0, #5
 8000a04:	409d      	lsls	r5, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	427f      	negs	r7, r7
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	1a3f      	subs	r7, r7, r0
 8000a10:	e777      	b.n	8000902 <__aeabi_fdiv+0x32>
 8000a12:	4640      	mov	r0, r8
 8000a14:	f002 fb1c 	bl	8003050 <__clzsi2>
 8000a18:	4642      	mov	r2, r8
 8000a1a:	1f43      	subs	r3, r0, #5
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	2376      	movs	r3, #118	; 0x76
 8000a20:	425b      	negs	r3, r3
 8000a22:	4690      	mov	r8, r2
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	2200      	movs	r2, #0
 8000a28:	e77d      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	e77a      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a30:	000e      	movs	r6, r1
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2500      	movs	r5, #0
 8000a36:	e7ac      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	1ac0      	subs	r0, r0, r3
 8000a3c:	281b      	cmp	r0, #27
 8000a3e:	dca6      	bgt.n	800098e <__aeabi_fdiv+0xbe>
 8000a40:	379e      	adds	r7, #158	; 0x9e
 8000a42:	002a      	movs	r2, r5
 8000a44:	40bd      	lsls	r5, r7
 8000a46:	40c2      	lsrs	r2, r0
 8000a48:	1e6b      	subs	r3, r5, #1
 8000a4a:	419d      	sbcs	r5, r3
 8000a4c:	4315      	orrs	r5, r2
 8000a4e:	076b      	lsls	r3, r5, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a52:	230f      	movs	r3, #15
 8000a54:	402b      	ands	r3, r5
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a5a:	3504      	adds	r5, #4
 8000a5c:	016b      	lsls	r3, r5, #5
 8000a5e:	d544      	bpl.n	8000aea <__aeabi_fdiv+0x21a>
 8000a60:	2001      	movs	r0, #1
 8000a62:	2500      	movs	r5, #0
 8000a64:	e795      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a66:	20ff      	movs	r0, #255	; 0xff
 8000a68:	2500      	movs	r5, #0
 8000a6a:	e792      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	2600      	movs	r6, #0
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	03ed      	lsls	r5, r5, #15
 8000a74:	e78d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a76:	2300      	movs	r3, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	03c0      	lsls	r0, r0, #15
 8000a7e:	4205      	tst	r5, r0
 8000a80:	d009      	beq.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a82:	4643      	mov	r3, r8
 8000a84:	4203      	tst	r3, r0
 8000a86:	d106      	bne.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a88:	4645      	mov	r5, r8
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	026d      	lsls	r5, r5, #9
 8000a8e:	0026      	movs	r6, r4
 8000a90:	20ff      	movs	r0, #255	; 0xff
 8000a92:	0a6d      	lsrs	r5, r5, #9
 8000a94:	e77d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a96:	2080      	movs	r0, #128	; 0x80
 8000a98:	03c0      	lsls	r0, r0, #15
 8000a9a:	4305      	orrs	r5, r0
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	0a6d      	lsrs	r5, r5, #9
 8000aa2:	e776      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	0150      	lsls	r0, r2, #5
 8000aaa:	4283      	cmp	r3, r0
 8000aac:	d219      	bcs.n	8000ae2 <__aeabi_fdiv+0x212>
 8000aae:	221b      	movs	r2, #27
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	3f01      	subs	r7, #1
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	006d      	lsls	r5, r5, #1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	db01      	blt.n	8000ac4 <__aeabi_fdiv+0x1f4>
 8000ac0:	4298      	cmp	r0, r3
 8000ac2:	d801      	bhi.n	8000ac8 <__aeabi_fdiv+0x1f8>
 8000ac4:	1a1b      	subs	r3, r3, r0
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d1f3      	bne.n	8000ab6 <__aeabi_fdiv+0x1e6>
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	4193      	sbcs	r3, r2
 8000ad2:	431d      	orrs	r5, r3
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	000e      	movs	r6, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_fdiv+0x210>
 8000ade:	e741      	b.n	8000964 <__aeabi_fdiv+0x94>
 8000ae0:	e7aa      	b.n	8000a38 <__aeabi_fdiv+0x168>
 8000ae2:	221a      	movs	r2, #26
 8000ae4:	2501      	movs	r5, #1
 8000ae6:	1a1b      	subs	r3, r3, r0
 8000ae8:	e7e4      	b.n	8000ab4 <__aeabi_fdiv+0x1e4>
 8000aea:	01ad      	lsls	r5, r5, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	e74f      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	080189d4 	.word	0x080189d4
 8000af8:	f7ffffff 	.word	0xf7ffffff
 8000afc:	08018a14 	.word	0x08018a14

08000b00 <__eqsf2>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	0042      	lsls	r2, r0, #1
 8000b04:	0245      	lsls	r5, r0, #9
 8000b06:	024e      	lsls	r6, r1, #9
 8000b08:	004c      	lsls	r4, r1, #1
 8000b0a:	0fc3      	lsrs	r3, r0, #31
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	2001      	movs	r0, #1
 8000b10:	0e12      	lsrs	r2, r2, #24
 8000b12:	0a76      	lsrs	r6, r6, #9
 8000b14:	0e24      	lsrs	r4, r4, #24
 8000b16:	0fc9      	lsrs	r1, r1, #31
 8000b18:	2aff      	cmp	r2, #255	; 0xff
 8000b1a:	d006      	beq.n	8000b2a <__eqsf2+0x2a>
 8000b1c:	2cff      	cmp	r4, #255	; 0xff
 8000b1e:	d003      	beq.n	8000b28 <__eqsf2+0x28>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	d101      	bne.n	8000b28 <__eqsf2+0x28>
 8000b24:	42b5      	cmp	r5, r6
 8000b26:	d006      	beq.n	8000b36 <__eqsf2+0x36>
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d1fc      	bne.n	8000b28 <__eqsf2+0x28>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d1fa      	bne.n	8000b28 <__eqsf2+0x28>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1f8      	bne.n	8000b28 <__eqsf2+0x28>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d006      	beq.n	8000b48 <__eqsf2+0x48>
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d1f3      	bne.n	8000b28 <__eqsf2+0x28>
 8000b40:	0028      	movs	r0, r5
 8000b42:	1e43      	subs	r3, r0, #1
 8000b44:	4198      	sbcs	r0, r3
 8000b46:	e7ef      	b.n	8000b28 <__eqsf2+0x28>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7ed      	b.n	8000b28 <__eqsf2+0x28>

08000b4c <__gesf2>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	0042      	lsls	r2, r0, #1
 8000b50:	0245      	lsls	r5, r0, #9
 8000b52:	024e      	lsls	r6, r1, #9
 8000b54:	004c      	lsls	r4, r1, #1
 8000b56:	0fc3      	lsrs	r3, r0, #31
 8000b58:	0a6d      	lsrs	r5, r5, #9
 8000b5a:	0e12      	lsrs	r2, r2, #24
 8000b5c:	0a76      	lsrs	r6, r6, #9
 8000b5e:	0e24      	lsrs	r4, r4, #24
 8000b60:	0fc8      	lsrs	r0, r1, #31
 8000b62:	2aff      	cmp	r2, #255	; 0xff
 8000b64:	d01b      	beq.n	8000b9e <__gesf2+0x52>
 8000b66:	2cff      	cmp	r4, #255	; 0xff
 8000b68:	d00e      	beq.n	8000b88 <__gesf2+0x3c>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d11b      	bne.n	8000ba6 <__gesf2+0x5a>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d101      	bne.n	8000b76 <__gesf2+0x2a>
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d01c      	beq.n	8000bb0 <__gesf2+0x64>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d00c      	beq.n	8000b94 <__gesf2+0x48>
 8000b7a:	4283      	cmp	r3, r0
 8000b7c:	d01c      	beq.n	8000bb8 <__gesf2+0x6c>
 8000b7e:	2102      	movs	r1, #2
 8000b80:	1e58      	subs	r0, r3, #1
 8000b82:	4008      	ands	r0, r1
 8000b84:	3801      	subs	r0, #1
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d122      	bne.n	8000bd2 <__gesf2+0x86>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d1f4      	bne.n	8000b7a <__gesf2+0x2e>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1f2      	bne.n	8000b7a <__gesf2+0x2e>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1f6      	bne.n	8000b86 <__gesf2+0x3a>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	e7f3      	b.n	8000b86 <__gesf2+0x3a>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d117      	bne.n	8000bd2 <__gesf2+0x86>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d0f0      	beq.n	8000b88 <__gesf2+0x3c>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d1e7      	bne.n	8000b7a <__gesf2+0x2e>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d1e5      	bne.n	8000b7a <__gesf2+0x2e>
 8000bae:	e7e6      	b.n	8000b7e <__gesf2+0x32>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e7      	beq.n	8000b86 <__gesf2+0x3a>
 8000bb6:	e7e2      	b.n	8000b7e <__gesf2+0x32>
 8000bb8:	42a2      	cmp	r2, r4
 8000bba:	dc05      	bgt.n	8000bc8 <__gesf2+0x7c>
 8000bbc:	dbea      	blt.n	8000b94 <__gesf2+0x48>
 8000bbe:	42b5      	cmp	r5, r6
 8000bc0:	d802      	bhi.n	8000bc8 <__gesf2+0x7c>
 8000bc2:	d3e7      	bcc.n	8000b94 <__gesf2+0x48>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7de      	b.n	8000b86 <__gesf2+0x3a>
 8000bc8:	4243      	negs	r3, r0
 8000bca:	4158      	adcs	r0, r3
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7d9      	b.n	8000b86 <__gesf2+0x3a>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	e7d6      	b.n	8000b86 <__gesf2+0x3a>

08000bd8 <__lesf2>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0245      	lsls	r5, r0, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	0a76      	lsrs	r6, r6, #9
 8000bea:	0e24      	lsrs	r4, r4, #24
 8000bec:	0fc8      	lsrs	r0, r1, #31
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d00b      	beq.n	8000c0a <__lesf2+0x32>
 8000bf2:	2cff      	cmp	r4, #255	; 0xff
 8000bf4:	d00d      	beq.n	8000c12 <__lesf2+0x3a>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d11f      	bne.n	8000c3a <__lesf2+0x62>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d116      	bne.n	8000c2c <__lesf2+0x54>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d114      	bne.n	8000c2c <__lesf2+0x54>
 8000c02:	2000      	movs	r0, #0
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d010      	beq.n	8000c2a <__lesf2+0x52>
 8000c08:	e009      	b.n	8000c1e <__lesf2+0x46>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d10c      	bne.n	8000c28 <__lesf2+0x50>
 8000c0e:	2cff      	cmp	r4, #255	; 0xff
 8000c10:	d113      	bne.n	8000c3a <__lesf2+0x62>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d108      	bne.n	8000c28 <__lesf2+0x50>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d008      	beq.n	8000c2c <__lesf2+0x54>
 8000c1a:	4283      	cmp	r3, r0
 8000c1c:	d012      	beq.n	8000c44 <__lesf2+0x6c>
 8000c1e:	2102      	movs	r1, #2
 8000c20:	1e58      	subs	r0, r3, #1
 8000c22:	4008      	ands	r0, r1
 8000c24:	3801      	subs	r0, #1
 8000c26:	e000      	b.n	8000c2a <__lesf2+0x52>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d1f4      	bne.n	8000c1a <__lesf2+0x42>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d1fa      	bne.n	8000c2a <__lesf2+0x52>
 8000c34:	2001      	movs	r0, #1
 8000c36:	4240      	negs	r0, r0
 8000c38:	e7f7      	b.n	8000c2a <__lesf2+0x52>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d1ed      	bne.n	8000c1a <__lesf2+0x42>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d1eb      	bne.n	8000c1a <__lesf2+0x42>
 8000c42:	e7ec      	b.n	8000c1e <__lesf2+0x46>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__lesf2+0x7c>
 8000c48:	dbf2      	blt.n	8000c30 <__lesf2+0x58>
 8000c4a:	42b5      	cmp	r5, r6
 8000c4c:	d802      	bhi.n	8000c54 <__lesf2+0x7c>
 8000c4e:	d3ef      	bcc.n	8000c30 <__lesf2+0x58>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7ea      	b.n	8000c2a <__lesf2+0x52>
 8000c54:	4243      	negs	r3, r0
 8000c56:	4158      	adcs	r0, r3
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	3801      	subs	r0, #1
 8000c5c:	e7e5      	b.n	8000c2a <__lesf2+0x52>
 8000c5e:	46c0      	nop			; (mov r8, r8)

08000c60 <__aeabi_fmul>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	464f      	mov	r7, r9
 8000c64:	4646      	mov	r6, r8
 8000c66:	46d6      	mov	lr, sl
 8000c68:	0244      	lsls	r4, r0, #9
 8000c6a:	0045      	lsls	r5, r0, #1
 8000c6c:	b5c0      	push	{r6, r7, lr}
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	1c0f      	adds	r7, r1, #0
 8000c72:	0e2d      	lsrs	r5, r5, #24
 8000c74:	0fc6      	lsrs	r6, r0, #31
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fmul+0x1c>
 8000c7a:	e08d      	b.n	8000d98 <__aeabi_fmul+0x138>
 8000c7c:	2dff      	cmp	r5, #255	; 0xff
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_fmul+0x22>
 8000c80:	e092      	b.n	8000da8 <__aeabi_fmul+0x148>
 8000c82:	2300      	movs	r3, #0
 8000c84:	2080      	movs	r0, #128	; 0x80
 8000c86:	4699      	mov	r9, r3
 8000c88:	469a      	mov	sl, r3
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	04c0      	lsls	r0, r0, #19
 8000c8e:	4304      	orrs	r4, r0
 8000c90:	3d7f      	subs	r5, #127	; 0x7f
 8000c92:	0278      	lsls	r0, r7, #9
 8000c94:	0a43      	lsrs	r3, r0, #9
 8000c96:	4698      	mov	r8, r3
 8000c98:	007b      	lsls	r3, r7, #1
 8000c9a:	0e1b      	lsrs	r3, r3, #24
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fmul+0x44>
 8000ca2:	e070      	b.n	8000d86 <__aeabi_fmul+0x126>
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fmul+0x4a>
 8000ca8:	e086      	b.n	8000db8 <__aeabi_fmul+0x158>
 8000caa:	4642      	mov	r2, r8
 8000cac:	00d0      	lsls	r0, r2, #3
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	3b7f      	subs	r3, #127	; 0x7f
 8000cb2:	18ed      	adds	r5, r5, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	04d2      	lsls	r2, r2, #19
 8000cb8:	4302      	orrs	r2, r0
 8000cba:	4690      	mov	r8, r2
 8000cbc:	469c      	mov	ip, r3
 8000cbe:	0031      	movs	r1, r6
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	4079      	eors	r1, r7
 8000cc4:	1c68      	adds	r0, r5, #1
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d81c      	bhi.n	8000d04 <__aeabi_fmul+0xa4>
 8000cca:	4a76      	ldr	r2, [pc, #472]	; (8000ea4 <__aeabi_fmul+0x244>)
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	0039      	movs	r1, r7
 8000cd4:	4644      	mov	r4, r8
 8000cd6:	46e2      	mov	sl, ip
 8000cd8:	4653      	mov	r3, sl
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d00f      	beq.n	8000cfe <__aeabi_fmul+0x9e>
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fmul+0x84>
 8000ce2:	e0d7      	b.n	8000e94 <__aeabi_fmul+0x234>
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d137      	bne.n	8000d58 <__aeabi_fmul+0xf8>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	2400      	movs	r4, #0
 8000cec:	05c0      	lsls	r0, r0, #23
 8000cee:	4320      	orrs	r0, r4
 8000cf0:	07c9      	lsls	r1, r1, #31
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	bce0      	pop	{r5, r6, r7}
 8000cf6:	46ba      	mov	sl, r7
 8000cf8:	46b1      	mov	r9, r6
 8000cfa:	46a8      	mov	r8, r5
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfe:	20ff      	movs	r0, #255	; 0xff
 8000d00:	2400      	movs	r4, #0
 8000d02:	e7f3      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d04:	0c26      	lsrs	r6, r4, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c22      	lsrs	r2, r4, #16
 8000d0a:	4644      	mov	r4, r8
 8000d0c:	0424      	lsls	r4, r4, #16
 8000d0e:	0c24      	lsrs	r4, r4, #16
 8000d10:	4643      	mov	r3, r8
 8000d12:	0027      	movs	r7, r4
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	4357      	muls	r7, r2
 8000d18:	4374      	muls	r4, r6
 8000d1a:	435a      	muls	r2, r3
 8000d1c:	435e      	muls	r6, r3
 8000d1e:	1912      	adds	r2, r2, r4
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	189b      	adds	r3, r3, r2
 8000d24:	429c      	cmp	r4, r3
 8000d26:	d903      	bls.n	8000d30 <__aeabi_fmul+0xd0>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	4466      	add	r6, ip
 8000d30:	043f      	lsls	r7, r7, #16
 8000d32:	041a      	lsls	r2, r3, #16
 8000d34:	0c3f      	lsrs	r7, r7, #16
 8000d36:	19d2      	adds	r2, r2, r7
 8000d38:	0194      	lsls	r4, r2, #6
 8000d3a:	1e67      	subs	r7, r4, #1
 8000d3c:	41bc      	sbcs	r4, r7
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	0e92      	lsrs	r2, r2, #26
 8000d42:	199b      	adds	r3, r3, r6
 8000d44:	4314      	orrs	r4, r2
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	d400      	bmi.n	8000d50 <__aeabi_fmul+0xf0>
 8000d4e:	e09b      	b.n	8000e88 <__aeabi_fmul+0x228>
 8000d50:	2301      	movs	r3, #1
 8000d52:	0862      	lsrs	r2, r4, #1
 8000d54:	401c      	ands	r4, r3
 8000d56:	4314      	orrs	r4, r2
 8000d58:	0002      	movs	r2, r0
 8000d5a:	327f      	adds	r2, #127	; 0x7f
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	dd64      	ble.n	8000e2a <__aeabi_fmul+0x1ca>
 8000d60:	0763      	lsls	r3, r4, #29
 8000d62:	d004      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d64:	230f      	movs	r3, #15
 8000d66:	4023      	ands	r3, r4
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d6c:	3404      	adds	r4, #4
 8000d6e:	0123      	lsls	r3, r4, #4
 8000d70:	d503      	bpl.n	8000d7a <__aeabi_fmul+0x11a>
 8000d72:	0002      	movs	r2, r0
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <__aeabi_fmul+0x248>)
 8000d76:	3280      	adds	r2, #128	; 0x80
 8000d78:	401c      	ands	r4, r3
 8000d7a:	2afe      	cmp	r2, #254	; 0xfe
 8000d7c:	dcbf      	bgt.n	8000cfe <__aeabi_fmul+0x9e>
 8000d7e:	01a4      	lsls	r4, r4, #6
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	b2d0      	uxtb	r0, r2
 8000d84:	e7b2      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d86:	4643      	mov	r3, r8
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d13d      	bne.n	8000e08 <__aeabi_fmul+0x1a8>
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	3301      	adds	r3, #1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	e792      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d129      	bne.n	8000df0 <__aeabi_fmul+0x190>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b03      	subs	r3, #3
 8000da2:	2500      	movs	r5, #0
 8000da4:	469a      	mov	sl, r3
 8000da6:	e774      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d11b      	bne.n	8000de4 <__aeabi_fmul+0x184>
 8000dac:	2308      	movs	r3, #8
 8000dae:	4699      	mov	r9, r3
 8000db0:	3b06      	subs	r3, #6
 8000db2:	25ff      	movs	r5, #255	; 0xff
 8000db4:	469a      	mov	sl, r3
 8000db6:	e76c      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000db8:	4643      	mov	r3, r8
 8000dba:	35ff      	adds	r5, #255	; 0xff
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10b      	bne.n	8000dd8 <__aeabi_fmul+0x178>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	469c      	mov	ip, r3
 8000dca:	e778      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000dcc:	4653      	mov	r3, sl
 8000dce:	0031      	movs	r1, r6
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fmul+0x176>
 8000dd4:	e783      	b.n	8000cde <__aeabi_fmul+0x7e>
 8000dd6:	e792      	b.n	8000cfe <__aeabi_fmul+0x9e>
 8000dd8:	2303      	movs	r3, #3
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000de4:	230c      	movs	r3, #12
 8000de6:	4699      	mov	r9, r3
 8000de8:	3b09      	subs	r3, #9
 8000dea:	25ff      	movs	r5, #255	; 0xff
 8000dec:	469a      	mov	sl, r3
 8000dee:	e750      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000df0:	0020      	movs	r0, r4
 8000df2:	f002 f92d 	bl	8003050 <__clzsi2>
 8000df6:	2576      	movs	r5, #118	; 0x76
 8000df8:	1f43      	subs	r3, r0, #5
 8000dfa:	409c      	lsls	r4, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	426d      	negs	r5, r5
 8000e00:	4699      	mov	r9, r3
 8000e02:	469a      	mov	sl, r3
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	e744      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f002 f921 	bl	8003050 <__clzsi2>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	1f43      	subs	r3, r0, #5
 8000e12:	409a      	lsls	r2, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	1a2d      	subs	r5, r5, r0
 8000e18:	4690      	mov	r8, r2
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	3d76      	subs	r5, #118	; 0x76
 8000e1e:	e74e      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	2100      	movs	r1, #0
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	03e4      	lsls	r4, r4, #15
 8000e28:	e760      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	2b1b      	cmp	r3, #27
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fmul+0x1d4>
 8000e32:	e759      	b.n	8000ce8 <__aeabi_fmul+0x88>
 8000e34:	0022      	movs	r2, r4
 8000e36:	309e      	adds	r0, #158	; 0x9e
 8000e38:	40da      	lsrs	r2, r3
 8000e3a:	4084      	lsls	r4, r0
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	1e62      	subs	r2, r4, #1
 8000e40:	4194      	sbcs	r4, r2
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0763      	lsls	r3, r4, #29
 8000e46:	d004      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e48:	230f      	movs	r3, #15
 8000e4a:	4023      	ands	r3, r4
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e50:	3404      	adds	r4, #4
 8000e52:	0163      	lsls	r3, r4, #5
 8000e54:	d51a      	bpl.n	8000e8c <__aeabi_fmul+0x22c>
 8000e56:	2001      	movs	r0, #1
 8000e58:	2400      	movs	r4, #0
 8000e5a:	e747      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e5c:	2080      	movs	r0, #128	; 0x80
 8000e5e:	03c0      	lsls	r0, r0, #15
 8000e60:	4204      	tst	r4, r0
 8000e62:	d009      	beq.n	8000e78 <__aeabi_fmul+0x218>
 8000e64:	4643      	mov	r3, r8
 8000e66:	4203      	tst	r3, r0
 8000e68:	d106      	bne.n	8000e78 <__aeabi_fmul+0x218>
 8000e6a:	4644      	mov	r4, r8
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	0264      	lsls	r4, r4, #9
 8000e70:	0039      	movs	r1, r7
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	0a64      	lsrs	r4, r4, #9
 8000e76:	e739      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e78:	2080      	movs	r0, #128	; 0x80
 8000e7a:	03c0      	lsls	r0, r0, #15
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	0264      	lsls	r4, r4, #9
 8000e80:	0031      	movs	r1, r6
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	0a64      	lsrs	r4, r4, #9
 8000e86:	e731      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e88:	0028      	movs	r0, r5
 8000e8a:	e765      	b.n	8000d58 <__aeabi_fmul+0xf8>
 8000e8c:	01a4      	lsls	r4, r4, #6
 8000e8e:	2000      	movs	r0, #0
 8000e90:	0a64      	lsrs	r4, r4, #9
 8000e92:	e72b      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e94:	2080      	movs	r0, #128	; 0x80
 8000e96:	03c0      	lsls	r0, r0, #15
 8000e98:	4304      	orrs	r4, r0
 8000e9a:	0264      	lsls	r4, r4, #9
 8000e9c:	20ff      	movs	r0, #255	; 0xff
 8000e9e:	0a64      	lsrs	r4, r4, #9
 8000ea0:	e724      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	08018a54 	.word	0x08018a54
 8000ea8:	f7ffffff 	.word	0xf7ffffff

08000eac <__aeabi_fsub>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	46ce      	mov	lr, r9
 8000eb0:	4647      	mov	r7, r8
 8000eb2:	0243      	lsls	r3, r0, #9
 8000eb4:	0a5b      	lsrs	r3, r3, #9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	00da      	lsls	r2, r3, #3
 8000eba:	4694      	mov	ip, r2
 8000ebc:	0a72      	lsrs	r2, r6, #9
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	0045      	lsls	r5, r0, #1
 8000ec2:	004a      	lsls	r2, r1, #1
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	0e2d      	lsrs	r5, r5, #24
 8000ec8:	001f      	movs	r7, r3
 8000eca:	0fc4      	lsrs	r4, r0, #31
 8000ecc:	0e12      	lsrs	r2, r2, #24
 8000ece:	0fc9      	lsrs	r1, r1, #31
 8000ed0:	09b6      	lsrs	r6, r6, #6
 8000ed2:	2aff      	cmp	r2, #255	; 0xff
 8000ed4:	d05b      	beq.n	8000f8e <__aeabi_fsub+0xe2>
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4041      	eors	r1, r0
 8000eda:	428c      	cmp	r4, r1
 8000edc:	d039      	beq.n	8000f52 <__aeabi_fsub+0xa6>
 8000ede:	1aa8      	subs	r0, r5, r2
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	dd5a      	ble.n	8000f9a <__aeabi_fsub+0xee>
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d06a      	beq.n	8000fbe <__aeabi_fsub+0x112>
 8000ee8:	2dff      	cmp	r5, #255	; 0xff
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x42>
 8000eec:	e0d9      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	04d2      	lsls	r2, r2, #19
 8000ef2:	4316      	orrs	r6, r2
 8000ef4:	281b      	cmp	r0, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0x4e>
 8000ef8:	e0e9      	b.n	80010ce <__aeabi_fsub+0x222>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4663      	mov	r3, ip
 8000efe:	1a18      	subs	r0, r3, r0
 8000f00:	0143      	lsls	r3, r0, #5
 8000f02:	d400      	bmi.n	8000f06 <__aeabi_fsub+0x5a>
 8000f04:	e0b4      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8000f06:	0180      	lsls	r0, r0, #6
 8000f08:	0987      	lsrs	r7, r0, #6
 8000f0a:	0038      	movs	r0, r7
 8000f0c:	f002 f8a0 	bl	8003050 <__clzsi2>
 8000f10:	3805      	subs	r0, #5
 8000f12:	4087      	lsls	r7, r0
 8000f14:	4285      	cmp	r5, r0
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x6e>
 8000f18:	e0cc      	b.n	80010b4 <__aeabi_fsub+0x208>
 8000f1a:	1a2d      	subs	r5, r5, r0
 8000f1c:	48b5      	ldr	r0, [pc, #724]	; (80011f4 <__aeabi_fsub+0x348>)
 8000f1e:	4038      	ands	r0, r7
 8000f20:	0743      	lsls	r3, r0, #29
 8000f22:	d004      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f24:	230f      	movs	r3, #15
 8000f26:	4003      	ands	r3, r0
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f2c:	3004      	adds	r0, #4
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0x88>
 8000f32:	e0a0      	b.n	8001076 <__aeabi_fsub+0x1ca>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	; 0xfe
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x90>
 8000f3a:	e08d      	b.n	8001058 <__aeabi_fsub+0x1ac>
 8000f3c:	0180      	lsls	r0, r0, #6
 8000f3e:	0a47      	lsrs	r7, r0, #9
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	05d0      	lsls	r0, r2, #23
 8000f44:	4338      	orrs	r0, r7
 8000f46:	07e4      	lsls	r4, r4, #31
 8000f48:	4320      	orrs	r0, r4
 8000f4a:	bcc0      	pop	{r6, r7}
 8000f4c:	46b9      	mov	r9, r7
 8000f4e:	46b0      	mov	r8, r6
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f52:	1aa8      	subs	r0, r5, r2
 8000f54:	4680      	mov	r8, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	dd45      	ble.n	8000fe6 <__aeabi_fsub+0x13a>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d070      	beq.n	8001040 <__aeabi_fsub+0x194>
 8000f5e:	2dff      	cmp	r5, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0xb8>
 8000f62:	e09e      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	04db      	lsls	r3, r3, #19
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	2b1b      	cmp	r3, #27
 8000f6e:	dc00      	bgt.n	8000f72 <__aeabi_fsub+0xc6>
 8000f70:	e0d2      	b.n	8001118 <__aeabi_fsub+0x26c>
 8000f72:	2001      	movs	r0, #1
 8000f74:	4460      	add	r0, ip
 8000f76:	0143      	lsls	r3, r0, #5
 8000f78:	d57a      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 8000f7a:	3501      	adds	r5, #1
 8000f7c:	2dff      	cmp	r5, #255	; 0xff
 8000f7e:	d06b      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4a9d      	ldr	r2, [pc, #628]	; (80011f8 <__aeabi_fsub+0x34c>)
 8000f84:	4003      	ands	r3, r0
 8000f86:	0840      	lsrs	r0, r0, #1
 8000f88:	4010      	ands	r0, r2
 8000f8a:	4318      	orrs	r0, r3
 8000f8c:	e7c8      	b.n	8000f20 <__aeabi_fsub+0x74>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d020      	beq.n	8000fd4 <__aeabi_fsub+0x128>
 8000f92:	428c      	cmp	r4, r1
 8000f94:	d023      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000f96:	0028      	movs	r0, r5
 8000f98:	38ff      	subs	r0, #255	; 0xff
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d039      	beq.n	8001012 <__aeabi_fsub+0x166>
 8000f9e:	1b57      	subs	r7, r2, r5
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0xfa>
 8000fa4:	e09d      	b.n	80010e2 <__aeabi_fsub+0x236>
 8000fa6:	4663      	mov	r3, ip
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x102>
 8000fac:	e0db      	b.n	8001166 <__aeabi_fsub+0x2ba>
 8000fae:	1e7b      	subs	r3, r7, #1
 8000fb0:	2f01      	cmp	r7, #1
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x10a>
 8000fb4:	e10d      	b.n	80011d2 <__aeabi_fsub+0x326>
 8000fb6:	2fff      	cmp	r7, #255	; 0xff
 8000fb8:	d071      	beq.n	800109e <__aeabi_fsub+0x1f2>
 8000fba:	001f      	movs	r7, r3
 8000fbc:	e098      	b.n	80010f0 <__aeabi_fsub+0x244>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x118>
 8000fc2:	e0a7      	b.n	8001114 <__aeabi_fsub+0x268>
 8000fc4:	1e42      	subs	r2, r0, #1
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x120>
 8000fca:	e0e6      	b.n	800119a <__aeabi_fsub+0x2ee>
 8000fcc:	28ff      	cmp	r0, #255	; 0xff
 8000fce:	d068      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	e78f      	b.n	8000ef4 <__aeabi_fsub+0x48>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	4041      	eors	r1, r0
 8000fd8:	42a1      	cmp	r1, r4
 8000fda:	d000      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000fdc:	e77f      	b.n	8000ede <__aeabi_fsub+0x32>
 8000fde:	20ff      	movs	r0, #255	; 0xff
 8000fe0:	4240      	negs	r0, r0
 8000fe2:	4680      	mov	r8, r0
 8000fe4:	44a8      	add	r8, r5
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d038      	beq.n	800105e <__aeabi_fsub+0x1b2>
 8000fec:	1b51      	subs	r1, r2, r5
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x148>
 8000ff2:	e0ae      	b.n	8001152 <__aeabi_fsub+0x2a6>
 8000ff4:	2aff      	cmp	r2, #255	; 0xff
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x14e>
 8000ff8:	e0df      	b.n	80011ba <__aeabi_fsub+0x30e>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	4318      	orrs	r0, r3
 8001002:	4684      	mov	ip, r0
 8001004:	291b      	cmp	r1, #27
 8001006:	dc00      	bgt.n	800100a <__aeabi_fsub+0x15e>
 8001008:	e0d9      	b.n	80011be <__aeabi_fsub+0x312>
 800100a:	2001      	movs	r0, #1
 800100c:	0015      	movs	r5, r2
 800100e:	1980      	adds	r0, r0, r6
 8001010:	e7b1      	b.n	8000f76 <__aeabi_fsub+0xca>
 8001012:	20fe      	movs	r0, #254	; 0xfe
 8001014:	1c6a      	adds	r2, r5, #1
 8001016:	4210      	tst	r0, r2
 8001018:	d171      	bne.n	80010fe <__aeabi_fsub+0x252>
 800101a:	2d00      	cmp	r5, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x174>
 800101e:	e0a6      	b.n	800116e <__aeabi_fsub+0x2c2>
 8001020:	4663      	mov	r3, ip
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x17c>
 8001026:	e0d9      	b.n	80011dc <__aeabi_fsub+0x330>
 8001028:	2200      	movs	r2, #0
 800102a:	2e00      	cmp	r6, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x184>
 800102e:	e788      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001030:	1b98      	subs	r0, r3, r6
 8001032:	0143      	lsls	r3, r0, #5
 8001034:	d400      	bmi.n	8001038 <__aeabi_fsub+0x18c>
 8001036:	e0e1      	b.n	80011fc <__aeabi_fsub+0x350>
 8001038:	4663      	mov	r3, ip
 800103a:	000c      	movs	r4, r1
 800103c:	1af0      	subs	r0, r6, r3
 800103e:	e76f      	b.n	8000f20 <__aeabi_fsub+0x74>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x19a>
 8001044:	e0b7      	b.n	80011b6 <__aeabi_fsub+0x30a>
 8001046:	0002      	movs	r2, r0
 8001048:	3a01      	subs	r2, #1
 800104a:	2801      	cmp	r0, #1
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x1a4>
 800104e:	e09c      	b.n	800118a <__aeabi_fsub+0x2de>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d026      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001054:	4690      	mov	r8, r2
 8001056:	e788      	b.n	8000f6a <__aeabi_fsub+0xbe>
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	2700      	movs	r7, #0
 800105c:	e771      	b.n	8000f42 <__aeabi_fsub+0x96>
 800105e:	20fe      	movs	r0, #254	; 0xfe
 8001060:	1c6a      	adds	r2, r5, #1
 8001062:	4210      	tst	r0, r2
 8001064:	d064      	beq.n	8001130 <__aeabi_fsub+0x284>
 8001066:	2aff      	cmp	r2, #255	; 0xff
 8001068:	d0f6      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 800106a:	0015      	movs	r5, r2
 800106c:	4466      	add	r6, ip
 800106e:	0870      	lsrs	r0, r6, #1
 8001070:	0743      	lsls	r3, r0, #29
 8001072:	d000      	beq.n	8001076 <__aeabi_fsub+0x1ca>
 8001074:	e756      	b.n	8000f24 <__aeabi_fsub+0x78>
 8001076:	08c3      	lsrs	r3, r0, #3
 8001078:	2dff      	cmp	r5, #255	; 0xff
 800107a:	d012      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	0a5f      	lsrs	r7, r3, #9
 8001080:	b2ea      	uxtb	r2, r5
 8001082:	e75e      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001084:	4662      	mov	r2, ip
 8001086:	2a00      	cmp	r2, #0
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x1e0>
 800108a:	e096      	b.n	80011ba <__aeabi_fsub+0x30e>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d008      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	03d2      	lsls	r2, r2, #15
 8001094:	4213      	tst	r3, r2
 8001096:	d004      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001098:	4648      	mov	r0, r9
 800109a:	4210      	tst	r0, r2
 800109c:	d101      	bne.n	80010a2 <__aeabi_fsub+0x1f6>
 800109e:	000c      	movs	r4, r1
 80010a0:	464b      	mov	r3, r9
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0d8      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 80010a6:	2780      	movs	r7, #128	; 0x80
 80010a8:	03ff      	lsls	r7, r7, #15
 80010aa:	431f      	orrs	r7, r3
 80010ac:	027f      	lsls	r7, r7, #9
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	0a7f      	lsrs	r7, r7, #9
 80010b2:	e746      	b.n	8000f42 <__aeabi_fsub+0x96>
 80010b4:	2320      	movs	r3, #32
 80010b6:	003a      	movs	r2, r7
 80010b8:	1b45      	subs	r5, r0, r5
 80010ba:	0038      	movs	r0, r7
 80010bc:	3501      	adds	r5, #1
 80010be:	40ea      	lsrs	r2, r5
 80010c0:	1b5d      	subs	r5, r3, r5
 80010c2:	40a8      	lsls	r0, r5
 80010c4:	1e43      	subs	r3, r0, #1
 80010c6:	4198      	sbcs	r0, r3
 80010c8:	2500      	movs	r5, #0
 80010ca:	4310      	orrs	r0, r2
 80010cc:	e728      	b.n	8000f20 <__aeabi_fsub+0x74>
 80010ce:	2320      	movs	r3, #32
 80010d0:	1a1b      	subs	r3, r3, r0
 80010d2:	0032      	movs	r2, r6
 80010d4:	409e      	lsls	r6, r3
 80010d6:	40c2      	lsrs	r2, r0
 80010d8:	0030      	movs	r0, r6
 80010da:	1e43      	subs	r3, r0, #1
 80010dc:	4198      	sbcs	r0, r3
 80010de:	4310      	orrs	r0, r2
 80010e0:	e70c      	b.n	8000efc <__aeabi_fsub+0x50>
 80010e2:	2aff      	cmp	r2, #255	; 0xff
 80010e4:	d0db      	beq.n	800109e <__aeabi_fsub+0x1f2>
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	4660      	mov	r0, ip
 80010ea:	04db      	lsls	r3, r3, #19
 80010ec:	4318      	orrs	r0, r3
 80010ee:	4684      	mov	ip, r0
 80010f0:	2f1b      	cmp	r7, #27
 80010f2:	dd56      	ble.n	80011a2 <__aeabi_fsub+0x2f6>
 80010f4:	2001      	movs	r0, #1
 80010f6:	000c      	movs	r4, r1
 80010f8:	0015      	movs	r5, r2
 80010fa:	1a30      	subs	r0, r6, r0
 80010fc:	e700      	b.n	8000f00 <__aeabi_fsub+0x54>
 80010fe:	4663      	mov	r3, ip
 8001100:	1b9f      	subs	r7, r3, r6
 8001102:	017b      	lsls	r3, r7, #5
 8001104:	d43d      	bmi.n	8001182 <__aeabi_fsub+0x2d6>
 8001106:	2f00      	cmp	r7, #0
 8001108:	d000      	beq.n	800110c <__aeabi_fsub+0x260>
 800110a:	e6fe      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800110c:	2400      	movs	r4, #0
 800110e:	2200      	movs	r2, #0
 8001110:	2700      	movs	r7, #0
 8001112:	e716      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001114:	0005      	movs	r5, r0
 8001116:	e7af      	b.n	8001078 <__aeabi_fsub+0x1cc>
 8001118:	0032      	movs	r2, r6
 800111a:	4643      	mov	r3, r8
 800111c:	4641      	mov	r1, r8
 800111e:	40da      	lsrs	r2, r3
 8001120:	2320      	movs	r3, #32
 8001122:	1a5b      	subs	r3, r3, r1
 8001124:	409e      	lsls	r6, r3
 8001126:	0030      	movs	r0, r6
 8001128:	1e43      	subs	r3, r0, #1
 800112a:	4198      	sbcs	r0, r3
 800112c:	4310      	orrs	r0, r2
 800112e:	e721      	b.n	8000f74 <__aeabi_fsub+0xc8>
 8001130:	2d00      	cmp	r5, #0
 8001132:	d1a7      	bne.n	8001084 <__aeabi_fsub+0x1d8>
 8001134:	4663      	mov	r3, ip
 8001136:	2b00      	cmp	r3, #0
 8001138:	d059      	beq.n	80011ee <__aeabi_fsub+0x342>
 800113a:	2200      	movs	r2, #0
 800113c:	2e00      	cmp	r6, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_fsub+0x296>
 8001140:	e6ff      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001142:	0030      	movs	r0, r6
 8001144:	4460      	add	r0, ip
 8001146:	0143      	lsls	r3, r0, #5
 8001148:	d592      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <__aeabi_fsub+0x348>)
 800114c:	3501      	adds	r5, #1
 800114e:	4018      	ands	r0, r3
 8001150:	e78e      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001152:	4663      	mov	r3, ip
 8001154:	2b00      	cmp	r3, #0
 8001156:	d047      	beq.n	80011e8 <__aeabi_fsub+0x33c>
 8001158:	1e4b      	subs	r3, r1, #1
 800115a:	2901      	cmp	r1, #1
 800115c:	d015      	beq.n	800118a <__aeabi_fsub+0x2de>
 800115e:	29ff      	cmp	r1, #255	; 0xff
 8001160:	d02b      	beq.n	80011ba <__aeabi_fsub+0x30e>
 8001162:	0019      	movs	r1, r3
 8001164:	e74e      	b.n	8001004 <__aeabi_fsub+0x158>
 8001166:	000c      	movs	r4, r1
 8001168:	464b      	mov	r3, r9
 800116a:	003d      	movs	r5, r7
 800116c:	e784      	b.n	8001078 <__aeabi_fsub+0x1cc>
 800116e:	4662      	mov	r2, ip
 8001170:	2a00      	cmp	r2, #0
 8001172:	d18b      	bne.n	800108c <__aeabi_fsub+0x1e0>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d192      	bne.n	800109e <__aeabi_fsub+0x1f2>
 8001178:	2780      	movs	r7, #128	; 0x80
 800117a:	2400      	movs	r4, #0
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	03ff      	lsls	r7, r7, #15
 8001180:	e6df      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001182:	4663      	mov	r3, ip
 8001184:	000c      	movs	r4, r1
 8001186:	1af7      	subs	r7, r6, r3
 8001188:	e6bf      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800118a:	0030      	movs	r0, r6
 800118c:	4460      	add	r0, ip
 800118e:	2501      	movs	r5, #1
 8001190:	0143      	lsls	r3, r0, #5
 8001192:	d400      	bmi.n	8001196 <__aeabi_fsub+0x2ea>
 8001194:	e76c      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001196:	2502      	movs	r5, #2
 8001198:	e6f2      	b.n	8000f80 <__aeabi_fsub+0xd4>
 800119a:	4663      	mov	r3, ip
 800119c:	2501      	movs	r5, #1
 800119e:	1b98      	subs	r0, r3, r6
 80011a0:	e6ae      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011a2:	2320      	movs	r3, #32
 80011a4:	4664      	mov	r4, ip
 80011a6:	4660      	mov	r0, ip
 80011a8:	40fc      	lsrs	r4, r7
 80011aa:	1bdf      	subs	r7, r3, r7
 80011ac:	40b8      	lsls	r0, r7
 80011ae:	1e43      	subs	r3, r0, #1
 80011b0:	4198      	sbcs	r0, r3
 80011b2:	4320      	orrs	r0, r4
 80011b4:	e79f      	b.n	80010f6 <__aeabi_fsub+0x24a>
 80011b6:	0005      	movs	r5, r0
 80011b8:	e75e      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ba:	464b      	mov	r3, r9
 80011bc:	e771      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 80011be:	2320      	movs	r3, #32
 80011c0:	4665      	mov	r5, ip
 80011c2:	4660      	mov	r0, ip
 80011c4:	40cd      	lsrs	r5, r1
 80011c6:	1a59      	subs	r1, r3, r1
 80011c8:	4088      	lsls	r0, r1
 80011ca:	1e43      	subs	r3, r0, #1
 80011cc:	4198      	sbcs	r0, r3
 80011ce:	4328      	orrs	r0, r5
 80011d0:	e71c      	b.n	800100c <__aeabi_fsub+0x160>
 80011d2:	4663      	mov	r3, ip
 80011d4:	000c      	movs	r4, r1
 80011d6:	2501      	movs	r5, #1
 80011d8:	1af0      	subs	r0, r6, r3
 80011da:	e691      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d095      	beq.n	800110c <__aeabi_fsub+0x260>
 80011e0:	000c      	movs	r4, r1
 80011e2:	464f      	mov	r7, r9
 80011e4:	2200      	movs	r2, #0
 80011e6:	e6ac      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011e8:	464b      	mov	r3, r9
 80011ea:	000d      	movs	r5, r1
 80011ec:	e744      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ee:	464f      	mov	r7, r9
 80011f0:	2200      	movs	r2, #0
 80011f2:	e6a6      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011f4:	fbffffff 	.word	0xfbffffff
 80011f8:	7dffffff 	.word	0x7dffffff
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d000      	beq.n	8001202 <__aeabi_fsub+0x356>
 8001200:	e736      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001202:	2400      	movs	r4, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e69c      	b.n	8000f42 <__aeabi_fsub+0x96>

08001208 <__aeabi_f2iz>:
 8001208:	0241      	lsls	r1, r0, #9
 800120a:	0042      	lsls	r2, r0, #1
 800120c:	0fc3      	lsrs	r3, r0, #31
 800120e:	0a49      	lsrs	r1, r1, #9
 8001210:	2000      	movs	r0, #0
 8001212:	0e12      	lsrs	r2, r2, #24
 8001214:	2a7e      	cmp	r2, #126	; 0x7e
 8001216:	dd03      	ble.n	8001220 <__aeabi_f2iz+0x18>
 8001218:	2a9d      	cmp	r2, #157	; 0x9d
 800121a:	dd02      	ble.n	8001222 <__aeabi_f2iz+0x1a>
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <__aeabi_f2iz+0x3c>)
 800121e:	1898      	adds	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	2080      	movs	r0, #128	; 0x80
 8001224:	0400      	lsls	r0, r0, #16
 8001226:	4301      	orrs	r1, r0
 8001228:	2a95      	cmp	r2, #149	; 0x95
 800122a:	dc07      	bgt.n	800123c <__aeabi_f2iz+0x34>
 800122c:	2096      	movs	r0, #150	; 0x96
 800122e:	1a82      	subs	r2, r0, r2
 8001230:	40d1      	lsrs	r1, r2
 8001232:	4248      	negs	r0, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f3      	bne.n	8001220 <__aeabi_f2iz+0x18>
 8001238:	0008      	movs	r0, r1
 800123a:	e7f1      	b.n	8001220 <__aeabi_f2iz+0x18>
 800123c:	3a96      	subs	r2, #150	; 0x96
 800123e:	4091      	lsls	r1, r2
 8001240:	e7f7      	b.n	8001232 <__aeabi_f2iz+0x2a>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	7fffffff 	.word	0x7fffffff

08001248 <__aeabi_i2f>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	2800      	cmp	r0, #0
 800124c:	d013      	beq.n	8001276 <__aeabi_i2f+0x2e>
 800124e:	17c3      	asrs	r3, r0, #31
 8001250:	18c6      	adds	r6, r0, r3
 8001252:	405e      	eors	r6, r3
 8001254:	0fc4      	lsrs	r4, r0, #31
 8001256:	0030      	movs	r0, r6
 8001258:	f001 fefa 	bl	8003050 <__clzsi2>
 800125c:	239e      	movs	r3, #158	; 0x9e
 800125e:	0005      	movs	r5, r0
 8001260:	1a1b      	subs	r3, r3, r0
 8001262:	2b96      	cmp	r3, #150	; 0x96
 8001264:	dc0f      	bgt.n	8001286 <__aeabi_i2f+0x3e>
 8001266:	2808      	cmp	r0, #8
 8001268:	dd01      	ble.n	800126e <__aeabi_i2f+0x26>
 800126a:	3d08      	subs	r5, #8
 800126c:	40ae      	lsls	r6, r5
 800126e:	0276      	lsls	r6, r6, #9
 8001270:	0a76      	lsrs	r6, r6, #9
 8001272:	b2d8      	uxtb	r0, r3
 8001274:	e002      	b.n	800127c <__aeabi_i2f+0x34>
 8001276:	2400      	movs	r4, #0
 8001278:	2000      	movs	r0, #0
 800127a:	2600      	movs	r6, #0
 800127c:	05c0      	lsls	r0, r0, #23
 800127e:	4330      	orrs	r0, r6
 8001280:	07e4      	lsls	r4, r4, #31
 8001282:	4320      	orrs	r0, r4
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001286:	2b99      	cmp	r3, #153	; 0x99
 8001288:	dd0c      	ble.n	80012a4 <__aeabi_i2f+0x5c>
 800128a:	2205      	movs	r2, #5
 800128c:	0031      	movs	r1, r6
 800128e:	1a12      	subs	r2, r2, r0
 8001290:	40d1      	lsrs	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	0001      	movs	r1, r0
 8001296:	0030      	movs	r0, r6
 8001298:	311b      	adds	r1, #27
 800129a:	4088      	lsls	r0, r1
 800129c:	1e41      	subs	r1, r0, #1
 800129e:	4188      	sbcs	r0, r1
 80012a0:	4302      	orrs	r2, r0
 80012a2:	0016      	movs	r6, r2
 80012a4:	2d05      	cmp	r5, #5
 80012a6:	dc12      	bgt.n	80012ce <__aeabi_i2f+0x86>
 80012a8:	0031      	movs	r1, r6
 80012aa:	4f0d      	ldr	r7, [pc, #52]	; (80012e0 <__aeabi_i2f+0x98>)
 80012ac:	4039      	ands	r1, r7
 80012ae:	0772      	lsls	r2, r6, #29
 80012b0:	d009      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012b2:	200f      	movs	r0, #15
 80012b4:	4030      	ands	r0, r6
 80012b6:	2804      	cmp	r0, #4
 80012b8:	d005      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012ba:	3104      	adds	r1, #4
 80012bc:	014a      	lsls	r2, r1, #5
 80012be:	d502      	bpl.n	80012c6 <__aeabi_i2f+0x7e>
 80012c0:	239f      	movs	r3, #159	; 0x9f
 80012c2:	4039      	ands	r1, r7
 80012c4:	1b5b      	subs	r3, r3, r5
 80012c6:	0189      	lsls	r1, r1, #6
 80012c8:	0a4e      	lsrs	r6, r1, #9
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	e7d6      	b.n	800127c <__aeabi_i2f+0x34>
 80012ce:	1f6a      	subs	r2, r5, #5
 80012d0:	4096      	lsls	r6, r2
 80012d2:	0031      	movs	r1, r6
 80012d4:	4f02      	ldr	r7, [pc, #8]	; (80012e0 <__aeabi_i2f+0x98>)
 80012d6:	4039      	ands	r1, r7
 80012d8:	0772      	lsls	r2, r6, #29
 80012da:	d0f4      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012dc:	e7e9      	b.n	80012b2 <__aeabi_i2f+0x6a>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	fbffffff 	.word	0xfbffffff

080012e4 <__aeabi_dadd>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464f      	mov	r7, r9
 80012e8:	4646      	mov	r6, r8
 80012ea:	46d6      	mov	lr, sl
 80012ec:	000d      	movs	r5, r1
 80012ee:	0004      	movs	r4, r0
 80012f0:	b5c0      	push	{r6, r7, lr}
 80012f2:	001f      	movs	r7, r3
 80012f4:	0011      	movs	r1, r2
 80012f6:	0328      	lsls	r0, r5, #12
 80012f8:	0f62      	lsrs	r2, r4, #29
 80012fa:	0a40      	lsrs	r0, r0, #9
 80012fc:	4310      	orrs	r0, r2
 80012fe:	007a      	lsls	r2, r7, #1
 8001300:	0d52      	lsrs	r2, r2, #21
 8001302:	00e3      	lsls	r3, r4, #3
 8001304:	033c      	lsls	r4, r7, #12
 8001306:	4691      	mov	r9, r2
 8001308:	0a64      	lsrs	r4, r4, #9
 800130a:	0ffa      	lsrs	r2, r7, #31
 800130c:	0f4f      	lsrs	r7, r1, #29
 800130e:	006e      	lsls	r6, r5, #1
 8001310:	4327      	orrs	r7, r4
 8001312:	4692      	mov	sl, r2
 8001314:	46b8      	mov	r8, r7
 8001316:	0d76      	lsrs	r6, r6, #21
 8001318:	0fed      	lsrs	r5, r5, #31
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	4295      	cmp	r5, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x3e>
 8001320:	e099      	b.n	8001456 <__aeabi_dadd+0x172>
 8001322:	464c      	mov	r4, r9
 8001324:	1b34      	subs	r4, r6, r4
 8001326:	46a4      	mov	ip, r4
 8001328:	2c00      	cmp	r4, #0
 800132a:	dc00      	bgt.n	800132e <__aeabi_dadd+0x4a>
 800132c:	e07c      	b.n	8001428 <__aeabi_dadd+0x144>
 800132e:	464a      	mov	r2, r9
 8001330:	2a00      	cmp	r2, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x52>
 8001334:	e0b8      	b.n	80014a8 <__aeabi_dadd+0x1c4>
 8001336:	4ac5      	ldr	r2, [pc, #788]	; (800164c <__aeabi_dadd+0x368>)
 8001338:	4296      	cmp	r6, r2
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x5a>
 800133c:	e11c      	b.n	8001578 <__aeabi_dadd+0x294>
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	003c      	movs	r4, r7
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	4314      	orrs	r4, r2
 8001346:	46a0      	mov	r8, r4
 8001348:	4662      	mov	r2, ip
 800134a:	2a38      	cmp	r2, #56	; 0x38
 800134c:	dd00      	ble.n	8001350 <__aeabi_dadd+0x6c>
 800134e:	e161      	b.n	8001614 <__aeabi_dadd+0x330>
 8001350:	2a1f      	cmp	r2, #31
 8001352:	dd00      	ble.n	8001356 <__aeabi_dadd+0x72>
 8001354:	e1cc      	b.n	80016f0 <__aeabi_dadd+0x40c>
 8001356:	4664      	mov	r4, ip
 8001358:	2220      	movs	r2, #32
 800135a:	1b12      	subs	r2, r2, r4
 800135c:	4644      	mov	r4, r8
 800135e:	4094      	lsls	r4, r2
 8001360:	000f      	movs	r7, r1
 8001362:	46a1      	mov	r9, r4
 8001364:	4664      	mov	r4, ip
 8001366:	4091      	lsls	r1, r2
 8001368:	40e7      	lsrs	r7, r4
 800136a:	464c      	mov	r4, r9
 800136c:	1e4a      	subs	r2, r1, #1
 800136e:	4191      	sbcs	r1, r2
 8001370:	433c      	orrs	r4, r7
 8001372:	4642      	mov	r2, r8
 8001374:	4321      	orrs	r1, r4
 8001376:	4664      	mov	r4, ip
 8001378:	40e2      	lsrs	r2, r4
 800137a:	1a80      	subs	r0, r0, r2
 800137c:	1a5c      	subs	r4, r3, r1
 800137e:	42a3      	cmp	r3, r4
 8001380:	419b      	sbcs	r3, r3
 8001382:	425f      	negs	r7, r3
 8001384:	1bc7      	subs	r7, r0, r7
 8001386:	023b      	lsls	r3, r7, #8
 8001388:	d400      	bmi.n	800138c <__aeabi_dadd+0xa8>
 800138a:	e0d0      	b.n	800152e <__aeabi_dadd+0x24a>
 800138c:	027f      	lsls	r7, r7, #9
 800138e:	0a7f      	lsrs	r7, r7, #9
 8001390:	2f00      	cmp	r7, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0xb2>
 8001394:	e0ff      	b.n	8001596 <__aeabi_dadd+0x2b2>
 8001396:	0038      	movs	r0, r7
 8001398:	f001 fe5a 	bl	8003050 <__clzsi2>
 800139c:	0001      	movs	r1, r0
 800139e:	3908      	subs	r1, #8
 80013a0:	2320      	movs	r3, #32
 80013a2:	0022      	movs	r2, r4
 80013a4:	1a5b      	subs	r3, r3, r1
 80013a6:	408f      	lsls	r7, r1
 80013a8:	40da      	lsrs	r2, r3
 80013aa:	408c      	lsls	r4, r1
 80013ac:	4317      	orrs	r7, r2
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	da00      	bge.n	80013b4 <__aeabi_dadd+0xd0>
 80013b2:	e0ff      	b.n	80015b4 <__aeabi_dadd+0x2d0>
 80013b4:	1b89      	subs	r1, r1, r6
 80013b6:	1c4b      	adds	r3, r1, #1
 80013b8:	2b1f      	cmp	r3, #31
 80013ba:	dd00      	ble.n	80013be <__aeabi_dadd+0xda>
 80013bc:	e0a8      	b.n	8001510 <__aeabi_dadd+0x22c>
 80013be:	2220      	movs	r2, #32
 80013c0:	0039      	movs	r1, r7
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	0020      	movs	r0, r4
 80013c6:	4094      	lsls	r4, r2
 80013c8:	4091      	lsls	r1, r2
 80013ca:	40d8      	lsrs	r0, r3
 80013cc:	1e62      	subs	r2, r4, #1
 80013ce:	4194      	sbcs	r4, r2
 80013d0:	40df      	lsrs	r7, r3
 80013d2:	2600      	movs	r6, #0
 80013d4:	4301      	orrs	r1, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	0763      	lsls	r3, r4, #29
 80013da:	d009      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013dc:	230f      	movs	r3, #15
 80013de:	4023      	ands	r3, r4
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d005      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013e4:	1d23      	adds	r3, r4, #4
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	41a4      	sbcs	r4, r4
 80013ea:	4264      	negs	r4, r4
 80013ec:	193f      	adds	r7, r7, r4
 80013ee:	001c      	movs	r4, r3
 80013f0:	023b      	lsls	r3, r7, #8
 80013f2:	d400      	bmi.n	80013f6 <__aeabi_dadd+0x112>
 80013f4:	e09e      	b.n	8001534 <__aeabi_dadd+0x250>
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <__aeabi_dadd+0x368>)
 80013f8:	3601      	adds	r6, #1
 80013fa:	429e      	cmp	r6, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x11c>
 80013fe:	e0b7      	b.n	8001570 <__aeabi_dadd+0x28c>
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <__aeabi_dadd+0x36c>)
 8001402:	08e4      	lsrs	r4, r4, #3
 8001404:	4017      	ands	r7, r2
 8001406:	077b      	lsls	r3, r7, #29
 8001408:	0571      	lsls	r1, r6, #21
 800140a:	027f      	lsls	r7, r7, #9
 800140c:	4323      	orrs	r3, r4
 800140e:	0b3f      	lsrs	r7, r7, #12
 8001410:	0d4a      	lsrs	r2, r1, #21
 8001412:	0512      	lsls	r2, r2, #20
 8001414:	433a      	orrs	r2, r7
 8001416:	07ed      	lsls	r5, r5, #31
 8001418:	432a      	orrs	r2, r5
 800141a:	0018      	movs	r0, r3
 800141c:	0011      	movs	r1, r2
 800141e:	bce0      	pop	{r5, r6, r7}
 8001420:	46ba      	mov	sl, r7
 8001422:	46b1      	mov	r9, r6
 8001424:	46a8      	mov	r8, r5
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	2c00      	cmp	r4, #0
 800142a:	d04b      	beq.n	80014c4 <__aeabi_dadd+0x1e0>
 800142c:	464c      	mov	r4, r9
 800142e:	1ba4      	subs	r4, r4, r6
 8001430:	46a4      	mov	ip, r4
 8001432:	2e00      	cmp	r6, #0
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x154>
 8001436:	e123      	b.n	8001680 <__aeabi_dadd+0x39c>
 8001438:	0004      	movs	r4, r0
 800143a:	431c      	orrs	r4, r3
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x15c>
 800143e:	e1af      	b.n	80017a0 <__aeabi_dadd+0x4bc>
 8001440:	4662      	mov	r2, ip
 8001442:	1e54      	subs	r4, r2, #1
 8001444:	2a01      	cmp	r2, #1
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x166>
 8001448:	e215      	b.n	8001876 <__aeabi_dadd+0x592>
 800144a:	4d80      	ldr	r5, [pc, #512]	; (800164c <__aeabi_dadd+0x368>)
 800144c:	45ac      	cmp	ip, r5
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x16e>
 8001450:	e1c8      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001452:	46a4      	mov	ip, r4
 8001454:	e11b      	b.n	800168e <__aeabi_dadd+0x3aa>
 8001456:	464a      	mov	r2, r9
 8001458:	1ab2      	subs	r2, r6, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2a00      	cmp	r2, #0
 800145e:	dc00      	bgt.n	8001462 <__aeabi_dadd+0x17e>
 8001460:	e0ac      	b.n	80015bc <__aeabi_dadd+0x2d8>
 8001462:	464a      	mov	r2, r9
 8001464:	2a00      	cmp	r2, #0
 8001466:	d043      	beq.n	80014f0 <__aeabi_dadd+0x20c>
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <__aeabi_dadd+0x368>)
 800146a:	4296      	cmp	r6, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x18c>
 800146e:	e1af      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	003c      	movs	r4, r7
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	4314      	orrs	r4, r2
 8001478:	46a0      	mov	r8, r4
 800147a:	4662      	mov	r2, ip
 800147c:	2a38      	cmp	r2, #56	; 0x38
 800147e:	dc67      	bgt.n	8001550 <__aeabi_dadd+0x26c>
 8001480:	2a1f      	cmp	r2, #31
 8001482:	dc00      	bgt.n	8001486 <__aeabi_dadd+0x1a2>
 8001484:	e15f      	b.n	8001746 <__aeabi_dadd+0x462>
 8001486:	4647      	mov	r7, r8
 8001488:	3a20      	subs	r2, #32
 800148a:	40d7      	lsrs	r7, r2
 800148c:	4662      	mov	r2, ip
 800148e:	2a20      	cmp	r2, #32
 8001490:	d005      	beq.n	800149e <__aeabi_dadd+0x1ba>
 8001492:	4664      	mov	r4, ip
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	1b12      	subs	r2, r2, r4
 8001498:	4644      	mov	r4, r8
 800149a:	4094      	lsls	r4, r2
 800149c:	4321      	orrs	r1, r4
 800149e:	1e4a      	subs	r2, r1, #1
 80014a0:	4191      	sbcs	r1, r2
 80014a2:	000c      	movs	r4, r1
 80014a4:	433c      	orrs	r4, r7
 80014a6:	e057      	b.n	8001558 <__aeabi_dadd+0x274>
 80014a8:	003a      	movs	r2, r7
 80014aa:	430a      	orrs	r2, r1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1cc>
 80014ae:	e105      	b.n	80016bc <__aeabi_dadd+0x3d8>
 80014b0:	0022      	movs	r2, r4
 80014b2:	3a01      	subs	r2, #1
 80014b4:	2c01      	cmp	r4, #1
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0x1d6>
 80014b8:	e182      	b.n	80017c0 <__aeabi_dadd+0x4dc>
 80014ba:	4c64      	ldr	r4, [pc, #400]	; (800164c <__aeabi_dadd+0x368>)
 80014bc:	45a4      	cmp	ip, r4
 80014be:	d05b      	beq.n	8001578 <__aeabi_dadd+0x294>
 80014c0:	4694      	mov	ip, r2
 80014c2:	e741      	b.n	8001348 <__aeabi_dadd+0x64>
 80014c4:	4c63      	ldr	r4, [pc, #396]	; (8001654 <__aeabi_dadd+0x370>)
 80014c6:	1c77      	adds	r7, r6, #1
 80014c8:	4227      	tst	r7, r4
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x1ea>
 80014cc:	e0c4      	b.n	8001658 <__aeabi_dadd+0x374>
 80014ce:	0004      	movs	r4, r0
 80014d0:	431c      	orrs	r4, r3
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dadd+0x1f4>
 80014d6:	e169      	b.n	80017ac <__aeabi_dadd+0x4c8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x1fa>
 80014dc:	e1bf      	b.n	800185e <__aeabi_dadd+0x57a>
 80014de:	4644      	mov	r4, r8
 80014e0:	430c      	orrs	r4, r1
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x202>
 80014e4:	e1d0      	b.n	8001888 <__aeabi_dadd+0x5a4>
 80014e6:	0742      	lsls	r2, r0, #29
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	08c0      	lsrs	r0, r0, #3
 80014ee:	e029      	b.n	8001544 <__aeabi_dadd+0x260>
 80014f0:	003a      	movs	r2, r7
 80014f2:	430a      	orrs	r2, r1
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x214>
 80014f6:	e170      	b.n	80017da <__aeabi_dadd+0x4f6>
 80014f8:	4662      	mov	r2, ip
 80014fa:	4664      	mov	r4, ip
 80014fc:	3a01      	subs	r2, #1
 80014fe:	2c01      	cmp	r4, #1
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x220>
 8001502:	e0e0      	b.n	80016c6 <__aeabi_dadd+0x3e2>
 8001504:	4c51      	ldr	r4, [pc, #324]	; (800164c <__aeabi_dadd+0x368>)
 8001506:	45a4      	cmp	ip, r4
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x228>
 800150a:	e161      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 800150c:	4694      	mov	ip, r2
 800150e:	e7b4      	b.n	800147a <__aeabi_dadd+0x196>
 8001510:	003a      	movs	r2, r7
 8001512:	391f      	subs	r1, #31
 8001514:	40ca      	lsrs	r2, r1
 8001516:	0011      	movs	r1, r2
 8001518:	2b20      	cmp	r3, #32
 800151a:	d003      	beq.n	8001524 <__aeabi_dadd+0x240>
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	409f      	lsls	r7, r3
 8001522:	433c      	orrs	r4, r7
 8001524:	1e63      	subs	r3, r4, #1
 8001526:	419c      	sbcs	r4, r3
 8001528:	2700      	movs	r7, #0
 800152a:	2600      	movs	r6, #0
 800152c:	430c      	orrs	r4, r1
 800152e:	0763      	lsls	r3, r4, #29
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x250>
 8001532:	e753      	b.n	80013dc <__aeabi_dadd+0xf8>
 8001534:	46b4      	mov	ip, r6
 8001536:	08e4      	lsrs	r4, r4, #3
 8001538:	077b      	lsls	r3, r7, #29
 800153a:	4323      	orrs	r3, r4
 800153c:	08f8      	lsrs	r0, r7, #3
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <__aeabi_dadd+0x368>)
 8001540:	4594      	cmp	ip, r2
 8001542:	d01d      	beq.n	8001580 <__aeabi_dadd+0x29c>
 8001544:	4662      	mov	r2, ip
 8001546:	0307      	lsls	r7, r0, #12
 8001548:	0552      	lsls	r2, r2, #21
 800154a:	0b3f      	lsrs	r7, r7, #12
 800154c:	0d52      	lsrs	r2, r2, #21
 800154e:	e760      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001550:	4644      	mov	r4, r8
 8001552:	430c      	orrs	r4, r1
 8001554:	1e62      	subs	r2, r4, #1
 8001556:	4194      	sbcs	r4, r2
 8001558:	18e4      	adds	r4, r4, r3
 800155a:	429c      	cmp	r4, r3
 800155c:	419b      	sbcs	r3, r3
 800155e:	425f      	negs	r7, r3
 8001560:	183f      	adds	r7, r7, r0
 8001562:	023b      	lsls	r3, r7, #8
 8001564:	d5e3      	bpl.n	800152e <__aeabi_dadd+0x24a>
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <__aeabi_dadd+0x368>)
 8001568:	3601      	adds	r6, #1
 800156a:	429e      	cmp	r6, r3
 800156c:	d000      	beq.n	8001570 <__aeabi_dadd+0x28c>
 800156e:	e0b5      	b.n	80016dc <__aeabi_dadd+0x3f8>
 8001570:	0032      	movs	r2, r6
 8001572:	2700      	movs	r7, #0
 8001574:	2300      	movs	r3, #0
 8001576:	e74c      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001578:	0742      	lsls	r2, r0, #29
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	4313      	orrs	r3, r2
 800157e:	08c0      	lsrs	r0, r0, #3
 8001580:	001a      	movs	r2, r3
 8001582:	4302      	orrs	r2, r0
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x2a4>
 8001586:	e1e1      	b.n	800194c <__aeabi_dadd+0x668>
 8001588:	2780      	movs	r7, #128	; 0x80
 800158a:	033f      	lsls	r7, r7, #12
 800158c:	4307      	orrs	r7, r0
 800158e:	033f      	lsls	r7, r7, #12
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <__aeabi_dadd+0x368>)
 8001592:	0b3f      	lsrs	r7, r7, #12
 8001594:	e73d      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001596:	0020      	movs	r0, r4
 8001598:	f001 fd5a 	bl	8003050 <__clzsi2>
 800159c:	0001      	movs	r1, r0
 800159e:	3118      	adds	r1, #24
 80015a0:	291f      	cmp	r1, #31
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dadd+0x2c2>
 80015a4:	e6fc      	b.n	80013a0 <__aeabi_dadd+0xbc>
 80015a6:	3808      	subs	r0, #8
 80015a8:	4084      	lsls	r4, r0
 80015aa:	0027      	movs	r7, r4
 80015ac:	2400      	movs	r4, #0
 80015ae:	42b1      	cmp	r1, r6
 80015b0:	db00      	blt.n	80015b4 <__aeabi_dadd+0x2d0>
 80015b2:	e6ff      	b.n	80013b4 <__aeabi_dadd+0xd0>
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <__aeabi_dadd+0x36c>)
 80015b6:	1a76      	subs	r6, r6, r1
 80015b8:	4017      	ands	r7, r2
 80015ba:	e70d      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d02f      	beq.n	8001620 <__aeabi_dadd+0x33c>
 80015c0:	464a      	mov	r2, r9
 80015c2:	1b92      	subs	r2, r2, r6
 80015c4:	4694      	mov	ip, r2
 80015c6:	2e00      	cmp	r6, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x2e8>
 80015ca:	e0ad      	b.n	8001728 <__aeabi_dadd+0x444>
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <__aeabi_dadd+0x368>)
 80015ce:	4591      	cmp	r9, r2
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x2f0>
 80015d2:	e10f      	b.n	80017f4 <__aeabi_dadd+0x510>
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	4310      	orrs	r0, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	2a38      	cmp	r2, #56	; 0x38
 80015de:	dd00      	ble.n	80015e2 <__aeabi_dadd+0x2fe>
 80015e0:	e10f      	b.n	8001802 <__aeabi_dadd+0x51e>
 80015e2:	2a1f      	cmp	r2, #31
 80015e4:	dd00      	ble.n	80015e8 <__aeabi_dadd+0x304>
 80015e6:	e180      	b.n	80018ea <__aeabi_dadd+0x606>
 80015e8:	4664      	mov	r4, ip
 80015ea:	2220      	movs	r2, #32
 80015ec:	001e      	movs	r6, r3
 80015ee:	1b12      	subs	r2, r2, r4
 80015f0:	4667      	mov	r7, ip
 80015f2:	0004      	movs	r4, r0
 80015f4:	4093      	lsls	r3, r2
 80015f6:	4094      	lsls	r4, r2
 80015f8:	40fe      	lsrs	r6, r7
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4193      	sbcs	r3, r2
 80015fe:	40f8      	lsrs	r0, r7
 8001600:	4334      	orrs	r4, r6
 8001602:	431c      	orrs	r4, r3
 8001604:	4480      	add	r8, r0
 8001606:	1864      	adds	r4, r4, r1
 8001608:	428c      	cmp	r4, r1
 800160a:	41bf      	sbcs	r7, r7
 800160c:	427f      	negs	r7, r7
 800160e:	464e      	mov	r6, r9
 8001610:	4447      	add	r7, r8
 8001612:	e7a6      	b.n	8001562 <__aeabi_dadd+0x27e>
 8001614:	4642      	mov	r2, r8
 8001616:	430a      	orrs	r2, r1
 8001618:	0011      	movs	r1, r2
 800161a:	1e4a      	subs	r2, r1, #1
 800161c:	4191      	sbcs	r1, r2
 800161e:	e6ad      	b.n	800137c <__aeabi_dadd+0x98>
 8001620:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <__aeabi_dadd+0x370>)
 8001622:	1c72      	adds	r2, r6, #1
 8001624:	4222      	tst	r2, r4
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x346>
 8001628:	e0a1      	b.n	800176e <__aeabi_dadd+0x48a>
 800162a:	0002      	movs	r2, r0
 800162c:	431a      	orrs	r2, r3
 800162e:	2e00      	cmp	r6, #0
 8001630:	d000      	beq.n	8001634 <__aeabi_dadd+0x350>
 8001632:	e0fa      	b.n	800182a <__aeabi_dadd+0x546>
 8001634:	2a00      	cmp	r2, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x356>
 8001638:	e145      	b.n	80018c6 <__aeabi_dadd+0x5e2>
 800163a:	003a      	movs	r2, r7
 800163c:	430a      	orrs	r2, r1
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x35e>
 8001640:	e146      	b.n	80018d0 <__aeabi_dadd+0x5ec>
 8001642:	0742      	lsls	r2, r0, #29
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	4313      	orrs	r3, r2
 8001648:	08c0      	lsrs	r0, r0, #3
 800164a:	e77b      	b.n	8001544 <__aeabi_dadd+0x260>
 800164c:	000007ff 	.word	0x000007ff
 8001650:	ff7fffff 	.word	0xff7fffff
 8001654:	000007fe 	.word	0x000007fe
 8001658:	4647      	mov	r7, r8
 800165a:	1a5c      	subs	r4, r3, r1
 800165c:	1bc2      	subs	r2, r0, r7
 800165e:	42a3      	cmp	r3, r4
 8001660:	41bf      	sbcs	r7, r7
 8001662:	427f      	negs	r7, r7
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	464a      	mov	r2, r9
 800166a:	1abf      	subs	r7, r7, r2
 800166c:	023a      	lsls	r2, r7, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dadd+0x38e>
 8001670:	e08d      	b.n	800178e <__aeabi_dadd+0x4aa>
 8001672:	0023      	movs	r3, r4
 8001674:	433b      	orrs	r3, r7
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x396>
 8001678:	e68a      	b.n	8001390 <__aeabi_dadd+0xac>
 800167a:	2000      	movs	r0, #0
 800167c:	2500      	movs	r5, #0
 800167e:	e761      	b.n	8001544 <__aeabi_dadd+0x260>
 8001680:	4cb4      	ldr	r4, [pc, #720]	; (8001954 <__aeabi_dadd+0x670>)
 8001682:	45a1      	cmp	r9, r4
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x3a4>
 8001686:	e0ad      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	0424      	lsls	r4, r4, #16
 800168c:	4320      	orrs	r0, r4
 800168e:	4664      	mov	r4, ip
 8001690:	2c38      	cmp	r4, #56	; 0x38
 8001692:	dc3d      	bgt.n	8001710 <__aeabi_dadd+0x42c>
 8001694:	4662      	mov	r2, ip
 8001696:	2c1f      	cmp	r4, #31
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0x3b8>
 800169a:	e0b7      	b.n	800180c <__aeabi_dadd+0x528>
 800169c:	2520      	movs	r5, #32
 800169e:	001e      	movs	r6, r3
 80016a0:	1b2d      	subs	r5, r5, r4
 80016a2:	0004      	movs	r4, r0
 80016a4:	40ab      	lsls	r3, r5
 80016a6:	40ac      	lsls	r4, r5
 80016a8:	40d6      	lsrs	r6, r2
 80016aa:	40d0      	lsrs	r0, r2
 80016ac:	4642      	mov	r2, r8
 80016ae:	1e5d      	subs	r5, r3, #1
 80016b0:	41ab      	sbcs	r3, r5
 80016b2:	4334      	orrs	r4, r6
 80016b4:	1a12      	subs	r2, r2, r0
 80016b6:	4690      	mov	r8, r2
 80016b8:	4323      	orrs	r3, r4
 80016ba:	e02c      	b.n	8001716 <__aeabi_dadd+0x432>
 80016bc:	0742      	lsls	r2, r0, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c0      	lsrs	r0, r0, #3
 80016c4:	e73b      	b.n	800153e <__aeabi_dadd+0x25a>
 80016c6:	185c      	adds	r4, r3, r1
 80016c8:	429c      	cmp	r4, r3
 80016ca:	419b      	sbcs	r3, r3
 80016cc:	4440      	add	r0, r8
 80016ce:	425b      	negs	r3, r3
 80016d0:	18c7      	adds	r7, r0, r3
 80016d2:	2601      	movs	r6, #1
 80016d4:	023b      	lsls	r3, r7, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dadd+0x3f6>
 80016d8:	e729      	b.n	800152e <__aeabi_dadd+0x24a>
 80016da:	2602      	movs	r6, #2
 80016dc:	4a9e      	ldr	r2, [pc, #632]	; (8001958 <__aeabi_dadd+0x674>)
 80016de:	0863      	lsrs	r3, r4, #1
 80016e0:	4017      	ands	r7, r2
 80016e2:	2201      	movs	r2, #1
 80016e4:	4014      	ands	r4, r2
 80016e6:	431c      	orrs	r4, r3
 80016e8:	07fb      	lsls	r3, r7, #31
 80016ea:	431c      	orrs	r4, r3
 80016ec:	087f      	lsrs	r7, r7, #1
 80016ee:	e673      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80016f0:	4644      	mov	r4, r8
 80016f2:	3a20      	subs	r2, #32
 80016f4:	40d4      	lsrs	r4, r2
 80016f6:	4662      	mov	r2, ip
 80016f8:	2a20      	cmp	r2, #32
 80016fa:	d005      	beq.n	8001708 <__aeabi_dadd+0x424>
 80016fc:	4667      	mov	r7, ip
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	1bd2      	subs	r2, r2, r7
 8001702:	4647      	mov	r7, r8
 8001704:	4097      	lsls	r7, r2
 8001706:	4339      	orrs	r1, r7
 8001708:	1e4a      	subs	r2, r1, #1
 800170a:	4191      	sbcs	r1, r2
 800170c:	4321      	orrs	r1, r4
 800170e:	e635      	b.n	800137c <__aeabi_dadd+0x98>
 8001710:	4303      	orrs	r3, r0
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	4183      	sbcs	r3, r0
 8001716:	1acc      	subs	r4, r1, r3
 8001718:	42a1      	cmp	r1, r4
 800171a:	41bf      	sbcs	r7, r7
 800171c:	4643      	mov	r3, r8
 800171e:	427f      	negs	r7, r7
 8001720:	4655      	mov	r5, sl
 8001722:	464e      	mov	r6, r9
 8001724:	1bdf      	subs	r7, r3, r7
 8001726:	e62e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001728:	0002      	movs	r2, r0
 800172a:	431a      	orrs	r2, r3
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x44c>
 800172e:	e0bd      	b.n	80018ac <__aeabi_dadd+0x5c8>
 8001730:	4662      	mov	r2, ip
 8001732:	4664      	mov	r4, ip
 8001734:	3a01      	subs	r2, #1
 8001736:	2c01      	cmp	r4, #1
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x458>
 800173a:	e0e5      	b.n	8001908 <__aeabi_dadd+0x624>
 800173c:	4c85      	ldr	r4, [pc, #532]	; (8001954 <__aeabi_dadd+0x670>)
 800173e:	45a4      	cmp	ip, r4
 8001740:	d058      	beq.n	80017f4 <__aeabi_dadd+0x510>
 8001742:	4694      	mov	ip, r2
 8001744:	e749      	b.n	80015da <__aeabi_dadd+0x2f6>
 8001746:	4664      	mov	r4, ip
 8001748:	2220      	movs	r2, #32
 800174a:	1b12      	subs	r2, r2, r4
 800174c:	4644      	mov	r4, r8
 800174e:	4094      	lsls	r4, r2
 8001750:	000f      	movs	r7, r1
 8001752:	46a1      	mov	r9, r4
 8001754:	4664      	mov	r4, ip
 8001756:	4091      	lsls	r1, r2
 8001758:	40e7      	lsrs	r7, r4
 800175a:	464c      	mov	r4, r9
 800175c:	1e4a      	subs	r2, r1, #1
 800175e:	4191      	sbcs	r1, r2
 8001760:	433c      	orrs	r4, r7
 8001762:	4642      	mov	r2, r8
 8001764:	430c      	orrs	r4, r1
 8001766:	4661      	mov	r1, ip
 8001768:	40ca      	lsrs	r2, r1
 800176a:	1880      	adds	r0, r0, r2
 800176c:	e6f4      	b.n	8001558 <__aeabi_dadd+0x274>
 800176e:	4c79      	ldr	r4, [pc, #484]	; (8001954 <__aeabi_dadd+0x670>)
 8001770:	42a2      	cmp	r2, r4
 8001772:	d100      	bne.n	8001776 <__aeabi_dadd+0x492>
 8001774:	e6fd      	b.n	8001572 <__aeabi_dadd+0x28e>
 8001776:	1859      	adds	r1, r3, r1
 8001778:	4299      	cmp	r1, r3
 800177a:	419b      	sbcs	r3, r3
 800177c:	4440      	add	r0, r8
 800177e:	425f      	negs	r7, r3
 8001780:	19c7      	adds	r7, r0, r7
 8001782:	07fc      	lsls	r4, r7, #31
 8001784:	0849      	lsrs	r1, r1, #1
 8001786:	0016      	movs	r6, r2
 8001788:	430c      	orrs	r4, r1
 800178a:	087f      	lsrs	r7, r7, #1
 800178c:	e6cf      	b.n	800152e <__aeabi_dadd+0x24a>
 800178e:	1acc      	subs	r4, r1, r3
 8001790:	42a1      	cmp	r1, r4
 8001792:	41bf      	sbcs	r7, r7
 8001794:	4643      	mov	r3, r8
 8001796:	427f      	negs	r7, r7
 8001798:	1a18      	subs	r0, r3, r0
 800179a:	4655      	mov	r5, sl
 800179c:	1bc7      	subs	r7, r0, r7
 800179e:	e5f7      	b.n	8001390 <__aeabi_dadd+0xac>
 80017a0:	08c9      	lsrs	r1, r1, #3
 80017a2:	077b      	lsls	r3, r7, #29
 80017a4:	4655      	mov	r5, sl
 80017a6:	430b      	orrs	r3, r1
 80017a8:	08f8      	lsrs	r0, r7, #3
 80017aa:	e6c8      	b.n	800153e <__aeabi_dadd+0x25a>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x4ce>
 80017b0:	e081      	b.n	80018b6 <__aeabi_dadd+0x5d2>
 80017b2:	4643      	mov	r3, r8
 80017b4:	430b      	orrs	r3, r1
 80017b6:	d115      	bne.n	80017e4 <__aeabi_dadd+0x500>
 80017b8:	2080      	movs	r0, #128	; 0x80
 80017ba:	2500      	movs	r5, #0
 80017bc:	0300      	lsls	r0, r0, #12
 80017be:	e6e3      	b.n	8001588 <__aeabi_dadd+0x2a4>
 80017c0:	1a5c      	subs	r4, r3, r1
 80017c2:	42a3      	cmp	r3, r4
 80017c4:	419b      	sbcs	r3, r3
 80017c6:	1bc7      	subs	r7, r0, r7
 80017c8:	425b      	negs	r3, r3
 80017ca:	2601      	movs	r6, #1
 80017cc:	1aff      	subs	r7, r7, r3
 80017ce:	e5da      	b.n	8001386 <__aeabi_dadd+0xa2>
 80017d0:	0742      	lsls	r2, r0, #29
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	08c0      	lsrs	r0, r0, #3
 80017d8:	e6d2      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017da:	0742      	lsls	r2, r0, #29
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	4313      	orrs	r3, r2
 80017e0:	08c0      	lsrs	r0, r0, #3
 80017e2:	e6ac      	b.n	800153e <__aeabi_dadd+0x25a>
 80017e4:	4643      	mov	r3, r8
 80017e6:	4642      	mov	r2, r8
 80017e8:	08c9      	lsrs	r1, r1, #3
 80017ea:	075b      	lsls	r3, r3, #29
 80017ec:	4655      	mov	r5, sl
 80017ee:	430b      	orrs	r3, r1
 80017f0:	08d0      	lsrs	r0, r2, #3
 80017f2:	e6c5      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017f4:	4643      	mov	r3, r8
 80017f6:	4642      	mov	r2, r8
 80017f8:	075b      	lsls	r3, r3, #29
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	430b      	orrs	r3, r1
 80017fe:	08d0      	lsrs	r0, r2, #3
 8001800:	e6be      	b.n	8001580 <__aeabi_dadd+0x29c>
 8001802:	4303      	orrs	r3, r0
 8001804:	001c      	movs	r4, r3
 8001806:	1e63      	subs	r3, r4, #1
 8001808:	419c      	sbcs	r4, r3
 800180a:	e6fc      	b.n	8001606 <__aeabi_dadd+0x322>
 800180c:	0002      	movs	r2, r0
 800180e:	3c20      	subs	r4, #32
 8001810:	40e2      	lsrs	r2, r4
 8001812:	0014      	movs	r4, r2
 8001814:	4662      	mov	r2, ip
 8001816:	2a20      	cmp	r2, #32
 8001818:	d003      	beq.n	8001822 <__aeabi_dadd+0x53e>
 800181a:	2540      	movs	r5, #64	; 0x40
 800181c:	1aad      	subs	r5, r5, r2
 800181e:	40a8      	lsls	r0, r5
 8001820:	4303      	orrs	r3, r0
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	4183      	sbcs	r3, r0
 8001826:	4323      	orrs	r3, r4
 8001828:	e775      	b.n	8001716 <__aeabi_dadd+0x432>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d0e2      	beq.n	80017f4 <__aeabi_dadd+0x510>
 800182e:	003a      	movs	r2, r7
 8001830:	430a      	orrs	r2, r1
 8001832:	d0cd      	beq.n	80017d0 <__aeabi_dadd+0x4ec>
 8001834:	0742      	lsls	r2, r0, #29
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	4313      	orrs	r3, r2
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	08c0      	lsrs	r0, r0, #3
 800183e:	0312      	lsls	r2, r2, #12
 8001840:	4210      	tst	r0, r2
 8001842:	d006      	beq.n	8001852 <__aeabi_dadd+0x56e>
 8001844:	08fc      	lsrs	r4, r7, #3
 8001846:	4214      	tst	r4, r2
 8001848:	d103      	bne.n	8001852 <__aeabi_dadd+0x56e>
 800184a:	0020      	movs	r0, r4
 800184c:	08cb      	lsrs	r3, r1, #3
 800184e:	077a      	lsls	r2, r7, #29
 8001850:	4313      	orrs	r3, r2
 8001852:	0f5a      	lsrs	r2, r3, #29
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	0752      	lsls	r2, r2, #29
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	4313      	orrs	r3, r2
 800185c:	e690      	b.n	8001580 <__aeabi_dadd+0x29c>
 800185e:	4643      	mov	r3, r8
 8001860:	430b      	orrs	r3, r1
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x582>
 8001864:	e709      	b.n	800167a <__aeabi_dadd+0x396>
 8001866:	4643      	mov	r3, r8
 8001868:	4642      	mov	r2, r8
 800186a:	08c9      	lsrs	r1, r1, #3
 800186c:	075b      	lsls	r3, r3, #29
 800186e:	4655      	mov	r5, sl
 8001870:	430b      	orrs	r3, r1
 8001872:	08d0      	lsrs	r0, r2, #3
 8001874:	e666      	b.n	8001544 <__aeabi_dadd+0x260>
 8001876:	1acc      	subs	r4, r1, r3
 8001878:	42a1      	cmp	r1, r4
 800187a:	4189      	sbcs	r1, r1
 800187c:	1a3f      	subs	r7, r7, r0
 800187e:	4249      	negs	r1, r1
 8001880:	4655      	mov	r5, sl
 8001882:	2601      	movs	r6, #1
 8001884:	1a7f      	subs	r7, r7, r1
 8001886:	e57e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001888:	4642      	mov	r2, r8
 800188a:	1a5c      	subs	r4, r3, r1
 800188c:	1a87      	subs	r7, r0, r2
 800188e:	42a3      	cmp	r3, r4
 8001890:	4192      	sbcs	r2, r2
 8001892:	4252      	negs	r2, r2
 8001894:	1abf      	subs	r7, r7, r2
 8001896:	023a      	lsls	r2, r7, #8
 8001898:	d53d      	bpl.n	8001916 <__aeabi_dadd+0x632>
 800189a:	1acc      	subs	r4, r1, r3
 800189c:	42a1      	cmp	r1, r4
 800189e:	4189      	sbcs	r1, r1
 80018a0:	4643      	mov	r3, r8
 80018a2:	4249      	negs	r1, r1
 80018a4:	1a1f      	subs	r7, r3, r0
 80018a6:	4655      	mov	r5, sl
 80018a8:	1a7f      	subs	r7, r7, r1
 80018aa:	e595      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80018ac:	077b      	lsls	r3, r7, #29
 80018ae:	08c9      	lsrs	r1, r1, #3
 80018b0:	430b      	orrs	r3, r1
 80018b2:	08f8      	lsrs	r0, r7, #3
 80018b4:	e643      	b.n	800153e <__aeabi_dadd+0x25a>
 80018b6:	4644      	mov	r4, r8
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	430c      	orrs	r4, r1
 80018bc:	d130      	bne.n	8001920 <__aeabi_dadd+0x63c>
 80018be:	0742      	lsls	r2, r0, #29
 80018c0:	4313      	orrs	r3, r2
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	e65c      	b.n	8001580 <__aeabi_dadd+0x29c>
 80018c6:	077b      	lsls	r3, r7, #29
 80018c8:	08c9      	lsrs	r1, r1, #3
 80018ca:	430b      	orrs	r3, r1
 80018cc:	08f8      	lsrs	r0, r7, #3
 80018ce:	e639      	b.n	8001544 <__aeabi_dadd+0x260>
 80018d0:	185c      	adds	r4, r3, r1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	4440      	add	r0, r8
 80018d8:	425b      	negs	r3, r3
 80018da:	18c7      	adds	r7, r0, r3
 80018dc:	023b      	lsls	r3, r7, #8
 80018de:	d400      	bmi.n	80018e2 <__aeabi_dadd+0x5fe>
 80018e0:	e625      	b.n	800152e <__aeabi_dadd+0x24a>
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <__aeabi_dadd+0x674>)
 80018e4:	2601      	movs	r6, #1
 80018e6:	401f      	ands	r7, r3
 80018e8:	e621      	b.n	800152e <__aeabi_dadd+0x24a>
 80018ea:	0004      	movs	r4, r0
 80018ec:	3a20      	subs	r2, #32
 80018ee:	40d4      	lsrs	r4, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	2a20      	cmp	r2, #32
 80018f4:	d004      	beq.n	8001900 <__aeabi_dadd+0x61c>
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	4666      	mov	r6, ip
 80018fa:	1b92      	subs	r2, r2, r6
 80018fc:	4090      	lsls	r0, r2
 80018fe:	4303      	orrs	r3, r0
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	4193      	sbcs	r3, r2
 8001904:	431c      	orrs	r4, r3
 8001906:	e67e      	b.n	8001606 <__aeabi_dadd+0x322>
 8001908:	185c      	adds	r4, r3, r1
 800190a:	428c      	cmp	r4, r1
 800190c:	4189      	sbcs	r1, r1
 800190e:	4440      	add	r0, r8
 8001910:	4249      	negs	r1, r1
 8001912:	1847      	adds	r7, r0, r1
 8001914:	e6dd      	b.n	80016d2 <__aeabi_dadd+0x3ee>
 8001916:	0023      	movs	r3, r4
 8001918:	433b      	orrs	r3, r7
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x63a>
 800191c:	e6ad      	b.n	800167a <__aeabi_dadd+0x396>
 800191e:	e606      	b.n	800152e <__aeabi_dadd+0x24a>
 8001920:	0744      	lsls	r4, r0, #29
 8001922:	4323      	orrs	r3, r4
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	08c0      	lsrs	r0, r0, #3
 8001928:	0324      	lsls	r4, r4, #12
 800192a:	4220      	tst	r0, r4
 800192c:	d008      	beq.n	8001940 <__aeabi_dadd+0x65c>
 800192e:	4642      	mov	r2, r8
 8001930:	08d6      	lsrs	r6, r2, #3
 8001932:	4226      	tst	r6, r4
 8001934:	d104      	bne.n	8001940 <__aeabi_dadd+0x65c>
 8001936:	4655      	mov	r5, sl
 8001938:	0030      	movs	r0, r6
 800193a:	08cb      	lsrs	r3, r1, #3
 800193c:	0751      	lsls	r1, r2, #29
 800193e:	430b      	orrs	r3, r1
 8001940:	0f5a      	lsrs	r2, r3, #29
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	0752      	lsls	r2, r2, #29
 8001948:	4313      	orrs	r3, r2
 800194a:	e619      	b.n	8001580 <__aeabi_dadd+0x29c>
 800194c:	2300      	movs	r3, #0
 800194e:	4a01      	ldr	r2, [pc, #4]	; (8001954 <__aeabi_dadd+0x670>)
 8001950:	001f      	movs	r7, r3
 8001952:	e55e      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001954:	000007ff 	.word	0x000007ff
 8001958:	ff7fffff 	.word	0xff7fffff

0800195c <__aeabi_ddiv>:
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	4657      	mov	r7, sl
 8001960:	464e      	mov	r6, r9
 8001962:	4645      	mov	r5, r8
 8001964:	46de      	mov	lr, fp
 8001966:	b5e0      	push	{r5, r6, r7, lr}
 8001968:	4681      	mov	r9, r0
 800196a:	0005      	movs	r5, r0
 800196c:	030c      	lsls	r4, r1, #12
 800196e:	0048      	lsls	r0, r1, #1
 8001970:	4692      	mov	sl, r2
 8001972:	001f      	movs	r7, r3
 8001974:	b085      	sub	sp, #20
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	0d40      	lsrs	r0, r0, #21
 800197a:	0fce      	lsrs	r6, r1, #31
 800197c:	2800      	cmp	r0, #0
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0x26>
 8001980:	e156      	b.n	8001c30 <__aeabi_ddiv+0x2d4>
 8001982:	4bd4      	ldr	r3, [pc, #848]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001984:	4298      	cmp	r0, r3
 8001986:	d100      	bne.n	800198a <__aeabi_ddiv+0x2e>
 8001988:	e172      	b.n	8001c70 <__aeabi_ddiv+0x314>
 800198a:	0f6b      	lsrs	r3, r5, #29
 800198c:	00e4      	lsls	r4, r4, #3
 800198e:	431c      	orrs	r4, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	4323      	orrs	r3, r4
 8001996:	4698      	mov	r8, r3
 8001998:	4bcf      	ldr	r3, [pc, #828]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 800199a:	00ed      	lsls	r5, r5, #3
 800199c:	469b      	mov	fp, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	4699      	mov	r9, r3
 80019a2:	4483      	add	fp, r0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	033c      	lsls	r4, r7, #12
 80019a8:	007b      	lsls	r3, r7, #1
 80019aa:	4650      	mov	r0, sl
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	0fff      	lsrs	r7, r7, #31
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x5c>
 80019b6:	e11f      	b.n	8001bf8 <__aeabi_ddiv+0x29c>
 80019b8:	4ac6      	ldr	r2, [pc, #792]	; (8001cd4 <__aeabi_ddiv+0x378>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x64>
 80019be:	e162      	b.n	8001c86 <__aeabi_ddiv+0x32a>
 80019c0:	49c5      	ldr	r1, [pc, #788]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 80019c2:	0f42      	lsrs	r2, r0, #29
 80019c4:	468c      	mov	ip, r1
 80019c6:	00e4      	lsls	r4, r4, #3
 80019c8:	4659      	mov	r1, fp
 80019ca:	4314      	orrs	r4, r2
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	4463      	add	r3, ip
 80019d0:	0412      	lsls	r2, r2, #16
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	4314      	orrs	r4, r2
 80019d6:	469b      	mov	fp, r3
 80019d8:	00c2      	lsls	r2, r0, #3
 80019da:	2000      	movs	r0, #0
 80019dc:	0033      	movs	r3, r6
 80019de:	407b      	eors	r3, r7
 80019e0:	469a      	mov	sl, r3
 80019e2:	464b      	mov	r3, r9
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d827      	bhi.n	8001a38 <__aeabi_ddiv+0xdc>
 80019e8:	49bc      	ldr	r1, [pc, #752]	; (8001cdc <__aeabi_ddiv+0x380>)
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	58cb      	ldr	r3, [r1, r3]
 80019ee:	469f      	mov	pc, r3
 80019f0:	46b2      	mov	sl, r6
 80019f2:	9b00      	ldr	r3, [sp, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d016      	beq.n	8001a26 <__aeabi_ddiv+0xca>
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d100      	bne.n	80019fe <__aeabi_ddiv+0xa2>
 80019fc:	e28e      	b.n	8001f1c <__aeabi_ddiv+0x5c0>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d000      	beq.n	8001a04 <__aeabi_ddiv+0xa8>
 8001a02:	e0d9      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2400      	movs	r4, #0
 8001a08:	2500      	movs	r5, #0
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	051b      	lsls	r3, r3, #20
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	07d2      	lsls	r2, r2, #31
 8001a12:	4313      	orrs	r3, r2
 8001a14:	0028      	movs	r0, r5
 8001a16:	0019      	movs	r1, r3
 8001a18:	b005      	add	sp, #20
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	46a9      	mov	r9, r5
 8001a22:	46a0      	mov	r8, r4
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	2400      	movs	r4, #0
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4baa      	ldr	r3, [pc, #680]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001a2c:	e7ed      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001a2e:	46ba      	mov	sl, r7
 8001a30:	46a0      	mov	r8, r4
 8001a32:	0015      	movs	r5, r2
 8001a34:	9000      	str	r0, [sp, #0]
 8001a36:	e7dc      	b.n	80019f2 <__aeabi_ddiv+0x96>
 8001a38:	4544      	cmp	r4, r8
 8001a3a:	d200      	bcs.n	8001a3e <__aeabi_ddiv+0xe2>
 8001a3c:	e1c7      	b.n	8001dce <__aeabi_ddiv+0x472>
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_ddiv+0xe6>
 8001a40:	e1c2      	b.n	8001dc8 <__aeabi_ddiv+0x46c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	425b      	negs	r3, r3
 8001a46:	469c      	mov	ip, r3
 8001a48:	002e      	movs	r6, r5
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	44e3      	add	fp, ip
 8001a50:	0223      	lsls	r3, r4, #8
 8001a52:	0e14      	lsrs	r4, r2, #24
 8001a54:	431c      	orrs	r4, r3
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	4699      	mov	r9, r3
 8001a5a:	0423      	lsls	r3, r4, #16
 8001a5c:	0c1f      	lsrs	r7, r3, #16
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4649      	mov	r1, r9
 8001a62:	9200      	str	r2, [sp, #0]
 8001a64:	9701      	str	r7, [sp, #4]
 8001a66:	f7fe fbf7 	bl	8000258 <__aeabi_uidivmod>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	437a      	muls	r2, r7
 8001a6e:	040b      	lsls	r3, r1, #16
 8001a70:	0c31      	lsrs	r1, r6, #16
 8001a72:	4680      	mov	r8, r0
 8001a74:	4319      	orrs	r1, r3
 8001a76:	428a      	cmp	r2, r1
 8001a78:	d907      	bls.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	469c      	mov	ip, r3
 8001a80:	1909      	adds	r1, r1, r4
 8001a82:	44e0      	add	r8, ip
 8001a84:	428c      	cmp	r4, r1
 8001a86:	d800      	bhi.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a88:	e207      	b.n	8001e9a <__aeabi_ddiv+0x53e>
 8001a8a:	1a88      	subs	r0, r1, r2
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fbe3 	bl	8000258 <__aeabi_uidivmod>
 8001a92:	0409      	lsls	r1, r1, #16
 8001a94:	468c      	mov	ip, r1
 8001a96:	0431      	lsls	r1, r6, #16
 8001a98:	4666      	mov	r6, ip
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	0c09      	lsrs	r1, r1, #16
 8001a9e:	4342      	muls	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	4331      	orrs	r1, r6
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d904      	bls.n	8001ab2 <__aeabi_ddiv+0x156>
 8001aa8:	1909      	adds	r1, r1, r4
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	428c      	cmp	r4, r1
 8001aae:	d800      	bhi.n	8001ab2 <__aeabi_ddiv+0x156>
 8001ab0:	e1ed      	b.n	8001e8e <__aeabi_ddiv+0x532>
 8001ab2:	1a88      	subs	r0, r1, r2
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4641      	mov	r1, r8
 8001abe:	9b00      	ldr	r3, [sp, #0]
 8001ac0:	040e      	lsls	r6, r1, #16
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	001f      	movs	r7, r3
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	0c36      	lsrs	r6, r6, #16
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c19      	lsrs	r1, r3, #16
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	4373      	muls	r3, r6
 8001ad4:	0c12      	lsrs	r2, r2, #16
 8001ad6:	437e      	muls	r6, r7
 8001ad8:	9103      	str	r1, [sp, #12]
 8001ada:	4351      	muls	r1, r2
 8001adc:	437a      	muls	r2, r7
 8001ade:	0c1f      	lsrs	r7, r3, #16
 8001ae0:	46bc      	mov	ip, r7
 8001ae2:	1876      	adds	r6, r6, r1
 8001ae4:	4466      	add	r6, ip
 8001ae6:	42b1      	cmp	r1, r6
 8001ae8:	d903      	bls.n	8001af2 <__aeabi_ddiv+0x196>
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	468c      	mov	ip, r1
 8001af0:	4462      	add	r2, ip
 8001af2:	0c31      	lsrs	r1, r6, #16
 8001af4:	188a      	adds	r2, r1, r2
 8001af6:	0431      	lsls	r1, r6, #16
 8001af8:	041e      	lsls	r6, r3, #16
 8001afa:	0c36      	lsrs	r6, r6, #16
 8001afc:	198e      	adds	r6, r1, r6
 8001afe:	4290      	cmp	r0, r2
 8001b00:	d302      	bcc.n	8001b08 <__aeabi_ddiv+0x1ac>
 8001b02:	d112      	bne.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b04:	42b5      	cmp	r5, r6
 8001b06:	d210      	bcs.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	469c      	mov	ip, r3
 8001b10:	4465      	add	r5, ip
 8001b12:	001f      	movs	r7, r3
 8001b14:	429d      	cmp	r5, r3
 8001b16:	419b      	sbcs	r3, r3
 8001b18:	425b      	negs	r3, r3
 8001b1a:	191b      	adds	r3, r3, r4
 8001b1c:	18c0      	adds	r0, r0, r3
 8001b1e:	4284      	cmp	r4, r0
 8001b20:	d200      	bcs.n	8001b24 <__aeabi_ddiv+0x1c8>
 8001b22:	e1a0      	b.n	8001e66 <__aeabi_ddiv+0x50a>
 8001b24:	d100      	bne.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001b26:	e19b      	b.n	8001e60 <__aeabi_ddiv+0x504>
 8001b28:	4688      	mov	r8, r1
 8001b2a:	1bae      	subs	r6, r5, r6
 8001b2c:	42b5      	cmp	r5, r6
 8001b2e:	41ad      	sbcs	r5, r5
 8001b30:	1a80      	subs	r0, r0, r2
 8001b32:	426d      	negs	r5, r5
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	4284      	cmp	r4, r0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x1e0>
 8001b3a:	e1d5      	b.n	8001ee8 <__aeabi_ddiv+0x58c>
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	f7fe fb8b 	bl	8000258 <__aeabi_uidivmod>
 8001b42:	9a01      	ldr	r2, [sp, #4]
 8001b44:	040b      	lsls	r3, r1, #16
 8001b46:	4342      	muls	r2, r0
 8001b48:	0c31      	lsrs	r1, r6, #16
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	428a      	cmp	r2, r1
 8001b50:	d900      	bls.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001b52:	e16c      	b.n	8001e2e <__aeabi_ddiv+0x4d2>
 8001b54:	1a88      	subs	r0, r1, r2
 8001b56:	4649      	mov	r1, r9
 8001b58:	f7fe fb7e 	bl	8000258 <__aeabi_uidivmod>
 8001b5c:	9a01      	ldr	r2, [sp, #4]
 8001b5e:	0436      	lsls	r6, r6, #16
 8001b60:	4342      	muls	r2, r0
 8001b62:	0409      	lsls	r1, r1, #16
 8001b64:	0c36      	lsrs	r6, r6, #16
 8001b66:	0003      	movs	r3, r0
 8001b68:	430e      	orrs	r6, r1
 8001b6a:	42b2      	cmp	r2, r6
 8001b6c:	d900      	bls.n	8001b70 <__aeabi_ddiv+0x214>
 8001b6e:	e153      	b.n	8001e18 <__aeabi_ddiv+0x4bc>
 8001b70:	9803      	ldr	r0, [sp, #12]
 8001b72:	1ab6      	subs	r6, r6, r2
 8001b74:	0002      	movs	r2, r0
 8001b76:	042d      	lsls	r5, r5, #16
 8001b78:	431d      	orrs	r5, r3
 8001b7a:	9f02      	ldr	r7, [sp, #8]
 8001b7c:	042b      	lsls	r3, r5, #16
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	435a      	muls	r2, r3
 8001b82:	437b      	muls	r3, r7
 8001b84:	469c      	mov	ip, r3
 8001b86:	0c29      	lsrs	r1, r5, #16
 8001b88:	4348      	muls	r0, r1
 8001b8a:	0c13      	lsrs	r3, r2, #16
 8001b8c:	4484      	add	ip, r0
 8001b8e:	4463      	add	r3, ip
 8001b90:	4379      	muls	r1, r7
 8001b92:	4298      	cmp	r0, r3
 8001b94:	d903      	bls.n	8001b9e <__aeabi_ddiv+0x242>
 8001b96:	2080      	movs	r0, #128	; 0x80
 8001b98:	0240      	lsls	r0, r0, #9
 8001b9a:	4684      	mov	ip, r0
 8001b9c:	4461      	add	r1, ip
 8001b9e:	0c18      	lsrs	r0, r3, #16
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c12      	lsrs	r2, r2, #16
 8001ba6:	1841      	adds	r1, r0, r1
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	428e      	cmp	r6, r1
 8001bac:	d200      	bcs.n	8001bb0 <__aeabi_ddiv+0x254>
 8001bae:	e0ff      	b.n	8001db0 <__aeabi_ddiv+0x454>
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_ddiv+0x258>
 8001bb2:	e0fa      	b.n	8001daa <__aeabi_ddiv+0x44e>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <__aeabi_ddiv+0x384>)
 8001bba:	445a      	add	r2, fp
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	dc00      	bgt.n	8001bc2 <__aeabi_ddiv+0x266>
 8001bc0:	e0aa      	b.n	8001d18 <__aeabi_ddiv+0x3bc>
 8001bc2:	076b      	lsls	r3, r5, #29
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001bc6:	e13d      	b.n	8001e44 <__aeabi_ddiv+0x4e8>
 8001bc8:	08ed      	lsrs	r5, r5, #3
 8001bca:	4643      	mov	r3, r8
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	d506      	bpl.n	8001bde <__aeabi_ddiv+0x282>
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <__aeabi_ddiv+0x388>)
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	00d2      	lsls	r2, r2, #3
 8001bdc:	445a      	add	r2, fp
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <__aeabi_ddiv+0x38c>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dd00      	ble.n	8001be6 <__aeabi_ddiv+0x28a>
 8001be4:	e71f      	b.n	8001a26 <__aeabi_ddiv+0xca>
 8001be6:	4643      	mov	r3, r8
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	431d      	orrs	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	025c      	lsls	r4, r3, #9
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	0d53      	lsrs	r3, r2, #21
 8001bf6:	e708      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_ddiv+0x2a4>
 8001bfe:	e07b      	b.n	8001cf8 <__aeabi_ddiv+0x39c>
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x2aa>
 8001c04:	e0fa      	b.n	8001dfc <__aeabi_ddiv+0x4a0>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f001 fa22 	bl	8003050 <__clzsi2>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	3a0b      	subs	r2, #11
 8001c10:	231d      	movs	r3, #29
 8001c12:	0001      	movs	r1, r0
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	4652      	mov	r2, sl
 8001c18:	3908      	subs	r1, #8
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	408c      	lsls	r4, r1
 8001c1e:	4314      	orrs	r4, r2
 8001c20:	4652      	mov	r2, sl
 8001c22:	408a      	lsls	r2, r1
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <__aeabi_ddiv+0x390>)
 8001c26:	4458      	add	r0, fp
 8001c28:	469b      	mov	fp, r3
 8001c2a:	4483      	add	fp, r0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e6d5      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001c30:	464b      	mov	r3, r9
 8001c32:	4323      	orrs	r3, r4
 8001c34:	4698      	mov	r8, r3
 8001c36:	d044      	beq.n	8001cc2 <__aeabi_ddiv+0x366>
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_ddiv+0x2e2>
 8001c3c:	e0ce      	b.n	8001ddc <__aeabi_ddiv+0x480>
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f001 fa06 	bl	8003050 <__clzsi2>
 8001c44:	0001      	movs	r1, r0
 8001c46:	0002      	movs	r2, r0
 8001c48:	390b      	subs	r1, #11
 8001c4a:	231d      	movs	r3, #29
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	0010      	movs	r0, r2
 8001c52:	40d9      	lsrs	r1, r3
 8001c54:	3808      	subs	r0, #8
 8001c56:	4084      	lsls	r4, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	464d      	mov	r5, r9
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	4698      	mov	r8, r3
 8001c60:	4085      	lsls	r5, r0
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <__aeabi_ddiv+0x394>)
 8001c64:	1a83      	subs	r3, r0, r2
 8001c66:	469b      	mov	fp, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	e69a      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c70:	464b      	mov	r3, r9
 8001c72:	4323      	orrs	r3, r4
 8001c74:	4698      	mov	r8, r3
 8001c76:	d11d      	bne.n	8001cb4 <__aeabi_ddiv+0x358>
 8001c78:	2308      	movs	r3, #8
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	3b06      	subs	r3, #6
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4683      	mov	fp, r0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	e68f      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c86:	4652      	mov	r2, sl
 8001c88:	4322      	orrs	r2, r4
 8001c8a:	d109      	bne.n	8001ca0 <__aeabi_ddiv+0x344>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4319      	orrs	r1, r3
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001c94:	4689      	mov	r9, r1
 8001c96:	469c      	mov	ip, r3
 8001c98:	2400      	movs	r4, #0
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	44e3      	add	fp, ip
 8001c9e:	e69d      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	464a      	mov	r2, r9
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001ca8:	4691      	mov	r9, r2
 8001caa:	469c      	mov	ip, r3
 8001cac:	4652      	mov	r2, sl
 8001cae:	2003      	movs	r0, #3
 8001cb0:	44e3      	add	fp, ip
 8001cb2:	e693      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	3b09      	subs	r3, #9
 8001cba:	46a0      	mov	r8, r4
 8001cbc:	4683      	mov	fp, r0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	e671      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	2500      	movs	r5, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	e669      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	08018a94 	.word	0x08018a94
 8001ce0:	000003ff 	.word	0x000003ff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	000003f3 	.word	0x000003f3
 8001cf0:	fffffc0d 	.word	0xfffffc0d
 8001cf4:	fffff801 	.word	0xfffff801
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4689      	mov	r9, r1
 8001d00:	2400      	movs	r4, #0
 8001d02:	2001      	movs	r0, #1
 8001d04:	e66a      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	469a      	mov	sl, r3
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	e67a      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d14:	2501      	movs	r5, #1
 8001d16:	426d      	negs	r5, r5
 8001d18:	2301      	movs	r3, #1
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	2b38      	cmp	r3, #56	; 0x38
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_ddiv+0x3c6>
 8001d20:	e670      	b.n	8001a04 <__aeabi_ddiv+0xa8>
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_ddiv+0x3cc>
 8001d26:	e0bf      	b.n	8001ea8 <__aeabi_ddiv+0x54c>
 8001d28:	211f      	movs	r1, #31
 8001d2a:	4249      	negs	r1, r1
 8001d2c:	1a8a      	subs	r2, r1, r2
 8001d2e:	4641      	mov	r1, r8
 8001d30:	40d1      	lsrs	r1, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d004      	beq.n	8001d42 <__aeabi_ddiv+0x3e6>
 8001d38:	4641      	mov	r1, r8
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <__aeabi_ddiv+0x5e0>)
 8001d3c:	445b      	add	r3, fp
 8001d3e:	4099      	lsls	r1, r3
 8001d40:	430d      	orrs	r5, r1
 8001d42:	1e6b      	subs	r3, r5, #1
 8001d44:	419d      	sbcs	r5, r3
 8001d46:	2307      	movs	r3, #7
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	001d      	movs	r5, r3
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4015      	ands	r5, r2
 8001d50:	4213      	tst	r3, r2
 8001d52:	d100      	bne.n	8001d56 <__aeabi_ddiv+0x3fa>
 8001d54:	e0d4      	b.n	8001f00 <__aeabi_ddiv+0x5a4>
 8001d56:	210f      	movs	r1, #15
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4011      	ands	r1, r2
 8001d5c:	2904      	cmp	r1, #4
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x406>
 8001d60:	e0cb      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d62:	1d11      	adds	r1, r2, #4
 8001d64:	4291      	cmp	r1, r2
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	0219      	lsls	r1, r3, #8
 8001d70:	d400      	bmi.n	8001d74 <__aeabi_ddiv+0x418>
 8001d72:	e0c2      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d74:	2301      	movs	r3, #1
 8001d76:	2400      	movs	r4, #0
 8001d78:	2500      	movs	r5, #0
 8001d7a:	e646      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	4641      	mov	r1, r8
 8001d80:	031b      	lsls	r3, r3, #12
 8001d82:	4219      	tst	r1, r3
 8001d84:	d008      	beq.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d86:	421c      	tst	r4, r3
 8001d88:	d106      	bne.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d8a:	431c      	orrs	r4, r3
 8001d8c:	0324      	lsls	r4, r4, #12
 8001d8e:	46ba      	mov	sl, r7
 8001d90:	0015      	movs	r5, r2
 8001d92:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	e638      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	431c      	orrs	r4, r3
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	46b2      	mov	sl, r6
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001da6:	0b24      	lsrs	r4, r4, #12
 8001da8:	e62f      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_ddiv+0x454>
 8001dae:	e703      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001db0:	19a6      	adds	r6, r4, r6
 8001db2:	1e68      	subs	r0, r5, #1
 8001db4:	42a6      	cmp	r6, r4
 8001db6:	d200      	bcs.n	8001dba <__aeabi_ddiv+0x45e>
 8001db8:	e08d      	b.n	8001ed6 <__aeabi_ddiv+0x57a>
 8001dba:	428e      	cmp	r6, r1
 8001dbc:	d200      	bcs.n	8001dc0 <__aeabi_ddiv+0x464>
 8001dbe:	e0a3      	b.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x468>
 8001dc2:	e0b3      	b.n	8001f2c <__aeabi_ddiv+0x5d0>
 8001dc4:	0005      	movs	r5, r0
 8001dc6:	e6f5      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001dc8:	42aa      	cmp	r2, r5
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x472>
 8001dcc:	e639      	b.n	8001a42 <__aeabi_ddiv+0xe6>
 8001dce:	4643      	mov	r3, r8
 8001dd0:	07de      	lsls	r6, r3, #31
 8001dd2:	0858      	lsrs	r0, r3, #1
 8001dd4:	086b      	lsrs	r3, r5, #1
 8001dd6:	431e      	orrs	r6, r3
 8001dd8:	07ed      	lsls	r5, r5, #31
 8001dda:	e639      	b.n	8001a50 <__aeabi_ddiv+0xf4>
 8001ddc:	4648      	mov	r0, r9
 8001dde:	f001 f937 	bl	8003050 <__clzsi2>
 8001de2:	0001      	movs	r1, r0
 8001de4:	0002      	movs	r2, r0
 8001de6:	3115      	adds	r1, #21
 8001de8:	3220      	adds	r2, #32
 8001dea:	291c      	cmp	r1, #28
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_ddiv+0x494>
 8001dee:	e72c      	b.n	8001c4a <__aeabi_ddiv+0x2ee>
 8001df0:	464b      	mov	r3, r9
 8001df2:	3808      	subs	r0, #8
 8001df4:	4083      	lsls	r3, r0
 8001df6:	2500      	movs	r5, #0
 8001df8:	4698      	mov	r8, r3
 8001dfa:	e732      	b.n	8001c62 <__aeabi_ddiv+0x306>
 8001dfc:	f001 f928 	bl	8003050 <__clzsi2>
 8001e00:	0003      	movs	r3, r0
 8001e02:	001a      	movs	r2, r3
 8001e04:	3215      	adds	r2, #21
 8001e06:	3020      	adds	r0, #32
 8001e08:	2a1c      	cmp	r2, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_ddiv+0x4b2>
 8001e0c:	e700      	b.n	8001c10 <__aeabi_ddiv+0x2b4>
 8001e0e:	4654      	mov	r4, sl
 8001e10:	3b08      	subs	r3, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	409c      	lsls	r4, r3
 8001e16:	e705      	b.n	8001c24 <__aeabi_ddiv+0x2c8>
 8001e18:	1936      	adds	r6, r6, r4
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	42b4      	cmp	r4, r6
 8001e1e:	d900      	bls.n	8001e22 <__aeabi_ddiv+0x4c6>
 8001e20:	e6a6      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e22:	42b2      	cmp	r2, r6
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x4cc>
 8001e26:	e6a3      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e28:	1e83      	subs	r3, r0, #2
 8001e2a:	1936      	adds	r6, r6, r4
 8001e2c:	e6a0      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e2e:	1909      	adds	r1, r1, r4
 8001e30:	3d01      	subs	r5, #1
 8001e32:	428c      	cmp	r4, r1
 8001e34:	d900      	bls.n	8001e38 <__aeabi_ddiv+0x4dc>
 8001e36:	e68d      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d800      	bhi.n	8001e3e <__aeabi_ddiv+0x4e2>
 8001e3c:	e68a      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e3e:	1e85      	subs	r5, r0, #2
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	e687      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e44:	230f      	movs	r3, #15
 8001e46:	402b      	ands	r3, r5
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_ddiv+0x4f2>
 8001e4c:	e6bc      	b.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	425b      	negs	r3, r3
 8001e52:	42ab      	cmp	r3, r5
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	3504      	adds	r5, #4
 8001e58:	425b      	negs	r3, r3
 8001e5a:	08ed      	lsrs	r5, r5, #3
 8001e5c:	4498      	add	r8, r3
 8001e5e:	e6b4      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001e60:	42af      	cmp	r7, r5
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x50a>
 8001e64:	e660      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e66:	4282      	cmp	r2, r0
 8001e68:	d804      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x512>
 8001e6c:	e65c      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e6e:	42ae      	cmp	r6, r5
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e72:	e659      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e74:	2302      	movs	r3, #2
 8001e76:	425b      	negs	r3, r3
 8001e78:	469c      	mov	ip, r3
 8001e7a:	9b00      	ldr	r3, [sp, #0]
 8001e7c:	44e0      	add	r8, ip
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4465      	add	r5, ip
 8001e82:	429d      	cmp	r5, r3
 8001e84:	419b      	sbcs	r3, r3
 8001e86:	425b      	negs	r3, r3
 8001e88:	191b      	adds	r3, r3, r4
 8001e8a:	18c0      	adds	r0, r0, r3
 8001e8c:	e64d      	b.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001e8e:	428a      	cmp	r2, r1
 8001e90:	d800      	bhi.n	8001e94 <__aeabi_ddiv+0x538>
 8001e92:	e60e      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	1909      	adds	r1, r1, r4
 8001e98:	e60b      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d800      	bhi.n	8001ea0 <__aeabi_ddiv+0x544>
 8001e9e:	e5f4      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea0:	1e83      	subs	r3, r0, #2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	1909      	adds	r1, r1, r4
 8001ea6:	e5f0      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea8:	4925      	ldr	r1, [pc, #148]	; (8001f40 <__aeabi_ddiv+0x5e4>)
 8001eaa:	0028      	movs	r0, r5
 8001eac:	4459      	add	r1, fp
 8001eae:	408d      	lsls	r5, r1
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	408a      	lsls	r2, r1
 8001eb4:	1e69      	subs	r1, r5, #1
 8001eb6:	418d      	sbcs	r5, r1
 8001eb8:	4641      	mov	r1, r8
 8001eba:	40d8      	lsrs	r0, r3
 8001ebc:	40d9      	lsrs	r1, r3
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	432a      	orrs	r2, r5
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	0751      	lsls	r1, r2, #29
 8001ec6:	d100      	bne.n	8001eca <__aeabi_ddiv+0x56e>
 8001ec8:	e751      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001eca:	210f      	movs	r1, #15
 8001ecc:	4011      	ands	r1, r2
 8001ece:	2904      	cmp	r1, #4
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_ddiv+0x578>
 8001ed2:	e746      	b.n	8001d62 <__aeabi_ddiv+0x406>
 8001ed4:	e74b      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001ed6:	0005      	movs	r5, r0
 8001ed8:	428e      	cmp	r6, r1
 8001eda:	d000      	beq.n	8001ede <__aeabi_ddiv+0x582>
 8001edc:	e66a      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ede:	9a00      	ldr	r2, [sp, #0]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_ddiv+0x58a>
 8001ee4:	e666      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ee6:	e667      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <__aeabi_ddiv+0x5e8>)
 8001eea:	445a      	add	r2, fp
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x596>
 8001ef0:	e710      	b.n	8001d14 <__aeabi_ddiv+0x3b8>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4498      	add	r8, r3
 8001ef8:	e667      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001efa:	075d      	lsls	r5, r3, #29
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	0b1c      	lsrs	r4, r3, #12
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	2300      	movs	r3, #0
 8001f04:	4315      	orrs	r5, r2
 8001f06:	e580      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f08:	9800      	ldr	r0, [sp, #0]
 8001f0a:	3d02      	subs	r5, #2
 8001f0c:	0042      	lsls	r2, r0, #1
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	41bf      	sbcs	r7, r7
 8001f12:	427f      	negs	r7, r7
 8001f14:	193c      	adds	r4, r7, r4
 8001f16:	1936      	adds	r6, r6, r4
 8001f18:	9200      	str	r2, [sp, #0]
 8001f1a:	e7dd      	b.n	8001ed8 <__aeabi_ddiv+0x57c>
 8001f1c:	2480      	movs	r4, #128	; 0x80
 8001f1e:	4643      	mov	r3, r8
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	e56e      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f2c:	9a00      	ldr	r2, [sp, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3ea      	bcc.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001f32:	0005      	movs	r5, r0
 8001f34:	e7d3      	b.n	8001ede <__aeabi_ddiv+0x582>
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	0000043e 	.word	0x0000043e
 8001f40:	0000041e 	.word	0x0000041e
 8001f44:	000003ff 	.word	0x000003ff

08001f48 <__eqdf2>:
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	464e      	mov	r6, r9
 8001f4c:	4645      	mov	r5, r8
 8001f4e:	46de      	mov	lr, fp
 8001f50:	4657      	mov	r7, sl
 8001f52:	4690      	mov	r8, r2
 8001f54:	b5e0      	push	{r5, r6, r7, lr}
 8001f56:	0017      	movs	r7, r2
 8001f58:	031a      	lsls	r2, r3, #12
 8001f5a:	0b12      	lsrs	r2, r2, #12
 8001f5c:	0005      	movs	r5, r0
 8001f5e:	4684      	mov	ip, r0
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <__eqdf2+0x80>)
 8001f62:	030e      	lsls	r6, r1, #12
 8001f64:	004c      	lsls	r4, r1, #1
 8001f66:	4691      	mov	r9, r2
 8001f68:	005a      	lsls	r2, r3, #1
 8001f6a:	0fdb      	lsrs	r3, r3, #31
 8001f6c:	469b      	mov	fp, r3
 8001f6e:	0b36      	lsrs	r6, r6, #12
 8001f70:	0d64      	lsrs	r4, r4, #21
 8001f72:	0fc9      	lsrs	r1, r1, #31
 8001f74:	0d52      	lsrs	r2, r2, #21
 8001f76:	4284      	cmp	r4, r0
 8001f78:	d019      	beq.n	8001fae <__eqdf2+0x66>
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	d010      	beq.n	8001fa0 <__eqdf2+0x58>
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4294      	cmp	r4, r2
 8001f82:	d10e      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f84:	454e      	cmp	r6, r9
 8001f86:	d10c      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f88:	2001      	movs	r0, #1
 8001f8a:	45c4      	cmp	ip, r8
 8001f8c:	d109      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f8e:	4559      	cmp	r1, fp
 8001f90:	d017      	beq.n	8001fc2 <__eqdf2+0x7a>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d105      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f96:	0030      	movs	r0, r6
 8001f98:	4328      	orrs	r0, r5
 8001f9a:	1e43      	subs	r3, r0, #1
 8001f9c:	4198      	sbcs	r0, r3
 8001f9e:	e000      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa4:	46bb      	mov	fp, r7
 8001fa6:	46b2      	mov	sl, r6
 8001fa8:	46a9      	mov	r9, r5
 8001faa:	46a0      	mov	r8, r4
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	0033      	movs	r3, r6
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	432b      	orrs	r3, r5
 8001fb4:	d1f5      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fb6:	42a2      	cmp	r2, r4
 8001fb8:	d1f3      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fba:	464b      	mov	r3, r9
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	d1f0      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fc0:	e7e2      	b.n	8001f88 <__eqdf2+0x40>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	e7ed      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__gedf2>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4647      	mov	r7, r8
 8001fd0:	46ce      	mov	lr, r9
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	0b1b      	lsrs	r3, r3, #12
 8001fdc:	4d2d      	ldr	r5, [pc, #180]	; (8002094 <__gedf2+0xc8>)
 8001fde:	004a      	lsls	r2, r1, #1
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	0043      	lsls	r3, r0, #1
 8001fe6:	030f      	lsls	r7, r1, #12
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	46b0      	mov	r8, r6
 8001fec:	0b3f      	lsrs	r7, r7, #12
 8001fee:	0d52      	lsrs	r2, r2, #21
 8001ff0:	0fc9      	lsrs	r1, r1, #31
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	0fc0      	lsrs	r0, r0, #31
 8001ff6:	42aa      	cmp	r2, r5
 8001ff8:	d021      	beq.n	800203e <__gedf2+0x72>
 8001ffa:	42ab      	cmp	r3, r5
 8001ffc:	d013      	beq.n	8002026 <__gedf2+0x5a>
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d122      	bne.n	8002048 <__gedf2+0x7c>
 8002002:	433c      	orrs	r4, r7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <__gedf2+0x42>
 8002008:	464d      	mov	r5, r9
 800200a:	432e      	orrs	r6, r5
 800200c:	d022      	beq.n	8002054 <__gedf2+0x88>
 800200e:	2c00      	cmp	r4, #0
 8002010:	d010      	beq.n	8002034 <__gedf2+0x68>
 8002012:	4281      	cmp	r1, r0
 8002014:	d022      	beq.n	800205c <__gedf2+0x90>
 8002016:	2002      	movs	r0, #2
 8002018:	3901      	subs	r1, #1
 800201a:	4008      	ands	r0, r1
 800201c:	3801      	subs	r0, #1
 800201e:	bcc0      	pop	{r6, r7}
 8002020:	46b9      	mov	r9, r7
 8002022:	46b0      	mov	r8, r6
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	464d      	mov	r5, r9
 8002028:	432e      	orrs	r6, r5
 800202a:	d129      	bne.n	8002080 <__gedf2+0xb4>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d1f0      	bne.n	8002012 <__gedf2+0x46>
 8002030:	433c      	orrs	r4, r7
 8002032:	d1ee      	bne.n	8002012 <__gedf2+0x46>
 8002034:	2800      	cmp	r0, #0
 8002036:	d1f2      	bne.n	800201e <__gedf2+0x52>
 8002038:	2001      	movs	r0, #1
 800203a:	4240      	negs	r0, r0
 800203c:	e7ef      	b.n	800201e <__gedf2+0x52>
 800203e:	003d      	movs	r5, r7
 8002040:	4325      	orrs	r5, r4
 8002042:	d11d      	bne.n	8002080 <__gedf2+0xb4>
 8002044:	4293      	cmp	r3, r2
 8002046:	d0ee      	beq.n	8002026 <__gedf2+0x5a>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e2      	bne.n	8002012 <__gedf2+0x46>
 800204c:	464c      	mov	r4, r9
 800204e:	4326      	orrs	r6, r4
 8002050:	d1df      	bne.n	8002012 <__gedf2+0x46>
 8002052:	e7e0      	b.n	8002016 <__gedf2+0x4a>
 8002054:	2000      	movs	r0, #0
 8002056:	2c00      	cmp	r4, #0
 8002058:	d0e1      	beq.n	800201e <__gedf2+0x52>
 800205a:	e7dc      	b.n	8002016 <__gedf2+0x4a>
 800205c:	429a      	cmp	r2, r3
 800205e:	dc0a      	bgt.n	8002076 <__gedf2+0xaa>
 8002060:	dbe8      	blt.n	8002034 <__gedf2+0x68>
 8002062:	454f      	cmp	r7, r9
 8002064:	d8d7      	bhi.n	8002016 <__gedf2+0x4a>
 8002066:	d00e      	beq.n	8002086 <__gedf2+0xba>
 8002068:	2000      	movs	r0, #0
 800206a:	454f      	cmp	r7, r9
 800206c:	d2d7      	bcs.n	800201e <__gedf2+0x52>
 800206e:	2900      	cmp	r1, #0
 8002070:	d0e2      	beq.n	8002038 <__gedf2+0x6c>
 8002072:	0008      	movs	r0, r1
 8002074:	e7d3      	b.n	800201e <__gedf2+0x52>
 8002076:	4243      	negs	r3, r0
 8002078:	4158      	adcs	r0, r3
 800207a:	0040      	lsls	r0, r0, #1
 800207c:	3801      	subs	r0, #1
 800207e:	e7ce      	b.n	800201e <__gedf2+0x52>
 8002080:	2002      	movs	r0, #2
 8002082:	4240      	negs	r0, r0
 8002084:	e7cb      	b.n	800201e <__gedf2+0x52>
 8002086:	45c4      	cmp	ip, r8
 8002088:	d8c5      	bhi.n	8002016 <__gedf2+0x4a>
 800208a:	2000      	movs	r0, #0
 800208c:	45c4      	cmp	ip, r8
 800208e:	d2c6      	bcs.n	800201e <__gedf2+0x52>
 8002090:	e7ed      	b.n	800206e <__gedf2+0xa2>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000007ff 	.word	0x000007ff

08002098 <__ledf2>:
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	4647      	mov	r7, r8
 800209c:	46ce      	mov	lr, r9
 800209e:	0004      	movs	r4, r0
 80020a0:	0018      	movs	r0, r3
 80020a2:	0016      	movs	r6, r2
 80020a4:	031b      	lsls	r3, r3, #12
 80020a6:	0b1b      	lsrs	r3, r3, #12
 80020a8:	4d2c      	ldr	r5, [pc, #176]	; (800215c <__ledf2+0xc4>)
 80020aa:	004a      	lsls	r2, r1, #1
 80020ac:	4699      	mov	r9, r3
 80020ae:	b580      	push	{r7, lr}
 80020b0:	0043      	lsls	r3, r0, #1
 80020b2:	030f      	lsls	r7, r1, #12
 80020b4:	46a4      	mov	ip, r4
 80020b6:	46b0      	mov	r8, r6
 80020b8:	0b3f      	lsrs	r7, r7, #12
 80020ba:	0d52      	lsrs	r2, r2, #21
 80020bc:	0fc9      	lsrs	r1, r1, #31
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	0fc0      	lsrs	r0, r0, #31
 80020c2:	42aa      	cmp	r2, r5
 80020c4:	d00d      	beq.n	80020e2 <__ledf2+0x4a>
 80020c6:	42ab      	cmp	r3, r5
 80020c8:	d010      	beq.n	80020ec <__ledf2+0x54>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d127      	bne.n	800211e <__ledf2+0x86>
 80020ce:	433c      	orrs	r4, r7
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <__ledf2+0x60>
 80020d4:	464d      	mov	r5, r9
 80020d6:	432e      	orrs	r6, r5
 80020d8:	d10e      	bne.n	80020f8 <__ledf2+0x60>
 80020da:	2000      	movs	r0, #0
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d015      	beq.n	800210c <__ledf2+0x74>
 80020e0:	e00e      	b.n	8002100 <__ledf2+0x68>
 80020e2:	003d      	movs	r5, r7
 80020e4:	4325      	orrs	r5, r4
 80020e6:	d110      	bne.n	800210a <__ledf2+0x72>
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d118      	bne.n	800211e <__ledf2+0x86>
 80020ec:	464d      	mov	r5, r9
 80020ee:	432e      	orrs	r6, r5
 80020f0:	d10b      	bne.n	800210a <__ledf2+0x72>
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d102      	bne.n	80020fc <__ledf2+0x64>
 80020f6:	433c      	orrs	r4, r7
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d00b      	beq.n	8002114 <__ledf2+0x7c>
 80020fc:	4281      	cmp	r1, r0
 80020fe:	d014      	beq.n	800212a <__ledf2+0x92>
 8002100:	2002      	movs	r0, #2
 8002102:	3901      	subs	r1, #1
 8002104:	4008      	ands	r0, r1
 8002106:	3801      	subs	r0, #1
 8002108:	e000      	b.n	800210c <__ledf2+0x74>
 800210a:	2002      	movs	r0, #2
 800210c:	bcc0      	pop	{r6, r7}
 800210e:	46b9      	mov	r9, r7
 8002110:	46b0      	mov	r8, r6
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002114:	2800      	cmp	r0, #0
 8002116:	d1f9      	bne.n	800210c <__ledf2+0x74>
 8002118:	2001      	movs	r0, #1
 800211a:	4240      	negs	r0, r0
 800211c:	e7f6      	b.n	800210c <__ledf2+0x74>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ec      	bne.n	80020fc <__ledf2+0x64>
 8002122:	464c      	mov	r4, r9
 8002124:	4326      	orrs	r6, r4
 8002126:	d1e9      	bne.n	80020fc <__ledf2+0x64>
 8002128:	e7ea      	b.n	8002100 <__ledf2+0x68>
 800212a:	429a      	cmp	r2, r3
 800212c:	dd04      	ble.n	8002138 <__ledf2+0xa0>
 800212e:	4243      	negs	r3, r0
 8002130:	4158      	adcs	r0, r3
 8002132:	0040      	lsls	r0, r0, #1
 8002134:	3801      	subs	r0, #1
 8002136:	e7e9      	b.n	800210c <__ledf2+0x74>
 8002138:	429a      	cmp	r2, r3
 800213a:	dbeb      	blt.n	8002114 <__ledf2+0x7c>
 800213c:	454f      	cmp	r7, r9
 800213e:	d8df      	bhi.n	8002100 <__ledf2+0x68>
 8002140:	d006      	beq.n	8002150 <__ledf2+0xb8>
 8002142:	2000      	movs	r0, #0
 8002144:	454f      	cmp	r7, r9
 8002146:	d2e1      	bcs.n	800210c <__ledf2+0x74>
 8002148:	2900      	cmp	r1, #0
 800214a:	d0e5      	beq.n	8002118 <__ledf2+0x80>
 800214c:	0008      	movs	r0, r1
 800214e:	e7dd      	b.n	800210c <__ledf2+0x74>
 8002150:	45c4      	cmp	ip, r8
 8002152:	d8d5      	bhi.n	8002100 <__ledf2+0x68>
 8002154:	2000      	movs	r0, #0
 8002156:	45c4      	cmp	ip, r8
 8002158:	d2d8      	bcs.n	800210c <__ledf2+0x74>
 800215a:	e7f5      	b.n	8002148 <__ledf2+0xb0>
 800215c:	000007ff 	.word	0x000007ff

08002160 <__aeabi_dmul>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	4645      	mov	r5, r8
 8002168:	46de      	mov	lr, fp
 800216a:	b5e0      	push	{r5, r6, r7, lr}
 800216c:	4698      	mov	r8, r3
 800216e:	030c      	lsls	r4, r1, #12
 8002170:	004b      	lsls	r3, r1, #1
 8002172:	0006      	movs	r6, r0
 8002174:	4692      	mov	sl, r2
 8002176:	b087      	sub	sp, #28
 8002178:	0b24      	lsrs	r4, r4, #12
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	0fcf      	lsrs	r7, r1, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dmul+0x24>
 8002182:	e15c      	b.n	800243e <__aeabi_dmul+0x2de>
 8002184:	4ad9      	ldr	r2, [pc, #868]	; (80024ec <__aeabi_dmul+0x38c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d100      	bne.n	800218c <__aeabi_dmul+0x2c>
 800218a:	e175      	b.n	8002478 <__aeabi_dmul+0x318>
 800218c:	0f42      	lsrs	r2, r0, #29
 800218e:	00e4      	lsls	r4, r4, #3
 8002190:	4314      	orrs	r4, r2
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	4314      	orrs	r4, r2
 8002198:	4ad5      	ldr	r2, [pc, #852]	; (80024f0 <__aeabi_dmul+0x390>)
 800219a:	00c5      	lsls	r5, r0, #3
 800219c:	4694      	mov	ip, r2
 800219e:	4463      	add	r3, ip
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	4699      	mov	r9, r3
 80021a6:	469b      	mov	fp, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	4642      	mov	r2, r8
 80021ac:	031e      	lsls	r6, r3, #12
 80021ae:	0fd2      	lsrs	r2, r2, #31
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4650      	mov	r0, sl
 80021b4:	4690      	mov	r8, r2
 80021b6:	0b36      	lsrs	r6, r6, #12
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	d100      	bne.n	80021be <__aeabi_dmul+0x5e>
 80021bc:	e120      	b.n	8002400 <__aeabi_dmul+0x2a0>
 80021be:	4acb      	ldr	r2, [pc, #812]	; (80024ec <__aeabi_dmul+0x38c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x66>
 80021c4:	e162      	b.n	800248c <__aeabi_dmul+0x32c>
 80021c6:	49ca      	ldr	r1, [pc, #808]	; (80024f0 <__aeabi_dmul+0x390>)
 80021c8:	0f42      	lsrs	r2, r0, #29
 80021ca:	468c      	mov	ip, r1
 80021cc:	9900      	ldr	r1, [sp, #0]
 80021ce:	4463      	add	r3, ip
 80021d0:	00f6      	lsls	r6, r6, #3
 80021d2:	468c      	mov	ip, r1
 80021d4:	4316      	orrs	r6, r2
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	449c      	add	ip, r3
 80021da:	0412      	lsls	r2, r2, #16
 80021dc:	4663      	mov	r3, ip
 80021de:	4316      	orrs	r6, r2
 80021e0:	00c2      	lsls	r2, r0, #3
 80021e2:	2000      	movs	r0, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	4643      	mov	r3, r8
 80021ea:	3101      	adds	r1, #1
 80021ec:	468c      	mov	ip, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	407b      	eors	r3, r7
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	290f      	cmp	r1, #15
 80021f6:	d826      	bhi.n	8002246 <__aeabi_dmul+0xe6>
 80021f8:	4bbe      	ldr	r3, [pc, #760]	; (80024f4 <__aeabi_dmul+0x394>)
 80021fa:	0089      	lsls	r1, r1, #2
 80021fc:	5859      	ldr	r1, [r3, r1]
 80021fe:	468f      	mov	pc, r1
 8002200:	4643      	mov	r3, r8
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	0034      	movs	r4, r6
 8002206:	0015      	movs	r5, r2
 8002208:	4683      	mov	fp, r0
 800220a:	465b      	mov	r3, fp
 800220c:	2b02      	cmp	r3, #2
 800220e:	d016      	beq.n	800223e <__aeabi_dmul+0xde>
 8002210:	2b03      	cmp	r3, #3
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0xb6>
 8002214:	e203      	b.n	800261e <__aeabi_dmul+0x4be>
 8002216:	2b01      	cmp	r3, #1
 8002218:	d000      	beq.n	800221c <__aeabi_dmul+0xbc>
 800221a:	e0cd      	b.n	80023b8 <__aeabi_dmul+0x258>
 800221c:	2200      	movs	r2, #0
 800221e:	2400      	movs	r4, #0
 8002220:	2500      	movs	r5, #0
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	0512      	lsls	r2, r2, #20
 8002226:	4322      	orrs	r2, r4
 8002228:	07db      	lsls	r3, r3, #31
 800222a:	431a      	orrs	r2, r3
 800222c:	0028      	movs	r0, r5
 800222e:	0011      	movs	r1, r2
 8002230:	b007      	add	sp, #28
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	46bb      	mov	fp, r7
 8002236:	46b2      	mov	sl, r6
 8002238:	46a9      	mov	r9, r5
 800223a:	46a0      	mov	r8, r4
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223e:	2400      	movs	r4, #0
 8002240:	2500      	movs	r5, #0
 8002242:	4aaa      	ldr	r2, [pc, #680]	; (80024ec <__aeabi_dmul+0x38c>)
 8002244:	e7ed      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002246:	0c28      	lsrs	r0, r5, #16
 8002248:	042d      	lsls	r5, r5, #16
 800224a:	0c2d      	lsrs	r5, r5, #16
 800224c:	002b      	movs	r3, r5
 800224e:	0c11      	lsrs	r1, r2, #16
 8002250:	0412      	lsls	r2, r2, #16
 8002252:	0c12      	lsrs	r2, r2, #16
 8002254:	4353      	muls	r3, r2
 8002256:	4698      	mov	r8, r3
 8002258:	0013      	movs	r3, r2
 800225a:	002f      	movs	r7, r5
 800225c:	4343      	muls	r3, r0
 800225e:	4699      	mov	r9, r3
 8002260:	434f      	muls	r7, r1
 8002262:	444f      	add	r7, r9
 8002264:	46bb      	mov	fp, r7
 8002266:	4647      	mov	r7, r8
 8002268:	000b      	movs	r3, r1
 800226a:	0c3f      	lsrs	r7, r7, #16
 800226c:	46ba      	mov	sl, r7
 800226e:	4343      	muls	r3, r0
 8002270:	44da      	add	sl, fp
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	45d1      	cmp	r9, sl
 8002276:	d904      	bls.n	8002282 <__aeabi_dmul+0x122>
 8002278:	2780      	movs	r7, #128	; 0x80
 800227a:	027f      	lsls	r7, r7, #9
 800227c:	46b9      	mov	r9, r7
 800227e:	444b      	add	r3, r9
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	4653      	mov	r3, sl
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	469b      	mov	fp, r3
 8002288:	4653      	mov	r3, sl
 800228a:	041f      	lsls	r7, r3, #16
 800228c:	4643      	mov	r3, r8
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	4698      	mov	r8, r3
 8002294:	003b      	movs	r3, r7
 8002296:	4443      	add	r3, r8
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	0c33      	lsrs	r3, r6, #16
 800229c:	0436      	lsls	r6, r6, #16
 800229e:	0c36      	lsrs	r6, r6, #16
 80022a0:	4698      	mov	r8, r3
 80022a2:	0033      	movs	r3, r6
 80022a4:	4343      	muls	r3, r0
 80022a6:	4699      	mov	r9, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4343      	muls	r3, r0
 80022ac:	002f      	movs	r7, r5
 80022ae:	469a      	mov	sl, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	4377      	muls	r7, r6
 80022b4:	435d      	muls	r5, r3
 80022b6:	0c38      	lsrs	r0, r7, #16
 80022b8:	444d      	add	r5, r9
 80022ba:	1945      	adds	r5, r0, r5
 80022bc:	45a9      	cmp	r9, r5
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x168>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4699      	mov	r9, r3
 80022c6:	44ca      	add	sl, r9
 80022c8:	043f      	lsls	r7, r7, #16
 80022ca:	0c28      	lsrs	r0, r5, #16
 80022cc:	0c3f      	lsrs	r7, r7, #16
 80022ce:	042d      	lsls	r5, r5, #16
 80022d0:	19ed      	adds	r5, r5, r7
 80022d2:	0c27      	lsrs	r7, r4, #16
 80022d4:	0424      	lsls	r4, r4, #16
 80022d6:	0c24      	lsrs	r4, r4, #16
 80022d8:	0003      	movs	r3, r0
 80022da:	0020      	movs	r0, r4
 80022dc:	4350      	muls	r0, r2
 80022de:	437a      	muls	r2, r7
 80022e0:	4691      	mov	r9, r2
 80022e2:	003a      	movs	r2, r7
 80022e4:	4453      	add	r3, sl
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	0c03      	lsrs	r3, r0, #16
 80022ea:	469a      	mov	sl, r3
 80022ec:	434a      	muls	r2, r1
 80022ee:	4361      	muls	r1, r4
 80022f0:	4449      	add	r1, r9
 80022f2:	4451      	add	r1, sl
 80022f4:	44ab      	add	fp, r5
 80022f6:	4589      	cmp	r9, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x1a2>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	4699      	mov	r9, r3
 8002300:	444a      	add	r2, r9
 8002302:	0400      	lsls	r0, r0, #16
 8002304:	0c0b      	lsrs	r3, r1, #16
 8002306:	0c00      	lsrs	r0, r0, #16
 8002308:	0409      	lsls	r1, r1, #16
 800230a:	1809      	adds	r1, r1, r0
 800230c:	0020      	movs	r0, r4
 800230e:	4699      	mov	r9, r3
 8002310:	4643      	mov	r3, r8
 8002312:	4370      	muls	r0, r6
 8002314:	435c      	muls	r4, r3
 8002316:	437e      	muls	r6, r7
 8002318:	435f      	muls	r7, r3
 800231a:	0c03      	lsrs	r3, r0, #16
 800231c:	4698      	mov	r8, r3
 800231e:	19a4      	adds	r4, r4, r6
 8002320:	4444      	add	r4, r8
 8002322:	444a      	add	r2, r9
 8002324:	9703      	str	r7, [sp, #12]
 8002326:	42a6      	cmp	r6, r4
 8002328:	d904      	bls.n	8002334 <__aeabi_dmul+0x1d4>
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	4698      	mov	r8, r3
 8002330:	4447      	add	r7, r8
 8002332:	9703      	str	r7, [sp, #12]
 8002334:	0423      	lsls	r3, r4, #16
 8002336:	9e02      	ldr	r6, [sp, #8]
 8002338:	469a      	mov	sl, r3
 800233a:	9b05      	ldr	r3, [sp, #20]
 800233c:	445e      	add	r6, fp
 800233e:	4698      	mov	r8, r3
 8002340:	42ae      	cmp	r6, r5
 8002342:	41ad      	sbcs	r5, r5
 8002344:	1876      	adds	r6, r6, r1
 8002346:	428e      	cmp	r6, r1
 8002348:	4189      	sbcs	r1, r1
 800234a:	0400      	lsls	r0, r0, #16
 800234c:	0c00      	lsrs	r0, r0, #16
 800234e:	4450      	add	r0, sl
 8002350:	4440      	add	r0, r8
 8002352:	426d      	negs	r5, r5
 8002354:	1947      	adds	r7, r0, r5
 8002356:	46b8      	mov	r8, r7
 8002358:	4693      	mov	fp, r2
 800235a:	4249      	negs	r1, r1
 800235c:	4689      	mov	r9, r1
 800235e:	44c3      	add	fp, r8
 8002360:	44d9      	add	r9, fp
 8002362:	4298      	cmp	r0, r3
 8002364:	4180      	sbcs	r0, r0
 8002366:	45a8      	cmp	r8, r5
 8002368:	41ad      	sbcs	r5, r5
 800236a:	4593      	cmp	fp, r2
 800236c:	4192      	sbcs	r2, r2
 800236e:	4589      	cmp	r9, r1
 8002370:	4189      	sbcs	r1, r1
 8002372:	426d      	negs	r5, r5
 8002374:	4240      	negs	r0, r0
 8002376:	4328      	orrs	r0, r5
 8002378:	0c24      	lsrs	r4, r4, #16
 800237a:	4252      	negs	r2, r2
 800237c:	4249      	negs	r1, r1
 800237e:	430a      	orrs	r2, r1
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	1900      	adds	r0, r0, r4
 8002384:	1880      	adds	r0, r0, r2
 8002386:	18c7      	adds	r7, r0, r3
 8002388:	464b      	mov	r3, r9
 800238a:	0ddc      	lsrs	r4, r3, #23
 800238c:	9b04      	ldr	r3, [sp, #16]
 800238e:	0275      	lsls	r5, r6, #9
 8002390:	431d      	orrs	r5, r3
 8002392:	1e6a      	subs	r2, r5, #1
 8002394:	4195      	sbcs	r5, r2
 8002396:	464b      	mov	r3, r9
 8002398:	0df6      	lsrs	r6, r6, #23
 800239a:	027f      	lsls	r7, r7, #9
 800239c:	4335      	orrs	r5, r6
 800239e:	025a      	lsls	r2, r3, #9
 80023a0:	433c      	orrs	r4, r7
 80023a2:	4315      	orrs	r5, r2
 80023a4:	01fb      	lsls	r3, r7, #7
 80023a6:	d400      	bmi.n	80023aa <__aeabi_dmul+0x24a>
 80023a8:	e11c      	b.n	80025e4 <__aeabi_dmul+0x484>
 80023aa:	2101      	movs	r1, #1
 80023ac:	086a      	lsrs	r2, r5, #1
 80023ae:	400d      	ands	r5, r1
 80023b0:	4315      	orrs	r5, r2
 80023b2:	07e2      	lsls	r2, r4, #31
 80023b4:	4315      	orrs	r5, r2
 80023b6:	0864      	lsrs	r4, r4, #1
 80023b8:	494f      	ldr	r1, [pc, #316]	; (80024f8 <__aeabi_dmul+0x398>)
 80023ba:	4461      	add	r1, ip
 80023bc:	2900      	cmp	r1, #0
 80023be:	dc00      	bgt.n	80023c2 <__aeabi_dmul+0x262>
 80023c0:	e0b0      	b.n	8002524 <__aeabi_dmul+0x3c4>
 80023c2:	076b      	lsls	r3, r5, #29
 80023c4:	d009      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023c6:	220f      	movs	r2, #15
 80023c8:	402a      	ands	r2, r5
 80023ca:	2a04      	cmp	r2, #4
 80023cc:	d005      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023ce:	1d2a      	adds	r2, r5, #4
 80023d0:	42aa      	cmp	r2, r5
 80023d2:	41ad      	sbcs	r5, r5
 80023d4:	426d      	negs	r5, r5
 80023d6:	1964      	adds	r4, r4, r5
 80023d8:	0015      	movs	r5, r2
 80023da:	01e3      	lsls	r3, r4, #7
 80023dc:	d504      	bpl.n	80023e8 <__aeabi_dmul+0x288>
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	4a46      	ldr	r2, [pc, #280]	; (80024fc <__aeabi_dmul+0x39c>)
 80023e2:	00c9      	lsls	r1, r1, #3
 80023e4:	4014      	ands	r4, r2
 80023e6:	4461      	add	r1, ip
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <__aeabi_dmul+0x3a0>)
 80023ea:	4291      	cmp	r1, r2
 80023ec:	dd00      	ble.n	80023f0 <__aeabi_dmul+0x290>
 80023ee:	e726      	b.n	800223e <__aeabi_dmul+0xde>
 80023f0:	0762      	lsls	r2, r4, #29
 80023f2:	08ed      	lsrs	r5, r5, #3
 80023f4:	0264      	lsls	r4, r4, #9
 80023f6:	0549      	lsls	r1, r1, #21
 80023f8:	4315      	orrs	r5, r2
 80023fa:	0b24      	lsrs	r4, r4, #12
 80023fc:	0d4a      	lsrs	r2, r1, #21
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002400:	4652      	mov	r2, sl
 8002402:	4332      	orrs	r2, r6
 8002404:	d100      	bne.n	8002408 <__aeabi_dmul+0x2a8>
 8002406:	e07f      	b.n	8002508 <__aeabi_dmul+0x3a8>
 8002408:	2e00      	cmp	r6, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dmul+0x2ae>
 800240c:	e0dc      	b.n	80025c8 <__aeabi_dmul+0x468>
 800240e:	0030      	movs	r0, r6
 8002410:	f000 fe1e 	bl	8003050 <__clzsi2>
 8002414:	0002      	movs	r2, r0
 8002416:	3a0b      	subs	r2, #11
 8002418:	231d      	movs	r3, #29
 800241a:	0001      	movs	r1, r0
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	4652      	mov	r2, sl
 8002420:	3908      	subs	r1, #8
 8002422:	40da      	lsrs	r2, r3
 8002424:	408e      	lsls	r6, r1
 8002426:	4316      	orrs	r6, r2
 8002428:	4652      	mov	r2, sl
 800242a:	408a      	lsls	r2, r1
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	4935      	ldr	r1, [pc, #212]	; (8002504 <__aeabi_dmul+0x3a4>)
 8002430:	1a18      	subs	r0, r3, r0
 8002432:	0003      	movs	r3, r0
 8002434:	468c      	mov	ip, r1
 8002436:	4463      	add	r3, ip
 8002438:	2000      	movs	r0, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	e6d3      	b.n	80021e6 <__aeabi_dmul+0x86>
 800243e:	0025      	movs	r5, r4
 8002440:	4305      	orrs	r5, r0
 8002442:	d04a      	beq.n	80024da <__aeabi_dmul+0x37a>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d100      	bne.n	800244a <__aeabi_dmul+0x2ea>
 8002448:	e0b0      	b.n	80025ac <__aeabi_dmul+0x44c>
 800244a:	0020      	movs	r0, r4
 800244c:	f000 fe00 	bl	8003050 <__clzsi2>
 8002450:	0001      	movs	r1, r0
 8002452:	0002      	movs	r2, r0
 8002454:	390b      	subs	r1, #11
 8002456:	231d      	movs	r3, #29
 8002458:	0010      	movs	r0, r2
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	0031      	movs	r1, r6
 800245e:	0035      	movs	r5, r6
 8002460:	3808      	subs	r0, #8
 8002462:	4084      	lsls	r4, r0
 8002464:	40d9      	lsrs	r1, r3
 8002466:	4085      	lsls	r5, r0
 8002468:	430c      	orrs	r4, r1
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <__aeabi_dmul+0x3a4>)
 800246c:	1a83      	subs	r3, r0, r2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	4699      	mov	r9, r3
 8002474:	469b      	mov	fp, r3
 8002476:	e697      	b.n	80021a8 <__aeabi_dmul+0x48>
 8002478:	0005      	movs	r5, r0
 800247a:	4325      	orrs	r5, r4
 800247c:	d126      	bne.n	80024cc <__aeabi_dmul+0x36c>
 800247e:	2208      	movs	r2, #8
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	2400      	movs	r4, #0
 8002486:	4691      	mov	r9, r2
 8002488:	469b      	mov	fp, r3
 800248a:	e68d      	b.n	80021a8 <__aeabi_dmul+0x48>
 800248c:	4652      	mov	r2, sl
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	4332      	orrs	r2, r6
 8002492:	d110      	bne.n	80024b6 <__aeabi_dmul+0x356>
 8002494:	4915      	ldr	r1, [pc, #84]	; (80024ec <__aeabi_dmul+0x38c>)
 8002496:	2600      	movs	r6, #0
 8002498:	468c      	mov	ip, r1
 800249a:	4463      	add	r3, ip
 800249c:	4649      	mov	r1, r9
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2302      	movs	r3, #2
 80024a2:	4319      	orrs	r1, r3
 80024a4:	4689      	mov	r9, r1
 80024a6:	2002      	movs	r0, #2
 80024a8:	e69d      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024aa:	465b      	mov	r3, fp
 80024ac:	9701      	str	r7, [sp, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d000      	beq.n	80024b4 <__aeabi_dmul+0x354>
 80024b2:	e6ad      	b.n	8002210 <__aeabi_dmul+0xb0>
 80024b4:	e6c3      	b.n	800223e <__aeabi_dmul+0xde>
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <__aeabi_dmul+0x38c>)
 80024b8:	2003      	movs	r0, #3
 80024ba:	4694      	mov	ip, r2
 80024bc:	4463      	add	r3, ip
 80024be:	464a      	mov	r2, r9
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2303      	movs	r3, #3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	4652      	mov	r2, sl
 80024ca:	e68c      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024cc:	220c      	movs	r2, #12
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2303      	movs	r3, #3
 80024d2:	0005      	movs	r5, r0
 80024d4:	4691      	mov	r9, r2
 80024d6:	469b      	mov	fp, r3
 80024d8:	e666      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024da:	2304      	movs	r3, #4
 80024dc:	4699      	mov	r9, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	2400      	movs	r4, #0
 80024e6:	469b      	mov	fp, r3
 80024e8:	e65e      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000007ff 	.word	0x000007ff
 80024f0:	fffffc01 	.word	0xfffffc01
 80024f4:	08018ad4 	.word	0x08018ad4
 80024f8:	000003ff 	.word	0x000003ff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	000007fe 	.word	0x000007fe
 8002504:	fffffc0d 	.word	0xfffffc0d
 8002508:	4649      	mov	r1, r9
 800250a:	2301      	movs	r3, #1
 800250c:	4319      	orrs	r1, r3
 800250e:	4689      	mov	r9, r1
 8002510:	2600      	movs	r6, #0
 8002512:	2001      	movs	r0, #1
 8002514:	e667      	b.n	80021e6 <__aeabi_dmul+0x86>
 8002516:	2300      	movs	r3, #0
 8002518:	2480      	movs	r4, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <__aeabi_dmul+0x4cc>)
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	0324      	lsls	r4, r4, #12
 8002522:	e67e      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002524:	2001      	movs	r0, #1
 8002526:	1a40      	subs	r0, r0, r1
 8002528:	2838      	cmp	r0, #56	; 0x38
 800252a:	dd00      	ble.n	800252e <__aeabi_dmul+0x3ce>
 800252c:	e676      	b.n	800221c <__aeabi_dmul+0xbc>
 800252e:	281f      	cmp	r0, #31
 8002530:	dd5b      	ble.n	80025ea <__aeabi_dmul+0x48a>
 8002532:	221f      	movs	r2, #31
 8002534:	0023      	movs	r3, r4
 8002536:	4252      	negs	r2, r2
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	0019      	movs	r1, r3
 800253e:	2820      	cmp	r0, #32
 8002540:	d003      	beq.n	800254a <__aeabi_dmul+0x3ea>
 8002542:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <__aeabi_dmul+0x4d0>)
 8002544:	4462      	add	r2, ip
 8002546:	4094      	lsls	r4, r2
 8002548:	4325      	orrs	r5, r4
 800254a:	1e6a      	subs	r2, r5, #1
 800254c:	4195      	sbcs	r5, r2
 800254e:	002a      	movs	r2, r5
 8002550:	430a      	orrs	r2, r1
 8002552:	2107      	movs	r1, #7
 8002554:	000d      	movs	r5, r1
 8002556:	2400      	movs	r4, #0
 8002558:	4015      	ands	r5, r2
 800255a:	4211      	tst	r1, r2
 800255c:	d05b      	beq.n	8002616 <__aeabi_dmul+0x4b6>
 800255e:	210f      	movs	r1, #15
 8002560:	2400      	movs	r4, #0
 8002562:	4011      	ands	r1, r2
 8002564:	2904      	cmp	r1, #4
 8002566:	d053      	beq.n	8002610 <__aeabi_dmul+0x4b0>
 8002568:	1d11      	adds	r1, r2, #4
 800256a:	4291      	cmp	r1, r2
 800256c:	4192      	sbcs	r2, r2
 800256e:	4252      	negs	r2, r2
 8002570:	18a4      	adds	r4, r4, r2
 8002572:	000a      	movs	r2, r1
 8002574:	0223      	lsls	r3, r4, #8
 8002576:	d54b      	bpl.n	8002610 <__aeabi_dmul+0x4b0>
 8002578:	2201      	movs	r2, #1
 800257a:	2400      	movs	r4, #0
 800257c:	2500      	movs	r5, #0
 800257e:	e650      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	031b      	lsls	r3, r3, #12
 8002584:	421c      	tst	r4, r3
 8002586:	d009      	beq.n	800259c <__aeabi_dmul+0x43c>
 8002588:	421e      	tst	r6, r3
 800258a:	d107      	bne.n	800259c <__aeabi_dmul+0x43c>
 800258c:	4333      	orrs	r3, r6
 800258e:	031c      	lsls	r4, r3, #12
 8002590:	4643      	mov	r3, r8
 8002592:	0015      	movs	r5, r2
 8002594:	0b24      	lsrs	r4, r4, #12
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <__aeabi_dmul+0x4cc>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	e642      	b.n	8002222 <__aeabi_dmul+0xc2>
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0312      	lsls	r2, r2, #12
 80025a0:	4314      	orrs	r4, r2
 80025a2:	0324      	lsls	r4, r4, #12
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <__aeabi_dmul+0x4cc>)
 80025a6:	0b24      	lsrs	r4, r4, #12
 80025a8:	9701      	str	r7, [sp, #4]
 80025aa:	e63a      	b.n	8002222 <__aeabi_dmul+0xc2>
 80025ac:	f000 fd50 	bl	8003050 <__clzsi2>
 80025b0:	0001      	movs	r1, r0
 80025b2:	0002      	movs	r2, r0
 80025b4:	3115      	adds	r1, #21
 80025b6:	3220      	adds	r2, #32
 80025b8:	291c      	cmp	r1, #28
 80025ba:	dc00      	bgt.n	80025be <__aeabi_dmul+0x45e>
 80025bc:	e74b      	b.n	8002456 <__aeabi_dmul+0x2f6>
 80025be:	0034      	movs	r4, r6
 80025c0:	3808      	subs	r0, #8
 80025c2:	2500      	movs	r5, #0
 80025c4:	4084      	lsls	r4, r0
 80025c6:	e750      	b.n	800246a <__aeabi_dmul+0x30a>
 80025c8:	f000 fd42 	bl	8003050 <__clzsi2>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	3215      	adds	r2, #21
 80025d2:	3020      	adds	r0, #32
 80025d4:	2a1c      	cmp	r2, #28
 80025d6:	dc00      	bgt.n	80025da <__aeabi_dmul+0x47a>
 80025d8:	e71e      	b.n	8002418 <__aeabi_dmul+0x2b8>
 80025da:	4656      	mov	r6, sl
 80025dc:	3b08      	subs	r3, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	409e      	lsls	r6, r3
 80025e2:	e723      	b.n	800242c <__aeabi_dmul+0x2cc>
 80025e4:	9b00      	ldr	r3, [sp, #0]
 80025e6:	469c      	mov	ip, r3
 80025e8:	e6e6      	b.n	80023b8 <__aeabi_dmul+0x258>
 80025ea:	4912      	ldr	r1, [pc, #72]	; (8002634 <__aeabi_dmul+0x4d4>)
 80025ec:	0022      	movs	r2, r4
 80025ee:	4461      	add	r1, ip
 80025f0:	002e      	movs	r6, r5
 80025f2:	408d      	lsls	r5, r1
 80025f4:	408a      	lsls	r2, r1
 80025f6:	40c6      	lsrs	r6, r0
 80025f8:	1e69      	subs	r1, r5, #1
 80025fa:	418d      	sbcs	r5, r1
 80025fc:	4332      	orrs	r2, r6
 80025fe:	432a      	orrs	r2, r5
 8002600:	40c4      	lsrs	r4, r0
 8002602:	0753      	lsls	r3, r2, #29
 8002604:	d0b6      	beq.n	8002574 <__aeabi_dmul+0x414>
 8002606:	210f      	movs	r1, #15
 8002608:	4011      	ands	r1, r2
 800260a:	2904      	cmp	r1, #4
 800260c:	d1ac      	bne.n	8002568 <__aeabi_dmul+0x408>
 800260e:	e7b1      	b.n	8002574 <__aeabi_dmul+0x414>
 8002610:	0765      	lsls	r5, r4, #29
 8002612:	0264      	lsls	r4, r4, #9
 8002614:	0b24      	lsrs	r4, r4, #12
 8002616:	08d2      	lsrs	r2, r2, #3
 8002618:	4315      	orrs	r5, r2
 800261a:	2200      	movs	r2, #0
 800261c:	e601      	b.n	8002222 <__aeabi_dmul+0xc2>
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0312      	lsls	r2, r2, #12
 8002622:	4314      	orrs	r4, r2
 8002624:	0324      	lsls	r4, r4, #12
 8002626:	4a01      	ldr	r2, [pc, #4]	; (800262c <__aeabi_dmul+0x4cc>)
 8002628:	0b24      	lsrs	r4, r4, #12
 800262a:	e5fa      	b.n	8002222 <__aeabi_dmul+0xc2>
 800262c:	000007ff 	.word	0x000007ff
 8002630:	0000043e 	.word	0x0000043e
 8002634:	0000041e 	.word	0x0000041e

08002638 <__aeabi_dsub>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	4657      	mov	r7, sl
 800263c:	464e      	mov	r6, r9
 800263e:	4645      	mov	r5, r8
 8002640:	46de      	mov	lr, fp
 8002642:	b5e0      	push	{r5, r6, r7, lr}
 8002644:	001e      	movs	r6, r3
 8002646:	0017      	movs	r7, r2
 8002648:	004a      	lsls	r2, r1, #1
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0d52      	lsrs	r2, r2, #21
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	4690      	mov	r8, r2
 8002652:	0f42      	lsrs	r2, r0, #29
 8002654:	431a      	orrs	r2, r3
 8002656:	0fcd      	lsrs	r5, r1, #31
 8002658:	4ccd      	ldr	r4, [pc, #820]	; (8002990 <__aeabi_dsub+0x358>)
 800265a:	0331      	lsls	r1, r6, #12
 800265c:	00c3      	lsls	r3, r0, #3
 800265e:	4694      	mov	ip, r2
 8002660:	0070      	lsls	r0, r6, #1
 8002662:	0f7a      	lsrs	r2, r7, #29
 8002664:	0a49      	lsrs	r1, r1, #9
 8002666:	00ff      	lsls	r7, r7, #3
 8002668:	469a      	mov	sl, r3
 800266a:	46b9      	mov	r9, r7
 800266c:	0d40      	lsrs	r0, r0, #21
 800266e:	0ff6      	lsrs	r6, r6, #31
 8002670:	4311      	orrs	r1, r2
 8002672:	42a0      	cmp	r0, r4
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x40>
 8002676:	e0b1      	b.n	80027dc <__aeabi_dsub+0x1a4>
 8002678:	2201      	movs	r2, #1
 800267a:	4056      	eors	r6, r2
 800267c:	46b3      	mov	fp, r6
 800267e:	42b5      	cmp	r5, r6
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x4c>
 8002682:	e088      	b.n	8002796 <__aeabi_dsub+0x15e>
 8002684:	4642      	mov	r2, r8
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	2a00      	cmp	r2, #0
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x56>
 800268c:	e0ae      	b.n	80027ec <__aeabi_dsub+0x1b4>
 800268e:	2800      	cmp	r0, #0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x5c>
 8002692:	e0c1      	b.n	8002818 <__aeabi_dsub+0x1e0>
 8002694:	48be      	ldr	r0, [pc, #760]	; (8002990 <__aeabi_dsub+0x358>)
 8002696:	4580      	cmp	r8, r0
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x64>
 800269a:	e151      	b.n	8002940 <__aeabi_dsub+0x308>
 800269c:	2080      	movs	r0, #128	; 0x80
 800269e:	0400      	lsls	r0, r0, #16
 80026a0:	4301      	orrs	r1, r0
 80026a2:	2a38      	cmp	r2, #56	; 0x38
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dsub+0x70>
 80026a6:	e17b      	b.n	80029a0 <__aeabi_dsub+0x368>
 80026a8:	2a1f      	cmp	r2, #31
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dsub+0x76>
 80026ac:	e1ee      	b.n	8002a8c <__aeabi_dsub+0x454>
 80026ae:	2020      	movs	r0, #32
 80026b0:	003e      	movs	r6, r7
 80026b2:	1a80      	subs	r0, r0, r2
 80026b4:	000c      	movs	r4, r1
 80026b6:	40d6      	lsrs	r6, r2
 80026b8:	40d1      	lsrs	r1, r2
 80026ba:	4087      	lsls	r7, r0
 80026bc:	4662      	mov	r2, ip
 80026be:	4084      	lsls	r4, r0
 80026c0:	1a52      	subs	r2, r2, r1
 80026c2:	1e78      	subs	r0, r7, #1
 80026c4:	4187      	sbcs	r7, r0
 80026c6:	4694      	mov	ip, r2
 80026c8:	4334      	orrs	r4, r6
 80026ca:	4327      	orrs	r7, r4
 80026cc:	1bdc      	subs	r4, r3, r7
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	419b      	sbcs	r3, r3
 80026d2:	4662      	mov	r2, ip
 80026d4:	425b      	negs	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4699      	mov	r9, r3
 80026da:	464b      	mov	r3, r9
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0xaa>
 80026e0:	e118      	b.n	8002914 <__aeabi_dsub+0x2dc>
 80026e2:	464b      	mov	r3, r9
 80026e4:	0258      	lsls	r0, r3, #9
 80026e6:	0a43      	lsrs	r3, r0, #9
 80026e8:	4699      	mov	r9, r3
 80026ea:	464b      	mov	r3, r9
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0xba>
 80026f0:	e137      	b.n	8002962 <__aeabi_dsub+0x32a>
 80026f2:	4648      	mov	r0, r9
 80026f4:	f000 fcac 	bl	8003050 <__clzsi2>
 80026f8:	0001      	movs	r1, r0
 80026fa:	3908      	subs	r1, #8
 80026fc:	2320      	movs	r3, #32
 80026fe:	0022      	movs	r2, r4
 8002700:	4648      	mov	r0, r9
 8002702:	1a5b      	subs	r3, r3, r1
 8002704:	40da      	lsrs	r2, r3
 8002706:	4088      	lsls	r0, r1
 8002708:	408c      	lsls	r4, r1
 800270a:	4643      	mov	r3, r8
 800270c:	4310      	orrs	r0, r2
 800270e:	4588      	cmp	r8, r1
 8002710:	dd00      	ble.n	8002714 <__aeabi_dsub+0xdc>
 8002712:	e136      	b.n	8002982 <__aeabi_dsub+0x34a>
 8002714:	1ac9      	subs	r1, r1, r3
 8002716:	1c4b      	adds	r3, r1, #1
 8002718:	2b1f      	cmp	r3, #31
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0xe6>
 800271c:	e0ea      	b.n	80028f4 <__aeabi_dsub+0x2bc>
 800271e:	2220      	movs	r2, #32
 8002720:	0026      	movs	r6, r4
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	0001      	movs	r1, r0
 8002726:	4094      	lsls	r4, r2
 8002728:	40de      	lsrs	r6, r3
 800272a:	40d8      	lsrs	r0, r3
 800272c:	2300      	movs	r3, #0
 800272e:	4091      	lsls	r1, r2
 8002730:	1e62      	subs	r2, r4, #1
 8002732:	4194      	sbcs	r4, r2
 8002734:	4681      	mov	r9, r0
 8002736:	4698      	mov	r8, r3
 8002738:	4331      	orrs	r1, r6
 800273a:	430c      	orrs	r4, r1
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	d009      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002740:	230f      	movs	r3, #15
 8002742:	4023      	ands	r3, r4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	42a3      	cmp	r3, r4
 800274c:	41a4      	sbcs	r4, r4
 800274e:	4264      	negs	r4, r4
 8002750:	44a1      	add	r9, r4
 8002752:	001c      	movs	r4, r3
 8002754:	464b      	mov	r3, r9
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	d400      	bmi.n	800275c <__aeabi_dsub+0x124>
 800275a:	e0de      	b.n	800291a <__aeabi_dsub+0x2e2>
 800275c:	4641      	mov	r1, r8
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <__aeabi_dsub+0x358>)
 8002760:	3101      	adds	r1, #1
 8002762:	4299      	cmp	r1, r3
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x130>
 8002766:	e0e7      	b.n	8002938 <__aeabi_dsub+0x300>
 8002768:	464b      	mov	r3, r9
 800276a:	488a      	ldr	r0, [pc, #552]	; (8002994 <__aeabi_dsub+0x35c>)
 800276c:	08e4      	lsrs	r4, r4, #3
 800276e:	4003      	ands	r3, r0
 8002770:	0018      	movs	r0, r3
 8002772:	0549      	lsls	r1, r1, #21
 8002774:	075b      	lsls	r3, r3, #29
 8002776:	0240      	lsls	r0, r0, #9
 8002778:	4323      	orrs	r3, r4
 800277a:	0d4a      	lsrs	r2, r1, #21
 800277c:	0b04      	lsrs	r4, r0, #12
 800277e:	0512      	lsls	r2, r2, #20
 8002780:	07ed      	lsls	r5, r5, #31
 8002782:	4322      	orrs	r2, r4
 8002784:	432a      	orrs	r2, r5
 8002786:	0018      	movs	r0, r3
 8002788:	0011      	movs	r1, r2
 800278a:	bcf0      	pop	{r4, r5, r6, r7}
 800278c:	46bb      	mov	fp, r7
 800278e:	46b2      	mov	sl, r6
 8002790:	46a9      	mov	r9, r5
 8002792:	46a0      	mov	r8, r4
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002796:	4642      	mov	r2, r8
 8002798:	1a12      	subs	r2, r2, r0
 800279a:	2a00      	cmp	r2, #0
 800279c:	dd52      	ble.n	8002844 <__aeabi_dsub+0x20c>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x16c>
 80027a2:	e09c      	b.n	80028de <__aeabi_dsub+0x2a6>
 80027a4:	45a0      	cmp	r8, r4
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x172>
 80027a8:	e0ca      	b.n	8002940 <__aeabi_dsub+0x308>
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	0400      	lsls	r0, r0, #16
 80027ae:	4301      	orrs	r1, r0
 80027b0:	2a38      	cmp	r2, #56	; 0x38
 80027b2:	dd00      	ble.n	80027b6 <__aeabi_dsub+0x17e>
 80027b4:	e149      	b.n	8002a4a <__aeabi_dsub+0x412>
 80027b6:	2a1f      	cmp	r2, #31
 80027b8:	dc00      	bgt.n	80027bc <__aeabi_dsub+0x184>
 80027ba:	e197      	b.n	8002aec <__aeabi_dsub+0x4b4>
 80027bc:	0010      	movs	r0, r2
 80027be:	000e      	movs	r6, r1
 80027c0:	3820      	subs	r0, #32
 80027c2:	40c6      	lsrs	r6, r0
 80027c4:	2a20      	cmp	r2, #32
 80027c6:	d004      	beq.n	80027d2 <__aeabi_dsub+0x19a>
 80027c8:	2040      	movs	r0, #64	; 0x40
 80027ca:	1a82      	subs	r2, r0, r2
 80027cc:	4091      	lsls	r1, r2
 80027ce:	430f      	orrs	r7, r1
 80027d0:	46b9      	mov	r9, r7
 80027d2:	464c      	mov	r4, r9
 80027d4:	1e62      	subs	r2, r4, #1
 80027d6:	4194      	sbcs	r4, r2
 80027d8:	4334      	orrs	r4, r6
 80027da:	e13a      	b.n	8002a52 <__aeabi_dsub+0x41a>
 80027dc:	000a      	movs	r2, r1
 80027de:	433a      	orrs	r2, r7
 80027e0:	d028      	beq.n	8002834 <__aeabi_dsub+0x1fc>
 80027e2:	46b3      	mov	fp, r6
 80027e4:	42b5      	cmp	r5, r6
 80027e6:	d02b      	beq.n	8002840 <__aeabi_dsub+0x208>
 80027e8:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <__aeabi_dsub+0x360>)
 80027ea:	4442      	add	r2, r8
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d05d      	beq.n	80028ac <__aeabi_dsub+0x274>
 80027f0:	4642      	mov	r2, r8
 80027f2:	4644      	mov	r4, r8
 80027f4:	1a82      	subs	r2, r0, r2
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	d000      	beq.n	80027fc <__aeabi_dsub+0x1c4>
 80027fa:	e0f5      	b.n	80029e8 <__aeabi_dsub+0x3b0>
 80027fc:	4665      	mov	r5, ip
 80027fe:	431d      	orrs	r5, r3
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x1cc>
 8002802:	e19c      	b.n	8002b3e <__aeabi_dsub+0x506>
 8002804:	1e55      	subs	r5, r2, #1
 8002806:	2a01      	cmp	r2, #1
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x1d4>
 800280a:	e1fb      	b.n	8002c04 <__aeabi_dsub+0x5cc>
 800280c:	4c60      	ldr	r4, [pc, #384]	; (8002990 <__aeabi_dsub+0x358>)
 800280e:	42a2      	cmp	r2, r4
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x1dc>
 8002812:	e1bd      	b.n	8002b90 <__aeabi_dsub+0x558>
 8002814:	002a      	movs	r2, r5
 8002816:	e0f0      	b.n	80029fa <__aeabi_dsub+0x3c2>
 8002818:	0008      	movs	r0, r1
 800281a:	4338      	orrs	r0, r7
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x1e8>
 800281e:	e0c3      	b.n	80029a8 <__aeabi_dsub+0x370>
 8002820:	1e50      	subs	r0, r2, #1
 8002822:	2a01      	cmp	r2, #1
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x1f0>
 8002826:	e1a8      	b.n	8002b7a <__aeabi_dsub+0x542>
 8002828:	4c59      	ldr	r4, [pc, #356]	; (8002990 <__aeabi_dsub+0x358>)
 800282a:	42a2      	cmp	r2, r4
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x1f8>
 800282e:	e087      	b.n	8002940 <__aeabi_dsub+0x308>
 8002830:	0002      	movs	r2, r0
 8002832:	e736      	b.n	80026a2 <__aeabi_dsub+0x6a>
 8002834:	2201      	movs	r2, #1
 8002836:	4056      	eors	r6, r2
 8002838:	46b3      	mov	fp, r6
 800283a:	42b5      	cmp	r5, r6
 800283c:	d000      	beq.n	8002840 <__aeabi_dsub+0x208>
 800283e:	e721      	b.n	8002684 <__aeabi_dsub+0x4c>
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <__aeabi_dsub+0x360>)
 8002842:	4442      	add	r2, r8
 8002844:	2a00      	cmp	r2, #0
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x212>
 8002848:	e0b5      	b.n	80029b6 <__aeabi_dsub+0x37e>
 800284a:	4642      	mov	r2, r8
 800284c:	4644      	mov	r4, r8
 800284e:	1a82      	subs	r2, r0, r2
 8002850:	2c00      	cmp	r4, #0
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x21e>
 8002854:	e138      	b.n	8002ac8 <__aeabi_dsub+0x490>
 8002856:	4e4e      	ldr	r6, [pc, #312]	; (8002990 <__aeabi_dsub+0x358>)
 8002858:	42b0      	cmp	r0, r6
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x226>
 800285c:	e1de      	b.n	8002c1c <__aeabi_dsub+0x5e4>
 800285e:	2680      	movs	r6, #128	; 0x80
 8002860:	4664      	mov	r4, ip
 8002862:	0436      	lsls	r6, r6, #16
 8002864:	4334      	orrs	r4, r6
 8002866:	46a4      	mov	ip, r4
 8002868:	2a38      	cmp	r2, #56	; 0x38
 800286a:	dd00      	ble.n	800286e <__aeabi_dsub+0x236>
 800286c:	e196      	b.n	8002b9c <__aeabi_dsub+0x564>
 800286e:	2a1f      	cmp	r2, #31
 8002870:	dd00      	ble.n	8002874 <__aeabi_dsub+0x23c>
 8002872:	e224      	b.n	8002cbe <__aeabi_dsub+0x686>
 8002874:	2620      	movs	r6, #32
 8002876:	1ab4      	subs	r4, r6, r2
 8002878:	46a2      	mov	sl, r4
 800287a:	4664      	mov	r4, ip
 800287c:	4656      	mov	r6, sl
 800287e:	40b4      	lsls	r4, r6
 8002880:	46a1      	mov	r9, r4
 8002882:	001c      	movs	r4, r3
 8002884:	464e      	mov	r6, r9
 8002886:	40d4      	lsrs	r4, r2
 8002888:	4326      	orrs	r6, r4
 800288a:	0034      	movs	r4, r6
 800288c:	4656      	mov	r6, sl
 800288e:	40b3      	lsls	r3, r6
 8002890:	1e5e      	subs	r6, r3, #1
 8002892:	41b3      	sbcs	r3, r6
 8002894:	431c      	orrs	r4, r3
 8002896:	4663      	mov	r3, ip
 8002898:	40d3      	lsrs	r3, r2
 800289a:	18c9      	adds	r1, r1, r3
 800289c:	19e4      	adds	r4, r4, r7
 800289e:	42bc      	cmp	r4, r7
 80028a0:	41bf      	sbcs	r7, r7
 80028a2:	427f      	negs	r7, r7
 80028a4:	46b9      	mov	r9, r7
 80028a6:	4680      	mov	r8, r0
 80028a8:	4489      	add	r9, r1
 80028aa:	e0d8      	b.n	8002a5e <__aeabi_dsub+0x426>
 80028ac:	4640      	mov	r0, r8
 80028ae:	4c3b      	ldr	r4, [pc, #236]	; (800299c <__aeabi_dsub+0x364>)
 80028b0:	3001      	adds	r0, #1
 80028b2:	4220      	tst	r0, r4
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x280>
 80028b6:	e0b4      	b.n	8002a22 <__aeabi_dsub+0x3ea>
 80028b8:	4640      	mov	r0, r8
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d000      	beq.n	80028c0 <__aeabi_dsub+0x288>
 80028be:	e144      	b.n	8002b4a <__aeabi_dsub+0x512>
 80028c0:	4660      	mov	r0, ip
 80028c2:	4318      	orrs	r0, r3
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x290>
 80028c6:	e190      	b.n	8002bea <__aeabi_dsub+0x5b2>
 80028c8:	0008      	movs	r0, r1
 80028ca:	4338      	orrs	r0, r7
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x298>
 80028ce:	e1aa      	b.n	8002c26 <__aeabi_dsub+0x5ee>
 80028d0:	4661      	mov	r1, ip
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	0749      	lsls	r1, r1, #29
 80028d6:	430b      	orrs	r3, r1
 80028d8:	4661      	mov	r1, ip
 80028da:	08cc      	lsrs	r4, r1, #3
 80028dc:	e027      	b.n	800292e <__aeabi_dsub+0x2f6>
 80028de:	0008      	movs	r0, r1
 80028e0:	4338      	orrs	r0, r7
 80028e2:	d061      	beq.n	80029a8 <__aeabi_dsub+0x370>
 80028e4:	1e50      	subs	r0, r2, #1
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x2b4>
 80028ea:	e139      	b.n	8002b60 <__aeabi_dsub+0x528>
 80028ec:	42a2      	cmp	r2, r4
 80028ee:	d027      	beq.n	8002940 <__aeabi_dsub+0x308>
 80028f0:	0002      	movs	r2, r0
 80028f2:	e75d      	b.n	80027b0 <__aeabi_dsub+0x178>
 80028f4:	0002      	movs	r2, r0
 80028f6:	391f      	subs	r1, #31
 80028f8:	40ca      	lsrs	r2, r1
 80028fa:	0011      	movs	r1, r2
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d003      	beq.n	8002908 <__aeabi_dsub+0x2d0>
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4098      	lsls	r0, r3
 8002906:	4304      	orrs	r4, r0
 8002908:	1e63      	subs	r3, r4, #1
 800290a:	419c      	sbcs	r4, r3
 800290c:	2300      	movs	r3, #0
 800290e:	4699      	mov	r9, r3
 8002910:	4698      	mov	r8, r3
 8002912:	430c      	orrs	r4, r1
 8002914:	0763      	lsls	r3, r4, #29
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x2e2>
 8002918:	e712      	b.n	8002740 <__aeabi_dsub+0x108>
 800291a:	464b      	mov	r3, r9
 800291c:	464a      	mov	r2, r9
 800291e:	08e4      	lsrs	r4, r4, #3
 8002920:	075b      	lsls	r3, r3, #29
 8002922:	4323      	orrs	r3, r4
 8002924:	08d4      	lsrs	r4, r2, #3
 8002926:	4642      	mov	r2, r8
 8002928:	4919      	ldr	r1, [pc, #100]	; (8002990 <__aeabi_dsub+0x358>)
 800292a:	428a      	cmp	r2, r1
 800292c:	d00e      	beq.n	800294c <__aeabi_dsub+0x314>
 800292e:	0324      	lsls	r4, r4, #12
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	0b24      	lsrs	r4, r4, #12
 8002934:	0d52      	lsrs	r2, r2, #21
 8002936:	e722      	b.n	800277e <__aeabi_dsub+0x146>
 8002938:	000a      	movs	r2, r1
 800293a:	2400      	movs	r4, #0
 800293c:	2300      	movs	r3, #0
 800293e:	e71e      	b.n	800277e <__aeabi_dsub+0x146>
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	4662      	mov	r2, ip
 8002944:	0752      	lsls	r2, r2, #29
 8002946:	4313      	orrs	r3, r2
 8002948:	4662      	mov	r2, ip
 800294a:	08d4      	lsrs	r4, r2, #3
 800294c:	001a      	movs	r2, r3
 800294e:	4322      	orrs	r2, r4
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x31c>
 8002952:	e1fc      	b.n	8002d4e <__aeabi_dsub+0x716>
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0312      	lsls	r2, r2, #12
 8002958:	4314      	orrs	r4, r2
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <__aeabi_dsub+0x358>)
 800295e:	0b24      	lsrs	r4, r4, #12
 8002960:	e70d      	b.n	800277e <__aeabi_dsub+0x146>
 8002962:	0020      	movs	r0, r4
 8002964:	f000 fb74 	bl	8003050 <__clzsi2>
 8002968:	0001      	movs	r1, r0
 800296a:	3118      	adds	r1, #24
 800296c:	291f      	cmp	r1, #31
 800296e:	dc00      	bgt.n	8002972 <__aeabi_dsub+0x33a>
 8002970:	e6c4      	b.n	80026fc <__aeabi_dsub+0xc4>
 8002972:	3808      	subs	r0, #8
 8002974:	4084      	lsls	r4, r0
 8002976:	4643      	mov	r3, r8
 8002978:	0020      	movs	r0, r4
 800297a:	2400      	movs	r4, #0
 800297c:	4588      	cmp	r8, r1
 800297e:	dc00      	bgt.n	8002982 <__aeabi_dsub+0x34a>
 8002980:	e6c8      	b.n	8002714 <__aeabi_dsub+0xdc>
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__aeabi_dsub+0x35c>)
 8002984:	1a5b      	subs	r3, r3, r1
 8002986:	4010      	ands	r0, r2
 8002988:	4698      	mov	r8, r3
 800298a:	4681      	mov	r9, r0
 800298c:	e6d6      	b.n	800273c <__aeabi_dsub+0x104>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	000007ff 	.word	0x000007ff
 8002994:	ff7fffff 	.word	0xff7fffff
 8002998:	fffff801 	.word	0xfffff801
 800299c:	000007fe 	.word	0x000007fe
 80029a0:	430f      	orrs	r7, r1
 80029a2:	1e7a      	subs	r2, r7, #1
 80029a4:	4197      	sbcs	r7, r2
 80029a6:	e691      	b.n	80026cc <__aeabi_dsub+0x94>
 80029a8:	4661      	mov	r1, ip
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	0749      	lsls	r1, r1, #29
 80029ae:	430b      	orrs	r3, r1
 80029b0:	4661      	mov	r1, ip
 80029b2:	08cc      	lsrs	r4, r1, #3
 80029b4:	e7b8      	b.n	8002928 <__aeabi_dsub+0x2f0>
 80029b6:	4640      	mov	r0, r8
 80029b8:	4cd3      	ldr	r4, [pc, #844]	; (8002d08 <__aeabi_dsub+0x6d0>)
 80029ba:	3001      	adds	r0, #1
 80029bc:	4220      	tst	r0, r4
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x38a>
 80029c0:	e0a2      	b.n	8002b08 <__aeabi_dsub+0x4d0>
 80029c2:	4640      	mov	r0, r8
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d000      	beq.n	80029ca <__aeabi_dsub+0x392>
 80029c8:	e101      	b.n	8002bce <__aeabi_dsub+0x596>
 80029ca:	4660      	mov	r0, ip
 80029cc:	4318      	orrs	r0, r3
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x39a>
 80029d0:	e15e      	b.n	8002c90 <__aeabi_dsub+0x658>
 80029d2:	0008      	movs	r0, r1
 80029d4:	4338      	orrs	r0, r7
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3a2>
 80029d8:	e15f      	b.n	8002c9a <__aeabi_dsub+0x662>
 80029da:	4661      	mov	r1, ip
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	0749      	lsls	r1, r1, #29
 80029e0:	430b      	orrs	r3, r1
 80029e2:	4661      	mov	r1, ip
 80029e4:	08cc      	lsrs	r4, r1, #3
 80029e6:	e7a2      	b.n	800292e <__aeabi_dsub+0x2f6>
 80029e8:	4dc8      	ldr	r5, [pc, #800]	; (8002d0c <__aeabi_dsub+0x6d4>)
 80029ea:	42a8      	cmp	r0, r5
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x3b8>
 80029ee:	e0cf      	b.n	8002b90 <__aeabi_dsub+0x558>
 80029f0:	2580      	movs	r5, #128	; 0x80
 80029f2:	4664      	mov	r4, ip
 80029f4:	042d      	lsls	r5, r5, #16
 80029f6:	432c      	orrs	r4, r5
 80029f8:	46a4      	mov	ip, r4
 80029fa:	2a38      	cmp	r2, #56	; 0x38
 80029fc:	dc56      	bgt.n	8002aac <__aeabi_dsub+0x474>
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x3cc>
 8002a02:	e0d1      	b.n	8002ba8 <__aeabi_dsub+0x570>
 8002a04:	2520      	movs	r5, #32
 8002a06:	001e      	movs	r6, r3
 8002a08:	1aad      	subs	r5, r5, r2
 8002a0a:	4664      	mov	r4, ip
 8002a0c:	40ab      	lsls	r3, r5
 8002a0e:	40ac      	lsls	r4, r5
 8002a10:	40d6      	lsrs	r6, r2
 8002a12:	1e5d      	subs	r5, r3, #1
 8002a14:	41ab      	sbcs	r3, r5
 8002a16:	4334      	orrs	r4, r6
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	4664      	mov	r4, ip
 8002a1c:	40d4      	lsrs	r4, r2
 8002a1e:	1b09      	subs	r1, r1, r4
 8002a20:	e049      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002a22:	4660      	mov	r0, ip
 8002a24:	1bdc      	subs	r4, r3, r7
 8002a26:	1a46      	subs	r6, r0, r1
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	4180      	sbcs	r0, r0
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	4681      	mov	r9, r0
 8002a30:	0030      	movs	r0, r6
 8002a32:	464e      	mov	r6, r9
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	4681      	mov	r9, r0
 8002a38:	0200      	lsls	r0, r0, #8
 8002a3a:	d476      	bmi.n	8002b2a <__aeabi_dsub+0x4f2>
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	d000      	beq.n	8002a44 <__aeabi_dsub+0x40c>
 8002a42:	e652      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002a44:	2400      	movs	r4, #0
 8002a46:	2500      	movs	r5, #0
 8002a48:	e771      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002a4a:	4339      	orrs	r1, r7
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	1e62      	subs	r2, r4, #1
 8002a50:	4194      	sbcs	r4, r2
 8002a52:	18e4      	adds	r4, r4, r3
 8002a54:	429c      	cmp	r4, r3
 8002a56:	419b      	sbcs	r3, r3
 8002a58:	425b      	negs	r3, r3
 8002a5a:	4463      	add	r3, ip
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	464b      	mov	r3, r9
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	d400      	bmi.n	8002a66 <__aeabi_dsub+0x42e>
 8002a64:	e756      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002a66:	2301      	movs	r3, #1
 8002a68:	469c      	mov	ip, r3
 8002a6a:	4ba8      	ldr	r3, [pc, #672]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002a6c:	44e0      	add	r8, ip
 8002a6e:	4598      	cmp	r8, r3
 8002a70:	d038      	beq.n	8002ae4 <__aeabi_dsub+0x4ac>
 8002a72:	464b      	mov	r3, r9
 8002a74:	48a6      	ldr	r0, [pc, #664]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	4003      	ands	r3, r0
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	0863      	lsrs	r3, r4, #1
 8002a7e:	4014      	ands	r4, r2
 8002a80:	431c      	orrs	r4, r3
 8002a82:	07c3      	lsls	r3, r0, #31
 8002a84:	431c      	orrs	r4, r3
 8002a86:	0843      	lsrs	r3, r0, #1
 8002a88:	4699      	mov	r9, r3
 8002a8a:	e657      	b.n	800273c <__aeabi_dsub+0x104>
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	000e      	movs	r6, r1
 8002a90:	3820      	subs	r0, #32
 8002a92:	40c6      	lsrs	r6, r0
 8002a94:	2a20      	cmp	r2, #32
 8002a96:	d004      	beq.n	8002aa2 <__aeabi_dsub+0x46a>
 8002a98:	2040      	movs	r0, #64	; 0x40
 8002a9a:	1a82      	subs	r2, r0, r2
 8002a9c:	4091      	lsls	r1, r2
 8002a9e:	430f      	orrs	r7, r1
 8002aa0:	46b9      	mov	r9, r7
 8002aa2:	464f      	mov	r7, r9
 8002aa4:	1e7a      	subs	r2, r7, #1
 8002aa6:	4197      	sbcs	r7, r2
 8002aa8:	4337      	orrs	r7, r6
 8002aaa:	e60f      	b.n	80026cc <__aeabi_dsub+0x94>
 8002aac:	4662      	mov	r2, ip
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	1afc      	subs	r4, r7, r3
 8002ab8:	42a7      	cmp	r7, r4
 8002aba:	41bf      	sbcs	r7, r7
 8002abc:	427f      	negs	r7, r7
 8002abe:	1bcb      	subs	r3, r1, r7
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	465d      	mov	r5, fp
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	e608      	b.n	80026da <__aeabi_dsub+0xa2>
 8002ac8:	4666      	mov	r6, ip
 8002aca:	431e      	orrs	r6, r3
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x498>
 8002ace:	e0be      	b.n	8002c4e <__aeabi_dsub+0x616>
 8002ad0:	1e56      	subs	r6, r2, #1
 8002ad2:	2a01      	cmp	r2, #1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x4a0>
 8002ad6:	e109      	b.n	8002cec <__aeabi_dsub+0x6b4>
 8002ad8:	4c8c      	ldr	r4, [pc, #560]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x4a8>
 8002ade:	e119      	b.n	8002d14 <__aeabi_dsub+0x6dc>
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	e6c1      	b.n	8002868 <__aeabi_dsub+0x230>
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e648      	b.n	800277e <__aeabi_dsub+0x146>
 8002aec:	2020      	movs	r0, #32
 8002aee:	000c      	movs	r4, r1
 8002af0:	1a80      	subs	r0, r0, r2
 8002af2:	003e      	movs	r6, r7
 8002af4:	4087      	lsls	r7, r0
 8002af6:	4084      	lsls	r4, r0
 8002af8:	40d6      	lsrs	r6, r2
 8002afa:	1e78      	subs	r0, r7, #1
 8002afc:	4187      	sbcs	r7, r0
 8002afe:	40d1      	lsrs	r1, r2
 8002b00:	4334      	orrs	r4, r6
 8002b02:	433c      	orrs	r4, r7
 8002b04:	448c      	add	ip, r1
 8002b06:	e7a4      	b.n	8002a52 <__aeabi_dsub+0x41a>
 8002b08:	4a80      	ldr	r2, [pc, #512]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x4d8>
 8002b0e:	e0e9      	b.n	8002ce4 <__aeabi_dsub+0x6ac>
 8002b10:	19df      	adds	r7, r3, r7
 8002b12:	429f      	cmp	r7, r3
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	4461      	add	r1, ip
 8002b18:	425b      	negs	r3, r3
 8002b1a:	18c9      	adds	r1, r1, r3
 8002b1c:	07cc      	lsls	r4, r1, #31
 8002b1e:	087f      	lsrs	r7, r7, #1
 8002b20:	084b      	lsrs	r3, r1, #1
 8002b22:	4699      	mov	r9, r3
 8002b24:	4680      	mov	r8, r0
 8002b26:	433c      	orrs	r4, r7
 8002b28:	e6f4      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b2a:	1afc      	subs	r4, r7, r3
 8002b2c:	42a7      	cmp	r7, r4
 8002b2e:	41bf      	sbcs	r7, r7
 8002b30:	4663      	mov	r3, ip
 8002b32:	427f      	negs	r7, r7
 8002b34:	1ac9      	subs	r1, r1, r3
 8002b36:	1bcb      	subs	r3, r1, r7
 8002b38:	4699      	mov	r9, r3
 8002b3a:	465d      	mov	r5, fp
 8002b3c:	e5d5      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002b3e:	08ff      	lsrs	r7, r7, #3
 8002b40:	074b      	lsls	r3, r1, #29
 8002b42:	465d      	mov	r5, fp
 8002b44:	433b      	orrs	r3, r7
 8002b46:	08cc      	lsrs	r4, r1, #3
 8002b48:	e6ee      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002b4a:	4662      	mov	r2, ip
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_dsub+0x51a>
 8002b50:	e082      	b.n	8002c58 <__aeabi_dsub+0x620>
 8002b52:	000b      	movs	r3, r1
 8002b54:	433b      	orrs	r3, r7
 8002b56:	d11b      	bne.n	8002b90 <__aeabi_dsub+0x558>
 8002b58:	2480      	movs	r4, #128	; 0x80
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	0324      	lsls	r4, r4, #12
 8002b5e:	e6f9      	b.n	8002954 <__aeabi_dsub+0x31c>
 8002b60:	19dc      	adds	r4, r3, r7
 8002b62:	429c      	cmp	r4, r3
 8002b64:	419b      	sbcs	r3, r3
 8002b66:	4461      	add	r1, ip
 8002b68:	4689      	mov	r9, r1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	4499      	add	r9, r3
 8002b6e:	464b      	mov	r3, r9
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	d444      	bmi.n	8002bfe <__aeabi_dsub+0x5c6>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4698      	mov	r8, r3
 8002b78:	e6cc      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b7a:	1bdc      	subs	r4, r3, r7
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	42a3      	cmp	r3, r4
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	1a51      	subs	r1, r2, r1
 8002b84:	425b      	negs	r3, r3
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	4699      	mov	r9, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	e5a4      	b.n	80026da <__aeabi_dsub+0xa2>
 8002b90:	08ff      	lsrs	r7, r7, #3
 8002b92:	074b      	lsls	r3, r1, #29
 8002b94:	465d      	mov	r5, fp
 8002b96:	433b      	orrs	r3, r7
 8002b98:	08cc      	lsrs	r4, r1, #3
 8002b9a:	e6d7      	b.n	800294c <__aeabi_dsub+0x314>
 8002b9c:	4662      	mov	r2, ip
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	0014      	movs	r4, r2
 8002ba2:	1e63      	subs	r3, r4, #1
 8002ba4:	419c      	sbcs	r4, r3
 8002ba6:	e679      	b.n	800289c <__aeabi_dsub+0x264>
 8002ba8:	0015      	movs	r5, r2
 8002baa:	4664      	mov	r4, ip
 8002bac:	3d20      	subs	r5, #32
 8002bae:	40ec      	lsrs	r4, r5
 8002bb0:	46a0      	mov	r8, r4
 8002bb2:	2a20      	cmp	r2, #32
 8002bb4:	d005      	beq.n	8002bc2 <__aeabi_dsub+0x58a>
 8002bb6:	2540      	movs	r5, #64	; 0x40
 8002bb8:	4664      	mov	r4, ip
 8002bba:	1aaa      	subs	r2, r5, r2
 8002bbc:	4094      	lsls	r4, r2
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	469a      	mov	sl, r3
 8002bc2:	4654      	mov	r4, sl
 8002bc4:	1e63      	subs	r3, r4, #1
 8002bc6:	419c      	sbcs	r4, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	4323      	orrs	r3, r4
 8002bcc:	e773      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	d023      	beq.n	8002c1c <__aeabi_dsub+0x5e4>
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	433a      	orrs	r2, r7
 8002bd8:	d000      	beq.n	8002bdc <__aeabi_dsub+0x5a4>
 8002bda:	e0a0      	b.n	8002d1e <__aeabi_dsub+0x6e6>
 8002bdc:	4662      	mov	r2, ip
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	0752      	lsls	r2, r2, #29
 8002be2:	4313      	orrs	r3, r2
 8002be4:	4662      	mov	r2, ip
 8002be6:	08d4      	lsrs	r4, r2, #3
 8002be8:	e6b0      	b.n	800294c <__aeabi_dsub+0x314>
 8002bea:	000b      	movs	r3, r1
 8002bec:	433b      	orrs	r3, r7
 8002bee:	d100      	bne.n	8002bf2 <__aeabi_dsub+0x5ba>
 8002bf0:	e728      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002bf2:	08ff      	lsrs	r7, r7, #3
 8002bf4:	074b      	lsls	r3, r1, #29
 8002bf6:	465d      	mov	r5, fp
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	08cc      	lsrs	r4, r1, #3
 8002bfc:	e697      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	4698      	mov	r8, r3
 8002c02:	e736      	b.n	8002a72 <__aeabi_dsub+0x43a>
 8002c04:	1afc      	subs	r4, r7, r3
 8002c06:	42a7      	cmp	r7, r4
 8002c08:	41bf      	sbcs	r7, r7
 8002c0a:	4663      	mov	r3, ip
 8002c0c:	427f      	negs	r7, r7
 8002c0e:	1ac9      	subs	r1, r1, r3
 8002c10:	1bcb      	subs	r3, r1, r7
 8002c12:	4699      	mov	r9, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	465d      	mov	r5, fp
 8002c18:	4698      	mov	r8, r3
 8002c1a:	e55e      	b.n	80026da <__aeabi_dsub+0xa2>
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	08ff      	lsrs	r7, r7, #3
 8002c20:	433b      	orrs	r3, r7
 8002c22:	08cc      	lsrs	r4, r1, #3
 8002c24:	e692      	b.n	800294c <__aeabi_dsub+0x314>
 8002c26:	1bdc      	subs	r4, r3, r7
 8002c28:	4660      	mov	r0, ip
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	41b6      	sbcs	r6, r6
 8002c2e:	1a40      	subs	r0, r0, r1
 8002c30:	4276      	negs	r6, r6
 8002c32:	1b80      	subs	r0, r0, r6
 8002c34:	4681      	mov	r9, r0
 8002c36:	0200      	lsls	r0, r0, #8
 8002c38:	d560      	bpl.n	8002cfc <__aeabi_dsub+0x6c4>
 8002c3a:	1afc      	subs	r4, r7, r3
 8002c3c:	42a7      	cmp	r7, r4
 8002c3e:	41bf      	sbcs	r7, r7
 8002c40:	4663      	mov	r3, ip
 8002c42:	427f      	negs	r7, r7
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	1bcb      	subs	r3, r1, r7
 8002c48:	4699      	mov	r9, r3
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	e576      	b.n	800273c <__aeabi_dsub+0x104>
 8002c4e:	08ff      	lsrs	r7, r7, #3
 8002c50:	074b      	lsls	r3, r1, #29
 8002c52:	433b      	orrs	r3, r7
 8002c54:	08cc      	lsrs	r4, r1, #3
 8002c56:	e667      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002c58:	000a      	movs	r2, r1
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	433a      	orrs	r2, r7
 8002c5e:	d100      	bne.n	8002c62 <__aeabi_dsub+0x62a>
 8002c60:	e66f      	b.n	8002942 <__aeabi_dsub+0x30a>
 8002c62:	4662      	mov	r2, ip
 8002c64:	0752      	lsls	r2, r2, #29
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4662      	mov	r2, ip
 8002c6a:	08d4      	lsrs	r4, r2, #3
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	4214      	tst	r4, r2
 8002c72:	d007      	beq.n	8002c84 <__aeabi_dsub+0x64c>
 8002c74:	08c8      	lsrs	r0, r1, #3
 8002c76:	4210      	tst	r0, r2
 8002c78:	d104      	bne.n	8002c84 <__aeabi_dsub+0x64c>
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	0004      	movs	r4, r0
 8002c7e:	08fb      	lsrs	r3, r7, #3
 8002c80:	0749      	lsls	r1, r1, #29
 8002c82:	430b      	orrs	r3, r1
 8002c84:	0f5a      	lsrs	r2, r3, #29
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	0752      	lsls	r2, r2, #29
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	e65d      	b.n	800294c <__aeabi_dsub+0x314>
 8002c90:	074b      	lsls	r3, r1, #29
 8002c92:	08ff      	lsrs	r7, r7, #3
 8002c94:	433b      	orrs	r3, r7
 8002c96:	08cc      	lsrs	r4, r1, #3
 8002c98:	e649      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002c9a:	19dc      	adds	r4, r3, r7
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	419b      	sbcs	r3, r3
 8002ca0:	4461      	add	r1, ip
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	4499      	add	r9, r3
 8002ca8:	464b      	mov	r3, r9
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	d400      	bmi.n	8002cb0 <__aeabi_dsub+0x678>
 8002cae:	e631      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4691      	mov	r9, r2
 8002cba:	4698      	mov	r8, r3
 8002cbc:	e62a      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cbe:	0016      	movs	r6, r2
 8002cc0:	4664      	mov	r4, ip
 8002cc2:	3e20      	subs	r6, #32
 8002cc4:	40f4      	lsrs	r4, r6
 8002cc6:	46a0      	mov	r8, r4
 8002cc8:	2a20      	cmp	r2, #32
 8002cca:	d005      	beq.n	8002cd8 <__aeabi_dsub+0x6a0>
 8002ccc:	2640      	movs	r6, #64	; 0x40
 8002cce:	4664      	mov	r4, ip
 8002cd0:	1ab2      	subs	r2, r6, r2
 8002cd2:	4094      	lsls	r4, r2
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	469a      	mov	sl, r3
 8002cd8:	4654      	mov	r4, sl
 8002cda:	1e63      	subs	r3, r4, #1
 8002cdc:	419c      	sbcs	r4, r3
 8002cde:	4643      	mov	r3, r8
 8002ce0:	431c      	orrs	r4, r3
 8002ce2:	e5db      	b.n	800289c <__aeabi_dsub+0x264>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e548      	b.n	800277e <__aeabi_dsub+0x146>
 8002cec:	19dc      	adds	r4, r3, r7
 8002cee:	42bc      	cmp	r4, r7
 8002cf0:	41bf      	sbcs	r7, r7
 8002cf2:	4461      	add	r1, ip
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	427f      	negs	r7, r7
 8002cf8:	44b9      	add	r9, r7
 8002cfa:	e738      	b.n	8002b6e <__aeabi_dsub+0x536>
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	d100      	bne.n	8002d04 <__aeabi_dsub+0x6cc>
 8002d02:	e69f      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002d04:	e606      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	000007fe 	.word	0x000007fe
 8002d0c:	000007ff 	.word	0x000007ff
 8002d10:	ff7fffff 	.word	0xff7fffff
 8002d14:	08ff      	lsrs	r7, r7, #3
 8002d16:	074b      	lsls	r3, r1, #29
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e616      	b.n	800294c <__aeabi_dsub+0x314>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	0752      	lsls	r2, r2, #29
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4662      	mov	r2, ip
 8002d28:	08d4      	lsrs	r4, r2, #3
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0312      	lsls	r2, r2, #12
 8002d2e:	4214      	tst	r4, r2
 8002d30:	d007      	beq.n	8002d42 <__aeabi_dsub+0x70a>
 8002d32:	08c8      	lsrs	r0, r1, #3
 8002d34:	4210      	tst	r0, r2
 8002d36:	d104      	bne.n	8002d42 <__aeabi_dsub+0x70a>
 8002d38:	465d      	mov	r5, fp
 8002d3a:	0004      	movs	r4, r0
 8002d3c:	08fb      	lsrs	r3, r7, #3
 8002d3e:	0749      	lsls	r1, r1, #29
 8002d40:	430b      	orrs	r3, r1
 8002d42:	0f5a      	lsrs	r2, r3, #29
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	0752      	lsls	r2, r2, #29
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	e5fe      	b.n	800294c <__aeabi_dsub+0x314>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4a01      	ldr	r2, [pc, #4]	; (8002d58 <__aeabi_dsub+0x720>)
 8002d52:	001c      	movs	r4, r3
 8002d54:	e513      	b.n	800277e <__aeabi_dsub+0x146>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000007ff 	.word	0x000007ff

08002d5c <__aeabi_dcmpun>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	0005      	movs	r5, r0
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d62:	031c      	lsls	r4, r3, #12
 8002d64:	0016      	movs	r6, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	030a      	lsls	r2, r1, #12
 8002d6a:	0049      	lsls	r1, r1, #1
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	0d49      	lsrs	r1, r1, #21
 8002d70:	0b24      	lsrs	r4, r4, #12
 8002d72:	0d5b      	lsrs	r3, r3, #21
 8002d74:	4281      	cmp	r1, r0
 8002d76:	d008      	beq.n	8002d8a <__aeabi_dcmpun+0x2e>
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d80:	0020      	movs	r0, r4
 8002d82:	4330      	orrs	r0, r6
 8002d84:	1e43      	subs	r3, r0, #1
 8002d86:	4198      	sbcs	r0, r3
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	432a      	orrs	r2, r5
 8002d8e:	d1fb      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d90:	e7f2      	b.n	8002d78 <__aeabi_dcmpun+0x1c>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	000007ff 	.word	0x000007ff

08002d98 <__aeabi_d2iz>:
 8002d98:	000a      	movs	r2, r1
 8002d9a:	b530      	push	{r4, r5, lr}
 8002d9c:	4c13      	ldr	r4, [pc, #76]	; (8002dec <__aeabi_d2iz+0x54>)
 8002d9e:	0053      	lsls	r3, r2, #1
 8002da0:	0309      	lsls	r1, r1, #12
 8002da2:	0005      	movs	r5, r0
 8002da4:	0b09      	lsrs	r1, r1, #12
 8002da6:	2000      	movs	r0, #0
 8002da8:	0d5b      	lsrs	r3, r3, #21
 8002daa:	0fd2      	lsrs	r2, r2, #31
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	dd04      	ble.n	8002dba <__aeabi_d2iz+0x22>
 8002db0:	480f      	ldr	r0, [pc, #60]	; (8002df0 <__aeabi_d2iz+0x58>)
 8002db2:	4283      	cmp	r3, r0
 8002db4:	dd02      	ble.n	8002dbc <__aeabi_d2iz+0x24>
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_d2iz+0x5c>)
 8002db8:	18d0      	adds	r0, r2, r3
 8002dba:	bd30      	pop	{r4, r5, pc}
 8002dbc:	2080      	movs	r0, #128	; 0x80
 8002dbe:	0340      	lsls	r0, r0, #13
 8002dc0:	4301      	orrs	r1, r0
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <__aeabi_d2iz+0x60>)
 8002dc4:	1ac0      	subs	r0, r0, r3
 8002dc6:	281f      	cmp	r0, #31
 8002dc8:	dd08      	ble.n	8002ddc <__aeabi_d2iz+0x44>
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <__aeabi_d2iz+0x64>)
 8002dcc:	1ac3      	subs	r3, r0, r3
 8002dce:	40d9      	lsrs	r1, r3
 8002dd0:	000b      	movs	r3, r1
 8002dd2:	4258      	negs	r0, r3
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d1f0      	bne.n	8002dba <__aeabi_d2iz+0x22>
 8002dd8:	0018      	movs	r0, r3
 8002dda:	e7ee      	b.n	8002dba <__aeabi_d2iz+0x22>
 8002ddc:	4c08      	ldr	r4, [pc, #32]	; (8002e00 <__aeabi_d2iz+0x68>)
 8002dde:	40c5      	lsrs	r5, r0
 8002de0:	46a4      	mov	ip, r4
 8002de2:	4463      	add	r3, ip
 8002de4:	4099      	lsls	r1, r3
 8002de6:	000b      	movs	r3, r1
 8002de8:	432b      	orrs	r3, r5
 8002dea:	e7f2      	b.n	8002dd2 <__aeabi_d2iz+0x3a>
 8002dec:	000003fe 	.word	0x000003fe
 8002df0:	0000041d 	.word	0x0000041d
 8002df4:	7fffffff 	.word	0x7fffffff
 8002df8:	00000433 	.word	0x00000433
 8002dfc:	00000413 	.word	0x00000413
 8002e00:	fffffbed 	.word	0xfffffbed

08002e04 <__aeabi_i2d>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d016      	beq.n	8002e38 <__aeabi_i2d+0x34>
 8002e0a:	17c3      	asrs	r3, r0, #31
 8002e0c:	18c5      	adds	r5, r0, r3
 8002e0e:	405d      	eors	r5, r3
 8002e10:	0fc4      	lsrs	r4, r0, #31
 8002e12:	0028      	movs	r0, r5
 8002e14:	f000 f91c 	bl	8003050 <__clzsi2>
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <__aeabi_i2d+0x5c>)
 8002e1a:	1a12      	subs	r2, r2, r0
 8002e1c:	280a      	cmp	r0, #10
 8002e1e:	dc16      	bgt.n	8002e4e <__aeabi_i2d+0x4a>
 8002e20:	0003      	movs	r3, r0
 8002e22:	002e      	movs	r6, r5
 8002e24:	3315      	adds	r3, #21
 8002e26:	409e      	lsls	r6, r3
 8002e28:	230b      	movs	r3, #11
 8002e2a:	1a18      	subs	r0, r3, r0
 8002e2c:	40c5      	lsrs	r5, r0
 8002e2e:	0552      	lsls	r2, r2, #21
 8002e30:	032d      	lsls	r5, r5, #12
 8002e32:	0b2d      	lsrs	r5, r5, #12
 8002e34:	0d53      	lsrs	r3, r2, #21
 8002e36:	e003      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e38:	2400      	movs	r4, #0
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	2600      	movs	r6, #0
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	432b      	orrs	r3, r5
 8002e44:	07e4      	lsls	r4, r4, #31
 8002e46:	4323      	orrs	r3, r4
 8002e48:	0030      	movs	r0, r6
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	380b      	subs	r0, #11
 8002e50:	4085      	lsls	r5, r0
 8002e52:	0552      	lsls	r2, r2, #21
 8002e54:	032d      	lsls	r5, r5, #12
 8002e56:	2600      	movs	r6, #0
 8002e58:	0b2d      	lsrs	r5, r5, #12
 8002e5a:	0d53      	lsrs	r3, r2, #21
 8002e5c:	e7f0      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	0000041e 	.word	0x0000041e

08002e64 <__aeabi_ui2d>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	1e04      	subs	r4, r0, #0
 8002e68:	d010      	beq.n	8002e8c <__aeabi_ui2d+0x28>
 8002e6a:	f000 f8f1 	bl	8003050 <__clzsi2>
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <__aeabi_ui2d+0x48>)
 8002e70:	1a1b      	subs	r3, r3, r0
 8002e72:	280a      	cmp	r0, #10
 8002e74:	dc11      	bgt.n	8002e9a <__aeabi_ui2d+0x36>
 8002e76:	220b      	movs	r2, #11
 8002e78:	0021      	movs	r1, r4
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	40d1      	lsrs	r1, r2
 8002e7e:	3015      	adds	r0, #21
 8002e80:	030a      	lsls	r2, r1, #12
 8002e82:	055b      	lsls	r3, r3, #21
 8002e84:	4084      	lsls	r4, r0
 8002e86:	0b12      	lsrs	r2, r2, #12
 8002e88:	0d5b      	lsrs	r3, r3, #21
 8002e8a:	e001      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	051b      	lsls	r3, r3, #20
 8002e92:	4313      	orrs	r3, r2
 8002e94:	0020      	movs	r0, r4
 8002e96:	0019      	movs	r1, r3
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	0022      	movs	r2, r4
 8002e9c:	380b      	subs	r0, #11
 8002e9e:	4082      	lsls	r2, r0
 8002ea0:	055b      	lsls	r3, r3, #21
 8002ea2:	0312      	lsls	r2, r2, #12
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e7f1      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002eac:	0000041e 	.word	0x0000041e

08002eb0 <__aeabi_f2d>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	0043      	lsls	r3, r0, #1
 8002eb4:	0246      	lsls	r6, r0, #9
 8002eb6:	0fc4      	lsrs	r4, r0, #31
 8002eb8:	20fe      	movs	r0, #254	; 0xfe
 8002eba:	0e1b      	lsrs	r3, r3, #24
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	0a75      	lsrs	r5, r6, #9
 8002ec0:	4208      	tst	r0, r1
 8002ec2:	d00c      	beq.n	8002ede <__aeabi_f2d+0x2e>
 8002ec4:	22e0      	movs	r2, #224	; 0xe0
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	4694      	mov	ip, r2
 8002eca:	076d      	lsls	r5, r5, #29
 8002ecc:	0b36      	lsrs	r6, r6, #12
 8002ece:	4463      	add	r3, ip
 8002ed0:	051b      	lsls	r3, r3, #20
 8002ed2:	4333      	orrs	r3, r6
 8002ed4:	07e4      	lsls	r4, r4, #31
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	0028      	movs	r0, r5
 8002eda:	0019      	movs	r1, r3
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d114      	bne.n	8002f0c <__aeabi_f2d+0x5c>
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	d01b      	beq.n	8002f1e <__aeabi_f2d+0x6e>
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	f000 f8b2 	bl	8003050 <__clzsi2>
 8002eec:	280a      	cmp	r0, #10
 8002eee:	dc1c      	bgt.n	8002f2a <__aeabi_f2d+0x7a>
 8002ef0:	230b      	movs	r3, #11
 8002ef2:	002e      	movs	r6, r5
 8002ef4:	1a1b      	subs	r3, r3, r0
 8002ef6:	40de      	lsrs	r6, r3
 8002ef8:	0003      	movs	r3, r0
 8002efa:	3315      	adds	r3, #21
 8002efc:	409d      	lsls	r5, r3
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <__aeabi_f2d+0x88>)
 8002f00:	0336      	lsls	r6, r6, #12
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	0552      	lsls	r2, r2, #21
 8002f06:	0b36      	lsrs	r6, r6, #12
 8002f08:	0d53      	lsrs	r3, r2, #21
 8002f0a:	e7e1      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	d009      	beq.n	8002f24 <__aeabi_f2d+0x74>
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0b36      	lsrs	r6, r6, #12
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f18:	076d      	lsls	r5, r5, #29
 8002f1a:	4316      	orrs	r6, r2
 8002f1c:	e7d8      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2600      	movs	r6, #0
 8002f22:	e7d5      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f24:	2600      	movs	r6, #0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f28:	e7d2      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	3b0b      	subs	r3, #11
 8002f2e:	409d      	lsls	r5, r3
 8002f30:	002e      	movs	r6, r5
 8002f32:	2500      	movs	r5, #0
 8002f34:	e7e3      	b.n	8002efe <__aeabi_f2d+0x4e>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	00000389 	.word	0x00000389
 8002f3c:	000007ff 	.word	0x000007ff

08002f40 <__aeabi_d2f>:
 8002f40:	0002      	movs	r2, r0
 8002f42:	004b      	lsls	r3, r1, #1
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	030c      	lsls	r4, r1, #12
 8002f4a:	4e3d      	ldr	r6, [pc, #244]	; (8003040 <__aeabi_d2f+0x100>)
 8002f4c:	0a64      	lsrs	r4, r4, #9
 8002f4e:	0f40      	lsrs	r0, r0, #29
 8002f50:	1c5f      	adds	r7, r3, #1
 8002f52:	0fc9      	lsrs	r1, r1, #31
 8002f54:	4304      	orrs	r4, r0
 8002f56:	00d5      	lsls	r5, r2, #3
 8002f58:	4237      	tst	r7, r6
 8002f5a:	d00a      	beq.n	8002f72 <__aeabi_d2f+0x32>
 8002f5c:	4839      	ldr	r0, [pc, #228]	; (8003044 <__aeabi_d2f+0x104>)
 8002f5e:	181e      	adds	r6, r3, r0
 8002f60:	2efe      	cmp	r6, #254	; 0xfe
 8002f62:	dd16      	ble.n	8002f92 <__aeabi_d2f+0x52>
 8002f64:	20ff      	movs	r0, #255	; 0xff
 8002f66:	2400      	movs	r4, #0
 8002f68:	05c0      	lsls	r0, r0, #23
 8002f6a:	4320      	orrs	r0, r4
 8002f6c:	07c9      	lsls	r1, r1, #31
 8002f6e:	4308      	orrs	r0, r1
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <__aeabi_d2f+0x44>
 8002f76:	432c      	orrs	r4, r5
 8002f78:	d026      	beq.n	8002fc8 <__aeabi_d2f+0x88>
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	0192      	lsls	r2, r2, #6
 8002f7e:	0a54      	lsrs	r4, r2, #9
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	e7f1      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f84:	4325      	orrs	r5, r4
 8002f86:	d0ed      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002f88:	2080      	movs	r0, #128	; 0x80
 8002f8a:	03c0      	lsls	r0, r0, #15
 8002f8c:	4304      	orrs	r4, r0
 8002f8e:	20ff      	movs	r0, #255	; 0xff
 8002f90:	e7ea      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f92:	2e00      	cmp	r6, #0
 8002f94:	dd1b      	ble.n	8002fce <__aeabi_d2f+0x8e>
 8002f96:	0192      	lsls	r2, r2, #6
 8002f98:	1e53      	subs	r3, r2, #1
 8002f9a:	419a      	sbcs	r2, r3
 8002f9c:	00e4      	lsls	r4, r4, #3
 8002f9e:	0f6d      	lsrs	r5, r5, #29
 8002fa0:	4322      	orrs	r2, r4
 8002fa2:	432a      	orrs	r2, r5
 8002fa4:	0753      	lsls	r3, r2, #29
 8002fa6:	d048      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fa8:	230f      	movs	r3, #15
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d000      	beq.n	8002fb2 <__aeabi_d2f+0x72>
 8002fb0:	3204      	adds	r2, #4
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	04db      	lsls	r3, r3, #19
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d03f      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fba:	1c70      	adds	r0, r6, #1
 8002fbc:	2efe      	cmp	r6, #254	; 0xfe
 8002fbe:	d0d1      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002fc0:	0192      	lsls	r2, r2, #6
 8002fc2:	0a54      	lsrs	r4, r2, #9
 8002fc4:	b2c0      	uxtb	r0, r0
 8002fc6:	e7cf      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e7cc      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fce:	0032      	movs	r2, r6
 8002fd0:	3217      	adds	r2, #23
 8002fd2:	db22      	blt.n	800301a <__aeabi_d2f+0xda>
 8002fd4:	2080      	movs	r0, #128	; 0x80
 8002fd6:	0400      	lsls	r0, r0, #16
 8002fd8:	4320      	orrs	r0, r4
 8002fda:	241e      	movs	r4, #30
 8002fdc:	1ba4      	subs	r4, r4, r6
 8002fde:	2c1f      	cmp	r4, #31
 8002fe0:	dd1d      	ble.n	800301e <__aeabi_d2f+0xde>
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	1b96      	subs	r6, r2, r6
 8002fe8:	0002      	movs	r2, r0
 8002fea:	40f2      	lsrs	r2, r6
 8002fec:	0016      	movs	r6, r2
 8002fee:	2c20      	cmp	r4, #32
 8002ff0:	d004      	beq.n	8002ffc <__aeabi_d2f+0xbc>
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <__aeabi_d2f+0x108>)
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	4463      	add	r3, ip
 8002ff8:	4098      	lsls	r0, r3
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	002a      	movs	r2, r5
 8002ffe:	1e53      	subs	r3, r2, #1
 8003000:	419a      	sbcs	r2, r3
 8003002:	4332      	orrs	r2, r6
 8003004:	2600      	movs	r6, #0
 8003006:	0753      	lsls	r3, r2, #29
 8003008:	d1ce      	bne.n	8002fa8 <__aeabi_d2f+0x68>
 800300a:	2480      	movs	r4, #128	; 0x80
 800300c:	0013      	movs	r3, r2
 800300e:	04e4      	lsls	r4, r4, #19
 8003010:	2001      	movs	r0, #1
 8003012:	4023      	ands	r3, r4
 8003014:	4222      	tst	r2, r4
 8003016:	d1d3      	bne.n	8002fc0 <__aeabi_d2f+0x80>
 8003018:	e7b0      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800301a:	2300      	movs	r3, #0
 800301c:	e7ad      	b.n	8002f7a <__aeabi_d2f+0x3a>
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <__aeabi_d2f+0x10c>)
 8003020:	4694      	mov	ip, r2
 8003022:	002a      	movs	r2, r5
 8003024:	40e2      	lsrs	r2, r4
 8003026:	0014      	movs	r4, r2
 8003028:	002a      	movs	r2, r5
 800302a:	4463      	add	r3, ip
 800302c:	409a      	lsls	r2, r3
 800302e:	4098      	lsls	r0, r3
 8003030:	1e55      	subs	r5, r2, #1
 8003032:	41aa      	sbcs	r2, r5
 8003034:	4302      	orrs	r2, r0
 8003036:	4322      	orrs	r2, r4
 8003038:	e7e4      	b.n	8003004 <__aeabi_d2f+0xc4>
 800303a:	0033      	movs	r3, r6
 800303c:	e79e      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007fe 	.word	0x000007fe
 8003044:	fffffc80 	.word	0xfffffc80
 8003048:	fffffca2 	.word	0xfffffca2
 800304c:	fffffc82 	.word	0xfffffc82

08003050 <__clzsi2>:
 8003050:	211c      	movs	r1, #28
 8003052:	2301      	movs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	4298      	cmp	r0, r3
 8003058:	d301      	bcc.n	800305e <__clzsi2+0xe>
 800305a:	0c00      	lsrs	r0, r0, #16
 800305c:	3910      	subs	r1, #16
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	4298      	cmp	r0, r3
 8003062:	d301      	bcc.n	8003068 <__clzsi2+0x18>
 8003064:	0a00      	lsrs	r0, r0, #8
 8003066:	3908      	subs	r1, #8
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	4298      	cmp	r0, r3
 800306c:	d301      	bcc.n	8003072 <__clzsi2+0x22>
 800306e:	0900      	lsrs	r0, r0, #4
 8003070:	3904      	subs	r1, #4
 8003072:	a202      	add	r2, pc, #8	; (adr r2, 800307c <__clzsi2+0x2c>)
 8003074:	5c10      	ldrb	r0, [r2, r0]
 8003076:	1840      	adds	r0, r0, r1
 8003078:	4770      	bx	lr
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	02020304 	.word	0x02020304
 8003080:	01010101 	.word	0x01010101
	...

0800308c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	0018      	movs	r0, r3
 8003096:	230c      	movs	r3, #12
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f011 fce1 	bl	8014a62 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <MX_ADC1_Init+0xf8>)
 80030a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80030a6:	4b36      	ldr	r3, [pc, #216]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	0392      	lsls	r2, r2, #14
 80030ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0392      	lsls	r2, r2, #14
 80030c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030c4:	2208      	movs	r2, #8
 80030c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030dc:	2202      	movs	r2, #2
 80030de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030e2:	2220      	movs	r2, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f6:	222c      	movs	r2, #44	; 0x2c
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003104:	2205      	movs	r2, #5
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <MX_ADC1_Init+0xf4>)
 800310a:	2205      	movs	r2, #5
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003110:	223c      	movs	r2, #60	; 0x3c
 8003112:	2100      	movs	r1, #0
 8003114:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003118:	2200      	movs	r2, #0
 800311a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <MX_ADC1_Init+0xf4>)
 800311e:	0018      	movs	r0, r3
 8003120:	f002 faa0 	bl	8005664 <HAL_ADC_Init>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003128:	f000 fc08 	bl	800393c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <MX_ADC1_Init+0xfc>)
 8003130:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800313e:	1d3a      	adds	r2, r7, #4
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f002 fe65 	bl	8005e14 <HAL_ADC_ConfigChannel>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d001      	beq.n	8003152 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800314e:	f000 fbf5 	bl	800393c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2204      	movs	r2, #4
 8003156:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003158:	1d3a      	adds	r2, r7, #4
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_ADC1_Init+0xf4>)
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f002 fe58 	bl	8005e14 <HAL_ADC_ConfigChannel>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8003168:	f000 fbe8 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <MX_ADC1_Init+0x100>)
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003170:	2202      	movs	r2, #2
 8003172:	0018      	movs	r0, r3
 8003174:	f002 fc1e 	bl	80059b4 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200032c4 	.word	0x200032c4
 8003184:	40012400 	.word	0x40012400
 8003188:	20000100 	.word	0x20000100
 800318c:	20003b70 	.word	0x20003b70

08003190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b091      	sub	sp, #68	; 0x44
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	232c      	movs	r3, #44	; 0x2c
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f011 fc5d 	bl	8014a62 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	2410      	movs	r4, #16
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	0018      	movs	r0, r3
 80031ae:	231c      	movs	r3, #28
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f011 fc55 	bl	8014a62 <memset>
  if(adcHandle->Instance==ADC1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a39      	ldr	r2, [pc, #228]	; (80032a4 <HAL_ADC_MspInit+0x114>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d16b      	bne.n	800329a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	01d2      	lsls	r2, r2, #7
 80031c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	f004 fc74 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d001      	beq.n	80031e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031dc:	f000 fbae 	bl	800393c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0349      	lsls	r1, r1, #13
 80031ea:	430a      	orrs	r2, r1
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 8003202:	2102      	movs	r1, #2
 8003204:	430a      	orrs	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	; 0x34
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_CH0_temp1_Pin|ADC1_CH1_temp2_Pin;
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2203      	movs	r2, #3
 800321a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2203      	movs	r2, #3
 8003220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	187b      	adds	r3, r7, r1
 800322a:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_ADC_MspInit+0x11c>)
 800322c:	0019      	movs	r1, r3
 800322e:	0010      	movs	r0, r2
 8003230:	f003 fda2 	bl	8006d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_ADC_MspInit+0x124>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800323c:	2205      	movs	r2, #5
 800323e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	0052      	lsls	r2, r2, #1
 8003258:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	00d2      	lsls	r2, r2, #3
 8003260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003264:	2200      	movs	r2, #0
 8003266:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003270:	0018      	movs	r0, r3
 8003272:	f003 fa59 	bl	8006728 <HAL_DMA_Init>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800327a:	f000 fb5f 	bl	800393c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	200c      	movs	r0, #12
 8003290:	f003 fa18 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003294:	200c      	movs	r0, #12
 8003296:	f003 fa2a 	bl	80066ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b011      	add	sp, #68	; 0x44
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40012400 	.word	0x40012400
 80032a8:	40021000 	.word	0x40021000
 80032ac:	50000400 	.word	0x50000400
 80032b0:	20003328 	.word	0x20003328
 80032b4:	40020030 	.word	0x40020030

080032b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_DMA_Init+0x58>)
 80032c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_DMA_Init+0x58>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_DMA_Init+0x58>)
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	2009      	movs	r0, #9
 80032dc:	f003 f9f2 	bl	80066c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032e0:	2009      	movs	r0, #9
 80032e2:	f003 fa04 	bl	80066ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	200a      	movs	r0, #10
 80032ec:	f003 f9ea 	bl	80066c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80032f0:	200a      	movs	r0, #10
 80032f2:	f003 f9fc 	bl	80066ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	200b      	movs	r0, #11
 80032fc:	f003 f9e2 	bl	80066c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8003300:	200b      	movs	r0, #11
 8003302:	f003 f9f4 	bl	80066ee <HAL_NVIC_EnableIRQ>

}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b002      	add	sp, #8
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40021000 	.word	0x40021000

08003314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b08b      	sub	sp, #44	; 0x2c
 8003318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	2414      	movs	r4, #20
 800331c:	193b      	adds	r3, r7, r4
 800331e:	0018      	movs	r0, r3
 8003320:	2314      	movs	r3, #20
 8003322:	001a      	movs	r2, r3
 8003324:	2100      	movs	r1, #0
 8003326:	f011 fb9c 	bl	8014a62 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <MX_GPIO_Init+0x15c>)
 800332c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003330:	2104      	movs	r1, #4
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2204      	movs	r2, #4
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003342:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003348:	2120      	movs	r1, #32
 800334a:	430a      	orrs	r2, r1
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
 800334e:	4b48      	ldr	r3, [pc, #288]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b45      	ldr	r3, [pc, #276]	; (8003470 <MX_GPIO_Init+0x15c>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003360:	2101      	movs	r1, #1
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
 8003366:	4b42      	ldr	r3, [pc, #264]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003378:	2102      	movs	r1, #2
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <MX_GPIO_Init+0x15c>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003390:	2108      	movs	r1, #8
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2208      	movs	r2, #8
 800339c:	4013      	ands	r3, r2
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <MX_GPIO_Init+0x160>)
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <MX_GPIO_Init+0x164>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	0018      	movs	r0, r3
 80033aa:	f003 fe66 	bl	800707a <HAL_GPIO_WritePin>
                          |softstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin, GPIO_PIN_SET);
 80033ae:	4933      	ldr	r1, [pc, #204]	; (800347c <MX_GPIO_Init+0x168>)
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <MX_GPIO_Init+0x164>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	0018      	movs	r0, r3
 80033b6:	f003 fe60 	bl	800707a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <MX_GPIO_Init+0x160>)
 80033be:	601a      	str	r2, [r3, #0]
                          |softstart_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	2201      	movs	r2, #1
 80033c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <MX_GPIO_Init+0x164>)
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f003 fccd 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin;
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <MX_GPIO_Init+0x168>)
 80033e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	2201      	movs	r2, #1
 80033e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	2201      	movs	r2, #1
 80033ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <MX_GPIO_Init+0x164>)
 80033fa:	0019      	movs	r1, r3
 80033fc:	0010      	movs	r0, r2
 80033fe:	f003 fcbb 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTP1_Pin|OTP2_Pin;
 8003402:	0021      	movs	r1, r4
 8003404:	187b      	adds	r3, r7, r1
 8003406:	22c0      	movs	r2, #192	; 0xc0
 8003408:	0152      	lsls	r2, r2, #5
 800340a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340c:	000c      	movs	r4, r1
 800340e:	193b      	adds	r3, r7, r4
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	193b      	adds	r3, r7, r4
 8003416:	2201      	movs	r2, #1
 8003418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	193b      	adds	r3, r7, r4
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <MX_GPIO_Init+0x16c>)
 800341e:	0019      	movs	r1, r3
 8003420:	0010      	movs	r0, r2
 8003422:	f003 fca9 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_enter_Pin;
 8003426:	193b      	adds	r3, r7, r4
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	0052      	lsls	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800342e:	193b      	adds	r3, r7, r4
 8003430:	2284      	movs	r2, #132	; 0x84
 8003432:	0392      	lsls	r2, r2, #14
 8003434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003436:	193b      	adds	r3, r7, r4
 8003438:	2201      	movs	r2, #1
 800343a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_enter_GPIO_Port, &GPIO_InitStruct);
 800343c:	193a      	adds	r2, r7, r4
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f003 fc97 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = X1_Pin|X2_Pin|X1D2_Pin|X4_Pin
 800344a:	193b      	adds	r3, r7, r4
 800344c:	227f      	movs	r2, #127	; 0x7f
 800344e:	601a      	str	r2, [r3, #0]
                          |X5_Pin|X6_Pin|X7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003456:	193b      	adds	r3, r7, r4
 8003458:	2201      	movs	r2, #1
 800345a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800345c:	193b      	adds	r3, r7, r4
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <MX_GPIO_Init+0x170>)
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f003 fc88 	bl	8006d78 <HAL_GPIO_Init>

}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b00b      	add	sp, #44	; 0x2c
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	00001027 	.word	0x00001027
 8003478:	50000800 	.word	0x50000800
 800347c:	0000e008 	.word	0x0000e008
 8003480:	50000400 	.word	0x50000400
 8003484:	50000c00 	.word	0x50000c00

08003488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800348c:	f001 feca 	bl	8005224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003490:	f000 f827 	bl	80034e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003494:	f7ff ff3e 	bl	8003314 <MX_GPIO_Init>
  MX_DMA_Init();
 8003498:	f7ff ff0e 	bl	80032b8 <MX_DMA_Init>
  MX_SPI1_Init();
 800349c:	f000 fa54 	bl	8003948 <MX_SPI1_Init>
  MX_TIM3_Init();
 80034a0:	f000 fd44 	bl	8003f2c <MX_TIM3_Init>
  MX_TIM6_Init();
 80034a4:	f000 fda8 	bl	8003ff8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80034a8:	f000 fde8 	bl	800407c <MX_TIM7_Init>
  MX_TIM15_Init();
 80034ac:	f000 fe54 	bl	8004158 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80034b0:	f001 fb12 	bl	8004ad8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80034b4:	f001 fb62 	bl	8004b7c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80034b8:	f7ff fde8 	bl	800308c <MX_ADC1_Init>
  MX_TIM16_Init();
 80034bc:	f000 ff26 	bl	800430c <MX_TIM16_Init>
  MX_TIM17_Init();
 80034c0:	f000 ff70 	bl	80043a4 <MX_TIM17_Init>
  MX_TIM14_Init();
 80034c4:	f000 fe1e 	bl	8004104 <MX_TIM14_Init>
  MX_TIM1_Init();
 80034c8:	f000 fcb2 	bl	8003e30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80034cc:	f001 fab6 	bl	8004a3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  My_sys_Init();
 80034d0:	f000 f85c 	bl	800358c <My_sys_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/*encoder&Cursor&key*/
	IT_handle();
 80034d4:	f000 f8fc 	bl	80036d0 <IT_handle>
	/*LCD update*/
	Display_Interface();
 80034d8:	f011 f9c2 	bl	8014860 <Display_Interface>

	Check_Error();
 80034dc:	f00e fa96 	bl	8011a0c <Check_Error>
	IT_handle();
 80034e0:	e7f8      	b.n	80034d4 <main+0x4c>

080034e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034e2:	b590      	push	{r4, r7, lr}
 80034e4:	b093      	sub	sp, #76	; 0x4c
 80034e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034e8:	2414      	movs	r4, #20
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	0018      	movs	r0, r3
 80034ee:	2334      	movs	r3, #52	; 0x34
 80034f0:	001a      	movs	r2, r3
 80034f2:	2100      	movs	r1, #0
 80034f4:	f011 fab5 	bl	8014a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	0018      	movs	r0, r3
 80034fc:	2310      	movs	r3, #16
 80034fe:	001a      	movs	r2, r3
 8003500:	2100      	movs	r1, #0
 8003502:	f011 faae 	bl	8014a62 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	0018      	movs	r0, r3
 800350c:	f003 fdd2 	bl	80070b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003510:	193b      	adds	r3, r7, r4
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	0252      	lsls	r2, r2, #9
 800351c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800351e:	0021      	movs	r1, r4
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2202      	movs	r2, #2
 8003524:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2203      	movs	r2, #3
 800352a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2210      	movs	r2, #16
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2210      	movs	r2, #16
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	0292      	lsls	r2, r2, #10
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8003540:	187b      	adds	r3, r7, r1
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	05d2      	lsls	r2, r2, #23
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003548:	187b      	adds	r3, r7, r1
 800354a:	0018      	movs	r0, r3
 800354c:	f003 fdfe 	bl	800714c <HAL_RCC_OscConfig>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003554:	f000 f9f2 	bl	800393c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	2207      	movs	r2, #7
 800355c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	2202      	movs	r2, #2
 8003562:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	01d2      	lsls	r2, r2, #7
 8003570:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2102      	movs	r1, #2
 8003576:	0018      	movs	r0, r3
 8003578:	f004 f8f8 	bl	800776c <HAL_RCC_ClockConfig>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003580:	f000 f9dc 	bl	800393c <Error_Handler>
  }
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b013      	add	sp, #76	; 0x4c
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <My_sys_Init>:

/* USER CODE BEGIN 4 */
void My_sys_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
	Flag.ADC1_IT=0;
 8003592:	4b42      	ldr	r3, [pc, #264]	; (800369c <My_sys_Init+0x110>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
	Flag.TIM7_IT=0;
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <My_sys_Init+0x110>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
	Flag.TIM3_IT=0;
 800359e:	4b3f      	ldr	r3, [pc, #252]	; (800369c <My_sys_Init+0x110>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
	Flag.TIM6_IT=0;
 80035a4:	4b3d      	ldr	r3, [pc, #244]	; (800369c <My_sys_Init+0x110>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
	Flag.TIM7_IT=0;
 80035aa:	4b3c      	ldr	r3, [pc, #240]	; (800369c <My_sys_Init+0x110>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
	Flag.TIM17_IT=0;
 80035b0:	4b3a      	ldr	r3, [pc, #232]	; (800369c <My_sys_Init+0x110>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
	Flag.ERROR_Flag=0;
 80035b6:	4b39      	ldr	r3, [pc, #228]	; (800369c <My_sys_Init+0x110>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
	Flag.Encoder_BF=0;
 80035bc:	4b37      	ldr	r3, [pc, #220]	; (800369c <My_sys_Init+0x110>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
	Flag.Current_error=3;
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <My_sys_Init+0x110>)
 80035c4:	2203      	movs	r2, #3
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
	/*main interface*/
	xyz.coordinates1=0;
 80035c8:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <My_sys_Init+0x114>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
	xyz.coordinates2=0;
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <My_sys_Init+0x114>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
	xyz.coordinates3=0;
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <My_sys_Init+0x114>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
	/*power off till soft start*/
	Power_AC_Off;
 80035da:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <My_sys_Init+0x118>)
 80035dc:	2200      	movs	r2, #0
 80035de:	2120      	movs	r1, #32
 80035e0:	0018      	movs	r0, r3
 80035e2:	f003 fd4a 	bl	800707a <HAL_GPIO_WritePin>
	/*Disable the key at first*/
	keys_EN = DISABLE;
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <My_sys_Init+0x11c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
	//PD0 PD2 key scan init
	SYSCFG_TypeDef  *SYScfg=SYSCFG;
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <My_sys_Init+0x120>)
 80035ee:	607b      	str	r3, [r7, #4]
	SYScfg->CFGR1|=(SYSCFG_CFGR1_UCPD2_STROBE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	00d2      	lsls	r2, r2, #3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
	//PA8
	SYSCFG_TypeDef  *SYScfg1=SYSCFG;
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <My_sys_Init+0x120>)
 8003600:	603b      	str	r3, [r7, #0]
	SYScfg1->CFGR1|=(SYSCFG_CFGR1_UCPD1_STROBE);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	0092      	lsls	r2, r2, #2
 800360a:	431a      	orrs	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	601a      	str	r2, [r3, #0]
	/*other device init*/
	AT_25_init();
 8003610:	f008 fce2 	bl	800bfd8 <AT_25_init>
	AT25_Reset();
 8003614:	f009 f8ca 	bl	800c7ac <AT25_Reset>
	AT25_load_AD_Param();
 8003618:	f009 f86a 	bl	800c6f0 <AT25_load_AD_Param>
	OLED_Init();
 800361c:	f00e fc4c 	bl	8011eb8 <OLED_Init>
	/*Cursor off*/
	__HAL_TIM_DISABLE(&htim6);
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <My_sys_Init+0x124>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <My_sys_Init+0x128>)
 8003628:	4013      	ands	r3, r2
 800362a:	d10d      	bne.n	8003648 <My_sys_Init+0xbc>
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <My_sys_Init+0x124>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <My_sys_Init+0x12c>)
 8003634:	4013      	ands	r3, r2
 8003636:	d107      	bne.n	8003648 <My_sys_Init+0xbc>
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <My_sys_Init+0x124>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <My_sys_Init+0x124>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	438a      	bics	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
	/*check temperature*/
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 8003648:	491c      	ldr	r1, [pc, #112]	; (80036bc <My_sys_Init+0x130>)
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <My_sys_Init+0x134>)
 800364c:	2202      	movs	r2, #2
 800364e:	0018      	movs	r0, r3
 8003650:	f002 f9b0 	bl	80059b4 <HAL_ADC_Start_DMA>
	/*start to communicate with mini board*/
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <My_sys_Init+0x138>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <My_sys_Init+0x138>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2110      	movs	r1, #16
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
	UART_Start_Receive_DMA(&huart2,Uart2_Receive_buffer,9);
 8003664:	4918      	ldr	r1, [pc, #96]	; (80036c8 <My_sys_Init+0x13c>)
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <My_sys_Init+0x138>)
 8003668:	2209      	movs	r2, #9
 800366a:	0018      	movs	r0, r3
 800366c:	f007 fedc 	bl	800b428 <UART_Start_Receive_DMA>
	__HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <My_sys_Init+0x138>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2210      	movs	r2, #16
 8003676:	621a      	str	r2, [r3, #32]
	/*Delay on soft start*/
	DAC_Cmd_send(1,11,0);
 8003678:	2200      	movs	r2, #0
 800367a:	210b      	movs	r1, #11
 800367c:	2001      	movs	r0, #1
 800367e:	f009 f95b 	bl	800c938 <DAC_Cmd_send>
	/*all device initialize soft start timer on，power on*/
	HAL_TIM_Base_Start_IT(&htim1);
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <My_sys_Init+0x140>)
 8003684:	0018      	movs	r0, r3
 8003686:	f005 faf7 	bl	8008c78 <HAL_TIM_Base_Start_IT>
	/*loop mode*/
	DAC_Cmd_send(1,2,0);
 800368a:	2200      	movs	r2, #0
 800368c:	2102      	movs	r1, #2
 800368e:	2001      	movs	r0, #1
 8003690:	f009 f952 	bl	800c938 <DAC_Cmd_send>

}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20003384 	.word	0x20003384
 80036a0:	20003b8c 	.word	0x20003b8c
 80036a4:	50000800 	.word	0x50000800
 80036a8:	20003b19 	.word	0x20003b19
 80036ac:	40010000 	.word	0x40010000
 80036b0:	200034c8 	.word	0x200034c8
 80036b4:	00001111 	.word	0x00001111
 80036b8:	00000444 	.word	0x00000444
 80036bc:	20003b70 	.word	0x20003b70
 80036c0:	200032c4 	.word	0x200032c4
 80036c4:	20003740 	.word	0x20003740
 80036c8:	200036a0 	.word	0x200036a0
 80036cc:	20003430 	.word	0x20003430

080036d0 <IT_handle>:
/**
  * @brief
  * @retval None
  */
void IT_handle(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0

		if(Flag.TIM3_IT==1)
 80036d4:	4b81      	ldr	r3, [pc, #516]	; (80038dc <IT_handle+0x20c>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d104      	bne.n	80036e6 <IT_handle+0x16>
		{
			Encoder_Data_refresh();
 80036dc:	f00a fdf0 	bl	800e2c0 <Encoder_Data_refresh>
			Flag.Encoder_BF=0;
 80036e0:	4b7e      	ldr	r3, [pc, #504]	; (80038dc <IT_handle+0x20c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	61da      	str	r2, [r3, #28]
		}
		/*key scan 100Hz*/
		if(Flag.TIM7_IT==1)
 80036e6:	4b7d      	ldr	r3, [pc, #500]	; (80038dc <IT_handle+0x20c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d111      	bne.n	8003712 <IT_handle+0x42>
		{
			Flag.TIM7_IT=0;
 80036ee:	4b7b      	ldr	r3, [pc, #492]	; (80038dc <IT_handle+0x20c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	605a      	str	r2, [r3, #4]
			KEY_Handle();
 80036f4:	f00e f8a2 	bl	801183c <KEY_Handle>
			/*sleep*/
			if(COUNT_ESC==2)
 80036f8:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <IT_handle+0x210>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d108      	bne.n	8003712 <IT_handle+0x42>
			{
				COUNT_ESC=0;
 8003700:	4b77      	ldr	r3, [pc, #476]	; (80038e0 <IT_handle+0x210>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
				Sleep_ON_OFF = ~Sleep_ON_OFF;
 8003706:	4b77      	ldr	r3, [pc, #476]	; (80038e4 <IT_handle+0x214>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	43db      	mvns	r3, r3
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b75      	ldr	r3, [pc, #468]	; (80038e4 <IT_handle+0x214>)
 8003710:	701a      	strb	r2, [r3, #0]
			}

		}
		/*Cursor flash*/
		if(Flag.TIM6_IT==1)
 8003712:	4b72      	ldr	r3, [pc, #456]	; (80038dc <IT_handle+0x20c>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d104      	bne.n	8003724 <IT_handle+0x54>
		{
			Flag.TIM6_IT=0;
 800371a:	4b70      	ldr	r3, [pc, #448]	; (80038dc <IT_handle+0x20c>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
			Cursor_flash();
 8003720:	f010 ff7e 	bl	8014620 <Cursor_flash>

		}
		if(Flag.ADC1_IT==1)
 8003724:	4b6d      	ldr	r3, [pc, #436]	; (80038dc <IT_handle+0x20c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d000      	beq.n	800372e <IT_handle+0x5e>
 800372c:	e0cb      	b.n	80038c6 <IT_handle+0x1f6>
		{
			Flag.ADC1_IT=0;
 800372e:	4b6b      	ldr	r3, [pc, #428]	; (80038dc <IT_handle+0x20c>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
			static float R1,R2,T;
			static uint16_t Voltage_Temperature[2];

			Voltage_Temperature[0]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[0],ADC_RESOLUTION_12B);//mv
 8003734:	4b6c      	ldr	r3, [pc, #432]	; (80038e8 <IT_handle+0x218>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	001a      	movs	r2, r3
 800373a:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <IT_handle+0x21c>)
 800373c:	4353      	muls	r3, r2
 800373e:	496c      	ldr	r1, [pc, #432]	; (80038f0 <IT_handle+0x220>)
 8003740:	0018      	movs	r0, r3
 8003742:	f7fc fd03 	bl	800014c <__udivsi3>
 8003746:	0003      	movs	r3, r0
 8003748:	b29a      	uxth	r2, r3
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <IT_handle+0x224>)
 800374c:	801a      	strh	r2, [r3, #0]
			Voltage_Temperature[1]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[1],ADC_RESOLUTION_12B);//mv
 800374e:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <IT_handle+0x218>)
 8003750:	885b      	ldrh	r3, [r3, #2]
 8003752:	001a      	movs	r2, r3
 8003754:	4b65      	ldr	r3, [pc, #404]	; (80038ec <IT_handle+0x21c>)
 8003756:	4353      	muls	r3, r2
 8003758:	4965      	ldr	r1, [pc, #404]	; (80038f0 <IT_handle+0x220>)
 800375a:	0018      	movs	r0, r3
 800375c:	f7fc fcf6 	bl	800014c <__udivsi3>
 8003760:	0003      	movs	r3, r0
 8003762:	b29a      	uxth	r2, r3
 8003764:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <IT_handle+0x224>)
 8003766:	805a      	strh	r2, [r3, #2]

			R1=Voltage_Temperature[0]/(Voltage_Temperature[0]-2970);
 8003768:	4b62      	ldr	r3, [pc, #392]	; (80038f4 <IT_handle+0x224>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	001a      	movs	r2, r3
 800376e:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <IT_handle+0x224>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	4961      	ldr	r1, [pc, #388]	; (80038f8 <IT_handle+0x228>)
 8003774:	468c      	mov	ip, r1
 8003776:	4463      	add	r3, ip
 8003778:	0019      	movs	r1, r3
 800377a:	0010      	movs	r0, r2
 800377c:	f7fc fd70 	bl	8000260 <__divsi3>
 8003780:	0003      	movs	r3, r0
 8003782:	0018      	movs	r0, r3
 8003784:	f7fd fd60 	bl	8001248 <__aeabi_i2f>
 8003788:	1c02      	adds	r2, r0, #0
 800378a:	4b5c      	ldr	r3, [pc, #368]	; (80038fc <IT_handle+0x22c>)
 800378c:	601a      	str	r2, [r3, #0]
			R2=Voltage_Temperature[1]/(Voltage_Temperature[1]-2970);
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <IT_handle+0x224>)
 8003790:	885b      	ldrh	r3, [r3, #2]
 8003792:	001a      	movs	r2, r3
 8003794:	4b57      	ldr	r3, [pc, #348]	; (80038f4 <IT_handle+0x224>)
 8003796:	885b      	ldrh	r3, [r3, #2]
 8003798:	4957      	ldr	r1, [pc, #348]	; (80038f8 <IT_handle+0x228>)
 800379a:	468c      	mov	ip, r1
 800379c:	4463      	add	r3, ip
 800379e:	0019      	movs	r1, r3
 80037a0:	0010      	movs	r0, r2
 80037a2:	f7fc fd5d 	bl	8000260 <__divsi3>
 80037a6:	0003      	movs	r3, r0
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7fd fd4d 	bl	8001248 <__aeabi_i2f>
 80037ae:	1c02      	adds	r2, r0, #0
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <IT_handle+0x230>)
 80037b2:	601a      	str	r2, [r3, #0]
			T=-6.25*(R1+R2)/2+87.5;//温度电阻曲线 Kohm
 80037b4:	4b51      	ldr	r3, [pc, #324]	; (80038fc <IT_handle+0x22c>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b51      	ldr	r3, [pc, #324]	; (8003900 <IT_handle+0x230>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	1c19      	adds	r1, r3, #0
 80037be:	1c10      	adds	r0, r2, #0
 80037c0:	f7fc fee8 	bl	8000594 <__aeabi_fadd>
 80037c4:	1c03      	adds	r3, r0, #0
 80037c6:	1c18      	adds	r0, r3, #0
 80037c8:	f7ff fb72 	bl	8002eb0 <__aeabi_f2d>
 80037cc:	2200      	movs	r2, #0
 80037ce:	4b4d      	ldr	r3, [pc, #308]	; (8003904 <IT_handle+0x234>)
 80037d0:	f7fe fcc6 	bl	8002160 <__aeabi_dmul>
 80037d4:	0002      	movs	r2, r0
 80037d6:	000b      	movs	r3, r1
 80037d8:	0010      	movs	r0, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	2200      	movs	r2, #0
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	05db      	lsls	r3, r3, #23
 80037e2:	f7fe f8bb 	bl	800195c <__aeabi_ddiv>
 80037e6:	0002      	movs	r2, r0
 80037e8:	000b      	movs	r3, r1
 80037ea:	0010      	movs	r0, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b45      	ldr	r3, [pc, #276]	; (8003908 <IT_handle+0x238>)
 80037f2:	f7fd fd77 	bl	80012e4 <__aeabi_dadd>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fb9f 	bl	8002f40 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b41      	ldr	r3, [pc, #260]	; (800390c <IT_handle+0x23c>)
 8003806:	601a      	str	r2, [r3, #0]
			sprintf(String_Temperature_CH1, "%6.2f", T);//update temperature
 8003808:	4b40      	ldr	r3, [pc, #256]	; (800390c <IT_handle+0x23c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	1c18      	adds	r0, r3, #0
 800380e:	f7ff fb4f 	bl	8002eb0 <__aeabi_f2d>
 8003812:	0002      	movs	r2, r0
 8003814:	000b      	movs	r3, r1
 8003816:	493e      	ldr	r1, [pc, #248]	; (8003910 <IT_handle+0x240>)
 8003818:	483e      	ldr	r0, [pc, #248]	; (8003914 <IT_handle+0x244>)
 800381a:	f011 fe8d 	bl	8015538 <siprintf>
			Flag.FAN_LEVEL=99/5.0*T-485;//compare value
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <IT_handle+0x23c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	1c18      	adds	r0, r3, #0
 8003824:	f7ff fb44 	bl	8002eb0 <__aeabi_f2d>
 8003828:	4a3b      	ldr	r2, [pc, #236]	; (8003918 <IT_handle+0x248>)
 800382a:	4b3c      	ldr	r3, [pc, #240]	; (800391c <IT_handle+0x24c>)
 800382c:	f7fe fc98 	bl	8002160 <__aeabi_dmul>
 8003830:	0002      	movs	r2, r0
 8003832:	000b      	movs	r3, r1
 8003834:	0010      	movs	r0, r2
 8003836:	0019      	movs	r1, r3
 8003838:	2200      	movs	r2, #0
 800383a:	4b39      	ldr	r3, [pc, #228]	; (8003920 <IT_handle+0x250>)
 800383c:	f7fe fefc 	bl	8002638 <__aeabi_dsub>
 8003840:	0002      	movs	r2, r0
 8003842:	000b      	movs	r3, r1
 8003844:	0010      	movs	r0, r2
 8003846:	0019      	movs	r1, r3
 8003848:	f7ff fb7a 	bl	8002f40 <__aeabi_d2f>
 800384c:	1c02      	adds	r2, r0, #0
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <IT_handle+0x20c>)
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,(uint16_t)Flag.FAN_LEVEL);//set compare value
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <IT_handle+0x20c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	1c18      	adds	r0, r3, #0
 8003858:	f7fc fe66 	bl	8000528 <__aeabi_f2uiz>
 800385c:	0003      	movs	r3, r0
 800385e:	b29a      	uxth	r2, r3
 8003860:	4b30      	ldr	r3, [pc, #192]	; (8003924 <IT_handle+0x254>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,(uint16_t)Flag.FAN_LEVEL);
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <IT_handle+0x20c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	1c18      	adds	r0, r3, #0
 800386c:	f7fc fe5c 	bl	8000528 <__aeabi_f2uiz>
 8003870:	0003      	movs	r3, r0
 8003872:	b29a      	uxth	r2, r3
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <IT_handle+0x254>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
			/*过温判别*/
			if(Voltage_Temperature[0]<1500||Voltage_Temperature[1]<1500)
 800387a:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <IT_handle+0x224>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <IT_handle+0x258>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d904      	bls.n	800388e <IT_handle+0x1be>
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <IT_handle+0x224>)
 8003886:	885b      	ldrh	r3, [r3, #2]
 8003888:	4a27      	ldr	r2, [pc, #156]	; (8003928 <IT_handle+0x258>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d81b      	bhi.n	80038c6 <IT_handle+0x1f6>
			{
				ON_OFF = OFF;
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <IT_handle+0x25c>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
				OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <IT_handle+0x260>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
				Output_Zero();
 800389a:	f009 f993 	bl	800cbc4 <Output_Zero>
				TIM16_DELAY_OFF();
 800389e:	f00e fa03 	bl	8011ca8 <TIM16_DELAY_OFF>
				TIM17_CYCLE_OFF();
 80038a2:	f00e fa75 	bl	8011d90 <TIM17_CYCLE_OFF>
				Error |= OTP;
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <IT_handle+0x264>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2204      	movs	r2, #4
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <IT_handle+0x264>)
 80038b2:	701a      	strb	r2, [r3, #0]
				xyz.coordinates1=4;
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <IT_handle+0x268>)
 80038b6:	2204      	movs	r2, #4
 80038b8:	601a      	str	r2, [r3, #0]
				xyz.coordinates2=1;
 80038ba:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <IT_handle+0x268>)
 80038bc:	2201      	movs	r2, #1
 80038be:	605a      	str	r2, [r3, #4]
				xyz.coordinates3=0;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <IT_handle+0x268>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
			}


		}
		if(Flag.TIM14_IT==1)
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <IT_handle+0x20c>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <IT_handle+0x204>
		{
			Flag.TIM14_IT=0;
 80038ce:	4b03      	ldr	r3, [pc, #12]	; (80038dc <IT_handle+0x20c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	621a      	str	r2, [r3, #32]

		}



}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	20003384 	.word	0x20003384
 80038e0:	20003b20 	.word	0x20003b20
 80038e4:	20002fd1 	.word	0x20002fd1
 80038e8:	20003b70 	.word	0x20003b70
 80038ec:	00000ce4 	.word	0x00000ce4
 80038f0:	00000fff 	.word	0x00000fff
 80038f4:	200033b8 	.word	0x200033b8
 80038f8:	fffff466 	.word	0xfffff466
 80038fc:	200033bc 	.word	0x200033bc
 8003900:	200033c0 	.word	0x200033c0
 8003904:	c0190000 	.word	0xc0190000
 8003908:	4055e000 	.word	0x4055e000
 800390c:	200033c4 	.word	0x200033c4
 8003910:	08018758 	.word	0x08018758
 8003914:	20003074 	.word	0x20003074
 8003918:	cccccccd 	.word	0xcccccccd
 800391c:	4033cccc 	.word	0x4033cccc
 8003920:	407e5000 	.word	0x407e5000
 8003924:	200035ac 	.word	0x200035ac
 8003928:	000005db 	.word	0x000005db
 800392c:	20003b1c 	.word	0x20003b1c
 8003930:	20003b1d 	.word	0x20003b1d
 8003934:	20003b6d 	.word	0x20003b6d
 8003938:	20003b8c 	.word	0x20003b8c

0800393c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003940:	b672      	cpsid	i
}
 8003942:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003944:	e7fe      	b.n	8003944 <Error_Handler+0x8>
	...

08003948 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <MX_SPI1_Init+0x74>)
 800394e:	4a1c      	ldr	r2, [pc, #112]	; (80039c0 <MX_SPI1_Init+0x78>)
 8003950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <MX_SPI1_Init+0x74>)
 8003954:	2282      	movs	r2, #130	; 0x82
 8003956:	0052      	lsls	r2, r2, #1
 8003958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <MX_SPI1_Init+0x74>)
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <MX_SPI1_Init+0x74>)
 8003962:	22e0      	movs	r2, #224	; 0xe0
 8003964:	00d2      	lsls	r2, r2, #3
 8003966:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <MX_SPI1_Init+0x74>)
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <MX_SPI1_Init+0x74>)
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_SPI1_Init+0x74>)
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <MX_SPI1_Init+0x74>)
 800397e:	2208      	movs	r2, #8
 8003980:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <MX_SPI1_Init+0x74>)
 8003984:	2200      	movs	r2, #0
 8003986:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <MX_SPI1_Init+0x74>)
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <MX_SPI1_Init+0x74>)
 8003990:	2200      	movs	r2, #0
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MX_SPI1_Init+0x74>)
 8003996:	2207      	movs	r2, #7
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <MX_SPI1_Init+0x74>)
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <MX_SPI1_Init+0x74>)
 80039a2:	2208      	movs	r2, #8
 80039a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <MX_SPI1_Init+0x74>)
 80039a8:	0018      	movs	r0, r3
 80039aa:	f004 f9bd 	bl	8007d28 <HAL_SPI_Init>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d001      	beq.n	80039b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80039b2:	f7ff ffc3 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200033c8 	.word	0x200033c8
 80039c0:	40013000 	.word	0x40013000

080039c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b08b      	sub	sp, #44	; 0x2c
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	2414      	movs	r4, #20
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	0018      	movs	r0, r3
 80039d2:	2314      	movs	r3, #20
 80039d4:	001a      	movs	r2, r3
 80039d6:	2100      	movs	r1, #0
 80039d8:	f011 f843 	bl	8014a62 <memset>
  if(spiHandle->Instance==SPI1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <HAL_SPI_MspInit+0xd4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d153      	bne.n	8003a8e <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 80039e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ea:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	0149      	lsls	r1, r1, #5
 80039f0:	430a      	orrs	r2, r1
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 80039f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 8003a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a06:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 8003a08:	2108      	movs	r1, #8
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a0e:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	2208      	movs	r2, #8
 8003a14:	4013      	ands	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 8003a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	430a      	orrs	r2, r1
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_SPI_MspInit+0xd8>)
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	0052      	lsls	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	193b      	adds	r3, r7, r4
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003a4c:	193b      	adds	r3, r7, r4
 8003a4e:	2201      	movs	r2, #1
 8003a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <HAL_SPI_MspInit+0xdc>)
 8003a56:	0019      	movs	r1, r3
 8003a58:	0010      	movs	r0, r2
 8003a5a:	f003 f98d 	bl	8006d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a5e:	0021      	movs	r1, r4
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	22c0      	movs	r2, #192	; 0xc0
 8003a64:	0152      	lsls	r2, r2, #5
 8003a66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a74:	187b      	adds	r3, r7, r1
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a80:	187a      	adds	r2, r7, r1
 8003a82:	23a0      	movs	r3, #160	; 0xa0
 8003a84:	05db      	lsls	r3, r3, #23
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f003 f975 	bl	8006d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b00b      	add	sp, #44	; 0x2c
 8003a94:	bd90      	pop	{r4, r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	40013000 	.word	0x40013000
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	50000c00 	.word	0x50000c00

08003aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_MspInit+0x44>)
 8003aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2201      	movs	r2, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	0549      	lsls	r1, r1, #21
 8003acc:	430a      	orrs	r2, r1
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_MspInit+0x44>)
 8003ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	055b      	lsls	r3, r3, #21
 8003ad8:	4013      	ands	r3, r2
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	40021000 	.word	0x40021000

08003aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <NMI_Handler+0x4>

08003af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003af6:	e7fe      	b.n	8003af6 <HardFault_Handler+0x4>

08003af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b10:	f001 fbf2 	bl	80052f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <DMA1_Channel1_IRQHandler+0x14>)
 8003b22:	0018      	movs	r0, r3
 8003b24:	f002 ffdc 	bl	8006ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	20003868 	.word	0x20003868

08003b34 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f002 ffd0 	bl	8006ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	20003328 	.word	0x20003328

08003b4c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8003b52:	0018      	movs	r0, r3
 8003b54:	f002 ffc4 	bl	8006ae0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f002 ffc0 	bl	8006ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	200038c4 	.word	0x200038c4
 8003b6c:	20003920 	.word	0x20003920

08003b70 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <ADC1_IRQHandler+0x14>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f002 f81c 	bl	8005bb4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	200032c4 	.word	0x200032c4

08003b88 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f005 fb58 	bl	8009244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20003430 	.word	0x20003430

08003ba0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <TIM3_IRQHandler+0x14>)
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f005 fb4c 	bl	8009244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	2000347c 	.word	0x2000347c

08003bb8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <TIM6_IRQHandler+0x14>)
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f005 fb40 	bl	8009244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  //TIM6_Protect_IT_Handle();
  /* USER CODE END TIM6_IRQn 1 */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	200034c8 	.word	0x200034c8

08003bd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <TIM7_IRQHandler+0x14>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f005 fb34 	bl	8009244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  //OLED光标显示接口
  //TIM7_Oled_IT_Handle();
  /* USER CODE END TIM7_IRQn 1 */
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	20003514 	.word	0x20003514

08003be8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <TIM14_IRQHandler+0x14>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f005 fb28 	bl	8009244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	20003560 	.word	0x20003560

08003c00 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <TIM16_IRQHandler+0x14>)
 8003c06:	0018      	movs	r0, r3
 8003c08:	f005 fb1c 	bl	8009244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */


  /* USER CODE END TIM16_IRQn 1 */
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	200035f8 	.word	0x200035f8

08003c18 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <TIM17_IRQHandler+0x14>)
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f005 fb10 	bl	8009244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */


  /* USER CODE END TIM17_IRQn 1 */
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	20003644 	.word	0x20003644

08003c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <USART1_IRQHandler+0x14>)
 8003c36:	0018      	movs	r0, r3
 8003c38:	f006 fd36 	bl	800a6a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	200036ac 	.word	0x200036ac

08003c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c4c:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f006 fd2a 	bl	800a6a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d11d      	bne.n	8003c9e <USART2_IRQHandler+0x56>
  {

	    //HAL_UART_DMAStop(&huart2);
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);    //关了空闲中断
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	438a      	bics	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
	    __HAL_UART_CLEAR_IDLEFLAG(&huart2);				//清除IDLE标志
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2210      	movs	r2, #16
 8003c78:	621a      	str	r2, [r3, #32]
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);	//清除IDLE标志
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2110      	movs	r1, #16
 8003c86:	438a      	bics	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

	    USART2_IDLECallback();
 8003c8a:	f001 f9af 	bl	8004fec <USART2_IDLECallback>

	    __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);    	//使能空闲中断
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <USART2_IRQHandler+0x5c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2110      	movs	r1, #16
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20003740 	.word	0x20003740

08003ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  return 1;
 8003cac:	2301      	movs	r3, #1
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_kill>:

int _kill(int pid, int sig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cbe:	f010 fe93 	bl	80149e8 <__errno>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	2216      	movs	r2, #22
 8003cc6:	601a      	str	r2, [r3, #0]
  return -1;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	425b      	negs	r3, r3
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <_exit>:

void _exit (int status)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cdc:	2301      	movs	r3, #1
 8003cde:	425a      	negs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7ff ffe5 	bl	8003cb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cea:	e7fe      	b.n	8003cea <_exit+0x16>

08003cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e00a      	b.n	8003d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cfe:	e000      	b.n	8003d02 <_read+0x16>
 8003d00:	bf00      	nop
 8003d02:	0001      	movs	r1, r0
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	60ba      	str	r2, [r7, #8]
 8003d0a:	b2ca      	uxtb	r2, r1
 8003d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dbf0      	blt.n	8003cfe <_read+0x12>
  }

  return len;
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b006      	add	sp, #24
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e009      	b.n	8003d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60ba      	str	r2, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	0018      	movs	r0, r3
 8003d42:	e000      	b.n	8003d46 <_write+0x20>
 8003d44:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	dbf1      	blt.n	8003d38 <_write+0x12>
  }
  return len;
 8003d54:	687b      	ldr	r3, [r7, #4]
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b006      	add	sp, #24
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_close>:

int _close(int file)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	425b      	negs	r3, r3
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	0192      	lsls	r2, r2, #6
 8003d82:	605a      	str	r2, [r3, #4]
  return 0;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_isatty>:

int _isatty(int file)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <_sbrk+0x5c>)
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <_sbrk+0x60>)
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <_sbrk+0x64>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <_sbrk+0x64>)
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <_sbrk+0x68>)
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <_sbrk+0x64>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d207      	bcs.n	8003df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003de8:	f010 fdfe 	bl	80149e8 <__errno>
 8003dec:	0003      	movs	r3, r0
 8003dee:	220c      	movs	r2, #12
 8003df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	425b      	negs	r3, r3
 8003df6:	e009      	b.n	8003e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <_sbrk+0x64>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <_sbrk+0x64>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	18d2      	adds	r2, r2, r3
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <_sbrk+0x64>)
 8003e08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20009000 	.word	0x20009000
 8003e18:	00000400 	.word	0x00000400
 8003e1c:	2000342c 	.word	0x2000342c
 8003e20:	20003c38 	.word	0x20003c38

08003e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e36:	2310      	movs	r3, #16
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	001a      	movs	r2, r3
 8003e40:	2100      	movs	r1, #0
 8003e42:	f010 fe0e 	bl	8014a62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e46:	1d3b      	adds	r3, r7, #4
 8003e48:	0018      	movs	r0, r3
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	2100      	movs	r1, #0
 8003e50:	f010 fe07 	bl	8014a62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e54:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e56:	4a30      	ldr	r2, [pc, #192]	; (8003f18 <MX_TIM1_Init+0xe8>)
 8003e58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <MX_TIM1_Init+0xec>)
 8003e5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e60:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003e66:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e68:	4a2d      	ldr	r2, [pc, #180]	; (8003f20 <MX_TIM1_Init+0xf0>)
 8003e6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e6c:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e72:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e7e:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e80:	0018      	movs	r0, r3
 8003e82:	f004 fe53 	bl	8008b2c <HAL_TIM_Base_Init>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d001      	beq.n	8003e8e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003e8a:	f7ff fd57 	bl	800393c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8e:	2110      	movs	r1, #16
 8003e90:	187b      	adds	r3, r7, r1
 8003e92:	2280      	movs	r2, #128	; 0x80
 8003e94:	0152      	lsls	r2, r2, #5
 8003e96:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e98:	187a      	adds	r2, r7, r1
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f005 fc02 	bl	80096a8 <HAL_TIM_ConfigClockSource>
 8003ea4:	1e03      	subs	r3, r0, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003ea8:	f7ff fd48 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ebe:	1d3a      	adds	r2, r7, #4
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f006 f8df 	bl	800a088 <HAL_TIMEx_MasterConfigSynchronization>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003ece:	f7ff fd35 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	4252      	negs	r2, r2
 8003eda:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim1,0x00);
 8003edc:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim1);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <MX_TIM1_Init+0xf4>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	d10d      	bne.n	8003f0c <MX_TIM1_Init+0xdc>
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <MX_TIM1_Init+0xf8>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d107      	bne.n	8003f0c <MX_TIM1_Init+0xdc>
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <MX_TIM1_Init+0xe4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	438a      	bics	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b008      	add	sp, #32
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20003430 	.word	0x20003430
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	0000f9ff 	.word	0x0000f9ff
 8003f20:	00001387 	.word	0x00001387
 8003f24:	00001111 	.word	0x00001111
 8003f28:	00000444 	.word	0x00000444

08003f2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b08d      	sub	sp, #52	; 0x34
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f32:	240c      	movs	r4, #12
 8003f34:	193b      	adds	r3, r7, r4
 8003f36:	0018      	movs	r0, r3
 8003f38:	2324      	movs	r3, #36	; 0x24
 8003f3a:	001a      	movs	r2, r3
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f010 fd90 	bl	8014a62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f42:	003b      	movs	r3, r7
 8003f44:	0018      	movs	r0, r3
 8003f46:	230c      	movs	r3, #12
 8003f48:	001a      	movs	r2, r3
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f010 fd89 	bl	8014a62 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <MX_TIM3_Init+0xc8>)
 8003f54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f56:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f5c:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f74:	0021      	movs	r1, r4
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	2200      	movs	r2, #0
 8003f80:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	2201      	movs	r2, #1
 8003f86:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	2200      	movs	r2, #0
 8003f92:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	2200      	movs	r2, #0
 8003f98:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2200      	movs	r2, #0
 8003faa:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003fac:	187a      	adds	r2, r7, r1
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003fb0:	0011      	movs	r1, r2
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f004 fffa 	bl	8008fac <HAL_TIM_Encoder_Init>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003fbc:	f7ff fcbe 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc0:	003b      	movs	r3, r7
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc6:	003b      	movs	r3, r7
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fcc:	003a      	movs	r2, r7
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f006 f858 	bl	800a088 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd8:	1e03      	subs	r3, r0, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003fdc:	f7ff fcae 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <MX_TIM3_Init+0xc4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);//encoder on
  /* USER CODE END TIM3_Init 2 */

}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b00d      	add	sp, #52	; 0x34
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	2000347c 	.word	0x2000347c
 8003ff4:	40000400 	.word	0x40000400

08003ff8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	0018      	movs	r0, r3
 8004002:	230c      	movs	r3, #12
 8004004:	001a      	movs	r2, r3
 8004006:	2100      	movs	r1, #0
 8004008:	f010 fd2b 	bl	8014a62 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <MX_TIM6_Init+0x74>)
 800400e:	4a18      	ldr	r2, [pc, #96]	; (8004070 <MX_TIM6_Init+0x78>)
 8004010:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6399;
 8004012:	4b16      	ldr	r3, [pc, #88]	; (800406c <MX_TIM6_Init+0x74>)
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <MX_TIM6_Init+0x7c>)
 8004016:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <MX_TIM6_Init+0x74>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <MX_TIM6_Init+0x74>)
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <MX_TIM6_Init+0x80>)
 8004022:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <MX_TIM6_Init+0x74>)
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <MX_TIM6_Init+0x74>)
 800402c:	0018      	movs	r0, r3
 800402e:	f004 fd7d 	bl	8008b2c <HAL_TIM_Base_Init>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d001      	beq.n	800403a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004036:	f7ff fc81 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004046:	1d3a      	adds	r2, r7, #4
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <MX_TIM6_Init+0x74>)
 800404a:	0011      	movs	r1, r2
 800404c:	0018      	movs	r0, r3
 800404e:	f006 f81b 	bl	800a088 <HAL_TIMEx_MasterConfigSynchronization>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d001      	beq.n	800405a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8004056:	f7ff fc71 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <MX_TIM6_Init+0x74>)
 800405c:	0018      	movs	r0, r3
 800405e:	f004 fe0b 	bl	8008c78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	200034c8 	.word	0x200034c8
 8004070:	40001000 	.word	0x40001000
 8004074:	000018ff 	.word	0x000018ff
 8004078:	00001387 	.word	0x00001387

0800407c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	0018      	movs	r0, r3
 8004086:	230c      	movs	r3, #12
 8004088:	001a      	movs	r2, r3
 800408a:	2100      	movs	r1, #0
 800408c:	f010 fce9 	bl	8014a62 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <MX_TIM7_Init+0x7c>)
 8004092:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <MX_TIM7_Init+0x80>)
 8004094:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6399;
 8004096:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <MX_TIM7_Init+0x7c>)
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <MX_TIM7_Init+0x84>)
 800409a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409c:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <MX_TIM7_Init+0x7c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <MX_TIM7_Init+0x7c>)
 80040a4:	2209      	movs	r2, #9
 80040a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <MX_TIM7_Init+0x7c>)
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <MX_TIM7_Init+0x7c>)
 80040b0:	0018      	movs	r0, r3
 80040b2:	f004 fd3b 	bl	8008b2c <HAL_TIM_Base_Init>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80040ba:	f7ff fc3f 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80040ca:	1d3a      	adds	r2, r7, #4
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <MX_TIM7_Init+0x7c>)
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f005 ffd9 	bl	800a088 <HAL_TIMEx_MasterConfigSynchronization>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80040da:	f7ff fc2f 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim7,TIM_IT_UPDATE);
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <MX_TIM7_Init+0x7c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2202      	movs	r2, #2
 80040e4:	4252      	negs	r2, r2
 80040e6:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim7);
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <MX_TIM7_Init+0x7c>)
 80040ea:	0018      	movs	r0, r3
 80040ec:	f004 fdc4 	bl	8008c78 <HAL_TIM_Base_Start_IT>
  //__HAL_TIM_DISABLE(&htim7);
  /* USER CODE END TIM7_Init 2 */

}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20003514 	.word	0x20003514
 80040fc:	40001400 	.word	0x40001400
 8004100:	000018ff 	.word	0x000018ff

08004104 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <MX_TIM14_Init+0x48>)
 800410a:	4a11      	ldr	r2, [pc, #68]	; (8004150 <MX_TIM14_Init+0x4c>)
 800410c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63999;
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <MX_TIM14_Init+0x48>)
 8004110:	4a10      	ldr	r2, [pc, #64]	; (8004154 <MX_TIM14_Init+0x50>)
 8004112:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <MX_TIM14_Init+0x48>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <MX_TIM14_Init+0x48>)
 800411c:	22f4      	movs	r2, #244	; 0xf4
 800411e:	32ff      	adds	r2, #255	; 0xff
 8004120:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <MX_TIM14_Init+0x48>)
 8004124:	2200      	movs	r2, #0
 8004126:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <MX_TIM14_Init+0x48>)
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <MX_TIM14_Init+0x48>)
 8004130:	0018      	movs	r0, r3
 8004132:	f004 fcfb 	bl	8008b2c <HAL_TIM_Base_Init>
 8004136:	1e03      	subs	r3, r0, #0
 8004138:	d001      	beq.n	800413e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800413a:	f7ff fbff 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
	/*check error*/
	HAL_TIM_Base_Start_IT(&htim14);
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <MX_TIM14_Init+0x48>)
 8004140:	0018      	movs	r0, r3
 8004142:	f004 fd99 	bl	8008c78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20003560 	.word	0x20003560
 8004150:	40002000 	.word	0x40002000
 8004154:	0000f9ff 	.word	0x0000f9ff

08004158 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b09c      	sub	sp, #112	; 0x70
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415e:	2360      	movs	r3, #96	; 0x60
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	0018      	movs	r0, r3
 8004164:	2310      	movs	r3, #16
 8004166:	001a      	movs	r2, r3
 8004168:	2100      	movs	r1, #0
 800416a:	f010 fc7a 	bl	8014a62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416e:	2354      	movs	r3, #84	; 0x54
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	0018      	movs	r0, r3
 8004174:	230c      	movs	r3, #12
 8004176:	001a      	movs	r2, r3
 8004178:	2100      	movs	r1, #0
 800417a:	f010 fc72 	bl	8014a62 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800417e:	2338      	movs	r3, #56	; 0x38
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	0018      	movs	r0, r3
 8004184:	231c      	movs	r3, #28
 8004186:	001a      	movs	r2, r3
 8004188:	2100      	movs	r1, #0
 800418a:	f010 fc6a 	bl	8014a62 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	0018      	movs	r0, r3
 8004192:	2334      	movs	r3, #52	; 0x34
 8004194:	001a      	movs	r2, r3
 8004196:	2100      	movs	r1, #0
 8004198:	f010 fc63 	bl	8014a62 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800419c:	4b58      	ldr	r3, [pc, #352]	; (8004300 <MX_TIM15_Init+0x1a8>)
 800419e:	4a59      	ldr	r2, [pc, #356]	; (8004304 <MX_TIM15_Init+0x1ac>)
 80041a0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80041a2:	4b57      	ldr	r3, [pc, #348]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041a4:	223f      	movs	r2, #63	; 0x3f
 80041a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a8:	4b55      	ldr	r3, [pc, #340]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80041ae:	4b54      	ldr	r3, [pc, #336]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041b0:	4a55      	ldr	r2, [pc, #340]	; (8004308 <MX_TIM15_Init+0x1b0>)
 80041b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b4:	4b52      	ldr	r3, [pc, #328]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80041ba:	4b51      	ldr	r3, [pc, #324]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041bc:	2200      	movs	r2, #0
 80041be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041c0:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041c2:	2280      	movs	r2, #128	; 0x80
 80041c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80041c6:	4b4e      	ldr	r3, [pc, #312]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041c8:	0018      	movs	r0, r3
 80041ca:	f004 fcaf 	bl	8008b2c <HAL_TIM_Base_Init>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80041d2:	f7ff fbb3 	bl	800393c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041d6:	2160      	movs	r1, #96	; 0x60
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	0152      	lsls	r2, r2, #5
 80041de:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80041e0:	187a      	adds	r2, r7, r1
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041e4:	0011      	movs	r1, r2
 80041e6:	0018      	movs	r0, r3
 80041e8:	f005 fa5e 	bl	80096a8 <HAL_TIM_ConfigClockSource>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d001      	beq.n	80041f4 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80041f0:	f7ff fba4 	bl	800393c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80041f4:	4b42      	ldr	r3, [pc, #264]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80041f6:	0018      	movs	r0, r3
 80041f8:	f004 fd94 	bl	8008d24 <HAL_TIM_PWM_Init>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8004200:	f7ff fb9c 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004204:	2154      	movs	r1, #84	; 0x54
 8004206:	187b      	adds	r3, r7, r1
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420c:	187b      	adds	r3, r7, r1
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004212:	187a      	adds	r2, r7, r1
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <MX_TIM15_Init+0x1a8>)
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f005 ff35 	bl	800a088 <HAL_TIMEx_MasterConfigSynchronization>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d001      	beq.n	8004226 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8004222:	f7ff fb8b 	bl	800393c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004226:	2138      	movs	r1, #56	; 0x38
 8004228:	187b      	adds	r3, r7, r1
 800422a:	2260      	movs	r2, #96	; 0x60
 800422c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 99;
 800422e:	187b      	adds	r3, r7, r1
 8004230:	2263      	movs	r2, #99	; 0x63
 8004232:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004234:	187b      	adds	r3, r7, r1
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800423a:	187b      	adds	r3, r7, r1
 800423c:	2200      	movs	r2, #0
 800423e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004240:	187b      	adds	r3, r7, r1
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004246:	187b      	adds	r3, r7, r1
 8004248:	2200      	movs	r2, #0
 800424a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800424c:	187b      	adds	r3, r7, r1
 800424e:	2200      	movs	r2, #0
 8004250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004252:	1879      	adds	r1, r7, r1
 8004254:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <MX_TIM15_Init+0x1a8>)
 8004256:	2200      	movs	r2, #0
 8004258:	0018      	movs	r0, r3
 800425a:	f005 f925 	bl	80094a8 <HAL_TIM_PWM_ConfigChannel>
 800425e:	1e03      	subs	r3, r0, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004262:	f7ff fb6b 	bl	800393c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004266:	2338      	movs	r3, #56	; 0x38
 8004268:	18f9      	adds	r1, r7, r3
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <MX_TIM15_Init+0x1a8>)
 800426c:	2204      	movs	r2, #4
 800426e:	0018      	movs	r0, r3
 8004270:	f005 f91a 	bl	80094a8 <HAL_TIM_PWM_ConfigChannel>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d001      	beq.n	800427c <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8004278:	f7ff fb60 	bl	800393c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	2200      	movs	r2, #0
 8004286:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	2200      	movs	r2, #0
 8004292:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	0192      	lsls	r2, r2, #6
 80042a0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80042ae:	1d3a      	adds	r2, r7, #4
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80042b2:	0011      	movs	r1, r2
 80042b4:	0018      	movs	r0, r3
 80042b6:	f005 ff4f 	bl	800a158 <HAL_TIMEx_ConfigBreakDeadTime>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d001      	beq.n	80042c2 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 80042be:	f7ff fb3d 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
	HAL_TIM_Base_Start(&htim15);
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80042c4:	0018      	movs	r0, r3
 80042c6:	f004 fc89 	bl	8008bdc <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 10);
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	220a      	movs	r2, #10
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 10);
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	220a      	movs	r2, #10
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80042dc:	2100      	movs	r1, #0
 80042de:	0018      	movs	r0, r3
 80042e0:	f004 fd80 	bl	8008de4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80042e6:	2104      	movs	r1, #4
 80042e8:	0018      	movs	r0, r3
 80042ea:	f004 fd7b 	bl	8008de4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <MX_TIM15_Init+0x1a8>)
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 f9c3 	bl	800467c <HAL_TIM_MspPostInit>

}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b01c      	add	sp, #112	; 0x70
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	200035ac 	.word	0x200035ac
 8004304:	40014000 	.word	0x40014000
 8004308:	000003e7 	.word	0x000003e7

0800430c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <MX_TIM16_Init+0x80>)
 8004312:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <MX_TIM16_Init+0x84>)
 8004314:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63999;
 8004316:	4b1d      	ldr	r3, [pc, #116]	; (800438c <MX_TIM16_Init+0x80>)
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <MX_TIM16_Init+0x88>)
 800431a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <MX_TIM16_Init+0x80>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 8004322:	4b1a      	ldr	r3, [pc, #104]	; (800438c <MX_TIM16_Init+0x80>)
 8004324:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <MX_TIM16_Init+0x8c>)
 8004326:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <MX_TIM16_Init+0x80>)
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800432e:	4b17      	ldr	r3, [pc, #92]	; (800438c <MX_TIM16_Init+0x80>)
 8004330:	2200      	movs	r2, #0
 8004332:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004334:	4b15      	ldr	r3, [pc, #84]	; (800438c <MX_TIM16_Init+0x80>)
 8004336:	2200      	movs	r2, #0
 8004338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <MX_TIM16_Init+0x80>)
 800433c:	0018      	movs	r0, r3
 800433e:	f004 fbf5 	bl	8008b2c <HAL_TIM_Base_Init>
 8004342:	1e03      	subs	r3, r0, #0
 8004344:	d001      	beq.n	800434a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004346:	f7ff faf9 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <MX_TIM16_Init+0x80>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2202      	movs	r2, #2
 8004350:	4252      	negs	r2, r2
 8004352:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim16,0x00);
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <MX_TIM16_Init+0x80>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2200      	movs	r2, #0
 800435a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim16);
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <MX_TIM16_Init+0x80>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a0e      	ldr	r2, [pc, #56]	; (800439c <MX_TIM16_Init+0x90>)
 8004364:	4013      	ands	r3, r2
 8004366:	d10d      	bne.n	8004384 <MX_TIM16_Init+0x78>
 8004368:	4b08      	ldr	r3, [pc, #32]	; (800438c <MX_TIM16_Init+0x80>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <MX_TIM16_Init+0x94>)
 8004370:	4013      	ands	r3, r2
 8004372:	d107      	bne.n	8004384 <MX_TIM16_Init+0x78>
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <MX_TIM16_Init+0x80>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b04      	ldr	r3, [pc, #16]	; (800438c <MX_TIM16_Init+0x80>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2101      	movs	r1, #1
 8004380:	438a      	bics	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM16_Init 2 */

}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	200035f8 	.word	0x200035f8
 8004390:	40014400 	.word	0x40014400
 8004394:	0000f9ff 	.word	0x0000f9ff
 8004398:	00001387 	.word	0x00001387
 800439c:	00001111 	.word	0x00001111
 80043a0:	00000444 	.word	0x00000444

080043a4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <MX_TIM17_Init+0x80>)
 80043aa:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <MX_TIM17_Init+0x84>)
 80043ac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6399;
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <MX_TIM17_Init+0x80>)
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <MX_TIM17_Init+0x88>)
 80043b2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <MX_TIM17_Init+0x80>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9;
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <MX_TIM17_Init+0x80>)
 80043bc:	2209      	movs	r2, #9
 80043be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <MX_TIM17_Init+0x80>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80043c6:	4b17      	ldr	r3, [pc, #92]	; (8004424 <MX_TIM17_Init+0x80>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043cc:	4b15      	ldr	r3, [pc, #84]	; (8004424 <MX_TIM17_Init+0x80>)
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <MX_TIM17_Init+0x80>)
 80043d4:	0018      	movs	r0, r3
 80043d6:	f004 fba9 	bl	8008b2c <HAL_TIM_Base_Init>
 80043da:	1e03      	subs	r3, r0, #0
 80043dc:	d001      	beq.n	80043e2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80043de:	f7ff faad 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim17,TIM_IT_UPDATE);
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <MX_TIM17_Init+0x80>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2202      	movs	r2, #2
 80043e8:	4252      	negs	r2, r2
 80043ea:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim17,0x00);
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <MX_TIM17_Init+0x80>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim17);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <MX_TIM17_Init+0x80>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <MX_TIM17_Init+0x8c>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	d10d      	bne.n	800441c <MX_TIM17_Init+0x78>
 8004400:	4b08      	ldr	r3, [pc, #32]	; (8004424 <MX_TIM17_Init+0x80>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <MX_TIM17_Init+0x90>)
 8004408:	4013      	ands	r3, r2
 800440a:	d107      	bne.n	800441c <MX_TIM17_Init+0x78>
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <MX_TIM17_Init+0x80>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <MX_TIM17_Init+0x80>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2101      	movs	r1, #1
 8004418:	438a      	bics	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM17_Init 2 */

}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20003644 	.word	0x20003644
 8004428:	40014800 	.word	0x40014800
 800442c:	000018ff 	.word	0x000018ff
 8004430:	00001111 	.word	0x00001111
 8004434:	00000444 	.word	0x00000444

08004438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5c      	ldr	r2, [pc, #368]	; (80045b8 <HAL_TIM_Base_MspInit+0x180>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d116      	bne.n	8004478 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800444a:	4b5c      	ldr	r3, [pc, #368]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 800444c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444e:	4b5b      	ldr	r3, [pc, #364]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	0109      	lsls	r1, r1, #4
 8004454:	430a      	orrs	r2, r1
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
 8004458:	4b58      	ldr	r3, [pc, #352]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 800445a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	4013      	ands	r3, r2
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8004466:	2200      	movs	r2, #0
 8004468:	2100      	movs	r1, #0
 800446a:	200d      	movs	r0, #13
 800446c:	f002 f92a 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004470:	200d      	movs	r0, #13
 8004472:	f002 f93c 	bl	80066ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004476:	e09a      	b.n	80045ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a50      	ldr	r2, [pc, #320]	; (80045c0 <HAL_TIM_Base_MspInit+0x188>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d114      	bne.n	80044ac <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004482:	4b4e      	ldr	r3, [pc, #312]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004486:	4b4d      	ldr	r3, [pc, #308]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004488:	2110      	movs	r1, #16
 800448a:	430a      	orrs	r2, r1
 800448c:	63da      	str	r2, [r3, #60]	; 0x3c
 800448e:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	2210      	movs	r2, #16
 8004494:	4013      	ands	r3, r2
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2100      	movs	r1, #0
 800449e:	2011      	movs	r0, #17
 80044a0:	f002 f910 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80044a4:	2011      	movs	r0, #17
 80044a6:	f002 f922 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 80044aa:	e080      	b.n	80045ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a44      	ldr	r2, [pc, #272]	; (80045c4 <HAL_TIM_Base_MspInit+0x18c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d114      	bne.n	80044e0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80044b6:	4b41      	ldr	r3, [pc, #260]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 80044b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ba:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 80044bc:	2120      	movs	r1, #32
 80044be:	430a      	orrs	r2, r1
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80044c2:	4b3e      	ldr	r3, [pc, #248]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	2220      	movs	r2, #32
 80044c8:	4013      	ands	r3, r2
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	2012      	movs	r0, #18
 80044d4:	f002 f8f6 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80044d8:	2012      	movs	r0, #18
 80044da:	f002 f908 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 80044de:	e066      	b.n	80045ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM14)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <HAL_TIM_Base_MspInit+0x190>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d116      	bne.n	8004518 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044ea:	4b34      	ldr	r3, [pc, #208]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 80044ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ee:	4b33      	ldr	r3, [pc, #204]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	0209      	lsls	r1, r1, #8
 80044f4:	430a      	orrs	r2, r1
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
 80044f8:	4b30      	ldr	r3, [pc, #192]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 80044fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	2100      	movs	r1, #0
 800450a:	2013      	movs	r0, #19
 800450c:	f002 f8da 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004510:	2013      	movs	r0, #19
 8004512:	f002 f8ec 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 8004516:	e04a      	b.n	80045ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <HAL_TIM_Base_MspInit+0x194>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004526:	4b25      	ldr	r3, [pc, #148]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	0249      	lsls	r1, r1, #9
 800452c:	430a      	orrs	r2, r1
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
 8004530:	4b22      	ldr	r3, [pc, #136]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	025b      	lsls	r3, r3, #9
 8004538:	4013      	ands	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	e036      	b.n	80045ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <HAL_TIM_Base_MspInit+0x198>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d116      	bne.n	8004578 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800454a:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 800454c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	0289      	lsls	r1, r1, #10
 8004554:	430a      	orrs	r2, r1
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 800455a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	029b      	lsls	r3, r3, #10
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004566:	2200      	movs	r2, #0
 8004568:	2100      	movs	r1, #0
 800456a:	2015      	movs	r0, #21
 800456c:	f002 f8aa 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004570:	2015      	movs	r0, #21
 8004572:	f002 f8bc 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 8004576:	e01a      	b.n	80045ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <HAL_TIM_Base_MspInit+0x19c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d115      	bne.n	80045ae <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004588:	2180      	movs	r1, #128	; 0x80
 800458a:	02c9      	lsls	r1, r1, #11
 800458c:	430a      	orrs	r2, r1
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <HAL_TIM_Base_MspInit+0x184>)
 8004592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	02db      	lsls	r3, r3, #11
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	2016      	movs	r0, #22
 80045a4:	f002 f88e 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80045a8:	2016      	movs	r0, #22
 80045aa:	f002 f8a0 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b00a      	add	sp, #40	; 0x28
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40001000 	.word	0x40001000
 80045c4:	40001400 	.word	0x40001400
 80045c8:	40002000 	.word	0x40002000
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800

080045d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b08b      	sub	sp, #44	; 0x2c
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	2414      	movs	r4, #20
 80045e2:	193b      	adds	r3, r7, r4
 80045e4:	0018      	movs	r0, r3
 80045e6:	2314      	movs	r3, #20
 80045e8:	001a      	movs	r2, r3
 80045ea:	2100      	movs	r1, #0
 80045ec:	f010 fa39 	bl	8014a62 <memset>
  if(tim_encoderHandle->Instance==TIM3)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_TIM_Encoder_MspInit+0x98>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d135      	bne.n	8004666 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045fa:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <HAL_TIM_Encoder_MspInit+0x9c>)
 80045fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004600:	2102      	movs	r1, #2
 8004602:	430a      	orrs	r2, r1
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c
 8004606:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004612:	4b18      	ldr	r3, [pc, #96]	; (8004674 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004618:	2104      	movs	r1, #4
 800461a:	430a      	orrs	r2, r1
 800461c:	635a      	str	r2, [r3, #52]	; 0x34
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	2204      	movs	r2, #4
 8004624:	4013      	ands	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800462a:	0021      	movs	r1, r4
 800462c:	187b      	adds	r3, r7, r1
 800462e:	22c0      	movs	r2, #192	; 0xc0
 8004630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004632:	187b      	adds	r3, r7, r1
 8004634:	2202      	movs	r2, #2
 8004636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	187b      	adds	r3, r7, r1
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2200      	movs	r2, #0
 8004642:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004644:	187b      	adds	r3, r7, r1
 8004646:	2201      	movs	r2, #1
 8004648:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800464a:	187b      	adds	r3, r7, r1
 800464c:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <HAL_TIM_Encoder_MspInit+0xa0>)
 800464e:	0019      	movs	r1, r3
 8004650:	0010      	movs	r0, r2
 8004652:	f002 fb91 	bl	8006d78 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004656:	2200      	movs	r2, #0
 8004658:	2100      	movs	r1, #0
 800465a:	2010      	movs	r0, #16
 800465c:	f002 f832 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004660:	2010      	movs	r0, #16
 8004662:	f002 f844 	bl	80066ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b00b      	add	sp, #44	; 0x2c
 800466c:	bd90      	pop	{r4, r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	40000400 	.word	0x40000400
 8004674:	40021000 	.word	0x40021000
 8004678:	50000800 	.word	0x50000800

0800467c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004684:	240c      	movs	r4, #12
 8004686:	193b      	adds	r3, r7, r4
 8004688:	0018      	movs	r0, r3
 800468a:	2314      	movs	r3, #20
 800468c:	001a      	movs	r2, r3
 800468e:	2100      	movs	r1, #0
 8004690:	f010 f9e7 	bl	8014a62 <memset>
  if(timHandle->Instance==TIM15)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <HAL_TIM_MspPostInit+0x70>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <HAL_TIM_MspPostInit+0x74>)
 80046a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_TIM_MspPostInit+0x74>)
 80046a4:	2102      	movs	r1, #2
 80046a6:	430a      	orrs	r2, r1
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <HAL_TIM_MspPostInit+0x74>)
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	2202      	movs	r2, #2
 80046b0:	4013      	ands	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = FAN_CRTL1_Pin|FAN_CTRL2_Pin;
 80046b6:	193b      	adds	r3, r7, r4
 80046b8:	22c0      	movs	r2, #192	; 0xc0
 80046ba:	0212      	lsls	r2, r2, #8
 80046bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	0021      	movs	r1, r4
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	2202      	movs	r2, #2
 80046c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	2200      	movs	r2, #0
 80046ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	2200      	movs	r2, #0
 80046d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80046d2:	187b      	adds	r3, r7, r1
 80046d4:	2205      	movs	r2, #5
 80046d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d8:	187b      	adds	r3, r7, r1
 80046da:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <HAL_TIM_MspPostInit+0x78>)
 80046dc:	0019      	movs	r1, r3
 80046de:	0010      	movs	r0, r2
 80046e0:	f002 fb4a 	bl	8006d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b009      	add	sp, #36	; 0x24
 80046ea:	bd90      	pop	{r4, r7, pc}
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	50000400 	.word	0x50000400

080046f8 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

/**********************************************************soft start**********************************************************/
	if(htim==&htim1)
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4bb1      	ldr	r3, [pc, #708]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d000      	beq.n	800470a <HAL_TIM_PeriodElapsedCallback+0x12>
 8004708:	e0b2      	b.n	8004870 <HAL_TIM_PeriodElapsedCallback+0x178>
	{
		keys_EN = ENABLE;//ENABLE按键
 800470a:	4bb0      	ldr	r3, [pc, #704]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_ENABLE(&htim3);
 8004710:	4baf      	ldr	r3, [pc, #700]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4bae      	ldr	r3, [pc, #696]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2101      	movs	r1, #1
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8004720:	4bab      	ldr	r3, [pc, #684]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	4baa      	ldr	r3, [pc, #680]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2101      	movs	r1, #1
 800472c:	430a      	orrs	r2, r1
 800472e:	60da      	str	r2, [r3, #12]
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004730:	4ba7      	ldr	r3, [pc, #668]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004732:	213c      	movs	r1, #60	; 0x3c
 8004734:	0018      	movs	r0, r3
 8004736:	f004 fce1 	bl	80090fc <HAL_TIM_Encoder_Start>
		Power_AC_On;	 //time to soft start
 800473a:	4ba6      	ldr	r3, [pc, #664]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800473c:	2201      	movs	r2, #1
 800473e:	2120      	movs	r1, #32
 8004740:	0018      	movs	r0, r3
 8004742:	f002 fc9a 	bl	800707a <HAL_GPIO_WritePin>

		/*OVP*/
		if(Voltage_Actual> 150)
 8004746:	4ba4      	ldr	r3, [pc, #656]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	49a4      	ldr	r1, [pc, #656]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800474c:	1c18      	adds	r0, r3, #0
 800474e:	f7fb fed7 	bl	8000500 <__aeabi_fcmpgt>
 8004752:	1e03      	subs	r3, r0, #0
 8004754:	d01e      	beq.n	8004794 <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			ON_OFF = OFF;
 8004756:	4ba2      	ldr	r3, [pc, #648]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 800475c:	4ba1      	ldr	r3, [pc, #644]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 8004762:	2200      	movs	r2, #0
 8004764:	2108      	movs	r1, #8
 8004766:	2001      	movs	r0, #1
 8004768:	f008 f8e6 	bl	800c938 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 800476c:	f00d fa9c 	bl	8011ca8 <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 8004770:	f00d fb0e 	bl	8011d90 <TIM17_CYCLE_OFF>
			Error |= OVP;
 8004774:	4b9c      	ldr	r3, [pc, #624]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	4313      	orrs	r3, r2
 800477c:	b2da      	uxtb	r2, r3
 800477e:	4b9a      	ldr	r3, [pc, #616]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004780:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 8004782:	4b9a      	ldr	r3, [pc, #616]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004784:	2204      	movs	r2, #4
 8004786:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8004788:	4b98      	ldr	r3, [pc, #608]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800478a:	2201      	movs	r2, #1
 800478c:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 800478e:	4b97      	ldr	r3, [pc, #604]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004790:	2201      	movs	r2, #1
 8004792:	609a      	str	r2, [r3, #8]
		}
		/*OCP*/
		if(Current_Actual > 50)
 8004794:	4b96      	ldr	r3, [pc, #600]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4996      	ldr	r1, [pc, #600]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800479a:	1c18      	adds	r0, r3, #0
 800479c:	f7fb feb0 	bl	8000500 <__aeabi_fcmpgt>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d01e      	beq.n	80047e2 <HAL_TIM_PeriodElapsedCallback+0xea>
		{
			ON_OFF = OFF;
 80047a4:	4b8e      	ldr	r3, [pc, #568]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 80047aa:	4b8e      	ldr	r3, [pc, #568]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 80047b0:	2200      	movs	r2, #0
 80047b2:	2108      	movs	r1, #8
 80047b4:	2001      	movs	r0, #1
 80047b6:	f008 f8bf 	bl	800c938 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 80047ba:	f00d fa75 	bl	8011ca8 <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 80047be:	f00d fae7 	bl	8011d90 <TIM17_CYCLE_OFF>
			Error |= OCP;
 80047c2:	4b89      	ldr	r3, [pc, #548]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2202      	movs	r2, #2
 80047c8:	4313      	orrs	r3, r2
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	4b86      	ldr	r3, [pc, #536]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047ce:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 80047d0:	4b86      	ldr	r3, [pc, #536]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80047d2:	2204      	movs	r2, #4
 80047d4:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 80047d6:	4b85      	ldr	r3, [pc, #532]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80047d8:	2201      	movs	r2, #1
 80047da:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 80047dc:	4b83      	ldr	r3, [pc, #524]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80047de:	2201      	movs	r2, #1
 80047e0:	609a      	str	r2, [r3, #8]
		}
		/*OPP*/
		if(Current_Actual*Voltage_Actual>7500)
 80047e2:	4b83      	ldr	r3, [pc, #524]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b7c      	ldr	r3, [pc, #496]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	1c19      	adds	r1, r3, #0
 80047ec:	1c10      	adds	r0, r2, #0
 80047ee:	f7fc fa37 	bl	8000c60 <__aeabi_fmul>
 80047f2:	1c03      	adds	r3, r0, #0
 80047f4:	4980      	ldr	r1, [pc, #512]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80047f6:	1c18      	adds	r0, r3, #0
 80047f8:	f7fb fe82 	bl	8000500 <__aeabi_fcmpgt>
 80047fc:	1e03      	subs	r3, r0, #0
 80047fe:	d01e      	beq.n	800483e <HAL_TIM_PeriodElapsedCallback+0x146>
		{
			ON_OFF = OFF;
 8004800:	4b77      	ldr	r3, [pc, #476]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8004806:	4b77      	ldr	r3, [pc, #476]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 800480c:	2200      	movs	r2, #0
 800480e:	2108      	movs	r1, #8
 8004810:	2001      	movs	r0, #1
 8004812:	f008 f891 	bl	800c938 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 8004816:	f00d fa47 	bl	8011ca8 <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 800481a:	f00d fab9 	bl	8011d90 <TIM17_CYCLE_OFF>
			Error |= OCP;
 800481e:	4b72      	ldr	r3, [pc, #456]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	4313      	orrs	r3, r2
 8004826:	b2da      	uxtb	r2, r3
 8004828:	4b6f      	ldr	r3, [pc, #444]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800482a:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 800482c:	4b6f      	ldr	r3, [pc, #444]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800482e:	2204      	movs	r2, #4
 8004830:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8004832:	4b6e      	ldr	r3, [pc, #440]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004834:	2201      	movs	r2, #1
 8004836:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8004838:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800483a:	2201      	movs	r2, #1
 800483c:	609a      	str	r2, [r3, #8]
		}
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800483e:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2202      	movs	r2, #2
 8004844:	4252      	negs	r2, r2
 8004846:	611a      	str	r2, [r3, #16]
		__HAL_TIM_DISABLE(&htim1);
 8004848:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4a6b      	ldr	r2, [pc, #428]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004850:	4013      	ands	r3, r2
 8004852:	d10d      	bne.n	8004870 <HAL_TIM_PeriodElapsedCallback+0x178>
 8004854:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4a69      	ldr	r2, [pc, #420]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800485c:	4013      	ands	r3, r2
 800485e:	d107      	bne.n	8004870 <HAL_TIM_PeriodElapsedCallback+0x178>
 8004860:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b58      	ldr	r3, [pc, #352]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2101      	movs	r1, #1
 800486c:	438a      	bics	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

	}
/*********************************************************key scan 1ms********************************************************/
	if(htim==&htim7)
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4b64      	ldr	r3, [pc, #400]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d106      	bne.n	8004886 <HAL_TIM_PeriodElapsedCallback+0x18e>
	{
		Flag.TIM7_IT=1;
 8004878:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800487a:	2201      	movs	r2, #1
 800487c:	605a      	str	r2, [r3, #4]
		key_scan();
 800487e:	f00c fe8d 	bl	801159c <key_scan>
		Encoder_Enter_Handle();
 8004882:	f009 fdcb 	bl	800e41c <Encoder_Enter_Handle>

	}
/********************************************************** encoder **********************************************************/
	if(htim==&htim3)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800488a:	429a      	cmp	r2, r3
 800488c:	d11f      	bne.n	80048ce <HAL_TIM_PeriodElapsedCallback+0x1d6>
	{
		Flag.TIM3_IT=1;
 800488e:	4b5e      	ldr	r3, [pc, #376]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004890:	2201      	movs	r2, #1
 8004892:	609a      	str	r2, [r3, #8]
		static int count;

		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==1)
 8004894:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	4013      	ands	r3, r2
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d104      	bne.n	80048ac <HAL_TIM_PeriodElapsedCallback+0x1b4>
		{
			count=-1;
 80048a2:	4b5a      	ldr	r3, [pc, #360]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	4252      	negs	r2, r2
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e009      	b.n	80048c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>

		}
		else if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==0)
 80048ac:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2210      	movs	r2, #16
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d002      	beq.n	80048c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		{
			count=1;
 80048ba:	4b54      	ldr	r3, [pc, #336]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]

		}
		Flag.Encoder_BF+=count;
 80048c0:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	4b51      	ldr	r3, [pc, #324]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	18d2      	adds	r2, r2, r3
 80048ca:	4b4f      	ldr	r3, [pc, #316]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80048cc:	61da      	str	r2, [r3, #28]

	}
/**********************************************************cursor flash********************************************************/
	if(htim==&htim6)
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d102      	bne.n	80048dc <HAL_TIM_PeriodElapsedCallback+0x1e4>
	{
		Flag.TIM6_IT=1;
 80048d6:	4b4c      	ldr	r3, [pc, #304]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80048d8:	2201      	movs	r2, #1
 80048da:	60da      	str	r2, [r3, #12]
	}
/**********************************************************暂时没用到***********************************************************/
	if(htim==&htim14)
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d102      	bne.n	80048ea <HAL_TIM_PeriodElapsedCallback+0x1f2>
	{
		Flag.TIM14_IT=1;
 80048e4:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	621a      	str	r2, [r3, #32]

	}
/**********************************************************Delay Function*******************************************************/
	if(htim==&htim16)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4b4a      	ldr	r3, [pc, #296]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d116      	bne.n	8004920 <HAL_TIM_PeriodElapsedCallback+0x228>
	{

		TIM16_DELAY_OFF();//到时间了,关闭延时功能
 80048f2:	f00d f9d9 	bl	8011ca8 <TIM16_DELAY_OFF>

		if(Cycle_Function_On_Off == Cycle_Function_On)     //打开了循环功能，调用循环函数
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <HAL_TIM_PeriodElapsedCallback+0x20c>
		{
			TIM17_CYCLE_ON();
 80048fe:	f00d f9f7 	bl	8011cf0 <TIM17_CYCLE_ON>
 8004902:	e008      	b.n	8004916 <HAL_TIM_PeriodElapsedCallback+0x21e>
		}
		else if(Cycle_Function_On_Off == Cycle_Function_Off)
 8004904:	4b45      	ldr	r3, [pc, #276]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PeriodElapsedCallback+0x21e>
		{
			ON_OFF =ON;
 800490c:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
			power_on();
 8004912:	f008 f90b 	bl	800cb2c <power_on>
		}

		__HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 8004916:	4b40      	ldr	r3, [pc, #256]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2202      	movs	r2, #2
 800491c:	4252      	negs	r2, r2
 800491e:	611a      	str	r2, [r3, #16]

	}
/**********************************************************Cycle Function*******************************************************/
	if(htim==&htim17)
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d14a      	bne.n	80049be <HAL_TIM_PeriodElapsedCallback+0x2c6>
	{


		if(OUTPUT_NOT_OUTPUT == OUTPUT)
 8004928:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d146      	bne.n	80049be <HAL_TIM_PeriodElapsedCallback+0x2c6>
		{
			if(ON_OFF == ON)
 8004930:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d11f      	bne.n	8004978 <HAL_TIM_PeriodElapsedCallback+0x280>
			{
				if(Cycle_On_Time > 0) Cycle_On_Time --;
 8004938:	4b3a      	ldr	r3, [pc, #232]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_TIM_PeriodElapsedCallback+0x254>
 8004940:	4b38      	ldr	r3, [pc, #224]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	1e5a      	subs	r2, r3, #1
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004948:	601a      	str	r2, [r3, #0]

	}

/************************************************************* End *************************************************************/

}
 800494a:	e038      	b.n	80049be <HAL_TIM_PeriodElapsedCallback+0x2c6>
					Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 800494c:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	001a      	movs	r2, r3
 8004952:	0013      	movs	r3, r2
 8004954:	015b      	lsls	r3, r3, #5
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	189b      	adds	r3, r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	001a      	movs	r2, r3
 8004960:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	18d3      	adds	r3, r2, r3
 8004966:	001a      	movs	r2, r3
 8004968:	4b2e      	ldr	r3, [pc, #184]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800496a:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=0;
 800496c:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800496e:	2200      	movs	r2, #0
 8004970:	615a      	str	r2, [r3, #20]
					power_off();
 8004972:	f008 f8f3 	bl	800cb5c <power_off>
}
 8004976:	e022      	b.n	80049be <HAL_TIM_PeriodElapsedCallback+0x2c6>
			else if(ON_OFF == OFF)
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11e      	bne.n	80049be <HAL_TIM_PeriodElapsedCallback+0x2c6>
				if(Cycle_Close_Time >0) Cycle_Close_Time --;
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x29c>
 8004988:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	e014      	b.n	80049be <HAL_TIM_PeriodElapsedCallback+0x2c6>
					Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms );
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	001a      	movs	r2, r3
 800499a:	0013      	movs	r3, r2
 800499c:	015b      	lsls	r3, r3, #5
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	001a      	movs	r2, r3
 80049a8:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	001a      	movs	r2, r3
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80049b2:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=1;
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	615a      	str	r2, [r3, #20]
					power_on();
 80049ba:	f008 f8b7 	bl	800cb2c <power_on>
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	20003430 	.word	0x20003430
 80049cc:	20003b19 	.word	0x20003b19
 80049d0:	2000347c 	.word	0x2000347c
 80049d4:	50000800 	.word	0x50000800
 80049d8:	20003b30 	.word	0x20003b30
 80049dc:	43160000 	.word	0x43160000
 80049e0:	20003b1c 	.word	0x20003b1c
 80049e4:	20003b1d 	.word	0x20003b1d
 80049e8:	20003b6d 	.word	0x20003b6d
 80049ec:	20003b8c 	.word	0x20003b8c
 80049f0:	20003b34 	.word	0x20003b34
 80049f4:	42480000 	.word	0x42480000
 80049f8:	45ea6000 	.word	0x45ea6000
 80049fc:	00001111 	.word	0x00001111
 8004a00:	00000444 	.word	0x00000444
 8004a04:	20003514 	.word	0x20003514
 8004a08:	20003384 	.word	0x20003384
 8004a0c:	20003690 	.word	0x20003690
 8004a10:	200034c8 	.word	0x200034c8
 8004a14:	20003560 	.word	0x20003560
 8004a18:	200035f8 	.word	0x200035f8
 8004a1c:	20003b74 	.word	0x20003b74
 8004a20:	20003644 	.word	0x20003644
 8004a24:	20003b78 	.word	0x20003b78
 8004a28:	20003b24 	.word	0x20003b24
 8004a2c:	20002fd4 	.word	0x20002fd4
 8004a30:	20003b7c 	.word	0x20003b7c
 8004a34:	20003b26 	.word	0x20003b26
 8004a38:	20002fd6 	.word	0x20002fd6

08004a3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a42:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <MX_USART1_UART_Init+0x98>)
 8004a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a48:	22e1      	movs	r2, #225	; 0xe1
 8004a4a:	0252      	lsls	r2, r2, #9
 8004a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a54:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a62:	220c      	movs	r2, #12
 8004a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a86:	0018      	movs	r0, r3
 8004a88:	f005 fc24 	bl	800a2d4 <HAL_UART_Init>
 8004a8c:	1e03      	subs	r3, r0, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004a90:	f7fe ff54 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a96:	2100      	movs	r1, #0
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f007 f9bd 	bl	800be18 <HAL_UARTEx_SetTxFifoThreshold>
 8004a9e:	1e03      	subs	r3, r0, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004aa2:	f7fe ff4b 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f007 f9f4 	bl	800be98 <HAL_UARTEx_SetRxFifoThreshold>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d001      	beq.n	8004ab8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ab4:	f7fe ff42 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004aba:	0018      	movs	r0, r3
 8004abc:	f007 f972 	bl	800bda4 <HAL_UARTEx_DisableFifoMode>
 8004ac0:	1e03      	subs	r3, r0, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004ac4:	f7fe ff3a 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	200036ac 	.word	0x200036ac
 8004ad4:	40013800 	.word	0x40013800

08004ad8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <MX_USART2_UART_Init+0xa0>)
 8004ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004ae4:	22e1      	movs	r2, #225	; 0xe1
 8004ae6:	0252      	lsls	r2, r2, #9
 8004ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004aea:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004afe:	220c      	movs	r2, #12
 8004b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b0e:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b14:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b1a:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b22:	0018      	movs	r0, r3
 8004b24:	f005 fbd6 	bl	800a2d4 <HAL_UART_Init>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004b2c:	f7fe ff06 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b32:	2100      	movs	r1, #0
 8004b34:	0018      	movs	r0, r3
 8004b36:	f007 f96f 	bl	800be18 <HAL_UARTEx_SetTxFifoThreshold>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004b3e:	f7fe fefd 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b44:	2100      	movs	r1, #0
 8004b46:	0018      	movs	r0, r3
 8004b48:	f007 f9a6 	bl	800be98 <HAL_UARTEx_SetRxFifoThreshold>
 8004b4c:	1e03      	subs	r3, r0, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b50:	f7fe fef4 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b56:	0018      	movs	r0, r3
 8004b58:	f007 f924 	bl	800bda4 <HAL_UARTEx_DisableFifoMode>
 8004b5c:	1e03      	subs	r3, r0, #0
 8004b5e:	d001      	beq.n	8004b64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b60:	f7fe feec 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  __HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	621a      	str	r2, [r3, #32]
  /* USER CODE END USART2_Init 2 */

}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	20003740 	.word	0x20003740
 8004b78:	40004400 	.word	0x40004400

08004b7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <MX_USART3_UART_Init+0x68>)
 8004b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b86:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b88:	22e1      	movs	r2, #225	; 0xe1
 8004b8a:	0252      	lsls	r2, r2, #9
 8004b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b94:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b9a:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004bc4:	4806      	ldr	r0, [pc, #24]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f007 f860 	bl	800bc90 <HAL_RS485Ex_Init>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8004bd4:	f7fe feb2 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	200037d4 	.word	0x200037d4
 8004be4:	40004800 	.word	0x40004800

08004be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b097      	sub	sp, #92	; 0x5c
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	2344      	movs	r3, #68	; 0x44
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	2314      	movs	r3, #20
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	f00f ff31 	bl	8014a62 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c00:	2428      	movs	r4, #40	; 0x28
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	0018      	movs	r0, r3
 8004c06:	231c      	movs	r3, #28
 8004c08:	001a      	movs	r2, r3
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	f00f ff29 	bl	8014a62 <memset>
  if(uartHandle->Instance==USART1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4abb      	ldr	r2, [pc, #748]	; (8004f04 <HAL_UART_MspInit+0x31c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d148      	bne.n	8004cac <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f002 ff49 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c32:	f7fe fe83 	bl	800393c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c36:	4bb4      	ldr	r3, [pc, #720]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3a:	4bb3      	ldr	r3, [pc, #716]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	01c9      	lsls	r1, r1, #7
 8004c40:	430a      	orrs	r2, r1
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
 8004c44:	4bb0      	ldr	r3, [pc, #704]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	01db      	lsls	r3, r3, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c52:	4bad      	ldr	r3, [pc, #692]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c56:	4bac      	ldr	r3, [pc, #688]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c5e:	4baa      	ldr	r3, [pc, #680]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	2201      	movs	r2, #1
 8004c64:	4013      	ands	r3, r2
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c6a:	2144      	movs	r1, #68	; 0x44
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	22c0      	movs	r2, #192	; 0xc0
 8004c70:	00d2      	lsls	r2, r2, #3
 8004c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	2202      	movs	r2, #2
 8004c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	2200      	movs	r2, #0
 8004c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	2201      	movs	r2, #1
 8004c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	187a      	adds	r2, r7, r1
 8004c8e:	23a0      	movs	r3, #160	; 0xa0
 8004c90:	05db      	lsls	r3, r3, #23
 8004c92:	0011      	movs	r1, r2
 8004c94:	0018      	movs	r0, r3
 8004c96:	f002 f86f 	bl	8006d78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	201b      	movs	r0, #27
 8004ca0:	f001 fd10 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ca4:	201b      	movs	r0, #27
 8004ca6:	f001 fd22 	bl	80066ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004caa:	e127      	b.n	8004efc <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a96      	ldr	r2, [pc, #600]	; (8004f0c <HAL_UART_MspInit+0x324>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d173      	bne.n	8004d9e <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004cb6:	2128      	movs	r1, #40	; 0x28
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	2202      	movs	r2, #2
 8004cbc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f002 fefa 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 8004ccc:	1e03      	subs	r3, r0, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8004cd0:	f7fe fe34 	bl	800393c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cd4:	4b8c      	ldr	r3, [pc, #560]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd8:	4b8b      	ldr	r3, [pc, #556]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	0289      	lsls	r1, r1, #10
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ce2:	4b89      	ldr	r3, [pc, #548]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	4013      	ands	r3, r2
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf0:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf4:	4b84      	ldr	r3, [pc, #528]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	635a      	str	r2, [r3, #52]	; 0x34
 8004cfc:	4b82      	ldr	r3, [pc, #520]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	2201      	movs	r2, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = miniboard1_Pin|miniboard2_Pin;
 8004d08:	2144      	movs	r1, #68	; 0x44
 8004d0a:	187b      	adds	r3, r7, r1
 8004d0c:	220c      	movs	r2, #12
 8004d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	2202      	movs	r2, #2
 8004d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	2200      	movs	r2, #0
 8004d1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	2201      	movs	r2, #1
 8004d26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d28:	187a      	adds	r2, r7, r1
 8004d2a:	23a0      	movs	r3, #160	; 0xa0
 8004d2c:	05db      	lsls	r3, r3, #23
 8004d2e:	0011      	movs	r1, r2
 8004d30:	0018      	movs	r0, r3
 8004d32:	f002 f821 	bl	8006d78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004d36:	4b76      	ldr	r3, [pc, #472]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d38:	4a76      	ldr	r2, [pc, #472]	; (8004f14 <HAL_UART_MspInit+0x32c>)
 8004d3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004d3c:	4b74      	ldr	r3, [pc, #464]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d3e:	2234      	movs	r2, #52	; 0x34
 8004d40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d42:	4b73      	ldr	r3, [pc, #460]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d48:	4b71      	ldr	r3, [pc, #452]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d4e:	4b70      	ldr	r3, [pc, #448]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d54:	4b6e      	ldr	r3, [pc, #440]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d5a:	4b6d      	ldr	r3, [pc, #436]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d60:	4b6b      	ldr	r3, [pc, #428]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d66:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	0152      	lsls	r2, r2, #5
 8004d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d6e:	4b68      	ldr	r3, [pc, #416]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d70:	0018      	movs	r0, r3
 8004d72:	f001 fcd9 	bl	8006728 <HAL_DMA_Init>
 8004d76:	1e03      	subs	r3, r0, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8004d7a:	f7fe fddf 	bl	800393c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	4a63      	ldr	r2, [pc, #396]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d84:	505a      	str	r2, [r3, r1]
 8004d86:	4b62      	ldr	r3, [pc, #392]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	201c      	movs	r0, #28
 8004d92:	f001 fc97 	bl	80066c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d96:	201c      	movs	r0, #28
 8004d98:	f001 fca9 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 8004d9c:	e0ae      	b.n	8004efc <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART3)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <HAL_UART_MspInit+0x330>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d000      	beq.n	8004daa <HAL_UART_MspInit+0x1c2>
 8004da8:	e0a8      	b.n	8004efc <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004daa:	4b57      	ldr	r3, [pc, #348]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dae:	4b56      	ldr	r3, [pc, #344]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004db0:	2180      	movs	r1, #128	; 0x80
 8004db2:	02c9      	lsls	r1, r1, #11
 8004db4:	430a      	orrs	r2, r1
 8004db6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004db8:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	02db      	lsls	r3, r3, #11
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc6:	4b50      	ldr	r3, [pc, #320]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dcc:	2101      	movs	r1, #1
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8004dd2:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dde:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de2:	4b49      	ldr	r3, [pc, #292]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004de4:	2102      	movs	r1, #2
 8004de6:	430a      	orrs	r2, r1
 8004de8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dea:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	2202      	movs	r2, #2
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004df6:	2144      	movs	r1, #68	; 0x44
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	2280      	movs	r2, #128	; 0x80
 8004dfc:	0212      	lsls	r2, r2, #8
 8004dfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e00:	000c      	movs	r4, r1
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	2202      	movs	r2, #2
 8004e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	2200      	movs	r2, #0
 8004e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART3;
 8004e14:	193b      	adds	r3, r7, r4
 8004e16:	2205      	movs	r2, #5
 8004e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1a:	193a      	adds	r2, r7, r4
 8004e1c:	23a0      	movs	r3, #160	; 0xa0
 8004e1e:	05db      	lsls	r3, r3, #23
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f001 ffa8 	bl	8006d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e28:	0021      	movs	r1, r4
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	22c0      	movs	r2, #192	; 0xc0
 8004e2e:	0092      	lsls	r2, r2, #2
 8004e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	2202      	movs	r2, #2
 8004e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3e:	187b      	adds	r3, r7, r1
 8004e40:	2200      	movs	r2, #0
 8004e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	2204      	movs	r2, #4
 8004e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	4a33      	ldr	r2, [pc, #204]	; (8004f1c <HAL_UART_MspInit+0x334>)
 8004e4e:	0019      	movs	r1, r3
 8004e50:	0010      	movs	r0, r2
 8004e52:	f001 ff91 	bl	8006d78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel4;
 8004e56:	4b32      	ldr	r3, [pc, #200]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e58:	4a32      	ldr	r2, [pc, #200]	; (8004f24 <HAL_UART_MspInit+0x33c>)
 8004e5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004e5c:	4b30      	ldr	r3, [pc, #192]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e5e:	2236      	movs	r2, #54	; 0x36
 8004e60:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e68:	4b2d      	ldr	r3, [pc, #180]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e6e:	4b2c      	ldr	r3, [pc, #176]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f001 fc4a 	bl	8006728 <HAL_DMA_Init>
 8004e94:	1e03      	subs	r3, r0, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8004e98:	f7fe fd50 	bl	800393c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2180      	movs	r1, #128	; 0x80
 8004ea0:	4a1f      	ldr	r2, [pc, #124]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004ea2:	505a      	str	r2, [r3, r1]
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel5;
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <HAL_UART_MspInit+0x344>)
 8004eae:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eb2:	2237      	movs	r2, #55	; 0x37
 8004eb4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eb8:	2210      	movs	r2, #16
 8004eba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ec4:	2280      	movs	r2, #128	; 0x80
 8004ec6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f001 fc20 	bl	8006728 <HAL_DMA_Init>
 8004ee8:	1e03      	subs	r3, r0, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_UART_MspInit+0x308>
      Error_Handler();
 8004eec:	f7fe fd26 	bl	800393c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ef4:	67da      	str	r2, [r3, #124]	; 0x7c
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b017      	add	sp, #92	; 0x5c
 8004f02:	bd90      	pop	{r4, r7, pc}
 8004f04:	40013800 	.word	0x40013800
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40004400 	.word	0x40004400
 8004f10:	20003868 	.word	0x20003868
 8004f14:	40020008 	.word	0x40020008
 8004f18:	40004800 	.word	0x40004800
 8004f1c:	50000400 	.word	0x50000400
 8004f20:	200038c4 	.word	0x200038c4
 8004f24:	40020044 	.word	0x40020044
 8004f28:	20003920 	.word	0x20003920
 8004f2c:	40020058 	.word	0x40020058

08004f30 <Swap>:
        }
    }
}

static void Swap(float * a,float * b)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	float  temp=*a;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
	*a=*b;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
	*b=temp;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	601a      	str	r2, [r3, #0]
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b004      	add	sp, #16
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <BubbleSort>:

// 冒泡排序
void BubbleSort(float* a, int n)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]

	int i = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
	int flag = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]

    //n-1趟排序
	for (i = 0; i < n-1; i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e032      	b.n	8004fd4 <BubbleSort+0x7e>
	{
		int j = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]

        //一趟冒泡排序
		for (j = 0; j < n - i - 1; j++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	e020      	b.n	8004fba <BubbleSort+0x64>
		{
			if (a[j] > a[j+1])
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	18d3      	adds	r3, r2, r3
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3301      	adds	r3, #1
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	18d3      	adds	r3, r2, r3
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	1c19      	adds	r1, r3, #0
 8004f90:	f7fb fab6 	bl	8000500 <__aeabi_fcmpgt>
 8004f94:	1e03      	subs	r3, r0, #0
 8004f96:	d00d      	beq.n	8004fb4 <BubbleSort+0x5e>
			{
				Swap(&a[j], &a[j+1]);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	18d0      	adds	r0, r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	18d3      	adds	r3, r2, r3
 8004faa:	0019      	movs	r1, r3
 8004fac:	f7ff ffc0 	bl	8004f30 <Swap>
				flag = 1;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	613b      	str	r3, [r7, #16]
		for (j = 0; j < n - i - 1; j++)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbd7      	blt.n	8004f78 <BubbleSort+0x22>
			}
		}

        //若某一趟排序中没有元素交换则说明所有元素已经有序，不需要再排序
		if (flag == 0)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d008      	beq.n	8004fe0 <BubbleSort+0x8a>
	for (i = 0; i < n-1; i++)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	dbc7      	blt.n	8004f6e <BubbleSort+0x18>
		{
			break;
		}
	}
}
 8004fde:	e000      	b.n	8004fe2 <BubbleSort+0x8c>
			break;
 8004fe0:	46c0      	nop			; (mov r8, r8)
}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b006      	add	sp, #24
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <USART2_IDLECallback>:
  * @brief  串口2的接收空闲回调，用于和控制板通信
  * @param  None
  * @retval None
  */
void USART2_IDLECallback(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0

	HAL_UART_DMAStop(&huart2);
 8004ff2:	4b67      	ldr	r3, [pc, #412]	; (8005190 <USART2_IDLECallback+0x1a4>)
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f005 fac2 	bl	800a57e <HAL_UART_DMAStop>


	if(Uart2_Receive_buffer[0]==RS232_ID||Uart2_Receive_buffer[0]==0)
 8004ffa:	4b66      	ldr	r3, [pc, #408]	; (8005194 <USART2_IDLECallback+0x1a8>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	4b65      	ldr	r3, [pc, #404]	; (8005198 <USART2_IDLECallback+0x1ac>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d004      	beq.n	8005012 <USART2_IDLECallback+0x26>
 8005008:	4b62      	ldr	r3, [pc, #392]	; (8005194 <USART2_IDLECallback+0x1a8>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d000      	beq.n	8005012 <USART2_IDLECallback+0x26>
 8005010:	e0af      	b.n	8005172 <USART2_IDLECallback+0x186>

		}
#endif

#ifdef ADD_CHECK
		uint16_t addvalue=( (Uart2_Receive_buffer [USART2_Received_Length-2])|(Uart2_Receive_buffer[USART2_Received_Length-1]<<8) );
 8005012:	4b62      	ldr	r3, [pc, #392]	; (800519c <USART2_IDLECallback+0x1b0>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	3b02      	subs	r3, #2
 8005018:	4a5e      	ldr	r2, [pc, #376]	; (8005194 <USART2_IDLECallback+0x1a8>)
 800501a:	5cd3      	ldrb	r3, [r2, r3]
 800501c:	b21a      	sxth	r2, r3
 800501e:	4b5f      	ldr	r3, [pc, #380]	; (800519c <USART2_IDLECallback+0x1b0>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	3b01      	subs	r3, #1
 8005024:	495b      	ldr	r1, [pc, #364]	; (8005194 <USART2_IDLECallback+0x1a8>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	b21b      	sxth	r3, r3
 800502c:	4313      	orrs	r3, r2
 800502e:	b21a      	sxth	r2, r3
 8005030:	1dbb      	adds	r3, r7, #6
 8005032:	801a      	strh	r2, [r3, #0]
		//接收端用CRC16算法对接到的数据进行校验，计算出的结果和传过来的CRC字节比较是否相等
		if(addvalue==ADD(Uart2_Receive_buffer,USART2_Received_Length-2))
 8005034:	4b59      	ldr	r3, [pc, #356]	; (800519c <USART2_IDLECallback+0x1b0>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	3b02      	subs	r3, #2
 800503a:	b2da      	uxtb	r2, r3
 800503c:	4b55      	ldr	r3, [pc, #340]	; (8005194 <USART2_IDLECallback+0x1a8>)
 800503e:	0011      	movs	r1, r2
 8005040:	0018      	movs	r0, r3
 8005042:	f007 fc47 	bl	800c8d4 <ADD>
 8005046:	0003      	movs	r3, r0
 8005048:	001a      	movs	r2, r3
 800504a:	1dbb      	adds	r3, r7, #6
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	4293      	cmp	r3, r2
 8005050:	d000      	beq.n	8005054 <USART2_IDLECallback+0x68>
 8005052:	e08e      	b.n	8005172 <USART2_IDLECallback+0x186>
		{
				switch(Uart2_Receive_buffer[1])
 8005054:	4b4f      	ldr	r3, [pc, #316]	; (8005194 <USART2_IDLECallback+0x1a8>)
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d100      	bne.n	800505e <USART2_IDLECallback+0x72>
 800505c:	e08b      	b.n	8005176 <USART2_IDLECallback+0x18a>
 800505e:	2b12      	cmp	r3, #18
 8005060:	d000      	beq.n	8005064 <USART2_IDLECallback+0x78>
						break;
					}



					default: break;
 8005062:	e08b      	b.n	800517c <USART2_IDLECallback+0x190>
						Voltage_Actual=ADC_Gain_V*(Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4])+Eror_ADC_V;
 8005064:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <USART2_IDLECallback+0x1a8>)
 8005066:	78db      	ldrb	r3, [r3, #3]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	4a4a      	ldr	r2, [pc, #296]	; (8005194 <USART2_IDLECallback+0x1a8>)
 800506c:	7912      	ldrb	r2, [r2, #4]
 800506e:	189b      	adds	r3, r3, r2
 8005070:	0018      	movs	r0, r3
 8005072:	f7fc f8e9 	bl	8001248 <__aeabi_i2f>
 8005076:	1c02      	adds	r2, r0, #0
 8005078:	4b49      	ldr	r3, [pc, #292]	; (80051a0 <USART2_IDLECallback+0x1b4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	1c19      	adds	r1, r3, #0
 800507e:	1c10      	adds	r0, r2, #0
 8005080:	f7fb fdee 	bl	8000c60 <__aeabi_fmul>
 8005084:	1c03      	adds	r3, r0, #0
 8005086:	1c1a      	adds	r2, r3, #0
 8005088:	4b46      	ldr	r3, [pc, #280]	; (80051a4 <USART2_IDLECallback+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	1c19      	adds	r1, r3, #0
 800508e:	1c10      	adds	r0, r2, #0
 8005090:	f7fb fa80 	bl	8000594 <__aeabi_fadd>
 8005094:	1c03      	adds	r3, r0, #0
 8005096:	1c1a      	adds	r2, r3, #0
 8005098:	4b43      	ldr	r3, [pc, #268]	; (80051a8 <USART2_IDLECallback+0x1bc>)
 800509a:	601a      	str	r2, [r3, #0]
						Current_Actual=ADC_Gain_I*(Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6])+Eror_ADC_I;
 800509c:	4b3d      	ldr	r3, [pc, #244]	; (8005194 <USART2_IDLECallback+0x1a8>)
 800509e:	795b      	ldrb	r3, [r3, #5]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <USART2_IDLECallback+0x1a8>)
 80050a4:	7992      	ldrb	r2, [r2, #6]
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	0018      	movs	r0, r3
 80050aa:	f7fc f8cd 	bl	8001248 <__aeabi_i2f>
 80050ae:	1c02      	adds	r2, r0, #0
 80050b0:	4b3e      	ldr	r3, [pc, #248]	; (80051ac <USART2_IDLECallback+0x1c0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	1c19      	adds	r1, r3, #0
 80050b6:	1c10      	adds	r0, r2, #0
 80050b8:	f7fb fdd2 	bl	8000c60 <__aeabi_fmul>
 80050bc:	1c03      	adds	r3, r0, #0
 80050be:	1c1a      	adds	r2, r3, #0
 80050c0:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <USART2_IDLECallback+0x1c4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1c19      	adds	r1, r3, #0
 80050c6:	1c10      	adds	r0, r2, #0
 80050c8:	f7fb fa64 	bl	8000594 <__aeabi_fadd>
 80050cc:	1c03      	adds	r3, r0, #0
 80050ce:	1c1a      	adds	r2, r3, #0
 80050d0:	4b38      	ldr	r3, [pc, #224]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 80050d2:	601a      	str	r2, [r3, #0]
						Current_Actual*=1000;//61mv/A
 80050d4:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4937      	ldr	r1, [pc, #220]	; (80051b8 <USART2_IDLECallback+0x1cc>)
 80050da:	1c18      	adds	r0, r3, #0
 80050dc:	f7fb fdc0 	bl	8000c60 <__aeabi_fmul>
 80050e0:	1c03      	adds	r3, r0, #0
 80050e2:	1c1a      	adds	r2, r3, #0
 80050e4:	4b33      	ldr	r3, [pc, #204]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 80050e6:	601a      	str	r2, [r3, #0]
						Current_Actual/=61;
 80050e8:	4b32      	ldr	r3, [pc, #200]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4933      	ldr	r1, [pc, #204]	; (80051bc <USART2_IDLECallback+0x1d0>)
 80050ee:	1c18      	adds	r0, r3, #0
 80050f0:	f7fb fbee 	bl	80008d0 <__aeabi_fdiv>
 80050f4:	1c03      	adds	r3, r0, #0
 80050f6:	1c1a      	adds	r2, r3, #0
 80050f8:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 80050fa:	601a      	str	r2, [r3, #0]
						if(Flag.Current_error==1)
 80050fc:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <USART2_IDLECallback+0x1d4>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d125      	bne.n	8005150 <USART2_IDLECallback+0x164>
							if(index==100)
 8005104:	4b2f      	ldr	r3, [pc, #188]	; (80051c4 <USART2_IDLECallback+0x1d8>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b64      	cmp	r3, #100	; 0x64
 800510a:	d113      	bne.n	8005134 <USART2_IDLECallback+0x148>
								BubbleSort(&Current_error[0],index);
 800510c:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <USART2_IDLECallback+0x1d8>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	001a      	movs	r2, r3
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <USART2_IDLECallback+0x1dc>)
 8005114:	0011      	movs	r1, r2
 8005116:	0018      	movs	r0, r3
 8005118:	f7ff ff1d 	bl	8004f56 <BubbleSort>
								Current_Error=Current_error[50];
 800511c:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <USART2_IDLECallback+0x1dc>)
 800511e:	22c8      	movs	r2, #200	; 0xc8
 8005120:	589a      	ldr	r2, [r3, r2]
 8005122:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <USART2_IDLECallback+0x1e0>)
 8005124:	601a      	str	r2, [r3, #0]
								index=0;
 8005126:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <USART2_IDLECallback+0x1d8>)
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]
								Flag.Current_error=0;
 800512c:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <USART2_IDLECallback+0x1d4>)
 800512e:	2200      	movs	r2, #0
 8005130:	62da      	str	r2, [r3, #44]	; 0x2c
								return;
 8005132:	e029      	b.n	8005188 <USART2_IDLECallback+0x19c>
							Current_error[index]=Current_Actual;
 8005134:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <USART2_IDLECallback+0x1d8>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	001a      	movs	r2, r3
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 800513c:	6819      	ldr	r1, [r3, #0]
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <USART2_IDLECallback+0x1dc>)
 8005140:	0092      	lsls	r2, r2, #2
 8005142:	50d1      	str	r1, [r2, r3]
							index++;
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <USART2_IDLECallback+0x1d8>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	3301      	adds	r3, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <USART2_IDLECallback+0x1d8>)
 800514e:	701a      	strb	r2, [r3, #0]
						if(Flag.Current_error==0)
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <USART2_IDLECallback+0x1d4>)
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d110      	bne.n	800517a <USART2_IDLECallback+0x18e>
							Current_Actual-=Current_Error;//偏置
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <USART2_IDLECallback+0x1e0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	1c19      	adds	r1, r3, #0
 8005162:	1c10      	adds	r0, r2, #0
 8005164:	f7fb fea2 	bl	8000eac <__aeabi_fsub>
 8005168:	1c03      	adds	r3, r0, #0
 800516a:	1c1a      	adds	r2, r3, #0
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <USART2_IDLECallback+0x1c8>)
 800516e:	601a      	str	r2, [r3, #0]
						break;
 8005170:	e003      	b.n	800517a <USART2_IDLECallback+0x18e>
				}

		}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	e002      	b.n	800517c <USART2_IDLECallback+0x190>
						break;
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	e000      	b.n	800517c <USART2_IDLECallback+0x190>
						break;
 800517a:	46c0      	nop			; (mov r8, r8)

	}



	HAL_UART_Receive_DMA(&huart2, &Uart2_Receive_buffer[0],9);
 800517c:	4905      	ldr	r1, [pc, #20]	; (8005194 <USART2_IDLECallback+0x1a8>)
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <USART2_IDLECallback+0x1a4>)
 8005180:	2209      	movs	r2, #9
 8005182:	0018      	movs	r0, r3
 8005184:	f005 f9a4 	bl	800a4d0 <HAL_UART_Receive_DMA>


}
 8005188:	46bd      	mov	sp, r7
 800518a:	b002      	add	sp, #8
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	20003740 	.word	0x20003740
 8005194:	200036a0 	.word	0x200036a0
 8005198:	200030d4 	.word	0x200030d4
 800519c:	20000004 	.word	0x20000004
 80051a0:	20002fe8 	.word	0x20002fe8
 80051a4:	20002ff0 	.word	0x20002ff0
 80051a8:	20003b30 	.word	0x20003b30
 80051ac:	20002fec 	.word	0x20002fec
 80051b0:	20002ff4 	.word	0x20002ff4
 80051b4:	20003b34 	.word	0x20003b34
 80051b8:	447a0000 	.word	0x447a0000
 80051bc:	42740000 	.word	0x42740000
 80051c0:	20003384 	.word	0x20003384
 80051c4:	20003b0c 	.word	0x20003b0c
 80051c8:	2000397c 	.word	0x2000397c
 80051cc:	20003b80 	.word	0x20003b80

080051d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051d0:	480d      	ldr	r0, [pc, #52]	; (8005208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051d4:	f7fe fe26 	bl	8003e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051d8:	480c      	ldr	r0, [pc, #48]	; (800520c <LoopForever+0x6>)
  ldr r1, =_edata
 80051da:	490d      	ldr	r1, [pc, #52]	; (8005210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051dc:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <LoopForever+0xe>)
  movs r3, #0
 80051de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051e0:	e002      	b.n	80051e8 <LoopCopyDataInit>

080051e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051e6:	3304      	adds	r3, #4

080051e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051ec:	d3f9      	bcc.n	80051e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051f0:	4c0a      	ldr	r4, [pc, #40]	; (800521c <LoopForever+0x16>)
  movs r3, #0
 80051f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051f4:	e001      	b.n	80051fa <LoopFillZerobss>

080051f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051f8:	3204      	adds	r2, #4

080051fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051fc:	d3fb      	bcc.n	80051f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80051fe:	f00f fbf9 	bl	80149f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005202:	f7fe f941 	bl	8003488 <main>

08005206 <LoopForever>:

LoopForever:
  b LoopForever
 8005206:	e7fe      	b.n	8005206 <LoopForever>
  ldr   r0, =_estack
 8005208:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800520c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005210:	200032a8 	.word	0x200032a8
  ldr r2, =_sidata
 8005214:	08019258 	.word	0x08019258
  ldr r2, =_sbss
 8005218:	200032a8 	.word	0x200032a8
  ldr r4, =_ebss
 800521c:	20003c38 	.word	0x20003c38

08005220 <EXTI0_1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005220:	e7fe      	b.n	8005220 <EXTI0_1_IRQHandler>
	...

08005224 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800522a:	1dfb      	adds	r3, r7, #7
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_Init+0x3c>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_Init+0x3c>)
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	0049      	lsls	r1, r1, #1
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800523e:	2003      	movs	r0, #3
 8005240:	f000 f810 	bl	8005264 <HAL_InitTick>
 8005244:	1e03      	subs	r3, r0, #0
 8005246:	d003      	beq.n	8005250 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005248:	1dfb      	adds	r3, r7, #7
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e001      	b.n	8005254 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005250:	f7fe fc28 	bl	8003aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005254:	1dfb      	adds	r3, r7, #7
 8005256:	781b      	ldrb	r3, [r3, #0]
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	b002      	add	sp, #8
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40022000 	.word	0x40022000

08005264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800526c:	230f      	movs	r3, #15
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005274:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <HAL_InitTick+0x88>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02b      	beq.n	80052d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800527c:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <HAL_InitTick+0x8c>)
 800527e:	681c      	ldr	r4, [r3, #0]
 8005280:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <HAL_InitTick+0x88>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	0019      	movs	r1, r3
 8005286:	23fa      	movs	r3, #250	; 0xfa
 8005288:	0098      	lsls	r0, r3, #2
 800528a:	f7fa ff5f 	bl	800014c <__udivsi3>
 800528e:	0003      	movs	r3, r0
 8005290:	0019      	movs	r1, r3
 8005292:	0020      	movs	r0, r4
 8005294:	f7fa ff5a 	bl	800014c <__udivsi3>
 8005298:	0003      	movs	r3, r0
 800529a:	0018      	movs	r0, r3
 800529c:	f001 fa37 	bl	800670e <HAL_SYSTICK_Config>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d112      	bne.n	80052ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d80a      	bhi.n	80052c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	2301      	movs	r3, #1
 80052ae:	425b      	negs	r3, r3
 80052b0:	2200      	movs	r2, #0
 80052b2:	0018      	movs	r0, r3
 80052b4:	f001 fa06 	bl	80066c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <HAL_InitTick+0x90>)
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e00d      	b.n	80052dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80052c0:	230f      	movs	r3, #15
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e008      	b.n	80052dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052ca:	230f      	movs	r3, #15
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e003      	b.n	80052dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052d4:	230f      	movs	r3, #15
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80052dc:	230f      	movs	r3, #15
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	781b      	ldrb	r3, [r3, #0]
}
 80052e2:	0018      	movs	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b005      	add	sp, #20
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	2000000c 	.word	0x2000000c
 80052f0:	20000000 	.word	0x20000000
 80052f4:	20000008 	.word	0x20000008

080052f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_IncTick+0x1c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	001a      	movs	r2, r3
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_IncTick+0x20>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	18d2      	adds	r2, r2, r3
 8005308:	4b03      	ldr	r3, [pc, #12]	; (8005318 <HAL_IncTick+0x20>)
 800530a:	601a      	str	r2, [r3, #0]
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	2000000c 	.word	0x2000000c
 8005318:	20003b10 	.word	0x20003b10

0800531c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  return uwTick;
 8005320:	4b02      	ldr	r3, [pc, #8]	; (800532c <HAL_GetTick+0x10>)
 8005322:	681b      	ldr	r3, [r3, #0]
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	20003b10 	.word	0x20003b10

08005330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005338:	f7ff fff0 	bl	800531c <HAL_GetTick>
 800533c:	0003      	movs	r3, r0
 800533e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	d005      	beq.n	8005356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_Delay+0x44>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	001a      	movs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	189b      	adds	r3, r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	f7ff ffe0 	bl	800531c <HAL_GetTick>
 800535c:	0002      	movs	r2, r0
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	429a      	cmp	r2, r3
 8005366:	d8f7      	bhi.n	8005358 <HAL_Delay+0x28>
  {
  }
}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b004      	add	sp, #16
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	2000000c 	.word	0x2000000c

08005378 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005388:	401a      	ands	r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	fe3fffff 	.word	0xfe3fffff

080053a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	23e0      	movs	r3, #224	; 0xe0
 80053ae:	045b      	lsls	r3, r3, #17
 80053b0:	4013      	ands	r3, r2
}
 80053b2:	0018      	movs	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b002      	add	sp, #8
 80053b8:	bd80      	pop	{r7, pc}

080053ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	2104      	movs	r1, #4
 80053ce:	400a      	ands	r2, r1
 80053d0:	2107      	movs	r1, #7
 80053d2:	4091      	lsls	r1, r2
 80053d4:	000a      	movs	r2, r1
 80053d6:	43d2      	mvns	r2, r2
 80053d8:	401a      	ands	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2104      	movs	r1, #4
 80053de:	400b      	ands	r3, r1
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4099      	lsls	r1, r3
 80053e4:	000b      	movs	r3, r1
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	2104      	movs	r1, #4
 8005406:	400a      	ands	r2, r1
 8005408:	2107      	movs	r1, #7
 800540a:	4091      	lsls	r1, r2
 800540c:	000a      	movs	r2, r1
 800540e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2104      	movs	r1, #4
 8005414:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005416:	40da      	lsrs	r2, r3
 8005418:	0013      	movs	r3, r2
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b002      	add	sp, #8
 8005420:	bd80      	pop	{r7, pc}

08005422 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	23c0      	movs	r3, #192	; 0xc0
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	4013      	ands	r3, r2
 8005434:	d101      	bne.n	800543a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	211f      	movs	r1, #31
 8005458:	400a      	ands	r2, r1
 800545a:	210f      	movs	r1, #15
 800545c:	4091      	lsls	r1, r2
 800545e:	000a      	movs	r2, r1
 8005460:	43d2      	mvns	r2, r2
 8005462:	401a      	ands	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	0e9b      	lsrs	r3, r3, #26
 8005468:	210f      	movs	r1, #15
 800546a:	4019      	ands	r1, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	201f      	movs	r0, #31
 8005470:	4003      	ands	r3, r0
 8005472:	4099      	lsls	r1, r3
 8005474:	000b      	movs	r3, r1
 8005476:	431a      	orrs	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}

08005484 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	035b      	lsls	r3, r3, #13
 8005496:	0b5b      	lsrs	r3, r3, #13
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b002      	add	sp, #8
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	0352      	lsls	r2, r2, #13
 80054b8:	0b52      	lsrs	r2, r2, #13
 80054ba:	43d2      	mvns	r2, r2
 80054bc:	401a      	ands	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b002      	add	sp, #8
 80054c8:	bd80      	pop	{r7, pc}

080054ca <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2203      	movs	r2, #3
 80054d8:	4013      	ands	r3, r2
}
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	b002      	add	sp, #8
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	0212      	lsls	r2, r2, #8
 80054f8:	43d2      	mvns	r2, r2
 80054fa:	401a      	ands	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	400b      	ands	r3, r1
 8005504:	4904      	ldr	r1, [pc, #16]	; (8005518 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005506:	400b      	ands	r3, r1
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	b004      	add	sp, #16
 8005514:	bd80      	pop	{r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	07ffff00 	.word	0x07ffff00

0800551c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a05      	ldr	r2, [pc, #20]	; (8005540 <LL_ADC_EnableInternalRegulator+0x24>)
 800552a:	4013      	ands	r3, r2
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	0552      	lsls	r2, r2, #21
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	46bd      	mov	sp, r7
 800553a:	b002      	add	sp, #8
 800553c:	bd80      	pop	{r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	6fffffe8 	.word	0x6fffffe8

08005544 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	055b      	lsls	r3, r3, #21
 8005554:	401a      	ands	r2, r3
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	055b      	lsls	r3, r3, #21
 800555a:	429a      	cmp	r2, r3
 800555c:	d101      	bne.n	8005562 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005562:	2300      	movs	r3, #0
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}

0800556c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <LL_ADC_Enable+0x20>)
 800557a:	4013      	ands	r3, r2
 800557c:	2201      	movs	r2, #1
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	46bd      	mov	sp, r7
 8005588:	b002      	add	sp, #8
 800558a:	bd80      	pop	{r7, pc}
 800558c:	7fffffe8 	.word	0x7fffffe8

08005590 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <LL_ADC_Disable+0x20>)
 800559e:	4013      	ands	r3, r2
 80055a0:	2202      	movs	r2, #2
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80055a8:	46c0      	nop			; (mov r8, r8)
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b002      	add	sp, #8
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	7fffffe8 	.word	0x7fffffe8

080055b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2201      	movs	r2, #1
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <LL_ADC_IsEnabled+0x18>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <LL_ADC_IsEnabled+0x1a>
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	0018      	movs	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b002      	add	sp, #8
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2202      	movs	r2, #2
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d101      	bne.n	80055ee <LL_ADC_IsDisableOngoing+0x18>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <LL_ADC_IsDisableOngoing+0x1a>
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4a04      	ldr	r2, [pc, #16]	; (8005618 <LL_ADC_REG_StartConversion+0x20>)
 8005606:	4013      	ands	r3, r2
 8005608:	2204      	movs	r2, #4
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}
 8005618:	7fffffe8 	.word	0x7fffffe8

0800561c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a04      	ldr	r2, [pc, #16]	; (800563c <LL_ADC_REG_StopConversion+0x20>)
 800562a:	4013      	ands	r3, r2
 800562c:	2210      	movs	r2, #16
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	b002      	add	sp, #8
 800563a:	bd80      	pop	{r7, pc}
 800563c:	7fffffe8 	.word	0x7fffffe8

08005640 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2204      	movs	r2, #4
 800564e:	4013      	ands	r3, r2
 8005650:	2b04      	cmp	r3, #4
 8005652:	d101      	bne.n	8005658 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005658:	2300      	movs	r3, #0
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	b002      	add	sp, #8
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800566c:	231f      	movs	r3, #31
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e17f      	b.n	800598a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0018      	movs	r0, r3
 8005696:	f7fd fd7b 	bl	8003190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2254      	movs	r2, #84	; 0x54
 80056a4:	2100      	movs	r1, #0
 80056a6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f7ff ff49 	bl	8005544 <LL_ADC_IsInternalRegulatorEnabled>
 80056b2:	1e03      	subs	r3, r0, #0
 80056b4:	d115      	bne.n	80056e2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f7ff ff2e 	bl	800551c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056c0:	4bb4      	ldr	r3, [pc, #720]	; (8005994 <HAL_ADC_Init+0x330>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	49b4      	ldr	r1, [pc, #720]	; (8005998 <HAL_ADC_Init+0x334>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fa fd40 	bl	800014c <__udivsi3>
 80056cc:	0003      	movs	r3, r0
 80056ce:	3301      	adds	r3, #1
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056d4:	e002      	b.n	80056dc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b01      	subs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f9      	bne.n	80056d6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	0018      	movs	r0, r3
 80056e8:	f7ff ff2c 	bl	8005544 <LL_ADC_IsInternalRegulatorEnabled>
 80056ec:	1e03      	subs	r3, r0, #0
 80056ee:	d10f      	bne.n	8005710 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	2210      	movs	r2, #16
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	2201      	movs	r2, #1
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005708:	231f      	movs	r3, #31
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	0018      	movs	r0, r3
 8005716:	f7ff ff93 	bl	8005640 <LL_ADC_REG_IsConversionOngoing>
 800571a:	0003      	movs	r3, r0
 800571c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	2210      	movs	r2, #16
 8005724:	4013      	ands	r3, r2
 8005726:	d000      	beq.n	800572a <HAL_ADC_Init+0xc6>
 8005728:	e122      	b.n	8005970 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d000      	beq.n	8005732 <HAL_ADC_Init+0xce>
 8005730:	e11e      	b.n	8005970 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	4a99      	ldr	r2, [pc, #612]	; (800599c <HAL_ADC_Init+0x338>)
 8005738:	4013      	ands	r3, r2
 800573a:	2202      	movs	r2, #2
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	0018      	movs	r0, r3
 8005748:	f7ff ff34 	bl	80055b4 <LL_ADC_IsEnabled>
 800574c:	1e03      	subs	r3, r0, #0
 800574e:	d000      	beq.n	8005752 <HAL_ADC_Init+0xee>
 8005750:	e0ad      	b.n	80058ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	7e1b      	ldrb	r3, [r3, #24]
 800575a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800575c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7e5b      	ldrb	r3, [r3, #25]
 8005762:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005764:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7e9b      	ldrb	r3, [r3, #26]
 800576a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800576c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_ADC_Init+0x118>
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	015b      	lsls	r3, r3, #5
 800577a:	e000      	b.n	800577e <HAL_ADC_Init+0x11a>
 800577c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800577e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005784:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	da04      	bge.n	8005798 <HAL_ADC_Init+0x134>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	e001      	b.n	800579c <HAL_ADC_Init+0x138>
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800579c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	212c      	movs	r1, #44	; 0x2c
 80057a2:	5c5b      	ldrb	r3, [r3, r1]
 80057a4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80057a6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	5c9b      	ldrb	r3, [r3, r2]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d115      	bne.n	80057e4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7e9b      	ldrb	r3, [r3, #26]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2280      	movs	r2, #128	; 0x80
 80057c4:	0252      	lsls	r2, r2, #9
 80057c6:	4313      	orrs	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e00b      	b.n	80057e4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d0:	2220      	movs	r2, #32
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	2201      	movs	r2, #1
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f0:	23e0      	movs	r3, #224	; 0xe0
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80057fa:	4313      	orrs	r3, r2
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4a65      	ldr	r2, [pc, #404]	; (80059a0 <HAL_ADC_Init+0x33c>)
 800580a:	4013      	ands	r3, r2
 800580c:	0019      	movs	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	430a      	orrs	r2, r1
 8005816:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	0f9b      	lsrs	r3, r3, #30
 800581e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005824:	4313      	orrs	r3, r2
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	223c      	movs	r2, #60	; 0x3c
 8005830:	5c9b      	ldrb	r3, [r3, r2]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d111      	bne.n	800585a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	0f9b      	lsrs	r3, r3, #30
 800583c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005842:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005848:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800584e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	2201      	movs	r2, #1
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4a50      	ldr	r2, [pc, #320]	; (80059a4 <HAL_ADC_Init+0x340>)
 8005862:	4013      	ands	r3, r2
 8005864:	0019      	movs	r1, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	430a      	orrs	r2, r1
 800586e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	23c0      	movs	r3, #192	; 0xc0
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	429a      	cmp	r2, r3
 800587a:	d018      	beq.n	80058ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	05db      	lsls	r3, r3, #23
 8005884:	429a      	cmp	r2, r3
 8005886:	d012      	beq.n	80058ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	061b      	lsls	r3, r3, #24
 8005890:	429a      	cmp	r2, r3
 8005892:	d00c      	beq.n	80058ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005894:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <HAL_ADC_Init+0x344>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a44      	ldr	r2, [pc, #272]	; (80059ac <HAL_ADC_Init+0x348>)
 800589a:	4013      	ands	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	23f0      	movs	r3, #240	; 0xf0
 80058a4:	039b      	lsls	r3, r3, #14
 80058a6:	401a      	ands	r2, r3
 80058a8:	4b3f      	ldr	r3, [pc, #252]	; (80059a8 <HAL_ADC_Init+0x344>)
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	001a      	movs	r2, r3
 80058b8:	2100      	movs	r1, #0
 80058ba:	f7ff fd7e 	bl	80053ba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	493a      	ldr	r1, [pc, #232]	; (80059b0 <HAL_ADC_Init+0x34c>)
 80058c8:	001a      	movs	r2, r3
 80058ca:	f7ff fd76 	bl	80053ba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2110      	movs	r1, #16
 80058e2:	4249      	negs	r1, r1
 80058e4:	430a      	orrs	r2, r1
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28
 80058e8:	e018      	b.n	800591c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	039b      	lsls	r3, r3, #14
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d112      	bne.n	800591c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	3b01      	subs	r3, #1
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	221c      	movs	r2, #28
 8005906:	4013      	ands	r3, r2
 8005908:	2210      	movs	r2, #16
 800590a:	4252      	negs	r2, r2
 800590c:	409a      	lsls	r2, r3
 800590e:	0011      	movs	r1, r2
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2100      	movs	r1, #0
 8005922:	0018      	movs	r0, r3
 8005924:	f7ff fd66 	bl	80053f4 <LL_ADC_GetSamplingTimeCommonChannels>
 8005928:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800592e:	429a      	cmp	r2, r3
 8005930:	d10b      	bne.n	800594a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593c:	2203      	movs	r2, #3
 800593e:	4393      	bics	r3, r2
 8005940:	2201      	movs	r2, #1
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005948:	e01c      	b.n	8005984 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	2212      	movs	r2, #18
 8005950:	4393      	bics	r3, r2
 8005952:	2210      	movs	r2, #16
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595e:	2201      	movs	r2, #1
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005966:	231f      	movs	r3, #31
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800596e:	e009      	b.n	8005984 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005974:	2210      	movs	r2, #16
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800597c:	231f      	movs	r3, #31
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	2201      	movs	r2, #1
 8005982:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005984:	231f      	movs	r3, #31
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	781b      	ldrb	r3, [r3, #0]
}
 800598a:	0018      	movs	r0, r3
 800598c:	46bd      	mov	sp, r7
 800598e:	b008      	add	sp, #32
 8005990:	bd80      	pop	{r7, pc}
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	20000000 	.word	0x20000000
 8005998:	00030d40 	.word	0x00030d40
 800599c:	fffffefd 	.word	0xfffffefd
 80059a0:	fffe0201 	.word	0xfffe0201
 80059a4:	1ffffc02 	.word	0x1ffffc02
 80059a8:	40012708 	.word	0x40012708
 80059ac:	ffc3ffff 	.word	0xffc3ffff
 80059b0:	07ffff04 	.word	0x07ffff04

080059b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80059b4:	b5b0      	push	{r4, r5, r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7ff fe3b 	bl	8005640 <LL_ADC_REG_IsConversionOngoing>
 80059ca:	1e03      	subs	r3, r0, #0
 80059cc:	d16c      	bne.n	8005aa8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2254      	movs	r2, #84	; 0x54
 80059d2:	5c9b      	ldrb	r3, [r3, r2]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_ADC_Start_DMA+0x28>
 80059d8:	2302      	movs	r3, #2
 80059da:	e06c      	b.n	8005ab6 <HAL_ADC_Start_DMA+0x102>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2254      	movs	r2, #84	; 0x54
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	4013      	ands	r3, r2
 80059ee:	d113      	bne.n	8005a18 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7ff fddd 	bl	80055b4 <LL_ADC_IsEnabled>
 80059fa:	1e03      	subs	r3, r0, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7ff fdc4 	bl	8005590 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2101      	movs	r1, #1
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005a18:	2517      	movs	r5, #23
 8005a1a:	197c      	adds	r4, r7, r5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f000 fc12 	bl	8006248 <ADC_Enable>
 8005a24:	0003      	movs	r3, r0
 8005a26:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005a28:	002c      	movs	r4, r5
 8005a2a:	193b      	adds	r3, r7, r4
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d13e      	bne.n	8005ab0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_ADC_Start_DMA+0x10c>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2280      	movs	r2, #128	; 0x80
 8005a3c:	0052      	lsls	r2, r2, #1
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_ADC_Start_DMA+0x110>)
 8005a50:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a56:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_ADC_Start_DMA+0x114>)
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5e:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <HAL_ADC_Start_DMA+0x118>)
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	221c      	movs	r2, #28
 8005a68:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2254      	movs	r2, #84	; 0x54
 8005a6e:	2100      	movs	r1, #0
 8005a70:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2110      	movs	r1, #16
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3340      	adds	r3, #64	; 0x40
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	193c      	adds	r4, r7, r4
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f000 fed2 	bl	800683c <HAL_DMA_Start_IT>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff fda9 	bl	80055f8 <LL_ADC_REG_StartConversion>
 8005aa6:	e003      	b.n	8005ab0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005aa8:	2317      	movs	r3, #23
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2202      	movs	r2, #2
 8005aae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005ab0:	2317      	movs	r3, #23
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	781b      	ldrb	r3, [r3, #0]
}
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b006      	add	sp, #24
 8005abc:	bdb0      	pop	{r4, r5, r7, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	fffff0fe 	.word	0xfffff0fe
 8005ac4:	08006411 	.word	0x08006411
 8005ac8:	080064d9 	.word	0x080064d9
 8005acc:	080064f7 	.word	0x080064f7

08005ad0 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005ad0:	b5b0      	push	{r4, r5, r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2254      	movs	r2, #84	; 0x54
 8005adc:	5c9b      	ldrb	r3, [r3, r2]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_ADC_Stop_DMA+0x16>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e05f      	b.n	8005ba6 <HAL_ADC_Stop_DMA+0xd6>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2254      	movs	r2, #84	; 0x54
 8005aea:	2101      	movs	r1, #1
 8005aec:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005aee:	250f      	movs	r5, #15
 8005af0:	197c      	adds	r4, r7, r5
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f000 fb65 	bl	80061c4 <ADC_ConversionStop>
 8005afa:	0003      	movs	r3, r0
 8005afc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005afe:	0029      	movs	r1, r5
 8005b00:	187b      	adds	r3, r7, r1
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d147      	bne.n	8005b98 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0c:	2225      	movs	r2, #37	; 0x25
 8005b0e:	5c9b      	ldrb	r3, [r3, r2]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d112      	bne.n	8005b3c <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	000d      	movs	r5, r1
 8005b1c:	187c      	adds	r4, r7, r1
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f000 ff12 	bl	8006948 <HAL_DMA_Abort>
 8005b24:	0003      	movs	r3, r0
 8005b26:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005b28:	197b      	adds	r3, r7, r5
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	2240      	movs	r2, #64	; 0x40
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2110      	movs	r1, #16
 8005b48:	438a      	bics	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	18bb      	adds	r3, r7, r2
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005b56:	18bc      	adds	r4, r7, r2
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 fbfa 	bl	8006354 <ADC_Disable>
 8005b60:	0003      	movs	r3, r0
 8005b62:	7023      	strb	r3, [r4, #0]
 8005b64:	e003      	b.n	8005b6e <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 fbf3 	bl	8006354 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005b6e:	230f      	movs	r3, #15
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d107      	bne.n	8005b88 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <HAL_ADC_Stop_DMA+0xe0>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2201      	movs	r2, #1
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2101      	movs	r1, #1
 8005b94:	438a      	bics	r2, r1
 8005b96:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2254      	movs	r2, #84	; 0x54
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005ba0:	230f      	movs	r3, #15
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	781b      	ldrb	r3, [r3, #0]
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b004      	add	sp, #16
 8005bac:	bdb0      	pop	{r4, r5, r7, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	fffffefe 	.word	0xfffffefe

08005bb4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d017      	beq.n	8005c08 <HAL_ADC_IRQHandler+0x54>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	2210      	movs	r2, #16
 8005be6:	4013      	ands	r3, r2
 8005be8:	d106      	bne.n	8005bf8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	0112      	lsls	r2, r2, #4
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 fca6 	bl	800654c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2202      	movs	r2, #2
 8005c06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <HAL_ADC_IRQHandler+0x64>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2204      	movs	r2, #4
 8005c14:	4013      	ands	r3, r2
 8005c16:	d107      	bne.n	8005c28 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c1e:	d04d      	beq.n	8005cbc <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2208      	movs	r2, #8
 8005c24:	4013      	ands	r3, r2
 8005c26:	d049      	beq.n	8005cbc <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d106      	bne.n	8005c40 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	0092      	lsls	r2, r2, #2
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff fbec 	bl	8005422 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c4a:	1e03      	subs	r3, r0, #0
 8005c4c:	d02e      	beq.n	8005cac <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	7e9b      	ldrb	r3, [r3, #26]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d12a      	bne.n	8005cac <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d123      	bne.n	8005cac <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7ff fce9 	bl	8005640 <LL_ADC_REG_IsConversionOngoing>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d110      	bne.n	8005c94 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	210c      	movs	r1, #12
 8005c7e:	438a      	bics	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c86:	4a56      	ldr	r2, [pc, #344]	; (8005de0 <HAL_ADC_IRQHandler+0x22c>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	659a      	str	r2, [r3, #88]	; 0x58
 8005c92:	e00b      	b.n	8005cac <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c98:	2220      	movs	r2, #32
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f00b fe8c 	bl	80119cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	220c      	movs	r2, #12
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2280      	movs	r2, #128	; 0x80
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d012      	beq.n	8005cea <HAL_ADC_IRQHandler+0x136>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	2280      	movs	r2, #128	; 0x80
 8005cd2:	0252      	lsls	r2, r2, #9
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f000 f889 	bl	8005df4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d014      	beq.n	8005d1e <HAL_ADC_IRQHandler+0x16a>
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d00f      	beq.n	8005d1e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d02:	2280      	movs	r2, #128	; 0x80
 8005d04:	0292      	lsls	r2, r2, #10
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f000 fc0c 	bl	800652c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	0052      	lsls	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4013      	ands	r3, r2
 8005d26:	d014      	beq.n	8005d52 <HAL_ADC_IRQHandler+0x19e>
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	2380      	movs	r3, #128	; 0x80
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	02d2      	lsls	r2, r2, #11
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 fbfa 	bl	800653c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2280      	movs	r2, #128	; 0x80
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2210      	movs	r2, #16
 8005d56:	4013      	ands	r3, r2
 8005d58:	d02b      	beq.n	8005db2 <HAL_ADC_IRQHandler+0x1fe>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2210      	movs	r2, #16
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d027      	beq.n	8005db2 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e008      	b.n	8005d82 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	0018      	movs	r0, r3
 8005d76:	f7ff fba8 	bl	80054ca <LL_ADC_REG_GetDMATransfer>
 8005d7a:	1e03      	subs	r3, r0, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d110      	bne.n	8005daa <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	2280      	movs	r2, #128	; 0x80
 8005d8e:	00d2      	lsls	r2, r2, #3
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 f82d 	bl	8005e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2210      	movs	r2, #16
 8005db0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	019b      	lsls	r3, r3, #6
 8005db8:	4013      	ands	r3, r2
 8005dba:	d00d      	beq.n	8005dd8 <HAL_ADC_IRQHandler+0x224>
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	2380      	movs	r3, #128	; 0x80
 8005dc0:	019b      	lsls	r3, r3, #6
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d008      	beq.n	8005dd8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f000 fbc7 	bl	800655c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2280      	movs	r2, #128	; 0x80
 8005dd4:	0192      	lsls	r2, r2, #6
 8005dd6:	601a      	str	r2, [r3, #0]
  }
}
 8005dd8:	46c0      	nop			; (mov r8, r8)
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b006      	add	sp, #24
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	fffffefe 	.word	0xfffffefe

08005de4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b002      	add	sp, #8
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b002      	add	sp, #8
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b002      	add	sp, #8
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e1e:	2317      	movs	r3, #23
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2254      	movs	r2, #84	; 0x54
 8005e2e:	5c9b      	ldrb	r3, [r3, r2]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_ADC_ConfigChannel+0x24>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e1c0      	b.n	80061ba <HAL_ADC_ConfigChannel+0x3a6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2254      	movs	r2, #84	; 0x54
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7ff fbfb 	bl	8005640 <LL_ADC_REG_IsConversionOngoing>
 8005e4a:	1e03      	subs	r3, r0, #0
 8005e4c:	d000      	beq.n	8005e50 <HAL_ADC_ConfigChannel+0x3c>
 8005e4e:	e1a3      	b.n	8006198 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d100      	bne.n	8005e5a <HAL_ADC_ConfigChannel+0x46>
 8005e58:	e143      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	061b      	lsls	r3, r3, #24
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d004      	beq.n	8005e70 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e6a:	4ac1      	ldr	r2, [pc, #772]	; (8006170 <HAL_ADC_ConfigChannel+0x35c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	0019      	movs	r1, r3
 8005e7a:	0010      	movs	r0, r2
 8005e7c:	f7ff fb02 	bl	8005484 <LL_ADC_REG_SetSequencerChAdd>
 8005e80:	e0c9      	b.n	8006016 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	211f      	movs	r1, #31
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	210f      	movs	r1, #15
 8005e90:	4099      	lsls	r1, r3
 8005e92:	000b      	movs	r3, r1
 8005e94:	43db      	mvns	r3, r3
 8005e96:	4013      	ands	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	035b      	lsls	r3, r3, #13
 8005ea0:	0b5b      	lsrs	r3, r3, #13
 8005ea2:	d105      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x9c>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	0e9b      	lsrs	r3, r3, #26
 8005eaa:	221f      	movs	r2, #31
 8005eac:	4013      	ands	r3, r2
 8005eae:	e098      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d000      	beq.n	8005ebc <HAL_ADC_ConfigChannel+0xa8>
 8005eba:	e091      	b.n	8005fe0 <HAL_ADC_ConfigChannel+0x1cc>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d000      	beq.n	8005ec8 <HAL_ADC_ConfigChannel+0xb4>
 8005ec6:	e089      	b.n	8005fdc <HAL_ADC_ConfigChannel+0x1c8>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d000      	beq.n	8005ed4 <HAL_ADC_ConfigChannel+0xc0>
 8005ed2:	e081      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x1c4>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	4013      	ands	r3, r2
 8005edc:	d000      	beq.n	8005ee0 <HAL_ADC_ConfigChannel+0xcc>
 8005ede:	e079      	b.n	8005fd4 <HAL_ADC_ConfigChannel+0x1c0>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d000      	beq.n	8005eec <HAL_ADC_ConfigChannel+0xd8>
 8005eea:	e071      	b.n	8005fd0 <HAL_ADC_ConfigChannel+0x1bc>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d000      	beq.n	8005ef8 <HAL_ADC_ConfigChannel+0xe4>
 8005ef6:	e069      	b.n	8005fcc <HAL_ADC_ConfigChannel+0x1b8>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	4013      	ands	r3, r2
 8005f00:	d000      	beq.n	8005f04 <HAL_ADC_ConfigChannel+0xf0>
 8005f02:	e061      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x1b4>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2280      	movs	r2, #128	; 0x80
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d000      	beq.n	8005f10 <HAL_ADC_ConfigChannel+0xfc>
 8005f0e:	e059      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0x1b0>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d151      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x1ac>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4013      	ands	r3, r2
 8005f26:	d149      	bne.n	8005fbc <HAL_ADC_ConfigChannel+0x1a8>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	2380      	movs	r3, #128	; 0x80
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4013      	ands	r3, r2
 8005f32:	d141      	bne.n	8005fb8 <HAL_ADC_ConfigChannel+0x1a4>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d139      	bne.n	8005fb4 <HAL_ADC_ConfigChannel+0x1a0>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	015b      	lsls	r3, r3, #5
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d131      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x19c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	019b      	lsls	r3, r3, #6
 8005f54:	4013      	ands	r3, r2
 8005f56:	d129      	bne.n	8005fac <HAL_ADC_ConfigChannel+0x198>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	4013      	ands	r3, r2
 8005f62:	d121      	bne.n	8005fa8 <HAL_ADC_ConfigChannel+0x194>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	2380      	movs	r3, #128	; 0x80
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d119      	bne.n	8005fa4 <HAL_ADC_ConfigChannel+0x190>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	025b      	lsls	r3, r3, #9
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d111      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x18c>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	029b      	lsls	r3, r3, #10
 8005f84:	4013      	ands	r3, r2
 8005f86:	d109      	bne.n	8005f9c <HAL_ADC_ConfigChannel+0x188>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	02db      	lsls	r3, r3, #11
 8005f90:	4013      	ands	r3, r2
 8005f92:	d001      	beq.n	8005f98 <HAL_ADC_ConfigChannel+0x184>
 8005f94:	2312      	movs	r3, #18
 8005f96:	e024      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e022      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005f9c:	2311      	movs	r3, #17
 8005f9e:	e020      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	e01e      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fa4:	230f      	movs	r3, #15
 8005fa6:	e01c      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fa8:	230e      	movs	r3, #14
 8005faa:	e01a      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fac:	230d      	movs	r3, #13
 8005fae:	e018      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	e016      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fb4:	230b      	movs	r3, #11
 8005fb6:	e014      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fb8:	230a      	movs	r3, #10
 8005fba:	e012      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fbc:	2309      	movs	r3, #9
 8005fbe:	e010      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	e00e      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fc4:	2307      	movs	r3, #7
 8005fc6:	e00c      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fc8:	2306      	movs	r3, #6
 8005fca:	e00a      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fcc:	2305      	movs	r3, #5
 8005fce:	e008      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	e006      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e004      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e002      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1ce>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	6852      	ldr	r2, [r2, #4]
 8005fe6:	201f      	movs	r0, #31
 8005fe8:	4002      	ands	r2, r0
 8005fea:	4093      	lsls	r3, r2
 8005fec:	000a      	movs	r2, r1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	089b      	lsrs	r3, r3, #2
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	429a      	cmp	r2, r3
 8006002:	d808      	bhi.n	8006016 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6859      	ldr	r1, [r3, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	001a      	movs	r2, r3
 8006012:	f7ff fa17 	bl	8005444 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	001a      	movs	r2, r3
 8006024:	f7ff fa5e 	bl	80054e4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	db00      	blt.n	8006032 <HAL_ADC_ConfigChannel+0x21e>
 8006030:	e0bc      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006032:	4b50      	ldr	r3, [pc, #320]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 8006034:	0018      	movs	r0, r3
 8006036:	f7ff f9b3 	bl	80053a0 <LL_ADC_GetCommonPathInternalCh>
 800603a:	0003      	movs	r3, r0
 800603c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4d      	ldr	r2, [pc, #308]	; (8006178 <HAL_ADC_ConfigChannel+0x364>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d122      	bne.n	800608e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	2380      	movs	r3, #128	; 0x80
 800604c:	041b      	lsls	r3, r3, #16
 800604e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006050:	d11d      	bne.n	800608e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2280      	movs	r2, #128	; 0x80
 8006056:	0412      	lsls	r2, r2, #16
 8006058:	4313      	orrs	r3, r2
 800605a:	4a46      	ldr	r2, [pc, #280]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 800605c:	0019      	movs	r1, r3
 800605e:	0010      	movs	r0, r2
 8006060:	f7ff f98a 	bl	8005378 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006064:	4b45      	ldr	r3, [pc, #276]	; (800617c <HAL_ADC_ConfigChannel+0x368>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4945      	ldr	r1, [pc, #276]	; (8006180 <HAL_ADC_ConfigChannel+0x36c>)
 800606a:	0018      	movs	r0, r3
 800606c:	f7fa f86e 	bl	800014c <__udivsi3>
 8006070:	0003      	movs	r3, r0
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	0013      	movs	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	189b      	adds	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800607e:	e002      	b.n	8006086 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3b01      	subs	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f9      	bne.n	8006080 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800608c:	e08e      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a3c      	ldr	r2, [pc, #240]	; (8006184 <HAL_ADC_ConfigChannel+0x370>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d10e      	bne.n	80060b6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	045b      	lsls	r3, r3, #17
 800609e:	4013      	ands	r3, r2
 80060a0:	d109      	bne.n	80060b6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2280      	movs	r2, #128	; 0x80
 80060a6:	0452      	lsls	r2, r2, #17
 80060a8:	4313      	orrs	r3, r2
 80060aa:	4a32      	ldr	r2, [pc, #200]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 80060ac:	0019      	movs	r1, r3
 80060ae:	0010      	movs	r0, r2
 80060b0:	f7ff f962 	bl	8005378 <LL_ADC_SetCommonPathInternalCh>
 80060b4:	e07a      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a33      	ldr	r2, [pc, #204]	; (8006188 <HAL_ADC_ConfigChannel+0x374>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d000      	beq.n	80060c2 <HAL_ADC_ConfigChannel+0x2ae>
 80060c0:	e074      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	03db      	lsls	r3, r3, #15
 80060c8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80060ca:	d000      	beq.n	80060ce <HAL_ADC_ConfigChannel+0x2ba>
 80060cc:	e06e      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2280      	movs	r2, #128	; 0x80
 80060d2:	03d2      	lsls	r2, r2, #15
 80060d4:	4313      	orrs	r3, r2
 80060d6:	4a27      	ldr	r2, [pc, #156]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 80060d8:	0019      	movs	r1, r3
 80060da:	0010      	movs	r0, r2
 80060dc:	f7ff f94c 	bl	8005378 <LL_ADC_SetCommonPathInternalCh>
 80060e0:	e064      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	061b      	lsls	r3, r3, #24
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d004      	beq.n	80060f8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80060f2:	4a1f      	ldr	r2, [pc, #124]	; (8006170 <HAL_ADC_ConfigChannel+0x35c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d107      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	0019      	movs	r1, r3
 8006102:	0010      	movs	r0, r2
 8006104:	f7ff f9cf 	bl	80054a6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	da4d      	bge.n	80061ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006110:	4b18      	ldr	r3, [pc, #96]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 8006112:	0018      	movs	r0, r3
 8006114:	f7ff f944 	bl	80053a0 <LL_ADC_GetCommonPathInternalCh>
 8006118:	0003      	movs	r3, r0
 800611a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a15      	ldr	r2, [pc, #84]	; (8006178 <HAL_ADC_ConfigChannel+0x364>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d108      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4a18      	ldr	r2, [pc, #96]	; (800618c <HAL_ADC_ConfigChannel+0x378>)
 800612a:	4013      	ands	r3, r2
 800612c:	4a11      	ldr	r2, [pc, #68]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 800612e:	0019      	movs	r1, r3
 8006130:	0010      	movs	r0, r2
 8006132:	f7ff f921 	bl	8005378 <LL_ADC_SetCommonPathInternalCh>
 8006136:	e039      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a11      	ldr	r2, [pc, #68]	; (8006184 <HAL_ADC_ConfigChannel+0x370>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d108      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4a12      	ldr	r2, [pc, #72]	; (8006190 <HAL_ADC_ConfigChannel+0x37c>)
 8006146:	4013      	ands	r3, r2
 8006148:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 800614a:	0019      	movs	r1, r3
 800614c:	0010      	movs	r0, r2
 800614e:	f7ff f913 	bl	8005378 <LL_ADC_SetCommonPathInternalCh>
 8006152:	e02b      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a0b      	ldr	r2, [pc, #44]	; (8006188 <HAL_ADC_ConfigChannel+0x374>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d126      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4a0c      	ldr	r2, [pc, #48]	; (8006194 <HAL_ADC_ConfigChannel+0x380>)
 8006162:	4013      	ands	r3, r2
 8006164:	4a03      	ldr	r2, [pc, #12]	; (8006174 <HAL_ADC_ConfigChannel+0x360>)
 8006166:	0019      	movs	r1, r3
 8006168:	0010      	movs	r0, r2
 800616a:	f7ff f905 	bl	8005378 <LL_ADC_SetCommonPathInternalCh>
 800616e:	e01d      	b.n	80061ac <HAL_ADC_ConfigChannel+0x398>
 8006170:	80000004 	.word	0x80000004
 8006174:	40012708 	.word	0x40012708
 8006178:	b0001000 	.word	0xb0001000
 800617c:	20000000 	.word	0x20000000
 8006180:	00030d40 	.word	0x00030d40
 8006184:	b8004000 	.word	0xb8004000
 8006188:	b4002000 	.word	0xb4002000
 800618c:	ff7fffff 	.word	0xff7fffff
 8006190:	feffffff 	.word	0xfeffffff
 8006194:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619c:	2220      	movs	r2, #32
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80061a4:	2317      	movs	r3, #23
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	2201      	movs	r2, #1
 80061aa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2254      	movs	r2, #84	; 0x54
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80061b4:	2317      	movs	r3, #23
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	781b      	ldrb	r3, [r3, #0]
}
 80061ba:	0018      	movs	r0, r3
 80061bc:	46bd      	mov	sp, r7
 80061be:	b006      	add	sp, #24
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)

080061c4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	0018      	movs	r0, r3
 80061d2:	f7ff fa35 	bl	8005640 <LL_ADC_REG_IsConversionOngoing>
 80061d6:	1e03      	subs	r3, r0, #0
 80061d8:	d031      	beq.n	800623e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	0018      	movs	r0, r3
 80061e0:	f7ff f9f9 	bl	80055d6 <LL_ADC_IsDisableOngoing>
 80061e4:	1e03      	subs	r3, r0, #0
 80061e6:	d104      	bne.n	80061f2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7ff fa15 	bl	800561c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80061f2:	f7ff f893 	bl	800531c <HAL_GetTick>
 80061f6:	0003      	movs	r3, r0
 80061f8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80061fa:	e01a      	b.n	8006232 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80061fc:	f7ff f88e 	bl	800531c <HAL_GetTick>
 8006200:	0002      	movs	r2, r0
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d913      	bls.n	8006232 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2204      	movs	r2, #4
 8006212:	4013      	ands	r3, r2
 8006214:	d00d      	beq.n	8006232 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	2210      	movs	r2, #16
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006226:	2201      	movs	r2, #1
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e006      	b.n	8006240 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2204      	movs	r2, #4
 800623a:	4013      	ands	r3, r2
 800623c:	d1de      	bne.n	80061fc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	0018      	movs	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	b004      	add	sp, #16
 8006246:	bd80      	pop	{r7, pc}

08006248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006250:	2300      	movs	r3, #0
 8006252:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	0018      	movs	r0, r3
 800625a:	f7ff f9ab 	bl	80055b4 <LL_ADC_IsEnabled>
 800625e:	1e03      	subs	r3, r0, #0
 8006260:	d000      	beq.n	8006264 <ADC_Enable+0x1c>
 8006262:	e069      	b.n	8006338 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	4a36      	ldr	r2, [pc, #216]	; (8006344 <ADC_Enable+0xfc>)
 800626c:	4013      	ands	r3, r2
 800626e:	d00d      	beq.n	800628c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006274:	2210      	movs	r2, #16
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006280:	2201      	movs	r2, #1
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e056      	b.n	800633a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	0018      	movs	r0, r3
 8006292:	f7ff f96b 	bl	800556c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006296:	4b2c      	ldr	r3, [pc, #176]	; (8006348 <ADC_Enable+0x100>)
 8006298:	0018      	movs	r0, r3
 800629a:	f7ff f881 	bl	80053a0 <LL_ADC_GetCommonPathInternalCh>
 800629e:	0002      	movs	r2, r0
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	4013      	ands	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <ADC_Enable+0x104>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4928      	ldr	r1, [pc, #160]	; (8006350 <ADC_Enable+0x108>)
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7f9 ff4c 	bl	800014c <__udivsi3>
 80062b4:	0003      	movs	r3, r0
 80062b6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80062b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80062ba:	e002      	b.n	80062c2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	3b01      	subs	r3, #1
 80062c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f9      	bne.n	80062bc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	7e5b      	ldrb	r3, [r3, #25]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d033      	beq.n	8006338 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80062d0:	f7ff f824 	bl	800531c <HAL_GetTick>
 80062d4:	0003      	movs	r3, r0
 80062d6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062d8:	e027      	b.n	800632a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	0018      	movs	r0, r3
 80062e0:	f7ff f968 	bl	80055b4 <LL_ADC_IsEnabled>
 80062e4:	1e03      	subs	r3, r0, #0
 80062e6:	d104      	bne.n	80062f2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7ff f93d 	bl	800556c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062f2:	f7ff f813 	bl	800531c <HAL_GetTick>
 80062f6:	0002      	movs	r2, r0
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d914      	bls.n	800632a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2201      	movs	r2, #1
 8006308:	4013      	ands	r3, r2
 800630a:	2b01      	cmp	r3, #1
 800630c:	d00d      	beq.n	800632a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	2210      	movs	r2, #16
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631e:	2201      	movs	r2, #1
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e007      	b.n	800633a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	4013      	ands	r3, r2
 8006334:	2b01      	cmp	r3, #1
 8006336:	d1d0      	bne.n	80062da <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	b004      	add	sp, #16
 8006340:	bd80      	pop	{r7, pc}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	80000017 	.word	0x80000017
 8006348:	40012708 	.word	0x40012708
 800634c:	20000000 	.word	0x20000000
 8006350:	00030d40 	.word	0x00030d40

08006354 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0018      	movs	r0, r3
 8006362:	f7ff f938 	bl	80055d6 <LL_ADC_IsDisableOngoing>
 8006366:	0003      	movs	r3, r0
 8006368:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	0018      	movs	r0, r3
 8006370:	f7ff f920 	bl	80055b4 <LL_ADC_IsEnabled>
 8006374:	1e03      	subs	r3, r0, #0
 8006376:	d046      	beq.n	8006406 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d143      	bne.n	8006406 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2205      	movs	r2, #5
 8006386:	4013      	ands	r3, r2
 8006388:	2b01      	cmp	r3, #1
 800638a:	d10d      	bne.n	80063a8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	0018      	movs	r0, r3
 8006392:	f7ff f8fd 	bl	8005590 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2203      	movs	r2, #3
 800639c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800639e:	f7fe ffbd 	bl	800531c <HAL_GetTick>
 80063a2:	0003      	movs	r3, r0
 80063a4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80063a6:	e028      	b.n	80063fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	2210      	movs	r2, #16
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b8:	2201      	movs	r2, #1
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e021      	b.n	8006408 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063c4:	f7fe ffaa 	bl	800531c <HAL_GetTick>
 80063c8:	0002      	movs	r2, r0
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d913      	bls.n	80063fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2201      	movs	r2, #1
 80063da:	4013      	ands	r3, r2
 80063dc:	d00d      	beq.n	80063fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	2210      	movs	r2, #16
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ee:	2201      	movs	r2, #1
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e006      	b.n	8006408 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2201      	movs	r2, #1
 8006402:	4013      	ands	r3, r2
 8006404:	d1de      	bne.n	80063c4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b004      	add	sp, #16
 800640e:	bd80      	pop	{r7, pc}

08006410 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	2250      	movs	r2, #80	; 0x50
 8006424:	4013      	ands	r3, r2
 8006426:	d141      	bne.n	80064ac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642c:	2280      	movs	r2, #128	; 0x80
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	431a      	orrs	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	0018      	movs	r0, r3
 800643c:	f7fe fff1 	bl	8005422 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006440:	1e03      	subs	r3, r0, #0
 8006442:	d02e      	beq.n	80064a2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	7e9b      	ldrb	r3, [r3, #26]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d12a      	bne.n	80064a2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2208      	movs	r2, #8
 8006454:	4013      	ands	r3, r2
 8006456:	2b08      	cmp	r3, #8
 8006458:	d123      	bne.n	80064a2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	0018      	movs	r0, r3
 8006460:	f7ff f8ee 	bl	8005640 <LL_ADC_REG_IsConversionOngoing>
 8006464:	1e03      	subs	r3, r0, #0
 8006466:	d110      	bne.n	800648a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	210c      	movs	r1, #12
 8006474:	438a      	bics	r2, r1
 8006476:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647c:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <ADC_DMAConvCplt+0xc4>)
 800647e:	4013      	ands	r3, r2
 8006480:	2201      	movs	r2, #1
 8006482:	431a      	orrs	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	659a      	str	r2, [r3, #88]	; 0x58
 8006488:	e00b      	b.n	80064a2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648e:	2220      	movs	r2, #32
 8006490:	431a      	orrs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649a:	2201      	movs	r2, #1
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	0018      	movs	r0, r3
 80064a6:	f00b fa91 	bl	80119cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80064aa:	e00f      	b.n	80064cc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b0:	2210      	movs	r2, #16
 80064b2:	4013      	ands	r3, r2
 80064b4:	d004      	beq.n	80064c0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7ff fca3 	bl	8005e04 <HAL_ADC_ErrorCallback>
}
 80064be:	e005      	b.n	80064cc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	0010      	movs	r0, r2
 80064ca:	4798      	blx	r3
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b004      	add	sp, #16
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	fffffefe 	.word	0xfffffefe

080064d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7ff fc7b 	bl	8005de4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b004      	add	sp, #16
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	2240      	movs	r2, #64	; 0x40
 800650a:	431a      	orrs	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006514:	2204      	movs	r2, #4
 8006516:	431a      	orrs	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	0018      	movs	r0, r3
 8006520:	f7ff fc70 	bl	8005e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b004      	add	sp, #16
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	b002      	add	sp, #8
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b002      	add	sp, #8
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006554:	46c0      	nop			; (mov r8, r8)
 8006556:	46bd      	mov	sp, r7
 8006558:	b002      	add	sp, #8
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006564:	46c0      	nop			; (mov r8, r8)
 8006566:	46bd      	mov	sp, r7
 8006568:	b002      	add	sp, #8
 800656a:	bd80      	pop	{r7, pc}

0800656c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	0002      	movs	r2, r0
 8006574:	1dfb      	adds	r3, r7, #7
 8006576:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006578:	1dfb      	adds	r3, r7, #7
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b7f      	cmp	r3, #127	; 0x7f
 800657e:	d809      	bhi.n	8006594 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006580:	1dfb      	adds	r3, r7, #7
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	001a      	movs	r2, r3
 8006586:	231f      	movs	r3, #31
 8006588:	401a      	ands	r2, r3
 800658a:	4b04      	ldr	r3, [pc, #16]	; (800659c <__NVIC_EnableIRQ+0x30>)
 800658c:	2101      	movs	r1, #1
 800658e:	4091      	lsls	r1, r2
 8006590:	000a      	movs	r2, r1
 8006592:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}
 800659c:	e000e100 	.word	0xe000e100

080065a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	0002      	movs	r2, r0
 80065a8:	6039      	str	r1, [r7, #0]
 80065aa:	1dfb      	adds	r3, r7, #7
 80065ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80065ae:	1dfb      	adds	r3, r7, #7
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b7f      	cmp	r3, #127	; 0x7f
 80065b4:	d828      	bhi.n	8006608 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80065b6:	4a2f      	ldr	r2, [pc, #188]	; (8006674 <__NVIC_SetPriority+0xd4>)
 80065b8:	1dfb      	adds	r3, r7, #7
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	b25b      	sxtb	r3, r3
 80065be:	089b      	lsrs	r3, r3, #2
 80065c0:	33c0      	adds	r3, #192	; 0xc0
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	589b      	ldr	r3, [r3, r2]
 80065c6:	1dfa      	adds	r2, r7, #7
 80065c8:	7812      	ldrb	r2, [r2, #0]
 80065ca:	0011      	movs	r1, r2
 80065cc:	2203      	movs	r2, #3
 80065ce:	400a      	ands	r2, r1
 80065d0:	00d2      	lsls	r2, r2, #3
 80065d2:	21ff      	movs	r1, #255	; 0xff
 80065d4:	4091      	lsls	r1, r2
 80065d6:	000a      	movs	r2, r1
 80065d8:	43d2      	mvns	r2, r2
 80065da:	401a      	ands	r2, r3
 80065dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	019b      	lsls	r3, r3, #6
 80065e2:	22ff      	movs	r2, #255	; 0xff
 80065e4:	401a      	ands	r2, r3
 80065e6:	1dfb      	adds	r3, r7, #7
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	0018      	movs	r0, r3
 80065ec:	2303      	movs	r3, #3
 80065ee:	4003      	ands	r3, r0
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80065f4:	481f      	ldr	r0, [pc, #124]	; (8006674 <__NVIC_SetPriority+0xd4>)
 80065f6:	1dfb      	adds	r3, r7, #7
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	b25b      	sxtb	r3, r3
 80065fc:	089b      	lsrs	r3, r3, #2
 80065fe:	430a      	orrs	r2, r1
 8006600:	33c0      	adds	r3, #192	; 0xc0
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006606:	e031      	b.n	800666c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006608:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <__NVIC_SetPriority+0xd8>)
 800660a:	1dfb      	adds	r3, r7, #7
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	0019      	movs	r1, r3
 8006610:	230f      	movs	r3, #15
 8006612:	400b      	ands	r3, r1
 8006614:	3b08      	subs	r3, #8
 8006616:	089b      	lsrs	r3, r3, #2
 8006618:	3306      	adds	r3, #6
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	18d3      	adds	r3, r2, r3
 800661e:	3304      	adds	r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	1dfa      	adds	r2, r7, #7
 8006624:	7812      	ldrb	r2, [r2, #0]
 8006626:	0011      	movs	r1, r2
 8006628:	2203      	movs	r2, #3
 800662a:	400a      	ands	r2, r1
 800662c:	00d2      	lsls	r2, r2, #3
 800662e:	21ff      	movs	r1, #255	; 0xff
 8006630:	4091      	lsls	r1, r2
 8006632:	000a      	movs	r2, r1
 8006634:	43d2      	mvns	r2, r2
 8006636:	401a      	ands	r2, r3
 8006638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	019b      	lsls	r3, r3, #6
 800663e:	22ff      	movs	r2, #255	; 0xff
 8006640:	401a      	ands	r2, r3
 8006642:	1dfb      	adds	r3, r7, #7
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	0018      	movs	r0, r3
 8006648:	2303      	movs	r3, #3
 800664a:	4003      	ands	r3, r0
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006650:	4809      	ldr	r0, [pc, #36]	; (8006678 <__NVIC_SetPriority+0xd8>)
 8006652:	1dfb      	adds	r3, r7, #7
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	001c      	movs	r4, r3
 8006658:	230f      	movs	r3, #15
 800665a:	4023      	ands	r3, r4
 800665c:	3b08      	subs	r3, #8
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	430a      	orrs	r2, r1
 8006662:	3306      	adds	r3, #6
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	18c3      	adds	r3, r0, r3
 8006668:	3304      	adds	r3, #4
 800666a:	601a      	str	r2, [r3, #0]
}
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b003      	add	sp, #12
 8006672:	bd90      	pop	{r4, r7, pc}
 8006674:	e000e100 	.word	0xe000e100
 8006678:	e000ed00 	.word	0xe000ed00

0800667c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	1e5a      	subs	r2, r3, #1
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	045b      	lsls	r3, r3, #17
 800668c:	429a      	cmp	r2, r3
 800668e:	d301      	bcc.n	8006694 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006690:	2301      	movs	r3, #1
 8006692:	e010      	b.n	80066b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <SysTick_Config+0x44>)
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	3a01      	subs	r2, #1
 800669a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800669c:	2301      	movs	r3, #1
 800669e:	425b      	negs	r3, r3
 80066a0:	2103      	movs	r1, #3
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7ff ff7c 	bl	80065a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <SysTick_Config+0x44>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066ae:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <SysTick_Config+0x44>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b002      	add	sp, #8
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	e000e010 	.word	0xe000e010

080066c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	210f      	movs	r1, #15
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	1c02      	adds	r2, r0, #0
 80066d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	187b      	adds	r3, r7, r1
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	0011      	movs	r1, r2
 80066e0:	0018      	movs	r0, r3
 80066e2:	f7ff ff5d 	bl	80065a0 <__NVIC_SetPriority>
}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b004      	add	sp, #16
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	0002      	movs	r2, r0
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066fa:	1dfb      	adds	r3, r7, #7
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b25b      	sxtb	r3, r3
 8006700:	0018      	movs	r0, r3
 8006702:	f7ff ff33 	bl	800656c <__NVIC_EnableIRQ>
}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	46bd      	mov	sp, r7
 800670a:	b002      	add	sp, #8
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	0018      	movs	r0, r3
 800671a:	f7ff ffaf 	bl	800667c <SysTick_Config>
 800671e:	0003      	movs	r3, r0
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	b002      	add	sp, #8
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e077      	b.n	800682a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a3d      	ldr	r2, [pc, #244]	; (8006834 <HAL_DMA_Init+0x10c>)
 8006740:	4694      	mov	ip, r2
 8006742:	4463      	add	r3, ip
 8006744:	2114      	movs	r1, #20
 8006746:	0018      	movs	r0, r3
 8006748:	f7f9 fd00 	bl	800014c <__udivsi3>
 800674c:	0003      	movs	r3, r0
 800674e:	009a      	lsls	r2, r3, #2
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2225      	movs	r2, #37	; 0x25
 8006758:	2102      	movs	r1, #2
 800675a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4934      	ldr	r1, [pc, #208]	; (8006838 <HAL_DMA_Init+0x110>)
 8006768:	400a      	ands	r2, r1
 800676a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	0018      	movs	r0, r3
 80067a6:	f000 fa97 	bl	8006cd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	01db      	lsls	r3, r3, #7
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d102      	bne.n	80067bc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	213f      	movs	r1, #63	; 0x3f
 80067c6:	400a      	ands	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d011      	beq.n	8006800 <HAL_DMA_Init+0xd8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d80d      	bhi.n	8006800 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	0018      	movs	r0, r3
 80067e8:	f000 faa2 	bl	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e008      	b.n	8006812 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2225      	movs	r2, #37	; 0x25
 800681c:	2101      	movs	r1, #1
 800681e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	2100      	movs	r1, #0
 8006826:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	bffdfff8 	.word	0xbffdfff8
 8006838:	ffff800f 	.word	0xffff800f

0800683c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800684a:	2317      	movs	r3, #23
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2224      	movs	r2, #36	; 0x24
 8006856:	5c9b      	ldrb	r3, [r3, r2]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_DMA_Start_IT+0x24>
 800685c:	2302      	movs	r3, #2
 800685e:	e06f      	b.n	8006940 <HAL_DMA_Start_IT+0x104>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2224      	movs	r2, #36	; 0x24
 8006864:	2101      	movs	r1, #1
 8006866:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2225      	movs	r2, #37	; 0x25
 800686c:	5c9b      	ldrb	r3, [r3, r2]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	d157      	bne.n	8006924 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2225      	movs	r2, #37	; 0x25
 8006878:	2102      	movs	r1, #2
 800687a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2101      	movs	r1, #1
 800688e:	438a      	bics	r2, r1
 8006890:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f9dd 	bl	8006c58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	210e      	movs	r1, #14
 80068b2:	430a      	orrs	r2, r1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e00f      	b.n	80068d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2104      	movs	r1, #4
 80068c4:	438a      	bics	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	210a      	movs	r1, #10
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	025b      	lsls	r3, r3, #9
 80068e2:	4013      	ands	r3, r2
 80068e4:	d008      	beq.n	80068f8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	0049      	lsls	r1, r1, #1
 80068f4:	430a      	orrs	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690a:	2180      	movs	r1, #128	; 0x80
 800690c:	0049      	lsls	r1, r1, #1
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2101      	movs	r1, #1
 800691e:	430a      	orrs	r2, r1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e00a      	b.n	800693a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2280      	movs	r2, #128	; 0x80
 8006928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2224      	movs	r2, #36	; 0x24
 800692e:	2100      	movs	r1, #0
 8006930:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006932:	2317      	movs	r3, #23
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	2201      	movs	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800693a:	2317      	movs	r3, #23
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	781b      	ldrb	r3, [r3, #0]
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b006      	add	sp, #24
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e050      	b.n	80069fc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2225      	movs	r2, #37	; 0x25
 800695e:	5c9b      	ldrb	r3, [r3, r2]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d008      	beq.n	8006978 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2204      	movs	r2, #4
 800696a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2224      	movs	r2, #36	; 0x24
 8006970:	2100      	movs	r1, #0
 8006972:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e041      	b.n	80069fc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	210e      	movs	r1, #14
 8006984:	438a      	bics	r2, r1
 8006986:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006992:	491c      	ldr	r1, [pc, #112]	; (8006a04 <HAL_DMA_Abort+0xbc>)
 8006994:	400a      	ands	r2, r1
 8006996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2101      	movs	r1, #1
 80069a4:	438a      	bics	r2, r1
 80069a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80069a8:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <HAL_DMA_Abort+0xc0>)
 80069aa:	6859      	ldr	r1, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	221c      	movs	r2, #28
 80069b2:	4013      	ands	r3, r2
 80069b4:	2201      	movs	r2, #1
 80069b6:	409a      	lsls	r2, r3
 80069b8:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <HAL_DMA_Abort+0xc0>)
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80069c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069da:	490a      	ldr	r1, [pc, #40]	; (8006a04 <HAL_DMA_Abort+0xbc>)
 80069dc:	400a      	ands	r2, r1
 80069de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80069e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2225      	movs	r2, #37	; 0x25
 80069ee:	2101      	movs	r1, #1
 80069f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2224      	movs	r2, #36	; 0x24
 80069f6:	2100      	movs	r1, #0
 80069f8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	0018      	movs	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b002      	add	sp, #8
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	fffffeff 	.word	0xfffffeff
 8006a08:	40020000 	.word	0x40020000

08006a0c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a14:	210f      	movs	r1, #15
 8006a16:	187b      	adds	r3, r7, r1
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2225      	movs	r2, #37	; 0x25
 8006a20:	5c9b      	ldrb	r3, [r3, r2]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d006      	beq.n	8006a36 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006a2e:	187b      	adds	r3, r7, r1
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e049      	b.n	8006aca <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	210e      	movs	r1, #14
 8006a42:	438a      	bics	r2, r1
 8006a44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2101      	movs	r1, #1
 8006a52:	438a      	bics	r2, r1
 8006a54:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	491d      	ldr	r1, [pc, #116]	; (8006ad8 <HAL_DMA_Abort_IT+0xcc>)
 8006a62:	400a      	ands	r2, r1
 8006a64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006a66:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <HAL_DMA_Abort_IT+0xd0>)
 8006a68:	6859      	ldr	r1, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	221c      	movs	r2, #28
 8006a70:	4013      	ands	r3, r2
 8006a72:	2201      	movs	r2, #1
 8006a74:	409a      	lsls	r2, r3
 8006a76:	4b19      	ldr	r3, [pc, #100]	; (8006adc <HAL_DMA_Abort_IT+0xd0>)
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a84:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a98:	490f      	ldr	r1, [pc, #60]	; (8006ad8 <HAL_DMA_Abort_IT+0xcc>)
 8006a9a:	400a      	ands	r2, r1
 8006a9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006aa6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2225      	movs	r2, #37	; 0x25
 8006aac:	2101      	movs	r1, #1
 8006aae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2224      	movs	r2, #36	; 0x24
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	0010      	movs	r0, r2
 8006ac8:	4798      	blx	r3
    }
  }
  return status;
 8006aca:	230f      	movs	r3, #15
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	781b      	ldrb	r3, [r3, #0]
}
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b004      	add	sp, #16
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	fffffeff 	.word	0xfffffeff
 8006adc:	40020000 	.word	0x40020000

08006ae0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006ae8:	4b55      	ldr	r3, [pc, #340]	; (8006c40 <HAL_DMA_IRQHandler+0x160>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	221c      	movs	r2, #28
 8006afc:	4013      	ands	r3, r2
 8006afe:	2204      	movs	r2, #4
 8006b00:	409a      	lsls	r2, r3
 8006b02:	0013      	movs	r3, r2
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4013      	ands	r3, r2
 8006b08:	d027      	beq.n	8006b5a <HAL_DMA_IRQHandler+0x7a>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d023      	beq.n	8006b5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d107      	bne.n	8006b2e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2104      	movs	r1, #4
 8006b2a:	438a      	bics	r2, r1
 8006b2c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006b2e:	4b44      	ldr	r3, [pc, #272]	; (8006c40 <HAL_DMA_IRQHandler+0x160>)
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	221c      	movs	r2, #28
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	409a      	lsls	r2, r3
 8006b3e:	4b40      	ldr	r3, [pc, #256]	; (8006c40 <HAL_DMA_IRQHandler+0x160>)
 8006b40:	430a      	orrs	r2, r1
 8006b42:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d100      	bne.n	8006b4e <HAL_DMA_IRQHandler+0x6e>
 8006b4c:	e073      	b.n	8006c36 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	0010      	movs	r0, r2
 8006b56:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006b58:	e06d      	b.n	8006c36 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	221c      	movs	r2, #28
 8006b60:	4013      	ands	r3, r2
 8006b62:	2202      	movs	r2, #2
 8006b64:	409a      	lsls	r2, r3
 8006b66:	0013      	movs	r3, r2
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d02e      	beq.n	8006bcc <HAL_DMA_IRQHandler+0xec>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2202      	movs	r2, #2
 8006b72:	4013      	ands	r3, r2
 8006b74:	d02a      	beq.n	8006bcc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d10b      	bne.n	8006b9a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	210a      	movs	r1, #10
 8006b8e:	438a      	bics	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2225      	movs	r2, #37	; 0x25
 8006b96:	2101      	movs	r1, #1
 8006b98:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006b9a:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <HAL_DMA_IRQHandler+0x160>)
 8006b9c:	6859      	ldr	r1, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	221c      	movs	r2, #28
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <HAL_DMA_IRQHandler+0x160>)
 8006bac:	430a      	orrs	r2, r1
 8006bae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2224      	movs	r2, #36	; 0x24
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d03a      	beq.n	8006c36 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	0010      	movs	r0, r2
 8006bc8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006bca:	e034      	b.n	8006c36 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	221c      	movs	r2, #28
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	409a      	lsls	r2, r3
 8006bd8:	0013      	movs	r3, r2
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d02b      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x158>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2208      	movs	r2, #8
 8006be4:	4013      	ands	r3, r2
 8006be6:	d027      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	210e      	movs	r1, #14
 8006bf4:	438a      	bics	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006bf8:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <HAL_DMA_IRQHandler+0x160>)
 8006bfa:	6859      	ldr	r1, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	221c      	movs	r2, #28
 8006c02:	4013      	ands	r3, r2
 8006c04:	2201      	movs	r2, #1
 8006c06:	409a      	lsls	r2, r3
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <HAL_DMA_IRQHandler+0x160>)
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2225      	movs	r2, #37	; 0x25
 8006c18:	2101      	movs	r1, #1
 8006c1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2224      	movs	r2, #36	; 0x24
 8006c20:	2100      	movs	r1, #0
 8006c22:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	0010      	movs	r0, r2
 8006c34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	46c0      	nop			; (mov r8, r8)
}
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b004      	add	sp, #16
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40020000 	.word	0x40020000

08006c44 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006c50:	0018      	movs	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b002      	add	sp, #8
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006c6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006c80:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006c82:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <DMA_SetConfig+0x7c>)
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	221c      	movs	r2, #28
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2201      	movs	r2, #1
 8006c90:	409a      	lsls	r2, r3
 8006c92:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <DMA_SetConfig+0x7c>)
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d108      	bne.n	8006cba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006cb8:	e007      	b.n	8006cca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	60da      	str	r2, [r3, #12]
}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	b004      	add	sp, #16
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	40020000 	.word	0x40020000

08006cd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	089b      	lsrs	r3, r3, #2
 8006ce6:	4a10      	ldr	r2, [pc, #64]	; (8006d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006ce8:	4694      	mov	ip, r2
 8006cea:	4463      	add	r3, ip
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	001a      	movs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	23ff      	movs	r3, #255	; 0xff
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	3b08      	subs	r3, #8
 8006d00:	2114      	movs	r1, #20
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7f9 fa22 	bl	800014c <__udivsi3>
 8006d08:	0003      	movs	r3, r0
 8006d0a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	; (8006d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006d10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	221f      	movs	r2, #31
 8006d16:	4013      	ands	r3, r2
 8006d18:	2201      	movs	r2, #1
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b004      	add	sp, #16
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	10008200 	.word	0x10008200
 8006d2c:	40020880 	.word	0x40020880

08006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	223f      	movs	r2, #63	; 0x3f
 8006d3e:	4013      	ands	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4a0a      	ldr	r2, [pc, #40]	; (8006d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006d46:	4694      	mov	ip, r2
 8006d48:	4463      	add	r3, ip
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2201      	movs	r2, #1
 8006d62:	409a      	lsls	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006d68:	46c0      	nop			; (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b004      	add	sp, #16
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	1000823f 	.word	0x1000823f
 8006d74:	40020940 	.word	0x40020940

08006d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d86:	e147      	b.n	8007018 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4091      	lsls	r1, r2
 8006d92:	000a      	movs	r2, r1
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d100      	bne.n	8006da0 <HAL_GPIO_Init+0x28>
 8006d9e:	e138      	b.n	8007012 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2203      	movs	r2, #3
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d005      	beq.n	8006db8 <HAL_GPIO_Init+0x40>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2203      	movs	r2, #3
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d130      	bne.n	8006e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	0013      	movs	r3, r2
 8006dc8:	43da      	mvns	r2, r3
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	409a      	lsls	r2, r3
 8006dda:	0013      	movs	r3, r2
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dee:	2201      	movs	r2, #1
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	409a      	lsls	r2, r3
 8006df4:	0013      	movs	r3, r2
 8006df6:	43da      	mvns	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	2201      	movs	r2, #1
 8006e06:	401a      	ands	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	0013      	movs	r3, r2
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2203      	movs	r2, #3
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d017      	beq.n	8006e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	2203      	movs	r2, #3
 8006e32:	409a      	lsls	r2, r3
 8006e34:	0013      	movs	r3, r2
 8006e36:	43da      	mvns	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	409a      	lsls	r2, r3
 8006e48:	0013      	movs	r3, r2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d123      	bne.n	8006eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	08da      	lsrs	r2, r3, #3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3208      	adds	r2, #8
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	58d3      	ldr	r3, [r2, r3]
 8006e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2207      	movs	r2, #7
 8006e74:	4013      	ands	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	220f      	movs	r2, #15
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	0013      	movs	r3, r2
 8006e7e:	43da      	mvns	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4013      	ands	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2107      	movs	r1, #7
 8006e8e:	400b      	ands	r3, r1
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	409a      	lsls	r2, r3
 8006e94:	0013      	movs	r3, r2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	08da      	lsrs	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	0092      	lsls	r2, r2, #2
 8006ea6:	6939      	ldr	r1, [r7, #16]
 8006ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	0013      	movs	r3, r2
 8006eba:	43da      	mvns	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	401a      	ands	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	0013      	movs	r3, r2
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	23c0      	movs	r3, #192	; 0xc0
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d100      	bne.n	8006eec <HAL_GPIO_Init+0x174>
 8006eea:	e092      	b.n	8007012 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006eec:	4a50      	ldr	r2, [pc, #320]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	089b      	lsrs	r3, r3, #2
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	589b      	ldr	r3, [r3, r2]
 8006ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2203      	movs	r2, #3
 8006efe:	4013      	ands	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	220f      	movs	r2, #15
 8006f04:	409a      	lsls	r2, r3
 8006f06:	0013      	movs	r3, r2
 8006f08:	43da      	mvns	r2, r3
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	23a0      	movs	r3, #160	; 0xa0
 8006f14:	05db      	lsls	r3, r3, #23
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d013      	beq.n	8006f42 <HAL_GPIO_Init+0x1ca>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a45      	ldr	r2, [pc, #276]	; (8007034 <HAL_GPIO_Init+0x2bc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00d      	beq.n	8006f3e <HAL_GPIO_Init+0x1c6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a44      	ldr	r2, [pc, #272]	; (8007038 <HAL_GPIO_Init+0x2c0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d007      	beq.n	8006f3a <HAL_GPIO_Init+0x1c2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a43      	ldr	r2, [pc, #268]	; (800703c <HAL_GPIO_Init+0x2c4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <HAL_GPIO_Init+0x1be>
 8006f32:	2303      	movs	r3, #3
 8006f34:	e006      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f36:	2305      	movs	r3, #5
 8006f38:	e004      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e002      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f42:	2300      	movs	r3, #0
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	2103      	movs	r1, #3
 8006f48:	400a      	ands	r2, r1
 8006f4a:	00d2      	lsls	r2, r2, #3
 8006f4c:	4093      	lsls	r3, r2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006f54:	4936      	ldr	r1, [pc, #216]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	089b      	lsrs	r3, r3, #2
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f62:	4b33      	ldr	r3, [pc, #204]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	43da      	mvns	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	035b      	lsls	r3, r3, #13
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f86:	4b2a      	ldr	r3, [pc, #168]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006f8c:	4b28      	ldr	r3, [pc, #160]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	43da      	mvns	r2, r3
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	2380      	movs	r3, #128	; 0x80
 8006fa2:	039b      	lsls	r3, r3, #14
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fb0:	4b1f      	ldr	r3, [pc, #124]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fb8:	2384      	movs	r3, #132	; 0x84
 8006fba:	58d3      	ldr	r3, [r2, r3]
 8006fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	43da      	mvns	r2, r3
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006fdc:	4914      	ldr	r1, [pc, #80]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fde:	2284      	movs	r2, #132	; 0x84
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fe6:	2380      	movs	r3, #128	; 0x80
 8006fe8:	58d3      	ldr	r3, [r2, r3]
 8006fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	025b      	lsls	r3, r3, #9
 8006ffe:	4013      	ands	r3, r2
 8007000:	d003      	beq.n	800700a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800700a:	4909      	ldr	r1, [pc, #36]	; (8007030 <HAL_GPIO_Init+0x2b8>)
 800700c:	2280      	movs	r2, #128	; 0x80
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	3301      	adds	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	40da      	lsrs	r2, r3
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	d000      	beq.n	8007026 <HAL_GPIO_Init+0x2ae>
 8007024:	e6b0      	b.n	8006d88 <HAL_GPIO_Init+0x10>
  }
}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	46bd      	mov	sp, r7
 800702c:	b006      	add	sp, #24
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40021800 	.word	0x40021800
 8007034:	50000400 	.word	0x50000400
 8007038:	50000800 	.word	0x50000800
 800703c:	50000c00 	.word	0x50000c00

08007040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	000a      	movs	r2, r1
 800704a:	1cbb      	adds	r3, r7, #2
 800704c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	1cba      	adds	r2, r7, #2
 8007054:	8812      	ldrh	r2, [r2, #0]
 8007056:	4013      	ands	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800705a:	230f      	movs	r3, #15
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e003      	b.n	800706c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007064:	230f      	movs	r3, #15
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800706c:	230f      	movs	r3, #15
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	781b      	ldrb	r3, [r3, #0]
}
 8007072:	0018      	movs	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	b004      	add	sp, #16
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	0008      	movs	r0, r1
 8007084:	0011      	movs	r1, r2
 8007086:	1cbb      	adds	r3, r7, #2
 8007088:	1c02      	adds	r2, r0, #0
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	1c7b      	adds	r3, r7, #1
 800708e:	1c0a      	adds	r2, r1, #0
 8007090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007092:	1c7b      	adds	r3, r7, #1
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800709a:	1cbb      	adds	r3, r7, #2
 800709c:	881a      	ldrh	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070a2:	e003      	b.n	80070ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070a4:	1cbb      	adds	r3, r7, #2
 80070a6:	881a      	ldrh	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070ac:	46c0      	nop			; (mov r8, r8)
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b002      	add	sp, #8
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a19      	ldr	r2, [pc, #100]	; (8007128 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	0019      	movs	r1, r3
 80070c6:	4b17      	ldr	r3, [pc, #92]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d11f      	bne.n	8007118 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80070d8:	4b14      	ldr	r3, [pc, #80]	; (800712c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	0013      	movs	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	189b      	adds	r3, r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4912      	ldr	r1, [pc, #72]	; (8007130 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80070e6:	0018      	movs	r0, r3
 80070e8:	f7f9 f830 	bl	800014c <__udivsi3>
 80070ec:	0003      	movs	r3, r0
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070f2:	e008      	b.n	8007106 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e001      	b.n	8007106 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e009      	b.n	800711a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007106:	4b07      	ldr	r3, [pc, #28]	; (8007124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	2380      	movs	r3, #128	; 0x80
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	401a      	ands	r2, r3
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	429a      	cmp	r2, r3
 8007116:	d0ed      	beq.n	80070f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	0018      	movs	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	b004      	add	sp, #16
 8007120:	bd80      	pop	{r7, pc}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	40007000 	.word	0x40007000
 8007128:	fffff9ff 	.word	0xfffff9ff
 800712c:	20000000 	.word	0x20000000
 8007130:	000f4240 	.word	0x000f4240

08007134 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007138:	4b03      	ldr	r3, [pc, #12]	; (8007148 <LL_RCC_GetAPB1Prescaler+0x14>)
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	23e0      	movs	r3, #224	; 0xe0
 800713e:	01db      	lsls	r3, r3, #7
 8007140:	4013      	ands	r3, r2
}
 8007142:	0018      	movs	r0, r3
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40021000 	.word	0x40021000

0800714c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e2f3      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2201      	movs	r2, #1
 8007164:	4013      	ands	r3, r2
 8007166:	d100      	bne.n	800716a <HAL_RCC_OscConfig+0x1e>
 8007168:	e07c      	b.n	8007264 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800716a:	4bc3      	ldr	r3, [pc, #780]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2238      	movs	r2, #56	; 0x38
 8007170:	4013      	ands	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007174:	4bc0      	ldr	r3, [pc, #768]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2203      	movs	r2, #3
 800717a:	4013      	ands	r3, r2
 800717c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b10      	cmp	r3, #16
 8007182:	d102      	bne.n	800718a <HAL_RCC_OscConfig+0x3e>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b03      	cmp	r3, #3
 8007188:	d002      	beq.n	8007190 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d10b      	bne.n	80071a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007190:	4bb9      	ldr	r3, [pc, #740]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	029b      	lsls	r3, r3, #10
 8007198:	4013      	ands	r3, r2
 800719a:	d062      	beq.n	8007262 <HAL_RCC_OscConfig+0x116>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d15e      	bne.n	8007262 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e2ce      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	2380      	movs	r3, #128	; 0x80
 80071ae:	025b      	lsls	r3, r3, #9
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d107      	bne.n	80071c4 <HAL_RCC_OscConfig+0x78>
 80071b4:	4bb0      	ldr	r3, [pc, #704]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	4baf      	ldr	r3, [pc, #700]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071ba:	2180      	movs	r1, #128	; 0x80
 80071bc:	0249      	lsls	r1, r1, #9
 80071be:	430a      	orrs	r2, r1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e020      	b.n	8007206 <HAL_RCC_OscConfig+0xba>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	23a0      	movs	r3, #160	; 0xa0
 80071ca:	02db      	lsls	r3, r3, #11
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d10e      	bne.n	80071ee <HAL_RCC_OscConfig+0xa2>
 80071d0:	4ba9      	ldr	r3, [pc, #676]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	4ba8      	ldr	r3, [pc, #672]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	02c9      	lsls	r1, r1, #11
 80071da:	430a      	orrs	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	4ba6      	ldr	r3, [pc, #664]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4ba5      	ldr	r3, [pc, #660]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071e4:	2180      	movs	r1, #128	; 0x80
 80071e6:	0249      	lsls	r1, r1, #9
 80071e8:	430a      	orrs	r2, r1
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e00b      	b.n	8007206 <HAL_RCC_OscConfig+0xba>
 80071ee:	4ba2      	ldr	r3, [pc, #648]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4ba1      	ldr	r3, [pc, #644]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071f4:	49a1      	ldr	r1, [pc, #644]	; (800747c <HAL_RCC_OscConfig+0x330>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	4b9f      	ldr	r3, [pc, #636]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b9e      	ldr	r3, [pc, #632]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007200:	499f      	ldr	r1, [pc, #636]	; (8007480 <HAL_RCC_OscConfig+0x334>)
 8007202:	400a      	ands	r2, r1
 8007204:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d014      	beq.n	8007238 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fe f885 	bl	800531c <HAL_GetTick>
 8007212:	0003      	movs	r3, r0
 8007214:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007218:	f7fe f880 	bl	800531c <HAL_GetTick>
 800721c:	0002      	movs	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b64      	cmp	r3, #100	; 0x64
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e28d      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800722a:	4b93      	ldr	r3, [pc, #588]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	2380      	movs	r3, #128	; 0x80
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	4013      	ands	r3, r2
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0xcc>
 8007236:	e015      	b.n	8007264 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fe f870 	bl	800531c <HAL_GetTick>
 800723c:	0003      	movs	r3, r0
 800723e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007242:	f7fe f86b 	bl	800531c <HAL_GetTick>
 8007246:	0002      	movs	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b64      	cmp	r3, #100	; 0x64
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e278      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007254:	4b88      	ldr	r3, [pc, #544]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	029b      	lsls	r3, r3, #10
 800725c:	4013      	ands	r3, r2
 800725e:	d1f0      	bne.n	8007242 <HAL_RCC_OscConfig+0xf6>
 8007260:	e000      	b.n	8007264 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007262:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2202      	movs	r2, #2
 800726a:	4013      	ands	r3, r2
 800726c:	d100      	bne.n	8007270 <HAL_RCC_OscConfig+0x124>
 800726e:	e099      	b.n	80073a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007270:	4b81      	ldr	r3, [pc, #516]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2238      	movs	r2, #56	; 0x38
 8007276:	4013      	ands	r3, r2
 8007278:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800727a:	4b7f      	ldr	r3, [pc, #508]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2203      	movs	r2, #3
 8007280:	4013      	ands	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b10      	cmp	r3, #16
 8007288:	d102      	bne.n	8007290 <HAL_RCC_OscConfig+0x144>
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d002      	beq.n	8007296 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d135      	bne.n	8007302 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007296:	4b78      	ldr	r3, [pc, #480]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	2380      	movs	r3, #128	; 0x80
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4013      	ands	r3, r2
 80072a0:	d005      	beq.n	80072ae <HAL_RCC_OscConfig+0x162>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e24b      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ae:	4b72      	ldr	r3, [pc, #456]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4a74      	ldr	r2, [pc, #464]	; (8007484 <HAL_RCC_OscConfig+0x338>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	0019      	movs	r1, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	021a      	lsls	r2, r3, #8
 80072be:	4b6e      	ldr	r3, [pc, #440]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80072c0:	430a      	orrs	r2, r1
 80072c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d112      	bne.n	80072f0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80072ca:	4b6b      	ldr	r3, [pc, #428]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a6e      	ldr	r2, [pc, #440]	; (8007488 <HAL_RCC_OscConfig+0x33c>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	0019      	movs	r1, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	4b67      	ldr	r3, [pc, #412]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80072da:	430a      	orrs	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80072de:	4b66      	ldr	r3, [pc, #408]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	0adb      	lsrs	r3, r3, #11
 80072e4:	2207      	movs	r2, #7
 80072e6:	4013      	ands	r3, r2
 80072e8:	4a68      	ldr	r2, [pc, #416]	; (800748c <HAL_RCC_OscConfig+0x340>)
 80072ea:	40da      	lsrs	r2, r3
 80072ec:	4b68      	ldr	r3, [pc, #416]	; (8007490 <HAL_RCC_OscConfig+0x344>)
 80072ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80072f0:	4b68      	ldr	r3, [pc, #416]	; (8007494 <HAL_RCC_OscConfig+0x348>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7fd ffb5 	bl	8005264 <HAL_InitTick>
 80072fa:	1e03      	subs	r3, r0, #0
 80072fc:	d051      	beq.n	80073a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e221      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d030      	beq.n	800736c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800730a:	4b5b      	ldr	r3, [pc, #364]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a5e      	ldr	r2, [pc, #376]	; (8007488 <HAL_RCC_OscConfig+0x33c>)
 8007310:	4013      	ands	r3, r2
 8007312:	0019      	movs	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	4b57      	ldr	r3, [pc, #348]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800731a:	430a      	orrs	r2, r1
 800731c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800731e:	4b56      	ldr	r3, [pc, #344]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	4b55      	ldr	r3, [pc, #340]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007324:	2180      	movs	r1, #128	; 0x80
 8007326:	0049      	lsls	r1, r1, #1
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732c:	f7fd fff6 	bl	800531c <HAL_GetTick>
 8007330:	0003      	movs	r3, r0
 8007332:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007336:	f7fd fff1 	bl	800531c <HAL_GetTick>
 800733a:	0002      	movs	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e1fe      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007348:	4b4b      	ldr	r3, [pc, #300]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	2380      	movs	r3, #128	; 0x80
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	4013      	ands	r3, r2
 8007352:	d0f0      	beq.n	8007336 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007354:	4b48      	ldr	r3, [pc, #288]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <HAL_RCC_OscConfig+0x338>)
 800735a:	4013      	ands	r3, r2
 800735c:	0019      	movs	r1, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	021a      	lsls	r2, r3, #8
 8007364:	4b44      	ldr	r3, [pc, #272]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
 800736a:	e01b      	b.n	80073a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800736c:	4b42      	ldr	r3, [pc, #264]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b41      	ldr	r3, [pc, #260]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007372:	4949      	ldr	r1, [pc, #292]	; (8007498 <HAL_RCC_OscConfig+0x34c>)
 8007374:	400a      	ands	r2, r1
 8007376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fd ffd0 	bl	800531c <HAL_GetTick>
 800737c:	0003      	movs	r3, r0
 800737e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007382:	f7fd ffcb 	bl	800531c <HAL_GetTick>
 8007386:	0002      	movs	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e1d8      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007394:	4b38      	ldr	r3, [pc, #224]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4013      	ands	r3, r2
 800739e:	d1f0      	bne.n	8007382 <HAL_RCC_OscConfig+0x236>
 80073a0:	e000      	b.n	80073a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2208      	movs	r2, #8
 80073aa:	4013      	ands	r3, r2
 80073ac:	d047      	beq.n	800743e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80073ae:	4b32      	ldr	r3, [pc, #200]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2238      	movs	r2, #56	; 0x38
 80073b4:	4013      	ands	r3, r2
 80073b6:	2b18      	cmp	r3, #24
 80073b8:	d10a      	bne.n	80073d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80073ba:	4b2f      	ldr	r3, [pc, #188]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80073bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073be:	2202      	movs	r2, #2
 80073c0:	4013      	ands	r3, r2
 80073c2:	d03c      	beq.n	800743e <HAL_RCC_OscConfig+0x2f2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d138      	bne.n	800743e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e1ba      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d019      	beq.n	800740c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80073d8:	4b27      	ldr	r3, [pc, #156]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80073da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073dc:	4b26      	ldr	r3, [pc, #152]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 80073de:	2101      	movs	r1, #1
 80073e0:	430a      	orrs	r2, r1
 80073e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fd ff9a 	bl	800531c <HAL_GetTick>
 80073e8:	0003      	movs	r3, r0
 80073ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ee:	f7fd ff95 	bl	800531c <HAL_GetTick>
 80073f2:	0002      	movs	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e1a2      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007400:	4b1d      	ldr	r3, [pc, #116]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007404:	2202      	movs	r2, #2
 8007406:	4013      	ands	r3, r2
 8007408:	d0f1      	beq.n	80073ee <HAL_RCC_OscConfig+0x2a2>
 800740a:	e018      	b.n	800743e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800740c:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 800740e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007410:	4b19      	ldr	r3, [pc, #100]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007412:	2101      	movs	r1, #1
 8007414:	438a      	bics	r2, r1
 8007416:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fd ff80 	bl	800531c <HAL_GetTick>
 800741c:	0003      	movs	r3, r0
 800741e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007422:	f7fd ff7b 	bl	800531c <HAL_GetTick>
 8007426:	0002      	movs	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e188      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007434:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007438:	2202      	movs	r2, #2
 800743a:	4013      	ands	r3, r2
 800743c:	d1f1      	bne.n	8007422 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2204      	movs	r2, #4
 8007444:	4013      	ands	r3, r2
 8007446:	d100      	bne.n	800744a <HAL_RCC_OscConfig+0x2fe>
 8007448:	e0c6      	b.n	80075d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800744a:	231f      	movs	r3, #31
 800744c:	18fb      	adds	r3, r7, r3
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2238      	movs	r2, #56	; 0x38
 8007458:	4013      	ands	r3, r2
 800745a:	2b20      	cmp	r3, #32
 800745c:	d11e      	bne.n	800749c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <HAL_RCC_OscConfig+0x32c>)
 8007460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007462:	2202      	movs	r2, #2
 8007464:	4013      	ands	r3, r2
 8007466:	d100      	bne.n	800746a <HAL_RCC_OscConfig+0x31e>
 8007468:	e0b6      	b.n	80075d8 <HAL_RCC_OscConfig+0x48c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d000      	beq.n	8007474 <HAL_RCC_OscConfig+0x328>
 8007472:	e0b1      	b.n	80075d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e166      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
 8007478:	40021000 	.word	0x40021000
 800747c:	fffeffff 	.word	0xfffeffff
 8007480:	fffbffff 	.word	0xfffbffff
 8007484:	ffff80ff 	.word	0xffff80ff
 8007488:	ffffc7ff 	.word	0xffffc7ff
 800748c:	00f42400 	.word	0x00f42400
 8007490:	20000000 	.word	0x20000000
 8007494:	20000008 	.word	0x20000008
 8007498:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800749c:	4bac      	ldr	r3, [pc, #688]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 800749e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	055b      	lsls	r3, r3, #21
 80074a4:	4013      	ands	r3, r2
 80074a6:	d101      	bne.n	80074ac <HAL_RCC_OscConfig+0x360>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <HAL_RCC_OscConfig+0x362>
 80074ac:	2300      	movs	r3, #0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d011      	beq.n	80074d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80074b2:	4ba7      	ldr	r3, [pc, #668]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80074b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b6:	4ba6      	ldr	r3, [pc, #664]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	0549      	lsls	r1, r1, #21
 80074bc:	430a      	orrs	r2, r1
 80074be:	63da      	str	r2, [r3, #60]	; 0x3c
 80074c0:	4ba3      	ldr	r3, [pc, #652]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80074c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	055b      	lsls	r3, r3, #21
 80074c8:	4013      	ands	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80074ce:	231f      	movs	r3, #31
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d6:	4b9f      	ldr	r3, [pc, #636]	; (8007754 <HAL_RCC_OscConfig+0x608>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4013      	ands	r3, r2
 80074e0:	d11a      	bne.n	8007518 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074e2:	4b9c      	ldr	r3, [pc, #624]	; (8007754 <HAL_RCC_OscConfig+0x608>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4b9b      	ldr	r3, [pc, #620]	; (8007754 <HAL_RCC_OscConfig+0x608>)
 80074e8:	2180      	movs	r1, #128	; 0x80
 80074ea:	0049      	lsls	r1, r1, #1
 80074ec:	430a      	orrs	r2, r1
 80074ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80074f0:	f7fd ff14 	bl	800531c <HAL_GetTick>
 80074f4:	0003      	movs	r3, r0
 80074f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074f8:	e008      	b.n	800750c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074fa:	f7fd ff0f 	bl	800531c <HAL_GetTick>
 80074fe:	0002      	movs	r2, r0
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d901      	bls.n	800750c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e11c      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800750c:	4b91      	ldr	r3, [pc, #580]	; (8007754 <HAL_RCC_OscConfig+0x608>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	4013      	ands	r3, r2
 8007516:	d0f0      	beq.n	80074fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d106      	bne.n	800752e <HAL_RCC_OscConfig+0x3e2>
 8007520:	4b8b      	ldr	r3, [pc, #556]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007524:	4b8a      	ldr	r3, [pc, #552]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007526:	2101      	movs	r1, #1
 8007528:	430a      	orrs	r2, r1
 800752a:	65da      	str	r2, [r3, #92]	; 0x5c
 800752c:	e01c      	b.n	8007568 <HAL_RCC_OscConfig+0x41c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b05      	cmp	r3, #5
 8007534:	d10c      	bne.n	8007550 <HAL_RCC_OscConfig+0x404>
 8007536:	4b86      	ldr	r3, [pc, #536]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800753a:	4b85      	ldr	r3, [pc, #532]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 800753c:	2104      	movs	r1, #4
 800753e:	430a      	orrs	r2, r1
 8007540:	65da      	str	r2, [r3, #92]	; 0x5c
 8007542:	4b83      	ldr	r3, [pc, #524]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007546:	4b82      	ldr	r3, [pc, #520]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007548:	2101      	movs	r1, #1
 800754a:	430a      	orrs	r2, r1
 800754c:	65da      	str	r2, [r3, #92]	; 0x5c
 800754e:	e00b      	b.n	8007568 <HAL_RCC_OscConfig+0x41c>
 8007550:	4b7f      	ldr	r3, [pc, #508]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007554:	4b7e      	ldr	r3, [pc, #504]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007556:	2101      	movs	r1, #1
 8007558:	438a      	bics	r2, r1
 800755a:	65da      	str	r2, [r3, #92]	; 0x5c
 800755c:	4b7c      	ldr	r3, [pc, #496]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 800755e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007560:	4b7b      	ldr	r3, [pc, #492]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007562:	2104      	movs	r1, #4
 8007564:	438a      	bics	r2, r1
 8007566:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d014      	beq.n	800759a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7fd fed4 	bl	800531c <HAL_GetTick>
 8007574:	0003      	movs	r3, r0
 8007576:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007578:	e009      	b.n	800758e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757a:	f7fd fecf 	bl	800531c <HAL_GetTick>
 800757e:	0002      	movs	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	4a74      	ldr	r2, [pc, #464]	; (8007758 <HAL_RCC_OscConfig+0x60c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e0db      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800758e:	4b70      	ldr	r3, [pc, #448]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007592:	2202      	movs	r2, #2
 8007594:	4013      	ands	r3, r2
 8007596:	d0f0      	beq.n	800757a <HAL_RCC_OscConfig+0x42e>
 8007598:	e013      	b.n	80075c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759a:	f7fd febf 	bl	800531c <HAL_GetTick>
 800759e:	0003      	movs	r3, r0
 80075a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075a2:	e009      	b.n	80075b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a4:	f7fd feba 	bl	800531c <HAL_GetTick>
 80075a8:	0002      	movs	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	4a6a      	ldr	r2, [pc, #424]	; (8007758 <HAL_RCC_OscConfig+0x60c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e0c6      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075b8:	4b65      	ldr	r3, [pc, #404]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80075ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075bc:	2202      	movs	r2, #2
 80075be:	4013      	ands	r3, r2
 80075c0:	d1f0      	bne.n	80075a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80075c2:	231f      	movs	r3, #31
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d105      	bne.n	80075d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80075cc:	4b60      	ldr	r3, [pc, #384]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80075ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d0:	4b5f      	ldr	r3, [pc, #380]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80075d2:	4962      	ldr	r1, [pc, #392]	; (800775c <HAL_RCC_OscConfig+0x610>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d100      	bne.n	80075e2 <HAL_RCC_OscConfig+0x496>
 80075e0:	e0b0      	b.n	8007744 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075e2:	4b5b      	ldr	r3, [pc, #364]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2238      	movs	r2, #56	; 0x38
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b10      	cmp	r3, #16
 80075ec:	d100      	bne.n	80075f0 <HAL_RCC_OscConfig+0x4a4>
 80075ee:	e078      	b.n	80076e2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d153      	bne.n	80076a0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f8:	4b55      	ldr	r3, [pc, #340]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b54      	ldr	r3, [pc, #336]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80075fe:	4958      	ldr	r1, [pc, #352]	; (8007760 <HAL_RCC_OscConfig+0x614>)
 8007600:	400a      	ands	r2, r1
 8007602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007604:	f7fd fe8a 	bl	800531c <HAL_GetTick>
 8007608:	0003      	movs	r3, r0
 800760a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760e:	f7fd fe85 	bl	800531c <HAL_GetTick>
 8007612:	0002      	movs	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e092      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007620:	4b4b      	ldr	r3, [pc, #300]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	049b      	lsls	r3, r3, #18
 8007628:	4013      	ands	r3, r2
 800762a:	d1f0      	bne.n	800760e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800762c:	4b48      	ldr	r3, [pc, #288]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	4a4c      	ldr	r2, [pc, #304]	; (8007764 <HAL_RCC_OscConfig+0x618>)
 8007632:	4013      	ands	r3, r2
 8007634:	0019      	movs	r1, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1a      	ldr	r2, [r3, #32]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	431a      	orrs	r2, r3
 8007654:	4b3e      	ldr	r3, [pc, #248]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007656:	430a      	orrs	r2, r1
 8007658:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800765a:	4b3d      	ldr	r3, [pc, #244]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b3c      	ldr	r3, [pc, #240]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007660:	2180      	movs	r1, #128	; 0x80
 8007662:	0449      	lsls	r1, r1, #17
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007668:	4b39      	ldr	r3, [pc, #228]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	4b38      	ldr	r3, [pc, #224]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 800766e:	2180      	movs	r1, #128	; 0x80
 8007670:	0549      	lsls	r1, r1, #21
 8007672:	430a      	orrs	r2, r1
 8007674:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007676:	f7fd fe51 	bl	800531c <HAL_GetTick>
 800767a:	0003      	movs	r3, r0
 800767c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007680:	f7fd fe4c 	bl	800531c <HAL_GetTick>
 8007684:	0002      	movs	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e059      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007692:	4b2f      	ldr	r3, [pc, #188]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	2380      	movs	r3, #128	; 0x80
 8007698:	049b      	lsls	r3, r3, #18
 800769a:	4013      	ands	r3, r2
 800769c:	d0f0      	beq.n	8007680 <HAL_RCC_OscConfig+0x534>
 800769e:	e051      	b.n	8007744 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a0:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4b2a      	ldr	r3, [pc, #168]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80076a6:	492e      	ldr	r1, [pc, #184]	; (8007760 <HAL_RCC_OscConfig+0x614>)
 80076a8:	400a      	ands	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ac:	f7fd fe36 	bl	800531c <HAL_GetTick>
 80076b0:	0003      	movs	r3, r0
 80076b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076b4:	e008      	b.n	80076c8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b6:	f7fd fe31 	bl	800531c <HAL_GetTick>
 80076ba:	0002      	movs	r2, r0
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e03e      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076c8:	4b21      	ldr	r3, [pc, #132]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	049b      	lsls	r3, r3, #18
 80076d0:	4013      	ands	r3, r2
 80076d2:	d1f0      	bne.n	80076b6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80076d4:	4b1e      	ldr	r3, [pc, #120]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80076da:	4923      	ldr	r1, [pc, #140]	; (8007768 <HAL_RCC_OscConfig+0x61c>)
 80076dc:	400a      	ands	r2, r1
 80076de:	60da      	str	r2, [r3, #12]
 80076e0:	e030      	b.n	8007744 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e02b      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80076ee:	4b18      	ldr	r3, [pc, #96]	; (8007750 <HAL_RCC_OscConfig+0x604>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2203      	movs	r2, #3
 80076f8:	401a      	ands	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d11e      	bne.n	8007740 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2270      	movs	r2, #112	; 0x70
 8007706:	401a      	ands	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d117      	bne.n	8007740 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	23fe      	movs	r3, #254	; 0xfe
 8007714:	01db      	lsls	r3, r3, #7
 8007716:	401a      	ands	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800771e:	429a      	cmp	r2, r3
 8007720:	d10e      	bne.n	8007740 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	23f8      	movs	r3, #248	; 0xf8
 8007726:	039b      	lsls	r3, r3, #14
 8007728:	401a      	ands	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800772e:	429a      	cmp	r2, r3
 8007730:	d106      	bne.n	8007740 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	0f5b      	lsrs	r3, r3, #29
 8007736:	075a      	lsls	r2, r3, #29
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800773c:	429a      	cmp	r2, r3
 800773e:	d001      	beq.n	8007744 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e000      	b.n	8007746 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	0018      	movs	r0, r3
 8007748:	46bd      	mov	sp, r7
 800774a:	b008      	add	sp, #32
 800774c:	bd80      	pop	{r7, pc}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	40021000 	.word	0x40021000
 8007754:	40007000 	.word	0x40007000
 8007758:	00001388 	.word	0x00001388
 800775c:	efffffff 	.word	0xefffffff
 8007760:	feffffff 	.word	0xfeffffff
 8007764:	1fc1808c 	.word	0x1fc1808c
 8007768:	effefffc 	.word	0xeffefffc

0800776c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e0e9      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007780:	4b76      	ldr	r3, [pc, #472]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2207      	movs	r2, #7
 8007786:	4013      	ands	r3, r2
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d91e      	bls.n	80077cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778e:	4b73      	ldr	r3, [pc, #460]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2207      	movs	r2, #7
 8007794:	4393      	bics	r3, r2
 8007796:	0019      	movs	r1, r3
 8007798:	4b70      	ldr	r3, [pc, #448]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077a0:	f7fd fdbc 	bl	800531c <HAL_GetTick>
 80077a4:	0003      	movs	r3, r0
 80077a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077a8:	e009      	b.n	80077be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077aa:	f7fd fdb7 	bl	800531c <HAL_GetTick>
 80077ae:	0002      	movs	r2, r0
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	4a6a      	ldr	r2, [pc, #424]	; (8007960 <HAL_RCC_ClockConfig+0x1f4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e0ca      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077be:	4b67      	ldr	r3, [pc, #412]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2207      	movs	r2, #7
 80077c4:	4013      	ands	r3, r2
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d1ee      	bne.n	80077aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2202      	movs	r2, #2
 80077d2:	4013      	ands	r3, r2
 80077d4:	d015      	beq.n	8007802 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2204      	movs	r2, #4
 80077dc:	4013      	ands	r3, r2
 80077de:	d006      	beq.n	80077ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80077e0:	4b60      	ldr	r3, [pc, #384]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	4b5f      	ldr	r3, [pc, #380]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 80077e6:	21e0      	movs	r1, #224	; 0xe0
 80077e8:	01c9      	lsls	r1, r1, #7
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ee:	4b5d      	ldr	r3, [pc, #372]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	4a5d      	ldr	r2, [pc, #372]	; (8007968 <HAL_RCC_ClockConfig+0x1fc>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	0019      	movs	r1, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	4b59      	ldr	r3, [pc, #356]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 80077fe:	430a      	orrs	r2, r1
 8007800:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2201      	movs	r2, #1
 8007808:	4013      	ands	r3, r2
 800780a:	d057      	beq.n	80078bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d107      	bne.n	8007824 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007814:	4b53      	ldr	r3, [pc, #332]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	4013      	ands	r3, r2
 800781e:	d12b      	bne.n	8007878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e097      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d107      	bne.n	800783c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800782c:	4b4d      	ldr	r3, [pc, #308]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	2380      	movs	r3, #128	; 0x80
 8007832:	049b      	lsls	r3, r3, #18
 8007834:	4013      	ands	r3, r2
 8007836:	d11f      	bne.n	8007878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e08b      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d107      	bne.n	8007854 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007844:	4b47      	ldr	r3, [pc, #284]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	4013      	ands	r3, r2
 800784e:	d113      	bne.n	8007878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e07f      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b03      	cmp	r3, #3
 800785a:	d106      	bne.n	800786a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800785c:	4b41      	ldr	r3, [pc, #260]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 800785e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007860:	2202      	movs	r2, #2
 8007862:	4013      	ands	r3, r2
 8007864:	d108      	bne.n	8007878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e074      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786a:	4b3e      	ldr	r3, [pc, #248]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786e:	2202      	movs	r2, #2
 8007870:	4013      	ands	r3, r2
 8007872:	d101      	bne.n	8007878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e06d      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007878:	4b3a      	ldr	r3, [pc, #232]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2207      	movs	r2, #7
 800787e:	4393      	bics	r3, r2
 8007880:	0019      	movs	r1, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	4b37      	ldr	r3, [pc, #220]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 8007888:	430a      	orrs	r2, r1
 800788a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788c:	f7fd fd46 	bl	800531c <HAL_GetTick>
 8007890:	0003      	movs	r3, r0
 8007892:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007894:	e009      	b.n	80078aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007896:	f7fd fd41 	bl	800531c <HAL_GetTick>
 800789a:	0002      	movs	r2, r0
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	4a2f      	ldr	r2, [pc, #188]	; (8007960 <HAL_RCC_ClockConfig+0x1f4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e054      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078aa:	4b2e      	ldr	r3, [pc, #184]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2238      	movs	r2, #56	; 0x38
 80078b0:	401a      	ands	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d1ec      	bne.n	8007896 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2207      	movs	r2, #7
 80078c2:	4013      	ands	r3, r2
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d21e      	bcs.n	8007908 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ca:	4b24      	ldr	r3, [pc, #144]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2207      	movs	r2, #7
 80078d0:	4393      	bics	r3, r2
 80078d2:	0019      	movs	r1, r3
 80078d4:	4b21      	ldr	r3, [pc, #132]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078dc:	f7fd fd1e 	bl	800531c <HAL_GetTick>
 80078e0:	0003      	movs	r3, r0
 80078e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80078e4:	e009      	b.n	80078fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e6:	f7fd fd19 	bl	800531c <HAL_GetTick>
 80078ea:	0002      	movs	r2, r0
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <HAL_RCC_ClockConfig+0x1f4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e02c      	b.n	8007954 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80078fa:	4b18      	ldr	r3, [pc, #96]	; (800795c <HAL_RCC_ClockConfig+0x1f0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2207      	movs	r2, #7
 8007900:	4013      	ands	r3, r2
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d1ee      	bne.n	80078e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2204      	movs	r2, #4
 800790e:	4013      	ands	r3, r2
 8007910:	d009      	beq.n	8007926 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	4a15      	ldr	r2, [pc, #84]	; (800796c <HAL_RCC_ClockConfig+0x200>)
 8007918:	4013      	ands	r3, r2
 800791a:	0019      	movs	r1, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 8007922:	430a      	orrs	r2, r1
 8007924:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007926:	f000 f829 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800792a:	0001      	movs	r1, r0
 800792c:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <HAL_RCC_ClockConfig+0x1f8>)
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	220f      	movs	r2, #15
 8007934:	401a      	ands	r2, r3
 8007936:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <HAL_RCC_ClockConfig+0x204>)
 8007938:	0092      	lsls	r2, r2, #2
 800793a:	58d3      	ldr	r3, [r2, r3]
 800793c:	221f      	movs	r2, #31
 800793e:	4013      	ands	r3, r2
 8007940:	000a      	movs	r2, r1
 8007942:	40da      	lsrs	r2, r3
 8007944:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <HAL_RCC_ClockConfig+0x208>)
 8007946:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007948:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <HAL_RCC_ClockConfig+0x20c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	0018      	movs	r0, r3
 800794e:	f7fd fc89 	bl	8005264 <HAL_InitTick>
 8007952:	0003      	movs	r3, r0
}
 8007954:	0018      	movs	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	b004      	add	sp, #16
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40022000 	.word	0x40022000
 8007960:	00001388 	.word	0x00001388
 8007964:	40021000 	.word	0x40021000
 8007968:	fffff0ff 	.word	0xfffff0ff
 800796c:	ffff8fff 	.word	0xffff8fff
 8007970:	08018b14 	.word	0x08018b14
 8007974:	20000000 	.word	0x20000000
 8007978:	20000008 	.word	0x20000008

0800797c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007982:	4b3c      	ldr	r3, [pc, #240]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2238      	movs	r2, #56	; 0x38
 8007988:	4013      	ands	r3, r2
 800798a:	d10f      	bne.n	80079ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800798c:	4b39      	ldr	r3, [pc, #228]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	0adb      	lsrs	r3, r3, #11
 8007992:	2207      	movs	r2, #7
 8007994:	4013      	ands	r3, r2
 8007996:	2201      	movs	r2, #1
 8007998:	409a      	lsls	r2, r3
 800799a:	0013      	movs	r3, r2
 800799c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	4835      	ldr	r0, [pc, #212]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xfc>)
 80079a2:	f7f8 fbd3 	bl	800014c <__udivsi3>
 80079a6:	0003      	movs	r3, r0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e05d      	b.n	8007a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079ac:	4b31      	ldr	r3, [pc, #196]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2238      	movs	r2, #56	; 0x38
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d102      	bne.n	80079be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079b8:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x100>)
 80079ba:	613b      	str	r3, [r7, #16]
 80079bc:	e054      	b.n	8007a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079be:	4b2d      	ldr	r3, [pc, #180]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2238      	movs	r2, #56	; 0x38
 80079c4:	4013      	ands	r3, r2
 80079c6:	2b10      	cmp	r3, #16
 80079c8:	d138      	bne.n	8007a3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80079ca:	4b2a      	ldr	r3, [pc, #168]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2203      	movs	r2, #3
 80079d0:	4013      	ands	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079d4:	4b27      	ldr	r3, [pc, #156]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	2207      	movs	r2, #7
 80079dc:	4013      	ands	r3, r2
 80079de:	3301      	adds	r3, #1
 80079e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d10d      	bne.n	8007a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	4824      	ldr	r0, [pc, #144]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x100>)
 80079ec:	f7f8 fbae 	bl	800014c <__udivsi3>
 80079f0:	0003      	movs	r3, r0
 80079f2:	0019      	movs	r1, r3
 80079f4:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	0a1b      	lsrs	r3, r3, #8
 80079fa:	227f      	movs	r2, #127	; 0x7f
 80079fc:	4013      	ands	r3, r2
 80079fe:	434b      	muls	r3, r1
 8007a00:	617b      	str	r3, [r7, #20]
        break;
 8007a02:	e00d      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	481c      	ldr	r0, [pc, #112]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007a08:	f7f8 fba0 	bl	800014c <__udivsi3>
 8007a0c:	0003      	movs	r3, r0
 8007a0e:	0019      	movs	r1, r3
 8007a10:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	227f      	movs	r2, #127	; 0x7f
 8007a18:	4013      	ands	r3, r2
 8007a1a:	434b      	muls	r3, r1
 8007a1c:	617b      	str	r3, [r7, #20]
        break;
 8007a1e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007a20:	4b14      	ldr	r3, [pc, #80]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	0f5b      	lsrs	r3, r3, #29
 8007a26:	2207      	movs	r2, #7
 8007a28:	4013      	ands	r3, r2
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	6978      	ldr	r0, [r7, #20]
 8007a32:	f7f8 fb8b 	bl	800014c <__udivsi3>
 8007a36:	0003      	movs	r3, r0
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	e015      	b.n	8007a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2238      	movs	r2, #56	; 0x38
 8007a42:	4013      	ands	r3, r2
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d103      	bne.n	8007a50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	e00b      	b.n	8007a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007a50:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2238      	movs	r2, #56	; 0x38
 8007a56:	4013      	ands	r3, r2
 8007a58:	2b18      	cmp	r3, #24
 8007a5a:	d103      	bne.n	8007a64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007a5c:	23fa      	movs	r3, #250	; 0xfa
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	e001      	b.n	8007a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a68:	693b      	ldr	r3, [r7, #16]
}
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b006      	add	sp, #24
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	40021000 	.word	0x40021000
 8007a78:	00f42400 	.word	0x00f42400
 8007a7c:	016e3600 	.word	0x016e3600

08007a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a86:	681b      	ldr	r3, [r3, #0]
}
 8007a88:	0018      	movs	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	20000000 	.word	0x20000000

08007a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a94:	b5b0      	push	{r4, r5, r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a98:	f7ff fff2 	bl	8007a80 <HAL_RCC_GetHCLKFreq>
 8007a9c:	0004      	movs	r4, r0
 8007a9e:	f7ff fb49 	bl	8007134 <LL_RCC_GetAPB1Prescaler>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	0b1a      	lsrs	r2, r3, #12
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007aa8:	0092      	lsls	r2, r2, #2
 8007aaa:	58d3      	ldr	r3, [r2, r3]
 8007aac:	221f      	movs	r2, #31
 8007aae:	4013      	ands	r3, r2
 8007ab0:	40dc      	lsrs	r4, r3
 8007ab2:	0023      	movs	r3, r4
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	08018b54 	.word	0x08018b54

08007ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007ac8:	2313      	movs	r3, #19
 8007aca:	18fb      	adds	r3, r7, r3
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ad0:	2312      	movs	r3, #18
 8007ad2:	18fb      	adds	r3, r7, r3
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	2380      	movs	r3, #128	; 0x80
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007ae4:	e0a3      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ae6:	2011      	movs	r0, #17
 8007ae8:	183b      	adds	r3, r7, r0
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aee:	4b86      	ldr	r3, [pc, #536]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	055b      	lsls	r3, r3, #21
 8007af6:	4013      	ands	r3, r2
 8007af8:	d110      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007afa:	4b83      	ldr	r3, [pc, #524]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007afe:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b00:	2180      	movs	r1, #128	; 0x80
 8007b02:	0549      	lsls	r1, r1, #21
 8007b04:	430a      	orrs	r2, r1
 8007b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8007b08:	4b7f      	ldr	r3, [pc, #508]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	055b      	lsls	r3, r3, #21
 8007b10:	4013      	ands	r3, r2
 8007b12:	60bb      	str	r3, [r7, #8]
 8007b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b16:	183b      	adds	r3, r7, r0
 8007b18:	2201      	movs	r2, #1
 8007b1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b1c:	4b7b      	ldr	r3, [pc, #492]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	4b7a      	ldr	r3, [pc, #488]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007b22:	2180      	movs	r1, #128	; 0x80
 8007b24:	0049      	lsls	r1, r1, #1
 8007b26:	430a      	orrs	r2, r1
 8007b28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b2a:	f7fd fbf7 	bl	800531c <HAL_GetTick>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b32:	e00b      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b34:	f7fd fbf2 	bl	800531c <HAL_GetTick>
 8007b38:	0002      	movs	r2, r0
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d904      	bls.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007b42:	2313      	movs	r3, #19
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	2203      	movs	r2, #3
 8007b48:	701a      	strb	r2, [r3, #0]
        break;
 8007b4a:	e005      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b4c:	4b6f      	ldr	r3, [pc, #444]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	d0ed      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007b58:	2313      	movs	r3, #19
 8007b5a:	18fb      	adds	r3, r7, r3
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d154      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b62:	4b69      	ldr	r3, [pc, #420]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b66:	23c0      	movs	r3, #192	; 0xc0
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d019      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d014      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b7e:	4b62      	ldr	r3, [pc, #392]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b82:	4a63      	ldr	r2, [pc, #396]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b88:	4b5f      	ldr	r3, [pc, #380]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b8c:	4b5e      	ldr	r3, [pc, #376]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	0249      	lsls	r1, r1, #9
 8007b92:	430a      	orrs	r2, r1
 8007b94:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b96:	4b5c      	ldr	r3, [pc, #368]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b9a:	4b5b      	ldr	r3, [pc, #364]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b9c:	495d      	ldr	r1, [pc, #372]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007b9e:	400a      	ands	r2, r1
 8007ba0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ba2:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2201      	movs	r2, #1
 8007bac:	4013      	ands	r3, r2
 8007bae:	d016      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb0:	f7fd fbb4 	bl	800531c <HAL_GetTick>
 8007bb4:	0003      	movs	r3, r0
 8007bb6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bb8:	e00c      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bba:	f7fd fbaf 	bl	800531c <HAL_GetTick>
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	4a54      	ldr	r2, [pc, #336]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d904      	bls.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007bca:	2313      	movs	r3, #19
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	2203      	movs	r2, #3
 8007bd0:	701a      	strb	r2, [r3, #0]
            break;
 8007bd2:	e004      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bd4:	4b4c      	ldr	r3, [pc, #304]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd8:	2202      	movs	r2, #2
 8007bda:	4013      	ands	r3, r2
 8007bdc:	d0ed      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007bde:	2313      	movs	r3, #19
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007be8:	4b47      	ldr	r3, [pc, #284]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bec:	4a48      	ldr	r2, [pc, #288]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	0019      	movs	r1, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	4b44      	ldr	r3, [pc, #272]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8007bfc:	e00c      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bfe:	2312      	movs	r3, #18
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	2213      	movs	r2, #19
 8007c04:	18ba      	adds	r2, r7, r2
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e005      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	2312      	movs	r3, #18
 8007c0e:	18fb      	adds	r3, r7, r3
 8007c10:	2213      	movs	r2, #19
 8007c12:	18ba      	adds	r2, r7, r2
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c18:	2311      	movs	r3, #17
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d105      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c22:	4b39      	ldr	r3, [pc, #228]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c26:	4b38      	ldr	r3, [pc, #224]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c28:	493c      	ldr	r1, [pc, #240]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007c2a:	400a      	ands	r2, r1
 8007c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2201      	movs	r2, #1
 8007c34:	4013      	ands	r3, r2
 8007c36:	d009      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c38:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	4393      	bics	r3, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2202      	movs	r2, #2
 8007c52:	4013      	ands	r3, r2
 8007c54:	d009      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c56:	4b2c      	ldr	r3, [pc, #176]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	220c      	movs	r2, #12
 8007c5c:	4393      	bics	r3, r2
 8007c5e:	0019      	movs	r1, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	4b28      	ldr	r3, [pc, #160]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c66:	430a      	orrs	r2, r1
 8007c68:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	4013      	ands	r3, r2
 8007c72:	d009      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c78:	4a29      	ldr	r2, [pc, #164]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	0019      	movs	r1, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	4b21      	ldr	r3, [pc, #132]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c84:	430a      	orrs	r2, r1
 8007c86:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	01db      	lsls	r3, r3, #7
 8007c90:	4013      	ands	r3, r2
 8007c92:	d015      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c94:	4b1c      	ldr	r3, [pc, #112]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	0899      	lsrs	r1, r3, #2
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	2380      	movs	r3, #128	; 0x80
 8007cac:	05db      	lsls	r3, r3, #23
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d106      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007cb8:	2180      	movs	r1, #128	; 0x80
 8007cba:	0249      	lsls	r1, r1, #9
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	4013      	ands	r3, r2
 8007cca:	d016      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd0:	4a14      	ldr	r2, [pc, #80]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	0019      	movs	r1, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	01db      	lsls	r3, r3, #7
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d106      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007cf2:	2180      	movs	r1, #128	; 0x80
 8007cf4:	0249      	lsls	r1, r1, #9
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007cfa:	2312      	movs	r3, #18
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	781b      	ldrb	r3, [r3, #0]
}
 8007d00:	0018      	movs	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b006      	add	sp, #24
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	40007000 	.word	0x40007000
 8007d10:	fffffcff 	.word	0xfffffcff
 8007d14:	fffeffff 	.word	0xfffeffff
 8007d18:	00001388 	.word	0x00001388
 8007d1c:	efffffff 	.word	0xefffffff
 8007d20:	ffffcfff 	.word	0xffffcfff
 8007d24:	ffff3fff 	.word	0xffff3fff

08007d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e0a8      	b.n	8007e8c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	2382      	movs	r3, #130	; 0x82
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d009      	beq.n	8007d62 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	61da      	str	r2, [r3, #28]
 8007d54:	e005      	b.n	8007d62 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	225d      	movs	r2, #93	; 0x5d
 8007d6c:	5c9b      	ldrb	r3, [r3, r2]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d107      	bne.n	8007d84 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	225c      	movs	r2, #92	; 0x5c
 8007d78:	2100      	movs	r1, #0
 8007d7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	0018      	movs	r0, r3
 8007d80:	f7fb fe20 	bl	80039c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	225d      	movs	r2, #93	; 0x5d
 8007d88:	2102      	movs	r1, #2
 8007d8a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2140      	movs	r1, #64	; 0x40
 8007d98:	438a      	bics	r2, r1
 8007d9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	23e0      	movs	r3, #224	; 0xe0
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d902      	bls.n	8007dae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e002      	b.n	8007db4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007dae:	2380      	movs	r3, #128	; 0x80
 8007db0:	015b      	lsls	r3, r3, #5
 8007db2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	23f0      	movs	r3, #240	; 0xf0
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d008      	beq.n	8007dd2 <HAL_SPI_Init+0xaa>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	23e0      	movs	r3, #224	; 0xe0
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d002      	beq.n	8007dd2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	2382      	movs	r3, #130	; 0x82
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	401a      	ands	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	2384      	movs	r3, #132	; 0x84
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	400b      	ands	r3, r1
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2102      	movs	r1, #2
 8007dee:	400b      	ands	r3, r1
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	2101      	movs	r1, #1
 8007df8:	400b      	ands	r3, r1
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6999      	ldr	r1, [r3, #24]
 8007e00:	2380      	movs	r3, #128	; 0x80
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	400b      	ands	r3, r1
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	2138      	movs	r1, #56	; 0x38
 8007e0e:	400b      	ands	r3, r1
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	400b      	ands	r3, r1
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	0011      	movs	r1, r2
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e22:	2380      	movs	r3, #128	; 0x80
 8007e24:	019b      	lsls	r3, r3, #6
 8007e26:	401a      	ands	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	0c1b      	lsrs	r3, r3, #16
 8007e36:	2204      	movs	r2, #4
 8007e38:	401a      	ands	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	2110      	movs	r1, #16
 8007e40:	400b      	ands	r3, r1
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e48:	2108      	movs	r1, #8
 8007e4a:	400b      	ands	r3, r1
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68d9      	ldr	r1, [r3, #12]
 8007e52:	23f0      	movs	r3, #240	; 0xf0
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	400b      	ands	r3, r1
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	0011      	movs	r1, r2
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	2380      	movs	r3, #128	; 0x80
 8007e60:	015b      	lsls	r3, r3, #5
 8007e62:	401a      	ands	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	69da      	ldr	r2, [r3, #28]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4907      	ldr	r1, [pc, #28]	; (8007e94 <HAL_SPI_Init+0x16c>)
 8007e78:	400a      	ands	r2, r1
 8007e7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	225d      	movs	r2, #93	; 0x5d
 8007e86:	2101      	movs	r1, #1
 8007e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b004      	add	sp, #16
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	fffff7ff 	.word	0xfffff7ff

08007e98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	1dbb      	adds	r3, r7, #6
 8007ea6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ea8:	231f      	movs	r3, #31
 8007eaa:	18fb      	adds	r3, r7, r3
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	225c      	movs	r2, #92	; 0x5c
 8007eb4:	5c9b      	ldrb	r3, [r3, r2]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_SPI_Transmit+0x26>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e140      	b.n	8008140 <HAL_SPI_Transmit+0x2a8>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	225c      	movs	r2, #92	; 0x5c
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ec6:	f7fd fa29 	bl	800531c <HAL_GetTick>
 8007eca:	0003      	movs	r3, r0
 8007ecc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ece:	2316      	movs	r3, #22
 8007ed0:	18fb      	adds	r3, r7, r3
 8007ed2:	1dba      	adds	r2, r7, #6
 8007ed4:	8812      	ldrh	r2, [r2, #0]
 8007ed6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	225d      	movs	r2, #93	; 0x5d
 8007edc:	5c9b      	ldrb	r3, [r3, r2]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d004      	beq.n	8007eee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007ee4:	231f      	movs	r3, #31
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	2202      	movs	r2, #2
 8007eea:	701a      	strb	r2, [r3, #0]
    goto error;
 8007eec:	e11d      	b.n	800812a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <HAL_SPI_Transmit+0x64>
 8007ef4:	1dbb      	adds	r3, r7, #6
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d104      	bne.n	8007f06 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007efc:	231f      	movs	r3, #31
 8007efe:	18fb      	adds	r3, r7, r3
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
    goto error;
 8007f04:	e111      	b.n	800812a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	225d      	movs	r2, #93	; 0x5d
 8007f0a:	2103      	movs	r1, #3
 8007f0c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	1dba      	adds	r2, r7, #6
 8007f1e:	8812      	ldrh	r2, [r2, #0]
 8007f20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1dba      	adds	r2, r7, #6
 8007f26:	8812      	ldrh	r2, [r2, #0]
 8007f28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2244      	movs	r2, #68	; 0x44
 8007f34:	2100      	movs	r1, #0
 8007f36:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2246      	movs	r2, #70	; 0x46
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	2380      	movs	r3, #128	; 0x80
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d110      	bne.n	8007f7a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2140      	movs	r1, #64	; 0x40
 8007f64:	438a      	bics	r2, r1
 8007f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2180      	movs	r1, #128	; 0x80
 8007f74:	01c9      	lsls	r1, r1, #7
 8007f76:	430a      	orrs	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2240      	movs	r2, #64	; 0x40
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d007      	beq.n	8007f98 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2140      	movs	r1, #64	; 0x40
 8007f94:	430a      	orrs	r2, r1
 8007f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	23e0      	movs	r3, #224	; 0xe0
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d94e      	bls.n	8008042 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_SPI_Transmit+0x11e>
 8007fac:	2316      	movs	r3, #22
 8007fae:	18fb      	adds	r3, r7, r3
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d13f      	bne.n	8008036 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	881a      	ldrh	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	1c9a      	adds	r2, r3, #2
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fda:	e02c      	b.n	8008036 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d112      	bne.n	8008010 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffa:	1c9a      	adds	r2, r3, #2
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800800e:	e012      	b.n	8008036 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008010:	f7fd f984 	bl	800531c <HAL_GetTick>
 8008014:	0002      	movs	r2, r0
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d802      	bhi.n	8008026 <HAL_SPI_Transmit+0x18e>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	d102      	bne.n	800802c <HAL_SPI_Transmit+0x194>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800802c:	231f      	movs	r3, #31
 800802e:	18fb      	adds	r3, r7, r3
 8008030:	2203      	movs	r2, #3
 8008032:	701a      	strb	r2, [r3, #0]
          goto error;
 8008034:	e079      	b.n	800812a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1cd      	bne.n	8007fdc <HAL_SPI_Transmit+0x144>
 8008040:	e04f      	b.n	80080e2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <HAL_SPI_Transmit+0x1bc>
 800804a:	2316      	movs	r3, #22
 800804c:	18fb      	adds	r3, r7, r3
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d141      	bne.n	80080d8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	330c      	adds	r3, #12
 800805e:	7812      	ldrb	r2, [r2, #0]
 8008060:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b01      	subs	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800807a:	e02d      	b.n	80080d8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2202      	movs	r2, #2
 8008084:	4013      	ands	r3, r2
 8008086:	2b02      	cmp	r3, #2
 8008088:	d113      	bne.n	80080b2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	7812      	ldrb	r2, [r2, #0]
 8008096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080b0:	e012      	b.n	80080d8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080b2:	f7fd f933 	bl	800531c <HAL_GetTick>
 80080b6:	0002      	movs	r2, r0
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d802      	bhi.n	80080c8 <HAL_SPI_Transmit+0x230>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	d102      	bne.n	80080ce <HAL_SPI_Transmit+0x236>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80080ce:	231f      	movs	r3, #31
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	2203      	movs	r2, #3
 80080d4:	701a      	strb	r2, [r3, #0]
          goto error;
 80080d6:	e028      	b.n	800812a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1cc      	bne.n	800807c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	0018      	movs	r0, r3
 80080ea:	f000 fcd9 	bl	8008aa0 <SPI_EndRxTxTransaction>
 80080ee:	1e03      	subs	r3, r0, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008100:	2300      	movs	r3, #0
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800811e:	231f      	movs	r3, #31
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	2201      	movs	r2, #1
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e000      	b.n	800812a <HAL_SPI_Transmit+0x292>
  }

error:
 8008128:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	225d      	movs	r2, #93	; 0x5d
 800812e:	2101      	movs	r1, #1
 8008130:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	225c      	movs	r2, #92	; 0x5c
 8008136:	2100      	movs	r1, #0
 8008138:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800813a:	231f      	movs	r3, #31
 800813c:	18fb      	adds	r3, r7, r3
 800813e:	781b      	ldrb	r3, [r3, #0]
}
 8008140:	0018      	movs	r0, r3
 8008142:	46bd      	mov	sp, r7
 8008144:	b008      	add	sp, #32
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b089      	sub	sp, #36	; 0x24
 800814c:	af02      	add	r7, sp, #8
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	1dbb      	adds	r3, r7, #6
 8008156:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008158:	2317      	movs	r3, #23
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	2382      	movs	r3, #130	; 0x82
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	429a      	cmp	r2, r3
 800816a:	d113      	bne.n	8008194 <HAL_SPI_Receive+0x4c>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10f      	bne.n	8008194 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	225d      	movs	r2, #93	; 0x5d
 8008178:	2104      	movs	r1, #4
 800817a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800817c:	1dbb      	adds	r3, r7, #6
 800817e:	881c      	ldrh	r4, [r3, #0]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	0023      	movs	r3, r4
 800818c:	f000 f928 	bl	80083e0 <HAL_SPI_TransmitReceive>
 8008190:	0003      	movs	r3, r0
 8008192:	e11c      	b.n	80083ce <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	225c      	movs	r2, #92	; 0x5c
 8008198:	5c9b      	ldrb	r3, [r3, r2]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_SPI_Receive+0x5a>
 800819e:	2302      	movs	r3, #2
 80081a0:	e115      	b.n	80083ce <HAL_SPI_Receive+0x286>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	225c      	movs	r2, #92	; 0x5c
 80081a6:	2101      	movs	r1, #1
 80081a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081aa:	f7fd f8b7 	bl	800531c <HAL_GetTick>
 80081ae:	0003      	movs	r3, r0
 80081b0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	225d      	movs	r2, #93	; 0x5d
 80081b6:	5c9b      	ldrb	r3, [r3, r2]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d004      	beq.n	80081c8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80081be:	2317      	movs	r3, #23
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	2202      	movs	r2, #2
 80081c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80081c6:	e0f7      	b.n	80083b8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_SPI_Receive+0x8e>
 80081ce:	1dbb      	adds	r3, r7, #6
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80081d6:	2317      	movs	r3, #23
 80081d8:	18fb      	adds	r3, r7, r3
 80081da:	2201      	movs	r2, #1
 80081dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80081de:	e0eb      	b.n	80083b8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	225d      	movs	r2, #93	; 0x5d
 80081e4:	2104      	movs	r1, #4
 80081e6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	1dba      	adds	r2, r7, #6
 80081f8:	2144      	movs	r1, #68	; 0x44
 80081fa:	8812      	ldrh	r2, [r2, #0]
 80081fc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1dba      	adds	r2, r7, #6
 8008202:	2146      	movs	r1, #70	; 0x46
 8008204:	8812      	ldrh	r2, [r2, #0]
 8008206:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	23e0      	movs	r3, #224	; 0xe0
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	429a      	cmp	r2, r3
 8008230:	d908      	bls.n	8008244 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4966      	ldr	r1, [pc, #408]	; (80083d8 <HAL_SPI_Receive+0x290>)
 800823e:	400a      	ands	r2, r1
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	e008      	b.n	8008256 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2180      	movs	r1, #128	; 0x80
 8008250:	0149      	lsls	r1, r1, #5
 8008252:	430a      	orrs	r2, r1
 8008254:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	2380      	movs	r3, #128	; 0x80
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	429a      	cmp	r2, r3
 8008260:	d10f      	bne.n	8008282 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2140      	movs	r1, #64	; 0x40
 800826e:	438a      	bics	r2, r1
 8008270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4957      	ldr	r1, [pc, #348]	; (80083dc <HAL_SPI_Receive+0x294>)
 800827e:	400a      	ands	r2, r1
 8008280:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2240      	movs	r2, #64	; 0x40
 800828a:	4013      	ands	r3, r2
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	d007      	beq.n	80082a0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2140      	movs	r1, #64	; 0x40
 800829c:	430a      	orrs	r2, r1
 800829e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	23e0      	movs	r3, #224	; 0xe0
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d900      	bls.n	80082ae <HAL_SPI_Receive+0x166>
 80082ac:	e069      	b.n	8008382 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082ae:	e031      	b.n	8008314 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	2201      	movs	r2, #1
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d117      	bne.n	80082ee <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	330c      	adds	r3, #12
 80082c4:	001a      	movs	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	b2d2      	uxtb	r2, r2
 80082ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2246      	movs	r2, #70	; 0x46
 80082de:	5a9b      	ldrh	r3, [r3, r2]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b299      	uxth	r1, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2246      	movs	r2, #70	; 0x46
 80082ea:	5299      	strh	r1, [r3, r2]
 80082ec:	e012      	b.n	8008314 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ee:	f7fd f815 	bl	800531c <HAL_GetTick>
 80082f2:	0002      	movs	r2, r0
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d802      	bhi.n	8008304 <HAL_SPI_Receive+0x1bc>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3301      	adds	r3, #1
 8008302:	d102      	bne.n	800830a <HAL_SPI_Receive+0x1c2>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d104      	bne.n	8008314 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800830a:	2317      	movs	r3, #23
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	2203      	movs	r2, #3
 8008310:	701a      	strb	r2, [r3, #0]
          goto error;
 8008312:	e051      	b.n	80083b8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2246      	movs	r2, #70	; 0x46
 8008318:	5a9b      	ldrh	r3, [r3, r2]
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1c7      	bne.n	80082b0 <HAL_SPI_Receive+0x168>
 8008320:	e035      	b.n	800838e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2201      	movs	r2, #1
 800832a:	4013      	ands	r3, r2
 800832c:	2b01      	cmp	r3, #1
 800832e:	d115      	bne.n	800835c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	b292      	uxth	r2, r2
 800833c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2246      	movs	r2, #70	; 0x46
 800834c:	5a9b      	ldrh	r3, [r3, r2]
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b299      	uxth	r1, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2246      	movs	r2, #70	; 0x46
 8008358:	5299      	strh	r1, [r3, r2]
 800835a:	e012      	b.n	8008382 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800835c:	f7fc ffde 	bl	800531c <HAL_GetTick>
 8008360:	0002      	movs	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d802      	bhi.n	8008372 <HAL_SPI_Receive+0x22a>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	3301      	adds	r3, #1
 8008370:	d102      	bne.n	8008378 <HAL_SPI_Receive+0x230>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8008378:	2317      	movs	r3, #23
 800837a:	18fb      	adds	r3, r7, r3
 800837c:	2203      	movs	r2, #3
 800837e:	701a      	strb	r2, [r3, #0]
          goto error;
 8008380:	e01a      	b.n	80083b8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2246      	movs	r2, #70	; 0x46
 8008386:	5a9b      	ldrh	r3, [r3, r2]
 8008388:	b29b      	uxth	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1c9      	bne.n	8008322 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	0018      	movs	r0, r3
 8008396:	f000 fb25 	bl	80089e4 <SPI_EndRxTransaction>
 800839a:	1e03      	subs	r3, r0, #0
 800839c:	d002      	beq.n	80083a4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2220      	movs	r2, #32
 80083a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d004      	beq.n	80083b6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80083ac:	2317      	movs	r3, #23
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	2201      	movs	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e000      	b.n	80083b8 <HAL_SPI_Receive+0x270>
  }

error :
 80083b6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	225d      	movs	r2, #93	; 0x5d
 80083bc:	2101      	movs	r1, #1
 80083be:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	225c      	movs	r2, #92	; 0x5c
 80083c4:	2100      	movs	r1, #0
 80083c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80083c8:	2317      	movs	r3, #23
 80083ca:	18fb      	adds	r3, r7, r3
 80083cc:	781b      	ldrb	r3, [r3, #0]
}
 80083ce:	0018      	movs	r0, r3
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b007      	add	sp, #28
 80083d4:	bd90      	pop	{r4, r7, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	ffffefff 	.word	0xffffefff
 80083dc:	ffffbfff 	.word	0xffffbfff

080083e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08a      	sub	sp, #40	; 0x28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	001a      	movs	r2, r3
 80083ee:	1cbb      	adds	r3, r7, #2
 80083f0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083f2:	2301      	movs	r3, #1
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083f6:	2323      	movs	r3, #35	; 0x23
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	225c      	movs	r2, #92	; 0x5c
 8008402:	5c9b      	ldrb	r3, [r3, r2]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_SPI_TransmitReceive+0x2c>
 8008408:	2302      	movs	r3, #2
 800840a:	e1b5      	b.n	8008778 <HAL_SPI_TransmitReceive+0x398>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	225c      	movs	r2, #92	; 0x5c
 8008410:	2101      	movs	r1, #1
 8008412:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008414:	f7fc ff82 	bl	800531c <HAL_GetTick>
 8008418:	0003      	movs	r3, r0
 800841a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800841c:	201b      	movs	r0, #27
 800841e:	183b      	adds	r3, r7, r0
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	215d      	movs	r1, #93	; 0x5d
 8008424:	5c52      	ldrb	r2, [r2, r1]
 8008426:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800842e:	2312      	movs	r3, #18
 8008430:	18fb      	adds	r3, r7, r3
 8008432:	1cba      	adds	r2, r7, #2
 8008434:	8812      	ldrh	r2, [r2, #0]
 8008436:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008438:	183b      	adds	r3, r7, r0
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d011      	beq.n	8008464 <HAL_SPI_TransmitReceive+0x84>
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	2382      	movs	r3, #130	; 0x82
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	429a      	cmp	r2, r3
 8008448:	d107      	bne.n	800845a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <HAL_SPI_TransmitReceive+0x7a>
 8008452:	183b      	adds	r3, r7, r0
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b04      	cmp	r3, #4
 8008458:	d004      	beq.n	8008464 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800845a:	2323      	movs	r3, #35	; 0x23
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	2202      	movs	r2, #2
 8008460:	701a      	strb	r2, [r3, #0]
    goto error;
 8008462:	e17e      	b.n	8008762 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d006      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x98>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x98>
 8008470:	1cbb      	adds	r3, r7, #2
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008478:	2323      	movs	r3, #35	; 0x23
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	2201      	movs	r2, #1
 800847e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008480:	e16f      	b.n	8008762 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	225d      	movs	r2, #93	; 0x5d
 8008486:	5c9b      	ldrb	r3, [r3, r2]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b04      	cmp	r3, #4
 800848c:	d003      	beq.n	8008496 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	225d      	movs	r2, #93	; 0x5d
 8008492:	2105      	movs	r1, #5
 8008494:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1cba      	adds	r2, r7, #2
 80084a6:	2146      	movs	r1, #70	; 0x46
 80084a8:	8812      	ldrh	r2, [r2, #0]
 80084aa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	1cba      	adds	r2, r7, #2
 80084b0:	2144      	movs	r1, #68	; 0x44
 80084b2:	8812      	ldrh	r2, [r2, #0]
 80084b4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	1cba      	adds	r2, r7, #2
 80084c0:	8812      	ldrh	r2, [r2, #0]
 80084c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	1cba      	adds	r2, r7, #2
 80084c8:	8812      	ldrh	r2, [r2, #0]
 80084ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	23e0      	movs	r3, #224	; 0xe0
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d908      	bls.n	80084f6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	49a4      	ldr	r1, [pc, #656]	; (8008780 <HAL_SPI_TransmitReceive+0x3a0>)
 80084f0:	400a      	ands	r2, r1
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	e008      	b.n	8008508 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2180      	movs	r1, #128	; 0x80
 8008502:	0149      	lsls	r1, r1, #5
 8008504:	430a      	orrs	r2, r1
 8008506:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2240      	movs	r2, #64	; 0x40
 8008510:	4013      	ands	r3, r2
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	d007      	beq.n	8008526 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2140      	movs	r1, #64	; 0x40
 8008522:	430a      	orrs	r2, r1
 8008524:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	23e0      	movs	r3, #224	; 0xe0
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	429a      	cmp	r2, r3
 8008530:	d800      	bhi.n	8008534 <HAL_SPI_TransmitReceive+0x154>
 8008532:	e07f      	b.n	8008634 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x168>
 800853c:	2312      	movs	r3, #18
 800853e:	18fb      	adds	r3, r7, r3
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d000      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x168>
 8008546:	e069      	b.n	800861c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	881a      	ldrh	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	1c9a      	adds	r2, r3, #2
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800856c:	e056      	b.n	800861c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2202      	movs	r2, #2
 8008576:	4013      	ands	r3, r2
 8008578:	2b02      	cmp	r3, #2
 800857a:	d11b      	bne.n	80085b4 <HAL_SPI_TransmitReceive+0x1d4>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d016      	beq.n	80085b4 <HAL_SPI_TransmitReceive+0x1d4>
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	2b01      	cmp	r3, #1
 800858a:	d113      	bne.n	80085b4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	881a      	ldrh	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	1c9a      	adds	r2, r3, #2
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2201      	movs	r2, #1
 80085bc:	4013      	ands	r3, r2
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d11c      	bne.n	80085fc <HAL_SPI_TransmitReceive+0x21c>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2246      	movs	r2, #70	; 0x46
 80085c6:	5a9b      	ldrh	r3, [r3, r2]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d016      	beq.n	80085fc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	b292      	uxth	r2, r2
 80085da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	1c9a      	adds	r2, r3, #2
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2246      	movs	r2, #70	; 0x46
 80085ea:	5a9b      	ldrh	r3, [r3, r2]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b299      	uxth	r1, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2246      	movs	r2, #70	; 0x46
 80085f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085f8:	2301      	movs	r3, #1
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80085fc:	f7fc fe8e 	bl	800531c <HAL_GetTick>
 8008600:	0002      	movs	r2, r0
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008608:	429a      	cmp	r2, r3
 800860a:	d807      	bhi.n	800861c <HAL_SPI_TransmitReceive+0x23c>
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	3301      	adds	r3, #1
 8008610:	d004      	beq.n	800861c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8008612:	2323      	movs	r3, #35	; 0x23
 8008614:	18fb      	adds	r3, r7, r3
 8008616:	2203      	movs	r2, #3
 8008618:	701a      	strb	r2, [r3, #0]
        goto error;
 800861a:	e0a2      	b.n	8008762 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1a3      	bne.n	800856e <HAL_SPI_TransmitReceive+0x18e>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2246      	movs	r2, #70	; 0x46
 800862a:	5a9b      	ldrh	r3, [r3, r2]
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d19d      	bne.n	800856e <HAL_SPI_TransmitReceive+0x18e>
 8008632:	e085      	b.n	8008740 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <HAL_SPI_TransmitReceive+0x268>
 800863c:	2312      	movs	r3, #18
 800863e:	18fb      	adds	r3, r7, r3
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d000      	beq.n	8008648 <HAL_SPI_TransmitReceive+0x268>
 8008646:	e070      	b.n	800872a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	7812      	ldrb	r2, [r2, #0]
 8008654:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800866e:	e05c      	b.n	800872a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2202      	movs	r2, #2
 8008678:	4013      	ands	r3, r2
 800867a:	2b02      	cmp	r3, #2
 800867c:	d11c      	bne.n	80086b8 <HAL_SPI_TransmitReceive+0x2d8>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008682:	b29b      	uxth	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d017      	beq.n	80086b8 <HAL_SPI_TransmitReceive+0x2d8>
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	2b01      	cmp	r3, #1
 800868c:	d114      	bne.n	80086b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330c      	adds	r3, #12
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2201      	movs	r2, #1
 80086c0:	4013      	ands	r3, r2
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d11e      	bne.n	8008704 <HAL_SPI_TransmitReceive+0x324>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2246      	movs	r2, #70	; 0x46
 80086ca:	5a9b      	ldrh	r3, [r3, r2]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d018      	beq.n	8008704 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	330c      	adds	r3, #12
 80086d8:	001a      	movs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	7812      	ldrb	r2, [r2, #0]
 80086e0:	b2d2      	uxtb	r2, r2
 80086e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2246      	movs	r2, #70	; 0x46
 80086f2:	5a9b      	ldrh	r3, [r3, r2]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b299      	uxth	r1, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2246      	movs	r2, #70	; 0x46
 80086fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008700:	2301      	movs	r3, #1
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008704:	f7fc fe0a 	bl	800531c <HAL_GetTick>
 8008708:	0002      	movs	r2, r0
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008710:	429a      	cmp	r2, r3
 8008712:	d802      	bhi.n	800871a <HAL_SPI_TransmitReceive+0x33a>
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	3301      	adds	r3, #1
 8008718:	d102      	bne.n	8008720 <HAL_SPI_TransmitReceive+0x340>
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8008720:	2323      	movs	r3, #35	; 0x23
 8008722:	18fb      	adds	r3, r7, r3
 8008724:	2203      	movs	r2, #3
 8008726:	701a      	strb	r2, [r3, #0]
        goto error;
 8008728:	e01b      	b.n	8008762 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d19d      	bne.n	8008670 <HAL_SPI_TransmitReceive+0x290>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2246      	movs	r2, #70	; 0x46
 8008738:	5a9b      	ldrh	r3, [r3, r2]
 800873a:	b29b      	uxth	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d197      	bne.n	8008670 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	0018      	movs	r0, r3
 8008748:	f000 f9aa 	bl	8008aa0 <SPI_EndRxTxTransaction>
 800874c:	1e03      	subs	r3, r0, #0
 800874e:	d007      	beq.n	8008760 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8008750:	2323      	movs	r3, #35	; 0x23
 8008752:	18fb      	adds	r3, r7, r3
 8008754:	2201      	movs	r2, #1
 8008756:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2220      	movs	r2, #32
 800875c:	661a      	str	r2, [r3, #96]	; 0x60
 800875e:	e000      	b.n	8008762 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8008760:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	225d      	movs	r2, #93	; 0x5d
 8008766:	2101      	movs	r1, #1
 8008768:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	225c      	movs	r2, #92	; 0x5c
 800876e:	2100      	movs	r1, #0
 8008770:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008772:	2323      	movs	r3, #35	; 0x23
 8008774:	18fb      	adds	r3, r7, r3
 8008776:	781b      	ldrb	r3, [r3, #0]
}
 8008778:	0018      	movs	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	b00a      	add	sp, #40	; 0x28
 800877e:	bd80      	pop	{r7, pc}
 8008780:	ffffefff 	.word	0xffffefff

08008784 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	1dfb      	adds	r3, r7, #7
 8008792:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008794:	f7fc fdc2 	bl	800531c <HAL_GetTick>
 8008798:	0002      	movs	r2, r0
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	1a9b      	subs	r3, r3, r2
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	18d3      	adds	r3, r2, r3
 80087a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087a4:	f7fc fdba 	bl	800531c <HAL_GetTick>
 80087a8:	0003      	movs	r3, r0
 80087aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087ac:	4b3a      	ldr	r3, [pc, #232]	; (8008898 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	015b      	lsls	r3, r3, #5
 80087b2:	0d1b      	lsrs	r3, r3, #20
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	4353      	muls	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ba:	e058      	b.n	800886e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	3301      	adds	r3, #1
 80087c0:	d055      	beq.n	800886e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087c2:	f7fc fdab 	bl	800531c <HAL_GetTick>
 80087c6:	0002      	movs	r2, r0
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d902      	bls.n	80087d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d142      	bne.n	800885e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	21e0      	movs	r1, #224	; 0xe0
 80087e4:	438a      	bics	r2, r1
 80087e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	2382      	movs	r3, #130	; 0x82
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d113      	bne.n	800881c <SPI_WaitFlagStateUntilTimeout+0x98>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	2380      	movs	r3, #128	; 0x80
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d005      	beq.n	800880c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	2380      	movs	r3, #128	; 0x80
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	429a      	cmp	r2, r3
 800880a:	d107      	bne.n	800881c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2140      	movs	r1, #64	; 0x40
 8008818:	438a      	bics	r2, r1
 800881a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	019b      	lsls	r3, r3, #6
 8008824:	429a      	cmp	r2, r3
 8008826:	d110      	bne.n	800884a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	491a      	ldr	r1, [pc, #104]	; (800889c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008834:	400a      	ands	r2, r1
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2180      	movs	r1, #128	; 0x80
 8008844:	0189      	lsls	r1, r1, #6
 8008846:	430a      	orrs	r2, r1
 8008848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	225d      	movs	r2, #93	; 0x5d
 800884e:	2101      	movs	r1, #1
 8008850:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	225c      	movs	r2, #92	; 0x5c
 8008856:	2100      	movs	r1, #0
 8008858:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e017      	b.n	800888e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	3b01      	subs	r3, #1
 800886c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	4013      	ands	r3, r2
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	425a      	negs	r2, r3
 800887e:	4153      	adcs	r3, r2
 8008880:	b2db      	uxtb	r3, r3
 8008882:	001a      	movs	r2, r3
 8008884:	1dfb      	adds	r3, r7, #7
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d197      	bne.n	80087bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	0018      	movs	r0, r3
 8008890:	46bd      	mov	sp, r7
 8008892:	b008      	add	sp, #32
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	20000000 	.word	0x20000000
 800889c:	ffffdfff 	.word	0xffffdfff

080088a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08a      	sub	sp, #40	; 0x28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80088ae:	2317      	movs	r3, #23
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	2200      	movs	r2, #0
 80088b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80088b6:	f7fc fd31 	bl	800531c <HAL_GetTick>
 80088ba:	0002      	movs	r2, r0
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	18d3      	adds	r3, r2, r3
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088c6:	f7fc fd29 	bl	800531c <HAL_GetTick>
 80088ca:	0003      	movs	r3, r0
 80088cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80088d6:	4b41      	ldr	r3, [pc, #260]	; (80089dc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	0013      	movs	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	00da      	lsls	r2, r3, #3
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	0d1b      	lsrs	r3, r3, #20
 80088e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e8:	4353      	muls	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80088ec:	e068      	b.n	80089c0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	23c0      	movs	r3, #192	; 0xc0
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d10a      	bne.n	800890e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d107      	bne.n	800890e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	2117      	movs	r1, #23
 8008906:	187b      	adds	r3, r7, r1
 8008908:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800890a:	187b      	adds	r3, r7, r1
 800890c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	d055      	beq.n	80089c0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008914:	f7fc fd02 	bl	800531c <HAL_GetTick>
 8008918:	0002      	movs	r2, r0
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008920:	429a      	cmp	r2, r3
 8008922:	d902      	bls.n	800892a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d142      	bne.n	80089b0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	21e0      	movs	r1, #224	; 0xe0
 8008936:	438a      	bics	r2, r1
 8008938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	2382      	movs	r3, #130	; 0x82
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	429a      	cmp	r2, r3
 8008944:	d113      	bne.n	800896e <SPI_WaitFifoStateUntilTimeout+0xce>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	2380      	movs	r3, #128	; 0x80
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	429a      	cmp	r2, r3
 8008950:	d005      	beq.n	800895e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	2380      	movs	r3, #128	; 0x80
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	429a      	cmp	r2, r3
 800895c:	d107      	bne.n	800896e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2140      	movs	r1, #64	; 0x40
 800896a:	438a      	bics	r2, r1
 800896c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008972:	2380      	movs	r3, #128	; 0x80
 8008974:	019b      	lsls	r3, r3, #6
 8008976:	429a      	cmp	r2, r3
 8008978:	d110      	bne.n	800899c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4916      	ldr	r1, [pc, #88]	; (80089e0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008986:	400a      	ands	r2, r1
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	0189      	lsls	r1, r1, #6
 8008998:	430a      	orrs	r2, r1
 800899a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	225d      	movs	r2, #93	; 0x5d
 80089a0:	2101      	movs	r1, #1
 80089a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	225c      	movs	r2, #92	; 0x5c
 80089a8:	2100      	movs	r1, #0
 80089aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e010      	b.n	80089d2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	3b01      	subs	r3, #1
 80089be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4013      	ands	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d18e      	bne.n	80088ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	0018      	movs	r0, r3
 80089d4:	46bd      	mov	sp, r7
 80089d6:	b00a      	add	sp, #40	; 0x28
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	20000000 	.word	0x20000000
 80089e0:	ffffdfff 	.word	0xffffdfff

080089e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	2382      	movs	r3, #130	; 0x82
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d113      	bne.n	8008a24 <SPI_EndRxTransaction+0x40>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	2380      	movs	r3, #128	; 0x80
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d005      	beq.n	8008a14 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	2380      	movs	r3, #128	; 0x80
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d107      	bne.n	8008a24 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2140      	movs	r1, #64	; 0x40
 8008a20:	438a      	bics	r2, r1
 8008a22:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	0013      	movs	r3, r2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2180      	movs	r1, #128	; 0x80
 8008a32:	f7ff fea7 	bl	8008784 <SPI_WaitFlagStateUntilTimeout>
 8008a36:	1e03      	subs	r3, r0, #0
 8008a38:	d007      	beq.n	8008a4a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a3e:	2220      	movs	r2, #32
 8008a40:	431a      	orrs	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e026      	b.n	8008a98 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	2382      	movs	r3, #130	; 0x82
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d11f      	bne.n	8008a96 <SPI_EndRxTransaction+0xb2>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	2380      	movs	r3, #128	; 0x80
 8008a5c:	021b      	lsls	r3, r3, #8
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d005      	beq.n	8008a6e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689a      	ldr	r2, [r3, #8]
 8008a66:	2380      	movs	r3, #128	; 0x80
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d113      	bne.n	8008a96 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	23c0      	movs	r3, #192	; 0xc0
 8008a72:	00d9      	lsls	r1, r3, #3
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	0013      	movs	r3, r2
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f7ff ff0f 	bl	80088a0 <SPI_WaitFifoStateUntilTimeout>
 8008a82:	1e03      	subs	r3, r0, #0
 8008a84:	d007      	beq.n	8008a96 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e000      	b.n	8008a98 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	0018      	movs	r0, r3
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b004      	add	sp, #16
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	23c0      	movs	r3, #192	; 0xc0
 8008ab0:	0159      	lsls	r1, r3, #5
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	0013      	movs	r3, r2
 8008aba:	2200      	movs	r2, #0
 8008abc:	f7ff fef0 	bl	80088a0 <SPI_WaitFifoStateUntilTimeout>
 8008ac0:	1e03      	subs	r3, r0, #0
 8008ac2:	d007      	beq.n	8008ad4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac8:	2220      	movs	r2, #32
 8008aca:	431a      	orrs	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e027      	b.n	8008b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	0013      	movs	r3, r2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2180      	movs	r1, #128	; 0x80
 8008ae2:	f7ff fe4f 	bl	8008784 <SPI_WaitFlagStateUntilTimeout>
 8008ae6:	1e03      	subs	r3, r0, #0
 8008ae8:	d007      	beq.n	8008afa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aee:	2220      	movs	r2, #32
 8008af0:	431a      	orrs	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e014      	b.n	8008b24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	23c0      	movs	r3, #192	; 0xc0
 8008afe:	00d9      	lsls	r1, r3, #3
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	0013      	movs	r3, r2
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f7ff fec9 	bl	80088a0 <SPI_WaitFifoStateUntilTimeout>
 8008b0e:	1e03      	subs	r3, r0, #0
 8008b10:	d007      	beq.n	8008b22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b16:	2220      	movs	r2, #32
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e000      	b.n	8008b24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	0018      	movs	r0, r3
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b004      	add	sp, #16
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e04a      	b.n	8008bd4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	223d      	movs	r2, #61	; 0x3d
 8008b42:	5c9b      	ldrb	r3, [r3, r2]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d107      	bne.n	8008b5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	223c      	movs	r2, #60	; 0x3c
 8008b4e:	2100      	movs	r1, #0
 8008b50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	0018      	movs	r0, r3
 8008b56:	f7fb fc6f 	bl	8004438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	223d      	movs	r2, #61	; 0x3d
 8008b5e:	2102      	movs	r1, #2
 8008b60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	0019      	movs	r1, r3
 8008b6c:	0010      	movs	r0, r2
 8008b6e:	f000 fe91 	bl	8009894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2248      	movs	r2, #72	; 0x48
 8008b76:	2101      	movs	r1, #1
 8008b78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	223e      	movs	r2, #62	; 0x3e
 8008b7e:	2101      	movs	r1, #1
 8008b80:	5499      	strb	r1, [r3, r2]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	223f      	movs	r2, #63	; 0x3f
 8008b86:	2101      	movs	r1, #1
 8008b88:	5499      	strb	r1, [r3, r2]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2240      	movs	r2, #64	; 0x40
 8008b8e:	2101      	movs	r1, #1
 8008b90:	5499      	strb	r1, [r3, r2]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2241      	movs	r2, #65	; 0x41
 8008b96:	2101      	movs	r1, #1
 8008b98:	5499      	strb	r1, [r3, r2]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2242      	movs	r2, #66	; 0x42
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	5499      	strb	r1, [r3, r2]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2243      	movs	r2, #67	; 0x43
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2244      	movs	r2, #68	; 0x44
 8008bae:	2101      	movs	r1, #1
 8008bb0:	5499      	strb	r1, [r3, r2]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2245      	movs	r2, #69	; 0x45
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	5499      	strb	r1, [r3, r2]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2246      	movs	r2, #70	; 0x46
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	5499      	strb	r1, [r3, r2]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2247      	movs	r2, #71	; 0x47
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	223d      	movs	r2, #61	; 0x3d
 8008bce:	2101      	movs	r1, #1
 8008bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b002      	add	sp, #8
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	223d      	movs	r2, #61	; 0x3d
 8008be8:	5c9b      	ldrb	r3, [r3, r2]
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d001      	beq.n	8008bf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e034      	b.n	8008c5e <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	223d      	movs	r2, #61	; 0x3d
 8008bf8:	2102      	movs	r1, #2
 8008bfa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a19      	ldr	r2, [pc, #100]	; (8008c68 <HAL_TIM_Base_Start+0x8c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d009      	beq.n	8008c1a <HAL_TIM_Base_Start+0x3e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a18      	ldr	r2, [pc, #96]	; (8008c6c <HAL_TIM_Base_Start+0x90>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d004      	beq.n	8008c1a <HAL_TIM_Base_Start+0x3e>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a16      	ldr	r2, [pc, #88]	; (8008c70 <HAL_TIM_Base_Start+0x94>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d116      	bne.n	8008c48 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <HAL_TIM_Base_Start+0x98>)
 8008c22:	4013      	ands	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b06      	cmp	r3, #6
 8008c2a:	d016      	beq.n	8008c5a <HAL_TIM_Base_Start+0x7e>
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	2380      	movs	r3, #128	; 0x80
 8008c30:	025b      	lsls	r3, r3, #9
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d011      	beq.n	8008c5a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2101      	movs	r1, #1
 8008c42:	430a      	orrs	r2, r1
 8008c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c46:	e008      	b.n	8008c5a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2101      	movs	r1, #1
 8008c54:	430a      	orrs	r2, r1
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	e000      	b.n	8008c5c <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	0018      	movs	r0, r3
 8008c60:	46bd      	mov	sp, r7
 8008c62:	b004      	add	sp, #16
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	40012c00 	.word	0x40012c00
 8008c6c:	40000400 	.word	0x40000400
 8008c70:	40014000 	.word	0x40014000
 8008c74:	00010007 	.word	0x00010007

08008c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	223d      	movs	r2, #61	; 0x3d
 8008c84:	5c9b      	ldrb	r3, [r3, r2]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d001      	beq.n	8008c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e03c      	b.n	8008d0a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	223d      	movs	r2, #61	; 0x3d
 8008c94:	2102      	movs	r1, #2
 8008c96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a19      	ldr	r2, [pc, #100]	; (8008d14 <HAL_TIM_Base_Start_IT+0x9c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d009      	beq.n	8008cc6 <HAL_TIM_Base_Start_IT+0x4e>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a18      	ldr	r2, [pc, #96]	; (8008d18 <HAL_TIM_Base_Start_IT+0xa0>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d004      	beq.n	8008cc6 <HAL_TIM_Base_Start_IT+0x4e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <HAL_TIM_Base_Start_IT+0xa4>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d116      	bne.n	8008cf4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	4a14      	ldr	r2, [pc, #80]	; (8008d20 <HAL_TIM_Base_Start_IT+0xa8>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b06      	cmp	r3, #6
 8008cd6:	d016      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0x8e>
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	025b      	lsls	r3, r3, #9
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d011      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2101      	movs	r1, #1
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf2:	e008      	b.n	8008d06 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2101      	movs	r1, #1
 8008d00:	430a      	orrs	r2, r1
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e000      	b.n	8008d08 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d06:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b004      	add	sp, #16
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	40012c00 	.word	0x40012c00
 8008d18:	40000400 	.word	0x40000400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	00010007 	.word	0x00010007

08008d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e04a      	b.n	8008dcc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	223d      	movs	r2, #61	; 0x3d
 8008d3a:	5c9b      	ldrb	r3, [r3, r2]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d107      	bne.n	8008d52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	223c      	movs	r2, #60	; 0x3c
 8008d46:	2100      	movs	r1, #0
 8008d48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f000 f841 	bl	8008dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	223d      	movs	r2, #61	; 0x3d
 8008d56:	2102      	movs	r1, #2
 8008d58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3304      	adds	r3, #4
 8008d62:	0019      	movs	r1, r3
 8008d64:	0010      	movs	r0, r2
 8008d66:	f000 fd95 	bl	8009894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2248      	movs	r2, #72	; 0x48
 8008d6e:	2101      	movs	r1, #1
 8008d70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	223e      	movs	r2, #62	; 0x3e
 8008d76:	2101      	movs	r1, #1
 8008d78:	5499      	strb	r1, [r3, r2]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	223f      	movs	r2, #63	; 0x3f
 8008d7e:	2101      	movs	r1, #1
 8008d80:	5499      	strb	r1, [r3, r2]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2240      	movs	r2, #64	; 0x40
 8008d86:	2101      	movs	r1, #1
 8008d88:	5499      	strb	r1, [r3, r2]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2241      	movs	r2, #65	; 0x41
 8008d8e:	2101      	movs	r1, #1
 8008d90:	5499      	strb	r1, [r3, r2]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2242      	movs	r2, #66	; 0x42
 8008d96:	2101      	movs	r1, #1
 8008d98:	5499      	strb	r1, [r3, r2]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2243      	movs	r2, #67	; 0x43
 8008d9e:	2101      	movs	r1, #1
 8008da0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2244      	movs	r2, #68	; 0x44
 8008da6:	2101      	movs	r1, #1
 8008da8:	5499      	strb	r1, [r3, r2]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2245      	movs	r2, #69	; 0x45
 8008dae:	2101      	movs	r1, #1
 8008db0:	5499      	strb	r1, [r3, r2]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2246      	movs	r2, #70	; 0x46
 8008db6:	2101      	movs	r1, #1
 8008db8:	5499      	strb	r1, [r3, r2]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2247      	movs	r2, #71	; 0x47
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	223d      	movs	r2, #61	; 0x3d
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	0018      	movs	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	b002      	add	sp, #8
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ddc:	46c0      	nop			; (mov r8, r8)
 8008dde:	46bd      	mov	sp, r7
 8008de0:	b002      	add	sp, #8
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d108      	bne.n	8008e06 <HAL_TIM_PWM_Start+0x22>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	223e      	movs	r2, #62	; 0x3e
 8008df8:	5c9b      	ldrb	r3, [r3, r2]
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	1e5a      	subs	r2, r3, #1
 8008e00:	4193      	sbcs	r3, r2
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	e037      	b.n	8008e76 <HAL_TIM_PWM_Start+0x92>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d108      	bne.n	8008e1e <HAL_TIM_PWM_Start+0x3a>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	223f      	movs	r2, #63	; 0x3f
 8008e10:	5c9b      	ldrb	r3, [r3, r2]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	1e5a      	subs	r2, r3, #1
 8008e18:	4193      	sbcs	r3, r2
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	e02b      	b.n	8008e76 <HAL_TIM_PWM_Start+0x92>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d108      	bne.n	8008e36 <HAL_TIM_PWM_Start+0x52>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2240      	movs	r2, #64	; 0x40
 8008e28:	5c9b      	ldrb	r3, [r3, r2]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	1e5a      	subs	r2, r3, #1
 8008e30:	4193      	sbcs	r3, r2
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	e01f      	b.n	8008e76 <HAL_TIM_PWM_Start+0x92>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b0c      	cmp	r3, #12
 8008e3a:	d108      	bne.n	8008e4e <HAL_TIM_PWM_Start+0x6a>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2241      	movs	r2, #65	; 0x41
 8008e40:	5c9b      	ldrb	r3, [r3, r2]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	1e5a      	subs	r2, r3, #1
 8008e48:	4193      	sbcs	r3, r2
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	e013      	b.n	8008e76 <HAL_TIM_PWM_Start+0x92>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d108      	bne.n	8008e66 <HAL_TIM_PWM_Start+0x82>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2242      	movs	r2, #66	; 0x42
 8008e58:	5c9b      	ldrb	r3, [r3, r2]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	1e5a      	subs	r2, r3, #1
 8008e60:	4193      	sbcs	r3, r2
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	e007      	b.n	8008e76 <HAL_TIM_PWM_Start+0x92>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2243      	movs	r2, #67	; 0x43
 8008e6a:	5c9b      	ldrb	r3, [r3, r2]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	1e5a      	subs	r2, r3, #1
 8008e72:	4193      	sbcs	r3, r2
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e085      	b.n	8008f8a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <HAL_TIM_PWM_Start+0xaa>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	223e      	movs	r2, #62	; 0x3e
 8008e88:	2102      	movs	r1, #2
 8008e8a:	5499      	strb	r1, [r3, r2]
 8008e8c:	e023      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xf2>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d104      	bne.n	8008e9e <HAL_TIM_PWM_Start+0xba>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	223f      	movs	r2, #63	; 0x3f
 8008e98:	2102      	movs	r1, #2
 8008e9a:	5499      	strb	r1, [r3, r2]
 8008e9c:	e01b      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xf2>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d104      	bne.n	8008eae <HAL_TIM_PWM_Start+0xca>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2240      	movs	r2, #64	; 0x40
 8008ea8:	2102      	movs	r1, #2
 8008eaa:	5499      	strb	r1, [r3, r2]
 8008eac:	e013      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xf2>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b0c      	cmp	r3, #12
 8008eb2:	d104      	bne.n	8008ebe <HAL_TIM_PWM_Start+0xda>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2241      	movs	r2, #65	; 0x41
 8008eb8:	2102      	movs	r1, #2
 8008eba:	5499      	strb	r1, [r3, r2]
 8008ebc:	e00b      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xf2>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d104      	bne.n	8008ece <HAL_TIM_PWM_Start+0xea>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2242      	movs	r2, #66	; 0x42
 8008ec8:	2102      	movs	r1, #2
 8008eca:	5499      	strb	r1, [r3, r2]
 8008ecc:	e003      	b.n	8008ed6 <HAL_TIM_PWM_Start+0xf2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2243      	movs	r2, #67	; 0x43
 8008ed2:	2102      	movs	r1, #2
 8008ed4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	2201      	movs	r2, #1
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f001 f8ae 	bl	800a040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a2a      	ldr	r2, [pc, #168]	; (8008f94 <HAL_TIM_PWM_Start+0x1b0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d00e      	beq.n	8008f0c <HAL_TIM_PWM_Start+0x128>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a29      	ldr	r2, [pc, #164]	; (8008f98 <HAL_TIM_PWM_Start+0x1b4>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d009      	beq.n	8008f0c <HAL_TIM_PWM_Start+0x128>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a27      	ldr	r2, [pc, #156]	; (8008f9c <HAL_TIM_PWM_Start+0x1b8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d004      	beq.n	8008f0c <HAL_TIM_PWM_Start+0x128>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a26      	ldr	r2, [pc, #152]	; (8008fa0 <HAL_TIM_PWM_Start+0x1bc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d101      	bne.n	8008f10 <HAL_TIM_PWM_Start+0x12c>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <HAL_TIM_PWM_Start+0x12e>
 8008f10:	2300      	movs	r3, #0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2180      	movs	r1, #128	; 0x80
 8008f22:	0209      	lsls	r1, r1, #8
 8008f24:	430a      	orrs	r2, r1
 8008f26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a19      	ldr	r2, [pc, #100]	; (8008f94 <HAL_TIM_PWM_Start+0x1b0>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d009      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x162>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1b      	ldr	r2, [pc, #108]	; (8008fa4 <HAL_TIM_PWM_Start+0x1c0>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d004      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x162>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a15      	ldr	r2, [pc, #84]	; (8008f98 <HAL_TIM_PWM_Start+0x1b4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d116      	bne.n	8008f74 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4a16      	ldr	r2, [pc, #88]	; (8008fa8 <HAL_TIM_PWM_Start+0x1c4>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b06      	cmp	r3, #6
 8008f56:	d016      	beq.n	8008f86 <HAL_TIM_PWM_Start+0x1a2>
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	2380      	movs	r3, #128	; 0x80
 8008f5c:	025b      	lsls	r3, r3, #9
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d011      	beq.n	8008f86 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f72:	e008      	b.n	8008f86 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2101      	movs	r1, #1
 8008f80:	430a      	orrs	r2, r1
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e000      	b.n	8008f88 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f86:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	b004      	add	sp, #16
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	40012c00 	.word	0x40012c00
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40014400 	.word	0x40014400
 8008fa0:	40014800 	.word	0x40014800
 8008fa4:	40000400 	.word	0x40000400
 8008fa8:	00010007 	.word	0x00010007

08008fac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e090      	b.n	80090e2 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	223d      	movs	r2, #61	; 0x3d
 8008fc4:	5c9b      	ldrb	r3, [r3, r2]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d107      	bne.n	8008fdc <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	223c      	movs	r2, #60	; 0x3c
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f7fb fafe 	bl	80045d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	223d      	movs	r2, #61	; 0x3d
 8008fe0:	2102      	movs	r1, #2
 8008fe2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	493f      	ldr	r1, [pc, #252]	; (80090ec <HAL_TIM_Encoder_Init+0x140>)
 8008ff0:	400a      	ands	r2, r1
 8008ff2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	0019      	movs	r1, r3
 8008ffe:	0010      	movs	r0, r2
 8009000:	f000 fc48 	bl	8009894 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	4a31      	ldr	r2, [pc, #196]	; (80090f0 <HAL_TIM_Encoder_Init+0x144>)
 800902a:	4013      	ands	r3, r2
 800902c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	4313      	orrs	r3, r2
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4313      	orrs	r3, r2
 800903e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	4a2c      	ldr	r2, [pc, #176]	; (80090f4 <HAL_TIM_Encoder_Init+0x148>)
 8009044:	4013      	ands	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	4a2b      	ldr	r2, [pc, #172]	; (80090f8 <HAL_TIM_Encoder_Init+0x14c>)
 800904c:	4013      	ands	r3, r2
 800904e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	021b      	lsls	r3, r3, #8
 800905a:	4313      	orrs	r3, r2
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	011a      	lsls	r2, r3, #4
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	031b      	lsls	r3, r3, #12
 800906e:	4313      	orrs	r3, r2
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	4313      	orrs	r3, r2
 8009074:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2222      	movs	r2, #34	; 0x22
 800907a:	4393      	bics	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2288      	movs	r2, #136	; 0x88
 8009082:	4393      	bics	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	4313      	orrs	r3, r2
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2248      	movs	r2, #72	; 0x48
 80090b4:	2101      	movs	r1, #1
 80090b6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	223e      	movs	r2, #62	; 0x3e
 80090bc:	2101      	movs	r1, #1
 80090be:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	223f      	movs	r2, #63	; 0x3f
 80090c4:	2101      	movs	r1, #1
 80090c6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2244      	movs	r2, #68	; 0x44
 80090cc:	2101      	movs	r1, #1
 80090ce:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2245      	movs	r2, #69	; 0x45
 80090d4:	2101      	movs	r1, #1
 80090d6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	223d      	movs	r2, #61	; 0x3d
 80090dc:	2101      	movs	r1, #1
 80090de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b006      	add	sp, #24
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	fffebff8 	.word	0xfffebff8
 80090f0:	fffffcfc 	.word	0xfffffcfc
 80090f4:	fffff3f3 	.word	0xfffff3f3
 80090f8:	ffff0f0f 	.word	0xffff0f0f

080090fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090fc:	b590      	push	{r4, r7, lr}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009106:	200f      	movs	r0, #15
 8009108:	183b      	adds	r3, r7, r0
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	213e      	movs	r1, #62	; 0x3e
 800910e:	5c52      	ldrb	r2, [r2, r1]
 8009110:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009112:	230e      	movs	r3, #14
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	213f      	movs	r1, #63	; 0x3f
 800911a:	5c52      	ldrb	r2, [r2, r1]
 800911c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800911e:	240d      	movs	r4, #13
 8009120:	193b      	adds	r3, r7, r4
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	2144      	movs	r1, #68	; 0x44
 8009126:	5c52      	ldrb	r2, [r2, r1]
 8009128:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800912a:	230c      	movs	r3, #12
 800912c:	18fb      	adds	r3, r7, r3
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	2145      	movs	r1, #69	; 0x45
 8009132:	5c52      	ldrb	r2, [r2, r1]
 8009134:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d112      	bne.n	8009162 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800913c:	183b      	adds	r3, r7, r0
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d103      	bne.n	800914c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009144:	193b      	adds	r3, r7, r4
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d001      	beq.n	8009150 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e075      	b.n	800923c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	223e      	movs	r2, #62	; 0x3e
 8009154:	2102      	movs	r1, #2
 8009156:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2244      	movs	r2, #68	; 0x44
 800915c:	2102      	movs	r1, #2
 800915e:	5499      	strb	r1, [r3, r2]
 8009160:	e03d      	b.n	80091de <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b04      	cmp	r3, #4
 8009166:	d114      	bne.n	8009192 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009168:	230e      	movs	r3, #14
 800916a:	18fb      	adds	r3, r7, r3
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d104      	bne.n	800917c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009172:	230c      	movs	r3, #12
 8009174:	18fb      	adds	r3, r7, r3
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d001      	beq.n	8009180 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e05d      	b.n	800923c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	223f      	movs	r2, #63	; 0x3f
 8009184:	2102      	movs	r1, #2
 8009186:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2245      	movs	r2, #69	; 0x45
 800918c:	2102      	movs	r1, #2
 800918e:	5499      	strb	r1, [r3, r2]
 8009190:	e025      	b.n	80091de <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009192:	230f      	movs	r3, #15
 8009194:	18fb      	adds	r3, r7, r3
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d10e      	bne.n	80091ba <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800919c:	230e      	movs	r3, #14
 800919e:	18fb      	adds	r3, r7, r3
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d109      	bne.n	80091ba <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091a6:	230d      	movs	r3, #13
 80091a8:	18fb      	adds	r3, r7, r3
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d104      	bne.n	80091ba <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80091b0:	230c      	movs	r3, #12
 80091b2:	18fb      	adds	r3, r7, r3
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d001      	beq.n	80091be <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e03e      	b.n	800923c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	223e      	movs	r2, #62	; 0x3e
 80091c2:	2102      	movs	r1, #2
 80091c4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	223f      	movs	r2, #63	; 0x3f
 80091ca:	2102      	movs	r1, #2
 80091cc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2244      	movs	r2, #68	; 0x44
 80091d2:	2102      	movs	r1, #2
 80091d4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2245      	movs	r2, #69	; 0x45
 80091da:	2102      	movs	r1, #2
 80091dc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_TIM_Encoder_Start+0xf0>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d008      	beq.n	80091fc <HAL_TIM_Encoder_Start+0x100>
 80091ea:	e00f      	b.n	800920c <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2201      	movs	r2, #1
 80091f2:	2100      	movs	r1, #0
 80091f4:	0018      	movs	r0, r3
 80091f6:	f000 ff23 	bl	800a040 <TIM_CCxChannelCmd>
      break;
 80091fa:	e016      	b.n	800922a <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2201      	movs	r2, #1
 8009202:	2104      	movs	r1, #4
 8009204:	0018      	movs	r0, r3
 8009206:	f000 ff1b 	bl	800a040 <TIM_CCxChannelCmd>
      break;
 800920a:	e00e      	b.n	800922a <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2201      	movs	r2, #1
 8009212:	2100      	movs	r1, #0
 8009214:	0018      	movs	r0, r3
 8009216:	f000 ff13 	bl	800a040 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2201      	movs	r2, #1
 8009220:	2104      	movs	r1, #4
 8009222:	0018      	movs	r0, r3
 8009224:	f000 ff0c 	bl	800a040 <TIM_CCxChannelCmd>
      break;
 8009228:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2101      	movs	r1, #1
 8009236:	430a      	orrs	r2, r1
 8009238:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	0018      	movs	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	b005      	add	sp, #20
 8009242:	bd90      	pop	{r4, r7, pc}

08009244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2202      	movs	r2, #2
 8009254:	4013      	ands	r3, r2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d124      	bne.n	80092a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2202      	movs	r2, #2
 8009262:	4013      	ands	r3, r2
 8009264:	2b02      	cmp	r3, #2
 8009266:	d11d      	bne.n	80092a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2203      	movs	r2, #3
 800926e:	4252      	negs	r2, r2
 8009270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	2203      	movs	r2, #3
 8009280:	4013      	ands	r3, r2
 8009282:	d004      	beq.n	800928e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	0018      	movs	r0, r3
 8009288:	f000 faec 	bl	8009864 <HAL_TIM_IC_CaptureCallback>
 800928c:	e007      	b.n	800929e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	0018      	movs	r0, r3
 8009292:	f000 fadf 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	0018      	movs	r0, r3
 800929a:	f000 faeb 	bl	8009874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	2204      	movs	r2, #4
 80092ac:	4013      	ands	r3, r2
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d125      	bne.n	80092fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	2204      	movs	r2, #4
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d11e      	bne.n	80092fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2205      	movs	r2, #5
 80092c6:	4252      	negs	r2, r2
 80092c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2202      	movs	r2, #2
 80092ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	23c0      	movs	r3, #192	; 0xc0
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4013      	ands	r3, r2
 80092dc:	d004      	beq.n	80092e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	0018      	movs	r0, r3
 80092e2:	f000 fabf 	bl	8009864 <HAL_TIM_IC_CaptureCallback>
 80092e6:	e007      	b.n	80092f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	0018      	movs	r0, r3
 80092ec:	f000 fab2 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	0018      	movs	r0, r3
 80092f4:	f000 fabe 	bl	8009874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	2208      	movs	r2, #8
 8009306:	4013      	ands	r3, r2
 8009308:	2b08      	cmp	r3, #8
 800930a:	d124      	bne.n	8009356 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	2208      	movs	r2, #8
 8009314:	4013      	ands	r3, r2
 8009316:	2b08      	cmp	r3, #8
 8009318:	d11d      	bne.n	8009356 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2209      	movs	r2, #9
 8009320:	4252      	negs	r2, r2
 8009322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2204      	movs	r2, #4
 8009328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	2203      	movs	r2, #3
 8009332:	4013      	ands	r3, r2
 8009334:	d004      	beq.n	8009340 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	0018      	movs	r0, r3
 800933a:	f000 fa93 	bl	8009864 <HAL_TIM_IC_CaptureCallback>
 800933e:	e007      	b.n	8009350 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	0018      	movs	r0, r3
 8009344:	f000 fa86 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	0018      	movs	r0, r3
 800934c:	f000 fa92 	bl	8009874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2210      	movs	r2, #16
 800935e:	4013      	ands	r3, r2
 8009360:	2b10      	cmp	r3, #16
 8009362:	d125      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	2210      	movs	r2, #16
 800936c:	4013      	ands	r3, r2
 800936e:	2b10      	cmp	r3, #16
 8009370:	d11e      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2211      	movs	r2, #17
 8009378:	4252      	negs	r2, r2
 800937a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2208      	movs	r2, #8
 8009380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69da      	ldr	r2, [r3, #28]
 8009388:	23c0      	movs	r3, #192	; 0xc0
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4013      	ands	r3, r2
 800938e:	d004      	beq.n	800939a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	0018      	movs	r0, r3
 8009394:	f000 fa66 	bl	8009864 <HAL_TIM_IC_CaptureCallback>
 8009398:	e007      	b.n	80093aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	0018      	movs	r0, r3
 800939e:	f000 fa59 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	0018      	movs	r0, r3
 80093a6:	f000 fa65 	bl	8009874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2201      	movs	r2, #1
 80093b8:	4013      	ands	r3, r2
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d10f      	bne.n	80093de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	4013      	ands	r3, r2
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d108      	bne.n	80093de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2202      	movs	r2, #2
 80093d2:	4252      	negs	r2, r2
 80093d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	0018      	movs	r0, r3
 80093da:	f7fb f98d 	bl	80046f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	2280      	movs	r2, #128	; 0x80
 80093e6:	4013      	ands	r3, r2
 80093e8:	2b80      	cmp	r3, #128	; 0x80
 80093ea:	d10f      	bne.n	800940c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	2280      	movs	r2, #128	; 0x80
 80093f4:	4013      	ands	r3, r2
 80093f6:	2b80      	cmp	r3, #128	; 0x80
 80093f8:	d108      	bne.n	800940c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2281      	movs	r2, #129	; 0x81
 8009400:	4252      	negs	r2, r2
 8009402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	0018      	movs	r0, r3
 8009408:	f000 ff54 	bl	800a2b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691a      	ldr	r2, [r3, #16]
 8009412:	2380      	movs	r3, #128	; 0x80
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	401a      	ands	r2, r3
 8009418:	2380      	movs	r3, #128	; 0x80
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	429a      	cmp	r2, r3
 800941e:	d10e      	bne.n	800943e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	2280      	movs	r2, #128	; 0x80
 8009428:	4013      	ands	r3, r2
 800942a:	2b80      	cmp	r3, #128	; 0x80
 800942c:	d107      	bne.n	800943e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a1c      	ldr	r2, [pc, #112]	; (80094a4 <HAL_TIM_IRQHandler+0x260>)
 8009434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	0018      	movs	r0, r3
 800943a:	f000 ff43 	bl	800a2c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	2240      	movs	r2, #64	; 0x40
 8009446:	4013      	ands	r3, r2
 8009448:	2b40      	cmp	r3, #64	; 0x40
 800944a:	d10f      	bne.n	800946c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	2240      	movs	r2, #64	; 0x40
 8009454:	4013      	ands	r3, r2
 8009456:	2b40      	cmp	r3, #64	; 0x40
 8009458:	d108      	bne.n	800946c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2241      	movs	r2, #65	; 0x41
 8009460:	4252      	negs	r2, r2
 8009462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	0018      	movs	r0, r3
 8009468:	f000 fa0c 	bl	8009884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2220      	movs	r2, #32
 8009474:	4013      	ands	r3, r2
 8009476:	2b20      	cmp	r3, #32
 8009478:	d10f      	bne.n	800949a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	2220      	movs	r2, #32
 8009482:	4013      	ands	r3, r2
 8009484:	2b20      	cmp	r3, #32
 8009486:	d108      	bne.n	800949a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2221      	movs	r2, #33	; 0x21
 800948e:	4252      	negs	r2, r2
 8009490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	0018      	movs	r0, r3
 8009496:	f000 ff05 	bl	800a2a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	46bd      	mov	sp, r7
 800949e:	b002      	add	sp, #8
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	fffffeff 	.word	0xfffffeff

080094a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094b4:	2317      	movs	r3, #23
 80094b6:	18fb      	adds	r3, r7, r3
 80094b8:	2200      	movs	r2, #0
 80094ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	223c      	movs	r2, #60	; 0x3c
 80094c0:	5c9b      	ldrb	r3, [r3, r2]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80094c6:	2302      	movs	r3, #2
 80094c8:	e0e5      	b.n	8009696 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	223c      	movs	r2, #60	; 0x3c
 80094ce:	2101      	movs	r1, #1
 80094d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b14      	cmp	r3, #20
 80094d6:	d900      	bls.n	80094da <HAL_TIM_PWM_ConfigChannel+0x32>
 80094d8:	e0d1      	b.n	800967e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	009a      	lsls	r2, r3, #2
 80094de:	4b70      	ldr	r3, [pc, #448]	; (80096a0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80094e0:	18d3      	adds	r3, r2, r3
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	0011      	movs	r1, r2
 80094ee:	0018      	movs	r0, r3
 80094f0:	f000 fa46 	bl	8009980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699a      	ldr	r2, [r3, #24]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2108      	movs	r1, #8
 8009500:	430a      	orrs	r2, r1
 8009502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2104      	movs	r1, #4
 8009510:	438a      	bics	r2, r1
 8009512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6999      	ldr	r1, [r3, #24]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	691a      	ldr	r2, [r3, #16]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	619a      	str	r2, [r3, #24]
      break;
 8009526:	e0af      	b.n	8009688 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	0011      	movs	r1, r2
 8009530:	0018      	movs	r0, r3
 8009532:	f000 faaf 	bl	8009a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2180      	movs	r1, #128	; 0x80
 8009542:	0109      	lsls	r1, r1, #4
 8009544:	430a      	orrs	r2, r1
 8009546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4954      	ldr	r1, [pc, #336]	; (80096a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009554:	400a      	ands	r2, r1
 8009556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6999      	ldr	r1, [r3, #24]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	021a      	lsls	r2, r3, #8
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	619a      	str	r2, [r3, #24]
      break;
 800956c:	e08c      	b.n	8009688 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	0011      	movs	r1, r2
 8009576:	0018      	movs	r0, r3
 8009578:	f000 fb10 	bl	8009b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69da      	ldr	r2, [r3, #28]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2108      	movs	r1, #8
 8009588:	430a      	orrs	r2, r1
 800958a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69da      	ldr	r2, [r3, #28]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2104      	movs	r1, #4
 8009598:	438a      	bics	r2, r1
 800959a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69d9      	ldr	r1, [r3, #28]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	691a      	ldr	r2, [r3, #16]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	61da      	str	r2, [r3, #28]
      break;
 80095ae:	e06b      	b.n	8009688 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	0011      	movs	r1, r2
 80095b8:	0018      	movs	r0, r3
 80095ba:	f000 fb77 	bl	8009cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69da      	ldr	r2, [r3, #28]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2180      	movs	r1, #128	; 0x80
 80095ca:	0109      	lsls	r1, r1, #4
 80095cc:	430a      	orrs	r2, r1
 80095ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69da      	ldr	r2, [r3, #28]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4932      	ldr	r1, [pc, #200]	; (80096a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80095dc:	400a      	ands	r2, r1
 80095de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69d9      	ldr	r1, [r3, #28]
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	021a      	lsls	r2, r3, #8
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	61da      	str	r2, [r3, #28]
      break;
 80095f4:	e048      	b.n	8009688 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	0011      	movs	r1, r2
 80095fe:	0018      	movs	r0, r3
 8009600:	f000 fbbe 	bl	8009d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2108      	movs	r1, #8
 8009610:	430a      	orrs	r2, r1
 8009612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2104      	movs	r1, #4
 8009620:	438a      	bics	r2, r1
 8009622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	691a      	ldr	r2, [r3, #16]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009636:	e027      	b.n	8009688 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	0011      	movs	r1, r2
 8009640:	0018      	movs	r0, r3
 8009642:	f000 fbfd 	bl	8009e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2180      	movs	r1, #128	; 0x80
 8009652:	0109      	lsls	r1, r1, #4
 8009654:	430a      	orrs	r2, r1
 8009656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4910      	ldr	r1, [pc, #64]	; (80096a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009664:	400a      	ands	r2, r1
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	021a      	lsls	r2, r3, #8
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800967c:	e004      	b.n	8009688 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800967e:	2317      	movs	r3, #23
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	2201      	movs	r2, #1
 8009684:	701a      	strb	r2, [r3, #0]
      break;
 8009686:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	223c      	movs	r2, #60	; 0x3c
 800968c:	2100      	movs	r1, #0
 800968e:	5499      	strb	r1, [r3, r2]

  return status;
 8009690:	2317      	movs	r3, #23
 8009692:	18fb      	adds	r3, r7, r3
 8009694:	781b      	ldrb	r3, [r3, #0]
}
 8009696:	0018      	movs	r0, r3
 8009698:	46bd      	mov	sp, r7
 800969a:	b006      	add	sp, #24
 800969c:	bd80      	pop	{r7, pc}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	08018b74 	.word	0x08018b74
 80096a4:	fffffbff 	.word	0xfffffbff

080096a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096b2:	230f      	movs	r3, #15
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	223c      	movs	r2, #60	; 0x3c
 80096be:	5c9b      	ldrb	r3, [r3, r2]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <HAL_TIM_ConfigClockSource+0x20>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e0bc      	b.n	8009842 <HAL_TIM_ConfigClockSource+0x19a>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	223c      	movs	r2, #60	; 0x3c
 80096cc:	2101      	movs	r1, #1
 80096ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	223d      	movs	r2, #61	; 0x3d
 80096d4:	2102      	movs	r1, #2
 80096d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4a5a      	ldr	r2, [pc, #360]	; (800984c <HAL_TIM_ConfigClockSource+0x1a4>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4a59      	ldr	r2, [pc, #356]	; (8009850 <HAL_TIM_ConfigClockSource+0x1a8>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2280      	movs	r2, #128	; 0x80
 80096fe:	0192      	lsls	r2, r2, #6
 8009700:	4293      	cmp	r3, r2
 8009702:	d040      	beq.n	8009786 <HAL_TIM_ConfigClockSource+0xde>
 8009704:	2280      	movs	r2, #128	; 0x80
 8009706:	0192      	lsls	r2, r2, #6
 8009708:	4293      	cmp	r3, r2
 800970a:	d900      	bls.n	800970e <HAL_TIM_ConfigClockSource+0x66>
 800970c:	e088      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 800970e:	2280      	movs	r2, #128	; 0x80
 8009710:	0152      	lsls	r2, r2, #5
 8009712:	4293      	cmp	r3, r2
 8009714:	d100      	bne.n	8009718 <HAL_TIM_ConfigClockSource+0x70>
 8009716:	e088      	b.n	800982a <HAL_TIM_ConfigClockSource+0x182>
 8009718:	2280      	movs	r2, #128	; 0x80
 800971a:	0152      	lsls	r2, r2, #5
 800971c:	4293      	cmp	r3, r2
 800971e:	d900      	bls.n	8009722 <HAL_TIM_ConfigClockSource+0x7a>
 8009720:	e07e      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 8009722:	2b70      	cmp	r3, #112	; 0x70
 8009724:	d018      	beq.n	8009758 <HAL_TIM_ConfigClockSource+0xb0>
 8009726:	d900      	bls.n	800972a <HAL_TIM_ConfigClockSource+0x82>
 8009728:	e07a      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 800972a:	2b60      	cmp	r3, #96	; 0x60
 800972c:	d04f      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x126>
 800972e:	d900      	bls.n	8009732 <HAL_TIM_ConfigClockSource+0x8a>
 8009730:	e076      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 8009732:	2b50      	cmp	r3, #80	; 0x50
 8009734:	d03b      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x106>
 8009736:	d900      	bls.n	800973a <HAL_TIM_ConfigClockSource+0x92>
 8009738:	e072      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 800973a:	2b40      	cmp	r3, #64	; 0x40
 800973c:	d057      	beq.n	80097ee <HAL_TIM_ConfigClockSource+0x146>
 800973e:	d900      	bls.n	8009742 <HAL_TIM_ConfigClockSource+0x9a>
 8009740:	e06e      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 8009742:	2b30      	cmp	r3, #48	; 0x30
 8009744:	d063      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x166>
 8009746:	d86b      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 8009748:	2b20      	cmp	r3, #32
 800974a:	d060      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x166>
 800974c:	d868      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d05d      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x166>
 8009752:	2b10      	cmp	r3, #16
 8009754:	d05b      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x166>
 8009756:	e063      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	6899      	ldr	r1, [r3, #8]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f000 fc4a 	bl	800a000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2277      	movs	r2, #119	; 0x77
 8009778:	4313      	orrs	r3, r2
 800977a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	609a      	str	r2, [r3, #8]
      break;
 8009784:	e052      	b.n	800982c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6899      	ldr	r1, [r3, #8]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f000 fc33 	bl	800a000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2180      	movs	r1, #128	; 0x80
 80097a6:	01c9      	lsls	r1, r1, #7
 80097a8:	430a      	orrs	r2, r1
 80097aa:	609a      	str	r2, [r3, #8]
      break;
 80097ac:	e03e      	b.n	800982c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	6859      	ldr	r1, [r3, #4]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	001a      	movs	r2, r3
 80097bc:	f000 fba4 	bl	8009f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2150      	movs	r1, #80	; 0x50
 80097c6:	0018      	movs	r0, r3
 80097c8:	f000 fbfe 	bl	8009fc8 <TIM_ITRx_SetConfig>
      break;
 80097cc:	e02e      	b.n	800982c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6859      	ldr	r1, [r3, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	001a      	movs	r2, r3
 80097dc:	f000 fbc2 	bl	8009f64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2160      	movs	r1, #96	; 0x60
 80097e6:	0018      	movs	r0, r3
 80097e8:	f000 fbee 	bl	8009fc8 <TIM_ITRx_SetConfig>
      break;
 80097ec:	e01e      	b.n	800982c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	6859      	ldr	r1, [r3, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	001a      	movs	r2, r3
 80097fc:	f000 fb84 	bl	8009f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2140      	movs	r1, #64	; 0x40
 8009806:	0018      	movs	r0, r3
 8009808:	f000 fbde 	bl	8009fc8 <TIM_ITRx_SetConfig>
      break;
 800980c:	e00e      	b.n	800982c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	0019      	movs	r1, r3
 8009818:	0010      	movs	r0, r2
 800981a:	f000 fbd5 	bl	8009fc8 <TIM_ITRx_SetConfig>
      break;
 800981e:	e005      	b.n	800982c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8009820:	230f      	movs	r3, #15
 8009822:	18fb      	adds	r3, r7, r3
 8009824:	2201      	movs	r2, #1
 8009826:	701a      	strb	r2, [r3, #0]
      break;
 8009828:	e000      	b.n	800982c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800982a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	223d      	movs	r2, #61	; 0x3d
 8009830:	2101      	movs	r1, #1
 8009832:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	223c      	movs	r2, #60	; 0x3c
 8009838:	2100      	movs	r1, #0
 800983a:	5499      	strb	r1, [r3, r2]

  return status;
 800983c:	230f      	movs	r3, #15
 800983e:	18fb      	adds	r3, r7, r3
 8009840:	781b      	ldrb	r3, [r3, #0]
}
 8009842:	0018      	movs	r0, r3
 8009844:	46bd      	mov	sp, r7
 8009846:	b004      	add	sp, #16
 8009848:	bd80      	pop	{r7, pc}
 800984a:	46c0      	nop			; (mov r8, r8)
 800984c:	ffceff88 	.word	0xffceff88
 8009850:	ffff00ff 	.word	0xffff00ff

08009854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800985c:	46c0      	nop			; (mov r8, r8)
 800985e:	46bd      	mov	sp, r7
 8009860:	b002      	add	sp, #8
 8009862:	bd80      	pop	{r7, pc}

08009864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800986c:	46c0      	nop			; (mov r8, r8)
 800986e:	46bd      	mov	sp, r7
 8009870:	b002      	add	sp, #8
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800987c:	46c0      	nop			; (mov r8, r8)
 800987e:	46bd      	mov	sp, r7
 8009880:	b002      	add	sp, #8
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800988c:	46c0      	nop			; (mov r8, r8)
 800988e:	46bd      	mov	sp, r7
 8009890:	b002      	add	sp, #8
 8009892:	bd80      	pop	{r7, pc}

08009894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a2f      	ldr	r2, [pc, #188]	; (8009964 <TIM_Base_SetConfig+0xd0>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d003      	beq.n	80098b4 <TIM_Base_SetConfig+0x20>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a2e      	ldr	r2, [pc, #184]	; (8009968 <TIM_Base_SetConfig+0xd4>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d108      	bne.n	80098c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2270      	movs	r2, #112	; 0x70
 80098b8:	4393      	bics	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a26      	ldr	r2, [pc, #152]	; (8009964 <TIM_Base_SetConfig+0xd0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d013      	beq.n	80098f6 <TIM_Base_SetConfig+0x62>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a25      	ldr	r2, [pc, #148]	; (8009968 <TIM_Base_SetConfig+0xd4>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00f      	beq.n	80098f6 <TIM_Base_SetConfig+0x62>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a24      	ldr	r2, [pc, #144]	; (800996c <TIM_Base_SetConfig+0xd8>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00b      	beq.n	80098f6 <TIM_Base_SetConfig+0x62>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a23      	ldr	r2, [pc, #140]	; (8009970 <TIM_Base_SetConfig+0xdc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d007      	beq.n	80098f6 <TIM_Base_SetConfig+0x62>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a22      	ldr	r2, [pc, #136]	; (8009974 <TIM_Base_SetConfig+0xe0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d003      	beq.n	80098f6 <TIM_Base_SetConfig+0x62>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a21      	ldr	r2, [pc, #132]	; (8009978 <TIM_Base_SetConfig+0xe4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d108      	bne.n	8009908 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <TIM_Base_SetConfig+0xe8>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2280      	movs	r2, #128	; 0x80
 800990c:	4393      	bics	r3, r2
 800990e:	001a      	movs	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a0c      	ldr	r2, [pc, #48]	; (8009964 <TIM_Base_SetConfig+0xd0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d00b      	beq.n	800994e <TIM_Base_SetConfig+0xba>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a0d      	ldr	r2, [pc, #52]	; (8009970 <TIM_Base_SetConfig+0xdc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d007      	beq.n	800994e <TIM_Base_SetConfig+0xba>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a0c      	ldr	r2, [pc, #48]	; (8009974 <TIM_Base_SetConfig+0xe0>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d003      	beq.n	800994e <TIM_Base_SetConfig+0xba>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a0b      	ldr	r2, [pc, #44]	; (8009978 <TIM_Base_SetConfig+0xe4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d103      	bne.n	8009956 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	691a      	ldr	r2, [r3, #16]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	615a      	str	r2, [r3, #20]
}
 800995c:	46c0      	nop			; (mov r8, r8)
 800995e:	46bd      	mov	sp, r7
 8009960:	b004      	add	sp, #16
 8009962:	bd80      	pop	{r7, pc}
 8009964:	40012c00 	.word	0x40012c00
 8009968:	40000400 	.word	0x40000400
 800996c:	40002000 	.word	0x40002000
 8009970:	40014000 	.word	0x40014000
 8009974:	40014400 	.word	0x40014400
 8009978:	40014800 	.word	0x40014800
 800997c:	fffffcff 	.word	0xfffffcff

08009980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	2201      	movs	r2, #1
 8009990:	4393      	bics	r3, r2
 8009992:	001a      	movs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4a32      	ldr	r2, [pc, #200]	; (8009a78 <TIM_OC1_SetConfig+0xf8>)
 80099ae:	4013      	ands	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2203      	movs	r2, #3
 80099b6:	4393      	bics	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2202      	movs	r2, #2
 80099c8:	4393      	bics	r3, r2
 80099ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a28      	ldr	r2, [pc, #160]	; (8009a7c <TIM_OC1_SetConfig+0xfc>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00b      	beq.n	80099f6 <TIM_OC1_SetConfig+0x76>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a27      	ldr	r2, [pc, #156]	; (8009a80 <TIM_OC1_SetConfig+0x100>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d007      	beq.n	80099f6 <TIM_OC1_SetConfig+0x76>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a26      	ldr	r2, [pc, #152]	; (8009a84 <TIM_OC1_SetConfig+0x104>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d003      	beq.n	80099f6 <TIM_OC1_SetConfig+0x76>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a25      	ldr	r2, [pc, #148]	; (8009a88 <TIM_OC1_SetConfig+0x108>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d10c      	bne.n	8009a10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2208      	movs	r2, #8
 80099fa:	4393      	bics	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	4393      	bics	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a1a      	ldr	r2, [pc, #104]	; (8009a7c <TIM_OC1_SetConfig+0xfc>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d00b      	beq.n	8009a30 <TIM_OC1_SetConfig+0xb0>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a19      	ldr	r2, [pc, #100]	; (8009a80 <TIM_OC1_SetConfig+0x100>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d007      	beq.n	8009a30 <TIM_OC1_SetConfig+0xb0>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a18      	ldr	r2, [pc, #96]	; (8009a84 <TIM_OC1_SetConfig+0x104>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d003      	beq.n	8009a30 <TIM_OC1_SetConfig+0xb0>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <TIM_OC1_SetConfig+0x108>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d111      	bne.n	8009a54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	4a16      	ldr	r2, [pc, #88]	; (8009a8c <TIM_OC1_SetConfig+0x10c>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <TIM_OC1_SetConfig+0x110>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	46bd      	mov	sp, r7
 8009a72:	b006      	add	sp, #24
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	fffeff8f 	.word	0xfffeff8f
 8009a7c:	40012c00 	.word	0x40012c00
 8009a80:	40014000 	.word	0x40014000
 8009a84:	40014400 	.word	0x40014400
 8009a88:	40014800 	.word	0x40014800
 8009a8c:	fffffeff 	.word	0xfffffeff
 8009a90:	fffffdff 	.word	0xfffffdff

08009a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	2210      	movs	r2, #16
 8009aa4:	4393      	bics	r3, r2
 8009aa6:	001a      	movs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
 8009ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	4a2e      	ldr	r2, [pc, #184]	; (8009b7c <TIM_OC2_SetConfig+0xe8>)
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4a2d      	ldr	r2, [pc, #180]	; (8009b80 <TIM_OC2_SetConfig+0xec>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2220      	movs	r2, #32
 8009ade:	4393      	bics	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a24      	ldr	r2, [pc, #144]	; (8009b84 <TIM_OC2_SetConfig+0xf0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d10d      	bne.n	8009b12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2280      	movs	r2, #128	; 0x80
 8009afa:	4393      	bics	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2240      	movs	r2, #64	; 0x40
 8009b0e:	4393      	bics	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a1b      	ldr	r2, [pc, #108]	; (8009b84 <TIM_OC2_SetConfig+0xf0>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d00b      	beq.n	8009b32 <TIM_OC2_SetConfig+0x9e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a1a      	ldr	r2, [pc, #104]	; (8009b88 <TIM_OC2_SetConfig+0xf4>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d007      	beq.n	8009b32 <TIM_OC2_SetConfig+0x9e>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a19      	ldr	r2, [pc, #100]	; (8009b8c <TIM_OC2_SetConfig+0xf8>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d003      	beq.n	8009b32 <TIM_OC2_SetConfig+0x9e>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a18      	ldr	r2, [pc, #96]	; (8009b90 <TIM_OC2_SetConfig+0xfc>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d113      	bne.n	8009b5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	4a17      	ldr	r2, [pc, #92]	; (8009b94 <TIM_OC2_SetConfig+0x100>)
 8009b36:	4013      	ands	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	4a16      	ldr	r2, [pc, #88]	; (8009b98 <TIM_OC2_SetConfig+0x104>)
 8009b3e:	4013      	ands	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	621a      	str	r2, [r3, #32]
}
 8009b74:	46c0      	nop			; (mov r8, r8)
 8009b76:	46bd      	mov	sp, r7
 8009b78:	b006      	add	sp, #24
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	feff8fff 	.word	0xfeff8fff
 8009b80:	fffffcff 	.word	0xfffffcff
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40014400 	.word	0x40014400
 8009b90:	40014800 	.word	0x40014800
 8009b94:	fffffbff 	.word	0xfffffbff
 8009b98:	fffff7ff 	.word	0xfffff7ff

08009b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	4a35      	ldr	r2, [pc, #212]	; (8009c80 <TIM_OC3_SetConfig+0xe4>)
 8009bac:	401a      	ands	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4a2f      	ldr	r2, [pc, #188]	; (8009c84 <TIM_OC3_SetConfig+0xe8>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2203      	movs	r2, #3
 8009bd0:	4393      	bics	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	4a29      	ldr	r2, [pc, #164]	; (8009c88 <TIM_OC3_SetConfig+0xec>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	021b      	lsls	r3, r3, #8
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a25      	ldr	r2, [pc, #148]	; (8009c8c <TIM_OC3_SetConfig+0xf0>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d10d      	bne.n	8009c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	4a24      	ldr	r2, [pc, #144]	; (8009c90 <TIM_OC3_SetConfig+0xf4>)
 8009bfe:	4013      	ands	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	021b      	lsls	r3, r3, #8
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	4a20      	ldr	r2, [pc, #128]	; (8009c94 <TIM_OC3_SetConfig+0xf8>)
 8009c12:	4013      	ands	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a1c      	ldr	r2, [pc, #112]	; (8009c8c <TIM_OC3_SetConfig+0xf0>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d00b      	beq.n	8009c36 <TIM_OC3_SetConfig+0x9a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a1d      	ldr	r2, [pc, #116]	; (8009c98 <TIM_OC3_SetConfig+0xfc>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d007      	beq.n	8009c36 <TIM_OC3_SetConfig+0x9a>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <TIM_OC3_SetConfig+0x100>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d003      	beq.n	8009c36 <TIM_OC3_SetConfig+0x9a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <TIM_OC3_SetConfig+0x104>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d113      	bne.n	8009c5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	4a1a      	ldr	r2, [pc, #104]	; (8009ca4 <TIM_OC3_SetConfig+0x108>)
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	4a19      	ldr	r2, [pc, #100]	; (8009ca8 <TIM_OC3_SetConfig+0x10c>)
 8009c42:	4013      	ands	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	621a      	str	r2, [r3, #32]
}
 8009c78:	46c0      	nop			; (mov r8, r8)
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	b006      	add	sp, #24
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	fffffeff 	.word	0xfffffeff
 8009c84:	fffeff8f 	.word	0xfffeff8f
 8009c88:	fffffdff 	.word	0xfffffdff
 8009c8c:	40012c00 	.word	0x40012c00
 8009c90:	fffff7ff 	.word	0xfffff7ff
 8009c94:	fffffbff 	.word	0xfffffbff
 8009c98:	40014000 	.word	0x40014000
 8009c9c:	40014400 	.word	0x40014400
 8009ca0:	40014800 	.word	0x40014800
 8009ca4:	ffffefff 	.word	0xffffefff
 8009ca8:	ffffdfff 	.word	0xffffdfff

08009cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	4a28      	ldr	r2, [pc, #160]	; (8009d5c <TIM_OC4_SetConfig+0xb0>)
 8009cbc:	401a      	ands	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4a22      	ldr	r2, [pc, #136]	; (8009d60 <TIM_OC4_SetConfig+0xb4>)
 8009cd8:	4013      	ands	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4a21      	ldr	r2, [pc, #132]	; (8009d64 <TIM_OC4_SetConfig+0xb8>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	021b      	lsls	r3, r3, #8
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	4a1d      	ldr	r2, [pc, #116]	; (8009d68 <TIM_OC4_SetConfig+0xbc>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	031b      	lsls	r3, r3, #12
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a19      	ldr	r2, [pc, #100]	; (8009d6c <TIM_OC4_SetConfig+0xc0>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d00b      	beq.n	8009d24 <TIM_OC4_SetConfig+0x78>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a18      	ldr	r2, [pc, #96]	; (8009d70 <TIM_OC4_SetConfig+0xc4>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d007      	beq.n	8009d24 <TIM_OC4_SetConfig+0x78>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a17      	ldr	r2, [pc, #92]	; (8009d74 <TIM_OC4_SetConfig+0xc8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d003      	beq.n	8009d24 <TIM_OC4_SetConfig+0x78>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a16      	ldr	r2, [pc, #88]	; (8009d78 <TIM_OC4_SetConfig+0xcc>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d109      	bne.n	8009d38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <TIM_OC4_SetConfig+0xd0>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	019b      	lsls	r3, r3, #6
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	621a      	str	r2, [r3, #32]
}
 8009d52:	46c0      	nop			; (mov r8, r8)
 8009d54:	46bd      	mov	sp, r7
 8009d56:	b006      	add	sp, #24
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	ffffefff 	.word	0xffffefff
 8009d60:	feff8fff 	.word	0xfeff8fff
 8009d64:	fffffcff 	.word	0xfffffcff
 8009d68:	ffffdfff 	.word	0xffffdfff
 8009d6c:	40012c00 	.word	0x40012c00
 8009d70:	40014000 	.word	0x40014000
 8009d74:	40014400 	.word	0x40014400
 8009d78:	40014800 	.word	0x40014800
 8009d7c:	ffffbfff 	.word	0xffffbfff

08009d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	4a25      	ldr	r2, [pc, #148]	; (8009e24 <TIM_OC5_SetConfig+0xa4>)
 8009d90:	401a      	ands	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4a1f      	ldr	r2, [pc, #124]	; (8009e28 <TIM_OC5_SetConfig+0xa8>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	4a1b      	ldr	r2, [pc, #108]	; (8009e2c <TIM_OC5_SetConfig+0xac>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	041b      	lsls	r3, r3, #16
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a17      	ldr	r2, [pc, #92]	; (8009e30 <TIM_OC5_SetConfig+0xb0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d00b      	beq.n	8009dee <TIM_OC5_SetConfig+0x6e>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a16      	ldr	r2, [pc, #88]	; (8009e34 <TIM_OC5_SetConfig+0xb4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d007      	beq.n	8009dee <TIM_OC5_SetConfig+0x6e>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a15      	ldr	r2, [pc, #84]	; (8009e38 <TIM_OC5_SetConfig+0xb8>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d003      	beq.n	8009dee <TIM_OC5_SetConfig+0x6e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a14      	ldr	r2, [pc, #80]	; (8009e3c <TIM_OC5_SetConfig+0xbc>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d109      	bne.n	8009e02 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	4a0c      	ldr	r2, [pc, #48]	; (8009e24 <TIM_OC5_SetConfig+0xa4>)
 8009df2:	4013      	ands	r3, r2
 8009df4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	021b      	lsls	r3, r3, #8
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	621a      	str	r2, [r3, #32]
}
 8009e1c:	46c0      	nop			; (mov r8, r8)
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	b006      	add	sp, #24
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	fffeffff 	.word	0xfffeffff
 8009e28:	fffeff8f 	.word	0xfffeff8f
 8009e2c:	fffdffff 	.word	0xfffdffff
 8009e30:	40012c00 	.word	0x40012c00
 8009e34:	40014000 	.word	0x40014000
 8009e38:	40014400 	.word	0x40014400
 8009e3c:	40014800 	.word	0x40014800

08009e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	4a26      	ldr	r2, [pc, #152]	; (8009ee8 <TIM_OC6_SetConfig+0xa8>)
 8009e50:	401a      	ands	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4a20      	ldr	r2, [pc, #128]	; (8009eec <TIM_OC6_SetConfig+0xac>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	4a1c      	ldr	r2, [pc, #112]	; (8009ef0 <TIM_OC6_SetConfig+0xb0>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	051b      	lsls	r3, r3, #20
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a18      	ldr	r2, [pc, #96]	; (8009ef4 <TIM_OC6_SetConfig+0xb4>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d00b      	beq.n	8009eb0 <TIM_OC6_SetConfig+0x70>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a17      	ldr	r2, [pc, #92]	; (8009ef8 <TIM_OC6_SetConfig+0xb8>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d007      	beq.n	8009eb0 <TIM_OC6_SetConfig+0x70>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a16      	ldr	r2, [pc, #88]	; (8009efc <TIM_OC6_SetConfig+0xbc>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d003      	beq.n	8009eb0 <TIM_OC6_SetConfig+0x70>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a15      	ldr	r2, [pc, #84]	; (8009f00 <TIM_OC6_SetConfig+0xc0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d109      	bne.n	8009ec4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	4a14      	ldr	r2, [pc, #80]	; (8009f04 <TIM_OC6_SetConfig+0xc4>)
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	029b      	lsls	r3, r3, #10
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	621a      	str	r2, [r3, #32]
}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	b006      	add	sp, #24
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	46c0      	nop			; (mov r8, r8)
 8009ee8:	ffefffff 	.word	0xffefffff
 8009eec:	feff8fff 	.word	0xfeff8fff
 8009ef0:	ffdfffff 	.word	0xffdfffff
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	40014000 	.word	0x40014000
 8009efc:	40014400 	.word	0x40014400
 8009f00:	40014800 	.word	0x40014800
 8009f04:	fffbffff 	.word	0xfffbffff

08009f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	4393      	bics	r3, r2
 8009f22:	001a      	movs	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	22f0      	movs	r2, #240	; 0xf0
 8009f32:	4393      	bics	r3, r2
 8009f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	011b      	lsls	r3, r3, #4
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	220a      	movs	r2, #10
 8009f44:	4393      	bics	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	621a      	str	r2, [r3, #32]
}
 8009f5c:	46c0      	nop			; (mov r8, r8)
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	b006      	add	sp, #24
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	2210      	movs	r2, #16
 8009f76:	4393      	bics	r3, r2
 8009f78:	001a      	movs	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	4a0d      	ldr	r2, [pc, #52]	; (8009fc4 <TIM_TI2_ConfigInputStage+0x60>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	031b      	lsls	r3, r3, #12
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	22a0      	movs	r2, #160	; 0xa0
 8009fa0:	4393      	bics	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	621a      	str	r2, [r3, #32]
}
 8009fba:	46c0      	nop			; (mov r8, r8)
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	b006      	add	sp, #24
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	ffff0fff 	.word	0xffff0fff

08009fc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4a08      	ldr	r2, [pc, #32]	; (8009ffc <TIM_ITRx_SetConfig+0x34>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	2207      	movs	r2, #7
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	609a      	str	r2, [r3, #8]
}
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	b004      	add	sp, #16
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	ffcfff8f 	.word	0xffcfff8f

0800a000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	4a09      	ldr	r2, [pc, #36]	; (800a03c <TIM_ETR_SetConfig+0x3c>)
 800a018:	4013      	ands	r3, r2
 800a01a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	021a      	lsls	r2, r3, #8
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	431a      	orrs	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	4313      	orrs	r3, r2
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	609a      	str	r2, [r3, #8]
}
 800a034:	46c0      	nop			; (mov r8, r8)
 800a036:	46bd      	mov	sp, r7
 800a038:	b006      	add	sp, #24
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	ffff00ff 	.word	0xffff00ff

0800a040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	221f      	movs	r2, #31
 800a050:	4013      	ands	r3, r2
 800a052:	2201      	movs	r2, #1
 800a054:	409a      	lsls	r2, r3
 800a056:	0013      	movs	r3, r2
 800a058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	43d2      	mvns	r2, r2
 800a062:	401a      	ands	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a1a      	ldr	r2, [r3, #32]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	211f      	movs	r1, #31
 800a070:	400b      	ands	r3, r1
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	4099      	lsls	r1, r3
 800a076:	000b      	movs	r3, r1
 800a078:	431a      	orrs	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	621a      	str	r2, [r3, #32]
}
 800a07e:	46c0      	nop			; (mov r8, r8)
 800a080:	46bd      	mov	sp, r7
 800a082:	b006      	add	sp, #24
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	223c      	movs	r2, #60	; 0x3c
 800a096:	5c9b      	ldrb	r3, [r3, r2]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d101      	bne.n	800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a09c:	2302      	movs	r3, #2
 800a09e:	e04f      	b.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	223c      	movs	r2, #60	; 0x3c
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	223d      	movs	r2, #61	; 0x3d
 800a0ac:	2102      	movs	r1, #2
 800a0ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a20      	ldr	r2, [pc, #128]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d108      	bne.n	800a0dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4a1f      	ldr	r2, [pc, #124]	; (800a14c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2270      	movs	r2, #112	; 0x70
 800a0e0:	4393      	bics	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a13      	ldr	r2, [pc, #76]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d009      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a12      	ldr	r2, [pc, #72]	; (800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d004      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a11      	ldr	r2, [pc, #68]	; (800a154 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d10c      	bne.n	800a12e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2280      	movs	r2, #128	; 0x80
 800a118:	4393      	bics	r3, r2
 800a11a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	4313      	orrs	r3, r2
 800a124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	223d      	movs	r2, #61	; 0x3d
 800a132:	2101      	movs	r1, #1
 800a134:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	223c      	movs	r2, #60	; 0x3c
 800a13a:	2100      	movs	r1, #0
 800a13c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	0018      	movs	r0, r3
 800a142:	46bd      	mov	sp, r7
 800a144:	b004      	add	sp, #16
 800a146:	bd80      	pop	{r7, pc}
 800a148:	40012c00 	.word	0x40012c00
 800a14c:	ff0fffff 	.word	0xff0fffff
 800a150:	40000400 	.word	0x40000400
 800a154:	40014000 	.word	0x40014000

0800a158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	223c      	movs	r2, #60	; 0x3c
 800a16a:	5c9b      	ldrb	r3, [r3, r2]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d101      	bne.n	800a174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a170:	2302      	movs	r3, #2
 800a172:	e079      	b.n	800a268 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	223c      	movs	r2, #60	; 0x3c
 800a178:	2101      	movs	r1, #1
 800a17a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	22ff      	movs	r2, #255	; 0xff
 800a180:	4393      	bics	r3, r2
 800a182:	001a      	movs	r2, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	4313      	orrs	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4a38      	ldr	r2, [pc, #224]	; (800a270 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a190:	401a      	ands	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4a35      	ldr	r2, [pc, #212]	; (800a274 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a19e:	401a      	ands	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4a33      	ldr	r2, [pc, #204]	; (800a278 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a1ac:	401a      	ands	r2, r3
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4a30      	ldr	r2, [pc, #192]	; (800a27c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a1ba:	401a      	ands	r2, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4a2e      	ldr	r2, [pc, #184]	; (800a280 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a1c8:	401a      	ands	r2, r3
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4a2b      	ldr	r2, [pc, #172]	; (800a284 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4a29      	ldr	r2, [pc, #164]	; (800a288 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a1e4:	401a      	ands	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	041b      	lsls	r3, r3, #16
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a25      	ldr	r2, [pc, #148]	; (800a28c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d106      	bne.n	800a208 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4a24      	ldr	r2, [pc, #144]	; (800a290 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a1fe:	401a      	ands	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1f      	ldr	r2, [pc, #124]	; (800a28c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d121      	bne.n	800a256 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4a1f      	ldr	r2, [pc, #124]	; (800a294 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a216:	401a      	ands	r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	051b      	lsls	r3, r3, #20
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800a226:	401a      	ands	r2, r3
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4a1a      	ldr	r2, [pc, #104]	; (800a29c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800a234:	401a      	ands	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	4313      	orrs	r3, r2
 800a23c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a12      	ldr	r2, [pc, #72]	; (800a28c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d106      	bne.n	800a256 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4a15      	ldr	r2, [pc, #84]	; (800a2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800a24c:	401a      	ands	r2, r3
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	223c      	movs	r2, #60	; 0x3c
 800a262:	2100      	movs	r1, #0
 800a264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	0018      	movs	r0, r3
 800a26a:	46bd      	mov	sp, r7
 800a26c:	b004      	add	sp, #16
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	fffffcff 	.word	0xfffffcff
 800a274:	fffffbff 	.word	0xfffffbff
 800a278:	fffff7ff 	.word	0xfffff7ff
 800a27c:	ffffefff 	.word	0xffffefff
 800a280:	ffffdfff 	.word	0xffffdfff
 800a284:	ffffbfff 	.word	0xffffbfff
 800a288:	fff0ffff 	.word	0xfff0ffff
 800a28c:	40012c00 	.word	0x40012c00
 800a290:	efffffff 	.word	0xefffffff
 800a294:	ff0fffff 	.word	0xff0fffff
 800a298:	feffffff 	.word	0xfeffffff
 800a29c:	fdffffff 	.word	0xfdffffff
 800a2a0:	dfffffff 	.word	0xdfffffff

0800a2a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2ac:	46c0      	nop			; (mov r8, r8)
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	b002      	add	sp, #8
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2bc:	46c0      	nop			; (mov r8, r8)
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	b002      	add	sp, #8
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2cc:	46c0      	nop			; (mov r8, r8)
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	b002      	add	sp, #8
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e046      	b.n	800a374 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2288      	movs	r2, #136	; 0x88
 800a2ea:	589b      	ldr	r3, [r3, r2]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2284      	movs	r2, #132	; 0x84
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	f7fa fc74 	bl	8004be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2288      	movs	r2, #136	; 0x88
 800a304:	2124      	movs	r1, #36	; 0x24
 800a306:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2101      	movs	r1, #1
 800a314:	438a      	bics	r2, r1
 800a316:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	0018      	movs	r0, r3
 800a31c:	f000 fd16 	bl	800ad4c <UART_SetConfig>
 800a320:	0003      	movs	r3, r0
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e024      	b.n	800a374 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	0018      	movs	r0, r3
 800a336:	f000 fead 	bl	800b094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	490d      	ldr	r1, [pc, #52]	; (800a37c <HAL_UART_Init+0xa8>)
 800a346:	400a      	ands	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	212a      	movs	r1, #42	; 0x2a
 800a356:	438a      	bics	r2, r1
 800a358:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2101      	movs	r1, #1
 800a366:	430a      	orrs	r2, r1
 800a368:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	0018      	movs	r0, r3
 800a36e:	f000 ff45 	bl	800b1fc <UART_CheckIdleState>
 800a372:	0003      	movs	r3, r0
}
 800a374:	0018      	movs	r0, r3
 800a376:	46bd      	mov	sp, r7
 800a378:	b002      	add	sp, #8
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	ffffb7ff 	.word	0xffffb7ff

0800a380 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08c      	sub	sp, #48	; 0x30
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	1dbb      	adds	r3, r7, #6
 800a38c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2288      	movs	r2, #136	; 0x88
 800a392:	589b      	ldr	r3, [r3, r2]
 800a394:	2b20      	cmp	r3, #32
 800a396:	d000      	beq.n	800a39a <HAL_UART_Transmit_IT+0x1a>
 800a398:	e08d      	b.n	800a4b6 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <HAL_UART_Transmit_IT+0x28>
 800a3a0:	1dbb      	adds	r3, r7, #6
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e085      	b.n	800a4b8 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	2380      	movs	r3, #128	; 0x80
 800a3b2:	015b      	lsls	r3, r3, #5
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d109      	bne.n	800a3cc <HAL_UART_Transmit_IT+0x4c>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d105      	bne.n	800a3cc <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	d001      	beq.n	800a3cc <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e075      	b.n	800a4b8 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	1dba      	adds	r2, r7, #6
 800a3d6:	2154      	movs	r1, #84	; 0x54
 800a3d8:	8812      	ldrh	r2, [r2, #0]
 800a3da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	1dba      	adds	r2, r7, #6
 800a3e0:	2156      	movs	r1, #86	; 0x56
 800a3e2:	8812      	ldrh	r2, [r2, #0]
 800a3e4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2290      	movs	r2, #144	; 0x90
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2288      	movs	r2, #136	; 0x88
 800a3f8:	2121      	movs	r1, #33	; 0x21
 800a3fa:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a400:	2380      	movs	r3, #128	; 0x80
 800a402:	059b      	lsls	r3, r3, #22
 800a404:	429a      	cmp	r2, r3
 800a406:	d12a      	bne.n	800a45e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	689a      	ldr	r2, [r3, #8]
 800a40c:	2380      	movs	r3, #128	; 0x80
 800a40e:	015b      	lsls	r3, r3, #5
 800a410:	429a      	cmp	r2, r3
 800a412:	d107      	bne.n	800a424 <HAL_UART_Transmit_IT+0xa4>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4a28      	ldr	r2, [pc, #160]	; (800a4c0 <HAL_UART_Transmit_IT+0x140>)
 800a420:	679a      	str	r2, [r3, #120]	; 0x78
 800a422:	e002      	b.n	800a42a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4a27      	ldr	r2, [pc, #156]	; (800a4c4 <HAL_UART_Transmit_IT+0x144>)
 800a428:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a42a:	f3ef 8310 	mrs	r3, PRIMASK
 800a42e:	61fb      	str	r3, [r7, #28]
  return(result);
 800a430:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a432:	62bb      	str	r3, [r7, #40]	; 0x28
 800a434:	2301      	movs	r3, #1
 800a436:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	f383 8810 	msr	PRIMASK, r3
}
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2180      	movs	r1, #128	; 0x80
 800a44c:	0409      	lsls	r1, r1, #16
 800a44e:	430a      	orrs	r2, r1
 800a450:	609a      	str	r2, [r3, #8]
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	f383 8810 	msr	PRIMASK, r3
}
 800a45c:	e029      	b.n	800a4b2 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	689a      	ldr	r2, [r3, #8]
 800a462:	2380      	movs	r3, #128	; 0x80
 800a464:	015b      	lsls	r3, r3, #5
 800a466:	429a      	cmp	r2, r3
 800a468:	d107      	bne.n	800a47a <HAL_UART_Transmit_IT+0xfa>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4a14      	ldr	r2, [pc, #80]	; (800a4c8 <HAL_UART_Transmit_IT+0x148>)
 800a476:	679a      	str	r2, [r3, #120]	; 0x78
 800a478:	e002      	b.n	800a480 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4a13      	ldr	r2, [pc, #76]	; (800a4cc <HAL_UART_Transmit_IT+0x14c>)
 800a47e:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a480:	f3ef 8310 	mrs	r3, PRIMASK
 800a484:	613b      	str	r3, [r7, #16]
  return(result);
 800a486:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a48a:	2301      	movs	r3, #1
 800a48c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f383 8810 	msr	PRIMASK, r3
}
 800a494:	46c0      	nop			; (mov r8, r8)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2180      	movs	r1, #128	; 0x80
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	f383 8810 	msr	PRIMASK, r3
}
 800a4b0:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e000      	b.n	800a4b8 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800a4b6:	2302      	movs	r3, #2
  }
}
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b00c      	add	sp, #48	; 0x30
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	0800bb45 	.word	0x0800bb45
 800a4c4:	0800ba59 	.word	0x0800ba59
 800a4c8:	0800b99b 	.word	0x0800b99b
 800a4cc:	0800b8e7 	.word	0x0800b8e7

0800a4d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	1dbb      	adds	r3, r7, #6
 800a4dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	228c      	movs	r2, #140	; 0x8c
 800a4e2:	589b      	ldr	r3, [r3, r2]
 800a4e4:	2b20      	cmp	r3, #32
 800a4e6:	d145      	bne.n	800a574 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_UART_Receive_DMA+0x26>
 800a4ee:	1dbb      	adds	r3, r7, #6
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e03d      	b.n	800a576 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	2380      	movs	r3, #128	; 0x80
 800a500:	015b      	lsls	r3, r3, #5
 800a502:	429a      	cmp	r2, r3
 800a504:	d109      	bne.n	800a51a <HAL_UART_Receive_DMA+0x4a>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2201      	movs	r2, #1
 800a512:	4013      	ands	r3, r2
 800a514:	d001      	beq.n	800a51a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e02d      	b.n	800a576 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	2380      	movs	r3, #128	; 0x80
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	4013      	ands	r3, r2
 800a52c:	d019      	beq.n	800a562 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a52e:	f3ef 8310 	mrs	r3, PRIMASK
 800a532:	613b      	str	r3, [r7, #16]
  return(result);
 800a534:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a536:	61fb      	str	r3, [r7, #28]
 800a538:	2301      	movs	r3, #1
 800a53a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f383 8810 	msr	PRIMASK, r3
}
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2180      	movs	r1, #128	; 0x80
 800a550:	04c9      	lsls	r1, r1, #19
 800a552:	430a      	orrs	r2, r1
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	f383 8810 	msr	PRIMASK, r3
}
 800a560:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a562:	1dbb      	adds	r3, r7, #6
 800a564:	881a      	ldrh	r2, [r3, #0]
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	0018      	movs	r0, r3
 800a56c:	f000 ff5c 	bl	800b428 <UART_Start_Receive_DMA>
 800a570:	0003      	movs	r3, r0
 800a572:	e000      	b.n	800a576 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a574:	2302      	movs	r3, #2
  }
}
 800a576:	0018      	movs	r0, r3
 800a578:	46bd      	mov	sp, r7
 800a57a:	b008      	add	sp, #32
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b08c      	sub	sp, #48	; 0x30
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2288      	movs	r2, #136	; 0x88
 800a58a:	589b      	ldr	r3, [r3, r2]
 800a58c:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	228c      	movs	r2, #140	; 0x8c
 800a592:	589b      	ldr	r3, [r3, r2]
 800a594:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2280      	movs	r2, #128	; 0x80
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b80      	cmp	r3, #128	; 0x80
 800a5a2:	d138      	bne.n	800a616 <HAL_UART_DMAStop+0x98>
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	2b21      	cmp	r3, #33	; 0x21
 800a5a8:	d135      	bne.n	800a616 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ae:	617b      	str	r3, [r7, #20]
  return(result);
 800a5b0:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	f383 8810 	msr	PRIMASK, r3
}
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689a      	ldr	r2, [r3, #8]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2180      	movs	r1, #128	; 0x80
 800a5cc:	438a      	bics	r2, r1
 800a5ce:	609a      	str	r2, [r3, #8]
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f383 8810 	msr	PRIMASK, r3
}
 800a5da:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d014      	beq.n	800a60e <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f7fc f9ad 	bl	8006948 <HAL_DMA_Abort>
 800a5ee:	1e03      	subs	r3, r0, #0
 800a5f0:	d00d      	beq.n	800a60e <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f7fc fb24 	bl	8006c44 <HAL_DMA_GetError>
 800a5fc:	0003      	movs	r3, r0
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d105      	bne.n	800a60e <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2290      	movs	r2, #144	; 0x90
 800a606:	2110      	movs	r1, #16
 800a608:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e047      	b.n	800a69e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	0018      	movs	r0, r3
 800a612:	f000 ffaf 	bl	800b574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2240      	movs	r2, #64	; 0x40
 800a61e:	4013      	ands	r3, r2
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	d13b      	bne.n	800a69c <HAL_UART_DMAStop+0x11e>
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	2b22      	cmp	r3, #34	; 0x22
 800a628:	d138      	bne.n	800a69c <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a62a:	f3ef 8310 	mrs	r3, PRIMASK
 800a62e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a630:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a632:	623b      	str	r3, [r7, #32]
 800a634:	2301      	movs	r3, #1
 800a636:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f383 8810 	msr	PRIMASK, r3
}
 800a63e:	46c0      	nop			; (mov r8, r8)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689a      	ldr	r2, [r3, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2140      	movs	r1, #64	; 0x40
 800a64c:	438a      	bics	r2, r1
 800a64e:	609a      	str	r2, [r3, #8]
 800a650:	6a3b      	ldr	r3, [r7, #32]
 800a652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f383 8810 	msr	PRIMASK, r3
}
 800a65a:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2280      	movs	r2, #128	; 0x80
 800a660:	589b      	ldr	r3, [r3, r2]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d016      	beq.n	800a694 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2280      	movs	r2, #128	; 0x80
 800a66a:	589b      	ldr	r3, [r3, r2]
 800a66c:	0018      	movs	r0, r3
 800a66e:	f7fc f96b 	bl	8006948 <HAL_DMA_Abort>
 800a672:	1e03      	subs	r3, r0, #0
 800a674:	d00e      	beq.n	800a694 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2280      	movs	r2, #128	; 0x80
 800a67a:	589b      	ldr	r3, [r3, r2]
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7fc fae1 	bl	8006c44 <HAL_DMA_GetError>
 800a682:	0003      	movs	r3, r0
 800a684:	2b20      	cmp	r3, #32
 800a686:	d105      	bne.n	800a694 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2290      	movs	r2, #144	; 0x90
 800a68c:	2110      	movs	r1, #16
 800a68e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e004      	b.n	800a69e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	0018      	movs	r0, r3
 800a698:	f000 ffac 	bl	800b5f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	0018      	movs	r0, r3
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	b00c      	add	sp, #48	; 0x30
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6a8:	b5b0      	push	{r4, r5, r7, lr}
 800a6aa:	b0aa      	sub	sp, #168	; 0xa8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	22a4      	movs	r2, #164	; 0xa4
 800a6b8:	18b9      	adds	r1, r7, r2
 800a6ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	20a0      	movs	r0, #160	; 0xa0
 800a6c4:	1839      	adds	r1, r7, r0
 800a6c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	249c      	movs	r4, #156	; 0x9c
 800a6d0:	1939      	adds	r1, r7, r4
 800a6d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6d4:	0011      	movs	r1, r2
 800a6d6:	18bb      	adds	r3, r7, r2
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4aa2      	ldr	r2, [pc, #648]	; (800a964 <HAL_UART_IRQHandler+0x2bc>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	2298      	movs	r2, #152	; 0x98
 800a6e0:	18bd      	adds	r5, r7, r2
 800a6e2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a6e4:	18bb      	adds	r3, r7, r2
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d11a      	bne.n	800a722 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6ec:	187b      	adds	r3, r7, r1
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	d015      	beq.n	800a722 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6f6:	183b      	adds	r3, r7, r0
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	d105      	bne.n	800a70c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a700:	193b      	adds	r3, r7, r4
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	2380      	movs	r3, #128	; 0x80
 800a706:	055b      	lsls	r3, r3, #21
 800a708:	4013      	ands	r3, r2
 800a70a:	d00a      	beq.n	800a722 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a710:	2b00      	cmp	r3, #0
 800a712:	d100      	bne.n	800a716 <HAL_UART_IRQHandler+0x6e>
 800a714:	e2dc      	b.n	800acd0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	0010      	movs	r0, r2
 800a71e:	4798      	blx	r3
      }
      return;
 800a720:	e2d6      	b.n	800acd0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a722:	2398      	movs	r3, #152	; 0x98
 800a724:	18fb      	adds	r3, r7, r3
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d100      	bne.n	800a72e <HAL_UART_IRQHandler+0x86>
 800a72c:	e122      	b.n	800a974 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a72e:	239c      	movs	r3, #156	; 0x9c
 800a730:	18fb      	adds	r3, r7, r3
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a8c      	ldr	r2, [pc, #560]	; (800a968 <HAL_UART_IRQHandler+0x2c0>)
 800a736:	4013      	ands	r3, r2
 800a738:	d106      	bne.n	800a748 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a73a:	23a0      	movs	r3, #160	; 0xa0
 800a73c:	18fb      	adds	r3, r7, r3
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a8a      	ldr	r2, [pc, #552]	; (800a96c <HAL_UART_IRQHandler+0x2c4>)
 800a742:	4013      	ands	r3, r2
 800a744:	d100      	bne.n	800a748 <HAL_UART_IRQHandler+0xa0>
 800a746:	e115      	b.n	800a974 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a748:	23a4      	movs	r3, #164	; 0xa4
 800a74a:	18fb      	adds	r3, r7, r3
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2201      	movs	r2, #1
 800a750:	4013      	ands	r3, r2
 800a752:	d012      	beq.n	800a77a <HAL_UART_IRQHandler+0xd2>
 800a754:	23a0      	movs	r3, #160	; 0xa0
 800a756:	18fb      	adds	r3, r7, r3
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	2380      	movs	r3, #128	; 0x80
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	4013      	ands	r3, r2
 800a760:	d00b      	beq.n	800a77a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2201      	movs	r2, #1
 800a768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2290      	movs	r2, #144	; 0x90
 800a76e:	589b      	ldr	r3, [r3, r2]
 800a770:	2201      	movs	r2, #1
 800a772:	431a      	orrs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2190      	movs	r1, #144	; 0x90
 800a778:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a77a:	23a4      	movs	r3, #164	; 0xa4
 800a77c:	18fb      	adds	r3, r7, r3
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2202      	movs	r2, #2
 800a782:	4013      	ands	r3, r2
 800a784:	d011      	beq.n	800a7aa <HAL_UART_IRQHandler+0x102>
 800a786:	239c      	movs	r3, #156	; 0x9c
 800a788:	18fb      	adds	r3, r7, r3
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2201      	movs	r2, #1
 800a78e:	4013      	ands	r3, r2
 800a790:	d00b      	beq.n	800a7aa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2202      	movs	r2, #2
 800a798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2290      	movs	r2, #144	; 0x90
 800a79e:	589b      	ldr	r3, [r3, r2]
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2190      	movs	r1, #144	; 0x90
 800a7a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7aa:	23a4      	movs	r3, #164	; 0xa4
 800a7ac:	18fb      	adds	r3, r7, r3
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2204      	movs	r2, #4
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	d011      	beq.n	800a7da <HAL_UART_IRQHandler+0x132>
 800a7b6:	239c      	movs	r3, #156	; 0x9c
 800a7b8:	18fb      	adds	r3, r7, r3
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	4013      	ands	r3, r2
 800a7c0:	d00b      	beq.n	800a7da <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2204      	movs	r2, #4
 800a7c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2290      	movs	r2, #144	; 0x90
 800a7ce:	589b      	ldr	r3, [r3, r2]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2190      	movs	r1, #144	; 0x90
 800a7d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7da:	23a4      	movs	r3, #164	; 0xa4
 800a7dc:	18fb      	adds	r3, r7, r3
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	d017      	beq.n	800a816 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7e6:	23a0      	movs	r3, #160	; 0xa0
 800a7e8:	18fb      	adds	r3, r7, r3
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	d105      	bne.n	800a7fe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a7f2:	239c      	movs	r3, #156	; 0x9c
 800a7f4:	18fb      	adds	r3, r7, r3
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a5b      	ldr	r2, [pc, #364]	; (800a968 <HAL_UART_IRQHandler+0x2c0>)
 800a7fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7fc:	d00b      	beq.n	800a816 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2208      	movs	r2, #8
 800a804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2290      	movs	r2, #144	; 0x90
 800a80a:	589b      	ldr	r3, [r3, r2]
 800a80c:	2208      	movs	r2, #8
 800a80e:	431a      	orrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2190      	movs	r1, #144	; 0x90
 800a814:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a816:	23a4      	movs	r3, #164	; 0xa4
 800a818:	18fb      	adds	r3, r7, r3
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	4013      	ands	r3, r2
 800a822:	d013      	beq.n	800a84c <HAL_UART_IRQHandler+0x1a4>
 800a824:	23a0      	movs	r3, #160	; 0xa0
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	2380      	movs	r3, #128	; 0x80
 800a82c:	04db      	lsls	r3, r3, #19
 800a82e:	4013      	ands	r3, r2
 800a830:	d00c      	beq.n	800a84c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2280      	movs	r2, #128	; 0x80
 800a838:	0112      	lsls	r2, r2, #4
 800a83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2290      	movs	r2, #144	; 0x90
 800a840:	589b      	ldr	r3, [r3, r2]
 800a842:	2220      	movs	r2, #32
 800a844:	431a      	orrs	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2190      	movs	r1, #144	; 0x90
 800a84a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2290      	movs	r2, #144	; 0x90
 800a850:	589b      	ldr	r3, [r3, r2]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d100      	bne.n	800a858 <HAL_UART_IRQHandler+0x1b0>
 800a856:	e23d      	b.n	800acd4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a858:	23a4      	movs	r3, #164	; 0xa4
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2220      	movs	r2, #32
 800a860:	4013      	ands	r3, r2
 800a862:	d015      	beq.n	800a890 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a864:	23a0      	movs	r3, #160	; 0xa0
 800a866:	18fb      	adds	r3, r7, r3
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2220      	movs	r2, #32
 800a86c:	4013      	ands	r3, r2
 800a86e:	d106      	bne.n	800a87e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a870:	239c      	movs	r3, #156	; 0x9c
 800a872:	18fb      	adds	r3, r7, r3
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	2380      	movs	r3, #128	; 0x80
 800a878:	055b      	lsls	r3, r3, #21
 800a87a:	4013      	ands	r3, r2
 800a87c:	d008      	beq.n	800a890 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	0010      	movs	r0, r2
 800a88e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2290      	movs	r2, #144	; 0x90
 800a894:	589b      	ldr	r3, [r3, r2]
 800a896:	2194      	movs	r1, #148	; 0x94
 800a898:	187a      	adds	r2, r7, r1
 800a89a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	2240      	movs	r2, #64	; 0x40
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	2b40      	cmp	r3, #64	; 0x40
 800a8a8:	d004      	beq.n	800a8b4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8aa:	187b      	adds	r3, r7, r1
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2228      	movs	r2, #40	; 0x28
 800a8b0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8b2:	d04c      	beq.n	800a94e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f000 fe9c 	bl	800b5f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	2240      	movs	r2, #64	; 0x40
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	2b40      	cmp	r3, #64	; 0x40
 800a8c8:	d13c      	bne.n	800a944 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ce:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a8d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d2:	2090      	movs	r0, #144	; 0x90
 800a8d4:	183a      	adds	r2, r7, r0
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	2301      	movs	r3, #1
 800a8da:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8de:	f383 8810 	msr	PRIMASK, r3
}
 800a8e2:	46c0      	nop			; (mov r8, r8)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2140      	movs	r1, #64	; 0x40
 800a8f0:	438a      	bics	r2, r1
 800a8f2:	609a      	str	r2, [r3, #8]
 800a8f4:	183b      	adds	r3, r7, r0
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8fc:	f383 8810 	msr	PRIMASK, r3
}
 800a900:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2280      	movs	r2, #128	; 0x80
 800a906:	589b      	ldr	r3, [r3, r2]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d016      	beq.n	800a93a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2280      	movs	r2, #128	; 0x80
 800a910:	589b      	ldr	r3, [r3, r2]
 800a912:	4a17      	ldr	r2, [pc, #92]	; (800a970 <HAL_UART_IRQHandler+0x2c8>)
 800a914:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2280      	movs	r2, #128	; 0x80
 800a91a:	589b      	ldr	r3, [r3, r2]
 800a91c:	0018      	movs	r0, r3
 800a91e:	f7fc f875 	bl	8006a0c <HAL_DMA_Abort_IT>
 800a922:	1e03      	subs	r3, r0, #0
 800a924:	d01c      	beq.n	800a960 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2280      	movs	r2, #128	; 0x80
 800a92a:	589b      	ldr	r3, [r3, r2]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	2180      	movs	r1, #128	; 0x80
 800a932:	5852      	ldr	r2, [r2, r1]
 800a934:	0010      	movs	r0, r2
 800a936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a938:	e012      	b.n	800a960 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	0018      	movs	r0, r3
 800a93e:	f000 f9f1 	bl	800ad24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a942:	e00d      	b.n	800a960 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	0018      	movs	r0, r3
 800a948:	f000 f9ec 	bl	800ad24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94c:	e008      	b.n	800a960 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	0018      	movs	r0, r3
 800a952:	f000 f9e7 	bl	800ad24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2290      	movs	r2, #144	; 0x90
 800a95a:	2100      	movs	r1, #0
 800a95c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a95e:	e1b9      	b.n	800acd4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a960:	46c0      	nop			; (mov r8, r8)
    return;
 800a962:	e1b7      	b.n	800acd4 <HAL_UART_IRQHandler+0x62c>
 800a964:	0000080f 	.word	0x0000080f
 800a968:	10000001 	.word	0x10000001
 800a96c:	04000120 	.word	0x04000120
 800a970:	0800b8b9 	.word	0x0800b8b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d000      	beq.n	800a97e <HAL_UART_IRQHandler+0x2d6>
 800a97c:	e13e      	b.n	800abfc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a97e:	23a4      	movs	r3, #164	; 0xa4
 800a980:	18fb      	adds	r3, r7, r3
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2210      	movs	r2, #16
 800a986:	4013      	ands	r3, r2
 800a988:	d100      	bne.n	800a98c <HAL_UART_IRQHandler+0x2e4>
 800a98a:	e137      	b.n	800abfc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a98c:	23a0      	movs	r3, #160	; 0xa0
 800a98e:	18fb      	adds	r3, r7, r3
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2210      	movs	r2, #16
 800a994:	4013      	ands	r3, r2
 800a996:	d100      	bne.n	800a99a <HAL_UART_IRQHandler+0x2f2>
 800a998:	e130      	b.n	800abfc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2210      	movs	r2, #16
 800a9a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	2240      	movs	r2, #64	; 0x40
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b40      	cmp	r3, #64	; 0x40
 800a9ae:	d000      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x30a>
 800a9b0:	e0a4      	b.n	800aafc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2280      	movs	r2, #128	; 0x80
 800a9b6:	589b      	ldr	r3, [r3, r2]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	217e      	movs	r1, #126	; 0x7e
 800a9be:	187b      	adds	r3, r7, r1
 800a9c0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a9c2:	187b      	adds	r3, r7, r1
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d100      	bne.n	800a9cc <HAL_UART_IRQHandler+0x324>
 800a9ca:	e185      	b.n	800acd8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	225c      	movs	r2, #92	; 0x5c
 800a9d0:	5a9b      	ldrh	r3, [r3, r2]
 800a9d2:	187a      	adds	r2, r7, r1
 800a9d4:	8812      	ldrh	r2, [r2, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d300      	bcc.n	800a9dc <HAL_UART_IRQHandler+0x334>
 800a9da:	e17d      	b.n	800acd8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	187a      	adds	r2, r7, r1
 800a9e0:	215e      	movs	r1, #94	; 0x5e
 800a9e2:	8812      	ldrh	r2, [r2, #0]
 800a9e4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2280      	movs	r2, #128	; 0x80
 800a9ea:	589b      	ldr	r3, [r3, r2]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	d170      	bne.n	800aad8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9fe:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa00:	2301      	movs	r3, #1
 800aa02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa06:	f383 8810 	msr	PRIMASK, r3
}
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	49b4      	ldr	r1, [pc, #720]	; (800ace8 <HAL_UART_IRQHandler+0x640>)
 800aa18:	400a      	ands	r2, r1
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa22:	f383 8810 	msr	PRIMASK, r3
}
 800aa26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa28:	f3ef 8310 	mrs	r3, PRIMASK
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800aa2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa30:	677b      	str	r3, [r7, #116]	; 0x74
 800aa32:	2301      	movs	r3, #1
 800aa34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa38:	f383 8810 	msr	PRIMASK, r3
}
 800aa3c:	46c0      	nop			; (mov r8, r8)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2101      	movs	r1, #1
 800aa4a:	438a      	bics	r2, r1
 800aa4c:	609a      	str	r2, [r3, #8]
 800aa4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa54:	f383 8810 	msr	PRIMASK, r3
}
 800aa58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa5a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa5e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800aa60:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa62:	673b      	str	r3, [r7, #112]	; 0x70
 800aa64:	2301      	movs	r3, #1
 800aa66:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa6a:	f383 8810 	msr	PRIMASK, r3
}
 800aa6e:	46c0      	nop			; (mov r8, r8)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2140      	movs	r1, #64	; 0x40
 800aa7c:	438a      	bics	r2, r1
 800aa7e:	609a      	str	r2, [r3, #8]
 800aa80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa82:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa86:	f383 8810 	msr	PRIMASK, r3
}
 800aa8a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	228c      	movs	r2, #140	; 0x8c
 800aa90:	2120      	movs	r1, #32
 800aa92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa9a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa9e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800aaa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaaa:	f383 8810 	msr	PRIMASK, r3
}
 800aaae:	46c0      	nop			; (mov r8, r8)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2110      	movs	r1, #16
 800aabc:	438a      	bics	r2, r1
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aac6:	f383 8810 	msr	PRIMASK, r3
}
 800aaca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2280      	movs	r2, #128	; 0x80
 800aad0:	589b      	ldr	r3, [r3, r2]
 800aad2:	0018      	movs	r0, r3
 800aad4:	f7fb ff38 	bl	8006948 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	225c      	movs	r2, #92	; 0x5c
 800aae2:	5a9a      	ldrh	r2, [r3, r2]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	215e      	movs	r1, #94	; 0x5e
 800aae8:	5a5b      	ldrh	r3, [r3, r1]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	0011      	movs	r1, r2
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f000 f91d 	bl	800ad34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aafa:	e0ed      	b.n	800acd8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	225c      	movs	r2, #92	; 0x5c
 800ab00:	5a99      	ldrh	r1, [r3, r2]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	225e      	movs	r2, #94	; 0x5e
 800ab06:	5a9b      	ldrh	r3, [r3, r2]
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	208e      	movs	r0, #142	; 0x8e
 800ab0c:	183b      	adds	r3, r7, r0
 800ab0e:	1a8a      	subs	r2, r1, r2
 800ab10:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	225e      	movs	r2, #94	; 0x5e
 800ab16:	5a9b      	ldrh	r3, [r3, r2]
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d100      	bne.n	800ab20 <HAL_UART_IRQHandler+0x478>
 800ab1e:	e0dd      	b.n	800acdc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800ab20:	183b      	adds	r3, r7, r0
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d100      	bne.n	800ab2a <HAL_UART_IRQHandler+0x482>
 800ab28:	e0d8      	b.n	800acdc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab2a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab30:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab32:	2488      	movs	r4, #136	; 0x88
 800ab34:	193a      	adds	r2, r7, r4
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	2301      	movs	r3, #1
 800ab3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f383 8810 	msr	PRIMASK, r3
}
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4967      	ldr	r1, [pc, #412]	; (800acec <HAL_UART_IRQHandler+0x644>)
 800ab50:	400a      	ands	r2, r1
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	193b      	adds	r3, r7, r4
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f383 8810 	msr	PRIMASK, r3
}
 800ab60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab62:	f3ef 8310 	mrs	r3, PRIMASK
 800ab66:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab6a:	2484      	movs	r4, #132	; 0x84
 800ab6c:	193a      	adds	r2, r7, r4
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	2301      	movs	r3, #1
 800ab72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f383 8810 	msr	PRIMASK, r3
}
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	495a      	ldr	r1, [pc, #360]	; (800acf0 <HAL_UART_IRQHandler+0x648>)
 800ab88:	400a      	ands	r2, r1
 800ab8a:	609a      	str	r2, [r3, #8]
 800ab8c:	193b      	adds	r3, r7, r4
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	f383 8810 	msr	PRIMASK, r3
}
 800ab98:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	228c      	movs	r2, #140	; 0x8c
 800ab9e:	2120      	movs	r1, #32
 800aba0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abae:	f3ef 8310 	mrs	r3, PRIMASK
 800abb2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abb6:	2480      	movs	r4, #128	; 0x80
 800abb8:	193a      	adds	r2, r7, r4
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	2301      	movs	r3, #1
 800abbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	f383 8810 	msr	PRIMASK, r3
}
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2110      	movs	r1, #16
 800abd4:	438a      	bics	r2, r1
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	193b      	adds	r3, r7, r4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	f383 8810 	msr	PRIMASK, r3
}
 800abe4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2202      	movs	r2, #2
 800abea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abec:	183b      	adds	r3, r7, r0
 800abee:	881a      	ldrh	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	0011      	movs	r1, r2
 800abf4:	0018      	movs	r0, r3
 800abf6:	f000 f89d 	bl	800ad34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abfa:	e06f      	b.n	800acdc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abfc:	23a4      	movs	r3, #164	; 0xa4
 800abfe:	18fb      	adds	r3, r7, r3
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	2380      	movs	r3, #128	; 0x80
 800ac04:	035b      	lsls	r3, r3, #13
 800ac06:	4013      	ands	r3, r2
 800ac08:	d010      	beq.n	800ac2c <HAL_UART_IRQHandler+0x584>
 800ac0a:	239c      	movs	r3, #156	; 0x9c
 800ac0c:	18fb      	adds	r3, r7, r3
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	2380      	movs	r3, #128	; 0x80
 800ac12:	03db      	lsls	r3, r3, #15
 800ac14:	4013      	ands	r3, r2
 800ac16:	d009      	beq.n	800ac2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2280      	movs	r2, #128	; 0x80
 800ac1e:	0352      	lsls	r2, r2, #13
 800ac20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	0018      	movs	r0, r3
 800ac26:	f001 f8a5 	bl	800bd74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac2a:	e05a      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac2c:	23a4      	movs	r3, #164	; 0xa4
 800ac2e:	18fb      	adds	r3, r7, r3
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2280      	movs	r2, #128	; 0x80
 800ac34:	4013      	ands	r3, r2
 800ac36:	d016      	beq.n	800ac66 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ac38:	23a0      	movs	r3, #160	; 0xa0
 800ac3a:	18fb      	adds	r3, r7, r3
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2280      	movs	r2, #128	; 0x80
 800ac40:	4013      	ands	r3, r2
 800ac42:	d106      	bne.n	800ac52 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac44:	239c      	movs	r3, #156	; 0x9c
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	2380      	movs	r3, #128	; 0x80
 800ac4c:	041b      	lsls	r3, r3, #16
 800ac4e:	4013      	ands	r3, r2
 800ac50:	d009      	beq.n	800ac66 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d042      	beq.n	800ace0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	0010      	movs	r0, r2
 800ac62:	4798      	blx	r3
    }
    return;
 800ac64:	e03c      	b.n	800ace0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac66:	23a4      	movs	r3, #164	; 0xa4
 800ac68:	18fb      	adds	r3, r7, r3
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2240      	movs	r2, #64	; 0x40
 800ac6e:	4013      	ands	r3, r2
 800ac70:	d00a      	beq.n	800ac88 <HAL_UART_IRQHandler+0x5e0>
 800ac72:	23a0      	movs	r3, #160	; 0xa0
 800ac74:	18fb      	adds	r3, r7, r3
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2240      	movs	r2, #64	; 0x40
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	d004      	beq.n	800ac88 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	0018      	movs	r0, r3
 800ac82:	f000 ffd9 	bl	800bc38 <UART_EndTransmit_IT>
    return;
 800ac86:	e02c      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac88:	23a4      	movs	r3, #164	; 0xa4
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	2380      	movs	r3, #128	; 0x80
 800ac90:	041b      	lsls	r3, r3, #16
 800ac92:	4013      	ands	r3, r2
 800ac94:	d00b      	beq.n	800acae <HAL_UART_IRQHandler+0x606>
 800ac96:	23a0      	movs	r3, #160	; 0xa0
 800ac98:	18fb      	adds	r3, r7, r3
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	2380      	movs	r3, #128	; 0x80
 800ac9e:	05db      	lsls	r3, r3, #23
 800aca0:	4013      	ands	r3, r2
 800aca2:	d004      	beq.n	800acae <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	0018      	movs	r0, r3
 800aca8:	f001 f874 	bl	800bd94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acac:	e019      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800acae:	23a4      	movs	r3, #164	; 0xa4
 800acb0:	18fb      	adds	r3, r7, r3
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	2380      	movs	r3, #128	; 0x80
 800acb6:	045b      	lsls	r3, r3, #17
 800acb8:	4013      	ands	r3, r2
 800acba:	d012      	beq.n	800ace2 <HAL_UART_IRQHandler+0x63a>
 800acbc:	23a0      	movs	r3, #160	; 0xa0
 800acbe:	18fb      	adds	r3, r7, r3
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	da0d      	bge.n	800ace2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	0018      	movs	r0, r3
 800acca:	f001 f85b 	bl	800bd84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acce:	e008      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
      return;
 800acd0:	46c0      	nop			; (mov r8, r8)
 800acd2:	e006      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
    return;
 800acd4:	46c0      	nop			; (mov r8, r8)
 800acd6:	e004      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
      return;
 800acd8:	46c0      	nop			; (mov r8, r8)
 800acda:	e002      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
      return;
 800acdc:	46c0      	nop			; (mov r8, r8)
 800acde:	e000      	b.n	800ace2 <HAL_UART_IRQHandler+0x63a>
    return;
 800ace0:	46c0      	nop			; (mov r8, r8)
  }
}
 800ace2:	46bd      	mov	sp, r7
 800ace4:	b02a      	add	sp, #168	; 0xa8
 800ace6:	bdb0      	pop	{r4, r5, r7, pc}
 800ace8:	fffffeff 	.word	0xfffffeff
 800acec:	fffffedf 	.word	0xfffffedf
 800acf0:	effffffe 	.word	0xeffffffe

0800acf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800acfc:	46c0      	nop			; (mov r8, r8)
 800acfe:	46bd      	mov	sp, r7
 800ad00:	b002      	add	sp, #8
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ad0c:	46c0      	nop			; (mov r8, r8)
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b002      	add	sp, #8
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad1c:	46c0      	nop			; (mov r8, r8)
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b002      	add	sp, #8
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad2c:	46c0      	nop			; (mov r8, r8)
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b002      	add	sp, #8
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	000a      	movs	r2, r1
 800ad3e:	1cbb      	adds	r3, r7, #2
 800ad40:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad42:	46c0      	nop			; (mov r8, r8)
 800ad44:	46bd      	mov	sp, r7
 800ad46:	b002      	add	sp, #8
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad54:	231a      	movs	r3, #26
 800ad56:	18fb      	adds	r3, r7, r3
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689a      	ldr	r2, [r3, #8]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	431a      	orrs	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4abc      	ldr	r2, [pc, #752]	; (800b06c <UART_SetConfig+0x320>)
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	0019      	movs	r1, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	430a      	orrs	r2, r1
 800ad88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	4ab7      	ldr	r2, [pc, #732]	; (800b070 <UART_SetConfig+0x324>)
 800ad92:	4013      	ands	r3, r2
 800ad94:	0019      	movs	r1, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	430a      	orrs	r2, r1
 800ada0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	69fa      	ldr	r2, [r7, #28]
 800adae:	4313      	orrs	r3, r2
 800adb0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	4aae      	ldr	r2, [pc, #696]	; (800b074 <UART_SetConfig+0x328>)
 800adba:	4013      	ands	r3, r2
 800adbc:	0019      	movs	r1, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	430a      	orrs	r2, r1
 800adc6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adce:	220f      	movs	r2, #15
 800add0:	4393      	bics	r3, r2
 800add2:	0019      	movs	r1, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	430a      	orrs	r2, r1
 800adde:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4aa4      	ldr	r2, [pc, #656]	; (800b078 <UART_SetConfig+0x32c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d127      	bne.n	800ae3a <UART_SetConfig+0xee>
 800adea:	4ba4      	ldr	r3, [pc, #656]	; (800b07c <UART_SetConfig+0x330>)
 800adec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adee:	2203      	movs	r2, #3
 800adf0:	4013      	ands	r3, r2
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d017      	beq.n	800ae26 <UART_SetConfig+0xda>
 800adf6:	d81b      	bhi.n	800ae30 <UART_SetConfig+0xe4>
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d00a      	beq.n	800ae12 <UART_SetConfig+0xc6>
 800adfc:	d818      	bhi.n	800ae30 <UART_SetConfig+0xe4>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <UART_SetConfig+0xbc>
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d00a      	beq.n	800ae1c <UART_SetConfig+0xd0>
 800ae06:	e013      	b.n	800ae30 <UART_SetConfig+0xe4>
 800ae08:	231b      	movs	r3, #27
 800ae0a:	18fb      	adds	r3, r7, r3
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	e058      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae12:	231b      	movs	r3, #27
 800ae14:	18fb      	adds	r3, r7, r3
 800ae16:	2202      	movs	r2, #2
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	e053      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae1c:	231b      	movs	r3, #27
 800ae1e:	18fb      	adds	r3, r7, r3
 800ae20:	2204      	movs	r2, #4
 800ae22:	701a      	strb	r2, [r3, #0]
 800ae24:	e04e      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae26:	231b      	movs	r3, #27
 800ae28:	18fb      	adds	r3, r7, r3
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	701a      	strb	r2, [r3, #0]
 800ae2e:	e049      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae30:	231b      	movs	r3, #27
 800ae32:	18fb      	adds	r3, r7, r3
 800ae34:	2210      	movs	r2, #16
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	e044      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a90      	ldr	r2, [pc, #576]	; (800b080 <UART_SetConfig+0x334>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d127      	bne.n	800ae94 <UART_SetConfig+0x148>
 800ae44:	4b8d      	ldr	r3, [pc, #564]	; (800b07c <UART_SetConfig+0x330>)
 800ae46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae48:	220c      	movs	r2, #12
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	2b0c      	cmp	r3, #12
 800ae4e:	d017      	beq.n	800ae80 <UART_SetConfig+0x134>
 800ae50:	d81b      	bhi.n	800ae8a <UART_SetConfig+0x13e>
 800ae52:	2b08      	cmp	r3, #8
 800ae54:	d00a      	beq.n	800ae6c <UART_SetConfig+0x120>
 800ae56:	d818      	bhi.n	800ae8a <UART_SetConfig+0x13e>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <UART_SetConfig+0x116>
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d00a      	beq.n	800ae76 <UART_SetConfig+0x12a>
 800ae60:	e013      	b.n	800ae8a <UART_SetConfig+0x13e>
 800ae62:	231b      	movs	r3, #27
 800ae64:	18fb      	adds	r3, r7, r3
 800ae66:	2200      	movs	r2, #0
 800ae68:	701a      	strb	r2, [r3, #0]
 800ae6a:	e02b      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae6c:	231b      	movs	r3, #27
 800ae6e:	18fb      	adds	r3, r7, r3
 800ae70:	2202      	movs	r2, #2
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	e026      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae76:	231b      	movs	r3, #27
 800ae78:	18fb      	adds	r3, r7, r3
 800ae7a:	2204      	movs	r2, #4
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	e021      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae80:	231b      	movs	r3, #27
 800ae82:	18fb      	adds	r3, r7, r3
 800ae84:	2208      	movs	r2, #8
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	e01c      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae8a:	231b      	movs	r3, #27
 800ae8c:	18fb      	adds	r3, r7, r3
 800ae8e:	2210      	movs	r2, #16
 800ae90:	701a      	strb	r2, [r3, #0]
 800ae92:	e017      	b.n	800aec4 <UART_SetConfig+0x178>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a7a      	ldr	r2, [pc, #488]	; (800b084 <UART_SetConfig+0x338>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d104      	bne.n	800aea8 <UART_SetConfig+0x15c>
 800ae9e:	231b      	movs	r3, #27
 800aea0:	18fb      	adds	r3, r7, r3
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	e00d      	b.n	800aec4 <UART_SetConfig+0x178>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a76      	ldr	r2, [pc, #472]	; (800b088 <UART_SetConfig+0x33c>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d104      	bne.n	800aebc <UART_SetConfig+0x170>
 800aeb2:	231b      	movs	r3, #27
 800aeb4:	18fb      	adds	r3, r7, r3
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	e003      	b.n	800aec4 <UART_SetConfig+0x178>
 800aebc:	231b      	movs	r3, #27
 800aebe:	18fb      	adds	r3, r7, r3
 800aec0:	2210      	movs	r2, #16
 800aec2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	69da      	ldr	r2, [r3, #28]
 800aec8:	2380      	movs	r3, #128	; 0x80
 800aeca:	021b      	lsls	r3, r3, #8
 800aecc:	429a      	cmp	r2, r3
 800aece:	d000      	beq.n	800aed2 <UART_SetConfig+0x186>
 800aed0:	e065      	b.n	800af9e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800aed2:	231b      	movs	r3, #27
 800aed4:	18fb      	adds	r3, r7, r3
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	2b08      	cmp	r3, #8
 800aeda:	d015      	beq.n	800af08 <UART_SetConfig+0x1bc>
 800aedc:	dc18      	bgt.n	800af10 <UART_SetConfig+0x1c4>
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d00d      	beq.n	800aefe <UART_SetConfig+0x1b2>
 800aee2:	dc15      	bgt.n	800af10 <UART_SetConfig+0x1c4>
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <UART_SetConfig+0x1a2>
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d005      	beq.n	800aef8 <UART_SetConfig+0x1ac>
 800aeec:	e010      	b.n	800af10 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeee:	f7fc fdd1 	bl	8007a94 <HAL_RCC_GetPCLK1Freq>
 800aef2:	0003      	movs	r3, r0
 800aef4:	617b      	str	r3, [r7, #20]
        break;
 800aef6:	e012      	b.n	800af1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aef8:	4b64      	ldr	r3, [pc, #400]	; (800b08c <UART_SetConfig+0x340>)
 800aefa:	617b      	str	r3, [r7, #20]
        break;
 800aefc:	e00f      	b.n	800af1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aefe:	f7fc fd3d 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800af02:	0003      	movs	r3, r0
 800af04:	617b      	str	r3, [r7, #20]
        break;
 800af06:	e00a      	b.n	800af1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af08:	2380      	movs	r3, #128	; 0x80
 800af0a:	021b      	lsls	r3, r3, #8
 800af0c:	617b      	str	r3, [r7, #20]
        break;
 800af0e:	e006      	b.n	800af1e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800af14:	231a      	movs	r3, #26
 800af16:	18fb      	adds	r3, r7, r3
 800af18:	2201      	movs	r2, #1
 800af1a:	701a      	strb	r2, [r3, #0]
        break;
 800af1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d100      	bne.n	800af26 <UART_SetConfig+0x1da>
 800af24:	e08d      	b.n	800b042 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af2a:	4b59      	ldr	r3, [pc, #356]	; (800b090 <UART_SetConfig+0x344>)
 800af2c:	0052      	lsls	r2, r2, #1
 800af2e:	5ad3      	ldrh	r3, [r2, r3]
 800af30:	0019      	movs	r1, r3
 800af32:	6978      	ldr	r0, [r7, #20]
 800af34:	f7f5 f90a 	bl	800014c <__udivsi3>
 800af38:	0003      	movs	r3, r0
 800af3a:	005a      	lsls	r2, r3, #1
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	085b      	lsrs	r3, r3, #1
 800af42:	18d2      	adds	r2, r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	0019      	movs	r1, r3
 800af4a:	0010      	movs	r0, r2
 800af4c:	f7f5 f8fe 	bl	800014c <__udivsi3>
 800af50:	0003      	movs	r3, r0
 800af52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	2b0f      	cmp	r3, #15
 800af58:	d91c      	bls.n	800af94 <UART_SetConfig+0x248>
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	2380      	movs	r3, #128	; 0x80
 800af5e:	025b      	lsls	r3, r3, #9
 800af60:	429a      	cmp	r2, r3
 800af62:	d217      	bcs.n	800af94 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	b29a      	uxth	r2, r3
 800af68:	200e      	movs	r0, #14
 800af6a:	183b      	adds	r3, r7, r0
 800af6c:	210f      	movs	r1, #15
 800af6e:	438a      	bics	r2, r1
 800af70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	085b      	lsrs	r3, r3, #1
 800af76:	b29b      	uxth	r3, r3
 800af78:	2207      	movs	r2, #7
 800af7a:	4013      	ands	r3, r2
 800af7c:	b299      	uxth	r1, r3
 800af7e:	183b      	adds	r3, r7, r0
 800af80:	183a      	adds	r2, r7, r0
 800af82:	8812      	ldrh	r2, [r2, #0]
 800af84:	430a      	orrs	r2, r1
 800af86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	183a      	adds	r2, r7, r0
 800af8e:	8812      	ldrh	r2, [r2, #0]
 800af90:	60da      	str	r2, [r3, #12]
 800af92:	e056      	b.n	800b042 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800af94:	231a      	movs	r3, #26
 800af96:	18fb      	adds	r3, r7, r3
 800af98:	2201      	movs	r2, #1
 800af9a:	701a      	strb	r2, [r3, #0]
 800af9c:	e051      	b.n	800b042 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af9e:	231b      	movs	r3, #27
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b08      	cmp	r3, #8
 800afa6:	d015      	beq.n	800afd4 <UART_SetConfig+0x288>
 800afa8:	dc18      	bgt.n	800afdc <UART_SetConfig+0x290>
 800afaa:	2b04      	cmp	r3, #4
 800afac:	d00d      	beq.n	800afca <UART_SetConfig+0x27e>
 800afae:	dc15      	bgt.n	800afdc <UART_SetConfig+0x290>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <UART_SetConfig+0x26e>
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d005      	beq.n	800afc4 <UART_SetConfig+0x278>
 800afb8:	e010      	b.n	800afdc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afba:	f7fc fd6b 	bl	8007a94 <HAL_RCC_GetPCLK1Freq>
 800afbe:	0003      	movs	r3, r0
 800afc0:	617b      	str	r3, [r7, #20]
        break;
 800afc2:	e012      	b.n	800afea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afc4:	4b31      	ldr	r3, [pc, #196]	; (800b08c <UART_SetConfig+0x340>)
 800afc6:	617b      	str	r3, [r7, #20]
        break;
 800afc8:	e00f      	b.n	800afea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afca:	f7fc fcd7 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800afce:	0003      	movs	r3, r0
 800afd0:	617b      	str	r3, [r7, #20]
        break;
 800afd2:	e00a      	b.n	800afea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afd4:	2380      	movs	r3, #128	; 0x80
 800afd6:	021b      	lsls	r3, r3, #8
 800afd8:	617b      	str	r3, [r7, #20]
        break;
 800afda:	e006      	b.n	800afea <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800afe0:	231a      	movs	r3, #26
 800afe2:	18fb      	adds	r3, r7, r3
 800afe4:	2201      	movs	r2, #1
 800afe6:	701a      	strb	r2, [r3, #0]
        break;
 800afe8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d028      	beq.n	800b042 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aff4:	4b26      	ldr	r3, [pc, #152]	; (800b090 <UART_SetConfig+0x344>)
 800aff6:	0052      	lsls	r2, r2, #1
 800aff8:	5ad3      	ldrh	r3, [r2, r3]
 800affa:	0019      	movs	r1, r3
 800affc:	6978      	ldr	r0, [r7, #20]
 800affe:	f7f5 f8a5 	bl	800014c <__udivsi3>
 800b002:	0003      	movs	r3, r0
 800b004:	001a      	movs	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	085b      	lsrs	r3, r3, #1
 800b00c:	18d2      	adds	r2, r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	0019      	movs	r1, r3
 800b014:	0010      	movs	r0, r2
 800b016:	f7f5 f899 	bl	800014c <__udivsi3>
 800b01a:	0003      	movs	r3, r0
 800b01c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2b0f      	cmp	r3, #15
 800b022:	d90a      	bls.n	800b03a <UART_SetConfig+0x2ee>
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	2380      	movs	r3, #128	; 0x80
 800b028:	025b      	lsls	r3, r3, #9
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d205      	bcs.n	800b03a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60da      	str	r2, [r3, #12]
 800b038:	e003      	b.n	800b042 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800b03a:	231a      	movs	r3, #26
 800b03c:	18fb      	adds	r3, r7, r3
 800b03e:	2201      	movs	r2, #1
 800b040:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	226a      	movs	r2, #106	; 0x6a
 800b046:	2101      	movs	r1, #1
 800b048:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2268      	movs	r2, #104	; 0x68
 800b04e:	2101      	movs	r1, #1
 800b050:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b05e:	231a      	movs	r3, #26
 800b060:	18fb      	adds	r3, r7, r3
 800b062:	781b      	ldrb	r3, [r3, #0]
}
 800b064:	0018      	movs	r0, r3
 800b066:	46bd      	mov	sp, r7
 800b068:	b008      	add	sp, #32
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	cfff69f3 	.word	0xcfff69f3
 800b070:	ffffcfff 	.word	0xffffcfff
 800b074:	11fff4ff 	.word	0x11fff4ff
 800b078:	40013800 	.word	0x40013800
 800b07c:	40021000 	.word	0x40021000
 800b080:	40004400 	.word	0x40004400
 800b084:	40004800 	.word	0x40004800
 800b088:	40004c00 	.word	0x40004c00
 800b08c:	00f42400 	.word	0x00f42400
 800b090:	08018bc8 	.word	0x08018bc8

0800b094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	d00b      	beq.n	800b0be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	4a4a      	ldr	r2, [pc, #296]	; (800b1d8 <UART_AdvFeatureConfig+0x144>)
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	0019      	movs	r1, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	d00b      	beq.n	800b0e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	4a43      	ldr	r2, [pc, #268]	; (800b1dc <UART_AdvFeatureConfig+0x148>)
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	0019      	movs	r1, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e4:	2204      	movs	r2, #4
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	d00b      	beq.n	800b102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a3b      	ldr	r2, [pc, #236]	; (800b1e0 <UART_AdvFeatureConfig+0x14c>)
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	0019      	movs	r1, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	430a      	orrs	r2, r1
 800b100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	2208      	movs	r2, #8
 800b108:	4013      	ands	r3, r2
 800b10a:	d00b      	beq.n	800b124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	4a34      	ldr	r2, [pc, #208]	; (800b1e4 <UART_AdvFeatureConfig+0x150>)
 800b114:	4013      	ands	r3, r2
 800b116:	0019      	movs	r1, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b128:	2210      	movs	r2, #16
 800b12a:	4013      	ands	r3, r2
 800b12c:	d00b      	beq.n	800b146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	4a2c      	ldr	r2, [pc, #176]	; (800b1e8 <UART_AdvFeatureConfig+0x154>)
 800b136:	4013      	ands	r3, r2
 800b138:	0019      	movs	r1, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	2220      	movs	r2, #32
 800b14c:	4013      	ands	r3, r2
 800b14e:	d00b      	beq.n	800b168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	4a25      	ldr	r2, [pc, #148]	; (800b1ec <UART_AdvFeatureConfig+0x158>)
 800b158:	4013      	ands	r3, r2
 800b15a:	0019      	movs	r1, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	2240      	movs	r2, #64	; 0x40
 800b16e:	4013      	ands	r3, r2
 800b170:	d01d      	beq.n	800b1ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	4a1d      	ldr	r2, [pc, #116]	; (800b1f0 <UART_AdvFeatureConfig+0x15c>)
 800b17a:	4013      	ands	r3, r2
 800b17c:	0019      	movs	r1, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b18e:	2380      	movs	r3, #128	; 0x80
 800b190:	035b      	lsls	r3, r3, #13
 800b192:	429a      	cmp	r2, r3
 800b194:	d10b      	bne.n	800b1ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	4a15      	ldr	r2, [pc, #84]	; (800b1f4 <UART_AdvFeatureConfig+0x160>)
 800b19e:	4013      	ands	r3, r2
 800b1a0:	0019      	movs	r1, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	2280      	movs	r2, #128	; 0x80
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d00b      	beq.n	800b1d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	4a0e      	ldr	r2, [pc, #56]	; (800b1f8 <UART_AdvFeatureConfig+0x164>)
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	0019      	movs	r1, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	605a      	str	r2, [r3, #4]
  }
}
 800b1d0:	46c0      	nop			; (mov r8, r8)
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	b002      	add	sp, #8
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	fffdffff 	.word	0xfffdffff
 800b1dc:	fffeffff 	.word	0xfffeffff
 800b1e0:	fffbffff 	.word	0xfffbffff
 800b1e4:	ffff7fff 	.word	0xffff7fff
 800b1e8:	ffffefff 	.word	0xffffefff
 800b1ec:	ffffdfff 	.word	0xffffdfff
 800b1f0:	ffefffff 	.word	0xffefffff
 800b1f4:	ff9fffff 	.word	0xff9fffff
 800b1f8:	fff7ffff 	.word	0xfff7ffff

0800b1fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af02      	add	r7, sp, #8
 800b202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2290      	movs	r2, #144	; 0x90
 800b208:	2100      	movs	r1, #0
 800b20a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b20c:	f7fa f886 	bl	800531c <HAL_GetTick>
 800b210:	0003      	movs	r3, r0
 800b212:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2208      	movs	r2, #8
 800b21c:	4013      	ands	r3, r2
 800b21e:	2b08      	cmp	r3, #8
 800b220:	d10c      	bne.n	800b23c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2280      	movs	r2, #128	; 0x80
 800b226:	0391      	lsls	r1, r2, #14
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	4a1a      	ldr	r2, [pc, #104]	; (800b294 <UART_CheckIdleState+0x98>)
 800b22c:	9200      	str	r2, [sp, #0]
 800b22e:	2200      	movs	r2, #0
 800b230:	f000 f832 	bl	800b298 <UART_WaitOnFlagUntilTimeout>
 800b234:	1e03      	subs	r3, r0, #0
 800b236:	d001      	beq.n	800b23c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e026      	b.n	800b28a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2204      	movs	r2, #4
 800b244:	4013      	ands	r3, r2
 800b246:	2b04      	cmp	r3, #4
 800b248:	d10c      	bne.n	800b264 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2280      	movs	r2, #128	; 0x80
 800b24e:	03d1      	lsls	r1, r2, #15
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	4a10      	ldr	r2, [pc, #64]	; (800b294 <UART_CheckIdleState+0x98>)
 800b254:	9200      	str	r2, [sp, #0]
 800b256:	2200      	movs	r2, #0
 800b258:	f000 f81e 	bl	800b298 <UART_WaitOnFlagUntilTimeout>
 800b25c:	1e03      	subs	r3, r0, #0
 800b25e:	d001      	beq.n	800b264 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b260:	2303      	movs	r3, #3
 800b262:	e012      	b.n	800b28a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2288      	movs	r2, #136	; 0x88
 800b268:	2120      	movs	r1, #32
 800b26a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	228c      	movs	r2, #140	; 0x8c
 800b270:	2120      	movs	r1, #32
 800b272:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2284      	movs	r2, #132	; 0x84
 800b284:	2100      	movs	r1, #0
 800b286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	0018      	movs	r0, r3
 800b28c:	46bd      	mov	sp, r7
 800b28e:	b004      	add	sp, #16
 800b290:	bd80      	pop	{r7, pc}
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	01ffffff 	.word	0x01ffffff

0800b298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b094      	sub	sp, #80	; 0x50
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	1dfb      	adds	r3, r7, #7
 800b2a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2a8:	e0a7      	b.n	800b3fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	d100      	bne.n	800b2b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800b2b0:	e0a3      	b.n	800b3fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b2:	f7fa f833 	bl	800531c <HAL_GetTick>
 800b2b6:	0002      	movs	r2, r0
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d302      	bcc.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d13f      	bne.n	800b348 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	f383 8810 	msr	PRIMASK, r3
}
 800b2dc:	46c0      	nop			; (mov r8, r8)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	494e      	ldr	r1, [pc, #312]	; (800b424 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b2ea:	400a      	ands	r2, r1
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	f383 8810 	msr	PRIMASK, r3
}
 800b2f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b2fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b302:	643b      	str	r3, [r7, #64]	; 0x40
 800b304:	2301      	movs	r3, #1
 800b306:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f383 8810 	msr	PRIMASK, r3
}
 800b30e:	46c0      	nop			; (mov r8, r8)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2101      	movs	r1, #1
 800b31c:	438a      	bics	r2, r1
 800b31e:	609a      	str	r2, [r3, #8]
 800b320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b326:	f383 8810 	msr	PRIMASK, r3
}
 800b32a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2288      	movs	r2, #136	; 0x88
 800b330:	2120      	movs	r1, #32
 800b332:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	228c      	movs	r2, #140	; 0x8c
 800b338:	2120      	movs	r1, #32
 800b33a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2284      	movs	r2, #132	; 0x84
 800b340:	2100      	movs	r1, #0
 800b342:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e069      	b.n	800b41c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2204      	movs	r2, #4
 800b350:	4013      	ands	r3, r2
 800b352:	d052      	beq.n	800b3fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	69da      	ldr	r2, [r3, #28]
 800b35a:	2380      	movs	r3, #128	; 0x80
 800b35c:	011b      	lsls	r3, r3, #4
 800b35e:	401a      	ands	r2, r3
 800b360:	2380      	movs	r3, #128	; 0x80
 800b362:	011b      	lsls	r3, r3, #4
 800b364:	429a      	cmp	r2, r3
 800b366:	d148      	bne.n	800b3fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2280      	movs	r2, #128	; 0x80
 800b36e:	0112      	lsls	r2, r2, #4
 800b370:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b372:	f3ef 8310 	mrs	r3, PRIMASK
 800b376:	613b      	str	r3, [r7, #16]
  return(result);
 800b378:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b37a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b37c:	2301      	movs	r3, #1
 800b37e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f383 8810 	msr	PRIMASK, r3
}
 800b386:	46c0      	nop			; (mov r8, r8)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4924      	ldr	r1, [pc, #144]	; (800b424 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b394:	400a      	ands	r2, r1
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b39a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	f383 8810 	msr	PRIMASK, r3
}
 800b3a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b3a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800b3aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	f383 8810 	msr	PRIMASK, r3
}
 800b3b8:	46c0      	nop			; (mov r8, r8)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	438a      	bics	r2, r1
 800b3c8:	609a      	str	r2, [r3, #8]
 800b3ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	f383 8810 	msr	PRIMASK, r3
}
 800b3d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2288      	movs	r2, #136	; 0x88
 800b3da:	2120      	movs	r1, #32
 800b3dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	228c      	movs	r2, #140	; 0x8c
 800b3e2:	2120      	movs	r1, #32
 800b3e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2290      	movs	r2, #144	; 0x90
 800b3ea:	2120      	movs	r1, #32
 800b3ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2284      	movs	r2, #132	; 0x84
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e010      	b.n	800b41c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	69db      	ldr	r3, [r3, #28]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	4013      	ands	r3, r2
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	425a      	negs	r2, r3
 800b40a:	4153      	adcs	r3, r2
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	001a      	movs	r2, r3
 800b410:	1dfb      	adds	r3, r7, #7
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	429a      	cmp	r2, r3
 800b416:	d100      	bne.n	800b41a <UART_WaitOnFlagUntilTimeout+0x182>
 800b418:	e747      	b.n	800b2aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	0018      	movs	r0, r3
 800b41e:	46bd      	mov	sp, r7
 800b420:	b014      	add	sp, #80	; 0x50
 800b422:	bd80      	pop	{r7, pc}
 800b424:	fffffe5f 	.word	0xfffffe5f

0800b428 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b090      	sub	sp, #64	; 0x40
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	1dbb      	adds	r3, r7, #6
 800b434:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	1dba      	adds	r2, r7, #6
 800b440:	215c      	movs	r1, #92	; 0x5c
 800b442:	8812      	ldrh	r2, [r2, #0]
 800b444:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2290      	movs	r2, #144	; 0x90
 800b44a:	2100      	movs	r1, #0
 800b44c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	228c      	movs	r2, #140	; 0x8c
 800b452:	2122      	movs	r1, #34	; 0x22
 800b454:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2280      	movs	r2, #128	; 0x80
 800b45a:	589b      	ldr	r3, [r3, r2]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d02d      	beq.n	800b4bc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2280      	movs	r2, #128	; 0x80
 800b464:	589b      	ldr	r3, [r3, r2]
 800b466:	4a40      	ldr	r2, [pc, #256]	; (800b568 <UART_Start_Receive_DMA+0x140>)
 800b468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2280      	movs	r2, #128	; 0x80
 800b46e:	589b      	ldr	r3, [r3, r2]
 800b470:	4a3e      	ldr	r2, [pc, #248]	; (800b56c <UART_Start_Receive_DMA+0x144>)
 800b472:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2280      	movs	r2, #128	; 0x80
 800b478:	589b      	ldr	r3, [r3, r2]
 800b47a:	4a3d      	ldr	r2, [pc, #244]	; (800b570 <UART_Start_Receive_DMA+0x148>)
 800b47c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2280      	movs	r2, #128	; 0x80
 800b482:	589b      	ldr	r3, [r3, r2]
 800b484:	2200      	movs	r2, #0
 800b486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2280      	movs	r2, #128	; 0x80
 800b48c:	5898      	ldr	r0, [r3, r2]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3324      	adds	r3, #36	; 0x24
 800b494:	0019      	movs	r1, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49a:	001a      	movs	r2, r3
 800b49c:	1dbb      	adds	r3, r7, #6
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	f7fb f9cc 	bl	800683c <HAL_DMA_Start_IT>
 800b4a4:	1e03      	subs	r3, r0, #0
 800b4a6:	d009      	beq.n	800b4bc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2290      	movs	r2, #144	; 0x90
 800b4ac:	2110      	movs	r1, #16
 800b4ae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	228c      	movs	r2, #140	; 0x8c
 800b4b4:	2120      	movs	r1, #32
 800b4b6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e050      	b.n	800b55e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d019      	beq.n	800b4f8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	f383 8810 	msr	PRIMASK, r3
}
 800b4d8:	46c0      	nop			; (mov r8, r8)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2180      	movs	r1, #128	; 0x80
 800b4e6:	0049      	lsls	r1, r1, #1
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	601a      	str	r2, [r3, #0]
 800b4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	f383 8810 	msr	PRIMASK, r3
}
 800b4f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b4fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b500:	63bb      	str	r3, [r7, #56]	; 0x38
 800b502:	2301      	movs	r3, #1
 800b504:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f383 8810 	msr	PRIMASK, r3
}
 800b50c:	46c0      	nop			; (mov r8, r8)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	689a      	ldr	r2, [r3, #8]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2101      	movs	r1, #1
 800b51a:	430a      	orrs	r2, r1
 800b51c:	609a      	str	r2, [r3, #8]
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	f383 8810 	msr	PRIMASK, r3
}
 800b528:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b52a:	f3ef 8310 	mrs	r3, PRIMASK
 800b52e:	61fb      	str	r3, [r7, #28]
  return(result);
 800b530:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b532:	637b      	str	r3, [r7, #52]	; 0x34
 800b534:	2301      	movs	r3, #1
 800b536:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	f383 8810 	msr	PRIMASK, r3
}
 800b53e:	46c0      	nop			; (mov r8, r8)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2140      	movs	r1, #64	; 0x40
 800b54c:	430a      	orrs	r2, r1
 800b54e:	609a      	str	r2, [r3, #8]
 800b550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b552:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	f383 8810 	msr	PRIMASK, r3
}
 800b55a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	0018      	movs	r0, r3
 800b560:	46bd      	mov	sp, r7
 800b562:	b010      	add	sp, #64	; 0x40
 800b564:	bd80      	pop	{r7, pc}
 800b566:	46c0      	nop			; (mov r8, r8)
 800b568:	0800b6c1 	.word	0x0800b6c1
 800b56c:	0800b7f1 	.word	0x0800b7f1
 800b570:	0800b833 	.word	0x0800b833

0800b574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08a      	sub	sp, #40	; 0x28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b57c:	f3ef 8310 	mrs	r3, PRIMASK
 800b580:	60bb      	str	r3, [r7, #8]
  return(result);
 800b582:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
 800b586:	2301      	movs	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f383 8810 	msr	PRIMASK, r3
}
 800b590:	46c0      	nop			; (mov r8, r8)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	21c0      	movs	r1, #192	; 0xc0
 800b59e:	438a      	bics	r2, r1
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f383 8810 	msr	PRIMASK, r3
}
 800b5ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b2:	617b      	str	r3, [r7, #20]
  return(result);
 800b5b4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b5b6:	623b      	str	r3, [r7, #32]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	f383 8810 	msr	PRIMASK, r3
}
 800b5c2:	46c0      	nop			; (mov r8, r8)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4908      	ldr	r1, [pc, #32]	; (800b5f0 <UART_EndTxTransfer+0x7c>)
 800b5d0:	400a      	ands	r2, r1
 800b5d2:	609a      	str	r2, [r3, #8]
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f383 8810 	msr	PRIMASK, r3
}
 800b5de:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2288      	movs	r2, #136	; 0x88
 800b5e4:	2120      	movs	r1, #32
 800b5e6:	5099      	str	r1, [r3, r2]
}
 800b5e8:	46c0      	nop			; (mov r8, r8)
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	b00a      	add	sp, #40	; 0x28
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	ff7fffff 	.word	0xff7fffff

0800b5f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08e      	sub	sp, #56	; 0x38
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b600:	617b      	str	r3, [r7, #20]
  return(result);
 800b602:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b604:	637b      	str	r3, [r7, #52]	; 0x34
 800b606:	2301      	movs	r3, #1
 800b608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	f383 8810 	msr	PRIMASK, r3
}
 800b610:	46c0      	nop			; (mov r8, r8)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4926      	ldr	r1, [pc, #152]	; (800b6b8 <UART_EndRxTransfer+0xc4>)
 800b61e:	400a      	ands	r2, r1
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	f383 8810 	msr	PRIMASK, r3
}
 800b62c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b62e:	f3ef 8310 	mrs	r3, PRIMASK
 800b632:	623b      	str	r3, [r7, #32]
  return(result);
 800b634:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b636:	633b      	str	r3, [r7, #48]	; 0x30
 800b638:	2301      	movs	r3, #1
 800b63a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63e:	f383 8810 	msr	PRIMASK, r3
}
 800b642:	46c0      	nop			; (mov r8, r8)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	689a      	ldr	r2, [r3, #8]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	491b      	ldr	r1, [pc, #108]	; (800b6bc <UART_EndRxTransfer+0xc8>)
 800b650:	400a      	ands	r2, r1
 800b652:	609a      	str	r2, [r3, #8]
 800b654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b656:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	f383 8810 	msr	PRIMASK, r3
}
 800b65e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b664:	2b01      	cmp	r3, #1
 800b666:	d118      	bne.n	800b69a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b668:	f3ef 8310 	mrs	r3, PRIMASK
 800b66c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b66e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b670:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b672:	2301      	movs	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f383 8810 	msr	PRIMASK, r3
}
 800b67c:	46c0      	nop			; (mov r8, r8)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2110      	movs	r1, #16
 800b68a:	438a      	bics	r2, r1
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f383 8810 	msr	PRIMASK, r3
}
 800b698:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	228c      	movs	r2, #140	; 0x8c
 800b69e:	2120      	movs	r1, #32
 800b6a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b6ae:	46c0      	nop			; (mov r8, r8)
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b00e      	add	sp, #56	; 0x38
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	46c0      	nop			; (mov r8, r8)
 800b6b8:	fffffedf 	.word	0xfffffedf
 800b6bc:	effffffe 	.word	0xeffffffe

0800b6c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b094      	sub	sp, #80	; 0x50
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	d16f      	bne.n	800b7ba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6dc:	225e      	movs	r2, #94	; 0x5e
 800b6de:	2100      	movs	r1, #0
 800b6e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6e6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b6e8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	f383 8810 	msr	PRIMASK, r3
}
 800b6f6:	46c0      	nop			; (mov r8, r8)
 800b6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	493a      	ldr	r1, [pc, #232]	; (800b7ec <UART_DMAReceiveCplt+0x12c>)
 800b704:	400a      	ands	r2, r1
 800b706:	601a      	str	r2, [r3, #0]
 800b708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	f383 8810 	msr	PRIMASK, r3
}
 800b712:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b714:	f3ef 8310 	mrs	r3, PRIMASK
 800b718:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b71c:	647b      	str	r3, [r7, #68]	; 0x44
 800b71e:	2301      	movs	r3, #1
 800b720:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	f383 8810 	msr	PRIMASK, r3
}
 800b728:	46c0      	nop			; (mov r8, r8)
 800b72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2101      	movs	r1, #1
 800b736:	438a      	bics	r2, r1
 800b738:	609a      	str	r2, [r3, #8]
 800b73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b73c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b740:	f383 8810 	msr	PRIMASK, r3
}
 800b744:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b746:	f3ef 8310 	mrs	r3, PRIMASK
 800b74a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b74e:	643b      	str	r3, [r7, #64]	; 0x40
 800b750:	2301      	movs	r3, #1
 800b752:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	f383 8810 	msr	PRIMASK, r3
}
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2140      	movs	r1, #64	; 0x40
 800b768:	438a      	bics	r2, r1
 800b76a:	609a      	str	r2, [r3, #8]
 800b76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	f383 8810 	msr	PRIMASK, r3
}
 800b776:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b77a:	228c      	movs	r2, #140	; 0x8c
 800b77c:	2120      	movs	r1, #32
 800b77e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b784:	2b01      	cmp	r3, #1
 800b786:	d118      	bne.n	800b7ba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b788:	f3ef 8310 	mrs	r3, PRIMASK
 800b78c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b78e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b790:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b792:	2301      	movs	r3, #1
 800b794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f383 8810 	msr	PRIMASK, r3
}
 800b79c:	46c0      	nop			; (mov r8, r8)
 800b79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2110      	movs	r1, #16
 800b7aa:	438a      	bics	r2, r1
 800b7ac:	601a      	str	r2, [r3, #0]
 800b7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f383 8810 	msr	PRIMASK, r3
}
 800b7b8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7bc:	2200      	movs	r2, #0
 800b7be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d108      	bne.n	800b7da <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ca:	225c      	movs	r2, #92	; 0x5c
 800b7cc:	5a9a      	ldrh	r2, [r3, r2]
 800b7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d0:	0011      	movs	r1, r2
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	f7ff faae 	bl	800ad34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7d8:	e003      	b.n	800b7e2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7ff fa91 	bl	800ad04 <HAL_UART_RxCpltCallback>
}
 800b7e2:	46c0      	nop			; (mov r8, r8)
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	b014      	add	sp, #80	; 0x50
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	fffffeff 	.word	0xfffffeff

0800b7f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2201      	movs	r2, #1
 800b802:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d10a      	bne.n	800b822 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	225c      	movs	r2, #92	; 0x5c
 800b810:	5a9b      	ldrh	r3, [r3, r2]
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	0011      	movs	r1, r2
 800b81a:	0018      	movs	r0, r3
 800b81c:	f7ff fa8a 	bl	800ad34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b820:	e003      	b.n	800b82a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	0018      	movs	r0, r3
 800b826:	f7ff fa75 	bl	800ad14 <HAL_UART_RxHalfCpltCallback>
}
 800b82a:	46c0      	nop			; (mov r8, r8)
 800b82c:	46bd      	mov	sp, r7
 800b82e:	b004      	add	sp, #16
 800b830:	bd80      	pop	{r7, pc}

0800b832 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b086      	sub	sp, #24
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2288      	movs	r2, #136	; 0x88
 800b844:	589b      	ldr	r3, [r3, r2]
 800b846:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	228c      	movs	r2, #140	; 0x8c
 800b84c:	589b      	ldr	r3, [r3, r2]
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	2280      	movs	r2, #128	; 0x80
 800b858:	4013      	ands	r3, r2
 800b85a:	2b80      	cmp	r3, #128	; 0x80
 800b85c:	d10a      	bne.n	800b874 <UART_DMAError+0x42>
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	2b21      	cmp	r3, #33	; 0x21
 800b862:	d107      	bne.n	800b874 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2256      	movs	r2, #86	; 0x56
 800b868:	2100      	movs	r1, #0
 800b86a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	0018      	movs	r0, r3
 800b870:	f7ff fe80 	bl	800b574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	2240      	movs	r2, #64	; 0x40
 800b87c:	4013      	ands	r3, r2
 800b87e:	2b40      	cmp	r3, #64	; 0x40
 800b880:	d10a      	bne.n	800b898 <UART_DMAError+0x66>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b22      	cmp	r3, #34	; 0x22
 800b886:	d107      	bne.n	800b898 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	225e      	movs	r2, #94	; 0x5e
 800b88c:	2100      	movs	r1, #0
 800b88e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	0018      	movs	r0, r3
 800b894:	f7ff feae 	bl	800b5f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2290      	movs	r2, #144	; 0x90
 800b89c:	589b      	ldr	r3, [r3, r2]
 800b89e:	2210      	movs	r2, #16
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2190      	movs	r1, #144	; 0x90
 800b8a6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	f7ff fa3a 	bl	800ad24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8b0:	46c0      	nop			; (mov r8, r8)
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	b006      	add	sp, #24
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	225e      	movs	r2, #94	; 0x5e
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2256      	movs	r2, #86	; 0x56
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	0018      	movs	r0, r3
 800b8da:	f7ff fa23 	bl	800ad24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8de:	46c0      	nop			; (mov r8, r8)
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	b004      	add	sp, #16
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b08a      	sub	sp, #40	; 0x28
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2288      	movs	r2, #136	; 0x88
 800b8f2:	589b      	ldr	r3, [r3, r2]
 800b8f4:	2b21      	cmp	r3, #33	; 0x21
 800b8f6:	d14c      	bne.n	800b992 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2256      	movs	r2, #86	; 0x56
 800b8fc:	5a9b      	ldrh	r3, [r3, r2]
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d132      	bne.n	800b96a <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b904:	f3ef 8310 	mrs	r3, PRIMASK
 800b908:	60bb      	str	r3, [r7, #8]
  return(result);
 800b90a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
 800b90e:	2301      	movs	r3, #1
 800b910:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f383 8810 	msr	PRIMASK, r3
}
 800b918:	46c0      	nop			; (mov r8, r8)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2180      	movs	r1, #128	; 0x80
 800b926:	438a      	bics	r2, r1
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f383 8810 	msr	PRIMASK, r3
}
 800b934:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b936:	f3ef 8310 	mrs	r3, PRIMASK
 800b93a:	617b      	str	r3, [r7, #20]
  return(result);
 800b93c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b93e:	623b      	str	r3, [r7, #32]
 800b940:	2301      	movs	r3, #1
 800b942:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	f383 8810 	msr	PRIMASK, r3
}
 800b94a:	46c0      	nop			; (mov r8, r8)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2140      	movs	r1, #64	; 0x40
 800b958:	430a      	orrs	r2, r1
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	f383 8810 	msr	PRIMASK, r3
}
 800b966:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b968:	e013      	b.n	800b992 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b96e:	781a      	ldrb	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2256      	movs	r2, #86	; 0x56
 800b984:	5a9b      	ldrh	r3, [r3, r2]
 800b986:	b29b      	uxth	r3, r3
 800b988:	3b01      	subs	r3, #1
 800b98a:	b299      	uxth	r1, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2256      	movs	r2, #86	; 0x56
 800b990:	5299      	strh	r1, [r3, r2]
}
 800b992:	46c0      	nop			; (mov r8, r8)
 800b994:	46bd      	mov	sp, r7
 800b996:	b00a      	add	sp, #40	; 0x28
 800b998:	bd80      	pop	{r7, pc}

0800b99a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b08c      	sub	sp, #48	; 0x30
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2288      	movs	r2, #136	; 0x88
 800b9a6:	589b      	ldr	r3, [r3, r2]
 800b9a8:	2b21      	cmp	r3, #33	; 0x21
 800b9aa:	d151      	bne.n	800ba50 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2256      	movs	r2, #86	; 0x56
 800b9b0:	5a9b      	ldrh	r3, [r3, r2]
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d132      	bne.n	800ba1e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b9c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f383 8810 	msr	PRIMASK, r3
}
 800b9cc:	46c0      	nop			; (mov r8, r8)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2180      	movs	r1, #128	; 0x80
 800b9da:	438a      	bics	r2, r1
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f383 8810 	msr	PRIMASK, r3
}
 800b9e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ee:	61bb      	str	r3, [r7, #24]
  return(result);
 800b9f0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	f383 8810 	msr	PRIMASK, r3
}
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2140      	movs	r1, #64	; 0x40
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	601a      	str	r2, [r3, #0]
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	f383 8810 	msr	PRIMASK, r3
}
 800ba1a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ba1c:	e018      	b.n	800ba50 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	001a      	movs	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	05d2      	lsls	r2, r2, #23
 800ba30:	0dd2      	lsrs	r2, r2, #23
 800ba32:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba38:	1c9a      	adds	r2, r3, #2
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2256      	movs	r2, #86	; 0x56
 800ba42:	5a9b      	ldrh	r3, [r3, r2]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	3b01      	subs	r3, #1
 800ba48:	b299      	uxth	r1, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2256      	movs	r2, #86	; 0x56
 800ba4e:	5299      	strh	r1, [r3, r2]
}
 800ba50:	46c0      	nop			; (mov r8, r8)
 800ba52:	46bd      	mov	sp, r7
 800ba54:	b00c      	add	sp, #48	; 0x30
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08c      	sub	sp, #48	; 0x30
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2288      	movs	r2, #136	; 0x88
 800ba64:	589b      	ldr	r3, [r3, r2]
 800ba66:	2b21      	cmp	r3, #33	; 0x21
 800ba68:	d165      	bne.n	800bb36 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba6a:	232e      	movs	r3, #46	; 0x2e
 800ba6c:	18fb      	adds	r3, r7, r3
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	216a      	movs	r1, #106	; 0x6a
 800ba72:	5a52      	ldrh	r2, [r2, r1]
 800ba74:	801a      	strh	r2, [r3, #0]
 800ba76:	e059      	b.n	800bb2c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2256      	movs	r2, #86	; 0x56
 800ba7c:	5a9b      	ldrh	r3, [r3, r2]
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d133      	bne.n	800baec <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba84:	f3ef 8310 	mrs	r3, PRIMASK
 800ba88:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ba8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba8e:	2301      	movs	r3, #1
 800ba90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f383 8810 	msr	PRIMASK, r3
}
 800ba98:	46c0      	nop			; (mov r8, r8)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689a      	ldr	r2, [r3, #8]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4926      	ldr	r1, [pc, #152]	; (800bb40 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800baa6:	400a      	ands	r2, r1
 800baa8:	609a      	str	r2, [r3, #8]
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f383 8810 	msr	PRIMASK, r3
}
 800bab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bab6:	f3ef 8310 	mrs	r3, PRIMASK
 800baba:	61bb      	str	r3, [r7, #24]
  return(result);
 800babc:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800babe:	627b      	str	r3, [r7, #36]	; 0x24
 800bac0:	2301      	movs	r3, #1
 800bac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	f383 8810 	msr	PRIMASK, r3
}
 800baca:	46c0      	nop			; (mov r8, r8)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2140      	movs	r1, #64	; 0x40
 800bad8:	430a      	orrs	r2, r1
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	f383 8810 	msr	PRIMASK, r3
}
 800bae6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800bae8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800baea:	e024      	b.n	800bb36 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	2280      	movs	r2, #128	; 0x80
 800baf4:	4013      	ands	r3, r2
 800baf6:	d013      	beq.n	800bb20 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafc:	781a      	ldrb	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2256      	movs	r2, #86	; 0x56
 800bb12:	5a9b      	ldrh	r3, [r3, r2]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	3b01      	subs	r3, #1
 800bb18:	b299      	uxth	r1, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2256      	movs	r2, #86	; 0x56
 800bb1e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb20:	212e      	movs	r1, #46	; 0x2e
 800bb22:	187b      	adds	r3, r7, r1
 800bb24:	881a      	ldrh	r2, [r3, #0]
 800bb26:	187b      	adds	r3, r7, r1
 800bb28:	3a01      	subs	r2, #1
 800bb2a:	801a      	strh	r2, [r3, #0]
 800bb2c:	232e      	movs	r3, #46	; 0x2e
 800bb2e:	18fb      	adds	r3, r7, r3
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1a0      	bne.n	800ba78 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800bb36:	46c0      	nop			; (mov r8, r8)
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	b00c      	add	sp, #48	; 0x30
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	ff7fffff 	.word	0xff7fffff

0800bb44 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08c      	sub	sp, #48	; 0x30
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2288      	movs	r2, #136	; 0x88
 800bb50:	589b      	ldr	r3, [r3, r2]
 800bb52:	2b21      	cmp	r3, #33	; 0x21
 800bb54:	d16a      	bne.n	800bc2c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb56:	232e      	movs	r3, #46	; 0x2e
 800bb58:	18fb      	adds	r3, r7, r3
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	216a      	movs	r1, #106	; 0x6a
 800bb5e:	5a52      	ldrh	r2, [r2, r1]
 800bb60:	801a      	strh	r2, [r3, #0]
 800bb62:	e05e      	b.n	800bc22 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2256      	movs	r2, #86	; 0x56
 800bb68:	5a9b      	ldrh	r3, [r3, r2]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d133      	bne.n	800bbd8 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb70:	f3ef 8310 	mrs	r3, PRIMASK
 800bb74:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb76:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f383 8810 	msr	PRIMASK, r3
}
 800bb84:	46c0      	nop			; (mov r8, r8)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4928      	ldr	r1, [pc, #160]	; (800bc34 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800bb92:	400a      	ands	r2, r1
 800bb94:	609a      	str	r2, [r3, #8]
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f383 8810 	msr	PRIMASK, r3
}
 800bba0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bba2:	f3ef 8310 	mrs	r3, PRIMASK
 800bba6:	617b      	str	r3, [r7, #20]
  return(result);
 800bba8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbaa:	623b      	str	r3, [r7, #32]
 800bbac:	2301      	movs	r3, #1
 800bbae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	f383 8810 	msr	PRIMASK, r3
}
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2140      	movs	r1, #64	; 0x40
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	601a      	str	r2, [r3, #0]
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	f383 8810 	msr	PRIMASK, r3
}
 800bbd2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800bbd4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800bbd6:	e029      	b.n	800bc2c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	2280      	movs	r2, #128	; 0x80
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	d018      	beq.n	800bc16 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe8:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	001a      	movs	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	05d2      	lsls	r2, r2, #23
 800bbf6:	0dd2      	lsrs	r2, r2, #23
 800bbf8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfe:	1c9a      	adds	r2, r3, #2
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2256      	movs	r2, #86	; 0x56
 800bc08:	5a9b      	ldrh	r3, [r3, r2]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	b299      	uxth	r1, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2256      	movs	r2, #86	; 0x56
 800bc14:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc16:	212e      	movs	r1, #46	; 0x2e
 800bc18:	187b      	adds	r3, r7, r1
 800bc1a:	881a      	ldrh	r2, [r3, #0]
 800bc1c:	187b      	adds	r3, r7, r1
 800bc1e:	3a01      	subs	r2, #1
 800bc20:	801a      	strh	r2, [r3, #0]
 800bc22:	232e      	movs	r3, #46	; 0x2e
 800bc24:	18fb      	adds	r3, r7, r3
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d19b      	bne.n	800bb64 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800bc2c:	46c0      	nop			; (mov r8, r8)
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	b00c      	add	sp, #48	; 0x30
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	ff7fffff 	.word	0xff7fffff

0800bc38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc40:	f3ef 8310 	mrs	r3, PRIMASK
 800bc44:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc46:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc48:	617b      	str	r3, [r7, #20]
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f383 8810 	msr	PRIMASK, r3
}
 800bc54:	46c0      	nop			; (mov r8, r8)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2140      	movs	r1, #64	; 0x40
 800bc62:	438a      	bics	r2, r1
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	f383 8810 	msr	PRIMASK, r3
}
 800bc70:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2288      	movs	r2, #136	; 0x88
 800bc76:	2120      	movs	r1, #32
 800bc78:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	0018      	movs	r0, r3
 800bc84:	f7ff f836 	bl	800acf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc88:	46c0      	nop			; (mov r8, r8)
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b006      	add	sp, #24
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e05d      	b.n	800bd64 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2288      	movs	r2, #136	; 0x88
 800bcac:	589b      	ldr	r3, [r3, r2]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d107      	bne.n	800bcc2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2284      	movs	r2, #132	; 0x84
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	f7f8 ff93 	bl	8004be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2288      	movs	r2, #136	; 0x88
 800bcc6:	2124      	movs	r1, #36	; 0x24
 800bcc8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	438a      	bics	r2, r1
 800bcd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f7ff f835 	bl	800ad4c <UART_SetConfig>
 800bce2:	0003      	movs	r3, r0
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d101      	bne.n	800bcec <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e03b      	b.n	800bd64 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	0018      	movs	r0, r3
 800bcf8:	f7ff f9cc 	bl	800b094 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	689a      	ldr	r2, [r3, #8]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2180      	movs	r1, #128	; 0x80
 800bd08:	01c9      	lsls	r1, r1, #7
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	4a15      	ldr	r2, [pc, #84]	; (800bd6c <HAL_RS485Ex_Init+0xdc>)
 800bd16:	4013      	ands	r3, r2
 800bd18:	0019      	movs	r1, r3
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	055b      	lsls	r3, r3, #21
 800bd28:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	041b      	lsls	r3, r3, #16
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a0d      	ldr	r2, [pc, #52]	; (800bd70 <HAL_RS485Ex_Init+0xe0>)
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	0019      	movs	r1, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	430a      	orrs	r2, r1
 800bd48:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2101      	movs	r1, #1
 800bd56:	430a      	orrs	r2, r1
 800bd58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	f7ff fa4d 	bl	800b1fc <UART_CheckIdleState>
 800bd62:	0003      	movs	r3, r0
}
 800bd64:	0018      	movs	r0, r3
 800bd66:	46bd      	mov	sp, r7
 800bd68:	b006      	add	sp, #24
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	ffff7fff 	.word	0xffff7fff
 800bd70:	fc00ffff 	.word	0xfc00ffff

0800bd74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd7c:	46c0      	nop			; (mov r8, r8)
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	b002      	add	sp, #8
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd8c:	46c0      	nop			; (mov r8, r8)
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	b002      	add	sp, #8
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd9c:	46c0      	nop			; (mov r8, r8)
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	b002      	add	sp, #8
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2284      	movs	r2, #132	; 0x84
 800bdb0:	5c9b      	ldrb	r3, [r3, r2]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d101      	bne.n	800bdba <HAL_UARTEx_DisableFifoMode+0x16>
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	e027      	b.n	800be0a <HAL_UARTEx_DisableFifoMode+0x66>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2284      	movs	r2, #132	; 0x84
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2288      	movs	r2, #136	; 0x88
 800bdc6:	2124      	movs	r1, #36	; 0x24
 800bdc8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2101      	movs	r1, #1
 800bdde:	438a      	bics	r2, r1
 800bde0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4a0b      	ldr	r2, [pc, #44]	; (800be14 <HAL_UARTEx_DisableFifoMode+0x70>)
 800bde6:	4013      	ands	r3, r2
 800bde8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2288      	movs	r2, #136	; 0x88
 800bdfc:	2120      	movs	r1, #32
 800bdfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2284      	movs	r2, #132	; 0x84
 800be04:	2100      	movs	r1, #0
 800be06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	0018      	movs	r0, r3
 800be0c:	46bd      	mov	sp, r7
 800be0e:	b004      	add	sp, #16
 800be10:	bd80      	pop	{r7, pc}
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	dfffffff 	.word	0xdfffffff

0800be18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2284      	movs	r2, #132	; 0x84
 800be26:	5c9b      	ldrb	r3, [r3, r2]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d101      	bne.n	800be30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be2c:	2302      	movs	r3, #2
 800be2e:	e02e      	b.n	800be8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2284      	movs	r2, #132	; 0x84
 800be34:	2101      	movs	r1, #1
 800be36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2288      	movs	r2, #136	; 0x88
 800be3c:	2124      	movs	r1, #36	; 0x24
 800be3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2101      	movs	r1, #1
 800be54:	438a      	bics	r2, r1
 800be56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	08d9      	lsrs	r1, r3, #3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	430a      	orrs	r2, r1
 800be6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	0018      	movs	r0, r3
 800be70:	f000 f854 	bl	800bf1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2288      	movs	r2, #136	; 0x88
 800be80:	2120      	movs	r1, #32
 800be82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2284      	movs	r2, #132	; 0x84
 800be88:	2100      	movs	r1, #0
 800be8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	0018      	movs	r0, r3
 800be90:	46bd      	mov	sp, r7
 800be92:	b004      	add	sp, #16
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2284      	movs	r2, #132	; 0x84
 800bea6:	5c9b      	ldrb	r3, [r3, r2]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d101      	bne.n	800beb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800beac:	2302      	movs	r3, #2
 800beae:	e02f      	b.n	800bf10 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2284      	movs	r2, #132	; 0x84
 800beb4:	2101      	movs	r1, #1
 800beb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2288      	movs	r2, #136	; 0x88
 800bebc:	2124      	movs	r1, #36	; 0x24
 800bebe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2101      	movs	r1, #1
 800bed4:	438a      	bics	r2, r1
 800bed6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	4a0e      	ldr	r2, [pc, #56]	; (800bf18 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	0019      	movs	r1, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	0018      	movs	r0, r3
 800bef2:	f000 f813 	bl	800bf1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2288      	movs	r2, #136	; 0x88
 800bf02:	2120      	movs	r1, #32
 800bf04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2284      	movs	r2, #132	; 0x84
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	0018      	movs	r0, r3
 800bf12:	46bd      	mov	sp, r7
 800bf14:	b004      	add	sp, #16
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	f1ffffff 	.word	0xf1ffffff

0800bf1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d108      	bne.n	800bf3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	226a      	movs	r2, #106	; 0x6a
 800bf30:	2101      	movs	r1, #1
 800bf32:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2268      	movs	r2, #104	; 0x68
 800bf38:	2101      	movs	r1, #1
 800bf3a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf3c:	e043      	b.n	800bfc6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf3e:	260f      	movs	r6, #15
 800bf40:	19bb      	adds	r3, r7, r6
 800bf42:	2208      	movs	r2, #8
 800bf44:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf46:	200e      	movs	r0, #14
 800bf48:	183b      	adds	r3, r7, r0
 800bf4a:	2208      	movs	r2, #8
 800bf4c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	0e5b      	lsrs	r3, r3, #25
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	240d      	movs	r4, #13
 800bf5a:	193b      	adds	r3, r7, r4
 800bf5c:	2107      	movs	r1, #7
 800bf5e:	400a      	ands	r2, r1
 800bf60:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	0f5b      	lsrs	r3, r3, #29
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	250c      	movs	r5, #12
 800bf6e:	197b      	adds	r3, r7, r5
 800bf70:	2107      	movs	r1, #7
 800bf72:	400a      	ands	r2, r1
 800bf74:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf76:	183b      	adds	r3, r7, r0
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	197a      	adds	r2, r7, r5
 800bf7c:	7812      	ldrb	r2, [r2, #0]
 800bf7e:	4914      	ldr	r1, [pc, #80]	; (800bfd0 <UARTEx_SetNbDataToProcess+0xb4>)
 800bf80:	5c8a      	ldrb	r2, [r1, r2]
 800bf82:	435a      	muls	r2, r3
 800bf84:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf86:	197b      	adds	r3, r7, r5
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	4a12      	ldr	r2, [pc, #72]	; (800bfd4 <UARTEx_SetNbDataToProcess+0xb8>)
 800bf8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf8e:	0019      	movs	r1, r3
 800bf90:	f7f4 f966 	bl	8000260 <__divsi3>
 800bf94:	0003      	movs	r3, r0
 800bf96:	b299      	uxth	r1, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	226a      	movs	r2, #106	; 0x6a
 800bf9c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf9e:	19bb      	adds	r3, r7, r6
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	193a      	adds	r2, r7, r4
 800bfa4:	7812      	ldrb	r2, [r2, #0]
 800bfa6:	490a      	ldr	r1, [pc, #40]	; (800bfd0 <UARTEx_SetNbDataToProcess+0xb4>)
 800bfa8:	5c8a      	ldrb	r2, [r1, r2]
 800bfaa:	435a      	muls	r2, r3
 800bfac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800bfae:	193b      	adds	r3, r7, r4
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	4a08      	ldr	r2, [pc, #32]	; (800bfd4 <UARTEx_SetNbDataToProcess+0xb8>)
 800bfb4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfb6:	0019      	movs	r1, r3
 800bfb8:	f7f4 f952 	bl	8000260 <__divsi3>
 800bfbc:	0003      	movs	r3, r0
 800bfbe:	b299      	uxth	r1, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2268      	movs	r2, #104	; 0x68
 800bfc4:	5299      	strh	r1, [r3, r2]
}
 800bfc6:	46c0      	nop			; (mov r8, r8)
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	b005      	add	sp, #20
 800bfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfce:	46c0      	nop			; (mov r8, r8)
 800bfd0:	08018be0 	.word	0x08018be0
 800bfd4:	08018be8 	.word	0x08018be8

0800bfd8 <AT_25_init>:
	else return 0xff;

}

void AT_25_init(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
	uint8_t buffer[1]={0};
 800bfde:	1d3b      	adds	r3, r7, #4
 800bfe0:	4a31      	ldr	r2, [pc, #196]	; (800c0a8 <AT_25_init+0xd0>)
 800bfe2:	7812      	ldrb	r2, [r2, #0]
 800bfe4:	701a      	strb	r2, [r3, #0]
	uint8_t RDY=0x01;
 800bfe6:	1dfb      	adds	r3, r7, #7
 800bfe8:	2201      	movs	r2, #1
 800bfea:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1
 800bfec:	4b2f      	ldr	r3, [pc, #188]	; (800c0ac <AT_25_init+0xd4>)
 800bfee:	2201      	movs	r2, #1
 800bff0:	2101      	movs	r1, #1
 800bff2:	0018      	movs	r0, r3
 800bff4:	f7fb f841 	bl	800707a <HAL_GPIO_WritePin>
	AT25CS_LOW;
 800bff8:	4b2c      	ldr	r3, [pc, #176]	; (800c0ac <AT_25_init+0xd4>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	2108      	movs	r1, #8
 800bffe:	0018      	movs	r0, r3
 800c000:	f7fb f83b 	bl	800707a <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800c004:	1d3b      	adds	r3, r7, #4
 800c006:	2206      	movs	r2, #6
 800c008:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800c00a:	23fa      	movs	r3, #250	; 0xfa
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	1d39      	adds	r1, r7, #4
 800c010:	4827      	ldr	r0, [pc, #156]	; (800c0b0 <AT_25_init+0xd8>)
 800c012:	2201      	movs	r2, #1
 800c014:	f7fb ff40 	bl	8007e98 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800c018:	1d3b      	adds	r3, r7, #4
 800c01a:	2201      	movs	r2, #1
 800c01c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800c01e:	23fa      	movs	r3, #250	; 0xfa
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	1d39      	adds	r1, r7, #4
 800c024:	4822      	ldr	r0, [pc, #136]	; (800c0b0 <AT_25_init+0xd8>)
 800c026:	2201      	movs	r2, #1
 800c028:	f7fb ff36 	bl	8007e98 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800c02c:	1d3b      	adds	r3, r7, #4
 800c02e:	22f2      	movs	r2, #242	; 0xf2
 800c030:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800c032:	23fa      	movs	r3, #250	; 0xfa
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	1d39      	adds	r1, r7, #4
 800c038:	481d      	ldr	r0, [pc, #116]	; (800c0b0 <AT_25_init+0xd8>)
 800c03a:	2201      	movs	r2, #1
 800c03c:	f7fb ff2c 	bl	8007e98 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800c040:	4b1a      	ldr	r3, [pc, #104]	; (800c0ac <AT_25_init+0xd4>)
 800c042:	2201      	movs	r2, #1
 800c044:	2108      	movs	r1, #8
 800c046:	0018      	movs	r0, r3
 800c048:	f7fb f817 	bl	800707a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800c04c:	2001      	movs	r0, #1
 800c04e:	f7f9 f96f 	bl	8005330 <HAL_Delay>
	//wait for AT25 ready
	do
	{
		AT25CS_LOW;
 800c052:	4b16      	ldr	r3, [pc, #88]	; (800c0ac <AT_25_init+0xd4>)
 800c054:	2200      	movs	r2, #0
 800c056:	2108      	movs	r1, #8
 800c058:	0018      	movs	r0, r3
 800c05a:	f7fb f80e 	bl	800707a <HAL_GPIO_WritePin>
		buffer[0]=AT25_RDSR;
 800c05e:	1d3b      	adds	r3, r7, #4
 800c060:	2205      	movs	r2, #5
 800c062:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800c064:	23fa      	movs	r3, #250	; 0xfa
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	1d39      	adds	r1, r7, #4
 800c06a:	4811      	ldr	r0, [pc, #68]	; (800c0b0 <AT_25_init+0xd8>)
 800c06c:	2201      	movs	r2, #1
 800c06e:	f7fb ff13 	bl	8007e98 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1,buffer,1,1000);
 800c072:	23fa      	movs	r3, #250	; 0xfa
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	1d39      	adds	r1, r7, #4
 800c078:	480d      	ldr	r0, [pc, #52]	; (800c0b0 <AT_25_init+0xd8>)
 800c07a:	2201      	movs	r2, #1
 800c07c:	f7fc f864 	bl	8008148 <HAL_SPI_Receive>
		AT25CS_HIGH;
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <AT_25_init+0xd4>)
 800c082:	2201      	movs	r2, #1
 800c084:	2108      	movs	r1, #8
 800c086:	0018      	movs	r0, r3
 800c088:	f7fa fff7 	bl	800707a <HAL_GPIO_WritePin>
		RDY=buffer[0];
 800c08c:	1dfb      	adds	r3, r7, #7
 800c08e:	1d3a      	adds	r2, r7, #4
 800c090:	7812      	ldrb	r2, [r2, #0]
 800c092:	701a      	strb	r2, [r3, #0]
	}
	while((RDY&0x01) == 1);
 800c094:	1dfb      	adds	r3, r7, #7
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	2201      	movs	r2, #1
 800c09a:	4013      	ands	r3, r2
 800c09c:	d1d9      	bne.n	800c052 <AT_25_init+0x7a>


}
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	46c0      	nop			; (mov r8, r8)
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	b002      	add	sp, #8
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	08018760 	.word	0x08018760
 800c0ac:	50000800 	.word	0x50000800
 800c0b0:	200033c8 	.word	0x200033c8

0800c0b4 <SPI_Save_Word_16bits>:
 * @param  data，要存入的数据
 * @param  addr，要存入的地址
 * @retval 无
 */
void SPI_Save_Word_16bits(uint16_t data,uint8_t addr)
{
 800c0b4:	b590      	push	{r4, r7, lr}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	0002      	movs	r2, r0
 800c0bc:	1dbb      	adds	r3, r7, #6
 800c0be:	801a      	strh	r2, [r3, #0]
 800c0c0:	1d7b      	adds	r3, r7, #5
 800c0c2:	1c0a      	adds	r2, r1, #0
 800c0c4:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[1]={0};
 800c0c6:	240c      	movs	r4, #12
 800c0c8:	193b      	adds	r3, r7, r4
 800c0ca:	4a3a      	ldr	r2, [pc, #232]	; (800c1b4 <SPI_Save_Word_16bits+0x100>)
 800c0cc:	7812      	ldrb	r2, [r2, #0]
 800c0ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd off
 800c0d0:	4b39      	ldr	r3, [pc, #228]	; (800c1b8 <SPI_Save_Word_16bits+0x104>)
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	0018      	movs	r0, r3
 800c0d8:	f7fa ffcf 	bl	800707a <HAL_GPIO_WritePin>
	/*AT25 config*/
	AT25CS_LOW;
 800c0dc:	4b36      	ldr	r3, [pc, #216]	; (800c1b8 <SPI_Save_Word_16bits+0x104>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2108      	movs	r1, #8
 800c0e2:	0018      	movs	r0, r3
 800c0e4:	f7fa ffc9 	bl	800707a <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800c0e8:	193b      	adds	r3, r7, r4
 800c0ea:	2206      	movs	r2, #6
 800c0ec:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800c0ee:	23fa      	movs	r3, #250	; 0xfa
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	1939      	adds	r1, r7, r4
 800c0f4:	4831      	ldr	r0, [pc, #196]	; (800c1bc <SPI_Save_Word_16bits+0x108>)
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f7fb fece 	bl	8007e98 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800c0fc:	193b      	adds	r3, r7, r4
 800c0fe:	2201      	movs	r2, #1
 800c100:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800c102:	23fa      	movs	r3, #250	; 0xfa
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	1939      	adds	r1, r7, r4
 800c108:	482c      	ldr	r0, [pc, #176]	; (800c1bc <SPI_Save_Word_16bits+0x108>)
 800c10a:	2201      	movs	r2, #1
 800c10c:	f7fb fec4 	bl	8007e98 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800c110:	193b      	adds	r3, r7, r4
 800c112:	22f2      	movs	r2, #242	; 0xf2
 800c114:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800c116:	23fa      	movs	r3, #250	; 0xfa
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	1939      	adds	r1, r7, r4
 800c11c:	4827      	ldr	r0, [pc, #156]	; (800c1bc <SPI_Save_Word_16bits+0x108>)
 800c11e:	2201      	movs	r2, #1
 800c120:	f7fb feba 	bl	8007e98 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800c124:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <SPI_Save_Word_16bits+0x104>)
 800c126:	2201      	movs	r2, #1
 800c128:	2108      	movs	r1, #8
 800c12a:	0018      	movs	r0, r3
 800c12c:	f7fa ffa5 	bl	800707a <HAL_GPIO_WritePin>

	/*16bits data send*/
	AT25CS_LOW;
 800c130:	4b21      	ldr	r3, [pc, #132]	; (800c1b8 <SPI_Save_Word_16bits+0x104>)
 800c132:	2200      	movs	r2, #0
 800c134:	2108      	movs	r1, #8
 800c136:	0018      	movs	r0, r3
 800c138:	f7fa ff9f 	bl	800707a <HAL_GPIO_WritePin>
	buffer[0]=AT25_Write;
 800c13c:	193b      	adds	r3, r7, r4
 800c13e:	2202      	movs	r2, #2
 800c140:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd:write status register
 800c142:	23fa      	movs	r3, #250	; 0xfa
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	1939      	adds	r1, r7, r4
 800c148:	481c      	ldr	r0, [pc, #112]	; (800c1bc <SPI_Save_Word_16bits+0x108>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	f7fb fea4 	bl	8007e98 <HAL_SPI_Transmit>

	buffer[0]=addr;
 800c150:	193b      	adds	r3, r7, r4
 800c152:	1d7a      	adds	r2, r7, #5
 800c154:	7812      	ldrb	r2, [r2, #0]
 800c156:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//adress
 800c158:	23fa      	movs	r3, #250	; 0xfa
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	1939      	adds	r1, r7, r4
 800c15e:	4817      	ldr	r0, [pc, #92]	; (800c1bc <SPI_Save_Word_16bits+0x108>)
 800c160:	2201      	movs	r2, #1
 800c162:	f7fb fe99 	bl	8007e98 <HAL_SPI_Transmit>

	buffer[0]=(data>>8);
 800c166:	1dbb      	adds	r3, r7, #6
 800c168:	881b      	ldrh	r3, [r3, #0]
 800c16a:	0a1b      	lsrs	r3, r3, #8
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	193b      	adds	r3, r7, r4
 800c172:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data high
 800c174:	23fa      	movs	r3, #250	; 0xfa
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	1939      	adds	r1, r7, r4
 800c17a:	4810      	ldr	r0, [pc, #64]	; (800c1bc <SPI_Save_Word_16bits+0x108>)
 800c17c:	2201      	movs	r2, #1
 800c17e:	f7fb fe8b 	bl	8007e98 <HAL_SPI_Transmit>

	buffer[0]=data;
 800c182:	1dbb      	adds	r3, r7, #6
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	b2da      	uxtb	r2, r3
 800c188:	193b      	adds	r3, r7, r4
 800c18a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data low
 800c18c:	23fa      	movs	r3, #250	; 0xfa
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	1939      	adds	r1, r7, r4
 800c192:	480a      	ldr	r0, [pc, #40]	; (800c1bc <SPI_Save_Word_16bits+0x108>)
 800c194:	2201      	movs	r2, #1
 800c196:	f7fb fe7f 	bl	8007e98 <HAL_SPI_Transmit>
	AT25CS_HIGH;
 800c19a:	4b07      	ldr	r3, [pc, #28]	; (800c1b8 <SPI_Save_Word_16bits+0x104>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	2108      	movs	r1, #8
 800c1a0:	0018      	movs	r0, r3
 800c1a2:	f7fa ff6a 	bl	800707a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800c1a6:	2001      	movs	r0, #1
 800c1a8:	f7f9 f8c2 	bl	8005330 <HAL_Delay>
}
 800c1ac:	46c0      	nop			; (mov r8, r8)
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	b005      	add	sp, #20
 800c1b2:	bd90      	pop	{r4, r7, pc}
 800c1b4:	08018760 	.word	0x08018760
 800c1b8:	50000800 	.word	0x50000800
 800c1bc:	200033c8 	.word	0x200033c8

0800c1c0 <SPI_Load_Word_16bits>:
 * @brief  从at25取出一个长度16bits的数据
 * @param  addr，要取数据的地址
 * @retval 无
 */
uint16_t SPI_Load_Word_16bits(uint8_t addr)
{
 800c1c0:	b5b0      	push	{r4, r5, r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	0002      	movs	r2, r0
 800c1c8:	1dfb      	adds	r3, r7, #7
 800c1ca:	701a      	strb	r2, [r3, #0]

	uint16_t tmp=0x00;
 800c1cc:	250e      	movs	r5, #14
 800c1ce:	197b      	adds	r3, r7, r5
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	801a      	strh	r2, [r3, #0]

	uint8_t buffer[1];
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1 off
 800c1d4:	4b2e      	ldr	r3, [pc, #184]	; (800c290 <SPI_Load_Word_16bits+0xd0>)
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	2101      	movs	r1, #1
 800c1da:	0018      	movs	r0, r3
 800c1dc:	f7fa ff4d 	bl	800707a <HAL_GPIO_WritePin>

	/*load word 8bits*/
	AT25CS_LOW;
 800c1e0:	4b2b      	ldr	r3, [pc, #172]	; (800c290 <SPI_Load_Word_16bits+0xd0>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2108      	movs	r1, #8
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f7fa ff47 	bl	800707a <HAL_GPIO_WritePin>
	buffer[0]=AT25_Read;
 800c1ec:	200c      	movs	r0, #12
 800c1ee:	183b      	adds	r3, r7, r0
 800c1f0:	2203      	movs	r2, #3
 800c1f2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd
 800c1f4:	23fa      	movs	r3, #250	; 0xfa
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	0004      	movs	r4, r0
 800c1fa:	1839      	adds	r1, r7, r0
 800c1fc:	4825      	ldr	r0, [pc, #148]	; (800c294 <SPI_Load_Word_16bits+0xd4>)
 800c1fe:	2201      	movs	r2, #1
 800c200:	f7fb fe4a 	bl	8007e98 <HAL_SPI_Transmit>
	buffer[0]=addr;
 800c204:	0020      	movs	r0, r4
 800c206:	183b      	adds	r3, r7, r0
 800c208:	1dfa      	adds	r2, r7, #7
 800c20a:	7812      	ldrb	r2, [r2, #0]
 800c20c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//address
 800c20e:	23fa      	movs	r3, #250	; 0xfa
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	0004      	movs	r4, r0
 800c214:	1839      	adds	r1, r7, r0
 800c216:	481f      	ldr	r0, [pc, #124]	; (800c294 <SPI_Load_Word_16bits+0xd4>)
 800c218:	2201      	movs	r2, #1
 800c21a:	f7fb fe3d 	bl	8007e98 <HAL_SPI_Transmit>
	buffer[0]=0x00;//clear the buffer
 800c21e:	0020      	movs	r0, r4
 800c220:	183b      	adds	r3, r7, r0
 800c222:	2200      	movs	r2, #0
 800c224:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c226:	23fa      	movs	r3, #250	; 0xfa
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	0004      	movs	r4, r0
 800c22c:	1839      	adds	r1, r7, r0
 800c22e:	4819      	ldr	r0, [pc, #100]	; (800c294 <SPI_Load_Word_16bits+0xd4>)
 800c230:	2201      	movs	r2, #1
 800c232:	f7fb ff89 	bl	8008148 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c236:	0020      	movs	r0, r4
 800c238:	183b      	adds	r3, r7, r0
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b299      	uxth	r1, r3
 800c23e:	197b      	adds	r3, r7, r5
 800c240:	197a      	adds	r2, r7, r5
 800c242:	8812      	ldrh	r2, [r2, #0]
 800c244:	430a      	orrs	r2, r1
 800c246:	801a      	strh	r2, [r3, #0]
	tmp<<=8;
 800c248:	197b      	adds	r3, r7, r5
 800c24a:	197a      	adds	r2, r7, r5
 800c24c:	8812      	ldrh	r2, [r2, #0]
 800c24e:	0212      	lsls	r2, r2, #8
 800c250:	801a      	strh	r2, [r3, #0]
	buffer[0]=0x00;//clear the buffer
 800c252:	183b      	adds	r3, r7, r0
 800c254:	2200      	movs	r2, #0
 800c256:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c258:	23fa      	movs	r3, #250	; 0xfa
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	0004      	movs	r4, r0
 800c25e:	1839      	adds	r1, r7, r0
 800c260:	480c      	ldr	r0, [pc, #48]	; (800c294 <SPI_Load_Word_16bits+0xd4>)
 800c262:	2201      	movs	r2, #1
 800c264:	f7fb ff70 	bl	8008148 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c268:	193b      	adds	r3, r7, r4
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	b299      	uxth	r1, r3
 800c26e:	197b      	adds	r3, r7, r5
 800c270:	197a      	adds	r2, r7, r5
 800c272:	8812      	ldrh	r2, [r2, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	801a      	strh	r2, [r3, #0]
	AT25CS_HIGH;
 800c278:	4b05      	ldr	r3, [pc, #20]	; (800c290 <SPI_Load_Word_16bits+0xd0>)
 800c27a:	2201      	movs	r2, #1
 800c27c:	2108      	movs	r1, #8
 800c27e:	0018      	movs	r0, r3
 800c280:	f7fa fefb 	bl	800707a <HAL_GPIO_WritePin>

	return tmp;
 800c284:	197b      	adds	r3, r7, r5
 800c286:	881b      	ldrh	r3, [r3, #0]
}
 800c288:	0018      	movs	r0, r3
 800c28a:	46bd      	mov	sp, r7
 800c28c:	b004      	add	sp, #16
 800c28e:	bdb0      	pop	{r4, r5, r7, pc}
 800c290:	50000800 	.word	0x50000800
 800c294:	200033c8 	.word	0x200033c8

0800c298 <SPI_AT25_Write>:
 * @param  WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度，必须小于等于SPI_FLASH_PerWritePageSize
 * @retval 无
 */
void SPI_AT25_Write(uint16_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	0008      	movs	r0, r1
 800c2a2:	0011      	movs	r1, r2
 800c2a4:	1cfb      	adds	r3, r7, #3
 800c2a6:	1c02      	adds	r2, r0, #0
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	003b      	movs	r3, r7
 800c2ac:	1c0a      	adds	r2, r1, #0
 800c2ae:	801a      	strh	r2, [r3, #0]
	NumByteToWrite = NumByteToWrite/2;
 800c2b0:	003b      	movs	r3, r7
 800c2b2:	003a      	movs	r2, r7
 800c2b4:	8812      	ldrh	r2, [r2, #0]
 800c2b6:	0852      	lsrs	r2, r2, #1
 800c2b8:	801a      	strh	r2, [r3, #0]

	 while (NumByteToWrite > 0)
 800c2ba:	e013      	b.n	800c2e4 <SPI_AT25_Write+0x4c>
	 {
			SPI_Save_Word_16bits(*pBuffer++, WriteAddr);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	1c9a      	adds	r2, r3, #2
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	881a      	ldrh	r2, [r3, #0]
 800c2c4:	1cfb      	adds	r3, r7, #3
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	0019      	movs	r1, r3
 800c2ca:	0010      	movs	r0, r2
 800c2cc:	f7ff fef2 	bl	800c0b4 <SPI_Save_Word_16bits>
			NumByteToWrite --;
 800c2d0:	003b      	movs	r3, r7
 800c2d2:	881a      	ldrh	r2, [r3, #0]
 800c2d4:	003b      	movs	r3, r7
 800c2d6:	3a01      	subs	r2, #1
 800c2d8:	801a      	strh	r2, [r3, #0]
			WriteAddr+=2;
 800c2da:	1cfb      	adds	r3, r7, #3
 800c2dc:	1cfa      	adds	r2, r7, #3
 800c2de:	7812      	ldrb	r2, [r2, #0]
 800c2e0:	3202      	adds	r2, #2
 800c2e2:	701a      	strb	r2, [r3, #0]
	 while (NumByteToWrite > 0)
 800c2e4:	003b      	movs	r3, r7
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e7      	bne.n	800c2bc <SPI_AT25_Write+0x24>
	 }
}
 800c2ec:	46c0      	nop			; (mov r8, r8)
 800c2ee:	46c0      	nop			; (mov r8, r8)
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	b002      	add	sp, #8
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <SPI_AT25_Read>:
 * @param   ReadAddr，读取地址
 * @param   NumByteToRead，读取数据长度
 * @retval  无
 */
void SPI_AT25_Read(uint16_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800c2f6:	b590      	push	{r4, r7, lr}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	0008      	movs	r0, r1
 800c300:	0011      	movs	r1, r2
 800c302:	1cfb      	adds	r3, r7, #3
 800c304:	1c02      	adds	r2, r0, #0
 800c306:	701a      	strb	r2, [r3, #0]
 800c308:	003b      	movs	r3, r7
 800c30a:	1c0a      	adds	r2, r1, #0
 800c30c:	801a      	strh	r2, [r3, #0]
	NumByteToRead = NumByteToRead/2;
 800c30e:	003b      	movs	r3, r7
 800c310:	003a      	movs	r2, r7
 800c312:	8812      	ldrh	r2, [r2, #0]
 800c314:	0852      	lsrs	r2, r2, #1
 800c316:	801a      	strh	r2, [r3, #0]

	/* 读取数据 */
 while (NumByteToRead > 0) /* while there is data to be read */
 800c318:	e013      	b.n	800c342 <SPI_AT25_Read+0x4c>
 {
		*pBuffer++ = SPI_Load_Word_16bits(ReadAddr);
 800c31a:	687c      	ldr	r4, [r7, #4]
 800c31c:	1ca3      	adds	r3, r4, #2
 800c31e:	607b      	str	r3, [r7, #4]
 800c320:	1cfb      	adds	r3, r7, #3
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	0018      	movs	r0, r3
 800c326:	f7ff ff4b 	bl	800c1c0 <SPI_Load_Word_16bits>
 800c32a:	0003      	movs	r3, r0
 800c32c:	8023      	strh	r3, [r4, #0]
		NumByteToRead--;
 800c32e:	003b      	movs	r3, r7
 800c330:	881a      	ldrh	r2, [r3, #0]
 800c332:	003b      	movs	r3, r7
 800c334:	3a01      	subs	r2, #1
 800c336:	801a      	strh	r2, [r3, #0]
		ReadAddr = ReadAddr + 2;
 800c338:	1cfb      	adds	r3, r7, #3
 800c33a:	1cfa      	adds	r2, r7, #3
 800c33c:	7812      	ldrb	r2, [r2, #0]
 800c33e:	3202      	adds	r2, #2
 800c340:	701a      	strb	r2, [r3, #0]
 while (NumByteToRead > 0) /* while there is data to be read */
 800c342:	003b      	movs	r3, r7
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1e7      	bne.n	800c31a <SPI_AT25_Read+0x24>
 }


}
 800c34a:	46c0      	nop			; (mov r8, r8)
 800c34c:	46c0      	nop			; (mov r8, r8)
 800c34e:	46bd      	mov	sp, r7
 800c350:	b003      	add	sp, #12
 800c352:	bd90      	pop	{r4, r7, pc}

0800c354 <AT25_Save_VISet>:
 * @brief  对AT25写入电流电压设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_VISet(void)
{
 800c354:	b5b0      	push	{r4, r5, r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
	uint16_t temp[3];
	float Power=(Set_Voltage/100.0)*(Set_Current/100.0);
 800c35a:	4b1e      	ldr	r3, [pc, #120]	; (800c3d4 <AT25_Save_VISet+0x80>)
 800c35c:	881b      	ldrh	r3, [r3, #0]
 800c35e:	0018      	movs	r0, r3
 800c360:	f7f6 fd50 	bl	8002e04 <__aeabi_i2d>
 800c364:	2200      	movs	r2, #0
 800c366:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <AT25_Save_VISet+0x84>)
 800c368:	f7f5 faf8 	bl	800195c <__aeabi_ddiv>
 800c36c:	0002      	movs	r2, r0
 800c36e:	000b      	movs	r3, r1
 800c370:	0014      	movs	r4, r2
 800c372:	001d      	movs	r5, r3
 800c374:	4b19      	ldr	r3, [pc, #100]	; (800c3dc <AT25_Save_VISet+0x88>)
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	0018      	movs	r0, r3
 800c37a:	f7f6 fd43 	bl	8002e04 <__aeabi_i2d>
 800c37e:	2200      	movs	r2, #0
 800c380:	4b15      	ldr	r3, [pc, #84]	; (800c3d8 <AT25_Save_VISet+0x84>)
 800c382:	f7f5 faeb 	bl	800195c <__aeabi_ddiv>
 800c386:	0002      	movs	r2, r0
 800c388:	000b      	movs	r3, r1
 800c38a:	0020      	movs	r0, r4
 800c38c:	0029      	movs	r1, r5
 800c38e:	f7f5 fee7 	bl	8002160 <__aeabi_dmul>
 800c392:	0002      	movs	r2, r0
 800c394:	000b      	movs	r3, r1
 800c396:	0010      	movs	r0, r2
 800c398:	0019      	movs	r1, r3
 800c39a:	f7f6 fdd1 	bl	8002f40 <__aeabi_d2f>
 800c39e:	1c03      	adds	r3, r0, #0
 800c3a0:	60fb      	str	r3, [r7, #12]
	//将设定值强制类型转换成uint16_t
	temp[0] = (uint16_t) Set_Voltage;
 800c3a2:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <AT25_Save_VISet+0x80>)
 800c3a4:	881a      	ldrh	r2, [r3, #0]
 800c3a6:	1d3b      	adds	r3, r7, #4
 800c3a8:	801a      	strh	r2, [r3, #0]
	temp[1] = (uint16_t) Set_Current;
 800c3aa:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <AT25_Save_VISet+0x88>)
 800c3ac:	881a      	ldrh	r2, [r3, #0]
 800c3ae:	1d3b      	adds	r3, r7, #4
 800c3b0:	805a      	strh	r2, [r3, #2]
	temp[2] = (uint16_t) Power;
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f7f4 f8b8 	bl	8000528 <__aeabi_f2uiz>
 800c3b8:	0003      	movs	r3, r0
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	1d3b      	adds	r3, r7, #4
 800c3be:	809a      	strh	r2, [r3, #4]

	SPI_AT25_Write(temp, 0, sizeof(temp));
 800c3c0:	1d3b      	adds	r3, r7, #4
 800c3c2:	2206      	movs	r2, #6
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	f7ff ff66 	bl	800c298 <SPI_AT25_Write>
}
 800c3cc:	46c0      	nop			; (mov r8, r8)
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	b004      	add	sp, #16
 800c3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c3d4:	20002fd8 	.word	0x20002fd8
 800c3d8:	40590000 	.word	0x40590000
 800c3dc:	20002fda 	.word	0x20002fda

0800c3e0 <AT25_Save_Recall_Save_VI>:
 * @brief  对AT25写入设定的电流电压值
 * @param	Recall_Save的编号
 * @retval 无
 */
void AT25_Save_Recall_Save_VI(uint8_t Number)
{
 800c3e0:	b590      	push	{r4, r7, lr}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	0002      	movs	r2, r0
 800c3e8:	1dfb      	adds	r3, r7, #7
 800c3ea:	701a      	strb	r2, [r3, #0]
	uint16_t temp;
	//将设定值强制类型转换成uint16_t(保留两位小数)
	temp = (uint16_t) (Recall_Save_Voltage[Number] * 100.0);//保留两位小数
 800c3ec:	1dfb      	adds	r3, r7, #7
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	4b2d      	ldr	r3, [pc, #180]	; (800c4a8 <AT25_Save_Recall_Save_VI+0xc8>)
 800c3f2:	0092      	lsls	r2, r2, #2
 800c3f4:	58d3      	ldr	r3, [r2, r3]
 800c3f6:	1c18      	adds	r0, r3, #0
 800c3f8:	f7f6 fd5a 	bl	8002eb0 <__aeabi_f2d>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4b2b      	ldr	r3, [pc, #172]	; (800c4ac <AT25_Save_Recall_Save_VI+0xcc>)
 800c400:	f7f5 feae 	bl	8002160 <__aeabi_dmul>
 800c404:	0002      	movs	r2, r0
 800c406:	000b      	movs	r3, r1
 800c408:	0010      	movs	r0, r2
 800c40a:	0019      	movs	r1, r3
 800c40c:	f7f4 f8a4 	bl	8000558 <__aeabi_d2uiz>
 800c410:	0003      	movs	r3, r0
 800c412:	b29a      	uxth	r2, r3
 800c414:	240e      	movs	r4, #14
 800c416:	193b      	adds	r3, r7, r4
 800c418:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 6+2*Number,sizeof(temp));//6 7、8 9...24、25
 800c41a:	1dfb      	adds	r3, r7, #7
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	3303      	adds	r3, #3
 800c420:	b2db      	uxtb	r3, r3
 800c422:	18db      	adds	r3, r3, r3
 800c424:	b2d9      	uxtb	r1, r3
 800c426:	193b      	adds	r3, r7, r4
 800c428:	2202      	movs	r2, #2
 800c42a:	0018      	movs	r0, r3
 800c42c:	f7ff ff34 	bl	800c298 <SPI_AT25_Write>

	temp = (uint16_t) (Recall_Save_Current[Number] * 100.0);
 800c430:	1dfb      	adds	r3, r7, #7
 800c432:	781a      	ldrb	r2, [r3, #0]
 800c434:	4b1e      	ldr	r3, [pc, #120]	; (800c4b0 <AT25_Save_Recall_Save_VI+0xd0>)
 800c436:	0092      	lsls	r2, r2, #2
 800c438:	58d3      	ldr	r3, [r2, r3]
 800c43a:	1c18      	adds	r0, r3, #0
 800c43c:	f7f6 fd38 	bl	8002eb0 <__aeabi_f2d>
 800c440:	2200      	movs	r2, #0
 800c442:	4b1a      	ldr	r3, [pc, #104]	; (800c4ac <AT25_Save_Recall_Save_VI+0xcc>)
 800c444:	f7f5 fe8c 	bl	8002160 <__aeabi_dmul>
 800c448:	0002      	movs	r2, r0
 800c44a:	000b      	movs	r3, r1
 800c44c:	0010      	movs	r0, r2
 800c44e:	0019      	movs	r1, r3
 800c450:	f7f4 f882 	bl	8000558 <__aeabi_d2uiz>
 800c454:	0003      	movs	r3, r0
 800c456:	b29a      	uxth	r2, r3
 800c458:	193b      	adds	r3, r7, r4
 800c45a:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 26+2*Number,sizeof(temp));//26 27、28 29...44、45
 800c45c:	1dfb      	adds	r3, r7, #7
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	330d      	adds	r3, #13
 800c462:	b2db      	uxtb	r3, r3
 800c464:	18db      	adds	r3, r3, r3
 800c466:	b2d9      	uxtb	r1, r3
 800c468:	193b      	adds	r3, r7, r4
 800c46a:	2202      	movs	r2, #2
 800c46c:	0018      	movs	r0, r3
 800c46e:	f7ff ff13 	bl	800c298 <SPI_AT25_Write>

	temp=Recall_Save_Power[Number];//W
 800c472:	1dfb      	adds	r3, r7, #7
 800c474:	781a      	ldrb	r2, [r3, #0]
 800c476:	4b0f      	ldr	r3, [pc, #60]	; (800c4b4 <AT25_Save_Recall_Save_VI+0xd4>)
 800c478:	0092      	lsls	r2, r2, #2
 800c47a:	58d3      	ldr	r3, [r2, r3]
 800c47c:	1c18      	adds	r0, r3, #0
 800c47e:	f7f4 f853 	bl	8000528 <__aeabi_f2uiz>
 800c482:	0003      	movs	r3, r0
 800c484:	b29a      	uxth	r2, r3
 800c486:	193b      	adds	r3, r7, r4
 800c488:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 46+2*Number,sizeof(temp));//46、47...64、65
 800c48a:	1dfb      	adds	r3, r7, #7
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	3317      	adds	r3, #23
 800c490:	b2db      	uxtb	r3, r3
 800c492:	18db      	adds	r3, r3, r3
 800c494:	b2d9      	uxtb	r1, r3
 800c496:	193b      	adds	r3, r7, r4
 800c498:	2202      	movs	r2, #2
 800c49a:	0018      	movs	r0, r3
 800c49c:	f7ff fefc 	bl	800c298 <SPI_AT25_Write>

}
 800c4a0:	46c0      	nop			; (mov r8, r8)
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b005      	add	sp, #20
 800c4a6:	bd90      	pop	{r4, r7, pc}
 800c4a8:	20003ba4 	.word	0x20003ba4
 800c4ac:	40590000 	.word	0x40590000
 800c4b0:	20003bcc 	.word	0x20003bcc
 800c4b4:	20003bf4 	.word	0x20003bf4

0800c4b8 <AT25_Save_Recall_Recall_VI>:



uint16_t AT25_Save_Recall_Recall_VI(uint8_t Number)
{
 800c4b8:	b590      	push	{r4, r7, lr}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	0002      	movs	r2, r0
 800c4c0:	1dfb      	adds	r3, r7, #7
 800c4c2:	701a      	strb	r2, [r3, #0]

	uint16_t temp;
	if(xyz.coordinates3==1)//V
 800c4c4:	4b1b      	ldr	r3, [pc, #108]	; (800c534 <AT25_Save_Recall_Recall_VI+0x7c>)
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d10e      	bne.n	800c4ea <AT25_Save_Recall_Recall_VI+0x32>
	{
		SPI_AT25_Read(&temp,6+2*Number,2);
 800c4cc:	1dfb      	adds	r3, r7, #7
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	3303      	adds	r3, #3
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	18db      	adds	r3, r3, r3
 800c4d6:	b2d9      	uxtb	r1, r3
 800c4d8:	240e      	movs	r4, #14
 800c4da:	193b      	adds	r3, r7, r4
 800c4dc:	2202      	movs	r2, #2
 800c4de:	0018      	movs	r0, r3
 800c4e0:	f7ff ff09 	bl	800c2f6 <SPI_AT25_Read>

		return temp;
 800c4e4:	193b      	adds	r3, r7, r4
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	e020      	b.n	800c52c <AT25_Save_Recall_Recall_VI+0x74>
	}
	else if(xyz.coordinates3==2)//I
 800c4ea:	4b12      	ldr	r3, [pc, #72]	; (800c534 <AT25_Save_Recall_Recall_VI+0x7c>)
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d10e      	bne.n	800c510 <AT25_Save_Recall_Recall_VI+0x58>
	{
		SPI_AT25_Read(&temp,26+2*Number,2);
 800c4f2:	1dfb      	adds	r3, r7, #7
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	330d      	adds	r3, #13
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	18db      	adds	r3, r3, r3
 800c4fc:	b2d9      	uxtb	r1, r3
 800c4fe:	240e      	movs	r4, #14
 800c500:	193b      	adds	r3, r7, r4
 800c502:	2202      	movs	r2, #2
 800c504:	0018      	movs	r0, r3
 800c506:	f7ff fef6 	bl	800c2f6 <SPI_AT25_Read>

		return temp;
 800c50a:	193b      	adds	r3, r7, r4
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	e00d      	b.n	800c52c <AT25_Save_Recall_Recall_VI+0x74>
	}

	SPI_AT25_Read(&temp,46+2*Number,2);//P
 800c510:	1dfb      	adds	r3, r7, #7
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	3317      	adds	r3, #23
 800c516:	b2db      	uxtb	r3, r3
 800c518:	18db      	adds	r3, r3, r3
 800c51a:	b2d9      	uxtb	r1, r3
 800c51c:	240e      	movs	r4, #14
 800c51e:	193b      	adds	r3, r7, r4
 800c520:	2202      	movs	r2, #2
 800c522:	0018      	movs	r0, r3
 800c524:	f7ff fee7 	bl	800c2f6 <SPI_AT25_Read>
	return temp;
 800c528:	193b      	adds	r3, r7, r4
 800c52a:	881b      	ldrh	r3, [r3, #0]


}
 800c52c:	0018      	movs	r0, r3
 800c52e:	46bd      	mov	sp, r7
 800c530:	b005      	add	sp, #20
 800c532:	bd90      	pop	{r4, r7, pc}
 800c534:	20003b8c 	.word	0x20003b8c

0800c538 <AT25_Save_Delay>:
 * @brief  对AT25写入延时时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Delay(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
	uint16_t temp[2];

	temp[0] = Delay_s;
 800c53e:	4b09      	ldr	r3, [pc, #36]	; (800c564 <AT25_Save_Delay+0x2c>)
 800c540:	881a      	ldrh	r2, [r3, #0]
 800c542:	1d3b      	adds	r3, r7, #4
 800c544:	801a      	strh	r2, [r3, #0]
	temp[1] = Delay_ms;
 800c546:	4b08      	ldr	r3, [pc, #32]	; (800c568 <AT25_Save_Delay+0x30>)
 800c548:	881a      	ldrh	r2, [r3, #0]
 800c54a:	1d3b      	adds	r3, r7, #4
 800c54c:	805a      	strh	r2, [r3, #2]


	SPI_AT25_Write((uint16_t*)temp, 78, sizeof(temp));
 800c54e:	1d3b      	adds	r3, r7, #4
 800c550:	2204      	movs	r2, #4
 800c552:	214e      	movs	r1, #78	; 0x4e
 800c554:	0018      	movs	r0, r3
 800c556:	f7ff fe9f 	bl	800c298 <SPI_AT25_Write>
}
 800c55a:	46c0      	nop			; (mov r8, r8)
 800c55c:	46bd      	mov	sp, r7
 800c55e:	b002      	add	sp, #8
 800c560:	bd80      	pop	{r7, pc}
 800c562:	46c0      	nop			; (mov r8, r8)
 800c564:	20003b28 	.word	0x20003b28
 800c568:	20003b2a 	.word	0x20003b2a

0800c56c <AT25_Save_Cycle>:
 * @brief  对AT25写入循环时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Cycle(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
	uint16_t temp[4];

	temp[0] = Cycle_On_s;
 800c572:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <AT25_Save_Cycle+0x3c>)
 800c574:	881a      	ldrh	r2, [r3, #0]
 800c576:	003b      	movs	r3, r7
 800c578:	801a      	strh	r2, [r3, #0]
	temp[1] = Cycle_On_ms;
 800c57a:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <AT25_Save_Cycle+0x40>)
 800c57c:	881a      	ldrh	r2, [r3, #0]
 800c57e:	003b      	movs	r3, r7
 800c580:	805a      	strh	r2, [r3, #2]
	temp[2] = Cycle_Close_s;
 800c582:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <AT25_Save_Cycle+0x44>)
 800c584:	881a      	ldrh	r2, [r3, #0]
 800c586:	003b      	movs	r3, r7
 800c588:	809a      	strh	r2, [r3, #4]
	temp[3] = Cycle_Close_ms;
 800c58a:	4b0a      	ldr	r3, [pc, #40]	; (800c5b4 <AT25_Save_Cycle+0x48>)
 800c58c:	881a      	ldrh	r2, [r3, #0]
 800c58e:	003b      	movs	r3, r7
 800c590:	80da      	strh	r2, [r3, #6]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c592:	003b      	movs	r3, r7
 800c594:	2208      	movs	r2, #8
 800c596:	2152      	movs	r1, #82	; 0x52
 800c598:	0018      	movs	r0, r3
 800c59a:	f7ff fe7d 	bl	800c298 <SPI_AT25_Write>

}
 800c59e:	46c0      	nop			; (mov r8, r8)
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	b002      	add	sp, #8
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	46c0      	nop			; (mov r8, r8)
 800c5a8:	20003b24 	.word	0x20003b24
 800c5ac:	20002fd4 	.word	0x20002fd4
 800c5b0:	20003b26 	.word	0x20003b26
 800c5b4:	20002fd6 	.word	0x20002fd6

0800c5b8 <AT25_Save_CC_CV_CP>:
 * @brief  对AT25写入CC_CV_CP设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_CC_CV_CP(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
	uint8_t temp[2];

	temp[0] = CV_CC_CP;
 800c5be:	4b08      	ldr	r3, [pc, #32]	; (800c5e0 <AT25_Save_CC_CV_CP+0x28>)
 800c5c0:	781a      	ldrb	r2, [r3, #0]
 800c5c2:	1d3b      	adds	r3, r7, #4
 800c5c4:	701a      	strb	r2, [r3, #0]
	temp[1] = 0x00;
 800c5c6:	1d3b      	adds	r3, r7, #4
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write((uint16_t*)temp, 80, sizeof(temp));
 800c5cc:	1d3b      	adds	r3, r7, #4
 800c5ce:	2202      	movs	r2, #2
 800c5d0:	2150      	movs	r1, #80	; 0x50
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	f7ff fe60 	bl	800c298 <SPI_AT25_Write>
}
 800c5d8:	46c0      	nop			; (mov r8, r8)
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	b002      	add	sp, #8
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20003b1e 	.word	0x20003b1e

0800c5e4 <AT25_Save_VI_Rate>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_VI_Rate(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
	uint16_t temp[2];

	temp[0] = Set_V_Slope;
 800c5ea:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <AT25_Save_VI_Rate+0x30>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	1d3b      	adds	r3, r7, #4
 800c5f2:	801a      	strh	r2, [r3, #0]
	temp[1] = Set_I_Slope;
 800c5f4:	4b08      	ldr	r3, [pc, #32]	; (800c618 <AT25_Save_VI_Rate+0x34>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	1d3b      	adds	r3, r7, #4
 800c5fc:	805a      	strh	r2, [r3, #2]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c5fe:	1d3b      	adds	r3, r7, #4
 800c600:	2204      	movs	r2, #4
 800c602:	2152      	movs	r1, #82	; 0x52
 800c604:	0018      	movs	r0, r3
 800c606:	f7ff fe47 	bl	800c298 <SPI_AT25_Write>

}
 800c60a:	46c0      	nop			; (mov r8, r8)
 800c60c:	46bd      	mov	sp, r7
 800c60e:	b002      	add	sp, #8
 800c610:	bd80      	pop	{r7, pc}
 800c612:	46c0      	nop			; (mov r8, r8)
 800c614:	20003b2c 	.word	0x20003b2c
 800c618:	20003b2d 	.word	0x20003b2d

0800c61c <AT25_Save_AD_Param>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_AD_Param(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
	uint16_t temp[5];

	temp[0] = ADC_Gain_V*1000000;
 800c622:	4b2b      	ldr	r3, [pc, #172]	; (800c6d0 <AT25_Save_AD_Param+0xb4>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	492b      	ldr	r1, [pc, #172]	; (800c6d4 <AT25_Save_AD_Param+0xb8>)
 800c628:	1c18      	adds	r0, r3, #0
 800c62a:	f7f4 fb19 	bl	8000c60 <__aeabi_fmul>
 800c62e:	1c03      	adds	r3, r0, #0
 800c630:	1c18      	adds	r0, r3, #0
 800c632:	f7f3 ff79 	bl	8000528 <__aeabi_f2uiz>
 800c636:	0003      	movs	r3, r0
 800c638:	b29a      	uxth	r2, r3
 800c63a:	1d3b      	adds	r3, r7, #4
 800c63c:	801a      	strh	r2, [r3, #0]
	temp[1] = ADC_Gain_I*1000000;
 800c63e:	4b26      	ldr	r3, [pc, #152]	; (800c6d8 <AT25_Save_AD_Param+0xbc>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4924      	ldr	r1, [pc, #144]	; (800c6d4 <AT25_Save_AD_Param+0xb8>)
 800c644:	1c18      	adds	r0, r3, #0
 800c646:	f7f4 fb0b 	bl	8000c60 <__aeabi_fmul>
 800c64a:	1c03      	adds	r3, r0, #0
 800c64c:	1c18      	adds	r0, r3, #0
 800c64e:	f7f3 ff6b 	bl	8000528 <__aeabi_f2uiz>
 800c652:	0003      	movs	r3, r0
 800c654:	b29a      	uxth	r2, r3
 800c656:	1d3b      	adds	r3, r7, #4
 800c658:	805a      	strh	r2, [r3, #2]
	/*test*/
	temp[2] = (-1*Eror_ADC_V)*10000;
 800c65a:	4b20      	ldr	r3, [pc, #128]	; (800c6dc <AT25_Save_AD_Param+0xc0>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2280      	movs	r2, #128	; 0x80
 800c660:	0612      	lsls	r2, r2, #24
 800c662:	4053      	eors	r3, r2
 800c664:	491e      	ldr	r1, [pc, #120]	; (800c6e0 <AT25_Save_AD_Param+0xc4>)
 800c666:	1c18      	adds	r0, r3, #0
 800c668:	f7f4 fafa 	bl	8000c60 <__aeabi_fmul>
 800c66c:	1c03      	adds	r3, r0, #0
 800c66e:	1c18      	adds	r0, r3, #0
 800c670:	f7f3 ff5a 	bl	8000528 <__aeabi_f2uiz>
 800c674:	0003      	movs	r3, r0
 800c676:	b29a      	uxth	r2, r3
 800c678:	1d3b      	adds	r3, r7, #4
 800c67a:	809a      	strh	r2, [r3, #4]
	temp[3] = (-1*Eror_ADC_I)*10000;
 800c67c:	4b19      	ldr	r3, [pc, #100]	; (800c6e4 <AT25_Save_AD_Param+0xc8>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2280      	movs	r2, #128	; 0x80
 800c682:	0612      	lsls	r2, r2, #24
 800c684:	4053      	eors	r3, r2
 800c686:	4916      	ldr	r1, [pc, #88]	; (800c6e0 <AT25_Save_AD_Param+0xc4>)
 800c688:	1c18      	adds	r0, r3, #0
 800c68a:	f7f4 fae9 	bl	8000c60 <__aeabi_fmul>
 800c68e:	1c03      	adds	r3, r0, #0
 800c690:	1c18      	adds	r0, r3, #0
 800c692:	f7f3 ff49 	bl	8000528 <__aeabi_f2uiz>
 800c696:	0003      	movs	r3, r0
 800c698:	b29a      	uxth	r2, r3
 800c69a:	1d3b      	adds	r3, r7, #4
 800c69c:	80da      	strh	r2, [r3, #6]
	/**/
	temp[4]=Current_Error*100;
 800c69e:	4b12      	ldr	r3, [pc, #72]	; (800c6e8 <AT25_Save_AD_Param+0xcc>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4912      	ldr	r1, [pc, #72]	; (800c6ec <AT25_Save_AD_Param+0xd0>)
 800c6a4:	1c18      	adds	r0, r3, #0
 800c6a6:	f7f4 fadb 	bl	8000c60 <__aeabi_fmul>
 800c6aa:	1c03      	adds	r3, r0, #0
 800c6ac:	1c18      	adds	r0, r3, #0
 800c6ae:	f7f3 ff3b 	bl	8000528 <__aeabi_f2uiz>
 800c6b2:	0003      	movs	r3, r0
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	1d3b      	adds	r3, r7, #4
 800c6b8:	811a      	strh	r2, [r3, #8]

	SPI_AT25_Write(temp, 86, sizeof(temp));
 800c6ba:	1d3b      	adds	r3, r7, #4
 800c6bc:	220a      	movs	r2, #10
 800c6be:	2156      	movs	r1, #86	; 0x56
 800c6c0:	0018      	movs	r0, r3
 800c6c2:	f7ff fde9 	bl	800c298 <SPI_AT25_Write>

}
 800c6c6:	46c0      	nop			; (mov r8, r8)
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	b004      	add	sp, #16
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	20002fe8 	.word	0x20002fe8
 800c6d4:	49742400 	.word	0x49742400
 800c6d8:	20002fec 	.word	0x20002fec
 800c6dc:	20002ff0 	.word	0x20002ff0
 800c6e0:	461c4000 	.word	0x461c4000
 800c6e4:	20002ff4 	.word	0x20002ff4
 800c6e8:	20003b80 	.word	0x20003b80
 800c6ec:	42c80000 	.word	0x42c80000

0800c6f0 <AT25_load_AD_Param>:

void AT25_load_AD_Param(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0

	uint16_t temp[5];

	SPI_AT25_Read((uint16_t*)temp, 86, sizeof(temp));
 800c6f6:	1d3b      	adds	r3, r7, #4
 800c6f8:	220a      	movs	r2, #10
 800c6fa:	2156      	movs	r1, #86	; 0x56
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f7ff fdfa 	bl	800c2f6 <SPI_AT25_Read>

	ADC_Gain_V=temp[0]/1000000.0;
 800c702:	1d3b      	adds	r3, r7, #4
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	0018      	movs	r0, r3
 800c708:	f7f6 fb7c 	bl	8002e04 <__aeabi_i2d>
 800c70c:	2200      	movs	r2, #0
 800c70e:	4b1f      	ldr	r3, [pc, #124]	; (800c78c <AT25_load_AD_Param+0x9c>)
 800c710:	f7f5 f924 	bl	800195c <__aeabi_ddiv>
 800c714:	0002      	movs	r2, r0
 800c716:	000b      	movs	r3, r1
 800c718:	0010      	movs	r0, r2
 800c71a:	0019      	movs	r1, r3
 800c71c:	f7f6 fc10 	bl	8002f40 <__aeabi_d2f>
 800c720:	1c02      	adds	r2, r0, #0
 800c722:	4b1b      	ldr	r3, [pc, #108]	; (800c790 <AT25_load_AD_Param+0xa0>)
 800c724:	601a      	str	r2, [r3, #0]
	//ADC_Gain_I=temp[1]/1000000.0;
	ADC_Gain_I=ADC_Gain_V;
 800c726:	4b1a      	ldr	r3, [pc, #104]	; (800c790 <AT25_load_AD_Param+0xa0>)
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <AT25_load_AD_Param+0xa4>)
 800c72c:	601a      	str	r2, [r3, #0]

	Eror_ADC_V=-(temp[2]/10000.0);
 800c72e:	1d3b      	adds	r3, r7, #4
 800c730:	889b      	ldrh	r3, [r3, #4]
 800c732:	0018      	movs	r0, r3
 800c734:	f7f6 fb66 	bl	8002e04 <__aeabi_i2d>
 800c738:	2200      	movs	r2, #0
 800c73a:	4b17      	ldr	r3, [pc, #92]	; (800c798 <AT25_load_AD_Param+0xa8>)
 800c73c:	f7f5 f90e 	bl	800195c <__aeabi_ddiv>
 800c740:	0002      	movs	r2, r0
 800c742:	000b      	movs	r3, r1
 800c744:	0010      	movs	r0, r2
 800c746:	0019      	movs	r1, r3
 800c748:	f7f6 fbfa 	bl	8002f40 <__aeabi_d2f>
 800c74c:	1c02      	adds	r2, r0, #0
 800c74e:	2380      	movs	r3, #128	; 0x80
 800c750:	061b      	lsls	r3, r3, #24
 800c752:	405a      	eors	r2, r3
 800c754:	4b11      	ldr	r3, [pc, #68]	; (800c79c <AT25_load_AD_Param+0xac>)
 800c756:	601a      	str	r2, [r3, #0]
	//Eror_ADC_I=-(temp[3]/10000.0);
	Eror_ADC_I=Eror_ADC_V;
 800c758:	4b10      	ldr	r3, [pc, #64]	; (800c79c <AT25_load_AD_Param+0xac>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <AT25_load_AD_Param+0xb0>)
 800c75e:	601a      	str	r2, [r3, #0]

	Current_Error=temp[4]/100.0;
 800c760:	1d3b      	adds	r3, r7, #4
 800c762:	891b      	ldrh	r3, [r3, #8]
 800c764:	0018      	movs	r0, r3
 800c766:	f7f6 fb4d 	bl	8002e04 <__aeabi_i2d>
 800c76a:	2200      	movs	r2, #0
 800c76c:	4b0d      	ldr	r3, [pc, #52]	; (800c7a4 <AT25_load_AD_Param+0xb4>)
 800c76e:	f7f5 f8f5 	bl	800195c <__aeabi_ddiv>
 800c772:	0002      	movs	r2, r0
 800c774:	000b      	movs	r3, r1
 800c776:	0010      	movs	r0, r2
 800c778:	0019      	movs	r1, r3
 800c77a:	f7f6 fbe1 	bl	8002f40 <__aeabi_d2f>
 800c77e:	1c02      	adds	r2, r0, #0
 800c780:	4b09      	ldr	r3, [pc, #36]	; (800c7a8 <AT25_load_AD_Param+0xb8>)
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	46c0      	nop			; (mov r8, r8)
 800c786:	46bd      	mov	sp, r7
 800c788:	b004      	add	sp, #16
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	412e8480 	.word	0x412e8480
 800c790:	20002fe8 	.word	0x20002fe8
 800c794:	20002fec 	.word	0x20002fec
 800c798:	40c38800 	.word	0x40c38800
 800c79c:	20002ff0 	.word	0x20002ff0
 800c7a0:	20002ff4 	.word	0x20002ff4
 800c7a4:	40590000 	.word	0x40590000
 800c7a8:	20003b80 	.word	0x20003b80

0800c7ac <AT25_Reset>:
 * @brief  对AT25重置所有设定值
 * @param	无
 * @retval 无
 */
void AT25_Reset(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b090      	sub	sp, #64	; 0x40
 800c7b0:	af00      	add	r7, sp, #0
	AT_25_init();
 800c7b2:	f7ff fc11 	bl	800bfd8 <AT_25_init>

	CV_CC_CP = CV;
 800c7b6:	4b42      	ldr	r3, [pc, #264]	; (800c8c0 <AT25_Reset+0x114>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	701a      	strb	r2, [r3, #0]
	AT25_Save_CC_CV_CP();
 800c7bc:	f7ff fefc 	bl	800c5b8 <AT25_Save_CC_CV_CP>
	Set_V_Slope=15;
 800c7c0:	4b40      	ldr	r3, [pc, #256]	; (800c8c4 <AT25_Reset+0x118>)
 800c7c2:	220f      	movs	r2, #15
 800c7c4:	701a      	strb	r2, [r3, #0]
	Set_I_Slope=5;
 800c7c6:	4b40      	ldr	r3, [pc, #256]	; (800c8c8 <AT25_Reset+0x11c>)
 800c7c8:	2205      	movs	r2, #5
 800c7ca:	701a      	strb	r2, [r3, #0]
	AT25_Save_VI_Rate();
 800c7cc:	f7ff ff0a 	bl	800c5e4 <AT25_Save_VI_Rate>
	Set_Current=0;
 800c7d0:	4b3e      	ldr	r3, [pc, #248]	; (800c8cc <AT25_Reset+0x120>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	801a      	strh	r2, [r3, #0]
	Set_Voltage=0;
 800c7d6:	4b3e      	ldr	r3, [pc, #248]	; (800c8d0 <AT25_Reset+0x124>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	801a      	strh	r2, [r3, #0]
	AT25_Save_VISet();
 800c7dc:	f7ff fdba 	bl	800c354 <AT25_Save_VISet>
	/*save recall reset*/
	uint16_t temp[30] = {0};
 800c7e0:	003b      	movs	r3, r7
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	233c      	movs	r3, #60	; 0x3c
 800c7e6:	001a      	movs	r2, r3
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	f008 f93a 	bl	8014a62 <memset>
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c7ee:	233f      	movs	r3, #63	; 0x3f
 800c7f0:	18fb      	adds	r3, r7, r3
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	701a      	strb	r2, [r3, #0]
 800c7f6:	e012      	b.n	800c81e <AT25_Reset+0x72>
	{
		temp[i]=1000*(i+1);
 800c7f8:	203f      	movs	r0, #63	; 0x3f
 800c7fa:	183b      	adds	r3, r7, r0
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	3301      	adds	r3, #1
 800c800:	b29b      	uxth	r3, r3
 800c802:	183a      	adds	r2, r7, r0
 800c804:	7812      	ldrb	r2, [r2, #0]
 800c806:	21fa      	movs	r1, #250	; 0xfa
 800c808:	0089      	lsls	r1, r1, #2
 800c80a:	434b      	muls	r3, r1
 800c80c:	b299      	uxth	r1, r3
 800c80e:	003b      	movs	r3, r7
 800c810:	0052      	lsls	r2, r2, #1
 800c812:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c814:	183b      	adds	r3, r7, r0
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	183b      	adds	r3, r7, r0
 800c81a:	3201      	adds	r2, #1
 800c81c:	701a      	strb	r2, [r3, #0]
 800c81e:	233f      	movs	r3, #63	; 0x3f
 800c820:	18fb      	adds	r3, r7, r3
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b09      	cmp	r3, #9
 800c826:	d9e7      	bls.n	800c7f8 <AT25_Reset+0x4c>
	}
	for(uint8_t j=10;j<20;j++)//100-1000
 800c828:	233e      	movs	r3, #62	; 0x3e
 800c82a:	18fb      	adds	r3, r7, r3
 800c82c:	220a      	movs	r2, #10
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	e011      	b.n	800c856 <AT25_Reset+0xaa>
	{
		temp[j]=(j-9)*100;
 800c832:	203e      	movs	r0, #62	; 0x3e
 800c834:	183b      	adds	r3, r7, r0
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	3b09      	subs	r3, #9
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	183a      	adds	r2, r7, r0
 800c83e:	7812      	ldrb	r2, [r2, #0]
 800c840:	2164      	movs	r1, #100	; 0x64
 800c842:	434b      	muls	r3, r1
 800c844:	b299      	uxth	r1, r3
 800c846:	003b      	movs	r3, r7
 800c848:	0052      	lsls	r2, r2, #1
 800c84a:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=10;j<20;j++)//100-1000
 800c84c:	183b      	adds	r3, r7, r0
 800c84e:	781a      	ldrb	r2, [r3, #0]
 800c850:	183b      	adds	r3, r7, r0
 800c852:	3201      	adds	r2, #1
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	233e      	movs	r3, #62	; 0x3e
 800c858:	18fb      	adds	r3, r7, r3
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b13      	cmp	r3, #19
 800c85e:	d9e8      	bls.n	800c832 <AT25_Reset+0x86>
	}
	for(uint8_t k=20;k<30;k++)
 800c860:	233d      	movs	r3, #61	; 0x3d
 800c862:	18fb      	adds	r3, r7, r3
 800c864:	2214      	movs	r2, #20
 800c866:	701a      	strb	r2, [r3, #0]
 800c868:	e01a      	b.n	800c8a0 <AT25_Reset+0xf4>
	{
		temp[k]=temp[k-20]*temp[k-10];
 800c86a:	203d      	movs	r0, #61	; 0x3d
 800c86c:	183b      	adds	r3, r7, r0
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	3b14      	subs	r3, #20
 800c872:	001a      	movs	r2, r3
 800c874:	003b      	movs	r3, r7
 800c876:	0052      	lsls	r2, r2, #1
 800c878:	5ad3      	ldrh	r3, [r2, r3]
 800c87a:	183a      	adds	r2, r7, r0
 800c87c:	7812      	ldrb	r2, [r2, #0]
 800c87e:	3a0a      	subs	r2, #10
 800c880:	0011      	movs	r1, r2
 800c882:	003a      	movs	r2, r7
 800c884:	0049      	lsls	r1, r1, #1
 800c886:	5a89      	ldrh	r1, [r1, r2]
 800c888:	183a      	adds	r2, r7, r0
 800c88a:	7812      	ldrb	r2, [r2, #0]
 800c88c:	434b      	muls	r3, r1
 800c88e:	b299      	uxth	r1, r3
 800c890:	003b      	movs	r3, r7
 800c892:	0052      	lsls	r2, r2, #1
 800c894:	52d1      	strh	r1, [r2, r3]
	for(uint8_t k=20;k<30;k++)
 800c896:	183b      	adds	r3, r7, r0
 800c898:	781a      	ldrb	r2, [r3, #0]
 800c89a:	183b      	adds	r3, r7, r0
 800c89c:	3201      	adds	r2, #1
 800c89e:	701a      	strb	r2, [r3, #0]
 800c8a0:	233d      	movs	r3, #61	; 0x3d
 800c8a2:	18fb      	adds	r3, r7, r3
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	2b1d      	cmp	r3, #29
 800c8a8:	d9df      	bls.n	800c86a <AT25_Reset+0xbe>
	}
	SPI_AT25_Write(temp,0x06, sizeof(temp));
 800c8aa:	003b      	movs	r3, r7
 800c8ac:	223c      	movs	r2, #60	; 0x3c
 800c8ae:	2106      	movs	r1, #6
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	f7ff fcf1 	bl	800c298 <SPI_AT25_Write>



}
 800c8b6:	46c0      	nop			; (mov r8, r8)
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	b010      	add	sp, #64	; 0x40
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	46c0      	nop			; (mov r8, r8)
 800c8c0:	20003b1e 	.word	0x20003b1e
 800c8c4:	20003b2c 	.word	0x20003b2c
 800c8c8:	20003b2d 	.word	0x20003b2d
 800c8cc:	20002fda 	.word	0x20002fda
 800c8d0:	20002fd8 	.word	0x20002fd8

0800c8d4 <ADD>:
		}
		return (uchCRCHi<<8|uchCRCLo);
}
#endif
uint16_t ADD(uint8_t *puchMsg,uint8_t usDataLen)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	000a      	movs	r2, r1
 800c8de:	1cfb      	adds	r3, r7, #3
 800c8e0:	701a      	strb	r2, [r3, #0]

	uint16_t sum=0;
 800c8e2:	2316      	movs	r3, #22
 800c8e4:	18fb      	adds	r3, r7, r3
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	801a      	strh	r2, [r3, #0]
	uint8_t * pindex=puchMsg;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<usDataLen;i++)
 800c8ee:	230f      	movs	r3, #15
 800c8f0:	18fb      	adds	r3, r7, r3
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	701a      	strb	r2, [r3, #0]
 800c8f6:	e010      	b.n	800c91a <ADD+0x46>
	{
		sum+=*(pindex++);
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	613a      	str	r2, [r7, #16]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	b299      	uxth	r1, r3
 800c902:	2216      	movs	r2, #22
 800c904:	18bb      	adds	r3, r7, r2
 800c906:	18ba      	adds	r2, r7, r2
 800c908:	8812      	ldrh	r2, [r2, #0]
 800c90a:	188a      	adds	r2, r1, r2
 800c90c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<usDataLen;i++)
 800c90e:	210f      	movs	r1, #15
 800c910:	187b      	adds	r3, r7, r1
 800c912:	781a      	ldrb	r2, [r3, #0]
 800c914:	187b      	adds	r3, r7, r1
 800c916:	3201      	adds	r2, #1
 800c918:	701a      	strb	r2, [r3, #0]
 800c91a:	230f      	movs	r3, #15
 800c91c:	18fa      	adds	r2, r7, r3
 800c91e:	1cfb      	adds	r3, r7, #3
 800c920:	7812      	ldrb	r2, [r2, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	d3e7      	bcc.n	800c8f8 <ADD+0x24>
	}

	return sum;
 800c928:	2316      	movs	r3, #22
 800c92a:	18fb      	adds	r3, r7, r3
 800c92c:	881b      	ldrh	r3, [r3, #0]
}
 800c92e:	0018      	movs	r0, r3
 800c930:	46bd      	mov	sp, r7
 800c932:	b006      	add	sp, #24
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <DAC_Cmd_send>:
  * @param  command
  * @param  Date need to be send
  * @retval
  */
void DAC_Cmd_send(uint8_t IDindex,uint8_t cmd,uint16_t Data_To_Send)
{
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	0004      	movs	r4, r0
 800c940:	0008      	movs	r0, r1
 800c942:	0011      	movs	r1, r2
 800c944:	1dfb      	adds	r3, r7, #7
 800c946:	1c22      	adds	r2, r4, #0
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	1dbb      	adds	r3, r7, #6
 800c94c:	1c02      	adds	r2, r0, #0
 800c94e:	701a      	strb	r2, [r3, #0]
 800c950:	1d3b      	adds	r3, r7, #4
 800c952:	1c0a      	adds	r2, r1, #0
 800c954:	801a      	strh	r2, [r3, #0]

	__HAL_UART_ENABLE(&huart2);
 800c956:	4b70      	ldr	r3, [pc, #448]	; (800cb18 <DAC_Cmd_send+0x1e0>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	4b6e      	ldr	r3, [pc, #440]	; (800cb18 <DAC_Cmd_send+0x1e0>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2101      	movs	r1, #1
 800c962:	430a      	orrs	r2, r1
 800c964:	601a      	str	r2, [r3, #0]
	memset(&Uart2_Send_buffer[0],0,9);
 800c966:	4b6d      	ldr	r3, [pc, #436]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c968:	2209      	movs	r2, #9
 800c96a:	2100      	movs	r1, #0
 800c96c:	0018      	movs	r0, r3
 800c96e:	f008 f878 	bl	8014a62 <memset>
	/*********************ID&Command*********************/
	Uart2_Send_buffer[0]=IDindex;//id
 800c972:	4b6a      	ldr	r3, [pc, #424]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c974:	1dfa      	adds	r2, r7, #7
 800c976:	7812      	ldrb	r2, [r2, #0]
 800c978:	701a      	strb	r2, [r3, #0]
	Uart2_Send_buffer[1]=cmd;//cmd
 800c97a:	4b68      	ldr	r3, [pc, #416]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c97c:	1dba      	adds	r2, r7, #6
 800c97e:	7812      	ldrb	r2, [r2, #0]
 800c980:	705a      	strb	r2, [r3, #1]
	 /*********************data length*********************/
	 if((Data_To_Send&0xff00))
 800c982:	1d3b      	adds	r3, r7, #4
 800c984:	881a      	ldrh	r2, [r3, #0]
 800c986:	23ff      	movs	r3, #255	; 0xff
 800c988:	021b      	lsls	r3, r3, #8
 800c98a:	4013      	ands	r3, r2
 800c98c:	d003      	beq.n	800c996 <DAC_Cmd_send+0x5e>
	 {
		 Uart2_Send_buffer[2]=0x02;
 800c98e:	4b63      	ldr	r3, [pc, #396]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c990:	2202      	movs	r2, #2
 800c992:	709a      	strb	r2, [r3, #2]
 800c994:	e00b      	b.n	800c9ae <DAC_Cmd_send+0x76>
	 }
	 else if((Data_To_Send&0x00ff))
 800c996:	1d3b      	adds	r3, r7, #4
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	22ff      	movs	r2, #255	; 0xff
 800c99c:	4013      	ands	r3, r2
 800c99e:	d003      	beq.n	800c9a8 <DAC_Cmd_send+0x70>
	 {
		 Uart2_Send_buffer[2]=0x01;
 800c9a0:	4b5e      	ldr	r3, [pc, #376]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	709a      	strb	r2, [r3, #2]
 800c9a6:	e002      	b.n	800c9ae <DAC_Cmd_send+0x76>
	 }
	 else Uart2_Send_buffer[2]=0x00;
 800c9a8:	4b5c      	ldr	r3, [pc, #368]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	709a      	strb	r2, [r3, #2]
	 /*********************data convert*********************/
	  Uart2_Send_buffer[3]=0x00;//data H
 800c9ae:	4b5b      	ldr	r3, [pc, #364]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	70da      	strb	r2, [r3, #3]
	  Uart2_Send_buffer[4]=0x00;//data L
 800c9b4:	4b59      	ldr	r3, [pc, #356]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	711a      	strb	r2, [r3, #4]
	  switch(cmd)
 800c9ba:	1dbb      	adds	r3, r7, #6
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	2b0b      	cmp	r3, #11
 800c9c0:	dc0a      	bgt.n	800c9d8 <DAC_Cmd_send+0xa0>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dc00      	bgt.n	800c9c8 <DAC_Cmd_send+0x90>
 800c9c6:	e088      	b.n	800cada <DAC_Cmd_send+0x1a2>
 800c9c8:	2b0b      	cmp	r3, #11
 800c9ca:	d900      	bls.n	800c9ce <DAC_Cmd_send+0x96>
 800c9cc:	e085      	b.n	800cada <DAC_Cmd_send+0x1a2>
 800c9ce:	009a      	lsls	r2, r3, #2
 800c9d0:	4b53      	ldr	r3, [pc, #332]	; (800cb20 <DAC_Cmd_send+0x1e8>)
 800c9d2:	18d3      	adds	r3, r2, r3
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	469f      	mov	pc, r3
 800c9d8:	2bff      	cmp	r3, #255	; 0xff
 800c9da:	d000      	beq.n	800c9de <DAC_Cmd_send+0xa6>
 800c9dc:	e07d      	b.n	800cada <DAC_Cmd_send+0x1a2>
	  {
	  	  case 0xff:
	  	  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//low max_voltage
 800c9de:	4b4f      	ldr	r3, [pc, #316]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c9e0:	791b      	ldrb	r3, [r3, #4]
 800c9e2:	b25a      	sxtb	r2, r3
 800c9e4:	1d3b      	adds	r3, r7, #4
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	b25b      	sxtb	r3, r3
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	b25b      	sxtb	r3, r3
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	4b4a      	ldr	r3, [pc, #296]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c9f2:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//Hight max_voltage
 800c9f4:	4b49      	ldr	r3, [pc, #292]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800c9f6:	78da      	ldrb	r2, [r3, #3]
 800c9f8:	1d3b      	adds	r3, r7, #4
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	0a1b      	lsrs	r3, r3, #8
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	4313      	orrs	r3, r2
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	4b45      	ldr	r3, [pc, #276]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca08:	70da      	strb	r2, [r3, #3]
			  break;
 800ca0a:	e067      	b.n	800cadc <DAC_Cmd_send+0x1a4>

		  /*set max voltage current*/
		  case 4://set voltage
		  case 5://set current
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//low max_voltage
 800ca0c:	4b43      	ldr	r3, [pc, #268]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca0e:	791b      	ldrb	r3, [r3, #4]
 800ca10:	b25a      	sxtb	r2, r3
 800ca12:	1d3b      	adds	r3, r7, #4
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	b25b      	sxtb	r3, r3
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	b25b      	sxtb	r3, r3
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	4b3f      	ldr	r3, [pc, #252]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca20:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//Hight max_voltage
 800ca22:	4b3e      	ldr	r3, [pc, #248]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca24:	78da      	ldrb	r2, [r3, #3]
 800ca26:	1d3b      	adds	r3, r7, #4
 800ca28:	881b      	ldrh	r3, [r3, #0]
 800ca2a:	0a1b      	lsrs	r3, r3, #8
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	4313      	orrs	r3, r2
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	4b39      	ldr	r3, [pc, #228]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca36:	70da      	strb	r2, [r3, #3]
			  break;
 800ca38:	e050      	b.n	800cadc <DAC_Cmd_send+0x1a4>
		  }
		  /*set min voltage current*/
		  case 6://set voltage & current
		  {

			  Uart2_Send_buffer[4]|=(Set_Voltage&0x00ff);//low voltage
 800ca3a:	4b38      	ldr	r3, [pc, #224]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca3c:	791b      	ldrb	r3, [r3, #4]
 800ca3e:	b25a      	sxtb	r2, r3
 800ca40:	4b38      	ldr	r3, [pc, #224]	; (800cb24 <DAC_Cmd_send+0x1ec>)
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	b25b      	sxtb	r3, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	b25b      	sxtb	r3, r3
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	4b33      	ldr	r3, [pc, #204]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca4e:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Set_Voltage>>8);//Hight voltage
 800ca50:	4b32      	ldr	r3, [pc, #200]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca52:	78da      	ldrb	r2, [r3, #3]
 800ca54:	4b33      	ldr	r3, [pc, #204]	; (800cb24 <DAC_Cmd_send+0x1ec>)
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	0a1b      	lsrs	r3, r3, #8
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	4b2e      	ldr	r3, [pc, #184]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca64:	70da      	strb	r2, [r3, #3]

			  Uart2_Send_buffer[6]|=(Set_Current&0x00ff);//low current
 800ca66:	4b2d      	ldr	r3, [pc, #180]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca68:	799b      	ldrb	r3, [r3, #6]
 800ca6a:	b25a      	sxtb	r2, r3
 800ca6c:	4b2e      	ldr	r3, [pc, #184]	; (800cb28 <DAC_Cmd_send+0x1f0>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b25b      	sxtb	r3, r3
 800ca72:	4313      	orrs	r3, r2
 800ca74:	b25b      	sxtb	r3, r3
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	4b28      	ldr	r3, [pc, #160]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca7a:	719a      	strb	r2, [r3, #6]
			  Uart2_Send_buffer[5]|=(Set_Current>>8);//Hight current
 800ca7c:	4b27      	ldr	r3, [pc, #156]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca7e:	795a      	ldrb	r2, [r3, #5]
 800ca80:	4b29      	ldr	r3, [pc, #164]	; (800cb28 <DAC_Cmd_send+0x1f0>)
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	0a1b      	lsrs	r3, r3, #8
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	4b23      	ldr	r3, [pc, #140]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca90:	715a      	strb	r2, [r3, #5]
			  break;
 800ca92:	e023      	b.n	800cadc <DAC_Cmd_send+0x1a4>
		  }
		  /*set V/I rate*/
		  case 7:
		  case 8:
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//Low min_voltage
 800ca94:	4b21      	ldr	r3, [pc, #132]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800ca96:	791b      	ldrb	r3, [r3, #4]
 800ca98:	b25a      	sxtb	r2, r3
 800ca9a:	1d3b      	adds	r3, r7, #4
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	b25b      	sxtb	r3, r3
 800caa0:	4313      	orrs	r3, r2
 800caa2:	b25b      	sxtb	r3, r3
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	4b1d      	ldr	r3, [pc, #116]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800caa8:	711a      	strb	r2, [r3, #4]
			  break;
 800caaa:	e017      	b.n	800cadc <DAC_Cmd_send+0x1a4>
		  }
		  /*set V I rate*/
		  case 9:
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//Low min_voltage
 800caac:	4b1b      	ldr	r3, [pc, #108]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800caae:	791b      	ldrb	r3, [r3, #4]
 800cab0:	b25a      	sxtb	r2, r3
 800cab2:	1d3b      	adds	r3, r7, #4
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	b25b      	sxtb	r3, r3
 800cab8:	4313      	orrs	r3, r2
 800caba:	b25b      	sxtb	r3, r3
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	4b17      	ldr	r3, [pc, #92]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800cac0:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//high min_voltage
 800cac2:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800cac4:	78da      	ldrb	r2, [r3, #3]
 800cac6:	1d3b      	adds	r3, r7, #4
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	0a1b      	lsrs	r3, r3, #8
 800cacc:	b29b      	uxth	r3, r3
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	4313      	orrs	r3, r2
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	4b11      	ldr	r3, [pc, #68]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800cad6:	70da      	strb	r2, [r3, #3]
			  break;
 800cad8:	e000      	b.n	800cadc <DAC_Cmd_send+0x1a4>
		  }

		  case 11:break;//start Fall ON/OFF

		  default: break;
 800cada:	46c0      	nop			; (mov r8, r8)
	  /*********************CRC Calculate*********************/
	  Uart2_Send_buffer[5]=CRC16(Uart2_Send_buffer,5);//CRC L
	  Uart2_Send_buffer[6]=(CRC16(Uart2_Send_buffer,5)>>8);//CRC H
#endif
#ifdef ADD_CHECK
	  Uart2_Send_buffer[7]=ADD(Uart2_Send_buffer,7);//Low
 800cadc:	4b0f      	ldr	r3, [pc, #60]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800cade:	2107      	movs	r1, #7
 800cae0:	0018      	movs	r0, r3
 800cae2:	f7ff fef7 	bl	800c8d4 <ADD>
 800cae6:	0003      	movs	r3, r0
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	4b0c      	ldr	r3, [pc, #48]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800caec:	71da      	strb	r2, [r3, #7]
	  Uart2_Send_buffer[8]=(ADD(Uart2_Send_buffer,7)>>8);//High
 800caee:	4b0b      	ldr	r3, [pc, #44]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800caf0:	2107      	movs	r1, #7
 800caf2:	0018      	movs	r0, r3
 800caf4:	f7ff feee 	bl	800c8d4 <ADD>
 800caf8:	0003      	movs	r3, r0
 800cafa:	0a1b      	lsrs	r3, r3, #8
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	4b06      	ldr	r3, [pc, #24]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800cb02:	721a      	strb	r2, [r3, #8]
#endif

	  HAL_UART_Transmit_IT(&huart2,Uart2_Send_buffer,9);
 800cb04:	4905      	ldr	r1, [pc, #20]	; (800cb1c <DAC_Cmd_send+0x1e4>)
 800cb06:	4b04      	ldr	r3, [pc, #16]	; (800cb18 <DAC_Cmd_send+0x1e0>)
 800cb08:	2209      	movs	r2, #9
 800cb0a:	0018      	movs	r0, r3
 800cb0c:	f7fd fc38 	bl	800a380 <HAL_UART_Transmit_IT>

}
 800cb10:	46c0      	nop			; (mov r8, r8)
 800cb12:	46bd      	mov	sp, r7
 800cb14:	b003      	add	sp, #12
 800cb16:	bd90      	pop	{r4, r7, pc}
 800cb18:	20003740 	.word	0x20003740
 800cb1c:	20003694 	.word	0x20003694
 800cb20:	08018bf0 	.word	0x08018bf0
 800cb24:	20002fd8 	.word	0x20002fd8
 800cb28:	20002fda 	.word	0x20002fda

0800cb2c <power_on>:
  * @brief  开始输出
  * @param  无
  * @retval 无
  */
void power_on(void)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
	ON_OFF =ON;
 800cb30:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <power_on+0x2c>)
 800cb32:	2201      	movs	r2, #1
 800cb34:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,0xff,0);
 800cb36:	2200      	movs	r2, #0
 800cb38:	21ff      	movs	r1, #255	; 0xff
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	f7ff fefc 	bl	800c938 <DAC_Cmd_send>
	HAL_Delay(10);
 800cb40:	200a      	movs	r0, #10
 800cb42:	f7f8 fbf5 	bl	8005330 <HAL_Delay>

	DAC_Cmd_send(1,6,0);
 800cb46:	2200      	movs	r2, #0
 800cb48:	2106      	movs	r1, #6
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	f7ff fef4 	bl	800c938 <DAC_Cmd_send>


}
 800cb50:	46c0      	nop			; (mov r8, r8)
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	20003b1c 	.word	0x20003b1c

0800cb5c <power_off>:
  * @brief  关闭输出
  * @param  无
  * @retval 无
  */
void power_off(void)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0

	ON_OFF =OFF;
 800cb62:	4b15      	ldr	r3, [pc, #84]	; (800cbb8 <power_off+0x5c>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]
	uint16_t temp_V=Set_Voltage;
 800cb68:	1dbb      	adds	r3, r7, #6
 800cb6a:	4a14      	ldr	r2, [pc, #80]	; (800cbbc <power_off+0x60>)
 800cb6c:	8812      	ldrh	r2, [r2, #0]
 800cb6e:	801a      	strh	r2, [r3, #0]
	uint16_t temp_I=Set_Current;
 800cb70:	1d3b      	adds	r3, r7, #4
 800cb72:	4a13      	ldr	r2, [pc, #76]	; (800cbc0 <power_off+0x64>)
 800cb74:	8812      	ldrh	r2, [r2, #0]
 800cb76:	801a      	strh	r2, [r3, #0]
	Set_Voltage=100;
 800cb78:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <power_off+0x60>)
 800cb7a:	2264      	movs	r2, #100	; 0x64
 800cb7c:	801a      	strh	r2, [r3, #0]
	Set_Current=100;
 800cb7e:	4b10      	ldr	r3, [pc, #64]	; (800cbc0 <power_off+0x64>)
 800cb80:	2264      	movs	r2, #100	; 0x64
 800cb82:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,6,0);
 800cb84:	2200      	movs	r2, #0
 800cb86:	2106      	movs	r1, #6
 800cb88:	2001      	movs	r0, #1
 800cb8a:	f7ff fed5 	bl	800c938 <DAC_Cmd_send>
	Set_Voltage=temp_V;
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <power_off+0x60>)
 800cb90:	1dba      	adds	r2, r7, #6
 800cb92:	8812      	ldrh	r2, [r2, #0]
 800cb94:	801a      	strh	r2, [r3, #0]
	Set_Current=temp_I;
 800cb96:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <power_off+0x64>)
 800cb98:	1d3a      	adds	r2, r7, #4
 800cb9a:	8812      	ldrh	r2, [r2, #0]
 800cb9c:	801a      	strh	r2, [r3, #0]
	HAL_Delay(150);//等待缓降完成
 800cb9e:	2096      	movs	r0, #150	; 0x96
 800cba0:	f7f8 fbc6 	bl	8005330 <HAL_Delay>
	DAC_Cmd_send(1,0xff,1);
 800cba4:	2201      	movs	r2, #1
 800cba6:	21ff      	movs	r1, #255	; 0xff
 800cba8:	2001      	movs	r0, #1
 800cbaa:	f7ff fec5 	bl	800c938 <DAC_Cmd_send>

}
 800cbae:	46c0      	nop			; (mov r8, r8)
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	b002      	add	sp, #8
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	46c0      	nop			; (mov r8, r8)
 800cbb8:	20003b1c 	.word	0x20003b1c
 800cbbc:	20002fd8 	.word	0x20002fd8
 800cbc0:	20002fda 	.word	0x20002fda

0800cbc4 <Output_Zero>:
  * @brief  输出零
  * @param  无
  * @retval 无
  */
void Output_Zero(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0

	uint16_t temp_V=Set_Voltage;
 800cbca:	1dbb      	adds	r3, r7, #6
 800cbcc:	4a0e      	ldr	r2, [pc, #56]	; (800cc08 <Output_Zero+0x44>)
 800cbce:	8812      	ldrh	r2, [r2, #0]
 800cbd0:	801a      	strh	r2, [r3, #0]
	uint16_t temp_I=Set_Current;
 800cbd2:	1d3b      	adds	r3, r7, #4
 800cbd4:	4a0d      	ldr	r2, [pc, #52]	; (800cc0c <Output_Zero+0x48>)
 800cbd6:	8812      	ldrh	r2, [r2, #0]
 800cbd8:	801a      	strh	r2, [r3, #0]
	Set_Voltage=1;
 800cbda:	4b0b      	ldr	r3, [pc, #44]	; (800cc08 <Output_Zero+0x44>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	801a      	strh	r2, [r3, #0]
	Set_Current=1;
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <Output_Zero+0x48>)
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,0xff,1);
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	21ff      	movs	r1, #255	; 0xff
 800cbea:	2001      	movs	r0, #1
 800cbec:	f7ff fea4 	bl	800c938 <DAC_Cmd_send>
	Set_Voltage=temp_V;
 800cbf0:	4b05      	ldr	r3, [pc, #20]	; (800cc08 <Output_Zero+0x44>)
 800cbf2:	1dba      	adds	r2, r7, #6
 800cbf4:	8812      	ldrh	r2, [r2, #0]
 800cbf6:	801a      	strh	r2, [r3, #0]
	Set_Current=temp_I;
 800cbf8:	4b04      	ldr	r3, [pc, #16]	; (800cc0c <Output_Zero+0x48>)
 800cbfa:	1d3a      	adds	r2, r7, #4
 800cbfc:	8812      	ldrh	r2, [r2, #0]
 800cbfe:	801a      	strh	r2, [r3, #0]


}
 800cc00:	46c0      	nop			; (mov r8, r8)
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b002      	add	sp, #8
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20002fd8 	.word	0x20002fd8
 800cc0c:	20002fda 	.word	0x20002fda

0800cc10 <First_menu_data_Refresh>:
#include "encoder.h"

static void First_menu_data_Refresh(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
	xyz.coordinates2+=Flag.Encoder_BF;
 800cc14:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <First_menu_data_Refresh+0x34>)
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <First_menu_data_Refresh+0x38>)
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	18d2      	adds	r2, r2, r3
 800cc1e:	4b09      	ldr	r3, [pc, #36]	; (800cc44 <First_menu_data_Refresh+0x34>)
 800cc20:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2<1)	xyz.coordinates2=8;
 800cc22:	4b08      	ldr	r3, [pc, #32]	; (800cc44 <First_menu_data_Refresh+0x34>)
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	dc02      	bgt.n	800cc30 <First_menu_data_Refresh+0x20>
 800cc2a:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <First_menu_data_Refresh+0x34>)
 800cc2c:	2208      	movs	r2, #8
 800cc2e:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2>8)  xyz.coordinates2=1;
 800cc30:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <First_menu_data_Refresh+0x34>)
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	2b08      	cmp	r3, #8
 800cc36:	dd02      	ble.n	800cc3e <First_menu_data_Refresh+0x2e>
 800cc38:	4b02      	ldr	r3, [pc, #8]	; (800cc44 <First_menu_data_Refresh+0x34>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	605a      	str	r2, [r3, #4]
}
 800cc3e:	46c0      	nop			; (mov r8, r8)
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	20003b8c 	.word	0x20003b8c
 800cc48:	20003384 	.word	0x20003384

0800cc4c <Calibration_V_data_Refresh>:

static void Calibration_V_data_Refresh(void)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	af00      	add	r7, sp, #0

	String_Calibration_Vlotage[Cursor_Position-9]+=Flag.Encoder_BF;
 800cc50:	4b8a      	ldr	r3, [pc, #552]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	3b09      	subs	r3, #9
 800cc56:	4a8a      	ldr	r2, [pc, #552]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cc58:	5cd1      	ldrb	r1, [r2, r3]
 800cc5a:	4b8a      	ldr	r3, [pc, #552]	; (800ce84 <Calibration_V_data_Refresh+0x238>)
 800cc5c:	69db      	ldr	r3, [r3, #28]
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	4b86      	ldr	r3, [pc, #536]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	3b09      	subs	r3, #9
 800cc66:	188a      	adds	r2, r1, r2
 800cc68:	b2d1      	uxtb	r1, r2
 800cc6a:	4a85      	ldr	r2, [pc, #532]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cc6c:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Vlotage[Cursor_Position-9]<'0')//退位
 800cc6e:	4b83      	ldr	r3, [pc, #524]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	3b09      	subs	r3, #9
 800cc74:	4a82      	ldr	r2, [pc, #520]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cc76:	5cd3      	ldrb	r3, [r2, r3]
 800cc78:	2b2f      	cmp	r3, #47	; 0x2f
 800cc7a:	d900      	bls.n	800cc7e <Calibration_V_data_Refresh+0x32>
 800cc7c:	e0a3      	b.n	800cdc6 <Calibration_V_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800cc7e:	4b7f      	ldr	r3, [pc, #508]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b0b      	cmp	r3, #11
 800cc84:	d165      	bne.n	800cd52 <Calibration_V_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cc86:	4b7d      	ldr	r3, [pc, #500]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	4b7b      	ldr	r3, [pc, #492]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cc90:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cc92:	4b7a      	ldr	r3, [pc, #488]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	3b09      	subs	r3, #9
 800cc98:	4a79      	ldr	r2, [pc, #484]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cc9a:	5cd3      	ldrb	r3, [r2, r3]
 800cc9c:	2b30      	cmp	r3, #48	; 0x30
 800cc9e:	d915      	bls.n	800cccc <Calibration_V_data_Refresh+0x80>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cca0:	4b76      	ldr	r3, [pc, #472]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	3b09      	subs	r3, #9
 800cca6:	4a76      	ldr	r2, [pc, #472]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cca8:	5cd2      	ldrb	r2, [r2, r3]
 800ccaa:	3a01      	subs	r2, #1
 800ccac:	b2d1      	uxtb	r1, r2
 800ccae:	4a74      	ldr	r2, [pc, #464]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ccb0:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ccb2:	4b72      	ldr	r3, [pc, #456]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	4b70      	ldr	r3, [pc, #448]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ccbc:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800ccbe:	4b6f      	ldr	r3, [pc, #444]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	3b09      	subs	r3, #9
 800ccc4:	4a6e      	ldr	r2, [pc, #440]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ccc6:	2139      	movs	r1, #57	; 0x39
 800ccc8:	54d1      	strb	r1, [r2, r3]
 800ccca:	e07c      	b.n	800cdc6 <Calibration_V_data_Refresh+0x17a>

			}
			else if(String_Calibration_Vlotage[Cursor_Position-9]=='0')
 800cccc:	4b6b      	ldr	r3, [pc, #428]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	3b09      	subs	r3, #9
 800ccd2:	4a6b      	ldr	r2, [pc, #428]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ccd4:	5cd3      	ldrb	r3, [r2, r3]
 800ccd6:	2b30      	cmp	r3, #48	; 0x30
 800ccd8:	d175      	bne.n	800cdc6 <Calibration_V_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800ccda:	4b68      	ldr	r3, [pc, #416]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	4b66      	ldr	r3, [pc, #408]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cce4:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cce6:	4b65      	ldr	r3, [pc, #404]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	3b09      	subs	r3, #9
 800ccec:	4a64      	ldr	r2, [pc, #400]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ccee:	5cd3      	ldrb	r3, [r2, r3]
 800ccf0:	2b30      	cmp	r3, #48	; 0x30
 800ccf2:	d921      	bls.n	800cd38 <Calibration_V_data_Refresh+0xec>
				{
					String_Calibration_Vlotage[Cursor_Position-9]--;
 800ccf4:	4b61      	ldr	r3, [pc, #388]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	3b09      	subs	r3, #9
 800ccfa:	4a61      	ldr	r2, [pc, #388]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ccfc:	5cd2      	ldrb	r2, [r2, r3]
 800ccfe:	3a01      	subs	r2, #1
 800cd00:	b2d1      	uxtb	r1, r2
 800cd02:	4a5f      	ldr	r2, [pc, #380]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd04:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cd06:	4b5d      	ldr	r3, [pc, #372]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	4b5b      	ldr	r3, [pc, #364]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd10:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cd12:	4b5a      	ldr	r3, [pc, #360]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	3b09      	subs	r3, #9
 800cd18:	4a59      	ldr	r2, [pc, #356]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd1a:	2139      	movs	r1, #57	; 0x39
 800cd1c:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cd1e:	4b57      	ldr	r3, [pc, #348]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	3301      	adds	r3, #1
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	4b55      	ldr	r3, [pc, #340]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd28:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cd2a:	4b54      	ldr	r3, [pc, #336]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	3b09      	subs	r3, #9
 800cd30:	4a53      	ldr	r2, [pc, #332]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd32:	2139      	movs	r1, #57	; 0x39
 800cd34:	54d1      	strb	r1, [r2, r3]
 800cd36:	e046      	b.n	800cdc6 <Calibration_V_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cd38:	4b50      	ldr	r3, [pc, #320]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	4b4e      	ldr	r3, [pc, #312]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd42:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cd44:	4b4d      	ldr	r3, [pc, #308]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	3b09      	subs	r3, #9
 800cd4a:	4a4d      	ldr	r2, [pc, #308]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd4c:	2130      	movs	r1, #48	; 0x30
 800cd4e:	54d1      	strb	r1, [r2, r3]
 800cd50:	e039      	b.n	800cdc6 <Calibration_V_data_Refresh+0x17a>

			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800cd52:	4b4a      	ldr	r3, [pc, #296]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b0a      	cmp	r3, #10
 800cd58:	d12f      	bne.n	800cdba <Calibration_V_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800cd5a:	4b48      	ldr	r3, [pc, #288]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	4b46      	ldr	r3, [pc, #280]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd64:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cd66:	4b45      	ldr	r3, [pc, #276]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	3b09      	subs	r3, #9
 800cd6c:	4a44      	ldr	r2, [pc, #272]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd6e:	5cd3      	ldrb	r3, [r2, r3]
 800cd70:	2b30      	cmp	r3, #48	; 0x30
 800cd72:	d915      	bls.n	800cda0 <Calibration_V_data_Refresh+0x154>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cd74:	4b41      	ldr	r3, [pc, #260]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	3b09      	subs	r3, #9
 800cd7a:	4a41      	ldr	r2, [pc, #260]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd7c:	5cd2      	ldrb	r2, [r2, r3]
 800cd7e:	3a01      	subs	r2, #1
 800cd80:	b2d1      	uxtb	r1, r2
 800cd82:	4a3f      	ldr	r2, [pc, #252]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd84:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cd86:	4b3d      	ldr	r3, [pc, #244]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	4b3b      	ldr	r3, [pc, #236]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd90:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cd92:	4b3a      	ldr	r3, [pc, #232]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	3b09      	subs	r3, #9
 800cd98:	4a39      	ldr	r2, [pc, #228]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cd9a:	2139      	movs	r1, #57	; 0x39
 800cd9c:	54d1      	strb	r1, [r2, r3]
 800cd9e:	e012      	b.n	800cdc6 <Calibration_V_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800cda0:	4b36      	ldr	r3, [pc, #216]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	4b34      	ldr	r3, [pc, #208]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdaa:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cdac:	4b33      	ldr	r3, [pc, #204]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	3b09      	subs	r3, #9
 800cdb2:	4a33      	ldr	r2, [pc, #204]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cdb4:	2130      	movs	r1, #48	; 0x30
 800cdb6:	54d1      	strb	r1, [r2, r3]
 800cdb8:	e005      	b.n	800cdc6 <Calibration_V_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cdba:	4b30      	ldr	r3, [pc, #192]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	3b09      	subs	r3, #9
 800cdc0:	4a2f      	ldr	r2, [pc, #188]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cdc2:	2130      	movs	r1, #48	; 0x30
 800cdc4:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Vlotage[Cursor_Position-9]>'9')
 800cdc6:	4b2d      	ldr	r3, [pc, #180]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	3b09      	subs	r3, #9
 800cdcc:	4a2c      	ldr	r2, [pc, #176]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cdce:	5cd3      	ldrb	r3, [r2, r3]
 800cdd0:	2b39      	cmp	r3, #57	; 0x39
 800cdd2:	d94f      	bls.n	800ce74 <Calibration_V_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800cdd4:	4b29      	ldr	r3, [pc, #164]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d041      	beq.n	800ce60 <Calibration_V_data_Refresh+0x214>
		{
			String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cddc:	4b27      	ldr	r3, [pc, #156]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	3b09      	subs	r3, #9
 800cde2:	4a27      	ldr	r2, [pc, #156]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cde4:	2130      	movs	r1, #48	; 0x30
 800cde6:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800cde8:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b2da      	uxtb	r2, r3
 800cdf0:	4b22      	ldr	r3, [pc, #136]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdf2:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]++;
 800cdf4:	4b21      	ldr	r3, [pc, #132]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	3b09      	subs	r3, #9
 800cdfa:	4a21      	ldr	r2, [pc, #132]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800cdfc:	5cd2      	ldrb	r2, [r2, r3]
 800cdfe:	3201      	adds	r2, #1
 800ce00:	b2d1      	uxtb	r1, r2
 800ce02:	4a1f      	ldr	r2, [pc, #124]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ce04:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800ce06:	4b1d      	ldr	r3, [pc, #116]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	3b09      	subs	r3, #9
 800ce0c:	4a1c      	ldr	r2, [pc, #112]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ce0e:	5cd3      	ldrb	r3, [r2, r3]
 800ce10:	2b39      	cmp	r3, #57	; 0x39
 800ce12:	d91e      	bls.n	800ce52 <Calibration_V_data_Refresh+0x206>
 800ce14:	4b19      	ldr	r3, [pc, #100]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d01a      	beq.n	800ce52 <Calibration_V_data_Refresh+0x206>
			{
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800ce1c:	4b17      	ldr	r3, [pc, #92]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	3b09      	subs	r3, #9
 800ce22:	4a17      	ldr	r2, [pc, #92]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ce24:	2130      	movs	r1, #48	; 0x30
 800ce26:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800ce28:	4b14      	ldr	r3, [pc, #80]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce32:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]++;
 800ce34:	4b11      	ldr	r3, [pc, #68]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	3b09      	subs	r3, #9
 800ce3a:	4a11      	ldr	r2, [pc, #68]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ce3c:	5cd2      	ldrb	r2, [r2, r3]
 800ce3e:	3201      	adds	r2, #1
 800ce40:	b2d1      	uxtb	r1, r2
 800ce42:	4a0f      	ldr	r2, [pc, #60]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ce44:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ce46:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce50:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800ce52:	4b0a      	ldr	r3, [pc, #40]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	3301      	adds	r3, #1
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b08      	ldr	r3, [pc, #32]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce5c:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]='9';
		}

	}

}
 800ce5e:	e009      	b.n	800ce74 <Calibration_V_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800ce60:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d105      	bne.n	800ce74 <Calibration_V_data_Refresh+0x228>
			String_Calibration_Vlotage[Cursor_Position-9]='9';
 800ce68:	4b04      	ldr	r3, [pc, #16]	; (800ce7c <Calibration_V_data_Refresh+0x230>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	3b09      	subs	r3, #9
 800ce6e:	4a04      	ldr	r2, [pc, #16]	; (800ce80 <Calibration_V_data_Refresh+0x234>)
 800ce70:	2139      	movs	r1, #57	; 0x39
 800ce72:	54d1      	strb	r1, [r2, r3]
}
 800ce74:	46c0      	nop			; (mov r8, r8)
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	46c0      	nop			; (mov r8, r8)
 800ce7c:	20003b22 	.word	0x20003b22
 800ce80:	2000308c 	.word	0x2000308c
 800ce84:	20003384 	.word	0x20003384

0800ce88 <Calibration_I_data_Refresh>:


static void Calibration_I_data_Refresh(void)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	af00      	add	r7, sp, #0

	String_Calibration_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800ce8c:	4b8a      	ldr	r3, [pc, #552]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	3b09      	subs	r3, #9
 800ce92:	4a8a      	ldr	r2, [pc, #552]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800ce94:	5cd1      	ldrb	r1, [r2, r3]
 800ce96:	4b8a      	ldr	r3, [pc, #552]	; (800d0c0 <Calibration_I_data_Refresh+0x238>)
 800ce98:	69db      	ldr	r3, [r3, #28]
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	4b86      	ldr	r3, [pc, #536]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	3b09      	subs	r3, #9
 800cea2:	188a      	adds	r2, r1, r2
 800cea4:	b2d1      	uxtb	r1, r2
 800cea6:	4a85      	ldr	r2, [pc, #532]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cea8:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Current[Cursor_Position-9]<'0')//退位
 800ceaa:	4b83      	ldr	r3, [pc, #524]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	3b09      	subs	r3, #9
 800ceb0:	4a82      	ldr	r2, [pc, #520]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800ceb2:	5cd3      	ldrb	r3, [r2, r3]
 800ceb4:	2b2f      	cmp	r3, #47	; 0x2f
 800ceb6:	d900      	bls.n	800ceba <Calibration_I_data_Refresh+0x32>
 800ceb8:	e0a3      	b.n	800d002 <Calibration_I_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800ceba:	4b7f      	ldr	r3, [pc, #508]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b0b      	cmp	r3, #11
 800cec0:	d165      	bne.n	800cf8e <Calibration_I_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cec2:	4b7d      	ldr	r3, [pc, #500]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	3b01      	subs	r3, #1
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	4b7b      	ldr	r3, [pc, #492]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cecc:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cece:	4b7a      	ldr	r3, [pc, #488]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	3b09      	subs	r3, #9
 800ced4:	4a79      	ldr	r2, [pc, #484]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800ced6:	5cd3      	ldrb	r3, [r2, r3]
 800ced8:	2b30      	cmp	r3, #48	; 0x30
 800ceda:	d915      	bls.n	800cf08 <Calibration_I_data_Refresh+0x80>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800cedc:	4b76      	ldr	r3, [pc, #472]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	3b09      	subs	r3, #9
 800cee2:	4a76      	ldr	r2, [pc, #472]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cee4:	5cd2      	ldrb	r2, [r2, r3]
 800cee6:	3a01      	subs	r2, #1
 800cee8:	b2d1      	uxtb	r1, r2
 800ceea:	4a74      	ldr	r2, [pc, #464]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800ceec:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ceee:	4b72      	ldr	r3, [pc, #456]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	3301      	adds	r3, #1
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	4b70      	ldr	r3, [pc, #448]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cef8:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800cefa:	4b6f      	ldr	r3, [pc, #444]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	3b09      	subs	r3, #9
 800cf00:	4a6e      	ldr	r2, [pc, #440]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf02:	2139      	movs	r1, #57	; 0x39
 800cf04:	54d1      	strb	r1, [r2, r3]
 800cf06:	e07c      	b.n	800d002 <Calibration_I_data_Refresh+0x17a>

			}
			else if(String_Calibration_Current[Cursor_Position-9]=='0')
 800cf08:	4b6b      	ldr	r3, [pc, #428]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	3b09      	subs	r3, #9
 800cf0e:	4a6b      	ldr	r2, [pc, #428]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf10:	5cd3      	ldrb	r3, [r2, r3]
 800cf12:	2b30      	cmp	r3, #48	; 0x30
 800cf14:	d175      	bne.n	800d002 <Calibration_I_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cf16:	4b68      	ldr	r3, [pc, #416]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	4b66      	ldr	r3, [pc, #408]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf20:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cf22:	4b65      	ldr	r3, [pc, #404]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	3b09      	subs	r3, #9
 800cf28:	4a64      	ldr	r2, [pc, #400]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf2a:	5cd3      	ldrb	r3, [r2, r3]
 800cf2c:	2b30      	cmp	r3, #48	; 0x30
 800cf2e:	d921      	bls.n	800cf74 <Calibration_I_data_Refresh+0xec>
				{
					String_Calibration_Current[Cursor_Position-9]--;
 800cf30:	4b61      	ldr	r3, [pc, #388]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	3b09      	subs	r3, #9
 800cf36:	4a61      	ldr	r2, [pc, #388]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf38:	5cd2      	ldrb	r2, [r2, r3]
 800cf3a:	3a01      	subs	r2, #1
 800cf3c:	b2d1      	uxtb	r1, r2
 800cf3e:	4a5f      	ldr	r2, [pc, #380]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf40:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cf42:	4b5d      	ldr	r3, [pc, #372]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	3301      	adds	r3, #1
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	4b5b      	ldr	r3, [pc, #364]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf4c:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cf4e:	4b5a      	ldr	r3, [pc, #360]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	3b09      	subs	r3, #9
 800cf54:	4a59      	ldr	r2, [pc, #356]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf56:	2139      	movs	r1, #57	; 0x39
 800cf58:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cf5a:	4b57      	ldr	r3, [pc, #348]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	4b55      	ldr	r3, [pc, #340]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf64:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cf66:	4b54      	ldr	r3, [pc, #336]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	3b09      	subs	r3, #9
 800cf6c:	4a53      	ldr	r2, [pc, #332]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf6e:	2139      	movs	r1, #57	; 0x39
 800cf70:	54d1      	strb	r1, [r2, r3]
 800cf72:	e046      	b.n	800d002 <Calibration_I_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cf74:	4b50      	ldr	r3, [pc, #320]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	3302      	adds	r3, #2
 800cf7a:	b2da      	uxtb	r2, r3
 800cf7c:	4b4e      	ldr	r3, [pc, #312]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf7e:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='0';
 800cf80:	4b4d      	ldr	r3, [pc, #308]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	3b09      	subs	r3, #9
 800cf86:	4a4d      	ldr	r2, [pc, #308]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cf88:	2130      	movs	r1, #48	; 0x30
 800cf8a:	54d1      	strb	r1, [r2, r3]
 800cf8c:	e039      	b.n	800d002 <Calibration_I_data_Refresh+0x17a>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800cf8e:	4b4a      	ldr	r3, [pc, #296]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b0a      	cmp	r3, #10
 800cf94:	d12f      	bne.n	800cff6 <Calibration_I_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800cf96:	4b48      	ldr	r3, [pc, #288]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	4b46      	ldr	r3, [pc, #280]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfa0:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cfa2:	4b45      	ldr	r3, [pc, #276]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	3b09      	subs	r3, #9
 800cfa8:	4a44      	ldr	r2, [pc, #272]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cfaa:	5cd3      	ldrb	r3, [r2, r3]
 800cfac:	2b30      	cmp	r3, #48	; 0x30
 800cfae:	d915      	bls.n	800cfdc <Calibration_I_data_Refresh+0x154>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800cfb0:	4b41      	ldr	r3, [pc, #260]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	3b09      	subs	r3, #9
 800cfb6:	4a41      	ldr	r2, [pc, #260]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cfb8:	5cd2      	ldrb	r2, [r2, r3]
 800cfba:	3a01      	subs	r2, #1
 800cfbc:	b2d1      	uxtb	r1, r2
 800cfbe:	4a3f      	ldr	r2, [pc, #252]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cfc0:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cfc2:	4b3d      	ldr	r3, [pc, #244]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	4b3b      	ldr	r3, [pc, #236]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfcc:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800cfce:	4b3a      	ldr	r3, [pc, #232]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	3b09      	subs	r3, #9
 800cfd4:	4a39      	ldr	r2, [pc, #228]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cfd6:	2139      	movs	r1, #57	; 0x39
 800cfd8:	54d1      	strb	r1, [r2, r3]
 800cfda:	e012      	b.n	800d002 <Calibration_I_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800cfdc:	4b36      	ldr	r3, [pc, #216]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	4b34      	ldr	r3, [pc, #208]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfe6:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='0';
 800cfe8:	4b33      	ldr	r3, [pc, #204]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	3b09      	subs	r3, #9
 800cfee:	4a33      	ldr	r2, [pc, #204]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cff0:	2130      	movs	r1, #48	; 0x30
 800cff2:	54d1      	strb	r1, [r2, r3]
 800cff4:	e005      	b.n	800d002 <Calibration_I_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Current[Cursor_Position-9]='0';
 800cff6:	4b30      	ldr	r3, [pc, #192]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	3b09      	subs	r3, #9
 800cffc:	4a2f      	ldr	r2, [pc, #188]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800cffe:	2130      	movs	r1, #48	; 0x30
 800d000:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Current[Cursor_Position-9]>'9')
 800d002:	4b2d      	ldr	r3, [pc, #180]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	3b09      	subs	r3, #9
 800d008:	4a2c      	ldr	r2, [pc, #176]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d00a:	5cd3      	ldrb	r3, [r2, r3]
 800d00c:	2b39      	cmp	r3, #57	; 0x39
 800d00e:	d94f      	bls.n	800d0b0 <Calibration_I_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800d010:	4b29      	ldr	r3, [pc, #164]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d041      	beq.n	800d09c <Calibration_I_data_Refresh+0x214>
		{
			String_Calibration_Current[Cursor_Position-9]='0';
 800d018:	4b27      	ldr	r3, [pc, #156]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	3b09      	subs	r3, #9
 800d01e:	4a27      	ldr	r2, [pc, #156]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d020:	2130      	movs	r1, #48	; 0x30
 800d022:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d024:	4b24      	ldr	r3, [pc, #144]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	3b01      	subs	r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	4b22      	ldr	r3, [pc, #136]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d02e:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]++;
 800d030:	4b21      	ldr	r3, [pc, #132]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	3b09      	subs	r3, #9
 800d036:	4a21      	ldr	r2, [pc, #132]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d038:	5cd2      	ldrb	r2, [r2, r3]
 800d03a:	3201      	adds	r2, #1
 800d03c:	b2d1      	uxtb	r1, r2
 800d03e:	4a1f      	ldr	r2, [pc, #124]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d040:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800d042:	4b1d      	ldr	r3, [pc, #116]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	3b09      	subs	r3, #9
 800d048:	4a1c      	ldr	r2, [pc, #112]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d04a:	5cd3      	ldrb	r3, [r2, r3]
 800d04c:	2b39      	cmp	r3, #57	; 0x39
 800d04e:	d91e      	bls.n	800d08e <Calibration_I_data_Refresh+0x206>
 800d050:	4b19      	ldr	r3, [pc, #100]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d01a      	beq.n	800d08e <Calibration_I_data_Refresh+0x206>
			{
				String_Calibration_Current[Cursor_Position-9]='0';
 800d058:	4b17      	ldr	r3, [pc, #92]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	3b09      	subs	r3, #9
 800d05e:	4a17      	ldr	r2, [pc, #92]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d060:	2130      	movs	r1, #48	; 0x30
 800d062:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d064:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	3b01      	subs	r3, #1
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d06e:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]++;
 800d070:	4b11      	ldr	r3, [pc, #68]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	3b09      	subs	r3, #9
 800d076:	4a11      	ldr	r2, [pc, #68]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d078:	5cd2      	ldrb	r2, [r2, r3]
 800d07a:	3201      	adds	r2, #1
 800d07c:	b2d1      	uxtb	r1, r2
 800d07e:	4a0f      	ldr	r2, [pc, #60]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d080:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d082:	4b0d      	ldr	r3, [pc, #52]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	3301      	adds	r3, #1
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d08c:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d08e:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	3301      	adds	r3, #1
 800d094:	b2da      	uxtb	r2, r3
 800d096:	4b08      	ldr	r3, [pc, #32]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d098:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]='9';
		}

	}

}
 800d09a:	e009      	b.n	800d0b0 <Calibration_I_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800d09c:	4b06      	ldr	r3, [pc, #24]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d105      	bne.n	800d0b0 <Calibration_I_data_Refresh+0x228>
			String_Calibration_Current[Cursor_Position-9]='9';
 800d0a4:	4b04      	ldr	r3, [pc, #16]	; (800d0b8 <Calibration_I_data_Refresh+0x230>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	3b09      	subs	r3, #9
 800d0aa:	4a04      	ldr	r2, [pc, #16]	; (800d0bc <Calibration_I_data_Refresh+0x234>)
 800d0ac:	2139      	movs	r1, #57	; 0x39
 800d0ae:	54d1      	strb	r1, [r2, r3]
}
 800d0b0:	46c0      	nop			; (mov r8, r8)
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	46c0      	nop			; (mov r8, r8)
 800d0b8:	20003b22 	.word	0x20003b22
 800d0bc:	20003098 	.word	0x20003098
 800d0c0:	20003384 	.word	0x20003384

0800d0c4 <Vset_data_Refresh>:

static void Vset_data_Refresh(void)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
	String_Voltage[Cursor_Position]+=Flag.Encoder_BF;
 800d0c8:	4bb0      	ldr	r3, [pc, #704]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	001a      	movs	r2, r3
 800d0ce:	4bb0      	ldr	r3, [pc, #704]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d0d0:	5c9a      	ldrb	r2, [r3, r2]
 800d0d2:	4bb0      	ldr	r3, [pc, #704]	; (800d394 <Vset_data_Refresh+0x2d0>)
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	49ac      	ldr	r1, [pc, #688]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d0da:	7809      	ldrb	r1, [r1, #0]
 800d0dc:	18d3      	adds	r3, r2, r3
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	4bab      	ldr	r3, [pc, #684]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d0e2:	545a      	strb	r2, [r3, r1]
	if(Cursor_Position==3||Cursor_Position==4)
 800d0e4:	4ba9      	ldr	r3, [pc, #676]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b03      	cmp	r3, #3
 800d0ea:	d003      	beq.n	800d0f4 <Vset_data_Refresh+0x30>
 800d0ec:	4ba7      	ldr	r3, [pc, #668]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b04      	cmp	r3, #4
 800d0f2:	d11b      	bne.n	800d12c <Vset_data_Refresh+0x68>
	{
		if(String_Voltage[Cursor_Position]<'0')
 800d0f4:	4ba5      	ldr	r3, [pc, #660]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	001a      	movs	r2, r3
 800d0fa:	4ba5      	ldr	r3, [pc, #660]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d0fc:	5c9b      	ldrb	r3, [r3, r2]
 800d0fe:	2b2f      	cmp	r3, #47	; 0x2f
 800d100:	d806      	bhi.n	800d110 <Vset_data_Refresh+0x4c>
		{
			String_Voltage[Cursor_Position]='0';
 800d102:	4ba2      	ldr	r3, [pc, #648]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	001a      	movs	r2, r3
 800d108:	4ba1      	ldr	r3, [pc, #644]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d10a:	2130      	movs	r1, #48	; 0x30
 800d10c:	5499      	strb	r1, [r3, r2]
			return;
 800d10e:	e13a      	b.n	800d386 <Vset_data_Refresh+0x2c2>
		}
		if(String_Voltage[Cursor_Position]>'9')
 800d110:	4b9e      	ldr	r3, [pc, #632]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	001a      	movs	r2, r3
 800d116:	4b9e      	ldr	r3, [pc, #632]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d118:	5c9b      	ldrb	r3, [r3, r2]
 800d11a:	2b39      	cmp	r3, #57	; 0x39
 800d11c:	d906      	bls.n	800d12c <Vset_data_Refresh+0x68>
		{
			String_Voltage[Cursor_Position]='9';
 800d11e:	4b9b      	ldr	r3, [pc, #620]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	001a      	movs	r2, r3
 800d124:	4b9a      	ldr	r3, [pc, #616]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d126:	2139      	movs	r1, #57	; 0x39
 800d128:	5499      	strb	r1, [r3, r2]
			return;
 800d12a:	e12c      	b.n	800d386 <Vset_data_Refresh+0x2c2>
		}
	}

	if(String_Voltage[Cursor_Position]<'0')
 800d12c:	4b97      	ldr	r3, [pc, #604]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	001a      	movs	r2, r3
 800d132:	4b97      	ldr	r3, [pc, #604]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d134:	5c9b      	ldrb	r3, [r3, r2]
 800d136:	2b2f      	cmp	r3, #47	; 0x2f
 800d138:	d900      	bls.n	800d13c <Vset_data_Refresh+0x78>
 800d13a:	e0a0      	b.n	800d27e <Vset_data_Refresh+0x1ba>
	{
		/*第三位退位*/
		if(Cursor_Position==2)
 800d13c:	4b93      	ldr	r3, [pc, #588]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	2b02      	cmp	r3, #2
 800d142:	d163      	bne.n	800d20c <Vset_data_Refresh+0x148>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d144:	4b91      	ldr	r3, [pc, #580]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	3b01      	subs	r3, #1
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	4b8f      	ldr	r3, [pc, #572]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d14e:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800d150:	4b8e      	ldr	r3, [pc, #568]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	001a      	movs	r2, r3
 800d156:	4b8e      	ldr	r3, [pc, #568]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d158:	5c9b      	ldrb	r3, [r3, r2]
 800d15a:	2b30      	cmp	r3, #48	; 0x30
 800d15c:	d914      	bls.n	800d188 <Vset_data_Refresh+0xc4>
			{
				String_Voltage[Cursor_Position]--;
 800d15e:	4b8b      	ldr	r3, [pc, #556]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	4a8b      	ldr	r2, [pc, #556]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d164:	5cd2      	ldrb	r2, [r2, r3]
 800d166:	3a01      	subs	r2, #1
 800d168:	b2d1      	uxtb	r1, r2
 800d16a:	4a89      	ldr	r2, [pc, #548]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d16c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d16e:	4b87      	ldr	r3, [pc, #540]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	3301      	adds	r3, #1
 800d174:	b2da      	uxtb	r2, r3
 800d176:	4b85      	ldr	r3, [pc, #532]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d178:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800d17a:	4b84      	ldr	r3, [pc, #528]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	001a      	movs	r2, r3
 800d180:	4b83      	ldr	r3, [pc, #524]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d182:	2139      	movs	r1, #57	; 0x39
 800d184:	5499      	strb	r1, [r3, r2]
 800d186:	e07a      	b.n	800d27e <Vset_data_Refresh+0x1ba>

			}
			else if(String_Voltage[Cursor_Position]=='0')
 800d188:	4b80      	ldr	r3, [pc, #512]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	001a      	movs	r2, r3
 800d18e:	4b80      	ldr	r3, [pc, #512]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d190:	5c9b      	ldrb	r3, [r3, r2]
 800d192:	2b30      	cmp	r3, #48	; 0x30
 800d194:	d173      	bne.n	800d27e <Vset_data_Refresh+0x1ba>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800d196:	4b7d      	ldr	r3, [pc, #500]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	4b7b      	ldr	r3, [pc, #492]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1a0:	701a      	strb	r2, [r3, #0]
				if(String_Voltage[Cursor_Position]>'0')
 800d1a2:	4b7a      	ldr	r3, [pc, #488]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	001a      	movs	r2, r3
 800d1a8:	4b79      	ldr	r3, [pc, #484]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d1aa:	5c9b      	ldrb	r3, [r3, r2]
 800d1ac:	2b30      	cmp	r3, #48	; 0x30
 800d1ae:	d920      	bls.n	800d1f2 <Vset_data_Refresh+0x12e>
				{
					String_Voltage[Cursor_Position]--;
 800d1b0:	4b76      	ldr	r3, [pc, #472]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	4a76      	ldr	r2, [pc, #472]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d1b6:	5cd2      	ldrb	r2, [r2, r3]
 800d1b8:	3a01      	subs	r2, #1
 800d1ba:	b2d1      	uxtb	r1, r2
 800d1bc:	4a74      	ldr	r2, [pc, #464]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d1be:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d1c0:	4b72      	ldr	r3, [pc, #456]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	4b70      	ldr	r3, [pc, #448]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1ca:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800d1cc:	4b6f      	ldr	r3, [pc, #444]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	001a      	movs	r2, r3
 800d1d2:	4b6f      	ldr	r3, [pc, #444]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d1d4:	2139      	movs	r1, #57	; 0x39
 800d1d6:	5499      	strb	r1, [r3, r2]
					Cursor_Position++;
 800d1d8:	4b6c      	ldr	r3, [pc, #432]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	b2da      	uxtb	r2, r3
 800d1e0:	4b6a      	ldr	r3, [pc, #424]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1e2:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800d1e4:	4b69      	ldr	r3, [pc, #420]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	001a      	movs	r2, r3
 800d1ea:	4b69      	ldr	r3, [pc, #420]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d1ec:	2139      	movs	r1, #57	; 0x39
 800d1ee:	5499      	strb	r1, [r3, r2]
 800d1f0:	e045      	b.n	800d27e <Vset_data_Refresh+0x1ba>


				}
				else
				{
					Cursor_Position+=2;
 800d1f2:	4b66      	ldr	r3, [pc, #408]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	3302      	adds	r3, #2
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	4b64      	ldr	r3, [pc, #400]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d1fc:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='0';
 800d1fe:	4b63      	ldr	r3, [pc, #396]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	001a      	movs	r2, r3
 800d204:	4b62      	ldr	r3, [pc, #392]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d206:	2130      	movs	r1, #48	; 0x30
 800d208:	5499      	strb	r1, [r3, r2]
 800d20a:	e038      	b.n	800d27e <Vset_data_Refresh+0x1ba>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1)
 800d20c:	4b5f      	ldr	r3, [pc, #380]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d12e      	bne.n	800d272 <Vset_data_Refresh+0x1ae>
		{
			Cursor_Position--;
 800d214:	4b5d      	ldr	r3, [pc, #372]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	3b01      	subs	r3, #1
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	4b5b      	ldr	r3, [pc, #364]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d21e:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800d220:	4b5a      	ldr	r3, [pc, #360]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	001a      	movs	r2, r3
 800d226:	4b5a      	ldr	r3, [pc, #360]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d228:	5c9b      	ldrb	r3, [r3, r2]
 800d22a:	2b30      	cmp	r3, #48	; 0x30
 800d22c:	d914      	bls.n	800d258 <Vset_data_Refresh+0x194>
			{
				String_Voltage[Cursor_Position]--;
 800d22e:	4b57      	ldr	r3, [pc, #348]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	4a57      	ldr	r2, [pc, #348]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d234:	5cd2      	ldrb	r2, [r2, r3]
 800d236:	3a01      	subs	r2, #1
 800d238:	b2d1      	uxtb	r1, r2
 800d23a:	4a55      	ldr	r2, [pc, #340]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d23c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d23e:	4b53      	ldr	r3, [pc, #332]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	3301      	adds	r3, #1
 800d244:	b2da      	uxtb	r2, r3
 800d246:	4b51      	ldr	r3, [pc, #324]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d248:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800d24a:	4b50      	ldr	r3, [pc, #320]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	001a      	movs	r2, r3
 800d250:	4b4f      	ldr	r3, [pc, #316]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d252:	2139      	movs	r1, #57	; 0x39
 800d254:	5499      	strb	r1, [r3, r2]
 800d256:	e012      	b.n	800d27e <Vset_data_Refresh+0x1ba>

			}
			else
			{
				Cursor_Position++;
 800d258:	4b4c      	ldr	r3, [pc, #304]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	3301      	adds	r3, #1
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	4b4a      	ldr	r3, [pc, #296]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d262:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='0';
 800d264:	4b49      	ldr	r3, [pc, #292]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	001a      	movs	r2, r3
 800d26a:	4b49      	ldr	r3, [pc, #292]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d26c:	2130      	movs	r1, #48	; 0x30
 800d26e:	5499      	strb	r1, [r3, r2]
 800d270:	e005      	b.n	800d27e <Vset_data_Refresh+0x1ba>
			}
		}
		else String_Voltage[Cursor_Position]='0';
 800d272:	4b46      	ldr	r3, [pc, #280]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	001a      	movs	r2, r3
 800d278:	4b45      	ldr	r3, [pc, #276]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d27a:	2130      	movs	r1, #48	; 0x30
 800d27c:	5499      	strb	r1, [r3, r2]
	}
	if(String_Voltage[Cursor_Position]>'9')
 800d27e:	4b43      	ldr	r3, [pc, #268]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	001a      	movs	r2, r3
 800d284:	4b42      	ldr	r3, [pc, #264]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d286:	5c9b      	ldrb	r3, [r3, r2]
 800d288:	2b39      	cmp	r3, #57	; 0x39
 800d28a:	d94d      	bls.n	800d328 <Vset_data_Refresh+0x264>
	{
		/*进位处理*/
		if(Cursor_Position!=0)
 800d28c:	4b3f      	ldr	r3, [pc, #252]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d03f      	beq.n	800d314 <Vset_data_Refresh+0x250>
		{
			String_Voltage[Cursor_Position]='0';
 800d294:	4b3d      	ldr	r3, [pc, #244]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	001a      	movs	r2, r3
 800d29a:	4b3d      	ldr	r3, [pc, #244]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d29c:	2130      	movs	r1, #48	; 0x30
 800d29e:	5499      	strb	r1, [r3, r2]
			Cursor_Position--;
 800d2a0:	4b3a      	ldr	r3, [pc, #232]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	4b38      	ldr	r3, [pc, #224]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2aa:	701a      	strb	r2, [r3, #0]
			String_Voltage[Cursor_Position]++;
 800d2ac:	4b37      	ldr	r3, [pc, #220]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	4a37      	ldr	r2, [pc, #220]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d2b2:	5cd2      	ldrb	r2, [r2, r3]
 800d2b4:	3201      	adds	r2, #1
 800d2b6:	b2d1      	uxtb	r1, r2
 800d2b8:	4a35      	ldr	r2, [pc, #212]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d2ba:	54d1      	strb	r1, [r2, r3]
			if(String_Voltage[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800d2bc:	4b33      	ldr	r3, [pc, #204]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	001a      	movs	r2, r3
 800d2c2:	4b33      	ldr	r3, [pc, #204]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d2c4:	5c9b      	ldrb	r3, [r3, r2]
 800d2c6:	2b39      	cmp	r3, #57	; 0x39
 800d2c8:	d91d      	bls.n	800d306 <Vset_data_Refresh+0x242>
 800d2ca:	4b30      	ldr	r3, [pc, #192]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d019      	beq.n	800d306 <Vset_data_Refresh+0x242>
			{
				String_Voltage[Cursor_Position]='0';
 800d2d2:	4b2e      	ldr	r3, [pc, #184]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	001a      	movs	r2, r3
 800d2d8:	4b2d      	ldr	r3, [pc, #180]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d2da:	2130      	movs	r1, #48	; 0x30
 800d2dc:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800d2de:	4b2b      	ldr	r3, [pc, #172]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	4b29      	ldr	r3, [pc, #164]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2e8:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]++;
 800d2ea:	4b28      	ldr	r3, [pc, #160]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	4a28      	ldr	r2, [pc, #160]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d2f0:	5cd2      	ldrb	r2, [r2, r3]
 800d2f2:	3201      	adds	r2, #1
 800d2f4:	b2d1      	uxtb	r1, r2
 800d2f6:	4a26      	ldr	r2, [pc, #152]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d2f8:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d2fa:	4b24      	ldr	r3, [pc, #144]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	3301      	adds	r3, #1
 800d300:	b2da      	uxtb	r2, r3
 800d302:	4b22      	ldr	r3, [pc, #136]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d304:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d306:	4b21      	ldr	r3, [pc, #132]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	3301      	adds	r3, #1
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	4b1f      	ldr	r3, [pc, #124]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d310:	701a      	strb	r2, [r3, #0]
 800d312:	e009      	b.n	800d328 <Vset_data_Refresh+0x264>
		}
		else if(Cursor_Position==0)
 800d314:	4b1d      	ldr	r3, [pc, #116]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d105      	bne.n	800d328 <Vset_data_Refresh+0x264>
		{
			String_Voltage[Cursor_Position]='9';
 800d31c:	4b1b      	ldr	r3, [pc, #108]	; (800d38c <Vset_data_Refresh+0x2c8>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	001a      	movs	r2, r3
 800d322:	4b1b      	ldr	r3, [pc, #108]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d324:	2139      	movs	r1, #57	; 0x39
 800d326:	5499      	strb	r1, [r3, r2]
		}

	}

	if(Inner_Mode==ENABLE)
 800d328:	4b1b      	ldr	r3, [pc, #108]	; (800d398 <Vset_data_Refresh+0x2d4>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d12a      	bne.n	800d386 <Vset_data_Refresh+0x2c2>
	{
		/*确认设定电压，发送给mini board*/
		Set_Voltage = String_To_Float(String_Voltage)*100;
 800d330:	4b17      	ldr	r3, [pc, #92]	; (800d390 <Vset_data_Refresh+0x2cc>)
 800d332:	0018      	movs	r0, r3
 800d334:	f001 fa1c 	bl	800e770 <String_To_Float>
 800d338:	1c03      	adds	r3, r0, #0
 800d33a:	4918      	ldr	r1, [pc, #96]	; (800d39c <Vset_data_Refresh+0x2d8>)
 800d33c:	1c18      	adds	r0, r3, #0
 800d33e:	f7f3 fc8f 	bl	8000c60 <__aeabi_fmul>
 800d342:	1c03      	adds	r3, r0, #0
 800d344:	1c18      	adds	r0, r3, #0
 800d346:	f7f3 f8ef 	bl	8000528 <__aeabi_f2uiz>
 800d34a:	0003      	movs	r3, r0
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	4b14      	ldr	r3, [pc, #80]	; (800d3a0 <Vset_data_Refresh+0x2dc>)
 800d350:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 14900) Set_Voltage = 14900;//150V
 800d352:	4b13      	ldr	r3, [pc, #76]	; (800d3a0 <Vset_data_Refresh+0x2dc>)
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	4a13      	ldr	r2, [pc, #76]	; (800d3a4 <Vset_data_Refresh+0x2e0>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d902      	bls.n	800d362 <Vset_data_Refresh+0x29e>
 800d35c:	4b10      	ldr	r3, [pc, #64]	; (800d3a0 <Vset_data_Refresh+0x2dc>)
 800d35e:	4a11      	ldr	r2, [pc, #68]	; (800d3a4 <Vset_data_Refresh+0x2e0>)
 800d360:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage <100||Set_Voltage==100)	Set_Voltage=100;
 800d362:	4b0f      	ldr	r3, [pc, #60]	; (800d3a0 <Vset_data_Refresh+0x2dc>)
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	2b63      	cmp	r3, #99	; 0x63
 800d368:	d903      	bls.n	800d372 <Vset_data_Refresh+0x2ae>
 800d36a:	4b0d      	ldr	r3, [pc, #52]	; (800d3a0 <Vset_data_Refresh+0x2dc>)
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	2b64      	cmp	r3, #100	; 0x64
 800d370:	d102      	bne.n	800d378 <Vset_data_Refresh+0x2b4>
 800d372:	4b0b      	ldr	r3, [pc, #44]	; (800d3a0 <Vset_data_Refresh+0x2dc>)
 800d374:	2264      	movs	r2, #100	; 0x64
 800d376:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,4,Set_Voltage);
 800d378:	4b09      	ldr	r3, [pc, #36]	; (800d3a0 <Vset_data_Refresh+0x2dc>)
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	001a      	movs	r2, r3
 800d37e:	2104      	movs	r1, #4
 800d380:	2001      	movs	r0, #1
 800d382:	f7ff fad9 	bl	800c938 <DAC_Cmd_send>

	}

}
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	46c0      	nop			; (mov r8, r8)
 800d38c:	20003b22 	.word	0x20003b22
 800d390:	20003058 	.word	0x20003058
 800d394:	20003384 	.word	0x20003384
 800d398:	20003b1a 	.word	0x20003b1a
 800d39c:	42c80000 	.word	0x42c80000
 800d3a0:	20002fd8 	.word	0x20002fd8
 800d3a4:	00003a34 	.word	0x00003a34

0800d3a8 <Iset_data_Refresh>:


static void Iset_data_Refresh(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
	String_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800d3ac:	4bb3      	ldr	r3, [pc, #716]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	3b09      	subs	r3, #9
 800d3b2:	4ab3      	ldr	r2, [pc, #716]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d3b4:	5cd1      	ldrb	r1, [r2, r3]
 800d3b6:	4bb3      	ldr	r3, [pc, #716]	; (800d684 <Iset_data_Refresh+0x2dc>)
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	4baf      	ldr	r3, [pc, #700]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	3b09      	subs	r3, #9
 800d3c2:	188a      	adds	r2, r1, r2
 800d3c4:	b2d1      	uxtb	r1, r2
 800d3c6:	4aae      	ldr	r2, [pc, #696]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d3c8:	54d1      	strb	r1, [r2, r3]
	if(Cursor_Position==13||Cursor_Position==14)
 800d3ca:	4bac      	ldr	r3, [pc, #688]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	2b0d      	cmp	r3, #13
 800d3d0:	d003      	beq.n	800d3da <Iset_data_Refresh+0x32>
 800d3d2:	4baa      	ldr	r3, [pc, #680]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b0e      	cmp	r3, #14
 800d3d8:	d11b      	bne.n	800d412 <Iset_data_Refresh+0x6a>
	{
		if(String_Current[Cursor_Position-9]<'0')
 800d3da:	4ba8      	ldr	r3, [pc, #672]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	3b09      	subs	r3, #9
 800d3e0:	4aa7      	ldr	r2, [pc, #668]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d3e2:	5cd3      	ldrb	r3, [r2, r3]
 800d3e4:	2b2f      	cmp	r3, #47	; 0x2f
 800d3e6:	d806      	bhi.n	800d3f6 <Iset_data_Refresh+0x4e>
		{
			String_Current[Cursor_Position-9]='0';
 800d3e8:	4ba4      	ldr	r3, [pc, #656]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	3b09      	subs	r3, #9
 800d3ee:	4aa4      	ldr	r2, [pc, #656]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d3f0:	2130      	movs	r1, #48	; 0x30
 800d3f2:	54d1      	strb	r1, [r2, r3]
			return;
 800d3f4:	e13f      	b.n	800d676 <Iset_data_Refresh+0x2ce>
		}
		if(String_Current[Cursor_Position-9]>'9')
 800d3f6:	4ba1      	ldr	r3, [pc, #644]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	3b09      	subs	r3, #9
 800d3fc:	4aa0      	ldr	r2, [pc, #640]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d3fe:	5cd3      	ldrb	r3, [r2, r3]
 800d400:	2b39      	cmp	r3, #57	; 0x39
 800d402:	d906      	bls.n	800d412 <Iset_data_Refresh+0x6a>
		{
			String_Current[Cursor_Position-9]='9';
 800d404:	4b9d      	ldr	r3, [pc, #628]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	3b09      	subs	r3, #9
 800d40a:	4a9d      	ldr	r2, [pc, #628]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d40c:	2139      	movs	r1, #57	; 0x39
 800d40e:	54d1      	strb	r1, [r2, r3]
			return;
 800d410:	e131      	b.n	800d676 <Iset_data_Refresh+0x2ce>
		}
	}
	if(String_Current[Cursor_Position-9]<'0')//退位
 800d412:	4b9a      	ldr	r3, [pc, #616]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	3b09      	subs	r3, #9
 800d418:	4a99      	ldr	r2, [pc, #612]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d41a:	5cd3      	ldrb	r3, [r2, r3]
 800d41c:	2b2f      	cmp	r3, #47	; 0x2f
 800d41e:	d900      	bls.n	800d422 <Iset_data_Refresh+0x7a>
 800d420:	e0a3      	b.n	800d56a <Iset_data_Refresh+0x1c2>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800d422:	4b96      	ldr	r3, [pc, #600]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2b0b      	cmp	r3, #11
 800d428:	d165      	bne.n	800d4f6 <Iset_data_Refresh+0x14e>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d42a:	4b94      	ldr	r3, [pc, #592]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	3b01      	subs	r3, #1
 800d430:	b2da      	uxtb	r2, r3
 800d432:	4b92      	ldr	r3, [pc, #584]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d434:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d436:	4b91      	ldr	r3, [pc, #580]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	3b09      	subs	r3, #9
 800d43c:	4a90      	ldr	r2, [pc, #576]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d43e:	5cd3      	ldrb	r3, [r2, r3]
 800d440:	2b30      	cmp	r3, #48	; 0x30
 800d442:	d915      	bls.n	800d470 <Iset_data_Refresh+0xc8>
			{
				String_Current[Cursor_Position-9]--;
 800d444:	4b8d      	ldr	r3, [pc, #564]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	3b09      	subs	r3, #9
 800d44a:	4a8d      	ldr	r2, [pc, #564]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d44c:	5cd2      	ldrb	r2, [r2, r3]
 800d44e:	3a01      	subs	r2, #1
 800d450:	b2d1      	uxtb	r1, r2
 800d452:	4a8b      	ldr	r2, [pc, #556]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d454:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d456:	4b89      	ldr	r3, [pc, #548]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	3301      	adds	r3, #1
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	4b87      	ldr	r3, [pc, #540]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d460:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d462:	4b86      	ldr	r3, [pc, #536]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	3b09      	subs	r3, #9
 800d468:	4a85      	ldr	r2, [pc, #532]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d46a:	2139      	movs	r1, #57	; 0x39
 800d46c:	54d1      	strb	r1, [r2, r3]
 800d46e:	e07c      	b.n	800d56a <Iset_data_Refresh+0x1c2>

			}
			else if(String_Current[Cursor_Position-9]=='0')
 800d470:	4b82      	ldr	r3, [pc, #520]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	3b09      	subs	r3, #9
 800d476:	4a82      	ldr	r2, [pc, #520]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d478:	5cd3      	ldrb	r3, [r2, r3]
 800d47a:	2b30      	cmp	r3, #48	; 0x30
 800d47c:	d175      	bne.n	800d56a <Iset_data_Refresh+0x1c2>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800d47e:	4b7f      	ldr	r3, [pc, #508]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	3b01      	subs	r3, #1
 800d484:	b2da      	uxtb	r2, r3
 800d486:	4b7d      	ldr	r3, [pc, #500]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d488:	701a      	strb	r2, [r3, #0]
				if(String_Current[Cursor_Position-9]>'0')
 800d48a:	4b7c      	ldr	r3, [pc, #496]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	3b09      	subs	r3, #9
 800d490:	4a7b      	ldr	r2, [pc, #492]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d492:	5cd3      	ldrb	r3, [r2, r3]
 800d494:	2b30      	cmp	r3, #48	; 0x30
 800d496:	d921      	bls.n	800d4dc <Iset_data_Refresh+0x134>
				{
					String_Current[Cursor_Position-9]--;
 800d498:	4b78      	ldr	r3, [pc, #480]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	3b09      	subs	r3, #9
 800d49e:	4a78      	ldr	r2, [pc, #480]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d4a0:	5cd2      	ldrb	r2, [r2, r3]
 800d4a2:	3a01      	subs	r2, #1
 800d4a4:	b2d1      	uxtb	r1, r2
 800d4a6:	4a76      	ldr	r2, [pc, #472]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d4a8:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d4aa:	4b74      	ldr	r3, [pc, #464]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	b2da      	uxtb	r2, r3
 800d4b2:	4b72      	ldr	r3, [pc, #456]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4b4:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d4b6:	4b71      	ldr	r3, [pc, #452]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	3b09      	subs	r3, #9
 800d4bc:	4a70      	ldr	r2, [pc, #448]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d4be:	2139      	movs	r1, #57	; 0x39
 800d4c0:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d4c2:	4b6e      	ldr	r3, [pc, #440]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	4b6c      	ldr	r3, [pc, #432]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4cc:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d4ce:	4b6b      	ldr	r3, [pc, #428]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	3b09      	subs	r3, #9
 800d4d4:	4a6a      	ldr	r2, [pc, #424]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d4d6:	2139      	movs	r1, #57	; 0x39
 800d4d8:	54d1      	strb	r1, [r2, r3]
 800d4da:	e046      	b.n	800d56a <Iset_data_Refresh+0x1c2>


				}
				else
				{
					Cursor_Position+=2;
 800d4dc:	4b67      	ldr	r3, [pc, #412]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	3302      	adds	r3, #2
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	4b65      	ldr	r3, [pc, #404]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4e6:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='0';
 800d4e8:	4b64      	ldr	r3, [pc, #400]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	3b09      	subs	r3, #9
 800d4ee:	4a64      	ldr	r2, [pc, #400]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d4f0:	2130      	movs	r1, #48	; 0x30
 800d4f2:	54d1      	strb	r1, [r2, r3]
 800d4f4:	e039      	b.n	800d56a <Iset_data_Refresh+0x1c2>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800d4f6:	4b61      	ldr	r3, [pc, #388]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	2b0a      	cmp	r3, #10
 800d4fc:	d12f      	bne.n	800d55e <Iset_data_Refresh+0x1b6>
		{
			Cursor_Position--;
 800d4fe:	4b5f      	ldr	r3, [pc, #380]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	3b01      	subs	r3, #1
 800d504:	b2da      	uxtb	r2, r3
 800d506:	4b5d      	ldr	r3, [pc, #372]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d508:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d50a:	4b5c      	ldr	r3, [pc, #368]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	3b09      	subs	r3, #9
 800d510:	4a5b      	ldr	r2, [pc, #364]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d512:	5cd3      	ldrb	r3, [r2, r3]
 800d514:	2b30      	cmp	r3, #48	; 0x30
 800d516:	d915      	bls.n	800d544 <Iset_data_Refresh+0x19c>
			{
				String_Current[Cursor_Position-9]--;
 800d518:	4b58      	ldr	r3, [pc, #352]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	3b09      	subs	r3, #9
 800d51e:	4a58      	ldr	r2, [pc, #352]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d520:	5cd2      	ldrb	r2, [r2, r3]
 800d522:	3a01      	subs	r2, #1
 800d524:	b2d1      	uxtb	r1, r2
 800d526:	4a56      	ldr	r2, [pc, #344]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d528:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d52a:	4b54      	ldr	r3, [pc, #336]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	3301      	adds	r3, #1
 800d530:	b2da      	uxtb	r2, r3
 800d532:	4b52      	ldr	r3, [pc, #328]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d534:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d536:	4b51      	ldr	r3, [pc, #324]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	3b09      	subs	r3, #9
 800d53c:	4a50      	ldr	r2, [pc, #320]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d53e:	2139      	movs	r1, #57	; 0x39
 800d540:	54d1      	strb	r1, [r2, r3]
 800d542:	e012      	b.n	800d56a <Iset_data_Refresh+0x1c2>

			}
			else
			{
				Cursor_Position++;
 800d544:	4b4d      	ldr	r3, [pc, #308]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	3301      	adds	r3, #1
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	4b4b      	ldr	r3, [pc, #300]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d54e:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='0';
 800d550:	4b4a      	ldr	r3, [pc, #296]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	3b09      	subs	r3, #9
 800d556:	4a4a      	ldr	r2, [pc, #296]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d558:	2130      	movs	r1, #48	; 0x30
 800d55a:	54d1      	strb	r1, [r2, r3]
 800d55c:	e005      	b.n	800d56a <Iset_data_Refresh+0x1c2>
			}
		}
		else String_Current[Cursor_Position-9]='0';
 800d55e:	4b47      	ldr	r3, [pc, #284]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	3b09      	subs	r3, #9
 800d564:	4a46      	ldr	r2, [pc, #280]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d566:	2130      	movs	r1, #48	; 0x30
 800d568:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Current[Cursor_Position-9]>'9')
 800d56a:	4b44      	ldr	r3, [pc, #272]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	3b09      	subs	r3, #9
 800d570:	4a43      	ldr	r2, [pc, #268]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d572:	5cd3      	ldrb	r3, [r2, r3]
 800d574:	2b39      	cmp	r3, #57	; 0x39
 800d576:	d94f      	bls.n	800d618 <Iset_data_Refresh+0x270>
	{

		if(Cursor_Position!=0)
 800d578:	4b40      	ldr	r3, [pc, #256]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d041      	beq.n	800d604 <Iset_data_Refresh+0x25c>
		{
			String_Current[Cursor_Position-9]='0';
 800d580:	4b3e      	ldr	r3, [pc, #248]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	3b09      	subs	r3, #9
 800d586:	4a3e      	ldr	r2, [pc, #248]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d588:	2130      	movs	r1, #48	; 0x30
 800d58a:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d58c:	4b3b      	ldr	r3, [pc, #236]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	3b01      	subs	r3, #1
 800d592:	b2da      	uxtb	r2, r3
 800d594:	4b39      	ldr	r3, [pc, #228]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d596:	701a      	strb	r2, [r3, #0]
			String_Current[Cursor_Position-9]++;
 800d598:	4b38      	ldr	r3, [pc, #224]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	3b09      	subs	r3, #9
 800d59e:	4a38      	ldr	r2, [pc, #224]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d5a0:	5cd2      	ldrb	r2, [r2, r3]
 800d5a2:	3201      	adds	r2, #1
 800d5a4:	b2d1      	uxtb	r1, r2
 800d5a6:	4a36      	ldr	r2, [pc, #216]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d5a8:	54d1      	strb	r1, [r2, r3]
			if(String_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800d5aa:	4b34      	ldr	r3, [pc, #208]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	3b09      	subs	r3, #9
 800d5b0:	4a33      	ldr	r2, [pc, #204]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d5b2:	5cd3      	ldrb	r3, [r2, r3]
 800d5b4:	2b39      	cmp	r3, #57	; 0x39
 800d5b6:	d91e      	bls.n	800d5f6 <Iset_data_Refresh+0x24e>
 800d5b8:	4b30      	ldr	r3, [pc, #192]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d01a      	beq.n	800d5f6 <Iset_data_Refresh+0x24e>
			{
				String_Current[Cursor_Position-9]='0';
 800d5c0:	4b2e      	ldr	r3, [pc, #184]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	3b09      	subs	r3, #9
 800d5c6:	4a2e      	ldr	r2, [pc, #184]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d5c8:	2130      	movs	r1, #48	; 0x30
 800d5ca:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d5cc:	4b2b      	ldr	r3, [pc, #172]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	4b29      	ldr	r3, [pc, #164]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5d6:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]++;
 800d5d8:	4b28      	ldr	r3, [pc, #160]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	3b09      	subs	r3, #9
 800d5de:	4a28      	ldr	r2, [pc, #160]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d5e0:	5cd2      	ldrb	r2, [r2, r3]
 800d5e2:	3201      	adds	r2, #1
 800d5e4:	b2d1      	uxtb	r1, r2
 800d5e6:	4a26      	ldr	r2, [pc, #152]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d5e8:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d5ea:	4b24      	ldr	r3, [pc, #144]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	4b22      	ldr	r3, [pc, #136]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5f4:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d5f6:	4b21      	ldr	r3, [pc, #132]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	4b1f      	ldr	r3, [pc, #124]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d600:	701a      	strb	r2, [r3, #0]
 800d602:	e009      	b.n	800d618 <Iset_data_Refresh+0x270>
		}
		else if(Cursor_Position==0)
 800d604:	4b1d      	ldr	r3, [pc, #116]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d105      	bne.n	800d618 <Iset_data_Refresh+0x270>
		{
			String_Current[Cursor_Position-9]='9';
 800d60c:	4b1b      	ldr	r3, [pc, #108]	; (800d67c <Iset_data_Refresh+0x2d4>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	3b09      	subs	r3, #9
 800d612:	4a1b      	ldr	r2, [pc, #108]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d614:	2139      	movs	r1, #57	; 0x39
 800d616:	54d1      	strb	r1, [r2, r3]
		}

	}
	if(Inner_Mode==ENABLE)
 800d618:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <Iset_data_Refresh+0x2e0>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d12a      	bne.n	800d676 <Iset_data_Refresh+0x2ce>
	{
		/*确认设定电压，发送给mini board*/
		Set_Current = String_To_Float(String_Current)*100;
 800d620:	4b17      	ldr	r3, [pc, #92]	; (800d680 <Iset_data_Refresh+0x2d8>)
 800d622:	0018      	movs	r0, r3
 800d624:	f001 f8a4 	bl	800e770 <String_To_Float>
 800d628:	1c03      	adds	r3, r0, #0
 800d62a:	4918      	ldr	r1, [pc, #96]	; (800d68c <Iset_data_Refresh+0x2e4>)
 800d62c:	1c18      	adds	r0, r3, #0
 800d62e:	f7f3 fb17 	bl	8000c60 <__aeabi_fmul>
 800d632:	1c03      	adds	r3, r0, #0
 800d634:	1c18      	adds	r0, r3, #0
 800d636:	f7f2 ff77 	bl	8000528 <__aeabi_f2uiz>
 800d63a:	0003      	movs	r3, r0
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	4b14      	ldr	r3, [pc, #80]	; (800d690 <Iset_data_Refresh+0x2e8>)
 800d640:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 4900) Set_Current = 4900;//150V
 800d642:	4b13      	ldr	r3, [pc, #76]	; (800d690 <Iset_data_Refresh+0x2e8>)
 800d644:	881b      	ldrh	r3, [r3, #0]
 800d646:	4a13      	ldr	r2, [pc, #76]	; (800d694 <Iset_data_Refresh+0x2ec>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d902      	bls.n	800d652 <Iset_data_Refresh+0x2aa>
 800d64c:	4b10      	ldr	r3, [pc, #64]	; (800d690 <Iset_data_Refresh+0x2e8>)
 800d64e:	4a11      	ldr	r2, [pc, #68]	; (800d694 <Iset_data_Refresh+0x2ec>)
 800d650:	801a      	strh	r2, [r3, #0]
		if(Set_Current <100||Set_Current==100)	Set_Current=100;
 800d652:	4b0f      	ldr	r3, [pc, #60]	; (800d690 <Iset_data_Refresh+0x2e8>)
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	2b63      	cmp	r3, #99	; 0x63
 800d658:	d903      	bls.n	800d662 <Iset_data_Refresh+0x2ba>
 800d65a:	4b0d      	ldr	r3, [pc, #52]	; (800d690 <Iset_data_Refresh+0x2e8>)
 800d65c:	881b      	ldrh	r3, [r3, #0]
 800d65e:	2b64      	cmp	r3, #100	; 0x64
 800d660:	d102      	bne.n	800d668 <Iset_data_Refresh+0x2c0>
 800d662:	4b0b      	ldr	r3, [pc, #44]	; (800d690 <Iset_data_Refresh+0x2e8>)
 800d664:	2264      	movs	r2, #100	; 0x64
 800d666:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,5,Set_Current);
 800d668:	4b09      	ldr	r3, [pc, #36]	; (800d690 <Iset_data_Refresh+0x2e8>)
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	001a      	movs	r2, r3
 800d66e:	2105      	movs	r1, #5
 800d670:	2001      	movs	r0, #1
 800d672:	f7ff f961 	bl	800c938 <DAC_Cmd_send>

	}

}
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	46c0      	nop			; (mov r8, r8)
 800d67c:	20003b22 	.word	0x20003b22
 800d680:	20003060 	.word	0x20003060
 800d684:	20003384 	.word	0x20003384
 800d688:	20003b1a 	.word	0x20003b1a
 800d68c:	42c80000 	.word	0x42c80000
 800d690:	20002fda 	.word	0x20002fda
 800d694:	00001324 	.word	0x00001324

0800d698 <VRate_data_Refresh>:



static void VRate_data_Refresh(void)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	af00      	add	r7, sp, #0
	String_V_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800d69c:	4bdc      	ldr	r3, [pc, #880]	; (800da10 <VRate_data_Refresh+0x378>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	3b06      	subs	r3, #6
 800d6a2:	4adc      	ldr	r2, [pc, #880]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d6a4:	5cd1      	ldrb	r1, [r2, r3]
 800d6a6:	4bdc      	ldr	r3, [pc, #880]	; (800da18 <VRate_data_Refresh+0x380>)
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	4bd8      	ldr	r3, [pc, #864]	; (800da10 <VRate_data_Refresh+0x378>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	3b06      	subs	r3, #6
 800d6b2:	188a      	adds	r2, r1, r2
 800d6b4:	b2d1      	uxtb	r1, r2
 800d6b6:	4ad7      	ldr	r2, [pc, #860]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d6b8:	54d1      	strb	r1, [r2, r3]
	/*退位处理*/
	if(String_V_Rate[Cursor_Position-6]<'0')
 800d6ba:	4bd5      	ldr	r3, [pc, #852]	; (800da10 <VRate_data_Refresh+0x378>)
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	3b06      	subs	r3, #6
 800d6c0:	4ad4      	ldr	r2, [pc, #848]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d6c2:	5cd3      	ldrb	r3, [r2, r3]
 800d6c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d6c6:	d900      	bls.n	800d6ca <VRate_data_Refresh+0x32>
 800d6c8:	e0c2      	b.n	800d850 <VRate_data_Refresh+0x1b8>
	{

		/*小数第二位退位*/
		if(Cursor_Position==3+6)
 800d6ca:	4bd1      	ldr	r3, [pc, #836]	; (800da10 <VRate_data_Refresh+0x378>)
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	2b09      	cmp	r3, #9
 800d6d0:	d172      	bne.n	800d7b8 <VRate_data_Refresh+0x120>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d6d2:	4bcf      	ldr	r3, [pc, #828]	; (800da10 <VRate_data_Refresh+0x378>)
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	b2da      	uxtb	r2, r3
 800d6da:	4bcd      	ldr	r3, [pc, #820]	; (800da10 <VRate_data_Refresh+0x378>)
 800d6dc:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')
 800d6de:	4bcc      	ldr	r3, [pc, #816]	; (800da10 <VRate_data_Refresh+0x378>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	3b06      	subs	r3, #6
 800d6e4:	4acb      	ldr	r2, [pc, #812]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d6e6:	5cd3      	ldrb	r3, [r2, r3]
 800d6e8:	2b30      	cmp	r3, #48	; 0x30
 800d6ea:	d915      	bls.n	800d718 <VRate_data_Refresh+0x80>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d6ec:	4bc8      	ldr	r3, [pc, #800]	; (800da10 <VRate_data_Refresh+0x378>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	3b06      	subs	r3, #6
 800d6f2:	4ac8      	ldr	r2, [pc, #800]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d6f4:	5cd2      	ldrb	r2, [r2, r3]
 800d6f6:	3a01      	subs	r2, #1
 800d6f8:	b2d1      	uxtb	r1, r2
 800d6fa:	4ac6      	ldr	r2, [pc, #792]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d6fc:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d6fe:	4bc4      	ldr	r3, [pc, #784]	; (800da10 <VRate_data_Refresh+0x378>)
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	3301      	adds	r3, #1
 800d704:	b2da      	uxtb	r2, r3
 800d706:	4bc2      	ldr	r3, [pc, #776]	; (800da10 <VRate_data_Refresh+0x378>)
 800d708:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d70a:	4bc1      	ldr	r3, [pc, #772]	; (800da10 <VRate_data_Refresh+0x378>)
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	3b06      	subs	r3, #6
 800d710:	4ac0      	ldr	r2, [pc, #768]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d712:	2139      	movs	r1, #57	; 0x39
 800d714:	54d1      	strb	r1, [r2, r3]
 800d716:	e09b      	b.n	800d850 <VRate_data_Refresh+0x1b8>

			}
			else if(String_V_Rate[Cursor_Position-6]=='0')
 800d718:	4bbd      	ldr	r3, [pc, #756]	; (800da10 <VRate_data_Refresh+0x378>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	3b06      	subs	r3, #6
 800d71e:	4abd      	ldr	r2, [pc, #756]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d720:	5cd3      	ldrb	r3, [r2, r3]
 800d722:	2b30      	cmp	r3, #48	; 0x30
 800d724:	d000      	beq.n	800d728 <VRate_data_Refresh+0x90>
 800d726:	e093      	b.n	800d850 <VRate_data_Refresh+0x1b8>
			{
				/*否则再看个位是否大于0*/
				Cursor_Position--;
 800d728:	4bb9      	ldr	r3, [pc, #740]	; (800da10 <VRate_data_Refresh+0x378>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	3b01      	subs	r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	4bb7      	ldr	r3, [pc, #732]	; (800da10 <VRate_data_Refresh+0x378>)
 800d732:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d734:	4bb6      	ldr	r3, [pc, #728]	; (800da10 <VRate_data_Refresh+0x378>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	3b01      	subs	r3, #1
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	4bb4      	ldr	r3, [pc, #720]	; (800da10 <VRate_data_Refresh+0x378>)
 800d73e:	701a      	strb	r2, [r3, #0]
				if(String_V_Rate[Cursor_Position-6]>'0')
 800d740:	4bb3      	ldr	r3, [pc, #716]	; (800da10 <VRate_data_Refresh+0x378>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	3b06      	subs	r3, #6
 800d746:	4ab3      	ldr	r2, [pc, #716]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d748:	5cd3      	ldrb	r3, [r2, r3]
 800d74a:	2b30      	cmp	r3, #48	; 0x30
 800d74c:	d927      	bls.n	800d79e <VRate_data_Refresh+0x106>
				{
					String_V_Rate[Cursor_Position-6]--;
 800d74e:	4bb0      	ldr	r3, [pc, #704]	; (800da10 <VRate_data_Refresh+0x378>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	3b06      	subs	r3, #6
 800d754:	4aaf      	ldr	r2, [pc, #700]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d756:	5cd2      	ldrb	r2, [r2, r3]
 800d758:	3a01      	subs	r2, #1
 800d75a:	b2d1      	uxtb	r1, r2
 800d75c:	4aad      	ldr	r2, [pc, #692]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d75e:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d760:	4bab      	ldr	r3, [pc, #684]	; (800da10 <VRate_data_Refresh+0x378>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	3301      	adds	r3, #1
 800d766:	b2da      	uxtb	r2, r3
 800d768:	4ba9      	ldr	r3, [pc, #676]	; (800da10 <VRate_data_Refresh+0x378>)
 800d76a:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d76c:	4ba8      	ldr	r3, [pc, #672]	; (800da10 <VRate_data_Refresh+0x378>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	3301      	adds	r3, #1
 800d772:	b2da      	uxtb	r2, r3
 800d774:	4ba6      	ldr	r3, [pc, #664]	; (800da10 <VRate_data_Refresh+0x378>)
 800d776:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数一位
 800d778:	4ba5      	ldr	r3, [pc, #660]	; (800da10 <VRate_data_Refresh+0x378>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	3b06      	subs	r3, #6
 800d77e:	4aa5      	ldr	r2, [pc, #660]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d780:	2139      	movs	r1, #57	; 0x39
 800d782:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d784:	4ba2      	ldr	r3, [pc, #648]	; (800da10 <VRate_data_Refresh+0x378>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	3301      	adds	r3, #1
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	4ba0      	ldr	r3, [pc, #640]	; (800da10 <VRate_data_Refresh+0x378>)
 800d78e:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数二位
 800d790:	4b9f      	ldr	r3, [pc, #636]	; (800da10 <VRate_data_Refresh+0x378>)
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	3b06      	subs	r3, #6
 800d796:	4a9f      	ldr	r2, [pc, #636]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d798:	2139      	movs	r1, #57	; 0x39
 800d79a:	54d1      	strb	r1, [r2, r3]
 800d79c:	e058      	b.n	800d850 <VRate_data_Refresh+0x1b8>


				}
				else
				{
					Cursor_Position+=3;
 800d79e:	4b9c      	ldr	r3, [pc, #624]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	3303      	adds	r3, #3
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	4b9a      	ldr	r3, [pc, #616]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7a8:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';
 800d7aa:	4b99      	ldr	r3, [pc, #612]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	3b06      	subs	r3, #6
 800d7b0:	4a98      	ldr	r2, [pc, #608]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d7b2:	2130      	movs	r1, #48	; 0x30
 800d7b4:	54d1      	strb	r1, [r2, r3]
 800d7b6:	e04b      	b.n	800d850 <VRate_data_Refresh+0x1b8>
				}
			}

		}
		/*小数第一位退位*/
		else if(Cursor_Position==2+6)
 800d7b8:	4b95      	ldr	r3, [pc, #596]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	2b08      	cmp	r3, #8
 800d7be:	d141      	bne.n	800d844 <VRate_data_Refresh+0x1ac>
		{
			Cursor_Position--;
 800d7c0:	4b93      	ldr	r3, [pc, #588]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	4b91      	ldr	r3, [pc, #580]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7ca:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d7cc:	4b90      	ldr	r3, [pc, #576]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	b2da      	uxtb	r2, r3
 800d7d4:	4b8e      	ldr	r3, [pc, #568]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7d6:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')//个位
 800d7d8:	4b8d      	ldr	r3, [pc, #564]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	3b06      	subs	r3, #6
 800d7de:	4a8d      	ldr	r2, [pc, #564]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d7e0:	5cd3      	ldrb	r3, [r2, r3]
 800d7e2:	2b30      	cmp	r3, #48	; 0x30
 800d7e4:	d91b      	bls.n	800d81e <VRate_data_Refresh+0x186>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d7e6:	4b8a      	ldr	r3, [pc, #552]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	3b06      	subs	r3, #6
 800d7ec:	4a89      	ldr	r2, [pc, #548]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d7ee:	5cd2      	ldrb	r2, [r2, r3]
 800d7f0:	3a01      	subs	r2, #1
 800d7f2:	b2d1      	uxtb	r1, r2
 800d7f4:	4a87      	ldr	r2, [pc, #540]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d7f6:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d7f8:	4b85      	ldr	r3, [pc, #532]	; (800da10 <VRate_data_Refresh+0x378>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	4b83      	ldr	r3, [pc, #524]	; (800da10 <VRate_data_Refresh+0x378>)
 800d802:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d804:	4b82      	ldr	r3, [pc, #520]	; (800da10 <VRate_data_Refresh+0x378>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	4b80      	ldr	r3, [pc, #512]	; (800da10 <VRate_data_Refresh+0x378>)
 800d80e:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d810:	4b7f      	ldr	r3, [pc, #508]	; (800da10 <VRate_data_Refresh+0x378>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	3b06      	subs	r3, #6
 800d816:	4a7f      	ldr	r2, [pc, #508]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d818:	2139      	movs	r1, #57	; 0x39
 800d81a:	54d1      	strb	r1, [r2, r3]
 800d81c:	e018      	b.n	800d850 <VRate_data_Refresh+0x1b8>

			}
			else
			{
				Cursor_Position++;
 800d81e:	4b7c      	ldr	r3, [pc, #496]	; (800da10 <VRate_data_Refresh+0x378>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	3301      	adds	r3, #1
 800d824:	b2da      	uxtb	r2, r3
 800d826:	4b7a      	ldr	r3, [pc, #488]	; (800da10 <VRate_data_Refresh+0x378>)
 800d828:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d82a:	4b79      	ldr	r3, [pc, #484]	; (800da10 <VRate_data_Refresh+0x378>)
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	3301      	adds	r3, #1
 800d830:	b2da      	uxtb	r2, r3
 800d832:	4b77      	ldr	r3, [pc, #476]	; (800da10 <VRate_data_Refresh+0x378>)
 800d834:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='0';
 800d836:	4b76      	ldr	r3, [pc, #472]	; (800da10 <VRate_data_Refresh+0x378>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	3b06      	subs	r3, #6
 800d83c:	4a75      	ldr	r2, [pc, #468]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d83e:	2130      	movs	r1, #48	; 0x30
 800d840:	54d1      	strb	r1, [r2, r3]
 800d842:	e005      	b.n	800d850 <VRate_data_Refresh+0x1b8>
			}
		}
		else String_V_Rate[Cursor_Position-6]='0';
 800d844:	4b72      	ldr	r3, [pc, #456]	; (800da10 <VRate_data_Refresh+0x378>)
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	3b06      	subs	r3, #6
 800d84a:	4a72      	ldr	r2, [pc, #456]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d84c:	2130      	movs	r1, #48	; 0x30
 800d84e:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_V_Rate[Cursor_Position-6]>'9')
 800d850:	4b6f      	ldr	r3, [pc, #444]	; (800da10 <VRate_data_Refresh+0x378>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	3b06      	subs	r3, #6
 800d856:	4a6f      	ldr	r2, [pc, #444]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d858:	5cd3      	ldrb	r3, [r2, r3]
 800d85a:	2b39      	cmp	r3, #57	; 0x39
 800d85c:	d800      	bhi.n	800d860 <VRate_data_Refresh+0x1c8>
 800d85e:	e0e7      	b.n	800da30 <VRate_data_Refresh+0x398>
	{

		if(Cursor_Position==2+6)
 800d860:	4b6b      	ldr	r3, [pc, #428]	; (800da10 <VRate_data_Refresh+0x378>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2b08      	cmp	r3, #8
 800d866:	d146      	bne.n	800d8f6 <VRate_data_Refresh+0x25e>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d868:	4b69      	ldr	r3, [pc, #420]	; (800da10 <VRate_data_Refresh+0x378>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	3b06      	subs	r3, #6
 800d86e:	4a69      	ldr	r2, [pc, #420]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d870:	2130      	movs	r1, #48	; 0x30
 800d872:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d874:	4b66      	ldr	r3, [pc, #408]	; (800da10 <VRate_data_Refresh+0x378>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	3b01      	subs	r3, #1
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	4b64      	ldr	r3, [pc, #400]	; (800da10 <VRate_data_Refresh+0x378>)
 800d87e:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d880:	4b63      	ldr	r3, [pc, #396]	; (800da10 <VRate_data_Refresh+0x378>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	3b01      	subs	r3, #1
 800d886:	b2da      	uxtb	r2, r3
 800d888:	4b61      	ldr	r3, [pc, #388]	; (800da10 <VRate_data_Refresh+0x378>)
 800d88a:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d88c:	4b60      	ldr	r3, [pc, #384]	; (800da10 <VRate_data_Refresh+0x378>)
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	3b06      	subs	r3, #6
 800d892:	4a60      	ldr	r2, [pc, #384]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d894:	5cd2      	ldrb	r2, [r2, r3]
 800d896:	3201      	adds	r2, #1
 800d898:	b2d1      	uxtb	r1, r2
 800d89a:	4a5e      	ldr	r2, [pc, #376]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d89c:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//下一位也进位
 800d89e:	4b5c      	ldr	r3, [pc, #368]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	3b06      	subs	r3, #6
 800d8a4:	4a5b      	ldr	r2, [pc, #364]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d8a6:	5cd3      	ldrb	r3, [r2, r3]
 800d8a8:	2b39      	cmp	r3, #57	; 0x39
 800d8aa:	d917      	bls.n	800d8dc <VRate_data_Refresh+0x244>
			{
				String_V_Rate[Cursor_Position-6]='9';
 800d8ac:	4b58      	ldr	r3, [pc, #352]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	3b06      	subs	r3, #6
 800d8b2:	4a58      	ldr	r2, [pc, #352]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d8b4:	2139      	movs	r1, #57	; 0x39
 800d8b6:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d8b8:	4b55      	ldr	r3, [pc, #340]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	4b53      	ldr	r3, [pc, #332]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8c2:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d8c4:	4b52      	ldr	r3, [pc, #328]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	4b50      	ldr	r3, [pc, #320]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8ce:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d8d0:	4b4f      	ldr	r3, [pc, #316]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	3b06      	subs	r3, #6
 800d8d6:	4a4f      	ldr	r2, [pc, #316]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d8d8:	2139      	movs	r1, #57	; 0x39
 800d8da:	54d1      	strb	r1, [r2, r3]

			}
			Cursor_Position++;
 800d8dc:	4b4c      	ldr	r3, [pc, #304]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	4b4a      	ldr	r3, [pc, #296]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8e6:	701a      	strb	r2, [r3, #0]
			Cursor_Position++;
 800d8e8:	4b49      	ldr	r3, [pc, #292]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	4b47      	ldr	r3, [pc, #284]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8f2:	701a      	strb	r2, [r3, #0]
 800d8f4:	e09c      	b.n	800da30 <VRate_data_Refresh+0x398>
		}
		else if(Cursor_Position==3+6)
 800d8f6:	4b46      	ldr	r3, [pc, #280]	; (800da10 <VRate_data_Refresh+0x378>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b09      	cmp	r3, #9
 800d8fc:	d000      	beq.n	800d900 <VRate_data_Refresh+0x268>
 800d8fe:	e08d      	b.n	800da1c <VRate_data_Refresh+0x384>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d900:	4b43      	ldr	r3, [pc, #268]	; (800da10 <VRate_data_Refresh+0x378>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	3b06      	subs	r3, #6
 800d906:	4a43      	ldr	r2, [pc, #268]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d908:	2130      	movs	r1, #48	; 0x30
 800d90a:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d90c:	4b40      	ldr	r3, [pc, #256]	; (800da10 <VRate_data_Refresh+0x378>)
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	3b01      	subs	r3, #1
 800d912:	b2da      	uxtb	r2, r3
 800d914:	4b3e      	ldr	r3, [pc, #248]	; (800da10 <VRate_data_Refresh+0x378>)
 800d916:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d918:	4b3d      	ldr	r3, [pc, #244]	; (800da10 <VRate_data_Refresh+0x378>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	3b06      	subs	r3, #6
 800d91e:	4a3d      	ldr	r2, [pc, #244]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d920:	5cd2      	ldrb	r2, [r2, r3]
 800d922:	3201      	adds	r2, #1
 800d924:	b2d1      	uxtb	r1, r2
 800d926:	4a3b      	ldr	r2, [pc, #236]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d928:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//小数一位也进位
 800d92a:	4b39      	ldr	r3, [pc, #228]	; (800da10 <VRate_data_Refresh+0x378>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	3b06      	subs	r3, #6
 800d930:	4a38      	ldr	r2, [pc, #224]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d932:	5cd3      	ldrb	r3, [r2, r3]
 800d934:	2b39      	cmp	r3, #57	; 0x39
 800d936:	d95e      	bls.n	800d9f6 <VRate_data_Refresh+0x35e>
			{
				Cursor_Position--;
 800d938:	4b35      	ldr	r3, [pc, #212]	; (800da10 <VRate_data_Refresh+0x378>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	3b01      	subs	r3, #1
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	4b33      	ldr	r3, [pc, #204]	; (800da10 <VRate_data_Refresh+0x378>)
 800d942:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d944:	4b32      	ldr	r3, [pc, #200]	; (800da10 <VRate_data_Refresh+0x378>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	3b01      	subs	r3, #1
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	4b30      	ldr	r3, [pc, #192]	; (800da10 <VRate_data_Refresh+0x378>)
 800d94e:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]++;
 800d950:	4b2f      	ldr	r3, [pc, #188]	; (800da10 <VRate_data_Refresh+0x378>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	3b06      	subs	r3, #6
 800d956:	4a2f      	ldr	r2, [pc, #188]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d958:	5cd2      	ldrb	r2, [r2, r3]
 800d95a:	3201      	adds	r2, #1
 800d95c:	b2d1      	uxtb	r1, r2
 800d95e:	4a2d      	ldr	r2, [pc, #180]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d960:	54d1      	strb	r1, [r2, r3]
				if(String_V_Rate[Cursor_Position-6]>'9')//个位也进位
 800d962:	4b2b      	ldr	r3, [pc, #172]	; (800da10 <VRate_data_Refresh+0x378>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	3b06      	subs	r3, #6
 800d968:	4a2a      	ldr	r2, [pc, #168]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d96a:	5cd3      	ldrb	r3, [r2, r3]
 800d96c:	2b39      	cmp	r3, #57	; 0x39
 800d96e:	d924      	bls.n	800d9ba <VRate_data_Refresh+0x322>
				{
					String_V_Rate[Cursor_Position-6]='9';
 800d970:	4b27      	ldr	r3, [pc, #156]	; (800da10 <VRate_data_Refresh+0x378>)
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	3b06      	subs	r3, #6
 800d976:	4a27      	ldr	r2, [pc, #156]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d978:	2139      	movs	r1, #57	; 0x39
 800d97a:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d97c:	4b24      	ldr	r3, [pc, #144]	; (800da10 <VRate_data_Refresh+0x378>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	3301      	adds	r3, #1
 800d982:	b2da      	uxtb	r2, r3
 800d984:	4b22      	ldr	r3, [pc, #136]	; (800da10 <VRate_data_Refresh+0x378>)
 800d986:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d988:	4b21      	ldr	r3, [pc, #132]	; (800da10 <VRate_data_Refresh+0x378>)
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	3301      	adds	r3, #1
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	4b1f      	ldr	r3, [pc, #124]	; (800da10 <VRate_data_Refresh+0x378>)
 800d992:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d994:	4b1e      	ldr	r3, [pc, #120]	; (800da10 <VRate_data_Refresh+0x378>)
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	3b06      	subs	r3, #6
 800d99a:	4a1e      	ldr	r2, [pc, #120]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d99c:	2139      	movs	r1, #57	; 0x39
 800d99e:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d9a0:	4b1b      	ldr	r3, [pc, #108]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	4b19      	ldr	r3, [pc, #100]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9aa:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d9ac:	4b18      	ldr	r3, [pc, #96]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	3b06      	subs	r3, #6
 800d9b2:	4a18      	ldr	r2, [pc, #96]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d9b4:	2139      	movs	r1, #57	; 0x39
 800d9b6:	54d1      	strb	r1, [r2, r3]
 800d9b8:	e01d      	b.n	800d9f6 <VRate_data_Refresh+0x35e>

				}
				else//个位正常进位，小数一位为0，小数二位
				{
					Cursor_Position++;
 800d9ba:	4b15      	ldr	r3, [pc, #84]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	4b13      	ldr	r3, [pc, #76]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9c4:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d9c6:	4b12      	ldr	r3, [pc, #72]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	4b10      	ldr	r3, [pc, #64]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9d0:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数一位为0
 800d9d2:	4b0f      	ldr	r3, [pc, #60]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	3b06      	subs	r3, #6
 800d9d8:	4a0e      	ldr	r2, [pc, #56]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d9da:	2130      	movs	r1, #48	; 0x30
 800d9dc:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d9de:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	4b0a      	ldr	r3, [pc, #40]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9e8:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数二位为0
 800d9ea:	4b09      	ldr	r3, [pc, #36]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	3b06      	subs	r3, #6
 800d9f0:	4a08      	ldr	r2, [pc, #32]	; (800da14 <VRate_data_Refresh+0x37c>)
 800d9f2:	2130      	movs	r1, #48	; 0x30
 800d9f4:	54d1      	strb	r1, [r2, r3]

				}

			}

			Cursor_Position++;
 800d9f6:	4b06      	ldr	r3, [pc, #24]	; (800da10 <VRate_data_Refresh+0x378>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	4b04      	ldr	r3, [pc, #16]	; (800da10 <VRate_data_Refresh+0x378>)
 800da00:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]='0';
 800da02:	4b03      	ldr	r3, [pc, #12]	; (800da10 <VRate_data_Refresh+0x378>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	3b06      	subs	r3, #6
 800da08:	4a02      	ldr	r2, [pc, #8]	; (800da14 <VRate_data_Refresh+0x37c>)
 800da0a:	2130      	movs	r1, #48	; 0x30
 800da0c:	54d1      	strb	r1, [r2, r3]
 800da0e:	e00f      	b.n	800da30 <VRate_data_Refresh+0x398>
 800da10:	20003b22 	.word	0x20003b22
 800da14:	2000304c 	.word	0x2000304c
 800da18:	20003384 	.word	0x20003384
		}
		else if(Cursor_Position==0+6)
 800da1c:	4b1b      	ldr	r3, [pc, #108]	; (800da8c <VRate_data_Refresh+0x3f4>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2b06      	cmp	r3, #6
 800da22:	d105      	bne.n	800da30 <VRate_data_Refresh+0x398>
		{
			String_V_Rate[Cursor_Position-6]='9';
 800da24:	4b19      	ldr	r3, [pc, #100]	; (800da8c <VRate_data_Refresh+0x3f4>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	3b06      	subs	r3, #6
 800da2a:	4a19      	ldr	r2, [pc, #100]	; (800da90 <VRate_data_Refresh+0x3f8>)
 800da2c:	2139      	movs	r1, #57	; 0x39
 800da2e:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_V_Slope = String_To_Float(String_V_Rate)*10;
 800da30:	4b17      	ldr	r3, [pc, #92]	; (800da90 <VRate_data_Refresh+0x3f8>)
 800da32:	0018      	movs	r0, r3
 800da34:	f000 fe9c 	bl	800e770 <String_To_Float>
 800da38:	1c03      	adds	r3, r0, #0
 800da3a:	4916      	ldr	r1, [pc, #88]	; (800da94 <VRate_data_Refresh+0x3fc>)
 800da3c:	1c18      	adds	r0, r3, #0
 800da3e:	f7f3 f90f 	bl	8000c60 <__aeabi_fmul>
 800da42:	1c03      	adds	r3, r0, #0
 800da44:	1c18      	adds	r0, r3, #0
 800da46:	f7f2 fd6f 	bl	8000528 <__aeabi_f2uiz>
 800da4a:	0003      	movs	r3, r0
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	4b12      	ldr	r3, [pc, #72]	; (800da98 <VRate_data_Refresh+0x400>)
 800da50:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope > 30) Set_V_Slope = 30;//150V
 800da52:	4b11      	ldr	r3, [pc, #68]	; (800da98 <VRate_data_Refresh+0x400>)
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	2b1e      	cmp	r3, #30
 800da58:	d902      	bls.n	800da60 <VRate_data_Refresh+0x3c8>
 800da5a:	4b0f      	ldr	r3, [pc, #60]	; (800da98 <VRate_data_Refresh+0x400>)
 800da5c:	221e      	movs	r2, #30
 800da5e:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope <1||Set_Voltage==1)	Set_V_Slope=1;
 800da60:	4b0d      	ldr	r3, [pc, #52]	; (800da98 <VRate_data_Refresh+0x400>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d003      	beq.n	800da70 <VRate_data_Refresh+0x3d8>
 800da68:	4b0c      	ldr	r3, [pc, #48]	; (800da9c <VRate_data_Refresh+0x404>)
 800da6a:	881b      	ldrh	r3, [r3, #0]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d102      	bne.n	800da76 <VRate_data_Refresh+0x3de>
 800da70:	4b09      	ldr	r3, [pc, #36]	; (800da98 <VRate_data_Refresh+0x400>)
 800da72:	2201      	movs	r2, #1
 800da74:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_V_Slope);
 800da76:	4b08      	ldr	r3, [pc, #32]	; (800da98 <VRate_data_Refresh+0x400>)
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	001a      	movs	r2, r3
 800da7e:	2108      	movs	r1, #8
 800da80:	2001      	movs	r0, #1
 800da82:	f7fe ff59 	bl	800c938 <DAC_Cmd_send>


}
 800da86:	46c0      	nop			; (mov r8, r8)
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20003b22 	.word	0x20003b22
 800da90:	2000304c 	.word	0x2000304c
 800da94:	41200000 	.word	0x41200000
 800da98:	20003b2c 	.word	0x20003b2c
 800da9c:	20002fd8 	.word	0x20002fd8

0800daa0 <IRate_data_Refresh>:

static void IRate_data_Refresh(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	af00      	add	r7, sp, #0
	String_I_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800daa4:	4b50      	ldr	r3, [pc, #320]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	3b06      	subs	r3, #6
 800daaa:	4a50      	ldr	r2, [pc, #320]	; (800dbec <IRate_data_Refresh+0x14c>)
 800daac:	5cd1      	ldrb	r1, [r2, r3]
 800daae:	4b50      	ldr	r3, [pc, #320]	; (800dbf0 <IRate_data_Refresh+0x150>)
 800dab0:	69db      	ldr	r3, [r3, #28]
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	4b4c      	ldr	r3, [pc, #304]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	3b06      	subs	r3, #6
 800daba:	188a      	adds	r2, r1, r2
 800dabc:	b2d1      	uxtb	r1, r2
 800dabe:	4a4b      	ldr	r2, [pc, #300]	; (800dbec <IRate_data_Refresh+0x14c>)
 800dac0:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]<'0')	String_I_Rate[Cursor_Position-6]='0';
 800dac2:	4b49      	ldr	r3, [pc, #292]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	3b06      	subs	r3, #6
 800dac8:	4a48      	ldr	r2, [pc, #288]	; (800dbec <IRate_data_Refresh+0x14c>)
 800daca:	5cd3      	ldrb	r3, [r2, r3]
 800dacc:	2b2f      	cmp	r3, #47	; 0x2f
 800dace:	d805      	bhi.n	800dadc <IRate_data_Refresh+0x3c>
 800dad0:	4b45      	ldr	r3, [pc, #276]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	3b06      	subs	r3, #6
 800dad6:	4a45      	ldr	r2, [pc, #276]	; (800dbec <IRate_data_Refresh+0x14c>)
 800dad8:	2130      	movs	r1, #48	; 0x30
 800dada:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]>'9')
 800dadc:	4b42      	ldr	r3, [pc, #264]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	3b06      	subs	r3, #6
 800dae2:	4a42      	ldr	r2, [pc, #264]	; (800dbec <IRate_data_Refresh+0x14c>)
 800dae4:	5cd3      	ldrb	r3, [r2, r3]
 800dae6:	2b39      	cmp	r3, #57	; 0x39
 800dae8:	d94f      	bls.n	800db8a <IRate_data_Refresh+0xea>
	{
		/*进位处理*/
		if(Cursor_Position!=0+6)
 800daea:	4b3f      	ldr	r3, [pc, #252]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	2b06      	cmp	r3, #6
 800daf0:	d041      	beq.n	800db76 <IRate_data_Refresh+0xd6>
		{
			String_I_Rate[Cursor_Position-6]='0';
 800daf2:	4b3d      	ldr	r3, [pc, #244]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	3b06      	subs	r3, #6
 800daf8:	4a3c      	ldr	r2, [pc, #240]	; (800dbec <IRate_data_Refresh+0x14c>)
 800dafa:	2130      	movs	r1, #48	; 0x30
 800dafc:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800dafe:	4b3a      	ldr	r3, [pc, #232]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	3b01      	subs	r3, #1
 800db04:	b2da      	uxtb	r2, r3
 800db06:	4b38      	ldr	r3, [pc, #224]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db08:	701a      	strb	r2, [r3, #0]
			String_I_Rate[Cursor_Position-6]++;
 800db0a:	4b37      	ldr	r3, [pc, #220]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	3b06      	subs	r3, #6
 800db10:	4a36      	ldr	r2, [pc, #216]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db12:	5cd2      	ldrb	r2, [r2, r3]
 800db14:	3201      	adds	r2, #1
 800db16:	b2d1      	uxtb	r1, r2
 800db18:	4a34      	ldr	r2, [pc, #208]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db1a:	54d1      	strb	r1, [r2, r3]
			if(String_I_Rate[Cursor_Position-6]>'9'&&Cursor_Position!=0+6)//下一位也进位
 800db1c:	4b32      	ldr	r3, [pc, #200]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	3b06      	subs	r3, #6
 800db22:	4a32      	ldr	r2, [pc, #200]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db24:	5cd3      	ldrb	r3, [r2, r3]
 800db26:	2b39      	cmp	r3, #57	; 0x39
 800db28:	d91e      	bls.n	800db68 <IRate_data_Refresh+0xc8>
 800db2a:	4b2f      	ldr	r3, [pc, #188]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b06      	cmp	r3, #6
 800db30:	d01a      	beq.n	800db68 <IRate_data_Refresh+0xc8>
			{
				String_I_Rate[Cursor_Position-6]='0';
 800db32:	4b2d      	ldr	r3, [pc, #180]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	3b06      	subs	r3, #6
 800db38:	4a2c      	ldr	r2, [pc, #176]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db3a:	2130      	movs	r1, #48	; 0x30
 800db3c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800db3e:	4b2a      	ldr	r3, [pc, #168]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	3b01      	subs	r3, #1
 800db44:	b2da      	uxtb	r2, r3
 800db46:	4b28      	ldr	r3, [pc, #160]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db48:	701a      	strb	r2, [r3, #0]
				String_I_Rate[Cursor_Position-6]++;
 800db4a:	4b27      	ldr	r3, [pc, #156]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	3b06      	subs	r3, #6
 800db50:	4a26      	ldr	r2, [pc, #152]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db52:	5cd2      	ldrb	r2, [r2, r3]
 800db54:	3201      	adds	r2, #1
 800db56:	b2d1      	uxtb	r1, r2
 800db58:	4a24      	ldr	r2, [pc, #144]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db5a:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800db5c:	4b22      	ldr	r3, [pc, #136]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	3301      	adds	r3, #1
 800db62:	b2da      	uxtb	r2, r3
 800db64:	4b20      	ldr	r3, [pc, #128]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db66:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800db68:	4b1f      	ldr	r3, [pc, #124]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	3301      	adds	r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	4b1d      	ldr	r3, [pc, #116]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db72:	701a      	strb	r2, [r3, #0]
 800db74:	e009      	b.n	800db8a <IRate_data_Refresh+0xea>
		}
		else if(Cursor_Position==0+6)
 800db76:	4b1c      	ldr	r3, [pc, #112]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b06      	cmp	r3, #6
 800db7c:	d105      	bne.n	800db8a <IRate_data_Refresh+0xea>
		{
			String_I_Rate[Cursor_Position-6]='9';
 800db7e:	4b1a      	ldr	r3, [pc, #104]	; (800dbe8 <IRate_data_Refresh+0x148>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	3b06      	subs	r3, #6
 800db84:	4a19      	ldr	r2, [pc, #100]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db86:	2139      	movs	r1, #57	; 0x39
 800db88:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_I_Slope = String_To_Float(String_I_Rate)*100;
 800db8a:	4b18      	ldr	r3, [pc, #96]	; (800dbec <IRate_data_Refresh+0x14c>)
 800db8c:	0018      	movs	r0, r3
 800db8e:	f000 fdef 	bl	800e770 <String_To_Float>
 800db92:	1c03      	adds	r3, r0, #0
 800db94:	4917      	ldr	r1, [pc, #92]	; (800dbf4 <IRate_data_Refresh+0x154>)
 800db96:	1c18      	adds	r0, r3, #0
 800db98:	f7f3 f862 	bl	8000c60 <__aeabi_fmul>
 800db9c:	1c03      	adds	r3, r0, #0
 800db9e:	1c18      	adds	r0, r3, #0
 800dba0:	f7f2 fcc2 	bl	8000528 <__aeabi_f2uiz>
 800dba4:	0003      	movs	r3, r0
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	4b13      	ldr	r3, [pc, #76]	; (800dbf8 <IRate_data_Refresh+0x158>)
 800dbaa:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope > 30) Set_I_Slope = 30;//150V
 800dbac:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <IRate_data_Refresh+0x158>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b1e      	cmp	r3, #30
 800dbb2:	d902      	bls.n	800dbba <IRate_data_Refresh+0x11a>
 800dbb4:	4b10      	ldr	r3, [pc, #64]	; (800dbf8 <IRate_data_Refresh+0x158>)
 800dbb6:	221e      	movs	r2, #30
 800dbb8:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope <1||Set_Voltage==1)	Set_I_Slope=1;
 800dbba:	4b0f      	ldr	r3, [pc, #60]	; (800dbf8 <IRate_data_Refresh+0x158>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d003      	beq.n	800dbca <IRate_data_Refresh+0x12a>
 800dbc2:	4b0e      	ldr	r3, [pc, #56]	; (800dbfc <IRate_data_Refresh+0x15c>)
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d102      	bne.n	800dbd0 <IRate_data_Refresh+0x130>
 800dbca:	4b0b      	ldr	r3, [pc, #44]	; (800dbf8 <IRate_data_Refresh+0x158>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,9,Set_I_Slope);
 800dbd0:	4b09      	ldr	r3, [pc, #36]	; (800dbf8 <IRate_data_Refresh+0x158>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	001a      	movs	r2, r3
 800dbd8:	2109      	movs	r1, #9
 800dbda:	2001      	movs	r0, #1
 800dbdc:	f7fe feac 	bl	800c938 <DAC_Cmd_send>

}
 800dbe0:	46c0      	nop			; (mov r8, r8)
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	46c0      	nop			; (mov r8, r8)
 800dbe8:	20003b22 	.word	0x20003b22
 800dbec:	20003040 	.word	0x20003040
 800dbf0:	20003384 	.word	0x20003384
 800dbf4:	42c80000 	.word	0x42c80000
 800dbf8:	20003b2d 	.word	0x20003b2d
 800dbfc:	20002fd8 	.word	0x20002fd8

0800dc00 <Save_data_Refresh>:

static void Save_data_Refresh(void)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)//Vset
 800dc04:	4b76      	ldr	r3, [pc, #472]	; (800dde0 <Save_data_Refresh+0x1e0>)
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d172      	bne.n	800dcf2 <Save_data_Refresh+0xf2>
	{
		String_Save_V[Cursor_Position]+=Flag.Encoder_BF;
 800dc0c:	4b75      	ldr	r3, [pc, #468]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	001a      	movs	r2, r3
 800dc12:	4b75      	ldr	r3, [pc, #468]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc14:	5c9a      	ldrb	r2, [r3, r2]
 800dc16:	4b75      	ldr	r3, [pc, #468]	; (800ddec <Save_data_Refresh+0x1ec>)
 800dc18:	69db      	ldr	r3, [r3, #28]
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	4971      	ldr	r1, [pc, #452]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc1e:	7809      	ldrb	r1, [r1, #0]
 800dc20:	18d3      	adds	r3, r2, r3
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	4b70      	ldr	r3, [pc, #448]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc26:	545a      	strb	r2, [r3, r1]
		if(String_Save_V[Cursor_Position]<'0')	String_Save_V[Cursor_Position]='0';
 800dc28:	4b6e      	ldr	r3, [pc, #440]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	001a      	movs	r2, r3
 800dc2e:	4b6e      	ldr	r3, [pc, #440]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc30:	5c9b      	ldrb	r3, [r3, r2]
 800dc32:	2b2f      	cmp	r3, #47	; 0x2f
 800dc34:	d805      	bhi.n	800dc42 <Save_data_Refresh+0x42>
 800dc36:	4b6b      	ldr	r3, [pc, #428]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	001a      	movs	r2, r3
 800dc3c:	4b6a      	ldr	r3, [pc, #424]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc3e:	2130      	movs	r1, #48	; 0x30
 800dc40:	5499      	strb	r1, [r3, r2]
		if(String_Save_V[Cursor_Position]>'9')
 800dc42:	4b68      	ldr	r3, [pc, #416]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	001a      	movs	r2, r3
 800dc48:	4b67      	ldr	r3, [pc, #412]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc4a:	5c9b      	ldrb	r3, [r3, r2]
 800dc4c:	2b39      	cmp	r3, #57	; 0x39
 800dc4e:	d800      	bhi.n	800dc52 <Save_data_Refresh+0x52>
 800dc50:	e0c3      	b.n	800ddda <Save_data_Refresh+0x1da>
		{
			/*进位处理*/
			if(Cursor_Position!=0)
 800dc52:	4b64      	ldr	r3, [pc, #400]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d03f      	beq.n	800dcda <Save_data_Refresh+0xda>
			{
				String_Save_V[Cursor_Position]='0';
 800dc5a:	4b62      	ldr	r3, [pc, #392]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	001a      	movs	r2, r3
 800dc60:	4b61      	ldr	r3, [pc, #388]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc62:	2130      	movs	r1, #48	; 0x30
 800dc64:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800dc66:	4b5f      	ldr	r3, [pc, #380]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	b2da      	uxtb	r2, r3
 800dc6e:	4b5d      	ldr	r3, [pc, #372]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc70:	701a      	strb	r2, [r3, #0]
				String_Save_V[Cursor_Position]++;
 800dc72:	4b5c      	ldr	r3, [pc, #368]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	4a5c      	ldr	r2, [pc, #368]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc78:	5cd2      	ldrb	r2, [r2, r3]
 800dc7a:	3201      	adds	r2, #1
 800dc7c:	b2d1      	uxtb	r1, r2
 800dc7e:	4a5a      	ldr	r2, [pc, #360]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc80:	54d1      	strb	r1, [r2, r3]
				if(String_Save_V[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800dc82:	4b58      	ldr	r3, [pc, #352]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	001a      	movs	r2, r3
 800dc88:	4b57      	ldr	r3, [pc, #348]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dc8a:	5c9b      	ldrb	r3, [r3, r2]
 800dc8c:	2b39      	cmp	r3, #57	; 0x39
 800dc8e:	d91d      	bls.n	800dccc <Save_data_Refresh+0xcc>
 800dc90:	4b54      	ldr	r3, [pc, #336]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d019      	beq.n	800dccc <Save_data_Refresh+0xcc>
				{
					String_Save_V[Cursor_Position]='0';
 800dc98:	4b52      	ldr	r3, [pc, #328]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	001a      	movs	r2, r3
 800dc9e:	4b52      	ldr	r3, [pc, #328]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dca0:	2130      	movs	r1, #48	; 0x30
 800dca2:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800dca4:	4b4f      	ldr	r3, [pc, #316]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	4b4d      	ldr	r3, [pc, #308]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcae:	701a      	strb	r2, [r3, #0]
					String_Save_V[Cursor_Position]++;
 800dcb0:	4b4c      	ldr	r3, [pc, #304]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	4a4c      	ldr	r2, [pc, #304]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dcb6:	5cd2      	ldrb	r2, [r2, r3]
 800dcb8:	3201      	adds	r2, #1
 800dcba:	b2d1      	uxtb	r1, r2
 800dcbc:	4a4a      	ldr	r2, [pc, #296]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dcbe:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800dcc0:	4b48      	ldr	r3, [pc, #288]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	4b46      	ldr	r3, [pc, #280]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcca:	701a      	strb	r2, [r3, #0]
				}
				Cursor_Position++;
 800dccc:	4b45      	ldr	r3, [pc, #276]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	4b43      	ldr	r3, [pc, #268]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcd6:	701a      	strb	r2, [r3, #0]

		}

	}

}
 800dcd8:	e07f      	b.n	800ddda <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800dcda:	4b42      	ldr	r3, [pc, #264]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d000      	beq.n	800dce4 <Save_data_Refresh+0xe4>
 800dce2:	e07a      	b.n	800ddda <Save_data_Refresh+0x1da>
				String_Save_V[Cursor_Position]='9';
 800dce4:	4b3f      	ldr	r3, [pc, #252]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	001a      	movs	r2, r3
 800dcea:	4b3f      	ldr	r3, [pc, #252]	; (800dde8 <Save_data_Refresh+0x1e8>)
 800dcec:	2139      	movs	r1, #57	; 0x39
 800dcee:	5499      	strb	r1, [r3, r2]
}
 800dcf0:	e073      	b.n	800ddda <Save_data_Refresh+0x1da>
	else if(xyz.coordinates3==2)//Iset
 800dcf2:	4b3b      	ldr	r3, [pc, #236]	; (800dde0 <Save_data_Refresh+0x1e0>)
 800dcf4:	689b      	ldr	r3, [r3, #8]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d16f      	bne.n	800ddda <Save_data_Refresh+0x1da>
		String_Save_I[Cursor_Position]+=Flag.Encoder_BF;
 800dcfa:	4b3a      	ldr	r3, [pc, #232]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	001a      	movs	r2, r3
 800dd00:	4b3b      	ldr	r3, [pc, #236]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd02:	5c9a      	ldrb	r2, [r3, r2]
 800dd04:	4b39      	ldr	r3, [pc, #228]	; (800ddec <Save_data_Refresh+0x1ec>)
 800dd06:	69db      	ldr	r3, [r3, #28]
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	4936      	ldr	r1, [pc, #216]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd0c:	7809      	ldrb	r1, [r1, #0]
 800dd0e:	18d3      	adds	r3, r2, r3
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	4b37      	ldr	r3, [pc, #220]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd14:	545a      	strb	r2, [r3, r1]
		if(String_Save_I[Cursor_Position]<'0')	String_Save_I[Cursor_Position]='0';
 800dd16:	4b33      	ldr	r3, [pc, #204]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	001a      	movs	r2, r3
 800dd1c:	4b34      	ldr	r3, [pc, #208]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd1e:	5c9b      	ldrb	r3, [r3, r2]
 800dd20:	2b2f      	cmp	r3, #47	; 0x2f
 800dd22:	d805      	bhi.n	800dd30 <Save_data_Refresh+0x130>
 800dd24:	4b2f      	ldr	r3, [pc, #188]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	001a      	movs	r2, r3
 800dd2a:	4b31      	ldr	r3, [pc, #196]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd2c:	2130      	movs	r1, #48	; 0x30
 800dd2e:	5499      	strb	r1, [r3, r2]
		if(String_Save_I[Cursor_Position]>'9')
 800dd30:	4b2c      	ldr	r3, [pc, #176]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	001a      	movs	r2, r3
 800dd36:	4b2e      	ldr	r3, [pc, #184]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd38:	5c9b      	ldrb	r3, [r3, r2]
 800dd3a:	2b39      	cmp	r3, #57	; 0x39
 800dd3c:	d94d      	bls.n	800ddda <Save_data_Refresh+0x1da>
			if(Cursor_Position!=0)
 800dd3e:	4b29      	ldr	r3, [pc, #164]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d03f      	beq.n	800ddc6 <Save_data_Refresh+0x1c6>
				String_Save_I[Cursor_Position]='0';
 800dd46:	4b27      	ldr	r3, [pc, #156]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	001a      	movs	r2, r3
 800dd4c:	4b28      	ldr	r3, [pc, #160]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd4e:	2130      	movs	r1, #48	; 0x30
 800dd50:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800dd52:	4b24      	ldr	r3, [pc, #144]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	4b22      	ldr	r3, [pc, #136]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd5c:	701a      	strb	r2, [r3, #0]
				String_Save_I[Cursor_Position]++;
 800dd5e:	4b21      	ldr	r3, [pc, #132]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	4a23      	ldr	r2, [pc, #140]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd64:	5cd2      	ldrb	r2, [r2, r3]
 800dd66:	3201      	adds	r2, #1
 800dd68:	b2d1      	uxtb	r1, r2
 800dd6a:	4a21      	ldr	r2, [pc, #132]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd6c:	54d1      	strb	r1, [r2, r3]
				if(String_Save_I[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800dd6e:	4b1d      	ldr	r3, [pc, #116]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	001a      	movs	r2, r3
 800dd74:	4b1e      	ldr	r3, [pc, #120]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd76:	5c9b      	ldrb	r3, [r3, r2]
 800dd78:	2b39      	cmp	r3, #57	; 0x39
 800dd7a:	d91d      	bls.n	800ddb8 <Save_data_Refresh+0x1b8>
 800dd7c:	4b19      	ldr	r3, [pc, #100]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d019      	beq.n	800ddb8 <Save_data_Refresh+0x1b8>
					String_Save_I[Cursor_Position]='0';
 800dd84:	4b17      	ldr	r3, [pc, #92]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	001a      	movs	r2, r3
 800dd8a:	4b19      	ldr	r3, [pc, #100]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dd8c:	2130      	movs	r1, #48	; 0x30
 800dd8e:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800dd90:	4b14      	ldr	r3, [pc, #80]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd9a:	701a      	strb	r2, [r3, #0]
					String_Save_I[Cursor_Position]++;
 800dd9c:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	4a13      	ldr	r2, [pc, #76]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800dda2:	5cd2      	ldrb	r2, [r2, r3]
 800dda4:	3201      	adds	r2, #1
 800dda6:	b2d1      	uxtb	r1, r2
 800dda8:	4a11      	ldr	r2, [pc, #68]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800ddaa:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800ddac:	4b0d      	ldr	r3, [pc, #52]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800ddb6:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800ddb8:	4b0a      	ldr	r3, [pc, #40]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800ddc2:	701a      	strb	r2, [r3, #0]
}
 800ddc4:	e009      	b.n	800ddda <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800ddc6:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d105      	bne.n	800ddda <Save_data_Refresh+0x1da>
				String_Save_I[Cursor_Position]='9';
 800ddce:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <Save_data_Refresh+0x1e4>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	001a      	movs	r2, r3
 800ddd4:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <Save_data_Refresh+0x1f0>)
 800ddd6:	2139      	movs	r1, #57	; 0x39
 800ddd8:	5499      	strb	r1, [r3, r2]
}
 800ddda:	46c0      	nop			; (mov r8, r8)
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20003b8c 	.word	0x20003b8c
 800dde4:	20003b22 	.word	0x20003b22
 800dde8:	2000301c 	.word	0x2000301c
 800ddec:	20003384 	.word	0x20003384
 800ddf0:	20003028 	.word	0x20003028

0800ddf4 <Recall_data_Refresh>:

static void Recall_data_Refresh(void)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	af00      	add	r7, sp, #0
	Recall_Save_Number+=Flag.Encoder_BF;
 800ddf8:	4b09      	ldr	r3, [pc, #36]	; (800de20 <Recall_data_Refresh+0x2c>)
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	4b09      	ldr	r3, [pc, #36]	; (800de24 <Recall_data_Refresh+0x30>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	18d3      	adds	r3, r2, r3
 800de04:	b2da      	uxtb	r2, r3
 800de06:	4b07      	ldr	r3, [pc, #28]	; (800de24 <Recall_data_Refresh+0x30>)
 800de08:	701a      	strb	r2, [r3, #0]
	if(Recall_Save_Number<0)	Recall_Save_Number=9;
	if(Recall_Save_Number>9)	Recall_Save_Number=0;
 800de0a:	4b06      	ldr	r3, [pc, #24]	; (800de24 <Recall_data_Refresh+0x30>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	2b09      	cmp	r3, #9
 800de10:	d902      	bls.n	800de18 <Recall_data_Refresh+0x24>
 800de12:	4b04      	ldr	r3, [pc, #16]	; (800de24 <Recall_data_Refresh+0x30>)
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
}
 800de18:	46c0      	nop			; (mov r8, r8)
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	46c0      	nop			; (mov r8, r8)
 800de20:	20003384 	.word	0x20003384
 800de24:	20003b21 	.word	0x20003b21

0800de28 <Timer_data_Refresh>:

static void Timer_data_Refresh(void)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)
 800de2c:	4b45      	ldr	r3, [pc, #276]	; (800df44 <Timer_data_Refresh+0x11c>)
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d129      	bne.n	800de88 <Timer_data_Refresh+0x60>
	{
		String_Delay[Cursor_Position-6]+=Flag.Encoder_BF;
 800de34:	4b44      	ldr	r3, [pc, #272]	; (800df48 <Timer_data_Refresh+0x120>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	3b06      	subs	r3, #6
 800de3a:	4a44      	ldr	r2, [pc, #272]	; (800df4c <Timer_data_Refresh+0x124>)
 800de3c:	5cd1      	ldrb	r1, [r2, r3]
 800de3e:	4b44      	ldr	r3, [pc, #272]	; (800df50 <Timer_data_Refresh+0x128>)
 800de40:	69db      	ldr	r3, [r3, #28]
 800de42:	b2da      	uxtb	r2, r3
 800de44:	4b40      	ldr	r3, [pc, #256]	; (800df48 <Timer_data_Refresh+0x120>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	3b06      	subs	r3, #6
 800de4a:	188a      	adds	r2, r1, r2
 800de4c:	b2d1      	uxtb	r1, r2
 800de4e:	4a3f      	ldr	r2, [pc, #252]	; (800df4c <Timer_data_Refresh+0x124>)
 800de50:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]<'0')	String_Delay[Cursor_Position-6]='0';
 800de52:	4b3d      	ldr	r3, [pc, #244]	; (800df48 <Timer_data_Refresh+0x120>)
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	3b06      	subs	r3, #6
 800de58:	4a3c      	ldr	r2, [pc, #240]	; (800df4c <Timer_data_Refresh+0x124>)
 800de5a:	5cd3      	ldrb	r3, [r2, r3]
 800de5c:	2b2f      	cmp	r3, #47	; 0x2f
 800de5e:	d805      	bhi.n	800de6c <Timer_data_Refresh+0x44>
 800de60:	4b39      	ldr	r3, [pc, #228]	; (800df48 <Timer_data_Refresh+0x120>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	3b06      	subs	r3, #6
 800de66:	4a39      	ldr	r2, [pc, #228]	; (800df4c <Timer_data_Refresh+0x124>)
 800de68:	2130      	movs	r1, #48	; 0x30
 800de6a:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]>'9')	String_Delay[Cursor_Position-6]='9';
 800de6c:	4b36      	ldr	r3, [pc, #216]	; (800df48 <Timer_data_Refresh+0x120>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	3b06      	subs	r3, #6
 800de72:	4a36      	ldr	r2, [pc, #216]	; (800df4c <Timer_data_Refresh+0x124>)
 800de74:	5cd3      	ldrb	r3, [r2, r3]
 800de76:	2b39      	cmp	r3, #57	; 0x39
 800de78:	d961      	bls.n	800df3e <Timer_data_Refresh+0x116>
 800de7a:	4b33      	ldr	r3, [pc, #204]	; (800df48 <Timer_data_Refresh+0x120>)
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	3b06      	subs	r3, #6
 800de80:	4a32      	ldr	r2, [pc, #200]	; (800df4c <Timer_data_Refresh+0x124>)
 800de82:	2139      	movs	r1, #57	; 0x39
 800de84:	54d1      	strb	r1, [r2, r3]
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
	}

}
 800de86:	e05a      	b.n	800df3e <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==2)
 800de88:	4b2e      	ldr	r3, [pc, #184]	; (800df44 <Timer_data_Refresh+0x11c>)
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d129      	bne.n	800dee4 <Timer_data_Refresh+0xbc>
		String_Cycle_On[Cursor_Position-6]+=Flag.Encoder_BF;
 800de90:	4b2d      	ldr	r3, [pc, #180]	; (800df48 <Timer_data_Refresh+0x120>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	3b06      	subs	r3, #6
 800de96:	4a2f      	ldr	r2, [pc, #188]	; (800df54 <Timer_data_Refresh+0x12c>)
 800de98:	5cd1      	ldrb	r1, [r2, r3]
 800de9a:	4b2d      	ldr	r3, [pc, #180]	; (800df50 <Timer_data_Refresh+0x128>)
 800de9c:	69db      	ldr	r3, [r3, #28]
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	4b29      	ldr	r3, [pc, #164]	; (800df48 <Timer_data_Refresh+0x120>)
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	3b06      	subs	r3, #6
 800dea6:	188a      	adds	r2, r1, r2
 800dea8:	b2d1      	uxtb	r1, r2
 800deaa:	4a2a      	ldr	r2, [pc, #168]	; (800df54 <Timer_data_Refresh+0x12c>)
 800deac:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]<'0')	String_Cycle_On[Cursor_Position-6]='0';
 800deae:	4b26      	ldr	r3, [pc, #152]	; (800df48 <Timer_data_Refresh+0x120>)
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	3b06      	subs	r3, #6
 800deb4:	4a27      	ldr	r2, [pc, #156]	; (800df54 <Timer_data_Refresh+0x12c>)
 800deb6:	5cd3      	ldrb	r3, [r2, r3]
 800deb8:	2b2f      	cmp	r3, #47	; 0x2f
 800deba:	d805      	bhi.n	800dec8 <Timer_data_Refresh+0xa0>
 800debc:	4b22      	ldr	r3, [pc, #136]	; (800df48 <Timer_data_Refresh+0x120>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	3b06      	subs	r3, #6
 800dec2:	4a24      	ldr	r2, [pc, #144]	; (800df54 <Timer_data_Refresh+0x12c>)
 800dec4:	2130      	movs	r1, #48	; 0x30
 800dec6:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]>'9')	String_Cycle_On[Cursor_Position-6]='9';
 800dec8:	4b1f      	ldr	r3, [pc, #124]	; (800df48 <Timer_data_Refresh+0x120>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	3b06      	subs	r3, #6
 800dece:	4a21      	ldr	r2, [pc, #132]	; (800df54 <Timer_data_Refresh+0x12c>)
 800ded0:	5cd3      	ldrb	r3, [r2, r3]
 800ded2:	2b39      	cmp	r3, #57	; 0x39
 800ded4:	d933      	bls.n	800df3e <Timer_data_Refresh+0x116>
 800ded6:	4b1c      	ldr	r3, [pc, #112]	; (800df48 <Timer_data_Refresh+0x120>)
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	3b06      	subs	r3, #6
 800dedc:	4a1d      	ldr	r2, [pc, #116]	; (800df54 <Timer_data_Refresh+0x12c>)
 800dede:	2139      	movs	r1, #57	; 0x39
 800dee0:	54d1      	strb	r1, [r2, r3]
}
 800dee2:	e02c      	b.n	800df3e <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==3)
 800dee4:	4b17      	ldr	r3, [pc, #92]	; (800df44 <Timer_data_Refresh+0x11c>)
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	2b03      	cmp	r3, #3
 800deea:	d128      	bne.n	800df3e <Timer_data_Refresh+0x116>
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
 800deec:	4b16      	ldr	r3, [pc, #88]	; (800df48 <Timer_data_Refresh+0x120>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	3b06      	subs	r3, #6
 800def2:	4a19      	ldr	r2, [pc, #100]	; (800df58 <Timer_data_Refresh+0x130>)
 800def4:	5cd1      	ldrb	r1, [r2, r3]
 800def6:	4b16      	ldr	r3, [pc, #88]	; (800df50 <Timer_data_Refresh+0x128>)
 800def8:	69db      	ldr	r3, [r3, #28]
 800defa:	b2da      	uxtb	r2, r3
 800defc:	4b12      	ldr	r3, [pc, #72]	; (800df48 <Timer_data_Refresh+0x120>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	3b06      	subs	r3, #6
 800df02:	188a      	adds	r2, r1, r2
 800df04:	b2d1      	uxtb	r1, r2
 800df06:	4a14      	ldr	r2, [pc, #80]	; (800df58 <Timer_data_Refresh+0x130>)
 800df08:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <Timer_data_Refresh+0x120>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	3b06      	subs	r3, #6
 800df10:	4a11      	ldr	r2, [pc, #68]	; (800df58 <Timer_data_Refresh+0x130>)
 800df12:	5cd3      	ldrb	r3, [r2, r3]
 800df14:	2b2f      	cmp	r3, #47	; 0x2f
 800df16:	d805      	bhi.n	800df24 <Timer_data_Refresh+0xfc>
 800df18:	4b0b      	ldr	r3, [pc, #44]	; (800df48 <Timer_data_Refresh+0x120>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	3b06      	subs	r3, #6
 800df1e:	4a0e      	ldr	r2, [pc, #56]	; (800df58 <Timer_data_Refresh+0x130>)
 800df20:	2130      	movs	r1, #48	; 0x30
 800df22:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
 800df24:	4b08      	ldr	r3, [pc, #32]	; (800df48 <Timer_data_Refresh+0x120>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	3b06      	subs	r3, #6
 800df2a:	4a0b      	ldr	r2, [pc, #44]	; (800df58 <Timer_data_Refresh+0x130>)
 800df2c:	5cd3      	ldrb	r3, [r2, r3]
 800df2e:	2b39      	cmp	r3, #57	; 0x39
 800df30:	d905      	bls.n	800df3e <Timer_data_Refresh+0x116>
 800df32:	4b05      	ldr	r3, [pc, #20]	; (800df48 <Timer_data_Refresh+0x120>)
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	3b06      	subs	r3, #6
 800df38:	4a07      	ldr	r2, [pc, #28]	; (800df58 <Timer_data_Refresh+0x130>)
 800df3a:	2139      	movs	r1, #57	; 0x39
 800df3c:	54d1      	strb	r1, [r2, r3]
}
 800df3e:	46c0      	nop			; (mov r8, r8)
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	20003b8c 	.word	0x20003b8c
 800df48:	20003b22 	.word	0x20003b22
 800df4c:	20003010 	.word	0x20003010
 800df50:	20003384 	.word	0x20003384
 800df54:	20002ff8 	.word	0x20002ff8
 800df58:	20003004 	.word	0x20003004

0800df5c <Light_data_Refresh>:

static void Light_data_Refresh(void)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	af00      	add	r7, sp, #0
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800df60:	4b12      	ldr	r3, [pc, #72]	; (800dfac <Light_data_Refresh+0x50>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d103      	bne.n	800df70 <Light_data_Refresh+0x14>
 800df68:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <Light_data_Refresh+0x54>)
 800df6a:	69db      	ldr	r3, [r3, #28]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	db18      	blt.n	800dfa2 <Light_data_Refresh+0x46>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800df70:	4b0e      	ldr	r3, [pc, #56]	; (800dfac <Light_data_Refresh+0x50>)
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b0f      	cmp	r3, #15
 800df76:	d103      	bne.n	800df80 <Light_data_Refresh+0x24>
 800df78:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <Light_data_Refresh+0x54>)
 800df7a:	69db      	ldr	r3, [r3, #28]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	dc12      	bgt.n	800dfa6 <Light_data_Refresh+0x4a>
	else Light+=Flag.Encoder_BF;
 800df80:	4b0b      	ldr	r3, [pc, #44]	; (800dfb0 <Light_data_Refresh+0x54>)
 800df82:	69db      	ldr	r3, [r3, #28]
 800df84:	b2da      	uxtb	r2, r3
 800df86:	4b09      	ldr	r3, [pc, #36]	; (800dfac <Light_data_Refresh+0x50>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	18d3      	adds	r3, r2, r3
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	4b07      	ldr	r3, [pc, #28]	; (800dfac <Light_data_Refresh+0x50>)
 800df90:	701a      	strb	r2, [r3, #0]
	if(Light>=0x0f)	Light=0x0f;
 800df92:	4b06      	ldr	r3, [pc, #24]	; (800dfac <Light_data_Refresh+0x50>)
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b0e      	cmp	r3, #14
 800df98:	d906      	bls.n	800dfa8 <Light_data_Refresh+0x4c>
 800df9a:	4b04      	ldr	r3, [pc, #16]	; (800dfac <Light_data_Refresh+0x50>)
 800df9c:	220f      	movs	r2, #15
 800df9e:	701a      	strb	r2, [r3, #0]
 800dfa0:	e002      	b.n	800dfa8 <Light_data_Refresh+0x4c>
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800dfa2:	46c0      	nop			; (mov r8, r8)
 800dfa4:	e000      	b.n	800dfa8 <Light_data_Refresh+0x4c>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800dfa6:	46c0      	nop			; (mov r8, r8)
}
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	200030b3 	.word	0x200030b3
 800dfb0:	20003384 	.word	0x20003384

0800dfb4 <FAN_data_Refresh>:

static void FAN_data_Refresh(void)
{
 800dfb4:	b5b0      	push	{r4, r5, r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800dfb8:	4b22      	ldr	r3, [pc, #136]	; (800e044 <FAN_data_Refresh+0x90>)
 800dfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfbc:	21fe      	movs	r1, #254	; 0xfe
 800dfbe:	0589      	lsls	r1, r1, #22
 800dfc0:	1c18      	adds	r0, r3, #0
 800dfc2:	f7f2 fa83 	bl	80004cc <__aeabi_fcmpeq>
 800dfc6:	1e03      	subs	r3, r0, #0
 800dfc8:	d003      	beq.n	800dfd2 <FAN_data_Refresh+0x1e>
 800dfca:	4b1e      	ldr	r3, [pc, #120]	; (800e044 <FAN_data_Refresh+0x90>)
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	db32      	blt.n	800e038 <FAN_data_Refresh+0x84>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800dfd2:	4b1c      	ldr	r3, [pc, #112]	; (800e044 <FAN_data_Refresh+0x90>)
 800dfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd6:	491c      	ldr	r1, [pc, #112]	; (800e048 <FAN_data_Refresh+0x94>)
 800dfd8:	1c18      	adds	r0, r3, #0
 800dfda:	f7f2 fa77 	bl	80004cc <__aeabi_fcmpeq>
 800dfde:	1e03      	subs	r3, r0, #0
 800dfe0:	d003      	beq.n	800dfea <FAN_data_Refresh+0x36>
 800dfe2:	4b18      	ldr	r3, [pc, #96]	; (800e044 <FAN_data_Refresh+0x90>)
 800dfe4:	69db      	ldr	r3, [r3, #28]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	dc28      	bgt.n	800e03c <FAN_data_Refresh+0x88>
	else Flag.FAN_LEVEL+=Flag.Encoder_BF;
 800dfea:	4b16      	ldr	r3, [pc, #88]	; (800e044 <FAN_data_Refresh+0x90>)
 800dfec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800dfee:	4b15      	ldr	r3, [pc, #84]	; (800e044 <FAN_data_Refresh+0x90>)
 800dff0:	69db      	ldr	r3, [r3, #28]
 800dff2:	0018      	movs	r0, r3
 800dff4:	f7f3 f928 	bl	8001248 <__aeabi_i2f>
 800dff8:	1c03      	adds	r3, r0, #0
 800dffa:	1c19      	adds	r1, r3, #0
 800dffc:	1c20      	adds	r0, r4, #0
 800dffe:	f7f2 fac9 	bl	8000594 <__aeabi_fadd>
 800e002:	1c03      	adds	r3, r0, #0
 800e004:	1c1a      	adds	r2, r3, #0
 800e006:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <FAN_data_Refresh+0x90>)
 800e008:	631a      	str	r2, [r3, #48]	; 0x30
	if(Flag.FAN_LEVEL>=1000)	Flag.FAN_LEVEL=1000;
 800e00a:	4b0e      	ldr	r3, [pc, #56]	; (800e044 <FAN_data_Refresh+0x90>)
 800e00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e00e:	490e      	ldr	r1, [pc, #56]	; (800e048 <FAN_data_Refresh+0x94>)
 800e010:	1c18      	adds	r0, r3, #0
 800e012:	f7f2 fa7f 	bl	8000514 <__aeabi_fcmpge>
 800e016:	1e03      	subs	r3, r0, #0
 800e018:	d002      	beq.n	800e020 <FAN_data_Refresh+0x6c>
 800e01a:	4b0a      	ldr	r3, [pc, #40]	; (800e044 <FAN_data_Refresh+0x90>)
 800e01c:	4a0a      	ldr	r2, [pc, #40]	; (800e048 <FAN_data_Refresh+0x94>)
 800e01e:	631a      	str	r2, [r3, #48]	; 0x30

	sprintf(String_FAN, "%6.2f", Flag.FAN_LEVEL);
 800e020:	4b08      	ldr	r3, [pc, #32]	; (800e044 <FAN_data_Refresh+0x90>)
 800e022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e024:	1c18      	adds	r0, r3, #0
 800e026:	f7f4 ff43 	bl	8002eb0 <__aeabi_f2d>
 800e02a:	0002      	movs	r2, r0
 800e02c:	000b      	movs	r3, r1
 800e02e:	4907      	ldr	r1, [pc, #28]	; (800e04c <FAN_data_Refresh+0x98>)
 800e030:	4807      	ldr	r0, [pc, #28]	; (800e050 <FAN_data_Refresh+0x9c>)
 800e032:	f007 fa81 	bl	8015538 <siprintf>
 800e036:	e002      	b.n	800e03e <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800e038:	46c0      	nop			; (mov r8, r8)
 800e03a:	e000      	b.n	800e03e <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800e03c:	46c0      	nop			; (mov r8, r8)

}
 800e03e:	46bd      	mov	sp, r7
 800e040:	bdb0      	pop	{r4, r5, r7, pc}
 800e042:	46c0      	nop			; (mov r8, r8)
 800e044:	20003384 	.word	0x20003384
 800e048:	447a0000 	.word	0x447a0000
 800e04c:	08018764 	.word	0x08018764
 800e050:	20003080 	.word	0x20003080

0800e054 <enter_action>:
 * @brief  编码器按键动作响应
 * @param  none
 * @retval None
 */
static void enter_action(void)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	af00      	add	r7, sp, #0
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800e058:	4b96      	ldr	r3, [pc, #600]	; (800e2b4 <enter_action+0x260>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d10d      	bne.n	800e07c <enter_action+0x28>
 800e060:	4b94      	ldr	r3, [pc, #592]	; (800e2b4 <enter_action+0x260>)
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d009      	beq.n	800e07c <enter_action+0x28>
 800e068:	4b92      	ldr	r3, [pc, #584]	; (800e2b4 <enter_action+0x260>)
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d105      	bne.n	800e07c <enter_action+0x28>
	{
		xyz.coordinates3=1;//enter second menu
 800e070:	4b90      	ldr	r3, [pc, #576]	; (800e2b4 <enter_action+0x260>)
 800e072:	2201      	movs	r2, #1
 800e074:	609a      	str	r2, [r3, #8]
		Cursor_Position=6;
 800e076:	4b90      	ldr	r3, [pc, #576]	; (800e2b8 <enter_action+0x264>)
 800e078:	2206      	movs	r2, #6
 800e07a:	701a      	strb	r2, [r3, #0]
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800e07c:	4b8d      	ldr	r3, [pc, #564]	; (800e2b4 <enter_action+0x260>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d14f      	bne.n	800e124 <enter_action+0xd0>
 800e084:	4b8b      	ldr	r3, [pc, #556]	; (800e2b4 <enter_action+0x260>)
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d04b      	beq.n	800e124 <enter_action+0xd0>
 800e08c:	4b89      	ldr	r3, [pc, #548]	; (800e2b4 <enter_action+0x260>)
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d047      	beq.n	800e124 <enter_action+0xd0>
	{
		switch(xyz.coordinates2)
 800e094:	4b87      	ldr	r3, [pc, #540]	; (800e2b4 <enter_action+0x260>)
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	2b05      	cmp	r3, #5
 800e09a:	d83b      	bhi.n	800e114 <enter_action+0xc0>
 800e09c:	009a      	lsls	r2, r3, #2
 800e09e:	4b87      	ldr	r3, [pc, #540]	; (800e2bc <enter_action+0x268>)
 800e0a0:	18d3      	adds	r3, r2, r3
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	469f      	mov	pc, r3
		{
			case 1:break;
			case 2://rate
			{
				Cursor_Position++;
 800e0a6:	4b84      	ldr	r3, [pc, #528]	; (800e2b8 <enter_action+0x264>)
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	4b82      	ldr	r3, [pc, #520]	; (800e2b8 <enter_action+0x264>)
 800e0b0:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>4+6) Cursor_Position=0+6;
 800e0b2:	4b81      	ldr	r3, [pc, #516]	; (800e2b8 <enter_action+0x264>)
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	2b0a      	cmp	r3, #10
 800e0b8:	d92e      	bls.n	800e118 <enter_action+0xc4>
 800e0ba:	4b7f      	ldr	r3, [pc, #508]	; (800e2b8 <enter_action+0x264>)
 800e0bc:	2206      	movs	r2, #6
 800e0be:	701a      	strb	r2, [r3, #0]
				break;
 800e0c0:	e02a      	b.n	800e118 <enter_action+0xc4>
			}
			case 3:break;//以后补充
			case 4://cycle on/off delay
			{
				if(Cursor_Position==3+6)	Cursor_Position=4+6;
 800e0c2:	4b7d      	ldr	r3, [pc, #500]	; (800e2b8 <enter_action+0x264>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	2b09      	cmp	r3, #9
 800e0c8:	d102      	bne.n	800e0d0 <enter_action+0x7c>
 800e0ca:	4b7b      	ldr	r3, [pc, #492]	; (800e2b8 <enter_action+0x264>)
 800e0cc:	220a      	movs	r2, #10
 800e0ce:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800e0d0:	4b79      	ldr	r3, [pc, #484]	; (800e2b8 <enter_action+0x264>)
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	4b77      	ldr	r3, [pc, #476]	; (800e2b8 <enter_action+0x264>)
 800e0da:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>7+6) 	Cursor_Position=0+6;
 800e0dc:	4b76      	ldr	r3, [pc, #472]	; (800e2b8 <enter_action+0x264>)
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b0d      	cmp	r3, #13
 800e0e2:	d91b      	bls.n	800e11c <enter_action+0xc8>
 800e0e4:	4b74      	ldr	r3, [pc, #464]	; (800e2b8 <enter_action+0x264>)
 800e0e6:	2206      	movs	r2, #6
 800e0e8:	701a      	strb	r2, [r3, #0]
				break;
 800e0ea:	e017      	b.n	800e11c <enter_action+0xc8>
			}
			case 5:
			{
				if(xyz.coordinates3==2)//gain
 800e0ec:	4b71      	ldr	r3, [pc, #452]	; (800e2b4 <enter_action+0x260>)
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d115      	bne.n	800e120 <enter_action+0xcc>
				{
					if(Cursor_Position==4+6)
 800e0f4:	4b70      	ldr	r3, [pc, #448]	; (800e2b8 <enter_action+0x264>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2b0a      	cmp	r3, #10
 800e0fa:	d103      	bne.n	800e104 <enter_action+0xb0>
					{
						Cursor_Position=5+6;
 800e0fc:	4b6e      	ldr	r3, [pc, #440]	; (800e2b8 <enter_action+0x264>)
 800e0fe:	220b      	movs	r2, #11
 800e100:	701a      	strb	r2, [r3, #0]
				}
				if(xyz.coordinates3==3)//frq
				{
					;
				}
				break;
 800e102:	e00d      	b.n	800e120 <enter_action+0xcc>
					else if(Cursor_Position==5+6)
 800e104:	4b6c      	ldr	r3, [pc, #432]	; (800e2b8 <enter_action+0x264>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2b0b      	cmp	r3, #11
 800e10a:	d109      	bne.n	800e120 <enter_action+0xcc>
						Cursor_Position=4+6;
 800e10c:	4b6a      	ldr	r3, [pc, #424]	; (800e2b8 <enter_action+0x264>)
 800e10e:	220a      	movs	r2, #10
 800e110:	701a      	strb	r2, [r3, #0]
				break;
 800e112:	e005      	b.n	800e120 <enter_action+0xcc>

			}
			default: break;
 800e114:	46c0      	nop			; (mov r8, r8)
 800e116:	e043      	b.n	800e1a0 <enter_action+0x14c>
				break;
 800e118:	46c0      	nop			; (mov r8, r8)
 800e11a:	e041      	b.n	800e1a0 <enter_action+0x14c>
				break;
 800e11c:	46c0      	nop			; (mov r8, r8)
 800e11e:	e03f      	b.n	800e1a0 <enter_action+0x14c>
				break;
 800e120:	46c0      	nop			; (mov r8, r8)
		switch(xyz.coordinates2)
 800e122:	e03d      	b.n	800e1a0 <enter_action+0x14c>
		}

	}
	/*V I Set*/
	else if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e124:	4b63      	ldr	r3, [pc, #396]	; (800e2b4 <enter_action+0x260>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d134      	bne.n	800e196 <enter_action+0x142>
 800e12c:	4b61      	ldr	r3, [pc, #388]	; (800e2b4 <enter_action+0x260>)
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d030      	beq.n	800e196 <enter_action+0x142>
	{
		switch(xyz.coordinates2)
 800e134:	4b5f      	ldr	r3, [pc, #380]	; (800e2b4 <enter_action+0x260>)
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d002      	beq.n	800e142 <enter_action+0xee>
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d015      	beq.n	800e16c <enter_action+0x118>
 800e140:	e02e      	b.n	800e1a0 <enter_action+0x14c>
		{
			case 1://I set
			{
				Cursor_Position++;
 800e142:	4b5d      	ldr	r3, [pc, #372]	; (800e2b8 <enter_action+0x264>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	3301      	adds	r3, #1
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	4b5b      	ldr	r3, [pc, #364]	; (800e2b8 <enter_action+0x264>)
 800e14c:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800e14e:	4b5a      	ldr	r3, [pc, #360]	; (800e2b8 <enter_action+0x264>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b0c      	cmp	r3, #12
 800e154:	d102      	bne.n	800e15c <enter_action+0x108>
 800e156:	4b58      	ldr	r3, [pc, #352]	; (800e2b8 <enter_action+0x264>)
 800e158:	220d      	movs	r2, #13
 800e15a:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800e15c:	4b56      	ldr	r3, [pc, #344]	; (800e2b8 <enter_action+0x264>)
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	2b0f      	cmp	r3, #15
 800e162:	d11a      	bne.n	800e19a <enter_action+0x146>
 800e164:	4b54      	ldr	r3, [pc, #336]	; (800e2b8 <enter_action+0x264>)
 800e166:	2209      	movs	r2, #9
 800e168:	701a      	strb	r2, [r3, #0]
				break;
 800e16a:	e016      	b.n	800e19a <enter_action+0x146>
			}
			case 2://V set
			{
				Cursor_Position++;
 800e16c:	4b52      	ldr	r3, [pc, #328]	; (800e2b8 <enter_action+0x264>)
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	3301      	adds	r3, #1
 800e172:	b2da      	uxtb	r2, r3
 800e174:	4b50      	ldr	r3, [pc, #320]	; (800e2b8 <enter_action+0x264>)
 800e176:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800e178:	4b4f      	ldr	r3, [pc, #316]	; (800e2b8 <enter_action+0x264>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	2b03      	cmp	r3, #3
 800e17e:	d102      	bne.n	800e186 <enter_action+0x132>
 800e180:	4b4d      	ldr	r3, [pc, #308]	; (800e2b8 <enter_action+0x264>)
 800e182:	2204      	movs	r2, #4
 800e184:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800e186:	4b4c      	ldr	r3, [pc, #304]	; (800e2b8 <enter_action+0x264>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	2b06      	cmp	r3, #6
 800e18c:	d107      	bne.n	800e19e <enter_action+0x14a>
 800e18e:	4b4a      	ldr	r3, [pc, #296]	; (800e2b8 <enter_action+0x264>)
 800e190:	2200      	movs	r2, #0
 800e192:	701a      	strb	r2, [r3, #0]
				break;
 800e194:	e003      	b.n	800e19e <enter_action+0x14a>
			}
		}

	}
 800e196:	46c0      	nop			; (mov r8, r8)
 800e198:	e002      	b.n	800e1a0 <enter_action+0x14c>
				break;
 800e19a:	46c0      	nop			; (mov r8, r8)
 800e19c:	e000      	b.n	800e1a0 <enter_action+0x14c>
				break;
 800e19e:	46c0      	nop			; (mov r8, r8)
	/*save load */
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800e1a0:	4b44      	ldr	r3, [pc, #272]	; (800e2b4 <enter_action+0x260>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d139      	bne.n	800e21c <enter_action+0x1c8>
 800e1a8:	4b42      	ldr	r3, [pc, #264]	; (800e2b4 <enter_action+0x260>)
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d035      	beq.n	800e21c <enter_action+0x1c8>
	{
		switch(xyz.coordinates2)
 800e1b0:	4b40      	ldr	r3, [pc, #256]	; (800e2b4 <enter_action+0x260>)
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d133      	bne.n	800e220 <enter_action+0x1cc>
		{
			case 1://save
			{
				if(xyz.coordinates3==1)//v est
 800e1b8:	4b3e      	ldr	r3, [pc, #248]	; (800e2b4 <enter_action+0x260>)
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d114      	bne.n	800e1ea <enter_action+0x196>
				{
					Cursor_Position++;
 800e1c0:	4b3d      	ldr	r3, [pc, #244]	; (800e2b8 <enter_action+0x264>)
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	4b3b      	ldr	r3, [pc, #236]	; (800e2b8 <enter_action+0x264>)
 800e1ca:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2)	Cursor_Position=4;
 800e1cc:	4b3a      	ldr	r3, [pc, #232]	; (800e2b8 <enter_action+0x264>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	d102      	bne.n	800e1da <enter_action+0x186>
 800e1d4:	4b38      	ldr	r3, [pc, #224]	; (800e2b8 <enter_action+0x264>)
 800e1d6:	2204      	movs	r2, #4
 800e1d8:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5)	Cursor_Position=0;
 800e1da:	4b37      	ldr	r3, [pc, #220]	; (800e2b8 <enter_action+0x264>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	2b05      	cmp	r3, #5
 800e1e0:	d120      	bne.n	800e224 <enter_action+0x1d0>
 800e1e2:	4b35      	ldr	r3, [pc, #212]	; (800e2b8 <enter_action+0x264>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	701a      	strb	r2, [r3, #0]
					break;
 800e1e8:	e01c      	b.n	800e224 <enter_action+0x1d0>
				}
				else if(xyz.coordinates3==2)//I set
 800e1ea:	4b32      	ldr	r3, [pc, #200]	; (800e2b4 <enter_action+0x260>)
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d116      	bne.n	800e220 <enter_action+0x1cc>
				{
					Cursor_Position++;
 800e1f2:	4b31      	ldr	r3, [pc, #196]	; (800e2b8 <enter_action+0x264>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	4b2f      	ldr	r3, [pc, #188]	; (800e2b8 <enter_action+0x264>)
 800e1fc:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2+9)	Cursor_Position=4;
 800e1fe:	4b2e      	ldr	r3, [pc, #184]	; (800e2b8 <enter_action+0x264>)
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	2b0b      	cmp	r3, #11
 800e204:	d102      	bne.n	800e20c <enter_action+0x1b8>
 800e206:	4b2c      	ldr	r3, [pc, #176]	; (800e2b8 <enter_action+0x264>)
 800e208:	2204      	movs	r2, #4
 800e20a:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5+9)	Cursor_Position=0;
 800e20c:	4b2a      	ldr	r3, [pc, #168]	; (800e2b8 <enter_action+0x264>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	2b0e      	cmp	r3, #14
 800e212:	d109      	bne.n	800e228 <enter_action+0x1d4>
 800e214:	4b28      	ldr	r3, [pc, #160]	; (800e2b8 <enter_action+0x264>)
 800e216:	2200      	movs	r2, #0
 800e218:	701a      	strb	r2, [r3, #0]
					break;
 800e21a:	e005      	b.n	800e228 <enter_action+0x1d4>
			{
				break;
			}

		}
	}
 800e21c:	46c0      	nop			; (mov r8, r8)
 800e21e:	e004      	b.n	800e22a <enter_action+0x1d6>
				break;
 800e220:	46c0      	nop			; (mov r8, r8)
 800e222:	e002      	b.n	800e22a <enter_action+0x1d6>
					break;
 800e224:	46c0      	nop			; (mov r8, r8)
 800e226:	e000      	b.n	800e22a <enter_action+0x1d6>
					break;
 800e228:	46c0      	nop			; (mov r8, r8)
	if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800e22a:	4b22      	ldr	r3, [pc, #136]	; (800e2b4 <enter_action+0x260>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d138      	bne.n	800e2a4 <enter_action+0x250>
 800e232:	4b20      	ldr	r3, [pc, #128]	; (800e2b4 <enter_action+0x260>)
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	2b08      	cmp	r3, #8
 800e238:	d134      	bne.n	800e2a4 <enter_action+0x250>
	{
		switch(xyz.coordinates3)
 800e23a:	4b1e      	ldr	r3, [pc, #120]	; (800e2b4 <enter_action+0x260>)
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	dc02      	bgt.n	800e248 <enter_action+0x1f4>
 800e242:	2b00      	cmp	r3, #0
 800e244:	dc04      	bgt.n	800e250 <enter_action+0x1fc>
			}

		}
	}

}
 800e246:	e032      	b.n	800e2ae <enter_action+0x25a>
 800e248:	3b03      	subs	r3, #3
		switch(xyz.coordinates3)
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d82f      	bhi.n	800e2ae <enter_action+0x25a>
 800e24e:	e014      	b.n	800e27a <enter_action+0x226>
				Cursor_Position++;
 800e250:	4b19      	ldr	r3, [pc, #100]	; (800e2b8 <enter_action+0x264>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	3301      	adds	r3, #1
 800e256:	b2da      	uxtb	r2, r3
 800e258:	4b17      	ldr	r3, [pc, #92]	; (800e2b8 <enter_action+0x264>)
 800e25a:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800e25c:	4b16      	ldr	r3, [pc, #88]	; (800e2b8 <enter_action+0x264>)
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	2b03      	cmp	r3, #3
 800e262:	d102      	bne.n	800e26a <enter_action+0x216>
 800e264:	4b14      	ldr	r3, [pc, #80]	; (800e2b8 <enter_action+0x264>)
 800e266:	2204      	movs	r2, #4
 800e268:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800e26a:	4b13      	ldr	r3, [pc, #76]	; (800e2b8 <enter_action+0x264>)
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b06      	cmp	r3, #6
 800e270:	d11a      	bne.n	800e2a8 <enter_action+0x254>
 800e272:	4b11      	ldr	r3, [pc, #68]	; (800e2b8 <enter_action+0x264>)
 800e274:	2200      	movs	r2, #0
 800e276:	701a      	strb	r2, [r3, #0]
				break;
 800e278:	e016      	b.n	800e2a8 <enter_action+0x254>
				Cursor_Position++;
 800e27a:	4b0f      	ldr	r3, [pc, #60]	; (800e2b8 <enter_action+0x264>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	3301      	adds	r3, #1
 800e280:	b2da      	uxtb	r2, r3
 800e282:	4b0d      	ldr	r3, [pc, #52]	; (800e2b8 <enter_action+0x264>)
 800e284:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800e286:	4b0c      	ldr	r3, [pc, #48]	; (800e2b8 <enter_action+0x264>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	2b0c      	cmp	r3, #12
 800e28c:	d102      	bne.n	800e294 <enter_action+0x240>
 800e28e:	4b0a      	ldr	r3, [pc, #40]	; (800e2b8 <enter_action+0x264>)
 800e290:	220d      	movs	r2, #13
 800e292:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800e294:	4b08      	ldr	r3, [pc, #32]	; (800e2b8 <enter_action+0x264>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	2b0f      	cmp	r3, #15
 800e29a:	d107      	bne.n	800e2ac <enter_action+0x258>
 800e29c:	4b06      	ldr	r3, [pc, #24]	; (800e2b8 <enter_action+0x264>)
 800e29e:	2209      	movs	r2, #9
 800e2a0:	701a      	strb	r2, [r3, #0]
				break;
 800e2a2:	e003      	b.n	800e2ac <enter_action+0x258>
	}
 800e2a4:	46c0      	nop			; (mov r8, r8)
 800e2a6:	e002      	b.n	800e2ae <enter_action+0x25a>
				break;
 800e2a8:	46c0      	nop			; (mov r8, r8)
 800e2aa:	e000      	b.n	800e2ae <enter_action+0x25a>
				break;
 800e2ac:	46c0      	nop			; (mov r8, r8)
}
 800e2ae:	46c0      	nop			; (mov r8, r8)
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20003b8c 	.word	0x20003b8c
 800e2b8:	20003b22 	.word	0x20003b22
 800e2bc:	08018c20 	.word	0x08018c20

0800e2c0 <Encoder_Data_refresh>:
 * @brief  编码器转动数据更新
 * @param  none
 * @retval None
 */
void Encoder_Data_refresh(void)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	af00      	add	r7, sp, #0
	if(Flag.TIM3_IT==1)
 800e2c4:	4b52      	ldr	r3, [pc, #328]	; (800e410 <Encoder_Data_refresh+0x150>)
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d000      	beq.n	800e2ce <Encoder_Data_refresh+0xe>
 800e2cc:	e09c      	b.n	800e408 <Encoder_Data_refresh+0x148>
	{
		Flag.TIM3_IT=0;
 800e2ce:	4b50      	ldr	r3, [pc, #320]	; (800e410 <Encoder_Data_refresh+0x150>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	609a      	str	r2, [r3, #8]
		/*first menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800e2d4:	4b4f      	ldr	r3, [pc, #316]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d109      	bne.n	800e2f0 <Encoder_Data_refresh+0x30>
 800e2dc:	4b4d      	ldr	r3, [pc, #308]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <Encoder_Data_refresh+0x30>
 800e2e4:	4b4b      	ldr	r3, [pc, #300]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d101      	bne.n	800e2f0 <Encoder_Data_refresh+0x30>
		{
			First_menu_data_Refresh();
 800e2ec:	f7fe fc90 	bl	800cc10 <First_menu_data_Refresh>
		}
		/*second menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800e2f0:	4b48      	ldr	r3, [pc, #288]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d121      	bne.n	800e33c <Encoder_Data_refresh+0x7c>
 800e2f8:	4b46      	ldr	r3, [pc, #280]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d01d      	beq.n	800e33c <Encoder_Data_refresh+0x7c>
 800e300:	4b44      	ldr	r3, [pc, #272]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d019      	beq.n	800e33c <Encoder_Data_refresh+0x7c>
		{
			switch(xyz.coordinates2)
 800e308:	4b42      	ldr	r3, [pc, #264]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	2b05      	cmp	r3, #5
 800e30e:	d817      	bhi.n	800e340 <Encoder_Data_refresh+0x80>
 800e310:	009a      	lsls	r2, r3, #2
 800e312:	4b41      	ldr	r3, [pc, #260]	; (800e418 <Encoder_Data_refresh+0x158>)
 800e314:	18d3      	adds	r3, r2, r3
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	469f      	mov	pc, r3
			{
				case 1:break;
				case 2://rate
				{
					if(xyz.coordinates3==1)//I rate
 800e31a:	4b3e      	ldr	r3, [pc, #248]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d102      	bne.n	800e328 <Encoder_Data_refresh+0x68>
					{
						IRate_data_Refresh();
 800e322:	f7ff fbbd 	bl	800daa0 <IRate_data_Refresh>
					}
					else if(xyz.coordinates3==2)//V rate
					{
						VRate_data_Refresh();
					}
					break;
 800e326:	e00d      	b.n	800e344 <Encoder_Data_refresh+0x84>
					else if(xyz.coordinates3==2)//V rate
 800e328:	4b3a      	ldr	r3, [pc, #232]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d109      	bne.n	800e344 <Encoder_Data_refresh+0x84>
						VRate_data_Refresh();
 800e330:	f7ff f9b2 	bl	800d698 <VRate_data_Refresh>
					break;
 800e334:	e006      	b.n	800e344 <Encoder_Data_refresh+0x84>
				}
				case 3:break;
				case 4://delay cycle on/off
				{
					Timer_data_Refresh();
 800e336:	f7ff fd77 	bl	800de28 <Timer_data_Refresh>
					break;
 800e33a:	e004      	b.n	800e346 <Encoder_Data_refresh+0x86>
					}
					break;
				}
				default: break;
			}
		}
 800e33c:	46c0      	nop			; (mov r8, r8)
 800e33e:	e002      	b.n	800e346 <Encoder_Data_refresh+0x86>
				default: break;
 800e340:	46c0      	nop			; (mov r8, r8)
 800e342:	e000      	b.n	800e346 <Encoder_Data_refresh+0x86>
					break;
 800e344:	46c0      	nop			; (mov r8, r8)
		/*V I set*/
		if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e346:	4b33      	ldr	r3, [pc, #204]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d110      	bne.n	800e370 <Encoder_Data_refresh+0xb0>
 800e34e:	4b31      	ldr	r3, [pc, #196]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00c      	beq.n	800e370 <Encoder_Data_refresh+0xb0>
		{
			switch(xyz.coordinates2)
 800e356:	4b2f      	ldr	r3, [pc, #188]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d002      	beq.n	800e364 <Encoder_Data_refresh+0xa4>
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d003      	beq.n	800e36a <Encoder_Data_refresh+0xaa>
 800e362:	e006      	b.n	800e372 <Encoder_Data_refresh+0xb2>
			{
				case 1:
				{
					Iset_data_Refresh();
 800e364:	f7ff f820 	bl	800d3a8 <Iset_data_Refresh>
					break;
 800e368:	e003      	b.n	800e372 <Encoder_Data_refresh+0xb2>
				}
				case 2:
				{
					Vset_data_Refresh();
 800e36a:	f7fe feab 	bl	800d0c4 <Vset_data_Refresh>
					break;
 800e36e:	e000      	b.n	800e372 <Encoder_Data_refresh+0xb2>
				}

			}

		}
 800e370:	46c0      	nop			; (mov r8, r8)
		/*save load */
		if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800e372:	4b28      	ldr	r3, [pc, #160]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2b03      	cmp	r3, #3
 800e378:	d110      	bne.n	800e39c <Encoder_Data_refresh+0xdc>
 800e37a:	4b26      	ldr	r3, [pc, #152]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00c      	beq.n	800e39c <Encoder_Data_refresh+0xdc>
		{
			switch(xyz.coordinates2)
 800e382:	4b24      	ldr	r3, [pc, #144]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d002      	beq.n	800e390 <Encoder_Data_refresh+0xd0>
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d003      	beq.n	800e396 <Encoder_Data_refresh+0xd6>
 800e38e:	e006      	b.n	800e39e <Encoder_Data_refresh+0xde>
			{
				case 1://save
				{
					Save_data_Refresh();
 800e390:	f7ff fc36 	bl	800dc00 <Save_data_Refresh>
					break;
 800e394:	e003      	b.n	800e39e <Encoder_Data_refresh+0xde>
				}
				case 2://recall
				{
					Recall_data_Refresh();
 800e396:	f7ff fd2d 	bl	800ddf4 <Recall_data_Refresh>
					break;
 800e39a:	e000      	b.n	800e39e <Encoder_Data_refresh+0xde>
				}

			}
		}
 800e39c:	46c0      	nop			; (mov r8, r8)
		/*light set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==1)
 800e39e:	4b1d      	ldr	r3, [pc, #116]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d109      	bne.n	800e3ba <Encoder_Data_refresh+0xfa>
 800e3a6:	4b1b      	ldr	r3, [pc, #108]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	2b06      	cmp	r3, #6
 800e3ac:	d105      	bne.n	800e3ba <Encoder_Data_refresh+0xfa>
 800e3ae:	4b19      	ldr	r3, [pc, #100]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d101      	bne.n	800e3ba <Encoder_Data_refresh+0xfa>
		{
			Light_data_Refresh();
 800e3b6:	f7ff fdd1 	bl	800df5c <Light_data_Refresh>
		}
		/*FAN set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==3)
 800e3ba:	4b16      	ldr	r3, [pc, #88]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d109      	bne.n	800e3d6 <Encoder_Data_refresh+0x116>
 800e3c2:	4b14      	ldr	r3, [pc, #80]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	2b06      	cmp	r3, #6
 800e3c8:	d105      	bne.n	800e3d6 <Encoder_Data_refresh+0x116>
 800e3ca:	4b12      	ldr	r3, [pc, #72]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	2b03      	cmp	r3, #3
 800e3d0:	d101      	bne.n	800e3d6 <Encoder_Data_refresh+0x116>
		{
			FAN_data_Refresh();
 800e3d2:	f7ff fdef 	bl	800dfb4 <FAN_data_Refresh>
		}

		if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800e3d6:	4b0f      	ldr	r3, [pc, #60]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d114      	bne.n	800e408 <Encoder_Data_refresh+0x148>
 800e3de:	4b0d      	ldr	r3, [pc, #52]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	2b08      	cmp	r3, #8
 800e3e4:	d110      	bne.n	800e408 <Encoder_Data_refresh+0x148>
		{
			switch(xyz.coordinates3)
 800e3e6:	4b0b      	ldr	r3, [pc, #44]	; (800e414 <Encoder_Data_refresh+0x154>)
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	dc02      	bgt.n	800e3f4 <Encoder_Data_refresh+0x134>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	dc04      	bgt.n	800e3fc <Encoder_Data_refresh+0x13c>
		}


	}

}
 800e3f2:	e00a      	b.n	800e40a <Encoder_Data_refresh+0x14a>
 800e3f4:	3b03      	subs	r3, #3
			switch(xyz.coordinates3)
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d807      	bhi.n	800e40a <Encoder_Data_refresh+0x14a>
 800e3fa:	e002      	b.n	800e402 <Encoder_Data_refresh+0x142>
					Calibration_V_data_Refresh();
 800e3fc:	f7fe fc26 	bl	800cc4c <Calibration_V_data_Refresh>
					break;
 800e400:	e003      	b.n	800e40a <Encoder_Data_refresh+0x14a>
					Calibration_I_data_Refresh();
 800e402:	f7fe fd41 	bl	800ce88 <Calibration_I_data_Refresh>
					break;
 800e406:	e000      	b.n	800e40a <Encoder_Data_refresh+0x14a>
		}
 800e408:	46c0      	nop			; (mov r8, r8)
}
 800e40a:	46c0      	nop			; (mov r8, r8)
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	20003384 	.word	0x20003384
 800e414:	20003b8c 	.word	0x20003b8c
 800e418:	08018c38 	.word	0x08018c38

0800e41c <Encoder_Enter_Handle>:
 * @brief  编码器按键动作
 * @param  none
 * @retval None
 */
void Encoder_Enter_Handle(void)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	af00      	add	r7, sp, #0

	static 	FunctionalState ENCODER_PRESS=DISABLE;
	static int count;

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET)
 800e420:	2380      	movs	r3, #128	; 0x80
 800e422:	005a      	lsls	r2, r3, #1
 800e424:	23a0      	movs	r3, #160	; 0xa0
 800e426:	05db      	lsls	r3, r3, #23
 800e428:	0011      	movs	r1, r2
 800e42a:	0018      	movs	r0, r3
 800e42c:	f7f8 fe08 	bl	8007040 <HAL_GPIO_ReadPin>
 800e430:	1e03      	subs	r3, r0, #0
 800e432:	d10f      	bne.n	800e454 <Encoder_Enter_Handle+0x38>
	{

		if(++count>=5)
 800e434:	4b19      	ldr	r3, [pc, #100]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	4b18      	ldr	r3, [pc, #96]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e43c:	601a      	str	r2, [r3, #0]
 800e43e:	4b17      	ldr	r3, [pc, #92]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b04      	cmp	r3, #4
 800e444:	dd26      	ble.n	800e494 <Encoder_Enter_Handle+0x78>
		{
			count=5;
 800e446:	4b15      	ldr	r3, [pc, #84]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e448:	2205      	movs	r2, #5
 800e44a:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=ENABLE;
 800e44c:	4b14      	ldr	r3, [pc, #80]	; (800e4a0 <Encoder_Enter_Handle+0x84>)
 800e44e:	2201      	movs	r2, #1
 800e450:	701a      	strb	r2, [r3, #0]
		}

	}


}
 800e452:	e01f      	b.n	800e494 <Encoder_Enter_Handle+0x78>
	else if(ENCODER_PRESS==ENABLE && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_SET)
 800e454:	4b12      	ldr	r3, [pc, #72]	; (800e4a0 <Encoder_Enter_Handle+0x84>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d11b      	bne.n	800e494 <Encoder_Enter_Handle+0x78>
 800e45c:	2380      	movs	r3, #128	; 0x80
 800e45e:	005a      	lsls	r2, r3, #1
 800e460:	23a0      	movs	r3, #160	; 0xa0
 800e462:	05db      	lsls	r3, r3, #23
 800e464:	0011      	movs	r1, r2
 800e466:	0018      	movs	r0, r3
 800e468:	f7f8 fdea 	bl	8007040 <HAL_GPIO_ReadPin>
 800e46c:	0003      	movs	r3, r0
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d110      	bne.n	800e494 <Encoder_Enter_Handle+0x78>
		if(--count<=0)
 800e472:	4b0a      	ldr	r3, [pc, #40]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	1e5a      	subs	r2, r3, #1
 800e478:	4b08      	ldr	r3, [pc, #32]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	4b07      	ldr	r3, [pc, #28]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	dc07      	bgt.n	800e494 <Encoder_Enter_Handle+0x78>
			count=0;
 800e484:	4b05      	ldr	r3, [pc, #20]	; (800e49c <Encoder_Enter_Handle+0x80>)
 800e486:	2200      	movs	r2, #0
 800e488:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=DISABLE;
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <Encoder_Enter_Handle+0x84>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	701a      	strb	r2, [r3, #0]
			enter_action();//动作响应
 800e490:	f7ff fde0 	bl	800e054 <enter_action>
}
 800e494:	46c0      	nop			; (mov r8, r8)
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	46c0      	nop			; (mov r8, r8)
 800e49c:	20003b14 	.word	0x20003b14
 800e4a0:	20003b18 	.word	0x20003b18

0800e4a4 <__NVIC_SystemReset>:
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e4a8:	f3bf 8f4f 	dsb	sy
}
 800e4ac:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e4ae:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <__NVIC_SystemReset+0x1c>)
 800e4b0:	4a04      	ldr	r2, [pc, #16]	; (800e4c4 <__NVIC_SystemReset+0x20>)
 800e4b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e4b4:	f3bf 8f4f 	dsb	sy
}
 800e4b8:	46c0      	nop			; (mov r8, r8)
    __NOP();
 800e4ba:	46c0      	nop			; (mov r8, r8)
 800e4bc:	e7fd      	b.n	800e4ba <__NVIC_SystemReset+0x16>
 800e4be:	46c0      	nop			; (mov r8, r8)
 800e4c0:	e000ed00 	.word	0xe000ed00
 800e4c4:	05fa0004 	.word	0x05fa0004

0800e4c8 <String_to_float>:
/***********************************************************************************************************************************************************************************/
/*********************************************************************************以下为函数接口*************************************************************************************/
/***********************************************************************************************************************************************************************************/

float String_to_float(char* string)
{
 800e4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ca:	b087      	sub	sp, #28
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
		float value=0.0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	617b      	str	r3, [r7, #20]

		uint8_t point_index=0;
 800e4d4:	2313      	movs	r3, #19
 800e4d6:	18fb      	adds	r3, r7, r3
 800e4d8:	2200      	movs	r2, #0
 800e4da:	701a      	strb	r2, [r3, #0]
		uint8_t data_length=0;
 800e4dc:	2312      	movs	r3, #18
 800e4de:	18fb      	adds	r3, r7, r3
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<strlen(string);i++)
 800e4e4:	2311      	movs	r3, #17
 800e4e6:	18fb      	adds	r3, r7, r3
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	701a      	strb	r2, [r3, #0]
 800e4ec:	e013      	b.n	800e516 <String_to_float+0x4e>
		{
			if(string[i]=='.')
 800e4ee:	2111      	movs	r1, #17
 800e4f0:	187b      	adds	r3, r7, r1
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	18d3      	adds	r3, r2, r3
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e4fc:	d105      	bne.n	800e50a <String_to_float+0x42>
			{
				point_index=i;
 800e4fe:	2313      	movs	r3, #19
 800e500:	18fb      	adds	r3, r7, r3
 800e502:	187a      	adds	r2, r7, r1
 800e504:	7812      	ldrb	r2, [r2, #0]
 800e506:	701a      	strb	r2, [r3, #0]
				break;
 800e508:	e00f      	b.n	800e52a <String_to_float+0x62>
		for(uint8_t i=0;i<strlen(string);i++)
 800e50a:	2111      	movs	r1, #17
 800e50c:	187b      	adds	r3, r7, r1
 800e50e:	781a      	ldrb	r2, [r3, #0]
 800e510:	187b      	adds	r3, r7, r1
 800e512:	3201      	adds	r2, #1
 800e514:	701a      	strb	r2, [r3, #0]
 800e516:	2311      	movs	r3, #17
 800e518:	18fb      	adds	r3, r7, r3
 800e51a:	781c      	ldrb	r4, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	0018      	movs	r0, r3
 800e520:	f7f1 fdf8 	bl	8000114 <strlen>
 800e524:	0003      	movs	r3, r0
 800e526:	429c      	cmp	r4, r3
 800e528:	d3e1      	bcc.n	800e4ee <String_to_float+0x26>
			}

		}
		if(point_index==0)
 800e52a:	2313      	movs	r3, #19
 800e52c:	18fb      	adds	r3, r7, r3
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d169      	bne.n	800e608 <String_to_float+0x140>
		{
			for(uint8_t j=0;j<strlen(string);j++)
 800e534:	2310      	movs	r3, #16
 800e536:	18fb      	adds	r3, r7, r3
 800e538:	2200      	movs	r2, #0
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	e01a      	b.n	800e574 <String_to_float+0xac>
			{
				if(string[j]<='9' && string[j]>='0')
 800e53e:	2110      	movs	r1, #16
 800e540:	187b      	adds	r3, r7, r1
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	18d3      	adds	r3, r2, r3
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	2b39      	cmp	r3, #57	; 0x39
 800e54c:	d80c      	bhi.n	800e568 <String_to_float+0xa0>
 800e54e:	187b      	adds	r3, r7, r1
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	18d3      	adds	r3, r2, r3
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	2b2f      	cmp	r3, #47	; 0x2f
 800e55a:	d905      	bls.n	800e568 <String_to_float+0xa0>
				{
					data_length++;
 800e55c:	2112      	movs	r1, #18
 800e55e:	187b      	adds	r3, r7, r1
 800e560:	781a      	ldrb	r2, [r3, #0]
 800e562:	187b      	adds	r3, r7, r1
 800e564:	3201      	adds	r2, #1
 800e566:	701a      	strb	r2, [r3, #0]
			for(uint8_t j=0;j<strlen(string);j++)
 800e568:	2110      	movs	r1, #16
 800e56a:	187b      	adds	r3, r7, r1
 800e56c:	781a      	ldrb	r2, [r3, #0]
 800e56e:	187b      	adds	r3, r7, r1
 800e570:	3201      	adds	r2, #1
 800e572:	701a      	strb	r2, [r3, #0]
 800e574:	2310      	movs	r3, #16
 800e576:	18fb      	adds	r3, r7, r3
 800e578:	781c      	ldrb	r4, [r3, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	0018      	movs	r0, r3
 800e57e:	f7f1 fdc9 	bl	8000114 <strlen>
 800e582:	0003      	movs	r3, r0
 800e584:	429c      	cmp	r4, r3
 800e586:	d3da      	bcc.n	800e53e <String_to_float+0x76>
				}

			}
			for(uint8_t j=0;j<data_length;j++)
 800e588:	230f      	movs	r3, #15
 800e58a:	18fb      	adds	r3, r7, r3
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	e031      	b.n	800e5f6 <String_to_float+0x12e>
			{
				value+=(string[j]-'0')*(float)pow(10,(data_length-j-1));
 800e592:	250f      	movs	r5, #15
 800e594:	197b      	adds	r3, r7, r5
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	18d3      	adds	r3, r2, r3
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	3b30      	subs	r3, #48	; 0x30
 800e5a0:	0018      	movs	r0, r3
 800e5a2:	f7f2 fe51 	bl	8001248 <__aeabi_i2f>
 800e5a6:	1c04      	adds	r4, r0, #0
 800e5a8:	2312      	movs	r3, #18
 800e5aa:	18fb      	adds	r3, r7, r3
 800e5ac:	781a      	ldrb	r2, [r3, #0]
 800e5ae:	197b      	adds	r3, r7, r5
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	0018      	movs	r0, r3
 800e5b8:	f7f4 fc24 	bl	8002e04 <__aeabi_i2d>
 800e5bc:	0002      	movs	r2, r0
 800e5be:	000b      	movs	r3, r1
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	4969      	ldr	r1, [pc, #420]	; (800e768 <String_to_float+0x2a0>)
 800e5c4:	f009 f9dc 	bl	8017980 <pow>
 800e5c8:	0002      	movs	r2, r0
 800e5ca:	000b      	movs	r3, r1
 800e5cc:	0010      	movs	r0, r2
 800e5ce:	0019      	movs	r1, r3
 800e5d0:	f7f4 fcb6 	bl	8002f40 <__aeabi_d2f>
 800e5d4:	1c03      	adds	r3, r0, #0
 800e5d6:	1c19      	adds	r1, r3, #0
 800e5d8:	1c20      	adds	r0, r4, #0
 800e5da:	f7f2 fb41 	bl	8000c60 <__aeabi_fmul>
 800e5de:	1c03      	adds	r3, r0, #0
 800e5e0:	1c19      	adds	r1, r3, #0
 800e5e2:	6978      	ldr	r0, [r7, #20]
 800e5e4:	f7f1 ffd6 	bl	8000594 <__aeabi_fadd>
 800e5e8:	1c03      	adds	r3, r0, #0
 800e5ea:	617b      	str	r3, [r7, #20]
			for(uint8_t j=0;j<data_length;j++)
 800e5ec:	197b      	adds	r3, r7, r5
 800e5ee:	781a      	ldrb	r2, [r3, #0]
 800e5f0:	197b      	adds	r3, r7, r5
 800e5f2:	3201      	adds	r2, #1
 800e5f4:	701a      	strb	r2, [r3, #0]
 800e5f6:	230f      	movs	r3, #15
 800e5f8:	18fa      	adds	r2, r7, r3
 800e5fa:	2312      	movs	r3, #18
 800e5fc:	18fb      	adds	r3, r7, r3
 800e5fe:	7812      	ldrb	r2, [r2, #0]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	429a      	cmp	r2, r3
 800e604:	d3c5      	bcc.n	800e592 <String_to_float+0xca>
 800e606:	e0a9      	b.n	800e75c <String_to_float+0x294>
			{
				value+=(string[point_index+j]-'0')/(float)pow(10,j);
			}
			*/
			/*新版*/
			for(uint8_t i=0;i<point_index;i++)
 800e608:	230e      	movs	r3, #14
 800e60a:	18fb      	adds	r3, r7, r3
 800e60c:	2200      	movs	r2, #0
 800e60e:	701a      	strb	r2, [r3, #0]
 800e610:	e03b      	b.n	800e68a <String_to_float+0x1c2>
			{
				value+=(string[i]-'0')*pow(10,(point_index+1-i));
 800e612:	260e      	movs	r6, #14
 800e614:	19bb      	adds	r3, r7, r6
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	18d3      	adds	r3, r2, r3
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	3b30      	subs	r3, #48	; 0x30
 800e620:	0018      	movs	r0, r3
 800e622:	f7f4 fbef 	bl	8002e04 <__aeabi_i2d>
 800e626:	0004      	movs	r4, r0
 800e628:	000d      	movs	r5, r1
 800e62a:	2313      	movs	r3, #19
 800e62c:	18fb      	adds	r3, r7, r3
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	19bb      	adds	r3, r7, r6
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	0018      	movs	r0, r3
 800e63a:	f7f4 fbe3 	bl	8002e04 <__aeabi_i2d>
 800e63e:	0002      	movs	r2, r0
 800e640:	000b      	movs	r3, r1
 800e642:	2000      	movs	r0, #0
 800e644:	4948      	ldr	r1, [pc, #288]	; (800e768 <String_to_float+0x2a0>)
 800e646:	f009 f99b 	bl	8017980 <pow>
 800e64a:	0002      	movs	r2, r0
 800e64c:	000b      	movs	r3, r1
 800e64e:	0020      	movs	r0, r4
 800e650:	0029      	movs	r1, r5
 800e652:	f7f3 fd85 	bl	8002160 <__aeabi_dmul>
 800e656:	0002      	movs	r2, r0
 800e658:	000b      	movs	r3, r1
 800e65a:	0014      	movs	r4, r2
 800e65c:	001d      	movs	r5, r3
 800e65e:	6978      	ldr	r0, [r7, #20]
 800e660:	f7f4 fc26 	bl	8002eb0 <__aeabi_f2d>
 800e664:	0002      	movs	r2, r0
 800e666:	000b      	movs	r3, r1
 800e668:	0020      	movs	r0, r4
 800e66a:	0029      	movs	r1, r5
 800e66c:	f7f2 fe3a 	bl	80012e4 <__aeabi_dadd>
 800e670:	0002      	movs	r2, r0
 800e672:	000b      	movs	r3, r1
 800e674:	0010      	movs	r0, r2
 800e676:	0019      	movs	r1, r3
 800e678:	f7f4 fc62 	bl	8002f40 <__aeabi_d2f>
 800e67c:	1c03      	adds	r3, r0, #0
 800e67e:	617b      	str	r3, [r7, #20]
			for(uint8_t i=0;i<point_index;i++)
 800e680:	19bb      	adds	r3, r7, r6
 800e682:	781a      	ldrb	r2, [r3, #0]
 800e684:	19bb      	adds	r3, r7, r6
 800e686:	3201      	adds	r2, #1
 800e688:	701a      	strb	r2, [r3, #0]
 800e68a:	230e      	movs	r3, #14
 800e68c:	18fa      	adds	r2, r7, r3
 800e68e:	2313      	movs	r3, #19
 800e690:	18fb      	adds	r3, r7, r3
 800e692:	7812      	ldrb	r2, [r2, #0]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d3bb      	bcc.n	800e612 <String_to_float+0x14a>
			}
			/*小数后两位*/
			for(uint8_t j=1;j<3;j++)
 800e69a:	230d      	movs	r3, #13
 800e69c:	18fb      	adds	r3, r7, r3
 800e69e:	2201      	movs	r2, #1
 800e6a0:	701a      	strb	r2, [r3, #0]
 800e6a2:	e050      	b.n	800e746 <String_to_float+0x27e>
			{
				if(string[j+point_index]!=' ')
 800e6a4:	260d      	movs	r6, #13
 800e6a6:	19bb      	adds	r3, r7, r6
 800e6a8:	781a      	ldrb	r2, [r3, #0]
 800e6aa:	2113      	movs	r1, #19
 800e6ac:	187b      	adds	r3, r7, r1
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	18d3      	adds	r3, r2, r3
 800e6b2:	001a      	movs	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	189b      	adds	r3, r3, r2
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b20      	cmp	r3, #32
 800e6bc:	d037      	beq.n	800e72e <String_to_float+0x266>
				{
					value+=(string[j+point_index]-'0')*pow(10,2-j);
 800e6be:	19bb      	adds	r3, r7, r6
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	187b      	adds	r3, r7, r1
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	18d3      	adds	r3, r2, r3
 800e6c8:	001a      	movs	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	189b      	adds	r3, r3, r2
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	3b30      	subs	r3, #48	; 0x30
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	f7f4 fb96 	bl	8002e04 <__aeabi_i2d>
 800e6d8:	0004      	movs	r4, r0
 800e6da:	000d      	movs	r5, r1
 800e6dc:	19bb      	adds	r3, r7, r6
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	f7f4 fb8d 	bl	8002e04 <__aeabi_i2d>
 800e6ea:	0002      	movs	r2, r0
 800e6ec:	000b      	movs	r3, r1
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	491d      	ldr	r1, [pc, #116]	; (800e768 <String_to_float+0x2a0>)
 800e6f2:	f009 f945 	bl	8017980 <pow>
 800e6f6:	0002      	movs	r2, r0
 800e6f8:	000b      	movs	r3, r1
 800e6fa:	0020      	movs	r0, r4
 800e6fc:	0029      	movs	r1, r5
 800e6fe:	f7f3 fd2f 	bl	8002160 <__aeabi_dmul>
 800e702:	0002      	movs	r2, r0
 800e704:	000b      	movs	r3, r1
 800e706:	0014      	movs	r4, r2
 800e708:	001d      	movs	r5, r3
 800e70a:	6978      	ldr	r0, [r7, #20]
 800e70c:	f7f4 fbd0 	bl	8002eb0 <__aeabi_f2d>
 800e710:	0002      	movs	r2, r0
 800e712:	000b      	movs	r3, r1
 800e714:	0020      	movs	r0, r4
 800e716:	0029      	movs	r1, r5
 800e718:	f7f2 fde4 	bl	80012e4 <__aeabi_dadd>
 800e71c:	0002      	movs	r2, r0
 800e71e:	000b      	movs	r3, r1
 800e720:	0010      	movs	r0, r2
 800e722:	0019      	movs	r1, r3
 800e724:	f7f4 fc0c 	bl	8002f40 <__aeabi_d2f>
 800e728:	1c03      	adds	r3, r0, #0
 800e72a:	617b      	str	r3, [r7, #20]
 800e72c:	e005      	b.n	800e73a <String_to_float+0x272>
				}
				else value+=0;
 800e72e:	2100      	movs	r1, #0
 800e730:	6978      	ldr	r0, [r7, #20]
 800e732:	f7f1 ff2f 	bl	8000594 <__aeabi_fadd>
 800e736:	1c03      	adds	r3, r0, #0
 800e738:	617b      	str	r3, [r7, #20]
			for(uint8_t j=1;j<3;j++)
 800e73a:	210d      	movs	r1, #13
 800e73c:	187b      	adds	r3, r7, r1
 800e73e:	781a      	ldrb	r2, [r3, #0]
 800e740:	187b      	adds	r3, r7, r1
 800e742:	3201      	adds	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
 800e746:	230d      	movs	r3, #13
 800e748:	18fb      	adds	r3, r7, r3
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b02      	cmp	r3, #2
 800e74e:	d9a9      	bls.n	800e6a4 <String_to_float+0x1dc>

			}
			value/=100.0;
 800e750:	4906      	ldr	r1, [pc, #24]	; (800e76c <String_to_float+0x2a4>)
 800e752:	6978      	ldr	r0, [r7, #20]
 800e754:	f7f2 f8bc 	bl	80008d0 <__aeabi_fdiv>
 800e758:	1c03      	adds	r3, r0, #0
 800e75a:	617b      	str	r3, [r7, #20]


		}


		return value;
 800e75c:	697b      	ldr	r3, [r7, #20]




}
 800e75e:	1c18      	adds	r0, r3, #0
 800e760:	46bd      	mov	sp, r7
 800e762:	b007      	add	sp, #28
 800e764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e766:	46c0      	nop			; (mov r8, r8)
 800e768:	40240000 	.word	0x40240000
 800e76c:	42c80000 	.word	0x42c80000

0800e770 <String_To_Float>:
 * @brief  将设定电压电流功率字符数组变为浮点数
 * @param	数组名
 * @retval 对应的浮点数
 */
float String_To_Float(char* string)
{
 800e770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e772:	b087      	sub	sp, #28
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]

	float sum=0.0;
 800e778:	2300      	movs	r3, #0
 800e77a:	617b      	str	r3, [r7, #20]
	/*V set I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e77c:	4bdc      	ldr	r3, [pc, #880]	; (800eaf0 <String_To_Float+0x380>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b02      	cmp	r3, #2
 800e782:	d000      	beq.n	800e786 <String_To_Float+0x16>
 800e784:	e081      	b.n	800e88a <String_To_Float+0x11a>
 800e786:	4bda      	ldr	r3, [pc, #872]	; (800eaf0 <String_To_Float+0x380>)
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d100      	bne.n	800e790 <String_To_Float+0x20>
 800e78e:	e07c      	b.n	800e88a <String_To_Float+0x11a>
	{
		for(uint8_t i=0;i<3;i++)
 800e790:	2313      	movs	r3, #19
 800e792:	18fb      	adds	r3, r7, r3
 800e794:	2200      	movs	r2, #0
 800e796:	701a      	strb	r2, [r3, #0]
 800e798:	e038      	b.n	800e80c <String_To_Float+0x9c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e79a:	2613      	movs	r6, #19
 800e79c:	19bb      	adds	r3, r7, r6
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	18d3      	adds	r3, r2, r3
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	3b30      	subs	r3, #48	; 0x30
 800e7a8:	0018      	movs	r0, r3
 800e7aa:	f7f4 fb2b 	bl	8002e04 <__aeabi_i2d>
 800e7ae:	0004      	movs	r4, r0
 800e7b0:	000d      	movs	r5, r1
 800e7b2:	19bb      	adds	r3, r7, r6
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	2202      	movs	r2, #2
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	0018      	movs	r0, r3
 800e7bc:	f7f4 fb22 	bl	8002e04 <__aeabi_i2d>
 800e7c0:	0002      	movs	r2, r0
 800e7c2:	000b      	movs	r3, r1
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	49cb      	ldr	r1, [pc, #812]	; (800eaf4 <String_To_Float+0x384>)
 800e7c8:	f009 f8da 	bl	8017980 <pow>
 800e7cc:	0002      	movs	r2, r0
 800e7ce:	000b      	movs	r3, r1
 800e7d0:	0020      	movs	r0, r4
 800e7d2:	0029      	movs	r1, r5
 800e7d4:	f7f3 fcc4 	bl	8002160 <__aeabi_dmul>
 800e7d8:	0002      	movs	r2, r0
 800e7da:	000b      	movs	r3, r1
 800e7dc:	0014      	movs	r4, r2
 800e7de:	001d      	movs	r5, r3
 800e7e0:	6978      	ldr	r0, [r7, #20]
 800e7e2:	f7f4 fb65 	bl	8002eb0 <__aeabi_f2d>
 800e7e6:	0002      	movs	r2, r0
 800e7e8:	000b      	movs	r3, r1
 800e7ea:	0020      	movs	r0, r4
 800e7ec:	0029      	movs	r1, r5
 800e7ee:	f7f2 fd79 	bl	80012e4 <__aeabi_dadd>
 800e7f2:	0002      	movs	r2, r0
 800e7f4:	000b      	movs	r3, r1
 800e7f6:	0010      	movs	r0, r2
 800e7f8:	0019      	movs	r1, r3
 800e7fa:	f7f4 fba1 	bl	8002f40 <__aeabi_d2f>
 800e7fe:	1c03      	adds	r3, r0, #0
 800e800:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<3;i++)
 800e802:	19bb      	adds	r3, r7, r6
 800e804:	781a      	ldrb	r2, [r3, #0]
 800e806:	19bb      	adds	r3, r7, r6
 800e808:	3201      	adds	r2, #1
 800e80a:	701a      	strb	r2, [r3, #0]
 800e80c:	2313      	movs	r3, #19
 800e80e:	18fb      	adds	r3, r7, r3
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	2b02      	cmp	r3, #2
 800e814:	d9c1      	bls.n	800e79a <String_To_Float+0x2a>
		}
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e816:	2312      	movs	r3, #18
 800e818:	18fb      	adds	r3, r7, r3
 800e81a:	2204      	movs	r2, #4
 800e81c:	701a      	strb	r2, [r3, #0]
 800e81e:	e02d      	b.n	800e87c <String_To_Float+0x10c>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e820:	2512      	movs	r5, #18
 800e822:	197b      	adds	r3, r7, r5
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	18d3      	adds	r3, r2, r3
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	3b30      	subs	r3, #48	; 0x30
 800e82e:	0018      	movs	r0, r3
 800e830:	f7f2 fd0a 	bl	8001248 <__aeabi_i2f>
 800e834:	1c04      	adds	r4, r0, #0
 800e836:	197b      	adds	r3, r7, r5
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	3b03      	subs	r3, #3
 800e83c:	0018      	movs	r0, r3
 800e83e:	f7f4 fae1 	bl	8002e04 <__aeabi_i2d>
 800e842:	0002      	movs	r2, r0
 800e844:	000b      	movs	r3, r1
 800e846:	2000      	movs	r0, #0
 800e848:	49aa      	ldr	r1, [pc, #680]	; (800eaf4 <String_To_Float+0x384>)
 800e84a:	f009 f899 	bl	8017980 <pow>
 800e84e:	0002      	movs	r2, r0
 800e850:	000b      	movs	r3, r1
 800e852:	0010      	movs	r0, r2
 800e854:	0019      	movs	r1, r3
 800e856:	f7f4 fb73 	bl	8002f40 <__aeabi_d2f>
 800e85a:	1c03      	adds	r3, r0, #0
 800e85c:	1c19      	adds	r1, r3, #0
 800e85e:	1c20      	adds	r0, r4, #0
 800e860:	f7f2 f836 	bl	80008d0 <__aeabi_fdiv>
 800e864:	1c03      	adds	r3, r0, #0
 800e866:	1c19      	adds	r1, r3, #0
 800e868:	6978      	ldr	r0, [r7, #20]
 800e86a:	f7f1 fe93 	bl	8000594 <__aeabi_fadd>
 800e86e:	1c03      	adds	r3, r0, #0
 800e870:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e872:	197b      	adds	r3, r7, r5
 800e874:	781a      	ldrb	r2, [r3, #0]
 800e876:	197b      	adds	r3, r7, r5
 800e878:	3201      	adds	r2, #1
 800e87a:	701a      	strb	r2, [r3, #0]
 800e87c:	2312      	movs	r3, #18
 800e87e:	18fb      	adds	r3, r7, r3
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	2b05      	cmp	r3, #5
 800e884:	d9cc      	bls.n	800e820 <String_To_Float+0xb0>
		}
		return sum;
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	e284      	b.n	800ed94 <String_To_Float+0x624>
	}
	//rata set
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 800e88a:	4b99      	ldr	r3, [pc, #612]	; (800eaf0 <String_To_Float+0x380>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d000      	beq.n	800e894 <String_To_Float+0x124>
 800e892:	e085      	b.n	800e9a0 <String_To_Float+0x230>
 800e894:	4b96      	ldr	r3, [pc, #600]	; (800eaf0 <String_To_Float+0x380>)
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d000      	beq.n	800e89e <String_To_Float+0x12e>
 800e89c:	e080      	b.n	800e9a0 <String_To_Float+0x230>
 800e89e:	4b94      	ldr	r3, [pc, #592]	; (800eaf0 <String_To_Float+0x380>)
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d100      	bne.n	800e8a8 <String_To_Float+0x138>
 800e8a6:	e07b      	b.n	800e9a0 <String_To_Float+0x230>
	{
		for(uint8_t i=0;i<1;i++)
 800e8a8:	2311      	movs	r3, #17
 800e8aa:	18fb      	adds	r3, r7, r3
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	701a      	strb	r2, [r3, #0]
 800e8b0:	e037      	b.n	800e922 <String_To_Float+0x1b2>
		{
			sum+=(string[i]-'0')*(pow(10,(0-i)));
 800e8b2:	2611      	movs	r6, #17
 800e8b4:	19bb      	adds	r3, r7, r6
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	18d3      	adds	r3, r2, r3
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	3b30      	subs	r3, #48	; 0x30
 800e8c0:	0018      	movs	r0, r3
 800e8c2:	f7f4 fa9f 	bl	8002e04 <__aeabi_i2d>
 800e8c6:	0004      	movs	r4, r0
 800e8c8:	000d      	movs	r5, r1
 800e8ca:	19bb      	adds	r3, r7, r6
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	425b      	negs	r3, r3
 800e8d0:	0018      	movs	r0, r3
 800e8d2:	f7f4 fa97 	bl	8002e04 <__aeabi_i2d>
 800e8d6:	0002      	movs	r2, r0
 800e8d8:	000b      	movs	r3, r1
 800e8da:	2000      	movs	r0, #0
 800e8dc:	4985      	ldr	r1, [pc, #532]	; (800eaf4 <String_To_Float+0x384>)
 800e8de:	f009 f84f 	bl	8017980 <pow>
 800e8e2:	0002      	movs	r2, r0
 800e8e4:	000b      	movs	r3, r1
 800e8e6:	0020      	movs	r0, r4
 800e8e8:	0029      	movs	r1, r5
 800e8ea:	f7f3 fc39 	bl	8002160 <__aeabi_dmul>
 800e8ee:	0002      	movs	r2, r0
 800e8f0:	000b      	movs	r3, r1
 800e8f2:	0014      	movs	r4, r2
 800e8f4:	001d      	movs	r5, r3
 800e8f6:	6978      	ldr	r0, [r7, #20]
 800e8f8:	f7f4 fada 	bl	8002eb0 <__aeabi_f2d>
 800e8fc:	0002      	movs	r2, r0
 800e8fe:	000b      	movs	r3, r1
 800e900:	0020      	movs	r0, r4
 800e902:	0029      	movs	r1, r5
 800e904:	f7f2 fcee 	bl	80012e4 <__aeabi_dadd>
 800e908:	0002      	movs	r2, r0
 800e90a:	000b      	movs	r3, r1
 800e90c:	0010      	movs	r0, r2
 800e90e:	0019      	movs	r1, r3
 800e910:	f7f4 fb16 	bl	8002f40 <__aeabi_d2f>
 800e914:	1c03      	adds	r3, r0, #0
 800e916:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<1;i++)
 800e918:	19bb      	adds	r3, r7, r6
 800e91a:	781a      	ldrb	r2, [r3, #0]
 800e91c:	19bb      	adds	r3, r7, r6
 800e91e:	3201      	adds	r2, #1
 800e920:	701a      	strb	r2, [r3, #0]
 800e922:	2311      	movs	r3, #17
 800e924:	18fb      	adds	r3, r7, r3
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d0c2      	beq.n	800e8b2 <String_To_Float+0x142>
		}
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e92c:	2310      	movs	r3, #16
 800e92e:	18fb      	adds	r3, r7, r3
 800e930:	2202      	movs	r2, #2
 800e932:	701a      	strb	r2, [r3, #0]
 800e934:	e02d      	b.n	800e992 <String_To_Float+0x222>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-1)));
 800e936:	2510      	movs	r5, #16
 800e938:	197b      	adds	r3, r7, r5
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	18d3      	adds	r3, r2, r3
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	3b30      	subs	r3, #48	; 0x30
 800e944:	0018      	movs	r0, r3
 800e946:	f7f2 fc7f 	bl	8001248 <__aeabi_i2f>
 800e94a:	1c04      	adds	r4, r0, #0
 800e94c:	197b      	adds	r3, r7, r5
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	3b01      	subs	r3, #1
 800e952:	0018      	movs	r0, r3
 800e954:	f7f4 fa56 	bl	8002e04 <__aeabi_i2d>
 800e958:	0002      	movs	r2, r0
 800e95a:	000b      	movs	r3, r1
 800e95c:	2000      	movs	r0, #0
 800e95e:	4965      	ldr	r1, [pc, #404]	; (800eaf4 <String_To_Float+0x384>)
 800e960:	f009 f80e 	bl	8017980 <pow>
 800e964:	0002      	movs	r2, r0
 800e966:	000b      	movs	r3, r1
 800e968:	0010      	movs	r0, r2
 800e96a:	0019      	movs	r1, r3
 800e96c:	f7f4 fae8 	bl	8002f40 <__aeabi_d2f>
 800e970:	1c03      	adds	r3, r0, #0
 800e972:	1c19      	adds	r1, r3, #0
 800e974:	1c20      	adds	r0, r4, #0
 800e976:	f7f1 ffab 	bl	80008d0 <__aeabi_fdiv>
 800e97a:	1c03      	adds	r3, r0, #0
 800e97c:	1c19      	adds	r1, r3, #0
 800e97e:	6978      	ldr	r0, [r7, #20]
 800e980:	f7f1 fe08 	bl	8000594 <__aeabi_fadd>
 800e984:	1c03      	adds	r3, r0, #0
 800e986:	617b      	str	r3, [r7, #20]
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e988:	197b      	adds	r3, r7, r5
 800e98a:	781a      	ldrb	r2, [r3, #0]
 800e98c:	197b      	adds	r3, r7, r5
 800e98e:	3201      	adds	r2, #1
 800e990:	701a      	strb	r2, [r3, #0]
 800e992:	2310      	movs	r3, #16
 800e994:	18fb      	adds	r3, r7, r3
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b03      	cmp	r3, #3
 800e99a:	d9cc      	bls.n	800e936 <String_To_Float+0x1c6>
		}
		return sum;
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	e1f9      	b.n	800ed94 <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))
 800e9a0:	4b53      	ldr	r3, [pc, #332]	; (800eaf0 <String_To_Float+0x380>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d14c      	bne.n	800ea42 <String_To_Float+0x2d2>
 800e9a8:	4b51      	ldr	r3, [pc, #324]	; (800eaf0 <String_To_Float+0x380>)
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	2b05      	cmp	r3, #5
 800e9ae:	d148      	bne.n	800ea42 <String_To_Float+0x2d2>
 800e9b0:	4b4f      	ldr	r3, [pc, #316]	; (800eaf0 <String_To_Float+0x380>)
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d144      	bne.n	800ea42 <String_To_Float+0x2d2>
	{
		for(uint8_t i=0;i<2;i++)
 800e9b8:	230f      	movs	r3, #15
 800e9ba:	18fb      	adds	r3, r7, r3
 800e9bc:	2200      	movs	r2, #0
 800e9be:	701a      	strb	r2, [r3, #0]
 800e9c0:	e038      	b.n	800ea34 <String_To_Float+0x2c4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e9c2:	260f      	movs	r6, #15
 800e9c4:	19bb      	adds	r3, r7, r6
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	18d3      	adds	r3, r2, r3
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	3b30      	subs	r3, #48	; 0x30
 800e9d0:	0018      	movs	r0, r3
 800e9d2:	f7f4 fa17 	bl	8002e04 <__aeabi_i2d>
 800e9d6:	0004      	movs	r4, r0
 800e9d8:	000d      	movs	r5, r1
 800e9da:	19bb      	adds	r3, r7, r6
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2202      	movs	r2, #2
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	0018      	movs	r0, r3
 800e9e4:	f7f4 fa0e 	bl	8002e04 <__aeabi_i2d>
 800e9e8:	0002      	movs	r2, r0
 800e9ea:	000b      	movs	r3, r1
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	4941      	ldr	r1, [pc, #260]	; (800eaf4 <String_To_Float+0x384>)
 800e9f0:	f008 ffc6 	bl	8017980 <pow>
 800e9f4:	0002      	movs	r2, r0
 800e9f6:	000b      	movs	r3, r1
 800e9f8:	0020      	movs	r0, r4
 800e9fa:	0029      	movs	r1, r5
 800e9fc:	f7f3 fbb0 	bl	8002160 <__aeabi_dmul>
 800ea00:	0002      	movs	r2, r0
 800ea02:	000b      	movs	r3, r1
 800ea04:	0014      	movs	r4, r2
 800ea06:	001d      	movs	r5, r3
 800ea08:	6978      	ldr	r0, [r7, #20]
 800ea0a:	f7f4 fa51 	bl	8002eb0 <__aeabi_f2d>
 800ea0e:	0002      	movs	r2, r0
 800ea10:	000b      	movs	r3, r1
 800ea12:	0020      	movs	r0, r4
 800ea14:	0029      	movs	r1, r5
 800ea16:	f7f2 fc65 	bl	80012e4 <__aeabi_dadd>
 800ea1a:	0002      	movs	r2, r0
 800ea1c:	000b      	movs	r3, r1
 800ea1e:	0010      	movs	r0, r2
 800ea20:	0019      	movs	r1, r3
 800ea22:	f7f4 fa8d 	bl	8002f40 <__aeabi_d2f>
 800ea26:	1c03      	adds	r3, r0, #0
 800ea28:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800ea2a:	19bb      	adds	r3, r7, r6
 800ea2c:	781a      	ldrb	r2, [r3, #0]
 800ea2e:	19bb      	adds	r3, r7, r6
 800ea30:	3201      	adds	r2, #1
 800ea32:	701a      	strb	r2, [r3, #0]
 800ea34:	230f      	movs	r3, #15
 800ea36:	18fb      	adds	r3, r7, r3
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d9c1      	bls.n	800e9c2 <String_To_Float+0x252>
		}

		return sum;
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	e1a8      	b.n	800ed94 <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 800ea42:	4b2b      	ldr	r3, [pc, #172]	; (800eaf0 <String_To_Float+0x380>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d000      	beq.n	800ea4c <String_To_Float+0x2dc>
 800ea4a:	e08a      	b.n	800eb62 <String_To_Float+0x3f2>
 800ea4c:	4b28      	ldr	r3, [pc, #160]	; (800eaf0 <String_To_Float+0x380>)
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	2b05      	cmp	r3, #5
 800ea52:	d000      	beq.n	800ea56 <String_To_Float+0x2e6>
 800ea54:	e085      	b.n	800eb62 <String_To_Float+0x3f2>
 800ea56:	4b26      	ldr	r3, [pc, #152]	; (800eaf0 <String_To_Float+0x380>)
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	d000      	beq.n	800ea60 <String_To_Float+0x2f0>
 800ea5e:	e080      	b.n	800eb62 <String_To_Float+0x3f2>
	{
		for(uint8_t i=0;i<2;i++)
 800ea60:	230e      	movs	r3, #14
 800ea62:	18fb      	adds	r3, r7, r3
 800ea64:	2200      	movs	r2, #0
 800ea66:	701a      	strb	r2, [r3, #0]
 800ea68:	e038      	b.n	800eadc <String_To_Float+0x36c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800ea6a:	260e      	movs	r6, #14
 800ea6c:	19bb      	adds	r3, r7, r6
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	18d3      	adds	r3, r2, r3
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	3b30      	subs	r3, #48	; 0x30
 800ea78:	0018      	movs	r0, r3
 800ea7a:	f7f4 f9c3 	bl	8002e04 <__aeabi_i2d>
 800ea7e:	0004      	movs	r4, r0
 800ea80:	000d      	movs	r5, r1
 800ea82:	19bb      	adds	r3, r7, r6
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	2202      	movs	r2, #2
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	0018      	movs	r0, r3
 800ea8c:	f7f4 f9ba 	bl	8002e04 <__aeabi_i2d>
 800ea90:	0002      	movs	r2, r0
 800ea92:	000b      	movs	r3, r1
 800ea94:	2000      	movs	r0, #0
 800ea96:	4917      	ldr	r1, [pc, #92]	; (800eaf4 <String_To_Float+0x384>)
 800ea98:	f008 ff72 	bl	8017980 <pow>
 800ea9c:	0002      	movs	r2, r0
 800ea9e:	000b      	movs	r3, r1
 800eaa0:	0020      	movs	r0, r4
 800eaa2:	0029      	movs	r1, r5
 800eaa4:	f7f3 fb5c 	bl	8002160 <__aeabi_dmul>
 800eaa8:	0002      	movs	r2, r0
 800eaaa:	000b      	movs	r3, r1
 800eaac:	0014      	movs	r4, r2
 800eaae:	001d      	movs	r5, r3
 800eab0:	6978      	ldr	r0, [r7, #20]
 800eab2:	f7f4 f9fd 	bl	8002eb0 <__aeabi_f2d>
 800eab6:	0002      	movs	r2, r0
 800eab8:	000b      	movs	r3, r1
 800eaba:	0020      	movs	r0, r4
 800eabc:	0029      	movs	r1, r5
 800eabe:	f7f2 fc11 	bl	80012e4 <__aeabi_dadd>
 800eac2:	0002      	movs	r2, r0
 800eac4:	000b      	movs	r3, r1
 800eac6:	0010      	movs	r0, r2
 800eac8:	0019      	movs	r1, r3
 800eaca:	f7f4 fa39 	bl	8002f40 <__aeabi_d2f>
 800eace:	1c03      	adds	r3, r0, #0
 800ead0:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800ead2:	19bb      	adds	r3, r7, r6
 800ead4:	781a      	ldrb	r2, [r3, #0]
 800ead6:	19bb      	adds	r3, r7, r6
 800ead8:	3201      	adds	r2, #1
 800eada:	701a      	strb	r2, [r3, #0]
 800eadc:	230e      	movs	r3, #14
 800eade:	18fb      	adds	r3, r7, r3
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d9c1      	bls.n	800ea6a <String_To_Float+0x2fa>
		}
		for(uint8_t i=4;i<=5;i++)
 800eae6:	230d      	movs	r3, #13
 800eae8:	18fb      	adds	r3, r7, r3
 800eaea:	2204      	movs	r2, #4
 800eaec:	701a      	strb	r2, [r3, #0]
 800eaee:	e031      	b.n	800eb54 <String_To_Float+0x3e4>
 800eaf0:	20003b8c 	.word	0x20003b8c
 800eaf4:	40240000 	.word	0x40240000
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800eaf8:	250d      	movs	r5, #13
 800eafa:	197b      	adds	r3, r7, r5
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	18d3      	adds	r3, r2, r3
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	3b30      	subs	r3, #48	; 0x30
 800eb06:	0018      	movs	r0, r3
 800eb08:	f7f2 fb9e 	bl	8001248 <__aeabi_i2f>
 800eb0c:	1c04      	adds	r4, r0, #0
 800eb0e:	197b      	adds	r3, r7, r5
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	3b03      	subs	r3, #3
 800eb14:	0018      	movs	r0, r3
 800eb16:	f7f4 f975 	bl	8002e04 <__aeabi_i2d>
 800eb1a:	0002      	movs	r2, r0
 800eb1c:	000b      	movs	r3, r1
 800eb1e:	2000      	movs	r0, #0
 800eb20:	499e      	ldr	r1, [pc, #632]	; (800ed9c <String_To_Float+0x62c>)
 800eb22:	f008 ff2d 	bl	8017980 <pow>
 800eb26:	0002      	movs	r2, r0
 800eb28:	000b      	movs	r3, r1
 800eb2a:	0010      	movs	r0, r2
 800eb2c:	0019      	movs	r1, r3
 800eb2e:	f7f4 fa07 	bl	8002f40 <__aeabi_d2f>
 800eb32:	1c03      	adds	r3, r0, #0
 800eb34:	1c19      	adds	r1, r3, #0
 800eb36:	1c20      	adds	r0, r4, #0
 800eb38:	f7f1 feca 	bl	80008d0 <__aeabi_fdiv>
 800eb3c:	1c03      	adds	r3, r0, #0
 800eb3e:	1c19      	adds	r1, r3, #0
 800eb40:	6978      	ldr	r0, [r7, #20]
 800eb42:	f7f1 fd27 	bl	8000594 <__aeabi_fadd>
 800eb46:	1c03      	adds	r3, r0, #0
 800eb48:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800eb4a:	197b      	adds	r3, r7, r5
 800eb4c:	781a      	ldrb	r2, [r3, #0]
 800eb4e:	197b      	adds	r3, r7, r5
 800eb50:	3201      	adds	r2, #1
 800eb52:	701a      	strb	r2, [r3, #0]
 800eb54:	230d      	movs	r3, #13
 800eb56:	18fb      	adds	r3, r7, r3
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	2b05      	cmp	r3, #5
 800eb5c:	d9cc      	bls.n	800eaf8 <String_To_Float+0x388>
		}

		return sum;
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	e118      	b.n	800ed94 <String_To_Float+0x624>
	}
	/*save load*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 800eb62:	4b8f      	ldr	r3, [pc, #572]	; (800eda0 <String_To_Float+0x630>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b03      	cmp	r3, #3
 800eb68:	d000      	beq.n	800eb6c <String_To_Float+0x3fc>
 800eb6a:	e086      	b.n	800ec7a <String_To_Float+0x50a>
 800eb6c:	4b8c      	ldr	r3, [pc, #560]	; (800eda0 <String_To_Float+0x630>)
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d100      	bne.n	800eb76 <String_To_Float+0x406>
 800eb74:	e081      	b.n	800ec7a <String_To_Float+0x50a>
 800eb76:	4b8a      	ldr	r3, [pc, #552]	; (800eda0 <String_To_Float+0x630>)
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d100      	bne.n	800eb80 <String_To_Float+0x410>
 800eb7e:	e07c      	b.n	800ec7a <String_To_Float+0x50a>
	{
		for(uint8_t i=0;i<=2;i++)
 800eb80:	230c      	movs	r3, #12
 800eb82:	18fb      	adds	r3, r7, r3
 800eb84:	2200      	movs	r2, #0
 800eb86:	701a      	strb	r2, [r3, #0]
 800eb88:	e038      	b.n	800ebfc <String_To_Float+0x48c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800eb8a:	260c      	movs	r6, #12
 800eb8c:	19bb      	adds	r3, r7, r6
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	18d3      	adds	r3, r2, r3
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	3b30      	subs	r3, #48	; 0x30
 800eb98:	0018      	movs	r0, r3
 800eb9a:	f7f4 f933 	bl	8002e04 <__aeabi_i2d>
 800eb9e:	0004      	movs	r4, r0
 800eba0:	000d      	movs	r5, r1
 800eba2:	19bb      	adds	r3, r7, r6
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	2202      	movs	r2, #2
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	0018      	movs	r0, r3
 800ebac:	f7f4 f92a 	bl	8002e04 <__aeabi_i2d>
 800ebb0:	0002      	movs	r2, r0
 800ebb2:	000b      	movs	r3, r1
 800ebb4:	2000      	movs	r0, #0
 800ebb6:	4979      	ldr	r1, [pc, #484]	; (800ed9c <String_To_Float+0x62c>)
 800ebb8:	f008 fee2 	bl	8017980 <pow>
 800ebbc:	0002      	movs	r2, r0
 800ebbe:	000b      	movs	r3, r1
 800ebc0:	0020      	movs	r0, r4
 800ebc2:	0029      	movs	r1, r5
 800ebc4:	f7f3 facc 	bl	8002160 <__aeabi_dmul>
 800ebc8:	0002      	movs	r2, r0
 800ebca:	000b      	movs	r3, r1
 800ebcc:	0014      	movs	r4, r2
 800ebce:	001d      	movs	r5, r3
 800ebd0:	6978      	ldr	r0, [r7, #20]
 800ebd2:	f7f4 f96d 	bl	8002eb0 <__aeabi_f2d>
 800ebd6:	0002      	movs	r2, r0
 800ebd8:	000b      	movs	r3, r1
 800ebda:	0020      	movs	r0, r4
 800ebdc:	0029      	movs	r1, r5
 800ebde:	f7f2 fb81 	bl	80012e4 <__aeabi_dadd>
 800ebe2:	0002      	movs	r2, r0
 800ebe4:	000b      	movs	r3, r1
 800ebe6:	0010      	movs	r0, r2
 800ebe8:	0019      	movs	r1, r3
 800ebea:	f7f4 f9a9 	bl	8002f40 <__aeabi_d2f>
 800ebee:	1c03      	adds	r3, r0, #0
 800ebf0:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800ebf2:	19bb      	adds	r3, r7, r6
 800ebf4:	781a      	ldrb	r2, [r3, #0]
 800ebf6:	19bb      	adds	r3, r7, r6
 800ebf8:	3201      	adds	r2, #1
 800ebfa:	701a      	strb	r2, [r3, #0]
 800ebfc:	230c      	movs	r3, #12
 800ebfe:	18fb      	adds	r3, r7, r3
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	d9c1      	bls.n	800eb8a <String_To_Float+0x41a>
		}
		for(uint8_t i=4;i<=5;i++)
 800ec06:	230b      	movs	r3, #11
 800ec08:	18fb      	adds	r3, r7, r3
 800ec0a:	2204      	movs	r2, #4
 800ec0c:	701a      	strb	r2, [r3, #0]
 800ec0e:	e02d      	b.n	800ec6c <String_To_Float+0x4fc>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800ec10:	250b      	movs	r5, #11
 800ec12:	197b      	adds	r3, r7, r5
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	18d3      	adds	r3, r2, r3
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	3b30      	subs	r3, #48	; 0x30
 800ec1e:	0018      	movs	r0, r3
 800ec20:	f7f2 fb12 	bl	8001248 <__aeabi_i2f>
 800ec24:	1c04      	adds	r4, r0, #0
 800ec26:	197b      	adds	r3, r7, r5
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	3b03      	subs	r3, #3
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	f7f4 f8e9 	bl	8002e04 <__aeabi_i2d>
 800ec32:	0002      	movs	r2, r0
 800ec34:	000b      	movs	r3, r1
 800ec36:	2000      	movs	r0, #0
 800ec38:	4958      	ldr	r1, [pc, #352]	; (800ed9c <String_To_Float+0x62c>)
 800ec3a:	f008 fea1 	bl	8017980 <pow>
 800ec3e:	0002      	movs	r2, r0
 800ec40:	000b      	movs	r3, r1
 800ec42:	0010      	movs	r0, r2
 800ec44:	0019      	movs	r1, r3
 800ec46:	f7f4 f97b 	bl	8002f40 <__aeabi_d2f>
 800ec4a:	1c03      	adds	r3, r0, #0
 800ec4c:	1c19      	adds	r1, r3, #0
 800ec4e:	1c20      	adds	r0, r4, #0
 800ec50:	f7f1 fe3e 	bl	80008d0 <__aeabi_fdiv>
 800ec54:	1c03      	adds	r3, r0, #0
 800ec56:	1c19      	adds	r1, r3, #0
 800ec58:	6978      	ldr	r0, [r7, #20]
 800ec5a:	f7f1 fc9b 	bl	8000594 <__aeabi_fadd>
 800ec5e:	1c03      	adds	r3, r0, #0
 800ec60:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800ec62:	197b      	adds	r3, r7, r5
 800ec64:	781a      	ldrb	r2, [r3, #0]
 800ec66:	197b      	adds	r3, r7, r5
 800ec68:	3201      	adds	r2, #1
 800ec6a:	701a      	strb	r2, [r3, #0]
 800ec6c:	230b      	movs	r3, #11
 800ec6e:	18fb      	adds	r3, r7, r3
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b05      	cmp	r3, #5
 800ec74:	d9cc      	bls.n	800ec10 <String_To_Float+0x4a0>
		}

		return sum;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	e08c      	b.n	800ed94 <String_To_Float+0x624>
	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))
 800ec7a:	4b49      	ldr	r3, [pc, #292]	; (800eda0 <String_To_Float+0x630>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d000      	beq.n	800ec84 <String_To_Float+0x514>
 800ec82:	e086      	b.n	800ed92 <String_To_Float+0x622>
 800ec84:	4b46      	ldr	r3, [pc, #280]	; (800eda0 <String_To_Float+0x630>)
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	2b08      	cmp	r3, #8
 800ec8a:	d000      	beq.n	800ec8e <String_To_Float+0x51e>
 800ec8c:	e081      	b.n	800ed92 <String_To_Float+0x622>
 800ec8e:	4b44      	ldr	r3, [pc, #272]	; (800eda0 <String_To_Float+0x630>)
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d100      	bne.n	800ec98 <String_To_Float+0x528>
 800ec96:	e07c      	b.n	800ed92 <String_To_Float+0x622>
	{
		for(uint8_t i=0;i<=2;i++)
 800ec98:	230a      	movs	r3, #10
 800ec9a:	18fb      	adds	r3, r7, r3
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	701a      	strb	r2, [r3, #0]
 800eca0:	e038      	b.n	800ed14 <String_To_Float+0x5a4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800eca2:	260a      	movs	r6, #10
 800eca4:	19bb      	adds	r3, r7, r6
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	18d3      	adds	r3, r2, r3
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	3b30      	subs	r3, #48	; 0x30
 800ecb0:	0018      	movs	r0, r3
 800ecb2:	f7f4 f8a7 	bl	8002e04 <__aeabi_i2d>
 800ecb6:	0004      	movs	r4, r0
 800ecb8:	000d      	movs	r5, r1
 800ecba:	19bb      	adds	r3, r7, r6
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	0018      	movs	r0, r3
 800ecc4:	f7f4 f89e 	bl	8002e04 <__aeabi_i2d>
 800ecc8:	0002      	movs	r2, r0
 800ecca:	000b      	movs	r3, r1
 800eccc:	2000      	movs	r0, #0
 800ecce:	4933      	ldr	r1, [pc, #204]	; (800ed9c <String_To_Float+0x62c>)
 800ecd0:	f008 fe56 	bl	8017980 <pow>
 800ecd4:	0002      	movs	r2, r0
 800ecd6:	000b      	movs	r3, r1
 800ecd8:	0020      	movs	r0, r4
 800ecda:	0029      	movs	r1, r5
 800ecdc:	f7f3 fa40 	bl	8002160 <__aeabi_dmul>
 800ece0:	0002      	movs	r2, r0
 800ece2:	000b      	movs	r3, r1
 800ece4:	0014      	movs	r4, r2
 800ece6:	001d      	movs	r5, r3
 800ece8:	6978      	ldr	r0, [r7, #20]
 800ecea:	f7f4 f8e1 	bl	8002eb0 <__aeabi_f2d>
 800ecee:	0002      	movs	r2, r0
 800ecf0:	000b      	movs	r3, r1
 800ecf2:	0020      	movs	r0, r4
 800ecf4:	0029      	movs	r1, r5
 800ecf6:	f7f2 faf5 	bl	80012e4 <__aeabi_dadd>
 800ecfa:	0002      	movs	r2, r0
 800ecfc:	000b      	movs	r3, r1
 800ecfe:	0010      	movs	r0, r2
 800ed00:	0019      	movs	r1, r3
 800ed02:	f7f4 f91d 	bl	8002f40 <__aeabi_d2f>
 800ed06:	1c03      	adds	r3, r0, #0
 800ed08:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800ed0a:	19bb      	adds	r3, r7, r6
 800ed0c:	781a      	ldrb	r2, [r3, #0]
 800ed0e:	19bb      	adds	r3, r7, r6
 800ed10:	3201      	adds	r2, #1
 800ed12:	701a      	strb	r2, [r3, #0]
 800ed14:	230a      	movs	r3, #10
 800ed16:	18fb      	adds	r3, r7, r3
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d9c1      	bls.n	800eca2 <String_To_Float+0x532>
		}
		for(uint8_t i=4;i<=5;i++)
 800ed1e:	2309      	movs	r3, #9
 800ed20:	18fb      	adds	r3, r7, r3
 800ed22:	2204      	movs	r2, #4
 800ed24:	701a      	strb	r2, [r3, #0]
 800ed26:	e02d      	b.n	800ed84 <String_To_Float+0x614>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800ed28:	2509      	movs	r5, #9
 800ed2a:	197b      	adds	r3, r7, r5
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	18d3      	adds	r3, r2, r3
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	3b30      	subs	r3, #48	; 0x30
 800ed36:	0018      	movs	r0, r3
 800ed38:	f7f2 fa86 	bl	8001248 <__aeabi_i2f>
 800ed3c:	1c04      	adds	r4, r0, #0
 800ed3e:	197b      	adds	r3, r7, r5
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	3b03      	subs	r3, #3
 800ed44:	0018      	movs	r0, r3
 800ed46:	f7f4 f85d 	bl	8002e04 <__aeabi_i2d>
 800ed4a:	0002      	movs	r2, r0
 800ed4c:	000b      	movs	r3, r1
 800ed4e:	2000      	movs	r0, #0
 800ed50:	4912      	ldr	r1, [pc, #72]	; (800ed9c <String_To_Float+0x62c>)
 800ed52:	f008 fe15 	bl	8017980 <pow>
 800ed56:	0002      	movs	r2, r0
 800ed58:	000b      	movs	r3, r1
 800ed5a:	0010      	movs	r0, r2
 800ed5c:	0019      	movs	r1, r3
 800ed5e:	f7f4 f8ef 	bl	8002f40 <__aeabi_d2f>
 800ed62:	1c03      	adds	r3, r0, #0
 800ed64:	1c19      	adds	r1, r3, #0
 800ed66:	1c20      	adds	r0, r4, #0
 800ed68:	f7f1 fdb2 	bl	80008d0 <__aeabi_fdiv>
 800ed6c:	1c03      	adds	r3, r0, #0
 800ed6e:	1c19      	adds	r1, r3, #0
 800ed70:	6978      	ldr	r0, [r7, #20]
 800ed72:	f7f1 fc0f 	bl	8000594 <__aeabi_fadd>
 800ed76:	1c03      	adds	r3, r0, #0
 800ed78:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800ed7a:	197b      	adds	r3, r7, r5
 800ed7c:	781a      	ldrb	r2, [r3, #0]
 800ed7e:	197b      	adds	r3, r7, r5
 800ed80:	3201      	adds	r2, #1
 800ed82:	701a      	strb	r2, [r3, #0]
 800ed84:	2309      	movs	r3, #9
 800ed86:	18fb      	adds	r3, r7, r3
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	2b05      	cmp	r3, #5
 800ed8c:	d9cc      	bls.n	800ed28 <String_To_Float+0x5b8>
		}

		return sum;
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	e000      	b.n	800ed94 <String_To_Float+0x624>
	}

	else return 0.0;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	1c18      	adds	r0, r3, #0
 800ed96:	46bd      	mov	sp, r7
 800ed98:	b007      	add	sp, #28
 800ed9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed9c:	40240000 	.word	0x40240000
 800eda0:	20003b8c 	.word	0x20003b8c

0800eda4 <Keys_Input_Set_Voltage>:
 * @brief  数字键盘输入设定电压的处理函数
 * @param  数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Voltage(char Number)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	0002      	movs	r2, r0
 800edac:	1dfb      	adds	r3, r7, #7
 800edae:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (LOCK_UNLOCK == UNLOCK) )
 800edb0:	4b21      	ldr	r3, [pc, #132]	; (800ee38 <Keys_Input_Set_Voltage+0x94>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	d13b      	bne.n	800ee30 <Keys_Input_Set_Voltage+0x8c>
 800edb8:	4b1f      	ldr	r3, [pc, #124]	; (800ee38 <Keys_Input_Set_Voltage+0x94>)
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d137      	bne.n	800ee30 <Keys_Input_Set_Voltage+0x8c>
 800edc0:	4b1e      	ldr	r3, [pc, #120]	; (800ee3c <Keys_Input_Set_Voltage+0x98>)
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d133      	bne.n	800ee30 <Keys_Input_Set_Voltage+0x8c>
	{
		Cursor_flash_off();
 800edc8:	f005 fd04 	bl	80147d4 <Cursor_flash_off>
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800edcc:	4b1c      	ldr	r3, [pc, #112]	; (800ee40 <Keys_Input_Set_Voltage+0x9c>)
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d019      	beq.n	800ee08 <Keys_Input_Set_Voltage+0x64>
		{
		    Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800edd4:	4b1a      	ldr	r3, [pc, #104]	; (800ee40 <Keys_Input_Set_Voltage+0x9c>)
 800edd6:	2200      	movs	r2, #0
 800edd8:	701a      	strb	r2, [r3, #0]
		    Cursor_flash_off();
 800edda:	f005 fcfb 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 0;                                    //指针设为0位
 800edde:	4b19      	ldr	r3, [pc, #100]	; (800ee44 <Keys_Input_Set_Voltage+0xa0>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	701a      	strb	r2, [r3, #0]

			String_Voltage[0] = ' ';
 800ede4:	4b18      	ldr	r3, [pc, #96]	; (800ee48 <Keys_Input_Set_Voltage+0xa4>)
 800ede6:	2220      	movs	r2, #32
 800ede8:	701a      	strb	r2, [r3, #0]
			String_Voltage[1] = ' ';
 800edea:	4b17      	ldr	r3, [pc, #92]	; (800ee48 <Keys_Input_Set_Voltage+0xa4>)
 800edec:	2220      	movs	r2, #32
 800edee:	705a      	strb	r2, [r3, #1]
			String_Voltage[2] = ' ';
 800edf0:	4b15      	ldr	r3, [pc, #84]	; (800ee48 <Keys_Input_Set_Voltage+0xa4>)
 800edf2:	2220      	movs	r2, #32
 800edf4:	709a      	strb	r2, [r3, #2]
			String_Voltage[3] = ' ';
 800edf6:	4b14      	ldr	r3, [pc, #80]	; (800ee48 <Keys_Input_Set_Voltage+0xa4>)
 800edf8:	2220      	movs	r2, #32
 800edfa:	70da      	strb	r2, [r3, #3]
			String_Voltage[4] = ' ';
 800edfc:	4b12      	ldr	r3, [pc, #72]	; (800ee48 <Keys_Input_Set_Voltage+0xa4>)
 800edfe:	2220      	movs	r2, #32
 800ee00:	711a      	strb	r2, [r3, #4]
			String_Voltage[5] = ' ';
 800ee02:	4b11      	ldr	r3, [pc, #68]	; (800ee48 <Keys_Input_Set_Voltage+0xa4>)
 800ee04:	2220      	movs	r2, #32
 800ee06:	715a      	strb	r2, [r3, #5]

		}


		String_Voltage[Cursor_Position] = Number;                  //使光标位置置Number
 800ee08:	4b0e      	ldr	r3, [pc, #56]	; (800ee44 <Keys_Input_Set_Voltage+0xa0>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	0019      	movs	r1, r3
 800ee0e:	4b0e      	ldr	r3, [pc, #56]	; (800ee48 <Keys_Input_Set_Voltage+0xa4>)
 800ee10:	1dfa      	adds	r2, r7, #7
 800ee12:	7812      	ldrb	r2, [r2, #0]
 800ee14:	545a      	strb	r2, [r3, r1]
		Cursor_Position ++;                                        //光标位置加1
 800ee16:	4b0b      	ldr	r3, [pc, #44]	; (800ee44 <Keys_Input_Set_Voltage+0xa0>)
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	4b09      	ldr	r3, [pc, #36]	; (800ee44 <Keys_Input_Set_Voltage+0xa0>)
 800ee20:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6) Cursor_Position=0;
 800ee22:	4b08      	ldr	r3, [pc, #32]	; (800ee44 <Keys_Input_Set_Voltage+0xa0>)
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	2b06      	cmp	r3, #6
 800ee28:	d102      	bne.n	800ee30 <Keys_Input_Set_Voltage+0x8c>
 800ee2a:	4b06      	ldr	r3, [pc, #24]	; (800ee44 <Keys_Input_Set_Voltage+0xa0>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	701a      	strb	r2, [r3, #0]

	}

}
 800ee30:	46c0      	nop			; (mov r8, r8)
 800ee32:	46bd      	mov	sp, r7
 800ee34:	b002      	add	sp, #8
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	20003b8c 	.word	0x20003b8c
 800ee3c:	20003b1f 	.word	0x20003b1f
 800ee40:	20002fd2 	.word	0x20002fd2
 800ee44:	20003b22 	.word	0x20003b22
 800ee48:	20003058 	.word	0x20003058

0800ee4c <Keys_Input_Set_Current>:
 * @brief  数字键盘输入设定电流的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Current(char Number)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	0002      	movs	r2, r0
 800ee54:	1dfb      	adds	r3, r7, #7
 800ee56:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (LOCK_UNLOCK == UNLOCK) )
 800ee58:	4b1d      	ldr	r3, [pc, #116]	; (800eed0 <Keys_Input_Set_Current+0x84>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d132      	bne.n	800eec6 <Keys_Input_Set_Current+0x7a>
 800ee60:	4b1b      	ldr	r3, [pc, #108]	; (800eed0 <Keys_Input_Set_Current+0x84>)
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d12e      	bne.n	800eec6 <Keys_Input_Set_Current+0x7a>
 800ee68:	4b1a      	ldr	r3, [pc, #104]	; (800eed4 <Keys_Input_Set_Current+0x88>)
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d12a      	bne.n	800eec6 <Keys_Input_Set_Current+0x7a>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ee70:	4b19      	ldr	r3, [pc, #100]	; (800eed8 <Keys_Input_Set_Current+0x8c>)
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d019      	beq.n	800eeac <Keys_Input_Set_Current+0x60>
		{
		    Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ee78:	4b17      	ldr	r3, [pc, #92]	; (800eed8 <Keys_Input_Set_Current+0x8c>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	701a      	strb	r2, [r3, #0]
		    Cursor_flash_off();
 800ee7e:	f005 fca9 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 9;                                    //指针设为0位
 800ee82:	4b16      	ldr	r3, [pc, #88]	; (800eedc <Keys_Input_Set_Current+0x90>)
 800ee84:	2209      	movs	r2, #9
 800ee86:	701a      	strb	r2, [r3, #0]

			String_Current[0] = ' ';
 800ee88:	4b15      	ldr	r3, [pc, #84]	; (800eee0 <Keys_Input_Set_Current+0x94>)
 800ee8a:	2220      	movs	r2, #32
 800ee8c:	701a      	strb	r2, [r3, #0]
			String_Current[1] = ' ';
 800ee8e:	4b14      	ldr	r3, [pc, #80]	; (800eee0 <Keys_Input_Set_Current+0x94>)
 800ee90:	2220      	movs	r2, #32
 800ee92:	705a      	strb	r2, [r3, #1]
			String_Current[2] = ' ';
 800ee94:	4b12      	ldr	r3, [pc, #72]	; (800eee0 <Keys_Input_Set_Current+0x94>)
 800ee96:	2220      	movs	r2, #32
 800ee98:	709a      	strb	r2, [r3, #2]
			String_Current[3] = ' ';
 800ee9a:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <Keys_Input_Set_Current+0x94>)
 800ee9c:	2220      	movs	r2, #32
 800ee9e:	70da      	strb	r2, [r3, #3]
			String_Current[4] = ' ';
 800eea0:	4b0f      	ldr	r3, [pc, #60]	; (800eee0 <Keys_Input_Set_Current+0x94>)
 800eea2:	2220      	movs	r2, #32
 800eea4:	711a      	strb	r2, [r3, #4]
			String_Current[5] = ' ';
 800eea6:	4b0e      	ldr	r3, [pc, #56]	; (800eee0 <Keys_Input_Set_Current+0x94>)
 800eea8:	2220      	movs	r2, #32
 800eeaa:	715a      	strb	r2, [r3, #5]

		}


		String_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800eeac:	4b0b      	ldr	r3, [pc, #44]	; (800eedc <Keys_Input_Set_Current+0x90>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	3b09      	subs	r3, #9
 800eeb2:	4a0b      	ldr	r2, [pc, #44]	; (800eee0 <Keys_Input_Set_Current+0x94>)
 800eeb4:	1df9      	adds	r1, r7, #7
 800eeb6:	7809      	ldrb	r1, [r1, #0]
 800eeb8:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800eeba:	4b08      	ldr	r3, [pc, #32]	; (800eedc <Keys_Input_Set_Current+0x90>)
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	3301      	adds	r3, #1
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	4b06      	ldr	r3, [pc, #24]	; (800eedc <Keys_Input_Set_Current+0x90>)
 800eec4:	701a      	strb	r2, [r3, #0]


	}

}
 800eec6:	46c0      	nop			; (mov r8, r8)
 800eec8:	46bd      	mov	sp, r7
 800eeca:	b002      	add	sp, #8
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	46c0      	nop			; (mov r8, r8)
 800eed0:	20003b8c 	.word	0x20003b8c
 800eed4:	20003b1f 	.word	0x20003b1f
 800eed8:	20002fd2 	.word	0x20002fd2
 800eedc:	20003b22 	.word	0x20003b22
 800eee0:	20003060 	.word	0x20003060

0800eee4 <Keys_Input_Set_V_Rate>:
 * @brief  数字键盘输入设定V_Rate时间的处理函数（暂定0-30）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_V_Rate(char Number)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	0002      	movs	r2, r0
 800eeec:	1dfb      	adds	r3, r7, #7
 800eeee:	701a      	strb	r2, [r3, #0]

	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800eef0:	4b32      	ldr	r3, [pc, #200]	; (800efbc <Keys_Input_Set_V_Rate+0xd8>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d15d      	bne.n	800efb4 <Keys_Input_Set_V_Rate+0xd0>
 800eef8:	4b30      	ldr	r3, [pc, #192]	; (800efbc <Keys_Input_Set_V_Rate+0xd8>)
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d159      	bne.n	800efb4 <Keys_Input_Set_V_Rate+0xd0>
 800ef00:	4b2e      	ldr	r3, [pc, #184]	; (800efbc <Keys_Input_Set_V_Rate+0xd8>)
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d155      	bne.n	800efb4 <Keys_Input_Set_V_Rate+0xd0>
 800ef08:	4b2d      	ldr	r3, [pc, #180]	; (800efc0 <Keys_Input_Set_V_Rate+0xdc>)
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d151      	bne.n	800efb4 <Keys_Input_Set_V_Rate+0xd0>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ef10:	4b2c      	ldr	r3, [pc, #176]	; (800efc4 <Keys_Input_Set_V_Rate+0xe0>)
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d022      	beq.n	800ef5e <Keys_Input_Set_V_Rate+0x7a>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ef18:	4b2a      	ldr	r3, [pc, #168]	; (800efc4 <Keys_Input_Set_V_Rate+0xe0>)
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ef1e:	f005 fc59 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 6;                                     //指针设为0位
 800ef22:	4b29      	ldr	r3, [pc, #164]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef24:	2206      	movs	r2, #6
 800ef26:	701a      	strb	r2, [r3, #0]

			String_V_Rate[0] = '0';                                 //初始化
 800ef28:	4b28      	ldr	r3, [pc, #160]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef2a:	2230      	movs	r2, #48	; 0x30
 800ef2c:	701a      	strb	r2, [r3, #0]
			String_V_Rate[1] = '.';
 800ef2e:	4b27      	ldr	r3, [pc, #156]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef30:	222e      	movs	r2, #46	; 0x2e
 800ef32:	705a      	strb	r2, [r3, #1]
			String_V_Rate[2] = '0';
 800ef34:	4b25      	ldr	r3, [pc, #148]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef36:	2230      	movs	r2, #48	; 0x30
 800ef38:	709a      	strb	r2, [r3, #2]
			String_V_Rate[3] = '0';
 800ef3a:	4b24      	ldr	r3, [pc, #144]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef3c:	2230      	movs	r2, #48	; 0x30
 800ef3e:	70da      	strb	r2, [r3, #3]
			String_V_Rate[4] = ' ';
 800ef40:	4b22      	ldr	r3, [pc, #136]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef42:	2220      	movs	r2, #32
 800ef44:	711a      	strb	r2, [r3, #4]

			String_V_Rate[5] = 'V';
 800ef46:	4b21      	ldr	r3, [pc, #132]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef48:	2256      	movs	r2, #86	; 0x56
 800ef4a:	715a      	strb	r2, [r3, #5]
			String_V_Rate[6] = '/';
 800ef4c:	4b1f      	ldr	r3, [pc, #124]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef4e:	222f      	movs	r2, #47	; 0x2f
 800ef50:	719a      	strb	r2, [r3, #6]
			String_V_Rate[7] = 'm';
 800ef52:	4b1e      	ldr	r3, [pc, #120]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef54:	226d      	movs	r2, #109	; 0x6d
 800ef56:	71da      	strb	r2, [r3, #7]
			String_V_Rate[8] = 's';
 800ef58:	4b1c      	ldr	r3, [pc, #112]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef5a:	2273      	movs	r2, #115	; 0x73
 800ef5c:	721a      	strb	r2, [r3, #8]

		}

		if(Cursor_Position==0+6)
 800ef5e:	4b1a      	ldr	r3, [pc, #104]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	2b06      	cmp	r3, #6
 800ef64:	d10a      	bne.n	800ef7c <Keys_Input_Set_V_Rate+0x98>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800ef66:	4b18      	ldr	r3, [pc, #96]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	3b06      	subs	r3, #6
 800ef6c:	4a17      	ldr	r2, [pc, #92]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef6e:	1df9      	adds	r1, r7, #7
 800ef70:	7809      	ldrb	r1, [r1, #0]
 800ef72:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800ef74:	4b14      	ldr	r3, [pc, #80]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef76:	2208      	movs	r2, #8
 800ef78:	701a      	strb	r2, [r3, #0]
			return;
 800ef7a:	e01b      	b.n	800efb4 <Keys_Input_Set_V_Rate+0xd0>
		}
		if(Cursor_Position == 3+6)
 800ef7c:	4b12      	ldr	r3, [pc, #72]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	2b09      	cmp	r3, #9
 800ef82:	d10a      	bne.n	800ef9a <Keys_Input_Set_V_Rate+0xb6>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800ef84:	4b10      	ldr	r3, [pc, #64]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	3b06      	subs	r3, #6
 800ef8a:	4a10      	ldr	r2, [pc, #64]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800ef8c:	1df9      	adds	r1, r7, #7
 800ef8e:	7809      	ldrb	r1, [r1, #0]
 800ef90:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800ef92:	4b0d      	ldr	r3, [pc, #52]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef94:	2206      	movs	r2, #6
 800ef96:	701a      	strb	r2, [r3, #0]
			return;
 800ef98:	e00c      	b.n	800efb4 <Keys_Input_Set_V_Rate+0xd0>
		}
		String_V_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800ef9a:	4b0b      	ldr	r3, [pc, #44]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	3b06      	subs	r3, #6
 800efa0:	4a0a      	ldr	r2, [pc, #40]	; (800efcc <Keys_Input_Set_V_Rate+0xe8>)
 800efa2:	1df9      	adds	r1, r7, #7
 800efa4:	7809      	ldrb	r1, [r1, #0]
 800efa6:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800efa8:	4b07      	ldr	r3, [pc, #28]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	3301      	adds	r3, #1
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	4b05      	ldr	r3, [pc, #20]	; (800efc8 <Keys_Input_Set_V_Rate+0xe4>)
 800efb2:	701a      	strb	r2, [r3, #0]
	}


}
 800efb4:	46bd      	mov	sp, r7
 800efb6:	b002      	add	sp, #8
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	46c0      	nop			; (mov r8, r8)
 800efbc:	20003b8c 	.word	0x20003b8c
 800efc0:	20003b1f 	.word	0x20003b1f
 800efc4:	20002fd2 	.word	0x20002fd2
 800efc8:	20003b22 	.word	0x20003b22
 800efcc:	2000304c 	.word	0x2000304c

0800efd0 <Keys_Input_Set_I_Rate>:
 * @brief  数字键盘输入设定I_Rate时间的处理函数（暂定0-10）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_I_Rate(char Number)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	0002      	movs	r2, r0
 800efd8:	1dfb      	adds	r3, r7, #7
 800efda:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800efdc:	4b32      	ldr	r3, [pc, #200]	; (800f0a8 <Keys_Input_Set_I_Rate+0xd8>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d15d      	bne.n	800f0a0 <Keys_Input_Set_I_Rate+0xd0>
 800efe4:	4b30      	ldr	r3, [pc, #192]	; (800f0a8 <Keys_Input_Set_I_Rate+0xd8>)
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d159      	bne.n	800f0a0 <Keys_Input_Set_I_Rate+0xd0>
 800efec:	4b2e      	ldr	r3, [pc, #184]	; (800f0a8 <Keys_Input_Set_I_Rate+0xd8>)
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d155      	bne.n	800f0a0 <Keys_Input_Set_I_Rate+0xd0>
 800eff4:	4b2d      	ldr	r3, [pc, #180]	; (800f0ac <Keys_Input_Set_I_Rate+0xdc>)
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d151      	bne.n	800f0a0 <Keys_Input_Set_I_Rate+0xd0>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                           //第一次按下按键
 800effc:	4b2c      	ldr	r3, [pc, #176]	; (800f0b0 <Keys_Input_Set_I_Rate+0xe0>)
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d022      	beq.n	800f04a <Keys_Input_Set_I_Rate+0x7a>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f004:	4b2a      	ldr	r3, [pc, #168]	; (800f0b0 <Keys_Input_Set_I_Rate+0xe0>)
 800f006:	2200      	movs	r2, #0
 800f008:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 6;                                     //指针设为0位
 800f00a:	4b2a      	ldr	r3, [pc, #168]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f00c:	2206      	movs	r2, #6
 800f00e:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f010:	f005 fbe0 	bl	80147d4 <Cursor_flash_off>
			String_I_Rate[0] = '0';                                  //初始化接收输入的字符串
 800f014:	4b28      	ldr	r3, [pc, #160]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f016:	2230      	movs	r2, #48	; 0x30
 800f018:	701a      	strb	r2, [r3, #0]
			String_I_Rate[1] = '.';
 800f01a:	4b27      	ldr	r3, [pc, #156]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f01c:	222e      	movs	r2, #46	; 0x2e
 800f01e:	705a      	strb	r2, [r3, #1]
			String_I_Rate[2] = '0';
 800f020:	4b25      	ldr	r3, [pc, #148]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f022:	2230      	movs	r2, #48	; 0x30
 800f024:	709a      	strb	r2, [r3, #2]
			String_I_Rate[3] = '0';
 800f026:	4b24      	ldr	r3, [pc, #144]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f028:	2230      	movs	r2, #48	; 0x30
 800f02a:	70da      	strb	r2, [r3, #3]
			String_I_Rate[5] = ' ';
 800f02c:	4b22      	ldr	r3, [pc, #136]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f02e:	2220      	movs	r2, #32
 800f030:	715a      	strb	r2, [r3, #5]
			String_I_Rate[6] = 'A';
 800f032:	4b21      	ldr	r3, [pc, #132]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f034:	2241      	movs	r2, #65	; 0x41
 800f036:	719a      	strb	r2, [r3, #6]
			String_I_Rate[7] = '/';
 800f038:	4b1f      	ldr	r3, [pc, #124]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f03a:	222f      	movs	r2, #47	; 0x2f
 800f03c:	71da      	strb	r2, [r3, #7]
			String_I_Rate[8] = 'm';
 800f03e:	4b1e      	ldr	r3, [pc, #120]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f040:	226d      	movs	r2, #109	; 0x6d
 800f042:	721a      	strb	r2, [r3, #8]
			String_I_Rate[9] = 's';
 800f044:	4b1c      	ldr	r3, [pc, #112]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f046:	2273      	movs	r2, #115	; 0x73
 800f048:	725a      	strb	r2, [r3, #9]
		}


		if(Cursor_Position==0+6)
 800f04a:	4b1a      	ldr	r3, [pc, #104]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	2b06      	cmp	r3, #6
 800f050:	d10a      	bne.n	800f068 <Keys_Input_Set_I_Rate+0x98>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800f052:	4b18      	ldr	r3, [pc, #96]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	3b06      	subs	r3, #6
 800f058:	4a17      	ldr	r2, [pc, #92]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f05a:	1df9      	adds	r1, r7, #7
 800f05c:	7809      	ldrb	r1, [r1, #0]
 800f05e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800f060:	4b14      	ldr	r3, [pc, #80]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f062:	2208      	movs	r2, #8
 800f064:	701a      	strb	r2, [r3, #0]
			return;
 800f066:	e01b      	b.n	800f0a0 <Keys_Input_Set_I_Rate+0xd0>
		}
		if(Cursor_Position == 3+6)
 800f068:	4b12      	ldr	r3, [pc, #72]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	2b09      	cmp	r3, #9
 800f06e:	d10a      	bne.n	800f086 <Keys_Input_Set_I_Rate+0xb6>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800f070:	4b10      	ldr	r3, [pc, #64]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	3b06      	subs	r3, #6
 800f076:	4a10      	ldr	r2, [pc, #64]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f078:	1df9      	adds	r1, r7, #7
 800f07a:	7809      	ldrb	r1, [r1, #0]
 800f07c:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800f07e:	4b0d      	ldr	r3, [pc, #52]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f080:	2206      	movs	r2, #6
 800f082:	701a      	strb	r2, [r3, #0]
			return;
 800f084:	e00c      	b.n	800f0a0 <Keys_Input_Set_I_Rate+0xd0>
		}
		String_I_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800f086:	4b0b      	ldr	r3, [pc, #44]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	3b06      	subs	r3, #6
 800f08c:	4a0a      	ldr	r2, [pc, #40]	; (800f0b8 <Keys_Input_Set_I_Rate+0xe8>)
 800f08e:	1df9      	adds	r1, r7, #7
 800f090:	7809      	ldrb	r1, [r1, #0]
 800f092:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                       //光标位置加1
 800f094:	4b07      	ldr	r3, [pc, #28]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	3301      	adds	r3, #1
 800f09a:	b2da      	uxtb	r2, r3
 800f09c:	4b05      	ldr	r3, [pc, #20]	; (800f0b4 <Keys_Input_Set_I_Rate+0xe4>)
 800f09e:	701a      	strb	r2, [r3, #0]

	}
}
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	b002      	add	sp, #8
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	46c0      	nop			; (mov r8, r8)
 800f0a8:	20003b8c 	.word	0x20003b8c
 800f0ac:	20003b1f 	.word	0x20003b1f
 800f0b0:	20002fd2 	.word	0x20002fd2
 800f0b4:	20003b22 	.word	0x20003b22
 800f0b8:	20003040 	.word	0x20003040

0800f0bc <Keys_Input_RS232>:
 * @brief  数字键盘输入设定串口ID的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_RS232(char Number)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	0002      	movs	r2, r0
 800f0c4:	1dfb      	adds	r3, r7, #7
 800f0c6:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800f0c8:	4b1f      	ldr	r3, [pc, #124]	; (800f148 <Keys_Input_RS232+0x8c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d138      	bne.n	800f142 <Keys_Input_RS232+0x86>
 800f0d0:	4b1d      	ldr	r3, [pc, #116]	; (800f148 <Keys_Input_RS232+0x8c>)
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	d134      	bne.n	800f142 <Keys_Input_RS232+0x86>
 800f0d8:	4b1b      	ldr	r3, [pc, #108]	; (800f148 <Keys_Input_RS232+0x8c>)
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d130      	bne.n	800f142 <Keys_Input_RS232+0x86>
 800f0e0:	4b1a      	ldr	r3, [pc, #104]	; (800f14c <Keys_Input_RS232+0x90>)
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d12c      	bne.n	800f142 <Keys_Input_RS232+0x86>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f0e8:	4b19      	ldr	r3, [pc, #100]	; (800f150 <Keys_Input_RS232+0x94>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00d      	beq.n	800f10c <Keys_Input_RS232+0x50>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f0f0:	4b17      	ldr	r3, [pc, #92]	; (800f150 <Keys_Input_RS232+0x94>)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f0f6:	f005 fb6d 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 0;                                     //指针设为0位
 800f0fa:	4b16      	ldr	r3, [pc, #88]	; (800f154 <Keys_Input_RS232+0x98>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[0] = ' ';                                 //清空字符串
 800f100:	4b15      	ldr	r3, [pc, #84]	; (800f158 <Keys_Input_RS232+0x9c>)
 800f102:	2220      	movs	r2, #32
 800f104:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[1] = ' ';
 800f106:	4b14      	ldr	r3, [pc, #80]	; (800f158 <Keys_Input_RS232+0x9c>)
 800f108:	2220      	movs	r2, #32
 800f10a:	705a      	strb	r2, [r3, #1]
		}

		if(Cursor_Position == 2)
 800f10c:	4b11      	ldr	r3, [pc, #68]	; (800f154 <Keys_Input_RS232+0x98>)
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	2b02      	cmp	r3, #2
 800f112:	d103      	bne.n	800f11c <Keys_Input_RS232+0x60>
		{
			Cursor_Position = 0;                                     //如果光标超过范围，回到启始位置
 800f114:	4b0f      	ldr	r3, [pc, #60]	; (800f154 <Keys_Input_RS232+0x98>)
 800f116:	2200      	movs	r2, #0
 800f118:	701a      	strb	r2, [r3, #0]
			return;
 800f11a:	e012      	b.n	800f142 <Keys_Input_RS232+0x86>
		}

		String_RS232_ID[Cursor_Position] = Number;                  //使光标位置置Number
 800f11c:	4b0d      	ldr	r3, [pc, #52]	; (800f154 <Keys_Input_RS232+0x98>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	0019      	movs	r1, r3
 800f122:	4b0d      	ldr	r3, [pc, #52]	; (800f158 <Keys_Input_RS232+0x9c>)
 800f124:	1dfa      	adds	r2, r7, #7
 800f126:	7812      	ldrb	r2, [r2, #0]
 800f128:	545a      	strb	r2, [r3, r1]

		Cursor_Position ++;                                         //光标位置加1
 800f12a:	4b0a      	ldr	r3, [pc, #40]	; (800f154 <Keys_Input_RS232+0x98>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	3301      	adds	r3, #1
 800f130:	b2da      	uxtb	r2, r3
 800f132:	4b08      	ldr	r3, [pc, #32]	; (800f154 <Keys_Input_RS232+0x98>)
 800f134:	701a      	strb	r2, [r3, #0]
		Write_String_8x16AsicII(48,38,String_RS232_ID);           //显示输入值
 800f136:	4b08      	ldr	r3, [pc, #32]	; (800f158 <Keys_Input_RS232+0x9c>)
 800f138:	001a      	movs	r2, r3
 800f13a:	2126      	movs	r1, #38	; 0x26
 800f13c:	2030      	movs	r0, #48	; 0x30
 800f13e:	f003 fd61 	bl	8012c04 <Write_String_8x16AsicII>
	}
}
 800f142:	46bd      	mov	sp, r7
 800f144:	b002      	add	sp, #8
 800f146:	bd80      	pop	{r7, pc}
 800f148:	20003b8c 	.word	0x20003b8c
 800f14c:	20003b1f 	.word	0x20003b1f
 800f150:	20002fd2 	.word	0x20002fd2
 800f154:	20003b22 	.word	0x20003b22
 800f158:	20003c1c 	.word	0x20003c1c

0800f15c <Keys_Input_Cycle>:
 * @brief  数字键盘输入设定Cycle时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Cycle(char Number)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	0002      	movs	r2, r0
 800f164:	1dfb      	adds	r3, r7, #7
 800f166:	701a      	strb	r2, [r3, #0]
	//cycle on time
	if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800f168:	4b51      	ldr	r3, [pc, #324]	; (800f2b0 <Keys_Input_Cycle+0x154>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d14b      	bne.n	800f208 <Keys_Input_Cycle+0xac>
 800f170:	4b4f      	ldr	r3, [pc, #316]	; (800f2b0 <Keys_Input_Cycle+0x154>)
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	2b04      	cmp	r3, #4
 800f176:	d147      	bne.n	800f208 <Keys_Input_Cycle+0xac>
 800f178:	4b4d      	ldr	r3, [pc, #308]	; (800f2b0 <Keys_Input_Cycle+0x154>)
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d143      	bne.n	800f208 <Keys_Input_Cycle+0xac>
 800f180:	4b4c      	ldr	r3, [pc, #304]	; (800f2b4 <Keys_Input_Cycle+0x158>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d13f      	bne.n	800f208 <Keys_Input_Cycle+0xac>
	{
		String_Cycle_On[4]='s';
 800f188:	4b4b      	ldr	r3, [pc, #300]	; (800f2b8 <Keys_Input_Cycle+0x15c>)
 800f18a:	2273      	movs	r2, #115	; 0x73
 800f18c:	711a      	strb	r2, [r3, #4]
		String_Cycle_On[8]='m';
 800f18e:	4b4a      	ldr	r3, [pc, #296]	; (800f2b8 <Keys_Input_Cycle+0x15c>)
 800f190:	226d      	movs	r2, #109	; 0x6d
 800f192:	721a      	strb	r2, [r3, #8]
		String_Cycle_On[9]='s';
 800f194:	4b48      	ldr	r3, [pc, #288]	; (800f2b8 <Keys_Input_Cycle+0x15c>)
 800f196:	2273      	movs	r2, #115	; 0x73
 800f198:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f19a:	4b48      	ldr	r3, [pc, #288]	; (800f2bc <Keys_Input_Cycle+0x160>)
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d007      	beq.n	800f1b2 <Keys_Input_Cycle+0x56>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f1a2:	4b46      	ldr	r3, [pc, #280]	; (800f2bc <Keys_Input_Cycle+0x160>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f1a8:	f005 fb14 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 0+6;                                     //指针设为0位
 800f1ac:	4b44      	ldr	r3, [pc, #272]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1ae:	2206      	movs	r2, #6
 800f1b0:	701a      	strb	r2, [r3, #0]
		}
		if( (Cursor_Position<4+6) || ((Cursor_Position>4+6) && (Cursor_Position<8+6)) )
 800f1b2:	4b43      	ldr	r3, [pc, #268]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	2b09      	cmp	r3, #9
 800f1b8:	d907      	bls.n	800f1ca <Keys_Input_Cycle+0x6e>
 800f1ba:	4b41      	ldr	r3, [pc, #260]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b0a      	cmp	r3, #10
 800f1c0:	d90a      	bls.n	800f1d8 <Keys_Input_Cycle+0x7c>
 800f1c2:	4b3f      	ldr	r3, [pc, #252]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b0d      	cmp	r3, #13
 800f1c8:	d806      	bhi.n	800f1d8 <Keys_Input_Cycle+0x7c>
		{
			String_Cycle_On[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800f1ca:	4b3d      	ldr	r3, [pc, #244]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	3b06      	subs	r3, #6
 800f1d0:	4a39      	ldr	r2, [pc, #228]	; (800f2b8 <Keys_Input_Cycle+0x15c>)
 800f1d2:	1df9      	adds	r1, r7, #7
 800f1d4:	7809      	ldrb	r1, [r1, #0]
 800f1d6:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                         //光标位置加1
 800f1d8:	4b39      	ldr	r3, [pc, #228]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	4b37      	ldr	r3, [pc, #220]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1e2:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f1e4:	4b36      	ldr	r3, [pc, #216]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	2b0a      	cmp	r3, #10
 800f1ea:	d105      	bne.n	800f1f8 <Keys_Input_Cycle+0x9c>
		{
			Cursor_Position +=1;//位置4不设置，跳过到下一位
 800f1ec:	4b34      	ldr	r3, [pc, #208]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	4b32      	ldr	r3, [pc, #200]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1f6:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)
 800f1f8:	4b31      	ldr	r3, [pc, #196]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	2b0e      	cmp	r3, #14
 800f1fe:	d153      	bne.n	800f2a8 <Keys_Input_Cycle+0x14c>
		{
			Cursor_Position=0+6;
 800f200:	4b2f      	ldr	r3, [pc, #188]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f202:	2206      	movs	r2, #6
 800f204:	701a      	strb	r2, [r3, #0]
			return;
 800f206:	e04f      	b.n	800f2a8 <Keys_Input_Cycle+0x14c>
		}

	}
	//cycle off time
	else if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==3) && (LOCK_UNLOCK == UNLOCK))
 800f208:	4b29      	ldr	r3, [pc, #164]	; (800f2b0 <Keys_Input_Cycle+0x154>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d14b      	bne.n	800f2a8 <Keys_Input_Cycle+0x14c>
 800f210:	4b27      	ldr	r3, [pc, #156]	; (800f2b0 <Keys_Input_Cycle+0x154>)
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	2b04      	cmp	r3, #4
 800f216:	d147      	bne.n	800f2a8 <Keys_Input_Cycle+0x14c>
 800f218:	4b25      	ldr	r3, [pc, #148]	; (800f2b0 <Keys_Input_Cycle+0x154>)
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	2b03      	cmp	r3, #3
 800f21e:	d143      	bne.n	800f2a8 <Keys_Input_Cycle+0x14c>
 800f220:	4b24      	ldr	r3, [pc, #144]	; (800f2b4 <Keys_Input_Cycle+0x158>)
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d13f      	bne.n	800f2a8 <Keys_Input_Cycle+0x14c>
	{
		String_Cycle_Close[4]='s';
 800f228:	4b26      	ldr	r3, [pc, #152]	; (800f2c4 <Keys_Input_Cycle+0x168>)
 800f22a:	2273      	movs	r2, #115	; 0x73
 800f22c:	711a      	strb	r2, [r3, #4]
		String_Cycle_Close[8]='m';
 800f22e:	4b25      	ldr	r3, [pc, #148]	; (800f2c4 <Keys_Input_Cycle+0x168>)
 800f230:	226d      	movs	r2, #109	; 0x6d
 800f232:	721a      	strb	r2, [r3, #8]
		String_Cycle_Close[9]='s';
 800f234:	4b23      	ldr	r3, [pc, #140]	; (800f2c4 <Keys_Input_Cycle+0x168>)
 800f236:	2273      	movs	r2, #115	; 0x73
 800f238:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f23a:	4b20      	ldr	r3, [pc, #128]	; (800f2bc <Keys_Input_Cycle+0x160>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d007      	beq.n	800f252 <Keys_Input_Cycle+0xf6>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f242:	4b1e      	ldr	r3, [pc, #120]	; (800f2bc <Keys_Input_Cycle+0x160>)
 800f244:	2200      	movs	r2, #0
 800f246:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f248:	f005 fac4 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 0+6;                                     //指针设为0位
 800f24c:	4b1c      	ldr	r3, [pc, #112]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f24e:	2206      	movs	r2, #6
 800f250:	701a      	strb	r2, [r3, #0]

		}
		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800f252:	4b1b      	ldr	r3, [pc, #108]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	2b09      	cmp	r3, #9
 800f258:	d907      	bls.n	800f26a <Keys_Input_Cycle+0x10e>
 800f25a:	4b19      	ldr	r3, [pc, #100]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b0a      	cmp	r3, #10
 800f260:	d90a      	bls.n	800f278 <Keys_Input_Cycle+0x11c>
 800f262:	4b17      	ldr	r3, [pc, #92]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	2b0d      	cmp	r3, #13
 800f268:	d806      	bhi.n	800f278 <Keys_Input_Cycle+0x11c>
		{
			String_Cycle_Close[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800f26a:	4b15      	ldr	r3, [pc, #84]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	3b06      	subs	r3, #6
 800f270:	4a14      	ldr	r2, [pc, #80]	; (800f2c4 <Keys_Input_Cycle+0x168>)
 800f272:	1df9      	adds	r1, r7, #7
 800f274:	7809      	ldrb	r1, [r1, #0]
 800f276:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800f278:	4b11      	ldr	r3, [pc, #68]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	3301      	adds	r3, #1
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	4b0f      	ldr	r3, [pc, #60]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f282:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f284:	4b0e      	ldr	r3, [pc, #56]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b0a      	cmp	r3, #10
 800f28a:	d105      	bne.n	800f298 <Keys_Input_Cycle+0x13c>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800f28c:	4b0c      	ldr	r3, [pc, #48]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	3301      	adds	r3, #1
 800f292:	b2da      	uxtb	r2, r3
 800f294:	4b0a      	ldr	r3, [pc, #40]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f296:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800f298:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	2b0e      	cmp	r3, #14
 800f29e:	d103      	bne.n	800f2a8 <Keys_Input_Cycle+0x14c>
		{
			Cursor_Position=0+6;
 800f2a0:	4b07      	ldr	r3, [pc, #28]	; (800f2c0 <Keys_Input_Cycle+0x164>)
 800f2a2:	2206      	movs	r2, #6
 800f2a4:	701a      	strb	r2, [r3, #0]
			return;
 800f2a6:	46c0      	nop			; (mov r8, r8)

		}

	}

}
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	b002      	add	sp, #8
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	46c0      	nop			; (mov r8, r8)
 800f2b0:	20003b8c 	.word	0x20003b8c
 800f2b4:	20003b1f 	.word	0x20003b1f
 800f2b8:	20002ff8 	.word	0x20002ff8
 800f2bc:	20002fd2 	.word	0x20002fd2
 800f2c0:	20003b22 	.word	0x20003b22
 800f2c4:	20003004 	.word	0x20003004

0800f2c8 <Keys_Input_Delay>:
 * @brief  数字键盘输入设定Delay时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Delay(char Number)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	0002      	movs	r2, r0
 800f2d0:	1dfb      	adds	r3, r7, #7
 800f2d2:	701a      	strb	r2, [r3, #0]
	//设置软起动延时
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800f2d4:	4b29      	ldr	r3, [pc, #164]	; (800f37c <Keys_Input_Delay+0xb4>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d14b      	bne.n	800f374 <Keys_Input_Delay+0xac>
 800f2dc:	4b27      	ldr	r3, [pc, #156]	; (800f37c <Keys_Input_Delay+0xb4>)
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	2b04      	cmp	r3, #4
 800f2e2:	d147      	bne.n	800f374 <Keys_Input_Delay+0xac>
 800f2e4:	4b25      	ldr	r3, [pc, #148]	; (800f37c <Keys_Input_Delay+0xb4>)
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d143      	bne.n	800f374 <Keys_Input_Delay+0xac>
 800f2ec:	4b24      	ldr	r3, [pc, #144]	; (800f380 <Keys_Input_Delay+0xb8>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d13f      	bne.n	800f374 <Keys_Input_Delay+0xac>
	{
		String_Delay[4]='s';
 800f2f4:	4b23      	ldr	r3, [pc, #140]	; (800f384 <Keys_Input_Delay+0xbc>)
 800f2f6:	2273      	movs	r2, #115	; 0x73
 800f2f8:	711a      	strb	r2, [r3, #4]
		String_Delay[8]='m';
 800f2fa:	4b22      	ldr	r3, [pc, #136]	; (800f384 <Keys_Input_Delay+0xbc>)
 800f2fc:	226d      	movs	r2, #109	; 0x6d
 800f2fe:	721a      	strb	r2, [r3, #8]
		String_Delay[9]='s';
 800f300:	4b20      	ldr	r3, [pc, #128]	; (800f384 <Keys_Input_Delay+0xbc>)
 800f302:	2273      	movs	r2, #115	; 0x73
 800f304:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f306:	4b20      	ldr	r3, [pc, #128]	; (800f388 <Keys_Input_Delay+0xc0>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d007      	beq.n	800f31e <Keys_Input_Delay+0x56>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f30e:	4b1e      	ldr	r3, [pc, #120]	; (800f388 <Keys_Input_Delay+0xc0>)
 800f310:	2200      	movs	r2, #0
 800f312:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f314:	f005 fa5e 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 6;                                     //指针设为0位
 800f318:	4b1c      	ldr	r3, [pc, #112]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f31a:	2206      	movs	r2, #6
 800f31c:	701a      	strb	r2, [r3, #0]
		}

		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800f31e:	4b1b      	ldr	r3, [pc, #108]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	2b09      	cmp	r3, #9
 800f324:	d907      	bls.n	800f336 <Keys_Input_Delay+0x6e>
 800f326:	4b19      	ldr	r3, [pc, #100]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b0a      	cmp	r3, #10
 800f32c:	d90a      	bls.n	800f344 <Keys_Input_Delay+0x7c>
 800f32e:	4b17      	ldr	r3, [pc, #92]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b0d      	cmp	r3, #13
 800f334:	d806      	bhi.n	800f344 <Keys_Input_Delay+0x7c>
		{
			String_Delay[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800f336:	4b15      	ldr	r3, [pc, #84]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	3b06      	subs	r3, #6
 800f33c:	4a11      	ldr	r2, [pc, #68]	; (800f384 <Keys_Input_Delay+0xbc>)
 800f33e:	1df9      	adds	r1, r7, #7
 800f340:	7809      	ldrb	r1, [r1, #0]
 800f342:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800f344:	4b11      	ldr	r3, [pc, #68]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	3301      	adds	r3, #1
 800f34a:	b2da      	uxtb	r2, r3
 800f34c:	4b0f      	ldr	r3, [pc, #60]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f34e:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f350:	4b0e      	ldr	r3, [pc, #56]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	2b0a      	cmp	r3, #10
 800f356:	d105      	bne.n	800f364 <Keys_Input_Delay+0x9c>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800f358:	4b0c      	ldr	r3, [pc, #48]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	3301      	adds	r3, #1
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	4b0a      	ldr	r3, [pc, #40]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f362:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800f364:	4b09      	ldr	r3, [pc, #36]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b0e      	cmp	r3, #14
 800f36a:	d103      	bne.n	800f374 <Keys_Input_Delay+0xac>
		{
			Cursor_Position=0+6;
 800f36c:	4b07      	ldr	r3, [pc, #28]	; (800f38c <Keys_Input_Delay+0xc4>)
 800f36e:	2206      	movs	r2, #6
 800f370:	701a      	strb	r2, [r3, #0]
			return;
 800f372:	46c0      	nop			; (mov r8, r8)
		}
	}

}
 800f374:	46bd      	mov	sp, r7
 800f376:	b002      	add	sp, #8
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	46c0      	nop			; (mov r8, r8)
 800f37c:	20003b8c 	.word	0x20003b8c
 800f380:	20003b1f 	.word	0x20003b1f
 800f384:	20003010 	.word	0x20003010
 800f388:	20002fd2 	.word	0x20002fd2
 800f38c:	20003b22 	.word	0x20003b22

0800f390 <Keys_Input_Save>:

static void Keys_Input_Save(char Number)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	0002      	movs	r2, r0
 800f398:	1dfb      	adds	r3, r7, #7
 800f39a:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f39c:	4b52      	ldr	r3, [pc, #328]	; (800f4e8 <Keys_Input_Save+0x158>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d000      	beq.n	800f3a6 <Keys_Input_Save+0x16>
 800f3a4:	e09d      	b.n	800f4e2 <Keys_Input_Save+0x152>
 800f3a6:	4b50      	ldr	r3, [pc, #320]	; (800f4e8 <Keys_Input_Save+0x158>)
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d000      	beq.n	800f3b0 <Keys_Input_Save+0x20>
 800f3ae:	e098      	b.n	800f4e2 <Keys_Input_Save+0x152>
 800f3b0:	4b4d      	ldr	r3, [pc, #308]	; (800f4e8 <Keys_Input_Save+0x158>)
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d100      	bne.n	800f3ba <Keys_Input_Save+0x2a>
 800f3b8:	e093      	b.n	800f4e2 <Keys_Input_Save+0x152>
 800f3ba:	4b4c      	ldr	r3, [pc, #304]	; (800f4ec <Keys_Input_Save+0x15c>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d000      	beq.n	800f3c4 <Keys_Input_Save+0x34>
 800f3c2:	e08e      	b.n	800f4e2 <Keys_Input_Save+0x152>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f3c4:	4b4a      	ldr	r3, [pc, #296]	; (800f4f0 <Keys_Input_Save+0x160>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d02b      	beq.n	800f424 <Keys_Input_Save+0x94>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f3cc:	4b48      	ldr	r3, [pc, #288]	; (800f4f0 <Keys_Input_Save+0x160>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f3d2:	f005 f9ff 	bl	80147d4 <Cursor_flash_off>
			Cursor_Position = 0;                                     //指针设为0位
 800f3d6:	4b47      	ldr	r3, [pc, #284]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	701a      	strb	r2, [r3, #0]
			String_Save_V[0]=' ';
 800f3dc:	4b46      	ldr	r3, [pc, #280]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f3de:	2220      	movs	r2, #32
 800f3e0:	701a      	strb	r2, [r3, #0]
			String_Save_V[1]=' ';
 800f3e2:	4b45      	ldr	r3, [pc, #276]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f3e4:	2220      	movs	r2, #32
 800f3e6:	705a      	strb	r2, [r3, #1]
			String_Save_V[2]=' ';
 800f3e8:	4b43      	ldr	r3, [pc, #268]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f3ea:	2220      	movs	r2, #32
 800f3ec:	709a      	strb	r2, [r3, #2]
			String_Save_V[3]=' ';
 800f3ee:	4b42      	ldr	r3, [pc, #264]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f3f0:	2220      	movs	r2, #32
 800f3f2:	70da      	strb	r2, [r3, #3]
			String_Save_V[4]=' ';
 800f3f4:	4b40      	ldr	r3, [pc, #256]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f3f6:	2220      	movs	r2, #32
 800f3f8:	711a      	strb	r2, [r3, #4]
			String_Save_V[5]=' ';
 800f3fa:	4b3f      	ldr	r3, [pc, #252]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f3fc:	2220      	movs	r2, #32
 800f3fe:	715a      	strb	r2, [r3, #5]

			String_Save_I[0]=' ';
 800f400:	4b3e      	ldr	r3, [pc, #248]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f402:	2220      	movs	r2, #32
 800f404:	701a      	strb	r2, [r3, #0]
			String_Save_I[1]=' ';
 800f406:	4b3d      	ldr	r3, [pc, #244]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f408:	2220      	movs	r2, #32
 800f40a:	705a      	strb	r2, [r3, #1]
			String_Save_I[2]=' ';
 800f40c:	4b3b      	ldr	r3, [pc, #236]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f40e:	2220      	movs	r2, #32
 800f410:	709a      	strb	r2, [r3, #2]
			String_Save_I[3]=' ';
 800f412:	4b3a      	ldr	r3, [pc, #232]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f414:	2220      	movs	r2, #32
 800f416:	70da      	strb	r2, [r3, #3]
			String_Save_I[4]=' ';
 800f418:	4b38      	ldr	r3, [pc, #224]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f41a:	2220      	movs	r2, #32
 800f41c:	711a      	strb	r2, [r3, #4]
			String_Save_I[5]=' ';
 800f41e:	4b37      	ldr	r3, [pc, #220]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f420:	2220      	movs	r2, #32
 800f422:	715a      	strb	r2, [r3, #5]


		}
		if(xyz.coordinates3==1)//voltage set
 800f424:	4b30      	ldr	r3, [pc, #192]	; (800f4e8 <Keys_Input_Save+0x158>)
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d12b      	bne.n	800f484 <Keys_Input_Save+0xf4>
		{

			if(Cursor_Position==2)
 800f42c:	4b31      	ldr	r3, [pc, #196]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b02      	cmp	r3, #2
 800f432:	d10a      	bne.n	800f44a <Keys_Input_Save+0xba>
			{
				String_Save_V[Cursor_Position]=Number;
 800f434:	4b2f      	ldr	r3, [pc, #188]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	0019      	movs	r1, r3
 800f43a:	4b2f      	ldr	r3, [pc, #188]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f43c:	1dfa      	adds	r2, r7, #7
 800f43e:	7812      	ldrb	r2, [r2, #0]
 800f440:	545a      	strb	r2, [r3, r1]
				Cursor_Position=4;
 800f442:	4b2c      	ldr	r3, [pc, #176]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f444:	2204      	movs	r2, #4
 800f446:	701a      	strb	r2, [r3, #0]
				return;
 800f448:	e04b      	b.n	800f4e2 <Keys_Input_Save+0x152>
			}
			if(Cursor_Position==5)
 800f44a:	4b2a      	ldr	r3, [pc, #168]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	2b05      	cmp	r3, #5
 800f450:	d10a      	bne.n	800f468 <Keys_Input_Save+0xd8>
			{
				String_Save_V[Cursor_Position]=Number;
 800f452:	4b28      	ldr	r3, [pc, #160]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	0019      	movs	r1, r3
 800f458:	4b27      	ldr	r3, [pc, #156]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f45a:	1dfa      	adds	r2, r7, #7
 800f45c:	7812      	ldrb	r2, [r2, #0]
 800f45e:	545a      	strb	r2, [r3, r1]
				Cursor_Position=0;
 800f460:	4b24      	ldr	r3, [pc, #144]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f462:	2200      	movs	r2, #0
 800f464:	701a      	strb	r2, [r3, #0]
				return;
 800f466:	e03c      	b.n	800f4e2 <Keys_Input_Save+0x152>
			}
			String_Save_V[Cursor_Position]=Number;
 800f468:	4b22      	ldr	r3, [pc, #136]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	0019      	movs	r1, r3
 800f46e:	4b22      	ldr	r3, [pc, #136]	; (800f4f8 <Keys_Input_Save+0x168>)
 800f470:	1dfa      	adds	r2, r7, #7
 800f472:	7812      	ldrb	r2, [r2, #0]
 800f474:	545a      	strb	r2, [r3, r1]
			Cursor_Position++;
 800f476:	4b1f      	ldr	r3, [pc, #124]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	3301      	adds	r3, #1
 800f47c:	b2da      	uxtb	r2, r3
 800f47e:	4b1d      	ldr	r3, [pc, #116]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f480:	701a      	strb	r2, [r3, #0]
 800f482:	e02e      	b.n	800f4e2 <Keys_Input_Save+0x152>
		}
		else if(xyz.coordinates3==2)//current set
 800f484:	4b18      	ldr	r3, [pc, #96]	; (800f4e8 <Keys_Input_Save+0x158>)
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d12a      	bne.n	800f4e2 <Keys_Input_Save+0x152>
		{
			if(Cursor_Position==2+9)
 800f48c:	4b19      	ldr	r3, [pc, #100]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b0b      	cmp	r3, #11
 800f492:	d10a      	bne.n	800f4aa <Keys_Input_Save+0x11a>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800f494:	4b17      	ldr	r3, [pc, #92]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	3b09      	subs	r3, #9
 800f49a:	4a18      	ldr	r2, [pc, #96]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f49c:	1df9      	adds	r1, r7, #7
 800f49e:	7809      	ldrb	r1, [r1, #0]
 800f4a0:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=4+9;
 800f4a2:	4b14      	ldr	r3, [pc, #80]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f4a4:	220d      	movs	r2, #13
 800f4a6:	701a      	strb	r2, [r3, #0]
				return;
 800f4a8:	e01b      	b.n	800f4e2 <Keys_Input_Save+0x152>
			}
			if(Cursor_Position==5+9)
 800f4aa:	4b12      	ldr	r3, [pc, #72]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	2b0e      	cmp	r3, #14
 800f4b0:	d10a      	bne.n	800f4c8 <Keys_Input_Save+0x138>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800f4b2:	4b10      	ldr	r3, [pc, #64]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	3b09      	subs	r3, #9
 800f4b8:	4a10      	ldr	r2, [pc, #64]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f4ba:	1df9      	adds	r1, r7, #7
 800f4bc:	7809      	ldrb	r1, [r1, #0]
 800f4be:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=0+9;
 800f4c0:	4b0c      	ldr	r3, [pc, #48]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f4c2:	2209      	movs	r2, #9
 800f4c4:	701a      	strb	r2, [r3, #0]
				return;
 800f4c6:	e00c      	b.n	800f4e2 <Keys_Input_Save+0x152>
			}
			String_Save_I[Cursor_Position-9]=Number;
 800f4c8:	4b0a      	ldr	r3, [pc, #40]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	3b09      	subs	r3, #9
 800f4ce:	4a0b      	ldr	r2, [pc, #44]	; (800f4fc <Keys_Input_Save+0x16c>)
 800f4d0:	1df9      	adds	r1, r7, #7
 800f4d2:	7809      	ldrb	r1, [r1, #0]
 800f4d4:	54d1      	strb	r1, [r2, r3]
			Cursor_Position++;
 800f4d6:	4b07      	ldr	r3, [pc, #28]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	4b05      	ldr	r3, [pc, #20]	; (800f4f4 <Keys_Input_Save+0x164>)
 800f4e0:	701a      	strb	r2, [r3, #0]


	}


}
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	b002      	add	sp, #8
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	20003b8c 	.word	0x20003b8c
 800f4ec:	20003b1f 	.word	0x20003b1f
 800f4f0:	20002fd2 	.word	0x20002fd2
 800f4f4:	20003b22 	.word	0x20003b22
 800f4f8:	2000301c 	.word	0x2000301c
 800f4fc:	20003028 	.word	0x20003028

0800f500 <Keys_Input_Recall>:

static void Keys_Input_Recall(char Number)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	0002      	movs	r2, r0
 800f508:	1dfb      	adds	r3, r7, #7
 800f50a:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f50c:	4b04      	ldr	r3, [pc, #16]	; (800f520 <Keys_Input_Recall+0x20>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b03      	cmp	r3, #3
 800f512:	d101      	bne.n	800f518 <Keys_Input_Recall+0x18>
 800f514:	4b02      	ldr	r3, [pc, #8]	; (800f520 <Keys_Input_Recall+0x20>)
 800f516:	685b      	ldr	r3, [r3, #4]
	{
		//不可参数设定

	}
}
 800f518:	46c0      	nop			; (mov r8, r8)
 800f51a:	46bd      	mov	sp, r7
 800f51c:	b002      	add	sp, #8
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	20003b8c 	.word	0x20003b8c

0800f524 <Keys_Input_Password>:




static void Keys_Input_Password(char Number)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	0002      	movs	r2, r0
 800f52c:	1dfb      	adds	r3, r7, #7
 800f52e:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK) )
 800f530:	4b17      	ldr	r3, [pc, #92]	; (800f590 <Keys_Input_Password+0x6c>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d127      	bne.n	800f588 <Keys_Input_Password+0x64>
 800f538:	4b15      	ldr	r3, [pc, #84]	; (800f590 <Keys_Input_Password+0x6c>)
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	2b05      	cmp	r3, #5
 800f53e:	d123      	bne.n	800f588 <Keys_Input_Password+0x64>
 800f540:	4b13      	ldr	r3, [pc, #76]	; (800f590 <Keys_Input_Password+0x6c>)
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d11f      	bne.n	800f588 <Keys_Input_Password+0x64>
 800f548:	4b12      	ldr	r3, [pc, #72]	; (800f594 <Keys_Input_Password+0x70>)
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d11b      	bne.n	800f588 <Keys_Input_Password+0x64>
	{


		if(Cursor_Position == 5+6)
 800f550:	4b11      	ldr	r3, [pc, #68]	; (800f598 <Keys_Input_Password+0x74>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	2b0b      	cmp	r3, #11
 800f556:	d10a      	bne.n	800f56e <Keys_Input_Password+0x4a>
		{
			String_Password[Cursor_Position-6] = Number;
 800f558:	4b0f      	ldr	r3, [pc, #60]	; (800f598 <Keys_Input_Password+0x74>)
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	3b06      	subs	r3, #6
 800f55e:	4a0f      	ldr	r2, [pc, #60]	; (800f59c <Keys_Input_Password+0x78>)
 800f560:	1df9      	adds	r1, r7, #7
 800f562:	7809      	ldrb	r1, [r1, #0]
 800f564:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800f566:	4b0c      	ldr	r3, [pc, #48]	; (800f598 <Keys_Input_Password+0x74>)
 800f568:	2206      	movs	r2, #6
 800f56a:	701a      	strb	r2, [r3, #0]
			return;
 800f56c:	e00c      	b.n	800f588 <Keys_Input_Password+0x64>
		}
		String_Password[Cursor_Position-6] = Number;                  //使光标位置置Number
 800f56e:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <Keys_Input_Password+0x74>)
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	3b06      	subs	r3, #6
 800f574:	4a09      	ldr	r2, [pc, #36]	; (800f59c <Keys_Input_Password+0x78>)
 800f576:	1df9      	adds	r1, r7, #7
 800f578:	7809      	ldrb	r1, [r1, #0]
 800f57a:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f57c:	4b06      	ldr	r3, [pc, #24]	; (800f598 <Keys_Input_Password+0x74>)
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	3301      	adds	r3, #1
 800f582:	b2da      	uxtb	r2, r3
 800f584:	4b04      	ldr	r3, [pc, #16]	; (800f598 <Keys_Input_Password+0x74>)
 800f586:	701a      	strb	r2, [r3, #0]

	}
}
 800f588:	46bd      	mov	sp, r7
 800f58a:	b002      	add	sp, #8
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	46c0      	nop			; (mov r8, r8)
 800f590:	20003b8c 	.word	0x20003b8c
 800f594:	20003b1f 	.word	0x20003b1f
 800f598:	20003b22 	.word	0x20003b22
 800f59c:	200030a4 	.word	0x200030a4

0800f5a0 <Keys_Input_Calibration_Voltage>:

static void Keys_Input_Calibration_Voltage(char Number)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	0002      	movs	r2, r0
 800f5a8:	1dfb      	adds	r3, r7, #7
 800f5aa:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1||xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK) )
 800f5ac:	4b28      	ldr	r3, [pc, #160]	; (800f650 <Keys_Input_Calibration_Voltage+0xb0>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d149      	bne.n	800f648 <Keys_Input_Calibration_Voltage+0xa8>
 800f5b4:	4b26      	ldr	r3, [pc, #152]	; (800f650 <Keys_Input_Calibration_Voltage+0xb0>)
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	2b08      	cmp	r3, #8
 800f5ba:	d145      	bne.n	800f648 <Keys_Input_Calibration_Voltage+0xa8>
 800f5bc:	4b24      	ldr	r3, [pc, #144]	; (800f650 <Keys_Input_Calibration_Voltage+0xb0>)
 800f5be:	689b      	ldr	r3, [r3, #8]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d003      	beq.n	800f5cc <Keys_Input_Calibration_Voltage+0x2c>
 800f5c4:	4b22      	ldr	r3, [pc, #136]	; (800f650 <Keys_Input_Calibration_Voltage+0xb0>)
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	2b02      	cmp	r3, #2
 800f5ca:	d13d      	bne.n	800f648 <Keys_Input_Calibration_Voltage+0xa8>
 800f5cc:	4b21      	ldr	r3, [pc, #132]	; (800f654 <Keys_Input_Calibration_Voltage+0xb4>)
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d139      	bne.n	800f648 <Keys_Input_Calibration_Voltage+0xa8>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f5d4:	4b20      	ldr	r3, [pc, #128]	; (800f658 <Keys_Input_Calibration_Voltage+0xb8>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00a      	beq.n	800f5f2 <Keys_Input_Calibration_Voltage+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f5dc:	4b1e      	ldr	r3, [pc, #120]	; (800f658 <Keys_Input_Calibration_Voltage+0xb8>)
 800f5de:	2200      	movs	r2, #0
 800f5e0:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f5e2:	f005 f8f7 	bl	80147d4 <Cursor_flash_off>

			Cursor_Position = 9;                                    //指针设为0位
 800f5e6:	4b1d      	ldr	r3, [pc, #116]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f5e8:	2209      	movs	r2, #9
 800f5ea:	701a      	strb	r2, [r3, #0]

			String_Calibration_Vlotage[3] = '.';
 800f5ec:	4b1c      	ldr	r3, [pc, #112]	; (800f660 <Keys_Input_Calibration_Voltage+0xc0>)
 800f5ee:	222e      	movs	r2, #46	; 0x2e
 800f5f0:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f5f2:	4b1a      	ldr	r3, [pc, #104]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b0b      	cmp	r3, #11
 800f5f8:	d10a      	bne.n	800f610 <Keys_Input_Calibration_Voltage+0x70>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f5fa:	4b18      	ldr	r3, [pc, #96]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	3b09      	subs	r3, #9
 800f600:	4a17      	ldr	r2, [pc, #92]	; (800f660 <Keys_Input_Calibration_Voltage+0xc0>)
 800f602:	1df9      	adds	r1, r7, #7
 800f604:	7809      	ldrb	r1, [r1, #0]
 800f606:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f608:	4b14      	ldr	r3, [pc, #80]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f60a:	220d      	movs	r2, #13
 800f60c:	701a      	strb	r2, [r3, #0]
			return;
 800f60e:	e01b      	b.n	800f648 <Keys_Input_Calibration_Voltage+0xa8>
		}
		if(Cursor_Position == 5+9)
 800f610:	4b12      	ldr	r3, [pc, #72]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b0e      	cmp	r3, #14
 800f616:	d10a      	bne.n	800f62e <Keys_Input_Calibration_Voltage+0x8e>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f618:	4b10      	ldr	r3, [pc, #64]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	3b09      	subs	r3, #9
 800f61e:	4a10      	ldr	r2, [pc, #64]	; (800f660 <Keys_Input_Calibration_Voltage+0xc0>)
 800f620:	1df9      	adds	r1, r7, #7
 800f622:	7809      	ldrb	r1, [r1, #0]
 800f624:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f626:	4b0d      	ldr	r3, [pc, #52]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f628:	2209      	movs	r2, #9
 800f62a:	701a      	strb	r2, [r3, #0]
			return;
 800f62c:	e00c      	b.n	800f648 <Keys_Input_Calibration_Voltage+0xa8>
		}
		String_Calibration_Vlotage[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f62e:	4b0b      	ldr	r3, [pc, #44]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	3b09      	subs	r3, #9
 800f634:	4a0a      	ldr	r2, [pc, #40]	; (800f660 <Keys_Input_Calibration_Voltage+0xc0>)
 800f636:	1df9      	adds	r1, r7, #7
 800f638:	7809      	ldrb	r1, [r1, #0]
 800f63a:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f63c:	4b07      	ldr	r3, [pc, #28]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	3301      	adds	r3, #1
 800f642:	b2da      	uxtb	r2, r3
 800f644:	4b05      	ldr	r3, [pc, #20]	; (800f65c <Keys_Input_Calibration_Voltage+0xbc>)
 800f646:	701a      	strb	r2, [r3, #0]

	}

}
 800f648:	46bd      	mov	sp, r7
 800f64a:	b002      	add	sp, #8
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	46c0      	nop			; (mov r8, r8)
 800f650:	20003b8c 	.word	0x20003b8c
 800f654:	20003b1f 	.word	0x20003b1f
 800f658:	20002fd2 	.word	0x20002fd2
 800f65c:	20003b22 	.word	0x20003b22
 800f660:	2000308c 	.word	0x2000308c

0800f664 <Keys_Input_Calibration_Current>:

static void Keys_Input_Calibration_Current(char Number)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	0002      	movs	r2, r0
 800f66c:	1dfb      	adds	r3, r7, #7
 800f66e:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3||xyz.coordinates3==4) && (LOCK_UNLOCK == UNLOCK) )
 800f670:	4b28      	ldr	r3, [pc, #160]	; (800f714 <Keys_Input_Calibration_Current+0xb0>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d149      	bne.n	800f70c <Keys_Input_Calibration_Current+0xa8>
 800f678:	4b26      	ldr	r3, [pc, #152]	; (800f714 <Keys_Input_Calibration_Current+0xb0>)
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	2b08      	cmp	r3, #8
 800f67e:	d145      	bne.n	800f70c <Keys_Input_Calibration_Current+0xa8>
 800f680:	4b24      	ldr	r3, [pc, #144]	; (800f714 <Keys_Input_Calibration_Current+0xb0>)
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	2b03      	cmp	r3, #3
 800f686:	d003      	beq.n	800f690 <Keys_Input_Calibration_Current+0x2c>
 800f688:	4b22      	ldr	r3, [pc, #136]	; (800f714 <Keys_Input_Calibration_Current+0xb0>)
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	2b04      	cmp	r3, #4
 800f68e:	d13d      	bne.n	800f70c <Keys_Input_Calibration_Current+0xa8>
 800f690:	4b21      	ldr	r3, [pc, #132]	; (800f718 <Keys_Input_Calibration_Current+0xb4>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d139      	bne.n	800f70c <Keys_Input_Calibration_Current+0xa8>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f698:	4b20      	ldr	r3, [pc, #128]	; (800f71c <Keys_Input_Calibration_Current+0xb8>)
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00a      	beq.n	800f6b6 <Keys_Input_Calibration_Current+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f6a0:	4b1e      	ldr	r3, [pc, #120]	; (800f71c <Keys_Input_Calibration_Current+0xb8>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f6a6:	f005 f895 	bl	80147d4 <Cursor_flash_off>

			Cursor_Position = 9;                                    //指针设为0位
 800f6aa:	4b1d      	ldr	r3, [pc, #116]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6ac:	2209      	movs	r2, #9
 800f6ae:	701a      	strb	r2, [r3, #0]

			String_Calibration_Current[3] = '.';
 800f6b0:	4b1c      	ldr	r3, [pc, #112]	; (800f724 <Keys_Input_Calibration_Current+0xc0>)
 800f6b2:	222e      	movs	r2, #46	; 0x2e
 800f6b4:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f6b6:	4b1a      	ldr	r3, [pc, #104]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b0b      	cmp	r3, #11
 800f6bc:	d10a      	bne.n	800f6d4 <Keys_Input_Calibration_Current+0x70>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f6be:	4b18      	ldr	r3, [pc, #96]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	3b09      	subs	r3, #9
 800f6c4:	4a17      	ldr	r2, [pc, #92]	; (800f724 <Keys_Input_Calibration_Current+0xc0>)
 800f6c6:	1df9      	adds	r1, r7, #7
 800f6c8:	7809      	ldrb	r1, [r1, #0]
 800f6ca:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f6cc:	4b14      	ldr	r3, [pc, #80]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6ce:	220d      	movs	r2, #13
 800f6d0:	701a      	strb	r2, [r3, #0]
			return;
 800f6d2:	e01b      	b.n	800f70c <Keys_Input_Calibration_Current+0xa8>
		}
		if(Cursor_Position == 5+9)
 800f6d4:	4b12      	ldr	r3, [pc, #72]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b0e      	cmp	r3, #14
 800f6da:	d10a      	bne.n	800f6f2 <Keys_Input_Calibration_Current+0x8e>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f6dc:	4b10      	ldr	r3, [pc, #64]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	3b09      	subs	r3, #9
 800f6e2:	4a10      	ldr	r2, [pc, #64]	; (800f724 <Keys_Input_Calibration_Current+0xc0>)
 800f6e4:	1df9      	adds	r1, r7, #7
 800f6e6:	7809      	ldrb	r1, [r1, #0]
 800f6e8:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f6ea:	4b0d      	ldr	r3, [pc, #52]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6ec:	2209      	movs	r2, #9
 800f6ee:	701a      	strb	r2, [r3, #0]
			return;
 800f6f0:	e00c      	b.n	800f70c <Keys_Input_Calibration_Current+0xa8>
		}
		String_Calibration_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f6f2:	4b0b      	ldr	r3, [pc, #44]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	3b09      	subs	r3, #9
 800f6f8:	4a0a      	ldr	r2, [pc, #40]	; (800f724 <Keys_Input_Calibration_Current+0xc0>)
 800f6fa:	1df9      	adds	r1, r7, #7
 800f6fc:	7809      	ldrb	r1, [r1, #0]
 800f6fe:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f700:	4b07      	ldr	r3, [pc, #28]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	3301      	adds	r3, #1
 800f706:	b2da      	uxtb	r2, r3
 800f708:	4b05      	ldr	r3, [pc, #20]	; (800f720 <Keys_Input_Calibration_Current+0xbc>)
 800f70a:	701a      	strb	r2, [r3, #0]

	}

}
 800f70c:	46bd      	mov	sp, r7
 800f70e:	b002      	add	sp, #8
 800f710:	bd80      	pop	{r7, pc}
 800f712:	46c0      	nop			; (mov r8, r8)
 800f714:	20003b8c 	.word	0x20003b8c
 800f718:	20003b1f 	.word	0x20003b1f
 800f71c:	20002fd2 	.word	0x20002fd2
 800f720:	20003b22 	.word	0x20003b22
 800f724:	20003098 	.word	0x20003098

0800f728 <key_num_handle>:
 * @brief  数字按键的扫描服务函数
 * @param  数字0~9&point(10)
 * @retval None
 */
void key_num_handle(int key_number)
{
 800f728:	b590      	push	{r4, r7, lr}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
	//number
	if(key_number<=9&&key_number>=0)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b09      	cmp	r3, #9
 800f734:	dc47      	bgt.n	800f7c6 <key_num_handle+0x9e>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	db44      	blt.n	800f7c6 <key_num_handle+0x9e>
	{
		char number=key_number+'0';
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	b2da      	uxtb	r2, r3
 800f740:	210f      	movs	r1, #15
 800f742:	187b      	adds	r3, r7, r1
 800f744:	3230      	adds	r2, #48	; 0x30
 800f746:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f748:	000c      	movs	r4, r1
 800f74a:	193b      	adds	r3, r7, r4
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	0018      	movs	r0, r3
 800f750:	f7ff fb28 	bl	800eda4 <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f754:	193b      	adds	r3, r7, r4
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	0018      	movs	r0, r3
 800f75a:	f7ff fb77 	bl	800ee4c <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f75e:	193b      	adds	r3, r7, r4
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	0018      	movs	r0, r3
 800f764:	f7ff fbbe 	bl	800eee4 <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f768:	193b      	adds	r3, r7, r4
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	0018      	movs	r0, r3
 800f76e:	f7ff fc2f 	bl	800efd0 <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f772:	193b      	adds	r3, r7, r4
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	0018      	movs	r0, r3
 800f778:	f7ff fca0 	bl	800f0bc <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f77c:	193b      	adds	r3, r7, r4
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	0018      	movs	r0, r3
 800f782:	f7ff fceb 	bl	800f15c <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f786:	193b      	adds	r3, r7, r4
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	0018      	movs	r0, r3
 800f78c:	f7ff fd9c 	bl	800f2c8 <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f790:	193b      	adds	r3, r7, r4
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	0018      	movs	r0, r3
 800f796:	f7ff fdfb 	bl	800f390 <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f79a:	193b      	adds	r3, r7, r4
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	0018      	movs	r0, r3
 800f7a0:	f7ff feae 	bl	800f500 <Keys_Input_Recall>
		Keys_Input_Password(number);
 800f7a4:	193b      	adds	r3, r7, r4
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	0018      	movs	r0, r3
 800f7aa:	f7ff febb 	bl	800f524 <Keys_Input_Password>
		Keys_Input_Calibration_Voltage(number);
 800f7ae:	193b      	adds	r3, r7, r4
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	0018      	movs	r0, r3
 800f7b4:	f7ff fef4 	bl	800f5a0 <Keys_Input_Calibration_Voltage>
		Keys_Input_Calibration_Current(number);
 800f7b8:	193b      	adds	r3, r7, r4
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	0018      	movs	r0, r3
 800f7be:	f7ff ff51 	bl	800f664 <Keys_Input_Calibration_Current>
	{
 800f7c2:	46c0      	nop			; (mov r8, r8)
		Keys_Input_Delay(number);
		Keys_Input_Save(number);
		Keys_Input_Recall(number);
	}

}
 800f7c4:	e033      	b.n	800f82e <key_num_handle+0x106>
	else if(key_number==10)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2b0a      	cmp	r3, #10
 800f7ca:	d130      	bne.n	800f82e <key_num_handle+0x106>
		char number='.';
 800f7cc:	240e      	movs	r4, #14
 800f7ce:	193b      	adds	r3, r7, r4
 800f7d0:	222e      	movs	r2, #46	; 0x2e
 800f7d2:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f7d4:	193b      	adds	r3, r7, r4
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	0018      	movs	r0, r3
 800f7da:	f7ff fae3 	bl	800eda4 <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f7de:	193b      	adds	r3, r7, r4
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	0018      	movs	r0, r3
 800f7e4:	f7ff fb32 	bl	800ee4c <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f7e8:	193b      	adds	r3, r7, r4
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	0018      	movs	r0, r3
 800f7ee:	f7ff fb79 	bl	800eee4 <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f7f2:	193b      	adds	r3, r7, r4
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	0018      	movs	r0, r3
 800f7f8:	f7ff fbea 	bl	800efd0 <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f7fc:	193b      	adds	r3, r7, r4
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	0018      	movs	r0, r3
 800f802:	f7ff fc5b 	bl	800f0bc <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f806:	193b      	adds	r3, r7, r4
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	0018      	movs	r0, r3
 800f80c:	f7ff fca6 	bl	800f15c <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f810:	193b      	adds	r3, r7, r4
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	0018      	movs	r0, r3
 800f816:	f7ff fd57 	bl	800f2c8 <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f81a:	193b      	adds	r3, r7, r4
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	0018      	movs	r0, r3
 800f820:	f7ff fdb6 	bl	800f390 <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f824:	193b      	adds	r3, r7, r4
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	0018      	movs	r0, r3
 800f82a:	f7ff fe69 	bl	800f500 <Keys_Input_Recall>
}
 800f82e:	46c0      	nop			; (mov r8, r8)
 800f830:	46bd      	mov	sp, r7
 800f832:	b005      	add	sp, #20
 800f834:	bd90      	pop	{r4, r7, pc}
	...

0800f838 <Key_V_set>:
 * @brief  按键V-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_V_set(void)
{
 800f838:	b590      	push	{r4, r7, lr}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800f83e:	4b91      	ldr	r3, [pc, #580]	; (800fa84 <Key_V_set+0x24c>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d14b      	bne.n	800f8de <Key_V_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)   //当复用该按键时，该按键为菜单进入键
 800f846:	4b90      	ldr	r3, [pc, #576]	; (800fa88 <Key_V_set+0x250>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d10e      	bne.n	800f86c <Key_V_set+0x34>
		{
			xyz.coordinates1=1;//更新界面为一级菜单界面system
 800f84e:	4b8f      	ldr	r3, [pc, #572]	; (800fa8c <Key_V_set+0x254>)
 800f850:	2201      	movs	r2, #1
 800f852:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800f854:	4b8d      	ldr	r3, [pc, #564]	; (800fa8c <Key_V_set+0x254>)
 800f856:	2201      	movs	r2, #1
 800f858:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f85a:	4b8c      	ldr	r3, [pc, #560]	; (800fa8c <Key_V_set+0x254>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	609a      	str	r2, [r3, #8]
			Cursor_flash_off();
 800f860:	f004 ffb8 	bl	80147d4 <Cursor_flash_off>
			Shift_Not_Shift=Not_Shift;
 800f864:	4b88      	ldr	r3, [pc, #544]	; (800fa88 <Key_V_set+0x250>)
 800f866:	2200      	movs	r2, #0
 800f868:	701a      	strb	r2, [r3, #0]
 800f86a:	e038      	b.n	800f8de <Key_V_set+0xa6>

		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )
 800f86c:	4b87      	ldr	r3, [pc, #540]	; (800fa8c <Key_V_set+0x254>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d134      	bne.n	800f8de <Key_V_set+0xa6>
 800f874:	4b85      	ldr	r3, [pc, #532]	; (800fa8c <Key_V_set+0x254>)
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d130      	bne.n	800f8de <Key_V_set+0xa6>
 800f87c:	4b83      	ldr	r3, [pc, #524]	; (800fa8c <Key_V_set+0x254>)
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d12c      	bne.n	800f8de <Key_V_set+0xa6>
 800f884:	4b80      	ldr	r3, [pc, #512]	; (800fa88 <Key_V_set+0x250>)
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d128      	bne.n	800f8de <Key_V_set+0xa6>
		{

			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800f88c:	4b80      	ldr	r3, [pc, #512]	; (800fa90 <Key_V_set+0x258>)
 800f88e:	2201      	movs	r2, #1
 800f890:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800f892:	1d3b      	adds	r3, r7, #4
 800f894:	4a7d      	ldr	r2, [pc, #500]	; (800fa8c <Key_V_set+0x254>)
 800f896:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f898:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800f89a:	4b7c      	ldr	r3, [pc, #496]	; (800fa8c <Key_V_set+0x254>)
 800f89c:	2202      	movs	r2, #2
 800f89e:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 800f8a0:	4b7a      	ldr	r3, [pc, #488]	; (800fa8c <Key_V_set+0x254>)
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f8a6:	4b79      	ldr	r3, [pc, #484]	; (800fa8c <Key_V_set+0x254>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)  Clear_Screen();//更新前后的界面不同，清屏
 800f8ac:	1d3b      	adds	r3, r7, #4
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	4b76      	ldr	r3, [pc, #472]	; (800fa8c <Key_V_set+0x254>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d10b      	bne.n	800f8d0 <Key_V_set+0x98>
 800f8b8:	1d3b      	adds	r3, r7, #4
 800f8ba:	685a      	ldr	r2, [r3, #4]
 800f8bc:	4b73      	ldr	r3, [pc, #460]	; (800fa8c <Key_V_set+0x254>)
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d105      	bne.n	800f8d0 <Key_V_set+0x98>
 800f8c4:	1d3b      	adds	r3, r7, #4
 800f8c6:	689a      	ldr	r2, [r3, #8]
 800f8c8:	4b70      	ldr	r3, [pc, #448]	; (800fa8c <Key_V_set+0x254>)
 800f8ca:	689b      	ldr	r3, [r3, #8]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d001      	beq.n	800f8d4 <Key_V_set+0x9c>
 800f8d0:	f003 f8fe 	bl	8012ad0 <Clear_Screen>
			Cursor_Position = 0;   //令光标位于最低位
 800f8d4:	4b6f      	ldr	r3, [pc, #444]	; (800fa94 <Key_V_set+0x25c>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800f8da:	f004 ffb1 	bl	8014840 <Cursor_flash_on>


	}
	/*特殊复用功能*/
	/*I set change to v set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800f8de:	4b6b      	ldr	r3, [pc, #428]	; (800fa8c <Key_V_set+0x254>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b02      	cmp	r3, #2
 800f8e4:	d11f      	bne.n	800f926 <Key_V_set+0xee>
 800f8e6:	4b69      	ldr	r3, [pc, #420]	; (800fa8c <Key_V_set+0x254>)
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d11b      	bne.n	800f926 <Key_V_set+0xee>
 800f8ee:	4b67      	ldr	r3, [pc, #412]	; (800fa8c <Key_V_set+0x254>)
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d117      	bne.n	800f926 <Key_V_set+0xee>
 800f8f6:	4b63      	ldr	r3, [pc, #396]	; (800fa84 <Key_V_set+0x24c>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d113      	bne.n	800f926 <Key_V_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800f8fe:	4b63      	ldr	r3, [pc, #396]	; (800fa8c <Key_V_set+0x254>)
 800f900:	2202      	movs	r2, #2
 800f902:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=2;
 800f904:	4b61      	ldr	r3, [pc, #388]	; (800fa8c <Key_V_set+0x254>)
 800f906:	2202      	movs	r2, #2
 800f908:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f90a:	4b60      	ldr	r3, [pc, #384]	; (800fa8c <Key_V_set+0x254>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	609a      	str	r2, [r3, #8]

		Cursor_Position = 0;   //令光标位于最低位
 800f910:	4b60      	ldr	r3, [pc, #384]	; (800fa94 <Key_V_set+0x25c>)
 800f912:	2200      	movs	r2, #0
 800f914:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800f916:	4b60      	ldr	r3, [pc, #384]	; (800fa98 <Key_V_set+0x260>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	4b5e      	ldr	r3, [pc, #376]	; (800fa98 <Key_V_set+0x260>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2101      	movs	r1, #1
 800f922:	430a      	orrs	r2, r1
 800f924:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f926:	4b59      	ldr	r3, [pc, #356]	; (800fa8c <Key_V_set+0x254>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d120      	bne.n	800f970 <Key_V_set+0x138>
 800f92e:	4b57      	ldr	r3, [pc, #348]	; (800fa8c <Key_V_set+0x254>)
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	2b02      	cmp	r3, #2
 800f934:	d11c      	bne.n	800f970 <Key_V_set+0x138>
 800f936:	4b55      	ldr	r3, [pc, #340]	; (800fa8c <Key_V_set+0x254>)
 800f938:	689b      	ldr	r3, [r3, #8]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d018      	beq.n	800f970 <Key_V_set+0x138>
 800f93e:	4b51      	ldr	r3, [pc, #324]	; (800fa84 <Key_V_set+0x24c>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d114      	bne.n	800f970 <Key_V_set+0x138>
	{
		if(Cursor_Position==0)
 800f946:	4b53      	ldr	r3, [pc, #332]	; (800fa94 <Key_V_set+0x25c>)
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d103      	bne.n	800f956 <Key_V_set+0x11e>
		{
			Cursor_Position=4;
 800f94e:	4b51      	ldr	r3, [pc, #324]	; (800fa94 <Key_V_set+0x25c>)
 800f950:	2204      	movs	r2, #4
 800f952:	701a      	strb	r2, [r3, #0]
			return;
 800f954:	e093      	b.n	800fa7e <Key_V_set+0x246>
		}
		if(Cursor_Position==3)
 800f956:	4b4f      	ldr	r3, [pc, #316]	; (800fa94 <Key_V_set+0x25c>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d102      	bne.n	800f964 <Key_V_set+0x12c>
		{
			Cursor_Position=2;
 800f95e:	4b4d      	ldr	r3, [pc, #308]	; (800fa94 <Key_V_set+0x25c>)
 800f960:	2202      	movs	r2, #2
 800f962:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 800f964:	4b4b      	ldr	r3, [pc, #300]	; (800fa94 <Key_V_set+0x25c>)
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	3b01      	subs	r3, #1
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	4b49      	ldr	r3, [pc, #292]	; (800fa94 <Key_V_set+0x25c>)
 800f96e:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f970:	4b46      	ldr	r3, [pc, #280]	; (800fa8c <Key_V_set+0x254>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2b01      	cmp	r3, #1
 800f976:	d120      	bne.n	800f9ba <Key_V_set+0x182>
 800f978:	4b44      	ldr	r3, [pc, #272]	; (800fa8c <Key_V_set+0x254>)
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	d11c      	bne.n	800f9ba <Key_V_set+0x182>
 800f980:	4b42      	ldr	r3, [pc, #264]	; (800fa8c <Key_V_set+0x254>)
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d018      	beq.n	800f9ba <Key_V_set+0x182>
 800f988:	4b3e      	ldr	r3, [pc, #248]	; (800fa84 <Key_V_set+0x24c>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d114      	bne.n	800f9ba <Key_V_set+0x182>
	{
		if(Cursor_Position==0)
 800f990:	4b40      	ldr	r3, [pc, #256]	; (800fa94 <Key_V_set+0x25c>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d103      	bne.n	800f9a0 <Key_V_set+0x168>
		{
			Cursor_Position=7;
 800f998:	4b3e      	ldr	r3, [pc, #248]	; (800fa94 <Key_V_set+0x25c>)
 800f99a:	2207      	movs	r2, #7
 800f99c:	701a      	strb	r2, [r3, #0]
			return;
 800f99e:	e06e      	b.n	800fa7e <Key_V_set+0x246>
		}
		if(Cursor_Position==5)
 800f9a0:	4b3c      	ldr	r3, [pc, #240]	; (800fa94 <Key_V_set+0x25c>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	2b05      	cmp	r3, #5
 800f9a6:	d102      	bne.n	800f9ae <Key_V_set+0x176>
		{
			Cursor_Position=4;
 800f9a8:	4b3a      	ldr	r3, [pc, #232]	; (800fa94 <Key_V_set+0x25c>)
 800f9aa:	2204      	movs	r2, #4
 800f9ac:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f9ae:	4b39      	ldr	r3, [pc, #228]	; (800fa94 <Key_V_set+0x25c>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	b2da      	uxtb	r2, r3
 800f9b6:	4b37      	ldr	r3, [pc, #220]	; (800fa94 <Key_V_set+0x25c>)
 800f9b8:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800f9ba:	4b34      	ldr	r3, [pc, #208]	; (800fa8c <Key_V_set+0x254>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d11f      	bne.n	800fa02 <Key_V_set+0x1ca>
 800f9c2:	4b32      	ldr	r3, [pc, #200]	; (800fa8c <Key_V_set+0x254>)
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	2b05      	cmp	r3, #5
 800f9c8:	d11b      	bne.n	800fa02 <Key_V_set+0x1ca>
 800f9ca:	4b30      	ldr	r3, [pc, #192]	; (800fa8c <Key_V_set+0x254>)
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	609a      	str	r2, [r3, #8]
 800f9d0:	4b2c      	ldr	r3, [pc, #176]	; (800fa84 <Key_V_set+0x24c>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d114      	bne.n	800fa02 <Key_V_set+0x1ca>
	{
		if(Cursor_Position==0)
 800f9d8:	4b2e      	ldr	r3, [pc, #184]	; (800fa94 <Key_V_set+0x25c>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d103      	bne.n	800f9e8 <Key_V_set+0x1b0>
		{
			Cursor_Position=5;
 800f9e0:	4b2c      	ldr	r3, [pc, #176]	; (800fa94 <Key_V_set+0x25c>)
 800f9e2:	2205      	movs	r2, #5
 800f9e4:	701a      	strb	r2, [r3, #0]
			return;
 800f9e6:	e04a      	b.n	800fa7e <Key_V_set+0x246>
		}
		if(Cursor_Position==4)
 800f9e8:	4b2a      	ldr	r3, [pc, #168]	; (800fa94 <Key_V_set+0x25c>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2b04      	cmp	r3, #4
 800f9ee:	d102      	bne.n	800f9f6 <Key_V_set+0x1be>
		{
			Cursor_Position=3;
 800f9f0:	4b28      	ldr	r3, [pc, #160]	; (800fa94 <Key_V_set+0x25c>)
 800f9f2:	2203      	movs	r2, #3
 800f9f4:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f9f6:	4b27      	ldr	r3, [pc, #156]	; (800fa94 <Key_V_set+0x25c>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	b2da      	uxtb	r2, r3
 800f9fe:	4b25      	ldr	r3, [pc, #148]	; (800fa94 <Key_V_set+0x25c>)
 800fa00:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800fa02:	4b22      	ldr	r3, [pc, #136]	; (800fa8c <Key_V_set+0x254>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d118      	bne.n	800fa3c <Key_V_set+0x204>
 800fa0a:	4b20      	ldr	r3, [pc, #128]	; (800fa8c <Key_V_set+0x254>)
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	2b05      	cmp	r3, #5
 800fa10:	d114      	bne.n	800fa3c <Key_V_set+0x204>
 800fa12:	4b1e      	ldr	r3, [pc, #120]	; (800fa8c <Key_V_set+0x254>)
 800fa14:	2202      	movs	r2, #2
 800fa16:	609a      	str	r2, [r3, #8]
 800fa18:	4b1a      	ldr	r3, [pc, #104]	; (800fa84 <Key_V_set+0x24c>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d10d      	bne.n	800fa3c <Key_V_set+0x204>
	{
		if(Cursor_Position==0)
 800fa20:	4b1c      	ldr	r3, [pc, #112]	; (800fa94 <Key_V_set+0x25c>)
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d103      	bne.n	800fa30 <Key_V_set+0x1f8>
		{
			Cursor_Position=2;
 800fa28:	4b1a      	ldr	r3, [pc, #104]	; (800fa94 <Key_V_set+0x25c>)
 800fa2a:	2202      	movs	r2, #2
 800fa2c:	701a      	strb	r2, [r3, #0]
			return;
 800fa2e:	e026      	b.n	800fa7e <Key_V_set+0x246>
		}
		Cursor_Position--;
 800fa30:	4b18      	ldr	r3, [pc, #96]	; (800fa94 <Key_V_set+0x25c>)
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	b2da      	uxtb	r2, r3
 800fa38:	4b16      	ldr	r3, [pc, #88]	; (800fa94 <Key_V_set+0x25c>)
 800fa3a:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800fa3c:	4b13      	ldr	r3, [pc, #76]	; (800fa8c <Key_V_set+0x254>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2b03      	cmp	r3, #3
 800fa42:	d11a      	bne.n	800fa7a <Key_V_set+0x242>
 800fa44:	4b11      	ldr	r3, [pc, #68]	; (800fa8c <Key_V_set+0x254>)
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d016      	beq.n	800fa7a <Key_V_set+0x242>
 800fa4c:	4b0d      	ldr	r3, [pc, #52]	; (800fa84 <Key_V_set+0x24c>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d112      	bne.n	800fa7a <Key_V_set+0x242>
	{
		if(xyz.coordinates2==2)//recall
 800fa54:	4b0d      	ldr	r3, [pc, #52]	; (800fa8c <Key_V_set+0x254>)
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d102      	bne.n	800fa62 <Key_V_set+0x22a>
		{
			Cursor_flash_off();
 800fa5c:	f004 feba 	bl	80147d4 <Cursor_flash_off>
 800fa60:	e00b      	b.n	800fa7a <Key_V_set+0x242>
		}
		else if(xyz.coordinates2==1)//save
 800fa62:	4b0a      	ldr	r3, [pc, #40]	; (800fa8c <Key_V_set+0x254>)
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d107      	bne.n	800fa7a <Key_V_set+0x242>
		{
			xyz.coordinates3=1;
 800fa6a:	4b08      	ldr	r3, [pc, #32]	; (800fa8c <Key_V_set+0x254>)
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	609a      	str	r2, [r3, #8]
			Cursor_Position=0;
 800fa70:	4b08      	ldr	r3, [pc, #32]	; (800fa94 <Key_V_set+0x25c>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800fa76:	f004 fee3 	bl	8014840 <Cursor_flash_on>
		}


	}

	Display_Interface();
 800fa7a:	f004 fef1 	bl	8014860 <Display_Interface>


}
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	b005      	add	sp, #20
 800fa82:	bd90      	pop	{r4, r7, pc}
 800fa84:	20003b1f 	.word	0x20003b1f
 800fa88:	20003b1b 	.word	0x20003b1b
 800fa8c:	20003b8c 	.word	0x20003b8c
 800fa90:	20002fd2 	.word	0x20002fd2
 800fa94:	20003b22 	.word	0x20003b22
 800fa98:	200034c8 	.word	0x200034c8

0800fa9c <Key_I_set>:
 * @brief  按键I-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_I_set(void)
{
 800fa9c:	b590      	push	{r4, r7, lr}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800faa2:	4b91      	ldr	r3, [pc, #580]	; (800fce8 <Key_I_set+0x24c>)
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d14b      	bne.n	800fb42 <Key_I_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)
 800faaa:	4b90      	ldr	r3, [pc, #576]	; (800fcec <Key_I_set+0x250>)
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d10e      	bne.n	800fad0 <Key_I_set+0x34>
		{

			/*进入设定值展示界面*/
			xyz.coordinates1=9;
 800fab2:	4b8f      	ldr	r3, [pc, #572]	; (800fcf0 <Key_I_set+0x254>)
 800fab4:	2209      	movs	r2, #9
 800fab6:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=9;
 800fab8:	4b8d      	ldr	r3, [pc, #564]	; (800fcf0 <Key_I_set+0x254>)
 800faba:	2209      	movs	r2, #9
 800fabc:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=9;
 800fabe:	4b8c      	ldr	r3, [pc, #560]	; (800fcf0 <Key_I_set+0x254>)
 800fac0:	2209      	movs	r2, #9
 800fac2:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift=Not_Shift;
 800fac4:	4b89      	ldr	r3, [pc, #548]	; (800fcec <Key_I_set+0x250>)
 800fac6:	2200      	movs	r2, #0
 800fac8:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800faca:	f004 fe83 	bl	80147d4 <Cursor_flash_off>
 800face:	e038      	b.n	800fb42 <Key_I_set+0xa6>
		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )//补充一个设定界面坐标
 800fad0:	4b87      	ldr	r3, [pc, #540]	; (800fcf0 <Key_I_set+0x254>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d134      	bne.n	800fb42 <Key_I_set+0xa6>
 800fad8:	4b85      	ldr	r3, [pc, #532]	; (800fcf0 <Key_I_set+0x254>)
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d130      	bne.n	800fb42 <Key_I_set+0xa6>
 800fae0:	4b83      	ldr	r3, [pc, #524]	; (800fcf0 <Key_I_set+0x254>)
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d12c      	bne.n	800fb42 <Key_I_set+0xa6>
 800fae8:	4b80      	ldr	r3, [pc, #512]	; (800fcec <Key_I_set+0x250>)
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d128      	bne.n	800fb42 <Key_I_set+0xa6>
		{
			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800faf0:	4b80      	ldr	r3, [pc, #512]	; (800fcf4 <Key_I_set+0x258>)
 800faf2:	2201      	movs	r2, #1
 800faf4:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800faf6:	1d3b      	adds	r3, r7, #4
 800faf8:	4a7d      	ldr	r2, [pc, #500]	; (800fcf0 <Key_I_set+0x254>)
 800fafa:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fafc:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800fafe:	4b7c      	ldr	r3, [pc, #496]	; (800fcf0 <Key_I_set+0x254>)
 800fb00:	2202      	movs	r2, #2
 800fb02:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800fb04:	4b7a      	ldr	r3, [pc, #488]	; (800fcf0 <Key_I_set+0x254>)
 800fb06:	2201      	movs	r2, #1
 800fb08:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800fb0a:	4b79      	ldr	r3, [pc, #484]	; (800fcf0 <Key_I_set+0x254>)
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)   Clear_Screen();;//更新前后的界面不同，清屏
 800fb10:	1d3b      	adds	r3, r7, #4
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	4b76      	ldr	r3, [pc, #472]	; (800fcf0 <Key_I_set+0x254>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d10b      	bne.n	800fb34 <Key_I_set+0x98>
 800fb1c:	1d3b      	adds	r3, r7, #4
 800fb1e:	685a      	ldr	r2, [r3, #4]
 800fb20:	4b73      	ldr	r3, [pc, #460]	; (800fcf0 <Key_I_set+0x254>)
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d105      	bne.n	800fb34 <Key_I_set+0x98>
 800fb28:	1d3b      	adds	r3, r7, #4
 800fb2a:	689a      	ldr	r2, [r3, #8]
 800fb2c:	4b70      	ldr	r3, [pc, #448]	; (800fcf0 <Key_I_set+0x254>)
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d001      	beq.n	800fb38 <Key_I_set+0x9c>
 800fb34:	f002 ffcc 	bl	8012ad0 <Clear_Screen>
			Cursor_Position = 9;   //Cursor reset
 800fb38:	4b6f      	ldr	r3, [pc, #444]	; (800fcf8 <Key_I_set+0x25c>)
 800fb3a:	2209      	movs	r2, #9
 800fb3c:	701a      	strb	r2, [r3, #0]


			Cursor_flash_on();
 800fb3e:	f004 fe7f 	bl	8014840 <Cursor_flash_on>

	}

	/*特殊复用功能*/
	/*V set change to I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800fb42:	4b6b      	ldr	r3, [pc, #428]	; (800fcf0 <Key_I_set+0x254>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2b02      	cmp	r3, #2
 800fb48:	d11f      	bne.n	800fb8a <Key_I_set+0xee>
 800fb4a:	4b69      	ldr	r3, [pc, #420]	; (800fcf0 <Key_I_set+0x254>)
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	d11b      	bne.n	800fb8a <Key_I_set+0xee>
 800fb52:	4b67      	ldr	r3, [pc, #412]	; (800fcf0 <Key_I_set+0x254>)
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d117      	bne.n	800fb8a <Key_I_set+0xee>
 800fb5a:	4b63      	ldr	r3, [pc, #396]	; (800fce8 <Key_I_set+0x24c>)
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d113      	bne.n	800fb8a <Key_I_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800fb62:	4b63      	ldr	r3, [pc, #396]	; (800fcf0 <Key_I_set+0x254>)
 800fb64:	2202      	movs	r2, #2
 800fb66:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 800fb68:	4b61      	ldr	r3, [pc, #388]	; (800fcf0 <Key_I_set+0x254>)
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800fb6e:	4b60      	ldr	r3, [pc, #384]	; (800fcf0 <Key_I_set+0x254>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	609a      	str	r2, [r3, #8]

		Cursor_Position = 9;   //令光标位于最低位
 800fb74:	4b60      	ldr	r3, [pc, #384]	; (800fcf8 <Key_I_set+0x25c>)
 800fb76:	2209      	movs	r2, #9
 800fb78:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800fb7a:	4b60      	ldr	r3, [pc, #384]	; (800fcfc <Key_I_set+0x260>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	4b5e      	ldr	r3, [pc, #376]	; (800fcfc <Key_I_set+0x260>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2101      	movs	r1, #1
 800fb86:	430a      	orrs	r2, r1
 800fb88:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800fb8a:	4b59      	ldr	r3, [pc, #356]	; (800fcf0 <Key_I_set+0x254>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d120      	bne.n	800fbd4 <Key_I_set+0x138>
 800fb92:	4b57      	ldr	r3, [pc, #348]	; (800fcf0 <Key_I_set+0x254>)
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d11c      	bne.n	800fbd4 <Key_I_set+0x138>
 800fb9a:	4b55      	ldr	r3, [pc, #340]	; (800fcf0 <Key_I_set+0x254>)
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d018      	beq.n	800fbd4 <Key_I_set+0x138>
 800fba2:	4b51      	ldr	r3, [pc, #324]	; (800fce8 <Key_I_set+0x24c>)
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d114      	bne.n	800fbd4 <Key_I_set+0x138>
	{
		if(Cursor_Position==4)
 800fbaa:	4b53      	ldr	r3, [pc, #332]	; (800fcf8 <Key_I_set+0x25c>)
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	d103      	bne.n	800fbba <Key_I_set+0x11e>
		{
			Cursor_Position=0;
 800fbb2:	4b51      	ldr	r3, [pc, #324]	; (800fcf8 <Key_I_set+0x25c>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	701a      	strb	r2, [r3, #0]
			return;
 800fbb8:	e092      	b.n	800fce0 <Key_I_set+0x244>
		}
		if(Cursor_Position==1)
 800fbba:	4b4f      	ldr	r3, [pc, #316]	; (800fcf8 <Key_I_set+0x25c>)
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d102      	bne.n	800fbc8 <Key_I_set+0x12c>
		{
			Cursor_Position=2;
 800fbc2:	4b4d      	ldr	r3, [pc, #308]	; (800fcf8 <Key_I_set+0x25c>)
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800fbc8:	4b4b      	ldr	r3, [pc, #300]	; (800fcf8 <Key_I_set+0x25c>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	4b49      	ldr	r3, [pc, #292]	; (800fcf8 <Key_I_set+0x25c>)
 800fbd2:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800fbd4:	4b46      	ldr	r3, [pc, #280]	; (800fcf0 <Key_I_set+0x254>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d121      	bne.n	800fc20 <Key_I_set+0x184>
 800fbdc:	4b44      	ldr	r3, [pc, #272]	; (800fcf0 <Key_I_set+0x254>)
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	2b04      	cmp	r3, #4
 800fbe2:	d11d      	bne.n	800fc20 <Key_I_set+0x184>
 800fbe4:	4b42      	ldr	r3, [pc, #264]	; (800fcf0 <Key_I_set+0x254>)
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d019      	beq.n	800fc20 <Key_I_set+0x184>
 800fbec:	4b3e      	ldr	r3, [pc, #248]	; (800fce8 <Key_I_set+0x24c>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d115      	bne.n	800fc20 <Key_I_set+0x184>
	{
		if(Cursor_Position==12)
 800fbf4:	4b40      	ldr	r3, [pc, #256]	; (800fcf8 <Key_I_set+0x25c>)
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	2b0c      	cmp	r3, #12
 800fbfa:	d103      	bne.n	800fc04 <Key_I_set+0x168>
		{
			Cursor_Position=5;
 800fbfc:	4b3e      	ldr	r3, [pc, #248]	; (800fcf8 <Key_I_set+0x25c>)
 800fbfe:	2205      	movs	r2, #5
 800fc00:	701a      	strb	r2, [r3, #0]
			return;
 800fc02:	e06d      	b.n	800fce0 <Key_I_set+0x244>
		}
		if(Cursor_Position==8)
 800fc04:	4b3c      	ldr	r3, [pc, #240]	; (800fcf8 <Key_I_set+0x25c>)
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	2b08      	cmp	r3, #8
 800fc0a:	d103      	bne.n	800fc14 <Key_I_set+0x178>
		{
			Cursor_Position=10;
 800fc0c:	4b3a      	ldr	r3, [pc, #232]	; (800fcf8 <Key_I_set+0x25c>)
 800fc0e:	220a      	movs	r2, #10
 800fc10:	701a      	strb	r2, [r3, #0]
			return;
 800fc12:	e065      	b.n	800fce0 <Key_I_set+0x244>

		}

		Cursor_Position++;
 800fc14:	4b38      	ldr	r3, [pc, #224]	; (800fcf8 <Key_I_set+0x25c>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	b2da      	uxtb	r2, r3
 800fc1c:	4b36      	ldr	r3, [pc, #216]	; (800fcf8 <Key_I_set+0x25c>)
 800fc1e:	701a      	strb	r2, [r3, #0]
	}
	/*AD*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800fc20:	4b33      	ldr	r3, [pc, #204]	; (800fcf0 <Key_I_set+0x254>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d11f      	bne.n	800fc68 <Key_I_set+0x1cc>
 800fc28:	4b31      	ldr	r3, [pc, #196]	; (800fcf0 <Key_I_set+0x254>)
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	2b05      	cmp	r3, #5
 800fc2e:	d11b      	bne.n	800fc68 <Key_I_set+0x1cc>
 800fc30:	4b2f      	ldr	r3, [pc, #188]	; (800fcf0 <Key_I_set+0x254>)
 800fc32:	2201      	movs	r2, #1
 800fc34:	609a      	str	r2, [r3, #8]
 800fc36:	4b2c      	ldr	r3, [pc, #176]	; (800fce8 <Key_I_set+0x24c>)
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d114      	bne.n	800fc68 <Key_I_set+0x1cc>
	{
		if(Cursor_Position==5)
 800fc3e:	4b2e      	ldr	r3, [pc, #184]	; (800fcf8 <Key_I_set+0x25c>)
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	2b05      	cmp	r3, #5
 800fc44:	d103      	bne.n	800fc4e <Key_I_set+0x1b2>
		{
			Cursor_Position=0;
 800fc46:	4b2c      	ldr	r3, [pc, #176]	; (800fcf8 <Key_I_set+0x25c>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	701a      	strb	r2, [r3, #0]
			return;
 800fc4c:	e048      	b.n	800fce0 <Key_I_set+0x244>
		}
		if(Cursor_Position==2)
 800fc4e:	4b2a      	ldr	r3, [pc, #168]	; (800fcf8 <Key_I_set+0x25c>)
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d102      	bne.n	800fc5c <Key_I_set+0x1c0>
		{
			Cursor_Position=3;
 800fc56:	4b28      	ldr	r3, [pc, #160]	; (800fcf8 <Key_I_set+0x25c>)
 800fc58:	2203      	movs	r2, #3
 800fc5a:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800fc5c:	4b26      	ldr	r3, [pc, #152]	; (800fcf8 <Key_I_set+0x25c>)
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	3301      	adds	r3, #1
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	4b24      	ldr	r3, [pc, #144]	; (800fcf8 <Key_I_set+0x25c>)
 800fc66:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800fc68:	4b21      	ldr	r3, [pc, #132]	; (800fcf0 <Key_I_set+0x254>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d118      	bne.n	800fca2 <Key_I_set+0x206>
 800fc70:	4b1f      	ldr	r3, [pc, #124]	; (800fcf0 <Key_I_set+0x254>)
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	2b05      	cmp	r3, #5
 800fc76:	d114      	bne.n	800fca2 <Key_I_set+0x206>
 800fc78:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <Key_I_set+0x254>)
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	609a      	str	r2, [r3, #8]
 800fc7e:	4b1a      	ldr	r3, [pc, #104]	; (800fce8 <Key_I_set+0x24c>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d10d      	bne.n	800fca2 <Key_I_set+0x206>
	{
		if(Cursor_Position==2)
 800fc86:	4b1c      	ldr	r3, [pc, #112]	; (800fcf8 <Key_I_set+0x25c>)
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	d103      	bne.n	800fc96 <Key_I_set+0x1fa>
		{
			Cursor_Position=0;
 800fc8e:	4b1a      	ldr	r3, [pc, #104]	; (800fcf8 <Key_I_set+0x25c>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	701a      	strb	r2, [r3, #0]
			return;
 800fc94:	e024      	b.n	800fce0 <Key_I_set+0x244>
		}
		Cursor_Position++;
 800fc96:	4b18      	ldr	r3, [pc, #96]	; (800fcf8 <Key_I_set+0x25c>)
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	4b16      	ldr	r3, [pc, #88]	; (800fcf8 <Key_I_set+0x25c>)
 800fca0:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800fca2:	4b13      	ldr	r3, [pc, #76]	; (800fcf0 <Key_I_set+0x254>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2b03      	cmp	r3, #3
 800fca8:	d11a      	bne.n	800fce0 <Key_I_set+0x244>
 800fcaa:	4b11      	ldr	r3, [pc, #68]	; (800fcf0 <Key_I_set+0x254>)
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d016      	beq.n	800fce0 <Key_I_set+0x244>
 800fcb2:	4b0d      	ldr	r3, [pc, #52]	; (800fce8 <Key_I_set+0x24c>)
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d112      	bne.n	800fce0 <Key_I_set+0x244>
	{
		if(xyz.coordinates2==2)//recall
 800fcba:	4b0d      	ldr	r3, [pc, #52]	; (800fcf0 <Key_I_set+0x254>)
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	2b02      	cmp	r3, #2
 800fcc0:	d102      	bne.n	800fcc8 <Key_I_set+0x22c>
		{
			Cursor_flash_off();
 800fcc2:	f004 fd87 	bl	80147d4 <Cursor_flash_off>
 800fcc6:	e00b      	b.n	800fce0 <Key_I_set+0x244>
		}
		else if(xyz.coordinates2==1)
 800fcc8:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <Key_I_set+0x254>)
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d107      	bne.n	800fce0 <Key_I_set+0x244>
		{
			xyz.coordinates3=2;
 800fcd0:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <Key_I_set+0x254>)
 800fcd2:	2202      	movs	r2, #2
 800fcd4:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 800fcd6:	4b08      	ldr	r3, [pc, #32]	; (800fcf8 <Key_I_set+0x25c>)
 800fcd8:	2209      	movs	r2, #9
 800fcda:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800fcdc:	f004 fdb0 	bl	8014840 <Cursor_flash_on>
		}

	}

}
 800fce0:	46bd      	mov	sp, r7
 800fce2:	b005      	add	sp, #20
 800fce4:	bd90      	pop	{r4, r7, pc}
 800fce6:	46c0      	nop			; (mov r8, r8)
 800fce8:	20003b1f 	.word	0x20003b1f
 800fcec:	20003b1b 	.word	0x20003b1b
 800fcf0:	20003b8c 	.word	0x20003b8c
 800fcf4:	20002fd2 	.word	0x20002fd2
 800fcf8:	20003b22 	.word	0x20003b22
 800fcfc:	200034c8 	.word	0x200034c8

0800fd00 <enter_second_menu>:


static void enter_second_menu(void)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	af00      	add	r7, sp, #0
	switch(xyz.coordinates2)
 800fd04:	4b13      	ldr	r3, [pc, #76]	; (800fd54 <enter_second_menu+0x54>)
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	2b08      	cmp	r3, #8
 800fd0a:	d81f      	bhi.n	800fd4c <enter_second_menu+0x4c>
 800fd0c:	009a      	lsls	r2, r3, #2
 800fd0e:	4b12      	ldr	r3, [pc, #72]	; (800fd58 <enter_second_menu+0x58>)
 800fd10:	18d3      	adds	r3, r2, r3
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	469f      	mov	pc, r3
	{
		case 1://system to reset
		case 3://RS232 to braudrate
		case 7://protect
		{
			Cursor_Position=0;
 800fd16:	4b11      	ldr	r3, [pc, #68]	; (800fd5c <enter_second_menu+0x5c>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800fd1c:	f004 fd5a 	bl	80147d4 <Cursor_flash_off>
			xyz.coordinates3=1;
 800fd20:	4b0c      	ldr	r3, [pc, #48]	; (800fd54 <enter_second_menu+0x54>)
 800fd22:	2201      	movs	r2, #1
 800fd24:	609a      	str	r2, [r3, #8]
			break;
 800fd26:	e011      	b.n	800fd4c <enter_second_menu+0x4c>
		case 5://ADparam show
		case 2://slope to rate
		case 4://timer to delay cycle
		case 6://hard param
		{
			Cursor_Position=6;
 800fd28:	4b0c      	ldr	r3, [pc, #48]	; (800fd5c <enter_second_menu+0x5c>)
 800fd2a:	2206      	movs	r2, #6
 800fd2c:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800fd2e:	f004 fd87 	bl	8014840 <Cursor_flash_on>
			xyz.coordinates3=1;
 800fd32:	4b08      	ldr	r3, [pc, #32]	; (800fd54 <enter_second_menu+0x54>)
 800fd34:	2201      	movs	r2, #1
 800fd36:	609a      	str	r2, [r3, #8]
			break;
 800fd38:	e008      	b.n	800fd4c <enter_second_menu+0x4c>
		}
		case 8://calibration
		{
			Cursor_flash_on();
 800fd3a:	f004 fd81 	bl	8014840 <Cursor_flash_on>
			Cursor_Position=9;
 800fd3e:	4b07      	ldr	r3, [pc, #28]	; (800fd5c <enter_second_menu+0x5c>)
 800fd40:	2209      	movs	r2, #9
 800fd42:	701a      	strb	r2, [r3, #0]
			xyz.coordinates3=1;
 800fd44:	4b03      	ldr	r3, [pc, #12]	; (800fd54 <enter_second_menu+0x54>)
 800fd46:	2201      	movs	r2, #1
 800fd48:	609a      	str	r2, [r3, #8]
			break;
 800fd4a:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 800fd4c:	46c0      	nop			; (mov r8, r8)
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	46c0      	nop			; (mov r8, r8)
 800fd54:	20003b8c 	.word	0x20003b8c
 800fd58:	08018c58 	.word	0x08018c58
 800fd5c:	20003b22 	.word	0x20003b22

0800fd60 <ISET_enter>:

static void ISET_enter(void)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800fd64:	4b45      	ldr	r3, [pc, #276]	; (800fe7c <ISET_enter+0x11c>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d139      	bne.n	800fde0 <ISET_enter+0x80>
	{
		//Set_Current = String_To_Float(String_Current)*100;
		Set_Current=String_to_float(String_Current)*100;
 800fd6c:	4b44      	ldr	r3, [pc, #272]	; (800fe80 <ISET_enter+0x120>)
 800fd6e:	0018      	movs	r0, r3
 800fd70:	f7fe fbaa 	bl	800e4c8 <String_to_float>
 800fd74:	1c03      	adds	r3, r0, #0
 800fd76:	4943      	ldr	r1, [pc, #268]	; (800fe84 <ISET_enter+0x124>)
 800fd78:	1c18      	adds	r0, r3, #0
 800fd7a:	f7f0 ff71 	bl	8000c60 <__aeabi_fmul>
 800fd7e:	1c03      	adds	r3, r0, #0
 800fd80:	1c18      	adds	r0, r3, #0
 800fd82:	f7f0 fbd1 	bl	8000528 <__aeabi_f2uiz>
 800fd86:	0003      	movs	r3, r0
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	4b3f      	ldr	r3, [pc, #252]	; (800fe88 <ISET_enter+0x128>)
 800fd8c:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800fd8e:	4b3e      	ldr	r3, [pc, #248]	; (800fe88 <ISET_enter+0x128>)
 800fd90:	881b      	ldrh	r3, [r3, #0]
 800fd92:	4a3e      	ldr	r2, [pc, #248]	; (800fe8c <ISET_enter+0x12c>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d902      	bls.n	800fd9e <ISET_enter+0x3e>
 800fd98:	4b3b      	ldr	r3, [pc, #236]	; (800fe88 <ISET_enter+0x128>)
 800fd9a:	4a3c      	ldr	r2, [pc, #240]	; (800fe8c <ISET_enter+0x12c>)
 800fd9c:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=10)   Set_Current=10;
 800fd9e:	4b3a      	ldr	r3, [pc, #232]	; (800fe88 <ISET_enter+0x128>)
 800fda0:	881b      	ldrh	r3, [r3, #0]
 800fda2:	2b0a      	cmp	r3, #10
 800fda4:	d802      	bhi.n	800fdac <ISET_enter+0x4c>
 800fda6:	4b38      	ldr	r3, [pc, #224]	; (800fe88 <ISET_enter+0x128>)
 800fda8:	220a      	movs	r2, #10
 800fdaa:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fdac:	f7fc fad2 	bl	800c354 <AT25_Save_VISet>



		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off))//处于非延时输出
 800fdb0:	4b37      	ldr	r3, [pc, #220]	; (800fe90 <ISET_enter+0x130>)
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d10a      	bne.n	800fdce <ISET_enter+0x6e>
 800fdb8:	4b36      	ldr	r3, [pc, #216]	; (800fe94 <ISET_enter+0x134>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d106      	bne.n	800fdce <ISET_enter+0x6e>
		{

			DAC_Cmd_send(1,5,Set_Current);
 800fdc0:	4b31      	ldr	r3, [pc, #196]	; (800fe88 <ISET_enter+0x128>)
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	001a      	movs	r2, r3
 800fdc6:	2105      	movs	r1, #5
 800fdc8:	2001      	movs	r0, #1
 800fdca:	f7fc fdb5 	bl	800c938 <DAC_Cmd_send>
		}

		Cursor_Position=9;
 800fdce:	4b32      	ldr	r3, [pc, #200]	; (800fe98 <ISET_enter+0x138>)
 800fdd0:	2209      	movs	r2, #9
 800fdd2:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode=Encoder_Mode;
 800fdd4:	4b29      	ldr	r3, [pc, #164]	; (800fe7c <ISET_enter+0x11c>)
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fdda:	f004 fd31 	bl	8014840 <Cursor_flash_on>
		Cursor_Position=9;
		Keys_Encoder_Mode=Encoder_Mode;
		Cursor_flash_on();
	}

}
 800fdde:	e049      	b.n	800fe74 <ISET_enter+0x114>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800fde0:	4b26      	ldr	r3, [pc, #152]	; (800fe7c <ISET_enter+0x11c>)
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d145      	bne.n	800fe74 <ISET_enter+0x114>
		Keys_Encoder_Mode = Encoder_Mode;//恢复为编码器输入模式
 800fde8:	4b24      	ldr	r3, [pc, #144]	; (800fe7c <ISET_enter+0x11c>)
 800fdea:	2201      	movs	r2, #1
 800fdec:	701a      	strb	r2, [r3, #0]
		Set_Current=String_to_float(String_Current)*100;
 800fdee:	4b24      	ldr	r3, [pc, #144]	; (800fe80 <ISET_enter+0x120>)
 800fdf0:	0018      	movs	r0, r3
 800fdf2:	f7fe fb69 	bl	800e4c8 <String_to_float>
 800fdf6:	1c03      	adds	r3, r0, #0
 800fdf8:	4922      	ldr	r1, [pc, #136]	; (800fe84 <ISET_enter+0x124>)
 800fdfa:	1c18      	adds	r0, r3, #0
 800fdfc:	f7f0 ff30 	bl	8000c60 <__aeabi_fmul>
 800fe00:	1c03      	adds	r3, r0, #0
 800fe02:	1c18      	adds	r0, r3, #0
 800fe04:	f7f0 fb90 	bl	8000528 <__aeabi_f2uiz>
 800fe08:	0003      	movs	r3, r0
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	4b1e      	ldr	r3, [pc, #120]	; (800fe88 <ISET_enter+0x128>)
 800fe0e:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800fe10:	4b1d      	ldr	r3, [pc, #116]	; (800fe88 <ISET_enter+0x128>)
 800fe12:	881b      	ldrh	r3, [r3, #0]
 800fe14:	4a1d      	ldr	r2, [pc, #116]	; (800fe8c <ISET_enter+0x12c>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d902      	bls.n	800fe20 <ISET_enter+0xc0>
 800fe1a:	4b1b      	ldr	r3, [pc, #108]	; (800fe88 <ISET_enter+0x128>)
 800fe1c:	4a1b      	ldr	r2, [pc, #108]	; (800fe8c <ISET_enter+0x12c>)
 800fe1e:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=100)   Set_Current=100;
 800fe20:	4b19      	ldr	r3, [pc, #100]	; (800fe88 <ISET_enter+0x128>)
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	2b64      	cmp	r3, #100	; 0x64
 800fe26:	d802      	bhi.n	800fe2e <ISET_enter+0xce>
 800fe28:	4b17      	ldr	r3, [pc, #92]	; (800fe88 <ISET_enter+0x128>)
 800fe2a:	2264      	movs	r2, #100	; 0x64
 800fe2c:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fe2e:	f7fc fa91 	bl	800c354 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off))//处于非延时输出模式
 800fe32:	4b17      	ldr	r3, [pc, #92]	; (800fe90 <ISET_enter+0x130>)
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	d114      	bne.n	800fe64 <ISET_enter+0x104>
 800fe3a:	4b16      	ldr	r3, [pc, #88]	; (800fe94 <ISET_enter+0x134>)
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d110      	bne.n	800fe64 <ISET_enter+0x104>
			DAC_Cmd_send(1,4,Set_Voltage);
 800fe42:	4b16      	ldr	r3, [pc, #88]	; (800fe9c <ISET_enter+0x13c>)
 800fe44:	881b      	ldrh	r3, [r3, #0]
 800fe46:	001a      	movs	r2, r3
 800fe48:	2104      	movs	r1, #4
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	f7fc fd74 	bl	800c938 <DAC_Cmd_send>
			HAL_Delay(5);
 800fe50:	2005      	movs	r0, #5
 800fe52:	f7f5 fa6d 	bl	8005330 <HAL_Delay>
			DAC_Cmd_send(1,5,Set_Current);
 800fe56:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <ISET_enter+0x128>)
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	001a      	movs	r2, r3
 800fe5c:	2105      	movs	r1, #5
 800fe5e:	2001      	movs	r0, #1
 800fe60:	f7fc fd6a 	bl	800c938 <DAC_Cmd_send>
		Cursor_Position=9;
 800fe64:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <ISET_enter+0x138>)
 800fe66:	2209      	movs	r2, #9
 800fe68:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode=Encoder_Mode;
 800fe6a:	4b04      	ldr	r3, [pc, #16]	; (800fe7c <ISET_enter+0x11c>)
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fe70:	f004 fce6 	bl	8014840 <Cursor_flash_on>
}
 800fe74:	46c0      	nop			; (mov r8, r8)
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	46c0      	nop			; (mov r8, r8)
 800fe7c:	20002fd2 	.word	0x20002fd2
 800fe80:	20003060 	.word	0x20003060
 800fe84:	42c80000 	.word	0x42c80000
 800fe88:	20002fda 	.word	0x20002fda
 800fe8c:	00001388 	.word	0x00001388
 800fe90:	20003b1d 	.word	0x20003b1d
 800fe94:	20003b75 	.word	0x20003b75
 800fe98:	20003b22 	.word	0x20003b22
 800fe9c:	20002fd8 	.word	0x20002fd8

0800fea0 <VSET_enter>:

static void VSET_enter(void)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800fea4:	4b3d      	ldr	r3, [pc, #244]	; (800ff9c <VSET_enter+0xfc>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d137      	bne.n	800ff1c <VSET_enter+0x7c>
	{

		Set_Voltage = String_to_float(&String_Voltage[0])*100;
 800feac:	4b3c      	ldr	r3, [pc, #240]	; (800ffa0 <VSET_enter+0x100>)
 800feae:	0018      	movs	r0, r3
 800feb0:	f7fe fb0a 	bl	800e4c8 <String_to_float>
 800feb4:	1c03      	adds	r3, r0, #0
 800feb6:	493b      	ldr	r1, [pc, #236]	; (800ffa4 <VSET_enter+0x104>)
 800feb8:	1c18      	adds	r0, r3, #0
 800feba:	f7f0 fed1 	bl	8000c60 <__aeabi_fmul>
 800febe:	1c03      	adds	r3, r0, #0
 800fec0:	1c18      	adds	r0, r3, #0
 800fec2:	f7f0 fb31 	bl	8000528 <__aeabi_f2uiz>
 800fec6:	0003      	movs	r3, r0
 800fec8:	b29a      	uxth	r2, r3
 800feca:	4b37      	ldr	r3, [pc, #220]	; (800ffa8 <VSET_enter+0x108>)
 800fecc:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000)
 800fece:	4b36      	ldr	r3, [pc, #216]	; (800ffa8 <VSET_enter+0x108>)
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	4a36      	ldr	r2, [pc, #216]	; (800ffac <VSET_enter+0x10c>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d902      	bls.n	800fede <VSET_enter+0x3e>
		{
			Set_Voltage = 15000;  //限制电压最大值为150V
 800fed8:	4b33      	ldr	r3, [pc, #204]	; (800ffa8 <VSET_enter+0x108>)
 800feda:	4a34      	ldr	r2, [pc, #208]	; (800ffac <VSET_enter+0x10c>)
 800fedc:	801a      	strh	r2, [r3, #0]
		}
		if(Set_Voltage<=10)
 800fede:	4b32      	ldr	r3, [pc, #200]	; (800ffa8 <VSET_enter+0x108>)
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	2b0a      	cmp	r3, #10
 800fee4:	d802      	bhi.n	800feec <VSET_enter+0x4c>
		{
			Set_Voltage=10;
 800fee6:	4b30      	ldr	r3, [pc, #192]	; (800ffa8 <VSET_enter+0x108>)
 800fee8:	220a      	movs	r2, #10
 800feea:	801a      	strh	r2, [r3, #0]
		}


		AT25_Save_VISet();
 800feec:	f7fc fa32 	bl	800c354 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )//非延时输出
 800fef0:	4b2f      	ldr	r3, [pc, #188]	; (800ffb0 <VSET_enter+0x110>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d10a      	bne.n	800ff0e <VSET_enter+0x6e>
 800fef8:	4b2e      	ldr	r3, [pc, #184]	; (800ffb4 <VSET_enter+0x114>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d106      	bne.n	800ff0e <VSET_enter+0x6e>
		{
			DAC_Cmd_send(1,4,Set_Voltage);
 800ff00:	4b29      	ldr	r3, [pc, #164]	; (800ffa8 <VSET_enter+0x108>)
 800ff02:	881b      	ldrh	r3, [r3, #0]
 800ff04:	001a      	movs	r2, r3
 800ff06:	2104      	movs	r1, #4
 800ff08:	2001      	movs	r0, #1
 800ff0a:	f7fc fd15 	bl	800c938 <DAC_Cmd_send>
		}

		xyz.coordinates2=1;//change to I set
 800ff0e:	4b2a      	ldr	r3, [pc, #168]	; (800ffb8 <VSET_enter+0x118>)
 800ff10:	2201      	movs	r2, #1
 800ff12:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800ff14:	4b29      	ldr	r3, [pc, #164]	; (800ffbc <VSET_enter+0x11c>)
 800ff16:	2209      	movs	r2, #9
 800ff18:	701a      	strb	r2, [r3, #0]
		Cursor_Position=9;//光标更新
		Keys_Encoder_Mode= Encoder_Mode;
		Cursor_flash_on();

	}
}
 800ff1a:	e03b      	b.n	800ff94 <VSET_enter+0xf4>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800ff1c:	4b1f      	ldr	r3, [pc, #124]	; (800ff9c <VSET_enter+0xfc>)
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d137      	bne.n	800ff94 <VSET_enter+0xf4>
		Keys_Encoder_Mode = Encoder_Mode;   //恢复为编码器输入模式
 800ff24:	4b1d      	ldr	r3, [pc, #116]	; (800ff9c <VSET_enter+0xfc>)
 800ff26:	2201      	movs	r2, #1
 800ff28:	701a      	strb	r2, [r3, #0]
		Set_Voltage = String_to_float(&String_Voltage[0])*100;
 800ff2a:	4b1d      	ldr	r3, [pc, #116]	; (800ffa0 <VSET_enter+0x100>)
 800ff2c:	0018      	movs	r0, r3
 800ff2e:	f7fe facb 	bl	800e4c8 <String_to_float>
 800ff32:	1c03      	adds	r3, r0, #0
 800ff34:	491b      	ldr	r1, [pc, #108]	; (800ffa4 <VSET_enter+0x104>)
 800ff36:	1c18      	adds	r0, r3, #0
 800ff38:	f7f0 fe92 	bl	8000c60 <__aeabi_fmul>
 800ff3c:	1c03      	adds	r3, r0, #0
 800ff3e:	1c18      	adds	r0, r3, #0
 800ff40:	f7f0 faf2 	bl	8000528 <__aeabi_f2uiz>
 800ff44:	0003      	movs	r3, r0
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	4b17      	ldr	r3, [pc, #92]	; (800ffa8 <VSET_enter+0x108>)
 800ff4a:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000) Set_Voltage = 15000;  //限制电压最大值为150V
 800ff4c:	4b16      	ldr	r3, [pc, #88]	; (800ffa8 <VSET_enter+0x108>)
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	4a16      	ldr	r2, [pc, #88]	; (800ffac <VSET_enter+0x10c>)
 800ff52:	4293      	cmp	r3, r2
 800ff54:	d902      	bls.n	800ff5c <VSET_enter+0xbc>
 800ff56:	4b14      	ldr	r3, [pc, #80]	; (800ffa8 <VSET_enter+0x108>)
 800ff58:	4a14      	ldr	r2, [pc, #80]	; (800ffac <VSET_enter+0x10c>)
 800ff5a:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800ff5c:	f7fc f9fa 	bl	800c354 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )
 800ff60:	4b13      	ldr	r3, [pc, #76]	; (800ffb0 <VSET_enter+0x110>)
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d10a      	bne.n	800ff7e <VSET_enter+0xde>
 800ff68:	4b12      	ldr	r3, [pc, #72]	; (800ffb4 <VSET_enter+0x114>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d106      	bne.n	800ff7e <VSET_enter+0xde>
			DAC_Cmd_send(1,4,Set_Voltage);
 800ff70:	4b0d      	ldr	r3, [pc, #52]	; (800ffa8 <VSET_enter+0x108>)
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	001a      	movs	r2, r3
 800ff76:	2104      	movs	r1, #4
 800ff78:	2001      	movs	r0, #1
 800ff7a:	f7fc fcdd 	bl	800c938 <DAC_Cmd_send>
		xyz.coordinates2=1;//change to I set
 800ff7e:	4b0e      	ldr	r3, [pc, #56]	; (800ffb8 <VSET_enter+0x118>)
 800ff80:	2201      	movs	r2, #1
 800ff82:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800ff84:	4b0d      	ldr	r3, [pc, #52]	; (800ffbc <VSET_enter+0x11c>)
 800ff86:	2209      	movs	r2, #9
 800ff88:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode= Encoder_Mode;
 800ff8a:	4b04      	ldr	r3, [pc, #16]	; (800ff9c <VSET_enter+0xfc>)
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800ff90:	f004 fc56 	bl	8014840 <Cursor_flash_on>
}
 800ff94:	46c0      	nop			; (mov r8, r8)
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	46c0      	nop			; (mov r8, r8)
 800ff9c:	20002fd2 	.word	0x20002fd2
 800ffa0:	20003058 	.word	0x20003058
 800ffa4:	42c80000 	.word	0x42c80000
 800ffa8:	20002fd8 	.word	0x20002fd8
 800ffac:	00003a98 	.word	0x00003a98
 800ffb0:	20003b1d 	.word	0x20003b1d
 800ffb4:	20003b75 	.word	0x20003b75
 800ffb8:	20003b8c 	.word	0x20003b8c
 800ffbc:	20003b22 	.word	0x20003b22

0800ffc0 <Password_enter>:

static void Password_enter(void)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
	if(strcmp(String_Password,Password)==0)//密码正确
 800ffc6:	4a27      	ldr	r2, [pc, #156]	; (8010064 <Password_enter+0xa4>)
 800ffc8:	4b27      	ldr	r3, [pc, #156]	; (8010068 <Password_enter+0xa8>)
 800ffca:	0011      	movs	r1, r2
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f7f0 f897 	bl	8000100 <strcmp>
 800ffd2:	1e03      	subs	r3, r0, #0
 800ffd4:	d122      	bne.n	801001c <Password_enter+0x5c>
	{
		Third_Menu_Flag=1;
 800ffd6:	4b25      	ldr	r3, [pc, #148]	; (801006c <Password_enter+0xac>)
 800ffd8:	2201      	movs	r2, #1
 800ffda:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=2;//更新为显示隐藏界面
 800ffdc:	4b24      	ldr	r3, [pc, #144]	; (8010070 <Password_enter+0xb0>)
 800ffde:	2202      	movs	r2, #2
 800ffe0:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 800ffe2:	4b24      	ldr	r3, [pc, #144]	; (8010074 <Password_enter+0xb4>)
 800ffe4:	220a      	movs	r2, #10
 800ffe6:	701a      	strb	r2, [r3, #0]
		Cursor_flash_off();
 800ffe8:	f004 fbf4 	bl	80147d4 <Cursor_flash_off>

		for(uint8_t i=0;i<6;i++)
 800ffec:	1dfb      	adds	r3, r7, #7
 800ffee:	2200      	movs	r2, #0
 800fff0:	701a      	strb	r2, [r3, #0]
 800fff2:	e00e      	b.n	8010012 <Password_enter+0x52>
		{
			String_Password_mask[i]=' ';
 800fff4:	1dfb      	adds	r3, r7, #7
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	4a1f      	ldr	r2, [pc, #124]	; (8010078 <Password_enter+0xb8>)
 800fffa:	2120      	movs	r1, #32
 800fffc:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 800fffe:	1dfb      	adds	r3, r7, #7
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	4a19      	ldr	r2, [pc, #100]	; (8010068 <Password_enter+0xa8>)
 8010004:	2120      	movs	r1, #32
 8010006:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 8010008:	1dfb      	adds	r3, r7, #7
 801000a:	781a      	ldrb	r2, [r3, #0]
 801000c:	1dfb      	adds	r3, r7, #7
 801000e:	3201      	adds	r2, #1
 8010010:	701a      	strb	r2, [r3, #0]
 8010012:	1dfb      	adds	r3, r7, #7
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	2b05      	cmp	r3, #5
 8010018:	d9ec      	bls.n	800fff4 <Password_enter+0x34>
			String_Password[i]=' ';
		}

	}

}
 801001a:	e01f      	b.n	801005c <Password_enter+0x9c>
		Third_Menu_Flag=1;
 801001c:	4b13      	ldr	r3, [pc, #76]	; (801006c <Password_enter+0xac>)
 801001e:	2201      	movs	r2, #1
 8010020:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=1;
 8010022:	4b13      	ldr	r3, [pc, #76]	; (8010070 <Password_enter+0xb0>)
 8010024:	2201      	movs	r2, #1
 8010026:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 8010028:	4b12      	ldr	r3, [pc, #72]	; (8010074 <Password_enter+0xb4>)
 801002a:	220a      	movs	r2, #10
 801002c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<6;i++)
 801002e:	1dbb      	adds	r3, r7, #6
 8010030:	2200      	movs	r2, #0
 8010032:	701a      	strb	r2, [r3, #0]
 8010034:	e00e      	b.n	8010054 <Password_enter+0x94>
			String_Password_mask[i]=' ';
 8010036:	1dbb      	adds	r3, r7, #6
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	4a0f      	ldr	r2, [pc, #60]	; (8010078 <Password_enter+0xb8>)
 801003c:	2120      	movs	r1, #32
 801003e:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 8010040:	1dbb      	adds	r3, r7, #6
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	4a08      	ldr	r2, [pc, #32]	; (8010068 <Password_enter+0xa8>)
 8010046:	2120      	movs	r1, #32
 8010048:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 801004a:	1dbb      	adds	r3, r7, #6
 801004c:	781a      	ldrb	r2, [r3, #0]
 801004e:	1dbb      	adds	r3, r7, #6
 8010050:	3201      	adds	r2, #1
 8010052:	701a      	strb	r2, [r3, #0]
 8010054:	1dbb      	adds	r3, r7, #6
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	2b05      	cmp	r3, #5
 801005a:	d9ec      	bls.n	8010036 <Password_enter+0x76>
}
 801005c:	46c0      	nop			; (mov r8, r8)
 801005e:	46bd      	mov	sp, r7
 8010060:	b002      	add	sp, #8
 8010062:	bd80      	pop	{r7, pc}
 8010064:	08018c50 	.word	0x08018c50
 8010068:	200030a4 	.word	0x200030a4
 801006c:	20002fd0 	.word	0x20002fd0
 8010070:	20003b8c 	.word	0x20003b8c
 8010074:	20003b22 	.word	0x20003b22
 8010078:	200030ac 	.word	0x200030ac

0801007c <IRateSET_enter>:

static void IRateSET_enter(void)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_I_Slope=String_To_Float(&String_I_Rate[0])*10;
 8010080:	4b13      	ldr	r3, [pc, #76]	; (80100d0 <IRateSET_enter+0x54>)
 8010082:	0018      	movs	r0, r3
 8010084:	f7fe fb74 	bl	800e770 <String_To_Float>
 8010088:	1c03      	adds	r3, r0, #0
 801008a:	4912      	ldr	r1, [pc, #72]	; (80100d4 <IRateSET_enter+0x58>)
 801008c:	1c18      	adds	r0, r3, #0
 801008e:	f7f0 fde7 	bl	8000c60 <__aeabi_fmul>
 8010092:	1c03      	adds	r3, r0, #0
 8010094:	1c18      	adds	r0, r3, #0
 8010096:	f7f0 fa47 	bl	8000528 <__aeabi_f2uiz>
 801009a:	0003      	movs	r3, r0
 801009c:	b2da      	uxtb	r2, r3
 801009e:	4b0e      	ldr	r3, [pc, #56]	; (80100d8 <IRateSET_enter+0x5c>)
 80100a0:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_I_Slope);
 80100a2:	4b0d      	ldr	r3, [pc, #52]	; (80100d8 <IRateSET_enter+0x5c>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	001a      	movs	r2, r3
 80100aa:	2108      	movs	r1, #8
 80100ac:	2001      	movs	r0, #1
 80100ae:	f7fc fc43 	bl	800c938 <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 80100b2:	f7fc fa97 	bl	800c5e4 <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 80100b6:	4b09      	ldr	r3, [pc, #36]	; (80100dc <IRateSET_enter+0x60>)
 80100b8:	2201      	movs	r2, #1
 80100ba:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=2;//完成后设定，进入下一设定
 80100bc:	4b08      	ldr	r3, [pc, #32]	; (80100e0 <IRateSET_enter+0x64>)
 80100be:	2202      	movs	r2, #2
 80100c0:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 80100c2:	4b08      	ldr	r3, [pc, #32]	; (80100e4 <IRateSET_enter+0x68>)
 80100c4:	2206      	movs	r2, #6
 80100c6:	701a      	strb	r2, [r3, #0]


}
 80100c8:	46c0      	nop			; (mov r8, r8)
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	46c0      	nop			; (mov r8, r8)
 80100d0:	20003040 	.word	0x20003040
 80100d4:	41200000 	.word	0x41200000
 80100d8:	20003b2d 	.word	0x20003b2d
 80100dc:	20002fd0 	.word	0x20002fd0
 80100e0:	20003b8c 	.word	0x20003b8c
 80100e4:	20003b22 	.word	0x20003b22

080100e8 <VRateSET_enter>:

static void VRateSET_enter(void)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_V_Slope=String_To_Float(&String_V_Rate[0])*10;
 80100ec:	4b14      	ldr	r3, [pc, #80]	; (8010140 <VRateSET_enter+0x58>)
 80100ee:	0018      	movs	r0, r3
 80100f0:	f7fe fb3e 	bl	800e770 <String_To_Float>
 80100f4:	1c03      	adds	r3, r0, #0
 80100f6:	4913      	ldr	r1, [pc, #76]	; (8010144 <VRateSET_enter+0x5c>)
 80100f8:	1c18      	adds	r0, r3, #0
 80100fa:	f7f0 fdb1 	bl	8000c60 <__aeabi_fmul>
 80100fe:	1c03      	adds	r3, r0, #0
 8010100:	1c18      	adds	r0, r3, #0
 8010102:	f7f0 fa11 	bl	8000528 <__aeabi_f2uiz>
 8010106:	0003      	movs	r3, r0
 8010108:	b2da      	uxtb	r2, r3
 801010a:	4b0f      	ldr	r3, [pc, #60]	; (8010148 <VRateSET_enter+0x60>)
 801010c:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,7,Set_V_Slope);
 801010e:	4b0e      	ldr	r3, [pc, #56]	; (8010148 <VRateSET_enter+0x60>)
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	b29b      	uxth	r3, r3
 8010114:	001a      	movs	r2, r3
 8010116:	2107      	movs	r1, #7
 8010118:	2001      	movs	r0, #1
 801011a:	f7fc fc0d 	bl	800c938 <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 801011e:	f7fc fa61 	bl	800c5e4 <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 8010122:	4b0a      	ldr	r3, [pc, #40]	; (801014c <VRateSET_enter+0x64>)
 8010124:	2201      	movs	r2, #1
 8010126:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=0;//完成后设定，返回上一级
 8010128:	4b09      	ldr	r3, [pc, #36]	; (8010150 <VRateSET_enter+0x68>)
 801012a:	2200      	movs	r2, #0
 801012c:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 801012e:	4b09      	ldr	r3, [pc, #36]	; (8010154 <VRateSET_enter+0x6c>)
 8010130:	2206      	movs	r2, #6
 8010132:	701a      	strb	r2, [r3, #0]
	Cursor_flash_off();
 8010134:	f004 fb4e 	bl	80147d4 <Cursor_flash_off>
}
 8010138:	46c0      	nop			; (mov r8, r8)
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	46c0      	nop			; (mov r8, r8)
 8010140:	2000304c 	.word	0x2000304c
 8010144:	41200000 	.word	0x41200000
 8010148:	20003b2c 	.word	0x20003b2c
 801014c:	20002fd0 	.word	0x20002fd0
 8010150:	20003b8c 	.word	0x20003b8c
 8010154:	20003b22 	.word	0x20003b22

08010158 <Save_enter>:

static void Save_enter(void)
{
 8010158:	b5b0      	push	{r4, r5, r7, lr}
 801015a:	af00      	add	r7, sp, #0
	Recall_Save_Current[Recall_Save_Number]=String_To_Float(String_Save_I);
	*/


	/*新的实现*/
	Recall_Save_Voltage[Recall_Save_Number]=String_to_float(String_Save_V);//将交互界面的数值进行转换
 801015c:	4b20      	ldr	r3, [pc, #128]	; (80101e0 <Save_enter+0x88>)
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	001c      	movs	r4, r3
 8010162:	4b20      	ldr	r3, [pc, #128]	; (80101e4 <Save_enter+0x8c>)
 8010164:	0018      	movs	r0, r3
 8010166:	f7fe f9af 	bl	800e4c8 <String_to_float>
 801016a:	1c01      	adds	r1, r0, #0
 801016c:	4b1e      	ldr	r3, [pc, #120]	; (80101e8 <Save_enter+0x90>)
 801016e:	00a2      	lsls	r2, r4, #2
 8010170:	50d1      	str	r1, [r2, r3]
	Recall_Save_Current[Recall_Save_Number]=String_to_float(String_Save_I);
 8010172:	4b1b      	ldr	r3, [pc, #108]	; (80101e0 <Save_enter+0x88>)
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	001c      	movs	r4, r3
 8010178:	4b1c      	ldr	r3, [pc, #112]	; (80101ec <Save_enter+0x94>)
 801017a:	0018      	movs	r0, r3
 801017c:	f7fe f9a4 	bl	800e4c8 <String_to_float>
 8010180:	1c01      	adds	r1, r0, #0
 8010182:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <Save_enter+0x98>)
 8010184:	00a2      	lsls	r2, r4, #2
 8010186:	50d1      	str	r1, [r2, r3]


	Recall_Save_Power[Recall_Save_Number]=Recall_Save_Voltage[Recall_Save_Number]*Recall_Save_Current[Recall_Save_Number];
 8010188:	4b15      	ldr	r3, [pc, #84]	; (80101e0 <Save_enter+0x88>)
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	001a      	movs	r2, r3
 801018e:	4b16      	ldr	r3, [pc, #88]	; (80101e8 <Save_enter+0x90>)
 8010190:	0092      	lsls	r2, r2, #2
 8010192:	58d0      	ldr	r0, [r2, r3]
 8010194:	4b12      	ldr	r3, [pc, #72]	; (80101e0 <Save_enter+0x88>)
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	001a      	movs	r2, r3
 801019a:	4b15      	ldr	r3, [pc, #84]	; (80101f0 <Save_enter+0x98>)
 801019c:	0092      	lsls	r2, r2, #2
 801019e:	58d2      	ldr	r2, [r2, r3]
 80101a0:	4b0f      	ldr	r3, [pc, #60]	; (80101e0 <Save_enter+0x88>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	001c      	movs	r4, r3
 80101a6:	1c11      	adds	r1, r2, #0
 80101a8:	f7f0 fd5a 	bl	8000c60 <__aeabi_fmul>
 80101ac:	1c03      	adds	r3, r0, #0
 80101ae:	1c19      	adds	r1, r3, #0
 80101b0:	4b10      	ldr	r3, [pc, #64]	; (80101f4 <Save_enter+0x9c>)
 80101b2:	00a2      	lsls	r2, r4, #2
 80101b4:	50d1      	str	r1, [r2, r3]
	AT25_Save_Recall_Save_VI(Recall_Save_Number);
 80101b6:	4b0a      	ldr	r3, [pc, #40]	; (80101e0 <Save_enter+0x88>)
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	0018      	movs	r0, r3
 80101bc:	f7fc f910 	bl	800c3e0 <AT25_Save_Recall_Save_VI>

	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 80101c0:	4b0d      	ldr	r3, [pc, #52]	; (80101f8 <Save_enter+0xa0>)
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d105      	bne.n	80101d4 <Save_enter+0x7c>
 80101c8:	4b0c      	ldr	r3, [pc, #48]	; (80101fc <Save_enter+0xa4>)
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d101      	bne.n	80101d4 <Save_enter+0x7c>
	{
		power_on();
 80101d0:	f7fc fcac 	bl	800cb2c <power_on>
	}
	Cursor_Position=0;
 80101d4:	4b0a      	ldr	r3, [pc, #40]	; (8010200 <Save_enter+0xa8>)
 80101d6:	2200      	movs	r2, #0
 80101d8:	701a      	strb	r2, [r3, #0]
}
 80101da:	46c0      	nop			; (mov r8, r8)
 80101dc:	46bd      	mov	sp, r7
 80101de:	bdb0      	pop	{r4, r5, r7, pc}
 80101e0:	20003b21 	.word	0x20003b21
 80101e4:	2000301c 	.word	0x2000301c
 80101e8:	20003ba4 	.word	0x20003ba4
 80101ec:	20003028 	.word	0x20003028
 80101f0:	20003bcc 	.word	0x20003bcc
 80101f4:	20003bf4 	.word	0x20003bf4
 80101f8:	20003b1d 	.word	0x20003b1d
 80101fc:	20003b75 	.word	0x20003b75
 8010200:	20003b22 	.word	0x20003b22

08010204 <Load_enter>:

static void Load_enter(void)
{
 8010204:	b5b0      	push	{r4, r5, r7, lr}
 8010206:	af00      	add	r7, sp, #0

	xyz.coordinates3=1;
 8010208:	4b2e      	ldr	r3, [pc, #184]	; (80102c4 <Load_enter+0xc0>)
 801020a:	2201      	movs	r2, #1
 801020c:	609a      	str	r2, [r3, #8]
	Recall_Save_Voltage[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 801020e:	4b2e      	ldr	r3, [pc, #184]	; (80102c8 <Load_enter+0xc4>)
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	0018      	movs	r0, r3
 8010214:	f7fc f950 	bl	800c4b8 <AT25_Save_Recall_Recall_VI>
 8010218:	0003      	movs	r3, r0
 801021a:	0018      	movs	r0, r3
 801021c:	f7f2 fdf2 	bl	8002e04 <__aeabi_i2d>
 8010220:	2200      	movs	r2, #0
 8010222:	4b2a      	ldr	r3, [pc, #168]	; (80102cc <Load_enter+0xc8>)
 8010224:	f7f1 fb9a 	bl	800195c <__aeabi_ddiv>
 8010228:	0002      	movs	r2, r0
 801022a:	000b      	movs	r3, r1
 801022c:	4926      	ldr	r1, [pc, #152]	; (80102c8 <Load_enter+0xc4>)
 801022e:	7809      	ldrb	r1, [r1, #0]
 8010230:	000c      	movs	r4, r1
 8010232:	0010      	movs	r0, r2
 8010234:	0019      	movs	r1, r3
 8010236:	f7f2 fe83 	bl	8002f40 <__aeabi_d2f>
 801023a:	1c01      	adds	r1, r0, #0
 801023c:	4b24      	ldr	r3, [pc, #144]	; (80102d0 <Load_enter+0xcc>)
 801023e:	00a2      	lsls	r2, r4, #2
 8010240:	50d1      	str	r1, [r2, r3]
	Set_Voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 8010242:	4b21      	ldr	r3, [pc, #132]	; (80102c8 <Load_enter+0xc4>)
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	0018      	movs	r0, r3
 8010248:	f7fc f936 	bl	800c4b8 <AT25_Save_Recall_Recall_VI>
 801024c:	0003      	movs	r3, r0
 801024e:	001a      	movs	r2, r3
 8010250:	4b20      	ldr	r3, [pc, #128]	; (80102d4 <Load_enter+0xd0>)
 8010252:	801a      	strh	r2, [r3, #0]


	xyz.coordinates3=2;
 8010254:	4b1b      	ldr	r3, [pc, #108]	; (80102c4 <Load_enter+0xc0>)
 8010256:	2202      	movs	r2, #2
 8010258:	609a      	str	r2, [r3, #8]
	Recall_Save_Current[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 801025a:	4b1b      	ldr	r3, [pc, #108]	; (80102c8 <Load_enter+0xc4>)
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	0018      	movs	r0, r3
 8010260:	f7fc f92a 	bl	800c4b8 <AT25_Save_Recall_Recall_VI>
 8010264:	0003      	movs	r3, r0
 8010266:	0018      	movs	r0, r3
 8010268:	f7f2 fdcc 	bl	8002e04 <__aeabi_i2d>
 801026c:	2200      	movs	r2, #0
 801026e:	4b17      	ldr	r3, [pc, #92]	; (80102cc <Load_enter+0xc8>)
 8010270:	f7f1 fb74 	bl	800195c <__aeabi_ddiv>
 8010274:	0002      	movs	r2, r0
 8010276:	000b      	movs	r3, r1
 8010278:	4913      	ldr	r1, [pc, #76]	; (80102c8 <Load_enter+0xc4>)
 801027a:	7809      	ldrb	r1, [r1, #0]
 801027c:	000c      	movs	r4, r1
 801027e:	0010      	movs	r0, r2
 8010280:	0019      	movs	r1, r3
 8010282:	f7f2 fe5d 	bl	8002f40 <__aeabi_d2f>
 8010286:	1c01      	adds	r1, r0, #0
 8010288:	4b13      	ldr	r3, [pc, #76]	; (80102d8 <Load_enter+0xd4>)
 801028a:	00a2      	lsls	r2, r4, #2
 801028c:	50d1      	str	r1, [r2, r3]
	Set_Current=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 801028e:	4b0e      	ldr	r3, [pc, #56]	; (80102c8 <Load_enter+0xc4>)
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	0018      	movs	r0, r3
 8010294:	f7fc f910 	bl	800c4b8 <AT25_Save_Recall_Recall_VI>
 8010298:	0003      	movs	r3, r0
 801029a:	001a      	movs	r2, r3
 801029c:	4b0f      	ldr	r3, [pc, #60]	; (80102dc <Load_enter+0xd8>)
 801029e:	801a      	strh	r2, [r3, #0]


	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 80102a0:	4b0f      	ldr	r3, [pc, #60]	; (80102e0 <Load_enter+0xdc>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d105      	bne.n	80102b4 <Load_enter+0xb0>
 80102a8:	4b0e      	ldr	r3, [pc, #56]	; (80102e4 <Load_enter+0xe0>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d101      	bne.n	80102b4 <Load_enter+0xb0>
	{
		power_on();
 80102b0:	f7fc fc3c 	bl	800cb2c <power_on>
	}

	Cursor_Position=0;//光标复位
 80102b4:	4b0c      	ldr	r3, [pc, #48]	; (80102e8 <Load_enter+0xe4>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	701a      	strb	r2, [r3, #0]
	Cursor_flash_off();
 80102ba:	f004 fa8b 	bl	80147d4 <Cursor_flash_off>

}
 80102be:	46c0      	nop			; (mov r8, r8)
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bdb0      	pop	{r4, r5, r7, pc}
 80102c4:	20003b8c 	.word	0x20003b8c
 80102c8:	20003b21 	.word	0x20003b21
 80102cc:	40590000 	.word	0x40590000
 80102d0:	20003ba4 	.word	0x20003ba4
 80102d4:	20002fd8 	.word	0x20002fd8
 80102d8:	20003bcc 	.word	0x20003bcc
 80102dc:	20002fda 	.word	0x20002fda
 80102e0:	20003b1d 	.word	0x20003b1d
 80102e4:	20003b75 	.word	0x20003b75
 80102e8:	20003b22 	.word	0x20003b22

080102ec <Delay_enter>:

static void Delay_enter(void)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	af00      	add	r7, sp, #0

	Delay_s=(String_Delay[0] - '0') * 1000 + (String_Delay[1] - '0')*100+ (String_Delay[2] - '0')*10+ (String_Delay[3] - '0');
 80102f0:	4b35      	ldr	r3, [pc, #212]	; (80103c8 <Delay_enter+0xdc>)
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	3b30      	subs	r3, #48	; 0x30
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	22fa      	movs	r2, #250	; 0xfa
 80102fa:	0092      	lsls	r2, r2, #2
 80102fc:	4353      	muls	r3, r2
 80102fe:	b29a      	uxth	r2, r3
 8010300:	4b31      	ldr	r3, [pc, #196]	; (80103c8 <Delay_enter+0xdc>)
 8010302:	785b      	ldrb	r3, [r3, #1]
 8010304:	3b30      	subs	r3, #48	; 0x30
 8010306:	b29b      	uxth	r3, r3
 8010308:	2164      	movs	r1, #100	; 0x64
 801030a:	434b      	muls	r3, r1
 801030c:	b29b      	uxth	r3, r3
 801030e:	18d3      	adds	r3, r2, r3
 8010310:	b29a      	uxth	r2, r3
 8010312:	4b2d      	ldr	r3, [pc, #180]	; (80103c8 <Delay_enter+0xdc>)
 8010314:	789b      	ldrb	r3, [r3, #2]
 8010316:	3b30      	subs	r3, #48	; 0x30
 8010318:	b29b      	uxth	r3, r3
 801031a:	1c19      	adds	r1, r3, #0
 801031c:	0089      	lsls	r1, r1, #2
 801031e:	18cb      	adds	r3, r1, r3
 8010320:	18db      	adds	r3, r3, r3
 8010322:	b29b      	uxth	r3, r3
 8010324:	18d3      	adds	r3, r2, r3
 8010326:	b29a      	uxth	r2, r3
 8010328:	4b27      	ldr	r3, [pc, #156]	; (80103c8 <Delay_enter+0xdc>)
 801032a:	78db      	ldrb	r3, [r3, #3]
 801032c:	b29b      	uxth	r3, r3
 801032e:	18d3      	adds	r3, r2, r3
 8010330:	b29b      	uxth	r3, r3
 8010332:	3b30      	subs	r3, #48	; 0x30
 8010334:	b29a      	uxth	r2, r3
 8010336:	4b25      	ldr	r3, [pc, #148]	; (80103cc <Delay_enter+0xe0>)
 8010338:	801a      	strh	r2, [r3, #0]
	Delay_ms=(String_Delay[5] - '0') * 100 + (String_Delay[6] - '0')*10+ (String_Delay[7] - '0');
 801033a:	4b23      	ldr	r3, [pc, #140]	; (80103c8 <Delay_enter+0xdc>)
 801033c:	795b      	ldrb	r3, [r3, #5]
 801033e:	3b30      	subs	r3, #48	; 0x30
 8010340:	b29b      	uxth	r3, r3
 8010342:	2264      	movs	r2, #100	; 0x64
 8010344:	4353      	muls	r3, r2
 8010346:	b29a      	uxth	r2, r3
 8010348:	4b1f      	ldr	r3, [pc, #124]	; (80103c8 <Delay_enter+0xdc>)
 801034a:	799b      	ldrb	r3, [r3, #6]
 801034c:	3b30      	subs	r3, #48	; 0x30
 801034e:	b29b      	uxth	r3, r3
 8010350:	1c19      	adds	r1, r3, #0
 8010352:	0089      	lsls	r1, r1, #2
 8010354:	18cb      	adds	r3, r1, r3
 8010356:	18db      	adds	r3, r3, r3
 8010358:	b29b      	uxth	r3, r3
 801035a:	18d3      	adds	r3, r2, r3
 801035c:	b29a      	uxth	r2, r3
 801035e:	4b1a      	ldr	r3, [pc, #104]	; (80103c8 <Delay_enter+0xdc>)
 8010360:	79db      	ldrb	r3, [r3, #7]
 8010362:	b29b      	uxth	r3, r3
 8010364:	18d3      	adds	r3, r2, r3
 8010366:	b29b      	uxth	r3, r3
 8010368:	3b30      	subs	r3, #48	; 0x30
 801036a:	b29a      	uxth	r2, r3
 801036c:	4b18      	ldr	r3, [pc, #96]	; (80103d0 <Delay_enter+0xe4>)
 801036e:	801a      	strh	r2, [r3, #0]

	Keys_Encoder_Mode = Encoder_Mode;
 8010370:	4b18      	ldr	r3, [pc, #96]	; (80103d4 <Delay_enter+0xe8>)
 8010372:	2201      	movs	r2, #1
 8010374:	701a      	strb	r2, [r3, #0]
	if((Delay_s == 0) && (Delay_ms == 0)) Delay_Function_On_Off = Delay_Function_Off;
 8010376:	4b15      	ldr	r3, [pc, #84]	; (80103cc <Delay_enter+0xe0>)
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d107      	bne.n	801038e <Delay_enter+0xa2>
 801037e:	4b14      	ldr	r3, [pc, #80]	; (80103d0 <Delay_enter+0xe4>)
 8010380:	881b      	ldrh	r3, [r3, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d103      	bne.n	801038e <Delay_enter+0xa2>
 8010386:	4b14      	ldr	r3, [pc, #80]	; (80103d8 <Delay_enter+0xec>)
 8010388:	2200      	movs	r2, #0
 801038a:	701a      	strb	r2, [r3, #0]
 801038c:	e002      	b.n	8010394 <Delay_enter+0xa8>
	else    							  Delay_Function_On_Off = Delay_Function_On;
 801038e:	4b12      	ldr	r3, [pc, #72]	; (80103d8 <Delay_enter+0xec>)
 8010390:	2201      	movs	r2, #1
 8010392:	701a      	strb	r2, [r3, #0]

	AT25_Save_Delay();
 8010394:	f7fc f8d0 	bl	800c538 <AT25_Save_Delay>

	Third_Menu_Flag=1;
 8010398:	4b10      	ldr	r3, [pc, #64]	; (80103dc <Delay_enter+0xf0>)
 801039a:	2201      	movs	r2, #1
 801039c:	701a      	strb	r2, [r3, #0]

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 801039e:	4b10      	ldr	r3, [pc, #64]	; (80103e0 <Delay_enter+0xf4>)
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	2b03      	cmp	r3, #3
 80103a4:	d103      	bne.n	80103ae <Delay_enter+0xc2>
 80103a6:	4b0e      	ldr	r3, [pc, #56]	; (80103e0 <Delay_enter+0xf4>)
 80103a8:	2201      	movs	r2, #1
 80103aa:	609a      	str	r2, [r3, #8]
 80103ac:	e004      	b.n	80103b8 <Delay_enter+0xcc>
	else xyz.coordinates3++;//完成后设定，进入下一级
 80103ae:	4b0c      	ldr	r3, [pc, #48]	; (80103e0 <Delay_enter+0xf4>)
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	1c5a      	adds	r2, r3, #1
 80103b4:	4b0a      	ldr	r3, [pc, #40]	; (80103e0 <Delay_enter+0xf4>)
 80103b6:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 80103b8:	4b0a      	ldr	r3, [pc, #40]	; (80103e4 <Delay_enter+0xf8>)
 80103ba:	2206      	movs	r2, #6
 80103bc:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 80103be:	f004 fa3f 	bl	8014840 <Cursor_flash_on>

}
 80103c2:	46c0      	nop			; (mov r8, r8)
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	20003010 	.word	0x20003010
 80103cc:	20003b28 	.word	0x20003b28
 80103d0:	20003b2a 	.word	0x20003b2a
 80103d4:	20002fd2 	.word	0x20002fd2
 80103d8:	20003b75 	.word	0x20003b75
 80103dc:	20002fd0 	.word	0x20002fd0
 80103e0:	20003b8c 	.word	0x20003b8c
 80103e4:	20003b22 	.word	0x20003b22

080103e8 <Cycle_enter>:

static void Cycle_enter(void)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	af00      	add	r7, sp, #0
	//计算Cycle功能的导通和关断时间，加以限制并存储
	Cycle_On_s = (String_Cycle_On[0] - '0') * 1000 + (String_Cycle_On[1] - '0') * 100 + (String_Cycle_On[2] - '0') * 10 + (String_Cycle_On[3] - '0');
 80103ec:	4b81      	ldr	r3, [pc, #516]	; (80105f4 <Cycle_enter+0x20c>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	3b30      	subs	r3, #48	; 0x30
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	22fa      	movs	r2, #250	; 0xfa
 80103f6:	0092      	lsls	r2, r2, #2
 80103f8:	4353      	muls	r3, r2
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	4b7d      	ldr	r3, [pc, #500]	; (80105f4 <Cycle_enter+0x20c>)
 80103fe:	785b      	ldrb	r3, [r3, #1]
 8010400:	3b30      	subs	r3, #48	; 0x30
 8010402:	b29b      	uxth	r3, r3
 8010404:	2164      	movs	r1, #100	; 0x64
 8010406:	434b      	muls	r3, r1
 8010408:	b29b      	uxth	r3, r3
 801040a:	18d3      	adds	r3, r2, r3
 801040c:	b29a      	uxth	r2, r3
 801040e:	4b79      	ldr	r3, [pc, #484]	; (80105f4 <Cycle_enter+0x20c>)
 8010410:	789b      	ldrb	r3, [r3, #2]
 8010412:	3b30      	subs	r3, #48	; 0x30
 8010414:	b29b      	uxth	r3, r3
 8010416:	1c19      	adds	r1, r3, #0
 8010418:	0089      	lsls	r1, r1, #2
 801041a:	18cb      	adds	r3, r1, r3
 801041c:	18db      	adds	r3, r3, r3
 801041e:	b29b      	uxth	r3, r3
 8010420:	18d3      	adds	r3, r2, r3
 8010422:	b29a      	uxth	r2, r3
 8010424:	4b73      	ldr	r3, [pc, #460]	; (80105f4 <Cycle_enter+0x20c>)
 8010426:	78db      	ldrb	r3, [r3, #3]
 8010428:	b29b      	uxth	r3, r3
 801042a:	18d3      	adds	r3, r2, r3
 801042c:	b29b      	uxth	r3, r3
 801042e:	3b30      	subs	r3, #48	; 0x30
 8010430:	b29a      	uxth	r2, r3
 8010432:	4b71      	ldr	r3, [pc, #452]	; (80105f8 <Cycle_enter+0x210>)
 8010434:	801a      	strh	r2, [r3, #0]
	Cycle_On_ms = (String_Cycle_On[5] - '0') * 100 + (String_Cycle_On[6] - '0') * 10 + (String_Cycle_On[7] - '0');
 8010436:	4b6f      	ldr	r3, [pc, #444]	; (80105f4 <Cycle_enter+0x20c>)
 8010438:	795b      	ldrb	r3, [r3, #5]
 801043a:	3b30      	subs	r3, #48	; 0x30
 801043c:	b29b      	uxth	r3, r3
 801043e:	2264      	movs	r2, #100	; 0x64
 8010440:	4353      	muls	r3, r2
 8010442:	b29a      	uxth	r2, r3
 8010444:	4b6b      	ldr	r3, [pc, #428]	; (80105f4 <Cycle_enter+0x20c>)
 8010446:	799b      	ldrb	r3, [r3, #6]
 8010448:	3b30      	subs	r3, #48	; 0x30
 801044a:	b29b      	uxth	r3, r3
 801044c:	1c19      	adds	r1, r3, #0
 801044e:	0089      	lsls	r1, r1, #2
 8010450:	18cb      	adds	r3, r1, r3
 8010452:	18db      	adds	r3, r3, r3
 8010454:	b29b      	uxth	r3, r3
 8010456:	18d3      	adds	r3, r2, r3
 8010458:	b29a      	uxth	r2, r3
 801045a:	4b66      	ldr	r3, [pc, #408]	; (80105f4 <Cycle_enter+0x20c>)
 801045c:	79db      	ldrb	r3, [r3, #7]
 801045e:	b29b      	uxth	r3, r3
 8010460:	18d3      	adds	r3, r2, r3
 8010462:	b29b      	uxth	r3, r3
 8010464:	3b30      	subs	r3, #48	; 0x30
 8010466:	b29a      	uxth	r2, r3
 8010468:	4b64      	ldr	r3, [pc, #400]	; (80105fc <Cycle_enter+0x214>)
 801046a:	801a      	strh	r2, [r3, #0]

	Cycle_Close_s = (String_Cycle_Close[0] - '0') * 1000 + (String_Cycle_Close[1] - '0') * 100 + (String_Cycle_Close[2] - '0') * 10 + (String_Cycle_Close[3] - '0');
 801046c:	4b64      	ldr	r3, [pc, #400]	; (8010600 <Cycle_enter+0x218>)
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	3b30      	subs	r3, #48	; 0x30
 8010472:	b29b      	uxth	r3, r3
 8010474:	22fa      	movs	r2, #250	; 0xfa
 8010476:	0092      	lsls	r2, r2, #2
 8010478:	4353      	muls	r3, r2
 801047a:	b29a      	uxth	r2, r3
 801047c:	4b60      	ldr	r3, [pc, #384]	; (8010600 <Cycle_enter+0x218>)
 801047e:	785b      	ldrb	r3, [r3, #1]
 8010480:	3b30      	subs	r3, #48	; 0x30
 8010482:	b29b      	uxth	r3, r3
 8010484:	2164      	movs	r1, #100	; 0x64
 8010486:	434b      	muls	r3, r1
 8010488:	b29b      	uxth	r3, r3
 801048a:	18d3      	adds	r3, r2, r3
 801048c:	b29a      	uxth	r2, r3
 801048e:	4b5c      	ldr	r3, [pc, #368]	; (8010600 <Cycle_enter+0x218>)
 8010490:	789b      	ldrb	r3, [r3, #2]
 8010492:	3b30      	subs	r3, #48	; 0x30
 8010494:	b29b      	uxth	r3, r3
 8010496:	1c19      	adds	r1, r3, #0
 8010498:	0089      	lsls	r1, r1, #2
 801049a:	18cb      	adds	r3, r1, r3
 801049c:	18db      	adds	r3, r3, r3
 801049e:	b29b      	uxth	r3, r3
 80104a0:	18d3      	adds	r3, r2, r3
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	4b56      	ldr	r3, [pc, #344]	; (8010600 <Cycle_enter+0x218>)
 80104a6:	78db      	ldrb	r3, [r3, #3]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	18d3      	adds	r3, r2, r3
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	3b30      	subs	r3, #48	; 0x30
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	4b54      	ldr	r3, [pc, #336]	; (8010604 <Cycle_enter+0x21c>)
 80104b4:	801a      	strh	r2, [r3, #0]
	Cycle_Close_ms = (String_Cycle_Close[5] - '0') * 100 + (String_Cycle_Close[6] - '0') * 10 + (String_Cycle_Close[7] - '0');
 80104b6:	4b52      	ldr	r3, [pc, #328]	; (8010600 <Cycle_enter+0x218>)
 80104b8:	795b      	ldrb	r3, [r3, #5]
 80104ba:	3b30      	subs	r3, #48	; 0x30
 80104bc:	b29b      	uxth	r3, r3
 80104be:	2264      	movs	r2, #100	; 0x64
 80104c0:	4353      	muls	r3, r2
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	4b4e      	ldr	r3, [pc, #312]	; (8010600 <Cycle_enter+0x218>)
 80104c6:	799b      	ldrb	r3, [r3, #6]
 80104c8:	3b30      	subs	r3, #48	; 0x30
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	1c19      	adds	r1, r3, #0
 80104ce:	0089      	lsls	r1, r1, #2
 80104d0:	18cb      	adds	r3, r1, r3
 80104d2:	18db      	adds	r3, r3, r3
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	18d3      	adds	r3, r2, r3
 80104d8:	b29a      	uxth	r2, r3
 80104da:	4b49      	ldr	r3, [pc, #292]	; (8010600 <Cycle_enter+0x218>)
 80104dc:	79db      	ldrb	r3, [r3, #7]
 80104de:	b29b      	uxth	r3, r3
 80104e0:	18d3      	adds	r3, r2, r3
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	3b30      	subs	r3, #48	; 0x30
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	4b47      	ldr	r3, [pc, #284]	; (8010608 <Cycle_enter+0x220>)
 80104ea:	801a      	strh	r2, [r3, #0]
	//最短也是5Hz的波
	if ((Cycle_On_s == 0) && (Cycle_On_ms > 0))
 80104ec:	4b42      	ldr	r3, [pc, #264]	; (80105f8 <Cycle_enter+0x210>)
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d109      	bne.n	8010508 <Cycle_enter+0x120>
 80104f4:	4b41      	ldr	r3, [pc, #260]	; (80105fc <Cycle_enter+0x214>)
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d005      	beq.n	8010508 <Cycle_enter+0x120>
	{
		Cycle_On_s = 1;
 80104fc:	4b3e      	ldr	r3, [pc, #248]	; (80105f8 <Cycle_enter+0x210>)
 80104fe:	2201      	movs	r2, #1
 8010500:	801a      	strh	r2, [r3, #0]
		Cycle_On_ms = 0;
 8010502:	4b3e      	ldr	r3, [pc, #248]	; (80105fc <Cycle_enter+0x214>)
 8010504:	2200      	movs	r2, #0
 8010506:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_On_s > 9999) Cycle_On_s = 9999;
 8010508:	4b3b      	ldr	r3, [pc, #236]	; (80105f8 <Cycle_enter+0x210>)
 801050a:	881b      	ldrh	r3, [r3, #0]
 801050c:	4a3f      	ldr	r2, [pc, #252]	; (801060c <Cycle_enter+0x224>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d902      	bls.n	8010518 <Cycle_enter+0x130>
 8010512:	4b39      	ldr	r3, [pc, #228]	; (80105f8 <Cycle_enter+0x210>)
 8010514:	4a3d      	ldr	r2, [pc, #244]	; (801060c <Cycle_enter+0x224>)
 8010516:	801a      	strh	r2, [r3, #0]
	if (Cycle_On_ms > 1000) Cycle_On_ms = 1000;
 8010518:	4b38      	ldr	r3, [pc, #224]	; (80105fc <Cycle_enter+0x214>)
 801051a:	881a      	ldrh	r2, [r3, #0]
 801051c:	23fa      	movs	r3, #250	; 0xfa
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	429a      	cmp	r2, r3
 8010522:	d903      	bls.n	801052c <Cycle_enter+0x144>
 8010524:	4b35      	ldr	r3, [pc, #212]	; (80105fc <Cycle_enter+0x214>)
 8010526:	22fa      	movs	r2, #250	; 0xfa
 8010528:	0092      	lsls	r2, r2, #2
 801052a:	801a      	strh	r2, [r3, #0]
	if ((Cycle_Close_s == 0) && (Cycle_Close_ms > 0))
 801052c:	4b35      	ldr	r3, [pc, #212]	; (8010604 <Cycle_enter+0x21c>)
 801052e:	881b      	ldrh	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d109      	bne.n	8010548 <Cycle_enter+0x160>
 8010534:	4b34      	ldr	r3, [pc, #208]	; (8010608 <Cycle_enter+0x220>)
 8010536:	881b      	ldrh	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d005      	beq.n	8010548 <Cycle_enter+0x160>
	{
		Cycle_Close_s = 1;
 801053c:	4b31      	ldr	r3, [pc, #196]	; (8010604 <Cycle_enter+0x21c>)
 801053e:	2201      	movs	r2, #1
 8010540:	801a      	strh	r2, [r3, #0]
		Cycle_Close_ms = 0;
 8010542:	4b31      	ldr	r3, [pc, #196]	; (8010608 <Cycle_enter+0x220>)
 8010544:	2200      	movs	r2, #0
 8010546:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_Close_s > 9999) Cycle_Close_s = 9999;
 8010548:	4b2e      	ldr	r3, [pc, #184]	; (8010604 <Cycle_enter+0x21c>)
 801054a:	881b      	ldrh	r3, [r3, #0]
 801054c:	4a2f      	ldr	r2, [pc, #188]	; (801060c <Cycle_enter+0x224>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d902      	bls.n	8010558 <Cycle_enter+0x170>
 8010552:	4b2c      	ldr	r3, [pc, #176]	; (8010604 <Cycle_enter+0x21c>)
 8010554:	4a2d      	ldr	r2, [pc, #180]	; (801060c <Cycle_enter+0x224>)
 8010556:	801a      	strh	r2, [r3, #0]
	if (Cycle_Close_ms > 1000) Cycle_On_ms = 1000;
 8010558:	4b2b      	ldr	r3, [pc, #172]	; (8010608 <Cycle_enter+0x220>)
 801055a:	881a      	ldrh	r2, [r3, #0]
 801055c:	23fa      	movs	r3, #250	; 0xfa
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	429a      	cmp	r2, r3
 8010562:	d903      	bls.n	801056c <Cycle_enter+0x184>
 8010564:	4b25      	ldr	r3, [pc, #148]	; (80105fc <Cycle_enter+0x214>)
 8010566:	22fa      	movs	r2, #250	; 0xfa
 8010568:	0092      	lsls	r2, r2, #2
 801056a:	801a      	strh	r2, [r3, #0]
	//判断是否为Cycle功能输出模式
	if(((Cycle_On_s == 0) && (Cycle_On_ms == 0)) || ((Cycle_Close_s == 0) && (Cycle_Close_ms == 0)))
 801056c:	4b22      	ldr	r3, [pc, #136]	; (80105f8 <Cycle_enter+0x210>)
 801056e:	881b      	ldrh	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d103      	bne.n	801057c <Cycle_enter+0x194>
 8010574:	4b21      	ldr	r3, [pc, #132]	; (80105fc <Cycle_enter+0x214>)
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d007      	beq.n	801058c <Cycle_enter+0x1a4>
 801057c:	4b21      	ldr	r3, [pc, #132]	; (8010604 <Cycle_enter+0x21c>)
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d107      	bne.n	8010594 <Cycle_enter+0x1ac>
 8010584:	4b20      	ldr	r3, [pc, #128]	; (8010608 <Cycle_enter+0x220>)
 8010586:	881b      	ldrh	r3, [r3, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d103      	bne.n	8010594 <Cycle_enter+0x1ac>
	{
		Cycle_Function_On_Off = Cycle_Function_Off;
 801058c:	4b20      	ldr	r3, [pc, #128]	; (8010610 <Cycle_enter+0x228>)
 801058e:	2200      	movs	r2, #0
 8010590:	701a      	strb	r2, [r3, #0]
 8010592:	e012      	b.n	80105ba <Cycle_enter+0x1d2>
	}
	else if( (Cycle_On_s != 0 || Cycle_On_ms != 0) && (Cycle_Close_s != 0 || Cycle_Close_ms != 0) )
 8010594:	4b18      	ldr	r3, [pc, #96]	; (80105f8 <Cycle_enter+0x210>)
 8010596:	881b      	ldrh	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d103      	bne.n	80105a4 <Cycle_enter+0x1bc>
 801059c:	4b17      	ldr	r3, [pc, #92]	; (80105fc <Cycle_enter+0x214>)
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00a      	beq.n	80105ba <Cycle_enter+0x1d2>
 80105a4:	4b17      	ldr	r3, [pc, #92]	; (8010604 <Cycle_enter+0x21c>)
 80105a6:	881b      	ldrh	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d103      	bne.n	80105b4 <Cycle_enter+0x1cc>
 80105ac:	4b16      	ldr	r3, [pc, #88]	; (8010608 <Cycle_enter+0x220>)
 80105ae:	881b      	ldrh	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d002      	beq.n	80105ba <Cycle_enter+0x1d2>
	{
		Cycle_Function_On_Off = Cycle_Function_On;
 80105b4:	4b16      	ldr	r3, [pc, #88]	; (8010610 <Cycle_enter+0x228>)
 80105b6:	2201      	movs	r2, #1
 80105b8:	701a      	strb	r2, [r3, #0]

	}
	AT25_Save_Cycle();
 80105ba:	f7fb ffd7 	bl	800c56c <AT25_Save_Cycle>


	if(OUTPUT_NOT_OUTPUT == OUTPUT)
 80105be:	4b15      	ldr	r3, [pc, #84]	; (8010614 <Cycle_enter+0x22c>)
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d101      	bne.n	80105ca <Cycle_enter+0x1e2>
	{
		/*先输出零，延时一段时间后开始循环输出*/
		Output_Zero();
 80105c6:	f7fc fafd 	bl	800cbc4 <Output_Zero>

	}

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 80105ca:	4b13      	ldr	r3, [pc, #76]	; (8010618 <Cycle_enter+0x230>)
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	2b03      	cmp	r3, #3
 80105d0:	d103      	bne.n	80105da <Cycle_enter+0x1f2>
 80105d2:	4b11      	ldr	r3, [pc, #68]	; (8010618 <Cycle_enter+0x230>)
 80105d4:	2201      	movs	r2, #1
 80105d6:	609a      	str	r2, [r3, #8]
 80105d8:	e004      	b.n	80105e4 <Cycle_enter+0x1fc>
	else xyz.coordinates3++;//完成后设定，进入下一级
 80105da:	4b0f      	ldr	r3, [pc, #60]	; (8010618 <Cycle_enter+0x230>)
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	1c5a      	adds	r2, r3, #1
 80105e0:	4b0d      	ldr	r3, [pc, #52]	; (8010618 <Cycle_enter+0x230>)
 80105e2:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 80105e4:	4b0d      	ldr	r3, [pc, #52]	; (801061c <Cycle_enter+0x234>)
 80105e6:	2206      	movs	r2, #6
 80105e8:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 80105ea:	f004 f929 	bl	8014840 <Cursor_flash_on>
}
 80105ee:	46c0      	nop			; (mov r8, r8)
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	20002ff8 	.word	0x20002ff8
 80105f8:	20003b24 	.word	0x20003b24
 80105fc:	20002fd4 	.word	0x20002fd4
 8010600:	20003004 	.word	0x20003004
 8010604:	20003b26 	.word	0x20003b26
 8010608:	20002fd6 	.word	0x20002fd6
 801060c:	0000270f 	.word	0x0000270f
 8010610:	20003b74 	.word	0x20003b74
 8010614:	20003b1d 	.word	0x20003b1d
 8010618:	20003b8c 	.word	0x20003b8c
 801061c:	20003b22 	.word	0x20003b22

08010620 <Reset_enter>:

static void Reset_enter(void)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	af00      	add	r7, sp, #0

	AT25_Reset();
 8010624:	f7fc f8c2 	bl	800c7ac <AT25_Reset>
	Cursor_flash_off();
 8010628:	f004 f8d4 	bl	80147d4 <Cursor_flash_off>

	switch(xyz.coordinates3)
 801062c:	4b0f      	ldr	r3, [pc, #60]	; (801066c <Reset_enter+0x4c>)
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	2b03      	cmp	r3, #3
 8010632:	d00e      	beq.n	8010652 <Reset_enter+0x32>
 8010634:	dc17      	bgt.n	8010666 <Reset_enter+0x46>
 8010636:	2b01      	cmp	r3, #1
 8010638:	d002      	beq.n	8010640 <Reset_enter+0x20>
 801063a:	2b02      	cmp	r3, #2
 801063c:	d007      	beq.n	801064e <Reset_enter+0x2e>
		}

	}


}
 801063e:	e012      	b.n	8010666 <Reset_enter+0x46>
			DAC_Cmd_send(1,12,0);
 8010640:	2200      	movs	r2, #0
 8010642:	210c      	movs	r1, #12
 8010644:	2001      	movs	r0, #1
 8010646:	f7fc f977 	bl	800c938 <DAC_Cmd_send>
			break;
 801064a:	46c0      	nop			; (mov r8, r8)
}
 801064c:	e00b      	b.n	8010666 <Reset_enter+0x46>
			NVIC_SystemReset();
 801064e:	f7fd ff29 	bl	800e4a4 <__NVIC_SystemReset>
			DAC_Cmd_send(1,12,0);
 8010652:	2200      	movs	r2, #0
 8010654:	210c      	movs	r1, #12
 8010656:	2001      	movs	r0, #1
 8010658:	f7fc f96e 	bl	800c938 <DAC_Cmd_send>
			HAL_Delay(10);
 801065c:	200a      	movs	r0, #10
 801065e:	f7f4 fe67 	bl	8005330 <HAL_Delay>
			NVIC_SystemReset();
 8010662:	f7fd ff1f 	bl	800e4a4 <__NVIC_SystemReset>
}
 8010666:	46c0      	nop			; (mov r8, r8)
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	20003b8c 	.word	0x20003b8c

08010670 <Sample_show_enter>:
{
	;
}

static void Sample_show_enter(void)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	af00      	add	r7, sp, #0

	static uint8_t count=1;
	if(count==1)
 8010674:	4b0f      	ldr	r3, [pc, #60]	; (80106b4 <Sample_show_enter+0x44>)
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d108      	bne.n	801068e <Sample_show_enter+0x1e>
	{
		count=2;
 801067c:	4b0d      	ldr	r3, [pc, #52]	; (80106b4 <Sample_show_enter+0x44>)
 801067e:	2202      	movs	r2, #2
 8010680:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x00);
 8010682:	2200      	movs	r2, #0
 8010684:	2102      	movs	r1, #2
 8010686:	2001      	movs	r0, #1
 8010688:	f7fc f956 	bl	800c938 <DAC_Cmd_send>
 801068c:	e00b      	b.n	80106a6 <Sample_show_enter+0x36>
	}
	else if(count==2)
 801068e:	4b09      	ldr	r3, [pc, #36]	; (80106b4 <Sample_show_enter+0x44>)
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	2b02      	cmp	r3, #2
 8010694:	d107      	bne.n	80106a6 <Sample_show_enter+0x36>
	{
		count=1;
 8010696:	4b07      	ldr	r3, [pc, #28]	; (80106b4 <Sample_show_enter+0x44>)
 8010698:	2201      	movs	r2, #1
 801069a:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x01);
 801069c:	2201      	movs	r2, #1
 801069e:	2102      	movs	r1, #2
 80106a0:	2001      	movs	r0, #1
 80106a2:	f7fc f949 	bl	800c938 <DAC_Cmd_send>
	}
	Shift_Not_Shift=Not_Shift;
 80106a6:	4b04      	ldr	r3, [pc, #16]	; (80106b8 <Sample_show_enter+0x48>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	701a      	strb	r2, [r3, #0]
}
 80106ac:	46c0      	nop			; (mov r8, r8)
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	46c0      	nop			; (mov r8, r8)
 80106b4:	20002fe2 	.word	0x20002fe2
 80106b8:	20003b1b 	.word	0x20003b1b

080106bc <Key_Enter>:
 * @brief  按键Enter的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Enter(void)
{
 80106bc:	b5b0      	push	{r4, r5, r7, lr}
 80106be:	af00      	add	r7, sp, #0
	if(LOCK_UNLOCK == UNLOCK)
 80106c0:	4bc4      	ldr	r3, [pc, #784]	; (80109d4 <Key_Enter+0x318>)
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d000      	beq.n	80106ca <Key_Enter+0xe>
 80106c8:	e227      	b.n	8010b1a <Key_Enter+0x45e>
	{
		if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 80106ca:	4bc3      	ldr	r3, [pc, #780]	; (80109d8 <Key_Enter+0x31c>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d131      	bne.n	8010736 <Key_Enter+0x7a>
 80106d2:	4bc1      	ldr	r3, [pc, #772]	; (80109d8 <Key_Enter+0x31c>)
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d12d      	bne.n	8010736 <Key_Enter+0x7a>
 80106da:	4bbf      	ldr	r3, [pc, #764]	; (80109d8 <Key_Enter+0x31c>)
 80106dc:	689b      	ldr	r3, [r3, #8]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d129      	bne.n	8010736 <Key_Enter+0x7a>
		{
			DAC_Cmd_send(1,2,0x01);
 80106e2:	2201      	movs	r2, #1
 80106e4:	2102      	movs	r1, #2
 80106e6:	2001      	movs	r0, #1
 80106e8:	f7fc f926 	bl	800c938 <DAC_Cmd_send>
			HAL_Delay(10);
 80106ec:	200a      	movs	r0, #10
 80106ee:	f7f4 fe1f 	bl	8005330 <HAL_Delay>
		    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);    //关了空闲中断
 80106f2:	4bba      	ldr	r3, [pc, #744]	; (80109dc <Key_Enter+0x320>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	4bb8      	ldr	r3, [pc, #736]	; (80109dc <Key_Enter+0x320>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2110      	movs	r1, #16
 80106fe:	438a      	bics	r2, r1
 8010700:	601a      	str	r2, [r3, #0]
		    __HAL_UART_CLEAR_IDLEFLAG(&huart2);				//清除IDLE标志
 8010702:	4bb6      	ldr	r3, [pc, #728]	; (80109dc <Key_Enter+0x320>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2210      	movs	r2, #16
 8010708:	621a      	str	r2, [r3, #32]
		    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);	//清除IDLE标志
 801070a:	4bb4      	ldr	r3, [pc, #720]	; (80109dc <Key_Enter+0x320>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	4bb2      	ldr	r3, [pc, #712]	; (80109dc <Key_Enter+0x320>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	2110      	movs	r1, #16
 8010716:	438a      	bics	r2, r1
 8010718:	601a      	str	r2, [r3, #0]
		    __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);    	//使能空闲中断
 801071a:	4bb0      	ldr	r3, [pc, #704]	; (80109dc <Key_Enter+0x320>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	4bae      	ldr	r3, [pc, #696]	; (80109dc <Key_Enter+0x320>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2110      	movs	r1, #16
 8010726:	430a      	orrs	r2, r1
 8010728:	601a      	str	r2, [r3, #0]
		    UART_Start_Receive_DMA(&huart2,Uart2_Receive_buffer,9);
 801072a:	49ad      	ldr	r1, [pc, #692]	; (80109e0 <Key_Enter+0x324>)
 801072c:	4bab      	ldr	r3, [pc, #684]	; (80109dc <Key_Enter+0x320>)
 801072e:	2209      	movs	r2, #9
 8010730:	0018      	movs	r0, r3
 8010732:	f7fa fe79 	bl	800b428 <UART_Start_Receive_DMA>
		}
		/*first menu enter second menu*/
		if( xyz.coordinates1==1 && (xyz.coordinates3==0) )//当处于第一级菜单,按下enter进入二级菜单
 8010736:	4ba8      	ldr	r3, [pc, #672]	; (80109d8 <Key_Enter+0x31c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2b01      	cmp	r3, #1
 801073c:	d106      	bne.n	801074c <Key_Enter+0x90>
 801073e:	4ba6      	ldr	r3, [pc, #664]	; (80109d8 <Key_Enter+0x31c>)
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d102      	bne.n	801074c <Key_Enter+0x90>
		{
			enter_second_menu();
 8010746:	f7ff fadb 	bl	800fd00 <enter_second_menu>
			return;
 801074a:	e1e6      	b.n	8010b1a <Key_Enter+0x45e>
		}
		/*I——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) )//I_set 按下enter
 801074c:	4ba2      	ldr	r3, [pc, #648]	; (80109d8 <Key_Enter+0x31c>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2b02      	cmp	r3, #2
 8010752:	d109      	bne.n	8010768 <Key_Enter+0xac>
 8010754:	4ba0      	ldr	r3, [pc, #640]	; (80109d8 <Key_Enter+0x31c>)
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d105      	bne.n	8010768 <Key_Enter+0xac>
 801075c:	4b9e      	ldr	r3, [pc, #632]	; (80109d8 <Key_Enter+0x31c>)
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d101      	bne.n	8010768 <Key_Enter+0xac>
		{
			ISET_enter();
 8010764:	f7ff fafc 	bl	800fd60 <ISET_enter>
		}
		/*V——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) )//V_set 按下enter
 8010768:	4b9b      	ldr	r3, [pc, #620]	; (80109d8 <Key_Enter+0x31c>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d109      	bne.n	8010784 <Key_Enter+0xc8>
 8010770:	4b99      	ldr	r3, [pc, #612]	; (80109d8 <Key_Enter+0x31c>)
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	2b02      	cmp	r3, #2
 8010776:	d105      	bne.n	8010784 <Key_Enter+0xc8>
 8010778:	4b97      	ldr	r3, [pc, #604]	; (80109d8 <Key_Enter+0x31c>)
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <Key_Enter+0xc8>
		{
			VSET_enter();
 8010780:	f7ff fb8e 	bl	800fea0 <VSET_enter>
		}
		/*AD GAIN FRQ enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))//GAIN
 8010784:	4b94      	ldr	r3, [pc, #592]	; (80109d8 <Key_Enter+0x31c>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b01      	cmp	r3, #1
 801078a:	d109      	bne.n	80107a0 <Key_Enter+0xe4>
 801078c:	4b92      	ldr	r3, [pc, #584]	; (80109d8 <Key_Enter+0x31c>)
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	2b05      	cmp	r3, #5
 8010792:	d105      	bne.n	80107a0 <Key_Enter+0xe4>
 8010794:	4b90      	ldr	r3, [pc, #576]	; (80109d8 <Key_Enter+0x31c>)
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d101      	bne.n	80107a0 <Key_Enter+0xe4>
		{
			Password_enter();
 801079c:	f7ff fc10 	bl	800ffc0 <Password_enter>
		}
		/*rate set*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) )//i rate
 80107a0:	4b8d      	ldr	r3, [pc, #564]	; (80109d8 <Key_Enter+0x31c>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d109      	bne.n	80107bc <Key_Enter+0x100>
 80107a8:	4b8b      	ldr	r3, [pc, #556]	; (80109d8 <Key_Enter+0x31c>)
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	d105      	bne.n	80107bc <Key_Enter+0x100>
 80107b0:	4b89      	ldr	r3, [pc, #548]	; (80109d8 <Key_Enter+0x31c>)
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d101      	bne.n	80107bc <Key_Enter+0x100>
		{
			IRateSET_enter();
 80107b8:	f7ff fc60 	bl	801007c <IRateSET_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) )//v rate
 80107bc:	4b86      	ldr	r3, [pc, #536]	; (80109d8 <Key_Enter+0x31c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d109      	bne.n	80107d8 <Key_Enter+0x11c>
 80107c4:	4b84      	ldr	r3, [pc, #528]	; (80109d8 <Key_Enter+0x31c>)
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	2b02      	cmp	r3, #2
 80107ca:	d105      	bne.n	80107d8 <Key_Enter+0x11c>
 80107cc:	4b82      	ldr	r3, [pc, #520]	; (80109d8 <Key_Enter+0x31c>)
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	d101      	bne.n	80107d8 <Key_Enter+0x11c>
		{
			VRateSET_enter();
 80107d4:	f7ff fc88 	bl	80100e8 <VRateSET_enter>
		}
		/*CYCLE DELAY enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) )//delay third menu enter
 80107d8:	4b7f      	ldr	r3, [pc, #508]	; (80109d8 <Key_Enter+0x31c>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d109      	bne.n	80107f4 <Key_Enter+0x138>
 80107e0:	4b7d      	ldr	r3, [pc, #500]	; (80109d8 <Key_Enter+0x31c>)
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	2b04      	cmp	r3, #4
 80107e6:	d105      	bne.n	80107f4 <Key_Enter+0x138>
 80107e8:	4b7b      	ldr	r3, [pc, #492]	; (80109d8 <Key_Enter+0x31c>)
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d101      	bne.n	80107f4 <Key_Enter+0x138>
		{
			Delay_enter();
 80107f0:	f7ff fd7c 	bl	80102ec <Delay_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && ((xyz.coordinates3==2) || (xyz.coordinates3==3)))//cycle third menu enter
 80107f4:	4b78      	ldr	r3, [pc, #480]	; (80109d8 <Key_Enter+0x31c>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d10d      	bne.n	8010818 <Key_Enter+0x15c>
 80107fc:	4b76      	ldr	r3, [pc, #472]	; (80109d8 <Key_Enter+0x31c>)
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	2b04      	cmp	r3, #4
 8010802:	d109      	bne.n	8010818 <Key_Enter+0x15c>
 8010804:	4b74      	ldr	r3, [pc, #464]	; (80109d8 <Key_Enter+0x31c>)
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	2b02      	cmp	r3, #2
 801080a:	d003      	beq.n	8010814 <Key_Enter+0x158>
 801080c:	4b72      	ldr	r3, [pc, #456]	; (80109d8 <Key_Enter+0x31c>)
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	2b03      	cmp	r3, #3
 8010812:	d101      	bne.n	8010818 <Key_Enter+0x15c>
		{
			Cycle_enter();
 8010814:	f7ff fde8 	bl	80103e8 <Cycle_enter>
		}
		/*Save  enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 8010818:	4b6f      	ldr	r3, [pc, #444]	; (80109d8 <Key_Enter+0x31c>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b03      	cmp	r3, #3
 801081e:	d109      	bne.n	8010834 <Key_Enter+0x178>
 8010820:	4b6d      	ldr	r3, [pc, #436]	; (80109d8 <Key_Enter+0x31c>)
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d105      	bne.n	8010834 <Key_Enter+0x178>
 8010828:	4b6b      	ldr	r3, [pc, #428]	; (80109d8 <Key_Enter+0x31c>)
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d001      	beq.n	8010834 <Key_Enter+0x178>
		{
			Save_enter();
 8010830:	f7ff fc92 	bl	8010158 <Save_enter>
		}
		/*load enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 8010834:	4b68      	ldr	r3, [pc, #416]	; (80109d8 <Key_Enter+0x31c>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b03      	cmp	r3, #3
 801083a:	d109      	bne.n	8010850 <Key_Enter+0x194>
 801083c:	4b66      	ldr	r3, [pc, #408]	; (80109d8 <Key_Enter+0x31c>)
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	2b02      	cmp	r3, #2
 8010842:	d105      	bne.n	8010850 <Key_Enter+0x194>
 8010844:	4b64      	ldr	r3, [pc, #400]	; (80109d8 <Key_Enter+0x31c>)
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <Key_Enter+0x194>
		{
			Load_enter();
 801084c:	f7ff fcda 	bl	8010204 <Load_enter>
		}
		/*reset enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==1) && (xyz.coordinates3>=1))
 8010850:	4b61      	ldr	r3, [pc, #388]	; (80109d8 <Key_Enter+0x31c>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d109      	bne.n	801086c <Key_Enter+0x1b0>
 8010858:	4b5f      	ldr	r3, [pc, #380]	; (80109d8 <Key_Enter+0x31c>)
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	2b01      	cmp	r3, #1
 801085e:	d105      	bne.n	801086c <Key_Enter+0x1b0>
 8010860:	4b5d      	ldr	r3, [pc, #372]	; (80109d8 <Key_Enter+0x31c>)
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	2b00      	cmp	r3, #0
 8010866:	dd01      	ble.n	801086c <Key_Enter+0x1b0>
		{
			Reset_enter();
 8010868:	f7ff feda 	bl	8010620 <Reset_enter>
		}
		/*light level ennter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3==1))
 801086c:	4b5a      	ldr	r3, [pc, #360]	; (80109d8 <Key_Enter+0x31c>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2b01      	cmp	r3, #1
 8010872:	d109      	bne.n	8010888 <Key_Enter+0x1cc>
 8010874:	4b58      	ldr	r3, [pc, #352]	; (80109d8 <Key_Enter+0x31c>)
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	2b06      	cmp	r3, #6
 801087a:	d105      	bne.n	8010888 <Key_Enter+0x1cc>
 801087c:	4b56      	ldr	r3, [pc, #344]	; (80109d8 <Key_Enter+0x31c>)
 801087e:	689b      	ldr	r3, [r3, #8]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d101      	bne.n	8010888 <Key_Enter+0x1cc>
		{
			Cursor_flash_off();
 8010884:	f003 ffa6 	bl	80147d4 <Cursor_flash_off>
		}

		if(Shift_Not_Shift==Shift && (xyz.coordinates1==0 && xyz.coordinates2==0 && xyz.coordinates3==0))
 8010888:	4b56      	ldr	r3, [pc, #344]	; (80109e4 <Key_Enter+0x328>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b01      	cmp	r3, #1
 801088e:	d10d      	bne.n	80108ac <Key_Enter+0x1f0>
 8010890:	4b51      	ldr	r3, [pc, #324]	; (80109d8 <Key_Enter+0x31c>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d109      	bne.n	80108ac <Key_Enter+0x1f0>
 8010898:	4b4f      	ldr	r3, [pc, #316]	; (80109d8 <Key_Enter+0x31c>)
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d105      	bne.n	80108ac <Key_Enter+0x1f0>
 80108a0:	4b4d      	ldr	r3, [pc, #308]	; (80109d8 <Key_Enter+0x31c>)
 80108a2:	689b      	ldr	r3, [r3, #8]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <Key_Enter+0x1f0>
		{
			Sample_show_enter();
 80108a8:	f7ff fee2 	bl	8010670 <Sample_show_enter>
		}
		/*gain frq*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 80108ac:	4b4a      	ldr	r3, [pc, #296]	; (80109d8 <Key_Enter+0x31c>)
 80108ae:	681b      	ldr	r3, [r3, #0]
		{
			//Frq_enter();

		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==3))
 80108b0:	4b49      	ldr	r3, [pc, #292]	; (80109d8 <Key_Enter+0x31c>)
 80108b2:	681b      	ldr	r3, [r3, #0]
			Cursor_flash_off();
			*/
		}
		/*V calibration*/
		//此处采用两点法校准
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1))
 80108b4:	4b48      	ldr	r3, [pc, #288]	; (80109d8 <Key_Enter+0x31c>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d123      	bne.n	8010904 <Key_Enter+0x248>
 80108bc:	4b46      	ldr	r3, [pc, #280]	; (80109d8 <Key_Enter+0x31c>)
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	2b08      	cmp	r3, #8
 80108c2:	d11f      	bne.n	8010904 <Key_Enter+0x248>
 80108c4:	4b44      	ldr	r3, [pc, #272]	; (80109d8 <Key_Enter+0x31c>)
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d11b      	bne.n	8010904 <Key_Enter+0x248>
		{
			data_V[0]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 80108cc:	4b44      	ldr	r3, [pc, #272]	; (80109e0 <Key_Enter+0x324>)
 80108ce:	78db      	ldrb	r3, [r3, #3]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	021b      	lsls	r3, r3, #8
 80108d4:	b29a      	uxth	r2, r3
 80108d6:	4b42      	ldr	r3, [pc, #264]	; (80109e0 <Key_Enter+0x324>)
 80108d8:	791b      	ldrb	r3, [r3, #4]
 80108da:	b29b      	uxth	r3, r3
 80108dc:	18d3      	adds	r3, r2, r3
 80108de:	b29a      	uxth	r2, r3
 80108e0:	4b41      	ldr	r3, [pc, #260]	; (80109e8 <Key_Enter+0x32c>)
 80108e2:	801a      	strh	r2, [r3, #0]
			Vref[0]=String_To_Float(String_Calibration_Vlotage);
 80108e4:	4b41      	ldr	r3, [pc, #260]	; (80109ec <Key_Enter+0x330>)
 80108e6:	0018      	movs	r0, r3
 80108e8:	f7fd ff42 	bl	800e770 <String_To_Float>
 80108ec:	1c02      	adds	r2, r0, #0
 80108ee:	4b40      	ldr	r3, [pc, #256]	; (80109f0 <Key_Enter+0x334>)
 80108f0:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 80108f2:	4b39      	ldr	r3, [pc, #228]	; (80109d8 <Key_Enter+0x31c>)
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	1c5a      	adds	r2, r3, #1
 80108f8:	4b37      	ldr	r3, [pc, #220]	; (80109d8 <Key_Enter+0x31c>)
 80108fa:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 80108fc:	4b3d      	ldr	r3, [pc, #244]	; (80109f4 <Key_Enter+0x338>)
 80108fe:	2209      	movs	r2, #9
 8010900:	701a      	strb	r2, [r3, #0]
			return;
 8010902:	e10a      	b.n	8010b1a <Key_Enter+0x45e>
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==2))
 8010904:	4b34      	ldr	r3, [pc, #208]	; (80109d8 <Key_Enter+0x31c>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d000      	beq.n	801090e <Key_Enter+0x252>
 801090c:	e07c      	b.n	8010a08 <Key_Enter+0x34c>
 801090e:	4b32      	ldr	r3, [pc, #200]	; (80109d8 <Key_Enter+0x31c>)
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	2b08      	cmp	r3, #8
 8010914:	d000      	beq.n	8010918 <Key_Enter+0x25c>
 8010916:	e077      	b.n	8010a08 <Key_Enter+0x34c>
 8010918:	4b2f      	ldr	r3, [pc, #188]	; (80109d8 <Key_Enter+0x31c>)
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	2b02      	cmp	r3, #2
 801091e:	d173      	bne.n	8010a08 <Key_Enter+0x34c>
		{
			data_V[1]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 8010920:	4b2f      	ldr	r3, [pc, #188]	; (80109e0 <Key_Enter+0x324>)
 8010922:	78db      	ldrb	r3, [r3, #3]
 8010924:	b29b      	uxth	r3, r3
 8010926:	021b      	lsls	r3, r3, #8
 8010928:	b29a      	uxth	r2, r3
 801092a:	4b2d      	ldr	r3, [pc, #180]	; (80109e0 <Key_Enter+0x324>)
 801092c:	791b      	ldrb	r3, [r3, #4]
 801092e:	b29b      	uxth	r3, r3
 8010930:	18d3      	adds	r3, r2, r3
 8010932:	b29a      	uxth	r2, r3
 8010934:	4b2c      	ldr	r3, [pc, #176]	; (80109e8 <Key_Enter+0x32c>)
 8010936:	805a      	strh	r2, [r3, #2]
			Vref[1]=String_To_Float(String_Calibration_Vlotage);
 8010938:	4b2c      	ldr	r3, [pc, #176]	; (80109ec <Key_Enter+0x330>)
 801093a:	0018      	movs	r0, r3
 801093c:	f7fd ff18 	bl	800e770 <String_To_Float>
 8010940:	1c02      	adds	r2, r0, #0
 8010942:	4b2b      	ldr	r3, [pc, #172]	; (80109f0 <Key_Enter+0x334>)
 8010944:	605a      	str	r2, [r3, #4]
			ADC_Gain_V=(Vref[1]-Vref[0])/(data_V[1]-data_V[0]);
 8010946:	4b2a      	ldr	r3, [pc, #168]	; (80109f0 <Key_Enter+0x334>)
 8010948:	685a      	ldr	r2, [r3, #4]
 801094a:	4b29      	ldr	r3, [pc, #164]	; (80109f0 <Key_Enter+0x334>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	1c19      	adds	r1, r3, #0
 8010950:	1c10      	adds	r0, r2, #0
 8010952:	f7f0 faab 	bl	8000eac <__aeabi_fsub>
 8010956:	1c03      	adds	r3, r0, #0
 8010958:	1c1c      	adds	r4, r3, #0
 801095a:	4b23      	ldr	r3, [pc, #140]	; (80109e8 <Key_Enter+0x32c>)
 801095c:	885b      	ldrh	r3, [r3, #2]
 801095e:	001a      	movs	r2, r3
 8010960:	4b21      	ldr	r3, [pc, #132]	; (80109e8 <Key_Enter+0x32c>)
 8010962:	881b      	ldrh	r3, [r3, #0]
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	0018      	movs	r0, r3
 8010968:	f7f0 fc6e 	bl	8001248 <__aeabi_i2f>
 801096c:	1c03      	adds	r3, r0, #0
 801096e:	1c19      	adds	r1, r3, #0
 8010970:	1c20      	adds	r0, r4, #0
 8010972:	f7ef ffad 	bl	80008d0 <__aeabi_fdiv>
 8010976:	1c03      	adds	r3, r0, #0
 8010978:	1c1a      	adds	r2, r3, #0
 801097a:	4b1f      	ldr	r3, [pc, #124]	; (80109f8 <Key_Enter+0x33c>)
 801097c:	601a      	str	r2, [r3, #0]
			Eror_ADC_V=Vref[0]-ADC_Gain_V*data_V[0];
 801097e:	4b1c      	ldr	r3, [pc, #112]	; (80109f0 <Key_Enter+0x334>)
 8010980:	681c      	ldr	r4, [r3, #0]
 8010982:	4b19      	ldr	r3, [pc, #100]	; (80109e8 <Key_Enter+0x32c>)
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	0018      	movs	r0, r3
 8010988:	f7f0 fc5e 	bl	8001248 <__aeabi_i2f>
 801098c:	1c02      	adds	r2, r0, #0
 801098e:	4b1a      	ldr	r3, [pc, #104]	; (80109f8 <Key_Enter+0x33c>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	1c19      	adds	r1, r3, #0
 8010994:	1c10      	adds	r0, r2, #0
 8010996:	f7f0 f963 	bl	8000c60 <__aeabi_fmul>
 801099a:	1c03      	adds	r3, r0, #0
 801099c:	1c19      	adds	r1, r3, #0
 801099e:	1c20      	adds	r0, r4, #0
 80109a0:	f7f0 fa84 	bl	8000eac <__aeabi_fsub>
 80109a4:	1c03      	adds	r3, r0, #0
 80109a6:	1c1a      	adds	r2, r3, #0
 80109a8:	4b14      	ldr	r3, [pc, #80]	; (80109fc <Key_Enter+0x340>)
 80109aa:	601a      	str	r2, [r3, #0]

			/*电流校准要进行后续修改*/
			ADC_Gain_I=ADC_Gain_V;
 80109ac:	4b12      	ldr	r3, [pc, #72]	; (80109f8 <Key_Enter+0x33c>)
 80109ae:	681a      	ldr	r2, [r3, #0]
 80109b0:	4b13      	ldr	r3, [pc, #76]	; (8010a00 <Key_Enter+0x344>)
 80109b2:	601a      	str	r2, [r3, #0]
			Eror_ADC_I=Eror_ADC_V;
 80109b4:	4b11      	ldr	r3, [pc, #68]	; (80109fc <Key_Enter+0x340>)
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	4b12      	ldr	r3, [pc, #72]	; (8010a04 <Key_Enter+0x348>)
 80109ba:	601a      	str	r2, [r3, #0]

			AT25_Save_AD_Param();
 80109bc:	f7fb fe2e 	bl	800c61c <AT25_Save_AD_Param>
			xyz.coordinates3++;
 80109c0:	4b05      	ldr	r3, [pc, #20]	; (80109d8 <Key_Enter+0x31c>)
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	1c5a      	adds	r2, r3, #1
 80109c6:	4b04      	ldr	r3, [pc, #16]	; (80109d8 <Key_Enter+0x31c>)
 80109c8:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 80109ca:	4b0a      	ldr	r3, [pc, #40]	; (80109f4 <Key_Enter+0x338>)
 80109cc:	2209      	movs	r2, #9
 80109ce:	701a      	strb	r2, [r3, #0]
			return;
 80109d0:	e0a3      	b.n	8010b1a <Key_Enter+0x45e>
 80109d2:	46c0      	nop			; (mov r8, r8)
 80109d4:	20003b1f 	.word	0x20003b1f
 80109d8:	20003b8c 	.word	0x20003b8c
 80109dc:	20003740 	.word	0x20003740
 80109e0:	200036a0 	.word	0x200036a0
 80109e4:	20003b1b 	.word	0x20003b1b
 80109e8:	20003b48 	.word	0x20003b48
 80109ec:	2000308c 	.word	0x2000308c
 80109f0:	20003b38 	.word	0x20003b38
 80109f4:	20003b22 	.word	0x20003b22
 80109f8:	20002fe8 	.word	0x20002fe8
 80109fc:	20002ff0 	.word	0x20002ff0
 8010a00:	20002fec 	.word	0x20002fec
 8010a04:	20002ff4 	.word	0x20002ff4
		}
		/*I calibration*/

		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3))
 8010a08:	4b45      	ldr	r3, [pc, #276]	; (8010b20 <Key_Enter+0x464>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d10a      	bne.n	8010a26 <Key_Enter+0x36a>
 8010a10:	4b43      	ldr	r3, [pc, #268]	; (8010b20 <Key_Enter+0x464>)
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	2b08      	cmp	r3, #8
 8010a16:	d106      	bne.n	8010a26 <Key_Enter+0x36a>
 8010a18:	4b41      	ldr	r3, [pc, #260]	; (8010b20 <Key_Enter+0x464>)
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	2b03      	cmp	r3, #3
 8010a1e:	d102      	bne.n	8010a26 <Key_Enter+0x36a>
		{
			Flag.Current_error=1;
 8010a20:	4b40      	ldr	r3, [pc, #256]	; (8010b24 <Key_Enter+0x468>)
 8010a22:	2201      	movs	r2, #1
 8010a24:	62da      	str	r2, [r3, #44]	; 0x2c

		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==4))
 8010a26:	4b3e      	ldr	r3, [pc, #248]	; (8010b20 <Key_Enter+0x464>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d120      	bne.n	8010a70 <Key_Enter+0x3b4>
 8010a2e:	4b3c      	ldr	r3, [pc, #240]	; (8010b20 <Key_Enter+0x464>)
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	2b08      	cmp	r3, #8
 8010a34:	d11c      	bne.n	8010a70 <Key_Enter+0x3b4>
 8010a36:	4b3a      	ldr	r3, [pc, #232]	; (8010b20 <Key_Enter+0x464>)
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	2b04      	cmp	r3, #4
 8010a3c:	d118      	bne.n	8010a70 <Key_Enter+0x3b4>
		{
			data_I[0]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 8010a3e:	4b3a      	ldr	r3, [pc, #232]	; (8010b28 <Key_Enter+0x46c>)
 8010a40:	795b      	ldrb	r3, [r3, #5]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	021b      	lsls	r3, r3, #8
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	4b37      	ldr	r3, [pc, #220]	; (8010b28 <Key_Enter+0x46c>)
 8010a4a:	799b      	ldrb	r3, [r3, #6]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	18d3      	adds	r3, r2, r3
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	4b36      	ldr	r3, [pc, #216]	; (8010b2c <Key_Enter+0x470>)
 8010a54:	801a      	strh	r2, [r3, #0]
			Iref[0]=String_To_Float(String_Calibration_Current);
 8010a56:	4b36      	ldr	r3, [pc, #216]	; (8010b30 <Key_Enter+0x474>)
 8010a58:	0018      	movs	r0, r3
 8010a5a:	f7fd fe89 	bl	800e770 <String_To_Float>
 8010a5e:	1c02      	adds	r2, r0, #0
 8010a60:	4b34      	ldr	r3, [pc, #208]	; (8010b34 <Key_Enter+0x478>)
 8010a62:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 8010a64:	4b2e      	ldr	r3, [pc, #184]	; (8010b20 <Key_Enter+0x464>)
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	1c5a      	adds	r2, r3, #1
 8010a6a:	4b2d      	ldr	r3, [pc, #180]	; (8010b20 <Key_Enter+0x464>)
 8010a6c:	609a      	str	r2, [r3, #8]
			return;
 8010a6e:	e054      	b.n	8010b1a <Key_Enter+0x45e>
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==5))
 8010a70:	4b2b      	ldr	r3, [pc, #172]	; (8010b20 <Key_Enter+0x464>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d150      	bne.n	8010b1a <Key_Enter+0x45e>
 8010a78:	4b29      	ldr	r3, [pc, #164]	; (8010b20 <Key_Enter+0x464>)
 8010a7a:	685b      	ldr	r3, [r3, #4]
 8010a7c:	2b08      	cmp	r3, #8
 8010a7e:	d14c      	bne.n	8010b1a <Key_Enter+0x45e>
 8010a80:	4b27      	ldr	r3, [pc, #156]	; (8010b20 <Key_Enter+0x464>)
 8010a82:	689b      	ldr	r3, [r3, #8]
 8010a84:	2b05      	cmp	r3, #5
 8010a86:	d148      	bne.n	8010b1a <Key_Enter+0x45e>
		{
			data_I[1]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 8010a88:	4b27      	ldr	r3, [pc, #156]	; (8010b28 <Key_Enter+0x46c>)
 8010a8a:	795b      	ldrb	r3, [r3, #5]
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	021b      	lsls	r3, r3, #8
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	4b25      	ldr	r3, [pc, #148]	; (8010b28 <Key_Enter+0x46c>)
 8010a94:	799b      	ldrb	r3, [r3, #6]
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	18d3      	adds	r3, r2, r3
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	4b23      	ldr	r3, [pc, #140]	; (8010b2c <Key_Enter+0x470>)
 8010a9e:	805a      	strh	r2, [r3, #2]
			Iref[1]=String_To_Float(String_Calibration_Current);
 8010aa0:	4b23      	ldr	r3, [pc, #140]	; (8010b30 <Key_Enter+0x474>)
 8010aa2:	0018      	movs	r0, r3
 8010aa4:	f7fd fe64 	bl	800e770 <String_To_Float>
 8010aa8:	1c02      	adds	r2, r0, #0
 8010aaa:	4b22      	ldr	r3, [pc, #136]	; (8010b34 <Key_Enter+0x478>)
 8010aac:	605a      	str	r2, [r3, #4]
			ADC_Gain_I=(Iref[1]-Iref[0])/(data_I[1]-data_I[0]);
 8010aae:	4b21      	ldr	r3, [pc, #132]	; (8010b34 <Key_Enter+0x478>)
 8010ab0:	685a      	ldr	r2, [r3, #4]
 8010ab2:	4b20      	ldr	r3, [pc, #128]	; (8010b34 <Key_Enter+0x478>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	1c19      	adds	r1, r3, #0
 8010ab8:	1c10      	adds	r0, r2, #0
 8010aba:	f7f0 f9f7 	bl	8000eac <__aeabi_fsub>
 8010abe:	1c03      	adds	r3, r0, #0
 8010ac0:	1c1c      	adds	r4, r3, #0
 8010ac2:	4b1a      	ldr	r3, [pc, #104]	; (8010b2c <Key_Enter+0x470>)
 8010ac4:	885b      	ldrh	r3, [r3, #2]
 8010ac6:	001a      	movs	r2, r3
 8010ac8:	4b18      	ldr	r3, [pc, #96]	; (8010b2c <Key_Enter+0x470>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	0018      	movs	r0, r3
 8010ad0:	f7f0 fbba 	bl	8001248 <__aeabi_i2f>
 8010ad4:	1c03      	adds	r3, r0, #0
 8010ad6:	1c19      	adds	r1, r3, #0
 8010ad8:	1c20      	adds	r0, r4, #0
 8010ada:	f7ef fef9 	bl	80008d0 <__aeabi_fdiv>
 8010ade:	1c03      	adds	r3, r0, #0
 8010ae0:	1c1a      	adds	r2, r3, #0
 8010ae2:	4b15      	ldr	r3, [pc, #84]	; (8010b38 <Key_Enter+0x47c>)
 8010ae4:	601a      	str	r2, [r3, #0]
			AT25_Save_AD_Param();
 8010ae6:	f7fb fd99 	bl	800c61c <AT25_Save_AD_Param>
			Eror_ADC_I=Iref[0]-ADC_Gain_I*data_I[0];
 8010aea:	4b12      	ldr	r3, [pc, #72]	; (8010b34 <Key_Enter+0x478>)
 8010aec:	681c      	ldr	r4, [r3, #0]
 8010aee:	4b0f      	ldr	r3, [pc, #60]	; (8010b2c <Key_Enter+0x470>)
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	0018      	movs	r0, r3
 8010af4:	f7f0 fba8 	bl	8001248 <__aeabi_i2f>
 8010af8:	1c02      	adds	r2, r0, #0
 8010afa:	4b0f      	ldr	r3, [pc, #60]	; (8010b38 <Key_Enter+0x47c>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	1c19      	adds	r1, r3, #0
 8010b00:	1c10      	adds	r0, r2, #0
 8010b02:	f7f0 f8ad 	bl	8000c60 <__aeabi_fmul>
 8010b06:	1c03      	adds	r3, r0, #0
 8010b08:	1c19      	adds	r1, r3, #0
 8010b0a:	1c20      	adds	r0, r4, #0
 8010b0c:	f7f0 f9ce 	bl	8000eac <__aeabi_fsub>
 8010b10:	1c03      	adds	r3, r0, #0
 8010b12:	1c1a      	adds	r2, r3, #0
 8010b14:	4b09      	ldr	r3, [pc, #36]	; (8010b3c <Key_Enter+0x480>)
 8010b16:	601a      	str	r2, [r3, #0]
			return;
 8010b18:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b1e:	46c0      	nop			; (mov r8, r8)
 8010b20:	20003b8c 	.word	0x20003b8c
 8010b24:	20003384 	.word	0x20003384
 8010b28:	200036a0 	.word	0x200036a0
 8010b2c:	20003b4c 	.word	0x20003b4c
 8010b30:	20003098 	.word	0x20003098
 8010b34:	20003b40 	.word	0x20003b40
 8010b38:	20002fec 	.word	0x20002fec
 8010b3c:	20002ff4 	.word	0x20002ff4

08010b40 <Key_Shift>:
 * @brief  按键Shift的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Shift(void)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	af00      	add	r7, sp, #0
	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0)) || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9)) )
 8010b44:	4b6b      	ldr	r3, [pc, #428]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d107      	bne.n	8010b5c <Key_Shift+0x1c>
 8010b4c:	4b69      	ldr	r3, [pc, #420]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d103      	bne.n	8010b5c <Key_Shift+0x1c>
 8010b54:	4b67      	ldr	r3, [pc, #412]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00b      	beq.n	8010b74 <Key_Shift+0x34>
 8010b5c:	4b65      	ldr	r3, [pc, #404]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2b09      	cmp	r3, #9
 8010b62:	d116      	bne.n	8010b92 <Key_Shift+0x52>
 8010b64:	4b63      	ldr	r3, [pc, #396]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	2b09      	cmp	r3, #9
 8010b6a:	d112      	bne.n	8010b92 <Key_Shift+0x52>
 8010b6c:	4b61      	ldr	r3, [pc, #388]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b6e:	689b      	ldr	r3, [r3, #8]
 8010b70:	2b09      	cmp	r3, #9
 8010b72:	d10e      	bne.n	8010b92 <Key_Shift+0x52>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 8010b74:	4b60      	ldr	r3, [pc, #384]	; (8010cf8 <Key_Shift+0x1b8>)
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d103      	bne.n	8010b84 <Key_Shift+0x44>
 8010b7c:	4b5e      	ldr	r3, [pc, #376]	; (8010cf8 <Key_Shift+0x1b8>)
 8010b7e:	2201      	movs	r2, #1
 8010b80:	701a      	strb	r2, [r3, #0]
 8010b82:	e006      	b.n	8010b92 <Key_Shift+0x52>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 8010b84:	4b5c      	ldr	r3, [pc, #368]	; (8010cf8 <Key_Shift+0x1b8>)
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d102      	bne.n	8010b92 <Key_Shift+0x52>
 8010b8c:	4b5a      	ldr	r3, [pc, #360]	; (8010cf8 <Key_Shift+0x1b8>)
 8010b8e:	2200      	movs	r2, #0
 8010b90:	701a      	strb	r2, [r3, #0]
	}

	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) )
 8010b92:	4b58      	ldr	r3, [pc, #352]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d116      	bne.n	8010bc8 <Key_Shift+0x88>
 8010b9a:	4b56      	ldr	r3, [pc, #344]	; (8010cf4 <Key_Shift+0x1b4>)
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	2b05      	cmp	r3, #5
 8010ba0:	d112      	bne.n	8010bc8 <Key_Shift+0x88>
 8010ba2:	4b54      	ldr	r3, [pc, #336]	; (8010cf4 <Key_Shift+0x1b4>)
 8010ba4:	689b      	ldr	r3, [r3, #8]
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d10e      	bne.n	8010bc8 <Key_Shift+0x88>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 8010baa:	4b53      	ldr	r3, [pc, #332]	; (8010cf8 <Key_Shift+0x1b8>)
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d103      	bne.n	8010bba <Key_Shift+0x7a>
 8010bb2:	4b51      	ldr	r3, [pc, #324]	; (8010cf8 <Key_Shift+0x1b8>)
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	701a      	strb	r2, [r3, #0]
 8010bb8:	e006      	b.n	8010bc8 <Key_Shift+0x88>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 8010bba:	4b4f      	ldr	r3, [pc, #316]	; (8010cf8 <Key_Shift+0x1b8>)
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d102      	bne.n	8010bc8 <Key_Shift+0x88>
 8010bc2:	4b4d      	ldr	r3, [pc, #308]	; (8010cf8 <Key_Shift+0x1b8>)
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	701a      	strb	r2, [r3, #0]
	}

	if(xyz.coordinates1==2 && xyz.coordinates2!=0 && xyz.coordinates3==0)
 8010bc8:	4b4a      	ldr	r3, [pc, #296]	; (8010cf4 <Key_Shift+0x1b4>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b02      	cmp	r3, #2
 8010bce:	d000      	beq.n	8010bd2 <Key_Shift+0x92>
 8010bd0:	e08c      	b.n	8010cec <Key_Shift+0x1ac>
 8010bd2:	4b48      	ldr	r3, [pc, #288]	; (8010cf4 <Key_Shift+0x1b4>)
 8010bd4:	685b      	ldr	r3, [r3, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d100      	bne.n	8010bdc <Key_Shift+0x9c>
 8010bda:	e087      	b.n	8010cec <Key_Shift+0x1ac>
 8010bdc:	4b45      	ldr	r3, [pc, #276]	; (8010cf4 <Key_Shift+0x1b4>)
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d000      	beq.n	8010be6 <Key_Shift+0xa6>
 8010be4:	e082      	b.n	8010cec <Key_Shift+0x1ac>
	{
		/*vset*/
		if(xyz.coordinates2==2)
 8010be6:	4b43      	ldr	r3, [pc, #268]	; (8010cf4 <Key_Shift+0x1b4>)
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d13d      	bne.n	8010c6a <Key_Shift+0x12a>
		{
			if(Keys_Encoder_Mode==Encoder_Mode)
 8010bee:	4b43      	ldr	r3, [pc, #268]	; (8010cfc <Key_Shift+0x1bc>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d11a      	bne.n	8010c2c <Key_Shift+0xec>
			{
				Cursor_Position=0;
 8010bf6:	4b42      	ldr	r3, [pc, #264]	; (8010d00 <Key_Shift+0x1c0>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	701a      	strb	r2, [r3, #0]
				Cursor_flash_on();
 8010bfc:	f003 fe20 	bl	8014840 <Cursor_flash_on>

				String_Voltage[0]=' ';
 8010c00:	4b40      	ldr	r3, [pc, #256]	; (8010d04 <Key_Shift+0x1c4>)
 8010c02:	2220      	movs	r2, #32
 8010c04:	701a      	strb	r2, [r3, #0]
				String_Voltage[1]=' ';
 8010c06:	4b3f      	ldr	r3, [pc, #252]	; (8010d04 <Key_Shift+0x1c4>)
 8010c08:	2220      	movs	r2, #32
 8010c0a:	705a      	strb	r2, [r3, #1]
				String_Voltage[2]=' ';
 8010c0c:	4b3d      	ldr	r3, [pc, #244]	; (8010d04 <Key_Shift+0x1c4>)
 8010c0e:	2220      	movs	r2, #32
 8010c10:	709a      	strb	r2, [r3, #2]
				String_Voltage[3]=' ';
 8010c12:	4b3c      	ldr	r3, [pc, #240]	; (8010d04 <Key_Shift+0x1c4>)
 8010c14:	2220      	movs	r2, #32
 8010c16:	70da      	strb	r2, [r3, #3]
				String_Voltage[4]=' ';
 8010c18:	4b3a      	ldr	r3, [pc, #232]	; (8010d04 <Key_Shift+0x1c4>)
 8010c1a:	2220      	movs	r2, #32
 8010c1c:	711a      	strb	r2, [r3, #4]
				String_Voltage[5]=' ';
 8010c1e:	4b39      	ldr	r3, [pc, #228]	; (8010d04 <Key_Shift+0x1c4>)
 8010c20:	2220      	movs	r2, #32
 8010c22:	715a      	strb	r2, [r3, #5]
				String_Voltage[6]='V';
 8010c24:	4b37      	ldr	r3, [pc, #220]	; (8010d04 <Key_Shift+0x1c4>)
 8010c26:	2256      	movs	r2, #86	; 0x56
 8010c28:	719a      	strb	r2, [r3, #6]
		}

	}


}
 8010c2a:	e05f      	b.n	8010cec <Key_Shift+0x1ac>
			else if(Keys_Encoder_Mode==Keys_Mode)
 8010c2c:	4b33      	ldr	r3, [pc, #204]	; (8010cfc <Key_Shift+0x1bc>)
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d15b      	bne.n	8010cec <Key_Shift+0x1ac>
				Cursor_flash_off();
 8010c34:	f003 fdce 	bl	80147d4 <Cursor_flash_off>
				Cursor_Position=0;
 8010c38:	4b31      	ldr	r3, [pc, #196]	; (8010d00 <Key_Shift+0x1c0>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	701a      	strb	r2, [r3, #0]
				String_Voltage[0]=' ';
 8010c3e:	4b31      	ldr	r3, [pc, #196]	; (8010d04 <Key_Shift+0x1c4>)
 8010c40:	2220      	movs	r2, #32
 8010c42:	701a      	strb	r2, [r3, #0]
				String_Voltage[1]=' ';
 8010c44:	4b2f      	ldr	r3, [pc, #188]	; (8010d04 <Key_Shift+0x1c4>)
 8010c46:	2220      	movs	r2, #32
 8010c48:	705a      	strb	r2, [r3, #1]
				String_Voltage[2]=' ';
 8010c4a:	4b2e      	ldr	r3, [pc, #184]	; (8010d04 <Key_Shift+0x1c4>)
 8010c4c:	2220      	movs	r2, #32
 8010c4e:	709a      	strb	r2, [r3, #2]
				String_Voltage[3]=' ';
 8010c50:	4b2c      	ldr	r3, [pc, #176]	; (8010d04 <Key_Shift+0x1c4>)
 8010c52:	2220      	movs	r2, #32
 8010c54:	70da      	strb	r2, [r3, #3]
				String_Voltage[4]=' ';
 8010c56:	4b2b      	ldr	r3, [pc, #172]	; (8010d04 <Key_Shift+0x1c4>)
 8010c58:	2220      	movs	r2, #32
 8010c5a:	711a      	strb	r2, [r3, #4]
				String_Voltage[5]=' ';
 8010c5c:	4b29      	ldr	r3, [pc, #164]	; (8010d04 <Key_Shift+0x1c4>)
 8010c5e:	2220      	movs	r2, #32
 8010c60:	715a      	strb	r2, [r3, #5]
				String_Voltage[6]='V';
 8010c62:	4b28      	ldr	r3, [pc, #160]	; (8010d04 <Key_Shift+0x1c4>)
 8010c64:	2256      	movs	r2, #86	; 0x56
 8010c66:	719a      	strb	r2, [r3, #6]
}
 8010c68:	e040      	b.n	8010cec <Key_Shift+0x1ac>
		else if(xyz.coordinates2==1)
 8010c6a:	4b22      	ldr	r3, [pc, #136]	; (8010cf4 <Key_Shift+0x1b4>)
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	2b01      	cmp	r3, #1
 8010c70:	d13c      	bne.n	8010cec <Key_Shift+0x1ac>
			if(Keys_Encoder_Mode==Encoder_Mode)
 8010c72:	4b22      	ldr	r3, [pc, #136]	; (8010cfc <Key_Shift+0x1bc>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	d11a      	bne.n	8010cb0 <Key_Shift+0x170>
				Cursor_Position=9;
 8010c7a:	4b21      	ldr	r3, [pc, #132]	; (8010d00 <Key_Shift+0x1c0>)
 8010c7c:	2209      	movs	r2, #9
 8010c7e:	701a      	strb	r2, [r3, #0]
				Cursor_flash_on();
 8010c80:	f003 fdde 	bl	8014840 <Cursor_flash_on>
				String_Current[0]=' ';
 8010c84:	4b20      	ldr	r3, [pc, #128]	; (8010d08 <Key_Shift+0x1c8>)
 8010c86:	2220      	movs	r2, #32
 8010c88:	701a      	strb	r2, [r3, #0]
				String_Current[1]=' ';
 8010c8a:	4b1f      	ldr	r3, [pc, #124]	; (8010d08 <Key_Shift+0x1c8>)
 8010c8c:	2220      	movs	r2, #32
 8010c8e:	705a      	strb	r2, [r3, #1]
				String_Current[2]=' ';
 8010c90:	4b1d      	ldr	r3, [pc, #116]	; (8010d08 <Key_Shift+0x1c8>)
 8010c92:	2220      	movs	r2, #32
 8010c94:	709a      	strb	r2, [r3, #2]
				String_Current[3]=' ';
 8010c96:	4b1c      	ldr	r3, [pc, #112]	; (8010d08 <Key_Shift+0x1c8>)
 8010c98:	2220      	movs	r2, #32
 8010c9a:	70da      	strb	r2, [r3, #3]
				String_Current[4]=' ';
 8010c9c:	4b1a      	ldr	r3, [pc, #104]	; (8010d08 <Key_Shift+0x1c8>)
 8010c9e:	2220      	movs	r2, #32
 8010ca0:	711a      	strb	r2, [r3, #4]
				String_Current[5]=' ';
 8010ca2:	4b19      	ldr	r3, [pc, #100]	; (8010d08 <Key_Shift+0x1c8>)
 8010ca4:	2220      	movs	r2, #32
 8010ca6:	715a      	strb	r2, [r3, #5]
				String_Current[6]='A';
 8010ca8:	4b17      	ldr	r3, [pc, #92]	; (8010d08 <Key_Shift+0x1c8>)
 8010caa:	2241      	movs	r2, #65	; 0x41
 8010cac:	719a      	strb	r2, [r3, #6]
}
 8010cae:	e01d      	b.n	8010cec <Key_Shift+0x1ac>
			else if(Keys_Encoder_Mode==Keys_Mode)
 8010cb0:	4b12      	ldr	r3, [pc, #72]	; (8010cfc <Key_Shift+0x1bc>)
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d119      	bne.n	8010cec <Key_Shift+0x1ac>
				Cursor_flash_off();
 8010cb8:	f003 fd8c 	bl	80147d4 <Cursor_flash_off>
				Cursor_Position=9;
 8010cbc:	4b10      	ldr	r3, [pc, #64]	; (8010d00 <Key_Shift+0x1c0>)
 8010cbe:	2209      	movs	r2, #9
 8010cc0:	701a      	strb	r2, [r3, #0]
				String_Current[0]=' ';
 8010cc2:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <Key_Shift+0x1c8>)
 8010cc4:	2220      	movs	r2, #32
 8010cc6:	701a      	strb	r2, [r3, #0]
				String_Current[1]=' ';
 8010cc8:	4b0f      	ldr	r3, [pc, #60]	; (8010d08 <Key_Shift+0x1c8>)
 8010cca:	2220      	movs	r2, #32
 8010ccc:	705a      	strb	r2, [r3, #1]
				String_Current[2]=' ';
 8010cce:	4b0e      	ldr	r3, [pc, #56]	; (8010d08 <Key_Shift+0x1c8>)
 8010cd0:	2220      	movs	r2, #32
 8010cd2:	709a      	strb	r2, [r3, #2]
				String_Current[3]=' ';
 8010cd4:	4b0c      	ldr	r3, [pc, #48]	; (8010d08 <Key_Shift+0x1c8>)
 8010cd6:	2220      	movs	r2, #32
 8010cd8:	70da      	strb	r2, [r3, #3]
				String_Current[4]=' ';
 8010cda:	4b0b      	ldr	r3, [pc, #44]	; (8010d08 <Key_Shift+0x1c8>)
 8010cdc:	2220      	movs	r2, #32
 8010cde:	711a      	strb	r2, [r3, #4]
				String_Current[5]=' ';
 8010ce0:	4b09      	ldr	r3, [pc, #36]	; (8010d08 <Key_Shift+0x1c8>)
 8010ce2:	2220      	movs	r2, #32
 8010ce4:	715a      	strb	r2, [r3, #5]
				String_Current[6]='A';
 8010ce6:	4b08      	ldr	r3, [pc, #32]	; (8010d08 <Key_Shift+0x1c8>)
 8010ce8:	2241      	movs	r2, #65	; 0x41
 8010cea:	719a      	strb	r2, [r3, #6]
}
 8010cec:	46c0      	nop			; (mov r8, r8)
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	46c0      	nop			; (mov r8, r8)
 8010cf4:	20003b8c 	.word	0x20003b8c
 8010cf8:	20003b1b 	.word	0x20003b1b
 8010cfc:	20002fd2 	.word	0x20002fd2
 8010d00:	20003b22 	.word	0x20003b22
 8010d04:	20003058 	.word	0x20003058
 8010d08:	20003060 	.word	0x20003060

08010d0c <Key_ON_OFF>:
 * @brief  按键ON/OFF的扫描服务函数
 * @param  None
 * @retval None
 */
void Key_ON_OFF(void)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	af00      	add	r7, sp, #0

	/* actual interface */
	if((xyz.coordinates1==0)&&(xyz.coordinates2==0)&&(xyz.coordinates3==0))
 8010d10:	4b13      	ldr	r3, [pc, #76]	; (8010d60 <Key_ON_OFF+0x54>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d121      	bne.n	8010d5c <Key_ON_OFF+0x50>
 8010d18:	4b11      	ldr	r3, [pc, #68]	; (8010d60 <Key_ON_OFF+0x54>)
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d11d      	bne.n	8010d5c <Key_ON_OFF+0x50>
 8010d20:	4b0f      	ldr	r3, [pc, #60]	; (8010d60 <Key_ON_OFF+0x54>)
 8010d22:	689b      	ldr	r3, [r3, #8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d119      	bne.n	8010d5c <Key_ON_OFF+0x50>
	{
		if(OUTPUT_NOT_OUTPUT ==NOT_OUTPUT)
 8010d28:	4b0e      	ldr	r3, [pc, #56]	; (8010d64 <Key_ON_OFF+0x58>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d10c      	bne.n	8010d4a <Key_ON_OFF+0x3e>
		{
			OUTPUT_NOT_OUTPUT =OUTPUT;
 8010d30:	4b0c      	ldr	r3, [pc, #48]	; (8010d64 <Key_ON_OFF+0x58>)
 8010d32:	2201      	movs	r2, #1
 8010d34:	701a      	strb	r2, [r3, #0]
			if(Delay_Function_On_Off==Delay_Function_On)
 8010d36:	4b0c      	ldr	r3, [pc, #48]	; (8010d68 <Key_ON_OFF+0x5c>)
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d102      	bne.n	8010d44 <Key_ON_OFF+0x38>
			{
				TIM16_DELAY_ON();
 8010d3e:	f000 ff95 	bl	8011c6c <TIM16_DELAY_ON>
				return;
 8010d42:	e00b      	b.n	8010d5c <Key_ON_OFF+0x50>
			}

			power_on();
 8010d44:	f7fb fef2 	bl	800cb2c <power_on>
 8010d48:	e008      	b.n	8010d5c <Key_ON_OFF+0x50>

		}
		else if(OUTPUT_NOT_OUTPUT ==OUTPUT)
 8010d4a:	4b06      	ldr	r3, [pc, #24]	; (8010d64 <Key_ON_OFF+0x58>)
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d104      	bne.n	8010d5c <Key_ON_OFF+0x50>
		{
			OUTPUT_NOT_OUTPUT =NOT_OUTPUT;
 8010d52:	4b04      	ldr	r3, [pc, #16]	; (8010d64 <Key_ON_OFF+0x58>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]
			power_off();
 8010d58:	f7fb ff00 	bl	800cb5c <power_off>
		}

	}


}
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	20003b8c 	.word	0x20003b8c
 8010d64:	20003b1d 	.word	0x20003b1d
 8010d68:	20003b75 	.word	0x20003b75

08010d6c <Key_Preset_Lock>:
 * @brief  按键Preset/Lock的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Preset_Lock(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
	if(Shift_Not_Shift == Not_Shift)//当不复用该按键时，该按键为切换功能，切换实时值和设定值界面
 8010d70:	4b18      	ldr	r3, [pc, #96]	; (8010dd4 <Key_Preset_Lock+0x68>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d10b      	bne.n	8010d90 <Key_Preset_Lock+0x24>
	{
		Cursor_flash_off();
 8010d78:	f003 fd2c 	bl	80147d4 <Cursor_flash_off>
		xyz.coordinates1=9;
 8010d7c:	4b16      	ldr	r3, [pc, #88]	; (8010dd8 <Key_Preset_Lock+0x6c>)
 8010d7e:	2209      	movs	r2, #9
 8010d80:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=9;
 8010d82:	4b15      	ldr	r3, [pc, #84]	; (8010dd8 <Key_Preset_Lock+0x6c>)
 8010d84:	2209      	movs	r2, #9
 8010d86:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=9;
 8010d88:	4b13      	ldr	r3, [pc, #76]	; (8010dd8 <Key_Preset_Lock+0x6c>)
 8010d8a:	2209      	movs	r2, #9
 8010d8c:	609a      	str	r2, [r3, #8]
		{
			LOCK_UNLOCK = UNLOCK;
		}

	}
}
 8010d8e:	e01e      	b.n	8010dce <Key_Preset_Lock+0x62>
	else if(Shift_Not_Shift == Shift)
 8010d90:	4b10      	ldr	r3, [pc, #64]	; (8010dd4 <Key_Preset_Lock+0x68>)
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d11a      	bne.n	8010dce <Key_Preset_Lock+0x62>
		if(LOCK_UNLOCK == UNLOCK)
 8010d98:	4b10      	ldr	r3, [pc, #64]	; (8010ddc <Key_Preset_Lock+0x70>)
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d10f      	bne.n	8010dc0 <Key_Preset_Lock+0x54>
			LOCK_UNLOCK = LOCK;
 8010da0:	4b0e      	ldr	r3, [pc, #56]	; (8010ddc <Key_Preset_Lock+0x70>)
 8010da2:	2201      	movs	r2, #1
 8010da4:	701a      	strb	r2, [r3, #0]
			Shift_Not_Shift =Not_Shift;
 8010da6:	4b0b      	ldr	r3, [pc, #44]	; (8010dd4 <Key_Preset_Lock+0x68>)
 8010da8:	2200      	movs	r2, #0
 8010daa:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=0;
 8010dac:	4b0a      	ldr	r3, [pc, #40]	; (8010dd8 <Key_Preset_Lock+0x6c>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 8010db2:	4b09      	ldr	r3, [pc, #36]	; (8010dd8 <Key_Preset_Lock+0x6c>)
 8010db4:	2200      	movs	r2, #0
 8010db6:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 8010db8:	4b07      	ldr	r3, [pc, #28]	; (8010dd8 <Key_Preset_Lock+0x6c>)
 8010dba:	2200      	movs	r2, #0
 8010dbc:	609a      	str	r2, [r3, #8]
}
 8010dbe:	e006      	b.n	8010dce <Key_Preset_Lock+0x62>
		else if(LOCK_UNLOCK == LOCK)
 8010dc0:	4b06      	ldr	r3, [pc, #24]	; (8010ddc <Key_Preset_Lock+0x70>)
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d102      	bne.n	8010dce <Key_Preset_Lock+0x62>
			LOCK_UNLOCK = UNLOCK;
 8010dc8:	4b04      	ldr	r3, [pc, #16]	; (8010ddc <Key_Preset_Lock+0x70>)
 8010dca:	2200      	movs	r2, #0
 8010dcc:	701a      	strb	r2, [r3, #0]
}
 8010dce:	46c0      	nop			; (mov r8, r8)
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	20003b1b 	.word	0x20003b1b
 8010dd8:	20003b8c 	.word	0x20003b8c
 8010ddc:	20003b1f 	.word	0x20003b1f

08010de0 <Key_Recall_Save>:
 * @brief  按键Recall/Save的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Recall_Save(void)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	af00      	add	r7, sp, #0

	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (LOCK_UNLOCK==UNLOCK))
 8010de4:	4b31      	ldr	r3, [pc, #196]	; (8010eac <Key_Recall_Save+0xcc>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d10b      	bne.n	8010e04 <Key_Recall_Save+0x24>
 8010dec:	4b2f      	ldr	r3, [pc, #188]	; (8010eac <Key_Recall_Save+0xcc>)
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d107      	bne.n	8010e04 <Key_Recall_Save+0x24>
 8010df4:	4b2d      	ldr	r3, [pc, #180]	; (8010eac <Key_Recall_Save+0xcc>)
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d103      	bne.n	8010e04 <Key_Recall_Save+0x24>
 8010dfc:	4b2c      	ldr	r3, [pc, #176]	; (8010eb0 <Key_Recall_Save+0xd0>)
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00f      	beq.n	8010e24 <Key_Recall_Save+0x44>
	 || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9) && (LOCK_UNLOCK==UNLOCK)) )
 8010e04:	4b29      	ldr	r3, [pc, #164]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b09      	cmp	r3, #9
 8010e0a:	d14b      	bne.n	8010ea4 <Key_Recall_Save+0xc4>
 8010e0c:	4b27      	ldr	r3, [pc, #156]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	2b09      	cmp	r3, #9
 8010e12:	d147      	bne.n	8010ea4 <Key_Recall_Save+0xc4>
 8010e14:	4b25      	ldr	r3, [pc, #148]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e16:	689b      	ldr	r3, [r3, #8]
 8010e18:	2b09      	cmp	r3, #9
 8010e1a:	d143      	bne.n	8010ea4 <Key_Recall_Save+0xc4>
 8010e1c:	4b24      	ldr	r3, [pc, #144]	; (8010eb0 <Key_Recall_Save+0xd0>)
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d13f      	bne.n	8010ea4 <Key_Recall_Save+0xc4>
	{
		if(Shift_Not_Shift == Not_Shift)          //无复用，处于取界面
 8010e24:	4b23      	ldr	r3, [pc, #140]	; (8010eb4 <Key_Recall_Save+0xd4>)
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d120      	bne.n	8010e6e <Key_Recall_Save+0x8e>
		{
			Recall_Save_Number = 0;//组别
 8010e2c:	4b22      	ldr	r3, [pc, #136]	; (8010eb8 <Key_Recall_Save+0xd8>)
 8010e2e:	2200      	movs	r2, #0
 8010e30:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 8010e32:	4b1e      	ldr	r3, [pc, #120]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e34:	2203      	movs	r2, #3
 8010e36:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 8010e38:	4b1c      	ldr	r3, [pc, #112]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e3a:	2202      	movs	r2, #2
 8010e3c:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;//无用
 8010e3e:	4b1b      	ldr	r3, [pc, #108]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e40:	2201      	movs	r2, #1
 8010e42:	609a      	str	r2, [r3, #8]
			__HAL_TIM_DISABLE(&htim6);//cursor flash off
 8010e44:	4b1d      	ldr	r3, [pc, #116]	; (8010ebc <Key_Recall_Save+0xdc>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	6a1b      	ldr	r3, [r3, #32]
 8010e4a:	4a1d      	ldr	r2, [pc, #116]	; (8010ec0 <Key_Recall_Save+0xe0>)
 8010e4c:	4013      	ands	r3, r2
 8010e4e:	d129      	bne.n	8010ea4 <Key_Recall_Save+0xc4>
 8010e50:	4b1a      	ldr	r3, [pc, #104]	; (8010ebc <Key_Recall_Save+0xdc>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	6a1b      	ldr	r3, [r3, #32]
 8010e56:	4a1b      	ldr	r2, [pc, #108]	; (8010ec4 <Key_Recall_Save+0xe4>)
 8010e58:	4013      	ands	r3, r2
 8010e5a:	d123      	bne.n	8010ea4 <Key_Recall_Save+0xc4>
 8010e5c:	4b17      	ldr	r3, [pc, #92]	; (8010ebc <Key_Recall_Save+0xdc>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	4b16      	ldr	r3, [pc, #88]	; (8010ebc <Key_Recall_Save+0xdc>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2101      	movs	r1, #1
 8010e68:	438a      	bics	r2, r1
 8010e6a:	601a      	str	r2, [r3, #0]
		}

	}


}
 8010e6c:	e01a      	b.n	8010ea4 <Key_Recall_Save+0xc4>
		else if(Shift_Not_Shift == Shift)//save
 8010e6e:	4b11      	ldr	r3, [pc, #68]	; (8010eb4 <Key_Recall_Save+0xd4>)
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d116      	bne.n	8010ea4 <Key_Recall_Save+0xc4>
			Recall_Save_Number = 0;//组别
 8010e76:	4b10      	ldr	r3, [pc, #64]	; (8010eb8 <Key_Recall_Save+0xd8>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 8010e7c:	4b0b      	ldr	r3, [pc, #44]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e7e:	2203      	movs	r2, #3
 8010e80:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8010e82:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e84:	2201      	movs	r2, #1
 8010e86:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8010e88:	4b08      	ldr	r3, [pc, #32]	; (8010eac <Key_Recall_Save+0xcc>)
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift = Not_Shift;
 8010e8e:	4b09      	ldr	r3, [pc, #36]	; (8010eb4 <Key_Recall_Save+0xd4>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim6);//cursor flash off
 8010e94:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <Key_Recall_Save+0xdc>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	4b08      	ldr	r3, [pc, #32]	; (8010ebc <Key_Recall_Save+0xdc>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2101      	movs	r1, #1
 8010ea0:	430a      	orrs	r2, r1
 8010ea2:	601a      	str	r2, [r3, #0]
}
 8010ea4:	46c0      	nop			; (mov r8, r8)
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	46c0      	nop			; (mov r8, r8)
 8010eac:	20003b8c 	.word	0x20003b8c
 8010eb0:	20003b1f 	.word	0x20003b1f
 8010eb4:	20003b1b 	.word	0x20003b1b
 8010eb8:	20003b21 	.word	0x20003b21
 8010ebc:	200034c8 	.word	0x200034c8
 8010ec0:	00001111 	.word	0x00001111
 8010ec4:	00000444 	.word	0x00000444

08010ec8 <Key_Up>:
 * @brief  按键Up的扫描服务函数(Cursor_Position move)
 * @param	None
 * @retval None
 */
void Key_Up(void)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	af00      	add	r7, sp, #0
	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010ecc:	4ba8      	ldr	r3, [pc, #672]	; (8011170 <Key_Up+0x2a8>)
 8010ece:	681b      	ldr	r3, [r3, #0]

		;

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010ed0:	4ba7      	ldr	r3, [pc, #668]	; (8011170 <Key_Up+0x2a8>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d110      	bne.n	8010efa <Key_Up+0x32>
 8010ed8:	4ba5      	ldr	r3, [pc, #660]	; (8011170 <Key_Up+0x2a8>)
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d10c      	bne.n	8010efa <Key_Up+0x32>
	{
		if(xyz.coordinates2==8) xyz.coordinates2=1;
 8010ee0:	4ba3      	ldr	r3, [pc, #652]	; (8011170 <Key_Up+0x2a8>)
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	2b08      	cmp	r3, #8
 8010ee6:	d103      	bne.n	8010ef0 <Key_Up+0x28>
 8010ee8:	4ba1      	ldr	r3, [pc, #644]	; (8011170 <Key_Up+0x2a8>)
 8010eea:	2201      	movs	r2, #1
 8010eec:	605a      	str	r2, [r3, #4]
 8010eee:	e004      	b.n	8010efa <Key_Up+0x32>
		else 					xyz.coordinates2++;
 8010ef0:	4b9f      	ldr	r3, [pc, #636]	; (8011170 <Key_Up+0x2a8>)
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	1c5a      	adds	r2, r3, #1
 8010ef6:	4b9e      	ldr	r3, [pc, #632]	; (8011170 <Key_Up+0x2a8>)
 8010ef8:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 8010efa:	4b9d      	ldr	r3, [pc, #628]	; (8011170 <Key_Up+0x2a8>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d11b      	bne.n	8010f3a <Key_Up+0x72>
 8010f02:	4b9b      	ldr	r3, [pc, #620]	; (8011170 <Key_Up+0x2a8>)
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d117      	bne.n	8010f3a <Key_Up+0x72>
 8010f0a:	4b99      	ldr	r3, [pc, #612]	; (8011170 <Key_Up+0x2a8>)
 8010f0c:	689b      	ldr	r3, [r3, #8]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d113      	bne.n	8010f3a <Key_Up+0x72>
	{
		Cursor_Position++;
 8010f12:	4b98      	ldr	r3, [pc, #608]	; (8011174 <Key_Up+0x2ac>)
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	3301      	adds	r3, #1
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	4b96      	ldr	r3, [pc, #600]	; (8011174 <Key_Up+0x2ac>)
 8010f1c:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3)	Cursor_Position=4;
 8010f1e:	4b95      	ldr	r3, [pc, #596]	; (8011174 <Key_Up+0x2ac>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	2b03      	cmp	r3, #3
 8010f24:	d102      	bne.n	8010f2c <Key_Up+0x64>
 8010f26:	4b93      	ldr	r3, [pc, #588]	; (8011174 <Key_Up+0x2ac>)
 8010f28:	2204      	movs	r2, #4
 8010f2a:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6)	Cursor_Position=0;
 8010f2c:	4b91      	ldr	r3, [pc, #580]	; (8011174 <Key_Up+0x2ac>)
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b06      	cmp	r3, #6
 8010f32:	d102      	bne.n	8010f3a <Key_Up+0x72>
 8010f34:	4b8f      	ldr	r3, [pc, #572]	; (8011174 <Key_Up+0x2ac>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	701a      	strb	r2, [r3, #0]
	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8010f3a:	4b8d      	ldr	r3, [pc, #564]	; (8011170 <Key_Up+0x2a8>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	d11b      	bne.n	8010f7a <Key_Up+0xb2>
 8010f42:	4b8b      	ldr	r3, [pc, #556]	; (8011170 <Key_Up+0x2a8>)
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d117      	bne.n	8010f7a <Key_Up+0xb2>
 8010f4a:	4b89      	ldr	r3, [pc, #548]	; (8011170 <Key_Up+0x2a8>)
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d113      	bne.n	8010f7a <Key_Up+0xb2>
	{
		Cursor_Position++;
 8010f52:	4b88      	ldr	r3, [pc, #544]	; (8011174 <Key_Up+0x2ac>)
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	3301      	adds	r3, #1
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	4b86      	ldr	r3, [pc, #536]	; (8011174 <Key_Up+0x2ac>)
 8010f5c:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3+9)	Cursor_Position=4+9;
 8010f5e:	4b85      	ldr	r3, [pc, #532]	; (8011174 <Key_Up+0x2ac>)
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	2b0c      	cmp	r3, #12
 8010f64:	d102      	bne.n	8010f6c <Key_Up+0xa4>
 8010f66:	4b83      	ldr	r3, [pc, #524]	; (8011174 <Key_Up+0x2ac>)
 8010f68:	220d      	movs	r2, #13
 8010f6a:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6+9)	Cursor_Position=0+9;
 8010f6c:	4b81      	ldr	r3, [pc, #516]	; (8011174 <Key_Up+0x2ac>)
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	2b0f      	cmp	r3, #15
 8010f72:	d102      	bne.n	8010f7a <Key_Up+0xb2>
 8010f74:	4b7f      	ldr	r3, [pc, #508]	; (8011174 <Key_Up+0x2ac>)
 8010f76:	2209      	movs	r2, #9
 8010f78:	701a      	strb	r2, [r3, #0]
	}
	/*reset*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 8010f7a:	4b7d      	ldr	r3, [pc, #500]	; (8011170 <Key_Up+0x2a8>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d114      	bne.n	8010fac <Key_Up+0xe4>
 8010f82:	4b7b      	ldr	r3, [pc, #492]	; (8011170 <Key_Up+0x2a8>)
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d110      	bne.n	8010fac <Key_Up+0xe4>
 8010f8a:	4b79      	ldr	r3, [pc, #484]	; (8011170 <Key_Up+0x2a8>)
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d00c      	beq.n	8010fac <Key_Up+0xe4>
	{
		if(xyz.coordinates3==3)	xyz.coordinates3=1;
 8010f92:	4b77      	ldr	r3, [pc, #476]	; (8011170 <Key_Up+0x2a8>)
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	2b03      	cmp	r3, #3
 8010f98:	d103      	bne.n	8010fa2 <Key_Up+0xda>
 8010f9a:	4b75      	ldr	r3, [pc, #468]	; (8011170 <Key_Up+0x2a8>)
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	609a      	str	r2, [r3, #8]
 8010fa0:	e004      	b.n	8010fac <Key_Up+0xe4>
		else 					xyz.coordinates3++;
 8010fa2:	4b73      	ldr	r3, [pc, #460]	; (8011170 <Key_Up+0x2a8>)
 8010fa4:	689b      	ldr	r3, [r3, #8]
 8010fa6:	1c5a      	adds	r2, r3, #1
 8010fa8:	4b71      	ldr	r3, [pc, #452]	; (8011170 <Key_Up+0x2a8>)
 8010faa:	609a      	str	r2, [r3, #8]
	}
	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 8010fac:	4b70      	ldr	r3, [pc, #448]	; (8011170 <Key_Up+0x2a8>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d114      	bne.n	8010fde <Key_Up+0x116>
 8010fb4:	4b6e      	ldr	r3, [pc, #440]	; (8011170 <Key_Up+0x2a8>)
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	2b05      	cmp	r3, #5
 8010fba:	d110      	bne.n	8010fde <Key_Up+0x116>
 8010fbc:	4b6c      	ldr	r3, [pc, #432]	; (8011170 <Key_Up+0x2a8>)
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	dd0c      	ble.n	8010fde <Key_Up+0x116>
	{
		if(xyz.coordinates3==3)	xyz.coordinates3=2;
 8010fc4:	4b6a      	ldr	r3, [pc, #424]	; (8011170 <Key_Up+0x2a8>)
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	2b03      	cmp	r3, #3
 8010fca:	d103      	bne.n	8010fd4 <Key_Up+0x10c>
 8010fcc:	4b68      	ldr	r3, [pc, #416]	; (8011170 <Key_Up+0x2a8>)
 8010fce:	2202      	movs	r2, #2
 8010fd0:	609a      	str	r2, [r3, #8]
 8010fd2:	e004      	b.n	8010fde <Key_Up+0x116>
		else 					xyz.coordinates3++;
 8010fd4:	4b66      	ldr	r3, [pc, #408]	; (8011170 <Key_Up+0x2a8>)
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	1c5a      	adds	r2, r3, #1
 8010fda:	4b65      	ldr	r3, [pc, #404]	; (8011170 <Key_Up+0x2a8>)
 8010fdc:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 8010fde:	4b64      	ldr	r3, [pc, #400]	; (8011170 <Key_Up+0x2a8>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d107      	bne.n	8010ff6 <Key_Up+0x12e>
 8010fe6:	4b62      	ldr	r3, [pc, #392]	; (8011170 <Key_Up+0x2a8>)
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	2b02      	cmp	r3, #2
 8010fec:	d103      	bne.n	8010ff6 <Key_Up+0x12e>
 8010fee:	4b60      	ldr	r3, [pc, #384]	; (8011170 <Key_Up+0x2a8>)
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d00b      	beq.n	801100e <Key_Up+0x146>
 8010ff6:	4b5e      	ldr	r3, [pc, #376]	; (8011170 <Key_Up+0x2a8>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d117      	bne.n	801102e <Key_Up+0x166>
 8010ffe:	4b5c      	ldr	r3, [pc, #368]	; (8011170 <Key_Up+0x2a8>)
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	2b02      	cmp	r3, #2
 8011004:	d113      	bne.n	801102e <Key_Up+0x166>
 8011006:	4b5a      	ldr	r3, [pc, #360]	; (8011170 <Key_Up+0x2a8>)
 8011008:	689b      	ldr	r3, [r3, #8]
 801100a:	2b02      	cmp	r3, #2
 801100c:	d10f      	bne.n	801102e <Key_Up+0x166>
	{
		Cursor_Position=6;
 801100e:	4b59      	ldr	r3, [pc, #356]	; (8011174 <Key_Up+0x2ac>)
 8011010:	2206      	movs	r2, #6
 8011012:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==2)	xyz.coordinates3=1;
 8011014:	4b56      	ldr	r3, [pc, #344]	; (8011170 <Key_Up+0x2a8>)
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	2b02      	cmp	r3, #2
 801101a:	d103      	bne.n	8011024 <Key_Up+0x15c>
 801101c:	4b54      	ldr	r3, [pc, #336]	; (8011170 <Key_Up+0x2a8>)
 801101e:	2201      	movs	r2, #1
 8011020:	609a      	str	r2, [r3, #8]
 8011022:	e004      	b.n	801102e <Key_Up+0x166>
		else 					xyz.coordinates3++;
 8011024:	4b52      	ldr	r3, [pc, #328]	; (8011170 <Key_Up+0x2a8>)
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	1c5a      	adds	r2, r3, #1
 801102a:	4b51      	ldr	r3, [pc, #324]	; (8011170 <Key_Up+0x2a8>)
 801102c:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0)))
 801102e:	4b50      	ldr	r3, [pc, #320]	; (8011170 <Key_Up+0x2a8>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b03      	cmp	r3, #3
 8011034:	d107      	bne.n	8011046 <Key_Up+0x17e>
 8011036:	4b4e      	ldr	r3, [pc, #312]	; (8011170 <Key_Up+0x2a8>)
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d103      	bne.n	8011046 <Key_Up+0x17e>
 801103e:	4b4c      	ldr	r3, [pc, #304]	; (8011170 <Key_Up+0x2a8>)
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d10b      	bne.n	801105e <Key_Up+0x196>
 8011046:	4b4a      	ldr	r3, [pc, #296]	; (8011170 <Key_Up+0x2a8>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b03      	cmp	r3, #3
 801104c:	d13c      	bne.n	80110c8 <Key_Up+0x200>
 801104e:	4b48      	ldr	r3, [pc, #288]	; (8011170 <Key_Up+0x2a8>)
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	2b02      	cmp	r3, #2
 8011054:	d138      	bne.n	80110c8 <Key_Up+0x200>
 8011056:	4b46      	ldr	r3, [pc, #280]	; (8011170 <Key_Up+0x2a8>)
 8011058:	689b      	ldr	r3, [r3, #8]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d034      	beq.n	80110c8 <Key_Up+0x200>
	{
		Cursor_Position=0;
 801105e:	4b45      	ldr	r3, [pc, #276]	; (8011174 <Key_Up+0x2ac>)
 8011060:	2200      	movs	r2, #0
 8011062:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 8011064:	4b44      	ldr	r3, [pc, #272]	; (8011178 <Key_Up+0x2b0>)
 8011066:	2230      	movs	r2, #48	; 0x30
 8011068:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 801106a:	4b43      	ldr	r3, [pc, #268]	; (8011178 <Key_Up+0x2b0>)
 801106c:	2230      	movs	r2, #48	; 0x30
 801106e:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 8011070:	4b41      	ldr	r3, [pc, #260]	; (8011178 <Key_Up+0x2b0>)
 8011072:	2230      	movs	r2, #48	; 0x30
 8011074:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 8011076:	4b40      	ldr	r3, [pc, #256]	; (8011178 <Key_Up+0x2b0>)
 8011078:	222e      	movs	r2, #46	; 0x2e
 801107a:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 801107c:	4b3e      	ldr	r3, [pc, #248]	; (8011178 <Key_Up+0x2b0>)
 801107e:	2230      	movs	r2, #48	; 0x30
 8011080:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 8011082:	4b3d      	ldr	r3, [pc, #244]	; (8011178 <Key_Up+0x2b0>)
 8011084:	2230      	movs	r2, #48	; 0x30
 8011086:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 8011088:	4b3c      	ldr	r3, [pc, #240]	; (801117c <Key_Up+0x2b4>)
 801108a:	2230      	movs	r2, #48	; 0x30
 801108c:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 801108e:	4b3b      	ldr	r3, [pc, #236]	; (801117c <Key_Up+0x2b4>)
 8011090:	2230      	movs	r2, #48	; 0x30
 8011092:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 8011094:	4b39      	ldr	r3, [pc, #228]	; (801117c <Key_Up+0x2b4>)
 8011096:	2230      	movs	r2, #48	; 0x30
 8011098:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 801109a:	4b38      	ldr	r3, [pc, #224]	; (801117c <Key_Up+0x2b4>)
 801109c:	222e      	movs	r2, #46	; 0x2e
 801109e:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 80110a0:	4b36      	ldr	r3, [pc, #216]	; (801117c <Key_Up+0x2b4>)
 80110a2:	2230      	movs	r2, #48	; 0x30
 80110a4:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 80110a6:	4b35      	ldr	r3, [pc, #212]	; (801117c <Key_Up+0x2b4>)
 80110a8:	2230      	movs	r2, #48	; 0x30
 80110aa:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==9) Recall_Save_Number=0;
 80110ac:	4b34      	ldr	r3, [pc, #208]	; (8011180 <Key_Up+0x2b8>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b09      	cmp	r3, #9
 80110b2:	d103      	bne.n	80110bc <Key_Up+0x1f4>
 80110b4:	4b32      	ldr	r3, [pc, #200]	; (8011180 <Key_Up+0x2b8>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	701a      	strb	r2, [r3, #0]
 80110ba:	e005      	b.n	80110c8 <Key_Up+0x200>
		else 					  Recall_Save_Number++;
 80110bc:	4b30      	ldr	r3, [pc, #192]	; (8011180 <Key_Up+0x2b8>)
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	3301      	adds	r3, #1
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	4b2e      	ldr	r3, [pc, #184]	; (8011180 <Key_Up+0x2b8>)
 80110c6:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 80110c8:	4b29      	ldr	r3, [pc, #164]	; (8011170 <Key_Up+0x2a8>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d114      	bne.n	80110fa <Key_Up+0x232>
 80110d0:	4b27      	ldr	r3, [pc, #156]	; (8011170 <Key_Up+0x2a8>)
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	2b04      	cmp	r3, #4
 80110d6:	d110      	bne.n	80110fa <Key_Up+0x232>
 80110d8:	4b25      	ldr	r3, [pc, #148]	; (8011170 <Key_Up+0x2a8>)
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d00c      	beq.n	80110fa <Key_Up+0x232>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 80110e0:	4b23      	ldr	r3, [pc, #140]	; (8011170 <Key_Up+0x2a8>)
 80110e2:	689b      	ldr	r3, [r3, #8]
 80110e4:	2b03      	cmp	r3, #3
 80110e6:	d103      	bne.n	80110f0 <Key_Up+0x228>
 80110e8:	4b21      	ldr	r3, [pc, #132]	; (8011170 <Key_Up+0x2a8>)
 80110ea:	2201      	movs	r2, #1
 80110ec:	609a      	str	r2, [r3, #8]
 80110ee:	e004      	b.n	80110fa <Key_Up+0x232>
		else                    xyz.coordinates3++;
 80110f0:	4b1f      	ldr	r3, [pc, #124]	; (8011170 <Key_Up+0x2a8>)
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	1c5a      	adds	r2, r3, #1
 80110f6:	4b1e      	ldr	r3, [pc, #120]	; (8011170 <Key_Up+0x2a8>)
 80110f8:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 80110fa:	4b1d      	ldr	r3, [pc, #116]	; (8011170 <Key_Up+0x2a8>)
 80110fc:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 80110fe:	4b1c      	ldr	r3, [pc, #112]	; (8011170 <Key_Up+0x2a8>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b01      	cmp	r3, #1
 8011104:	d114      	bne.n	8011130 <Key_Up+0x268>
 8011106:	4b1a      	ldr	r3, [pc, #104]	; (8011170 <Key_Up+0x2a8>)
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	2b06      	cmp	r3, #6
 801110c:	d110      	bne.n	8011130 <Key_Up+0x268>
 801110e:	4b18      	ldr	r3, [pc, #96]	; (8011170 <Key_Up+0x2a8>)
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d00c      	beq.n	8011130 <Key_Up+0x268>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 8011116:	4b16      	ldr	r3, [pc, #88]	; (8011170 <Key_Up+0x2a8>)
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	2b03      	cmp	r3, #3
 801111c:	d103      	bne.n	8011126 <Key_Up+0x25e>
 801111e:	4b14      	ldr	r3, [pc, #80]	; (8011170 <Key_Up+0x2a8>)
 8011120:	2201      	movs	r2, #1
 8011122:	609a      	str	r2, [r3, #8]
 8011124:	e004      	b.n	8011130 <Key_Up+0x268>
		else                    xyz.coordinates3++;
 8011126:	4b12      	ldr	r3, [pc, #72]	; (8011170 <Key_Up+0x2a8>)
 8011128:	689b      	ldr	r3, [r3, #8]
 801112a:	1c5a      	adds	r2, r3, #1
 801112c:	4b10      	ldr	r3, [pc, #64]	; (8011170 <Key_Up+0x2a8>)
 801112e:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 8011130:	4b0f      	ldr	r3, [pc, #60]	; (8011170 <Key_Up+0x2a8>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d117      	bne.n	8011168 <Key_Up+0x2a0>
 8011138:	4b0d      	ldr	r3, [pc, #52]	; (8011170 <Key_Up+0x2a8>)
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	2b08      	cmp	r3, #8
 801113e:	d113      	bne.n	8011168 <Key_Up+0x2a0>
 8011140:	4b0b      	ldr	r3, [pc, #44]	; (8011170 <Key_Up+0x2a8>)
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d00f      	beq.n	8011168 <Key_Up+0x2a0>
	{
		Cursor_Position=9;
 8011148:	4b0a      	ldr	r3, [pc, #40]	; (8011174 <Key_Up+0x2ac>)
 801114a:	2209      	movs	r2, #9
 801114c:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==5) xyz.coordinates3=1;
 801114e:	4b08      	ldr	r3, [pc, #32]	; (8011170 <Key_Up+0x2a8>)
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	2b05      	cmp	r3, #5
 8011154:	d103      	bne.n	801115e <Key_Up+0x296>
 8011156:	4b06      	ldr	r3, [pc, #24]	; (8011170 <Key_Up+0x2a8>)
 8011158:	2201      	movs	r2, #1
 801115a:	609a      	str	r2, [r3, #8]
		else                    xyz.coordinates3++;

	}

}
 801115c:	e004      	b.n	8011168 <Key_Up+0x2a0>
		else                    xyz.coordinates3++;
 801115e:	4b04      	ldr	r3, [pc, #16]	; (8011170 <Key_Up+0x2a8>)
 8011160:	689b      	ldr	r3, [r3, #8]
 8011162:	1c5a      	adds	r2, r3, #1
 8011164:	4b02      	ldr	r3, [pc, #8]	; (8011170 <Key_Up+0x2a8>)
 8011166:	609a      	str	r2, [r3, #8]
}
 8011168:	46c0      	nop			; (mov r8, r8)
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	46c0      	nop			; (mov r8, r8)
 8011170:	20003b8c 	.word	0x20003b8c
 8011174:	20003b22 	.word	0x20003b22
 8011178:	2000301c 	.word	0x2000301c
 801117c:	20003028 	.word	0x20003028
 8011180:	20003b21 	.word	0x20003b21

08011184 <Key_Down>:
 * @brief  按键Up的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Down(void)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	af00      	add	r7, sp, #0


	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8011188:	4b9f      	ldr	r3, [pc, #636]	; (8011408 <Key_Down+0x284>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d10c      	bne.n	80111aa <Key_Down+0x26>
 8011190:	4b9d      	ldr	r3, [pc, #628]	; (8011408 <Key_Down+0x284>)
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d108      	bne.n	80111aa <Key_Down+0x26>
 8011198:	4b9b      	ldr	r3, [pc, #620]	; (8011408 <Key_Down+0x284>)
 801119a:	689b      	ldr	r3, [r3, #8]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d104      	bne.n	80111aa <Key_Down+0x26>
	{
		//get_voltage_current(READ_CURRENT);
		DAC_Cmd_send(1,0x0a,0x01);//fall
 80111a0:	2201      	movs	r2, #1
 80111a2:	210a      	movs	r1, #10
 80111a4:	2001      	movs	r0, #1
 80111a6:	f7fb fbc7 	bl	800c938 <DAC_Cmd_send>

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 80111aa:	4b97      	ldr	r3, [pc, #604]	; (8011408 <Key_Down+0x284>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d110      	bne.n	80111d4 <Key_Down+0x50>
 80111b2:	4b95      	ldr	r3, [pc, #596]	; (8011408 <Key_Down+0x284>)
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10c      	bne.n	80111d4 <Key_Down+0x50>
	{
		if(xyz.coordinates2==1) xyz.coordinates2=8;
 80111ba:	4b93      	ldr	r3, [pc, #588]	; (8011408 <Key_Down+0x284>)
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d103      	bne.n	80111ca <Key_Down+0x46>
 80111c2:	4b91      	ldr	r3, [pc, #580]	; (8011408 <Key_Down+0x284>)
 80111c4:	2208      	movs	r2, #8
 80111c6:	605a      	str	r2, [r3, #4]
 80111c8:	e004      	b.n	80111d4 <Key_Down+0x50>
		else 					xyz.coordinates2--;
 80111ca:	4b8f      	ldr	r3, [pc, #572]	; (8011408 <Key_Down+0x284>)
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	1e5a      	subs	r2, r3, #1
 80111d0:	4b8d      	ldr	r3, [pc, #564]	; (8011408 <Key_Down+0x284>)
 80111d2:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 80111d4:	4b8c      	ldr	r3, [pc, #560]	; (8011408 <Key_Down+0x284>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d11c      	bne.n	8011216 <Key_Down+0x92>
 80111dc:	4b8a      	ldr	r3, [pc, #552]	; (8011408 <Key_Down+0x284>)
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	2b02      	cmp	r3, #2
 80111e2:	d118      	bne.n	8011216 <Key_Down+0x92>
 80111e4:	4b88      	ldr	r3, [pc, #544]	; (8011408 <Key_Down+0x284>)
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d114      	bne.n	8011216 <Key_Down+0x92>
	{
		if(Cursor_Position==0)
 80111ec:	4b87      	ldr	r3, [pc, #540]	; (801140c <Key_Down+0x288>)
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d103      	bne.n	80111fc <Key_Down+0x78>
		{
			Cursor_Position=5;
 80111f4:	4b85      	ldr	r3, [pc, #532]	; (801140c <Key_Down+0x288>)
 80111f6:	2205      	movs	r2, #5
 80111f8:	701a      	strb	r2, [r3, #0]
			return;
 80111fa:	e103      	b.n	8011404 <Key_Down+0x280>
		}
		if(Cursor_Position==4)
 80111fc:	4b83      	ldr	r3, [pc, #524]	; (801140c <Key_Down+0x288>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	2b04      	cmp	r3, #4
 8011202:	d102      	bne.n	801120a <Key_Down+0x86>
		{
			Cursor_Position=3;
 8011204:	4b81      	ldr	r3, [pc, #516]	; (801140c <Key_Down+0x288>)
 8011206:	2203      	movs	r2, #3
 8011208:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 801120a:	4b80      	ldr	r3, [pc, #512]	; (801140c <Key_Down+0x288>)
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	3b01      	subs	r3, #1
 8011210:	b2da      	uxtb	r2, r3
 8011212:	4b7e      	ldr	r3, [pc, #504]	; (801140c <Key_Down+0x288>)
 8011214:	701a      	strb	r2, [r3, #0]

	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8011216:	4b7c      	ldr	r3, [pc, #496]	; (8011408 <Key_Down+0x284>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b02      	cmp	r3, #2
 801121c:	d11c      	bne.n	8011258 <Key_Down+0xd4>
 801121e:	4b7a      	ldr	r3, [pc, #488]	; (8011408 <Key_Down+0x284>)
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	2b01      	cmp	r3, #1
 8011224:	d118      	bne.n	8011258 <Key_Down+0xd4>
 8011226:	4b78      	ldr	r3, [pc, #480]	; (8011408 <Key_Down+0x284>)
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d114      	bne.n	8011258 <Key_Down+0xd4>
	{
		if(Cursor_Position==0+9)
 801122e:	4b77      	ldr	r3, [pc, #476]	; (801140c <Key_Down+0x288>)
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	2b09      	cmp	r3, #9
 8011234:	d103      	bne.n	801123e <Key_Down+0xba>
		{
			Cursor_Position=5+9;
 8011236:	4b75      	ldr	r3, [pc, #468]	; (801140c <Key_Down+0x288>)
 8011238:	220e      	movs	r2, #14
 801123a:	701a      	strb	r2, [r3, #0]
			return;
 801123c:	e0e2      	b.n	8011404 <Key_Down+0x280>
		}
		if(Cursor_Position==4+9)
 801123e:	4b73      	ldr	r3, [pc, #460]	; (801140c <Key_Down+0x288>)
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	2b0d      	cmp	r3, #13
 8011244:	d102      	bne.n	801124c <Key_Down+0xc8>
		{
			Cursor_Position=3+9;
 8011246:	4b71      	ldr	r3, [pc, #452]	; (801140c <Key_Down+0x288>)
 8011248:	220c      	movs	r2, #12
 801124a:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 801124c:	4b6f      	ldr	r3, [pc, #444]	; (801140c <Key_Down+0x288>)
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	3b01      	subs	r3, #1
 8011252:	b2da      	uxtb	r2, r3
 8011254:	4b6d      	ldr	r3, [pc, #436]	; (801140c <Key_Down+0x288>)
 8011256:	701a      	strb	r2, [r3, #0]
	}

	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 8011258:	4b6b      	ldr	r3, [pc, #428]	; (8011408 <Key_Down+0x284>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d114      	bne.n	801128a <Key_Down+0x106>
 8011260:	4b69      	ldr	r3, [pc, #420]	; (8011408 <Key_Down+0x284>)
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	2b05      	cmp	r3, #5
 8011266:	d110      	bne.n	801128a <Key_Down+0x106>
 8011268:	4b67      	ldr	r3, [pc, #412]	; (8011408 <Key_Down+0x284>)
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	2b01      	cmp	r3, #1
 801126e:	dd0c      	ble.n	801128a <Key_Down+0x106>
	{
		if(xyz.coordinates3==2)	xyz.coordinates3=3;
 8011270:	4b65      	ldr	r3, [pc, #404]	; (8011408 <Key_Down+0x284>)
 8011272:	689b      	ldr	r3, [r3, #8]
 8011274:	2b02      	cmp	r3, #2
 8011276:	d103      	bne.n	8011280 <Key_Down+0xfc>
 8011278:	4b63      	ldr	r3, [pc, #396]	; (8011408 <Key_Down+0x284>)
 801127a:	2203      	movs	r2, #3
 801127c:	609a      	str	r2, [r3, #8]
 801127e:	e004      	b.n	801128a <Key_Down+0x106>
		else 					xyz.coordinates3--;
 8011280:	4b61      	ldr	r3, [pc, #388]	; (8011408 <Key_Down+0x284>)
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	1e5a      	subs	r2, r3, #1
 8011286:	4b60      	ldr	r3, [pc, #384]	; (8011408 <Key_Down+0x284>)
 8011288:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 801128a:	4b5f      	ldr	r3, [pc, #380]	; (8011408 <Key_Down+0x284>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b01      	cmp	r3, #1
 8011290:	d107      	bne.n	80112a2 <Key_Down+0x11e>
 8011292:	4b5d      	ldr	r3, [pc, #372]	; (8011408 <Key_Down+0x284>)
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	2b02      	cmp	r3, #2
 8011298:	d103      	bne.n	80112a2 <Key_Down+0x11e>
 801129a:	4b5b      	ldr	r3, [pc, #364]	; (8011408 <Key_Down+0x284>)
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d00b      	beq.n	80112ba <Key_Down+0x136>
 80112a2:	4b59      	ldr	r3, [pc, #356]	; (8011408 <Key_Down+0x284>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d117      	bne.n	80112da <Key_Down+0x156>
 80112aa:	4b57      	ldr	r3, [pc, #348]	; (8011408 <Key_Down+0x284>)
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	2b02      	cmp	r3, #2
 80112b0:	d113      	bne.n	80112da <Key_Down+0x156>
 80112b2:	4b55      	ldr	r3, [pc, #340]	; (8011408 <Key_Down+0x284>)
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d10f      	bne.n	80112da <Key_Down+0x156>
	{
		Cursor_Position=6;
 80112ba:	4b54      	ldr	r3, [pc, #336]	; (801140c <Key_Down+0x288>)
 80112bc:	2206      	movs	r2, #6
 80112be:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1)	xyz.coordinates3=2;
 80112c0:	4b51      	ldr	r3, [pc, #324]	; (8011408 <Key_Down+0x284>)
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d103      	bne.n	80112d0 <Key_Down+0x14c>
 80112c8:	4b4f      	ldr	r3, [pc, #316]	; (8011408 <Key_Down+0x284>)
 80112ca:	2202      	movs	r2, #2
 80112cc:	609a      	str	r2, [r3, #8]
 80112ce:	e004      	b.n	80112da <Key_Down+0x156>
		else 					xyz.coordinates3--;
 80112d0:	4b4d      	ldr	r3, [pc, #308]	; (8011408 <Key_Down+0x284>)
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	1e5a      	subs	r2, r3, #1
 80112d6:	4b4c      	ldr	r3, [pc, #304]	; (8011408 <Key_Down+0x284>)
 80112d8:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 80112da:	4b4b      	ldr	r3, [pc, #300]	; (8011408 <Key_Down+0x284>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b03      	cmp	r3, #3
 80112e0:	d103      	bne.n	80112ea <Key_Down+0x166>
 80112e2:	4b49      	ldr	r3, [pc, #292]	; (8011408 <Key_Down+0x284>)
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d007      	beq.n	80112fa <Key_Down+0x176>
 80112ea:	4b47      	ldr	r3, [pc, #284]	; (8011408 <Key_Down+0x284>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2b03      	cmp	r3, #3
 80112f0:	d138      	bne.n	8011364 <Key_Down+0x1e0>
 80112f2:	4b45      	ldr	r3, [pc, #276]	; (8011408 <Key_Down+0x284>)
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d134      	bne.n	8011364 <Key_Down+0x1e0>
	{
		Cursor_Position=0;
 80112fa:	4b44      	ldr	r3, [pc, #272]	; (801140c <Key_Down+0x288>)
 80112fc:	2200      	movs	r2, #0
 80112fe:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 8011300:	4b43      	ldr	r3, [pc, #268]	; (8011410 <Key_Down+0x28c>)
 8011302:	2230      	movs	r2, #48	; 0x30
 8011304:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 8011306:	4b42      	ldr	r3, [pc, #264]	; (8011410 <Key_Down+0x28c>)
 8011308:	2230      	movs	r2, #48	; 0x30
 801130a:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 801130c:	4b40      	ldr	r3, [pc, #256]	; (8011410 <Key_Down+0x28c>)
 801130e:	2230      	movs	r2, #48	; 0x30
 8011310:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 8011312:	4b3f      	ldr	r3, [pc, #252]	; (8011410 <Key_Down+0x28c>)
 8011314:	222e      	movs	r2, #46	; 0x2e
 8011316:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 8011318:	4b3d      	ldr	r3, [pc, #244]	; (8011410 <Key_Down+0x28c>)
 801131a:	2230      	movs	r2, #48	; 0x30
 801131c:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 801131e:	4b3c      	ldr	r3, [pc, #240]	; (8011410 <Key_Down+0x28c>)
 8011320:	2230      	movs	r2, #48	; 0x30
 8011322:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 8011324:	4b3b      	ldr	r3, [pc, #236]	; (8011414 <Key_Down+0x290>)
 8011326:	2230      	movs	r2, #48	; 0x30
 8011328:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 801132a:	4b3a      	ldr	r3, [pc, #232]	; (8011414 <Key_Down+0x290>)
 801132c:	2230      	movs	r2, #48	; 0x30
 801132e:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 8011330:	4b38      	ldr	r3, [pc, #224]	; (8011414 <Key_Down+0x290>)
 8011332:	2230      	movs	r2, #48	; 0x30
 8011334:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 8011336:	4b37      	ldr	r3, [pc, #220]	; (8011414 <Key_Down+0x290>)
 8011338:	222e      	movs	r2, #46	; 0x2e
 801133a:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 801133c:	4b35      	ldr	r3, [pc, #212]	; (8011414 <Key_Down+0x290>)
 801133e:	2230      	movs	r2, #48	; 0x30
 8011340:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 8011342:	4b34      	ldr	r3, [pc, #208]	; (8011414 <Key_Down+0x290>)
 8011344:	2230      	movs	r2, #48	; 0x30
 8011346:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==0) Recall_Save_Number=9;
 8011348:	4b33      	ldr	r3, [pc, #204]	; (8011418 <Key_Down+0x294>)
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d103      	bne.n	8011358 <Key_Down+0x1d4>
 8011350:	4b31      	ldr	r3, [pc, #196]	; (8011418 <Key_Down+0x294>)
 8011352:	2209      	movs	r2, #9
 8011354:	701a      	strb	r2, [r3, #0]
 8011356:	e005      	b.n	8011364 <Key_Down+0x1e0>
		else 					   Recall_Save_Number--;
 8011358:	4b2f      	ldr	r3, [pc, #188]	; (8011418 <Key_Down+0x294>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	3b01      	subs	r3, #1
 801135e:	b2da      	uxtb	r2, r3
 8011360:	4b2d      	ldr	r3, [pc, #180]	; (8011418 <Key_Down+0x294>)
 8011362:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 8011364:	4b28      	ldr	r3, [pc, #160]	; (8011408 <Key_Down+0x284>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d114      	bne.n	8011396 <Key_Down+0x212>
 801136c:	4b26      	ldr	r3, [pc, #152]	; (8011408 <Key_Down+0x284>)
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	2b04      	cmp	r3, #4
 8011372:	d110      	bne.n	8011396 <Key_Down+0x212>
 8011374:	4b24      	ldr	r3, [pc, #144]	; (8011408 <Key_Down+0x284>)
 8011376:	689b      	ldr	r3, [r3, #8]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d00c      	beq.n	8011396 <Key_Down+0x212>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 801137c:	4b22      	ldr	r3, [pc, #136]	; (8011408 <Key_Down+0x284>)
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	2b01      	cmp	r3, #1
 8011382:	d103      	bne.n	801138c <Key_Down+0x208>
 8011384:	4b20      	ldr	r3, [pc, #128]	; (8011408 <Key_Down+0x284>)
 8011386:	2203      	movs	r2, #3
 8011388:	609a      	str	r2, [r3, #8]
 801138a:	e004      	b.n	8011396 <Key_Down+0x212>
		else                    xyz.coordinates3--;
 801138c:	4b1e      	ldr	r3, [pc, #120]	; (8011408 <Key_Down+0x284>)
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	1e5a      	subs	r2, r3, #1
 8011392:	4b1d      	ldr	r3, [pc, #116]	; (8011408 <Key_Down+0x284>)
 8011394:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 8011396:	4b1c      	ldr	r3, [pc, #112]	; (8011408 <Key_Down+0x284>)
 8011398:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 801139a:	4b1b      	ldr	r3, [pc, #108]	; (8011408 <Key_Down+0x284>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d114      	bne.n	80113cc <Key_Down+0x248>
 80113a2:	4b19      	ldr	r3, [pc, #100]	; (8011408 <Key_Down+0x284>)
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	2b06      	cmp	r3, #6
 80113a8:	d110      	bne.n	80113cc <Key_Down+0x248>
 80113aa:	4b17      	ldr	r3, [pc, #92]	; (8011408 <Key_Down+0x284>)
 80113ac:	689b      	ldr	r3, [r3, #8]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d00c      	beq.n	80113cc <Key_Down+0x248>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 80113b2:	4b15      	ldr	r3, [pc, #84]	; (8011408 <Key_Down+0x284>)
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d103      	bne.n	80113c2 <Key_Down+0x23e>
 80113ba:	4b13      	ldr	r3, [pc, #76]	; (8011408 <Key_Down+0x284>)
 80113bc:	2203      	movs	r2, #3
 80113be:	609a      	str	r2, [r3, #8]
 80113c0:	e004      	b.n	80113cc <Key_Down+0x248>
		else                    xyz.coordinates3--;
 80113c2:	4b11      	ldr	r3, [pc, #68]	; (8011408 <Key_Down+0x284>)
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	1e5a      	subs	r2, r3, #1
 80113c8:	4b0f      	ldr	r3, [pc, #60]	; (8011408 <Key_Down+0x284>)
 80113ca:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 80113cc:	4b0e      	ldr	r3, [pc, #56]	; (8011408 <Key_Down+0x284>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d117      	bne.n	8011404 <Key_Down+0x280>
 80113d4:	4b0c      	ldr	r3, [pc, #48]	; (8011408 <Key_Down+0x284>)
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	2b08      	cmp	r3, #8
 80113da:	d113      	bne.n	8011404 <Key_Down+0x280>
 80113dc:	4b0a      	ldr	r3, [pc, #40]	; (8011408 <Key_Down+0x284>)
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d00f      	beq.n	8011404 <Key_Down+0x280>
	{
		Cursor_Position=9;
 80113e4:	4b09      	ldr	r3, [pc, #36]	; (801140c <Key_Down+0x288>)
 80113e6:	2209      	movs	r2, #9
 80113e8:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1) xyz.coordinates3=5;
 80113ea:	4b07      	ldr	r3, [pc, #28]	; (8011408 <Key_Down+0x284>)
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d103      	bne.n	80113fa <Key_Down+0x276>
 80113f2:	4b05      	ldr	r3, [pc, #20]	; (8011408 <Key_Down+0x284>)
 80113f4:	2205      	movs	r2, #5
 80113f6:	609a      	str	r2, [r3, #8]
 80113f8:	e004      	b.n	8011404 <Key_Down+0x280>
		else                    xyz.coordinates3--;
 80113fa:	4b03      	ldr	r3, [pc, #12]	; (8011408 <Key_Down+0x284>)
 80113fc:	689b      	ldr	r3, [r3, #8]
 80113fe:	1e5a      	subs	r2, r3, #1
 8011400:	4b01      	ldr	r3, [pc, #4]	; (8011408 <Key_Down+0x284>)
 8011402:	609a      	str	r2, [r3, #8]

	}


}
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	20003b8c 	.word	0x20003b8c
 801140c:	20003b22 	.word	0x20003b22
 8011410:	2000301c 	.word	0x2000301c
 8011414:	20003028 	.word	0x20003028
 8011418:	20003b21 	.word	0x20003b21

0801141c <Key_ESC>:
 * @brief  按键ESC的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_ESC(void)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	af00      	add	r7, sp, #0
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8011420:	4b5b      	ldr	r3, [pc, #364]	; (8011590 <Key_ESC+0x174>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d10e      	bne.n	8011446 <Key_ESC+0x2a>
 8011428:	4b59      	ldr	r3, [pc, #356]	; (8011590 <Key_ESC+0x174>)
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d10a      	bne.n	8011446 <Key_ESC+0x2a>
 8011430:	4b57      	ldr	r3, [pc, #348]	; (8011590 <Key_ESC+0x174>)
 8011432:	689b      	ldr	r3, [r3, #8]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d106      	bne.n	8011446 <Key_ESC+0x2a>
	{
		COUNT_ESC++;
 8011438:	4b56      	ldr	r3, [pc, #344]	; (8011594 <Key_ESC+0x178>)
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	3301      	adds	r3, #1
 801143e:	b2da      	uxtb	r2, r3
 8011440:	4b54      	ldr	r3, [pc, #336]	; (8011594 <Key_ESC+0x178>)
 8011442:	701a      	strb	r2, [r3, #0]
		return;
 8011444:	e0a1      	b.n	801158a <Key_ESC+0x16e>
	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8011446:	4b52      	ldr	r3, [pc, #328]	; (8011590 <Key_ESC+0x174>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d10c      	bne.n	8011468 <Key_ESC+0x4c>
 801144e:	4b50      	ldr	r3, [pc, #320]	; (8011590 <Key_ESC+0x174>)
 8011450:	689b      	ldr	r3, [r3, #8]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d108      	bne.n	8011468 <Key_ESC+0x4c>
	{
		xyz.coordinates1=0;
 8011456:	4b4e      	ldr	r3, [pc, #312]	; (8011590 <Key_ESC+0x174>)
 8011458:	2200      	movs	r2, #0
 801145a:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 801145c:	4b4c      	ldr	r3, [pc, #304]	; (8011590 <Key_ESC+0x174>)
 801145e:	2200      	movs	r2, #0
 8011460:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8011462:	4b4b      	ldr	r3, [pc, #300]	; (8011590 <Key_ESC+0x174>)
 8011464:	2200      	movs	r2, #0
 8011466:	609a      	str	r2, [r3, #8]
	}
	/*second menu enter*/
	if( (xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 8011468:	4b49      	ldr	r3, [pc, #292]	; (8011590 <Key_ESC+0x174>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d10d      	bne.n	801148c <Key_ESC+0x70>
 8011470:	4b47      	ldr	r3, [pc, #284]	; (8011590 <Key_ESC+0x174>)
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d009      	beq.n	801148c <Key_ESC+0x70>
 8011478:	4b45      	ldr	r3, [pc, #276]	; (8011590 <Key_ESC+0x174>)
 801147a:	689b      	ldr	r3, [r3, #8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d005      	beq.n	801148c <Key_ESC+0x70>
	{
		Cursor_Position=0;
 8011480:	4b45      	ldr	r3, [pc, #276]	; (8011598 <Key_ESC+0x17c>)
 8011482:	2200      	movs	r2, #0
 8011484:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=0;
 8011486:	4b42      	ldr	r3, [pc, #264]	; (8011590 <Key_ESC+0x174>)
 8011488:	2200      	movs	r2, #0
 801148a:	609a      	str	r2, [r3, #8]
	}
	/*I——SET V——SET*/
	if( ((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0)) || ((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0)) )
 801148c:	4b40      	ldr	r3, [pc, #256]	; (8011590 <Key_ESC+0x174>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b02      	cmp	r3, #2
 8011492:	d107      	bne.n	80114a4 <Key_ESC+0x88>
 8011494:	4b3e      	ldr	r3, [pc, #248]	; (8011590 <Key_ESC+0x174>)
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d103      	bne.n	80114a4 <Key_ESC+0x88>
 801149c:	4b3c      	ldr	r3, [pc, #240]	; (8011590 <Key_ESC+0x174>)
 801149e:	689b      	ldr	r3, [r3, #8]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d00b      	beq.n	80114bc <Key_ESC+0xa0>
 80114a4:	4b3a      	ldr	r3, [pc, #232]	; (8011590 <Key_ESC+0x174>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	d110      	bne.n	80114ce <Key_ESC+0xb2>
 80114ac:	4b38      	ldr	r3, [pc, #224]	; (8011590 <Key_ESC+0x174>)
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d10c      	bne.n	80114ce <Key_ESC+0xb2>
 80114b4:	4b36      	ldr	r3, [pc, #216]	; (8011590 <Key_ESC+0x174>)
 80114b6:	689b      	ldr	r3, [r3, #8]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d108      	bne.n	80114ce <Key_ESC+0xb2>
	{
		xyz.coordinates1=0;
 80114bc:	4b34      	ldr	r3, [pc, #208]	; (8011590 <Key_ESC+0x174>)
 80114be:	2200      	movs	r2, #0
 80114c0:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 80114c2:	4b33      	ldr	r3, [pc, #204]	; (8011590 <Key_ESC+0x174>)
 80114c4:	2200      	movs	r2, #0
 80114c6:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 80114c8:	4b31      	ldr	r3, [pc, #196]	; (8011590 <Key_ESC+0x174>)
 80114ca:	2200      	movs	r2, #0
 80114cc:	609a      	str	r2, [r3, #8]
	}
	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3!=0))
 80114ce:	4b30      	ldr	r3, [pc, #192]	; (8011590 <Key_ESC+0x174>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d10a      	bne.n	80114ec <Key_ESC+0xd0>
 80114d6:	4b2e      	ldr	r3, [pc, #184]	; (8011590 <Key_ESC+0x174>)
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	2b05      	cmp	r3, #5
 80114dc:	d106      	bne.n	80114ec <Key_ESC+0xd0>
 80114de:	4b2c      	ldr	r3, [pc, #176]	; (8011590 <Key_ESC+0x174>)
 80114e0:	689b      	ldr	r3, [r3, #8]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d002      	beq.n	80114ec <Key_ESC+0xd0>
	{
		xyz.coordinates3=0;
 80114e6:	4b2a      	ldr	r3, [pc, #168]	; (8011590 <Key_ESC+0x174>)
 80114e8:	2200      	movs	r2, #0
 80114ea:	609a      	str	r2, [r3, #8]
	}

	/*I rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1))
 80114ec:	4b28      	ldr	r3, [pc, #160]	; (8011590 <Key_ESC+0x174>)
 80114ee:	681b      	ldr	r3, [r3, #0]
	{

	}
	/*V rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2))
 80114f0:	4b27      	ldr	r3, [pc, #156]	; (8011590 <Key_ESC+0x174>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d10a      	bne.n	801150e <Key_ESC+0xf2>
 80114f8:	4b25      	ldr	r3, [pc, #148]	; (8011590 <Key_ESC+0x174>)
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d106      	bne.n	801150e <Key_ESC+0xf2>
 8011500:	4b23      	ldr	r3, [pc, #140]	; (8011590 <Key_ESC+0x174>)
 8011502:	689b      	ldr	r3, [r3, #8]
 8011504:	2b02      	cmp	r3, #2
 8011506:	d102      	bne.n	801150e <Key_ESC+0xf2>
	{
		xyz.coordinates3=0;
 8011508:	4b21      	ldr	r3, [pc, #132]	; (8011590 <Key_ESC+0x174>)
 801150a:	2200      	movs	r2, #0
 801150c:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 801150e:	4b20      	ldr	r3, [pc, #128]	; (8011590 <Key_ESC+0x174>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2b03      	cmp	r3, #3
 8011514:	d103      	bne.n	801151e <Key_ESC+0x102>
 8011516:	4b1e      	ldr	r3, [pc, #120]	; (8011590 <Key_ESC+0x174>)
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	2b01      	cmp	r3, #1
 801151c:	d007      	beq.n	801152e <Key_ESC+0x112>
 801151e:	4b1c      	ldr	r3, [pc, #112]	; (8011590 <Key_ESC+0x174>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b03      	cmp	r3, #3
 8011524:	d10e      	bne.n	8011544 <Key_ESC+0x128>
 8011526:	4b1a      	ldr	r3, [pc, #104]	; (8011590 <Key_ESC+0x174>)
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	2b02      	cmp	r3, #2
 801152c:	d10a      	bne.n	8011544 <Key_ESC+0x128>
	{
		xyz.coordinates1=0;
 801152e:	4b18      	ldr	r3, [pc, #96]	; (8011590 <Key_ESC+0x174>)
 8011530:	2200      	movs	r2, #0
 8011532:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8011534:	4b16      	ldr	r3, [pc, #88]	; (8011590 <Key_ESC+0x174>)
 8011536:	2200      	movs	r2, #0
 8011538:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 801153a:	4b15      	ldr	r3, [pc, #84]	; (8011590 <Key_ESC+0x174>)
 801153c:	2200      	movs	r2, #0
 801153e:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 8011540:	f003 f948 	bl	80147d4 <Cursor_flash_off>
	}
	/*protect*/
	if( (xyz.coordinates1==4) && (xyz.coordinates2==1) )
 8011544:	4b12      	ldr	r3, [pc, #72]	; (8011590 <Key_ESC+0x174>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b04      	cmp	r3, #4
 801154a:	d105      	bne.n	8011558 <Key_ESC+0x13c>
 801154c:	4b10      	ldr	r3, [pc, #64]	; (8011590 <Key_ESC+0x174>)
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d101      	bne.n	8011558 <Key_ESC+0x13c>
	{

		NVIC_SystemReset();
 8011554:	f7fc ffa6 	bl	800e4a4 <__NVIC_SystemReset>

	}
	if( (xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 8011558:	4b0d      	ldr	r3, [pc, #52]	; (8011590 <Key_ESC+0x174>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2b09      	cmp	r3, #9
 801155e:	d112      	bne.n	8011586 <Key_ESC+0x16a>
 8011560:	4b0b      	ldr	r3, [pc, #44]	; (8011590 <Key_ESC+0x174>)
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	2b09      	cmp	r3, #9
 8011566:	d10e      	bne.n	8011586 <Key_ESC+0x16a>
 8011568:	4b09      	ldr	r3, [pc, #36]	; (8011590 <Key_ESC+0x174>)
 801156a:	689b      	ldr	r3, [r3, #8]
 801156c:	2b09      	cmp	r3, #9
 801156e:	d10a      	bne.n	8011586 <Key_ESC+0x16a>
	{
		xyz.coordinates1=0;
 8011570:	4b07      	ldr	r3, [pc, #28]	; (8011590 <Key_ESC+0x174>)
 8011572:	2200      	movs	r2, #0
 8011574:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8011576:	4b06      	ldr	r3, [pc, #24]	; (8011590 <Key_ESC+0x174>)
 8011578:	2200      	movs	r2, #0
 801157a:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 801157c:	4b04      	ldr	r3, [pc, #16]	; (8011590 <Key_ESC+0x174>)
 801157e:	2200      	movs	r2, #0
 8011580:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 8011582:	f003 f927 	bl	80147d4 <Cursor_flash_off>
	}

	Cursor_flash_off();
 8011586:	f003 f925 	bl	80147d4 <Cursor_flash_off>


}
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	46c0      	nop			; (mov r8, r8)
 8011590:	20003b8c 	.word	0x20003b8c
 8011594:	20003b20 	.word	0x20003b20
 8011598:	20003b22 	.word	0x20003b22

0801159c <key_scan>:
 * @brief  按键扫描函数
 * @param	None
 * @retval None
 */
void key_scan(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
	if(keys_EN==DISABLE) return;
 80115a2:	4b97      	ldr	r3, [pc, #604]	; (8011800 <key_scan+0x264>)
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d100      	bne.n	80115ac <key_scan+0x10>
 80115aa:	e11c      	b.n	80117e6 <key_scan+0x24a>
	static int Press_Status2;
	static int Press_Status3;


	/*IO RESET*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);
 80115ac:	2380      	movs	r3, #128	; 0x80
 80115ae:	019b      	lsls	r3, r3, #6
 80115b0:	4894      	ldr	r0, [pc, #592]	; (8011804 <key_scan+0x268>)
 80115b2:	2201      	movs	r2, #1
 80115b4:	0019      	movs	r1, r3
 80115b6:	f7f5 fd60 	bl	800707a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);
 80115ba:	2380      	movs	r3, #128	; 0x80
 80115bc:	01db      	lsls	r3, r3, #7
 80115be:	4891      	ldr	r0, [pc, #580]	; (8011804 <key_scan+0x268>)
 80115c0:	2201      	movs	r2, #1
 80115c2:	0019      	movs	r1, r3
 80115c4:	f7f5 fd59 	bl	800707a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_SET);
 80115c8:	2380      	movs	r3, #128	; 0x80
 80115ca:	021b      	lsls	r3, r3, #8
 80115cc:	488d      	ldr	r0, [pc, #564]	; (8011804 <key_scan+0x268>)
 80115ce:	2201      	movs	r2, #1
 80115d0:	0019      	movs	r1, r3
 80115d2:	f7f5 fd52 	bl	800707a <HAL_GPIO_WritePin>

	/*Scan the firest row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_RESET);
 80115d6:	2380      	movs	r3, #128	; 0x80
 80115d8:	019b      	lsls	r3, r3, #6
 80115da:	488a      	ldr	r0, [pc, #552]	; (8011804 <key_scan+0x268>)
 80115dc:	2200      	movs	r2, #0
 80115de:	0019      	movs	r1, r3
 80115e0:	f7f5 fd4b 	bl	800707a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 80115e4:	1dfb      	adds	r3, r7, #7
 80115e6:	2200      	movs	r2, #0
 80115e8:	701a      	strb	r2, [r3, #0]
 80115ea:	e004      	b.n	80115f6 <key_scan+0x5a>
 80115ec:	1dfb      	adds	r3, r7, #7
 80115ee:	781a      	ldrb	r2, [r3, #0]
 80115f0:	1dfb      	adds	r3, r7, #7
 80115f2:	3201      	adds	r2, #1
 80115f4:	701a      	strb	r2, [r3, #0]
 80115f6:	1dfb      	adds	r3, r7, #7
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	2b63      	cmp	r3, #99	; 0x63
 80115fc:	d9f6      	bls.n	80115ec <key_scan+0x50>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 80115fe:	4b82      	ldr	r3, [pc, #520]	; (8011808 <key_scan+0x26c>)
 8011600:	691b      	ldr	r3, [r3, #16]
 8011602:	b29b      	uxth	r3, r3
 8011604:	227f      	movs	r2, #127	; 0x7f
 8011606:	4013      	ands	r3, r2
 8011608:	b29a      	uxth	r2, r3
 801160a:	4b80      	ldr	r3, [pc, #512]	; (801180c <key_scan+0x270>)
 801160c:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 801160e:	4b7f      	ldr	r3, [pc, #508]	; (801180c <key_scan+0x270>)
 8011610:	881b      	ldrh	r3, [r3, #0]
 8011612:	2b7f      	cmp	r3, #127	; 0x7f
 8011614:	d017      	beq.n	8011646 <key_scan+0xaa>
	{
		Press_Status1=1;//第一行按键按下
 8011616:	4b7e      	ldr	r3, [pc, #504]	; (8011810 <key_scan+0x274>)
 8011618:	2201      	movs	r2, #1
 801161a:	601a      	str	r2, [r3, #0]
		if(++Key_Count1>5)
 801161c:	4b7d      	ldr	r3, [pc, #500]	; (8011814 <key_scan+0x278>)
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	3301      	adds	r3, #1
 8011622:	b2da      	uxtb	r2, r3
 8011624:	4b7b      	ldr	r3, [pc, #492]	; (8011814 <key_scan+0x278>)
 8011626:	701a      	strb	r2, [r3, #0]
 8011628:	4b7a      	ldr	r3, [pc, #488]	; (8011814 <key_scan+0x278>)
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	2b05      	cmp	r3, #5
 801162e:	d90d      	bls.n	801164c <key_scan+0xb0>
		{
			Row_Flag=1;
 8011630:	4b79      	ldr	r3, [pc, #484]	; (8011818 <key_scan+0x27c>)
 8011632:	2201      	movs	r2, #1
 8011634:	601a      	str	r2, [r3, #0]
			Key_Count1=5;
 8011636:	4b77      	ldr	r3, [pc, #476]	; (8011814 <key_scan+0x278>)
 8011638:	2205      	movs	r2, #5
 801163a:	701a      	strb	r2, [r3, #0]
			Key_Value1 = IO_Status;	//记下键值
 801163c:	4b73      	ldr	r3, [pc, #460]	; (801180c <key_scan+0x270>)
 801163e:	881a      	ldrh	r2, [r3, #0]
 8011640:	4b76      	ldr	r3, [pc, #472]	; (801181c <key_scan+0x280>)
 8011642:	801a      	strh	r2, [r3, #0]
 8011644:	e002      	b.n	801164c <key_scan+0xb0>
		}

	}
	else Press_Status1=0;
 8011646:	4b72      	ldr	r3, [pc, #456]	; (8011810 <key_scan+0x274>)
 8011648:	2200      	movs	r2, #0
 801164a:	601a      	str	r2, [r3, #0]
	/*scan the second row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);//第一行恢复
 801164c:	2380      	movs	r3, #128	; 0x80
 801164e:	019b      	lsls	r3, r3, #6
 8011650:	486c      	ldr	r0, [pc, #432]	; (8011804 <key_scan+0x268>)
 8011652:	2201      	movs	r2, #1
 8011654:	0019      	movs	r1, r3
 8011656:	f7f5 fd10 	bl	800707a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_RESET);//拉低第二行
 801165a:	2380      	movs	r3, #128	; 0x80
 801165c:	01db      	lsls	r3, r3, #7
 801165e:	4869      	ldr	r0, [pc, #420]	; (8011804 <key_scan+0x268>)
 8011660:	2200      	movs	r2, #0
 8011662:	0019      	movs	r1, r3
 8011664:	f7f5 fd09 	bl	800707a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 8011668:	1dbb      	adds	r3, r7, #6
 801166a:	2200      	movs	r2, #0
 801166c:	701a      	strb	r2, [r3, #0]
 801166e:	e004      	b.n	801167a <key_scan+0xde>
 8011670:	1dbb      	adds	r3, r7, #6
 8011672:	781a      	ldrb	r2, [r3, #0]
 8011674:	1dbb      	adds	r3, r7, #6
 8011676:	3201      	adds	r2, #1
 8011678:	701a      	strb	r2, [r3, #0]
 801167a:	1dbb      	adds	r3, r7, #6
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	2b63      	cmp	r3, #99	; 0x63
 8011680:	d9f6      	bls.n	8011670 <key_scan+0xd4>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 8011682:	4b61      	ldr	r3, [pc, #388]	; (8011808 <key_scan+0x26c>)
 8011684:	691b      	ldr	r3, [r3, #16]
 8011686:	b29b      	uxth	r3, r3
 8011688:	227f      	movs	r2, #127	; 0x7f
 801168a:	4013      	ands	r3, r2
 801168c:	b29a      	uxth	r2, r3
 801168e:	4b5f      	ldr	r3, [pc, #380]	; (801180c <key_scan+0x270>)
 8011690:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 8011692:	4b5e      	ldr	r3, [pc, #376]	; (801180c <key_scan+0x270>)
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	2b7f      	cmp	r3, #127	; 0x7f
 8011698:	d017      	beq.n	80116ca <key_scan+0x12e>
	{
		Press_Status2=1;//第二行按键按下
 801169a:	4b61      	ldr	r3, [pc, #388]	; (8011820 <key_scan+0x284>)
 801169c:	2201      	movs	r2, #1
 801169e:	601a      	str	r2, [r3, #0]
		if(++Key_Count2>5)
 80116a0:	4b60      	ldr	r3, [pc, #384]	; (8011824 <key_scan+0x288>)
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	3301      	adds	r3, #1
 80116a6:	b2da      	uxtb	r2, r3
 80116a8:	4b5e      	ldr	r3, [pc, #376]	; (8011824 <key_scan+0x288>)
 80116aa:	701a      	strb	r2, [r3, #0]
 80116ac:	4b5d      	ldr	r3, [pc, #372]	; (8011824 <key_scan+0x288>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	2b05      	cmp	r3, #5
 80116b2:	d90d      	bls.n	80116d0 <key_scan+0x134>
		{
			Row_Flag=2;
 80116b4:	4b58      	ldr	r3, [pc, #352]	; (8011818 <key_scan+0x27c>)
 80116b6:	2202      	movs	r2, #2
 80116b8:	601a      	str	r2, [r3, #0]
			Key_Count2=5;
 80116ba:	4b5a      	ldr	r3, [pc, #360]	; (8011824 <key_scan+0x288>)
 80116bc:	2205      	movs	r2, #5
 80116be:	701a      	strb	r2, [r3, #0]
			Key_Value2 = IO_Status;	//记下键值
 80116c0:	4b52      	ldr	r3, [pc, #328]	; (801180c <key_scan+0x270>)
 80116c2:	881a      	ldrh	r2, [r3, #0]
 80116c4:	4b58      	ldr	r3, [pc, #352]	; (8011828 <key_scan+0x28c>)
 80116c6:	801a      	strh	r2, [r3, #0]
 80116c8:	e002      	b.n	80116d0 <key_scan+0x134>
		}
	}
	else Press_Status2=0;
 80116ca:	4b55      	ldr	r3, [pc, #340]	; (8011820 <key_scan+0x284>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	601a      	str	r2, [r3, #0]
	/*scan the third row */
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);//第二行恢复
 80116d0:	2380      	movs	r3, #128	; 0x80
 80116d2:	01db      	lsls	r3, r3, #7
 80116d4:	484b      	ldr	r0, [pc, #300]	; (8011804 <key_scan+0x268>)
 80116d6:	2201      	movs	r2, #1
 80116d8:	0019      	movs	r1, r3
 80116da:	f7f5 fcce 	bl	800707a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_RESET);//第三行拉低
 80116de:	2380      	movs	r3, #128	; 0x80
 80116e0:	021b      	lsls	r3, r3, #8
 80116e2:	4848      	ldr	r0, [pc, #288]	; (8011804 <key_scan+0x268>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	0019      	movs	r1, r3
 80116e8:	f7f5 fcc7 	bl	800707a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 80116ec:	1d7b      	adds	r3, r7, #5
 80116ee:	2200      	movs	r2, #0
 80116f0:	701a      	strb	r2, [r3, #0]
 80116f2:	e004      	b.n	80116fe <key_scan+0x162>
 80116f4:	1d7b      	adds	r3, r7, #5
 80116f6:	781a      	ldrb	r2, [r3, #0]
 80116f8:	1d7b      	adds	r3, r7, #5
 80116fa:	3201      	adds	r2, #1
 80116fc:	701a      	strb	r2, [r3, #0]
 80116fe:	1d7b      	adds	r3, r7, #5
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	2b63      	cmp	r3, #99	; 0x63
 8011704:	d9f6      	bls.n	80116f4 <key_scan+0x158>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 8011706:	4b40      	ldr	r3, [pc, #256]	; (8011808 <key_scan+0x26c>)
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	b29b      	uxth	r3, r3
 801170c:	227f      	movs	r2, #127	; 0x7f
 801170e:	4013      	ands	r3, r2
 8011710:	b29a      	uxth	r2, r3
 8011712:	4b3e      	ldr	r3, [pc, #248]	; (801180c <key_scan+0x270>)
 8011714:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 8011716:	4b3d      	ldr	r3, [pc, #244]	; (801180c <key_scan+0x270>)
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	2b7f      	cmp	r3, #127	; 0x7f
 801171c:	d017      	beq.n	801174e <key_scan+0x1b2>
	{
		Press_Status3=1;//第三行按键按下
 801171e:	4b43      	ldr	r3, [pc, #268]	; (801182c <key_scan+0x290>)
 8011720:	2201      	movs	r2, #1
 8011722:	601a      	str	r2, [r3, #0]
		if(++Key_Count3>5)
 8011724:	4b42      	ldr	r3, [pc, #264]	; (8011830 <key_scan+0x294>)
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	3301      	adds	r3, #1
 801172a:	b2da      	uxtb	r2, r3
 801172c:	4b40      	ldr	r3, [pc, #256]	; (8011830 <key_scan+0x294>)
 801172e:	701a      	strb	r2, [r3, #0]
 8011730:	4b3f      	ldr	r3, [pc, #252]	; (8011830 <key_scan+0x294>)
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	2b05      	cmp	r3, #5
 8011736:	d90d      	bls.n	8011754 <key_scan+0x1b8>
		{
			Row_Flag=3;
 8011738:	4b37      	ldr	r3, [pc, #220]	; (8011818 <key_scan+0x27c>)
 801173a:	2203      	movs	r2, #3
 801173c:	601a      	str	r2, [r3, #0]
			Key_Count3=5;
 801173e:	4b3c      	ldr	r3, [pc, #240]	; (8011830 <key_scan+0x294>)
 8011740:	2205      	movs	r2, #5
 8011742:	701a      	strb	r2, [r3, #0]
			Key_Value3 = IO_Status;	//记下键值
 8011744:	4b31      	ldr	r3, [pc, #196]	; (801180c <key_scan+0x270>)
 8011746:	881a      	ldrh	r2, [r3, #0]
 8011748:	4b3a      	ldr	r3, [pc, #232]	; (8011834 <key_scan+0x298>)
 801174a:	801a      	strh	r2, [r3, #0]
 801174c:	e002      	b.n	8011754 <key_scan+0x1b8>
		}
	}
	else Press_Status3=0;
 801174e:	4b37      	ldr	r3, [pc, #220]	; (801182c <key_scan+0x290>)
 8011750:	2200      	movs	r2, #0
 8011752:	601a      	str	r2, [r3, #0]


	if(Press_Status1==0 && Press_Status2==0 && Press_Status3==0)//无按键按下
 8011754:	4b2e      	ldr	r3, [pc, #184]	; (8011810 <key_scan+0x274>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d14d      	bne.n	80117f8 <key_scan+0x25c>
 801175c:	4b30      	ldr	r3, [pc, #192]	; (8011820 <key_scan+0x284>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d149      	bne.n	80117f8 <key_scan+0x25c>
 8011764:	4b31      	ldr	r3, [pc, #196]	; (801182c <key_scan+0x290>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d145      	bne.n	80117f8 <key_scan+0x25c>
	{
		switch(Row_Flag)
 801176c:	4b2a      	ldr	r3, [pc, #168]	; (8011818 <key_scan+0x27c>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2b03      	cmp	r3, #3
 8011772:	d027      	beq.n	80117c4 <key_scan+0x228>
 8011774:	dc39      	bgt.n	80117ea <key_scan+0x24e>
 8011776:	2b01      	cmp	r3, #1
 8011778:	d002      	beq.n	8011780 <key_scan+0x1e4>
 801177a:	2b02      	cmp	r3, #2
 801177c:	d011      	beq.n	80117a2 <key_scan+0x206>
					}
					break;

			}

			default :break;
 801177e:	e034      	b.n	80117ea <key_scan+0x24e>
					Key_Count1--;
 8011780:	4b24      	ldr	r3, [pc, #144]	; (8011814 <key_scan+0x278>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	3b01      	subs	r3, #1
 8011786:	b2da      	uxtb	r2, r3
 8011788:	4b22      	ldr	r3, [pc, #136]	; (8011814 <key_scan+0x278>)
 801178a:	701a      	strb	r2, [r3, #0]
					if(Key_Count1<=0)
 801178c:	4b21      	ldr	r3, [pc, #132]	; (8011814 <key_scan+0x278>)
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d12c      	bne.n	80117ee <key_scan+0x252>
						Key_Count1=0;
 8011794:	4b1f      	ldr	r3, [pc, #124]	; (8011814 <key_scan+0x278>)
 8011796:	2200      	movs	r2, #0
 8011798:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 801179a:	4b27      	ldr	r3, [pc, #156]	; (8011838 <key_scan+0x29c>)
 801179c:	2201      	movs	r2, #1
 801179e:	701a      	strb	r2, [r3, #0]
					break;
 80117a0:	e025      	b.n	80117ee <key_scan+0x252>
					Key_Count2--;
 80117a2:	4b20      	ldr	r3, [pc, #128]	; (8011824 <key_scan+0x288>)
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	3b01      	subs	r3, #1
 80117a8:	b2da      	uxtb	r2, r3
 80117aa:	4b1e      	ldr	r3, [pc, #120]	; (8011824 <key_scan+0x288>)
 80117ac:	701a      	strb	r2, [r3, #0]
					if(Key_Count2<=0)
 80117ae:	4b1d      	ldr	r3, [pc, #116]	; (8011824 <key_scan+0x288>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d11d      	bne.n	80117f2 <key_scan+0x256>
						Key_Count2=0;
 80117b6:	4b1b      	ldr	r3, [pc, #108]	; (8011824 <key_scan+0x288>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 80117bc:	4b1e      	ldr	r3, [pc, #120]	; (8011838 <key_scan+0x29c>)
 80117be:	2201      	movs	r2, #1
 80117c0:	701a      	strb	r2, [r3, #0]
					break;
 80117c2:	e016      	b.n	80117f2 <key_scan+0x256>
					Key_Count3--;
 80117c4:	4b1a      	ldr	r3, [pc, #104]	; (8011830 <key_scan+0x294>)
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	b2da      	uxtb	r2, r3
 80117cc:	4b18      	ldr	r3, [pc, #96]	; (8011830 <key_scan+0x294>)
 80117ce:	701a      	strb	r2, [r3, #0]
					if(Key_Count3<=0)
 80117d0:	4b17      	ldr	r3, [pc, #92]	; (8011830 <key_scan+0x294>)
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d10e      	bne.n	80117f6 <key_scan+0x25a>
						Key_Count3=0;
 80117d8:	4b15      	ldr	r3, [pc, #84]	; (8011830 <key_scan+0x294>)
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 80117de:	4b16      	ldr	r3, [pc, #88]	; (8011838 <key_scan+0x29c>)
 80117e0:	2201      	movs	r2, #1
 80117e2:	701a      	strb	r2, [r3, #0]
					break;
 80117e4:	e007      	b.n	80117f6 <key_scan+0x25a>
	if(keys_EN==DISABLE) return;
 80117e6:	46c0      	nop			; (mov r8, r8)
 80117e8:	e006      	b.n	80117f8 <key_scan+0x25c>
			default :break;
 80117ea:	46c0      	nop			; (mov r8, r8)
 80117ec:	e004      	b.n	80117f8 <key_scan+0x25c>
					break;
 80117ee:	46c0      	nop			; (mov r8, r8)
 80117f0:	e002      	b.n	80117f8 <key_scan+0x25c>
					break;
 80117f2:	46c0      	nop			; (mov r8, r8)
 80117f4:	e000      	b.n	80117f8 <key_scan+0x25c>
					break;
 80117f6:	46c0      	nop			; (mov r8, r8)

	}



}
 80117f8:	46bd      	mov	sp, r7
 80117fa:	b002      	add	sp, #8
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	46c0      	nop			; (mov r8, r8)
 8011800:	20003b19 	.word	0x20003b19
 8011804:	50000800 	.word	0x50000800
 8011808:	50000c00 	.word	0x50000c00
 801180c:	20003b56 	.word	0x20003b56
 8011810:	20003b58 	.word	0x20003b58
 8011814:	20003b5c 	.word	0x20003b5c
 8011818:	20003b50 	.word	0x20003b50
 801181c:	20002fdc 	.word	0x20002fdc
 8011820:	20003b60 	.word	0x20003b60
 8011824:	20003b64 	.word	0x20003b64
 8011828:	20002fde 	.word	0x20002fde
 801182c:	20003b68 	.word	0x20003b68
 8011830:	20003b6c 	.word	0x20003b6c
 8011834:	20002fe0 	.word	0x20002fe0
 8011838:	20003b54 	.word	0x20003b54

0801183c <KEY_Handle>:
 * @brief  按键处理函数（先判断行列，再调用按键函数）
 * @param	None
 * @retval None
 */
void KEY_Handle(void)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	af00      	add	r7, sp, #0
	if(Key_Enable==ENABLE)
 8011840:	4b5a      	ldr	r3, [pc, #360]	; (80119ac <KEY_Handle+0x170>)
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	2b01      	cmp	r3, #1
 8011846:	d000      	beq.n	801184a <KEY_Handle+0xe>
 8011848:	e0ac      	b.n	80119a4 <KEY_Handle+0x168>
	{

		switch(Row_Flag)
 801184a:	4b59      	ldr	r3, [pc, #356]	; (80119b0 <KEY_Handle+0x174>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b03      	cmp	r3, #3
 8011850:	d100      	bne.n	8011854 <KEY_Handle+0x18>
 8011852:	e065      	b.n	8011920 <KEY_Handle+0xe4>
 8011854:	dd00      	ble.n	8011858 <KEY_Handle+0x1c>
 8011856:	e096      	b.n	8011986 <KEY_Handle+0x14a>
 8011858:	2b01      	cmp	r3, #1
 801185a:	d002      	beq.n	8011862 <KEY_Handle+0x26>
 801185c:	2b02      	cmp	r3, #2
 801185e:	d031      	beq.n	80118c4 <KEY_Handle+0x88>
 8011860:	e091      	b.n	8011986 <KEY_Handle+0x14a>
			{
				case 1:
				{
					Row_Flag=0;
 8011862:	4b53      	ldr	r3, [pc, #332]	; (80119b0 <KEY_Handle+0x174>)
 8011864:	2200      	movs	r2, #0
 8011866:	601a      	str	r2, [r3, #0]
					switch(Key_Value1)
 8011868:	4b52      	ldr	r3, [pc, #328]	; (80119b4 <KEY_Handle+0x178>)
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	2b3f      	cmp	r3, #63	; 0x3f
 801186e:	d025      	beq.n	80118bc <KEY_Handle+0x80>
 8011870:	da00      	bge.n	8011874 <KEY_Handle+0x38>
 8011872:	e083      	b.n	801197c <KEY_Handle+0x140>
 8011874:	2b7e      	cmp	r3, #126	; 0x7e
 8011876:	dd00      	ble.n	801187a <KEY_Handle+0x3e>
 8011878:	e080      	b.n	801197c <KEY_Handle+0x140>
 801187a:	2b5f      	cmp	r3, #95	; 0x5f
 801187c:	da00      	bge.n	8011880 <KEY_Handle+0x44>
 801187e:	e07d      	b.n	801197c <KEY_Handle+0x140>
 8011880:	3b5f      	subs	r3, #95	; 0x5f
 8011882:	2b1f      	cmp	r3, #31
 8011884:	d900      	bls.n	8011888 <KEY_Handle+0x4c>
 8011886:	e079      	b.n	801197c <KEY_Handle+0x140>
 8011888:	009a      	lsls	r2, r3, #2
 801188a:	4b4b      	ldr	r3, [pc, #300]	; (80119b8 <KEY_Handle+0x17c>)
 801188c:	18d3      	adds	r3, r2, r3
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(1);
 8011892:	2001      	movs	r0, #1
 8011894:	f7fd ff48 	bl	800f728 <key_num_handle>
							break;
 8011898:	e013      	b.n	80118c2 <KEY_Handle+0x86>
						}
						case 0x7d:
						{
							key_num_handle(2);
 801189a:	2002      	movs	r0, #2
 801189c:	f7fd ff44 	bl	800f728 <key_num_handle>
							break;
 80118a0:	e00f      	b.n	80118c2 <KEY_Handle+0x86>
						}
						case 0x7b:
						{
							key_num_handle(3);
 80118a2:	2003      	movs	r0, #3
 80118a4:	f7fd ff40 	bl	800f728 <key_num_handle>
							break;
 80118a8:	e00b      	b.n	80118c2 <KEY_Handle+0x86>
						}
						case 0x77:
						{
							Key_ESC();
 80118aa:	f7ff fdb7 	bl	801141c <Key_ESC>
							break;
 80118ae:	e008      	b.n	80118c2 <KEY_Handle+0x86>
						}
						case 0x6f:
						{
							Key_V_set();
 80118b0:	f7fd ffc2 	bl	800f838 <Key_V_set>
							break;
 80118b4:	e005      	b.n	80118c2 <KEY_Handle+0x86>
						}
						case 0x5f:
						{
							Key_I_set();
 80118b6:	f7fe f8f1 	bl	800fa9c <Key_I_set>
							break;
 80118ba:	e002      	b.n	80118c2 <KEY_Handle+0x86>
						}
						case 0x3f:
						{
							Key_Up();
 80118bc:	f7ff fb04 	bl	8010ec8 <Key_Up>
							break;
 80118c0:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 80118c2:	e05b      	b.n	801197c <KEY_Handle+0x140>

				}
				case 2:
				{
					Row_Flag=0;
 80118c4:	4b3a      	ldr	r3, [pc, #232]	; (80119b0 <KEY_Handle+0x174>)
 80118c6:	2200      	movs	r2, #0
 80118c8:	601a      	str	r2, [r3, #0]
					switch(Key_Value2)
 80118ca:	4b3c      	ldr	r3, [pc, #240]	; (80119bc <KEY_Handle+0x180>)
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	2b3f      	cmp	r3, #63	; 0x3f
 80118d0:	d022      	beq.n	8011918 <KEY_Handle+0xdc>
 80118d2:	db55      	blt.n	8011980 <KEY_Handle+0x144>
 80118d4:	2b7e      	cmp	r3, #126	; 0x7e
 80118d6:	dc53      	bgt.n	8011980 <KEY_Handle+0x144>
 80118d8:	2b5f      	cmp	r3, #95	; 0x5f
 80118da:	db51      	blt.n	8011980 <KEY_Handle+0x144>
 80118dc:	3b5f      	subs	r3, #95	; 0x5f
 80118de:	2b1f      	cmp	r3, #31
 80118e0:	d84e      	bhi.n	8011980 <KEY_Handle+0x144>
 80118e2:	009a      	lsls	r2, r3, #2
 80118e4:	4b36      	ldr	r3, [pc, #216]	; (80119c0 <KEY_Handle+0x184>)
 80118e6:	18d3      	adds	r3, r2, r3
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(4);
 80118ec:	2004      	movs	r0, #4
 80118ee:	f7fd ff1b 	bl	800f728 <key_num_handle>
							break;
 80118f2:	e014      	b.n	801191e <KEY_Handle+0xe2>
						}
						case 0x7d:
						{
							key_num_handle(5);
 80118f4:	2005      	movs	r0, #5
 80118f6:	f7fd ff17 	bl	800f728 <key_num_handle>
							break;
 80118fa:	e010      	b.n	801191e <KEY_Handle+0xe2>
						}
						case 0x7b:
						{
							key_num_handle(6);
 80118fc:	2006      	movs	r0, #6
 80118fe:	f7fd ff13 	bl	800f728 <key_num_handle>
							break;
 8011902:	e00c      	b.n	801191e <KEY_Handle+0xe2>
						}
						case 0x77:
						{
							key_num_handle(0);
 8011904:	2000      	movs	r0, #0
 8011906:	f7fd ff0f 	bl	800f728 <key_num_handle>
							break;
 801190a:	e008      	b.n	801191e <KEY_Handle+0xe2>
						}
						case 0x6f:
						{
							Key_Recall_Save();
 801190c:	f7ff fa68 	bl	8010de0 <Key_Recall_Save>
							break;
 8011910:	e005      	b.n	801191e <KEY_Handle+0xe2>
						}
						case 0x5f:
						{
							Key_Preset_Lock();
 8011912:	f7ff fa2b 	bl	8010d6c <Key_Preset_Lock>
							break;
 8011916:	e002      	b.n	801191e <KEY_Handle+0xe2>
						}
						case 0x3f:
						{
							Key_Enter();
 8011918:	f7fe fed0 	bl	80106bc <Key_Enter>
							break;
 801191c:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 801191e:	e02f      	b.n	8011980 <KEY_Handle+0x144>

				}
				case 3:
				{
					Row_Flag=0;
 8011920:	4b23      	ldr	r3, [pc, #140]	; (80119b0 <KEY_Handle+0x174>)
 8011922:	2200      	movs	r2, #0
 8011924:	601a      	str	r2, [r3, #0]
					switch(Key_Value3)
 8011926:	4b27      	ldr	r3, [pc, #156]	; (80119c4 <KEY_Handle+0x188>)
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	2b3f      	cmp	r3, #63	; 0x3f
 801192c:	d022      	beq.n	8011974 <KEY_Handle+0x138>
 801192e:	db29      	blt.n	8011984 <KEY_Handle+0x148>
 8011930:	2b7e      	cmp	r3, #126	; 0x7e
 8011932:	dc27      	bgt.n	8011984 <KEY_Handle+0x148>
 8011934:	2b5f      	cmp	r3, #95	; 0x5f
 8011936:	db25      	blt.n	8011984 <KEY_Handle+0x148>
 8011938:	3b5f      	subs	r3, #95	; 0x5f
 801193a:	2b1f      	cmp	r3, #31
 801193c:	d822      	bhi.n	8011984 <KEY_Handle+0x148>
 801193e:	009a      	lsls	r2, r3, #2
 8011940:	4b21      	ldr	r3, [pc, #132]	; (80119c8 <KEY_Handle+0x18c>)
 8011942:	18d3      	adds	r3, r2, r3
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(7);
 8011948:	2007      	movs	r0, #7
 801194a:	f7fd feed 	bl	800f728 <key_num_handle>
							break;
 801194e:	e014      	b.n	801197a <KEY_Handle+0x13e>
						}
						case 0x7d:
						{
							key_num_handle(8);
 8011950:	2008      	movs	r0, #8
 8011952:	f7fd fee9 	bl	800f728 <key_num_handle>
							break;
 8011956:	e010      	b.n	801197a <KEY_Handle+0x13e>
						}
						case 0x7b:
						{
							key_num_handle(9);
 8011958:	2009      	movs	r0, #9
 801195a:	f7fd fee5 	bl	800f728 <key_num_handle>
							break;
 801195e:	e00c      	b.n	801197a <KEY_Handle+0x13e>
						}
						case 0x77:
						{
							key_num_handle(10);
 8011960:	200a      	movs	r0, #10
 8011962:	f7fd fee1 	bl	800f728 <key_num_handle>
							break;
 8011966:	e008      	b.n	801197a <KEY_Handle+0x13e>
						}
						case 0x6f:
						{
							Key_Shift();
 8011968:	f7ff f8ea 	bl	8010b40 <Key_Shift>
							break;
 801196c:	e005      	b.n	801197a <KEY_Handle+0x13e>
						}
						case 0x5f:
						{
							Key_ON_OFF();
 801196e:	f7ff f9cd 	bl	8010d0c <Key_ON_OFF>
							break;
 8011972:	e002      	b.n	801197a <KEY_Handle+0x13e>
						}
						case 0x3f:
						{
							Key_Down();
 8011974:	f7ff fc06 	bl	8011184 <Key_Down>
							break;
 8011978:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 801197a:	e003      	b.n	8011984 <KEY_Handle+0x148>
					break;
 801197c:	46c0      	nop			; (mov r8, r8)
 801197e:	e002      	b.n	8011986 <KEY_Handle+0x14a>
					break;
 8011980:	46c0      	nop			; (mov r8, r8)
 8011982:	e000      	b.n	8011986 <KEY_Handle+0x14a>
					break;
 8011984:	46c0      	nop			; (mov r8, r8)

				}


			}
		Key_Enable=DISABLE;
 8011986:	4b09      	ldr	r3, [pc, #36]	; (80119ac <KEY_Handle+0x170>)
 8011988:	2200      	movs	r2, #0
 801198a:	701a      	strb	r2, [r3, #0]
		Row_Flag=0;
 801198c:	4b08      	ldr	r3, [pc, #32]	; (80119b0 <KEY_Handle+0x174>)
 801198e:	2200      	movs	r2, #0
 8011990:	601a      	str	r2, [r3, #0]
		Key_Value1=0x7f;
 8011992:	4b08      	ldr	r3, [pc, #32]	; (80119b4 <KEY_Handle+0x178>)
 8011994:	227f      	movs	r2, #127	; 0x7f
 8011996:	801a      	strh	r2, [r3, #0]
		Key_Value2=0x7f;
 8011998:	4b08      	ldr	r3, [pc, #32]	; (80119bc <KEY_Handle+0x180>)
 801199a:	227f      	movs	r2, #127	; 0x7f
 801199c:	801a      	strh	r2, [r3, #0]
		Key_Value3=0x7f;
 801199e:	4b09      	ldr	r3, [pc, #36]	; (80119c4 <KEY_Handle+0x188>)
 80119a0:	227f      	movs	r2, #127	; 0x7f
 80119a2:	801a      	strh	r2, [r3, #0]

	}

}
 80119a4:	46c0      	nop			; (mov r8, r8)
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	46c0      	nop			; (mov r8, r8)
 80119ac:	20003b54 	.word	0x20003b54
 80119b0:	20003b50 	.word	0x20003b50
 80119b4:	20002fdc 	.word	0x20002fdc
 80119b8:	08018c7c 	.word	0x08018c7c
 80119bc:	20002fde 	.word	0x20002fde
 80119c0:	08018cfc 	.word	0x08018cfc
 80119c4:	20002fe0 	.word	0x20002fe0
 80119c8:	08018d7c 	.word	0x08018d7c

080119cc <HAL_ADC_ConvCpltCallback>:
  * @brief  温度传感器检测的中断服务函数，检测IGBT温度，软件层保护
  * @param  None
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]



	if(hadc==&hadc1)
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	4b0a      	ldr	r3, [pc, #40]	; (8011a00 <HAL_ADC_ConvCpltCallback+0x34>)
 80119d8:	429a      	cmp	r2, r3
 80119da:	d10c      	bne.n	80119f6 <HAL_ADC_ConvCpltCallback+0x2a>
	{
		Flag.ADC1_IT=1;
 80119dc:	4b09      	ldr	r3, [pc, #36]	; (8011a04 <HAL_ADC_ConvCpltCallback+0x38>)
 80119de:	2201      	movs	r2, #1
 80119e0:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 80119e2:	4b07      	ldr	r3, [pc, #28]	; (8011a00 <HAL_ADC_ConvCpltCallback+0x34>)
 80119e4:	0018      	movs	r0, r3
 80119e6:	f7f4 f873 	bl	8005ad0 <HAL_ADC_Stop_DMA>


		HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 80119ea:	4907      	ldr	r1, [pc, #28]	; (8011a08 <HAL_ADC_ConvCpltCallback+0x3c>)
 80119ec:	4b04      	ldr	r3, [pc, #16]	; (8011a00 <HAL_ADC_ConvCpltCallback+0x34>)
 80119ee:	2202      	movs	r2, #2
 80119f0:	0018      	movs	r0, r3
 80119f2:	f7f3 ffdf 	bl	80059b4 <HAL_ADC_Start_DMA>
	}

}
 80119f6:	46c0      	nop			; (mov r8, r8)
 80119f8:	46bd      	mov	sp, r7
 80119fa:	b002      	add	sp, #8
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	46c0      	nop			; (mov r8, r8)
 8011a00:	200032c4 	.word	0x200032c4
 8011a04:	20003384 	.word	0x20003384
 8011a08:	20003b70 	.word	0x20003b70

08011a0c <Check_Error>:
  * @brief  OTP/OVP/OCP的硬件保护服务函数(硬件保护)
  * @param  None
  * @retval None
  */
void Check_Error()
{
 8011a0c:	b5b0      	push	{r4, r5, r7, lr}
 8011a0e:	af00      	add	r7, sp, #0
	static uint8_t ERROR_Flag=1;
	static uint8_t ERROR_Flag2=1;
	static uint8_t ERROR_Flag3=1;


	if(Voltage_Actual>100)
 8011a10:	4b85      	ldr	r3, [pc, #532]	; (8011c28 <Check_Error+0x21c>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	4985      	ldr	r1, [pc, #532]	; (8011c2c <Check_Error+0x220>)
 8011a16:	1c18      	adds	r0, r3, #0
 8011a18:	f7ee fd72 	bl	8000500 <__aeabi_fcmpgt>
 8011a1c:	1e03      	subs	r3, r0, #0
 8011a1e:	d019      	beq.n	8011a54 <Check_Error+0x48>
	{


		Error|=OVP;
 8011a20:	4b83      	ldr	r3, [pc, #524]	; (8011c30 <Check_Error+0x224>)
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	2201      	movs	r2, #1
 8011a26:	4313      	orrs	r3, r2
 8011a28:	b2da      	uxtb	r2, r3
 8011a2a:	4b81      	ldr	r3, [pc, #516]	; (8011c30 <Check_Error+0x224>)
 8011a2c:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 8011a2e:	4b81      	ldr	r3, [pc, #516]	; (8011c34 <Check_Error+0x228>)
 8011a30:	2204      	movs	r2, #4
 8011a32:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011a34:	4b7f      	ldr	r3, [pc, #508]	; (8011c34 <Check_Error+0x228>)
 8011a36:	2201      	movs	r2, #1
 8011a38:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 8011a3a:	4b7e      	ldr	r3, [pc, #504]	; (8011c34 <Check_Error+0x228>)
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag==1)
 8011a40:	4b7d      	ldr	r3, [pc, #500]	; (8011c38 <Check_Error+0x22c>)
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d10f      	bne.n	8011a68 <Check_Error+0x5c>
		{
			ERROR_Flag=2;
 8011a48:	4b7b      	ldr	r3, [pc, #492]	; (8011c38 <Check_Error+0x22c>)
 8011a4a:	2202      	movs	r2, #2
 8011a4c:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 8011a4e:	f7fb f8b9 	bl	800cbc4 <Output_Zero>
 8011a52:	e009      	b.n	8011a68 <Check_Error+0x5c>
		}

	}
	else
	{
		ERROR_Flag=1;
 8011a54:	4b78      	ldr	r3, [pc, #480]	; (8011c38 <Check_Error+0x22c>)
 8011a56:	2201      	movs	r2, #1
 8011a58:	701a      	strb	r2, [r3, #0]
		Error&=0xfe;//解除电压警报
 8011a5a:	4b75      	ldr	r3, [pc, #468]	; (8011c30 <Check_Error+0x224>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	4393      	bics	r3, r2
 8011a62:	b2da      	uxtb	r2, r3
 8011a64:	4b72      	ldr	r3, [pc, #456]	; (8011c30 <Check_Error+0x224>)
 8011a66:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual>50)
 8011a68:	4b74      	ldr	r3, [pc, #464]	; (8011c3c <Check_Error+0x230>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4974      	ldr	r1, [pc, #464]	; (8011c40 <Check_Error+0x234>)
 8011a6e:	1c18      	adds	r0, r3, #0
 8011a70:	f7ee fd46 	bl	8000500 <__aeabi_fcmpgt>
 8011a74:	1e03      	subs	r3, r0, #0
 8011a76:	d019      	beq.n	8011aac <Check_Error+0xa0>
	{

		Error|=OCP;
 8011a78:	4b6d      	ldr	r3, [pc, #436]	; (8011c30 <Check_Error+0x224>)
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2202      	movs	r2, #2
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	4b6b      	ldr	r3, [pc, #428]	; (8011c30 <Check_Error+0x224>)
 8011a84:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 8011a86:	4b6b      	ldr	r3, [pc, #428]	; (8011c34 <Check_Error+0x228>)
 8011a88:	2204      	movs	r2, #4
 8011a8a:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011a8c:	4b69      	ldr	r3, [pc, #420]	; (8011c34 <Check_Error+0x228>)
 8011a8e:	2201      	movs	r2, #1
 8011a90:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 8011a92:	4b68      	ldr	r3, [pc, #416]	; (8011c34 <Check_Error+0x228>)
 8011a94:	2201      	movs	r2, #1
 8011a96:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag2==1)
 8011a98:	4b6a      	ldr	r3, [pc, #424]	; (8011c44 <Check_Error+0x238>)
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	d10f      	bne.n	8011ac0 <Check_Error+0xb4>
		{
			ERROR_Flag2=2;
 8011aa0:	4b68      	ldr	r3, [pc, #416]	; (8011c44 <Check_Error+0x238>)
 8011aa2:	2202      	movs	r2, #2
 8011aa4:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 8011aa6:	f7fb f88d 	bl	800cbc4 <Output_Zero>
 8011aaa:	e009      	b.n	8011ac0 <Check_Error+0xb4>
		}
	}
	else
	{
		ERROR_Flag2=1;
 8011aac:	4b65      	ldr	r3, [pc, #404]	; (8011c44 <Check_Error+0x238>)
 8011aae:	2201      	movs	r2, #1
 8011ab0:	701a      	strb	r2, [r3, #0]
		Error&=0xfd;//解除电流警报
 8011ab2:	4b5f      	ldr	r3, [pc, #380]	; (8011c30 <Check_Error+0x224>)
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	2202      	movs	r2, #2
 8011ab8:	4393      	bics	r3, r2
 8011aba:	b2da      	uxtb	r2, r3
 8011abc:	4b5c      	ldr	r3, [pc, #368]	; (8011c30 <Check_Error+0x224>)
 8011abe:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual*Voltage_Actual>7500)
 8011ac0:	4b5e      	ldr	r3, [pc, #376]	; (8011c3c <Check_Error+0x230>)
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	4b58      	ldr	r3, [pc, #352]	; (8011c28 <Check_Error+0x21c>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	1c19      	adds	r1, r3, #0
 8011aca:	1c10      	adds	r0, r2, #0
 8011acc:	f7ef f8c8 	bl	8000c60 <__aeabi_fmul>
 8011ad0:	1c03      	adds	r3, r0, #0
 8011ad2:	495d      	ldr	r1, [pc, #372]	; (8011c48 <Check_Error+0x23c>)
 8011ad4:	1c18      	adds	r0, r3, #0
 8011ad6:	f7ee fd13 	bl	8000500 <__aeabi_fcmpgt>
 8011ada:	1e03      	subs	r3, r0, #0
 8011adc:	d019      	beq.n	8011b12 <Check_Error+0x106>
	{

		Error|=CPP;
 8011ade:	4b54      	ldr	r3, [pc, #336]	; (8011c30 <Check_Error+0x224>)
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	2208      	movs	r2, #8
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	b2da      	uxtb	r2, r3
 8011ae8:	4b51      	ldr	r3, [pc, #324]	; (8011c30 <Check_Error+0x224>)
 8011aea:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 8011aec:	4b51      	ldr	r3, [pc, #324]	; (8011c34 <Check_Error+0x228>)
 8011aee:	2204      	movs	r2, #4
 8011af0:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011af2:	4b50      	ldr	r3, [pc, #320]	; (8011c34 <Check_Error+0x228>)
 8011af4:	2201      	movs	r2, #1
 8011af6:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 8011af8:	4b4e      	ldr	r3, [pc, #312]	; (8011c34 <Check_Error+0x228>)
 8011afa:	2201      	movs	r2, #1
 8011afc:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag3==1)
 8011afe:	4b53      	ldr	r3, [pc, #332]	; (8011c4c <Check_Error+0x240>)
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d10f      	bne.n	8011b26 <Check_Error+0x11a>
		{
			ERROR_Flag3=2;
 8011b06:	4b51      	ldr	r3, [pc, #324]	; (8011c4c <Check_Error+0x240>)
 8011b08:	2202      	movs	r2, #2
 8011b0a:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 8011b0c:	f7fb f85a 	bl	800cbc4 <Output_Zero>
 8011b10:	e009      	b.n	8011b26 <Check_Error+0x11a>

		}
	}
	else
	{
		ERROR_Flag3=1;
 8011b12:	4b4e      	ldr	r3, [pc, #312]	; (8011c4c <Check_Error+0x240>)
 8011b14:	2201      	movs	r2, #1
 8011b16:	701a      	strb	r2, [r3, #0]
		Error&=0xf7;//解除电流警报
 8011b18:	4b45      	ldr	r3, [pc, #276]	; (8011c30 <Check_Error+0x224>)
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	2208      	movs	r2, #8
 8011b1e:	4393      	bics	r3, r2
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	4b43      	ldr	r3, [pc, #268]	; (8011c30 <Check_Error+0x224>)
 8011b24:	701a      	strb	r2, [r3, #0]
		ERROR_Flag4=1;
		Error&=0xfb;//解除电流警报
	}
*/

	if(Voltage_Actual*100>0.95*Set_Voltage && Voltage_Actual*100<1.05*Set_Voltage)
 8011b26:	4b40      	ldr	r3, [pc, #256]	; (8011c28 <Check_Error+0x21c>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4940      	ldr	r1, [pc, #256]	; (8011c2c <Check_Error+0x220>)
 8011b2c:	1c18      	adds	r0, r3, #0
 8011b2e:	f7ef f897 	bl	8000c60 <__aeabi_fmul>
 8011b32:	1c03      	adds	r3, r0, #0
 8011b34:	1c18      	adds	r0, r3, #0
 8011b36:	f7f1 f9bb 	bl	8002eb0 <__aeabi_f2d>
 8011b3a:	0004      	movs	r4, r0
 8011b3c:	000d      	movs	r5, r1
 8011b3e:	4b44      	ldr	r3, [pc, #272]	; (8011c50 <Check_Error+0x244>)
 8011b40:	881b      	ldrh	r3, [r3, #0]
 8011b42:	0018      	movs	r0, r3
 8011b44:	f7f1 f95e 	bl	8002e04 <__aeabi_i2d>
 8011b48:	4a42      	ldr	r2, [pc, #264]	; (8011c54 <Check_Error+0x248>)
 8011b4a:	4b43      	ldr	r3, [pc, #268]	; (8011c58 <Check_Error+0x24c>)
 8011b4c:	f7f0 fb08 	bl	8002160 <__aeabi_dmul>
 8011b50:	0002      	movs	r2, r0
 8011b52:	000b      	movs	r3, r1
 8011b54:	0020      	movs	r0, r4
 8011b56:	0029      	movs	r1, r5
 8011b58:	f7ee fc98 	bl	800048c <__aeabi_dcmpgt>
 8011b5c:	1e03      	subs	r3, r0, #0
 8011b5e:	d020      	beq.n	8011ba2 <Check_Error+0x196>
 8011b60:	4b31      	ldr	r3, [pc, #196]	; (8011c28 <Check_Error+0x21c>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4931      	ldr	r1, [pc, #196]	; (8011c2c <Check_Error+0x220>)
 8011b66:	1c18      	adds	r0, r3, #0
 8011b68:	f7ef f87a 	bl	8000c60 <__aeabi_fmul>
 8011b6c:	1c03      	adds	r3, r0, #0
 8011b6e:	1c18      	adds	r0, r3, #0
 8011b70:	f7f1 f99e 	bl	8002eb0 <__aeabi_f2d>
 8011b74:	0004      	movs	r4, r0
 8011b76:	000d      	movs	r5, r1
 8011b78:	4b35      	ldr	r3, [pc, #212]	; (8011c50 <Check_Error+0x244>)
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	0018      	movs	r0, r3
 8011b7e:	f7f1 f941 	bl	8002e04 <__aeabi_i2d>
 8011b82:	4a36      	ldr	r2, [pc, #216]	; (8011c5c <Check_Error+0x250>)
 8011b84:	4b36      	ldr	r3, [pc, #216]	; (8011c60 <Check_Error+0x254>)
 8011b86:	f7f0 faeb 	bl	8002160 <__aeabi_dmul>
 8011b8a:	0002      	movs	r2, r0
 8011b8c:	000b      	movs	r3, r1
 8011b8e:	0020      	movs	r0, r4
 8011b90:	0029      	movs	r1, r5
 8011b92:	f7ee fc67 	bl	8000464 <__aeabi_dcmplt>
 8011b96:	1e03      	subs	r3, r0, #0
 8011b98:	d003      	beq.n	8011ba2 <Check_Error+0x196>
	{
		CV_CC_CP=CV;
 8011b9a:	4b32      	ldr	r3, [pc, #200]	; (8011c64 <Check_Error+0x258>)
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	701a      	strb	r2, [r3, #0]
	}




}
 8011ba0:	e03e      	b.n	8011c20 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 8011ba2:	4b26      	ldr	r3, [pc, #152]	; (8011c3c <Check_Error+0x230>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4921      	ldr	r1, [pc, #132]	; (8011c2c <Check_Error+0x220>)
 8011ba8:	1c18      	adds	r0, r3, #0
 8011baa:	f7ef f859 	bl	8000c60 <__aeabi_fmul>
 8011bae:	1c03      	adds	r3, r0, #0
 8011bb0:	1c18      	adds	r0, r3, #0
 8011bb2:	f7f1 f97d 	bl	8002eb0 <__aeabi_f2d>
 8011bb6:	0004      	movs	r4, r0
 8011bb8:	000d      	movs	r5, r1
 8011bba:	4b2b      	ldr	r3, [pc, #172]	; (8011c68 <Check_Error+0x25c>)
 8011bbc:	881b      	ldrh	r3, [r3, #0]
 8011bbe:	0018      	movs	r0, r3
 8011bc0:	f7f1 f920 	bl	8002e04 <__aeabi_i2d>
 8011bc4:	4a23      	ldr	r2, [pc, #140]	; (8011c54 <Check_Error+0x248>)
 8011bc6:	4b24      	ldr	r3, [pc, #144]	; (8011c58 <Check_Error+0x24c>)
 8011bc8:	f7f0 faca 	bl	8002160 <__aeabi_dmul>
 8011bcc:	0002      	movs	r2, r0
 8011bce:	000b      	movs	r3, r1
 8011bd0:	0020      	movs	r0, r4
 8011bd2:	0029      	movs	r1, r5
 8011bd4:	f7ee fc5a 	bl	800048c <__aeabi_dcmpgt>
 8011bd8:	1e03      	subs	r3, r0, #0
 8011bda:	d100      	bne.n	8011bde <Check_Error+0x1d2>
}
 8011bdc:	e020      	b.n	8011c20 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 8011bde:	4b17      	ldr	r3, [pc, #92]	; (8011c3c <Check_Error+0x230>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4912      	ldr	r1, [pc, #72]	; (8011c2c <Check_Error+0x220>)
 8011be4:	1c18      	adds	r0, r3, #0
 8011be6:	f7ef f83b 	bl	8000c60 <__aeabi_fmul>
 8011bea:	1c03      	adds	r3, r0, #0
 8011bec:	1c18      	adds	r0, r3, #0
 8011bee:	f7f1 f95f 	bl	8002eb0 <__aeabi_f2d>
 8011bf2:	0004      	movs	r4, r0
 8011bf4:	000d      	movs	r5, r1
 8011bf6:	4b1c      	ldr	r3, [pc, #112]	; (8011c68 <Check_Error+0x25c>)
 8011bf8:	881b      	ldrh	r3, [r3, #0]
 8011bfa:	0018      	movs	r0, r3
 8011bfc:	f7f1 f902 	bl	8002e04 <__aeabi_i2d>
 8011c00:	4a16      	ldr	r2, [pc, #88]	; (8011c5c <Check_Error+0x250>)
 8011c02:	4b17      	ldr	r3, [pc, #92]	; (8011c60 <Check_Error+0x254>)
 8011c04:	f7f0 faac 	bl	8002160 <__aeabi_dmul>
 8011c08:	0002      	movs	r2, r0
 8011c0a:	000b      	movs	r3, r1
 8011c0c:	0020      	movs	r0, r4
 8011c0e:	0029      	movs	r1, r5
 8011c10:	f7ee fc28 	bl	8000464 <__aeabi_dcmplt>
 8011c14:	1e03      	subs	r3, r0, #0
 8011c16:	d100      	bne.n	8011c1a <Check_Error+0x20e>
}
 8011c18:	e002      	b.n	8011c20 <Check_Error+0x214>
		CV_CC_CP=CC;
 8011c1a:	4b12      	ldr	r3, [pc, #72]	; (8011c64 <Check_Error+0x258>)
 8011c1c:	2202      	movs	r2, #2
 8011c1e:	701a      	strb	r2, [r3, #0]
}
 8011c20:	46c0      	nop			; (mov r8, r8)
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bdb0      	pop	{r4, r5, r7, pc}
 8011c26:	46c0      	nop			; (mov r8, r8)
 8011c28:	20003b30 	.word	0x20003b30
 8011c2c:	42c80000 	.word	0x42c80000
 8011c30:	20003b6d 	.word	0x20003b6d
 8011c34:	20003b8c 	.word	0x20003b8c
 8011c38:	20002fe3 	.word	0x20002fe3
 8011c3c:	20003b34 	.word	0x20003b34
 8011c40:	42480000 	.word	0x42480000
 8011c44:	20002fe4 	.word	0x20002fe4
 8011c48:	45ea6000 	.word	0x45ea6000
 8011c4c:	20002fe5 	.word	0x20002fe5
 8011c50:	20002fd8 	.word	0x20002fd8
 8011c54:	66666666 	.word	0x66666666
 8011c58:	3fee6666 	.word	0x3fee6666
 8011c5c:	cccccccd 	.word	0xcccccccd
 8011c60:	3ff0cccc 	.word	0x3ff0cccc
 8011c64:	20003b1e 	.word	0x20003b1e
 8011c68:	20002fda 	.word	0x20002fda

08011c6c <TIM16_DELAY_ON>:
  * @brief  开启DELAY功能，设置定时器时间和使能定时器
  * @param  None
  * @retval None
  */
void TIM16_DELAY_ON(void)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	af00      	add	r7, sp, #0

	Delay_Function_On_Off = Delay_Function_On;
 8011c70:	4b0a      	ldr	r3, [pc, #40]	; (8011c9c <TIM16_DELAY_ON+0x30>)
 8011c72:	2201      	movs	r2, #1
 8011c74:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 8011c76:	4b0a      	ldr	r3, [pc, #40]	; (8011ca0 <TIM16_DELAY_ON+0x34>)
 8011c78:	2200      	movs	r2, #0
 8011c7a:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim16,0x00);
 8011c7c:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <TIM16_DELAY_ON+0x38>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2200      	movs	r2, #0
 8011c82:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim16,TIM_FLAG_UPDATE);
 8011c84:	4b07      	ldr	r3, [pc, #28]	; (8011ca4 <TIM16_DELAY_ON+0x38>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2202      	movs	r2, #2
 8011c8a:	4252      	negs	r2, r2
 8011c8c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim16);
 8011c8e:	4b05      	ldr	r3, [pc, #20]	; (8011ca4 <TIM16_DELAY_ON+0x38>)
 8011c90:	0018      	movs	r0, r3
 8011c92:	f7f6 fff1 	bl	8008c78 <HAL_TIM_Base_Start_IT>

}
 8011c96:	46c0      	nop			; (mov r8, r8)
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	20003b75 	.word	0x20003b75
 8011ca0:	20003b1c 	.word	0x20003b1c
 8011ca4:	200035f8 	.word	0x200035f8

08011ca8 <TIM16_DELAY_OFF>:
  * @brief  关闭DELAY功能
  * @param  None
  * @retval None
  */
void TIM16_DELAY_OFF(void)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	af00      	add	r7, sp, #0

	 Delay_Function_On_Off = Delay_Function_Off;
 8011cac:	4b0c      	ldr	r3, [pc, #48]	; (8011ce0 <TIM16_DELAY_OFF+0x38>)
 8011cae:	2200      	movs	r2, #0
 8011cb0:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim16);
 8011cb2:	4b0c      	ldr	r3, [pc, #48]	; (8011ce4 <TIM16_DELAY_OFF+0x3c>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	6a1b      	ldr	r3, [r3, #32]
 8011cb8:	4a0b      	ldr	r2, [pc, #44]	; (8011ce8 <TIM16_DELAY_OFF+0x40>)
 8011cba:	4013      	ands	r3, r2
 8011cbc:	d10d      	bne.n	8011cda <TIM16_DELAY_OFF+0x32>
 8011cbe:	4b09      	ldr	r3, [pc, #36]	; (8011ce4 <TIM16_DELAY_OFF+0x3c>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	6a1b      	ldr	r3, [r3, #32]
 8011cc4:	4a09      	ldr	r2, [pc, #36]	; (8011cec <TIM16_DELAY_OFF+0x44>)
 8011cc6:	4013      	ands	r3, r2
 8011cc8:	d107      	bne.n	8011cda <TIM16_DELAY_OFF+0x32>
 8011cca:	4b06      	ldr	r3, [pc, #24]	; (8011ce4 <TIM16_DELAY_OFF+0x3c>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	4b04      	ldr	r3, [pc, #16]	; (8011ce4 <TIM16_DELAY_OFF+0x3c>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2101      	movs	r1, #1
 8011cd6:	438a      	bics	r2, r1
 8011cd8:	601a      	str	r2, [r3, #0]

}
 8011cda:	46c0      	nop			; (mov r8, r8)
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	20003b75 	.word	0x20003b75
 8011ce4:	200035f8 	.word	0x200035f8
 8011ce8:	00001111 	.word	0x00001111
 8011cec:	00000444 	.word	0x00000444

08011cf0 <TIM17_CYCLE_ON>:
  * @brief  打开CYCLE，打开TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_ON(void)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	af00      	add	r7, sp, #0
	Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 8011cf4:	4b1d      	ldr	r3, [pc, #116]	; (8011d6c <TIM17_CYCLE_ON+0x7c>)
 8011cf6:	881b      	ldrh	r3, [r3, #0]
 8011cf8:	001a      	movs	r2, r3
 8011cfa:	0013      	movs	r3, r2
 8011cfc:	015b      	lsls	r3, r3, #5
 8011cfe:	1a9b      	subs	r3, r3, r2
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	189b      	adds	r3, r3, r2
 8011d04:	00db      	lsls	r3, r3, #3
 8011d06:	001a      	movs	r2, r3
 8011d08:	4b19      	ldr	r3, [pc, #100]	; (8011d70 <TIM17_CYCLE_ON+0x80>)
 8011d0a:	881b      	ldrh	r3, [r3, #0]
 8011d0c:	18d3      	adds	r3, r2, r3
 8011d0e:	001a      	movs	r2, r3
 8011d10:	4b18      	ldr	r3, [pc, #96]	; (8011d74 <TIM17_CYCLE_ON+0x84>)
 8011d12:	601a      	str	r2, [r3, #0]
	Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms);
 8011d14:	4b18      	ldr	r3, [pc, #96]	; (8011d78 <TIM17_CYCLE_ON+0x88>)
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	001a      	movs	r2, r3
 8011d1a:	0013      	movs	r3, r2
 8011d1c:	015b      	lsls	r3, r3, #5
 8011d1e:	1a9b      	subs	r3, r3, r2
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	189b      	adds	r3, r3, r2
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	001a      	movs	r2, r3
 8011d28:	4b14      	ldr	r3, [pc, #80]	; (8011d7c <TIM17_CYCLE_ON+0x8c>)
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	18d3      	adds	r3, r2, r3
 8011d2e:	001a      	movs	r2, r3
 8011d30:	4b13      	ldr	r3, [pc, #76]	; (8011d80 <TIM17_CYCLE_ON+0x90>)
 8011d32:	601a      	str	r2, [r3, #0]

	Delay_Function_On_Off = Delay_Function_On;
 8011d34:	4b13      	ldr	r3, [pc, #76]	; (8011d84 <TIM17_CYCLE_ON+0x94>)
 8011d36:	2201      	movs	r2, #1
 8011d38:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 8011d3a:	4b13      	ldr	r3, [pc, #76]	; (8011d88 <TIM17_CYCLE_ON+0x98>)
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim17,0x00);
 8011d40:	4b12      	ldr	r3, [pc, #72]	; (8011d8c <TIM17_CYCLE_ON+0x9c>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2200      	movs	r2, #0
 8011d46:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim17,TIM_FLAG_UPDATE);
 8011d48:	4b10      	ldr	r3, [pc, #64]	; (8011d8c <TIM17_CYCLE_ON+0x9c>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2202      	movs	r2, #2
 8011d4e:	4252      	negs	r2, r2
 8011d50:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim17);
 8011d52:	4b0e      	ldr	r3, [pc, #56]	; (8011d8c <TIM17_CYCLE_ON+0x9c>)
 8011d54:	0018      	movs	r0, r3
 8011d56:	f7f6 ff8f 	bl	8008c78 <HAL_TIM_Base_Start_IT>
	DAC_Cmd_send(1,0xff,0x00);
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	21ff      	movs	r1, #255	; 0xff
 8011d5e:	2001      	movs	r0, #1
 8011d60:	f7fa fdea 	bl	800c938 <DAC_Cmd_send>

}
 8011d64:	46c0      	nop			; (mov r8, r8)
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	46c0      	nop			; (mov r8, r8)
 8011d6c:	20003b24 	.word	0x20003b24
 8011d70:	20002fd4 	.word	0x20002fd4
 8011d74:	20003b78 	.word	0x20003b78
 8011d78:	20003b26 	.word	0x20003b26
 8011d7c:	20002fd6 	.word	0x20002fd6
 8011d80:	20003b7c 	.word	0x20003b7c
 8011d84:	20003b75 	.word	0x20003b75
 8011d88:	20003b1c 	.word	0x20003b1c
 8011d8c:	20003644 	.word	0x20003644

08011d90 <TIM17_CYCLE_OFF>:
  * @brief  关闭CYCLE，关闭TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_OFF(void)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	af00      	add	r7, sp, #0

	ON_OFF = OFF;
 8011d94:	4b0c      	ldr	r3, [pc, #48]	; (8011dc8 <TIM17_CYCLE_OFF+0x38>)
 8011d96:	2200      	movs	r2, #0
 8011d98:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim17);
 8011d9a:	4b0c      	ldr	r3, [pc, #48]	; (8011dcc <TIM17_CYCLE_OFF+0x3c>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	6a1b      	ldr	r3, [r3, #32]
 8011da0:	4a0b      	ldr	r2, [pc, #44]	; (8011dd0 <TIM17_CYCLE_OFF+0x40>)
 8011da2:	4013      	ands	r3, r2
 8011da4:	d10d      	bne.n	8011dc2 <TIM17_CYCLE_OFF+0x32>
 8011da6:	4b09      	ldr	r3, [pc, #36]	; (8011dcc <TIM17_CYCLE_OFF+0x3c>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	6a1b      	ldr	r3, [r3, #32]
 8011dac:	4a09      	ldr	r2, [pc, #36]	; (8011dd4 <TIM17_CYCLE_OFF+0x44>)
 8011dae:	4013      	ands	r3, r2
 8011db0:	d107      	bne.n	8011dc2 <TIM17_CYCLE_OFF+0x32>
 8011db2:	4b06      	ldr	r3, [pc, #24]	; (8011dcc <TIM17_CYCLE_OFF+0x3c>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	4b04      	ldr	r3, [pc, #16]	; (8011dcc <TIM17_CYCLE_OFF+0x3c>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2101      	movs	r1, #1
 8011dbe:	438a      	bics	r2, r1
 8011dc0:	601a      	str	r2, [r3, #0]
}
 8011dc2:	46c0      	nop			; (mov r8, r8)
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	20003b1c 	.word	0x20003b1c
 8011dcc:	20003644 	.word	0x20003644
 8011dd0:	00001111 	.word	0x00001111
 8011dd4:	00000444 	.word	0x00000444

08011dd8 <SPI_OLED_SendData>:
	* @brief  向OLED发送数据
	* @param  要发送的数据
	* @retval None
	*/
void SPI_OLED_SendData(uint8_t byte)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	0002      	movs	r2, r0
 8011de0:	1dfb      	adds	r3, r7, #7
 8011de2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011de4:	4b15      	ldr	r3, [pc, #84]	; (8011e3c <SPI_OLED_SendData+0x64>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	68da      	ldr	r2, [r3, #12]
 8011dea:	4b14      	ldr	r3, [pc, #80]	; (8011e3c <SPI_OLED_SendData+0x64>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	2101      	movs	r1, #1
 8011df0:	438a      	bics	r2, r1
 8011df2:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011df4:	4b12      	ldr	r3, [pc, #72]	; (8011e40 <SPI_OLED_SendData+0x68>)
 8011df6:	2201      	movs	r2, #1
 8011df8:	2102      	movs	r1, #2
 8011dfa:	0018      	movs	r0, r3
 8011dfc:	f7f5 f93d 	bl	800707a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011e00:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <SPI_OLED_SendData+0x68>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	2101      	movs	r1, #1
 8011e06:	0018      	movs	r0, r3
 8011e08:	f7f5 f937 	bl	800707a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 8011e0c:	1df9      	adds	r1, r7, #7
 8011e0e:	480d      	ldr	r0, [pc, #52]	; (8011e44 <SPI_OLED_SendData+0x6c>)
 8011e10:	230a      	movs	r3, #10
 8011e12:	2201      	movs	r2, #1
 8011e14:	f7f6 f840 	bl	8007e98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011e18:	4b09      	ldr	r3, [pc, #36]	; (8011e40 <SPI_OLED_SendData+0x68>)
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	0018      	movs	r0, r3
 8011e20:	f7f5 f92b 	bl	800707a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011e24:	4b05      	ldr	r3, [pc, #20]	; (8011e3c <SPI_OLED_SendData+0x64>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68da      	ldr	r2, [r3, #12]
 8011e2a:	4b04      	ldr	r3, [pc, #16]	; (8011e3c <SPI_OLED_SendData+0x64>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2101      	movs	r1, #1
 8011e30:	430a      	orrs	r2, r1
 8011e32:	60da      	str	r2, [r3, #12]

}
 8011e34:	46c0      	nop			; (mov r8, r8)
 8011e36:	46bd      	mov	sp, r7
 8011e38:	b002      	add	sp, #8
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	2000347c 	.word	0x2000347c
 8011e40:	50000800 	.word	0x50000800
 8011e44:	200033c8 	.word	0x200033c8

08011e48 <SPI_OLED_SendCommond>:
	* @brief  向OLED发送命令
	* @param  要发送的命令
	* @retval None
	*/
void SPI_OLED_SendCommond(uint8_t byte)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	0002      	movs	r2, r0
 8011e50:	1dfb      	adds	r3, r7, #7
 8011e52:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011e54:	4b15      	ldr	r3, [pc, #84]	; (8011eac <SPI_OLED_SendCommond+0x64>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	68da      	ldr	r2, [r3, #12]
 8011e5a:	4b14      	ldr	r3, [pc, #80]	; (8011eac <SPI_OLED_SendCommond+0x64>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2101      	movs	r1, #1
 8011e60:	438a      	bics	r2, r1
 8011e62:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);//dc 0
 8011e64:	4b12      	ldr	r3, [pc, #72]	; (8011eb0 <SPI_OLED_SendCommond+0x68>)
 8011e66:	2200      	movs	r2, #0
 8011e68:	2102      	movs	r1, #2
 8011e6a:	0018      	movs	r0, r3
 8011e6c:	f7f5 f905 	bl	800707a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011e70:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <SPI_OLED_SendCommond+0x68>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	2101      	movs	r1, #1
 8011e76:	0018      	movs	r0, r3
 8011e78:	f7f5 f8ff 	bl	800707a <HAL_GPIO_WritePin>


	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 8011e7c:	1df9      	adds	r1, r7, #7
 8011e7e:	480d      	ldr	r0, [pc, #52]	; (8011eb4 <SPI_OLED_SendCommond+0x6c>)
 8011e80:	230a      	movs	r3, #10
 8011e82:	2201      	movs	r2, #1
 8011e84:	f7f6 f808 	bl	8007e98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011e88:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <SPI_OLED_SendCommond+0x68>)
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	2101      	movs	r1, #1
 8011e8e:	0018      	movs	r0, r3
 8011e90:	f7f5 f8f3 	bl	800707a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011e94:	4b05      	ldr	r3, [pc, #20]	; (8011eac <SPI_OLED_SendCommond+0x64>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	68da      	ldr	r2, [r3, #12]
 8011e9a:	4b04      	ldr	r3, [pc, #16]	; (8011eac <SPI_OLED_SendCommond+0x64>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	430a      	orrs	r2, r1
 8011ea2:	60da      	str	r2, [r3, #12]
}
 8011ea4:	46c0      	nop			; (mov r8, r8)
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	b002      	add	sp, #8
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	2000347c 	.word	0x2000347c
 8011eb0:	50000800 	.word	0x50000800
 8011eb4:	200033c8 	.word	0x200033c8

08011eb8 <OLED_Init>:

void OLED_Init(void)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0

	res_OLED;							//将SPI3_RES引脚置0
 8011ebc:	4b6b      	ldr	r3, [pc, #428]	; (801206c <OLED_Init+0x1b4>)
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	2104      	movs	r1, #4
 8011ec2:	0018      	movs	r0, r3
 8011ec4:	f7f5 f8d9 	bl	800707a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011ec8:	2001      	movs	r0, #1
 8011eca:	f7f3 fa31 	bl	8005330 <HAL_Delay>
	set_OLED; 						//将SPI3_RES引脚置1
 8011ece:	4b67      	ldr	r3, [pc, #412]	; (801206c <OLED_Init+0x1b4>)
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	2104      	movs	r1, #4
 8011ed4:	0018      	movs	r0, r3
 8011ed6:	f7f5 f8d0 	bl	800707a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8011eda:	2005      	movs	r0, #5
 8011edc:	f7f3 fa28 	bl	8005330 <HAL_Delay>

	SPI_OLED_SendCommond(Set_Command_Lock);//开锁
 8011ee0:	20fd      	movs	r0, #253	; 0xfd
 8011ee2:	f7ff ffb1 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x12);
 8011ee6:	2012      	movs	r0, #18
 8011ee8:	f7ff ff76 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Column_Address_Commond);//设置列地址
 8011eec:	2015      	movs	r0, #21
 8011eee:	f7ff ffab 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c);
 8011ef2:	201c      	movs	r0, #28
 8011ef4:	f7ff ff70 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x5b);
 8011ef8:	205b      	movs	r0, #91	; 0x5b
 8011efa:	f7ff ff6d 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Row_Address_Commond);//设置行地址
 8011efe:	2075      	movs	r0, #117	; 0x75
 8011f00:	f7ff ffa2 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011f04:	2000      	movs	r0, #0
 8011f06:	f7ff ff67 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3f);
 8011f0a:	203f      	movs	r0, #63	; 0x3f
 8011f0c:	f7ff ff64 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Sleep_mode_ON);//休眠
 8011f10:	20ae      	movs	r0, #174	; 0xae
 8011f12:	f7ff ff99 	bl	8011e48 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Front_Clock_Divider);//设置前时钟分频器/振荡器频率
 8011f16:	20b3      	movs	r0, #179	; 0xb3
 8011f18:	f7ff ff96 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x91);
 8011f1c:	2091      	movs	r0, #145	; 0x91
 8011f1e:	f7ff ff5b 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_MUX_Ratio);//设置多路选择开关比值
 8011f22:	20ca      	movs	r0, #202	; 0xca
 8011f24:	f7ff ff90 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x3f);
 8011f28:	203f      	movs	r0, #63	; 0x3f
 8011f2a:	f7ff ff55 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Offset);//从0-127设置垂直滚动
 8011f2e:	20a2      	movs	r0, #162	; 0xa2
 8011f30:	f7ff ff8a 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011f34:	2000      	movs	r0, #0
 8011f36:	f7ff ff4f 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Start_Line);//设置启动行
 8011f3a:	20a1      	movs	r0, #161	; 0xa1
 8011f3c:	f7ff ff84 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011f40:	2000      	movs	r0, #0
 8011f42:	f7ff ff49 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//设置正常显示
 8011f46:	20a6      	movs	r0, #166	; 0xa6
 8011f48:	f7ff ff7e 	bl	8011e48 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8011f4c:	20a0      	movs	r0, #160	; 0xa0
 8011f4e:	f7ff ff7b 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8011f52:	2014      	movs	r0, #20
 8011f54:	f7ff ff40 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8011f58:	2011      	movs	r0, #17
 8011f5a:	f7ff ff3d 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_GPIO);//引脚设定
 8011f5e:	20b5      	movs	r0, #181	; 0xb5
 8011f60:	f7ff ff72 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011f64:	2000      	movs	r0, #0
 8011f66:	f7ff ff37 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Function_Selection);//内部电压调节
 8011f6a:	20ab      	movs	r0, #171	; 0xab
 8011f6c:	f7ff ff6c 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x01);
 8011f70:	2001      	movs	r0, #1
 8011f72:	f7ff ff31 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xb4);
 8011f76:	20b4      	movs	r0, #180	; 0xb4
 8011f78:	f7ff ff66 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa0);
 8011f7c:	20a0      	movs	r0, #160	; 0xa0
 8011f7e:	f7ff ff2b 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0xfd);
 8011f82:	20fd      	movs	r0, #253	; 0xfd
 8011f84:	f7ff ff28 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Contrast_Current);//设置对比度电流
 8011f88:	20c1      	movs	r0, #193	; 0xc1
 8011f8a:	f7ff ff5d 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xaf);
 8011f8e:	20af      	movs	r0, #175	; 0xaf
 8011f90:	f7ff ff22 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Master_Contrast_Current_Control);//主对比度电流控制
 8011f94:	20c7      	movs	r0, #199	; 0xc7
 8011f96:	f7ff ff57 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0f);
 8011f9a:	200f      	movs	r0, #15
 8011f9c:	f7ff ff1c 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Gray_Scale_Table);//设置灰度表
 8011fa0:	20b8      	movs	r0, #184	; 0xb8
 8011fa2:	f7ff ff51 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0c);
 8011fa6:	200c      	movs	r0, #12
 8011fa8:	f7ff ff16 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x18);
 8011fac:	2018      	movs	r0, #24
 8011fae:	f7ff ff13 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x24);
 8011fb2:	2024      	movs	r0, #36	; 0x24
 8011fb4:	f7ff ff10 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x30);
 8011fb8:	2030      	movs	r0, #48	; 0x30
 8011fba:	f7ff ff0d 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3c);
 8011fbe:	203c      	movs	r0, #60	; 0x3c
 8011fc0:	f7ff ff0a 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x48);
 8011fc4:	2048      	movs	r0, #72	; 0x48
 8011fc6:	f7ff ff07 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x54);
 8011fca:	2054      	movs	r0, #84	; 0x54
 8011fcc:	f7ff ff04 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x60);
 8011fd0:	2060      	movs	r0, #96	; 0x60
 8011fd2:	f7ff ff01 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x6c);
 8011fd6:	206c      	movs	r0, #108	; 0x6c
 8011fd8:	f7ff fefe 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x78);
 8011fdc:	2078      	movs	r0, #120	; 0x78
 8011fde:	f7ff fefb 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x84);
 8011fe2:	2084      	movs	r0, #132	; 0x84
 8011fe4:	f7ff fef8 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x90);
 8011fe8:	2090      	movs	r0, #144	; 0x90
 8011fea:	f7ff fef5 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x9c);
 8011fee:	209c      	movs	r0, #156	; 0x9c
 8011ff0:	f7ff fef2 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0xa8);
 8011ff4:	20a8      	movs	r0, #168	; 0xa8
 8011ff6:	f7ff feef 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0xb4);
 8011ffa:	20b4      	movs	r0, #180	; 0xb4
 8011ffc:	f7ff feec 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Enable_Gray_Scale_table);//开启灰度表
 8012000:	2000      	movs	r0, #0
 8012002:	f7ff ff21 	bl	8011e48 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Phase_Length);//设置相位长度
 8012006:	20b1      	movs	r0, #177	; 0xb1
 8012008:	f7ff ff1e 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xE2);
 801200c:	20e2      	movs	r0, #226	; 0xe2
 801200e:	f7ff fee3 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xD1); 								//Display Enhancement B
 8012012:	20d1      	movs	r0, #209	; 0xd1
 8012014:	f7ff ff18 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa2);
 8012018:	20a2      	movs	r0, #162	; 0xa2
 801201a:	f7ff fedd 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x20);										//反显
 801201e:	2020      	movs	r0, #32
 8012020:	f7ff feda 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Pre_charge_voltage);//设置预充电电压
 8012024:	20bb      	movs	r0, #187	; 0xbb
 8012026:	f7ff ff0f 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1F);
 801202a:	201f      	movs	r0, #31
 801202c:	f7ff fed4 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Second_Precharge_Period);//设置第二预充期间
 8012030:	20b6      	movs	r0, #182	; 0xb6
 8012032:	f7ff ff09 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x08);
 8012036:	2008      	movs	r0, #8
 8012038:	f7ff fece 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_VCOMH );//设置COM取消选择电压等级
 801203c:	20be      	movs	r0, #190	; 0xbe
 801203e:	f7ff ff03 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x07);
 8012042:	2007      	movs	r0, #7
 8012044:	f7ff fec8 	bl	8011dd8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//正常显示
 8012048:	20a6      	movs	r0, #166	; 0xa6
 801204a:	f7ff fefd 	bl	8011e48 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Exit_Partial_Display);//该命令被发送到退出部分显示模式
 801204e:	20a9      	movs	r0, #169	; 0xa9
 8012050:	f7ff fefa 	bl	8011e48 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Write_RAM_Command);
 8012054:	205c      	movs	r0, #92	; 0x5c
 8012056:	f7ff fef7 	bl	8011e48 <SPI_OLED_SendCommond>

	Fill_RAM(0x00);   //清屏
 801205a:	2000      	movs	r0, #0
 801205c:	f000 fcf8 	bl	8012a50 <Fill_RAM>

	SPI_OLED_SendCommond(Sleep_mode_OFF);//关休眠
 8012060:	20af      	movs	r0, #175	; 0xaf
 8012062:	f7ff fef1 	bl	8011e48 <SPI_OLED_SendCommond>

}
 8012066:	46c0      	nop			; (mov r8, r8)
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	50000800 	.word	0x50000800

08012070 <Font_1Bit_To_4Bit>:
 * @brief  转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据（字模表的元素）
 * @retval None
 */
void Font_1Bit_To_4Bit(uint8_t Data)
{
 8012070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012072:	b087      	sub	sp, #28
 8012074:	af00      	add	r7, sp, #0
 8012076:	0002      	movs	r2, r0
 8012078:	1dfb      	adds	r3, r7, #7
 801207a:	701a      	strb	r2, [r3, #0]
	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 uint8_t mask=0x01;
 801207c:	2317      	movs	r3, #23
 801207e:	18fb      	adds	r3, r7, r3
 8012080:	2201      	movs	r2, #1
 8012082:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8012084:	230c      	movs	r3, #12
 8012086:	18fb      	adds	r3, r7, r3
 8012088:	2200      	movs	r2, #0
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	2200      	movs	r2, #0
 801208e:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 8012090:	2308      	movs	r3, #8
 8012092:	18fb      	adds	r3, r7, r3
 8012094:	2200      	movs	r2, #0
 8012096:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 8012098:	2316      	movs	r3, #22
 801209a:	18fb      	adds	r3, r7, r3
 801209c:	2200      	movs	r2, #0
 801209e:	701a      	strb	r2, [r3, #0]
 80120a0:	e037      	b.n	8012112 <Font_1Bit_To_4Bit+0xa2>
	 {
		 if((Data&mask)==mask) temp[i]|=Light;//low 4 bits set
 80120a2:	1dfb      	adds	r3, r7, #7
 80120a4:	2117      	movs	r1, #23
 80120a6:	187a      	adds	r2, r7, r1
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	7812      	ldrb	r2, [r2, #0]
 80120ac:	4013      	ands	r3, r2
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	187a      	adds	r2, r7, r1
 80120b2:	7812      	ldrb	r2, [r2, #0]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d10e      	bne.n	80120d6 <Font_1Bit_To_4Bit+0x66>
 80120b8:	2016      	movs	r0, #22
 80120ba:	183b      	adds	r3, r7, r0
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	240c      	movs	r4, #12
 80120c0:	193a      	adds	r2, r7, r4
 80120c2:	5cd1      	ldrb	r1, [r2, r3]
 80120c4:	4b54      	ldr	r3, [pc, #336]	; (8012218 <Font_1Bit_To_4Bit+0x1a8>)
 80120c6:	781a      	ldrb	r2, [r3, #0]
 80120c8:	183b      	adds	r3, r7, r0
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	430a      	orrs	r2, r1
 80120ce:	b2d1      	uxtb	r1, r2
 80120d0:	193a      	adds	r2, r7, r4
 80120d2:	54d1      	strb	r1, [r2, r3]
 80120d4:	e011      	b.n	80120fa <Font_1Bit_To_4Bit+0x8a>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 80120d6:	2116      	movs	r1, #22
 80120d8:	187b      	adds	r3, r7, r1
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	200c      	movs	r0, #12
 80120de:	183a      	adds	r2, r7, r0
 80120e0:	5cd3      	ldrb	r3, [r2, r3]
 80120e2:	b25b      	sxtb	r3, r3
 80120e4:	4a4c      	ldr	r2, [pc, #304]	; (8012218 <Font_1Bit_To_4Bit+0x1a8>)
 80120e6:	7812      	ldrb	r2, [r2, #0]
 80120e8:	0112      	lsls	r2, r2, #4
 80120ea:	b252      	sxtb	r2, r2
 80120ec:	4013      	ands	r3, r2
 80120ee:	b25a      	sxtb	r2, r3
 80120f0:	187b      	adds	r3, r7, r1
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	b2d1      	uxtb	r1, r2
 80120f6:	183a      	adds	r2, r7, r0
 80120f8:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 80120fa:	2317      	movs	r3, #23
 80120fc:	18fa      	adds	r2, r7, r3
 80120fe:	18fb      	adds	r3, r7, r3
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	18db      	adds	r3, r3, r3
 8012104:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 8012106:	2116      	movs	r1, #22
 8012108:	187b      	adds	r3, r7, r1
 801210a:	781a      	ldrb	r2, [r3, #0]
 801210c:	187b      	adds	r3, r7, r1
 801210e:	3201      	adds	r2, #1
 8012110:	701a      	strb	r2, [r3, #0]
 8012112:	2316      	movs	r3, #22
 8012114:	18fb      	adds	r3, r7, r3
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	2b07      	cmp	r3, #7
 801211a:	d9c2      	bls.n	80120a2 <Font_1Bit_To_4Bit+0x32>

	 }
	 mask=0x0f;
 801211c:	2317      	movs	r3, #23
 801211e:	18fb      	adds	r3, r7, r3
 8012120:	220f      	movs	r2, #15
 8012122:	701a      	strb	r2, [r3, #0]
	 uint8_t index=3;
 8012124:	2315      	movs	r3, #21
 8012126:	18fb      	adds	r3, r7, r3
 8012128:	2203      	movs	r2, #3
 801212a:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 801212c:	2314      	movs	r3, #20
 801212e:	18fb      	adds	r3, r7, r3
 8012130:	2200      	movs	r2, #0
 8012132:	701a      	strb	r2, [r3, #0]
 8012134:	e03d      	b.n	80121b2 <Font_1Bit_To_4Bit+0x142>
	 {
		 data_send[index]|=(temp[j]&mask);//0 2 4 6 low
 8012136:	2015      	movs	r0, #21
 8012138:	183b      	adds	r3, r7, r0
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	2508      	movs	r5, #8
 801213e:	197a      	adds	r2, r7, r5
 8012140:	5cd1      	ldrb	r1, [r2, r3]
 8012142:	2414      	movs	r4, #20
 8012144:	193b      	adds	r3, r7, r4
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	260c      	movs	r6, #12
 801214a:	19ba      	adds	r2, r7, r6
 801214c:	5cd3      	ldrb	r3, [r2, r3]
 801214e:	2217      	movs	r2, #23
 8012150:	18ba      	adds	r2, r7, r2
 8012152:	7812      	ldrb	r2, [r2, #0]
 8012154:	4013      	ands	r3, r2
 8012156:	b2da      	uxtb	r2, r3
 8012158:	183b      	adds	r3, r7, r0
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	430a      	orrs	r2, r1
 801215e:	b2d1      	uxtb	r1, r2
 8012160:	197a      	adds	r2, r7, r5
 8012162:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8012164:	183b      	adds	r3, r7, r0
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	197a      	adds	r2, r7, r5
 801216a:	5cd3      	ldrb	r3, [r2, r3]
 801216c:	b25a      	sxtb	r2, r3
 801216e:	193b      	adds	r3, r7, r4
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	3301      	adds	r3, #1
 8012174:	19b9      	adds	r1, r7, r6
 8012176:	5ccb      	ldrb	r3, [r1, r3]
 8012178:	2117      	movs	r1, #23
 801217a:	1879      	adds	r1, r7, r1
 801217c:	7809      	ldrb	r1, [r1, #0]
 801217e:	400b      	ands	r3, r1
 8012180:	b2db      	uxtb	r3, r3
 8012182:	011b      	lsls	r3, r3, #4
 8012184:	b25b      	sxtb	r3, r3
 8012186:	4313      	orrs	r3, r2
 8012188:	b25a      	sxtb	r2, r3
 801218a:	183b      	adds	r3, r7, r0
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	b2d1      	uxtb	r1, r2
 8012190:	197a      	adds	r2, r7, r5
 8012192:	54d1      	strb	r1, [r2, r3]
		 j++;
 8012194:	193b      	adds	r3, r7, r4
 8012196:	781a      	ldrb	r2, [r3, #0]
 8012198:	193b      	adds	r3, r7, r4
 801219a:	3201      	adds	r2, #1
 801219c:	701a      	strb	r2, [r3, #0]
		 j++;
 801219e:	193b      	adds	r3, r7, r4
 80121a0:	781a      	ldrb	r2, [r3, #0]
 80121a2:	193b      	adds	r3, r7, r4
 80121a4:	3201      	adds	r2, #1
 80121a6:	701a      	strb	r2, [r3, #0]
		 index--;
 80121a8:	183b      	adds	r3, r7, r0
 80121aa:	781a      	ldrb	r2, [r3, #0]
 80121ac:	183b      	adds	r3, r7, r0
 80121ae:	3a01      	subs	r2, #1
 80121b0:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 80121b2:	2314      	movs	r3, #20
 80121b4:	18fb      	adds	r3, r7, r3
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	2b07      	cmp	r3, #7
 80121ba:	d9bc      	bls.n	8012136 <Font_1Bit_To_4Bit+0xc6>

	 }
	 //写RAM

		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80121bc:	4b17      	ldr	r3, [pc, #92]	; (801221c <Font_1Bit_To_4Bit+0x1ac>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	68da      	ldr	r2, [r3, #12]
 80121c2:	4b16      	ldr	r3, [pc, #88]	; (801221c <Font_1Bit_To_4Bit+0x1ac>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2101      	movs	r1, #1
 80121c8:	438a      	bics	r2, r1
 80121ca:	60da      	str	r2, [r3, #12]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 80121cc:	4b14      	ldr	r3, [pc, #80]	; (8012220 <Font_1Bit_To_4Bit+0x1b0>)
 80121ce:	2201      	movs	r2, #1
 80121d0:	2102      	movs	r1, #2
 80121d2:	0018      	movs	r0, r3
 80121d4:	f7f4 ff51 	bl	800707a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 80121d8:	4b11      	ldr	r3, [pc, #68]	; (8012220 <Font_1Bit_To_4Bit+0x1b0>)
 80121da:	2200      	movs	r2, #0
 80121dc:	2101      	movs	r1, #1
 80121de:	0018      	movs	r0, r3
 80121e0:	f7f4 ff4b 	bl	800707a <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1,data_send,4,100);
 80121e4:	2308      	movs	r3, #8
 80121e6:	18f9      	adds	r1, r7, r3
 80121e8:	480e      	ldr	r0, [pc, #56]	; (8012224 <Font_1Bit_To_4Bit+0x1b4>)
 80121ea:	2364      	movs	r3, #100	; 0x64
 80121ec:	2204      	movs	r2, #4
 80121ee:	f7f5 fe53 	bl	8007e98 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 80121f2:	4b0b      	ldr	r3, [pc, #44]	; (8012220 <Font_1Bit_To_4Bit+0x1b0>)
 80121f4:	2201      	movs	r2, #1
 80121f6:	2101      	movs	r1, #1
 80121f8:	0018      	movs	r0, r3
 80121fa:	f7f4 ff3e 	bl	800707a <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 80121fe:	4b07      	ldr	r3, [pc, #28]	; (801221c <Font_1Bit_To_4Bit+0x1ac>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	68da      	ldr	r2, [r3, #12]
 8012204:	4b05      	ldr	r3, [pc, #20]	; (801221c <Font_1Bit_To_4Bit+0x1ac>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2101      	movs	r1, #1
 801220a:	430a      	orrs	r2, r1
 801220c:	60da      	str	r2, [r3, #12]


}
 801220e:	46c0      	nop			; (mov r8, r8)
 8012210:	46bd      	mov	sp, r7
 8012212:	b007      	add	sp, #28
 8012214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012216:	46c0      	nop			; (mov r8, r8)
 8012218:	200030b3 	.word	0x200030b3
 801221c:	2000347c 	.word	0x2000347c
 8012220:	50000800 	.word	0x50000800
 8012224:	200033c8 	.word	0x200033c8

08012228 <_1Bit_To_4Bit_16x32>:

static void _1Bit_To_4Bit_16x32(uint8_t* Pdata)
{
 8012228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801222a:	b0c7      	sub	sp, #284	; 0x11c
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]

	 uint8_t data_send_buffer[4*64]={0x00};
 8012230:	4b9e      	ldr	r3, [pc, #632]	; (80124ac <_1Bit_To_4Bit_16x32+0x284>)
 8012232:	248c      	movs	r4, #140	; 0x8c
 8012234:	0064      	lsls	r4, r4, #1
 8012236:	191b      	adds	r3, r3, r4
 8012238:	19db      	adds	r3, r3, r7
 801223a:	2200      	movs	r2, #0
 801223c:	601a      	str	r2, [r3, #0]
 801223e:	3304      	adds	r3, #4
 8012240:	22fc      	movs	r2, #252	; 0xfc
 8012242:	2100      	movs	r1, #0
 8012244:	0018      	movs	r0, r3
 8012246:	f002 fc0c 	bl	8014a62 <memset>
	 uint8_t mask=0x01;
 801224a:	2318      	movs	r3, #24
 801224c:	33ff      	adds	r3, #255	; 0xff
 801224e:	18fb      	adds	r3, r7, r3
 8012250:	2201      	movs	r2, #1
 8012252:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8012254:	4b96      	ldr	r3, [pc, #600]	; (80124b0 <_1Bit_To_4Bit_16x32+0x288>)
 8012256:	191b      	adds	r3, r3, r4
 8012258:	19db      	adds	r3, r3, r7
 801225a:	2200      	movs	r2, #0
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	2200      	movs	r2, #0
 8012260:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<64;index++)
 8012262:	238b      	movs	r3, #139	; 0x8b
 8012264:	005b      	lsls	r3, r3, #1
 8012266:	18fb      	adds	r3, r7, r3
 8012268:	2200      	movs	r2, #0
 801226a:	701a      	strb	r2, [r3, #0]
 801226c:	e0e9      	b.n	8012442 <_1Bit_To_4Bit_16x32+0x21a>
	 {
		 memset(&temp[0],0,8);
 801226e:	2308      	movs	r3, #8
 8012270:	18fb      	adds	r3, r7, r3
 8012272:	2208      	movs	r2, #8
 8012274:	2100      	movs	r1, #0
 8012276:	0018      	movs	r0, r3
 8012278:	f002 fbf3 	bl	8014a62 <memset>
		 mask=0x01;
 801227c:	2318      	movs	r3, #24
 801227e:	33ff      	adds	r3, #255	; 0xff
 8012280:	18fb      	adds	r3, r7, r3
 8012282:	2201      	movs	r2, #1
 8012284:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 8012286:	2316      	movs	r3, #22
 8012288:	33ff      	adds	r3, #255	; 0xff
 801228a:	18fb      	adds	r3, r7, r3
 801228c:	2200      	movs	r2, #0
 801228e:	701a      	strb	r2, [r3, #0]
 8012290:	e04b      	b.n	801232a <_1Bit_To_4Bit_16x32+0x102>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 8012292:	238b      	movs	r3, #139	; 0x8b
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	18fb      	adds	r3, r7, r3
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	18d3      	adds	r3, r2, r3
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2118      	movs	r1, #24
 80122a2:	31ff      	adds	r1, #255	; 0xff
 80122a4:	187a      	adds	r2, r7, r1
 80122a6:	7812      	ldrb	r2, [r2, #0]
 80122a8:	4013      	ands	r3, r2
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	187a      	adds	r2, r7, r1
 80122ae:	7812      	ldrb	r2, [r2, #0]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d114      	bne.n	80122de <_1Bit_To_4Bit_16x32+0xb6>
 80122b4:	2016      	movs	r0, #22
 80122b6:	30ff      	adds	r0, #255	; 0xff
 80122b8:	183b      	adds	r3, r7, r0
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	4a7c      	ldr	r2, [pc, #496]	; (80124b0 <_1Bit_To_4Bit_16x32+0x288>)
 80122be:	248c      	movs	r4, #140	; 0x8c
 80122c0:	0064      	lsls	r4, r4, #1
 80122c2:	1912      	adds	r2, r2, r4
 80122c4:	19d2      	adds	r2, r2, r7
 80122c6:	5cd1      	ldrb	r1, [r2, r3]
 80122c8:	4b7a      	ldr	r3, [pc, #488]	; (80124b4 <_1Bit_To_4Bit_16x32+0x28c>)
 80122ca:	781a      	ldrb	r2, [r3, #0]
 80122cc:	183b      	adds	r3, r7, r0
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	430a      	orrs	r2, r1
 80122d2:	b2d1      	uxtb	r1, r2
 80122d4:	4a76      	ldr	r2, [pc, #472]	; (80124b0 <_1Bit_To_4Bit_16x32+0x288>)
 80122d6:	1912      	adds	r2, r2, r4
 80122d8:	19d2      	adds	r2, r2, r7
 80122da:	54d1      	strb	r1, [r2, r3]
 80122dc:	e017      	b.n	801230e <_1Bit_To_4Bit_16x32+0xe6>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 80122de:	2116      	movs	r1, #22
 80122e0:	31ff      	adds	r1, #255	; 0xff
 80122e2:	187b      	adds	r3, r7, r1
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	4a72      	ldr	r2, [pc, #456]	; (80124b0 <_1Bit_To_4Bit_16x32+0x288>)
 80122e8:	208c      	movs	r0, #140	; 0x8c
 80122ea:	0040      	lsls	r0, r0, #1
 80122ec:	1812      	adds	r2, r2, r0
 80122ee:	19d2      	adds	r2, r2, r7
 80122f0:	5cd3      	ldrb	r3, [r2, r3]
 80122f2:	b25b      	sxtb	r3, r3
 80122f4:	4a6f      	ldr	r2, [pc, #444]	; (80124b4 <_1Bit_To_4Bit_16x32+0x28c>)
 80122f6:	7812      	ldrb	r2, [r2, #0]
 80122f8:	0112      	lsls	r2, r2, #4
 80122fa:	b252      	sxtb	r2, r2
 80122fc:	4013      	ands	r3, r2
 80122fe:	b25a      	sxtb	r2, r3
 8012300:	187b      	adds	r3, r7, r1
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	b2d1      	uxtb	r1, r2
 8012306:	4a6a      	ldr	r2, [pc, #424]	; (80124b0 <_1Bit_To_4Bit_16x32+0x288>)
 8012308:	1812      	adds	r2, r2, r0
 801230a:	19d2      	adds	r2, r2, r7
 801230c:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 801230e:	2318      	movs	r3, #24
 8012310:	33ff      	adds	r3, #255	; 0xff
 8012312:	18fa      	adds	r2, r7, r3
 8012314:	18fb      	adds	r3, r7, r3
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	18db      	adds	r3, r3, r3
 801231a:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 801231c:	2116      	movs	r1, #22
 801231e:	31ff      	adds	r1, #255	; 0xff
 8012320:	187b      	adds	r3, r7, r1
 8012322:	781a      	ldrb	r2, [r3, #0]
 8012324:	187b      	adds	r3, r7, r1
 8012326:	3201      	adds	r2, #1
 8012328:	701a      	strb	r2, [r3, #0]
 801232a:	2316      	movs	r3, #22
 801232c:	33ff      	adds	r3, #255	; 0xff
 801232e:	18fb      	adds	r3, r7, r3
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	2b07      	cmp	r3, #7
 8012334:	d9ad      	bls.n	8012292 <_1Bit_To_4Bit_16x32+0x6a>

		 }

		 mask=0x0f;
 8012336:	2318      	movs	r3, #24
 8012338:	33ff      	adds	r3, #255	; 0xff
 801233a:	18fb      	adds	r3, r7, r3
 801233c:	220f      	movs	r2, #15
 801233e:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 8012340:	238a      	movs	r3, #138	; 0x8a
 8012342:	005b      	lsls	r3, r3, #1
 8012344:	18fb      	adds	r3, r7, r3
 8012346:	2203      	movs	r2, #3
 8012348:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 801234a:	2314      	movs	r3, #20
 801234c:	33ff      	adds	r3, #255	; 0xff
 801234e:	18fb      	adds	r3, r7, r3
 8012350:	2200      	movs	r2, #0
 8012352:	701a      	strb	r2, [r3, #0]
 8012354:	e068      	b.n	8012428 <_1Bit_To_4Bit_16x32+0x200>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 8012356:	208a      	movs	r0, #138	; 0x8a
 8012358:	0040      	lsls	r0, r0, #1
 801235a:	183b      	adds	r3, r7, r0
 801235c:	781a      	ldrb	r2, [r3, #0]
 801235e:	238b      	movs	r3, #139	; 0x8b
 8012360:	005b      	lsls	r3, r3, #1
 8012362:	18fb      	adds	r3, r7, r3
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	009b      	lsls	r3, r3, #2
 8012368:	18d3      	adds	r3, r2, r3
 801236a:	4a50      	ldr	r2, [pc, #320]	; (80124ac <_1Bit_To_4Bit_16x32+0x284>)
 801236c:	258c      	movs	r5, #140	; 0x8c
 801236e:	006d      	lsls	r5, r5, #1
 8012370:	1952      	adds	r2, r2, r5
 8012372:	19d2      	adds	r2, r2, r7
 8012374:	5cd1      	ldrb	r1, [r2, r3]
 8012376:	2614      	movs	r6, #20
 8012378:	36ff      	adds	r6, #255	; 0xff
 801237a:	19bb      	adds	r3, r7, r6
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	4a4c      	ldr	r2, [pc, #304]	; (80124b0 <_1Bit_To_4Bit_16x32+0x288>)
 8012380:	1952      	adds	r2, r2, r5
 8012382:	19d2      	adds	r2, r2, r7
 8012384:	5cd3      	ldrb	r3, [r2, r3]
 8012386:	2218      	movs	r2, #24
 8012388:	32ff      	adds	r2, #255	; 0xff
 801238a:	18ba      	adds	r2, r7, r2
 801238c:	7812      	ldrb	r2, [r2, #0]
 801238e:	4013      	ands	r3, r2
 8012390:	b2da      	uxtb	r2, r3
 8012392:	0004      	movs	r4, r0
 8012394:	183b      	adds	r3, r7, r0
 8012396:	7818      	ldrb	r0, [r3, #0]
 8012398:	238b      	movs	r3, #139	; 0x8b
 801239a:	005b      	lsls	r3, r3, #1
 801239c:	18fb      	adds	r3, r7, r3
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	18c3      	adds	r3, r0, r3
 80123a4:	430a      	orrs	r2, r1
 80123a6:	b2d1      	uxtb	r1, r2
 80123a8:	4a40      	ldr	r2, [pc, #256]	; (80124ac <_1Bit_To_4Bit_16x32+0x284>)
 80123aa:	1950      	adds	r0, r2, r5
 80123ac:	19c2      	adds	r2, r0, r7
 80123ae:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 80123b0:	0020      	movs	r0, r4
 80123b2:	183b      	adds	r3, r7, r0
 80123b4:	781a      	ldrb	r2, [r3, #0]
 80123b6:	238b      	movs	r3, #139	; 0x8b
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	18fb      	adds	r3, r7, r3
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	009b      	lsls	r3, r3, #2
 80123c0:	18d3      	adds	r3, r2, r3
 80123c2:	4a3a      	ldr	r2, [pc, #232]	; (80124ac <_1Bit_To_4Bit_16x32+0x284>)
 80123c4:	1954      	adds	r4, r2, r5
 80123c6:	19e2      	adds	r2, r4, r7
 80123c8:	5cd3      	ldrb	r3, [r2, r3]
 80123ca:	b25a      	sxtb	r2, r3
 80123cc:	19bb      	adds	r3, r7, r6
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	3301      	adds	r3, #1
 80123d2:	4937      	ldr	r1, [pc, #220]	; (80124b0 <_1Bit_To_4Bit_16x32+0x288>)
 80123d4:	002c      	movs	r4, r5
 80123d6:	194d      	adds	r5, r1, r5
 80123d8:	19e9      	adds	r1, r5, r7
 80123da:	5ccb      	ldrb	r3, [r1, r3]
 80123dc:	2118      	movs	r1, #24
 80123de:	31ff      	adds	r1, #255	; 0xff
 80123e0:	1879      	adds	r1, r7, r1
 80123e2:	7809      	ldrb	r1, [r1, #0]
 80123e4:	400b      	ands	r3, r1
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	011b      	lsls	r3, r3, #4
 80123ea:	b25b      	sxtb	r3, r3
 80123ec:	4313      	orrs	r3, r2
 80123ee:	b259      	sxtb	r1, r3
 80123f0:	183b      	adds	r3, r7, r0
 80123f2:	781a      	ldrb	r2, [r3, #0]
 80123f4:	238b      	movs	r3, #139	; 0x8b
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	18fb      	adds	r3, r7, r3
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	18d3      	adds	r3, r2, r3
 8012400:	b2c9      	uxtb	r1, r1
 8012402:	4a2a      	ldr	r2, [pc, #168]	; (80124ac <_1Bit_To_4Bit_16x32+0x284>)
 8012404:	1912      	adds	r2, r2, r4
 8012406:	19d2      	adds	r2, r2, r7
 8012408:	54d1      	strb	r1, [r2, r3]
			 j++;
 801240a:	19bb      	adds	r3, r7, r6
 801240c:	781a      	ldrb	r2, [r3, #0]
 801240e:	19bb      	adds	r3, r7, r6
 8012410:	3201      	adds	r2, #1
 8012412:	701a      	strb	r2, [r3, #0]
			 j++;
 8012414:	19bb      	adds	r3, r7, r6
 8012416:	781a      	ldrb	r2, [r3, #0]
 8012418:	19bb      	adds	r3, r7, r6
 801241a:	3201      	adds	r2, #1
 801241c:	701a      	strb	r2, [r3, #0]
			 k--;
 801241e:	183b      	adds	r3, r7, r0
 8012420:	781a      	ldrb	r2, [r3, #0]
 8012422:	183b      	adds	r3, r7, r0
 8012424:	3a01      	subs	r2, #1
 8012426:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8012428:	2314      	movs	r3, #20
 801242a:	33ff      	adds	r3, #255	; 0xff
 801242c:	18fb      	adds	r3, r7, r3
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	2b07      	cmp	r3, #7
 8012432:	d990      	bls.n	8012356 <_1Bit_To_4Bit_16x32+0x12e>
	 for(uint8_t index=0;index<64;index++)
 8012434:	218b      	movs	r1, #139	; 0x8b
 8012436:	0049      	lsls	r1, r1, #1
 8012438:	187b      	adds	r3, r7, r1
 801243a:	781a      	ldrb	r2, [r3, #0]
 801243c:	187b      	adds	r3, r7, r1
 801243e:	3201      	adds	r2, #1
 8012440:	701a      	strb	r2, [r3, #0]
 8012442:	238b      	movs	r3, #139	; 0x8b
 8012444:	005b      	lsls	r3, r3, #1
 8012446:	18fb      	adds	r3, r7, r3
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b3f      	cmp	r3, #63	; 0x3f
 801244c:	d800      	bhi.n	8012450 <_1Bit_To_4Bit_16x32+0x228>
 801244e:	e70e      	b.n	801226e <_1Bit_To_4Bit_16x32+0x46>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8012450:	4b19      	ldr	r3, [pc, #100]	; (80124b8 <_1Bit_To_4Bit_16x32+0x290>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	68da      	ldr	r2, [r3, #12]
 8012456:	4b18      	ldr	r3, [pc, #96]	; (80124b8 <_1Bit_To_4Bit_16x32+0x290>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2101      	movs	r1, #1
 801245c:	438a      	bics	r2, r1
 801245e:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8012460:	4b16      	ldr	r3, [pc, #88]	; (80124bc <_1Bit_To_4Bit_16x32+0x294>)
 8012462:	2201      	movs	r2, #1
 8012464:	2102      	movs	r1, #2
 8012466:	0018      	movs	r0, r3
 8012468:	f7f4 fe07 	bl	800707a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 801246c:	4b13      	ldr	r3, [pc, #76]	; (80124bc <_1Bit_To_4Bit_16x32+0x294>)
 801246e:	2200      	movs	r2, #0
 8012470:	2101      	movs	r1, #1
 8012472:	0018      	movs	r0, r3
 8012474:	f7f4 fe01 	bl	800707a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*64,100);
 8012478:	2380      	movs	r3, #128	; 0x80
 801247a:	005a      	lsls	r2, r3, #1
 801247c:	2310      	movs	r3, #16
 801247e:	18f9      	adds	r1, r7, r3
 8012480:	480f      	ldr	r0, [pc, #60]	; (80124c0 <_1Bit_To_4Bit_16x32+0x298>)
 8012482:	2364      	movs	r3, #100	; 0x64
 8012484:	f7f5 fd08 	bl	8007e98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8012488:	4b0c      	ldr	r3, [pc, #48]	; (80124bc <_1Bit_To_4Bit_16x32+0x294>)
 801248a:	2201      	movs	r2, #1
 801248c:	2101      	movs	r1, #1
 801248e:	0018      	movs	r0, r3
 8012490:	f7f4 fdf3 	bl	800707a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8012494:	4b08      	ldr	r3, [pc, #32]	; (80124b8 <_1Bit_To_4Bit_16x32+0x290>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	68da      	ldr	r2, [r3, #12]
 801249a:	4b07      	ldr	r3, [pc, #28]	; (80124b8 <_1Bit_To_4Bit_16x32+0x290>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2101      	movs	r1, #1
 80124a0:	430a      	orrs	r2, r1
 80124a2:	60da      	str	r2, [r3, #12]


}
 80124a4:	46c0      	nop			; (mov r8, r8)
 80124a6:	46bd      	mov	sp, r7
 80124a8:	b047      	add	sp, #284	; 0x11c
 80124aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124ac:	fffffef8 	.word	0xfffffef8
 80124b0:	fffffef0 	.word	0xfffffef0
 80124b4:	200030b3 	.word	0x200030b3
 80124b8:	2000347c 	.word	0x2000347c
 80124bc:	50000800 	.word	0x50000800
 80124c0:	200033c8 	.word	0x200033c8

080124c4 <_1Bit_To_4Bit_8x16>:

static void _1Bit_To_4Bit_8x16(uint8_t* Pdata)
{
 80124c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124c6:	b097      	sub	sp, #92	; 0x5c
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
	 uint8_t data_send_buffer[4*16]={0x00};
 80124cc:	2310      	movs	r3, #16
 80124ce:	18fb      	adds	r3, r7, r3
 80124d0:	2200      	movs	r2, #0
 80124d2:	601a      	str	r2, [r3, #0]
 80124d4:	3304      	adds	r3, #4
 80124d6:	223c      	movs	r2, #60	; 0x3c
 80124d8:	2100      	movs	r1, #0
 80124da:	0018      	movs	r0, r3
 80124dc:	f002 fac1 	bl	8014a62 <memset>
	 uint8_t mask=0x01;
 80124e0:	2357      	movs	r3, #87	; 0x57
 80124e2:	18fb      	adds	r3, r7, r3
 80124e4:	2201      	movs	r2, #1
 80124e6:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 80124e8:	2308      	movs	r3, #8
 80124ea:	18fb      	adds	r3, r7, r3
 80124ec:	2200      	movs	r2, #0
 80124ee:	601a      	str	r2, [r3, #0]
 80124f0:	2200      	movs	r2, #0
 80124f2:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<16;index++)
 80124f4:	2356      	movs	r3, #86	; 0x56
 80124f6:	18fb      	adds	r3, r7, r3
 80124f8:	2200      	movs	r2, #0
 80124fa:	701a      	strb	r2, [r3, #0]
 80124fc:	e0bd      	b.n	801267a <_1Bit_To_4Bit_8x16+0x1b6>
	 {
		 memset(&temp[0],0,8);
 80124fe:	2308      	movs	r3, #8
 8012500:	18fb      	adds	r3, r7, r3
 8012502:	2208      	movs	r2, #8
 8012504:	2100      	movs	r1, #0
 8012506:	0018      	movs	r0, r3
 8012508:	f002 faab 	bl	8014a62 <memset>
		 mask=0x01;
 801250c:	2357      	movs	r3, #87	; 0x57
 801250e:	18fb      	adds	r3, r7, r3
 8012510:	2201      	movs	r2, #1
 8012512:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 8012514:	2355      	movs	r3, #85	; 0x55
 8012516:	18fb      	adds	r3, r7, r3
 8012518:	2200      	movs	r2, #0
 801251a:	701a      	strb	r2, [r3, #0]
 801251c:	e03b      	b.n	8012596 <_1Bit_To_4Bit_8x16+0xd2>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 801251e:	2356      	movs	r3, #86	; 0x56
 8012520:	18fb      	adds	r3, r7, r3
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	18d3      	adds	r3, r2, r3
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	2157      	movs	r1, #87	; 0x57
 801252c:	187a      	adds	r2, r7, r1
 801252e:	7812      	ldrb	r2, [r2, #0]
 8012530:	4013      	ands	r3, r2
 8012532:	b2db      	uxtb	r3, r3
 8012534:	187a      	adds	r2, r7, r1
 8012536:	7812      	ldrb	r2, [r2, #0]
 8012538:	429a      	cmp	r2, r3
 801253a:	d10e      	bne.n	801255a <_1Bit_To_4Bit_8x16+0x96>
 801253c:	2055      	movs	r0, #85	; 0x55
 801253e:	183b      	adds	r3, r7, r0
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	2408      	movs	r4, #8
 8012544:	193a      	adds	r2, r7, r4
 8012546:	5cd1      	ldrb	r1, [r2, r3]
 8012548:	4b65      	ldr	r3, [pc, #404]	; (80126e0 <_1Bit_To_4Bit_8x16+0x21c>)
 801254a:	781a      	ldrb	r2, [r3, #0]
 801254c:	183b      	adds	r3, r7, r0
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	430a      	orrs	r2, r1
 8012552:	b2d1      	uxtb	r1, r2
 8012554:	193a      	adds	r2, r7, r4
 8012556:	54d1      	strb	r1, [r2, r3]
 8012558:	e011      	b.n	801257e <_1Bit_To_4Bit_8x16+0xba>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 801255a:	2155      	movs	r1, #85	; 0x55
 801255c:	187b      	adds	r3, r7, r1
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	2008      	movs	r0, #8
 8012562:	183a      	adds	r2, r7, r0
 8012564:	5cd3      	ldrb	r3, [r2, r3]
 8012566:	b25b      	sxtb	r3, r3
 8012568:	4a5d      	ldr	r2, [pc, #372]	; (80126e0 <_1Bit_To_4Bit_8x16+0x21c>)
 801256a:	7812      	ldrb	r2, [r2, #0]
 801256c:	0112      	lsls	r2, r2, #4
 801256e:	b252      	sxtb	r2, r2
 8012570:	4013      	ands	r3, r2
 8012572:	b25a      	sxtb	r2, r3
 8012574:	187b      	adds	r3, r7, r1
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	b2d1      	uxtb	r1, r2
 801257a:	183a      	adds	r2, r7, r0
 801257c:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 801257e:	2357      	movs	r3, #87	; 0x57
 8012580:	18fa      	adds	r2, r7, r3
 8012582:	18fb      	adds	r3, r7, r3
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	18db      	adds	r3, r3, r3
 8012588:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 801258a:	2155      	movs	r1, #85	; 0x55
 801258c:	187b      	adds	r3, r7, r1
 801258e:	781a      	ldrb	r2, [r3, #0]
 8012590:	187b      	adds	r3, r7, r1
 8012592:	3201      	adds	r2, #1
 8012594:	701a      	strb	r2, [r3, #0]
 8012596:	2355      	movs	r3, #85	; 0x55
 8012598:	18fb      	adds	r3, r7, r3
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	2b07      	cmp	r3, #7
 801259e:	d9be      	bls.n	801251e <_1Bit_To_4Bit_8x16+0x5a>

		 }

		 mask=0x0f;
 80125a0:	2357      	movs	r3, #87	; 0x57
 80125a2:	18fb      	adds	r3, r7, r3
 80125a4:	220f      	movs	r2, #15
 80125a6:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 80125a8:	2354      	movs	r3, #84	; 0x54
 80125aa:	18fb      	adds	r3, r7, r3
 80125ac:	2203      	movs	r2, #3
 80125ae:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 80125b0:	2353      	movs	r3, #83	; 0x53
 80125b2:	18fb      	adds	r3, r7, r3
 80125b4:	2200      	movs	r2, #0
 80125b6:	701a      	strb	r2, [r3, #0]
 80125b8:	e054      	b.n	8012664 <_1Bit_To_4Bit_8x16+0x1a0>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 80125ba:	2054      	movs	r0, #84	; 0x54
 80125bc:	183b      	adds	r3, r7, r0
 80125be:	781a      	ldrb	r2, [r3, #0]
 80125c0:	2656      	movs	r6, #86	; 0x56
 80125c2:	19bb      	adds	r3, r7, r6
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	009b      	lsls	r3, r3, #2
 80125c8:	18d3      	adds	r3, r2, r3
 80125ca:	2210      	movs	r2, #16
 80125cc:	18ba      	adds	r2, r7, r2
 80125ce:	5cd1      	ldrb	r1, [r2, r3]
 80125d0:	2553      	movs	r5, #83	; 0x53
 80125d2:	197b      	adds	r3, r7, r5
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	2408      	movs	r4, #8
 80125d8:	193a      	adds	r2, r7, r4
 80125da:	5cd3      	ldrb	r3, [r2, r3]
 80125dc:	2457      	movs	r4, #87	; 0x57
 80125de:	193a      	adds	r2, r7, r4
 80125e0:	7812      	ldrb	r2, [r2, #0]
 80125e2:	4013      	ands	r3, r2
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	0004      	movs	r4, r0
 80125e8:	183b      	adds	r3, r7, r0
 80125ea:	7818      	ldrb	r0, [r3, #0]
 80125ec:	19bb      	adds	r3, r7, r6
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	18c3      	adds	r3, r0, r3
 80125f4:	430a      	orrs	r2, r1
 80125f6:	b2d1      	uxtb	r1, r2
 80125f8:	2210      	movs	r2, #16
 80125fa:	18ba      	adds	r2, r7, r2
 80125fc:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 80125fe:	0020      	movs	r0, r4
 8012600:	183b      	adds	r3, r7, r0
 8012602:	781a      	ldrb	r2, [r3, #0]
 8012604:	0034      	movs	r4, r6
 8012606:	19bb      	adds	r3, r7, r6
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	18d3      	adds	r3, r2, r3
 801260e:	2610      	movs	r6, #16
 8012610:	19ba      	adds	r2, r7, r6
 8012612:	5cd3      	ldrb	r3, [r2, r3]
 8012614:	b25a      	sxtb	r2, r3
 8012616:	197b      	adds	r3, r7, r5
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	3301      	adds	r3, #1
 801261c:	2108      	movs	r1, #8
 801261e:	1879      	adds	r1, r7, r1
 8012620:	5ccb      	ldrb	r3, [r1, r3]
 8012622:	2157      	movs	r1, #87	; 0x57
 8012624:	1879      	adds	r1, r7, r1
 8012626:	7809      	ldrb	r1, [r1, #0]
 8012628:	400b      	ands	r3, r1
 801262a:	b2db      	uxtb	r3, r3
 801262c:	011b      	lsls	r3, r3, #4
 801262e:	b25b      	sxtb	r3, r3
 8012630:	4313      	orrs	r3, r2
 8012632:	b259      	sxtb	r1, r3
 8012634:	183b      	adds	r3, r7, r0
 8012636:	781a      	ldrb	r2, [r3, #0]
 8012638:	193b      	adds	r3, r7, r4
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	18d3      	adds	r3, r2, r3
 8012640:	b2c9      	uxtb	r1, r1
 8012642:	19ba      	adds	r2, r7, r6
 8012644:	54d1      	strb	r1, [r2, r3]
			 j++;
 8012646:	197b      	adds	r3, r7, r5
 8012648:	781a      	ldrb	r2, [r3, #0]
 801264a:	197b      	adds	r3, r7, r5
 801264c:	3201      	adds	r2, #1
 801264e:	701a      	strb	r2, [r3, #0]
			 j++;
 8012650:	197b      	adds	r3, r7, r5
 8012652:	781a      	ldrb	r2, [r3, #0]
 8012654:	197b      	adds	r3, r7, r5
 8012656:	3201      	adds	r2, #1
 8012658:	701a      	strb	r2, [r3, #0]
			 k--;
 801265a:	183b      	adds	r3, r7, r0
 801265c:	781a      	ldrb	r2, [r3, #0]
 801265e:	183b      	adds	r3, r7, r0
 8012660:	3a01      	subs	r2, #1
 8012662:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8012664:	2353      	movs	r3, #83	; 0x53
 8012666:	18fb      	adds	r3, r7, r3
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	2b07      	cmp	r3, #7
 801266c:	d9a5      	bls.n	80125ba <_1Bit_To_4Bit_8x16+0xf6>
	 for(uint8_t index=0;index<16;index++)
 801266e:	2156      	movs	r1, #86	; 0x56
 8012670:	187b      	adds	r3, r7, r1
 8012672:	781a      	ldrb	r2, [r3, #0]
 8012674:	187b      	adds	r3, r7, r1
 8012676:	3201      	adds	r2, #1
 8012678:	701a      	strb	r2, [r3, #0]
 801267a:	2356      	movs	r3, #86	; 0x56
 801267c:	18fb      	adds	r3, r7, r3
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	2b0f      	cmp	r3, #15
 8012682:	d800      	bhi.n	8012686 <_1Bit_To_4Bit_8x16+0x1c2>
 8012684:	e73b      	b.n	80124fe <_1Bit_To_4Bit_8x16+0x3a>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8012686:	4b17      	ldr	r3, [pc, #92]	; (80126e4 <_1Bit_To_4Bit_8x16+0x220>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	68da      	ldr	r2, [r3, #12]
 801268c:	4b15      	ldr	r3, [pc, #84]	; (80126e4 <_1Bit_To_4Bit_8x16+0x220>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2101      	movs	r1, #1
 8012692:	438a      	bics	r2, r1
 8012694:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8012696:	4b14      	ldr	r3, [pc, #80]	; (80126e8 <_1Bit_To_4Bit_8x16+0x224>)
 8012698:	2201      	movs	r2, #1
 801269a:	2102      	movs	r1, #2
 801269c:	0018      	movs	r0, r3
 801269e:	f7f4 fcec 	bl	800707a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 80126a2:	4b11      	ldr	r3, [pc, #68]	; (80126e8 <_1Bit_To_4Bit_8x16+0x224>)
 80126a4:	2200      	movs	r2, #0
 80126a6:	2101      	movs	r1, #1
 80126a8:	0018      	movs	r0, r3
 80126aa:	f7f4 fce6 	bl	800707a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*16,100);
 80126ae:	2310      	movs	r3, #16
 80126b0:	18f9      	adds	r1, r7, r3
 80126b2:	480e      	ldr	r0, [pc, #56]	; (80126ec <_1Bit_To_4Bit_8x16+0x228>)
 80126b4:	2364      	movs	r3, #100	; 0x64
 80126b6:	2240      	movs	r2, #64	; 0x40
 80126b8:	f7f5 fbee 	bl	8007e98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 80126bc:	4b0a      	ldr	r3, [pc, #40]	; (80126e8 <_1Bit_To_4Bit_8x16+0x224>)
 80126be:	2201      	movs	r2, #1
 80126c0:	2101      	movs	r1, #1
 80126c2:	0018      	movs	r0, r3
 80126c4:	f7f4 fcd9 	bl	800707a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 80126c8:	4b06      	ldr	r3, [pc, #24]	; (80126e4 <_1Bit_To_4Bit_8x16+0x220>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	68da      	ldr	r2, [r3, #12]
 80126ce:	4b05      	ldr	r3, [pc, #20]	; (80126e4 <_1Bit_To_4Bit_8x16+0x220>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2101      	movs	r1, #1
 80126d4:	430a      	orrs	r2, r1
 80126d6:	60da      	str	r2, [r3, #12]

}
 80126d8:	46c0      	nop			; (mov r8, r8)
 80126da:	46bd      	mov	sp, r7
 80126dc:	b017      	add	sp, #92	; 0x5c
 80126de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126e0:	200030b3 	.word	0x200030b3
 80126e4:	2000347c 	.word	0x2000347c
 80126e8:	50000800 	.word	0x50000800
 80126ec:	200033c8 	.word	0x200033c8

080126f0 <Font_1Bit_To_4Bit_12x24>:
 * @brief  12x24专用的转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据
 * @retval None
 */
void Font_1Bit_To_4Bit_12x24(uint8_t Data0, uint8_t Data1)
{
 80126f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126f2:	b08d      	sub	sp, #52	; 0x34
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	0002      	movs	r2, r0
 80126f8:	1dfb      	adds	r3, r7, #7
 80126fa:	701a      	strb	r2, [r3, #0]
 80126fc:	1dbb      	adds	r3, r7, #6
 80126fe:	1c0a      	adds	r2, r1, #0
 8012700:	701a      	strb	r2, [r3, #0]

	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 /*8位data0*/
	 uint8_t mask=0x01;
 8012702:	232f      	movs	r3, #47	; 0x2f
 8012704:	18fb      	adds	r3, r7, r3
 8012706:	2201      	movs	r2, #1
 8012708:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 801270a:	2318      	movs	r3, #24
 801270c:	18fb      	adds	r3, r7, r3
 801270e:	2200      	movs	r2, #0
 8012710:	601a      	str	r2, [r3, #0]
 8012712:	2200      	movs	r2, #0
 8012714:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 8012716:	2314      	movs	r3, #20
 8012718:	18fb      	adds	r3, r7, r3
 801271a:	2200      	movs	r2, #0
 801271c:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 801271e:	232e      	movs	r3, #46	; 0x2e
 8012720:	18fb      	adds	r3, r7, r3
 8012722:	2200      	movs	r2, #0
 8012724:	701a      	strb	r2, [r3, #0]
 8012726:	e037      	b.n	8012798 <Font_1Bit_To_4Bit_12x24+0xa8>
	 {
		 if((Data0&mask)==mask) temp[i]|=Light;//low 4 bits set
 8012728:	1dfb      	adds	r3, r7, #7
 801272a:	212f      	movs	r1, #47	; 0x2f
 801272c:	187a      	adds	r2, r7, r1
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	7812      	ldrb	r2, [r2, #0]
 8012732:	4013      	ands	r3, r2
 8012734:	b2db      	uxtb	r3, r3
 8012736:	187a      	adds	r2, r7, r1
 8012738:	7812      	ldrb	r2, [r2, #0]
 801273a:	429a      	cmp	r2, r3
 801273c:	d10e      	bne.n	801275c <Font_1Bit_To_4Bit_12x24+0x6c>
 801273e:	202e      	movs	r0, #46	; 0x2e
 8012740:	183b      	adds	r3, r7, r0
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	2418      	movs	r4, #24
 8012746:	193a      	adds	r2, r7, r4
 8012748:	5cd1      	ldrb	r1, [r2, r3]
 801274a:	4ba0      	ldr	r3, [pc, #640]	; (80129cc <Font_1Bit_To_4Bit_12x24+0x2dc>)
 801274c:	781a      	ldrb	r2, [r3, #0]
 801274e:	183b      	adds	r3, r7, r0
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	430a      	orrs	r2, r1
 8012754:	b2d1      	uxtb	r1, r2
 8012756:	193a      	adds	r2, r7, r4
 8012758:	54d1      	strb	r1, [r2, r3]
 801275a:	e011      	b.n	8012780 <Font_1Bit_To_4Bit_12x24+0x90>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 801275c:	212e      	movs	r1, #46	; 0x2e
 801275e:	187b      	adds	r3, r7, r1
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	2018      	movs	r0, #24
 8012764:	183a      	adds	r2, r7, r0
 8012766:	5cd3      	ldrb	r3, [r2, r3]
 8012768:	b25b      	sxtb	r3, r3
 801276a:	4a98      	ldr	r2, [pc, #608]	; (80129cc <Font_1Bit_To_4Bit_12x24+0x2dc>)
 801276c:	7812      	ldrb	r2, [r2, #0]
 801276e:	0112      	lsls	r2, r2, #4
 8012770:	b252      	sxtb	r2, r2
 8012772:	4013      	ands	r3, r2
 8012774:	b25a      	sxtb	r2, r3
 8012776:	187b      	adds	r3, r7, r1
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	b2d1      	uxtb	r1, r2
 801277c:	183a      	adds	r2, r7, r0
 801277e:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8012780:	232f      	movs	r3, #47	; 0x2f
 8012782:	18fa      	adds	r2, r7, r3
 8012784:	18fb      	adds	r3, r7, r3
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	18db      	adds	r3, r3, r3
 801278a:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 801278c:	212e      	movs	r1, #46	; 0x2e
 801278e:	187b      	adds	r3, r7, r1
 8012790:	781a      	ldrb	r2, [r3, #0]
 8012792:	187b      	adds	r3, r7, r1
 8012794:	3201      	adds	r2, #1
 8012796:	701a      	strb	r2, [r3, #0]
 8012798:	232e      	movs	r3, #46	; 0x2e
 801279a:	18fb      	adds	r3, r7, r3
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	2b07      	cmp	r3, #7
 80127a0:	d9c2      	bls.n	8012728 <Font_1Bit_To_4Bit_12x24+0x38>

	 }
	 mask=0x0f;
 80127a2:	232f      	movs	r3, #47	; 0x2f
 80127a4:	18fb      	adds	r3, r7, r3
 80127a6:	220f      	movs	r2, #15
 80127a8:	701a      	strb	r2, [r3, #0]
	 uint8_t index=0;
 80127aa:	232d      	movs	r3, #45	; 0x2d
 80127ac:	18fb      	adds	r3, r7, r3
 80127ae:	2200      	movs	r2, #0
 80127b0:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 80127b2:	232c      	movs	r3, #44	; 0x2c
 80127b4:	18fb      	adds	r3, r7, r3
 80127b6:	2200      	movs	r2, #0
 80127b8:	701a      	strb	r2, [r3, #0]
 80127ba:	e03d      	b.n	8012838 <Font_1Bit_To_4Bit_12x24+0x148>
	 {
		 data_send[index]|=(temp[j]&mask);
 80127bc:	202d      	movs	r0, #45	; 0x2d
 80127be:	183b      	adds	r3, r7, r0
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	2514      	movs	r5, #20
 80127c4:	197a      	adds	r2, r7, r5
 80127c6:	5cd1      	ldrb	r1, [r2, r3]
 80127c8:	242c      	movs	r4, #44	; 0x2c
 80127ca:	193b      	adds	r3, r7, r4
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	2618      	movs	r6, #24
 80127d0:	19ba      	adds	r2, r7, r6
 80127d2:	5cd3      	ldrb	r3, [r2, r3]
 80127d4:	222f      	movs	r2, #47	; 0x2f
 80127d6:	18ba      	adds	r2, r7, r2
 80127d8:	7812      	ldrb	r2, [r2, #0]
 80127da:	4013      	ands	r3, r2
 80127dc:	b2da      	uxtb	r2, r3
 80127de:	183b      	adds	r3, r7, r0
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	430a      	orrs	r2, r1
 80127e4:	b2d1      	uxtb	r1, r2
 80127e6:	197a      	adds	r2, r7, r5
 80127e8:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);
 80127ea:	183b      	adds	r3, r7, r0
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	197a      	adds	r2, r7, r5
 80127f0:	5cd3      	ldrb	r3, [r2, r3]
 80127f2:	b25a      	sxtb	r2, r3
 80127f4:	193b      	adds	r3, r7, r4
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	3301      	adds	r3, #1
 80127fa:	19b9      	adds	r1, r7, r6
 80127fc:	5ccb      	ldrb	r3, [r1, r3]
 80127fe:	212f      	movs	r1, #47	; 0x2f
 8012800:	1879      	adds	r1, r7, r1
 8012802:	7809      	ldrb	r1, [r1, #0]
 8012804:	400b      	ands	r3, r1
 8012806:	b2db      	uxtb	r3, r3
 8012808:	011b      	lsls	r3, r3, #4
 801280a:	b25b      	sxtb	r3, r3
 801280c:	4313      	orrs	r3, r2
 801280e:	b25a      	sxtb	r2, r3
 8012810:	183b      	adds	r3, r7, r0
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	b2d1      	uxtb	r1, r2
 8012816:	197a      	adds	r2, r7, r5
 8012818:	54d1      	strb	r1, [r2, r3]
		 j++;
 801281a:	193b      	adds	r3, r7, r4
 801281c:	781a      	ldrb	r2, [r3, #0]
 801281e:	193b      	adds	r3, r7, r4
 8012820:	3201      	adds	r2, #1
 8012822:	701a      	strb	r2, [r3, #0]
		 j++;
 8012824:	193b      	adds	r3, r7, r4
 8012826:	781a      	ldrb	r2, [r3, #0]
 8012828:	193b      	adds	r3, r7, r4
 801282a:	3201      	adds	r2, #1
 801282c:	701a      	strb	r2, [r3, #0]
		 index++;
 801282e:	183b      	adds	r3, r7, r0
 8012830:	781a      	ldrb	r2, [r3, #0]
 8012832:	183b      	adds	r3, r7, r0
 8012834:	3201      	adds	r2, #1
 8012836:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8012838:	232c      	movs	r3, #44	; 0x2c
 801283a:	18fb      	adds	r3, r7, r3
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	2b07      	cmp	r3, #7
 8012840:	d9bc      	bls.n	80127bc <Font_1Bit_To_4Bit_12x24+0xcc>

	 }
	 /*高四位data1*/
	 mask=0x10;
 8012842:	232f      	movs	r3, #47	; 0x2f
 8012844:	18fb      	adds	r3, r7, r3
 8012846:	2210      	movs	r2, #16
 8012848:	701a      	strb	r2, [r3, #0]
	 uint8_t temp1[4]={0x00};
 801284a:	2310      	movs	r3, #16
 801284c:	18fb      	adds	r3, r7, r3
 801284e:	2200      	movs	r2, #0
 8012850:	601a      	str	r2, [r3, #0]
	 uint8_t data_send1[2]={0x00};
 8012852:	230c      	movs	r3, #12
 8012854:	18fb      	adds	r3, r7, r3
 8012856:	2200      	movs	r2, #0
 8012858:	801a      	strh	r2, [r3, #0]
	 for(uint8_t i=0;i<4;i++)
 801285a:	232b      	movs	r3, #43	; 0x2b
 801285c:	18fb      	adds	r3, r7, r3
 801285e:	2200      	movs	r2, #0
 8012860:	701a      	strb	r2, [r3, #0]
 8012862:	e037      	b.n	80128d4 <Font_1Bit_To_4Bit_12x24+0x1e4>
	 {
		 if((Data1&mask)==mask) temp1[i]|=Light;//low 4 bits set
 8012864:	1dbb      	adds	r3, r7, #6
 8012866:	212f      	movs	r1, #47	; 0x2f
 8012868:	187a      	adds	r2, r7, r1
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	7812      	ldrb	r2, [r2, #0]
 801286e:	4013      	ands	r3, r2
 8012870:	b2db      	uxtb	r3, r3
 8012872:	187a      	adds	r2, r7, r1
 8012874:	7812      	ldrb	r2, [r2, #0]
 8012876:	429a      	cmp	r2, r3
 8012878:	d10e      	bne.n	8012898 <Font_1Bit_To_4Bit_12x24+0x1a8>
 801287a:	202b      	movs	r0, #43	; 0x2b
 801287c:	183b      	adds	r3, r7, r0
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2410      	movs	r4, #16
 8012882:	193a      	adds	r2, r7, r4
 8012884:	5cd1      	ldrb	r1, [r2, r3]
 8012886:	4b51      	ldr	r3, [pc, #324]	; (80129cc <Font_1Bit_To_4Bit_12x24+0x2dc>)
 8012888:	781a      	ldrb	r2, [r3, #0]
 801288a:	183b      	adds	r3, r7, r0
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	430a      	orrs	r2, r1
 8012890:	b2d1      	uxtb	r1, r2
 8012892:	193a      	adds	r2, r7, r4
 8012894:	54d1      	strb	r1, [r2, r3]
 8012896:	e011      	b.n	80128bc <Font_1Bit_To_4Bit_12x24+0x1cc>
		 else 				   temp1[i]&=(Light<<4);//low 4 bits reset
 8012898:	212b      	movs	r1, #43	; 0x2b
 801289a:	187b      	adds	r3, r7, r1
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	2010      	movs	r0, #16
 80128a0:	183a      	adds	r2, r7, r0
 80128a2:	5cd3      	ldrb	r3, [r2, r3]
 80128a4:	b25b      	sxtb	r3, r3
 80128a6:	4a49      	ldr	r2, [pc, #292]	; (80129cc <Font_1Bit_To_4Bit_12x24+0x2dc>)
 80128a8:	7812      	ldrb	r2, [r2, #0]
 80128aa:	0112      	lsls	r2, r2, #4
 80128ac:	b252      	sxtb	r2, r2
 80128ae:	4013      	ands	r3, r2
 80128b0:	b25a      	sxtb	r2, r3
 80128b2:	187b      	adds	r3, r7, r1
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	b2d1      	uxtb	r1, r2
 80128b8:	183a      	adds	r2, r7, r0
 80128ba:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 80128bc:	232f      	movs	r3, #47	; 0x2f
 80128be:	18fa      	adds	r2, r7, r3
 80128c0:	18fb      	adds	r3, r7, r3
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	18db      	adds	r3, r3, r3
 80128c6:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<4;i++)
 80128c8:	212b      	movs	r1, #43	; 0x2b
 80128ca:	187b      	adds	r3, r7, r1
 80128cc:	781a      	ldrb	r2, [r3, #0]
 80128ce:	187b      	adds	r3, r7, r1
 80128d0:	3201      	adds	r2, #1
 80128d2:	701a      	strb	r2, [r3, #0]
 80128d4:	232b      	movs	r3, #43	; 0x2b
 80128d6:	18fb      	adds	r3, r7, r3
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	2b03      	cmp	r3, #3
 80128dc:	d9c2      	bls.n	8012864 <Font_1Bit_To_4Bit_12x24+0x174>

	 }
	 mask=0x0f;
 80128de:	232f      	movs	r3, #47	; 0x2f
 80128e0:	18fb      	adds	r3, r7, r3
 80128e2:	220f      	movs	r2, #15
 80128e4:	701a      	strb	r2, [r3, #0]
	 index=0;
 80128e6:	232d      	movs	r3, #45	; 0x2d
 80128e8:	18fb      	adds	r3, r7, r3
 80128ea:	2200      	movs	r2, #0
 80128ec:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 80128ee:	232a      	movs	r3, #42	; 0x2a
 80128f0:	18fb      	adds	r3, r7, r3
 80128f2:	2200      	movs	r2, #0
 80128f4:	701a      	strb	r2, [r3, #0]
 80128f6:	e03d      	b.n	8012974 <Font_1Bit_To_4Bit_12x24+0x284>
	 {
		 data_send1[index]|=(temp1[j]&mask);
 80128f8:	202d      	movs	r0, #45	; 0x2d
 80128fa:	183b      	adds	r3, r7, r0
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	250c      	movs	r5, #12
 8012900:	197a      	adds	r2, r7, r5
 8012902:	5cd1      	ldrb	r1, [r2, r3]
 8012904:	242a      	movs	r4, #42	; 0x2a
 8012906:	193b      	adds	r3, r7, r4
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	2610      	movs	r6, #16
 801290c:	19ba      	adds	r2, r7, r6
 801290e:	5cd3      	ldrb	r3, [r2, r3]
 8012910:	222f      	movs	r2, #47	; 0x2f
 8012912:	18ba      	adds	r2, r7, r2
 8012914:	7812      	ldrb	r2, [r2, #0]
 8012916:	4013      	ands	r3, r2
 8012918:	b2da      	uxtb	r2, r3
 801291a:	183b      	adds	r3, r7, r0
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	430a      	orrs	r2, r1
 8012920:	b2d1      	uxtb	r1, r2
 8012922:	197a      	adds	r2, r7, r5
 8012924:	54d1      	strb	r1, [r2, r3]
		 data_send1[index]|=((temp1[j+1]&mask)<<4);
 8012926:	183b      	adds	r3, r7, r0
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	197a      	adds	r2, r7, r5
 801292c:	5cd3      	ldrb	r3, [r2, r3]
 801292e:	b25a      	sxtb	r2, r3
 8012930:	193b      	adds	r3, r7, r4
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	3301      	adds	r3, #1
 8012936:	19b9      	adds	r1, r7, r6
 8012938:	5ccb      	ldrb	r3, [r1, r3]
 801293a:	212f      	movs	r1, #47	; 0x2f
 801293c:	1879      	adds	r1, r7, r1
 801293e:	7809      	ldrb	r1, [r1, #0]
 8012940:	400b      	ands	r3, r1
 8012942:	b2db      	uxtb	r3, r3
 8012944:	011b      	lsls	r3, r3, #4
 8012946:	b25b      	sxtb	r3, r3
 8012948:	4313      	orrs	r3, r2
 801294a:	b25a      	sxtb	r2, r3
 801294c:	183b      	adds	r3, r7, r0
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	b2d1      	uxtb	r1, r2
 8012952:	197a      	adds	r2, r7, r5
 8012954:	54d1      	strb	r1, [r2, r3]
		 j++;
 8012956:	193b      	adds	r3, r7, r4
 8012958:	781a      	ldrb	r2, [r3, #0]
 801295a:	193b      	adds	r3, r7, r4
 801295c:	3201      	adds	r2, #1
 801295e:	701a      	strb	r2, [r3, #0]
		 j++;
 8012960:	193b      	adds	r3, r7, r4
 8012962:	781a      	ldrb	r2, [r3, #0]
 8012964:	193b      	adds	r3, r7, r4
 8012966:	3201      	adds	r2, #1
 8012968:	701a      	strb	r2, [r3, #0]
		 index++;
 801296a:	183b      	adds	r3, r7, r0
 801296c:	781a      	ldrb	r2, [r3, #0]
 801296e:	183b      	adds	r3, r7, r0
 8012970:	3201      	adds	r2, #1
 8012972:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 8012974:	232a      	movs	r3, #42	; 0x2a
 8012976:	18fb      	adds	r3, r7, r3
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	2b03      	cmp	r3, #3
 801297c:	d9bc      	bls.n	80128f8 <Font_1Bit_To_4Bit_12x24+0x208>

	 }

	 //写RAM
	 for(int k=3;k>=0;k--)
 801297e:	2303      	movs	r3, #3
 8012980:	627b      	str	r3, [r7, #36]	; 0x24
 8012982:	e00a      	b.n	801299a <Font_1Bit_To_4Bit_12x24+0x2aa>
	 {
		 SPI_OLED_SendData(data_send[k]);//一次写两个像素点，写四次
 8012984:	2314      	movs	r3, #20
 8012986:	18fa      	adds	r2, r7, r3
 8012988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298a:	18d3      	adds	r3, r2, r3
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	0018      	movs	r0, r3
 8012990:	f7ff fa22 	bl	8011dd8 <SPI_OLED_SendData>
	 for(int k=3;k>=0;k--)
 8012994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012996:	3b01      	subs	r3, #1
 8012998:	627b      	str	r3, [r7, #36]	; 0x24
 801299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299c:	2b00      	cmp	r3, #0
 801299e:	daf1      	bge.n	8012984 <Font_1Bit_To_4Bit_12x24+0x294>
	 }
	 for(int k=1;k>=0;k--)
 80129a0:	2301      	movs	r3, #1
 80129a2:	623b      	str	r3, [r7, #32]
 80129a4:	e00a      	b.n	80129bc <Font_1Bit_To_4Bit_12x24+0x2cc>
	 {
		 SPI_OLED_SendData(data_send1[k]);//一次写两个像素点，写两次
 80129a6:	230c      	movs	r3, #12
 80129a8:	18fa      	adds	r2, r7, r3
 80129aa:	6a3b      	ldr	r3, [r7, #32]
 80129ac:	18d3      	adds	r3, r2, r3
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	0018      	movs	r0, r3
 80129b2:	f7ff fa11 	bl	8011dd8 <SPI_OLED_SendData>
	 for(int k=1;k>=0;k--)
 80129b6:	6a3b      	ldr	r3, [r7, #32]
 80129b8:	3b01      	subs	r3, #1
 80129ba:	623b      	str	r3, [r7, #32]
 80129bc:	6a3b      	ldr	r3, [r7, #32]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	daf1      	bge.n	80129a6 <Font_1Bit_To_4Bit_12x24+0x2b6>
	 }


}
 80129c2:	46c0      	nop			; (mov r8, r8)
 80129c4:	46c0      	nop			; (mov r8, r8)
 80129c6:	46bd      	mov	sp, r7
 80129c8:	b00d      	add	sp, #52	; 0x34
 80129ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129cc:	200030b3 	.word	0x200030b3

080129d0 <Set_Column_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Column_Address(uint8_t a, uint8_t b)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	0002      	movs	r2, r0
 80129d8:	1dfb      	adds	r3, r7, #7
 80129da:	701a      	strb	r2, [r3, #0]
 80129dc:	1dbb      	adds	r3, r7, #6
 80129de:	1c0a      	adds	r2, r1, #0
 80129e0:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Column_Address_Commond);			//Set Column Address
 80129e2:	2015      	movs	r0, #21
 80129e4:	f7ff fa30 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c+a);					                  //0x1c地址偏移量()
 80129e8:	1dfb      	adds	r3, r7, #7
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	331c      	adds	r3, #28
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	0018      	movs	r0, r3
 80129f2:	f7ff f9f1 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x1c+b);
 80129f6:	1dbb      	adds	r3, r7, #6
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	331c      	adds	r3, #28
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	0018      	movs	r0, r3
 8012a00:	f7ff f9ea 	bl	8011dd8 <SPI_OLED_SendData>
}
 8012a04:	46c0      	nop			; (mov r8, r8)
 8012a06:	46bd      	mov	sp, r7
 8012a08:	b002      	add	sp, #8
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <Set_Row_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Row_Address(uint8_t a, uint8_t b)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	0002      	movs	r2, r0
 8012a14:	1dfb      	adds	r3, r7, #7
 8012a16:	701a      	strb	r2, [r3, #0]
 8012a18:	1dbb      	adds	r3, r7, #6
 8012a1a:	1c0a      	adds	r2, r1, #0
 8012a1c:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Row_Address_Commond);			// Set Row Address
 8012a1e:	2075      	movs	r0, #117	; 0x75
 8012a20:	f7ff fa12 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(a);					//   Default => 0x00
 8012a24:	1dfb      	adds	r3, r7, #7
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	0018      	movs	r0, r3
 8012a2a:	f7ff f9d5 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(b);					//   Default => 0x7F
 8012a2e:	1dbb      	adds	r3, r7, #6
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	0018      	movs	r0, r3
 8012a34:	f7ff f9d0 	bl	8011dd8 <SPI_OLED_SendData>
}
 8012a38:	46c0      	nop			; (mov r8, r8)
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	b002      	add	sp, #8
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <Set_WriteData>:
	* @brief  写命令
	* @param  None
	* @retval None
	*/
void Set_WriteData(void)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	af00      	add	r7, sp, #0
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012a44:	205c      	movs	r0, #92	; 0x5c
 8012a46:	f7ff f9ff 	bl	8011e48 <SPI_OLED_SendCommond>
}
 8012a4a:	46c0      	nop			; (mov r8, r8)
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <Fill_RAM>:
	* @brief  整屏显示
	* @param  要整屏显示的颜色
	* @retval None
	*/
void Fill_RAM(uint8_t Data)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	0002      	movs	r2, r0
 8012a58:	1dfb      	adds	r3, r7, #7
 8012a5a:	701a      	strb	r2, [r3, #0]
	unsigned char i,j;

	Set_Column_Address(0x00,0x3f);//0到63列
 8012a5c:	213f      	movs	r1, #63	; 0x3f
 8012a5e:	2000      	movs	r0, #0
 8012a60:	f7ff ffb6 	bl	80129d0 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 8012a64:	213f      	movs	r1, #63	; 0x3f
 8012a66:	2000      	movs	r0, #0
 8012a68:	f7ff ffd0 	bl	8012a0c <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 8012a6c:	205c      	movs	r0, #92	; 0x5c
 8012a6e:	f7ff f9eb 	bl	8011e48 <SPI_OLED_SendCommond>

	for(i=0;i<64;i++)             //一共64行
 8012a72:	230f      	movs	r3, #15
 8012a74:	18fb      	adds	r3, r7, r3
 8012a76:	2200      	movs	r2, #0
 8012a78:	701a      	strb	r2, [r3, #0]
 8012a7a:	e01f      	b.n	8012abc <Fill_RAM+0x6c>
	{
		for(j=0;j<64;j++)           //一共64列
 8012a7c:	230e      	movs	r3, #14
 8012a7e:	18fb      	adds	r3, r7, r3
 8012a80:	2200      	movs	r2, #0
 8012a82:	701a      	strb	r2, [r3, #0]
 8012a84:	e00f      	b.n	8012aa6 <Fill_RAM+0x56>
		{
			//每次发八位数据，发送两次构成16位数据，完成四个像素点的控制（列地址对应四个像素点）
			//指定行和列地址后相当于选中了四个像素点，每次发送八位数据设置两个像素点，因此要发两次
			SPI_OLED_SendData(Data);
 8012a86:	1dfb      	adds	r3, r7, #7
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	0018      	movs	r0, r3
 8012a8c:	f7ff f9a4 	bl	8011dd8 <SPI_OLED_SendData>
			SPI_OLED_SendData(Data);
 8012a90:	1dfb      	adds	r3, r7, #7
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	0018      	movs	r0, r3
 8012a96:	f7ff f99f 	bl	8011dd8 <SPI_OLED_SendData>
		for(j=0;j<64;j++)           //一共64列
 8012a9a:	210e      	movs	r1, #14
 8012a9c:	187b      	adds	r3, r7, r1
 8012a9e:	781a      	ldrb	r2, [r3, #0]
 8012aa0:	187b      	adds	r3, r7, r1
 8012aa2:	3201      	adds	r2, #1
 8012aa4:	701a      	strb	r2, [r3, #0]
 8012aa6:	230e      	movs	r3, #14
 8012aa8:	18fb      	adds	r3, r7, r3
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b3f      	cmp	r3, #63	; 0x3f
 8012aae:	d9ea      	bls.n	8012a86 <Fill_RAM+0x36>
	for(i=0;i<64;i++)             //一共64行
 8012ab0:	210f      	movs	r1, #15
 8012ab2:	187b      	adds	r3, r7, r1
 8012ab4:	781a      	ldrb	r2, [r3, #0]
 8012ab6:	187b      	adds	r3, r7, r1
 8012ab8:	3201      	adds	r2, #1
 8012aba:	701a      	strb	r2, [r3, #0]
 8012abc:	230f      	movs	r3, #15
 8012abe:	18fb      	adds	r3, r7, r3
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8012ac4:	d9da      	bls.n	8012a7c <Fill_RAM+0x2c>

		}
	}
}
 8012ac6:	46c0      	nop			; (mov r8, r8)
 8012ac8:	46c0      	nop			; (mov r8, r8)
 8012aca:	46bd      	mov	sp, r7
 8012acc:	b004      	add	sp, #16
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <Clear_Screen>:


void Clear_Screen(void)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	4f25      	ldr	r7, [pc, #148]	; (8012b68 <Clear_Screen+0x98>)
 8012ad4:	44bd      	add	sp, r7
 8012ad6:	af00      	add	r7, sp, #0
	uint8_t clear_arry[64*128]={0x00};
 8012ad8:	4b23      	ldr	r3, [pc, #140]	; (8012b68 <Clear_Screen+0x98>)
 8012ada:	2280      	movs	r2, #128	; 0x80
 8012adc:	0192      	lsls	r2, r2, #6
 8012ade:	189b      	adds	r3, r3, r2
 8012ae0:	19db      	adds	r3, r3, r7
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	601a      	str	r2, [r3, #0]
 8012ae6:	3304      	adds	r3, #4
 8012ae8:	4a20      	ldr	r2, [pc, #128]	; (8012b6c <Clear_Screen+0x9c>)
 8012aea:	2100      	movs	r1, #0
 8012aec:	0018      	movs	r0, r3
 8012aee:	f001 ffb8 	bl	8014a62 <memset>

	Set_Column_Address(0x00,0x3f);//0到63列
 8012af2:	213f      	movs	r1, #63	; 0x3f
 8012af4:	2000      	movs	r0, #0
 8012af6:	f7ff ff6b 	bl	80129d0 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 8012afa:	213f      	movs	r1, #63	; 0x3f
 8012afc:	2000      	movs	r0, #0
 8012afe:	f7ff ff85 	bl	8012a0c <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 8012b02:	205c      	movs	r0, #92	; 0x5c
 8012b04:	f7ff f9a0 	bl	8011e48 <SPI_OLED_SendCommond>

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8012b08:	4b19      	ldr	r3, [pc, #100]	; (8012b70 <Clear_Screen+0xa0>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	68da      	ldr	r2, [r3, #12]
 8012b0e:	4b18      	ldr	r3, [pc, #96]	; (8012b70 <Clear_Screen+0xa0>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2101      	movs	r1, #1
 8012b14:	438a      	bics	r2, r1
 8012b16:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8012b18:	4b16      	ldr	r3, [pc, #88]	; (8012b74 <Clear_Screen+0xa4>)
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	2102      	movs	r1, #2
 8012b1e:	0018      	movs	r0, r3
 8012b20:	f7f4 faab 	bl	800707a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8012b24:	4b13      	ldr	r3, [pc, #76]	; (8012b74 <Clear_Screen+0xa4>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	2101      	movs	r1, #1
 8012b2a:	0018      	movs	r0, r3
 8012b2c:	f7f4 faa5 	bl	800707a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,clear_arry,64*128,1000);
 8012b30:	23fa      	movs	r3, #250	; 0xfa
 8012b32:	009b      	lsls	r3, r3, #2
 8012b34:	2280      	movs	r2, #128	; 0x80
 8012b36:	0192      	lsls	r2, r2, #6
 8012b38:	0039      	movs	r1, r7
 8012b3a:	480f      	ldr	r0, [pc, #60]	; (8012b78 <Clear_Screen+0xa8>)
 8012b3c:	f7f5 f9ac 	bl	8007e98 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8012b40:	4b0c      	ldr	r3, [pc, #48]	; (8012b74 <Clear_Screen+0xa4>)
 8012b42:	2201      	movs	r2, #1
 8012b44:	2101      	movs	r1, #1
 8012b46:	0018      	movs	r0, r3
 8012b48:	f7f4 fa97 	bl	800707a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8012b4c:	4b08      	ldr	r3, [pc, #32]	; (8012b70 <Clear_Screen+0xa0>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	68da      	ldr	r2, [r3, #12]
 8012b52:	4b07      	ldr	r3, [pc, #28]	; (8012b70 <Clear_Screen+0xa0>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2101      	movs	r1, #1
 8012b58:	430a      	orrs	r2, r1
 8012b5a:	60da      	str	r2, [r3, #12]


}
 8012b5c:	46c0      	nop			; (mov r8, r8)
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	2380      	movs	r3, #128	; 0x80
 8012b62:	019b      	lsls	r3, r3, #6
 8012b64:	449d      	add	sp, r3
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	ffffe000 	.word	0xffffe000
 8012b6c:	00001ffc 	.word	0x00001ffc
 8012b70:	2000347c 	.word	0x2000347c
 8012b74:	50000800 	.word	0x50000800
 8012b78:	200033c8 	.word	0x200033c8

08012b7c <Write_Single_8x16AsicII>:
  * @brief  写一个8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_Single_8x16AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012b7c:	b590      	push	{r4, r7, lr}
 8012b7e:	b085      	sub	sp, #20
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	0004      	movs	r4, r0
 8012b84:	0008      	movs	r0, r1
 8012b86:	0011      	movs	r1, r2
 8012b88:	1dfb      	adds	r3, r7, #7
 8012b8a:	1c22      	adds	r2, r4, #0
 8012b8c:	701a      	strb	r2, [r3, #0]
 8012b8e:	1dbb      	adds	r3, r7, #6
 8012b90:	1c02      	adds	r2, r0, #0
 8012b92:	701a      	strb	r2, [r3, #0]
 8012b94:	1d7b      	adds	r3, r7, #5
 8012b96:	1c0a      	adds	r2, r1, #0
 8012b98:	701a      	strb	r2, [r3, #0]

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8012b9a:	20a0      	movs	r0, #160	; 0xa0
 8012b9c:	f7ff f954 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012ba0:	2014      	movs	r0, #20
 8012ba2:	f7ff f919 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012ba6:	2011      	movs	r0, #17
 8012ba8:	f7ff f916 	bl	8011dd8 <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+1);    //设置列地址，两列（8个像素点）
 8012bac:	1dbb      	adds	r3, r7, #6
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	b2da      	uxtb	r2, r3
 8012bb4:	1dbb      	adds	r3, r7, #6
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	0011      	movs	r1, r2
 8012bba:	0018      	movs	r0, r3
 8012bbc:	f7ff ff08 	bl	80129d0 <Set_Column_Address>
	Set_Row_Address(Row, Row+15);            //设置行地址，16行（16个像素点）
 8012bc0:	1dfb      	adds	r3, r7, #7
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	330f      	adds	r3, #15
 8012bc6:	b2da      	uxtb	r2, r3
 8012bc8:	1dfb      	adds	r3, r7, #7
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	0011      	movs	r1, r2
 8012bce:	0018      	movs	r0, r3
 8012bd0:	f7ff ff1c 	bl	8012a0c <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012bd4:	205c      	movs	r0, #92	; 0x5c
 8012bd6:	f7ff f937 	bl	8011e48 <SPI_OLED_SendCommond>

	uint16_t k=(Data-' ')*16;//求对空格的偏移量，确定是哪个字模（*16是因为一行有16个u8数据，构成一个字符）
 8012bda:	1d7b      	adds	r3, r7, #5
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	3b20      	subs	r3, #32
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	210e      	movs	r1, #14
 8012be4:	187b      	adds	r3, r7, r1
 8012be6:	0112      	lsls	r2, r2, #4
 8012be8:	801a      	strh	r2, [r3, #0]
							 //确定字模及其偏移量后将那行的16个u8数据取出

	_1Bit_To_4Bit_8x16(&Fonts_AsicII_8x16[k]);
 8012bea:	187b      	adds	r3, r7, r1
 8012bec:	881a      	ldrh	r2, [r3, #0]
 8012bee:	4b04      	ldr	r3, [pc, #16]	; (8012c00 <Write_Single_8x16AsicII+0x84>)
 8012bf0:	18d3      	adds	r3, r2, r3
 8012bf2:	0018      	movs	r0, r3
 8012bf4:	f7ff fc66 	bl	80124c4 <_1Bit_To_4Bit_8x16>


}
 8012bf8:	46c0      	nop			; (mov r8, r8)
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	b005      	add	sp, #20
 8012bfe:	bd90      	pop	{r4, r7, pc}
 8012c00:	20000010 	.word	0x20000010

08012c04 <Write_String_8x16AsicII>:
  * @brief  写一行8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_String_8x16AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012c04:	b590      	push	{r4, r7, lr}
 8012c06:	b085      	sub	sp, #20
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	603a      	str	r2, [r7, #0]
 8012c0c:	1dfb      	adds	r3, r7, #7
 8012c0e:	1c02      	adds	r2, r0, #0
 8012c10:	701a      	strb	r2, [r3, #0]
 8012c12:	1dbb      	adds	r3, r7, #6
 8012c14:	1c0a      	adds	r2, r1, #0
 8012c16:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	0018      	movs	r0, r3
 8012c1c:	f7ed fa7a 	bl	8000114 <strlen>
 8012c20:	0002      	movs	r2, r0
 8012c22:	230e      	movs	r3, #14
 8012c24:	18fb      	adds	r3, r7, r3
 8012c26:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 8012c28:	230f      	movs	r3, #15
 8012c2a:	18fb      	adds	r3, r7, r3
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	701a      	strb	r2, [r3, #0]
 8012c30:	e018      	b.n	8012c64 <Write_String_8x16AsicII+0x60>
	{
	 Write_Single_8x16AsicII(Row,Column+2*i,Data[i]);
 8012c32:	200f      	movs	r0, #15
 8012c34:	183b      	adds	r3, r7, r0
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	18db      	adds	r3, r3, r3
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	1dbb      	adds	r3, r7, #6
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	18d3      	adds	r3, r2, r3
 8012c42:	b2d9      	uxtb	r1, r3
 8012c44:	0004      	movs	r4, r0
 8012c46:	183b      	adds	r3, r7, r0
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	683a      	ldr	r2, [r7, #0]
 8012c4c:	18d3      	adds	r3, r2, r3
 8012c4e:	781a      	ldrb	r2, [r3, #0]
 8012c50:	1dfb      	adds	r3, r7, #7
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	0018      	movs	r0, r3
 8012c56:	f7ff ff91 	bl	8012b7c <Write_Single_8x16AsicII>
	for(i=0;i<k;i++)
 8012c5a:	193b      	adds	r3, r7, r4
 8012c5c:	781a      	ldrb	r2, [r3, #0]
 8012c5e:	193b      	adds	r3, r7, r4
 8012c60:	3201      	adds	r2, #1
 8012c62:	701a      	strb	r2, [r3, #0]
 8012c64:	230f      	movs	r3, #15
 8012c66:	18fa      	adds	r2, r7, r3
 8012c68:	230e      	movs	r3, #14
 8012c6a:	18fb      	adds	r3, r7, r3
 8012c6c:	7812      	ldrb	r2, [r2, #0]
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d3de      	bcc.n	8012c32 <Write_String_8x16AsicII+0x2e>
	}
}
 8012c74:	46c0      	nop			; (mov r8, r8)
 8012c76:	46c0      	nop			; (mov r8, r8)
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	b005      	add	sp, #20
 8012c7c:	bd90      	pop	{r4, r7, pc}
	...

08012c80 <Write_Single_16x32AsicII>:
 * @brief  写一个16x32数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_16x32AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012c80:	b590      	push	{r4, r7, lr}
 8012c82:	b085      	sub	sp, #20
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	0004      	movs	r4, r0
 8012c88:	0008      	movs	r0, r1
 8012c8a:	0011      	movs	r1, r2
 8012c8c:	1dfb      	adds	r3, r7, #7
 8012c8e:	1c22      	adds	r2, r4, #0
 8012c90:	701a      	strb	r2, [r3, #0]
 8012c92:	1dbb      	adds	r3, r7, #6
 8012c94:	1c02      	adds	r2, r0, #0
 8012c96:	701a      	strb	r2, [r3, #0]
 8012c98:	1d7b      	adds	r3, r7, #5
 8012c9a:	1c0a      	adds	r2, r1, #0
 8012c9c:	701a      	strb	r2, [r3, #0]

	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8012c9e:	20a0      	movs	r0, #160	; 0xa0
 8012ca0:	f7ff f8d2 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012ca4:	2014      	movs	r0, #20
 8012ca6:	f7ff f897 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012caa:	2011      	movs	r0, #17
 8012cac:	f7ff f894 	bl	8011dd8 <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+3);    //设置列地址
 8012cb0:	1dbb      	adds	r3, r7, #6
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	3303      	adds	r3, #3
 8012cb6:	b2da      	uxtb	r2, r3
 8012cb8:	1dbb      	adds	r3, r7, #6
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	0011      	movs	r1, r2
 8012cbe:	0018      	movs	r0, r3
 8012cc0:	f7ff fe86 	bl	80129d0 <Set_Column_Address>
	Set_Row_Address(Row, Row+31);            //设置行地址
 8012cc4:	1dfb      	adds	r3, r7, #7
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	331f      	adds	r3, #31
 8012cca:	b2da      	uxtb	r2, r3
 8012ccc:	1dfb      	adds	r3, r7, #7
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	0011      	movs	r1, r2
 8012cd2:	0018      	movs	r0, r3
 8012cd4:	f7ff fe9a 	bl	8012a0c <Set_Row_Address>

	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012cd8:	205c      	movs	r0, #92	; 0x5c
 8012cda:	f7ff f8b5 	bl	8011e48 <SPI_OLED_SendCommond>

	k=(Data-' ')*64;//求对空格的偏移量
 8012cde:	1d7b      	adds	r3, r7, #5
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	3b20      	subs	r3, #32
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	210e      	movs	r1, #14
 8012ce8:	187b      	adds	r3, r7, r1
 8012cea:	0192      	lsls	r2, r2, #6
 8012cec:	801a      	strh	r2, [r3, #0]

	_1Bit_To_4Bit_16x32(&Fonts_AsicII_16x32[k]);
 8012cee:	187b      	adds	r3, r7, r1
 8012cf0:	881a      	ldrh	r2, [r3, #0]
 8012cf2:	4b04      	ldr	r3, [pc, #16]	; (8012d04 <Write_Single_16x32AsicII+0x84>)
 8012cf4:	18d3      	adds	r3, r2, r3
 8012cf6:	0018      	movs	r0, r3
 8012cf8:	f7ff fa96 	bl	8012228 <_1Bit_To_4Bit_16x32>


}
 8012cfc:	46c0      	nop			; (mov r8, r8)
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	b005      	add	sp, #20
 8012d02:	bd90      	pop	{r4, r7, pc}
 8012d04:	20001810 	.word	0x20001810

08012d08 <Write_String_16x32AsicII>:
 * @brief  写一行16x32数字、字母(ASIC II)   分辨率256*64，16*24==长16，宽32
 * @param  行，列，要写入的数字、字母         Row==行的左上角   Column==列的左边（总共64）
 * @retval None
 */
void Write_String_16x32AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012d08:	b590      	push	{r4, r7, lr}
 8012d0a:	b085      	sub	sp, #20
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	603a      	str	r2, [r7, #0]
 8012d10:	1dfb      	adds	r3, r7, #7
 8012d12:	1c02      	adds	r2, r0, #0
 8012d14:	701a      	strb	r2, [r3, #0]
 8012d16:	1dbb      	adds	r3, r7, #6
 8012d18:	1c0a      	adds	r2, r1, #0
 8012d1a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	0018      	movs	r0, r3
 8012d20:	f7ed f9f8 	bl	8000114 <strlen>
 8012d24:	0002      	movs	r2, r0
 8012d26:	230e      	movs	r3, #14
 8012d28:	18fb      	adds	r3, r7, r3
 8012d2a:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 8012d2c:	230f      	movs	r3, #15
 8012d2e:	18fb      	adds	r3, r7, r3
 8012d30:	2200      	movs	r2, #0
 8012d32:	701a      	strb	r2, [r3, #0]
 8012d34:	e018      	b.n	8012d68 <Write_String_16x32AsicII+0x60>
	{
	 Write_Single_16x32AsicII(Row,Column+4*i,Data[i]);
 8012d36:	200f      	movs	r0, #15
 8012d38:	183b      	adds	r3, r7, r0
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	b2da      	uxtb	r2, r3
 8012d40:	1dbb      	adds	r3, r7, #6
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	18d3      	adds	r3, r2, r3
 8012d46:	b2d9      	uxtb	r1, r3
 8012d48:	0004      	movs	r4, r0
 8012d4a:	183b      	adds	r3, r7, r0
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	683a      	ldr	r2, [r7, #0]
 8012d50:	18d3      	adds	r3, r2, r3
 8012d52:	781a      	ldrb	r2, [r3, #0]
 8012d54:	1dfb      	adds	r3, r7, #7
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	0018      	movs	r0, r3
 8012d5a:	f7ff ff91 	bl	8012c80 <Write_Single_16x32AsicII>
	for(i=0;i<k;i++)
 8012d5e:	193b      	adds	r3, r7, r4
 8012d60:	781a      	ldrb	r2, [r3, #0]
 8012d62:	193b      	adds	r3, r7, r4
 8012d64:	3201      	adds	r2, #1
 8012d66:	701a      	strb	r2, [r3, #0]
 8012d68:	230f      	movs	r3, #15
 8012d6a:	18fa      	adds	r2, r7, r3
 8012d6c:	230e      	movs	r3, #14
 8012d6e:	18fb      	adds	r3, r7, r3
 8012d70:	7812      	ldrb	r2, [r2, #0]
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d3de      	bcc.n	8012d36 <Write_String_16x32AsicII+0x2e>
	}
}
 8012d78:	46c0      	nop			; (mov r8, r8)
 8012d7a:	46c0      	nop			; (mov r8, r8)
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	b005      	add	sp, #20
 8012d80:	bd90      	pop	{r4, r7, pc}
	...

08012d84 <Write_Single_12x24AsicII>:
 * @brief  写一个12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_12x24AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012d84:	b590      	push	{r4, r7, lr}
 8012d86:	b085      	sub	sp, #20
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	0004      	movs	r4, r0
 8012d8c:	0008      	movs	r0, r1
 8012d8e:	0011      	movs	r1, r2
 8012d90:	1dfb      	adds	r3, r7, #7
 8012d92:	1c22      	adds	r2, r4, #0
 8012d94:	701a      	strb	r2, [r3, #0]
 8012d96:	1dbb      	adds	r3, r7, #6
 8012d98:	1c02      	adds	r2, r0, #0
 8012d9a:	701a      	strb	r2, [r3, #0]
 8012d9c:	1d7b      	adds	r3, r7, #5
 8012d9e:	1c0a      	adds	r2, r1, #0
 8012da0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8012da2:	20a0      	movs	r0, #160	; 0xa0
 8012da4:	f7ff f850 	bl	8011e48 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012da8:	2014      	movs	r0, #20
 8012daa:	f7ff f815 	bl	8011dd8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012dae:	2011      	movs	r0, #17
 8012db0:	f7ff f812 	bl	8011dd8 <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+2);    //设置列地址
 8012db4:	1dbb      	adds	r3, r7, #6
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	3302      	adds	r3, #2
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	1dbb      	adds	r3, r7, #6
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	0011      	movs	r1, r2
 8012dc2:	0018      	movs	r0, r3
 8012dc4:	f7ff fe04 	bl	80129d0 <Set_Column_Address>
	Set_Row_Address(Row, Row+23);            //设置行地址
 8012dc8:	1dfb      	adds	r3, r7, #7
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	3317      	adds	r3, #23
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	1dfb      	adds	r3, r7, #7
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	0011      	movs	r1, r2
 8012dd6:	0018      	movs	r0, r3
 8012dd8:	f7ff fe18 	bl	8012a0c <Set_Row_Address>

	Set_WriteData();
 8012ddc:	f7ff fe30 	bl	8012a40 <Set_WriteData>

	k=(Data-' ')*48;//求对空格的偏移量
 8012de0:	1d7b      	adds	r3, r7, #5
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	3b20      	subs	r3, #32
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	230c      	movs	r3, #12
 8012dea:	18fb      	adds	r3, r7, r3
 8012dec:	2130      	movs	r1, #48	; 0x30
 8012dee:	434a      	muls	r2, r1
 8012df0:	801a      	strh	r2, [r3, #0]

	for(i=0;i<24;i++)
 8012df2:	230f      	movs	r3, #15
 8012df4:	18fb      	adds	r3, r7, r3
 8012df6:	2200      	movs	r2, #0
 8012df8:	701a      	strb	r2, [r3, #0]
 8012dfa:	e017      	b.n	8012e2c <Write_Single_12x24AsicII+0xa8>
	{
		/*12*24 12bits用两个8bit组合描述，因此，每次需要访问两个u8*/
		Font_1Bit_To_4Bit_12x24(Fonts_AsicII_12x24[k],Fonts_AsicII_12x24[k+1]);
 8012dfc:	240c      	movs	r4, #12
 8012dfe:	193b      	adds	r3, r7, r4
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	4a0f      	ldr	r2, [pc, #60]	; (8012e40 <Write_Single_12x24AsicII+0xbc>)
 8012e04:	5cd0      	ldrb	r0, [r2, r3]
 8012e06:	193b      	adds	r3, r7, r4
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	4a0c      	ldr	r2, [pc, #48]	; (8012e40 <Write_Single_12x24AsicII+0xbc>)
 8012e0e:	5cd3      	ldrb	r3, [r2, r3]
 8012e10:	0019      	movs	r1, r3
 8012e12:	f7ff fc6d 	bl	80126f0 <Font_1Bit_To_4Bit_12x24>
		k=k+2;
 8012e16:	193b      	adds	r3, r7, r4
 8012e18:	193a      	adds	r2, r7, r4
 8012e1a:	8812      	ldrh	r2, [r2, #0]
 8012e1c:	3202      	adds	r2, #2
 8012e1e:	801a      	strh	r2, [r3, #0]
	for(i=0;i<24;i++)
 8012e20:	210f      	movs	r1, #15
 8012e22:	187b      	adds	r3, r7, r1
 8012e24:	781a      	ldrb	r2, [r3, #0]
 8012e26:	187b      	adds	r3, r7, r1
 8012e28:	3201      	adds	r2, #1
 8012e2a:	701a      	strb	r2, [r3, #0]
 8012e2c:	230f      	movs	r3, #15
 8012e2e:	18fb      	adds	r3, r7, r3
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	2b17      	cmp	r3, #23
 8012e34:	d9e2      	bls.n	8012dfc <Write_Single_12x24AsicII+0x78>
	}
}
 8012e36:	46c0      	nop			; (mov r8, r8)
 8012e38:	46c0      	nop			; (mov r8, r8)
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	b005      	add	sp, #20
 8012e3e:	bd90      	pop	{r4, r7, pc}
 8012e40:	20000640 	.word	0x20000640

08012e44 <Write_String_12x24AsicII>:
 * @brief  写一行12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_String_12x24AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012e44:	b590      	push	{r4, r7, lr}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	603a      	str	r2, [r7, #0]
 8012e4c:	1dfb      	adds	r3, r7, #7
 8012e4e:	1c02      	adds	r2, r0, #0
 8012e50:	701a      	strb	r2, [r3, #0]
 8012e52:	1dbb      	adds	r3, r7, #6
 8012e54:	1c0a      	adds	r2, r1, #0
 8012e56:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	0018      	movs	r0, r3
 8012e5c:	f7ed f95a 	bl	8000114 <strlen>
 8012e60:	0002      	movs	r2, r0
 8012e62:	230e      	movs	r3, #14
 8012e64:	18fb      	adds	r3, r7, r3
 8012e66:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 8012e68:	230f      	movs	r3, #15
 8012e6a:	18fb      	adds	r3, r7, r3
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	701a      	strb	r2, [r3, #0]
 8012e70:	e01a      	b.n	8012ea8 <Write_String_12x24AsicII+0x64>
	{
		Write_Single_12x24AsicII(Row,Column+3*i,Data[i]);
 8012e72:	200f      	movs	r0, #15
 8012e74:	183b      	adds	r3, r7, r0
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	1c1a      	adds	r2, r3, #0
 8012e7a:	1892      	adds	r2, r2, r2
 8012e7c:	18d3      	adds	r3, r2, r3
 8012e7e:	b2da      	uxtb	r2, r3
 8012e80:	1dbb      	adds	r3, r7, #6
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	18d3      	adds	r3, r2, r3
 8012e86:	b2d9      	uxtb	r1, r3
 8012e88:	0004      	movs	r4, r0
 8012e8a:	183b      	adds	r3, r7, r0
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	683a      	ldr	r2, [r7, #0]
 8012e90:	18d3      	adds	r3, r2, r3
 8012e92:	781a      	ldrb	r2, [r3, #0]
 8012e94:	1dfb      	adds	r3, r7, #7
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	0018      	movs	r0, r3
 8012e9a:	f7ff ff73 	bl	8012d84 <Write_Single_12x24AsicII>
	for(i=0;i<k;i++)
 8012e9e:	193b      	adds	r3, r7, r4
 8012ea0:	781a      	ldrb	r2, [r3, #0]
 8012ea2:	193b      	adds	r3, r7, r4
 8012ea4:	3201      	adds	r2, #1
 8012ea6:	701a      	strb	r2, [r3, #0]
 8012ea8:	230f      	movs	r3, #15
 8012eaa:	18fa      	adds	r2, r7, r3
 8012eac:	230e      	movs	r3, #14
 8012eae:	18fb      	adds	r3, r7, r3
 8012eb0:	7812      	ldrb	r2, [r2, #0]
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d3dc      	bcc.n	8012e72 <Write_String_12x24AsicII+0x2e>
	}
}
 8012eb8:	46c0      	nop			; (mov r8, r8)
 8012eba:	46c0      	nop			; (mov r8, r8)
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	b005      	add	sp, #20
 8012ec0:	bd90      	pop	{r4, r7, pc}
	...

08012ec4 <Display_Main_Interface_Voltage>:
  * @brief  将电压值显示出来
  * @param  电压值
  * @retval None
  */
void Display_Main_Interface_Voltage(float Voltage)
{
 8012ec4:	b5b0      	push	{r4, r5, r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
	char String_voltage_real[7]={'0','0','0','.','0','0'};
 8012ecc:	2408      	movs	r4, #8
 8012ece:	193b      	adds	r3, r7, r4
 8012ed0:	4a2c      	ldr	r2, [pc, #176]	; (8012f84 <Display_Main_Interface_Voltage+0xc0>)
 8012ed2:	6811      	ldr	r1, [r2, #0]
 8012ed4:	6019      	str	r1, [r3, #0]
 8012ed6:	8891      	ldrh	r1, [r2, #4]
 8012ed8:	8099      	strh	r1, [r3, #4]
 8012eda:	7992      	ldrb	r2, [r2, #6]
 8012edc:	719a      	strb	r2, [r3, #6]
	if(Voltage>=100)   		sprintf(String_voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 8012ede:	492a      	ldr	r1, [pc, #168]	; (8012f88 <Display_Main_Interface_Voltage+0xc4>)
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ed fb17 	bl	8000514 <__aeabi_fcmpge>
 8012ee6:	1e03      	subs	r3, r0, #0
 8012ee8:	d009      	beq.n	8012efe <Display_Main_Interface_Voltage+0x3a>
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ef ffe0 	bl	8002eb0 <__aeabi_f2d>
 8012ef0:	0002      	movs	r2, r0
 8012ef2:	000b      	movs	r3, r1
 8012ef4:	4925      	ldr	r1, [pc, #148]	; (8012f8c <Display_Main_Interface_Voltage+0xc8>)
 8012ef6:	1938      	adds	r0, r7, r4
 8012ef8:	f002 fb1e 	bl	8015538 <siprintf>
 8012efc:	e030      	b.n	8012f60 <Display_Main_Interface_Voltage+0x9c>
	else if(Voltage>=9.99)
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f7ef ffd6 	bl	8002eb0 <__aeabi_f2d>
 8012f04:	4a22      	ldr	r2, [pc, #136]	; (8012f90 <Display_Main_Interface_Voltage+0xcc>)
 8012f06:	4b23      	ldr	r3, [pc, #140]	; (8012f94 <Display_Main_Interface_Voltage+0xd0>)
 8012f08:	f7ed faca 	bl	80004a0 <__aeabi_dcmpge>
 8012f0c:	1e03      	subs	r3, r0, #0
 8012f0e:	d00f      	beq.n	8012f30 <Display_Main_Interface_Voltage+0x6c>
	{
		String_voltage_real[0]='0';
 8012f10:	2508      	movs	r5, #8
 8012f12:	197b      	adds	r3, r7, r5
 8012f14:	2230      	movs	r2, #48	; 0x30
 8012f16:	701a      	strb	r2, [r3, #0]
		sprintf(&String_voltage_real[1], "%5.2f", Voltage);//保留两位小数
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ef ffc9 	bl	8002eb0 <__aeabi_f2d>
 8012f1e:	0002      	movs	r2, r0
 8012f20:	000b      	movs	r3, r1
 8012f22:	4c1d      	ldr	r4, [pc, #116]	; (8012f98 <Display_Main_Interface_Voltage+0xd4>)
 8012f24:	1979      	adds	r1, r7, r5
 8012f26:	1c48      	adds	r0, r1, #1
 8012f28:	0021      	movs	r1, r4
 8012f2a:	f002 fb05 	bl	8015538 <siprintf>
 8012f2e:	e017      	b.n	8012f60 <Display_Main_Interface_Voltage+0x9c>
	}
	else if(Voltage>=0)
 8012f30:	2100      	movs	r1, #0
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7ed faee 	bl	8000514 <__aeabi_fcmpge>
 8012f38:	1e03      	subs	r3, r0, #0
 8012f3a:	d011      	beq.n	8012f60 <Display_Main_Interface_Voltage+0x9c>
	{
		String_voltage_real[0]='0';
 8012f3c:	2508      	movs	r5, #8
 8012f3e:	197b      	adds	r3, r7, r5
 8012f40:	2230      	movs	r2, #48	; 0x30
 8012f42:	701a      	strb	r2, [r3, #0]
		String_voltage_real[1]='0';
 8012f44:	197b      	adds	r3, r7, r5
 8012f46:	2230      	movs	r2, #48	; 0x30
 8012f48:	705a      	strb	r2, [r3, #1]
		sprintf(&String_voltage_real[2], "%4.2f", Voltage);
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f7ef ffb0 	bl	8002eb0 <__aeabi_f2d>
 8012f50:	0002      	movs	r2, r0
 8012f52:	000b      	movs	r3, r1
 8012f54:	4c11      	ldr	r4, [pc, #68]	; (8012f9c <Display_Main_Interface_Voltage+0xd8>)
 8012f56:	1979      	adds	r1, r7, r5
 8012f58:	1c88      	adds	r0, r1, #2
 8012f5a:	0021      	movs	r1, r4
 8012f5c:	f002 faec 	bl	8015538 <siprintf>

	}


	Write_String_16x32AsicII(0, 0, String_voltage_real);
 8012f60:	2308      	movs	r3, #8
 8012f62:	18fb      	adds	r3, r7, r3
 8012f64:	001a      	movs	r2, r3
 8012f66:	2100      	movs	r1, #0
 8012f68:	2000      	movs	r0, #0
 8012f6a:	f7ff fecd 	bl	8012d08 <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0, 24, "V");
 8012f6e:	4b0c      	ldr	r3, [pc, #48]	; (8012fa0 <Display_Main_Interface_Voltage+0xdc>)
 8012f70:	001a      	movs	r2, r3
 8012f72:	2118      	movs	r1, #24
 8012f74:	2000      	movs	r0, #0
 8012f76:	f7ff fec7 	bl	8012d08 <Write_String_16x32AsicII>


}
 8012f7a:	46c0      	nop			; (mov r8, r8)
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	b004      	add	sp, #16
 8012f80:	bdb0      	pop	{r4, r5, r7, pc}
 8012f82:	46c0      	nop			; (mov r8, r8)
 8012f84:	08018788 	.word	0x08018788
 8012f88:	42c80000 	.word	0x42c80000
 8012f8c:	0801876c 	.word	0x0801876c
 8012f90:	47ae147b 	.word	0x47ae147b
 8012f94:	4023fae1 	.word	0x4023fae1
 8012f98:	08018774 	.word	0x08018774
 8012f9c:	0801877c 	.word	0x0801877c
 8012fa0:	08018784 	.word	0x08018784

08012fa4 <Display_Main_Interface_Current>:
  * @brief  将电流值显示出来
  * @param  电流值
  * @retval None
  */
void Display_Main_Interface_Current(float Current)
{
 8012fa4:	b5b0      	push	{r4, r5, r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
	char String_Current_real[7]={'0','0','0','.','0','0'};
 8012fac:	2408      	movs	r4, #8
 8012fae:	193b      	adds	r3, r7, r4
 8012fb0:	4a2c      	ldr	r2, [pc, #176]	; (8013064 <Display_Main_Interface_Current+0xc0>)
 8012fb2:	6811      	ldr	r1, [r2, #0]
 8012fb4:	6019      	str	r1, [r3, #0]
 8012fb6:	8891      	ldrh	r1, [r2, #4]
 8012fb8:	8099      	strh	r1, [r3, #4]
 8012fba:	7992      	ldrb	r2, [r2, #6]
 8012fbc:	719a      	strb	r2, [r3, #6]
	if(Current>=100)     	sprintf(String_Current_real, "%6.2f", Current);//将float转为string，数据长度为6，保留两位小数
 8012fbe:	492a      	ldr	r1, [pc, #168]	; (8013068 <Display_Main_Interface_Current+0xc4>)
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f7ed faa7 	bl	8000514 <__aeabi_fcmpge>
 8012fc6:	1e03      	subs	r3, r0, #0
 8012fc8:	d009      	beq.n	8012fde <Display_Main_Interface_Current+0x3a>
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f7ef ff70 	bl	8002eb0 <__aeabi_f2d>
 8012fd0:	0002      	movs	r2, r0
 8012fd2:	000b      	movs	r3, r1
 8012fd4:	4925      	ldr	r1, [pc, #148]	; (801306c <Display_Main_Interface_Current+0xc8>)
 8012fd6:	1938      	adds	r0, r7, r4
 8012fd8:	f002 faae 	bl	8015538 <siprintf>
 8012fdc:	e030      	b.n	8013040 <Display_Main_Interface_Current+0x9c>
	else if(Current>=9.99)
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f7ef ff66 	bl	8002eb0 <__aeabi_f2d>
 8012fe4:	4a22      	ldr	r2, [pc, #136]	; (8013070 <Display_Main_Interface_Current+0xcc>)
 8012fe6:	4b23      	ldr	r3, [pc, #140]	; (8013074 <Display_Main_Interface_Current+0xd0>)
 8012fe8:	f7ed fa5a 	bl	80004a0 <__aeabi_dcmpge>
 8012fec:	1e03      	subs	r3, r0, #0
 8012fee:	d00f      	beq.n	8013010 <Display_Main_Interface_Current+0x6c>
	{
		String_Current_real[0]='0';
 8012ff0:	2508      	movs	r5, #8
 8012ff2:	197b      	adds	r3, r7, r5
 8012ff4:	2230      	movs	r2, #48	; 0x30
 8012ff6:	701a      	strb	r2, [r3, #0]
		sprintf(&String_Current_real[1], "%5.2f", Current);
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f7ef ff59 	bl	8002eb0 <__aeabi_f2d>
 8012ffe:	0002      	movs	r2, r0
 8013000:	000b      	movs	r3, r1
 8013002:	4c1d      	ldr	r4, [pc, #116]	; (8013078 <Display_Main_Interface_Current+0xd4>)
 8013004:	1979      	adds	r1, r7, r5
 8013006:	1c48      	adds	r0, r1, #1
 8013008:	0021      	movs	r1, r4
 801300a:	f002 fa95 	bl	8015538 <siprintf>
 801300e:	e017      	b.n	8013040 <Display_Main_Interface_Current+0x9c>
	}
	else if(Current>=0)
 8013010:	2100      	movs	r1, #0
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f7ed fa7e 	bl	8000514 <__aeabi_fcmpge>
 8013018:	1e03      	subs	r3, r0, #0
 801301a:	d011      	beq.n	8013040 <Display_Main_Interface_Current+0x9c>
	{
		String_Current_real[0]='0';
 801301c:	2508      	movs	r5, #8
 801301e:	197b      	adds	r3, r7, r5
 8013020:	2230      	movs	r2, #48	; 0x30
 8013022:	701a      	strb	r2, [r3, #0]
		String_Current_real[1]='0';
 8013024:	197b      	adds	r3, r7, r5
 8013026:	2230      	movs	r2, #48	; 0x30
 8013028:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Current_real[2],"%4.2f", Current);
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f7ef ff40 	bl	8002eb0 <__aeabi_f2d>
 8013030:	0002      	movs	r2, r0
 8013032:	000b      	movs	r3, r1
 8013034:	4c11      	ldr	r4, [pc, #68]	; (801307c <Display_Main_Interface_Current+0xd8>)
 8013036:	1979      	adds	r1, r7, r5
 8013038:	1c88      	adds	r0, r1, #2
 801303a:	0021      	movs	r1, r4
 801303c:	f002 fa7c 	bl	8015538 <siprintf>
	}

	Write_String_16x32AsicII(0,36, String_Current_real);
 8013040:	2308      	movs	r3, #8
 8013042:	18fb      	adds	r3, r7, r3
 8013044:	001a      	movs	r2, r3
 8013046:	2124      	movs	r1, #36	; 0x24
 8013048:	2000      	movs	r0, #0
 801304a:	f7ff fe5d 	bl	8012d08 <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0,60, "A");
 801304e:	4b0c      	ldr	r3, [pc, #48]	; (8013080 <Display_Main_Interface_Current+0xdc>)
 8013050:	001a      	movs	r2, r3
 8013052:	213c      	movs	r1, #60	; 0x3c
 8013054:	2000      	movs	r0, #0
 8013056:	f7ff fe57 	bl	8012d08 <Write_String_16x32AsicII>

}
 801305a:	46c0      	nop			; (mov r8, r8)
 801305c:	46bd      	mov	sp, r7
 801305e:	b004      	add	sp, #16
 8013060:	bdb0      	pop	{r4, r5, r7, pc}
 8013062:	46c0      	nop			; (mov r8, r8)
 8013064:	08018788 	.word	0x08018788
 8013068:	42c80000 	.word	0x42c80000
 801306c:	0801876c 	.word	0x0801876c
 8013070:	47ae147b 	.word	0x47ae147b
 8013074:	4023fae1 	.word	0x4023fae1
 8013078:	08018774 	.word	0x08018774
 801307c:	0801877c 	.word	0x0801877c
 8013080:	08018790 	.word	0x08018790

08013084 <Display_Main_Interface_Power>:
 * @brief  显示功率
 * @param  Shift/not Shift
 * @retval None
 */
void Display_Main_Interface_Power(float Voltage,float Current)
{
 8013084:	b5b0      	push	{r4, r5, r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
	char String_Power_real[10]={'0','0','0','.','0','0'};
 801308e:	2408      	movs	r4, #8
 8013090:	1939      	adds	r1, r7, r4
 8013092:	4a49      	ldr	r2, [pc, #292]	; (80131b8 <Display_Main_Interface_Power+0x134>)
 8013094:	000b      	movs	r3, r1
 8013096:	6810      	ldr	r0, [r2, #0]
 8013098:	6018      	str	r0, [r3, #0]
 801309a:	8890      	ldrh	r0, [r2, #4]
 801309c:	8098      	strh	r0, [r3, #4]
 801309e:	7992      	ldrb	r2, [r2, #6]
 80130a0:	719a      	strb	r2, [r3, #6]
 80130a2:	2307      	movs	r3, #7
 80130a4:	18cb      	adds	r3, r1, r3
 80130a6:	2203      	movs	r2, #3
 80130a8:	2100      	movs	r1, #0
 80130aa:	0018      	movs	r0, r3
 80130ac:	f001 fcd9 	bl	8014a62 <memset>
	float Power=Voltage*Current;
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f7ed fdd4 	bl	8000c60 <__aeabi_fmul>
 80130b8:	1c03      	adds	r3, r0, #0
 80130ba:	617b      	str	r3, [r7, #20]


	if(Power>1000)
 80130bc:	493f      	ldr	r1, [pc, #252]	; (80131bc <Display_Main_Interface_Power+0x138>)
 80130be:	6978      	ldr	r0, [r7, #20]
 80130c0:	f7ed fa1e 	bl	8000500 <__aeabi_fcmpgt>
 80130c4:	1e03      	subs	r3, r0, #0
 80130c6:	d024      	beq.n	8013112 <Display_Main_Interface_Power+0x8e>
	{
		Power/=1000.0;
 80130c8:	493c      	ldr	r1, [pc, #240]	; (80131bc <Display_Main_Interface_Power+0x138>)
 80130ca:	6978      	ldr	r0, [r7, #20]
 80130cc:	f7ed fc00 	bl	80008d0 <__aeabi_fdiv>
 80130d0:	1c03      	adds	r3, r0, #0
 80130d2:	617b      	str	r3, [r7, #20]
		String_Power_real[0]='0';
 80130d4:	193b      	adds	r3, r7, r4
 80130d6:	2230      	movs	r2, #48	; 0x30
 80130d8:	701a      	strb	r2, [r3, #0]
		String_Power_real[1]='0';
 80130da:	0025      	movs	r5, r4
 80130dc:	193b      	adds	r3, r7, r4
 80130de:	2230      	movs	r2, #48	; 0x30
 80130e0:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Power_real[2], "%4.2f", Power);
 80130e2:	6978      	ldr	r0, [r7, #20]
 80130e4:	f7ef fee4 	bl	8002eb0 <__aeabi_f2d>
 80130e8:	0002      	movs	r2, r0
 80130ea:	000b      	movs	r3, r1
 80130ec:	4c34      	ldr	r4, [pc, #208]	; (80131c0 <Display_Main_Interface_Power+0x13c>)
 80130ee:	1979      	adds	r1, r7, r5
 80130f0:	1c88      	adds	r0, r1, #2
 80130f2:	0021      	movs	r1, r4
 80130f4:	f002 fa20 	bl	8015538 <siprintf>

		Write_String_16x32AsicII(32,0,String_Power_real);
 80130f8:	197b      	adds	r3, r7, r5
 80130fa:	001a      	movs	r2, r3
 80130fc:	2100      	movs	r1, #0
 80130fe:	2020      	movs	r0, #32
 8013100:	f7ff fe02 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(32,24,"KW");
 8013104:	4b2f      	ldr	r3, [pc, #188]	; (80131c4 <Display_Main_Interface_Power+0x140>)
 8013106:	001a      	movs	r2, r3
 8013108:	2118      	movs	r1, #24
 801310a:	2020      	movs	r0, #32
 801310c:	f7ff fdfc 	bl	8012d08 <Write_String_16x32AsicII>

		Write_String_12x24AsicII(40,0,String_Power_real);
		Write_Single_12x24AsicII(40,24,'W');
	}

}
 8013110:	e04d      	b.n	80131ae <Display_Main_Interface_Power+0x12a>
		if(Power>=100)     	sprintf(String_Power_real, "%6.2f", Power);//将float转为string，数据长度为6，保留两位小数
 8013112:	492d      	ldr	r1, [pc, #180]	; (80131c8 <Display_Main_Interface_Power+0x144>)
 8013114:	6978      	ldr	r0, [r7, #20]
 8013116:	f7ed f9fd 	bl	8000514 <__aeabi_fcmpge>
 801311a:	1e03      	subs	r3, r0, #0
 801311c:	d00a      	beq.n	8013134 <Display_Main_Interface_Power+0xb0>
 801311e:	6978      	ldr	r0, [r7, #20]
 8013120:	f7ef fec6 	bl	8002eb0 <__aeabi_f2d>
 8013124:	0002      	movs	r2, r0
 8013126:	000b      	movs	r3, r1
 8013128:	4928      	ldr	r1, [pc, #160]	; (80131cc <Display_Main_Interface_Power+0x148>)
 801312a:	2008      	movs	r0, #8
 801312c:	1838      	adds	r0, r7, r0
 801312e:	f002 fa03 	bl	8015538 <siprintf>
 8013132:	e030      	b.n	8013196 <Display_Main_Interface_Power+0x112>
		else if(Power>=9.99)
 8013134:	6978      	ldr	r0, [r7, #20]
 8013136:	f7ef febb 	bl	8002eb0 <__aeabi_f2d>
 801313a:	4a25      	ldr	r2, [pc, #148]	; (80131d0 <Display_Main_Interface_Power+0x14c>)
 801313c:	4b25      	ldr	r3, [pc, #148]	; (80131d4 <Display_Main_Interface_Power+0x150>)
 801313e:	f7ed f9af 	bl	80004a0 <__aeabi_dcmpge>
 8013142:	1e03      	subs	r3, r0, #0
 8013144:	d00f      	beq.n	8013166 <Display_Main_Interface_Power+0xe2>
			String_Power_real[0]=' ';
 8013146:	2508      	movs	r5, #8
 8013148:	197b      	adds	r3, r7, r5
 801314a:	2220      	movs	r2, #32
 801314c:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Power_real[1], "%5.2f", Power);
 801314e:	6978      	ldr	r0, [r7, #20]
 8013150:	f7ef feae 	bl	8002eb0 <__aeabi_f2d>
 8013154:	0002      	movs	r2, r0
 8013156:	000b      	movs	r3, r1
 8013158:	4c1f      	ldr	r4, [pc, #124]	; (80131d8 <Display_Main_Interface_Power+0x154>)
 801315a:	1979      	adds	r1, r7, r5
 801315c:	1c48      	adds	r0, r1, #1
 801315e:	0021      	movs	r1, r4
 8013160:	f002 f9ea 	bl	8015538 <siprintf>
 8013164:	e017      	b.n	8013196 <Display_Main_Interface_Power+0x112>
		else if(Power>=0)
 8013166:	2100      	movs	r1, #0
 8013168:	6978      	ldr	r0, [r7, #20]
 801316a:	f7ed f9d3 	bl	8000514 <__aeabi_fcmpge>
 801316e:	1e03      	subs	r3, r0, #0
 8013170:	d011      	beq.n	8013196 <Display_Main_Interface_Power+0x112>
			String_Power_real[0]=' ';
 8013172:	2508      	movs	r5, #8
 8013174:	197b      	adds	r3, r7, r5
 8013176:	2220      	movs	r2, #32
 8013178:	701a      	strb	r2, [r3, #0]
			String_Power_real[1]=' ';
 801317a:	197b      	adds	r3, r7, r5
 801317c:	2220      	movs	r2, #32
 801317e:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Power_real[2],"%4.2f", Power);
 8013180:	6978      	ldr	r0, [r7, #20]
 8013182:	f7ef fe95 	bl	8002eb0 <__aeabi_f2d>
 8013186:	0002      	movs	r2, r0
 8013188:	000b      	movs	r3, r1
 801318a:	4c0d      	ldr	r4, [pc, #52]	; (80131c0 <Display_Main_Interface_Power+0x13c>)
 801318c:	1979      	adds	r1, r7, r5
 801318e:	1c88      	adds	r0, r1, #2
 8013190:	0021      	movs	r1, r4
 8013192:	f002 f9d1 	bl	8015538 <siprintf>
		Write_String_12x24AsicII(40,0,String_Power_real);
 8013196:	2308      	movs	r3, #8
 8013198:	18fb      	adds	r3, r7, r3
 801319a:	001a      	movs	r2, r3
 801319c:	2100      	movs	r1, #0
 801319e:	2028      	movs	r0, #40	; 0x28
 80131a0:	f7ff fe50 	bl	8012e44 <Write_String_12x24AsicII>
		Write_Single_12x24AsicII(40,24,'W');
 80131a4:	2257      	movs	r2, #87	; 0x57
 80131a6:	2118      	movs	r1, #24
 80131a8:	2028      	movs	r0, #40	; 0x28
 80131aa:	f7ff fdeb 	bl	8012d84 <Write_Single_12x24AsicII>
}
 80131ae:	46c0      	nop			; (mov r8, r8)
 80131b0:	46bd      	mov	sp, r7
 80131b2:	b006      	add	sp, #24
 80131b4:	bdb0      	pop	{r4, r5, r7, pc}
 80131b6:	46c0      	nop			; (mov r8, r8)
 80131b8:	08018798 	.word	0x08018798
 80131bc:	447a0000 	.word	0x447a0000
 80131c0:	0801877c 	.word	0x0801877c
 80131c4:	08018794 	.word	0x08018794
 80131c8:	42c80000 	.word	0x42c80000
 80131cc:	0801876c 	.word	0x0801876c
 80131d0:	47ae147b 	.word	0x47ae147b
 80131d4:	4023fae1 	.word	0x4023fae1
 80131d8:	08018774 	.word	0x08018774

080131dc <Display_Main_Interface_Lock>:
 * @brief  显示键盘锁定状态
 * @param  显示ON，不显示OFF
 * @retval None
 */
static void Display_Main_Interface_Lock(uint8_t State)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	0002      	movs	r2, r0
 80131e4:	1dfb      	adds	r3, r7, #7
 80131e6:	701a      	strb	r2, [r3, #0]
	if(State==UNLOCK) Write_String_8x16AsicII(32,36, "      ");
 80131e8:	1dfb      	adds	r3, r7, #7
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d106      	bne.n	80131fe <Display_Main_Interface_Lock+0x22>
 80131f0:	4b08      	ldr	r3, [pc, #32]	; (8013214 <Display_Main_Interface_Lock+0x38>)
 80131f2:	001a      	movs	r2, r3
 80131f4:	2124      	movs	r1, #36	; 0x24
 80131f6:	2020      	movs	r0, #32
 80131f8:	f7ff fd04 	bl	8012c04 <Write_String_8x16AsicII>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");

}
 80131fc:	e005      	b.n	801320a <Display_Main_Interface_Lock+0x2e>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");
 80131fe:	4b06      	ldr	r3, [pc, #24]	; (8013218 <Display_Main_Interface_Lock+0x3c>)
 8013200:	001a      	movs	r2, r3
 8013202:	2124      	movs	r1, #36	; 0x24
 8013204:	2020      	movs	r0, #32
 8013206:	f7ff fcfd 	bl	8012c04 <Write_String_8x16AsicII>
}
 801320a:	46c0      	nop			; (mov r8, r8)
 801320c:	46bd      	mov	sp, r7
 801320e:	b002      	add	sp, #8
 8013210:	bd80      	pop	{r7, pc}
 8013212:	46c0      	nop			; (mov r8, r8)
 8013214:	080187a4 	.word	0x080187a4
 8013218:	080187ac 	.word	0x080187ac

0801321c <Display_Main_Interface_CV_CC_CP>:
 * @brief  显示处于CV/CC/CP状态
 * @param  CV/CC/CP
 * @retval None
 */
void Display_Main_Interface_CV_CC_CP(uint8_t CV_CC_CP)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	0002      	movs	r2, r0
 8013224:	1dfb      	adds	r3, r7, #7
 8013226:	701a      	strb	r2, [r3, #0]
	uint8_t State;

	State = CV_CC_CP;
 8013228:	210f      	movs	r1, #15
 801322a:	187b      	adds	r3, r7, r1
 801322c:	1dfa      	adds	r2, r7, #7
 801322e:	7812      	ldrb	r2, [r2, #0]
 8013230:	701a      	strb	r2, [r3, #0]
	switch(State)
 8013232:	187b      	adds	r3, r7, r1
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2b01      	cmp	r3, #1
 8013238:	d002      	beq.n	8013240 <Display_Main_Interface_CV_CC_CP+0x24>
 801323a:	2b02      	cmp	r3, #2
 801323c:	d007      	beq.n	801324e <Display_Main_Interface_CV_CC_CP+0x32>
 801323e:	e00d      	b.n	801325c <Display_Main_Interface_CV_CC_CP+0x40>
	{
		case CV:
			Write_String_8x16AsicII(48, 36, "CV");break;
 8013240:	4b0c      	ldr	r3, [pc, #48]	; (8013274 <Display_Main_Interface_CV_CC_CP+0x58>)
 8013242:	001a      	movs	r2, r3
 8013244:	2124      	movs	r1, #36	; 0x24
 8013246:	2030      	movs	r0, #48	; 0x30
 8013248:	f7ff fcdc 	bl	8012c04 <Write_String_8x16AsicII>
 801324c:	e00d      	b.n	801326a <Display_Main_Interface_CV_CC_CP+0x4e>
		case CC:
			Write_String_8x16AsicII(48, 36, "CC");break;
 801324e:	4b0a      	ldr	r3, [pc, #40]	; (8013278 <Display_Main_Interface_CV_CC_CP+0x5c>)
 8013250:	001a      	movs	r2, r3
 8013252:	2124      	movs	r1, #36	; 0x24
 8013254:	2030      	movs	r0, #48	; 0x30
 8013256:	f7ff fcd5 	bl	8012c04 <Write_String_8x16AsicII>
 801325a:	e006      	b.n	801326a <Display_Main_Interface_CV_CC_CP+0x4e>
		default:
			{
				Write_String_8x16AsicII(48, 36, "  ");
 801325c:	4b07      	ldr	r3, [pc, #28]	; (801327c <Display_Main_Interface_CV_CC_CP+0x60>)
 801325e:	001a      	movs	r2, r3
 8013260:	2124      	movs	r1, #36	; 0x24
 8013262:	2030      	movs	r0, #48	; 0x30
 8013264:	f7ff fcce 	bl	8012c04 <Write_String_8x16AsicII>
				break;
 8013268:	46c0      	nop			; (mov r8, r8)
			}
	}
}
 801326a:	46c0      	nop			; (mov r8, r8)
 801326c:	46bd      	mov	sp, r7
 801326e:	b004      	add	sp, #16
 8013270:	bd80      	pop	{r7, pc}
 8013272:	46c0      	nop			; (mov r8, r8)
 8013274:	080187b4 	.word	0x080187b4
 8013278:	080187b8 	.word	0x080187b8
 801327c:	080187bc 	.word	0x080187bc

08013280 <Display_Main_Interface_ON_OFF>:
 * @brief  显示处于ON/OFF状态
 * @param  ON/OFF
 * @retval None
 */
void Display_Main_Interface_ON_OFF(uint8_t State)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	0002      	movs	r2, r0
 8013288:	1dfb      	adds	r3, r7, #7
 801328a:	701a      	strb	r2, [r3, #0]
	if(State==OUTPUT)
 801328c:	1dfb      	adds	r3, r7, #7
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	2b01      	cmp	r3, #1
 8013292:	d106      	bne.n	80132a2 <Display_Main_Interface_ON_OFF+0x22>
	{
		Write_String_8x16AsicII(48, 58, "ON ");
 8013294:	4b08      	ldr	r3, [pc, #32]	; (80132b8 <Display_Main_Interface_ON_OFF+0x38>)
 8013296:	001a      	movs	r2, r3
 8013298:	213a      	movs	r1, #58	; 0x3a
 801329a:	2030      	movs	r0, #48	; 0x30
 801329c:	f7ff fcb2 	bl	8012c04 <Write_String_8x16AsicII>
	}
	else
	{
		Write_String_8x16AsicII(48, 58, "OFF");
	}
}
 80132a0:	e005      	b.n	80132ae <Display_Main_Interface_ON_OFF+0x2e>
		Write_String_8x16AsicII(48, 58, "OFF");
 80132a2:	4b06      	ldr	r3, [pc, #24]	; (80132bc <Display_Main_Interface_ON_OFF+0x3c>)
 80132a4:	001a      	movs	r2, r3
 80132a6:	213a      	movs	r1, #58	; 0x3a
 80132a8:	2030      	movs	r0, #48	; 0x30
 80132aa:	f7ff fcab 	bl	8012c04 <Write_String_8x16AsicII>
}
 80132ae:	46c0      	nop			; (mov r8, r8)
 80132b0:	46bd      	mov	sp, r7
 80132b2:	b002      	add	sp, #8
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	46c0      	nop			; (mov r8, r8)
 80132b8:	080187c0 	.word	0x080187c0
 80132bc:	080187c4 	.word	0x080187c4

080132c0 <Display_Main_Interface_Shift>:
 * @brief  显示处于Shift/not Shift状态
 * @param  Shift/not Shift
 * @retval None
 */
static void Display_Main_Interface_Shift(uint8_t State)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	0002      	movs	r2, r0
 80132c8:	1dfb      	adds	r3, r7, #7
 80132ca:	701a      	strb	r2, [r3, #0]
	switch(State)
 80132cc:	1dfb      	adds	r3, r7, #7
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d008      	beq.n	80132e6 <Display_Main_Interface_Shift+0x26>
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d10d      	bne.n	80132f4 <Display_Main_Interface_Shift+0x34>
	{
		case Shift: Write_String_8x16AsicII(48,44, "Shift"); break;
 80132d8:	4b09      	ldr	r3, [pc, #36]	; (8013300 <Display_Main_Interface_Shift+0x40>)
 80132da:	001a      	movs	r2, r3
 80132dc:	212c      	movs	r1, #44	; 0x2c
 80132de:	2030      	movs	r0, #48	; 0x30
 80132e0:	f7ff fc90 	bl	8012c04 <Write_String_8x16AsicII>
 80132e4:	e007      	b.n	80132f6 <Display_Main_Interface_Shift+0x36>
		case Not_Shift: Write_String_8x16AsicII(48, 44, "     "); break;
 80132e6:	4b07      	ldr	r3, [pc, #28]	; (8013304 <Display_Main_Interface_Shift+0x44>)
 80132e8:	001a      	movs	r2, r3
 80132ea:	212c      	movs	r1, #44	; 0x2c
 80132ec:	2030      	movs	r0, #48	; 0x30
 80132ee:	f7ff fc89 	bl	8012c04 <Write_String_8x16AsicII>
 80132f2:	e000      	b.n	80132f6 <Display_Main_Interface_Shift+0x36>
		default: break;
 80132f4:	46c0      	nop			; (mov r8, r8)
	}
}
 80132f6:	46c0      	nop			; (mov r8, r8)
 80132f8:	46bd      	mov	sp, r7
 80132fa:	b002      	add	sp, #8
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	46c0      	nop			; (mov r8, r8)
 8013300:	080187c8 	.word	0x080187c8
 8013304:	080187d0 	.word	0x080187d0

08013308 <Display_Main_Interface_V_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_V_set  (void)

{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 801330e:	4b90      	ldr	r3, [pc, #576]	; (8013550 <Display_Main_Interface_V_set+0x248>)
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	2b01      	cmp	r3, #1
 8013314:	d000      	beq.n	8013318 <Display_Main_Interface_V_set+0x10>
 8013316:	e0a9      	b.n	801346c <Display_Main_Interface_V_set+0x164>
	{
		Write_String_8x16AsicII(48,56,"VSET");
 8013318:	4b8e      	ldr	r3, [pc, #568]	; (8013554 <Display_Main_Interface_V_set+0x24c>)
 801331a:	001a      	movs	r2, r3
 801331c:	2138      	movs	r1, #56	; 0x38
 801331e:	2030      	movs	r0, #48	; 0x30
 8013320:	f7ff fc70 	bl	8012c04 <Write_String_8x16AsicII>


		/*显示上一电流设定值*/
		float Current=Set_Current/100.0;
 8013324:	4b8c      	ldr	r3, [pc, #560]	; (8013558 <Display_Main_Interface_V_set+0x250>)
 8013326:	881b      	ldrh	r3, [r3, #0]
 8013328:	0018      	movs	r0, r3
 801332a:	f7ef fd6b 	bl	8002e04 <__aeabi_i2d>
 801332e:	2200      	movs	r2, #0
 8013330:	4b8a      	ldr	r3, [pc, #552]	; (801355c <Display_Main_Interface_V_set+0x254>)
 8013332:	f7ee fb13 	bl	800195c <__aeabi_ddiv>
 8013336:	0002      	movs	r2, r0
 8013338:	000b      	movs	r3, r1
 801333a:	0010      	movs	r0, r2
 801333c:	0019      	movs	r1, r3
 801333e:	f7ef fdff 	bl	8002f40 <__aeabi_d2f>
 8013342:	1c03      	adds	r3, r0, #0
 8013344:	60bb      	str	r3, [r7, #8]
		static char String_Current_real[7]={'0','0','0','.','0','0'};
		if(Current>=100)   		sprintf(String_Current_real, "%6.2f", Current);//将float转为string，保留一位小数
 8013346:	4986      	ldr	r1, [pc, #536]	; (8013560 <Display_Main_Interface_V_set+0x258>)
 8013348:	68b8      	ldr	r0, [r7, #8]
 801334a:	f7ed f8e3 	bl	8000514 <__aeabi_fcmpge>
 801334e:	1e03      	subs	r3, r0, #0
 8013350:	d009      	beq.n	8013366 <Display_Main_Interface_V_set+0x5e>
 8013352:	68b8      	ldr	r0, [r7, #8]
 8013354:	f7ef fdac 	bl	8002eb0 <__aeabi_f2d>
 8013358:	0002      	movs	r2, r0
 801335a:	000b      	movs	r3, r1
 801335c:	4981      	ldr	r1, [pc, #516]	; (8013564 <Display_Main_Interface_V_set+0x25c>)
 801335e:	4882      	ldr	r0, [pc, #520]	; (8013568 <Display_Main_Interface_V_set+0x260>)
 8013360:	f002 f8ea 	bl	8015538 <siprintf>
 8013364:	e02a      	b.n	80133bc <Display_Main_Interface_V_set+0xb4>
		else if(Current>=9.99)
 8013366:	68b8      	ldr	r0, [r7, #8]
 8013368:	f7ef fda2 	bl	8002eb0 <__aeabi_f2d>
 801336c:	4a7f      	ldr	r2, [pc, #508]	; (801356c <Display_Main_Interface_V_set+0x264>)
 801336e:	4b80      	ldr	r3, [pc, #512]	; (8013570 <Display_Main_Interface_V_set+0x268>)
 8013370:	f7ed f896 	bl	80004a0 <__aeabi_dcmpge>
 8013374:	1e03      	subs	r3, r0, #0
 8013376:	d00c      	beq.n	8013392 <Display_Main_Interface_V_set+0x8a>
		{
			String_Current_real[0]='0';
 8013378:	4b7b      	ldr	r3, [pc, #492]	; (8013568 <Display_Main_Interface_V_set+0x260>)
 801337a:	2230      	movs	r2, #48	; 0x30
 801337c:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current_real[1], "%5.2f", Current);//保留两位小数
 801337e:	68b8      	ldr	r0, [r7, #8]
 8013380:	f7ef fd96 	bl	8002eb0 <__aeabi_f2d>
 8013384:	0002      	movs	r2, r0
 8013386:	000b      	movs	r3, r1
 8013388:	497a      	ldr	r1, [pc, #488]	; (8013574 <Display_Main_Interface_V_set+0x26c>)
 801338a:	487b      	ldr	r0, [pc, #492]	; (8013578 <Display_Main_Interface_V_set+0x270>)
 801338c:	f002 f8d4 	bl	8015538 <siprintf>
 8013390:	e014      	b.n	80133bc <Display_Main_Interface_V_set+0xb4>
		}
		else if(Current>=0)
 8013392:	2100      	movs	r1, #0
 8013394:	68b8      	ldr	r0, [r7, #8]
 8013396:	f7ed f8bd 	bl	8000514 <__aeabi_fcmpge>
 801339a:	1e03      	subs	r3, r0, #0
 801339c:	d00e      	beq.n	80133bc <Display_Main_Interface_V_set+0xb4>
		{
			String_Current_real[0]='0';
 801339e:	4b72      	ldr	r3, [pc, #456]	; (8013568 <Display_Main_Interface_V_set+0x260>)
 80133a0:	2230      	movs	r2, #48	; 0x30
 80133a2:	701a      	strb	r2, [r3, #0]
			String_Current_real[1]='0';
 80133a4:	4b70      	ldr	r3, [pc, #448]	; (8013568 <Display_Main_Interface_V_set+0x260>)
 80133a6:	2230      	movs	r2, #48	; 0x30
 80133a8:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current_real[2], "%4.2f", Current);
 80133aa:	68b8      	ldr	r0, [r7, #8]
 80133ac:	f7ef fd80 	bl	8002eb0 <__aeabi_f2d>
 80133b0:	0002      	movs	r2, r0
 80133b2:	000b      	movs	r3, r1
 80133b4:	4971      	ldr	r1, [pc, #452]	; (801357c <Display_Main_Interface_V_set+0x274>)
 80133b6:	4872      	ldr	r0, [pc, #456]	; (8013580 <Display_Main_Interface_V_set+0x278>)
 80133b8:	f002 f8be 	bl	8015538 <siprintf>

		}
		Write_String_16x32AsicII(16,36,String_Current_real);
 80133bc:	4b6a      	ldr	r3, [pc, #424]	; (8013568 <Display_Main_Interface_V_set+0x260>)
 80133be:	001a      	movs	r2, r3
 80133c0:	2124      	movs	r1, #36	; 0x24
 80133c2:	2010      	movs	r0, #16
 80133c4:	f7ff fca0 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 80133c8:	2241      	movs	r2, #65	; 0x41
 80133ca:	213c      	movs	r1, #60	; 0x3c
 80133cc:	2010      	movs	r0, #16
 80133ce:	f7ff fc57 	bl	8012c80 <Write_Single_16x32AsicII>
		/*显示上电压设定值*/
		float Voltage=String_to_float(String_Voltage);//实时设定值
 80133d2:	4b6c      	ldr	r3, [pc, #432]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 80133d4:	0018      	movs	r0, r3
 80133d6:	f7fb f877 	bl	800e4c8 <String_to_float>
 80133da:	1c03      	adds	r3, r0, #0
 80133dc:	607b      	str	r3, [r7, #4]
		if(Voltage>=100)   		sprintf(String_Voltage, "%6.2f", Voltage);//将float转为string，保留一位小数
 80133de:	4960      	ldr	r1, [pc, #384]	; (8013560 <Display_Main_Interface_V_set+0x258>)
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7ed f897 	bl	8000514 <__aeabi_fcmpge>
 80133e6:	1e03      	subs	r3, r0, #0
 80133e8:	d009      	beq.n	80133fe <Display_Main_Interface_V_set+0xf6>
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f7ef fd60 	bl	8002eb0 <__aeabi_f2d>
 80133f0:	0002      	movs	r2, r0
 80133f2:	000b      	movs	r3, r1
 80133f4:	495b      	ldr	r1, [pc, #364]	; (8013564 <Display_Main_Interface_V_set+0x25c>)
 80133f6:	4863      	ldr	r0, [pc, #396]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 80133f8:	f002 f89e 	bl	8015538 <siprintf>
 80133fc:	e02a      	b.n	8013454 <Display_Main_Interface_V_set+0x14c>
		else if(Voltage>=9.99)
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f7ef fd56 	bl	8002eb0 <__aeabi_f2d>
 8013404:	4a59      	ldr	r2, [pc, #356]	; (801356c <Display_Main_Interface_V_set+0x264>)
 8013406:	4b5a      	ldr	r3, [pc, #360]	; (8013570 <Display_Main_Interface_V_set+0x268>)
 8013408:	f7ed f84a 	bl	80004a0 <__aeabi_dcmpge>
 801340c:	1e03      	subs	r3, r0, #0
 801340e:	d00c      	beq.n	801342a <Display_Main_Interface_V_set+0x122>
		{
			String_Voltage[0]='0';
 8013410:	4b5c      	ldr	r3, [pc, #368]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 8013412:	2230      	movs	r2, #48	; 0x30
 8013414:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage[1], "%5.2f", Voltage);//保留两位小数
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f7ef fd4a 	bl	8002eb0 <__aeabi_f2d>
 801341c:	0002      	movs	r2, r0
 801341e:	000b      	movs	r3, r1
 8013420:	4954      	ldr	r1, [pc, #336]	; (8013574 <Display_Main_Interface_V_set+0x26c>)
 8013422:	4859      	ldr	r0, [pc, #356]	; (8013588 <Display_Main_Interface_V_set+0x280>)
 8013424:	f002 f888 	bl	8015538 <siprintf>
 8013428:	e014      	b.n	8013454 <Display_Main_Interface_V_set+0x14c>
		}
		else if(Voltage>=0)
 801342a:	2100      	movs	r1, #0
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7ed f871 	bl	8000514 <__aeabi_fcmpge>
 8013432:	1e03      	subs	r3, r0, #0
 8013434:	d00e      	beq.n	8013454 <Display_Main_Interface_V_set+0x14c>
		{
			String_Voltage[0]='0';
 8013436:	4b53      	ldr	r3, [pc, #332]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 8013438:	2230      	movs	r2, #48	; 0x30
 801343a:	701a      	strb	r2, [r3, #0]
			String_Voltage[1]='0';
 801343c:	4b51      	ldr	r3, [pc, #324]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 801343e:	2230      	movs	r2, #48	; 0x30
 8013440:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage[2], "%4.2f", Voltage);
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f7ef fd34 	bl	8002eb0 <__aeabi_f2d>
 8013448:	0002      	movs	r2, r0
 801344a:	000b      	movs	r3, r1
 801344c:	494b      	ldr	r1, [pc, #300]	; (801357c <Display_Main_Interface_V_set+0x274>)
 801344e:	484f      	ldr	r0, [pc, #316]	; (801358c <Display_Main_Interface_V_set+0x284>)
 8013450:	f002 f872 	bl	8015538 <siprintf>

		}

		Write_String_16x32AsicII(16, 0, String_Voltage);
 8013454:	4b4b      	ldr	r3, [pc, #300]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 8013456:	001a      	movs	r2, r3
 8013458:	2100      	movs	r1, #0
 801345a:	2010      	movs	r0, #16
 801345c:	f7ff fc54 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 8013460:	2256      	movs	r2, #86	; 0x56
 8013462:	2118      	movs	r1, #24
 8013464:	2010      	movs	r0, #16
 8013466:	f7ff fc0b 	bl	8012c80 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16, 0, String_Voltage);
	}



}
 801346a:	e06c      	b.n	8013546 <Display_Main_Interface_V_set+0x23e>
	else if(Keys_Encoder_Mode==Keys_Mode)
 801346c:	4b38      	ldr	r3, [pc, #224]	; (8013550 <Display_Main_Interface_V_set+0x248>)
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d168      	bne.n	8013546 <Display_Main_Interface_V_set+0x23e>
		Write_String_8x16AsicII(48,56,"VSET");
 8013474:	4b37      	ldr	r3, [pc, #220]	; (8013554 <Display_Main_Interface_V_set+0x24c>)
 8013476:	001a      	movs	r2, r3
 8013478:	2138      	movs	r1, #56	; 0x38
 801347a:	2030      	movs	r0, #48	; 0x30
 801347c:	f7ff fbc2 	bl	8012c04 <Write_String_8x16AsicII>
		Write_String_16x32AsicII(16,0,String_Voltage);
 8013480:	4b40      	ldr	r3, [pc, #256]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 8013482:	001a      	movs	r2, r3
 8013484:	2100      	movs	r1, #0
 8013486:	2010      	movs	r0, #16
 8013488:	f7ff fc3e 	bl	8012d08 <Write_String_16x32AsicII>
		float Current=Set_Current/100.0;
 801348c:	4b32      	ldr	r3, [pc, #200]	; (8013558 <Display_Main_Interface_V_set+0x250>)
 801348e:	881b      	ldrh	r3, [r3, #0]
 8013490:	0018      	movs	r0, r3
 8013492:	f7ef fcb7 	bl	8002e04 <__aeabi_i2d>
 8013496:	2200      	movs	r2, #0
 8013498:	4b30      	ldr	r3, [pc, #192]	; (801355c <Display_Main_Interface_V_set+0x254>)
 801349a:	f7ee fa5f 	bl	800195c <__aeabi_ddiv>
 801349e:	0002      	movs	r2, r0
 80134a0:	000b      	movs	r3, r1
 80134a2:	0010      	movs	r0, r2
 80134a4:	0019      	movs	r1, r3
 80134a6:	f7ef fd4b 	bl	8002f40 <__aeabi_d2f>
 80134aa:	1c03      	adds	r3, r0, #0
 80134ac:	60fb      	str	r3, [r7, #12]
		if(Current>=100)   		sprintf(String_Current_real, "%6.2f", Current);//将float转为string，保留一位小数
 80134ae:	492c      	ldr	r1, [pc, #176]	; (8013560 <Display_Main_Interface_V_set+0x258>)
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f7ed f82f 	bl	8000514 <__aeabi_fcmpge>
 80134b6:	1e03      	subs	r3, r0, #0
 80134b8:	d009      	beq.n	80134ce <Display_Main_Interface_V_set+0x1c6>
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f7ef fcf8 	bl	8002eb0 <__aeabi_f2d>
 80134c0:	0002      	movs	r2, r0
 80134c2:	000b      	movs	r3, r1
 80134c4:	4927      	ldr	r1, [pc, #156]	; (8013564 <Display_Main_Interface_V_set+0x25c>)
 80134c6:	4832      	ldr	r0, [pc, #200]	; (8013590 <Display_Main_Interface_V_set+0x288>)
 80134c8:	f002 f836 	bl	8015538 <siprintf>
 80134cc:	e02a      	b.n	8013524 <Display_Main_Interface_V_set+0x21c>
		else if(Current>=9.99)
 80134ce:	68f8      	ldr	r0, [r7, #12]
 80134d0:	f7ef fcee 	bl	8002eb0 <__aeabi_f2d>
 80134d4:	4a25      	ldr	r2, [pc, #148]	; (801356c <Display_Main_Interface_V_set+0x264>)
 80134d6:	4b26      	ldr	r3, [pc, #152]	; (8013570 <Display_Main_Interface_V_set+0x268>)
 80134d8:	f7ec ffe2 	bl	80004a0 <__aeabi_dcmpge>
 80134dc:	1e03      	subs	r3, r0, #0
 80134de:	d00c      	beq.n	80134fa <Display_Main_Interface_V_set+0x1f2>
			String_Current_real[0]='0';
 80134e0:	4b2b      	ldr	r3, [pc, #172]	; (8013590 <Display_Main_Interface_V_set+0x288>)
 80134e2:	2230      	movs	r2, #48	; 0x30
 80134e4:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current_real[1], "%5.2f", Current);//保留两位小数
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	f7ef fce2 	bl	8002eb0 <__aeabi_f2d>
 80134ec:	0002      	movs	r2, r0
 80134ee:	000b      	movs	r3, r1
 80134f0:	4920      	ldr	r1, [pc, #128]	; (8013574 <Display_Main_Interface_V_set+0x26c>)
 80134f2:	4828      	ldr	r0, [pc, #160]	; (8013594 <Display_Main_Interface_V_set+0x28c>)
 80134f4:	f002 f820 	bl	8015538 <siprintf>
 80134f8:	e014      	b.n	8013524 <Display_Main_Interface_V_set+0x21c>
		else if(Current>=0)
 80134fa:	2100      	movs	r1, #0
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f7ed f809 	bl	8000514 <__aeabi_fcmpge>
 8013502:	1e03      	subs	r3, r0, #0
 8013504:	d00e      	beq.n	8013524 <Display_Main_Interface_V_set+0x21c>
			String_Current_real[0]='0';
 8013506:	4b22      	ldr	r3, [pc, #136]	; (8013590 <Display_Main_Interface_V_set+0x288>)
 8013508:	2230      	movs	r2, #48	; 0x30
 801350a:	701a      	strb	r2, [r3, #0]
			String_Current_real[1]='0';
 801350c:	4b20      	ldr	r3, [pc, #128]	; (8013590 <Display_Main_Interface_V_set+0x288>)
 801350e:	2230      	movs	r2, #48	; 0x30
 8013510:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current_real[2], "%4.2f", Current);
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ef fccc 	bl	8002eb0 <__aeabi_f2d>
 8013518:	0002      	movs	r2, r0
 801351a:	000b      	movs	r3, r1
 801351c:	4917      	ldr	r1, [pc, #92]	; (801357c <Display_Main_Interface_V_set+0x274>)
 801351e:	481e      	ldr	r0, [pc, #120]	; (8013598 <Display_Main_Interface_V_set+0x290>)
 8013520:	f002 f80a 	bl	8015538 <siprintf>
		Write_String_16x32AsicII(16,36,String_Current_real);
 8013524:	4b1a      	ldr	r3, [pc, #104]	; (8013590 <Display_Main_Interface_V_set+0x288>)
 8013526:	001a      	movs	r2, r3
 8013528:	2124      	movs	r1, #36	; 0x24
 801352a:	2010      	movs	r0, #16
 801352c:	f7ff fbec 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013530:	2241      	movs	r2, #65	; 0x41
 8013532:	213c      	movs	r1, #60	; 0x3c
 8013534:	2010      	movs	r0, #16
 8013536:	f7ff fba3 	bl	8012c80 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16, 0, String_Voltage);
 801353a:	4b12      	ldr	r3, [pc, #72]	; (8013584 <Display_Main_Interface_V_set+0x27c>)
 801353c:	001a      	movs	r2, r3
 801353e:	2100      	movs	r1, #0
 8013540:	2010      	movs	r0, #16
 8013542:	f7ff fbe1 	bl	8012d08 <Write_String_16x32AsicII>
}
 8013546:	46c0      	nop			; (mov r8, r8)
 8013548:	46bd      	mov	sp, r7
 801354a:	b004      	add	sp, #16
 801354c:	bd80      	pop	{r7, pc}
 801354e:	46c0      	nop			; (mov r8, r8)
 8013550:	20002fd2 	.word	0x20002fd2
 8013554:	08018808 	.word	0x08018808
 8013558:	20002fda 	.word	0x20002fda
 801355c:	40590000 	.word	0x40590000
 8013560:	42c80000 	.word	0x42c80000
 8013564:	0801876c 	.word	0x0801876c
 8013568:	200030b4 	.word	0x200030b4
 801356c:	47ae147b 	.word	0x47ae147b
 8013570:	4023fae1 	.word	0x4023fae1
 8013574:	08018774 	.word	0x08018774
 8013578:	200030b5 	.word	0x200030b5
 801357c:	0801877c 	.word	0x0801877c
 8013580:	200030b6 	.word	0x200030b6
 8013584:	20003058 	.word	0x20003058
 8013588:	20003059 	.word	0x20003059
 801358c:	2000305a 	.word	0x2000305a
 8013590:	200030bc 	.word	0x200030bc
 8013594:	200030bd 	.word	0x200030bd
 8013598:	200030be 	.word	0x200030be

0801359c <Display_Main_Interface_I_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_I_set  (void)

{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 80135a2:	4b8d      	ldr	r3, [pc, #564]	; (80137d8 <Display_Main_Interface_I_set+0x23c>)
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d000      	beq.n	80135ac <Display_Main_Interface_I_set+0x10>
 80135aa:	e0a9      	b.n	8013700 <Display_Main_Interface_I_set+0x164>
	{
		Write_String_8x16AsicII(48,56,"ISET");
 80135ac:	4b8b      	ldr	r3, [pc, #556]	; (80137dc <Display_Main_Interface_I_set+0x240>)
 80135ae:	001a      	movs	r2, r3
 80135b0:	2138      	movs	r1, #56	; 0x38
 80135b2:	2030      	movs	r0, #48	; 0x30
 80135b4:	f7ff fb26 	bl	8012c04 <Write_String_8x16AsicII>

		/*编码器模式下显示电压设定值*/
		float Voltage=Set_Voltage/100.0;
 80135b8:	4b89      	ldr	r3, [pc, #548]	; (80137e0 <Display_Main_Interface_I_set+0x244>)
 80135ba:	881b      	ldrh	r3, [r3, #0]
 80135bc:	0018      	movs	r0, r3
 80135be:	f7ef fc21 	bl	8002e04 <__aeabi_i2d>
 80135c2:	2200      	movs	r2, #0
 80135c4:	4b87      	ldr	r3, [pc, #540]	; (80137e4 <Display_Main_Interface_I_set+0x248>)
 80135c6:	f7ee f9c9 	bl	800195c <__aeabi_ddiv>
 80135ca:	0002      	movs	r2, r0
 80135cc:	000b      	movs	r3, r1
 80135ce:	0010      	movs	r0, r2
 80135d0:	0019      	movs	r1, r3
 80135d2:	f7ef fcb5 	bl	8002f40 <__aeabi_d2f>
 80135d6:	1c03      	adds	r3, r0, #0
 80135d8:	60bb      	str	r3, [r7, #8]
		static char String_Voltage_real[7]={'0','0','0','.','0','0'};
		if(Voltage>=100)   		sprintf(String_Voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 80135da:	4983      	ldr	r1, [pc, #524]	; (80137e8 <Display_Main_Interface_I_set+0x24c>)
 80135dc:	68b8      	ldr	r0, [r7, #8]
 80135de:	f7ec ff99 	bl	8000514 <__aeabi_fcmpge>
 80135e2:	1e03      	subs	r3, r0, #0
 80135e4:	d009      	beq.n	80135fa <Display_Main_Interface_I_set+0x5e>
 80135e6:	68b8      	ldr	r0, [r7, #8]
 80135e8:	f7ef fc62 	bl	8002eb0 <__aeabi_f2d>
 80135ec:	0002      	movs	r2, r0
 80135ee:	000b      	movs	r3, r1
 80135f0:	497e      	ldr	r1, [pc, #504]	; (80137ec <Display_Main_Interface_I_set+0x250>)
 80135f2:	487f      	ldr	r0, [pc, #508]	; (80137f0 <Display_Main_Interface_I_set+0x254>)
 80135f4:	f001 ffa0 	bl	8015538 <siprintf>
 80135f8:	e02a      	b.n	8013650 <Display_Main_Interface_I_set+0xb4>
		else if(Voltage>=9.99)
 80135fa:	68b8      	ldr	r0, [r7, #8]
 80135fc:	f7ef fc58 	bl	8002eb0 <__aeabi_f2d>
 8013600:	4a7c      	ldr	r2, [pc, #496]	; (80137f4 <Display_Main_Interface_I_set+0x258>)
 8013602:	4b7d      	ldr	r3, [pc, #500]	; (80137f8 <Display_Main_Interface_I_set+0x25c>)
 8013604:	f7ec ff4c 	bl	80004a0 <__aeabi_dcmpge>
 8013608:	1e03      	subs	r3, r0, #0
 801360a:	d00c      	beq.n	8013626 <Display_Main_Interface_I_set+0x8a>
		{
			String_Voltage_real[0]='0';
 801360c:	4b78      	ldr	r3, [pc, #480]	; (80137f0 <Display_Main_Interface_I_set+0x254>)
 801360e:	2230      	movs	r2, #48	; 0x30
 8013610:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage_real[1], "%5.2f", Voltage);//保留两位小数
 8013612:	68b8      	ldr	r0, [r7, #8]
 8013614:	f7ef fc4c 	bl	8002eb0 <__aeabi_f2d>
 8013618:	0002      	movs	r2, r0
 801361a:	000b      	movs	r3, r1
 801361c:	4977      	ldr	r1, [pc, #476]	; (80137fc <Display_Main_Interface_I_set+0x260>)
 801361e:	4878      	ldr	r0, [pc, #480]	; (8013800 <Display_Main_Interface_I_set+0x264>)
 8013620:	f001 ff8a 	bl	8015538 <siprintf>
 8013624:	e014      	b.n	8013650 <Display_Main_Interface_I_set+0xb4>
		}
		else if(Voltage>=0)
 8013626:	2100      	movs	r1, #0
 8013628:	68b8      	ldr	r0, [r7, #8]
 801362a:	f7ec ff73 	bl	8000514 <__aeabi_fcmpge>
 801362e:	1e03      	subs	r3, r0, #0
 8013630:	d00e      	beq.n	8013650 <Display_Main_Interface_I_set+0xb4>
		{
			String_Voltage_real[0]='0';
 8013632:	4b6f      	ldr	r3, [pc, #444]	; (80137f0 <Display_Main_Interface_I_set+0x254>)
 8013634:	2230      	movs	r2, #48	; 0x30
 8013636:	701a      	strb	r2, [r3, #0]
			String_Voltage_real[1]='0';
 8013638:	4b6d      	ldr	r3, [pc, #436]	; (80137f0 <Display_Main_Interface_I_set+0x254>)
 801363a:	2230      	movs	r2, #48	; 0x30
 801363c:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage_real[2], "%4.2f", Voltage);
 801363e:	68b8      	ldr	r0, [r7, #8]
 8013640:	f7ef fc36 	bl	8002eb0 <__aeabi_f2d>
 8013644:	0002      	movs	r2, r0
 8013646:	000b      	movs	r3, r1
 8013648:	496e      	ldr	r1, [pc, #440]	; (8013804 <Display_Main_Interface_I_set+0x268>)
 801364a:	486f      	ldr	r0, [pc, #444]	; (8013808 <Display_Main_Interface_I_set+0x26c>)
 801364c:	f001 ff74 	bl	8015538 <siprintf>

		}

		Write_String_16x32AsicII(16, 0, String_Voltage_real);
 8013650:	4b67      	ldr	r3, [pc, #412]	; (80137f0 <Display_Main_Interface_I_set+0x254>)
 8013652:	001a      	movs	r2, r3
 8013654:	2100      	movs	r1, #0
 8013656:	2010      	movs	r0, #16
 8013658:	f7ff fb56 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 801365c:	2256      	movs	r2, #86	; 0x56
 801365e:	2118      	movs	r1, #24
 8013660:	2010      	movs	r0, #16
 8013662:	f7ff fb0d 	bl	8012c80 <Write_Single_16x32AsicII>

		/*编码器模式下显示电流设定值*/
		float Current=String_to_float(String_Current);
 8013666:	4b69      	ldr	r3, [pc, #420]	; (801380c <Display_Main_Interface_I_set+0x270>)
 8013668:	0018      	movs	r0, r3
 801366a:	f7fa ff2d 	bl	800e4c8 <String_to_float>
 801366e:	1c03      	adds	r3, r0, #0
 8013670:	607b      	str	r3, [r7, #4]
		if(Current>=100)   		sprintf(String_Current, "%6.2f", Current);//将float转为string，保留一位小数
 8013672:	495d      	ldr	r1, [pc, #372]	; (80137e8 <Display_Main_Interface_I_set+0x24c>)
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f7ec ff4d 	bl	8000514 <__aeabi_fcmpge>
 801367a:	1e03      	subs	r3, r0, #0
 801367c:	d009      	beq.n	8013692 <Display_Main_Interface_I_set+0xf6>
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f7ef fc16 	bl	8002eb0 <__aeabi_f2d>
 8013684:	0002      	movs	r2, r0
 8013686:	000b      	movs	r3, r1
 8013688:	4958      	ldr	r1, [pc, #352]	; (80137ec <Display_Main_Interface_I_set+0x250>)
 801368a:	4860      	ldr	r0, [pc, #384]	; (801380c <Display_Main_Interface_I_set+0x270>)
 801368c:	f001 ff54 	bl	8015538 <siprintf>
 8013690:	e02a      	b.n	80136e8 <Display_Main_Interface_I_set+0x14c>
		else if(Current>=9.99)
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f7ef fc0c 	bl	8002eb0 <__aeabi_f2d>
 8013698:	4a56      	ldr	r2, [pc, #344]	; (80137f4 <Display_Main_Interface_I_set+0x258>)
 801369a:	4b57      	ldr	r3, [pc, #348]	; (80137f8 <Display_Main_Interface_I_set+0x25c>)
 801369c:	f7ec ff00 	bl	80004a0 <__aeabi_dcmpge>
 80136a0:	1e03      	subs	r3, r0, #0
 80136a2:	d00c      	beq.n	80136be <Display_Main_Interface_I_set+0x122>
		{
			String_Current[0]='0';
 80136a4:	4b59      	ldr	r3, [pc, #356]	; (801380c <Display_Main_Interface_I_set+0x270>)
 80136a6:	2230      	movs	r2, #48	; 0x30
 80136a8:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current[1], "%5.2f", Current);//保留两位小数
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f7ef fc00 	bl	8002eb0 <__aeabi_f2d>
 80136b0:	0002      	movs	r2, r0
 80136b2:	000b      	movs	r3, r1
 80136b4:	4951      	ldr	r1, [pc, #324]	; (80137fc <Display_Main_Interface_I_set+0x260>)
 80136b6:	4856      	ldr	r0, [pc, #344]	; (8013810 <Display_Main_Interface_I_set+0x274>)
 80136b8:	f001 ff3e 	bl	8015538 <siprintf>
 80136bc:	e014      	b.n	80136e8 <Display_Main_Interface_I_set+0x14c>
		}
		else if(Current>=0)
 80136be:	2100      	movs	r1, #0
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f7ec ff27 	bl	8000514 <__aeabi_fcmpge>
 80136c6:	1e03      	subs	r3, r0, #0
 80136c8:	d00e      	beq.n	80136e8 <Display_Main_Interface_I_set+0x14c>
		{
			String_Current[0]='0';
 80136ca:	4b50      	ldr	r3, [pc, #320]	; (801380c <Display_Main_Interface_I_set+0x270>)
 80136cc:	2230      	movs	r2, #48	; 0x30
 80136ce:	701a      	strb	r2, [r3, #0]
			String_Current[1]='0';
 80136d0:	4b4e      	ldr	r3, [pc, #312]	; (801380c <Display_Main_Interface_I_set+0x270>)
 80136d2:	2230      	movs	r2, #48	; 0x30
 80136d4:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current[2], "%4.2f", Current);
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7ef fbea 	bl	8002eb0 <__aeabi_f2d>
 80136dc:	0002      	movs	r2, r0
 80136de:	000b      	movs	r3, r1
 80136e0:	4948      	ldr	r1, [pc, #288]	; (8013804 <Display_Main_Interface_I_set+0x268>)
 80136e2:	484c      	ldr	r0, [pc, #304]	; (8013814 <Display_Main_Interface_I_set+0x278>)
 80136e4:	f001 ff28 	bl	8015538 <siprintf>

		}
		Write_String_16x32AsicII(16,36,String_Current);
 80136e8:	4b48      	ldr	r3, [pc, #288]	; (801380c <Display_Main_Interface_I_set+0x270>)
 80136ea:	001a      	movs	r2, r3
 80136ec:	2124      	movs	r1, #36	; 0x24
 80136ee:	2010      	movs	r0, #16
 80136f0:	f7ff fb0a 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 80136f4:	2241      	movs	r2, #65	; 0x41
 80136f6:	213c      	movs	r1, #60	; 0x3c
 80136f8:	2010      	movs	r0, #16
 80136fa:	f7ff fac1 	bl	8012c80 <Write_Single_16x32AsicII>
		/*按键模式下显示当前电流设定值*/
		Write_String_16x32AsicII(16,36,String_Current);
	}


}
 80136fe:	e066      	b.n	80137ce <Display_Main_Interface_I_set+0x232>
	else if(Keys_Encoder_Mode==Keys_Mode)
 8013700:	4b35      	ldr	r3, [pc, #212]	; (80137d8 <Display_Main_Interface_I_set+0x23c>)
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d162      	bne.n	80137ce <Display_Main_Interface_I_set+0x232>
		Write_String_8x16AsicII(48,56,"ISET");
 8013708:	4b34      	ldr	r3, [pc, #208]	; (80137dc <Display_Main_Interface_I_set+0x240>)
 801370a:	001a      	movs	r2, r3
 801370c:	2138      	movs	r1, #56	; 0x38
 801370e:	2030      	movs	r0, #48	; 0x30
 8013710:	f7ff fa78 	bl	8012c04 <Write_String_8x16AsicII>
		float Voltage=Set_Voltage/100.0;
 8013714:	4b32      	ldr	r3, [pc, #200]	; (80137e0 <Display_Main_Interface_I_set+0x244>)
 8013716:	881b      	ldrh	r3, [r3, #0]
 8013718:	0018      	movs	r0, r3
 801371a:	f7ef fb73 	bl	8002e04 <__aeabi_i2d>
 801371e:	2200      	movs	r2, #0
 8013720:	4b30      	ldr	r3, [pc, #192]	; (80137e4 <Display_Main_Interface_I_set+0x248>)
 8013722:	f7ee f91b 	bl	800195c <__aeabi_ddiv>
 8013726:	0002      	movs	r2, r0
 8013728:	000b      	movs	r3, r1
 801372a:	0010      	movs	r0, r2
 801372c:	0019      	movs	r1, r3
 801372e:	f7ef fc07 	bl	8002f40 <__aeabi_d2f>
 8013732:	1c03      	adds	r3, r0, #0
 8013734:	60fb      	str	r3, [r7, #12]
		if(Voltage>=100)   		sprintf(String_Voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 8013736:	492c      	ldr	r1, [pc, #176]	; (80137e8 <Display_Main_Interface_I_set+0x24c>)
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	f7ec feeb 	bl	8000514 <__aeabi_fcmpge>
 801373e:	1e03      	subs	r3, r0, #0
 8013740:	d009      	beq.n	8013756 <Display_Main_Interface_I_set+0x1ba>
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	f7ef fbb4 	bl	8002eb0 <__aeabi_f2d>
 8013748:	0002      	movs	r2, r0
 801374a:	000b      	movs	r3, r1
 801374c:	4927      	ldr	r1, [pc, #156]	; (80137ec <Display_Main_Interface_I_set+0x250>)
 801374e:	4832      	ldr	r0, [pc, #200]	; (8013818 <Display_Main_Interface_I_set+0x27c>)
 8013750:	f001 fef2 	bl	8015538 <siprintf>
 8013754:	e02a      	b.n	80137ac <Display_Main_Interface_I_set+0x210>
		else if(Voltage>=9.99)
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f7ef fbaa 	bl	8002eb0 <__aeabi_f2d>
 801375c:	4a25      	ldr	r2, [pc, #148]	; (80137f4 <Display_Main_Interface_I_set+0x258>)
 801375e:	4b26      	ldr	r3, [pc, #152]	; (80137f8 <Display_Main_Interface_I_set+0x25c>)
 8013760:	f7ec fe9e 	bl	80004a0 <__aeabi_dcmpge>
 8013764:	1e03      	subs	r3, r0, #0
 8013766:	d00c      	beq.n	8013782 <Display_Main_Interface_I_set+0x1e6>
			String_Voltage_real[0]='0';
 8013768:	4b2b      	ldr	r3, [pc, #172]	; (8013818 <Display_Main_Interface_I_set+0x27c>)
 801376a:	2230      	movs	r2, #48	; 0x30
 801376c:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage_real[1], "%5.2f", Voltage);//保留两位小数
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	f7ef fb9e 	bl	8002eb0 <__aeabi_f2d>
 8013774:	0002      	movs	r2, r0
 8013776:	000b      	movs	r3, r1
 8013778:	4920      	ldr	r1, [pc, #128]	; (80137fc <Display_Main_Interface_I_set+0x260>)
 801377a:	4828      	ldr	r0, [pc, #160]	; (801381c <Display_Main_Interface_I_set+0x280>)
 801377c:	f001 fedc 	bl	8015538 <siprintf>
 8013780:	e014      	b.n	80137ac <Display_Main_Interface_I_set+0x210>
		else if(Voltage>=0)
 8013782:	2100      	movs	r1, #0
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f7ec fec5 	bl	8000514 <__aeabi_fcmpge>
 801378a:	1e03      	subs	r3, r0, #0
 801378c:	d00e      	beq.n	80137ac <Display_Main_Interface_I_set+0x210>
			String_Voltage_real[0]='0';
 801378e:	4b22      	ldr	r3, [pc, #136]	; (8013818 <Display_Main_Interface_I_set+0x27c>)
 8013790:	2230      	movs	r2, #48	; 0x30
 8013792:	701a      	strb	r2, [r3, #0]
			String_Voltage_real[1]='0';
 8013794:	4b20      	ldr	r3, [pc, #128]	; (8013818 <Display_Main_Interface_I_set+0x27c>)
 8013796:	2230      	movs	r2, #48	; 0x30
 8013798:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage_real[2], "%4.2f", Voltage);
 801379a:	68f8      	ldr	r0, [r7, #12]
 801379c:	f7ef fb88 	bl	8002eb0 <__aeabi_f2d>
 80137a0:	0002      	movs	r2, r0
 80137a2:	000b      	movs	r3, r1
 80137a4:	4917      	ldr	r1, [pc, #92]	; (8013804 <Display_Main_Interface_I_set+0x268>)
 80137a6:	481e      	ldr	r0, [pc, #120]	; (8013820 <Display_Main_Interface_I_set+0x284>)
 80137a8:	f001 fec6 	bl	8015538 <siprintf>
		Write_String_16x32AsicII(16, 0, String_Voltage_real);
 80137ac:	4b1a      	ldr	r3, [pc, #104]	; (8013818 <Display_Main_Interface_I_set+0x27c>)
 80137ae:	001a      	movs	r2, r3
 80137b0:	2100      	movs	r1, #0
 80137b2:	2010      	movs	r0, #16
 80137b4:	f7ff faa8 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 80137b8:	2256      	movs	r2, #86	; 0x56
 80137ba:	2118      	movs	r1, #24
 80137bc:	2010      	movs	r0, #16
 80137be:	f7ff fa5f 	bl	8012c80 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16,36,String_Current);
 80137c2:	4b12      	ldr	r3, [pc, #72]	; (801380c <Display_Main_Interface_I_set+0x270>)
 80137c4:	001a      	movs	r2, r3
 80137c6:	2124      	movs	r1, #36	; 0x24
 80137c8:	2010      	movs	r0, #16
 80137ca:	f7ff fa9d 	bl	8012d08 <Write_String_16x32AsicII>
}
 80137ce:	46c0      	nop			; (mov r8, r8)
 80137d0:	46bd      	mov	sp, r7
 80137d2:	b004      	add	sp, #16
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	46c0      	nop			; (mov r8, r8)
 80137d8:	20002fd2 	.word	0x20002fd2
 80137dc:	08018810 	.word	0x08018810
 80137e0:	20002fd8 	.word	0x20002fd8
 80137e4:	40590000 	.word	0x40590000
 80137e8:	42c80000 	.word	0x42c80000
 80137ec:	0801876c 	.word	0x0801876c
 80137f0:	200030c4 	.word	0x200030c4
 80137f4:	47ae147b 	.word	0x47ae147b
 80137f8:	4023fae1 	.word	0x4023fae1
 80137fc:	08018774 	.word	0x08018774
 8013800:	200030c5 	.word	0x200030c5
 8013804:	0801877c 	.word	0x0801877c
 8013808:	200030c6 	.word	0x200030c6
 801380c:	20003060 	.word	0x20003060
 8013810:	20003061 	.word	0x20003061
 8013814:	20003062 	.word	0x20003062
 8013818:	200030cc 	.word	0x200030cc
 801381c:	200030cd 	.word	0x200030cd
 8013820:	200030ce 	.word	0x200030ce

08013824 <Display_Main_Interface>:
	                        const uint8_t CV_CC_CP,
							const uint8_t Preset_Actual,
							const uint8_t LOCK_UNLOCK,
							const uint8_t Shift_NotShift)

{
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	60b9      	str	r1, [r7, #8]
 801382e:	0019      	movs	r1, r3
 8013830:	1dfb      	adds	r3, r7, #7
 8013832:	701a      	strb	r2, [r3, #0]
 8013834:	1dbb      	adds	r3, r7, #6
 8013836:	1c0a      	adds	r2, r1, #0
 8013838:	701a      	strb	r2, [r3, #0]


		//Current_Actual=Current_real;
		Display_Main_Interface_Voltage(Voltage_Actual);
 801383a:	4b16      	ldr	r3, [pc, #88]	; (8013894 <Display_Main_Interface+0x70>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	1c18      	adds	r0, r3, #0
 8013840:	f7ff fb40 	bl	8012ec4 <Display_Main_Interface_Voltage>
		Display_Main_Interface_Current(Current_Actual);
 8013844:	4b14      	ldr	r3, [pc, #80]	; (8013898 <Display_Main_Interface+0x74>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	1c18      	adds	r0, r3, #0
 801384a:	f7ff fbab 	bl	8012fa4 <Display_Main_Interface_Current>
		Display_Main_Interface_Power(Voltage_Actual,Current_Actual);
 801384e:	4b11      	ldr	r3, [pc, #68]	; (8013894 <Display_Main_Interface+0x70>)
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	4b11      	ldr	r3, [pc, #68]	; (8013898 <Display_Main_Interface+0x74>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	1c19      	adds	r1, r3, #0
 8013858:	1c10      	adds	r0, r2, #0
 801385a:	f7ff fc13 	bl	8013084 <Display_Main_Interface_Power>
		Display_Main_Interface_Lock(LOCK_UNLOCK);
 801385e:	231c      	movs	r3, #28
 8013860:	18fb      	adds	r3, r7, r3
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	0018      	movs	r0, r3
 8013866:	f7ff fcb9 	bl	80131dc <Display_Main_Interface_Lock>

		Display_Main_Interface_CV_CC_CP(CV_CC_CP);
 801386a:	1dbb      	adds	r3, r7, #6
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	0018      	movs	r0, r3
 8013870:	f7ff fcd4 	bl	801321c <Display_Main_Interface_CV_CC_CP>
		//Display_Main_Interface_CYCLE_DELAY(CYCLE_NOT_CYCLE, DELAY_NOT_DELAY);
		Display_Main_Interface_ON_OFF(OUTPUT_NOT_OUTPUT);
 8013874:	4b09      	ldr	r3, [pc, #36]	; (801389c <Display_Main_Interface+0x78>)
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	0018      	movs	r0, r3
 801387a:	f7ff fd01 	bl	8013280 <Display_Main_Interface_ON_OFF>
		Display_Main_Interface_Shift(Shift_NotShift);
 801387e:	2320      	movs	r3, #32
 8013880:	18fb      	adds	r3, r7, r3
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	0018      	movs	r0, r3
 8013886:	f7ff fd1b 	bl	80132c0 <Display_Main_Interface_Shift>
		//Display_Vertical_Line_1(44,0,63);

//		Voltage_index++;

}
 801388a:	46c0      	nop			; (mov r8, r8)
 801388c:	46bd      	mov	sp, r7
 801388e:	b004      	add	sp, #16
 8013890:	bd80      	pop	{r7, pc}
 8013892:	46c0      	nop			; (mov r8, r8)
 8013894:	20003b30 	.word	0x20003b30
 8013898:	20003b34 	.word	0x20003b34
 801389c:	20003b1d 	.word	0x20003b1d

080138a0 <Display_Param_Interface>:

void Display_Param_Interface(const uint16_t Set_Voltage,const uint16_t Set_Current)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	0002      	movs	r2, r0
 80138a8:	1dbb      	adds	r3, r7, #6
 80138aa:	801a      	strh	r2, [r3, #0]
 80138ac:	1d3b      	adds	r3, r7, #4
 80138ae:	1c0a      	adds	r2, r1, #0
 80138b0:	801a      	strh	r2, [r3, #0]


	float Voltage,Current;
	Voltage=Set_Voltage/100.0;
 80138b2:	1dbb      	adds	r3, r7, #6
 80138b4:	881b      	ldrh	r3, [r3, #0]
 80138b6:	0018      	movs	r0, r3
 80138b8:	f7ef faa4 	bl	8002e04 <__aeabi_i2d>
 80138bc:	2200      	movs	r2, #0
 80138be:	4b17      	ldr	r3, [pc, #92]	; (801391c <Display_Param_Interface+0x7c>)
 80138c0:	f7ee f84c 	bl	800195c <__aeabi_ddiv>
 80138c4:	0002      	movs	r2, r0
 80138c6:	000b      	movs	r3, r1
 80138c8:	0010      	movs	r0, r2
 80138ca:	0019      	movs	r1, r3
 80138cc:	f7ef fb38 	bl	8002f40 <__aeabi_d2f>
 80138d0:	1c03      	adds	r3, r0, #0
 80138d2:	60fb      	str	r3, [r7, #12]
	Current=Set_Current/100.0;
 80138d4:	1d3b      	adds	r3, r7, #4
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	0018      	movs	r0, r3
 80138da:	f7ef fa93 	bl	8002e04 <__aeabi_i2d>
 80138de:	2200      	movs	r2, #0
 80138e0:	4b0e      	ldr	r3, [pc, #56]	; (801391c <Display_Param_Interface+0x7c>)
 80138e2:	f7ee f83b 	bl	800195c <__aeabi_ddiv>
 80138e6:	0002      	movs	r2, r0
 80138e8:	000b      	movs	r3, r1
 80138ea:	0010      	movs	r0, r2
 80138ec:	0019      	movs	r1, r3
 80138ee:	f7ef fb27 	bl	8002f40 <__aeabi_d2f>
 80138f2:	1c03      	adds	r3, r0, #0
 80138f4:	60bb      	str	r3, [r7, #8]
	Display_Main_Interface_Voltage(Voltage);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	1c18      	adds	r0, r3, #0
 80138fa:	f7ff fae3 	bl	8012ec4 <Display_Main_Interface_Voltage>
	Display_Main_Interface_Current(Current);
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	1c18      	adds	r0, r3, #0
 8013902:	f7ff fb4f 	bl	8012fa4 <Display_Main_Interface_Current>
	Display_Main_Interface_Power(Voltage,Current);
 8013906:	68ba      	ldr	r2, [r7, #8]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	1c11      	adds	r1, r2, #0
 801390c:	1c18      	adds	r0, r3, #0
 801390e:	f7ff fbb9 	bl	8013084 <Display_Main_Interface_Power>
}
 8013912:	46c0      	nop			; (mov r8, r8)
 8013914:	46bd      	mov	sp, r7
 8013916:	b004      	add	sp, #16
 8013918:	bd80      	pop	{r7, pc}
 801391a:	46c0      	nop			; (mov r8, r8)
 801391c:	40590000 	.word	0x40590000

08013920 <Display_Access_Interface_Voltage>:
 * @brief  显示存取界面电压值
 * @param  设定的电压值，范围0到99.99V
 * @retval None
 */
static void Display_Access_Interface_Voltage(float Voltage)
{
 8013920:	b5b0      	push	{r4, r5, r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]

	char string_voltage[7]={0};
 8013928:	2408      	movs	r4, #8
 801392a:	193b      	adds	r3, r7, r4
 801392c:	2200      	movs	r2, #0
 801392e:	601a      	str	r2, [r3, #0]
 8013930:	3304      	adds	r3, #4
 8013932:	2203      	movs	r2, #3
 8013934:	2100      	movs	r1, #0
 8013936:	0018      	movs	r0, r3
 8013938:	f001 f893 	bl	8014a62 <memset>
	if(Voltage>=100)      sprintf(string_voltage, "%6.2f", Voltage);
 801393c:	4931      	ldr	r1, [pc, #196]	; (8013a04 <Display_Access_Interface_Voltage+0xe4>)
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f7ec fde8 	bl	8000514 <__aeabi_fcmpge>
 8013944:	1e03      	subs	r3, r0, #0
 8013946:	d009      	beq.n	801395c <Display_Access_Interface_Voltage+0x3c>
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f7ef fab1 	bl	8002eb0 <__aeabi_f2d>
 801394e:	0002      	movs	r2, r0
 8013950:	000b      	movs	r3, r1
 8013952:	492d      	ldr	r1, [pc, #180]	; (8013a08 <Display_Access_Interface_Voltage+0xe8>)
 8013954:	1938      	adds	r0, r7, r4
 8013956:	f001 fdef 	bl	8015538 <siprintf>
 801395a:	e02d      	b.n	80139b8 <Display_Access_Interface_Voltage+0x98>
	else if(Voltage>=10)
 801395c:	492b      	ldr	r1, [pc, #172]	; (8013a0c <Display_Access_Interface_Voltage+0xec>)
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f7ec fdd8 	bl	8000514 <__aeabi_fcmpge>
 8013964:	1e03      	subs	r3, r0, #0
 8013966:	d00f      	beq.n	8013988 <Display_Access_Interface_Voltage+0x68>
	{
		string_voltage[0]='0';
 8013968:	2508      	movs	r5, #8
 801396a:	197b      	adds	r3, r7, r5
 801396c:	2230      	movs	r2, #48	; 0x30
 801396e:	701a      	strb	r2, [r3, #0]
		sprintf(&string_voltage[1], "%5.2f", Voltage);
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f7ef fa9d 	bl	8002eb0 <__aeabi_f2d>
 8013976:	0002      	movs	r2, r0
 8013978:	000b      	movs	r3, r1
 801397a:	4c25      	ldr	r4, [pc, #148]	; (8013a10 <Display_Access_Interface_Voltage+0xf0>)
 801397c:	1979      	adds	r1, r7, r5
 801397e:	1c48      	adds	r0, r1, #1
 8013980:	0021      	movs	r1, r4
 8013982:	f001 fdd9 	bl	8015538 <siprintf>
 8013986:	e017      	b.n	80139b8 <Display_Access_Interface_Voltage+0x98>

	}
	else if(Voltage>=0)
 8013988:	2100      	movs	r1, #0
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7ec fdc2 	bl	8000514 <__aeabi_fcmpge>
 8013990:	1e03      	subs	r3, r0, #0
 8013992:	d011      	beq.n	80139b8 <Display_Access_Interface_Voltage+0x98>
	{
		string_voltage[0]='0';
 8013994:	2508      	movs	r5, #8
 8013996:	197b      	adds	r3, r7, r5
 8013998:	2230      	movs	r2, #48	; 0x30
 801399a:	701a      	strb	r2, [r3, #0]
		string_voltage[1]='0';
 801399c:	197b      	adds	r3, r7, r5
 801399e:	2230      	movs	r2, #48	; 0x30
 80139a0:	705a      	strb	r2, [r3, #1]
		sprintf(&string_voltage[2], "%4.2f", Voltage);
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f7ef fa84 	bl	8002eb0 <__aeabi_f2d>
 80139a8:	0002      	movs	r2, r0
 80139aa:	000b      	movs	r3, r1
 80139ac:	4c19      	ldr	r4, [pc, #100]	; (8013a14 <Display_Access_Interface_Voltage+0xf4>)
 80139ae:	1979      	adds	r1, r7, r5
 80139b0:	1c88      	adds	r0, r1, #2
 80139b2:	0021      	movs	r1, r4
 80139b4:	f001 fdc0 	bl	8015538 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 80139b8:	4b17      	ldr	r3, [pc, #92]	; (8013a18 <Display_Access_Interface_Voltage+0xf8>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b03      	cmp	r3, #3
 80139be:	d110      	bne.n	80139e2 <Display_Access_Interface_Voltage+0xc2>
 80139c0:	4b15      	ldr	r3, [pc, #84]	; (8013a18 <Display_Access_Interface_Voltage+0xf8>)
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	2b02      	cmp	r3, #2
 80139c6:	d10c      	bne.n	80139e2 <Display_Access_Interface_Voltage+0xc2>
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 80139c8:	2308      	movs	r3, #8
 80139ca:	18fb      	adds	r3, r7, r3
 80139cc:	001a      	movs	r2, r3
 80139ce:	2100      	movs	r1, #0
 80139d0:	2010      	movs	r0, #16
 80139d2:	f7ff f999 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 80139d6:	2256      	movs	r2, #86	; 0x56
 80139d8:	2118      	movs	r1, #24
 80139da:	2010      	movs	r0, #16
 80139dc:	f7ff f950 	bl	8012c80 <Write_Single_16x32AsicII>
 80139e0:	e00c      	b.n	80139fc <Display_Access_Interface_Voltage+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 80139e2:	2308      	movs	r3, #8
 80139e4:	18fb      	adds	r3, r7, r3
 80139e6:	001a      	movs	r2, r3
 80139e8:	2100      	movs	r1, #0
 80139ea:	2010      	movs	r0, #16
 80139ec:	f7ff f98c 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 80139f0:	2256      	movs	r2, #86	; 0x56
 80139f2:	2118      	movs	r1, #24
 80139f4:	2010      	movs	r0, #16
 80139f6:	f7ff f943 	bl	8012c80 <Write_Single_16x32AsicII>
	}


}
 80139fa:	46c0      	nop			; (mov r8, r8)
 80139fc:	46c0      	nop			; (mov r8, r8)
 80139fe:	46bd      	mov	sp, r7
 8013a00:	b004      	add	sp, #16
 8013a02:	bdb0      	pop	{r4, r5, r7, pc}
 8013a04:	42c80000 	.word	0x42c80000
 8013a08:	0801876c 	.word	0x0801876c
 8013a0c:	41200000 	.word	0x41200000
 8013a10:	08018774 	.word	0x08018774
 8013a14:	0801877c 	.word	0x0801877c
 8013a18:	20003b8c 	.word	0x20003b8c

08013a1c <Display_Access_Interface_Current>:
 * @brief  显示存取界面电流值
 * @param  设定的电流值，范围0到999.99A
 * @retval None
 */
static void Display_Access_Interface_Current(float Current)
{
 8013a1c:	b5b0      	push	{r4, r5, r7, lr}
 8013a1e:	b084      	sub	sp, #16
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
	char string_current[7]={0};
 8013a24:	2408      	movs	r4, #8
 8013a26:	193b      	adds	r3, r7, r4
 8013a28:	2200      	movs	r2, #0
 8013a2a:	601a      	str	r2, [r3, #0]
 8013a2c:	3304      	adds	r3, #4
 8013a2e:	2203      	movs	r2, #3
 8013a30:	2100      	movs	r1, #0
 8013a32:	0018      	movs	r0, r3
 8013a34:	f001 f815 	bl	8014a62 <memset>
	if(Current>=100)      sprintf(string_current, "%6.2f", Current);
 8013a38:	4931      	ldr	r1, [pc, #196]	; (8013b00 <Display_Access_Interface_Current+0xe4>)
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f7ec fd6a 	bl	8000514 <__aeabi_fcmpge>
 8013a40:	1e03      	subs	r3, r0, #0
 8013a42:	d009      	beq.n	8013a58 <Display_Access_Interface_Current+0x3c>
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f7ef fa33 	bl	8002eb0 <__aeabi_f2d>
 8013a4a:	0002      	movs	r2, r0
 8013a4c:	000b      	movs	r3, r1
 8013a4e:	492d      	ldr	r1, [pc, #180]	; (8013b04 <Display_Access_Interface_Current+0xe8>)
 8013a50:	1938      	adds	r0, r7, r4
 8013a52:	f001 fd71 	bl	8015538 <siprintf>
 8013a56:	e02d      	b.n	8013ab4 <Display_Access_Interface_Current+0x98>
	else if(Current>=10)
 8013a58:	492b      	ldr	r1, [pc, #172]	; (8013b08 <Display_Access_Interface_Current+0xec>)
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7ec fd5a 	bl	8000514 <__aeabi_fcmpge>
 8013a60:	1e03      	subs	r3, r0, #0
 8013a62:	d00f      	beq.n	8013a84 <Display_Access_Interface_Current+0x68>
	{
		string_current[0]='0';
 8013a64:	2508      	movs	r5, #8
 8013a66:	197b      	adds	r3, r7, r5
 8013a68:	2230      	movs	r2, #48	; 0x30
 8013a6a:	701a      	strb	r2, [r3, #0]
		sprintf(&string_current[1], "%5.2f", Current);
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f7ef fa1f 	bl	8002eb0 <__aeabi_f2d>
 8013a72:	0002      	movs	r2, r0
 8013a74:	000b      	movs	r3, r1
 8013a76:	4c25      	ldr	r4, [pc, #148]	; (8013b0c <Display_Access_Interface_Current+0xf0>)
 8013a78:	1979      	adds	r1, r7, r5
 8013a7a:	1c48      	adds	r0, r1, #1
 8013a7c:	0021      	movs	r1, r4
 8013a7e:	f001 fd5b 	bl	8015538 <siprintf>
 8013a82:	e017      	b.n	8013ab4 <Display_Access_Interface_Current+0x98>

	}
	else if(Current>=0)
 8013a84:	2100      	movs	r1, #0
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7ec fd44 	bl	8000514 <__aeabi_fcmpge>
 8013a8c:	1e03      	subs	r3, r0, #0
 8013a8e:	d011      	beq.n	8013ab4 <Display_Access_Interface_Current+0x98>
	{
		string_current[0]='0';
 8013a90:	2508      	movs	r5, #8
 8013a92:	197b      	adds	r3, r7, r5
 8013a94:	2230      	movs	r2, #48	; 0x30
 8013a96:	701a      	strb	r2, [r3, #0]
		string_current[1]='0';
 8013a98:	197b      	adds	r3, r7, r5
 8013a9a:	2230      	movs	r2, #48	; 0x30
 8013a9c:	705a      	strb	r2, [r3, #1]
		sprintf(&string_current[2], "%4.2f", Current);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f7ef fa06 	bl	8002eb0 <__aeabi_f2d>
 8013aa4:	0002      	movs	r2, r0
 8013aa6:	000b      	movs	r3, r1
 8013aa8:	4c19      	ldr	r4, [pc, #100]	; (8013b10 <Display_Access_Interface_Current+0xf4>)
 8013aaa:	1979      	adds	r1, r7, r5
 8013aac:	1c88      	adds	r0, r1, #2
 8013aae:	0021      	movs	r1, r4
 8013ab0:	f001 fd42 	bl	8015538 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 8013ab4:	4b17      	ldr	r3, [pc, #92]	; (8013b14 <Display_Access_Interface_Current+0xf8>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2b03      	cmp	r3, #3
 8013aba:	d110      	bne.n	8013ade <Display_Access_Interface_Current+0xc2>
 8013abc:	4b15      	ldr	r3, [pc, #84]	; (8013b14 <Display_Access_Interface_Current+0xf8>)
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	2b02      	cmp	r3, #2
 8013ac2:	d10c      	bne.n	8013ade <Display_Access_Interface_Current+0xc2>
	{
		Write_String_16x32AsicII(16,36,string_current);
 8013ac4:	2308      	movs	r3, #8
 8013ac6:	18fb      	adds	r3, r7, r3
 8013ac8:	001a      	movs	r2, r3
 8013aca:	2124      	movs	r1, #36	; 0x24
 8013acc:	2010      	movs	r0, #16
 8013ace:	f7ff f91b 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013ad2:	2241      	movs	r2, #65	; 0x41
 8013ad4:	213c      	movs	r1, #60	; 0x3c
 8013ad6:	2010      	movs	r0, #16
 8013ad8:	f7ff f8d2 	bl	8012c80 <Write_Single_16x32AsicII>
 8013adc:	e00c      	b.n	8013af8 <Display_Access_Interface_Current+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,36,string_current);
 8013ade:	2308      	movs	r3, #8
 8013ae0:	18fb      	adds	r3, r7, r3
 8013ae2:	001a      	movs	r2, r3
 8013ae4:	2124      	movs	r1, #36	; 0x24
 8013ae6:	2010      	movs	r0, #16
 8013ae8:	f7ff f90e 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013aec:	2241      	movs	r2, #65	; 0x41
 8013aee:	213c      	movs	r1, #60	; 0x3c
 8013af0:	2010      	movs	r0, #16
 8013af2:	f7ff f8c5 	bl	8012c80 <Write_Single_16x32AsicII>
	}

}
 8013af6:	46c0      	nop			; (mov r8, r8)
 8013af8:	46c0      	nop			; (mov r8, r8)
 8013afa:	46bd      	mov	sp, r7
 8013afc:	b004      	add	sp, #16
 8013afe:	bdb0      	pop	{r4, r5, r7, pc}
 8013b00:	42c80000 	.word	0x42c80000
 8013b04:	0801876c 	.word	0x0801876c
 8013b08:	41200000 	.word	0x41200000
 8013b0c:	08018774 	.word	0x08018774
 8013b10:	0801877c 	.word	0x0801877c
 8013b14:	20003b8c 	.word	0x20003b8c

08013b18 <Display_Access_Interface_Save>:
	}

}

void Display_Access_Interface_Save(void)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"SAVE  ");
 8013b1e:	4b1d      	ldr	r3, [pc, #116]	; (8013b94 <Display_Access_Interface_Save+0x7c>)
 8013b20:	001a      	movs	r2, r3
 8013b22:	2124      	movs	r1, #36	; 0x24
 8013b24:	2030      	movs	r0, #48	; 0x30
 8013b26:	f7ff f86d 	bl	8012c04 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 8013b2a:	4b1b      	ldr	r3, [pc, #108]	; (8013b98 <Display_Access_Interface_Save+0x80>)
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	2b09      	cmp	r3, #9
 8013b30:	d80e      	bhi.n	8013b50 <Display_Access_Interface_Save+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 8013b32:	2230      	movs	r2, #48	; 0x30
 8013b34:	213c      	movs	r1, #60	; 0x3c
 8013b36:	2030      	movs	r0, #48	; 0x30
 8013b38:	f7ff f820 	bl	8012b7c <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 8013b3c:	4b16      	ldr	r3, [pc, #88]	; (8013b98 <Display_Access_Interface_Save+0x80>)
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	3330      	adds	r3, #48	; 0x30
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	001a      	movs	r2, r3
 8013b46:	213e      	movs	r1, #62	; 0x3e
 8013b48:	2030      	movs	r0, #48	; 0x30
 8013b4a:	f7ff f817 	bl	8012b7c <Write_Single_8x16AsicII>
 8013b4e:	e008      	b.n	8013b62 <Display_Access_Interface_Save+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 8013b50:	4b11      	ldr	r3, [pc, #68]	; (8013b98 <Display_Access_Interface_Save+0x80>)
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	3330      	adds	r3, #48	; 0x30
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	001a      	movs	r2, r3
 8013b5a:	213c      	movs	r1, #60	; 0x3c
 8013b5c:	2030      	movs	r0, #48	; 0x30
 8013b5e:	f7ff f80d 	bl	8012b7c <Write_Single_8x16AsicII>



	float voltage=String_To_Float(String_Save_V);
 8013b62:	4b0e      	ldr	r3, [pc, #56]	; (8013b9c <Display_Access_Interface_Save+0x84>)
 8013b64:	0018      	movs	r0, r3
 8013b66:	f7fa fe03 	bl	800e770 <String_To_Float>
 8013b6a:	1c03      	adds	r3, r0, #0
 8013b6c:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	1c18      	adds	r0, r3, #0
 8013b72:	f7ff fed5 	bl	8013920 <Display_Access_Interface_Voltage>


	float current=String_To_Float(String_Save_I);
 8013b76:	4b0a      	ldr	r3, [pc, #40]	; (8013ba0 <Display_Access_Interface_Save+0x88>)
 8013b78:	0018      	movs	r0, r3
 8013b7a:	f7fa fdf9 	bl	800e770 <String_To_Float>
 8013b7e:	1c03      	adds	r3, r0, #0
 8013b80:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	1c18      	adds	r0, r3, #0
 8013b86:	f7ff ff49 	bl	8013a1c <Display_Access_Interface_Current>


}
 8013b8a:	46c0      	nop			; (mov r8, r8)
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	b002      	add	sp, #8
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	46c0      	nop			; (mov r8, r8)
 8013b94:	08018828 	.word	0x08018828
 8013b98:	20003b21 	.word	0x20003b21
 8013b9c:	2000301c 	.word	0x2000301c
 8013ba0:	20003028 	.word	0x20003028

08013ba4 <Display_Access_Interface_Recall>:
void Display_Access_Interface_Recall(void)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"RECALL");
 8013baa:	4b2f      	ldr	r3, [pc, #188]	; (8013c68 <Display_Access_Interface_Recall+0xc4>)
 8013bac:	001a      	movs	r2, r3
 8013bae:	2124      	movs	r1, #36	; 0x24
 8013bb0:	2030      	movs	r0, #48	; 0x30
 8013bb2:	f7ff f827 	bl	8012c04 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 8013bb6:	4b2d      	ldr	r3, [pc, #180]	; (8013c6c <Display_Access_Interface_Recall+0xc8>)
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	2b09      	cmp	r3, #9
 8013bbc:	d80e      	bhi.n	8013bdc <Display_Access_Interface_Recall+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 8013bbe:	2230      	movs	r2, #48	; 0x30
 8013bc0:	213c      	movs	r1, #60	; 0x3c
 8013bc2:	2030      	movs	r0, #48	; 0x30
 8013bc4:	f7fe ffda 	bl	8012b7c <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 8013bc8:	4b28      	ldr	r3, [pc, #160]	; (8013c6c <Display_Access_Interface_Recall+0xc8>)
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	3330      	adds	r3, #48	; 0x30
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	001a      	movs	r2, r3
 8013bd2:	213e      	movs	r1, #62	; 0x3e
 8013bd4:	2030      	movs	r0, #48	; 0x30
 8013bd6:	f7fe ffd1 	bl	8012b7c <Write_Single_8x16AsicII>
 8013bda:	e008      	b.n	8013bee <Display_Access_Interface_Recall+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 8013bdc:	4b23      	ldr	r3, [pc, #140]	; (8013c6c <Display_Access_Interface_Recall+0xc8>)
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	3330      	adds	r3, #48	; 0x30
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	001a      	movs	r2, r3
 8013be6:	213c      	movs	r1, #60	; 0x3c
 8013be8:	2030      	movs	r0, #48	; 0x30
 8013bea:	f7fe ffc7 	bl	8012b7c <Write_Single_8x16AsicII>


	//float voltage=String_To_Float(String_Recall_V);
	xyz.coordinates3=1;
 8013bee:	4b20      	ldr	r3, [pc, #128]	; (8013c70 <Display_Access_Interface_Recall+0xcc>)
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	609a      	str	r2, [r3, #8]
	float voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 8013bf4:	4b1d      	ldr	r3, [pc, #116]	; (8013c6c <Display_Access_Interface_Recall+0xc8>)
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	0018      	movs	r0, r3
 8013bfa:	f7f8 fc5d 	bl	800c4b8 <AT25_Save_Recall_Recall_VI>
 8013bfe:	0003      	movs	r3, r0
 8013c00:	0018      	movs	r0, r3
 8013c02:	f7ef f8ff 	bl	8002e04 <__aeabi_i2d>
 8013c06:	2200      	movs	r2, #0
 8013c08:	4b1a      	ldr	r3, [pc, #104]	; (8013c74 <Display_Access_Interface_Recall+0xd0>)
 8013c0a:	f7ed fea7 	bl	800195c <__aeabi_ddiv>
 8013c0e:	0002      	movs	r2, r0
 8013c10:	000b      	movs	r3, r1
 8013c12:	0010      	movs	r0, r2
 8013c14:	0019      	movs	r1, r3
 8013c16:	f7ef f993 	bl	8002f40 <__aeabi_d2f>
 8013c1a:	1c03      	adds	r3, r0, #0
 8013c1c:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	1c18      	adds	r0, r3, #0
 8013c22:	f7ff fe7d 	bl	8013920 <Display_Access_Interface_Voltage>

	xyz.coordinates3=2;
 8013c26:	4b12      	ldr	r3, [pc, #72]	; (8013c70 <Display_Access_Interface_Recall+0xcc>)
 8013c28:	2202      	movs	r2, #2
 8013c2a:	609a      	str	r2, [r3, #8]
	//float current=String_To_Float(String_Recall_I);
	float current=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 8013c2c:	4b0f      	ldr	r3, [pc, #60]	; (8013c6c <Display_Access_Interface_Recall+0xc8>)
 8013c2e:	781b      	ldrb	r3, [r3, #0]
 8013c30:	0018      	movs	r0, r3
 8013c32:	f7f8 fc41 	bl	800c4b8 <AT25_Save_Recall_Recall_VI>
 8013c36:	0003      	movs	r3, r0
 8013c38:	0018      	movs	r0, r3
 8013c3a:	f7ef f8e3 	bl	8002e04 <__aeabi_i2d>
 8013c3e:	2200      	movs	r2, #0
 8013c40:	4b0c      	ldr	r3, [pc, #48]	; (8013c74 <Display_Access_Interface_Recall+0xd0>)
 8013c42:	f7ed fe8b 	bl	800195c <__aeabi_ddiv>
 8013c46:	0002      	movs	r2, r0
 8013c48:	000b      	movs	r3, r1
 8013c4a:	0010      	movs	r0, r2
 8013c4c:	0019      	movs	r1, r3
 8013c4e:	f7ef f977 	bl	8002f40 <__aeabi_d2f>
 8013c52:	1c03      	adds	r3, r0, #0
 8013c54:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	1c18      	adds	r0, r3, #0
 8013c5a:	f7ff fedf 	bl	8013a1c <Display_Access_Interface_Current>

}
 8013c5e:	46c0      	nop			; (mov r8, r8)
 8013c60:	46bd      	mov	sp, r7
 8013c62:	b002      	add	sp, #8
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	46c0      	nop			; (mov r8, r8)
 8013c68:	08018818 	.word	0x08018818
 8013c6c:	20003b21 	.word	0x20003b21
 8013c70:	20003b8c 	.word	0x20003b8c
 8013c74:	40590000 	.word	0x40590000

08013c78 <Display_Menu_Function_Interface_First_Menu>:
  * @brief  显示一级菜单界面
  * @param  一级菜单的功能
  * @retval None
  */
void Display_Menu_Function_Interface_First_Menu(int Selection)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]

	Write_String_8x16AsicII(0,0,"FUNCTION");
 8013c80:	4b25      	ldr	r3, [pc, #148]	; (8013d18 <Display_Menu_Function_Interface_First_Menu+0xa0>)
 8013c82:	001a      	movs	r2, r3
 8013c84:	2100      	movs	r1, #0
 8013c86:	2000      	movs	r0, #0
 8013c88:	f7fe ffbc 	bl	8012c04 <Write_String_8x16AsicII>
	switch(Selection)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b08      	cmp	r3, #8
 8013c90:	d83d      	bhi.n	8013d0e <Display_Menu_Function_Interface_First_Menu+0x96>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	009a      	lsls	r2, r3, #2
 8013c96:	4b21      	ldr	r3, [pc, #132]	; (8013d1c <Display_Menu_Function_Interface_First_Menu+0xa4>)
 8013c98:	18d3      	adds	r3, r2, r3
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	469f      	mov	pc, r3
	{
		case 1:
			{
				Write_String_16x32AsicII(16,24,"SYSTEM     ");
 8013c9e:	4b20      	ldr	r3, [pc, #128]	; (8013d20 <Display_Menu_Function_Interface_First_Menu+0xa8>)
 8013ca0:	001a      	movs	r2, r3
 8013ca2:	2118      	movs	r1, #24
 8013ca4:	2010      	movs	r0, #16
 8013ca6:	f7ff f82f 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013caa:	e031      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 2:
			{
				Write_String_16x32AsicII(16,24,"SLOPE      ");
 8013cac:	4b1d      	ldr	r3, [pc, #116]	; (8013d24 <Display_Menu_Function_Interface_First_Menu+0xac>)
 8013cae:	001a      	movs	r2, r3
 8013cb0:	2118      	movs	r1, #24
 8013cb2:	2010      	movs	r0, #16
 8013cb4:	f7ff f828 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013cb8:	e02a      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 3:
			{
				Write_String_16x32AsicII(16,24,"RS232       ");
 8013cba:	4b1b      	ldr	r3, [pc, #108]	; (8013d28 <Display_Menu_Function_Interface_First_Menu+0xb0>)
 8013cbc:	001a      	movs	r2, r3
 8013cbe:	2118      	movs	r1, #24
 8013cc0:	2010      	movs	r0, #16
 8013cc2:	f7ff f821 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013cc6:	e023      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 4:
			{
				Write_String_16x32AsicII(16,24,"TIMER       ");
 8013cc8:	4b18      	ldr	r3, [pc, #96]	; (8013d2c <Display_Menu_Function_Interface_First_Menu+0xb4>)
 8013cca:	001a      	movs	r2, r3
 8013ccc:	2118      	movs	r1, #24
 8013cce:	2010      	movs	r0, #16
 8013cd0:	f7ff f81a 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013cd4:	e01c      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 5:
			{
				Write_String_16x32AsicII(16,24,"AD SET      ");
 8013cd6:	4b16      	ldr	r3, [pc, #88]	; (8013d30 <Display_Menu_Function_Interface_First_Menu+0xb8>)
 8013cd8:	001a      	movs	r2, r3
 8013cda:	2118      	movs	r1, #24
 8013cdc:	2010      	movs	r0, #16
 8013cde:	f7ff f813 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013ce2:	e015      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 6:
			{
				Write_String_16x32AsicII(16,18,"LIGHT TEMP  ");
 8013ce4:	4b13      	ldr	r3, [pc, #76]	; (8013d34 <Display_Menu_Function_Interface_First_Menu+0xbc>)
 8013ce6:	001a      	movs	r2, r3
 8013ce8:	2112      	movs	r1, #18
 8013cea:	2010      	movs	r0, #16
 8013cec:	f7ff f80c 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013cf0:	e00e      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 7:
			{
				Write_String_16x32AsicII(16,18,"PROTECT     ");
 8013cf2:	4b11      	ldr	r3, [pc, #68]	; (8013d38 <Display_Menu_Function_Interface_First_Menu+0xc0>)
 8013cf4:	001a      	movs	r2, r3
 8013cf6:	2112      	movs	r1, #18
 8013cf8:	2010      	movs	r0, #16
 8013cfa:	f7ff f805 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013cfe:	e007      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 8:
			{
				Write_String_16x32AsicII(16,18,"CALIRRATION ");
 8013d00:	4b0e      	ldr	r3, [pc, #56]	; (8013d3c <Display_Menu_Function_Interface_First_Menu+0xc4>)
 8013d02:	001a      	movs	r2, r3
 8013d04:	2112      	movs	r1, #18
 8013d06:	2010      	movs	r0, #16
 8013d08:	f7fe fffe 	bl	8012d08 <Write_String_16x32AsicII>
				break;
 8013d0c:	e000      	b.n	8013d10 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		default :break;
 8013d0e:	46c0      	nop			; (mov r8, r8)
	}
}
 8013d10:	46c0      	nop			; (mov r8, r8)
 8013d12:	46bd      	mov	sp, r7
 8013d14:	b002      	add	sp, #8
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	08018830 	.word	0x08018830
 8013d1c:	08018dfc 	.word	0x08018dfc
 8013d20:	0801883c 	.word	0x0801883c
 8013d24:	08018848 	.word	0x08018848
 8013d28:	08018854 	.word	0x08018854
 8013d2c:	08018864 	.word	0x08018864
 8013d30:	08018874 	.word	0x08018874
 8013d34:	08018884 	.word	0x08018884
 8013d38:	08018894 	.word	0x08018894
 8013d3c:	080188a4 	.word	0x080188a4

08013d40 <second_munu_system>:
/*----------------------------------------------------------------------------------------------二级界面部分-----------------------------------------------------------------------------------------------------*/

static void second_munu_system(int z)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]

	if(z==1)
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2b01      	cmp	r3, #1
 8013d4c:	d108      	bne.n	8013d60 <second_munu_system+0x20>
	{
		Write_String_16x32AsicII(16,16,"MINI_RESET");
 8013d4e:	4b12      	ldr	r3, [pc, #72]	; (8013d98 <second_munu_system+0x58>)
 8013d50:	001a      	movs	r2, r3
 8013d52:	2110      	movs	r1, #16
 8013d54:	2010      	movs	r0, #16
 8013d56:	f7fe ffd7 	bl	8012d08 <Write_String_16x32AsicII>
		Cursor_flash_off();
 8013d5a:	f000 fd3b 	bl	80147d4 <Cursor_flash_off>
		return;
 8013d5e:	e017      	b.n	8013d90 <second_munu_system+0x50>
	}
	else if(z==2)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b02      	cmp	r3, #2
 8013d64:	d108      	bne.n	8013d78 <second_munu_system+0x38>
	{
		Write_String_16x32AsicII(16,16,"MCU_RESET ");
 8013d66:	4b0d      	ldr	r3, [pc, #52]	; (8013d9c <second_munu_system+0x5c>)
 8013d68:	001a      	movs	r2, r3
 8013d6a:	2110      	movs	r1, #16
 8013d6c:	2010      	movs	r0, #16
 8013d6e:	f7fe ffcb 	bl	8012d08 <Write_String_16x32AsicII>
		Cursor_flash_off();
 8013d72:	f000 fd2f 	bl	80147d4 <Cursor_flash_off>
		return;
 8013d76:	e00b      	b.n	8013d90 <second_munu_system+0x50>
	}
	else if(z==3)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b03      	cmp	r3, #3
 8013d7c:	d108      	bne.n	8013d90 <second_munu_system+0x50>
	{
		Write_String_16x32AsicII(16,16,"ALL_RESET ");
 8013d7e:	4b08      	ldr	r3, [pc, #32]	; (8013da0 <second_munu_system+0x60>)
 8013d80:	001a      	movs	r2, r3
 8013d82:	2110      	movs	r1, #16
 8013d84:	2010      	movs	r0, #16
 8013d86:	f7fe ffbf 	bl	8012d08 <Write_String_16x32AsicII>
		Cursor_flash_off();
 8013d8a:	f000 fd23 	bl	80147d4 <Cursor_flash_off>
		return;
 8013d8e:	46c0      	nop			; (mov r8, r8)
	}

}
 8013d90:	46bd      	mov	sp, r7
 8013d92:	b002      	add	sp, #8
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	46c0      	nop			; (mov r8, r8)
 8013d98:	080188b4 	.word	0x080188b4
 8013d9c:	080188c0 	.word	0x080188c0
 8013da0:	080188cc 	.word	0x080188cc

08013da4 <second_munu_slope>:

static void second_munu_slope(int z)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 8013dac:	f000 fd48 	bl	8014840 <Cursor_flash_on>
	if(z==1)
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2b01      	cmp	r3, #1
 8013db4:	d10c      	bne.n	8013dd0 <second_munu_slope+0x2c>
	{
		Write_String_16x32AsicII(16,0,"IRate");
 8013db6:	4b10      	ldr	r3, [pc, #64]	; (8013df8 <second_munu_slope+0x54>)
 8013db8:	001a      	movs	r2, r3
 8013dba:	2100      	movs	r1, #0
 8013dbc:	2010      	movs	r0, #16
 8013dbe:	f7fe ffa3 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_I_Rate);//显示清空后的输入值
 8013dc2:	4b0e      	ldr	r3, [pc, #56]	; (8013dfc <second_munu_slope+0x58>)
 8013dc4:	001a      	movs	r2, r3
 8013dc6:	2118      	movs	r1, #24
 8013dc8:	2010      	movs	r0, #16
 8013dca:	f7fe ff9d 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,0,"VRate");
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值

	}

}
 8013dce:	e00e      	b.n	8013dee <second_munu_slope+0x4a>
	else if(z==2)
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b02      	cmp	r3, #2
 8013dd4:	d10b      	bne.n	8013dee <second_munu_slope+0x4a>
		Write_String_16x32AsicII(16,0,"VRate");
 8013dd6:	4b0a      	ldr	r3, [pc, #40]	; (8013e00 <second_munu_slope+0x5c>)
 8013dd8:	001a      	movs	r2, r3
 8013dda:	2100      	movs	r1, #0
 8013ddc:	2010      	movs	r0, #16
 8013dde:	f7fe ff93 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值
 8013de2:	4b08      	ldr	r3, [pc, #32]	; (8013e04 <second_munu_slope+0x60>)
 8013de4:	001a      	movs	r2, r3
 8013de6:	2118      	movs	r1, #24
 8013de8:	2010      	movs	r0, #16
 8013dea:	f7fe ff8d 	bl	8012d08 <Write_String_16x32AsicII>
}
 8013dee:	46c0      	nop			; (mov r8, r8)
 8013df0:	46bd      	mov	sp, r7
 8013df2:	b002      	add	sp, #8
 8013df4:	bd80      	pop	{r7, pc}
 8013df6:	46c0      	nop			; (mov r8, r8)
 8013df8:	080188d8 	.word	0x080188d8
 8013dfc:	20003040 	.word	0x20003040
 8013e00:	080188e0 	.word	0x080188e0
 8013e04:	2000304c 	.word	0x2000304c

08013e08 <second_munu_RS232>:

static void second_munu_RS232(int z)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
	Cursor_flash_off();
 8013e10:	f000 fce0 	bl	80147d4 <Cursor_flash_off>
	Write_String_16x32AsicII(16,0,"BaudRate");
 8013e14:	4b09      	ldr	r3, [pc, #36]	; (8013e3c <second_munu_RS232+0x34>)
 8013e16:	001a      	movs	r2, r3
 8013e18:	2100      	movs	r1, #0
 8013e1a:	2010      	movs	r0, #16
 8013e1c:	f7fe ff74 	bl	8012d08 <Write_String_16x32AsicII>

	if(z==1) 	  Write_String_16x32AsicII(16,36,String_RS232_Rate);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	d105      	bne.n	8013e32 <second_munu_RS232+0x2a>
 8013e26:	4b06      	ldr	r3, [pc, #24]	; (8013e40 <second_munu_RS232+0x38>)
 8013e28:	001a      	movs	r2, r3
 8013e2a:	2124      	movs	r1, #36	; 0x24
 8013e2c:	2010      	movs	r0, #16
 8013e2e:	f7fe ff6b 	bl	8012d08 <Write_String_16x32AsicII>
	else if(z==2);
}
 8013e32:	46c0      	nop			; (mov r8, r8)
 8013e34:	46bd      	mov	sp, r7
 8013e36:	b002      	add	sp, #8
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	46c0      	nop			; (mov r8, r8)
 8013e3c:	080188e8 	.word	0x080188e8
 8013e40:	20003034 	.word	0x20003034

08013e44 <second_menu_timer>:

static void second_menu_timer(int z)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 8013e4c:	f000 fcf8 	bl	8014840 <Cursor_flash_on>
	if(z==1)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2b01      	cmp	r3, #1
 8013e54:	d10c      	bne.n	8013e70 <second_menu_timer+0x2c>
	{
		Write_String_16x32AsicII(16,0,"delay ");
 8013e56:	4b18      	ldr	r3, [pc, #96]	; (8013eb8 <second_menu_timer+0x74>)
 8013e58:	001a      	movs	r2, r3
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	2010      	movs	r0, #16
 8013e5e:	f7fe ff53 	bl	8012d08 <Write_String_16x32AsicII>

		Write_String_16x32AsicII(16,24, String_Delay);//显示输入值
 8013e62:	4b16      	ldr	r3, [pc, #88]	; (8013ebc <second_menu_timer+0x78>)
 8013e64:	001a      	movs	r2, r3
 8013e66:	2118      	movs	r1, #24
 8013e68:	2010      	movs	r0, #16
 8013e6a:	f7fe ff4d 	bl	8012d08 <Write_String_16x32AsicII>
	else if(z==3)
	{
		Write_String_16x32AsicII(16,0,"Toff  ");
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
	}
}
 8013e6e:	e01e      	b.n	8013eae <second_menu_timer+0x6a>
	else if(z==2)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2b02      	cmp	r3, #2
 8013e74:	d10c      	bne.n	8013e90 <second_menu_timer+0x4c>
		Write_String_16x32AsicII(16,0,"Ton   ");
 8013e76:	4b12      	ldr	r3, [pc, #72]	; (8013ec0 <second_menu_timer+0x7c>)
 8013e78:	001a      	movs	r2, r3
 8013e7a:	2100      	movs	r1, #0
 8013e7c:	2010      	movs	r0, #16
 8013e7e:	f7fe ff43 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_On);//显示输入值
 8013e82:	4b10      	ldr	r3, [pc, #64]	; (8013ec4 <second_menu_timer+0x80>)
 8013e84:	001a      	movs	r2, r3
 8013e86:	2118      	movs	r1, #24
 8013e88:	2010      	movs	r0, #16
 8013e8a:	f7fe ff3d 	bl	8012d08 <Write_String_16x32AsicII>
}
 8013e8e:	e00e      	b.n	8013eae <second_menu_timer+0x6a>
	else if(z==3)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2b03      	cmp	r3, #3
 8013e94:	d10b      	bne.n	8013eae <second_menu_timer+0x6a>
		Write_String_16x32AsicII(16,0,"Toff  ");
 8013e96:	4b0c      	ldr	r3, [pc, #48]	; (8013ec8 <second_menu_timer+0x84>)
 8013e98:	001a      	movs	r2, r3
 8013e9a:	2100      	movs	r1, #0
 8013e9c:	2010      	movs	r0, #16
 8013e9e:	f7fe ff33 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
 8013ea2:	4b0a      	ldr	r3, [pc, #40]	; (8013ecc <second_menu_timer+0x88>)
 8013ea4:	001a      	movs	r2, r3
 8013ea6:	2118      	movs	r1, #24
 8013ea8:	2010      	movs	r0, #16
 8013eaa:	f7fe ff2d 	bl	8012d08 <Write_String_16x32AsicII>
}
 8013eae:	46c0      	nop			; (mov r8, r8)
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	b002      	add	sp, #8
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	46c0      	nop			; (mov r8, r8)
 8013eb8:	080188f4 	.word	0x080188f4
 8013ebc:	20003010 	.word	0x20003010
 8013ec0:	080188fc 	.word	0x080188fc
 8013ec4:	20002ff8 	.word	0x20002ff8
 8013ec8:	08018904 	.word	0x08018904
 8013ecc:	20003004 	.word	0x20003004

08013ed0 <second_menu_AD>:

static void second_menu_AD(int z)
{
 8013ed0:	b590      	push	{r4, r7, lr}
 8013ed2:	b089      	sub	sp, #36	; 0x24
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d138      	bne.n	8013f50 <second_menu_AD+0x80>
	{
		Cursor_flash_on();
 8013ede:	f000 fcaf 	bl	8014840 <Cursor_flash_on>
		/*输入密码界面*/
		Write_String_16x32AsicII(16,0, "INPUT:");
 8013ee2:	4b61      	ldr	r3, [pc, #388]	; (8014068 <second_menu_AD+0x198>)
 8013ee4:	001a      	movs	r2, r3
 8013ee6:	2100      	movs	r1, #0
 8013ee8:	2010      	movs	r0, #16
 8013eea:	f7fe ff0d 	bl	8012d08 <Write_String_16x32AsicII>
		if(Shift_Not_Shift == Shift)//显示输入的密码
 8013eee:	4b5f      	ldr	r3, [pc, #380]	; (801406c <second_menu_AD+0x19c>)
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	2b01      	cmp	r3, #1
 8013ef4:	d106      	bne.n	8013f04 <second_menu_AD+0x34>
		{
			Write_String_16x32AsicII(16,24, String_Password);
 8013ef6:	4b5e      	ldr	r3, [pc, #376]	; (8014070 <second_menu_AD+0x1a0>)
 8013ef8:	001a      	movs	r2, r3
 8013efa:	2118      	movs	r1, #24
 8013efc:	2010      	movs	r0, #16
 8013efe:	f7fe ff03 	bl	8012d08 <Write_String_16x32AsicII>
 8013f02:	e025      	b.n	8013f50 <second_menu_AD+0x80>
		}
		else if(Shift_Not_Shift == Not_Shift)
 8013f04:	4b59      	ldr	r3, [pc, #356]	; (801406c <second_menu_AD+0x19c>)
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d121      	bne.n	8013f50 <second_menu_AD+0x80>
		{
			for(uint8_t i=0;i<6;i++)
 8013f0c:	231f      	movs	r3, #31
 8013f0e:	18fb      	adds	r3, r7, r3
 8013f10:	2200      	movs	r2, #0
 8013f12:	701a      	strb	r2, [r3, #0]
 8013f14:	e011      	b.n	8013f3a <second_menu_AD+0x6a>
			{
				if(String_Password[i]!=' ')	String_Password_mask[i]='*';
 8013f16:	211f      	movs	r1, #31
 8013f18:	187b      	adds	r3, r7, r1
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	4a54      	ldr	r2, [pc, #336]	; (8014070 <second_menu_AD+0x1a0>)
 8013f1e:	5cd3      	ldrb	r3, [r2, r3]
 8013f20:	2b20      	cmp	r3, #32
 8013f22:	d004      	beq.n	8013f2e <second_menu_AD+0x5e>
 8013f24:	187b      	adds	r3, r7, r1
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	4a52      	ldr	r2, [pc, #328]	; (8014074 <second_menu_AD+0x1a4>)
 8013f2a:	212a      	movs	r1, #42	; 0x2a
 8013f2c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0;i<6;i++)
 8013f2e:	211f      	movs	r1, #31
 8013f30:	187b      	adds	r3, r7, r1
 8013f32:	781a      	ldrb	r2, [r3, #0]
 8013f34:	187b      	adds	r3, r7, r1
 8013f36:	3201      	adds	r2, #1
 8013f38:	701a      	strb	r2, [r3, #0]
 8013f3a:	231f      	movs	r3, #31
 8013f3c:	18fb      	adds	r3, r7, r3
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	2b05      	cmp	r3, #5
 8013f42:	d9e8      	bls.n	8013f16 <second_menu_AD+0x46>
			}
			Write_String_16x32AsicII(16,24, String_Password_mask);
 8013f44:	4b4b      	ldr	r3, [pc, #300]	; (8014074 <second_menu_AD+0x1a4>)
 8013f46:	001a      	movs	r2, r3
 8013f48:	2118      	movs	r1, #24
 8013f4a:	2010      	movs	r0, #16
 8013f4c:	f7fe fedc 	bl	8012d08 <Write_String_16x32AsicII>

		}


	}
	if(z==2)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2b02      	cmp	r3, #2
 8013f54:	d163      	bne.n	801401e <second_menu_AD+0x14e>
	{

		Write_String_8x16AsicII(0,0,"GainV:");
 8013f56:	4b48      	ldr	r3, [pc, #288]	; (8014078 <second_menu_AD+0x1a8>)
 8013f58:	001a      	movs	r2, r3
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	2000      	movs	r0, #0
 8013f5e:	f7fe fe51 	bl	8012c04 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(16,0,"GainI:");
 8013f62:	4b46      	ldr	r3, [pc, #280]	; (801407c <second_menu_AD+0x1ac>)
 8013f64:	001a      	movs	r2, r3
 8013f66:	2100      	movs	r1, #0
 8013f68:	2010      	movs	r0, #16
 8013f6a:	f7fe fe4b 	bl	8012c04 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(32,0,"interceptV:");
 8013f6e:	4b44      	ldr	r3, [pc, #272]	; (8014080 <second_menu_AD+0x1b0>)
 8013f70:	001a      	movs	r2, r3
 8013f72:	2100      	movs	r1, #0
 8013f74:	2020      	movs	r0, #32
 8013f76:	f7fe fe45 	bl	8012c04 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(48,0,"interceptI:");
 8013f7a:	4b42      	ldr	r3, [pc, #264]	; (8014084 <second_menu_AD+0x1b4>)
 8013f7c:	001a      	movs	r2, r3
 8013f7e:	2100      	movs	r1, #0
 8013f80:	2030      	movs	r0, #48	; 0x30
 8013f82:	f7fe fe3f 	bl	8012c04 <Write_String_8x16AsicII>
		char String[9]={'0','0','.','0','0','0','0','0'};
 8013f86:	2414      	movs	r4, #20
 8013f88:	193b      	adds	r3, r7, r4
 8013f8a:	4a3f      	ldr	r2, [pc, #252]	; (8014088 <second_menu_AD+0x1b8>)
 8013f8c:	ca03      	ldmia	r2!, {r0, r1}
 8013f8e:	c303      	stmia	r3!, {r0, r1}
 8013f90:	7812      	ldrb	r2, [r2, #0]
 8013f92:	701a      	strb	r2, [r3, #0]

		sprintf(String, "%6.5f", ADC_Gain_V);//将float转为string，数据长度为6，保留两位小数
 8013f94:	4b3d      	ldr	r3, [pc, #244]	; (801408c <second_menu_AD+0x1bc>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	1c18      	adds	r0, r3, #0
 8013f9a:	f7ee ff89 	bl	8002eb0 <__aeabi_f2d>
 8013f9e:	0002      	movs	r2, r0
 8013fa0:	000b      	movs	r3, r1
 8013fa2:	493b      	ldr	r1, [pc, #236]	; (8014090 <second_menu_AD+0x1c0>)
 8013fa4:	1938      	adds	r0, r7, r4
 8013fa6:	f001 fac7 	bl	8015538 <siprintf>
		Write_String_8x16AsicII(0,26, String);
 8013faa:	193b      	adds	r3, r7, r4
 8013fac:	001a      	movs	r2, r3
 8013fae:	211a      	movs	r1, #26
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	f7fe fe27 	bl	8012c04 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", ADC_Gain_I);//将float转为string，数据长度为6，保留两位小数
 8013fb6:	4b37      	ldr	r3, [pc, #220]	; (8014094 <second_menu_AD+0x1c4>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	1c18      	adds	r0, r3, #0
 8013fbc:	f7ee ff78 	bl	8002eb0 <__aeabi_f2d>
 8013fc0:	0002      	movs	r2, r0
 8013fc2:	000b      	movs	r3, r1
 8013fc4:	4932      	ldr	r1, [pc, #200]	; (8014090 <second_menu_AD+0x1c0>)
 8013fc6:	1938      	adds	r0, r7, r4
 8013fc8:	f001 fab6 	bl	8015538 <siprintf>
		Write_String_8x16AsicII(16,26, String);
 8013fcc:	193b      	adds	r3, r7, r4
 8013fce:	001a      	movs	r2, r3
 8013fd0:	211a      	movs	r1, #26
 8013fd2:	2010      	movs	r0, #16
 8013fd4:	f7fe fe16 	bl	8012c04 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_V);//将float转为string，数据长度为6，保留两位小数
 8013fd8:	4b2f      	ldr	r3, [pc, #188]	; (8014098 <second_menu_AD+0x1c8>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	1c18      	adds	r0, r3, #0
 8013fde:	f7ee ff67 	bl	8002eb0 <__aeabi_f2d>
 8013fe2:	0002      	movs	r2, r0
 8013fe4:	000b      	movs	r3, r1
 8013fe6:	492a      	ldr	r1, [pc, #168]	; (8014090 <second_menu_AD+0x1c0>)
 8013fe8:	1938      	adds	r0, r7, r4
 8013fea:	f001 faa5 	bl	8015538 <siprintf>
		Write_String_8x16AsicII(32,26, String);
 8013fee:	193b      	adds	r3, r7, r4
 8013ff0:	001a      	movs	r2, r3
 8013ff2:	211a      	movs	r1, #26
 8013ff4:	2020      	movs	r0, #32
 8013ff6:	f7fe fe05 	bl	8012c04 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_I);//将float转为string，数据长度为6，保留两位小数
 8013ffa:	4b28      	ldr	r3, [pc, #160]	; (801409c <second_menu_AD+0x1cc>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	1c18      	adds	r0, r3, #0
 8014000:	f7ee ff56 	bl	8002eb0 <__aeabi_f2d>
 8014004:	0002      	movs	r2, r0
 8014006:	000b      	movs	r3, r1
 8014008:	4921      	ldr	r1, [pc, #132]	; (8014090 <second_menu_AD+0x1c0>)
 801400a:	1938      	adds	r0, r7, r4
 801400c:	f001 fa94 	bl	8015538 <siprintf>
		Write_String_8x16AsicII(48,26, String);
 8014010:	193b      	adds	r3, r7, r4
 8014012:	001a      	movs	r2, r3
 8014014:	211a      	movs	r1, #26
 8014016:	2030      	movs	r0, #48	; 0x30
 8014018:	f7fe fdf4 	bl	8012c04 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(0,0,"ERROR_I:");
		sprintf(String, "%6.5f", Current_Error);//将float转为string，数据长度为6，保留两位小数
		Write_String_8x16AsicII(0,26, String);

	}
}
 801401c:	e020      	b.n	8014060 <second_menu_AD+0x190>
	else if(z==3)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2b03      	cmp	r3, #3
 8014022:	d11d      	bne.n	8014060 <second_menu_AD+0x190>
		char String[9]={'0','0','.','0','0','0','0','0'};
 8014024:	2408      	movs	r4, #8
 8014026:	193b      	adds	r3, r7, r4
 8014028:	4a17      	ldr	r2, [pc, #92]	; (8014088 <second_menu_AD+0x1b8>)
 801402a:	ca03      	ldmia	r2!, {r0, r1}
 801402c:	c303      	stmia	r3!, {r0, r1}
 801402e:	7812      	ldrb	r2, [r2, #0]
 8014030:	701a      	strb	r2, [r3, #0]
		Write_String_8x16AsicII(0,0,"ERROR_I:");
 8014032:	4b1b      	ldr	r3, [pc, #108]	; (80140a0 <second_menu_AD+0x1d0>)
 8014034:	001a      	movs	r2, r3
 8014036:	2100      	movs	r1, #0
 8014038:	2000      	movs	r0, #0
 801403a:	f7fe fde3 	bl	8012c04 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Current_Error);//将float转为string，数据长度为6，保留两位小数
 801403e:	4b19      	ldr	r3, [pc, #100]	; (80140a4 <second_menu_AD+0x1d4>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	1c18      	adds	r0, r3, #0
 8014044:	f7ee ff34 	bl	8002eb0 <__aeabi_f2d>
 8014048:	0002      	movs	r2, r0
 801404a:	000b      	movs	r3, r1
 801404c:	4910      	ldr	r1, [pc, #64]	; (8014090 <second_menu_AD+0x1c0>)
 801404e:	1938      	adds	r0, r7, r4
 8014050:	f001 fa72 	bl	8015538 <siprintf>
		Write_String_8x16AsicII(0,26, String);
 8014054:	193b      	adds	r3, r7, r4
 8014056:	001a      	movs	r2, r3
 8014058:	211a      	movs	r1, #26
 801405a:	2000      	movs	r0, #0
 801405c:	f7fe fdd2 	bl	8012c04 <Write_String_8x16AsicII>
}
 8014060:	46c0      	nop			; (mov r8, r8)
 8014062:	46bd      	mov	sp, r7
 8014064:	b009      	add	sp, #36	; 0x24
 8014066:	bd90      	pop	{r4, r7, pc}
 8014068:	0801890c 	.word	0x0801890c
 801406c:	20003b1b 	.word	0x20003b1b
 8014070:	200030a4 	.word	0x200030a4
 8014074:	200030ac 	.word	0x200030ac
 8014078:	08018914 	.word	0x08018914
 801407c:	0801891c 	.word	0x0801891c
 8014080:	08018924 	.word	0x08018924
 8014084:	08018930 	.word	0x08018930
 8014088:	08018950 	.word	0x08018950
 801408c:	20002fe8 	.word	0x20002fe8
 8014090:	0801893c 	.word	0x0801893c
 8014094:	20002fec 	.word	0x20002fec
 8014098:	20002ff0 	.word	0x20002ff0
 801409c:	20002ff4 	.word	0x20002ff4
 80140a0:	08018944 	.word	0x08018944
 80140a4:	20003b80 	.word	0x20003b80

080140a8 <second_menu_Hard>:

static void second_menu_Hard(int z)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b082      	sub	sp, #8
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
	if(z==1)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	d126      	bne.n	8014104 <second_menu_Hard+0x5c>
	{
		Write_String_16x32AsicII(16,0,"Light ");
 80140b6:	4b27      	ldr	r3, [pc, #156]	; (8014154 <second_menu_Hard+0xac>)
 80140b8:	001a      	movs	r2, r3
 80140ba:	2100      	movs	r1, #0
 80140bc:	2010      	movs	r0, #16
 80140be:	f7fe fe23 	bl	8012d08 <Write_String_16x32AsicII>

		String_Light_Level[0]=Light/10+'0';
 80140c2:	4b25      	ldr	r3, [pc, #148]	; (8014158 <second_menu_Hard+0xb0>)
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	210a      	movs	r1, #10
 80140c8:	0018      	movs	r0, r3
 80140ca:	f7ec f83f 	bl	800014c <__udivsi3>
 80140ce:	0003      	movs	r3, r0
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	3330      	adds	r3, #48	; 0x30
 80140d4:	b2da      	uxtb	r2, r3
 80140d6:	4b21      	ldr	r3, [pc, #132]	; (801415c <second_menu_Hard+0xb4>)
 80140d8:	701a      	strb	r2, [r3, #0]
		String_Light_Level[1]=Light%10+'0';
 80140da:	4b1f      	ldr	r3, [pc, #124]	; (8014158 <second_menu_Hard+0xb0>)
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	210a      	movs	r1, #10
 80140e0:	0018      	movs	r0, r3
 80140e2:	f7ec f8b9 	bl	8000258 <__aeabi_uidivmod>
 80140e6:	000b      	movs	r3, r1
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	3330      	adds	r3, #48	; 0x30
 80140ec:	b2da      	uxtb	r2, r3
 80140ee:	4b1b      	ldr	r3, [pc, #108]	; (801415c <second_menu_Hard+0xb4>)
 80140f0:	705a      	strb	r2, [r3, #1]
		Write_String_16x32AsicII(16,30, String_Light_Level);//显示输入值
 80140f2:	4b1a      	ldr	r3, [pc, #104]	; (801415c <second_menu_Hard+0xb4>)
 80140f4:	001a      	movs	r2, r3
 80140f6:	211e      	movs	r1, #30
 80140f8:	2010      	movs	r0, #16
 80140fa:	f7fe fe05 	bl	8012d08 <Write_String_16x32AsicII>

		Cursor_flash_off();
 80140fe:	f000 fb69 	bl	80147d4 <Cursor_flash_off>
		return;
 8014102:	e023      	b.n	801414c <second_menu_Hard+0xa4>
	}
	else if(z==2)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2b02      	cmp	r3, #2
 8014108:	d10e      	bne.n	8014128 <second_menu_Hard+0x80>
	{
		Write_String_16x32AsicII(16,0,"Temp: ");
 801410a:	4b15      	ldr	r3, [pc, #84]	; (8014160 <second_menu_Hard+0xb8>)
 801410c:	001a      	movs	r2, r3
 801410e:	2100      	movs	r1, #0
 8014110:	2010      	movs	r0, #16
 8014112:	f7fe fdf9 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Temperature_CH1);//显示温度
 8014116:	4b13      	ldr	r3, [pc, #76]	; (8014164 <second_menu_Hard+0xbc>)
 8014118:	001a      	movs	r2, r3
 801411a:	2118      	movs	r1, #24
 801411c:	2010      	movs	r0, #16
 801411e:	f7fe fdf3 	bl	8012d08 <Write_String_16x32AsicII>

		Cursor_flash_off();
 8014122:	f000 fb57 	bl	80147d4 <Cursor_flash_off>
		return;
 8014126:	e011      	b.n	801414c <second_menu_Hard+0xa4>
	}
	else if(z==3)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2b03      	cmp	r3, #3
 801412c:	d10e      	bne.n	801414c <second_menu_Hard+0xa4>
	{
		Write_String_16x32AsicII(16,0,"FANS: ");
 801412e:	4b0e      	ldr	r3, [pc, #56]	; (8014168 <second_menu_Hard+0xc0>)
 8014130:	001a      	movs	r2, r3
 8014132:	2100      	movs	r1, #0
 8014134:	2010      	movs	r0, #16
 8014136:	f7fe fde7 	bl	8012d08 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_FAN);//转速
 801413a:	4b0c      	ldr	r3, [pc, #48]	; (801416c <second_menu_Hard+0xc4>)
 801413c:	001a      	movs	r2, r3
 801413e:	2118      	movs	r1, #24
 8014140:	2010      	movs	r0, #16
 8014142:	f7fe fde1 	bl	8012d08 <Write_String_16x32AsicII>

		Cursor_flash_off();
 8014146:	f000 fb45 	bl	80147d4 <Cursor_flash_off>
		return;
 801414a:	46c0      	nop			; (mov r8, r8)
	}

}
 801414c:	46bd      	mov	sp, r7
 801414e:	b002      	add	sp, #8
 8014150:	bd80      	pop	{r7, pc}
 8014152:	46c0      	nop			; (mov r8, r8)
 8014154:	0801895c 	.word	0x0801895c
 8014158:	200030b3 	.word	0x200030b3
 801415c:	20003068 	.word	0x20003068
 8014160:	08018964 	.word	0x08018964
 8014164:	20003074 	.word	0x20003074
 8014168:	0801896c 	.word	0x0801896c
 801416c:	20003080 	.word	0x20003080

08014170 <second_menu_Calibration>:


static void second_menu_Calibration(int z)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
	if(z==1)
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	2b01      	cmp	r3, #1
 801417c:	d112      	bne.n	80141a4 <second_menu_Calibration+0x34>
	{
		Cursor_flash_on();
 801417e:	f000 fb5f 	bl	8014840 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 8014182:	4b4a      	ldr	r3, [pc, #296]	; (80142ac <second_menu_Calibration+0x13c>)
 8014184:	001a      	movs	r2, r3
 8014186:	2100      	movs	r1, #0
 8014188:	2010      	movs	r0, #16
 801418a:	f7fe fdbd 	bl	8012d08 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 801418e:	4b48      	ldr	r3, [pc, #288]	; (80142b0 <second_menu_Calibration+0x140>)
 8014190:	001a      	movs	r2, r3
 8014192:	2124      	movs	r1, #36	; 0x24
 8014194:	2010      	movs	r0, #16
 8014196:	f7fe fdb7 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 801419a:	2256      	movs	r2, #86	; 0x56
 801419c:	212c      	movs	r1, #44	; 0x2c
 801419e:	2030      	movs	r0, #48	; 0x30
 80141a0:	f7fe fcec 	bl	8012b7c <Write_Single_8x16AsicII>

	}
	if(z==2)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	d112      	bne.n	80141d0 <second_menu_Calibration+0x60>
	{
		Cursor_flash_on();
 80141aa:	f000 fb49 	bl	8014840 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 80141ae:	4b41      	ldr	r3, [pc, #260]	; (80142b4 <second_menu_Calibration+0x144>)
 80141b0:	001a      	movs	r2, r3
 80141b2:	2100      	movs	r1, #0
 80141b4:	2010      	movs	r0, #16
 80141b6:	f7fe fda7 	bl	8012d08 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 80141ba:	4b3d      	ldr	r3, [pc, #244]	; (80142b0 <second_menu_Calibration+0x140>)
 80141bc:	001a      	movs	r2, r3
 80141be:	2124      	movs	r1, #36	; 0x24
 80141c0:	2010      	movs	r0, #16
 80141c2:	f7fe fda1 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 80141c6:	2256      	movs	r2, #86	; 0x56
 80141c8:	212c      	movs	r1, #44	; 0x2c
 80141ca:	2030      	movs	r0, #48	; 0x30
 80141cc:	f7fe fcd6 	bl	8012b7c <Write_Single_8x16AsicII>

	}
	if(z==3)
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2b03      	cmp	r3, #3
 80141d4:	d13a      	bne.n	801424c <second_menu_Calibration+0xdc>
	{
		Cursor_flash_off();
 80141d6:	f000 fafd 	bl	80147d4 <Cursor_flash_off>
		Write_String_16x32AsicII(16,8,"Current_Zero");
 80141da:	4b37      	ldr	r3, [pc, #220]	; (80142b8 <second_menu_Calibration+0x148>)
 80141dc:	001a      	movs	r2, r3
 80141de:	2108      	movs	r1, #8
 80141e0:	2010      	movs	r0, #16
 80141e2:	f7fe fd91 	bl	8012d08 <Write_String_16x32AsicII>
		if(Flag.Current_error==0)
 80141e6:	4b35      	ldr	r3, [pc, #212]	; (80142bc <second_menu_Calibration+0x14c>)
 80141e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d12e      	bne.n	801424c <second_menu_Calibration+0xdc>
		{
			AT25_Save_AD_Param();
 80141ee:	f7f8 fa15 	bl	800c61c <AT25_Save_AD_Param>
			Clear_Screen();
 80141f2:	f7fe fc6d 	bl	8012ad0 <Clear_Screen>
			xyz.coordinates1=0;
 80141f6:	4b32      	ldr	r3, [pc, #200]	; (80142c0 <second_menu_Calibration+0x150>)
 80141f8:	2200      	movs	r2, #0
 80141fa:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 80141fc:	4b30      	ldr	r3, [pc, #192]	; (80142c0 <second_menu_Calibration+0x150>)
 80141fe:	2200      	movs	r2, #0
 8014200:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 8014202:	4b2f      	ldr	r3, [pc, #188]	; (80142c0 <second_menu_Calibration+0x150>)
 8014204:	2200      	movs	r2, #0
 8014206:	609a      	str	r2, [r3, #8]
		    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);    //关了空闲中断
 8014208:	4b2e      	ldr	r3, [pc, #184]	; (80142c4 <second_menu_Calibration+0x154>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	681a      	ldr	r2, [r3, #0]
 801420e:	4b2d      	ldr	r3, [pc, #180]	; (80142c4 <second_menu_Calibration+0x154>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2110      	movs	r1, #16
 8014214:	438a      	bics	r2, r1
 8014216:	601a      	str	r2, [r3, #0]
		    __HAL_UART_CLEAR_IDLEFLAG(&huart2);				//清除IDLE标志
 8014218:	4b2a      	ldr	r3, [pc, #168]	; (80142c4 <second_menu_Calibration+0x154>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2210      	movs	r2, #16
 801421e:	621a      	str	r2, [r3, #32]
		    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);	//清除IDLE标志
 8014220:	4b28      	ldr	r3, [pc, #160]	; (80142c4 <second_menu_Calibration+0x154>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	681a      	ldr	r2, [r3, #0]
 8014226:	4b27      	ldr	r3, [pc, #156]	; (80142c4 <second_menu_Calibration+0x154>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	2110      	movs	r1, #16
 801422c:	438a      	bics	r2, r1
 801422e:	601a      	str	r2, [r3, #0]
		    __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);    	//使能空闲中断
 8014230:	4b24      	ldr	r3, [pc, #144]	; (80142c4 <second_menu_Calibration+0x154>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	4b23      	ldr	r3, [pc, #140]	; (80142c4 <second_menu_Calibration+0x154>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	2110      	movs	r1, #16
 801423c:	430a      	orrs	r2, r1
 801423e:	601a      	str	r2, [r3, #0]
		    UART_Start_Receive_DMA(&huart2,Uart2_Receive_buffer,9);
 8014240:	4921      	ldr	r1, [pc, #132]	; (80142c8 <second_menu_Calibration+0x158>)
 8014242:	4b20      	ldr	r3, [pc, #128]	; (80142c4 <second_menu_Calibration+0x154>)
 8014244:	2209      	movs	r2, #9
 8014246:	0018      	movs	r0, r3
 8014248:	f7f7 f8ee 	bl	800b428 <UART_Start_Receive_DMA>
		}

	}
	if(z==4)
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2b04      	cmp	r3, #4
 8014250:	d112      	bne.n	8014278 <second_menu_Calibration+0x108>
	{
		Cursor_flash_on();
 8014252:	f000 faf5 	bl	8014840 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 8014256:	4b15      	ldr	r3, [pc, #84]	; (80142ac <second_menu_Calibration+0x13c>)
 8014258:	001a      	movs	r2, r3
 801425a:	2100      	movs	r1, #0
 801425c:	2010      	movs	r0, #16
 801425e:	f7fe fd53 	bl	8012d08 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 8014262:	4b1a      	ldr	r3, [pc, #104]	; (80142cc <second_menu_Calibration+0x15c>)
 8014264:	001a      	movs	r2, r3
 8014266:	2124      	movs	r1, #36	; 0x24
 8014268:	2010      	movs	r0, #16
 801426a:	f7fe fd4d 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 801426e:	2241      	movs	r2, #65	; 0x41
 8014270:	212c      	movs	r1, #44	; 0x2c
 8014272:	2030      	movs	r0, #48	; 0x30
 8014274:	f7fe fc82 	bl	8012b7c <Write_Single_8x16AsicII>

	}
	if(z==5)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2b05      	cmp	r3, #5
 801427c:	d112      	bne.n	80142a4 <second_menu_Calibration+0x134>
	{
		Cursor_flash_on();
 801427e:	f000 fadf 	bl	8014840 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 8014282:	4b0c      	ldr	r3, [pc, #48]	; (80142b4 <second_menu_Calibration+0x144>)
 8014284:	001a      	movs	r2, r3
 8014286:	2100      	movs	r1, #0
 8014288:	2010      	movs	r0, #16
 801428a:	f7fe fd3d 	bl	8012d08 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 801428e:	4b0f      	ldr	r3, [pc, #60]	; (80142cc <second_menu_Calibration+0x15c>)
 8014290:	001a      	movs	r2, r3
 8014292:	2124      	movs	r1, #36	; 0x24
 8014294:	2010      	movs	r0, #16
 8014296:	f7fe fd37 	bl	8012d08 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 801429a:	2241      	movs	r2, #65	; 0x41
 801429c:	212c      	movs	r1, #44	; 0x2c
 801429e:	2030      	movs	r0, #48	; 0x30
 80142a0:	f7fe fc6c 	bl	8012b7c <Write_Single_8x16AsicII>
	}


}
 80142a4:	46c0      	nop			; (mov r8, r8)
 80142a6:	46bd      	mov	sp, r7
 80142a8:	b002      	add	sp, #8
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	08018974 	.word	0x08018974
 80142b0:	2000308c 	.word	0x2000308c
 80142b4:	0801897c 	.word	0x0801897c
 80142b8:	08018984 	.word	0x08018984
 80142bc:	20003384 	.word	0x20003384
 80142c0:	20003b8c 	.word	0x20003b8c
 80142c4:	20003740 	.word	0x20003740
 80142c8:	200036a0 	.word	0x200036a0
 80142cc:	20003098 	.word	0x20003098

080142d0 <Display_Menu_Function_Interface_Second_Menu>:
 * @param  xyz.y
 * @param  xyz.z
 * @retval None
 */
void Display_Menu_Function_Interface_Second_Menu(int y,int z)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]

	Write_String_8x16AsicII(48,48, "2nd Menu");
 80142da:	4b1b      	ldr	r3, [pc, #108]	; (8014348 <Display_Menu_Function_Interface_Second_Menu+0x78>)
 80142dc:	001a      	movs	r2, r3
 80142de:	2130      	movs	r1, #48	; 0x30
 80142e0:	2030      	movs	r0, #48	; 0x30
 80142e2:	f7fe fc8f 	bl	8012c04 <Write_String_8x16AsicII>
	//一级菜单功能，显示在中间
	switch(y)
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b08      	cmp	r3, #8
 80142ea:	d828      	bhi.n	801433e <Display_Menu_Function_Interface_Second_Menu+0x6e>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	009a      	lsls	r2, r3, #2
 80142f0:	4b16      	ldr	r3, [pc, #88]	; (801434c <Display_Menu_Function_Interface_Second_Menu+0x7c>)
 80142f2:	18d3      	adds	r3, r2, r3
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	469f      	mov	pc, r3
	{
		case 1://system
		{
			/*此处补充复位对象界面*/
			second_munu_system(z);
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	0018      	movs	r0, r3
 80142fc:	f7ff fd20 	bl	8013d40 <second_munu_system>
			break;
 8014300:	e01e      	b.n	8014340 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 2://slope
		{
			second_munu_slope(z);
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	0018      	movs	r0, r3
 8014306:	f7ff fd4d 	bl	8013da4 <second_munu_slope>
			break;
 801430a:	e019      	b.n	8014340 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 3://Communication
		{
			second_munu_RS232(z);
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	0018      	movs	r0, r3
 8014310:	f7ff fd7a 	bl	8013e08 <second_munu_RS232>
			break;
 8014314:	e014      	b.n	8014340 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 4://timer
		{
			second_menu_timer(z);
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	0018      	movs	r0, r3
 801431a:	f7ff fd93 	bl	8013e44 <second_menu_timer>
			break;
 801431e:	e00f      	b.n	8014340 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 5://AD
		{
			second_menu_AD(z);
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	0018      	movs	r0, r3
 8014324:	f7ff fdd4 	bl	8013ed0 <second_menu_AD>
			break;
 8014328:	e00a      	b.n	8014340 <Display_Menu_Function_Interface_Second_Menu+0x70>

		}
		case 6:
		{
			second_menu_Hard(z);
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	0018      	movs	r0, r3
 801432e:	f7ff febb 	bl	80140a8 <second_menu_Hard>
			break;
 8014332:	e005      	b.n	8014340 <Display_Menu_Function_Interface_Second_Menu+0x70>
			 second_menu_Portect(z);
		}
		*/
		case 8:
		{
			second_menu_Calibration(z);
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	0018      	movs	r0, r3
 8014338:	f7ff ff1a 	bl	8014170 <second_menu_Calibration>
			break;
 801433c:	e000      	b.n	8014340 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		default :break;
 801433e:	46c0      	nop			; (mov r8, r8)
	}


}
 8014340:	46c0      	nop			; (mov r8, r8)
 8014342:	46bd      	mov	sp, r7
 8014344:	b002      	add	sp, #8
 8014346:	bd80      	pop	{r7, pc}
 8014348:	08018994 	.word	0x08018994
 801434c:	08018e20 	.word	0x08018e20

08014350 <Display_Protect_Interface>:
  * @brief  显示保护界面
  * @param  出现的错误类型
  * @retval None
  */
void Display_Protect_Interface(uint8_t Error)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	0002      	movs	r2, r0
 8014358:	1dfb      	adds	r3, r7, #7
 801435a:	701a      	strb	r2, [r3, #0]

	Cursor_flash_off();
 801435c:	f000 fa3a 	bl	80147d4 <Cursor_flash_off>
	uint8_t mask=0x01;
 8014360:	210f      	movs	r1, #15
 8014362:	187b      	adds	r3, r7, r1
 8014364:	2201      	movs	r2, #1
 8014366:	701a      	strb	r2, [r3, #0]
	static uint8_t count=0;

	count=0;
 8014368:	4ba4      	ldr	r3, [pc, #656]	; (80145fc <Display_Protect_Interface+0x2ac>)
 801436a:	2200      	movs	r2, #0
 801436c:	701a      	strb	r2, [r3, #0]
	if((Error&mask)==mask)//0x01
 801436e:	1dfb      	adds	r3, r7, #7
 8014370:	187a      	adds	r2, r7, r1
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	7812      	ldrb	r2, [r2, #0]
 8014376:	4013      	ands	r3, r2
 8014378:	b2db      	uxtb	r3, r3
 801437a:	187a      	adds	r2, r7, r1
 801437c:	7812      	ldrb	r2, [r2, #0]
 801437e:	429a      	cmp	r2, r3
 8014380:	d105      	bne.n	801438e <Display_Protect_Interface+0x3e>
	{
		count++;
 8014382:	4b9e      	ldr	r3, [pc, #632]	; (80145fc <Display_Protect_Interface+0x2ac>)
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	3301      	adds	r3, #1
 8014388:	b2da      	uxtb	r2, r3
 801438a:	4b9c      	ldr	r3, [pc, #624]	; (80145fc <Display_Protect_Interface+0x2ac>)
 801438c:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 801438e:	210f      	movs	r1, #15
 8014390:	187a      	adds	r2, r7, r1
 8014392:	187b      	adds	r3, r7, r1
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	18db      	adds	r3, r3, r3
 8014398:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 801439a:	1dfb      	adds	r3, r7, #7
 801439c:	187a      	adds	r2, r7, r1
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	7812      	ldrb	r2, [r2, #0]
 80143a2:	4013      	ands	r3, r2
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	187a      	adds	r2, r7, r1
 80143a8:	7812      	ldrb	r2, [r2, #0]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d105      	bne.n	80143ba <Display_Protect_Interface+0x6a>
	{
		count++;
 80143ae:	4b93      	ldr	r3, [pc, #588]	; (80145fc <Display_Protect_Interface+0x2ac>)
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	3301      	adds	r3, #1
 80143b4:	b2da      	uxtb	r2, r3
 80143b6:	4b91      	ldr	r3, [pc, #580]	; (80145fc <Display_Protect_Interface+0x2ac>)
 80143b8:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 80143ba:	210f      	movs	r1, #15
 80143bc:	187a      	adds	r2, r7, r1
 80143be:	187b      	adds	r3, r7, r1
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	18db      	adds	r3, r3, r3
 80143c4:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 80143c6:	1dfb      	adds	r3, r7, #7
 80143c8:	187a      	adds	r2, r7, r1
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	7812      	ldrb	r2, [r2, #0]
 80143ce:	4013      	ands	r3, r2
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	187a      	adds	r2, r7, r1
 80143d4:	7812      	ldrb	r2, [r2, #0]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d105      	bne.n	80143e6 <Display_Protect_Interface+0x96>
	{
		count++;
 80143da:	4b88      	ldr	r3, [pc, #544]	; (80145fc <Display_Protect_Interface+0x2ac>)
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	3301      	adds	r3, #1
 80143e0:	b2da      	uxtb	r2, r3
 80143e2:	4b86      	ldr	r3, [pc, #536]	; (80145fc <Display_Protect_Interface+0x2ac>)
 80143e4:	701a      	strb	r2, [r3, #0]
	}
	mask=0x01;
 80143e6:	230f      	movs	r3, #15
 80143e8:	18fb      	adds	r3, r7, r3
 80143ea:	2201      	movs	r2, #1
 80143ec:	701a      	strb	r2, [r3, #0]

	switch(count)
 80143ee:	4b83      	ldr	r3, [pc, #524]	; (80145fc <Display_Protect_Interface+0x2ac>)
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	2b03      	cmp	r3, #3
 80143f4:	d100      	bne.n	80143f8 <Display_Protect_Interface+0xa8>
 80143f6:	e0db      	b.n	80145b0 <Display_Protect_Interface+0x260>
 80143f8:	dd00      	ble.n	80143fc <Display_Protect_Interface+0xac>
 80143fa:	e0fb      	b.n	80145f4 <Display_Protect_Interface+0x2a4>
 80143fc:	2b02      	cmp	r3, #2
 80143fe:	d100      	bne.n	8014402 <Display_Protect_Interface+0xb2>
 8014400:	e07e      	b.n	8014500 <Display_Protect_Interface+0x1b0>
 8014402:	dd00      	ble.n	8014406 <Display_Protect_Interface+0xb6>
 8014404:	e0f6      	b.n	80145f4 <Display_Protect_Interface+0x2a4>
 8014406:	2b00      	cmp	r3, #0
 8014408:	d002      	beq.n	8014410 <Display_Protect_Interface+0xc0>
 801440a:	2b01      	cmp	r3, #1
 801440c:	d00b      	beq.n	8014426 <Display_Protect_Interface+0xd6>

	}



}
 801440e:	e0f1      	b.n	80145f4 <Display_Protect_Interface+0x2a4>
			Clear_Screen();
 8014410:	f7fe fb5e 	bl	8012ad0 <Clear_Screen>
			xyz.coordinates1=0;
 8014414:	4b7a      	ldr	r3, [pc, #488]	; (8014600 <Display_Protect_Interface+0x2b0>)
 8014416:	2200      	movs	r2, #0
 8014418:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 801441a:	4b79      	ldr	r3, [pc, #484]	; (8014600 <Display_Protect_Interface+0x2b0>)
 801441c:	2200      	movs	r2, #0
 801441e:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 8014420:	4b77      	ldr	r3, [pc, #476]	; (8014600 <Display_Protect_Interface+0x2b0>)
 8014422:	2200      	movs	r2, #0
 8014424:	609a      	str	r2, [r3, #8]
			if((Error&0x01)==0x01)
 8014426:	1dfb      	adds	r3, r7, #7
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	2201      	movs	r2, #1
 801442c:	4013      	ands	r3, r2
 801442e:	d01e      	beq.n	801446e <Display_Protect_Interface+0x11e>
				Write_String_16x32AsicII(16,4,"   ");
 8014430:	4b74      	ldr	r3, [pc, #464]	; (8014604 <Display_Protect_Interface+0x2b4>)
 8014432:	001a      	movs	r2, r3
 8014434:	2104      	movs	r1, #4
 8014436:	2010      	movs	r0, #16
 8014438:	f7fe fc66 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 801443c:	4b72      	ldr	r3, [pc, #456]	; (8014608 <Display_Protect_Interface+0x2b8>)
 801443e:	001a      	movs	r2, r3
 8014440:	2112      	movs	r1, #18
 8014442:	2010      	movs	r0, #16
 8014444:	f7fe fc60 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OVP");
 8014448:	4b70      	ldr	r3, [pc, #448]	; (801460c <Display_Protect_Interface+0x2bc>)
 801444a:	001a      	movs	r2, r3
 801444c:	211a      	movs	r1, #26
 801444e:	2010      	movs	r0, #16
 8014450:	f7fe fc5a 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 8014454:	4b6c      	ldr	r3, [pc, #432]	; (8014608 <Display_Protect_Interface+0x2b8>)
 8014456:	001a      	movs	r2, r3
 8014458:	2126      	movs	r1, #38	; 0x26
 801445a:	2010      	movs	r0, #16
 801445c:	f7fe fc54 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 8014460:	4b6b      	ldr	r3, [pc, #428]	; (8014610 <Display_Protect_Interface+0x2c0>)
 8014462:	001a      	movs	r2, r3
 8014464:	212c      	movs	r1, #44	; 0x2c
 8014466:	2010      	movs	r0, #16
 8014468:	f7fe fc4e 	bl	8012d08 <Write_String_16x32AsicII>
			break;
 801446c:	e0bf      	b.n	80145ee <Display_Protect_Interface+0x29e>
			else if((Error&0x02)==0x02)
 801446e:	1dfb      	adds	r3, r7, #7
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	2202      	movs	r2, #2
 8014474:	4013      	ands	r3, r2
 8014476:	d01e      	beq.n	80144b6 <Display_Protect_Interface+0x166>
				Write_String_16x32AsicII(16,4,"   ");
 8014478:	4b62      	ldr	r3, [pc, #392]	; (8014604 <Display_Protect_Interface+0x2b4>)
 801447a:	001a      	movs	r2, r3
 801447c:	2104      	movs	r1, #4
 801447e:	2010      	movs	r0, #16
 8014480:	f7fe fc42 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 8014484:	4b60      	ldr	r3, [pc, #384]	; (8014608 <Display_Protect_Interface+0x2b8>)
 8014486:	001a      	movs	r2, r3
 8014488:	2112      	movs	r1, #18
 801448a:	2010      	movs	r0, #16
 801448c:	f7fe fc3c 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OCP");
 8014490:	4b60      	ldr	r3, [pc, #384]	; (8014614 <Display_Protect_Interface+0x2c4>)
 8014492:	001a      	movs	r2, r3
 8014494:	211a      	movs	r1, #26
 8014496:	2010      	movs	r0, #16
 8014498:	f7fe fc36 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 801449c:	4b5a      	ldr	r3, [pc, #360]	; (8014608 <Display_Protect_Interface+0x2b8>)
 801449e:	001a      	movs	r2, r3
 80144a0:	2126      	movs	r1, #38	; 0x26
 80144a2:	2010      	movs	r0, #16
 80144a4:	f7fe fc30 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 80144a8:	4b59      	ldr	r3, [pc, #356]	; (8014610 <Display_Protect_Interface+0x2c0>)
 80144aa:	001a      	movs	r2, r3
 80144ac:	212c      	movs	r1, #44	; 0x2c
 80144ae:	2010      	movs	r0, #16
 80144b0:	f7fe fc2a 	bl	8012d08 <Write_String_16x32AsicII>
			break;
 80144b4:	e09b      	b.n	80145ee <Display_Protect_Interface+0x29e>
			else if((Error&0x04)==0x04)
 80144b6:	1dfb      	adds	r3, r7, #7
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	2204      	movs	r2, #4
 80144bc:	4013      	ands	r3, r2
 80144be:	d100      	bne.n	80144c2 <Display_Protect_Interface+0x172>
 80144c0:	e095      	b.n	80145ee <Display_Protect_Interface+0x29e>
				Write_String_16x32AsicII(16,4,"   ");
 80144c2:	4b50      	ldr	r3, [pc, #320]	; (8014604 <Display_Protect_Interface+0x2b4>)
 80144c4:	001a      	movs	r2, r3
 80144c6:	2104      	movs	r1, #4
 80144c8:	2010      	movs	r0, #16
 80144ca:	f7fe fc1d 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 80144ce:	4b4e      	ldr	r3, [pc, #312]	; (8014608 <Display_Protect_Interface+0x2b8>)
 80144d0:	001a      	movs	r2, r3
 80144d2:	2112      	movs	r1, #18
 80144d4:	2010      	movs	r0, #16
 80144d6:	f7fe fc17 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OTP");
 80144da:	4b4f      	ldr	r3, [pc, #316]	; (8014618 <Display_Protect_Interface+0x2c8>)
 80144dc:	001a      	movs	r2, r3
 80144de:	211a      	movs	r1, #26
 80144e0:	2010      	movs	r0, #16
 80144e2:	f7fe fc11 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 80144e6:	4b48      	ldr	r3, [pc, #288]	; (8014608 <Display_Protect_Interface+0x2b8>)
 80144e8:	001a      	movs	r2, r3
 80144ea:	2126      	movs	r1, #38	; 0x26
 80144ec:	2010      	movs	r0, #16
 80144ee:	f7fe fc0b 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 80144f2:	4b47      	ldr	r3, [pc, #284]	; (8014610 <Display_Protect_Interface+0x2c0>)
 80144f4:	001a      	movs	r2, r3
 80144f6:	212c      	movs	r1, #44	; 0x2c
 80144f8:	2010      	movs	r0, #16
 80144fa:	f7fe fc05 	bl	8012d08 <Write_String_16x32AsicII>
			break;
 80144fe:	e076      	b.n	80145ee <Display_Protect_Interface+0x29e>
			if((Error&0x02)==0x02 && (Error&0x04)==0x04)
 8014500:	1dfb      	adds	r3, r7, #7
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	2202      	movs	r2, #2
 8014506:	4013      	ands	r3, r2
 8014508:	d017      	beq.n	801453a <Display_Protect_Interface+0x1ea>
 801450a:	1dfb      	adds	r3, r7, #7
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	2204      	movs	r2, #4
 8014510:	4013      	ands	r3, r2
 8014512:	d012      	beq.n	801453a <Display_Protect_Interface+0x1ea>
				Write_String_16x32AsicII(16,18,"OCP");
 8014514:	4b3f      	ldr	r3, [pc, #252]	; (8014614 <Display_Protect_Interface+0x2c4>)
 8014516:	001a      	movs	r2, r3
 8014518:	2112      	movs	r1, #18
 801451a:	2010      	movs	r0, #16
 801451c:	f7fe fbf4 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8014520:	4b3e      	ldr	r3, [pc, #248]	; (801461c <Display_Protect_Interface+0x2cc>)
 8014522:	001a      	movs	r2, r3
 8014524:	211e      	movs	r1, #30
 8014526:	2010      	movs	r0, #16
 8014528:	f7fe fbee 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 801452c:	4b3a      	ldr	r3, [pc, #232]	; (8014618 <Display_Protect_Interface+0x2c8>)
 801452e:	001a      	movs	r2, r3
 8014530:	2122      	movs	r1, #34	; 0x22
 8014532:	2010      	movs	r0, #16
 8014534:	f7fe fbe8 	bl	8012d08 <Write_String_16x32AsicII>
 8014538:	e039      	b.n	80145ae <Display_Protect_Interface+0x25e>
			else if((Error&0x01)==0x01 && (Error&0x04)==0x04)
 801453a:	1dfb      	adds	r3, r7, #7
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	2201      	movs	r2, #1
 8014540:	4013      	ands	r3, r2
 8014542:	d017      	beq.n	8014574 <Display_Protect_Interface+0x224>
 8014544:	1dfb      	adds	r3, r7, #7
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	2204      	movs	r2, #4
 801454a:	4013      	ands	r3, r2
 801454c:	d012      	beq.n	8014574 <Display_Protect_Interface+0x224>
				Write_String_16x32AsicII(16,18,"OVP");
 801454e:	4b2f      	ldr	r3, [pc, #188]	; (801460c <Display_Protect_Interface+0x2bc>)
 8014550:	001a      	movs	r2, r3
 8014552:	2112      	movs	r1, #18
 8014554:	2010      	movs	r0, #16
 8014556:	f7fe fbd7 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 801455a:	4b30      	ldr	r3, [pc, #192]	; (801461c <Display_Protect_Interface+0x2cc>)
 801455c:	001a      	movs	r2, r3
 801455e:	211e      	movs	r1, #30
 8014560:	2010      	movs	r0, #16
 8014562:	f7fe fbd1 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 8014566:	4b2c      	ldr	r3, [pc, #176]	; (8014618 <Display_Protect_Interface+0x2c8>)
 8014568:	001a      	movs	r2, r3
 801456a:	2122      	movs	r1, #34	; 0x22
 801456c:	2010      	movs	r0, #16
 801456e:	f7fe fbcb 	bl	8012d08 <Write_String_16x32AsicII>
 8014572:	e01c      	b.n	80145ae <Display_Protect_Interface+0x25e>
			else if((Error&0x02)==0x02 && (Error&0x01)==0x01)
 8014574:	1dfb      	adds	r3, r7, #7
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	2202      	movs	r2, #2
 801457a:	4013      	ands	r3, r2
 801457c:	d039      	beq.n	80145f2 <Display_Protect_Interface+0x2a2>
 801457e:	1dfb      	adds	r3, r7, #7
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	2201      	movs	r2, #1
 8014584:	4013      	ands	r3, r2
 8014586:	d034      	beq.n	80145f2 <Display_Protect_Interface+0x2a2>
				Write_String_16x32AsicII(16,18,"OVP");
 8014588:	4b20      	ldr	r3, [pc, #128]	; (801460c <Display_Protect_Interface+0x2bc>)
 801458a:	001a      	movs	r2, r3
 801458c:	2112      	movs	r1, #18
 801458e:	2010      	movs	r0, #16
 8014590:	f7fe fbba 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8014594:	4b21      	ldr	r3, [pc, #132]	; (801461c <Display_Protect_Interface+0x2cc>)
 8014596:	001a      	movs	r2, r3
 8014598:	211e      	movs	r1, #30
 801459a:	2010      	movs	r0, #16
 801459c:	f7fe fbb4 	bl	8012d08 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OCP");
 80145a0:	4b1c      	ldr	r3, [pc, #112]	; (8014614 <Display_Protect_Interface+0x2c4>)
 80145a2:	001a      	movs	r2, r3
 80145a4:	2122      	movs	r1, #34	; 0x22
 80145a6:	2010      	movs	r0, #16
 80145a8:	f7fe fbae 	bl	8012d08 <Write_String_16x32AsicII>
			break;
 80145ac:	e021      	b.n	80145f2 <Display_Protect_Interface+0x2a2>
 80145ae:	e020      	b.n	80145f2 <Display_Protect_Interface+0x2a2>
			Write_String_16x32AsicII(16,18," ");
 80145b0:	4b1a      	ldr	r3, [pc, #104]	; (801461c <Display_Protect_Interface+0x2cc>)
 80145b2:	001a      	movs	r2, r3
 80145b4:	2112      	movs	r1, #18
 80145b6:	2010      	movs	r0, #16
 80145b8:	f7fe fba6 	bl	8012d08 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,4,"OVP");
 80145bc:	4b13      	ldr	r3, [pc, #76]	; (801460c <Display_Protect_Interface+0x2bc>)
 80145be:	001a      	movs	r2, r3
 80145c0:	2104      	movs	r1, #4
 80145c2:	2010      	movs	r0, #16
 80145c4:	f7fe fba0 	bl	8012d08 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,24,"OCP");
 80145c8:	4b12      	ldr	r3, [pc, #72]	; (8014614 <Display_Protect_Interface+0x2c4>)
 80145ca:	001a      	movs	r2, r3
 80145cc:	2118      	movs	r1, #24
 80145ce:	2010      	movs	r0, #16
 80145d0:	f7fe fb9a 	bl	8012d08 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,44,"OTP");
 80145d4:	4b10      	ldr	r3, [pc, #64]	; (8014618 <Display_Protect_Interface+0x2c8>)
 80145d6:	001a      	movs	r2, r3
 80145d8:	212c      	movs	r1, #44	; 0x2c
 80145da:	2010      	movs	r0, #16
 80145dc:	f7fe fb94 	bl	8012d08 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,36," ");
 80145e0:	4b0e      	ldr	r3, [pc, #56]	; (801461c <Display_Protect_Interface+0x2cc>)
 80145e2:	001a      	movs	r2, r3
 80145e4:	2124      	movs	r1, #36	; 0x24
 80145e6:	2010      	movs	r0, #16
 80145e8:	f7fe fb8e 	bl	8012d08 <Write_String_16x32AsicII>
			break;
 80145ec:	e002      	b.n	80145f4 <Display_Protect_Interface+0x2a4>
			break;
 80145ee:	46c0      	nop			; (mov r8, r8)
 80145f0:	e000      	b.n	80145f4 <Display_Protect_Interface+0x2a4>
			break;
 80145f2:	46c0      	nop			; (mov r8, r8)
}
 80145f4:	46c0      	nop			; (mov r8, r8)
 80145f6:	46bd      	mov	sp, r7
 80145f8:	b004      	add	sp, #16
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	20003c21 	.word	0x20003c21
 8014600:	20003b8c 	.word	0x20003b8c
 8014604:	080189a0 	.word	0x080189a0
 8014608:	080187bc 	.word	0x080187bc
 801460c:	080189a4 	.word	0x080189a4
 8014610:	080189a8 	.word	0x080189a8
 8014614:	080189b0 	.word	0x080189b0
 8014618:	080189b4 	.word	0x080189b4
 801461c:	080189b8 	.word	0x080189b8

08014620 <Cursor_flash>:

}


void Cursor_flash(void)
{
 8014620:	b590      	push	{r4, r7, lr}
 8014622:	4c5e      	ldr	r4, [pc, #376]	; (801479c <Cursor_flash+0x17c>)
 8014624:	44a5      	add	sp, r4
 8014626:	af00      	add	r7, sp, #0
	static int count;
	uint8_t clear_arry[16*64*2]={0x00};
 8014628:	4b5d      	ldr	r3, [pc, #372]	; (80147a0 <Cursor_flash+0x180>)
 801462a:	4a5e      	ldr	r2, [pc, #376]	; (80147a4 <Cursor_flash+0x184>)
 801462c:	189b      	adds	r3, r3, r2
 801462e:	19db      	adds	r3, r3, r7
 8014630:	2200      	movs	r2, #0
 8014632:	601a      	str	r2, [r3, #0]
 8014634:	3304      	adds	r3, #4
 8014636:	4a5c      	ldr	r2, [pc, #368]	; (80147a8 <Cursor_flash+0x188>)
 8014638:	2100      	movs	r1, #0
 801463a:	0018      	movs	r0, r3
 801463c:	f000 fa11 	bl	8014a62 <memset>
	count++;
 8014640:	4b5a      	ldr	r3, [pc, #360]	; (80147ac <Cursor_flash+0x18c>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	1c5a      	adds	r2, r3, #1
 8014646:	4b59      	ldr	r3, [pc, #356]	; (80147ac <Cursor_flash+0x18c>)
 8014648:	601a      	str	r2, [r3, #0]
	if(count==2)
 801464a:	4b58      	ldr	r3, [pc, #352]	; (80147ac <Cursor_flash+0x18c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b02      	cmp	r3, #2
 8014650:	d16a      	bne.n	8014728 <Cursor_flash+0x108>
	{
		count=0;
 8014652:	4b56      	ldr	r3, [pc, #344]	; (80147ac <Cursor_flash+0x18c>)
 8014654:	2200      	movs	r2, #0
 8014656:	601a      	str	r2, [r3, #0]

		SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);
 8014658:	20a0      	movs	r0, #160	; 0xa0
 801465a:	f7fd fbf5 	bl	8011e48 <SPI_OLED_SendCommond>
		SPI_OLED_SendData(0x14);
 801465e:	2014      	movs	r0, #20
 8014660:	f7fd fbba 	bl	8011dd8 <SPI_OLED_SendData>
		SPI_OLED_SendData(0x11);
 8014664:	2011      	movs	r0, #17
 8014666:	f7fd fbb7 	bl	8011dd8 <SPI_OLED_SendData>

		Set_Column_Address(Cursor_Position*4, Cursor_Position*4+1);
 801466a:	4b51      	ldr	r3, [pc, #324]	; (80147b0 <Cursor_flash+0x190>)
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	b2da      	uxtb	r2, r3
 8014672:	4b4f      	ldr	r3, [pc, #316]	; (80147b0 <Cursor_flash+0x190>)
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	b2db      	uxtb	r3, r3
 801467a:	3301      	adds	r3, #1
 801467c:	b2db      	uxtb	r3, r3
 801467e:	0019      	movs	r1, r3
 8014680:	0010      	movs	r0, r2
 8014682:	f7fe f9a5 	bl	80129d0 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 8014686:	210f      	movs	r1, #15
 8014688:	2000      	movs	r0, #0
 801468a:	f7fe f9bf 	bl	8012a0c <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 801468e:	205c      	movs	r0, #92	; 0x5c
 8014690:	f7fd fbda 	bl	8011e48 <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 8014694:	4b47      	ldr	r3, [pc, #284]	; (80147b4 <Cursor_flash+0x194>)
 8014696:	18fb      	adds	r3, r7, r3
 8014698:	2200      	movs	r2, #0
 801469a:	701a      	strb	r2, [r3, #0]
 801469c:	e00e      	b.n	80146bc <Cursor_flash+0x9c>
		{
			Font_1Bit_To_4Bit(Pointleft[i]);
 801469e:	4c45      	ldr	r4, [pc, #276]	; (80147b4 <Cursor_flash+0x194>)
 80146a0:	193b      	adds	r3, r7, r4
 80146a2:	781a      	ldrb	r2, [r3, #0]
 80146a4:	4b44      	ldr	r3, [pc, #272]	; (80147b8 <Cursor_flash+0x198>)
 80146a6:	0052      	lsls	r2, r2, #1
 80146a8:	5ad3      	ldrh	r3, [r2, r3]
 80146aa:	b2db      	uxtb	r3, r3
 80146ac:	0018      	movs	r0, r3
 80146ae:	f7fd fcdf 	bl	8012070 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 80146b2:	193b      	adds	r3, r7, r4
 80146b4:	781a      	ldrb	r2, [r3, #0]
 80146b6:	193b      	adds	r3, r7, r4
 80146b8:	3201      	adds	r2, #1
 80146ba:	701a      	strb	r2, [r3, #0]
 80146bc:	4b3d      	ldr	r3, [pc, #244]	; (80147b4 <Cursor_flash+0x194>)
 80146be:	18fb      	adds	r3, r7, r3
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	2b0f      	cmp	r3, #15
 80146c4:	d9eb      	bls.n	801469e <Cursor_flash+0x7e>
		}
		Set_Column_Address(Cursor_Position*4+2, Cursor_Position*4+3);
 80146c6:	4b3a      	ldr	r3, [pc, #232]	; (80147b0 <Cursor_flash+0x190>)
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	b2db      	uxtb	r3, r3
 80146ce:	3302      	adds	r3, #2
 80146d0:	b2da      	uxtb	r2, r3
 80146d2:	4b37      	ldr	r3, [pc, #220]	; (80147b0 <Cursor_flash+0x190>)
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	009b      	lsls	r3, r3, #2
 80146d8:	b2db      	uxtb	r3, r3
 80146da:	3303      	adds	r3, #3
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	0019      	movs	r1, r3
 80146e0:	0010      	movs	r0, r2
 80146e2:	f7fe f975 	bl	80129d0 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 80146e6:	210f      	movs	r1, #15
 80146e8:	2000      	movs	r0, #0
 80146ea:	f7fe f98f 	bl	8012a0c <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 80146ee:	205c      	movs	r0, #92	; 0x5c
 80146f0:	f7fd fbaa 	bl	8011e48 <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 80146f4:	4b31      	ldr	r3, [pc, #196]	; (80147bc <Cursor_flash+0x19c>)
 80146f6:	18fb      	adds	r3, r7, r3
 80146f8:	2200      	movs	r2, #0
 80146fa:	701a      	strb	r2, [r3, #0]
 80146fc:	e00e      	b.n	801471c <Cursor_flash+0xfc>
		{
			Font_1Bit_To_4Bit(Pointright[i]);
 80146fe:	4c2f      	ldr	r4, [pc, #188]	; (80147bc <Cursor_flash+0x19c>)
 8014700:	193b      	adds	r3, r7, r4
 8014702:	781a      	ldrb	r2, [r3, #0]
 8014704:	4b2e      	ldr	r3, [pc, #184]	; (80147c0 <Cursor_flash+0x1a0>)
 8014706:	0052      	lsls	r2, r2, #1
 8014708:	5ad3      	ldrh	r3, [r2, r3]
 801470a:	b2db      	uxtb	r3, r3
 801470c:	0018      	movs	r0, r3
 801470e:	f7fd fcaf 	bl	8012070 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 8014712:	193b      	adds	r3, r7, r4
 8014714:	781a      	ldrb	r2, [r3, #0]
 8014716:	193b      	adds	r3, r7, r4
 8014718:	3201      	adds	r2, #1
 801471a:	701a      	strb	r2, [r3, #0]
 801471c:	4b27      	ldr	r3, [pc, #156]	; (80147bc <Cursor_flash+0x19c>)
 801471e:	18fb      	adds	r3, r7, r3
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	2b0f      	cmp	r3, #15
 8014724:	d9eb      	bls.n	80146fe <Cursor_flash+0xde>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断

	}


}
 8014726:	e033      	b.n	8014790 <Cursor_flash+0x170>
		Set_Column_Address(0x00,0x3f);//0到63列
 8014728:	213f      	movs	r1, #63	; 0x3f
 801472a:	2000      	movs	r0, #0
 801472c:	f7fe f950 	bl	80129d0 <Set_Column_Address>
		Set_Row_Address(0x00,15);   //0到15行
 8014730:	210f      	movs	r1, #15
 8014732:	2000      	movs	r0, #0
 8014734:	f7fe f96a 	bl	8012a0c <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 8014738:	205c      	movs	r0, #92	; 0x5c
 801473a:	f7fd fb85 	bl	8011e48 <SPI_OLED_SendCommond>
		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 801473e:	4b21      	ldr	r3, [pc, #132]	; (80147c4 <Cursor_flash+0x1a4>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	68da      	ldr	r2, [r3, #12]
 8014744:	4b1f      	ldr	r3, [pc, #124]	; (80147c4 <Cursor_flash+0x1a4>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2101      	movs	r1, #1
 801474a:	438a      	bics	r2, r1
 801474c:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 801474e:	4b1e      	ldr	r3, [pc, #120]	; (80147c8 <Cursor_flash+0x1a8>)
 8014750:	2201      	movs	r2, #1
 8014752:	2102      	movs	r1, #2
 8014754:	0018      	movs	r0, r3
 8014756:	f7f2 fc90 	bl	800707a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 801475a:	4b1b      	ldr	r3, [pc, #108]	; (80147c8 <Cursor_flash+0x1a8>)
 801475c:	2200      	movs	r2, #0
 801475e:	2101      	movs	r1, #1
 8014760:	0018      	movs	r0, r3
 8014762:	f7f2 fc8a 	bl	800707a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,clear_arry,32*64,100);
 8014766:	2380      	movs	r3, #128	; 0x80
 8014768:	011a      	lsls	r2, r3, #4
 801476a:	1d39      	adds	r1, r7, #4
 801476c:	4817      	ldr	r0, [pc, #92]	; (80147cc <Cursor_flash+0x1ac>)
 801476e:	2364      	movs	r3, #100	; 0x64
 8014770:	f7f3 fb92 	bl	8007e98 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8014774:	4b14      	ldr	r3, [pc, #80]	; (80147c8 <Cursor_flash+0x1a8>)
 8014776:	2201      	movs	r2, #1
 8014778:	2101      	movs	r1, #1
 801477a:	0018      	movs	r0, r3
 801477c:	f7f2 fc7d 	bl	800707a <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8014780:	4b10      	ldr	r3, [pc, #64]	; (80147c4 <Cursor_flash+0x1a4>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	68da      	ldr	r2, [r3, #12]
 8014786:	4b0f      	ldr	r3, [pc, #60]	; (80147c4 <Cursor_flash+0x1a4>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	2101      	movs	r1, #1
 801478c:	430a      	orrs	r2, r1
 801478e:	60da      	str	r2, [r3, #12]
}
 8014790:	46c0      	nop			; (mov r8, r8)
 8014792:	46bd      	mov	sp, r7
 8014794:	4b0e      	ldr	r3, [pc, #56]	; (80147d0 <Cursor_flash+0x1b0>)
 8014796:	449d      	add	sp, r3
 8014798:	bd90      	pop	{r4, r7, pc}
 801479a:	46c0      	nop			; (mov r8, r8)
 801479c:	fffff7f4 	.word	0xfffff7f4
 80147a0:	fffff7fc 	.word	0xfffff7fc
 80147a4:	00000808 	.word	0x00000808
 80147a8:	000007fc 	.word	0x000007fc
 80147ac:	20003c24 	.word	0x20003c24
 80147b0:	20003b22 	.word	0x20003b22
 80147b4:	00000807 	.word	0x00000807
 80147b8:	20000600 	.word	0x20000600
 80147bc:	00000806 	.word	0x00000806
 80147c0:	20000620 	.word	0x20000620
 80147c4:	2000347c 	.word	0x2000347c
 80147c8:	50000800 	.word	0x50000800
 80147cc:	200033c8 	.word	0x200033c8
 80147d0:	0000080c 	.word	0x0000080c

080147d4 <Cursor_flash_off>:

void Cursor_flash_off(void)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<64;i++)
 80147da:	1dfb      	adds	r3, r7, #7
 80147dc:	2200      	movs	r2, #0
 80147de:	701a      	strb	r2, [r3, #0]
 80147e0:	e00b      	b.n	80147fa <Cursor_flash_off+0x26>
	{

		Write_Single_8x16AsicII(0,i,' ');
 80147e2:	1dfb      	adds	r3, r7, #7
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	2220      	movs	r2, #32
 80147e8:	0019      	movs	r1, r3
 80147ea:	2000      	movs	r0, #0
 80147ec:	f7fe f9c6 	bl	8012b7c <Write_Single_8x16AsicII>
	for(uint8_t i=0;i<64;i++)
 80147f0:	1dfb      	adds	r3, r7, #7
 80147f2:	781a      	ldrb	r2, [r3, #0]
 80147f4:	1dfb      	adds	r3, r7, #7
 80147f6:	3201      	adds	r2, #1
 80147f8:	701a      	strb	r2, [r3, #0]
 80147fa:	1dfb      	adds	r3, r7, #7
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	2b3f      	cmp	r3, #63	; 0x3f
 8014800:	d9ef      	bls.n	80147e2 <Cursor_flash_off+0xe>

	}
	__HAL_TIM_DISABLE(&htim6);//cusor flash off
 8014802:	4b0c      	ldr	r3, [pc, #48]	; (8014834 <Cursor_flash_off+0x60>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	6a1b      	ldr	r3, [r3, #32]
 8014808:	4a0b      	ldr	r2, [pc, #44]	; (8014838 <Cursor_flash_off+0x64>)
 801480a:	4013      	ands	r3, r2
 801480c:	d10d      	bne.n	801482a <Cursor_flash_off+0x56>
 801480e:	4b09      	ldr	r3, [pc, #36]	; (8014834 <Cursor_flash_off+0x60>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	6a1b      	ldr	r3, [r3, #32]
 8014814:	4a09      	ldr	r2, [pc, #36]	; (801483c <Cursor_flash_off+0x68>)
 8014816:	4013      	ands	r3, r2
 8014818:	d107      	bne.n	801482a <Cursor_flash_off+0x56>
 801481a:	4b06      	ldr	r3, [pc, #24]	; (8014834 <Cursor_flash_off+0x60>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	681a      	ldr	r2, [r3, #0]
 8014820:	4b04      	ldr	r3, [pc, #16]	; (8014834 <Cursor_flash_off+0x60>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	2101      	movs	r1, #1
 8014826:	438a      	bics	r2, r1
 8014828:	601a      	str	r2, [r3, #0]

}
 801482a:	46c0      	nop			; (mov r8, r8)
 801482c:	46bd      	mov	sp, r7
 801482e:	b002      	add	sp, #8
 8014830:	bd80      	pop	{r7, pc}
 8014832:	46c0      	nop			; (mov r8, r8)
 8014834:	200034c8 	.word	0x200034c8
 8014838:	00001111 	.word	0x00001111
 801483c:	00000444 	.word	0x00000444

08014840 <Cursor_flash_on>:

void Cursor_flash_on(void)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE(&htim6);//开启闪烁
 8014844:	4b05      	ldr	r3, [pc, #20]	; (801485c <Cursor_flash_on+0x1c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	4b04      	ldr	r3, [pc, #16]	; (801485c <Cursor_flash_on+0x1c>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2101      	movs	r1, #1
 8014850:	430a      	orrs	r2, r1
 8014852:	601a      	str	r2, [r3, #0]
}
 8014854:	46c0      	nop			; (mov r8, r8)
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}
 801485a:	46c0      	nop			; (mov r8, r8)
 801485c:	200034c8 	.word	0x200034c8

08014860 <Display_Interface>:
  * @brief  综合各个界面的显示函数
  * @param  需要显示的界面
  * @retval None
  */
void Display_Interface(void)
{
 8014860:	b5b0      	push	{r4, r5, r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af04      	add	r7, sp, #16
	if(Sleep_ON_OFF!=0xff)
 8014866:	4b54      	ldr	r3, [pc, #336]	; (80149b8 <Display_Interface+0x158>)
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	2bff      	cmp	r3, #255	; 0xff
 801486c:	d002      	beq.n	8014874 <Display_Interface+0x14>
	{
		Clear_Screen();
 801486e:	f7fe f92f 	bl	8012ad0 <Clear_Screen>
		return;
 8014872:	e09f      	b.n	80149b4 <Display_Interface+0x154>
	}
	if(Last_Interface.coordinates1!=xyz.coordinates1
 8014874:	4b51      	ldr	r3, [pc, #324]	; (80149bc <Display_Interface+0x15c>)
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	4b51      	ldr	r3, [pc, #324]	; (80149c0 <Display_Interface+0x160>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	429a      	cmp	r2, r3
 801487e:	d10b      	bne.n	8014898 <Display_Interface+0x38>
	   ||Last_Interface.coordinates2!=xyz.coordinates2
 8014880:	4b4e      	ldr	r3, [pc, #312]	; (80149bc <Display_Interface+0x15c>)
 8014882:	685a      	ldr	r2, [r3, #4]
 8014884:	4b4e      	ldr	r3, [pc, #312]	; (80149c0 <Display_Interface+0x160>)
 8014886:	685b      	ldr	r3, [r3, #4]
 8014888:	429a      	cmp	r2, r3
 801488a:	d105      	bne.n	8014898 <Display_Interface+0x38>
	   ||Last_Interface.coordinates3!=xyz.coordinates3)
 801488c:	4b4b      	ldr	r3, [pc, #300]	; (80149bc <Display_Interface+0x15c>)
 801488e:	689a      	ldr	r2, [r3, #8]
 8014890:	4b4b      	ldr	r3, [pc, #300]	; (80149c0 <Display_Interface+0x160>)
 8014892:	689b      	ldr	r3, [r3, #8]
 8014894:	429a      	cmp	r2, r3
 8014896:	d001      	beq.n	801489c <Display_Interface+0x3c>
	{
		Clear_Screen();
 8014898:	f7fe f91a 	bl	8012ad0 <Clear_Screen>

	}
	/*main interface*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 801489c:	4b48      	ldr	r3, [pc, #288]	; (80149c0 <Display_Interface+0x160>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d11b      	bne.n	80148dc <Display_Interface+0x7c>
 80148a4:	4b46      	ldr	r3, [pc, #280]	; (80149c0 <Display_Interface+0x160>)
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d117      	bne.n	80148dc <Display_Interface+0x7c>
 80148ac:	4b44      	ldr	r3, [pc, #272]	; (80149c0 <Display_Interface+0x160>)
 80148ae:	689b      	ldr	r3, [r3, #8]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d113      	bne.n	80148dc <Display_Interface+0x7c>
	{
		Display_Main_Interface(Voltage_real,Current_real,ON_OFF,CV_CC_CP,Actual,LOCK_UNLOCK,Shift_Not_Shift);
 80148b4:	4b43      	ldr	r3, [pc, #268]	; (80149c4 <Display_Interface+0x164>)
 80148b6:	6818      	ldr	r0, [r3, #0]
 80148b8:	4b43      	ldr	r3, [pc, #268]	; (80149c8 <Display_Interface+0x168>)
 80148ba:	6819      	ldr	r1, [r3, #0]
 80148bc:	4b43      	ldr	r3, [pc, #268]	; (80149cc <Display_Interface+0x16c>)
 80148be:	781c      	ldrb	r4, [r3, #0]
 80148c0:	4b43      	ldr	r3, [pc, #268]	; (80149d0 <Display_Interface+0x170>)
 80148c2:	781d      	ldrb	r5, [r3, #0]
 80148c4:	4b43      	ldr	r3, [pc, #268]	; (80149d4 <Display_Interface+0x174>)
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	4a43      	ldr	r2, [pc, #268]	; (80149d8 <Display_Interface+0x178>)
 80148ca:	7812      	ldrb	r2, [r2, #0]
 80148cc:	9202      	str	r2, [sp, #8]
 80148ce:	9301      	str	r3, [sp, #4]
 80148d0:	2300      	movs	r3, #0
 80148d2:	9300      	str	r3, [sp, #0]
 80148d4:	002b      	movs	r3, r5
 80148d6:	0022      	movs	r2, r4
 80148d8:	f7fe ffa4 	bl	8013824 <Display_Main_Interface>
	}
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates3==0))
 80148dc:	4b38      	ldr	r3, [pc, #224]	; (80149c0 <Display_Interface+0x160>)
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	2b01      	cmp	r3, #1
 80148e2:	d108      	bne.n	80148f6 <Display_Interface+0x96>
 80148e4:	4b36      	ldr	r3, [pc, #216]	; (80149c0 <Display_Interface+0x160>)
 80148e6:	689b      	ldr	r3, [r3, #8]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d104      	bne.n	80148f6 <Display_Interface+0x96>
	{
		Display_Menu_Function_Interface_First_Menu(xyz.coordinates2);
 80148ec:	4b34      	ldr	r3, [pc, #208]	; (80149c0 <Display_Interface+0x160>)
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	0018      	movs	r0, r3
 80148f2:	f7ff f9c1 	bl	8013c78 <Display_Menu_Function_Interface_First_Menu>
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 80148f6:	4b32      	ldr	r3, [pc, #200]	; (80149c0 <Display_Interface+0x160>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b01      	cmp	r3, #1
 80148fc:	d10f      	bne.n	801491e <Display_Interface+0xbe>
 80148fe:	4b30      	ldr	r3, [pc, #192]	; (80149c0 <Display_Interface+0x160>)
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00b      	beq.n	801491e <Display_Interface+0xbe>
 8014906:	4b2e      	ldr	r3, [pc, #184]	; (80149c0 <Display_Interface+0x160>)
 8014908:	689b      	ldr	r3, [r3, #8]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d007      	beq.n	801491e <Display_Interface+0xbe>
	{
		Display_Menu_Function_Interface_Second_Menu(xyz.coordinates2,xyz.coordinates3);
 801490e:	4b2c      	ldr	r3, [pc, #176]	; (80149c0 <Display_Interface+0x160>)
 8014910:	685a      	ldr	r2, [r3, #4]
 8014912:	4b2b      	ldr	r3, [pc, #172]	; (80149c0 <Display_Interface+0x160>)
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	0019      	movs	r1, r3
 8014918:	0010      	movs	r0, r2
 801491a:	f7ff fcd9 	bl	80142d0 <Display_Menu_Function_Interface_Second_Menu>
	}
	/*V_set I_set*/
	if(xyz.coordinates1==2)
 801491e:	4b28      	ldr	r3, [pc, #160]	; (80149c0 <Display_Interface+0x160>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	2b02      	cmp	r3, #2
 8014924:	d10c      	bne.n	8014940 <Display_Interface+0xe0>
	{
		if(xyz.coordinates2==1 ) 	 Display_Main_Interface_I_set();
 8014926:	4b26      	ldr	r3, [pc, #152]	; (80149c0 <Display_Interface+0x160>)
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	2b01      	cmp	r3, #1
 801492c:	d102      	bne.n	8014934 <Display_Interface+0xd4>
 801492e:	f7fe fe35 	bl	801359c <Display_Main_Interface_I_set>
 8014932:	e005      	b.n	8014940 <Display_Interface+0xe0>
		else if(xyz.coordinates2==2) Display_Main_Interface_V_set();
 8014934:	4b22      	ldr	r3, [pc, #136]	; (80149c0 <Display_Interface+0x160>)
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	2b02      	cmp	r3, #2
 801493a:	d101      	bne.n	8014940 <Display_Interface+0xe0>
 801493c:	f7fe fce4 	bl	8013308 <Display_Main_Interface_V_set>
	}
	/*Reacll Save*/
	if(xyz.coordinates1==3)
 8014940:	4b1f      	ldr	r3, [pc, #124]	; (80149c0 <Display_Interface+0x160>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2b03      	cmp	r3, #3
 8014946:	d114      	bne.n	8014972 <Display_Interface+0x112>
		if(xyz.coordinates3==0)
		{
			//Display_Access_Interface_default(Recall_Save,Recall_Save_Number);
		}
		//save
		if( (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 8014948:	4b1d      	ldr	r3, [pc, #116]	; (80149c0 <Display_Interface+0x160>)
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	2b01      	cmp	r3, #1
 801494e:	d106      	bne.n	801495e <Display_Interface+0xfe>
 8014950:	4b1b      	ldr	r3, [pc, #108]	; (80149c0 <Display_Interface+0x160>)
 8014952:	689b      	ldr	r3, [r3, #8]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d002      	beq.n	801495e <Display_Interface+0xfe>
		{
			Display_Access_Interface_Save();
 8014958:	f7ff f8de 	bl	8013b18 <Display_Access_Interface_Save>
 801495c:	e009      	b.n	8014972 <Display_Interface+0x112>
		}
		//recall
		else if( (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 801495e:	4b18      	ldr	r3, [pc, #96]	; (80149c0 <Display_Interface+0x160>)
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	2b02      	cmp	r3, #2
 8014964:	d105      	bne.n	8014972 <Display_Interface+0x112>
 8014966:	4b16      	ldr	r3, [pc, #88]	; (80149c0 <Display_Interface+0x160>)
 8014968:	689b      	ldr	r3, [r3, #8]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d001      	beq.n	8014972 <Display_Interface+0x112>
		{
			Display_Access_Interface_Recall();
 801496e:	f7ff f919 	bl	8013ba4 <Display_Access_Interface_Recall>
		}

	}
	/*Protect*/
	if(xyz.coordinates1==4)
 8014972:	4b13      	ldr	r3, [pc, #76]	; (80149c0 <Display_Interface+0x160>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	2b04      	cmp	r3, #4
 8014978:	d104      	bne.n	8014984 <Display_Interface+0x124>
	{
		Display_Protect_Interface(Error);
 801497a:	4b18      	ldr	r3, [pc, #96]	; (80149dc <Display_Interface+0x17c>)
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	0018      	movs	r0, r3
 8014980:	f7ff fce6 	bl	8014350 <Display_Protect_Interface>
	}
	/*advance interface*/
	if((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 8014984:	4b0e      	ldr	r3, [pc, #56]	; (80149c0 <Display_Interface+0x160>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b09      	cmp	r3, #9
 801498a:	d10f      	bne.n	80149ac <Display_Interface+0x14c>
 801498c:	4b0c      	ldr	r3, [pc, #48]	; (80149c0 <Display_Interface+0x160>)
 801498e:	685b      	ldr	r3, [r3, #4]
 8014990:	2b09      	cmp	r3, #9
 8014992:	d10b      	bne.n	80149ac <Display_Interface+0x14c>
 8014994:	4b0a      	ldr	r3, [pc, #40]	; (80149c0 <Display_Interface+0x160>)
 8014996:	689b      	ldr	r3, [r3, #8]
 8014998:	2b09      	cmp	r3, #9
 801499a:	d107      	bne.n	80149ac <Display_Interface+0x14c>
	{
		Display_Param_Interface(Set_Voltage,Set_Current);
 801499c:	4b10      	ldr	r3, [pc, #64]	; (80149e0 <Display_Interface+0x180>)
 801499e:	881a      	ldrh	r2, [r3, #0]
 80149a0:	4b10      	ldr	r3, [pc, #64]	; (80149e4 <Display_Interface+0x184>)
 80149a2:	881b      	ldrh	r3, [r3, #0]
 80149a4:	0019      	movs	r1, r3
 80149a6:	0010      	movs	r0, r2
 80149a8:	f7fe ff7a 	bl	80138a0 <Display_Param_Interface>
	}

	Last_Interface=xyz;//记录退出前界面
 80149ac:	4b03      	ldr	r3, [pc, #12]	; (80149bc <Display_Interface+0x15c>)
 80149ae:	4a04      	ldr	r2, [pc, #16]	; (80149c0 <Display_Interface+0x160>)
 80149b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80149b2:	c313      	stmia	r3!, {r0, r1, r4}

}
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bdb0      	pop	{r4, r5, r7, pc}
 80149b8:	20002fd1 	.word	0x20002fd1
 80149bc:	20003b98 	.word	0x20003b98
 80149c0:	20003b8c 	.word	0x20003b8c
 80149c4:	20003b84 	.word	0x20003b84
 80149c8:	20003b88 	.word	0x20003b88
 80149cc:	20003b1c 	.word	0x20003b1c
 80149d0:	20003b1e 	.word	0x20003b1e
 80149d4:	20003b1f 	.word	0x20003b1f
 80149d8:	20003b1b 	.word	0x20003b1b
 80149dc:	20003b6d 	.word	0x20003b6d
 80149e0:	20002fd8 	.word	0x20002fd8
 80149e4:	20002fda 	.word	0x20002fda

080149e8 <__errno>:
 80149e8:	4b01      	ldr	r3, [pc, #4]	; (80149f0 <__errno+0x8>)
 80149ea:	6818      	ldr	r0, [r3, #0]
 80149ec:	4770      	bx	lr
 80149ee:	46c0      	nop			; (mov r8, r8)
 80149f0:	200030d8 	.word	0x200030d8

080149f4 <__libc_init_array>:
 80149f4:	b570      	push	{r4, r5, r6, lr}
 80149f6:	2600      	movs	r6, #0
 80149f8:	4d0c      	ldr	r5, [pc, #48]	; (8014a2c <__libc_init_array+0x38>)
 80149fa:	4c0d      	ldr	r4, [pc, #52]	; (8014a30 <__libc_init_array+0x3c>)
 80149fc:	1b64      	subs	r4, r4, r5
 80149fe:	10a4      	asrs	r4, r4, #2
 8014a00:	42a6      	cmp	r6, r4
 8014a02:	d109      	bne.n	8014a18 <__libc_init_array+0x24>
 8014a04:	2600      	movs	r6, #0
 8014a06:	f003 fe99 	bl	801873c <_init>
 8014a0a:	4d0a      	ldr	r5, [pc, #40]	; (8014a34 <__libc_init_array+0x40>)
 8014a0c:	4c0a      	ldr	r4, [pc, #40]	; (8014a38 <__libc_init_array+0x44>)
 8014a0e:	1b64      	subs	r4, r4, r5
 8014a10:	10a4      	asrs	r4, r4, #2
 8014a12:	42a6      	cmp	r6, r4
 8014a14:	d105      	bne.n	8014a22 <__libc_init_array+0x2e>
 8014a16:	bd70      	pop	{r4, r5, r6, pc}
 8014a18:	00b3      	lsls	r3, r6, #2
 8014a1a:	58eb      	ldr	r3, [r5, r3]
 8014a1c:	4798      	blx	r3
 8014a1e:	3601      	adds	r6, #1
 8014a20:	e7ee      	b.n	8014a00 <__libc_init_array+0xc>
 8014a22:	00b3      	lsls	r3, r6, #2
 8014a24:	58eb      	ldr	r3, [r5, r3]
 8014a26:	4798      	blx	r3
 8014a28:	3601      	adds	r6, #1
 8014a2a:	e7f2      	b.n	8014a12 <__libc_init_array+0x1e>
 8014a2c:	08019250 	.word	0x08019250
 8014a30:	08019250 	.word	0x08019250
 8014a34:	08019250 	.word	0x08019250
 8014a38:	08019254 	.word	0x08019254

08014a3c <malloc>:
 8014a3c:	b510      	push	{r4, lr}
 8014a3e:	4b03      	ldr	r3, [pc, #12]	; (8014a4c <malloc+0x10>)
 8014a40:	0001      	movs	r1, r0
 8014a42:	6818      	ldr	r0, [r3, #0]
 8014a44:	f000 f882 	bl	8014b4c <_malloc_r>
 8014a48:	bd10      	pop	{r4, pc}
 8014a4a:	46c0      	nop			; (mov r8, r8)
 8014a4c:	200030d8 	.word	0x200030d8

08014a50 <memcpy>:
 8014a50:	2300      	movs	r3, #0
 8014a52:	b510      	push	{r4, lr}
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d100      	bne.n	8014a5a <memcpy+0xa>
 8014a58:	bd10      	pop	{r4, pc}
 8014a5a:	5ccc      	ldrb	r4, [r1, r3]
 8014a5c:	54c4      	strb	r4, [r0, r3]
 8014a5e:	3301      	adds	r3, #1
 8014a60:	e7f8      	b.n	8014a54 <memcpy+0x4>

08014a62 <memset>:
 8014a62:	0003      	movs	r3, r0
 8014a64:	1882      	adds	r2, r0, r2
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d100      	bne.n	8014a6c <memset+0xa>
 8014a6a:	4770      	bx	lr
 8014a6c:	7019      	strb	r1, [r3, #0]
 8014a6e:	3301      	adds	r3, #1
 8014a70:	e7f9      	b.n	8014a66 <memset+0x4>
	...

08014a74 <_free_r>:
 8014a74:	b570      	push	{r4, r5, r6, lr}
 8014a76:	0005      	movs	r5, r0
 8014a78:	2900      	cmp	r1, #0
 8014a7a:	d010      	beq.n	8014a9e <_free_r+0x2a>
 8014a7c:	1f0c      	subs	r4, r1, #4
 8014a7e:	6823      	ldr	r3, [r4, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	da00      	bge.n	8014a86 <_free_r+0x12>
 8014a84:	18e4      	adds	r4, r4, r3
 8014a86:	0028      	movs	r0, r5
 8014a88:	f001 fc2c 	bl	80162e4 <__malloc_lock>
 8014a8c:	4a1d      	ldr	r2, [pc, #116]	; (8014b04 <_free_r+0x90>)
 8014a8e:	6813      	ldr	r3, [r2, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d105      	bne.n	8014aa0 <_free_r+0x2c>
 8014a94:	6063      	str	r3, [r4, #4]
 8014a96:	6014      	str	r4, [r2, #0]
 8014a98:	0028      	movs	r0, r5
 8014a9a:	f001 fc2b 	bl	80162f4 <__malloc_unlock>
 8014a9e:	bd70      	pop	{r4, r5, r6, pc}
 8014aa0:	42a3      	cmp	r3, r4
 8014aa2:	d908      	bls.n	8014ab6 <_free_r+0x42>
 8014aa4:	6821      	ldr	r1, [r4, #0]
 8014aa6:	1860      	adds	r0, r4, r1
 8014aa8:	4283      	cmp	r3, r0
 8014aaa:	d1f3      	bne.n	8014a94 <_free_r+0x20>
 8014aac:	6818      	ldr	r0, [r3, #0]
 8014aae:	685b      	ldr	r3, [r3, #4]
 8014ab0:	1841      	adds	r1, r0, r1
 8014ab2:	6021      	str	r1, [r4, #0]
 8014ab4:	e7ee      	b.n	8014a94 <_free_r+0x20>
 8014ab6:	001a      	movs	r2, r3
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d001      	beq.n	8014ac2 <_free_r+0x4e>
 8014abe:	42a3      	cmp	r3, r4
 8014ac0:	d9f9      	bls.n	8014ab6 <_free_r+0x42>
 8014ac2:	6811      	ldr	r1, [r2, #0]
 8014ac4:	1850      	adds	r0, r2, r1
 8014ac6:	42a0      	cmp	r0, r4
 8014ac8:	d10b      	bne.n	8014ae2 <_free_r+0x6e>
 8014aca:	6820      	ldr	r0, [r4, #0]
 8014acc:	1809      	adds	r1, r1, r0
 8014ace:	1850      	adds	r0, r2, r1
 8014ad0:	6011      	str	r1, [r2, #0]
 8014ad2:	4283      	cmp	r3, r0
 8014ad4:	d1e0      	bne.n	8014a98 <_free_r+0x24>
 8014ad6:	6818      	ldr	r0, [r3, #0]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	1841      	adds	r1, r0, r1
 8014adc:	6011      	str	r1, [r2, #0]
 8014ade:	6053      	str	r3, [r2, #4]
 8014ae0:	e7da      	b.n	8014a98 <_free_r+0x24>
 8014ae2:	42a0      	cmp	r0, r4
 8014ae4:	d902      	bls.n	8014aec <_free_r+0x78>
 8014ae6:	230c      	movs	r3, #12
 8014ae8:	602b      	str	r3, [r5, #0]
 8014aea:	e7d5      	b.n	8014a98 <_free_r+0x24>
 8014aec:	6821      	ldr	r1, [r4, #0]
 8014aee:	1860      	adds	r0, r4, r1
 8014af0:	4283      	cmp	r3, r0
 8014af2:	d103      	bne.n	8014afc <_free_r+0x88>
 8014af4:	6818      	ldr	r0, [r3, #0]
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	1841      	adds	r1, r0, r1
 8014afa:	6021      	str	r1, [r4, #0]
 8014afc:	6063      	str	r3, [r4, #4]
 8014afe:	6054      	str	r4, [r2, #4]
 8014b00:	e7ca      	b.n	8014a98 <_free_r+0x24>
 8014b02:	46c0      	nop			; (mov r8, r8)
 8014b04:	20003c28 	.word	0x20003c28

08014b08 <sbrk_aligned>:
 8014b08:	b570      	push	{r4, r5, r6, lr}
 8014b0a:	4e0f      	ldr	r6, [pc, #60]	; (8014b48 <sbrk_aligned+0x40>)
 8014b0c:	000d      	movs	r5, r1
 8014b0e:	6831      	ldr	r1, [r6, #0]
 8014b10:	0004      	movs	r4, r0
 8014b12:	2900      	cmp	r1, #0
 8014b14:	d102      	bne.n	8014b1c <sbrk_aligned+0x14>
 8014b16:	f000 fcfd 	bl	8015514 <_sbrk_r>
 8014b1a:	6030      	str	r0, [r6, #0]
 8014b1c:	0029      	movs	r1, r5
 8014b1e:	0020      	movs	r0, r4
 8014b20:	f000 fcf8 	bl	8015514 <_sbrk_r>
 8014b24:	1c43      	adds	r3, r0, #1
 8014b26:	d00a      	beq.n	8014b3e <sbrk_aligned+0x36>
 8014b28:	2303      	movs	r3, #3
 8014b2a:	1cc5      	adds	r5, r0, #3
 8014b2c:	439d      	bics	r5, r3
 8014b2e:	42a8      	cmp	r0, r5
 8014b30:	d007      	beq.n	8014b42 <sbrk_aligned+0x3a>
 8014b32:	1a29      	subs	r1, r5, r0
 8014b34:	0020      	movs	r0, r4
 8014b36:	f000 fced 	bl	8015514 <_sbrk_r>
 8014b3a:	1c43      	adds	r3, r0, #1
 8014b3c:	d101      	bne.n	8014b42 <sbrk_aligned+0x3a>
 8014b3e:	2501      	movs	r5, #1
 8014b40:	426d      	negs	r5, r5
 8014b42:	0028      	movs	r0, r5
 8014b44:	bd70      	pop	{r4, r5, r6, pc}
 8014b46:	46c0      	nop			; (mov r8, r8)
 8014b48:	20003c2c 	.word	0x20003c2c

08014b4c <_malloc_r>:
 8014b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b4e:	2203      	movs	r2, #3
 8014b50:	1ccb      	adds	r3, r1, #3
 8014b52:	4393      	bics	r3, r2
 8014b54:	3308      	adds	r3, #8
 8014b56:	0006      	movs	r6, r0
 8014b58:	001f      	movs	r7, r3
 8014b5a:	2b0c      	cmp	r3, #12
 8014b5c:	d232      	bcs.n	8014bc4 <_malloc_r+0x78>
 8014b5e:	270c      	movs	r7, #12
 8014b60:	42b9      	cmp	r1, r7
 8014b62:	d831      	bhi.n	8014bc8 <_malloc_r+0x7c>
 8014b64:	0030      	movs	r0, r6
 8014b66:	f001 fbbd 	bl	80162e4 <__malloc_lock>
 8014b6a:	4d32      	ldr	r5, [pc, #200]	; (8014c34 <_malloc_r+0xe8>)
 8014b6c:	682b      	ldr	r3, [r5, #0]
 8014b6e:	001c      	movs	r4, r3
 8014b70:	2c00      	cmp	r4, #0
 8014b72:	d12e      	bne.n	8014bd2 <_malloc_r+0x86>
 8014b74:	0039      	movs	r1, r7
 8014b76:	0030      	movs	r0, r6
 8014b78:	f7ff ffc6 	bl	8014b08 <sbrk_aligned>
 8014b7c:	0004      	movs	r4, r0
 8014b7e:	1c43      	adds	r3, r0, #1
 8014b80:	d11e      	bne.n	8014bc0 <_malloc_r+0x74>
 8014b82:	682c      	ldr	r4, [r5, #0]
 8014b84:	0025      	movs	r5, r4
 8014b86:	2d00      	cmp	r5, #0
 8014b88:	d14a      	bne.n	8014c20 <_malloc_r+0xd4>
 8014b8a:	6823      	ldr	r3, [r4, #0]
 8014b8c:	0029      	movs	r1, r5
 8014b8e:	18e3      	adds	r3, r4, r3
 8014b90:	0030      	movs	r0, r6
 8014b92:	9301      	str	r3, [sp, #4]
 8014b94:	f000 fcbe 	bl	8015514 <_sbrk_r>
 8014b98:	9b01      	ldr	r3, [sp, #4]
 8014b9a:	4283      	cmp	r3, r0
 8014b9c:	d143      	bne.n	8014c26 <_malloc_r+0xda>
 8014b9e:	6823      	ldr	r3, [r4, #0]
 8014ba0:	3703      	adds	r7, #3
 8014ba2:	1aff      	subs	r7, r7, r3
 8014ba4:	2303      	movs	r3, #3
 8014ba6:	439f      	bics	r7, r3
 8014ba8:	3708      	adds	r7, #8
 8014baa:	2f0c      	cmp	r7, #12
 8014bac:	d200      	bcs.n	8014bb0 <_malloc_r+0x64>
 8014bae:	270c      	movs	r7, #12
 8014bb0:	0039      	movs	r1, r7
 8014bb2:	0030      	movs	r0, r6
 8014bb4:	f7ff ffa8 	bl	8014b08 <sbrk_aligned>
 8014bb8:	1c43      	adds	r3, r0, #1
 8014bba:	d034      	beq.n	8014c26 <_malloc_r+0xda>
 8014bbc:	6823      	ldr	r3, [r4, #0]
 8014bbe:	19df      	adds	r7, r3, r7
 8014bc0:	6027      	str	r7, [r4, #0]
 8014bc2:	e013      	b.n	8014bec <_malloc_r+0xa0>
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	dacb      	bge.n	8014b60 <_malloc_r+0x14>
 8014bc8:	230c      	movs	r3, #12
 8014bca:	2500      	movs	r5, #0
 8014bcc:	6033      	str	r3, [r6, #0]
 8014bce:	0028      	movs	r0, r5
 8014bd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014bd2:	6822      	ldr	r2, [r4, #0]
 8014bd4:	1bd1      	subs	r1, r2, r7
 8014bd6:	d420      	bmi.n	8014c1a <_malloc_r+0xce>
 8014bd8:	290b      	cmp	r1, #11
 8014bda:	d917      	bls.n	8014c0c <_malloc_r+0xc0>
 8014bdc:	19e2      	adds	r2, r4, r7
 8014bde:	6027      	str	r7, [r4, #0]
 8014be0:	42a3      	cmp	r3, r4
 8014be2:	d111      	bne.n	8014c08 <_malloc_r+0xbc>
 8014be4:	602a      	str	r2, [r5, #0]
 8014be6:	6863      	ldr	r3, [r4, #4]
 8014be8:	6011      	str	r1, [r2, #0]
 8014bea:	6053      	str	r3, [r2, #4]
 8014bec:	0030      	movs	r0, r6
 8014bee:	0025      	movs	r5, r4
 8014bf0:	f001 fb80 	bl	80162f4 <__malloc_unlock>
 8014bf4:	2207      	movs	r2, #7
 8014bf6:	350b      	adds	r5, #11
 8014bf8:	1d23      	adds	r3, r4, #4
 8014bfa:	4395      	bics	r5, r2
 8014bfc:	1aea      	subs	r2, r5, r3
 8014bfe:	429d      	cmp	r5, r3
 8014c00:	d0e5      	beq.n	8014bce <_malloc_r+0x82>
 8014c02:	1b5b      	subs	r3, r3, r5
 8014c04:	50a3      	str	r3, [r4, r2]
 8014c06:	e7e2      	b.n	8014bce <_malloc_r+0x82>
 8014c08:	605a      	str	r2, [r3, #4]
 8014c0a:	e7ec      	b.n	8014be6 <_malloc_r+0x9a>
 8014c0c:	6862      	ldr	r2, [r4, #4]
 8014c0e:	42a3      	cmp	r3, r4
 8014c10:	d101      	bne.n	8014c16 <_malloc_r+0xca>
 8014c12:	602a      	str	r2, [r5, #0]
 8014c14:	e7ea      	b.n	8014bec <_malloc_r+0xa0>
 8014c16:	605a      	str	r2, [r3, #4]
 8014c18:	e7e8      	b.n	8014bec <_malloc_r+0xa0>
 8014c1a:	0023      	movs	r3, r4
 8014c1c:	6864      	ldr	r4, [r4, #4]
 8014c1e:	e7a7      	b.n	8014b70 <_malloc_r+0x24>
 8014c20:	002c      	movs	r4, r5
 8014c22:	686d      	ldr	r5, [r5, #4]
 8014c24:	e7af      	b.n	8014b86 <_malloc_r+0x3a>
 8014c26:	230c      	movs	r3, #12
 8014c28:	0030      	movs	r0, r6
 8014c2a:	6033      	str	r3, [r6, #0]
 8014c2c:	f001 fb62 	bl	80162f4 <__malloc_unlock>
 8014c30:	e7cd      	b.n	8014bce <_malloc_r+0x82>
 8014c32:	46c0      	nop			; (mov r8, r8)
 8014c34:	20003c28 	.word	0x20003c28

08014c38 <__cvt>:
 8014c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c3a:	001e      	movs	r6, r3
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	0014      	movs	r4, r2
 8014c40:	b08b      	sub	sp, #44	; 0x2c
 8014c42:	429e      	cmp	r6, r3
 8014c44:	da04      	bge.n	8014c50 <__cvt+0x18>
 8014c46:	2180      	movs	r1, #128	; 0x80
 8014c48:	0609      	lsls	r1, r1, #24
 8014c4a:	1873      	adds	r3, r6, r1
 8014c4c:	001e      	movs	r6, r3
 8014c4e:	232d      	movs	r3, #45	; 0x2d
 8014c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014c54:	7013      	strb	r3, [r2, #0]
 8014c56:	2320      	movs	r3, #32
 8014c58:	2203      	movs	r2, #3
 8014c5a:	439f      	bics	r7, r3
 8014c5c:	2f46      	cmp	r7, #70	; 0x46
 8014c5e:	d007      	beq.n	8014c70 <__cvt+0x38>
 8014c60:	003b      	movs	r3, r7
 8014c62:	3b45      	subs	r3, #69	; 0x45
 8014c64:	4259      	negs	r1, r3
 8014c66:	414b      	adcs	r3, r1
 8014c68:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014c6a:	3a01      	subs	r2, #1
 8014c6c:	18cb      	adds	r3, r1, r3
 8014c6e:	9310      	str	r3, [sp, #64]	; 0x40
 8014c70:	ab09      	add	r3, sp, #36	; 0x24
 8014c72:	9304      	str	r3, [sp, #16]
 8014c74:	ab08      	add	r3, sp, #32
 8014c76:	9303      	str	r3, [sp, #12]
 8014c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c7a:	9200      	str	r2, [sp, #0]
 8014c7c:	9302      	str	r3, [sp, #8]
 8014c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c80:	0022      	movs	r2, r4
 8014c82:	9301      	str	r3, [sp, #4]
 8014c84:	0033      	movs	r3, r6
 8014c86:	f000 fd03 	bl	8015690 <_dtoa_r>
 8014c8a:	0005      	movs	r5, r0
 8014c8c:	2f47      	cmp	r7, #71	; 0x47
 8014c8e:	d102      	bne.n	8014c96 <__cvt+0x5e>
 8014c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c92:	07db      	lsls	r3, r3, #31
 8014c94:	d528      	bpl.n	8014ce8 <__cvt+0xb0>
 8014c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c98:	18eb      	adds	r3, r5, r3
 8014c9a:	9307      	str	r3, [sp, #28]
 8014c9c:	2f46      	cmp	r7, #70	; 0x46
 8014c9e:	d114      	bne.n	8014cca <__cvt+0x92>
 8014ca0:	782b      	ldrb	r3, [r5, #0]
 8014ca2:	2b30      	cmp	r3, #48	; 0x30
 8014ca4:	d10c      	bne.n	8014cc0 <__cvt+0x88>
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	2300      	movs	r3, #0
 8014caa:	0020      	movs	r0, r4
 8014cac:	0031      	movs	r1, r6
 8014cae:	f7eb fbd3 	bl	8000458 <__aeabi_dcmpeq>
 8014cb2:	2800      	cmp	r0, #0
 8014cb4:	d104      	bne.n	8014cc0 <__cvt+0x88>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014cba:	1a9b      	subs	r3, r3, r2
 8014cbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014cbe:	6013      	str	r3, [r2, #0]
 8014cc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cc2:	9a07      	ldr	r2, [sp, #28]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	18d3      	adds	r3, r2, r3
 8014cc8:	9307      	str	r3, [sp, #28]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	2300      	movs	r3, #0
 8014cce:	0020      	movs	r0, r4
 8014cd0:	0031      	movs	r1, r6
 8014cd2:	f7eb fbc1 	bl	8000458 <__aeabi_dcmpeq>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	d001      	beq.n	8014cde <__cvt+0xa6>
 8014cda:	9b07      	ldr	r3, [sp, #28]
 8014cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8014cde:	2230      	movs	r2, #48	; 0x30
 8014ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce2:	9907      	ldr	r1, [sp, #28]
 8014ce4:	428b      	cmp	r3, r1
 8014ce6:	d306      	bcc.n	8014cf6 <__cvt+0xbe>
 8014ce8:	0028      	movs	r0, r5
 8014cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cee:	1b5b      	subs	r3, r3, r5
 8014cf0:	6013      	str	r3, [r2, #0]
 8014cf2:	b00b      	add	sp, #44	; 0x2c
 8014cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cf6:	1c59      	adds	r1, r3, #1
 8014cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8014cfa:	701a      	strb	r2, [r3, #0]
 8014cfc:	e7f0      	b.n	8014ce0 <__cvt+0xa8>

08014cfe <__exponent>:
 8014cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d00:	1c83      	adds	r3, r0, #2
 8014d02:	b087      	sub	sp, #28
 8014d04:	9303      	str	r3, [sp, #12]
 8014d06:	0005      	movs	r5, r0
 8014d08:	000c      	movs	r4, r1
 8014d0a:	232b      	movs	r3, #43	; 0x2b
 8014d0c:	7002      	strb	r2, [r0, #0]
 8014d0e:	2900      	cmp	r1, #0
 8014d10:	da01      	bge.n	8014d16 <__exponent+0x18>
 8014d12:	424c      	negs	r4, r1
 8014d14:	3302      	adds	r3, #2
 8014d16:	706b      	strb	r3, [r5, #1]
 8014d18:	2c09      	cmp	r4, #9
 8014d1a:	dd31      	ble.n	8014d80 <__exponent+0x82>
 8014d1c:	270a      	movs	r7, #10
 8014d1e:	ab04      	add	r3, sp, #16
 8014d20:	1dde      	adds	r6, r3, #7
 8014d22:	0020      	movs	r0, r4
 8014d24:	0039      	movs	r1, r7
 8014d26:	9601      	str	r6, [sp, #4]
 8014d28:	f7eb fb80 	bl	800042c <__aeabi_idivmod>
 8014d2c:	3e01      	subs	r6, #1
 8014d2e:	3130      	adds	r1, #48	; 0x30
 8014d30:	0020      	movs	r0, r4
 8014d32:	7031      	strb	r1, [r6, #0]
 8014d34:	0039      	movs	r1, r7
 8014d36:	9402      	str	r4, [sp, #8]
 8014d38:	f7eb fa92 	bl	8000260 <__divsi3>
 8014d3c:	9b02      	ldr	r3, [sp, #8]
 8014d3e:	0004      	movs	r4, r0
 8014d40:	2b63      	cmp	r3, #99	; 0x63
 8014d42:	dcee      	bgt.n	8014d22 <__exponent+0x24>
 8014d44:	9b01      	ldr	r3, [sp, #4]
 8014d46:	3430      	adds	r4, #48	; 0x30
 8014d48:	1e9a      	subs	r2, r3, #2
 8014d4a:	0013      	movs	r3, r2
 8014d4c:	9903      	ldr	r1, [sp, #12]
 8014d4e:	7014      	strb	r4, [r2, #0]
 8014d50:	a804      	add	r0, sp, #16
 8014d52:	3007      	adds	r0, #7
 8014d54:	4298      	cmp	r0, r3
 8014d56:	d80e      	bhi.n	8014d76 <__exponent+0x78>
 8014d58:	ab04      	add	r3, sp, #16
 8014d5a:	3307      	adds	r3, #7
 8014d5c:	2000      	movs	r0, #0
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d804      	bhi.n	8014d6c <__exponent+0x6e>
 8014d62:	ab04      	add	r3, sp, #16
 8014d64:	3009      	adds	r0, #9
 8014d66:	18c0      	adds	r0, r0, r3
 8014d68:	9b01      	ldr	r3, [sp, #4]
 8014d6a:	1ac0      	subs	r0, r0, r3
 8014d6c:	9b03      	ldr	r3, [sp, #12]
 8014d6e:	1818      	adds	r0, r3, r0
 8014d70:	1b40      	subs	r0, r0, r5
 8014d72:	b007      	add	sp, #28
 8014d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d76:	7818      	ldrb	r0, [r3, #0]
 8014d78:	3301      	adds	r3, #1
 8014d7a:	7008      	strb	r0, [r1, #0]
 8014d7c:	3101      	adds	r1, #1
 8014d7e:	e7e7      	b.n	8014d50 <__exponent+0x52>
 8014d80:	2330      	movs	r3, #48	; 0x30
 8014d82:	18e4      	adds	r4, r4, r3
 8014d84:	70ab      	strb	r3, [r5, #2]
 8014d86:	1d28      	adds	r0, r5, #4
 8014d88:	70ec      	strb	r4, [r5, #3]
 8014d8a:	e7f1      	b.n	8014d70 <__exponent+0x72>

08014d8c <_printf_float>:
 8014d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d8e:	b095      	sub	sp, #84	; 0x54
 8014d90:	000c      	movs	r4, r1
 8014d92:	9209      	str	r2, [sp, #36]	; 0x24
 8014d94:	001e      	movs	r6, r3
 8014d96:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014d98:	0007      	movs	r7, r0
 8014d9a:	f001 fa93 	bl	80162c4 <_localeconv_r>
 8014d9e:	6803      	ldr	r3, [r0, #0]
 8014da0:	0018      	movs	r0, r3
 8014da2:	930c      	str	r3, [sp, #48]	; 0x30
 8014da4:	f7eb f9b6 	bl	8000114 <strlen>
 8014da8:	2300      	movs	r3, #0
 8014daa:	9312      	str	r3, [sp, #72]	; 0x48
 8014dac:	7e23      	ldrb	r3, [r4, #24]
 8014dae:	2207      	movs	r2, #7
 8014db0:	930a      	str	r3, [sp, #40]	; 0x28
 8014db2:	6823      	ldr	r3, [r4, #0]
 8014db4:	900e      	str	r0, [sp, #56]	; 0x38
 8014db6:	930d      	str	r3, [sp, #52]	; 0x34
 8014db8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014dba:	682b      	ldr	r3, [r5, #0]
 8014dbc:	05c9      	lsls	r1, r1, #23
 8014dbe:	d547      	bpl.n	8014e50 <_printf_float+0xc4>
 8014dc0:	189b      	adds	r3, r3, r2
 8014dc2:	4393      	bics	r3, r2
 8014dc4:	001a      	movs	r2, r3
 8014dc6:	3208      	adds	r2, #8
 8014dc8:	602a      	str	r2, [r5, #0]
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	64a2      	str	r2, [r4, #72]	; 0x48
 8014dd0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014dd2:	2201      	movs	r2, #1
 8014dd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014dd6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8014dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8014dda:	006b      	lsls	r3, r5, #1
 8014ddc:	085b      	lsrs	r3, r3, #1
 8014dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8014de0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014de2:	4ba7      	ldr	r3, [pc, #668]	; (8015080 <_printf_float+0x2f4>)
 8014de4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014de6:	4252      	negs	r2, r2
 8014de8:	f7ed ffb8 	bl	8002d5c <__aeabi_dcmpun>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d131      	bne.n	8014e54 <_printf_float+0xc8>
 8014df0:	2201      	movs	r2, #1
 8014df2:	4ba3      	ldr	r3, [pc, #652]	; (8015080 <_printf_float+0x2f4>)
 8014df4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014df6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014df8:	4252      	negs	r2, r2
 8014dfa:	f7eb fb3d 	bl	8000478 <__aeabi_dcmple>
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d128      	bne.n	8014e54 <_printf_float+0xc8>
 8014e02:	2200      	movs	r2, #0
 8014e04:	2300      	movs	r3, #0
 8014e06:	0029      	movs	r1, r5
 8014e08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014e0a:	f7eb fb2b 	bl	8000464 <__aeabi_dcmplt>
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d003      	beq.n	8014e1a <_printf_float+0x8e>
 8014e12:	0023      	movs	r3, r4
 8014e14:	222d      	movs	r2, #45	; 0x2d
 8014e16:	3343      	adds	r3, #67	; 0x43
 8014e18:	701a      	strb	r2, [r3, #0]
 8014e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e1c:	4d99      	ldr	r5, [pc, #612]	; (8015084 <_printf_float+0x2f8>)
 8014e1e:	2b47      	cmp	r3, #71	; 0x47
 8014e20:	d900      	bls.n	8014e24 <_printf_float+0x98>
 8014e22:	4d99      	ldr	r5, [pc, #612]	; (8015088 <_printf_float+0x2fc>)
 8014e24:	2303      	movs	r3, #3
 8014e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e28:	6123      	str	r3, [r4, #16]
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	439a      	bics	r2, r3
 8014e2e:	2300      	movs	r3, #0
 8014e30:	6022      	str	r2, [r4, #0]
 8014e32:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e36:	0021      	movs	r1, r4
 8014e38:	0038      	movs	r0, r7
 8014e3a:	9600      	str	r6, [sp, #0]
 8014e3c:	aa13      	add	r2, sp, #76	; 0x4c
 8014e3e:	f000 f9e7 	bl	8015210 <_printf_common>
 8014e42:	1c43      	adds	r3, r0, #1
 8014e44:	d000      	beq.n	8014e48 <_printf_float+0xbc>
 8014e46:	e0a2      	b.n	8014f8e <_printf_float+0x202>
 8014e48:	2001      	movs	r0, #1
 8014e4a:	4240      	negs	r0, r0
 8014e4c:	b015      	add	sp, #84	; 0x54
 8014e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e50:	3307      	adds	r3, #7
 8014e52:	e7b6      	b.n	8014dc2 <_printf_float+0x36>
 8014e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e56:	002b      	movs	r3, r5
 8014e58:	0010      	movs	r0, r2
 8014e5a:	0029      	movs	r1, r5
 8014e5c:	f7ed ff7e 	bl	8002d5c <__aeabi_dcmpun>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	d00b      	beq.n	8014e7c <_printf_float+0xf0>
 8014e64:	2d00      	cmp	r5, #0
 8014e66:	da03      	bge.n	8014e70 <_printf_float+0xe4>
 8014e68:	0023      	movs	r3, r4
 8014e6a:	222d      	movs	r2, #45	; 0x2d
 8014e6c:	3343      	adds	r3, #67	; 0x43
 8014e6e:	701a      	strb	r2, [r3, #0]
 8014e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e72:	4d86      	ldr	r5, [pc, #536]	; (801508c <_printf_float+0x300>)
 8014e74:	2b47      	cmp	r3, #71	; 0x47
 8014e76:	d9d5      	bls.n	8014e24 <_printf_float+0x98>
 8014e78:	4d85      	ldr	r5, [pc, #532]	; (8015090 <_printf_float+0x304>)
 8014e7a:	e7d3      	b.n	8014e24 <_printf_float+0x98>
 8014e7c:	2220      	movs	r2, #32
 8014e7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014e80:	6863      	ldr	r3, [r4, #4]
 8014e82:	4391      	bics	r1, r2
 8014e84:	910f      	str	r1, [sp, #60]	; 0x3c
 8014e86:	1c5a      	adds	r2, r3, #1
 8014e88:	d149      	bne.n	8014f1e <_printf_float+0x192>
 8014e8a:	3307      	adds	r3, #7
 8014e8c:	6063      	str	r3, [r4, #4]
 8014e8e:	2380      	movs	r3, #128	; 0x80
 8014e90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e92:	00db      	lsls	r3, r3, #3
 8014e94:	4313      	orrs	r3, r2
 8014e96:	2200      	movs	r2, #0
 8014e98:	9206      	str	r2, [sp, #24]
 8014e9a:	aa12      	add	r2, sp, #72	; 0x48
 8014e9c:	9205      	str	r2, [sp, #20]
 8014e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ea0:	a908      	add	r1, sp, #32
 8014ea2:	9204      	str	r2, [sp, #16]
 8014ea4:	aa11      	add	r2, sp, #68	; 0x44
 8014ea6:	9203      	str	r2, [sp, #12]
 8014ea8:	2223      	movs	r2, #35	; 0x23
 8014eaa:	6023      	str	r3, [r4, #0]
 8014eac:	9301      	str	r3, [sp, #4]
 8014eae:	6863      	ldr	r3, [r4, #4]
 8014eb0:	1852      	adds	r2, r2, r1
 8014eb2:	9202      	str	r2, [sp, #8]
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	0038      	movs	r0, r7
 8014eb8:	002b      	movs	r3, r5
 8014eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ebc:	f7ff febc 	bl	8014c38 <__cvt>
 8014ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ec2:	0005      	movs	r5, r0
 8014ec4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014ec6:	2b47      	cmp	r3, #71	; 0x47
 8014ec8:	d108      	bne.n	8014edc <_printf_float+0x150>
 8014eca:	1ccb      	adds	r3, r1, #3
 8014ecc:	db02      	blt.n	8014ed4 <_printf_float+0x148>
 8014ece:	6863      	ldr	r3, [r4, #4]
 8014ed0:	4299      	cmp	r1, r3
 8014ed2:	dd48      	ble.n	8014f66 <_printf_float+0x1da>
 8014ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ed6:	3b02      	subs	r3, #2
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	930a      	str	r3, [sp, #40]	; 0x28
 8014edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ede:	2b65      	cmp	r3, #101	; 0x65
 8014ee0:	d824      	bhi.n	8014f2c <_printf_float+0x1a0>
 8014ee2:	0020      	movs	r0, r4
 8014ee4:	001a      	movs	r2, r3
 8014ee6:	3901      	subs	r1, #1
 8014ee8:	3050      	adds	r0, #80	; 0x50
 8014eea:	9111      	str	r1, [sp, #68]	; 0x44
 8014eec:	f7ff ff07 	bl	8014cfe <__exponent>
 8014ef0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ef2:	900b      	str	r0, [sp, #44]	; 0x2c
 8014ef4:	1813      	adds	r3, r2, r0
 8014ef6:	6123      	str	r3, [r4, #16]
 8014ef8:	2a01      	cmp	r2, #1
 8014efa:	dc02      	bgt.n	8014f02 <_printf_float+0x176>
 8014efc:	6822      	ldr	r2, [r4, #0]
 8014efe:	07d2      	lsls	r2, r2, #31
 8014f00:	d501      	bpl.n	8014f06 <_printf_float+0x17a>
 8014f02:	3301      	adds	r3, #1
 8014f04:	6123      	str	r3, [r4, #16]
 8014f06:	2323      	movs	r3, #35	; 0x23
 8014f08:	aa08      	add	r2, sp, #32
 8014f0a:	189b      	adds	r3, r3, r2
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d100      	bne.n	8014f14 <_printf_float+0x188>
 8014f12:	e78f      	b.n	8014e34 <_printf_float+0xa8>
 8014f14:	0023      	movs	r3, r4
 8014f16:	222d      	movs	r2, #45	; 0x2d
 8014f18:	3343      	adds	r3, #67	; 0x43
 8014f1a:	701a      	strb	r2, [r3, #0]
 8014f1c:	e78a      	b.n	8014e34 <_printf_float+0xa8>
 8014f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f20:	2a47      	cmp	r2, #71	; 0x47
 8014f22:	d1b4      	bne.n	8014e8e <_printf_float+0x102>
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d1b2      	bne.n	8014e8e <_printf_float+0x102>
 8014f28:	3301      	adds	r3, #1
 8014f2a:	e7af      	b.n	8014e8c <_printf_float+0x100>
 8014f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f2e:	2b66      	cmp	r3, #102	; 0x66
 8014f30:	d11b      	bne.n	8014f6a <_printf_float+0x1de>
 8014f32:	6863      	ldr	r3, [r4, #4]
 8014f34:	2900      	cmp	r1, #0
 8014f36:	dd0d      	ble.n	8014f54 <_printf_float+0x1c8>
 8014f38:	6121      	str	r1, [r4, #16]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d102      	bne.n	8014f44 <_printf_float+0x1b8>
 8014f3e:	6822      	ldr	r2, [r4, #0]
 8014f40:	07d2      	lsls	r2, r2, #31
 8014f42:	d502      	bpl.n	8014f4a <_printf_float+0x1be>
 8014f44:	3301      	adds	r3, #1
 8014f46:	1859      	adds	r1, r3, r1
 8014f48:	6121      	str	r1, [r4, #16]
 8014f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8014f4e:	2300      	movs	r3, #0
 8014f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f52:	e7d8      	b.n	8014f06 <_printf_float+0x17a>
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d103      	bne.n	8014f60 <_printf_float+0x1d4>
 8014f58:	2201      	movs	r2, #1
 8014f5a:	6821      	ldr	r1, [r4, #0]
 8014f5c:	4211      	tst	r1, r2
 8014f5e:	d000      	beq.n	8014f62 <_printf_float+0x1d6>
 8014f60:	1c9a      	adds	r2, r3, #2
 8014f62:	6122      	str	r2, [r4, #16]
 8014f64:	e7f1      	b.n	8014f4a <_printf_float+0x1be>
 8014f66:	2367      	movs	r3, #103	; 0x67
 8014f68:	930a      	str	r3, [sp, #40]	; 0x28
 8014f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	db06      	blt.n	8014f80 <_printf_float+0x1f4>
 8014f72:	6822      	ldr	r2, [r4, #0]
 8014f74:	6123      	str	r3, [r4, #16]
 8014f76:	07d2      	lsls	r2, r2, #31
 8014f78:	d5e7      	bpl.n	8014f4a <_printf_float+0x1be>
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	6123      	str	r3, [r4, #16]
 8014f7e:	e7e4      	b.n	8014f4a <_printf_float+0x1be>
 8014f80:	2101      	movs	r1, #1
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	dc01      	bgt.n	8014f8a <_printf_float+0x1fe>
 8014f86:	1849      	adds	r1, r1, r1
 8014f88:	1ac9      	subs	r1, r1, r3
 8014f8a:	1852      	adds	r2, r2, r1
 8014f8c:	e7e9      	b.n	8014f62 <_printf_float+0x1d6>
 8014f8e:	6822      	ldr	r2, [r4, #0]
 8014f90:	0553      	lsls	r3, r2, #21
 8014f92:	d407      	bmi.n	8014fa4 <_printf_float+0x218>
 8014f94:	6923      	ldr	r3, [r4, #16]
 8014f96:	002a      	movs	r2, r5
 8014f98:	0038      	movs	r0, r7
 8014f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f9c:	47b0      	blx	r6
 8014f9e:	1c43      	adds	r3, r0, #1
 8014fa0:	d128      	bne.n	8014ff4 <_printf_float+0x268>
 8014fa2:	e751      	b.n	8014e48 <_printf_float+0xbc>
 8014fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fa6:	2b65      	cmp	r3, #101	; 0x65
 8014fa8:	d800      	bhi.n	8014fac <_printf_float+0x220>
 8014faa:	e0e1      	b.n	8015170 <_printf_float+0x3e4>
 8014fac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014fae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	f7eb fa50 	bl	8000458 <__aeabi_dcmpeq>
 8014fb8:	2800      	cmp	r0, #0
 8014fba:	d031      	beq.n	8015020 <_printf_float+0x294>
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	0038      	movs	r0, r7
 8014fc0:	4a34      	ldr	r2, [pc, #208]	; (8015094 <_printf_float+0x308>)
 8014fc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fc4:	47b0      	blx	r6
 8014fc6:	1c43      	adds	r3, r0, #1
 8014fc8:	d100      	bne.n	8014fcc <_printf_float+0x240>
 8014fca:	e73d      	b.n	8014e48 <_printf_float+0xbc>
 8014fcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	db02      	blt.n	8014fda <_printf_float+0x24e>
 8014fd4:	6823      	ldr	r3, [r4, #0]
 8014fd6:	07db      	lsls	r3, r3, #31
 8014fd8:	d50c      	bpl.n	8014ff4 <_printf_float+0x268>
 8014fda:	0038      	movs	r0, r7
 8014fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fe2:	47b0      	blx	r6
 8014fe4:	2500      	movs	r5, #0
 8014fe6:	1c43      	adds	r3, r0, #1
 8014fe8:	d100      	bne.n	8014fec <_printf_float+0x260>
 8014fea:	e72d      	b.n	8014e48 <_printf_float+0xbc>
 8014fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	42ab      	cmp	r3, r5
 8014ff2:	dc0a      	bgt.n	801500a <_printf_float+0x27e>
 8014ff4:	6823      	ldr	r3, [r4, #0]
 8014ff6:	079b      	lsls	r3, r3, #30
 8014ff8:	d500      	bpl.n	8014ffc <_printf_float+0x270>
 8014ffa:	e106      	b.n	801520a <_printf_float+0x47e>
 8014ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ffe:	68e0      	ldr	r0, [r4, #12]
 8015000:	4298      	cmp	r0, r3
 8015002:	db00      	blt.n	8015006 <_printf_float+0x27a>
 8015004:	e722      	b.n	8014e4c <_printf_float+0xc0>
 8015006:	0018      	movs	r0, r3
 8015008:	e720      	b.n	8014e4c <_printf_float+0xc0>
 801500a:	0022      	movs	r2, r4
 801500c:	2301      	movs	r3, #1
 801500e:	0038      	movs	r0, r7
 8015010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015012:	321a      	adds	r2, #26
 8015014:	47b0      	blx	r6
 8015016:	1c43      	adds	r3, r0, #1
 8015018:	d100      	bne.n	801501c <_printf_float+0x290>
 801501a:	e715      	b.n	8014e48 <_printf_float+0xbc>
 801501c:	3501      	adds	r5, #1
 801501e:	e7e5      	b.n	8014fec <_printf_float+0x260>
 8015020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015022:	2b00      	cmp	r3, #0
 8015024:	dc38      	bgt.n	8015098 <_printf_float+0x30c>
 8015026:	2301      	movs	r3, #1
 8015028:	0038      	movs	r0, r7
 801502a:	4a1a      	ldr	r2, [pc, #104]	; (8015094 <_printf_float+0x308>)
 801502c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801502e:	47b0      	blx	r6
 8015030:	1c43      	adds	r3, r0, #1
 8015032:	d100      	bne.n	8015036 <_printf_float+0x2aa>
 8015034:	e708      	b.n	8014e48 <_printf_float+0xbc>
 8015036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015038:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801503a:	4313      	orrs	r3, r2
 801503c:	d102      	bne.n	8015044 <_printf_float+0x2b8>
 801503e:	6823      	ldr	r3, [r4, #0]
 8015040:	07db      	lsls	r3, r3, #31
 8015042:	d5d7      	bpl.n	8014ff4 <_printf_float+0x268>
 8015044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015046:	0038      	movs	r0, r7
 8015048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801504a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801504c:	47b0      	blx	r6
 801504e:	1c43      	adds	r3, r0, #1
 8015050:	d100      	bne.n	8015054 <_printf_float+0x2c8>
 8015052:	e6f9      	b.n	8014e48 <_printf_float+0xbc>
 8015054:	2300      	movs	r3, #0
 8015056:	930a      	str	r3, [sp, #40]	; 0x28
 8015058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801505a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801505c:	425b      	negs	r3, r3
 801505e:	4293      	cmp	r3, r2
 8015060:	dc01      	bgt.n	8015066 <_printf_float+0x2da>
 8015062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015064:	e797      	b.n	8014f96 <_printf_float+0x20a>
 8015066:	0022      	movs	r2, r4
 8015068:	2301      	movs	r3, #1
 801506a:	0038      	movs	r0, r7
 801506c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801506e:	321a      	adds	r2, #26
 8015070:	47b0      	blx	r6
 8015072:	1c43      	adds	r3, r0, #1
 8015074:	d100      	bne.n	8015078 <_printf_float+0x2ec>
 8015076:	e6e7      	b.n	8014e48 <_printf_float+0xbc>
 8015078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801507a:	3301      	adds	r3, #1
 801507c:	e7eb      	b.n	8015056 <_printf_float+0x2ca>
 801507e:	46c0      	nop			; (mov r8, r8)
 8015080:	7fefffff 	.word	0x7fefffff
 8015084:	08018e48 	.word	0x08018e48
 8015088:	08018e4c 	.word	0x08018e4c
 801508c:	08018e50 	.word	0x08018e50
 8015090:	08018e54 	.word	0x08018e54
 8015094:	08018e58 	.word	0x08018e58
 8015098:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801509a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801509c:	920a      	str	r2, [sp, #40]	; 0x28
 801509e:	429a      	cmp	r2, r3
 80150a0:	dd00      	ble.n	80150a4 <_printf_float+0x318>
 80150a2:	930a      	str	r3, [sp, #40]	; 0x28
 80150a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	dc3c      	bgt.n	8015124 <_printf_float+0x398>
 80150aa:	2300      	movs	r3, #0
 80150ac:	930d      	str	r3, [sp, #52]	; 0x34
 80150ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b0:	43db      	mvns	r3, r3
 80150b2:	17db      	asrs	r3, r3, #31
 80150b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80150b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80150b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80150ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80150bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150be:	4013      	ands	r3, r2
 80150c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80150c2:	1ad3      	subs	r3, r2, r3
 80150c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150c6:	4293      	cmp	r3, r2
 80150c8:	dc34      	bgt.n	8015134 <_printf_float+0x3a8>
 80150ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150ce:	4293      	cmp	r3, r2
 80150d0:	db3d      	blt.n	801514e <_printf_float+0x3c2>
 80150d2:	6823      	ldr	r3, [r4, #0]
 80150d4:	07db      	lsls	r3, r3, #31
 80150d6:	d43a      	bmi.n	801514e <_printf_float+0x3c2>
 80150d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	1a52      	subs	r2, r2, r1
 80150e2:	920a      	str	r2, [sp, #40]	; 0x28
 80150e4:	429a      	cmp	r2, r3
 80150e6:	dd00      	ble.n	80150ea <_printf_float+0x35e>
 80150e8:	930a      	str	r3, [sp, #40]	; 0x28
 80150ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	dc36      	bgt.n	801515e <_printf_float+0x3d2>
 80150f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150f2:	2500      	movs	r5, #0
 80150f4:	43db      	mvns	r3, r3
 80150f6:	17db      	asrs	r3, r3, #31
 80150f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80150fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80150fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015100:	1a9b      	subs	r3, r3, r2
 8015102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015104:	400a      	ands	r2, r1
 8015106:	1a9b      	subs	r3, r3, r2
 8015108:	42ab      	cmp	r3, r5
 801510a:	dc00      	bgt.n	801510e <_printf_float+0x382>
 801510c:	e772      	b.n	8014ff4 <_printf_float+0x268>
 801510e:	0022      	movs	r2, r4
 8015110:	2301      	movs	r3, #1
 8015112:	0038      	movs	r0, r7
 8015114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015116:	321a      	adds	r2, #26
 8015118:	47b0      	blx	r6
 801511a:	1c43      	adds	r3, r0, #1
 801511c:	d100      	bne.n	8015120 <_printf_float+0x394>
 801511e:	e693      	b.n	8014e48 <_printf_float+0xbc>
 8015120:	3501      	adds	r5, #1
 8015122:	e7ea      	b.n	80150fa <_printf_float+0x36e>
 8015124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015126:	002a      	movs	r2, r5
 8015128:	0038      	movs	r0, r7
 801512a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801512c:	47b0      	blx	r6
 801512e:	1c43      	adds	r3, r0, #1
 8015130:	d1bb      	bne.n	80150aa <_printf_float+0x31e>
 8015132:	e689      	b.n	8014e48 <_printf_float+0xbc>
 8015134:	0022      	movs	r2, r4
 8015136:	2301      	movs	r3, #1
 8015138:	0038      	movs	r0, r7
 801513a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801513c:	321a      	adds	r2, #26
 801513e:	47b0      	blx	r6
 8015140:	1c43      	adds	r3, r0, #1
 8015142:	d100      	bne.n	8015146 <_printf_float+0x3ba>
 8015144:	e680      	b.n	8014e48 <_printf_float+0xbc>
 8015146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015148:	3301      	adds	r3, #1
 801514a:	930d      	str	r3, [sp, #52]	; 0x34
 801514c:	e7b3      	b.n	80150b6 <_printf_float+0x32a>
 801514e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015150:	0038      	movs	r0, r7
 8015152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015156:	47b0      	blx	r6
 8015158:	1c43      	adds	r3, r0, #1
 801515a:	d1bd      	bne.n	80150d8 <_printf_float+0x34c>
 801515c:	e674      	b.n	8014e48 <_printf_float+0xbc>
 801515e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015160:	0038      	movs	r0, r7
 8015162:	18ea      	adds	r2, r5, r3
 8015164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015168:	47b0      	blx	r6
 801516a:	1c43      	adds	r3, r0, #1
 801516c:	d1c0      	bne.n	80150f0 <_printf_float+0x364>
 801516e:	e66b      	b.n	8014e48 <_printf_float+0xbc>
 8015170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015172:	2b01      	cmp	r3, #1
 8015174:	dc02      	bgt.n	801517c <_printf_float+0x3f0>
 8015176:	2301      	movs	r3, #1
 8015178:	421a      	tst	r2, r3
 801517a:	d034      	beq.n	80151e6 <_printf_float+0x45a>
 801517c:	2301      	movs	r3, #1
 801517e:	002a      	movs	r2, r5
 8015180:	0038      	movs	r0, r7
 8015182:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015184:	47b0      	blx	r6
 8015186:	1c43      	adds	r3, r0, #1
 8015188:	d100      	bne.n	801518c <_printf_float+0x400>
 801518a:	e65d      	b.n	8014e48 <_printf_float+0xbc>
 801518c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801518e:	0038      	movs	r0, r7
 8015190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015194:	47b0      	blx	r6
 8015196:	1c43      	adds	r3, r0, #1
 8015198:	d100      	bne.n	801519c <_printf_float+0x410>
 801519a:	e655      	b.n	8014e48 <_printf_float+0xbc>
 801519c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801519e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80151a0:	2200      	movs	r2, #0
 80151a2:	2300      	movs	r3, #0
 80151a4:	f7eb f958 	bl	8000458 <__aeabi_dcmpeq>
 80151a8:	2800      	cmp	r0, #0
 80151aa:	d11a      	bne.n	80151e2 <_printf_float+0x456>
 80151ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151ae:	1c6a      	adds	r2, r5, #1
 80151b0:	3b01      	subs	r3, #1
 80151b2:	0038      	movs	r0, r7
 80151b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151b6:	47b0      	blx	r6
 80151b8:	1c43      	adds	r3, r0, #1
 80151ba:	d10e      	bne.n	80151da <_printf_float+0x44e>
 80151bc:	e644      	b.n	8014e48 <_printf_float+0xbc>
 80151be:	0022      	movs	r2, r4
 80151c0:	2301      	movs	r3, #1
 80151c2:	0038      	movs	r0, r7
 80151c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151c6:	321a      	adds	r2, #26
 80151c8:	47b0      	blx	r6
 80151ca:	1c43      	adds	r3, r0, #1
 80151cc:	d100      	bne.n	80151d0 <_printf_float+0x444>
 80151ce:	e63b      	b.n	8014e48 <_printf_float+0xbc>
 80151d0:	3501      	adds	r5, #1
 80151d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151d4:	3b01      	subs	r3, #1
 80151d6:	42ab      	cmp	r3, r5
 80151d8:	dcf1      	bgt.n	80151be <_printf_float+0x432>
 80151da:	0022      	movs	r2, r4
 80151dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151de:	3250      	adds	r2, #80	; 0x50
 80151e0:	e6da      	b.n	8014f98 <_printf_float+0x20c>
 80151e2:	2500      	movs	r5, #0
 80151e4:	e7f5      	b.n	80151d2 <_printf_float+0x446>
 80151e6:	002a      	movs	r2, r5
 80151e8:	e7e3      	b.n	80151b2 <_printf_float+0x426>
 80151ea:	0022      	movs	r2, r4
 80151ec:	2301      	movs	r3, #1
 80151ee:	0038      	movs	r0, r7
 80151f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151f2:	3219      	adds	r2, #25
 80151f4:	47b0      	blx	r6
 80151f6:	1c43      	adds	r3, r0, #1
 80151f8:	d100      	bne.n	80151fc <_printf_float+0x470>
 80151fa:	e625      	b.n	8014e48 <_printf_float+0xbc>
 80151fc:	3501      	adds	r5, #1
 80151fe:	68e3      	ldr	r3, [r4, #12]
 8015200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015202:	1a9b      	subs	r3, r3, r2
 8015204:	42ab      	cmp	r3, r5
 8015206:	dcf0      	bgt.n	80151ea <_printf_float+0x45e>
 8015208:	e6f8      	b.n	8014ffc <_printf_float+0x270>
 801520a:	2500      	movs	r5, #0
 801520c:	e7f7      	b.n	80151fe <_printf_float+0x472>
 801520e:	46c0      	nop			; (mov r8, r8)

08015210 <_printf_common>:
 8015210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015212:	0015      	movs	r5, r2
 8015214:	9301      	str	r3, [sp, #4]
 8015216:	688a      	ldr	r2, [r1, #8]
 8015218:	690b      	ldr	r3, [r1, #16]
 801521a:	000c      	movs	r4, r1
 801521c:	9000      	str	r0, [sp, #0]
 801521e:	4293      	cmp	r3, r2
 8015220:	da00      	bge.n	8015224 <_printf_common+0x14>
 8015222:	0013      	movs	r3, r2
 8015224:	0022      	movs	r2, r4
 8015226:	602b      	str	r3, [r5, #0]
 8015228:	3243      	adds	r2, #67	; 0x43
 801522a:	7812      	ldrb	r2, [r2, #0]
 801522c:	2a00      	cmp	r2, #0
 801522e:	d001      	beq.n	8015234 <_printf_common+0x24>
 8015230:	3301      	adds	r3, #1
 8015232:	602b      	str	r3, [r5, #0]
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	069b      	lsls	r3, r3, #26
 8015238:	d502      	bpl.n	8015240 <_printf_common+0x30>
 801523a:	682b      	ldr	r3, [r5, #0]
 801523c:	3302      	adds	r3, #2
 801523e:	602b      	str	r3, [r5, #0]
 8015240:	6822      	ldr	r2, [r4, #0]
 8015242:	2306      	movs	r3, #6
 8015244:	0017      	movs	r7, r2
 8015246:	401f      	ands	r7, r3
 8015248:	421a      	tst	r2, r3
 801524a:	d027      	beq.n	801529c <_printf_common+0x8c>
 801524c:	0023      	movs	r3, r4
 801524e:	3343      	adds	r3, #67	; 0x43
 8015250:	781b      	ldrb	r3, [r3, #0]
 8015252:	1e5a      	subs	r2, r3, #1
 8015254:	4193      	sbcs	r3, r2
 8015256:	6822      	ldr	r2, [r4, #0]
 8015258:	0692      	lsls	r2, r2, #26
 801525a:	d430      	bmi.n	80152be <_printf_common+0xae>
 801525c:	0022      	movs	r2, r4
 801525e:	9901      	ldr	r1, [sp, #4]
 8015260:	9800      	ldr	r0, [sp, #0]
 8015262:	9e08      	ldr	r6, [sp, #32]
 8015264:	3243      	adds	r2, #67	; 0x43
 8015266:	47b0      	blx	r6
 8015268:	1c43      	adds	r3, r0, #1
 801526a:	d025      	beq.n	80152b8 <_printf_common+0xa8>
 801526c:	2306      	movs	r3, #6
 801526e:	6820      	ldr	r0, [r4, #0]
 8015270:	682a      	ldr	r2, [r5, #0]
 8015272:	68e1      	ldr	r1, [r4, #12]
 8015274:	2500      	movs	r5, #0
 8015276:	4003      	ands	r3, r0
 8015278:	2b04      	cmp	r3, #4
 801527a:	d103      	bne.n	8015284 <_printf_common+0x74>
 801527c:	1a8d      	subs	r5, r1, r2
 801527e:	43eb      	mvns	r3, r5
 8015280:	17db      	asrs	r3, r3, #31
 8015282:	401d      	ands	r5, r3
 8015284:	68a3      	ldr	r3, [r4, #8]
 8015286:	6922      	ldr	r2, [r4, #16]
 8015288:	4293      	cmp	r3, r2
 801528a:	dd01      	ble.n	8015290 <_printf_common+0x80>
 801528c:	1a9b      	subs	r3, r3, r2
 801528e:	18ed      	adds	r5, r5, r3
 8015290:	2700      	movs	r7, #0
 8015292:	42bd      	cmp	r5, r7
 8015294:	d120      	bne.n	80152d8 <_printf_common+0xc8>
 8015296:	2000      	movs	r0, #0
 8015298:	e010      	b.n	80152bc <_printf_common+0xac>
 801529a:	3701      	adds	r7, #1
 801529c:	68e3      	ldr	r3, [r4, #12]
 801529e:	682a      	ldr	r2, [r5, #0]
 80152a0:	1a9b      	subs	r3, r3, r2
 80152a2:	42bb      	cmp	r3, r7
 80152a4:	ddd2      	ble.n	801524c <_printf_common+0x3c>
 80152a6:	0022      	movs	r2, r4
 80152a8:	2301      	movs	r3, #1
 80152aa:	9901      	ldr	r1, [sp, #4]
 80152ac:	9800      	ldr	r0, [sp, #0]
 80152ae:	9e08      	ldr	r6, [sp, #32]
 80152b0:	3219      	adds	r2, #25
 80152b2:	47b0      	blx	r6
 80152b4:	1c43      	adds	r3, r0, #1
 80152b6:	d1f0      	bne.n	801529a <_printf_common+0x8a>
 80152b8:	2001      	movs	r0, #1
 80152ba:	4240      	negs	r0, r0
 80152bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80152be:	2030      	movs	r0, #48	; 0x30
 80152c0:	18e1      	adds	r1, r4, r3
 80152c2:	3143      	adds	r1, #67	; 0x43
 80152c4:	7008      	strb	r0, [r1, #0]
 80152c6:	0021      	movs	r1, r4
 80152c8:	1c5a      	adds	r2, r3, #1
 80152ca:	3145      	adds	r1, #69	; 0x45
 80152cc:	7809      	ldrb	r1, [r1, #0]
 80152ce:	18a2      	adds	r2, r4, r2
 80152d0:	3243      	adds	r2, #67	; 0x43
 80152d2:	3302      	adds	r3, #2
 80152d4:	7011      	strb	r1, [r2, #0]
 80152d6:	e7c1      	b.n	801525c <_printf_common+0x4c>
 80152d8:	0022      	movs	r2, r4
 80152da:	2301      	movs	r3, #1
 80152dc:	9901      	ldr	r1, [sp, #4]
 80152de:	9800      	ldr	r0, [sp, #0]
 80152e0:	9e08      	ldr	r6, [sp, #32]
 80152e2:	321a      	adds	r2, #26
 80152e4:	47b0      	blx	r6
 80152e6:	1c43      	adds	r3, r0, #1
 80152e8:	d0e6      	beq.n	80152b8 <_printf_common+0xa8>
 80152ea:	3701      	adds	r7, #1
 80152ec:	e7d1      	b.n	8015292 <_printf_common+0x82>
	...

080152f0 <_printf_i>:
 80152f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152f2:	b08b      	sub	sp, #44	; 0x2c
 80152f4:	9206      	str	r2, [sp, #24]
 80152f6:	000a      	movs	r2, r1
 80152f8:	3243      	adds	r2, #67	; 0x43
 80152fa:	9307      	str	r3, [sp, #28]
 80152fc:	9005      	str	r0, [sp, #20]
 80152fe:	9204      	str	r2, [sp, #16]
 8015300:	7e0a      	ldrb	r2, [r1, #24]
 8015302:	000c      	movs	r4, r1
 8015304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015306:	2a78      	cmp	r2, #120	; 0x78
 8015308:	d807      	bhi.n	801531a <_printf_i+0x2a>
 801530a:	2a62      	cmp	r2, #98	; 0x62
 801530c:	d809      	bhi.n	8015322 <_printf_i+0x32>
 801530e:	2a00      	cmp	r2, #0
 8015310:	d100      	bne.n	8015314 <_printf_i+0x24>
 8015312:	e0c1      	b.n	8015498 <_printf_i+0x1a8>
 8015314:	2a58      	cmp	r2, #88	; 0x58
 8015316:	d100      	bne.n	801531a <_printf_i+0x2a>
 8015318:	e08c      	b.n	8015434 <_printf_i+0x144>
 801531a:	0026      	movs	r6, r4
 801531c:	3642      	adds	r6, #66	; 0x42
 801531e:	7032      	strb	r2, [r6, #0]
 8015320:	e022      	b.n	8015368 <_printf_i+0x78>
 8015322:	0010      	movs	r0, r2
 8015324:	3863      	subs	r0, #99	; 0x63
 8015326:	2815      	cmp	r0, #21
 8015328:	d8f7      	bhi.n	801531a <_printf_i+0x2a>
 801532a:	f7ea ff05 	bl	8000138 <__gnu_thumb1_case_shi>
 801532e:	0016      	.short	0x0016
 8015330:	fff6001f 	.word	0xfff6001f
 8015334:	fff6fff6 	.word	0xfff6fff6
 8015338:	001ffff6 	.word	0x001ffff6
 801533c:	fff6fff6 	.word	0xfff6fff6
 8015340:	fff6fff6 	.word	0xfff6fff6
 8015344:	003600a8 	.word	0x003600a8
 8015348:	fff6009a 	.word	0xfff6009a
 801534c:	00b9fff6 	.word	0x00b9fff6
 8015350:	0036fff6 	.word	0x0036fff6
 8015354:	fff6fff6 	.word	0xfff6fff6
 8015358:	009e      	.short	0x009e
 801535a:	0026      	movs	r6, r4
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	3642      	adds	r6, #66	; 0x42
 8015360:	1d11      	adds	r1, r2, #4
 8015362:	6019      	str	r1, [r3, #0]
 8015364:	6813      	ldr	r3, [r2, #0]
 8015366:	7033      	strb	r3, [r6, #0]
 8015368:	2301      	movs	r3, #1
 801536a:	e0a7      	b.n	80154bc <_printf_i+0x1cc>
 801536c:	6808      	ldr	r0, [r1, #0]
 801536e:	6819      	ldr	r1, [r3, #0]
 8015370:	1d0a      	adds	r2, r1, #4
 8015372:	0605      	lsls	r5, r0, #24
 8015374:	d50b      	bpl.n	801538e <_printf_i+0x9e>
 8015376:	680d      	ldr	r5, [r1, #0]
 8015378:	601a      	str	r2, [r3, #0]
 801537a:	2d00      	cmp	r5, #0
 801537c:	da03      	bge.n	8015386 <_printf_i+0x96>
 801537e:	232d      	movs	r3, #45	; 0x2d
 8015380:	9a04      	ldr	r2, [sp, #16]
 8015382:	426d      	negs	r5, r5
 8015384:	7013      	strb	r3, [r2, #0]
 8015386:	4b61      	ldr	r3, [pc, #388]	; (801550c <_printf_i+0x21c>)
 8015388:	270a      	movs	r7, #10
 801538a:	9303      	str	r3, [sp, #12]
 801538c:	e01b      	b.n	80153c6 <_printf_i+0xd6>
 801538e:	680d      	ldr	r5, [r1, #0]
 8015390:	601a      	str	r2, [r3, #0]
 8015392:	0641      	lsls	r1, r0, #25
 8015394:	d5f1      	bpl.n	801537a <_printf_i+0x8a>
 8015396:	b22d      	sxth	r5, r5
 8015398:	e7ef      	b.n	801537a <_printf_i+0x8a>
 801539a:	680d      	ldr	r5, [r1, #0]
 801539c:	6819      	ldr	r1, [r3, #0]
 801539e:	1d08      	adds	r0, r1, #4
 80153a0:	6018      	str	r0, [r3, #0]
 80153a2:	062e      	lsls	r6, r5, #24
 80153a4:	d501      	bpl.n	80153aa <_printf_i+0xba>
 80153a6:	680d      	ldr	r5, [r1, #0]
 80153a8:	e003      	b.n	80153b2 <_printf_i+0xc2>
 80153aa:	066d      	lsls	r5, r5, #25
 80153ac:	d5fb      	bpl.n	80153a6 <_printf_i+0xb6>
 80153ae:	680d      	ldr	r5, [r1, #0]
 80153b0:	b2ad      	uxth	r5, r5
 80153b2:	4b56      	ldr	r3, [pc, #344]	; (801550c <_printf_i+0x21c>)
 80153b4:	2708      	movs	r7, #8
 80153b6:	9303      	str	r3, [sp, #12]
 80153b8:	2a6f      	cmp	r2, #111	; 0x6f
 80153ba:	d000      	beq.n	80153be <_printf_i+0xce>
 80153bc:	3702      	adds	r7, #2
 80153be:	0023      	movs	r3, r4
 80153c0:	2200      	movs	r2, #0
 80153c2:	3343      	adds	r3, #67	; 0x43
 80153c4:	701a      	strb	r2, [r3, #0]
 80153c6:	6863      	ldr	r3, [r4, #4]
 80153c8:	60a3      	str	r3, [r4, #8]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	db03      	blt.n	80153d6 <_printf_i+0xe6>
 80153ce:	2204      	movs	r2, #4
 80153d0:	6821      	ldr	r1, [r4, #0]
 80153d2:	4391      	bics	r1, r2
 80153d4:	6021      	str	r1, [r4, #0]
 80153d6:	2d00      	cmp	r5, #0
 80153d8:	d102      	bne.n	80153e0 <_printf_i+0xf0>
 80153da:	9e04      	ldr	r6, [sp, #16]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d00c      	beq.n	80153fa <_printf_i+0x10a>
 80153e0:	9e04      	ldr	r6, [sp, #16]
 80153e2:	0028      	movs	r0, r5
 80153e4:	0039      	movs	r1, r7
 80153e6:	f7ea ff37 	bl	8000258 <__aeabi_uidivmod>
 80153ea:	9b03      	ldr	r3, [sp, #12]
 80153ec:	3e01      	subs	r6, #1
 80153ee:	5c5b      	ldrb	r3, [r3, r1]
 80153f0:	7033      	strb	r3, [r6, #0]
 80153f2:	002b      	movs	r3, r5
 80153f4:	0005      	movs	r5, r0
 80153f6:	429f      	cmp	r7, r3
 80153f8:	d9f3      	bls.n	80153e2 <_printf_i+0xf2>
 80153fa:	2f08      	cmp	r7, #8
 80153fc:	d109      	bne.n	8015412 <_printf_i+0x122>
 80153fe:	6823      	ldr	r3, [r4, #0]
 8015400:	07db      	lsls	r3, r3, #31
 8015402:	d506      	bpl.n	8015412 <_printf_i+0x122>
 8015404:	6863      	ldr	r3, [r4, #4]
 8015406:	6922      	ldr	r2, [r4, #16]
 8015408:	4293      	cmp	r3, r2
 801540a:	dc02      	bgt.n	8015412 <_printf_i+0x122>
 801540c:	2330      	movs	r3, #48	; 0x30
 801540e:	3e01      	subs	r6, #1
 8015410:	7033      	strb	r3, [r6, #0]
 8015412:	9b04      	ldr	r3, [sp, #16]
 8015414:	1b9b      	subs	r3, r3, r6
 8015416:	6123      	str	r3, [r4, #16]
 8015418:	9b07      	ldr	r3, [sp, #28]
 801541a:	0021      	movs	r1, r4
 801541c:	9300      	str	r3, [sp, #0]
 801541e:	9805      	ldr	r0, [sp, #20]
 8015420:	9b06      	ldr	r3, [sp, #24]
 8015422:	aa09      	add	r2, sp, #36	; 0x24
 8015424:	f7ff fef4 	bl	8015210 <_printf_common>
 8015428:	1c43      	adds	r3, r0, #1
 801542a:	d14c      	bne.n	80154c6 <_printf_i+0x1d6>
 801542c:	2001      	movs	r0, #1
 801542e:	4240      	negs	r0, r0
 8015430:	b00b      	add	sp, #44	; 0x2c
 8015432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015434:	3145      	adds	r1, #69	; 0x45
 8015436:	700a      	strb	r2, [r1, #0]
 8015438:	4a34      	ldr	r2, [pc, #208]	; (801550c <_printf_i+0x21c>)
 801543a:	9203      	str	r2, [sp, #12]
 801543c:	681a      	ldr	r2, [r3, #0]
 801543e:	6821      	ldr	r1, [r4, #0]
 8015440:	ca20      	ldmia	r2!, {r5}
 8015442:	601a      	str	r2, [r3, #0]
 8015444:	0608      	lsls	r0, r1, #24
 8015446:	d516      	bpl.n	8015476 <_printf_i+0x186>
 8015448:	07cb      	lsls	r3, r1, #31
 801544a:	d502      	bpl.n	8015452 <_printf_i+0x162>
 801544c:	2320      	movs	r3, #32
 801544e:	4319      	orrs	r1, r3
 8015450:	6021      	str	r1, [r4, #0]
 8015452:	2710      	movs	r7, #16
 8015454:	2d00      	cmp	r5, #0
 8015456:	d1b2      	bne.n	80153be <_printf_i+0xce>
 8015458:	2320      	movs	r3, #32
 801545a:	6822      	ldr	r2, [r4, #0]
 801545c:	439a      	bics	r2, r3
 801545e:	6022      	str	r2, [r4, #0]
 8015460:	e7ad      	b.n	80153be <_printf_i+0xce>
 8015462:	2220      	movs	r2, #32
 8015464:	6809      	ldr	r1, [r1, #0]
 8015466:	430a      	orrs	r2, r1
 8015468:	6022      	str	r2, [r4, #0]
 801546a:	0022      	movs	r2, r4
 801546c:	2178      	movs	r1, #120	; 0x78
 801546e:	3245      	adds	r2, #69	; 0x45
 8015470:	7011      	strb	r1, [r2, #0]
 8015472:	4a27      	ldr	r2, [pc, #156]	; (8015510 <_printf_i+0x220>)
 8015474:	e7e1      	b.n	801543a <_printf_i+0x14a>
 8015476:	0648      	lsls	r0, r1, #25
 8015478:	d5e6      	bpl.n	8015448 <_printf_i+0x158>
 801547a:	b2ad      	uxth	r5, r5
 801547c:	e7e4      	b.n	8015448 <_printf_i+0x158>
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	680d      	ldr	r5, [r1, #0]
 8015482:	1d10      	adds	r0, r2, #4
 8015484:	6949      	ldr	r1, [r1, #20]
 8015486:	6018      	str	r0, [r3, #0]
 8015488:	6813      	ldr	r3, [r2, #0]
 801548a:	062e      	lsls	r6, r5, #24
 801548c:	d501      	bpl.n	8015492 <_printf_i+0x1a2>
 801548e:	6019      	str	r1, [r3, #0]
 8015490:	e002      	b.n	8015498 <_printf_i+0x1a8>
 8015492:	066d      	lsls	r5, r5, #25
 8015494:	d5fb      	bpl.n	801548e <_printf_i+0x19e>
 8015496:	8019      	strh	r1, [r3, #0]
 8015498:	2300      	movs	r3, #0
 801549a:	9e04      	ldr	r6, [sp, #16]
 801549c:	6123      	str	r3, [r4, #16]
 801549e:	e7bb      	b.n	8015418 <_printf_i+0x128>
 80154a0:	681a      	ldr	r2, [r3, #0]
 80154a2:	1d11      	adds	r1, r2, #4
 80154a4:	6019      	str	r1, [r3, #0]
 80154a6:	6816      	ldr	r6, [r2, #0]
 80154a8:	2100      	movs	r1, #0
 80154aa:	0030      	movs	r0, r6
 80154ac:	6862      	ldr	r2, [r4, #4]
 80154ae:	f000 ff0d 	bl	80162cc <memchr>
 80154b2:	2800      	cmp	r0, #0
 80154b4:	d001      	beq.n	80154ba <_printf_i+0x1ca>
 80154b6:	1b80      	subs	r0, r0, r6
 80154b8:	6060      	str	r0, [r4, #4]
 80154ba:	6863      	ldr	r3, [r4, #4]
 80154bc:	6123      	str	r3, [r4, #16]
 80154be:	2300      	movs	r3, #0
 80154c0:	9a04      	ldr	r2, [sp, #16]
 80154c2:	7013      	strb	r3, [r2, #0]
 80154c4:	e7a8      	b.n	8015418 <_printf_i+0x128>
 80154c6:	6923      	ldr	r3, [r4, #16]
 80154c8:	0032      	movs	r2, r6
 80154ca:	9906      	ldr	r1, [sp, #24]
 80154cc:	9805      	ldr	r0, [sp, #20]
 80154ce:	9d07      	ldr	r5, [sp, #28]
 80154d0:	47a8      	blx	r5
 80154d2:	1c43      	adds	r3, r0, #1
 80154d4:	d0aa      	beq.n	801542c <_printf_i+0x13c>
 80154d6:	6823      	ldr	r3, [r4, #0]
 80154d8:	079b      	lsls	r3, r3, #30
 80154da:	d415      	bmi.n	8015508 <_printf_i+0x218>
 80154dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154de:	68e0      	ldr	r0, [r4, #12]
 80154e0:	4298      	cmp	r0, r3
 80154e2:	daa5      	bge.n	8015430 <_printf_i+0x140>
 80154e4:	0018      	movs	r0, r3
 80154e6:	e7a3      	b.n	8015430 <_printf_i+0x140>
 80154e8:	0022      	movs	r2, r4
 80154ea:	2301      	movs	r3, #1
 80154ec:	9906      	ldr	r1, [sp, #24]
 80154ee:	9805      	ldr	r0, [sp, #20]
 80154f0:	9e07      	ldr	r6, [sp, #28]
 80154f2:	3219      	adds	r2, #25
 80154f4:	47b0      	blx	r6
 80154f6:	1c43      	adds	r3, r0, #1
 80154f8:	d098      	beq.n	801542c <_printf_i+0x13c>
 80154fa:	3501      	adds	r5, #1
 80154fc:	68e3      	ldr	r3, [r4, #12]
 80154fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015500:	1a9b      	subs	r3, r3, r2
 8015502:	42ab      	cmp	r3, r5
 8015504:	dcf0      	bgt.n	80154e8 <_printf_i+0x1f8>
 8015506:	e7e9      	b.n	80154dc <_printf_i+0x1ec>
 8015508:	2500      	movs	r5, #0
 801550a:	e7f7      	b.n	80154fc <_printf_i+0x20c>
 801550c:	08018e5a 	.word	0x08018e5a
 8015510:	08018e6b 	.word	0x08018e6b

08015514 <_sbrk_r>:
 8015514:	2300      	movs	r3, #0
 8015516:	b570      	push	{r4, r5, r6, lr}
 8015518:	4d06      	ldr	r5, [pc, #24]	; (8015534 <_sbrk_r+0x20>)
 801551a:	0004      	movs	r4, r0
 801551c:	0008      	movs	r0, r1
 801551e:	602b      	str	r3, [r5, #0]
 8015520:	f7ee fc4a 	bl	8003db8 <_sbrk>
 8015524:	1c43      	adds	r3, r0, #1
 8015526:	d103      	bne.n	8015530 <_sbrk_r+0x1c>
 8015528:	682b      	ldr	r3, [r5, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d000      	beq.n	8015530 <_sbrk_r+0x1c>
 801552e:	6023      	str	r3, [r4, #0]
 8015530:	bd70      	pop	{r4, r5, r6, pc}
 8015532:	46c0      	nop			; (mov r8, r8)
 8015534:	20003c30 	.word	0x20003c30

08015538 <siprintf>:
 8015538:	b40e      	push	{r1, r2, r3}
 801553a:	b500      	push	{lr}
 801553c:	490b      	ldr	r1, [pc, #44]	; (801556c <siprintf+0x34>)
 801553e:	b09c      	sub	sp, #112	; 0x70
 8015540:	ab1d      	add	r3, sp, #116	; 0x74
 8015542:	9002      	str	r0, [sp, #8]
 8015544:	9006      	str	r0, [sp, #24]
 8015546:	9107      	str	r1, [sp, #28]
 8015548:	9104      	str	r1, [sp, #16]
 801554a:	4809      	ldr	r0, [pc, #36]	; (8015570 <siprintf+0x38>)
 801554c:	4909      	ldr	r1, [pc, #36]	; (8015574 <siprintf+0x3c>)
 801554e:	cb04      	ldmia	r3!, {r2}
 8015550:	9105      	str	r1, [sp, #20]
 8015552:	6800      	ldr	r0, [r0, #0]
 8015554:	a902      	add	r1, sp, #8
 8015556:	9301      	str	r3, [sp, #4]
 8015558:	f001 fafe 	bl	8016b58 <_svfiprintf_r>
 801555c:	2300      	movs	r3, #0
 801555e:	9a02      	ldr	r2, [sp, #8]
 8015560:	7013      	strb	r3, [r2, #0]
 8015562:	b01c      	add	sp, #112	; 0x70
 8015564:	bc08      	pop	{r3}
 8015566:	b003      	add	sp, #12
 8015568:	4718      	bx	r3
 801556a:	46c0      	nop			; (mov r8, r8)
 801556c:	7fffffff 	.word	0x7fffffff
 8015570:	200030d8 	.word	0x200030d8
 8015574:	ffff0208 	.word	0xffff0208

08015578 <quorem>:
 8015578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801557a:	0006      	movs	r6, r0
 801557c:	690b      	ldr	r3, [r1, #16]
 801557e:	6932      	ldr	r2, [r6, #16]
 8015580:	b087      	sub	sp, #28
 8015582:	2000      	movs	r0, #0
 8015584:	9103      	str	r1, [sp, #12]
 8015586:	429a      	cmp	r2, r3
 8015588:	db65      	blt.n	8015656 <quorem+0xde>
 801558a:	3b01      	subs	r3, #1
 801558c:	009c      	lsls	r4, r3, #2
 801558e:	9300      	str	r3, [sp, #0]
 8015590:	000b      	movs	r3, r1
 8015592:	3314      	adds	r3, #20
 8015594:	9305      	str	r3, [sp, #20]
 8015596:	191b      	adds	r3, r3, r4
 8015598:	9304      	str	r3, [sp, #16]
 801559a:	0033      	movs	r3, r6
 801559c:	3314      	adds	r3, #20
 801559e:	9302      	str	r3, [sp, #8]
 80155a0:	191c      	adds	r4, r3, r4
 80155a2:	9b04      	ldr	r3, [sp, #16]
 80155a4:	6827      	ldr	r7, [r4, #0]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	0038      	movs	r0, r7
 80155aa:	1c5d      	adds	r5, r3, #1
 80155ac:	0029      	movs	r1, r5
 80155ae:	9301      	str	r3, [sp, #4]
 80155b0:	f7ea fdcc 	bl	800014c <__udivsi3>
 80155b4:	9001      	str	r0, [sp, #4]
 80155b6:	42af      	cmp	r7, r5
 80155b8:	d324      	bcc.n	8015604 <quorem+0x8c>
 80155ba:	2500      	movs	r5, #0
 80155bc:	46ac      	mov	ip, r5
 80155be:	9802      	ldr	r0, [sp, #8]
 80155c0:	9f05      	ldr	r7, [sp, #20]
 80155c2:	cf08      	ldmia	r7!, {r3}
 80155c4:	9a01      	ldr	r2, [sp, #4]
 80155c6:	b299      	uxth	r1, r3
 80155c8:	4351      	muls	r1, r2
 80155ca:	0c1b      	lsrs	r3, r3, #16
 80155cc:	4353      	muls	r3, r2
 80155ce:	1949      	adds	r1, r1, r5
 80155d0:	0c0a      	lsrs	r2, r1, #16
 80155d2:	189b      	adds	r3, r3, r2
 80155d4:	6802      	ldr	r2, [r0, #0]
 80155d6:	b289      	uxth	r1, r1
 80155d8:	b292      	uxth	r2, r2
 80155da:	4462      	add	r2, ip
 80155dc:	1a52      	subs	r2, r2, r1
 80155de:	6801      	ldr	r1, [r0, #0]
 80155e0:	0c1d      	lsrs	r5, r3, #16
 80155e2:	0c09      	lsrs	r1, r1, #16
 80155e4:	b29b      	uxth	r3, r3
 80155e6:	1acb      	subs	r3, r1, r3
 80155e8:	1411      	asrs	r1, r2, #16
 80155ea:	185b      	adds	r3, r3, r1
 80155ec:	1419      	asrs	r1, r3, #16
 80155ee:	b292      	uxth	r2, r2
 80155f0:	041b      	lsls	r3, r3, #16
 80155f2:	431a      	orrs	r2, r3
 80155f4:	9b04      	ldr	r3, [sp, #16]
 80155f6:	468c      	mov	ip, r1
 80155f8:	c004      	stmia	r0!, {r2}
 80155fa:	42bb      	cmp	r3, r7
 80155fc:	d2e1      	bcs.n	80155c2 <quorem+0x4a>
 80155fe:	6823      	ldr	r3, [r4, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d030      	beq.n	8015666 <quorem+0xee>
 8015604:	0030      	movs	r0, r6
 8015606:	9903      	ldr	r1, [sp, #12]
 8015608:	f001 f900 	bl	801680c <__mcmp>
 801560c:	2800      	cmp	r0, #0
 801560e:	db21      	blt.n	8015654 <quorem+0xdc>
 8015610:	0030      	movs	r0, r6
 8015612:	2400      	movs	r4, #0
 8015614:	9b01      	ldr	r3, [sp, #4]
 8015616:	9903      	ldr	r1, [sp, #12]
 8015618:	3301      	adds	r3, #1
 801561a:	9301      	str	r3, [sp, #4]
 801561c:	3014      	adds	r0, #20
 801561e:	3114      	adds	r1, #20
 8015620:	6803      	ldr	r3, [r0, #0]
 8015622:	c920      	ldmia	r1!, {r5}
 8015624:	b29a      	uxth	r2, r3
 8015626:	1914      	adds	r4, r2, r4
 8015628:	b2aa      	uxth	r2, r5
 801562a:	1aa2      	subs	r2, r4, r2
 801562c:	0c1b      	lsrs	r3, r3, #16
 801562e:	0c2d      	lsrs	r5, r5, #16
 8015630:	1414      	asrs	r4, r2, #16
 8015632:	1b5b      	subs	r3, r3, r5
 8015634:	191b      	adds	r3, r3, r4
 8015636:	141c      	asrs	r4, r3, #16
 8015638:	b292      	uxth	r2, r2
 801563a:	041b      	lsls	r3, r3, #16
 801563c:	4313      	orrs	r3, r2
 801563e:	c008      	stmia	r0!, {r3}
 8015640:	9b04      	ldr	r3, [sp, #16]
 8015642:	428b      	cmp	r3, r1
 8015644:	d2ec      	bcs.n	8015620 <quorem+0xa8>
 8015646:	9b00      	ldr	r3, [sp, #0]
 8015648:	9a02      	ldr	r2, [sp, #8]
 801564a:	009b      	lsls	r3, r3, #2
 801564c:	18d3      	adds	r3, r2, r3
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	2a00      	cmp	r2, #0
 8015652:	d015      	beq.n	8015680 <quorem+0x108>
 8015654:	9801      	ldr	r0, [sp, #4]
 8015656:	b007      	add	sp, #28
 8015658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801565a:	6823      	ldr	r3, [r4, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d106      	bne.n	801566e <quorem+0xf6>
 8015660:	9b00      	ldr	r3, [sp, #0]
 8015662:	3b01      	subs	r3, #1
 8015664:	9300      	str	r3, [sp, #0]
 8015666:	9b02      	ldr	r3, [sp, #8]
 8015668:	3c04      	subs	r4, #4
 801566a:	42a3      	cmp	r3, r4
 801566c:	d3f5      	bcc.n	801565a <quorem+0xe2>
 801566e:	9b00      	ldr	r3, [sp, #0]
 8015670:	6133      	str	r3, [r6, #16]
 8015672:	e7c7      	b.n	8015604 <quorem+0x8c>
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	2a00      	cmp	r2, #0
 8015678:	d106      	bne.n	8015688 <quorem+0x110>
 801567a:	9a00      	ldr	r2, [sp, #0]
 801567c:	3a01      	subs	r2, #1
 801567e:	9200      	str	r2, [sp, #0]
 8015680:	9a02      	ldr	r2, [sp, #8]
 8015682:	3b04      	subs	r3, #4
 8015684:	429a      	cmp	r2, r3
 8015686:	d3f5      	bcc.n	8015674 <quorem+0xfc>
 8015688:	9b00      	ldr	r3, [sp, #0]
 801568a:	6133      	str	r3, [r6, #16]
 801568c:	e7e2      	b.n	8015654 <quorem+0xdc>
	...

08015690 <_dtoa_r>:
 8015690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015692:	b09d      	sub	sp, #116	; 0x74
 8015694:	9202      	str	r2, [sp, #8]
 8015696:	9303      	str	r3, [sp, #12]
 8015698:	9b02      	ldr	r3, [sp, #8]
 801569a:	9c03      	ldr	r4, [sp, #12]
 801569c:	9308      	str	r3, [sp, #32]
 801569e:	9409      	str	r4, [sp, #36]	; 0x24
 80156a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80156a2:	0007      	movs	r7, r0
 80156a4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80156a6:	2c00      	cmp	r4, #0
 80156a8:	d10e      	bne.n	80156c8 <_dtoa_r+0x38>
 80156aa:	2010      	movs	r0, #16
 80156ac:	f7ff f9c6 	bl	8014a3c <malloc>
 80156b0:	1e02      	subs	r2, r0, #0
 80156b2:	6278      	str	r0, [r7, #36]	; 0x24
 80156b4:	d104      	bne.n	80156c0 <_dtoa_r+0x30>
 80156b6:	21ea      	movs	r1, #234	; 0xea
 80156b8:	4bc7      	ldr	r3, [pc, #796]	; (80159d8 <_dtoa_r+0x348>)
 80156ba:	48c8      	ldr	r0, [pc, #800]	; (80159dc <_dtoa_r+0x34c>)
 80156bc:	f001 fb4c 	bl	8016d58 <__assert_func>
 80156c0:	6044      	str	r4, [r0, #4]
 80156c2:	6084      	str	r4, [r0, #8]
 80156c4:	6004      	str	r4, [r0, #0]
 80156c6:	60c4      	str	r4, [r0, #12]
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ca:	6819      	ldr	r1, [r3, #0]
 80156cc:	2900      	cmp	r1, #0
 80156ce:	d00a      	beq.n	80156e6 <_dtoa_r+0x56>
 80156d0:	685a      	ldr	r2, [r3, #4]
 80156d2:	2301      	movs	r3, #1
 80156d4:	4093      	lsls	r3, r2
 80156d6:	604a      	str	r2, [r1, #4]
 80156d8:	608b      	str	r3, [r1, #8]
 80156da:	0038      	movs	r0, r7
 80156dc:	f000 fe56 	bl	801638c <_Bfree>
 80156e0:	2200      	movs	r2, #0
 80156e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e4:	601a      	str	r2, [r3, #0]
 80156e6:	9b03      	ldr	r3, [sp, #12]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	da20      	bge.n	801572e <_dtoa_r+0x9e>
 80156ec:	2301      	movs	r3, #1
 80156ee:	602b      	str	r3, [r5, #0]
 80156f0:	9b03      	ldr	r3, [sp, #12]
 80156f2:	005b      	lsls	r3, r3, #1
 80156f4:	085b      	lsrs	r3, r3, #1
 80156f6:	9309      	str	r3, [sp, #36]	; 0x24
 80156f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80156fa:	4bb9      	ldr	r3, [pc, #740]	; (80159e0 <_dtoa_r+0x350>)
 80156fc:	4ab8      	ldr	r2, [pc, #736]	; (80159e0 <_dtoa_r+0x350>)
 80156fe:	402b      	ands	r3, r5
 8015700:	4293      	cmp	r3, r2
 8015702:	d117      	bne.n	8015734 <_dtoa_r+0xa4>
 8015704:	4bb7      	ldr	r3, [pc, #732]	; (80159e4 <_dtoa_r+0x354>)
 8015706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015708:	0328      	lsls	r0, r5, #12
 801570a:	6013      	str	r3, [r2, #0]
 801570c:	9b02      	ldr	r3, [sp, #8]
 801570e:	0b00      	lsrs	r0, r0, #12
 8015710:	4318      	orrs	r0, r3
 8015712:	d101      	bne.n	8015718 <_dtoa_r+0x88>
 8015714:	f000 fdbf 	bl	8016296 <_dtoa_r+0xc06>
 8015718:	48b3      	ldr	r0, [pc, #716]	; (80159e8 <_dtoa_r+0x358>)
 801571a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801571c:	9006      	str	r0, [sp, #24]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d002      	beq.n	8015728 <_dtoa_r+0x98>
 8015722:	4bb2      	ldr	r3, [pc, #712]	; (80159ec <_dtoa_r+0x35c>)
 8015724:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015726:	6013      	str	r3, [r2, #0]
 8015728:	9806      	ldr	r0, [sp, #24]
 801572a:	b01d      	add	sp, #116	; 0x74
 801572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801572e:	2300      	movs	r3, #0
 8015730:	602b      	str	r3, [r5, #0]
 8015732:	e7e1      	b.n	80156f8 <_dtoa_r+0x68>
 8015734:	9b08      	ldr	r3, [sp, #32]
 8015736:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015738:	9312      	str	r3, [sp, #72]	; 0x48
 801573a:	9413      	str	r4, [sp, #76]	; 0x4c
 801573c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801573e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015740:	2200      	movs	r2, #0
 8015742:	2300      	movs	r3, #0
 8015744:	f7ea fe88 	bl	8000458 <__aeabi_dcmpeq>
 8015748:	1e04      	subs	r4, r0, #0
 801574a:	d009      	beq.n	8015760 <_dtoa_r+0xd0>
 801574c:	2301      	movs	r3, #1
 801574e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015750:	6013      	str	r3, [r2, #0]
 8015752:	4ba7      	ldr	r3, [pc, #668]	; (80159f0 <_dtoa_r+0x360>)
 8015754:	9306      	str	r3, [sp, #24]
 8015756:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015758:	2b00      	cmp	r3, #0
 801575a:	d0e5      	beq.n	8015728 <_dtoa_r+0x98>
 801575c:	4ba5      	ldr	r3, [pc, #660]	; (80159f4 <_dtoa_r+0x364>)
 801575e:	e7e1      	b.n	8015724 <_dtoa_r+0x94>
 8015760:	ab1a      	add	r3, sp, #104	; 0x68
 8015762:	9301      	str	r3, [sp, #4]
 8015764:	ab1b      	add	r3, sp, #108	; 0x6c
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	0038      	movs	r0, r7
 801576a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801576c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801576e:	f001 f901 	bl	8016974 <__d2b>
 8015772:	006e      	lsls	r6, r5, #1
 8015774:	9005      	str	r0, [sp, #20]
 8015776:	0d76      	lsrs	r6, r6, #21
 8015778:	d100      	bne.n	801577c <_dtoa_r+0xec>
 801577a:	e07c      	b.n	8015876 <_dtoa_r+0x1e6>
 801577c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801577e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015782:	4a9d      	ldr	r2, [pc, #628]	; (80159f8 <_dtoa_r+0x368>)
 8015784:	031b      	lsls	r3, r3, #12
 8015786:	0b1b      	lsrs	r3, r3, #12
 8015788:	431a      	orrs	r2, r3
 801578a:	0011      	movs	r1, r2
 801578c:	4b9b      	ldr	r3, [pc, #620]	; (80159fc <_dtoa_r+0x36c>)
 801578e:	9418      	str	r4, [sp, #96]	; 0x60
 8015790:	18f6      	adds	r6, r6, r3
 8015792:	2200      	movs	r2, #0
 8015794:	4b9a      	ldr	r3, [pc, #616]	; (8015a00 <_dtoa_r+0x370>)
 8015796:	f7ec ff4f 	bl	8002638 <__aeabi_dsub>
 801579a:	4a9a      	ldr	r2, [pc, #616]	; (8015a04 <_dtoa_r+0x374>)
 801579c:	4b9a      	ldr	r3, [pc, #616]	; (8015a08 <_dtoa_r+0x378>)
 801579e:	f7ec fcdf 	bl	8002160 <__aeabi_dmul>
 80157a2:	4a9a      	ldr	r2, [pc, #616]	; (8015a0c <_dtoa_r+0x37c>)
 80157a4:	4b9a      	ldr	r3, [pc, #616]	; (8015a10 <_dtoa_r+0x380>)
 80157a6:	f7eb fd9d 	bl	80012e4 <__aeabi_dadd>
 80157aa:	0004      	movs	r4, r0
 80157ac:	0030      	movs	r0, r6
 80157ae:	000d      	movs	r5, r1
 80157b0:	f7ed fb28 	bl	8002e04 <__aeabi_i2d>
 80157b4:	4a97      	ldr	r2, [pc, #604]	; (8015a14 <_dtoa_r+0x384>)
 80157b6:	4b98      	ldr	r3, [pc, #608]	; (8015a18 <_dtoa_r+0x388>)
 80157b8:	f7ec fcd2 	bl	8002160 <__aeabi_dmul>
 80157bc:	0002      	movs	r2, r0
 80157be:	000b      	movs	r3, r1
 80157c0:	0020      	movs	r0, r4
 80157c2:	0029      	movs	r1, r5
 80157c4:	f7eb fd8e 	bl	80012e4 <__aeabi_dadd>
 80157c8:	0004      	movs	r4, r0
 80157ca:	000d      	movs	r5, r1
 80157cc:	f7ed fae4 	bl	8002d98 <__aeabi_d2iz>
 80157d0:	2200      	movs	r2, #0
 80157d2:	9002      	str	r0, [sp, #8]
 80157d4:	2300      	movs	r3, #0
 80157d6:	0020      	movs	r0, r4
 80157d8:	0029      	movs	r1, r5
 80157da:	f7ea fe43 	bl	8000464 <__aeabi_dcmplt>
 80157de:	2800      	cmp	r0, #0
 80157e0:	d00b      	beq.n	80157fa <_dtoa_r+0x16a>
 80157e2:	9802      	ldr	r0, [sp, #8]
 80157e4:	f7ed fb0e 	bl	8002e04 <__aeabi_i2d>
 80157e8:	002b      	movs	r3, r5
 80157ea:	0022      	movs	r2, r4
 80157ec:	f7ea fe34 	bl	8000458 <__aeabi_dcmpeq>
 80157f0:	4243      	negs	r3, r0
 80157f2:	4158      	adcs	r0, r3
 80157f4:	9b02      	ldr	r3, [sp, #8]
 80157f6:	1a1b      	subs	r3, r3, r0
 80157f8:	9302      	str	r3, [sp, #8]
 80157fa:	2301      	movs	r3, #1
 80157fc:	9316      	str	r3, [sp, #88]	; 0x58
 80157fe:	9b02      	ldr	r3, [sp, #8]
 8015800:	2b16      	cmp	r3, #22
 8015802:	d80f      	bhi.n	8015824 <_dtoa_r+0x194>
 8015804:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015806:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015808:	00da      	lsls	r2, r3, #3
 801580a:	4b84      	ldr	r3, [pc, #528]	; (8015a1c <_dtoa_r+0x38c>)
 801580c:	189b      	adds	r3, r3, r2
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	f7ea fe27 	bl	8000464 <__aeabi_dcmplt>
 8015816:	2800      	cmp	r0, #0
 8015818:	d049      	beq.n	80158ae <_dtoa_r+0x21e>
 801581a:	9b02      	ldr	r3, [sp, #8]
 801581c:	3b01      	subs	r3, #1
 801581e:	9302      	str	r3, [sp, #8]
 8015820:	2300      	movs	r3, #0
 8015822:	9316      	str	r3, [sp, #88]	; 0x58
 8015824:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015826:	1b9e      	subs	r6, r3, r6
 8015828:	2300      	movs	r3, #0
 801582a:	930a      	str	r3, [sp, #40]	; 0x28
 801582c:	0033      	movs	r3, r6
 801582e:	3b01      	subs	r3, #1
 8015830:	930d      	str	r3, [sp, #52]	; 0x34
 8015832:	d504      	bpl.n	801583e <_dtoa_r+0x1ae>
 8015834:	2301      	movs	r3, #1
 8015836:	1b9b      	subs	r3, r3, r6
 8015838:	930a      	str	r3, [sp, #40]	; 0x28
 801583a:	2300      	movs	r3, #0
 801583c:	930d      	str	r3, [sp, #52]	; 0x34
 801583e:	9b02      	ldr	r3, [sp, #8]
 8015840:	2b00      	cmp	r3, #0
 8015842:	db36      	blt.n	80158b2 <_dtoa_r+0x222>
 8015844:	9a02      	ldr	r2, [sp, #8]
 8015846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015848:	4694      	mov	ip, r2
 801584a:	4463      	add	r3, ip
 801584c:	930d      	str	r3, [sp, #52]	; 0x34
 801584e:	2300      	movs	r3, #0
 8015850:	9215      	str	r2, [sp, #84]	; 0x54
 8015852:	930e      	str	r3, [sp, #56]	; 0x38
 8015854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015856:	2401      	movs	r4, #1
 8015858:	2b09      	cmp	r3, #9
 801585a:	d864      	bhi.n	8015926 <_dtoa_r+0x296>
 801585c:	2b05      	cmp	r3, #5
 801585e:	dd02      	ble.n	8015866 <_dtoa_r+0x1d6>
 8015860:	2400      	movs	r4, #0
 8015862:	3b04      	subs	r3, #4
 8015864:	9322      	str	r3, [sp, #136]	; 0x88
 8015866:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015868:	1e98      	subs	r0, r3, #2
 801586a:	2803      	cmp	r0, #3
 801586c:	d864      	bhi.n	8015938 <_dtoa_r+0x2a8>
 801586e:	f7ea fc59 	bl	8000124 <__gnu_thumb1_case_uqi>
 8015872:	3829      	.short	0x3829
 8015874:	5836      	.short	0x5836
 8015876:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015878:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801587a:	189e      	adds	r6, r3, r2
 801587c:	4b68      	ldr	r3, [pc, #416]	; (8015a20 <_dtoa_r+0x390>)
 801587e:	18f2      	adds	r2, r6, r3
 8015880:	2a20      	cmp	r2, #32
 8015882:	dd0f      	ble.n	80158a4 <_dtoa_r+0x214>
 8015884:	2340      	movs	r3, #64	; 0x40
 8015886:	1a9b      	subs	r3, r3, r2
 8015888:	409d      	lsls	r5, r3
 801588a:	4b66      	ldr	r3, [pc, #408]	; (8015a24 <_dtoa_r+0x394>)
 801588c:	9802      	ldr	r0, [sp, #8]
 801588e:	18f3      	adds	r3, r6, r3
 8015890:	40d8      	lsrs	r0, r3
 8015892:	4328      	orrs	r0, r5
 8015894:	f7ed fae6 	bl	8002e64 <__aeabi_ui2d>
 8015898:	2301      	movs	r3, #1
 801589a:	4c63      	ldr	r4, [pc, #396]	; (8015a28 <_dtoa_r+0x398>)
 801589c:	3e01      	subs	r6, #1
 801589e:	1909      	adds	r1, r1, r4
 80158a0:	9318      	str	r3, [sp, #96]	; 0x60
 80158a2:	e776      	b.n	8015792 <_dtoa_r+0x102>
 80158a4:	2320      	movs	r3, #32
 80158a6:	9802      	ldr	r0, [sp, #8]
 80158a8:	1a9b      	subs	r3, r3, r2
 80158aa:	4098      	lsls	r0, r3
 80158ac:	e7f2      	b.n	8015894 <_dtoa_r+0x204>
 80158ae:	9016      	str	r0, [sp, #88]	; 0x58
 80158b0:	e7b8      	b.n	8015824 <_dtoa_r+0x194>
 80158b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158b4:	9a02      	ldr	r2, [sp, #8]
 80158b6:	1a9b      	subs	r3, r3, r2
 80158b8:	930a      	str	r3, [sp, #40]	; 0x28
 80158ba:	4253      	negs	r3, r2
 80158bc:	930e      	str	r3, [sp, #56]	; 0x38
 80158be:	2300      	movs	r3, #0
 80158c0:	9315      	str	r3, [sp, #84]	; 0x54
 80158c2:	e7c7      	b.n	8015854 <_dtoa_r+0x1c4>
 80158c4:	2300      	movs	r3, #0
 80158c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80158c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80158ca:	930c      	str	r3, [sp, #48]	; 0x30
 80158cc:	9307      	str	r3, [sp, #28]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	dc13      	bgt.n	80158fa <_dtoa_r+0x26a>
 80158d2:	2301      	movs	r3, #1
 80158d4:	001a      	movs	r2, r3
 80158d6:	930c      	str	r3, [sp, #48]	; 0x30
 80158d8:	9307      	str	r3, [sp, #28]
 80158da:	9223      	str	r2, [sp, #140]	; 0x8c
 80158dc:	e00d      	b.n	80158fa <_dtoa_r+0x26a>
 80158de:	2301      	movs	r3, #1
 80158e0:	e7f1      	b.n	80158c6 <_dtoa_r+0x236>
 80158e2:	2300      	movs	r3, #0
 80158e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80158e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80158e8:	4694      	mov	ip, r2
 80158ea:	9b02      	ldr	r3, [sp, #8]
 80158ec:	4463      	add	r3, ip
 80158ee:	930c      	str	r3, [sp, #48]	; 0x30
 80158f0:	3301      	adds	r3, #1
 80158f2:	9307      	str	r3, [sp, #28]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	dc00      	bgt.n	80158fa <_dtoa_r+0x26a>
 80158f8:	2301      	movs	r3, #1
 80158fa:	2200      	movs	r2, #0
 80158fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158fe:	6042      	str	r2, [r0, #4]
 8015900:	3204      	adds	r2, #4
 8015902:	0015      	movs	r5, r2
 8015904:	3514      	adds	r5, #20
 8015906:	6841      	ldr	r1, [r0, #4]
 8015908:	429d      	cmp	r5, r3
 801590a:	d919      	bls.n	8015940 <_dtoa_r+0x2b0>
 801590c:	0038      	movs	r0, r7
 801590e:	f000 fcf9 	bl	8016304 <_Balloc>
 8015912:	9006      	str	r0, [sp, #24]
 8015914:	2800      	cmp	r0, #0
 8015916:	d117      	bne.n	8015948 <_dtoa_r+0x2b8>
 8015918:	21d5      	movs	r1, #213	; 0xd5
 801591a:	0002      	movs	r2, r0
 801591c:	4b43      	ldr	r3, [pc, #268]	; (8015a2c <_dtoa_r+0x39c>)
 801591e:	0049      	lsls	r1, r1, #1
 8015920:	e6cb      	b.n	80156ba <_dtoa_r+0x2a>
 8015922:	2301      	movs	r3, #1
 8015924:	e7de      	b.n	80158e4 <_dtoa_r+0x254>
 8015926:	2300      	movs	r3, #0
 8015928:	940f      	str	r4, [sp, #60]	; 0x3c
 801592a:	9322      	str	r3, [sp, #136]	; 0x88
 801592c:	3b01      	subs	r3, #1
 801592e:	930c      	str	r3, [sp, #48]	; 0x30
 8015930:	9307      	str	r3, [sp, #28]
 8015932:	2200      	movs	r2, #0
 8015934:	3313      	adds	r3, #19
 8015936:	e7d0      	b.n	80158da <_dtoa_r+0x24a>
 8015938:	2301      	movs	r3, #1
 801593a:	930f      	str	r3, [sp, #60]	; 0x3c
 801593c:	3b02      	subs	r3, #2
 801593e:	e7f6      	b.n	801592e <_dtoa_r+0x29e>
 8015940:	3101      	adds	r1, #1
 8015942:	6041      	str	r1, [r0, #4]
 8015944:	0052      	lsls	r2, r2, #1
 8015946:	e7dc      	b.n	8015902 <_dtoa_r+0x272>
 8015948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801594a:	9a06      	ldr	r2, [sp, #24]
 801594c:	601a      	str	r2, [r3, #0]
 801594e:	9b07      	ldr	r3, [sp, #28]
 8015950:	2b0e      	cmp	r3, #14
 8015952:	d900      	bls.n	8015956 <_dtoa_r+0x2c6>
 8015954:	e0eb      	b.n	8015b2e <_dtoa_r+0x49e>
 8015956:	2c00      	cmp	r4, #0
 8015958:	d100      	bne.n	801595c <_dtoa_r+0x2cc>
 801595a:	e0e8      	b.n	8015b2e <_dtoa_r+0x49e>
 801595c:	9b02      	ldr	r3, [sp, #8]
 801595e:	2b00      	cmp	r3, #0
 8015960:	dd68      	ble.n	8015a34 <_dtoa_r+0x3a4>
 8015962:	001a      	movs	r2, r3
 8015964:	210f      	movs	r1, #15
 8015966:	4b2d      	ldr	r3, [pc, #180]	; (8015a1c <_dtoa_r+0x38c>)
 8015968:	400a      	ands	r2, r1
 801596a:	00d2      	lsls	r2, r2, #3
 801596c:	189b      	adds	r3, r3, r2
 801596e:	681d      	ldr	r5, [r3, #0]
 8015970:	685e      	ldr	r6, [r3, #4]
 8015972:	9b02      	ldr	r3, [sp, #8]
 8015974:	111c      	asrs	r4, r3, #4
 8015976:	2302      	movs	r3, #2
 8015978:	9310      	str	r3, [sp, #64]	; 0x40
 801597a:	9b02      	ldr	r3, [sp, #8]
 801597c:	05db      	lsls	r3, r3, #23
 801597e:	d50b      	bpl.n	8015998 <_dtoa_r+0x308>
 8015980:	4b2b      	ldr	r3, [pc, #172]	; (8015a30 <_dtoa_r+0x3a0>)
 8015982:	400c      	ands	r4, r1
 8015984:	6a1a      	ldr	r2, [r3, #32]
 8015986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015988:	9812      	ldr	r0, [sp, #72]	; 0x48
 801598a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801598c:	f7eb ffe6 	bl	800195c <__aeabi_ddiv>
 8015990:	2303      	movs	r3, #3
 8015992:	9008      	str	r0, [sp, #32]
 8015994:	9109      	str	r1, [sp, #36]	; 0x24
 8015996:	9310      	str	r3, [sp, #64]	; 0x40
 8015998:	4b25      	ldr	r3, [pc, #148]	; (8015a30 <_dtoa_r+0x3a0>)
 801599a:	9314      	str	r3, [sp, #80]	; 0x50
 801599c:	2c00      	cmp	r4, #0
 801599e:	d108      	bne.n	80159b2 <_dtoa_r+0x322>
 80159a0:	9808      	ldr	r0, [sp, #32]
 80159a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159a4:	002a      	movs	r2, r5
 80159a6:	0033      	movs	r3, r6
 80159a8:	f7eb ffd8 	bl	800195c <__aeabi_ddiv>
 80159ac:	9008      	str	r0, [sp, #32]
 80159ae:	9109      	str	r1, [sp, #36]	; 0x24
 80159b0:	e05c      	b.n	8015a6c <_dtoa_r+0x3dc>
 80159b2:	2301      	movs	r3, #1
 80159b4:	421c      	tst	r4, r3
 80159b6:	d00b      	beq.n	80159d0 <_dtoa_r+0x340>
 80159b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159ba:	0028      	movs	r0, r5
 80159bc:	3301      	adds	r3, #1
 80159be:	9310      	str	r3, [sp, #64]	; 0x40
 80159c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159c2:	0031      	movs	r1, r6
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	685b      	ldr	r3, [r3, #4]
 80159c8:	f7ec fbca 	bl	8002160 <__aeabi_dmul>
 80159cc:	0005      	movs	r5, r0
 80159ce:	000e      	movs	r6, r1
 80159d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159d2:	1064      	asrs	r4, r4, #1
 80159d4:	3308      	adds	r3, #8
 80159d6:	e7e0      	b.n	801599a <_dtoa_r+0x30a>
 80159d8:	08018e89 	.word	0x08018e89
 80159dc:	08018ea0 	.word	0x08018ea0
 80159e0:	7ff00000 	.word	0x7ff00000
 80159e4:	0000270f 	.word	0x0000270f
 80159e8:	08018e85 	.word	0x08018e85
 80159ec:	08018e88 	.word	0x08018e88
 80159f0:	08018e58 	.word	0x08018e58
 80159f4:	08018e59 	.word	0x08018e59
 80159f8:	3ff00000 	.word	0x3ff00000
 80159fc:	fffffc01 	.word	0xfffffc01
 8015a00:	3ff80000 	.word	0x3ff80000
 8015a04:	636f4361 	.word	0x636f4361
 8015a08:	3fd287a7 	.word	0x3fd287a7
 8015a0c:	8b60c8b3 	.word	0x8b60c8b3
 8015a10:	3fc68a28 	.word	0x3fc68a28
 8015a14:	509f79fb 	.word	0x509f79fb
 8015a18:	3fd34413 	.word	0x3fd34413
 8015a1c:	08018f90 	.word	0x08018f90
 8015a20:	00000432 	.word	0x00000432
 8015a24:	00000412 	.word	0x00000412
 8015a28:	fe100000 	.word	0xfe100000
 8015a2c:	08018efb 	.word	0x08018efb
 8015a30:	08018f68 	.word	0x08018f68
 8015a34:	2302      	movs	r3, #2
 8015a36:	9310      	str	r3, [sp, #64]	; 0x40
 8015a38:	9b02      	ldr	r3, [sp, #8]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d016      	beq.n	8015a6c <_dtoa_r+0x3dc>
 8015a3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015a40:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015a42:	425c      	negs	r4, r3
 8015a44:	230f      	movs	r3, #15
 8015a46:	4ab6      	ldr	r2, [pc, #728]	; (8015d20 <_dtoa_r+0x690>)
 8015a48:	4023      	ands	r3, r4
 8015a4a:	00db      	lsls	r3, r3, #3
 8015a4c:	18d3      	adds	r3, r2, r3
 8015a4e:	681a      	ldr	r2, [r3, #0]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	f7ec fb85 	bl	8002160 <__aeabi_dmul>
 8015a56:	2601      	movs	r6, #1
 8015a58:	2300      	movs	r3, #0
 8015a5a:	9008      	str	r0, [sp, #32]
 8015a5c:	9109      	str	r1, [sp, #36]	; 0x24
 8015a5e:	4db1      	ldr	r5, [pc, #708]	; (8015d24 <_dtoa_r+0x694>)
 8015a60:	1124      	asrs	r4, r4, #4
 8015a62:	2c00      	cmp	r4, #0
 8015a64:	d000      	beq.n	8015a68 <_dtoa_r+0x3d8>
 8015a66:	e094      	b.n	8015b92 <_dtoa_r+0x502>
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d19f      	bne.n	80159ac <_dtoa_r+0x31c>
 8015a6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d100      	bne.n	8015a74 <_dtoa_r+0x3e4>
 8015a72:	e09b      	b.n	8015bac <_dtoa_r+0x51c>
 8015a74:	9c08      	ldr	r4, [sp, #32]
 8015a76:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015a78:	2200      	movs	r2, #0
 8015a7a:	0020      	movs	r0, r4
 8015a7c:	0029      	movs	r1, r5
 8015a7e:	4baa      	ldr	r3, [pc, #680]	; (8015d28 <_dtoa_r+0x698>)
 8015a80:	f7ea fcf0 	bl	8000464 <__aeabi_dcmplt>
 8015a84:	2800      	cmp	r0, #0
 8015a86:	d100      	bne.n	8015a8a <_dtoa_r+0x3fa>
 8015a88:	e090      	b.n	8015bac <_dtoa_r+0x51c>
 8015a8a:	9b07      	ldr	r3, [sp, #28]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d100      	bne.n	8015a92 <_dtoa_r+0x402>
 8015a90:	e08c      	b.n	8015bac <_dtoa_r+0x51c>
 8015a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	dd46      	ble.n	8015b26 <_dtoa_r+0x496>
 8015a98:	9b02      	ldr	r3, [sp, #8]
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	0020      	movs	r0, r4
 8015a9e:	0029      	movs	r1, r5
 8015aa0:	1e5e      	subs	r6, r3, #1
 8015aa2:	4ba2      	ldr	r3, [pc, #648]	; (8015d2c <_dtoa_r+0x69c>)
 8015aa4:	f7ec fb5c 	bl	8002160 <__aeabi_dmul>
 8015aa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015aaa:	9008      	str	r0, [sp, #32]
 8015aac:	9109      	str	r1, [sp, #36]	; 0x24
 8015aae:	3301      	adds	r3, #1
 8015ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8015ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ab4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015ab6:	9c08      	ldr	r4, [sp, #32]
 8015ab8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015aba:	9314      	str	r3, [sp, #80]	; 0x50
 8015abc:	f7ed f9a2 	bl	8002e04 <__aeabi_i2d>
 8015ac0:	0022      	movs	r2, r4
 8015ac2:	002b      	movs	r3, r5
 8015ac4:	f7ec fb4c 	bl	8002160 <__aeabi_dmul>
 8015ac8:	2200      	movs	r2, #0
 8015aca:	4b99      	ldr	r3, [pc, #612]	; (8015d30 <_dtoa_r+0x6a0>)
 8015acc:	f7eb fc0a 	bl	80012e4 <__aeabi_dadd>
 8015ad0:	9010      	str	r0, [sp, #64]	; 0x40
 8015ad2:	9111      	str	r1, [sp, #68]	; 0x44
 8015ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ad8:	9208      	str	r2, [sp, #32]
 8015ada:	9309      	str	r3, [sp, #36]	; 0x24
 8015adc:	4a95      	ldr	r2, [pc, #596]	; (8015d34 <_dtoa_r+0x6a4>)
 8015ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ae0:	4694      	mov	ip, r2
 8015ae2:	4463      	add	r3, ip
 8015ae4:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8015ae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d161      	bne.n	8015bb2 <_dtoa_r+0x522>
 8015aee:	2200      	movs	r2, #0
 8015af0:	0020      	movs	r0, r4
 8015af2:	0029      	movs	r1, r5
 8015af4:	4b90      	ldr	r3, [pc, #576]	; (8015d38 <_dtoa_r+0x6a8>)
 8015af6:	f7ec fd9f 	bl	8002638 <__aeabi_dsub>
 8015afa:	9a08      	ldr	r2, [sp, #32]
 8015afc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015afe:	0004      	movs	r4, r0
 8015b00:	000d      	movs	r5, r1
 8015b02:	f7ea fcc3 	bl	800048c <__aeabi_dcmpgt>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	d000      	beq.n	8015b0c <_dtoa_r+0x47c>
 8015b0a:	e2af      	b.n	801606c <_dtoa_r+0x9dc>
 8015b0c:	488b      	ldr	r0, [pc, #556]	; (8015d3c <_dtoa_r+0x6ac>)
 8015b0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b10:	4684      	mov	ip, r0
 8015b12:	4461      	add	r1, ip
 8015b14:	000b      	movs	r3, r1
 8015b16:	0020      	movs	r0, r4
 8015b18:	0029      	movs	r1, r5
 8015b1a:	9a08      	ldr	r2, [sp, #32]
 8015b1c:	f7ea fca2 	bl	8000464 <__aeabi_dcmplt>
 8015b20:	2800      	cmp	r0, #0
 8015b22:	d000      	beq.n	8015b26 <_dtoa_r+0x496>
 8015b24:	e29f      	b.n	8016066 <_dtoa_r+0x9d6>
 8015b26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015b2a:	9308      	str	r3, [sp, #32]
 8015b2c:	9409      	str	r4, [sp, #36]	; 0x24
 8015b2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	da00      	bge.n	8015b36 <_dtoa_r+0x4a6>
 8015b34:	e172      	b.n	8015e1c <_dtoa_r+0x78c>
 8015b36:	9a02      	ldr	r2, [sp, #8]
 8015b38:	2a0e      	cmp	r2, #14
 8015b3a:	dd00      	ble.n	8015b3e <_dtoa_r+0x4ae>
 8015b3c:	e16e      	b.n	8015e1c <_dtoa_r+0x78c>
 8015b3e:	4b78      	ldr	r3, [pc, #480]	; (8015d20 <_dtoa_r+0x690>)
 8015b40:	00d2      	lsls	r2, r2, #3
 8015b42:	189b      	adds	r3, r3, r2
 8015b44:	685c      	ldr	r4, [r3, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	930a      	str	r3, [sp, #40]	; 0x28
 8015b4a:	940b      	str	r4, [sp, #44]	; 0x2c
 8015b4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	db00      	blt.n	8015b54 <_dtoa_r+0x4c4>
 8015b52:	e0f7      	b.n	8015d44 <_dtoa_r+0x6b4>
 8015b54:	9b07      	ldr	r3, [sp, #28]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	dd00      	ble.n	8015b5c <_dtoa_r+0x4cc>
 8015b5a:	e0f3      	b.n	8015d44 <_dtoa_r+0x6b4>
 8015b5c:	d000      	beq.n	8015b60 <_dtoa_r+0x4d0>
 8015b5e:	e282      	b.n	8016066 <_dtoa_r+0x9d6>
 8015b60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b64:	2200      	movs	r2, #0
 8015b66:	4b74      	ldr	r3, [pc, #464]	; (8015d38 <_dtoa_r+0x6a8>)
 8015b68:	f7ec fafa 	bl	8002160 <__aeabi_dmul>
 8015b6c:	9a08      	ldr	r2, [sp, #32]
 8015b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b70:	f7ea fc96 	bl	80004a0 <__aeabi_dcmpge>
 8015b74:	9e07      	ldr	r6, [sp, #28]
 8015b76:	0035      	movs	r5, r6
 8015b78:	2800      	cmp	r0, #0
 8015b7a:	d000      	beq.n	8015b7e <_dtoa_r+0x4ee>
 8015b7c:	e259      	b.n	8016032 <_dtoa_r+0x9a2>
 8015b7e:	9b06      	ldr	r3, [sp, #24]
 8015b80:	9a06      	ldr	r2, [sp, #24]
 8015b82:	3301      	adds	r3, #1
 8015b84:	9308      	str	r3, [sp, #32]
 8015b86:	2331      	movs	r3, #49	; 0x31
 8015b88:	7013      	strb	r3, [r2, #0]
 8015b8a:	9b02      	ldr	r3, [sp, #8]
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	9302      	str	r3, [sp, #8]
 8015b90:	e254      	b.n	801603c <_dtoa_r+0x9ac>
 8015b92:	4234      	tst	r4, r6
 8015b94:	d007      	beq.n	8015ba6 <_dtoa_r+0x516>
 8015b96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b98:	3301      	adds	r3, #1
 8015b9a:	9310      	str	r3, [sp, #64]	; 0x40
 8015b9c:	682a      	ldr	r2, [r5, #0]
 8015b9e:	686b      	ldr	r3, [r5, #4]
 8015ba0:	f7ec fade 	bl	8002160 <__aeabi_dmul>
 8015ba4:	0033      	movs	r3, r6
 8015ba6:	1064      	asrs	r4, r4, #1
 8015ba8:	3508      	adds	r5, #8
 8015baa:	e75a      	b.n	8015a62 <_dtoa_r+0x3d2>
 8015bac:	9e02      	ldr	r6, [sp, #8]
 8015bae:	9b07      	ldr	r3, [sp, #28]
 8015bb0:	e780      	b.n	8015ab4 <_dtoa_r+0x424>
 8015bb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015bb6:	1e5a      	subs	r2, r3, #1
 8015bb8:	4b59      	ldr	r3, [pc, #356]	; (8015d20 <_dtoa_r+0x690>)
 8015bba:	00d2      	lsls	r2, r2, #3
 8015bbc:	189b      	adds	r3, r3, r2
 8015bbe:	681a      	ldr	r2, [r3, #0]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	2900      	cmp	r1, #0
 8015bc4:	d051      	beq.n	8015c6a <_dtoa_r+0x5da>
 8015bc6:	2000      	movs	r0, #0
 8015bc8:	495d      	ldr	r1, [pc, #372]	; (8015d40 <_dtoa_r+0x6b0>)
 8015bca:	f7eb fec7 	bl	800195c <__aeabi_ddiv>
 8015bce:	9a08      	ldr	r2, [sp, #32]
 8015bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bd2:	f7ec fd31 	bl	8002638 <__aeabi_dsub>
 8015bd6:	9a06      	ldr	r2, [sp, #24]
 8015bd8:	9b06      	ldr	r3, [sp, #24]
 8015bda:	4694      	mov	ip, r2
 8015bdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8015bde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015be0:	9010      	str	r0, [sp, #64]	; 0x40
 8015be2:	9111      	str	r1, [sp, #68]	; 0x44
 8015be4:	4463      	add	r3, ip
 8015be6:	9319      	str	r3, [sp, #100]	; 0x64
 8015be8:	0029      	movs	r1, r5
 8015bea:	0020      	movs	r0, r4
 8015bec:	f7ed f8d4 	bl	8002d98 <__aeabi_d2iz>
 8015bf0:	9014      	str	r0, [sp, #80]	; 0x50
 8015bf2:	f7ed f907 	bl	8002e04 <__aeabi_i2d>
 8015bf6:	0002      	movs	r2, r0
 8015bf8:	000b      	movs	r3, r1
 8015bfa:	0020      	movs	r0, r4
 8015bfc:	0029      	movs	r1, r5
 8015bfe:	f7ec fd1b 	bl	8002638 <__aeabi_dsub>
 8015c02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c06:	3301      	adds	r3, #1
 8015c08:	9308      	str	r3, [sp, #32]
 8015c0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c0c:	0004      	movs	r4, r0
 8015c0e:	3330      	adds	r3, #48	; 0x30
 8015c10:	7013      	strb	r3, [r2, #0]
 8015c12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c16:	000d      	movs	r5, r1
 8015c18:	f7ea fc24 	bl	8000464 <__aeabi_dcmplt>
 8015c1c:	2800      	cmp	r0, #0
 8015c1e:	d175      	bne.n	8015d0c <_dtoa_r+0x67c>
 8015c20:	0022      	movs	r2, r4
 8015c22:	002b      	movs	r3, r5
 8015c24:	2000      	movs	r0, #0
 8015c26:	4940      	ldr	r1, [pc, #256]	; (8015d28 <_dtoa_r+0x698>)
 8015c28:	f7ec fd06 	bl	8002638 <__aeabi_dsub>
 8015c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c30:	f7ea fc18 	bl	8000464 <__aeabi_dcmplt>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d000      	beq.n	8015c3a <_dtoa_r+0x5aa>
 8015c38:	e0d2      	b.n	8015de0 <_dtoa_r+0x750>
 8015c3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c3c:	9a08      	ldr	r2, [sp, #32]
 8015c3e:	4293      	cmp	r3, r2
 8015c40:	d100      	bne.n	8015c44 <_dtoa_r+0x5b4>
 8015c42:	e770      	b.n	8015b26 <_dtoa_r+0x496>
 8015c44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015c46:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015c48:	2200      	movs	r2, #0
 8015c4a:	4b38      	ldr	r3, [pc, #224]	; (8015d2c <_dtoa_r+0x69c>)
 8015c4c:	f7ec fa88 	bl	8002160 <__aeabi_dmul>
 8015c50:	4b36      	ldr	r3, [pc, #216]	; (8015d2c <_dtoa_r+0x69c>)
 8015c52:	9010      	str	r0, [sp, #64]	; 0x40
 8015c54:	9111      	str	r1, [sp, #68]	; 0x44
 8015c56:	2200      	movs	r2, #0
 8015c58:	0020      	movs	r0, r4
 8015c5a:	0029      	movs	r1, r5
 8015c5c:	f7ec fa80 	bl	8002160 <__aeabi_dmul>
 8015c60:	9b08      	ldr	r3, [sp, #32]
 8015c62:	0004      	movs	r4, r0
 8015c64:	000d      	movs	r5, r1
 8015c66:	9317      	str	r3, [sp, #92]	; 0x5c
 8015c68:	e7be      	b.n	8015be8 <_dtoa_r+0x558>
 8015c6a:	9808      	ldr	r0, [sp, #32]
 8015c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c6e:	f7ec fa77 	bl	8002160 <__aeabi_dmul>
 8015c72:	9a06      	ldr	r2, [sp, #24]
 8015c74:	9b06      	ldr	r3, [sp, #24]
 8015c76:	4694      	mov	ip, r2
 8015c78:	9308      	str	r3, [sp, #32]
 8015c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c7c:	9010      	str	r0, [sp, #64]	; 0x40
 8015c7e:	9111      	str	r1, [sp, #68]	; 0x44
 8015c80:	4463      	add	r3, ip
 8015c82:	9319      	str	r3, [sp, #100]	; 0x64
 8015c84:	0029      	movs	r1, r5
 8015c86:	0020      	movs	r0, r4
 8015c88:	f7ed f886 	bl	8002d98 <__aeabi_d2iz>
 8015c8c:	9017      	str	r0, [sp, #92]	; 0x5c
 8015c8e:	f7ed f8b9 	bl	8002e04 <__aeabi_i2d>
 8015c92:	0002      	movs	r2, r0
 8015c94:	000b      	movs	r3, r1
 8015c96:	0020      	movs	r0, r4
 8015c98:	0029      	movs	r1, r5
 8015c9a:	f7ec fccd 	bl	8002638 <__aeabi_dsub>
 8015c9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ca0:	9a08      	ldr	r2, [sp, #32]
 8015ca2:	3330      	adds	r3, #48	; 0x30
 8015ca4:	7013      	strb	r3, [r2, #0]
 8015ca6:	0013      	movs	r3, r2
 8015ca8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015caa:	3301      	adds	r3, #1
 8015cac:	0004      	movs	r4, r0
 8015cae:	000d      	movs	r5, r1
 8015cb0:	9308      	str	r3, [sp, #32]
 8015cb2:	4293      	cmp	r3, r2
 8015cb4:	d12c      	bne.n	8015d10 <_dtoa_r+0x680>
 8015cb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015cb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015cba:	9a06      	ldr	r2, [sp, #24]
 8015cbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cbe:	4694      	mov	ip, r2
 8015cc0:	4463      	add	r3, ip
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	9308      	str	r3, [sp, #32]
 8015cc6:	4b1e      	ldr	r3, [pc, #120]	; (8015d40 <_dtoa_r+0x6b0>)
 8015cc8:	f7eb fb0c 	bl	80012e4 <__aeabi_dadd>
 8015ccc:	0002      	movs	r2, r0
 8015cce:	000b      	movs	r3, r1
 8015cd0:	0020      	movs	r0, r4
 8015cd2:	0029      	movs	r1, r5
 8015cd4:	f7ea fbda 	bl	800048c <__aeabi_dcmpgt>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	d000      	beq.n	8015cde <_dtoa_r+0x64e>
 8015cdc:	e080      	b.n	8015de0 <_dtoa_r+0x750>
 8015cde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ce2:	2000      	movs	r0, #0
 8015ce4:	4916      	ldr	r1, [pc, #88]	; (8015d40 <_dtoa_r+0x6b0>)
 8015ce6:	f7ec fca7 	bl	8002638 <__aeabi_dsub>
 8015cea:	0002      	movs	r2, r0
 8015cec:	000b      	movs	r3, r1
 8015cee:	0020      	movs	r0, r4
 8015cf0:	0029      	movs	r1, r5
 8015cf2:	f7ea fbb7 	bl	8000464 <__aeabi_dcmplt>
 8015cf6:	2800      	cmp	r0, #0
 8015cf8:	d100      	bne.n	8015cfc <_dtoa_r+0x66c>
 8015cfa:	e714      	b.n	8015b26 <_dtoa_r+0x496>
 8015cfc:	9b08      	ldr	r3, [sp, #32]
 8015cfe:	001a      	movs	r2, r3
 8015d00:	3a01      	subs	r2, #1
 8015d02:	9208      	str	r2, [sp, #32]
 8015d04:	7812      	ldrb	r2, [r2, #0]
 8015d06:	2a30      	cmp	r2, #48	; 0x30
 8015d08:	d0f8      	beq.n	8015cfc <_dtoa_r+0x66c>
 8015d0a:	9308      	str	r3, [sp, #32]
 8015d0c:	9602      	str	r6, [sp, #8]
 8015d0e:	e055      	b.n	8015dbc <_dtoa_r+0x72c>
 8015d10:	2200      	movs	r2, #0
 8015d12:	4b06      	ldr	r3, [pc, #24]	; (8015d2c <_dtoa_r+0x69c>)
 8015d14:	f7ec fa24 	bl	8002160 <__aeabi_dmul>
 8015d18:	0004      	movs	r4, r0
 8015d1a:	000d      	movs	r5, r1
 8015d1c:	e7b2      	b.n	8015c84 <_dtoa_r+0x5f4>
 8015d1e:	46c0      	nop			; (mov r8, r8)
 8015d20:	08018f90 	.word	0x08018f90
 8015d24:	08018f68 	.word	0x08018f68
 8015d28:	3ff00000 	.word	0x3ff00000
 8015d2c:	40240000 	.word	0x40240000
 8015d30:	401c0000 	.word	0x401c0000
 8015d34:	fcc00000 	.word	0xfcc00000
 8015d38:	40140000 	.word	0x40140000
 8015d3c:	7cc00000 	.word	0x7cc00000
 8015d40:	3fe00000 	.word	0x3fe00000
 8015d44:	9b07      	ldr	r3, [sp, #28]
 8015d46:	9e06      	ldr	r6, [sp, #24]
 8015d48:	3b01      	subs	r3, #1
 8015d4a:	199b      	adds	r3, r3, r6
 8015d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8015d4e:	9c08      	ldr	r4, [sp, #32]
 8015d50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d56:	0020      	movs	r0, r4
 8015d58:	0029      	movs	r1, r5
 8015d5a:	f7eb fdff 	bl	800195c <__aeabi_ddiv>
 8015d5e:	f7ed f81b 	bl	8002d98 <__aeabi_d2iz>
 8015d62:	9007      	str	r0, [sp, #28]
 8015d64:	f7ed f84e 	bl	8002e04 <__aeabi_i2d>
 8015d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d6c:	f7ec f9f8 	bl	8002160 <__aeabi_dmul>
 8015d70:	0002      	movs	r2, r0
 8015d72:	000b      	movs	r3, r1
 8015d74:	0020      	movs	r0, r4
 8015d76:	0029      	movs	r1, r5
 8015d78:	f7ec fc5e 	bl	8002638 <__aeabi_dsub>
 8015d7c:	0033      	movs	r3, r6
 8015d7e:	9a07      	ldr	r2, [sp, #28]
 8015d80:	3601      	adds	r6, #1
 8015d82:	3230      	adds	r2, #48	; 0x30
 8015d84:	701a      	strb	r2, [r3, #0]
 8015d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015d88:	9608      	str	r6, [sp, #32]
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d139      	bne.n	8015e02 <_dtoa_r+0x772>
 8015d8e:	0002      	movs	r2, r0
 8015d90:	000b      	movs	r3, r1
 8015d92:	f7eb faa7 	bl	80012e4 <__aeabi_dadd>
 8015d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d9a:	0004      	movs	r4, r0
 8015d9c:	000d      	movs	r5, r1
 8015d9e:	f7ea fb75 	bl	800048c <__aeabi_dcmpgt>
 8015da2:	2800      	cmp	r0, #0
 8015da4:	d11b      	bne.n	8015dde <_dtoa_r+0x74e>
 8015da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015daa:	0020      	movs	r0, r4
 8015dac:	0029      	movs	r1, r5
 8015dae:	f7ea fb53 	bl	8000458 <__aeabi_dcmpeq>
 8015db2:	2800      	cmp	r0, #0
 8015db4:	d002      	beq.n	8015dbc <_dtoa_r+0x72c>
 8015db6:	9b07      	ldr	r3, [sp, #28]
 8015db8:	07db      	lsls	r3, r3, #31
 8015dba:	d410      	bmi.n	8015dde <_dtoa_r+0x74e>
 8015dbc:	0038      	movs	r0, r7
 8015dbe:	9905      	ldr	r1, [sp, #20]
 8015dc0:	f000 fae4 	bl	801638c <_Bfree>
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	9a08      	ldr	r2, [sp, #32]
 8015dc8:	9802      	ldr	r0, [sp, #8]
 8015dca:	7013      	strb	r3, [r2, #0]
 8015dcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015dce:	3001      	adds	r0, #1
 8015dd0:	6018      	str	r0, [r3, #0]
 8015dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d100      	bne.n	8015dda <_dtoa_r+0x74a>
 8015dd8:	e4a6      	b.n	8015728 <_dtoa_r+0x98>
 8015dda:	601a      	str	r2, [r3, #0]
 8015ddc:	e4a4      	b.n	8015728 <_dtoa_r+0x98>
 8015dde:	9e02      	ldr	r6, [sp, #8]
 8015de0:	9b08      	ldr	r3, [sp, #32]
 8015de2:	9308      	str	r3, [sp, #32]
 8015de4:	3b01      	subs	r3, #1
 8015de6:	781a      	ldrb	r2, [r3, #0]
 8015de8:	2a39      	cmp	r2, #57	; 0x39
 8015dea:	d106      	bne.n	8015dfa <_dtoa_r+0x76a>
 8015dec:	9a06      	ldr	r2, [sp, #24]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d1f7      	bne.n	8015de2 <_dtoa_r+0x752>
 8015df2:	2230      	movs	r2, #48	; 0x30
 8015df4:	9906      	ldr	r1, [sp, #24]
 8015df6:	3601      	adds	r6, #1
 8015df8:	700a      	strb	r2, [r1, #0]
 8015dfa:	781a      	ldrb	r2, [r3, #0]
 8015dfc:	3201      	adds	r2, #1
 8015dfe:	701a      	strb	r2, [r3, #0]
 8015e00:	e784      	b.n	8015d0c <_dtoa_r+0x67c>
 8015e02:	2200      	movs	r2, #0
 8015e04:	4baa      	ldr	r3, [pc, #680]	; (80160b0 <_dtoa_r+0xa20>)
 8015e06:	f7ec f9ab 	bl	8002160 <__aeabi_dmul>
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	0004      	movs	r4, r0
 8015e10:	000d      	movs	r5, r1
 8015e12:	f7ea fb21 	bl	8000458 <__aeabi_dcmpeq>
 8015e16:	2800      	cmp	r0, #0
 8015e18:	d09b      	beq.n	8015d52 <_dtoa_r+0x6c2>
 8015e1a:	e7cf      	b.n	8015dbc <_dtoa_r+0x72c>
 8015e1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015e1e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015e20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e22:	2d00      	cmp	r5, #0
 8015e24:	d012      	beq.n	8015e4c <_dtoa_r+0x7bc>
 8015e26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015e28:	2a01      	cmp	r2, #1
 8015e2a:	dc66      	bgt.n	8015efa <_dtoa_r+0x86a>
 8015e2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e2e:	2a00      	cmp	r2, #0
 8015e30:	d05d      	beq.n	8015eee <_dtoa_r+0x85e>
 8015e32:	4aa0      	ldr	r2, [pc, #640]	; (80160b4 <_dtoa_r+0xa24>)
 8015e34:	189b      	adds	r3, r3, r2
 8015e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e38:	2101      	movs	r1, #1
 8015e3a:	18d2      	adds	r2, r2, r3
 8015e3c:	920a      	str	r2, [sp, #40]	; 0x28
 8015e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e40:	0038      	movs	r0, r7
 8015e42:	18d3      	adds	r3, r2, r3
 8015e44:	930d      	str	r3, [sp, #52]	; 0x34
 8015e46:	f000 fb51 	bl	80164ec <__i2b>
 8015e4a:	0005      	movs	r5, r0
 8015e4c:	2c00      	cmp	r4, #0
 8015e4e:	dd0e      	ble.n	8015e6e <_dtoa_r+0x7de>
 8015e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	dd0b      	ble.n	8015e6e <_dtoa_r+0x7de>
 8015e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e58:	0023      	movs	r3, r4
 8015e5a:	4294      	cmp	r4, r2
 8015e5c:	dd00      	ble.n	8015e60 <_dtoa_r+0x7d0>
 8015e5e:	0013      	movs	r3, r2
 8015e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e62:	1ae4      	subs	r4, r4, r3
 8015e64:	1ad2      	subs	r2, r2, r3
 8015e66:	920a      	str	r2, [sp, #40]	; 0x28
 8015e68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8015e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d01f      	beq.n	8015eb4 <_dtoa_r+0x824>
 8015e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d054      	beq.n	8015f24 <_dtoa_r+0x894>
 8015e7a:	2e00      	cmp	r6, #0
 8015e7c:	dd11      	ble.n	8015ea2 <_dtoa_r+0x812>
 8015e7e:	0029      	movs	r1, r5
 8015e80:	0032      	movs	r2, r6
 8015e82:	0038      	movs	r0, r7
 8015e84:	f000 fbf8 	bl	8016678 <__pow5mult>
 8015e88:	9a05      	ldr	r2, [sp, #20]
 8015e8a:	0001      	movs	r1, r0
 8015e8c:	0005      	movs	r5, r0
 8015e8e:	0038      	movs	r0, r7
 8015e90:	f000 fb42 	bl	8016518 <__multiply>
 8015e94:	9905      	ldr	r1, [sp, #20]
 8015e96:	9014      	str	r0, [sp, #80]	; 0x50
 8015e98:	0038      	movs	r0, r7
 8015e9a:	f000 fa77 	bl	801638c <_Bfree>
 8015e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ea0:	9305      	str	r3, [sp, #20]
 8015ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ea4:	1b9a      	subs	r2, r3, r6
 8015ea6:	42b3      	cmp	r3, r6
 8015ea8:	d004      	beq.n	8015eb4 <_dtoa_r+0x824>
 8015eaa:	0038      	movs	r0, r7
 8015eac:	9905      	ldr	r1, [sp, #20]
 8015eae:	f000 fbe3 	bl	8016678 <__pow5mult>
 8015eb2:	9005      	str	r0, [sp, #20]
 8015eb4:	2101      	movs	r1, #1
 8015eb6:	0038      	movs	r0, r7
 8015eb8:	f000 fb18 	bl	80164ec <__i2b>
 8015ebc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ebe:	0006      	movs	r6, r0
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	dd31      	ble.n	8015f28 <_dtoa_r+0x898>
 8015ec4:	001a      	movs	r2, r3
 8015ec6:	0001      	movs	r1, r0
 8015ec8:	0038      	movs	r0, r7
 8015eca:	f000 fbd5 	bl	8016678 <__pow5mult>
 8015ece:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015ed0:	0006      	movs	r6, r0
 8015ed2:	2b01      	cmp	r3, #1
 8015ed4:	dd2d      	ble.n	8015f32 <_dtoa_r+0x8a2>
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	930e      	str	r3, [sp, #56]	; 0x38
 8015eda:	6933      	ldr	r3, [r6, #16]
 8015edc:	3303      	adds	r3, #3
 8015ede:	009b      	lsls	r3, r3, #2
 8015ee0:	18f3      	adds	r3, r6, r3
 8015ee2:	6858      	ldr	r0, [r3, #4]
 8015ee4:	f000 faba 	bl	801645c <__hi0bits>
 8015ee8:	2320      	movs	r3, #32
 8015eea:	1a18      	subs	r0, r3, r0
 8015eec:	e039      	b.n	8015f62 <_dtoa_r+0x8d2>
 8015eee:	2336      	movs	r3, #54	; 0x36
 8015ef0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015ef2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015ef4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ef6:	1a9b      	subs	r3, r3, r2
 8015ef8:	e79d      	b.n	8015e36 <_dtoa_r+0x7a6>
 8015efa:	9b07      	ldr	r3, [sp, #28]
 8015efc:	1e5e      	subs	r6, r3, #1
 8015efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f00:	42b3      	cmp	r3, r6
 8015f02:	db07      	blt.n	8015f14 <_dtoa_r+0x884>
 8015f04:	1b9e      	subs	r6, r3, r6
 8015f06:	9b07      	ldr	r3, [sp, #28]
 8015f08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	da93      	bge.n	8015e36 <_dtoa_r+0x7a6>
 8015f0e:	1ae4      	subs	r4, r4, r3
 8015f10:	2300      	movs	r3, #0
 8015f12:	e790      	b.n	8015e36 <_dtoa_r+0x7a6>
 8015f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f18:	1af3      	subs	r3, r6, r3
 8015f1a:	18d3      	adds	r3, r2, r3
 8015f1c:	960e      	str	r6, [sp, #56]	; 0x38
 8015f1e:	9315      	str	r3, [sp, #84]	; 0x54
 8015f20:	2600      	movs	r6, #0
 8015f22:	e7f0      	b.n	8015f06 <_dtoa_r+0x876>
 8015f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f26:	e7c0      	b.n	8015eaa <_dtoa_r+0x81a>
 8015f28:	2300      	movs	r3, #0
 8015f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8015f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	dc13      	bgt.n	8015f5a <_dtoa_r+0x8ca>
 8015f32:	2300      	movs	r3, #0
 8015f34:	930e      	str	r3, [sp, #56]	; 0x38
 8015f36:	9b08      	ldr	r3, [sp, #32]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d10e      	bne.n	8015f5a <_dtoa_r+0x8ca>
 8015f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f3e:	031b      	lsls	r3, r3, #12
 8015f40:	d10b      	bne.n	8015f5a <_dtoa_r+0x8ca>
 8015f42:	4b5d      	ldr	r3, [pc, #372]	; (80160b8 <_dtoa_r+0xa28>)
 8015f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f46:	4213      	tst	r3, r2
 8015f48:	d007      	beq.n	8015f5a <_dtoa_r+0x8ca>
 8015f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f4c:	3301      	adds	r3, #1
 8015f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f52:	3301      	adds	r3, #1
 8015f54:	930d      	str	r3, [sp, #52]	; 0x34
 8015f56:	2301      	movs	r3, #1
 8015f58:	930e      	str	r3, [sp, #56]	; 0x38
 8015f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f5c:	2001      	movs	r0, #1
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1bb      	bne.n	8015eda <_dtoa_r+0x84a>
 8015f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f64:	221f      	movs	r2, #31
 8015f66:	1818      	adds	r0, r3, r0
 8015f68:	0003      	movs	r3, r0
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	4210      	tst	r0, r2
 8015f6e:	d046      	beq.n	8015ffe <_dtoa_r+0x96e>
 8015f70:	3201      	adds	r2, #1
 8015f72:	1ad2      	subs	r2, r2, r3
 8015f74:	2a04      	cmp	r2, #4
 8015f76:	dd3f      	ble.n	8015ff8 <_dtoa_r+0x968>
 8015f78:	221c      	movs	r2, #28
 8015f7a:	1ad3      	subs	r3, r2, r3
 8015f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f7e:	18e4      	adds	r4, r4, r3
 8015f80:	18d2      	adds	r2, r2, r3
 8015f82:	920a      	str	r2, [sp, #40]	; 0x28
 8015f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f86:	18d3      	adds	r3, r2, r3
 8015f88:	930d      	str	r3, [sp, #52]	; 0x34
 8015f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	dd05      	ble.n	8015f9c <_dtoa_r+0x90c>
 8015f90:	001a      	movs	r2, r3
 8015f92:	0038      	movs	r0, r7
 8015f94:	9905      	ldr	r1, [sp, #20]
 8015f96:	f000 fbcb 	bl	8016730 <__lshift>
 8015f9a:	9005      	str	r0, [sp, #20]
 8015f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	dd05      	ble.n	8015fae <_dtoa_r+0x91e>
 8015fa2:	0031      	movs	r1, r6
 8015fa4:	001a      	movs	r2, r3
 8015fa6:	0038      	movs	r0, r7
 8015fa8:	f000 fbc2 	bl	8016730 <__lshift>
 8015fac:	0006      	movs	r6, r0
 8015fae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d026      	beq.n	8016002 <_dtoa_r+0x972>
 8015fb4:	0031      	movs	r1, r6
 8015fb6:	9805      	ldr	r0, [sp, #20]
 8015fb8:	f000 fc28 	bl	801680c <__mcmp>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	da20      	bge.n	8016002 <_dtoa_r+0x972>
 8015fc0:	9b02      	ldr	r3, [sp, #8]
 8015fc2:	220a      	movs	r2, #10
 8015fc4:	3b01      	subs	r3, #1
 8015fc6:	9302      	str	r3, [sp, #8]
 8015fc8:	0038      	movs	r0, r7
 8015fca:	2300      	movs	r3, #0
 8015fcc:	9905      	ldr	r1, [sp, #20]
 8015fce:	f000 fa01 	bl	80163d4 <__multadd>
 8015fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fd4:	9005      	str	r0, [sp, #20]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d100      	bne.n	8015fdc <_dtoa_r+0x94c>
 8015fda:	e166      	b.n	80162aa <_dtoa_r+0xc1a>
 8015fdc:	2300      	movs	r3, #0
 8015fde:	0029      	movs	r1, r5
 8015fe0:	220a      	movs	r2, #10
 8015fe2:	0038      	movs	r0, r7
 8015fe4:	f000 f9f6 	bl	80163d4 <__multadd>
 8015fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fea:	0005      	movs	r5, r0
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	dc47      	bgt.n	8016080 <_dtoa_r+0x9f0>
 8015ff0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015ff2:	2b02      	cmp	r3, #2
 8015ff4:	dc0d      	bgt.n	8016012 <_dtoa_r+0x982>
 8015ff6:	e043      	b.n	8016080 <_dtoa_r+0x9f0>
 8015ff8:	2a04      	cmp	r2, #4
 8015ffa:	d0c6      	beq.n	8015f8a <_dtoa_r+0x8fa>
 8015ffc:	0013      	movs	r3, r2
 8015ffe:	331c      	adds	r3, #28
 8016000:	e7bc      	b.n	8015f7c <_dtoa_r+0x8ec>
 8016002:	9b07      	ldr	r3, [sp, #28]
 8016004:	2b00      	cmp	r3, #0
 8016006:	dc35      	bgt.n	8016074 <_dtoa_r+0x9e4>
 8016008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801600a:	2b02      	cmp	r3, #2
 801600c:	dd32      	ble.n	8016074 <_dtoa_r+0x9e4>
 801600e:	9b07      	ldr	r3, [sp, #28]
 8016010:	930c      	str	r3, [sp, #48]	; 0x30
 8016012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016014:	2b00      	cmp	r3, #0
 8016016:	d10c      	bne.n	8016032 <_dtoa_r+0x9a2>
 8016018:	0031      	movs	r1, r6
 801601a:	2205      	movs	r2, #5
 801601c:	0038      	movs	r0, r7
 801601e:	f000 f9d9 	bl	80163d4 <__multadd>
 8016022:	0006      	movs	r6, r0
 8016024:	0001      	movs	r1, r0
 8016026:	9805      	ldr	r0, [sp, #20]
 8016028:	f000 fbf0 	bl	801680c <__mcmp>
 801602c:	2800      	cmp	r0, #0
 801602e:	dd00      	ble.n	8016032 <_dtoa_r+0x9a2>
 8016030:	e5a5      	b.n	8015b7e <_dtoa_r+0x4ee>
 8016032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016034:	43db      	mvns	r3, r3
 8016036:	9302      	str	r3, [sp, #8]
 8016038:	9b06      	ldr	r3, [sp, #24]
 801603a:	9308      	str	r3, [sp, #32]
 801603c:	2400      	movs	r4, #0
 801603e:	0031      	movs	r1, r6
 8016040:	0038      	movs	r0, r7
 8016042:	f000 f9a3 	bl	801638c <_Bfree>
 8016046:	2d00      	cmp	r5, #0
 8016048:	d100      	bne.n	801604c <_dtoa_r+0x9bc>
 801604a:	e6b7      	b.n	8015dbc <_dtoa_r+0x72c>
 801604c:	2c00      	cmp	r4, #0
 801604e:	d005      	beq.n	801605c <_dtoa_r+0x9cc>
 8016050:	42ac      	cmp	r4, r5
 8016052:	d003      	beq.n	801605c <_dtoa_r+0x9cc>
 8016054:	0021      	movs	r1, r4
 8016056:	0038      	movs	r0, r7
 8016058:	f000 f998 	bl	801638c <_Bfree>
 801605c:	0029      	movs	r1, r5
 801605e:	0038      	movs	r0, r7
 8016060:	f000 f994 	bl	801638c <_Bfree>
 8016064:	e6aa      	b.n	8015dbc <_dtoa_r+0x72c>
 8016066:	2600      	movs	r6, #0
 8016068:	0035      	movs	r5, r6
 801606a:	e7e2      	b.n	8016032 <_dtoa_r+0x9a2>
 801606c:	9602      	str	r6, [sp, #8]
 801606e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016070:	0035      	movs	r5, r6
 8016072:	e584      	b.n	8015b7e <_dtoa_r+0x4ee>
 8016074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016076:	2b00      	cmp	r3, #0
 8016078:	d100      	bne.n	801607c <_dtoa_r+0x9ec>
 801607a:	e0ce      	b.n	801621a <_dtoa_r+0xb8a>
 801607c:	9b07      	ldr	r3, [sp, #28]
 801607e:	930c      	str	r3, [sp, #48]	; 0x30
 8016080:	2c00      	cmp	r4, #0
 8016082:	dd05      	ble.n	8016090 <_dtoa_r+0xa00>
 8016084:	0029      	movs	r1, r5
 8016086:	0022      	movs	r2, r4
 8016088:	0038      	movs	r0, r7
 801608a:	f000 fb51 	bl	8016730 <__lshift>
 801608e:	0005      	movs	r5, r0
 8016090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016092:	0028      	movs	r0, r5
 8016094:	2b00      	cmp	r3, #0
 8016096:	d022      	beq.n	80160de <_dtoa_r+0xa4e>
 8016098:	0038      	movs	r0, r7
 801609a:	6869      	ldr	r1, [r5, #4]
 801609c:	f000 f932 	bl	8016304 <_Balloc>
 80160a0:	1e04      	subs	r4, r0, #0
 80160a2:	d10f      	bne.n	80160c4 <_dtoa_r+0xa34>
 80160a4:	0002      	movs	r2, r0
 80160a6:	4b05      	ldr	r3, [pc, #20]	; (80160bc <_dtoa_r+0xa2c>)
 80160a8:	4905      	ldr	r1, [pc, #20]	; (80160c0 <_dtoa_r+0xa30>)
 80160aa:	f7ff fb06 	bl	80156ba <_dtoa_r+0x2a>
 80160ae:	46c0      	nop			; (mov r8, r8)
 80160b0:	40240000 	.word	0x40240000
 80160b4:	00000433 	.word	0x00000433
 80160b8:	7ff00000 	.word	0x7ff00000
 80160bc:	08018efb 	.word	0x08018efb
 80160c0:	000002ea 	.word	0x000002ea
 80160c4:	0029      	movs	r1, r5
 80160c6:	692b      	ldr	r3, [r5, #16]
 80160c8:	310c      	adds	r1, #12
 80160ca:	1c9a      	adds	r2, r3, #2
 80160cc:	0092      	lsls	r2, r2, #2
 80160ce:	300c      	adds	r0, #12
 80160d0:	f7fe fcbe 	bl	8014a50 <memcpy>
 80160d4:	2201      	movs	r2, #1
 80160d6:	0021      	movs	r1, r4
 80160d8:	0038      	movs	r0, r7
 80160da:	f000 fb29 	bl	8016730 <__lshift>
 80160de:	9b06      	ldr	r3, [sp, #24]
 80160e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160e2:	930a      	str	r3, [sp, #40]	; 0x28
 80160e4:	3b01      	subs	r3, #1
 80160e6:	189b      	adds	r3, r3, r2
 80160e8:	2201      	movs	r2, #1
 80160ea:	002c      	movs	r4, r5
 80160ec:	0005      	movs	r5, r0
 80160ee:	9314      	str	r3, [sp, #80]	; 0x50
 80160f0:	9b08      	ldr	r3, [sp, #32]
 80160f2:	4013      	ands	r3, r2
 80160f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80160f6:	0031      	movs	r1, r6
 80160f8:	9805      	ldr	r0, [sp, #20]
 80160fa:	f7ff fa3d 	bl	8015578 <quorem>
 80160fe:	0003      	movs	r3, r0
 8016100:	0021      	movs	r1, r4
 8016102:	3330      	adds	r3, #48	; 0x30
 8016104:	900d      	str	r0, [sp, #52]	; 0x34
 8016106:	9805      	ldr	r0, [sp, #20]
 8016108:	9307      	str	r3, [sp, #28]
 801610a:	f000 fb7f 	bl	801680c <__mcmp>
 801610e:	002a      	movs	r2, r5
 8016110:	900e      	str	r0, [sp, #56]	; 0x38
 8016112:	0031      	movs	r1, r6
 8016114:	0038      	movs	r0, r7
 8016116:	f000 fb95 	bl	8016844 <__mdiff>
 801611a:	68c3      	ldr	r3, [r0, #12]
 801611c:	9008      	str	r0, [sp, #32]
 801611e:	9310      	str	r3, [sp, #64]	; 0x40
 8016120:	2301      	movs	r3, #1
 8016122:	930c      	str	r3, [sp, #48]	; 0x30
 8016124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016126:	2b00      	cmp	r3, #0
 8016128:	d104      	bne.n	8016134 <_dtoa_r+0xaa4>
 801612a:	0001      	movs	r1, r0
 801612c:	9805      	ldr	r0, [sp, #20]
 801612e:	f000 fb6d 	bl	801680c <__mcmp>
 8016132:	900c      	str	r0, [sp, #48]	; 0x30
 8016134:	0038      	movs	r0, r7
 8016136:	9908      	ldr	r1, [sp, #32]
 8016138:	f000 f928 	bl	801638c <_Bfree>
 801613c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801613e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016140:	3301      	adds	r3, #1
 8016142:	9308      	str	r3, [sp, #32]
 8016144:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016146:	4313      	orrs	r3, r2
 8016148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801614a:	4313      	orrs	r3, r2
 801614c:	d10c      	bne.n	8016168 <_dtoa_r+0xad8>
 801614e:	9b07      	ldr	r3, [sp, #28]
 8016150:	2b39      	cmp	r3, #57	; 0x39
 8016152:	d026      	beq.n	80161a2 <_dtoa_r+0xb12>
 8016154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016156:	2b00      	cmp	r3, #0
 8016158:	dd02      	ble.n	8016160 <_dtoa_r+0xad0>
 801615a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801615c:	3331      	adds	r3, #49	; 0x31
 801615e:	9307      	str	r3, [sp, #28]
 8016160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016162:	9a07      	ldr	r2, [sp, #28]
 8016164:	701a      	strb	r2, [r3, #0]
 8016166:	e76a      	b.n	801603e <_dtoa_r+0x9ae>
 8016168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801616a:	2b00      	cmp	r3, #0
 801616c:	db04      	blt.n	8016178 <_dtoa_r+0xae8>
 801616e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016170:	4313      	orrs	r3, r2
 8016172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016174:	4313      	orrs	r3, r2
 8016176:	d11f      	bne.n	80161b8 <_dtoa_r+0xb28>
 8016178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801617a:	2b00      	cmp	r3, #0
 801617c:	ddf0      	ble.n	8016160 <_dtoa_r+0xad0>
 801617e:	9905      	ldr	r1, [sp, #20]
 8016180:	2201      	movs	r2, #1
 8016182:	0038      	movs	r0, r7
 8016184:	f000 fad4 	bl	8016730 <__lshift>
 8016188:	0031      	movs	r1, r6
 801618a:	9005      	str	r0, [sp, #20]
 801618c:	f000 fb3e 	bl	801680c <__mcmp>
 8016190:	2800      	cmp	r0, #0
 8016192:	dc03      	bgt.n	801619c <_dtoa_r+0xb0c>
 8016194:	d1e4      	bne.n	8016160 <_dtoa_r+0xad0>
 8016196:	9b07      	ldr	r3, [sp, #28]
 8016198:	07db      	lsls	r3, r3, #31
 801619a:	d5e1      	bpl.n	8016160 <_dtoa_r+0xad0>
 801619c:	9b07      	ldr	r3, [sp, #28]
 801619e:	2b39      	cmp	r3, #57	; 0x39
 80161a0:	d1db      	bne.n	801615a <_dtoa_r+0xaca>
 80161a2:	2339      	movs	r3, #57	; 0x39
 80161a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161a6:	7013      	strb	r3, [r2, #0]
 80161a8:	9b08      	ldr	r3, [sp, #32]
 80161aa:	9308      	str	r3, [sp, #32]
 80161ac:	3b01      	subs	r3, #1
 80161ae:	781a      	ldrb	r2, [r3, #0]
 80161b0:	2a39      	cmp	r2, #57	; 0x39
 80161b2:	d068      	beq.n	8016286 <_dtoa_r+0xbf6>
 80161b4:	3201      	adds	r2, #1
 80161b6:	e7d5      	b.n	8016164 <_dtoa_r+0xad4>
 80161b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	dd07      	ble.n	80161ce <_dtoa_r+0xb3e>
 80161be:	9b07      	ldr	r3, [sp, #28]
 80161c0:	2b39      	cmp	r3, #57	; 0x39
 80161c2:	d0ee      	beq.n	80161a2 <_dtoa_r+0xb12>
 80161c4:	9b07      	ldr	r3, [sp, #28]
 80161c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161c8:	3301      	adds	r3, #1
 80161ca:	7013      	strb	r3, [r2, #0]
 80161cc:	e737      	b.n	801603e <_dtoa_r+0x9ae>
 80161ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d0:	9a07      	ldr	r2, [sp, #28]
 80161d2:	701a      	strb	r2, [r3, #0]
 80161d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80161d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161d8:	4293      	cmp	r3, r2
 80161da:	d03e      	beq.n	801625a <_dtoa_r+0xbca>
 80161dc:	2300      	movs	r3, #0
 80161de:	220a      	movs	r2, #10
 80161e0:	9905      	ldr	r1, [sp, #20]
 80161e2:	0038      	movs	r0, r7
 80161e4:	f000 f8f6 	bl	80163d4 <__multadd>
 80161e8:	2300      	movs	r3, #0
 80161ea:	9005      	str	r0, [sp, #20]
 80161ec:	220a      	movs	r2, #10
 80161ee:	0021      	movs	r1, r4
 80161f0:	0038      	movs	r0, r7
 80161f2:	42ac      	cmp	r4, r5
 80161f4:	d106      	bne.n	8016204 <_dtoa_r+0xb74>
 80161f6:	f000 f8ed 	bl	80163d4 <__multadd>
 80161fa:	0004      	movs	r4, r0
 80161fc:	0005      	movs	r5, r0
 80161fe:	9b08      	ldr	r3, [sp, #32]
 8016200:	930a      	str	r3, [sp, #40]	; 0x28
 8016202:	e778      	b.n	80160f6 <_dtoa_r+0xa66>
 8016204:	f000 f8e6 	bl	80163d4 <__multadd>
 8016208:	0029      	movs	r1, r5
 801620a:	0004      	movs	r4, r0
 801620c:	2300      	movs	r3, #0
 801620e:	220a      	movs	r2, #10
 8016210:	0038      	movs	r0, r7
 8016212:	f000 f8df 	bl	80163d4 <__multadd>
 8016216:	0005      	movs	r5, r0
 8016218:	e7f1      	b.n	80161fe <_dtoa_r+0xb6e>
 801621a:	9b07      	ldr	r3, [sp, #28]
 801621c:	930c      	str	r3, [sp, #48]	; 0x30
 801621e:	2400      	movs	r4, #0
 8016220:	0031      	movs	r1, r6
 8016222:	9805      	ldr	r0, [sp, #20]
 8016224:	f7ff f9a8 	bl	8015578 <quorem>
 8016228:	9b06      	ldr	r3, [sp, #24]
 801622a:	3030      	adds	r0, #48	; 0x30
 801622c:	5518      	strb	r0, [r3, r4]
 801622e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016230:	3401      	adds	r4, #1
 8016232:	9007      	str	r0, [sp, #28]
 8016234:	42a3      	cmp	r3, r4
 8016236:	dd07      	ble.n	8016248 <_dtoa_r+0xbb8>
 8016238:	2300      	movs	r3, #0
 801623a:	220a      	movs	r2, #10
 801623c:	0038      	movs	r0, r7
 801623e:	9905      	ldr	r1, [sp, #20]
 8016240:	f000 f8c8 	bl	80163d4 <__multadd>
 8016244:	9005      	str	r0, [sp, #20]
 8016246:	e7eb      	b.n	8016220 <_dtoa_r+0xb90>
 8016248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801624a:	2001      	movs	r0, #1
 801624c:	2b00      	cmp	r3, #0
 801624e:	dd00      	ble.n	8016252 <_dtoa_r+0xbc2>
 8016250:	0018      	movs	r0, r3
 8016252:	2400      	movs	r4, #0
 8016254:	9b06      	ldr	r3, [sp, #24]
 8016256:	181b      	adds	r3, r3, r0
 8016258:	9308      	str	r3, [sp, #32]
 801625a:	9905      	ldr	r1, [sp, #20]
 801625c:	2201      	movs	r2, #1
 801625e:	0038      	movs	r0, r7
 8016260:	f000 fa66 	bl	8016730 <__lshift>
 8016264:	0031      	movs	r1, r6
 8016266:	9005      	str	r0, [sp, #20]
 8016268:	f000 fad0 	bl	801680c <__mcmp>
 801626c:	2800      	cmp	r0, #0
 801626e:	dc9b      	bgt.n	80161a8 <_dtoa_r+0xb18>
 8016270:	d102      	bne.n	8016278 <_dtoa_r+0xbe8>
 8016272:	9b07      	ldr	r3, [sp, #28]
 8016274:	07db      	lsls	r3, r3, #31
 8016276:	d497      	bmi.n	80161a8 <_dtoa_r+0xb18>
 8016278:	9b08      	ldr	r3, [sp, #32]
 801627a:	9308      	str	r3, [sp, #32]
 801627c:	3b01      	subs	r3, #1
 801627e:	781a      	ldrb	r2, [r3, #0]
 8016280:	2a30      	cmp	r2, #48	; 0x30
 8016282:	d0fa      	beq.n	801627a <_dtoa_r+0xbea>
 8016284:	e6db      	b.n	801603e <_dtoa_r+0x9ae>
 8016286:	9a06      	ldr	r2, [sp, #24]
 8016288:	429a      	cmp	r2, r3
 801628a:	d18e      	bne.n	80161aa <_dtoa_r+0xb1a>
 801628c:	9b02      	ldr	r3, [sp, #8]
 801628e:	3301      	adds	r3, #1
 8016290:	9302      	str	r3, [sp, #8]
 8016292:	2331      	movs	r3, #49	; 0x31
 8016294:	e799      	b.n	80161ca <_dtoa_r+0xb3a>
 8016296:	4b09      	ldr	r3, [pc, #36]	; (80162bc <_dtoa_r+0xc2c>)
 8016298:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801629a:	9306      	str	r3, [sp, #24]
 801629c:	4b08      	ldr	r3, [pc, #32]	; (80162c0 <_dtoa_r+0xc30>)
 801629e:	2a00      	cmp	r2, #0
 80162a0:	d001      	beq.n	80162a6 <_dtoa_r+0xc16>
 80162a2:	f7ff fa3f 	bl	8015724 <_dtoa_r+0x94>
 80162a6:	f7ff fa3f 	bl	8015728 <_dtoa_r+0x98>
 80162aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	dcb6      	bgt.n	801621e <_dtoa_r+0xb8e>
 80162b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80162b2:	2b02      	cmp	r3, #2
 80162b4:	dd00      	ble.n	80162b8 <_dtoa_r+0xc28>
 80162b6:	e6ac      	b.n	8016012 <_dtoa_r+0x982>
 80162b8:	e7b1      	b.n	801621e <_dtoa_r+0xb8e>
 80162ba:	46c0      	nop			; (mov r8, r8)
 80162bc:	08018e7c 	.word	0x08018e7c
 80162c0:	08018e84 	.word	0x08018e84

080162c4 <_localeconv_r>:
 80162c4:	4800      	ldr	r0, [pc, #0]	; (80162c8 <_localeconv_r+0x4>)
 80162c6:	4770      	bx	lr
 80162c8:	2000322c 	.word	0x2000322c

080162cc <memchr>:
 80162cc:	b2c9      	uxtb	r1, r1
 80162ce:	1882      	adds	r2, r0, r2
 80162d0:	4290      	cmp	r0, r2
 80162d2:	d101      	bne.n	80162d8 <memchr+0xc>
 80162d4:	2000      	movs	r0, #0
 80162d6:	4770      	bx	lr
 80162d8:	7803      	ldrb	r3, [r0, #0]
 80162da:	428b      	cmp	r3, r1
 80162dc:	d0fb      	beq.n	80162d6 <memchr+0xa>
 80162de:	3001      	adds	r0, #1
 80162e0:	e7f6      	b.n	80162d0 <memchr+0x4>
	...

080162e4 <__malloc_lock>:
 80162e4:	b510      	push	{r4, lr}
 80162e6:	4802      	ldr	r0, [pc, #8]	; (80162f0 <__malloc_lock+0xc>)
 80162e8:	f000 fd65 	bl	8016db6 <__retarget_lock_acquire_recursive>
 80162ec:	bd10      	pop	{r4, pc}
 80162ee:	46c0      	nop			; (mov r8, r8)
 80162f0:	20003c34 	.word	0x20003c34

080162f4 <__malloc_unlock>:
 80162f4:	b510      	push	{r4, lr}
 80162f6:	4802      	ldr	r0, [pc, #8]	; (8016300 <__malloc_unlock+0xc>)
 80162f8:	f000 fd5e 	bl	8016db8 <__retarget_lock_release_recursive>
 80162fc:	bd10      	pop	{r4, pc}
 80162fe:	46c0      	nop			; (mov r8, r8)
 8016300:	20003c34 	.word	0x20003c34

08016304 <_Balloc>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016308:	0006      	movs	r6, r0
 801630a:	000c      	movs	r4, r1
 801630c:	2d00      	cmp	r5, #0
 801630e:	d10e      	bne.n	801632e <_Balloc+0x2a>
 8016310:	2010      	movs	r0, #16
 8016312:	f7fe fb93 	bl	8014a3c <malloc>
 8016316:	1e02      	subs	r2, r0, #0
 8016318:	6270      	str	r0, [r6, #36]	; 0x24
 801631a:	d104      	bne.n	8016326 <_Balloc+0x22>
 801631c:	2166      	movs	r1, #102	; 0x66
 801631e:	4b19      	ldr	r3, [pc, #100]	; (8016384 <_Balloc+0x80>)
 8016320:	4819      	ldr	r0, [pc, #100]	; (8016388 <_Balloc+0x84>)
 8016322:	f000 fd19 	bl	8016d58 <__assert_func>
 8016326:	6045      	str	r5, [r0, #4]
 8016328:	6085      	str	r5, [r0, #8]
 801632a:	6005      	str	r5, [r0, #0]
 801632c:	60c5      	str	r5, [r0, #12]
 801632e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8016330:	68eb      	ldr	r3, [r5, #12]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d013      	beq.n	801635e <_Balloc+0x5a>
 8016336:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016338:	00a2      	lsls	r2, r4, #2
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	189b      	adds	r3, r3, r2
 801633e:	6818      	ldr	r0, [r3, #0]
 8016340:	2800      	cmp	r0, #0
 8016342:	d118      	bne.n	8016376 <_Balloc+0x72>
 8016344:	2101      	movs	r1, #1
 8016346:	000d      	movs	r5, r1
 8016348:	40a5      	lsls	r5, r4
 801634a:	1d6a      	adds	r2, r5, #5
 801634c:	0030      	movs	r0, r6
 801634e:	0092      	lsls	r2, r2, #2
 8016350:	f000 fb74 	bl	8016a3c <_calloc_r>
 8016354:	2800      	cmp	r0, #0
 8016356:	d00c      	beq.n	8016372 <_Balloc+0x6e>
 8016358:	6044      	str	r4, [r0, #4]
 801635a:	6085      	str	r5, [r0, #8]
 801635c:	e00d      	b.n	801637a <_Balloc+0x76>
 801635e:	2221      	movs	r2, #33	; 0x21
 8016360:	2104      	movs	r1, #4
 8016362:	0030      	movs	r0, r6
 8016364:	f000 fb6a 	bl	8016a3c <_calloc_r>
 8016368:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801636a:	60e8      	str	r0, [r5, #12]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d1e1      	bne.n	8016336 <_Balloc+0x32>
 8016372:	2000      	movs	r0, #0
 8016374:	bd70      	pop	{r4, r5, r6, pc}
 8016376:	6802      	ldr	r2, [r0, #0]
 8016378:	601a      	str	r2, [r3, #0]
 801637a:	2300      	movs	r3, #0
 801637c:	6103      	str	r3, [r0, #16]
 801637e:	60c3      	str	r3, [r0, #12]
 8016380:	e7f8      	b.n	8016374 <_Balloc+0x70>
 8016382:	46c0      	nop			; (mov r8, r8)
 8016384:	08018e89 	.word	0x08018e89
 8016388:	08018f0c 	.word	0x08018f0c

0801638c <_Bfree>:
 801638c:	b570      	push	{r4, r5, r6, lr}
 801638e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016390:	0005      	movs	r5, r0
 8016392:	000c      	movs	r4, r1
 8016394:	2e00      	cmp	r6, #0
 8016396:	d10e      	bne.n	80163b6 <_Bfree+0x2a>
 8016398:	2010      	movs	r0, #16
 801639a:	f7fe fb4f 	bl	8014a3c <malloc>
 801639e:	1e02      	subs	r2, r0, #0
 80163a0:	6268      	str	r0, [r5, #36]	; 0x24
 80163a2:	d104      	bne.n	80163ae <_Bfree+0x22>
 80163a4:	218a      	movs	r1, #138	; 0x8a
 80163a6:	4b09      	ldr	r3, [pc, #36]	; (80163cc <_Bfree+0x40>)
 80163a8:	4809      	ldr	r0, [pc, #36]	; (80163d0 <_Bfree+0x44>)
 80163aa:	f000 fcd5 	bl	8016d58 <__assert_func>
 80163ae:	6046      	str	r6, [r0, #4]
 80163b0:	6086      	str	r6, [r0, #8]
 80163b2:	6006      	str	r6, [r0, #0]
 80163b4:	60c6      	str	r6, [r0, #12]
 80163b6:	2c00      	cmp	r4, #0
 80163b8:	d007      	beq.n	80163ca <_Bfree+0x3e>
 80163ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80163bc:	6862      	ldr	r2, [r4, #4]
 80163be:	68db      	ldr	r3, [r3, #12]
 80163c0:	0092      	lsls	r2, r2, #2
 80163c2:	189b      	adds	r3, r3, r2
 80163c4:	681a      	ldr	r2, [r3, #0]
 80163c6:	6022      	str	r2, [r4, #0]
 80163c8:	601c      	str	r4, [r3, #0]
 80163ca:	bd70      	pop	{r4, r5, r6, pc}
 80163cc:	08018e89 	.word	0x08018e89
 80163d0:	08018f0c 	.word	0x08018f0c

080163d4 <__multadd>:
 80163d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163d6:	000e      	movs	r6, r1
 80163d8:	9001      	str	r0, [sp, #4]
 80163da:	000c      	movs	r4, r1
 80163dc:	001d      	movs	r5, r3
 80163de:	2000      	movs	r0, #0
 80163e0:	690f      	ldr	r7, [r1, #16]
 80163e2:	3614      	adds	r6, #20
 80163e4:	6833      	ldr	r3, [r6, #0]
 80163e6:	3001      	adds	r0, #1
 80163e8:	b299      	uxth	r1, r3
 80163ea:	4351      	muls	r1, r2
 80163ec:	0c1b      	lsrs	r3, r3, #16
 80163ee:	4353      	muls	r3, r2
 80163f0:	1949      	adds	r1, r1, r5
 80163f2:	0c0d      	lsrs	r5, r1, #16
 80163f4:	195b      	adds	r3, r3, r5
 80163f6:	0c1d      	lsrs	r5, r3, #16
 80163f8:	b289      	uxth	r1, r1
 80163fa:	041b      	lsls	r3, r3, #16
 80163fc:	185b      	adds	r3, r3, r1
 80163fe:	c608      	stmia	r6!, {r3}
 8016400:	4287      	cmp	r7, r0
 8016402:	dcef      	bgt.n	80163e4 <__multadd+0x10>
 8016404:	2d00      	cmp	r5, #0
 8016406:	d022      	beq.n	801644e <__multadd+0x7a>
 8016408:	68a3      	ldr	r3, [r4, #8]
 801640a:	42bb      	cmp	r3, r7
 801640c:	dc19      	bgt.n	8016442 <__multadd+0x6e>
 801640e:	6863      	ldr	r3, [r4, #4]
 8016410:	9801      	ldr	r0, [sp, #4]
 8016412:	1c59      	adds	r1, r3, #1
 8016414:	f7ff ff76 	bl	8016304 <_Balloc>
 8016418:	1e06      	subs	r6, r0, #0
 801641a:	d105      	bne.n	8016428 <__multadd+0x54>
 801641c:	0002      	movs	r2, r0
 801641e:	21b5      	movs	r1, #181	; 0xb5
 8016420:	4b0c      	ldr	r3, [pc, #48]	; (8016454 <__multadd+0x80>)
 8016422:	480d      	ldr	r0, [pc, #52]	; (8016458 <__multadd+0x84>)
 8016424:	f000 fc98 	bl	8016d58 <__assert_func>
 8016428:	0021      	movs	r1, r4
 801642a:	6923      	ldr	r3, [r4, #16]
 801642c:	310c      	adds	r1, #12
 801642e:	1c9a      	adds	r2, r3, #2
 8016430:	0092      	lsls	r2, r2, #2
 8016432:	300c      	adds	r0, #12
 8016434:	f7fe fb0c 	bl	8014a50 <memcpy>
 8016438:	0021      	movs	r1, r4
 801643a:	9801      	ldr	r0, [sp, #4]
 801643c:	f7ff ffa6 	bl	801638c <_Bfree>
 8016440:	0034      	movs	r4, r6
 8016442:	1d3b      	adds	r3, r7, #4
 8016444:	009b      	lsls	r3, r3, #2
 8016446:	18e3      	adds	r3, r4, r3
 8016448:	605d      	str	r5, [r3, #4]
 801644a:	1c7b      	adds	r3, r7, #1
 801644c:	6123      	str	r3, [r4, #16]
 801644e:	0020      	movs	r0, r4
 8016450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016452:	46c0      	nop			; (mov r8, r8)
 8016454:	08018efb 	.word	0x08018efb
 8016458:	08018f0c 	.word	0x08018f0c

0801645c <__hi0bits>:
 801645c:	0003      	movs	r3, r0
 801645e:	0c02      	lsrs	r2, r0, #16
 8016460:	2000      	movs	r0, #0
 8016462:	4282      	cmp	r2, r0
 8016464:	d101      	bne.n	801646a <__hi0bits+0xe>
 8016466:	041b      	lsls	r3, r3, #16
 8016468:	3010      	adds	r0, #16
 801646a:	0e1a      	lsrs	r2, r3, #24
 801646c:	d101      	bne.n	8016472 <__hi0bits+0x16>
 801646e:	3008      	adds	r0, #8
 8016470:	021b      	lsls	r3, r3, #8
 8016472:	0f1a      	lsrs	r2, r3, #28
 8016474:	d101      	bne.n	801647a <__hi0bits+0x1e>
 8016476:	3004      	adds	r0, #4
 8016478:	011b      	lsls	r3, r3, #4
 801647a:	0f9a      	lsrs	r2, r3, #30
 801647c:	d101      	bne.n	8016482 <__hi0bits+0x26>
 801647e:	3002      	adds	r0, #2
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	2b00      	cmp	r3, #0
 8016484:	db03      	blt.n	801648e <__hi0bits+0x32>
 8016486:	3001      	adds	r0, #1
 8016488:	005b      	lsls	r3, r3, #1
 801648a:	d400      	bmi.n	801648e <__hi0bits+0x32>
 801648c:	2020      	movs	r0, #32
 801648e:	4770      	bx	lr

08016490 <__lo0bits>:
 8016490:	6803      	ldr	r3, [r0, #0]
 8016492:	0002      	movs	r2, r0
 8016494:	2107      	movs	r1, #7
 8016496:	0018      	movs	r0, r3
 8016498:	4008      	ands	r0, r1
 801649a:	420b      	tst	r3, r1
 801649c:	d00d      	beq.n	80164ba <__lo0bits+0x2a>
 801649e:	3906      	subs	r1, #6
 80164a0:	2000      	movs	r0, #0
 80164a2:	420b      	tst	r3, r1
 80164a4:	d105      	bne.n	80164b2 <__lo0bits+0x22>
 80164a6:	3002      	adds	r0, #2
 80164a8:	4203      	tst	r3, r0
 80164aa:	d003      	beq.n	80164b4 <__lo0bits+0x24>
 80164ac:	40cb      	lsrs	r3, r1
 80164ae:	0008      	movs	r0, r1
 80164b0:	6013      	str	r3, [r2, #0]
 80164b2:	4770      	bx	lr
 80164b4:	089b      	lsrs	r3, r3, #2
 80164b6:	6013      	str	r3, [r2, #0]
 80164b8:	e7fb      	b.n	80164b2 <__lo0bits+0x22>
 80164ba:	b299      	uxth	r1, r3
 80164bc:	2900      	cmp	r1, #0
 80164be:	d101      	bne.n	80164c4 <__lo0bits+0x34>
 80164c0:	2010      	movs	r0, #16
 80164c2:	0c1b      	lsrs	r3, r3, #16
 80164c4:	b2d9      	uxtb	r1, r3
 80164c6:	2900      	cmp	r1, #0
 80164c8:	d101      	bne.n	80164ce <__lo0bits+0x3e>
 80164ca:	3008      	adds	r0, #8
 80164cc:	0a1b      	lsrs	r3, r3, #8
 80164ce:	0719      	lsls	r1, r3, #28
 80164d0:	d101      	bne.n	80164d6 <__lo0bits+0x46>
 80164d2:	3004      	adds	r0, #4
 80164d4:	091b      	lsrs	r3, r3, #4
 80164d6:	0799      	lsls	r1, r3, #30
 80164d8:	d101      	bne.n	80164de <__lo0bits+0x4e>
 80164da:	3002      	adds	r0, #2
 80164dc:	089b      	lsrs	r3, r3, #2
 80164de:	07d9      	lsls	r1, r3, #31
 80164e0:	d4e9      	bmi.n	80164b6 <__lo0bits+0x26>
 80164e2:	3001      	adds	r0, #1
 80164e4:	085b      	lsrs	r3, r3, #1
 80164e6:	d1e6      	bne.n	80164b6 <__lo0bits+0x26>
 80164e8:	2020      	movs	r0, #32
 80164ea:	e7e2      	b.n	80164b2 <__lo0bits+0x22>

080164ec <__i2b>:
 80164ec:	b510      	push	{r4, lr}
 80164ee:	000c      	movs	r4, r1
 80164f0:	2101      	movs	r1, #1
 80164f2:	f7ff ff07 	bl	8016304 <_Balloc>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	d106      	bne.n	8016508 <__i2b+0x1c>
 80164fa:	21a0      	movs	r1, #160	; 0xa0
 80164fc:	0002      	movs	r2, r0
 80164fe:	4b04      	ldr	r3, [pc, #16]	; (8016510 <__i2b+0x24>)
 8016500:	4804      	ldr	r0, [pc, #16]	; (8016514 <__i2b+0x28>)
 8016502:	0049      	lsls	r1, r1, #1
 8016504:	f000 fc28 	bl	8016d58 <__assert_func>
 8016508:	2301      	movs	r3, #1
 801650a:	6144      	str	r4, [r0, #20]
 801650c:	6103      	str	r3, [r0, #16]
 801650e:	bd10      	pop	{r4, pc}
 8016510:	08018efb 	.word	0x08018efb
 8016514:	08018f0c 	.word	0x08018f0c

08016518 <__multiply>:
 8016518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801651a:	690b      	ldr	r3, [r1, #16]
 801651c:	0014      	movs	r4, r2
 801651e:	6912      	ldr	r2, [r2, #16]
 8016520:	000d      	movs	r5, r1
 8016522:	b089      	sub	sp, #36	; 0x24
 8016524:	4293      	cmp	r3, r2
 8016526:	da01      	bge.n	801652c <__multiply+0x14>
 8016528:	0025      	movs	r5, r4
 801652a:	000c      	movs	r4, r1
 801652c:	692f      	ldr	r7, [r5, #16]
 801652e:	6926      	ldr	r6, [r4, #16]
 8016530:	6869      	ldr	r1, [r5, #4]
 8016532:	19bb      	adds	r3, r7, r6
 8016534:	9302      	str	r3, [sp, #8]
 8016536:	68ab      	ldr	r3, [r5, #8]
 8016538:	19ba      	adds	r2, r7, r6
 801653a:	4293      	cmp	r3, r2
 801653c:	da00      	bge.n	8016540 <__multiply+0x28>
 801653e:	3101      	adds	r1, #1
 8016540:	f7ff fee0 	bl	8016304 <_Balloc>
 8016544:	9001      	str	r0, [sp, #4]
 8016546:	2800      	cmp	r0, #0
 8016548:	d106      	bne.n	8016558 <__multiply+0x40>
 801654a:	215e      	movs	r1, #94	; 0x5e
 801654c:	0002      	movs	r2, r0
 801654e:	4b48      	ldr	r3, [pc, #288]	; (8016670 <__multiply+0x158>)
 8016550:	4848      	ldr	r0, [pc, #288]	; (8016674 <__multiply+0x15c>)
 8016552:	31ff      	adds	r1, #255	; 0xff
 8016554:	f000 fc00 	bl	8016d58 <__assert_func>
 8016558:	9b01      	ldr	r3, [sp, #4]
 801655a:	2200      	movs	r2, #0
 801655c:	3314      	adds	r3, #20
 801655e:	469c      	mov	ip, r3
 8016560:	19bb      	adds	r3, r7, r6
 8016562:	009b      	lsls	r3, r3, #2
 8016564:	4463      	add	r3, ip
 8016566:	9303      	str	r3, [sp, #12]
 8016568:	4663      	mov	r3, ip
 801656a:	9903      	ldr	r1, [sp, #12]
 801656c:	428b      	cmp	r3, r1
 801656e:	d32c      	bcc.n	80165ca <__multiply+0xb2>
 8016570:	002b      	movs	r3, r5
 8016572:	0022      	movs	r2, r4
 8016574:	3314      	adds	r3, #20
 8016576:	00bf      	lsls	r7, r7, #2
 8016578:	3214      	adds	r2, #20
 801657a:	9306      	str	r3, [sp, #24]
 801657c:	00b6      	lsls	r6, r6, #2
 801657e:	19db      	adds	r3, r3, r7
 8016580:	9304      	str	r3, [sp, #16]
 8016582:	1993      	adds	r3, r2, r6
 8016584:	9307      	str	r3, [sp, #28]
 8016586:	2304      	movs	r3, #4
 8016588:	9305      	str	r3, [sp, #20]
 801658a:	002b      	movs	r3, r5
 801658c:	9904      	ldr	r1, [sp, #16]
 801658e:	3315      	adds	r3, #21
 8016590:	9200      	str	r2, [sp, #0]
 8016592:	4299      	cmp	r1, r3
 8016594:	d305      	bcc.n	80165a2 <__multiply+0x8a>
 8016596:	1b4b      	subs	r3, r1, r5
 8016598:	3b15      	subs	r3, #21
 801659a:	089b      	lsrs	r3, r3, #2
 801659c:	3301      	adds	r3, #1
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	9305      	str	r3, [sp, #20]
 80165a2:	9b07      	ldr	r3, [sp, #28]
 80165a4:	9a00      	ldr	r2, [sp, #0]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d311      	bcc.n	80165ce <__multiply+0xb6>
 80165aa:	9b02      	ldr	r3, [sp, #8]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	dd06      	ble.n	80165be <__multiply+0xa6>
 80165b0:	9b03      	ldr	r3, [sp, #12]
 80165b2:	3b04      	subs	r3, #4
 80165b4:	9303      	str	r3, [sp, #12]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	9300      	str	r3, [sp, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d053      	beq.n	8016666 <__multiply+0x14e>
 80165be:	9b01      	ldr	r3, [sp, #4]
 80165c0:	9a02      	ldr	r2, [sp, #8]
 80165c2:	0018      	movs	r0, r3
 80165c4:	611a      	str	r2, [r3, #16]
 80165c6:	b009      	add	sp, #36	; 0x24
 80165c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ca:	c304      	stmia	r3!, {r2}
 80165cc:	e7cd      	b.n	801656a <__multiply+0x52>
 80165ce:	9b00      	ldr	r3, [sp, #0]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	b298      	uxth	r0, r3
 80165d4:	2800      	cmp	r0, #0
 80165d6:	d01b      	beq.n	8016610 <__multiply+0xf8>
 80165d8:	4667      	mov	r7, ip
 80165da:	2400      	movs	r4, #0
 80165dc:	9e06      	ldr	r6, [sp, #24]
 80165de:	ce02      	ldmia	r6!, {r1}
 80165e0:	683a      	ldr	r2, [r7, #0]
 80165e2:	b28b      	uxth	r3, r1
 80165e4:	4343      	muls	r3, r0
 80165e6:	b292      	uxth	r2, r2
 80165e8:	189b      	adds	r3, r3, r2
 80165ea:	191b      	adds	r3, r3, r4
 80165ec:	0c0c      	lsrs	r4, r1, #16
 80165ee:	4344      	muls	r4, r0
 80165f0:	683a      	ldr	r2, [r7, #0]
 80165f2:	0c11      	lsrs	r1, r2, #16
 80165f4:	1861      	adds	r1, r4, r1
 80165f6:	0c1c      	lsrs	r4, r3, #16
 80165f8:	1909      	adds	r1, r1, r4
 80165fa:	0c0c      	lsrs	r4, r1, #16
 80165fc:	b29b      	uxth	r3, r3
 80165fe:	0409      	lsls	r1, r1, #16
 8016600:	430b      	orrs	r3, r1
 8016602:	c708      	stmia	r7!, {r3}
 8016604:	9b04      	ldr	r3, [sp, #16]
 8016606:	42b3      	cmp	r3, r6
 8016608:	d8e9      	bhi.n	80165de <__multiply+0xc6>
 801660a:	4663      	mov	r3, ip
 801660c:	9a05      	ldr	r2, [sp, #20]
 801660e:	509c      	str	r4, [r3, r2]
 8016610:	9b00      	ldr	r3, [sp, #0]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	0c1e      	lsrs	r6, r3, #16
 8016616:	d020      	beq.n	801665a <__multiply+0x142>
 8016618:	4663      	mov	r3, ip
 801661a:	002c      	movs	r4, r5
 801661c:	4660      	mov	r0, ip
 801661e:	2700      	movs	r7, #0
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	3414      	adds	r4, #20
 8016624:	6822      	ldr	r2, [r4, #0]
 8016626:	b29b      	uxth	r3, r3
 8016628:	b291      	uxth	r1, r2
 801662a:	4371      	muls	r1, r6
 801662c:	6802      	ldr	r2, [r0, #0]
 801662e:	0c12      	lsrs	r2, r2, #16
 8016630:	1889      	adds	r1, r1, r2
 8016632:	19cf      	adds	r7, r1, r7
 8016634:	0439      	lsls	r1, r7, #16
 8016636:	430b      	orrs	r3, r1
 8016638:	6003      	str	r3, [r0, #0]
 801663a:	cc02      	ldmia	r4!, {r1}
 801663c:	6843      	ldr	r3, [r0, #4]
 801663e:	0c09      	lsrs	r1, r1, #16
 8016640:	4371      	muls	r1, r6
 8016642:	b29b      	uxth	r3, r3
 8016644:	0c3f      	lsrs	r7, r7, #16
 8016646:	18cb      	adds	r3, r1, r3
 8016648:	9a04      	ldr	r2, [sp, #16]
 801664a:	19db      	adds	r3, r3, r7
 801664c:	0c1f      	lsrs	r7, r3, #16
 801664e:	3004      	adds	r0, #4
 8016650:	42a2      	cmp	r2, r4
 8016652:	d8e7      	bhi.n	8016624 <__multiply+0x10c>
 8016654:	4662      	mov	r2, ip
 8016656:	9905      	ldr	r1, [sp, #20]
 8016658:	5053      	str	r3, [r2, r1]
 801665a:	9b00      	ldr	r3, [sp, #0]
 801665c:	3304      	adds	r3, #4
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	2304      	movs	r3, #4
 8016662:	449c      	add	ip, r3
 8016664:	e79d      	b.n	80165a2 <__multiply+0x8a>
 8016666:	9b02      	ldr	r3, [sp, #8]
 8016668:	3b01      	subs	r3, #1
 801666a:	9302      	str	r3, [sp, #8]
 801666c:	e79d      	b.n	80165aa <__multiply+0x92>
 801666e:	46c0      	nop			; (mov r8, r8)
 8016670:	08018efb 	.word	0x08018efb
 8016674:	08018f0c 	.word	0x08018f0c

08016678 <__pow5mult>:
 8016678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801667a:	2303      	movs	r3, #3
 801667c:	0015      	movs	r5, r2
 801667e:	0007      	movs	r7, r0
 8016680:	000e      	movs	r6, r1
 8016682:	401a      	ands	r2, r3
 8016684:	421d      	tst	r5, r3
 8016686:	d008      	beq.n	801669a <__pow5mult+0x22>
 8016688:	4925      	ldr	r1, [pc, #148]	; (8016720 <__pow5mult+0xa8>)
 801668a:	3a01      	subs	r2, #1
 801668c:	0092      	lsls	r2, r2, #2
 801668e:	5852      	ldr	r2, [r2, r1]
 8016690:	2300      	movs	r3, #0
 8016692:	0031      	movs	r1, r6
 8016694:	f7ff fe9e 	bl	80163d4 <__multadd>
 8016698:	0006      	movs	r6, r0
 801669a:	10ad      	asrs	r5, r5, #2
 801669c:	d03d      	beq.n	801671a <__pow5mult+0xa2>
 801669e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80166a0:	2c00      	cmp	r4, #0
 80166a2:	d10f      	bne.n	80166c4 <__pow5mult+0x4c>
 80166a4:	2010      	movs	r0, #16
 80166a6:	f7fe f9c9 	bl	8014a3c <malloc>
 80166aa:	1e02      	subs	r2, r0, #0
 80166ac:	6278      	str	r0, [r7, #36]	; 0x24
 80166ae:	d105      	bne.n	80166bc <__pow5mult+0x44>
 80166b0:	21d7      	movs	r1, #215	; 0xd7
 80166b2:	4b1c      	ldr	r3, [pc, #112]	; (8016724 <__pow5mult+0xac>)
 80166b4:	481c      	ldr	r0, [pc, #112]	; (8016728 <__pow5mult+0xb0>)
 80166b6:	0049      	lsls	r1, r1, #1
 80166b8:	f000 fb4e 	bl	8016d58 <__assert_func>
 80166bc:	6044      	str	r4, [r0, #4]
 80166be:	6084      	str	r4, [r0, #8]
 80166c0:	6004      	str	r4, [r0, #0]
 80166c2:	60c4      	str	r4, [r0, #12]
 80166c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c6:	689c      	ldr	r4, [r3, #8]
 80166c8:	9301      	str	r3, [sp, #4]
 80166ca:	2c00      	cmp	r4, #0
 80166cc:	d108      	bne.n	80166e0 <__pow5mult+0x68>
 80166ce:	0038      	movs	r0, r7
 80166d0:	4916      	ldr	r1, [pc, #88]	; (801672c <__pow5mult+0xb4>)
 80166d2:	f7ff ff0b 	bl	80164ec <__i2b>
 80166d6:	9b01      	ldr	r3, [sp, #4]
 80166d8:	0004      	movs	r4, r0
 80166da:	6098      	str	r0, [r3, #8]
 80166dc:	2300      	movs	r3, #0
 80166de:	6003      	str	r3, [r0, #0]
 80166e0:	2301      	movs	r3, #1
 80166e2:	421d      	tst	r5, r3
 80166e4:	d00a      	beq.n	80166fc <__pow5mult+0x84>
 80166e6:	0031      	movs	r1, r6
 80166e8:	0022      	movs	r2, r4
 80166ea:	0038      	movs	r0, r7
 80166ec:	f7ff ff14 	bl	8016518 <__multiply>
 80166f0:	0031      	movs	r1, r6
 80166f2:	9001      	str	r0, [sp, #4]
 80166f4:	0038      	movs	r0, r7
 80166f6:	f7ff fe49 	bl	801638c <_Bfree>
 80166fa:	9e01      	ldr	r6, [sp, #4]
 80166fc:	106d      	asrs	r5, r5, #1
 80166fe:	d00c      	beq.n	801671a <__pow5mult+0xa2>
 8016700:	6820      	ldr	r0, [r4, #0]
 8016702:	2800      	cmp	r0, #0
 8016704:	d107      	bne.n	8016716 <__pow5mult+0x9e>
 8016706:	0022      	movs	r2, r4
 8016708:	0021      	movs	r1, r4
 801670a:	0038      	movs	r0, r7
 801670c:	f7ff ff04 	bl	8016518 <__multiply>
 8016710:	2300      	movs	r3, #0
 8016712:	6020      	str	r0, [r4, #0]
 8016714:	6003      	str	r3, [r0, #0]
 8016716:	0004      	movs	r4, r0
 8016718:	e7e2      	b.n	80166e0 <__pow5mult+0x68>
 801671a:	0030      	movs	r0, r6
 801671c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801671e:	46c0      	nop			; (mov r8, r8)
 8016720:	08019058 	.word	0x08019058
 8016724:	08018e89 	.word	0x08018e89
 8016728:	08018f0c 	.word	0x08018f0c
 801672c:	00000271 	.word	0x00000271

08016730 <__lshift>:
 8016730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016732:	000c      	movs	r4, r1
 8016734:	0017      	movs	r7, r2
 8016736:	6923      	ldr	r3, [r4, #16]
 8016738:	1155      	asrs	r5, r2, #5
 801673a:	b087      	sub	sp, #28
 801673c:	18eb      	adds	r3, r5, r3
 801673e:	9302      	str	r3, [sp, #8]
 8016740:	3301      	adds	r3, #1
 8016742:	9301      	str	r3, [sp, #4]
 8016744:	6849      	ldr	r1, [r1, #4]
 8016746:	68a3      	ldr	r3, [r4, #8]
 8016748:	9004      	str	r0, [sp, #16]
 801674a:	9a01      	ldr	r2, [sp, #4]
 801674c:	4293      	cmp	r3, r2
 801674e:	db10      	blt.n	8016772 <__lshift+0x42>
 8016750:	9804      	ldr	r0, [sp, #16]
 8016752:	f7ff fdd7 	bl	8016304 <_Balloc>
 8016756:	2300      	movs	r3, #0
 8016758:	0002      	movs	r2, r0
 801675a:	0006      	movs	r6, r0
 801675c:	0019      	movs	r1, r3
 801675e:	3214      	adds	r2, #20
 8016760:	4298      	cmp	r0, r3
 8016762:	d10c      	bne.n	801677e <__lshift+0x4e>
 8016764:	21da      	movs	r1, #218	; 0xda
 8016766:	0002      	movs	r2, r0
 8016768:	4b26      	ldr	r3, [pc, #152]	; (8016804 <__lshift+0xd4>)
 801676a:	4827      	ldr	r0, [pc, #156]	; (8016808 <__lshift+0xd8>)
 801676c:	31ff      	adds	r1, #255	; 0xff
 801676e:	f000 faf3 	bl	8016d58 <__assert_func>
 8016772:	3101      	adds	r1, #1
 8016774:	005b      	lsls	r3, r3, #1
 8016776:	e7e8      	b.n	801674a <__lshift+0x1a>
 8016778:	0098      	lsls	r0, r3, #2
 801677a:	5011      	str	r1, [r2, r0]
 801677c:	3301      	adds	r3, #1
 801677e:	42ab      	cmp	r3, r5
 8016780:	dbfa      	blt.n	8016778 <__lshift+0x48>
 8016782:	43eb      	mvns	r3, r5
 8016784:	17db      	asrs	r3, r3, #31
 8016786:	401d      	ands	r5, r3
 8016788:	211f      	movs	r1, #31
 801678a:	0023      	movs	r3, r4
 801678c:	0038      	movs	r0, r7
 801678e:	00ad      	lsls	r5, r5, #2
 8016790:	1955      	adds	r5, r2, r5
 8016792:	6922      	ldr	r2, [r4, #16]
 8016794:	3314      	adds	r3, #20
 8016796:	0092      	lsls	r2, r2, #2
 8016798:	4008      	ands	r0, r1
 801679a:	4684      	mov	ip, r0
 801679c:	189a      	adds	r2, r3, r2
 801679e:	420f      	tst	r7, r1
 80167a0:	d02a      	beq.n	80167f8 <__lshift+0xc8>
 80167a2:	3101      	adds	r1, #1
 80167a4:	1a09      	subs	r1, r1, r0
 80167a6:	9105      	str	r1, [sp, #20]
 80167a8:	2100      	movs	r1, #0
 80167aa:	9503      	str	r5, [sp, #12]
 80167ac:	4667      	mov	r7, ip
 80167ae:	6818      	ldr	r0, [r3, #0]
 80167b0:	40b8      	lsls	r0, r7
 80167b2:	4301      	orrs	r1, r0
 80167b4:	9803      	ldr	r0, [sp, #12]
 80167b6:	c002      	stmia	r0!, {r1}
 80167b8:	cb02      	ldmia	r3!, {r1}
 80167ba:	9003      	str	r0, [sp, #12]
 80167bc:	9805      	ldr	r0, [sp, #20]
 80167be:	40c1      	lsrs	r1, r0
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d8f3      	bhi.n	80167ac <__lshift+0x7c>
 80167c4:	0020      	movs	r0, r4
 80167c6:	3015      	adds	r0, #21
 80167c8:	2304      	movs	r3, #4
 80167ca:	4282      	cmp	r2, r0
 80167cc:	d304      	bcc.n	80167d8 <__lshift+0xa8>
 80167ce:	1b13      	subs	r3, r2, r4
 80167d0:	3b15      	subs	r3, #21
 80167d2:	089b      	lsrs	r3, r3, #2
 80167d4:	3301      	adds	r3, #1
 80167d6:	009b      	lsls	r3, r3, #2
 80167d8:	50e9      	str	r1, [r5, r3]
 80167da:	2900      	cmp	r1, #0
 80167dc:	d002      	beq.n	80167e4 <__lshift+0xb4>
 80167de:	9b02      	ldr	r3, [sp, #8]
 80167e0:	3302      	adds	r3, #2
 80167e2:	9301      	str	r3, [sp, #4]
 80167e4:	9b01      	ldr	r3, [sp, #4]
 80167e6:	9804      	ldr	r0, [sp, #16]
 80167e8:	3b01      	subs	r3, #1
 80167ea:	0021      	movs	r1, r4
 80167ec:	6133      	str	r3, [r6, #16]
 80167ee:	f7ff fdcd 	bl	801638c <_Bfree>
 80167f2:	0030      	movs	r0, r6
 80167f4:	b007      	add	sp, #28
 80167f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167f8:	cb02      	ldmia	r3!, {r1}
 80167fa:	c502      	stmia	r5!, {r1}
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d8fb      	bhi.n	80167f8 <__lshift+0xc8>
 8016800:	e7f0      	b.n	80167e4 <__lshift+0xb4>
 8016802:	46c0      	nop			; (mov r8, r8)
 8016804:	08018efb 	.word	0x08018efb
 8016808:	08018f0c 	.word	0x08018f0c

0801680c <__mcmp>:
 801680c:	6902      	ldr	r2, [r0, #16]
 801680e:	690b      	ldr	r3, [r1, #16]
 8016810:	b530      	push	{r4, r5, lr}
 8016812:	0004      	movs	r4, r0
 8016814:	1ad0      	subs	r0, r2, r3
 8016816:	429a      	cmp	r2, r3
 8016818:	d10d      	bne.n	8016836 <__mcmp+0x2a>
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	3414      	adds	r4, #20
 801681e:	3114      	adds	r1, #20
 8016820:	18e2      	adds	r2, r4, r3
 8016822:	18c9      	adds	r1, r1, r3
 8016824:	3a04      	subs	r2, #4
 8016826:	3904      	subs	r1, #4
 8016828:	6815      	ldr	r5, [r2, #0]
 801682a:	680b      	ldr	r3, [r1, #0]
 801682c:	429d      	cmp	r5, r3
 801682e:	d003      	beq.n	8016838 <__mcmp+0x2c>
 8016830:	2001      	movs	r0, #1
 8016832:	429d      	cmp	r5, r3
 8016834:	d303      	bcc.n	801683e <__mcmp+0x32>
 8016836:	bd30      	pop	{r4, r5, pc}
 8016838:	4294      	cmp	r4, r2
 801683a:	d3f3      	bcc.n	8016824 <__mcmp+0x18>
 801683c:	e7fb      	b.n	8016836 <__mcmp+0x2a>
 801683e:	4240      	negs	r0, r0
 8016840:	e7f9      	b.n	8016836 <__mcmp+0x2a>
	...

08016844 <__mdiff>:
 8016844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016846:	000e      	movs	r6, r1
 8016848:	0007      	movs	r7, r0
 801684a:	0011      	movs	r1, r2
 801684c:	0030      	movs	r0, r6
 801684e:	b087      	sub	sp, #28
 8016850:	0014      	movs	r4, r2
 8016852:	f7ff ffdb 	bl	801680c <__mcmp>
 8016856:	1e05      	subs	r5, r0, #0
 8016858:	d110      	bne.n	801687c <__mdiff+0x38>
 801685a:	0001      	movs	r1, r0
 801685c:	0038      	movs	r0, r7
 801685e:	f7ff fd51 	bl	8016304 <_Balloc>
 8016862:	1e02      	subs	r2, r0, #0
 8016864:	d104      	bne.n	8016870 <__mdiff+0x2c>
 8016866:	4b40      	ldr	r3, [pc, #256]	; (8016968 <__mdiff+0x124>)
 8016868:	4940      	ldr	r1, [pc, #256]	; (801696c <__mdiff+0x128>)
 801686a:	4841      	ldr	r0, [pc, #260]	; (8016970 <__mdiff+0x12c>)
 801686c:	f000 fa74 	bl	8016d58 <__assert_func>
 8016870:	2301      	movs	r3, #1
 8016872:	6145      	str	r5, [r0, #20]
 8016874:	6103      	str	r3, [r0, #16]
 8016876:	0010      	movs	r0, r2
 8016878:	b007      	add	sp, #28
 801687a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801687c:	2301      	movs	r3, #1
 801687e:	9301      	str	r3, [sp, #4]
 8016880:	2800      	cmp	r0, #0
 8016882:	db04      	blt.n	801688e <__mdiff+0x4a>
 8016884:	0023      	movs	r3, r4
 8016886:	0034      	movs	r4, r6
 8016888:	001e      	movs	r6, r3
 801688a:	2300      	movs	r3, #0
 801688c:	9301      	str	r3, [sp, #4]
 801688e:	0038      	movs	r0, r7
 8016890:	6861      	ldr	r1, [r4, #4]
 8016892:	f7ff fd37 	bl	8016304 <_Balloc>
 8016896:	1e02      	subs	r2, r0, #0
 8016898:	d103      	bne.n	80168a2 <__mdiff+0x5e>
 801689a:	2190      	movs	r1, #144	; 0x90
 801689c:	4b32      	ldr	r3, [pc, #200]	; (8016968 <__mdiff+0x124>)
 801689e:	0089      	lsls	r1, r1, #2
 80168a0:	e7e3      	b.n	801686a <__mdiff+0x26>
 80168a2:	9b01      	ldr	r3, [sp, #4]
 80168a4:	2700      	movs	r7, #0
 80168a6:	60c3      	str	r3, [r0, #12]
 80168a8:	6920      	ldr	r0, [r4, #16]
 80168aa:	3414      	adds	r4, #20
 80168ac:	9401      	str	r4, [sp, #4]
 80168ae:	9b01      	ldr	r3, [sp, #4]
 80168b0:	0084      	lsls	r4, r0, #2
 80168b2:	191b      	adds	r3, r3, r4
 80168b4:	0034      	movs	r4, r6
 80168b6:	9302      	str	r3, [sp, #8]
 80168b8:	6933      	ldr	r3, [r6, #16]
 80168ba:	3414      	adds	r4, #20
 80168bc:	0099      	lsls	r1, r3, #2
 80168be:	1863      	adds	r3, r4, r1
 80168c0:	9303      	str	r3, [sp, #12]
 80168c2:	0013      	movs	r3, r2
 80168c4:	3314      	adds	r3, #20
 80168c6:	469c      	mov	ip, r3
 80168c8:	9305      	str	r3, [sp, #20]
 80168ca:	9b01      	ldr	r3, [sp, #4]
 80168cc:	9304      	str	r3, [sp, #16]
 80168ce:	9b04      	ldr	r3, [sp, #16]
 80168d0:	cc02      	ldmia	r4!, {r1}
 80168d2:	cb20      	ldmia	r3!, {r5}
 80168d4:	9304      	str	r3, [sp, #16]
 80168d6:	b2ab      	uxth	r3, r5
 80168d8:	19df      	adds	r7, r3, r7
 80168da:	b28b      	uxth	r3, r1
 80168dc:	1afb      	subs	r3, r7, r3
 80168de:	0c09      	lsrs	r1, r1, #16
 80168e0:	0c2d      	lsrs	r5, r5, #16
 80168e2:	1a6d      	subs	r5, r5, r1
 80168e4:	1419      	asrs	r1, r3, #16
 80168e6:	186d      	adds	r5, r5, r1
 80168e8:	4661      	mov	r1, ip
 80168ea:	142f      	asrs	r7, r5, #16
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	042d      	lsls	r5, r5, #16
 80168f0:	432b      	orrs	r3, r5
 80168f2:	c108      	stmia	r1!, {r3}
 80168f4:	9b03      	ldr	r3, [sp, #12]
 80168f6:	468c      	mov	ip, r1
 80168f8:	42a3      	cmp	r3, r4
 80168fa:	d8e8      	bhi.n	80168ce <__mdiff+0x8a>
 80168fc:	0031      	movs	r1, r6
 80168fe:	9c03      	ldr	r4, [sp, #12]
 8016900:	3115      	adds	r1, #21
 8016902:	2304      	movs	r3, #4
 8016904:	428c      	cmp	r4, r1
 8016906:	d304      	bcc.n	8016912 <__mdiff+0xce>
 8016908:	1ba3      	subs	r3, r4, r6
 801690a:	3b15      	subs	r3, #21
 801690c:	089b      	lsrs	r3, r3, #2
 801690e:	3301      	adds	r3, #1
 8016910:	009b      	lsls	r3, r3, #2
 8016912:	9901      	ldr	r1, [sp, #4]
 8016914:	18cc      	adds	r4, r1, r3
 8016916:	9905      	ldr	r1, [sp, #20]
 8016918:	0026      	movs	r6, r4
 801691a:	18cb      	adds	r3, r1, r3
 801691c:	469c      	mov	ip, r3
 801691e:	9902      	ldr	r1, [sp, #8]
 8016920:	428e      	cmp	r6, r1
 8016922:	d310      	bcc.n	8016946 <__mdiff+0x102>
 8016924:	9e02      	ldr	r6, [sp, #8]
 8016926:	1ee1      	subs	r1, r4, #3
 8016928:	2500      	movs	r5, #0
 801692a:	428e      	cmp	r6, r1
 801692c:	d304      	bcc.n	8016938 <__mdiff+0xf4>
 801692e:	0031      	movs	r1, r6
 8016930:	3103      	adds	r1, #3
 8016932:	1b0c      	subs	r4, r1, r4
 8016934:	08a4      	lsrs	r4, r4, #2
 8016936:	00a5      	lsls	r5, r4, #2
 8016938:	195b      	adds	r3, r3, r5
 801693a:	3b04      	subs	r3, #4
 801693c:	6819      	ldr	r1, [r3, #0]
 801693e:	2900      	cmp	r1, #0
 8016940:	d00f      	beq.n	8016962 <__mdiff+0x11e>
 8016942:	6110      	str	r0, [r2, #16]
 8016944:	e797      	b.n	8016876 <__mdiff+0x32>
 8016946:	ce02      	ldmia	r6!, {r1}
 8016948:	b28d      	uxth	r5, r1
 801694a:	19ed      	adds	r5, r5, r7
 801694c:	0c0f      	lsrs	r7, r1, #16
 801694e:	1429      	asrs	r1, r5, #16
 8016950:	1879      	adds	r1, r7, r1
 8016952:	140f      	asrs	r7, r1, #16
 8016954:	b2ad      	uxth	r5, r5
 8016956:	0409      	lsls	r1, r1, #16
 8016958:	430d      	orrs	r5, r1
 801695a:	4661      	mov	r1, ip
 801695c:	c120      	stmia	r1!, {r5}
 801695e:	468c      	mov	ip, r1
 8016960:	e7dd      	b.n	801691e <__mdiff+0xda>
 8016962:	3801      	subs	r0, #1
 8016964:	e7e9      	b.n	801693a <__mdiff+0xf6>
 8016966:	46c0      	nop			; (mov r8, r8)
 8016968:	08018efb 	.word	0x08018efb
 801696c:	00000232 	.word	0x00000232
 8016970:	08018f0c 	.word	0x08018f0c

08016974 <__d2b>:
 8016974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016976:	2101      	movs	r1, #1
 8016978:	0014      	movs	r4, r2
 801697a:	001e      	movs	r6, r3
 801697c:	9f08      	ldr	r7, [sp, #32]
 801697e:	f7ff fcc1 	bl	8016304 <_Balloc>
 8016982:	1e05      	subs	r5, r0, #0
 8016984:	d105      	bne.n	8016992 <__d2b+0x1e>
 8016986:	0002      	movs	r2, r0
 8016988:	4b26      	ldr	r3, [pc, #152]	; (8016a24 <__d2b+0xb0>)
 801698a:	4927      	ldr	r1, [pc, #156]	; (8016a28 <__d2b+0xb4>)
 801698c:	4827      	ldr	r0, [pc, #156]	; (8016a2c <__d2b+0xb8>)
 801698e:	f000 f9e3 	bl	8016d58 <__assert_func>
 8016992:	0333      	lsls	r3, r6, #12
 8016994:	0076      	lsls	r6, r6, #1
 8016996:	0b1b      	lsrs	r3, r3, #12
 8016998:	0d76      	lsrs	r6, r6, #21
 801699a:	d124      	bne.n	80169e6 <__d2b+0x72>
 801699c:	9301      	str	r3, [sp, #4]
 801699e:	2c00      	cmp	r4, #0
 80169a0:	d027      	beq.n	80169f2 <__d2b+0x7e>
 80169a2:	4668      	mov	r0, sp
 80169a4:	9400      	str	r4, [sp, #0]
 80169a6:	f7ff fd73 	bl	8016490 <__lo0bits>
 80169aa:	9c00      	ldr	r4, [sp, #0]
 80169ac:	2800      	cmp	r0, #0
 80169ae:	d01e      	beq.n	80169ee <__d2b+0x7a>
 80169b0:	9b01      	ldr	r3, [sp, #4]
 80169b2:	2120      	movs	r1, #32
 80169b4:	001a      	movs	r2, r3
 80169b6:	1a09      	subs	r1, r1, r0
 80169b8:	408a      	lsls	r2, r1
 80169ba:	40c3      	lsrs	r3, r0
 80169bc:	4322      	orrs	r2, r4
 80169be:	616a      	str	r2, [r5, #20]
 80169c0:	9301      	str	r3, [sp, #4]
 80169c2:	9c01      	ldr	r4, [sp, #4]
 80169c4:	61ac      	str	r4, [r5, #24]
 80169c6:	1e63      	subs	r3, r4, #1
 80169c8:	419c      	sbcs	r4, r3
 80169ca:	3401      	adds	r4, #1
 80169cc:	612c      	str	r4, [r5, #16]
 80169ce:	2e00      	cmp	r6, #0
 80169d0:	d018      	beq.n	8016a04 <__d2b+0x90>
 80169d2:	4b17      	ldr	r3, [pc, #92]	; (8016a30 <__d2b+0xbc>)
 80169d4:	18f6      	adds	r6, r6, r3
 80169d6:	2335      	movs	r3, #53	; 0x35
 80169d8:	1836      	adds	r6, r6, r0
 80169da:	1a18      	subs	r0, r3, r0
 80169dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169de:	603e      	str	r6, [r7, #0]
 80169e0:	6018      	str	r0, [r3, #0]
 80169e2:	0028      	movs	r0, r5
 80169e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169e6:	2280      	movs	r2, #128	; 0x80
 80169e8:	0352      	lsls	r2, r2, #13
 80169ea:	4313      	orrs	r3, r2
 80169ec:	e7d6      	b.n	801699c <__d2b+0x28>
 80169ee:	616c      	str	r4, [r5, #20]
 80169f0:	e7e7      	b.n	80169c2 <__d2b+0x4e>
 80169f2:	a801      	add	r0, sp, #4
 80169f4:	f7ff fd4c 	bl	8016490 <__lo0bits>
 80169f8:	2401      	movs	r4, #1
 80169fa:	9b01      	ldr	r3, [sp, #4]
 80169fc:	612c      	str	r4, [r5, #16]
 80169fe:	616b      	str	r3, [r5, #20]
 8016a00:	3020      	adds	r0, #32
 8016a02:	e7e4      	b.n	80169ce <__d2b+0x5a>
 8016a04:	4b0b      	ldr	r3, [pc, #44]	; (8016a34 <__d2b+0xc0>)
 8016a06:	18c0      	adds	r0, r0, r3
 8016a08:	4b0b      	ldr	r3, [pc, #44]	; (8016a38 <__d2b+0xc4>)
 8016a0a:	6038      	str	r0, [r7, #0]
 8016a0c:	18e3      	adds	r3, r4, r3
 8016a0e:	009b      	lsls	r3, r3, #2
 8016a10:	18eb      	adds	r3, r5, r3
 8016a12:	6958      	ldr	r0, [r3, #20]
 8016a14:	f7ff fd22 	bl	801645c <__hi0bits>
 8016a18:	0164      	lsls	r4, r4, #5
 8016a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a1c:	1a24      	subs	r4, r4, r0
 8016a1e:	601c      	str	r4, [r3, #0]
 8016a20:	e7df      	b.n	80169e2 <__d2b+0x6e>
 8016a22:	46c0      	nop			; (mov r8, r8)
 8016a24:	08018efb 	.word	0x08018efb
 8016a28:	0000030a 	.word	0x0000030a
 8016a2c:	08018f0c 	.word	0x08018f0c
 8016a30:	fffffbcd 	.word	0xfffffbcd
 8016a34:	fffffbce 	.word	0xfffffbce
 8016a38:	3fffffff 	.word	0x3fffffff

08016a3c <_calloc_r>:
 8016a3c:	b570      	push	{r4, r5, r6, lr}
 8016a3e:	0c13      	lsrs	r3, r2, #16
 8016a40:	0c0d      	lsrs	r5, r1, #16
 8016a42:	d11e      	bne.n	8016a82 <_calloc_r+0x46>
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d10c      	bne.n	8016a62 <_calloc_r+0x26>
 8016a48:	b289      	uxth	r1, r1
 8016a4a:	b294      	uxth	r4, r2
 8016a4c:	434c      	muls	r4, r1
 8016a4e:	0021      	movs	r1, r4
 8016a50:	f7fe f87c 	bl	8014b4c <_malloc_r>
 8016a54:	1e05      	subs	r5, r0, #0
 8016a56:	d01b      	beq.n	8016a90 <_calloc_r+0x54>
 8016a58:	0022      	movs	r2, r4
 8016a5a:	2100      	movs	r1, #0
 8016a5c:	f7fe f801 	bl	8014a62 <memset>
 8016a60:	e016      	b.n	8016a90 <_calloc_r+0x54>
 8016a62:	1c1d      	adds	r5, r3, #0
 8016a64:	1c0b      	adds	r3, r1, #0
 8016a66:	b292      	uxth	r2, r2
 8016a68:	b289      	uxth	r1, r1
 8016a6a:	b29c      	uxth	r4, r3
 8016a6c:	4351      	muls	r1, r2
 8016a6e:	b2ab      	uxth	r3, r5
 8016a70:	4363      	muls	r3, r4
 8016a72:	0c0c      	lsrs	r4, r1, #16
 8016a74:	191c      	adds	r4, r3, r4
 8016a76:	0c22      	lsrs	r2, r4, #16
 8016a78:	d107      	bne.n	8016a8a <_calloc_r+0x4e>
 8016a7a:	0424      	lsls	r4, r4, #16
 8016a7c:	b289      	uxth	r1, r1
 8016a7e:	430c      	orrs	r4, r1
 8016a80:	e7e5      	b.n	8016a4e <_calloc_r+0x12>
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d101      	bne.n	8016a8a <_calloc_r+0x4e>
 8016a86:	1c13      	adds	r3, r2, #0
 8016a88:	e7ed      	b.n	8016a66 <_calloc_r+0x2a>
 8016a8a:	230c      	movs	r3, #12
 8016a8c:	2500      	movs	r5, #0
 8016a8e:	6003      	str	r3, [r0, #0]
 8016a90:	0028      	movs	r0, r5
 8016a92:	bd70      	pop	{r4, r5, r6, pc}

08016a94 <__ssputs_r>:
 8016a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a96:	688e      	ldr	r6, [r1, #8]
 8016a98:	b085      	sub	sp, #20
 8016a9a:	0007      	movs	r7, r0
 8016a9c:	000c      	movs	r4, r1
 8016a9e:	9203      	str	r2, [sp, #12]
 8016aa0:	9301      	str	r3, [sp, #4]
 8016aa2:	429e      	cmp	r6, r3
 8016aa4:	d83c      	bhi.n	8016b20 <__ssputs_r+0x8c>
 8016aa6:	2390      	movs	r3, #144	; 0x90
 8016aa8:	898a      	ldrh	r2, [r1, #12]
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	421a      	tst	r2, r3
 8016aae:	d034      	beq.n	8016b1a <__ssputs_r+0x86>
 8016ab0:	6909      	ldr	r1, [r1, #16]
 8016ab2:	6823      	ldr	r3, [r4, #0]
 8016ab4:	6960      	ldr	r0, [r4, #20]
 8016ab6:	1a5b      	subs	r3, r3, r1
 8016ab8:	9302      	str	r3, [sp, #8]
 8016aba:	2303      	movs	r3, #3
 8016abc:	4343      	muls	r3, r0
 8016abe:	0fdd      	lsrs	r5, r3, #31
 8016ac0:	18ed      	adds	r5, r5, r3
 8016ac2:	9b01      	ldr	r3, [sp, #4]
 8016ac4:	9802      	ldr	r0, [sp, #8]
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	181b      	adds	r3, r3, r0
 8016aca:	106d      	asrs	r5, r5, #1
 8016acc:	42ab      	cmp	r3, r5
 8016ace:	d900      	bls.n	8016ad2 <__ssputs_r+0x3e>
 8016ad0:	001d      	movs	r5, r3
 8016ad2:	0553      	lsls	r3, r2, #21
 8016ad4:	d532      	bpl.n	8016b3c <__ssputs_r+0xa8>
 8016ad6:	0029      	movs	r1, r5
 8016ad8:	0038      	movs	r0, r7
 8016ada:	f7fe f837 	bl	8014b4c <_malloc_r>
 8016ade:	1e06      	subs	r6, r0, #0
 8016ae0:	d109      	bne.n	8016af6 <__ssputs_r+0x62>
 8016ae2:	230c      	movs	r3, #12
 8016ae4:	603b      	str	r3, [r7, #0]
 8016ae6:	2340      	movs	r3, #64	; 0x40
 8016ae8:	2001      	movs	r0, #1
 8016aea:	89a2      	ldrh	r2, [r4, #12]
 8016aec:	4240      	negs	r0, r0
 8016aee:	4313      	orrs	r3, r2
 8016af0:	81a3      	strh	r3, [r4, #12]
 8016af2:	b005      	add	sp, #20
 8016af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af6:	9a02      	ldr	r2, [sp, #8]
 8016af8:	6921      	ldr	r1, [r4, #16]
 8016afa:	f7fd ffa9 	bl	8014a50 <memcpy>
 8016afe:	89a3      	ldrh	r3, [r4, #12]
 8016b00:	4a14      	ldr	r2, [pc, #80]	; (8016b54 <__ssputs_r+0xc0>)
 8016b02:	401a      	ands	r2, r3
 8016b04:	2380      	movs	r3, #128	; 0x80
 8016b06:	4313      	orrs	r3, r2
 8016b08:	81a3      	strh	r3, [r4, #12]
 8016b0a:	9b02      	ldr	r3, [sp, #8]
 8016b0c:	6126      	str	r6, [r4, #16]
 8016b0e:	18f6      	adds	r6, r6, r3
 8016b10:	6026      	str	r6, [r4, #0]
 8016b12:	6165      	str	r5, [r4, #20]
 8016b14:	9e01      	ldr	r6, [sp, #4]
 8016b16:	1aed      	subs	r5, r5, r3
 8016b18:	60a5      	str	r5, [r4, #8]
 8016b1a:	9b01      	ldr	r3, [sp, #4]
 8016b1c:	429e      	cmp	r6, r3
 8016b1e:	d900      	bls.n	8016b22 <__ssputs_r+0x8e>
 8016b20:	9e01      	ldr	r6, [sp, #4]
 8016b22:	0032      	movs	r2, r6
 8016b24:	9903      	ldr	r1, [sp, #12]
 8016b26:	6820      	ldr	r0, [r4, #0]
 8016b28:	f000 f959 	bl	8016dde <memmove>
 8016b2c:	68a3      	ldr	r3, [r4, #8]
 8016b2e:	2000      	movs	r0, #0
 8016b30:	1b9b      	subs	r3, r3, r6
 8016b32:	60a3      	str	r3, [r4, #8]
 8016b34:	6823      	ldr	r3, [r4, #0]
 8016b36:	199e      	adds	r6, r3, r6
 8016b38:	6026      	str	r6, [r4, #0]
 8016b3a:	e7da      	b.n	8016af2 <__ssputs_r+0x5e>
 8016b3c:	002a      	movs	r2, r5
 8016b3e:	0038      	movs	r0, r7
 8016b40:	f000 f960 	bl	8016e04 <_realloc_r>
 8016b44:	1e06      	subs	r6, r0, #0
 8016b46:	d1e0      	bne.n	8016b0a <__ssputs_r+0x76>
 8016b48:	0038      	movs	r0, r7
 8016b4a:	6921      	ldr	r1, [r4, #16]
 8016b4c:	f7fd ff92 	bl	8014a74 <_free_r>
 8016b50:	e7c7      	b.n	8016ae2 <__ssputs_r+0x4e>
 8016b52:	46c0      	nop			; (mov r8, r8)
 8016b54:	fffffb7f 	.word	0xfffffb7f

08016b58 <_svfiprintf_r>:
 8016b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b5a:	b0a1      	sub	sp, #132	; 0x84
 8016b5c:	9003      	str	r0, [sp, #12]
 8016b5e:	001d      	movs	r5, r3
 8016b60:	898b      	ldrh	r3, [r1, #12]
 8016b62:	000f      	movs	r7, r1
 8016b64:	0016      	movs	r6, r2
 8016b66:	061b      	lsls	r3, r3, #24
 8016b68:	d511      	bpl.n	8016b8e <_svfiprintf_r+0x36>
 8016b6a:	690b      	ldr	r3, [r1, #16]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d10e      	bne.n	8016b8e <_svfiprintf_r+0x36>
 8016b70:	2140      	movs	r1, #64	; 0x40
 8016b72:	f7fd ffeb 	bl	8014b4c <_malloc_r>
 8016b76:	6038      	str	r0, [r7, #0]
 8016b78:	6138      	str	r0, [r7, #16]
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	d105      	bne.n	8016b8a <_svfiprintf_r+0x32>
 8016b7e:	230c      	movs	r3, #12
 8016b80:	9a03      	ldr	r2, [sp, #12]
 8016b82:	3801      	subs	r0, #1
 8016b84:	6013      	str	r3, [r2, #0]
 8016b86:	b021      	add	sp, #132	; 0x84
 8016b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b8a:	2340      	movs	r3, #64	; 0x40
 8016b8c:	617b      	str	r3, [r7, #20]
 8016b8e:	2300      	movs	r3, #0
 8016b90:	ac08      	add	r4, sp, #32
 8016b92:	6163      	str	r3, [r4, #20]
 8016b94:	3320      	adds	r3, #32
 8016b96:	7663      	strb	r3, [r4, #25]
 8016b98:	3310      	adds	r3, #16
 8016b9a:	76a3      	strb	r3, [r4, #26]
 8016b9c:	9507      	str	r5, [sp, #28]
 8016b9e:	0035      	movs	r5, r6
 8016ba0:	782b      	ldrb	r3, [r5, #0]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d001      	beq.n	8016baa <_svfiprintf_r+0x52>
 8016ba6:	2b25      	cmp	r3, #37	; 0x25
 8016ba8:	d147      	bne.n	8016c3a <_svfiprintf_r+0xe2>
 8016baa:	1bab      	subs	r3, r5, r6
 8016bac:	9305      	str	r3, [sp, #20]
 8016bae:	42b5      	cmp	r5, r6
 8016bb0:	d00c      	beq.n	8016bcc <_svfiprintf_r+0x74>
 8016bb2:	0032      	movs	r2, r6
 8016bb4:	0039      	movs	r1, r7
 8016bb6:	9803      	ldr	r0, [sp, #12]
 8016bb8:	f7ff ff6c 	bl	8016a94 <__ssputs_r>
 8016bbc:	1c43      	adds	r3, r0, #1
 8016bbe:	d100      	bne.n	8016bc2 <_svfiprintf_r+0x6a>
 8016bc0:	e0ae      	b.n	8016d20 <_svfiprintf_r+0x1c8>
 8016bc2:	6962      	ldr	r2, [r4, #20]
 8016bc4:	9b05      	ldr	r3, [sp, #20]
 8016bc6:	4694      	mov	ip, r2
 8016bc8:	4463      	add	r3, ip
 8016bca:	6163      	str	r3, [r4, #20]
 8016bcc:	782b      	ldrb	r3, [r5, #0]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d100      	bne.n	8016bd4 <_svfiprintf_r+0x7c>
 8016bd2:	e0a5      	b.n	8016d20 <_svfiprintf_r+0x1c8>
 8016bd4:	2201      	movs	r2, #1
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	4252      	negs	r2, r2
 8016bda:	6062      	str	r2, [r4, #4]
 8016bdc:	a904      	add	r1, sp, #16
 8016bde:	3254      	adds	r2, #84	; 0x54
 8016be0:	1852      	adds	r2, r2, r1
 8016be2:	1c6e      	adds	r6, r5, #1
 8016be4:	6023      	str	r3, [r4, #0]
 8016be6:	60e3      	str	r3, [r4, #12]
 8016be8:	60a3      	str	r3, [r4, #8]
 8016bea:	7013      	strb	r3, [r2, #0]
 8016bec:	65a3      	str	r3, [r4, #88]	; 0x58
 8016bee:	2205      	movs	r2, #5
 8016bf0:	7831      	ldrb	r1, [r6, #0]
 8016bf2:	4854      	ldr	r0, [pc, #336]	; (8016d44 <_svfiprintf_r+0x1ec>)
 8016bf4:	f7ff fb6a 	bl	80162cc <memchr>
 8016bf8:	1c75      	adds	r5, r6, #1
 8016bfa:	2800      	cmp	r0, #0
 8016bfc:	d11f      	bne.n	8016c3e <_svfiprintf_r+0xe6>
 8016bfe:	6822      	ldr	r2, [r4, #0]
 8016c00:	06d3      	lsls	r3, r2, #27
 8016c02:	d504      	bpl.n	8016c0e <_svfiprintf_r+0xb6>
 8016c04:	2353      	movs	r3, #83	; 0x53
 8016c06:	a904      	add	r1, sp, #16
 8016c08:	185b      	adds	r3, r3, r1
 8016c0a:	2120      	movs	r1, #32
 8016c0c:	7019      	strb	r1, [r3, #0]
 8016c0e:	0713      	lsls	r3, r2, #28
 8016c10:	d504      	bpl.n	8016c1c <_svfiprintf_r+0xc4>
 8016c12:	2353      	movs	r3, #83	; 0x53
 8016c14:	a904      	add	r1, sp, #16
 8016c16:	185b      	adds	r3, r3, r1
 8016c18:	212b      	movs	r1, #43	; 0x2b
 8016c1a:	7019      	strb	r1, [r3, #0]
 8016c1c:	7833      	ldrb	r3, [r6, #0]
 8016c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8016c20:	d016      	beq.n	8016c50 <_svfiprintf_r+0xf8>
 8016c22:	0035      	movs	r5, r6
 8016c24:	2100      	movs	r1, #0
 8016c26:	200a      	movs	r0, #10
 8016c28:	68e3      	ldr	r3, [r4, #12]
 8016c2a:	782a      	ldrb	r2, [r5, #0]
 8016c2c:	1c6e      	adds	r6, r5, #1
 8016c2e:	3a30      	subs	r2, #48	; 0x30
 8016c30:	2a09      	cmp	r2, #9
 8016c32:	d94e      	bls.n	8016cd2 <_svfiprintf_r+0x17a>
 8016c34:	2900      	cmp	r1, #0
 8016c36:	d111      	bne.n	8016c5c <_svfiprintf_r+0x104>
 8016c38:	e017      	b.n	8016c6a <_svfiprintf_r+0x112>
 8016c3a:	3501      	adds	r5, #1
 8016c3c:	e7b0      	b.n	8016ba0 <_svfiprintf_r+0x48>
 8016c3e:	4b41      	ldr	r3, [pc, #260]	; (8016d44 <_svfiprintf_r+0x1ec>)
 8016c40:	6822      	ldr	r2, [r4, #0]
 8016c42:	1ac0      	subs	r0, r0, r3
 8016c44:	2301      	movs	r3, #1
 8016c46:	4083      	lsls	r3, r0
 8016c48:	4313      	orrs	r3, r2
 8016c4a:	002e      	movs	r6, r5
 8016c4c:	6023      	str	r3, [r4, #0]
 8016c4e:	e7ce      	b.n	8016bee <_svfiprintf_r+0x96>
 8016c50:	9b07      	ldr	r3, [sp, #28]
 8016c52:	1d19      	adds	r1, r3, #4
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	9107      	str	r1, [sp, #28]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	db01      	blt.n	8016c60 <_svfiprintf_r+0x108>
 8016c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c5e:	e004      	b.n	8016c6a <_svfiprintf_r+0x112>
 8016c60:	425b      	negs	r3, r3
 8016c62:	60e3      	str	r3, [r4, #12]
 8016c64:	2302      	movs	r3, #2
 8016c66:	4313      	orrs	r3, r2
 8016c68:	6023      	str	r3, [r4, #0]
 8016c6a:	782b      	ldrb	r3, [r5, #0]
 8016c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8016c6e:	d10a      	bne.n	8016c86 <_svfiprintf_r+0x12e>
 8016c70:	786b      	ldrb	r3, [r5, #1]
 8016c72:	2b2a      	cmp	r3, #42	; 0x2a
 8016c74:	d135      	bne.n	8016ce2 <_svfiprintf_r+0x18a>
 8016c76:	9b07      	ldr	r3, [sp, #28]
 8016c78:	3502      	adds	r5, #2
 8016c7a:	1d1a      	adds	r2, r3, #4
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	9207      	str	r2, [sp, #28]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	db2b      	blt.n	8016cdc <_svfiprintf_r+0x184>
 8016c84:	9309      	str	r3, [sp, #36]	; 0x24
 8016c86:	4e30      	ldr	r6, [pc, #192]	; (8016d48 <_svfiprintf_r+0x1f0>)
 8016c88:	2203      	movs	r2, #3
 8016c8a:	0030      	movs	r0, r6
 8016c8c:	7829      	ldrb	r1, [r5, #0]
 8016c8e:	f7ff fb1d 	bl	80162cc <memchr>
 8016c92:	2800      	cmp	r0, #0
 8016c94:	d006      	beq.n	8016ca4 <_svfiprintf_r+0x14c>
 8016c96:	2340      	movs	r3, #64	; 0x40
 8016c98:	1b80      	subs	r0, r0, r6
 8016c9a:	4083      	lsls	r3, r0
 8016c9c:	6822      	ldr	r2, [r4, #0]
 8016c9e:	3501      	adds	r5, #1
 8016ca0:	4313      	orrs	r3, r2
 8016ca2:	6023      	str	r3, [r4, #0]
 8016ca4:	7829      	ldrb	r1, [r5, #0]
 8016ca6:	2206      	movs	r2, #6
 8016ca8:	4828      	ldr	r0, [pc, #160]	; (8016d4c <_svfiprintf_r+0x1f4>)
 8016caa:	1c6e      	adds	r6, r5, #1
 8016cac:	7621      	strb	r1, [r4, #24]
 8016cae:	f7ff fb0d 	bl	80162cc <memchr>
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	d03c      	beq.n	8016d30 <_svfiprintf_r+0x1d8>
 8016cb6:	4b26      	ldr	r3, [pc, #152]	; (8016d50 <_svfiprintf_r+0x1f8>)
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d125      	bne.n	8016d08 <_svfiprintf_r+0x1b0>
 8016cbc:	2207      	movs	r2, #7
 8016cbe:	9b07      	ldr	r3, [sp, #28]
 8016cc0:	3307      	adds	r3, #7
 8016cc2:	4393      	bics	r3, r2
 8016cc4:	3308      	adds	r3, #8
 8016cc6:	9307      	str	r3, [sp, #28]
 8016cc8:	6963      	ldr	r3, [r4, #20]
 8016cca:	9a04      	ldr	r2, [sp, #16]
 8016ccc:	189b      	adds	r3, r3, r2
 8016cce:	6163      	str	r3, [r4, #20]
 8016cd0:	e765      	b.n	8016b9e <_svfiprintf_r+0x46>
 8016cd2:	4343      	muls	r3, r0
 8016cd4:	0035      	movs	r5, r6
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	189b      	adds	r3, r3, r2
 8016cda:	e7a6      	b.n	8016c2a <_svfiprintf_r+0xd2>
 8016cdc:	2301      	movs	r3, #1
 8016cde:	425b      	negs	r3, r3
 8016ce0:	e7d0      	b.n	8016c84 <_svfiprintf_r+0x12c>
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	200a      	movs	r0, #10
 8016ce6:	001a      	movs	r2, r3
 8016ce8:	3501      	adds	r5, #1
 8016cea:	6063      	str	r3, [r4, #4]
 8016cec:	7829      	ldrb	r1, [r5, #0]
 8016cee:	1c6e      	adds	r6, r5, #1
 8016cf0:	3930      	subs	r1, #48	; 0x30
 8016cf2:	2909      	cmp	r1, #9
 8016cf4:	d903      	bls.n	8016cfe <_svfiprintf_r+0x1a6>
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d0c5      	beq.n	8016c86 <_svfiprintf_r+0x12e>
 8016cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8016cfc:	e7c3      	b.n	8016c86 <_svfiprintf_r+0x12e>
 8016cfe:	4342      	muls	r2, r0
 8016d00:	0035      	movs	r5, r6
 8016d02:	2301      	movs	r3, #1
 8016d04:	1852      	adds	r2, r2, r1
 8016d06:	e7f1      	b.n	8016cec <_svfiprintf_r+0x194>
 8016d08:	ab07      	add	r3, sp, #28
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	003a      	movs	r2, r7
 8016d0e:	0021      	movs	r1, r4
 8016d10:	4b10      	ldr	r3, [pc, #64]	; (8016d54 <_svfiprintf_r+0x1fc>)
 8016d12:	9803      	ldr	r0, [sp, #12]
 8016d14:	f7fe f83a 	bl	8014d8c <_printf_float>
 8016d18:	9004      	str	r0, [sp, #16]
 8016d1a:	9b04      	ldr	r3, [sp, #16]
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	d1d3      	bne.n	8016cc8 <_svfiprintf_r+0x170>
 8016d20:	89bb      	ldrh	r3, [r7, #12]
 8016d22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016d24:	065b      	lsls	r3, r3, #25
 8016d26:	d400      	bmi.n	8016d2a <_svfiprintf_r+0x1d2>
 8016d28:	e72d      	b.n	8016b86 <_svfiprintf_r+0x2e>
 8016d2a:	2001      	movs	r0, #1
 8016d2c:	4240      	negs	r0, r0
 8016d2e:	e72a      	b.n	8016b86 <_svfiprintf_r+0x2e>
 8016d30:	ab07      	add	r3, sp, #28
 8016d32:	9300      	str	r3, [sp, #0]
 8016d34:	003a      	movs	r2, r7
 8016d36:	0021      	movs	r1, r4
 8016d38:	4b06      	ldr	r3, [pc, #24]	; (8016d54 <_svfiprintf_r+0x1fc>)
 8016d3a:	9803      	ldr	r0, [sp, #12]
 8016d3c:	f7fe fad8 	bl	80152f0 <_printf_i>
 8016d40:	e7ea      	b.n	8016d18 <_svfiprintf_r+0x1c0>
 8016d42:	46c0      	nop			; (mov r8, r8)
 8016d44:	08019064 	.word	0x08019064
 8016d48:	0801906a 	.word	0x0801906a
 8016d4c:	0801906e 	.word	0x0801906e
 8016d50:	08014d8d 	.word	0x08014d8d
 8016d54:	08016a95 	.word	0x08016a95

08016d58 <__assert_func>:
 8016d58:	b530      	push	{r4, r5, lr}
 8016d5a:	0014      	movs	r4, r2
 8016d5c:	001a      	movs	r2, r3
 8016d5e:	4b09      	ldr	r3, [pc, #36]	; (8016d84 <__assert_func+0x2c>)
 8016d60:	0005      	movs	r5, r0
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	b085      	sub	sp, #20
 8016d66:	68d8      	ldr	r0, [r3, #12]
 8016d68:	4b07      	ldr	r3, [pc, #28]	; (8016d88 <__assert_func+0x30>)
 8016d6a:	2c00      	cmp	r4, #0
 8016d6c:	d101      	bne.n	8016d72 <__assert_func+0x1a>
 8016d6e:	4b07      	ldr	r3, [pc, #28]	; (8016d8c <__assert_func+0x34>)
 8016d70:	001c      	movs	r4, r3
 8016d72:	9301      	str	r3, [sp, #4]
 8016d74:	9100      	str	r1, [sp, #0]
 8016d76:	002b      	movs	r3, r5
 8016d78:	4905      	ldr	r1, [pc, #20]	; (8016d90 <__assert_func+0x38>)
 8016d7a:	9402      	str	r4, [sp, #8]
 8016d7c:	f000 f80a 	bl	8016d94 <fiprintf>
 8016d80:	f000 faac 	bl	80172dc <abort>
 8016d84:	200030d8 	.word	0x200030d8
 8016d88:	08019075 	.word	0x08019075
 8016d8c:	080190b0 	.word	0x080190b0
 8016d90:	08019082 	.word	0x08019082

08016d94 <fiprintf>:
 8016d94:	b40e      	push	{r1, r2, r3}
 8016d96:	b503      	push	{r0, r1, lr}
 8016d98:	0001      	movs	r1, r0
 8016d9a:	ab03      	add	r3, sp, #12
 8016d9c:	4804      	ldr	r0, [pc, #16]	; (8016db0 <fiprintf+0x1c>)
 8016d9e:	cb04      	ldmia	r3!, {r2}
 8016da0:	6800      	ldr	r0, [r0, #0]
 8016da2:	9301      	str	r3, [sp, #4]
 8016da4:	f000 f884 	bl	8016eb0 <_vfiprintf_r>
 8016da8:	b002      	add	sp, #8
 8016daa:	bc08      	pop	{r3}
 8016dac:	b003      	add	sp, #12
 8016dae:	4718      	bx	r3
 8016db0:	200030d8 	.word	0x200030d8

08016db4 <__retarget_lock_init_recursive>:
 8016db4:	4770      	bx	lr

08016db6 <__retarget_lock_acquire_recursive>:
 8016db6:	4770      	bx	lr

08016db8 <__retarget_lock_release_recursive>:
 8016db8:	4770      	bx	lr

08016dba <__ascii_mbtowc>:
 8016dba:	b082      	sub	sp, #8
 8016dbc:	2900      	cmp	r1, #0
 8016dbe:	d100      	bne.n	8016dc2 <__ascii_mbtowc+0x8>
 8016dc0:	a901      	add	r1, sp, #4
 8016dc2:	1e10      	subs	r0, r2, #0
 8016dc4:	d006      	beq.n	8016dd4 <__ascii_mbtowc+0x1a>
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d006      	beq.n	8016dd8 <__ascii_mbtowc+0x1e>
 8016dca:	7813      	ldrb	r3, [r2, #0]
 8016dcc:	600b      	str	r3, [r1, #0]
 8016dce:	7810      	ldrb	r0, [r2, #0]
 8016dd0:	1e43      	subs	r3, r0, #1
 8016dd2:	4198      	sbcs	r0, r3
 8016dd4:	b002      	add	sp, #8
 8016dd6:	4770      	bx	lr
 8016dd8:	2002      	movs	r0, #2
 8016dda:	4240      	negs	r0, r0
 8016ddc:	e7fa      	b.n	8016dd4 <__ascii_mbtowc+0x1a>

08016dde <memmove>:
 8016dde:	b510      	push	{r4, lr}
 8016de0:	4288      	cmp	r0, r1
 8016de2:	d902      	bls.n	8016dea <memmove+0xc>
 8016de4:	188b      	adds	r3, r1, r2
 8016de6:	4298      	cmp	r0, r3
 8016de8:	d303      	bcc.n	8016df2 <memmove+0x14>
 8016dea:	2300      	movs	r3, #0
 8016dec:	e007      	b.n	8016dfe <memmove+0x20>
 8016dee:	5c8b      	ldrb	r3, [r1, r2]
 8016df0:	5483      	strb	r3, [r0, r2]
 8016df2:	3a01      	subs	r2, #1
 8016df4:	d2fb      	bcs.n	8016dee <memmove+0x10>
 8016df6:	bd10      	pop	{r4, pc}
 8016df8:	5ccc      	ldrb	r4, [r1, r3]
 8016dfa:	54c4      	strb	r4, [r0, r3]
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	429a      	cmp	r2, r3
 8016e00:	d1fa      	bne.n	8016df8 <memmove+0x1a>
 8016e02:	e7f8      	b.n	8016df6 <memmove+0x18>

08016e04 <_realloc_r>:
 8016e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e06:	0007      	movs	r7, r0
 8016e08:	000e      	movs	r6, r1
 8016e0a:	0014      	movs	r4, r2
 8016e0c:	2900      	cmp	r1, #0
 8016e0e:	d105      	bne.n	8016e1c <_realloc_r+0x18>
 8016e10:	0011      	movs	r1, r2
 8016e12:	f7fd fe9b 	bl	8014b4c <_malloc_r>
 8016e16:	0005      	movs	r5, r0
 8016e18:	0028      	movs	r0, r5
 8016e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016e1c:	2a00      	cmp	r2, #0
 8016e1e:	d103      	bne.n	8016e28 <_realloc_r+0x24>
 8016e20:	f7fd fe28 	bl	8014a74 <_free_r>
 8016e24:	0025      	movs	r5, r4
 8016e26:	e7f7      	b.n	8016e18 <_realloc_r+0x14>
 8016e28:	f000 fc9a 	bl	8017760 <_malloc_usable_size_r>
 8016e2c:	9001      	str	r0, [sp, #4]
 8016e2e:	4284      	cmp	r4, r0
 8016e30:	d803      	bhi.n	8016e3a <_realloc_r+0x36>
 8016e32:	0035      	movs	r5, r6
 8016e34:	0843      	lsrs	r3, r0, #1
 8016e36:	42a3      	cmp	r3, r4
 8016e38:	d3ee      	bcc.n	8016e18 <_realloc_r+0x14>
 8016e3a:	0021      	movs	r1, r4
 8016e3c:	0038      	movs	r0, r7
 8016e3e:	f7fd fe85 	bl	8014b4c <_malloc_r>
 8016e42:	1e05      	subs	r5, r0, #0
 8016e44:	d0e8      	beq.n	8016e18 <_realloc_r+0x14>
 8016e46:	9b01      	ldr	r3, [sp, #4]
 8016e48:	0022      	movs	r2, r4
 8016e4a:	429c      	cmp	r4, r3
 8016e4c:	d900      	bls.n	8016e50 <_realloc_r+0x4c>
 8016e4e:	001a      	movs	r2, r3
 8016e50:	0031      	movs	r1, r6
 8016e52:	0028      	movs	r0, r5
 8016e54:	f7fd fdfc 	bl	8014a50 <memcpy>
 8016e58:	0031      	movs	r1, r6
 8016e5a:	0038      	movs	r0, r7
 8016e5c:	f7fd fe0a 	bl	8014a74 <_free_r>
 8016e60:	e7da      	b.n	8016e18 <_realloc_r+0x14>

08016e62 <__sfputc_r>:
 8016e62:	6893      	ldr	r3, [r2, #8]
 8016e64:	b510      	push	{r4, lr}
 8016e66:	3b01      	subs	r3, #1
 8016e68:	6093      	str	r3, [r2, #8]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	da04      	bge.n	8016e78 <__sfputc_r+0x16>
 8016e6e:	6994      	ldr	r4, [r2, #24]
 8016e70:	42a3      	cmp	r3, r4
 8016e72:	db07      	blt.n	8016e84 <__sfputc_r+0x22>
 8016e74:	290a      	cmp	r1, #10
 8016e76:	d005      	beq.n	8016e84 <__sfputc_r+0x22>
 8016e78:	6813      	ldr	r3, [r2, #0]
 8016e7a:	1c58      	adds	r0, r3, #1
 8016e7c:	6010      	str	r0, [r2, #0]
 8016e7e:	7019      	strb	r1, [r3, #0]
 8016e80:	0008      	movs	r0, r1
 8016e82:	bd10      	pop	{r4, pc}
 8016e84:	f000 f94e 	bl	8017124 <__swbuf_r>
 8016e88:	0001      	movs	r1, r0
 8016e8a:	e7f9      	b.n	8016e80 <__sfputc_r+0x1e>

08016e8c <__sfputs_r>:
 8016e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e8e:	0006      	movs	r6, r0
 8016e90:	000f      	movs	r7, r1
 8016e92:	0014      	movs	r4, r2
 8016e94:	18d5      	adds	r5, r2, r3
 8016e96:	42ac      	cmp	r4, r5
 8016e98:	d101      	bne.n	8016e9e <__sfputs_r+0x12>
 8016e9a:	2000      	movs	r0, #0
 8016e9c:	e007      	b.n	8016eae <__sfputs_r+0x22>
 8016e9e:	7821      	ldrb	r1, [r4, #0]
 8016ea0:	003a      	movs	r2, r7
 8016ea2:	0030      	movs	r0, r6
 8016ea4:	f7ff ffdd 	bl	8016e62 <__sfputc_r>
 8016ea8:	3401      	adds	r4, #1
 8016eaa:	1c43      	adds	r3, r0, #1
 8016eac:	d1f3      	bne.n	8016e96 <__sfputs_r+0xa>
 8016eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016eb0 <_vfiprintf_r>:
 8016eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eb2:	b0a1      	sub	sp, #132	; 0x84
 8016eb4:	0006      	movs	r6, r0
 8016eb6:	000c      	movs	r4, r1
 8016eb8:	001f      	movs	r7, r3
 8016eba:	9203      	str	r2, [sp, #12]
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d004      	beq.n	8016eca <_vfiprintf_r+0x1a>
 8016ec0:	6983      	ldr	r3, [r0, #24]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d101      	bne.n	8016eca <_vfiprintf_r+0x1a>
 8016ec6:	f000 fb3f 	bl	8017548 <__sinit>
 8016eca:	4b8e      	ldr	r3, [pc, #568]	; (8017104 <_vfiprintf_r+0x254>)
 8016ecc:	429c      	cmp	r4, r3
 8016ece:	d11c      	bne.n	8016f0a <_vfiprintf_r+0x5a>
 8016ed0:	6874      	ldr	r4, [r6, #4]
 8016ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ed4:	07db      	lsls	r3, r3, #31
 8016ed6:	d405      	bmi.n	8016ee4 <_vfiprintf_r+0x34>
 8016ed8:	89a3      	ldrh	r3, [r4, #12]
 8016eda:	059b      	lsls	r3, r3, #22
 8016edc:	d402      	bmi.n	8016ee4 <_vfiprintf_r+0x34>
 8016ede:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ee0:	f7ff ff69 	bl	8016db6 <__retarget_lock_acquire_recursive>
 8016ee4:	89a3      	ldrh	r3, [r4, #12]
 8016ee6:	071b      	lsls	r3, r3, #28
 8016ee8:	d502      	bpl.n	8016ef0 <_vfiprintf_r+0x40>
 8016eea:	6923      	ldr	r3, [r4, #16]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d11d      	bne.n	8016f2c <_vfiprintf_r+0x7c>
 8016ef0:	0021      	movs	r1, r4
 8016ef2:	0030      	movs	r0, r6
 8016ef4:	f000 f97a 	bl	80171ec <__swsetup_r>
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	d017      	beq.n	8016f2c <_vfiprintf_r+0x7c>
 8016efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016efe:	07db      	lsls	r3, r3, #31
 8016f00:	d50d      	bpl.n	8016f1e <_vfiprintf_r+0x6e>
 8016f02:	2001      	movs	r0, #1
 8016f04:	4240      	negs	r0, r0
 8016f06:	b021      	add	sp, #132	; 0x84
 8016f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f0a:	4b7f      	ldr	r3, [pc, #508]	; (8017108 <_vfiprintf_r+0x258>)
 8016f0c:	429c      	cmp	r4, r3
 8016f0e:	d101      	bne.n	8016f14 <_vfiprintf_r+0x64>
 8016f10:	68b4      	ldr	r4, [r6, #8]
 8016f12:	e7de      	b.n	8016ed2 <_vfiprintf_r+0x22>
 8016f14:	4b7d      	ldr	r3, [pc, #500]	; (801710c <_vfiprintf_r+0x25c>)
 8016f16:	429c      	cmp	r4, r3
 8016f18:	d1db      	bne.n	8016ed2 <_vfiprintf_r+0x22>
 8016f1a:	68f4      	ldr	r4, [r6, #12]
 8016f1c:	e7d9      	b.n	8016ed2 <_vfiprintf_r+0x22>
 8016f1e:	89a3      	ldrh	r3, [r4, #12]
 8016f20:	059b      	lsls	r3, r3, #22
 8016f22:	d4ee      	bmi.n	8016f02 <_vfiprintf_r+0x52>
 8016f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f26:	f7ff ff47 	bl	8016db8 <__retarget_lock_release_recursive>
 8016f2a:	e7ea      	b.n	8016f02 <_vfiprintf_r+0x52>
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	ad08      	add	r5, sp, #32
 8016f30:	616b      	str	r3, [r5, #20]
 8016f32:	3320      	adds	r3, #32
 8016f34:	766b      	strb	r3, [r5, #25]
 8016f36:	3310      	adds	r3, #16
 8016f38:	76ab      	strb	r3, [r5, #26]
 8016f3a:	9707      	str	r7, [sp, #28]
 8016f3c:	9f03      	ldr	r7, [sp, #12]
 8016f3e:	783b      	ldrb	r3, [r7, #0]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d001      	beq.n	8016f48 <_vfiprintf_r+0x98>
 8016f44:	2b25      	cmp	r3, #37	; 0x25
 8016f46:	d14e      	bne.n	8016fe6 <_vfiprintf_r+0x136>
 8016f48:	9b03      	ldr	r3, [sp, #12]
 8016f4a:	1afb      	subs	r3, r7, r3
 8016f4c:	9305      	str	r3, [sp, #20]
 8016f4e:	9b03      	ldr	r3, [sp, #12]
 8016f50:	429f      	cmp	r7, r3
 8016f52:	d00d      	beq.n	8016f70 <_vfiprintf_r+0xc0>
 8016f54:	9b05      	ldr	r3, [sp, #20]
 8016f56:	0021      	movs	r1, r4
 8016f58:	0030      	movs	r0, r6
 8016f5a:	9a03      	ldr	r2, [sp, #12]
 8016f5c:	f7ff ff96 	bl	8016e8c <__sfputs_r>
 8016f60:	1c43      	adds	r3, r0, #1
 8016f62:	d100      	bne.n	8016f66 <_vfiprintf_r+0xb6>
 8016f64:	e0b5      	b.n	80170d2 <_vfiprintf_r+0x222>
 8016f66:	696a      	ldr	r2, [r5, #20]
 8016f68:	9b05      	ldr	r3, [sp, #20]
 8016f6a:	4694      	mov	ip, r2
 8016f6c:	4463      	add	r3, ip
 8016f6e:	616b      	str	r3, [r5, #20]
 8016f70:	783b      	ldrb	r3, [r7, #0]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d100      	bne.n	8016f78 <_vfiprintf_r+0xc8>
 8016f76:	e0ac      	b.n	80170d2 <_vfiprintf_r+0x222>
 8016f78:	2201      	movs	r2, #1
 8016f7a:	1c7b      	adds	r3, r7, #1
 8016f7c:	9303      	str	r3, [sp, #12]
 8016f7e:	2300      	movs	r3, #0
 8016f80:	4252      	negs	r2, r2
 8016f82:	606a      	str	r2, [r5, #4]
 8016f84:	a904      	add	r1, sp, #16
 8016f86:	3254      	adds	r2, #84	; 0x54
 8016f88:	1852      	adds	r2, r2, r1
 8016f8a:	602b      	str	r3, [r5, #0]
 8016f8c:	60eb      	str	r3, [r5, #12]
 8016f8e:	60ab      	str	r3, [r5, #8]
 8016f90:	7013      	strb	r3, [r2, #0]
 8016f92:	65ab      	str	r3, [r5, #88]	; 0x58
 8016f94:	9b03      	ldr	r3, [sp, #12]
 8016f96:	2205      	movs	r2, #5
 8016f98:	7819      	ldrb	r1, [r3, #0]
 8016f9a:	485d      	ldr	r0, [pc, #372]	; (8017110 <_vfiprintf_r+0x260>)
 8016f9c:	f7ff f996 	bl	80162cc <memchr>
 8016fa0:	9b03      	ldr	r3, [sp, #12]
 8016fa2:	1c5f      	adds	r7, r3, #1
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d120      	bne.n	8016fea <_vfiprintf_r+0x13a>
 8016fa8:	682a      	ldr	r2, [r5, #0]
 8016faa:	06d3      	lsls	r3, r2, #27
 8016fac:	d504      	bpl.n	8016fb8 <_vfiprintf_r+0x108>
 8016fae:	2353      	movs	r3, #83	; 0x53
 8016fb0:	a904      	add	r1, sp, #16
 8016fb2:	185b      	adds	r3, r3, r1
 8016fb4:	2120      	movs	r1, #32
 8016fb6:	7019      	strb	r1, [r3, #0]
 8016fb8:	0713      	lsls	r3, r2, #28
 8016fba:	d504      	bpl.n	8016fc6 <_vfiprintf_r+0x116>
 8016fbc:	2353      	movs	r3, #83	; 0x53
 8016fbe:	a904      	add	r1, sp, #16
 8016fc0:	185b      	adds	r3, r3, r1
 8016fc2:	212b      	movs	r1, #43	; 0x2b
 8016fc4:	7019      	strb	r1, [r3, #0]
 8016fc6:	9b03      	ldr	r3, [sp, #12]
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	2b2a      	cmp	r3, #42	; 0x2a
 8016fcc:	d016      	beq.n	8016ffc <_vfiprintf_r+0x14c>
 8016fce:	2100      	movs	r1, #0
 8016fd0:	68eb      	ldr	r3, [r5, #12]
 8016fd2:	9f03      	ldr	r7, [sp, #12]
 8016fd4:	783a      	ldrb	r2, [r7, #0]
 8016fd6:	1c78      	adds	r0, r7, #1
 8016fd8:	3a30      	subs	r2, #48	; 0x30
 8016fda:	4684      	mov	ip, r0
 8016fdc:	2a09      	cmp	r2, #9
 8016fde:	d94f      	bls.n	8017080 <_vfiprintf_r+0x1d0>
 8016fe0:	2900      	cmp	r1, #0
 8016fe2:	d111      	bne.n	8017008 <_vfiprintf_r+0x158>
 8016fe4:	e017      	b.n	8017016 <_vfiprintf_r+0x166>
 8016fe6:	3701      	adds	r7, #1
 8016fe8:	e7a9      	b.n	8016f3e <_vfiprintf_r+0x8e>
 8016fea:	4b49      	ldr	r3, [pc, #292]	; (8017110 <_vfiprintf_r+0x260>)
 8016fec:	682a      	ldr	r2, [r5, #0]
 8016fee:	1ac0      	subs	r0, r0, r3
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	4083      	lsls	r3, r0
 8016ff4:	4313      	orrs	r3, r2
 8016ff6:	602b      	str	r3, [r5, #0]
 8016ff8:	9703      	str	r7, [sp, #12]
 8016ffa:	e7cb      	b.n	8016f94 <_vfiprintf_r+0xe4>
 8016ffc:	9b07      	ldr	r3, [sp, #28]
 8016ffe:	1d19      	adds	r1, r3, #4
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	9107      	str	r1, [sp, #28]
 8017004:	2b00      	cmp	r3, #0
 8017006:	db01      	blt.n	801700c <_vfiprintf_r+0x15c>
 8017008:	930b      	str	r3, [sp, #44]	; 0x2c
 801700a:	e004      	b.n	8017016 <_vfiprintf_r+0x166>
 801700c:	425b      	negs	r3, r3
 801700e:	60eb      	str	r3, [r5, #12]
 8017010:	2302      	movs	r3, #2
 8017012:	4313      	orrs	r3, r2
 8017014:	602b      	str	r3, [r5, #0]
 8017016:	783b      	ldrb	r3, [r7, #0]
 8017018:	2b2e      	cmp	r3, #46	; 0x2e
 801701a:	d10a      	bne.n	8017032 <_vfiprintf_r+0x182>
 801701c:	787b      	ldrb	r3, [r7, #1]
 801701e:	2b2a      	cmp	r3, #42	; 0x2a
 8017020:	d137      	bne.n	8017092 <_vfiprintf_r+0x1e2>
 8017022:	9b07      	ldr	r3, [sp, #28]
 8017024:	3702      	adds	r7, #2
 8017026:	1d1a      	adds	r2, r3, #4
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	9207      	str	r2, [sp, #28]
 801702c:	2b00      	cmp	r3, #0
 801702e:	db2d      	blt.n	801708c <_vfiprintf_r+0x1dc>
 8017030:	9309      	str	r3, [sp, #36]	; 0x24
 8017032:	2203      	movs	r2, #3
 8017034:	7839      	ldrb	r1, [r7, #0]
 8017036:	4837      	ldr	r0, [pc, #220]	; (8017114 <_vfiprintf_r+0x264>)
 8017038:	f7ff f948 	bl	80162cc <memchr>
 801703c:	2800      	cmp	r0, #0
 801703e:	d007      	beq.n	8017050 <_vfiprintf_r+0x1a0>
 8017040:	4b34      	ldr	r3, [pc, #208]	; (8017114 <_vfiprintf_r+0x264>)
 8017042:	682a      	ldr	r2, [r5, #0]
 8017044:	1ac0      	subs	r0, r0, r3
 8017046:	2340      	movs	r3, #64	; 0x40
 8017048:	4083      	lsls	r3, r0
 801704a:	4313      	orrs	r3, r2
 801704c:	3701      	adds	r7, #1
 801704e:	602b      	str	r3, [r5, #0]
 8017050:	7839      	ldrb	r1, [r7, #0]
 8017052:	1c7b      	adds	r3, r7, #1
 8017054:	2206      	movs	r2, #6
 8017056:	4830      	ldr	r0, [pc, #192]	; (8017118 <_vfiprintf_r+0x268>)
 8017058:	9303      	str	r3, [sp, #12]
 801705a:	7629      	strb	r1, [r5, #24]
 801705c:	f7ff f936 	bl	80162cc <memchr>
 8017060:	2800      	cmp	r0, #0
 8017062:	d045      	beq.n	80170f0 <_vfiprintf_r+0x240>
 8017064:	4b2d      	ldr	r3, [pc, #180]	; (801711c <_vfiprintf_r+0x26c>)
 8017066:	2b00      	cmp	r3, #0
 8017068:	d127      	bne.n	80170ba <_vfiprintf_r+0x20a>
 801706a:	2207      	movs	r2, #7
 801706c:	9b07      	ldr	r3, [sp, #28]
 801706e:	3307      	adds	r3, #7
 8017070:	4393      	bics	r3, r2
 8017072:	3308      	adds	r3, #8
 8017074:	9307      	str	r3, [sp, #28]
 8017076:	696b      	ldr	r3, [r5, #20]
 8017078:	9a04      	ldr	r2, [sp, #16]
 801707a:	189b      	adds	r3, r3, r2
 801707c:	616b      	str	r3, [r5, #20]
 801707e:	e75d      	b.n	8016f3c <_vfiprintf_r+0x8c>
 8017080:	210a      	movs	r1, #10
 8017082:	434b      	muls	r3, r1
 8017084:	4667      	mov	r7, ip
 8017086:	189b      	adds	r3, r3, r2
 8017088:	3909      	subs	r1, #9
 801708a:	e7a3      	b.n	8016fd4 <_vfiprintf_r+0x124>
 801708c:	2301      	movs	r3, #1
 801708e:	425b      	negs	r3, r3
 8017090:	e7ce      	b.n	8017030 <_vfiprintf_r+0x180>
 8017092:	2300      	movs	r3, #0
 8017094:	001a      	movs	r2, r3
 8017096:	3701      	adds	r7, #1
 8017098:	606b      	str	r3, [r5, #4]
 801709a:	7839      	ldrb	r1, [r7, #0]
 801709c:	1c78      	adds	r0, r7, #1
 801709e:	3930      	subs	r1, #48	; 0x30
 80170a0:	4684      	mov	ip, r0
 80170a2:	2909      	cmp	r1, #9
 80170a4:	d903      	bls.n	80170ae <_vfiprintf_r+0x1fe>
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d0c3      	beq.n	8017032 <_vfiprintf_r+0x182>
 80170aa:	9209      	str	r2, [sp, #36]	; 0x24
 80170ac:	e7c1      	b.n	8017032 <_vfiprintf_r+0x182>
 80170ae:	230a      	movs	r3, #10
 80170b0:	435a      	muls	r2, r3
 80170b2:	4667      	mov	r7, ip
 80170b4:	1852      	adds	r2, r2, r1
 80170b6:	3b09      	subs	r3, #9
 80170b8:	e7ef      	b.n	801709a <_vfiprintf_r+0x1ea>
 80170ba:	ab07      	add	r3, sp, #28
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	0022      	movs	r2, r4
 80170c0:	0029      	movs	r1, r5
 80170c2:	0030      	movs	r0, r6
 80170c4:	4b16      	ldr	r3, [pc, #88]	; (8017120 <_vfiprintf_r+0x270>)
 80170c6:	f7fd fe61 	bl	8014d8c <_printf_float>
 80170ca:	9004      	str	r0, [sp, #16]
 80170cc:	9b04      	ldr	r3, [sp, #16]
 80170ce:	3301      	adds	r3, #1
 80170d0:	d1d1      	bne.n	8017076 <_vfiprintf_r+0x1c6>
 80170d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80170d4:	07db      	lsls	r3, r3, #31
 80170d6:	d405      	bmi.n	80170e4 <_vfiprintf_r+0x234>
 80170d8:	89a3      	ldrh	r3, [r4, #12]
 80170da:	059b      	lsls	r3, r3, #22
 80170dc:	d402      	bmi.n	80170e4 <_vfiprintf_r+0x234>
 80170de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170e0:	f7ff fe6a 	bl	8016db8 <__retarget_lock_release_recursive>
 80170e4:	89a3      	ldrh	r3, [r4, #12]
 80170e6:	065b      	lsls	r3, r3, #25
 80170e8:	d500      	bpl.n	80170ec <_vfiprintf_r+0x23c>
 80170ea:	e70a      	b.n	8016f02 <_vfiprintf_r+0x52>
 80170ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80170ee:	e70a      	b.n	8016f06 <_vfiprintf_r+0x56>
 80170f0:	ab07      	add	r3, sp, #28
 80170f2:	9300      	str	r3, [sp, #0]
 80170f4:	0022      	movs	r2, r4
 80170f6:	0029      	movs	r1, r5
 80170f8:	0030      	movs	r0, r6
 80170fa:	4b09      	ldr	r3, [pc, #36]	; (8017120 <_vfiprintf_r+0x270>)
 80170fc:	f7fe f8f8 	bl	80152f0 <_printf_i>
 8017100:	e7e3      	b.n	80170ca <_vfiprintf_r+0x21a>
 8017102:	46c0      	nop			; (mov r8, r8)
 8017104:	080191dc 	.word	0x080191dc
 8017108:	080191fc 	.word	0x080191fc
 801710c:	080191bc 	.word	0x080191bc
 8017110:	08019064 	.word	0x08019064
 8017114:	0801906a 	.word	0x0801906a
 8017118:	0801906e 	.word	0x0801906e
 801711c:	08014d8d 	.word	0x08014d8d
 8017120:	08016e8d 	.word	0x08016e8d

08017124 <__swbuf_r>:
 8017124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017126:	0005      	movs	r5, r0
 8017128:	000e      	movs	r6, r1
 801712a:	0014      	movs	r4, r2
 801712c:	2800      	cmp	r0, #0
 801712e:	d004      	beq.n	801713a <__swbuf_r+0x16>
 8017130:	6983      	ldr	r3, [r0, #24]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d101      	bne.n	801713a <__swbuf_r+0x16>
 8017136:	f000 fa07 	bl	8017548 <__sinit>
 801713a:	4b22      	ldr	r3, [pc, #136]	; (80171c4 <__swbuf_r+0xa0>)
 801713c:	429c      	cmp	r4, r3
 801713e:	d12e      	bne.n	801719e <__swbuf_r+0x7a>
 8017140:	686c      	ldr	r4, [r5, #4]
 8017142:	69a3      	ldr	r3, [r4, #24]
 8017144:	60a3      	str	r3, [r4, #8]
 8017146:	89a3      	ldrh	r3, [r4, #12]
 8017148:	071b      	lsls	r3, r3, #28
 801714a:	d532      	bpl.n	80171b2 <__swbuf_r+0x8e>
 801714c:	6923      	ldr	r3, [r4, #16]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d02f      	beq.n	80171b2 <__swbuf_r+0x8e>
 8017152:	6823      	ldr	r3, [r4, #0]
 8017154:	6922      	ldr	r2, [r4, #16]
 8017156:	b2f7      	uxtb	r7, r6
 8017158:	1a98      	subs	r0, r3, r2
 801715a:	6963      	ldr	r3, [r4, #20]
 801715c:	b2f6      	uxtb	r6, r6
 801715e:	4283      	cmp	r3, r0
 8017160:	dc05      	bgt.n	801716e <__swbuf_r+0x4a>
 8017162:	0021      	movs	r1, r4
 8017164:	0028      	movs	r0, r5
 8017166:	f000 f94d 	bl	8017404 <_fflush_r>
 801716a:	2800      	cmp	r0, #0
 801716c:	d127      	bne.n	80171be <__swbuf_r+0x9a>
 801716e:	68a3      	ldr	r3, [r4, #8]
 8017170:	3001      	adds	r0, #1
 8017172:	3b01      	subs	r3, #1
 8017174:	60a3      	str	r3, [r4, #8]
 8017176:	6823      	ldr	r3, [r4, #0]
 8017178:	1c5a      	adds	r2, r3, #1
 801717a:	6022      	str	r2, [r4, #0]
 801717c:	701f      	strb	r7, [r3, #0]
 801717e:	6963      	ldr	r3, [r4, #20]
 8017180:	4283      	cmp	r3, r0
 8017182:	d004      	beq.n	801718e <__swbuf_r+0x6a>
 8017184:	89a3      	ldrh	r3, [r4, #12]
 8017186:	07db      	lsls	r3, r3, #31
 8017188:	d507      	bpl.n	801719a <__swbuf_r+0x76>
 801718a:	2e0a      	cmp	r6, #10
 801718c:	d105      	bne.n	801719a <__swbuf_r+0x76>
 801718e:	0021      	movs	r1, r4
 8017190:	0028      	movs	r0, r5
 8017192:	f000 f937 	bl	8017404 <_fflush_r>
 8017196:	2800      	cmp	r0, #0
 8017198:	d111      	bne.n	80171be <__swbuf_r+0x9a>
 801719a:	0030      	movs	r0, r6
 801719c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801719e:	4b0a      	ldr	r3, [pc, #40]	; (80171c8 <__swbuf_r+0xa4>)
 80171a0:	429c      	cmp	r4, r3
 80171a2:	d101      	bne.n	80171a8 <__swbuf_r+0x84>
 80171a4:	68ac      	ldr	r4, [r5, #8]
 80171a6:	e7cc      	b.n	8017142 <__swbuf_r+0x1e>
 80171a8:	4b08      	ldr	r3, [pc, #32]	; (80171cc <__swbuf_r+0xa8>)
 80171aa:	429c      	cmp	r4, r3
 80171ac:	d1c9      	bne.n	8017142 <__swbuf_r+0x1e>
 80171ae:	68ec      	ldr	r4, [r5, #12]
 80171b0:	e7c7      	b.n	8017142 <__swbuf_r+0x1e>
 80171b2:	0021      	movs	r1, r4
 80171b4:	0028      	movs	r0, r5
 80171b6:	f000 f819 	bl	80171ec <__swsetup_r>
 80171ba:	2800      	cmp	r0, #0
 80171bc:	d0c9      	beq.n	8017152 <__swbuf_r+0x2e>
 80171be:	2601      	movs	r6, #1
 80171c0:	4276      	negs	r6, r6
 80171c2:	e7ea      	b.n	801719a <__swbuf_r+0x76>
 80171c4:	080191dc 	.word	0x080191dc
 80171c8:	080191fc 	.word	0x080191fc
 80171cc:	080191bc 	.word	0x080191bc

080171d0 <__ascii_wctomb>:
 80171d0:	0003      	movs	r3, r0
 80171d2:	1e08      	subs	r0, r1, #0
 80171d4:	d005      	beq.n	80171e2 <__ascii_wctomb+0x12>
 80171d6:	2aff      	cmp	r2, #255	; 0xff
 80171d8:	d904      	bls.n	80171e4 <__ascii_wctomb+0x14>
 80171da:	228a      	movs	r2, #138	; 0x8a
 80171dc:	2001      	movs	r0, #1
 80171de:	601a      	str	r2, [r3, #0]
 80171e0:	4240      	negs	r0, r0
 80171e2:	4770      	bx	lr
 80171e4:	2001      	movs	r0, #1
 80171e6:	700a      	strb	r2, [r1, #0]
 80171e8:	e7fb      	b.n	80171e2 <__ascii_wctomb+0x12>
	...

080171ec <__swsetup_r>:
 80171ec:	4b37      	ldr	r3, [pc, #220]	; (80172cc <__swsetup_r+0xe0>)
 80171ee:	b570      	push	{r4, r5, r6, lr}
 80171f0:	681d      	ldr	r5, [r3, #0]
 80171f2:	0006      	movs	r6, r0
 80171f4:	000c      	movs	r4, r1
 80171f6:	2d00      	cmp	r5, #0
 80171f8:	d005      	beq.n	8017206 <__swsetup_r+0x1a>
 80171fa:	69ab      	ldr	r3, [r5, #24]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d102      	bne.n	8017206 <__swsetup_r+0x1a>
 8017200:	0028      	movs	r0, r5
 8017202:	f000 f9a1 	bl	8017548 <__sinit>
 8017206:	4b32      	ldr	r3, [pc, #200]	; (80172d0 <__swsetup_r+0xe4>)
 8017208:	429c      	cmp	r4, r3
 801720a:	d10f      	bne.n	801722c <__swsetup_r+0x40>
 801720c:	686c      	ldr	r4, [r5, #4]
 801720e:	230c      	movs	r3, #12
 8017210:	5ee2      	ldrsh	r2, [r4, r3]
 8017212:	b293      	uxth	r3, r2
 8017214:	0711      	lsls	r1, r2, #28
 8017216:	d42d      	bmi.n	8017274 <__swsetup_r+0x88>
 8017218:	06d9      	lsls	r1, r3, #27
 801721a:	d411      	bmi.n	8017240 <__swsetup_r+0x54>
 801721c:	2309      	movs	r3, #9
 801721e:	2001      	movs	r0, #1
 8017220:	6033      	str	r3, [r6, #0]
 8017222:	3337      	adds	r3, #55	; 0x37
 8017224:	4313      	orrs	r3, r2
 8017226:	81a3      	strh	r3, [r4, #12]
 8017228:	4240      	negs	r0, r0
 801722a:	bd70      	pop	{r4, r5, r6, pc}
 801722c:	4b29      	ldr	r3, [pc, #164]	; (80172d4 <__swsetup_r+0xe8>)
 801722e:	429c      	cmp	r4, r3
 8017230:	d101      	bne.n	8017236 <__swsetup_r+0x4a>
 8017232:	68ac      	ldr	r4, [r5, #8]
 8017234:	e7eb      	b.n	801720e <__swsetup_r+0x22>
 8017236:	4b28      	ldr	r3, [pc, #160]	; (80172d8 <__swsetup_r+0xec>)
 8017238:	429c      	cmp	r4, r3
 801723a:	d1e8      	bne.n	801720e <__swsetup_r+0x22>
 801723c:	68ec      	ldr	r4, [r5, #12]
 801723e:	e7e6      	b.n	801720e <__swsetup_r+0x22>
 8017240:	075b      	lsls	r3, r3, #29
 8017242:	d513      	bpl.n	801726c <__swsetup_r+0x80>
 8017244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017246:	2900      	cmp	r1, #0
 8017248:	d008      	beq.n	801725c <__swsetup_r+0x70>
 801724a:	0023      	movs	r3, r4
 801724c:	3344      	adds	r3, #68	; 0x44
 801724e:	4299      	cmp	r1, r3
 8017250:	d002      	beq.n	8017258 <__swsetup_r+0x6c>
 8017252:	0030      	movs	r0, r6
 8017254:	f7fd fc0e 	bl	8014a74 <_free_r>
 8017258:	2300      	movs	r3, #0
 801725a:	6363      	str	r3, [r4, #52]	; 0x34
 801725c:	2224      	movs	r2, #36	; 0x24
 801725e:	89a3      	ldrh	r3, [r4, #12]
 8017260:	4393      	bics	r3, r2
 8017262:	81a3      	strh	r3, [r4, #12]
 8017264:	2300      	movs	r3, #0
 8017266:	6063      	str	r3, [r4, #4]
 8017268:	6923      	ldr	r3, [r4, #16]
 801726a:	6023      	str	r3, [r4, #0]
 801726c:	2308      	movs	r3, #8
 801726e:	89a2      	ldrh	r2, [r4, #12]
 8017270:	4313      	orrs	r3, r2
 8017272:	81a3      	strh	r3, [r4, #12]
 8017274:	6923      	ldr	r3, [r4, #16]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d10b      	bne.n	8017292 <__swsetup_r+0xa6>
 801727a:	21a0      	movs	r1, #160	; 0xa0
 801727c:	2280      	movs	r2, #128	; 0x80
 801727e:	89a3      	ldrh	r3, [r4, #12]
 8017280:	0089      	lsls	r1, r1, #2
 8017282:	0092      	lsls	r2, r2, #2
 8017284:	400b      	ands	r3, r1
 8017286:	4293      	cmp	r3, r2
 8017288:	d003      	beq.n	8017292 <__swsetup_r+0xa6>
 801728a:	0021      	movs	r1, r4
 801728c:	0030      	movs	r0, r6
 801728e:	f000 fa23 	bl	80176d8 <__smakebuf_r>
 8017292:	220c      	movs	r2, #12
 8017294:	5ea3      	ldrsh	r3, [r4, r2]
 8017296:	2001      	movs	r0, #1
 8017298:	001a      	movs	r2, r3
 801729a:	b299      	uxth	r1, r3
 801729c:	4002      	ands	r2, r0
 801729e:	4203      	tst	r3, r0
 80172a0:	d00f      	beq.n	80172c2 <__swsetup_r+0xd6>
 80172a2:	2200      	movs	r2, #0
 80172a4:	60a2      	str	r2, [r4, #8]
 80172a6:	6962      	ldr	r2, [r4, #20]
 80172a8:	4252      	negs	r2, r2
 80172aa:	61a2      	str	r2, [r4, #24]
 80172ac:	2000      	movs	r0, #0
 80172ae:	6922      	ldr	r2, [r4, #16]
 80172b0:	4282      	cmp	r2, r0
 80172b2:	d1ba      	bne.n	801722a <__swsetup_r+0x3e>
 80172b4:	060a      	lsls	r2, r1, #24
 80172b6:	d5b8      	bpl.n	801722a <__swsetup_r+0x3e>
 80172b8:	2240      	movs	r2, #64	; 0x40
 80172ba:	4313      	orrs	r3, r2
 80172bc:	81a3      	strh	r3, [r4, #12]
 80172be:	3801      	subs	r0, #1
 80172c0:	e7b3      	b.n	801722a <__swsetup_r+0x3e>
 80172c2:	0788      	lsls	r0, r1, #30
 80172c4:	d400      	bmi.n	80172c8 <__swsetup_r+0xdc>
 80172c6:	6962      	ldr	r2, [r4, #20]
 80172c8:	60a2      	str	r2, [r4, #8]
 80172ca:	e7ef      	b.n	80172ac <__swsetup_r+0xc0>
 80172cc:	200030d8 	.word	0x200030d8
 80172d0:	080191dc 	.word	0x080191dc
 80172d4:	080191fc 	.word	0x080191fc
 80172d8:	080191bc 	.word	0x080191bc

080172dc <abort>:
 80172dc:	2006      	movs	r0, #6
 80172de:	b510      	push	{r4, lr}
 80172e0:	f000 fa70 	bl	80177c4 <raise>
 80172e4:	2001      	movs	r0, #1
 80172e6:	f7ec fcf5 	bl	8003cd4 <_exit>
	...

080172ec <__sflush_r>:
 80172ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172ee:	898b      	ldrh	r3, [r1, #12]
 80172f0:	0005      	movs	r5, r0
 80172f2:	000c      	movs	r4, r1
 80172f4:	071a      	lsls	r2, r3, #28
 80172f6:	d45f      	bmi.n	80173b8 <__sflush_r+0xcc>
 80172f8:	684a      	ldr	r2, [r1, #4]
 80172fa:	2a00      	cmp	r2, #0
 80172fc:	dc04      	bgt.n	8017308 <__sflush_r+0x1c>
 80172fe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8017300:	2a00      	cmp	r2, #0
 8017302:	dc01      	bgt.n	8017308 <__sflush_r+0x1c>
 8017304:	2000      	movs	r0, #0
 8017306:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017308:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801730a:	2f00      	cmp	r7, #0
 801730c:	d0fa      	beq.n	8017304 <__sflush_r+0x18>
 801730e:	2200      	movs	r2, #0
 8017310:	2180      	movs	r1, #128	; 0x80
 8017312:	682e      	ldr	r6, [r5, #0]
 8017314:	602a      	str	r2, [r5, #0]
 8017316:	001a      	movs	r2, r3
 8017318:	0149      	lsls	r1, r1, #5
 801731a:	400a      	ands	r2, r1
 801731c:	420b      	tst	r3, r1
 801731e:	d034      	beq.n	801738a <__sflush_r+0x9e>
 8017320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017322:	89a3      	ldrh	r3, [r4, #12]
 8017324:	075b      	lsls	r3, r3, #29
 8017326:	d506      	bpl.n	8017336 <__sflush_r+0x4a>
 8017328:	6863      	ldr	r3, [r4, #4]
 801732a:	1ac0      	subs	r0, r0, r3
 801732c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801732e:	2b00      	cmp	r3, #0
 8017330:	d001      	beq.n	8017336 <__sflush_r+0x4a>
 8017332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017334:	1ac0      	subs	r0, r0, r3
 8017336:	0002      	movs	r2, r0
 8017338:	6a21      	ldr	r1, [r4, #32]
 801733a:	2300      	movs	r3, #0
 801733c:	0028      	movs	r0, r5
 801733e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017340:	47b8      	blx	r7
 8017342:	89a1      	ldrh	r1, [r4, #12]
 8017344:	1c43      	adds	r3, r0, #1
 8017346:	d106      	bne.n	8017356 <__sflush_r+0x6a>
 8017348:	682b      	ldr	r3, [r5, #0]
 801734a:	2b1d      	cmp	r3, #29
 801734c:	d831      	bhi.n	80173b2 <__sflush_r+0xc6>
 801734e:	4a2c      	ldr	r2, [pc, #176]	; (8017400 <__sflush_r+0x114>)
 8017350:	40da      	lsrs	r2, r3
 8017352:	07d3      	lsls	r3, r2, #31
 8017354:	d52d      	bpl.n	80173b2 <__sflush_r+0xc6>
 8017356:	2300      	movs	r3, #0
 8017358:	6063      	str	r3, [r4, #4]
 801735a:	6923      	ldr	r3, [r4, #16]
 801735c:	6023      	str	r3, [r4, #0]
 801735e:	04cb      	lsls	r3, r1, #19
 8017360:	d505      	bpl.n	801736e <__sflush_r+0x82>
 8017362:	1c43      	adds	r3, r0, #1
 8017364:	d102      	bne.n	801736c <__sflush_r+0x80>
 8017366:	682b      	ldr	r3, [r5, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d100      	bne.n	801736e <__sflush_r+0x82>
 801736c:	6560      	str	r0, [r4, #84]	; 0x54
 801736e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017370:	602e      	str	r6, [r5, #0]
 8017372:	2900      	cmp	r1, #0
 8017374:	d0c6      	beq.n	8017304 <__sflush_r+0x18>
 8017376:	0023      	movs	r3, r4
 8017378:	3344      	adds	r3, #68	; 0x44
 801737a:	4299      	cmp	r1, r3
 801737c:	d002      	beq.n	8017384 <__sflush_r+0x98>
 801737e:	0028      	movs	r0, r5
 8017380:	f7fd fb78 	bl	8014a74 <_free_r>
 8017384:	2000      	movs	r0, #0
 8017386:	6360      	str	r0, [r4, #52]	; 0x34
 8017388:	e7bd      	b.n	8017306 <__sflush_r+0x1a>
 801738a:	2301      	movs	r3, #1
 801738c:	0028      	movs	r0, r5
 801738e:	6a21      	ldr	r1, [r4, #32]
 8017390:	47b8      	blx	r7
 8017392:	1c43      	adds	r3, r0, #1
 8017394:	d1c5      	bne.n	8017322 <__sflush_r+0x36>
 8017396:	682b      	ldr	r3, [r5, #0]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d0c2      	beq.n	8017322 <__sflush_r+0x36>
 801739c:	2b1d      	cmp	r3, #29
 801739e:	d001      	beq.n	80173a4 <__sflush_r+0xb8>
 80173a0:	2b16      	cmp	r3, #22
 80173a2:	d101      	bne.n	80173a8 <__sflush_r+0xbc>
 80173a4:	602e      	str	r6, [r5, #0]
 80173a6:	e7ad      	b.n	8017304 <__sflush_r+0x18>
 80173a8:	2340      	movs	r3, #64	; 0x40
 80173aa:	89a2      	ldrh	r2, [r4, #12]
 80173ac:	4313      	orrs	r3, r2
 80173ae:	81a3      	strh	r3, [r4, #12]
 80173b0:	e7a9      	b.n	8017306 <__sflush_r+0x1a>
 80173b2:	2340      	movs	r3, #64	; 0x40
 80173b4:	430b      	orrs	r3, r1
 80173b6:	e7fa      	b.n	80173ae <__sflush_r+0xc2>
 80173b8:	690f      	ldr	r7, [r1, #16]
 80173ba:	2f00      	cmp	r7, #0
 80173bc:	d0a2      	beq.n	8017304 <__sflush_r+0x18>
 80173be:	680a      	ldr	r2, [r1, #0]
 80173c0:	600f      	str	r7, [r1, #0]
 80173c2:	1bd2      	subs	r2, r2, r7
 80173c4:	9201      	str	r2, [sp, #4]
 80173c6:	2200      	movs	r2, #0
 80173c8:	079b      	lsls	r3, r3, #30
 80173ca:	d100      	bne.n	80173ce <__sflush_r+0xe2>
 80173cc:	694a      	ldr	r2, [r1, #20]
 80173ce:	60a2      	str	r2, [r4, #8]
 80173d0:	9b01      	ldr	r3, [sp, #4]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	dc00      	bgt.n	80173d8 <__sflush_r+0xec>
 80173d6:	e795      	b.n	8017304 <__sflush_r+0x18>
 80173d8:	003a      	movs	r2, r7
 80173da:	0028      	movs	r0, r5
 80173dc:	9b01      	ldr	r3, [sp, #4]
 80173de:	6a21      	ldr	r1, [r4, #32]
 80173e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80173e2:	47b0      	blx	r6
 80173e4:	2800      	cmp	r0, #0
 80173e6:	dc06      	bgt.n	80173f6 <__sflush_r+0x10a>
 80173e8:	2340      	movs	r3, #64	; 0x40
 80173ea:	2001      	movs	r0, #1
 80173ec:	89a2      	ldrh	r2, [r4, #12]
 80173ee:	4240      	negs	r0, r0
 80173f0:	4313      	orrs	r3, r2
 80173f2:	81a3      	strh	r3, [r4, #12]
 80173f4:	e787      	b.n	8017306 <__sflush_r+0x1a>
 80173f6:	9b01      	ldr	r3, [sp, #4]
 80173f8:	183f      	adds	r7, r7, r0
 80173fa:	1a1b      	subs	r3, r3, r0
 80173fc:	9301      	str	r3, [sp, #4]
 80173fe:	e7e7      	b.n	80173d0 <__sflush_r+0xe4>
 8017400:	20400001 	.word	0x20400001

08017404 <_fflush_r>:
 8017404:	690b      	ldr	r3, [r1, #16]
 8017406:	b570      	push	{r4, r5, r6, lr}
 8017408:	0005      	movs	r5, r0
 801740a:	000c      	movs	r4, r1
 801740c:	2b00      	cmp	r3, #0
 801740e:	d102      	bne.n	8017416 <_fflush_r+0x12>
 8017410:	2500      	movs	r5, #0
 8017412:	0028      	movs	r0, r5
 8017414:	bd70      	pop	{r4, r5, r6, pc}
 8017416:	2800      	cmp	r0, #0
 8017418:	d004      	beq.n	8017424 <_fflush_r+0x20>
 801741a:	6983      	ldr	r3, [r0, #24]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d101      	bne.n	8017424 <_fflush_r+0x20>
 8017420:	f000 f892 	bl	8017548 <__sinit>
 8017424:	4b14      	ldr	r3, [pc, #80]	; (8017478 <_fflush_r+0x74>)
 8017426:	429c      	cmp	r4, r3
 8017428:	d11b      	bne.n	8017462 <_fflush_r+0x5e>
 801742a:	686c      	ldr	r4, [r5, #4]
 801742c:	220c      	movs	r2, #12
 801742e:	5ea3      	ldrsh	r3, [r4, r2]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d0ed      	beq.n	8017410 <_fflush_r+0xc>
 8017434:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017436:	07d2      	lsls	r2, r2, #31
 8017438:	d404      	bmi.n	8017444 <_fflush_r+0x40>
 801743a:	059b      	lsls	r3, r3, #22
 801743c:	d402      	bmi.n	8017444 <_fflush_r+0x40>
 801743e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017440:	f7ff fcb9 	bl	8016db6 <__retarget_lock_acquire_recursive>
 8017444:	0028      	movs	r0, r5
 8017446:	0021      	movs	r1, r4
 8017448:	f7ff ff50 	bl	80172ec <__sflush_r>
 801744c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801744e:	0005      	movs	r5, r0
 8017450:	07db      	lsls	r3, r3, #31
 8017452:	d4de      	bmi.n	8017412 <_fflush_r+0xe>
 8017454:	89a3      	ldrh	r3, [r4, #12]
 8017456:	059b      	lsls	r3, r3, #22
 8017458:	d4db      	bmi.n	8017412 <_fflush_r+0xe>
 801745a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801745c:	f7ff fcac 	bl	8016db8 <__retarget_lock_release_recursive>
 8017460:	e7d7      	b.n	8017412 <_fflush_r+0xe>
 8017462:	4b06      	ldr	r3, [pc, #24]	; (801747c <_fflush_r+0x78>)
 8017464:	429c      	cmp	r4, r3
 8017466:	d101      	bne.n	801746c <_fflush_r+0x68>
 8017468:	68ac      	ldr	r4, [r5, #8]
 801746a:	e7df      	b.n	801742c <_fflush_r+0x28>
 801746c:	4b04      	ldr	r3, [pc, #16]	; (8017480 <_fflush_r+0x7c>)
 801746e:	429c      	cmp	r4, r3
 8017470:	d1dc      	bne.n	801742c <_fflush_r+0x28>
 8017472:	68ec      	ldr	r4, [r5, #12]
 8017474:	e7da      	b.n	801742c <_fflush_r+0x28>
 8017476:	46c0      	nop			; (mov r8, r8)
 8017478:	080191dc 	.word	0x080191dc
 801747c:	080191fc 	.word	0x080191fc
 8017480:	080191bc 	.word	0x080191bc

08017484 <std>:
 8017484:	2300      	movs	r3, #0
 8017486:	b510      	push	{r4, lr}
 8017488:	0004      	movs	r4, r0
 801748a:	6003      	str	r3, [r0, #0]
 801748c:	6043      	str	r3, [r0, #4]
 801748e:	6083      	str	r3, [r0, #8]
 8017490:	8181      	strh	r1, [r0, #12]
 8017492:	6643      	str	r3, [r0, #100]	; 0x64
 8017494:	0019      	movs	r1, r3
 8017496:	81c2      	strh	r2, [r0, #14]
 8017498:	6103      	str	r3, [r0, #16]
 801749a:	6143      	str	r3, [r0, #20]
 801749c:	6183      	str	r3, [r0, #24]
 801749e:	2208      	movs	r2, #8
 80174a0:	305c      	adds	r0, #92	; 0x5c
 80174a2:	f7fd fade 	bl	8014a62 <memset>
 80174a6:	4b05      	ldr	r3, [pc, #20]	; (80174bc <std+0x38>)
 80174a8:	6224      	str	r4, [r4, #32]
 80174aa:	6263      	str	r3, [r4, #36]	; 0x24
 80174ac:	4b04      	ldr	r3, [pc, #16]	; (80174c0 <std+0x3c>)
 80174ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80174b0:	4b04      	ldr	r3, [pc, #16]	; (80174c4 <std+0x40>)
 80174b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80174b4:	4b04      	ldr	r3, [pc, #16]	; (80174c8 <std+0x44>)
 80174b6:	6323      	str	r3, [r4, #48]	; 0x30
 80174b8:	bd10      	pop	{r4, pc}
 80174ba:	46c0      	nop			; (mov r8, r8)
 80174bc:	08017805 	.word	0x08017805
 80174c0:	0801782d 	.word	0x0801782d
 80174c4:	08017865 	.word	0x08017865
 80174c8:	08017891 	.word	0x08017891

080174cc <_cleanup_r>:
 80174cc:	b510      	push	{r4, lr}
 80174ce:	4902      	ldr	r1, [pc, #8]	; (80174d8 <_cleanup_r+0xc>)
 80174d0:	f000 f8ba 	bl	8017648 <_fwalk_reent>
 80174d4:	bd10      	pop	{r4, pc}
 80174d6:	46c0      	nop			; (mov r8, r8)
 80174d8:	08017405 	.word	0x08017405

080174dc <__sfmoreglue>:
 80174dc:	b570      	push	{r4, r5, r6, lr}
 80174de:	2568      	movs	r5, #104	; 0x68
 80174e0:	1e4a      	subs	r2, r1, #1
 80174e2:	4355      	muls	r5, r2
 80174e4:	000e      	movs	r6, r1
 80174e6:	0029      	movs	r1, r5
 80174e8:	3174      	adds	r1, #116	; 0x74
 80174ea:	f7fd fb2f 	bl	8014b4c <_malloc_r>
 80174ee:	1e04      	subs	r4, r0, #0
 80174f0:	d008      	beq.n	8017504 <__sfmoreglue+0x28>
 80174f2:	2100      	movs	r1, #0
 80174f4:	002a      	movs	r2, r5
 80174f6:	6001      	str	r1, [r0, #0]
 80174f8:	6046      	str	r6, [r0, #4]
 80174fa:	300c      	adds	r0, #12
 80174fc:	60a0      	str	r0, [r4, #8]
 80174fe:	3268      	adds	r2, #104	; 0x68
 8017500:	f7fd faaf 	bl	8014a62 <memset>
 8017504:	0020      	movs	r0, r4
 8017506:	bd70      	pop	{r4, r5, r6, pc}

08017508 <__sfp_lock_acquire>:
 8017508:	b510      	push	{r4, lr}
 801750a:	4802      	ldr	r0, [pc, #8]	; (8017514 <__sfp_lock_acquire+0xc>)
 801750c:	f7ff fc53 	bl	8016db6 <__retarget_lock_acquire_recursive>
 8017510:	bd10      	pop	{r4, pc}
 8017512:	46c0      	nop			; (mov r8, r8)
 8017514:	20003c35 	.word	0x20003c35

08017518 <__sfp_lock_release>:
 8017518:	b510      	push	{r4, lr}
 801751a:	4802      	ldr	r0, [pc, #8]	; (8017524 <__sfp_lock_release+0xc>)
 801751c:	f7ff fc4c 	bl	8016db8 <__retarget_lock_release_recursive>
 8017520:	bd10      	pop	{r4, pc}
 8017522:	46c0      	nop			; (mov r8, r8)
 8017524:	20003c35 	.word	0x20003c35

08017528 <__sinit_lock_acquire>:
 8017528:	b510      	push	{r4, lr}
 801752a:	4802      	ldr	r0, [pc, #8]	; (8017534 <__sinit_lock_acquire+0xc>)
 801752c:	f7ff fc43 	bl	8016db6 <__retarget_lock_acquire_recursive>
 8017530:	bd10      	pop	{r4, pc}
 8017532:	46c0      	nop			; (mov r8, r8)
 8017534:	20003c36 	.word	0x20003c36

08017538 <__sinit_lock_release>:
 8017538:	b510      	push	{r4, lr}
 801753a:	4802      	ldr	r0, [pc, #8]	; (8017544 <__sinit_lock_release+0xc>)
 801753c:	f7ff fc3c 	bl	8016db8 <__retarget_lock_release_recursive>
 8017540:	bd10      	pop	{r4, pc}
 8017542:	46c0      	nop			; (mov r8, r8)
 8017544:	20003c36 	.word	0x20003c36

08017548 <__sinit>:
 8017548:	b513      	push	{r0, r1, r4, lr}
 801754a:	0004      	movs	r4, r0
 801754c:	f7ff ffec 	bl	8017528 <__sinit_lock_acquire>
 8017550:	69a3      	ldr	r3, [r4, #24]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d002      	beq.n	801755c <__sinit+0x14>
 8017556:	f7ff ffef 	bl	8017538 <__sinit_lock_release>
 801755a:	bd13      	pop	{r0, r1, r4, pc}
 801755c:	64a3      	str	r3, [r4, #72]	; 0x48
 801755e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017560:	6523      	str	r3, [r4, #80]	; 0x50
 8017562:	4b13      	ldr	r3, [pc, #76]	; (80175b0 <__sinit+0x68>)
 8017564:	4a13      	ldr	r2, [pc, #76]	; (80175b4 <__sinit+0x6c>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	62a2      	str	r2, [r4, #40]	; 0x28
 801756a:	9301      	str	r3, [sp, #4]
 801756c:	42a3      	cmp	r3, r4
 801756e:	d101      	bne.n	8017574 <__sinit+0x2c>
 8017570:	2301      	movs	r3, #1
 8017572:	61a3      	str	r3, [r4, #24]
 8017574:	0020      	movs	r0, r4
 8017576:	f000 f81f 	bl	80175b8 <__sfp>
 801757a:	6060      	str	r0, [r4, #4]
 801757c:	0020      	movs	r0, r4
 801757e:	f000 f81b 	bl	80175b8 <__sfp>
 8017582:	60a0      	str	r0, [r4, #8]
 8017584:	0020      	movs	r0, r4
 8017586:	f000 f817 	bl	80175b8 <__sfp>
 801758a:	2200      	movs	r2, #0
 801758c:	2104      	movs	r1, #4
 801758e:	60e0      	str	r0, [r4, #12]
 8017590:	6860      	ldr	r0, [r4, #4]
 8017592:	f7ff ff77 	bl	8017484 <std>
 8017596:	2201      	movs	r2, #1
 8017598:	2109      	movs	r1, #9
 801759a:	68a0      	ldr	r0, [r4, #8]
 801759c:	f7ff ff72 	bl	8017484 <std>
 80175a0:	2202      	movs	r2, #2
 80175a2:	2112      	movs	r1, #18
 80175a4:	68e0      	ldr	r0, [r4, #12]
 80175a6:	f7ff ff6d 	bl	8017484 <std>
 80175aa:	2301      	movs	r3, #1
 80175ac:	61a3      	str	r3, [r4, #24]
 80175ae:	e7d2      	b.n	8017556 <__sinit+0xe>
 80175b0:	08018e44 	.word	0x08018e44
 80175b4:	080174cd 	.word	0x080174cd

080175b8 <__sfp>:
 80175b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ba:	0007      	movs	r7, r0
 80175bc:	f7ff ffa4 	bl	8017508 <__sfp_lock_acquire>
 80175c0:	4b1f      	ldr	r3, [pc, #124]	; (8017640 <__sfp+0x88>)
 80175c2:	681e      	ldr	r6, [r3, #0]
 80175c4:	69b3      	ldr	r3, [r6, #24]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d102      	bne.n	80175d0 <__sfp+0x18>
 80175ca:	0030      	movs	r0, r6
 80175cc:	f7ff ffbc 	bl	8017548 <__sinit>
 80175d0:	3648      	adds	r6, #72	; 0x48
 80175d2:	68b4      	ldr	r4, [r6, #8]
 80175d4:	6873      	ldr	r3, [r6, #4]
 80175d6:	3b01      	subs	r3, #1
 80175d8:	d504      	bpl.n	80175e4 <__sfp+0x2c>
 80175da:	6833      	ldr	r3, [r6, #0]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d022      	beq.n	8017626 <__sfp+0x6e>
 80175e0:	6836      	ldr	r6, [r6, #0]
 80175e2:	e7f6      	b.n	80175d2 <__sfp+0x1a>
 80175e4:	220c      	movs	r2, #12
 80175e6:	5ea5      	ldrsh	r5, [r4, r2]
 80175e8:	2d00      	cmp	r5, #0
 80175ea:	d11a      	bne.n	8017622 <__sfp+0x6a>
 80175ec:	0020      	movs	r0, r4
 80175ee:	4b15      	ldr	r3, [pc, #84]	; (8017644 <__sfp+0x8c>)
 80175f0:	3058      	adds	r0, #88	; 0x58
 80175f2:	60e3      	str	r3, [r4, #12]
 80175f4:	6665      	str	r5, [r4, #100]	; 0x64
 80175f6:	f7ff fbdd 	bl	8016db4 <__retarget_lock_init_recursive>
 80175fa:	f7ff ff8d 	bl	8017518 <__sfp_lock_release>
 80175fe:	0020      	movs	r0, r4
 8017600:	2208      	movs	r2, #8
 8017602:	0029      	movs	r1, r5
 8017604:	6025      	str	r5, [r4, #0]
 8017606:	60a5      	str	r5, [r4, #8]
 8017608:	6065      	str	r5, [r4, #4]
 801760a:	6125      	str	r5, [r4, #16]
 801760c:	6165      	str	r5, [r4, #20]
 801760e:	61a5      	str	r5, [r4, #24]
 8017610:	305c      	adds	r0, #92	; 0x5c
 8017612:	f7fd fa26 	bl	8014a62 <memset>
 8017616:	6365      	str	r5, [r4, #52]	; 0x34
 8017618:	63a5      	str	r5, [r4, #56]	; 0x38
 801761a:	64a5      	str	r5, [r4, #72]	; 0x48
 801761c:	64e5      	str	r5, [r4, #76]	; 0x4c
 801761e:	0020      	movs	r0, r4
 8017620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017622:	3468      	adds	r4, #104	; 0x68
 8017624:	e7d7      	b.n	80175d6 <__sfp+0x1e>
 8017626:	2104      	movs	r1, #4
 8017628:	0038      	movs	r0, r7
 801762a:	f7ff ff57 	bl	80174dc <__sfmoreglue>
 801762e:	1e04      	subs	r4, r0, #0
 8017630:	6030      	str	r0, [r6, #0]
 8017632:	d1d5      	bne.n	80175e0 <__sfp+0x28>
 8017634:	f7ff ff70 	bl	8017518 <__sfp_lock_release>
 8017638:	230c      	movs	r3, #12
 801763a:	603b      	str	r3, [r7, #0]
 801763c:	e7ef      	b.n	801761e <__sfp+0x66>
 801763e:	46c0      	nop			; (mov r8, r8)
 8017640:	08018e44 	.word	0x08018e44
 8017644:	ffff0001 	.word	0xffff0001

08017648 <_fwalk_reent>:
 8017648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801764a:	0004      	movs	r4, r0
 801764c:	0006      	movs	r6, r0
 801764e:	2700      	movs	r7, #0
 8017650:	9101      	str	r1, [sp, #4]
 8017652:	3448      	adds	r4, #72	; 0x48
 8017654:	6863      	ldr	r3, [r4, #4]
 8017656:	68a5      	ldr	r5, [r4, #8]
 8017658:	9300      	str	r3, [sp, #0]
 801765a:	9b00      	ldr	r3, [sp, #0]
 801765c:	3b01      	subs	r3, #1
 801765e:	9300      	str	r3, [sp, #0]
 8017660:	d504      	bpl.n	801766c <_fwalk_reent+0x24>
 8017662:	6824      	ldr	r4, [r4, #0]
 8017664:	2c00      	cmp	r4, #0
 8017666:	d1f5      	bne.n	8017654 <_fwalk_reent+0xc>
 8017668:	0038      	movs	r0, r7
 801766a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801766c:	89ab      	ldrh	r3, [r5, #12]
 801766e:	2b01      	cmp	r3, #1
 8017670:	d908      	bls.n	8017684 <_fwalk_reent+0x3c>
 8017672:	220e      	movs	r2, #14
 8017674:	5eab      	ldrsh	r3, [r5, r2]
 8017676:	3301      	adds	r3, #1
 8017678:	d004      	beq.n	8017684 <_fwalk_reent+0x3c>
 801767a:	0029      	movs	r1, r5
 801767c:	0030      	movs	r0, r6
 801767e:	9b01      	ldr	r3, [sp, #4]
 8017680:	4798      	blx	r3
 8017682:	4307      	orrs	r7, r0
 8017684:	3568      	adds	r5, #104	; 0x68
 8017686:	e7e8      	b.n	801765a <_fwalk_reent+0x12>

08017688 <__swhatbuf_r>:
 8017688:	b570      	push	{r4, r5, r6, lr}
 801768a:	000e      	movs	r6, r1
 801768c:	001d      	movs	r5, r3
 801768e:	230e      	movs	r3, #14
 8017690:	5ec9      	ldrsh	r1, [r1, r3]
 8017692:	0014      	movs	r4, r2
 8017694:	b096      	sub	sp, #88	; 0x58
 8017696:	2900      	cmp	r1, #0
 8017698:	da08      	bge.n	80176ac <__swhatbuf_r+0x24>
 801769a:	220c      	movs	r2, #12
 801769c:	5eb3      	ldrsh	r3, [r6, r2]
 801769e:	2200      	movs	r2, #0
 80176a0:	602a      	str	r2, [r5, #0]
 80176a2:	061b      	lsls	r3, r3, #24
 80176a4:	d411      	bmi.n	80176ca <__swhatbuf_r+0x42>
 80176a6:	2380      	movs	r3, #128	; 0x80
 80176a8:	00db      	lsls	r3, r3, #3
 80176aa:	e00f      	b.n	80176cc <__swhatbuf_r+0x44>
 80176ac:	466a      	mov	r2, sp
 80176ae:	f000 f91b 	bl	80178e8 <_fstat_r>
 80176b2:	2800      	cmp	r0, #0
 80176b4:	dbf1      	blt.n	801769a <__swhatbuf_r+0x12>
 80176b6:	23f0      	movs	r3, #240	; 0xf0
 80176b8:	9901      	ldr	r1, [sp, #4]
 80176ba:	021b      	lsls	r3, r3, #8
 80176bc:	4019      	ands	r1, r3
 80176be:	4b05      	ldr	r3, [pc, #20]	; (80176d4 <__swhatbuf_r+0x4c>)
 80176c0:	18c9      	adds	r1, r1, r3
 80176c2:	424b      	negs	r3, r1
 80176c4:	4159      	adcs	r1, r3
 80176c6:	6029      	str	r1, [r5, #0]
 80176c8:	e7ed      	b.n	80176a6 <__swhatbuf_r+0x1e>
 80176ca:	2340      	movs	r3, #64	; 0x40
 80176cc:	2000      	movs	r0, #0
 80176ce:	6023      	str	r3, [r4, #0]
 80176d0:	b016      	add	sp, #88	; 0x58
 80176d2:	bd70      	pop	{r4, r5, r6, pc}
 80176d4:	ffffe000 	.word	0xffffe000

080176d8 <__smakebuf_r>:
 80176d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176da:	2602      	movs	r6, #2
 80176dc:	898b      	ldrh	r3, [r1, #12]
 80176de:	0005      	movs	r5, r0
 80176e0:	000c      	movs	r4, r1
 80176e2:	4233      	tst	r3, r6
 80176e4:	d006      	beq.n	80176f4 <__smakebuf_r+0x1c>
 80176e6:	0023      	movs	r3, r4
 80176e8:	3347      	adds	r3, #71	; 0x47
 80176ea:	6023      	str	r3, [r4, #0]
 80176ec:	6123      	str	r3, [r4, #16]
 80176ee:	2301      	movs	r3, #1
 80176f0:	6163      	str	r3, [r4, #20]
 80176f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80176f4:	466a      	mov	r2, sp
 80176f6:	ab01      	add	r3, sp, #4
 80176f8:	f7ff ffc6 	bl	8017688 <__swhatbuf_r>
 80176fc:	9900      	ldr	r1, [sp, #0]
 80176fe:	0007      	movs	r7, r0
 8017700:	0028      	movs	r0, r5
 8017702:	f7fd fa23 	bl	8014b4c <_malloc_r>
 8017706:	2800      	cmp	r0, #0
 8017708:	d108      	bne.n	801771c <__smakebuf_r+0x44>
 801770a:	220c      	movs	r2, #12
 801770c:	5ea3      	ldrsh	r3, [r4, r2]
 801770e:	059a      	lsls	r2, r3, #22
 8017710:	d4ef      	bmi.n	80176f2 <__smakebuf_r+0x1a>
 8017712:	2203      	movs	r2, #3
 8017714:	4393      	bics	r3, r2
 8017716:	431e      	orrs	r6, r3
 8017718:	81a6      	strh	r6, [r4, #12]
 801771a:	e7e4      	b.n	80176e6 <__smakebuf_r+0xe>
 801771c:	4b0f      	ldr	r3, [pc, #60]	; (801775c <__smakebuf_r+0x84>)
 801771e:	62ab      	str	r3, [r5, #40]	; 0x28
 8017720:	2380      	movs	r3, #128	; 0x80
 8017722:	89a2      	ldrh	r2, [r4, #12]
 8017724:	6020      	str	r0, [r4, #0]
 8017726:	4313      	orrs	r3, r2
 8017728:	81a3      	strh	r3, [r4, #12]
 801772a:	9b00      	ldr	r3, [sp, #0]
 801772c:	6120      	str	r0, [r4, #16]
 801772e:	6163      	str	r3, [r4, #20]
 8017730:	9b01      	ldr	r3, [sp, #4]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d00d      	beq.n	8017752 <__smakebuf_r+0x7a>
 8017736:	0028      	movs	r0, r5
 8017738:	230e      	movs	r3, #14
 801773a:	5ee1      	ldrsh	r1, [r4, r3]
 801773c:	f000 f8e6 	bl	801790c <_isatty_r>
 8017740:	2800      	cmp	r0, #0
 8017742:	d006      	beq.n	8017752 <__smakebuf_r+0x7a>
 8017744:	2203      	movs	r2, #3
 8017746:	89a3      	ldrh	r3, [r4, #12]
 8017748:	4393      	bics	r3, r2
 801774a:	001a      	movs	r2, r3
 801774c:	2301      	movs	r3, #1
 801774e:	4313      	orrs	r3, r2
 8017750:	81a3      	strh	r3, [r4, #12]
 8017752:	89a0      	ldrh	r0, [r4, #12]
 8017754:	4307      	orrs	r7, r0
 8017756:	81a7      	strh	r7, [r4, #12]
 8017758:	e7cb      	b.n	80176f2 <__smakebuf_r+0x1a>
 801775a:	46c0      	nop			; (mov r8, r8)
 801775c:	080174cd 	.word	0x080174cd

08017760 <_malloc_usable_size_r>:
 8017760:	1f0b      	subs	r3, r1, #4
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	1f18      	subs	r0, r3, #4
 8017766:	2b00      	cmp	r3, #0
 8017768:	da01      	bge.n	801776e <_malloc_usable_size_r+0xe>
 801776a:	580b      	ldr	r3, [r1, r0]
 801776c:	18c0      	adds	r0, r0, r3
 801776e:	4770      	bx	lr

08017770 <_raise_r>:
 8017770:	b570      	push	{r4, r5, r6, lr}
 8017772:	0004      	movs	r4, r0
 8017774:	000d      	movs	r5, r1
 8017776:	291f      	cmp	r1, #31
 8017778:	d904      	bls.n	8017784 <_raise_r+0x14>
 801777a:	2316      	movs	r3, #22
 801777c:	6003      	str	r3, [r0, #0]
 801777e:	2001      	movs	r0, #1
 8017780:	4240      	negs	r0, r0
 8017782:	bd70      	pop	{r4, r5, r6, pc}
 8017784:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8017786:	2b00      	cmp	r3, #0
 8017788:	d004      	beq.n	8017794 <_raise_r+0x24>
 801778a:	008a      	lsls	r2, r1, #2
 801778c:	189b      	adds	r3, r3, r2
 801778e:	681a      	ldr	r2, [r3, #0]
 8017790:	2a00      	cmp	r2, #0
 8017792:	d108      	bne.n	80177a6 <_raise_r+0x36>
 8017794:	0020      	movs	r0, r4
 8017796:	f000 f831 	bl	80177fc <_getpid_r>
 801779a:	002a      	movs	r2, r5
 801779c:	0001      	movs	r1, r0
 801779e:	0020      	movs	r0, r4
 80177a0:	f000 f81a 	bl	80177d8 <_kill_r>
 80177a4:	e7ed      	b.n	8017782 <_raise_r+0x12>
 80177a6:	2000      	movs	r0, #0
 80177a8:	2a01      	cmp	r2, #1
 80177aa:	d0ea      	beq.n	8017782 <_raise_r+0x12>
 80177ac:	1c51      	adds	r1, r2, #1
 80177ae:	d103      	bne.n	80177b8 <_raise_r+0x48>
 80177b0:	2316      	movs	r3, #22
 80177b2:	3001      	adds	r0, #1
 80177b4:	6023      	str	r3, [r4, #0]
 80177b6:	e7e4      	b.n	8017782 <_raise_r+0x12>
 80177b8:	2400      	movs	r4, #0
 80177ba:	0028      	movs	r0, r5
 80177bc:	601c      	str	r4, [r3, #0]
 80177be:	4790      	blx	r2
 80177c0:	0020      	movs	r0, r4
 80177c2:	e7de      	b.n	8017782 <_raise_r+0x12>

080177c4 <raise>:
 80177c4:	b510      	push	{r4, lr}
 80177c6:	4b03      	ldr	r3, [pc, #12]	; (80177d4 <raise+0x10>)
 80177c8:	0001      	movs	r1, r0
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	f7ff ffd0 	bl	8017770 <_raise_r>
 80177d0:	bd10      	pop	{r4, pc}
 80177d2:	46c0      	nop			; (mov r8, r8)
 80177d4:	200030d8 	.word	0x200030d8

080177d8 <_kill_r>:
 80177d8:	2300      	movs	r3, #0
 80177da:	b570      	push	{r4, r5, r6, lr}
 80177dc:	4d06      	ldr	r5, [pc, #24]	; (80177f8 <_kill_r+0x20>)
 80177de:	0004      	movs	r4, r0
 80177e0:	0008      	movs	r0, r1
 80177e2:	0011      	movs	r1, r2
 80177e4:	602b      	str	r3, [r5, #0]
 80177e6:	f7ec fa65 	bl	8003cb4 <_kill>
 80177ea:	1c43      	adds	r3, r0, #1
 80177ec:	d103      	bne.n	80177f6 <_kill_r+0x1e>
 80177ee:	682b      	ldr	r3, [r5, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d000      	beq.n	80177f6 <_kill_r+0x1e>
 80177f4:	6023      	str	r3, [r4, #0]
 80177f6:	bd70      	pop	{r4, r5, r6, pc}
 80177f8:	20003c30 	.word	0x20003c30

080177fc <_getpid_r>:
 80177fc:	b510      	push	{r4, lr}
 80177fe:	f7ec fa53 	bl	8003ca8 <_getpid>
 8017802:	bd10      	pop	{r4, pc}

08017804 <__sread>:
 8017804:	b570      	push	{r4, r5, r6, lr}
 8017806:	000c      	movs	r4, r1
 8017808:	250e      	movs	r5, #14
 801780a:	5f49      	ldrsh	r1, [r1, r5]
 801780c:	f000 f8a4 	bl	8017958 <_read_r>
 8017810:	2800      	cmp	r0, #0
 8017812:	db03      	blt.n	801781c <__sread+0x18>
 8017814:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8017816:	181b      	adds	r3, r3, r0
 8017818:	6563      	str	r3, [r4, #84]	; 0x54
 801781a:	bd70      	pop	{r4, r5, r6, pc}
 801781c:	89a3      	ldrh	r3, [r4, #12]
 801781e:	4a02      	ldr	r2, [pc, #8]	; (8017828 <__sread+0x24>)
 8017820:	4013      	ands	r3, r2
 8017822:	81a3      	strh	r3, [r4, #12]
 8017824:	e7f9      	b.n	801781a <__sread+0x16>
 8017826:	46c0      	nop			; (mov r8, r8)
 8017828:	ffffefff 	.word	0xffffefff

0801782c <__swrite>:
 801782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801782e:	001f      	movs	r7, r3
 8017830:	898b      	ldrh	r3, [r1, #12]
 8017832:	0005      	movs	r5, r0
 8017834:	000c      	movs	r4, r1
 8017836:	0016      	movs	r6, r2
 8017838:	05db      	lsls	r3, r3, #23
 801783a:	d505      	bpl.n	8017848 <__swrite+0x1c>
 801783c:	230e      	movs	r3, #14
 801783e:	5ec9      	ldrsh	r1, [r1, r3]
 8017840:	2200      	movs	r2, #0
 8017842:	2302      	movs	r3, #2
 8017844:	f000 f874 	bl	8017930 <_lseek_r>
 8017848:	89a3      	ldrh	r3, [r4, #12]
 801784a:	4a05      	ldr	r2, [pc, #20]	; (8017860 <__swrite+0x34>)
 801784c:	0028      	movs	r0, r5
 801784e:	4013      	ands	r3, r2
 8017850:	81a3      	strh	r3, [r4, #12]
 8017852:	0032      	movs	r2, r6
 8017854:	230e      	movs	r3, #14
 8017856:	5ee1      	ldrsh	r1, [r4, r3]
 8017858:	003b      	movs	r3, r7
 801785a:	f000 f81f 	bl	801789c <_write_r>
 801785e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017860:	ffffefff 	.word	0xffffefff

08017864 <__sseek>:
 8017864:	b570      	push	{r4, r5, r6, lr}
 8017866:	000c      	movs	r4, r1
 8017868:	250e      	movs	r5, #14
 801786a:	5f49      	ldrsh	r1, [r1, r5]
 801786c:	f000 f860 	bl	8017930 <_lseek_r>
 8017870:	89a3      	ldrh	r3, [r4, #12]
 8017872:	1c42      	adds	r2, r0, #1
 8017874:	d103      	bne.n	801787e <__sseek+0x1a>
 8017876:	4a05      	ldr	r2, [pc, #20]	; (801788c <__sseek+0x28>)
 8017878:	4013      	ands	r3, r2
 801787a:	81a3      	strh	r3, [r4, #12]
 801787c:	bd70      	pop	{r4, r5, r6, pc}
 801787e:	2280      	movs	r2, #128	; 0x80
 8017880:	0152      	lsls	r2, r2, #5
 8017882:	4313      	orrs	r3, r2
 8017884:	81a3      	strh	r3, [r4, #12]
 8017886:	6560      	str	r0, [r4, #84]	; 0x54
 8017888:	e7f8      	b.n	801787c <__sseek+0x18>
 801788a:	46c0      	nop			; (mov r8, r8)
 801788c:	ffffefff 	.word	0xffffefff

08017890 <__sclose>:
 8017890:	b510      	push	{r4, lr}
 8017892:	230e      	movs	r3, #14
 8017894:	5ec9      	ldrsh	r1, [r1, r3]
 8017896:	f000 f815 	bl	80178c4 <_close_r>
 801789a:	bd10      	pop	{r4, pc}

0801789c <_write_r>:
 801789c:	b570      	push	{r4, r5, r6, lr}
 801789e:	0004      	movs	r4, r0
 80178a0:	0008      	movs	r0, r1
 80178a2:	0011      	movs	r1, r2
 80178a4:	001a      	movs	r2, r3
 80178a6:	2300      	movs	r3, #0
 80178a8:	4d05      	ldr	r5, [pc, #20]	; (80178c0 <_write_r+0x24>)
 80178aa:	602b      	str	r3, [r5, #0]
 80178ac:	f7ec fa3b 	bl	8003d26 <_write>
 80178b0:	1c43      	adds	r3, r0, #1
 80178b2:	d103      	bne.n	80178bc <_write_r+0x20>
 80178b4:	682b      	ldr	r3, [r5, #0]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d000      	beq.n	80178bc <_write_r+0x20>
 80178ba:	6023      	str	r3, [r4, #0]
 80178bc:	bd70      	pop	{r4, r5, r6, pc}
 80178be:	46c0      	nop			; (mov r8, r8)
 80178c0:	20003c30 	.word	0x20003c30

080178c4 <_close_r>:
 80178c4:	2300      	movs	r3, #0
 80178c6:	b570      	push	{r4, r5, r6, lr}
 80178c8:	4d06      	ldr	r5, [pc, #24]	; (80178e4 <_close_r+0x20>)
 80178ca:	0004      	movs	r4, r0
 80178cc:	0008      	movs	r0, r1
 80178ce:	602b      	str	r3, [r5, #0]
 80178d0:	f7ec fa45 	bl	8003d5e <_close>
 80178d4:	1c43      	adds	r3, r0, #1
 80178d6:	d103      	bne.n	80178e0 <_close_r+0x1c>
 80178d8:	682b      	ldr	r3, [r5, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d000      	beq.n	80178e0 <_close_r+0x1c>
 80178de:	6023      	str	r3, [r4, #0]
 80178e0:	bd70      	pop	{r4, r5, r6, pc}
 80178e2:	46c0      	nop			; (mov r8, r8)
 80178e4:	20003c30 	.word	0x20003c30

080178e8 <_fstat_r>:
 80178e8:	2300      	movs	r3, #0
 80178ea:	b570      	push	{r4, r5, r6, lr}
 80178ec:	4d06      	ldr	r5, [pc, #24]	; (8017908 <_fstat_r+0x20>)
 80178ee:	0004      	movs	r4, r0
 80178f0:	0008      	movs	r0, r1
 80178f2:	0011      	movs	r1, r2
 80178f4:	602b      	str	r3, [r5, #0]
 80178f6:	f7ec fa3c 	bl	8003d72 <_fstat>
 80178fa:	1c43      	adds	r3, r0, #1
 80178fc:	d103      	bne.n	8017906 <_fstat_r+0x1e>
 80178fe:	682b      	ldr	r3, [r5, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d000      	beq.n	8017906 <_fstat_r+0x1e>
 8017904:	6023      	str	r3, [r4, #0]
 8017906:	bd70      	pop	{r4, r5, r6, pc}
 8017908:	20003c30 	.word	0x20003c30

0801790c <_isatty_r>:
 801790c:	2300      	movs	r3, #0
 801790e:	b570      	push	{r4, r5, r6, lr}
 8017910:	4d06      	ldr	r5, [pc, #24]	; (801792c <_isatty_r+0x20>)
 8017912:	0004      	movs	r4, r0
 8017914:	0008      	movs	r0, r1
 8017916:	602b      	str	r3, [r5, #0]
 8017918:	f7ec fa39 	bl	8003d8e <_isatty>
 801791c:	1c43      	adds	r3, r0, #1
 801791e:	d103      	bne.n	8017928 <_isatty_r+0x1c>
 8017920:	682b      	ldr	r3, [r5, #0]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d000      	beq.n	8017928 <_isatty_r+0x1c>
 8017926:	6023      	str	r3, [r4, #0]
 8017928:	bd70      	pop	{r4, r5, r6, pc}
 801792a:	46c0      	nop			; (mov r8, r8)
 801792c:	20003c30 	.word	0x20003c30

08017930 <_lseek_r>:
 8017930:	b570      	push	{r4, r5, r6, lr}
 8017932:	0004      	movs	r4, r0
 8017934:	0008      	movs	r0, r1
 8017936:	0011      	movs	r1, r2
 8017938:	001a      	movs	r2, r3
 801793a:	2300      	movs	r3, #0
 801793c:	4d05      	ldr	r5, [pc, #20]	; (8017954 <_lseek_r+0x24>)
 801793e:	602b      	str	r3, [r5, #0]
 8017940:	f7ec fa2e 	bl	8003da0 <_lseek>
 8017944:	1c43      	adds	r3, r0, #1
 8017946:	d103      	bne.n	8017950 <_lseek_r+0x20>
 8017948:	682b      	ldr	r3, [r5, #0]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d000      	beq.n	8017950 <_lseek_r+0x20>
 801794e:	6023      	str	r3, [r4, #0]
 8017950:	bd70      	pop	{r4, r5, r6, pc}
 8017952:	46c0      	nop			; (mov r8, r8)
 8017954:	20003c30 	.word	0x20003c30

08017958 <_read_r>:
 8017958:	b570      	push	{r4, r5, r6, lr}
 801795a:	0004      	movs	r4, r0
 801795c:	0008      	movs	r0, r1
 801795e:	0011      	movs	r1, r2
 8017960:	001a      	movs	r2, r3
 8017962:	2300      	movs	r3, #0
 8017964:	4d05      	ldr	r5, [pc, #20]	; (801797c <_read_r+0x24>)
 8017966:	602b      	str	r3, [r5, #0]
 8017968:	f7ec f9c0 	bl	8003cec <_read>
 801796c:	1c43      	adds	r3, r0, #1
 801796e:	d103      	bne.n	8017978 <_read_r+0x20>
 8017970:	682b      	ldr	r3, [r5, #0]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d000      	beq.n	8017978 <_read_r+0x20>
 8017976:	6023      	str	r3, [r4, #0]
 8017978:	bd70      	pop	{r4, r5, r6, pc}
 801797a:	46c0      	nop			; (mov r8, r8)
 801797c:	20003c30 	.word	0x20003c30

08017980 <pow>:
 8017980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017982:	0014      	movs	r4, r2
 8017984:	001d      	movs	r5, r3
 8017986:	9000      	str	r0, [sp, #0]
 8017988:	9101      	str	r1, [sp, #4]
 801798a:	f000 f867 	bl	8017a5c <__ieee754_pow>
 801798e:	0022      	movs	r2, r4
 8017990:	0006      	movs	r6, r0
 8017992:	000f      	movs	r7, r1
 8017994:	002b      	movs	r3, r5
 8017996:	0020      	movs	r0, r4
 8017998:	0029      	movs	r1, r5
 801799a:	f7eb f9df 	bl	8002d5c <__aeabi_dcmpun>
 801799e:	2800      	cmp	r0, #0
 80179a0:	d13f      	bne.n	8017a22 <pow+0xa2>
 80179a2:	9800      	ldr	r0, [sp, #0]
 80179a4:	9901      	ldr	r1, [sp, #4]
 80179a6:	2200      	movs	r2, #0
 80179a8:	2300      	movs	r3, #0
 80179aa:	f7e8 fd55 	bl	8000458 <__aeabi_dcmpeq>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d019      	beq.n	80179e6 <pow+0x66>
 80179b2:	2200      	movs	r2, #0
 80179b4:	2300      	movs	r3, #0
 80179b6:	0020      	movs	r0, r4
 80179b8:	0029      	movs	r1, r5
 80179ba:	f7e8 fd4d 	bl	8000458 <__aeabi_dcmpeq>
 80179be:	2800      	cmp	r0, #0
 80179c0:	d146      	bne.n	8017a50 <pow+0xd0>
 80179c2:	0020      	movs	r0, r4
 80179c4:	0029      	movs	r1, r5
 80179c6:	f000 fe3d 	bl	8018644 <finite>
 80179ca:	2800      	cmp	r0, #0
 80179cc:	d029      	beq.n	8017a22 <pow+0xa2>
 80179ce:	2200      	movs	r2, #0
 80179d0:	2300      	movs	r3, #0
 80179d2:	0020      	movs	r0, r4
 80179d4:	0029      	movs	r1, r5
 80179d6:	f7e8 fd45 	bl	8000464 <__aeabi_dcmplt>
 80179da:	2800      	cmp	r0, #0
 80179dc:	d021      	beq.n	8017a22 <pow+0xa2>
 80179de:	f7fd f803 	bl	80149e8 <__errno>
 80179e2:	2322      	movs	r3, #34	; 0x22
 80179e4:	e01c      	b.n	8017a20 <pow+0xa0>
 80179e6:	0030      	movs	r0, r6
 80179e8:	0039      	movs	r1, r7
 80179ea:	f000 fe2b 	bl	8018644 <finite>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	d11b      	bne.n	8017a2a <pow+0xaa>
 80179f2:	9800      	ldr	r0, [sp, #0]
 80179f4:	9901      	ldr	r1, [sp, #4]
 80179f6:	f000 fe25 	bl	8018644 <finite>
 80179fa:	2800      	cmp	r0, #0
 80179fc:	d015      	beq.n	8017a2a <pow+0xaa>
 80179fe:	0020      	movs	r0, r4
 8017a00:	0029      	movs	r1, r5
 8017a02:	f000 fe1f 	bl	8018644 <finite>
 8017a06:	2800      	cmp	r0, #0
 8017a08:	d00f      	beq.n	8017a2a <pow+0xaa>
 8017a0a:	0032      	movs	r2, r6
 8017a0c:	003b      	movs	r3, r7
 8017a0e:	0030      	movs	r0, r6
 8017a10:	0039      	movs	r1, r7
 8017a12:	f7eb f9a3 	bl	8002d5c <__aeabi_dcmpun>
 8017a16:	2800      	cmp	r0, #0
 8017a18:	d0e1      	beq.n	80179de <pow+0x5e>
 8017a1a:	f7fc ffe5 	bl	80149e8 <__errno>
 8017a1e:	2321      	movs	r3, #33	; 0x21
 8017a20:	6003      	str	r3, [r0, #0]
 8017a22:	0030      	movs	r0, r6
 8017a24:	0039      	movs	r1, r7
 8017a26:	b003      	add	sp, #12
 8017a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	0030      	movs	r0, r6
 8017a30:	0039      	movs	r1, r7
 8017a32:	f7e8 fd11 	bl	8000458 <__aeabi_dcmpeq>
 8017a36:	2800      	cmp	r0, #0
 8017a38:	d0f3      	beq.n	8017a22 <pow+0xa2>
 8017a3a:	9800      	ldr	r0, [sp, #0]
 8017a3c:	9901      	ldr	r1, [sp, #4]
 8017a3e:	f000 fe01 	bl	8018644 <finite>
 8017a42:	2800      	cmp	r0, #0
 8017a44:	d0ed      	beq.n	8017a22 <pow+0xa2>
 8017a46:	0020      	movs	r0, r4
 8017a48:	0029      	movs	r1, r5
 8017a4a:	f000 fdfb 	bl	8018644 <finite>
 8017a4e:	e7c4      	b.n	80179da <pow+0x5a>
 8017a50:	2600      	movs	r6, #0
 8017a52:	4f01      	ldr	r7, [pc, #4]	; (8017a58 <pow+0xd8>)
 8017a54:	e7e5      	b.n	8017a22 <pow+0xa2>
 8017a56:	46c0      	nop			; (mov r8, r8)
 8017a58:	3ff00000 	.word	0x3ff00000

08017a5c <__ieee754_pow>:
 8017a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a5e:	b095      	sub	sp, #84	; 0x54
 8017a60:	9202      	str	r2, [sp, #8]
 8017a62:	9303      	str	r3, [sp, #12]
 8017a64:	9b03      	ldr	r3, [sp, #12]
 8017a66:	9a03      	ldr	r2, [sp, #12]
 8017a68:	9304      	str	r3, [sp, #16]
 8017a6a:	9b02      	ldr	r3, [sp, #8]
 8017a6c:	0056      	lsls	r6, r2, #1
 8017a6e:	001a      	movs	r2, r3
 8017a70:	0876      	lsrs	r6, r6, #1
 8017a72:	0007      	movs	r7, r0
 8017a74:	000d      	movs	r5, r1
 8017a76:	4332      	orrs	r2, r6
 8017a78:	d119      	bne.n	8017aae <__ieee754_pow+0x52>
 8017a7a:	2180      	movs	r1, #128	; 0x80
 8017a7c:	0309      	lsls	r1, r1, #12
 8017a7e:	4069      	eors	r1, r5
 8017a80:	0002      	movs	r2, r0
 8017a82:	000b      	movs	r3, r1
 8017a84:	1892      	adds	r2, r2, r2
 8017a86:	415b      	adcs	r3, r3
 8017a88:	4989      	ldr	r1, [pc, #548]	; (8017cb0 <__ieee754_pow+0x254>)
 8017a8a:	428b      	cmp	r3, r1
 8017a8c:	d806      	bhi.n	8017a9c <__ieee754_pow+0x40>
 8017a8e:	d001      	beq.n	8017a94 <__ieee754_pow+0x38>
 8017a90:	f000 fcb6 	bl	8018400 <__ieee754_pow+0x9a4>
 8017a94:	2a00      	cmp	r2, #0
 8017a96:	d101      	bne.n	8017a9c <__ieee754_pow+0x40>
 8017a98:	f000 fcb2 	bl	8018400 <__ieee754_pow+0x9a4>
 8017a9c:	9a02      	ldr	r2, [sp, #8]
 8017a9e:	9b03      	ldr	r3, [sp, #12]
 8017aa0:	0038      	movs	r0, r7
 8017aa2:	0029      	movs	r1, r5
 8017aa4:	f7e9 fc1e 	bl	80012e4 <__aeabi_dadd>
 8017aa8:	9000      	str	r0, [sp, #0]
 8017aaa:	9101      	str	r1, [sp, #4]
 8017aac:	e0ad      	b.n	8017c0a <__ieee754_pow+0x1ae>
 8017aae:	4a81      	ldr	r2, [pc, #516]	; (8017cb4 <__ieee754_pow+0x258>)
 8017ab0:	004c      	lsls	r4, r1, #1
 8017ab2:	9108      	str	r1, [sp, #32]
 8017ab4:	9000      	str	r0, [sp, #0]
 8017ab6:	0864      	lsrs	r4, r4, #1
 8017ab8:	4294      	cmp	r4, r2
 8017aba:	dc08      	bgt.n	8017ace <__ieee754_pow+0x72>
 8017abc:	d101      	bne.n	8017ac2 <__ieee754_pow+0x66>
 8017abe:	2800      	cmp	r0, #0
 8017ac0:	d1ec      	bne.n	8017a9c <__ieee754_pow+0x40>
 8017ac2:	4a7c      	ldr	r2, [pc, #496]	; (8017cb4 <__ieee754_pow+0x258>)
 8017ac4:	4296      	cmp	r6, r2
 8017ac6:	dc02      	bgt.n	8017ace <__ieee754_pow+0x72>
 8017ac8:	d10c      	bne.n	8017ae4 <__ieee754_pow+0x88>
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d00a      	beq.n	8017ae4 <__ieee754_pow+0x88>
 8017ace:	4b7a      	ldr	r3, [pc, #488]	; (8017cb8 <__ieee754_pow+0x25c>)
 8017ad0:	18eb      	adds	r3, r5, r3
 8017ad2:	433b      	orrs	r3, r7
 8017ad4:	d1e2      	bne.n	8017a9c <__ieee754_pow+0x40>
 8017ad6:	2180      	movs	r1, #128	; 0x80
 8017ad8:	9803      	ldr	r0, [sp, #12]
 8017ada:	0309      	lsls	r1, r1, #12
 8017adc:	4048      	eors	r0, r1
 8017ade:	0003      	movs	r3, r0
 8017ae0:	9a02      	ldr	r2, [sp, #8]
 8017ae2:	e7cf      	b.n	8017a84 <__ieee754_pow+0x28>
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	9206      	str	r2, [sp, #24]
 8017ae8:	2d00      	cmp	r5, #0
 8017aea:	da69      	bge.n	8017bc0 <__ieee754_pow+0x164>
 8017aec:	4a73      	ldr	r2, [pc, #460]	; (8017cbc <__ieee754_pow+0x260>)
 8017aee:	4296      	cmp	r6, r2
 8017af0:	dc64      	bgt.n	8017bbc <__ieee754_pow+0x160>
 8017af2:	4a73      	ldr	r2, [pc, #460]	; (8017cc0 <__ieee754_pow+0x264>)
 8017af4:	4296      	cmp	r6, r2
 8017af6:	dd11      	ble.n	8017b1c <__ieee754_pow+0xc0>
 8017af8:	4972      	ldr	r1, [pc, #456]	; (8017cc4 <__ieee754_pow+0x268>)
 8017afa:	1532      	asrs	r2, r6, #20
 8017afc:	1852      	adds	r2, r2, r1
 8017afe:	2a14      	cmp	r2, #20
 8017b00:	dd3c      	ble.n	8017b7c <__ieee754_pow+0x120>
 8017b02:	2134      	movs	r1, #52	; 0x34
 8017b04:	1a8a      	subs	r2, r1, r2
 8017b06:	9902      	ldr	r1, [sp, #8]
 8017b08:	40d1      	lsrs	r1, r2
 8017b0a:	0008      	movs	r0, r1
 8017b0c:	4090      	lsls	r0, r2
 8017b0e:	4298      	cmp	r0, r3
 8017b10:	d104      	bne.n	8017b1c <__ieee754_pow+0xc0>
 8017b12:	2201      	movs	r2, #1
 8017b14:	4011      	ands	r1, r2
 8017b16:	1892      	adds	r2, r2, r2
 8017b18:	1a52      	subs	r2, r2, r1
 8017b1a:	9206      	str	r2, [sp, #24]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d03c      	beq.n	8017b9a <__ieee754_pow+0x13e>
 8017b20:	0038      	movs	r0, r7
 8017b22:	0029      	movs	r1, r5
 8017b24:	f000 fd8b 	bl	801863e <fabs>
 8017b28:	9000      	str	r0, [sp, #0]
 8017b2a:	9101      	str	r1, [sp, #4]
 8017b2c:	2f00      	cmp	r7, #0
 8017b2e:	d000      	beq.n	8017b32 <__ieee754_pow+0xd6>
 8017b30:	e094      	b.n	8017c5c <__ieee754_pow+0x200>
 8017b32:	2c00      	cmp	r4, #0
 8017b34:	d005      	beq.n	8017b42 <__ieee754_pow+0xe6>
 8017b36:	4a64      	ldr	r2, [pc, #400]	; (8017cc8 <__ieee754_pow+0x26c>)
 8017b38:	00ab      	lsls	r3, r5, #2
 8017b3a:	089b      	lsrs	r3, r3, #2
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d000      	beq.n	8017b42 <__ieee754_pow+0xe6>
 8017b40:	e08c      	b.n	8017c5c <__ieee754_pow+0x200>
 8017b42:	9b04      	ldr	r3, [sp, #16]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	da07      	bge.n	8017b58 <__ieee754_pow+0xfc>
 8017b48:	9a00      	ldr	r2, [sp, #0]
 8017b4a:	9b01      	ldr	r3, [sp, #4]
 8017b4c:	2000      	movs	r0, #0
 8017b4e:	495e      	ldr	r1, [pc, #376]	; (8017cc8 <__ieee754_pow+0x26c>)
 8017b50:	f7e9 ff04 	bl	800195c <__aeabi_ddiv>
 8017b54:	9000      	str	r0, [sp, #0]
 8017b56:	9101      	str	r1, [sp, #4]
 8017b58:	9b08      	ldr	r3, [sp, #32]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	da55      	bge.n	8017c0a <__ieee754_pow+0x1ae>
 8017b5e:	4b56      	ldr	r3, [pc, #344]	; (8017cb8 <__ieee754_pow+0x25c>)
 8017b60:	18e4      	adds	r4, r4, r3
 8017b62:	9b06      	ldr	r3, [sp, #24]
 8017b64:	431c      	orrs	r4, r3
 8017b66:	d000      	beq.n	8017b6a <__ieee754_pow+0x10e>
 8017b68:	e06c      	b.n	8017c44 <__ieee754_pow+0x1e8>
 8017b6a:	9a00      	ldr	r2, [sp, #0]
 8017b6c:	9b01      	ldr	r3, [sp, #4]
 8017b6e:	0010      	movs	r0, r2
 8017b70:	0019      	movs	r1, r3
 8017b72:	f7ea fd61 	bl	8002638 <__aeabi_dsub>
 8017b76:	0002      	movs	r2, r0
 8017b78:	000b      	movs	r3, r1
 8017b7a:	e01c      	b.n	8017bb6 <__ieee754_pow+0x15a>
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d1cf      	bne.n	8017b20 <__ieee754_pow+0xc4>
 8017b80:	3314      	adds	r3, #20
 8017b82:	1a9a      	subs	r2, r3, r2
 8017b84:	0033      	movs	r3, r6
 8017b86:	4113      	asrs	r3, r2
 8017b88:	0019      	movs	r1, r3
 8017b8a:	4091      	lsls	r1, r2
 8017b8c:	42b1      	cmp	r1, r6
 8017b8e:	d104      	bne.n	8017b9a <__ieee754_pow+0x13e>
 8017b90:	2201      	movs	r2, #1
 8017b92:	4013      	ands	r3, r2
 8017b94:	1892      	adds	r2, r2, r2
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	9306      	str	r3, [sp, #24]
 8017b9a:	4b4b      	ldr	r3, [pc, #300]	; (8017cc8 <__ieee754_pow+0x26c>)
 8017b9c:	429e      	cmp	r6, r3
 8017b9e:	d138      	bne.n	8017c12 <__ieee754_pow+0x1b6>
 8017ba0:	0038      	movs	r0, r7
 8017ba2:	0029      	movs	r1, r5
 8017ba4:	9b04      	ldr	r3, [sp, #16]
 8017ba6:	9000      	str	r0, [sp, #0]
 8017ba8:	9101      	str	r1, [sp, #4]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	da2d      	bge.n	8017c0a <__ieee754_pow+0x1ae>
 8017bae:	003a      	movs	r2, r7
 8017bb0:	002b      	movs	r3, r5
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	4944      	ldr	r1, [pc, #272]	; (8017cc8 <__ieee754_pow+0x26c>)
 8017bb6:	f7e9 fed1 	bl	800195c <__aeabi_ddiv>
 8017bba:	e775      	b.n	8017aa8 <__ieee754_pow+0x4c>
 8017bbc:	2202      	movs	r2, #2
 8017bbe:	9206      	str	r2, [sp, #24]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d1ad      	bne.n	8017b20 <__ieee754_pow+0xc4>
 8017bc4:	4b3b      	ldr	r3, [pc, #236]	; (8017cb4 <__ieee754_pow+0x258>)
 8017bc6:	429e      	cmp	r6, r3
 8017bc8:	d1e7      	bne.n	8017b9a <__ieee754_pow+0x13e>
 8017bca:	4b3b      	ldr	r3, [pc, #236]	; (8017cb8 <__ieee754_pow+0x25c>)
 8017bcc:	18e3      	adds	r3, r4, r3
 8017bce:	431f      	orrs	r7, r3
 8017bd0:	d101      	bne.n	8017bd6 <__ieee754_pow+0x17a>
 8017bd2:	f000 fc15 	bl	8018400 <__ieee754_pow+0x9a4>
 8017bd6:	4b3a      	ldr	r3, [pc, #232]	; (8017cc0 <__ieee754_pow+0x264>)
 8017bd8:	429c      	cmp	r4, r3
 8017bda:	dd09      	ble.n	8017bf0 <__ieee754_pow+0x194>
 8017bdc:	9b04      	ldr	r3, [sp, #16]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	da01      	bge.n	8017be6 <__ieee754_pow+0x18a>
 8017be2:	f000 fc11 	bl	8018408 <__ieee754_pow+0x9ac>
 8017be6:	9b02      	ldr	r3, [sp, #8]
 8017be8:	9c03      	ldr	r4, [sp, #12]
 8017bea:	9300      	str	r3, [sp, #0]
 8017bec:	9401      	str	r4, [sp, #4]
 8017bee:	e00c      	b.n	8017c0a <__ieee754_pow+0x1ae>
 8017bf0:	9b04      	ldr	r3, [sp, #16]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	db01      	blt.n	8017bfa <__ieee754_pow+0x19e>
 8017bf6:	f000 fc07 	bl	8018408 <__ieee754_pow+0x9ac>
 8017bfa:	2280      	movs	r2, #128	; 0x80
 8017bfc:	0612      	lsls	r2, r2, #24
 8017bfe:	4694      	mov	ip, r2
 8017c00:	9b02      	ldr	r3, [sp, #8]
 8017c02:	9300      	str	r3, [sp, #0]
 8017c04:	9b03      	ldr	r3, [sp, #12]
 8017c06:	4463      	add	r3, ip
 8017c08:	9301      	str	r3, [sp, #4]
 8017c0a:	9800      	ldr	r0, [sp, #0]
 8017c0c:	9901      	ldr	r1, [sp, #4]
 8017c0e:	b015      	add	sp, #84	; 0x54
 8017c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c12:	2380      	movs	r3, #128	; 0x80
 8017c14:	9a04      	ldr	r2, [sp, #16]
 8017c16:	05db      	lsls	r3, r3, #23
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d106      	bne.n	8017c2a <__ieee754_pow+0x1ce>
 8017c1c:	003a      	movs	r2, r7
 8017c1e:	002b      	movs	r3, r5
 8017c20:	0038      	movs	r0, r7
 8017c22:	0029      	movs	r1, r5
 8017c24:	f7ea fa9c 	bl	8002160 <__aeabi_dmul>
 8017c28:	e73e      	b.n	8017aa8 <__ieee754_pow+0x4c>
 8017c2a:	4b28      	ldr	r3, [pc, #160]	; (8017ccc <__ieee754_pow+0x270>)
 8017c2c:	9a04      	ldr	r2, [sp, #16]
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	d000      	beq.n	8017c34 <__ieee754_pow+0x1d8>
 8017c32:	e775      	b.n	8017b20 <__ieee754_pow+0xc4>
 8017c34:	2d00      	cmp	r5, #0
 8017c36:	da00      	bge.n	8017c3a <__ieee754_pow+0x1de>
 8017c38:	e772      	b.n	8017b20 <__ieee754_pow+0xc4>
 8017c3a:	0038      	movs	r0, r7
 8017c3c:	0029      	movs	r1, r5
 8017c3e:	f000 fc17 	bl	8018470 <__ieee754_sqrt>
 8017c42:	e731      	b.n	8017aa8 <__ieee754_pow+0x4c>
 8017c44:	9b06      	ldr	r3, [sp, #24]
 8017c46:	2b01      	cmp	r3, #1
 8017c48:	d1df      	bne.n	8017c0a <__ieee754_pow+0x1ae>
 8017c4a:	9800      	ldr	r0, [sp, #0]
 8017c4c:	2180      	movs	r1, #128	; 0x80
 8017c4e:	0002      	movs	r2, r0
 8017c50:	9801      	ldr	r0, [sp, #4]
 8017c52:	0609      	lsls	r1, r1, #24
 8017c54:	1843      	adds	r3, r0, r1
 8017c56:	9200      	str	r2, [sp, #0]
 8017c58:	9301      	str	r3, [sp, #4]
 8017c5a:	e7d6      	b.n	8017c0a <__ieee754_pow+0x1ae>
 8017c5c:	0feb      	lsrs	r3, r5, #31
 8017c5e:	3b01      	subs	r3, #1
 8017c60:	930e      	str	r3, [sp, #56]	; 0x38
 8017c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017c64:	9b06      	ldr	r3, [sp, #24]
 8017c66:	4313      	orrs	r3, r2
 8017c68:	d104      	bne.n	8017c74 <__ieee754_pow+0x218>
 8017c6a:	003a      	movs	r2, r7
 8017c6c:	002b      	movs	r3, r5
 8017c6e:	0038      	movs	r0, r7
 8017c70:	0029      	movs	r1, r5
 8017c72:	e77e      	b.n	8017b72 <__ieee754_pow+0x116>
 8017c74:	4b16      	ldr	r3, [pc, #88]	; (8017cd0 <__ieee754_pow+0x274>)
 8017c76:	429e      	cmp	r6, r3
 8017c78:	dc00      	bgt.n	8017c7c <__ieee754_pow+0x220>
 8017c7a:	e0ef      	b.n	8017e5c <__ieee754_pow+0x400>
 8017c7c:	4b15      	ldr	r3, [pc, #84]	; (8017cd4 <__ieee754_pow+0x278>)
 8017c7e:	429e      	cmp	r6, r3
 8017c80:	dd09      	ble.n	8017c96 <__ieee754_pow+0x23a>
 8017c82:	4b0f      	ldr	r3, [pc, #60]	; (8017cc0 <__ieee754_pow+0x264>)
 8017c84:	429c      	cmp	r4, r3
 8017c86:	dc0c      	bgt.n	8017ca2 <__ieee754_pow+0x246>
 8017c88:	9b04      	ldr	r3, [sp, #16]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	da0c      	bge.n	8017ca8 <__ieee754_pow+0x24c>
 8017c8e:	2000      	movs	r0, #0
 8017c90:	f000 fcce 	bl	8018630 <__math_oflow>
 8017c94:	e708      	b.n	8017aa8 <__ieee754_pow+0x4c>
 8017c96:	4b10      	ldr	r3, [pc, #64]	; (8017cd8 <__ieee754_pow+0x27c>)
 8017c98:	429c      	cmp	r4, r3
 8017c9a:	ddf5      	ble.n	8017c88 <__ieee754_pow+0x22c>
 8017c9c:	4b0a      	ldr	r3, [pc, #40]	; (8017cc8 <__ieee754_pow+0x26c>)
 8017c9e:	429c      	cmp	r4, r3
 8017ca0:	dd1c      	ble.n	8017cdc <__ieee754_pow+0x280>
 8017ca2:	9b04      	ldr	r3, [sp, #16]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	dcf2      	bgt.n	8017c8e <__ieee754_pow+0x232>
 8017ca8:	2000      	movs	r0, #0
 8017caa:	f000 fcba 	bl	8018622 <__math_uflow>
 8017cae:	e6fb      	b.n	8017aa8 <__ieee754_pow+0x4c>
 8017cb0:	fff00000 	.word	0xfff00000
 8017cb4:	7ff00000 	.word	0x7ff00000
 8017cb8:	c0100000 	.word	0xc0100000
 8017cbc:	433fffff 	.word	0x433fffff
 8017cc0:	3fefffff 	.word	0x3fefffff
 8017cc4:	fffffc01 	.word	0xfffffc01
 8017cc8:	3ff00000 	.word	0x3ff00000
 8017ccc:	3fe00000 	.word	0x3fe00000
 8017cd0:	41e00000 	.word	0x41e00000
 8017cd4:	43f00000 	.word	0x43f00000
 8017cd8:	3feffffe 	.word	0x3feffffe
 8017cdc:	2200      	movs	r2, #0
 8017cde:	9800      	ldr	r0, [sp, #0]
 8017ce0:	9901      	ldr	r1, [sp, #4]
 8017ce2:	4b52      	ldr	r3, [pc, #328]	; (8017e2c <__ieee754_pow+0x3d0>)
 8017ce4:	f7ea fca8 	bl	8002638 <__aeabi_dsub>
 8017ce8:	22c0      	movs	r2, #192	; 0xc0
 8017cea:	4b51      	ldr	r3, [pc, #324]	; (8017e30 <__ieee754_pow+0x3d4>)
 8017cec:	05d2      	lsls	r2, r2, #23
 8017cee:	0004      	movs	r4, r0
 8017cf0:	000d      	movs	r5, r1
 8017cf2:	f7ea fa35 	bl	8002160 <__aeabi_dmul>
 8017cf6:	4a4f      	ldr	r2, [pc, #316]	; (8017e34 <__ieee754_pow+0x3d8>)
 8017cf8:	9000      	str	r0, [sp, #0]
 8017cfa:	9101      	str	r1, [sp, #4]
 8017cfc:	4b4e      	ldr	r3, [pc, #312]	; (8017e38 <__ieee754_pow+0x3dc>)
 8017cfe:	0020      	movs	r0, r4
 8017d00:	0029      	movs	r1, r5
 8017d02:	f7ea fa2d 	bl	8002160 <__aeabi_dmul>
 8017d06:	2200      	movs	r2, #0
 8017d08:	9004      	str	r0, [sp, #16]
 8017d0a:	9105      	str	r1, [sp, #20]
 8017d0c:	4b4b      	ldr	r3, [pc, #300]	; (8017e3c <__ieee754_pow+0x3e0>)
 8017d0e:	0020      	movs	r0, r4
 8017d10:	0029      	movs	r1, r5
 8017d12:	f7ea fa25 	bl	8002160 <__aeabi_dmul>
 8017d16:	0002      	movs	r2, r0
 8017d18:	000b      	movs	r3, r1
 8017d1a:	4849      	ldr	r0, [pc, #292]	; (8017e40 <__ieee754_pow+0x3e4>)
 8017d1c:	4949      	ldr	r1, [pc, #292]	; (8017e44 <__ieee754_pow+0x3e8>)
 8017d1e:	f7ea fc8b 	bl	8002638 <__aeabi_dsub>
 8017d22:	0022      	movs	r2, r4
 8017d24:	002b      	movs	r3, r5
 8017d26:	f7ea fa1b 	bl	8002160 <__aeabi_dmul>
 8017d2a:	0002      	movs	r2, r0
 8017d2c:	000b      	movs	r3, r1
 8017d2e:	2000      	movs	r0, #0
 8017d30:	4945      	ldr	r1, [pc, #276]	; (8017e48 <__ieee754_pow+0x3ec>)
 8017d32:	f7ea fc81 	bl	8002638 <__aeabi_dsub>
 8017d36:	0022      	movs	r2, r4
 8017d38:	0006      	movs	r6, r0
 8017d3a:	000f      	movs	r7, r1
 8017d3c:	002b      	movs	r3, r5
 8017d3e:	0020      	movs	r0, r4
 8017d40:	0029      	movs	r1, r5
 8017d42:	f7ea fa0d 	bl	8002160 <__aeabi_dmul>
 8017d46:	0002      	movs	r2, r0
 8017d48:	000b      	movs	r3, r1
 8017d4a:	0030      	movs	r0, r6
 8017d4c:	0039      	movs	r1, r7
 8017d4e:	f7ea fa07 	bl	8002160 <__aeabi_dmul>
 8017d52:	4a3e      	ldr	r2, [pc, #248]	; (8017e4c <__ieee754_pow+0x3f0>)
 8017d54:	4b36      	ldr	r3, [pc, #216]	; (8017e30 <__ieee754_pow+0x3d4>)
 8017d56:	f7ea fa03 	bl	8002160 <__aeabi_dmul>
 8017d5a:	0002      	movs	r2, r0
 8017d5c:	000b      	movs	r3, r1
 8017d5e:	9804      	ldr	r0, [sp, #16]
 8017d60:	9905      	ldr	r1, [sp, #20]
 8017d62:	f7ea fc69 	bl	8002638 <__aeabi_dsub>
 8017d66:	0002      	movs	r2, r0
 8017d68:	000b      	movs	r3, r1
 8017d6a:	0004      	movs	r4, r0
 8017d6c:	000d      	movs	r5, r1
 8017d6e:	9800      	ldr	r0, [sp, #0]
 8017d70:	9901      	ldr	r1, [sp, #4]
 8017d72:	f7e9 fab7 	bl	80012e4 <__aeabi_dadd>
 8017d76:	9a00      	ldr	r2, [sp, #0]
 8017d78:	9b01      	ldr	r3, [sp, #4]
 8017d7a:	2000      	movs	r0, #0
 8017d7c:	000f      	movs	r7, r1
 8017d7e:	0006      	movs	r6, r0
 8017d80:	f7ea fc5a 	bl	8002638 <__aeabi_dsub>
 8017d84:	0002      	movs	r2, r0
 8017d86:	000b      	movs	r3, r1
 8017d88:	0020      	movs	r0, r4
 8017d8a:	0029      	movs	r1, r5
 8017d8c:	f7ea fc54 	bl	8002638 <__aeabi_dsub>
 8017d90:	9b06      	ldr	r3, [sp, #24]
 8017d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d94:	3b01      	subs	r3, #1
 8017d96:	9004      	str	r0, [sp, #16]
 8017d98:	9105      	str	r1, [sp, #20]
 8017d9a:	4313      	orrs	r3, r2
 8017d9c:	d000      	beq.n	8017da0 <__ieee754_pow+0x344>
 8017d9e:	e1db      	b.n	8018158 <__ieee754_pow+0x6fc>
 8017da0:	2300      	movs	r3, #0
 8017da2:	4c2b      	ldr	r4, [pc, #172]	; (8017e50 <__ieee754_pow+0x3f4>)
 8017da4:	9300      	str	r3, [sp, #0]
 8017da6:	9401      	str	r4, [sp, #4]
 8017da8:	9c02      	ldr	r4, [sp, #8]
 8017daa:	9d03      	ldr	r5, [sp, #12]
 8017dac:	9802      	ldr	r0, [sp, #8]
 8017dae:	9903      	ldr	r1, [sp, #12]
 8017db0:	2400      	movs	r4, #0
 8017db2:	002b      	movs	r3, r5
 8017db4:	0022      	movs	r2, r4
 8017db6:	f7ea fc3f 	bl	8002638 <__aeabi_dsub>
 8017dba:	0032      	movs	r2, r6
 8017dbc:	003b      	movs	r3, r7
 8017dbe:	f7ea f9cf 	bl	8002160 <__aeabi_dmul>
 8017dc2:	9a02      	ldr	r2, [sp, #8]
 8017dc4:	9b03      	ldr	r3, [sp, #12]
 8017dc6:	9006      	str	r0, [sp, #24]
 8017dc8:	9107      	str	r1, [sp, #28]
 8017dca:	9804      	ldr	r0, [sp, #16]
 8017dcc:	9905      	ldr	r1, [sp, #20]
 8017dce:	f7ea f9c7 	bl	8002160 <__aeabi_dmul>
 8017dd2:	0002      	movs	r2, r0
 8017dd4:	000b      	movs	r3, r1
 8017dd6:	9806      	ldr	r0, [sp, #24]
 8017dd8:	9907      	ldr	r1, [sp, #28]
 8017dda:	f7e9 fa83 	bl	80012e4 <__aeabi_dadd>
 8017dde:	0022      	movs	r2, r4
 8017de0:	002b      	movs	r3, r5
 8017de2:	9004      	str	r0, [sp, #16]
 8017de4:	9105      	str	r1, [sp, #20]
 8017de6:	0030      	movs	r0, r6
 8017de8:	0039      	movs	r1, r7
 8017dea:	f7ea f9b9 	bl	8002160 <__aeabi_dmul>
 8017dee:	0006      	movs	r6, r0
 8017df0:	000f      	movs	r7, r1
 8017df2:	000b      	movs	r3, r1
 8017df4:	0002      	movs	r2, r0
 8017df6:	9804      	ldr	r0, [sp, #16]
 8017df8:	9905      	ldr	r1, [sp, #20]
 8017dfa:	9606      	str	r6, [sp, #24]
 8017dfc:	9707      	str	r7, [sp, #28]
 8017dfe:	f7e9 fa71 	bl	80012e4 <__aeabi_dadd>
 8017e02:	4b14      	ldr	r3, [pc, #80]	; (8017e54 <__ieee754_pow+0x3f8>)
 8017e04:	0005      	movs	r5, r0
 8017e06:	000c      	movs	r4, r1
 8017e08:	9108      	str	r1, [sp, #32]
 8017e0a:	4299      	cmp	r1, r3
 8017e0c:	dc00      	bgt.n	8017e10 <__ieee754_pow+0x3b4>
 8017e0e:	e2d6      	b.n	80183be <__ieee754_pow+0x962>
 8017e10:	4b11      	ldr	r3, [pc, #68]	; (8017e58 <__ieee754_pow+0x3fc>)
 8017e12:	18cb      	adds	r3, r1, r3
 8017e14:	4303      	orrs	r3, r0
 8017e16:	d100      	bne.n	8017e1a <__ieee754_pow+0x3be>
 8017e18:	e1d8      	b.n	80181cc <__ieee754_pow+0x770>
 8017e1a:	9800      	ldr	r0, [sp, #0]
 8017e1c:	9901      	ldr	r1, [sp, #4]
 8017e1e:	2300      	movs	r3, #0
 8017e20:	2200      	movs	r2, #0
 8017e22:	f7e8 fb1f 	bl	8000464 <__aeabi_dcmplt>
 8017e26:	1e43      	subs	r3, r0, #1
 8017e28:	4198      	sbcs	r0, r3
 8017e2a:	e731      	b.n	8017c90 <__ieee754_pow+0x234>
 8017e2c:	3ff00000 	.word	0x3ff00000
 8017e30:	3ff71547 	.word	0x3ff71547
 8017e34:	f85ddf44 	.word	0xf85ddf44
 8017e38:	3e54ae0b 	.word	0x3e54ae0b
 8017e3c:	3fd00000 	.word	0x3fd00000
 8017e40:	55555555 	.word	0x55555555
 8017e44:	3fd55555 	.word	0x3fd55555
 8017e48:	3fe00000 	.word	0x3fe00000
 8017e4c:	652b82fe 	.word	0x652b82fe
 8017e50:	bff00000 	.word	0xbff00000
 8017e54:	408fffff 	.word	0x408fffff
 8017e58:	bf700000 	.word	0xbf700000
 8017e5c:	4bc0      	ldr	r3, [pc, #768]	; (8018160 <__ieee754_pow+0x704>)
 8017e5e:	2200      	movs	r2, #0
 8017e60:	422b      	tst	r3, r5
 8017e62:	d10a      	bne.n	8017e7a <__ieee754_pow+0x41e>
 8017e64:	9800      	ldr	r0, [sp, #0]
 8017e66:	9901      	ldr	r1, [sp, #4]
 8017e68:	2200      	movs	r2, #0
 8017e6a:	4bbe      	ldr	r3, [pc, #760]	; (8018164 <__ieee754_pow+0x708>)
 8017e6c:	f7ea f978 	bl	8002160 <__aeabi_dmul>
 8017e70:	2235      	movs	r2, #53	; 0x35
 8017e72:	9000      	str	r0, [sp, #0]
 8017e74:	9101      	str	r1, [sp, #4]
 8017e76:	9c01      	ldr	r4, [sp, #4]
 8017e78:	4252      	negs	r2, r2
 8017e7a:	49bb      	ldr	r1, [pc, #748]	; (8018168 <__ieee754_pow+0x70c>)
 8017e7c:	1523      	asrs	r3, r4, #20
 8017e7e:	185b      	adds	r3, r3, r1
 8017e80:	189b      	adds	r3, r3, r2
 8017e82:	0324      	lsls	r4, r4, #12
 8017e84:	4db9      	ldr	r5, [pc, #740]	; (801816c <__ieee754_pow+0x710>)
 8017e86:	930d      	str	r3, [sp, #52]	; 0x34
 8017e88:	4bb9      	ldr	r3, [pc, #740]	; (8018170 <__ieee754_pow+0x714>)
 8017e8a:	0b22      	lsrs	r2, r4, #12
 8017e8c:	4315      	orrs	r5, r2
 8017e8e:	2400      	movs	r4, #0
 8017e90:	429a      	cmp	r2, r3
 8017e92:	dd09      	ble.n	8017ea8 <__ieee754_pow+0x44c>
 8017e94:	4bb7      	ldr	r3, [pc, #732]	; (8018174 <__ieee754_pow+0x718>)
 8017e96:	3401      	adds	r4, #1
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	dd05      	ble.n	8017ea8 <__ieee754_pow+0x44c>
 8017e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e9e:	191b      	adds	r3, r3, r4
 8017ea0:	2400      	movs	r4, #0
 8017ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8017ea4:	4bb4      	ldr	r3, [pc, #720]	; (8018178 <__ieee754_pow+0x71c>)
 8017ea6:	18ed      	adds	r5, r5, r3
 8017ea8:	00e3      	lsls	r3, r4, #3
 8017eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8017eac:	4bb3      	ldr	r3, [pc, #716]	; (801817c <__ieee754_pow+0x720>)
 8017eae:	00e2      	lsls	r2, r4, #3
 8017eb0:	189b      	adds	r3, r3, r2
 8017eb2:	9800      	ldr	r0, [sp, #0]
 8017eb4:	9901      	ldr	r1, [sp, #4]
 8017eb6:	681a      	ldr	r2, [r3, #0]
 8017eb8:	685b      	ldr	r3, [r3, #4]
 8017eba:	0029      	movs	r1, r5
 8017ebc:	0006      	movs	r6, r0
 8017ebe:	920a      	str	r2, [sp, #40]	; 0x28
 8017ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ec2:	f7ea fbb9 	bl	8002638 <__aeabi_dsub>
 8017ec6:	0032      	movs	r2, r6
 8017ec8:	002b      	movs	r3, r5
 8017eca:	9010      	str	r0, [sp, #64]	; 0x40
 8017ecc:	9111      	str	r1, [sp, #68]	; 0x44
 8017ece:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ed2:	f7e9 fa07 	bl	80012e4 <__aeabi_dadd>
 8017ed6:	0002      	movs	r2, r0
 8017ed8:	000b      	movs	r3, r1
 8017eda:	2000      	movs	r0, #0
 8017edc:	49a3      	ldr	r1, [pc, #652]	; (801816c <__ieee754_pow+0x710>)
 8017ede:	f7e9 fd3d 	bl	800195c <__aeabi_ddiv>
 8017ee2:	0002      	movs	r2, r0
 8017ee4:	000b      	movs	r3, r1
 8017ee6:	9012      	str	r0, [sp, #72]	; 0x48
 8017ee8:	9113      	str	r1, [sp, #76]	; 0x4c
 8017eea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017eec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017eee:	f7ea f937 	bl	8002160 <__aeabi_dmul>
 8017ef2:	9008      	str	r0, [sp, #32]
 8017ef4:	9109      	str	r1, [sp, #36]	; 0x24
 8017ef6:	9a08      	ldr	r2, [sp, #32]
 8017ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017efa:	2180      	movs	r1, #128	; 0x80
 8017efc:	9204      	str	r2, [sp, #16]
 8017efe:	9305      	str	r3, [sp, #20]
 8017f00:	2300      	movs	r3, #0
 8017f02:	002f      	movs	r7, r5
 8017f04:	0589      	lsls	r1, r1, #22
 8017f06:	106d      	asrs	r5, r5, #1
 8017f08:	430d      	orrs	r5, r1
 8017f0a:	2180      	movs	r1, #128	; 0x80
 8017f0c:	9304      	str	r3, [sp, #16]
 8017f0e:	9a04      	ldr	r2, [sp, #16]
 8017f10:	9b05      	ldr	r3, [sp, #20]
 8017f12:	9200      	str	r2, [sp, #0]
 8017f14:	9301      	str	r3, [sp, #4]
 8017f16:	2200      	movs	r2, #0
 8017f18:	0309      	lsls	r1, r1, #12
 8017f1a:	186d      	adds	r5, r5, r1
 8017f1c:	04a1      	lsls	r1, r4, #18
 8017f1e:	186b      	adds	r3, r5, r1
 8017f20:	9800      	ldr	r0, [sp, #0]
 8017f22:	9901      	ldr	r1, [sp, #4]
 8017f24:	0014      	movs	r4, r2
 8017f26:	001d      	movs	r5, r3
 8017f28:	f7ea f91a 	bl	8002160 <__aeabi_dmul>
 8017f2c:	0002      	movs	r2, r0
 8017f2e:	000b      	movs	r3, r1
 8017f30:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017f32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017f34:	f7ea fb80 	bl	8002638 <__aeabi_dsub>
 8017f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f3c:	9010      	str	r0, [sp, #64]	; 0x40
 8017f3e:	9111      	str	r1, [sp, #68]	; 0x44
 8017f40:	0020      	movs	r0, r4
 8017f42:	0029      	movs	r1, r5
 8017f44:	f7ea fb78 	bl	8002638 <__aeabi_dsub>
 8017f48:	0002      	movs	r2, r0
 8017f4a:	000b      	movs	r3, r1
 8017f4c:	0030      	movs	r0, r6
 8017f4e:	0039      	movs	r1, r7
 8017f50:	f7ea fb72 	bl	8002638 <__aeabi_dsub>
 8017f54:	9a00      	ldr	r2, [sp, #0]
 8017f56:	9b01      	ldr	r3, [sp, #4]
 8017f58:	f7ea f902 	bl	8002160 <__aeabi_dmul>
 8017f5c:	0002      	movs	r2, r0
 8017f5e:	000b      	movs	r3, r1
 8017f60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017f62:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017f64:	f7ea fb68 	bl	8002638 <__aeabi_dsub>
 8017f68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017f6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f6c:	f7ea f8f8 	bl	8002160 <__aeabi_dmul>
 8017f70:	9a08      	ldr	r2, [sp, #32]
 8017f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f74:	900a      	str	r0, [sp, #40]	; 0x28
 8017f76:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f78:	0010      	movs	r0, r2
 8017f7a:	0019      	movs	r1, r3
 8017f7c:	f7ea f8f0 	bl	8002160 <__aeabi_dmul>
 8017f80:	0006      	movs	r6, r0
 8017f82:	000f      	movs	r7, r1
 8017f84:	4a7e      	ldr	r2, [pc, #504]	; (8018180 <__ieee754_pow+0x724>)
 8017f86:	4b7f      	ldr	r3, [pc, #508]	; (8018184 <__ieee754_pow+0x728>)
 8017f88:	f7ea f8ea 	bl	8002160 <__aeabi_dmul>
 8017f8c:	4a7e      	ldr	r2, [pc, #504]	; (8018188 <__ieee754_pow+0x72c>)
 8017f8e:	4b7f      	ldr	r3, [pc, #508]	; (801818c <__ieee754_pow+0x730>)
 8017f90:	f7e9 f9a8 	bl	80012e4 <__aeabi_dadd>
 8017f94:	0032      	movs	r2, r6
 8017f96:	003b      	movs	r3, r7
 8017f98:	f7ea f8e2 	bl	8002160 <__aeabi_dmul>
 8017f9c:	4a7c      	ldr	r2, [pc, #496]	; (8018190 <__ieee754_pow+0x734>)
 8017f9e:	4b7d      	ldr	r3, [pc, #500]	; (8018194 <__ieee754_pow+0x738>)
 8017fa0:	f7e9 f9a0 	bl	80012e4 <__aeabi_dadd>
 8017fa4:	0032      	movs	r2, r6
 8017fa6:	003b      	movs	r3, r7
 8017fa8:	f7ea f8da 	bl	8002160 <__aeabi_dmul>
 8017fac:	4a7a      	ldr	r2, [pc, #488]	; (8018198 <__ieee754_pow+0x73c>)
 8017fae:	4b7b      	ldr	r3, [pc, #492]	; (801819c <__ieee754_pow+0x740>)
 8017fb0:	f7e9 f998 	bl	80012e4 <__aeabi_dadd>
 8017fb4:	0032      	movs	r2, r6
 8017fb6:	003b      	movs	r3, r7
 8017fb8:	f7ea f8d2 	bl	8002160 <__aeabi_dmul>
 8017fbc:	4a78      	ldr	r2, [pc, #480]	; (80181a0 <__ieee754_pow+0x744>)
 8017fbe:	4b79      	ldr	r3, [pc, #484]	; (80181a4 <__ieee754_pow+0x748>)
 8017fc0:	f7e9 f990 	bl	80012e4 <__aeabi_dadd>
 8017fc4:	0032      	movs	r2, r6
 8017fc6:	003b      	movs	r3, r7
 8017fc8:	f7ea f8ca 	bl	8002160 <__aeabi_dmul>
 8017fcc:	4a76      	ldr	r2, [pc, #472]	; (80181a8 <__ieee754_pow+0x74c>)
 8017fce:	4b77      	ldr	r3, [pc, #476]	; (80181ac <__ieee754_pow+0x750>)
 8017fd0:	f7e9 f988 	bl	80012e4 <__aeabi_dadd>
 8017fd4:	0032      	movs	r2, r6
 8017fd6:	0004      	movs	r4, r0
 8017fd8:	000d      	movs	r5, r1
 8017fda:	003b      	movs	r3, r7
 8017fdc:	0030      	movs	r0, r6
 8017fde:	0039      	movs	r1, r7
 8017fe0:	f7ea f8be 	bl	8002160 <__aeabi_dmul>
 8017fe4:	0002      	movs	r2, r0
 8017fe6:	000b      	movs	r3, r1
 8017fe8:	0020      	movs	r0, r4
 8017fea:	0029      	movs	r1, r5
 8017fec:	f7ea f8b8 	bl	8002160 <__aeabi_dmul>
 8017ff0:	9a00      	ldr	r2, [sp, #0]
 8017ff2:	9b01      	ldr	r3, [sp, #4]
 8017ff4:	0004      	movs	r4, r0
 8017ff6:	000d      	movs	r5, r1
 8017ff8:	9808      	ldr	r0, [sp, #32]
 8017ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ffc:	f7e9 f972 	bl	80012e4 <__aeabi_dadd>
 8018000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018004:	f7ea f8ac 	bl	8002160 <__aeabi_dmul>
 8018008:	0022      	movs	r2, r4
 801800a:	002b      	movs	r3, r5
 801800c:	f7e9 f96a 	bl	80012e4 <__aeabi_dadd>
 8018010:	9a00      	ldr	r2, [sp, #0]
 8018012:	9b01      	ldr	r3, [sp, #4]
 8018014:	9010      	str	r0, [sp, #64]	; 0x40
 8018016:	9111      	str	r1, [sp, #68]	; 0x44
 8018018:	0010      	movs	r0, r2
 801801a:	0019      	movs	r1, r3
 801801c:	f7ea f8a0 	bl	8002160 <__aeabi_dmul>
 8018020:	2200      	movs	r2, #0
 8018022:	4b63      	ldr	r3, [pc, #396]	; (80181b0 <__ieee754_pow+0x754>)
 8018024:	0004      	movs	r4, r0
 8018026:	000d      	movs	r5, r1
 8018028:	f7e9 f95c 	bl	80012e4 <__aeabi_dadd>
 801802c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801802e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018030:	f7e9 f958 	bl	80012e4 <__aeabi_dadd>
 8018034:	2600      	movs	r6, #0
 8018036:	000f      	movs	r7, r1
 8018038:	0032      	movs	r2, r6
 801803a:	000b      	movs	r3, r1
 801803c:	9800      	ldr	r0, [sp, #0]
 801803e:	9901      	ldr	r1, [sp, #4]
 8018040:	f7ea f88e 	bl	8002160 <__aeabi_dmul>
 8018044:	2200      	movs	r2, #0
 8018046:	9000      	str	r0, [sp, #0]
 8018048:	9101      	str	r1, [sp, #4]
 801804a:	4b59      	ldr	r3, [pc, #356]	; (80181b0 <__ieee754_pow+0x754>)
 801804c:	0030      	movs	r0, r6
 801804e:	0039      	movs	r1, r7
 8018050:	f7ea faf2 	bl	8002638 <__aeabi_dsub>
 8018054:	0022      	movs	r2, r4
 8018056:	002b      	movs	r3, r5
 8018058:	f7ea faee 	bl	8002638 <__aeabi_dsub>
 801805c:	0002      	movs	r2, r0
 801805e:	000b      	movs	r3, r1
 8018060:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018062:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018064:	f7ea fae8 	bl	8002638 <__aeabi_dsub>
 8018068:	9a08      	ldr	r2, [sp, #32]
 801806a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801806c:	f7ea f878 	bl	8002160 <__aeabi_dmul>
 8018070:	0032      	movs	r2, r6
 8018072:	0004      	movs	r4, r0
 8018074:	000d      	movs	r5, r1
 8018076:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801807a:	003b      	movs	r3, r7
 801807c:	f7ea f870 	bl	8002160 <__aeabi_dmul>
 8018080:	0002      	movs	r2, r0
 8018082:	000b      	movs	r3, r1
 8018084:	0020      	movs	r0, r4
 8018086:	0029      	movs	r1, r5
 8018088:	f7e9 f92c 	bl	80012e4 <__aeabi_dadd>
 801808c:	0004      	movs	r4, r0
 801808e:	000d      	movs	r5, r1
 8018090:	0002      	movs	r2, r0
 8018092:	000b      	movs	r3, r1
 8018094:	9800      	ldr	r0, [sp, #0]
 8018096:	9901      	ldr	r1, [sp, #4]
 8018098:	f7e9 f924 	bl	80012e4 <__aeabi_dadd>
 801809c:	2600      	movs	r6, #0
 801809e:	22e0      	movs	r2, #224	; 0xe0
 80180a0:	4b44      	ldr	r3, [pc, #272]	; (80181b4 <__ieee754_pow+0x758>)
 80180a2:	0612      	lsls	r2, r2, #24
 80180a4:	0030      	movs	r0, r6
 80180a6:	000f      	movs	r7, r1
 80180a8:	f7ea f85a 	bl	8002160 <__aeabi_dmul>
 80180ac:	9008      	str	r0, [sp, #32]
 80180ae:	9109      	str	r1, [sp, #36]	; 0x24
 80180b0:	9a00      	ldr	r2, [sp, #0]
 80180b2:	9b01      	ldr	r3, [sp, #4]
 80180b4:	0039      	movs	r1, r7
 80180b6:	0030      	movs	r0, r6
 80180b8:	f7ea fabe 	bl	8002638 <__aeabi_dsub>
 80180bc:	0002      	movs	r2, r0
 80180be:	000b      	movs	r3, r1
 80180c0:	0020      	movs	r0, r4
 80180c2:	0029      	movs	r1, r5
 80180c4:	f7ea fab8 	bl	8002638 <__aeabi_dsub>
 80180c8:	4a3b      	ldr	r2, [pc, #236]	; (80181b8 <__ieee754_pow+0x75c>)
 80180ca:	4b3a      	ldr	r3, [pc, #232]	; (80181b4 <__ieee754_pow+0x758>)
 80180cc:	f7ea f848 	bl	8002160 <__aeabi_dmul>
 80180d0:	4a3a      	ldr	r2, [pc, #232]	; (80181bc <__ieee754_pow+0x760>)
 80180d2:	0004      	movs	r4, r0
 80180d4:	000d      	movs	r5, r1
 80180d6:	4b3a      	ldr	r3, [pc, #232]	; (80181c0 <__ieee754_pow+0x764>)
 80180d8:	0039      	movs	r1, r7
 80180da:	0030      	movs	r0, r6
 80180dc:	f7ea f840 	bl	8002160 <__aeabi_dmul>
 80180e0:	0002      	movs	r2, r0
 80180e2:	000b      	movs	r3, r1
 80180e4:	0020      	movs	r0, r4
 80180e6:	0029      	movs	r1, r5
 80180e8:	f7e9 f8fc 	bl	80012e4 <__aeabi_dadd>
 80180ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180ee:	4b35      	ldr	r3, [pc, #212]	; (80181c4 <__ieee754_pow+0x768>)
 80180f0:	189b      	adds	r3, r3, r2
 80180f2:	681a      	ldr	r2, [r3, #0]
 80180f4:	685b      	ldr	r3, [r3, #4]
 80180f6:	f7e9 f8f5 	bl	80012e4 <__aeabi_dadd>
 80180fa:	900a      	str	r0, [sp, #40]	; 0x28
 80180fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80180fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018100:	f7ea fe80 	bl	8002e04 <__aeabi_i2d>
 8018104:	0004      	movs	r4, r0
 8018106:	000d      	movs	r5, r1
 8018108:	9808      	ldr	r0, [sp, #32]
 801810a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801810c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801810e:	4b2e      	ldr	r3, [pc, #184]	; (80181c8 <__ieee754_pow+0x76c>)
 8018110:	189b      	adds	r3, r3, r2
 8018112:	681a      	ldr	r2, [r3, #0]
 8018114:	685b      	ldr	r3, [r3, #4]
 8018116:	9200      	str	r2, [sp, #0]
 8018118:	9301      	str	r3, [sp, #4]
 801811a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801811c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801811e:	f7e9 f8e1 	bl	80012e4 <__aeabi_dadd>
 8018122:	9a00      	ldr	r2, [sp, #0]
 8018124:	9b01      	ldr	r3, [sp, #4]
 8018126:	f7e9 f8dd 	bl	80012e4 <__aeabi_dadd>
 801812a:	0022      	movs	r2, r4
 801812c:	002b      	movs	r3, r5
 801812e:	f7e9 f8d9 	bl	80012e4 <__aeabi_dadd>
 8018132:	0022      	movs	r2, r4
 8018134:	002b      	movs	r3, r5
 8018136:	0030      	movs	r0, r6
 8018138:	000f      	movs	r7, r1
 801813a:	f7ea fa7d 	bl	8002638 <__aeabi_dsub>
 801813e:	9a00      	ldr	r2, [sp, #0]
 8018140:	9b01      	ldr	r3, [sp, #4]
 8018142:	f7ea fa79 	bl	8002638 <__aeabi_dsub>
 8018146:	9a08      	ldr	r2, [sp, #32]
 8018148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801814a:	f7ea fa75 	bl	8002638 <__aeabi_dsub>
 801814e:	0002      	movs	r2, r0
 8018150:	000b      	movs	r3, r1
 8018152:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018156:	e619      	b.n	8017d8c <__ieee754_pow+0x330>
 8018158:	2300      	movs	r3, #0
 801815a:	4c04      	ldr	r4, [pc, #16]	; (801816c <__ieee754_pow+0x710>)
 801815c:	e622      	b.n	8017da4 <__ieee754_pow+0x348>
 801815e:	46c0      	nop			; (mov r8, r8)
 8018160:	7ff00000 	.word	0x7ff00000
 8018164:	43400000 	.word	0x43400000
 8018168:	fffffc01 	.word	0xfffffc01
 801816c:	3ff00000 	.word	0x3ff00000
 8018170:	0003988e 	.word	0x0003988e
 8018174:	000bb679 	.word	0x000bb679
 8018178:	fff00000 	.word	0xfff00000
 801817c:	08019220 	.word	0x08019220
 8018180:	4a454eef 	.word	0x4a454eef
 8018184:	3fca7e28 	.word	0x3fca7e28
 8018188:	93c9db65 	.word	0x93c9db65
 801818c:	3fcd864a 	.word	0x3fcd864a
 8018190:	a91d4101 	.word	0xa91d4101
 8018194:	3fd17460 	.word	0x3fd17460
 8018198:	518f264d 	.word	0x518f264d
 801819c:	3fd55555 	.word	0x3fd55555
 80181a0:	db6fabff 	.word	0xdb6fabff
 80181a4:	3fdb6db6 	.word	0x3fdb6db6
 80181a8:	33333303 	.word	0x33333303
 80181ac:	3fe33333 	.word	0x3fe33333
 80181b0:	40080000 	.word	0x40080000
 80181b4:	3feec709 	.word	0x3feec709
 80181b8:	dc3a03fd 	.word	0xdc3a03fd
 80181bc:	145b01f5 	.word	0x145b01f5
 80181c0:	be3e2fe0 	.word	0xbe3e2fe0
 80181c4:	08019240 	.word	0x08019240
 80181c8:	08019230 	.word	0x08019230
 80181cc:	4a90      	ldr	r2, [pc, #576]	; (8018410 <__ieee754_pow+0x9b4>)
 80181ce:	4b91      	ldr	r3, [pc, #580]	; (8018414 <__ieee754_pow+0x9b8>)
 80181d0:	9804      	ldr	r0, [sp, #16]
 80181d2:	9905      	ldr	r1, [sp, #20]
 80181d4:	f7e9 f886 	bl	80012e4 <__aeabi_dadd>
 80181d8:	0032      	movs	r2, r6
 80181da:	9002      	str	r0, [sp, #8]
 80181dc:	9103      	str	r1, [sp, #12]
 80181de:	003b      	movs	r3, r7
 80181e0:	0028      	movs	r0, r5
 80181e2:	0021      	movs	r1, r4
 80181e4:	f7ea fa28 	bl	8002638 <__aeabi_dsub>
 80181e8:	0002      	movs	r2, r0
 80181ea:	000b      	movs	r3, r1
 80181ec:	9802      	ldr	r0, [sp, #8]
 80181ee:	9903      	ldr	r1, [sp, #12]
 80181f0:	f7e8 f94c 	bl	800048c <__aeabi_dcmpgt>
 80181f4:	2800      	cmp	r0, #0
 80181f6:	d000      	beq.n	80181fa <__ieee754_pow+0x79e>
 80181f8:	e60f      	b.n	8017e1a <__ieee754_pow+0x3be>
 80181fa:	2100      	movs	r1, #0
 80181fc:	4a86      	ldr	r2, [pc, #536]	; (8018418 <__ieee754_pow+0x9bc>)
 80181fe:	0063      	lsls	r3, r4, #1
 8018200:	085b      	lsrs	r3, r3, #1
 8018202:	9102      	str	r1, [sp, #8]
 8018204:	4293      	cmp	r3, r2
 8018206:	dd25      	ble.n	8018254 <__ieee754_pow+0x7f8>
 8018208:	4a84      	ldr	r2, [pc, #528]	; (801841c <__ieee754_pow+0x9c0>)
 801820a:	151b      	asrs	r3, r3, #20
 801820c:	189b      	adds	r3, r3, r2
 801820e:	2280      	movs	r2, #128	; 0x80
 8018210:	0352      	lsls	r2, r2, #13
 8018212:	4694      	mov	ip, r2
 8018214:	411a      	asrs	r2, r3
 8018216:	1914      	adds	r4, r2, r4
 8018218:	4b81      	ldr	r3, [pc, #516]	; (8018420 <__ieee754_pow+0x9c4>)
 801821a:	0060      	lsls	r0, r4, #1
 801821c:	4d81      	ldr	r5, [pc, #516]	; (8018424 <__ieee754_pow+0x9c8>)
 801821e:	0d40      	lsrs	r0, r0, #21
 8018220:	18c0      	adds	r0, r0, r3
 8018222:	4105      	asrs	r5, r0
 8018224:	0021      	movs	r1, r4
 8018226:	43a9      	bics	r1, r5
 8018228:	000b      	movs	r3, r1
 801822a:	4661      	mov	r1, ip
 801822c:	0324      	lsls	r4, r4, #12
 801822e:	0b24      	lsrs	r4, r4, #12
 8018230:	4321      	orrs	r1, r4
 8018232:	2414      	movs	r4, #20
 8018234:	1a20      	subs	r0, r4, r0
 8018236:	4101      	asrs	r1, r0
 8018238:	9102      	str	r1, [sp, #8]
 801823a:	9908      	ldr	r1, [sp, #32]
 801823c:	2200      	movs	r2, #0
 801823e:	2900      	cmp	r1, #0
 8018240:	da02      	bge.n	8018248 <__ieee754_pow+0x7ec>
 8018242:	9902      	ldr	r1, [sp, #8]
 8018244:	4249      	negs	r1, r1
 8018246:	9102      	str	r1, [sp, #8]
 8018248:	0030      	movs	r0, r6
 801824a:	0039      	movs	r1, r7
 801824c:	f7ea f9f4 	bl	8002638 <__aeabi_dsub>
 8018250:	9006      	str	r0, [sp, #24]
 8018252:	9107      	str	r1, [sp, #28]
 8018254:	9a04      	ldr	r2, [sp, #16]
 8018256:	9b05      	ldr	r3, [sp, #20]
 8018258:	9806      	ldr	r0, [sp, #24]
 801825a:	9907      	ldr	r1, [sp, #28]
 801825c:	2600      	movs	r6, #0
 801825e:	f7e9 f841 	bl	80012e4 <__aeabi_dadd>
 8018262:	2200      	movs	r2, #0
 8018264:	0030      	movs	r0, r6
 8018266:	4b70      	ldr	r3, [pc, #448]	; (8018428 <__ieee754_pow+0x9cc>)
 8018268:	000f      	movs	r7, r1
 801826a:	f7e9 ff79 	bl	8002160 <__aeabi_dmul>
 801826e:	9a06      	ldr	r2, [sp, #24]
 8018270:	9b07      	ldr	r3, [sp, #28]
 8018272:	9008      	str	r0, [sp, #32]
 8018274:	9109      	str	r1, [sp, #36]	; 0x24
 8018276:	0030      	movs	r0, r6
 8018278:	0039      	movs	r1, r7
 801827a:	f7ea f9dd 	bl	8002638 <__aeabi_dsub>
 801827e:	0002      	movs	r2, r0
 8018280:	000b      	movs	r3, r1
 8018282:	9804      	ldr	r0, [sp, #16]
 8018284:	9905      	ldr	r1, [sp, #20]
 8018286:	f7ea f9d7 	bl	8002638 <__aeabi_dsub>
 801828a:	4a68      	ldr	r2, [pc, #416]	; (801842c <__ieee754_pow+0x9d0>)
 801828c:	4b68      	ldr	r3, [pc, #416]	; (8018430 <__ieee754_pow+0x9d4>)
 801828e:	f7e9 ff67 	bl	8002160 <__aeabi_dmul>
 8018292:	4a68      	ldr	r2, [pc, #416]	; (8018434 <__ieee754_pow+0x9d8>)
 8018294:	0004      	movs	r4, r0
 8018296:	000d      	movs	r5, r1
 8018298:	0030      	movs	r0, r6
 801829a:	0039      	movs	r1, r7
 801829c:	4b66      	ldr	r3, [pc, #408]	; (8018438 <__ieee754_pow+0x9dc>)
 801829e:	f7e9 ff5f 	bl	8002160 <__aeabi_dmul>
 80182a2:	0002      	movs	r2, r0
 80182a4:	000b      	movs	r3, r1
 80182a6:	0020      	movs	r0, r4
 80182a8:	0029      	movs	r1, r5
 80182aa:	f7e9 f81b 	bl	80012e4 <__aeabi_dadd>
 80182ae:	0004      	movs	r4, r0
 80182b0:	000d      	movs	r5, r1
 80182b2:	0002      	movs	r2, r0
 80182b4:	000b      	movs	r3, r1
 80182b6:	9808      	ldr	r0, [sp, #32]
 80182b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182ba:	f7e9 f813 	bl	80012e4 <__aeabi_dadd>
 80182be:	9a08      	ldr	r2, [sp, #32]
 80182c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c2:	0006      	movs	r6, r0
 80182c4:	000f      	movs	r7, r1
 80182c6:	f7ea f9b7 	bl	8002638 <__aeabi_dsub>
 80182ca:	0002      	movs	r2, r0
 80182cc:	000b      	movs	r3, r1
 80182ce:	0020      	movs	r0, r4
 80182d0:	0029      	movs	r1, r5
 80182d2:	f7ea f9b1 	bl	8002638 <__aeabi_dsub>
 80182d6:	0032      	movs	r2, r6
 80182d8:	9004      	str	r0, [sp, #16]
 80182da:	9105      	str	r1, [sp, #20]
 80182dc:	003b      	movs	r3, r7
 80182de:	0030      	movs	r0, r6
 80182e0:	0039      	movs	r1, r7
 80182e2:	f7e9 ff3d 	bl	8002160 <__aeabi_dmul>
 80182e6:	0004      	movs	r4, r0
 80182e8:	000d      	movs	r5, r1
 80182ea:	4a54      	ldr	r2, [pc, #336]	; (801843c <__ieee754_pow+0x9e0>)
 80182ec:	4b54      	ldr	r3, [pc, #336]	; (8018440 <__ieee754_pow+0x9e4>)
 80182ee:	f7e9 ff37 	bl	8002160 <__aeabi_dmul>
 80182f2:	4a54      	ldr	r2, [pc, #336]	; (8018444 <__ieee754_pow+0x9e8>)
 80182f4:	4b54      	ldr	r3, [pc, #336]	; (8018448 <__ieee754_pow+0x9ec>)
 80182f6:	f7ea f99f 	bl	8002638 <__aeabi_dsub>
 80182fa:	0022      	movs	r2, r4
 80182fc:	002b      	movs	r3, r5
 80182fe:	f7e9 ff2f 	bl	8002160 <__aeabi_dmul>
 8018302:	4a52      	ldr	r2, [pc, #328]	; (801844c <__ieee754_pow+0x9f0>)
 8018304:	4b52      	ldr	r3, [pc, #328]	; (8018450 <__ieee754_pow+0x9f4>)
 8018306:	f7e8 ffed 	bl	80012e4 <__aeabi_dadd>
 801830a:	0022      	movs	r2, r4
 801830c:	002b      	movs	r3, r5
 801830e:	f7e9 ff27 	bl	8002160 <__aeabi_dmul>
 8018312:	4a50      	ldr	r2, [pc, #320]	; (8018454 <__ieee754_pow+0x9f8>)
 8018314:	4b50      	ldr	r3, [pc, #320]	; (8018458 <__ieee754_pow+0x9fc>)
 8018316:	f7ea f98f 	bl	8002638 <__aeabi_dsub>
 801831a:	0022      	movs	r2, r4
 801831c:	002b      	movs	r3, r5
 801831e:	f7e9 ff1f 	bl	8002160 <__aeabi_dmul>
 8018322:	4a4e      	ldr	r2, [pc, #312]	; (801845c <__ieee754_pow+0xa00>)
 8018324:	4b4e      	ldr	r3, [pc, #312]	; (8018460 <__ieee754_pow+0xa04>)
 8018326:	f7e8 ffdd 	bl	80012e4 <__aeabi_dadd>
 801832a:	0022      	movs	r2, r4
 801832c:	002b      	movs	r3, r5
 801832e:	f7e9 ff17 	bl	8002160 <__aeabi_dmul>
 8018332:	0002      	movs	r2, r0
 8018334:	000b      	movs	r3, r1
 8018336:	0030      	movs	r0, r6
 8018338:	0039      	movs	r1, r7
 801833a:	f7ea f97d 	bl	8002638 <__aeabi_dsub>
 801833e:	0004      	movs	r4, r0
 8018340:	000d      	movs	r5, r1
 8018342:	0002      	movs	r2, r0
 8018344:	000b      	movs	r3, r1
 8018346:	0030      	movs	r0, r6
 8018348:	0039      	movs	r1, r7
 801834a:	f7e9 ff09 	bl	8002160 <__aeabi_dmul>
 801834e:	2380      	movs	r3, #128	; 0x80
 8018350:	9006      	str	r0, [sp, #24]
 8018352:	9107      	str	r1, [sp, #28]
 8018354:	2200      	movs	r2, #0
 8018356:	0020      	movs	r0, r4
 8018358:	0029      	movs	r1, r5
 801835a:	05db      	lsls	r3, r3, #23
 801835c:	f7ea f96c 	bl	8002638 <__aeabi_dsub>
 8018360:	0002      	movs	r2, r0
 8018362:	000b      	movs	r3, r1
 8018364:	9806      	ldr	r0, [sp, #24]
 8018366:	9907      	ldr	r1, [sp, #28]
 8018368:	f7e9 faf8 	bl	800195c <__aeabi_ddiv>
 801836c:	9a04      	ldr	r2, [sp, #16]
 801836e:	9b05      	ldr	r3, [sp, #20]
 8018370:	0004      	movs	r4, r0
 8018372:	000d      	movs	r5, r1
 8018374:	0030      	movs	r0, r6
 8018376:	0039      	movs	r1, r7
 8018378:	f7e9 fef2 	bl	8002160 <__aeabi_dmul>
 801837c:	9a04      	ldr	r2, [sp, #16]
 801837e:	9b05      	ldr	r3, [sp, #20]
 8018380:	f7e8 ffb0 	bl	80012e4 <__aeabi_dadd>
 8018384:	0002      	movs	r2, r0
 8018386:	000b      	movs	r3, r1
 8018388:	0020      	movs	r0, r4
 801838a:	0029      	movs	r1, r5
 801838c:	f7ea f954 	bl	8002638 <__aeabi_dsub>
 8018390:	0032      	movs	r2, r6
 8018392:	003b      	movs	r3, r7
 8018394:	f7ea f950 	bl	8002638 <__aeabi_dsub>
 8018398:	0002      	movs	r2, r0
 801839a:	000b      	movs	r3, r1
 801839c:	2000      	movs	r0, #0
 801839e:	4931      	ldr	r1, [pc, #196]	; (8018464 <__ieee754_pow+0xa08>)
 80183a0:	f7ea f94a 	bl	8002638 <__aeabi_dsub>
 80183a4:	9b02      	ldr	r3, [sp, #8]
 80183a6:	051b      	lsls	r3, r3, #20
 80183a8:	185b      	adds	r3, r3, r1
 80183aa:	151a      	asrs	r2, r3, #20
 80183ac:	2a00      	cmp	r2, #0
 80183ae:	dc25      	bgt.n	80183fc <__ieee754_pow+0x9a0>
 80183b0:	9a02      	ldr	r2, [sp, #8]
 80183b2:	f000 f94f 	bl	8018654 <scalbn>
 80183b6:	9a00      	ldr	r2, [sp, #0]
 80183b8:	9b01      	ldr	r3, [sp, #4]
 80183ba:	f7ff fc33 	bl	8017c24 <__ieee754_pow+0x1c8>
 80183be:	4a2a      	ldr	r2, [pc, #168]	; (8018468 <__ieee754_pow+0xa0c>)
 80183c0:	004b      	lsls	r3, r1, #1
 80183c2:	085b      	lsrs	r3, r3, #1
 80183c4:	4293      	cmp	r3, r2
 80183c6:	dc00      	bgt.n	80183ca <__ieee754_pow+0x96e>
 80183c8:	e717      	b.n	80181fa <__ieee754_pow+0x79e>
 80183ca:	4b28      	ldr	r3, [pc, #160]	; (801846c <__ieee754_pow+0xa10>)
 80183cc:	18cb      	adds	r3, r1, r3
 80183ce:	4303      	orrs	r3, r0
 80183d0:	d008      	beq.n	80183e4 <__ieee754_pow+0x988>
 80183d2:	9800      	ldr	r0, [sp, #0]
 80183d4:	9901      	ldr	r1, [sp, #4]
 80183d6:	2300      	movs	r3, #0
 80183d8:	2200      	movs	r2, #0
 80183da:	f7e8 f843 	bl	8000464 <__aeabi_dcmplt>
 80183de:	1e43      	subs	r3, r0, #1
 80183e0:	4198      	sbcs	r0, r3
 80183e2:	e462      	b.n	8017caa <__ieee754_pow+0x24e>
 80183e4:	0032      	movs	r2, r6
 80183e6:	003b      	movs	r3, r7
 80183e8:	f7ea f926 	bl	8002638 <__aeabi_dsub>
 80183ec:	9a04      	ldr	r2, [sp, #16]
 80183ee:	9b05      	ldr	r3, [sp, #20]
 80183f0:	f7e8 f856 	bl	80004a0 <__aeabi_dcmpge>
 80183f4:	2800      	cmp	r0, #0
 80183f6:	d100      	bne.n	80183fa <__ieee754_pow+0x99e>
 80183f8:	e6ff      	b.n	80181fa <__ieee754_pow+0x79e>
 80183fa:	e7ea      	b.n	80183d2 <__ieee754_pow+0x976>
 80183fc:	0019      	movs	r1, r3
 80183fe:	e7da      	b.n	80183b6 <__ieee754_pow+0x95a>
 8018400:	2300      	movs	r3, #0
 8018402:	4c18      	ldr	r4, [pc, #96]	; (8018464 <__ieee754_pow+0xa08>)
 8018404:	f7ff fbf1 	bl	8017bea <__ieee754_pow+0x18e>
 8018408:	2300      	movs	r3, #0
 801840a:	2400      	movs	r4, #0
 801840c:	f7ff fbed 	bl	8017bea <__ieee754_pow+0x18e>
 8018410:	652b82fe 	.word	0x652b82fe
 8018414:	3c971547 	.word	0x3c971547
 8018418:	3fe00000 	.word	0x3fe00000
 801841c:	fffffc02 	.word	0xfffffc02
 8018420:	fffffc01 	.word	0xfffffc01
 8018424:	000fffff 	.word	0x000fffff
 8018428:	3fe62e43 	.word	0x3fe62e43
 801842c:	fefa39ef 	.word	0xfefa39ef
 8018430:	3fe62e42 	.word	0x3fe62e42
 8018434:	0ca86c39 	.word	0x0ca86c39
 8018438:	be205c61 	.word	0xbe205c61
 801843c:	72bea4d0 	.word	0x72bea4d0
 8018440:	3e663769 	.word	0x3e663769
 8018444:	c5d26bf1 	.word	0xc5d26bf1
 8018448:	3ebbbd41 	.word	0x3ebbbd41
 801844c:	af25de2c 	.word	0xaf25de2c
 8018450:	3f11566a 	.word	0x3f11566a
 8018454:	16bebd93 	.word	0x16bebd93
 8018458:	3f66c16c 	.word	0x3f66c16c
 801845c:	5555553e 	.word	0x5555553e
 8018460:	3fc55555 	.word	0x3fc55555
 8018464:	3ff00000 	.word	0x3ff00000
 8018468:	4090cbff 	.word	0x4090cbff
 801846c:	3f6f3400 	.word	0x3f6f3400

08018470 <__ieee754_sqrt>:
 8018470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018472:	000b      	movs	r3, r1
 8018474:	000c      	movs	r4, r1
 8018476:	4956      	ldr	r1, [pc, #344]	; (80185d0 <__ieee754_sqrt+0x160>)
 8018478:	0005      	movs	r5, r0
 801847a:	0002      	movs	r2, r0
 801847c:	0008      	movs	r0, r1
 801847e:	b085      	sub	sp, #20
 8018480:	4020      	ands	r0, r4
 8018482:	4288      	cmp	r0, r1
 8018484:	d10f      	bne.n	80184a6 <__ieee754_sqrt+0x36>
 8018486:	0028      	movs	r0, r5
 8018488:	0021      	movs	r1, r4
 801848a:	f7e9 fe69 	bl	8002160 <__aeabi_dmul>
 801848e:	0002      	movs	r2, r0
 8018490:	000b      	movs	r3, r1
 8018492:	0028      	movs	r0, r5
 8018494:	0021      	movs	r1, r4
 8018496:	f7e8 ff25 	bl	80012e4 <__aeabi_dadd>
 801849a:	0005      	movs	r5, r0
 801849c:	000c      	movs	r4, r1
 801849e:	0028      	movs	r0, r5
 80184a0:	0021      	movs	r1, r4
 80184a2:	b005      	add	sp, #20
 80184a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184a6:	2c00      	cmp	r4, #0
 80184a8:	dc10      	bgt.n	80184cc <__ieee754_sqrt+0x5c>
 80184aa:	0061      	lsls	r1, r4, #1
 80184ac:	0849      	lsrs	r1, r1, #1
 80184ae:	4329      	orrs	r1, r5
 80184b0:	d0f5      	beq.n	801849e <__ieee754_sqrt+0x2e>
 80184b2:	2100      	movs	r1, #0
 80184b4:	428c      	cmp	r4, r1
 80184b6:	d100      	bne.n	80184ba <__ieee754_sqrt+0x4a>
 80184b8:	e080      	b.n	80185bc <__ieee754_sqrt+0x14c>
 80184ba:	0028      	movs	r0, r5
 80184bc:	0021      	movs	r1, r4
 80184be:	f7ea f8bb 	bl	8002638 <__aeabi_dsub>
 80184c2:	0002      	movs	r2, r0
 80184c4:	000b      	movs	r3, r1
 80184c6:	f7e9 fa49 	bl	800195c <__aeabi_ddiv>
 80184ca:	e7e6      	b.n	801849a <__ieee754_sqrt+0x2a>
 80184cc:	1521      	asrs	r1, r4, #20
 80184ce:	d075      	beq.n	80185bc <__ieee754_sqrt+0x14c>
 80184d0:	4840      	ldr	r0, [pc, #256]	; (80185d4 <__ieee754_sqrt+0x164>)
 80184d2:	031b      	lsls	r3, r3, #12
 80184d4:	180c      	adds	r4, r1, r0
 80184d6:	2080      	movs	r0, #128	; 0x80
 80184d8:	0b1b      	lsrs	r3, r3, #12
 80184da:	0340      	lsls	r0, r0, #13
 80184dc:	4303      	orrs	r3, r0
 80184de:	07c9      	lsls	r1, r1, #31
 80184e0:	d403      	bmi.n	80184ea <__ieee754_sqrt+0x7a>
 80184e2:	0fd1      	lsrs	r1, r2, #31
 80184e4:	005b      	lsls	r3, r3, #1
 80184e6:	185b      	adds	r3, r3, r1
 80184e8:	0052      	lsls	r2, r2, #1
 80184ea:	1061      	asrs	r1, r4, #1
 80184ec:	2400      	movs	r4, #0
 80184ee:	9103      	str	r1, [sp, #12]
 80184f0:	005b      	lsls	r3, r3, #1
 80184f2:	0fd1      	lsrs	r1, r2, #31
 80184f4:	185b      	adds	r3, r3, r1
 80184f6:	2180      	movs	r1, #128	; 0x80
 80184f8:	2516      	movs	r5, #22
 80184fa:	0020      	movs	r0, r4
 80184fc:	0052      	lsls	r2, r2, #1
 80184fe:	0389      	lsls	r1, r1, #14
 8018500:	1846      	adds	r6, r0, r1
 8018502:	429e      	cmp	r6, r3
 8018504:	dc02      	bgt.n	801850c <__ieee754_sqrt+0x9c>
 8018506:	1870      	adds	r0, r6, r1
 8018508:	1b9b      	subs	r3, r3, r6
 801850a:	1864      	adds	r4, r4, r1
 801850c:	0fd6      	lsrs	r6, r2, #31
 801850e:	005b      	lsls	r3, r3, #1
 8018510:	3d01      	subs	r5, #1
 8018512:	18f3      	adds	r3, r6, r3
 8018514:	0052      	lsls	r2, r2, #1
 8018516:	0849      	lsrs	r1, r1, #1
 8018518:	2d00      	cmp	r5, #0
 801851a:	d1f1      	bne.n	8018500 <__ieee754_sqrt+0x90>
 801851c:	2620      	movs	r6, #32
 801851e:	2780      	movs	r7, #128	; 0x80
 8018520:	0029      	movs	r1, r5
 8018522:	9601      	str	r6, [sp, #4]
 8018524:	063f      	lsls	r7, r7, #24
 8018526:	197e      	adds	r6, r7, r5
 8018528:	46b4      	mov	ip, r6
 801852a:	4283      	cmp	r3, r0
 801852c:	dc02      	bgt.n	8018534 <__ieee754_sqrt+0xc4>
 801852e:	d114      	bne.n	801855a <__ieee754_sqrt+0xea>
 8018530:	4296      	cmp	r6, r2
 8018532:	d812      	bhi.n	801855a <__ieee754_sqrt+0xea>
 8018534:	4665      	mov	r5, ip
 8018536:	4666      	mov	r6, ip
 8018538:	19ed      	adds	r5, r5, r7
 801853a:	9002      	str	r0, [sp, #8]
 801853c:	2e00      	cmp	r6, #0
 801853e:	da03      	bge.n	8018548 <__ieee754_sqrt+0xd8>
 8018540:	43ee      	mvns	r6, r5
 8018542:	0ff6      	lsrs	r6, r6, #31
 8018544:	1986      	adds	r6, r0, r6
 8018546:	9602      	str	r6, [sp, #8]
 8018548:	1a1b      	subs	r3, r3, r0
 801854a:	4562      	cmp	r2, ip
 801854c:	4180      	sbcs	r0, r0
 801854e:	4240      	negs	r0, r0
 8018550:	1a1b      	subs	r3, r3, r0
 8018552:	4660      	mov	r0, ip
 8018554:	1a12      	subs	r2, r2, r0
 8018556:	9802      	ldr	r0, [sp, #8]
 8018558:	19c9      	adds	r1, r1, r7
 801855a:	0fd6      	lsrs	r6, r2, #31
 801855c:	005b      	lsls	r3, r3, #1
 801855e:	199b      	adds	r3, r3, r6
 8018560:	9e01      	ldr	r6, [sp, #4]
 8018562:	0052      	lsls	r2, r2, #1
 8018564:	3e01      	subs	r6, #1
 8018566:	087f      	lsrs	r7, r7, #1
 8018568:	9601      	str	r6, [sp, #4]
 801856a:	2e00      	cmp	r6, #0
 801856c:	d1db      	bne.n	8018526 <__ieee754_sqrt+0xb6>
 801856e:	4313      	orrs	r3, r2
 8018570:	d003      	beq.n	801857a <__ieee754_sqrt+0x10a>
 8018572:	1c4b      	adds	r3, r1, #1
 8018574:	d127      	bne.n	80185c6 <__ieee754_sqrt+0x156>
 8018576:	0031      	movs	r1, r6
 8018578:	3401      	adds	r4, #1
 801857a:	4b17      	ldr	r3, [pc, #92]	; (80185d8 <__ieee754_sqrt+0x168>)
 801857c:	1060      	asrs	r0, r4, #1
 801857e:	18c0      	adds	r0, r0, r3
 8018580:	0849      	lsrs	r1, r1, #1
 8018582:	07e3      	lsls	r3, r4, #31
 8018584:	d502      	bpl.n	801858c <__ieee754_sqrt+0x11c>
 8018586:	2380      	movs	r3, #128	; 0x80
 8018588:	061b      	lsls	r3, r3, #24
 801858a:	4319      	orrs	r1, r3
 801858c:	9b03      	ldr	r3, [sp, #12]
 801858e:	000d      	movs	r5, r1
 8018590:	051c      	lsls	r4, r3, #20
 8018592:	1823      	adds	r3, r4, r0
 8018594:	001c      	movs	r4, r3
 8018596:	e782      	b.n	801849e <__ieee754_sqrt+0x2e>
 8018598:	0ad3      	lsrs	r3, r2, #11
 801859a:	3815      	subs	r0, #21
 801859c:	0552      	lsls	r2, r2, #21
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d0fa      	beq.n	8018598 <__ieee754_sqrt+0x128>
 80185a2:	2480      	movs	r4, #128	; 0x80
 80185a4:	0364      	lsls	r4, r4, #13
 80185a6:	4223      	tst	r3, r4
 80185a8:	d00a      	beq.n	80185c0 <__ieee754_sqrt+0x150>
 80185aa:	2420      	movs	r4, #32
 80185ac:	0016      	movs	r6, r2
 80185ae:	1a64      	subs	r4, r4, r1
 80185b0:	40e6      	lsrs	r6, r4
 80185b2:	1e4d      	subs	r5, r1, #1
 80185b4:	408a      	lsls	r2, r1
 80185b6:	4333      	orrs	r3, r6
 80185b8:	1b41      	subs	r1, r0, r5
 80185ba:	e789      	b.n	80184d0 <__ieee754_sqrt+0x60>
 80185bc:	2000      	movs	r0, #0
 80185be:	e7ee      	b.n	801859e <__ieee754_sqrt+0x12e>
 80185c0:	005b      	lsls	r3, r3, #1
 80185c2:	3101      	adds	r1, #1
 80185c4:	e7ef      	b.n	80185a6 <__ieee754_sqrt+0x136>
 80185c6:	2301      	movs	r3, #1
 80185c8:	3101      	adds	r1, #1
 80185ca:	4399      	bics	r1, r3
 80185cc:	e7d5      	b.n	801857a <__ieee754_sqrt+0x10a>
 80185ce:	46c0      	nop			; (mov r8, r8)
 80185d0:	7ff00000 	.word	0x7ff00000
 80185d4:	fffffc01 	.word	0xfffffc01
 80185d8:	3fe00000 	.word	0x3fe00000

080185dc <with_errno>:
 80185dc:	b570      	push	{r4, r5, r6, lr}
 80185de:	000d      	movs	r5, r1
 80185e0:	0016      	movs	r6, r2
 80185e2:	0004      	movs	r4, r0
 80185e4:	f7fc fa00 	bl	80149e8 <__errno>
 80185e8:	0029      	movs	r1, r5
 80185ea:	6006      	str	r6, [r0, #0]
 80185ec:	0020      	movs	r0, r4
 80185ee:	bd70      	pop	{r4, r5, r6, pc}

080185f0 <xflow>:
 80185f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185f2:	0015      	movs	r5, r2
 80185f4:	001c      	movs	r4, r3
 80185f6:	2800      	cmp	r0, #0
 80185f8:	d010      	beq.n	801861c <xflow+0x2c>
 80185fa:	2380      	movs	r3, #128	; 0x80
 80185fc:	0010      	movs	r0, r2
 80185fe:	061b      	lsls	r3, r3, #24
 8018600:	18e1      	adds	r1, r4, r3
 8018602:	9000      	str	r0, [sp, #0]
 8018604:	9101      	str	r1, [sp, #4]
 8018606:	9a00      	ldr	r2, [sp, #0]
 8018608:	9b01      	ldr	r3, [sp, #4]
 801860a:	0028      	movs	r0, r5
 801860c:	0021      	movs	r1, r4
 801860e:	f7e9 fda7 	bl	8002160 <__aeabi_dmul>
 8018612:	2222      	movs	r2, #34	; 0x22
 8018614:	f7ff ffe2 	bl	80185dc <with_errno>
 8018618:	b003      	add	sp, #12
 801861a:	bd30      	pop	{r4, r5, pc}
 801861c:	0010      	movs	r0, r2
 801861e:	0019      	movs	r1, r3
 8018620:	e7ef      	b.n	8018602 <xflow+0x12>

08018622 <__math_uflow>:
 8018622:	2380      	movs	r3, #128	; 0x80
 8018624:	b510      	push	{r4, lr}
 8018626:	2200      	movs	r2, #0
 8018628:	055b      	lsls	r3, r3, #21
 801862a:	f7ff ffe1 	bl	80185f0 <xflow>
 801862e:	bd10      	pop	{r4, pc}

08018630 <__math_oflow>:
 8018630:	23e0      	movs	r3, #224	; 0xe0
 8018632:	b510      	push	{r4, lr}
 8018634:	2200      	movs	r2, #0
 8018636:	05db      	lsls	r3, r3, #23
 8018638:	f7ff ffda 	bl	80185f0 <xflow>
 801863c:	bd10      	pop	{r4, pc}

0801863e <fabs>:
 801863e:	004b      	lsls	r3, r1, #1
 8018640:	0859      	lsrs	r1, r3, #1
 8018642:	4770      	bx	lr

08018644 <finite>:
 8018644:	4b02      	ldr	r3, [pc, #8]	; (8018650 <finite+0xc>)
 8018646:	0048      	lsls	r0, r1, #1
 8018648:	0840      	lsrs	r0, r0, #1
 801864a:	18c0      	adds	r0, r0, r3
 801864c:	0fc0      	lsrs	r0, r0, #31
 801864e:	4770      	bx	lr
 8018650:	80100000 	.word	0x80100000

08018654 <scalbn>:
 8018654:	004b      	lsls	r3, r1, #1
 8018656:	b570      	push	{r4, r5, r6, lr}
 8018658:	0d5b      	lsrs	r3, r3, #21
 801865a:	0014      	movs	r4, r2
 801865c:	000a      	movs	r2, r1
 801865e:	2b00      	cmp	r3, #0
 8018660:	d10d      	bne.n	801867e <scalbn+0x2a>
 8018662:	004b      	lsls	r3, r1, #1
 8018664:	085b      	lsrs	r3, r3, #1
 8018666:	4303      	orrs	r3, r0
 8018668:	d010      	beq.n	801868c <scalbn+0x38>
 801866a:	4b27      	ldr	r3, [pc, #156]	; (8018708 <scalbn+0xb4>)
 801866c:	2200      	movs	r2, #0
 801866e:	f7e9 fd77 	bl	8002160 <__aeabi_dmul>
 8018672:	4b26      	ldr	r3, [pc, #152]	; (801870c <scalbn+0xb8>)
 8018674:	429c      	cmp	r4, r3
 8018676:	da0a      	bge.n	801868e <scalbn+0x3a>
 8018678:	4a25      	ldr	r2, [pc, #148]	; (8018710 <scalbn+0xbc>)
 801867a:	4b26      	ldr	r3, [pc, #152]	; (8018714 <scalbn+0xc0>)
 801867c:	e019      	b.n	80186b2 <scalbn+0x5e>
 801867e:	4d26      	ldr	r5, [pc, #152]	; (8018718 <scalbn+0xc4>)
 8018680:	42ab      	cmp	r3, r5
 8018682:	d108      	bne.n	8018696 <scalbn+0x42>
 8018684:	0002      	movs	r2, r0
 8018686:	000b      	movs	r3, r1
 8018688:	f7e8 fe2c 	bl	80012e4 <__aeabi_dadd>
 801868c:	bd70      	pop	{r4, r5, r6, pc}
 801868e:	000a      	movs	r2, r1
 8018690:	004b      	lsls	r3, r1, #1
 8018692:	0d5b      	lsrs	r3, r3, #21
 8018694:	3b36      	subs	r3, #54	; 0x36
 8018696:	4d21      	ldr	r5, [pc, #132]	; (801871c <scalbn+0xc8>)
 8018698:	18e3      	adds	r3, r4, r3
 801869a:	42ab      	cmp	r3, r5
 801869c:	dd0c      	ble.n	80186b8 <scalbn+0x64>
 801869e:	4c20      	ldr	r4, [pc, #128]	; (8018720 <scalbn+0xcc>)
 80186a0:	4d20      	ldr	r5, [pc, #128]	; (8018724 <scalbn+0xd0>)
 80186a2:	2900      	cmp	r1, #0
 80186a4:	da01      	bge.n	80186aa <scalbn+0x56>
 80186a6:	4c1e      	ldr	r4, [pc, #120]	; (8018720 <scalbn+0xcc>)
 80186a8:	4d1f      	ldr	r5, [pc, #124]	; (8018728 <scalbn+0xd4>)
 80186aa:	0020      	movs	r0, r4
 80186ac:	0029      	movs	r1, r5
 80186ae:	4a1c      	ldr	r2, [pc, #112]	; (8018720 <scalbn+0xcc>)
 80186b0:	4b1c      	ldr	r3, [pc, #112]	; (8018724 <scalbn+0xd0>)
 80186b2:	f7e9 fd55 	bl	8002160 <__aeabi_dmul>
 80186b6:	e7e9      	b.n	801868c <scalbn+0x38>
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	dd05      	ble.n	80186c8 <scalbn+0x74>
 80186bc:	4c1b      	ldr	r4, [pc, #108]	; (801872c <scalbn+0xd8>)
 80186be:	051b      	lsls	r3, r3, #20
 80186c0:	4022      	ands	r2, r4
 80186c2:	431a      	orrs	r2, r3
 80186c4:	0011      	movs	r1, r2
 80186c6:	e7e1      	b.n	801868c <scalbn+0x38>
 80186c8:	001d      	movs	r5, r3
 80186ca:	3535      	adds	r5, #53	; 0x35
 80186cc:	da13      	bge.n	80186f6 <scalbn+0xa2>
 80186ce:	4a18      	ldr	r2, [pc, #96]	; (8018730 <scalbn+0xdc>)
 80186d0:	0fcb      	lsrs	r3, r1, #31
 80186d2:	4294      	cmp	r4, r2
 80186d4:	dd08      	ble.n	80186e8 <scalbn+0x94>
 80186d6:	4812      	ldr	r0, [pc, #72]	; (8018720 <scalbn+0xcc>)
 80186d8:	4912      	ldr	r1, [pc, #72]	; (8018724 <scalbn+0xd0>)
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d001      	beq.n	80186e2 <scalbn+0x8e>
 80186de:	4810      	ldr	r0, [pc, #64]	; (8018720 <scalbn+0xcc>)
 80186e0:	4911      	ldr	r1, [pc, #68]	; (8018728 <scalbn+0xd4>)
 80186e2:	4a0f      	ldr	r2, [pc, #60]	; (8018720 <scalbn+0xcc>)
 80186e4:	4b0f      	ldr	r3, [pc, #60]	; (8018724 <scalbn+0xd0>)
 80186e6:	e7e4      	b.n	80186b2 <scalbn+0x5e>
 80186e8:	4809      	ldr	r0, [pc, #36]	; (8018710 <scalbn+0xbc>)
 80186ea:	490a      	ldr	r1, [pc, #40]	; (8018714 <scalbn+0xc0>)
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d0c3      	beq.n	8018678 <scalbn+0x24>
 80186f0:	4807      	ldr	r0, [pc, #28]	; (8018710 <scalbn+0xbc>)
 80186f2:	4910      	ldr	r1, [pc, #64]	; (8018734 <scalbn+0xe0>)
 80186f4:	e7c0      	b.n	8018678 <scalbn+0x24>
 80186f6:	4c0d      	ldr	r4, [pc, #52]	; (801872c <scalbn+0xd8>)
 80186f8:	3336      	adds	r3, #54	; 0x36
 80186fa:	4022      	ands	r2, r4
 80186fc:	051b      	lsls	r3, r3, #20
 80186fe:	4313      	orrs	r3, r2
 8018700:	0019      	movs	r1, r3
 8018702:	2200      	movs	r2, #0
 8018704:	4b0c      	ldr	r3, [pc, #48]	; (8018738 <scalbn+0xe4>)
 8018706:	e7d4      	b.n	80186b2 <scalbn+0x5e>
 8018708:	43500000 	.word	0x43500000
 801870c:	ffff3cb0 	.word	0xffff3cb0
 8018710:	c2f8f359 	.word	0xc2f8f359
 8018714:	01a56e1f 	.word	0x01a56e1f
 8018718:	000007ff 	.word	0x000007ff
 801871c:	000007fe 	.word	0x000007fe
 8018720:	8800759c 	.word	0x8800759c
 8018724:	7e37e43c 	.word	0x7e37e43c
 8018728:	fe37e43c 	.word	0xfe37e43c
 801872c:	800fffff 	.word	0x800fffff
 8018730:	0000c350 	.word	0x0000c350
 8018734:	81a56e1f 	.word	0x81a56e1f
 8018738:	3c900000 	.word	0x3c900000

0801873c <_init>:
 801873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801873e:	46c0      	nop			; (mov r8, r8)
 8018740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018742:	bc08      	pop	{r3}
 8018744:	469e      	mov	lr, r3
 8018746:	4770      	bx	lr

08018748 <_fini>:
 8018748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801874a:	46c0      	nop			; (mov r8, r8)
 801874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801874e:	bc08      	pop	{r3}
 8018750:	469e      	mov	lr, r3
 8018752:	4770      	bx	lr
