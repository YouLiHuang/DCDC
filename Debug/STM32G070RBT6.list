
STM32G070RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001832c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  080183e8  080183e8  000283e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ea8  08018ea8  000332a8  2**0
                  CONTENTS
  4 .ARM          00000000  08018ea8  08018ea8  000332a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018ea8  08018ea8  000332a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018ea8  08018ea8  00028ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018eac  08018eac  00028eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000032a8  20000000  08018eb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200032a8  0801c158  000332a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003aa0  0801c158  00033aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000332a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020bfc  00000000  00000000  000332d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ba  00000000  00000000  00053ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  00058888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  0005a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e378  00000000  00000000  0005bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026625  00000000  00000000  00079fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f389  00000000  00000000  000a05e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f96e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007524  00000000  00000000  0013f9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200032a8 	.word	0x200032a8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080183cc 	.word	0x080183cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200032ac 	.word	0x200032ac
 80000fc:	080183cc 	.word	0x080183cc

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fe25 	bl	8002098 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd75 	bl	8001f48 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe17 	bl	8002098 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe0d 	bl	8002098 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd9d 	bl	8001fcc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fd93 	bl	8001fcc <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fb8b 	bl	8000bd8 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb17 	bl	8000b00 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb7d 	bl	8000bd8 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb73 	bl	8000bd8 <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb23 	bl	8000b4c <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb19 	bl	8000b4c <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_f2uiz>:
 8000528:	219e      	movs	r1, #158	; 0x9e
 800052a:	b510      	push	{r4, lr}
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	1c04      	adds	r4, r0, #0
 8000530:	f7ff fff0 	bl	8000514 <__aeabi_fcmpge>
 8000534:	2800      	cmp	r0, #0
 8000536:	d103      	bne.n	8000540 <__aeabi_f2uiz+0x18>
 8000538:	1c20      	adds	r0, r4, #0
 800053a:	f000 fe65 	bl	8001208 <__aeabi_f2iz>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	219e      	movs	r1, #158	; 0x9e
 8000542:	1c20      	adds	r0, r4, #0
 8000544:	05c9      	lsls	r1, r1, #23
 8000546:	f000 fcb1 	bl	8000eac <__aeabi_fsub>
 800054a:	f000 fe5d 	bl	8001208 <__aeabi_f2iz>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	061b      	lsls	r3, r3, #24
 8000552:	469c      	mov	ip, r3
 8000554:	4460      	add	r0, ip
 8000556:	e7f2      	b.n	800053e <__aeabi_f2uiz+0x16>

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff9d 	bl	80004a0 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fc13 	bl	8002d98 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f85c 	bl	8002638 <__aeabi_dsub>
 8000580:	f002 fc0a 	bl	8002d98 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_fadd>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	46c6      	mov	lr, r8
 8000598:	0243      	lsls	r3, r0, #9
 800059a:	0a5b      	lsrs	r3, r3, #9
 800059c:	024e      	lsls	r6, r1, #9
 800059e:	0045      	lsls	r5, r0, #1
 80005a0:	004f      	lsls	r7, r1, #1
 80005a2:	00da      	lsls	r2, r3, #3
 80005a4:	0fc4      	lsrs	r4, r0, #31
 80005a6:	469c      	mov	ip, r3
 80005a8:	0a70      	lsrs	r0, r6, #9
 80005aa:	4690      	mov	r8, r2
 80005ac:	b500      	push	{lr}
 80005ae:	0e2d      	lsrs	r5, r5, #24
 80005b0:	0e3f      	lsrs	r7, r7, #24
 80005b2:	0fc9      	lsrs	r1, r1, #31
 80005b4:	09b6      	lsrs	r6, r6, #6
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d04b      	beq.n	8000652 <__aeabi_fadd+0xbe>
 80005ba:	1bea      	subs	r2, r5, r7
 80005bc:	2a00      	cmp	r2, #0
 80005be:	dd36      	ble.n	800062e <__aeabi_fadd+0x9a>
 80005c0:	2f00      	cmp	r7, #0
 80005c2:	d061      	beq.n	8000688 <__aeabi_fadd+0xf4>
 80005c4:	2dff      	cmp	r5, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x36>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x192>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	04db      	lsls	r3, r3, #19
 80005ce:	431e      	orrs	r6, r3
 80005d0:	2a1b      	cmp	r2, #27
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_fadd+0x42>
 80005d4:	e0d3      	b.n	800077e <__aeabi_fadd+0x1ea>
 80005d6:	2001      	movs	r0, #1
 80005d8:	4643      	mov	r3, r8
 80005da:	1a18      	subs	r0, r3, r0
 80005dc:	0143      	lsls	r3, r0, #5
 80005de:	d400      	bmi.n	80005e2 <__aeabi_fadd+0x4e>
 80005e0:	e08c      	b.n	80006fc <__aeabi_fadd+0x168>
 80005e2:	0180      	lsls	r0, r0, #6
 80005e4:	0987      	lsrs	r7, r0, #6
 80005e6:	0038      	movs	r0, r7
 80005e8:	f002 fd32 	bl	8003050 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4087      	lsls	r7, r0
 80005f0:	4285      	cmp	r5, r0
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fadd+0x62>
 80005f4:	e0b6      	b.n	8000764 <__aeabi_fadd+0x1d0>
 80005f6:	1a2d      	subs	r5, r5, r0
 80005f8:	48b3      	ldr	r0, [pc, #716]	; (80008c8 <__aeabi_fadd+0x334>)
 80005fa:	4038      	ands	r0, r7
 80005fc:	0743      	lsls	r3, r0, #29
 80005fe:	d004      	beq.n	800060a <__aeabi_fadd+0x76>
 8000600:	230f      	movs	r3, #15
 8000602:	4003      	ands	r3, r0
 8000604:	2b04      	cmp	r3, #4
 8000606:	d000      	beq.n	800060a <__aeabi_fadd+0x76>
 8000608:	3004      	adds	r0, #4
 800060a:	0143      	lsls	r3, r0, #5
 800060c:	d400      	bmi.n	8000610 <__aeabi_fadd+0x7c>
 800060e:	e078      	b.n	8000702 <__aeabi_fadd+0x16e>
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	2dfe      	cmp	r5, #254	; 0xfe
 8000614:	d065      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 8000616:	0180      	lsls	r0, r0, #6
 8000618:	0a43      	lsrs	r3, r0, #9
 800061a:	469c      	mov	ip, r3
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	4663      	mov	r3, ip
 8000620:	05d0      	lsls	r0, r2, #23
 8000622:	4318      	orrs	r0, r3
 8000624:	07e4      	lsls	r4, r4, #31
 8000626:	4320      	orrs	r0, r4
 8000628:	bc80      	pop	{r7}
 800062a:	46b8      	mov	r8, r7
 800062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062e:	2a00      	cmp	r2, #0
 8000630:	d035      	beq.n	800069e <__aeabi_fadd+0x10a>
 8000632:	1b7a      	subs	r2, r7, r5
 8000634:	2d00      	cmp	r5, #0
 8000636:	d000      	beq.n	800063a <__aeabi_fadd+0xa6>
 8000638:	e0af      	b.n	800079a <__aeabi_fadd+0x206>
 800063a:	4643      	mov	r3, r8
 800063c:	2b00      	cmp	r3, #0
 800063e:	d100      	bne.n	8000642 <__aeabi_fadd+0xae>
 8000640:	e0a7      	b.n	8000792 <__aeabi_fadd+0x1fe>
 8000642:	1e53      	subs	r3, r2, #1
 8000644:	2a01      	cmp	r2, #1
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0xb6>
 8000648:	e12f      	b.n	80008aa <__aeabi_fadd+0x316>
 800064a:	2aff      	cmp	r2, #255	; 0xff
 800064c:	d069      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800064e:	001a      	movs	r2, r3
 8000650:	e0aa      	b.n	80007a8 <__aeabi_fadd+0x214>
 8000652:	1be9      	subs	r1, r5, r7
 8000654:	2900      	cmp	r1, #0
 8000656:	dd70      	ble.n	800073a <__aeabi_fadd+0x1a6>
 8000658:	2f00      	cmp	r7, #0
 800065a:	d037      	beq.n	80006cc <__aeabi_fadd+0x138>
 800065c:	2dff      	cmp	r5, #255	; 0xff
 800065e:	d062      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	04db      	lsls	r3, r3, #19
 8000664:	431e      	orrs	r6, r3
 8000666:	291b      	cmp	r1, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0xd8>
 800066a:	e0b0      	b.n	80007ce <__aeabi_fadd+0x23a>
 800066c:	2001      	movs	r0, #1
 800066e:	4440      	add	r0, r8
 8000670:	0143      	lsls	r3, r0, #5
 8000672:	d543      	bpl.n	80006fc <__aeabi_fadd+0x168>
 8000674:	3501      	adds	r5, #1
 8000676:	2dff      	cmp	r5, #255	; 0xff
 8000678:	d033      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800067a:	2301      	movs	r3, #1
 800067c:	4a93      	ldr	r2, [pc, #588]	; (80008cc <__aeabi_fadd+0x338>)
 800067e:	4003      	ands	r3, r0
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	4010      	ands	r0, r2
 8000684:	4318      	orrs	r0, r3
 8000686:	e7b9      	b.n	80005fc <__aeabi_fadd+0x68>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0xfa>
 800068c:	e083      	b.n	8000796 <__aeabi_fadd+0x202>
 800068e:	1e51      	subs	r1, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x102>
 8000694:	e0d8      	b.n	8000848 <__aeabi_fadd+0x2b4>
 8000696:	2aff      	cmp	r2, #255	; 0xff
 8000698:	d045      	beq.n	8000726 <__aeabi_fadd+0x192>
 800069a:	000a      	movs	r2, r1
 800069c:	e798      	b.n	80005d0 <__aeabi_fadd+0x3c>
 800069e:	27fe      	movs	r7, #254	; 0xfe
 80006a0:	1c6a      	adds	r2, r5, #1
 80006a2:	4217      	tst	r7, r2
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x114>
 80006a6:	e086      	b.n	80007b6 <__aeabi_fadd+0x222>
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x11a>
 80006ac:	e0b7      	b.n	800081e <__aeabi_fadd+0x28a>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x122>
 80006b4:	e0f3      	b.n	800089e <__aeabi_fadd+0x30a>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d0b0      	beq.n	800061e <__aeabi_fadd+0x8a>
 80006bc:	1b98      	subs	r0, r3, r6
 80006be:	0143      	lsls	r3, r0, #5
 80006c0:	d400      	bmi.n	80006c4 <__aeabi_fadd+0x130>
 80006c2:	e0fa      	b.n	80008ba <__aeabi_fadd+0x326>
 80006c4:	4643      	mov	r3, r8
 80006c6:	000c      	movs	r4, r1
 80006c8:	1af0      	subs	r0, r6, r3
 80006ca:	e797      	b.n	80005fc <__aeabi_fadd+0x68>
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x13e>
 80006d0:	e0c8      	b.n	8000864 <__aeabi_fadd+0x2d0>
 80006d2:	1e4a      	subs	r2, r1, #1
 80006d4:	2901      	cmp	r1, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x146>
 80006d8:	e0ae      	b.n	8000838 <__aeabi_fadd+0x2a4>
 80006da:	29ff      	cmp	r1, #255	; 0xff
 80006dc:	d023      	beq.n	8000726 <__aeabi_fadd+0x192>
 80006de:	0011      	movs	r1, r2
 80006e0:	e7c1      	b.n	8000666 <__aeabi_fadd+0xd2>
 80006e2:	2300      	movs	r3, #0
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	469c      	mov	ip, r3
 80006e8:	e799      	b.n	800061e <__aeabi_fadd+0x8a>
 80006ea:	21fe      	movs	r1, #254	; 0xfe
 80006ec:	1c6a      	adds	r2, r5, #1
 80006ee:	4211      	tst	r1, r2
 80006f0:	d077      	beq.n	80007e2 <__aeabi_fadd+0x24e>
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 80006f6:	0015      	movs	r5, r2
 80006f8:	4446      	add	r6, r8
 80006fa:	0870      	lsrs	r0, r6, #1
 80006fc:	0743      	lsls	r3, r0, #29
 80006fe:	d000      	beq.n	8000702 <__aeabi_fadd+0x16e>
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x6c>
 8000702:	08c3      	lsrs	r3, r0, #3
 8000704:	2dff      	cmp	r5, #255	; 0xff
 8000706:	d00e      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	469c      	mov	ip, r3
 800070e:	b2ea      	uxtb	r2, r5
 8000710:	e785      	b.n	800061e <__aeabi_fadd+0x8a>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d007      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	03d2      	lsls	r2, r2, #15
 800071a:	4213      	tst	r3, r2
 800071c:	d003      	beq.n	8000726 <__aeabi_fadd+0x192>
 800071e:	4210      	tst	r0, r2
 8000720:	d101      	bne.n	8000726 <__aeabi_fadd+0x192>
 8000722:	000c      	movs	r4, r1
 8000724:	0003      	movs	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0db      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4318      	orrs	r0, r3
 8000730:	0240      	lsls	r0, r0, #9
 8000732:	0a43      	lsrs	r3, r0, #9
 8000734:	469c      	mov	ip, r3
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	e771      	b.n	800061e <__aeabi_fadd+0x8a>
 800073a:	2900      	cmp	r1, #0
 800073c:	d0d5      	beq.n	80006ea <__aeabi_fadd+0x156>
 800073e:	1b7a      	subs	r2, r7, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d160      	bne.n	8000806 <__aeabi_fadd+0x272>
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d024      	beq.n	8000794 <__aeabi_fadd+0x200>
 800074a:	1e53      	subs	r3, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d073      	beq.n	8000838 <__aeabi_fadd+0x2a4>
 8000750:	2aff      	cmp	r2, #255	; 0xff
 8000752:	d0e7      	beq.n	8000724 <__aeabi_fadd+0x190>
 8000754:	001a      	movs	r2, r3
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dc00      	bgt.n	800075c <__aeabi_fadd+0x1c8>
 800075a:	e085      	b.n	8000868 <__aeabi_fadd+0x2d4>
 800075c:	2001      	movs	r0, #1
 800075e:	003d      	movs	r5, r7
 8000760:	1980      	adds	r0, r0, r6
 8000762:	e785      	b.n	8000670 <__aeabi_fadd+0xdc>
 8000764:	2320      	movs	r3, #32
 8000766:	003a      	movs	r2, r7
 8000768:	1b45      	subs	r5, r0, r5
 800076a:	0038      	movs	r0, r7
 800076c:	3501      	adds	r5, #1
 800076e:	40ea      	lsrs	r2, r5
 8000770:	1b5d      	subs	r5, r3, r5
 8000772:	40a8      	lsls	r0, r5
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	2500      	movs	r5, #0
 800077a:	4310      	orrs	r0, r2
 800077c:	e73e      	b.n	80005fc <__aeabi_fadd+0x68>
 800077e:	2320      	movs	r3, #32
 8000780:	0030      	movs	r0, r6
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	0031      	movs	r1, r6
 8000786:	4098      	lsls	r0, r3
 8000788:	40d1      	lsrs	r1, r2
 800078a:	1e43      	subs	r3, r0, #1
 800078c:	4198      	sbcs	r0, r3
 800078e:	4308      	orrs	r0, r1
 8000790:	e722      	b.n	80005d8 <__aeabi_fadd+0x44>
 8000792:	000c      	movs	r4, r1
 8000794:	0003      	movs	r3, r0
 8000796:	0015      	movs	r5, r2
 8000798:	e7b4      	b.n	8000704 <__aeabi_fadd+0x170>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d0c1      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	4640      	mov	r0, r8
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	4318      	orrs	r0, r3
 80007a6:	4680      	mov	r8, r0
 80007a8:	2a1b      	cmp	r2, #27
 80007aa:	dd51      	ble.n	8000850 <__aeabi_fadd+0x2bc>
 80007ac:	2001      	movs	r0, #1
 80007ae:	000c      	movs	r4, r1
 80007b0:	003d      	movs	r5, r7
 80007b2:	1a30      	subs	r0, r6, r0
 80007b4:	e712      	b.n	80005dc <__aeabi_fadd+0x48>
 80007b6:	4643      	mov	r3, r8
 80007b8:	1b9f      	subs	r7, r3, r6
 80007ba:	017b      	lsls	r3, r7, #5
 80007bc:	d42b      	bmi.n	8000816 <__aeabi_fadd+0x282>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80007c2:	e710      	b.n	80005e6 <__aeabi_fadd+0x52>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	469c      	mov	ip, r3
 80007cc:	e727      	b.n	800061e <__aeabi_fadd+0x8a>
 80007ce:	2320      	movs	r3, #32
 80007d0:	0032      	movs	r2, r6
 80007d2:	0030      	movs	r0, r6
 80007d4:	40ca      	lsrs	r2, r1
 80007d6:	1a59      	subs	r1, r3, r1
 80007d8:	4088      	lsls	r0, r1
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
 80007de:	4310      	orrs	r0, r2
 80007e0:	e745      	b.n	800066e <__aeabi_fadd+0xda>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d14a      	bne.n	800087c <__aeabi_fadd+0x2e8>
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d063      	beq.n	80008b4 <__aeabi_fadd+0x320>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x260>
 80007f2:	e714      	b.n	800061e <__aeabi_fadd+0x8a>
 80007f4:	0030      	movs	r0, r6
 80007f6:	4440      	add	r0, r8
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	d400      	bmi.n	80007fe <__aeabi_fadd+0x26a>
 80007fc:	e77e      	b.n	80006fc <__aeabi_fadd+0x168>
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <__aeabi_fadd+0x334>)
 8000800:	3501      	adds	r5, #1
 8000802:	4018      	ands	r0, r3
 8000804:	e77a      	b.n	80006fc <__aeabi_fadd+0x168>
 8000806:	2fff      	cmp	r7, #255	; 0xff
 8000808:	d08c      	beq.n	8000724 <__aeabi_fadd+0x190>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	4641      	mov	r1, r8
 800080e:	04db      	lsls	r3, r3, #19
 8000810:	4319      	orrs	r1, r3
 8000812:	4688      	mov	r8, r1
 8000814:	e79f      	b.n	8000756 <__aeabi_fadd+0x1c2>
 8000816:	4643      	mov	r3, r8
 8000818:	000c      	movs	r4, r1
 800081a:	1af7      	subs	r7, r6, r3
 800081c:	e6e3      	b.n	80005e6 <__aeabi_fadd+0x52>
 800081e:	4642      	mov	r2, r8
 8000820:	2a00      	cmp	r2, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x292>
 8000824:	e775      	b.n	8000712 <__aeabi_fadd+0x17e>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x298>
 800082a:	e77a      	b.n	8000722 <__aeabi_fadd+0x18e>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	2400      	movs	r4, #0
 8000832:	469c      	mov	ip, r3
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	e6f2      	b.n	800061e <__aeabi_fadd+0x8a>
 8000838:	0030      	movs	r0, r6
 800083a:	4440      	add	r0, r8
 800083c:	2501      	movs	r5, #1
 800083e:	0143      	lsls	r3, r0, #5
 8000840:	d400      	bmi.n	8000844 <__aeabi_fadd+0x2b0>
 8000842:	e75b      	b.n	80006fc <__aeabi_fadd+0x168>
 8000844:	2502      	movs	r5, #2
 8000846:	e718      	b.n	800067a <__aeabi_fadd+0xe6>
 8000848:	4643      	mov	r3, r8
 800084a:	2501      	movs	r5, #1
 800084c:	1b98      	subs	r0, r3, r6
 800084e:	e6c5      	b.n	80005dc <__aeabi_fadd+0x48>
 8000850:	2320      	movs	r3, #32
 8000852:	4644      	mov	r4, r8
 8000854:	4640      	mov	r0, r8
 8000856:	40d4      	lsrs	r4, r2
 8000858:	1a9a      	subs	r2, r3, r2
 800085a:	4090      	lsls	r0, r2
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	4320      	orrs	r0, r4
 8000862:	e7a4      	b.n	80007ae <__aeabi_fadd+0x21a>
 8000864:	000d      	movs	r5, r1
 8000866:	e74d      	b.n	8000704 <__aeabi_fadd+0x170>
 8000868:	2320      	movs	r3, #32
 800086a:	4641      	mov	r1, r8
 800086c:	4640      	mov	r0, r8
 800086e:	40d1      	lsrs	r1, r2
 8000870:	1a9a      	subs	r2, r3, r2
 8000872:	4090      	lsls	r0, r2
 8000874:	1e43      	subs	r3, r0, #1
 8000876:	4198      	sbcs	r0, r3
 8000878:	4308      	orrs	r0, r1
 800087a:	e770      	b.n	800075e <__aeabi_fadd+0x1ca>
 800087c:	4642      	mov	r2, r8
 800087e:	2a00      	cmp	r2, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x2f0>
 8000882:	e74f      	b.n	8000724 <__aeabi_fadd+0x190>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x2f6>
 8000888:	e74d      	b.n	8000726 <__aeabi_fadd+0x192>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	03d2      	lsls	r2, r2, #15
 800088e:	4213      	tst	r3, r2
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x300>
 8000892:	e748      	b.n	8000726 <__aeabi_fadd+0x192>
 8000894:	4210      	tst	r0, r2
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x306>
 8000898:	e745      	b.n	8000726 <__aeabi_fadd+0x192>
 800089a:	0003      	movs	r3, r0
 800089c:	e743      	b.n	8000726 <__aeabi_fadd+0x192>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d090      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80008a2:	000c      	movs	r4, r1
 80008a4:	4684      	mov	ip, r0
 80008a6:	2200      	movs	r2, #0
 80008a8:	e6b9      	b.n	800061e <__aeabi_fadd+0x8a>
 80008aa:	4643      	mov	r3, r8
 80008ac:	000c      	movs	r4, r1
 80008ae:	1af0      	subs	r0, r6, r3
 80008b0:	3501      	adds	r5, #1
 80008b2:	e693      	b.n	80005dc <__aeabi_fadd+0x48>
 80008b4:	4684      	mov	ip, r0
 80008b6:	2200      	movs	r2, #0
 80008b8:	e6b1      	b.n	800061e <__aeabi_fadd+0x8a>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x32c>
 80008be:	e71d      	b.n	80006fc <__aeabi_fadd+0x168>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2400      	movs	r4, #0
 80008c4:	469c      	mov	ip, r3
 80008c6:	e6aa      	b.n	800061e <__aeabi_fadd+0x8a>
 80008c8:	fbffffff 	.word	0xfbffffff
 80008cc:	7dffffff 	.word	0x7dffffff

080008d0 <__aeabi_fdiv>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	464f      	mov	r7, r9
 80008d4:	4646      	mov	r6, r8
 80008d6:	46d6      	mov	lr, sl
 80008d8:	0245      	lsls	r5, r0, #9
 80008da:	b5c0      	push	{r6, r7, lr}
 80008dc:	0047      	lsls	r7, r0, #1
 80008de:	1c0c      	adds	r4, r1, #0
 80008e0:	0a6d      	lsrs	r5, r5, #9
 80008e2:	0e3f      	lsrs	r7, r7, #24
 80008e4:	0fc6      	lsrs	r6, r0, #31
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0x1c>
 80008ea:	e070      	b.n	80009ce <__aeabi_fdiv+0xfe>
 80008ec:	2fff      	cmp	r7, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fdiv+0x22>
 80008f0:	e075      	b.n	80009de <__aeabi_fdiv+0x10e>
 80008f2:	00eb      	lsls	r3, r5, #3
 80008f4:	2580      	movs	r5, #128	; 0x80
 80008f6:	04ed      	lsls	r5, r5, #19
 80008f8:	431d      	orrs	r5, r3
 80008fa:	2300      	movs	r3, #0
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	3f7f      	subs	r7, #127	; 0x7f
 8000902:	0260      	lsls	r0, r4, #9
 8000904:	0a43      	lsrs	r3, r0, #9
 8000906:	4698      	mov	r8, r3
 8000908:	0063      	lsls	r3, r4, #1
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	0fe4      	lsrs	r4, r4, #31
 800090e:	2b00      	cmp	r3, #0
 8000910:	d04e      	beq.n	80009b0 <__aeabi_fdiv+0xe0>
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d046      	beq.n	80009a4 <__aeabi_fdiv+0xd4>
 8000916:	4642      	mov	r2, r8
 8000918:	00d0      	lsls	r0, r2, #3
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	04d2      	lsls	r2, r2, #19
 800091e:	4302      	orrs	r2, r0
 8000920:	4690      	mov	r8, r2
 8000922:	2200      	movs	r2, #0
 8000924:	3b7f      	subs	r3, #127	; 0x7f
 8000926:	0031      	movs	r1, r6
 8000928:	1aff      	subs	r7, r7, r3
 800092a:	464b      	mov	r3, r9
 800092c:	4061      	eors	r1, r4
 800092e:	b2c9      	uxtb	r1, r1
 8000930:	4313      	orrs	r3, r2
 8000932:	2b0f      	cmp	r3, #15
 8000934:	d900      	bls.n	8000938 <__aeabi_fdiv+0x68>
 8000936:	e0b5      	b.n	8000aa4 <__aeabi_fdiv+0x1d4>
 8000938:	486e      	ldr	r0, [pc, #440]	; (8000af4 <__aeabi_fdiv+0x224>)
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	58c3      	ldr	r3, [r0, r3]
 800093e:	469f      	mov	pc, r3
 8000940:	2300      	movs	r3, #0
 8000942:	4698      	mov	r8, r3
 8000944:	0026      	movs	r6, r4
 8000946:	4645      	mov	r5, r8
 8000948:	4692      	mov	sl, r2
 800094a:	4653      	mov	r3, sl
 800094c:	2b02      	cmp	r3, #2
 800094e:	d100      	bne.n	8000952 <__aeabi_fdiv+0x82>
 8000950:	e089      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000952:	2b03      	cmp	r3, #3
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x88>
 8000956:	e09e      	b.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000958:	2b01      	cmp	r3, #1
 800095a:	d018      	beq.n	800098e <__aeabi_fdiv+0xbe>
 800095c:	003b      	movs	r3, r7
 800095e:	337f      	adds	r3, #127	; 0x7f
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd69      	ble.n	8000a38 <__aeabi_fdiv+0x168>
 8000964:	076a      	lsls	r2, r5, #29
 8000966:	d004      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000968:	220f      	movs	r2, #15
 800096a:	402a      	ands	r2, r5
 800096c:	2a04      	cmp	r2, #4
 800096e:	d000      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000970:	3504      	adds	r5, #4
 8000972:	012a      	lsls	r2, r5, #4
 8000974:	d503      	bpl.n	800097e <__aeabi_fdiv+0xae>
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <__aeabi_fdiv+0x228>)
 8000978:	401d      	ands	r5, r3
 800097a:	003b      	movs	r3, r7
 800097c:	3380      	adds	r3, #128	; 0x80
 800097e:	2bfe      	cmp	r3, #254	; 0xfe
 8000980:	dd00      	ble.n	8000984 <__aeabi_fdiv+0xb4>
 8000982:	e070      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e002      	b.n	8000992 <__aeabi_fdiv+0xc2>
 800098c:	000e      	movs	r6, r1
 800098e:	2000      	movs	r0, #0
 8000990:	2500      	movs	r5, #0
 8000992:	05c0      	lsls	r0, r0, #23
 8000994:	4328      	orrs	r0, r5
 8000996:	07f6      	lsls	r6, r6, #31
 8000998:	4330      	orrs	r0, r6
 800099a:	bce0      	pop	{r5, r6, r7}
 800099c:	46ba      	mov	sl, r7
 800099e:	46b1      	mov	r9, r6
 80009a0:	46a8      	mov	r8, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d13f      	bne.n	8000a2a <__aeabi_fdiv+0x15a>
 80009aa:	2202      	movs	r2, #2
 80009ac:	3fff      	subs	r7, #255	; 0xff
 80009ae:	e003      	b.n	80009b8 <__aeabi_fdiv+0xe8>
 80009b0:	4643      	mov	r3, r8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12d      	bne.n	8000a12 <__aeabi_fdiv+0x142>
 80009b6:	2201      	movs	r2, #1
 80009b8:	0031      	movs	r1, r6
 80009ba:	464b      	mov	r3, r9
 80009bc:	4061      	eors	r1, r4
 80009be:	b2c9      	uxtb	r1, r1
 80009c0:	4313      	orrs	r3, r2
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d834      	bhi.n	8000a30 <__aeabi_fdiv+0x160>
 80009c6:	484d      	ldr	r0, [pc, #308]	; (8000afc <__aeabi_fdiv+0x22c>)
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	58c3      	ldr	r3, [r0, r3]
 80009cc:	469f      	mov	pc, r3
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d113      	bne.n	80009fa <__aeabi_fdiv+0x12a>
 80009d2:	2304      	movs	r3, #4
 80009d4:	4699      	mov	r9, r3
 80009d6:	3b03      	subs	r3, #3
 80009d8:	2700      	movs	r7, #0
 80009da:	469a      	mov	sl, r3
 80009dc:	e791      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d105      	bne.n	80009ee <__aeabi_fdiv+0x11e>
 80009e2:	2308      	movs	r3, #8
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b06      	subs	r3, #6
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e789      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009ee:	230c      	movs	r3, #12
 80009f0:	4699      	mov	r9, r3
 80009f2:	3b09      	subs	r3, #9
 80009f4:	27ff      	movs	r7, #255	; 0xff
 80009f6:	469a      	mov	sl, r3
 80009f8:	e783      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009fa:	0028      	movs	r0, r5
 80009fc:	f002 fb28 	bl	8003050 <__clzsi2>
 8000a00:	2776      	movs	r7, #118	; 0x76
 8000a02:	1f43      	subs	r3, r0, #5
 8000a04:	409d      	lsls	r5, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	427f      	negs	r7, r7
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	1a3f      	subs	r7, r7, r0
 8000a10:	e777      	b.n	8000902 <__aeabi_fdiv+0x32>
 8000a12:	4640      	mov	r0, r8
 8000a14:	f002 fb1c 	bl	8003050 <__clzsi2>
 8000a18:	4642      	mov	r2, r8
 8000a1a:	1f43      	subs	r3, r0, #5
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	2376      	movs	r3, #118	; 0x76
 8000a20:	425b      	negs	r3, r3
 8000a22:	4690      	mov	r8, r2
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	2200      	movs	r2, #0
 8000a28:	e77d      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	e77a      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a30:	000e      	movs	r6, r1
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2500      	movs	r5, #0
 8000a36:	e7ac      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	1ac0      	subs	r0, r0, r3
 8000a3c:	281b      	cmp	r0, #27
 8000a3e:	dca6      	bgt.n	800098e <__aeabi_fdiv+0xbe>
 8000a40:	379e      	adds	r7, #158	; 0x9e
 8000a42:	002a      	movs	r2, r5
 8000a44:	40bd      	lsls	r5, r7
 8000a46:	40c2      	lsrs	r2, r0
 8000a48:	1e6b      	subs	r3, r5, #1
 8000a4a:	419d      	sbcs	r5, r3
 8000a4c:	4315      	orrs	r5, r2
 8000a4e:	076b      	lsls	r3, r5, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a52:	230f      	movs	r3, #15
 8000a54:	402b      	ands	r3, r5
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a5a:	3504      	adds	r5, #4
 8000a5c:	016b      	lsls	r3, r5, #5
 8000a5e:	d544      	bpl.n	8000aea <__aeabi_fdiv+0x21a>
 8000a60:	2001      	movs	r0, #1
 8000a62:	2500      	movs	r5, #0
 8000a64:	e795      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a66:	20ff      	movs	r0, #255	; 0xff
 8000a68:	2500      	movs	r5, #0
 8000a6a:	e792      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	2600      	movs	r6, #0
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	03ed      	lsls	r5, r5, #15
 8000a74:	e78d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a76:	2300      	movs	r3, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	03c0      	lsls	r0, r0, #15
 8000a7e:	4205      	tst	r5, r0
 8000a80:	d009      	beq.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a82:	4643      	mov	r3, r8
 8000a84:	4203      	tst	r3, r0
 8000a86:	d106      	bne.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a88:	4645      	mov	r5, r8
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	026d      	lsls	r5, r5, #9
 8000a8e:	0026      	movs	r6, r4
 8000a90:	20ff      	movs	r0, #255	; 0xff
 8000a92:	0a6d      	lsrs	r5, r5, #9
 8000a94:	e77d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a96:	2080      	movs	r0, #128	; 0x80
 8000a98:	03c0      	lsls	r0, r0, #15
 8000a9a:	4305      	orrs	r5, r0
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	0a6d      	lsrs	r5, r5, #9
 8000aa2:	e776      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	0150      	lsls	r0, r2, #5
 8000aaa:	4283      	cmp	r3, r0
 8000aac:	d219      	bcs.n	8000ae2 <__aeabi_fdiv+0x212>
 8000aae:	221b      	movs	r2, #27
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	3f01      	subs	r7, #1
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	006d      	lsls	r5, r5, #1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	db01      	blt.n	8000ac4 <__aeabi_fdiv+0x1f4>
 8000ac0:	4298      	cmp	r0, r3
 8000ac2:	d801      	bhi.n	8000ac8 <__aeabi_fdiv+0x1f8>
 8000ac4:	1a1b      	subs	r3, r3, r0
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d1f3      	bne.n	8000ab6 <__aeabi_fdiv+0x1e6>
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	4193      	sbcs	r3, r2
 8000ad2:	431d      	orrs	r5, r3
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	000e      	movs	r6, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_fdiv+0x210>
 8000ade:	e741      	b.n	8000964 <__aeabi_fdiv+0x94>
 8000ae0:	e7aa      	b.n	8000a38 <__aeabi_fdiv+0x168>
 8000ae2:	221a      	movs	r2, #26
 8000ae4:	2501      	movs	r5, #1
 8000ae6:	1a1b      	subs	r3, r3, r0
 8000ae8:	e7e4      	b.n	8000ab4 <__aeabi_fdiv+0x1e4>
 8000aea:	01ad      	lsls	r5, r5, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	e74f      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	0801862c 	.word	0x0801862c
 8000af8:	f7ffffff 	.word	0xf7ffffff
 8000afc:	0801866c 	.word	0x0801866c

08000b00 <__eqsf2>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	0042      	lsls	r2, r0, #1
 8000b04:	0245      	lsls	r5, r0, #9
 8000b06:	024e      	lsls	r6, r1, #9
 8000b08:	004c      	lsls	r4, r1, #1
 8000b0a:	0fc3      	lsrs	r3, r0, #31
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	2001      	movs	r0, #1
 8000b10:	0e12      	lsrs	r2, r2, #24
 8000b12:	0a76      	lsrs	r6, r6, #9
 8000b14:	0e24      	lsrs	r4, r4, #24
 8000b16:	0fc9      	lsrs	r1, r1, #31
 8000b18:	2aff      	cmp	r2, #255	; 0xff
 8000b1a:	d006      	beq.n	8000b2a <__eqsf2+0x2a>
 8000b1c:	2cff      	cmp	r4, #255	; 0xff
 8000b1e:	d003      	beq.n	8000b28 <__eqsf2+0x28>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	d101      	bne.n	8000b28 <__eqsf2+0x28>
 8000b24:	42b5      	cmp	r5, r6
 8000b26:	d006      	beq.n	8000b36 <__eqsf2+0x36>
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d1fc      	bne.n	8000b28 <__eqsf2+0x28>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d1fa      	bne.n	8000b28 <__eqsf2+0x28>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1f8      	bne.n	8000b28 <__eqsf2+0x28>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d006      	beq.n	8000b48 <__eqsf2+0x48>
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d1f3      	bne.n	8000b28 <__eqsf2+0x28>
 8000b40:	0028      	movs	r0, r5
 8000b42:	1e43      	subs	r3, r0, #1
 8000b44:	4198      	sbcs	r0, r3
 8000b46:	e7ef      	b.n	8000b28 <__eqsf2+0x28>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7ed      	b.n	8000b28 <__eqsf2+0x28>

08000b4c <__gesf2>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	0042      	lsls	r2, r0, #1
 8000b50:	0245      	lsls	r5, r0, #9
 8000b52:	024e      	lsls	r6, r1, #9
 8000b54:	004c      	lsls	r4, r1, #1
 8000b56:	0fc3      	lsrs	r3, r0, #31
 8000b58:	0a6d      	lsrs	r5, r5, #9
 8000b5a:	0e12      	lsrs	r2, r2, #24
 8000b5c:	0a76      	lsrs	r6, r6, #9
 8000b5e:	0e24      	lsrs	r4, r4, #24
 8000b60:	0fc8      	lsrs	r0, r1, #31
 8000b62:	2aff      	cmp	r2, #255	; 0xff
 8000b64:	d01b      	beq.n	8000b9e <__gesf2+0x52>
 8000b66:	2cff      	cmp	r4, #255	; 0xff
 8000b68:	d00e      	beq.n	8000b88 <__gesf2+0x3c>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d11b      	bne.n	8000ba6 <__gesf2+0x5a>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d101      	bne.n	8000b76 <__gesf2+0x2a>
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d01c      	beq.n	8000bb0 <__gesf2+0x64>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d00c      	beq.n	8000b94 <__gesf2+0x48>
 8000b7a:	4283      	cmp	r3, r0
 8000b7c:	d01c      	beq.n	8000bb8 <__gesf2+0x6c>
 8000b7e:	2102      	movs	r1, #2
 8000b80:	1e58      	subs	r0, r3, #1
 8000b82:	4008      	ands	r0, r1
 8000b84:	3801      	subs	r0, #1
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d122      	bne.n	8000bd2 <__gesf2+0x86>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d1f4      	bne.n	8000b7a <__gesf2+0x2e>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1f2      	bne.n	8000b7a <__gesf2+0x2e>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1f6      	bne.n	8000b86 <__gesf2+0x3a>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	e7f3      	b.n	8000b86 <__gesf2+0x3a>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d117      	bne.n	8000bd2 <__gesf2+0x86>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d0f0      	beq.n	8000b88 <__gesf2+0x3c>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d1e7      	bne.n	8000b7a <__gesf2+0x2e>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d1e5      	bne.n	8000b7a <__gesf2+0x2e>
 8000bae:	e7e6      	b.n	8000b7e <__gesf2+0x32>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e7      	beq.n	8000b86 <__gesf2+0x3a>
 8000bb6:	e7e2      	b.n	8000b7e <__gesf2+0x32>
 8000bb8:	42a2      	cmp	r2, r4
 8000bba:	dc05      	bgt.n	8000bc8 <__gesf2+0x7c>
 8000bbc:	dbea      	blt.n	8000b94 <__gesf2+0x48>
 8000bbe:	42b5      	cmp	r5, r6
 8000bc0:	d802      	bhi.n	8000bc8 <__gesf2+0x7c>
 8000bc2:	d3e7      	bcc.n	8000b94 <__gesf2+0x48>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7de      	b.n	8000b86 <__gesf2+0x3a>
 8000bc8:	4243      	negs	r3, r0
 8000bca:	4158      	adcs	r0, r3
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7d9      	b.n	8000b86 <__gesf2+0x3a>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	e7d6      	b.n	8000b86 <__gesf2+0x3a>

08000bd8 <__lesf2>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0245      	lsls	r5, r0, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	0a76      	lsrs	r6, r6, #9
 8000bea:	0e24      	lsrs	r4, r4, #24
 8000bec:	0fc8      	lsrs	r0, r1, #31
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d00b      	beq.n	8000c0a <__lesf2+0x32>
 8000bf2:	2cff      	cmp	r4, #255	; 0xff
 8000bf4:	d00d      	beq.n	8000c12 <__lesf2+0x3a>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d11f      	bne.n	8000c3a <__lesf2+0x62>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d116      	bne.n	8000c2c <__lesf2+0x54>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d114      	bne.n	8000c2c <__lesf2+0x54>
 8000c02:	2000      	movs	r0, #0
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d010      	beq.n	8000c2a <__lesf2+0x52>
 8000c08:	e009      	b.n	8000c1e <__lesf2+0x46>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d10c      	bne.n	8000c28 <__lesf2+0x50>
 8000c0e:	2cff      	cmp	r4, #255	; 0xff
 8000c10:	d113      	bne.n	8000c3a <__lesf2+0x62>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d108      	bne.n	8000c28 <__lesf2+0x50>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d008      	beq.n	8000c2c <__lesf2+0x54>
 8000c1a:	4283      	cmp	r3, r0
 8000c1c:	d012      	beq.n	8000c44 <__lesf2+0x6c>
 8000c1e:	2102      	movs	r1, #2
 8000c20:	1e58      	subs	r0, r3, #1
 8000c22:	4008      	ands	r0, r1
 8000c24:	3801      	subs	r0, #1
 8000c26:	e000      	b.n	8000c2a <__lesf2+0x52>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d1f4      	bne.n	8000c1a <__lesf2+0x42>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d1fa      	bne.n	8000c2a <__lesf2+0x52>
 8000c34:	2001      	movs	r0, #1
 8000c36:	4240      	negs	r0, r0
 8000c38:	e7f7      	b.n	8000c2a <__lesf2+0x52>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d1ed      	bne.n	8000c1a <__lesf2+0x42>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d1eb      	bne.n	8000c1a <__lesf2+0x42>
 8000c42:	e7ec      	b.n	8000c1e <__lesf2+0x46>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__lesf2+0x7c>
 8000c48:	dbf2      	blt.n	8000c30 <__lesf2+0x58>
 8000c4a:	42b5      	cmp	r5, r6
 8000c4c:	d802      	bhi.n	8000c54 <__lesf2+0x7c>
 8000c4e:	d3ef      	bcc.n	8000c30 <__lesf2+0x58>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7ea      	b.n	8000c2a <__lesf2+0x52>
 8000c54:	4243      	negs	r3, r0
 8000c56:	4158      	adcs	r0, r3
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	3801      	subs	r0, #1
 8000c5c:	e7e5      	b.n	8000c2a <__lesf2+0x52>
 8000c5e:	46c0      	nop			; (mov r8, r8)

08000c60 <__aeabi_fmul>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	464f      	mov	r7, r9
 8000c64:	4646      	mov	r6, r8
 8000c66:	46d6      	mov	lr, sl
 8000c68:	0244      	lsls	r4, r0, #9
 8000c6a:	0045      	lsls	r5, r0, #1
 8000c6c:	b5c0      	push	{r6, r7, lr}
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	1c0f      	adds	r7, r1, #0
 8000c72:	0e2d      	lsrs	r5, r5, #24
 8000c74:	0fc6      	lsrs	r6, r0, #31
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fmul+0x1c>
 8000c7a:	e08d      	b.n	8000d98 <__aeabi_fmul+0x138>
 8000c7c:	2dff      	cmp	r5, #255	; 0xff
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_fmul+0x22>
 8000c80:	e092      	b.n	8000da8 <__aeabi_fmul+0x148>
 8000c82:	2300      	movs	r3, #0
 8000c84:	2080      	movs	r0, #128	; 0x80
 8000c86:	4699      	mov	r9, r3
 8000c88:	469a      	mov	sl, r3
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	04c0      	lsls	r0, r0, #19
 8000c8e:	4304      	orrs	r4, r0
 8000c90:	3d7f      	subs	r5, #127	; 0x7f
 8000c92:	0278      	lsls	r0, r7, #9
 8000c94:	0a43      	lsrs	r3, r0, #9
 8000c96:	4698      	mov	r8, r3
 8000c98:	007b      	lsls	r3, r7, #1
 8000c9a:	0e1b      	lsrs	r3, r3, #24
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fmul+0x44>
 8000ca2:	e070      	b.n	8000d86 <__aeabi_fmul+0x126>
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fmul+0x4a>
 8000ca8:	e086      	b.n	8000db8 <__aeabi_fmul+0x158>
 8000caa:	4642      	mov	r2, r8
 8000cac:	00d0      	lsls	r0, r2, #3
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	3b7f      	subs	r3, #127	; 0x7f
 8000cb2:	18ed      	adds	r5, r5, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	04d2      	lsls	r2, r2, #19
 8000cb8:	4302      	orrs	r2, r0
 8000cba:	4690      	mov	r8, r2
 8000cbc:	469c      	mov	ip, r3
 8000cbe:	0031      	movs	r1, r6
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	4079      	eors	r1, r7
 8000cc4:	1c68      	adds	r0, r5, #1
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d81c      	bhi.n	8000d04 <__aeabi_fmul+0xa4>
 8000cca:	4a76      	ldr	r2, [pc, #472]	; (8000ea4 <__aeabi_fmul+0x244>)
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	0039      	movs	r1, r7
 8000cd4:	4644      	mov	r4, r8
 8000cd6:	46e2      	mov	sl, ip
 8000cd8:	4653      	mov	r3, sl
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d00f      	beq.n	8000cfe <__aeabi_fmul+0x9e>
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fmul+0x84>
 8000ce2:	e0d7      	b.n	8000e94 <__aeabi_fmul+0x234>
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d137      	bne.n	8000d58 <__aeabi_fmul+0xf8>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	2400      	movs	r4, #0
 8000cec:	05c0      	lsls	r0, r0, #23
 8000cee:	4320      	orrs	r0, r4
 8000cf0:	07c9      	lsls	r1, r1, #31
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	bce0      	pop	{r5, r6, r7}
 8000cf6:	46ba      	mov	sl, r7
 8000cf8:	46b1      	mov	r9, r6
 8000cfa:	46a8      	mov	r8, r5
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfe:	20ff      	movs	r0, #255	; 0xff
 8000d00:	2400      	movs	r4, #0
 8000d02:	e7f3      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d04:	0c26      	lsrs	r6, r4, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c22      	lsrs	r2, r4, #16
 8000d0a:	4644      	mov	r4, r8
 8000d0c:	0424      	lsls	r4, r4, #16
 8000d0e:	0c24      	lsrs	r4, r4, #16
 8000d10:	4643      	mov	r3, r8
 8000d12:	0027      	movs	r7, r4
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	4357      	muls	r7, r2
 8000d18:	4374      	muls	r4, r6
 8000d1a:	435a      	muls	r2, r3
 8000d1c:	435e      	muls	r6, r3
 8000d1e:	1912      	adds	r2, r2, r4
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	189b      	adds	r3, r3, r2
 8000d24:	429c      	cmp	r4, r3
 8000d26:	d903      	bls.n	8000d30 <__aeabi_fmul+0xd0>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	4466      	add	r6, ip
 8000d30:	043f      	lsls	r7, r7, #16
 8000d32:	041a      	lsls	r2, r3, #16
 8000d34:	0c3f      	lsrs	r7, r7, #16
 8000d36:	19d2      	adds	r2, r2, r7
 8000d38:	0194      	lsls	r4, r2, #6
 8000d3a:	1e67      	subs	r7, r4, #1
 8000d3c:	41bc      	sbcs	r4, r7
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	0e92      	lsrs	r2, r2, #26
 8000d42:	199b      	adds	r3, r3, r6
 8000d44:	4314      	orrs	r4, r2
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	d400      	bmi.n	8000d50 <__aeabi_fmul+0xf0>
 8000d4e:	e09b      	b.n	8000e88 <__aeabi_fmul+0x228>
 8000d50:	2301      	movs	r3, #1
 8000d52:	0862      	lsrs	r2, r4, #1
 8000d54:	401c      	ands	r4, r3
 8000d56:	4314      	orrs	r4, r2
 8000d58:	0002      	movs	r2, r0
 8000d5a:	327f      	adds	r2, #127	; 0x7f
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	dd64      	ble.n	8000e2a <__aeabi_fmul+0x1ca>
 8000d60:	0763      	lsls	r3, r4, #29
 8000d62:	d004      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d64:	230f      	movs	r3, #15
 8000d66:	4023      	ands	r3, r4
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d6c:	3404      	adds	r4, #4
 8000d6e:	0123      	lsls	r3, r4, #4
 8000d70:	d503      	bpl.n	8000d7a <__aeabi_fmul+0x11a>
 8000d72:	0002      	movs	r2, r0
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <__aeabi_fmul+0x248>)
 8000d76:	3280      	adds	r2, #128	; 0x80
 8000d78:	401c      	ands	r4, r3
 8000d7a:	2afe      	cmp	r2, #254	; 0xfe
 8000d7c:	dcbf      	bgt.n	8000cfe <__aeabi_fmul+0x9e>
 8000d7e:	01a4      	lsls	r4, r4, #6
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	b2d0      	uxtb	r0, r2
 8000d84:	e7b2      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d86:	4643      	mov	r3, r8
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d13d      	bne.n	8000e08 <__aeabi_fmul+0x1a8>
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	3301      	adds	r3, #1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	e792      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d129      	bne.n	8000df0 <__aeabi_fmul+0x190>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b03      	subs	r3, #3
 8000da2:	2500      	movs	r5, #0
 8000da4:	469a      	mov	sl, r3
 8000da6:	e774      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d11b      	bne.n	8000de4 <__aeabi_fmul+0x184>
 8000dac:	2308      	movs	r3, #8
 8000dae:	4699      	mov	r9, r3
 8000db0:	3b06      	subs	r3, #6
 8000db2:	25ff      	movs	r5, #255	; 0xff
 8000db4:	469a      	mov	sl, r3
 8000db6:	e76c      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000db8:	4643      	mov	r3, r8
 8000dba:	35ff      	adds	r5, #255	; 0xff
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10b      	bne.n	8000dd8 <__aeabi_fmul+0x178>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	469c      	mov	ip, r3
 8000dca:	e778      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000dcc:	4653      	mov	r3, sl
 8000dce:	0031      	movs	r1, r6
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fmul+0x176>
 8000dd4:	e783      	b.n	8000cde <__aeabi_fmul+0x7e>
 8000dd6:	e792      	b.n	8000cfe <__aeabi_fmul+0x9e>
 8000dd8:	2303      	movs	r3, #3
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000de4:	230c      	movs	r3, #12
 8000de6:	4699      	mov	r9, r3
 8000de8:	3b09      	subs	r3, #9
 8000dea:	25ff      	movs	r5, #255	; 0xff
 8000dec:	469a      	mov	sl, r3
 8000dee:	e750      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000df0:	0020      	movs	r0, r4
 8000df2:	f002 f92d 	bl	8003050 <__clzsi2>
 8000df6:	2576      	movs	r5, #118	; 0x76
 8000df8:	1f43      	subs	r3, r0, #5
 8000dfa:	409c      	lsls	r4, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	426d      	negs	r5, r5
 8000e00:	4699      	mov	r9, r3
 8000e02:	469a      	mov	sl, r3
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	e744      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f002 f921 	bl	8003050 <__clzsi2>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	1f43      	subs	r3, r0, #5
 8000e12:	409a      	lsls	r2, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	1a2d      	subs	r5, r5, r0
 8000e18:	4690      	mov	r8, r2
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	3d76      	subs	r5, #118	; 0x76
 8000e1e:	e74e      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	2100      	movs	r1, #0
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	03e4      	lsls	r4, r4, #15
 8000e28:	e760      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	2b1b      	cmp	r3, #27
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fmul+0x1d4>
 8000e32:	e759      	b.n	8000ce8 <__aeabi_fmul+0x88>
 8000e34:	0022      	movs	r2, r4
 8000e36:	309e      	adds	r0, #158	; 0x9e
 8000e38:	40da      	lsrs	r2, r3
 8000e3a:	4084      	lsls	r4, r0
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	1e62      	subs	r2, r4, #1
 8000e40:	4194      	sbcs	r4, r2
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0763      	lsls	r3, r4, #29
 8000e46:	d004      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e48:	230f      	movs	r3, #15
 8000e4a:	4023      	ands	r3, r4
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e50:	3404      	adds	r4, #4
 8000e52:	0163      	lsls	r3, r4, #5
 8000e54:	d51a      	bpl.n	8000e8c <__aeabi_fmul+0x22c>
 8000e56:	2001      	movs	r0, #1
 8000e58:	2400      	movs	r4, #0
 8000e5a:	e747      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e5c:	2080      	movs	r0, #128	; 0x80
 8000e5e:	03c0      	lsls	r0, r0, #15
 8000e60:	4204      	tst	r4, r0
 8000e62:	d009      	beq.n	8000e78 <__aeabi_fmul+0x218>
 8000e64:	4643      	mov	r3, r8
 8000e66:	4203      	tst	r3, r0
 8000e68:	d106      	bne.n	8000e78 <__aeabi_fmul+0x218>
 8000e6a:	4644      	mov	r4, r8
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	0264      	lsls	r4, r4, #9
 8000e70:	0039      	movs	r1, r7
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	0a64      	lsrs	r4, r4, #9
 8000e76:	e739      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e78:	2080      	movs	r0, #128	; 0x80
 8000e7a:	03c0      	lsls	r0, r0, #15
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	0264      	lsls	r4, r4, #9
 8000e80:	0031      	movs	r1, r6
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	0a64      	lsrs	r4, r4, #9
 8000e86:	e731      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e88:	0028      	movs	r0, r5
 8000e8a:	e765      	b.n	8000d58 <__aeabi_fmul+0xf8>
 8000e8c:	01a4      	lsls	r4, r4, #6
 8000e8e:	2000      	movs	r0, #0
 8000e90:	0a64      	lsrs	r4, r4, #9
 8000e92:	e72b      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e94:	2080      	movs	r0, #128	; 0x80
 8000e96:	03c0      	lsls	r0, r0, #15
 8000e98:	4304      	orrs	r4, r0
 8000e9a:	0264      	lsls	r4, r4, #9
 8000e9c:	20ff      	movs	r0, #255	; 0xff
 8000e9e:	0a64      	lsrs	r4, r4, #9
 8000ea0:	e724      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	080186ac 	.word	0x080186ac
 8000ea8:	f7ffffff 	.word	0xf7ffffff

08000eac <__aeabi_fsub>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	46ce      	mov	lr, r9
 8000eb0:	4647      	mov	r7, r8
 8000eb2:	0243      	lsls	r3, r0, #9
 8000eb4:	0a5b      	lsrs	r3, r3, #9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	00da      	lsls	r2, r3, #3
 8000eba:	4694      	mov	ip, r2
 8000ebc:	0a72      	lsrs	r2, r6, #9
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	0045      	lsls	r5, r0, #1
 8000ec2:	004a      	lsls	r2, r1, #1
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	0e2d      	lsrs	r5, r5, #24
 8000ec8:	001f      	movs	r7, r3
 8000eca:	0fc4      	lsrs	r4, r0, #31
 8000ecc:	0e12      	lsrs	r2, r2, #24
 8000ece:	0fc9      	lsrs	r1, r1, #31
 8000ed0:	09b6      	lsrs	r6, r6, #6
 8000ed2:	2aff      	cmp	r2, #255	; 0xff
 8000ed4:	d05b      	beq.n	8000f8e <__aeabi_fsub+0xe2>
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4041      	eors	r1, r0
 8000eda:	428c      	cmp	r4, r1
 8000edc:	d039      	beq.n	8000f52 <__aeabi_fsub+0xa6>
 8000ede:	1aa8      	subs	r0, r5, r2
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	dd5a      	ble.n	8000f9a <__aeabi_fsub+0xee>
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d06a      	beq.n	8000fbe <__aeabi_fsub+0x112>
 8000ee8:	2dff      	cmp	r5, #255	; 0xff
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x42>
 8000eec:	e0d9      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	04d2      	lsls	r2, r2, #19
 8000ef2:	4316      	orrs	r6, r2
 8000ef4:	281b      	cmp	r0, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0x4e>
 8000ef8:	e0e9      	b.n	80010ce <__aeabi_fsub+0x222>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4663      	mov	r3, ip
 8000efe:	1a18      	subs	r0, r3, r0
 8000f00:	0143      	lsls	r3, r0, #5
 8000f02:	d400      	bmi.n	8000f06 <__aeabi_fsub+0x5a>
 8000f04:	e0b4      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8000f06:	0180      	lsls	r0, r0, #6
 8000f08:	0987      	lsrs	r7, r0, #6
 8000f0a:	0038      	movs	r0, r7
 8000f0c:	f002 f8a0 	bl	8003050 <__clzsi2>
 8000f10:	3805      	subs	r0, #5
 8000f12:	4087      	lsls	r7, r0
 8000f14:	4285      	cmp	r5, r0
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x6e>
 8000f18:	e0cc      	b.n	80010b4 <__aeabi_fsub+0x208>
 8000f1a:	1a2d      	subs	r5, r5, r0
 8000f1c:	48b5      	ldr	r0, [pc, #724]	; (80011f4 <__aeabi_fsub+0x348>)
 8000f1e:	4038      	ands	r0, r7
 8000f20:	0743      	lsls	r3, r0, #29
 8000f22:	d004      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f24:	230f      	movs	r3, #15
 8000f26:	4003      	ands	r3, r0
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f2c:	3004      	adds	r0, #4
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0x88>
 8000f32:	e0a0      	b.n	8001076 <__aeabi_fsub+0x1ca>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	; 0xfe
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x90>
 8000f3a:	e08d      	b.n	8001058 <__aeabi_fsub+0x1ac>
 8000f3c:	0180      	lsls	r0, r0, #6
 8000f3e:	0a47      	lsrs	r7, r0, #9
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	05d0      	lsls	r0, r2, #23
 8000f44:	4338      	orrs	r0, r7
 8000f46:	07e4      	lsls	r4, r4, #31
 8000f48:	4320      	orrs	r0, r4
 8000f4a:	bcc0      	pop	{r6, r7}
 8000f4c:	46b9      	mov	r9, r7
 8000f4e:	46b0      	mov	r8, r6
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f52:	1aa8      	subs	r0, r5, r2
 8000f54:	4680      	mov	r8, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	dd45      	ble.n	8000fe6 <__aeabi_fsub+0x13a>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d070      	beq.n	8001040 <__aeabi_fsub+0x194>
 8000f5e:	2dff      	cmp	r5, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0xb8>
 8000f62:	e09e      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	04db      	lsls	r3, r3, #19
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	2b1b      	cmp	r3, #27
 8000f6e:	dc00      	bgt.n	8000f72 <__aeabi_fsub+0xc6>
 8000f70:	e0d2      	b.n	8001118 <__aeabi_fsub+0x26c>
 8000f72:	2001      	movs	r0, #1
 8000f74:	4460      	add	r0, ip
 8000f76:	0143      	lsls	r3, r0, #5
 8000f78:	d57a      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 8000f7a:	3501      	adds	r5, #1
 8000f7c:	2dff      	cmp	r5, #255	; 0xff
 8000f7e:	d06b      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4a9d      	ldr	r2, [pc, #628]	; (80011f8 <__aeabi_fsub+0x34c>)
 8000f84:	4003      	ands	r3, r0
 8000f86:	0840      	lsrs	r0, r0, #1
 8000f88:	4010      	ands	r0, r2
 8000f8a:	4318      	orrs	r0, r3
 8000f8c:	e7c8      	b.n	8000f20 <__aeabi_fsub+0x74>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d020      	beq.n	8000fd4 <__aeabi_fsub+0x128>
 8000f92:	428c      	cmp	r4, r1
 8000f94:	d023      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000f96:	0028      	movs	r0, r5
 8000f98:	38ff      	subs	r0, #255	; 0xff
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d039      	beq.n	8001012 <__aeabi_fsub+0x166>
 8000f9e:	1b57      	subs	r7, r2, r5
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0xfa>
 8000fa4:	e09d      	b.n	80010e2 <__aeabi_fsub+0x236>
 8000fa6:	4663      	mov	r3, ip
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x102>
 8000fac:	e0db      	b.n	8001166 <__aeabi_fsub+0x2ba>
 8000fae:	1e7b      	subs	r3, r7, #1
 8000fb0:	2f01      	cmp	r7, #1
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x10a>
 8000fb4:	e10d      	b.n	80011d2 <__aeabi_fsub+0x326>
 8000fb6:	2fff      	cmp	r7, #255	; 0xff
 8000fb8:	d071      	beq.n	800109e <__aeabi_fsub+0x1f2>
 8000fba:	001f      	movs	r7, r3
 8000fbc:	e098      	b.n	80010f0 <__aeabi_fsub+0x244>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x118>
 8000fc2:	e0a7      	b.n	8001114 <__aeabi_fsub+0x268>
 8000fc4:	1e42      	subs	r2, r0, #1
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x120>
 8000fca:	e0e6      	b.n	800119a <__aeabi_fsub+0x2ee>
 8000fcc:	28ff      	cmp	r0, #255	; 0xff
 8000fce:	d068      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	e78f      	b.n	8000ef4 <__aeabi_fsub+0x48>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	4041      	eors	r1, r0
 8000fd8:	42a1      	cmp	r1, r4
 8000fda:	d000      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000fdc:	e77f      	b.n	8000ede <__aeabi_fsub+0x32>
 8000fde:	20ff      	movs	r0, #255	; 0xff
 8000fe0:	4240      	negs	r0, r0
 8000fe2:	4680      	mov	r8, r0
 8000fe4:	44a8      	add	r8, r5
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d038      	beq.n	800105e <__aeabi_fsub+0x1b2>
 8000fec:	1b51      	subs	r1, r2, r5
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x148>
 8000ff2:	e0ae      	b.n	8001152 <__aeabi_fsub+0x2a6>
 8000ff4:	2aff      	cmp	r2, #255	; 0xff
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x14e>
 8000ff8:	e0df      	b.n	80011ba <__aeabi_fsub+0x30e>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	4318      	orrs	r0, r3
 8001002:	4684      	mov	ip, r0
 8001004:	291b      	cmp	r1, #27
 8001006:	dc00      	bgt.n	800100a <__aeabi_fsub+0x15e>
 8001008:	e0d9      	b.n	80011be <__aeabi_fsub+0x312>
 800100a:	2001      	movs	r0, #1
 800100c:	0015      	movs	r5, r2
 800100e:	1980      	adds	r0, r0, r6
 8001010:	e7b1      	b.n	8000f76 <__aeabi_fsub+0xca>
 8001012:	20fe      	movs	r0, #254	; 0xfe
 8001014:	1c6a      	adds	r2, r5, #1
 8001016:	4210      	tst	r0, r2
 8001018:	d171      	bne.n	80010fe <__aeabi_fsub+0x252>
 800101a:	2d00      	cmp	r5, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x174>
 800101e:	e0a6      	b.n	800116e <__aeabi_fsub+0x2c2>
 8001020:	4663      	mov	r3, ip
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x17c>
 8001026:	e0d9      	b.n	80011dc <__aeabi_fsub+0x330>
 8001028:	2200      	movs	r2, #0
 800102a:	2e00      	cmp	r6, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x184>
 800102e:	e788      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001030:	1b98      	subs	r0, r3, r6
 8001032:	0143      	lsls	r3, r0, #5
 8001034:	d400      	bmi.n	8001038 <__aeabi_fsub+0x18c>
 8001036:	e0e1      	b.n	80011fc <__aeabi_fsub+0x350>
 8001038:	4663      	mov	r3, ip
 800103a:	000c      	movs	r4, r1
 800103c:	1af0      	subs	r0, r6, r3
 800103e:	e76f      	b.n	8000f20 <__aeabi_fsub+0x74>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x19a>
 8001044:	e0b7      	b.n	80011b6 <__aeabi_fsub+0x30a>
 8001046:	0002      	movs	r2, r0
 8001048:	3a01      	subs	r2, #1
 800104a:	2801      	cmp	r0, #1
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x1a4>
 800104e:	e09c      	b.n	800118a <__aeabi_fsub+0x2de>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d026      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001054:	4690      	mov	r8, r2
 8001056:	e788      	b.n	8000f6a <__aeabi_fsub+0xbe>
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	2700      	movs	r7, #0
 800105c:	e771      	b.n	8000f42 <__aeabi_fsub+0x96>
 800105e:	20fe      	movs	r0, #254	; 0xfe
 8001060:	1c6a      	adds	r2, r5, #1
 8001062:	4210      	tst	r0, r2
 8001064:	d064      	beq.n	8001130 <__aeabi_fsub+0x284>
 8001066:	2aff      	cmp	r2, #255	; 0xff
 8001068:	d0f6      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 800106a:	0015      	movs	r5, r2
 800106c:	4466      	add	r6, ip
 800106e:	0870      	lsrs	r0, r6, #1
 8001070:	0743      	lsls	r3, r0, #29
 8001072:	d000      	beq.n	8001076 <__aeabi_fsub+0x1ca>
 8001074:	e756      	b.n	8000f24 <__aeabi_fsub+0x78>
 8001076:	08c3      	lsrs	r3, r0, #3
 8001078:	2dff      	cmp	r5, #255	; 0xff
 800107a:	d012      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	0a5f      	lsrs	r7, r3, #9
 8001080:	b2ea      	uxtb	r2, r5
 8001082:	e75e      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001084:	4662      	mov	r2, ip
 8001086:	2a00      	cmp	r2, #0
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x1e0>
 800108a:	e096      	b.n	80011ba <__aeabi_fsub+0x30e>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d008      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	03d2      	lsls	r2, r2, #15
 8001094:	4213      	tst	r3, r2
 8001096:	d004      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001098:	4648      	mov	r0, r9
 800109a:	4210      	tst	r0, r2
 800109c:	d101      	bne.n	80010a2 <__aeabi_fsub+0x1f6>
 800109e:	000c      	movs	r4, r1
 80010a0:	464b      	mov	r3, r9
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0d8      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 80010a6:	2780      	movs	r7, #128	; 0x80
 80010a8:	03ff      	lsls	r7, r7, #15
 80010aa:	431f      	orrs	r7, r3
 80010ac:	027f      	lsls	r7, r7, #9
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	0a7f      	lsrs	r7, r7, #9
 80010b2:	e746      	b.n	8000f42 <__aeabi_fsub+0x96>
 80010b4:	2320      	movs	r3, #32
 80010b6:	003a      	movs	r2, r7
 80010b8:	1b45      	subs	r5, r0, r5
 80010ba:	0038      	movs	r0, r7
 80010bc:	3501      	adds	r5, #1
 80010be:	40ea      	lsrs	r2, r5
 80010c0:	1b5d      	subs	r5, r3, r5
 80010c2:	40a8      	lsls	r0, r5
 80010c4:	1e43      	subs	r3, r0, #1
 80010c6:	4198      	sbcs	r0, r3
 80010c8:	2500      	movs	r5, #0
 80010ca:	4310      	orrs	r0, r2
 80010cc:	e728      	b.n	8000f20 <__aeabi_fsub+0x74>
 80010ce:	2320      	movs	r3, #32
 80010d0:	1a1b      	subs	r3, r3, r0
 80010d2:	0032      	movs	r2, r6
 80010d4:	409e      	lsls	r6, r3
 80010d6:	40c2      	lsrs	r2, r0
 80010d8:	0030      	movs	r0, r6
 80010da:	1e43      	subs	r3, r0, #1
 80010dc:	4198      	sbcs	r0, r3
 80010de:	4310      	orrs	r0, r2
 80010e0:	e70c      	b.n	8000efc <__aeabi_fsub+0x50>
 80010e2:	2aff      	cmp	r2, #255	; 0xff
 80010e4:	d0db      	beq.n	800109e <__aeabi_fsub+0x1f2>
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	4660      	mov	r0, ip
 80010ea:	04db      	lsls	r3, r3, #19
 80010ec:	4318      	orrs	r0, r3
 80010ee:	4684      	mov	ip, r0
 80010f0:	2f1b      	cmp	r7, #27
 80010f2:	dd56      	ble.n	80011a2 <__aeabi_fsub+0x2f6>
 80010f4:	2001      	movs	r0, #1
 80010f6:	000c      	movs	r4, r1
 80010f8:	0015      	movs	r5, r2
 80010fa:	1a30      	subs	r0, r6, r0
 80010fc:	e700      	b.n	8000f00 <__aeabi_fsub+0x54>
 80010fe:	4663      	mov	r3, ip
 8001100:	1b9f      	subs	r7, r3, r6
 8001102:	017b      	lsls	r3, r7, #5
 8001104:	d43d      	bmi.n	8001182 <__aeabi_fsub+0x2d6>
 8001106:	2f00      	cmp	r7, #0
 8001108:	d000      	beq.n	800110c <__aeabi_fsub+0x260>
 800110a:	e6fe      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800110c:	2400      	movs	r4, #0
 800110e:	2200      	movs	r2, #0
 8001110:	2700      	movs	r7, #0
 8001112:	e716      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001114:	0005      	movs	r5, r0
 8001116:	e7af      	b.n	8001078 <__aeabi_fsub+0x1cc>
 8001118:	0032      	movs	r2, r6
 800111a:	4643      	mov	r3, r8
 800111c:	4641      	mov	r1, r8
 800111e:	40da      	lsrs	r2, r3
 8001120:	2320      	movs	r3, #32
 8001122:	1a5b      	subs	r3, r3, r1
 8001124:	409e      	lsls	r6, r3
 8001126:	0030      	movs	r0, r6
 8001128:	1e43      	subs	r3, r0, #1
 800112a:	4198      	sbcs	r0, r3
 800112c:	4310      	orrs	r0, r2
 800112e:	e721      	b.n	8000f74 <__aeabi_fsub+0xc8>
 8001130:	2d00      	cmp	r5, #0
 8001132:	d1a7      	bne.n	8001084 <__aeabi_fsub+0x1d8>
 8001134:	4663      	mov	r3, ip
 8001136:	2b00      	cmp	r3, #0
 8001138:	d059      	beq.n	80011ee <__aeabi_fsub+0x342>
 800113a:	2200      	movs	r2, #0
 800113c:	2e00      	cmp	r6, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_fsub+0x296>
 8001140:	e6ff      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001142:	0030      	movs	r0, r6
 8001144:	4460      	add	r0, ip
 8001146:	0143      	lsls	r3, r0, #5
 8001148:	d592      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <__aeabi_fsub+0x348>)
 800114c:	3501      	adds	r5, #1
 800114e:	4018      	ands	r0, r3
 8001150:	e78e      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001152:	4663      	mov	r3, ip
 8001154:	2b00      	cmp	r3, #0
 8001156:	d047      	beq.n	80011e8 <__aeabi_fsub+0x33c>
 8001158:	1e4b      	subs	r3, r1, #1
 800115a:	2901      	cmp	r1, #1
 800115c:	d015      	beq.n	800118a <__aeabi_fsub+0x2de>
 800115e:	29ff      	cmp	r1, #255	; 0xff
 8001160:	d02b      	beq.n	80011ba <__aeabi_fsub+0x30e>
 8001162:	0019      	movs	r1, r3
 8001164:	e74e      	b.n	8001004 <__aeabi_fsub+0x158>
 8001166:	000c      	movs	r4, r1
 8001168:	464b      	mov	r3, r9
 800116a:	003d      	movs	r5, r7
 800116c:	e784      	b.n	8001078 <__aeabi_fsub+0x1cc>
 800116e:	4662      	mov	r2, ip
 8001170:	2a00      	cmp	r2, #0
 8001172:	d18b      	bne.n	800108c <__aeabi_fsub+0x1e0>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d192      	bne.n	800109e <__aeabi_fsub+0x1f2>
 8001178:	2780      	movs	r7, #128	; 0x80
 800117a:	2400      	movs	r4, #0
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	03ff      	lsls	r7, r7, #15
 8001180:	e6df      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001182:	4663      	mov	r3, ip
 8001184:	000c      	movs	r4, r1
 8001186:	1af7      	subs	r7, r6, r3
 8001188:	e6bf      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800118a:	0030      	movs	r0, r6
 800118c:	4460      	add	r0, ip
 800118e:	2501      	movs	r5, #1
 8001190:	0143      	lsls	r3, r0, #5
 8001192:	d400      	bmi.n	8001196 <__aeabi_fsub+0x2ea>
 8001194:	e76c      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001196:	2502      	movs	r5, #2
 8001198:	e6f2      	b.n	8000f80 <__aeabi_fsub+0xd4>
 800119a:	4663      	mov	r3, ip
 800119c:	2501      	movs	r5, #1
 800119e:	1b98      	subs	r0, r3, r6
 80011a0:	e6ae      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011a2:	2320      	movs	r3, #32
 80011a4:	4664      	mov	r4, ip
 80011a6:	4660      	mov	r0, ip
 80011a8:	40fc      	lsrs	r4, r7
 80011aa:	1bdf      	subs	r7, r3, r7
 80011ac:	40b8      	lsls	r0, r7
 80011ae:	1e43      	subs	r3, r0, #1
 80011b0:	4198      	sbcs	r0, r3
 80011b2:	4320      	orrs	r0, r4
 80011b4:	e79f      	b.n	80010f6 <__aeabi_fsub+0x24a>
 80011b6:	0005      	movs	r5, r0
 80011b8:	e75e      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ba:	464b      	mov	r3, r9
 80011bc:	e771      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 80011be:	2320      	movs	r3, #32
 80011c0:	4665      	mov	r5, ip
 80011c2:	4660      	mov	r0, ip
 80011c4:	40cd      	lsrs	r5, r1
 80011c6:	1a59      	subs	r1, r3, r1
 80011c8:	4088      	lsls	r0, r1
 80011ca:	1e43      	subs	r3, r0, #1
 80011cc:	4198      	sbcs	r0, r3
 80011ce:	4328      	orrs	r0, r5
 80011d0:	e71c      	b.n	800100c <__aeabi_fsub+0x160>
 80011d2:	4663      	mov	r3, ip
 80011d4:	000c      	movs	r4, r1
 80011d6:	2501      	movs	r5, #1
 80011d8:	1af0      	subs	r0, r6, r3
 80011da:	e691      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d095      	beq.n	800110c <__aeabi_fsub+0x260>
 80011e0:	000c      	movs	r4, r1
 80011e2:	464f      	mov	r7, r9
 80011e4:	2200      	movs	r2, #0
 80011e6:	e6ac      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011e8:	464b      	mov	r3, r9
 80011ea:	000d      	movs	r5, r1
 80011ec:	e744      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ee:	464f      	mov	r7, r9
 80011f0:	2200      	movs	r2, #0
 80011f2:	e6a6      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011f4:	fbffffff 	.word	0xfbffffff
 80011f8:	7dffffff 	.word	0x7dffffff
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d000      	beq.n	8001202 <__aeabi_fsub+0x356>
 8001200:	e736      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001202:	2400      	movs	r4, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e69c      	b.n	8000f42 <__aeabi_fsub+0x96>

08001208 <__aeabi_f2iz>:
 8001208:	0241      	lsls	r1, r0, #9
 800120a:	0042      	lsls	r2, r0, #1
 800120c:	0fc3      	lsrs	r3, r0, #31
 800120e:	0a49      	lsrs	r1, r1, #9
 8001210:	2000      	movs	r0, #0
 8001212:	0e12      	lsrs	r2, r2, #24
 8001214:	2a7e      	cmp	r2, #126	; 0x7e
 8001216:	dd03      	ble.n	8001220 <__aeabi_f2iz+0x18>
 8001218:	2a9d      	cmp	r2, #157	; 0x9d
 800121a:	dd02      	ble.n	8001222 <__aeabi_f2iz+0x1a>
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <__aeabi_f2iz+0x3c>)
 800121e:	1898      	adds	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	2080      	movs	r0, #128	; 0x80
 8001224:	0400      	lsls	r0, r0, #16
 8001226:	4301      	orrs	r1, r0
 8001228:	2a95      	cmp	r2, #149	; 0x95
 800122a:	dc07      	bgt.n	800123c <__aeabi_f2iz+0x34>
 800122c:	2096      	movs	r0, #150	; 0x96
 800122e:	1a82      	subs	r2, r0, r2
 8001230:	40d1      	lsrs	r1, r2
 8001232:	4248      	negs	r0, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f3      	bne.n	8001220 <__aeabi_f2iz+0x18>
 8001238:	0008      	movs	r0, r1
 800123a:	e7f1      	b.n	8001220 <__aeabi_f2iz+0x18>
 800123c:	3a96      	subs	r2, #150	; 0x96
 800123e:	4091      	lsls	r1, r2
 8001240:	e7f7      	b.n	8001232 <__aeabi_f2iz+0x2a>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	7fffffff 	.word	0x7fffffff

08001248 <__aeabi_i2f>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	2800      	cmp	r0, #0
 800124c:	d013      	beq.n	8001276 <__aeabi_i2f+0x2e>
 800124e:	17c3      	asrs	r3, r0, #31
 8001250:	18c6      	adds	r6, r0, r3
 8001252:	405e      	eors	r6, r3
 8001254:	0fc4      	lsrs	r4, r0, #31
 8001256:	0030      	movs	r0, r6
 8001258:	f001 fefa 	bl	8003050 <__clzsi2>
 800125c:	239e      	movs	r3, #158	; 0x9e
 800125e:	0005      	movs	r5, r0
 8001260:	1a1b      	subs	r3, r3, r0
 8001262:	2b96      	cmp	r3, #150	; 0x96
 8001264:	dc0f      	bgt.n	8001286 <__aeabi_i2f+0x3e>
 8001266:	2808      	cmp	r0, #8
 8001268:	dd01      	ble.n	800126e <__aeabi_i2f+0x26>
 800126a:	3d08      	subs	r5, #8
 800126c:	40ae      	lsls	r6, r5
 800126e:	0276      	lsls	r6, r6, #9
 8001270:	0a76      	lsrs	r6, r6, #9
 8001272:	b2d8      	uxtb	r0, r3
 8001274:	e002      	b.n	800127c <__aeabi_i2f+0x34>
 8001276:	2400      	movs	r4, #0
 8001278:	2000      	movs	r0, #0
 800127a:	2600      	movs	r6, #0
 800127c:	05c0      	lsls	r0, r0, #23
 800127e:	4330      	orrs	r0, r6
 8001280:	07e4      	lsls	r4, r4, #31
 8001282:	4320      	orrs	r0, r4
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001286:	2b99      	cmp	r3, #153	; 0x99
 8001288:	dd0c      	ble.n	80012a4 <__aeabi_i2f+0x5c>
 800128a:	2205      	movs	r2, #5
 800128c:	0031      	movs	r1, r6
 800128e:	1a12      	subs	r2, r2, r0
 8001290:	40d1      	lsrs	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	0001      	movs	r1, r0
 8001296:	0030      	movs	r0, r6
 8001298:	311b      	adds	r1, #27
 800129a:	4088      	lsls	r0, r1
 800129c:	1e41      	subs	r1, r0, #1
 800129e:	4188      	sbcs	r0, r1
 80012a0:	4302      	orrs	r2, r0
 80012a2:	0016      	movs	r6, r2
 80012a4:	2d05      	cmp	r5, #5
 80012a6:	dc12      	bgt.n	80012ce <__aeabi_i2f+0x86>
 80012a8:	0031      	movs	r1, r6
 80012aa:	4f0d      	ldr	r7, [pc, #52]	; (80012e0 <__aeabi_i2f+0x98>)
 80012ac:	4039      	ands	r1, r7
 80012ae:	0772      	lsls	r2, r6, #29
 80012b0:	d009      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012b2:	200f      	movs	r0, #15
 80012b4:	4030      	ands	r0, r6
 80012b6:	2804      	cmp	r0, #4
 80012b8:	d005      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012ba:	3104      	adds	r1, #4
 80012bc:	014a      	lsls	r2, r1, #5
 80012be:	d502      	bpl.n	80012c6 <__aeabi_i2f+0x7e>
 80012c0:	239f      	movs	r3, #159	; 0x9f
 80012c2:	4039      	ands	r1, r7
 80012c4:	1b5b      	subs	r3, r3, r5
 80012c6:	0189      	lsls	r1, r1, #6
 80012c8:	0a4e      	lsrs	r6, r1, #9
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	e7d6      	b.n	800127c <__aeabi_i2f+0x34>
 80012ce:	1f6a      	subs	r2, r5, #5
 80012d0:	4096      	lsls	r6, r2
 80012d2:	0031      	movs	r1, r6
 80012d4:	4f02      	ldr	r7, [pc, #8]	; (80012e0 <__aeabi_i2f+0x98>)
 80012d6:	4039      	ands	r1, r7
 80012d8:	0772      	lsls	r2, r6, #29
 80012da:	d0f4      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012dc:	e7e9      	b.n	80012b2 <__aeabi_i2f+0x6a>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	fbffffff 	.word	0xfbffffff

080012e4 <__aeabi_dadd>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464f      	mov	r7, r9
 80012e8:	4646      	mov	r6, r8
 80012ea:	46d6      	mov	lr, sl
 80012ec:	000d      	movs	r5, r1
 80012ee:	0004      	movs	r4, r0
 80012f0:	b5c0      	push	{r6, r7, lr}
 80012f2:	001f      	movs	r7, r3
 80012f4:	0011      	movs	r1, r2
 80012f6:	0328      	lsls	r0, r5, #12
 80012f8:	0f62      	lsrs	r2, r4, #29
 80012fa:	0a40      	lsrs	r0, r0, #9
 80012fc:	4310      	orrs	r0, r2
 80012fe:	007a      	lsls	r2, r7, #1
 8001300:	0d52      	lsrs	r2, r2, #21
 8001302:	00e3      	lsls	r3, r4, #3
 8001304:	033c      	lsls	r4, r7, #12
 8001306:	4691      	mov	r9, r2
 8001308:	0a64      	lsrs	r4, r4, #9
 800130a:	0ffa      	lsrs	r2, r7, #31
 800130c:	0f4f      	lsrs	r7, r1, #29
 800130e:	006e      	lsls	r6, r5, #1
 8001310:	4327      	orrs	r7, r4
 8001312:	4692      	mov	sl, r2
 8001314:	46b8      	mov	r8, r7
 8001316:	0d76      	lsrs	r6, r6, #21
 8001318:	0fed      	lsrs	r5, r5, #31
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	4295      	cmp	r5, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x3e>
 8001320:	e099      	b.n	8001456 <__aeabi_dadd+0x172>
 8001322:	464c      	mov	r4, r9
 8001324:	1b34      	subs	r4, r6, r4
 8001326:	46a4      	mov	ip, r4
 8001328:	2c00      	cmp	r4, #0
 800132a:	dc00      	bgt.n	800132e <__aeabi_dadd+0x4a>
 800132c:	e07c      	b.n	8001428 <__aeabi_dadd+0x144>
 800132e:	464a      	mov	r2, r9
 8001330:	2a00      	cmp	r2, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x52>
 8001334:	e0b8      	b.n	80014a8 <__aeabi_dadd+0x1c4>
 8001336:	4ac5      	ldr	r2, [pc, #788]	; (800164c <__aeabi_dadd+0x368>)
 8001338:	4296      	cmp	r6, r2
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x5a>
 800133c:	e11c      	b.n	8001578 <__aeabi_dadd+0x294>
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	003c      	movs	r4, r7
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	4314      	orrs	r4, r2
 8001346:	46a0      	mov	r8, r4
 8001348:	4662      	mov	r2, ip
 800134a:	2a38      	cmp	r2, #56	; 0x38
 800134c:	dd00      	ble.n	8001350 <__aeabi_dadd+0x6c>
 800134e:	e161      	b.n	8001614 <__aeabi_dadd+0x330>
 8001350:	2a1f      	cmp	r2, #31
 8001352:	dd00      	ble.n	8001356 <__aeabi_dadd+0x72>
 8001354:	e1cc      	b.n	80016f0 <__aeabi_dadd+0x40c>
 8001356:	4664      	mov	r4, ip
 8001358:	2220      	movs	r2, #32
 800135a:	1b12      	subs	r2, r2, r4
 800135c:	4644      	mov	r4, r8
 800135e:	4094      	lsls	r4, r2
 8001360:	000f      	movs	r7, r1
 8001362:	46a1      	mov	r9, r4
 8001364:	4664      	mov	r4, ip
 8001366:	4091      	lsls	r1, r2
 8001368:	40e7      	lsrs	r7, r4
 800136a:	464c      	mov	r4, r9
 800136c:	1e4a      	subs	r2, r1, #1
 800136e:	4191      	sbcs	r1, r2
 8001370:	433c      	orrs	r4, r7
 8001372:	4642      	mov	r2, r8
 8001374:	4321      	orrs	r1, r4
 8001376:	4664      	mov	r4, ip
 8001378:	40e2      	lsrs	r2, r4
 800137a:	1a80      	subs	r0, r0, r2
 800137c:	1a5c      	subs	r4, r3, r1
 800137e:	42a3      	cmp	r3, r4
 8001380:	419b      	sbcs	r3, r3
 8001382:	425f      	negs	r7, r3
 8001384:	1bc7      	subs	r7, r0, r7
 8001386:	023b      	lsls	r3, r7, #8
 8001388:	d400      	bmi.n	800138c <__aeabi_dadd+0xa8>
 800138a:	e0d0      	b.n	800152e <__aeabi_dadd+0x24a>
 800138c:	027f      	lsls	r7, r7, #9
 800138e:	0a7f      	lsrs	r7, r7, #9
 8001390:	2f00      	cmp	r7, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0xb2>
 8001394:	e0ff      	b.n	8001596 <__aeabi_dadd+0x2b2>
 8001396:	0038      	movs	r0, r7
 8001398:	f001 fe5a 	bl	8003050 <__clzsi2>
 800139c:	0001      	movs	r1, r0
 800139e:	3908      	subs	r1, #8
 80013a0:	2320      	movs	r3, #32
 80013a2:	0022      	movs	r2, r4
 80013a4:	1a5b      	subs	r3, r3, r1
 80013a6:	408f      	lsls	r7, r1
 80013a8:	40da      	lsrs	r2, r3
 80013aa:	408c      	lsls	r4, r1
 80013ac:	4317      	orrs	r7, r2
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	da00      	bge.n	80013b4 <__aeabi_dadd+0xd0>
 80013b2:	e0ff      	b.n	80015b4 <__aeabi_dadd+0x2d0>
 80013b4:	1b89      	subs	r1, r1, r6
 80013b6:	1c4b      	adds	r3, r1, #1
 80013b8:	2b1f      	cmp	r3, #31
 80013ba:	dd00      	ble.n	80013be <__aeabi_dadd+0xda>
 80013bc:	e0a8      	b.n	8001510 <__aeabi_dadd+0x22c>
 80013be:	2220      	movs	r2, #32
 80013c0:	0039      	movs	r1, r7
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	0020      	movs	r0, r4
 80013c6:	4094      	lsls	r4, r2
 80013c8:	4091      	lsls	r1, r2
 80013ca:	40d8      	lsrs	r0, r3
 80013cc:	1e62      	subs	r2, r4, #1
 80013ce:	4194      	sbcs	r4, r2
 80013d0:	40df      	lsrs	r7, r3
 80013d2:	2600      	movs	r6, #0
 80013d4:	4301      	orrs	r1, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	0763      	lsls	r3, r4, #29
 80013da:	d009      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013dc:	230f      	movs	r3, #15
 80013de:	4023      	ands	r3, r4
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d005      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013e4:	1d23      	adds	r3, r4, #4
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	41a4      	sbcs	r4, r4
 80013ea:	4264      	negs	r4, r4
 80013ec:	193f      	adds	r7, r7, r4
 80013ee:	001c      	movs	r4, r3
 80013f0:	023b      	lsls	r3, r7, #8
 80013f2:	d400      	bmi.n	80013f6 <__aeabi_dadd+0x112>
 80013f4:	e09e      	b.n	8001534 <__aeabi_dadd+0x250>
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <__aeabi_dadd+0x368>)
 80013f8:	3601      	adds	r6, #1
 80013fa:	429e      	cmp	r6, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x11c>
 80013fe:	e0b7      	b.n	8001570 <__aeabi_dadd+0x28c>
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <__aeabi_dadd+0x36c>)
 8001402:	08e4      	lsrs	r4, r4, #3
 8001404:	4017      	ands	r7, r2
 8001406:	077b      	lsls	r3, r7, #29
 8001408:	0571      	lsls	r1, r6, #21
 800140a:	027f      	lsls	r7, r7, #9
 800140c:	4323      	orrs	r3, r4
 800140e:	0b3f      	lsrs	r7, r7, #12
 8001410:	0d4a      	lsrs	r2, r1, #21
 8001412:	0512      	lsls	r2, r2, #20
 8001414:	433a      	orrs	r2, r7
 8001416:	07ed      	lsls	r5, r5, #31
 8001418:	432a      	orrs	r2, r5
 800141a:	0018      	movs	r0, r3
 800141c:	0011      	movs	r1, r2
 800141e:	bce0      	pop	{r5, r6, r7}
 8001420:	46ba      	mov	sl, r7
 8001422:	46b1      	mov	r9, r6
 8001424:	46a8      	mov	r8, r5
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	2c00      	cmp	r4, #0
 800142a:	d04b      	beq.n	80014c4 <__aeabi_dadd+0x1e0>
 800142c:	464c      	mov	r4, r9
 800142e:	1ba4      	subs	r4, r4, r6
 8001430:	46a4      	mov	ip, r4
 8001432:	2e00      	cmp	r6, #0
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x154>
 8001436:	e123      	b.n	8001680 <__aeabi_dadd+0x39c>
 8001438:	0004      	movs	r4, r0
 800143a:	431c      	orrs	r4, r3
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x15c>
 800143e:	e1af      	b.n	80017a0 <__aeabi_dadd+0x4bc>
 8001440:	4662      	mov	r2, ip
 8001442:	1e54      	subs	r4, r2, #1
 8001444:	2a01      	cmp	r2, #1
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x166>
 8001448:	e215      	b.n	8001876 <__aeabi_dadd+0x592>
 800144a:	4d80      	ldr	r5, [pc, #512]	; (800164c <__aeabi_dadd+0x368>)
 800144c:	45ac      	cmp	ip, r5
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x16e>
 8001450:	e1c8      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001452:	46a4      	mov	ip, r4
 8001454:	e11b      	b.n	800168e <__aeabi_dadd+0x3aa>
 8001456:	464a      	mov	r2, r9
 8001458:	1ab2      	subs	r2, r6, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2a00      	cmp	r2, #0
 800145e:	dc00      	bgt.n	8001462 <__aeabi_dadd+0x17e>
 8001460:	e0ac      	b.n	80015bc <__aeabi_dadd+0x2d8>
 8001462:	464a      	mov	r2, r9
 8001464:	2a00      	cmp	r2, #0
 8001466:	d043      	beq.n	80014f0 <__aeabi_dadd+0x20c>
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <__aeabi_dadd+0x368>)
 800146a:	4296      	cmp	r6, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x18c>
 800146e:	e1af      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	003c      	movs	r4, r7
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	4314      	orrs	r4, r2
 8001478:	46a0      	mov	r8, r4
 800147a:	4662      	mov	r2, ip
 800147c:	2a38      	cmp	r2, #56	; 0x38
 800147e:	dc67      	bgt.n	8001550 <__aeabi_dadd+0x26c>
 8001480:	2a1f      	cmp	r2, #31
 8001482:	dc00      	bgt.n	8001486 <__aeabi_dadd+0x1a2>
 8001484:	e15f      	b.n	8001746 <__aeabi_dadd+0x462>
 8001486:	4647      	mov	r7, r8
 8001488:	3a20      	subs	r2, #32
 800148a:	40d7      	lsrs	r7, r2
 800148c:	4662      	mov	r2, ip
 800148e:	2a20      	cmp	r2, #32
 8001490:	d005      	beq.n	800149e <__aeabi_dadd+0x1ba>
 8001492:	4664      	mov	r4, ip
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	1b12      	subs	r2, r2, r4
 8001498:	4644      	mov	r4, r8
 800149a:	4094      	lsls	r4, r2
 800149c:	4321      	orrs	r1, r4
 800149e:	1e4a      	subs	r2, r1, #1
 80014a0:	4191      	sbcs	r1, r2
 80014a2:	000c      	movs	r4, r1
 80014a4:	433c      	orrs	r4, r7
 80014a6:	e057      	b.n	8001558 <__aeabi_dadd+0x274>
 80014a8:	003a      	movs	r2, r7
 80014aa:	430a      	orrs	r2, r1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1cc>
 80014ae:	e105      	b.n	80016bc <__aeabi_dadd+0x3d8>
 80014b0:	0022      	movs	r2, r4
 80014b2:	3a01      	subs	r2, #1
 80014b4:	2c01      	cmp	r4, #1
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0x1d6>
 80014b8:	e182      	b.n	80017c0 <__aeabi_dadd+0x4dc>
 80014ba:	4c64      	ldr	r4, [pc, #400]	; (800164c <__aeabi_dadd+0x368>)
 80014bc:	45a4      	cmp	ip, r4
 80014be:	d05b      	beq.n	8001578 <__aeabi_dadd+0x294>
 80014c0:	4694      	mov	ip, r2
 80014c2:	e741      	b.n	8001348 <__aeabi_dadd+0x64>
 80014c4:	4c63      	ldr	r4, [pc, #396]	; (8001654 <__aeabi_dadd+0x370>)
 80014c6:	1c77      	adds	r7, r6, #1
 80014c8:	4227      	tst	r7, r4
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x1ea>
 80014cc:	e0c4      	b.n	8001658 <__aeabi_dadd+0x374>
 80014ce:	0004      	movs	r4, r0
 80014d0:	431c      	orrs	r4, r3
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dadd+0x1f4>
 80014d6:	e169      	b.n	80017ac <__aeabi_dadd+0x4c8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x1fa>
 80014dc:	e1bf      	b.n	800185e <__aeabi_dadd+0x57a>
 80014de:	4644      	mov	r4, r8
 80014e0:	430c      	orrs	r4, r1
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x202>
 80014e4:	e1d0      	b.n	8001888 <__aeabi_dadd+0x5a4>
 80014e6:	0742      	lsls	r2, r0, #29
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	08c0      	lsrs	r0, r0, #3
 80014ee:	e029      	b.n	8001544 <__aeabi_dadd+0x260>
 80014f0:	003a      	movs	r2, r7
 80014f2:	430a      	orrs	r2, r1
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x214>
 80014f6:	e170      	b.n	80017da <__aeabi_dadd+0x4f6>
 80014f8:	4662      	mov	r2, ip
 80014fa:	4664      	mov	r4, ip
 80014fc:	3a01      	subs	r2, #1
 80014fe:	2c01      	cmp	r4, #1
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x220>
 8001502:	e0e0      	b.n	80016c6 <__aeabi_dadd+0x3e2>
 8001504:	4c51      	ldr	r4, [pc, #324]	; (800164c <__aeabi_dadd+0x368>)
 8001506:	45a4      	cmp	ip, r4
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x228>
 800150a:	e161      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 800150c:	4694      	mov	ip, r2
 800150e:	e7b4      	b.n	800147a <__aeabi_dadd+0x196>
 8001510:	003a      	movs	r2, r7
 8001512:	391f      	subs	r1, #31
 8001514:	40ca      	lsrs	r2, r1
 8001516:	0011      	movs	r1, r2
 8001518:	2b20      	cmp	r3, #32
 800151a:	d003      	beq.n	8001524 <__aeabi_dadd+0x240>
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	409f      	lsls	r7, r3
 8001522:	433c      	orrs	r4, r7
 8001524:	1e63      	subs	r3, r4, #1
 8001526:	419c      	sbcs	r4, r3
 8001528:	2700      	movs	r7, #0
 800152a:	2600      	movs	r6, #0
 800152c:	430c      	orrs	r4, r1
 800152e:	0763      	lsls	r3, r4, #29
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x250>
 8001532:	e753      	b.n	80013dc <__aeabi_dadd+0xf8>
 8001534:	46b4      	mov	ip, r6
 8001536:	08e4      	lsrs	r4, r4, #3
 8001538:	077b      	lsls	r3, r7, #29
 800153a:	4323      	orrs	r3, r4
 800153c:	08f8      	lsrs	r0, r7, #3
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <__aeabi_dadd+0x368>)
 8001540:	4594      	cmp	ip, r2
 8001542:	d01d      	beq.n	8001580 <__aeabi_dadd+0x29c>
 8001544:	4662      	mov	r2, ip
 8001546:	0307      	lsls	r7, r0, #12
 8001548:	0552      	lsls	r2, r2, #21
 800154a:	0b3f      	lsrs	r7, r7, #12
 800154c:	0d52      	lsrs	r2, r2, #21
 800154e:	e760      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001550:	4644      	mov	r4, r8
 8001552:	430c      	orrs	r4, r1
 8001554:	1e62      	subs	r2, r4, #1
 8001556:	4194      	sbcs	r4, r2
 8001558:	18e4      	adds	r4, r4, r3
 800155a:	429c      	cmp	r4, r3
 800155c:	419b      	sbcs	r3, r3
 800155e:	425f      	negs	r7, r3
 8001560:	183f      	adds	r7, r7, r0
 8001562:	023b      	lsls	r3, r7, #8
 8001564:	d5e3      	bpl.n	800152e <__aeabi_dadd+0x24a>
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <__aeabi_dadd+0x368>)
 8001568:	3601      	adds	r6, #1
 800156a:	429e      	cmp	r6, r3
 800156c:	d000      	beq.n	8001570 <__aeabi_dadd+0x28c>
 800156e:	e0b5      	b.n	80016dc <__aeabi_dadd+0x3f8>
 8001570:	0032      	movs	r2, r6
 8001572:	2700      	movs	r7, #0
 8001574:	2300      	movs	r3, #0
 8001576:	e74c      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001578:	0742      	lsls	r2, r0, #29
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	4313      	orrs	r3, r2
 800157e:	08c0      	lsrs	r0, r0, #3
 8001580:	001a      	movs	r2, r3
 8001582:	4302      	orrs	r2, r0
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x2a4>
 8001586:	e1e1      	b.n	800194c <__aeabi_dadd+0x668>
 8001588:	2780      	movs	r7, #128	; 0x80
 800158a:	033f      	lsls	r7, r7, #12
 800158c:	4307      	orrs	r7, r0
 800158e:	033f      	lsls	r7, r7, #12
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <__aeabi_dadd+0x368>)
 8001592:	0b3f      	lsrs	r7, r7, #12
 8001594:	e73d      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001596:	0020      	movs	r0, r4
 8001598:	f001 fd5a 	bl	8003050 <__clzsi2>
 800159c:	0001      	movs	r1, r0
 800159e:	3118      	adds	r1, #24
 80015a0:	291f      	cmp	r1, #31
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dadd+0x2c2>
 80015a4:	e6fc      	b.n	80013a0 <__aeabi_dadd+0xbc>
 80015a6:	3808      	subs	r0, #8
 80015a8:	4084      	lsls	r4, r0
 80015aa:	0027      	movs	r7, r4
 80015ac:	2400      	movs	r4, #0
 80015ae:	42b1      	cmp	r1, r6
 80015b0:	db00      	blt.n	80015b4 <__aeabi_dadd+0x2d0>
 80015b2:	e6ff      	b.n	80013b4 <__aeabi_dadd+0xd0>
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <__aeabi_dadd+0x36c>)
 80015b6:	1a76      	subs	r6, r6, r1
 80015b8:	4017      	ands	r7, r2
 80015ba:	e70d      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d02f      	beq.n	8001620 <__aeabi_dadd+0x33c>
 80015c0:	464a      	mov	r2, r9
 80015c2:	1b92      	subs	r2, r2, r6
 80015c4:	4694      	mov	ip, r2
 80015c6:	2e00      	cmp	r6, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x2e8>
 80015ca:	e0ad      	b.n	8001728 <__aeabi_dadd+0x444>
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <__aeabi_dadd+0x368>)
 80015ce:	4591      	cmp	r9, r2
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x2f0>
 80015d2:	e10f      	b.n	80017f4 <__aeabi_dadd+0x510>
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	4310      	orrs	r0, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	2a38      	cmp	r2, #56	; 0x38
 80015de:	dd00      	ble.n	80015e2 <__aeabi_dadd+0x2fe>
 80015e0:	e10f      	b.n	8001802 <__aeabi_dadd+0x51e>
 80015e2:	2a1f      	cmp	r2, #31
 80015e4:	dd00      	ble.n	80015e8 <__aeabi_dadd+0x304>
 80015e6:	e180      	b.n	80018ea <__aeabi_dadd+0x606>
 80015e8:	4664      	mov	r4, ip
 80015ea:	2220      	movs	r2, #32
 80015ec:	001e      	movs	r6, r3
 80015ee:	1b12      	subs	r2, r2, r4
 80015f0:	4667      	mov	r7, ip
 80015f2:	0004      	movs	r4, r0
 80015f4:	4093      	lsls	r3, r2
 80015f6:	4094      	lsls	r4, r2
 80015f8:	40fe      	lsrs	r6, r7
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4193      	sbcs	r3, r2
 80015fe:	40f8      	lsrs	r0, r7
 8001600:	4334      	orrs	r4, r6
 8001602:	431c      	orrs	r4, r3
 8001604:	4480      	add	r8, r0
 8001606:	1864      	adds	r4, r4, r1
 8001608:	428c      	cmp	r4, r1
 800160a:	41bf      	sbcs	r7, r7
 800160c:	427f      	negs	r7, r7
 800160e:	464e      	mov	r6, r9
 8001610:	4447      	add	r7, r8
 8001612:	e7a6      	b.n	8001562 <__aeabi_dadd+0x27e>
 8001614:	4642      	mov	r2, r8
 8001616:	430a      	orrs	r2, r1
 8001618:	0011      	movs	r1, r2
 800161a:	1e4a      	subs	r2, r1, #1
 800161c:	4191      	sbcs	r1, r2
 800161e:	e6ad      	b.n	800137c <__aeabi_dadd+0x98>
 8001620:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <__aeabi_dadd+0x370>)
 8001622:	1c72      	adds	r2, r6, #1
 8001624:	4222      	tst	r2, r4
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x346>
 8001628:	e0a1      	b.n	800176e <__aeabi_dadd+0x48a>
 800162a:	0002      	movs	r2, r0
 800162c:	431a      	orrs	r2, r3
 800162e:	2e00      	cmp	r6, #0
 8001630:	d000      	beq.n	8001634 <__aeabi_dadd+0x350>
 8001632:	e0fa      	b.n	800182a <__aeabi_dadd+0x546>
 8001634:	2a00      	cmp	r2, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x356>
 8001638:	e145      	b.n	80018c6 <__aeabi_dadd+0x5e2>
 800163a:	003a      	movs	r2, r7
 800163c:	430a      	orrs	r2, r1
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x35e>
 8001640:	e146      	b.n	80018d0 <__aeabi_dadd+0x5ec>
 8001642:	0742      	lsls	r2, r0, #29
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	4313      	orrs	r3, r2
 8001648:	08c0      	lsrs	r0, r0, #3
 800164a:	e77b      	b.n	8001544 <__aeabi_dadd+0x260>
 800164c:	000007ff 	.word	0x000007ff
 8001650:	ff7fffff 	.word	0xff7fffff
 8001654:	000007fe 	.word	0x000007fe
 8001658:	4647      	mov	r7, r8
 800165a:	1a5c      	subs	r4, r3, r1
 800165c:	1bc2      	subs	r2, r0, r7
 800165e:	42a3      	cmp	r3, r4
 8001660:	41bf      	sbcs	r7, r7
 8001662:	427f      	negs	r7, r7
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	464a      	mov	r2, r9
 800166a:	1abf      	subs	r7, r7, r2
 800166c:	023a      	lsls	r2, r7, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dadd+0x38e>
 8001670:	e08d      	b.n	800178e <__aeabi_dadd+0x4aa>
 8001672:	0023      	movs	r3, r4
 8001674:	433b      	orrs	r3, r7
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x396>
 8001678:	e68a      	b.n	8001390 <__aeabi_dadd+0xac>
 800167a:	2000      	movs	r0, #0
 800167c:	2500      	movs	r5, #0
 800167e:	e761      	b.n	8001544 <__aeabi_dadd+0x260>
 8001680:	4cb4      	ldr	r4, [pc, #720]	; (8001954 <__aeabi_dadd+0x670>)
 8001682:	45a1      	cmp	r9, r4
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x3a4>
 8001686:	e0ad      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	0424      	lsls	r4, r4, #16
 800168c:	4320      	orrs	r0, r4
 800168e:	4664      	mov	r4, ip
 8001690:	2c38      	cmp	r4, #56	; 0x38
 8001692:	dc3d      	bgt.n	8001710 <__aeabi_dadd+0x42c>
 8001694:	4662      	mov	r2, ip
 8001696:	2c1f      	cmp	r4, #31
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0x3b8>
 800169a:	e0b7      	b.n	800180c <__aeabi_dadd+0x528>
 800169c:	2520      	movs	r5, #32
 800169e:	001e      	movs	r6, r3
 80016a0:	1b2d      	subs	r5, r5, r4
 80016a2:	0004      	movs	r4, r0
 80016a4:	40ab      	lsls	r3, r5
 80016a6:	40ac      	lsls	r4, r5
 80016a8:	40d6      	lsrs	r6, r2
 80016aa:	40d0      	lsrs	r0, r2
 80016ac:	4642      	mov	r2, r8
 80016ae:	1e5d      	subs	r5, r3, #1
 80016b0:	41ab      	sbcs	r3, r5
 80016b2:	4334      	orrs	r4, r6
 80016b4:	1a12      	subs	r2, r2, r0
 80016b6:	4690      	mov	r8, r2
 80016b8:	4323      	orrs	r3, r4
 80016ba:	e02c      	b.n	8001716 <__aeabi_dadd+0x432>
 80016bc:	0742      	lsls	r2, r0, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c0      	lsrs	r0, r0, #3
 80016c4:	e73b      	b.n	800153e <__aeabi_dadd+0x25a>
 80016c6:	185c      	adds	r4, r3, r1
 80016c8:	429c      	cmp	r4, r3
 80016ca:	419b      	sbcs	r3, r3
 80016cc:	4440      	add	r0, r8
 80016ce:	425b      	negs	r3, r3
 80016d0:	18c7      	adds	r7, r0, r3
 80016d2:	2601      	movs	r6, #1
 80016d4:	023b      	lsls	r3, r7, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dadd+0x3f6>
 80016d8:	e729      	b.n	800152e <__aeabi_dadd+0x24a>
 80016da:	2602      	movs	r6, #2
 80016dc:	4a9e      	ldr	r2, [pc, #632]	; (8001958 <__aeabi_dadd+0x674>)
 80016de:	0863      	lsrs	r3, r4, #1
 80016e0:	4017      	ands	r7, r2
 80016e2:	2201      	movs	r2, #1
 80016e4:	4014      	ands	r4, r2
 80016e6:	431c      	orrs	r4, r3
 80016e8:	07fb      	lsls	r3, r7, #31
 80016ea:	431c      	orrs	r4, r3
 80016ec:	087f      	lsrs	r7, r7, #1
 80016ee:	e673      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80016f0:	4644      	mov	r4, r8
 80016f2:	3a20      	subs	r2, #32
 80016f4:	40d4      	lsrs	r4, r2
 80016f6:	4662      	mov	r2, ip
 80016f8:	2a20      	cmp	r2, #32
 80016fa:	d005      	beq.n	8001708 <__aeabi_dadd+0x424>
 80016fc:	4667      	mov	r7, ip
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	1bd2      	subs	r2, r2, r7
 8001702:	4647      	mov	r7, r8
 8001704:	4097      	lsls	r7, r2
 8001706:	4339      	orrs	r1, r7
 8001708:	1e4a      	subs	r2, r1, #1
 800170a:	4191      	sbcs	r1, r2
 800170c:	4321      	orrs	r1, r4
 800170e:	e635      	b.n	800137c <__aeabi_dadd+0x98>
 8001710:	4303      	orrs	r3, r0
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	4183      	sbcs	r3, r0
 8001716:	1acc      	subs	r4, r1, r3
 8001718:	42a1      	cmp	r1, r4
 800171a:	41bf      	sbcs	r7, r7
 800171c:	4643      	mov	r3, r8
 800171e:	427f      	negs	r7, r7
 8001720:	4655      	mov	r5, sl
 8001722:	464e      	mov	r6, r9
 8001724:	1bdf      	subs	r7, r3, r7
 8001726:	e62e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001728:	0002      	movs	r2, r0
 800172a:	431a      	orrs	r2, r3
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x44c>
 800172e:	e0bd      	b.n	80018ac <__aeabi_dadd+0x5c8>
 8001730:	4662      	mov	r2, ip
 8001732:	4664      	mov	r4, ip
 8001734:	3a01      	subs	r2, #1
 8001736:	2c01      	cmp	r4, #1
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x458>
 800173a:	e0e5      	b.n	8001908 <__aeabi_dadd+0x624>
 800173c:	4c85      	ldr	r4, [pc, #532]	; (8001954 <__aeabi_dadd+0x670>)
 800173e:	45a4      	cmp	ip, r4
 8001740:	d058      	beq.n	80017f4 <__aeabi_dadd+0x510>
 8001742:	4694      	mov	ip, r2
 8001744:	e749      	b.n	80015da <__aeabi_dadd+0x2f6>
 8001746:	4664      	mov	r4, ip
 8001748:	2220      	movs	r2, #32
 800174a:	1b12      	subs	r2, r2, r4
 800174c:	4644      	mov	r4, r8
 800174e:	4094      	lsls	r4, r2
 8001750:	000f      	movs	r7, r1
 8001752:	46a1      	mov	r9, r4
 8001754:	4664      	mov	r4, ip
 8001756:	4091      	lsls	r1, r2
 8001758:	40e7      	lsrs	r7, r4
 800175a:	464c      	mov	r4, r9
 800175c:	1e4a      	subs	r2, r1, #1
 800175e:	4191      	sbcs	r1, r2
 8001760:	433c      	orrs	r4, r7
 8001762:	4642      	mov	r2, r8
 8001764:	430c      	orrs	r4, r1
 8001766:	4661      	mov	r1, ip
 8001768:	40ca      	lsrs	r2, r1
 800176a:	1880      	adds	r0, r0, r2
 800176c:	e6f4      	b.n	8001558 <__aeabi_dadd+0x274>
 800176e:	4c79      	ldr	r4, [pc, #484]	; (8001954 <__aeabi_dadd+0x670>)
 8001770:	42a2      	cmp	r2, r4
 8001772:	d100      	bne.n	8001776 <__aeabi_dadd+0x492>
 8001774:	e6fd      	b.n	8001572 <__aeabi_dadd+0x28e>
 8001776:	1859      	adds	r1, r3, r1
 8001778:	4299      	cmp	r1, r3
 800177a:	419b      	sbcs	r3, r3
 800177c:	4440      	add	r0, r8
 800177e:	425f      	negs	r7, r3
 8001780:	19c7      	adds	r7, r0, r7
 8001782:	07fc      	lsls	r4, r7, #31
 8001784:	0849      	lsrs	r1, r1, #1
 8001786:	0016      	movs	r6, r2
 8001788:	430c      	orrs	r4, r1
 800178a:	087f      	lsrs	r7, r7, #1
 800178c:	e6cf      	b.n	800152e <__aeabi_dadd+0x24a>
 800178e:	1acc      	subs	r4, r1, r3
 8001790:	42a1      	cmp	r1, r4
 8001792:	41bf      	sbcs	r7, r7
 8001794:	4643      	mov	r3, r8
 8001796:	427f      	negs	r7, r7
 8001798:	1a18      	subs	r0, r3, r0
 800179a:	4655      	mov	r5, sl
 800179c:	1bc7      	subs	r7, r0, r7
 800179e:	e5f7      	b.n	8001390 <__aeabi_dadd+0xac>
 80017a0:	08c9      	lsrs	r1, r1, #3
 80017a2:	077b      	lsls	r3, r7, #29
 80017a4:	4655      	mov	r5, sl
 80017a6:	430b      	orrs	r3, r1
 80017a8:	08f8      	lsrs	r0, r7, #3
 80017aa:	e6c8      	b.n	800153e <__aeabi_dadd+0x25a>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x4ce>
 80017b0:	e081      	b.n	80018b6 <__aeabi_dadd+0x5d2>
 80017b2:	4643      	mov	r3, r8
 80017b4:	430b      	orrs	r3, r1
 80017b6:	d115      	bne.n	80017e4 <__aeabi_dadd+0x500>
 80017b8:	2080      	movs	r0, #128	; 0x80
 80017ba:	2500      	movs	r5, #0
 80017bc:	0300      	lsls	r0, r0, #12
 80017be:	e6e3      	b.n	8001588 <__aeabi_dadd+0x2a4>
 80017c0:	1a5c      	subs	r4, r3, r1
 80017c2:	42a3      	cmp	r3, r4
 80017c4:	419b      	sbcs	r3, r3
 80017c6:	1bc7      	subs	r7, r0, r7
 80017c8:	425b      	negs	r3, r3
 80017ca:	2601      	movs	r6, #1
 80017cc:	1aff      	subs	r7, r7, r3
 80017ce:	e5da      	b.n	8001386 <__aeabi_dadd+0xa2>
 80017d0:	0742      	lsls	r2, r0, #29
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	08c0      	lsrs	r0, r0, #3
 80017d8:	e6d2      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017da:	0742      	lsls	r2, r0, #29
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	4313      	orrs	r3, r2
 80017e0:	08c0      	lsrs	r0, r0, #3
 80017e2:	e6ac      	b.n	800153e <__aeabi_dadd+0x25a>
 80017e4:	4643      	mov	r3, r8
 80017e6:	4642      	mov	r2, r8
 80017e8:	08c9      	lsrs	r1, r1, #3
 80017ea:	075b      	lsls	r3, r3, #29
 80017ec:	4655      	mov	r5, sl
 80017ee:	430b      	orrs	r3, r1
 80017f0:	08d0      	lsrs	r0, r2, #3
 80017f2:	e6c5      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017f4:	4643      	mov	r3, r8
 80017f6:	4642      	mov	r2, r8
 80017f8:	075b      	lsls	r3, r3, #29
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	430b      	orrs	r3, r1
 80017fe:	08d0      	lsrs	r0, r2, #3
 8001800:	e6be      	b.n	8001580 <__aeabi_dadd+0x29c>
 8001802:	4303      	orrs	r3, r0
 8001804:	001c      	movs	r4, r3
 8001806:	1e63      	subs	r3, r4, #1
 8001808:	419c      	sbcs	r4, r3
 800180a:	e6fc      	b.n	8001606 <__aeabi_dadd+0x322>
 800180c:	0002      	movs	r2, r0
 800180e:	3c20      	subs	r4, #32
 8001810:	40e2      	lsrs	r2, r4
 8001812:	0014      	movs	r4, r2
 8001814:	4662      	mov	r2, ip
 8001816:	2a20      	cmp	r2, #32
 8001818:	d003      	beq.n	8001822 <__aeabi_dadd+0x53e>
 800181a:	2540      	movs	r5, #64	; 0x40
 800181c:	1aad      	subs	r5, r5, r2
 800181e:	40a8      	lsls	r0, r5
 8001820:	4303      	orrs	r3, r0
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	4183      	sbcs	r3, r0
 8001826:	4323      	orrs	r3, r4
 8001828:	e775      	b.n	8001716 <__aeabi_dadd+0x432>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d0e2      	beq.n	80017f4 <__aeabi_dadd+0x510>
 800182e:	003a      	movs	r2, r7
 8001830:	430a      	orrs	r2, r1
 8001832:	d0cd      	beq.n	80017d0 <__aeabi_dadd+0x4ec>
 8001834:	0742      	lsls	r2, r0, #29
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	4313      	orrs	r3, r2
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	08c0      	lsrs	r0, r0, #3
 800183e:	0312      	lsls	r2, r2, #12
 8001840:	4210      	tst	r0, r2
 8001842:	d006      	beq.n	8001852 <__aeabi_dadd+0x56e>
 8001844:	08fc      	lsrs	r4, r7, #3
 8001846:	4214      	tst	r4, r2
 8001848:	d103      	bne.n	8001852 <__aeabi_dadd+0x56e>
 800184a:	0020      	movs	r0, r4
 800184c:	08cb      	lsrs	r3, r1, #3
 800184e:	077a      	lsls	r2, r7, #29
 8001850:	4313      	orrs	r3, r2
 8001852:	0f5a      	lsrs	r2, r3, #29
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	0752      	lsls	r2, r2, #29
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	4313      	orrs	r3, r2
 800185c:	e690      	b.n	8001580 <__aeabi_dadd+0x29c>
 800185e:	4643      	mov	r3, r8
 8001860:	430b      	orrs	r3, r1
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x582>
 8001864:	e709      	b.n	800167a <__aeabi_dadd+0x396>
 8001866:	4643      	mov	r3, r8
 8001868:	4642      	mov	r2, r8
 800186a:	08c9      	lsrs	r1, r1, #3
 800186c:	075b      	lsls	r3, r3, #29
 800186e:	4655      	mov	r5, sl
 8001870:	430b      	orrs	r3, r1
 8001872:	08d0      	lsrs	r0, r2, #3
 8001874:	e666      	b.n	8001544 <__aeabi_dadd+0x260>
 8001876:	1acc      	subs	r4, r1, r3
 8001878:	42a1      	cmp	r1, r4
 800187a:	4189      	sbcs	r1, r1
 800187c:	1a3f      	subs	r7, r7, r0
 800187e:	4249      	negs	r1, r1
 8001880:	4655      	mov	r5, sl
 8001882:	2601      	movs	r6, #1
 8001884:	1a7f      	subs	r7, r7, r1
 8001886:	e57e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001888:	4642      	mov	r2, r8
 800188a:	1a5c      	subs	r4, r3, r1
 800188c:	1a87      	subs	r7, r0, r2
 800188e:	42a3      	cmp	r3, r4
 8001890:	4192      	sbcs	r2, r2
 8001892:	4252      	negs	r2, r2
 8001894:	1abf      	subs	r7, r7, r2
 8001896:	023a      	lsls	r2, r7, #8
 8001898:	d53d      	bpl.n	8001916 <__aeabi_dadd+0x632>
 800189a:	1acc      	subs	r4, r1, r3
 800189c:	42a1      	cmp	r1, r4
 800189e:	4189      	sbcs	r1, r1
 80018a0:	4643      	mov	r3, r8
 80018a2:	4249      	negs	r1, r1
 80018a4:	1a1f      	subs	r7, r3, r0
 80018a6:	4655      	mov	r5, sl
 80018a8:	1a7f      	subs	r7, r7, r1
 80018aa:	e595      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80018ac:	077b      	lsls	r3, r7, #29
 80018ae:	08c9      	lsrs	r1, r1, #3
 80018b0:	430b      	orrs	r3, r1
 80018b2:	08f8      	lsrs	r0, r7, #3
 80018b4:	e643      	b.n	800153e <__aeabi_dadd+0x25a>
 80018b6:	4644      	mov	r4, r8
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	430c      	orrs	r4, r1
 80018bc:	d130      	bne.n	8001920 <__aeabi_dadd+0x63c>
 80018be:	0742      	lsls	r2, r0, #29
 80018c0:	4313      	orrs	r3, r2
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	e65c      	b.n	8001580 <__aeabi_dadd+0x29c>
 80018c6:	077b      	lsls	r3, r7, #29
 80018c8:	08c9      	lsrs	r1, r1, #3
 80018ca:	430b      	orrs	r3, r1
 80018cc:	08f8      	lsrs	r0, r7, #3
 80018ce:	e639      	b.n	8001544 <__aeabi_dadd+0x260>
 80018d0:	185c      	adds	r4, r3, r1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	4440      	add	r0, r8
 80018d8:	425b      	negs	r3, r3
 80018da:	18c7      	adds	r7, r0, r3
 80018dc:	023b      	lsls	r3, r7, #8
 80018de:	d400      	bmi.n	80018e2 <__aeabi_dadd+0x5fe>
 80018e0:	e625      	b.n	800152e <__aeabi_dadd+0x24a>
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <__aeabi_dadd+0x674>)
 80018e4:	2601      	movs	r6, #1
 80018e6:	401f      	ands	r7, r3
 80018e8:	e621      	b.n	800152e <__aeabi_dadd+0x24a>
 80018ea:	0004      	movs	r4, r0
 80018ec:	3a20      	subs	r2, #32
 80018ee:	40d4      	lsrs	r4, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	2a20      	cmp	r2, #32
 80018f4:	d004      	beq.n	8001900 <__aeabi_dadd+0x61c>
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	4666      	mov	r6, ip
 80018fa:	1b92      	subs	r2, r2, r6
 80018fc:	4090      	lsls	r0, r2
 80018fe:	4303      	orrs	r3, r0
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	4193      	sbcs	r3, r2
 8001904:	431c      	orrs	r4, r3
 8001906:	e67e      	b.n	8001606 <__aeabi_dadd+0x322>
 8001908:	185c      	adds	r4, r3, r1
 800190a:	428c      	cmp	r4, r1
 800190c:	4189      	sbcs	r1, r1
 800190e:	4440      	add	r0, r8
 8001910:	4249      	negs	r1, r1
 8001912:	1847      	adds	r7, r0, r1
 8001914:	e6dd      	b.n	80016d2 <__aeabi_dadd+0x3ee>
 8001916:	0023      	movs	r3, r4
 8001918:	433b      	orrs	r3, r7
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x63a>
 800191c:	e6ad      	b.n	800167a <__aeabi_dadd+0x396>
 800191e:	e606      	b.n	800152e <__aeabi_dadd+0x24a>
 8001920:	0744      	lsls	r4, r0, #29
 8001922:	4323      	orrs	r3, r4
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	08c0      	lsrs	r0, r0, #3
 8001928:	0324      	lsls	r4, r4, #12
 800192a:	4220      	tst	r0, r4
 800192c:	d008      	beq.n	8001940 <__aeabi_dadd+0x65c>
 800192e:	4642      	mov	r2, r8
 8001930:	08d6      	lsrs	r6, r2, #3
 8001932:	4226      	tst	r6, r4
 8001934:	d104      	bne.n	8001940 <__aeabi_dadd+0x65c>
 8001936:	4655      	mov	r5, sl
 8001938:	0030      	movs	r0, r6
 800193a:	08cb      	lsrs	r3, r1, #3
 800193c:	0751      	lsls	r1, r2, #29
 800193e:	430b      	orrs	r3, r1
 8001940:	0f5a      	lsrs	r2, r3, #29
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	0752      	lsls	r2, r2, #29
 8001948:	4313      	orrs	r3, r2
 800194a:	e619      	b.n	8001580 <__aeabi_dadd+0x29c>
 800194c:	2300      	movs	r3, #0
 800194e:	4a01      	ldr	r2, [pc, #4]	; (8001954 <__aeabi_dadd+0x670>)
 8001950:	001f      	movs	r7, r3
 8001952:	e55e      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001954:	000007ff 	.word	0x000007ff
 8001958:	ff7fffff 	.word	0xff7fffff

0800195c <__aeabi_ddiv>:
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	4657      	mov	r7, sl
 8001960:	464e      	mov	r6, r9
 8001962:	4645      	mov	r5, r8
 8001964:	46de      	mov	lr, fp
 8001966:	b5e0      	push	{r5, r6, r7, lr}
 8001968:	4681      	mov	r9, r0
 800196a:	0005      	movs	r5, r0
 800196c:	030c      	lsls	r4, r1, #12
 800196e:	0048      	lsls	r0, r1, #1
 8001970:	4692      	mov	sl, r2
 8001972:	001f      	movs	r7, r3
 8001974:	b085      	sub	sp, #20
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	0d40      	lsrs	r0, r0, #21
 800197a:	0fce      	lsrs	r6, r1, #31
 800197c:	2800      	cmp	r0, #0
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0x26>
 8001980:	e156      	b.n	8001c30 <__aeabi_ddiv+0x2d4>
 8001982:	4bd4      	ldr	r3, [pc, #848]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001984:	4298      	cmp	r0, r3
 8001986:	d100      	bne.n	800198a <__aeabi_ddiv+0x2e>
 8001988:	e172      	b.n	8001c70 <__aeabi_ddiv+0x314>
 800198a:	0f6b      	lsrs	r3, r5, #29
 800198c:	00e4      	lsls	r4, r4, #3
 800198e:	431c      	orrs	r4, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	4323      	orrs	r3, r4
 8001996:	4698      	mov	r8, r3
 8001998:	4bcf      	ldr	r3, [pc, #828]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 800199a:	00ed      	lsls	r5, r5, #3
 800199c:	469b      	mov	fp, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	4699      	mov	r9, r3
 80019a2:	4483      	add	fp, r0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	033c      	lsls	r4, r7, #12
 80019a8:	007b      	lsls	r3, r7, #1
 80019aa:	4650      	mov	r0, sl
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	0fff      	lsrs	r7, r7, #31
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x5c>
 80019b6:	e11f      	b.n	8001bf8 <__aeabi_ddiv+0x29c>
 80019b8:	4ac6      	ldr	r2, [pc, #792]	; (8001cd4 <__aeabi_ddiv+0x378>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x64>
 80019be:	e162      	b.n	8001c86 <__aeabi_ddiv+0x32a>
 80019c0:	49c5      	ldr	r1, [pc, #788]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 80019c2:	0f42      	lsrs	r2, r0, #29
 80019c4:	468c      	mov	ip, r1
 80019c6:	00e4      	lsls	r4, r4, #3
 80019c8:	4659      	mov	r1, fp
 80019ca:	4314      	orrs	r4, r2
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	4463      	add	r3, ip
 80019d0:	0412      	lsls	r2, r2, #16
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	4314      	orrs	r4, r2
 80019d6:	469b      	mov	fp, r3
 80019d8:	00c2      	lsls	r2, r0, #3
 80019da:	2000      	movs	r0, #0
 80019dc:	0033      	movs	r3, r6
 80019de:	407b      	eors	r3, r7
 80019e0:	469a      	mov	sl, r3
 80019e2:	464b      	mov	r3, r9
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d827      	bhi.n	8001a38 <__aeabi_ddiv+0xdc>
 80019e8:	49bc      	ldr	r1, [pc, #752]	; (8001cdc <__aeabi_ddiv+0x380>)
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	58cb      	ldr	r3, [r1, r3]
 80019ee:	469f      	mov	pc, r3
 80019f0:	46b2      	mov	sl, r6
 80019f2:	9b00      	ldr	r3, [sp, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d016      	beq.n	8001a26 <__aeabi_ddiv+0xca>
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d100      	bne.n	80019fe <__aeabi_ddiv+0xa2>
 80019fc:	e28e      	b.n	8001f1c <__aeabi_ddiv+0x5c0>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d000      	beq.n	8001a04 <__aeabi_ddiv+0xa8>
 8001a02:	e0d9      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2400      	movs	r4, #0
 8001a08:	2500      	movs	r5, #0
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	051b      	lsls	r3, r3, #20
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	07d2      	lsls	r2, r2, #31
 8001a12:	4313      	orrs	r3, r2
 8001a14:	0028      	movs	r0, r5
 8001a16:	0019      	movs	r1, r3
 8001a18:	b005      	add	sp, #20
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	46a9      	mov	r9, r5
 8001a22:	46a0      	mov	r8, r4
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	2400      	movs	r4, #0
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4baa      	ldr	r3, [pc, #680]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001a2c:	e7ed      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001a2e:	46ba      	mov	sl, r7
 8001a30:	46a0      	mov	r8, r4
 8001a32:	0015      	movs	r5, r2
 8001a34:	9000      	str	r0, [sp, #0]
 8001a36:	e7dc      	b.n	80019f2 <__aeabi_ddiv+0x96>
 8001a38:	4544      	cmp	r4, r8
 8001a3a:	d200      	bcs.n	8001a3e <__aeabi_ddiv+0xe2>
 8001a3c:	e1c7      	b.n	8001dce <__aeabi_ddiv+0x472>
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_ddiv+0xe6>
 8001a40:	e1c2      	b.n	8001dc8 <__aeabi_ddiv+0x46c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	425b      	negs	r3, r3
 8001a46:	469c      	mov	ip, r3
 8001a48:	002e      	movs	r6, r5
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	44e3      	add	fp, ip
 8001a50:	0223      	lsls	r3, r4, #8
 8001a52:	0e14      	lsrs	r4, r2, #24
 8001a54:	431c      	orrs	r4, r3
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	4699      	mov	r9, r3
 8001a5a:	0423      	lsls	r3, r4, #16
 8001a5c:	0c1f      	lsrs	r7, r3, #16
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4649      	mov	r1, r9
 8001a62:	9200      	str	r2, [sp, #0]
 8001a64:	9701      	str	r7, [sp, #4]
 8001a66:	f7fe fbf7 	bl	8000258 <__aeabi_uidivmod>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	437a      	muls	r2, r7
 8001a6e:	040b      	lsls	r3, r1, #16
 8001a70:	0c31      	lsrs	r1, r6, #16
 8001a72:	4680      	mov	r8, r0
 8001a74:	4319      	orrs	r1, r3
 8001a76:	428a      	cmp	r2, r1
 8001a78:	d907      	bls.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	469c      	mov	ip, r3
 8001a80:	1909      	adds	r1, r1, r4
 8001a82:	44e0      	add	r8, ip
 8001a84:	428c      	cmp	r4, r1
 8001a86:	d800      	bhi.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a88:	e207      	b.n	8001e9a <__aeabi_ddiv+0x53e>
 8001a8a:	1a88      	subs	r0, r1, r2
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fbe3 	bl	8000258 <__aeabi_uidivmod>
 8001a92:	0409      	lsls	r1, r1, #16
 8001a94:	468c      	mov	ip, r1
 8001a96:	0431      	lsls	r1, r6, #16
 8001a98:	4666      	mov	r6, ip
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	0c09      	lsrs	r1, r1, #16
 8001a9e:	4342      	muls	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	4331      	orrs	r1, r6
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d904      	bls.n	8001ab2 <__aeabi_ddiv+0x156>
 8001aa8:	1909      	adds	r1, r1, r4
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	428c      	cmp	r4, r1
 8001aae:	d800      	bhi.n	8001ab2 <__aeabi_ddiv+0x156>
 8001ab0:	e1ed      	b.n	8001e8e <__aeabi_ddiv+0x532>
 8001ab2:	1a88      	subs	r0, r1, r2
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4641      	mov	r1, r8
 8001abe:	9b00      	ldr	r3, [sp, #0]
 8001ac0:	040e      	lsls	r6, r1, #16
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	001f      	movs	r7, r3
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	0c36      	lsrs	r6, r6, #16
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c19      	lsrs	r1, r3, #16
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	4373      	muls	r3, r6
 8001ad4:	0c12      	lsrs	r2, r2, #16
 8001ad6:	437e      	muls	r6, r7
 8001ad8:	9103      	str	r1, [sp, #12]
 8001ada:	4351      	muls	r1, r2
 8001adc:	437a      	muls	r2, r7
 8001ade:	0c1f      	lsrs	r7, r3, #16
 8001ae0:	46bc      	mov	ip, r7
 8001ae2:	1876      	adds	r6, r6, r1
 8001ae4:	4466      	add	r6, ip
 8001ae6:	42b1      	cmp	r1, r6
 8001ae8:	d903      	bls.n	8001af2 <__aeabi_ddiv+0x196>
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	468c      	mov	ip, r1
 8001af0:	4462      	add	r2, ip
 8001af2:	0c31      	lsrs	r1, r6, #16
 8001af4:	188a      	adds	r2, r1, r2
 8001af6:	0431      	lsls	r1, r6, #16
 8001af8:	041e      	lsls	r6, r3, #16
 8001afa:	0c36      	lsrs	r6, r6, #16
 8001afc:	198e      	adds	r6, r1, r6
 8001afe:	4290      	cmp	r0, r2
 8001b00:	d302      	bcc.n	8001b08 <__aeabi_ddiv+0x1ac>
 8001b02:	d112      	bne.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b04:	42b5      	cmp	r5, r6
 8001b06:	d210      	bcs.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	469c      	mov	ip, r3
 8001b10:	4465      	add	r5, ip
 8001b12:	001f      	movs	r7, r3
 8001b14:	429d      	cmp	r5, r3
 8001b16:	419b      	sbcs	r3, r3
 8001b18:	425b      	negs	r3, r3
 8001b1a:	191b      	adds	r3, r3, r4
 8001b1c:	18c0      	adds	r0, r0, r3
 8001b1e:	4284      	cmp	r4, r0
 8001b20:	d200      	bcs.n	8001b24 <__aeabi_ddiv+0x1c8>
 8001b22:	e1a0      	b.n	8001e66 <__aeabi_ddiv+0x50a>
 8001b24:	d100      	bne.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001b26:	e19b      	b.n	8001e60 <__aeabi_ddiv+0x504>
 8001b28:	4688      	mov	r8, r1
 8001b2a:	1bae      	subs	r6, r5, r6
 8001b2c:	42b5      	cmp	r5, r6
 8001b2e:	41ad      	sbcs	r5, r5
 8001b30:	1a80      	subs	r0, r0, r2
 8001b32:	426d      	negs	r5, r5
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	4284      	cmp	r4, r0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x1e0>
 8001b3a:	e1d5      	b.n	8001ee8 <__aeabi_ddiv+0x58c>
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	f7fe fb8b 	bl	8000258 <__aeabi_uidivmod>
 8001b42:	9a01      	ldr	r2, [sp, #4]
 8001b44:	040b      	lsls	r3, r1, #16
 8001b46:	4342      	muls	r2, r0
 8001b48:	0c31      	lsrs	r1, r6, #16
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	428a      	cmp	r2, r1
 8001b50:	d900      	bls.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001b52:	e16c      	b.n	8001e2e <__aeabi_ddiv+0x4d2>
 8001b54:	1a88      	subs	r0, r1, r2
 8001b56:	4649      	mov	r1, r9
 8001b58:	f7fe fb7e 	bl	8000258 <__aeabi_uidivmod>
 8001b5c:	9a01      	ldr	r2, [sp, #4]
 8001b5e:	0436      	lsls	r6, r6, #16
 8001b60:	4342      	muls	r2, r0
 8001b62:	0409      	lsls	r1, r1, #16
 8001b64:	0c36      	lsrs	r6, r6, #16
 8001b66:	0003      	movs	r3, r0
 8001b68:	430e      	orrs	r6, r1
 8001b6a:	42b2      	cmp	r2, r6
 8001b6c:	d900      	bls.n	8001b70 <__aeabi_ddiv+0x214>
 8001b6e:	e153      	b.n	8001e18 <__aeabi_ddiv+0x4bc>
 8001b70:	9803      	ldr	r0, [sp, #12]
 8001b72:	1ab6      	subs	r6, r6, r2
 8001b74:	0002      	movs	r2, r0
 8001b76:	042d      	lsls	r5, r5, #16
 8001b78:	431d      	orrs	r5, r3
 8001b7a:	9f02      	ldr	r7, [sp, #8]
 8001b7c:	042b      	lsls	r3, r5, #16
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	435a      	muls	r2, r3
 8001b82:	437b      	muls	r3, r7
 8001b84:	469c      	mov	ip, r3
 8001b86:	0c29      	lsrs	r1, r5, #16
 8001b88:	4348      	muls	r0, r1
 8001b8a:	0c13      	lsrs	r3, r2, #16
 8001b8c:	4484      	add	ip, r0
 8001b8e:	4463      	add	r3, ip
 8001b90:	4379      	muls	r1, r7
 8001b92:	4298      	cmp	r0, r3
 8001b94:	d903      	bls.n	8001b9e <__aeabi_ddiv+0x242>
 8001b96:	2080      	movs	r0, #128	; 0x80
 8001b98:	0240      	lsls	r0, r0, #9
 8001b9a:	4684      	mov	ip, r0
 8001b9c:	4461      	add	r1, ip
 8001b9e:	0c18      	lsrs	r0, r3, #16
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c12      	lsrs	r2, r2, #16
 8001ba6:	1841      	adds	r1, r0, r1
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	428e      	cmp	r6, r1
 8001bac:	d200      	bcs.n	8001bb0 <__aeabi_ddiv+0x254>
 8001bae:	e0ff      	b.n	8001db0 <__aeabi_ddiv+0x454>
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_ddiv+0x258>
 8001bb2:	e0fa      	b.n	8001daa <__aeabi_ddiv+0x44e>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <__aeabi_ddiv+0x384>)
 8001bba:	445a      	add	r2, fp
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	dc00      	bgt.n	8001bc2 <__aeabi_ddiv+0x266>
 8001bc0:	e0aa      	b.n	8001d18 <__aeabi_ddiv+0x3bc>
 8001bc2:	076b      	lsls	r3, r5, #29
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001bc6:	e13d      	b.n	8001e44 <__aeabi_ddiv+0x4e8>
 8001bc8:	08ed      	lsrs	r5, r5, #3
 8001bca:	4643      	mov	r3, r8
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	d506      	bpl.n	8001bde <__aeabi_ddiv+0x282>
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <__aeabi_ddiv+0x388>)
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	00d2      	lsls	r2, r2, #3
 8001bdc:	445a      	add	r2, fp
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <__aeabi_ddiv+0x38c>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dd00      	ble.n	8001be6 <__aeabi_ddiv+0x28a>
 8001be4:	e71f      	b.n	8001a26 <__aeabi_ddiv+0xca>
 8001be6:	4643      	mov	r3, r8
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	431d      	orrs	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	025c      	lsls	r4, r3, #9
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	0d53      	lsrs	r3, r2, #21
 8001bf6:	e708      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_ddiv+0x2a4>
 8001bfe:	e07b      	b.n	8001cf8 <__aeabi_ddiv+0x39c>
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x2aa>
 8001c04:	e0fa      	b.n	8001dfc <__aeabi_ddiv+0x4a0>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f001 fa22 	bl	8003050 <__clzsi2>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	3a0b      	subs	r2, #11
 8001c10:	231d      	movs	r3, #29
 8001c12:	0001      	movs	r1, r0
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	4652      	mov	r2, sl
 8001c18:	3908      	subs	r1, #8
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	408c      	lsls	r4, r1
 8001c1e:	4314      	orrs	r4, r2
 8001c20:	4652      	mov	r2, sl
 8001c22:	408a      	lsls	r2, r1
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <__aeabi_ddiv+0x390>)
 8001c26:	4458      	add	r0, fp
 8001c28:	469b      	mov	fp, r3
 8001c2a:	4483      	add	fp, r0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e6d5      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001c30:	464b      	mov	r3, r9
 8001c32:	4323      	orrs	r3, r4
 8001c34:	4698      	mov	r8, r3
 8001c36:	d044      	beq.n	8001cc2 <__aeabi_ddiv+0x366>
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_ddiv+0x2e2>
 8001c3c:	e0ce      	b.n	8001ddc <__aeabi_ddiv+0x480>
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f001 fa06 	bl	8003050 <__clzsi2>
 8001c44:	0001      	movs	r1, r0
 8001c46:	0002      	movs	r2, r0
 8001c48:	390b      	subs	r1, #11
 8001c4a:	231d      	movs	r3, #29
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	0010      	movs	r0, r2
 8001c52:	40d9      	lsrs	r1, r3
 8001c54:	3808      	subs	r0, #8
 8001c56:	4084      	lsls	r4, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	464d      	mov	r5, r9
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	4698      	mov	r8, r3
 8001c60:	4085      	lsls	r5, r0
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <__aeabi_ddiv+0x394>)
 8001c64:	1a83      	subs	r3, r0, r2
 8001c66:	469b      	mov	fp, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	e69a      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c70:	464b      	mov	r3, r9
 8001c72:	4323      	orrs	r3, r4
 8001c74:	4698      	mov	r8, r3
 8001c76:	d11d      	bne.n	8001cb4 <__aeabi_ddiv+0x358>
 8001c78:	2308      	movs	r3, #8
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	3b06      	subs	r3, #6
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4683      	mov	fp, r0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	e68f      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c86:	4652      	mov	r2, sl
 8001c88:	4322      	orrs	r2, r4
 8001c8a:	d109      	bne.n	8001ca0 <__aeabi_ddiv+0x344>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4319      	orrs	r1, r3
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001c94:	4689      	mov	r9, r1
 8001c96:	469c      	mov	ip, r3
 8001c98:	2400      	movs	r4, #0
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	44e3      	add	fp, ip
 8001c9e:	e69d      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	464a      	mov	r2, r9
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001ca8:	4691      	mov	r9, r2
 8001caa:	469c      	mov	ip, r3
 8001cac:	4652      	mov	r2, sl
 8001cae:	2003      	movs	r0, #3
 8001cb0:	44e3      	add	fp, ip
 8001cb2:	e693      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	3b09      	subs	r3, #9
 8001cba:	46a0      	mov	r8, r4
 8001cbc:	4683      	mov	fp, r0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	e671      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	2500      	movs	r5, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	e669      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	080186ec 	.word	0x080186ec
 8001ce0:	000003ff 	.word	0x000003ff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	000003f3 	.word	0x000003f3
 8001cf0:	fffffc0d 	.word	0xfffffc0d
 8001cf4:	fffff801 	.word	0xfffff801
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4689      	mov	r9, r1
 8001d00:	2400      	movs	r4, #0
 8001d02:	2001      	movs	r0, #1
 8001d04:	e66a      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	469a      	mov	sl, r3
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	e67a      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d14:	2501      	movs	r5, #1
 8001d16:	426d      	negs	r5, r5
 8001d18:	2301      	movs	r3, #1
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	2b38      	cmp	r3, #56	; 0x38
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_ddiv+0x3c6>
 8001d20:	e670      	b.n	8001a04 <__aeabi_ddiv+0xa8>
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_ddiv+0x3cc>
 8001d26:	e0bf      	b.n	8001ea8 <__aeabi_ddiv+0x54c>
 8001d28:	211f      	movs	r1, #31
 8001d2a:	4249      	negs	r1, r1
 8001d2c:	1a8a      	subs	r2, r1, r2
 8001d2e:	4641      	mov	r1, r8
 8001d30:	40d1      	lsrs	r1, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d004      	beq.n	8001d42 <__aeabi_ddiv+0x3e6>
 8001d38:	4641      	mov	r1, r8
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <__aeabi_ddiv+0x5e0>)
 8001d3c:	445b      	add	r3, fp
 8001d3e:	4099      	lsls	r1, r3
 8001d40:	430d      	orrs	r5, r1
 8001d42:	1e6b      	subs	r3, r5, #1
 8001d44:	419d      	sbcs	r5, r3
 8001d46:	2307      	movs	r3, #7
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	001d      	movs	r5, r3
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4015      	ands	r5, r2
 8001d50:	4213      	tst	r3, r2
 8001d52:	d100      	bne.n	8001d56 <__aeabi_ddiv+0x3fa>
 8001d54:	e0d4      	b.n	8001f00 <__aeabi_ddiv+0x5a4>
 8001d56:	210f      	movs	r1, #15
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4011      	ands	r1, r2
 8001d5c:	2904      	cmp	r1, #4
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x406>
 8001d60:	e0cb      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d62:	1d11      	adds	r1, r2, #4
 8001d64:	4291      	cmp	r1, r2
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	0219      	lsls	r1, r3, #8
 8001d70:	d400      	bmi.n	8001d74 <__aeabi_ddiv+0x418>
 8001d72:	e0c2      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d74:	2301      	movs	r3, #1
 8001d76:	2400      	movs	r4, #0
 8001d78:	2500      	movs	r5, #0
 8001d7a:	e646      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	4641      	mov	r1, r8
 8001d80:	031b      	lsls	r3, r3, #12
 8001d82:	4219      	tst	r1, r3
 8001d84:	d008      	beq.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d86:	421c      	tst	r4, r3
 8001d88:	d106      	bne.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d8a:	431c      	orrs	r4, r3
 8001d8c:	0324      	lsls	r4, r4, #12
 8001d8e:	46ba      	mov	sl, r7
 8001d90:	0015      	movs	r5, r2
 8001d92:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	e638      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	431c      	orrs	r4, r3
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	46b2      	mov	sl, r6
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001da6:	0b24      	lsrs	r4, r4, #12
 8001da8:	e62f      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_ddiv+0x454>
 8001dae:	e703      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001db0:	19a6      	adds	r6, r4, r6
 8001db2:	1e68      	subs	r0, r5, #1
 8001db4:	42a6      	cmp	r6, r4
 8001db6:	d200      	bcs.n	8001dba <__aeabi_ddiv+0x45e>
 8001db8:	e08d      	b.n	8001ed6 <__aeabi_ddiv+0x57a>
 8001dba:	428e      	cmp	r6, r1
 8001dbc:	d200      	bcs.n	8001dc0 <__aeabi_ddiv+0x464>
 8001dbe:	e0a3      	b.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x468>
 8001dc2:	e0b3      	b.n	8001f2c <__aeabi_ddiv+0x5d0>
 8001dc4:	0005      	movs	r5, r0
 8001dc6:	e6f5      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001dc8:	42aa      	cmp	r2, r5
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x472>
 8001dcc:	e639      	b.n	8001a42 <__aeabi_ddiv+0xe6>
 8001dce:	4643      	mov	r3, r8
 8001dd0:	07de      	lsls	r6, r3, #31
 8001dd2:	0858      	lsrs	r0, r3, #1
 8001dd4:	086b      	lsrs	r3, r5, #1
 8001dd6:	431e      	orrs	r6, r3
 8001dd8:	07ed      	lsls	r5, r5, #31
 8001dda:	e639      	b.n	8001a50 <__aeabi_ddiv+0xf4>
 8001ddc:	4648      	mov	r0, r9
 8001dde:	f001 f937 	bl	8003050 <__clzsi2>
 8001de2:	0001      	movs	r1, r0
 8001de4:	0002      	movs	r2, r0
 8001de6:	3115      	adds	r1, #21
 8001de8:	3220      	adds	r2, #32
 8001dea:	291c      	cmp	r1, #28
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_ddiv+0x494>
 8001dee:	e72c      	b.n	8001c4a <__aeabi_ddiv+0x2ee>
 8001df0:	464b      	mov	r3, r9
 8001df2:	3808      	subs	r0, #8
 8001df4:	4083      	lsls	r3, r0
 8001df6:	2500      	movs	r5, #0
 8001df8:	4698      	mov	r8, r3
 8001dfa:	e732      	b.n	8001c62 <__aeabi_ddiv+0x306>
 8001dfc:	f001 f928 	bl	8003050 <__clzsi2>
 8001e00:	0003      	movs	r3, r0
 8001e02:	001a      	movs	r2, r3
 8001e04:	3215      	adds	r2, #21
 8001e06:	3020      	adds	r0, #32
 8001e08:	2a1c      	cmp	r2, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_ddiv+0x4b2>
 8001e0c:	e700      	b.n	8001c10 <__aeabi_ddiv+0x2b4>
 8001e0e:	4654      	mov	r4, sl
 8001e10:	3b08      	subs	r3, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	409c      	lsls	r4, r3
 8001e16:	e705      	b.n	8001c24 <__aeabi_ddiv+0x2c8>
 8001e18:	1936      	adds	r6, r6, r4
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	42b4      	cmp	r4, r6
 8001e1e:	d900      	bls.n	8001e22 <__aeabi_ddiv+0x4c6>
 8001e20:	e6a6      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e22:	42b2      	cmp	r2, r6
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x4cc>
 8001e26:	e6a3      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e28:	1e83      	subs	r3, r0, #2
 8001e2a:	1936      	adds	r6, r6, r4
 8001e2c:	e6a0      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e2e:	1909      	adds	r1, r1, r4
 8001e30:	3d01      	subs	r5, #1
 8001e32:	428c      	cmp	r4, r1
 8001e34:	d900      	bls.n	8001e38 <__aeabi_ddiv+0x4dc>
 8001e36:	e68d      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d800      	bhi.n	8001e3e <__aeabi_ddiv+0x4e2>
 8001e3c:	e68a      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e3e:	1e85      	subs	r5, r0, #2
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	e687      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e44:	230f      	movs	r3, #15
 8001e46:	402b      	ands	r3, r5
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_ddiv+0x4f2>
 8001e4c:	e6bc      	b.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	425b      	negs	r3, r3
 8001e52:	42ab      	cmp	r3, r5
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	3504      	adds	r5, #4
 8001e58:	425b      	negs	r3, r3
 8001e5a:	08ed      	lsrs	r5, r5, #3
 8001e5c:	4498      	add	r8, r3
 8001e5e:	e6b4      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001e60:	42af      	cmp	r7, r5
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x50a>
 8001e64:	e660      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e66:	4282      	cmp	r2, r0
 8001e68:	d804      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x512>
 8001e6c:	e65c      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e6e:	42ae      	cmp	r6, r5
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e72:	e659      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e74:	2302      	movs	r3, #2
 8001e76:	425b      	negs	r3, r3
 8001e78:	469c      	mov	ip, r3
 8001e7a:	9b00      	ldr	r3, [sp, #0]
 8001e7c:	44e0      	add	r8, ip
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4465      	add	r5, ip
 8001e82:	429d      	cmp	r5, r3
 8001e84:	419b      	sbcs	r3, r3
 8001e86:	425b      	negs	r3, r3
 8001e88:	191b      	adds	r3, r3, r4
 8001e8a:	18c0      	adds	r0, r0, r3
 8001e8c:	e64d      	b.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001e8e:	428a      	cmp	r2, r1
 8001e90:	d800      	bhi.n	8001e94 <__aeabi_ddiv+0x538>
 8001e92:	e60e      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	1909      	adds	r1, r1, r4
 8001e98:	e60b      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d800      	bhi.n	8001ea0 <__aeabi_ddiv+0x544>
 8001e9e:	e5f4      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea0:	1e83      	subs	r3, r0, #2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	1909      	adds	r1, r1, r4
 8001ea6:	e5f0      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea8:	4925      	ldr	r1, [pc, #148]	; (8001f40 <__aeabi_ddiv+0x5e4>)
 8001eaa:	0028      	movs	r0, r5
 8001eac:	4459      	add	r1, fp
 8001eae:	408d      	lsls	r5, r1
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	408a      	lsls	r2, r1
 8001eb4:	1e69      	subs	r1, r5, #1
 8001eb6:	418d      	sbcs	r5, r1
 8001eb8:	4641      	mov	r1, r8
 8001eba:	40d8      	lsrs	r0, r3
 8001ebc:	40d9      	lsrs	r1, r3
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	432a      	orrs	r2, r5
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	0751      	lsls	r1, r2, #29
 8001ec6:	d100      	bne.n	8001eca <__aeabi_ddiv+0x56e>
 8001ec8:	e751      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001eca:	210f      	movs	r1, #15
 8001ecc:	4011      	ands	r1, r2
 8001ece:	2904      	cmp	r1, #4
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_ddiv+0x578>
 8001ed2:	e746      	b.n	8001d62 <__aeabi_ddiv+0x406>
 8001ed4:	e74b      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001ed6:	0005      	movs	r5, r0
 8001ed8:	428e      	cmp	r6, r1
 8001eda:	d000      	beq.n	8001ede <__aeabi_ddiv+0x582>
 8001edc:	e66a      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ede:	9a00      	ldr	r2, [sp, #0]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_ddiv+0x58a>
 8001ee4:	e666      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ee6:	e667      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <__aeabi_ddiv+0x5e8>)
 8001eea:	445a      	add	r2, fp
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x596>
 8001ef0:	e710      	b.n	8001d14 <__aeabi_ddiv+0x3b8>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4498      	add	r8, r3
 8001ef8:	e667      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001efa:	075d      	lsls	r5, r3, #29
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	0b1c      	lsrs	r4, r3, #12
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	2300      	movs	r3, #0
 8001f04:	4315      	orrs	r5, r2
 8001f06:	e580      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f08:	9800      	ldr	r0, [sp, #0]
 8001f0a:	3d02      	subs	r5, #2
 8001f0c:	0042      	lsls	r2, r0, #1
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	41bf      	sbcs	r7, r7
 8001f12:	427f      	negs	r7, r7
 8001f14:	193c      	adds	r4, r7, r4
 8001f16:	1936      	adds	r6, r6, r4
 8001f18:	9200      	str	r2, [sp, #0]
 8001f1a:	e7dd      	b.n	8001ed8 <__aeabi_ddiv+0x57c>
 8001f1c:	2480      	movs	r4, #128	; 0x80
 8001f1e:	4643      	mov	r3, r8
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	e56e      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f2c:	9a00      	ldr	r2, [sp, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3ea      	bcc.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001f32:	0005      	movs	r5, r0
 8001f34:	e7d3      	b.n	8001ede <__aeabi_ddiv+0x582>
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	0000043e 	.word	0x0000043e
 8001f40:	0000041e 	.word	0x0000041e
 8001f44:	000003ff 	.word	0x000003ff

08001f48 <__eqdf2>:
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	464e      	mov	r6, r9
 8001f4c:	4645      	mov	r5, r8
 8001f4e:	46de      	mov	lr, fp
 8001f50:	4657      	mov	r7, sl
 8001f52:	4690      	mov	r8, r2
 8001f54:	b5e0      	push	{r5, r6, r7, lr}
 8001f56:	0017      	movs	r7, r2
 8001f58:	031a      	lsls	r2, r3, #12
 8001f5a:	0b12      	lsrs	r2, r2, #12
 8001f5c:	0005      	movs	r5, r0
 8001f5e:	4684      	mov	ip, r0
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <__eqdf2+0x80>)
 8001f62:	030e      	lsls	r6, r1, #12
 8001f64:	004c      	lsls	r4, r1, #1
 8001f66:	4691      	mov	r9, r2
 8001f68:	005a      	lsls	r2, r3, #1
 8001f6a:	0fdb      	lsrs	r3, r3, #31
 8001f6c:	469b      	mov	fp, r3
 8001f6e:	0b36      	lsrs	r6, r6, #12
 8001f70:	0d64      	lsrs	r4, r4, #21
 8001f72:	0fc9      	lsrs	r1, r1, #31
 8001f74:	0d52      	lsrs	r2, r2, #21
 8001f76:	4284      	cmp	r4, r0
 8001f78:	d019      	beq.n	8001fae <__eqdf2+0x66>
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	d010      	beq.n	8001fa0 <__eqdf2+0x58>
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4294      	cmp	r4, r2
 8001f82:	d10e      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f84:	454e      	cmp	r6, r9
 8001f86:	d10c      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f88:	2001      	movs	r0, #1
 8001f8a:	45c4      	cmp	ip, r8
 8001f8c:	d109      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f8e:	4559      	cmp	r1, fp
 8001f90:	d017      	beq.n	8001fc2 <__eqdf2+0x7a>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d105      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f96:	0030      	movs	r0, r6
 8001f98:	4328      	orrs	r0, r5
 8001f9a:	1e43      	subs	r3, r0, #1
 8001f9c:	4198      	sbcs	r0, r3
 8001f9e:	e000      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa4:	46bb      	mov	fp, r7
 8001fa6:	46b2      	mov	sl, r6
 8001fa8:	46a9      	mov	r9, r5
 8001faa:	46a0      	mov	r8, r4
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	0033      	movs	r3, r6
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	432b      	orrs	r3, r5
 8001fb4:	d1f5      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fb6:	42a2      	cmp	r2, r4
 8001fb8:	d1f3      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fba:	464b      	mov	r3, r9
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	d1f0      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fc0:	e7e2      	b.n	8001f88 <__eqdf2+0x40>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	e7ed      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__gedf2>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4647      	mov	r7, r8
 8001fd0:	46ce      	mov	lr, r9
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	0b1b      	lsrs	r3, r3, #12
 8001fdc:	4d2d      	ldr	r5, [pc, #180]	; (8002094 <__gedf2+0xc8>)
 8001fde:	004a      	lsls	r2, r1, #1
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	0043      	lsls	r3, r0, #1
 8001fe6:	030f      	lsls	r7, r1, #12
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	46b0      	mov	r8, r6
 8001fec:	0b3f      	lsrs	r7, r7, #12
 8001fee:	0d52      	lsrs	r2, r2, #21
 8001ff0:	0fc9      	lsrs	r1, r1, #31
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	0fc0      	lsrs	r0, r0, #31
 8001ff6:	42aa      	cmp	r2, r5
 8001ff8:	d021      	beq.n	800203e <__gedf2+0x72>
 8001ffa:	42ab      	cmp	r3, r5
 8001ffc:	d013      	beq.n	8002026 <__gedf2+0x5a>
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d122      	bne.n	8002048 <__gedf2+0x7c>
 8002002:	433c      	orrs	r4, r7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <__gedf2+0x42>
 8002008:	464d      	mov	r5, r9
 800200a:	432e      	orrs	r6, r5
 800200c:	d022      	beq.n	8002054 <__gedf2+0x88>
 800200e:	2c00      	cmp	r4, #0
 8002010:	d010      	beq.n	8002034 <__gedf2+0x68>
 8002012:	4281      	cmp	r1, r0
 8002014:	d022      	beq.n	800205c <__gedf2+0x90>
 8002016:	2002      	movs	r0, #2
 8002018:	3901      	subs	r1, #1
 800201a:	4008      	ands	r0, r1
 800201c:	3801      	subs	r0, #1
 800201e:	bcc0      	pop	{r6, r7}
 8002020:	46b9      	mov	r9, r7
 8002022:	46b0      	mov	r8, r6
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	464d      	mov	r5, r9
 8002028:	432e      	orrs	r6, r5
 800202a:	d129      	bne.n	8002080 <__gedf2+0xb4>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d1f0      	bne.n	8002012 <__gedf2+0x46>
 8002030:	433c      	orrs	r4, r7
 8002032:	d1ee      	bne.n	8002012 <__gedf2+0x46>
 8002034:	2800      	cmp	r0, #0
 8002036:	d1f2      	bne.n	800201e <__gedf2+0x52>
 8002038:	2001      	movs	r0, #1
 800203a:	4240      	negs	r0, r0
 800203c:	e7ef      	b.n	800201e <__gedf2+0x52>
 800203e:	003d      	movs	r5, r7
 8002040:	4325      	orrs	r5, r4
 8002042:	d11d      	bne.n	8002080 <__gedf2+0xb4>
 8002044:	4293      	cmp	r3, r2
 8002046:	d0ee      	beq.n	8002026 <__gedf2+0x5a>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e2      	bne.n	8002012 <__gedf2+0x46>
 800204c:	464c      	mov	r4, r9
 800204e:	4326      	orrs	r6, r4
 8002050:	d1df      	bne.n	8002012 <__gedf2+0x46>
 8002052:	e7e0      	b.n	8002016 <__gedf2+0x4a>
 8002054:	2000      	movs	r0, #0
 8002056:	2c00      	cmp	r4, #0
 8002058:	d0e1      	beq.n	800201e <__gedf2+0x52>
 800205a:	e7dc      	b.n	8002016 <__gedf2+0x4a>
 800205c:	429a      	cmp	r2, r3
 800205e:	dc0a      	bgt.n	8002076 <__gedf2+0xaa>
 8002060:	dbe8      	blt.n	8002034 <__gedf2+0x68>
 8002062:	454f      	cmp	r7, r9
 8002064:	d8d7      	bhi.n	8002016 <__gedf2+0x4a>
 8002066:	d00e      	beq.n	8002086 <__gedf2+0xba>
 8002068:	2000      	movs	r0, #0
 800206a:	454f      	cmp	r7, r9
 800206c:	d2d7      	bcs.n	800201e <__gedf2+0x52>
 800206e:	2900      	cmp	r1, #0
 8002070:	d0e2      	beq.n	8002038 <__gedf2+0x6c>
 8002072:	0008      	movs	r0, r1
 8002074:	e7d3      	b.n	800201e <__gedf2+0x52>
 8002076:	4243      	negs	r3, r0
 8002078:	4158      	adcs	r0, r3
 800207a:	0040      	lsls	r0, r0, #1
 800207c:	3801      	subs	r0, #1
 800207e:	e7ce      	b.n	800201e <__gedf2+0x52>
 8002080:	2002      	movs	r0, #2
 8002082:	4240      	negs	r0, r0
 8002084:	e7cb      	b.n	800201e <__gedf2+0x52>
 8002086:	45c4      	cmp	ip, r8
 8002088:	d8c5      	bhi.n	8002016 <__gedf2+0x4a>
 800208a:	2000      	movs	r0, #0
 800208c:	45c4      	cmp	ip, r8
 800208e:	d2c6      	bcs.n	800201e <__gedf2+0x52>
 8002090:	e7ed      	b.n	800206e <__gedf2+0xa2>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000007ff 	.word	0x000007ff

08002098 <__ledf2>:
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	4647      	mov	r7, r8
 800209c:	46ce      	mov	lr, r9
 800209e:	0004      	movs	r4, r0
 80020a0:	0018      	movs	r0, r3
 80020a2:	0016      	movs	r6, r2
 80020a4:	031b      	lsls	r3, r3, #12
 80020a6:	0b1b      	lsrs	r3, r3, #12
 80020a8:	4d2c      	ldr	r5, [pc, #176]	; (800215c <__ledf2+0xc4>)
 80020aa:	004a      	lsls	r2, r1, #1
 80020ac:	4699      	mov	r9, r3
 80020ae:	b580      	push	{r7, lr}
 80020b0:	0043      	lsls	r3, r0, #1
 80020b2:	030f      	lsls	r7, r1, #12
 80020b4:	46a4      	mov	ip, r4
 80020b6:	46b0      	mov	r8, r6
 80020b8:	0b3f      	lsrs	r7, r7, #12
 80020ba:	0d52      	lsrs	r2, r2, #21
 80020bc:	0fc9      	lsrs	r1, r1, #31
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	0fc0      	lsrs	r0, r0, #31
 80020c2:	42aa      	cmp	r2, r5
 80020c4:	d00d      	beq.n	80020e2 <__ledf2+0x4a>
 80020c6:	42ab      	cmp	r3, r5
 80020c8:	d010      	beq.n	80020ec <__ledf2+0x54>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d127      	bne.n	800211e <__ledf2+0x86>
 80020ce:	433c      	orrs	r4, r7
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <__ledf2+0x60>
 80020d4:	464d      	mov	r5, r9
 80020d6:	432e      	orrs	r6, r5
 80020d8:	d10e      	bne.n	80020f8 <__ledf2+0x60>
 80020da:	2000      	movs	r0, #0
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d015      	beq.n	800210c <__ledf2+0x74>
 80020e0:	e00e      	b.n	8002100 <__ledf2+0x68>
 80020e2:	003d      	movs	r5, r7
 80020e4:	4325      	orrs	r5, r4
 80020e6:	d110      	bne.n	800210a <__ledf2+0x72>
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d118      	bne.n	800211e <__ledf2+0x86>
 80020ec:	464d      	mov	r5, r9
 80020ee:	432e      	orrs	r6, r5
 80020f0:	d10b      	bne.n	800210a <__ledf2+0x72>
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d102      	bne.n	80020fc <__ledf2+0x64>
 80020f6:	433c      	orrs	r4, r7
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d00b      	beq.n	8002114 <__ledf2+0x7c>
 80020fc:	4281      	cmp	r1, r0
 80020fe:	d014      	beq.n	800212a <__ledf2+0x92>
 8002100:	2002      	movs	r0, #2
 8002102:	3901      	subs	r1, #1
 8002104:	4008      	ands	r0, r1
 8002106:	3801      	subs	r0, #1
 8002108:	e000      	b.n	800210c <__ledf2+0x74>
 800210a:	2002      	movs	r0, #2
 800210c:	bcc0      	pop	{r6, r7}
 800210e:	46b9      	mov	r9, r7
 8002110:	46b0      	mov	r8, r6
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002114:	2800      	cmp	r0, #0
 8002116:	d1f9      	bne.n	800210c <__ledf2+0x74>
 8002118:	2001      	movs	r0, #1
 800211a:	4240      	negs	r0, r0
 800211c:	e7f6      	b.n	800210c <__ledf2+0x74>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ec      	bne.n	80020fc <__ledf2+0x64>
 8002122:	464c      	mov	r4, r9
 8002124:	4326      	orrs	r6, r4
 8002126:	d1e9      	bne.n	80020fc <__ledf2+0x64>
 8002128:	e7ea      	b.n	8002100 <__ledf2+0x68>
 800212a:	429a      	cmp	r2, r3
 800212c:	dd04      	ble.n	8002138 <__ledf2+0xa0>
 800212e:	4243      	negs	r3, r0
 8002130:	4158      	adcs	r0, r3
 8002132:	0040      	lsls	r0, r0, #1
 8002134:	3801      	subs	r0, #1
 8002136:	e7e9      	b.n	800210c <__ledf2+0x74>
 8002138:	429a      	cmp	r2, r3
 800213a:	dbeb      	blt.n	8002114 <__ledf2+0x7c>
 800213c:	454f      	cmp	r7, r9
 800213e:	d8df      	bhi.n	8002100 <__ledf2+0x68>
 8002140:	d006      	beq.n	8002150 <__ledf2+0xb8>
 8002142:	2000      	movs	r0, #0
 8002144:	454f      	cmp	r7, r9
 8002146:	d2e1      	bcs.n	800210c <__ledf2+0x74>
 8002148:	2900      	cmp	r1, #0
 800214a:	d0e5      	beq.n	8002118 <__ledf2+0x80>
 800214c:	0008      	movs	r0, r1
 800214e:	e7dd      	b.n	800210c <__ledf2+0x74>
 8002150:	45c4      	cmp	ip, r8
 8002152:	d8d5      	bhi.n	8002100 <__ledf2+0x68>
 8002154:	2000      	movs	r0, #0
 8002156:	45c4      	cmp	ip, r8
 8002158:	d2d8      	bcs.n	800210c <__ledf2+0x74>
 800215a:	e7f5      	b.n	8002148 <__ledf2+0xb0>
 800215c:	000007ff 	.word	0x000007ff

08002160 <__aeabi_dmul>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	4645      	mov	r5, r8
 8002168:	46de      	mov	lr, fp
 800216a:	b5e0      	push	{r5, r6, r7, lr}
 800216c:	4698      	mov	r8, r3
 800216e:	030c      	lsls	r4, r1, #12
 8002170:	004b      	lsls	r3, r1, #1
 8002172:	0006      	movs	r6, r0
 8002174:	4692      	mov	sl, r2
 8002176:	b087      	sub	sp, #28
 8002178:	0b24      	lsrs	r4, r4, #12
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	0fcf      	lsrs	r7, r1, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dmul+0x24>
 8002182:	e15c      	b.n	800243e <__aeabi_dmul+0x2de>
 8002184:	4ad9      	ldr	r2, [pc, #868]	; (80024ec <__aeabi_dmul+0x38c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d100      	bne.n	800218c <__aeabi_dmul+0x2c>
 800218a:	e175      	b.n	8002478 <__aeabi_dmul+0x318>
 800218c:	0f42      	lsrs	r2, r0, #29
 800218e:	00e4      	lsls	r4, r4, #3
 8002190:	4314      	orrs	r4, r2
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	4314      	orrs	r4, r2
 8002198:	4ad5      	ldr	r2, [pc, #852]	; (80024f0 <__aeabi_dmul+0x390>)
 800219a:	00c5      	lsls	r5, r0, #3
 800219c:	4694      	mov	ip, r2
 800219e:	4463      	add	r3, ip
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	4699      	mov	r9, r3
 80021a6:	469b      	mov	fp, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	4642      	mov	r2, r8
 80021ac:	031e      	lsls	r6, r3, #12
 80021ae:	0fd2      	lsrs	r2, r2, #31
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4650      	mov	r0, sl
 80021b4:	4690      	mov	r8, r2
 80021b6:	0b36      	lsrs	r6, r6, #12
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	d100      	bne.n	80021be <__aeabi_dmul+0x5e>
 80021bc:	e120      	b.n	8002400 <__aeabi_dmul+0x2a0>
 80021be:	4acb      	ldr	r2, [pc, #812]	; (80024ec <__aeabi_dmul+0x38c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x66>
 80021c4:	e162      	b.n	800248c <__aeabi_dmul+0x32c>
 80021c6:	49ca      	ldr	r1, [pc, #808]	; (80024f0 <__aeabi_dmul+0x390>)
 80021c8:	0f42      	lsrs	r2, r0, #29
 80021ca:	468c      	mov	ip, r1
 80021cc:	9900      	ldr	r1, [sp, #0]
 80021ce:	4463      	add	r3, ip
 80021d0:	00f6      	lsls	r6, r6, #3
 80021d2:	468c      	mov	ip, r1
 80021d4:	4316      	orrs	r6, r2
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	449c      	add	ip, r3
 80021da:	0412      	lsls	r2, r2, #16
 80021dc:	4663      	mov	r3, ip
 80021de:	4316      	orrs	r6, r2
 80021e0:	00c2      	lsls	r2, r0, #3
 80021e2:	2000      	movs	r0, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	4643      	mov	r3, r8
 80021ea:	3101      	adds	r1, #1
 80021ec:	468c      	mov	ip, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	407b      	eors	r3, r7
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	290f      	cmp	r1, #15
 80021f6:	d826      	bhi.n	8002246 <__aeabi_dmul+0xe6>
 80021f8:	4bbe      	ldr	r3, [pc, #760]	; (80024f4 <__aeabi_dmul+0x394>)
 80021fa:	0089      	lsls	r1, r1, #2
 80021fc:	5859      	ldr	r1, [r3, r1]
 80021fe:	468f      	mov	pc, r1
 8002200:	4643      	mov	r3, r8
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	0034      	movs	r4, r6
 8002206:	0015      	movs	r5, r2
 8002208:	4683      	mov	fp, r0
 800220a:	465b      	mov	r3, fp
 800220c:	2b02      	cmp	r3, #2
 800220e:	d016      	beq.n	800223e <__aeabi_dmul+0xde>
 8002210:	2b03      	cmp	r3, #3
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0xb6>
 8002214:	e203      	b.n	800261e <__aeabi_dmul+0x4be>
 8002216:	2b01      	cmp	r3, #1
 8002218:	d000      	beq.n	800221c <__aeabi_dmul+0xbc>
 800221a:	e0cd      	b.n	80023b8 <__aeabi_dmul+0x258>
 800221c:	2200      	movs	r2, #0
 800221e:	2400      	movs	r4, #0
 8002220:	2500      	movs	r5, #0
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	0512      	lsls	r2, r2, #20
 8002226:	4322      	orrs	r2, r4
 8002228:	07db      	lsls	r3, r3, #31
 800222a:	431a      	orrs	r2, r3
 800222c:	0028      	movs	r0, r5
 800222e:	0011      	movs	r1, r2
 8002230:	b007      	add	sp, #28
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	46bb      	mov	fp, r7
 8002236:	46b2      	mov	sl, r6
 8002238:	46a9      	mov	r9, r5
 800223a:	46a0      	mov	r8, r4
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223e:	2400      	movs	r4, #0
 8002240:	2500      	movs	r5, #0
 8002242:	4aaa      	ldr	r2, [pc, #680]	; (80024ec <__aeabi_dmul+0x38c>)
 8002244:	e7ed      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002246:	0c28      	lsrs	r0, r5, #16
 8002248:	042d      	lsls	r5, r5, #16
 800224a:	0c2d      	lsrs	r5, r5, #16
 800224c:	002b      	movs	r3, r5
 800224e:	0c11      	lsrs	r1, r2, #16
 8002250:	0412      	lsls	r2, r2, #16
 8002252:	0c12      	lsrs	r2, r2, #16
 8002254:	4353      	muls	r3, r2
 8002256:	4698      	mov	r8, r3
 8002258:	0013      	movs	r3, r2
 800225a:	002f      	movs	r7, r5
 800225c:	4343      	muls	r3, r0
 800225e:	4699      	mov	r9, r3
 8002260:	434f      	muls	r7, r1
 8002262:	444f      	add	r7, r9
 8002264:	46bb      	mov	fp, r7
 8002266:	4647      	mov	r7, r8
 8002268:	000b      	movs	r3, r1
 800226a:	0c3f      	lsrs	r7, r7, #16
 800226c:	46ba      	mov	sl, r7
 800226e:	4343      	muls	r3, r0
 8002270:	44da      	add	sl, fp
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	45d1      	cmp	r9, sl
 8002276:	d904      	bls.n	8002282 <__aeabi_dmul+0x122>
 8002278:	2780      	movs	r7, #128	; 0x80
 800227a:	027f      	lsls	r7, r7, #9
 800227c:	46b9      	mov	r9, r7
 800227e:	444b      	add	r3, r9
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	4653      	mov	r3, sl
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	469b      	mov	fp, r3
 8002288:	4653      	mov	r3, sl
 800228a:	041f      	lsls	r7, r3, #16
 800228c:	4643      	mov	r3, r8
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	4698      	mov	r8, r3
 8002294:	003b      	movs	r3, r7
 8002296:	4443      	add	r3, r8
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	0c33      	lsrs	r3, r6, #16
 800229c:	0436      	lsls	r6, r6, #16
 800229e:	0c36      	lsrs	r6, r6, #16
 80022a0:	4698      	mov	r8, r3
 80022a2:	0033      	movs	r3, r6
 80022a4:	4343      	muls	r3, r0
 80022a6:	4699      	mov	r9, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4343      	muls	r3, r0
 80022ac:	002f      	movs	r7, r5
 80022ae:	469a      	mov	sl, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	4377      	muls	r7, r6
 80022b4:	435d      	muls	r5, r3
 80022b6:	0c38      	lsrs	r0, r7, #16
 80022b8:	444d      	add	r5, r9
 80022ba:	1945      	adds	r5, r0, r5
 80022bc:	45a9      	cmp	r9, r5
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x168>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4699      	mov	r9, r3
 80022c6:	44ca      	add	sl, r9
 80022c8:	043f      	lsls	r7, r7, #16
 80022ca:	0c28      	lsrs	r0, r5, #16
 80022cc:	0c3f      	lsrs	r7, r7, #16
 80022ce:	042d      	lsls	r5, r5, #16
 80022d0:	19ed      	adds	r5, r5, r7
 80022d2:	0c27      	lsrs	r7, r4, #16
 80022d4:	0424      	lsls	r4, r4, #16
 80022d6:	0c24      	lsrs	r4, r4, #16
 80022d8:	0003      	movs	r3, r0
 80022da:	0020      	movs	r0, r4
 80022dc:	4350      	muls	r0, r2
 80022de:	437a      	muls	r2, r7
 80022e0:	4691      	mov	r9, r2
 80022e2:	003a      	movs	r2, r7
 80022e4:	4453      	add	r3, sl
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	0c03      	lsrs	r3, r0, #16
 80022ea:	469a      	mov	sl, r3
 80022ec:	434a      	muls	r2, r1
 80022ee:	4361      	muls	r1, r4
 80022f0:	4449      	add	r1, r9
 80022f2:	4451      	add	r1, sl
 80022f4:	44ab      	add	fp, r5
 80022f6:	4589      	cmp	r9, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x1a2>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	4699      	mov	r9, r3
 8002300:	444a      	add	r2, r9
 8002302:	0400      	lsls	r0, r0, #16
 8002304:	0c0b      	lsrs	r3, r1, #16
 8002306:	0c00      	lsrs	r0, r0, #16
 8002308:	0409      	lsls	r1, r1, #16
 800230a:	1809      	adds	r1, r1, r0
 800230c:	0020      	movs	r0, r4
 800230e:	4699      	mov	r9, r3
 8002310:	4643      	mov	r3, r8
 8002312:	4370      	muls	r0, r6
 8002314:	435c      	muls	r4, r3
 8002316:	437e      	muls	r6, r7
 8002318:	435f      	muls	r7, r3
 800231a:	0c03      	lsrs	r3, r0, #16
 800231c:	4698      	mov	r8, r3
 800231e:	19a4      	adds	r4, r4, r6
 8002320:	4444      	add	r4, r8
 8002322:	444a      	add	r2, r9
 8002324:	9703      	str	r7, [sp, #12]
 8002326:	42a6      	cmp	r6, r4
 8002328:	d904      	bls.n	8002334 <__aeabi_dmul+0x1d4>
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	4698      	mov	r8, r3
 8002330:	4447      	add	r7, r8
 8002332:	9703      	str	r7, [sp, #12]
 8002334:	0423      	lsls	r3, r4, #16
 8002336:	9e02      	ldr	r6, [sp, #8]
 8002338:	469a      	mov	sl, r3
 800233a:	9b05      	ldr	r3, [sp, #20]
 800233c:	445e      	add	r6, fp
 800233e:	4698      	mov	r8, r3
 8002340:	42ae      	cmp	r6, r5
 8002342:	41ad      	sbcs	r5, r5
 8002344:	1876      	adds	r6, r6, r1
 8002346:	428e      	cmp	r6, r1
 8002348:	4189      	sbcs	r1, r1
 800234a:	0400      	lsls	r0, r0, #16
 800234c:	0c00      	lsrs	r0, r0, #16
 800234e:	4450      	add	r0, sl
 8002350:	4440      	add	r0, r8
 8002352:	426d      	negs	r5, r5
 8002354:	1947      	adds	r7, r0, r5
 8002356:	46b8      	mov	r8, r7
 8002358:	4693      	mov	fp, r2
 800235a:	4249      	negs	r1, r1
 800235c:	4689      	mov	r9, r1
 800235e:	44c3      	add	fp, r8
 8002360:	44d9      	add	r9, fp
 8002362:	4298      	cmp	r0, r3
 8002364:	4180      	sbcs	r0, r0
 8002366:	45a8      	cmp	r8, r5
 8002368:	41ad      	sbcs	r5, r5
 800236a:	4593      	cmp	fp, r2
 800236c:	4192      	sbcs	r2, r2
 800236e:	4589      	cmp	r9, r1
 8002370:	4189      	sbcs	r1, r1
 8002372:	426d      	negs	r5, r5
 8002374:	4240      	negs	r0, r0
 8002376:	4328      	orrs	r0, r5
 8002378:	0c24      	lsrs	r4, r4, #16
 800237a:	4252      	negs	r2, r2
 800237c:	4249      	negs	r1, r1
 800237e:	430a      	orrs	r2, r1
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	1900      	adds	r0, r0, r4
 8002384:	1880      	adds	r0, r0, r2
 8002386:	18c7      	adds	r7, r0, r3
 8002388:	464b      	mov	r3, r9
 800238a:	0ddc      	lsrs	r4, r3, #23
 800238c:	9b04      	ldr	r3, [sp, #16]
 800238e:	0275      	lsls	r5, r6, #9
 8002390:	431d      	orrs	r5, r3
 8002392:	1e6a      	subs	r2, r5, #1
 8002394:	4195      	sbcs	r5, r2
 8002396:	464b      	mov	r3, r9
 8002398:	0df6      	lsrs	r6, r6, #23
 800239a:	027f      	lsls	r7, r7, #9
 800239c:	4335      	orrs	r5, r6
 800239e:	025a      	lsls	r2, r3, #9
 80023a0:	433c      	orrs	r4, r7
 80023a2:	4315      	orrs	r5, r2
 80023a4:	01fb      	lsls	r3, r7, #7
 80023a6:	d400      	bmi.n	80023aa <__aeabi_dmul+0x24a>
 80023a8:	e11c      	b.n	80025e4 <__aeabi_dmul+0x484>
 80023aa:	2101      	movs	r1, #1
 80023ac:	086a      	lsrs	r2, r5, #1
 80023ae:	400d      	ands	r5, r1
 80023b0:	4315      	orrs	r5, r2
 80023b2:	07e2      	lsls	r2, r4, #31
 80023b4:	4315      	orrs	r5, r2
 80023b6:	0864      	lsrs	r4, r4, #1
 80023b8:	494f      	ldr	r1, [pc, #316]	; (80024f8 <__aeabi_dmul+0x398>)
 80023ba:	4461      	add	r1, ip
 80023bc:	2900      	cmp	r1, #0
 80023be:	dc00      	bgt.n	80023c2 <__aeabi_dmul+0x262>
 80023c0:	e0b0      	b.n	8002524 <__aeabi_dmul+0x3c4>
 80023c2:	076b      	lsls	r3, r5, #29
 80023c4:	d009      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023c6:	220f      	movs	r2, #15
 80023c8:	402a      	ands	r2, r5
 80023ca:	2a04      	cmp	r2, #4
 80023cc:	d005      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023ce:	1d2a      	adds	r2, r5, #4
 80023d0:	42aa      	cmp	r2, r5
 80023d2:	41ad      	sbcs	r5, r5
 80023d4:	426d      	negs	r5, r5
 80023d6:	1964      	adds	r4, r4, r5
 80023d8:	0015      	movs	r5, r2
 80023da:	01e3      	lsls	r3, r4, #7
 80023dc:	d504      	bpl.n	80023e8 <__aeabi_dmul+0x288>
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	4a46      	ldr	r2, [pc, #280]	; (80024fc <__aeabi_dmul+0x39c>)
 80023e2:	00c9      	lsls	r1, r1, #3
 80023e4:	4014      	ands	r4, r2
 80023e6:	4461      	add	r1, ip
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <__aeabi_dmul+0x3a0>)
 80023ea:	4291      	cmp	r1, r2
 80023ec:	dd00      	ble.n	80023f0 <__aeabi_dmul+0x290>
 80023ee:	e726      	b.n	800223e <__aeabi_dmul+0xde>
 80023f0:	0762      	lsls	r2, r4, #29
 80023f2:	08ed      	lsrs	r5, r5, #3
 80023f4:	0264      	lsls	r4, r4, #9
 80023f6:	0549      	lsls	r1, r1, #21
 80023f8:	4315      	orrs	r5, r2
 80023fa:	0b24      	lsrs	r4, r4, #12
 80023fc:	0d4a      	lsrs	r2, r1, #21
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002400:	4652      	mov	r2, sl
 8002402:	4332      	orrs	r2, r6
 8002404:	d100      	bne.n	8002408 <__aeabi_dmul+0x2a8>
 8002406:	e07f      	b.n	8002508 <__aeabi_dmul+0x3a8>
 8002408:	2e00      	cmp	r6, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dmul+0x2ae>
 800240c:	e0dc      	b.n	80025c8 <__aeabi_dmul+0x468>
 800240e:	0030      	movs	r0, r6
 8002410:	f000 fe1e 	bl	8003050 <__clzsi2>
 8002414:	0002      	movs	r2, r0
 8002416:	3a0b      	subs	r2, #11
 8002418:	231d      	movs	r3, #29
 800241a:	0001      	movs	r1, r0
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	4652      	mov	r2, sl
 8002420:	3908      	subs	r1, #8
 8002422:	40da      	lsrs	r2, r3
 8002424:	408e      	lsls	r6, r1
 8002426:	4316      	orrs	r6, r2
 8002428:	4652      	mov	r2, sl
 800242a:	408a      	lsls	r2, r1
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	4935      	ldr	r1, [pc, #212]	; (8002504 <__aeabi_dmul+0x3a4>)
 8002430:	1a18      	subs	r0, r3, r0
 8002432:	0003      	movs	r3, r0
 8002434:	468c      	mov	ip, r1
 8002436:	4463      	add	r3, ip
 8002438:	2000      	movs	r0, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	e6d3      	b.n	80021e6 <__aeabi_dmul+0x86>
 800243e:	0025      	movs	r5, r4
 8002440:	4305      	orrs	r5, r0
 8002442:	d04a      	beq.n	80024da <__aeabi_dmul+0x37a>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d100      	bne.n	800244a <__aeabi_dmul+0x2ea>
 8002448:	e0b0      	b.n	80025ac <__aeabi_dmul+0x44c>
 800244a:	0020      	movs	r0, r4
 800244c:	f000 fe00 	bl	8003050 <__clzsi2>
 8002450:	0001      	movs	r1, r0
 8002452:	0002      	movs	r2, r0
 8002454:	390b      	subs	r1, #11
 8002456:	231d      	movs	r3, #29
 8002458:	0010      	movs	r0, r2
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	0031      	movs	r1, r6
 800245e:	0035      	movs	r5, r6
 8002460:	3808      	subs	r0, #8
 8002462:	4084      	lsls	r4, r0
 8002464:	40d9      	lsrs	r1, r3
 8002466:	4085      	lsls	r5, r0
 8002468:	430c      	orrs	r4, r1
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <__aeabi_dmul+0x3a4>)
 800246c:	1a83      	subs	r3, r0, r2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	4699      	mov	r9, r3
 8002474:	469b      	mov	fp, r3
 8002476:	e697      	b.n	80021a8 <__aeabi_dmul+0x48>
 8002478:	0005      	movs	r5, r0
 800247a:	4325      	orrs	r5, r4
 800247c:	d126      	bne.n	80024cc <__aeabi_dmul+0x36c>
 800247e:	2208      	movs	r2, #8
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	2400      	movs	r4, #0
 8002486:	4691      	mov	r9, r2
 8002488:	469b      	mov	fp, r3
 800248a:	e68d      	b.n	80021a8 <__aeabi_dmul+0x48>
 800248c:	4652      	mov	r2, sl
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	4332      	orrs	r2, r6
 8002492:	d110      	bne.n	80024b6 <__aeabi_dmul+0x356>
 8002494:	4915      	ldr	r1, [pc, #84]	; (80024ec <__aeabi_dmul+0x38c>)
 8002496:	2600      	movs	r6, #0
 8002498:	468c      	mov	ip, r1
 800249a:	4463      	add	r3, ip
 800249c:	4649      	mov	r1, r9
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2302      	movs	r3, #2
 80024a2:	4319      	orrs	r1, r3
 80024a4:	4689      	mov	r9, r1
 80024a6:	2002      	movs	r0, #2
 80024a8:	e69d      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024aa:	465b      	mov	r3, fp
 80024ac:	9701      	str	r7, [sp, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d000      	beq.n	80024b4 <__aeabi_dmul+0x354>
 80024b2:	e6ad      	b.n	8002210 <__aeabi_dmul+0xb0>
 80024b4:	e6c3      	b.n	800223e <__aeabi_dmul+0xde>
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <__aeabi_dmul+0x38c>)
 80024b8:	2003      	movs	r0, #3
 80024ba:	4694      	mov	ip, r2
 80024bc:	4463      	add	r3, ip
 80024be:	464a      	mov	r2, r9
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2303      	movs	r3, #3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	4652      	mov	r2, sl
 80024ca:	e68c      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024cc:	220c      	movs	r2, #12
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2303      	movs	r3, #3
 80024d2:	0005      	movs	r5, r0
 80024d4:	4691      	mov	r9, r2
 80024d6:	469b      	mov	fp, r3
 80024d8:	e666      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024da:	2304      	movs	r3, #4
 80024dc:	4699      	mov	r9, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	2400      	movs	r4, #0
 80024e6:	469b      	mov	fp, r3
 80024e8:	e65e      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000007ff 	.word	0x000007ff
 80024f0:	fffffc01 	.word	0xfffffc01
 80024f4:	0801872c 	.word	0x0801872c
 80024f8:	000003ff 	.word	0x000003ff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	000007fe 	.word	0x000007fe
 8002504:	fffffc0d 	.word	0xfffffc0d
 8002508:	4649      	mov	r1, r9
 800250a:	2301      	movs	r3, #1
 800250c:	4319      	orrs	r1, r3
 800250e:	4689      	mov	r9, r1
 8002510:	2600      	movs	r6, #0
 8002512:	2001      	movs	r0, #1
 8002514:	e667      	b.n	80021e6 <__aeabi_dmul+0x86>
 8002516:	2300      	movs	r3, #0
 8002518:	2480      	movs	r4, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <__aeabi_dmul+0x4cc>)
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	0324      	lsls	r4, r4, #12
 8002522:	e67e      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002524:	2001      	movs	r0, #1
 8002526:	1a40      	subs	r0, r0, r1
 8002528:	2838      	cmp	r0, #56	; 0x38
 800252a:	dd00      	ble.n	800252e <__aeabi_dmul+0x3ce>
 800252c:	e676      	b.n	800221c <__aeabi_dmul+0xbc>
 800252e:	281f      	cmp	r0, #31
 8002530:	dd5b      	ble.n	80025ea <__aeabi_dmul+0x48a>
 8002532:	221f      	movs	r2, #31
 8002534:	0023      	movs	r3, r4
 8002536:	4252      	negs	r2, r2
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	0019      	movs	r1, r3
 800253e:	2820      	cmp	r0, #32
 8002540:	d003      	beq.n	800254a <__aeabi_dmul+0x3ea>
 8002542:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <__aeabi_dmul+0x4d0>)
 8002544:	4462      	add	r2, ip
 8002546:	4094      	lsls	r4, r2
 8002548:	4325      	orrs	r5, r4
 800254a:	1e6a      	subs	r2, r5, #1
 800254c:	4195      	sbcs	r5, r2
 800254e:	002a      	movs	r2, r5
 8002550:	430a      	orrs	r2, r1
 8002552:	2107      	movs	r1, #7
 8002554:	000d      	movs	r5, r1
 8002556:	2400      	movs	r4, #0
 8002558:	4015      	ands	r5, r2
 800255a:	4211      	tst	r1, r2
 800255c:	d05b      	beq.n	8002616 <__aeabi_dmul+0x4b6>
 800255e:	210f      	movs	r1, #15
 8002560:	2400      	movs	r4, #0
 8002562:	4011      	ands	r1, r2
 8002564:	2904      	cmp	r1, #4
 8002566:	d053      	beq.n	8002610 <__aeabi_dmul+0x4b0>
 8002568:	1d11      	adds	r1, r2, #4
 800256a:	4291      	cmp	r1, r2
 800256c:	4192      	sbcs	r2, r2
 800256e:	4252      	negs	r2, r2
 8002570:	18a4      	adds	r4, r4, r2
 8002572:	000a      	movs	r2, r1
 8002574:	0223      	lsls	r3, r4, #8
 8002576:	d54b      	bpl.n	8002610 <__aeabi_dmul+0x4b0>
 8002578:	2201      	movs	r2, #1
 800257a:	2400      	movs	r4, #0
 800257c:	2500      	movs	r5, #0
 800257e:	e650      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	031b      	lsls	r3, r3, #12
 8002584:	421c      	tst	r4, r3
 8002586:	d009      	beq.n	800259c <__aeabi_dmul+0x43c>
 8002588:	421e      	tst	r6, r3
 800258a:	d107      	bne.n	800259c <__aeabi_dmul+0x43c>
 800258c:	4333      	orrs	r3, r6
 800258e:	031c      	lsls	r4, r3, #12
 8002590:	4643      	mov	r3, r8
 8002592:	0015      	movs	r5, r2
 8002594:	0b24      	lsrs	r4, r4, #12
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <__aeabi_dmul+0x4cc>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	e642      	b.n	8002222 <__aeabi_dmul+0xc2>
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0312      	lsls	r2, r2, #12
 80025a0:	4314      	orrs	r4, r2
 80025a2:	0324      	lsls	r4, r4, #12
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <__aeabi_dmul+0x4cc>)
 80025a6:	0b24      	lsrs	r4, r4, #12
 80025a8:	9701      	str	r7, [sp, #4]
 80025aa:	e63a      	b.n	8002222 <__aeabi_dmul+0xc2>
 80025ac:	f000 fd50 	bl	8003050 <__clzsi2>
 80025b0:	0001      	movs	r1, r0
 80025b2:	0002      	movs	r2, r0
 80025b4:	3115      	adds	r1, #21
 80025b6:	3220      	adds	r2, #32
 80025b8:	291c      	cmp	r1, #28
 80025ba:	dc00      	bgt.n	80025be <__aeabi_dmul+0x45e>
 80025bc:	e74b      	b.n	8002456 <__aeabi_dmul+0x2f6>
 80025be:	0034      	movs	r4, r6
 80025c0:	3808      	subs	r0, #8
 80025c2:	2500      	movs	r5, #0
 80025c4:	4084      	lsls	r4, r0
 80025c6:	e750      	b.n	800246a <__aeabi_dmul+0x30a>
 80025c8:	f000 fd42 	bl	8003050 <__clzsi2>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	3215      	adds	r2, #21
 80025d2:	3020      	adds	r0, #32
 80025d4:	2a1c      	cmp	r2, #28
 80025d6:	dc00      	bgt.n	80025da <__aeabi_dmul+0x47a>
 80025d8:	e71e      	b.n	8002418 <__aeabi_dmul+0x2b8>
 80025da:	4656      	mov	r6, sl
 80025dc:	3b08      	subs	r3, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	409e      	lsls	r6, r3
 80025e2:	e723      	b.n	800242c <__aeabi_dmul+0x2cc>
 80025e4:	9b00      	ldr	r3, [sp, #0]
 80025e6:	469c      	mov	ip, r3
 80025e8:	e6e6      	b.n	80023b8 <__aeabi_dmul+0x258>
 80025ea:	4912      	ldr	r1, [pc, #72]	; (8002634 <__aeabi_dmul+0x4d4>)
 80025ec:	0022      	movs	r2, r4
 80025ee:	4461      	add	r1, ip
 80025f0:	002e      	movs	r6, r5
 80025f2:	408d      	lsls	r5, r1
 80025f4:	408a      	lsls	r2, r1
 80025f6:	40c6      	lsrs	r6, r0
 80025f8:	1e69      	subs	r1, r5, #1
 80025fa:	418d      	sbcs	r5, r1
 80025fc:	4332      	orrs	r2, r6
 80025fe:	432a      	orrs	r2, r5
 8002600:	40c4      	lsrs	r4, r0
 8002602:	0753      	lsls	r3, r2, #29
 8002604:	d0b6      	beq.n	8002574 <__aeabi_dmul+0x414>
 8002606:	210f      	movs	r1, #15
 8002608:	4011      	ands	r1, r2
 800260a:	2904      	cmp	r1, #4
 800260c:	d1ac      	bne.n	8002568 <__aeabi_dmul+0x408>
 800260e:	e7b1      	b.n	8002574 <__aeabi_dmul+0x414>
 8002610:	0765      	lsls	r5, r4, #29
 8002612:	0264      	lsls	r4, r4, #9
 8002614:	0b24      	lsrs	r4, r4, #12
 8002616:	08d2      	lsrs	r2, r2, #3
 8002618:	4315      	orrs	r5, r2
 800261a:	2200      	movs	r2, #0
 800261c:	e601      	b.n	8002222 <__aeabi_dmul+0xc2>
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0312      	lsls	r2, r2, #12
 8002622:	4314      	orrs	r4, r2
 8002624:	0324      	lsls	r4, r4, #12
 8002626:	4a01      	ldr	r2, [pc, #4]	; (800262c <__aeabi_dmul+0x4cc>)
 8002628:	0b24      	lsrs	r4, r4, #12
 800262a:	e5fa      	b.n	8002222 <__aeabi_dmul+0xc2>
 800262c:	000007ff 	.word	0x000007ff
 8002630:	0000043e 	.word	0x0000043e
 8002634:	0000041e 	.word	0x0000041e

08002638 <__aeabi_dsub>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	4657      	mov	r7, sl
 800263c:	464e      	mov	r6, r9
 800263e:	4645      	mov	r5, r8
 8002640:	46de      	mov	lr, fp
 8002642:	b5e0      	push	{r5, r6, r7, lr}
 8002644:	001e      	movs	r6, r3
 8002646:	0017      	movs	r7, r2
 8002648:	004a      	lsls	r2, r1, #1
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0d52      	lsrs	r2, r2, #21
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	4690      	mov	r8, r2
 8002652:	0f42      	lsrs	r2, r0, #29
 8002654:	431a      	orrs	r2, r3
 8002656:	0fcd      	lsrs	r5, r1, #31
 8002658:	4ccd      	ldr	r4, [pc, #820]	; (8002990 <__aeabi_dsub+0x358>)
 800265a:	0331      	lsls	r1, r6, #12
 800265c:	00c3      	lsls	r3, r0, #3
 800265e:	4694      	mov	ip, r2
 8002660:	0070      	lsls	r0, r6, #1
 8002662:	0f7a      	lsrs	r2, r7, #29
 8002664:	0a49      	lsrs	r1, r1, #9
 8002666:	00ff      	lsls	r7, r7, #3
 8002668:	469a      	mov	sl, r3
 800266a:	46b9      	mov	r9, r7
 800266c:	0d40      	lsrs	r0, r0, #21
 800266e:	0ff6      	lsrs	r6, r6, #31
 8002670:	4311      	orrs	r1, r2
 8002672:	42a0      	cmp	r0, r4
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x40>
 8002676:	e0b1      	b.n	80027dc <__aeabi_dsub+0x1a4>
 8002678:	2201      	movs	r2, #1
 800267a:	4056      	eors	r6, r2
 800267c:	46b3      	mov	fp, r6
 800267e:	42b5      	cmp	r5, r6
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x4c>
 8002682:	e088      	b.n	8002796 <__aeabi_dsub+0x15e>
 8002684:	4642      	mov	r2, r8
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	2a00      	cmp	r2, #0
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x56>
 800268c:	e0ae      	b.n	80027ec <__aeabi_dsub+0x1b4>
 800268e:	2800      	cmp	r0, #0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x5c>
 8002692:	e0c1      	b.n	8002818 <__aeabi_dsub+0x1e0>
 8002694:	48be      	ldr	r0, [pc, #760]	; (8002990 <__aeabi_dsub+0x358>)
 8002696:	4580      	cmp	r8, r0
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x64>
 800269a:	e151      	b.n	8002940 <__aeabi_dsub+0x308>
 800269c:	2080      	movs	r0, #128	; 0x80
 800269e:	0400      	lsls	r0, r0, #16
 80026a0:	4301      	orrs	r1, r0
 80026a2:	2a38      	cmp	r2, #56	; 0x38
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dsub+0x70>
 80026a6:	e17b      	b.n	80029a0 <__aeabi_dsub+0x368>
 80026a8:	2a1f      	cmp	r2, #31
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dsub+0x76>
 80026ac:	e1ee      	b.n	8002a8c <__aeabi_dsub+0x454>
 80026ae:	2020      	movs	r0, #32
 80026b0:	003e      	movs	r6, r7
 80026b2:	1a80      	subs	r0, r0, r2
 80026b4:	000c      	movs	r4, r1
 80026b6:	40d6      	lsrs	r6, r2
 80026b8:	40d1      	lsrs	r1, r2
 80026ba:	4087      	lsls	r7, r0
 80026bc:	4662      	mov	r2, ip
 80026be:	4084      	lsls	r4, r0
 80026c0:	1a52      	subs	r2, r2, r1
 80026c2:	1e78      	subs	r0, r7, #1
 80026c4:	4187      	sbcs	r7, r0
 80026c6:	4694      	mov	ip, r2
 80026c8:	4334      	orrs	r4, r6
 80026ca:	4327      	orrs	r7, r4
 80026cc:	1bdc      	subs	r4, r3, r7
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	419b      	sbcs	r3, r3
 80026d2:	4662      	mov	r2, ip
 80026d4:	425b      	negs	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4699      	mov	r9, r3
 80026da:	464b      	mov	r3, r9
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0xaa>
 80026e0:	e118      	b.n	8002914 <__aeabi_dsub+0x2dc>
 80026e2:	464b      	mov	r3, r9
 80026e4:	0258      	lsls	r0, r3, #9
 80026e6:	0a43      	lsrs	r3, r0, #9
 80026e8:	4699      	mov	r9, r3
 80026ea:	464b      	mov	r3, r9
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0xba>
 80026f0:	e137      	b.n	8002962 <__aeabi_dsub+0x32a>
 80026f2:	4648      	mov	r0, r9
 80026f4:	f000 fcac 	bl	8003050 <__clzsi2>
 80026f8:	0001      	movs	r1, r0
 80026fa:	3908      	subs	r1, #8
 80026fc:	2320      	movs	r3, #32
 80026fe:	0022      	movs	r2, r4
 8002700:	4648      	mov	r0, r9
 8002702:	1a5b      	subs	r3, r3, r1
 8002704:	40da      	lsrs	r2, r3
 8002706:	4088      	lsls	r0, r1
 8002708:	408c      	lsls	r4, r1
 800270a:	4643      	mov	r3, r8
 800270c:	4310      	orrs	r0, r2
 800270e:	4588      	cmp	r8, r1
 8002710:	dd00      	ble.n	8002714 <__aeabi_dsub+0xdc>
 8002712:	e136      	b.n	8002982 <__aeabi_dsub+0x34a>
 8002714:	1ac9      	subs	r1, r1, r3
 8002716:	1c4b      	adds	r3, r1, #1
 8002718:	2b1f      	cmp	r3, #31
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0xe6>
 800271c:	e0ea      	b.n	80028f4 <__aeabi_dsub+0x2bc>
 800271e:	2220      	movs	r2, #32
 8002720:	0026      	movs	r6, r4
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	0001      	movs	r1, r0
 8002726:	4094      	lsls	r4, r2
 8002728:	40de      	lsrs	r6, r3
 800272a:	40d8      	lsrs	r0, r3
 800272c:	2300      	movs	r3, #0
 800272e:	4091      	lsls	r1, r2
 8002730:	1e62      	subs	r2, r4, #1
 8002732:	4194      	sbcs	r4, r2
 8002734:	4681      	mov	r9, r0
 8002736:	4698      	mov	r8, r3
 8002738:	4331      	orrs	r1, r6
 800273a:	430c      	orrs	r4, r1
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	d009      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002740:	230f      	movs	r3, #15
 8002742:	4023      	ands	r3, r4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	42a3      	cmp	r3, r4
 800274c:	41a4      	sbcs	r4, r4
 800274e:	4264      	negs	r4, r4
 8002750:	44a1      	add	r9, r4
 8002752:	001c      	movs	r4, r3
 8002754:	464b      	mov	r3, r9
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	d400      	bmi.n	800275c <__aeabi_dsub+0x124>
 800275a:	e0de      	b.n	800291a <__aeabi_dsub+0x2e2>
 800275c:	4641      	mov	r1, r8
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <__aeabi_dsub+0x358>)
 8002760:	3101      	adds	r1, #1
 8002762:	4299      	cmp	r1, r3
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x130>
 8002766:	e0e7      	b.n	8002938 <__aeabi_dsub+0x300>
 8002768:	464b      	mov	r3, r9
 800276a:	488a      	ldr	r0, [pc, #552]	; (8002994 <__aeabi_dsub+0x35c>)
 800276c:	08e4      	lsrs	r4, r4, #3
 800276e:	4003      	ands	r3, r0
 8002770:	0018      	movs	r0, r3
 8002772:	0549      	lsls	r1, r1, #21
 8002774:	075b      	lsls	r3, r3, #29
 8002776:	0240      	lsls	r0, r0, #9
 8002778:	4323      	orrs	r3, r4
 800277a:	0d4a      	lsrs	r2, r1, #21
 800277c:	0b04      	lsrs	r4, r0, #12
 800277e:	0512      	lsls	r2, r2, #20
 8002780:	07ed      	lsls	r5, r5, #31
 8002782:	4322      	orrs	r2, r4
 8002784:	432a      	orrs	r2, r5
 8002786:	0018      	movs	r0, r3
 8002788:	0011      	movs	r1, r2
 800278a:	bcf0      	pop	{r4, r5, r6, r7}
 800278c:	46bb      	mov	fp, r7
 800278e:	46b2      	mov	sl, r6
 8002790:	46a9      	mov	r9, r5
 8002792:	46a0      	mov	r8, r4
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002796:	4642      	mov	r2, r8
 8002798:	1a12      	subs	r2, r2, r0
 800279a:	2a00      	cmp	r2, #0
 800279c:	dd52      	ble.n	8002844 <__aeabi_dsub+0x20c>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x16c>
 80027a2:	e09c      	b.n	80028de <__aeabi_dsub+0x2a6>
 80027a4:	45a0      	cmp	r8, r4
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x172>
 80027a8:	e0ca      	b.n	8002940 <__aeabi_dsub+0x308>
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	0400      	lsls	r0, r0, #16
 80027ae:	4301      	orrs	r1, r0
 80027b0:	2a38      	cmp	r2, #56	; 0x38
 80027b2:	dd00      	ble.n	80027b6 <__aeabi_dsub+0x17e>
 80027b4:	e149      	b.n	8002a4a <__aeabi_dsub+0x412>
 80027b6:	2a1f      	cmp	r2, #31
 80027b8:	dc00      	bgt.n	80027bc <__aeabi_dsub+0x184>
 80027ba:	e197      	b.n	8002aec <__aeabi_dsub+0x4b4>
 80027bc:	0010      	movs	r0, r2
 80027be:	000e      	movs	r6, r1
 80027c0:	3820      	subs	r0, #32
 80027c2:	40c6      	lsrs	r6, r0
 80027c4:	2a20      	cmp	r2, #32
 80027c6:	d004      	beq.n	80027d2 <__aeabi_dsub+0x19a>
 80027c8:	2040      	movs	r0, #64	; 0x40
 80027ca:	1a82      	subs	r2, r0, r2
 80027cc:	4091      	lsls	r1, r2
 80027ce:	430f      	orrs	r7, r1
 80027d0:	46b9      	mov	r9, r7
 80027d2:	464c      	mov	r4, r9
 80027d4:	1e62      	subs	r2, r4, #1
 80027d6:	4194      	sbcs	r4, r2
 80027d8:	4334      	orrs	r4, r6
 80027da:	e13a      	b.n	8002a52 <__aeabi_dsub+0x41a>
 80027dc:	000a      	movs	r2, r1
 80027de:	433a      	orrs	r2, r7
 80027e0:	d028      	beq.n	8002834 <__aeabi_dsub+0x1fc>
 80027e2:	46b3      	mov	fp, r6
 80027e4:	42b5      	cmp	r5, r6
 80027e6:	d02b      	beq.n	8002840 <__aeabi_dsub+0x208>
 80027e8:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <__aeabi_dsub+0x360>)
 80027ea:	4442      	add	r2, r8
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d05d      	beq.n	80028ac <__aeabi_dsub+0x274>
 80027f0:	4642      	mov	r2, r8
 80027f2:	4644      	mov	r4, r8
 80027f4:	1a82      	subs	r2, r0, r2
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	d000      	beq.n	80027fc <__aeabi_dsub+0x1c4>
 80027fa:	e0f5      	b.n	80029e8 <__aeabi_dsub+0x3b0>
 80027fc:	4665      	mov	r5, ip
 80027fe:	431d      	orrs	r5, r3
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x1cc>
 8002802:	e19c      	b.n	8002b3e <__aeabi_dsub+0x506>
 8002804:	1e55      	subs	r5, r2, #1
 8002806:	2a01      	cmp	r2, #1
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x1d4>
 800280a:	e1fb      	b.n	8002c04 <__aeabi_dsub+0x5cc>
 800280c:	4c60      	ldr	r4, [pc, #384]	; (8002990 <__aeabi_dsub+0x358>)
 800280e:	42a2      	cmp	r2, r4
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x1dc>
 8002812:	e1bd      	b.n	8002b90 <__aeabi_dsub+0x558>
 8002814:	002a      	movs	r2, r5
 8002816:	e0f0      	b.n	80029fa <__aeabi_dsub+0x3c2>
 8002818:	0008      	movs	r0, r1
 800281a:	4338      	orrs	r0, r7
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x1e8>
 800281e:	e0c3      	b.n	80029a8 <__aeabi_dsub+0x370>
 8002820:	1e50      	subs	r0, r2, #1
 8002822:	2a01      	cmp	r2, #1
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x1f0>
 8002826:	e1a8      	b.n	8002b7a <__aeabi_dsub+0x542>
 8002828:	4c59      	ldr	r4, [pc, #356]	; (8002990 <__aeabi_dsub+0x358>)
 800282a:	42a2      	cmp	r2, r4
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x1f8>
 800282e:	e087      	b.n	8002940 <__aeabi_dsub+0x308>
 8002830:	0002      	movs	r2, r0
 8002832:	e736      	b.n	80026a2 <__aeabi_dsub+0x6a>
 8002834:	2201      	movs	r2, #1
 8002836:	4056      	eors	r6, r2
 8002838:	46b3      	mov	fp, r6
 800283a:	42b5      	cmp	r5, r6
 800283c:	d000      	beq.n	8002840 <__aeabi_dsub+0x208>
 800283e:	e721      	b.n	8002684 <__aeabi_dsub+0x4c>
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <__aeabi_dsub+0x360>)
 8002842:	4442      	add	r2, r8
 8002844:	2a00      	cmp	r2, #0
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x212>
 8002848:	e0b5      	b.n	80029b6 <__aeabi_dsub+0x37e>
 800284a:	4642      	mov	r2, r8
 800284c:	4644      	mov	r4, r8
 800284e:	1a82      	subs	r2, r0, r2
 8002850:	2c00      	cmp	r4, #0
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x21e>
 8002854:	e138      	b.n	8002ac8 <__aeabi_dsub+0x490>
 8002856:	4e4e      	ldr	r6, [pc, #312]	; (8002990 <__aeabi_dsub+0x358>)
 8002858:	42b0      	cmp	r0, r6
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x226>
 800285c:	e1de      	b.n	8002c1c <__aeabi_dsub+0x5e4>
 800285e:	2680      	movs	r6, #128	; 0x80
 8002860:	4664      	mov	r4, ip
 8002862:	0436      	lsls	r6, r6, #16
 8002864:	4334      	orrs	r4, r6
 8002866:	46a4      	mov	ip, r4
 8002868:	2a38      	cmp	r2, #56	; 0x38
 800286a:	dd00      	ble.n	800286e <__aeabi_dsub+0x236>
 800286c:	e196      	b.n	8002b9c <__aeabi_dsub+0x564>
 800286e:	2a1f      	cmp	r2, #31
 8002870:	dd00      	ble.n	8002874 <__aeabi_dsub+0x23c>
 8002872:	e224      	b.n	8002cbe <__aeabi_dsub+0x686>
 8002874:	2620      	movs	r6, #32
 8002876:	1ab4      	subs	r4, r6, r2
 8002878:	46a2      	mov	sl, r4
 800287a:	4664      	mov	r4, ip
 800287c:	4656      	mov	r6, sl
 800287e:	40b4      	lsls	r4, r6
 8002880:	46a1      	mov	r9, r4
 8002882:	001c      	movs	r4, r3
 8002884:	464e      	mov	r6, r9
 8002886:	40d4      	lsrs	r4, r2
 8002888:	4326      	orrs	r6, r4
 800288a:	0034      	movs	r4, r6
 800288c:	4656      	mov	r6, sl
 800288e:	40b3      	lsls	r3, r6
 8002890:	1e5e      	subs	r6, r3, #1
 8002892:	41b3      	sbcs	r3, r6
 8002894:	431c      	orrs	r4, r3
 8002896:	4663      	mov	r3, ip
 8002898:	40d3      	lsrs	r3, r2
 800289a:	18c9      	adds	r1, r1, r3
 800289c:	19e4      	adds	r4, r4, r7
 800289e:	42bc      	cmp	r4, r7
 80028a0:	41bf      	sbcs	r7, r7
 80028a2:	427f      	negs	r7, r7
 80028a4:	46b9      	mov	r9, r7
 80028a6:	4680      	mov	r8, r0
 80028a8:	4489      	add	r9, r1
 80028aa:	e0d8      	b.n	8002a5e <__aeabi_dsub+0x426>
 80028ac:	4640      	mov	r0, r8
 80028ae:	4c3b      	ldr	r4, [pc, #236]	; (800299c <__aeabi_dsub+0x364>)
 80028b0:	3001      	adds	r0, #1
 80028b2:	4220      	tst	r0, r4
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x280>
 80028b6:	e0b4      	b.n	8002a22 <__aeabi_dsub+0x3ea>
 80028b8:	4640      	mov	r0, r8
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d000      	beq.n	80028c0 <__aeabi_dsub+0x288>
 80028be:	e144      	b.n	8002b4a <__aeabi_dsub+0x512>
 80028c0:	4660      	mov	r0, ip
 80028c2:	4318      	orrs	r0, r3
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x290>
 80028c6:	e190      	b.n	8002bea <__aeabi_dsub+0x5b2>
 80028c8:	0008      	movs	r0, r1
 80028ca:	4338      	orrs	r0, r7
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x298>
 80028ce:	e1aa      	b.n	8002c26 <__aeabi_dsub+0x5ee>
 80028d0:	4661      	mov	r1, ip
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	0749      	lsls	r1, r1, #29
 80028d6:	430b      	orrs	r3, r1
 80028d8:	4661      	mov	r1, ip
 80028da:	08cc      	lsrs	r4, r1, #3
 80028dc:	e027      	b.n	800292e <__aeabi_dsub+0x2f6>
 80028de:	0008      	movs	r0, r1
 80028e0:	4338      	orrs	r0, r7
 80028e2:	d061      	beq.n	80029a8 <__aeabi_dsub+0x370>
 80028e4:	1e50      	subs	r0, r2, #1
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x2b4>
 80028ea:	e139      	b.n	8002b60 <__aeabi_dsub+0x528>
 80028ec:	42a2      	cmp	r2, r4
 80028ee:	d027      	beq.n	8002940 <__aeabi_dsub+0x308>
 80028f0:	0002      	movs	r2, r0
 80028f2:	e75d      	b.n	80027b0 <__aeabi_dsub+0x178>
 80028f4:	0002      	movs	r2, r0
 80028f6:	391f      	subs	r1, #31
 80028f8:	40ca      	lsrs	r2, r1
 80028fa:	0011      	movs	r1, r2
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d003      	beq.n	8002908 <__aeabi_dsub+0x2d0>
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4098      	lsls	r0, r3
 8002906:	4304      	orrs	r4, r0
 8002908:	1e63      	subs	r3, r4, #1
 800290a:	419c      	sbcs	r4, r3
 800290c:	2300      	movs	r3, #0
 800290e:	4699      	mov	r9, r3
 8002910:	4698      	mov	r8, r3
 8002912:	430c      	orrs	r4, r1
 8002914:	0763      	lsls	r3, r4, #29
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x2e2>
 8002918:	e712      	b.n	8002740 <__aeabi_dsub+0x108>
 800291a:	464b      	mov	r3, r9
 800291c:	464a      	mov	r2, r9
 800291e:	08e4      	lsrs	r4, r4, #3
 8002920:	075b      	lsls	r3, r3, #29
 8002922:	4323      	orrs	r3, r4
 8002924:	08d4      	lsrs	r4, r2, #3
 8002926:	4642      	mov	r2, r8
 8002928:	4919      	ldr	r1, [pc, #100]	; (8002990 <__aeabi_dsub+0x358>)
 800292a:	428a      	cmp	r2, r1
 800292c:	d00e      	beq.n	800294c <__aeabi_dsub+0x314>
 800292e:	0324      	lsls	r4, r4, #12
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	0b24      	lsrs	r4, r4, #12
 8002934:	0d52      	lsrs	r2, r2, #21
 8002936:	e722      	b.n	800277e <__aeabi_dsub+0x146>
 8002938:	000a      	movs	r2, r1
 800293a:	2400      	movs	r4, #0
 800293c:	2300      	movs	r3, #0
 800293e:	e71e      	b.n	800277e <__aeabi_dsub+0x146>
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	4662      	mov	r2, ip
 8002944:	0752      	lsls	r2, r2, #29
 8002946:	4313      	orrs	r3, r2
 8002948:	4662      	mov	r2, ip
 800294a:	08d4      	lsrs	r4, r2, #3
 800294c:	001a      	movs	r2, r3
 800294e:	4322      	orrs	r2, r4
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x31c>
 8002952:	e1fc      	b.n	8002d4e <__aeabi_dsub+0x716>
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0312      	lsls	r2, r2, #12
 8002958:	4314      	orrs	r4, r2
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <__aeabi_dsub+0x358>)
 800295e:	0b24      	lsrs	r4, r4, #12
 8002960:	e70d      	b.n	800277e <__aeabi_dsub+0x146>
 8002962:	0020      	movs	r0, r4
 8002964:	f000 fb74 	bl	8003050 <__clzsi2>
 8002968:	0001      	movs	r1, r0
 800296a:	3118      	adds	r1, #24
 800296c:	291f      	cmp	r1, #31
 800296e:	dc00      	bgt.n	8002972 <__aeabi_dsub+0x33a>
 8002970:	e6c4      	b.n	80026fc <__aeabi_dsub+0xc4>
 8002972:	3808      	subs	r0, #8
 8002974:	4084      	lsls	r4, r0
 8002976:	4643      	mov	r3, r8
 8002978:	0020      	movs	r0, r4
 800297a:	2400      	movs	r4, #0
 800297c:	4588      	cmp	r8, r1
 800297e:	dc00      	bgt.n	8002982 <__aeabi_dsub+0x34a>
 8002980:	e6c8      	b.n	8002714 <__aeabi_dsub+0xdc>
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__aeabi_dsub+0x35c>)
 8002984:	1a5b      	subs	r3, r3, r1
 8002986:	4010      	ands	r0, r2
 8002988:	4698      	mov	r8, r3
 800298a:	4681      	mov	r9, r0
 800298c:	e6d6      	b.n	800273c <__aeabi_dsub+0x104>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	000007ff 	.word	0x000007ff
 8002994:	ff7fffff 	.word	0xff7fffff
 8002998:	fffff801 	.word	0xfffff801
 800299c:	000007fe 	.word	0x000007fe
 80029a0:	430f      	orrs	r7, r1
 80029a2:	1e7a      	subs	r2, r7, #1
 80029a4:	4197      	sbcs	r7, r2
 80029a6:	e691      	b.n	80026cc <__aeabi_dsub+0x94>
 80029a8:	4661      	mov	r1, ip
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	0749      	lsls	r1, r1, #29
 80029ae:	430b      	orrs	r3, r1
 80029b0:	4661      	mov	r1, ip
 80029b2:	08cc      	lsrs	r4, r1, #3
 80029b4:	e7b8      	b.n	8002928 <__aeabi_dsub+0x2f0>
 80029b6:	4640      	mov	r0, r8
 80029b8:	4cd3      	ldr	r4, [pc, #844]	; (8002d08 <__aeabi_dsub+0x6d0>)
 80029ba:	3001      	adds	r0, #1
 80029bc:	4220      	tst	r0, r4
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x38a>
 80029c0:	e0a2      	b.n	8002b08 <__aeabi_dsub+0x4d0>
 80029c2:	4640      	mov	r0, r8
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d000      	beq.n	80029ca <__aeabi_dsub+0x392>
 80029c8:	e101      	b.n	8002bce <__aeabi_dsub+0x596>
 80029ca:	4660      	mov	r0, ip
 80029cc:	4318      	orrs	r0, r3
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x39a>
 80029d0:	e15e      	b.n	8002c90 <__aeabi_dsub+0x658>
 80029d2:	0008      	movs	r0, r1
 80029d4:	4338      	orrs	r0, r7
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3a2>
 80029d8:	e15f      	b.n	8002c9a <__aeabi_dsub+0x662>
 80029da:	4661      	mov	r1, ip
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	0749      	lsls	r1, r1, #29
 80029e0:	430b      	orrs	r3, r1
 80029e2:	4661      	mov	r1, ip
 80029e4:	08cc      	lsrs	r4, r1, #3
 80029e6:	e7a2      	b.n	800292e <__aeabi_dsub+0x2f6>
 80029e8:	4dc8      	ldr	r5, [pc, #800]	; (8002d0c <__aeabi_dsub+0x6d4>)
 80029ea:	42a8      	cmp	r0, r5
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x3b8>
 80029ee:	e0cf      	b.n	8002b90 <__aeabi_dsub+0x558>
 80029f0:	2580      	movs	r5, #128	; 0x80
 80029f2:	4664      	mov	r4, ip
 80029f4:	042d      	lsls	r5, r5, #16
 80029f6:	432c      	orrs	r4, r5
 80029f8:	46a4      	mov	ip, r4
 80029fa:	2a38      	cmp	r2, #56	; 0x38
 80029fc:	dc56      	bgt.n	8002aac <__aeabi_dsub+0x474>
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x3cc>
 8002a02:	e0d1      	b.n	8002ba8 <__aeabi_dsub+0x570>
 8002a04:	2520      	movs	r5, #32
 8002a06:	001e      	movs	r6, r3
 8002a08:	1aad      	subs	r5, r5, r2
 8002a0a:	4664      	mov	r4, ip
 8002a0c:	40ab      	lsls	r3, r5
 8002a0e:	40ac      	lsls	r4, r5
 8002a10:	40d6      	lsrs	r6, r2
 8002a12:	1e5d      	subs	r5, r3, #1
 8002a14:	41ab      	sbcs	r3, r5
 8002a16:	4334      	orrs	r4, r6
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	4664      	mov	r4, ip
 8002a1c:	40d4      	lsrs	r4, r2
 8002a1e:	1b09      	subs	r1, r1, r4
 8002a20:	e049      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002a22:	4660      	mov	r0, ip
 8002a24:	1bdc      	subs	r4, r3, r7
 8002a26:	1a46      	subs	r6, r0, r1
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	4180      	sbcs	r0, r0
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	4681      	mov	r9, r0
 8002a30:	0030      	movs	r0, r6
 8002a32:	464e      	mov	r6, r9
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	4681      	mov	r9, r0
 8002a38:	0200      	lsls	r0, r0, #8
 8002a3a:	d476      	bmi.n	8002b2a <__aeabi_dsub+0x4f2>
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	d000      	beq.n	8002a44 <__aeabi_dsub+0x40c>
 8002a42:	e652      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002a44:	2400      	movs	r4, #0
 8002a46:	2500      	movs	r5, #0
 8002a48:	e771      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002a4a:	4339      	orrs	r1, r7
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	1e62      	subs	r2, r4, #1
 8002a50:	4194      	sbcs	r4, r2
 8002a52:	18e4      	adds	r4, r4, r3
 8002a54:	429c      	cmp	r4, r3
 8002a56:	419b      	sbcs	r3, r3
 8002a58:	425b      	negs	r3, r3
 8002a5a:	4463      	add	r3, ip
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	464b      	mov	r3, r9
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	d400      	bmi.n	8002a66 <__aeabi_dsub+0x42e>
 8002a64:	e756      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002a66:	2301      	movs	r3, #1
 8002a68:	469c      	mov	ip, r3
 8002a6a:	4ba8      	ldr	r3, [pc, #672]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002a6c:	44e0      	add	r8, ip
 8002a6e:	4598      	cmp	r8, r3
 8002a70:	d038      	beq.n	8002ae4 <__aeabi_dsub+0x4ac>
 8002a72:	464b      	mov	r3, r9
 8002a74:	48a6      	ldr	r0, [pc, #664]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	4003      	ands	r3, r0
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	0863      	lsrs	r3, r4, #1
 8002a7e:	4014      	ands	r4, r2
 8002a80:	431c      	orrs	r4, r3
 8002a82:	07c3      	lsls	r3, r0, #31
 8002a84:	431c      	orrs	r4, r3
 8002a86:	0843      	lsrs	r3, r0, #1
 8002a88:	4699      	mov	r9, r3
 8002a8a:	e657      	b.n	800273c <__aeabi_dsub+0x104>
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	000e      	movs	r6, r1
 8002a90:	3820      	subs	r0, #32
 8002a92:	40c6      	lsrs	r6, r0
 8002a94:	2a20      	cmp	r2, #32
 8002a96:	d004      	beq.n	8002aa2 <__aeabi_dsub+0x46a>
 8002a98:	2040      	movs	r0, #64	; 0x40
 8002a9a:	1a82      	subs	r2, r0, r2
 8002a9c:	4091      	lsls	r1, r2
 8002a9e:	430f      	orrs	r7, r1
 8002aa0:	46b9      	mov	r9, r7
 8002aa2:	464f      	mov	r7, r9
 8002aa4:	1e7a      	subs	r2, r7, #1
 8002aa6:	4197      	sbcs	r7, r2
 8002aa8:	4337      	orrs	r7, r6
 8002aaa:	e60f      	b.n	80026cc <__aeabi_dsub+0x94>
 8002aac:	4662      	mov	r2, ip
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	1afc      	subs	r4, r7, r3
 8002ab8:	42a7      	cmp	r7, r4
 8002aba:	41bf      	sbcs	r7, r7
 8002abc:	427f      	negs	r7, r7
 8002abe:	1bcb      	subs	r3, r1, r7
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	465d      	mov	r5, fp
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	e608      	b.n	80026da <__aeabi_dsub+0xa2>
 8002ac8:	4666      	mov	r6, ip
 8002aca:	431e      	orrs	r6, r3
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x498>
 8002ace:	e0be      	b.n	8002c4e <__aeabi_dsub+0x616>
 8002ad0:	1e56      	subs	r6, r2, #1
 8002ad2:	2a01      	cmp	r2, #1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x4a0>
 8002ad6:	e109      	b.n	8002cec <__aeabi_dsub+0x6b4>
 8002ad8:	4c8c      	ldr	r4, [pc, #560]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x4a8>
 8002ade:	e119      	b.n	8002d14 <__aeabi_dsub+0x6dc>
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	e6c1      	b.n	8002868 <__aeabi_dsub+0x230>
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e648      	b.n	800277e <__aeabi_dsub+0x146>
 8002aec:	2020      	movs	r0, #32
 8002aee:	000c      	movs	r4, r1
 8002af0:	1a80      	subs	r0, r0, r2
 8002af2:	003e      	movs	r6, r7
 8002af4:	4087      	lsls	r7, r0
 8002af6:	4084      	lsls	r4, r0
 8002af8:	40d6      	lsrs	r6, r2
 8002afa:	1e78      	subs	r0, r7, #1
 8002afc:	4187      	sbcs	r7, r0
 8002afe:	40d1      	lsrs	r1, r2
 8002b00:	4334      	orrs	r4, r6
 8002b02:	433c      	orrs	r4, r7
 8002b04:	448c      	add	ip, r1
 8002b06:	e7a4      	b.n	8002a52 <__aeabi_dsub+0x41a>
 8002b08:	4a80      	ldr	r2, [pc, #512]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x4d8>
 8002b0e:	e0e9      	b.n	8002ce4 <__aeabi_dsub+0x6ac>
 8002b10:	19df      	adds	r7, r3, r7
 8002b12:	429f      	cmp	r7, r3
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	4461      	add	r1, ip
 8002b18:	425b      	negs	r3, r3
 8002b1a:	18c9      	adds	r1, r1, r3
 8002b1c:	07cc      	lsls	r4, r1, #31
 8002b1e:	087f      	lsrs	r7, r7, #1
 8002b20:	084b      	lsrs	r3, r1, #1
 8002b22:	4699      	mov	r9, r3
 8002b24:	4680      	mov	r8, r0
 8002b26:	433c      	orrs	r4, r7
 8002b28:	e6f4      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b2a:	1afc      	subs	r4, r7, r3
 8002b2c:	42a7      	cmp	r7, r4
 8002b2e:	41bf      	sbcs	r7, r7
 8002b30:	4663      	mov	r3, ip
 8002b32:	427f      	negs	r7, r7
 8002b34:	1ac9      	subs	r1, r1, r3
 8002b36:	1bcb      	subs	r3, r1, r7
 8002b38:	4699      	mov	r9, r3
 8002b3a:	465d      	mov	r5, fp
 8002b3c:	e5d5      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002b3e:	08ff      	lsrs	r7, r7, #3
 8002b40:	074b      	lsls	r3, r1, #29
 8002b42:	465d      	mov	r5, fp
 8002b44:	433b      	orrs	r3, r7
 8002b46:	08cc      	lsrs	r4, r1, #3
 8002b48:	e6ee      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002b4a:	4662      	mov	r2, ip
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_dsub+0x51a>
 8002b50:	e082      	b.n	8002c58 <__aeabi_dsub+0x620>
 8002b52:	000b      	movs	r3, r1
 8002b54:	433b      	orrs	r3, r7
 8002b56:	d11b      	bne.n	8002b90 <__aeabi_dsub+0x558>
 8002b58:	2480      	movs	r4, #128	; 0x80
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	0324      	lsls	r4, r4, #12
 8002b5e:	e6f9      	b.n	8002954 <__aeabi_dsub+0x31c>
 8002b60:	19dc      	adds	r4, r3, r7
 8002b62:	429c      	cmp	r4, r3
 8002b64:	419b      	sbcs	r3, r3
 8002b66:	4461      	add	r1, ip
 8002b68:	4689      	mov	r9, r1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	4499      	add	r9, r3
 8002b6e:	464b      	mov	r3, r9
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	d444      	bmi.n	8002bfe <__aeabi_dsub+0x5c6>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4698      	mov	r8, r3
 8002b78:	e6cc      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b7a:	1bdc      	subs	r4, r3, r7
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	42a3      	cmp	r3, r4
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	1a51      	subs	r1, r2, r1
 8002b84:	425b      	negs	r3, r3
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	4699      	mov	r9, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	e5a4      	b.n	80026da <__aeabi_dsub+0xa2>
 8002b90:	08ff      	lsrs	r7, r7, #3
 8002b92:	074b      	lsls	r3, r1, #29
 8002b94:	465d      	mov	r5, fp
 8002b96:	433b      	orrs	r3, r7
 8002b98:	08cc      	lsrs	r4, r1, #3
 8002b9a:	e6d7      	b.n	800294c <__aeabi_dsub+0x314>
 8002b9c:	4662      	mov	r2, ip
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	0014      	movs	r4, r2
 8002ba2:	1e63      	subs	r3, r4, #1
 8002ba4:	419c      	sbcs	r4, r3
 8002ba6:	e679      	b.n	800289c <__aeabi_dsub+0x264>
 8002ba8:	0015      	movs	r5, r2
 8002baa:	4664      	mov	r4, ip
 8002bac:	3d20      	subs	r5, #32
 8002bae:	40ec      	lsrs	r4, r5
 8002bb0:	46a0      	mov	r8, r4
 8002bb2:	2a20      	cmp	r2, #32
 8002bb4:	d005      	beq.n	8002bc2 <__aeabi_dsub+0x58a>
 8002bb6:	2540      	movs	r5, #64	; 0x40
 8002bb8:	4664      	mov	r4, ip
 8002bba:	1aaa      	subs	r2, r5, r2
 8002bbc:	4094      	lsls	r4, r2
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	469a      	mov	sl, r3
 8002bc2:	4654      	mov	r4, sl
 8002bc4:	1e63      	subs	r3, r4, #1
 8002bc6:	419c      	sbcs	r4, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	4323      	orrs	r3, r4
 8002bcc:	e773      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	d023      	beq.n	8002c1c <__aeabi_dsub+0x5e4>
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	433a      	orrs	r2, r7
 8002bd8:	d000      	beq.n	8002bdc <__aeabi_dsub+0x5a4>
 8002bda:	e0a0      	b.n	8002d1e <__aeabi_dsub+0x6e6>
 8002bdc:	4662      	mov	r2, ip
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	0752      	lsls	r2, r2, #29
 8002be2:	4313      	orrs	r3, r2
 8002be4:	4662      	mov	r2, ip
 8002be6:	08d4      	lsrs	r4, r2, #3
 8002be8:	e6b0      	b.n	800294c <__aeabi_dsub+0x314>
 8002bea:	000b      	movs	r3, r1
 8002bec:	433b      	orrs	r3, r7
 8002bee:	d100      	bne.n	8002bf2 <__aeabi_dsub+0x5ba>
 8002bf0:	e728      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002bf2:	08ff      	lsrs	r7, r7, #3
 8002bf4:	074b      	lsls	r3, r1, #29
 8002bf6:	465d      	mov	r5, fp
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	08cc      	lsrs	r4, r1, #3
 8002bfc:	e697      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	4698      	mov	r8, r3
 8002c02:	e736      	b.n	8002a72 <__aeabi_dsub+0x43a>
 8002c04:	1afc      	subs	r4, r7, r3
 8002c06:	42a7      	cmp	r7, r4
 8002c08:	41bf      	sbcs	r7, r7
 8002c0a:	4663      	mov	r3, ip
 8002c0c:	427f      	negs	r7, r7
 8002c0e:	1ac9      	subs	r1, r1, r3
 8002c10:	1bcb      	subs	r3, r1, r7
 8002c12:	4699      	mov	r9, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	465d      	mov	r5, fp
 8002c18:	4698      	mov	r8, r3
 8002c1a:	e55e      	b.n	80026da <__aeabi_dsub+0xa2>
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	08ff      	lsrs	r7, r7, #3
 8002c20:	433b      	orrs	r3, r7
 8002c22:	08cc      	lsrs	r4, r1, #3
 8002c24:	e692      	b.n	800294c <__aeabi_dsub+0x314>
 8002c26:	1bdc      	subs	r4, r3, r7
 8002c28:	4660      	mov	r0, ip
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	41b6      	sbcs	r6, r6
 8002c2e:	1a40      	subs	r0, r0, r1
 8002c30:	4276      	negs	r6, r6
 8002c32:	1b80      	subs	r0, r0, r6
 8002c34:	4681      	mov	r9, r0
 8002c36:	0200      	lsls	r0, r0, #8
 8002c38:	d560      	bpl.n	8002cfc <__aeabi_dsub+0x6c4>
 8002c3a:	1afc      	subs	r4, r7, r3
 8002c3c:	42a7      	cmp	r7, r4
 8002c3e:	41bf      	sbcs	r7, r7
 8002c40:	4663      	mov	r3, ip
 8002c42:	427f      	negs	r7, r7
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	1bcb      	subs	r3, r1, r7
 8002c48:	4699      	mov	r9, r3
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	e576      	b.n	800273c <__aeabi_dsub+0x104>
 8002c4e:	08ff      	lsrs	r7, r7, #3
 8002c50:	074b      	lsls	r3, r1, #29
 8002c52:	433b      	orrs	r3, r7
 8002c54:	08cc      	lsrs	r4, r1, #3
 8002c56:	e667      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002c58:	000a      	movs	r2, r1
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	433a      	orrs	r2, r7
 8002c5e:	d100      	bne.n	8002c62 <__aeabi_dsub+0x62a>
 8002c60:	e66f      	b.n	8002942 <__aeabi_dsub+0x30a>
 8002c62:	4662      	mov	r2, ip
 8002c64:	0752      	lsls	r2, r2, #29
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4662      	mov	r2, ip
 8002c6a:	08d4      	lsrs	r4, r2, #3
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	4214      	tst	r4, r2
 8002c72:	d007      	beq.n	8002c84 <__aeabi_dsub+0x64c>
 8002c74:	08c8      	lsrs	r0, r1, #3
 8002c76:	4210      	tst	r0, r2
 8002c78:	d104      	bne.n	8002c84 <__aeabi_dsub+0x64c>
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	0004      	movs	r4, r0
 8002c7e:	08fb      	lsrs	r3, r7, #3
 8002c80:	0749      	lsls	r1, r1, #29
 8002c82:	430b      	orrs	r3, r1
 8002c84:	0f5a      	lsrs	r2, r3, #29
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	0752      	lsls	r2, r2, #29
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	e65d      	b.n	800294c <__aeabi_dsub+0x314>
 8002c90:	074b      	lsls	r3, r1, #29
 8002c92:	08ff      	lsrs	r7, r7, #3
 8002c94:	433b      	orrs	r3, r7
 8002c96:	08cc      	lsrs	r4, r1, #3
 8002c98:	e649      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002c9a:	19dc      	adds	r4, r3, r7
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	419b      	sbcs	r3, r3
 8002ca0:	4461      	add	r1, ip
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	4499      	add	r9, r3
 8002ca8:	464b      	mov	r3, r9
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	d400      	bmi.n	8002cb0 <__aeabi_dsub+0x678>
 8002cae:	e631      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4691      	mov	r9, r2
 8002cba:	4698      	mov	r8, r3
 8002cbc:	e62a      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cbe:	0016      	movs	r6, r2
 8002cc0:	4664      	mov	r4, ip
 8002cc2:	3e20      	subs	r6, #32
 8002cc4:	40f4      	lsrs	r4, r6
 8002cc6:	46a0      	mov	r8, r4
 8002cc8:	2a20      	cmp	r2, #32
 8002cca:	d005      	beq.n	8002cd8 <__aeabi_dsub+0x6a0>
 8002ccc:	2640      	movs	r6, #64	; 0x40
 8002cce:	4664      	mov	r4, ip
 8002cd0:	1ab2      	subs	r2, r6, r2
 8002cd2:	4094      	lsls	r4, r2
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	469a      	mov	sl, r3
 8002cd8:	4654      	mov	r4, sl
 8002cda:	1e63      	subs	r3, r4, #1
 8002cdc:	419c      	sbcs	r4, r3
 8002cde:	4643      	mov	r3, r8
 8002ce0:	431c      	orrs	r4, r3
 8002ce2:	e5db      	b.n	800289c <__aeabi_dsub+0x264>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e548      	b.n	800277e <__aeabi_dsub+0x146>
 8002cec:	19dc      	adds	r4, r3, r7
 8002cee:	42bc      	cmp	r4, r7
 8002cf0:	41bf      	sbcs	r7, r7
 8002cf2:	4461      	add	r1, ip
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	427f      	negs	r7, r7
 8002cf8:	44b9      	add	r9, r7
 8002cfa:	e738      	b.n	8002b6e <__aeabi_dsub+0x536>
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	d100      	bne.n	8002d04 <__aeabi_dsub+0x6cc>
 8002d02:	e69f      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002d04:	e606      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	000007fe 	.word	0x000007fe
 8002d0c:	000007ff 	.word	0x000007ff
 8002d10:	ff7fffff 	.word	0xff7fffff
 8002d14:	08ff      	lsrs	r7, r7, #3
 8002d16:	074b      	lsls	r3, r1, #29
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e616      	b.n	800294c <__aeabi_dsub+0x314>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	0752      	lsls	r2, r2, #29
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4662      	mov	r2, ip
 8002d28:	08d4      	lsrs	r4, r2, #3
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0312      	lsls	r2, r2, #12
 8002d2e:	4214      	tst	r4, r2
 8002d30:	d007      	beq.n	8002d42 <__aeabi_dsub+0x70a>
 8002d32:	08c8      	lsrs	r0, r1, #3
 8002d34:	4210      	tst	r0, r2
 8002d36:	d104      	bne.n	8002d42 <__aeabi_dsub+0x70a>
 8002d38:	465d      	mov	r5, fp
 8002d3a:	0004      	movs	r4, r0
 8002d3c:	08fb      	lsrs	r3, r7, #3
 8002d3e:	0749      	lsls	r1, r1, #29
 8002d40:	430b      	orrs	r3, r1
 8002d42:	0f5a      	lsrs	r2, r3, #29
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	0752      	lsls	r2, r2, #29
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	e5fe      	b.n	800294c <__aeabi_dsub+0x314>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4a01      	ldr	r2, [pc, #4]	; (8002d58 <__aeabi_dsub+0x720>)
 8002d52:	001c      	movs	r4, r3
 8002d54:	e513      	b.n	800277e <__aeabi_dsub+0x146>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000007ff 	.word	0x000007ff

08002d5c <__aeabi_dcmpun>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	0005      	movs	r5, r0
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d62:	031c      	lsls	r4, r3, #12
 8002d64:	0016      	movs	r6, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	030a      	lsls	r2, r1, #12
 8002d6a:	0049      	lsls	r1, r1, #1
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	0d49      	lsrs	r1, r1, #21
 8002d70:	0b24      	lsrs	r4, r4, #12
 8002d72:	0d5b      	lsrs	r3, r3, #21
 8002d74:	4281      	cmp	r1, r0
 8002d76:	d008      	beq.n	8002d8a <__aeabi_dcmpun+0x2e>
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d80:	0020      	movs	r0, r4
 8002d82:	4330      	orrs	r0, r6
 8002d84:	1e43      	subs	r3, r0, #1
 8002d86:	4198      	sbcs	r0, r3
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	432a      	orrs	r2, r5
 8002d8e:	d1fb      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d90:	e7f2      	b.n	8002d78 <__aeabi_dcmpun+0x1c>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	000007ff 	.word	0x000007ff

08002d98 <__aeabi_d2iz>:
 8002d98:	000a      	movs	r2, r1
 8002d9a:	b530      	push	{r4, r5, lr}
 8002d9c:	4c13      	ldr	r4, [pc, #76]	; (8002dec <__aeabi_d2iz+0x54>)
 8002d9e:	0053      	lsls	r3, r2, #1
 8002da0:	0309      	lsls	r1, r1, #12
 8002da2:	0005      	movs	r5, r0
 8002da4:	0b09      	lsrs	r1, r1, #12
 8002da6:	2000      	movs	r0, #0
 8002da8:	0d5b      	lsrs	r3, r3, #21
 8002daa:	0fd2      	lsrs	r2, r2, #31
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	dd04      	ble.n	8002dba <__aeabi_d2iz+0x22>
 8002db0:	480f      	ldr	r0, [pc, #60]	; (8002df0 <__aeabi_d2iz+0x58>)
 8002db2:	4283      	cmp	r3, r0
 8002db4:	dd02      	ble.n	8002dbc <__aeabi_d2iz+0x24>
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_d2iz+0x5c>)
 8002db8:	18d0      	adds	r0, r2, r3
 8002dba:	bd30      	pop	{r4, r5, pc}
 8002dbc:	2080      	movs	r0, #128	; 0x80
 8002dbe:	0340      	lsls	r0, r0, #13
 8002dc0:	4301      	orrs	r1, r0
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <__aeabi_d2iz+0x60>)
 8002dc4:	1ac0      	subs	r0, r0, r3
 8002dc6:	281f      	cmp	r0, #31
 8002dc8:	dd08      	ble.n	8002ddc <__aeabi_d2iz+0x44>
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <__aeabi_d2iz+0x64>)
 8002dcc:	1ac3      	subs	r3, r0, r3
 8002dce:	40d9      	lsrs	r1, r3
 8002dd0:	000b      	movs	r3, r1
 8002dd2:	4258      	negs	r0, r3
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d1f0      	bne.n	8002dba <__aeabi_d2iz+0x22>
 8002dd8:	0018      	movs	r0, r3
 8002dda:	e7ee      	b.n	8002dba <__aeabi_d2iz+0x22>
 8002ddc:	4c08      	ldr	r4, [pc, #32]	; (8002e00 <__aeabi_d2iz+0x68>)
 8002dde:	40c5      	lsrs	r5, r0
 8002de0:	46a4      	mov	ip, r4
 8002de2:	4463      	add	r3, ip
 8002de4:	4099      	lsls	r1, r3
 8002de6:	000b      	movs	r3, r1
 8002de8:	432b      	orrs	r3, r5
 8002dea:	e7f2      	b.n	8002dd2 <__aeabi_d2iz+0x3a>
 8002dec:	000003fe 	.word	0x000003fe
 8002df0:	0000041d 	.word	0x0000041d
 8002df4:	7fffffff 	.word	0x7fffffff
 8002df8:	00000433 	.word	0x00000433
 8002dfc:	00000413 	.word	0x00000413
 8002e00:	fffffbed 	.word	0xfffffbed

08002e04 <__aeabi_i2d>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d016      	beq.n	8002e38 <__aeabi_i2d+0x34>
 8002e0a:	17c3      	asrs	r3, r0, #31
 8002e0c:	18c5      	adds	r5, r0, r3
 8002e0e:	405d      	eors	r5, r3
 8002e10:	0fc4      	lsrs	r4, r0, #31
 8002e12:	0028      	movs	r0, r5
 8002e14:	f000 f91c 	bl	8003050 <__clzsi2>
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <__aeabi_i2d+0x5c>)
 8002e1a:	1a12      	subs	r2, r2, r0
 8002e1c:	280a      	cmp	r0, #10
 8002e1e:	dc16      	bgt.n	8002e4e <__aeabi_i2d+0x4a>
 8002e20:	0003      	movs	r3, r0
 8002e22:	002e      	movs	r6, r5
 8002e24:	3315      	adds	r3, #21
 8002e26:	409e      	lsls	r6, r3
 8002e28:	230b      	movs	r3, #11
 8002e2a:	1a18      	subs	r0, r3, r0
 8002e2c:	40c5      	lsrs	r5, r0
 8002e2e:	0552      	lsls	r2, r2, #21
 8002e30:	032d      	lsls	r5, r5, #12
 8002e32:	0b2d      	lsrs	r5, r5, #12
 8002e34:	0d53      	lsrs	r3, r2, #21
 8002e36:	e003      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e38:	2400      	movs	r4, #0
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	2600      	movs	r6, #0
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	432b      	orrs	r3, r5
 8002e44:	07e4      	lsls	r4, r4, #31
 8002e46:	4323      	orrs	r3, r4
 8002e48:	0030      	movs	r0, r6
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	380b      	subs	r0, #11
 8002e50:	4085      	lsls	r5, r0
 8002e52:	0552      	lsls	r2, r2, #21
 8002e54:	032d      	lsls	r5, r5, #12
 8002e56:	2600      	movs	r6, #0
 8002e58:	0b2d      	lsrs	r5, r5, #12
 8002e5a:	0d53      	lsrs	r3, r2, #21
 8002e5c:	e7f0      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	0000041e 	.word	0x0000041e

08002e64 <__aeabi_ui2d>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	1e04      	subs	r4, r0, #0
 8002e68:	d010      	beq.n	8002e8c <__aeabi_ui2d+0x28>
 8002e6a:	f000 f8f1 	bl	8003050 <__clzsi2>
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <__aeabi_ui2d+0x48>)
 8002e70:	1a1b      	subs	r3, r3, r0
 8002e72:	280a      	cmp	r0, #10
 8002e74:	dc11      	bgt.n	8002e9a <__aeabi_ui2d+0x36>
 8002e76:	220b      	movs	r2, #11
 8002e78:	0021      	movs	r1, r4
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	40d1      	lsrs	r1, r2
 8002e7e:	3015      	adds	r0, #21
 8002e80:	030a      	lsls	r2, r1, #12
 8002e82:	055b      	lsls	r3, r3, #21
 8002e84:	4084      	lsls	r4, r0
 8002e86:	0b12      	lsrs	r2, r2, #12
 8002e88:	0d5b      	lsrs	r3, r3, #21
 8002e8a:	e001      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	051b      	lsls	r3, r3, #20
 8002e92:	4313      	orrs	r3, r2
 8002e94:	0020      	movs	r0, r4
 8002e96:	0019      	movs	r1, r3
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	0022      	movs	r2, r4
 8002e9c:	380b      	subs	r0, #11
 8002e9e:	4082      	lsls	r2, r0
 8002ea0:	055b      	lsls	r3, r3, #21
 8002ea2:	0312      	lsls	r2, r2, #12
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e7f1      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002eac:	0000041e 	.word	0x0000041e

08002eb0 <__aeabi_f2d>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	0043      	lsls	r3, r0, #1
 8002eb4:	0246      	lsls	r6, r0, #9
 8002eb6:	0fc4      	lsrs	r4, r0, #31
 8002eb8:	20fe      	movs	r0, #254	; 0xfe
 8002eba:	0e1b      	lsrs	r3, r3, #24
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	0a75      	lsrs	r5, r6, #9
 8002ec0:	4208      	tst	r0, r1
 8002ec2:	d00c      	beq.n	8002ede <__aeabi_f2d+0x2e>
 8002ec4:	22e0      	movs	r2, #224	; 0xe0
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	4694      	mov	ip, r2
 8002eca:	076d      	lsls	r5, r5, #29
 8002ecc:	0b36      	lsrs	r6, r6, #12
 8002ece:	4463      	add	r3, ip
 8002ed0:	051b      	lsls	r3, r3, #20
 8002ed2:	4333      	orrs	r3, r6
 8002ed4:	07e4      	lsls	r4, r4, #31
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	0028      	movs	r0, r5
 8002eda:	0019      	movs	r1, r3
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d114      	bne.n	8002f0c <__aeabi_f2d+0x5c>
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	d01b      	beq.n	8002f1e <__aeabi_f2d+0x6e>
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	f000 f8b2 	bl	8003050 <__clzsi2>
 8002eec:	280a      	cmp	r0, #10
 8002eee:	dc1c      	bgt.n	8002f2a <__aeabi_f2d+0x7a>
 8002ef0:	230b      	movs	r3, #11
 8002ef2:	002e      	movs	r6, r5
 8002ef4:	1a1b      	subs	r3, r3, r0
 8002ef6:	40de      	lsrs	r6, r3
 8002ef8:	0003      	movs	r3, r0
 8002efa:	3315      	adds	r3, #21
 8002efc:	409d      	lsls	r5, r3
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <__aeabi_f2d+0x88>)
 8002f00:	0336      	lsls	r6, r6, #12
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	0552      	lsls	r2, r2, #21
 8002f06:	0b36      	lsrs	r6, r6, #12
 8002f08:	0d53      	lsrs	r3, r2, #21
 8002f0a:	e7e1      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	d009      	beq.n	8002f24 <__aeabi_f2d+0x74>
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0b36      	lsrs	r6, r6, #12
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f18:	076d      	lsls	r5, r5, #29
 8002f1a:	4316      	orrs	r6, r2
 8002f1c:	e7d8      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2600      	movs	r6, #0
 8002f22:	e7d5      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f24:	2600      	movs	r6, #0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f28:	e7d2      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	3b0b      	subs	r3, #11
 8002f2e:	409d      	lsls	r5, r3
 8002f30:	002e      	movs	r6, r5
 8002f32:	2500      	movs	r5, #0
 8002f34:	e7e3      	b.n	8002efe <__aeabi_f2d+0x4e>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	00000389 	.word	0x00000389
 8002f3c:	000007ff 	.word	0x000007ff

08002f40 <__aeabi_d2f>:
 8002f40:	0002      	movs	r2, r0
 8002f42:	004b      	lsls	r3, r1, #1
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	030c      	lsls	r4, r1, #12
 8002f4a:	4e3d      	ldr	r6, [pc, #244]	; (8003040 <__aeabi_d2f+0x100>)
 8002f4c:	0a64      	lsrs	r4, r4, #9
 8002f4e:	0f40      	lsrs	r0, r0, #29
 8002f50:	1c5f      	adds	r7, r3, #1
 8002f52:	0fc9      	lsrs	r1, r1, #31
 8002f54:	4304      	orrs	r4, r0
 8002f56:	00d5      	lsls	r5, r2, #3
 8002f58:	4237      	tst	r7, r6
 8002f5a:	d00a      	beq.n	8002f72 <__aeabi_d2f+0x32>
 8002f5c:	4839      	ldr	r0, [pc, #228]	; (8003044 <__aeabi_d2f+0x104>)
 8002f5e:	181e      	adds	r6, r3, r0
 8002f60:	2efe      	cmp	r6, #254	; 0xfe
 8002f62:	dd16      	ble.n	8002f92 <__aeabi_d2f+0x52>
 8002f64:	20ff      	movs	r0, #255	; 0xff
 8002f66:	2400      	movs	r4, #0
 8002f68:	05c0      	lsls	r0, r0, #23
 8002f6a:	4320      	orrs	r0, r4
 8002f6c:	07c9      	lsls	r1, r1, #31
 8002f6e:	4308      	orrs	r0, r1
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <__aeabi_d2f+0x44>
 8002f76:	432c      	orrs	r4, r5
 8002f78:	d026      	beq.n	8002fc8 <__aeabi_d2f+0x88>
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	0192      	lsls	r2, r2, #6
 8002f7e:	0a54      	lsrs	r4, r2, #9
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	e7f1      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f84:	4325      	orrs	r5, r4
 8002f86:	d0ed      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002f88:	2080      	movs	r0, #128	; 0x80
 8002f8a:	03c0      	lsls	r0, r0, #15
 8002f8c:	4304      	orrs	r4, r0
 8002f8e:	20ff      	movs	r0, #255	; 0xff
 8002f90:	e7ea      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f92:	2e00      	cmp	r6, #0
 8002f94:	dd1b      	ble.n	8002fce <__aeabi_d2f+0x8e>
 8002f96:	0192      	lsls	r2, r2, #6
 8002f98:	1e53      	subs	r3, r2, #1
 8002f9a:	419a      	sbcs	r2, r3
 8002f9c:	00e4      	lsls	r4, r4, #3
 8002f9e:	0f6d      	lsrs	r5, r5, #29
 8002fa0:	4322      	orrs	r2, r4
 8002fa2:	432a      	orrs	r2, r5
 8002fa4:	0753      	lsls	r3, r2, #29
 8002fa6:	d048      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fa8:	230f      	movs	r3, #15
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d000      	beq.n	8002fb2 <__aeabi_d2f+0x72>
 8002fb0:	3204      	adds	r2, #4
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	04db      	lsls	r3, r3, #19
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d03f      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fba:	1c70      	adds	r0, r6, #1
 8002fbc:	2efe      	cmp	r6, #254	; 0xfe
 8002fbe:	d0d1      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002fc0:	0192      	lsls	r2, r2, #6
 8002fc2:	0a54      	lsrs	r4, r2, #9
 8002fc4:	b2c0      	uxtb	r0, r0
 8002fc6:	e7cf      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e7cc      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fce:	0032      	movs	r2, r6
 8002fd0:	3217      	adds	r2, #23
 8002fd2:	db22      	blt.n	800301a <__aeabi_d2f+0xda>
 8002fd4:	2080      	movs	r0, #128	; 0x80
 8002fd6:	0400      	lsls	r0, r0, #16
 8002fd8:	4320      	orrs	r0, r4
 8002fda:	241e      	movs	r4, #30
 8002fdc:	1ba4      	subs	r4, r4, r6
 8002fde:	2c1f      	cmp	r4, #31
 8002fe0:	dd1d      	ble.n	800301e <__aeabi_d2f+0xde>
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	1b96      	subs	r6, r2, r6
 8002fe8:	0002      	movs	r2, r0
 8002fea:	40f2      	lsrs	r2, r6
 8002fec:	0016      	movs	r6, r2
 8002fee:	2c20      	cmp	r4, #32
 8002ff0:	d004      	beq.n	8002ffc <__aeabi_d2f+0xbc>
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <__aeabi_d2f+0x108>)
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	4463      	add	r3, ip
 8002ff8:	4098      	lsls	r0, r3
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	002a      	movs	r2, r5
 8002ffe:	1e53      	subs	r3, r2, #1
 8003000:	419a      	sbcs	r2, r3
 8003002:	4332      	orrs	r2, r6
 8003004:	2600      	movs	r6, #0
 8003006:	0753      	lsls	r3, r2, #29
 8003008:	d1ce      	bne.n	8002fa8 <__aeabi_d2f+0x68>
 800300a:	2480      	movs	r4, #128	; 0x80
 800300c:	0013      	movs	r3, r2
 800300e:	04e4      	lsls	r4, r4, #19
 8003010:	2001      	movs	r0, #1
 8003012:	4023      	ands	r3, r4
 8003014:	4222      	tst	r2, r4
 8003016:	d1d3      	bne.n	8002fc0 <__aeabi_d2f+0x80>
 8003018:	e7b0      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800301a:	2300      	movs	r3, #0
 800301c:	e7ad      	b.n	8002f7a <__aeabi_d2f+0x3a>
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <__aeabi_d2f+0x10c>)
 8003020:	4694      	mov	ip, r2
 8003022:	002a      	movs	r2, r5
 8003024:	40e2      	lsrs	r2, r4
 8003026:	0014      	movs	r4, r2
 8003028:	002a      	movs	r2, r5
 800302a:	4463      	add	r3, ip
 800302c:	409a      	lsls	r2, r3
 800302e:	4098      	lsls	r0, r3
 8003030:	1e55      	subs	r5, r2, #1
 8003032:	41aa      	sbcs	r2, r5
 8003034:	4302      	orrs	r2, r0
 8003036:	4322      	orrs	r2, r4
 8003038:	e7e4      	b.n	8003004 <__aeabi_d2f+0xc4>
 800303a:	0033      	movs	r3, r6
 800303c:	e79e      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007fe 	.word	0x000007fe
 8003044:	fffffc80 	.word	0xfffffc80
 8003048:	fffffca2 	.word	0xfffffca2
 800304c:	fffffc82 	.word	0xfffffc82

08003050 <__clzsi2>:
 8003050:	211c      	movs	r1, #28
 8003052:	2301      	movs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	4298      	cmp	r0, r3
 8003058:	d301      	bcc.n	800305e <__clzsi2+0xe>
 800305a:	0c00      	lsrs	r0, r0, #16
 800305c:	3910      	subs	r1, #16
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	4298      	cmp	r0, r3
 8003062:	d301      	bcc.n	8003068 <__clzsi2+0x18>
 8003064:	0a00      	lsrs	r0, r0, #8
 8003066:	3908      	subs	r1, #8
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	4298      	cmp	r0, r3
 800306c:	d301      	bcc.n	8003072 <__clzsi2+0x22>
 800306e:	0900      	lsrs	r0, r0, #4
 8003070:	3904      	subs	r1, #4
 8003072:	a202      	add	r2, pc, #8	; (adr r2, 800307c <__clzsi2+0x2c>)
 8003074:	5c10      	ldrb	r0, [r2, r0]
 8003076:	1840      	adds	r0, r0, r1
 8003078:	4770      	bx	lr
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	02020304 	.word	0x02020304
 8003080:	01010101 	.word	0x01010101
	...

0800308c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	0018      	movs	r0, r3
 8003096:	230c      	movs	r3, #12
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f011 fb29 	bl	80146f2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <MX_ADC1_Init+0xf8>)
 80030a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80030a6:	4b36      	ldr	r3, [pc, #216]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	0392      	lsls	r2, r2, #14
 80030ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0392      	lsls	r2, r2, #14
 80030c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030c4:	2208      	movs	r2, #8
 80030c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030dc:	2202      	movs	r2, #2
 80030de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030e2:	2220      	movs	r2, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f6:	222c      	movs	r2, #44	; 0x2c
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003104:	2205      	movs	r2, #5
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <MX_ADC1_Init+0xf4>)
 800310a:	2205      	movs	r2, #5
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003110:	223c      	movs	r2, #60	; 0x3c
 8003112:	2100      	movs	r1, #0
 8003114:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003118:	2200      	movs	r2, #0
 800311a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <MX_ADC1_Init+0xf4>)
 800311e:	0018      	movs	r0, r3
 8003120:	f002 f9fc 	bl	800551c <HAL_ADC_Init>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003128:	f000 fc06 	bl	8003938 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <MX_ADC1_Init+0xfc>)
 8003130:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800313e:	1d3a      	adds	r2, r7, #4
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f002 fdc1 	bl	8005ccc <HAL_ADC_ConfigChannel>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d001      	beq.n	8003152 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800314e:	f000 fbf3 	bl	8003938 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2204      	movs	r2, #4
 8003156:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003158:	1d3a      	adds	r2, r7, #4
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_ADC1_Init+0xf4>)
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f002 fdb4 	bl	8005ccc <HAL_ADC_ConfigChannel>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8003168:	f000 fbe6 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <MX_ADC1_Init+0x100>)
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003170:	2202      	movs	r2, #2
 8003172:	0018      	movs	r0, r3
 8003174:	f002 fb7a 	bl	800586c <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200032c4 	.word	0x200032c4
 8003184:	40012400 	.word	0x40012400
 8003188:	20000100 	.word	0x20000100
 800318c:	200039dc 	.word	0x200039dc

08003190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b091      	sub	sp, #68	; 0x44
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	232c      	movs	r3, #44	; 0x2c
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f011 faa5 	bl	80146f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	2410      	movs	r4, #16
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	0018      	movs	r0, r3
 80031ae:	231c      	movs	r3, #28
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f011 fa9d 	bl	80146f2 <memset>
  if(adcHandle->Instance==ADC1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a39      	ldr	r2, [pc, #228]	; (80032a4 <HAL_ADC_MspInit+0x114>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d16b      	bne.n	800329a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	01d2      	lsls	r2, r2, #7
 80031c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	f004 fbd0 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d001      	beq.n	80031e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031dc:	f000 fbac 	bl	8003938 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0349      	lsls	r1, r1, #13
 80031ea:	430a      	orrs	r2, r1
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 8003202:	2102      	movs	r1, #2
 8003204:	430a      	orrs	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	; 0x34
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_CH0_temp1_Pin|ADC1_CH1_temp2_Pin;
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2203      	movs	r2, #3
 800321a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2203      	movs	r2, #3
 8003220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	187b      	adds	r3, r7, r1
 800322a:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_ADC_MspInit+0x11c>)
 800322c:	0019      	movs	r1, r3
 800322e:	0010      	movs	r0, r2
 8003230:	f003 fcfe 	bl	8006c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_ADC_MspInit+0x124>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800323c:	2205      	movs	r2, #5
 800323e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	0052      	lsls	r2, r2, #1
 8003258:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	00d2      	lsls	r2, r2, #3
 8003260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003264:	2200      	movs	r2, #0
 8003266:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003270:	0018      	movs	r0, r3
 8003272:	f003 f9b5 	bl	80065e0 <HAL_DMA_Init>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800327a:	f000 fb5d 	bl	8003938 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	200c      	movs	r0, #12
 8003290:	f003 f974 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003294:	200c      	movs	r0, #12
 8003296:	f003 f986 	bl	80065a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b011      	add	sp, #68	; 0x44
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40012400 	.word	0x40012400
 80032a8:	40021000 	.word	0x40021000
 80032ac:	50000400 	.word	0x50000400
 80032b0:	20003328 	.word	0x20003328
 80032b4:	40020030 	.word	0x40020030

080032b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_DMA_Init+0x58>)
 80032c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_DMA_Init+0x58>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_DMA_Init+0x58>)
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	2009      	movs	r0, #9
 80032dc:	f003 f94e 	bl	800657c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032e0:	2009      	movs	r0, #9
 80032e2:	f003 f960 	bl	80065a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	200a      	movs	r0, #10
 80032ec:	f003 f946 	bl	800657c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80032f0:	200a      	movs	r0, #10
 80032f2:	f003 f958 	bl	80065a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	200b      	movs	r0, #11
 80032fc:	f003 f93e 	bl	800657c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8003300:	200b      	movs	r0, #11
 8003302:	f003 f950 	bl	80065a6 <HAL_NVIC_EnableIRQ>

}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b002      	add	sp, #8
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40021000 	.word	0x40021000

08003314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b08b      	sub	sp, #44	; 0x2c
 8003318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	2414      	movs	r4, #20
 800331c:	193b      	adds	r3, r7, r4
 800331e:	0018      	movs	r0, r3
 8003320:	2314      	movs	r3, #20
 8003322:	001a      	movs	r2, r3
 8003324:	2100      	movs	r1, #0
 8003326:	f011 f9e4 	bl	80146f2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <MX_GPIO_Init+0x15c>)
 800332c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003330:	2104      	movs	r1, #4
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2204      	movs	r2, #4
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003342:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003348:	2120      	movs	r1, #32
 800334a:	430a      	orrs	r2, r1
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
 800334e:	4b48      	ldr	r3, [pc, #288]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b45      	ldr	r3, [pc, #276]	; (8003470 <MX_GPIO_Init+0x15c>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003360:	2101      	movs	r1, #1
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
 8003366:	4b42      	ldr	r3, [pc, #264]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003378:	2102      	movs	r1, #2
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <MX_GPIO_Init+0x15c>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003390:	2108      	movs	r1, #8
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2208      	movs	r2, #8
 800339c:	4013      	ands	r3, r2
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <MX_GPIO_Init+0x160>)
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <MX_GPIO_Init+0x164>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	0018      	movs	r0, r3
 80033aa:	f003 fdc2 	bl	8006f32 <HAL_GPIO_WritePin>
                          |softstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin, GPIO_PIN_SET);
 80033ae:	4933      	ldr	r1, [pc, #204]	; (800347c <MX_GPIO_Init+0x168>)
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <MX_GPIO_Init+0x164>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	0018      	movs	r0, r3
 80033b6:	f003 fdbc 	bl	8006f32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <MX_GPIO_Init+0x160>)
 80033be:	601a      	str	r2, [r3, #0]
                          |softstart_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	2201      	movs	r2, #1
 80033c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <MX_GPIO_Init+0x164>)
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f003 fc29 	bl	8006c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin;
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <MX_GPIO_Init+0x168>)
 80033e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	2201      	movs	r2, #1
 80033e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	2201      	movs	r2, #1
 80033ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <MX_GPIO_Init+0x164>)
 80033fa:	0019      	movs	r1, r3
 80033fc:	0010      	movs	r0, r2
 80033fe:	f003 fc17 	bl	8006c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTP1_Pin|OTP2_Pin;
 8003402:	0021      	movs	r1, r4
 8003404:	187b      	adds	r3, r7, r1
 8003406:	22c0      	movs	r2, #192	; 0xc0
 8003408:	0152      	lsls	r2, r2, #5
 800340a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340c:	000c      	movs	r4, r1
 800340e:	193b      	adds	r3, r7, r4
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	193b      	adds	r3, r7, r4
 8003416:	2201      	movs	r2, #1
 8003418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	193b      	adds	r3, r7, r4
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <MX_GPIO_Init+0x16c>)
 800341e:	0019      	movs	r1, r3
 8003420:	0010      	movs	r0, r2
 8003422:	f003 fc05 	bl	8006c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_enter_Pin;
 8003426:	193b      	adds	r3, r7, r4
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	0052      	lsls	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800342e:	193b      	adds	r3, r7, r4
 8003430:	2284      	movs	r2, #132	; 0x84
 8003432:	0392      	lsls	r2, r2, #14
 8003434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003436:	193b      	adds	r3, r7, r4
 8003438:	2201      	movs	r2, #1
 800343a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_enter_GPIO_Port, &GPIO_InitStruct);
 800343c:	193a      	adds	r2, r7, r4
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f003 fbf3 	bl	8006c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = X1_Pin|X2_Pin|X1D2_Pin|X4_Pin
 800344a:	193b      	adds	r3, r7, r4
 800344c:	227f      	movs	r2, #127	; 0x7f
 800344e:	601a      	str	r2, [r3, #0]
                          |X5_Pin|X6_Pin|X7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003456:	193b      	adds	r3, r7, r4
 8003458:	2201      	movs	r2, #1
 800345a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800345c:	193b      	adds	r3, r7, r4
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <MX_GPIO_Init+0x170>)
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f003 fbe4 	bl	8006c30 <HAL_GPIO_Init>

}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b00b      	add	sp, #44	; 0x2c
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	00001027 	.word	0x00001027
 8003478:	50000800 	.word	0x50000800
 800347c:	0000e008 	.word	0x0000e008
 8003480:	50000400 	.word	0x50000400
 8003484:	50000c00 	.word	0x50000c00

08003488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800348c:	f001 fe26 	bl	80050dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003490:	f000 f827 	bl	80034e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003494:	f7ff ff3e 	bl	8003314 <MX_GPIO_Init>
  MX_DMA_Init();
 8003498:	f7ff ff0e 	bl	80032b8 <MX_DMA_Init>
  MX_SPI1_Init();
 800349c:	f000 fa52 	bl	8003944 <MX_SPI1_Init>
  MX_TIM3_Init();
 80034a0:	f000 fd42 	bl	8003f28 <MX_TIM3_Init>
  MX_TIM6_Init();
 80034a4:	f000 fda6 	bl	8003ff4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80034a8:	f000 fde6 	bl	8004078 <MX_TIM7_Init>
  MX_TIM15_Init();
 80034ac:	f000 fe52 	bl	8004154 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80034b0:	f001 fb12 	bl	8004ad8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80034b4:	f001 fb62 	bl	8004b7c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80034b8:	f7ff fde8 	bl	800308c <MX_ADC1_Init>
  MX_TIM16_Init();
 80034bc:	f000 ff24 	bl	8004308 <MX_TIM16_Init>
  MX_TIM17_Init();
 80034c0:	f000 ff6e 	bl	80043a0 <MX_TIM17_Init>
  MX_TIM14_Init();
 80034c4:	f000 fe1c 	bl	8004100 <MX_TIM14_Init>
  MX_TIM1_Init();
 80034c8:	f000 fcb0 	bl	8003e2c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80034cc:	f001 fab6 	bl	8004a3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  My_sys_Init();
 80034d0:	f000 f85c 	bl	800358c <My_sys_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/*encoder&Cursor&key*/
	IT_handle();
 80034d4:	f000 f8f4 	bl	80036c0 <IT_handle>
	/*LCD update*/
	Display_Interface();
 80034d8:	f011 f80a 	bl	80144f0 <Display_Interface>

	Check_Error();
 80034dc:	f00e f968 	bl	80117b0 <Check_Error>
	IT_handle();
 80034e0:	e7f8      	b.n	80034d4 <main+0x4c>

080034e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034e2:	b590      	push	{r4, r7, lr}
 80034e4:	b093      	sub	sp, #76	; 0x4c
 80034e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034e8:	2414      	movs	r4, #20
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	0018      	movs	r0, r3
 80034ee:	2334      	movs	r3, #52	; 0x34
 80034f0:	001a      	movs	r2, r3
 80034f2:	2100      	movs	r1, #0
 80034f4:	f011 f8fd 	bl	80146f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	0018      	movs	r0, r3
 80034fc:	2310      	movs	r3, #16
 80034fe:	001a      	movs	r2, r3
 8003500:	2100      	movs	r1, #0
 8003502:	f011 f8f6 	bl	80146f2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	0018      	movs	r0, r3
 800350c:	f003 fd2e 	bl	8006f6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003510:	193b      	adds	r3, r7, r4
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	0252      	lsls	r2, r2, #9
 800351c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800351e:	0021      	movs	r1, r4
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2202      	movs	r2, #2
 8003524:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2203      	movs	r2, #3
 800352a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2210      	movs	r2, #16
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2210      	movs	r2, #16
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	0292      	lsls	r2, r2, #10
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8003540:	187b      	adds	r3, r7, r1
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	05d2      	lsls	r2, r2, #23
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003548:	187b      	adds	r3, r7, r1
 800354a:	0018      	movs	r0, r3
 800354c:	f003 fd5a 	bl	8007004 <HAL_RCC_OscConfig>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003554:	f000 f9f0 	bl	8003938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	2207      	movs	r2, #7
 800355c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	2202      	movs	r2, #2
 8003562:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	01d2      	lsls	r2, r2, #7
 8003570:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2102      	movs	r1, #2
 8003576:	0018      	movs	r0, r3
 8003578:	f004 f854 	bl	8007624 <HAL_RCC_ClockConfig>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003580:	f000 f9da 	bl	8003938 <Error_Handler>
  }
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b013      	add	sp, #76	; 0x4c
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <My_sys_Init>:

/* USER CODE BEGIN 4 */
void My_sys_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
	Flag.ADC1_IT=0;
 8003592:	4b3e      	ldr	r3, [pc, #248]	; (800368c <My_sys_Init+0x100>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
	Flag.TIM7_IT=0;
 8003598:	4b3c      	ldr	r3, [pc, #240]	; (800368c <My_sys_Init+0x100>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
	Flag.TIM3_IT=0;
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <My_sys_Init+0x100>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
	Flag.TIM6_IT=0;
 80035a4:	4b39      	ldr	r3, [pc, #228]	; (800368c <My_sys_Init+0x100>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
	Flag.TIM7_IT=0;
 80035aa:	4b38      	ldr	r3, [pc, #224]	; (800368c <My_sys_Init+0x100>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
	Flag.TIM17_IT=0;
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <My_sys_Init+0x100>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
	Flag.ERROR_Flag=0;
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <My_sys_Init+0x100>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
	Flag.Encoder_BF=0;
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <My_sys_Init+0x100>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
	/*main interface*/
	xyz.coordinates1=0;
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <My_sys_Init+0x104>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
	xyz.coordinates2=0;
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <My_sys_Init+0x104>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
	xyz.coordinates3=0;
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <My_sys_Init+0x104>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
	/*power off till soft start*/
	Power_AC_Off;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <My_sys_Init+0x108>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	2120      	movs	r1, #32
 80035da:	0018      	movs	r0, r3
 80035dc:	f003 fca9 	bl	8006f32 <HAL_GPIO_WritePin>
	/*Disable the key at first*/
	keys_EN = DISABLE;
 80035e0:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <My_sys_Init+0x10c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
	//PD0 PD2 key scan init
	SYSCFG_TypeDef  *SYScfg=SYSCFG;
 80035e6:	4b2d      	ldr	r3, [pc, #180]	; (800369c <My_sys_Init+0x110>)
 80035e8:	607b      	str	r3, [r7, #4]
	SYScfg->CFGR1|=(SYSCFG_CFGR1_UCPD2_STROBE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	00d2      	lsls	r2, r2, #3
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
	//PA8
	SYSCFG_TypeDef  *SYScfg1=SYSCFG;
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <My_sys_Init+0x110>)
 80035fa:	603b      	str	r3, [r7, #0]
	SYScfg1->CFGR1|=(SYSCFG_CFGR1_UCPD1_STROBE);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	431a      	orrs	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	601a      	str	r2, [r3, #0]
	/*other device init*/
	AT_25_init();
 800360a:	f008 fc41 	bl	800be90 <AT_25_init>
	AT25_Reset();
 800360e:	f009 f821 	bl	800c654 <AT25_Reset>
	AT25_load_AD_Param();
 8003612:	f008 ffb7 	bl	800c584 <AT25_load_AD_Param>
	OLED_Init();
 8003616:	f00e fb21 	bl	8011c5c <OLED_Init>
	/*Cursor off*/
	__HAL_TIM_DISABLE(&htim6);
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <My_sys_Init+0x114>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a20      	ldr	r2, [pc, #128]	; (80036a4 <My_sys_Init+0x118>)
 8003622:	4013      	ands	r3, r2
 8003624:	d10d      	bne.n	8003642 <My_sys_Init+0xb6>
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <My_sys_Init+0x114>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <My_sys_Init+0x11c>)
 800362e:	4013      	ands	r3, r2
 8003630:	d107      	bne.n	8003642 <My_sys_Init+0xb6>
 8003632:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <My_sys_Init+0x114>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <My_sys_Init+0x114>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
	/*check temperature*/
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 8003642:	491a      	ldr	r1, [pc, #104]	; (80036ac <My_sys_Init+0x120>)
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <My_sys_Init+0x124>)
 8003646:	2202      	movs	r2, #2
 8003648:	0018      	movs	r0, r3
 800364a:	f002 f90f 	bl	800586c <HAL_ADC_Start_DMA>
	/*start to communicate with mini board*/
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <My_sys_Init+0x128>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <My_sys_Init+0x128>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2110      	movs	r1, #16
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
	UART_Start_Receive_DMA(&huart2,Uart2_Receive_buffer,20);
 800365e:	4916      	ldr	r1, [pc, #88]	; (80036b8 <My_sys_Init+0x12c>)
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <My_sys_Init+0x128>)
 8003662:	2214      	movs	r2, #20
 8003664:	0018      	movs	r0, r3
 8003666:	f007 fe3b 	bl	800b2e0 <UART_Start_Receive_DMA>
	__HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <My_sys_Init+0x128>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	621a      	str	r2, [r3, #32]
	/*Delay on soft start*/
	DAC_Cmd_send(1,11,0);
 8003672:	2200      	movs	r2, #0
 8003674:	210b      	movs	r1, #11
 8003676:	2001      	movs	r0, #1
 8003678:	f009 f8b2 	bl	800c7e0 <DAC_Cmd_send>
	/*all device initialize�?? soft start timer on，power on*/
	HAL_TIM_Base_Start_IT(&htim1);
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <My_sys_Init+0x130>)
 800367e:	0018      	movs	r0, r3
 8003680:	f005 fa56 	bl	8008b30 <HAL_TIM_Base_Start_IT>

}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b002      	add	sp, #8
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20003384 	.word	0x20003384
 8003690:	200039f4 	.word	0x200039f4
 8003694:	50000800 	.word	0x50000800
 8003698:	20003985 	.word	0x20003985
 800369c:	40010000 	.word	0x40010000
 80036a0:	200034c8 	.word	0x200034c8
 80036a4:	00001111 	.word	0x00001111
 80036a8:	00000444 	.word	0x00000444
 80036ac:	200039dc 	.word	0x200039dc
 80036b0:	200032c4 	.word	0x200032c4
 80036b4:	20003740 	.word	0x20003740
 80036b8:	200036a0 	.word	0x200036a0
 80036bc:	20003430 	.word	0x20003430

080036c0 <IT_handle>:
/**
  * @brief
  * @retval None
  */
void IT_handle(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

		if(Flag.TIM3_IT==1)
 80036c4:	4b84      	ldr	r3, [pc, #528]	; (80038d8 <IT_handle+0x218>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d104      	bne.n	80036d6 <IT_handle+0x16>
		{
			Encoder_Data_refresh();
 80036cc:	f00a fd1a 	bl	800e104 <Encoder_Data_refresh>
			Flag.Encoder_BF=0;
 80036d0:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <IT_handle+0x218>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
		}
		/*key scan 100Hz*/
		if(Flag.TIM7_IT==1)
 80036d6:	4b80      	ldr	r3, [pc, #512]	; (80038d8 <IT_handle+0x218>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d111      	bne.n	8003702 <IT_handle+0x42>
		{
			Flag.TIM7_IT=0;
 80036de:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <IT_handle+0x218>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	605a      	str	r2, [r3, #4]
			KEY_Handle();
 80036e4:	f00d ff7c 	bl	80115e0 <KEY_Handle>
			/*sleep*/
			if(COUNT_ESC==2)
 80036e8:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <IT_handle+0x21c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d108      	bne.n	8003702 <IT_handle+0x42>
			{
				COUNT_ESC=0;
 80036f0:	4b7a      	ldr	r3, [pc, #488]	; (80038dc <IT_handle+0x21c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
				Sleep_ON_OFF = ~Sleep_ON_OFF;
 80036f6:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <IT_handle+0x220>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4b78      	ldr	r3, [pc, #480]	; (80038e0 <IT_handle+0x220>)
 8003700:	701a      	strb	r2, [r3, #0]
			}

		}
		/*Cursor flash*/
		if(Flag.TIM6_IT==1)
 8003702:	4b75      	ldr	r3, [pc, #468]	; (80038d8 <IT_handle+0x218>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d104      	bne.n	8003714 <IT_handle+0x54>
		{
			Flag.TIM6_IT=0;
 800370a:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <IT_handle+0x218>)
 800370c:	2200      	movs	r2, #0
 800370e:	60da      	str	r2, [r3, #12]
			Cursor_flash();
 8003710:	f010 fdce 	bl	80142b0 <Cursor_flash>

		}
		if(Flag.ADC1_IT==1)
 8003714:	4b70      	ldr	r3, [pc, #448]	; (80038d8 <IT_handle+0x218>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d000      	beq.n	800371e <IT_handle+0x5e>
 800371c:	e0cb      	b.n	80038b6 <IT_handle+0x1f6>
		{
			Flag.ADC1_IT=0;
 800371e:	4b6e      	ldr	r3, [pc, #440]	; (80038d8 <IT_handle+0x218>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
			static float R1,R2,T;
			static uint16_t Voltage_Temperature[2];

			Voltage_Temperature[0]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[0],ADC_RESOLUTION_12B);//mv
 8003724:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <IT_handle+0x224>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	001a      	movs	r2, r3
 800372a:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <IT_handle+0x228>)
 800372c:	4353      	muls	r3, r2
 800372e:	496f      	ldr	r1, [pc, #444]	; (80038ec <IT_handle+0x22c>)
 8003730:	0018      	movs	r0, r3
 8003732:	f7fc fd0b 	bl	800014c <__udivsi3>
 8003736:	0003      	movs	r3, r0
 8003738:	b29a      	uxth	r2, r3
 800373a:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <IT_handle+0x230>)
 800373c:	801a      	strh	r2, [r3, #0]
			Voltage_Temperature[1]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[1],ADC_RESOLUTION_12B);//mv
 800373e:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <IT_handle+0x224>)
 8003740:	885b      	ldrh	r3, [r3, #2]
 8003742:	001a      	movs	r2, r3
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <IT_handle+0x228>)
 8003746:	4353      	muls	r3, r2
 8003748:	4968      	ldr	r1, [pc, #416]	; (80038ec <IT_handle+0x22c>)
 800374a:	0018      	movs	r0, r3
 800374c:	f7fc fcfe 	bl	800014c <__udivsi3>
 8003750:	0003      	movs	r3, r0
 8003752:	b29a      	uxth	r2, r3
 8003754:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <IT_handle+0x230>)
 8003756:	805a      	strh	r2, [r3, #2]

			R1=Voltage_Temperature[0]/(Voltage_Temperature[0]-2970);
 8003758:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <IT_handle+0x230>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	001a      	movs	r2, r3
 800375e:	4b64      	ldr	r3, [pc, #400]	; (80038f0 <IT_handle+0x230>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	4964      	ldr	r1, [pc, #400]	; (80038f4 <IT_handle+0x234>)
 8003764:	468c      	mov	ip, r1
 8003766:	4463      	add	r3, ip
 8003768:	0019      	movs	r1, r3
 800376a:	0010      	movs	r0, r2
 800376c:	f7fc fd78 	bl	8000260 <__divsi3>
 8003770:	0003      	movs	r3, r0
 8003772:	0018      	movs	r0, r3
 8003774:	f7fd fd68 	bl	8001248 <__aeabi_i2f>
 8003778:	1c02      	adds	r2, r0, #0
 800377a:	4b5f      	ldr	r3, [pc, #380]	; (80038f8 <IT_handle+0x238>)
 800377c:	601a      	str	r2, [r3, #0]
			R2=Voltage_Temperature[1]/(Voltage_Temperature[1]-2970);
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <IT_handle+0x230>)
 8003780:	885b      	ldrh	r3, [r3, #2]
 8003782:	001a      	movs	r2, r3
 8003784:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <IT_handle+0x230>)
 8003786:	885b      	ldrh	r3, [r3, #2]
 8003788:	495a      	ldr	r1, [pc, #360]	; (80038f4 <IT_handle+0x234>)
 800378a:	468c      	mov	ip, r1
 800378c:	4463      	add	r3, ip
 800378e:	0019      	movs	r1, r3
 8003790:	0010      	movs	r0, r2
 8003792:	f7fc fd65 	bl	8000260 <__divsi3>
 8003796:	0003      	movs	r3, r0
 8003798:	0018      	movs	r0, r3
 800379a:	f7fd fd55 	bl	8001248 <__aeabi_i2f>
 800379e:	1c02      	adds	r2, r0, #0
 80037a0:	4b56      	ldr	r3, [pc, #344]	; (80038fc <IT_handle+0x23c>)
 80037a2:	601a      	str	r2, [r3, #0]
			T=-6.25*(R1+R2)/2+87.5;//温度电阻曲线 Kohm
 80037a4:	4b54      	ldr	r3, [pc, #336]	; (80038f8 <IT_handle+0x238>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b54      	ldr	r3, [pc, #336]	; (80038fc <IT_handle+0x23c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1c19      	adds	r1, r3, #0
 80037ae:	1c10      	adds	r0, r2, #0
 80037b0:	f7fc fef0 	bl	8000594 <__aeabi_fadd>
 80037b4:	1c03      	adds	r3, r0, #0
 80037b6:	1c18      	adds	r0, r3, #0
 80037b8:	f7ff fb7a 	bl	8002eb0 <__aeabi_f2d>
 80037bc:	2200      	movs	r2, #0
 80037be:	4b50      	ldr	r3, [pc, #320]	; (8003900 <IT_handle+0x240>)
 80037c0:	f7fe fcce 	bl	8002160 <__aeabi_dmul>
 80037c4:	0002      	movs	r2, r0
 80037c6:	000b      	movs	r3, r1
 80037c8:	0010      	movs	r0, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	2200      	movs	r2, #0
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	05db      	lsls	r3, r3, #23
 80037d2:	f7fe f8c3 	bl	800195c <__aeabi_ddiv>
 80037d6:	0002      	movs	r2, r0
 80037d8:	000b      	movs	r3, r1
 80037da:	0010      	movs	r0, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	2200      	movs	r2, #0
 80037e0:	4b48      	ldr	r3, [pc, #288]	; (8003904 <IT_handle+0x244>)
 80037e2:	f7fd fd7f 	bl	80012e4 <__aeabi_dadd>
 80037e6:	0002      	movs	r2, r0
 80037e8:	000b      	movs	r3, r1
 80037ea:	0010      	movs	r0, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	f7ff fba7 	bl	8002f40 <__aeabi_d2f>
 80037f2:	1c02      	adds	r2, r0, #0
 80037f4:	4b44      	ldr	r3, [pc, #272]	; (8003908 <IT_handle+0x248>)
 80037f6:	601a      	str	r2, [r3, #0]
			sprintf(String_Temperature_CH1, "%6.2f", T);//update temperature
 80037f8:	4b43      	ldr	r3, [pc, #268]	; (8003908 <IT_handle+0x248>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	1c18      	adds	r0, r3, #0
 80037fe:	f7ff fb57 	bl	8002eb0 <__aeabi_f2d>
 8003802:	0002      	movs	r2, r0
 8003804:	000b      	movs	r3, r1
 8003806:	4941      	ldr	r1, [pc, #260]	; (800390c <IT_handle+0x24c>)
 8003808:	4841      	ldr	r0, [pc, #260]	; (8003910 <IT_handle+0x250>)
 800380a:	f011 fcdd 	bl	80151c8 <siprintf>
			Flag.FAN_LEVEL=99/5.0*T-485;//compare value
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <IT_handle+0x248>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	1c18      	adds	r0, r3, #0
 8003814:	f7ff fb4c 	bl	8002eb0 <__aeabi_f2d>
 8003818:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <IT_handle+0x254>)
 800381a:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <IT_handle+0x258>)
 800381c:	f7fe fca0 	bl	8002160 <__aeabi_dmul>
 8003820:	0002      	movs	r2, r0
 8003822:	000b      	movs	r3, r1
 8003824:	0010      	movs	r0, r2
 8003826:	0019      	movs	r1, r3
 8003828:	2200      	movs	r2, #0
 800382a:	4b3c      	ldr	r3, [pc, #240]	; (800391c <IT_handle+0x25c>)
 800382c:	f7fe ff04 	bl	8002638 <__aeabi_dsub>
 8003830:	0002      	movs	r2, r0
 8003832:	000b      	movs	r3, r1
 8003834:	0010      	movs	r0, r2
 8003836:	0019      	movs	r1, r3
 8003838:	f7ff fb82 	bl	8002f40 <__aeabi_d2f>
 800383c:	1c02      	adds	r2, r0, #0
 800383e:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <IT_handle+0x218>)
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,(uint16_t)Flag.FAN_LEVEL);//set compare value
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <IT_handle+0x218>)
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	1c18      	adds	r0, r3, #0
 8003848:	f7fc fe6e 	bl	8000528 <__aeabi_f2uiz>
 800384c:	0003      	movs	r3, r0
 800384e:	b29a      	uxth	r2, r3
 8003850:	4b33      	ldr	r3, [pc, #204]	; (8003920 <IT_handle+0x260>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,(uint16_t)Flag.FAN_LEVEL);
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <IT_handle+0x218>)
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	1c18      	adds	r0, r3, #0
 800385c:	f7fc fe64 	bl	8000528 <__aeabi_f2uiz>
 8003860:	0003      	movs	r3, r0
 8003862:	b29a      	uxth	r2, r3
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <IT_handle+0x260>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
			/*过温判别*/
			if(Voltage_Temperature[0]<1500||Voltage_Temperature[1]<1500)
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <IT_handle+0x230>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <IT_handle+0x264>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d904      	bls.n	800387e <IT_handle+0x1be>
 8003874:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <IT_handle+0x230>)
 8003876:	885b      	ldrh	r3, [r3, #2]
 8003878:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <IT_handle+0x264>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d81b      	bhi.n	80038b6 <IT_handle+0x1f6>
			{
				ON_OFF = OFF;
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <IT_handle+0x268>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
				OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <IT_handle+0x26c>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
				Output_Zero();
 800388a:	f009 f8bf 	bl	800ca0c <Output_Zero>
				TIM16_DELAY_OFF();
 800388e:	f00e f8dd 	bl	8011a4c <TIM16_DELAY_OFF>
				TIM17_CYCLE_OFF();
 8003892:	f00e f94f 	bl	8011b34 <TIM17_CYCLE_OFF>
				Error |= OTP;
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <IT_handle+0x270>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2204      	movs	r2, #4
 800389c:	4313      	orrs	r3, r2
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <IT_handle+0x270>)
 80038a2:	701a      	strb	r2, [r3, #0]
				xyz.coordinates1=4;
 80038a4:	4b23      	ldr	r3, [pc, #140]	; (8003934 <IT_handle+0x274>)
 80038a6:	2204      	movs	r2, #4
 80038a8:	601a      	str	r2, [r3, #0]
				xyz.coordinates2=1;
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <IT_handle+0x274>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	605a      	str	r2, [r3, #4]
				xyz.coordinates3=0;
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <IT_handle+0x274>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
			}


		}
		if(Flag.TIM14_IT==1)
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <IT_handle+0x218>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <IT_handle+0x204>
		{
			Flag.TIM14_IT=0;
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <IT_handle+0x218>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]

		}
		if(Flag.TIM17_IT==1)
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <IT_handle+0x218>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d102      	bne.n	80038d2 <IT_handle+0x212>
		{
			Flag.TIM17_IT=0;
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <IT_handle+0x218>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]

		}


}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20003384 	.word	0x20003384
 80038dc:	2000398c 	.word	0x2000398c
 80038e0:	20002fd1 	.word	0x20002fd1
 80038e4:	200039dc 	.word	0x200039dc
 80038e8:	00000ce4 	.word	0x00000ce4
 80038ec:	00000fff 	.word	0x00000fff
 80038f0:	200033b8 	.word	0x200033b8
 80038f4:	fffff466 	.word	0xfffff466
 80038f8:	200033bc 	.word	0x200033bc
 80038fc:	200033c0 	.word	0x200033c0
 8003900:	c0190000 	.word	0xc0190000
 8003904:	4055e000 	.word	0x4055e000
 8003908:	200033c4 	.word	0x200033c4
 800390c:	080183e8 	.word	0x080183e8
 8003910:	20003074 	.word	0x20003074
 8003914:	cccccccd 	.word	0xcccccccd
 8003918:	4033cccc 	.word	0x4033cccc
 800391c:	407e5000 	.word	0x407e5000
 8003920:	200035ac 	.word	0x200035ac
 8003924:	000005db 	.word	0x000005db
 8003928:	20003988 	.word	0x20003988
 800392c:	20003989 	.word	0x20003989
 8003930:	200039d9 	.word	0x200039d9
 8003934:	200039f4 	.word	0x200039f4

08003938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800393c:	b672      	cpsid	i
}
 800393e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003940:	e7fe      	b.n	8003940 <Error_Handler+0x8>
	...

08003944 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <MX_SPI1_Init+0x74>)
 800394a:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <MX_SPI1_Init+0x78>)
 800394c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800394e:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003950:	2282      	movs	r2, #130	; 0x82
 8003952:	0052      	lsls	r2, r2, #1
 8003954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003956:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <MX_SPI1_Init+0x74>)
 800395e:	22e0      	movs	r2, #224	; 0xe0
 8003960:	00d2      	lsls	r2, r2, #3
 8003962:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <MX_SPI1_Init+0x74>)
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <MX_SPI1_Init+0x74>)
 800397a:	2208      	movs	r2, #8
 800397c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800397e:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003986:	2200      	movs	r2, #0
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <MX_SPI1_Init+0x74>)
 800398c:	2200      	movs	r2, #0
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003992:	2207      	movs	r2, #7
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <MX_SPI1_Init+0x74>)
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <MX_SPI1_Init+0x74>)
 800399e:	2208      	movs	r2, #8
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <MX_SPI1_Init+0x74>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f004 f91b 	bl	8007be0 <HAL_SPI_Init>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d001      	beq.n	80039b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80039ae:	f7ff ffc3 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	200033c8 	.word	0x200033c8
 80039bc:	40013000 	.word	0x40013000

080039c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b08b      	sub	sp, #44	; 0x2c
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	2414      	movs	r4, #20
 80039ca:	193b      	adds	r3, r7, r4
 80039cc:	0018      	movs	r0, r3
 80039ce:	2314      	movs	r3, #20
 80039d0:	001a      	movs	r2, r3
 80039d2:	2100      	movs	r1, #0
 80039d4:	f010 fe8d 	bl	80146f2 <memset>
  if(spiHandle->Instance==SPI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <HAL_SPI_MspInit+0xd4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d153      	bne.n	8003a8a <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e2:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 80039e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e6:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	0149      	lsls	r1, r1, #5
 80039ec:	430a      	orrs	r2, r1
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 80039f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	015b      	lsls	r3, r3, #5
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039fe:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 8003a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a02:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 8003a04:	2108      	movs	r1, #8
 8003a06:	430a      	orrs	r2, r1
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	2208      	movs	r2, #8
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 8003a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	635a      	str	r2, [r3, #52]	; 0x34
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <HAL_SPI_MspInit+0xd8>)
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	2201      	movs	r2, #1
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	0052      	lsls	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	2202      	movs	r2, #2
 8003a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_SPI_MspInit+0xdc>)
 8003a52:	0019      	movs	r1, r3
 8003a54:	0010      	movs	r0, r2
 8003a56:	f003 f8eb 	bl	8006c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a5a:	0021      	movs	r1, r4
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	22c0      	movs	r2, #192	; 0xc0
 8003a60:	0152      	lsls	r2, r2, #5
 8003a62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2202      	movs	r2, #2
 8003a68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7c:	187a      	adds	r2, r7, r1
 8003a7e:	23a0      	movs	r3, #160	; 0xa0
 8003a80:	05db      	lsls	r3, r3, #23
 8003a82:	0011      	movs	r1, r2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f003 f8d3 	bl	8006c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b00b      	add	sp, #44	; 0x2c
 8003a90:	bd90      	pop	{r4, r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	40013000 	.word	0x40013000
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	50000c00 	.word	0x50000c00

08003aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_MspInit+0x44>)
 8003aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_MspInit+0x44>)
 8003aac:	2101      	movs	r1, #1
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <HAL_MspInit+0x44>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_MspInit+0x44>)
 8003ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_MspInit+0x44>)
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	0549      	lsls	r1, r1, #21
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_MspInit+0x44>)
 8003ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	055b      	lsls	r3, r3, #21
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	40021000 	.word	0x40021000

08003ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <NMI_Handler+0x4>

08003aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003af2:	e7fe      	b.n	8003af2 <HardFault_Handler+0x4>

08003af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b0c:	f001 fb50 	bl	80051b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <DMA1_Channel1_IRQHandler+0x14>)
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f002 ff3a 	bl	8006998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	20003868 	.word	0x20003868

08003b30 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003b36:	0018      	movs	r0, r3
 8003b38:	f002 ff2e 	bl	8006998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	20003328 	.word	0x20003328

08003b48 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f002 ff22 	bl	8006998 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8003b56:	0018      	movs	r0, r3
 8003b58:	f002 ff1e 	bl	8006998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	200038c4 	.word	0x200038c4
 8003b68:	20003920 	.word	0x20003920

08003b6c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <ADC1_IRQHandler+0x14>)
 8003b72:	0018      	movs	r0, r3
 8003b74:	f001 ff7a 	bl	8005a6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	200032c4 	.word	0x200032c4

08003b84 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f005 fab6 	bl	80090fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20003430 	.word	0x20003430

08003b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <TIM3_IRQHandler+0x14>)
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f005 faaa 	bl	80090fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	2000347c 	.word	0x2000347c

08003bb4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <TIM6_IRQHandler+0x14>)
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f005 fa9e 	bl	80090fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  //TIM6_Protect_IT_Handle();
  /* USER CODE END TIM6_IRQn 1 */
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	200034c8 	.word	0x200034c8

08003bcc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <TIM7_IRQHandler+0x14>)
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f005 fa92 	bl	80090fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  //OLED光标显示接口
  //TIM7_Oled_IT_Handle();
  /* USER CODE END TIM7_IRQn 1 */
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	20003514 	.word	0x20003514

08003be4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <TIM14_IRQHandler+0x14>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f005 fa86 	bl	80090fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	20003560 	.word	0x20003560

08003bfc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <TIM16_IRQHandler+0x14>)
 8003c02:	0018      	movs	r0, r3
 8003c04:	f005 fa7a 	bl	80090fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */


  /* USER CODE END TIM16_IRQn 1 */
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	200035f8 	.word	0x200035f8

08003c14 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <TIM17_IRQHandler+0x14>)
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f005 fa6e 	bl	80090fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */


  /* USER CODE END TIM17_IRQn 1 */
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20003644 	.word	0x20003644

08003c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <USART1_IRQHandler+0x14>)
 8003c32:	0018      	movs	r0, r3
 8003c34:	f006 fc94 	bl	800a560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	200036ac 	.word	0x200036ac

08003c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c48:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f006 fc88 	bl	800a560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	2210      	movs	r2, #16
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d11d      	bne.n	8003c9a <USART2_IRQHandler+0x56>
  {

	    //HAL_UART_DMAStop(&huart2);
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);    //关了空闲中断
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2110      	movs	r1, #16
 8003c6a:	438a      	bics	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
	    __HAL_UART_CLEAR_IDLEFLAG(&huart2);				//清除IDLE标志
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2210      	movs	r2, #16
 8003c74:	621a      	str	r2, [r3, #32]
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);	//清除IDLE标志
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2110      	movs	r1, #16
 8003c82:	438a      	bics	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]

	    USART2_IDLECallback();
 8003c86:	f001 f953 	bl	8004f30 <USART2_IDLECallback>

	    __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);    	//使能空闲中断
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <USART2_IRQHandler+0x5c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2110      	movs	r1, #16
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20003740 	.word	0x20003740

08003ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  return 1;
 8003ca8:	2301      	movs	r3, #1
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <_kill>:

int _kill(int pid, int sig)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cba:	f010 fcdd 	bl	8014678 <__errno>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	2216      	movs	r2, #22
 8003cc2:	601a      	str	r2, [r3, #0]
  return -1;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	425b      	negs	r3, r3
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_exit>:

void _exit (int status)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cd8:	2301      	movs	r3, #1
 8003cda:	425a      	negs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0011      	movs	r1, r2
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff ffe5 	bl	8003cb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ce6:	e7fe      	b.n	8003ce6 <_exit+0x16>

08003ce8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e00a      	b.n	8003d10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cfa:	e000      	b.n	8003cfe <_read+0x16>
 8003cfc:	bf00      	nop
 8003cfe:	0001      	movs	r1, r0
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	60ba      	str	r2, [r7, #8]
 8003d06:	b2ca      	uxtb	r2, r1
 8003d08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	dbf0      	blt.n	8003cfa <_read+0x12>
  }

  return len;
 8003d18:	687b      	ldr	r3, [r7, #4]
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b006      	add	sp, #24
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e009      	b.n	8003d48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	60ba      	str	r2, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	e000      	b.n	8003d42 <_write+0x20>
 8003d40:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	dbf1      	blt.n	8003d34 <_write+0x12>
  }
  return len;
 8003d50:	687b      	ldr	r3, [r7, #4]
}
 8003d52:	0018      	movs	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b006      	add	sp, #24
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_close>:

int _close(int file)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	425b      	negs	r3, r3
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	0192      	lsls	r2, r2, #6
 8003d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_isatty>:

int _isatty(int file)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d92:	2301      	movs	r3, #1
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b004      	add	sp, #16
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dbc:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <_sbrk+0x5c>)
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <_sbrk+0x60>)
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <_sbrk+0x64>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <_sbrk+0x64>)
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <_sbrk+0x68>)
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <_sbrk+0x64>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	18d3      	adds	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d207      	bcs.n	8003df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003de4:	f010 fc48 	bl	8014678 <__errno>
 8003de8:	0003      	movs	r3, r0
 8003dea:	220c      	movs	r2, #12
 8003dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	425b      	negs	r3, r3
 8003df2:	e009      	b.n	8003e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <_sbrk+0x64>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <_sbrk+0x64>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	18d2      	adds	r2, r2, r3
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <_sbrk+0x64>)
 8003e04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b006      	add	sp, #24
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20009000 	.word	0x20009000
 8003e14:	00000400 	.word	0x00000400
 8003e18:	2000342c 	.word	0x2000342c
 8003e1c:	20003aa0 	.word	0x20003aa0

08003e20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e32:	2310      	movs	r3, #16
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	0018      	movs	r0, r3
 8003e38:	2310      	movs	r3, #16
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	f010 fc58 	bl	80146f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	0018      	movs	r0, r3
 8003e46:	230c      	movs	r3, #12
 8003e48:	001a      	movs	r2, r3
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	f010 fc51 	bl	80146f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e50:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e52:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <MX_TIM1_Init+0xe8>)
 8003e54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e58:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <MX_TIM1_Init+0xec>)
 8003e5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <MX_TIM1_Init+0xf0>)
 8003e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e68:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e74:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e7a:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f004 fdb1 	bl	80089e4 <HAL_TIM_Base_Init>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d001      	beq.n	8003e8a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003e86:	f7ff fd57 	bl	8003938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	0152      	lsls	r2, r2, #5
 8003e92:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e94:	187a      	adds	r2, r7, r1
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003e98:	0011      	movs	r1, r2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f005 fb60 	bl	8009560 <HAL_TIM_ConfigClockSource>
 8003ea0:	1e03      	subs	r3, r0, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003ea4:	f7ff fd48 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eba:	1d3a      	adds	r2, r7, #4
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f006 f83d 	bl	8009f40 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec6:	1e03      	subs	r3, r0, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003eca:	f7ff fd35 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4252      	negs	r2, r2
 8003ed6:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim1,0x00);
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim1);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4a0e      	ldr	r2, [pc, #56]	; (8003f20 <MX_TIM1_Init+0xf4>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d10d      	bne.n	8003f08 <MX_TIM1_Init+0xdc>
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <MX_TIM1_Init+0xf8>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d107      	bne.n	8003f08 <MX_TIM1_Init+0xdc>
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <MX_TIM1_Init+0xe4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2101      	movs	r1, #1
 8003f04:	438a      	bics	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b008      	add	sp, #32
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20003430 	.word	0x20003430
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	0000f9ff 	.word	0x0000f9ff
 8003f1c:	00001387 	.word	0x00001387
 8003f20:	00001111 	.word	0x00001111
 8003f24:	00000444 	.word	0x00000444

08003f28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b08d      	sub	sp, #52	; 0x34
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f2e:	240c      	movs	r4, #12
 8003f30:	193b      	adds	r3, r7, r4
 8003f32:	0018      	movs	r0, r3
 8003f34:	2324      	movs	r3, #36	; 0x24
 8003f36:	001a      	movs	r2, r3
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f010 fbda 	bl	80146f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f3e:	003b      	movs	r3, r7
 8003f40:	0018      	movs	r0, r3
 8003f42:	230c      	movs	r3, #12
 8003f44:	001a      	movs	r2, r3
 8003f46:	2100      	movs	r1, #0
 8003f48:	f010 fbd3 	bl	80146f2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003f4e:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <MX_TIM3_Init+0xc8>)
 8003f50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8003f5e:	4b23      	ldr	r3, [pc, #140]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f64:	4b21      	ldr	r3, [pc, #132]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f70:	0021      	movs	r1, r4
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	2203      	movs	r2, #3
 8003f76:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	2201      	movs	r2, #1
 8003f82:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2200      	movs	r2, #0
 8003f94:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2201      	movs	r2, #1
 8003f9a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003fa8:	187a      	adds	r2, r7, r1
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003fac:	0011      	movs	r1, r2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f004 ff58 	bl	8008e64 <HAL_TIM_Encoder_Init>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003fb8:	f7ff fcbe 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fbc:	003b      	movs	r3, r7
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc2:	003b      	movs	r3, r7
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fc8:	003a      	movs	r2, r7
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003fcc:	0011      	movs	r1, r2
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f005 ffb6 	bl	8009f40 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd4:	1e03      	subs	r3, r0, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003fd8:	f7ff fcae 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <MX_TIM3_Init+0xc4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);//encoder on
  /* USER CODE END TIM3_Init 2 */

}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b00d      	add	sp, #52	; 0x34
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	2000347c 	.word	0x2000347c
 8003ff0:	40000400 	.word	0x40000400

08003ff4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	230c      	movs	r3, #12
 8004000:	001a      	movs	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	f010 fb75 	bl	80146f2 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004008:	4b17      	ldr	r3, [pc, #92]	; (8004068 <MX_TIM6_Init+0x74>)
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <MX_TIM6_Init+0x78>)
 800400c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6399;
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <MX_TIM6_Init+0x74>)
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <MX_TIM6_Init+0x7c>)
 8004012:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <MX_TIM6_Init+0x74>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <MX_TIM6_Init+0x74>)
 800401c:	4a15      	ldr	r2, [pc, #84]	; (8004074 <MX_TIM6_Init+0x80>)
 800401e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <MX_TIM6_Init+0x74>)
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <MX_TIM6_Init+0x74>)
 8004028:	0018      	movs	r0, r3
 800402a:	f004 fcdb 	bl	80089e4 <HAL_TIM_Base_Init>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d001      	beq.n	8004036 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004032:	f7ff fc81 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004042:	1d3a      	adds	r2, r7, #4
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <MX_TIM6_Init+0x74>)
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f005 ff79 	bl	8009f40 <HAL_TIMEx_MasterConfigSynchronization>
 800404e:	1e03      	subs	r3, r0, #0
 8004050:	d001      	beq.n	8004056 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8004052:	f7ff fc71 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <MX_TIM6_Init+0x74>)
 8004058:	0018      	movs	r0, r3
 800405a:	f004 fd69 	bl	8008b30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b004      	add	sp, #16
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	200034c8 	.word	0x200034c8
 800406c:	40001000 	.word	0x40001000
 8004070:	000018ff 	.word	0x000018ff
 8004074:	00001387 	.word	0x00001387

08004078 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	0018      	movs	r0, r3
 8004082:	230c      	movs	r3, #12
 8004084:	001a      	movs	r2, r3
 8004086:	2100      	movs	r1, #0
 8004088:	f010 fb33 	bl	80146f2 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <MX_TIM7_Init+0x7c>)
 800408e:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <MX_TIM7_Init+0x80>)
 8004090:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6399;
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <MX_TIM7_Init+0x7c>)
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <MX_TIM7_Init+0x84>)
 8004096:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <MX_TIM7_Init+0x7c>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <MX_TIM7_Init+0x7c>)
 80040a0:	2209      	movs	r2, #9
 80040a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <MX_TIM7_Init+0x7c>)
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <MX_TIM7_Init+0x7c>)
 80040ac:	0018      	movs	r0, r3
 80040ae:	f004 fc99 	bl	80089e4 <HAL_TIM_Base_Init>
 80040b2:	1e03      	subs	r3, r0, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80040b6:	f7ff fc3f 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80040c6:	1d3a      	adds	r2, r7, #4
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <MX_TIM7_Init+0x7c>)
 80040ca:	0011      	movs	r1, r2
 80040cc:	0018      	movs	r0, r3
 80040ce:	f005 ff37 	bl	8009f40 <HAL_TIMEx_MasterConfigSynchronization>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80040d6:	f7ff fc2f 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim7,TIM_IT_UPDATE);
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <MX_TIM7_Init+0x7c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	4252      	negs	r2, r2
 80040e2:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim7);
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <MX_TIM7_Init+0x7c>)
 80040e6:	0018      	movs	r0, r3
 80040e8:	f004 fd22 	bl	8008b30 <HAL_TIM_Base_Start_IT>
  //__HAL_TIM_DISABLE(&htim7);
  /* USER CODE END TIM7_Init 2 */

}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b004      	add	sp, #16
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20003514 	.word	0x20003514
 80040f8:	40001400 	.word	0x40001400
 80040fc:	000018ff 	.word	0x000018ff

08004100 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004104:	4b10      	ldr	r3, [pc, #64]	; (8004148 <MX_TIM14_Init+0x48>)
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <MX_TIM14_Init+0x4c>)
 8004108:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63999;
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <MX_TIM14_Init+0x48>)
 800410c:	4a10      	ldr	r2, [pc, #64]	; (8004150 <MX_TIM14_Init+0x50>)
 800410e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <MX_TIM14_Init+0x48>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <MX_TIM14_Init+0x48>)
 8004118:	22f4      	movs	r2, #244	; 0xf4
 800411a:	32ff      	adds	r2, #255	; 0xff
 800411c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <MX_TIM14_Init+0x48>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <MX_TIM14_Init+0x48>)
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <MX_TIM14_Init+0x48>)
 800412c:	0018      	movs	r0, r3
 800412e:	f004 fc59 	bl	80089e4 <HAL_TIM_Base_Init>
 8004132:	1e03      	subs	r3, r0, #0
 8004134:	d001      	beq.n	800413a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004136:	f7ff fbff 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
	/*check error*/
	HAL_TIM_Base_Start_IT(&htim14);
 800413a:	4b03      	ldr	r3, [pc, #12]	; (8004148 <MX_TIM14_Init+0x48>)
 800413c:	0018      	movs	r0, r3
 800413e:	f004 fcf7 	bl	8008b30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20003560 	.word	0x20003560
 800414c:	40002000 	.word	0x40002000
 8004150:	0000f9ff 	.word	0x0000f9ff

08004154 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b09c      	sub	sp, #112	; 0x70
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415a:	2360      	movs	r3, #96	; 0x60
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	0018      	movs	r0, r3
 8004160:	2310      	movs	r3, #16
 8004162:	001a      	movs	r2, r3
 8004164:	2100      	movs	r1, #0
 8004166:	f010 fac4 	bl	80146f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416a:	2354      	movs	r3, #84	; 0x54
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	0018      	movs	r0, r3
 8004170:	230c      	movs	r3, #12
 8004172:	001a      	movs	r2, r3
 8004174:	2100      	movs	r1, #0
 8004176:	f010 fabc 	bl	80146f2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800417a:	2338      	movs	r3, #56	; 0x38
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	0018      	movs	r0, r3
 8004180:	231c      	movs	r3, #28
 8004182:	001a      	movs	r2, r3
 8004184:	2100      	movs	r1, #0
 8004186:	f010 fab4 	bl	80146f2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	0018      	movs	r0, r3
 800418e:	2334      	movs	r3, #52	; 0x34
 8004190:	001a      	movs	r2, r3
 8004192:	2100      	movs	r1, #0
 8004194:	f010 faad 	bl	80146f2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004198:	4b58      	ldr	r3, [pc, #352]	; (80042fc <MX_TIM15_Init+0x1a8>)
 800419a:	4a59      	ldr	r2, [pc, #356]	; (8004300 <MX_TIM15_Init+0x1ac>)
 800419c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 800419e:	4b57      	ldr	r3, [pc, #348]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041a0:	223f      	movs	r2, #63	; 0x3f
 80041a2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a4:	4b55      	ldr	r3, [pc, #340]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80041aa:	4b54      	ldr	r3, [pc, #336]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041ac:	4a55      	ldr	r2, [pc, #340]	; (8004304 <MX_TIM15_Init+0x1b0>)
 80041ae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b0:	4b52      	ldr	r3, [pc, #328]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80041b6:	4b51      	ldr	r3, [pc, #324]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041bc:	4b4f      	ldr	r3, [pc, #316]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80041c2:	4b4e      	ldr	r3, [pc, #312]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041c4:	0018      	movs	r0, r3
 80041c6:	f004 fc0d 	bl	80089e4 <HAL_TIM_Base_Init>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80041ce:	f7ff fbb3 	bl	8003938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041d2:	2160      	movs	r1, #96	; 0x60
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	0152      	lsls	r2, r2, #5
 80041da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80041dc:	187a      	adds	r2, r7, r1
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f005 f9bc 	bl	8009560 <HAL_TIM_ConfigClockSource>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80041ec:	f7ff fba4 	bl	8003938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80041f0:	4b42      	ldr	r3, [pc, #264]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80041f2:	0018      	movs	r0, r3
 80041f4:	f004 fcf2 	bl	8008bdc <HAL_TIM_PWM_Init>
 80041f8:	1e03      	subs	r3, r0, #0
 80041fa:	d001      	beq.n	8004200 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80041fc:	f7ff fb9c 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004200:	2154      	movs	r1, #84	; 0x54
 8004202:	187b      	adds	r3, r7, r1
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800420e:	187a      	adds	r2, r7, r1
 8004210:	4b3a      	ldr	r3, [pc, #232]	; (80042fc <MX_TIM15_Init+0x1a8>)
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f005 fe93 	bl	8009f40 <HAL_TIMEx_MasterConfigSynchronization>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800421e:	f7ff fb8b 	bl	8003938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004222:	2138      	movs	r1, #56	; 0x38
 8004224:	187b      	adds	r3, r7, r1
 8004226:	2260      	movs	r2, #96	; 0x60
 8004228:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 99;
 800422a:	187b      	adds	r3, r7, r1
 800422c:	2263      	movs	r2, #99	; 0x63
 800422e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004230:	187b      	adds	r3, r7, r1
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004236:	187b      	adds	r3, r7, r1
 8004238:	2200      	movs	r2, #0
 800423a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2200      	movs	r2, #0
 8004240:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004242:	187b      	adds	r3, r7, r1
 8004244:	2200      	movs	r2, #0
 8004246:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2200      	movs	r2, #0
 800424c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800424e:	1879      	adds	r1, r7, r1
 8004250:	4b2a      	ldr	r3, [pc, #168]	; (80042fc <MX_TIM15_Init+0x1a8>)
 8004252:	2200      	movs	r2, #0
 8004254:	0018      	movs	r0, r3
 8004256:	f005 f883 	bl	8009360 <HAL_TIM_PWM_ConfigChannel>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d001      	beq.n	8004262 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800425e:	f7ff fb6b 	bl	8003938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004262:	2338      	movs	r3, #56	; 0x38
 8004264:	18f9      	adds	r1, r7, r3
 8004266:	4b25      	ldr	r3, [pc, #148]	; (80042fc <MX_TIM15_Init+0x1a8>)
 8004268:	2204      	movs	r2, #4
 800426a:	0018      	movs	r0, r3
 800426c:	f005 f878 	bl	8009360 <HAL_TIM_PWM_ConfigChannel>
 8004270:	1e03      	subs	r3, r0, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8004274:	f7ff fb60 	bl	8003938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004278:	1d3b      	adds	r3, r7, #4
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	2200      	movs	r2, #0
 800428e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	2200      	movs	r2, #0
 8004294:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	2280      	movs	r2, #128	; 0x80
 800429a:	0192      	lsls	r2, r2, #6
 800429c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042a4:	1d3b      	adds	r3, r7, #4
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80042aa:	1d3a      	adds	r2, r7, #4
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80042ae:	0011      	movs	r1, r2
 80042b0:	0018      	movs	r0, r3
 80042b2:	f005 fead 	bl	800a010 <HAL_TIMEx_ConfigBreakDeadTime>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d001      	beq.n	80042be <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 80042ba:	f7ff fb3d 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
	HAL_TIM_Base_Start(&htim15);
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80042c0:	0018      	movs	r0, r3
 80042c2:	f004 fbe7 	bl	8008a94 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 10);
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	220a      	movs	r2, #10
 80042cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 10);
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	220a      	movs	r2, #10
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80042d8:	2100      	movs	r1, #0
 80042da:	0018      	movs	r0, r3
 80042dc:	f004 fcde 	bl	8008c9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80042e2:	2104      	movs	r1, #4
 80042e4:	0018      	movs	r0, r3
 80042e6:	f004 fcd9 	bl	8008c9c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80042ea:	4b04      	ldr	r3, [pc, #16]	; (80042fc <MX_TIM15_Init+0x1a8>)
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 f9c3 	bl	8004678 <HAL_TIM_MspPostInit>

}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b01c      	add	sp, #112	; 0x70
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	200035ac 	.word	0x200035ac
 8004300:	40014000 	.word	0x40014000
 8004304:	000003e7 	.word	0x000003e7

08004308 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800430c:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <MX_TIM16_Init+0x80>)
 800430e:	4a1f      	ldr	r2, [pc, #124]	; (800438c <MX_TIM16_Init+0x84>)
 8004310:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63999;
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <MX_TIM16_Init+0x80>)
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <MX_TIM16_Init+0x88>)
 8004316:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004318:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <MX_TIM16_Init+0x80>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <MX_TIM16_Init+0x80>)
 8004320:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <MX_TIM16_Init+0x8c>)
 8004322:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <MX_TIM16_Init+0x80>)
 8004326:	2200      	movs	r2, #0
 8004328:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800432a:	4b17      	ldr	r3, [pc, #92]	; (8004388 <MX_TIM16_Init+0x80>)
 800432c:	2200      	movs	r2, #0
 800432e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004330:	4b15      	ldr	r3, [pc, #84]	; (8004388 <MX_TIM16_Init+0x80>)
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <MX_TIM16_Init+0x80>)
 8004338:	0018      	movs	r0, r3
 800433a:	f004 fb53 	bl	80089e4 <HAL_TIM_Base_Init>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d001      	beq.n	8004346 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004342:	f7ff faf9 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <MX_TIM16_Init+0x80>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2202      	movs	r2, #2
 800434c:	4252      	negs	r2, r2
 800434e:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim16,0x00);
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <MX_TIM16_Init+0x80>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim16);
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <MX_TIM16_Init+0x80>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a0e      	ldr	r2, [pc, #56]	; (8004398 <MX_TIM16_Init+0x90>)
 8004360:	4013      	ands	r3, r2
 8004362:	d10d      	bne.n	8004380 <MX_TIM16_Init+0x78>
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <MX_TIM16_Init+0x80>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <MX_TIM16_Init+0x94>)
 800436c:	4013      	ands	r3, r2
 800436e:	d107      	bne.n	8004380 <MX_TIM16_Init+0x78>
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <MX_TIM16_Init+0x80>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <MX_TIM16_Init+0x80>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2101      	movs	r1, #1
 800437c:	438a      	bics	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM16_Init 2 */

}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	200035f8 	.word	0x200035f8
 800438c:	40014400 	.word	0x40014400
 8004390:	0000f9ff 	.word	0x0000f9ff
 8004394:	00001387 	.word	0x00001387
 8004398:	00001111 	.word	0x00001111
 800439c:	00000444 	.word	0x00000444

080043a0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <MX_TIM17_Init+0x80>)
 80043a6:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <MX_TIM17_Init+0x84>)
 80043a8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6399;
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <MX_TIM17_Init+0x80>)
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <MX_TIM17_Init+0x88>)
 80043ae:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <MX_TIM17_Init+0x80>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9;
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <MX_TIM17_Init+0x80>)
 80043b8:	2209      	movs	r2, #9
 80043ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <MX_TIM17_Init+0x80>)
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80043c2:	4b17      	ldr	r3, [pc, #92]	; (8004420 <MX_TIM17_Init+0x80>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <MX_TIM17_Init+0x80>)
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <MX_TIM17_Init+0x80>)
 80043d0:	0018      	movs	r0, r3
 80043d2:	f004 fb07 	bl	80089e4 <HAL_TIM_Base_Init>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d001      	beq.n	80043de <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80043da:	f7ff faad 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim17,TIM_IT_UPDATE);
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <MX_TIM17_Init+0x80>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2202      	movs	r2, #2
 80043e4:	4252      	negs	r2, r2
 80043e6:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim17,0x00);
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <MX_TIM17_Init+0x80>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim17);
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <MX_TIM17_Init+0x80>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4a0d      	ldr	r2, [pc, #52]	; (800442c <MX_TIM17_Init+0x8c>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	d10d      	bne.n	8004418 <MX_TIM17_Init+0x78>
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <MX_TIM17_Init+0x80>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <MX_TIM17_Init+0x90>)
 8004404:	4013      	ands	r3, r2
 8004406:	d107      	bne.n	8004418 <MX_TIM17_Init+0x78>
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <MX_TIM17_Init+0x80>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <MX_TIM17_Init+0x80>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2101      	movs	r1, #1
 8004414:	438a      	bics	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM17_Init 2 */

}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	20003644 	.word	0x20003644
 8004424:	40014800 	.word	0x40014800
 8004428:	000018ff 	.word	0x000018ff
 800442c:	00001111 	.word	0x00001111
 8004430:	00000444 	.word	0x00000444

08004434 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5c      	ldr	r2, [pc, #368]	; (80045b4 <HAL_TIM_Base_MspInit+0x180>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d116      	bne.n	8004474 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004446:	4b5c      	ldr	r3, [pc, #368]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0109      	lsls	r1, r1, #4
 8004450:	430a      	orrs	r2, r1
 8004452:	641a      	str	r2, [r3, #64]	; 0x40
 8004454:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	4013      	ands	r3, r2
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8004462:	2200      	movs	r2, #0
 8004464:	2100      	movs	r1, #0
 8004466:	200d      	movs	r0, #13
 8004468:	f002 f888 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800446c:	200d      	movs	r0, #13
 800446e:	f002 f89a 	bl	80065a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004472:	e09a      	b.n	80045aa <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a50      	ldr	r2, [pc, #320]	; (80045bc <HAL_TIM_Base_MspInit+0x188>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d114      	bne.n	80044a8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800447e:	4b4e      	ldr	r3, [pc, #312]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004482:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004484:	2110      	movs	r1, #16
 8004486:	430a      	orrs	r2, r1
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c
 800448a:	4b4b      	ldr	r3, [pc, #300]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	2210      	movs	r2, #16
 8004490:	4013      	ands	r3, r2
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	2011      	movs	r0, #17
 800449c:	f002 f86e 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80044a0:	2011      	movs	r0, #17
 80044a2:	f002 f880 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 80044a6:	e080      	b.n	80045aa <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a44      	ldr	r2, [pc, #272]	; (80045c0 <HAL_TIM_Base_MspInit+0x18c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d114      	bne.n	80044dc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80044b2:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 80044b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b6:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 80044b8:	2120      	movs	r1, #32
 80044ba:	430a      	orrs	r2, r1
 80044bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	2220      	movs	r2, #32
 80044c4:	4013      	ands	r3, r2
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80044ca:	2200      	movs	r2, #0
 80044cc:	2100      	movs	r1, #0
 80044ce:	2012      	movs	r0, #18
 80044d0:	f002 f854 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80044d4:	2012      	movs	r0, #18
 80044d6:	f002 f866 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 80044da:	e066      	b.n	80045aa <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM14)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a38      	ldr	r2, [pc, #224]	; (80045c4 <HAL_TIM_Base_MspInit+0x190>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d116      	bne.n	8004514 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 80044e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ea:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	0209      	lsls	r1, r1, #8
 80044f0:	430a      	orrs	r2, r1
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
 80044f4:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 80044f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004502:	2200      	movs	r2, #0
 8004504:	2100      	movs	r1, #0
 8004506:	2013      	movs	r0, #19
 8004508:	f002 f838 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800450c:	2013      	movs	r0, #19
 800450e:	f002 f84a 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 8004512:	e04a      	b.n	80045aa <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2b      	ldr	r2, [pc, #172]	; (80045c8 <HAL_TIM_Base_MspInit+0x194>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10e      	bne.n	800453c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800451e:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004522:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	0249      	lsls	r1, r1, #9
 8004528:	430a      	orrs	r2, r1
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 800452e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	025b      	lsls	r3, r3, #9
 8004534:	4013      	ands	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	697b      	ldr	r3, [r7, #20]
}
 800453a:	e036      	b.n	80045aa <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a22      	ldr	r2, [pc, #136]	; (80045cc <HAL_TIM_Base_MspInit+0x198>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d116      	bne.n	8004574 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	0289      	lsls	r1, r1, #10
 8004550:	430a      	orrs	r2, r1
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004562:	2200      	movs	r2, #0
 8004564:	2100      	movs	r1, #0
 8004566:	2015      	movs	r0, #21
 8004568:	f002 f808 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800456c:	2015      	movs	r0, #21
 800456e:	f002 f81a 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 8004572:	e01a      	b.n	80045aa <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_TIM_Base_MspInit+0x19c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d115      	bne.n	80045aa <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800457e:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	02c9      	lsls	r1, r1, #11
 8004588:	430a      	orrs	r2, r1
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_TIM_Base_MspInit+0x184>)
 800458e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	02db      	lsls	r3, r3, #11
 8004594:	4013      	ands	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	2016      	movs	r0, #22
 80045a0:	f001 ffec 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80045a4:	2016      	movs	r0, #22
 80045a6:	f001 fffe 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b00a      	add	sp, #40	; 0x28
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	40012c00 	.word	0x40012c00
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40001000 	.word	0x40001000
 80045c0:	40001400 	.word	0x40001400
 80045c4:	40002000 	.word	0x40002000
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b08b      	sub	sp, #44	; 0x2c
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	2414      	movs	r4, #20
 80045de:	193b      	adds	r3, r7, r4
 80045e0:	0018      	movs	r0, r3
 80045e2:	2314      	movs	r3, #20
 80045e4:	001a      	movs	r2, r3
 80045e6:	2100      	movs	r1, #0
 80045e8:	f010 f883 	bl	80146f2 <memset>
  if(tim_encoderHandle->Instance==TIM3)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <HAL_TIM_Encoder_MspInit+0x98>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d135      	bne.n	8004662 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_TIM_Encoder_MspInit+0x9c>)
 80045f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_TIM_Encoder_MspInit+0x9c>)
 80045fc:	2102      	movs	r1, #2
 80045fe:	430a      	orrs	r2, r1
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	2202      	movs	r2, #2
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004612:	4b17      	ldr	r3, [pc, #92]	; (8004670 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004614:	2104      	movs	r1, #4
 8004616:	430a      	orrs	r2, r1
 8004618:	635a      	str	r2, [r3, #52]	; 0x34
 800461a:	4b15      	ldr	r3, [pc, #84]	; (8004670 <HAL_TIM_Encoder_MspInit+0x9c>)
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	2204      	movs	r2, #4
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004626:	0021      	movs	r1, r4
 8004628:	187b      	adds	r3, r7, r1
 800462a:	22c0      	movs	r2, #192	; 0xc0
 800462c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462e:	187b      	adds	r3, r7, r1
 8004630:	2202      	movs	r2, #2
 8004632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	187b      	adds	r3, r7, r1
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463a:	187b      	adds	r3, r7, r1
 800463c:	2200      	movs	r2, #0
 800463e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004640:	187b      	adds	r3, r7, r1
 8004642:	2201      	movs	r2, #1
 8004644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004646:	187b      	adds	r3, r7, r1
 8004648:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <HAL_TIM_Encoder_MspInit+0xa0>)
 800464a:	0019      	movs	r1, r3
 800464c:	0010      	movs	r0, r2
 800464e:	f002 faef 	bl	8006c30 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004652:	2200      	movs	r2, #0
 8004654:	2100      	movs	r1, #0
 8004656:	2010      	movs	r0, #16
 8004658:	f001 ff90 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800465c:	2010      	movs	r0, #16
 800465e:	f001 ffa2 	bl	80065a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b00b      	add	sp, #44	; 0x2c
 8004668:	bd90      	pop	{r4, r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	40000400 	.word	0x40000400
 8004670:	40021000 	.word	0x40021000
 8004674:	50000800 	.word	0x50000800

08004678 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	240c      	movs	r4, #12
 8004682:	193b      	adds	r3, r7, r4
 8004684:	0018      	movs	r0, r3
 8004686:	2314      	movs	r3, #20
 8004688:	001a      	movs	r2, r3
 800468a:	2100      	movs	r1, #0
 800468c:	f010 f831 	bl	80146f2 <memset>
  if(timHandle->Instance==TIM15)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <HAL_TIM_MspPostInit+0x70>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469a:	4b14      	ldr	r3, [pc, #80]	; (80046ec <HAL_TIM_MspPostInit+0x74>)
 800469c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_TIM_MspPostInit+0x74>)
 80046a0:	2102      	movs	r1, #2
 80046a2:	430a      	orrs	r2, r1
 80046a4:	635a      	str	r2, [r3, #52]	; 0x34
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_TIM_MspPostInit+0x74>)
 80046a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046aa:	2202      	movs	r2, #2
 80046ac:	4013      	ands	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = FAN_CRTL1_Pin|FAN_CTRL2_Pin;
 80046b2:	193b      	adds	r3, r7, r4
 80046b4:	22c0      	movs	r2, #192	; 0xc0
 80046b6:	0212      	lsls	r2, r2, #8
 80046b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	0021      	movs	r1, r4
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	2202      	movs	r2, #2
 80046c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	2200      	movs	r2, #0
 80046c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	2200      	movs	r2, #0
 80046cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	2205      	movs	r2, #5
 80046d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <HAL_TIM_MspPostInit+0x78>)
 80046d8:	0019      	movs	r1, r3
 80046da:	0010      	movs	r0, r2
 80046dc:	f002 faa8 	bl	8006c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b009      	add	sp, #36	; 0x24
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40021000 	.word	0x40021000
 80046f0:	50000400 	.word	0x50000400

080046f4 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

/**********************************************************soft start**********************************************************/
	if(htim==&htim1)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4bb2      	ldr	r3, [pc, #712]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004700:	429a      	cmp	r2, r3
 8004702:	d000      	beq.n	8004706 <HAL_TIM_PeriodElapsedCallback+0x12>
 8004704:	e0b2      	b.n	800486c <HAL_TIM_PeriodElapsedCallback+0x178>
	{
		keys_EN = ENABLE;//ENABLE按键
 8004706:	4bb1      	ldr	r3, [pc, #708]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004708:	2201      	movs	r2, #1
 800470a:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_ENABLE(&htim3);
 800470c:	4bb0      	ldr	r3, [pc, #704]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4baf      	ldr	r3, [pc, #700]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	430a      	orrs	r2, r1
 800471a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800471c:	4bac      	ldr	r3, [pc, #688]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	4bab      	ldr	r3, [pc, #684]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2101      	movs	r1, #1
 8004728:	430a      	orrs	r2, r1
 800472a:	60da      	str	r2, [r3, #12]
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800472c:	4ba8      	ldr	r3, [pc, #672]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800472e:	213c      	movs	r1, #60	; 0x3c
 8004730:	0018      	movs	r0, r3
 8004732:	f004 fc3f 	bl	8008fb4 <HAL_TIM_Encoder_Start>
		Power_AC_On;	 //time to soft start
 8004736:	4ba7      	ldr	r3, [pc, #668]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004738:	2201      	movs	r2, #1
 800473a:	2120      	movs	r1, #32
 800473c:	0018      	movs	r0, r3
 800473e:	f002 fbf8 	bl	8006f32 <HAL_GPIO_WritePin>

		/*OVP*/
		if(Voltage_Actual> 150)
 8004742:	4ba5      	ldr	r3, [pc, #660]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	49a5      	ldr	r1, [pc, #660]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004748:	1c18      	adds	r0, r3, #0
 800474a:	f7fb fed9 	bl	8000500 <__aeabi_fcmpgt>
 800474e:	1e03      	subs	r3, r0, #0
 8004750:	d01e      	beq.n	8004790 <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			ON_OFF = OFF;
 8004752:	4ba3      	ldr	r3, [pc, #652]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8004758:	4ba2      	ldr	r3, [pc, #648]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 800475e:	2200      	movs	r2, #0
 8004760:	2108      	movs	r1, #8
 8004762:	2001      	movs	r0, #1
 8004764:	f008 f83c 	bl	800c7e0 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 8004768:	f00d f970 	bl	8011a4c <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 800476c:	f00d f9e2 	bl	8011b34 <TIM17_CYCLE_OFF>
			Error |= OVP;
 8004770:	4b9d      	ldr	r3, [pc, #628]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4313      	orrs	r3, r2
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b9b      	ldr	r3, [pc, #620]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800477c:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 800477e:	4b9b      	ldr	r3, [pc, #620]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004780:	2204      	movs	r2, #4
 8004782:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8004784:	4b99      	ldr	r3, [pc, #612]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004786:	2201      	movs	r2, #1
 8004788:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 800478a:	4b98      	ldr	r3, [pc, #608]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800478c:	2201      	movs	r2, #1
 800478e:	609a      	str	r2, [r3, #8]
		}
		/*OCP*/
		if(Current_Actual > 50)
 8004790:	4b97      	ldr	r3, [pc, #604]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4997      	ldr	r1, [pc, #604]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004796:	1c18      	adds	r0, r3, #0
 8004798:	f7fb feb2 	bl	8000500 <__aeabi_fcmpgt>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d01e      	beq.n	80047de <HAL_TIM_PeriodElapsedCallback+0xea>
		{
			ON_OFF = OFF;
 80047a0:	4b8f      	ldr	r3, [pc, #572]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 80047a6:	4b8f      	ldr	r3, [pc, #572]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 80047ac:	2200      	movs	r2, #0
 80047ae:	2108      	movs	r1, #8
 80047b0:	2001      	movs	r0, #1
 80047b2:	f008 f815 	bl	800c7e0 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 80047b6:	f00d f949 	bl	8011a4c <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 80047ba:	f00d f9bb 	bl	8011b34 <TIM17_CYCLE_OFF>
			Error |= OCP;
 80047be:	4b8a      	ldr	r3, [pc, #552]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2202      	movs	r2, #2
 80047c4:	4313      	orrs	r3, r2
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b87      	ldr	r3, [pc, #540]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80047ca:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 80047cc:	4b87      	ldr	r3, [pc, #540]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80047ce:	2204      	movs	r2, #4
 80047d0:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 80047d2:	4b86      	ldr	r3, [pc, #536]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 80047d8:	4b84      	ldr	r3, [pc, #528]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80047da:	2201      	movs	r2, #1
 80047dc:	609a      	str	r2, [r3, #8]
		}
		/*OPP*/
		if(Current_Actual*Voltage_Actual>7500)
 80047de:	4b84      	ldr	r3, [pc, #528]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b7d      	ldr	r3, [pc, #500]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	1c19      	adds	r1, r3, #0
 80047e8:	1c10      	adds	r0, r2, #0
 80047ea:	f7fc fa39 	bl	8000c60 <__aeabi_fmul>
 80047ee:	1c03      	adds	r3, r0, #0
 80047f0:	4981      	ldr	r1, [pc, #516]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80047f2:	1c18      	adds	r0, r3, #0
 80047f4:	f7fb fe84 	bl	8000500 <__aeabi_fcmpgt>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d01e      	beq.n	800483a <HAL_TIM_PeriodElapsedCallback+0x146>
		{
			ON_OFF = OFF;
 80047fc:	4b78      	ldr	r3, [pc, #480]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8004802:	4b78      	ldr	r3, [pc, #480]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 8004808:	2200      	movs	r2, #0
 800480a:	2108      	movs	r1, #8
 800480c:	2001      	movs	r0, #1
 800480e:	f007 ffe7 	bl	800c7e0 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 8004812:	f00d f91b 	bl	8011a4c <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 8004816:	f00d f98d 	bl	8011b34 <TIM17_CYCLE_OFF>
			Error |= OCP;
 800481a:	4b73      	ldr	r3, [pc, #460]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2202      	movs	r2, #2
 8004820:	4313      	orrs	r3, r2
 8004822:	b2da      	uxtb	r2, r3
 8004824:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004826:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 8004828:	4b70      	ldr	r3, [pc, #448]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800482a:	2204      	movs	r2, #4
 800482c:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800482e:	4b6f      	ldr	r3, [pc, #444]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004830:	2201      	movs	r2, #1
 8004832:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8004834:	4b6d      	ldr	r3, [pc, #436]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004836:	2201      	movs	r2, #1
 8004838:	609a      	str	r2, [r3, #8]
		}
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2202      	movs	r2, #2
 8004840:	4252      	negs	r2, r2
 8004842:	611a      	str	r2, [r3, #16]
		__HAL_TIM_DISABLE(&htim1);
 8004844:	4b60      	ldr	r3, [pc, #384]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4a6c      	ldr	r2, [pc, #432]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x308>)
 800484c:	4013      	ands	r3, r2
 800484e:	d10d      	bne.n	800486c <HAL_TIM_PeriodElapsedCallback+0x178>
 8004850:	4b5d      	ldr	r3, [pc, #372]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4a6a      	ldr	r2, [pc, #424]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004858:	4013      	ands	r3, r2
 800485a:	d107      	bne.n	800486c <HAL_TIM_PeriodElapsedCallback+0x178>
 800485c:	4b5a      	ldr	r3, [pc, #360]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2101      	movs	r1, #1
 8004868:	438a      	bics	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

	}
/*********************************************************key scan 1ms********************************************************/
	if(htim==&htim7)
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d106      	bne.n	8004882 <HAL_TIM_PeriodElapsedCallback+0x18e>
	{
		Flag.TIM7_IT=1;
 8004874:	4b64      	ldr	r3, [pc, #400]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004876:	2201      	movs	r2, #1
 8004878:	605a      	str	r2, [r3, #4]
		key_scan();
 800487a:	f00c fd61 	bl	8011340 <key_scan>
		Encoder_Enter_Handle();
 800487e:	f009 fcef 	bl	800e260 <Encoder_Enter_Handle>

	}
/********************************************************** encoder **********************************************************/
	if(htim==&htim3)
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4b52      	ldr	r3, [pc, #328]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004886:	429a      	cmp	r2, r3
 8004888:	d11f      	bne.n	80048ca <HAL_TIM_PeriodElapsedCallback+0x1d6>
	{
		Flag.TIM3_IT=1;
 800488a:	4b5f      	ldr	r3, [pc, #380]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800488c:	2201      	movs	r2, #1
 800488e:	609a      	str	r2, [r3, #8]
		static int count;

		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==1)
 8004890:	4b4f      	ldr	r3, [pc, #316]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2210      	movs	r2, #16
 8004898:	4013      	ands	r3, r2
 800489a:	2b10      	cmp	r3, #16
 800489c:	d104      	bne.n	80048a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		{
			count=-1;
 800489e:	4b5b      	ldr	r3, [pc, #364]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	4252      	negs	r2, r2
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e009      	b.n	80048bc <HAL_TIM_PeriodElapsedCallback+0x1c8>

		}
		else if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==0)
 80048a8:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2210      	movs	r2, #16
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d002      	beq.n	80048bc <HAL_TIM_PeriodElapsedCallback+0x1c8>
		{
			count=1;
 80048b6:	4b55      	ldr	r3, [pc, #340]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

		}
		Flag.Encoder_BF+=count;
 80048bc:	4b52      	ldr	r3, [pc, #328]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	4b52      	ldr	r3, [pc, #328]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	18d2      	adds	r2, r2, r3
 80048c6:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80048c8:	61da      	str	r2, [r3, #28]

	}
/**********************************************************cursor flash********************************************************/
	if(htim==&htim6)
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4b50      	ldr	r3, [pc, #320]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d102      	bne.n	80048d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
	{
		Flag.TIM6_IT=1;
 80048d2:	4b4d      	ldr	r3, [pc, #308]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	60da      	str	r2, [r3, #12]
	}
/**********************************************************暂时没用到***********************************************************/
	if(htim==&htim14)
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4b4e      	ldr	r3, [pc, #312]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80048dc:	429a      	cmp	r2, r3
 80048de:	d102      	bne.n	80048e6 <HAL_TIM_PeriodElapsedCallback+0x1f2>
	{
		Flag.TIM14_IT=1;
 80048e0:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	621a      	str	r2, [r3, #32]

	}
/**********************************************************Delay Function*******************************************************/
	if(htim==&htim16)
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4b4b      	ldr	r3, [pc, #300]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d116      	bne.n	800491c <HAL_TIM_PeriodElapsedCallback+0x228>
	{

		TIM16_DELAY_OFF();//到时间了,关闭延时功能
 80048ee:	f00d f8ad 	bl	8011a4c <TIM16_DELAY_OFF>

		if(Cycle_Function_On_Off == Cycle_Function_On)     //打开了循环功能，调用循环函数
 80048f2:	4b4a      	ldr	r3, [pc, #296]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d102      	bne.n	8004900 <HAL_TIM_PeriodElapsedCallback+0x20c>
		{
			TIM17_CYCLE_ON();
 80048fa:	f00d f8cb 	bl	8011a94 <TIM17_CYCLE_ON>
 80048fe:	e008      	b.n	8004912 <HAL_TIM_PeriodElapsedCallback+0x21e>
		}
		else if(Cycle_Function_On_Off == Cycle_Function_Off)
 8004900:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PeriodElapsedCallback+0x21e>
		{
			ON_OFF =ON;
 8004908:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
			power_on();
 800490e:	f008 f841 	bl	800c994 <power_on>
		}

		__HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2202      	movs	r2, #2
 8004918:	4252      	negs	r2, r2
 800491a:	611a      	str	r2, [r3, #16]

	}
/**********************************************************Cycle Function*******************************************************/
	if(htim==&htim17)
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004920:	429a      	cmp	r2, r3
 8004922:	d14d      	bne.n	80049c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
	{

		Flag.TIM17_IT=1;
 8004924:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004926:	2201      	movs	r2, #1
 8004928:	611a      	str	r2, [r3, #16]

		if(OUTPUT_NOT_OUTPUT == OUTPUT)
 800492a:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d146      	bne.n	80049c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		{
			if(ON_OFF == ON)
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d11f      	bne.n	800497a <HAL_TIM_PeriodElapsedCallback+0x286>
			{
				if(Cycle_On_Time > 0) Cycle_On_Time --;
 800493a:	4b3a      	ldr	r3, [pc, #232]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_TIM_PeriodElapsedCallback+0x25a>
 8004942:	4b38      	ldr	r3, [pc, #224]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800494a:	601a      	str	r2, [r3, #0]

	}

/************************************************************* End *************************************************************/

}
 800494c:	e038      	b.n	80049c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
					Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	001a      	movs	r2, r3
 8004954:	0013      	movs	r3, r2
 8004956:	015b      	lsls	r3, r3, #5
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	189b      	adds	r3, r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	001a      	movs	r2, r3
 8004962:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	18d3      	adds	r3, r2, r3
 8004968:	001a      	movs	r2, r3
 800496a:	4b2e      	ldr	r3, [pc, #184]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800496c:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=0;
 800496e:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004970:	2200      	movs	r2, #0
 8004972:	615a      	str	r2, [r3, #20]
					power_off();
 8004974:	f008 f81e 	bl	800c9b4 <power_off>
}
 8004978:	e022      	b.n	80049c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
			else if(ON_OFF == OFF)
 800497a:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11e      	bne.n	80049c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
				if(Cycle_Close_Time >0) Cycle_Close_Time --;
 8004982:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_TIM_PeriodElapsedCallback+0x2a2>
 800498a:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1e5a      	subs	r2, r3, #1
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	e014      	b.n	80049c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
					Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms );
 8004996:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	001a      	movs	r2, r3
 800499c:	0013      	movs	r3, r2
 800499e:	015b      	lsls	r3, r3, #5
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	189b      	adds	r3, r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	001a      	movs	r2, r3
 80049aa:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	18d3      	adds	r3, r2, r3
 80049b0:	001a      	movs	r2, r3
 80049b2:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80049b4:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=1;
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	615a      	str	r2, [r3, #20]
					power_on();
 80049bc:	f007 ffea 	bl	800c994 <power_on>
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20003430 	.word	0x20003430
 80049cc:	20003985 	.word	0x20003985
 80049d0:	2000347c 	.word	0x2000347c
 80049d4:	50000800 	.word	0x50000800
 80049d8:	2000399c 	.word	0x2000399c
 80049dc:	43160000 	.word	0x43160000
 80049e0:	20003988 	.word	0x20003988
 80049e4:	20003989 	.word	0x20003989
 80049e8:	200039d9 	.word	0x200039d9
 80049ec:	200039f4 	.word	0x200039f4
 80049f0:	200039a0 	.word	0x200039a0
 80049f4:	42480000 	.word	0x42480000
 80049f8:	45ea6000 	.word	0x45ea6000
 80049fc:	00001111 	.word	0x00001111
 8004a00:	00000444 	.word	0x00000444
 8004a04:	20003514 	.word	0x20003514
 8004a08:	20003384 	.word	0x20003384
 8004a0c:	20003690 	.word	0x20003690
 8004a10:	200034c8 	.word	0x200034c8
 8004a14:	20003560 	.word	0x20003560
 8004a18:	200035f8 	.word	0x200035f8
 8004a1c:	200039e0 	.word	0x200039e0
 8004a20:	20003644 	.word	0x20003644
 8004a24:	200039e4 	.word	0x200039e4
 8004a28:	20003990 	.word	0x20003990
 8004a2c:	20002fd4 	.word	0x20002fd4
 8004a30:	200039e8 	.word	0x200039e8
 8004a34:	20003992 	.word	0x20003992
 8004a38:	20002fd6 	.word	0x20002fd6

08004a3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a42:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <MX_USART1_UART_Init+0x98>)
 8004a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a48:	22e1      	movs	r2, #225	; 0xe1
 8004a4a:	0252      	lsls	r2, r2, #9
 8004a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a54:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a62:	220c      	movs	r2, #12
 8004a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a86:	0018      	movs	r0, r3
 8004a88:	f005 fb80 	bl	800a18c <HAL_UART_Init>
 8004a8c:	1e03      	subs	r3, r0, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004a90:	f7fe ff52 	bl	8003938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004a96:	2100      	movs	r1, #0
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f007 f919 	bl	800bcd0 <HAL_UARTEx_SetTxFifoThreshold>
 8004a9e:	1e03      	subs	r3, r0, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004aa2:	f7fe ff49 	bl	8003938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f007 f950 	bl	800bd50 <HAL_UARTEx_SetRxFifoThreshold>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d001      	beq.n	8004ab8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ab4:	f7fe ff40 	bl	8003938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <MX_USART1_UART_Init+0x94>)
 8004aba:	0018      	movs	r0, r3
 8004abc:	f007 f8ce 	bl	800bc5c <HAL_UARTEx_DisableFifoMode>
 8004ac0:	1e03      	subs	r3, r0, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004ac4:	f7fe ff38 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	200036ac 	.word	0x200036ac
 8004ad4:	40013800 	.word	0x40013800

08004ad8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <MX_USART2_UART_Init+0xa0>)
 8004ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004ae4:	22e1      	movs	r2, #225	; 0xe1
 8004ae6:	0252      	lsls	r2, r2, #9
 8004ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004aea:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004afe:	220c      	movs	r2, #12
 8004b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b0e:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b14:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b1a:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b22:	0018      	movs	r0, r3
 8004b24:	f005 fb32 	bl	800a18c <HAL_UART_Init>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004b2c:	f7fe ff04 	bl	8003938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b32:	2100      	movs	r1, #0
 8004b34:	0018      	movs	r0, r3
 8004b36:	f007 f8cb 	bl	800bcd0 <HAL_UARTEx_SetTxFifoThreshold>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004b3e:	f7fe fefb 	bl	8003938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b44:	2100      	movs	r1, #0
 8004b46:	0018      	movs	r0, r3
 8004b48:	f007 f902 	bl	800bd50 <HAL_UARTEx_SetRxFifoThreshold>
 8004b4c:	1e03      	subs	r3, r0, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b50:	f7fe fef2 	bl	8003938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b56:	0018      	movs	r0, r3
 8004b58:	f007 f880 	bl	800bc5c <HAL_UARTEx_DisableFifoMode>
 8004b5c:	1e03      	subs	r3, r0, #0
 8004b5e:	d001      	beq.n	8004b64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b60:	f7fe feea 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  __HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <MX_USART2_UART_Init+0x9c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	621a      	str	r2, [r3, #32]
  /* USER CODE END USART2_Init 2 */

}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	20003740 	.word	0x20003740
 8004b78:	40004400 	.word	0x40004400

08004b7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <MX_USART3_UART_Init+0x68>)
 8004b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b86:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b88:	22e1      	movs	r2, #225	; 0xe1
 8004b8a:	0252      	lsls	r2, r2, #9
 8004b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b94:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b9a:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004bc4:	4806      	ldr	r0, [pc, #24]	; (8004be0 <MX_USART3_UART_Init+0x64>)
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f006 ffbc 	bl	800bb48 <HAL_RS485Ex_Init>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8004bd4:	f7fe feb0 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	200037d4 	.word	0x200037d4
 8004be4:	40004800 	.word	0x40004800

08004be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b097      	sub	sp, #92	; 0x5c
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	2344      	movs	r3, #68	; 0x44
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	2314      	movs	r3, #20
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	f00f fd79 	bl	80146f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c00:	2428      	movs	r4, #40	; 0x28
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	0018      	movs	r0, r3
 8004c06:	231c      	movs	r3, #28
 8004c08:	001a      	movs	r2, r3
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	f00f fd71 	bl	80146f2 <memset>
  if(uartHandle->Instance==USART1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4abb      	ldr	r2, [pc, #748]	; (8004f04 <HAL_UART_MspInit+0x31c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d148      	bne.n	8004cac <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f002 fea5 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c32:	f7fe fe81 	bl	8003938 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c36:	4bb4      	ldr	r3, [pc, #720]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3a:	4bb3      	ldr	r3, [pc, #716]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	01c9      	lsls	r1, r1, #7
 8004c40:	430a      	orrs	r2, r1
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
 8004c44:	4bb0      	ldr	r3, [pc, #704]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	01db      	lsls	r3, r3, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c52:	4bad      	ldr	r3, [pc, #692]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c56:	4bac      	ldr	r3, [pc, #688]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c5e:	4baa      	ldr	r3, [pc, #680]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	2201      	movs	r2, #1
 8004c64:	4013      	ands	r3, r2
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c6a:	2144      	movs	r1, #68	; 0x44
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	22c0      	movs	r2, #192	; 0xc0
 8004c70:	00d2      	lsls	r2, r2, #3
 8004c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	2202      	movs	r2, #2
 8004c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	2200      	movs	r2, #0
 8004c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	2201      	movs	r2, #1
 8004c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	187a      	adds	r2, r7, r1
 8004c8e:	23a0      	movs	r3, #160	; 0xa0
 8004c90:	05db      	lsls	r3, r3, #23
 8004c92:	0011      	movs	r1, r2
 8004c94:	0018      	movs	r0, r3
 8004c96:	f001 ffcb 	bl	8006c30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	201b      	movs	r0, #27
 8004ca0:	f001 fc6c 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ca4:	201b      	movs	r0, #27
 8004ca6:	f001 fc7e 	bl	80065a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004caa:	e127      	b.n	8004efc <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a96      	ldr	r2, [pc, #600]	; (8004f0c <HAL_UART_MspInit+0x324>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d173      	bne.n	8004d9e <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004cb6:	2128      	movs	r1, #40	; 0x28
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	2202      	movs	r2, #2
 8004cbc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f002 fe56 	bl	8007978 <HAL_RCCEx_PeriphCLKConfig>
 8004ccc:	1e03      	subs	r3, r0, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8004cd0:	f7fe fe32 	bl	8003938 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cd4:	4b8c      	ldr	r3, [pc, #560]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd8:	4b8b      	ldr	r3, [pc, #556]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	0289      	lsls	r1, r1, #10
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ce2:	4b89      	ldr	r3, [pc, #548]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	4013      	ands	r3, r2
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf0:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf4:	4b84      	ldr	r3, [pc, #528]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	635a      	str	r2, [r3, #52]	; 0x34
 8004cfc:	4b82      	ldr	r3, [pc, #520]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	2201      	movs	r2, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = miniboard1_Pin|miniboard2_Pin;
 8004d08:	2144      	movs	r1, #68	; 0x44
 8004d0a:	187b      	adds	r3, r7, r1
 8004d0c:	220c      	movs	r2, #12
 8004d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	2202      	movs	r2, #2
 8004d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	2200      	movs	r2, #0
 8004d1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	2201      	movs	r2, #1
 8004d26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d28:	187a      	adds	r2, r7, r1
 8004d2a:	23a0      	movs	r3, #160	; 0xa0
 8004d2c:	05db      	lsls	r3, r3, #23
 8004d2e:	0011      	movs	r1, r2
 8004d30:	0018      	movs	r0, r3
 8004d32:	f001 ff7d 	bl	8006c30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004d36:	4b76      	ldr	r3, [pc, #472]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d38:	4a76      	ldr	r2, [pc, #472]	; (8004f14 <HAL_UART_MspInit+0x32c>)
 8004d3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004d3c:	4b74      	ldr	r3, [pc, #464]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d3e:	2234      	movs	r2, #52	; 0x34
 8004d40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d42:	4b73      	ldr	r3, [pc, #460]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d48:	4b71      	ldr	r3, [pc, #452]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d4e:	4b70      	ldr	r3, [pc, #448]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d54:	4b6e      	ldr	r3, [pc, #440]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d5a:	4b6d      	ldr	r3, [pc, #436]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d60:	4b6b      	ldr	r3, [pc, #428]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d66:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	0152      	lsls	r2, r2, #5
 8004d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d6e:	4b68      	ldr	r3, [pc, #416]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d70:	0018      	movs	r0, r3
 8004d72:	f001 fc35 	bl	80065e0 <HAL_DMA_Init>
 8004d76:	1e03      	subs	r3, r0, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8004d7a:	f7fe fddd 	bl	8003938 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	4a63      	ldr	r2, [pc, #396]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d84:	505a      	str	r2, [r3, r1]
 8004d86:	4b62      	ldr	r3, [pc, #392]	; (8004f10 <HAL_UART_MspInit+0x328>)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	201c      	movs	r0, #28
 8004d92:	f001 fbf3 	bl	800657c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d96:	201c      	movs	r0, #28
 8004d98:	f001 fc05 	bl	80065a6 <HAL_NVIC_EnableIRQ>
}
 8004d9c:	e0ae      	b.n	8004efc <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART3)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <HAL_UART_MspInit+0x330>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d000      	beq.n	8004daa <HAL_UART_MspInit+0x1c2>
 8004da8:	e0a8      	b.n	8004efc <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004daa:	4b57      	ldr	r3, [pc, #348]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dae:	4b56      	ldr	r3, [pc, #344]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004db0:	2180      	movs	r1, #128	; 0x80
 8004db2:	02c9      	lsls	r1, r1, #11
 8004db4:	430a      	orrs	r2, r1
 8004db6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004db8:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	02db      	lsls	r3, r3, #11
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc6:	4b50      	ldr	r3, [pc, #320]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dcc:	2101      	movs	r1, #1
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8004dd2:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dde:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de2:	4b49      	ldr	r3, [pc, #292]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004de4:	2102      	movs	r1, #2
 8004de6:	430a      	orrs	r2, r1
 8004de8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dea:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_UART_MspInit+0x320>)
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	2202      	movs	r2, #2
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004df6:	2144      	movs	r1, #68	; 0x44
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	2280      	movs	r2, #128	; 0x80
 8004dfc:	0212      	lsls	r2, r2, #8
 8004dfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e00:	000c      	movs	r4, r1
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	2202      	movs	r2, #2
 8004e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	2200      	movs	r2, #0
 8004e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART3;
 8004e14:	193b      	adds	r3, r7, r4
 8004e16:	2205      	movs	r2, #5
 8004e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1a:	193a      	adds	r2, r7, r4
 8004e1c:	23a0      	movs	r3, #160	; 0xa0
 8004e1e:	05db      	lsls	r3, r3, #23
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f001 ff04 	bl	8006c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e28:	0021      	movs	r1, r4
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	22c0      	movs	r2, #192	; 0xc0
 8004e2e:	0092      	lsls	r2, r2, #2
 8004e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	2202      	movs	r2, #2
 8004e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3e:	187b      	adds	r3, r7, r1
 8004e40:	2200      	movs	r2, #0
 8004e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	2204      	movs	r2, #4
 8004e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	4a33      	ldr	r2, [pc, #204]	; (8004f1c <HAL_UART_MspInit+0x334>)
 8004e4e:	0019      	movs	r1, r3
 8004e50:	0010      	movs	r0, r2
 8004e52:	f001 feed 	bl	8006c30 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel4;
 8004e56:	4b32      	ldr	r3, [pc, #200]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e58:	4a32      	ldr	r2, [pc, #200]	; (8004f24 <HAL_UART_MspInit+0x33c>)
 8004e5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004e5c:	4b30      	ldr	r3, [pc, #192]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e5e:	2236      	movs	r2, #54	; 0x36
 8004e60:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e68:	4b2d      	ldr	r3, [pc, #180]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e6e:	4b2c      	ldr	r3, [pc, #176]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f001 fba6 	bl	80065e0 <HAL_DMA_Init>
 8004e94:	1e03      	subs	r3, r0, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8004e98:	f7fe fd4e 	bl	8003938 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2180      	movs	r1, #128	; 0x80
 8004ea0:	4a1f      	ldr	r2, [pc, #124]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004ea2:	505a      	str	r2, [r3, r1]
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <HAL_UART_MspInit+0x338>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel5;
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <HAL_UART_MspInit+0x344>)
 8004eae:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eb2:	2237      	movs	r2, #55	; 0x37
 8004eb4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eb8:	2210      	movs	r2, #16
 8004eba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ec4:	2280      	movs	r2, #128	; 0x80
 8004ec6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004eda:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f001 fb7c 	bl	80065e0 <HAL_DMA_Init>
 8004ee8:	1e03      	subs	r3, r0, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_UART_MspInit+0x308>
      Error_Handler();
 8004eec:	f7fe fd24 	bl	8003938 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ef4:	67da      	str	r2, [r3, #124]	; 0x7c
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_UART_MspInit+0x340>)
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b017      	add	sp, #92	; 0x5c
 8004f02:	bd90      	pop	{r4, r7, pc}
 8004f04:	40013800 	.word	0x40013800
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40004400 	.word	0x40004400
 8004f10:	20003868 	.word	0x20003868
 8004f14:	40020008 	.word	0x40020008
 8004f18:	40004800 	.word	0x40004800
 8004f1c:	50000400 	.word	0x50000400
 8004f20:	200038c4 	.word	0x200038c4
 8004f24:	40020044 	.word	0x40020044
 8004f28:	20003920 	.word	0x20003920
 8004f2c:	40020058 	.word	0x40020058

08004f30 <USART2_IDLECallback>:
  * @brief  串口2的接收空闲回调，用于和控制板通信
  * @param  None
  * @retval None
  */
void USART2_IDLECallback(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0

	HAL_UART_DMAStop(&huart2);
 8004f36:	4b48      	ldr	r3, [pc, #288]	; (8005058 <USART2_IDLECallback+0x128>)
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f005 fa7c 	bl	800a436 <HAL_UART_DMAStop>


	if(Uart2_Receive_buffer[0]==RS232_ID||Uart2_Receive_buffer[0]==0)
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <USART2_IDLECallback+0x12c>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	4b46      	ldr	r3, [pc, #280]	; (8005060 <USART2_IDLECallback+0x130>)
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d003      	beq.n	8004f54 <USART2_IDLECallback+0x24>
 8004f4c:	4b43      	ldr	r3, [pc, #268]	; (800505c <USART2_IDLECallback+0x12c>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d173      	bne.n	800503c <USART2_IDLECallback+0x10c>

		}
#endif

#ifdef ADD_CHECK
		uint16_t addvalue=( (Uart2_Receive_buffer [USART2_Received_Length-2])|(Uart2_Receive_buffer[USART2_Received_Length-1]<<8) );
 8004f54:	4b43      	ldr	r3, [pc, #268]	; (8005064 <USART2_IDLECallback+0x134>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	3b02      	subs	r3, #2
 8004f5a:	4a40      	ldr	r2, [pc, #256]	; (800505c <USART2_IDLECallback+0x12c>)
 8004f5c:	5cd3      	ldrb	r3, [r2, r3]
 8004f5e:	b21a      	sxth	r2, r3
 8004f60:	4b40      	ldr	r3, [pc, #256]	; (8005064 <USART2_IDLECallback+0x134>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	493d      	ldr	r1, [pc, #244]	; (800505c <USART2_IDLECallback+0x12c>)
 8004f68:	5ccb      	ldrb	r3, [r1, r3]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	b21b      	sxth	r3, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	b21a      	sxth	r2, r3
 8004f72:	1dbb      	adds	r3, r7, #6
 8004f74:	801a      	strh	r2, [r3, #0]
		//接收端用CRC16算法对接到的数据进行校验，计算出的结果和传过来的CRC字节比较是否相等
		if(addvalue==ADD(Uart2_Receive_buffer,USART2_Received_Length-2))
 8004f76:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <USART2_IDLECallback+0x134>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	3b02      	subs	r3, #2
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	4b37      	ldr	r3, [pc, #220]	; (800505c <USART2_IDLECallback+0x12c>)
 8004f80:	0011      	movs	r1, r2
 8004f82:	0018      	movs	r0, r3
 8004f84:	f007 fbfa 	bl	800c77c <ADD>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	1dbb      	adds	r3, r7, #6
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d153      	bne.n	800503c <USART2_IDLECallback+0x10c>
		{
				switch(Uart2_Receive_buffer[1])
 8004f94:	4b31      	ldr	r3, [pc, #196]	; (800505c <USART2_IDLECallback+0x12c>)
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d051      	beq.n	8005040 <USART2_IDLECallback+0x110>
 8004f9c:	2b12      	cmp	r3, #18
 8004f9e:	d000      	beq.n	8004fa2 <USART2_IDLECallback+0x72>
						break;
					}



					default: break;
 8004fa0:	e04f      	b.n	8005042 <USART2_IDLECallback+0x112>
						Voltage_Actual=ADC_Gain_V*(Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4])+Eror_ADC_V;
 8004fa2:	4b2e      	ldr	r3, [pc, #184]	; (800505c <USART2_IDLECallback+0x12c>)
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	; (800505c <USART2_IDLECallback+0x12c>)
 8004faa:	7912      	ldrb	r2, [r2, #4]
 8004fac:	189b      	adds	r3, r3, r2
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f7fc f94a 	bl	8001248 <__aeabi_i2f>
 8004fb4:	1c02      	adds	r2, r0, #0
 8004fb6:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <USART2_IDLECallback+0x138>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	1c19      	adds	r1, r3, #0
 8004fbc:	1c10      	adds	r0, r2, #0
 8004fbe:	f7fb fe4f 	bl	8000c60 <__aeabi_fmul>
 8004fc2:	1c03      	adds	r3, r0, #0
 8004fc4:	1c1a      	adds	r2, r3, #0
 8004fc6:	4b29      	ldr	r3, [pc, #164]	; (800506c <USART2_IDLECallback+0x13c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	1c19      	adds	r1, r3, #0
 8004fcc:	1c10      	adds	r0, r2, #0
 8004fce:	f7fb fae1 	bl	8000594 <__aeabi_fadd>
 8004fd2:	1c03      	adds	r3, r0, #0
 8004fd4:	1c1a      	adds	r2, r3, #0
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <USART2_IDLECallback+0x140>)
 8004fd8:	601a      	str	r2, [r3, #0]
						Current_Actual=ADC_Gain_I*(Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6])+Eror_ADC_I;
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <USART2_IDLECallback+0x12c>)
 8004fdc:	795b      	ldrb	r3, [r3, #5]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	; (800505c <USART2_IDLECallback+0x12c>)
 8004fe2:	7992      	ldrb	r2, [r2, #6]
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7fc f92e 	bl	8001248 <__aeabi_i2f>
 8004fec:	1c02      	adds	r2, r0, #0
 8004fee:	4b21      	ldr	r3, [pc, #132]	; (8005074 <USART2_IDLECallback+0x144>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	1c19      	adds	r1, r3, #0
 8004ff4:	1c10      	adds	r0, r2, #0
 8004ff6:	f7fb fe33 	bl	8000c60 <__aeabi_fmul>
 8004ffa:	1c03      	adds	r3, r0, #0
 8004ffc:	1c1a      	adds	r2, r3, #0
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <USART2_IDLECallback+0x148>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	1c19      	adds	r1, r3, #0
 8005004:	1c10      	adds	r0, r2, #0
 8005006:	f7fb fac5 	bl	8000594 <__aeabi_fadd>
 800500a:	1c03      	adds	r3, r0, #0
 800500c:	1c1a      	adds	r2, r3, #0
 800500e:	4b1b      	ldr	r3, [pc, #108]	; (800507c <USART2_IDLECallback+0x14c>)
 8005010:	601a      	str	r2, [r3, #0]
						Current_Actual*=1000;//61mv/A
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <USART2_IDLECallback+0x14c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	491a      	ldr	r1, [pc, #104]	; (8005080 <USART2_IDLECallback+0x150>)
 8005018:	1c18      	adds	r0, r3, #0
 800501a:	f7fb fe21 	bl	8000c60 <__aeabi_fmul>
 800501e:	1c03      	adds	r3, r0, #0
 8005020:	1c1a      	adds	r2, r3, #0
 8005022:	4b16      	ldr	r3, [pc, #88]	; (800507c <USART2_IDLECallback+0x14c>)
 8005024:	601a      	str	r2, [r3, #0]
						Current_Actual/=61;
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <USART2_IDLECallback+0x14c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4916      	ldr	r1, [pc, #88]	; (8005084 <USART2_IDLECallback+0x154>)
 800502c:	1c18      	adds	r0, r3, #0
 800502e:	f7fb fc4f 	bl	80008d0 <__aeabi_fdiv>
 8005032:	1c03      	adds	r3, r0, #0
 8005034:	1c1a      	adds	r2, r3, #0
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <USART2_IDLECallback+0x14c>)
 8005038:	601a      	str	r2, [r3, #0]
						break;
 800503a:	e002      	b.n	8005042 <USART2_IDLECallback+0x112>
				}

		}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	e000      	b.n	8005042 <USART2_IDLECallback+0x112>
						break;
 8005040:	46c0      	nop			; (mov r8, r8)

	}



	HAL_UART_Receive_DMA(&huart2, &Uart2_Receive_buffer[0],9);
 8005042:	4906      	ldr	r1, [pc, #24]	; (800505c <USART2_IDLECallback+0x12c>)
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <USART2_IDLECallback+0x128>)
 8005046:	2209      	movs	r2, #9
 8005048:	0018      	movs	r0, r3
 800504a:	f005 f99d 	bl	800a388 <HAL_UART_Receive_DMA>


}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	46bd      	mov	sp, r7
 8005052:	b002      	add	sp, #8
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	20003740 	.word	0x20003740
 800505c:	200036a0 	.word	0x200036a0
 8005060:	200030d4 	.word	0x200030d4
 8005064:	20000004 	.word	0x20000004
 8005068:	20002fe8 	.word	0x20002fe8
 800506c:	20002ff0 	.word	0x20002ff0
 8005070:	2000399c 	.word	0x2000399c
 8005074:	20002fec 	.word	0x20002fec
 8005078:	20002ff4 	.word	0x20002ff4
 800507c:	200039a0 	.word	0x200039a0
 8005080:	447a0000 	.word	0x447a0000
 8005084:	42740000 	.word	0x42740000

08005088 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005088:	480d      	ldr	r0, [pc, #52]	; (80050c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800508a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800508c:	f7fe fec8 	bl	8003e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005090:	480c      	ldr	r0, [pc, #48]	; (80050c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005092:	490d      	ldr	r1, [pc, #52]	; (80050c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005094:	4a0d      	ldr	r2, [pc, #52]	; (80050cc <LoopForever+0xe>)
  movs r3, #0
 8005096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005098:	e002      	b.n	80050a0 <LoopCopyDataInit>

0800509a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800509a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800509c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800509e:	3304      	adds	r3, #4

080050a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050a4:	d3f9      	bcc.n	800509a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050a6:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050a8:	4c0a      	ldr	r4, [pc, #40]	; (80050d4 <LoopForever+0x16>)
  movs r3, #0
 80050aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050ac:	e001      	b.n	80050b2 <LoopFillZerobss>

080050ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050b0:	3204      	adds	r2, #4

080050b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050b4:	d3fb      	bcc.n	80050ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80050b6:	f00f fae5 	bl	8014684 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80050ba:	f7fe f9e5 	bl	8003488 <main>

080050be <LoopForever>:

LoopForever:
  b LoopForever
 80050be:	e7fe      	b.n	80050be <LoopForever>
  ldr   r0, =_estack
 80050c0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80050c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050c8:	200032a8 	.word	0x200032a8
  ldr r2, =_sidata
 80050cc:	08018eb0 	.word	0x08018eb0
  ldr r2, =_sbss
 80050d0:	200032a8 	.word	0x200032a8
  ldr r4, =_ebss
 80050d4:	20003aa0 	.word	0x20003aa0

080050d8 <EXTI0_1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050d8:	e7fe      	b.n	80050d8 <EXTI0_1_IRQHandler>
	...

080050dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050e2:	1dfb      	adds	r3, r7, #7
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_Init+0x3c>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_Init+0x3c>)
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	0049      	lsls	r1, r1, #1
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050f6:	2003      	movs	r0, #3
 80050f8:	f000 f810 	bl	800511c <HAL_InitTick>
 80050fc:	1e03      	subs	r3, r0, #0
 80050fe:	d003      	beq.n	8005108 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005100:	1dfb      	adds	r3, r7, #7
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e001      	b.n	800510c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005108:	f7fe fcca 	bl	8003aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	781b      	ldrb	r3, [r3, #0]
}
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	b002      	add	sp, #8
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40022000 	.word	0x40022000

0800511c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005124:	230f      	movs	r3, #15
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800512c:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <HAL_InitTick+0x88>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02b      	beq.n	800518c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005134:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <HAL_InitTick+0x8c>)
 8005136:	681c      	ldr	r4, [r3, #0]
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_InitTick+0x88>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	0019      	movs	r1, r3
 800513e:	23fa      	movs	r3, #250	; 0xfa
 8005140:	0098      	lsls	r0, r3, #2
 8005142:	f7fb f803 	bl	800014c <__udivsi3>
 8005146:	0003      	movs	r3, r0
 8005148:	0019      	movs	r1, r3
 800514a:	0020      	movs	r0, r4
 800514c:	f7fa fffe 	bl	800014c <__udivsi3>
 8005150:	0003      	movs	r3, r0
 8005152:	0018      	movs	r0, r3
 8005154:	f001 fa37 	bl	80065c6 <HAL_SYSTICK_Config>
 8005158:	1e03      	subs	r3, r0, #0
 800515a:	d112      	bne.n	8005182 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d80a      	bhi.n	8005178 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	2301      	movs	r3, #1
 8005166:	425b      	negs	r3, r3
 8005168:	2200      	movs	r2, #0
 800516a:	0018      	movs	r0, r3
 800516c:	f001 fa06 	bl	800657c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <HAL_InitTick+0x90>)
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e00d      	b.n	8005194 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005178:	230f      	movs	r3, #15
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e008      	b.n	8005194 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005182:	230f      	movs	r3, #15
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e003      	b.n	8005194 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800518c:	230f      	movs	r3, #15
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005194:	230f      	movs	r3, #15
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	781b      	ldrb	r3, [r3, #0]
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b005      	add	sp, #20
 80051a0:	bd90      	pop	{r4, r7, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	2000000c 	.word	0x2000000c
 80051a8:	20000000 	.word	0x20000000
 80051ac:	20000008 	.word	0x20000008

080051b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_IncTick+0x1c>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	001a      	movs	r2, r3
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_IncTick+0x20>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	18d2      	adds	r2, r2, r3
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_IncTick+0x20>)
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	46c0      	nop			; (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	2000000c 	.word	0x2000000c
 80051d0:	2000397c 	.word	0x2000397c

080051d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  return uwTick;
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <HAL_GetTick+0x10>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	2000397c 	.word	0x2000397c

080051e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051f0:	f7ff fff0 	bl	80051d4 <HAL_GetTick>
 80051f4:	0003      	movs	r3, r0
 80051f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	d005      	beq.n	800520e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <HAL_Delay+0x44>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	001a      	movs	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	189b      	adds	r3, r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	f7ff ffe0 	bl	80051d4 <HAL_GetTick>
 8005214:	0002      	movs	r2, r0
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	429a      	cmp	r2, r3
 800521e:	d8f7      	bhi.n	8005210 <HAL_Delay+0x28>
  {
  }
}
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	2000000c 	.word	0x2000000c

08005230 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a05      	ldr	r2, [pc, #20]	; (8005254 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005240:	401a      	ands	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	46bd      	mov	sp, r7
 800524e:	b002      	add	sp, #8
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	fe3fffff 	.word	0xfe3fffff

08005258 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	23e0      	movs	r3, #224	; 0xe0
 8005266:	045b      	lsls	r3, r3, #17
 8005268:	4013      	ands	r3, r2
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b002      	add	sp, #8
 8005270:	bd80      	pop	{r7, pc}

08005272 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	2104      	movs	r1, #4
 8005286:	400a      	ands	r2, r1
 8005288:	2107      	movs	r1, #7
 800528a:	4091      	lsls	r1, r2
 800528c:	000a      	movs	r2, r1
 800528e:	43d2      	mvns	r2, r2
 8005290:	401a      	ands	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2104      	movs	r1, #4
 8005296:	400b      	ands	r3, r1
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4099      	lsls	r1, r3
 800529c:	000b      	movs	r3, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b004      	add	sp, #16
 80052aa:	bd80      	pop	{r7, pc}

080052ac <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	2104      	movs	r1, #4
 80052be:	400a      	ands	r2, r1
 80052c0:	2107      	movs	r1, #7
 80052c2:	4091      	lsls	r1, r2
 80052c4:	000a      	movs	r2, r1
 80052c6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2104      	movs	r1, #4
 80052cc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80052ce:	40da      	lsrs	r2, r3
 80052d0:	0013      	movs	r3, r2
}
 80052d2:	0018      	movs	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b002      	add	sp, #8
 80052d8:	bd80      	pop	{r7, pc}

080052da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	23c0      	movs	r3, #192	; 0xc0
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	4013      	ands	r3, r2
 80052ec:	d101      	bne.n	80052f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}

080052fc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	211f      	movs	r1, #31
 8005310:	400a      	ands	r2, r1
 8005312:	210f      	movs	r1, #15
 8005314:	4091      	lsls	r1, r2
 8005316:	000a      	movs	r2, r1
 8005318:	43d2      	mvns	r2, r2
 800531a:	401a      	ands	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	0e9b      	lsrs	r3, r3, #26
 8005320:	210f      	movs	r1, #15
 8005322:	4019      	ands	r1, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	201f      	movs	r0, #31
 8005328:	4003      	ands	r3, r0
 800532a:	4099      	lsls	r1, r3
 800532c:	000b      	movs	r3, r1
 800532e:	431a      	orrs	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	b004      	add	sp, #16
 800533a:	bd80      	pop	{r7, pc}

0800533c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	035b      	lsls	r3, r3, #13
 800534e:	0b5b      	lsrs	r3, r3, #13
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b002      	add	sp, #8
 800535c:	bd80      	pop	{r7, pc}

0800535e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	0352      	lsls	r2, r2, #13
 8005370:	0b52      	lsrs	r2, r2, #13
 8005372:	43d2      	mvns	r2, r2
 8005374:	401a      	ands	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	629a      	str	r2, [r3, #40]	; 0x28
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	46bd      	mov	sp, r7
 800537e:	b002      	add	sp, #8
 8005380:	bd80      	pop	{r7, pc}

08005382 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2203      	movs	r2, #3
 8005390:	4013      	ands	r3, r2
}
 8005392:	0018      	movs	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	0212      	lsls	r2, r2, #8
 80053b0:	43d2      	mvns	r2, r2
 80053b2:	401a      	ands	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	400b      	ands	r3, r1
 80053bc:	4904      	ldr	r1, [pc, #16]	; (80053d0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80053be:	400b      	ands	r3, r1
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b004      	add	sp, #16
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	07ffff00 	.word	0x07ffff00

080053d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a05      	ldr	r2, [pc, #20]	; (80053f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	2280      	movs	r2, #128	; 0x80
 80053e6:	0552      	lsls	r2, r2, #21
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b002      	add	sp, #8
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	6fffffe8 	.word	0x6fffffe8

080053fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	055b      	lsls	r3, r3, #21
 800540c:	401a      	ands	r2, r3
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	055b      	lsls	r3, r3, #21
 8005412:	429a      	cmp	r2, r3
 8005414:	d101      	bne.n	800541a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b002      	add	sp, #8
 8005422:	bd80      	pop	{r7, pc}

08005424 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a04      	ldr	r2, [pc, #16]	; (8005444 <LL_ADC_Enable+0x20>)
 8005432:	4013      	ands	r3, r2
 8005434:	2201      	movs	r2, #1
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}
 8005444:	7fffffe8 	.word	0x7fffffe8

08005448 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <LL_ADC_Disable+0x20>)
 8005456:	4013      	ands	r3, r2
 8005458:	2202      	movs	r2, #2
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	b002      	add	sp, #8
 8005466:	bd80      	pop	{r7, pc}
 8005468:	7fffffe8 	.word	0x7fffffe8

0800546c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2201      	movs	r2, #1
 800547a:	4013      	ands	r3, r2
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <LL_ADC_IsEnabled+0x18>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <LL_ADC_IsEnabled+0x1a>
 8005484:	2300      	movs	r3, #0
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b002      	add	sp, #8
 800548c:	bd80      	pop	{r7, pc}

0800548e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2202      	movs	r2, #2
 800549c:	4013      	ands	r3, r2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d101      	bne.n	80054a6 <LL_ADC_IsDisableOngoing+0x18>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <LL_ADC_IsDisableOngoing+0x1a>
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	0018      	movs	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <LL_ADC_REG_StartConversion+0x20>)
 80054be:	4013      	ands	r3, r2
 80054c0:	2204      	movs	r2, #4
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	7fffffe8 	.word	0x7fffffe8

080054d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <LL_ADC_REG_StopConversion+0x20>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	2210      	movs	r2, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	7fffffe8 	.word	0x7fffffe8

080054f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2204      	movs	r2, #4
 8005506:	4013      	ands	r3, r2
 8005508:	2b04      	cmp	r3, #4
 800550a:	d101      	bne.n	8005510 <LL_ADC_REG_IsConversionOngoing+0x18>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005510:	2300      	movs	r3, #0
}
 8005512:	0018      	movs	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	b002      	add	sp, #8
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005524:	231f      	movs	r3, #31
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e17f      	b.n	8005842 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f7fd fe1f 	bl	8003190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2254      	movs	r2, #84	; 0x54
 800555c:	2100      	movs	r1, #0
 800555e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	0018      	movs	r0, r3
 8005566:	f7ff ff49 	bl	80053fc <LL_ADC_IsInternalRegulatorEnabled>
 800556a:	1e03      	subs	r3, r0, #0
 800556c:	d115      	bne.n	800559a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	0018      	movs	r0, r3
 8005574:	f7ff ff2e 	bl	80053d4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005578:	4bb4      	ldr	r3, [pc, #720]	; (800584c <HAL_ADC_Init+0x330>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	49b4      	ldr	r1, [pc, #720]	; (8005850 <HAL_ADC_Init+0x334>)
 800557e:	0018      	movs	r0, r3
 8005580:	f7fa fde4 	bl	800014c <__udivsi3>
 8005584:	0003      	movs	r3, r0
 8005586:	3301      	adds	r3, #1
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800558c:	e002      	b.n	8005594 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b01      	subs	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f9      	bne.n	800558e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	0018      	movs	r0, r3
 80055a0:	f7ff ff2c 	bl	80053fc <LL_ADC_IsInternalRegulatorEnabled>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d10f      	bne.n	80055c8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ac:	2210      	movs	r2, #16
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	2201      	movs	r2, #1
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80055c0:	231f      	movs	r3, #31
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7ff ff93 	bl	80054f8 <LL_ADC_REG_IsConversionOngoing>
 80055d2:	0003      	movs	r3, r0
 80055d4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	2210      	movs	r2, #16
 80055dc:	4013      	ands	r3, r2
 80055de:	d000      	beq.n	80055e2 <HAL_ADC_Init+0xc6>
 80055e0:	e122      	b.n	8005828 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d000      	beq.n	80055ea <HAL_ADC_Init+0xce>
 80055e8:	e11e      	b.n	8005828 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ee:	4a99      	ldr	r2, [pc, #612]	; (8005854 <HAL_ADC_Init+0x338>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	2202      	movs	r2, #2
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	0018      	movs	r0, r3
 8005600:	f7ff ff34 	bl	800546c <LL_ADC_IsEnabled>
 8005604:	1e03      	subs	r3, r0, #0
 8005606:	d000      	beq.n	800560a <HAL_ADC_Init+0xee>
 8005608:	e0ad      	b.n	8005766 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7e1b      	ldrb	r3, [r3, #24]
 8005612:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005614:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	7e5b      	ldrb	r3, [r3, #25]
 800561a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800561c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7e9b      	ldrb	r3, [r3, #26]
 8005622:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005624:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_ADC_Init+0x118>
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	015b      	lsls	r3, r3, #5
 8005632:	e000      	b.n	8005636 <HAL_ADC_Init+0x11a>
 8005634:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005636:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800563c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	da04      	bge.n	8005650 <HAL_ADC_Init+0x134>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	e001      	b.n	8005654 <HAL_ADC_Init+0x138>
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8005654:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	212c      	movs	r1, #44	; 0x2c
 800565a:	5c5b      	ldrb	r3, [r3, r1]
 800565c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800565e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	5c9b      	ldrb	r3, [r3, r2]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d115      	bne.n	800569c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	7e9b      	ldrb	r3, [r3, #26]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d105      	bne.n	8005684 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	0252      	lsls	r2, r2, #9
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e00b      	b.n	800569c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	2220      	movs	r2, #32
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	2201      	movs	r2, #1
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a8:	23e0      	movs	r3, #224	; 0xe0
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056b2:	4313      	orrs	r3, r2
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_ADC_Init+0x33c>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	0f9b      	lsrs	r3, r3, #30
 80056d6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056dc:	4313      	orrs	r3, r2
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	223c      	movs	r2, #60	; 0x3c
 80056e8:	5c9b      	ldrb	r3, [r3, r2]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d111      	bne.n	8005712 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	0f9b      	lsrs	r3, r3, #30
 80056f4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056fa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005700:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005706:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	2201      	movs	r2, #1
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	4a50      	ldr	r2, [pc, #320]	; (800585c <HAL_ADC_Init+0x340>)
 800571a:	4013      	ands	r3, r2
 800571c:	0019      	movs	r1, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	430a      	orrs	r2, r1
 8005726:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	23c0      	movs	r3, #192	; 0xc0
 800572e:	061b      	lsls	r3, r3, #24
 8005730:	429a      	cmp	r2, r3
 8005732:	d018      	beq.n	8005766 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	05db      	lsls	r3, r3, #23
 800573c:	429a      	cmp	r2, r3
 800573e:	d012      	beq.n	8005766 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	429a      	cmp	r2, r3
 800574a:	d00c      	beq.n	8005766 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800574c:	4b44      	ldr	r3, [pc, #272]	; (8005860 <HAL_ADC_Init+0x344>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a44      	ldr	r2, [pc, #272]	; (8005864 <HAL_ADC_Init+0x348>)
 8005752:	4013      	ands	r3, r2
 8005754:	0019      	movs	r1, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	23f0      	movs	r3, #240	; 0xf0
 800575c:	039b      	lsls	r3, r3, #14
 800575e:	401a      	ands	r2, r3
 8005760:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <HAL_ADC_Init+0x344>)
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	001a      	movs	r2, r3
 8005770:	2100      	movs	r1, #0
 8005772:	f7ff fd7e 	bl	8005272 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	493a      	ldr	r1, [pc, #232]	; (8005868 <HAL_ADC_Init+0x34c>)
 8005780:	001a      	movs	r2, r3
 8005782:	f7ff fd76 	bl	8005272 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2110      	movs	r1, #16
 800579a:	4249      	negs	r1, r1
 800579c:	430a      	orrs	r2, r1
 800579e:	629a      	str	r2, [r3, #40]	; 0x28
 80057a0:	e018      	b.n	80057d4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	039b      	lsls	r3, r3, #14
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d112      	bne.n	80057d4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	221c      	movs	r2, #28
 80057be:	4013      	ands	r3, r2
 80057c0:	2210      	movs	r2, #16
 80057c2:	4252      	negs	r2, r2
 80057c4:	409a      	lsls	r2, r3
 80057c6:	0011      	movs	r1, r2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2100      	movs	r1, #0
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff fd66 	bl	80052ac <LL_ADC_GetSamplingTimeCommonChannels>
 80057e0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d10b      	bne.n	8005802 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f4:	2203      	movs	r2, #3
 80057f6:	4393      	bics	r3, r2
 80057f8:	2201      	movs	r2, #1
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005800:	e01c      	b.n	800583c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	2212      	movs	r2, #18
 8005808:	4393      	bics	r3, r2
 800580a:	2210      	movs	r2, #16
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005816:	2201      	movs	r2, #1
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800581e:	231f      	movs	r3, #31
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005826:	e009      	b.n	800583c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	2210      	movs	r2, #16
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005834:	231f      	movs	r3, #31
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800583c:	231f      	movs	r3, #31
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	781b      	ldrb	r3, [r3, #0]
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b008      	add	sp, #32
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	20000000 	.word	0x20000000
 8005850:	00030d40 	.word	0x00030d40
 8005854:	fffffefd 	.word	0xfffffefd
 8005858:	fffe0201 	.word	0xfffe0201
 800585c:	1ffffc02 	.word	0x1ffffc02
 8005860:	40012708 	.word	0x40012708
 8005864:	ffc3ffff 	.word	0xffc3ffff
 8005868:	07ffff04 	.word	0x07ffff04

0800586c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800586c:	b5b0      	push	{r4, r5, r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff fe3b 	bl	80054f8 <LL_ADC_REG_IsConversionOngoing>
 8005882:	1e03      	subs	r3, r0, #0
 8005884:	d16c      	bne.n	8005960 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2254      	movs	r2, #84	; 0x54
 800588a:	5c9b      	ldrb	r3, [r3, r2]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_ADC_Start_DMA+0x28>
 8005890:	2302      	movs	r3, #2
 8005892:	e06c      	b.n	800596e <HAL_ADC_Start_DMA+0x102>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2254      	movs	r2, #84	; 0x54
 8005898:	2101      	movs	r1, #1
 800589a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	4013      	ands	r3, r2
 80058a6:	d113      	bne.n	80058d0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fddd 	bl	800546c <LL_ADC_IsEnabled>
 80058b2:	1e03      	subs	r3, r0, #0
 80058b4:	d004      	beq.n	80058c0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7ff fdc4 	bl	8005448 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2101      	movs	r1, #1
 80058cc:	430a      	orrs	r2, r1
 80058ce:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80058d0:	2517      	movs	r5, #23
 80058d2:	197c      	adds	r4, r7, r5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 fc12 	bl	8006100 <ADC_Enable>
 80058dc:	0003      	movs	r3, r0
 80058de:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80058e0:	002c      	movs	r4, r5
 80058e2:	193b      	adds	r3, r7, r4
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d13e      	bne.n	8005968 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	4a22      	ldr	r2, [pc, #136]	; (8005978 <HAL_ADC_Start_DMA+0x10c>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	2280      	movs	r2, #128	; 0x80
 80058f4:	0052      	lsls	r2, r2, #1
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005906:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_ADC_Start_DMA+0x110>)
 8005908:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <HAL_ADC_Start_DMA+0x114>)
 8005910:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005916:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <HAL_ADC_Start_DMA+0x118>)
 8005918:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	221c      	movs	r2, #28
 8005920:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2254      	movs	r2, #84	; 0x54
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2110      	movs	r1, #16
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3340      	adds	r3, #64	; 0x40
 8005944:	0019      	movs	r1, r3
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	193c      	adds	r4, r7, r4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f000 fed2 	bl	80066f4 <HAL_DMA_Start_IT>
 8005950:	0003      	movs	r3, r0
 8005952:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	0018      	movs	r0, r3
 800595a:	f7ff fda9 	bl	80054b0 <LL_ADC_REG_StartConversion>
 800595e:	e003      	b.n	8005968 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005960:	2317      	movs	r3, #23
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2202      	movs	r2, #2
 8005966:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005968:	2317      	movs	r3, #23
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	781b      	ldrb	r3, [r3, #0]
}
 800596e:	0018      	movs	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	b006      	add	sp, #24
 8005974:	bdb0      	pop	{r4, r5, r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	fffff0fe 	.word	0xfffff0fe
 800597c:	080062c9 	.word	0x080062c9
 8005980:	08006391 	.word	0x08006391
 8005984:	080063af 	.word	0x080063af

08005988 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2254      	movs	r2, #84	; 0x54
 8005994:	5c9b      	ldrb	r3, [r3, r2]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_ADC_Stop_DMA+0x16>
 800599a:	2302      	movs	r3, #2
 800599c:	e05f      	b.n	8005a5e <HAL_ADC_Stop_DMA+0xd6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2254      	movs	r2, #84	; 0x54
 80059a2:	2101      	movs	r1, #1
 80059a4:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80059a6:	250f      	movs	r5, #15
 80059a8:	197c      	adds	r4, r7, r5
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	0018      	movs	r0, r3
 80059ae:	f000 fb65 	bl	800607c <ADC_ConversionStop>
 80059b2:	0003      	movs	r3, r0
 80059b4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80059b6:	0029      	movs	r1, r5
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d147      	bne.n	8005a50 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c4:	2225      	movs	r2, #37	; 0x25
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d112      	bne.n	80059f4 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d2:	000d      	movs	r5, r1
 80059d4:	187c      	adds	r4, r7, r1
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 ff12 	bl	8006800 <HAL_DMA_Abort>
 80059dc:	0003      	movs	r3, r0
 80059de:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80059e0:	197b      	adds	r3, r7, r5
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ec:	2240      	movs	r2, #64	; 0x40
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2110      	movs	r1, #16
 8005a00:	438a      	bics	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005a04:	220f      	movs	r2, #15
 8005a06:	18bb      	adds	r3, r7, r2
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005a0e:	18bc      	adds	r4, r7, r2
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 fbfa 	bl	800620c <ADC_Disable>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	7023      	strb	r3, [r4, #0]
 8005a1c:	e003      	b.n	8005a26 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	0018      	movs	r0, r3
 8005a22:	f000 fbf3 	bl	800620c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005a26:	230f      	movs	r3, #15
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	4a0c      	ldr	r2, [pc, #48]	; (8005a68 <HAL_ADC_Stop_DMA+0xe0>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	2201      	movs	r2, #1
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2254      	movs	r2, #84	; 0x54
 8005a54:	2100      	movs	r1, #0
 8005a56:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005a58:	230f      	movs	r3, #15
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	781b      	ldrb	r3, [r3, #0]
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b004      	add	sp, #16
 8005a64:	bdb0      	pop	{r4, r5, r7, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	fffffefe 	.word	0xfffffefe

08005a6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d017      	beq.n	8005ac0 <HAL_ADC_IRQHandler+0x54>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2202      	movs	r2, #2
 8005a94:	4013      	ands	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9c:	2210      	movs	r2, #16
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d106      	bne.n	8005ab0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	0112      	lsls	r2, r2, #4
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 fca6 	bl	8006404 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2202      	movs	r2, #2
 8005abe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <HAL_ADC_IRQHandler+0x64>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2204      	movs	r2, #4
 8005acc:	4013      	ands	r3, r2
 8005ace:	d107      	bne.n	8005ae0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ad6:	d04d      	beq.n	8005b74 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2208      	movs	r2, #8
 8005adc:	4013      	ands	r3, r2
 8005ade:	d049      	beq.n	8005b74 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d106      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	0092      	lsls	r2, r2, #2
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7ff fbec 	bl	80052da <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d02e      	beq.n	8005b64 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7e9b      	ldrb	r3, [r3, #26]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d12a      	bne.n	8005b64 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2208      	movs	r2, #8
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d123      	bne.n	8005b64 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f7ff fce9 	bl	80054f8 <LL_ADC_REG_IsConversionOngoing>
 8005b26:	1e03      	subs	r3, r0, #0
 8005b28:	d110      	bne.n	8005b4c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	210c      	movs	r1, #12
 8005b36:	438a      	bics	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3e:	4a56      	ldr	r2, [pc, #344]	; (8005c98 <HAL_ADC_IRQHandler+0x22c>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	2201      	movs	r2, #1
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	659a      	str	r2, [r3, #88]	; 0x58
 8005b4a:	e00b      	b.n	8005b64 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	2220      	movs	r2, #32
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f00b fe02 	bl	8011770 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	220c      	movs	r2, #12
 8005b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2280      	movs	r2, #128	; 0x80
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d012      	beq.n	8005ba2 <HAL_ADC_IRQHandler+0x136>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2280      	movs	r2, #128	; 0x80
 8005b80:	4013      	ands	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	0252      	lsls	r2, r2, #9
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 f889 	bl	8005cac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2280      	movs	r2, #128	; 0x80
 8005ba0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d014      	beq.n	8005bd6 <HAL_ADC_IRQHandler+0x16a>
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d00f      	beq.n	8005bd6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bba:	2280      	movs	r2, #128	; 0x80
 8005bbc:	0292      	lsls	r2, r2, #10
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 fc0c 	bl	80063e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	0052      	lsls	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d014      	beq.n	8005c0a <HAL_ADC_IRQHandler+0x19e>
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4013      	ands	r3, r2
 8005be8:	d00f      	beq.n	8005c0a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	02d2      	lsls	r2, r2, #11
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 fbfa 	bl	80063f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2280      	movs	r2, #128	; 0x80
 8005c06:	0092      	lsls	r2, r2, #2
 8005c08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d02b      	beq.n	8005c6a <HAL_ADC_IRQHandler+0x1fe>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2210      	movs	r2, #16
 8005c16:	4013      	ands	r3, r2
 8005c18:	d027      	beq.n	8005c6a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005c22:	2301      	movs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e008      	b.n	8005c3a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff fba8 	bl	8005382 <LL_ADC_REG_GetDMATransfer>
 8005c32:	1e03      	subs	r3, r0, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005c36:	2301      	movs	r3, #1
 8005c38:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d110      	bne.n	8005c62 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c44:	2280      	movs	r2, #128	; 0x80
 8005c46:	00d2      	lsls	r2, r2, #3
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c52:	2202      	movs	r2, #2
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f000 f82d 	bl	8005cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2210      	movs	r2, #16
 8005c68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	019b      	lsls	r3, r3, #6
 8005c70:	4013      	ands	r3, r2
 8005c72:	d00d      	beq.n	8005c90 <HAL_ADC_IRQHandler+0x224>
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d008      	beq.n	8005c90 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 fbc7 	bl	8006414 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2280      	movs	r2, #128	; 0x80
 8005c8c:	0192      	lsls	r2, r2, #6
 8005c8e:	601a      	str	r2, [r3, #0]
  }
}
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b006      	add	sp, #24
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	fffffefe 	.word	0xfffffefe

08005c9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005cc4:	46c0      	nop			; (mov r8, r8)
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b002      	add	sp, #8
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cd6:	2317      	movs	r3, #23
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	2200      	movs	r2, #0
 8005cdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2254      	movs	r2, #84	; 0x54
 8005ce6:	5c9b      	ldrb	r3, [r3, r2]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_ADC_ConfigChannel+0x24>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e1c0      	b.n	8006072 <HAL_ADC_ConfigChannel+0x3a6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2254      	movs	r2, #84	; 0x54
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7ff fbfb 	bl	80054f8 <LL_ADC_REG_IsConversionOngoing>
 8005d02:	1e03      	subs	r3, r0, #0
 8005d04:	d000      	beq.n	8005d08 <HAL_ADC_ConfigChannel+0x3c>
 8005d06:	e1a3      	b.n	8006050 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d100      	bne.n	8005d12 <HAL_ADC_ConfigChannel+0x46>
 8005d10:	e143      	b.n	8005f9a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d004      	beq.n	8005d28 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d22:	4ac1      	ldr	r2, [pc, #772]	; (8006028 <HAL_ADC_ConfigChannel+0x35c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0019      	movs	r1, r3
 8005d32:	0010      	movs	r0, r2
 8005d34:	f7ff fb02 	bl	800533c <LL_ADC_REG_SetSequencerChAdd>
 8005d38:	e0c9      	b.n	8005ece <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	211f      	movs	r1, #31
 8005d44:	400b      	ands	r3, r1
 8005d46:	210f      	movs	r1, #15
 8005d48:	4099      	lsls	r1, r3
 8005d4a:	000b      	movs	r3, r1
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	4013      	ands	r3, r2
 8005d50:	0019      	movs	r1, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	035b      	lsls	r3, r3, #13
 8005d58:	0b5b      	lsrs	r3, r3, #13
 8005d5a:	d105      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x9c>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	0e9b      	lsrs	r3, r3, #26
 8005d62:	221f      	movs	r2, #31
 8005d64:	4013      	ands	r3, r2
 8005d66:	e098      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d000      	beq.n	8005d74 <HAL_ADC_ConfigChannel+0xa8>
 8005d72:	e091      	b.n	8005e98 <HAL_ADC_ConfigChannel+0x1cc>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d000      	beq.n	8005d80 <HAL_ADC_ConfigChannel+0xb4>
 8005d7e:	e089      	b.n	8005e94 <HAL_ADC_ConfigChannel+0x1c8>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2204      	movs	r2, #4
 8005d86:	4013      	ands	r3, r2
 8005d88:	d000      	beq.n	8005d8c <HAL_ADC_ConfigChannel+0xc0>
 8005d8a:	e081      	b.n	8005e90 <HAL_ADC_ConfigChannel+0x1c4>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2208      	movs	r2, #8
 8005d92:	4013      	ands	r3, r2
 8005d94:	d000      	beq.n	8005d98 <HAL_ADC_ConfigChannel+0xcc>
 8005d96:	e079      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x1c0>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d000      	beq.n	8005da4 <HAL_ADC_ConfigChannel+0xd8>
 8005da2:	e071      	b.n	8005e88 <HAL_ADC_ConfigChannel+0x1bc>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2220      	movs	r2, #32
 8005daa:	4013      	ands	r3, r2
 8005dac:	d000      	beq.n	8005db0 <HAL_ADC_ConfigChannel+0xe4>
 8005dae:	e069      	b.n	8005e84 <HAL_ADC_ConfigChannel+0x1b8>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2240      	movs	r2, #64	; 0x40
 8005db6:	4013      	ands	r3, r2
 8005db8:	d000      	beq.n	8005dbc <HAL_ADC_ConfigChannel+0xf0>
 8005dba:	e061      	b.n	8005e80 <HAL_ADC_ConfigChannel+0x1b4>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d000      	beq.n	8005dc8 <HAL_ADC_ConfigChannel+0xfc>
 8005dc6:	e059      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x1b0>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d151      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x1ac>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d149      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x1a8>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4013      	ands	r3, r2
 8005dea:	d141      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x1a4>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	4013      	ands	r3, r2
 8005df6:	d139      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x1a0>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	015b      	lsls	r3, r3, #5
 8005e00:	4013      	ands	r3, r2
 8005e02:	d131      	bne.n	8005e68 <HAL_ADC_ConfigChannel+0x19c>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	019b      	lsls	r3, r3, #6
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d129      	bne.n	8005e64 <HAL_ADC_ConfigChannel+0x198>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	01db      	lsls	r3, r3, #7
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d121      	bne.n	8005e60 <HAL_ADC_ConfigChannel+0x194>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	4013      	ands	r3, r2
 8005e26:	d119      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x190>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	025b      	lsls	r3, r3, #9
 8005e30:	4013      	ands	r3, r2
 8005e32:	d111      	bne.n	8005e58 <HAL_ADC_ConfigChannel+0x18c>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d109      	bne.n	8005e54 <HAL_ADC_ConfigChannel+0x188>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	02db      	lsls	r3, r3, #11
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d001      	beq.n	8005e50 <HAL_ADC_ConfigChannel+0x184>
 8005e4c:	2312      	movs	r3, #18
 8005e4e:	e024      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e50:	2300      	movs	r3, #0
 8005e52:	e022      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e54:	2311      	movs	r3, #17
 8005e56:	e020      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	e01e      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e5c:	230f      	movs	r3, #15
 8005e5e:	e01c      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e60:	230e      	movs	r3, #14
 8005e62:	e01a      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e64:	230d      	movs	r3, #13
 8005e66:	e018      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	e016      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e6c:	230b      	movs	r3, #11
 8005e6e:	e014      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e70:	230a      	movs	r3, #10
 8005e72:	e012      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e74:	2309      	movs	r3, #9
 8005e76:	e010      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	e00e      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e7c:	2307      	movs	r3, #7
 8005e7e:	e00c      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e80:	2306      	movs	r3, #6
 8005e82:	e00a      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e84:	2305      	movs	r3, #5
 8005e86:	e008      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	e006      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e004      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e002      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x1ce>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	6852      	ldr	r2, [r2, #4]
 8005e9e:	201f      	movs	r0, #31
 8005ea0:	4002      	ands	r2, r0
 8005ea2:	4093      	lsls	r3, r2
 8005ea4:	000a      	movs	r2, r1
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d808      	bhi.n	8005ece <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	001a      	movs	r2, r3
 8005eca:	f7ff fa17 	bl	80052fc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	001a      	movs	r2, r3
 8005edc:	f7ff fa5e 	bl	800539c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	db00      	blt.n	8005eea <HAL_ADC_ConfigChannel+0x21e>
 8005ee8:	e0bc      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005eea:	4b50      	ldr	r3, [pc, #320]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7ff f9b3 	bl	8005258 <LL_ADC_GetCommonPathInternalCh>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a4d      	ldr	r2, [pc, #308]	; (8006030 <HAL_ADC_ConfigChannel+0x364>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d122      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f08:	d11d      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2280      	movs	r2, #128	; 0x80
 8005f0e:	0412      	lsls	r2, r2, #16
 8005f10:	4313      	orrs	r3, r2
 8005f12:	4a46      	ldr	r2, [pc, #280]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 8005f14:	0019      	movs	r1, r3
 8005f16:	0010      	movs	r0, r2
 8005f18:	f7ff f98a 	bl	8005230 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f1c:	4b45      	ldr	r3, [pc, #276]	; (8006034 <HAL_ADC_ConfigChannel+0x368>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4945      	ldr	r1, [pc, #276]	; (8006038 <HAL_ADC_ConfigChannel+0x36c>)
 8005f22:	0018      	movs	r0, r3
 8005f24:	f7fa f912 	bl	800014c <__udivsi3>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	0013      	movs	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	189b      	adds	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f36:	e002      	b.n	8005f3e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f9      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f44:	e08e      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a3c      	ldr	r2, [pc, #240]	; (800603c <HAL_ADC_ConfigChannel+0x370>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10e      	bne.n	8005f6e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	045b      	lsls	r3, r3, #17
 8005f56:	4013      	ands	r3, r2
 8005f58:	d109      	bne.n	8005f6e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	0452      	lsls	r2, r2, #17
 8005f60:	4313      	orrs	r3, r2
 8005f62:	4a32      	ldr	r2, [pc, #200]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 8005f64:	0019      	movs	r1, r3
 8005f66:	0010      	movs	r0, r2
 8005f68:	f7ff f962 	bl	8005230 <LL_ADC_SetCommonPathInternalCh>
 8005f6c:	e07a      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a33      	ldr	r2, [pc, #204]	; (8006040 <HAL_ADC_ConfigChannel+0x374>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d000      	beq.n	8005f7a <HAL_ADC_ConfigChannel+0x2ae>
 8005f78:	e074      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	2380      	movs	r3, #128	; 0x80
 8005f7e:	03db      	lsls	r3, r3, #15
 8005f80:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005f82:	d000      	beq.n	8005f86 <HAL_ADC_ConfigChannel+0x2ba>
 8005f84:	e06e      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	03d2      	lsls	r2, r2, #15
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	4a27      	ldr	r2, [pc, #156]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 8005f90:	0019      	movs	r1, r3
 8005f92:	0010      	movs	r0, r2
 8005f94:	f7ff f94c 	bl	8005230 <LL_ADC_SetCommonPathInternalCh>
 8005f98:	e064      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	2380      	movs	r3, #128	; 0x80
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d004      	beq.n	8005fb0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005faa:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <HAL_ADC_ConfigChannel+0x35c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d107      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	0019      	movs	r1, r3
 8005fba:	0010      	movs	r0, r2
 8005fbc:	f7ff f9cf 	bl	800535e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da4d      	bge.n	8006064 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f7ff f944 	bl	8005258 <LL_ADC_GetCommonPathInternalCh>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a15      	ldr	r2, [pc, #84]	; (8006030 <HAL_ADC_ConfigChannel+0x364>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4a18      	ldr	r2, [pc, #96]	; (8006044 <HAL_ADC_ConfigChannel+0x378>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	4a11      	ldr	r2, [pc, #68]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 8005fe6:	0019      	movs	r1, r3
 8005fe8:	0010      	movs	r0, r2
 8005fea:	f7ff f921 	bl	8005230 <LL_ADC_SetCommonPathInternalCh>
 8005fee:	e039      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a11      	ldr	r2, [pc, #68]	; (800603c <HAL_ADC_ConfigChannel+0x370>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d108      	bne.n	800600c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4a12      	ldr	r2, [pc, #72]	; (8006048 <HAL_ADC_ConfigChannel+0x37c>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	4a0a      	ldr	r2, [pc, #40]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 8006002:	0019      	movs	r1, r3
 8006004:	0010      	movs	r0, r2
 8006006:	f7ff f913 	bl	8005230 <LL_ADC_SetCommonPathInternalCh>
 800600a:	e02b      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <HAL_ADC_ConfigChannel+0x374>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d126      	bne.n	8006064 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4a0c      	ldr	r2, [pc, #48]	; (800604c <HAL_ADC_ConfigChannel+0x380>)
 800601a:	4013      	ands	r3, r2
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <HAL_ADC_ConfigChannel+0x360>)
 800601e:	0019      	movs	r1, r3
 8006020:	0010      	movs	r0, r2
 8006022:	f7ff f905 	bl	8005230 <LL_ADC_SetCommonPathInternalCh>
 8006026:	e01d      	b.n	8006064 <HAL_ADC_ConfigChannel+0x398>
 8006028:	80000004 	.word	0x80000004
 800602c:	40012708 	.word	0x40012708
 8006030:	b0001000 	.word	0xb0001000
 8006034:	20000000 	.word	0x20000000
 8006038:	00030d40 	.word	0x00030d40
 800603c:	b8004000 	.word	0xb8004000
 8006040:	b4002000 	.word	0xb4002000
 8006044:	ff7fffff 	.word	0xff7fffff
 8006048:	feffffff 	.word	0xfeffffff
 800604c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006054:	2220      	movs	r2, #32
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800605c:	2317      	movs	r3, #23
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	2201      	movs	r2, #1
 8006062:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2254      	movs	r2, #84	; 0x54
 8006068:	2100      	movs	r1, #0
 800606a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800606c:	2317      	movs	r3, #23
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	781b      	ldrb	r3, [r3, #0]
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b006      	add	sp, #24
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)

0800607c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	0018      	movs	r0, r3
 800608a:	f7ff fa35 	bl	80054f8 <LL_ADC_REG_IsConversionOngoing>
 800608e:	1e03      	subs	r3, r0, #0
 8006090:	d031      	beq.n	80060f6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	0018      	movs	r0, r3
 8006098:	f7ff f9f9 	bl	800548e <LL_ADC_IsDisableOngoing>
 800609c:	1e03      	subs	r3, r0, #0
 800609e:	d104      	bne.n	80060aa <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	0018      	movs	r0, r3
 80060a6:	f7ff fa15 	bl	80054d4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060aa:	f7ff f893 	bl	80051d4 <HAL_GetTick>
 80060ae:	0003      	movs	r3, r0
 80060b0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80060b2:	e01a      	b.n	80060ea <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80060b4:	f7ff f88e 	bl	80051d4 <HAL_GetTick>
 80060b8:	0002      	movs	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d913      	bls.n	80060ea <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2204      	movs	r2, #4
 80060ca:	4013      	ands	r3, r2
 80060cc:	d00d      	beq.n	80060ea <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	2210      	movs	r2, #16
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060de:	2201      	movs	r2, #1
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e006      	b.n	80060f8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2204      	movs	r2, #4
 80060f2:	4013      	ands	r3, r2
 80060f4:	d1de      	bne.n	80060b4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	0018      	movs	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b004      	add	sp, #16
 80060fe:	bd80      	pop	{r7, pc}

08006100 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006108:	2300      	movs	r3, #0
 800610a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	0018      	movs	r0, r3
 8006112:	f7ff f9ab 	bl	800546c <LL_ADC_IsEnabled>
 8006116:	1e03      	subs	r3, r0, #0
 8006118:	d000      	beq.n	800611c <ADC_Enable+0x1c>
 800611a:	e069      	b.n	80061f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	4a36      	ldr	r2, [pc, #216]	; (80061fc <ADC_Enable+0xfc>)
 8006124:	4013      	ands	r3, r2
 8006126:	d00d      	beq.n	8006144 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	2210      	movs	r2, #16
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006138:	2201      	movs	r2, #1
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e056      	b.n	80061f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	0018      	movs	r0, r3
 800614a:	f7ff f96b 	bl	8005424 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800614e:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <ADC_Enable+0x100>)
 8006150:	0018      	movs	r0, r3
 8006152:	f7ff f881 	bl	8005258 <LL_ADC_GetCommonPathInternalCh>
 8006156:	0002      	movs	r2, r0
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	4013      	ands	r3, r2
 800615e:	d00f      	beq.n	8006180 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006160:	4b28      	ldr	r3, [pc, #160]	; (8006204 <ADC_Enable+0x104>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4928      	ldr	r1, [pc, #160]	; (8006208 <ADC_Enable+0x108>)
 8006166:	0018      	movs	r0, r3
 8006168:	f7f9 fff0 	bl	800014c <__udivsi3>
 800616c:	0003      	movs	r3, r0
 800616e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8006170:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006172:	e002      	b.n	800617a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	3b01      	subs	r3, #1
 8006178:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f9      	bne.n	8006174 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7e5b      	ldrb	r3, [r3, #25]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d033      	beq.n	80061f0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006188:	f7ff f824 	bl	80051d4 <HAL_GetTick>
 800618c:	0003      	movs	r3, r0
 800618e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006190:	e027      	b.n	80061e2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	0018      	movs	r0, r3
 8006198:	f7ff f968 	bl	800546c <LL_ADC_IsEnabled>
 800619c:	1e03      	subs	r3, r0, #0
 800619e:	d104      	bne.n	80061aa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7ff f93d 	bl	8005424 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061aa:	f7ff f813 	bl	80051d4 <HAL_GetTick>
 80061ae:	0002      	movs	r2, r0
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d914      	bls.n	80061e2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2201      	movs	r2, #1
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d00d      	beq.n	80061e2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ca:	2210      	movs	r2, #16
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d6:	2201      	movs	r2, #1
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e007      	b.n	80061f2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2201      	movs	r2, #1
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d1d0      	bne.n	8006192 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	0018      	movs	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b004      	add	sp, #16
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	80000017 	.word	0x80000017
 8006200:	40012708 	.word	0x40012708
 8006204:	20000000 	.word	0x20000000
 8006208:	00030d40 	.word	0x00030d40

0800620c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	0018      	movs	r0, r3
 800621a:	f7ff f938 	bl	800548e <LL_ADC_IsDisableOngoing>
 800621e:	0003      	movs	r3, r0
 8006220:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	0018      	movs	r0, r3
 8006228:	f7ff f920 	bl	800546c <LL_ADC_IsEnabled>
 800622c:	1e03      	subs	r3, r0, #0
 800622e:	d046      	beq.n	80062be <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d143      	bne.n	80062be <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2205      	movs	r2, #5
 800623e:	4013      	ands	r3, r2
 8006240:	2b01      	cmp	r3, #1
 8006242:	d10d      	bne.n	8006260 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff f8fd 	bl	8005448 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2203      	movs	r2, #3
 8006254:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006256:	f7fe ffbd 	bl	80051d4 <HAL_GetTick>
 800625a:	0003      	movs	r3, r0
 800625c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800625e:	e028      	b.n	80062b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	2210      	movs	r2, #16
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	2201      	movs	r2, #1
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e021      	b.n	80062c0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800627c:	f7fe ffaa 	bl	80051d4 <HAL_GetTick>
 8006280:	0002      	movs	r2, r0
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d913      	bls.n	80062b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2201      	movs	r2, #1
 8006292:	4013      	ands	r3, r2
 8006294:	d00d      	beq.n	80062b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	2210      	movs	r2, #16
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a6:	2201      	movs	r2, #1
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e006      	b.n	80062c0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
 80062bc:	d1de      	bne.n	800627c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	0018      	movs	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b004      	add	sp, #16
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062da:	2250      	movs	r2, #80	; 0x50
 80062dc:	4013      	ands	r3, r2
 80062de:	d141      	bne.n	8006364 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e4:	2280      	movs	r2, #128	; 0x80
 80062e6:	0092      	lsls	r2, r2, #2
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f7fe fff1 	bl	80052da <LL_ADC_REG_IsTriggerSourceSWStart>
 80062f8:	1e03      	subs	r3, r0, #0
 80062fa:	d02e      	beq.n	800635a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	7e9b      	ldrb	r3, [r3, #26]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d12a      	bne.n	800635a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2208      	movs	r2, #8
 800630c:	4013      	ands	r3, r2
 800630e:	2b08      	cmp	r3, #8
 8006310:	d123      	bne.n	800635a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	0018      	movs	r0, r3
 8006318:	f7ff f8ee 	bl	80054f8 <LL_ADC_REG_IsConversionOngoing>
 800631c:	1e03      	subs	r3, r0, #0
 800631e:	d110      	bne.n	8006342 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	210c      	movs	r1, #12
 800632c:	438a      	bics	r2, r1
 800632e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006334:	4a15      	ldr	r2, [pc, #84]	; (800638c <ADC_DMAConvCplt+0xc4>)
 8006336:	4013      	ands	r3, r2
 8006338:	2201      	movs	r2, #1
 800633a:	431a      	orrs	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	659a      	str	r2, [r3, #88]	; 0x58
 8006340:	e00b      	b.n	800635a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	2220      	movs	r2, #32
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006352:	2201      	movs	r2, #1
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	0018      	movs	r0, r3
 800635e:	f00b fa07 	bl	8011770 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006362:	e00f      	b.n	8006384 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	2210      	movs	r2, #16
 800636a:	4013      	ands	r3, r2
 800636c:	d004      	beq.n	8006378 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	0018      	movs	r0, r3
 8006372:	f7ff fca3 	bl	8005cbc <HAL_ADC_ErrorCallback>
}
 8006376:	e005      	b.n	8006384 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	0010      	movs	r0, r2
 8006382:	4798      	blx	r3
}
 8006384:	46c0      	nop			; (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	b004      	add	sp, #16
 800638a:	bd80      	pop	{r7, pc}
 800638c:	fffffefe 	.word	0xfffffefe

08006390 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7ff fc7b 	bl	8005c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b004      	add	sp, #16
 80063ac:	bd80      	pop	{r7, pc}

080063ae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c0:	2240      	movs	r2, #64	; 0x40
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063cc:	2204      	movs	r2, #4
 80063ce:	431a      	orrs	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7ff fc70 	bl	8005cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063dc:	46c0      	nop			; (mov r8, r8)
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b002      	add	sp, #8
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	46bd      	mov	sp, r7
 8006410:	b002      	add	sp, #8
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b002      	add	sp, #8
 8006422:	bd80      	pop	{r7, pc}

08006424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	0002      	movs	r2, r0
 800642c:	1dfb      	adds	r3, r7, #7
 800642e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006430:	1dfb      	adds	r3, r7, #7
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b7f      	cmp	r3, #127	; 0x7f
 8006436:	d809      	bhi.n	800644c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006438:	1dfb      	adds	r3, r7, #7
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	001a      	movs	r2, r3
 800643e:	231f      	movs	r3, #31
 8006440:	401a      	ands	r2, r3
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <__NVIC_EnableIRQ+0x30>)
 8006444:	2101      	movs	r1, #1
 8006446:	4091      	lsls	r1, r2
 8006448:	000a      	movs	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b002      	add	sp, #8
 8006452:	bd80      	pop	{r7, pc}
 8006454:	e000e100 	.word	0xe000e100

08006458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006458:	b590      	push	{r4, r7, lr}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	0002      	movs	r2, r0
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	1dfb      	adds	r3, r7, #7
 8006464:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006466:	1dfb      	adds	r3, r7, #7
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b7f      	cmp	r3, #127	; 0x7f
 800646c:	d828      	bhi.n	80064c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800646e:	4a2f      	ldr	r2, [pc, #188]	; (800652c <__NVIC_SetPriority+0xd4>)
 8006470:	1dfb      	adds	r3, r7, #7
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b25b      	sxtb	r3, r3
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	33c0      	adds	r3, #192	; 0xc0
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	589b      	ldr	r3, [r3, r2]
 800647e:	1dfa      	adds	r2, r7, #7
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	0011      	movs	r1, r2
 8006484:	2203      	movs	r2, #3
 8006486:	400a      	ands	r2, r1
 8006488:	00d2      	lsls	r2, r2, #3
 800648a:	21ff      	movs	r1, #255	; 0xff
 800648c:	4091      	lsls	r1, r2
 800648e:	000a      	movs	r2, r1
 8006490:	43d2      	mvns	r2, r2
 8006492:	401a      	ands	r2, r3
 8006494:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	019b      	lsls	r3, r3, #6
 800649a:	22ff      	movs	r2, #255	; 0xff
 800649c:	401a      	ands	r2, r3
 800649e:	1dfb      	adds	r3, r7, #7
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	0018      	movs	r0, r3
 80064a4:	2303      	movs	r3, #3
 80064a6:	4003      	ands	r3, r0
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064ac:	481f      	ldr	r0, [pc, #124]	; (800652c <__NVIC_SetPriority+0xd4>)
 80064ae:	1dfb      	adds	r3, r7, #7
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	089b      	lsrs	r3, r3, #2
 80064b6:	430a      	orrs	r2, r1
 80064b8:	33c0      	adds	r3, #192	; 0xc0
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80064be:	e031      	b.n	8006524 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <__NVIC_SetPriority+0xd8>)
 80064c2:	1dfb      	adds	r3, r7, #7
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	0019      	movs	r1, r3
 80064c8:	230f      	movs	r3, #15
 80064ca:	400b      	ands	r3, r1
 80064cc:	3b08      	subs	r3, #8
 80064ce:	089b      	lsrs	r3, r3, #2
 80064d0:	3306      	adds	r3, #6
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	18d3      	adds	r3, r2, r3
 80064d6:	3304      	adds	r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	1dfa      	adds	r2, r7, #7
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	0011      	movs	r1, r2
 80064e0:	2203      	movs	r2, #3
 80064e2:	400a      	ands	r2, r1
 80064e4:	00d2      	lsls	r2, r2, #3
 80064e6:	21ff      	movs	r1, #255	; 0xff
 80064e8:	4091      	lsls	r1, r2
 80064ea:	000a      	movs	r2, r1
 80064ec:	43d2      	mvns	r2, r2
 80064ee:	401a      	ands	r2, r3
 80064f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	019b      	lsls	r3, r3, #6
 80064f6:	22ff      	movs	r2, #255	; 0xff
 80064f8:	401a      	ands	r2, r3
 80064fa:	1dfb      	adds	r3, r7, #7
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	0018      	movs	r0, r3
 8006500:	2303      	movs	r3, #3
 8006502:	4003      	ands	r3, r0
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006508:	4809      	ldr	r0, [pc, #36]	; (8006530 <__NVIC_SetPriority+0xd8>)
 800650a:	1dfb      	adds	r3, r7, #7
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	001c      	movs	r4, r3
 8006510:	230f      	movs	r3, #15
 8006512:	4023      	ands	r3, r4
 8006514:	3b08      	subs	r3, #8
 8006516:	089b      	lsrs	r3, r3, #2
 8006518:	430a      	orrs	r2, r1
 800651a:	3306      	adds	r3, #6
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	18c3      	adds	r3, r0, r3
 8006520:	3304      	adds	r3, #4
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b003      	add	sp, #12
 800652a:	bd90      	pop	{r4, r7, pc}
 800652c:	e000e100 	.word	0xe000e100
 8006530:	e000ed00 	.word	0xe000ed00

08006534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	1e5a      	subs	r2, r3, #1
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	045b      	lsls	r3, r3, #17
 8006544:	429a      	cmp	r2, r3
 8006546:	d301      	bcc.n	800654c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006548:	2301      	movs	r3, #1
 800654a:	e010      	b.n	800656e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <SysTick_Config+0x44>)
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	3a01      	subs	r2, #1
 8006552:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006554:	2301      	movs	r3, #1
 8006556:	425b      	negs	r3, r3
 8006558:	2103      	movs	r1, #3
 800655a:	0018      	movs	r0, r3
 800655c:	f7ff ff7c 	bl	8006458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <SysTick_Config+0x44>)
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <SysTick_Config+0x44>)
 8006568:	2207      	movs	r2, #7
 800656a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800656c:	2300      	movs	r3, #0
}
 800656e:	0018      	movs	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	b002      	add	sp, #8
 8006574:	bd80      	pop	{r7, pc}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	e000e010 	.word	0xe000e010

0800657c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	210f      	movs	r1, #15
 8006588:	187b      	adds	r3, r7, r1
 800658a:	1c02      	adds	r2, r0, #0
 800658c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	187b      	adds	r3, r7, r1
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b25b      	sxtb	r3, r3
 8006596:	0011      	movs	r1, r2
 8006598:	0018      	movs	r0, r3
 800659a:	f7ff ff5d 	bl	8006458 <__NVIC_SetPriority>
}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b004      	add	sp, #16
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	0002      	movs	r2, r0
 80065ae:	1dfb      	adds	r3, r7, #7
 80065b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065b2:	1dfb      	adds	r3, r7, #7
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	b25b      	sxtb	r3, r3
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff ff33 	bl	8006424 <__NVIC_EnableIRQ>
}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	46bd      	mov	sp, r7
 80065c2:	b002      	add	sp, #8
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7ff ffaf 	bl	8006534 <SysTick_Config>
 80065d6:	0003      	movs	r3, r0
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b002      	add	sp, #8
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e077      	b.n	80066e2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a3d      	ldr	r2, [pc, #244]	; (80066ec <HAL_DMA_Init+0x10c>)
 80065f8:	4694      	mov	ip, r2
 80065fa:	4463      	add	r3, ip
 80065fc:	2114      	movs	r1, #20
 80065fe:	0018      	movs	r0, r3
 8006600:	f7f9 fda4 	bl	800014c <__udivsi3>
 8006604:	0003      	movs	r3, r0
 8006606:	009a      	lsls	r2, r3, #2
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2225      	movs	r2, #37	; 0x25
 8006610:	2102      	movs	r1, #2
 8006612:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4934      	ldr	r1, [pc, #208]	; (80066f0 <HAL_DMA_Init+0x110>)
 8006620:	400a      	ands	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6819      	ldr	r1, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fa97 	bl	8006b90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	01db      	lsls	r3, r3, #7
 800666a:	429a      	cmp	r2, r3
 800666c:	d102      	bne.n	8006674 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	213f      	movs	r1, #63	; 0x3f
 800667e:	400a      	ands	r2, r1
 8006680:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800668a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d011      	beq.n	80066b8 <HAL_DMA_Init+0xd8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b04      	cmp	r3, #4
 800669a:	d80d      	bhi.n	80066b8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0018      	movs	r0, r3
 80066a0:	f000 faa2 	bl	8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e008      	b.n	80066ca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2225      	movs	r2, #37	; 0x25
 80066d4:	2101      	movs	r1, #1
 80066d6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2224      	movs	r2, #36	; 0x24
 80066dc:	2100      	movs	r1, #0
 80066de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	0018      	movs	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b002      	add	sp, #8
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	bffdfff8 	.word	0xbffdfff8
 80066f0:	ffff800f 	.word	0xffff800f

080066f4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006702:	2317      	movs	r3, #23
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2224      	movs	r2, #36	; 0x24
 800670e:	5c9b      	ldrb	r3, [r3, r2]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_DMA_Start_IT+0x24>
 8006714:	2302      	movs	r3, #2
 8006716:	e06f      	b.n	80067f8 <HAL_DMA_Start_IT+0x104>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2224      	movs	r2, #36	; 0x24
 800671c:	2101      	movs	r1, #1
 800671e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2225      	movs	r2, #37	; 0x25
 8006724:	5c9b      	ldrb	r3, [r3, r2]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d157      	bne.n	80067dc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2225      	movs	r2, #37	; 0x25
 8006730:	2102      	movs	r1, #2
 8006732:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2101      	movs	r1, #1
 8006746:	438a      	bics	r2, r1
 8006748:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f9dd 	bl	8006b10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	2b00      	cmp	r3, #0
 800675c:	d008      	beq.n	8006770 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	210e      	movs	r1, #14
 800676a:	430a      	orrs	r2, r1
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e00f      	b.n	8006790 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2104      	movs	r1, #4
 800677c:	438a      	bics	r2, r1
 800677e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	210a      	movs	r1, #10
 800678c:	430a      	orrs	r2, r1
 800678e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	025b      	lsls	r3, r3, #9
 800679a:	4013      	ands	r3, r2
 800679c:	d008      	beq.n	80067b0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a8:	2180      	movs	r1, #128	; 0x80
 80067aa:	0049      	lsls	r1, r1, #1
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	0049      	lsls	r1, r1, #1
 80067c6:	430a      	orrs	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2101      	movs	r1, #1
 80067d6:	430a      	orrs	r2, r1
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e00a      	b.n	80067f2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2280      	movs	r2, #128	; 0x80
 80067e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2224      	movs	r2, #36	; 0x24
 80067e6:	2100      	movs	r1, #0
 80067e8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80067ea:	2317      	movs	r3, #23
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	2201      	movs	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80067f2:	2317      	movs	r3, #23
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	781b      	ldrb	r3, [r3, #0]
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b006      	add	sp, #24
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e050      	b.n	80068b4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2225      	movs	r2, #37	; 0x25
 8006816:	5c9b      	ldrb	r3, [r3, r2]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d008      	beq.n	8006830 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2204      	movs	r2, #4
 8006822:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2224      	movs	r2, #36	; 0x24
 8006828:	2100      	movs	r1, #0
 800682a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e041      	b.n	80068b4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	210e      	movs	r1, #14
 800683c:	438a      	bics	r2, r1
 800683e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	491c      	ldr	r1, [pc, #112]	; (80068bc <HAL_DMA_Abort+0xbc>)
 800684c:	400a      	ands	r2, r1
 800684e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2101      	movs	r1, #1
 800685c:	438a      	bics	r2, r1
 800685e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <HAL_DMA_Abort+0xc0>)
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	221c      	movs	r2, #28
 800686a:	4013      	ands	r3, r2
 800686c:	2201      	movs	r2, #1
 800686e:	409a      	lsls	r2, r3
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <HAL_DMA_Abort+0xc0>)
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800687e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00c      	beq.n	80068a2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006892:	490a      	ldr	r1, [pc, #40]	; (80068bc <HAL_DMA_Abort+0xbc>)
 8006894:	400a      	ands	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80068a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2225      	movs	r2, #37	; 0x25
 80068a6:	2101      	movs	r1, #1
 80068a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2224      	movs	r2, #36	; 0x24
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	0018      	movs	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b002      	add	sp, #8
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	fffffeff 	.word	0xfffffeff
 80068c0:	40020000 	.word	0x40020000

080068c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068cc:	210f      	movs	r1, #15
 80068ce:	187b      	adds	r3, r7, r1
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2225      	movs	r2, #37	; 0x25
 80068d8:	5c9b      	ldrb	r3, [r3, r2]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d006      	beq.n	80068ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2204      	movs	r2, #4
 80068e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80068e6:	187b      	adds	r3, r7, r1
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e049      	b.n	8006982 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	210e      	movs	r1, #14
 80068fa:	438a      	bics	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2101      	movs	r1, #1
 800690a:	438a      	bics	r2, r1
 800690c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006918:	491d      	ldr	r1, [pc, #116]	; (8006990 <HAL_DMA_Abort_IT+0xcc>)
 800691a:	400a      	ands	r2, r1
 800691c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800691e:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <HAL_DMA_Abort_IT+0xd0>)
 8006920:	6859      	ldr	r1, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	221c      	movs	r2, #28
 8006928:	4013      	ands	r3, r2
 800692a:	2201      	movs	r2, #1
 800692c:	409a      	lsls	r2, r3
 800692e:	4b19      	ldr	r3, [pc, #100]	; (8006994 <HAL_DMA_Abort_IT+0xd0>)
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800693c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	490f      	ldr	r1, [pc, #60]	; (8006990 <HAL_DMA_Abort_IT+0xcc>)
 8006952:	400a      	ands	r2, r1
 8006954:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800695e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2225      	movs	r2, #37	; 0x25
 8006964:	2101      	movs	r1, #1
 8006966:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2224      	movs	r2, #36	; 0x24
 800696c:	2100      	movs	r1, #0
 800696e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	0010      	movs	r0, r2
 8006980:	4798      	blx	r3
    }
  }
  return status;
 8006982:	230f      	movs	r3, #15
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	781b      	ldrb	r3, [r3, #0]
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b004      	add	sp, #16
 800698e:	bd80      	pop	{r7, pc}
 8006990:	fffffeff 	.word	0xfffffeff
 8006994:	40020000 	.word	0x40020000

08006998 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80069a0:	4b55      	ldr	r3, [pc, #340]	; (8006af8 <HAL_DMA_IRQHandler+0x160>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	221c      	movs	r2, #28
 80069b4:	4013      	ands	r3, r2
 80069b6:	2204      	movs	r2, #4
 80069b8:	409a      	lsls	r2, r3
 80069ba:	0013      	movs	r3, r2
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4013      	ands	r3, r2
 80069c0:	d027      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x7a>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2204      	movs	r2, #4
 80069c6:	4013      	ands	r3, r2
 80069c8:	d023      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2220      	movs	r2, #32
 80069d2:	4013      	ands	r3, r2
 80069d4:	d107      	bne.n	80069e6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2104      	movs	r1, #4
 80069e2:	438a      	bics	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80069e6:	4b44      	ldr	r3, [pc, #272]	; (8006af8 <HAL_DMA_IRQHandler+0x160>)
 80069e8:	6859      	ldr	r1, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	221c      	movs	r2, #28
 80069f0:	4013      	ands	r3, r2
 80069f2:	2204      	movs	r2, #4
 80069f4:	409a      	lsls	r2, r3
 80069f6:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <HAL_DMA_IRQHandler+0x160>)
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d100      	bne.n	8006a06 <HAL_DMA_IRQHandler+0x6e>
 8006a04:	e073      	b.n	8006aee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	0010      	movs	r0, r2
 8006a0e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006a10:	e06d      	b.n	8006aee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	221c      	movs	r2, #28
 8006a18:	4013      	ands	r3, r2
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	409a      	lsls	r2, r3
 8006a1e:	0013      	movs	r3, r2
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4013      	ands	r3, r2
 8006a24:	d02e      	beq.n	8006a84 <HAL_DMA_IRQHandler+0xec>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d02a      	beq.n	8006a84 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2220      	movs	r2, #32
 8006a36:	4013      	ands	r3, r2
 8006a38:	d10b      	bne.n	8006a52 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	210a      	movs	r1, #10
 8006a46:	438a      	bics	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2225      	movs	r2, #37	; 0x25
 8006a4e:	2101      	movs	r1, #1
 8006a50:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006a52:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <HAL_DMA_IRQHandler+0x160>)
 8006a54:	6859      	ldr	r1, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	221c      	movs	r2, #28
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2202      	movs	r2, #2
 8006a60:	409a      	lsls	r2, r3
 8006a62:	4b25      	ldr	r3, [pc, #148]	; (8006af8 <HAL_DMA_IRQHandler+0x160>)
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2224      	movs	r2, #36	; 0x24
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d03a      	beq.n	8006aee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	0010      	movs	r0, r2
 8006a80:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006a82:	e034      	b.n	8006aee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	221c      	movs	r2, #28
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	0013      	movs	r3, r2
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4013      	ands	r3, r2
 8006a96:	d02b      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x158>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d027      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	210e      	movs	r1, #14
 8006aac:	438a      	bics	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <HAL_DMA_IRQHandler+0x160>)
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	221c      	movs	r2, #28
 8006aba:	4013      	ands	r3, r2
 8006abc:	2201      	movs	r2, #1
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <HAL_DMA_IRQHandler+0x160>)
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2225      	movs	r2, #37	; 0x25
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2224      	movs	r2, #36	; 0x24
 8006ad8:	2100      	movs	r1, #0
 8006ada:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	0010      	movs	r0, r2
 8006aec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	46c0      	nop			; (mov r8, r8)
}
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b004      	add	sp, #16
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40020000 	.word	0x40020000

08006afc <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006b26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b38:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006b3a:	4b14      	ldr	r3, [pc, #80]	; (8006b8c <DMA_SetConfig+0x7c>)
 8006b3c:	6859      	ldr	r1, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	221c      	movs	r2, #28
 8006b44:	4013      	ands	r3, r2
 8006b46:	2201      	movs	r2, #1
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <DMA_SetConfig+0x7c>)
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d108      	bne.n	8006b72 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b70:	e007      	b.n	8006b82 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	60da      	str	r2, [r3, #12]
}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b004      	add	sp, #16
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	40020000 	.word	0x40020000

08006b90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	089b      	lsrs	r3, r3, #2
 8006b9e:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006ba0:	4694      	mov	ip, r2
 8006ba2:	4463      	add	r3, ip
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	001a      	movs	r2, r3
 8006bb2:	23ff      	movs	r3, #255	; 0xff
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	3b08      	subs	r3, #8
 8006bb8:	2114      	movs	r1, #20
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7f9 fac6 	bl	800014c <__udivsi3>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006bc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	221f      	movs	r2, #31
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b004      	add	sp, #16
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	10008200 	.word	0x10008200
 8006be4:	40020880 	.word	0x40020880

08006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	223f      	movs	r2, #63	; 0x3f
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006bfe:	4694      	mov	ip, r2
 8006c00:	4463      	add	r3, ip
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	001a      	movs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a07      	ldr	r2, [pc, #28]	; (8006c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2203      	movs	r2, #3
 8006c16:	4013      	ands	r3, r2
 8006c18:	2201      	movs	r2, #1
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006c20:	46c0      	nop			; (mov r8, r8)
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b004      	add	sp, #16
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	1000823f 	.word	0x1000823f
 8006c2c:	40020940 	.word	0x40020940

08006c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c3e:	e147      	b.n	8006ed0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2101      	movs	r1, #1
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4091      	lsls	r1, r2
 8006c4a:	000a      	movs	r2, r1
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d100      	bne.n	8006c58 <HAL_GPIO_Init+0x28>
 8006c56:	e138      	b.n	8006eca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d005      	beq.n	8006c70 <HAL_GPIO_Init+0x40>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d130      	bne.n	8006cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	409a      	lsls	r2, r3
 8006c7e:	0013      	movs	r3, r2
 8006c80:	43da      	mvns	r2, r3
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4013      	ands	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	409a      	lsls	r2, r3
 8006c92:	0013      	movs	r3, r2
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	409a      	lsls	r2, r3
 8006cac:	0013      	movs	r3, r2
 8006cae:	43da      	mvns	r2, r3
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	0013      	movs	r3, r2
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d017      	beq.n	8006d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	2203      	movs	r2, #3
 8006cea:	409a      	lsls	r2, r3
 8006cec:	0013      	movs	r3, r2
 8006cee:	43da      	mvns	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	409a      	lsls	r2, r3
 8006d00:	0013      	movs	r3, r2
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2203      	movs	r2, #3
 8006d14:	4013      	ands	r3, r2
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d123      	bne.n	8006d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	08da      	lsrs	r2, r3, #3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3208      	adds	r2, #8
 8006d22:	0092      	lsls	r2, r2, #2
 8006d24:	58d3      	ldr	r3, [r2, r3]
 8006d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2207      	movs	r2, #7
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	220f      	movs	r2, #15
 8006d32:	409a      	lsls	r2, r3
 8006d34:	0013      	movs	r3, r2
 8006d36:	43da      	mvns	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2107      	movs	r1, #7
 8006d46:	400b      	ands	r3, r1
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	0013      	movs	r3, r2
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	08da      	lsrs	r2, r3, #3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3208      	adds	r2, #8
 8006d5c:	0092      	lsls	r2, r2, #2
 8006d5e:	6939      	ldr	r1, [r7, #16]
 8006d60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	0013      	movs	r3, r2
 8006d72:	43da      	mvns	r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4013      	ands	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	401a      	ands	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	409a      	lsls	r2, r3
 8006d88:	0013      	movs	r3, r2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	23c0      	movs	r3, #192	; 0xc0
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	4013      	ands	r3, r2
 8006da0:	d100      	bne.n	8006da4 <HAL_GPIO_Init+0x174>
 8006da2:	e092      	b.n	8006eca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006da4:	4a50      	ldr	r2, [pc, #320]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	089b      	lsrs	r3, r3, #2
 8006daa:	3318      	adds	r3, #24
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	589b      	ldr	r3, [r3, r2]
 8006db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2203      	movs	r2, #3
 8006db6:	4013      	ands	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	220f      	movs	r2, #15
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	0013      	movs	r3, r2
 8006dc0:	43da      	mvns	r2, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	23a0      	movs	r3, #160	; 0xa0
 8006dcc:	05db      	lsls	r3, r3, #23
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d013      	beq.n	8006dfa <HAL_GPIO_Init+0x1ca>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a45      	ldr	r2, [pc, #276]	; (8006eec <HAL_GPIO_Init+0x2bc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00d      	beq.n	8006df6 <HAL_GPIO_Init+0x1c6>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a44      	ldr	r2, [pc, #272]	; (8006ef0 <HAL_GPIO_Init+0x2c0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d007      	beq.n	8006df2 <HAL_GPIO_Init+0x1c2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a43      	ldr	r2, [pc, #268]	; (8006ef4 <HAL_GPIO_Init+0x2c4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d101      	bne.n	8006dee <HAL_GPIO_Init+0x1be>
 8006dea:	2303      	movs	r3, #3
 8006dec:	e006      	b.n	8006dfc <HAL_GPIO_Init+0x1cc>
 8006dee:	2305      	movs	r3, #5
 8006df0:	e004      	b.n	8006dfc <HAL_GPIO_Init+0x1cc>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e002      	b.n	8006dfc <HAL_GPIO_Init+0x1cc>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <HAL_GPIO_Init+0x1cc>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	2103      	movs	r1, #3
 8006e00:	400a      	ands	r2, r1
 8006e02:	00d2      	lsls	r2, r2, #3
 8006e04:	4093      	lsls	r3, r2
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006e0c:	4936      	ldr	r1, [pc, #216]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	3318      	adds	r3, #24
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e1a:	4b33      	ldr	r3, [pc, #204]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	43da      	mvns	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4013      	ands	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	2380      	movs	r3, #128	; 0x80
 8006e30:	035b      	lsls	r3, r3, #13
 8006e32:	4013      	ands	r3, r2
 8006e34:	d003      	beq.n	8006e3e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006e44:	4b28      	ldr	r3, [pc, #160]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	43da      	mvns	r2, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	4013      	ands	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	039b      	lsls	r3, r3, #14
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e68:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e70:	2384      	movs	r3, #132	; 0x84
 8006e72:	58d3      	ldr	r3, [r2, r3]
 8006e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	43da      	mvns	r2, r3
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	4013      	ands	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e94:	4914      	ldr	r1, [pc, #80]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e96:	2284      	movs	r2, #132	; 0x84
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006e9c:	4a12      	ldr	r2, [pc, #72]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006e9e:	2380      	movs	r3, #128	; 0x80
 8006ea0:	58d3      	ldr	r3, [r2, r3]
 8006ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	2380      	movs	r3, #128	; 0x80
 8006eb4:	025b      	lsls	r3, r3, #9
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ec2:	4909      	ldr	r1, [pc, #36]	; (8006ee8 <HAL_GPIO_Init+0x2b8>)
 8006ec4:	2280      	movs	r2, #128	; 0x80
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	40da      	lsrs	r2, r3
 8006ed8:	1e13      	subs	r3, r2, #0
 8006eda:	d000      	beq.n	8006ede <HAL_GPIO_Init+0x2ae>
 8006edc:	e6b0      	b.n	8006c40 <HAL_GPIO_Init+0x10>
  }
}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	46c0      	nop			; (mov r8, r8)
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b006      	add	sp, #24
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40021800 	.word	0x40021800
 8006eec:	50000400 	.word	0x50000400
 8006ef0:	50000800 	.word	0x50000800
 8006ef4:	50000c00 	.word	0x50000c00

08006ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	000a      	movs	r2, r1
 8006f02:	1cbb      	adds	r3, r7, #2
 8006f04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	1cba      	adds	r2, r7, #2
 8006f0c:	8812      	ldrh	r2, [r2, #0]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006f12:	230f      	movs	r3, #15
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	e003      	b.n	8006f24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f1c:	230f      	movs	r3, #15
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006f24:	230f      	movs	r3, #15
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	781b      	ldrb	r3, [r3, #0]
}
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b004      	add	sp, #16
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	0008      	movs	r0, r1
 8006f3c:	0011      	movs	r1, r2
 8006f3e:	1cbb      	adds	r3, r7, #2
 8006f40:	1c02      	adds	r2, r0, #0
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	1c7b      	adds	r3, r7, #1
 8006f46:	1c0a      	adds	r2, r1, #0
 8006f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f4a:	1c7b      	adds	r3, r7, #1
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f52:	1cbb      	adds	r3, r7, #2
 8006f54:	881a      	ldrh	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f5a:	e003      	b.n	8006f64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f5c:	1cbb      	adds	r3, r7, #2
 8006f5e:	881a      	ldrh	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f64:	46c0      	nop			; (mov r8, r8)
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b002      	add	sp, #8
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	0019      	movs	r1, r3
 8006f7e:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d11f      	bne.n	8006fd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006f90:	4b14      	ldr	r3, [pc, #80]	; (8006fe4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	0013      	movs	r3, r2
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	189b      	adds	r3, r3, r2
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	4912      	ldr	r1, [pc, #72]	; (8006fe8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f7f9 f8d4 	bl	800014c <__udivsi3>
 8006fa4:	0003      	movs	r3, r0
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006faa:	e008      	b.n	8006fbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e001      	b.n	8006fbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e009      	b.n	8006fd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	2380      	movs	r3, #128	; 0x80
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	401a      	ands	r2, r3
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d0ed      	beq.n	8006fac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b004      	add	sp, #16
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	40007000 	.word	0x40007000
 8006fe0:	fffff9ff 	.word	0xfffff9ff
 8006fe4:	20000000 	.word	0x20000000
 8006fe8:	000f4240 	.word	0x000f4240

08006fec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006ff0:	4b03      	ldr	r3, [pc, #12]	; (8007000 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	23e0      	movs	r3, #224	; 0xe0
 8006ff6:	01db      	lsls	r3, r3, #7
 8006ff8:	4013      	ands	r3, r2
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40021000 	.word	0x40021000

08007004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e2f3      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2201      	movs	r2, #1
 800701c:	4013      	ands	r3, r2
 800701e:	d100      	bne.n	8007022 <HAL_RCC_OscConfig+0x1e>
 8007020:	e07c      	b.n	800711c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007022:	4bc3      	ldr	r3, [pc, #780]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2238      	movs	r2, #56	; 0x38
 8007028:	4013      	ands	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800702c:	4bc0      	ldr	r3, [pc, #768]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2203      	movs	r2, #3
 8007032:	4013      	ands	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b10      	cmp	r3, #16
 800703a:	d102      	bne.n	8007042 <HAL_RCC_OscConfig+0x3e>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b03      	cmp	r3, #3
 8007040:	d002      	beq.n	8007048 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d10b      	bne.n	8007060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	4bb9      	ldr	r3, [pc, #740]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	029b      	lsls	r3, r3, #10
 8007050:	4013      	ands	r3, r2
 8007052:	d062      	beq.n	800711a <HAL_RCC_OscConfig+0x116>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d15e      	bne.n	800711a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e2ce      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	025b      	lsls	r3, r3, #9
 8007068:	429a      	cmp	r2, r3
 800706a:	d107      	bne.n	800707c <HAL_RCC_OscConfig+0x78>
 800706c:	4bb0      	ldr	r3, [pc, #704]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	4baf      	ldr	r3, [pc, #700]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007072:	2180      	movs	r1, #128	; 0x80
 8007074:	0249      	lsls	r1, r1, #9
 8007076:	430a      	orrs	r2, r1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e020      	b.n	80070be <HAL_RCC_OscConfig+0xba>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	23a0      	movs	r3, #160	; 0xa0
 8007082:	02db      	lsls	r3, r3, #11
 8007084:	429a      	cmp	r2, r3
 8007086:	d10e      	bne.n	80070a6 <HAL_RCC_OscConfig+0xa2>
 8007088:	4ba9      	ldr	r3, [pc, #676]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4ba8      	ldr	r3, [pc, #672]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	02c9      	lsls	r1, r1, #11
 8007092:	430a      	orrs	r2, r1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	4ba6      	ldr	r3, [pc, #664]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4ba5      	ldr	r3, [pc, #660]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	0249      	lsls	r1, r1, #9
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e00b      	b.n	80070be <HAL_RCC_OscConfig+0xba>
 80070a6:	4ba2      	ldr	r3, [pc, #648]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4ba1      	ldr	r3, [pc, #644]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80070ac:	49a1      	ldr	r1, [pc, #644]	; (8007334 <HAL_RCC_OscConfig+0x330>)
 80070ae:	400a      	ands	r2, r1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	4b9f      	ldr	r3, [pc, #636]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b9e      	ldr	r3, [pc, #632]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80070b8:	499f      	ldr	r1, [pc, #636]	; (8007338 <HAL_RCC_OscConfig+0x334>)
 80070ba:	400a      	ands	r2, r1
 80070bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d014      	beq.n	80070f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c6:	f7fe f885 	bl	80051d4 <HAL_GetTick>
 80070ca:	0003      	movs	r3, r0
 80070cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fe f880 	bl	80051d4 <HAL_GetTick>
 80070d4:	0002      	movs	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e28d      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070e2:	4b93      	ldr	r3, [pc, #588]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	2380      	movs	r3, #128	; 0x80
 80070e8:	029b      	lsls	r3, r3, #10
 80070ea:	4013      	ands	r3, r2
 80070ec:	d0f0      	beq.n	80070d0 <HAL_RCC_OscConfig+0xcc>
 80070ee:	e015      	b.n	800711c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f0:	f7fe f870 	bl	80051d4 <HAL_GetTick>
 80070f4:	0003      	movs	r3, r0
 80070f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070fa:	f7fe f86b 	bl	80051d4 <HAL_GetTick>
 80070fe:	0002      	movs	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b64      	cmp	r3, #100	; 0x64
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e278      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800710c:	4b88      	ldr	r3, [pc, #544]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	029b      	lsls	r3, r3, #10
 8007114:	4013      	ands	r3, r2
 8007116:	d1f0      	bne.n	80070fa <HAL_RCC_OscConfig+0xf6>
 8007118:	e000      	b.n	800711c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800711a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2202      	movs	r2, #2
 8007122:	4013      	ands	r3, r2
 8007124:	d100      	bne.n	8007128 <HAL_RCC_OscConfig+0x124>
 8007126:	e099      	b.n	800725c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007128:	4b81      	ldr	r3, [pc, #516]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	2238      	movs	r2, #56	; 0x38
 800712e:	4013      	ands	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007132:	4b7f      	ldr	r3, [pc, #508]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	2203      	movs	r2, #3
 8007138:	4013      	ands	r3, r2
 800713a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b10      	cmp	r3, #16
 8007140:	d102      	bne.n	8007148 <HAL_RCC_OscConfig+0x144>
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d002      	beq.n	800714e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d135      	bne.n	80071ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800714e:	4b78      	ldr	r3, [pc, #480]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	2380      	movs	r3, #128	; 0x80
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	4013      	ands	r3, r2
 8007158:	d005      	beq.n	8007166 <HAL_RCC_OscConfig+0x162>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e24b      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007166:	4b72      	ldr	r3, [pc, #456]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	4a74      	ldr	r2, [pc, #464]	; (800733c <HAL_RCC_OscConfig+0x338>)
 800716c:	4013      	ands	r3, r2
 800716e:	0019      	movs	r1, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	021a      	lsls	r2, r3, #8
 8007176:	4b6e      	ldr	r3, [pc, #440]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d112      	bne.n	80071a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007182:	4b6b      	ldr	r3, [pc, #428]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6e      	ldr	r2, [pc, #440]	; (8007340 <HAL_RCC_OscConfig+0x33c>)
 8007188:	4013      	ands	r3, r2
 800718a:	0019      	movs	r1, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	4b67      	ldr	r3, [pc, #412]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007192:	430a      	orrs	r2, r1
 8007194:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007196:	4b66      	ldr	r3, [pc, #408]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	0adb      	lsrs	r3, r3, #11
 800719c:	2207      	movs	r2, #7
 800719e:	4013      	ands	r3, r2
 80071a0:	4a68      	ldr	r2, [pc, #416]	; (8007344 <HAL_RCC_OscConfig+0x340>)
 80071a2:	40da      	lsrs	r2, r3
 80071a4:	4b68      	ldr	r3, [pc, #416]	; (8007348 <HAL_RCC_OscConfig+0x344>)
 80071a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071a8:	4b68      	ldr	r3, [pc, #416]	; (800734c <HAL_RCC_OscConfig+0x348>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	0018      	movs	r0, r3
 80071ae:	f7fd ffb5 	bl	800511c <HAL_InitTick>
 80071b2:	1e03      	subs	r3, r0, #0
 80071b4:	d051      	beq.n	800725a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e221      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d030      	beq.n	8007224 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071c2:	4b5b      	ldr	r3, [pc, #364]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a5e      	ldr	r2, [pc, #376]	; (8007340 <HAL_RCC_OscConfig+0x33c>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	0019      	movs	r1, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	4b57      	ldr	r3, [pc, #348]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80071d2:	430a      	orrs	r2, r1
 80071d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80071d6:	4b56      	ldr	r3, [pc, #344]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b55      	ldr	r3, [pc, #340]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80071dc:	2180      	movs	r1, #128	; 0x80
 80071de:	0049      	lsls	r1, r1, #1
 80071e0:	430a      	orrs	r2, r1
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fd fff6 	bl	80051d4 <HAL_GetTick>
 80071e8:	0003      	movs	r3, r0
 80071ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071ee:	f7fd fff1 	bl	80051d4 <HAL_GetTick>
 80071f2:	0002      	movs	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e1fe      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007200:	4b4b      	ldr	r3, [pc, #300]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	2380      	movs	r3, #128	; 0x80
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4013      	ands	r3, r2
 800720a:	d0f0      	beq.n	80071ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800720c:	4b48      	ldr	r3, [pc, #288]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	4a4a      	ldr	r2, [pc, #296]	; (800733c <HAL_RCC_OscConfig+0x338>)
 8007212:	4013      	ands	r3, r2
 8007214:	0019      	movs	r1, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	021a      	lsls	r2, r3, #8
 800721c:	4b44      	ldr	r3, [pc, #272]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	e01b      	b.n	800725c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007224:	4b42      	ldr	r3, [pc, #264]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b41      	ldr	r3, [pc, #260]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800722a:	4949      	ldr	r1, [pc, #292]	; (8007350 <HAL_RCC_OscConfig+0x34c>)
 800722c:	400a      	ands	r2, r1
 800722e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fd ffd0 	bl	80051d4 <HAL_GetTick>
 8007234:	0003      	movs	r3, r0
 8007236:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800723a:	f7fd ffcb 	bl	80051d4 <HAL_GetTick>
 800723e:	0002      	movs	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e1d8      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800724c:	4b38      	ldr	r3, [pc, #224]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	4013      	ands	r3, r2
 8007256:	d1f0      	bne.n	800723a <HAL_RCC_OscConfig+0x236>
 8007258:	e000      	b.n	800725c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800725a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2208      	movs	r2, #8
 8007262:	4013      	ands	r3, r2
 8007264:	d047      	beq.n	80072f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007266:	4b32      	ldr	r3, [pc, #200]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2238      	movs	r2, #56	; 0x38
 800726c:	4013      	ands	r3, r2
 800726e:	2b18      	cmp	r3, #24
 8007270:	d10a      	bne.n	8007288 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007272:	4b2f      	ldr	r3, [pc, #188]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007276:	2202      	movs	r2, #2
 8007278:	4013      	ands	r3, r2
 800727a:	d03c      	beq.n	80072f6 <HAL_RCC_OscConfig+0x2f2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d138      	bne.n	80072f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e1ba      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d019      	beq.n	80072c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007290:	4b27      	ldr	r3, [pc, #156]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007294:	4b26      	ldr	r3, [pc, #152]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007296:	2101      	movs	r1, #1
 8007298:	430a      	orrs	r2, r1
 800729a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729c:	f7fd ff9a 	bl	80051d4 <HAL_GetTick>
 80072a0:	0003      	movs	r3, r0
 80072a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a6:	f7fd ff95 	bl	80051d4 <HAL_GetTick>
 80072aa:	0002      	movs	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e1a2      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072b8:	4b1d      	ldr	r3, [pc, #116]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80072ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072bc:	2202      	movs	r2, #2
 80072be:	4013      	ands	r3, r2
 80072c0:	d0f1      	beq.n	80072a6 <HAL_RCC_OscConfig+0x2a2>
 80072c2:	e018      	b.n	80072f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80072c4:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80072c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072c8:	4b19      	ldr	r3, [pc, #100]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80072ca:	2101      	movs	r1, #1
 80072cc:	438a      	bics	r2, r1
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d0:	f7fd ff80 	bl	80051d4 <HAL_GetTick>
 80072d4:	0003      	movs	r3, r0
 80072d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072da:	f7fd ff7b 	bl	80051d4 <HAL_GetTick>
 80072de:	0002      	movs	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e188      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072ec:	4b10      	ldr	r3, [pc, #64]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 80072ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f0:	2202      	movs	r2, #2
 80072f2:	4013      	ands	r3, r2
 80072f4:	d1f1      	bne.n	80072da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2204      	movs	r2, #4
 80072fc:	4013      	ands	r3, r2
 80072fe:	d100      	bne.n	8007302 <HAL_RCC_OscConfig+0x2fe>
 8007300:	e0c6      	b.n	8007490 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007302:	231f      	movs	r3, #31
 8007304:	18fb      	adds	r3, r7, r3
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2238      	movs	r2, #56	; 0x38
 8007310:	4013      	ands	r3, r2
 8007312:	2b20      	cmp	r3, #32
 8007314:	d11e      	bne.n	8007354 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007316:	4b06      	ldr	r3, [pc, #24]	; (8007330 <HAL_RCC_OscConfig+0x32c>)
 8007318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731a:	2202      	movs	r2, #2
 800731c:	4013      	ands	r3, r2
 800731e:	d100      	bne.n	8007322 <HAL_RCC_OscConfig+0x31e>
 8007320:	e0b6      	b.n	8007490 <HAL_RCC_OscConfig+0x48c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d000      	beq.n	800732c <HAL_RCC_OscConfig+0x328>
 800732a:	e0b1      	b.n	8007490 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e166      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
 8007330:	40021000 	.word	0x40021000
 8007334:	fffeffff 	.word	0xfffeffff
 8007338:	fffbffff 	.word	0xfffbffff
 800733c:	ffff80ff 	.word	0xffff80ff
 8007340:	ffffc7ff 	.word	0xffffc7ff
 8007344:	00f42400 	.word	0x00f42400
 8007348:	20000000 	.word	0x20000000
 800734c:	20000008 	.word	0x20000008
 8007350:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007354:	4bac      	ldr	r3, [pc, #688]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	055b      	lsls	r3, r3, #21
 800735c:	4013      	ands	r3, r2
 800735e:	d101      	bne.n	8007364 <HAL_RCC_OscConfig+0x360>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <HAL_RCC_OscConfig+0x362>
 8007364:	2300      	movs	r3, #0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d011      	beq.n	800738e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800736a:	4ba7      	ldr	r3, [pc, #668]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800736c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800736e:	4ba6      	ldr	r3, [pc, #664]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007370:	2180      	movs	r1, #128	; 0x80
 8007372:	0549      	lsls	r1, r1, #21
 8007374:	430a      	orrs	r2, r1
 8007376:	63da      	str	r2, [r3, #60]	; 0x3c
 8007378:	4ba3      	ldr	r3, [pc, #652]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800737a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	055b      	lsls	r3, r3, #21
 8007380:	4013      	ands	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007386:	231f      	movs	r3, #31
 8007388:	18fb      	adds	r3, r7, r3
 800738a:	2201      	movs	r2, #1
 800738c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800738e:	4b9f      	ldr	r3, [pc, #636]	; (800760c <HAL_RCC_OscConfig+0x608>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	4013      	ands	r3, r2
 8007398:	d11a      	bne.n	80073d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800739a:	4b9c      	ldr	r3, [pc, #624]	; (800760c <HAL_RCC_OscConfig+0x608>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b9b      	ldr	r3, [pc, #620]	; (800760c <HAL_RCC_OscConfig+0x608>)
 80073a0:	2180      	movs	r1, #128	; 0x80
 80073a2:	0049      	lsls	r1, r1, #1
 80073a4:	430a      	orrs	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80073a8:	f7fd ff14 	bl	80051d4 <HAL_GetTick>
 80073ac:	0003      	movs	r3, r0
 80073ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b2:	f7fd ff0f 	bl	80051d4 <HAL_GetTick>
 80073b6:	0002      	movs	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e11c      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c4:	4b91      	ldr	r3, [pc, #580]	; (800760c <HAL_RCC_OscConfig+0x608>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4013      	ands	r3, r2
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d106      	bne.n	80073e6 <HAL_RCC_OscConfig+0x3e2>
 80073d8:	4b8b      	ldr	r3, [pc, #556]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80073da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073dc:	4b8a      	ldr	r3, [pc, #552]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80073de:	2101      	movs	r1, #1
 80073e0:	430a      	orrs	r2, r1
 80073e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80073e4:	e01c      	b.n	8007420 <HAL_RCC_OscConfig+0x41c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	d10c      	bne.n	8007408 <HAL_RCC_OscConfig+0x404>
 80073ee:	4b86      	ldr	r3, [pc, #536]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80073f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073f2:	4b85      	ldr	r3, [pc, #532]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80073f4:	2104      	movs	r1, #4
 80073f6:	430a      	orrs	r2, r1
 80073f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80073fa:	4b83      	ldr	r3, [pc, #524]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80073fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073fe:	4b82      	ldr	r3, [pc, #520]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007400:	2101      	movs	r1, #1
 8007402:	430a      	orrs	r2, r1
 8007404:	65da      	str	r2, [r3, #92]	; 0x5c
 8007406:	e00b      	b.n	8007420 <HAL_RCC_OscConfig+0x41c>
 8007408:	4b7f      	ldr	r3, [pc, #508]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800740a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800740c:	4b7e      	ldr	r3, [pc, #504]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800740e:	2101      	movs	r1, #1
 8007410:	438a      	bics	r2, r1
 8007412:	65da      	str	r2, [r3, #92]	; 0x5c
 8007414:	4b7c      	ldr	r3, [pc, #496]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007416:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007418:	4b7b      	ldr	r3, [pc, #492]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800741a:	2104      	movs	r1, #4
 800741c:	438a      	bics	r2, r1
 800741e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d014      	beq.n	8007452 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007428:	f7fd fed4 	bl	80051d4 <HAL_GetTick>
 800742c:	0003      	movs	r3, r0
 800742e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007430:	e009      	b.n	8007446 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007432:	f7fd fecf 	bl	80051d4 <HAL_GetTick>
 8007436:	0002      	movs	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	4a74      	ldr	r2, [pc, #464]	; (8007610 <HAL_RCC_OscConfig+0x60c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e0db      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007446:	4b70      	ldr	r3, [pc, #448]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	2202      	movs	r2, #2
 800744c:	4013      	ands	r3, r2
 800744e:	d0f0      	beq.n	8007432 <HAL_RCC_OscConfig+0x42e>
 8007450:	e013      	b.n	800747a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007452:	f7fd febf 	bl	80051d4 <HAL_GetTick>
 8007456:	0003      	movs	r3, r0
 8007458:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800745a:	e009      	b.n	8007470 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745c:	f7fd feba 	bl	80051d4 <HAL_GetTick>
 8007460:	0002      	movs	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	4a6a      	ldr	r2, [pc, #424]	; (8007610 <HAL_RCC_OscConfig+0x60c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e0c6      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007470:	4b65      	ldr	r3, [pc, #404]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007474:	2202      	movs	r2, #2
 8007476:	4013      	ands	r3, r2
 8007478:	d1f0      	bne.n	800745c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800747a:	231f      	movs	r3, #31
 800747c:	18fb      	adds	r3, r7, r3
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d105      	bne.n	8007490 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007484:	4b60      	ldr	r3, [pc, #384]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007488:	4b5f      	ldr	r3, [pc, #380]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800748a:	4962      	ldr	r1, [pc, #392]	; (8007614 <HAL_RCC_OscConfig+0x610>)
 800748c:	400a      	ands	r2, r1
 800748e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d100      	bne.n	800749a <HAL_RCC_OscConfig+0x496>
 8007498:	e0b0      	b.n	80075fc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800749a:	4b5b      	ldr	r3, [pc, #364]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2238      	movs	r2, #56	; 0x38
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d100      	bne.n	80074a8 <HAL_RCC_OscConfig+0x4a4>
 80074a6:	e078      	b.n	800759a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d153      	bne.n	8007558 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b0:	4b55      	ldr	r3, [pc, #340]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4b54      	ldr	r3, [pc, #336]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80074b6:	4958      	ldr	r1, [pc, #352]	; (8007618 <HAL_RCC_OscConfig+0x614>)
 80074b8:	400a      	ands	r2, r1
 80074ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074bc:	f7fd fe8a 	bl	80051d4 <HAL_GetTick>
 80074c0:	0003      	movs	r3, r0
 80074c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c6:	f7fd fe85 	bl	80051d4 <HAL_GetTick>
 80074ca:	0002      	movs	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e092      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	2380      	movs	r3, #128	; 0x80
 80074de:	049b      	lsls	r3, r3, #18
 80074e0:	4013      	ands	r3, r2
 80074e2:	d1f0      	bne.n	80074c6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074e4:	4b48      	ldr	r3, [pc, #288]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	4a4c      	ldr	r2, [pc, #304]	; (800761c <HAL_RCC_OscConfig+0x618>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	0019      	movs	r1, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	431a      	orrs	r2, r3
 800750c:	4b3e      	ldr	r3, [pc, #248]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800750e:	430a      	orrs	r2, r1
 8007510:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007512:	4b3d      	ldr	r3, [pc, #244]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	4b3c      	ldr	r3, [pc, #240]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007518:	2180      	movs	r1, #128	; 0x80
 800751a:	0449      	lsls	r1, r1, #17
 800751c:	430a      	orrs	r2, r1
 800751e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007520:	4b39      	ldr	r3, [pc, #228]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	4b38      	ldr	r3, [pc, #224]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	0549      	lsls	r1, r1, #21
 800752a:	430a      	orrs	r2, r1
 800752c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752e:	f7fd fe51 	bl	80051d4 <HAL_GetTick>
 8007532:	0003      	movs	r3, r0
 8007534:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007538:	f7fd fe4c 	bl	80051d4 <HAL_GetTick>
 800753c:	0002      	movs	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e059      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800754a:	4b2f      	ldr	r3, [pc, #188]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	2380      	movs	r3, #128	; 0x80
 8007550:	049b      	lsls	r3, r3, #18
 8007552:	4013      	ands	r3, r2
 8007554:	d0f0      	beq.n	8007538 <HAL_RCC_OscConfig+0x534>
 8007556:	e051      	b.n	80075fc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007558:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	4b2a      	ldr	r3, [pc, #168]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800755e:	492e      	ldr	r1, [pc, #184]	; (8007618 <HAL_RCC_OscConfig+0x614>)
 8007560:	400a      	ands	r2, r1
 8007562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007564:	f7fd fe36 	bl	80051d4 <HAL_GetTick>
 8007568:	0003      	movs	r3, r0
 800756a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800756e:	f7fd fe31 	bl	80051d4 <HAL_GetTick>
 8007572:	0002      	movs	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e03e      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	2380      	movs	r3, #128	; 0x80
 8007586:	049b      	lsls	r3, r3, #18
 8007588:	4013      	ands	r3, r2
 800758a:	d1f0      	bne.n	800756e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 8007592:	4923      	ldr	r1, [pc, #140]	; (8007620 <HAL_RCC_OscConfig+0x61c>)
 8007594:	400a      	ands	r2, r1
 8007596:	60da      	str	r2, [r3, #12]
 8007598:	e030      	b.n	80075fc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e02b      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80075a6:	4b18      	ldr	r3, [pc, #96]	; (8007608 <HAL_RCC_OscConfig+0x604>)
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2203      	movs	r2, #3
 80075b0:	401a      	ands	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d11e      	bne.n	80075f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2270      	movs	r2, #112	; 0x70
 80075be:	401a      	ands	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d117      	bne.n	80075f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	23fe      	movs	r3, #254	; 0xfe
 80075cc:	01db      	lsls	r3, r3, #7
 80075ce:	401a      	ands	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d10e      	bne.n	80075f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	23f8      	movs	r3, #248	; 0xf8
 80075de:	039b      	lsls	r3, r3, #14
 80075e0:	401a      	ands	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d106      	bne.n	80075f8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	0f5b      	lsrs	r3, r3, #29
 80075ee:	075a      	lsls	r2, r3, #29
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b008      	add	sp, #32
 8007604:	bd80      	pop	{r7, pc}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	40021000 	.word	0x40021000
 800760c:	40007000 	.word	0x40007000
 8007610:	00001388 	.word	0x00001388
 8007614:	efffffff 	.word	0xefffffff
 8007618:	feffffff 	.word	0xfeffffff
 800761c:	1fc1808c 	.word	0x1fc1808c
 8007620:	effefffc 	.word	0xeffefffc

08007624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0e9      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007638:	4b76      	ldr	r3, [pc, #472]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2207      	movs	r2, #7
 800763e:	4013      	ands	r3, r2
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d91e      	bls.n	8007684 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007646:	4b73      	ldr	r3, [pc, #460]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2207      	movs	r2, #7
 800764c:	4393      	bics	r3, r2
 800764e:	0019      	movs	r1, r3
 8007650:	4b70      	ldr	r3, [pc, #448]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007658:	f7fd fdbc 	bl	80051d4 <HAL_GetTick>
 800765c:	0003      	movs	r3, r0
 800765e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007660:	e009      	b.n	8007676 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007662:	f7fd fdb7 	bl	80051d4 <HAL_GetTick>
 8007666:	0002      	movs	r2, r0
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	4a6a      	ldr	r2, [pc, #424]	; (8007818 <HAL_RCC_ClockConfig+0x1f4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e0ca      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007676:	4b67      	ldr	r3, [pc, #412]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2207      	movs	r2, #7
 800767c:	4013      	ands	r3, r2
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d1ee      	bne.n	8007662 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2202      	movs	r2, #2
 800768a:	4013      	ands	r3, r2
 800768c:	d015      	beq.n	80076ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2204      	movs	r2, #4
 8007694:	4013      	ands	r3, r2
 8007696:	d006      	beq.n	80076a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007698:	4b60      	ldr	r3, [pc, #384]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	4b5f      	ldr	r3, [pc, #380]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 800769e:	21e0      	movs	r1, #224	; 0xe0
 80076a0:	01c9      	lsls	r1, r1, #7
 80076a2:	430a      	orrs	r2, r1
 80076a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076a6:	4b5d      	ldr	r3, [pc, #372]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	4a5d      	ldr	r2, [pc, #372]	; (8007820 <HAL_RCC_ClockConfig+0x1fc>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	0019      	movs	r1, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	4b59      	ldr	r3, [pc, #356]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80076b6:	430a      	orrs	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2201      	movs	r2, #1
 80076c0:	4013      	ands	r3, r2
 80076c2:	d057      	beq.n	8007774 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d107      	bne.n	80076dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076cc:	4b53      	ldr	r3, [pc, #332]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	2380      	movs	r3, #128	; 0x80
 80076d2:	029b      	lsls	r3, r3, #10
 80076d4:	4013      	ands	r3, r2
 80076d6:	d12b      	bne.n	8007730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e097      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d107      	bne.n	80076f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076e4:	4b4d      	ldr	r3, [pc, #308]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	049b      	lsls	r3, r3, #18
 80076ec:	4013      	ands	r3, r2
 80076ee:	d11f      	bne.n	8007730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e08b      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d107      	bne.n	800770c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076fc:	4b47      	ldr	r3, [pc, #284]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4013      	ands	r3, r2
 8007706:	d113      	bne.n	8007730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e07f      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d106      	bne.n	8007722 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007714:	4b41      	ldr	r3, [pc, #260]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 8007716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007718:	2202      	movs	r2, #2
 800771a:	4013      	ands	r3, r2
 800771c:	d108      	bne.n	8007730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e074      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007722:	4b3e      	ldr	r3, [pc, #248]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	2202      	movs	r2, #2
 8007728:	4013      	ands	r3, r2
 800772a:	d101      	bne.n	8007730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e06d      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007730:	4b3a      	ldr	r3, [pc, #232]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2207      	movs	r2, #7
 8007736:	4393      	bics	r3, r2
 8007738:	0019      	movs	r1, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	4b37      	ldr	r3, [pc, #220]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 8007740:	430a      	orrs	r2, r1
 8007742:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007744:	f7fd fd46 	bl	80051d4 <HAL_GetTick>
 8007748:	0003      	movs	r3, r0
 800774a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800774c:	e009      	b.n	8007762 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800774e:	f7fd fd41 	bl	80051d4 <HAL_GetTick>
 8007752:	0002      	movs	r2, r0
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	4a2f      	ldr	r2, [pc, #188]	; (8007818 <HAL_RCC_ClockConfig+0x1f4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e054      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007762:	4b2e      	ldr	r3, [pc, #184]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2238      	movs	r2, #56	; 0x38
 8007768:	401a      	ands	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	429a      	cmp	r2, r3
 8007772:	d1ec      	bne.n	800774e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007774:	4b27      	ldr	r3, [pc, #156]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2207      	movs	r2, #7
 800777a:	4013      	ands	r3, r2
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d21e      	bcs.n	80077c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007782:	4b24      	ldr	r3, [pc, #144]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2207      	movs	r2, #7
 8007788:	4393      	bics	r3, r2
 800778a:	0019      	movs	r1, r3
 800778c:	4b21      	ldr	r3, [pc, #132]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007794:	f7fd fd1e 	bl	80051d4 <HAL_GetTick>
 8007798:	0003      	movs	r3, r0
 800779a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800779c:	e009      	b.n	80077b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800779e:	f7fd fd19 	bl	80051d4 <HAL_GetTick>
 80077a2:	0002      	movs	r2, r0
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <HAL_RCC_ClockConfig+0x1f4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e02c      	b.n	800780c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077b2:	4b18      	ldr	r3, [pc, #96]	; (8007814 <HAL_RCC_ClockConfig+0x1f0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2207      	movs	r2, #7
 80077b8:	4013      	ands	r3, r2
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d1ee      	bne.n	800779e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2204      	movs	r2, #4
 80077c6:	4013      	ands	r3, r2
 80077c8:	d009      	beq.n	80077de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80077ca:	4b14      	ldr	r3, [pc, #80]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	4a15      	ldr	r2, [pc, #84]	; (8007824 <HAL_RCC_ClockConfig+0x200>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	0019      	movs	r1, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80077da:	430a      	orrs	r2, r1
 80077dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80077de:	f000 f829 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 80077e2:	0001      	movs	r1, r0
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <HAL_RCC_ClockConfig+0x1f8>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	220f      	movs	r2, #15
 80077ec:	401a      	ands	r2, r3
 80077ee:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <HAL_RCC_ClockConfig+0x204>)
 80077f0:	0092      	lsls	r2, r2, #2
 80077f2:	58d3      	ldr	r3, [r2, r3]
 80077f4:	221f      	movs	r2, #31
 80077f6:	4013      	ands	r3, r2
 80077f8:	000a      	movs	r2, r1
 80077fa:	40da      	lsrs	r2, r3
 80077fc:	4b0b      	ldr	r3, [pc, #44]	; (800782c <HAL_RCC_ClockConfig+0x208>)
 80077fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007800:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <HAL_RCC_ClockConfig+0x20c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	0018      	movs	r0, r3
 8007806:	f7fd fc89 	bl	800511c <HAL_InitTick>
 800780a:	0003      	movs	r3, r0
}
 800780c:	0018      	movs	r0, r3
 800780e:	46bd      	mov	sp, r7
 8007810:	b004      	add	sp, #16
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40022000 	.word	0x40022000
 8007818:	00001388 	.word	0x00001388
 800781c:	40021000 	.word	0x40021000
 8007820:	fffff0ff 	.word	0xfffff0ff
 8007824:	ffff8fff 	.word	0xffff8fff
 8007828:	0801876c 	.word	0x0801876c
 800782c:	20000000 	.word	0x20000000
 8007830:	20000008 	.word	0x20000008

08007834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800783a:	4b3c      	ldr	r3, [pc, #240]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2238      	movs	r2, #56	; 0x38
 8007840:	4013      	ands	r3, r2
 8007842:	d10f      	bne.n	8007864 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007844:	4b39      	ldr	r3, [pc, #228]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	0adb      	lsrs	r3, r3, #11
 800784a:	2207      	movs	r2, #7
 800784c:	4013      	ands	r3, r2
 800784e:	2201      	movs	r2, #1
 8007850:	409a      	lsls	r2, r3
 8007852:	0013      	movs	r3, r2
 8007854:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	4835      	ldr	r0, [pc, #212]	; (8007930 <HAL_RCC_GetSysClockFreq+0xfc>)
 800785a:	f7f8 fc77 	bl	800014c <__udivsi3>
 800785e:	0003      	movs	r3, r0
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	e05d      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007864:	4b31      	ldr	r3, [pc, #196]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2238      	movs	r2, #56	; 0x38
 800786a:	4013      	ands	r3, r2
 800786c:	2b08      	cmp	r3, #8
 800786e:	d102      	bne.n	8007876 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007870:	4b30      	ldr	r3, [pc, #192]	; (8007934 <HAL_RCC_GetSysClockFreq+0x100>)
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	e054      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007876:	4b2d      	ldr	r3, [pc, #180]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2238      	movs	r2, #56	; 0x38
 800787c:	4013      	ands	r3, r2
 800787e:	2b10      	cmp	r3, #16
 8007880:	d138      	bne.n	80078f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007882:	4b2a      	ldr	r3, [pc, #168]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2203      	movs	r2, #3
 8007888:	4013      	ands	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800788c:	4b27      	ldr	r3, [pc, #156]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	2207      	movs	r2, #7
 8007894:	4013      	ands	r3, r2
 8007896:	3301      	adds	r3, #1
 8007898:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b03      	cmp	r3, #3
 800789e:	d10d      	bne.n	80078bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	4824      	ldr	r0, [pc, #144]	; (8007934 <HAL_RCC_GetSysClockFreq+0x100>)
 80078a4:	f7f8 fc52 	bl	800014c <__udivsi3>
 80078a8:	0003      	movs	r3, r0
 80078aa:	0019      	movs	r1, r3
 80078ac:	4b1f      	ldr	r3, [pc, #124]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	0a1b      	lsrs	r3, r3, #8
 80078b2:	227f      	movs	r2, #127	; 0x7f
 80078b4:	4013      	ands	r3, r2
 80078b6:	434b      	muls	r3, r1
 80078b8:	617b      	str	r3, [r7, #20]
        break;
 80078ba:	e00d      	b.n	80078d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	481c      	ldr	r0, [pc, #112]	; (8007930 <HAL_RCC_GetSysClockFreq+0xfc>)
 80078c0:	f7f8 fc44 	bl	800014c <__udivsi3>
 80078c4:	0003      	movs	r3, r0
 80078c6:	0019      	movs	r1, r3
 80078c8:	4b18      	ldr	r3, [pc, #96]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	0a1b      	lsrs	r3, r3, #8
 80078ce:	227f      	movs	r2, #127	; 0x7f
 80078d0:	4013      	ands	r3, r2
 80078d2:	434b      	muls	r3, r1
 80078d4:	617b      	str	r3, [r7, #20]
        break;
 80078d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80078d8:	4b14      	ldr	r3, [pc, #80]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	0f5b      	lsrs	r3, r3, #29
 80078de:	2207      	movs	r2, #7
 80078e0:	4013      	ands	r3, r2
 80078e2:	3301      	adds	r3, #1
 80078e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	6978      	ldr	r0, [r7, #20]
 80078ea:	f7f8 fc2f 	bl	800014c <__udivsi3>
 80078ee:	0003      	movs	r3, r0
 80078f0:	613b      	str	r3, [r7, #16]
 80078f2:	e015      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80078f4:	4b0d      	ldr	r3, [pc, #52]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2238      	movs	r2, #56	; 0x38
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d103      	bne.n	8007908 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007900:	2380      	movs	r3, #128	; 0x80
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	e00b      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007908:	4b08      	ldr	r3, [pc, #32]	; (800792c <HAL_RCC_GetSysClockFreq+0xf8>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2238      	movs	r2, #56	; 0x38
 800790e:	4013      	ands	r3, r2
 8007910:	2b18      	cmp	r3, #24
 8007912:	d103      	bne.n	800791c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007914:	23fa      	movs	r3, #250	; 0xfa
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	e001      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007920:	693b      	ldr	r3, [r7, #16]
}
 8007922:	0018      	movs	r0, r3
 8007924:	46bd      	mov	sp, r7
 8007926:	b006      	add	sp, #24
 8007928:	bd80      	pop	{r7, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	40021000 	.word	0x40021000
 8007930:	00f42400 	.word	0x00f42400
 8007934:	016e3600 	.word	0x016e3600

08007938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800793c:	4b02      	ldr	r3, [pc, #8]	; (8007948 <HAL_RCC_GetHCLKFreq+0x10>)
 800793e:	681b      	ldr	r3, [r3, #0]
}
 8007940:	0018      	movs	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	20000000 	.word	0x20000000

0800794c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800794c:	b5b0      	push	{r4, r5, r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007950:	f7ff fff2 	bl	8007938 <HAL_RCC_GetHCLKFreq>
 8007954:	0004      	movs	r4, r0
 8007956:	f7ff fb49 	bl	8006fec <LL_RCC_GetAPB1Prescaler>
 800795a:	0003      	movs	r3, r0
 800795c:	0b1a      	lsrs	r2, r3, #12
 800795e:	4b05      	ldr	r3, [pc, #20]	; (8007974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007960:	0092      	lsls	r2, r2, #2
 8007962:	58d3      	ldr	r3, [r2, r3]
 8007964:	221f      	movs	r2, #31
 8007966:	4013      	ands	r3, r2
 8007968:	40dc      	lsrs	r4, r3
 800796a:	0023      	movs	r3, r4
}
 800796c:	0018      	movs	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	bdb0      	pop	{r4, r5, r7, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	080187ac 	.word	0x080187ac

08007978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007980:	2313      	movs	r3, #19
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007988:	2312      	movs	r3, #18
 800798a:	18fb      	adds	r3, r7, r3
 800798c:	2200      	movs	r2, #0
 800798e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	029b      	lsls	r3, r3, #10
 8007998:	4013      	ands	r3, r2
 800799a:	d100      	bne.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800799c:	e0a3      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800799e:	2011      	movs	r0, #17
 80079a0:	183b      	adds	r3, r7, r0
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079a6:	4b86      	ldr	r3, [pc, #536]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079aa:	2380      	movs	r3, #128	; 0x80
 80079ac:	055b      	lsls	r3, r3, #21
 80079ae:	4013      	ands	r3, r2
 80079b0:	d110      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079b2:	4b83      	ldr	r3, [pc, #524]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b6:	4b82      	ldr	r3, [pc, #520]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	0549      	lsls	r1, r1, #21
 80079bc:	430a      	orrs	r2, r1
 80079be:	63da      	str	r2, [r3, #60]	; 0x3c
 80079c0:	4b7f      	ldr	r3, [pc, #508]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c4:	2380      	movs	r3, #128	; 0x80
 80079c6:	055b      	lsls	r3, r3, #21
 80079c8:	4013      	ands	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]
 80079cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ce:	183b      	adds	r3, r7, r0
 80079d0:	2201      	movs	r2, #1
 80079d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079d4:	4b7b      	ldr	r3, [pc, #492]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b7a      	ldr	r3, [pc, #488]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80079da:	2180      	movs	r1, #128	; 0x80
 80079dc:	0049      	lsls	r1, r1, #1
 80079de:	430a      	orrs	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079e2:	f7fd fbf7 	bl	80051d4 <HAL_GetTick>
 80079e6:	0003      	movs	r3, r0
 80079e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079ea:	e00b      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ec:	f7fd fbf2 	bl	80051d4 <HAL_GetTick>
 80079f0:	0002      	movs	r2, r0
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d904      	bls.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80079fa:	2313      	movs	r3, #19
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	2203      	movs	r2, #3
 8007a00:	701a      	strb	r2, [r3, #0]
        break;
 8007a02:	e005      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a04:	4b6f      	ldr	r3, [pc, #444]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	2380      	movs	r3, #128	; 0x80
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	d0ed      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007a10:	2313      	movs	r3, #19
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d154      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a1a:	4b69      	ldr	r3, [pc, #420]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a1e:	23c0      	movs	r3, #192	; 0xc0
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4013      	ands	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d019      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d014      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a36:	4b62      	ldr	r3, [pc, #392]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3a:	4a63      	ldr	r2, [pc, #396]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a40:	4b5f      	ldr	r3, [pc, #380]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a44:	4b5e      	ldr	r3, [pc, #376]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	0249      	lsls	r1, r1, #9
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a4e:	4b5c      	ldr	r3, [pc, #368]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a52:	4b5b      	ldr	r3, [pc, #364]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a54:	495d      	ldr	r1, [pc, #372]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a56:	400a      	ands	r2, r1
 8007a58:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a5a:	4b59      	ldr	r3, [pc, #356]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2201      	movs	r2, #1
 8007a64:	4013      	ands	r3, r2
 8007a66:	d016      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a68:	f7fd fbb4 	bl	80051d4 <HAL_GetTick>
 8007a6c:	0003      	movs	r3, r0
 8007a6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a70:	e00c      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a72:	f7fd fbaf 	bl	80051d4 <HAL_GetTick>
 8007a76:	0002      	movs	r2, r0
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	4a54      	ldr	r2, [pc, #336]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d904      	bls.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007a82:	2313      	movs	r3, #19
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	2203      	movs	r2, #3
 8007a88:	701a      	strb	r2, [r3, #0]
            break;
 8007a8a:	e004      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a8c:	4b4c      	ldr	r3, [pc, #304]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a90:	2202      	movs	r2, #2
 8007a92:	4013      	ands	r3, r2
 8007a94:	d0ed      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007a96:	2313      	movs	r3, #19
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aa0:	4b47      	ldr	r3, [pc, #284]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa4:	4a48      	ldr	r2, [pc, #288]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	0019      	movs	r1, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	4b44      	ldr	r3, [pc, #272]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ab4:	e00c      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab6:	2312      	movs	r3, #18
 8007ab8:	18fb      	adds	r3, r7, r3
 8007aba:	2213      	movs	r2, #19
 8007abc:	18ba      	adds	r2, r7, r2
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	e005      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac4:	2312      	movs	r3, #18
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2213      	movs	r2, #19
 8007aca:	18ba      	adds	r2, r7, r2
 8007acc:	7812      	ldrb	r2, [r2, #0]
 8007ace:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ad0:	2311      	movs	r3, #17
 8007ad2:	18fb      	adds	r3, r7, r3
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d105      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ada:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ade:	4b38      	ldr	r3, [pc, #224]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ae0:	493c      	ldr	r1, [pc, #240]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007ae2:	400a      	ands	r2, r1
 8007ae4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2201      	movs	r2, #1
 8007aec:	4013      	ands	r3, r2
 8007aee:	d009      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007af0:	4b33      	ldr	r3, [pc, #204]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	2203      	movs	r2, #3
 8007af6:	4393      	bics	r3, r2
 8007af8:	0019      	movs	r1, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	4b30      	ldr	r3, [pc, #192]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b00:	430a      	orrs	r2, r1
 8007b02:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	d009      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b0e:	4b2c      	ldr	r3, [pc, #176]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b12:	220c      	movs	r2, #12
 8007b14:	4393      	bics	r3, r2
 8007b16:	0019      	movs	r1, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	4b28      	ldr	r3, [pc, #160]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2220      	movs	r2, #32
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b2c:	4b24      	ldr	r3, [pc, #144]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	0019      	movs	r1, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	2380      	movs	r3, #128	; 0x80
 8007b46:	01db      	lsls	r3, r3, #7
 8007b48:	4013      	ands	r3, r2
 8007b4a:	d015      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b4c:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	0899      	lsrs	r1, r3, #2
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	05db      	lsls	r3, r3, #23
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d106      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007b6a:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	4b14      	ldr	r3, [pc, #80]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	0249      	lsls	r1, r1, #9
 8007b74:	430a      	orrs	r2, r1
 8007b76:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	4013      	ands	r3, r2
 8007b82:	d016      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	4a14      	ldr	r2, [pc, #80]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	0019      	movs	r1, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b94:	430a      	orrs	r2, r1
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	2380      	movs	r3, #128	; 0x80
 8007b9e:	01db      	lsls	r3, r3, #7
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d106      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	0249      	lsls	r1, r1, #9
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007bb2:	2312      	movs	r3, #18
 8007bb4:	18fb      	adds	r3, r7, r3
 8007bb6:	781b      	ldrb	r3, [r3, #0]
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b006      	add	sp, #24
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	40007000 	.word	0x40007000
 8007bc8:	fffffcff 	.word	0xfffffcff
 8007bcc:	fffeffff 	.word	0xfffeffff
 8007bd0:	00001388 	.word	0x00001388
 8007bd4:	efffffff 	.word	0xefffffff
 8007bd8:	ffffcfff 	.word	0xffffcfff
 8007bdc:	ffff3fff 	.word	0xffff3fff

08007be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e0a8      	b.n	8007d44 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	2382      	movs	r3, #130	; 0x82
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d009      	beq.n	8007c1a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	61da      	str	r2, [r3, #28]
 8007c0c:	e005      	b.n	8007c1a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	225d      	movs	r2, #93	; 0x5d
 8007c24:	5c9b      	ldrb	r3, [r3, r2]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d107      	bne.n	8007c3c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	225c      	movs	r2, #92	; 0x5c
 8007c30:	2100      	movs	r1, #0
 8007c32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	0018      	movs	r0, r3
 8007c38:	f7fb fec2 	bl	80039c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	225d      	movs	r2, #93	; 0x5d
 8007c40:	2102      	movs	r1, #2
 8007c42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2140      	movs	r1, #64	; 0x40
 8007c50:	438a      	bics	r2, r1
 8007c52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	23e0      	movs	r3, #224	; 0xe0
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d902      	bls.n	8007c66 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e002      	b.n	8007c6c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	015b      	lsls	r3, r3, #5
 8007c6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	23f0      	movs	r3, #240	; 0xf0
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d008      	beq.n	8007c8a <HAL_SPI_Init+0xaa>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	23e0      	movs	r3, #224	; 0xe0
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d002      	beq.n	8007c8a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	2382      	movs	r3, #130	; 0x82
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	401a      	ands	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6899      	ldr	r1, [r3, #8]
 8007c98:	2384      	movs	r3, #132	; 0x84
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	400b      	ands	r3, r1
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2102      	movs	r1, #2
 8007ca6:	400b      	ands	r3, r1
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	2101      	movs	r1, #1
 8007cb0:	400b      	ands	r3, r1
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6999      	ldr	r1, [r3, #24]
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	400b      	ands	r3, r1
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2138      	movs	r1, #56	; 0x38
 8007cc6:	400b      	ands	r3, r1
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	2180      	movs	r1, #128	; 0x80
 8007cd0:	400b      	ands	r3, r1
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	0011      	movs	r1, r2
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cda:	2380      	movs	r3, #128	; 0x80
 8007cdc:	019b      	lsls	r3, r3, #6
 8007cde:	401a      	ands	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	2204      	movs	r2, #4
 8007cf0:	401a      	ands	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2110      	movs	r1, #16
 8007cf8:	400b      	ands	r3, r1
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d00:	2108      	movs	r1, #8
 8007d02:	400b      	ands	r3, r1
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68d9      	ldr	r1, [r3, #12]
 8007d0a:	23f0      	movs	r3, #240	; 0xf0
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	400b      	ands	r3, r1
 8007d10:	431a      	orrs	r2, r3
 8007d12:	0011      	movs	r1, r2
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	2380      	movs	r3, #128	; 0x80
 8007d18:	015b      	lsls	r3, r3, #5
 8007d1a:	401a      	ands	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69da      	ldr	r2, [r3, #28]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4907      	ldr	r1, [pc, #28]	; (8007d4c <HAL_SPI_Init+0x16c>)
 8007d30:	400a      	ands	r2, r1
 8007d32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	225d      	movs	r2, #93	; 0x5d
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	0018      	movs	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b004      	add	sp, #16
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	fffff7ff 	.word	0xfffff7ff

08007d50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	1dbb      	adds	r3, r7, #6
 8007d5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d60:	231f      	movs	r3, #31
 8007d62:	18fb      	adds	r3, r7, r3
 8007d64:	2200      	movs	r2, #0
 8007d66:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	225c      	movs	r2, #92	; 0x5c
 8007d6c:	5c9b      	ldrb	r3, [r3, r2]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_SPI_Transmit+0x26>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e140      	b.n	8007ff8 <HAL_SPI_Transmit+0x2a8>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	225c      	movs	r2, #92	; 0x5c
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d7e:	f7fd fa29 	bl	80051d4 <HAL_GetTick>
 8007d82:	0003      	movs	r3, r0
 8007d84:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007d86:	2316      	movs	r3, #22
 8007d88:	18fb      	adds	r3, r7, r3
 8007d8a:	1dba      	adds	r2, r7, #6
 8007d8c:	8812      	ldrh	r2, [r2, #0]
 8007d8e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	225d      	movs	r2, #93	; 0x5d
 8007d94:	5c9b      	ldrb	r3, [r3, r2]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d004      	beq.n	8007da6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007d9c:	231f      	movs	r3, #31
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	2202      	movs	r2, #2
 8007da2:	701a      	strb	r2, [r3, #0]
    goto error;
 8007da4:	e11d      	b.n	8007fe2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_SPI_Transmit+0x64>
 8007dac:	1dbb      	adds	r3, r7, #6
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007db4:	231f      	movs	r3, #31
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	2201      	movs	r2, #1
 8007dba:	701a      	strb	r2, [r3, #0]
    goto error;
 8007dbc:	e111      	b.n	8007fe2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	225d      	movs	r2, #93	; 0x5d
 8007dc2:	2103      	movs	r1, #3
 8007dc4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1dba      	adds	r2, r7, #6
 8007dd6:	8812      	ldrh	r2, [r2, #0]
 8007dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1dba      	adds	r2, r7, #6
 8007dde:	8812      	ldrh	r2, [r2, #0]
 8007de0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2244      	movs	r2, #68	; 0x44
 8007dec:	2100      	movs	r1, #0
 8007dee:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2246      	movs	r2, #70	; 0x46
 8007df4:	2100      	movs	r1, #0
 8007df6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d110      	bne.n	8007e32 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2140      	movs	r1, #64	; 0x40
 8007e1c:	438a      	bics	r2, r1
 8007e1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2180      	movs	r1, #128	; 0x80
 8007e2c:	01c9      	lsls	r1, r1, #7
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2240      	movs	r2, #64	; 0x40
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b40      	cmp	r3, #64	; 0x40
 8007e3e:	d007      	beq.n	8007e50 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2140      	movs	r1, #64	; 0x40
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	23e0      	movs	r3, #224	; 0xe0
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d94e      	bls.n	8007efa <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <HAL_SPI_Transmit+0x11e>
 8007e64:	2316      	movs	r3, #22
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d13f      	bne.n	8007eee <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e72:	881a      	ldrh	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	1c9a      	adds	r2, r3, #2
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e92:	e02c      	b.n	8007eee <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d112      	bne.n	8007ec8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	881a      	ldrh	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	1c9a      	adds	r2, r3, #2
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ec6:	e012      	b.n	8007eee <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec8:	f7fd f984 	bl	80051d4 <HAL_GetTick>
 8007ecc:	0002      	movs	r2, r0
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d802      	bhi.n	8007ede <HAL_SPI_Transmit+0x18e>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	d102      	bne.n	8007ee4 <HAL_SPI_Transmit+0x194>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007ee4:	231f      	movs	r3, #31
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	2203      	movs	r2, #3
 8007eea:	701a      	strb	r2, [r3, #0]
          goto error;
 8007eec:	e079      	b.n	8007fe2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1cd      	bne.n	8007e94 <HAL_SPI_Transmit+0x144>
 8007ef8:	e04f      	b.n	8007f9a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d004      	beq.n	8007f0c <HAL_SPI_Transmit+0x1bc>
 8007f02:	2316      	movs	r3, #22
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d141      	bne.n	8007f90 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	330c      	adds	r3, #12
 8007f16:	7812      	ldrb	r2, [r2, #0]
 8007f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007f32:	e02d      	b.n	8007f90 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d113      	bne.n	8007f6a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	330c      	adds	r3, #12
 8007f4c:	7812      	ldrb	r2, [r2, #0]
 8007f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f68:	e012      	b.n	8007f90 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f6a:	f7fd f933 	bl	80051d4 <HAL_GetTick>
 8007f6e:	0002      	movs	r2, r0
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d802      	bhi.n	8007f80 <HAL_SPI_Transmit+0x230>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	d102      	bne.n	8007f86 <HAL_SPI_Transmit+0x236>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8007f86:	231f      	movs	r3, #31
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	701a      	strb	r2, [r3, #0]
          goto error;
 8007f8e:	e028      	b.n	8007fe2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1cc      	bne.n	8007f34 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f000 fcd9 	bl	8008958 <SPI_EndRxTxTransaction>
 8007fa6:	1e03      	subs	r3, r0, #0
 8007fa8:	d002      	beq.n	8007fb0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	613b      	str	r3, [r7, #16]
 8007fcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007fd6:	231f      	movs	r3, #31
 8007fd8:	18fb      	adds	r3, r7, r3
 8007fda:	2201      	movs	r2, #1
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	e000      	b.n	8007fe2 <HAL_SPI_Transmit+0x292>
  }

error:
 8007fe0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	225d      	movs	r2, #93	; 0x5d
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	225c      	movs	r2, #92	; 0x5c
 8007fee:	2100      	movs	r1, #0
 8007ff0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007ff2:	231f      	movs	r3, #31
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	781b      	ldrb	r3, [r3, #0]
}
 8007ff8:	0018      	movs	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b008      	add	sp, #32
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008000:	b590      	push	{r4, r7, lr}
 8008002:	b089      	sub	sp, #36	; 0x24
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	1dbb      	adds	r3, r7, #6
 800800e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008010:	2317      	movs	r3, #23
 8008012:	18fb      	adds	r3, r7, r3
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	2382      	movs	r3, #130	; 0x82
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	429a      	cmp	r2, r3
 8008022:	d113      	bne.n	800804c <HAL_SPI_Receive+0x4c>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10f      	bne.n	800804c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	225d      	movs	r2, #93	; 0x5d
 8008030:	2104      	movs	r1, #4
 8008032:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008034:	1dbb      	adds	r3, r7, #6
 8008036:	881c      	ldrh	r4, [r3, #0]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	0023      	movs	r3, r4
 8008044:	f000 f928 	bl	8008298 <HAL_SPI_TransmitReceive>
 8008048:	0003      	movs	r3, r0
 800804a:	e11c      	b.n	8008286 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	225c      	movs	r2, #92	; 0x5c
 8008050:	5c9b      	ldrb	r3, [r3, r2]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_SPI_Receive+0x5a>
 8008056:	2302      	movs	r3, #2
 8008058:	e115      	b.n	8008286 <HAL_SPI_Receive+0x286>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	225c      	movs	r2, #92	; 0x5c
 800805e:	2101      	movs	r1, #1
 8008060:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008062:	f7fd f8b7 	bl	80051d4 <HAL_GetTick>
 8008066:	0003      	movs	r3, r0
 8008068:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	225d      	movs	r2, #93	; 0x5d
 800806e:	5c9b      	ldrb	r3, [r3, r2]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b01      	cmp	r3, #1
 8008074:	d004      	beq.n	8008080 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8008076:	2317      	movs	r3, #23
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	2202      	movs	r2, #2
 800807c:	701a      	strb	r2, [r3, #0]
    goto error;
 800807e:	e0f7      	b.n	8008270 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_SPI_Receive+0x8e>
 8008086:	1dbb      	adds	r3, r7, #6
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800808e:	2317      	movs	r3, #23
 8008090:	18fb      	adds	r3, r7, r3
 8008092:	2201      	movs	r2, #1
 8008094:	701a      	strb	r2, [r3, #0]
    goto error;
 8008096:	e0eb      	b.n	8008270 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	225d      	movs	r2, #93	; 0x5d
 800809c:	2104      	movs	r1, #4
 800809e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	1dba      	adds	r2, r7, #6
 80080b0:	2144      	movs	r1, #68	; 0x44
 80080b2:	8812      	ldrh	r2, [r2, #0]
 80080b4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	1dba      	adds	r2, r7, #6
 80080ba:	2146      	movs	r1, #70	; 0x46
 80080bc:	8812      	ldrh	r2, [r2, #0]
 80080be:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	23e0      	movs	r3, #224	; 0xe0
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d908      	bls.n	80080fc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4966      	ldr	r1, [pc, #408]	; (8008290 <HAL_SPI_Receive+0x290>)
 80080f6:	400a      	ands	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
 80080fa:	e008      	b.n	800810e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2180      	movs	r1, #128	; 0x80
 8008108:	0149      	lsls	r1, r1, #5
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	2380      	movs	r3, #128	; 0x80
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	429a      	cmp	r2, r3
 8008118:	d10f      	bne.n	800813a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	438a      	bics	r2, r1
 8008128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4957      	ldr	r1, [pc, #348]	; (8008294 <HAL_SPI_Receive+0x294>)
 8008136:	400a      	ands	r2, r1
 8008138:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2240      	movs	r2, #64	; 0x40
 8008142:	4013      	ands	r3, r2
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	d007      	beq.n	8008158 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2140      	movs	r1, #64	; 0x40
 8008154:	430a      	orrs	r2, r1
 8008156:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	23e0      	movs	r3, #224	; 0xe0
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	429a      	cmp	r2, r3
 8008162:	d900      	bls.n	8008166 <HAL_SPI_Receive+0x166>
 8008164:	e069      	b.n	800823a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008166:	e031      	b.n	80081cc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2201      	movs	r2, #1
 8008170:	4013      	ands	r3, r2
 8008172:	2b01      	cmp	r3, #1
 8008174:	d117      	bne.n	80081a6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	330c      	adds	r3, #12
 800817c:	001a      	movs	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	7812      	ldrb	r2, [r2, #0]
 8008184:	b2d2      	uxtb	r2, r2
 8008186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2246      	movs	r2, #70	; 0x46
 8008196:	5a9b      	ldrh	r3, [r3, r2]
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b299      	uxth	r1, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2246      	movs	r2, #70	; 0x46
 80081a2:	5299      	strh	r1, [r3, r2]
 80081a4:	e012      	b.n	80081cc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081a6:	f7fd f815 	bl	80051d4 <HAL_GetTick>
 80081aa:	0002      	movs	r2, r0
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d802      	bhi.n	80081bc <HAL_SPI_Receive+0x1bc>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	3301      	adds	r3, #1
 80081ba:	d102      	bne.n	80081c2 <HAL_SPI_Receive+0x1c2>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80081c2:	2317      	movs	r3, #23
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	2203      	movs	r2, #3
 80081c8:	701a      	strb	r2, [r3, #0]
          goto error;
 80081ca:	e051      	b.n	8008270 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2246      	movs	r2, #70	; 0x46
 80081d0:	5a9b      	ldrh	r3, [r3, r2]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1c7      	bne.n	8008168 <HAL_SPI_Receive+0x168>
 80081d8:	e035      	b.n	8008246 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2201      	movs	r2, #1
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d115      	bne.n	8008214 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	b292      	uxth	r2, r2
 80081f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	1c9a      	adds	r2, r3, #2
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2246      	movs	r2, #70	; 0x46
 8008204:	5a9b      	ldrh	r3, [r3, r2]
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b299      	uxth	r1, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2246      	movs	r2, #70	; 0x46
 8008210:	5299      	strh	r1, [r3, r2]
 8008212:	e012      	b.n	800823a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008214:	f7fc ffde 	bl	80051d4 <HAL_GetTick>
 8008218:	0002      	movs	r2, r0
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d802      	bhi.n	800822a <HAL_SPI_Receive+0x22a>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	d102      	bne.n	8008230 <HAL_SPI_Receive+0x230>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d104      	bne.n	800823a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8008230:	2317      	movs	r3, #23
 8008232:	18fb      	adds	r3, r7, r3
 8008234:	2203      	movs	r2, #3
 8008236:	701a      	strb	r2, [r3, #0]
          goto error;
 8008238:	e01a      	b.n	8008270 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2246      	movs	r2, #70	; 0x46
 800823e:	5a9b      	ldrh	r3, [r3, r2]
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1c9      	bne.n	80081da <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	0018      	movs	r0, r3
 800824e:	f000 fb25 	bl	800889c <SPI_EndRxTransaction>
 8008252:	1e03      	subs	r3, r0, #0
 8008254:	d002      	beq.n	800825c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2220      	movs	r2, #32
 800825a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008260:	2b00      	cmp	r3, #0
 8008262:	d004      	beq.n	800826e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8008264:	2317      	movs	r3, #23
 8008266:	18fb      	adds	r3, r7, r3
 8008268:	2201      	movs	r2, #1
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	e000      	b.n	8008270 <HAL_SPI_Receive+0x270>
  }

error :
 800826e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	225d      	movs	r2, #93	; 0x5d
 8008274:	2101      	movs	r1, #1
 8008276:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	225c      	movs	r2, #92	; 0x5c
 800827c:	2100      	movs	r1, #0
 800827e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008280:	2317      	movs	r3, #23
 8008282:	18fb      	adds	r3, r7, r3
 8008284:	781b      	ldrb	r3, [r3, #0]
}
 8008286:	0018      	movs	r0, r3
 8008288:	46bd      	mov	sp, r7
 800828a:	b007      	add	sp, #28
 800828c:	bd90      	pop	{r4, r7, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	ffffefff 	.word	0xffffefff
 8008294:	ffffbfff 	.word	0xffffbfff

08008298 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	001a      	movs	r2, r3
 80082a6:	1cbb      	adds	r3, r7, #2
 80082a8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082aa:	2301      	movs	r3, #1
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082ae:	2323      	movs	r3, #35	; 0x23
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	225c      	movs	r2, #92	; 0x5c
 80082ba:	5c9b      	ldrb	r3, [r3, r2]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_SPI_TransmitReceive+0x2c>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e1b5      	b.n	8008630 <HAL_SPI_TransmitReceive+0x398>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	225c      	movs	r2, #92	; 0x5c
 80082c8:	2101      	movs	r1, #1
 80082ca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082cc:	f7fc ff82 	bl	80051d4 <HAL_GetTick>
 80082d0:	0003      	movs	r3, r0
 80082d2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082d4:	201b      	movs	r0, #27
 80082d6:	183b      	adds	r3, r7, r0
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	215d      	movs	r1, #93	; 0x5d
 80082dc:	5c52      	ldrb	r2, [r2, r1]
 80082de:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80082e6:	2312      	movs	r3, #18
 80082e8:	18fb      	adds	r3, r7, r3
 80082ea:	1cba      	adds	r2, r7, #2
 80082ec:	8812      	ldrh	r2, [r2, #0]
 80082ee:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082f0:	183b      	adds	r3, r7, r0
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d011      	beq.n	800831c <HAL_SPI_TransmitReceive+0x84>
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	2382      	movs	r3, #130	; 0x82
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	429a      	cmp	r2, r3
 8008300:	d107      	bne.n	8008312 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <HAL_SPI_TransmitReceive+0x7a>
 800830a:	183b      	adds	r3, r7, r0
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b04      	cmp	r3, #4
 8008310:	d004      	beq.n	800831c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008312:	2323      	movs	r3, #35	; 0x23
 8008314:	18fb      	adds	r3, r7, r3
 8008316:	2202      	movs	r2, #2
 8008318:	701a      	strb	r2, [r3, #0]
    goto error;
 800831a:	e17e      	b.n	800861a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d006      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x98>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x98>
 8008328:	1cbb      	adds	r3, r7, #2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008330:	2323      	movs	r3, #35	; 0x23
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	2201      	movs	r2, #1
 8008336:	701a      	strb	r2, [r3, #0]
    goto error;
 8008338:	e16f      	b.n	800861a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	225d      	movs	r2, #93	; 0x5d
 800833e:	5c9b      	ldrb	r3, [r3, r2]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b04      	cmp	r3, #4
 8008344:	d003      	beq.n	800834e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	225d      	movs	r2, #93	; 0x5d
 800834a:	2105      	movs	r1, #5
 800834c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1cba      	adds	r2, r7, #2
 800835e:	2146      	movs	r1, #70	; 0x46
 8008360:	8812      	ldrh	r2, [r2, #0]
 8008362:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	1cba      	adds	r2, r7, #2
 8008368:	2144      	movs	r1, #68	; 0x44
 800836a:	8812      	ldrh	r2, [r2, #0]
 800836c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	1cba      	adds	r2, r7, #2
 8008378:	8812      	ldrh	r2, [r2, #0]
 800837a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	1cba      	adds	r2, r7, #2
 8008380:	8812      	ldrh	r2, [r2, #0]
 8008382:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	23e0      	movs	r3, #224	; 0xe0
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	429a      	cmp	r2, r3
 800839a:	d908      	bls.n	80083ae <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	49a4      	ldr	r1, [pc, #656]	; (8008638 <HAL_SPI_TransmitReceive+0x3a0>)
 80083a8:	400a      	ands	r2, r1
 80083aa:	605a      	str	r2, [r3, #4]
 80083ac:	e008      	b.n	80083c0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2180      	movs	r1, #128	; 0x80
 80083ba:	0149      	lsls	r1, r1, #5
 80083bc:	430a      	orrs	r2, r1
 80083be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2240      	movs	r2, #64	; 0x40
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d007      	beq.n	80083de <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2140      	movs	r1, #64	; 0x40
 80083da:	430a      	orrs	r2, r1
 80083dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	23e0      	movs	r3, #224	; 0xe0
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d800      	bhi.n	80083ec <HAL_SPI_TransmitReceive+0x154>
 80083ea:	e07f      	b.n	80084ec <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x168>
 80083f4:	2312      	movs	r3, #18
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d000      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x168>
 80083fe:	e069      	b.n	80084d4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	881a      	ldrh	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	1c9a      	adds	r2, r3, #2
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008424:	e056      	b.n	80084d4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	2202      	movs	r2, #2
 800842e:	4013      	ands	r3, r2
 8008430:	2b02      	cmp	r3, #2
 8008432:	d11b      	bne.n	800846c <HAL_SPI_TransmitReceive+0x1d4>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008438:	b29b      	uxth	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d016      	beq.n	800846c <HAL_SPI_TransmitReceive+0x1d4>
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	2b01      	cmp	r3, #1
 8008442:	d113      	bne.n	800846c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	881a      	ldrh	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	1c9a      	adds	r2, r3, #2
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	2201      	movs	r2, #1
 8008474:	4013      	ands	r3, r2
 8008476:	2b01      	cmp	r3, #1
 8008478:	d11c      	bne.n	80084b4 <HAL_SPI_TransmitReceive+0x21c>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2246      	movs	r2, #70	; 0x46
 800847e:	5a9b      	ldrh	r3, [r3, r2]
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d016      	beq.n	80084b4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	b292      	uxth	r2, r2
 8008492:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	1c9a      	adds	r2, r3, #2
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2246      	movs	r2, #70	; 0x46
 80084a2:	5a9b      	ldrh	r3, [r3, r2]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b299      	uxth	r1, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2246      	movs	r2, #70	; 0x46
 80084ae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084b0:	2301      	movs	r3, #1
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084b4:	f7fc fe8e 	bl	80051d4 <HAL_GetTick>
 80084b8:	0002      	movs	r2, r0
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d807      	bhi.n	80084d4 <HAL_SPI_TransmitReceive+0x23c>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	3301      	adds	r3, #1
 80084c8:	d004      	beq.n	80084d4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80084ca:	2323      	movs	r3, #35	; 0x23
 80084cc:	18fb      	adds	r3, r7, r3
 80084ce:	2203      	movs	r2, #3
 80084d0:	701a      	strb	r2, [r3, #0]
        goto error;
 80084d2:	e0a2      	b.n	800861a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1a3      	bne.n	8008426 <HAL_SPI_TransmitReceive+0x18e>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2246      	movs	r2, #70	; 0x46
 80084e2:	5a9b      	ldrh	r3, [r3, r2]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d19d      	bne.n	8008426 <HAL_SPI_TransmitReceive+0x18e>
 80084ea:	e085      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_SPI_TransmitReceive+0x268>
 80084f4:	2312      	movs	r3, #18
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d000      	beq.n	8008500 <HAL_SPI_TransmitReceive+0x268>
 80084fe:	e070      	b.n	80085e2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	330c      	adds	r3, #12
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008526:	e05c      	b.n	80085e2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2202      	movs	r2, #2
 8008530:	4013      	ands	r3, r2
 8008532:	2b02      	cmp	r3, #2
 8008534:	d11c      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x2d8>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d017      	beq.n	8008570 <HAL_SPI_TransmitReceive+0x2d8>
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	2b01      	cmp	r3, #1
 8008544:	d114      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	330c      	adds	r3, #12
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2201      	movs	r2, #1
 8008578:	4013      	ands	r3, r2
 800857a:	2b01      	cmp	r3, #1
 800857c:	d11e      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x324>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2246      	movs	r2, #70	; 0x46
 8008582:	5a9b      	ldrh	r3, [r3, r2]
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d018      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	330c      	adds	r3, #12
 8008590:	001a      	movs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	b2d2      	uxtb	r2, r2
 800859a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2246      	movs	r2, #70	; 0x46
 80085aa:	5a9b      	ldrh	r3, [r3, r2]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b299      	uxth	r1, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2246      	movs	r2, #70	; 0x46
 80085b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085b8:	2301      	movs	r3, #1
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085bc:	f7fc fe0a 	bl	80051d4 <HAL_GetTick>
 80085c0:	0002      	movs	r2, r0
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d802      	bhi.n	80085d2 <HAL_SPI_TransmitReceive+0x33a>
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	3301      	adds	r3, #1
 80085d0:	d102      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x340>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d104      	bne.n	80085e2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80085d8:	2323      	movs	r3, #35	; 0x23
 80085da:	18fb      	adds	r3, r7, r3
 80085dc:	2203      	movs	r2, #3
 80085de:	701a      	strb	r2, [r3, #0]
        goto error;
 80085e0:	e01b      	b.n	800861a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d19d      	bne.n	8008528 <HAL_SPI_TransmitReceive+0x290>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2246      	movs	r2, #70	; 0x46
 80085f0:	5a9b      	ldrh	r3, [r3, r2]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d197      	bne.n	8008528 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	0018      	movs	r0, r3
 8008600:	f000 f9aa 	bl	8008958 <SPI_EndRxTxTransaction>
 8008604:	1e03      	subs	r3, r0, #0
 8008606:	d007      	beq.n	8008618 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8008608:	2323      	movs	r3, #35	; 0x23
 800860a:	18fb      	adds	r3, r7, r3
 800860c:	2201      	movs	r2, #1
 800860e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2220      	movs	r2, #32
 8008614:	661a      	str	r2, [r3, #96]	; 0x60
 8008616:	e000      	b.n	800861a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8008618:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	225d      	movs	r2, #93	; 0x5d
 800861e:	2101      	movs	r1, #1
 8008620:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	225c      	movs	r2, #92	; 0x5c
 8008626:	2100      	movs	r1, #0
 8008628:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800862a:	2323      	movs	r3, #35	; 0x23
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	781b      	ldrb	r3, [r3, #0]
}
 8008630:	0018      	movs	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	b00a      	add	sp, #40	; 0x28
 8008636:	bd80      	pop	{r7, pc}
 8008638:	ffffefff 	.word	0xffffefff

0800863c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	1dfb      	adds	r3, r7, #7
 800864a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800864c:	f7fc fdc2 	bl	80051d4 <HAL_GetTick>
 8008650:	0002      	movs	r2, r0
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	18d3      	adds	r3, r2, r3
 800865a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800865c:	f7fc fdba 	bl	80051d4 <HAL_GetTick>
 8008660:	0003      	movs	r3, r0
 8008662:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008664:	4b3a      	ldr	r3, [pc, #232]	; (8008750 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	015b      	lsls	r3, r3, #5
 800866a:	0d1b      	lsrs	r3, r3, #20
 800866c:	69fa      	ldr	r2, [r7, #28]
 800866e:	4353      	muls	r3, r2
 8008670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008672:	e058      	b.n	8008726 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	3301      	adds	r3, #1
 8008678:	d055      	beq.n	8008726 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800867a:	f7fc fdab 	bl	80051d4 <HAL_GetTick>
 800867e:	0002      	movs	r2, r0
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	429a      	cmp	r2, r3
 8008688:	d902      	bls.n	8008690 <SPI_WaitFlagStateUntilTimeout+0x54>
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d142      	bne.n	8008716 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	21e0      	movs	r1, #224	; 0xe0
 800869c:	438a      	bics	r2, r1
 800869e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	2382      	movs	r3, #130	; 0x82
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d113      	bne.n	80086d4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	2380      	movs	r3, #128	; 0x80
 80086b2:	021b      	lsls	r3, r3, #8
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d005      	beq.n	80086c4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d107      	bne.n	80086d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2140      	movs	r1, #64	; 0x40
 80086d0:	438a      	bics	r2, r1
 80086d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	019b      	lsls	r3, r3, #6
 80086dc:	429a      	cmp	r2, r3
 80086de:	d110      	bne.n	8008702 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	491a      	ldr	r1, [pc, #104]	; (8008754 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80086ec:	400a      	ands	r2, r1
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	0189      	lsls	r1, r1, #6
 80086fe:	430a      	orrs	r2, r1
 8008700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	225d      	movs	r2, #93	; 0x5d
 8008706:	2101      	movs	r1, #1
 8008708:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	225c      	movs	r2, #92	; 0x5c
 800870e:	2100      	movs	r1, #0
 8008710:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e017      	b.n	8008746 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	3b01      	subs	r3, #1
 8008724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	4013      	ands	r3, r2
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	425a      	negs	r2, r3
 8008736:	4153      	adcs	r3, r2
 8008738:	b2db      	uxtb	r3, r3
 800873a:	001a      	movs	r2, r3
 800873c:	1dfb      	adds	r3, r7, #7
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d197      	bne.n	8008674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	0018      	movs	r0, r3
 8008748:	46bd      	mov	sp, r7
 800874a:	b008      	add	sp, #32
 800874c:	bd80      	pop	{r7, pc}
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	20000000 	.word	0x20000000
 8008754:	ffffdfff 	.word	0xffffdfff

08008758 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008766:	2317      	movs	r3, #23
 8008768:	18fb      	adds	r3, r7, r3
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800876e:	f7fc fd31 	bl	80051d4 <HAL_GetTick>
 8008772:	0002      	movs	r2, r0
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	18d3      	adds	r3, r2, r3
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800877e:	f7fc fd29 	bl	80051d4 <HAL_GetTick>
 8008782:	0003      	movs	r3, r0
 8008784:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800878e:	4b41      	ldr	r3, [pc, #260]	; (8008894 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	0013      	movs	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	189b      	adds	r3, r3, r2
 8008798:	00da      	lsls	r2, r3, #3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	0d1b      	lsrs	r3, r3, #20
 800879e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a0:	4353      	muls	r3, r2
 80087a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80087a4:	e068      	b.n	8008878 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	23c0      	movs	r3, #192	; 0xc0
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d10a      	bne.n	80087c6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d107      	bne.n	80087c6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	2117      	movs	r1, #23
 80087be:	187b      	adds	r3, r7, r1
 80087c0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80087c2:	187b      	adds	r3, r7, r1
 80087c4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	d055      	beq.n	8008878 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087cc:	f7fc fd02 	bl	80051d4 <HAL_GetTick>
 80087d0:	0002      	movs	r2, r0
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d8:	429a      	cmp	r2, r3
 80087da:	d902      	bls.n	80087e2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d142      	bne.n	8008868 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	21e0      	movs	r1, #224	; 0xe0
 80087ee:	438a      	bics	r2, r1
 80087f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	2382      	movs	r3, #130	; 0x82
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d113      	bne.n	8008826 <SPI_WaitFifoStateUntilTimeout+0xce>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	429a      	cmp	r2, r3
 8008808:	d005      	beq.n	8008816 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	2380      	movs	r3, #128	; 0x80
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	429a      	cmp	r2, r3
 8008814:	d107      	bne.n	8008826 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2140      	movs	r1, #64	; 0x40
 8008822:	438a      	bics	r2, r1
 8008824:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800882a:	2380      	movs	r3, #128	; 0x80
 800882c:	019b      	lsls	r3, r3, #6
 800882e:	429a      	cmp	r2, r3
 8008830:	d110      	bne.n	8008854 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4916      	ldr	r1, [pc, #88]	; (8008898 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800883e:	400a      	ands	r2, r1
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2180      	movs	r1, #128	; 0x80
 800884e:	0189      	lsls	r1, r1, #6
 8008850:	430a      	orrs	r2, r1
 8008852:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	225d      	movs	r2, #93	; 0x5d
 8008858:	2101      	movs	r1, #1
 800885a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	225c      	movs	r2, #92	; 0x5c
 8008860:	2100      	movs	r1, #0
 8008862:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e010      	b.n	800888a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	3b01      	subs	r3, #1
 8008876:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4013      	ands	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d18e      	bne.n	80087a6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	0018      	movs	r0, r3
 800888c:	46bd      	mov	sp, r7
 800888e:	b00a      	add	sp, #40	; 0x28
 8008890:	bd80      	pop	{r7, pc}
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	20000000 	.word	0x20000000
 8008898:	ffffdfff 	.word	0xffffdfff

0800889c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af02      	add	r7, sp, #8
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	2382      	movs	r3, #130	; 0x82
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d113      	bne.n	80088dc <SPI_EndRxTransaction+0x40>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	2380      	movs	r3, #128	; 0x80
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	429a      	cmp	r2, r3
 80088be:	d005      	beq.n	80088cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	689a      	ldr	r2, [r3, #8]
 80088c4:	2380      	movs	r3, #128	; 0x80
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d107      	bne.n	80088dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2140      	movs	r1, #64	; 0x40
 80088d8:	438a      	bics	r2, r1
 80088da:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	0013      	movs	r3, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	2180      	movs	r1, #128	; 0x80
 80088ea:	f7ff fea7 	bl	800863c <SPI_WaitFlagStateUntilTimeout>
 80088ee:	1e03      	subs	r3, r0, #0
 80088f0:	d007      	beq.n	8008902 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f6:	2220      	movs	r2, #32
 80088f8:	431a      	orrs	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e026      	b.n	8008950 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	2382      	movs	r3, #130	; 0x82
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	429a      	cmp	r2, r3
 800890c:	d11f      	bne.n	800894e <SPI_EndRxTransaction+0xb2>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	2380      	movs	r3, #128	; 0x80
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	429a      	cmp	r2, r3
 8008918:	d005      	beq.n	8008926 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	2380      	movs	r3, #128	; 0x80
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	429a      	cmp	r2, r3
 8008924:	d113      	bne.n	800894e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	23c0      	movs	r3, #192	; 0xc0
 800892a:	00d9      	lsls	r1, r3, #3
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	0013      	movs	r3, r2
 8008934:	2200      	movs	r2, #0
 8008936:	f7ff ff0f 	bl	8008758 <SPI_WaitFifoStateUntilTimeout>
 800893a:	1e03      	subs	r3, r0, #0
 800893c:	d007      	beq.n	800894e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008942:	2220      	movs	r2, #32
 8008944:	431a      	orrs	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e000      	b.n	8008950 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	0018      	movs	r0, r3
 8008952:	46bd      	mov	sp, r7
 8008954:	b004      	add	sp, #16
 8008956:	bd80      	pop	{r7, pc}

08008958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af02      	add	r7, sp, #8
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	23c0      	movs	r3, #192	; 0xc0
 8008968:	0159      	lsls	r1, r3, #5
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	0013      	movs	r3, r2
 8008972:	2200      	movs	r2, #0
 8008974:	f7ff fef0 	bl	8008758 <SPI_WaitFifoStateUntilTimeout>
 8008978:	1e03      	subs	r3, r0, #0
 800897a:	d007      	beq.n	800898c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008980:	2220      	movs	r2, #32
 8008982:	431a      	orrs	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e027      	b.n	80089dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	0013      	movs	r3, r2
 8008996:	2200      	movs	r2, #0
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	f7ff fe4f 	bl	800863c <SPI_WaitFlagStateUntilTimeout>
 800899e:	1e03      	subs	r3, r0, #0
 80089a0:	d007      	beq.n	80089b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a6:	2220      	movs	r2, #32
 80089a8:	431a      	orrs	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e014      	b.n	80089dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	23c0      	movs	r3, #192	; 0xc0
 80089b6:	00d9      	lsls	r1, r3, #3
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	0013      	movs	r3, r2
 80089c0:	2200      	movs	r2, #0
 80089c2:	f7ff fec9 	bl	8008758 <SPI_WaitFifoStateUntilTimeout>
 80089c6:	1e03      	subs	r3, r0, #0
 80089c8:	d007      	beq.n	80089da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ce:	2220      	movs	r2, #32
 80089d0:	431a      	orrs	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e000      	b.n	80089dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b004      	add	sp, #16
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e04a      	b.n	8008a8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	223d      	movs	r2, #61	; 0x3d
 80089fa:	5c9b      	ldrb	r3, [r3, r2]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d107      	bne.n	8008a12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	223c      	movs	r2, #60	; 0x3c
 8008a06:	2100      	movs	r1, #0
 8008a08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fb fd11 	bl	8004434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	223d      	movs	r2, #61	; 0x3d
 8008a16:	2102      	movs	r1, #2
 8008a18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3304      	adds	r3, #4
 8008a22:	0019      	movs	r1, r3
 8008a24:	0010      	movs	r0, r2
 8008a26:	f000 fe91 	bl	800974c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2248      	movs	r2, #72	; 0x48
 8008a2e:	2101      	movs	r1, #1
 8008a30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	223e      	movs	r2, #62	; 0x3e
 8008a36:	2101      	movs	r1, #1
 8008a38:	5499      	strb	r1, [r3, r2]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	223f      	movs	r2, #63	; 0x3f
 8008a3e:	2101      	movs	r1, #1
 8008a40:	5499      	strb	r1, [r3, r2]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2240      	movs	r2, #64	; 0x40
 8008a46:	2101      	movs	r1, #1
 8008a48:	5499      	strb	r1, [r3, r2]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2241      	movs	r2, #65	; 0x41
 8008a4e:	2101      	movs	r1, #1
 8008a50:	5499      	strb	r1, [r3, r2]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2242      	movs	r2, #66	; 0x42
 8008a56:	2101      	movs	r1, #1
 8008a58:	5499      	strb	r1, [r3, r2]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2243      	movs	r2, #67	; 0x43
 8008a5e:	2101      	movs	r1, #1
 8008a60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2244      	movs	r2, #68	; 0x44
 8008a66:	2101      	movs	r1, #1
 8008a68:	5499      	strb	r1, [r3, r2]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2245      	movs	r2, #69	; 0x45
 8008a6e:	2101      	movs	r1, #1
 8008a70:	5499      	strb	r1, [r3, r2]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2246      	movs	r2, #70	; 0x46
 8008a76:	2101      	movs	r1, #1
 8008a78:	5499      	strb	r1, [r3, r2]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2247      	movs	r2, #71	; 0x47
 8008a7e:	2101      	movs	r1, #1
 8008a80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	223d      	movs	r2, #61	; 0x3d
 8008a86:	2101      	movs	r1, #1
 8008a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b002      	add	sp, #8
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	223d      	movs	r2, #61	; 0x3d
 8008aa0:	5c9b      	ldrb	r3, [r3, r2]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d001      	beq.n	8008aac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e034      	b.n	8008b16 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	223d      	movs	r2, #61	; 0x3d
 8008ab0:	2102      	movs	r1, #2
 8008ab2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a19      	ldr	r2, [pc, #100]	; (8008b20 <HAL_TIM_Base_Start+0x8c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d009      	beq.n	8008ad2 <HAL_TIM_Base_Start+0x3e>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a18      	ldr	r2, [pc, #96]	; (8008b24 <HAL_TIM_Base_Start+0x90>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d004      	beq.n	8008ad2 <HAL_TIM_Base_Start+0x3e>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a16      	ldr	r2, [pc, #88]	; (8008b28 <HAL_TIM_Base_Start+0x94>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d116      	bne.n	8008b00 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <HAL_TIM_Base_Start+0x98>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b06      	cmp	r3, #6
 8008ae2:	d016      	beq.n	8008b12 <HAL_TIM_Base_Start+0x7e>
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	2380      	movs	r3, #128	; 0x80
 8008ae8:	025b      	lsls	r3, r3, #9
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d011      	beq.n	8008b12 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2101      	movs	r1, #1
 8008afa:	430a      	orrs	r2, r1
 8008afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afe:	e008      	b.n	8008b12 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	e000      	b.n	8008b14 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b12:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	0018      	movs	r0, r3
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	b004      	add	sp, #16
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	46c0      	nop			; (mov r8, r8)
 8008b20:	40012c00 	.word	0x40012c00
 8008b24:	40000400 	.word	0x40000400
 8008b28:	40014000 	.word	0x40014000
 8008b2c:	00010007 	.word	0x00010007

08008b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	223d      	movs	r2, #61	; 0x3d
 8008b3c:	5c9b      	ldrb	r3, [r3, r2]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d001      	beq.n	8008b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e03c      	b.n	8008bc2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	223d      	movs	r2, #61	; 0x3d
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a19      	ldr	r2, [pc, #100]	; (8008bcc <HAL_TIM_Base_Start_IT+0x9c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d009      	beq.n	8008b7e <HAL_TIM_Base_Start_IT+0x4e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a18      	ldr	r2, [pc, #96]	; (8008bd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d004      	beq.n	8008b7e <HAL_TIM_Base_Start_IT+0x4e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a16      	ldr	r2, [pc, #88]	; (8008bd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d116      	bne.n	8008bac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <HAL_TIM_Base_Start_IT+0xa8>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b06      	cmp	r3, #6
 8008b8e:	d016      	beq.n	8008bbe <HAL_TIM_Base_Start_IT+0x8e>
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	2380      	movs	r3, #128	; 0x80
 8008b94:	025b      	lsls	r3, r3, #9
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d011      	beq.n	8008bbe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008baa:	e008      	b.n	8008bbe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	e000      	b.n	8008bc0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bbe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	b004      	add	sp, #16
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	40012c00 	.word	0x40012c00
 8008bd0:	40000400 	.word	0x40000400
 8008bd4:	40014000 	.word	0x40014000
 8008bd8:	00010007 	.word	0x00010007

08008bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e04a      	b.n	8008c84 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	223d      	movs	r2, #61	; 0x3d
 8008bf2:	5c9b      	ldrb	r3, [r3, r2]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d107      	bne.n	8008c0a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	223c      	movs	r2, #60	; 0x3c
 8008bfe:	2100      	movs	r1, #0
 8008c00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	0018      	movs	r0, r3
 8008c06:	f000 f841 	bl	8008c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	223d      	movs	r2, #61	; 0x3d
 8008c0e:	2102      	movs	r1, #2
 8008c10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	0019      	movs	r1, r3
 8008c1c:	0010      	movs	r0, r2
 8008c1e:	f000 fd95 	bl	800974c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2248      	movs	r2, #72	; 0x48
 8008c26:	2101      	movs	r1, #1
 8008c28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	223e      	movs	r2, #62	; 0x3e
 8008c2e:	2101      	movs	r1, #1
 8008c30:	5499      	strb	r1, [r3, r2]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	223f      	movs	r2, #63	; 0x3f
 8008c36:	2101      	movs	r1, #1
 8008c38:	5499      	strb	r1, [r3, r2]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2240      	movs	r2, #64	; 0x40
 8008c3e:	2101      	movs	r1, #1
 8008c40:	5499      	strb	r1, [r3, r2]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2241      	movs	r2, #65	; 0x41
 8008c46:	2101      	movs	r1, #1
 8008c48:	5499      	strb	r1, [r3, r2]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2242      	movs	r2, #66	; 0x42
 8008c4e:	2101      	movs	r1, #1
 8008c50:	5499      	strb	r1, [r3, r2]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2243      	movs	r2, #67	; 0x43
 8008c56:	2101      	movs	r1, #1
 8008c58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2244      	movs	r2, #68	; 0x44
 8008c5e:	2101      	movs	r1, #1
 8008c60:	5499      	strb	r1, [r3, r2]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2245      	movs	r2, #69	; 0x45
 8008c66:	2101      	movs	r1, #1
 8008c68:	5499      	strb	r1, [r3, r2]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2246      	movs	r2, #70	; 0x46
 8008c6e:	2101      	movs	r1, #1
 8008c70:	5499      	strb	r1, [r3, r2]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2247      	movs	r2, #71	; 0x47
 8008c76:	2101      	movs	r1, #1
 8008c78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	223d      	movs	r2, #61	; 0x3d
 8008c7e:	2101      	movs	r1, #1
 8008c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	0018      	movs	r0, r3
 8008c86:	46bd      	mov	sp, r7
 8008c88:	b002      	add	sp, #8
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c94:	46c0      	nop			; (mov r8, r8)
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b002      	add	sp, #8
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d108      	bne.n	8008cbe <HAL_TIM_PWM_Start+0x22>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	223e      	movs	r2, #62	; 0x3e
 8008cb0:	5c9b      	ldrb	r3, [r3, r2]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	1e5a      	subs	r2, r3, #1
 8008cb8:	4193      	sbcs	r3, r2
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	e037      	b.n	8008d2e <HAL_TIM_PWM_Start+0x92>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d108      	bne.n	8008cd6 <HAL_TIM_PWM_Start+0x3a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	223f      	movs	r2, #63	; 0x3f
 8008cc8:	5c9b      	ldrb	r3, [r3, r2]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	1e5a      	subs	r2, r3, #1
 8008cd0:	4193      	sbcs	r3, r2
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	e02b      	b.n	8008d2e <HAL_TIM_PWM_Start+0x92>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d108      	bne.n	8008cee <HAL_TIM_PWM_Start+0x52>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2240      	movs	r2, #64	; 0x40
 8008ce0:	5c9b      	ldrb	r3, [r3, r2]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	1e5a      	subs	r2, r3, #1
 8008ce8:	4193      	sbcs	r3, r2
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	e01f      	b.n	8008d2e <HAL_TIM_PWM_Start+0x92>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b0c      	cmp	r3, #12
 8008cf2:	d108      	bne.n	8008d06 <HAL_TIM_PWM_Start+0x6a>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2241      	movs	r2, #65	; 0x41
 8008cf8:	5c9b      	ldrb	r3, [r3, r2]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	1e5a      	subs	r2, r3, #1
 8008d00:	4193      	sbcs	r3, r2
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	e013      	b.n	8008d2e <HAL_TIM_PWM_Start+0x92>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b10      	cmp	r3, #16
 8008d0a:	d108      	bne.n	8008d1e <HAL_TIM_PWM_Start+0x82>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2242      	movs	r2, #66	; 0x42
 8008d10:	5c9b      	ldrb	r3, [r3, r2]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	1e5a      	subs	r2, r3, #1
 8008d18:	4193      	sbcs	r3, r2
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	e007      	b.n	8008d2e <HAL_TIM_PWM_Start+0x92>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2243      	movs	r2, #67	; 0x43
 8008d22:	5c9b      	ldrb	r3, [r3, r2]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	1e5a      	subs	r2, r3, #1
 8008d2a:	4193      	sbcs	r3, r2
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e085      	b.n	8008e42 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_PWM_Start+0xaa>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	223e      	movs	r2, #62	; 0x3e
 8008d40:	2102      	movs	r1, #2
 8008d42:	5499      	strb	r1, [r3, r2]
 8008d44:	e023      	b.n	8008d8e <HAL_TIM_PWM_Start+0xf2>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d104      	bne.n	8008d56 <HAL_TIM_PWM_Start+0xba>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	223f      	movs	r2, #63	; 0x3f
 8008d50:	2102      	movs	r1, #2
 8008d52:	5499      	strb	r1, [r3, r2]
 8008d54:	e01b      	b.n	8008d8e <HAL_TIM_PWM_Start+0xf2>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d104      	bne.n	8008d66 <HAL_TIM_PWM_Start+0xca>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2240      	movs	r2, #64	; 0x40
 8008d60:	2102      	movs	r1, #2
 8008d62:	5499      	strb	r1, [r3, r2]
 8008d64:	e013      	b.n	8008d8e <HAL_TIM_PWM_Start+0xf2>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b0c      	cmp	r3, #12
 8008d6a:	d104      	bne.n	8008d76 <HAL_TIM_PWM_Start+0xda>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2241      	movs	r2, #65	; 0x41
 8008d70:	2102      	movs	r1, #2
 8008d72:	5499      	strb	r1, [r3, r2]
 8008d74:	e00b      	b.n	8008d8e <HAL_TIM_PWM_Start+0xf2>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b10      	cmp	r3, #16
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_PWM_Start+0xea>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2242      	movs	r2, #66	; 0x42
 8008d80:	2102      	movs	r1, #2
 8008d82:	5499      	strb	r1, [r3, r2]
 8008d84:	e003      	b.n	8008d8e <HAL_TIM_PWM_Start+0xf2>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2243      	movs	r2, #67	; 0x43
 8008d8a:	2102      	movs	r1, #2
 8008d8c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	0018      	movs	r0, r3
 8008d98:	f001 f8ae 	bl	8009ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a2a      	ldr	r2, [pc, #168]	; (8008e4c <HAL_TIM_PWM_Start+0x1b0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00e      	beq.n	8008dc4 <HAL_TIM_PWM_Start+0x128>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a29      	ldr	r2, [pc, #164]	; (8008e50 <HAL_TIM_PWM_Start+0x1b4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <HAL_TIM_PWM_Start+0x128>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a27      	ldr	r2, [pc, #156]	; (8008e54 <HAL_TIM_PWM_Start+0x1b8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <HAL_TIM_PWM_Start+0x128>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a26      	ldr	r2, [pc, #152]	; (8008e58 <HAL_TIM_PWM_Start+0x1bc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIM_PWM_Start+0x12c>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <HAL_TIM_PWM_Start+0x12e>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d008      	beq.n	8008de0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2180      	movs	r1, #128	; 0x80
 8008dda:	0209      	lsls	r1, r1, #8
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a19      	ldr	r2, [pc, #100]	; (8008e4c <HAL_TIM_PWM_Start+0x1b0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d009      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x162>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a1b      	ldr	r2, [pc, #108]	; (8008e5c <HAL_TIM_PWM_Start+0x1c0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d004      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x162>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a15      	ldr	r2, [pc, #84]	; (8008e50 <HAL_TIM_PWM_Start+0x1b4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d116      	bne.n	8008e2c <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	4a16      	ldr	r2, [pc, #88]	; (8008e60 <HAL_TIM_PWM_Start+0x1c4>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b06      	cmp	r3, #6
 8008e0e:	d016      	beq.n	8008e3e <HAL_TIM_PWM_Start+0x1a2>
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	2380      	movs	r3, #128	; 0x80
 8008e14:	025b      	lsls	r3, r3, #9
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d011      	beq.n	8008e3e <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2101      	movs	r1, #1
 8008e26:	430a      	orrs	r2, r1
 8008e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e2a:	e008      	b.n	8008e3e <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2101      	movs	r1, #1
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e000      	b.n	8008e40 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e3e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	0018      	movs	r0, r3
 8008e44:	46bd      	mov	sp, r7
 8008e46:	b004      	add	sp, #16
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	40012c00 	.word	0x40012c00
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40014400 	.word	0x40014400
 8008e58:	40014800 	.word	0x40014800
 8008e5c:	40000400 	.word	0x40000400
 8008e60:	00010007 	.word	0x00010007

08008e64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e090      	b.n	8008f9a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	223d      	movs	r2, #61	; 0x3d
 8008e7c:	5c9b      	ldrb	r3, [r3, r2]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d107      	bne.n	8008e94 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	223c      	movs	r2, #60	; 0x3c
 8008e88:	2100      	movs	r1, #0
 8008e8a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7fb fba0 	bl	80045d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	223d      	movs	r2, #61	; 0x3d
 8008e98:	2102      	movs	r1, #2
 8008e9a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	493f      	ldr	r1, [pc, #252]	; (8008fa4 <HAL_TIM_Encoder_Init+0x140>)
 8008ea8:	400a      	ands	r2, r1
 8008eaa:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	0010      	movs	r0, r2
 8008eb8:	f000 fc48 	bl	800974c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	4a31      	ldr	r2, [pc, #196]	; (8008fa8 <HAL_TIM_Encoder_Init+0x144>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	021b      	lsls	r3, r3, #8
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4a2c      	ldr	r2, [pc, #176]	; (8008fac <HAL_TIM_Encoder_Init+0x148>)
 8008efc:	4013      	ands	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	4a2b      	ldr	r2, [pc, #172]	; (8008fb0 <HAL_TIM_Encoder_Init+0x14c>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	4313      	orrs	r3, r2
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	011a      	lsls	r2, r3, #4
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	031b      	lsls	r3, r3, #12
 8008f26:	4313      	orrs	r3, r2
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2222      	movs	r2, #34	; 0x22
 8008f32:	4393      	bics	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2288      	movs	r2, #136	; 0x88
 8008f3a:	4393      	bics	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	011b      	lsls	r3, r3, #4
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2248      	movs	r2, #72	; 0x48
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	223e      	movs	r2, #62	; 0x3e
 8008f74:	2101      	movs	r1, #1
 8008f76:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	223f      	movs	r2, #63	; 0x3f
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2244      	movs	r2, #68	; 0x44
 8008f84:	2101      	movs	r1, #1
 8008f86:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2245      	movs	r2, #69	; 0x45
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	223d      	movs	r2, #61	; 0x3d
 8008f94:	2101      	movs	r1, #1
 8008f96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	b006      	add	sp, #24
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	fffebff8 	.word	0xfffebff8
 8008fa8:	fffffcfc 	.word	0xfffffcfc
 8008fac:	fffff3f3 	.word	0xfffff3f3
 8008fb0:	ffff0f0f 	.word	0xffff0f0f

08008fb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fb4:	b590      	push	{r4, r7, lr}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008fbe:	200f      	movs	r0, #15
 8008fc0:	183b      	adds	r3, r7, r0
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	213e      	movs	r1, #62	; 0x3e
 8008fc6:	5c52      	ldrb	r2, [r2, r1]
 8008fc8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008fca:	230e      	movs	r3, #14
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	213f      	movs	r1, #63	; 0x3f
 8008fd2:	5c52      	ldrb	r2, [r2, r1]
 8008fd4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008fd6:	240d      	movs	r4, #13
 8008fd8:	193b      	adds	r3, r7, r4
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	2144      	movs	r1, #68	; 0x44
 8008fde:	5c52      	ldrb	r2, [r2, r1]
 8008fe0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	18fb      	adds	r3, r7, r3
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	2145      	movs	r1, #69	; 0x45
 8008fea:	5c52      	ldrb	r2, [r2, r1]
 8008fec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d112      	bne.n	800901a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ff4:	183b      	adds	r3, r7, r0
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d103      	bne.n	8009004 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ffc:	193b      	adds	r3, r7, r4
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d001      	beq.n	8009008 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e075      	b.n	80090f4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	223e      	movs	r2, #62	; 0x3e
 800900c:	2102      	movs	r1, #2
 800900e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2244      	movs	r2, #68	; 0x44
 8009014:	2102      	movs	r1, #2
 8009016:	5499      	strb	r1, [r3, r2]
 8009018:	e03d      	b.n	8009096 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b04      	cmp	r3, #4
 800901e:	d114      	bne.n	800904a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009020:	230e      	movs	r3, #14
 8009022:	18fb      	adds	r3, r7, r3
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d104      	bne.n	8009034 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800902a:	230c      	movs	r3, #12
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d001      	beq.n	8009038 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e05d      	b.n	80090f4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	223f      	movs	r2, #63	; 0x3f
 800903c:	2102      	movs	r1, #2
 800903e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2245      	movs	r2, #69	; 0x45
 8009044:	2102      	movs	r1, #2
 8009046:	5499      	strb	r1, [r3, r2]
 8009048:	e025      	b.n	8009096 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800904a:	230f      	movs	r3, #15
 800904c:	18fb      	adds	r3, r7, r3
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d10e      	bne.n	8009072 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009054:	230e      	movs	r3, #14
 8009056:	18fb      	adds	r3, r7, r3
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d109      	bne.n	8009072 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800905e:	230d      	movs	r3, #13
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d104      	bne.n	8009072 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009068:	230c      	movs	r3, #12
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d001      	beq.n	8009076 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e03e      	b.n	80090f4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	223e      	movs	r2, #62	; 0x3e
 800907a:	2102      	movs	r1, #2
 800907c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	223f      	movs	r2, #63	; 0x3f
 8009082:	2102      	movs	r1, #2
 8009084:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2244      	movs	r2, #68	; 0x44
 800908a:	2102      	movs	r1, #2
 800908c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2245      	movs	r2, #69	; 0x45
 8009092:	2102      	movs	r1, #2
 8009094:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_TIM_Encoder_Start+0xf0>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d008      	beq.n	80090b4 <HAL_TIM_Encoder_Start+0x100>
 80090a2:	e00f      	b.n	80090c4 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2201      	movs	r2, #1
 80090aa:	2100      	movs	r1, #0
 80090ac:	0018      	movs	r0, r3
 80090ae:	f000 ff23 	bl	8009ef8 <TIM_CCxChannelCmd>
      break;
 80090b2:	e016      	b.n	80090e2 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2201      	movs	r2, #1
 80090ba:	2104      	movs	r1, #4
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 ff1b 	bl	8009ef8 <TIM_CCxChannelCmd>
      break;
 80090c2:	e00e      	b.n	80090e2 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2201      	movs	r2, #1
 80090ca:	2100      	movs	r1, #0
 80090cc:	0018      	movs	r0, r3
 80090ce:	f000 ff13 	bl	8009ef8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2201      	movs	r2, #1
 80090d8:	2104      	movs	r1, #4
 80090da:	0018      	movs	r0, r3
 80090dc:	f000 ff0c 	bl	8009ef8 <TIM_CCxChannelCmd>
      break;
 80090e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2101      	movs	r1, #1
 80090ee:	430a      	orrs	r2, r1
 80090f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	0018      	movs	r0, r3
 80090f6:	46bd      	mov	sp, r7
 80090f8:	b005      	add	sp, #20
 80090fa:	bd90      	pop	{r4, r7, pc}

080090fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	2202      	movs	r2, #2
 800910c:	4013      	ands	r3, r2
 800910e:	2b02      	cmp	r3, #2
 8009110:	d124      	bne.n	800915c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2202      	movs	r2, #2
 800911a:	4013      	ands	r3, r2
 800911c:	2b02      	cmp	r3, #2
 800911e:	d11d      	bne.n	800915c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2203      	movs	r2, #3
 8009126:	4252      	negs	r2, r2
 8009128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	2203      	movs	r2, #3
 8009138:	4013      	ands	r3, r2
 800913a:	d004      	beq.n	8009146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	0018      	movs	r0, r3
 8009140:	f000 faec 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 8009144:	e007      	b.n	8009156 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	0018      	movs	r0, r3
 800914a:	f000 fadf 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	0018      	movs	r0, r3
 8009152:	f000 faeb 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	2204      	movs	r2, #4
 8009164:	4013      	ands	r3, r2
 8009166:	2b04      	cmp	r3, #4
 8009168:	d125      	bne.n	80091b6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2204      	movs	r2, #4
 8009172:	4013      	ands	r3, r2
 8009174:	2b04      	cmp	r3, #4
 8009176:	d11e      	bne.n	80091b6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2205      	movs	r2, #5
 800917e:	4252      	negs	r2, r2
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2202      	movs	r2, #2
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699a      	ldr	r2, [r3, #24]
 800918e:	23c0      	movs	r3, #192	; 0xc0
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4013      	ands	r3, r2
 8009194:	d004      	beq.n	80091a0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	0018      	movs	r0, r3
 800919a:	f000 fabf 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 800919e:	e007      	b.n	80091b0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	0018      	movs	r0, r3
 80091a4:	f000 fab2 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	0018      	movs	r0, r3
 80091ac:	f000 fabe 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	2208      	movs	r2, #8
 80091be:	4013      	ands	r3, r2
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d124      	bne.n	800920e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	2208      	movs	r2, #8
 80091cc:	4013      	ands	r3, r2
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d11d      	bne.n	800920e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2209      	movs	r2, #9
 80091d8:	4252      	negs	r2, r2
 80091da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2204      	movs	r2, #4
 80091e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	2203      	movs	r2, #3
 80091ea:	4013      	ands	r3, r2
 80091ec:	d004      	beq.n	80091f8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	0018      	movs	r0, r3
 80091f2:	f000 fa93 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 80091f6:	e007      	b.n	8009208 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	0018      	movs	r0, r3
 80091fc:	f000 fa86 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	0018      	movs	r0, r3
 8009204:	f000 fa92 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2210      	movs	r2, #16
 8009216:	4013      	ands	r3, r2
 8009218:	2b10      	cmp	r3, #16
 800921a:	d125      	bne.n	8009268 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2210      	movs	r2, #16
 8009224:	4013      	ands	r3, r2
 8009226:	2b10      	cmp	r3, #16
 8009228:	d11e      	bne.n	8009268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2211      	movs	r2, #17
 8009230:	4252      	negs	r2, r2
 8009232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2208      	movs	r2, #8
 8009238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69da      	ldr	r2, [r3, #28]
 8009240:	23c0      	movs	r3, #192	; 0xc0
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4013      	ands	r3, r2
 8009246:	d004      	beq.n	8009252 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	0018      	movs	r0, r3
 800924c:	f000 fa66 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 8009250:	e007      	b.n	8009262 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	0018      	movs	r0, r3
 8009256:	f000 fa59 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	0018      	movs	r0, r3
 800925e:	f000 fa65 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2201      	movs	r2, #1
 8009270:	4013      	ands	r3, r2
 8009272:	2b01      	cmp	r3, #1
 8009274:	d10f      	bne.n	8009296 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	4013      	ands	r3, r2
 8009280:	2b01      	cmp	r3, #1
 8009282:	d108      	bne.n	8009296 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2202      	movs	r2, #2
 800928a:	4252      	negs	r2, r2
 800928c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	0018      	movs	r0, r3
 8009292:	f7fb fa2f 	bl	80046f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2280      	movs	r2, #128	; 0x80
 800929e:	4013      	ands	r3, r2
 80092a0:	2b80      	cmp	r3, #128	; 0x80
 80092a2:	d10f      	bne.n	80092c4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	2280      	movs	r2, #128	; 0x80
 80092ac:	4013      	ands	r3, r2
 80092ae:	2b80      	cmp	r3, #128	; 0x80
 80092b0:	d108      	bne.n	80092c4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2281      	movs	r2, #129	; 0x81
 80092b8:	4252      	negs	r2, r2
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	0018      	movs	r0, r3
 80092c0:	f000 ff54 	bl	800a16c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	691a      	ldr	r2, [r3, #16]
 80092ca:	2380      	movs	r3, #128	; 0x80
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	401a      	ands	r2, r3
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d10e      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	2280      	movs	r2, #128	; 0x80
 80092e0:	4013      	ands	r3, r2
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d107      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a1c      	ldr	r2, [pc, #112]	; (800935c <HAL_TIM_IRQHandler+0x260>)
 80092ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	0018      	movs	r0, r3
 80092f2:	f000 ff43 	bl	800a17c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2240      	movs	r2, #64	; 0x40
 80092fe:	4013      	ands	r3, r2
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	d10f      	bne.n	8009324 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	2240      	movs	r2, #64	; 0x40
 800930c:	4013      	ands	r3, r2
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d108      	bne.n	8009324 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2241      	movs	r2, #65	; 0x41
 8009318:	4252      	negs	r2, r2
 800931a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	0018      	movs	r0, r3
 8009320:	f000 fa0c 	bl	800973c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	2220      	movs	r2, #32
 800932c:	4013      	ands	r3, r2
 800932e:	2b20      	cmp	r3, #32
 8009330:	d10f      	bne.n	8009352 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	4013      	ands	r3, r2
 800933c:	2b20      	cmp	r3, #32
 800933e:	d108      	bne.n	8009352 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2221      	movs	r2, #33	; 0x21
 8009346:	4252      	negs	r2, r2
 8009348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	0018      	movs	r0, r3
 800934e:	f000 ff05 	bl	800a15c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	46bd      	mov	sp, r7
 8009356:	b002      	add	sp, #8
 8009358:	bd80      	pop	{r7, pc}
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	fffffeff 	.word	0xfffffeff

08009360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800936c:	2317      	movs	r3, #23
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	223c      	movs	r2, #60	; 0x3c
 8009378:	5c9b      	ldrb	r3, [r3, r2]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d101      	bne.n	8009382 <HAL_TIM_PWM_ConfigChannel+0x22>
 800937e:	2302      	movs	r3, #2
 8009380:	e0e5      	b.n	800954e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	223c      	movs	r2, #60	; 0x3c
 8009386:	2101      	movs	r1, #1
 8009388:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b14      	cmp	r3, #20
 800938e:	d900      	bls.n	8009392 <HAL_TIM_PWM_ConfigChannel+0x32>
 8009390:	e0d1      	b.n	8009536 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	009a      	lsls	r2, r3, #2
 8009396:	4b70      	ldr	r3, [pc, #448]	; (8009558 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8009398:	18d3      	adds	r3, r2, r3
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	0011      	movs	r1, r2
 80093a6:	0018      	movs	r0, r3
 80093a8:	f000 fa46 	bl	8009838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2108      	movs	r1, #8
 80093b8:	430a      	orrs	r2, r1
 80093ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2104      	movs	r1, #4
 80093c8:	438a      	bics	r2, r1
 80093ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6999      	ldr	r1, [r3, #24]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	691a      	ldr	r2, [r3, #16]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	619a      	str	r2, [r3, #24]
      break;
 80093de:	e0af      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	0011      	movs	r1, r2
 80093e8:	0018      	movs	r0, r3
 80093ea:	f000 faaf 	bl	800994c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	699a      	ldr	r2, [r3, #24]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2180      	movs	r1, #128	; 0x80
 80093fa:	0109      	lsls	r1, r1, #4
 80093fc:	430a      	orrs	r2, r1
 80093fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4954      	ldr	r1, [pc, #336]	; (800955c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800940c:	400a      	ands	r2, r1
 800940e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6999      	ldr	r1, [r3, #24]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	021a      	lsls	r2, r3, #8
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	619a      	str	r2, [r3, #24]
      break;
 8009424:	e08c      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	0011      	movs	r1, r2
 800942e:	0018      	movs	r0, r3
 8009430:	f000 fb10 	bl	8009a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	69da      	ldr	r2, [r3, #28]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2108      	movs	r1, #8
 8009440:	430a      	orrs	r2, r1
 8009442:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	69da      	ldr	r2, [r3, #28]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2104      	movs	r1, #4
 8009450:	438a      	bics	r2, r1
 8009452:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	69d9      	ldr	r1, [r3, #28]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	61da      	str	r2, [r3, #28]
      break;
 8009466:	e06b      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	0011      	movs	r1, r2
 8009470:	0018      	movs	r0, r3
 8009472:	f000 fb77 	bl	8009b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69da      	ldr	r2, [r3, #28]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2180      	movs	r1, #128	; 0x80
 8009482:	0109      	lsls	r1, r1, #4
 8009484:	430a      	orrs	r2, r1
 8009486:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69da      	ldr	r2, [r3, #28]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4932      	ldr	r1, [pc, #200]	; (800955c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009494:	400a      	ands	r2, r1
 8009496:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69d9      	ldr	r1, [r3, #28]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	021a      	lsls	r2, r3, #8
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	61da      	str	r2, [r3, #28]
      break;
 80094ac:	e048      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	0011      	movs	r1, r2
 80094b6:	0018      	movs	r0, r3
 80094b8:	f000 fbbe 	bl	8009c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2108      	movs	r1, #8
 80094c8:	430a      	orrs	r2, r1
 80094ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2104      	movs	r1, #4
 80094d8:	438a      	bics	r2, r1
 80094da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094ee:	e027      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	0011      	movs	r1, r2
 80094f8:	0018      	movs	r0, r3
 80094fa:	f000 fbfd 	bl	8009cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2180      	movs	r1, #128	; 0x80
 800950a:	0109      	lsls	r1, r1, #4
 800950c:	430a      	orrs	r2, r1
 800950e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4910      	ldr	r1, [pc, #64]	; (800955c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800951c:	400a      	ands	r2, r1
 800951e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	021a      	lsls	r2, r3, #8
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009534:	e004      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8009536:	2317      	movs	r3, #23
 8009538:	18fb      	adds	r3, r7, r3
 800953a:	2201      	movs	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
      break;
 800953e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	223c      	movs	r2, #60	; 0x3c
 8009544:	2100      	movs	r1, #0
 8009546:	5499      	strb	r1, [r3, r2]

  return status;
 8009548:	2317      	movs	r3, #23
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	781b      	ldrb	r3, [r3, #0]
}
 800954e:	0018      	movs	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	b006      	add	sp, #24
 8009554:	bd80      	pop	{r7, pc}
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	080187cc 	.word	0x080187cc
 800955c:	fffffbff 	.word	0xfffffbff

08009560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800956a:	230f      	movs	r3, #15
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	2200      	movs	r2, #0
 8009570:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	223c      	movs	r2, #60	; 0x3c
 8009576:	5c9b      	ldrb	r3, [r3, r2]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_TIM_ConfigClockSource+0x20>
 800957c:	2302      	movs	r3, #2
 800957e:	e0bc      	b.n	80096fa <HAL_TIM_ConfigClockSource+0x19a>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	223c      	movs	r2, #60	; 0x3c
 8009584:	2101      	movs	r1, #1
 8009586:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	223d      	movs	r2, #61	; 0x3d
 800958c:	2102      	movs	r1, #2
 800958e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4a5a      	ldr	r2, [pc, #360]	; (8009704 <HAL_TIM_ConfigClockSource+0x1a4>)
 800959c:	4013      	ands	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	4a59      	ldr	r2, [pc, #356]	; (8009708 <HAL_TIM_ConfigClockSource+0x1a8>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2280      	movs	r2, #128	; 0x80
 80095b6:	0192      	lsls	r2, r2, #6
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d040      	beq.n	800963e <HAL_TIM_ConfigClockSource+0xde>
 80095bc:	2280      	movs	r2, #128	; 0x80
 80095be:	0192      	lsls	r2, r2, #6
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d900      	bls.n	80095c6 <HAL_TIM_ConfigClockSource+0x66>
 80095c4:	e088      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 80095c6:	2280      	movs	r2, #128	; 0x80
 80095c8:	0152      	lsls	r2, r2, #5
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d100      	bne.n	80095d0 <HAL_TIM_ConfigClockSource+0x70>
 80095ce:	e088      	b.n	80096e2 <HAL_TIM_ConfigClockSource+0x182>
 80095d0:	2280      	movs	r2, #128	; 0x80
 80095d2:	0152      	lsls	r2, r2, #5
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d900      	bls.n	80095da <HAL_TIM_ConfigClockSource+0x7a>
 80095d8:	e07e      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 80095da:	2b70      	cmp	r3, #112	; 0x70
 80095dc:	d018      	beq.n	8009610 <HAL_TIM_ConfigClockSource+0xb0>
 80095de:	d900      	bls.n	80095e2 <HAL_TIM_ConfigClockSource+0x82>
 80095e0:	e07a      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 80095e2:	2b60      	cmp	r3, #96	; 0x60
 80095e4:	d04f      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x126>
 80095e6:	d900      	bls.n	80095ea <HAL_TIM_ConfigClockSource+0x8a>
 80095e8:	e076      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 80095ea:	2b50      	cmp	r3, #80	; 0x50
 80095ec:	d03b      	beq.n	8009666 <HAL_TIM_ConfigClockSource+0x106>
 80095ee:	d900      	bls.n	80095f2 <HAL_TIM_ConfigClockSource+0x92>
 80095f0:	e072      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	d057      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0x146>
 80095f6:	d900      	bls.n	80095fa <HAL_TIM_ConfigClockSource+0x9a>
 80095f8:	e06e      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 80095fa:	2b30      	cmp	r3, #48	; 0x30
 80095fc:	d063      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x166>
 80095fe:	d86b      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 8009600:	2b20      	cmp	r3, #32
 8009602:	d060      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x166>
 8009604:	d868      	bhi.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d05d      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x166>
 800960a:	2b10      	cmp	r3, #16
 800960c:	d05b      	beq.n	80096c6 <HAL_TIM_ConfigClockSource+0x166>
 800960e:	e063      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	6899      	ldr	r1, [r3, #8]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f000 fc4a 	bl	8009eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2277      	movs	r2, #119	; 0x77
 8009630:	4313      	orrs	r3, r2
 8009632:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	609a      	str	r2, [r3, #8]
      break;
 800963c:	e052      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	6899      	ldr	r1, [r3, #8]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f000 fc33 	bl	8009eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2180      	movs	r1, #128	; 0x80
 800965e:	01c9      	lsls	r1, r1, #7
 8009660:	430a      	orrs	r2, r1
 8009662:	609a      	str	r2, [r3, #8]
      break;
 8009664:	e03e      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	6859      	ldr	r1, [r3, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	001a      	movs	r2, r3
 8009674:	f000 fba4 	bl	8009dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2150      	movs	r1, #80	; 0x50
 800967e:	0018      	movs	r0, r3
 8009680:	f000 fbfe 	bl	8009e80 <TIM_ITRx_SetConfig>
      break;
 8009684:	e02e      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6818      	ldr	r0, [r3, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	6859      	ldr	r1, [r3, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	001a      	movs	r2, r3
 8009694:	f000 fbc2 	bl	8009e1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2160      	movs	r1, #96	; 0x60
 800969e:	0018      	movs	r0, r3
 80096a0:	f000 fbee 	bl	8009e80 <TIM_ITRx_SetConfig>
      break;
 80096a4:	e01e      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6859      	ldr	r1, [r3, #4]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	001a      	movs	r2, r3
 80096b4:	f000 fb84 	bl	8009dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2140      	movs	r1, #64	; 0x40
 80096be:	0018      	movs	r0, r3
 80096c0:	f000 fbde 	bl	8009e80 <TIM_ITRx_SetConfig>
      break;
 80096c4:	e00e      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	0019      	movs	r1, r3
 80096d0:	0010      	movs	r0, r2
 80096d2:	f000 fbd5 	bl	8009e80 <TIM_ITRx_SetConfig>
      break;
 80096d6:	e005      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80096d8:	230f      	movs	r3, #15
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	2201      	movs	r2, #1
 80096de:	701a      	strb	r2, [r3, #0]
      break;
 80096e0:	e000      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80096e2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	223d      	movs	r2, #61	; 0x3d
 80096e8:	2101      	movs	r1, #1
 80096ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	223c      	movs	r2, #60	; 0x3c
 80096f0:	2100      	movs	r1, #0
 80096f2:	5499      	strb	r1, [r3, r2]

  return status;
 80096f4:	230f      	movs	r3, #15
 80096f6:	18fb      	adds	r3, r7, r3
 80096f8:	781b      	ldrb	r3, [r3, #0]
}
 80096fa:	0018      	movs	r0, r3
 80096fc:	46bd      	mov	sp, r7
 80096fe:	b004      	add	sp, #16
 8009700:	bd80      	pop	{r7, pc}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	ffceff88 	.word	0xffceff88
 8009708:	ffff00ff 	.word	0xffff00ff

0800970c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009714:	46c0      	nop			; (mov r8, r8)
 8009716:	46bd      	mov	sp, r7
 8009718:	b002      	add	sp, #8
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009724:	46c0      	nop			; (mov r8, r8)
 8009726:	46bd      	mov	sp, r7
 8009728:	b002      	add	sp, #8
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009734:	46c0      	nop			; (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	b002      	add	sp, #8
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009744:	46c0      	nop			; (mov r8, r8)
 8009746:	46bd      	mov	sp, r7
 8009748:	b002      	add	sp, #8
 800974a:	bd80      	pop	{r7, pc}

0800974c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a2f      	ldr	r2, [pc, #188]	; (800981c <TIM_Base_SetConfig+0xd0>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d003      	beq.n	800976c <TIM_Base_SetConfig+0x20>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a2e      	ldr	r2, [pc, #184]	; (8009820 <TIM_Base_SetConfig+0xd4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d108      	bne.n	800977e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2270      	movs	r2, #112	; 0x70
 8009770:	4393      	bics	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a26      	ldr	r2, [pc, #152]	; (800981c <TIM_Base_SetConfig+0xd0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d013      	beq.n	80097ae <TIM_Base_SetConfig+0x62>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a25      	ldr	r2, [pc, #148]	; (8009820 <TIM_Base_SetConfig+0xd4>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00f      	beq.n	80097ae <TIM_Base_SetConfig+0x62>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a24      	ldr	r2, [pc, #144]	; (8009824 <TIM_Base_SetConfig+0xd8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00b      	beq.n	80097ae <TIM_Base_SetConfig+0x62>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a23      	ldr	r2, [pc, #140]	; (8009828 <TIM_Base_SetConfig+0xdc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d007      	beq.n	80097ae <TIM_Base_SetConfig+0x62>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a22      	ldr	r2, [pc, #136]	; (800982c <TIM_Base_SetConfig+0xe0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d003      	beq.n	80097ae <TIM_Base_SetConfig+0x62>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a21      	ldr	r2, [pc, #132]	; (8009830 <TIM_Base_SetConfig+0xe4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d108      	bne.n	80097c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4a20      	ldr	r2, [pc, #128]	; (8009834 <TIM_Base_SetConfig+0xe8>)
 80097b2:	4013      	ands	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	4313      	orrs	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2280      	movs	r2, #128	; 0x80
 80097c4:	4393      	bics	r3, r2
 80097c6:	001a      	movs	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a0c      	ldr	r2, [pc, #48]	; (800981c <TIM_Base_SetConfig+0xd0>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00b      	beq.n	8009806 <TIM_Base_SetConfig+0xba>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a0d      	ldr	r2, [pc, #52]	; (8009828 <TIM_Base_SetConfig+0xdc>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d007      	beq.n	8009806 <TIM_Base_SetConfig+0xba>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a0c      	ldr	r2, [pc, #48]	; (800982c <TIM_Base_SetConfig+0xe0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d003      	beq.n	8009806 <TIM_Base_SetConfig+0xba>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a0b      	ldr	r2, [pc, #44]	; (8009830 <TIM_Base_SetConfig+0xe4>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d103      	bne.n	800980e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	691a      	ldr	r2, [r3, #16]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	615a      	str	r2, [r3, #20]
}
 8009814:	46c0      	nop			; (mov r8, r8)
 8009816:	46bd      	mov	sp, r7
 8009818:	b004      	add	sp, #16
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40012c00 	.word	0x40012c00
 8009820:	40000400 	.word	0x40000400
 8009824:	40002000 	.word	0x40002000
 8009828:	40014000 	.word	0x40014000
 800982c:	40014400 	.word	0x40014400
 8009830:	40014800 	.word	0x40014800
 8009834:	fffffcff 	.word	0xfffffcff

08009838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	2201      	movs	r2, #1
 8009848:	4393      	bics	r3, r2
 800984a:	001a      	movs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a32      	ldr	r2, [pc, #200]	; (8009930 <TIM_OC1_SetConfig+0xf8>)
 8009866:	4013      	ands	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2203      	movs	r2, #3
 800986e:	4393      	bics	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4313      	orrs	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	2202      	movs	r2, #2
 8009880:	4393      	bics	r3, r2
 8009882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a28      	ldr	r2, [pc, #160]	; (8009934 <TIM_OC1_SetConfig+0xfc>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00b      	beq.n	80098ae <TIM_OC1_SetConfig+0x76>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a27      	ldr	r2, [pc, #156]	; (8009938 <TIM_OC1_SetConfig+0x100>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d007      	beq.n	80098ae <TIM_OC1_SetConfig+0x76>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a26      	ldr	r2, [pc, #152]	; (800993c <TIM_OC1_SetConfig+0x104>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d003      	beq.n	80098ae <TIM_OC1_SetConfig+0x76>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a25      	ldr	r2, [pc, #148]	; (8009940 <TIM_OC1_SetConfig+0x108>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d10c      	bne.n	80098c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2208      	movs	r2, #8
 80098b2:	4393      	bics	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2204      	movs	r2, #4
 80098c4:	4393      	bics	r3, r2
 80098c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a1a      	ldr	r2, [pc, #104]	; (8009934 <TIM_OC1_SetConfig+0xfc>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00b      	beq.n	80098e8 <TIM_OC1_SetConfig+0xb0>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a19      	ldr	r2, [pc, #100]	; (8009938 <TIM_OC1_SetConfig+0x100>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d007      	beq.n	80098e8 <TIM_OC1_SetConfig+0xb0>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a18      	ldr	r2, [pc, #96]	; (800993c <TIM_OC1_SetConfig+0x104>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d003      	beq.n	80098e8 <TIM_OC1_SetConfig+0xb0>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a17      	ldr	r2, [pc, #92]	; (8009940 <TIM_OC1_SetConfig+0x108>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d111      	bne.n	800990c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	4a16      	ldr	r2, [pc, #88]	; (8009944 <TIM_OC1_SetConfig+0x10c>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	4a15      	ldr	r2, [pc, #84]	; (8009948 <TIM_OC1_SetConfig+0x110>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	621a      	str	r2, [r3, #32]
}
 8009926:	46c0      	nop			; (mov r8, r8)
 8009928:	46bd      	mov	sp, r7
 800992a:	b006      	add	sp, #24
 800992c:	bd80      	pop	{r7, pc}
 800992e:	46c0      	nop			; (mov r8, r8)
 8009930:	fffeff8f 	.word	0xfffeff8f
 8009934:	40012c00 	.word	0x40012c00
 8009938:	40014000 	.word	0x40014000
 800993c:	40014400 	.word	0x40014400
 8009940:	40014800 	.word	0x40014800
 8009944:	fffffeff 	.word	0xfffffeff
 8009948:	fffffdff 	.word	0xfffffdff

0800994c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	2210      	movs	r2, #16
 800995c:	4393      	bics	r3, r2
 800995e:	001a      	movs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a1b      	ldr	r3, [r3, #32]
 8009968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4a2e      	ldr	r2, [pc, #184]	; (8009a34 <TIM_OC2_SetConfig+0xe8>)
 800997a:	4013      	ands	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	4a2d      	ldr	r2, [pc, #180]	; (8009a38 <TIM_OC2_SetConfig+0xec>)
 8009982:	4013      	ands	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4313      	orrs	r3, r2
 8009990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2220      	movs	r2, #32
 8009996:	4393      	bics	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a24      	ldr	r2, [pc, #144]	; (8009a3c <TIM_OC2_SetConfig+0xf0>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d10d      	bne.n	80099ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2280      	movs	r2, #128	; 0x80
 80099b2:	4393      	bics	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	4313      	orrs	r3, r2
 80099c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2240      	movs	r2, #64	; 0x40
 80099c6:	4393      	bics	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a1b      	ldr	r2, [pc, #108]	; (8009a3c <TIM_OC2_SetConfig+0xf0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d00b      	beq.n	80099ea <TIM_OC2_SetConfig+0x9e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a1a      	ldr	r2, [pc, #104]	; (8009a40 <TIM_OC2_SetConfig+0xf4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d007      	beq.n	80099ea <TIM_OC2_SetConfig+0x9e>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <TIM_OC2_SetConfig+0xf8>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d003      	beq.n	80099ea <TIM_OC2_SetConfig+0x9e>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <TIM_OC2_SetConfig+0xfc>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d113      	bne.n	8009a12 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	4a17      	ldr	r2, [pc, #92]	; (8009a4c <TIM_OC2_SetConfig+0x100>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	4a16      	ldr	r2, [pc, #88]	; (8009a50 <TIM_OC2_SetConfig+0x104>)
 80099f6:	4013      	ands	r3, r2
 80099f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	621a      	str	r2, [r3, #32]
}
 8009a2c:	46c0      	nop			; (mov r8, r8)
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	b006      	add	sp, #24
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	feff8fff 	.word	0xfeff8fff
 8009a38:	fffffcff 	.word	0xfffffcff
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40014000 	.word	0x40014000
 8009a44:	40014400 	.word	0x40014400
 8009a48:	40014800 	.word	0x40014800
 8009a4c:	fffffbff 	.word	0xfffffbff
 8009a50:	fffff7ff 	.word	0xfffff7ff

08009a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	4a35      	ldr	r2, [pc, #212]	; (8009b38 <TIM_OC3_SetConfig+0xe4>)
 8009a64:	401a      	ands	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a2f      	ldr	r2, [pc, #188]	; (8009b3c <TIM_OC3_SetConfig+0xe8>)
 8009a80:	4013      	ands	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2203      	movs	r2, #3
 8009a88:	4393      	bics	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	4a29      	ldr	r2, [pc, #164]	; (8009b40 <TIM_OC3_SetConfig+0xec>)
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a25      	ldr	r2, [pc, #148]	; (8009b44 <TIM_OC3_SetConfig+0xf0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d10d      	bne.n	8009ace <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4a24      	ldr	r2, [pc, #144]	; (8009b48 <TIM_OC3_SetConfig+0xf4>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	021b      	lsls	r3, r3, #8
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <TIM_OC3_SetConfig+0xf8>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a1c      	ldr	r2, [pc, #112]	; (8009b44 <TIM_OC3_SetConfig+0xf0>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00b      	beq.n	8009aee <TIM_OC3_SetConfig+0x9a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a1d      	ldr	r2, [pc, #116]	; (8009b50 <TIM_OC3_SetConfig+0xfc>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d007      	beq.n	8009aee <TIM_OC3_SetConfig+0x9a>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a1c      	ldr	r2, [pc, #112]	; (8009b54 <TIM_OC3_SetConfig+0x100>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d003      	beq.n	8009aee <TIM_OC3_SetConfig+0x9a>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a1b      	ldr	r2, [pc, #108]	; (8009b58 <TIM_OC3_SetConfig+0x104>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d113      	bne.n	8009b16 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	4a1a      	ldr	r2, [pc, #104]	; (8009b5c <TIM_OC3_SetConfig+0x108>)
 8009af2:	4013      	ands	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	4a19      	ldr	r2, [pc, #100]	; (8009b60 <TIM_OC3_SetConfig+0x10c>)
 8009afa:	4013      	ands	r3, r2
 8009afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	621a      	str	r2, [r3, #32]
}
 8009b30:	46c0      	nop			; (mov r8, r8)
 8009b32:	46bd      	mov	sp, r7
 8009b34:	b006      	add	sp, #24
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	fffffeff 	.word	0xfffffeff
 8009b3c:	fffeff8f 	.word	0xfffeff8f
 8009b40:	fffffdff 	.word	0xfffffdff
 8009b44:	40012c00 	.word	0x40012c00
 8009b48:	fffff7ff 	.word	0xfffff7ff
 8009b4c:	fffffbff 	.word	0xfffffbff
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800
 8009b5c:	ffffefff 	.word	0xffffefff
 8009b60:	ffffdfff 	.word	0xffffdfff

08009b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	4a28      	ldr	r2, [pc, #160]	; (8009c14 <TIM_OC4_SetConfig+0xb0>)
 8009b74:	401a      	ands	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a22      	ldr	r2, [pc, #136]	; (8009c18 <TIM_OC4_SetConfig+0xb4>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4a21      	ldr	r2, [pc, #132]	; (8009c1c <TIM_OC4_SetConfig+0xb8>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	4a1d      	ldr	r2, [pc, #116]	; (8009c20 <TIM_OC4_SetConfig+0xbc>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	031b      	lsls	r3, r3, #12
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a19      	ldr	r2, [pc, #100]	; (8009c24 <TIM_OC4_SetConfig+0xc0>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d00b      	beq.n	8009bdc <TIM_OC4_SetConfig+0x78>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <TIM_OC4_SetConfig+0xc4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d007      	beq.n	8009bdc <TIM_OC4_SetConfig+0x78>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a17      	ldr	r2, [pc, #92]	; (8009c2c <TIM_OC4_SetConfig+0xc8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d003      	beq.n	8009bdc <TIM_OC4_SetConfig+0x78>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a16      	ldr	r2, [pc, #88]	; (8009c30 <TIM_OC4_SetConfig+0xcc>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d109      	bne.n	8009bf0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <TIM_OC4_SetConfig+0xd0>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	019b      	lsls	r3, r3, #6
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	621a      	str	r2, [r3, #32]
}
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b006      	add	sp, #24
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	ffffefff 	.word	0xffffefff
 8009c18:	feff8fff 	.word	0xfeff8fff
 8009c1c:	fffffcff 	.word	0xfffffcff
 8009c20:	ffffdfff 	.word	0xffffdfff
 8009c24:	40012c00 	.word	0x40012c00
 8009c28:	40014000 	.word	0x40014000
 8009c2c:	40014400 	.word	0x40014400
 8009c30:	40014800 	.word	0x40014800
 8009c34:	ffffbfff 	.word	0xffffbfff

08009c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	4a25      	ldr	r2, [pc, #148]	; (8009cdc <TIM_OC5_SetConfig+0xa4>)
 8009c48:	401a      	ands	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	4a1f      	ldr	r2, [pc, #124]	; (8009ce0 <TIM_OC5_SetConfig+0xa8>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	4a1b      	ldr	r2, [pc, #108]	; (8009ce4 <TIM_OC5_SetConfig+0xac>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <TIM_OC5_SetConfig+0xb0>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00b      	beq.n	8009ca6 <TIM_OC5_SetConfig+0x6e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a16      	ldr	r2, [pc, #88]	; (8009cec <TIM_OC5_SetConfig+0xb4>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d007      	beq.n	8009ca6 <TIM_OC5_SetConfig+0x6e>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <TIM_OC5_SetConfig+0xb8>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d003      	beq.n	8009ca6 <TIM_OC5_SetConfig+0x6e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <TIM_OC5_SetConfig+0xbc>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d109      	bne.n	8009cba <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <TIM_OC5_SetConfig+0xa4>)
 8009caa:	4013      	ands	r3, r2
 8009cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	621a      	str	r2, [r3, #32]
}
 8009cd4:	46c0      	nop			; (mov r8, r8)
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	b006      	add	sp, #24
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	fffeffff 	.word	0xfffeffff
 8009ce0:	fffeff8f 	.word	0xfffeff8f
 8009ce4:	fffdffff 	.word	0xfffdffff
 8009ce8:	40012c00 	.word	0x40012c00
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40014400 	.word	0x40014400
 8009cf4:	40014800 	.word	0x40014800

08009cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	4a26      	ldr	r2, [pc, #152]	; (8009da0 <TIM_OC6_SetConfig+0xa8>)
 8009d08:	401a      	ands	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4a20      	ldr	r2, [pc, #128]	; (8009da4 <TIM_OC6_SetConfig+0xac>)
 8009d24:	4013      	ands	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4a1c      	ldr	r2, [pc, #112]	; (8009da8 <TIM_OC6_SetConfig+0xb0>)
 8009d38:	4013      	ands	r3, r2
 8009d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	051b      	lsls	r3, r3, #20
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a18      	ldr	r2, [pc, #96]	; (8009dac <TIM_OC6_SetConfig+0xb4>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00b      	beq.n	8009d68 <TIM_OC6_SetConfig+0x70>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a17      	ldr	r2, [pc, #92]	; (8009db0 <TIM_OC6_SetConfig+0xb8>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d007      	beq.n	8009d68 <TIM_OC6_SetConfig+0x70>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a16      	ldr	r2, [pc, #88]	; (8009db4 <TIM_OC6_SetConfig+0xbc>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_OC6_SetConfig+0x70>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <TIM_OC6_SetConfig+0xc0>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d109      	bne.n	8009d7c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	4a14      	ldr	r2, [pc, #80]	; (8009dbc <TIM_OC6_SetConfig+0xc4>)
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	029b      	lsls	r3, r3, #10
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	621a      	str	r2, [r3, #32]
}
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	b006      	add	sp, #24
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	ffefffff 	.word	0xffefffff
 8009da4:	feff8fff 	.word	0xfeff8fff
 8009da8:	ffdfffff 	.word	0xffdfffff
 8009dac:	40012c00 	.word	0x40012c00
 8009db0:	40014000 	.word	0x40014000
 8009db4:	40014400 	.word	0x40014400
 8009db8:	40014800 	.word	0x40014800
 8009dbc:	fffbffff 	.word	0xfffbffff

08009dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	4393      	bics	r3, r2
 8009dda:	001a      	movs	r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	22f0      	movs	r2, #240	; 0xf0
 8009dea:	4393      	bics	r3, r2
 8009dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	011b      	lsls	r3, r3, #4
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	4393      	bics	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	621a      	str	r2, [r3, #32]
}
 8009e14:	46c0      	nop			; (mov r8, r8)
 8009e16:	46bd      	mov	sp, r7
 8009e18:	b006      	add	sp, #24
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	2210      	movs	r2, #16
 8009e2e:	4393      	bics	r3, r2
 8009e30:	001a      	movs	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	4a0d      	ldr	r2, [pc, #52]	; (8009e7c <TIM_TI2_ConfigInputStage+0x60>)
 8009e46:	4013      	ands	r3, r2
 8009e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	031b      	lsls	r3, r3, #12
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	22a0      	movs	r2, #160	; 0xa0
 8009e58:	4393      	bics	r3, r2
 8009e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	011b      	lsls	r3, r3, #4
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	621a      	str	r2, [r3, #32]
}
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b006      	add	sp, #24
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	ffff0fff 	.word	0xffff0fff

08009e80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a08      	ldr	r2, [pc, #32]	; (8009eb4 <TIM_ITRx_SetConfig+0x34>)
 8009e94:	4013      	ands	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	2207      	movs	r2, #7
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	609a      	str	r2, [r3, #8]
}
 8009eaa:	46c0      	nop			; (mov r8, r8)
 8009eac:	46bd      	mov	sp, r7
 8009eae:	b004      	add	sp, #16
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	ffcfff8f 	.word	0xffcfff8f

08009eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	4a09      	ldr	r2, [pc, #36]	; (8009ef4 <TIM_ETR_SetConfig+0x3c>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	021a      	lsls	r2, r3, #8
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	609a      	str	r2, [r3, #8]
}
 8009eec:	46c0      	nop			; (mov r8, r8)
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	b006      	add	sp, #24
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	ffff00ff 	.word	0xffff00ff

08009ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	221f      	movs	r2, #31
 8009f08:	4013      	ands	r3, r2
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	409a      	lsls	r2, r3
 8009f0e:	0013      	movs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	43d2      	mvns	r2, r2
 8009f1a:	401a      	ands	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a1a      	ldr	r2, [r3, #32]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	211f      	movs	r1, #31
 8009f28:	400b      	ands	r3, r1
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	4099      	lsls	r1, r3
 8009f2e:	000b      	movs	r3, r1
 8009f30:	431a      	orrs	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	621a      	str	r2, [r3, #32]
}
 8009f36:	46c0      	nop			; (mov r8, r8)
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	b006      	add	sp, #24
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	223c      	movs	r2, #60	; 0x3c
 8009f4e:	5c9b      	ldrb	r3, [r3, r2]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e04f      	b.n	8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	223c      	movs	r2, #60	; 0x3c
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	223d      	movs	r2, #61	; 0x3d
 8009f64:	2102      	movs	r1, #2
 8009f66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a20      	ldr	r2, [pc, #128]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d108      	bne.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f86:	4013      	ands	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2270      	movs	r2, #112	; 0x70
 8009f98:	4393      	bics	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a13      	ldr	r2, [pc, #76]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d009      	beq.n	8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a12      	ldr	r2, [pc, #72]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d004      	beq.n	8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a11      	ldr	r2, [pc, #68]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d10c      	bne.n	8009fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2280      	movs	r2, #128	; 0x80
 8009fd0:	4393      	bics	r3, r2
 8009fd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	223d      	movs	r2, #61	; 0x3d
 8009fea:	2101      	movs	r1, #1
 8009fec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	223c      	movs	r2, #60	; 0x3c
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	b004      	add	sp, #16
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	40012c00 	.word	0x40012c00
 800a004:	ff0fffff 	.word	0xff0fffff
 800a008:	40000400 	.word	0x40000400
 800a00c:	40014000 	.word	0x40014000

0800a010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	223c      	movs	r2, #60	; 0x3c
 800a022:	5c9b      	ldrb	r3, [r3, r2]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d101      	bne.n	800a02c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a028:	2302      	movs	r3, #2
 800a02a:	e079      	b.n	800a120 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	223c      	movs	r2, #60	; 0x3c
 800a030:	2101      	movs	r1, #1
 800a032:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	22ff      	movs	r2, #255	; 0xff
 800a038:	4393      	bics	r3, r2
 800a03a:	001a      	movs	r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	4313      	orrs	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4a38      	ldr	r2, [pc, #224]	; (800a128 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a048:	401a      	ands	r2, r3
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4a35      	ldr	r2, [pc, #212]	; (800a12c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a056:	401a      	ands	r2, r3
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4a33      	ldr	r2, [pc, #204]	; (800a130 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a064:	401a      	ands	r2, r3
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4a30      	ldr	r2, [pc, #192]	; (800a134 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a072:	401a      	ands	r2, r3
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4313      	orrs	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4a2e      	ldr	r2, [pc, #184]	; (800a138 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a080:	401a      	ands	r2, r3
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4a2b      	ldr	r2, [pc, #172]	; (800a13c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a08e:	401a      	ands	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4a29      	ldr	r2, [pc, #164]	; (800a140 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a09c:	401a      	ands	r2, r3
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	041b      	lsls	r3, r3, #16
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a25      	ldr	r2, [pc, #148]	; (800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d106      	bne.n	800a0c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4a24      	ldr	r2, [pc, #144]	; (800a148 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0b6:	401a      	ands	r2, r3
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d121      	bne.n	800a10e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4a1f      	ldr	r2, [pc, #124]	; (800a14c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a0ce:	401a      	ands	r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d4:	051b      	lsls	r3, r3, #20
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4a1c      	ldr	r2, [pc, #112]	; (800a150 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800a0de:	401a      	ands	r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4a1a      	ldr	r2, [pc, #104]	; (800a154 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800a0ec:	401a      	ands	r2, r3
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a12      	ldr	r2, [pc, #72]	; (800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d106      	bne.n	800a10e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4a15      	ldr	r2, [pc, #84]	; (800a158 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800a104:	401a      	ands	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	223c      	movs	r2, #60	; 0x3c
 800a11a:	2100      	movs	r1, #0
 800a11c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	0018      	movs	r0, r3
 800a122:	46bd      	mov	sp, r7
 800a124:	b004      	add	sp, #16
 800a126:	bd80      	pop	{r7, pc}
 800a128:	fffffcff 	.word	0xfffffcff
 800a12c:	fffffbff 	.word	0xfffffbff
 800a130:	fffff7ff 	.word	0xfffff7ff
 800a134:	ffffefff 	.word	0xffffefff
 800a138:	ffffdfff 	.word	0xffffdfff
 800a13c:	ffffbfff 	.word	0xffffbfff
 800a140:	fff0ffff 	.word	0xfff0ffff
 800a144:	40012c00 	.word	0x40012c00
 800a148:	efffffff 	.word	0xefffffff
 800a14c:	ff0fffff 	.word	0xff0fffff
 800a150:	feffffff 	.word	0xfeffffff
 800a154:	fdffffff 	.word	0xfdffffff
 800a158:	dfffffff 	.word	0xdfffffff

0800a15c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a164:	46c0      	nop			; (mov r8, r8)
 800a166:	46bd      	mov	sp, r7
 800a168:	b002      	add	sp, #8
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a174:	46c0      	nop			; (mov r8, r8)
 800a176:	46bd      	mov	sp, r7
 800a178:	b002      	add	sp, #8
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a184:	46c0      	nop			; (mov r8, r8)
 800a186:	46bd      	mov	sp, r7
 800a188:	b002      	add	sp, #8
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e046      	b.n	800a22c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2288      	movs	r2, #136	; 0x88
 800a1a2:	589b      	ldr	r3, [r3, r2]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d107      	bne.n	800a1b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2284      	movs	r2, #132	; 0x84
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7fa fd18 	bl	8004be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2288      	movs	r2, #136	; 0x88
 800a1bc:	2124      	movs	r1, #36	; 0x24
 800a1be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	438a      	bics	r2, r1
 800a1ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f000 fd16 	bl	800ac04 <UART_SetConfig>
 800a1d8:	0003      	movs	r3, r0
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e024      	b.n	800a22c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	0018      	movs	r0, r3
 800a1ee:	f000 fead 	bl	800af4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	490d      	ldr	r1, [pc, #52]	; (800a234 <HAL_UART_Init+0xa8>)
 800a1fe:	400a      	ands	r2, r1
 800a200:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	212a      	movs	r1, #42	; 0x2a
 800a20e:	438a      	bics	r2, r1
 800a210:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2101      	movs	r1, #1
 800a21e:	430a      	orrs	r2, r1
 800a220:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	0018      	movs	r0, r3
 800a226:	f000 ff45 	bl	800b0b4 <UART_CheckIdleState>
 800a22a:	0003      	movs	r3, r0
}
 800a22c:	0018      	movs	r0, r3
 800a22e:	46bd      	mov	sp, r7
 800a230:	b002      	add	sp, #8
 800a232:	bd80      	pop	{r7, pc}
 800a234:	ffffb7ff 	.word	0xffffb7ff

0800a238 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08c      	sub	sp, #48	; 0x30
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	1dbb      	adds	r3, r7, #6
 800a244:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2288      	movs	r2, #136	; 0x88
 800a24a:	589b      	ldr	r3, [r3, r2]
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d000      	beq.n	800a252 <HAL_UART_Transmit_IT+0x1a>
 800a250:	e08d      	b.n	800a36e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d003      	beq.n	800a260 <HAL_UART_Transmit_IT+0x28>
 800a258:	1dbb      	adds	r3, r7, #6
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e085      	b.n	800a370 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	2380      	movs	r3, #128	; 0x80
 800a26a:	015b      	lsls	r3, r3, #5
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d109      	bne.n	800a284 <HAL_UART_Transmit_IT+0x4c>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d105      	bne.n	800a284 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2201      	movs	r2, #1
 800a27c:	4013      	ands	r3, r2
 800a27e:	d001      	beq.n	800a284 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e075      	b.n	800a370 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	1dba      	adds	r2, r7, #6
 800a28e:	2154      	movs	r1, #84	; 0x54
 800a290:	8812      	ldrh	r2, [r2, #0]
 800a292:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	1dba      	adds	r2, r7, #6
 800a298:	2156      	movs	r1, #86	; 0x56
 800a29a:	8812      	ldrh	r2, [r2, #0]
 800a29c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2290      	movs	r2, #144	; 0x90
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2288      	movs	r2, #136	; 0x88
 800a2b0:	2121      	movs	r1, #33	; 0x21
 800a2b2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a2b8:	2380      	movs	r3, #128	; 0x80
 800a2ba:	059b      	lsls	r3, r3, #22
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d12a      	bne.n	800a316 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	015b      	lsls	r3, r3, #5
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d107      	bne.n	800a2dc <HAL_UART_Transmit_IT+0xa4>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d103      	bne.n	800a2dc <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a28      	ldr	r2, [pc, #160]	; (800a378 <HAL_UART_Transmit_IT+0x140>)
 800a2d8:	679a      	str	r2, [r3, #120]	; 0x78
 800a2da:	e002      	b.n	800a2e2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4a27      	ldr	r2, [pc, #156]	; (800a37c <HAL_UART_Transmit_IT+0x144>)
 800a2e0:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2e6:	61fb      	str	r3, [r7, #28]
  return(result);
 800a2e8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	f383 8810 	msr	PRIMASK, r3
}
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2180      	movs	r1, #128	; 0x80
 800a304:	0409      	lsls	r1, r1, #16
 800a306:	430a      	orrs	r2, r1
 800a308:	609a      	str	r2, [r3, #8]
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	f383 8810 	msr	PRIMASK, r3
}
 800a314:	e029      	b.n	800a36a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	2380      	movs	r3, #128	; 0x80
 800a31c:	015b      	lsls	r3, r3, #5
 800a31e:	429a      	cmp	r2, r3
 800a320:	d107      	bne.n	800a332 <HAL_UART_Transmit_IT+0xfa>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d103      	bne.n	800a332 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4a14      	ldr	r2, [pc, #80]	; (800a380 <HAL_UART_Transmit_IT+0x148>)
 800a32e:	679a      	str	r2, [r3, #120]	; 0x78
 800a330:	e002      	b.n	800a338 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4a13      	ldr	r2, [pc, #76]	; (800a384 <HAL_UART_Transmit_IT+0x14c>)
 800a336:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a338:	f3ef 8310 	mrs	r3, PRIMASK
 800a33c:	613b      	str	r3, [r7, #16]
  return(result);
 800a33e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a340:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a342:	2301      	movs	r3, #1
 800a344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f383 8810 	msr	PRIMASK, r3
}
 800a34c:	46c0      	nop			; (mov r8, r8)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2180      	movs	r1, #128	; 0x80
 800a35a:	430a      	orrs	r2, r1
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	f383 8810 	msr	PRIMASK, r3
}
 800a368:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e000      	b.n	800a370 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800a36e:	2302      	movs	r3, #2
  }
}
 800a370:	0018      	movs	r0, r3
 800a372:	46bd      	mov	sp, r7
 800a374:	b00c      	add	sp, #48	; 0x30
 800a376:	bd80      	pop	{r7, pc}
 800a378:	0800b9fd 	.word	0x0800b9fd
 800a37c:	0800b911 	.word	0x0800b911
 800a380:	0800b853 	.word	0x0800b853
 800a384:	0800b79f 	.word	0x0800b79f

0800a388 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	1dbb      	adds	r3, r7, #6
 800a394:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	228c      	movs	r2, #140	; 0x8c
 800a39a:	589b      	ldr	r3, [r3, r2]
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d145      	bne.n	800a42c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <HAL_UART_Receive_DMA+0x26>
 800a3a6:	1dbb      	adds	r3, r7, #6
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e03d      	b.n	800a42e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	2380      	movs	r3, #128	; 0x80
 800a3b8:	015b      	lsls	r3, r3, #5
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d109      	bne.n	800a3d2 <HAL_UART_Receive_DMA+0x4a>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d105      	bne.n	800a3d2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	d001      	beq.n	800a3d2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e02d      	b.n	800a42e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	2380      	movs	r3, #128	; 0x80
 800a3e0:	041b      	lsls	r3, r3, #16
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	d019      	beq.n	800a41a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ea:	613b      	str	r3, [r7, #16]
  return(result);
 800a3ec:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f383 8810 	msr	PRIMASK, r3
}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2180      	movs	r1, #128	; 0x80
 800a408:	04c9      	lsls	r1, r1, #19
 800a40a:	430a      	orrs	r2, r1
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	f383 8810 	msr	PRIMASK, r3
}
 800a418:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a41a:	1dbb      	adds	r3, r7, #6
 800a41c:	881a      	ldrh	r2, [r3, #0]
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	0018      	movs	r0, r3
 800a424:	f000 ff5c 	bl	800b2e0 <UART_Start_Receive_DMA>
 800a428:	0003      	movs	r3, r0
 800a42a:	e000      	b.n	800a42e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a42c:	2302      	movs	r3, #2
  }
}
 800a42e:	0018      	movs	r0, r3
 800a430:	46bd      	mov	sp, r7
 800a432:	b008      	add	sp, #32
 800a434:	bd80      	pop	{r7, pc}

0800a436 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b08c      	sub	sp, #48	; 0x30
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2288      	movs	r2, #136	; 0x88
 800a442:	589b      	ldr	r3, [r3, r2]
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	228c      	movs	r2, #140	; 0x8c
 800a44a:	589b      	ldr	r3, [r3, r2]
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	2280      	movs	r2, #128	; 0x80
 800a456:	4013      	ands	r3, r2
 800a458:	2b80      	cmp	r3, #128	; 0x80
 800a45a:	d138      	bne.n	800a4ce <HAL_UART_DMAStop+0x98>
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	2b21      	cmp	r3, #33	; 0x21
 800a460:	d135      	bne.n	800a4ce <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a462:	f3ef 8310 	mrs	r3, PRIMASK
 800a466:	617b      	str	r3, [r7, #20]
  return(result);
 800a468:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a46a:	627b      	str	r3, [r7, #36]	; 0x24
 800a46c:	2301      	movs	r3, #1
 800a46e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	f383 8810 	msr	PRIMASK, r3
}
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689a      	ldr	r2, [r3, #8]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2180      	movs	r1, #128	; 0x80
 800a484:	438a      	bics	r2, r1
 800a486:	609a      	str	r2, [r3, #8]
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	f383 8810 	msr	PRIMASK, r3
}
 800a492:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d014      	beq.n	800a4c6 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	f7fc f9ad 	bl	8006800 <HAL_DMA_Abort>
 800a4a6:	1e03      	subs	r3, r0, #0
 800a4a8:	d00d      	beq.n	800a4c6 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	f7fc fb24 	bl	8006afc <HAL_DMA_GetError>
 800a4b4:	0003      	movs	r3, r0
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	d105      	bne.n	800a4c6 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2290      	movs	r2, #144	; 0x90
 800a4be:	2110      	movs	r1, #16
 800a4c0:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e047      	b.n	800a556 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	f000 ffaf 	bl	800b42c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2240      	movs	r2, #64	; 0x40
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	d13b      	bne.n	800a554 <HAL_UART_DMAStop+0x11e>
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	2b22      	cmp	r3, #34	; 0x22
 800a4e0:	d138      	bne.n	800a554 <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a4e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4e8:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ea:	623b      	str	r3, [r7, #32]
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f383 8810 	msr	PRIMASK, r3
}
 800a4f6:	46c0      	nop			; (mov r8, r8)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2140      	movs	r1, #64	; 0x40
 800a504:	438a      	bics	r2, r1
 800a506:	609a      	str	r2, [r3, #8]
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f383 8810 	msr	PRIMASK, r3
}
 800a512:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2280      	movs	r2, #128	; 0x80
 800a518:	589b      	ldr	r3, [r3, r2]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d016      	beq.n	800a54c <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2280      	movs	r2, #128	; 0x80
 800a522:	589b      	ldr	r3, [r3, r2]
 800a524:	0018      	movs	r0, r3
 800a526:	f7fc f96b 	bl	8006800 <HAL_DMA_Abort>
 800a52a:	1e03      	subs	r3, r0, #0
 800a52c:	d00e      	beq.n	800a54c <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2280      	movs	r2, #128	; 0x80
 800a532:	589b      	ldr	r3, [r3, r2]
 800a534:	0018      	movs	r0, r3
 800a536:	f7fc fae1 	bl	8006afc <HAL_DMA_GetError>
 800a53a:	0003      	movs	r3, r0
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	d105      	bne.n	800a54c <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2290      	movs	r2, #144	; 0x90
 800a544:	2110      	movs	r1, #16
 800a546:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e004      	b.n	800a556 <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	0018      	movs	r0, r3
 800a550:	f000 ffac 	bl	800b4ac <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	0018      	movs	r0, r3
 800a558:	46bd      	mov	sp, r7
 800a55a:	b00c      	add	sp, #48	; 0x30
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a560:	b5b0      	push	{r4, r5, r7, lr}
 800a562:	b0aa      	sub	sp, #168	; 0xa8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	22a4      	movs	r2, #164	; 0xa4
 800a570:	18b9      	adds	r1, r7, r2
 800a572:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	20a0      	movs	r0, #160	; 0xa0
 800a57c:	1839      	adds	r1, r7, r0
 800a57e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	249c      	movs	r4, #156	; 0x9c
 800a588:	1939      	adds	r1, r7, r4
 800a58a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a58c:	0011      	movs	r1, r2
 800a58e:	18bb      	adds	r3, r7, r2
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4aa2      	ldr	r2, [pc, #648]	; (800a81c <HAL_UART_IRQHandler+0x2bc>)
 800a594:	4013      	ands	r3, r2
 800a596:	2298      	movs	r2, #152	; 0x98
 800a598:	18bd      	adds	r5, r7, r2
 800a59a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a59c:	18bb      	adds	r3, r7, r2
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d11a      	bne.n	800a5da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5a4:	187b      	adds	r3, r7, r1
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2220      	movs	r2, #32
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	d015      	beq.n	800a5da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5ae:	183b      	adds	r3, r7, r0
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	d105      	bne.n	800a5c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5b8:	193b      	adds	r3, r7, r4
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	2380      	movs	r3, #128	; 0x80
 800a5be:	055b      	lsls	r3, r3, #21
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	d00a      	beq.n	800a5da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d100      	bne.n	800a5ce <HAL_UART_IRQHandler+0x6e>
 800a5cc:	e2dc      	b.n	800ab88 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	0010      	movs	r0, r2
 800a5d6:	4798      	blx	r3
      }
      return;
 800a5d8:	e2d6      	b.n	800ab88 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5da:	2398      	movs	r3, #152	; 0x98
 800a5dc:	18fb      	adds	r3, r7, r3
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d100      	bne.n	800a5e6 <HAL_UART_IRQHandler+0x86>
 800a5e4:	e122      	b.n	800a82c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5e6:	239c      	movs	r3, #156	; 0x9c
 800a5e8:	18fb      	adds	r3, r7, r3
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a8c      	ldr	r2, [pc, #560]	; (800a820 <HAL_UART_IRQHandler+0x2c0>)
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	d106      	bne.n	800a600 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5f2:	23a0      	movs	r3, #160	; 0xa0
 800a5f4:	18fb      	adds	r3, r7, r3
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a8a      	ldr	r2, [pc, #552]	; (800a824 <HAL_UART_IRQHandler+0x2c4>)
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	d100      	bne.n	800a600 <HAL_UART_IRQHandler+0xa0>
 800a5fe:	e115      	b.n	800a82c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a600:	23a4      	movs	r3, #164	; 0xa4
 800a602:	18fb      	adds	r3, r7, r3
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2201      	movs	r2, #1
 800a608:	4013      	ands	r3, r2
 800a60a:	d012      	beq.n	800a632 <HAL_UART_IRQHandler+0xd2>
 800a60c:	23a0      	movs	r3, #160	; 0xa0
 800a60e:	18fb      	adds	r3, r7, r3
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	2380      	movs	r3, #128	; 0x80
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4013      	ands	r3, r2
 800a618:	d00b      	beq.n	800a632 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2201      	movs	r2, #1
 800a620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2290      	movs	r2, #144	; 0x90
 800a626:	589b      	ldr	r3, [r3, r2]
 800a628:	2201      	movs	r2, #1
 800a62a:	431a      	orrs	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2190      	movs	r1, #144	; 0x90
 800a630:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a632:	23a4      	movs	r3, #164	; 0xa4
 800a634:	18fb      	adds	r3, r7, r3
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2202      	movs	r2, #2
 800a63a:	4013      	ands	r3, r2
 800a63c:	d011      	beq.n	800a662 <HAL_UART_IRQHandler+0x102>
 800a63e:	239c      	movs	r3, #156	; 0x9c
 800a640:	18fb      	adds	r3, r7, r3
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2201      	movs	r2, #1
 800a646:	4013      	ands	r3, r2
 800a648:	d00b      	beq.n	800a662 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2202      	movs	r2, #2
 800a650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2290      	movs	r2, #144	; 0x90
 800a656:	589b      	ldr	r3, [r3, r2]
 800a658:	2204      	movs	r2, #4
 800a65a:	431a      	orrs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2190      	movs	r1, #144	; 0x90
 800a660:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a662:	23a4      	movs	r3, #164	; 0xa4
 800a664:	18fb      	adds	r3, r7, r3
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2204      	movs	r2, #4
 800a66a:	4013      	ands	r3, r2
 800a66c:	d011      	beq.n	800a692 <HAL_UART_IRQHandler+0x132>
 800a66e:	239c      	movs	r3, #156	; 0x9c
 800a670:	18fb      	adds	r3, r7, r3
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2201      	movs	r2, #1
 800a676:	4013      	ands	r3, r2
 800a678:	d00b      	beq.n	800a692 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2204      	movs	r2, #4
 800a680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2290      	movs	r2, #144	; 0x90
 800a686:	589b      	ldr	r3, [r3, r2]
 800a688:	2202      	movs	r2, #2
 800a68a:	431a      	orrs	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2190      	movs	r1, #144	; 0x90
 800a690:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a692:	23a4      	movs	r3, #164	; 0xa4
 800a694:	18fb      	adds	r3, r7, r3
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2208      	movs	r2, #8
 800a69a:	4013      	ands	r3, r2
 800a69c:	d017      	beq.n	800a6ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a69e:	23a0      	movs	r3, #160	; 0xa0
 800a6a0:	18fb      	adds	r3, r7, r3
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	d105      	bne.n	800a6b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a6aa:	239c      	movs	r3, #156	; 0x9c
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a5b      	ldr	r2, [pc, #364]	; (800a820 <HAL_UART_IRQHandler+0x2c0>)
 800a6b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6b4:	d00b      	beq.n	800a6ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2290      	movs	r2, #144	; 0x90
 800a6c2:	589b      	ldr	r3, [r3, r2]
 800a6c4:	2208      	movs	r2, #8
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2190      	movs	r1, #144	; 0x90
 800a6cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6ce:	23a4      	movs	r3, #164	; 0xa4
 800a6d0:	18fb      	adds	r3, r7, r3
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	011b      	lsls	r3, r3, #4
 800a6d8:	4013      	ands	r3, r2
 800a6da:	d013      	beq.n	800a704 <HAL_UART_IRQHandler+0x1a4>
 800a6dc:	23a0      	movs	r3, #160	; 0xa0
 800a6de:	18fb      	adds	r3, r7, r3
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	2380      	movs	r3, #128	; 0x80
 800a6e4:	04db      	lsls	r3, r3, #19
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	d00c      	beq.n	800a704 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2280      	movs	r2, #128	; 0x80
 800a6f0:	0112      	lsls	r2, r2, #4
 800a6f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2290      	movs	r2, #144	; 0x90
 800a6f8:	589b      	ldr	r3, [r3, r2]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2190      	movs	r1, #144	; 0x90
 800a702:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2290      	movs	r2, #144	; 0x90
 800a708:	589b      	ldr	r3, [r3, r2]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d100      	bne.n	800a710 <HAL_UART_IRQHandler+0x1b0>
 800a70e:	e23d      	b.n	800ab8c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a710:	23a4      	movs	r3, #164	; 0xa4
 800a712:	18fb      	adds	r3, r7, r3
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2220      	movs	r2, #32
 800a718:	4013      	ands	r3, r2
 800a71a:	d015      	beq.n	800a748 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a71c:	23a0      	movs	r3, #160	; 0xa0
 800a71e:	18fb      	adds	r3, r7, r3
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2220      	movs	r2, #32
 800a724:	4013      	ands	r3, r2
 800a726:	d106      	bne.n	800a736 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a728:	239c      	movs	r3, #156	; 0x9c
 800a72a:	18fb      	adds	r3, r7, r3
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	2380      	movs	r3, #128	; 0x80
 800a730:	055b      	lsls	r3, r3, #21
 800a732:	4013      	ands	r3, r2
 800a734:	d008      	beq.n	800a748 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	0010      	movs	r0, r2
 800a746:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2290      	movs	r2, #144	; 0x90
 800a74c:	589b      	ldr	r3, [r3, r2]
 800a74e:	2194      	movs	r1, #148	; 0x94
 800a750:	187a      	adds	r2, r7, r1
 800a752:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	2240      	movs	r2, #64	; 0x40
 800a75c:	4013      	ands	r3, r2
 800a75e:	2b40      	cmp	r3, #64	; 0x40
 800a760:	d004      	beq.n	800a76c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a762:	187b      	adds	r3, r7, r1
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2228      	movs	r2, #40	; 0x28
 800a768:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a76a:	d04c      	beq.n	800a806 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	0018      	movs	r0, r3
 800a770:	f000 fe9c 	bl	800b4ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	2240      	movs	r2, #64	; 0x40
 800a77c:	4013      	ands	r3, r2
 800a77e:	2b40      	cmp	r3, #64	; 0x40
 800a780:	d13c      	bne.n	800a7fc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a782:	f3ef 8310 	mrs	r3, PRIMASK
 800a786:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a78a:	2090      	movs	r0, #144	; 0x90
 800a78c:	183a      	adds	r2, r7, r0
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	2301      	movs	r3, #1
 800a792:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a796:	f383 8810 	msr	PRIMASK, r3
}
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2140      	movs	r1, #64	; 0x40
 800a7a8:	438a      	bics	r2, r1
 800a7aa:	609a      	str	r2, [r3, #8]
 800a7ac:	183b      	adds	r3, r7, r0
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7b4:	f383 8810 	msr	PRIMASK, r3
}
 800a7b8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2280      	movs	r2, #128	; 0x80
 800a7be:	589b      	ldr	r3, [r3, r2]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d016      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2280      	movs	r2, #128	; 0x80
 800a7c8:	589b      	ldr	r3, [r3, r2]
 800a7ca:	4a17      	ldr	r2, [pc, #92]	; (800a828 <HAL_UART_IRQHandler+0x2c8>)
 800a7cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2280      	movs	r2, #128	; 0x80
 800a7d2:	589b      	ldr	r3, [r3, r2]
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	f7fc f875 	bl	80068c4 <HAL_DMA_Abort_IT>
 800a7da:	1e03      	subs	r3, r0, #0
 800a7dc:	d01c      	beq.n	800a818 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2280      	movs	r2, #128	; 0x80
 800a7e2:	589b      	ldr	r3, [r3, r2]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	2180      	movs	r1, #128	; 0x80
 800a7ea:	5852      	ldr	r2, [r2, r1]
 800a7ec:	0010      	movs	r0, r2
 800a7ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f0:	e012      	b.n	800a818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	0018      	movs	r0, r3
 800a7f6:	f000 f9f1 	bl	800abdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7fa:	e00d      	b.n	800a818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	0018      	movs	r0, r3
 800a800:	f000 f9ec 	bl	800abdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a804:	e008      	b.n	800a818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	0018      	movs	r0, r3
 800a80a:	f000 f9e7 	bl	800abdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2290      	movs	r2, #144	; 0x90
 800a812:	2100      	movs	r1, #0
 800a814:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a816:	e1b9      	b.n	800ab8c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a818:	46c0      	nop			; (mov r8, r8)
    return;
 800a81a:	e1b7      	b.n	800ab8c <HAL_UART_IRQHandler+0x62c>
 800a81c:	0000080f 	.word	0x0000080f
 800a820:	10000001 	.word	0x10000001
 800a824:	04000120 	.word	0x04000120
 800a828:	0800b771 	.word	0x0800b771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a830:	2b01      	cmp	r3, #1
 800a832:	d000      	beq.n	800a836 <HAL_UART_IRQHandler+0x2d6>
 800a834:	e13e      	b.n	800aab4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a836:	23a4      	movs	r3, #164	; 0xa4
 800a838:	18fb      	adds	r3, r7, r3
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2210      	movs	r2, #16
 800a83e:	4013      	ands	r3, r2
 800a840:	d100      	bne.n	800a844 <HAL_UART_IRQHandler+0x2e4>
 800a842:	e137      	b.n	800aab4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a844:	23a0      	movs	r3, #160	; 0xa0
 800a846:	18fb      	adds	r3, r7, r3
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2210      	movs	r2, #16
 800a84c:	4013      	ands	r3, r2
 800a84e:	d100      	bne.n	800a852 <HAL_UART_IRQHandler+0x2f2>
 800a850:	e130      	b.n	800aab4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2210      	movs	r2, #16
 800a858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	2240      	movs	r2, #64	; 0x40
 800a862:	4013      	ands	r3, r2
 800a864:	2b40      	cmp	r3, #64	; 0x40
 800a866:	d000      	beq.n	800a86a <HAL_UART_IRQHandler+0x30a>
 800a868:	e0a4      	b.n	800a9b4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2280      	movs	r2, #128	; 0x80
 800a86e:	589b      	ldr	r3, [r3, r2]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	217e      	movs	r1, #126	; 0x7e
 800a876:	187b      	adds	r3, r7, r1
 800a878:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a87a:	187b      	adds	r3, r7, r1
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d100      	bne.n	800a884 <HAL_UART_IRQHandler+0x324>
 800a882:	e185      	b.n	800ab90 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	225c      	movs	r2, #92	; 0x5c
 800a888:	5a9b      	ldrh	r3, [r3, r2]
 800a88a:	187a      	adds	r2, r7, r1
 800a88c:	8812      	ldrh	r2, [r2, #0]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d300      	bcc.n	800a894 <HAL_UART_IRQHandler+0x334>
 800a892:	e17d      	b.n	800ab90 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	187a      	adds	r2, r7, r1
 800a898:	215e      	movs	r1, #94	; 0x5e
 800a89a:	8812      	ldrh	r2, [r2, #0]
 800a89c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2280      	movs	r2, #128	; 0x80
 800a8a2:	589b      	ldr	r3, [r3, r2]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	d170      	bne.n	800a990 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a8b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8b6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8be:	f383 8810 	msr	PRIMASK, r3
}
 800a8c2:	46c0      	nop			; (mov r8, r8)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	49b4      	ldr	r1, [pc, #720]	; (800aba0 <HAL_UART_IRQHandler+0x640>)
 800a8d0:	400a      	ands	r2, r1
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	f383 8810 	msr	PRIMASK, r3
}
 800a8de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8e8:	677b      	str	r3, [r7, #116]	; 0x74
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8f0:	f383 8810 	msr	PRIMASK, r3
}
 800a8f4:	46c0      	nop			; (mov r8, r8)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689a      	ldr	r2, [r3, #8]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2101      	movs	r1, #1
 800a902:	438a      	bics	r2, r1
 800a904:	609a      	str	r2, [r3, #8]
 800a906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a908:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a90c:	f383 8810 	msr	PRIMASK, r3
}
 800a910:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a912:	f3ef 8310 	mrs	r3, PRIMASK
 800a916:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a918:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91a:	673b      	str	r3, [r7, #112]	; 0x70
 800a91c:	2301      	movs	r3, #1
 800a91e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a922:	f383 8810 	msr	PRIMASK, r3
}
 800a926:	46c0      	nop			; (mov r8, r8)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689a      	ldr	r2, [r3, #8]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2140      	movs	r1, #64	; 0x40
 800a934:	438a      	bics	r2, r1
 800a936:	609a      	str	r2, [r3, #8]
 800a938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a93a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93e:	f383 8810 	msr	PRIMASK, r3
}
 800a942:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	228c      	movs	r2, #140	; 0x8c
 800a948:	2120      	movs	r1, #32
 800a94a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a952:	f3ef 8310 	mrs	r3, PRIMASK
 800a956:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a958:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a95a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a95c:	2301      	movs	r3, #1
 800a95e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a962:	f383 8810 	msr	PRIMASK, r3
}
 800a966:	46c0      	nop			; (mov r8, r8)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2110      	movs	r1, #16
 800a974:	438a      	bics	r2, r1
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a97e:	f383 8810 	msr	PRIMASK, r3
}
 800a982:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2280      	movs	r2, #128	; 0x80
 800a988:	589b      	ldr	r3, [r3, r2]
 800a98a:	0018      	movs	r0, r3
 800a98c:	f7fb ff38 	bl	8006800 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	225c      	movs	r2, #92	; 0x5c
 800a99a:	5a9a      	ldrh	r2, [r3, r2]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	215e      	movs	r1, #94	; 0x5e
 800a9a0:	5a5b      	ldrh	r3, [r3, r1]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	0011      	movs	r1, r2
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f000 f91d 	bl	800abec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9b2:	e0ed      	b.n	800ab90 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	225c      	movs	r2, #92	; 0x5c
 800a9b8:	5a99      	ldrh	r1, [r3, r2]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	225e      	movs	r2, #94	; 0x5e
 800a9be:	5a9b      	ldrh	r3, [r3, r2]
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	208e      	movs	r0, #142	; 0x8e
 800a9c4:	183b      	adds	r3, r7, r0
 800a9c6:	1a8a      	subs	r2, r1, r2
 800a9c8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	225e      	movs	r2, #94	; 0x5e
 800a9ce:	5a9b      	ldrh	r3, [r3, r2]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d100      	bne.n	800a9d8 <HAL_UART_IRQHandler+0x478>
 800a9d6:	e0dd      	b.n	800ab94 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800a9d8:	183b      	adds	r3, r7, r0
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d100      	bne.n	800a9e2 <HAL_UART_IRQHandler+0x482>
 800a9e0:	e0d8      	b.n	800ab94 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a9e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9ea:	2488      	movs	r4, #136	; 0x88
 800a9ec:	193a      	adds	r2, r7, r4
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	f383 8810 	msr	PRIMASK, r3
}
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4967      	ldr	r1, [pc, #412]	; (800aba4 <HAL_UART_IRQHandler+0x644>)
 800aa08:	400a      	ands	r2, r1
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	193b      	adds	r3, r7, r4
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f383 8810 	msr	PRIMASK, r3
}
 800aa18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa1a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa1e:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa20:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa22:	2484      	movs	r4, #132	; 0x84
 800aa24:	193a      	adds	r2, r7, r4
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	2301      	movs	r3, #1
 800aa2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	f383 8810 	msr	PRIMASK, r3
}
 800aa32:	46c0      	nop			; (mov r8, r8)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689a      	ldr	r2, [r3, #8]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	495a      	ldr	r1, [pc, #360]	; (800aba8 <HAL_UART_IRQHandler+0x648>)
 800aa40:	400a      	ands	r2, r1
 800aa42:	609a      	str	r2, [r3, #8]
 800aa44:	193b      	adds	r3, r7, r4
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	f383 8810 	msr	PRIMASK, r3
}
 800aa50:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	228c      	movs	r2, #140	; 0x8c
 800aa56:	2120      	movs	r1, #32
 800aa58:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa66:	f3ef 8310 	mrs	r3, PRIMASK
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa6e:	2480      	movs	r4, #128	; 0x80
 800aa70:	193a      	adds	r2, r7, r4
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	2301      	movs	r3, #1
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7a:	f383 8810 	msr	PRIMASK, r3
}
 800aa7e:	46c0      	nop			; (mov r8, r8)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2110      	movs	r1, #16
 800aa8c:	438a      	bics	r2, r1
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	193b      	adds	r3, r7, r4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	f383 8810 	msr	PRIMASK, r3
}
 800aa9c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aaa4:	183b      	adds	r3, r7, r0
 800aaa6:	881a      	ldrh	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	0011      	movs	r1, r2
 800aaac:	0018      	movs	r0, r3
 800aaae:	f000 f89d 	bl	800abec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aab2:	e06f      	b.n	800ab94 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aab4:	23a4      	movs	r3, #164	; 0xa4
 800aab6:	18fb      	adds	r3, r7, r3
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	2380      	movs	r3, #128	; 0x80
 800aabc:	035b      	lsls	r3, r3, #13
 800aabe:	4013      	ands	r3, r2
 800aac0:	d010      	beq.n	800aae4 <HAL_UART_IRQHandler+0x584>
 800aac2:	239c      	movs	r3, #156	; 0x9c
 800aac4:	18fb      	adds	r3, r7, r3
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	2380      	movs	r3, #128	; 0x80
 800aaca:	03db      	lsls	r3, r3, #15
 800aacc:	4013      	ands	r3, r2
 800aace:	d009      	beq.n	800aae4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2280      	movs	r2, #128	; 0x80
 800aad6:	0352      	lsls	r2, r2, #13
 800aad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	0018      	movs	r0, r3
 800aade:	f001 f8a5 	bl	800bc2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aae2:	e05a      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aae4:	23a4      	movs	r3, #164	; 0xa4
 800aae6:	18fb      	adds	r3, r7, r3
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2280      	movs	r2, #128	; 0x80
 800aaec:	4013      	ands	r3, r2
 800aaee:	d016      	beq.n	800ab1e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aaf0:	23a0      	movs	r3, #160	; 0xa0
 800aaf2:	18fb      	adds	r3, r7, r3
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2280      	movs	r2, #128	; 0x80
 800aaf8:	4013      	ands	r3, r2
 800aafa:	d106      	bne.n	800ab0a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aafc:	239c      	movs	r3, #156	; 0x9c
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	2380      	movs	r3, #128	; 0x80
 800ab04:	041b      	lsls	r3, r3, #16
 800ab06:	4013      	ands	r3, r2
 800ab08:	d009      	beq.n	800ab1e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d042      	beq.n	800ab98 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	0010      	movs	r0, r2
 800ab1a:	4798      	blx	r3
    }
    return;
 800ab1c:	e03c      	b.n	800ab98 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab1e:	23a4      	movs	r3, #164	; 0xa4
 800ab20:	18fb      	adds	r3, r7, r3
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2240      	movs	r2, #64	; 0x40
 800ab26:	4013      	ands	r3, r2
 800ab28:	d00a      	beq.n	800ab40 <HAL_UART_IRQHandler+0x5e0>
 800ab2a:	23a0      	movs	r3, #160	; 0xa0
 800ab2c:	18fb      	adds	r3, r7, r3
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2240      	movs	r2, #64	; 0x40
 800ab32:	4013      	ands	r3, r2
 800ab34:	d004      	beq.n	800ab40 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f000 ffd9 	bl	800baf0 <UART_EndTransmit_IT>
    return;
 800ab3e:	e02c      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab40:	23a4      	movs	r3, #164	; 0xa4
 800ab42:	18fb      	adds	r3, r7, r3
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	2380      	movs	r3, #128	; 0x80
 800ab48:	041b      	lsls	r3, r3, #16
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	d00b      	beq.n	800ab66 <HAL_UART_IRQHandler+0x606>
 800ab4e:	23a0      	movs	r3, #160	; 0xa0
 800ab50:	18fb      	adds	r3, r7, r3
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	2380      	movs	r3, #128	; 0x80
 800ab56:	05db      	lsls	r3, r3, #23
 800ab58:	4013      	ands	r3, r2
 800ab5a:	d004      	beq.n	800ab66 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	0018      	movs	r0, r3
 800ab60:	f001 f874 	bl	800bc4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab64:	e019      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab66:	23a4      	movs	r3, #164	; 0xa4
 800ab68:	18fb      	adds	r3, r7, r3
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	2380      	movs	r3, #128	; 0x80
 800ab6e:	045b      	lsls	r3, r3, #17
 800ab70:	4013      	ands	r3, r2
 800ab72:	d012      	beq.n	800ab9a <HAL_UART_IRQHandler+0x63a>
 800ab74:	23a0      	movs	r3, #160	; 0xa0
 800ab76:	18fb      	adds	r3, r7, r3
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da0d      	bge.n	800ab9a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	0018      	movs	r0, r3
 800ab82:	f001 f85b 	bl	800bc3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab86:	e008      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
      return;
 800ab88:	46c0      	nop			; (mov r8, r8)
 800ab8a:	e006      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
    return;
 800ab8c:	46c0      	nop			; (mov r8, r8)
 800ab8e:	e004      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
      return;
 800ab90:	46c0      	nop			; (mov r8, r8)
 800ab92:	e002      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
      return;
 800ab94:	46c0      	nop			; (mov r8, r8)
 800ab96:	e000      	b.n	800ab9a <HAL_UART_IRQHandler+0x63a>
    return;
 800ab98:	46c0      	nop			; (mov r8, r8)
  }
}
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b02a      	add	sp, #168	; 0xa8
 800ab9e:	bdb0      	pop	{r4, r5, r7, pc}
 800aba0:	fffffeff 	.word	0xfffffeff
 800aba4:	fffffedf 	.word	0xfffffedf
 800aba8:	effffffe 	.word	0xeffffffe

0800abac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800abb4:	46c0      	nop			; (mov r8, r8)
 800abb6:	46bd      	mov	sp, r7
 800abb8:	b002      	add	sp, #8
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800abc4:	46c0      	nop			; (mov r8, r8)
 800abc6:	46bd      	mov	sp, r7
 800abc8:	b002      	add	sp, #8
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800abd4:	46c0      	nop			; (mov r8, r8)
 800abd6:	46bd      	mov	sp, r7
 800abd8:	b002      	add	sp, #8
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abe4:	46c0      	nop			; (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	b002      	add	sp, #8
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	000a      	movs	r2, r1
 800abf6:	1cbb      	adds	r3, r7, #2
 800abf8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	46bd      	mov	sp, r7
 800abfe:	b002      	add	sp, #8
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac0c:	231a      	movs	r3, #26
 800ac0e:	18fb      	adds	r3, r7, r3
 800ac10:	2200      	movs	r2, #0
 800ac12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4abc      	ldr	r2, [pc, #752]	; (800af24 <UART_SetConfig+0x320>)
 800ac34:	4013      	ands	r3, r2
 800ac36:	0019      	movs	r1, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	69fa      	ldr	r2, [r7, #28]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	4ab7      	ldr	r2, [pc, #732]	; (800af28 <UART_SetConfig+0x324>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	0019      	movs	r1, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68da      	ldr	r2, [r3, #12]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	4aae      	ldr	r2, [pc, #696]	; (800af2c <UART_SetConfig+0x328>)
 800ac72:	4013      	ands	r3, r2
 800ac74:	0019      	movs	r1, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69fa      	ldr	r2, [r7, #28]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	220f      	movs	r2, #15
 800ac88:	4393      	bics	r3, r2
 800ac8a:	0019      	movs	r1, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4aa4      	ldr	r2, [pc, #656]	; (800af30 <UART_SetConfig+0x32c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d127      	bne.n	800acf2 <UART_SetConfig+0xee>
 800aca2:	4ba4      	ldr	r3, [pc, #656]	; (800af34 <UART_SetConfig+0x330>)
 800aca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca6:	2203      	movs	r2, #3
 800aca8:	4013      	ands	r3, r2
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d017      	beq.n	800acde <UART_SetConfig+0xda>
 800acae:	d81b      	bhi.n	800ace8 <UART_SetConfig+0xe4>
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d00a      	beq.n	800acca <UART_SetConfig+0xc6>
 800acb4:	d818      	bhi.n	800ace8 <UART_SetConfig+0xe4>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <UART_SetConfig+0xbc>
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d00a      	beq.n	800acd4 <UART_SetConfig+0xd0>
 800acbe:	e013      	b.n	800ace8 <UART_SetConfig+0xe4>
 800acc0:	231b      	movs	r3, #27
 800acc2:	18fb      	adds	r3, r7, r3
 800acc4:	2200      	movs	r2, #0
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e058      	b.n	800ad7c <UART_SetConfig+0x178>
 800acca:	231b      	movs	r3, #27
 800accc:	18fb      	adds	r3, r7, r3
 800acce:	2202      	movs	r2, #2
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	e053      	b.n	800ad7c <UART_SetConfig+0x178>
 800acd4:	231b      	movs	r3, #27
 800acd6:	18fb      	adds	r3, r7, r3
 800acd8:	2204      	movs	r2, #4
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e04e      	b.n	800ad7c <UART_SetConfig+0x178>
 800acde:	231b      	movs	r3, #27
 800ace0:	18fb      	adds	r3, r7, r3
 800ace2:	2208      	movs	r2, #8
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	e049      	b.n	800ad7c <UART_SetConfig+0x178>
 800ace8:	231b      	movs	r3, #27
 800acea:	18fb      	adds	r3, r7, r3
 800acec:	2210      	movs	r2, #16
 800acee:	701a      	strb	r2, [r3, #0]
 800acf0:	e044      	b.n	800ad7c <UART_SetConfig+0x178>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a90      	ldr	r2, [pc, #576]	; (800af38 <UART_SetConfig+0x334>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d127      	bne.n	800ad4c <UART_SetConfig+0x148>
 800acfc:	4b8d      	ldr	r3, [pc, #564]	; (800af34 <UART_SetConfig+0x330>)
 800acfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad00:	220c      	movs	r2, #12
 800ad02:	4013      	ands	r3, r2
 800ad04:	2b0c      	cmp	r3, #12
 800ad06:	d017      	beq.n	800ad38 <UART_SetConfig+0x134>
 800ad08:	d81b      	bhi.n	800ad42 <UART_SetConfig+0x13e>
 800ad0a:	2b08      	cmp	r3, #8
 800ad0c:	d00a      	beq.n	800ad24 <UART_SetConfig+0x120>
 800ad0e:	d818      	bhi.n	800ad42 <UART_SetConfig+0x13e>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <UART_SetConfig+0x116>
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d00a      	beq.n	800ad2e <UART_SetConfig+0x12a>
 800ad18:	e013      	b.n	800ad42 <UART_SetConfig+0x13e>
 800ad1a:	231b      	movs	r3, #27
 800ad1c:	18fb      	adds	r3, r7, r3
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	e02b      	b.n	800ad7c <UART_SetConfig+0x178>
 800ad24:	231b      	movs	r3, #27
 800ad26:	18fb      	adds	r3, r7, r3
 800ad28:	2202      	movs	r2, #2
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	e026      	b.n	800ad7c <UART_SetConfig+0x178>
 800ad2e:	231b      	movs	r3, #27
 800ad30:	18fb      	adds	r3, r7, r3
 800ad32:	2204      	movs	r2, #4
 800ad34:	701a      	strb	r2, [r3, #0]
 800ad36:	e021      	b.n	800ad7c <UART_SetConfig+0x178>
 800ad38:	231b      	movs	r3, #27
 800ad3a:	18fb      	adds	r3, r7, r3
 800ad3c:	2208      	movs	r2, #8
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	e01c      	b.n	800ad7c <UART_SetConfig+0x178>
 800ad42:	231b      	movs	r3, #27
 800ad44:	18fb      	adds	r3, r7, r3
 800ad46:	2210      	movs	r2, #16
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	e017      	b.n	800ad7c <UART_SetConfig+0x178>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a7a      	ldr	r2, [pc, #488]	; (800af3c <UART_SetConfig+0x338>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d104      	bne.n	800ad60 <UART_SetConfig+0x15c>
 800ad56:	231b      	movs	r3, #27
 800ad58:	18fb      	adds	r3, r7, r3
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	e00d      	b.n	800ad7c <UART_SetConfig+0x178>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a76      	ldr	r2, [pc, #472]	; (800af40 <UART_SetConfig+0x33c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d104      	bne.n	800ad74 <UART_SetConfig+0x170>
 800ad6a:	231b      	movs	r3, #27
 800ad6c:	18fb      	adds	r3, r7, r3
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	e003      	b.n	800ad7c <UART_SetConfig+0x178>
 800ad74:	231b      	movs	r3, #27
 800ad76:	18fb      	adds	r3, r7, r3
 800ad78:	2210      	movs	r2, #16
 800ad7a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	69da      	ldr	r2, [r3, #28]
 800ad80:	2380      	movs	r3, #128	; 0x80
 800ad82:	021b      	lsls	r3, r3, #8
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d000      	beq.n	800ad8a <UART_SetConfig+0x186>
 800ad88:	e065      	b.n	800ae56 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800ad8a:	231b      	movs	r3, #27
 800ad8c:	18fb      	adds	r3, r7, r3
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b08      	cmp	r3, #8
 800ad92:	d015      	beq.n	800adc0 <UART_SetConfig+0x1bc>
 800ad94:	dc18      	bgt.n	800adc8 <UART_SetConfig+0x1c4>
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d00d      	beq.n	800adb6 <UART_SetConfig+0x1b2>
 800ad9a:	dc15      	bgt.n	800adc8 <UART_SetConfig+0x1c4>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <UART_SetConfig+0x1a2>
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d005      	beq.n	800adb0 <UART_SetConfig+0x1ac>
 800ada4:	e010      	b.n	800adc8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ada6:	f7fc fdd1 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800adaa:	0003      	movs	r3, r0
 800adac:	617b      	str	r3, [r7, #20]
        break;
 800adae:	e012      	b.n	800add6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adb0:	4b64      	ldr	r3, [pc, #400]	; (800af44 <UART_SetConfig+0x340>)
 800adb2:	617b      	str	r3, [r7, #20]
        break;
 800adb4:	e00f      	b.n	800add6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adb6:	f7fc fd3d 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800adba:	0003      	movs	r3, r0
 800adbc:	617b      	str	r3, [r7, #20]
        break;
 800adbe:	e00a      	b.n	800add6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adc0:	2380      	movs	r3, #128	; 0x80
 800adc2:	021b      	lsls	r3, r3, #8
 800adc4:	617b      	str	r3, [r7, #20]
        break;
 800adc6:	e006      	b.n	800add6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800adcc:	231a      	movs	r3, #26
 800adce:	18fb      	adds	r3, r7, r3
 800add0:	2201      	movs	r2, #1
 800add2:	701a      	strb	r2, [r3, #0]
        break;
 800add4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d100      	bne.n	800adde <UART_SetConfig+0x1da>
 800addc:	e08d      	b.n	800aefa <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ade2:	4b59      	ldr	r3, [pc, #356]	; (800af48 <UART_SetConfig+0x344>)
 800ade4:	0052      	lsls	r2, r2, #1
 800ade6:	5ad3      	ldrh	r3, [r2, r3]
 800ade8:	0019      	movs	r1, r3
 800adea:	6978      	ldr	r0, [r7, #20]
 800adec:	f7f5 f9ae 	bl	800014c <__udivsi3>
 800adf0:	0003      	movs	r3, r0
 800adf2:	005a      	lsls	r2, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	085b      	lsrs	r3, r3, #1
 800adfa:	18d2      	adds	r2, r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	0019      	movs	r1, r3
 800ae02:	0010      	movs	r0, r2
 800ae04:	f7f5 f9a2 	bl	800014c <__udivsi3>
 800ae08:	0003      	movs	r3, r0
 800ae0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b0f      	cmp	r3, #15
 800ae10:	d91c      	bls.n	800ae4c <UART_SetConfig+0x248>
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	2380      	movs	r3, #128	; 0x80
 800ae16:	025b      	lsls	r3, r3, #9
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d217      	bcs.n	800ae4c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	200e      	movs	r0, #14
 800ae22:	183b      	adds	r3, r7, r0
 800ae24:	210f      	movs	r1, #15
 800ae26:	438a      	bics	r2, r1
 800ae28:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	085b      	lsrs	r3, r3, #1
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	2207      	movs	r2, #7
 800ae32:	4013      	ands	r3, r2
 800ae34:	b299      	uxth	r1, r3
 800ae36:	183b      	adds	r3, r7, r0
 800ae38:	183a      	adds	r2, r7, r0
 800ae3a:	8812      	ldrh	r2, [r2, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	183a      	adds	r2, r7, r0
 800ae46:	8812      	ldrh	r2, [r2, #0]
 800ae48:	60da      	str	r2, [r3, #12]
 800ae4a:	e056      	b.n	800aefa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800ae4c:	231a      	movs	r3, #26
 800ae4e:	18fb      	adds	r3, r7, r3
 800ae50:	2201      	movs	r2, #1
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	e051      	b.n	800aefa <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae56:	231b      	movs	r3, #27
 800ae58:	18fb      	adds	r3, r7, r3
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d015      	beq.n	800ae8c <UART_SetConfig+0x288>
 800ae60:	dc18      	bgt.n	800ae94 <UART_SetConfig+0x290>
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d00d      	beq.n	800ae82 <UART_SetConfig+0x27e>
 800ae66:	dc15      	bgt.n	800ae94 <UART_SetConfig+0x290>
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d002      	beq.n	800ae72 <UART_SetConfig+0x26e>
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d005      	beq.n	800ae7c <UART_SetConfig+0x278>
 800ae70:	e010      	b.n	800ae94 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae72:	f7fc fd6b 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800ae76:	0003      	movs	r3, r0
 800ae78:	617b      	str	r3, [r7, #20]
        break;
 800ae7a:	e012      	b.n	800aea2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae7c:	4b31      	ldr	r3, [pc, #196]	; (800af44 <UART_SetConfig+0x340>)
 800ae7e:	617b      	str	r3, [r7, #20]
        break;
 800ae80:	e00f      	b.n	800aea2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae82:	f7fc fcd7 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800ae86:	0003      	movs	r3, r0
 800ae88:	617b      	str	r3, [r7, #20]
        break;
 800ae8a:	e00a      	b.n	800aea2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae8c:	2380      	movs	r3, #128	; 0x80
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	617b      	str	r3, [r7, #20]
        break;
 800ae92:	e006      	b.n	800aea2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ae98:	231a      	movs	r3, #26
 800ae9a:	18fb      	adds	r3, r7, r3
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	701a      	strb	r2, [r3, #0]
        break;
 800aea0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d028      	beq.n	800aefa <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeac:	4b26      	ldr	r3, [pc, #152]	; (800af48 <UART_SetConfig+0x344>)
 800aeae:	0052      	lsls	r2, r2, #1
 800aeb0:	5ad3      	ldrh	r3, [r2, r3]
 800aeb2:	0019      	movs	r1, r3
 800aeb4:	6978      	ldr	r0, [r7, #20]
 800aeb6:	f7f5 f949 	bl	800014c <__udivsi3>
 800aeba:	0003      	movs	r3, r0
 800aebc:	001a      	movs	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	085b      	lsrs	r3, r3, #1
 800aec4:	18d2      	adds	r2, r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	0019      	movs	r1, r3
 800aecc:	0010      	movs	r0, r2
 800aece:	f7f5 f93d 	bl	800014c <__udivsi3>
 800aed2:	0003      	movs	r3, r0
 800aed4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b0f      	cmp	r3, #15
 800aeda:	d90a      	bls.n	800aef2 <UART_SetConfig+0x2ee>
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	2380      	movs	r3, #128	; 0x80
 800aee0:	025b      	lsls	r3, r3, #9
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d205      	bcs.n	800aef2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60da      	str	r2, [r3, #12]
 800aef0:	e003      	b.n	800aefa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800aef2:	231a      	movs	r3, #26
 800aef4:	18fb      	adds	r3, r7, r3
 800aef6:	2201      	movs	r2, #1
 800aef8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	226a      	movs	r2, #106	; 0x6a
 800aefe:	2101      	movs	r1, #1
 800af00:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2268      	movs	r2, #104	; 0x68
 800af06:	2101      	movs	r1, #1
 800af08:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800af16:	231a      	movs	r3, #26
 800af18:	18fb      	adds	r3, r7, r3
 800af1a:	781b      	ldrb	r3, [r3, #0]
}
 800af1c:	0018      	movs	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	b008      	add	sp, #32
 800af22:	bd80      	pop	{r7, pc}
 800af24:	cfff69f3 	.word	0xcfff69f3
 800af28:	ffffcfff 	.word	0xffffcfff
 800af2c:	11fff4ff 	.word	0x11fff4ff
 800af30:	40013800 	.word	0x40013800
 800af34:	40021000 	.word	0x40021000
 800af38:	40004400 	.word	0x40004400
 800af3c:	40004800 	.word	0x40004800
 800af40:	40004c00 	.word	0x40004c00
 800af44:	00f42400 	.word	0x00f42400
 800af48:	08018820 	.word	0x08018820

0800af4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af58:	2201      	movs	r2, #1
 800af5a:	4013      	ands	r3, r2
 800af5c:	d00b      	beq.n	800af76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	4a4a      	ldr	r2, [pc, #296]	; (800b090 <UART_AdvFeatureConfig+0x144>)
 800af66:	4013      	ands	r3, r2
 800af68:	0019      	movs	r1, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	2202      	movs	r2, #2
 800af7c:	4013      	ands	r3, r2
 800af7e:	d00b      	beq.n	800af98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	4a43      	ldr	r2, [pc, #268]	; (800b094 <UART_AdvFeatureConfig+0x148>)
 800af88:	4013      	ands	r3, r2
 800af8a:	0019      	movs	r1, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	2204      	movs	r2, #4
 800af9e:	4013      	ands	r3, r2
 800afa0:	d00b      	beq.n	800afba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	4a3b      	ldr	r2, [pc, #236]	; (800b098 <UART_AdvFeatureConfig+0x14c>)
 800afaa:	4013      	ands	r3, r2
 800afac:	0019      	movs	r1, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	430a      	orrs	r2, r1
 800afb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	2208      	movs	r2, #8
 800afc0:	4013      	ands	r3, r2
 800afc2:	d00b      	beq.n	800afdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4a34      	ldr	r2, [pc, #208]	; (800b09c <UART_AdvFeatureConfig+0x150>)
 800afcc:	4013      	ands	r3, r2
 800afce:	0019      	movs	r1, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	430a      	orrs	r2, r1
 800afda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe0:	2210      	movs	r2, #16
 800afe2:	4013      	ands	r3, r2
 800afe4:	d00b      	beq.n	800affe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	4a2c      	ldr	r2, [pc, #176]	; (800b0a0 <UART_AdvFeatureConfig+0x154>)
 800afee:	4013      	ands	r3, r2
 800aff0:	0019      	movs	r1, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b002:	2220      	movs	r2, #32
 800b004:	4013      	ands	r3, r2
 800b006:	d00b      	beq.n	800b020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	4a25      	ldr	r2, [pc, #148]	; (800b0a4 <UART_AdvFeatureConfig+0x158>)
 800b010:	4013      	ands	r3, r2
 800b012:	0019      	movs	r1, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	430a      	orrs	r2, r1
 800b01e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b024:	2240      	movs	r2, #64	; 0x40
 800b026:	4013      	ands	r3, r2
 800b028:	d01d      	beq.n	800b066 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	4a1d      	ldr	r2, [pc, #116]	; (800b0a8 <UART_AdvFeatureConfig+0x15c>)
 800b032:	4013      	ands	r3, r2
 800b034:	0019      	movs	r1, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b046:	2380      	movs	r3, #128	; 0x80
 800b048:	035b      	lsls	r3, r3, #13
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d10b      	bne.n	800b066 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	4a15      	ldr	r2, [pc, #84]	; (800b0ac <UART_AdvFeatureConfig+0x160>)
 800b056:	4013      	ands	r3, r2
 800b058:	0019      	movs	r1, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	430a      	orrs	r2, r1
 800b064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	2280      	movs	r2, #128	; 0x80
 800b06c:	4013      	ands	r3, r2
 800b06e:	d00b      	beq.n	800b088 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	4a0e      	ldr	r2, [pc, #56]	; (800b0b0 <UART_AdvFeatureConfig+0x164>)
 800b078:	4013      	ands	r3, r2
 800b07a:	0019      	movs	r1, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	430a      	orrs	r2, r1
 800b086:	605a      	str	r2, [r3, #4]
  }
}
 800b088:	46c0      	nop			; (mov r8, r8)
 800b08a:	46bd      	mov	sp, r7
 800b08c:	b002      	add	sp, #8
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	fffdffff 	.word	0xfffdffff
 800b094:	fffeffff 	.word	0xfffeffff
 800b098:	fffbffff 	.word	0xfffbffff
 800b09c:	ffff7fff 	.word	0xffff7fff
 800b0a0:	ffffefff 	.word	0xffffefff
 800b0a4:	ffffdfff 	.word	0xffffdfff
 800b0a8:	ffefffff 	.word	0xffefffff
 800b0ac:	ff9fffff 	.word	0xff9fffff
 800b0b0:	fff7ffff 	.word	0xfff7ffff

0800b0b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2290      	movs	r2, #144	; 0x90
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0c4:	f7fa f886 	bl	80051d4 <HAL_GetTick>
 800b0c8:	0003      	movs	r3, r0
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2208      	movs	r2, #8
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	2b08      	cmp	r3, #8
 800b0d8:	d10c      	bne.n	800b0f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2280      	movs	r2, #128	; 0x80
 800b0de:	0391      	lsls	r1, r2, #14
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	4a1a      	ldr	r2, [pc, #104]	; (800b14c <UART_CheckIdleState+0x98>)
 800b0e4:	9200      	str	r2, [sp, #0]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f000 f832 	bl	800b150 <UART_WaitOnFlagUntilTimeout>
 800b0ec:	1e03      	subs	r3, r0, #0
 800b0ee:	d001      	beq.n	800b0f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e026      	b.n	800b142 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2204      	movs	r2, #4
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	2b04      	cmp	r3, #4
 800b100:	d10c      	bne.n	800b11c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2280      	movs	r2, #128	; 0x80
 800b106:	03d1      	lsls	r1, r2, #15
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4a10      	ldr	r2, [pc, #64]	; (800b14c <UART_CheckIdleState+0x98>)
 800b10c:	9200      	str	r2, [sp, #0]
 800b10e:	2200      	movs	r2, #0
 800b110:	f000 f81e 	bl	800b150 <UART_WaitOnFlagUntilTimeout>
 800b114:	1e03      	subs	r3, r0, #0
 800b116:	d001      	beq.n	800b11c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e012      	b.n	800b142 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2288      	movs	r2, #136	; 0x88
 800b120:	2120      	movs	r1, #32
 800b122:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	228c      	movs	r2, #140	; 0x8c
 800b128:	2120      	movs	r1, #32
 800b12a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2284      	movs	r2, #132	; 0x84
 800b13c:	2100      	movs	r1, #0
 800b13e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	0018      	movs	r0, r3
 800b144:	46bd      	mov	sp, r7
 800b146:	b004      	add	sp, #16
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	46c0      	nop			; (mov r8, r8)
 800b14c:	01ffffff 	.word	0x01ffffff

0800b150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b094      	sub	sp, #80	; 0x50
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	1dfb      	adds	r3, r7, #7
 800b15e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b160:	e0a7      	b.n	800b2b2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b164:	3301      	adds	r3, #1
 800b166:	d100      	bne.n	800b16a <UART_WaitOnFlagUntilTimeout+0x1a>
 800b168:	e0a3      	b.n	800b2b2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b16a:	f7fa f833 	bl	80051d4 <HAL_GetTick>
 800b16e:	0002      	movs	r2, r0
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b176:	429a      	cmp	r2, r3
 800b178:	d302      	bcc.n	800b180 <UART_WaitOnFlagUntilTimeout+0x30>
 800b17a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d13f      	bne.n	800b200 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b180:	f3ef 8310 	mrs	r3, PRIMASK
 800b184:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b188:	647b      	str	r3, [r7, #68]	; 0x44
 800b18a:	2301      	movs	r3, #1
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b190:	f383 8810 	msr	PRIMASK, r3
}
 800b194:	46c0      	nop			; (mov r8, r8)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	494e      	ldr	r1, [pc, #312]	; (800b2dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b1a2:	400a      	ands	r2, r1
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	f383 8810 	msr	PRIMASK, r3
}
 800b1b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b1bc:	2301      	movs	r3, #1
 800b1be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	f383 8810 	msr	PRIMASK, r3
}
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	689a      	ldr	r2, [r3, #8]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	438a      	bics	r2, r1
 800b1d6:	609a      	str	r2, [r3, #8]
 800b1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1de:	f383 8810 	msr	PRIMASK, r3
}
 800b1e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2288      	movs	r2, #136	; 0x88
 800b1e8:	2120      	movs	r1, #32
 800b1ea:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	228c      	movs	r2, #140	; 0x8c
 800b1f0:	2120      	movs	r1, #32
 800b1f2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2284      	movs	r2, #132	; 0x84
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e069      	b.n	800b2d4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2204      	movs	r2, #4
 800b208:	4013      	ands	r3, r2
 800b20a:	d052      	beq.n	800b2b2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	69da      	ldr	r2, [r3, #28]
 800b212:	2380      	movs	r3, #128	; 0x80
 800b214:	011b      	lsls	r3, r3, #4
 800b216:	401a      	ands	r2, r3
 800b218:	2380      	movs	r3, #128	; 0x80
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d148      	bne.n	800b2b2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2280      	movs	r2, #128	; 0x80
 800b226:	0112      	lsls	r2, r2, #4
 800b228:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b22a:	f3ef 8310 	mrs	r3, PRIMASK
 800b22e:	613b      	str	r3, [r7, #16]
  return(result);
 800b230:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b234:	2301      	movs	r3, #1
 800b236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f383 8810 	msr	PRIMASK, r3
}
 800b23e:	46c0      	nop			; (mov r8, r8)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4924      	ldr	r1, [pc, #144]	; (800b2dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b24c:	400a      	ands	r2, r1
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b252:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	f383 8810 	msr	PRIMASK, r3
}
 800b25a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b25c:	f3ef 8310 	mrs	r3, PRIMASK
 800b260:	61fb      	str	r3, [r7, #28]
  return(result);
 800b262:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b264:	64bb      	str	r3, [r7, #72]	; 0x48
 800b266:	2301      	movs	r3, #1
 800b268:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	f383 8810 	msr	PRIMASK, r3
}
 800b270:	46c0      	nop			; (mov r8, r8)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2101      	movs	r1, #1
 800b27e:	438a      	bics	r2, r1
 800b280:	609a      	str	r2, [r3, #8]
 800b282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b284:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	f383 8810 	msr	PRIMASK, r3
}
 800b28c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2288      	movs	r2, #136	; 0x88
 800b292:	2120      	movs	r1, #32
 800b294:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	228c      	movs	r2, #140	; 0x8c
 800b29a:	2120      	movs	r1, #32
 800b29c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2290      	movs	r2, #144	; 0x90
 800b2a2:	2120      	movs	r1, #32
 800b2a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2284      	movs	r2, #132	; 0x84
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e010      	b.n	800b2d4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	425a      	negs	r2, r3
 800b2c2:	4153      	adcs	r3, r2
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	001a      	movs	r2, r3
 800b2c8:	1dfb      	adds	r3, r7, #7
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d100      	bne.n	800b2d2 <UART_WaitOnFlagUntilTimeout+0x182>
 800b2d0:	e747      	b.n	800b162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	0018      	movs	r0, r3
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	b014      	add	sp, #80	; 0x50
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	fffffe5f 	.word	0xfffffe5f

0800b2e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b090      	sub	sp, #64	; 0x40
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	1dbb      	adds	r3, r7, #6
 800b2ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	1dba      	adds	r2, r7, #6
 800b2f8:	215c      	movs	r1, #92	; 0x5c
 800b2fa:	8812      	ldrh	r2, [r2, #0]
 800b2fc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2290      	movs	r2, #144	; 0x90
 800b302:	2100      	movs	r1, #0
 800b304:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	228c      	movs	r2, #140	; 0x8c
 800b30a:	2122      	movs	r1, #34	; 0x22
 800b30c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2280      	movs	r2, #128	; 0x80
 800b312:	589b      	ldr	r3, [r3, r2]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d02d      	beq.n	800b374 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2280      	movs	r2, #128	; 0x80
 800b31c:	589b      	ldr	r3, [r3, r2]
 800b31e:	4a40      	ldr	r2, [pc, #256]	; (800b420 <UART_Start_Receive_DMA+0x140>)
 800b320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2280      	movs	r2, #128	; 0x80
 800b326:	589b      	ldr	r3, [r3, r2]
 800b328:	4a3e      	ldr	r2, [pc, #248]	; (800b424 <UART_Start_Receive_DMA+0x144>)
 800b32a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2280      	movs	r2, #128	; 0x80
 800b330:	589b      	ldr	r3, [r3, r2]
 800b332:	4a3d      	ldr	r2, [pc, #244]	; (800b428 <UART_Start_Receive_DMA+0x148>)
 800b334:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2280      	movs	r2, #128	; 0x80
 800b33a:	589b      	ldr	r3, [r3, r2]
 800b33c:	2200      	movs	r2, #0
 800b33e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2280      	movs	r2, #128	; 0x80
 800b344:	5898      	ldr	r0, [r3, r2]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3324      	adds	r3, #36	; 0x24
 800b34c:	0019      	movs	r1, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b352:	001a      	movs	r2, r3
 800b354:	1dbb      	adds	r3, r7, #6
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	f7fb f9cc 	bl	80066f4 <HAL_DMA_Start_IT>
 800b35c:	1e03      	subs	r3, r0, #0
 800b35e:	d009      	beq.n	800b374 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2290      	movs	r2, #144	; 0x90
 800b364:	2110      	movs	r1, #16
 800b366:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	228c      	movs	r2, #140	; 0x8c
 800b36c:	2120      	movs	r1, #32
 800b36e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e050      	b.n	800b416 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d019      	beq.n	800b3b0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b37c:	f3ef 8310 	mrs	r3, PRIMASK
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b384:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b386:	2301      	movs	r3, #1
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	f383 8810 	msr	PRIMASK, r3
}
 800b390:	46c0      	nop			; (mov r8, r8)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2180      	movs	r1, #128	; 0x80
 800b39e:	0049      	lsls	r1, r1, #1
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	f383 8810 	msr	PRIMASK, r3
}
 800b3ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3b0:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b4:	613b      	str	r3, [r7, #16]
  return(result);
 800b3b6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f383 8810 	msr	PRIMASK, r3
}
 800b3c4:	46c0      	nop			; (mov r8, r8)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	609a      	str	r2, [r3, #8]
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	f383 8810 	msr	PRIMASK, r3
}
 800b3e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3e6:	61fb      	str	r3, [r7, #28]
  return(result);
 800b3e8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	f383 8810 	msr	PRIMASK, r3
}
 800b3f6:	46c0      	nop			; (mov r8, r8)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689a      	ldr	r2, [r3, #8]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2140      	movs	r1, #64	; 0x40
 800b404:	430a      	orrs	r2, r1
 800b406:	609a      	str	r2, [r3, #8]
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	f383 8810 	msr	PRIMASK, r3
}
 800b412:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	0018      	movs	r0, r3
 800b418:	46bd      	mov	sp, r7
 800b41a:	b010      	add	sp, #64	; 0x40
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	46c0      	nop			; (mov r8, r8)
 800b420:	0800b579 	.word	0x0800b579
 800b424:	0800b6a9 	.word	0x0800b6a9
 800b428:	0800b6eb 	.word	0x0800b6eb

0800b42c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08a      	sub	sp, #40	; 0x28
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b434:	f3ef 8310 	mrs	r3, PRIMASK
 800b438:	60bb      	str	r3, [r7, #8]
  return(result);
 800b43a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b43c:	627b      	str	r3, [r7, #36]	; 0x24
 800b43e:	2301      	movs	r3, #1
 800b440:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f383 8810 	msr	PRIMASK, r3
}
 800b448:	46c0      	nop			; (mov r8, r8)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	21c0      	movs	r1, #192	; 0xc0
 800b456:	438a      	bics	r2, r1
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f383 8810 	msr	PRIMASK, r3
}
 800b464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b466:	f3ef 8310 	mrs	r3, PRIMASK
 800b46a:	617b      	str	r3, [r7, #20]
  return(result);
 800b46c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b46e:	623b      	str	r3, [r7, #32]
 800b470:	2301      	movs	r3, #1
 800b472:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	f383 8810 	msr	PRIMASK, r3
}
 800b47a:	46c0      	nop			; (mov r8, r8)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689a      	ldr	r2, [r3, #8]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4908      	ldr	r1, [pc, #32]	; (800b4a8 <UART_EndTxTransfer+0x7c>)
 800b488:	400a      	ands	r2, r1
 800b48a:	609a      	str	r2, [r3, #8]
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f383 8810 	msr	PRIMASK, r3
}
 800b496:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2288      	movs	r2, #136	; 0x88
 800b49c:	2120      	movs	r1, #32
 800b49e:	5099      	str	r1, [r3, r2]
}
 800b4a0:	46c0      	nop			; (mov r8, r8)
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	b00a      	add	sp, #40	; 0x28
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	ff7fffff 	.word	0xff7fffff

0800b4ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b08e      	sub	sp, #56	; 0x38
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b8:	617b      	str	r3, [r7, #20]
  return(result);
 800b4ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b4be:	2301      	movs	r3, #1
 800b4c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	f383 8810 	msr	PRIMASK, r3
}
 800b4c8:	46c0      	nop			; (mov r8, r8)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4926      	ldr	r1, [pc, #152]	; (800b570 <UART_EndRxTransfer+0xc4>)
 800b4d6:	400a      	ands	r2, r1
 800b4d8:	601a      	str	r2, [r3, #0]
 800b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	f383 8810 	msr	PRIMASK, r3
}
 800b4e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ea:	623b      	str	r3, [r7, #32]
  return(result);
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4ee:	633b      	str	r3, [r7, #48]	; 0x30
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	f383 8810 	msr	PRIMASK, r3
}
 800b4fa:	46c0      	nop			; (mov r8, r8)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	491b      	ldr	r1, [pc, #108]	; (800b574 <UART_EndRxTransfer+0xc8>)
 800b508:	400a      	ands	r2, r1
 800b50a:	609a      	str	r2, [r3, #8]
 800b50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	f383 8810 	msr	PRIMASK, r3
}
 800b516:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d118      	bne.n	800b552 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b520:	f3ef 8310 	mrs	r3, PRIMASK
 800b524:	60bb      	str	r3, [r7, #8]
  return(result);
 800b526:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b52a:	2301      	movs	r3, #1
 800b52c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f383 8810 	msr	PRIMASK, r3
}
 800b534:	46c0      	nop			; (mov r8, r8)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2110      	movs	r1, #16
 800b542:	438a      	bics	r2, r1
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	f383 8810 	msr	PRIMASK, r3
}
 800b550:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	228c      	movs	r2, #140	; 0x8c
 800b556:	2120      	movs	r1, #32
 800b558:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b566:	46c0      	nop			; (mov r8, r8)
 800b568:	46bd      	mov	sp, r7
 800b56a:	b00e      	add	sp, #56	; 0x38
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	46c0      	nop			; (mov r8, r8)
 800b570:	fffffedf 	.word	0xfffffedf
 800b574:	effffffe 	.word	0xeffffffe

0800b578 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b094      	sub	sp, #80	; 0x50
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b584:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2220      	movs	r2, #32
 800b58e:	4013      	ands	r3, r2
 800b590:	d16f      	bne.n	800b672 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b594:	225e      	movs	r2, #94	; 0x5e
 800b596:	2100      	movs	r1, #0
 800b598:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b59a:	f3ef 8310 	mrs	r3, PRIMASK
 800b59e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5a0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	f383 8810 	msr	PRIMASK, r3
}
 800b5ae:	46c0      	nop			; (mov r8, r8)
 800b5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	493a      	ldr	r1, [pc, #232]	; (800b6a4 <UART_DMAReceiveCplt+0x12c>)
 800b5bc:	400a      	ands	r2, r1
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	f383 8810 	msr	PRIMASK, r3
}
 800b5ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5dc:	f383 8810 	msr	PRIMASK, r3
}
 800b5e0:	46c0      	nop			; (mov r8, r8)
 800b5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	438a      	bics	r2, r1
 800b5f0:	609a      	str	r2, [r3, #8]
 800b5f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	f383 8810 	msr	PRIMASK, r3
}
 800b5fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b602:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b604:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b606:	643b      	str	r3, [r7, #64]	; 0x40
 800b608:	2301      	movs	r3, #1
 800b60a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60e:	f383 8810 	msr	PRIMASK, r3
}
 800b612:	46c0      	nop			; (mov r8, r8)
 800b614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689a      	ldr	r2, [r3, #8]
 800b61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2140      	movs	r1, #64	; 0x40
 800b620:	438a      	bics	r2, r1
 800b622:	609a      	str	r2, [r3, #8]
 800b624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b626:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	f383 8810 	msr	PRIMASK, r3
}
 800b62e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b632:	228c      	movs	r2, #140	; 0x8c
 800b634:	2120      	movs	r1, #32
 800b636:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d118      	bne.n	800b672 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b640:	f3ef 8310 	mrs	r3, PRIMASK
 800b644:	60fb      	str	r3, [r7, #12]
  return(result);
 800b646:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b64a:	2301      	movs	r3, #1
 800b64c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f383 8810 	msr	PRIMASK, r3
}
 800b654:	46c0      	nop			; (mov r8, r8)
 800b656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2110      	movs	r1, #16
 800b662:	438a      	bics	r2, r1
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f383 8810 	msr	PRIMASK, r3
}
 800b670:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b674:	2200      	movs	r2, #0
 800b676:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d108      	bne.n	800b692 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b682:	225c      	movs	r2, #92	; 0x5c
 800b684:	5a9a      	ldrh	r2, [r3, r2]
 800b686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b688:	0011      	movs	r1, r2
 800b68a:	0018      	movs	r0, r3
 800b68c:	f7ff faae 	bl	800abec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b690:	e003      	b.n	800b69a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b694:	0018      	movs	r0, r3
 800b696:	f7ff fa91 	bl	800abbc <HAL_UART_RxCpltCallback>
}
 800b69a:	46c0      	nop			; (mov r8, r8)
 800b69c:	46bd      	mov	sp, r7
 800b69e:	b014      	add	sp, #80	; 0x50
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	46c0      	nop			; (mov r8, r8)
 800b6a4:	fffffeff 	.word	0xfffffeff

0800b6a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d10a      	bne.n	800b6da <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	225c      	movs	r2, #92	; 0x5c
 800b6c8:	5a9b      	ldrh	r3, [r3, r2]
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	0011      	movs	r1, r2
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f7ff fa8a 	bl	800abec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6d8:	e003      	b.n	800b6e2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	0018      	movs	r0, r3
 800b6de:	f7ff fa75 	bl	800abcc <HAL_UART_RxHalfCpltCallback>
}
 800b6e2:	46c0      	nop			; (mov r8, r8)
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b004      	add	sp, #16
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b086      	sub	sp, #24
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	2288      	movs	r2, #136	; 0x88
 800b6fc:	589b      	ldr	r3, [r3, r2]
 800b6fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	228c      	movs	r2, #140	; 0x8c
 800b704:	589b      	ldr	r3, [r3, r2]
 800b706:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	2280      	movs	r2, #128	; 0x80
 800b710:	4013      	ands	r3, r2
 800b712:	2b80      	cmp	r3, #128	; 0x80
 800b714:	d10a      	bne.n	800b72c <UART_DMAError+0x42>
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2b21      	cmp	r3, #33	; 0x21
 800b71a:	d107      	bne.n	800b72c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2256      	movs	r2, #86	; 0x56
 800b720:	2100      	movs	r1, #0
 800b722:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	0018      	movs	r0, r3
 800b728:	f7ff fe80 	bl	800b42c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2240      	movs	r2, #64	; 0x40
 800b734:	4013      	ands	r3, r2
 800b736:	2b40      	cmp	r3, #64	; 0x40
 800b738:	d10a      	bne.n	800b750 <UART_DMAError+0x66>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b22      	cmp	r3, #34	; 0x22
 800b73e:	d107      	bne.n	800b750 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	225e      	movs	r2, #94	; 0x5e
 800b744:	2100      	movs	r1, #0
 800b746:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	0018      	movs	r0, r3
 800b74c:	f7ff feae 	bl	800b4ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2290      	movs	r2, #144	; 0x90
 800b754:	589b      	ldr	r3, [r3, r2]
 800b756:	2210      	movs	r2, #16
 800b758:	431a      	orrs	r2, r3
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2190      	movs	r1, #144	; 0x90
 800b75e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	0018      	movs	r0, r3
 800b764:	f7ff fa3a 	bl	800abdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b768:	46c0      	nop			; (mov r8, r8)
 800b76a:	46bd      	mov	sp, r7
 800b76c:	b006      	add	sp, #24
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	225e      	movs	r2, #94	; 0x5e
 800b782:	2100      	movs	r1, #0
 800b784:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2256      	movs	r2, #86	; 0x56
 800b78a:	2100      	movs	r1, #0
 800b78c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	0018      	movs	r0, r3
 800b792:	f7ff fa23 	bl	800abdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b796:	46c0      	nop			; (mov r8, r8)
 800b798:	46bd      	mov	sp, r7
 800b79a:	b004      	add	sp, #16
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b08a      	sub	sp, #40	; 0x28
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2288      	movs	r2, #136	; 0x88
 800b7aa:	589b      	ldr	r3, [r3, r2]
 800b7ac:	2b21      	cmp	r3, #33	; 0x21
 800b7ae:	d14c      	bne.n	800b84a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2256      	movs	r2, #86	; 0x56
 800b7b4:	5a9b      	ldrh	r3, [r3, r2]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d132      	bne.n	800b822 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b7c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b7c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f383 8810 	msr	PRIMASK, r3
}
 800b7d0:	46c0      	nop			; (mov r8, r8)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2180      	movs	r1, #128	; 0x80
 800b7de:	438a      	bics	r2, r1
 800b7e0:	601a      	str	r2, [r3, #0]
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f383 8810 	msr	PRIMASK, r3
}
 800b7ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f2:	617b      	str	r3, [r7, #20]
  return(result);
 800b7f4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7f6:	623b      	str	r3, [r7, #32]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	f383 8810 	msr	PRIMASK, r3
}
 800b802:	46c0      	nop			; (mov r8, r8)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2140      	movs	r1, #64	; 0x40
 800b810:	430a      	orrs	r2, r1
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	f383 8810 	msr	PRIMASK, r3
}
 800b81e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b820:	e013      	b.n	800b84a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b826:	781a      	ldrb	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b832:	1c5a      	adds	r2, r3, #1
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2256      	movs	r2, #86	; 0x56
 800b83c:	5a9b      	ldrh	r3, [r3, r2]
 800b83e:	b29b      	uxth	r3, r3
 800b840:	3b01      	subs	r3, #1
 800b842:	b299      	uxth	r1, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2256      	movs	r2, #86	; 0x56
 800b848:	5299      	strh	r1, [r3, r2]
}
 800b84a:	46c0      	nop			; (mov r8, r8)
 800b84c:	46bd      	mov	sp, r7
 800b84e:	b00a      	add	sp, #40	; 0x28
 800b850:	bd80      	pop	{r7, pc}

0800b852 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b08c      	sub	sp, #48	; 0x30
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2288      	movs	r2, #136	; 0x88
 800b85e:	589b      	ldr	r3, [r3, r2]
 800b860:	2b21      	cmp	r3, #33	; 0x21
 800b862:	d151      	bne.n	800b908 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2256      	movs	r2, #86	; 0x56
 800b868:	5a9b      	ldrh	r3, [r3, r2]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d132      	bne.n	800b8d6 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b870:	f3ef 8310 	mrs	r3, PRIMASK
 800b874:	60fb      	str	r3, [r7, #12]
  return(result);
 800b876:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b878:	62bb      	str	r3, [r7, #40]	; 0x28
 800b87a:	2301      	movs	r3, #1
 800b87c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f383 8810 	msr	PRIMASK, r3
}
 800b884:	46c0      	nop			; (mov r8, r8)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2180      	movs	r1, #128	; 0x80
 800b892:	438a      	bics	r2, r1
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f383 8810 	msr	PRIMASK, r3
}
 800b8a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8a8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f383 8810 	msr	PRIMASK, r3
}
 800b8b6:	46c0      	nop			; (mov r8, r8)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2140      	movs	r1, #64	; 0x40
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	f383 8810 	msr	PRIMASK, r3
}
 800b8d2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b8d4:	e018      	b.n	800b908 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	001a      	movs	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	05d2      	lsls	r2, r2, #23
 800b8e8:	0dd2      	lsrs	r2, r2, #23
 800b8ea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8f0:	1c9a      	adds	r2, r3, #2
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2256      	movs	r2, #86	; 0x56
 800b8fa:	5a9b      	ldrh	r3, [r3, r2]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	3b01      	subs	r3, #1
 800b900:	b299      	uxth	r1, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2256      	movs	r2, #86	; 0x56
 800b906:	5299      	strh	r1, [r3, r2]
}
 800b908:	46c0      	nop			; (mov r8, r8)
 800b90a:	46bd      	mov	sp, r7
 800b90c:	b00c      	add	sp, #48	; 0x30
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08c      	sub	sp, #48	; 0x30
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2288      	movs	r2, #136	; 0x88
 800b91c:	589b      	ldr	r3, [r3, r2]
 800b91e:	2b21      	cmp	r3, #33	; 0x21
 800b920:	d165      	bne.n	800b9ee <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b922:	232e      	movs	r3, #46	; 0x2e
 800b924:	18fb      	adds	r3, r7, r3
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	216a      	movs	r1, #106	; 0x6a
 800b92a:	5a52      	ldrh	r2, [r2, r1]
 800b92c:	801a      	strh	r2, [r3, #0]
 800b92e:	e059      	b.n	800b9e4 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2256      	movs	r2, #86	; 0x56
 800b934:	5a9b      	ldrh	r3, [r3, r2]
 800b936:	b29b      	uxth	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d133      	bne.n	800b9a4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b93c:	f3ef 8310 	mrs	r3, PRIMASK
 800b940:	60fb      	str	r3, [r7, #12]
  return(result);
 800b942:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b944:	62bb      	str	r3, [r7, #40]	; 0x28
 800b946:	2301      	movs	r3, #1
 800b948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f383 8810 	msr	PRIMASK, r3
}
 800b950:	46c0      	nop			; (mov r8, r8)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689a      	ldr	r2, [r3, #8]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4926      	ldr	r1, [pc, #152]	; (800b9f8 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800b95e:	400a      	ands	r2, r1
 800b960:	609a      	str	r2, [r3, #8]
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f383 8810 	msr	PRIMASK, r3
}
 800b96c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b96e:	f3ef 8310 	mrs	r3, PRIMASK
 800b972:	61bb      	str	r3, [r7, #24]
  return(result);
 800b974:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b976:	627b      	str	r3, [r7, #36]	; 0x24
 800b978:	2301      	movs	r3, #1
 800b97a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f383 8810 	msr	PRIMASK, r3
}
 800b982:	46c0      	nop			; (mov r8, r8)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2140      	movs	r1, #64	; 0x40
 800b990:	430a      	orrs	r2, r1
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	f383 8810 	msr	PRIMASK, r3
}
 800b99e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b9a0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b9a2:	e024      	b.n	800b9ee <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	2280      	movs	r2, #128	; 0x80
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	d013      	beq.n	800b9d8 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b4:	781a      	ldrb	r2, [r3, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2256      	movs	r2, #86	; 0x56
 800b9ca:	5a9b      	ldrh	r3, [r3, r2]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	b299      	uxth	r1, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2256      	movs	r2, #86	; 0x56
 800b9d6:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b9d8:	212e      	movs	r1, #46	; 0x2e
 800b9da:	187b      	adds	r3, r7, r1
 800b9dc:	881a      	ldrh	r2, [r3, #0]
 800b9de:	187b      	adds	r3, r7, r1
 800b9e0:	3a01      	subs	r2, #1
 800b9e2:	801a      	strh	r2, [r3, #0]
 800b9e4:	232e      	movs	r3, #46	; 0x2e
 800b9e6:	18fb      	adds	r3, r7, r3
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1a0      	bne.n	800b930 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800b9ee:	46c0      	nop			; (mov r8, r8)
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	b00c      	add	sp, #48	; 0x30
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	ff7fffff 	.word	0xff7fffff

0800b9fc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08c      	sub	sp, #48	; 0x30
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2288      	movs	r2, #136	; 0x88
 800ba08:	589b      	ldr	r3, [r3, r2]
 800ba0a:	2b21      	cmp	r3, #33	; 0x21
 800ba0c:	d16a      	bne.n	800bae4 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba0e:	232e      	movs	r3, #46	; 0x2e
 800ba10:	18fb      	adds	r3, r7, r3
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	216a      	movs	r1, #106	; 0x6a
 800ba16:	5a52      	ldrh	r2, [r2, r1]
 800ba18:	801a      	strh	r2, [r3, #0]
 800ba1a:	e05e      	b.n	800bada <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2256      	movs	r2, #86	; 0x56
 800ba20:	5a9b      	ldrh	r3, [r3, r2]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d133      	bne.n	800ba90 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba28:	f3ef 8310 	mrs	r3, PRIMASK
 800ba2c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba2e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ba30:	627b      	str	r3, [r7, #36]	; 0x24
 800ba32:	2301      	movs	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f383 8810 	msr	PRIMASK, r3
}
 800ba3c:	46c0      	nop			; (mov r8, r8)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	689a      	ldr	r2, [r3, #8]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4928      	ldr	r1, [pc, #160]	; (800baec <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800ba4a:	400a      	ands	r2, r1
 800ba4c:	609a      	str	r2, [r3, #8]
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	f383 8810 	msr	PRIMASK, r3
}
 800ba58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba5e:	617b      	str	r3, [r7, #20]
  return(result);
 800ba60:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba62:	623b      	str	r3, [r7, #32]
 800ba64:	2301      	movs	r3, #1
 800ba66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	f383 8810 	msr	PRIMASK, r3
}
 800ba6e:	46c0      	nop			; (mov r8, r8)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2140      	movs	r1, #64	; 0x40
 800ba7c:	430a      	orrs	r2, r1
 800ba7e:	601a      	str	r2, [r3, #0]
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	f383 8810 	msr	PRIMASK, r3
}
 800ba8a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800ba8c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800ba8e:	e029      	b.n	800bae4 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	2280      	movs	r2, #128	; 0x80
 800ba98:	4013      	ands	r3, r2
 800ba9a:	d018      	beq.n	800bace <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa0:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa4:	881b      	ldrh	r3, [r3, #0]
 800baa6:	001a      	movs	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	05d2      	lsls	r2, r2, #23
 800baae:	0dd2      	lsrs	r2, r2, #23
 800bab0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab6:	1c9a      	adds	r2, r3, #2
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2256      	movs	r2, #86	; 0x56
 800bac0:	5a9b      	ldrh	r3, [r3, r2]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b299      	uxth	r1, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2256      	movs	r2, #86	; 0x56
 800bacc:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bace:	212e      	movs	r1, #46	; 0x2e
 800bad0:	187b      	adds	r3, r7, r1
 800bad2:	881a      	ldrh	r2, [r3, #0]
 800bad4:	187b      	adds	r3, r7, r1
 800bad6:	3a01      	subs	r2, #1
 800bad8:	801a      	strh	r2, [r3, #0]
 800bada:	232e      	movs	r3, #46	; 0x2e
 800badc:	18fb      	adds	r3, r7, r3
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d19b      	bne.n	800ba1c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800bae4:	46c0      	nop			; (mov r8, r8)
 800bae6:	46bd      	mov	sp, r7
 800bae8:	b00c      	add	sp, #48	; 0x30
 800baea:	bd80      	pop	{r7, pc}
 800baec:	ff7fffff 	.word	0xff7fffff

0800baf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baf8:	f3ef 8310 	mrs	r3, PRIMASK
 800bafc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bafe:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	2301      	movs	r3, #1
 800bb04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f383 8810 	msr	PRIMASK, r3
}
 800bb0c:	46c0      	nop			; (mov r8, r8)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2140      	movs	r1, #64	; 0x40
 800bb1a:	438a      	bics	r2, r1
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f383 8810 	msr	PRIMASK, r3
}
 800bb28:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2288      	movs	r2, #136	; 0x88
 800bb2e:	2120      	movs	r1, #32
 800bb30:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	f7ff f836 	bl	800abac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb40:	46c0      	nop			; (mov r8, r8)
 800bb42:	46bd      	mov	sp, r7
 800bb44:	b006      	add	sp, #24
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e05d      	b.n	800bc1c <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2288      	movs	r2, #136	; 0x88
 800bb64:	589b      	ldr	r3, [r3, r2]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d107      	bne.n	800bb7a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2284      	movs	r2, #132	; 0x84
 800bb6e:	2100      	movs	r1, #0
 800bb70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	0018      	movs	r0, r3
 800bb76:	f7f9 f837 	bl	8004be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2288      	movs	r2, #136	; 0x88
 800bb7e:	2124      	movs	r1, #36	; 0x24
 800bb80:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	438a      	bics	r2, r1
 800bb90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	0018      	movs	r0, r3
 800bb96:	f7ff f835 	bl	800ac04 <UART_SetConfig>
 800bb9a:	0003      	movs	r3, r0
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d101      	bne.n	800bba4 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e03b      	b.n	800bc1c <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	0018      	movs	r0, r3
 800bbb0:	f7ff f9cc 	bl	800af4c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2180      	movs	r1, #128	; 0x80
 800bbc0:	01c9      	lsls	r1, r1, #7
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	4a15      	ldr	r2, [pc, #84]	; (800bc24 <HAL_RS485Ex_Init+0xdc>)
 800bbce:	4013      	ands	r3, r2
 800bbd0:	0019      	movs	r1, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	055b      	lsls	r3, r3, #21
 800bbe0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	041b      	lsls	r3, r3, #16
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a0d      	ldr	r2, [pc, #52]	; (800bc28 <HAL_RS485Ex_Init+0xe0>)
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	0019      	movs	r1, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	0018      	movs	r0, r3
 800bc16:	f7ff fa4d 	bl	800b0b4 <UART_CheckIdleState>
 800bc1a:	0003      	movs	r3, r0
}
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	b006      	add	sp, #24
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	ffff7fff 	.word	0xffff7fff
 800bc28:	fc00ffff 	.word	0xfc00ffff

0800bc2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc34:	46c0      	nop			; (mov r8, r8)
 800bc36:	46bd      	mov	sp, r7
 800bc38:	b002      	add	sp, #8
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc44:	46c0      	nop			; (mov r8, r8)
 800bc46:	46bd      	mov	sp, r7
 800bc48:	b002      	add	sp, #8
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc54:	46c0      	nop			; (mov r8, r8)
 800bc56:	46bd      	mov	sp, r7
 800bc58:	b002      	add	sp, #8
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2284      	movs	r2, #132	; 0x84
 800bc68:	5c9b      	ldrb	r3, [r3, r2]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d101      	bne.n	800bc72 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc6e:	2302      	movs	r3, #2
 800bc70:	e027      	b.n	800bcc2 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2284      	movs	r2, #132	; 0x84
 800bc76:	2101      	movs	r1, #1
 800bc78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2288      	movs	r2, #136	; 0x88
 800bc7e:	2124      	movs	r1, #36	; 0x24
 800bc80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2101      	movs	r1, #1
 800bc96:	438a      	bics	r2, r1
 800bc98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4a0b      	ldr	r2, [pc, #44]	; (800bccc <HAL_UARTEx_DisableFifoMode+0x70>)
 800bc9e:	4013      	ands	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2288      	movs	r2, #136	; 0x88
 800bcb4:	2120      	movs	r1, #32
 800bcb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2284      	movs	r2, #132	; 0x84
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	b004      	add	sp, #16
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	dfffffff 	.word	0xdfffffff

0800bcd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2284      	movs	r2, #132	; 0x84
 800bcde:	5c9b      	ldrb	r3, [r3, r2]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d101      	bne.n	800bce8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bce4:	2302      	movs	r3, #2
 800bce6:	e02e      	b.n	800bd46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2284      	movs	r2, #132	; 0x84
 800bcec:	2101      	movs	r1, #1
 800bcee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2288      	movs	r2, #136	; 0x88
 800bcf4:	2124      	movs	r1, #36	; 0x24
 800bcf6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	438a      	bics	r2, r1
 800bd0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	08d9      	lsrs	r1, r3, #3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	0018      	movs	r0, r3
 800bd28:	f000 f854 	bl	800bdd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2288      	movs	r2, #136	; 0x88
 800bd38:	2120      	movs	r1, #32
 800bd3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2284      	movs	r2, #132	; 0x84
 800bd40:	2100      	movs	r1, #0
 800bd42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	0018      	movs	r0, r3
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	b004      	add	sp, #16
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2284      	movs	r2, #132	; 0x84
 800bd5e:	5c9b      	ldrb	r3, [r3, r2]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d101      	bne.n	800bd68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd64:	2302      	movs	r3, #2
 800bd66:	e02f      	b.n	800bdc8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2284      	movs	r2, #132	; 0x84
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2288      	movs	r2, #136	; 0x88
 800bd74:	2124      	movs	r1, #36	; 0x24
 800bd76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	438a      	bics	r2, r1
 800bd8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	4a0e      	ldr	r2, [pc, #56]	; (800bdd0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	0019      	movs	r1, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	0018      	movs	r0, r3
 800bdaa:	f000 f813 	bl	800bdd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2288      	movs	r2, #136	; 0x88
 800bdba:	2120      	movs	r1, #32
 800bdbc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2284      	movs	r2, #132	; 0x84
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	0018      	movs	r0, r3
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	b004      	add	sp, #16
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	f1ffffff 	.word	0xf1ffffff

0800bdd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d108      	bne.n	800bdf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	226a      	movs	r2, #106	; 0x6a
 800bde8:	2101      	movs	r1, #1
 800bdea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2268      	movs	r2, #104	; 0x68
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdf4:	e043      	b.n	800be7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdf6:	260f      	movs	r6, #15
 800bdf8:	19bb      	adds	r3, r7, r6
 800bdfa:	2208      	movs	r2, #8
 800bdfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdfe:	200e      	movs	r0, #14
 800be00:	183b      	adds	r3, r7, r0
 800be02:	2208      	movs	r2, #8
 800be04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	0e5b      	lsrs	r3, r3, #25
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	240d      	movs	r4, #13
 800be12:	193b      	adds	r3, r7, r4
 800be14:	2107      	movs	r1, #7
 800be16:	400a      	ands	r2, r1
 800be18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	0f5b      	lsrs	r3, r3, #29
 800be22:	b2da      	uxtb	r2, r3
 800be24:	250c      	movs	r5, #12
 800be26:	197b      	adds	r3, r7, r5
 800be28:	2107      	movs	r1, #7
 800be2a:	400a      	ands	r2, r1
 800be2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be2e:	183b      	adds	r3, r7, r0
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	197a      	adds	r2, r7, r5
 800be34:	7812      	ldrb	r2, [r2, #0]
 800be36:	4914      	ldr	r1, [pc, #80]	; (800be88 <UARTEx_SetNbDataToProcess+0xb4>)
 800be38:	5c8a      	ldrb	r2, [r1, r2]
 800be3a:	435a      	muls	r2, r3
 800be3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800be3e:	197b      	adds	r3, r7, r5
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	4a12      	ldr	r2, [pc, #72]	; (800be8c <UARTEx_SetNbDataToProcess+0xb8>)
 800be44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be46:	0019      	movs	r1, r3
 800be48:	f7f4 fa0a 	bl	8000260 <__divsi3>
 800be4c:	0003      	movs	r3, r0
 800be4e:	b299      	uxth	r1, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	226a      	movs	r2, #106	; 0x6a
 800be54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be56:	19bb      	adds	r3, r7, r6
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	193a      	adds	r2, r7, r4
 800be5c:	7812      	ldrb	r2, [r2, #0]
 800be5e:	490a      	ldr	r1, [pc, #40]	; (800be88 <UARTEx_SetNbDataToProcess+0xb4>)
 800be60:	5c8a      	ldrb	r2, [r1, r2]
 800be62:	435a      	muls	r2, r3
 800be64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800be66:	193b      	adds	r3, r7, r4
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	4a08      	ldr	r2, [pc, #32]	; (800be8c <UARTEx_SetNbDataToProcess+0xb8>)
 800be6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be6e:	0019      	movs	r1, r3
 800be70:	f7f4 f9f6 	bl	8000260 <__divsi3>
 800be74:	0003      	movs	r3, r0
 800be76:	b299      	uxth	r1, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2268      	movs	r2, #104	; 0x68
 800be7c:	5299      	strh	r1, [r3, r2]
}
 800be7e:	46c0      	nop			; (mov r8, r8)
 800be80:	46bd      	mov	sp, r7
 800be82:	b005      	add	sp, #20
 800be84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be86:	46c0      	nop			; (mov r8, r8)
 800be88:	08018838 	.word	0x08018838
 800be8c:	08018840 	.word	0x08018840

0800be90 <AT_25_init>:
	else return 0xff;

}

void AT_25_init(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
	uint8_t buffer[1]={0};
 800be96:	1d3b      	adds	r3, r7, #4
 800be98:	4a31      	ldr	r2, [pc, #196]	; (800bf60 <AT_25_init+0xd0>)
 800be9a:	7812      	ldrb	r2, [r2, #0]
 800be9c:	701a      	strb	r2, [r3, #0]
	uint8_t RDY=0x01;
 800be9e:	1dfb      	adds	r3, r7, #7
 800bea0:	2201      	movs	r2, #1
 800bea2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1
 800bea4:	4b2f      	ldr	r3, [pc, #188]	; (800bf64 <AT_25_init+0xd4>)
 800bea6:	2201      	movs	r2, #1
 800bea8:	2101      	movs	r1, #1
 800beaa:	0018      	movs	r0, r3
 800beac:	f7fb f841 	bl	8006f32 <HAL_GPIO_WritePin>
	AT25CS_LOW;
 800beb0:	4b2c      	ldr	r3, [pc, #176]	; (800bf64 <AT_25_init+0xd4>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	2108      	movs	r1, #8
 800beb6:	0018      	movs	r0, r3
 800beb8:	f7fb f83b 	bl	8006f32 <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800bebc:	1d3b      	adds	r3, r7, #4
 800bebe:	2206      	movs	r2, #6
 800bec0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800bec2:	23fa      	movs	r3, #250	; 0xfa
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	1d39      	adds	r1, r7, #4
 800bec8:	4827      	ldr	r0, [pc, #156]	; (800bf68 <AT_25_init+0xd8>)
 800beca:	2201      	movs	r2, #1
 800becc:	f7fb ff40 	bl	8007d50 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800bed0:	1d3b      	adds	r3, r7, #4
 800bed2:	2201      	movs	r2, #1
 800bed4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800bed6:	23fa      	movs	r3, #250	; 0xfa
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	1d39      	adds	r1, r7, #4
 800bedc:	4822      	ldr	r0, [pc, #136]	; (800bf68 <AT_25_init+0xd8>)
 800bede:	2201      	movs	r2, #1
 800bee0:	f7fb ff36 	bl	8007d50 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800bee4:	1d3b      	adds	r3, r7, #4
 800bee6:	22f2      	movs	r2, #242	; 0xf2
 800bee8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800beea:	23fa      	movs	r3, #250	; 0xfa
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	1d39      	adds	r1, r7, #4
 800bef0:	481d      	ldr	r0, [pc, #116]	; (800bf68 <AT_25_init+0xd8>)
 800bef2:	2201      	movs	r2, #1
 800bef4:	f7fb ff2c 	bl	8007d50 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800bef8:	4b1a      	ldr	r3, [pc, #104]	; (800bf64 <AT_25_init+0xd4>)
 800befa:	2201      	movs	r2, #1
 800befc:	2108      	movs	r1, #8
 800befe:	0018      	movs	r0, r3
 800bf00:	f7fb f817 	bl	8006f32 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800bf04:	2001      	movs	r0, #1
 800bf06:	f7f9 f96f 	bl	80051e8 <HAL_Delay>
	//wait for AT25 ready
	do
	{
		AT25CS_LOW;
 800bf0a:	4b16      	ldr	r3, [pc, #88]	; (800bf64 <AT_25_init+0xd4>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2108      	movs	r1, #8
 800bf10:	0018      	movs	r0, r3
 800bf12:	f7fb f80e 	bl	8006f32 <HAL_GPIO_WritePin>
		buffer[0]=AT25_RDSR;
 800bf16:	1d3b      	adds	r3, r7, #4
 800bf18:	2205      	movs	r2, #5
 800bf1a:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800bf1c:	23fa      	movs	r3, #250	; 0xfa
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	1d39      	adds	r1, r7, #4
 800bf22:	4811      	ldr	r0, [pc, #68]	; (800bf68 <AT_25_init+0xd8>)
 800bf24:	2201      	movs	r2, #1
 800bf26:	f7fb ff13 	bl	8007d50 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1,buffer,1,1000);
 800bf2a:	23fa      	movs	r3, #250	; 0xfa
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	1d39      	adds	r1, r7, #4
 800bf30:	480d      	ldr	r0, [pc, #52]	; (800bf68 <AT_25_init+0xd8>)
 800bf32:	2201      	movs	r2, #1
 800bf34:	f7fc f864 	bl	8008000 <HAL_SPI_Receive>
		AT25CS_HIGH;
 800bf38:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <AT_25_init+0xd4>)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	2108      	movs	r1, #8
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f7fa fff7 	bl	8006f32 <HAL_GPIO_WritePin>
		RDY=buffer[0];
 800bf44:	1dfb      	adds	r3, r7, #7
 800bf46:	1d3a      	adds	r2, r7, #4
 800bf48:	7812      	ldrb	r2, [r2, #0]
 800bf4a:	701a      	strb	r2, [r3, #0]
	}
	while((RDY&0x01) == 1);
 800bf4c:	1dfb      	adds	r3, r7, #7
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2201      	movs	r2, #1
 800bf52:	4013      	ands	r3, r2
 800bf54:	d1d9      	bne.n	800bf0a <AT_25_init+0x7a>


}
 800bf56:	46c0      	nop			; (mov r8, r8)
 800bf58:	46c0      	nop			; (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b002      	add	sp, #8
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	080183f0 	.word	0x080183f0
 800bf64:	50000800 	.word	0x50000800
 800bf68:	200033c8 	.word	0x200033c8

0800bf6c <SPI_Save_Word_16bits>:
 * @param  data，要存入的数据
 * @param  addr，要存入的地址
 * @retval 无
 */
void SPI_Save_Word_16bits(uint16_t data,uint8_t addr)
{
 800bf6c:	b590      	push	{r4, r7, lr}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	0002      	movs	r2, r0
 800bf74:	1dbb      	adds	r3, r7, #6
 800bf76:	801a      	strh	r2, [r3, #0]
 800bf78:	1d7b      	adds	r3, r7, #5
 800bf7a:	1c0a      	adds	r2, r1, #0
 800bf7c:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[1]={0};
 800bf7e:	240c      	movs	r4, #12
 800bf80:	193b      	adds	r3, r7, r4
 800bf82:	4a3a      	ldr	r2, [pc, #232]	; (800c06c <SPI_Save_Word_16bits+0x100>)
 800bf84:	7812      	ldrb	r2, [r2, #0]
 800bf86:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd off
 800bf88:	4b39      	ldr	r3, [pc, #228]	; (800c070 <SPI_Save_Word_16bits+0x104>)
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	0018      	movs	r0, r3
 800bf90:	f7fa ffcf 	bl	8006f32 <HAL_GPIO_WritePin>
	/*AT25 config*/
	AT25CS_LOW;
 800bf94:	4b36      	ldr	r3, [pc, #216]	; (800c070 <SPI_Save_Word_16bits+0x104>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	2108      	movs	r1, #8
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	f7fa ffc9 	bl	8006f32 <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800bfa0:	193b      	adds	r3, r7, r4
 800bfa2:	2206      	movs	r2, #6
 800bfa4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800bfa6:	23fa      	movs	r3, #250	; 0xfa
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	1939      	adds	r1, r7, r4
 800bfac:	4831      	ldr	r0, [pc, #196]	; (800c074 <SPI_Save_Word_16bits+0x108>)
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f7fb fece 	bl	8007d50 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800bfb4:	193b      	adds	r3, r7, r4
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800bfba:	23fa      	movs	r3, #250	; 0xfa
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	1939      	adds	r1, r7, r4
 800bfc0:	482c      	ldr	r0, [pc, #176]	; (800c074 <SPI_Save_Word_16bits+0x108>)
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f7fb fec4 	bl	8007d50 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800bfc8:	193b      	adds	r3, r7, r4
 800bfca:	22f2      	movs	r2, #242	; 0xf2
 800bfcc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800bfce:	23fa      	movs	r3, #250	; 0xfa
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	1939      	adds	r1, r7, r4
 800bfd4:	4827      	ldr	r0, [pc, #156]	; (800c074 <SPI_Save_Word_16bits+0x108>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f7fb feba 	bl	8007d50 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800bfdc:	4b24      	ldr	r3, [pc, #144]	; (800c070 <SPI_Save_Word_16bits+0x104>)
 800bfde:	2201      	movs	r2, #1
 800bfe0:	2108      	movs	r1, #8
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	f7fa ffa5 	bl	8006f32 <HAL_GPIO_WritePin>

	/*16bits data send*/
	AT25CS_LOW;
 800bfe8:	4b21      	ldr	r3, [pc, #132]	; (800c070 <SPI_Save_Word_16bits+0x104>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	2108      	movs	r1, #8
 800bfee:	0018      	movs	r0, r3
 800bff0:	f7fa ff9f 	bl	8006f32 <HAL_GPIO_WritePin>
	buffer[0]=AT25_Write;
 800bff4:	193b      	adds	r3, r7, r4
 800bff6:	2202      	movs	r2, #2
 800bff8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd:write status register
 800bffa:	23fa      	movs	r3, #250	; 0xfa
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	1939      	adds	r1, r7, r4
 800c000:	481c      	ldr	r0, [pc, #112]	; (800c074 <SPI_Save_Word_16bits+0x108>)
 800c002:	2201      	movs	r2, #1
 800c004:	f7fb fea4 	bl	8007d50 <HAL_SPI_Transmit>

	buffer[0]=addr;
 800c008:	193b      	adds	r3, r7, r4
 800c00a:	1d7a      	adds	r2, r7, #5
 800c00c:	7812      	ldrb	r2, [r2, #0]
 800c00e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//adress
 800c010:	23fa      	movs	r3, #250	; 0xfa
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	1939      	adds	r1, r7, r4
 800c016:	4817      	ldr	r0, [pc, #92]	; (800c074 <SPI_Save_Word_16bits+0x108>)
 800c018:	2201      	movs	r2, #1
 800c01a:	f7fb fe99 	bl	8007d50 <HAL_SPI_Transmit>

	buffer[0]=(data>>8);
 800c01e:	1dbb      	adds	r3, r7, #6
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	0a1b      	lsrs	r3, r3, #8
 800c024:	b29b      	uxth	r3, r3
 800c026:	b2da      	uxtb	r2, r3
 800c028:	193b      	adds	r3, r7, r4
 800c02a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data high
 800c02c:	23fa      	movs	r3, #250	; 0xfa
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	1939      	adds	r1, r7, r4
 800c032:	4810      	ldr	r0, [pc, #64]	; (800c074 <SPI_Save_Word_16bits+0x108>)
 800c034:	2201      	movs	r2, #1
 800c036:	f7fb fe8b 	bl	8007d50 <HAL_SPI_Transmit>

	buffer[0]=data;
 800c03a:	1dbb      	adds	r3, r7, #6
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	193b      	adds	r3, r7, r4
 800c042:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data low
 800c044:	23fa      	movs	r3, #250	; 0xfa
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	1939      	adds	r1, r7, r4
 800c04a:	480a      	ldr	r0, [pc, #40]	; (800c074 <SPI_Save_Word_16bits+0x108>)
 800c04c:	2201      	movs	r2, #1
 800c04e:	f7fb fe7f 	bl	8007d50 <HAL_SPI_Transmit>
	AT25CS_HIGH;
 800c052:	4b07      	ldr	r3, [pc, #28]	; (800c070 <SPI_Save_Word_16bits+0x104>)
 800c054:	2201      	movs	r2, #1
 800c056:	2108      	movs	r1, #8
 800c058:	0018      	movs	r0, r3
 800c05a:	f7fa ff6a 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800c05e:	2001      	movs	r0, #1
 800c060:	f7f9 f8c2 	bl	80051e8 <HAL_Delay>
}
 800c064:	46c0      	nop			; (mov r8, r8)
 800c066:	46bd      	mov	sp, r7
 800c068:	b005      	add	sp, #20
 800c06a:	bd90      	pop	{r4, r7, pc}
 800c06c:	080183f0 	.word	0x080183f0
 800c070:	50000800 	.word	0x50000800
 800c074:	200033c8 	.word	0x200033c8

0800c078 <SPI_Load_Word_16bits>:
 * @brief  从at25取出一个长度16bits的数据
 * @param  addr，要取数据的地址
 * @retval 无
 */
uint16_t SPI_Load_Word_16bits(uint8_t addr)
{
 800c078:	b5b0      	push	{r4, r5, r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	0002      	movs	r2, r0
 800c080:	1dfb      	adds	r3, r7, #7
 800c082:	701a      	strb	r2, [r3, #0]

	uint16_t tmp=0x00;
 800c084:	250e      	movs	r5, #14
 800c086:	197b      	adds	r3, r7, r5
 800c088:	2200      	movs	r2, #0
 800c08a:	801a      	strh	r2, [r3, #0]

	uint8_t buffer[1];
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1 off
 800c08c:	4b2e      	ldr	r3, [pc, #184]	; (800c148 <SPI_Load_Word_16bits+0xd0>)
 800c08e:	2201      	movs	r2, #1
 800c090:	2101      	movs	r1, #1
 800c092:	0018      	movs	r0, r3
 800c094:	f7fa ff4d 	bl	8006f32 <HAL_GPIO_WritePin>

	/*load word 8bits*/
	AT25CS_LOW;
 800c098:	4b2b      	ldr	r3, [pc, #172]	; (800c148 <SPI_Load_Word_16bits+0xd0>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	2108      	movs	r1, #8
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f7fa ff47 	bl	8006f32 <HAL_GPIO_WritePin>
	buffer[0]=AT25_Read;
 800c0a4:	200c      	movs	r0, #12
 800c0a6:	183b      	adds	r3, r7, r0
 800c0a8:	2203      	movs	r2, #3
 800c0aa:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd
 800c0ac:	23fa      	movs	r3, #250	; 0xfa
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	0004      	movs	r4, r0
 800c0b2:	1839      	adds	r1, r7, r0
 800c0b4:	4825      	ldr	r0, [pc, #148]	; (800c14c <SPI_Load_Word_16bits+0xd4>)
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f7fb fe4a 	bl	8007d50 <HAL_SPI_Transmit>
	buffer[0]=addr;
 800c0bc:	0020      	movs	r0, r4
 800c0be:	183b      	adds	r3, r7, r0
 800c0c0:	1dfa      	adds	r2, r7, #7
 800c0c2:	7812      	ldrb	r2, [r2, #0]
 800c0c4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//address
 800c0c6:	23fa      	movs	r3, #250	; 0xfa
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	0004      	movs	r4, r0
 800c0cc:	1839      	adds	r1, r7, r0
 800c0ce:	481f      	ldr	r0, [pc, #124]	; (800c14c <SPI_Load_Word_16bits+0xd4>)
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f7fb fe3d 	bl	8007d50 <HAL_SPI_Transmit>
	buffer[0]=0x00;//clear the buffer
 800c0d6:	0020      	movs	r0, r4
 800c0d8:	183b      	adds	r3, r7, r0
 800c0da:	2200      	movs	r2, #0
 800c0dc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c0de:	23fa      	movs	r3, #250	; 0xfa
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	0004      	movs	r4, r0
 800c0e4:	1839      	adds	r1, r7, r0
 800c0e6:	4819      	ldr	r0, [pc, #100]	; (800c14c <SPI_Load_Word_16bits+0xd4>)
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f7fb ff89 	bl	8008000 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c0ee:	0020      	movs	r0, r4
 800c0f0:	183b      	adds	r3, r7, r0
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	b299      	uxth	r1, r3
 800c0f6:	197b      	adds	r3, r7, r5
 800c0f8:	197a      	adds	r2, r7, r5
 800c0fa:	8812      	ldrh	r2, [r2, #0]
 800c0fc:	430a      	orrs	r2, r1
 800c0fe:	801a      	strh	r2, [r3, #0]
	tmp<<=8;
 800c100:	197b      	adds	r3, r7, r5
 800c102:	197a      	adds	r2, r7, r5
 800c104:	8812      	ldrh	r2, [r2, #0]
 800c106:	0212      	lsls	r2, r2, #8
 800c108:	801a      	strh	r2, [r3, #0]
	buffer[0]=0x00;//clear the buffer
 800c10a:	183b      	adds	r3, r7, r0
 800c10c:	2200      	movs	r2, #0
 800c10e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c110:	23fa      	movs	r3, #250	; 0xfa
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	0004      	movs	r4, r0
 800c116:	1839      	adds	r1, r7, r0
 800c118:	480c      	ldr	r0, [pc, #48]	; (800c14c <SPI_Load_Word_16bits+0xd4>)
 800c11a:	2201      	movs	r2, #1
 800c11c:	f7fb ff70 	bl	8008000 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c120:	193b      	adds	r3, r7, r4
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	b299      	uxth	r1, r3
 800c126:	197b      	adds	r3, r7, r5
 800c128:	197a      	adds	r2, r7, r5
 800c12a:	8812      	ldrh	r2, [r2, #0]
 800c12c:	430a      	orrs	r2, r1
 800c12e:	801a      	strh	r2, [r3, #0]
	AT25CS_HIGH;
 800c130:	4b05      	ldr	r3, [pc, #20]	; (800c148 <SPI_Load_Word_16bits+0xd0>)
 800c132:	2201      	movs	r2, #1
 800c134:	2108      	movs	r1, #8
 800c136:	0018      	movs	r0, r3
 800c138:	f7fa fefb 	bl	8006f32 <HAL_GPIO_WritePin>

	return tmp;
 800c13c:	197b      	adds	r3, r7, r5
 800c13e:	881b      	ldrh	r3, [r3, #0]
}
 800c140:	0018      	movs	r0, r3
 800c142:	46bd      	mov	sp, r7
 800c144:	b004      	add	sp, #16
 800c146:	bdb0      	pop	{r4, r5, r7, pc}
 800c148:	50000800 	.word	0x50000800
 800c14c:	200033c8 	.word	0x200033c8

0800c150 <SPI_AT25_Write>:
 * @param  WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度，必须小于等于SPI_FLASH_PerWritePageSize
 * @retval 无
 */
void SPI_AT25_Write(uint16_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	0008      	movs	r0, r1
 800c15a:	0011      	movs	r1, r2
 800c15c:	1cfb      	adds	r3, r7, #3
 800c15e:	1c02      	adds	r2, r0, #0
 800c160:	701a      	strb	r2, [r3, #0]
 800c162:	003b      	movs	r3, r7
 800c164:	1c0a      	adds	r2, r1, #0
 800c166:	801a      	strh	r2, [r3, #0]
	NumByteToWrite = NumByteToWrite/2;
 800c168:	003b      	movs	r3, r7
 800c16a:	003a      	movs	r2, r7
 800c16c:	8812      	ldrh	r2, [r2, #0]
 800c16e:	0852      	lsrs	r2, r2, #1
 800c170:	801a      	strh	r2, [r3, #0]

	 while (NumByteToWrite > 0)
 800c172:	e013      	b.n	800c19c <SPI_AT25_Write+0x4c>
	 {
			SPI_Save_Word_16bits(*pBuffer++, WriteAddr);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	1c9a      	adds	r2, r3, #2
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	881a      	ldrh	r2, [r3, #0]
 800c17c:	1cfb      	adds	r3, r7, #3
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	0019      	movs	r1, r3
 800c182:	0010      	movs	r0, r2
 800c184:	f7ff fef2 	bl	800bf6c <SPI_Save_Word_16bits>
			NumByteToWrite --;
 800c188:	003b      	movs	r3, r7
 800c18a:	881a      	ldrh	r2, [r3, #0]
 800c18c:	003b      	movs	r3, r7
 800c18e:	3a01      	subs	r2, #1
 800c190:	801a      	strh	r2, [r3, #0]
			WriteAddr+=2;
 800c192:	1cfb      	adds	r3, r7, #3
 800c194:	1cfa      	adds	r2, r7, #3
 800c196:	7812      	ldrb	r2, [r2, #0]
 800c198:	3202      	adds	r2, #2
 800c19a:	701a      	strb	r2, [r3, #0]
	 while (NumByteToWrite > 0)
 800c19c:	003b      	movs	r3, r7
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1e7      	bne.n	800c174 <SPI_AT25_Write+0x24>
	 }
}
 800c1a4:	46c0      	nop			; (mov r8, r8)
 800c1a6:	46c0      	nop			; (mov r8, r8)
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	b002      	add	sp, #8
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <SPI_AT25_Read>:
 * @param   ReadAddr，读取地址
 * @param   NumByteToRead，读取数据长度
 * @retval  无
 */
void SPI_AT25_Read(uint16_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800c1ae:	b590      	push	{r4, r7, lr}
 800c1b0:	b083      	sub	sp, #12
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	0008      	movs	r0, r1
 800c1b8:	0011      	movs	r1, r2
 800c1ba:	1cfb      	adds	r3, r7, #3
 800c1bc:	1c02      	adds	r2, r0, #0
 800c1be:	701a      	strb	r2, [r3, #0]
 800c1c0:	003b      	movs	r3, r7
 800c1c2:	1c0a      	adds	r2, r1, #0
 800c1c4:	801a      	strh	r2, [r3, #0]
	NumByteToRead = NumByteToRead/2;
 800c1c6:	003b      	movs	r3, r7
 800c1c8:	003a      	movs	r2, r7
 800c1ca:	8812      	ldrh	r2, [r2, #0]
 800c1cc:	0852      	lsrs	r2, r2, #1
 800c1ce:	801a      	strh	r2, [r3, #0]

	/* 读取数据 */
 while (NumByteToRead > 0) /* while there is data to be read */
 800c1d0:	e013      	b.n	800c1fa <SPI_AT25_Read+0x4c>
 {
		*pBuffer++ = SPI_Load_Word_16bits(ReadAddr);
 800c1d2:	687c      	ldr	r4, [r7, #4]
 800c1d4:	1ca3      	adds	r3, r4, #2
 800c1d6:	607b      	str	r3, [r7, #4]
 800c1d8:	1cfb      	adds	r3, r7, #3
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	0018      	movs	r0, r3
 800c1de:	f7ff ff4b 	bl	800c078 <SPI_Load_Word_16bits>
 800c1e2:	0003      	movs	r3, r0
 800c1e4:	8023      	strh	r3, [r4, #0]
		NumByteToRead--;
 800c1e6:	003b      	movs	r3, r7
 800c1e8:	881a      	ldrh	r2, [r3, #0]
 800c1ea:	003b      	movs	r3, r7
 800c1ec:	3a01      	subs	r2, #1
 800c1ee:	801a      	strh	r2, [r3, #0]
		ReadAddr = ReadAddr + 2;
 800c1f0:	1cfb      	adds	r3, r7, #3
 800c1f2:	1cfa      	adds	r2, r7, #3
 800c1f4:	7812      	ldrb	r2, [r2, #0]
 800c1f6:	3202      	adds	r2, #2
 800c1f8:	701a      	strb	r2, [r3, #0]
 while (NumByteToRead > 0) /* while there is data to be read */
 800c1fa:	003b      	movs	r3, r7
 800c1fc:	881b      	ldrh	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1e7      	bne.n	800c1d2 <SPI_AT25_Read+0x24>
 }


}
 800c202:	46c0      	nop			; (mov r8, r8)
 800c204:	46c0      	nop			; (mov r8, r8)
 800c206:	46bd      	mov	sp, r7
 800c208:	b003      	add	sp, #12
 800c20a:	bd90      	pop	{r4, r7, pc}

0800c20c <AT25_Save_VISet>:
 * @brief  对AT25写入电流电压设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_VISet(void)
{
 800c20c:	b5b0      	push	{r4, r5, r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
	uint16_t temp[3];
	float Power=(Set_Voltage/100.0)*(Set_Current/100.0);
 800c212:	4b1e      	ldr	r3, [pc, #120]	; (800c28c <AT25_Save_VISet+0x80>)
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	0018      	movs	r0, r3
 800c218:	f7f6 fdf4 	bl	8002e04 <__aeabi_i2d>
 800c21c:	2200      	movs	r2, #0
 800c21e:	4b1c      	ldr	r3, [pc, #112]	; (800c290 <AT25_Save_VISet+0x84>)
 800c220:	f7f5 fb9c 	bl	800195c <__aeabi_ddiv>
 800c224:	0002      	movs	r2, r0
 800c226:	000b      	movs	r3, r1
 800c228:	0014      	movs	r4, r2
 800c22a:	001d      	movs	r5, r3
 800c22c:	4b19      	ldr	r3, [pc, #100]	; (800c294 <AT25_Save_VISet+0x88>)
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	0018      	movs	r0, r3
 800c232:	f7f6 fde7 	bl	8002e04 <__aeabi_i2d>
 800c236:	2200      	movs	r2, #0
 800c238:	4b15      	ldr	r3, [pc, #84]	; (800c290 <AT25_Save_VISet+0x84>)
 800c23a:	f7f5 fb8f 	bl	800195c <__aeabi_ddiv>
 800c23e:	0002      	movs	r2, r0
 800c240:	000b      	movs	r3, r1
 800c242:	0020      	movs	r0, r4
 800c244:	0029      	movs	r1, r5
 800c246:	f7f5 ff8b 	bl	8002160 <__aeabi_dmul>
 800c24a:	0002      	movs	r2, r0
 800c24c:	000b      	movs	r3, r1
 800c24e:	0010      	movs	r0, r2
 800c250:	0019      	movs	r1, r3
 800c252:	f7f6 fe75 	bl	8002f40 <__aeabi_d2f>
 800c256:	1c03      	adds	r3, r0, #0
 800c258:	60fb      	str	r3, [r7, #12]
	//将设定值强制类型转换成uint16_t
	temp[0] = (uint16_t) Set_Voltage;
 800c25a:	4b0c      	ldr	r3, [pc, #48]	; (800c28c <AT25_Save_VISet+0x80>)
 800c25c:	881a      	ldrh	r2, [r3, #0]
 800c25e:	1d3b      	adds	r3, r7, #4
 800c260:	801a      	strh	r2, [r3, #0]
	temp[1] = (uint16_t) Set_Current;
 800c262:	4b0c      	ldr	r3, [pc, #48]	; (800c294 <AT25_Save_VISet+0x88>)
 800c264:	881a      	ldrh	r2, [r3, #0]
 800c266:	1d3b      	adds	r3, r7, #4
 800c268:	805a      	strh	r2, [r3, #2]
	temp[2] = (uint16_t) Power;
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7f4 f95c 	bl	8000528 <__aeabi_f2uiz>
 800c270:	0003      	movs	r3, r0
 800c272:	b29a      	uxth	r2, r3
 800c274:	1d3b      	adds	r3, r7, #4
 800c276:	809a      	strh	r2, [r3, #4]

	SPI_AT25_Write(temp, 0, sizeof(temp));
 800c278:	1d3b      	adds	r3, r7, #4
 800c27a:	2206      	movs	r2, #6
 800c27c:	2100      	movs	r1, #0
 800c27e:	0018      	movs	r0, r3
 800c280:	f7ff ff66 	bl	800c150 <SPI_AT25_Write>
}
 800c284:	46c0      	nop			; (mov r8, r8)
 800c286:	46bd      	mov	sp, r7
 800c288:	b004      	add	sp, #16
 800c28a:	bdb0      	pop	{r4, r5, r7, pc}
 800c28c:	20002fd8 	.word	0x20002fd8
 800c290:	40590000 	.word	0x40590000
 800c294:	20002fda 	.word	0x20002fda

0800c298 <AT25_Save_Recall_Save_VI>:
 * @brief  对AT25写入设定的电流电压值
 * @param	Recall_Save的编号
 * @retval 无
 */
void AT25_Save_Recall_Save_VI(uint8_t Number)
{
 800c298:	b590      	push	{r4, r7, lr}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	0002      	movs	r2, r0
 800c2a0:	1dfb      	adds	r3, r7, #7
 800c2a2:	701a      	strb	r2, [r3, #0]
	uint16_t temp;
	//将设定值强制类型转换成uint16_t(保留两位小数)
	temp = (uint16_t) (Recall_Save_Voltage[Number] * 100.0);//保留两位小数
 800c2a4:	1dfb      	adds	r3, r7, #7
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	4b2d      	ldr	r3, [pc, #180]	; (800c360 <AT25_Save_Recall_Save_VI+0xc8>)
 800c2aa:	0092      	lsls	r2, r2, #2
 800c2ac:	58d3      	ldr	r3, [r2, r3]
 800c2ae:	1c18      	adds	r0, r3, #0
 800c2b0:	f7f6 fdfe 	bl	8002eb0 <__aeabi_f2d>
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	4b2b      	ldr	r3, [pc, #172]	; (800c364 <AT25_Save_Recall_Save_VI+0xcc>)
 800c2b8:	f7f5 ff52 	bl	8002160 <__aeabi_dmul>
 800c2bc:	0002      	movs	r2, r0
 800c2be:	000b      	movs	r3, r1
 800c2c0:	0010      	movs	r0, r2
 800c2c2:	0019      	movs	r1, r3
 800c2c4:	f7f4 f948 	bl	8000558 <__aeabi_d2uiz>
 800c2c8:	0003      	movs	r3, r0
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	240e      	movs	r4, #14
 800c2ce:	193b      	adds	r3, r7, r4
 800c2d0:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 6+2*Number,sizeof(temp));//6 7、8 9...24、25
 800c2d2:	1dfb      	adds	r3, r7, #7
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	3303      	adds	r3, #3
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	18db      	adds	r3, r3, r3
 800c2dc:	b2d9      	uxtb	r1, r3
 800c2de:	193b      	adds	r3, r7, r4
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	f7ff ff34 	bl	800c150 <SPI_AT25_Write>

	temp = (uint16_t) (Recall_Save_Current[Number] * 100.0);
 800c2e8:	1dfb      	adds	r3, r7, #7
 800c2ea:	781a      	ldrb	r2, [r3, #0]
 800c2ec:	4b1e      	ldr	r3, [pc, #120]	; (800c368 <AT25_Save_Recall_Save_VI+0xd0>)
 800c2ee:	0092      	lsls	r2, r2, #2
 800c2f0:	58d3      	ldr	r3, [r2, r3]
 800c2f2:	1c18      	adds	r0, r3, #0
 800c2f4:	f7f6 fddc 	bl	8002eb0 <__aeabi_f2d>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	4b1a      	ldr	r3, [pc, #104]	; (800c364 <AT25_Save_Recall_Save_VI+0xcc>)
 800c2fc:	f7f5 ff30 	bl	8002160 <__aeabi_dmul>
 800c300:	0002      	movs	r2, r0
 800c302:	000b      	movs	r3, r1
 800c304:	0010      	movs	r0, r2
 800c306:	0019      	movs	r1, r3
 800c308:	f7f4 f926 	bl	8000558 <__aeabi_d2uiz>
 800c30c:	0003      	movs	r3, r0
 800c30e:	b29a      	uxth	r2, r3
 800c310:	193b      	adds	r3, r7, r4
 800c312:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 26+2*Number,sizeof(temp));//26 27、28 29...44、45
 800c314:	1dfb      	adds	r3, r7, #7
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	330d      	adds	r3, #13
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	18db      	adds	r3, r3, r3
 800c31e:	b2d9      	uxtb	r1, r3
 800c320:	193b      	adds	r3, r7, r4
 800c322:	2202      	movs	r2, #2
 800c324:	0018      	movs	r0, r3
 800c326:	f7ff ff13 	bl	800c150 <SPI_AT25_Write>

	temp=Recall_Save_Power[Number];//W
 800c32a:	1dfb      	adds	r3, r7, #7
 800c32c:	781a      	ldrb	r2, [r3, #0]
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <AT25_Save_Recall_Save_VI+0xd4>)
 800c330:	0092      	lsls	r2, r2, #2
 800c332:	58d3      	ldr	r3, [r2, r3]
 800c334:	1c18      	adds	r0, r3, #0
 800c336:	f7f4 f8f7 	bl	8000528 <__aeabi_f2uiz>
 800c33a:	0003      	movs	r3, r0
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	193b      	adds	r3, r7, r4
 800c340:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 46+2*Number,sizeof(temp));//46、47...64、65
 800c342:	1dfb      	adds	r3, r7, #7
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	3317      	adds	r3, #23
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	18db      	adds	r3, r3, r3
 800c34c:	b2d9      	uxtb	r1, r3
 800c34e:	193b      	adds	r3, r7, r4
 800c350:	2202      	movs	r2, #2
 800c352:	0018      	movs	r0, r3
 800c354:	f7ff fefc 	bl	800c150 <SPI_AT25_Write>

}
 800c358:	46c0      	nop			; (mov r8, r8)
 800c35a:	46bd      	mov	sp, r7
 800c35c:	b005      	add	sp, #20
 800c35e:	bd90      	pop	{r4, r7, pc}
 800c360:	20003a0c 	.word	0x20003a0c
 800c364:	40590000 	.word	0x40590000
 800c368:	20003a34 	.word	0x20003a34
 800c36c:	20003a5c 	.word	0x20003a5c

0800c370 <AT25_Save_Recall_Recall_VI>:



uint16_t AT25_Save_Recall_Recall_VI(uint8_t Number)
{
 800c370:	b590      	push	{r4, r7, lr}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	0002      	movs	r2, r0
 800c378:	1dfb      	adds	r3, r7, #7
 800c37a:	701a      	strb	r2, [r3, #0]

	uint16_t temp;
	if(xyz.coordinates3==1)//V
 800c37c:	4b1b      	ldr	r3, [pc, #108]	; (800c3ec <AT25_Save_Recall_Recall_VI+0x7c>)
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d10e      	bne.n	800c3a2 <AT25_Save_Recall_Recall_VI+0x32>
	{
		SPI_AT25_Read(&temp,6+2*Number,2);
 800c384:	1dfb      	adds	r3, r7, #7
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	3303      	adds	r3, #3
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	18db      	adds	r3, r3, r3
 800c38e:	b2d9      	uxtb	r1, r3
 800c390:	240e      	movs	r4, #14
 800c392:	193b      	adds	r3, r7, r4
 800c394:	2202      	movs	r2, #2
 800c396:	0018      	movs	r0, r3
 800c398:	f7ff ff09 	bl	800c1ae <SPI_AT25_Read>

		return temp;
 800c39c:	193b      	adds	r3, r7, r4
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	e020      	b.n	800c3e4 <AT25_Save_Recall_Recall_VI+0x74>
	}
	else if(xyz.coordinates3==2)//I
 800c3a2:	4b12      	ldr	r3, [pc, #72]	; (800c3ec <AT25_Save_Recall_Recall_VI+0x7c>)
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d10e      	bne.n	800c3c8 <AT25_Save_Recall_Recall_VI+0x58>
	{
		SPI_AT25_Read(&temp,26+2*Number,2);
 800c3aa:	1dfb      	adds	r3, r7, #7
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	330d      	adds	r3, #13
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	18db      	adds	r3, r3, r3
 800c3b4:	b2d9      	uxtb	r1, r3
 800c3b6:	240e      	movs	r4, #14
 800c3b8:	193b      	adds	r3, r7, r4
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	0018      	movs	r0, r3
 800c3be:	f7ff fef6 	bl	800c1ae <SPI_AT25_Read>

		return temp;
 800c3c2:	193b      	adds	r3, r7, r4
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	e00d      	b.n	800c3e4 <AT25_Save_Recall_Recall_VI+0x74>
	}

	SPI_AT25_Read(&temp,46+2*Number,2);//P
 800c3c8:	1dfb      	adds	r3, r7, #7
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	3317      	adds	r3, #23
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	18db      	adds	r3, r3, r3
 800c3d2:	b2d9      	uxtb	r1, r3
 800c3d4:	240e      	movs	r4, #14
 800c3d6:	193b      	adds	r3, r7, r4
 800c3d8:	2202      	movs	r2, #2
 800c3da:	0018      	movs	r0, r3
 800c3dc:	f7ff fee7 	bl	800c1ae <SPI_AT25_Read>
	return temp;
 800c3e0:	193b      	adds	r3, r7, r4
 800c3e2:	881b      	ldrh	r3, [r3, #0]


}
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	b005      	add	sp, #20
 800c3ea:	bd90      	pop	{r4, r7, pc}
 800c3ec:	200039f4 	.word	0x200039f4

0800c3f0 <AT25_Save_Delay>:
 * @brief  对AT25写入延时时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Delay(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
	uint16_t temp[2];

	temp[0] = Delay_s;
 800c3f6:	4b09      	ldr	r3, [pc, #36]	; (800c41c <AT25_Save_Delay+0x2c>)
 800c3f8:	881a      	ldrh	r2, [r3, #0]
 800c3fa:	1d3b      	adds	r3, r7, #4
 800c3fc:	801a      	strh	r2, [r3, #0]
	temp[1] = Delay_ms;
 800c3fe:	4b08      	ldr	r3, [pc, #32]	; (800c420 <AT25_Save_Delay+0x30>)
 800c400:	881a      	ldrh	r2, [r3, #0]
 800c402:	1d3b      	adds	r3, r7, #4
 800c404:	805a      	strh	r2, [r3, #2]


	SPI_AT25_Write((uint16_t*)temp, 78, sizeof(temp));
 800c406:	1d3b      	adds	r3, r7, #4
 800c408:	2204      	movs	r2, #4
 800c40a:	214e      	movs	r1, #78	; 0x4e
 800c40c:	0018      	movs	r0, r3
 800c40e:	f7ff fe9f 	bl	800c150 <SPI_AT25_Write>
}
 800c412:	46c0      	nop			; (mov r8, r8)
 800c414:	46bd      	mov	sp, r7
 800c416:	b002      	add	sp, #8
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	46c0      	nop			; (mov r8, r8)
 800c41c:	20003994 	.word	0x20003994
 800c420:	20003996 	.word	0x20003996

0800c424 <AT25_Save_Cycle>:
 * @brief  对AT25写入循环时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Cycle(void)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
	uint16_t temp[4];

	temp[0] = Cycle_On_s;
 800c42a:	4b0d      	ldr	r3, [pc, #52]	; (800c460 <AT25_Save_Cycle+0x3c>)
 800c42c:	881a      	ldrh	r2, [r3, #0]
 800c42e:	003b      	movs	r3, r7
 800c430:	801a      	strh	r2, [r3, #0]
	temp[1] = Cycle_On_ms;
 800c432:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <AT25_Save_Cycle+0x40>)
 800c434:	881a      	ldrh	r2, [r3, #0]
 800c436:	003b      	movs	r3, r7
 800c438:	805a      	strh	r2, [r3, #2]
	temp[2] = Cycle_Close_s;
 800c43a:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <AT25_Save_Cycle+0x44>)
 800c43c:	881a      	ldrh	r2, [r3, #0]
 800c43e:	003b      	movs	r3, r7
 800c440:	809a      	strh	r2, [r3, #4]
	temp[3] = Cycle_Close_ms;
 800c442:	4b0a      	ldr	r3, [pc, #40]	; (800c46c <AT25_Save_Cycle+0x48>)
 800c444:	881a      	ldrh	r2, [r3, #0]
 800c446:	003b      	movs	r3, r7
 800c448:	80da      	strh	r2, [r3, #6]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c44a:	003b      	movs	r3, r7
 800c44c:	2208      	movs	r2, #8
 800c44e:	2152      	movs	r1, #82	; 0x52
 800c450:	0018      	movs	r0, r3
 800c452:	f7ff fe7d 	bl	800c150 <SPI_AT25_Write>

}
 800c456:	46c0      	nop			; (mov r8, r8)
 800c458:	46bd      	mov	sp, r7
 800c45a:	b002      	add	sp, #8
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	20003990 	.word	0x20003990
 800c464:	20002fd4 	.word	0x20002fd4
 800c468:	20003992 	.word	0x20003992
 800c46c:	20002fd6 	.word	0x20002fd6

0800c470 <AT25_Save_CC_CV_CP>:
 * @brief  对AT25写入CC_CV_CP设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_CC_CV_CP(void)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
	uint8_t temp[2];

	temp[0] = CV_CC_CP;
 800c476:	4b08      	ldr	r3, [pc, #32]	; (800c498 <AT25_Save_CC_CV_CP+0x28>)
 800c478:	781a      	ldrb	r2, [r3, #0]
 800c47a:	1d3b      	adds	r3, r7, #4
 800c47c:	701a      	strb	r2, [r3, #0]
	temp[1] = 0x00;
 800c47e:	1d3b      	adds	r3, r7, #4
 800c480:	2200      	movs	r2, #0
 800c482:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write((uint16_t*)temp, 80, sizeof(temp));
 800c484:	1d3b      	adds	r3, r7, #4
 800c486:	2202      	movs	r2, #2
 800c488:	2150      	movs	r1, #80	; 0x50
 800c48a:	0018      	movs	r0, r3
 800c48c:	f7ff fe60 	bl	800c150 <SPI_AT25_Write>
}
 800c490:	46c0      	nop			; (mov r8, r8)
 800c492:	46bd      	mov	sp, r7
 800c494:	b002      	add	sp, #8
 800c496:	bd80      	pop	{r7, pc}
 800c498:	2000398a 	.word	0x2000398a

0800c49c <AT25_Save_VI_Rate>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_VI_Rate(void)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
	uint16_t temp[2];

	temp[0] = Set_V_Slope;
 800c4a2:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <AT25_Save_VI_Rate+0x30>)
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	1d3b      	adds	r3, r7, #4
 800c4aa:	801a      	strh	r2, [r3, #0]
	temp[1] = Set_I_Slope;
 800c4ac:	4b08      	ldr	r3, [pc, #32]	; (800c4d0 <AT25_Save_VI_Rate+0x34>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	1d3b      	adds	r3, r7, #4
 800c4b4:	805a      	strh	r2, [r3, #2]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c4b6:	1d3b      	adds	r3, r7, #4
 800c4b8:	2204      	movs	r2, #4
 800c4ba:	2152      	movs	r1, #82	; 0x52
 800c4bc:	0018      	movs	r0, r3
 800c4be:	f7ff fe47 	bl	800c150 <SPI_AT25_Write>

}
 800c4c2:	46c0      	nop			; (mov r8, r8)
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	b002      	add	sp, #8
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	46c0      	nop			; (mov r8, r8)
 800c4cc:	20003998 	.word	0x20003998
 800c4d0:	20003999 	.word	0x20003999

0800c4d4 <AT25_Save_AD_Param>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_AD_Param(void)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
	uint16_t temp[4];

	temp[0] = ADC_Gain_V*1000000;
 800c4da:	4b24      	ldr	r3, [pc, #144]	; (800c56c <AT25_Save_AD_Param+0x98>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4924      	ldr	r1, [pc, #144]	; (800c570 <AT25_Save_AD_Param+0x9c>)
 800c4e0:	1c18      	adds	r0, r3, #0
 800c4e2:	f7f4 fbbd 	bl	8000c60 <__aeabi_fmul>
 800c4e6:	1c03      	adds	r3, r0, #0
 800c4e8:	1c18      	adds	r0, r3, #0
 800c4ea:	f7f4 f81d 	bl	8000528 <__aeabi_f2uiz>
 800c4ee:	0003      	movs	r3, r0
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	003b      	movs	r3, r7
 800c4f4:	801a      	strh	r2, [r3, #0]
	temp[1] = ADC_Gain_I*1000000;
 800c4f6:	4b1f      	ldr	r3, [pc, #124]	; (800c574 <AT25_Save_AD_Param+0xa0>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	491d      	ldr	r1, [pc, #116]	; (800c570 <AT25_Save_AD_Param+0x9c>)
 800c4fc:	1c18      	adds	r0, r3, #0
 800c4fe:	f7f4 fbaf 	bl	8000c60 <__aeabi_fmul>
 800c502:	1c03      	adds	r3, r0, #0
 800c504:	1c18      	adds	r0, r3, #0
 800c506:	f7f4 f80f 	bl	8000528 <__aeabi_f2uiz>
 800c50a:	0003      	movs	r3, r0
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	003b      	movs	r3, r7
 800c510:	805a      	strh	r2, [r3, #2]
	/*test*/
	temp[2] = (-1*Eror_ADC_V)*10000;
 800c512:	4b19      	ldr	r3, [pc, #100]	; (800c578 <AT25_Save_AD_Param+0xa4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2280      	movs	r2, #128	; 0x80
 800c518:	0612      	lsls	r2, r2, #24
 800c51a:	4053      	eors	r3, r2
 800c51c:	4917      	ldr	r1, [pc, #92]	; (800c57c <AT25_Save_AD_Param+0xa8>)
 800c51e:	1c18      	adds	r0, r3, #0
 800c520:	f7f4 fb9e 	bl	8000c60 <__aeabi_fmul>
 800c524:	1c03      	adds	r3, r0, #0
 800c526:	1c18      	adds	r0, r3, #0
 800c528:	f7f3 fffe 	bl	8000528 <__aeabi_f2uiz>
 800c52c:	0003      	movs	r3, r0
 800c52e:	b29a      	uxth	r2, r3
 800c530:	003b      	movs	r3, r7
 800c532:	809a      	strh	r2, [r3, #4]
	temp[3] = (-1*Eror_ADC_I)*10000;
 800c534:	4b12      	ldr	r3, [pc, #72]	; (800c580 <AT25_Save_AD_Param+0xac>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2280      	movs	r2, #128	; 0x80
 800c53a:	0612      	lsls	r2, r2, #24
 800c53c:	4053      	eors	r3, r2
 800c53e:	490f      	ldr	r1, [pc, #60]	; (800c57c <AT25_Save_AD_Param+0xa8>)
 800c540:	1c18      	adds	r0, r3, #0
 800c542:	f7f4 fb8d 	bl	8000c60 <__aeabi_fmul>
 800c546:	1c03      	adds	r3, r0, #0
 800c548:	1c18      	adds	r0, r3, #0
 800c54a:	f7f3 ffed 	bl	8000528 <__aeabi_f2uiz>
 800c54e:	0003      	movs	r3, r0
 800c550:	b29a      	uxth	r2, r3
 800c552:	003b      	movs	r3, r7
 800c554:	80da      	strh	r2, [r3, #6]

	SPI_AT25_Write(temp, 86, sizeof(temp));
 800c556:	003b      	movs	r3, r7
 800c558:	2208      	movs	r2, #8
 800c55a:	2156      	movs	r1, #86	; 0x56
 800c55c:	0018      	movs	r0, r3
 800c55e:	f7ff fdf7 	bl	800c150 <SPI_AT25_Write>

}
 800c562:	46c0      	nop			; (mov r8, r8)
 800c564:	46bd      	mov	sp, r7
 800c566:	b002      	add	sp, #8
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	46c0      	nop			; (mov r8, r8)
 800c56c:	20002fe8 	.word	0x20002fe8
 800c570:	49742400 	.word	0x49742400
 800c574:	20002fec 	.word	0x20002fec
 800c578:	20002ff0 	.word	0x20002ff0
 800c57c:	461c4000 	.word	0x461c4000
 800c580:	20002ff4 	.word	0x20002ff4

0800c584 <AT25_load_AD_Param>:

void AT25_load_AD_Param(void)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0

	uint16_t temp[4];

	SPI_AT25_Read((uint16_t*)temp, 86, sizeof(temp));
 800c58a:	003b      	movs	r3, r7
 800c58c:	2208      	movs	r2, #8
 800c58e:	2156      	movs	r1, #86	; 0x56
 800c590:	0018      	movs	r0, r3
 800c592:	f7ff fe0c 	bl	800c1ae <SPI_AT25_Read>

	ADC_Gain_V=temp[0]/1000000.0;
 800c596:	003b      	movs	r3, r7
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	0018      	movs	r0, r3
 800c59c:	f7f6 fc32 	bl	8002e04 <__aeabi_i2d>
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	4b26      	ldr	r3, [pc, #152]	; (800c63c <AT25_load_AD_Param+0xb8>)
 800c5a4:	f7f5 f9da 	bl	800195c <__aeabi_ddiv>
 800c5a8:	0002      	movs	r2, r0
 800c5aa:	000b      	movs	r3, r1
 800c5ac:	0010      	movs	r0, r2
 800c5ae:	0019      	movs	r1, r3
 800c5b0:	f7f6 fcc6 	bl	8002f40 <__aeabi_d2f>
 800c5b4:	1c02      	adds	r2, r0, #0
 800c5b6:	4b22      	ldr	r3, [pc, #136]	; (800c640 <AT25_load_AD_Param+0xbc>)
 800c5b8:	601a      	str	r2, [r3, #0]
	ADC_Gain_I=temp[1]/1000000.0;
 800c5ba:	003b      	movs	r3, r7
 800c5bc:	885b      	ldrh	r3, [r3, #2]
 800c5be:	0018      	movs	r0, r3
 800c5c0:	f7f6 fc20 	bl	8002e04 <__aeabi_i2d>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	4b1d      	ldr	r3, [pc, #116]	; (800c63c <AT25_load_AD_Param+0xb8>)
 800c5c8:	f7f5 f9c8 	bl	800195c <__aeabi_ddiv>
 800c5cc:	0002      	movs	r2, r0
 800c5ce:	000b      	movs	r3, r1
 800c5d0:	0010      	movs	r0, r2
 800c5d2:	0019      	movs	r1, r3
 800c5d4:	f7f6 fcb4 	bl	8002f40 <__aeabi_d2f>
 800c5d8:	1c02      	adds	r2, r0, #0
 800c5da:	4b1a      	ldr	r3, [pc, #104]	; (800c644 <AT25_load_AD_Param+0xc0>)
 800c5dc:	601a      	str	r2, [r3, #0]
	Eror_ADC_V=-(temp[2]/10000.0);
 800c5de:	003b      	movs	r3, r7
 800c5e0:	889b      	ldrh	r3, [r3, #4]
 800c5e2:	0018      	movs	r0, r3
 800c5e4:	f7f6 fc0e 	bl	8002e04 <__aeabi_i2d>
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	4b17      	ldr	r3, [pc, #92]	; (800c648 <AT25_load_AD_Param+0xc4>)
 800c5ec:	f7f5 f9b6 	bl	800195c <__aeabi_ddiv>
 800c5f0:	0002      	movs	r2, r0
 800c5f2:	000b      	movs	r3, r1
 800c5f4:	0010      	movs	r0, r2
 800c5f6:	0019      	movs	r1, r3
 800c5f8:	f7f6 fca2 	bl	8002f40 <__aeabi_d2f>
 800c5fc:	1c02      	adds	r2, r0, #0
 800c5fe:	2380      	movs	r3, #128	; 0x80
 800c600:	061b      	lsls	r3, r3, #24
 800c602:	405a      	eors	r2, r3
 800c604:	4b11      	ldr	r3, [pc, #68]	; (800c64c <AT25_load_AD_Param+0xc8>)
 800c606:	601a      	str	r2, [r3, #0]
	Eror_ADC_I=-(temp[3]/10000.0);
 800c608:	003b      	movs	r3, r7
 800c60a:	88db      	ldrh	r3, [r3, #6]
 800c60c:	0018      	movs	r0, r3
 800c60e:	f7f6 fbf9 	bl	8002e04 <__aeabi_i2d>
 800c612:	2200      	movs	r2, #0
 800c614:	4b0c      	ldr	r3, [pc, #48]	; (800c648 <AT25_load_AD_Param+0xc4>)
 800c616:	f7f5 f9a1 	bl	800195c <__aeabi_ddiv>
 800c61a:	0002      	movs	r2, r0
 800c61c:	000b      	movs	r3, r1
 800c61e:	0010      	movs	r0, r2
 800c620:	0019      	movs	r1, r3
 800c622:	f7f6 fc8d 	bl	8002f40 <__aeabi_d2f>
 800c626:	1c02      	adds	r2, r0, #0
 800c628:	2380      	movs	r3, #128	; 0x80
 800c62a:	061b      	lsls	r3, r3, #24
 800c62c:	405a      	eors	r2, r3
 800c62e:	4b08      	ldr	r3, [pc, #32]	; (800c650 <AT25_load_AD_Param+0xcc>)
 800c630:	601a      	str	r2, [r3, #0]
}
 800c632:	46c0      	nop			; (mov r8, r8)
 800c634:	46bd      	mov	sp, r7
 800c636:	b002      	add	sp, #8
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	46c0      	nop			; (mov r8, r8)
 800c63c:	412e8480 	.word	0x412e8480
 800c640:	20002fe8 	.word	0x20002fe8
 800c644:	20002fec 	.word	0x20002fec
 800c648:	40c38800 	.word	0x40c38800
 800c64c:	20002ff0 	.word	0x20002ff0
 800c650:	20002ff4 	.word	0x20002ff4

0800c654 <AT25_Reset>:
 * @brief  对AT25重置所有设定值
 * @param	无
 * @retval 无
 */
void AT25_Reset(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b090      	sub	sp, #64	; 0x40
 800c658:	af00      	add	r7, sp, #0
	AT_25_init();
 800c65a:	f7ff fc19 	bl	800be90 <AT_25_init>

	CV_CC_CP = CV;
 800c65e:	4b42      	ldr	r3, [pc, #264]	; (800c768 <AT25_Reset+0x114>)
 800c660:	2201      	movs	r2, #1
 800c662:	701a      	strb	r2, [r3, #0]
	AT25_Save_CC_CV_CP();
 800c664:	f7ff ff04 	bl	800c470 <AT25_Save_CC_CV_CP>
	Set_V_Slope=15;
 800c668:	4b40      	ldr	r3, [pc, #256]	; (800c76c <AT25_Reset+0x118>)
 800c66a:	220f      	movs	r2, #15
 800c66c:	701a      	strb	r2, [r3, #0]
	Set_I_Slope=5;
 800c66e:	4b40      	ldr	r3, [pc, #256]	; (800c770 <AT25_Reset+0x11c>)
 800c670:	2205      	movs	r2, #5
 800c672:	701a      	strb	r2, [r3, #0]
	AT25_Save_VI_Rate();
 800c674:	f7ff ff12 	bl	800c49c <AT25_Save_VI_Rate>
	Set_Current=0;
 800c678:	4b3e      	ldr	r3, [pc, #248]	; (800c774 <AT25_Reset+0x120>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	801a      	strh	r2, [r3, #0]
	Set_Voltage=0;
 800c67e:	4b3e      	ldr	r3, [pc, #248]	; (800c778 <AT25_Reset+0x124>)
 800c680:	2200      	movs	r2, #0
 800c682:	801a      	strh	r2, [r3, #0]
	AT25_Save_VISet();
 800c684:	f7ff fdc2 	bl	800c20c <AT25_Save_VISet>
	/*save recall reset*/
	uint16_t temp[30] = {0};
 800c688:	003b      	movs	r3, r7
 800c68a:	0018      	movs	r0, r3
 800c68c:	233c      	movs	r3, #60	; 0x3c
 800c68e:	001a      	movs	r2, r3
 800c690:	2100      	movs	r1, #0
 800c692:	f008 f82e 	bl	80146f2 <memset>
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c696:	233f      	movs	r3, #63	; 0x3f
 800c698:	18fb      	adds	r3, r7, r3
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	e012      	b.n	800c6c6 <AT25_Reset+0x72>
	{
		temp[i]=1000*(i+1);
 800c6a0:	203f      	movs	r0, #63	; 0x3f
 800c6a2:	183b      	adds	r3, r7, r0
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	183a      	adds	r2, r7, r0
 800c6ac:	7812      	ldrb	r2, [r2, #0]
 800c6ae:	21fa      	movs	r1, #250	; 0xfa
 800c6b0:	0089      	lsls	r1, r1, #2
 800c6b2:	434b      	muls	r3, r1
 800c6b4:	b299      	uxth	r1, r3
 800c6b6:	003b      	movs	r3, r7
 800c6b8:	0052      	lsls	r2, r2, #1
 800c6ba:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c6bc:	183b      	adds	r3, r7, r0
 800c6be:	781a      	ldrb	r2, [r3, #0]
 800c6c0:	183b      	adds	r3, r7, r0
 800c6c2:	3201      	adds	r2, #1
 800c6c4:	701a      	strb	r2, [r3, #0]
 800c6c6:	233f      	movs	r3, #63	; 0x3f
 800c6c8:	18fb      	adds	r3, r7, r3
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	2b09      	cmp	r3, #9
 800c6ce:	d9e7      	bls.n	800c6a0 <AT25_Reset+0x4c>
	}
	for(uint8_t j=10;j<20;j++)//100-1000
 800c6d0:	233e      	movs	r3, #62	; 0x3e
 800c6d2:	18fb      	adds	r3, r7, r3
 800c6d4:	220a      	movs	r2, #10
 800c6d6:	701a      	strb	r2, [r3, #0]
 800c6d8:	e011      	b.n	800c6fe <AT25_Reset+0xaa>
	{
		temp[j]=(j-9)*100;
 800c6da:	203e      	movs	r0, #62	; 0x3e
 800c6dc:	183b      	adds	r3, r7, r0
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	3b09      	subs	r3, #9
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	183a      	adds	r2, r7, r0
 800c6e6:	7812      	ldrb	r2, [r2, #0]
 800c6e8:	2164      	movs	r1, #100	; 0x64
 800c6ea:	434b      	muls	r3, r1
 800c6ec:	b299      	uxth	r1, r3
 800c6ee:	003b      	movs	r3, r7
 800c6f0:	0052      	lsls	r2, r2, #1
 800c6f2:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=10;j<20;j++)//100-1000
 800c6f4:	183b      	adds	r3, r7, r0
 800c6f6:	781a      	ldrb	r2, [r3, #0]
 800c6f8:	183b      	adds	r3, r7, r0
 800c6fa:	3201      	adds	r2, #1
 800c6fc:	701a      	strb	r2, [r3, #0]
 800c6fe:	233e      	movs	r3, #62	; 0x3e
 800c700:	18fb      	adds	r3, r7, r3
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	2b13      	cmp	r3, #19
 800c706:	d9e8      	bls.n	800c6da <AT25_Reset+0x86>
	}
	for(uint8_t k=20;k<30;k++)
 800c708:	233d      	movs	r3, #61	; 0x3d
 800c70a:	18fb      	adds	r3, r7, r3
 800c70c:	2214      	movs	r2, #20
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	e01a      	b.n	800c748 <AT25_Reset+0xf4>
	{
		temp[k]=temp[k-20]*temp[k-10];
 800c712:	203d      	movs	r0, #61	; 0x3d
 800c714:	183b      	adds	r3, r7, r0
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	3b14      	subs	r3, #20
 800c71a:	001a      	movs	r2, r3
 800c71c:	003b      	movs	r3, r7
 800c71e:	0052      	lsls	r2, r2, #1
 800c720:	5ad3      	ldrh	r3, [r2, r3]
 800c722:	183a      	adds	r2, r7, r0
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	3a0a      	subs	r2, #10
 800c728:	0011      	movs	r1, r2
 800c72a:	003a      	movs	r2, r7
 800c72c:	0049      	lsls	r1, r1, #1
 800c72e:	5a89      	ldrh	r1, [r1, r2]
 800c730:	183a      	adds	r2, r7, r0
 800c732:	7812      	ldrb	r2, [r2, #0]
 800c734:	434b      	muls	r3, r1
 800c736:	b299      	uxth	r1, r3
 800c738:	003b      	movs	r3, r7
 800c73a:	0052      	lsls	r2, r2, #1
 800c73c:	52d1      	strh	r1, [r2, r3]
	for(uint8_t k=20;k<30;k++)
 800c73e:	183b      	adds	r3, r7, r0
 800c740:	781a      	ldrb	r2, [r3, #0]
 800c742:	183b      	adds	r3, r7, r0
 800c744:	3201      	adds	r2, #1
 800c746:	701a      	strb	r2, [r3, #0]
 800c748:	233d      	movs	r3, #61	; 0x3d
 800c74a:	18fb      	adds	r3, r7, r3
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b1d      	cmp	r3, #29
 800c750:	d9df      	bls.n	800c712 <AT25_Reset+0xbe>
	}
	SPI_AT25_Write(temp,0x06, sizeof(temp));
 800c752:	003b      	movs	r3, r7
 800c754:	223c      	movs	r2, #60	; 0x3c
 800c756:	2106      	movs	r1, #6
 800c758:	0018      	movs	r0, r3
 800c75a:	f7ff fcf9 	bl	800c150 <SPI_AT25_Write>



}
 800c75e:	46c0      	nop			; (mov r8, r8)
 800c760:	46bd      	mov	sp, r7
 800c762:	b010      	add	sp, #64	; 0x40
 800c764:	bd80      	pop	{r7, pc}
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	2000398a 	.word	0x2000398a
 800c76c:	20003998 	.word	0x20003998
 800c770:	20003999 	.word	0x20003999
 800c774:	20002fda 	.word	0x20002fda
 800c778:	20002fd8 	.word	0x20002fd8

0800c77c <ADD>:
		}
		return (uchCRCHi<<8|uchCRCLo);
}
#endif
uint16_t ADD(uint8_t *puchMsg,uint8_t usDataLen)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	000a      	movs	r2, r1
 800c786:	1cfb      	adds	r3, r7, #3
 800c788:	701a      	strb	r2, [r3, #0]

	uint16_t sum=0;
 800c78a:	2316      	movs	r3, #22
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	2200      	movs	r2, #0
 800c790:	801a      	strh	r2, [r3, #0]
	uint8_t * pindex=puchMsg;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<usDataLen;i++)
 800c796:	230f      	movs	r3, #15
 800c798:	18fb      	adds	r3, r7, r3
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	e010      	b.n	800c7c2 <ADD+0x46>
	{
		sum+=*(pindex++);
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	613a      	str	r2, [r7, #16]
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	b299      	uxth	r1, r3
 800c7aa:	2216      	movs	r2, #22
 800c7ac:	18bb      	adds	r3, r7, r2
 800c7ae:	18ba      	adds	r2, r7, r2
 800c7b0:	8812      	ldrh	r2, [r2, #0]
 800c7b2:	188a      	adds	r2, r1, r2
 800c7b4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<usDataLen;i++)
 800c7b6:	210f      	movs	r1, #15
 800c7b8:	187b      	adds	r3, r7, r1
 800c7ba:	781a      	ldrb	r2, [r3, #0]
 800c7bc:	187b      	adds	r3, r7, r1
 800c7be:	3201      	adds	r2, #1
 800c7c0:	701a      	strb	r2, [r3, #0]
 800c7c2:	230f      	movs	r3, #15
 800c7c4:	18fa      	adds	r2, r7, r3
 800c7c6:	1cfb      	adds	r3, r7, #3
 800c7c8:	7812      	ldrb	r2, [r2, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d3e7      	bcc.n	800c7a0 <ADD+0x24>
	}

	return sum;
 800c7d0:	2316      	movs	r3, #22
 800c7d2:	18fb      	adds	r3, r7, r3
 800c7d4:	881b      	ldrh	r3, [r3, #0]
}
 800c7d6:	0018      	movs	r0, r3
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	b006      	add	sp, #24
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <DAC_Cmd_send>:
  * @param  command
  * @param  Date need to be send
  * @retval
  */
void DAC_Cmd_send(uint8_t IDindex,uint8_t cmd,uint16_t Data_To_Send)
{
 800c7e0:	b590      	push	{r4, r7, lr}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	0004      	movs	r4, r0
 800c7e8:	0008      	movs	r0, r1
 800c7ea:	0011      	movs	r1, r2
 800c7ec:	1dfb      	adds	r3, r7, #7
 800c7ee:	1c22      	adds	r2, r4, #0
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	1dbb      	adds	r3, r7, #6
 800c7f4:	1c02      	adds	r2, r0, #0
 800c7f6:	701a      	strb	r2, [r3, #0]
 800c7f8:	1d3b      	adds	r3, r7, #4
 800c7fa:	1c0a      	adds	r2, r1, #0
 800c7fc:	801a      	strh	r2, [r3, #0]

	__HAL_UART_ENABLE(&huart2);
 800c7fe:	4b60      	ldr	r3, [pc, #384]	; (800c980 <DAC_Cmd_send+0x1a0>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	4b5e      	ldr	r3, [pc, #376]	; (800c980 <DAC_Cmd_send+0x1a0>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2101      	movs	r1, #1
 800c80a:	430a      	orrs	r2, r1
 800c80c:	601a      	str	r2, [r3, #0]
	memset(&Uart2_Send_buffer[0],0,9);
 800c80e:	4b5d      	ldr	r3, [pc, #372]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c810:	2209      	movs	r2, #9
 800c812:	2100      	movs	r1, #0
 800c814:	0018      	movs	r0, r3
 800c816:	f007 ff6c 	bl	80146f2 <memset>
	/*********************ID&Command*********************/
	Uart2_Send_buffer[0]=IDindex;//id
 800c81a:	4b5a      	ldr	r3, [pc, #360]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c81c:	1dfa      	adds	r2, r7, #7
 800c81e:	7812      	ldrb	r2, [r2, #0]
 800c820:	701a      	strb	r2, [r3, #0]
	Uart2_Send_buffer[1]=cmd;//cmd
 800c822:	4b58      	ldr	r3, [pc, #352]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c824:	1dba      	adds	r2, r7, #6
 800c826:	7812      	ldrb	r2, [r2, #0]
 800c828:	705a      	strb	r2, [r3, #1]
	 /*********************data length*********************/
	 if((Data_To_Send&0xff00))
 800c82a:	1d3b      	adds	r3, r7, #4
 800c82c:	881a      	ldrh	r2, [r3, #0]
 800c82e:	23ff      	movs	r3, #255	; 0xff
 800c830:	021b      	lsls	r3, r3, #8
 800c832:	4013      	ands	r3, r2
 800c834:	d003      	beq.n	800c83e <DAC_Cmd_send+0x5e>
	 {
		 Uart2_Send_buffer[2]=0x02;
 800c836:	4b53      	ldr	r3, [pc, #332]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c838:	2202      	movs	r2, #2
 800c83a:	709a      	strb	r2, [r3, #2]
 800c83c:	e00b      	b.n	800c856 <DAC_Cmd_send+0x76>
	 }
	 else if((Data_To_Send&0x00ff))
 800c83e:	1d3b      	adds	r3, r7, #4
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	22ff      	movs	r2, #255	; 0xff
 800c844:	4013      	ands	r3, r2
 800c846:	d003      	beq.n	800c850 <DAC_Cmd_send+0x70>
	 {
		 Uart2_Send_buffer[2]=0x01;
 800c848:	4b4e      	ldr	r3, [pc, #312]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c84a:	2201      	movs	r2, #1
 800c84c:	709a      	strb	r2, [r3, #2]
 800c84e:	e002      	b.n	800c856 <DAC_Cmd_send+0x76>
	 }
	 else Uart2_Send_buffer[2]=0x00;
 800c850:	4b4c      	ldr	r3, [pc, #304]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c852:	2200      	movs	r2, #0
 800c854:	709a      	strb	r2, [r3, #2]
	 /*********************data convert*********************/
	  Uart2_Send_buffer[3]=0x00;//data H
 800c856:	4b4b      	ldr	r3, [pc, #300]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c858:	2200      	movs	r2, #0
 800c85a:	70da      	strb	r2, [r3, #3]
	  Uart2_Send_buffer[4]=0x00;//data L
 800c85c:	4b49      	ldr	r3, [pc, #292]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c85e:	2200      	movs	r2, #0
 800c860:	711a      	strb	r2, [r3, #4]
	  switch(cmd)
 800c862:	1dbb      	adds	r3, r7, #6
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b0b      	cmp	r3, #11
 800c868:	d86b      	bhi.n	800c942 <DAC_Cmd_send+0x162>
 800c86a:	009a      	lsls	r2, r3, #2
 800c86c:	4b46      	ldr	r3, [pc, #280]	; (800c988 <DAC_Cmd_send+0x1a8>)
 800c86e:	18d3      	adds	r3, r2, r3
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	469f      	mov	pc, r3

		  /*set max voltage current*/
		  case 4://set voltage
		  case 5://set current
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//low max_voltage
 800c874:	4b43      	ldr	r3, [pc, #268]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c876:	791b      	ldrb	r3, [r3, #4]
 800c878:	b25a      	sxtb	r2, r3
 800c87a:	1d3b      	adds	r3, r7, #4
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	b25b      	sxtb	r3, r3
 800c880:	4313      	orrs	r3, r2
 800c882:	b25b      	sxtb	r3, r3
 800c884:	b2da      	uxtb	r2, r3
 800c886:	4b3f      	ldr	r3, [pc, #252]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c888:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//Hight max_voltage
 800c88a:	4b3e      	ldr	r3, [pc, #248]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c88c:	78da      	ldrb	r2, [r3, #3]
 800c88e:	1d3b      	adds	r3, r7, #4
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	0a1b      	lsrs	r3, r3, #8
 800c894:	b29b      	uxth	r3, r3
 800c896:	b2db      	uxtb	r3, r3
 800c898:	4313      	orrs	r3, r2
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	4b39      	ldr	r3, [pc, #228]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c89e:	70da      	strb	r2, [r3, #3]
			  break;
 800c8a0:	e050      	b.n	800c944 <DAC_Cmd_send+0x164>
		  }
		  /*set min voltage current*/
		  case 6://set voltage & current
		  {

			  Uart2_Send_buffer[4]|=(Set_Voltage&0x00ff);//low voltage
 800c8a2:	4b38      	ldr	r3, [pc, #224]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8a4:	791b      	ldrb	r3, [r3, #4]
 800c8a6:	b25a      	sxtb	r2, r3
 800c8a8:	4b38      	ldr	r3, [pc, #224]	; (800c98c <DAC_Cmd_send+0x1ac>)
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	b25b      	sxtb	r3, r3
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	b25b      	sxtb	r3, r3
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	4b33      	ldr	r3, [pc, #204]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8b6:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Set_Voltage>>8);//Hight voltage
 800c8b8:	4b32      	ldr	r3, [pc, #200]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8ba:	78da      	ldrb	r2, [r3, #3]
 800c8bc:	4b33      	ldr	r3, [pc, #204]	; (800c98c <DAC_Cmd_send+0x1ac>)
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	0a1b      	lsrs	r3, r3, #8
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4b2e      	ldr	r3, [pc, #184]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8cc:	70da      	strb	r2, [r3, #3]

			  Uart2_Send_buffer[6]|=(Set_Current&0x00ff);//low current
 800c8ce:	4b2d      	ldr	r3, [pc, #180]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8d0:	799b      	ldrb	r3, [r3, #6]
 800c8d2:	b25a      	sxtb	r2, r3
 800c8d4:	4b2e      	ldr	r3, [pc, #184]	; (800c990 <DAC_Cmd_send+0x1b0>)
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	b25b      	sxtb	r3, r3
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	b25b      	sxtb	r3, r3
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	4b28      	ldr	r3, [pc, #160]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8e2:	719a      	strb	r2, [r3, #6]
			  Uart2_Send_buffer[5]|=(Set_Current>>8);//Hight current
 800c8e4:	4b27      	ldr	r3, [pc, #156]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8e6:	795a      	ldrb	r2, [r3, #5]
 800c8e8:	4b29      	ldr	r3, [pc, #164]	; (800c990 <DAC_Cmd_send+0x1b0>)
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	0a1b      	lsrs	r3, r3, #8
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	4b23      	ldr	r3, [pc, #140]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8f8:	715a      	strb	r2, [r3, #5]
			  break;
 800c8fa:	e023      	b.n	800c944 <DAC_Cmd_send+0x164>
		  }
		  /*set V/I rate*/
		  case 7:
		  case 8:
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//Low min_voltage
 800c8fc:	4b21      	ldr	r3, [pc, #132]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c8fe:	791b      	ldrb	r3, [r3, #4]
 800c900:	b25a      	sxtb	r2, r3
 800c902:	1d3b      	adds	r3, r7, #4
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	b25b      	sxtb	r3, r3
 800c908:	4313      	orrs	r3, r2
 800c90a:	b25b      	sxtb	r3, r3
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	4b1d      	ldr	r3, [pc, #116]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c910:	711a      	strb	r2, [r3, #4]
			  break;
 800c912:	e017      	b.n	800c944 <DAC_Cmd_send+0x164>
		  }
		  /*set V I rate*/
		  case 9:
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//Low min_voltage
 800c914:	4b1b      	ldr	r3, [pc, #108]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c916:	791b      	ldrb	r3, [r3, #4]
 800c918:	b25a      	sxtb	r2, r3
 800c91a:	1d3b      	adds	r3, r7, #4
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b25b      	sxtb	r3, r3
 800c920:	4313      	orrs	r3, r2
 800c922:	b25b      	sxtb	r3, r3
 800c924:	b2da      	uxtb	r2, r3
 800c926:	4b17      	ldr	r3, [pc, #92]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c928:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//high min_voltage
 800c92a:	4b16      	ldr	r3, [pc, #88]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c92c:	78da      	ldrb	r2, [r3, #3]
 800c92e:	1d3b      	adds	r3, r7, #4
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	0a1b      	lsrs	r3, r3, #8
 800c934:	b29b      	uxth	r3, r3
 800c936:	b2db      	uxtb	r3, r3
 800c938:	4313      	orrs	r3, r2
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	4b11      	ldr	r3, [pc, #68]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c93e:	70da      	strb	r2, [r3, #3]
			  break;
 800c940:	e000      	b.n	800c944 <DAC_Cmd_send+0x164>
		  }

		  case 11:break;//start Fall ON/OFF

		  default: break;
 800c942:	46c0      	nop			; (mov r8, r8)
	  /*********************CRC Calculate*********************/
	  Uart2_Send_buffer[5]=CRC16(Uart2_Send_buffer,5);//CRC L
	  Uart2_Send_buffer[6]=(CRC16(Uart2_Send_buffer,5)>>8);//CRC H
#endif
#ifdef ADD_CHECK
	  Uart2_Send_buffer[7]=ADD(Uart2_Send_buffer,7);//Low
 800c944:	4b0f      	ldr	r3, [pc, #60]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c946:	2107      	movs	r1, #7
 800c948:	0018      	movs	r0, r3
 800c94a:	f7ff ff17 	bl	800c77c <ADD>
 800c94e:	0003      	movs	r3, r0
 800c950:	b2da      	uxtb	r2, r3
 800c952:	4b0c      	ldr	r3, [pc, #48]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c954:	71da      	strb	r2, [r3, #7]
	  Uart2_Send_buffer[8]=(ADD(Uart2_Send_buffer,7)>>8);//High
 800c956:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c958:	2107      	movs	r1, #7
 800c95a:	0018      	movs	r0, r3
 800c95c:	f7ff ff0e 	bl	800c77c <ADD>
 800c960:	0003      	movs	r3, r0
 800c962:	0a1b      	lsrs	r3, r3, #8
 800c964:	b29b      	uxth	r3, r3
 800c966:	b2da      	uxtb	r2, r3
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c96a:	721a      	strb	r2, [r3, #8]
#endif

	  HAL_UART_Transmit_IT(&huart2,Uart2_Send_buffer,9);
 800c96c:	4905      	ldr	r1, [pc, #20]	; (800c984 <DAC_Cmd_send+0x1a4>)
 800c96e:	4b04      	ldr	r3, [pc, #16]	; (800c980 <DAC_Cmd_send+0x1a0>)
 800c970:	2209      	movs	r2, #9
 800c972:	0018      	movs	r0, r3
 800c974:	f7fd fc60 	bl	800a238 <HAL_UART_Transmit_IT>

}
 800c978:	46c0      	nop			; (mov r8, r8)
 800c97a:	46bd      	mov	sp, r7
 800c97c:	b003      	add	sp, #12
 800c97e:	bd90      	pop	{r4, r7, pc}
 800c980:	20003740 	.word	0x20003740
 800c984:	20003694 	.word	0x20003694
 800c988:	08018848 	.word	0x08018848
 800c98c:	20002fd8 	.word	0x20002fd8
 800c990:	20002fda 	.word	0x20002fda

0800c994 <power_on>:
  * @brief  开始输出
  * @param  无
  * @retval 无
  */
void power_on(void)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	af00      	add	r7, sp, #0


	ON_OFF =ON;
 800c998:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <power_on+0x1c>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,6,0);
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2106      	movs	r1, #6
 800c9a2:	2001      	movs	r0, #1
 800c9a4:	f7ff ff1c 	bl	800c7e0 <DAC_Cmd_send>

}
 800c9a8:	46c0      	nop			; (mov r8, r8)
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	46c0      	nop			; (mov r8, r8)
 800c9b0:	20003988 	.word	0x20003988

0800c9b4 <power_off>:
  * @brief  关闭输出
  * @param  无
  * @retval 无
  */
void power_off(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0

	ON_OFF =OFF;
 800c9ba:	4b11      	ldr	r3, [pc, #68]	; (800ca00 <power_off+0x4c>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	701a      	strb	r2, [r3, #0]
	uint16_t temp_V=Set_Voltage;
 800c9c0:	1dbb      	adds	r3, r7, #6
 800c9c2:	4a10      	ldr	r2, [pc, #64]	; (800ca04 <power_off+0x50>)
 800c9c4:	8812      	ldrh	r2, [r2, #0]
 800c9c6:	801a      	strh	r2, [r3, #0]
	uint16_t temp_I=Set_Current;
 800c9c8:	1d3b      	adds	r3, r7, #4
 800c9ca:	4a0f      	ldr	r2, [pc, #60]	; (800ca08 <power_off+0x54>)
 800c9cc:	8812      	ldrh	r2, [r2, #0]
 800c9ce:	801a      	strh	r2, [r3, #0]
	Set_Voltage=100;
 800c9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ca04 <power_off+0x50>)
 800c9d2:	2264      	movs	r2, #100	; 0x64
 800c9d4:	801a      	strh	r2, [r3, #0]
	Set_Current=100;
 800c9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <power_off+0x54>)
 800c9d8:	2264      	movs	r2, #100	; 0x64
 800c9da:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,6,0);
 800c9dc:	2200      	movs	r2, #0
 800c9de:	2106      	movs	r1, #6
 800c9e0:	2001      	movs	r0, #1
 800c9e2:	f7ff fefd 	bl	800c7e0 <DAC_Cmd_send>
	Set_Voltage=temp_V;
 800c9e6:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <power_off+0x50>)
 800c9e8:	1dba      	adds	r2, r7, #6
 800c9ea:	8812      	ldrh	r2, [r2, #0]
 800c9ec:	801a      	strh	r2, [r3, #0]
	Set_Current=temp_I;
 800c9ee:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <power_off+0x54>)
 800c9f0:	1d3a      	adds	r2, r7, #4
 800c9f2:	8812      	ldrh	r2, [r2, #0]
 800c9f4:	801a      	strh	r2, [r3, #0]

}
 800c9f6:	46c0      	nop			; (mov r8, r8)
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	b002      	add	sp, #8
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	46c0      	nop			; (mov r8, r8)
 800ca00:	20003988 	.word	0x20003988
 800ca04:	20002fd8 	.word	0x20002fd8
 800ca08:	20002fda 	.word	0x20002fda

0800ca0c <Output_Zero>:
  * @brief  输出零
  * @param  无
  * @retval 无
  */
void Output_Zero(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0

	uint16_t temp_V=Set_Voltage;
 800ca12:	1dbb      	adds	r3, r7, #6
 800ca14:	4a0e      	ldr	r2, [pc, #56]	; (800ca50 <Output_Zero+0x44>)
 800ca16:	8812      	ldrh	r2, [r2, #0]
 800ca18:	801a      	strh	r2, [r3, #0]
	uint16_t temp_I=Set_Current;
 800ca1a:	1d3b      	adds	r3, r7, #4
 800ca1c:	4a0d      	ldr	r2, [pc, #52]	; (800ca54 <Output_Zero+0x48>)
 800ca1e:	8812      	ldrh	r2, [r2, #0]
 800ca20:	801a      	strh	r2, [r3, #0]
	Set_Voltage=10;
 800ca22:	4b0b      	ldr	r3, [pc, #44]	; (800ca50 <Output_Zero+0x44>)
 800ca24:	220a      	movs	r2, #10
 800ca26:	801a      	strh	r2, [r3, #0]
	Set_Current=10;
 800ca28:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <Output_Zero+0x48>)
 800ca2a:	220a      	movs	r2, #10
 800ca2c:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,6,0);
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2106      	movs	r1, #6
 800ca32:	2001      	movs	r0, #1
 800ca34:	f7ff fed4 	bl	800c7e0 <DAC_Cmd_send>
	Set_Voltage=temp_V;
 800ca38:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <Output_Zero+0x44>)
 800ca3a:	1dba      	adds	r2, r7, #6
 800ca3c:	8812      	ldrh	r2, [r2, #0]
 800ca3e:	801a      	strh	r2, [r3, #0]
	Set_Current=temp_I;
 800ca40:	4b04      	ldr	r3, [pc, #16]	; (800ca54 <Output_Zero+0x48>)
 800ca42:	1d3a      	adds	r2, r7, #4
 800ca44:	8812      	ldrh	r2, [r2, #0]
 800ca46:	801a      	strh	r2, [r3, #0]


}
 800ca48:	46c0      	nop			; (mov r8, r8)
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	b002      	add	sp, #8
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20002fd8 	.word	0x20002fd8
 800ca54:	20002fda 	.word	0x20002fda

0800ca58 <First_menu_data_Refresh>:
#include "encoder.h"

static void First_menu_data_Refresh(void)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	af00      	add	r7, sp, #0
	xyz.coordinates2+=Flag.Encoder_BF;
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <First_menu_data_Refresh+0x34>)
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <First_menu_data_Refresh+0x38>)
 800ca62:	69db      	ldr	r3, [r3, #28]
 800ca64:	18d2      	adds	r2, r2, r3
 800ca66:	4b09      	ldr	r3, [pc, #36]	; (800ca8c <First_menu_data_Refresh+0x34>)
 800ca68:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2<1)	xyz.coordinates2=8;
 800ca6a:	4b08      	ldr	r3, [pc, #32]	; (800ca8c <First_menu_data_Refresh+0x34>)
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dc02      	bgt.n	800ca78 <First_menu_data_Refresh+0x20>
 800ca72:	4b06      	ldr	r3, [pc, #24]	; (800ca8c <First_menu_data_Refresh+0x34>)
 800ca74:	2208      	movs	r2, #8
 800ca76:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2>8)  xyz.coordinates2=1;
 800ca78:	4b04      	ldr	r3, [pc, #16]	; (800ca8c <First_menu_data_Refresh+0x34>)
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	2b08      	cmp	r3, #8
 800ca7e:	dd02      	ble.n	800ca86 <First_menu_data_Refresh+0x2e>
 800ca80:	4b02      	ldr	r3, [pc, #8]	; (800ca8c <First_menu_data_Refresh+0x34>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	605a      	str	r2, [r3, #4]
}
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	200039f4 	.word	0x200039f4
 800ca90:	20003384 	.word	0x20003384

0800ca94 <Calibration_V_data_Refresh>:

static void Calibration_V_data_Refresh(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0

	String_Calibration_Vlotage[Cursor_Position-9]+=Flag.Encoder_BF;
 800ca98:	4b8a      	ldr	r3, [pc, #552]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	3b09      	subs	r3, #9
 800ca9e:	4a8a      	ldr	r2, [pc, #552]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800caa0:	5cd1      	ldrb	r1, [r2, r3]
 800caa2:	4b8a      	ldr	r3, [pc, #552]	; (800cccc <Calibration_V_data_Refresh+0x238>)
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	4b86      	ldr	r3, [pc, #536]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	3b09      	subs	r3, #9
 800caae:	188a      	adds	r2, r1, r2
 800cab0:	b2d1      	uxtb	r1, r2
 800cab2:	4a85      	ldr	r2, [pc, #532]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cab4:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Vlotage[Cursor_Position-9]<'0')//退位
 800cab6:	4b83      	ldr	r3, [pc, #524]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	3b09      	subs	r3, #9
 800cabc:	4a82      	ldr	r2, [pc, #520]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cabe:	5cd3      	ldrb	r3, [r2, r3]
 800cac0:	2b2f      	cmp	r3, #47	; 0x2f
 800cac2:	d900      	bls.n	800cac6 <Calibration_V_data_Refresh+0x32>
 800cac4:	e0a3      	b.n	800cc0e <Calibration_V_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800cac6:	4b7f      	ldr	r3, [pc, #508]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b0b      	cmp	r3, #11
 800cacc:	d165      	bne.n	800cb9a <Calibration_V_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cace:	4b7d      	ldr	r3, [pc, #500]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	3b01      	subs	r3, #1
 800cad4:	b2da      	uxtb	r2, r3
 800cad6:	4b7b      	ldr	r3, [pc, #492]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cad8:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cada:	4b7a      	ldr	r3, [pc, #488]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	3b09      	subs	r3, #9
 800cae0:	4a79      	ldr	r2, [pc, #484]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cae2:	5cd3      	ldrb	r3, [r2, r3]
 800cae4:	2b30      	cmp	r3, #48	; 0x30
 800cae6:	d915      	bls.n	800cb14 <Calibration_V_data_Refresh+0x80>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cae8:	4b76      	ldr	r3, [pc, #472]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	3b09      	subs	r3, #9
 800caee:	4a76      	ldr	r2, [pc, #472]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800caf0:	5cd2      	ldrb	r2, [r2, r3]
 800caf2:	3a01      	subs	r2, #1
 800caf4:	b2d1      	uxtb	r1, r2
 800caf6:	4a74      	ldr	r2, [pc, #464]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800caf8:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cafa:	4b72      	ldr	r3, [pc, #456]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	3301      	adds	r3, #1
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	4b70      	ldr	r3, [pc, #448]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb04:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cb06:	4b6f      	ldr	r3, [pc, #444]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	3b09      	subs	r3, #9
 800cb0c:	4a6e      	ldr	r2, [pc, #440]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb0e:	2139      	movs	r1, #57	; 0x39
 800cb10:	54d1      	strb	r1, [r2, r3]
 800cb12:	e07c      	b.n	800cc0e <Calibration_V_data_Refresh+0x17a>

			}
			else if(String_Calibration_Vlotage[Cursor_Position-9]=='0')
 800cb14:	4b6b      	ldr	r3, [pc, #428]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	3b09      	subs	r3, #9
 800cb1a:	4a6b      	ldr	r2, [pc, #428]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb1c:	5cd3      	ldrb	r3, [r2, r3]
 800cb1e:	2b30      	cmp	r3, #48	; 0x30
 800cb20:	d175      	bne.n	800cc0e <Calibration_V_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cb22:	4b68      	ldr	r3, [pc, #416]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	3b01      	subs	r3, #1
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	4b66      	ldr	r3, [pc, #408]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb2c:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cb2e:	4b65      	ldr	r3, [pc, #404]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	3b09      	subs	r3, #9
 800cb34:	4a64      	ldr	r2, [pc, #400]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb36:	5cd3      	ldrb	r3, [r2, r3]
 800cb38:	2b30      	cmp	r3, #48	; 0x30
 800cb3a:	d921      	bls.n	800cb80 <Calibration_V_data_Refresh+0xec>
				{
					String_Calibration_Vlotage[Cursor_Position-9]--;
 800cb3c:	4b61      	ldr	r3, [pc, #388]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	3b09      	subs	r3, #9
 800cb42:	4a61      	ldr	r2, [pc, #388]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb44:	5cd2      	ldrb	r2, [r2, r3]
 800cb46:	3a01      	subs	r2, #1
 800cb48:	b2d1      	uxtb	r1, r2
 800cb4a:	4a5f      	ldr	r2, [pc, #380]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb4c:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cb4e:	4b5d      	ldr	r3, [pc, #372]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	4b5b      	ldr	r3, [pc, #364]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb58:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cb5a:	4b5a      	ldr	r3, [pc, #360]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	3b09      	subs	r3, #9
 800cb60:	4a59      	ldr	r2, [pc, #356]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb62:	2139      	movs	r1, #57	; 0x39
 800cb64:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cb66:	4b57      	ldr	r3, [pc, #348]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	4b55      	ldr	r3, [pc, #340]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb70:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cb72:	4b54      	ldr	r3, [pc, #336]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	3b09      	subs	r3, #9
 800cb78:	4a53      	ldr	r2, [pc, #332]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb7a:	2139      	movs	r1, #57	; 0x39
 800cb7c:	54d1      	strb	r1, [r2, r3]
 800cb7e:	e046      	b.n	800cc0e <Calibration_V_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cb80:	4b50      	ldr	r3, [pc, #320]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	3302      	adds	r3, #2
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	4b4e      	ldr	r3, [pc, #312]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb8a:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cb8c:	4b4d      	ldr	r3, [pc, #308]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	3b09      	subs	r3, #9
 800cb92:	4a4d      	ldr	r2, [pc, #308]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cb94:	2130      	movs	r1, #48	; 0x30
 800cb96:	54d1      	strb	r1, [r2, r3]
 800cb98:	e039      	b.n	800cc0e <Calibration_V_data_Refresh+0x17a>

			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800cb9a:	4b4a      	ldr	r3, [pc, #296]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b0a      	cmp	r3, #10
 800cba0:	d12f      	bne.n	800cc02 <Calibration_V_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800cba2:	4b48      	ldr	r3, [pc, #288]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	4b46      	ldr	r3, [pc, #280]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbac:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cbae:	4b45      	ldr	r3, [pc, #276]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	3b09      	subs	r3, #9
 800cbb4:	4a44      	ldr	r2, [pc, #272]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cbb6:	5cd3      	ldrb	r3, [r2, r3]
 800cbb8:	2b30      	cmp	r3, #48	; 0x30
 800cbba:	d915      	bls.n	800cbe8 <Calibration_V_data_Refresh+0x154>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cbbc:	4b41      	ldr	r3, [pc, #260]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	3b09      	subs	r3, #9
 800cbc2:	4a41      	ldr	r2, [pc, #260]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cbc4:	5cd2      	ldrb	r2, [r2, r3]
 800cbc6:	3a01      	subs	r2, #1
 800cbc8:	b2d1      	uxtb	r1, r2
 800cbca:	4a3f      	ldr	r2, [pc, #252]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cbcc:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cbce:	4b3d      	ldr	r3, [pc, #244]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	4b3b      	ldr	r3, [pc, #236]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbd8:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cbda:	4b3a      	ldr	r3, [pc, #232]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	3b09      	subs	r3, #9
 800cbe0:	4a39      	ldr	r2, [pc, #228]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cbe2:	2139      	movs	r1, #57	; 0x39
 800cbe4:	54d1      	strb	r1, [r2, r3]
 800cbe6:	e012      	b.n	800cc0e <Calibration_V_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800cbe8:	4b36      	ldr	r3, [pc, #216]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	b2da      	uxtb	r2, r3
 800cbf0:	4b34      	ldr	r3, [pc, #208]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbf2:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cbf4:	4b33      	ldr	r3, [pc, #204]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	3b09      	subs	r3, #9
 800cbfa:	4a33      	ldr	r2, [pc, #204]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cbfc:	2130      	movs	r1, #48	; 0x30
 800cbfe:	54d1      	strb	r1, [r2, r3]
 800cc00:	e005      	b.n	800cc0e <Calibration_V_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cc02:	4b30      	ldr	r3, [pc, #192]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	3b09      	subs	r3, #9
 800cc08:	4a2f      	ldr	r2, [pc, #188]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc0a:	2130      	movs	r1, #48	; 0x30
 800cc0c:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Vlotage[Cursor_Position-9]>'9')
 800cc0e:	4b2d      	ldr	r3, [pc, #180]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	3b09      	subs	r3, #9
 800cc14:	4a2c      	ldr	r2, [pc, #176]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc16:	5cd3      	ldrb	r3, [r2, r3]
 800cc18:	2b39      	cmp	r3, #57	; 0x39
 800cc1a:	d94f      	bls.n	800ccbc <Calibration_V_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800cc1c:	4b29      	ldr	r3, [pc, #164]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d041      	beq.n	800cca8 <Calibration_V_data_Refresh+0x214>
		{
			String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cc24:	4b27      	ldr	r3, [pc, #156]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	3b09      	subs	r3, #9
 800cc2a:	4a27      	ldr	r2, [pc, #156]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc2c:	2130      	movs	r1, #48	; 0x30
 800cc2e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800cc30:	4b24      	ldr	r3, [pc, #144]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	4b22      	ldr	r3, [pc, #136]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc3a:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]++;
 800cc3c:	4b21      	ldr	r3, [pc, #132]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	3b09      	subs	r3, #9
 800cc42:	4a21      	ldr	r2, [pc, #132]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc44:	5cd2      	ldrb	r2, [r2, r3]
 800cc46:	3201      	adds	r2, #1
 800cc48:	b2d1      	uxtb	r1, r2
 800cc4a:	4a1f      	ldr	r2, [pc, #124]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc4c:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800cc4e:	4b1d      	ldr	r3, [pc, #116]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	3b09      	subs	r3, #9
 800cc54:	4a1c      	ldr	r2, [pc, #112]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc56:	5cd3      	ldrb	r3, [r2, r3]
 800cc58:	2b39      	cmp	r3, #57	; 0x39
 800cc5a:	d91e      	bls.n	800cc9a <Calibration_V_data_Refresh+0x206>
 800cc5c:	4b19      	ldr	r3, [pc, #100]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d01a      	beq.n	800cc9a <Calibration_V_data_Refresh+0x206>
			{
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cc64:	4b17      	ldr	r3, [pc, #92]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	3b09      	subs	r3, #9
 800cc6a:	4a17      	ldr	r2, [pc, #92]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc6c:	2130      	movs	r1, #48	; 0x30
 800cc6e:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800cc70:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	4b12      	ldr	r3, [pc, #72]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc7a:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]++;
 800cc7c:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	3b09      	subs	r3, #9
 800cc82:	4a11      	ldr	r2, [pc, #68]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc84:	5cd2      	ldrb	r2, [r2, r3]
 800cc86:	3201      	adds	r2, #1
 800cc88:	b2d1      	uxtb	r1, r2
 800cc8a:	4a0f      	ldr	r2, [pc, #60]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800cc8c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	3301      	adds	r3, #1
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc98:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800cc9a:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800cca4:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]='9';
		}

	}

}
 800cca6:	e009      	b.n	800ccbc <Calibration_V_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800cca8:	4b06      	ldr	r3, [pc, #24]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <Calibration_V_data_Refresh+0x228>
			String_Calibration_Vlotage[Cursor_Position-9]='9';
 800ccb0:	4b04      	ldr	r3, [pc, #16]	; (800ccc4 <Calibration_V_data_Refresh+0x230>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	3b09      	subs	r3, #9
 800ccb6:	4a04      	ldr	r2, [pc, #16]	; (800ccc8 <Calibration_V_data_Refresh+0x234>)
 800ccb8:	2139      	movs	r1, #57	; 0x39
 800ccba:	54d1      	strb	r1, [r2, r3]
}
 800ccbc:	46c0      	nop			; (mov r8, r8)
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	46c0      	nop			; (mov r8, r8)
 800ccc4:	2000398e 	.word	0x2000398e
 800ccc8:	2000308c 	.word	0x2000308c
 800cccc:	20003384 	.word	0x20003384

0800ccd0 <Calibration_I_data_Refresh>:


static void Calibration_I_data_Refresh(void)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	af00      	add	r7, sp, #0

	String_Calibration_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800ccd4:	4b8a      	ldr	r3, [pc, #552]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	3b09      	subs	r3, #9
 800ccda:	4a8a      	ldr	r2, [pc, #552]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ccdc:	5cd1      	ldrb	r1, [r2, r3]
 800ccde:	4b8a      	ldr	r3, [pc, #552]	; (800cf08 <Calibration_I_data_Refresh+0x238>)
 800cce0:	69db      	ldr	r3, [r3, #28]
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	4b86      	ldr	r3, [pc, #536]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	3b09      	subs	r3, #9
 800ccea:	188a      	adds	r2, r1, r2
 800ccec:	b2d1      	uxtb	r1, r2
 800ccee:	4a85      	ldr	r2, [pc, #532]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ccf0:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Current[Cursor_Position-9]<'0')//退位
 800ccf2:	4b83      	ldr	r3, [pc, #524]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	3b09      	subs	r3, #9
 800ccf8:	4a82      	ldr	r2, [pc, #520]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ccfa:	5cd3      	ldrb	r3, [r2, r3]
 800ccfc:	2b2f      	cmp	r3, #47	; 0x2f
 800ccfe:	d900      	bls.n	800cd02 <Calibration_I_data_Refresh+0x32>
 800cd00:	e0a3      	b.n	800ce4a <Calibration_I_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800cd02:	4b7f      	ldr	r3, [pc, #508]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	2b0b      	cmp	r3, #11
 800cd08:	d165      	bne.n	800cdd6 <Calibration_I_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cd0a:	4b7d      	ldr	r3, [pc, #500]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	4b7b      	ldr	r3, [pc, #492]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd14:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cd16:	4b7a      	ldr	r3, [pc, #488]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	3b09      	subs	r3, #9
 800cd1c:	4a79      	ldr	r2, [pc, #484]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd1e:	5cd3      	ldrb	r3, [r2, r3]
 800cd20:	2b30      	cmp	r3, #48	; 0x30
 800cd22:	d915      	bls.n	800cd50 <Calibration_I_data_Refresh+0x80>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800cd24:	4b76      	ldr	r3, [pc, #472]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	3b09      	subs	r3, #9
 800cd2a:	4a76      	ldr	r2, [pc, #472]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd2c:	5cd2      	ldrb	r2, [r2, r3]
 800cd2e:	3a01      	subs	r2, #1
 800cd30:	b2d1      	uxtb	r1, r2
 800cd32:	4a74      	ldr	r2, [pc, #464]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd34:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cd36:	4b72      	ldr	r3, [pc, #456]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	4b70      	ldr	r3, [pc, #448]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd40:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800cd42:	4b6f      	ldr	r3, [pc, #444]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	3b09      	subs	r3, #9
 800cd48:	4a6e      	ldr	r2, [pc, #440]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd4a:	2139      	movs	r1, #57	; 0x39
 800cd4c:	54d1      	strb	r1, [r2, r3]
 800cd4e:	e07c      	b.n	800ce4a <Calibration_I_data_Refresh+0x17a>

			}
			else if(String_Calibration_Current[Cursor_Position-9]=='0')
 800cd50:	4b6b      	ldr	r3, [pc, #428]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	3b09      	subs	r3, #9
 800cd56:	4a6b      	ldr	r2, [pc, #428]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd58:	5cd3      	ldrb	r3, [r2, r3]
 800cd5a:	2b30      	cmp	r3, #48	; 0x30
 800cd5c:	d175      	bne.n	800ce4a <Calibration_I_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cd5e:	4b68      	ldr	r3, [pc, #416]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	3b01      	subs	r3, #1
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	4b66      	ldr	r3, [pc, #408]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd68:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cd6a:	4b65      	ldr	r3, [pc, #404]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	3b09      	subs	r3, #9
 800cd70:	4a64      	ldr	r2, [pc, #400]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd72:	5cd3      	ldrb	r3, [r2, r3]
 800cd74:	2b30      	cmp	r3, #48	; 0x30
 800cd76:	d921      	bls.n	800cdbc <Calibration_I_data_Refresh+0xec>
				{
					String_Calibration_Current[Cursor_Position-9]--;
 800cd78:	4b61      	ldr	r3, [pc, #388]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	3b09      	subs	r3, #9
 800cd7e:	4a61      	ldr	r2, [pc, #388]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd80:	5cd2      	ldrb	r2, [r2, r3]
 800cd82:	3a01      	subs	r2, #1
 800cd84:	b2d1      	uxtb	r1, r2
 800cd86:	4a5f      	ldr	r2, [pc, #380]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd88:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cd8a:	4b5d      	ldr	r3, [pc, #372]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	4b5b      	ldr	r3, [pc, #364]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd94:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cd96:	4b5a      	ldr	r3, [pc, #360]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	3b09      	subs	r3, #9
 800cd9c:	4a59      	ldr	r2, [pc, #356]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cd9e:	2139      	movs	r1, #57	; 0x39
 800cda0:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cda2:	4b57      	ldr	r3, [pc, #348]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	3301      	adds	r3, #1
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	4b55      	ldr	r3, [pc, #340]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdac:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cdae:	4b54      	ldr	r3, [pc, #336]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	3b09      	subs	r3, #9
 800cdb4:	4a53      	ldr	r2, [pc, #332]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cdb6:	2139      	movs	r1, #57	; 0x39
 800cdb8:	54d1      	strb	r1, [r2, r3]
 800cdba:	e046      	b.n	800ce4a <Calibration_I_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cdbc:	4b50      	ldr	r3, [pc, #320]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	3302      	adds	r3, #2
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	4b4e      	ldr	r3, [pc, #312]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdc6:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='0';
 800cdc8:	4b4d      	ldr	r3, [pc, #308]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	3b09      	subs	r3, #9
 800cdce:	4a4d      	ldr	r2, [pc, #308]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cdd0:	2130      	movs	r1, #48	; 0x30
 800cdd2:	54d1      	strb	r1, [r2, r3]
 800cdd4:	e039      	b.n	800ce4a <Calibration_I_data_Refresh+0x17a>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800cdd6:	4b4a      	ldr	r3, [pc, #296]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b0a      	cmp	r3, #10
 800cddc:	d12f      	bne.n	800ce3e <Calibration_I_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800cdde:	4b48      	ldr	r3, [pc, #288]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	3b01      	subs	r3, #1
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	4b46      	ldr	r3, [pc, #280]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cde8:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cdea:	4b45      	ldr	r3, [pc, #276]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	3b09      	subs	r3, #9
 800cdf0:	4a44      	ldr	r2, [pc, #272]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cdf2:	5cd3      	ldrb	r3, [r2, r3]
 800cdf4:	2b30      	cmp	r3, #48	; 0x30
 800cdf6:	d915      	bls.n	800ce24 <Calibration_I_data_Refresh+0x154>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800cdf8:	4b41      	ldr	r3, [pc, #260]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	3b09      	subs	r3, #9
 800cdfe:	4a41      	ldr	r2, [pc, #260]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce00:	5cd2      	ldrb	r2, [r2, r3]
 800ce02:	3a01      	subs	r2, #1
 800ce04:	b2d1      	uxtb	r1, r2
 800ce06:	4a3f      	ldr	r2, [pc, #252]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce08:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ce0a:	4b3d      	ldr	r3, [pc, #244]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	4b3b      	ldr	r3, [pc, #236]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce14:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800ce16:	4b3a      	ldr	r3, [pc, #232]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	3b09      	subs	r3, #9
 800ce1c:	4a39      	ldr	r2, [pc, #228]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce1e:	2139      	movs	r1, #57	; 0x39
 800ce20:	54d1      	strb	r1, [r2, r3]
 800ce22:	e012      	b.n	800ce4a <Calibration_I_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800ce24:	4b36      	ldr	r3, [pc, #216]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	4b34      	ldr	r3, [pc, #208]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce2e:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='0';
 800ce30:	4b33      	ldr	r3, [pc, #204]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	3b09      	subs	r3, #9
 800ce36:	4a33      	ldr	r2, [pc, #204]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce38:	2130      	movs	r1, #48	; 0x30
 800ce3a:	54d1      	strb	r1, [r2, r3]
 800ce3c:	e005      	b.n	800ce4a <Calibration_I_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Current[Cursor_Position-9]='0';
 800ce3e:	4b30      	ldr	r3, [pc, #192]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	3b09      	subs	r3, #9
 800ce44:	4a2f      	ldr	r2, [pc, #188]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce46:	2130      	movs	r1, #48	; 0x30
 800ce48:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Current[Cursor_Position-9]>'9')
 800ce4a:	4b2d      	ldr	r3, [pc, #180]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	3b09      	subs	r3, #9
 800ce50:	4a2c      	ldr	r2, [pc, #176]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce52:	5cd3      	ldrb	r3, [r2, r3]
 800ce54:	2b39      	cmp	r3, #57	; 0x39
 800ce56:	d94f      	bls.n	800cef8 <Calibration_I_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800ce58:	4b29      	ldr	r3, [pc, #164]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d041      	beq.n	800cee4 <Calibration_I_data_Refresh+0x214>
		{
			String_Calibration_Current[Cursor_Position-9]='0';
 800ce60:	4b27      	ldr	r3, [pc, #156]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	3b09      	subs	r3, #9
 800ce66:	4a27      	ldr	r2, [pc, #156]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce68:	2130      	movs	r1, #48	; 0x30
 800ce6a:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800ce6c:	4b24      	ldr	r3, [pc, #144]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	4b22      	ldr	r3, [pc, #136]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce76:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]++;
 800ce78:	4b21      	ldr	r3, [pc, #132]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	3b09      	subs	r3, #9
 800ce7e:	4a21      	ldr	r2, [pc, #132]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce80:	5cd2      	ldrb	r2, [r2, r3]
 800ce82:	3201      	adds	r2, #1
 800ce84:	b2d1      	uxtb	r1, r2
 800ce86:	4a1f      	ldr	r2, [pc, #124]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce88:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800ce8a:	4b1d      	ldr	r3, [pc, #116]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	3b09      	subs	r3, #9
 800ce90:	4a1c      	ldr	r2, [pc, #112]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800ce92:	5cd3      	ldrb	r3, [r2, r3]
 800ce94:	2b39      	cmp	r3, #57	; 0x39
 800ce96:	d91e      	bls.n	800ced6 <Calibration_I_data_Refresh+0x206>
 800ce98:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d01a      	beq.n	800ced6 <Calibration_I_data_Refresh+0x206>
			{
				String_Calibration_Current[Cursor_Position-9]='0';
 800cea0:	4b17      	ldr	r3, [pc, #92]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	3b09      	subs	r3, #9
 800cea6:	4a17      	ldr	r2, [pc, #92]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cea8:	2130      	movs	r1, #48	; 0x30
 800ceaa:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800ceac:	4b14      	ldr	r3, [pc, #80]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	4b12      	ldr	r3, [pc, #72]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ceb6:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]++;
 800ceb8:	4b11      	ldr	r3, [pc, #68]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	3b09      	subs	r3, #9
 800cebe:	4a11      	ldr	r2, [pc, #68]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cec0:	5cd2      	ldrb	r2, [r2, r3]
 800cec2:	3201      	adds	r2, #1
 800cec4:	b2d1      	uxtb	r1, r2
 800cec6:	4a0f      	ldr	r2, [pc, #60]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cec8:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ceca:	4b0d      	ldr	r3, [pc, #52]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	3301      	adds	r3, #1
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	4b0b      	ldr	r3, [pc, #44]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ced4:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800ced6:	4b0a      	ldr	r3, [pc, #40]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	3301      	adds	r3, #1
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	4b08      	ldr	r3, [pc, #32]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cee0:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]='9';
		}

	}

}
 800cee2:	e009      	b.n	800cef8 <Calibration_I_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800cee4:	4b06      	ldr	r3, [pc, #24]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d105      	bne.n	800cef8 <Calibration_I_data_Refresh+0x228>
			String_Calibration_Current[Cursor_Position-9]='9';
 800ceec:	4b04      	ldr	r3, [pc, #16]	; (800cf00 <Calibration_I_data_Refresh+0x230>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	3b09      	subs	r3, #9
 800cef2:	4a04      	ldr	r2, [pc, #16]	; (800cf04 <Calibration_I_data_Refresh+0x234>)
 800cef4:	2139      	movs	r1, #57	; 0x39
 800cef6:	54d1      	strb	r1, [r2, r3]
}
 800cef8:	46c0      	nop			; (mov r8, r8)
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	46c0      	nop			; (mov r8, r8)
 800cf00:	2000398e 	.word	0x2000398e
 800cf04:	20003098 	.word	0x20003098
 800cf08:	20003384 	.word	0x20003384

0800cf0c <Vset_data_Refresh>:

static void Vset_data_Refresh(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
	String_Voltage[Cursor_Position]+=Flag.Encoder_BF;
 800cf10:	4bb0      	ldr	r3, [pc, #704]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	001a      	movs	r2, r3
 800cf16:	4bb0      	ldr	r3, [pc, #704]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cf18:	5c9a      	ldrb	r2, [r3, r2]
 800cf1a:	4bb0      	ldr	r3, [pc, #704]	; (800d1dc <Vset_data_Refresh+0x2d0>)
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	49ac      	ldr	r1, [pc, #688]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf22:	7809      	ldrb	r1, [r1, #0]
 800cf24:	18d3      	adds	r3, r2, r3
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	4bab      	ldr	r3, [pc, #684]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cf2a:	545a      	strb	r2, [r3, r1]
	if(Cursor_Position==3||Cursor_Position==4)
 800cf2c:	4ba9      	ldr	r3, [pc, #676]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b03      	cmp	r3, #3
 800cf32:	d003      	beq.n	800cf3c <Vset_data_Refresh+0x30>
 800cf34:	4ba7      	ldr	r3, [pc, #668]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	2b04      	cmp	r3, #4
 800cf3a:	d11b      	bne.n	800cf74 <Vset_data_Refresh+0x68>
	{
		if(String_Voltage[Cursor_Position]<'0')
 800cf3c:	4ba5      	ldr	r3, [pc, #660]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	001a      	movs	r2, r3
 800cf42:	4ba5      	ldr	r3, [pc, #660]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cf44:	5c9b      	ldrb	r3, [r3, r2]
 800cf46:	2b2f      	cmp	r3, #47	; 0x2f
 800cf48:	d806      	bhi.n	800cf58 <Vset_data_Refresh+0x4c>
		{
			String_Voltage[Cursor_Position]='0';
 800cf4a:	4ba2      	ldr	r3, [pc, #648]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	001a      	movs	r2, r3
 800cf50:	4ba1      	ldr	r3, [pc, #644]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cf52:	2130      	movs	r1, #48	; 0x30
 800cf54:	5499      	strb	r1, [r3, r2]
			return;
 800cf56:	e13a      	b.n	800d1ce <Vset_data_Refresh+0x2c2>
		}
		if(String_Voltage[Cursor_Position]>'9')
 800cf58:	4b9e      	ldr	r3, [pc, #632]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	001a      	movs	r2, r3
 800cf5e:	4b9e      	ldr	r3, [pc, #632]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cf60:	5c9b      	ldrb	r3, [r3, r2]
 800cf62:	2b39      	cmp	r3, #57	; 0x39
 800cf64:	d906      	bls.n	800cf74 <Vset_data_Refresh+0x68>
		{
			String_Voltage[Cursor_Position]='9';
 800cf66:	4b9b      	ldr	r3, [pc, #620]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	001a      	movs	r2, r3
 800cf6c:	4b9a      	ldr	r3, [pc, #616]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cf6e:	2139      	movs	r1, #57	; 0x39
 800cf70:	5499      	strb	r1, [r3, r2]
			return;
 800cf72:	e12c      	b.n	800d1ce <Vset_data_Refresh+0x2c2>
		}
	}

	if(String_Voltage[Cursor_Position]<'0')
 800cf74:	4b97      	ldr	r3, [pc, #604]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	001a      	movs	r2, r3
 800cf7a:	4b97      	ldr	r3, [pc, #604]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cf7c:	5c9b      	ldrb	r3, [r3, r2]
 800cf7e:	2b2f      	cmp	r3, #47	; 0x2f
 800cf80:	d900      	bls.n	800cf84 <Vset_data_Refresh+0x78>
 800cf82:	e0a0      	b.n	800d0c6 <Vset_data_Refresh+0x1ba>
	{
		/*第三位退位*/
		if(Cursor_Position==2)
 800cf84:	4b93      	ldr	r3, [pc, #588]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d163      	bne.n	800d054 <Vset_data_Refresh+0x148>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cf8c:	4b91      	ldr	r3, [pc, #580]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	4b8f      	ldr	r3, [pc, #572]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf96:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800cf98:	4b8e      	ldr	r3, [pc, #568]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	001a      	movs	r2, r3
 800cf9e:	4b8e      	ldr	r3, [pc, #568]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cfa0:	5c9b      	ldrb	r3, [r3, r2]
 800cfa2:	2b30      	cmp	r3, #48	; 0x30
 800cfa4:	d914      	bls.n	800cfd0 <Vset_data_Refresh+0xc4>
			{
				String_Voltage[Cursor_Position]--;
 800cfa6:	4b8b      	ldr	r3, [pc, #556]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	4a8b      	ldr	r2, [pc, #556]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cfac:	5cd2      	ldrb	r2, [r2, r3]
 800cfae:	3a01      	subs	r2, #1
 800cfb0:	b2d1      	uxtb	r1, r2
 800cfb2:	4a89      	ldr	r2, [pc, #548]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cfb4:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cfb6:	4b87      	ldr	r3, [pc, #540]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	4b85      	ldr	r3, [pc, #532]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfc0:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800cfc2:	4b84      	ldr	r3, [pc, #528]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	001a      	movs	r2, r3
 800cfc8:	4b83      	ldr	r3, [pc, #524]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cfca:	2139      	movs	r1, #57	; 0x39
 800cfcc:	5499      	strb	r1, [r3, r2]
 800cfce:	e07a      	b.n	800d0c6 <Vset_data_Refresh+0x1ba>

			}
			else if(String_Voltage[Cursor_Position]=='0')
 800cfd0:	4b80      	ldr	r3, [pc, #512]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	001a      	movs	r2, r3
 800cfd6:	4b80      	ldr	r3, [pc, #512]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cfd8:	5c9b      	ldrb	r3, [r3, r2]
 800cfda:	2b30      	cmp	r3, #48	; 0x30
 800cfdc:	d173      	bne.n	800d0c6 <Vset_data_Refresh+0x1ba>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cfde:	4b7d      	ldr	r3, [pc, #500]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	4b7b      	ldr	r3, [pc, #492]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfe8:	701a      	strb	r2, [r3, #0]
				if(String_Voltage[Cursor_Position]>'0')
 800cfea:	4b7a      	ldr	r3, [pc, #488]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	001a      	movs	r2, r3
 800cff0:	4b79      	ldr	r3, [pc, #484]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cff2:	5c9b      	ldrb	r3, [r3, r2]
 800cff4:	2b30      	cmp	r3, #48	; 0x30
 800cff6:	d920      	bls.n	800d03a <Vset_data_Refresh+0x12e>
				{
					String_Voltage[Cursor_Position]--;
 800cff8:	4b76      	ldr	r3, [pc, #472]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	4a76      	ldr	r2, [pc, #472]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800cffe:	5cd2      	ldrb	r2, [r2, r3]
 800d000:	3a01      	subs	r2, #1
 800d002:	b2d1      	uxtb	r1, r2
 800d004:	4a74      	ldr	r2, [pc, #464]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d006:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d008:	4b72      	ldr	r3, [pc, #456]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	3301      	adds	r3, #1
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	4b70      	ldr	r3, [pc, #448]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d012:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800d014:	4b6f      	ldr	r3, [pc, #444]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	001a      	movs	r2, r3
 800d01a:	4b6f      	ldr	r3, [pc, #444]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d01c:	2139      	movs	r1, #57	; 0x39
 800d01e:	5499      	strb	r1, [r3, r2]
					Cursor_Position++;
 800d020:	4b6c      	ldr	r3, [pc, #432]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	3301      	adds	r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	4b6a      	ldr	r3, [pc, #424]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d02a:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800d02c:	4b69      	ldr	r3, [pc, #420]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	001a      	movs	r2, r3
 800d032:	4b69      	ldr	r3, [pc, #420]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d034:	2139      	movs	r1, #57	; 0x39
 800d036:	5499      	strb	r1, [r3, r2]
 800d038:	e045      	b.n	800d0c6 <Vset_data_Refresh+0x1ba>


				}
				else
				{
					Cursor_Position+=2;
 800d03a:	4b66      	ldr	r3, [pc, #408]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	3302      	adds	r3, #2
 800d040:	b2da      	uxtb	r2, r3
 800d042:	4b64      	ldr	r3, [pc, #400]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d044:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='0';
 800d046:	4b63      	ldr	r3, [pc, #396]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	001a      	movs	r2, r3
 800d04c:	4b62      	ldr	r3, [pc, #392]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d04e:	2130      	movs	r1, #48	; 0x30
 800d050:	5499      	strb	r1, [r3, r2]
 800d052:	e038      	b.n	800d0c6 <Vset_data_Refresh+0x1ba>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1)
 800d054:	4b5f      	ldr	r3, [pc, #380]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d12e      	bne.n	800d0ba <Vset_data_Refresh+0x1ae>
		{
			Cursor_Position--;
 800d05c:	4b5d      	ldr	r3, [pc, #372]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	3b01      	subs	r3, #1
 800d062:	b2da      	uxtb	r2, r3
 800d064:	4b5b      	ldr	r3, [pc, #364]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d066:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800d068:	4b5a      	ldr	r3, [pc, #360]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	001a      	movs	r2, r3
 800d06e:	4b5a      	ldr	r3, [pc, #360]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d070:	5c9b      	ldrb	r3, [r3, r2]
 800d072:	2b30      	cmp	r3, #48	; 0x30
 800d074:	d914      	bls.n	800d0a0 <Vset_data_Refresh+0x194>
			{
				String_Voltage[Cursor_Position]--;
 800d076:	4b57      	ldr	r3, [pc, #348]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	4a57      	ldr	r2, [pc, #348]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d07c:	5cd2      	ldrb	r2, [r2, r3]
 800d07e:	3a01      	subs	r2, #1
 800d080:	b2d1      	uxtb	r1, r2
 800d082:	4a55      	ldr	r2, [pc, #340]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d084:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d086:	4b53      	ldr	r3, [pc, #332]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	3301      	adds	r3, #1
 800d08c:	b2da      	uxtb	r2, r3
 800d08e:	4b51      	ldr	r3, [pc, #324]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d090:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800d092:	4b50      	ldr	r3, [pc, #320]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	001a      	movs	r2, r3
 800d098:	4b4f      	ldr	r3, [pc, #316]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d09a:	2139      	movs	r1, #57	; 0x39
 800d09c:	5499      	strb	r1, [r3, r2]
 800d09e:	e012      	b.n	800d0c6 <Vset_data_Refresh+0x1ba>

			}
			else
			{
				Cursor_Position++;
 800d0a0:	4b4c      	ldr	r3, [pc, #304]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	4b4a      	ldr	r3, [pc, #296]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0aa:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='0';
 800d0ac:	4b49      	ldr	r3, [pc, #292]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	001a      	movs	r2, r3
 800d0b2:	4b49      	ldr	r3, [pc, #292]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d0b4:	2130      	movs	r1, #48	; 0x30
 800d0b6:	5499      	strb	r1, [r3, r2]
 800d0b8:	e005      	b.n	800d0c6 <Vset_data_Refresh+0x1ba>
			}
		}
		else String_Voltage[Cursor_Position]='0';
 800d0ba:	4b46      	ldr	r3, [pc, #280]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	001a      	movs	r2, r3
 800d0c0:	4b45      	ldr	r3, [pc, #276]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d0c2:	2130      	movs	r1, #48	; 0x30
 800d0c4:	5499      	strb	r1, [r3, r2]
	}
	if(String_Voltage[Cursor_Position]>'9')
 800d0c6:	4b43      	ldr	r3, [pc, #268]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	001a      	movs	r2, r3
 800d0cc:	4b42      	ldr	r3, [pc, #264]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d0ce:	5c9b      	ldrb	r3, [r3, r2]
 800d0d0:	2b39      	cmp	r3, #57	; 0x39
 800d0d2:	d94d      	bls.n	800d170 <Vset_data_Refresh+0x264>
	{
		/*进位处理*/
		if(Cursor_Position!=0)
 800d0d4:	4b3f      	ldr	r3, [pc, #252]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d03f      	beq.n	800d15c <Vset_data_Refresh+0x250>
		{
			String_Voltage[Cursor_Position]='0';
 800d0dc:	4b3d      	ldr	r3, [pc, #244]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	001a      	movs	r2, r3
 800d0e2:	4b3d      	ldr	r3, [pc, #244]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d0e4:	2130      	movs	r1, #48	; 0x30
 800d0e6:	5499      	strb	r1, [r3, r2]
			Cursor_Position--;
 800d0e8:	4b3a      	ldr	r3, [pc, #232]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	4b38      	ldr	r3, [pc, #224]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0f2:	701a      	strb	r2, [r3, #0]
			String_Voltage[Cursor_Position]++;
 800d0f4:	4b37      	ldr	r3, [pc, #220]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	4a37      	ldr	r2, [pc, #220]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d0fa:	5cd2      	ldrb	r2, [r2, r3]
 800d0fc:	3201      	adds	r2, #1
 800d0fe:	b2d1      	uxtb	r1, r2
 800d100:	4a35      	ldr	r2, [pc, #212]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d102:	54d1      	strb	r1, [r2, r3]
			if(String_Voltage[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800d104:	4b33      	ldr	r3, [pc, #204]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	001a      	movs	r2, r3
 800d10a:	4b33      	ldr	r3, [pc, #204]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d10c:	5c9b      	ldrb	r3, [r3, r2]
 800d10e:	2b39      	cmp	r3, #57	; 0x39
 800d110:	d91d      	bls.n	800d14e <Vset_data_Refresh+0x242>
 800d112:	4b30      	ldr	r3, [pc, #192]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d019      	beq.n	800d14e <Vset_data_Refresh+0x242>
			{
				String_Voltage[Cursor_Position]='0';
 800d11a:	4b2e      	ldr	r3, [pc, #184]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	001a      	movs	r2, r3
 800d120:	4b2d      	ldr	r3, [pc, #180]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d122:	2130      	movs	r1, #48	; 0x30
 800d124:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800d126:	4b2b      	ldr	r3, [pc, #172]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	4b29      	ldr	r3, [pc, #164]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d130:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]++;
 800d132:	4b28      	ldr	r3, [pc, #160]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	4a28      	ldr	r2, [pc, #160]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d138:	5cd2      	ldrb	r2, [r2, r3]
 800d13a:	3201      	adds	r2, #1
 800d13c:	b2d1      	uxtb	r1, r2
 800d13e:	4a26      	ldr	r2, [pc, #152]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d140:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d142:	4b24      	ldr	r3, [pc, #144]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	3301      	adds	r3, #1
 800d148:	b2da      	uxtb	r2, r3
 800d14a:	4b22      	ldr	r3, [pc, #136]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d14c:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d14e:	4b21      	ldr	r3, [pc, #132]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	3301      	adds	r3, #1
 800d154:	b2da      	uxtb	r2, r3
 800d156:	4b1f      	ldr	r3, [pc, #124]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	e009      	b.n	800d170 <Vset_data_Refresh+0x264>
		}
		else if(Cursor_Position==0)
 800d15c:	4b1d      	ldr	r3, [pc, #116]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d105      	bne.n	800d170 <Vset_data_Refresh+0x264>
		{
			String_Voltage[Cursor_Position]='9';
 800d164:	4b1b      	ldr	r3, [pc, #108]	; (800d1d4 <Vset_data_Refresh+0x2c8>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	001a      	movs	r2, r3
 800d16a:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d16c:	2139      	movs	r1, #57	; 0x39
 800d16e:	5499      	strb	r1, [r3, r2]
		}

	}

	if(Inner_Mode==ENABLE)
 800d170:	4b1b      	ldr	r3, [pc, #108]	; (800d1e0 <Vset_data_Refresh+0x2d4>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d12a      	bne.n	800d1ce <Vset_data_Refresh+0x2c2>
	{
		/*确认设定电压，发送给mini board*/
		Set_Voltage = String_To_Float(String_Voltage)*100;
 800d178:	4b17      	ldr	r3, [pc, #92]	; (800d1d8 <Vset_data_Refresh+0x2cc>)
 800d17a:	0018      	movs	r0, r3
 800d17c:	f001 fa1a 	bl	800e5b4 <String_To_Float>
 800d180:	1c03      	adds	r3, r0, #0
 800d182:	4918      	ldr	r1, [pc, #96]	; (800d1e4 <Vset_data_Refresh+0x2d8>)
 800d184:	1c18      	adds	r0, r3, #0
 800d186:	f7f3 fd6b 	bl	8000c60 <__aeabi_fmul>
 800d18a:	1c03      	adds	r3, r0, #0
 800d18c:	1c18      	adds	r0, r3, #0
 800d18e:	f7f3 f9cb 	bl	8000528 <__aeabi_f2uiz>
 800d192:	0003      	movs	r3, r0
 800d194:	b29a      	uxth	r2, r3
 800d196:	4b14      	ldr	r3, [pc, #80]	; (800d1e8 <Vset_data_Refresh+0x2dc>)
 800d198:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 14900) Set_Voltage = 14900;//150V
 800d19a:	4b13      	ldr	r3, [pc, #76]	; (800d1e8 <Vset_data_Refresh+0x2dc>)
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	4a13      	ldr	r2, [pc, #76]	; (800d1ec <Vset_data_Refresh+0x2e0>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d902      	bls.n	800d1aa <Vset_data_Refresh+0x29e>
 800d1a4:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <Vset_data_Refresh+0x2dc>)
 800d1a6:	4a11      	ldr	r2, [pc, #68]	; (800d1ec <Vset_data_Refresh+0x2e0>)
 800d1a8:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage <100||Set_Voltage==100)	Set_Voltage=100;
 800d1aa:	4b0f      	ldr	r3, [pc, #60]	; (800d1e8 <Vset_data_Refresh+0x2dc>)
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	2b63      	cmp	r3, #99	; 0x63
 800d1b0:	d903      	bls.n	800d1ba <Vset_data_Refresh+0x2ae>
 800d1b2:	4b0d      	ldr	r3, [pc, #52]	; (800d1e8 <Vset_data_Refresh+0x2dc>)
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	2b64      	cmp	r3, #100	; 0x64
 800d1b8:	d102      	bne.n	800d1c0 <Vset_data_Refresh+0x2b4>
 800d1ba:	4b0b      	ldr	r3, [pc, #44]	; (800d1e8 <Vset_data_Refresh+0x2dc>)
 800d1bc:	2264      	movs	r2, #100	; 0x64
 800d1be:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,4,Set_Voltage);
 800d1c0:	4b09      	ldr	r3, [pc, #36]	; (800d1e8 <Vset_data_Refresh+0x2dc>)
 800d1c2:	881b      	ldrh	r3, [r3, #0]
 800d1c4:	001a      	movs	r2, r3
 800d1c6:	2104      	movs	r1, #4
 800d1c8:	2001      	movs	r0, #1
 800d1ca:	f7ff fb09 	bl	800c7e0 <DAC_Cmd_send>

	}

}
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	46c0      	nop			; (mov r8, r8)
 800d1d4:	2000398e 	.word	0x2000398e
 800d1d8:	20003058 	.word	0x20003058
 800d1dc:	20003384 	.word	0x20003384
 800d1e0:	20003986 	.word	0x20003986
 800d1e4:	42c80000 	.word	0x42c80000
 800d1e8:	20002fd8 	.word	0x20002fd8
 800d1ec:	00003a34 	.word	0x00003a34

0800d1f0 <Iset_data_Refresh>:


static void Iset_data_Refresh(void)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	af00      	add	r7, sp, #0
	String_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800d1f4:	4bb3      	ldr	r3, [pc, #716]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	3b09      	subs	r3, #9
 800d1fa:	4ab3      	ldr	r2, [pc, #716]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d1fc:	5cd1      	ldrb	r1, [r2, r3]
 800d1fe:	4bb3      	ldr	r3, [pc, #716]	; (800d4cc <Iset_data_Refresh+0x2dc>)
 800d200:	69db      	ldr	r3, [r3, #28]
 800d202:	b2da      	uxtb	r2, r3
 800d204:	4baf      	ldr	r3, [pc, #700]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	3b09      	subs	r3, #9
 800d20a:	188a      	adds	r2, r1, r2
 800d20c:	b2d1      	uxtb	r1, r2
 800d20e:	4aae      	ldr	r2, [pc, #696]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d210:	54d1      	strb	r1, [r2, r3]
	if(Cursor_Position==13||Cursor_Position==14)
 800d212:	4bac      	ldr	r3, [pc, #688]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	2b0d      	cmp	r3, #13
 800d218:	d003      	beq.n	800d222 <Iset_data_Refresh+0x32>
 800d21a:	4baa      	ldr	r3, [pc, #680]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b0e      	cmp	r3, #14
 800d220:	d11b      	bne.n	800d25a <Iset_data_Refresh+0x6a>
	{
		if(String_Current[Cursor_Position-9]<'0')
 800d222:	4ba8      	ldr	r3, [pc, #672]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3b09      	subs	r3, #9
 800d228:	4aa7      	ldr	r2, [pc, #668]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d22a:	5cd3      	ldrb	r3, [r2, r3]
 800d22c:	2b2f      	cmp	r3, #47	; 0x2f
 800d22e:	d806      	bhi.n	800d23e <Iset_data_Refresh+0x4e>
		{
			String_Current[Cursor_Position-9]='0';
 800d230:	4ba4      	ldr	r3, [pc, #656]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	3b09      	subs	r3, #9
 800d236:	4aa4      	ldr	r2, [pc, #656]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d238:	2130      	movs	r1, #48	; 0x30
 800d23a:	54d1      	strb	r1, [r2, r3]
			return;
 800d23c:	e13f      	b.n	800d4be <Iset_data_Refresh+0x2ce>
		}
		if(String_Current[Cursor_Position-9]>'9')
 800d23e:	4ba1      	ldr	r3, [pc, #644]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	3b09      	subs	r3, #9
 800d244:	4aa0      	ldr	r2, [pc, #640]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d246:	5cd3      	ldrb	r3, [r2, r3]
 800d248:	2b39      	cmp	r3, #57	; 0x39
 800d24a:	d906      	bls.n	800d25a <Iset_data_Refresh+0x6a>
		{
			String_Current[Cursor_Position-9]='9';
 800d24c:	4b9d      	ldr	r3, [pc, #628]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	3b09      	subs	r3, #9
 800d252:	4a9d      	ldr	r2, [pc, #628]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d254:	2139      	movs	r1, #57	; 0x39
 800d256:	54d1      	strb	r1, [r2, r3]
			return;
 800d258:	e131      	b.n	800d4be <Iset_data_Refresh+0x2ce>
		}
	}
	if(String_Current[Cursor_Position-9]<'0')//退位
 800d25a:	4b9a      	ldr	r3, [pc, #616]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	3b09      	subs	r3, #9
 800d260:	4a99      	ldr	r2, [pc, #612]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d262:	5cd3      	ldrb	r3, [r2, r3]
 800d264:	2b2f      	cmp	r3, #47	; 0x2f
 800d266:	d900      	bls.n	800d26a <Iset_data_Refresh+0x7a>
 800d268:	e0a3      	b.n	800d3b2 <Iset_data_Refresh+0x1c2>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800d26a:	4b96      	ldr	r3, [pc, #600]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b0b      	cmp	r3, #11
 800d270:	d165      	bne.n	800d33e <Iset_data_Refresh+0x14e>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d272:	4b94      	ldr	r3, [pc, #592]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	3b01      	subs	r3, #1
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	4b92      	ldr	r3, [pc, #584]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d27c:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d27e:	4b91      	ldr	r3, [pc, #580]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	3b09      	subs	r3, #9
 800d284:	4a90      	ldr	r2, [pc, #576]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d286:	5cd3      	ldrb	r3, [r2, r3]
 800d288:	2b30      	cmp	r3, #48	; 0x30
 800d28a:	d915      	bls.n	800d2b8 <Iset_data_Refresh+0xc8>
			{
				String_Current[Cursor_Position-9]--;
 800d28c:	4b8d      	ldr	r3, [pc, #564]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	3b09      	subs	r3, #9
 800d292:	4a8d      	ldr	r2, [pc, #564]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d294:	5cd2      	ldrb	r2, [r2, r3]
 800d296:	3a01      	subs	r2, #1
 800d298:	b2d1      	uxtb	r1, r2
 800d29a:	4a8b      	ldr	r2, [pc, #556]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d29c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d29e:	4b89      	ldr	r3, [pc, #548]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	4b87      	ldr	r3, [pc, #540]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2a8:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d2aa:	4b86      	ldr	r3, [pc, #536]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	3b09      	subs	r3, #9
 800d2b0:	4a85      	ldr	r2, [pc, #532]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d2b2:	2139      	movs	r1, #57	; 0x39
 800d2b4:	54d1      	strb	r1, [r2, r3]
 800d2b6:	e07c      	b.n	800d3b2 <Iset_data_Refresh+0x1c2>

			}
			else if(String_Current[Cursor_Position-9]=='0')
 800d2b8:	4b82      	ldr	r3, [pc, #520]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	3b09      	subs	r3, #9
 800d2be:	4a82      	ldr	r2, [pc, #520]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d2c0:	5cd3      	ldrb	r3, [r2, r3]
 800d2c2:	2b30      	cmp	r3, #48	; 0x30
 800d2c4:	d175      	bne.n	800d3b2 <Iset_data_Refresh+0x1c2>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800d2c6:	4b7f      	ldr	r3, [pc, #508]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	4b7d      	ldr	r3, [pc, #500]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2d0:	701a      	strb	r2, [r3, #0]
				if(String_Current[Cursor_Position-9]>'0')
 800d2d2:	4b7c      	ldr	r3, [pc, #496]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	3b09      	subs	r3, #9
 800d2d8:	4a7b      	ldr	r2, [pc, #492]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d2da:	5cd3      	ldrb	r3, [r2, r3]
 800d2dc:	2b30      	cmp	r3, #48	; 0x30
 800d2de:	d921      	bls.n	800d324 <Iset_data_Refresh+0x134>
				{
					String_Current[Cursor_Position-9]--;
 800d2e0:	4b78      	ldr	r3, [pc, #480]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	3b09      	subs	r3, #9
 800d2e6:	4a78      	ldr	r2, [pc, #480]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d2e8:	5cd2      	ldrb	r2, [r2, r3]
 800d2ea:	3a01      	subs	r2, #1
 800d2ec:	b2d1      	uxtb	r1, r2
 800d2ee:	4a76      	ldr	r2, [pc, #472]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d2f0:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d2f2:	4b74      	ldr	r3, [pc, #464]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	4b72      	ldr	r3, [pc, #456]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d2fc:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d2fe:	4b71      	ldr	r3, [pc, #452]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	3b09      	subs	r3, #9
 800d304:	4a70      	ldr	r2, [pc, #448]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d306:	2139      	movs	r1, #57	; 0x39
 800d308:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d30a:	4b6e      	ldr	r3, [pc, #440]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	3301      	adds	r3, #1
 800d310:	b2da      	uxtb	r2, r3
 800d312:	4b6c      	ldr	r3, [pc, #432]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d314:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d316:	4b6b      	ldr	r3, [pc, #428]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	3b09      	subs	r3, #9
 800d31c:	4a6a      	ldr	r2, [pc, #424]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d31e:	2139      	movs	r1, #57	; 0x39
 800d320:	54d1      	strb	r1, [r2, r3]
 800d322:	e046      	b.n	800d3b2 <Iset_data_Refresh+0x1c2>


				}
				else
				{
					Cursor_Position+=2;
 800d324:	4b67      	ldr	r3, [pc, #412]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	3302      	adds	r3, #2
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	4b65      	ldr	r3, [pc, #404]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d32e:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='0';
 800d330:	4b64      	ldr	r3, [pc, #400]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	3b09      	subs	r3, #9
 800d336:	4a64      	ldr	r2, [pc, #400]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d338:	2130      	movs	r1, #48	; 0x30
 800d33a:	54d1      	strb	r1, [r2, r3]
 800d33c:	e039      	b.n	800d3b2 <Iset_data_Refresh+0x1c2>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800d33e:	4b61      	ldr	r3, [pc, #388]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b0a      	cmp	r3, #10
 800d344:	d12f      	bne.n	800d3a6 <Iset_data_Refresh+0x1b6>
		{
			Cursor_Position--;
 800d346:	4b5f      	ldr	r3, [pc, #380]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	3b01      	subs	r3, #1
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	4b5d      	ldr	r3, [pc, #372]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d350:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d352:	4b5c      	ldr	r3, [pc, #368]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	3b09      	subs	r3, #9
 800d358:	4a5b      	ldr	r2, [pc, #364]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d35a:	5cd3      	ldrb	r3, [r2, r3]
 800d35c:	2b30      	cmp	r3, #48	; 0x30
 800d35e:	d915      	bls.n	800d38c <Iset_data_Refresh+0x19c>
			{
				String_Current[Cursor_Position-9]--;
 800d360:	4b58      	ldr	r3, [pc, #352]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	3b09      	subs	r3, #9
 800d366:	4a58      	ldr	r2, [pc, #352]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d368:	5cd2      	ldrb	r2, [r2, r3]
 800d36a:	3a01      	subs	r2, #1
 800d36c:	b2d1      	uxtb	r1, r2
 800d36e:	4a56      	ldr	r2, [pc, #344]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d370:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d372:	4b54      	ldr	r3, [pc, #336]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	3301      	adds	r3, #1
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	4b52      	ldr	r3, [pc, #328]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d37c:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d37e:	4b51      	ldr	r3, [pc, #324]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	3b09      	subs	r3, #9
 800d384:	4a50      	ldr	r2, [pc, #320]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d386:	2139      	movs	r1, #57	; 0x39
 800d388:	54d1      	strb	r1, [r2, r3]
 800d38a:	e012      	b.n	800d3b2 <Iset_data_Refresh+0x1c2>

			}
			else
			{
				Cursor_Position++;
 800d38c:	4b4d      	ldr	r3, [pc, #308]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	3301      	adds	r3, #1
 800d392:	b2da      	uxtb	r2, r3
 800d394:	4b4b      	ldr	r3, [pc, #300]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d396:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='0';
 800d398:	4b4a      	ldr	r3, [pc, #296]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	3b09      	subs	r3, #9
 800d39e:	4a4a      	ldr	r2, [pc, #296]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d3a0:	2130      	movs	r1, #48	; 0x30
 800d3a2:	54d1      	strb	r1, [r2, r3]
 800d3a4:	e005      	b.n	800d3b2 <Iset_data_Refresh+0x1c2>
			}
		}
		else String_Current[Cursor_Position-9]='0';
 800d3a6:	4b47      	ldr	r3, [pc, #284]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	3b09      	subs	r3, #9
 800d3ac:	4a46      	ldr	r2, [pc, #280]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d3ae:	2130      	movs	r1, #48	; 0x30
 800d3b0:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Current[Cursor_Position-9]>'9')
 800d3b2:	4b44      	ldr	r3, [pc, #272]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	3b09      	subs	r3, #9
 800d3b8:	4a43      	ldr	r2, [pc, #268]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d3ba:	5cd3      	ldrb	r3, [r2, r3]
 800d3bc:	2b39      	cmp	r3, #57	; 0x39
 800d3be:	d94f      	bls.n	800d460 <Iset_data_Refresh+0x270>
	{

		if(Cursor_Position!=0)
 800d3c0:	4b40      	ldr	r3, [pc, #256]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d041      	beq.n	800d44c <Iset_data_Refresh+0x25c>
		{
			String_Current[Cursor_Position-9]='0';
 800d3c8:	4b3e      	ldr	r3, [pc, #248]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	3b09      	subs	r3, #9
 800d3ce:	4a3e      	ldr	r2, [pc, #248]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d3d0:	2130      	movs	r1, #48	; 0x30
 800d3d2:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d3d4:	4b3b      	ldr	r3, [pc, #236]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	4b39      	ldr	r3, [pc, #228]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3de:	701a      	strb	r2, [r3, #0]
			String_Current[Cursor_Position-9]++;
 800d3e0:	4b38      	ldr	r3, [pc, #224]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	3b09      	subs	r3, #9
 800d3e6:	4a38      	ldr	r2, [pc, #224]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d3e8:	5cd2      	ldrb	r2, [r2, r3]
 800d3ea:	3201      	adds	r2, #1
 800d3ec:	b2d1      	uxtb	r1, r2
 800d3ee:	4a36      	ldr	r2, [pc, #216]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d3f0:	54d1      	strb	r1, [r2, r3]
			if(String_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800d3f2:	4b34      	ldr	r3, [pc, #208]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	3b09      	subs	r3, #9
 800d3f8:	4a33      	ldr	r2, [pc, #204]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d3fa:	5cd3      	ldrb	r3, [r2, r3]
 800d3fc:	2b39      	cmp	r3, #57	; 0x39
 800d3fe:	d91e      	bls.n	800d43e <Iset_data_Refresh+0x24e>
 800d400:	4b30      	ldr	r3, [pc, #192]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01a      	beq.n	800d43e <Iset_data_Refresh+0x24e>
			{
				String_Current[Cursor_Position-9]='0';
 800d408:	4b2e      	ldr	r3, [pc, #184]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	3b09      	subs	r3, #9
 800d40e:	4a2e      	ldr	r2, [pc, #184]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d410:	2130      	movs	r1, #48	; 0x30
 800d412:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d414:	4b2b      	ldr	r3, [pc, #172]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	3b01      	subs	r3, #1
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	4b29      	ldr	r3, [pc, #164]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d41e:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]++;
 800d420:	4b28      	ldr	r3, [pc, #160]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	3b09      	subs	r3, #9
 800d426:	4a28      	ldr	r2, [pc, #160]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d428:	5cd2      	ldrb	r2, [r2, r3]
 800d42a:	3201      	adds	r2, #1
 800d42c:	b2d1      	uxtb	r1, r2
 800d42e:	4a26      	ldr	r2, [pc, #152]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d430:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d432:	4b24      	ldr	r3, [pc, #144]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	3301      	adds	r3, #1
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	4b22      	ldr	r3, [pc, #136]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d43c:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d43e:	4b21      	ldr	r3, [pc, #132]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	3301      	adds	r3, #1
 800d444:	b2da      	uxtb	r2, r3
 800d446:	4b1f      	ldr	r3, [pc, #124]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d448:	701a      	strb	r2, [r3, #0]
 800d44a:	e009      	b.n	800d460 <Iset_data_Refresh+0x270>
		}
		else if(Cursor_Position==0)
 800d44c:	4b1d      	ldr	r3, [pc, #116]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d105      	bne.n	800d460 <Iset_data_Refresh+0x270>
		{
			String_Current[Cursor_Position-9]='9';
 800d454:	4b1b      	ldr	r3, [pc, #108]	; (800d4c4 <Iset_data_Refresh+0x2d4>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	3b09      	subs	r3, #9
 800d45a:	4a1b      	ldr	r2, [pc, #108]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d45c:	2139      	movs	r1, #57	; 0x39
 800d45e:	54d1      	strb	r1, [r2, r3]
		}

	}
	if(Inner_Mode==ENABLE)
 800d460:	4b1b      	ldr	r3, [pc, #108]	; (800d4d0 <Iset_data_Refresh+0x2e0>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d12a      	bne.n	800d4be <Iset_data_Refresh+0x2ce>
	{
		/*确认设定电压，发送给mini board*/
		Set_Current = String_To_Float(String_Current)*100;
 800d468:	4b17      	ldr	r3, [pc, #92]	; (800d4c8 <Iset_data_Refresh+0x2d8>)
 800d46a:	0018      	movs	r0, r3
 800d46c:	f001 f8a2 	bl	800e5b4 <String_To_Float>
 800d470:	1c03      	adds	r3, r0, #0
 800d472:	4918      	ldr	r1, [pc, #96]	; (800d4d4 <Iset_data_Refresh+0x2e4>)
 800d474:	1c18      	adds	r0, r3, #0
 800d476:	f7f3 fbf3 	bl	8000c60 <__aeabi_fmul>
 800d47a:	1c03      	adds	r3, r0, #0
 800d47c:	1c18      	adds	r0, r3, #0
 800d47e:	f7f3 f853 	bl	8000528 <__aeabi_f2uiz>
 800d482:	0003      	movs	r3, r0
 800d484:	b29a      	uxth	r2, r3
 800d486:	4b14      	ldr	r3, [pc, #80]	; (800d4d8 <Iset_data_Refresh+0x2e8>)
 800d488:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 4900) Set_Current = 4900;//150V
 800d48a:	4b13      	ldr	r3, [pc, #76]	; (800d4d8 <Iset_data_Refresh+0x2e8>)
 800d48c:	881b      	ldrh	r3, [r3, #0]
 800d48e:	4a13      	ldr	r2, [pc, #76]	; (800d4dc <Iset_data_Refresh+0x2ec>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d902      	bls.n	800d49a <Iset_data_Refresh+0x2aa>
 800d494:	4b10      	ldr	r3, [pc, #64]	; (800d4d8 <Iset_data_Refresh+0x2e8>)
 800d496:	4a11      	ldr	r2, [pc, #68]	; (800d4dc <Iset_data_Refresh+0x2ec>)
 800d498:	801a      	strh	r2, [r3, #0]
		if(Set_Current <100||Set_Current==100)	Set_Current=100;
 800d49a:	4b0f      	ldr	r3, [pc, #60]	; (800d4d8 <Iset_data_Refresh+0x2e8>)
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	2b63      	cmp	r3, #99	; 0x63
 800d4a0:	d903      	bls.n	800d4aa <Iset_data_Refresh+0x2ba>
 800d4a2:	4b0d      	ldr	r3, [pc, #52]	; (800d4d8 <Iset_data_Refresh+0x2e8>)
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	2b64      	cmp	r3, #100	; 0x64
 800d4a8:	d102      	bne.n	800d4b0 <Iset_data_Refresh+0x2c0>
 800d4aa:	4b0b      	ldr	r3, [pc, #44]	; (800d4d8 <Iset_data_Refresh+0x2e8>)
 800d4ac:	2264      	movs	r2, #100	; 0x64
 800d4ae:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,5,Set_Current);
 800d4b0:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <Iset_data_Refresh+0x2e8>)
 800d4b2:	881b      	ldrh	r3, [r3, #0]
 800d4b4:	001a      	movs	r2, r3
 800d4b6:	2105      	movs	r1, #5
 800d4b8:	2001      	movs	r0, #1
 800d4ba:	f7ff f991 	bl	800c7e0 <DAC_Cmd_send>

	}

}
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	2000398e 	.word	0x2000398e
 800d4c8:	20003060 	.word	0x20003060
 800d4cc:	20003384 	.word	0x20003384
 800d4d0:	20003986 	.word	0x20003986
 800d4d4:	42c80000 	.word	0x42c80000
 800d4d8:	20002fda 	.word	0x20002fda
 800d4dc:	00001324 	.word	0x00001324

0800d4e0 <VRate_data_Refresh>:



static void VRate_data_Refresh(void)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
	String_V_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800d4e4:	4bdc      	ldr	r3, [pc, #880]	; (800d858 <VRate_data_Refresh+0x378>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	3b06      	subs	r3, #6
 800d4ea:	4adc      	ldr	r2, [pc, #880]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d4ec:	5cd1      	ldrb	r1, [r2, r3]
 800d4ee:	4bdc      	ldr	r3, [pc, #880]	; (800d860 <VRate_data_Refresh+0x380>)
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	4bd8      	ldr	r3, [pc, #864]	; (800d858 <VRate_data_Refresh+0x378>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	3b06      	subs	r3, #6
 800d4fa:	188a      	adds	r2, r1, r2
 800d4fc:	b2d1      	uxtb	r1, r2
 800d4fe:	4ad7      	ldr	r2, [pc, #860]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d500:	54d1      	strb	r1, [r2, r3]
	/*退位处理*/
	if(String_V_Rate[Cursor_Position-6]<'0')
 800d502:	4bd5      	ldr	r3, [pc, #852]	; (800d858 <VRate_data_Refresh+0x378>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	3b06      	subs	r3, #6
 800d508:	4ad4      	ldr	r2, [pc, #848]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d50a:	5cd3      	ldrb	r3, [r2, r3]
 800d50c:	2b2f      	cmp	r3, #47	; 0x2f
 800d50e:	d900      	bls.n	800d512 <VRate_data_Refresh+0x32>
 800d510:	e0c2      	b.n	800d698 <VRate_data_Refresh+0x1b8>
	{

		/*小数第二位退位*/
		if(Cursor_Position==3+6)
 800d512:	4bd1      	ldr	r3, [pc, #836]	; (800d858 <VRate_data_Refresh+0x378>)
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	2b09      	cmp	r3, #9
 800d518:	d172      	bne.n	800d600 <VRate_data_Refresh+0x120>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d51a:	4bcf      	ldr	r3, [pc, #828]	; (800d858 <VRate_data_Refresh+0x378>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	3b01      	subs	r3, #1
 800d520:	b2da      	uxtb	r2, r3
 800d522:	4bcd      	ldr	r3, [pc, #820]	; (800d858 <VRate_data_Refresh+0x378>)
 800d524:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')
 800d526:	4bcc      	ldr	r3, [pc, #816]	; (800d858 <VRate_data_Refresh+0x378>)
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	3b06      	subs	r3, #6
 800d52c:	4acb      	ldr	r2, [pc, #812]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d52e:	5cd3      	ldrb	r3, [r2, r3]
 800d530:	2b30      	cmp	r3, #48	; 0x30
 800d532:	d915      	bls.n	800d560 <VRate_data_Refresh+0x80>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d534:	4bc8      	ldr	r3, [pc, #800]	; (800d858 <VRate_data_Refresh+0x378>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	3b06      	subs	r3, #6
 800d53a:	4ac8      	ldr	r2, [pc, #800]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d53c:	5cd2      	ldrb	r2, [r2, r3]
 800d53e:	3a01      	subs	r2, #1
 800d540:	b2d1      	uxtb	r1, r2
 800d542:	4ac6      	ldr	r2, [pc, #792]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d544:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d546:	4bc4      	ldr	r3, [pc, #784]	; (800d858 <VRate_data_Refresh+0x378>)
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	3301      	adds	r3, #1
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	4bc2      	ldr	r3, [pc, #776]	; (800d858 <VRate_data_Refresh+0x378>)
 800d550:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d552:	4bc1      	ldr	r3, [pc, #772]	; (800d858 <VRate_data_Refresh+0x378>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	3b06      	subs	r3, #6
 800d558:	4ac0      	ldr	r2, [pc, #768]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d55a:	2139      	movs	r1, #57	; 0x39
 800d55c:	54d1      	strb	r1, [r2, r3]
 800d55e:	e09b      	b.n	800d698 <VRate_data_Refresh+0x1b8>

			}
			else if(String_V_Rate[Cursor_Position-6]=='0')
 800d560:	4bbd      	ldr	r3, [pc, #756]	; (800d858 <VRate_data_Refresh+0x378>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	3b06      	subs	r3, #6
 800d566:	4abd      	ldr	r2, [pc, #756]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d568:	5cd3      	ldrb	r3, [r2, r3]
 800d56a:	2b30      	cmp	r3, #48	; 0x30
 800d56c:	d000      	beq.n	800d570 <VRate_data_Refresh+0x90>
 800d56e:	e093      	b.n	800d698 <VRate_data_Refresh+0x1b8>
			{
				/*否则再看个位是否大于0*/
				Cursor_Position--;
 800d570:	4bb9      	ldr	r3, [pc, #740]	; (800d858 <VRate_data_Refresh+0x378>)
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	3b01      	subs	r3, #1
 800d576:	b2da      	uxtb	r2, r3
 800d578:	4bb7      	ldr	r3, [pc, #732]	; (800d858 <VRate_data_Refresh+0x378>)
 800d57a:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d57c:	4bb6      	ldr	r3, [pc, #728]	; (800d858 <VRate_data_Refresh+0x378>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	3b01      	subs	r3, #1
 800d582:	b2da      	uxtb	r2, r3
 800d584:	4bb4      	ldr	r3, [pc, #720]	; (800d858 <VRate_data_Refresh+0x378>)
 800d586:	701a      	strb	r2, [r3, #0]
				if(String_V_Rate[Cursor_Position-6]>'0')
 800d588:	4bb3      	ldr	r3, [pc, #716]	; (800d858 <VRate_data_Refresh+0x378>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	3b06      	subs	r3, #6
 800d58e:	4ab3      	ldr	r2, [pc, #716]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d590:	5cd3      	ldrb	r3, [r2, r3]
 800d592:	2b30      	cmp	r3, #48	; 0x30
 800d594:	d927      	bls.n	800d5e6 <VRate_data_Refresh+0x106>
				{
					String_V_Rate[Cursor_Position-6]--;
 800d596:	4bb0      	ldr	r3, [pc, #704]	; (800d858 <VRate_data_Refresh+0x378>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	3b06      	subs	r3, #6
 800d59c:	4aaf      	ldr	r2, [pc, #700]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d59e:	5cd2      	ldrb	r2, [r2, r3]
 800d5a0:	3a01      	subs	r2, #1
 800d5a2:	b2d1      	uxtb	r1, r2
 800d5a4:	4aad      	ldr	r2, [pc, #692]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d5a6:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d5a8:	4bab      	ldr	r3, [pc, #684]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	4ba9      	ldr	r3, [pc, #676]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5b2:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d5b4:	4ba8      	ldr	r3, [pc, #672]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	4ba6      	ldr	r3, [pc, #664]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5be:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数一位
 800d5c0:	4ba5      	ldr	r3, [pc, #660]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	3b06      	subs	r3, #6
 800d5c6:	4aa5      	ldr	r2, [pc, #660]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d5c8:	2139      	movs	r1, #57	; 0x39
 800d5ca:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d5cc:	4ba2      	ldr	r3, [pc, #648]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	4ba0      	ldr	r3, [pc, #640]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5d6:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数二位
 800d5d8:	4b9f      	ldr	r3, [pc, #636]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	3b06      	subs	r3, #6
 800d5de:	4a9f      	ldr	r2, [pc, #636]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d5e0:	2139      	movs	r1, #57	; 0x39
 800d5e2:	54d1      	strb	r1, [r2, r3]
 800d5e4:	e058      	b.n	800d698 <VRate_data_Refresh+0x1b8>


				}
				else
				{
					Cursor_Position+=3;
 800d5e6:	4b9c      	ldr	r3, [pc, #624]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	3303      	adds	r3, #3
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	4b9a      	ldr	r3, [pc, #616]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5f0:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';
 800d5f2:	4b99      	ldr	r3, [pc, #612]	; (800d858 <VRate_data_Refresh+0x378>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	3b06      	subs	r3, #6
 800d5f8:	4a98      	ldr	r2, [pc, #608]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d5fa:	2130      	movs	r1, #48	; 0x30
 800d5fc:	54d1      	strb	r1, [r2, r3]
 800d5fe:	e04b      	b.n	800d698 <VRate_data_Refresh+0x1b8>
				}
			}

		}
		/*小数第一位退位*/
		else if(Cursor_Position==2+6)
 800d600:	4b95      	ldr	r3, [pc, #596]	; (800d858 <VRate_data_Refresh+0x378>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b08      	cmp	r3, #8
 800d606:	d141      	bne.n	800d68c <VRate_data_Refresh+0x1ac>
		{
			Cursor_Position--;
 800d608:	4b93      	ldr	r3, [pc, #588]	; (800d858 <VRate_data_Refresh+0x378>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	3b01      	subs	r3, #1
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	4b91      	ldr	r3, [pc, #580]	; (800d858 <VRate_data_Refresh+0x378>)
 800d612:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d614:	4b90      	ldr	r3, [pc, #576]	; (800d858 <VRate_data_Refresh+0x378>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	3b01      	subs	r3, #1
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	4b8e      	ldr	r3, [pc, #568]	; (800d858 <VRate_data_Refresh+0x378>)
 800d61e:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')//个位
 800d620:	4b8d      	ldr	r3, [pc, #564]	; (800d858 <VRate_data_Refresh+0x378>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	3b06      	subs	r3, #6
 800d626:	4a8d      	ldr	r2, [pc, #564]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d628:	5cd3      	ldrb	r3, [r2, r3]
 800d62a:	2b30      	cmp	r3, #48	; 0x30
 800d62c:	d91b      	bls.n	800d666 <VRate_data_Refresh+0x186>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d62e:	4b8a      	ldr	r3, [pc, #552]	; (800d858 <VRate_data_Refresh+0x378>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	3b06      	subs	r3, #6
 800d634:	4a89      	ldr	r2, [pc, #548]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d636:	5cd2      	ldrb	r2, [r2, r3]
 800d638:	3a01      	subs	r2, #1
 800d63a:	b2d1      	uxtb	r1, r2
 800d63c:	4a87      	ldr	r2, [pc, #540]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d63e:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d640:	4b85      	ldr	r3, [pc, #532]	; (800d858 <VRate_data_Refresh+0x378>)
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	3301      	adds	r3, #1
 800d646:	b2da      	uxtb	r2, r3
 800d648:	4b83      	ldr	r3, [pc, #524]	; (800d858 <VRate_data_Refresh+0x378>)
 800d64a:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d64c:	4b82      	ldr	r3, [pc, #520]	; (800d858 <VRate_data_Refresh+0x378>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	b2da      	uxtb	r2, r3
 800d654:	4b80      	ldr	r3, [pc, #512]	; (800d858 <VRate_data_Refresh+0x378>)
 800d656:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d658:	4b7f      	ldr	r3, [pc, #508]	; (800d858 <VRate_data_Refresh+0x378>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	3b06      	subs	r3, #6
 800d65e:	4a7f      	ldr	r2, [pc, #508]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d660:	2139      	movs	r1, #57	; 0x39
 800d662:	54d1      	strb	r1, [r2, r3]
 800d664:	e018      	b.n	800d698 <VRate_data_Refresh+0x1b8>

			}
			else
			{
				Cursor_Position++;
 800d666:	4b7c      	ldr	r3, [pc, #496]	; (800d858 <VRate_data_Refresh+0x378>)
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	3301      	adds	r3, #1
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	4b7a      	ldr	r3, [pc, #488]	; (800d858 <VRate_data_Refresh+0x378>)
 800d670:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d672:	4b79      	ldr	r3, [pc, #484]	; (800d858 <VRate_data_Refresh+0x378>)
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	3301      	adds	r3, #1
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	4b77      	ldr	r3, [pc, #476]	; (800d858 <VRate_data_Refresh+0x378>)
 800d67c:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='0';
 800d67e:	4b76      	ldr	r3, [pc, #472]	; (800d858 <VRate_data_Refresh+0x378>)
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	3b06      	subs	r3, #6
 800d684:	4a75      	ldr	r2, [pc, #468]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d686:	2130      	movs	r1, #48	; 0x30
 800d688:	54d1      	strb	r1, [r2, r3]
 800d68a:	e005      	b.n	800d698 <VRate_data_Refresh+0x1b8>
			}
		}
		else String_V_Rate[Cursor_Position-6]='0';
 800d68c:	4b72      	ldr	r3, [pc, #456]	; (800d858 <VRate_data_Refresh+0x378>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	3b06      	subs	r3, #6
 800d692:	4a72      	ldr	r2, [pc, #456]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d694:	2130      	movs	r1, #48	; 0x30
 800d696:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_V_Rate[Cursor_Position-6]>'9')
 800d698:	4b6f      	ldr	r3, [pc, #444]	; (800d858 <VRate_data_Refresh+0x378>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	3b06      	subs	r3, #6
 800d69e:	4a6f      	ldr	r2, [pc, #444]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d6a0:	5cd3      	ldrb	r3, [r2, r3]
 800d6a2:	2b39      	cmp	r3, #57	; 0x39
 800d6a4:	d800      	bhi.n	800d6a8 <VRate_data_Refresh+0x1c8>
 800d6a6:	e0e7      	b.n	800d878 <VRate_data_Refresh+0x398>
	{

		if(Cursor_Position==2+6)
 800d6a8:	4b6b      	ldr	r3, [pc, #428]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b08      	cmp	r3, #8
 800d6ae:	d146      	bne.n	800d73e <VRate_data_Refresh+0x25e>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d6b0:	4b69      	ldr	r3, [pc, #420]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	3b06      	subs	r3, #6
 800d6b6:	4a69      	ldr	r2, [pc, #420]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d6b8:	2130      	movs	r1, #48	; 0x30
 800d6ba:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d6bc:	4b66      	ldr	r3, [pc, #408]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	4b64      	ldr	r3, [pc, #400]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6c6:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d6c8:	4b63      	ldr	r3, [pc, #396]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	4b61      	ldr	r3, [pc, #388]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6d2:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d6d4:	4b60      	ldr	r3, [pc, #384]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	3b06      	subs	r3, #6
 800d6da:	4a60      	ldr	r2, [pc, #384]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d6dc:	5cd2      	ldrb	r2, [r2, r3]
 800d6de:	3201      	adds	r2, #1
 800d6e0:	b2d1      	uxtb	r1, r2
 800d6e2:	4a5e      	ldr	r2, [pc, #376]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d6e4:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//下一位也进位
 800d6e6:	4b5c      	ldr	r3, [pc, #368]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	3b06      	subs	r3, #6
 800d6ec:	4a5b      	ldr	r2, [pc, #364]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d6ee:	5cd3      	ldrb	r3, [r2, r3]
 800d6f0:	2b39      	cmp	r3, #57	; 0x39
 800d6f2:	d917      	bls.n	800d724 <VRate_data_Refresh+0x244>
			{
				String_V_Rate[Cursor_Position-6]='9';
 800d6f4:	4b58      	ldr	r3, [pc, #352]	; (800d858 <VRate_data_Refresh+0x378>)
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	3b06      	subs	r3, #6
 800d6fa:	4a58      	ldr	r2, [pc, #352]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d6fc:	2139      	movs	r1, #57	; 0x39
 800d6fe:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d700:	4b55      	ldr	r3, [pc, #340]	; (800d858 <VRate_data_Refresh+0x378>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	3301      	adds	r3, #1
 800d706:	b2da      	uxtb	r2, r3
 800d708:	4b53      	ldr	r3, [pc, #332]	; (800d858 <VRate_data_Refresh+0x378>)
 800d70a:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d70c:	4b52      	ldr	r3, [pc, #328]	; (800d858 <VRate_data_Refresh+0x378>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	3301      	adds	r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	4b50      	ldr	r3, [pc, #320]	; (800d858 <VRate_data_Refresh+0x378>)
 800d716:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d718:	4b4f      	ldr	r3, [pc, #316]	; (800d858 <VRate_data_Refresh+0x378>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	3b06      	subs	r3, #6
 800d71e:	4a4f      	ldr	r2, [pc, #316]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d720:	2139      	movs	r1, #57	; 0x39
 800d722:	54d1      	strb	r1, [r2, r3]

			}
			Cursor_Position++;
 800d724:	4b4c      	ldr	r3, [pc, #304]	; (800d858 <VRate_data_Refresh+0x378>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	3301      	adds	r3, #1
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	4b4a      	ldr	r3, [pc, #296]	; (800d858 <VRate_data_Refresh+0x378>)
 800d72e:	701a      	strb	r2, [r3, #0]
			Cursor_Position++;
 800d730:	4b49      	ldr	r3, [pc, #292]	; (800d858 <VRate_data_Refresh+0x378>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	3301      	adds	r3, #1
 800d736:	b2da      	uxtb	r2, r3
 800d738:	4b47      	ldr	r3, [pc, #284]	; (800d858 <VRate_data_Refresh+0x378>)
 800d73a:	701a      	strb	r2, [r3, #0]
 800d73c:	e09c      	b.n	800d878 <VRate_data_Refresh+0x398>
		}
		else if(Cursor_Position==3+6)
 800d73e:	4b46      	ldr	r3, [pc, #280]	; (800d858 <VRate_data_Refresh+0x378>)
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	2b09      	cmp	r3, #9
 800d744:	d000      	beq.n	800d748 <VRate_data_Refresh+0x268>
 800d746:	e08d      	b.n	800d864 <VRate_data_Refresh+0x384>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d748:	4b43      	ldr	r3, [pc, #268]	; (800d858 <VRate_data_Refresh+0x378>)
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	3b06      	subs	r3, #6
 800d74e:	4a43      	ldr	r2, [pc, #268]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d750:	2130      	movs	r1, #48	; 0x30
 800d752:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d754:	4b40      	ldr	r3, [pc, #256]	; (800d858 <VRate_data_Refresh+0x378>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	3b01      	subs	r3, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	4b3e      	ldr	r3, [pc, #248]	; (800d858 <VRate_data_Refresh+0x378>)
 800d75e:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d760:	4b3d      	ldr	r3, [pc, #244]	; (800d858 <VRate_data_Refresh+0x378>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	3b06      	subs	r3, #6
 800d766:	4a3d      	ldr	r2, [pc, #244]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d768:	5cd2      	ldrb	r2, [r2, r3]
 800d76a:	3201      	adds	r2, #1
 800d76c:	b2d1      	uxtb	r1, r2
 800d76e:	4a3b      	ldr	r2, [pc, #236]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d770:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//小数一位也进位
 800d772:	4b39      	ldr	r3, [pc, #228]	; (800d858 <VRate_data_Refresh+0x378>)
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	3b06      	subs	r3, #6
 800d778:	4a38      	ldr	r2, [pc, #224]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d77a:	5cd3      	ldrb	r3, [r2, r3]
 800d77c:	2b39      	cmp	r3, #57	; 0x39
 800d77e:	d95e      	bls.n	800d83e <VRate_data_Refresh+0x35e>
			{
				Cursor_Position--;
 800d780:	4b35      	ldr	r3, [pc, #212]	; (800d858 <VRate_data_Refresh+0x378>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	3b01      	subs	r3, #1
 800d786:	b2da      	uxtb	r2, r3
 800d788:	4b33      	ldr	r3, [pc, #204]	; (800d858 <VRate_data_Refresh+0x378>)
 800d78a:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d78c:	4b32      	ldr	r3, [pc, #200]	; (800d858 <VRate_data_Refresh+0x378>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	3b01      	subs	r3, #1
 800d792:	b2da      	uxtb	r2, r3
 800d794:	4b30      	ldr	r3, [pc, #192]	; (800d858 <VRate_data_Refresh+0x378>)
 800d796:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]++;
 800d798:	4b2f      	ldr	r3, [pc, #188]	; (800d858 <VRate_data_Refresh+0x378>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	3b06      	subs	r3, #6
 800d79e:	4a2f      	ldr	r2, [pc, #188]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d7a0:	5cd2      	ldrb	r2, [r2, r3]
 800d7a2:	3201      	adds	r2, #1
 800d7a4:	b2d1      	uxtb	r1, r2
 800d7a6:	4a2d      	ldr	r2, [pc, #180]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d7a8:	54d1      	strb	r1, [r2, r3]
				if(String_V_Rate[Cursor_Position-6]>'9')//个位也进位
 800d7aa:	4b2b      	ldr	r3, [pc, #172]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	3b06      	subs	r3, #6
 800d7b0:	4a2a      	ldr	r2, [pc, #168]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d7b2:	5cd3      	ldrb	r3, [r2, r3]
 800d7b4:	2b39      	cmp	r3, #57	; 0x39
 800d7b6:	d924      	bls.n	800d802 <VRate_data_Refresh+0x322>
				{
					String_V_Rate[Cursor_Position-6]='9';
 800d7b8:	4b27      	ldr	r3, [pc, #156]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	3b06      	subs	r3, #6
 800d7be:	4a27      	ldr	r2, [pc, #156]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d7c0:	2139      	movs	r1, #57	; 0x39
 800d7c2:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d7c4:	4b24      	ldr	r3, [pc, #144]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	4b22      	ldr	r3, [pc, #136]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7ce:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d7d0:	4b21      	ldr	r3, [pc, #132]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	4b1f      	ldr	r3, [pc, #124]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7da:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d7dc:	4b1e      	ldr	r3, [pc, #120]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	3b06      	subs	r3, #6
 800d7e2:	4a1e      	ldr	r2, [pc, #120]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d7e4:	2139      	movs	r1, #57	; 0x39
 800d7e6:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d7e8:	4b1b      	ldr	r3, [pc, #108]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	4b19      	ldr	r3, [pc, #100]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7f2:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d7f4:	4b18      	ldr	r3, [pc, #96]	; (800d858 <VRate_data_Refresh+0x378>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	3b06      	subs	r3, #6
 800d7fa:	4a18      	ldr	r2, [pc, #96]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d7fc:	2139      	movs	r1, #57	; 0x39
 800d7fe:	54d1      	strb	r1, [r2, r3]
 800d800:	e01d      	b.n	800d83e <VRate_data_Refresh+0x35e>

				}
				else//个位正常进位，小数一位为0，小数二位
				{
					Cursor_Position++;
 800d802:	4b15      	ldr	r3, [pc, #84]	; (800d858 <VRate_data_Refresh+0x378>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	3301      	adds	r3, #1
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	4b13      	ldr	r3, [pc, #76]	; (800d858 <VRate_data_Refresh+0x378>)
 800d80c:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d80e:	4b12      	ldr	r3, [pc, #72]	; (800d858 <VRate_data_Refresh+0x378>)
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	b2da      	uxtb	r2, r3
 800d816:	4b10      	ldr	r3, [pc, #64]	; (800d858 <VRate_data_Refresh+0x378>)
 800d818:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数一位为0
 800d81a:	4b0f      	ldr	r3, [pc, #60]	; (800d858 <VRate_data_Refresh+0x378>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	3b06      	subs	r3, #6
 800d820:	4a0e      	ldr	r2, [pc, #56]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d822:	2130      	movs	r1, #48	; 0x30
 800d824:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d826:	4b0c      	ldr	r3, [pc, #48]	; (800d858 <VRate_data_Refresh+0x378>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	3301      	adds	r3, #1
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <VRate_data_Refresh+0x378>)
 800d830:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数二位为0
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <VRate_data_Refresh+0x378>)
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	3b06      	subs	r3, #6
 800d838:	4a08      	ldr	r2, [pc, #32]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d83a:	2130      	movs	r1, #48	; 0x30
 800d83c:	54d1      	strb	r1, [r2, r3]

				}

			}

			Cursor_Position++;
 800d83e:	4b06      	ldr	r3, [pc, #24]	; (800d858 <VRate_data_Refresh+0x378>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	3301      	adds	r3, #1
 800d844:	b2da      	uxtb	r2, r3
 800d846:	4b04      	ldr	r3, [pc, #16]	; (800d858 <VRate_data_Refresh+0x378>)
 800d848:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]='0';
 800d84a:	4b03      	ldr	r3, [pc, #12]	; (800d858 <VRate_data_Refresh+0x378>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	3b06      	subs	r3, #6
 800d850:	4a02      	ldr	r2, [pc, #8]	; (800d85c <VRate_data_Refresh+0x37c>)
 800d852:	2130      	movs	r1, #48	; 0x30
 800d854:	54d1      	strb	r1, [r2, r3]
 800d856:	e00f      	b.n	800d878 <VRate_data_Refresh+0x398>
 800d858:	2000398e 	.word	0x2000398e
 800d85c:	2000304c 	.word	0x2000304c
 800d860:	20003384 	.word	0x20003384
		}
		else if(Cursor_Position==0+6)
 800d864:	4b1b      	ldr	r3, [pc, #108]	; (800d8d4 <VRate_data_Refresh+0x3f4>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	2b06      	cmp	r3, #6
 800d86a:	d105      	bne.n	800d878 <VRate_data_Refresh+0x398>
		{
			String_V_Rate[Cursor_Position-6]='9';
 800d86c:	4b19      	ldr	r3, [pc, #100]	; (800d8d4 <VRate_data_Refresh+0x3f4>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	3b06      	subs	r3, #6
 800d872:	4a19      	ldr	r2, [pc, #100]	; (800d8d8 <VRate_data_Refresh+0x3f8>)
 800d874:	2139      	movs	r1, #57	; 0x39
 800d876:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_V_Slope = String_To_Float(String_V_Rate)*10;
 800d878:	4b17      	ldr	r3, [pc, #92]	; (800d8d8 <VRate_data_Refresh+0x3f8>)
 800d87a:	0018      	movs	r0, r3
 800d87c:	f000 fe9a 	bl	800e5b4 <String_To_Float>
 800d880:	1c03      	adds	r3, r0, #0
 800d882:	4916      	ldr	r1, [pc, #88]	; (800d8dc <VRate_data_Refresh+0x3fc>)
 800d884:	1c18      	adds	r0, r3, #0
 800d886:	f7f3 f9eb 	bl	8000c60 <__aeabi_fmul>
 800d88a:	1c03      	adds	r3, r0, #0
 800d88c:	1c18      	adds	r0, r3, #0
 800d88e:	f7f2 fe4b 	bl	8000528 <__aeabi_f2uiz>
 800d892:	0003      	movs	r3, r0
 800d894:	b2da      	uxtb	r2, r3
 800d896:	4b12      	ldr	r3, [pc, #72]	; (800d8e0 <VRate_data_Refresh+0x400>)
 800d898:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope > 30) Set_V_Slope = 30;//150V
 800d89a:	4b11      	ldr	r3, [pc, #68]	; (800d8e0 <VRate_data_Refresh+0x400>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b1e      	cmp	r3, #30
 800d8a0:	d902      	bls.n	800d8a8 <VRate_data_Refresh+0x3c8>
 800d8a2:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <VRate_data_Refresh+0x400>)
 800d8a4:	221e      	movs	r2, #30
 800d8a6:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope <1||Set_Voltage==1)	Set_V_Slope=1;
 800d8a8:	4b0d      	ldr	r3, [pc, #52]	; (800d8e0 <VRate_data_Refresh+0x400>)
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d003      	beq.n	800d8b8 <VRate_data_Refresh+0x3d8>
 800d8b0:	4b0c      	ldr	r3, [pc, #48]	; (800d8e4 <VRate_data_Refresh+0x404>)
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d102      	bne.n	800d8be <VRate_data_Refresh+0x3de>
 800d8b8:	4b09      	ldr	r3, [pc, #36]	; (800d8e0 <VRate_data_Refresh+0x400>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_V_Slope);
 800d8be:	4b08      	ldr	r3, [pc, #32]	; (800d8e0 <VRate_data_Refresh+0x400>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	001a      	movs	r2, r3
 800d8c6:	2108      	movs	r1, #8
 800d8c8:	2001      	movs	r0, #1
 800d8ca:	f7fe ff89 	bl	800c7e0 <DAC_Cmd_send>


}
 800d8ce:	46c0      	nop			; (mov r8, r8)
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	2000398e 	.word	0x2000398e
 800d8d8:	2000304c 	.word	0x2000304c
 800d8dc:	41200000 	.word	0x41200000
 800d8e0:	20003998 	.word	0x20003998
 800d8e4:	20002fd8 	.word	0x20002fd8

0800d8e8 <IRate_data_Refresh>:

static void IRate_data_Refresh(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	af00      	add	r7, sp, #0
	String_I_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800d8ec:	4b50      	ldr	r3, [pc, #320]	; (800da30 <IRate_data_Refresh+0x148>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	3b06      	subs	r3, #6
 800d8f2:	4a50      	ldr	r2, [pc, #320]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d8f4:	5cd1      	ldrb	r1, [r2, r3]
 800d8f6:	4b50      	ldr	r3, [pc, #320]	; (800da38 <IRate_data_Refresh+0x150>)
 800d8f8:	69db      	ldr	r3, [r3, #28]
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	4b4c      	ldr	r3, [pc, #304]	; (800da30 <IRate_data_Refresh+0x148>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	3b06      	subs	r3, #6
 800d902:	188a      	adds	r2, r1, r2
 800d904:	b2d1      	uxtb	r1, r2
 800d906:	4a4b      	ldr	r2, [pc, #300]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d908:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]<'0')	String_I_Rate[Cursor_Position-6]='0';
 800d90a:	4b49      	ldr	r3, [pc, #292]	; (800da30 <IRate_data_Refresh+0x148>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	3b06      	subs	r3, #6
 800d910:	4a48      	ldr	r2, [pc, #288]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d912:	5cd3      	ldrb	r3, [r2, r3]
 800d914:	2b2f      	cmp	r3, #47	; 0x2f
 800d916:	d805      	bhi.n	800d924 <IRate_data_Refresh+0x3c>
 800d918:	4b45      	ldr	r3, [pc, #276]	; (800da30 <IRate_data_Refresh+0x148>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	3b06      	subs	r3, #6
 800d91e:	4a45      	ldr	r2, [pc, #276]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d920:	2130      	movs	r1, #48	; 0x30
 800d922:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]>'9')
 800d924:	4b42      	ldr	r3, [pc, #264]	; (800da30 <IRate_data_Refresh+0x148>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	3b06      	subs	r3, #6
 800d92a:	4a42      	ldr	r2, [pc, #264]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d92c:	5cd3      	ldrb	r3, [r2, r3]
 800d92e:	2b39      	cmp	r3, #57	; 0x39
 800d930:	d94f      	bls.n	800d9d2 <IRate_data_Refresh+0xea>
	{
		/*进位处理*/
		if(Cursor_Position!=0+6)
 800d932:	4b3f      	ldr	r3, [pc, #252]	; (800da30 <IRate_data_Refresh+0x148>)
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	2b06      	cmp	r3, #6
 800d938:	d041      	beq.n	800d9be <IRate_data_Refresh+0xd6>
		{
			String_I_Rate[Cursor_Position-6]='0';
 800d93a:	4b3d      	ldr	r3, [pc, #244]	; (800da30 <IRate_data_Refresh+0x148>)
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	3b06      	subs	r3, #6
 800d940:	4a3c      	ldr	r2, [pc, #240]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d942:	2130      	movs	r1, #48	; 0x30
 800d944:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d946:	4b3a      	ldr	r3, [pc, #232]	; (800da30 <IRate_data_Refresh+0x148>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	4b38      	ldr	r3, [pc, #224]	; (800da30 <IRate_data_Refresh+0x148>)
 800d950:	701a      	strb	r2, [r3, #0]
			String_I_Rate[Cursor_Position-6]++;
 800d952:	4b37      	ldr	r3, [pc, #220]	; (800da30 <IRate_data_Refresh+0x148>)
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	3b06      	subs	r3, #6
 800d958:	4a36      	ldr	r2, [pc, #216]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d95a:	5cd2      	ldrb	r2, [r2, r3]
 800d95c:	3201      	adds	r2, #1
 800d95e:	b2d1      	uxtb	r1, r2
 800d960:	4a34      	ldr	r2, [pc, #208]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d962:	54d1      	strb	r1, [r2, r3]
			if(String_I_Rate[Cursor_Position-6]>'9'&&Cursor_Position!=0+6)//下一位也进位
 800d964:	4b32      	ldr	r3, [pc, #200]	; (800da30 <IRate_data_Refresh+0x148>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	3b06      	subs	r3, #6
 800d96a:	4a32      	ldr	r2, [pc, #200]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d96c:	5cd3      	ldrb	r3, [r2, r3]
 800d96e:	2b39      	cmp	r3, #57	; 0x39
 800d970:	d91e      	bls.n	800d9b0 <IRate_data_Refresh+0xc8>
 800d972:	4b2f      	ldr	r3, [pc, #188]	; (800da30 <IRate_data_Refresh+0x148>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b06      	cmp	r3, #6
 800d978:	d01a      	beq.n	800d9b0 <IRate_data_Refresh+0xc8>
			{
				String_I_Rate[Cursor_Position-6]='0';
 800d97a:	4b2d      	ldr	r3, [pc, #180]	; (800da30 <IRate_data_Refresh+0x148>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	3b06      	subs	r3, #6
 800d980:	4a2c      	ldr	r2, [pc, #176]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d982:	2130      	movs	r1, #48	; 0x30
 800d984:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d986:	4b2a      	ldr	r3, [pc, #168]	; (800da30 <IRate_data_Refresh+0x148>)
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	3b01      	subs	r3, #1
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	4b28      	ldr	r3, [pc, #160]	; (800da30 <IRate_data_Refresh+0x148>)
 800d990:	701a      	strb	r2, [r3, #0]
				String_I_Rate[Cursor_Position-6]++;
 800d992:	4b27      	ldr	r3, [pc, #156]	; (800da30 <IRate_data_Refresh+0x148>)
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	3b06      	subs	r3, #6
 800d998:	4a26      	ldr	r2, [pc, #152]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d99a:	5cd2      	ldrb	r2, [r2, r3]
 800d99c:	3201      	adds	r2, #1
 800d99e:	b2d1      	uxtb	r1, r2
 800d9a0:	4a24      	ldr	r2, [pc, #144]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d9a2:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d9a4:	4b22      	ldr	r3, [pc, #136]	; (800da30 <IRate_data_Refresh+0x148>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	4b20      	ldr	r3, [pc, #128]	; (800da30 <IRate_data_Refresh+0x148>)
 800d9ae:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d9b0:	4b1f      	ldr	r3, [pc, #124]	; (800da30 <IRate_data_Refresh+0x148>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	4b1d      	ldr	r3, [pc, #116]	; (800da30 <IRate_data_Refresh+0x148>)
 800d9ba:	701a      	strb	r2, [r3, #0]
 800d9bc:	e009      	b.n	800d9d2 <IRate_data_Refresh+0xea>
		}
		else if(Cursor_Position==0+6)
 800d9be:	4b1c      	ldr	r3, [pc, #112]	; (800da30 <IRate_data_Refresh+0x148>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b06      	cmp	r3, #6
 800d9c4:	d105      	bne.n	800d9d2 <IRate_data_Refresh+0xea>
		{
			String_I_Rate[Cursor_Position-6]='9';
 800d9c6:	4b1a      	ldr	r3, [pc, #104]	; (800da30 <IRate_data_Refresh+0x148>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	3b06      	subs	r3, #6
 800d9cc:	4a19      	ldr	r2, [pc, #100]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d9ce:	2139      	movs	r1, #57	; 0x39
 800d9d0:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_I_Slope = String_To_Float(String_I_Rate)*100;
 800d9d2:	4b18      	ldr	r3, [pc, #96]	; (800da34 <IRate_data_Refresh+0x14c>)
 800d9d4:	0018      	movs	r0, r3
 800d9d6:	f000 fded 	bl	800e5b4 <String_To_Float>
 800d9da:	1c03      	adds	r3, r0, #0
 800d9dc:	4917      	ldr	r1, [pc, #92]	; (800da3c <IRate_data_Refresh+0x154>)
 800d9de:	1c18      	adds	r0, r3, #0
 800d9e0:	f7f3 f93e 	bl	8000c60 <__aeabi_fmul>
 800d9e4:	1c03      	adds	r3, r0, #0
 800d9e6:	1c18      	adds	r0, r3, #0
 800d9e8:	f7f2 fd9e 	bl	8000528 <__aeabi_f2uiz>
 800d9ec:	0003      	movs	r3, r0
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	4b13      	ldr	r3, [pc, #76]	; (800da40 <IRate_data_Refresh+0x158>)
 800d9f2:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope > 30) Set_I_Slope = 30;//150V
 800d9f4:	4b12      	ldr	r3, [pc, #72]	; (800da40 <IRate_data_Refresh+0x158>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	2b1e      	cmp	r3, #30
 800d9fa:	d902      	bls.n	800da02 <IRate_data_Refresh+0x11a>
 800d9fc:	4b10      	ldr	r3, [pc, #64]	; (800da40 <IRate_data_Refresh+0x158>)
 800d9fe:	221e      	movs	r2, #30
 800da00:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope <1||Set_Voltage==1)	Set_I_Slope=1;
 800da02:	4b0f      	ldr	r3, [pc, #60]	; (800da40 <IRate_data_Refresh+0x158>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d003      	beq.n	800da12 <IRate_data_Refresh+0x12a>
 800da0a:	4b0e      	ldr	r3, [pc, #56]	; (800da44 <IRate_data_Refresh+0x15c>)
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d102      	bne.n	800da18 <IRate_data_Refresh+0x130>
 800da12:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <IRate_data_Refresh+0x158>)
 800da14:	2201      	movs	r2, #1
 800da16:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,9,Set_I_Slope);
 800da18:	4b09      	ldr	r3, [pc, #36]	; (800da40 <IRate_data_Refresh+0x158>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	001a      	movs	r2, r3
 800da20:	2109      	movs	r1, #9
 800da22:	2001      	movs	r0, #1
 800da24:	f7fe fedc 	bl	800c7e0 <DAC_Cmd_send>

}
 800da28:	46c0      	nop			; (mov r8, r8)
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	46c0      	nop			; (mov r8, r8)
 800da30:	2000398e 	.word	0x2000398e
 800da34:	20003040 	.word	0x20003040
 800da38:	20003384 	.word	0x20003384
 800da3c:	42c80000 	.word	0x42c80000
 800da40:	20003999 	.word	0x20003999
 800da44:	20002fd8 	.word	0x20002fd8

0800da48 <Save_data_Refresh>:

static void Save_data_Refresh(void)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)//Vset
 800da4c:	4b76      	ldr	r3, [pc, #472]	; (800dc28 <Save_data_Refresh+0x1e0>)
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	2b01      	cmp	r3, #1
 800da52:	d172      	bne.n	800db3a <Save_data_Refresh+0xf2>
	{
		String_Save_V[Cursor_Position]+=Flag.Encoder_BF;
 800da54:	4b75      	ldr	r3, [pc, #468]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	001a      	movs	r2, r3
 800da5a:	4b75      	ldr	r3, [pc, #468]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800da5c:	5c9a      	ldrb	r2, [r3, r2]
 800da5e:	4b75      	ldr	r3, [pc, #468]	; (800dc34 <Save_data_Refresh+0x1ec>)
 800da60:	69db      	ldr	r3, [r3, #28]
 800da62:	b2db      	uxtb	r3, r3
 800da64:	4971      	ldr	r1, [pc, #452]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800da66:	7809      	ldrb	r1, [r1, #0]
 800da68:	18d3      	adds	r3, r2, r3
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	4b70      	ldr	r3, [pc, #448]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800da6e:	545a      	strb	r2, [r3, r1]
		if(String_Save_V[Cursor_Position]<'0')	String_Save_V[Cursor_Position]='0';
 800da70:	4b6e      	ldr	r3, [pc, #440]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	001a      	movs	r2, r3
 800da76:	4b6e      	ldr	r3, [pc, #440]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800da78:	5c9b      	ldrb	r3, [r3, r2]
 800da7a:	2b2f      	cmp	r3, #47	; 0x2f
 800da7c:	d805      	bhi.n	800da8a <Save_data_Refresh+0x42>
 800da7e:	4b6b      	ldr	r3, [pc, #428]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	001a      	movs	r2, r3
 800da84:	4b6a      	ldr	r3, [pc, #424]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800da86:	2130      	movs	r1, #48	; 0x30
 800da88:	5499      	strb	r1, [r3, r2]
		if(String_Save_V[Cursor_Position]>'9')
 800da8a:	4b68      	ldr	r3, [pc, #416]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	001a      	movs	r2, r3
 800da90:	4b67      	ldr	r3, [pc, #412]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800da92:	5c9b      	ldrb	r3, [r3, r2]
 800da94:	2b39      	cmp	r3, #57	; 0x39
 800da96:	d800      	bhi.n	800da9a <Save_data_Refresh+0x52>
 800da98:	e0c3      	b.n	800dc22 <Save_data_Refresh+0x1da>
		{
			/*进位处理*/
			if(Cursor_Position!=0)
 800da9a:	4b64      	ldr	r3, [pc, #400]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d03f      	beq.n	800db22 <Save_data_Refresh+0xda>
			{
				String_Save_V[Cursor_Position]='0';
 800daa2:	4b62      	ldr	r3, [pc, #392]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	001a      	movs	r2, r3
 800daa8:	4b61      	ldr	r3, [pc, #388]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800daaa:	2130      	movs	r1, #48	; 0x30
 800daac:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800daae:	4b5f      	ldr	r3, [pc, #380]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	3b01      	subs	r3, #1
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	4b5d      	ldr	r3, [pc, #372]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dab8:	701a      	strb	r2, [r3, #0]
				String_Save_V[Cursor_Position]++;
 800daba:	4b5c      	ldr	r3, [pc, #368]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	4a5c      	ldr	r2, [pc, #368]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800dac0:	5cd2      	ldrb	r2, [r2, r3]
 800dac2:	3201      	adds	r2, #1
 800dac4:	b2d1      	uxtb	r1, r2
 800dac6:	4a5a      	ldr	r2, [pc, #360]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800dac8:	54d1      	strb	r1, [r2, r3]
				if(String_Save_V[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800daca:	4b58      	ldr	r3, [pc, #352]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	001a      	movs	r2, r3
 800dad0:	4b57      	ldr	r3, [pc, #348]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800dad2:	5c9b      	ldrb	r3, [r3, r2]
 800dad4:	2b39      	cmp	r3, #57	; 0x39
 800dad6:	d91d      	bls.n	800db14 <Save_data_Refresh+0xcc>
 800dad8:	4b54      	ldr	r3, [pc, #336]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d019      	beq.n	800db14 <Save_data_Refresh+0xcc>
				{
					String_Save_V[Cursor_Position]='0';
 800dae0:	4b52      	ldr	r3, [pc, #328]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	001a      	movs	r2, r3
 800dae6:	4b52      	ldr	r3, [pc, #328]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800dae8:	2130      	movs	r1, #48	; 0x30
 800daea:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800daec:	4b4f      	ldr	r3, [pc, #316]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	3b01      	subs	r3, #1
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	4b4d      	ldr	r3, [pc, #308]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800daf6:	701a      	strb	r2, [r3, #0]
					String_Save_V[Cursor_Position]++;
 800daf8:	4b4c      	ldr	r3, [pc, #304]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	4a4c      	ldr	r2, [pc, #304]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800dafe:	5cd2      	ldrb	r2, [r2, r3]
 800db00:	3201      	adds	r2, #1
 800db02:	b2d1      	uxtb	r1, r2
 800db04:	4a4a      	ldr	r2, [pc, #296]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800db06:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800db08:	4b48      	ldr	r3, [pc, #288]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	4b46      	ldr	r3, [pc, #280]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db12:	701a      	strb	r2, [r3, #0]
				}
				Cursor_Position++;
 800db14:	4b45      	ldr	r3, [pc, #276]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	3301      	adds	r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	4b43      	ldr	r3, [pc, #268]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db1e:	701a      	strb	r2, [r3, #0]

		}

	}

}
 800db20:	e07f      	b.n	800dc22 <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800db22:	4b42      	ldr	r3, [pc, #264]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d000      	beq.n	800db2c <Save_data_Refresh+0xe4>
 800db2a:	e07a      	b.n	800dc22 <Save_data_Refresh+0x1da>
				String_Save_V[Cursor_Position]='9';
 800db2c:	4b3f      	ldr	r3, [pc, #252]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	001a      	movs	r2, r3
 800db32:	4b3f      	ldr	r3, [pc, #252]	; (800dc30 <Save_data_Refresh+0x1e8>)
 800db34:	2139      	movs	r1, #57	; 0x39
 800db36:	5499      	strb	r1, [r3, r2]
}
 800db38:	e073      	b.n	800dc22 <Save_data_Refresh+0x1da>
	else if(xyz.coordinates3==2)//Iset
 800db3a:	4b3b      	ldr	r3, [pc, #236]	; (800dc28 <Save_data_Refresh+0x1e0>)
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d16f      	bne.n	800dc22 <Save_data_Refresh+0x1da>
		String_Save_I[Cursor_Position]+=Flag.Encoder_BF;
 800db42:	4b3a      	ldr	r3, [pc, #232]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	001a      	movs	r2, r3
 800db48:	4b3b      	ldr	r3, [pc, #236]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800db4a:	5c9a      	ldrb	r2, [r3, r2]
 800db4c:	4b39      	ldr	r3, [pc, #228]	; (800dc34 <Save_data_Refresh+0x1ec>)
 800db4e:	69db      	ldr	r3, [r3, #28]
 800db50:	b2db      	uxtb	r3, r3
 800db52:	4936      	ldr	r1, [pc, #216]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db54:	7809      	ldrb	r1, [r1, #0]
 800db56:	18d3      	adds	r3, r2, r3
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	4b37      	ldr	r3, [pc, #220]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800db5c:	545a      	strb	r2, [r3, r1]
		if(String_Save_I[Cursor_Position]<'0')	String_Save_I[Cursor_Position]='0';
 800db5e:	4b33      	ldr	r3, [pc, #204]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	001a      	movs	r2, r3
 800db64:	4b34      	ldr	r3, [pc, #208]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800db66:	5c9b      	ldrb	r3, [r3, r2]
 800db68:	2b2f      	cmp	r3, #47	; 0x2f
 800db6a:	d805      	bhi.n	800db78 <Save_data_Refresh+0x130>
 800db6c:	4b2f      	ldr	r3, [pc, #188]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	001a      	movs	r2, r3
 800db72:	4b31      	ldr	r3, [pc, #196]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800db74:	2130      	movs	r1, #48	; 0x30
 800db76:	5499      	strb	r1, [r3, r2]
		if(String_Save_I[Cursor_Position]>'9')
 800db78:	4b2c      	ldr	r3, [pc, #176]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	001a      	movs	r2, r3
 800db7e:	4b2e      	ldr	r3, [pc, #184]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800db80:	5c9b      	ldrb	r3, [r3, r2]
 800db82:	2b39      	cmp	r3, #57	; 0x39
 800db84:	d94d      	bls.n	800dc22 <Save_data_Refresh+0x1da>
			if(Cursor_Position!=0)
 800db86:	4b29      	ldr	r3, [pc, #164]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d03f      	beq.n	800dc0e <Save_data_Refresh+0x1c6>
				String_Save_I[Cursor_Position]='0';
 800db8e:	4b27      	ldr	r3, [pc, #156]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	001a      	movs	r2, r3
 800db94:	4b28      	ldr	r3, [pc, #160]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800db96:	2130      	movs	r1, #48	; 0x30
 800db98:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800db9a:	4b24      	ldr	r3, [pc, #144]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	3b01      	subs	r3, #1
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	4b22      	ldr	r3, [pc, #136]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dba4:	701a      	strb	r2, [r3, #0]
				String_Save_I[Cursor_Position]++;
 800dba6:	4b21      	ldr	r3, [pc, #132]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	4a23      	ldr	r2, [pc, #140]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800dbac:	5cd2      	ldrb	r2, [r2, r3]
 800dbae:	3201      	adds	r2, #1
 800dbb0:	b2d1      	uxtb	r1, r2
 800dbb2:	4a21      	ldr	r2, [pc, #132]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800dbb4:	54d1      	strb	r1, [r2, r3]
				if(String_Save_I[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800dbb6:	4b1d      	ldr	r3, [pc, #116]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	001a      	movs	r2, r3
 800dbbc:	4b1e      	ldr	r3, [pc, #120]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800dbbe:	5c9b      	ldrb	r3, [r3, r2]
 800dbc0:	2b39      	cmp	r3, #57	; 0x39
 800dbc2:	d91d      	bls.n	800dc00 <Save_data_Refresh+0x1b8>
 800dbc4:	4b19      	ldr	r3, [pc, #100]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d019      	beq.n	800dc00 <Save_data_Refresh+0x1b8>
					String_Save_I[Cursor_Position]='0';
 800dbcc:	4b17      	ldr	r3, [pc, #92]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	001a      	movs	r2, r3
 800dbd2:	4b19      	ldr	r3, [pc, #100]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800dbd4:	2130      	movs	r1, #48	; 0x30
 800dbd6:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800dbd8:	4b14      	ldr	r3, [pc, #80]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	4b12      	ldr	r3, [pc, #72]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbe2:	701a      	strb	r2, [r3, #0]
					String_Save_I[Cursor_Position]++;
 800dbe4:	4b11      	ldr	r3, [pc, #68]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	4a13      	ldr	r2, [pc, #76]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800dbea:	5cd2      	ldrb	r2, [r2, r3]
 800dbec:	3201      	adds	r2, #1
 800dbee:	b2d1      	uxtb	r1, r2
 800dbf0:	4a11      	ldr	r2, [pc, #68]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800dbf2:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800dbf4:	4b0d      	ldr	r3, [pc, #52]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	b2da      	uxtb	r2, r3
 800dbfc:	4b0b      	ldr	r3, [pc, #44]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dbfe:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800dc00:	4b0a      	ldr	r3, [pc, #40]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	3301      	adds	r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	4b08      	ldr	r3, [pc, #32]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dc0a:	701a      	strb	r2, [r3, #0]
}
 800dc0c:	e009      	b.n	800dc22 <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800dc0e:	4b07      	ldr	r3, [pc, #28]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d105      	bne.n	800dc22 <Save_data_Refresh+0x1da>
				String_Save_I[Cursor_Position]='9';
 800dc16:	4b05      	ldr	r3, [pc, #20]	; (800dc2c <Save_data_Refresh+0x1e4>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	001a      	movs	r2, r3
 800dc1c:	4b06      	ldr	r3, [pc, #24]	; (800dc38 <Save_data_Refresh+0x1f0>)
 800dc1e:	2139      	movs	r1, #57	; 0x39
 800dc20:	5499      	strb	r1, [r3, r2]
}
 800dc22:	46c0      	nop			; (mov r8, r8)
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	200039f4 	.word	0x200039f4
 800dc2c:	2000398e 	.word	0x2000398e
 800dc30:	2000301c 	.word	0x2000301c
 800dc34:	20003384 	.word	0x20003384
 800dc38:	20003028 	.word	0x20003028

0800dc3c <Recall_data_Refresh>:

static void Recall_data_Refresh(void)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0
	Recall_Save_Number+=Flag.Encoder_BF;
 800dc40:	4b09      	ldr	r3, [pc, #36]	; (800dc68 <Recall_data_Refresh+0x2c>)
 800dc42:	69db      	ldr	r3, [r3, #28]
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	4b09      	ldr	r3, [pc, #36]	; (800dc6c <Recall_data_Refresh+0x30>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	18d3      	adds	r3, r2, r3
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <Recall_data_Refresh+0x30>)
 800dc50:	701a      	strb	r2, [r3, #0]
	if(Recall_Save_Number<0)	Recall_Save_Number=9;
	if(Recall_Save_Number>9)	Recall_Save_Number=0;
 800dc52:	4b06      	ldr	r3, [pc, #24]	; (800dc6c <Recall_data_Refresh+0x30>)
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	2b09      	cmp	r3, #9
 800dc58:	d902      	bls.n	800dc60 <Recall_data_Refresh+0x24>
 800dc5a:	4b04      	ldr	r3, [pc, #16]	; (800dc6c <Recall_data_Refresh+0x30>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	701a      	strb	r2, [r3, #0]
}
 800dc60:	46c0      	nop			; (mov r8, r8)
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	46c0      	nop			; (mov r8, r8)
 800dc68:	20003384 	.word	0x20003384
 800dc6c:	2000398d 	.word	0x2000398d

0800dc70 <Timer_data_Refresh>:

static void Timer_data_Refresh(void)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)
 800dc74:	4b45      	ldr	r3, [pc, #276]	; (800dd8c <Timer_data_Refresh+0x11c>)
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d129      	bne.n	800dcd0 <Timer_data_Refresh+0x60>
	{
		String_Delay[Cursor_Position-6]+=Flag.Encoder_BF;
 800dc7c:	4b44      	ldr	r3, [pc, #272]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	3b06      	subs	r3, #6
 800dc82:	4a44      	ldr	r2, [pc, #272]	; (800dd94 <Timer_data_Refresh+0x124>)
 800dc84:	5cd1      	ldrb	r1, [r2, r3]
 800dc86:	4b44      	ldr	r3, [pc, #272]	; (800dd98 <Timer_data_Refresh+0x128>)
 800dc88:	69db      	ldr	r3, [r3, #28]
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	4b40      	ldr	r3, [pc, #256]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	3b06      	subs	r3, #6
 800dc92:	188a      	adds	r2, r1, r2
 800dc94:	b2d1      	uxtb	r1, r2
 800dc96:	4a3f      	ldr	r2, [pc, #252]	; (800dd94 <Timer_data_Refresh+0x124>)
 800dc98:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]<'0')	String_Delay[Cursor_Position-6]='0';
 800dc9a:	4b3d      	ldr	r3, [pc, #244]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	3b06      	subs	r3, #6
 800dca0:	4a3c      	ldr	r2, [pc, #240]	; (800dd94 <Timer_data_Refresh+0x124>)
 800dca2:	5cd3      	ldrb	r3, [r2, r3]
 800dca4:	2b2f      	cmp	r3, #47	; 0x2f
 800dca6:	d805      	bhi.n	800dcb4 <Timer_data_Refresh+0x44>
 800dca8:	4b39      	ldr	r3, [pc, #228]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	3b06      	subs	r3, #6
 800dcae:	4a39      	ldr	r2, [pc, #228]	; (800dd94 <Timer_data_Refresh+0x124>)
 800dcb0:	2130      	movs	r1, #48	; 0x30
 800dcb2:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]>'9')	String_Delay[Cursor_Position-6]='9';
 800dcb4:	4b36      	ldr	r3, [pc, #216]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	3b06      	subs	r3, #6
 800dcba:	4a36      	ldr	r2, [pc, #216]	; (800dd94 <Timer_data_Refresh+0x124>)
 800dcbc:	5cd3      	ldrb	r3, [r2, r3]
 800dcbe:	2b39      	cmp	r3, #57	; 0x39
 800dcc0:	d961      	bls.n	800dd86 <Timer_data_Refresh+0x116>
 800dcc2:	4b33      	ldr	r3, [pc, #204]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	3b06      	subs	r3, #6
 800dcc8:	4a32      	ldr	r2, [pc, #200]	; (800dd94 <Timer_data_Refresh+0x124>)
 800dcca:	2139      	movs	r1, #57	; 0x39
 800dccc:	54d1      	strb	r1, [r2, r3]
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
	}

}
 800dcce:	e05a      	b.n	800dd86 <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==2)
 800dcd0:	4b2e      	ldr	r3, [pc, #184]	; (800dd8c <Timer_data_Refresh+0x11c>)
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d129      	bne.n	800dd2c <Timer_data_Refresh+0xbc>
		String_Cycle_On[Cursor_Position-6]+=Flag.Encoder_BF;
 800dcd8:	4b2d      	ldr	r3, [pc, #180]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	3b06      	subs	r3, #6
 800dcde:	4a2f      	ldr	r2, [pc, #188]	; (800dd9c <Timer_data_Refresh+0x12c>)
 800dce0:	5cd1      	ldrb	r1, [r2, r3]
 800dce2:	4b2d      	ldr	r3, [pc, #180]	; (800dd98 <Timer_data_Refresh+0x128>)
 800dce4:	69db      	ldr	r3, [r3, #28]
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	4b29      	ldr	r3, [pc, #164]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	3b06      	subs	r3, #6
 800dcee:	188a      	adds	r2, r1, r2
 800dcf0:	b2d1      	uxtb	r1, r2
 800dcf2:	4a2a      	ldr	r2, [pc, #168]	; (800dd9c <Timer_data_Refresh+0x12c>)
 800dcf4:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]<'0')	String_Cycle_On[Cursor_Position-6]='0';
 800dcf6:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	3b06      	subs	r3, #6
 800dcfc:	4a27      	ldr	r2, [pc, #156]	; (800dd9c <Timer_data_Refresh+0x12c>)
 800dcfe:	5cd3      	ldrb	r3, [r2, r3]
 800dd00:	2b2f      	cmp	r3, #47	; 0x2f
 800dd02:	d805      	bhi.n	800dd10 <Timer_data_Refresh+0xa0>
 800dd04:	4b22      	ldr	r3, [pc, #136]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	3b06      	subs	r3, #6
 800dd0a:	4a24      	ldr	r2, [pc, #144]	; (800dd9c <Timer_data_Refresh+0x12c>)
 800dd0c:	2130      	movs	r1, #48	; 0x30
 800dd0e:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]>'9')	String_Cycle_On[Cursor_Position-6]='9';
 800dd10:	4b1f      	ldr	r3, [pc, #124]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	3b06      	subs	r3, #6
 800dd16:	4a21      	ldr	r2, [pc, #132]	; (800dd9c <Timer_data_Refresh+0x12c>)
 800dd18:	5cd3      	ldrb	r3, [r2, r3]
 800dd1a:	2b39      	cmp	r3, #57	; 0x39
 800dd1c:	d933      	bls.n	800dd86 <Timer_data_Refresh+0x116>
 800dd1e:	4b1c      	ldr	r3, [pc, #112]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	3b06      	subs	r3, #6
 800dd24:	4a1d      	ldr	r2, [pc, #116]	; (800dd9c <Timer_data_Refresh+0x12c>)
 800dd26:	2139      	movs	r1, #57	; 0x39
 800dd28:	54d1      	strb	r1, [r2, r3]
}
 800dd2a:	e02c      	b.n	800dd86 <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==3)
 800dd2c:	4b17      	ldr	r3, [pc, #92]	; (800dd8c <Timer_data_Refresh+0x11c>)
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	d128      	bne.n	800dd86 <Timer_data_Refresh+0x116>
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
 800dd34:	4b16      	ldr	r3, [pc, #88]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	3b06      	subs	r3, #6
 800dd3a:	4a19      	ldr	r2, [pc, #100]	; (800dda0 <Timer_data_Refresh+0x130>)
 800dd3c:	5cd1      	ldrb	r1, [r2, r3]
 800dd3e:	4b16      	ldr	r3, [pc, #88]	; (800dd98 <Timer_data_Refresh+0x128>)
 800dd40:	69db      	ldr	r3, [r3, #28]
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	4b12      	ldr	r3, [pc, #72]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	3b06      	subs	r3, #6
 800dd4a:	188a      	adds	r2, r1, r2
 800dd4c:	b2d1      	uxtb	r1, r2
 800dd4e:	4a14      	ldr	r2, [pc, #80]	; (800dda0 <Timer_data_Refresh+0x130>)
 800dd50:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
 800dd52:	4b0f      	ldr	r3, [pc, #60]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	3b06      	subs	r3, #6
 800dd58:	4a11      	ldr	r2, [pc, #68]	; (800dda0 <Timer_data_Refresh+0x130>)
 800dd5a:	5cd3      	ldrb	r3, [r2, r3]
 800dd5c:	2b2f      	cmp	r3, #47	; 0x2f
 800dd5e:	d805      	bhi.n	800dd6c <Timer_data_Refresh+0xfc>
 800dd60:	4b0b      	ldr	r3, [pc, #44]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	3b06      	subs	r3, #6
 800dd66:	4a0e      	ldr	r2, [pc, #56]	; (800dda0 <Timer_data_Refresh+0x130>)
 800dd68:	2130      	movs	r1, #48	; 0x30
 800dd6a:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
 800dd6c:	4b08      	ldr	r3, [pc, #32]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	3b06      	subs	r3, #6
 800dd72:	4a0b      	ldr	r2, [pc, #44]	; (800dda0 <Timer_data_Refresh+0x130>)
 800dd74:	5cd3      	ldrb	r3, [r2, r3]
 800dd76:	2b39      	cmp	r3, #57	; 0x39
 800dd78:	d905      	bls.n	800dd86 <Timer_data_Refresh+0x116>
 800dd7a:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <Timer_data_Refresh+0x120>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	3b06      	subs	r3, #6
 800dd80:	4a07      	ldr	r2, [pc, #28]	; (800dda0 <Timer_data_Refresh+0x130>)
 800dd82:	2139      	movs	r1, #57	; 0x39
 800dd84:	54d1      	strb	r1, [r2, r3]
}
 800dd86:	46c0      	nop			; (mov r8, r8)
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	200039f4 	.word	0x200039f4
 800dd90:	2000398e 	.word	0x2000398e
 800dd94:	20003010 	.word	0x20003010
 800dd98:	20003384 	.word	0x20003384
 800dd9c:	20002ff8 	.word	0x20002ff8
 800dda0:	20003004 	.word	0x20003004

0800dda4 <Light_data_Refresh>:

static void Light_data_Refresh(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800dda8:	4b12      	ldr	r3, [pc, #72]	; (800ddf4 <Light_data_Refresh+0x50>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d103      	bne.n	800ddb8 <Light_data_Refresh+0x14>
 800ddb0:	4b11      	ldr	r3, [pc, #68]	; (800ddf8 <Light_data_Refresh+0x54>)
 800ddb2:	69db      	ldr	r3, [r3, #28]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	db18      	blt.n	800ddea <Light_data_Refresh+0x46>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800ddb8:	4b0e      	ldr	r3, [pc, #56]	; (800ddf4 <Light_data_Refresh+0x50>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b0f      	cmp	r3, #15
 800ddbe:	d103      	bne.n	800ddc8 <Light_data_Refresh+0x24>
 800ddc0:	4b0d      	ldr	r3, [pc, #52]	; (800ddf8 <Light_data_Refresh+0x54>)
 800ddc2:	69db      	ldr	r3, [r3, #28]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	dc12      	bgt.n	800ddee <Light_data_Refresh+0x4a>
	else Light+=Flag.Encoder_BF;
 800ddc8:	4b0b      	ldr	r3, [pc, #44]	; (800ddf8 <Light_data_Refresh+0x54>)
 800ddca:	69db      	ldr	r3, [r3, #28]
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	4b09      	ldr	r3, [pc, #36]	; (800ddf4 <Light_data_Refresh+0x50>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	18d3      	adds	r3, r2, r3
 800ddd4:	b2da      	uxtb	r2, r3
 800ddd6:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <Light_data_Refresh+0x50>)
 800ddd8:	701a      	strb	r2, [r3, #0]
	if(Light>=0x0f)	Light=0x0f;
 800ddda:	4b06      	ldr	r3, [pc, #24]	; (800ddf4 <Light_data_Refresh+0x50>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b0e      	cmp	r3, #14
 800dde0:	d906      	bls.n	800ddf0 <Light_data_Refresh+0x4c>
 800dde2:	4b04      	ldr	r3, [pc, #16]	; (800ddf4 <Light_data_Refresh+0x50>)
 800dde4:	220f      	movs	r2, #15
 800dde6:	701a      	strb	r2, [r3, #0]
 800dde8:	e002      	b.n	800ddf0 <Light_data_Refresh+0x4c>
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800ddea:	46c0      	nop			; (mov r8, r8)
 800ddec:	e000      	b.n	800ddf0 <Light_data_Refresh+0x4c>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800ddee:	46c0      	nop			; (mov r8, r8)
}
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	200030b3 	.word	0x200030b3
 800ddf8:	20003384 	.word	0x20003384

0800ddfc <FAN_data_Refresh>:

static void FAN_data_Refresh(void)
{
 800ddfc:	b5b0      	push	{r4, r5, r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800de00:	4b22      	ldr	r3, [pc, #136]	; (800de8c <FAN_data_Refresh+0x90>)
 800de02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de04:	21fe      	movs	r1, #254	; 0xfe
 800de06:	0589      	lsls	r1, r1, #22
 800de08:	1c18      	adds	r0, r3, #0
 800de0a:	f7f2 fb5f 	bl	80004cc <__aeabi_fcmpeq>
 800de0e:	1e03      	subs	r3, r0, #0
 800de10:	d003      	beq.n	800de1a <FAN_data_Refresh+0x1e>
 800de12:	4b1e      	ldr	r3, [pc, #120]	; (800de8c <FAN_data_Refresh+0x90>)
 800de14:	69db      	ldr	r3, [r3, #28]
 800de16:	2b00      	cmp	r3, #0
 800de18:	db32      	blt.n	800de80 <FAN_data_Refresh+0x84>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800de1a:	4b1c      	ldr	r3, [pc, #112]	; (800de8c <FAN_data_Refresh+0x90>)
 800de1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1e:	491c      	ldr	r1, [pc, #112]	; (800de90 <FAN_data_Refresh+0x94>)
 800de20:	1c18      	adds	r0, r3, #0
 800de22:	f7f2 fb53 	bl	80004cc <__aeabi_fcmpeq>
 800de26:	1e03      	subs	r3, r0, #0
 800de28:	d003      	beq.n	800de32 <FAN_data_Refresh+0x36>
 800de2a:	4b18      	ldr	r3, [pc, #96]	; (800de8c <FAN_data_Refresh+0x90>)
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	dc28      	bgt.n	800de84 <FAN_data_Refresh+0x88>
	else Flag.FAN_LEVEL+=Flag.Encoder_BF;
 800de32:	4b16      	ldr	r3, [pc, #88]	; (800de8c <FAN_data_Refresh+0x90>)
 800de34:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800de36:	4b15      	ldr	r3, [pc, #84]	; (800de8c <FAN_data_Refresh+0x90>)
 800de38:	69db      	ldr	r3, [r3, #28]
 800de3a:	0018      	movs	r0, r3
 800de3c:	f7f3 fa04 	bl	8001248 <__aeabi_i2f>
 800de40:	1c03      	adds	r3, r0, #0
 800de42:	1c19      	adds	r1, r3, #0
 800de44:	1c20      	adds	r0, r4, #0
 800de46:	f7f2 fba5 	bl	8000594 <__aeabi_fadd>
 800de4a:	1c03      	adds	r3, r0, #0
 800de4c:	1c1a      	adds	r2, r3, #0
 800de4e:	4b0f      	ldr	r3, [pc, #60]	; (800de8c <FAN_data_Refresh+0x90>)
 800de50:	62da      	str	r2, [r3, #44]	; 0x2c
	if(Flag.FAN_LEVEL>=1000)	Flag.FAN_LEVEL=1000;
 800de52:	4b0e      	ldr	r3, [pc, #56]	; (800de8c <FAN_data_Refresh+0x90>)
 800de54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de56:	490e      	ldr	r1, [pc, #56]	; (800de90 <FAN_data_Refresh+0x94>)
 800de58:	1c18      	adds	r0, r3, #0
 800de5a:	f7f2 fb5b 	bl	8000514 <__aeabi_fcmpge>
 800de5e:	1e03      	subs	r3, r0, #0
 800de60:	d002      	beq.n	800de68 <FAN_data_Refresh+0x6c>
 800de62:	4b0a      	ldr	r3, [pc, #40]	; (800de8c <FAN_data_Refresh+0x90>)
 800de64:	4a0a      	ldr	r2, [pc, #40]	; (800de90 <FAN_data_Refresh+0x94>)
 800de66:	62da      	str	r2, [r3, #44]	; 0x2c

	sprintf(String_FAN, "%6.2f", Flag.FAN_LEVEL);
 800de68:	4b08      	ldr	r3, [pc, #32]	; (800de8c <FAN_data_Refresh+0x90>)
 800de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6c:	1c18      	adds	r0, r3, #0
 800de6e:	f7f5 f81f 	bl	8002eb0 <__aeabi_f2d>
 800de72:	0002      	movs	r2, r0
 800de74:	000b      	movs	r3, r1
 800de76:	4907      	ldr	r1, [pc, #28]	; (800de94 <FAN_data_Refresh+0x98>)
 800de78:	4807      	ldr	r0, [pc, #28]	; (800de98 <FAN_data_Refresh+0x9c>)
 800de7a:	f007 f9a5 	bl	80151c8 <siprintf>
 800de7e:	e002      	b.n	800de86 <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800de80:	46c0      	nop			; (mov r8, r8)
 800de82:	e000      	b.n	800de86 <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800de84:	46c0      	nop			; (mov r8, r8)

}
 800de86:	46bd      	mov	sp, r7
 800de88:	bdb0      	pop	{r4, r5, r7, pc}
 800de8a:	46c0      	nop			; (mov r8, r8)
 800de8c:	20003384 	.word	0x20003384
 800de90:	447a0000 	.word	0x447a0000
 800de94:	080183f4 	.word	0x080183f4
 800de98:	20003080 	.word	0x20003080

0800de9c <enter_action>:
 * @brief  编码器按键动作响应
 * @param  none
 * @retval None
 */
static void enter_action(void)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800dea0:	4b95      	ldr	r3, [pc, #596]	; (800e0f8 <enter_action+0x25c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d10a      	bne.n	800debe <enter_action+0x22>
 800dea8:	4b93      	ldr	r3, [pc, #588]	; (800e0f8 <enter_action+0x25c>)
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d006      	beq.n	800debe <enter_action+0x22>
 800deb0:	4b91      	ldr	r3, [pc, #580]	; (800e0f8 <enter_action+0x25c>)
 800deb2:	689b      	ldr	r3, [r3, #8]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d102      	bne.n	800debe <enter_action+0x22>
	{
		xyz.coordinates3=1;//enter second menu
 800deb8:	4b8f      	ldr	r3, [pc, #572]	; (800e0f8 <enter_action+0x25c>)
 800deba:	2201      	movs	r2, #1
 800debc:	609a      	str	r2, [r3, #8]
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800debe:	4b8e      	ldr	r3, [pc, #568]	; (800e0f8 <enter_action+0x25c>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d14f      	bne.n	800df66 <enter_action+0xca>
 800dec6:	4b8c      	ldr	r3, [pc, #560]	; (800e0f8 <enter_action+0x25c>)
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d04b      	beq.n	800df66 <enter_action+0xca>
 800dece:	4b8a      	ldr	r3, [pc, #552]	; (800e0f8 <enter_action+0x25c>)
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d047      	beq.n	800df66 <enter_action+0xca>
	{
		switch(xyz.coordinates2)
 800ded6:	4b88      	ldr	r3, [pc, #544]	; (800e0f8 <enter_action+0x25c>)
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	2b05      	cmp	r3, #5
 800dedc:	d83b      	bhi.n	800df56 <enter_action+0xba>
 800dede:	009a      	lsls	r2, r3, #2
 800dee0:	4b86      	ldr	r3, [pc, #536]	; (800e0fc <enter_action+0x260>)
 800dee2:	18d3      	adds	r3, r2, r3
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	469f      	mov	pc, r3
		{
			case 1:break;
			case 2://rate
			{
				Cursor_Position++;
 800dee8:	4b85      	ldr	r3, [pc, #532]	; (800e100 <enter_action+0x264>)
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	3301      	adds	r3, #1
 800deee:	b2da      	uxtb	r2, r3
 800def0:	4b83      	ldr	r3, [pc, #524]	; (800e100 <enter_action+0x264>)
 800def2:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>4+6) Cursor_Position=0+6;
 800def4:	4b82      	ldr	r3, [pc, #520]	; (800e100 <enter_action+0x264>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b0a      	cmp	r3, #10
 800defa:	d92e      	bls.n	800df5a <enter_action+0xbe>
 800defc:	4b80      	ldr	r3, [pc, #512]	; (800e100 <enter_action+0x264>)
 800defe:	2206      	movs	r2, #6
 800df00:	701a      	strb	r2, [r3, #0]
				break;
 800df02:	e02a      	b.n	800df5a <enter_action+0xbe>
			}
			case 3:break;//以后补充
			case 4://cycle on/off delay
			{
				if(Cursor_Position==3+6)	Cursor_Position=4+6;
 800df04:	4b7e      	ldr	r3, [pc, #504]	; (800e100 <enter_action+0x264>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b09      	cmp	r3, #9
 800df0a:	d102      	bne.n	800df12 <enter_action+0x76>
 800df0c:	4b7c      	ldr	r3, [pc, #496]	; (800e100 <enter_action+0x264>)
 800df0e:	220a      	movs	r2, #10
 800df10:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800df12:	4b7b      	ldr	r3, [pc, #492]	; (800e100 <enter_action+0x264>)
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	3301      	adds	r3, #1
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	4b79      	ldr	r3, [pc, #484]	; (800e100 <enter_action+0x264>)
 800df1c:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>7+6) 	Cursor_Position=0+6;
 800df1e:	4b78      	ldr	r3, [pc, #480]	; (800e100 <enter_action+0x264>)
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b0d      	cmp	r3, #13
 800df24:	d91b      	bls.n	800df5e <enter_action+0xc2>
 800df26:	4b76      	ldr	r3, [pc, #472]	; (800e100 <enter_action+0x264>)
 800df28:	2206      	movs	r2, #6
 800df2a:	701a      	strb	r2, [r3, #0]
				break;
 800df2c:	e017      	b.n	800df5e <enter_action+0xc2>
			}
			case 5:
			{
				if(xyz.coordinates3==2)//gain
 800df2e:	4b72      	ldr	r3, [pc, #456]	; (800e0f8 <enter_action+0x25c>)
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	2b02      	cmp	r3, #2
 800df34:	d115      	bne.n	800df62 <enter_action+0xc6>
				{
					if(Cursor_Position==4+6)
 800df36:	4b72      	ldr	r3, [pc, #456]	; (800e100 <enter_action+0x264>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	2b0a      	cmp	r3, #10
 800df3c:	d103      	bne.n	800df46 <enter_action+0xaa>
					{
						Cursor_Position=5+6;
 800df3e:	4b70      	ldr	r3, [pc, #448]	; (800e100 <enter_action+0x264>)
 800df40:	220b      	movs	r2, #11
 800df42:	701a      	strb	r2, [r3, #0]
				}
				if(xyz.coordinates3==3)//frq
				{
					;
				}
				break;
 800df44:	e00d      	b.n	800df62 <enter_action+0xc6>
					else if(Cursor_Position==5+6)
 800df46:	4b6e      	ldr	r3, [pc, #440]	; (800e100 <enter_action+0x264>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	2b0b      	cmp	r3, #11
 800df4c:	d109      	bne.n	800df62 <enter_action+0xc6>
						Cursor_Position=4+6;
 800df4e:	4b6c      	ldr	r3, [pc, #432]	; (800e100 <enter_action+0x264>)
 800df50:	220a      	movs	r2, #10
 800df52:	701a      	strb	r2, [r3, #0]
				break;
 800df54:	e005      	b.n	800df62 <enter_action+0xc6>

			}
			default: break;
 800df56:	46c0      	nop			; (mov r8, r8)
 800df58:	e043      	b.n	800dfe2 <enter_action+0x146>
				break;
 800df5a:	46c0      	nop			; (mov r8, r8)
 800df5c:	e041      	b.n	800dfe2 <enter_action+0x146>
				break;
 800df5e:	46c0      	nop			; (mov r8, r8)
 800df60:	e03f      	b.n	800dfe2 <enter_action+0x146>
				break;
 800df62:	46c0      	nop			; (mov r8, r8)
		switch(xyz.coordinates2)
 800df64:	e03d      	b.n	800dfe2 <enter_action+0x146>
		}

	}
	/*V I Set*/
	else if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800df66:	4b64      	ldr	r3, [pc, #400]	; (800e0f8 <enter_action+0x25c>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	d134      	bne.n	800dfd8 <enter_action+0x13c>
 800df6e:	4b62      	ldr	r3, [pc, #392]	; (800e0f8 <enter_action+0x25c>)
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d030      	beq.n	800dfd8 <enter_action+0x13c>
	{
		switch(xyz.coordinates2)
 800df76:	4b60      	ldr	r3, [pc, #384]	; (800e0f8 <enter_action+0x25c>)
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d002      	beq.n	800df84 <enter_action+0xe8>
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d015      	beq.n	800dfae <enter_action+0x112>
 800df82:	e02e      	b.n	800dfe2 <enter_action+0x146>
		{
			case 1://I set
			{
				Cursor_Position++;
 800df84:	4b5e      	ldr	r3, [pc, #376]	; (800e100 <enter_action+0x264>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	3301      	adds	r3, #1
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	4b5c      	ldr	r3, [pc, #368]	; (800e100 <enter_action+0x264>)
 800df8e:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800df90:	4b5b      	ldr	r3, [pc, #364]	; (800e100 <enter_action+0x264>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b0c      	cmp	r3, #12
 800df96:	d102      	bne.n	800df9e <enter_action+0x102>
 800df98:	4b59      	ldr	r3, [pc, #356]	; (800e100 <enter_action+0x264>)
 800df9a:	220d      	movs	r2, #13
 800df9c:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800df9e:	4b58      	ldr	r3, [pc, #352]	; (800e100 <enter_action+0x264>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b0f      	cmp	r3, #15
 800dfa4:	d11a      	bne.n	800dfdc <enter_action+0x140>
 800dfa6:	4b56      	ldr	r3, [pc, #344]	; (800e100 <enter_action+0x264>)
 800dfa8:	2209      	movs	r2, #9
 800dfaa:	701a      	strb	r2, [r3, #0]
				break;
 800dfac:	e016      	b.n	800dfdc <enter_action+0x140>
			}
			case 2://V set
			{
				Cursor_Position++;
 800dfae:	4b54      	ldr	r3, [pc, #336]	; (800e100 <enter_action+0x264>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	4b52      	ldr	r3, [pc, #328]	; (800e100 <enter_action+0x264>)
 800dfb8:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800dfba:	4b51      	ldr	r3, [pc, #324]	; (800e100 <enter_action+0x264>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	2b03      	cmp	r3, #3
 800dfc0:	d102      	bne.n	800dfc8 <enter_action+0x12c>
 800dfc2:	4b4f      	ldr	r3, [pc, #316]	; (800e100 <enter_action+0x264>)
 800dfc4:	2204      	movs	r2, #4
 800dfc6:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800dfc8:	4b4d      	ldr	r3, [pc, #308]	; (800e100 <enter_action+0x264>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2b06      	cmp	r3, #6
 800dfce:	d107      	bne.n	800dfe0 <enter_action+0x144>
 800dfd0:	4b4b      	ldr	r3, [pc, #300]	; (800e100 <enter_action+0x264>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	701a      	strb	r2, [r3, #0]
				break;
 800dfd6:	e003      	b.n	800dfe0 <enter_action+0x144>
			}
		}

	}
 800dfd8:	46c0      	nop			; (mov r8, r8)
 800dfda:	e002      	b.n	800dfe2 <enter_action+0x146>
				break;
 800dfdc:	46c0      	nop			; (mov r8, r8)
 800dfde:	e000      	b.n	800dfe2 <enter_action+0x146>
				break;
 800dfe0:	46c0      	nop			; (mov r8, r8)
	/*save load */
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800dfe2:	4b45      	ldr	r3, [pc, #276]	; (800e0f8 <enter_action+0x25c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b03      	cmp	r3, #3
 800dfe8:	d139      	bne.n	800e05e <enter_action+0x1c2>
 800dfea:	4b43      	ldr	r3, [pc, #268]	; (800e0f8 <enter_action+0x25c>)
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d035      	beq.n	800e05e <enter_action+0x1c2>
	{
		switch(xyz.coordinates2)
 800dff2:	4b41      	ldr	r3, [pc, #260]	; (800e0f8 <enter_action+0x25c>)
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d133      	bne.n	800e062 <enter_action+0x1c6>
		{
			case 1://save
			{
				if(xyz.coordinates3==1)//v est
 800dffa:	4b3f      	ldr	r3, [pc, #252]	; (800e0f8 <enter_action+0x25c>)
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d114      	bne.n	800e02c <enter_action+0x190>
				{
					Cursor_Position++;
 800e002:	4b3f      	ldr	r3, [pc, #252]	; (800e100 <enter_action+0x264>)
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	3301      	adds	r3, #1
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	4b3d      	ldr	r3, [pc, #244]	; (800e100 <enter_action+0x264>)
 800e00c:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2)	Cursor_Position=4;
 800e00e:	4b3c      	ldr	r3, [pc, #240]	; (800e100 <enter_action+0x264>)
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b02      	cmp	r3, #2
 800e014:	d102      	bne.n	800e01c <enter_action+0x180>
 800e016:	4b3a      	ldr	r3, [pc, #232]	; (800e100 <enter_action+0x264>)
 800e018:	2204      	movs	r2, #4
 800e01a:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5)	Cursor_Position=0;
 800e01c:	4b38      	ldr	r3, [pc, #224]	; (800e100 <enter_action+0x264>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b05      	cmp	r3, #5
 800e022:	d120      	bne.n	800e066 <enter_action+0x1ca>
 800e024:	4b36      	ldr	r3, [pc, #216]	; (800e100 <enter_action+0x264>)
 800e026:	2200      	movs	r2, #0
 800e028:	701a      	strb	r2, [r3, #0]
					break;
 800e02a:	e01c      	b.n	800e066 <enter_action+0x1ca>
				}
				else if(xyz.coordinates3==2)//I set
 800e02c:	4b32      	ldr	r3, [pc, #200]	; (800e0f8 <enter_action+0x25c>)
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	2b02      	cmp	r3, #2
 800e032:	d116      	bne.n	800e062 <enter_action+0x1c6>
				{
					Cursor_Position++;
 800e034:	4b32      	ldr	r3, [pc, #200]	; (800e100 <enter_action+0x264>)
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	3301      	adds	r3, #1
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	4b30      	ldr	r3, [pc, #192]	; (800e100 <enter_action+0x264>)
 800e03e:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2+9)	Cursor_Position=4;
 800e040:	4b2f      	ldr	r3, [pc, #188]	; (800e100 <enter_action+0x264>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b0b      	cmp	r3, #11
 800e046:	d102      	bne.n	800e04e <enter_action+0x1b2>
 800e048:	4b2d      	ldr	r3, [pc, #180]	; (800e100 <enter_action+0x264>)
 800e04a:	2204      	movs	r2, #4
 800e04c:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5+9)	Cursor_Position=0;
 800e04e:	4b2c      	ldr	r3, [pc, #176]	; (800e100 <enter_action+0x264>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	2b0e      	cmp	r3, #14
 800e054:	d109      	bne.n	800e06a <enter_action+0x1ce>
 800e056:	4b2a      	ldr	r3, [pc, #168]	; (800e100 <enter_action+0x264>)
 800e058:	2200      	movs	r2, #0
 800e05a:	701a      	strb	r2, [r3, #0]
					break;
 800e05c:	e005      	b.n	800e06a <enter_action+0x1ce>
			{
				break;
			}

		}
	}
 800e05e:	46c0      	nop			; (mov r8, r8)
 800e060:	e004      	b.n	800e06c <enter_action+0x1d0>
				break;
 800e062:	46c0      	nop			; (mov r8, r8)
 800e064:	e002      	b.n	800e06c <enter_action+0x1d0>
					break;
 800e066:	46c0      	nop			; (mov r8, r8)
 800e068:	e000      	b.n	800e06c <enter_action+0x1d0>
					break;
 800e06a:	46c0      	nop			; (mov r8, r8)
	if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800e06c:	4b22      	ldr	r3, [pc, #136]	; (800e0f8 <enter_action+0x25c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d138      	bne.n	800e0e6 <enter_action+0x24a>
 800e074:	4b20      	ldr	r3, [pc, #128]	; (800e0f8 <enter_action+0x25c>)
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	2b08      	cmp	r3, #8
 800e07a:	d134      	bne.n	800e0e6 <enter_action+0x24a>
	{
		switch(xyz.coordinates3)
 800e07c:	4b1e      	ldr	r3, [pc, #120]	; (800e0f8 <enter_action+0x25c>)
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	2b02      	cmp	r3, #2
 800e082:	dc02      	bgt.n	800e08a <enter_action+0x1ee>
 800e084:	2b00      	cmp	r3, #0
 800e086:	dc04      	bgt.n	800e092 <enter_action+0x1f6>
			}

		}
	}

}
 800e088:	e032      	b.n	800e0f0 <enter_action+0x254>
 800e08a:	3b03      	subs	r3, #3
		switch(xyz.coordinates3)
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d82f      	bhi.n	800e0f0 <enter_action+0x254>
 800e090:	e014      	b.n	800e0bc <enter_action+0x220>
				Cursor_Position++;
 800e092:	4b1b      	ldr	r3, [pc, #108]	; (800e100 <enter_action+0x264>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	3301      	adds	r3, #1
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	4b19      	ldr	r3, [pc, #100]	; (800e100 <enter_action+0x264>)
 800e09c:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800e09e:	4b18      	ldr	r3, [pc, #96]	; (800e100 <enter_action+0x264>)
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	2b03      	cmp	r3, #3
 800e0a4:	d102      	bne.n	800e0ac <enter_action+0x210>
 800e0a6:	4b16      	ldr	r3, [pc, #88]	; (800e100 <enter_action+0x264>)
 800e0a8:	2204      	movs	r2, #4
 800e0aa:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800e0ac:	4b14      	ldr	r3, [pc, #80]	; (800e100 <enter_action+0x264>)
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b06      	cmp	r3, #6
 800e0b2:	d11a      	bne.n	800e0ea <enter_action+0x24e>
 800e0b4:	4b12      	ldr	r3, [pc, #72]	; (800e100 <enter_action+0x264>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	701a      	strb	r2, [r3, #0]
				break;
 800e0ba:	e016      	b.n	800e0ea <enter_action+0x24e>
				Cursor_Position++;
 800e0bc:	4b10      	ldr	r3, [pc, #64]	; (800e100 <enter_action+0x264>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	b2da      	uxtb	r2, r3
 800e0c4:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <enter_action+0x264>)
 800e0c6:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800e0c8:	4b0d      	ldr	r3, [pc, #52]	; (800e100 <enter_action+0x264>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	2b0c      	cmp	r3, #12
 800e0ce:	d102      	bne.n	800e0d6 <enter_action+0x23a>
 800e0d0:	4b0b      	ldr	r3, [pc, #44]	; (800e100 <enter_action+0x264>)
 800e0d2:	220d      	movs	r2, #13
 800e0d4:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800e0d6:	4b0a      	ldr	r3, [pc, #40]	; (800e100 <enter_action+0x264>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b0f      	cmp	r3, #15
 800e0dc:	d107      	bne.n	800e0ee <enter_action+0x252>
 800e0de:	4b08      	ldr	r3, [pc, #32]	; (800e100 <enter_action+0x264>)
 800e0e0:	2209      	movs	r2, #9
 800e0e2:	701a      	strb	r2, [r3, #0]
				break;
 800e0e4:	e003      	b.n	800e0ee <enter_action+0x252>
	}
 800e0e6:	46c0      	nop			; (mov r8, r8)
 800e0e8:	e002      	b.n	800e0f0 <enter_action+0x254>
				break;
 800e0ea:	46c0      	nop			; (mov r8, r8)
 800e0ec:	e000      	b.n	800e0f0 <enter_action+0x254>
				break;
 800e0ee:	46c0      	nop			; (mov r8, r8)
}
 800e0f0:	46c0      	nop			; (mov r8, r8)
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	46c0      	nop			; (mov r8, r8)
 800e0f8:	200039f4 	.word	0x200039f4
 800e0fc:	08018878 	.word	0x08018878
 800e100:	2000398e 	.word	0x2000398e

0800e104 <Encoder_Data_refresh>:
 * @brief  编码器转动数据更新
 * @param  none
 * @retval None
 */
void Encoder_Data_refresh(void)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
	if(Flag.TIM3_IT==1)
 800e108:	4b52      	ldr	r3, [pc, #328]	; (800e254 <Encoder_Data_refresh+0x150>)
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d000      	beq.n	800e112 <Encoder_Data_refresh+0xe>
 800e110:	e09c      	b.n	800e24c <Encoder_Data_refresh+0x148>
	{
		Flag.TIM3_IT=0;
 800e112:	4b50      	ldr	r3, [pc, #320]	; (800e254 <Encoder_Data_refresh+0x150>)
 800e114:	2200      	movs	r2, #0
 800e116:	609a      	str	r2, [r3, #8]
		/*first menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800e118:	4b4f      	ldr	r3, [pc, #316]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d109      	bne.n	800e134 <Encoder_Data_refresh+0x30>
 800e120:	4b4d      	ldr	r3, [pc, #308]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <Encoder_Data_refresh+0x30>
 800e128:	4b4b      	ldr	r3, [pc, #300]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <Encoder_Data_refresh+0x30>
		{
			First_menu_data_Refresh();
 800e130:	f7fe fc92 	bl	800ca58 <First_menu_data_Refresh>
		}
		/*second menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800e134:	4b48      	ldr	r3, [pc, #288]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d121      	bne.n	800e180 <Encoder_Data_refresh+0x7c>
 800e13c:	4b46      	ldr	r3, [pc, #280]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d01d      	beq.n	800e180 <Encoder_Data_refresh+0x7c>
 800e144:	4b44      	ldr	r3, [pc, #272]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d019      	beq.n	800e180 <Encoder_Data_refresh+0x7c>
		{
			switch(xyz.coordinates2)
 800e14c:	4b42      	ldr	r3, [pc, #264]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	2b05      	cmp	r3, #5
 800e152:	d817      	bhi.n	800e184 <Encoder_Data_refresh+0x80>
 800e154:	009a      	lsls	r2, r3, #2
 800e156:	4b41      	ldr	r3, [pc, #260]	; (800e25c <Encoder_Data_refresh+0x158>)
 800e158:	18d3      	adds	r3, r2, r3
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	469f      	mov	pc, r3
			{
				case 1:break;
				case 2://rate
				{
					if(xyz.coordinates3==1)//I rate
 800e15e:	4b3e      	ldr	r3, [pc, #248]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d102      	bne.n	800e16c <Encoder_Data_refresh+0x68>
					{
						IRate_data_Refresh();
 800e166:	f7ff fbbf 	bl	800d8e8 <IRate_data_Refresh>
					}
					else if(xyz.coordinates3==2)//V rate
					{
						VRate_data_Refresh();
					}
					break;
 800e16a:	e00d      	b.n	800e188 <Encoder_Data_refresh+0x84>
					else if(xyz.coordinates3==2)//V rate
 800e16c:	4b3a      	ldr	r3, [pc, #232]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	2b02      	cmp	r3, #2
 800e172:	d109      	bne.n	800e188 <Encoder_Data_refresh+0x84>
						VRate_data_Refresh();
 800e174:	f7ff f9b4 	bl	800d4e0 <VRate_data_Refresh>
					break;
 800e178:	e006      	b.n	800e188 <Encoder_Data_refresh+0x84>
				}
				case 3:break;
				case 4://delay cycle on/off
				{
					Timer_data_Refresh();
 800e17a:	f7ff fd79 	bl	800dc70 <Timer_data_Refresh>
					break;
 800e17e:	e004      	b.n	800e18a <Encoder_Data_refresh+0x86>
					}
					break;
				}
				default: break;
			}
		}
 800e180:	46c0      	nop			; (mov r8, r8)
 800e182:	e002      	b.n	800e18a <Encoder_Data_refresh+0x86>
				default: break;
 800e184:	46c0      	nop			; (mov r8, r8)
 800e186:	e000      	b.n	800e18a <Encoder_Data_refresh+0x86>
					break;
 800e188:	46c0      	nop			; (mov r8, r8)
		/*V I set*/
		if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e18a:	4b33      	ldr	r3, [pc, #204]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b02      	cmp	r3, #2
 800e190:	d110      	bne.n	800e1b4 <Encoder_Data_refresh+0xb0>
 800e192:	4b31      	ldr	r3, [pc, #196]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00c      	beq.n	800e1b4 <Encoder_Data_refresh+0xb0>
		{
			switch(xyz.coordinates2)
 800e19a:	4b2f      	ldr	r3, [pc, #188]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d002      	beq.n	800e1a8 <Encoder_Data_refresh+0xa4>
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d003      	beq.n	800e1ae <Encoder_Data_refresh+0xaa>
 800e1a6:	e006      	b.n	800e1b6 <Encoder_Data_refresh+0xb2>
			{
				case 1:
				{
					Iset_data_Refresh();
 800e1a8:	f7ff f822 	bl	800d1f0 <Iset_data_Refresh>
					break;
 800e1ac:	e003      	b.n	800e1b6 <Encoder_Data_refresh+0xb2>
				}
				case 2:
				{
					Vset_data_Refresh();
 800e1ae:	f7fe fead 	bl	800cf0c <Vset_data_Refresh>
					break;
 800e1b2:	e000      	b.n	800e1b6 <Encoder_Data_refresh+0xb2>
				}

			}

		}
 800e1b4:	46c0      	nop			; (mov r8, r8)
		/*save load */
		if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800e1b6:	4b28      	ldr	r3, [pc, #160]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b03      	cmp	r3, #3
 800e1bc:	d110      	bne.n	800e1e0 <Encoder_Data_refresh+0xdc>
 800e1be:	4b26      	ldr	r3, [pc, #152]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00c      	beq.n	800e1e0 <Encoder_Data_refresh+0xdc>
		{
			switch(xyz.coordinates2)
 800e1c6:	4b24      	ldr	r3, [pc, #144]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d002      	beq.n	800e1d4 <Encoder_Data_refresh+0xd0>
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	d003      	beq.n	800e1da <Encoder_Data_refresh+0xd6>
 800e1d2:	e006      	b.n	800e1e2 <Encoder_Data_refresh+0xde>
			{
				case 1://save
				{
					Save_data_Refresh();
 800e1d4:	f7ff fc38 	bl	800da48 <Save_data_Refresh>
					break;
 800e1d8:	e003      	b.n	800e1e2 <Encoder_Data_refresh+0xde>
				}
				case 2://recall
				{
					Recall_data_Refresh();
 800e1da:	f7ff fd2f 	bl	800dc3c <Recall_data_Refresh>
					break;
 800e1de:	e000      	b.n	800e1e2 <Encoder_Data_refresh+0xde>
				}

			}
		}
 800e1e0:	46c0      	nop			; (mov r8, r8)
		/*light set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==1)
 800e1e2:	4b1d      	ldr	r3, [pc, #116]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d109      	bne.n	800e1fe <Encoder_Data_refresh+0xfa>
 800e1ea:	4b1b      	ldr	r3, [pc, #108]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	2b06      	cmp	r3, #6
 800e1f0:	d105      	bne.n	800e1fe <Encoder_Data_refresh+0xfa>
 800e1f2:	4b19      	ldr	r3, [pc, #100]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d101      	bne.n	800e1fe <Encoder_Data_refresh+0xfa>
		{
			Light_data_Refresh();
 800e1fa:	f7ff fdd3 	bl	800dda4 <Light_data_Refresh>
		}
		/*FAN set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==3)
 800e1fe:	4b16      	ldr	r3, [pc, #88]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d109      	bne.n	800e21a <Encoder_Data_refresh+0x116>
 800e206:	4b14      	ldr	r3, [pc, #80]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	2b06      	cmp	r3, #6
 800e20c:	d105      	bne.n	800e21a <Encoder_Data_refresh+0x116>
 800e20e:	4b12      	ldr	r3, [pc, #72]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	2b03      	cmp	r3, #3
 800e214:	d101      	bne.n	800e21a <Encoder_Data_refresh+0x116>
		{
			FAN_data_Refresh();
 800e216:	f7ff fdf1 	bl	800ddfc <FAN_data_Refresh>
		}

		if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800e21a:	4b0f      	ldr	r3, [pc, #60]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d114      	bne.n	800e24c <Encoder_Data_refresh+0x148>
 800e222:	4b0d      	ldr	r3, [pc, #52]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	2b08      	cmp	r3, #8
 800e228:	d110      	bne.n	800e24c <Encoder_Data_refresh+0x148>
		{
			switch(xyz.coordinates3)
 800e22a:	4b0b      	ldr	r3, [pc, #44]	; (800e258 <Encoder_Data_refresh+0x154>)
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	dc02      	bgt.n	800e238 <Encoder_Data_refresh+0x134>
 800e232:	2b00      	cmp	r3, #0
 800e234:	dc04      	bgt.n	800e240 <Encoder_Data_refresh+0x13c>
		}


	}

}
 800e236:	e00a      	b.n	800e24e <Encoder_Data_refresh+0x14a>
 800e238:	3b03      	subs	r3, #3
			switch(xyz.coordinates3)
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d807      	bhi.n	800e24e <Encoder_Data_refresh+0x14a>
 800e23e:	e002      	b.n	800e246 <Encoder_Data_refresh+0x142>
					Calibration_V_data_Refresh();
 800e240:	f7fe fc28 	bl	800ca94 <Calibration_V_data_Refresh>
					break;
 800e244:	e003      	b.n	800e24e <Encoder_Data_refresh+0x14a>
					Calibration_I_data_Refresh();
 800e246:	f7fe fd43 	bl	800ccd0 <Calibration_I_data_Refresh>
					break;
 800e24a:	e000      	b.n	800e24e <Encoder_Data_refresh+0x14a>
		}
 800e24c:	46c0      	nop			; (mov r8, r8)
}
 800e24e:	46c0      	nop			; (mov r8, r8)
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20003384 	.word	0x20003384
 800e258:	200039f4 	.word	0x200039f4
 800e25c:	08018890 	.word	0x08018890

0800e260 <Encoder_Enter_Handle>:
 * @brief  编码器按键动作
 * @param  none
 * @retval None
 */
void Encoder_Enter_Handle(void)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	af00      	add	r7, sp, #0

	static 	FunctionalState ENCODER_PRESS=DISABLE;
	static int count;

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET)
 800e264:	2380      	movs	r3, #128	; 0x80
 800e266:	005a      	lsls	r2, r3, #1
 800e268:	23a0      	movs	r3, #160	; 0xa0
 800e26a:	05db      	lsls	r3, r3, #23
 800e26c:	0011      	movs	r1, r2
 800e26e:	0018      	movs	r0, r3
 800e270:	f7f8 fe42 	bl	8006ef8 <HAL_GPIO_ReadPin>
 800e274:	1e03      	subs	r3, r0, #0
 800e276:	d10f      	bne.n	800e298 <Encoder_Enter_Handle+0x38>
	{

		if(++count>=5)
 800e278:	4b19      	ldr	r3, [pc, #100]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	1c5a      	adds	r2, r3, #1
 800e27e:	4b18      	ldr	r3, [pc, #96]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	4b17      	ldr	r3, [pc, #92]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b04      	cmp	r3, #4
 800e288:	dd26      	ble.n	800e2d8 <Encoder_Enter_Handle+0x78>
		{
			count=5;
 800e28a:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e28c:	2205      	movs	r2, #5
 800e28e:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=ENABLE;
 800e290:	4b14      	ldr	r3, [pc, #80]	; (800e2e4 <Encoder_Enter_Handle+0x84>)
 800e292:	2201      	movs	r2, #1
 800e294:	701a      	strb	r2, [r3, #0]
		}

	}


}
 800e296:	e01f      	b.n	800e2d8 <Encoder_Enter_Handle+0x78>
	else if(ENCODER_PRESS==ENABLE && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_SET)
 800e298:	4b12      	ldr	r3, [pc, #72]	; (800e2e4 <Encoder_Enter_Handle+0x84>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d11b      	bne.n	800e2d8 <Encoder_Enter_Handle+0x78>
 800e2a0:	2380      	movs	r3, #128	; 0x80
 800e2a2:	005a      	lsls	r2, r3, #1
 800e2a4:	23a0      	movs	r3, #160	; 0xa0
 800e2a6:	05db      	lsls	r3, r3, #23
 800e2a8:	0011      	movs	r1, r2
 800e2aa:	0018      	movs	r0, r3
 800e2ac:	f7f8 fe24 	bl	8006ef8 <HAL_GPIO_ReadPin>
 800e2b0:	0003      	movs	r3, r0
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d110      	bne.n	800e2d8 <Encoder_Enter_Handle+0x78>
		if(--count<=0)
 800e2b6:	4b0a      	ldr	r3, [pc, #40]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	1e5a      	subs	r2, r3, #1
 800e2bc:	4b08      	ldr	r3, [pc, #32]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	4b07      	ldr	r3, [pc, #28]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	dc07      	bgt.n	800e2d8 <Encoder_Enter_Handle+0x78>
			count=0;
 800e2c8:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <Encoder_Enter_Handle+0x80>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=DISABLE;
 800e2ce:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <Encoder_Enter_Handle+0x84>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	701a      	strb	r2, [r3, #0]
			enter_action();//动作响应
 800e2d4:	f7ff fde2 	bl	800de9c <enter_action>
}
 800e2d8:	46c0      	nop			; (mov r8, r8)
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	46c0      	nop			; (mov r8, r8)
 800e2e0:	20003980 	.word	0x20003980
 800e2e4:	20003984 	.word	0x20003984

0800e2e8 <__NVIC_SystemReset>:
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e2ec:	f3bf 8f4f 	dsb	sy
}
 800e2f0:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e2f2:	4b04      	ldr	r3, [pc, #16]	; (800e304 <__NVIC_SystemReset+0x1c>)
 800e2f4:	4a04      	ldr	r2, [pc, #16]	; (800e308 <__NVIC_SystemReset+0x20>)
 800e2f6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e2f8:	f3bf 8f4f 	dsb	sy
}
 800e2fc:	46c0      	nop			; (mov r8, r8)
    __NOP();
 800e2fe:	46c0      	nop			; (mov r8, r8)
 800e300:	e7fd      	b.n	800e2fe <__NVIC_SystemReset+0x16>
 800e302:	46c0      	nop			; (mov r8, r8)
 800e304:	e000ed00 	.word	0xe000ed00
 800e308:	05fa0004 	.word	0x05fa0004

0800e30c <String_to_float>:
/***********************************************************************************************************************************************************************************/
/*********************************************************************************以下为函数接口*************************************************************************************/
/***********************************************************************************************************************************************************************************/

float String_to_float(char* string)
{
 800e30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e30e:	b087      	sub	sp, #28
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
		float value=0.0;
 800e314:	2300      	movs	r3, #0
 800e316:	617b      	str	r3, [r7, #20]

		uint8_t point_index=0;
 800e318:	2313      	movs	r3, #19
 800e31a:	18fb      	adds	r3, r7, r3
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
		uint8_t data_length=0;
 800e320:	2312      	movs	r3, #18
 800e322:	18fb      	adds	r3, r7, r3
 800e324:	2200      	movs	r2, #0
 800e326:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<strlen(string);i++)
 800e328:	2311      	movs	r3, #17
 800e32a:	18fb      	adds	r3, r7, r3
 800e32c:	2200      	movs	r2, #0
 800e32e:	701a      	strb	r2, [r3, #0]
 800e330:	e013      	b.n	800e35a <String_to_float+0x4e>
		{
			if(string[i]=='.')
 800e332:	2111      	movs	r1, #17
 800e334:	187b      	adds	r3, r7, r1
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	18d3      	adds	r3, r2, r3
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b2e      	cmp	r3, #46	; 0x2e
 800e340:	d105      	bne.n	800e34e <String_to_float+0x42>
			{
				point_index=i;
 800e342:	2313      	movs	r3, #19
 800e344:	18fb      	adds	r3, r7, r3
 800e346:	187a      	adds	r2, r7, r1
 800e348:	7812      	ldrb	r2, [r2, #0]
 800e34a:	701a      	strb	r2, [r3, #0]
				break;
 800e34c:	e00f      	b.n	800e36e <String_to_float+0x62>
		for(uint8_t i=0;i<strlen(string);i++)
 800e34e:	2111      	movs	r1, #17
 800e350:	187b      	adds	r3, r7, r1
 800e352:	781a      	ldrb	r2, [r3, #0]
 800e354:	187b      	adds	r3, r7, r1
 800e356:	3201      	adds	r2, #1
 800e358:	701a      	strb	r2, [r3, #0]
 800e35a:	2311      	movs	r3, #17
 800e35c:	18fb      	adds	r3, r7, r3
 800e35e:	781c      	ldrb	r4, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	0018      	movs	r0, r3
 800e364:	f7f1 fed6 	bl	8000114 <strlen>
 800e368:	0003      	movs	r3, r0
 800e36a:	429c      	cmp	r4, r3
 800e36c:	d3e1      	bcc.n	800e332 <String_to_float+0x26>
			}

		}
		if(point_index==0)
 800e36e:	2313      	movs	r3, #19
 800e370:	18fb      	adds	r3, r7, r3
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d169      	bne.n	800e44c <String_to_float+0x140>
		{
			for(uint8_t j=0;j<strlen(string);j++)
 800e378:	2310      	movs	r3, #16
 800e37a:	18fb      	adds	r3, r7, r3
 800e37c:	2200      	movs	r2, #0
 800e37e:	701a      	strb	r2, [r3, #0]
 800e380:	e01a      	b.n	800e3b8 <String_to_float+0xac>
			{
				if(string[j]<='9' && string[j]>='0')
 800e382:	2110      	movs	r1, #16
 800e384:	187b      	adds	r3, r7, r1
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	18d3      	adds	r3, r2, r3
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b39      	cmp	r3, #57	; 0x39
 800e390:	d80c      	bhi.n	800e3ac <String_to_float+0xa0>
 800e392:	187b      	adds	r3, r7, r1
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	18d3      	adds	r3, r2, r3
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b2f      	cmp	r3, #47	; 0x2f
 800e39e:	d905      	bls.n	800e3ac <String_to_float+0xa0>
				{
					data_length++;
 800e3a0:	2112      	movs	r1, #18
 800e3a2:	187b      	adds	r3, r7, r1
 800e3a4:	781a      	ldrb	r2, [r3, #0]
 800e3a6:	187b      	adds	r3, r7, r1
 800e3a8:	3201      	adds	r2, #1
 800e3aa:	701a      	strb	r2, [r3, #0]
			for(uint8_t j=0;j<strlen(string);j++)
 800e3ac:	2110      	movs	r1, #16
 800e3ae:	187b      	adds	r3, r7, r1
 800e3b0:	781a      	ldrb	r2, [r3, #0]
 800e3b2:	187b      	adds	r3, r7, r1
 800e3b4:	3201      	adds	r2, #1
 800e3b6:	701a      	strb	r2, [r3, #0]
 800e3b8:	2310      	movs	r3, #16
 800e3ba:	18fb      	adds	r3, r7, r3
 800e3bc:	781c      	ldrb	r4, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	0018      	movs	r0, r3
 800e3c2:	f7f1 fea7 	bl	8000114 <strlen>
 800e3c6:	0003      	movs	r3, r0
 800e3c8:	429c      	cmp	r4, r3
 800e3ca:	d3da      	bcc.n	800e382 <String_to_float+0x76>
				}

			}
			for(uint8_t j=0;j<data_length;j++)
 800e3cc:	230f      	movs	r3, #15
 800e3ce:	18fb      	adds	r3, r7, r3
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	701a      	strb	r2, [r3, #0]
 800e3d4:	e031      	b.n	800e43a <String_to_float+0x12e>
			{
				value+=(string[j]-'0')*(float)pow(10,(data_length-j-1));
 800e3d6:	250f      	movs	r5, #15
 800e3d8:	197b      	adds	r3, r7, r5
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	18d3      	adds	r3, r2, r3
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	3b30      	subs	r3, #48	; 0x30
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f7f2 ff2f 	bl	8001248 <__aeabi_i2f>
 800e3ea:	1c04      	adds	r4, r0, #0
 800e3ec:	2312      	movs	r3, #18
 800e3ee:	18fb      	adds	r3, r7, r3
 800e3f0:	781a      	ldrb	r2, [r3, #0]
 800e3f2:	197b      	adds	r3, r7, r5
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	0018      	movs	r0, r3
 800e3fc:	f7f4 fd02 	bl	8002e04 <__aeabi_i2d>
 800e400:	0002      	movs	r2, r0
 800e402:	000b      	movs	r3, r1
 800e404:	2000      	movs	r0, #0
 800e406:	4969      	ldr	r1, [pc, #420]	; (800e5ac <String_to_float+0x2a0>)
 800e408:	f009 f902 	bl	8017610 <pow>
 800e40c:	0002      	movs	r2, r0
 800e40e:	000b      	movs	r3, r1
 800e410:	0010      	movs	r0, r2
 800e412:	0019      	movs	r1, r3
 800e414:	f7f4 fd94 	bl	8002f40 <__aeabi_d2f>
 800e418:	1c03      	adds	r3, r0, #0
 800e41a:	1c19      	adds	r1, r3, #0
 800e41c:	1c20      	adds	r0, r4, #0
 800e41e:	f7f2 fc1f 	bl	8000c60 <__aeabi_fmul>
 800e422:	1c03      	adds	r3, r0, #0
 800e424:	1c19      	adds	r1, r3, #0
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	f7f2 f8b4 	bl	8000594 <__aeabi_fadd>
 800e42c:	1c03      	adds	r3, r0, #0
 800e42e:	617b      	str	r3, [r7, #20]
			for(uint8_t j=0;j<data_length;j++)
 800e430:	197b      	adds	r3, r7, r5
 800e432:	781a      	ldrb	r2, [r3, #0]
 800e434:	197b      	adds	r3, r7, r5
 800e436:	3201      	adds	r2, #1
 800e438:	701a      	strb	r2, [r3, #0]
 800e43a:	230f      	movs	r3, #15
 800e43c:	18fa      	adds	r2, r7, r3
 800e43e:	2312      	movs	r3, #18
 800e440:	18fb      	adds	r3, r7, r3
 800e442:	7812      	ldrb	r2, [r2, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	429a      	cmp	r2, r3
 800e448:	d3c5      	bcc.n	800e3d6 <String_to_float+0xca>
 800e44a:	e0a9      	b.n	800e5a0 <String_to_float+0x294>
			{
				value+=(string[point_index+j]-'0')/(float)pow(10,j);
			}
			*/
			/*新版*/
			for(uint8_t i=0;i<point_index;i++)
 800e44c:	230e      	movs	r3, #14
 800e44e:	18fb      	adds	r3, r7, r3
 800e450:	2200      	movs	r2, #0
 800e452:	701a      	strb	r2, [r3, #0]
 800e454:	e03b      	b.n	800e4ce <String_to_float+0x1c2>
			{
				value+=(string[i]-'0')*pow(10,(point_index+1-i));
 800e456:	260e      	movs	r6, #14
 800e458:	19bb      	adds	r3, r7, r6
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	18d3      	adds	r3, r2, r3
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	3b30      	subs	r3, #48	; 0x30
 800e464:	0018      	movs	r0, r3
 800e466:	f7f4 fccd 	bl	8002e04 <__aeabi_i2d>
 800e46a:	0004      	movs	r4, r0
 800e46c:	000d      	movs	r5, r1
 800e46e:	2313      	movs	r3, #19
 800e470:	18fb      	adds	r3, r7, r3
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	1c5a      	adds	r2, r3, #1
 800e476:	19bb      	adds	r3, r7, r6
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	0018      	movs	r0, r3
 800e47e:	f7f4 fcc1 	bl	8002e04 <__aeabi_i2d>
 800e482:	0002      	movs	r2, r0
 800e484:	000b      	movs	r3, r1
 800e486:	2000      	movs	r0, #0
 800e488:	4948      	ldr	r1, [pc, #288]	; (800e5ac <String_to_float+0x2a0>)
 800e48a:	f009 f8c1 	bl	8017610 <pow>
 800e48e:	0002      	movs	r2, r0
 800e490:	000b      	movs	r3, r1
 800e492:	0020      	movs	r0, r4
 800e494:	0029      	movs	r1, r5
 800e496:	f7f3 fe63 	bl	8002160 <__aeabi_dmul>
 800e49a:	0002      	movs	r2, r0
 800e49c:	000b      	movs	r3, r1
 800e49e:	0014      	movs	r4, r2
 800e4a0:	001d      	movs	r5, r3
 800e4a2:	6978      	ldr	r0, [r7, #20]
 800e4a4:	f7f4 fd04 	bl	8002eb0 <__aeabi_f2d>
 800e4a8:	0002      	movs	r2, r0
 800e4aa:	000b      	movs	r3, r1
 800e4ac:	0020      	movs	r0, r4
 800e4ae:	0029      	movs	r1, r5
 800e4b0:	f7f2 ff18 	bl	80012e4 <__aeabi_dadd>
 800e4b4:	0002      	movs	r2, r0
 800e4b6:	000b      	movs	r3, r1
 800e4b8:	0010      	movs	r0, r2
 800e4ba:	0019      	movs	r1, r3
 800e4bc:	f7f4 fd40 	bl	8002f40 <__aeabi_d2f>
 800e4c0:	1c03      	adds	r3, r0, #0
 800e4c2:	617b      	str	r3, [r7, #20]
			for(uint8_t i=0;i<point_index;i++)
 800e4c4:	19bb      	adds	r3, r7, r6
 800e4c6:	781a      	ldrb	r2, [r3, #0]
 800e4c8:	19bb      	adds	r3, r7, r6
 800e4ca:	3201      	adds	r2, #1
 800e4cc:	701a      	strb	r2, [r3, #0]
 800e4ce:	230e      	movs	r3, #14
 800e4d0:	18fa      	adds	r2, r7, r3
 800e4d2:	2313      	movs	r3, #19
 800e4d4:	18fb      	adds	r3, r7, r3
 800e4d6:	7812      	ldrb	r2, [r2, #0]
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d3bb      	bcc.n	800e456 <String_to_float+0x14a>
			}
			/*小数后两位*/
			for(uint8_t j=1;j<3;j++)
 800e4de:	230d      	movs	r3, #13
 800e4e0:	18fb      	adds	r3, r7, r3
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	701a      	strb	r2, [r3, #0]
 800e4e6:	e050      	b.n	800e58a <String_to_float+0x27e>
			{
				if(string[j+point_index]!=' ')
 800e4e8:	260d      	movs	r6, #13
 800e4ea:	19bb      	adds	r3, r7, r6
 800e4ec:	781a      	ldrb	r2, [r3, #0]
 800e4ee:	2113      	movs	r1, #19
 800e4f0:	187b      	adds	r3, r7, r1
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	18d3      	adds	r3, r2, r3
 800e4f6:	001a      	movs	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	189b      	adds	r3, r3, r2
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	2b20      	cmp	r3, #32
 800e500:	d037      	beq.n	800e572 <String_to_float+0x266>
				{
					value+=(string[j+point_index]-'0')*pow(10,2-j);
 800e502:	19bb      	adds	r3, r7, r6
 800e504:	781a      	ldrb	r2, [r3, #0]
 800e506:	187b      	adds	r3, r7, r1
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	18d3      	adds	r3, r2, r3
 800e50c:	001a      	movs	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	189b      	adds	r3, r3, r2
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	3b30      	subs	r3, #48	; 0x30
 800e516:	0018      	movs	r0, r3
 800e518:	f7f4 fc74 	bl	8002e04 <__aeabi_i2d>
 800e51c:	0004      	movs	r4, r0
 800e51e:	000d      	movs	r5, r1
 800e520:	19bb      	adds	r3, r7, r6
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	2202      	movs	r2, #2
 800e526:	1ad3      	subs	r3, r2, r3
 800e528:	0018      	movs	r0, r3
 800e52a:	f7f4 fc6b 	bl	8002e04 <__aeabi_i2d>
 800e52e:	0002      	movs	r2, r0
 800e530:	000b      	movs	r3, r1
 800e532:	2000      	movs	r0, #0
 800e534:	491d      	ldr	r1, [pc, #116]	; (800e5ac <String_to_float+0x2a0>)
 800e536:	f009 f86b 	bl	8017610 <pow>
 800e53a:	0002      	movs	r2, r0
 800e53c:	000b      	movs	r3, r1
 800e53e:	0020      	movs	r0, r4
 800e540:	0029      	movs	r1, r5
 800e542:	f7f3 fe0d 	bl	8002160 <__aeabi_dmul>
 800e546:	0002      	movs	r2, r0
 800e548:	000b      	movs	r3, r1
 800e54a:	0014      	movs	r4, r2
 800e54c:	001d      	movs	r5, r3
 800e54e:	6978      	ldr	r0, [r7, #20]
 800e550:	f7f4 fcae 	bl	8002eb0 <__aeabi_f2d>
 800e554:	0002      	movs	r2, r0
 800e556:	000b      	movs	r3, r1
 800e558:	0020      	movs	r0, r4
 800e55a:	0029      	movs	r1, r5
 800e55c:	f7f2 fec2 	bl	80012e4 <__aeabi_dadd>
 800e560:	0002      	movs	r2, r0
 800e562:	000b      	movs	r3, r1
 800e564:	0010      	movs	r0, r2
 800e566:	0019      	movs	r1, r3
 800e568:	f7f4 fcea 	bl	8002f40 <__aeabi_d2f>
 800e56c:	1c03      	adds	r3, r0, #0
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	e005      	b.n	800e57e <String_to_float+0x272>
				}
				else value+=0;
 800e572:	2100      	movs	r1, #0
 800e574:	6978      	ldr	r0, [r7, #20]
 800e576:	f7f2 f80d 	bl	8000594 <__aeabi_fadd>
 800e57a:	1c03      	adds	r3, r0, #0
 800e57c:	617b      	str	r3, [r7, #20]
			for(uint8_t j=1;j<3;j++)
 800e57e:	210d      	movs	r1, #13
 800e580:	187b      	adds	r3, r7, r1
 800e582:	781a      	ldrb	r2, [r3, #0]
 800e584:	187b      	adds	r3, r7, r1
 800e586:	3201      	adds	r2, #1
 800e588:	701a      	strb	r2, [r3, #0]
 800e58a:	230d      	movs	r3, #13
 800e58c:	18fb      	adds	r3, r7, r3
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	2b02      	cmp	r3, #2
 800e592:	d9a9      	bls.n	800e4e8 <String_to_float+0x1dc>

			}
			value/=100.0;
 800e594:	4906      	ldr	r1, [pc, #24]	; (800e5b0 <String_to_float+0x2a4>)
 800e596:	6978      	ldr	r0, [r7, #20]
 800e598:	f7f2 f99a 	bl	80008d0 <__aeabi_fdiv>
 800e59c:	1c03      	adds	r3, r0, #0
 800e59e:	617b      	str	r3, [r7, #20]


		}


		return value;
 800e5a0:	697b      	ldr	r3, [r7, #20]




}
 800e5a2:	1c18      	adds	r0, r3, #0
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	b007      	add	sp, #28
 800e5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5aa:	46c0      	nop			; (mov r8, r8)
 800e5ac:	40240000 	.word	0x40240000
 800e5b0:	42c80000 	.word	0x42c80000

0800e5b4 <String_To_Float>:
 * @brief  将设定电压电流功率字符数组变为浮点数
 * @param	数组名
 * @retval 对应的浮点数
 */
float String_To_Float(char* string)
{
 800e5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5b6:	b087      	sub	sp, #28
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]

	float sum=0.0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	617b      	str	r3, [r7, #20]
	/*V set I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e5c0:	4bdc      	ldr	r3, [pc, #880]	; (800e934 <String_To_Float+0x380>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d000      	beq.n	800e5ca <String_To_Float+0x16>
 800e5c8:	e081      	b.n	800e6ce <String_To_Float+0x11a>
 800e5ca:	4bda      	ldr	r3, [pc, #872]	; (800e934 <String_To_Float+0x380>)
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d100      	bne.n	800e5d4 <String_To_Float+0x20>
 800e5d2:	e07c      	b.n	800e6ce <String_To_Float+0x11a>
	{
		for(uint8_t i=0;i<3;i++)
 800e5d4:	2313      	movs	r3, #19
 800e5d6:	18fb      	adds	r3, r7, r3
 800e5d8:	2200      	movs	r2, #0
 800e5da:	701a      	strb	r2, [r3, #0]
 800e5dc:	e038      	b.n	800e650 <String_To_Float+0x9c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e5de:	2613      	movs	r6, #19
 800e5e0:	19bb      	adds	r3, r7, r6
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	18d3      	adds	r3, r2, r3
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	3b30      	subs	r3, #48	; 0x30
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	f7f4 fc09 	bl	8002e04 <__aeabi_i2d>
 800e5f2:	0004      	movs	r4, r0
 800e5f4:	000d      	movs	r5, r1
 800e5f6:	19bb      	adds	r3, r7, r6
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2202      	movs	r2, #2
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	0018      	movs	r0, r3
 800e600:	f7f4 fc00 	bl	8002e04 <__aeabi_i2d>
 800e604:	0002      	movs	r2, r0
 800e606:	000b      	movs	r3, r1
 800e608:	2000      	movs	r0, #0
 800e60a:	49cb      	ldr	r1, [pc, #812]	; (800e938 <String_To_Float+0x384>)
 800e60c:	f009 f800 	bl	8017610 <pow>
 800e610:	0002      	movs	r2, r0
 800e612:	000b      	movs	r3, r1
 800e614:	0020      	movs	r0, r4
 800e616:	0029      	movs	r1, r5
 800e618:	f7f3 fda2 	bl	8002160 <__aeabi_dmul>
 800e61c:	0002      	movs	r2, r0
 800e61e:	000b      	movs	r3, r1
 800e620:	0014      	movs	r4, r2
 800e622:	001d      	movs	r5, r3
 800e624:	6978      	ldr	r0, [r7, #20]
 800e626:	f7f4 fc43 	bl	8002eb0 <__aeabi_f2d>
 800e62a:	0002      	movs	r2, r0
 800e62c:	000b      	movs	r3, r1
 800e62e:	0020      	movs	r0, r4
 800e630:	0029      	movs	r1, r5
 800e632:	f7f2 fe57 	bl	80012e4 <__aeabi_dadd>
 800e636:	0002      	movs	r2, r0
 800e638:	000b      	movs	r3, r1
 800e63a:	0010      	movs	r0, r2
 800e63c:	0019      	movs	r1, r3
 800e63e:	f7f4 fc7f 	bl	8002f40 <__aeabi_d2f>
 800e642:	1c03      	adds	r3, r0, #0
 800e644:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<3;i++)
 800e646:	19bb      	adds	r3, r7, r6
 800e648:	781a      	ldrb	r2, [r3, #0]
 800e64a:	19bb      	adds	r3, r7, r6
 800e64c:	3201      	adds	r2, #1
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	2313      	movs	r3, #19
 800e652:	18fb      	adds	r3, r7, r3
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b02      	cmp	r3, #2
 800e658:	d9c1      	bls.n	800e5de <String_To_Float+0x2a>
		}
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e65a:	2312      	movs	r3, #18
 800e65c:	18fb      	adds	r3, r7, r3
 800e65e:	2204      	movs	r2, #4
 800e660:	701a      	strb	r2, [r3, #0]
 800e662:	e02d      	b.n	800e6c0 <String_To_Float+0x10c>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e664:	2512      	movs	r5, #18
 800e666:	197b      	adds	r3, r7, r5
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	18d3      	adds	r3, r2, r3
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	3b30      	subs	r3, #48	; 0x30
 800e672:	0018      	movs	r0, r3
 800e674:	f7f2 fde8 	bl	8001248 <__aeabi_i2f>
 800e678:	1c04      	adds	r4, r0, #0
 800e67a:	197b      	adds	r3, r7, r5
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	3b03      	subs	r3, #3
 800e680:	0018      	movs	r0, r3
 800e682:	f7f4 fbbf 	bl	8002e04 <__aeabi_i2d>
 800e686:	0002      	movs	r2, r0
 800e688:	000b      	movs	r3, r1
 800e68a:	2000      	movs	r0, #0
 800e68c:	49aa      	ldr	r1, [pc, #680]	; (800e938 <String_To_Float+0x384>)
 800e68e:	f008 ffbf 	bl	8017610 <pow>
 800e692:	0002      	movs	r2, r0
 800e694:	000b      	movs	r3, r1
 800e696:	0010      	movs	r0, r2
 800e698:	0019      	movs	r1, r3
 800e69a:	f7f4 fc51 	bl	8002f40 <__aeabi_d2f>
 800e69e:	1c03      	adds	r3, r0, #0
 800e6a0:	1c19      	adds	r1, r3, #0
 800e6a2:	1c20      	adds	r0, r4, #0
 800e6a4:	f7f2 f914 	bl	80008d0 <__aeabi_fdiv>
 800e6a8:	1c03      	adds	r3, r0, #0
 800e6aa:	1c19      	adds	r1, r3, #0
 800e6ac:	6978      	ldr	r0, [r7, #20]
 800e6ae:	f7f1 ff71 	bl	8000594 <__aeabi_fadd>
 800e6b2:	1c03      	adds	r3, r0, #0
 800e6b4:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e6b6:	197b      	adds	r3, r7, r5
 800e6b8:	781a      	ldrb	r2, [r3, #0]
 800e6ba:	197b      	adds	r3, r7, r5
 800e6bc:	3201      	adds	r2, #1
 800e6be:	701a      	strb	r2, [r3, #0]
 800e6c0:	2312      	movs	r3, #18
 800e6c2:	18fb      	adds	r3, r7, r3
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	2b05      	cmp	r3, #5
 800e6c8:	d9cc      	bls.n	800e664 <String_To_Float+0xb0>
		}
		return sum;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	e284      	b.n	800ebd8 <String_To_Float+0x624>
	}
	//rata set
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 800e6ce:	4b99      	ldr	r3, [pc, #612]	; (800e934 <String_To_Float+0x380>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d000      	beq.n	800e6d8 <String_To_Float+0x124>
 800e6d6:	e085      	b.n	800e7e4 <String_To_Float+0x230>
 800e6d8:	4b96      	ldr	r3, [pc, #600]	; (800e934 <String_To_Float+0x380>)
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d000      	beq.n	800e6e2 <String_To_Float+0x12e>
 800e6e0:	e080      	b.n	800e7e4 <String_To_Float+0x230>
 800e6e2:	4b94      	ldr	r3, [pc, #592]	; (800e934 <String_To_Float+0x380>)
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d100      	bne.n	800e6ec <String_To_Float+0x138>
 800e6ea:	e07b      	b.n	800e7e4 <String_To_Float+0x230>
	{
		for(uint8_t i=0;i<1;i++)
 800e6ec:	2311      	movs	r3, #17
 800e6ee:	18fb      	adds	r3, r7, r3
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	701a      	strb	r2, [r3, #0]
 800e6f4:	e037      	b.n	800e766 <String_To_Float+0x1b2>
		{
			sum+=(string[i]-'0')*(pow(10,(0-i)));
 800e6f6:	2611      	movs	r6, #17
 800e6f8:	19bb      	adds	r3, r7, r6
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	18d3      	adds	r3, r2, r3
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	3b30      	subs	r3, #48	; 0x30
 800e704:	0018      	movs	r0, r3
 800e706:	f7f4 fb7d 	bl	8002e04 <__aeabi_i2d>
 800e70a:	0004      	movs	r4, r0
 800e70c:	000d      	movs	r5, r1
 800e70e:	19bb      	adds	r3, r7, r6
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	425b      	negs	r3, r3
 800e714:	0018      	movs	r0, r3
 800e716:	f7f4 fb75 	bl	8002e04 <__aeabi_i2d>
 800e71a:	0002      	movs	r2, r0
 800e71c:	000b      	movs	r3, r1
 800e71e:	2000      	movs	r0, #0
 800e720:	4985      	ldr	r1, [pc, #532]	; (800e938 <String_To_Float+0x384>)
 800e722:	f008 ff75 	bl	8017610 <pow>
 800e726:	0002      	movs	r2, r0
 800e728:	000b      	movs	r3, r1
 800e72a:	0020      	movs	r0, r4
 800e72c:	0029      	movs	r1, r5
 800e72e:	f7f3 fd17 	bl	8002160 <__aeabi_dmul>
 800e732:	0002      	movs	r2, r0
 800e734:	000b      	movs	r3, r1
 800e736:	0014      	movs	r4, r2
 800e738:	001d      	movs	r5, r3
 800e73a:	6978      	ldr	r0, [r7, #20]
 800e73c:	f7f4 fbb8 	bl	8002eb0 <__aeabi_f2d>
 800e740:	0002      	movs	r2, r0
 800e742:	000b      	movs	r3, r1
 800e744:	0020      	movs	r0, r4
 800e746:	0029      	movs	r1, r5
 800e748:	f7f2 fdcc 	bl	80012e4 <__aeabi_dadd>
 800e74c:	0002      	movs	r2, r0
 800e74e:	000b      	movs	r3, r1
 800e750:	0010      	movs	r0, r2
 800e752:	0019      	movs	r1, r3
 800e754:	f7f4 fbf4 	bl	8002f40 <__aeabi_d2f>
 800e758:	1c03      	adds	r3, r0, #0
 800e75a:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<1;i++)
 800e75c:	19bb      	adds	r3, r7, r6
 800e75e:	781a      	ldrb	r2, [r3, #0]
 800e760:	19bb      	adds	r3, r7, r6
 800e762:	3201      	adds	r2, #1
 800e764:	701a      	strb	r2, [r3, #0]
 800e766:	2311      	movs	r3, #17
 800e768:	18fb      	adds	r3, r7, r3
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d0c2      	beq.n	800e6f6 <String_To_Float+0x142>
		}
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e770:	2310      	movs	r3, #16
 800e772:	18fb      	adds	r3, r7, r3
 800e774:	2202      	movs	r2, #2
 800e776:	701a      	strb	r2, [r3, #0]
 800e778:	e02d      	b.n	800e7d6 <String_To_Float+0x222>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-1)));
 800e77a:	2510      	movs	r5, #16
 800e77c:	197b      	adds	r3, r7, r5
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	18d3      	adds	r3, r2, r3
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	3b30      	subs	r3, #48	; 0x30
 800e788:	0018      	movs	r0, r3
 800e78a:	f7f2 fd5d 	bl	8001248 <__aeabi_i2f>
 800e78e:	1c04      	adds	r4, r0, #0
 800e790:	197b      	adds	r3, r7, r5
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	3b01      	subs	r3, #1
 800e796:	0018      	movs	r0, r3
 800e798:	f7f4 fb34 	bl	8002e04 <__aeabi_i2d>
 800e79c:	0002      	movs	r2, r0
 800e79e:	000b      	movs	r3, r1
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	4965      	ldr	r1, [pc, #404]	; (800e938 <String_To_Float+0x384>)
 800e7a4:	f008 ff34 	bl	8017610 <pow>
 800e7a8:	0002      	movs	r2, r0
 800e7aa:	000b      	movs	r3, r1
 800e7ac:	0010      	movs	r0, r2
 800e7ae:	0019      	movs	r1, r3
 800e7b0:	f7f4 fbc6 	bl	8002f40 <__aeabi_d2f>
 800e7b4:	1c03      	adds	r3, r0, #0
 800e7b6:	1c19      	adds	r1, r3, #0
 800e7b8:	1c20      	adds	r0, r4, #0
 800e7ba:	f7f2 f889 	bl	80008d0 <__aeabi_fdiv>
 800e7be:	1c03      	adds	r3, r0, #0
 800e7c0:	1c19      	adds	r1, r3, #0
 800e7c2:	6978      	ldr	r0, [r7, #20]
 800e7c4:	f7f1 fee6 	bl	8000594 <__aeabi_fadd>
 800e7c8:	1c03      	adds	r3, r0, #0
 800e7ca:	617b      	str	r3, [r7, #20]
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e7cc:	197b      	adds	r3, r7, r5
 800e7ce:	781a      	ldrb	r2, [r3, #0]
 800e7d0:	197b      	adds	r3, r7, r5
 800e7d2:	3201      	adds	r2, #1
 800e7d4:	701a      	strb	r2, [r3, #0]
 800e7d6:	2310      	movs	r3, #16
 800e7d8:	18fb      	adds	r3, r7, r3
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d9cc      	bls.n	800e77a <String_To_Float+0x1c6>
		}
		return sum;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	e1f9      	b.n	800ebd8 <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))
 800e7e4:	4b53      	ldr	r3, [pc, #332]	; (800e934 <String_To_Float+0x380>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d14c      	bne.n	800e886 <String_To_Float+0x2d2>
 800e7ec:	4b51      	ldr	r3, [pc, #324]	; (800e934 <String_To_Float+0x380>)
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	2b05      	cmp	r3, #5
 800e7f2:	d148      	bne.n	800e886 <String_To_Float+0x2d2>
 800e7f4:	4b4f      	ldr	r3, [pc, #316]	; (800e934 <String_To_Float+0x380>)
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d144      	bne.n	800e886 <String_To_Float+0x2d2>
	{
		for(uint8_t i=0;i<2;i++)
 800e7fc:	230f      	movs	r3, #15
 800e7fe:	18fb      	adds	r3, r7, r3
 800e800:	2200      	movs	r2, #0
 800e802:	701a      	strb	r2, [r3, #0]
 800e804:	e038      	b.n	800e878 <String_To_Float+0x2c4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e806:	260f      	movs	r6, #15
 800e808:	19bb      	adds	r3, r7, r6
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	18d3      	adds	r3, r2, r3
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	3b30      	subs	r3, #48	; 0x30
 800e814:	0018      	movs	r0, r3
 800e816:	f7f4 faf5 	bl	8002e04 <__aeabi_i2d>
 800e81a:	0004      	movs	r4, r0
 800e81c:	000d      	movs	r5, r1
 800e81e:	19bb      	adds	r3, r7, r6
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	2202      	movs	r2, #2
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	0018      	movs	r0, r3
 800e828:	f7f4 faec 	bl	8002e04 <__aeabi_i2d>
 800e82c:	0002      	movs	r2, r0
 800e82e:	000b      	movs	r3, r1
 800e830:	2000      	movs	r0, #0
 800e832:	4941      	ldr	r1, [pc, #260]	; (800e938 <String_To_Float+0x384>)
 800e834:	f008 feec 	bl	8017610 <pow>
 800e838:	0002      	movs	r2, r0
 800e83a:	000b      	movs	r3, r1
 800e83c:	0020      	movs	r0, r4
 800e83e:	0029      	movs	r1, r5
 800e840:	f7f3 fc8e 	bl	8002160 <__aeabi_dmul>
 800e844:	0002      	movs	r2, r0
 800e846:	000b      	movs	r3, r1
 800e848:	0014      	movs	r4, r2
 800e84a:	001d      	movs	r5, r3
 800e84c:	6978      	ldr	r0, [r7, #20]
 800e84e:	f7f4 fb2f 	bl	8002eb0 <__aeabi_f2d>
 800e852:	0002      	movs	r2, r0
 800e854:	000b      	movs	r3, r1
 800e856:	0020      	movs	r0, r4
 800e858:	0029      	movs	r1, r5
 800e85a:	f7f2 fd43 	bl	80012e4 <__aeabi_dadd>
 800e85e:	0002      	movs	r2, r0
 800e860:	000b      	movs	r3, r1
 800e862:	0010      	movs	r0, r2
 800e864:	0019      	movs	r1, r3
 800e866:	f7f4 fb6b 	bl	8002f40 <__aeabi_d2f>
 800e86a:	1c03      	adds	r3, r0, #0
 800e86c:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800e86e:	19bb      	adds	r3, r7, r6
 800e870:	781a      	ldrb	r2, [r3, #0]
 800e872:	19bb      	adds	r3, r7, r6
 800e874:	3201      	adds	r2, #1
 800e876:	701a      	strb	r2, [r3, #0]
 800e878:	230f      	movs	r3, #15
 800e87a:	18fb      	adds	r3, r7, r3
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d9c1      	bls.n	800e806 <String_To_Float+0x252>
		}

		return sum;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	e1a8      	b.n	800ebd8 <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 800e886:	4b2b      	ldr	r3, [pc, #172]	; (800e934 <String_To_Float+0x380>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d000      	beq.n	800e890 <String_To_Float+0x2dc>
 800e88e:	e08a      	b.n	800e9a6 <String_To_Float+0x3f2>
 800e890:	4b28      	ldr	r3, [pc, #160]	; (800e934 <String_To_Float+0x380>)
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	2b05      	cmp	r3, #5
 800e896:	d000      	beq.n	800e89a <String_To_Float+0x2e6>
 800e898:	e085      	b.n	800e9a6 <String_To_Float+0x3f2>
 800e89a:	4b26      	ldr	r3, [pc, #152]	; (800e934 <String_To_Float+0x380>)
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d000      	beq.n	800e8a4 <String_To_Float+0x2f0>
 800e8a2:	e080      	b.n	800e9a6 <String_To_Float+0x3f2>
	{
		for(uint8_t i=0;i<2;i++)
 800e8a4:	230e      	movs	r3, #14
 800e8a6:	18fb      	adds	r3, r7, r3
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	701a      	strb	r2, [r3, #0]
 800e8ac:	e038      	b.n	800e920 <String_To_Float+0x36c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e8ae:	260e      	movs	r6, #14
 800e8b0:	19bb      	adds	r3, r7, r6
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	18d3      	adds	r3, r2, r3
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	3b30      	subs	r3, #48	; 0x30
 800e8bc:	0018      	movs	r0, r3
 800e8be:	f7f4 faa1 	bl	8002e04 <__aeabi_i2d>
 800e8c2:	0004      	movs	r4, r0
 800e8c4:	000d      	movs	r5, r1
 800e8c6:	19bb      	adds	r3, r7, r6
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2202      	movs	r2, #2
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	0018      	movs	r0, r3
 800e8d0:	f7f4 fa98 	bl	8002e04 <__aeabi_i2d>
 800e8d4:	0002      	movs	r2, r0
 800e8d6:	000b      	movs	r3, r1
 800e8d8:	2000      	movs	r0, #0
 800e8da:	4917      	ldr	r1, [pc, #92]	; (800e938 <String_To_Float+0x384>)
 800e8dc:	f008 fe98 	bl	8017610 <pow>
 800e8e0:	0002      	movs	r2, r0
 800e8e2:	000b      	movs	r3, r1
 800e8e4:	0020      	movs	r0, r4
 800e8e6:	0029      	movs	r1, r5
 800e8e8:	f7f3 fc3a 	bl	8002160 <__aeabi_dmul>
 800e8ec:	0002      	movs	r2, r0
 800e8ee:	000b      	movs	r3, r1
 800e8f0:	0014      	movs	r4, r2
 800e8f2:	001d      	movs	r5, r3
 800e8f4:	6978      	ldr	r0, [r7, #20]
 800e8f6:	f7f4 fadb 	bl	8002eb0 <__aeabi_f2d>
 800e8fa:	0002      	movs	r2, r0
 800e8fc:	000b      	movs	r3, r1
 800e8fe:	0020      	movs	r0, r4
 800e900:	0029      	movs	r1, r5
 800e902:	f7f2 fcef 	bl	80012e4 <__aeabi_dadd>
 800e906:	0002      	movs	r2, r0
 800e908:	000b      	movs	r3, r1
 800e90a:	0010      	movs	r0, r2
 800e90c:	0019      	movs	r1, r3
 800e90e:	f7f4 fb17 	bl	8002f40 <__aeabi_d2f>
 800e912:	1c03      	adds	r3, r0, #0
 800e914:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800e916:	19bb      	adds	r3, r7, r6
 800e918:	781a      	ldrb	r2, [r3, #0]
 800e91a:	19bb      	adds	r3, r7, r6
 800e91c:	3201      	adds	r2, #1
 800e91e:	701a      	strb	r2, [r3, #0]
 800e920:	230e      	movs	r3, #14
 800e922:	18fb      	adds	r3, r7, r3
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d9c1      	bls.n	800e8ae <String_To_Float+0x2fa>
		}
		for(uint8_t i=4;i<=5;i++)
 800e92a:	230d      	movs	r3, #13
 800e92c:	18fb      	adds	r3, r7, r3
 800e92e:	2204      	movs	r2, #4
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	e031      	b.n	800e998 <String_To_Float+0x3e4>
 800e934:	200039f4 	.word	0x200039f4
 800e938:	40240000 	.word	0x40240000
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e93c:	250d      	movs	r5, #13
 800e93e:	197b      	adds	r3, r7, r5
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	18d3      	adds	r3, r2, r3
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	3b30      	subs	r3, #48	; 0x30
 800e94a:	0018      	movs	r0, r3
 800e94c:	f7f2 fc7c 	bl	8001248 <__aeabi_i2f>
 800e950:	1c04      	adds	r4, r0, #0
 800e952:	197b      	adds	r3, r7, r5
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	3b03      	subs	r3, #3
 800e958:	0018      	movs	r0, r3
 800e95a:	f7f4 fa53 	bl	8002e04 <__aeabi_i2d>
 800e95e:	0002      	movs	r2, r0
 800e960:	000b      	movs	r3, r1
 800e962:	2000      	movs	r0, #0
 800e964:	499e      	ldr	r1, [pc, #632]	; (800ebe0 <String_To_Float+0x62c>)
 800e966:	f008 fe53 	bl	8017610 <pow>
 800e96a:	0002      	movs	r2, r0
 800e96c:	000b      	movs	r3, r1
 800e96e:	0010      	movs	r0, r2
 800e970:	0019      	movs	r1, r3
 800e972:	f7f4 fae5 	bl	8002f40 <__aeabi_d2f>
 800e976:	1c03      	adds	r3, r0, #0
 800e978:	1c19      	adds	r1, r3, #0
 800e97a:	1c20      	adds	r0, r4, #0
 800e97c:	f7f1 ffa8 	bl	80008d0 <__aeabi_fdiv>
 800e980:	1c03      	adds	r3, r0, #0
 800e982:	1c19      	adds	r1, r3, #0
 800e984:	6978      	ldr	r0, [r7, #20]
 800e986:	f7f1 fe05 	bl	8000594 <__aeabi_fadd>
 800e98a:	1c03      	adds	r3, r0, #0
 800e98c:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800e98e:	197b      	adds	r3, r7, r5
 800e990:	781a      	ldrb	r2, [r3, #0]
 800e992:	197b      	adds	r3, r7, r5
 800e994:	3201      	adds	r2, #1
 800e996:	701a      	strb	r2, [r3, #0]
 800e998:	230d      	movs	r3, #13
 800e99a:	18fb      	adds	r3, r7, r3
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b05      	cmp	r3, #5
 800e9a0:	d9cc      	bls.n	800e93c <String_To_Float+0x388>
		}

		return sum;
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	e118      	b.n	800ebd8 <String_To_Float+0x624>
	}
	/*save load*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 800e9a6:	4b8f      	ldr	r3, [pc, #572]	; (800ebe4 <String_To_Float+0x630>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b03      	cmp	r3, #3
 800e9ac:	d000      	beq.n	800e9b0 <String_To_Float+0x3fc>
 800e9ae:	e086      	b.n	800eabe <String_To_Float+0x50a>
 800e9b0:	4b8c      	ldr	r3, [pc, #560]	; (800ebe4 <String_To_Float+0x630>)
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d100      	bne.n	800e9ba <String_To_Float+0x406>
 800e9b8:	e081      	b.n	800eabe <String_To_Float+0x50a>
 800e9ba:	4b8a      	ldr	r3, [pc, #552]	; (800ebe4 <String_To_Float+0x630>)
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d100      	bne.n	800e9c4 <String_To_Float+0x410>
 800e9c2:	e07c      	b.n	800eabe <String_To_Float+0x50a>
	{
		for(uint8_t i=0;i<=2;i++)
 800e9c4:	230c      	movs	r3, #12
 800e9c6:	18fb      	adds	r3, r7, r3
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	701a      	strb	r2, [r3, #0]
 800e9cc:	e038      	b.n	800ea40 <String_To_Float+0x48c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e9ce:	260c      	movs	r6, #12
 800e9d0:	19bb      	adds	r3, r7, r6
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	18d3      	adds	r3, r2, r3
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	3b30      	subs	r3, #48	; 0x30
 800e9dc:	0018      	movs	r0, r3
 800e9de:	f7f4 fa11 	bl	8002e04 <__aeabi_i2d>
 800e9e2:	0004      	movs	r4, r0
 800e9e4:	000d      	movs	r5, r1
 800e9e6:	19bb      	adds	r3, r7, r6
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	0018      	movs	r0, r3
 800e9f0:	f7f4 fa08 	bl	8002e04 <__aeabi_i2d>
 800e9f4:	0002      	movs	r2, r0
 800e9f6:	000b      	movs	r3, r1
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	4979      	ldr	r1, [pc, #484]	; (800ebe0 <String_To_Float+0x62c>)
 800e9fc:	f008 fe08 	bl	8017610 <pow>
 800ea00:	0002      	movs	r2, r0
 800ea02:	000b      	movs	r3, r1
 800ea04:	0020      	movs	r0, r4
 800ea06:	0029      	movs	r1, r5
 800ea08:	f7f3 fbaa 	bl	8002160 <__aeabi_dmul>
 800ea0c:	0002      	movs	r2, r0
 800ea0e:	000b      	movs	r3, r1
 800ea10:	0014      	movs	r4, r2
 800ea12:	001d      	movs	r5, r3
 800ea14:	6978      	ldr	r0, [r7, #20]
 800ea16:	f7f4 fa4b 	bl	8002eb0 <__aeabi_f2d>
 800ea1a:	0002      	movs	r2, r0
 800ea1c:	000b      	movs	r3, r1
 800ea1e:	0020      	movs	r0, r4
 800ea20:	0029      	movs	r1, r5
 800ea22:	f7f2 fc5f 	bl	80012e4 <__aeabi_dadd>
 800ea26:	0002      	movs	r2, r0
 800ea28:	000b      	movs	r3, r1
 800ea2a:	0010      	movs	r0, r2
 800ea2c:	0019      	movs	r1, r3
 800ea2e:	f7f4 fa87 	bl	8002f40 <__aeabi_d2f>
 800ea32:	1c03      	adds	r3, r0, #0
 800ea34:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800ea36:	19bb      	adds	r3, r7, r6
 800ea38:	781a      	ldrb	r2, [r3, #0]
 800ea3a:	19bb      	adds	r3, r7, r6
 800ea3c:	3201      	adds	r2, #1
 800ea3e:	701a      	strb	r2, [r3, #0]
 800ea40:	230c      	movs	r3, #12
 800ea42:	18fb      	adds	r3, r7, r3
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d9c1      	bls.n	800e9ce <String_To_Float+0x41a>
		}
		for(uint8_t i=4;i<=5;i++)
 800ea4a:	230b      	movs	r3, #11
 800ea4c:	18fb      	adds	r3, r7, r3
 800ea4e:	2204      	movs	r2, #4
 800ea50:	701a      	strb	r2, [r3, #0]
 800ea52:	e02d      	b.n	800eab0 <String_To_Float+0x4fc>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800ea54:	250b      	movs	r5, #11
 800ea56:	197b      	adds	r3, r7, r5
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	18d3      	adds	r3, r2, r3
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	3b30      	subs	r3, #48	; 0x30
 800ea62:	0018      	movs	r0, r3
 800ea64:	f7f2 fbf0 	bl	8001248 <__aeabi_i2f>
 800ea68:	1c04      	adds	r4, r0, #0
 800ea6a:	197b      	adds	r3, r7, r5
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	3b03      	subs	r3, #3
 800ea70:	0018      	movs	r0, r3
 800ea72:	f7f4 f9c7 	bl	8002e04 <__aeabi_i2d>
 800ea76:	0002      	movs	r2, r0
 800ea78:	000b      	movs	r3, r1
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	4958      	ldr	r1, [pc, #352]	; (800ebe0 <String_To_Float+0x62c>)
 800ea7e:	f008 fdc7 	bl	8017610 <pow>
 800ea82:	0002      	movs	r2, r0
 800ea84:	000b      	movs	r3, r1
 800ea86:	0010      	movs	r0, r2
 800ea88:	0019      	movs	r1, r3
 800ea8a:	f7f4 fa59 	bl	8002f40 <__aeabi_d2f>
 800ea8e:	1c03      	adds	r3, r0, #0
 800ea90:	1c19      	adds	r1, r3, #0
 800ea92:	1c20      	adds	r0, r4, #0
 800ea94:	f7f1 ff1c 	bl	80008d0 <__aeabi_fdiv>
 800ea98:	1c03      	adds	r3, r0, #0
 800ea9a:	1c19      	adds	r1, r3, #0
 800ea9c:	6978      	ldr	r0, [r7, #20]
 800ea9e:	f7f1 fd79 	bl	8000594 <__aeabi_fadd>
 800eaa2:	1c03      	adds	r3, r0, #0
 800eaa4:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800eaa6:	197b      	adds	r3, r7, r5
 800eaa8:	781a      	ldrb	r2, [r3, #0]
 800eaaa:	197b      	adds	r3, r7, r5
 800eaac:	3201      	adds	r2, #1
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	230b      	movs	r3, #11
 800eab2:	18fb      	adds	r3, r7, r3
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	2b05      	cmp	r3, #5
 800eab8:	d9cc      	bls.n	800ea54 <String_To_Float+0x4a0>
		}

		return sum;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	e08c      	b.n	800ebd8 <String_To_Float+0x624>
	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))
 800eabe:	4b49      	ldr	r3, [pc, #292]	; (800ebe4 <String_To_Float+0x630>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d000      	beq.n	800eac8 <String_To_Float+0x514>
 800eac6:	e086      	b.n	800ebd6 <String_To_Float+0x622>
 800eac8:	4b46      	ldr	r3, [pc, #280]	; (800ebe4 <String_To_Float+0x630>)
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	2b08      	cmp	r3, #8
 800eace:	d000      	beq.n	800ead2 <String_To_Float+0x51e>
 800ead0:	e081      	b.n	800ebd6 <String_To_Float+0x622>
 800ead2:	4b44      	ldr	r3, [pc, #272]	; (800ebe4 <String_To_Float+0x630>)
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d100      	bne.n	800eadc <String_To_Float+0x528>
 800eada:	e07c      	b.n	800ebd6 <String_To_Float+0x622>
	{
		for(uint8_t i=0;i<=2;i++)
 800eadc:	230a      	movs	r3, #10
 800eade:	18fb      	adds	r3, r7, r3
 800eae0:	2200      	movs	r2, #0
 800eae2:	701a      	strb	r2, [r3, #0]
 800eae4:	e038      	b.n	800eb58 <String_To_Float+0x5a4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800eae6:	260a      	movs	r6, #10
 800eae8:	19bb      	adds	r3, r7, r6
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	18d3      	adds	r3, r2, r3
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	3b30      	subs	r3, #48	; 0x30
 800eaf4:	0018      	movs	r0, r3
 800eaf6:	f7f4 f985 	bl	8002e04 <__aeabi_i2d>
 800eafa:	0004      	movs	r4, r0
 800eafc:	000d      	movs	r5, r1
 800eafe:	19bb      	adds	r3, r7, r6
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	2202      	movs	r2, #2
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	0018      	movs	r0, r3
 800eb08:	f7f4 f97c 	bl	8002e04 <__aeabi_i2d>
 800eb0c:	0002      	movs	r2, r0
 800eb0e:	000b      	movs	r3, r1
 800eb10:	2000      	movs	r0, #0
 800eb12:	4933      	ldr	r1, [pc, #204]	; (800ebe0 <String_To_Float+0x62c>)
 800eb14:	f008 fd7c 	bl	8017610 <pow>
 800eb18:	0002      	movs	r2, r0
 800eb1a:	000b      	movs	r3, r1
 800eb1c:	0020      	movs	r0, r4
 800eb1e:	0029      	movs	r1, r5
 800eb20:	f7f3 fb1e 	bl	8002160 <__aeabi_dmul>
 800eb24:	0002      	movs	r2, r0
 800eb26:	000b      	movs	r3, r1
 800eb28:	0014      	movs	r4, r2
 800eb2a:	001d      	movs	r5, r3
 800eb2c:	6978      	ldr	r0, [r7, #20]
 800eb2e:	f7f4 f9bf 	bl	8002eb0 <__aeabi_f2d>
 800eb32:	0002      	movs	r2, r0
 800eb34:	000b      	movs	r3, r1
 800eb36:	0020      	movs	r0, r4
 800eb38:	0029      	movs	r1, r5
 800eb3a:	f7f2 fbd3 	bl	80012e4 <__aeabi_dadd>
 800eb3e:	0002      	movs	r2, r0
 800eb40:	000b      	movs	r3, r1
 800eb42:	0010      	movs	r0, r2
 800eb44:	0019      	movs	r1, r3
 800eb46:	f7f4 f9fb 	bl	8002f40 <__aeabi_d2f>
 800eb4a:	1c03      	adds	r3, r0, #0
 800eb4c:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800eb4e:	19bb      	adds	r3, r7, r6
 800eb50:	781a      	ldrb	r2, [r3, #0]
 800eb52:	19bb      	adds	r3, r7, r6
 800eb54:	3201      	adds	r2, #1
 800eb56:	701a      	strb	r2, [r3, #0]
 800eb58:	230a      	movs	r3, #10
 800eb5a:	18fb      	adds	r3, r7, r3
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d9c1      	bls.n	800eae6 <String_To_Float+0x532>
		}
		for(uint8_t i=4;i<=5;i++)
 800eb62:	2309      	movs	r3, #9
 800eb64:	18fb      	adds	r3, r7, r3
 800eb66:	2204      	movs	r2, #4
 800eb68:	701a      	strb	r2, [r3, #0]
 800eb6a:	e02d      	b.n	800ebc8 <String_To_Float+0x614>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800eb6c:	2509      	movs	r5, #9
 800eb6e:	197b      	adds	r3, r7, r5
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	18d3      	adds	r3, r2, r3
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	3b30      	subs	r3, #48	; 0x30
 800eb7a:	0018      	movs	r0, r3
 800eb7c:	f7f2 fb64 	bl	8001248 <__aeabi_i2f>
 800eb80:	1c04      	adds	r4, r0, #0
 800eb82:	197b      	adds	r3, r7, r5
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	3b03      	subs	r3, #3
 800eb88:	0018      	movs	r0, r3
 800eb8a:	f7f4 f93b 	bl	8002e04 <__aeabi_i2d>
 800eb8e:	0002      	movs	r2, r0
 800eb90:	000b      	movs	r3, r1
 800eb92:	2000      	movs	r0, #0
 800eb94:	4912      	ldr	r1, [pc, #72]	; (800ebe0 <String_To_Float+0x62c>)
 800eb96:	f008 fd3b 	bl	8017610 <pow>
 800eb9a:	0002      	movs	r2, r0
 800eb9c:	000b      	movs	r3, r1
 800eb9e:	0010      	movs	r0, r2
 800eba0:	0019      	movs	r1, r3
 800eba2:	f7f4 f9cd 	bl	8002f40 <__aeabi_d2f>
 800eba6:	1c03      	adds	r3, r0, #0
 800eba8:	1c19      	adds	r1, r3, #0
 800ebaa:	1c20      	adds	r0, r4, #0
 800ebac:	f7f1 fe90 	bl	80008d0 <__aeabi_fdiv>
 800ebb0:	1c03      	adds	r3, r0, #0
 800ebb2:	1c19      	adds	r1, r3, #0
 800ebb4:	6978      	ldr	r0, [r7, #20]
 800ebb6:	f7f1 fced 	bl	8000594 <__aeabi_fadd>
 800ebba:	1c03      	adds	r3, r0, #0
 800ebbc:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800ebbe:	197b      	adds	r3, r7, r5
 800ebc0:	781a      	ldrb	r2, [r3, #0]
 800ebc2:	197b      	adds	r3, r7, r5
 800ebc4:	3201      	adds	r2, #1
 800ebc6:	701a      	strb	r2, [r3, #0]
 800ebc8:	2309      	movs	r3, #9
 800ebca:	18fb      	adds	r3, r7, r3
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2b05      	cmp	r3, #5
 800ebd0:	d9cc      	bls.n	800eb6c <String_To_Float+0x5b8>
		}

		return sum;
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	e000      	b.n	800ebd8 <String_To_Float+0x624>
	}

	else return 0.0;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	1c18      	adds	r0, r3, #0
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	b007      	add	sp, #28
 800ebde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebe0:	40240000 	.word	0x40240000
 800ebe4:	200039f4 	.word	0x200039f4

0800ebe8 <Keys_Input_Set_Voltage>:
 * @brief  数字键盘输入设定电压的处理函数
 * @param  数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Voltage(char Number)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	0002      	movs	r2, r0
 800ebf0:	1dfb      	adds	r3, r7, #7
 800ebf2:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (LOCK_UNLOCK == UNLOCK) )
 800ebf4:	4b21      	ldr	r3, [pc, #132]	; (800ec7c <Keys_Input_Set_Voltage+0x94>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d13b      	bne.n	800ec74 <Keys_Input_Set_Voltage+0x8c>
 800ebfc:	4b1f      	ldr	r3, [pc, #124]	; (800ec7c <Keys_Input_Set_Voltage+0x94>)
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d137      	bne.n	800ec74 <Keys_Input_Set_Voltage+0x8c>
 800ec04:	4b1e      	ldr	r3, [pc, #120]	; (800ec80 <Keys_Input_Set_Voltage+0x98>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d133      	bne.n	800ec74 <Keys_Input_Set_Voltage+0x8c>
	{
		Cursor_flash_off();
 800ec0c:	f005 fc2a 	bl	8014464 <Cursor_flash_off>
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ec10:	4b1c      	ldr	r3, [pc, #112]	; (800ec84 <Keys_Input_Set_Voltage+0x9c>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d019      	beq.n	800ec4c <Keys_Input_Set_Voltage+0x64>
		{
		    Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ec18:	4b1a      	ldr	r3, [pc, #104]	; (800ec84 <Keys_Input_Set_Voltage+0x9c>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	701a      	strb	r2, [r3, #0]
		    Cursor_flash_off();
 800ec1e:	f005 fc21 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 0;                                    //指针设为0位
 800ec22:	4b19      	ldr	r3, [pc, #100]	; (800ec88 <Keys_Input_Set_Voltage+0xa0>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	701a      	strb	r2, [r3, #0]

			String_Voltage[0] = ' ';
 800ec28:	4b18      	ldr	r3, [pc, #96]	; (800ec8c <Keys_Input_Set_Voltage+0xa4>)
 800ec2a:	2220      	movs	r2, #32
 800ec2c:	701a      	strb	r2, [r3, #0]
			String_Voltage[1] = ' ';
 800ec2e:	4b17      	ldr	r3, [pc, #92]	; (800ec8c <Keys_Input_Set_Voltage+0xa4>)
 800ec30:	2220      	movs	r2, #32
 800ec32:	705a      	strb	r2, [r3, #1]
			String_Voltage[2] = ' ';
 800ec34:	4b15      	ldr	r3, [pc, #84]	; (800ec8c <Keys_Input_Set_Voltage+0xa4>)
 800ec36:	2220      	movs	r2, #32
 800ec38:	709a      	strb	r2, [r3, #2]
			String_Voltage[3] = ' ';
 800ec3a:	4b14      	ldr	r3, [pc, #80]	; (800ec8c <Keys_Input_Set_Voltage+0xa4>)
 800ec3c:	2220      	movs	r2, #32
 800ec3e:	70da      	strb	r2, [r3, #3]
			String_Voltage[4] = ' ';
 800ec40:	4b12      	ldr	r3, [pc, #72]	; (800ec8c <Keys_Input_Set_Voltage+0xa4>)
 800ec42:	2220      	movs	r2, #32
 800ec44:	711a      	strb	r2, [r3, #4]
			String_Voltage[5] = ' ';
 800ec46:	4b11      	ldr	r3, [pc, #68]	; (800ec8c <Keys_Input_Set_Voltage+0xa4>)
 800ec48:	2220      	movs	r2, #32
 800ec4a:	715a      	strb	r2, [r3, #5]

		}


		String_Voltage[Cursor_Position] = Number;                  //使光标位置置Number
 800ec4c:	4b0e      	ldr	r3, [pc, #56]	; (800ec88 <Keys_Input_Set_Voltage+0xa0>)
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	0019      	movs	r1, r3
 800ec52:	4b0e      	ldr	r3, [pc, #56]	; (800ec8c <Keys_Input_Set_Voltage+0xa4>)
 800ec54:	1dfa      	adds	r2, r7, #7
 800ec56:	7812      	ldrb	r2, [r2, #0]
 800ec58:	545a      	strb	r2, [r3, r1]
		Cursor_Position ++;                                        //光标位置加1
 800ec5a:	4b0b      	ldr	r3, [pc, #44]	; (800ec88 <Keys_Input_Set_Voltage+0xa0>)
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	4b09      	ldr	r3, [pc, #36]	; (800ec88 <Keys_Input_Set_Voltage+0xa0>)
 800ec64:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6) Cursor_Position=0;
 800ec66:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <Keys_Input_Set_Voltage+0xa0>)
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	2b06      	cmp	r3, #6
 800ec6c:	d102      	bne.n	800ec74 <Keys_Input_Set_Voltage+0x8c>
 800ec6e:	4b06      	ldr	r3, [pc, #24]	; (800ec88 <Keys_Input_Set_Voltage+0xa0>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	701a      	strb	r2, [r3, #0]

	}

}
 800ec74:	46c0      	nop			; (mov r8, r8)
 800ec76:	46bd      	mov	sp, r7
 800ec78:	b002      	add	sp, #8
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	200039f4 	.word	0x200039f4
 800ec80:	2000398b 	.word	0x2000398b
 800ec84:	20002fd2 	.word	0x20002fd2
 800ec88:	2000398e 	.word	0x2000398e
 800ec8c:	20003058 	.word	0x20003058

0800ec90 <Keys_Input_Set_Current>:
 * @brief  数字键盘输入设定电流的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Current(char Number)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	0002      	movs	r2, r0
 800ec98:	1dfb      	adds	r3, r7, #7
 800ec9a:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (LOCK_UNLOCK == UNLOCK) )
 800ec9c:	4b1d      	ldr	r3, [pc, #116]	; (800ed14 <Keys_Input_Set_Current+0x84>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b02      	cmp	r3, #2
 800eca2:	d132      	bne.n	800ed0a <Keys_Input_Set_Current+0x7a>
 800eca4:	4b1b      	ldr	r3, [pc, #108]	; (800ed14 <Keys_Input_Set_Current+0x84>)
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d12e      	bne.n	800ed0a <Keys_Input_Set_Current+0x7a>
 800ecac:	4b1a      	ldr	r3, [pc, #104]	; (800ed18 <Keys_Input_Set_Current+0x88>)
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d12a      	bne.n	800ed0a <Keys_Input_Set_Current+0x7a>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ecb4:	4b19      	ldr	r3, [pc, #100]	; (800ed1c <Keys_Input_Set_Current+0x8c>)
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d019      	beq.n	800ecf0 <Keys_Input_Set_Current+0x60>
		{
		    Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ecbc:	4b17      	ldr	r3, [pc, #92]	; (800ed1c <Keys_Input_Set_Current+0x8c>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	701a      	strb	r2, [r3, #0]
		    Cursor_flash_off();
 800ecc2:	f005 fbcf 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 9;                                    //指针设为0位
 800ecc6:	4b16      	ldr	r3, [pc, #88]	; (800ed20 <Keys_Input_Set_Current+0x90>)
 800ecc8:	2209      	movs	r2, #9
 800ecca:	701a      	strb	r2, [r3, #0]

			String_Current[0] = ' ';
 800eccc:	4b15      	ldr	r3, [pc, #84]	; (800ed24 <Keys_Input_Set_Current+0x94>)
 800ecce:	2220      	movs	r2, #32
 800ecd0:	701a      	strb	r2, [r3, #0]
			String_Current[1] = ' ';
 800ecd2:	4b14      	ldr	r3, [pc, #80]	; (800ed24 <Keys_Input_Set_Current+0x94>)
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	705a      	strb	r2, [r3, #1]
			String_Current[2] = ' ';
 800ecd8:	4b12      	ldr	r3, [pc, #72]	; (800ed24 <Keys_Input_Set_Current+0x94>)
 800ecda:	2220      	movs	r2, #32
 800ecdc:	709a      	strb	r2, [r3, #2]
			String_Current[3] = ' ';
 800ecde:	4b11      	ldr	r3, [pc, #68]	; (800ed24 <Keys_Input_Set_Current+0x94>)
 800ece0:	2220      	movs	r2, #32
 800ece2:	70da      	strb	r2, [r3, #3]
			String_Current[4] = ' ';
 800ece4:	4b0f      	ldr	r3, [pc, #60]	; (800ed24 <Keys_Input_Set_Current+0x94>)
 800ece6:	2220      	movs	r2, #32
 800ece8:	711a      	strb	r2, [r3, #4]
			String_Current[5] = ' ';
 800ecea:	4b0e      	ldr	r3, [pc, #56]	; (800ed24 <Keys_Input_Set_Current+0x94>)
 800ecec:	2220      	movs	r2, #32
 800ecee:	715a      	strb	r2, [r3, #5]

		}


		String_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800ecf0:	4b0b      	ldr	r3, [pc, #44]	; (800ed20 <Keys_Input_Set_Current+0x90>)
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	3b09      	subs	r3, #9
 800ecf6:	4a0b      	ldr	r2, [pc, #44]	; (800ed24 <Keys_Input_Set_Current+0x94>)
 800ecf8:	1df9      	adds	r1, r7, #7
 800ecfa:	7809      	ldrb	r1, [r1, #0]
 800ecfc:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800ecfe:	4b08      	ldr	r3, [pc, #32]	; (800ed20 <Keys_Input_Set_Current+0x90>)
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	3301      	adds	r3, #1
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	4b06      	ldr	r3, [pc, #24]	; (800ed20 <Keys_Input_Set_Current+0x90>)
 800ed08:	701a      	strb	r2, [r3, #0]


	}

}
 800ed0a:	46c0      	nop			; (mov r8, r8)
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	b002      	add	sp, #8
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	46c0      	nop			; (mov r8, r8)
 800ed14:	200039f4 	.word	0x200039f4
 800ed18:	2000398b 	.word	0x2000398b
 800ed1c:	20002fd2 	.word	0x20002fd2
 800ed20:	2000398e 	.word	0x2000398e
 800ed24:	20003060 	.word	0x20003060

0800ed28 <Keys_Input_Set_V_Rate>:
 * @brief  数字键盘输入设定V_Rate时间的处理函数（暂定0-30）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_V_Rate(char Number)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	0002      	movs	r2, r0
 800ed30:	1dfb      	adds	r3, r7, #7
 800ed32:	701a      	strb	r2, [r3, #0]

	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800ed34:	4b32      	ldr	r3, [pc, #200]	; (800ee00 <Keys_Input_Set_V_Rate+0xd8>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d15d      	bne.n	800edf8 <Keys_Input_Set_V_Rate+0xd0>
 800ed3c:	4b30      	ldr	r3, [pc, #192]	; (800ee00 <Keys_Input_Set_V_Rate+0xd8>)
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d159      	bne.n	800edf8 <Keys_Input_Set_V_Rate+0xd0>
 800ed44:	4b2e      	ldr	r3, [pc, #184]	; (800ee00 <Keys_Input_Set_V_Rate+0xd8>)
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d155      	bne.n	800edf8 <Keys_Input_Set_V_Rate+0xd0>
 800ed4c:	4b2d      	ldr	r3, [pc, #180]	; (800ee04 <Keys_Input_Set_V_Rate+0xdc>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d151      	bne.n	800edf8 <Keys_Input_Set_V_Rate+0xd0>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ed54:	4b2c      	ldr	r3, [pc, #176]	; (800ee08 <Keys_Input_Set_V_Rate+0xe0>)
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d022      	beq.n	800eda2 <Keys_Input_Set_V_Rate+0x7a>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ed5c:	4b2a      	ldr	r3, [pc, #168]	; (800ee08 <Keys_Input_Set_V_Rate+0xe0>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ed62:	f005 fb7f 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 6;                                     //指针设为0位
 800ed66:	4b29      	ldr	r3, [pc, #164]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800ed68:	2206      	movs	r2, #6
 800ed6a:	701a      	strb	r2, [r3, #0]

			String_V_Rate[0] = '0';                                 //初始化
 800ed6c:	4b28      	ldr	r3, [pc, #160]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed6e:	2230      	movs	r2, #48	; 0x30
 800ed70:	701a      	strb	r2, [r3, #0]
			String_V_Rate[1] = '.';
 800ed72:	4b27      	ldr	r3, [pc, #156]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed74:	222e      	movs	r2, #46	; 0x2e
 800ed76:	705a      	strb	r2, [r3, #1]
			String_V_Rate[2] = '0';
 800ed78:	4b25      	ldr	r3, [pc, #148]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed7a:	2230      	movs	r2, #48	; 0x30
 800ed7c:	709a      	strb	r2, [r3, #2]
			String_V_Rate[3] = '0';
 800ed7e:	4b24      	ldr	r3, [pc, #144]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed80:	2230      	movs	r2, #48	; 0x30
 800ed82:	70da      	strb	r2, [r3, #3]
			String_V_Rate[4] = ' ';
 800ed84:	4b22      	ldr	r3, [pc, #136]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed86:	2220      	movs	r2, #32
 800ed88:	711a      	strb	r2, [r3, #4]

			String_V_Rate[5] = 'V';
 800ed8a:	4b21      	ldr	r3, [pc, #132]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed8c:	2256      	movs	r2, #86	; 0x56
 800ed8e:	715a      	strb	r2, [r3, #5]
			String_V_Rate[6] = '/';
 800ed90:	4b1f      	ldr	r3, [pc, #124]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed92:	222f      	movs	r2, #47	; 0x2f
 800ed94:	719a      	strb	r2, [r3, #6]
			String_V_Rate[7] = 'm';
 800ed96:	4b1e      	ldr	r3, [pc, #120]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed98:	226d      	movs	r2, #109	; 0x6d
 800ed9a:	71da      	strb	r2, [r3, #7]
			String_V_Rate[8] = 's';
 800ed9c:	4b1c      	ldr	r3, [pc, #112]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ed9e:	2273      	movs	r2, #115	; 0x73
 800eda0:	721a      	strb	r2, [r3, #8]

		}

		if(Cursor_Position==0+6)
 800eda2:	4b1a      	ldr	r3, [pc, #104]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	2b06      	cmp	r3, #6
 800eda8:	d10a      	bne.n	800edc0 <Keys_Input_Set_V_Rate+0x98>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800edaa:	4b18      	ldr	r3, [pc, #96]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	3b06      	subs	r3, #6
 800edb0:	4a17      	ldr	r2, [pc, #92]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800edb2:	1df9      	adds	r1, r7, #7
 800edb4:	7809      	ldrb	r1, [r1, #0]
 800edb6:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800edb8:	4b14      	ldr	r3, [pc, #80]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800edba:	2208      	movs	r2, #8
 800edbc:	701a      	strb	r2, [r3, #0]
			return;
 800edbe:	e01b      	b.n	800edf8 <Keys_Input_Set_V_Rate+0xd0>
		}
		if(Cursor_Position == 3+6)
 800edc0:	4b12      	ldr	r3, [pc, #72]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	2b09      	cmp	r3, #9
 800edc6:	d10a      	bne.n	800edde <Keys_Input_Set_V_Rate+0xb6>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800edc8:	4b10      	ldr	r3, [pc, #64]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	3b06      	subs	r3, #6
 800edce:	4a10      	ldr	r2, [pc, #64]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800edd0:	1df9      	adds	r1, r7, #7
 800edd2:	7809      	ldrb	r1, [r1, #0]
 800edd4:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800edd6:	4b0d      	ldr	r3, [pc, #52]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800edd8:	2206      	movs	r2, #6
 800edda:	701a      	strb	r2, [r3, #0]
			return;
 800eddc:	e00c      	b.n	800edf8 <Keys_Input_Set_V_Rate+0xd0>
		}
		String_V_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800edde:	4b0b      	ldr	r3, [pc, #44]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	3b06      	subs	r3, #6
 800ede4:	4a0a      	ldr	r2, [pc, #40]	; (800ee10 <Keys_Input_Set_V_Rate+0xe8>)
 800ede6:	1df9      	adds	r1, r7, #7
 800ede8:	7809      	ldrb	r1, [r1, #0]
 800edea:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800edec:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	3301      	adds	r3, #1
 800edf2:	b2da      	uxtb	r2, r3
 800edf4:	4b05      	ldr	r3, [pc, #20]	; (800ee0c <Keys_Input_Set_V_Rate+0xe4>)
 800edf6:	701a      	strb	r2, [r3, #0]
	}


}
 800edf8:	46bd      	mov	sp, r7
 800edfa:	b002      	add	sp, #8
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	46c0      	nop			; (mov r8, r8)
 800ee00:	200039f4 	.word	0x200039f4
 800ee04:	2000398b 	.word	0x2000398b
 800ee08:	20002fd2 	.word	0x20002fd2
 800ee0c:	2000398e 	.word	0x2000398e
 800ee10:	2000304c 	.word	0x2000304c

0800ee14 <Keys_Input_Set_I_Rate>:
 * @brief  数字键盘输入设定I_Rate时间的处理函数（暂定0-10）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_I_Rate(char Number)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	0002      	movs	r2, r0
 800ee1c:	1dfb      	adds	r3, r7, #7
 800ee1e:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800ee20:	4b32      	ldr	r3, [pc, #200]	; (800eeec <Keys_Input_Set_I_Rate+0xd8>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d15d      	bne.n	800eee4 <Keys_Input_Set_I_Rate+0xd0>
 800ee28:	4b30      	ldr	r3, [pc, #192]	; (800eeec <Keys_Input_Set_I_Rate+0xd8>)
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d159      	bne.n	800eee4 <Keys_Input_Set_I_Rate+0xd0>
 800ee30:	4b2e      	ldr	r3, [pc, #184]	; (800eeec <Keys_Input_Set_I_Rate+0xd8>)
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d155      	bne.n	800eee4 <Keys_Input_Set_I_Rate+0xd0>
 800ee38:	4b2d      	ldr	r3, [pc, #180]	; (800eef0 <Keys_Input_Set_I_Rate+0xdc>)
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d151      	bne.n	800eee4 <Keys_Input_Set_I_Rate+0xd0>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                           //第一次按下按键
 800ee40:	4b2c      	ldr	r3, [pc, #176]	; (800eef4 <Keys_Input_Set_I_Rate+0xe0>)
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d022      	beq.n	800ee8e <Keys_Input_Set_I_Rate+0x7a>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ee48:	4b2a      	ldr	r3, [pc, #168]	; (800eef4 <Keys_Input_Set_I_Rate+0xe0>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 6;                                     //指针设为0位
 800ee4e:	4b2a      	ldr	r3, [pc, #168]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800ee50:	2206      	movs	r2, #6
 800ee52:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ee54:	f005 fb06 	bl	8014464 <Cursor_flash_off>
			String_I_Rate[0] = '0';                                  //初始化接收输入的字符串
 800ee58:	4b28      	ldr	r3, [pc, #160]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee5a:	2230      	movs	r2, #48	; 0x30
 800ee5c:	701a      	strb	r2, [r3, #0]
			String_I_Rate[1] = '.';
 800ee5e:	4b27      	ldr	r3, [pc, #156]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee60:	222e      	movs	r2, #46	; 0x2e
 800ee62:	705a      	strb	r2, [r3, #1]
			String_I_Rate[2] = '0';
 800ee64:	4b25      	ldr	r3, [pc, #148]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee66:	2230      	movs	r2, #48	; 0x30
 800ee68:	709a      	strb	r2, [r3, #2]
			String_I_Rate[3] = '0';
 800ee6a:	4b24      	ldr	r3, [pc, #144]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee6c:	2230      	movs	r2, #48	; 0x30
 800ee6e:	70da      	strb	r2, [r3, #3]
			String_I_Rate[5] = ' ';
 800ee70:	4b22      	ldr	r3, [pc, #136]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee72:	2220      	movs	r2, #32
 800ee74:	715a      	strb	r2, [r3, #5]
			String_I_Rate[6] = 'A';
 800ee76:	4b21      	ldr	r3, [pc, #132]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee78:	2241      	movs	r2, #65	; 0x41
 800ee7a:	719a      	strb	r2, [r3, #6]
			String_I_Rate[7] = '/';
 800ee7c:	4b1f      	ldr	r3, [pc, #124]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee7e:	222f      	movs	r2, #47	; 0x2f
 800ee80:	71da      	strb	r2, [r3, #7]
			String_I_Rate[8] = 'm';
 800ee82:	4b1e      	ldr	r3, [pc, #120]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee84:	226d      	movs	r2, #109	; 0x6d
 800ee86:	721a      	strb	r2, [r3, #8]
			String_I_Rate[9] = 's';
 800ee88:	4b1c      	ldr	r3, [pc, #112]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee8a:	2273      	movs	r2, #115	; 0x73
 800ee8c:	725a      	strb	r2, [r3, #9]
		}


		if(Cursor_Position==0+6)
 800ee8e:	4b1a      	ldr	r3, [pc, #104]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	2b06      	cmp	r3, #6
 800ee94:	d10a      	bne.n	800eeac <Keys_Input_Set_I_Rate+0x98>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800ee96:	4b18      	ldr	r3, [pc, #96]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	3b06      	subs	r3, #6
 800ee9c:	4a17      	ldr	r2, [pc, #92]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800ee9e:	1df9      	adds	r1, r7, #7
 800eea0:	7809      	ldrb	r1, [r1, #0]
 800eea2:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800eea4:	4b14      	ldr	r3, [pc, #80]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800eea6:	2208      	movs	r2, #8
 800eea8:	701a      	strb	r2, [r3, #0]
			return;
 800eeaa:	e01b      	b.n	800eee4 <Keys_Input_Set_I_Rate+0xd0>
		}
		if(Cursor_Position == 3+6)
 800eeac:	4b12      	ldr	r3, [pc, #72]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	2b09      	cmp	r3, #9
 800eeb2:	d10a      	bne.n	800eeca <Keys_Input_Set_I_Rate+0xb6>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800eeb4:	4b10      	ldr	r3, [pc, #64]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	3b06      	subs	r3, #6
 800eeba:	4a10      	ldr	r2, [pc, #64]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800eebc:	1df9      	adds	r1, r7, #7
 800eebe:	7809      	ldrb	r1, [r1, #0]
 800eec0:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800eec2:	4b0d      	ldr	r3, [pc, #52]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800eec4:	2206      	movs	r2, #6
 800eec6:	701a      	strb	r2, [r3, #0]
			return;
 800eec8:	e00c      	b.n	800eee4 <Keys_Input_Set_I_Rate+0xd0>
		}
		String_I_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800eeca:	4b0b      	ldr	r3, [pc, #44]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	3b06      	subs	r3, #6
 800eed0:	4a0a      	ldr	r2, [pc, #40]	; (800eefc <Keys_Input_Set_I_Rate+0xe8>)
 800eed2:	1df9      	adds	r1, r7, #7
 800eed4:	7809      	ldrb	r1, [r1, #0]
 800eed6:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                       //光标位置加1
 800eed8:	4b07      	ldr	r3, [pc, #28]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	3301      	adds	r3, #1
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <Keys_Input_Set_I_Rate+0xe4>)
 800eee2:	701a      	strb	r2, [r3, #0]

	}
}
 800eee4:	46bd      	mov	sp, r7
 800eee6:	b002      	add	sp, #8
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	46c0      	nop			; (mov r8, r8)
 800eeec:	200039f4 	.word	0x200039f4
 800eef0:	2000398b 	.word	0x2000398b
 800eef4:	20002fd2 	.word	0x20002fd2
 800eef8:	2000398e 	.word	0x2000398e
 800eefc:	20003040 	.word	0x20003040

0800ef00 <Keys_Input_RS232>:
 * @brief  数字键盘输入设定串口ID的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_RS232(char Number)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	0002      	movs	r2, r0
 800ef08:	1dfb      	adds	r3, r7, #7
 800ef0a:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800ef0c:	4b1f      	ldr	r3, [pc, #124]	; (800ef8c <Keys_Input_RS232+0x8c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d138      	bne.n	800ef86 <Keys_Input_RS232+0x86>
 800ef14:	4b1d      	ldr	r3, [pc, #116]	; (800ef8c <Keys_Input_RS232+0x8c>)
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	2b03      	cmp	r3, #3
 800ef1a:	d134      	bne.n	800ef86 <Keys_Input_RS232+0x86>
 800ef1c:	4b1b      	ldr	r3, [pc, #108]	; (800ef8c <Keys_Input_RS232+0x8c>)
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d130      	bne.n	800ef86 <Keys_Input_RS232+0x86>
 800ef24:	4b1a      	ldr	r3, [pc, #104]	; (800ef90 <Keys_Input_RS232+0x90>)
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d12c      	bne.n	800ef86 <Keys_Input_RS232+0x86>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ef2c:	4b19      	ldr	r3, [pc, #100]	; (800ef94 <Keys_Input_RS232+0x94>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00d      	beq.n	800ef50 <Keys_Input_RS232+0x50>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ef34:	4b17      	ldr	r3, [pc, #92]	; (800ef94 <Keys_Input_RS232+0x94>)
 800ef36:	2200      	movs	r2, #0
 800ef38:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ef3a:	f005 fa93 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 0;                                     //指针设为0位
 800ef3e:	4b16      	ldr	r3, [pc, #88]	; (800ef98 <Keys_Input_RS232+0x98>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[0] = ' ';                                 //清空字符串
 800ef44:	4b15      	ldr	r3, [pc, #84]	; (800ef9c <Keys_Input_RS232+0x9c>)
 800ef46:	2220      	movs	r2, #32
 800ef48:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[1] = ' ';
 800ef4a:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <Keys_Input_RS232+0x9c>)
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	705a      	strb	r2, [r3, #1]
		}

		if(Cursor_Position == 2)
 800ef50:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <Keys_Input_RS232+0x98>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d103      	bne.n	800ef60 <Keys_Input_RS232+0x60>
		{
			Cursor_Position = 0;                                     //如果光标超过范围，回到启始位置
 800ef58:	4b0f      	ldr	r3, [pc, #60]	; (800ef98 <Keys_Input_RS232+0x98>)
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	701a      	strb	r2, [r3, #0]
			return;
 800ef5e:	e012      	b.n	800ef86 <Keys_Input_RS232+0x86>
		}

		String_RS232_ID[Cursor_Position] = Number;                  //使光标位置置Number
 800ef60:	4b0d      	ldr	r3, [pc, #52]	; (800ef98 <Keys_Input_RS232+0x98>)
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	0019      	movs	r1, r3
 800ef66:	4b0d      	ldr	r3, [pc, #52]	; (800ef9c <Keys_Input_RS232+0x9c>)
 800ef68:	1dfa      	adds	r2, r7, #7
 800ef6a:	7812      	ldrb	r2, [r2, #0]
 800ef6c:	545a      	strb	r2, [r3, r1]

		Cursor_Position ++;                                         //光标位置加1
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <Keys_Input_RS232+0x98>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	3301      	adds	r3, #1
 800ef74:	b2da      	uxtb	r2, r3
 800ef76:	4b08      	ldr	r3, [pc, #32]	; (800ef98 <Keys_Input_RS232+0x98>)
 800ef78:	701a      	strb	r2, [r3, #0]
		Write_String_8x16AsicII(48,38,String_RS232_ID);           //显示输入值
 800ef7a:	4b08      	ldr	r3, [pc, #32]	; (800ef9c <Keys_Input_RS232+0x9c>)
 800ef7c:	001a      	movs	r2, r3
 800ef7e:	2126      	movs	r1, #38	; 0x26
 800ef80:	2030      	movs	r0, #48	; 0x30
 800ef82:	f003 fd11 	bl	80129a8 <Write_String_8x16AsicII>
	}
}
 800ef86:	46bd      	mov	sp, r7
 800ef88:	b002      	add	sp, #8
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	200039f4 	.word	0x200039f4
 800ef90:	2000398b 	.word	0x2000398b
 800ef94:	20002fd2 	.word	0x20002fd2
 800ef98:	2000398e 	.word	0x2000398e
 800ef9c:	20003a84 	.word	0x20003a84

0800efa0 <Keys_Input_Cycle>:
 * @brief  数字键盘输入设定Cycle时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Cycle(char Number)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	0002      	movs	r2, r0
 800efa8:	1dfb      	adds	r3, r7, #7
 800efaa:	701a      	strb	r2, [r3, #0]
	//cycle on time
	if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800efac:	4b51      	ldr	r3, [pc, #324]	; (800f0f4 <Keys_Input_Cycle+0x154>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d14b      	bne.n	800f04c <Keys_Input_Cycle+0xac>
 800efb4:	4b4f      	ldr	r3, [pc, #316]	; (800f0f4 <Keys_Input_Cycle+0x154>)
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	2b04      	cmp	r3, #4
 800efba:	d147      	bne.n	800f04c <Keys_Input_Cycle+0xac>
 800efbc:	4b4d      	ldr	r3, [pc, #308]	; (800f0f4 <Keys_Input_Cycle+0x154>)
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d143      	bne.n	800f04c <Keys_Input_Cycle+0xac>
 800efc4:	4b4c      	ldr	r3, [pc, #304]	; (800f0f8 <Keys_Input_Cycle+0x158>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d13f      	bne.n	800f04c <Keys_Input_Cycle+0xac>
	{
		String_Cycle_On[4]='s';
 800efcc:	4b4b      	ldr	r3, [pc, #300]	; (800f0fc <Keys_Input_Cycle+0x15c>)
 800efce:	2273      	movs	r2, #115	; 0x73
 800efd0:	711a      	strb	r2, [r3, #4]
		String_Cycle_On[8]='m';
 800efd2:	4b4a      	ldr	r3, [pc, #296]	; (800f0fc <Keys_Input_Cycle+0x15c>)
 800efd4:	226d      	movs	r2, #109	; 0x6d
 800efd6:	721a      	strb	r2, [r3, #8]
		String_Cycle_On[9]='s';
 800efd8:	4b48      	ldr	r3, [pc, #288]	; (800f0fc <Keys_Input_Cycle+0x15c>)
 800efda:	2273      	movs	r2, #115	; 0x73
 800efdc:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800efde:	4b48      	ldr	r3, [pc, #288]	; (800f100 <Keys_Input_Cycle+0x160>)
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d007      	beq.n	800eff6 <Keys_Input_Cycle+0x56>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800efe6:	4b46      	ldr	r3, [pc, #280]	; (800f100 <Keys_Input_Cycle+0x160>)
 800efe8:	2200      	movs	r2, #0
 800efea:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800efec:	f005 fa3a 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 0+6;                                     //指针设为0位
 800eff0:	4b44      	ldr	r3, [pc, #272]	; (800f104 <Keys_Input_Cycle+0x164>)
 800eff2:	2206      	movs	r2, #6
 800eff4:	701a      	strb	r2, [r3, #0]
		}
		if( (Cursor_Position<4+6) || ((Cursor_Position>4+6) && (Cursor_Position<8+6)) )
 800eff6:	4b43      	ldr	r3, [pc, #268]	; (800f104 <Keys_Input_Cycle+0x164>)
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	2b09      	cmp	r3, #9
 800effc:	d907      	bls.n	800f00e <Keys_Input_Cycle+0x6e>
 800effe:	4b41      	ldr	r3, [pc, #260]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	2b0a      	cmp	r3, #10
 800f004:	d90a      	bls.n	800f01c <Keys_Input_Cycle+0x7c>
 800f006:	4b3f      	ldr	r3, [pc, #252]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2b0d      	cmp	r3, #13
 800f00c:	d806      	bhi.n	800f01c <Keys_Input_Cycle+0x7c>
		{
			String_Cycle_On[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800f00e:	4b3d      	ldr	r3, [pc, #244]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	3b06      	subs	r3, #6
 800f014:	4a39      	ldr	r2, [pc, #228]	; (800f0fc <Keys_Input_Cycle+0x15c>)
 800f016:	1df9      	adds	r1, r7, #7
 800f018:	7809      	ldrb	r1, [r1, #0]
 800f01a:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                         //光标位置加1
 800f01c:	4b39      	ldr	r3, [pc, #228]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	3301      	adds	r3, #1
 800f022:	b2da      	uxtb	r2, r3
 800f024:	4b37      	ldr	r3, [pc, #220]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f026:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f028:	4b36      	ldr	r3, [pc, #216]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b0a      	cmp	r3, #10
 800f02e:	d105      	bne.n	800f03c <Keys_Input_Cycle+0x9c>
		{
			Cursor_Position +=1;//位置4不设置，跳过到下一位
 800f030:	4b34      	ldr	r3, [pc, #208]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	3301      	adds	r3, #1
 800f036:	b2da      	uxtb	r2, r3
 800f038:	4b32      	ldr	r3, [pc, #200]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f03a:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)
 800f03c:	4b31      	ldr	r3, [pc, #196]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	2b0e      	cmp	r3, #14
 800f042:	d153      	bne.n	800f0ec <Keys_Input_Cycle+0x14c>
		{
			Cursor_Position=0+6;
 800f044:	4b2f      	ldr	r3, [pc, #188]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f046:	2206      	movs	r2, #6
 800f048:	701a      	strb	r2, [r3, #0]
			return;
 800f04a:	e04f      	b.n	800f0ec <Keys_Input_Cycle+0x14c>
		}

	}
	//cycle off time
	else if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==3) && (LOCK_UNLOCK == UNLOCK))
 800f04c:	4b29      	ldr	r3, [pc, #164]	; (800f0f4 <Keys_Input_Cycle+0x154>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d14b      	bne.n	800f0ec <Keys_Input_Cycle+0x14c>
 800f054:	4b27      	ldr	r3, [pc, #156]	; (800f0f4 <Keys_Input_Cycle+0x154>)
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	2b04      	cmp	r3, #4
 800f05a:	d147      	bne.n	800f0ec <Keys_Input_Cycle+0x14c>
 800f05c:	4b25      	ldr	r3, [pc, #148]	; (800f0f4 <Keys_Input_Cycle+0x154>)
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	2b03      	cmp	r3, #3
 800f062:	d143      	bne.n	800f0ec <Keys_Input_Cycle+0x14c>
 800f064:	4b24      	ldr	r3, [pc, #144]	; (800f0f8 <Keys_Input_Cycle+0x158>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d13f      	bne.n	800f0ec <Keys_Input_Cycle+0x14c>
	{
		String_Cycle_Close[4]='s';
 800f06c:	4b26      	ldr	r3, [pc, #152]	; (800f108 <Keys_Input_Cycle+0x168>)
 800f06e:	2273      	movs	r2, #115	; 0x73
 800f070:	711a      	strb	r2, [r3, #4]
		String_Cycle_Close[8]='m';
 800f072:	4b25      	ldr	r3, [pc, #148]	; (800f108 <Keys_Input_Cycle+0x168>)
 800f074:	226d      	movs	r2, #109	; 0x6d
 800f076:	721a      	strb	r2, [r3, #8]
		String_Cycle_Close[9]='s';
 800f078:	4b23      	ldr	r3, [pc, #140]	; (800f108 <Keys_Input_Cycle+0x168>)
 800f07a:	2273      	movs	r2, #115	; 0x73
 800f07c:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f07e:	4b20      	ldr	r3, [pc, #128]	; (800f100 <Keys_Input_Cycle+0x160>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d007      	beq.n	800f096 <Keys_Input_Cycle+0xf6>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f086:	4b1e      	ldr	r3, [pc, #120]	; (800f100 <Keys_Input_Cycle+0x160>)
 800f088:	2200      	movs	r2, #0
 800f08a:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f08c:	f005 f9ea 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 0+6;                                     //指针设为0位
 800f090:	4b1c      	ldr	r3, [pc, #112]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f092:	2206      	movs	r2, #6
 800f094:	701a      	strb	r2, [r3, #0]

		}
		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800f096:	4b1b      	ldr	r3, [pc, #108]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	2b09      	cmp	r3, #9
 800f09c:	d907      	bls.n	800f0ae <Keys_Input_Cycle+0x10e>
 800f09e:	4b19      	ldr	r3, [pc, #100]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b0a      	cmp	r3, #10
 800f0a4:	d90a      	bls.n	800f0bc <Keys_Input_Cycle+0x11c>
 800f0a6:	4b17      	ldr	r3, [pc, #92]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	2b0d      	cmp	r3, #13
 800f0ac:	d806      	bhi.n	800f0bc <Keys_Input_Cycle+0x11c>
		{
			String_Cycle_Close[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800f0ae:	4b15      	ldr	r3, [pc, #84]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	3b06      	subs	r3, #6
 800f0b4:	4a14      	ldr	r2, [pc, #80]	; (800f108 <Keys_Input_Cycle+0x168>)
 800f0b6:	1df9      	adds	r1, r7, #7
 800f0b8:	7809      	ldrb	r1, [r1, #0]
 800f0ba:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800f0bc:	4b11      	ldr	r3, [pc, #68]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	b2da      	uxtb	r2, r3
 800f0c4:	4b0f      	ldr	r3, [pc, #60]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0c6:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f0c8:	4b0e      	ldr	r3, [pc, #56]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	2b0a      	cmp	r3, #10
 800f0ce:	d105      	bne.n	800f0dc <Keys_Input_Cycle+0x13c>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800f0d0:	4b0c      	ldr	r3, [pc, #48]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	4b0a      	ldr	r3, [pc, #40]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0da:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800f0dc:	4b09      	ldr	r3, [pc, #36]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	2b0e      	cmp	r3, #14
 800f0e2:	d103      	bne.n	800f0ec <Keys_Input_Cycle+0x14c>
		{
			Cursor_Position=0+6;
 800f0e4:	4b07      	ldr	r3, [pc, #28]	; (800f104 <Keys_Input_Cycle+0x164>)
 800f0e6:	2206      	movs	r2, #6
 800f0e8:	701a      	strb	r2, [r3, #0]
			return;
 800f0ea:	46c0      	nop			; (mov r8, r8)

		}

	}

}
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	b002      	add	sp, #8
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	46c0      	nop			; (mov r8, r8)
 800f0f4:	200039f4 	.word	0x200039f4
 800f0f8:	2000398b 	.word	0x2000398b
 800f0fc:	20002ff8 	.word	0x20002ff8
 800f100:	20002fd2 	.word	0x20002fd2
 800f104:	2000398e 	.word	0x2000398e
 800f108:	20003004 	.word	0x20003004

0800f10c <Keys_Input_Delay>:
 * @brief  数字键盘输入设定Delay时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Delay(char Number)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	0002      	movs	r2, r0
 800f114:	1dfb      	adds	r3, r7, #7
 800f116:	701a      	strb	r2, [r3, #0]
	//设置软起动延时
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800f118:	4b29      	ldr	r3, [pc, #164]	; (800f1c0 <Keys_Input_Delay+0xb4>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d14b      	bne.n	800f1b8 <Keys_Input_Delay+0xac>
 800f120:	4b27      	ldr	r3, [pc, #156]	; (800f1c0 <Keys_Input_Delay+0xb4>)
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	2b04      	cmp	r3, #4
 800f126:	d147      	bne.n	800f1b8 <Keys_Input_Delay+0xac>
 800f128:	4b25      	ldr	r3, [pc, #148]	; (800f1c0 <Keys_Input_Delay+0xb4>)
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d143      	bne.n	800f1b8 <Keys_Input_Delay+0xac>
 800f130:	4b24      	ldr	r3, [pc, #144]	; (800f1c4 <Keys_Input_Delay+0xb8>)
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d13f      	bne.n	800f1b8 <Keys_Input_Delay+0xac>
	{
		String_Delay[4]='s';
 800f138:	4b23      	ldr	r3, [pc, #140]	; (800f1c8 <Keys_Input_Delay+0xbc>)
 800f13a:	2273      	movs	r2, #115	; 0x73
 800f13c:	711a      	strb	r2, [r3, #4]
		String_Delay[8]='m';
 800f13e:	4b22      	ldr	r3, [pc, #136]	; (800f1c8 <Keys_Input_Delay+0xbc>)
 800f140:	226d      	movs	r2, #109	; 0x6d
 800f142:	721a      	strb	r2, [r3, #8]
		String_Delay[9]='s';
 800f144:	4b20      	ldr	r3, [pc, #128]	; (800f1c8 <Keys_Input_Delay+0xbc>)
 800f146:	2273      	movs	r2, #115	; 0x73
 800f148:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f14a:	4b20      	ldr	r3, [pc, #128]	; (800f1cc <Keys_Input_Delay+0xc0>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d007      	beq.n	800f162 <Keys_Input_Delay+0x56>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f152:	4b1e      	ldr	r3, [pc, #120]	; (800f1cc <Keys_Input_Delay+0xc0>)
 800f154:	2200      	movs	r2, #0
 800f156:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f158:	f005 f984 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 6;                                     //指针设为0位
 800f15c:	4b1c      	ldr	r3, [pc, #112]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f15e:	2206      	movs	r2, #6
 800f160:	701a      	strb	r2, [r3, #0]
		}

		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800f162:	4b1b      	ldr	r3, [pc, #108]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b09      	cmp	r3, #9
 800f168:	d907      	bls.n	800f17a <Keys_Input_Delay+0x6e>
 800f16a:	4b19      	ldr	r3, [pc, #100]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b0a      	cmp	r3, #10
 800f170:	d90a      	bls.n	800f188 <Keys_Input_Delay+0x7c>
 800f172:	4b17      	ldr	r3, [pc, #92]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	2b0d      	cmp	r3, #13
 800f178:	d806      	bhi.n	800f188 <Keys_Input_Delay+0x7c>
		{
			String_Delay[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800f17a:	4b15      	ldr	r3, [pc, #84]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	3b06      	subs	r3, #6
 800f180:	4a11      	ldr	r2, [pc, #68]	; (800f1c8 <Keys_Input_Delay+0xbc>)
 800f182:	1df9      	adds	r1, r7, #7
 800f184:	7809      	ldrb	r1, [r1, #0]
 800f186:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800f188:	4b11      	ldr	r3, [pc, #68]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	3301      	adds	r3, #1
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	4b0f      	ldr	r3, [pc, #60]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f192:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f194:	4b0e      	ldr	r3, [pc, #56]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	2b0a      	cmp	r3, #10
 800f19a:	d105      	bne.n	800f1a8 <Keys_Input_Delay+0x9c>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800f19c:	4b0c      	ldr	r3, [pc, #48]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	4b0a      	ldr	r3, [pc, #40]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f1a6:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800f1a8:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b0e      	cmp	r3, #14
 800f1ae:	d103      	bne.n	800f1b8 <Keys_Input_Delay+0xac>
		{
			Cursor_Position=0+6;
 800f1b0:	4b07      	ldr	r3, [pc, #28]	; (800f1d0 <Keys_Input_Delay+0xc4>)
 800f1b2:	2206      	movs	r2, #6
 800f1b4:	701a      	strb	r2, [r3, #0]
			return;
 800f1b6:	46c0      	nop			; (mov r8, r8)
		}
	}

}
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	b002      	add	sp, #8
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	46c0      	nop			; (mov r8, r8)
 800f1c0:	200039f4 	.word	0x200039f4
 800f1c4:	2000398b 	.word	0x2000398b
 800f1c8:	20003010 	.word	0x20003010
 800f1cc:	20002fd2 	.word	0x20002fd2
 800f1d0:	2000398e 	.word	0x2000398e

0800f1d4 <Keys_Input_Save>:

static void Keys_Input_Save(char Number)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	0002      	movs	r2, r0
 800f1dc:	1dfb      	adds	r3, r7, #7
 800f1de:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f1e0:	4b52      	ldr	r3, [pc, #328]	; (800f32c <Keys_Input_Save+0x158>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b03      	cmp	r3, #3
 800f1e6:	d000      	beq.n	800f1ea <Keys_Input_Save+0x16>
 800f1e8:	e09d      	b.n	800f326 <Keys_Input_Save+0x152>
 800f1ea:	4b50      	ldr	r3, [pc, #320]	; (800f32c <Keys_Input_Save+0x158>)
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d000      	beq.n	800f1f4 <Keys_Input_Save+0x20>
 800f1f2:	e098      	b.n	800f326 <Keys_Input_Save+0x152>
 800f1f4:	4b4d      	ldr	r3, [pc, #308]	; (800f32c <Keys_Input_Save+0x158>)
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d100      	bne.n	800f1fe <Keys_Input_Save+0x2a>
 800f1fc:	e093      	b.n	800f326 <Keys_Input_Save+0x152>
 800f1fe:	4b4c      	ldr	r3, [pc, #304]	; (800f330 <Keys_Input_Save+0x15c>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d000      	beq.n	800f208 <Keys_Input_Save+0x34>
 800f206:	e08e      	b.n	800f326 <Keys_Input_Save+0x152>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f208:	4b4a      	ldr	r3, [pc, #296]	; (800f334 <Keys_Input_Save+0x160>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d02b      	beq.n	800f268 <Keys_Input_Save+0x94>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f210:	4b48      	ldr	r3, [pc, #288]	; (800f334 <Keys_Input_Save+0x160>)
 800f212:	2200      	movs	r2, #0
 800f214:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f216:	f005 f925 	bl	8014464 <Cursor_flash_off>
			Cursor_Position = 0;                                     //指针设为0位
 800f21a:	4b47      	ldr	r3, [pc, #284]	; (800f338 <Keys_Input_Save+0x164>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	701a      	strb	r2, [r3, #0]
			String_Save_V[0]=' ';
 800f220:	4b46      	ldr	r3, [pc, #280]	; (800f33c <Keys_Input_Save+0x168>)
 800f222:	2220      	movs	r2, #32
 800f224:	701a      	strb	r2, [r3, #0]
			String_Save_V[1]=' ';
 800f226:	4b45      	ldr	r3, [pc, #276]	; (800f33c <Keys_Input_Save+0x168>)
 800f228:	2220      	movs	r2, #32
 800f22a:	705a      	strb	r2, [r3, #1]
			String_Save_V[2]=' ';
 800f22c:	4b43      	ldr	r3, [pc, #268]	; (800f33c <Keys_Input_Save+0x168>)
 800f22e:	2220      	movs	r2, #32
 800f230:	709a      	strb	r2, [r3, #2]
			String_Save_V[3]=' ';
 800f232:	4b42      	ldr	r3, [pc, #264]	; (800f33c <Keys_Input_Save+0x168>)
 800f234:	2220      	movs	r2, #32
 800f236:	70da      	strb	r2, [r3, #3]
			String_Save_V[4]=' ';
 800f238:	4b40      	ldr	r3, [pc, #256]	; (800f33c <Keys_Input_Save+0x168>)
 800f23a:	2220      	movs	r2, #32
 800f23c:	711a      	strb	r2, [r3, #4]
			String_Save_V[5]=' ';
 800f23e:	4b3f      	ldr	r3, [pc, #252]	; (800f33c <Keys_Input_Save+0x168>)
 800f240:	2220      	movs	r2, #32
 800f242:	715a      	strb	r2, [r3, #5]

			String_Save_I[0]=' ';
 800f244:	4b3e      	ldr	r3, [pc, #248]	; (800f340 <Keys_Input_Save+0x16c>)
 800f246:	2220      	movs	r2, #32
 800f248:	701a      	strb	r2, [r3, #0]
			String_Save_I[1]=' ';
 800f24a:	4b3d      	ldr	r3, [pc, #244]	; (800f340 <Keys_Input_Save+0x16c>)
 800f24c:	2220      	movs	r2, #32
 800f24e:	705a      	strb	r2, [r3, #1]
			String_Save_I[2]=' ';
 800f250:	4b3b      	ldr	r3, [pc, #236]	; (800f340 <Keys_Input_Save+0x16c>)
 800f252:	2220      	movs	r2, #32
 800f254:	709a      	strb	r2, [r3, #2]
			String_Save_I[3]=' ';
 800f256:	4b3a      	ldr	r3, [pc, #232]	; (800f340 <Keys_Input_Save+0x16c>)
 800f258:	2220      	movs	r2, #32
 800f25a:	70da      	strb	r2, [r3, #3]
			String_Save_I[4]=' ';
 800f25c:	4b38      	ldr	r3, [pc, #224]	; (800f340 <Keys_Input_Save+0x16c>)
 800f25e:	2220      	movs	r2, #32
 800f260:	711a      	strb	r2, [r3, #4]
			String_Save_I[5]=' ';
 800f262:	4b37      	ldr	r3, [pc, #220]	; (800f340 <Keys_Input_Save+0x16c>)
 800f264:	2220      	movs	r2, #32
 800f266:	715a      	strb	r2, [r3, #5]


		}
		if(xyz.coordinates3==1)//voltage set
 800f268:	4b30      	ldr	r3, [pc, #192]	; (800f32c <Keys_Input_Save+0x158>)
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d12b      	bne.n	800f2c8 <Keys_Input_Save+0xf4>
		{

			if(Cursor_Position==2)
 800f270:	4b31      	ldr	r3, [pc, #196]	; (800f338 <Keys_Input_Save+0x164>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	2b02      	cmp	r3, #2
 800f276:	d10a      	bne.n	800f28e <Keys_Input_Save+0xba>
			{
				String_Save_V[Cursor_Position]=Number;
 800f278:	4b2f      	ldr	r3, [pc, #188]	; (800f338 <Keys_Input_Save+0x164>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	0019      	movs	r1, r3
 800f27e:	4b2f      	ldr	r3, [pc, #188]	; (800f33c <Keys_Input_Save+0x168>)
 800f280:	1dfa      	adds	r2, r7, #7
 800f282:	7812      	ldrb	r2, [r2, #0]
 800f284:	545a      	strb	r2, [r3, r1]
				Cursor_Position=4;
 800f286:	4b2c      	ldr	r3, [pc, #176]	; (800f338 <Keys_Input_Save+0x164>)
 800f288:	2204      	movs	r2, #4
 800f28a:	701a      	strb	r2, [r3, #0]
				return;
 800f28c:	e04b      	b.n	800f326 <Keys_Input_Save+0x152>
			}
			if(Cursor_Position==5)
 800f28e:	4b2a      	ldr	r3, [pc, #168]	; (800f338 <Keys_Input_Save+0x164>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	2b05      	cmp	r3, #5
 800f294:	d10a      	bne.n	800f2ac <Keys_Input_Save+0xd8>
			{
				String_Save_V[Cursor_Position]=Number;
 800f296:	4b28      	ldr	r3, [pc, #160]	; (800f338 <Keys_Input_Save+0x164>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	0019      	movs	r1, r3
 800f29c:	4b27      	ldr	r3, [pc, #156]	; (800f33c <Keys_Input_Save+0x168>)
 800f29e:	1dfa      	adds	r2, r7, #7
 800f2a0:	7812      	ldrb	r2, [r2, #0]
 800f2a2:	545a      	strb	r2, [r3, r1]
				Cursor_Position=0;
 800f2a4:	4b24      	ldr	r3, [pc, #144]	; (800f338 <Keys_Input_Save+0x164>)
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	701a      	strb	r2, [r3, #0]
				return;
 800f2aa:	e03c      	b.n	800f326 <Keys_Input_Save+0x152>
			}
			String_Save_V[Cursor_Position]=Number;
 800f2ac:	4b22      	ldr	r3, [pc, #136]	; (800f338 <Keys_Input_Save+0x164>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	0019      	movs	r1, r3
 800f2b2:	4b22      	ldr	r3, [pc, #136]	; (800f33c <Keys_Input_Save+0x168>)
 800f2b4:	1dfa      	adds	r2, r7, #7
 800f2b6:	7812      	ldrb	r2, [r2, #0]
 800f2b8:	545a      	strb	r2, [r3, r1]
			Cursor_Position++;
 800f2ba:	4b1f      	ldr	r3, [pc, #124]	; (800f338 <Keys_Input_Save+0x164>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	b2da      	uxtb	r2, r3
 800f2c2:	4b1d      	ldr	r3, [pc, #116]	; (800f338 <Keys_Input_Save+0x164>)
 800f2c4:	701a      	strb	r2, [r3, #0]
 800f2c6:	e02e      	b.n	800f326 <Keys_Input_Save+0x152>
		}
		else if(xyz.coordinates3==2)//current set
 800f2c8:	4b18      	ldr	r3, [pc, #96]	; (800f32c <Keys_Input_Save+0x158>)
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	2b02      	cmp	r3, #2
 800f2ce:	d12a      	bne.n	800f326 <Keys_Input_Save+0x152>
		{
			if(Cursor_Position==2+9)
 800f2d0:	4b19      	ldr	r3, [pc, #100]	; (800f338 <Keys_Input_Save+0x164>)
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b0b      	cmp	r3, #11
 800f2d6:	d10a      	bne.n	800f2ee <Keys_Input_Save+0x11a>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800f2d8:	4b17      	ldr	r3, [pc, #92]	; (800f338 <Keys_Input_Save+0x164>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	3b09      	subs	r3, #9
 800f2de:	4a18      	ldr	r2, [pc, #96]	; (800f340 <Keys_Input_Save+0x16c>)
 800f2e0:	1df9      	adds	r1, r7, #7
 800f2e2:	7809      	ldrb	r1, [r1, #0]
 800f2e4:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=4+9;
 800f2e6:	4b14      	ldr	r3, [pc, #80]	; (800f338 <Keys_Input_Save+0x164>)
 800f2e8:	220d      	movs	r2, #13
 800f2ea:	701a      	strb	r2, [r3, #0]
				return;
 800f2ec:	e01b      	b.n	800f326 <Keys_Input_Save+0x152>
			}
			if(Cursor_Position==5+9)
 800f2ee:	4b12      	ldr	r3, [pc, #72]	; (800f338 <Keys_Input_Save+0x164>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2b0e      	cmp	r3, #14
 800f2f4:	d10a      	bne.n	800f30c <Keys_Input_Save+0x138>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800f2f6:	4b10      	ldr	r3, [pc, #64]	; (800f338 <Keys_Input_Save+0x164>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	3b09      	subs	r3, #9
 800f2fc:	4a10      	ldr	r2, [pc, #64]	; (800f340 <Keys_Input_Save+0x16c>)
 800f2fe:	1df9      	adds	r1, r7, #7
 800f300:	7809      	ldrb	r1, [r1, #0]
 800f302:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=0+9;
 800f304:	4b0c      	ldr	r3, [pc, #48]	; (800f338 <Keys_Input_Save+0x164>)
 800f306:	2209      	movs	r2, #9
 800f308:	701a      	strb	r2, [r3, #0]
				return;
 800f30a:	e00c      	b.n	800f326 <Keys_Input_Save+0x152>
			}
			String_Save_I[Cursor_Position-9]=Number;
 800f30c:	4b0a      	ldr	r3, [pc, #40]	; (800f338 <Keys_Input_Save+0x164>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	3b09      	subs	r3, #9
 800f312:	4a0b      	ldr	r2, [pc, #44]	; (800f340 <Keys_Input_Save+0x16c>)
 800f314:	1df9      	adds	r1, r7, #7
 800f316:	7809      	ldrb	r1, [r1, #0]
 800f318:	54d1      	strb	r1, [r2, r3]
			Cursor_Position++;
 800f31a:	4b07      	ldr	r3, [pc, #28]	; (800f338 <Keys_Input_Save+0x164>)
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	3301      	adds	r3, #1
 800f320:	b2da      	uxtb	r2, r3
 800f322:	4b05      	ldr	r3, [pc, #20]	; (800f338 <Keys_Input_Save+0x164>)
 800f324:	701a      	strb	r2, [r3, #0]


	}


}
 800f326:	46bd      	mov	sp, r7
 800f328:	b002      	add	sp, #8
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	200039f4 	.word	0x200039f4
 800f330:	2000398b 	.word	0x2000398b
 800f334:	20002fd2 	.word	0x20002fd2
 800f338:	2000398e 	.word	0x2000398e
 800f33c:	2000301c 	.word	0x2000301c
 800f340:	20003028 	.word	0x20003028

0800f344 <Keys_Input_Recall>:

static void Keys_Input_Recall(char Number)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	0002      	movs	r2, r0
 800f34c:	1dfb      	adds	r3, r7, #7
 800f34e:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f350:	4b04      	ldr	r3, [pc, #16]	; (800f364 <Keys_Input_Recall+0x20>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b03      	cmp	r3, #3
 800f356:	d101      	bne.n	800f35c <Keys_Input_Recall+0x18>
 800f358:	4b02      	ldr	r3, [pc, #8]	; (800f364 <Keys_Input_Recall+0x20>)
 800f35a:	685b      	ldr	r3, [r3, #4]
	{
		//不可参数设定

	}
}
 800f35c:	46c0      	nop			; (mov r8, r8)
 800f35e:	46bd      	mov	sp, r7
 800f360:	b002      	add	sp, #8
 800f362:	bd80      	pop	{r7, pc}
 800f364:	200039f4 	.word	0x200039f4

0800f368 <Keys_Input_Password>:




static void Keys_Input_Password(char Number)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	0002      	movs	r2, r0
 800f370:	1dfb      	adds	r3, r7, #7
 800f372:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK) )
 800f374:	4b17      	ldr	r3, [pc, #92]	; (800f3d4 <Keys_Input_Password+0x6c>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d127      	bne.n	800f3cc <Keys_Input_Password+0x64>
 800f37c:	4b15      	ldr	r3, [pc, #84]	; (800f3d4 <Keys_Input_Password+0x6c>)
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	2b05      	cmp	r3, #5
 800f382:	d123      	bne.n	800f3cc <Keys_Input_Password+0x64>
 800f384:	4b13      	ldr	r3, [pc, #76]	; (800f3d4 <Keys_Input_Password+0x6c>)
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d11f      	bne.n	800f3cc <Keys_Input_Password+0x64>
 800f38c:	4b12      	ldr	r3, [pc, #72]	; (800f3d8 <Keys_Input_Password+0x70>)
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d11b      	bne.n	800f3cc <Keys_Input_Password+0x64>
	{


		if(Cursor_Position == 5+6)
 800f394:	4b11      	ldr	r3, [pc, #68]	; (800f3dc <Keys_Input_Password+0x74>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b0b      	cmp	r3, #11
 800f39a:	d10a      	bne.n	800f3b2 <Keys_Input_Password+0x4a>
		{
			String_Password[Cursor_Position-6] = Number;
 800f39c:	4b0f      	ldr	r3, [pc, #60]	; (800f3dc <Keys_Input_Password+0x74>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	3b06      	subs	r3, #6
 800f3a2:	4a0f      	ldr	r2, [pc, #60]	; (800f3e0 <Keys_Input_Password+0x78>)
 800f3a4:	1df9      	adds	r1, r7, #7
 800f3a6:	7809      	ldrb	r1, [r1, #0]
 800f3a8:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800f3aa:	4b0c      	ldr	r3, [pc, #48]	; (800f3dc <Keys_Input_Password+0x74>)
 800f3ac:	2206      	movs	r2, #6
 800f3ae:	701a      	strb	r2, [r3, #0]
			return;
 800f3b0:	e00c      	b.n	800f3cc <Keys_Input_Password+0x64>
		}
		String_Password[Cursor_Position-6] = Number;                  //使光标位置置Number
 800f3b2:	4b0a      	ldr	r3, [pc, #40]	; (800f3dc <Keys_Input_Password+0x74>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	3b06      	subs	r3, #6
 800f3b8:	4a09      	ldr	r2, [pc, #36]	; (800f3e0 <Keys_Input_Password+0x78>)
 800f3ba:	1df9      	adds	r1, r7, #7
 800f3bc:	7809      	ldrb	r1, [r1, #0]
 800f3be:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f3c0:	4b06      	ldr	r3, [pc, #24]	; (800f3dc <Keys_Input_Password+0x74>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	4b04      	ldr	r3, [pc, #16]	; (800f3dc <Keys_Input_Password+0x74>)
 800f3ca:	701a      	strb	r2, [r3, #0]

	}
}
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	b002      	add	sp, #8
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	46c0      	nop			; (mov r8, r8)
 800f3d4:	200039f4 	.word	0x200039f4
 800f3d8:	2000398b 	.word	0x2000398b
 800f3dc:	2000398e 	.word	0x2000398e
 800f3e0:	200030a4 	.word	0x200030a4

0800f3e4 <Keys_Input_Calibration_Voltage>:

static void Keys_Input_Calibration_Voltage(char Number)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	0002      	movs	r2, r0
 800f3ec:	1dfb      	adds	r3, r7, #7
 800f3ee:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1||xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK) )
 800f3f0:	4b28      	ldr	r3, [pc, #160]	; (800f494 <Keys_Input_Calibration_Voltage+0xb0>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d149      	bne.n	800f48c <Keys_Input_Calibration_Voltage+0xa8>
 800f3f8:	4b26      	ldr	r3, [pc, #152]	; (800f494 <Keys_Input_Calibration_Voltage+0xb0>)
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	2b08      	cmp	r3, #8
 800f3fe:	d145      	bne.n	800f48c <Keys_Input_Calibration_Voltage+0xa8>
 800f400:	4b24      	ldr	r3, [pc, #144]	; (800f494 <Keys_Input_Calibration_Voltage+0xb0>)
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d003      	beq.n	800f410 <Keys_Input_Calibration_Voltage+0x2c>
 800f408:	4b22      	ldr	r3, [pc, #136]	; (800f494 <Keys_Input_Calibration_Voltage+0xb0>)
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	d13d      	bne.n	800f48c <Keys_Input_Calibration_Voltage+0xa8>
 800f410:	4b21      	ldr	r3, [pc, #132]	; (800f498 <Keys_Input_Calibration_Voltage+0xb4>)
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d139      	bne.n	800f48c <Keys_Input_Calibration_Voltage+0xa8>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f418:	4b20      	ldr	r3, [pc, #128]	; (800f49c <Keys_Input_Calibration_Voltage+0xb8>)
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d00a      	beq.n	800f436 <Keys_Input_Calibration_Voltage+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f420:	4b1e      	ldr	r3, [pc, #120]	; (800f49c <Keys_Input_Calibration_Voltage+0xb8>)
 800f422:	2200      	movs	r2, #0
 800f424:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f426:	f005 f81d 	bl	8014464 <Cursor_flash_off>

			Cursor_Position = 9;                                    //指针设为0位
 800f42a:	4b1d      	ldr	r3, [pc, #116]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f42c:	2209      	movs	r2, #9
 800f42e:	701a      	strb	r2, [r3, #0]

			String_Calibration_Vlotage[3] = '.';
 800f430:	4b1c      	ldr	r3, [pc, #112]	; (800f4a4 <Keys_Input_Calibration_Voltage+0xc0>)
 800f432:	222e      	movs	r2, #46	; 0x2e
 800f434:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f436:	4b1a      	ldr	r3, [pc, #104]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b0b      	cmp	r3, #11
 800f43c:	d10a      	bne.n	800f454 <Keys_Input_Calibration_Voltage+0x70>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f43e:	4b18      	ldr	r3, [pc, #96]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	3b09      	subs	r3, #9
 800f444:	4a17      	ldr	r2, [pc, #92]	; (800f4a4 <Keys_Input_Calibration_Voltage+0xc0>)
 800f446:	1df9      	adds	r1, r7, #7
 800f448:	7809      	ldrb	r1, [r1, #0]
 800f44a:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f44c:	4b14      	ldr	r3, [pc, #80]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f44e:	220d      	movs	r2, #13
 800f450:	701a      	strb	r2, [r3, #0]
			return;
 800f452:	e01b      	b.n	800f48c <Keys_Input_Calibration_Voltage+0xa8>
		}
		if(Cursor_Position == 5+9)
 800f454:	4b12      	ldr	r3, [pc, #72]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	2b0e      	cmp	r3, #14
 800f45a:	d10a      	bne.n	800f472 <Keys_Input_Calibration_Voltage+0x8e>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f45c:	4b10      	ldr	r3, [pc, #64]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	3b09      	subs	r3, #9
 800f462:	4a10      	ldr	r2, [pc, #64]	; (800f4a4 <Keys_Input_Calibration_Voltage+0xc0>)
 800f464:	1df9      	adds	r1, r7, #7
 800f466:	7809      	ldrb	r1, [r1, #0]
 800f468:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f46a:	4b0d      	ldr	r3, [pc, #52]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f46c:	2209      	movs	r2, #9
 800f46e:	701a      	strb	r2, [r3, #0]
			return;
 800f470:	e00c      	b.n	800f48c <Keys_Input_Calibration_Voltage+0xa8>
		}
		String_Calibration_Vlotage[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f472:	4b0b      	ldr	r3, [pc, #44]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	3b09      	subs	r3, #9
 800f478:	4a0a      	ldr	r2, [pc, #40]	; (800f4a4 <Keys_Input_Calibration_Voltage+0xc0>)
 800f47a:	1df9      	adds	r1, r7, #7
 800f47c:	7809      	ldrb	r1, [r1, #0]
 800f47e:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f480:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	3301      	adds	r3, #1
 800f486:	b2da      	uxtb	r2, r3
 800f488:	4b05      	ldr	r3, [pc, #20]	; (800f4a0 <Keys_Input_Calibration_Voltage+0xbc>)
 800f48a:	701a      	strb	r2, [r3, #0]

	}

}
 800f48c:	46bd      	mov	sp, r7
 800f48e:	b002      	add	sp, #8
 800f490:	bd80      	pop	{r7, pc}
 800f492:	46c0      	nop			; (mov r8, r8)
 800f494:	200039f4 	.word	0x200039f4
 800f498:	2000398b 	.word	0x2000398b
 800f49c:	20002fd2 	.word	0x20002fd2
 800f4a0:	2000398e 	.word	0x2000398e
 800f4a4:	2000308c 	.word	0x2000308c

0800f4a8 <Keys_Input_Calibration_Current>:

static void Keys_Input_Calibration_Current(char Number)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	0002      	movs	r2, r0
 800f4b0:	1dfb      	adds	r3, r7, #7
 800f4b2:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3||xyz.coordinates3==4) && (LOCK_UNLOCK == UNLOCK) )
 800f4b4:	4b28      	ldr	r3, [pc, #160]	; (800f558 <Keys_Input_Calibration_Current+0xb0>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d149      	bne.n	800f550 <Keys_Input_Calibration_Current+0xa8>
 800f4bc:	4b26      	ldr	r3, [pc, #152]	; (800f558 <Keys_Input_Calibration_Current+0xb0>)
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	2b08      	cmp	r3, #8
 800f4c2:	d145      	bne.n	800f550 <Keys_Input_Calibration_Current+0xa8>
 800f4c4:	4b24      	ldr	r3, [pc, #144]	; (800f558 <Keys_Input_Calibration_Current+0xb0>)
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	2b03      	cmp	r3, #3
 800f4ca:	d003      	beq.n	800f4d4 <Keys_Input_Calibration_Current+0x2c>
 800f4cc:	4b22      	ldr	r3, [pc, #136]	; (800f558 <Keys_Input_Calibration_Current+0xb0>)
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	2b04      	cmp	r3, #4
 800f4d2:	d13d      	bne.n	800f550 <Keys_Input_Calibration_Current+0xa8>
 800f4d4:	4b21      	ldr	r3, [pc, #132]	; (800f55c <Keys_Input_Calibration_Current+0xb4>)
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d139      	bne.n	800f550 <Keys_Input_Calibration_Current+0xa8>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f4dc:	4b20      	ldr	r3, [pc, #128]	; (800f560 <Keys_Input_Calibration_Current+0xb8>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00a      	beq.n	800f4fa <Keys_Input_Calibration_Current+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f4e4:	4b1e      	ldr	r3, [pc, #120]	; (800f560 <Keys_Input_Calibration_Current+0xb8>)
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f4ea:	f004 ffbb 	bl	8014464 <Cursor_flash_off>

			Cursor_Position = 9;                                    //指针设为0位
 800f4ee:	4b1d      	ldr	r3, [pc, #116]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f4f0:	2209      	movs	r2, #9
 800f4f2:	701a      	strb	r2, [r3, #0]

			String_Calibration_Current[3] = '.';
 800f4f4:	4b1c      	ldr	r3, [pc, #112]	; (800f568 <Keys_Input_Calibration_Current+0xc0>)
 800f4f6:	222e      	movs	r2, #46	; 0x2e
 800f4f8:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f4fa:	4b1a      	ldr	r3, [pc, #104]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2b0b      	cmp	r3, #11
 800f500:	d10a      	bne.n	800f518 <Keys_Input_Calibration_Current+0x70>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f502:	4b18      	ldr	r3, [pc, #96]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	3b09      	subs	r3, #9
 800f508:	4a17      	ldr	r2, [pc, #92]	; (800f568 <Keys_Input_Calibration_Current+0xc0>)
 800f50a:	1df9      	adds	r1, r7, #7
 800f50c:	7809      	ldrb	r1, [r1, #0]
 800f50e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f510:	4b14      	ldr	r3, [pc, #80]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f512:	220d      	movs	r2, #13
 800f514:	701a      	strb	r2, [r3, #0]
			return;
 800f516:	e01b      	b.n	800f550 <Keys_Input_Calibration_Current+0xa8>
		}
		if(Cursor_Position == 5+9)
 800f518:	4b12      	ldr	r3, [pc, #72]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	2b0e      	cmp	r3, #14
 800f51e:	d10a      	bne.n	800f536 <Keys_Input_Calibration_Current+0x8e>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f520:	4b10      	ldr	r3, [pc, #64]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	3b09      	subs	r3, #9
 800f526:	4a10      	ldr	r2, [pc, #64]	; (800f568 <Keys_Input_Calibration_Current+0xc0>)
 800f528:	1df9      	adds	r1, r7, #7
 800f52a:	7809      	ldrb	r1, [r1, #0]
 800f52c:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f52e:	4b0d      	ldr	r3, [pc, #52]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f530:	2209      	movs	r2, #9
 800f532:	701a      	strb	r2, [r3, #0]
			return;
 800f534:	e00c      	b.n	800f550 <Keys_Input_Calibration_Current+0xa8>
		}
		String_Calibration_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f536:	4b0b      	ldr	r3, [pc, #44]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	3b09      	subs	r3, #9
 800f53c:	4a0a      	ldr	r2, [pc, #40]	; (800f568 <Keys_Input_Calibration_Current+0xc0>)
 800f53e:	1df9      	adds	r1, r7, #7
 800f540:	7809      	ldrb	r1, [r1, #0]
 800f542:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f544:	4b07      	ldr	r3, [pc, #28]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	3301      	adds	r3, #1
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	4b05      	ldr	r3, [pc, #20]	; (800f564 <Keys_Input_Calibration_Current+0xbc>)
 800f54e:	701a      	strb	r2, [r3, #0]

	}

}
 800f550:	46bd      	mov	sp, r7
 800f552:	b002      	add	sp, #8
 800f554:	bd80      	pop	{r7, pc}
 800f556:	46c0      	nop			; (mov r8, r8)
 800f558:	200039f4 	.word	0x200039f4
 800f55c:	2000398b 	.word	0x2000398b
 800f560:	20002fd2 	.word	0x20002fd2
 800f564:	2000398e 	.word	0x2000398e
 800f568:	20003098 	.word	0x20003098

0800f56c <key_num_handle>:
 * @brief  数字按键的扫描服务函数
 * @param  数字0~9&point(10)
 * @retval None
 */
void key_num_handle(int key_number)
{
 800f56c:	b590      	push	{r4, r7, lr}
 800f56e:	b085      	sub	sp, #20
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
	//number
	if(key_number<=9&&key_number>=0)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b09      	cmp	r3, #9
 800f578:	dc47      	bgt.n	800f60a <key_num_handle+0x9e>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	db44      	blt.n	800f60a <key_num_handle+0x9e>
	{
		char number=key_number+'0';
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	b2da      	uxtb	r2, r3
 800f584:	210f      	movs	r1, #15
 800f586:	187b      	adds	r3, r7, r1
 800f588:	3230      	adds	r2, #48	; 0x30
 800f58a:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f58c:	000c      	movs	r4, r1
 800f58e:	193b      	adds	r3, r7, r4
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	0018      	movs	r0, r3
 800f594:	f7ff fb28 	bl	800ebe8 <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f598:	193b      	adds	r3, r7, r4
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	0018      	movs	r0, r3
 800f59e:	f7ff fb77 	bl	800ec90 <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f5a2:	193b      	adds	r3, r7, r4
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	0018      	movs	r0, r3
 800f5a8:	f7ff fbbe 	bl	800ed28 <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f5ac:	193b      	adds	r3, r7, r4
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	0018      	movs	r0, r3
 800f5b2:	f7ff fc2f 	bl	800ee14 <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f5b6:	193b      	adds	r3, r7, r4
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	0018      	movs	r0, r3
 800f5bc:	f7ff fca0 	bl	800ef00 <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f5c0:	193b      	adds	r3, r7, r4
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	0018      	movs	r0, r3
 800f5c6:	f7ff fceb 	bl	800efa0 <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f5ca:	193b      	adds	r3, r7, r4
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	0018      	movs	r0, r3
 800f5d0:	f7ff fd9c 	bl	800f10c <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f5d4:	193b      	adds	r3, r7, r4
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	0018      	movs	r0, r3
 800f5da:	f7ff fdfb 	bl	800f1d4 <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f5de:	193b      	adds	r3, r7, r4
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	0018      	movs	r0, r3
 800f5e4:	f7ff feae 	bl	800f344 <Keys_Input_Recall>
		Keys_Input_Password(number);
 800f5e8:	193b      	adds	r3, r7, r4
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	0018      	movs	r0, r3
 800f5ee:	f7ff febb 	bl	800f368 <Keys_Input_Password>
		Keys_Input_Calibration_Voltage(number);
 800f5f2:	193b      	adds	r3, r7, r4
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	0018      	movs	r0, r3
 800f5f8:	f7ff fef4 	bl	800f3e4 <Keys_Input_Calibration_Voltage>
		Keys_Input_Calibration_Current(number);
 800f5fc:	193b      	adds	r3, r7, r4
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	0018      	movs	r0, r3
 800f602:	f7ff ff51 	bl	800f4a8 <Keys_Input_Calibration_Current>
	{
 800f606:	46c0      	nop			; (mov r8, r8)
		Keys_Input_Delay(number);
		Keys_Input_Save(number);
		Keys_Input_Recall(number);
	}

}
 800f608:	e033      	b.n	800f672 <key_num_handle+0x106>
	else if(key_number==10)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b0a      	cmp	r3, #10
 800f60e:	d130      	bne.n	800f672 <key_num_handle+0x106>
		char number='.';
 800f610:	240e      	movs	r4, #14
 800f612:	193b      	adds	r3, r7, r4
 800f614:	222e      	movs	r2, #46	; 0x2e
 800f616:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f618:	193b      	adds	r3, r7, r4
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	0018      	movs	r0, r3
 800f61e:	f7ff fae3 	bl	800ebe8 <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f622:	193b      	adds	r3, r7, r4
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	0018      	movs	r0, r3
 800f628:	f7ff fb32 	bl	800ec90 <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f62c:	193b      	adds	r3, r7, r4
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	0018      	movs	r0, r3
 800f632:	f7ff fb79 	bl	800ed28 <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f636:	193b      	adds	r3, r7, r4
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	0018      	movs	r0, r3
 800f63c:	f7ff fbea 	bl	800ee14 <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f640:	193b      	adds	r3, r7, r4
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	0018      	movs	r0, r3
 800f646:	f7ff fc5b 	bl	800ef00 <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f64a:	193b      	adds	r3, r7, r4
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	0018      	movs	r0, r3
 800f650:	f7ff fca6 	bl	800efa0 <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f654:	193b      	adds	r3, r7, r4
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	0018      	movs	r0, r3
 800f65a:	f7ff fd57 	bl	800f10c <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f65e:	193b      	adds	r3, r7, r4
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	0018      	movs	r0, r3
 800f664:	f7ff fdb6 	bl	800f1d4 <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f668:	193b      	adds	r3, r7, r4
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	0018      	movs	r0, r3
 800f66e:	f7ff fe69 	bl	800f344 <Keys_Input_Recall>
}
 800f672:	46c0      	nop			; (mov r8, r8)
 800f674:	46bd      	mov	sp, r7
 800f676:	b005      	add	sp, #20
 800f678:	bd90      	pop	{r4, r7, pc}
	...

0800f67c <Key_V_set>:
 * @brief  按键V-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_V_set(void)
{
 800f67c:	b590      	push	{r4, r7, lr}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800f682:	4b91      	ldr	r3, [pc, #580]	; (800f8c8 <Key_V_set+0x24c>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d14b      	bne.n	800f722 <Key_V_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)   //当复用该按键时，该按键为菜单进入键
 800f68a:	4b90      	ldr	r3, [pc, #576]	; (800f8cc <Key_V_set+0x250>)
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d10e      	bne.n	800f6b0 <Key_V_set+0x34>
		{
			xyz.coordinates1=1;//更新界面为一级菜单界面system
 800f692:	4b8f      	ldr	r3, [pc, #572]	; (800f8d0 <Key_V_set+0x254>)
 800f694:	2201      	movs	r2, #1
 800f696:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800f698:	4b8d      	ldr	r3, [pc, #564]	; (800f8d0 <Key_V_set+0x254>)
 800f69a:	2201      	movs	r2, #1
 800f69c:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f69e:	4b8c      	ldr	r3, [pc, #560]	; (800f8d0 <Key_V_set+0x254>)
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	609a      	str	r2, [r3, #8]
			Cursor_flash_off();
 800f6a4:	f004 fede 	bl	8014464 <Cursor_flash_off>
			Shift_Not_Shift=Not_Shift;
 800f6a8:	4b88      	ldr	r3, [pc, #544]	; (800f8cc <Key_V_set+0x250>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	701a      	strb	r2, [r3, #0]
 800f6ae:	e038      	b.n	800f722 <Key_V_set+0xa6>

		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )
 800f6b0:	4b87      	ldr	r3, [pc, #540]	; (800f8d0 <Key_V_set+0x254>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d134      	bne.n	800f722 <Key_V_set+0xa6>
 800f6b8:	4b85      	ldr	r3, [pc, #532]	; (800f8d0 <Key_V_set+0x254>)
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d130      	bne.n	800f722 <Key_V_set+0xa6>
 800f6c0:	4b83      	ldr	r3, [pc, #524]	; (800f8d0 <Key_V_set+0x254>)
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d12c      	bne.n	800f722 <Key_V_set+0xa6>
 800f6c8:	4b80      	ldr	r3, [pc, #512]	; (800f8cc <Key_V_set+0x250>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d128      	bne.n	800f722 <Key_V_set+0xa6>
		{

			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800f6d0:	4b80      	ldr	r3, [pc, #512]	; (800f8d4 <Key_V_set+0x258>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800f6d6:	1d3b      	adds	r3, r7, #4
 800f6d8:	4a7d      	ldr	r2, [pc, #500]	; (800f8d0 <Key_V_set+0x254>)
 800f6da:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f6dc:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800f6de:	4b7c      	ldr	r3, [pc, #496]	; (800f8d0 <Key_V_set+0x254>)
 800f6e0:	2202      	movs	r2, #2
 800f6e2:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 800f6e4:	4b7a      	ldr	r3, [pc, #488]	; (800f8d0 <Key_V_set+0x254>)
 800f6e6:	2202      	movs	r2, #2
 800f6e8:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f6ea:	4b79      	ldr	r3, [pc, #484]	; (800f8d0 <Key_V_set+0x254>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)  Clear_Screen();//更新前后的界面不同，清屏
 800f6f0:	1d3b      	adds	r3, r7, #4
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	4b76      	ldr	r3, [pc, #472]	; (800f8d0 <Key_V_set+0x254>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d10b      	bne.n	800f714 <Key_V_set+0x98>
 800f6fc:	1d3b      	adds	r3, r7, #4
 800f6fe:	685a      	ldr	r2, [r3, #4]
 800f700:	4b73      	ldr	r3, [pc, #460]	; (800f8d0 <Key_V_set+0x254>)
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	429a      	cmp	r2, r3
 800f706:	d105      	bne.n	800f714 <Key_V_set+0x98>
 800f708:	1d3b      	adds	r3, r7, #4
 800f70a:	689a      	ldr	r2, [r3, #8]
 800f70c:	4b70      	ldr	r3, [pc, #448]	; (800f8d0 <Key_V_set+0x254>)
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	429a      	cmp	r2, r3
 800f712:	d001      	beq.n	800f718 <Key_V_set+0x9c>
 800f714:	f003 f8ae 	bl	8012874 <Clear_Screen>
			Cursor_Position = 0;   //令光标位于最低位
 800f718:	4b6f      	ldr	r3, [pc, #444]	; (800f8d8 <Key_V_set+0x25c>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800f71e:	f004 fed7 	bl	80144d0 <Cursor_flash_on>


	}
	/*特殊复用功能*/
	/*I set change to v set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800f722:	4b6b      	ldr	r3, [pc, #428]	; (800f8d0 <Key_V_set+0x254>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b02      	cmp	r3, #2
 800f728:	d11f      	bne.n	800f76a <Key_V_set+0xee>
 800f72a:	4b69      	ldr	r3, [pc, #420]	; (800f8d0 <Key_V_set+0x254>)
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d11b      	bne.n	800f76a <Key_V_set+0xee>
 800f732:	4b67      	ldr	r3, [pc, #412]	; (800f8d0 <Key_V_set+0x254>)
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d117      	bne.n	800f76a <Key_V_set+0xee>
 800f73a:	4b63      	ldr	r3, [pc, #396]	; (800f8c8 <Key_V_set+0x24c>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d113      	bne.n	800f76a <Key_V_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800f742:	4b63      	ldr	r3, [pc, #396]	; (800f8d0 <Key_V_set+0x254>)
 800f744:	2202      	movs	r2, #2
 800f746:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=2;
 800f748:	4b61      	ldr	r3, [pc, #388]	; (800f8d0 <Key_V_set+0x254>)
 800f74a:	2202      	movs	r2, #2
 800f74c:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f74e:	4b60      	ldr	r3, [pc, #384]	; (800f8d0 <Key_V_set+0x254>)
 800f750:	2200      	movs	r2, #0
 800f752:	609a      	str	r2, [r3, #8]

		Cursor_Position = 0;   //令光标位于最低位
 800f754:	4b60      	ldr	r3, [pc, #384]	; (800f8d8 <Key_V_set+0x25c>)
 800f756:	2200      	movs	r2, #0
 800f758:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800f75a:	4b60      	ldr	r3, [pc, #384]	; (800f8dc <Key_V_set+0x260>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	4b5e      	ldr	r3, [pc, #376]	; (800f8dc <Key_V_set+0x260>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2101      	movs	r1, #1
 800f766:	430a      	orrs	r2, r1
 800f768:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f76a:	4b59      	ldr	r3, [pc, #356]	; (800f8d0 <Key_V_set+0x254>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d120      	bne.n	800f7b4 <Key_V_set+0x138>
 800f772:	4b57      	ldr	r3, [pc, #348]	; (800f8d0 <Key_V_set+0x254>)
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	2b02      	cmp	r3, #2
 800f778:	d11c      	bne.n	800f7b4 <Key_V_set+0x138>
 800f77a:	4b55      	ldr	r3, [pc, #340]	; (800f8d0 <Key_V_set+0x254>)
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d018      	beq.n	800f7b4 <Key_V_set+0x138>
 800f782:	4b51      	ldr	r3, [pc, #324]	; (800f8c8 <Key_V_set+0x24c>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d114      	bne.n	800f7b4 <Key_V_set+0x138>
	{
		if(Cursor_Position==0)
 800f78a:	4b53      	ldr	r3, [pc, #332]	; (800f8d8 <Key_V_set+0x25c>)
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d103      	bne.n	800f79a <Key_V_set+0x11e>
		{
			Cursor_Position=4;
 800f792:	4b51      	ldr	r3, [pc, #324]	; (800f8d8 <Key_V_set+0x25c>)
 800f794:	2204      	movs	r2, #4
 800f796:	701a      	strb	r2, [r3, #0]
			return;
 800f798:	e093      	b.n	800f8c2 <Key_V_set+0x246>
		}
		if(Cursor_Position==3)
 800f79a:	4b4f      	ldr	r3, [pc, #316]	; (800f8d8 <Key_V_set+0x25c>)
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	2b03      	cmp	r3, #3
 800f7a0:	d102      	bne.n	800f7a8 <Key_V_set+0x12c>
		{
			Cursor_Position=2;
 800f7a2:	4b4d      	ldr	r3, [pc, #308]	; (800f8d8 <Key_V_set+0x25c>)
 800f7a4:	2202      	movs	r2, #2
 800f7a6:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 800f7a8:	4b4b      	ldr	r3, [pc, #300]	; (800f8d8 <Key_V_set+0x25c>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	4b49      	ldr	r3, [pc, #292]	; (800f8d8 <Key_V_set+0x25c>)
 800f7b2:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f7b4:	4b46      	ldr	r3, [pc, #280]	; (800f8d0 <Key_V_set+0x254>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d120      	bne.n	800f7fe <Key_V_set+0x182>
 800f7bc:	4b44      	ldr	r3, [pc, #272]	; (800f8d0 <Key_V_set+0x254>)
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	2b04      	cmp	r3, #4
 800f7c2:	d11c      	bne.n	800f7fe <Key_V_set+0x182>
 800f7c4:	4b42      	ldr	r3, [pc, #264]	; (800f8d0 <Key_V_set+0x254>)
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d018      	beq.n	800f7fe <Key_V_set+0x182>
 800f7cc:	4b3e      	ldr	r3, [pc, #248]	; (800f8c8 <Key_V_set+0x24c>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d114      	bne.n	800f7fe <Key_V_set+0x182>
	{
		if(Cursor_Position==0)
 800f7d4:	4b40      	ldr	r3, [pc, #256]	; (800f8d8 <Key_V_set+0x25c>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d103      	bne.n	800f7e4 <Key_V_set+0x168>
		{
			Cursor_Position=7;
 800f7dc:	4b3e      	ldr	r3, [pc, #248]	; (800f8d8 <Key_V_set+0x25c>)
 800f7de:	2207      	movs	r2, #7
 800f7e0:	701a      	strb	r2, [r3, #0]
			return;
 800f7e2:	e06e      	b.n	800f8c2 <Key_V_set+0x246>
		}
		if(Cursor_Position==5)
 800f7e4:	4b3c      	ldr	r3, [pc, #240]	; (800f8d8 <Key_V_set+0x25c>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	2b05      	cmp	r3, #5
 800f7ea:	d102      	bne.n	800f7f2 <Key_V_set+0x176>
		{
			Cursor_Position=4;
 800f7ec:	4b3a      	ldr	r3, [pc, #232]	; (800f8d8 <Key_V_set+0x25c>)
 800f7ee:	2204      	movs	r2, #4
 800f7f0:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f7f2:	4b39      	ldr	r3, [pc, #228]	; (800f8d8 <Key_V_set+0x25c>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	4b37      	ldr	r3, [pc, #220]	; (800f8d8 <Key_V_set+0x25c>)
 800f7fc:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800f7fe:	4b34      	ldr	r3, [pc, #208]	; (800f8d0 <Key_V_set+0x254>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d11f      	bne.n	800f846 <Key_V_set+0x1ca>
 800f806:	4b32      	ldr	r3, [pc, #200]	; (800f8d0 <Key_V_set+0x254>)
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	2b05      	cmp	r3, #5
 800f80c:	d11b      	bne.n	800f846 <Key_V_set+0x1ca>
 800f80e:	4b30      	ldr	r3, [pc, #192]	; (800f8d0 <Key_V_set+0x254>)
 800f810:	2201      	movs	r2, #1
 800f812:	609a      	str	r2, [r3, #8]
 800f814:	4b2c      	ldr	r3, [pc, #176]	; (800f8c8 <Key_V_set+0x24c>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d114      	bne.n	800f846 <Key_V_set+0x1ca>
	{
		if(Cursor_Position==0)
 800f81c:	4b2e      	ldr	r3, [pc, #184]	; (800f8d8 <Key_V_set+0x25c>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d103      	bne.n	800f82c <Key_V_set+0x1b0>
		{
			Cursor_Position=5;
 800f824:	4b2c      	ldr	r3, [pc, #176]	; (800f8d8 <Key_V_set+0x25c>)
 800f826:	2205      	movs	r2, #5
 800f828:	701a      	strb	r2, [r3, #0]
			return;
 800f82a:	e04a      	b.n	800f8c2 <Key_V_set+0x246>
		}
		if(Cursor_Position==4)
 800f82c:	4b2a      	ldr	r3, [pc, #168]	; (800f8d8 <Key_V_set+0x25c>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	2b04      	cmp	r3, #4
 800f832:	d102      	bne.n	800f83a <Key_V_set+0x1be>
		{
			Cursor_Position=3;
 800f834:	4b28      	ldr	r3, [pc, #160]	; (800f8d8 <Key_V_set+0x25c>)
 800f836:	2203      	movs	r2, #3
 800f838:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f83a:	4b27      	ldr	r3, [pc, #156]	; (800f8d8 <Key_V_set+0x25c>)
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	3b01      	subs	r3, #1
 800f840:	b2da      	uxtb	r2, r3
 800f842:	4b25      	ldr	r3, [pc, #148]	; (800f8d8 <Key_V_set+0x25c>)
 800f844:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800f846:	4b22      	ldr	r3, [pc, #136]	; (800f8d0 <Key_V_set+0x254>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d118      	bne.n	800f880 <Key_V_set+0x204>
 800f84e:	4b20      	ldr	r3, [pc, #128]	; (800f8d0 <Key_V_set+0x254>)
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	2b05      	cmp	r3, #5
 800f854:	d114      	bne.n	800f880 <Key_V_set+0x204>
 800f856:	4b1e      	ldr	r3, [pc, #120]	; (800f8d0 <Key_V_set+0x254>)
 800f858:	2202      	movs	r2, #2
 800f85a:	609a      	str	r2, [r3, #8]
 800f85c:	4b1a      	ldr	r3, [pc, #104]	; (800f8c8 <Key_V_set+0x24c>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10d      	bne.n	800f880 <Key_V_set+0x204>
	{
		if(Cursor_Position==0)
 800f864:	4b1c      	ldr	r3, [pc, #112]	; (800f8d8 <Key_V_set+0x25c>)
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d103      	bne.n	800f874 <Key_V_set+0x1f8>
		{
			Cursor_Position=2;
 800f86c:	4b1a      	ldr	r3, [pc, #104]	; (800f8d8 <Key_V_set+0x25c>)
 800f86e:	2202      	movs	r2, #2
 800f870:	701a      	strb	r2, [r3, #0]
			return;
 800f872:	e026      	b.n	800f8c2 <Key_V_set+0x246>
		}
		Cursor_Position--;
 800f874:	4b18      	ldr	r3, [pc, #96]	; (800f8d8 <Key_V_set+0x25c>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	3b01      	subs	r3, #1
 800f87a:	b2da      	uxtb	r2, r3
 800f87c:	4b16      	ldr	r3, [pc, #88]	; (800f8d8 <Key_V_set+0x25c>)
 800f87e:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800f880:	4b13      	ldr	r3, [pc, #76]	; (800f8d0 <Key_V_set+0x254>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b03      	cmp	r3, #3
 800f886:	d11a      	bne.n	800f8be <Key_V_set+0x242>
 800f888:	4b11      	ldr	r3, [pc, #68]	; (800f8d0 <Key_V_set+0x254>)
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d016      	beq.n	800f8be <Key_V_set+0x242>
 800f890:	4b0d      	ldr	r3, [pc, #52]	; (800f8c8 <Key_V_set+0x24c>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d112      	bne.n	800f8be <Key_V_set+0x242>
	{
		if(xyz.coordinates2==2)//recall
 800f898:	4b0d      	ldr	r3, [pc, #52]	; (800f8d0 <Key_V_set+0x254>)
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	d102      	bne.n	800f8a6 <Key_V_set+0x22a>
		{
			Cursor_flash_off();
 800f8a0:	f004 fde0 	bl	8014464 <Cursor_flash_off>
 800f8a4:	e00b      	b.n	800f8be <Key_V_set+0x242>
		}
		else if(xyz.coordinates2==1)//save
 800f8a6:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <Key_V_set+0x254>)
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	2b01      	cmp	r3, #1
 800f8ac:	d107      	bne.n	800f8be <Key_V_set+0x242>
		{
			xyz.coordinates3=1;
 800f8ae:	4b08      	ldr	r3, [pc, #32]	; (800f8d0 <Key_V_set+0x254>)
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	609a      	str	r2, [r3, #8]
			Cursor_Position=0;
 800f8b4:	4b08      	ldr	r3, [pc, #32]	; (800f8d8 <Key_V_set+0x25c>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800f8ba:	f004 fe09 	bl	80144d0 <Cursor_flash_on>
		}


	}

	Display_Interface();
 800f8be:	f004 fe17 	bl	80144f0 <Display_Interface>


}
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	b005      	add	sp, #20
 800f8c6:	bd90      	pop	{r4, r7, pc}
 800f8c8:	2000398b 	.word	0x2000398b
 800f8cc:	20003987 	.word	0x20003987
 800f8d0:	200039f4 	.word	0x200039f4
 800f8d4:	20002fd2 	.word	0x20002fd2
 800f8d8:	2000398e 	.word	0x2000398e
 800f8dc:	200034c8 	.word	0x200034c8

0800f8e0 <Key_I_set>:
 * @brief  按键I-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_I_set(void)
{
 800f8e0:	b590      	push	{r4, r7, lr}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800f8e6:	4b90      	ldr	r3, [pc, #576]	; (800fb28 <Key_I_set+0x248>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d14b      	bne.n	800f986 <Key_I_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)
 800f8ee:	4b8f      	ldr	r3, [pc, #572]	; (800fb2c <Key_I_set+0x24c>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d10e      	bne.n	800f914 <Key_I_set+0x34>
		{

			/*进入设定值展示界面*/
			xyz.coordinates1=9;
 800f8f6:	4b8e      	ldr	r3, [pc, #568]	; (800fb30 <Key_I_set+0x250>)
 800f8f8:	2209      	movs	r2, #9
 800f8fa:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=9;
 800f8fc:	4b8c      	ldr	r3, [pc, #560]	; (800fb30 <Key_I_set+0x250>)
 800f8fe:	2209      	movs	r2, #9
 800f900:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=9;
 800f902:	4b8b      	ldr	r3, [pc, #556]	; (800fb30 <Key_I_set+0x250>)
 800f904:	2209      	movs	r2, #9
 800f906:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift=Not_Shift;
 800f908:	4b88      	ldr	r3, [pc, #544]	; (800fb2c <Key_I_set+0x24c>)
 800f90a:	2200      	movs	r2, #0
 800f90c:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f90e:	f004 fda9 	bl	8014464 <Cursor_flash_off>
 800f912:	e038      	b.n	800f986 <Key_I_set+0xa6>
		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )//补充一个设定界面坐标
 800f914:	4b86      	ldr	r3, [pc, #536]	; (800fb30 <Key_I_set+0x250>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d134      	bne.n	800f986 <Key_I_set+0xa6>
 800f91c:	4b84      	ldr	r3, [pc, #528]	; (800fb30 <Key_I_set+0x250>)
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d130      	bne.n	800f986 <Key_I_set+0xa6>
 800f924:	4b82      	ldr	r3, [pc, #520]	; (800fb30 <Key_I_set+0x250>)
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d12c      	bne.n	800f986 <Key_I_set+0xa6>
 800f92c:	4b7f      	ldr	r3, [pc, #508]	; (800fb2c <Key_I_set+0x24c>)
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d128      	bne.n	800f986 <Key_I_set+0xa6>
		{
			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800f934:	4b7f      	ldr	r3, [pc, #508]	; (800fb34 <Key_I_set+0x254>)
 800f936:	2201      	movs	r2, #1
 800f938:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800f93a:	1d3b      	adds	r3, r7, #4
 800f93c:	4a7c      	ldr	r2, [pc, #496]	; (800fb30 <Key_I_set+0x250>)
 800f93e:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f940:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800f942:	4b7b      	ldr	r3, [pc, #492]	; (800fb30 <Key_I_set+0x250>)
 800f944:	2202      	movs	r2, #2
 800f946:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800f948:	4b79      	ldr	r3, [pc, #484]	; (800fb30 <Key_I_set+0x250>)
 800f94a:	2201      	movs	r2, #1
 800f94c:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f94e:	4b78      	ldr	r3, [pc, #480]	; (800fb30 <Key_I_set+0x250>)
 800f950:	2200      	movs	r2, #0
 800f952:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)   Clear_Screen();;//更新前后的界面不同，清屏
 800f954:	1d3b      	adds	r3, r7, #4
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	4b75      	ldr	r3, [pc, #468]	; (800fb30 <Key_I_set+0x250>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d10b      	bne.n	800f978 <Key_I_set+0x98>
 800f960:	1d3b      	adds	r3, r7, #4
 800f962:	685a      	ldr	r2, [r3, #4]
 800f964:	4b72      	ldr	r3, [pc, #456]	; (800fb30 <Key_I_set+0x250>)
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d105      	bne.n	800f978 <Key_I_set+0x98>
 800f96c:	1d3b      	adds	r3, r7, #4
 800f96e:	689a      	ldr	r2, [r3, #8]
 800f970:	4b6f      	ldr	r3, [pc, #444]	; (800fb30 <Key_I_set+0x250>)
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	429a      	cmp	r2, r3
 800f976:	d001      	beq.n	800f97c <Key_I_set+0x9c>
 800f978:	f002 ff7c 	bl	8012874 <Clear_Screen>
			Cursor_Position = 9;   //Cursor reset
 800f97c:	4b6e      	ldr	r3, [pc, #440]	; (800fb38 <Key_I_set+0x258>)
 800f97e:	2209      	movs	r2, #9
 800f980:	701a      	strb	r2, [r3, #0]


			Cursor_flash_on();
 800f982:	f004 fda5 	bl	80144d0 <Cursor_flash_on>

	}

	/*特殊复用功能*/
	/*V set change to I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800f986:	4b6a      	ldr	r3, [pc, #424]	; (800fb30 <Key_I_set+0x250>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d11f      	bne.n	800f9ce <Key_I_set+0xee>
 800f98e:	4b68      	ldr	r3, [pc, #416]	; (800fb30 <Key_I_set+0x250>)
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	2b02      	cmp	r3, #2
 800f994:	d11b      	bne.n	800f9ce <Key_I_set+0xee>
 800f996:	4b66      	ldr	r3, [pc, #408]	; (800fb30 <Key_I_set+0x250>)
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d117      	bne.n	800f9ce <Key_I_set+0xee>
 800f99e:	4b62      	ldr	r3, [pc, #392]	; (800fb28 <Key_I_set+0x248>)
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d113      	bne.n	800f9ce <Key_I_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800f9a6:	4b62      	ldr	r3, [pc, #392]	; (800fb30 <Key_I_set+0x250>)
 800f9a8:	2202      	movs	r2, #2
 800f9aa:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 800f9ac:	4b60      	ldr	r3, [pc, #384]	; (800fb30 <Key_I_set+0x250>)
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f9b2:	4b5f      	ldr	r3, [pc, #380]	; (800fb30 <Key_I_set+0x250>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	609a      	str	r2, [r3, #8]

		Cursor_Position = 9;   //令光标位于最低位
 800f9b8:	4b5f      	ldr	r3, [pc, #380]	; (800fb38 <Key_I_set+0x258>)
 800f9ba:	2209      	movs	r2, #9
 800f9bc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800f9be:	4b5f      	ldr	r3, [pc, #380]	; (800fb3c <Key_I_set+0x25c>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	4b5d      	ldr	r3, [pc, #372]	; (800fb3c <Key_I_set+0x25c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	430a      	orrs	r2, r1
 800f9cc:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f9ce:	4b58      	ldr	r3, [pc, #352]	; (800fb30 <Key_I_set+0x250>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d120      	bne.n	800fa18 <Key_I_set+0x138>
 800f9d6:	4b56      	ldr	r3, [pc, #344]	; (800fb30 <Key_I_set+0x250>)
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	2b02      	cmp	r3, #2
 800f9dc:	d11c      	bne.n	800fa18 <Key_I_set+0x138>
 800f9de:	4b54      	ldr	r3, [pc, #336]	; (800fb30 <Key_I_set+0x250>)
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d018      	beq.n	800fa18 <Key_I_set+0x138>
 800f9e6:	4b50      	ldr	r3, [pc, #320]	; (800fb28 <Key_I_set+0x248>)
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d114      	bne.n	800fa18 <Key_I_set+0x138>
	{
		if(Cursor_Position==4)
 800f9ee:	4b52      	ldr	r3, [pc, #328]	; (800fb38 <Key_I_set+0x258>)
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	2b04      	cmp	r3, #4
 800f9f4:	d103      	bne.n	800f9fe <Key_I_set+0x11e>
		{
			Cursor_Position=0;
 800f9f6:	4b50      	ldr	r3, [pc, #320]	; (800fb38 <Key_I_set+0x258>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	701a      	strb	r2, [r3, #0]
			return;
 800f9fc:	e091      	b.n	800fb22 <Key_I_set+0x242>
		}
		if(Cursor_Position==1)
 800f9fe:	4b4e      	ldr	r3, [pc, #312]	; (800fb38 <Key_I_set+0x258>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d102      	bne.n	800fa0c <Key_I_set+0x12c>
		{
			Cursor_Position=2;
 800fa06:	4b4c      	ldr	r3, [pc, #304]	; (800fb38 <Key_I_set+0x258>)
 800fa08:	2202      	movs	r2, #2
 800fa0a:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800fa0c:	4b4a      	ldr	r3, [pc, #296]	; (800fb38 <Key_I_set+0x258>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	3301      	adds	r3, #1
 800fa12:	b2da      	uxtb	r2, r3
 800fa14:	4b48      	ldr	r3, [pc, #288]	; (800fb38 <Key_I_set+0x258>)
 800fa16:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800fa18:	4b45      	ldr	r3, [pc, #276]	; (800fb30 <Key_I_set+0x250>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d120      	bne.n	800fa62 <Key_I_set+0x182>
 800fa20:	4b43      	ldr	r3, [pc, #268]	; (800fb30 <Key_I_set+0x250>)
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	2b04      	cmp	r3, #4
 800fa26:	d11c      	bne.n	800fa62 <Key_I_set+0x182>
 800fa28:	4b41      	ldr	r3, [pc, #260]	; (800fb30 <Key_I_set+0x250>)
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d018      	beq.n	800fa62 <Key_I_set+0x182>
 800fa30:	4b3d      	ldr	r3, [pc, #244]	; (800fb28 <Key_I_set+0x248>)
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d114      	bne.n	800fa62 <Key_I_set+0x182>
	{
		if(Cursor_Position==7)
 800fa38:	4b3f      	ldr	r3, [pc, #252]	; (800fb38 <Key_I_set+0x258>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	2b07      	cmp	r3, #7
 800fa3e:	d103      	bne.n	800fa48 <Key_I_set+0x168>
		{
			Cursor_Position=0;
 800fa40:	4b3d      	ldr	r3, [pc, #244]	; (800fb38 <Key_I_set+0x258>)
 800fa42:	2200      	movs	r2, #0
 800fa44:	701a      	strb	r2, [r3, #0]
			return;
 800fa46:	e06c      	b.n	800fb22 <Key_I_set+0x242>
		}
		if(Cursor_Position==3)
 800fa48:	4b3b      	ldr	r3, [pc, #236]	; (800fb38 <Key_I_set+0x258>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	d102      	bne.n	800fa56 <Key_I_set+0x176>
		{
			Cursor_Position=4;
 800fa50:	4b39      	ldr	r3, [pc, #228]	; (800fb38 <Key_I_set+0x258>)
 800fa52:	2204      	movs	r2, #4
 800fa54:	701a      	strb	r2, [r3, #0]

		}

		Cursor_Position++;
 800fa56:	4b38      	ldr	r3, [pc, #224]	; (800fb38 <Key_I_set+0x258>)
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	4b36      	ldr	r3, [pc, #216]	; (800fb38 <Key_I_set+0x258>)
 800fa60:	701a      	strb	r2, [r3, #0]
	}
	/*AD*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800fa62:	4b33      	ldr	r3, [pc, #204]	; (800fb30 <Key_I_set+0x250>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d11f      	bne.n	800faaa <Key_I_set+0x1ca>
 800fa6a:	4b31      	ldr	r3, [pc, #196]	; (800fb30 <Key_I_set+0x250>)
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	2b05      	cmp	r3, #5
 800fa70:	d11b      	bne.n	800faaa <Key_I_set+0x1ca>
 800fa72:	4b2f      	ldr	r3, [pc, #188]	; (800fb30 <Key_I_set+0x250>)
 800fa74:	2201      	movs	r2, #1
 800fa76:	609a      	str	r2, [r3, #8]
 800fa78:	4b2b      	ldr	r3, [pc, #172]	; (800fb28 <Key_I_set+0x248>)
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d114      	bne.n	800faaa <Key_I_set+0x1ca>
	{
		if(Cursor_Position==5)
 800fa80:	4b2d      	ldr	r3, [pc, #180]	; (800fb38 <Key_I_set+0x258>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	2b05      	cmp	r3, #5
 800fa86:	d103      	bne.n	800fa90 <Key_I_set+0x1b0>
		{
			Cursor_Position=0;
 800fa88:	4b2b      	ldr	r3, [pc, #172]	; (800fb38 <Key_I_set+0x258>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	701a      	strb	r2, [r3, #0]
			return;
 800fa8e:	e048      	b.n	800fb22 <Key_I_set+0x242>
		}
		if(Cursor_Position==2)
 800fa90:	4b29      	ldr	r3, [pc, #164]	; (800fb38 <Key_I_set+0x258>)
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d102      	bne.n	800fa9e <Key_I_set+0x1be>
		{
			Cursor_Position=3;
 800fa98:	4b27      	ldr	r3, [pc, #156]	; (800fb38 <Key_I_set+0x258>)
 800fa9a:	2203      	movs	r2, #3
 800fa9c:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800fa9e:	4b26      	ldr	r3, [pc, #152]	; (800fb38 <Key_I_set+0x258>)
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	3301      	adds	r3, #1
 800faa4:	b2da      	uxtb	r2, r3
 800faa6:	4b24      	ldr	r3, [pc, #144]	; (800fb38 <Key_I_set+0x258>)
 800faa8:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800faaa:	4b21      	ldr	r3, [pc, #132]	; (800fb30 <Key_I_set+0x250>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d118      	bne.n	800fae4 <Key_I_set+0x204>
 800fab2:	4b1f      	ldr	r3, [pc, #124]	; (800fb30 <Key_I_set+0x250>)
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	2b05      	cmp	r3, #5
 800fab8:	d114      	bne.n	800fae4 <Key_I_set+0x204>
 800faba:	4b1d      	ldr	r3, [pc, #116]	; (800fb30 <Key_I_set+0x250>)
 800fabc:	2202      	movs	r2, #2
 800fabe:	609a      	str	r2, [r3, #8]
 800fac0:	4b19      	ldr	r3, [pc, #100]	; (800fb28 <Key_I_set+0x248>)
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d10d      	bne.n	800fae4 <Key_I_set+0x204>
	{
		if(Cursor_Position==2)
 800fac8:	4b1b      	ldr	r3, [pc, #108]	; (800fb38 <Key_I_set+0x258>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2b02      	cmp	r3, #2
 800face:	d103      	bne.n	800fad8 <Key_I_set+0x1f8>
		{
			Cursor_Position=0;
 800fad0:	4b19      	ldr	r3, [pc, #100]	; (800fb38 <Key_I_set+0x258>)
 800fad2:	2200      	movs	r2, #0
 800fad4:	701a      	strb	r2, [r3, #0]
			return;
 800fad6:	e024      	b.n	800fb22 <Key_I_set+0x242>
		}
		Cursor_Position++;
 800fad8:	4b17      	ldr	r3, [pc, #92]	; (800fb38 <Key_I_set+0x258>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	b2da      	uxtb	r2, r3
 800fae0:	4b15      	ldr	r3, [pc, #84]	; (800fb38 <Key_I_set+0x258>)
 800fae2:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800fae4:	4b12      	ldr	r3, [pc, #72]	; (800fb30 <Key_I_set+0x250>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b03      	cmp	r3, #3
 800faea:	d11a      	bne.n	800fb22 <Key_I_set+0x242>
 800faec:	4b10      	ldr	r3, [pc, #64]	; (800fb30 <Key_I_set+0x250>)
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d016      	beq.n	800fb22 <Key_I_set+0x242>
 800faf4:	4b0c      	ldr	r3, [pc, #48]	; (800fb28 <Key_I_set+0x248>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d112      	bne.n	800fb22 <Key_I_set+0x242>
	{
		if(xyz.coordinates2==2)//recall
 800fafc:	4b0c      	ldr	r3, [pc, #48]	; (800fb30 <Key_I_set+0x250>)
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	2b02      	cmp	r3, #2
 800fb02:	d102      	bne.n	800fb0a <Key_I_set+0x22a>
		{
			Cursor_flash_off();
 800fb04:	f004 fcae 	bl	8014464 <Cursor_flash_off>
 800fb08:	e00b      	b.n	800fb22 <Key_I_set+0x242>
		}
		else if(xyz.coordinates2==1)
 800fb0a:	4b09      	ldr	r3, [pc, #36]	; (800fb30 <Key_I_set+0x250>)
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d107      	bne.n	800fb22 <Key_I_set+0x242>
		{
			xyz.coordinates3=2;
 800fb12:	4b07      	ldr	r3, [pc, #28]	; (800fb30 <Key_I_set+0x250>)
 800fb14:	2202      	movs	r2, #2
 800fb16:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 800fb18:	4b07      	ldr	r3, [pc, #28]	; (800fb38 <Key_I_set+0x258>)
 800fb1a:	2209      	movs	r2, #9
 800fb1c:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800fb1e:	f004 fcd7 	bl	80144d0 <Cursor_flash_on>
		}

	}

}
 800fb22:	46bd      	mov	sp, r7
 800fb24:	b005      	add	sp, #20
 800fb26:	bd90      	pop	{r4, r7, pc}
 800fb28:	2000398b 	.word	0x2000398b
 800fb2c:	20003987 	.word	0x20003987
 800fb30:	200039f4 	.word	0x200039f4
 800fb34:	20002fd2 	.word	0x20002fd2
 800fb38:	2000398e 	.word	0x2000398e
 800fb3c:	200034c8 	.word	0x200034c8

0800fb40 <enter_second_menu>:


static void enter_second_menu(void)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	af00      	add	r7, sp, #0
	switch(xyz.coordinates2)
 800fb44:	4b13      	ldr	r3, [pc, #76]	; (800fb94 <enter_second_menu+0x54>)
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	2b08      	cmp	r3, #8
 800fb4a:	d81f      	bhi.n	800fb8c <enter_second_menu+0x4c>
 800fb4c:	009a      	lsls	r2, r3, #2
 800fb4e:	4b12      	ldr	r3, [pc, #72]	; (800fb98 <enter_second_menu+0x58>)
 800fb50:	18d3      	adds	r3, r2, r3
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	469f      	mov	pc, r3
	{
		case 1://system to reset
		case 3://RS232 to braudrate
		case 7://protect
		{
			Cursor_Position=0;
 800fb56:	4b11      	ldr	r3, [pc, #68]	; (800fb9c <enter_second_menu+0x5c>)
 800fb58:	2200      	movs	r2, #0
 800fb5a:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800fb5c:	f004 fc82 	bl	8014464 <Cursor_flash_off>
			xyz.coordinates3=1;
 800fb60:	4b0c      	ldr	r3, [pc, #48]	; (800fb94 <enter_second_menu+0x54>)
 800fb62:	2201      	movs	r2, #1
 800fb64:	609a      	str	r2, [r3, #8]
			break;
 800fb66:	e011      	b.n	800fb8c <enter_second_menu+0x4c>
		case 5://ADparam show
		case 2://slope to rate
		case 4://timer to delay cycle
		case 6://hard param
		{
			Cursor_Position=6;
 800fb68:	4b0c      	ldr	r3, [pc, #48]	; (800fb9c <enter_second_menu+0x5c>)
 800fb6a:	2206      	movs	r2, #6
 800fb6c:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800fb6e:	f004 fcaf 	bl	80144d0 <Cursor_flash_on>
			xyz.coordinates3=1;
 800fb72:	4b08      	ldr	r3, [pc, #32]	; (800fb94 <enter_second_menu+0x54>)
 800fb74:	2201      	movs	r2, #1
 800fb76:	609a      	str	r2, [r3, #8]
			break;
 800fb78:	e008      	b.n	800fb8c <enter_second_menu+0x4c>
		}
		case 8://calibration
		{
			Cursor_flash_on();
 800fb7a:	f004 fca9 	bl	80144d0 <Cursor_flash_on>
			Cursor_Position=9;
 800fb7e:	4b07      	ldr	r3, [pc, #28]	; (800fb9c <enter_second_menu+0x5c>)
 800fb80:	2209      	movs	r2, #9
 800fb82:	701a      	strb	r2, [r3, #0]
			xyz.coordinates3=1;
 800fb84:	4b03      	ldr	r3, [pc, #12]	; (800fb94 <enter_second_menu+0x54>)
 800fb86:	2201      	movs	r2, #1
 800fb88:	609a      	str	r2, [r3, #8]
			break;
 800fb8a:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 800fb8c:	46c0      	nop			; (mov r8, r8)
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	46c0      	nop			; (mov r8, r8)
 800fb94:	200039f4 	.word	0x200039f4
 800fb98:	080188b0 	.word	0x080188b0
 800fb9c:	2000398e 	.word	0x2000398e

0800fba0 <ISET_enter>:

static void ISET_enter(void)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800fba4:	4b45      	ldr	r3, [pc, #276]	; (800fcbc <ISET_enter+0x11c>)
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d139      	bne.n	800fc20 <ISET_enter+0x80>
	{
		//Set_Current = String_To_Float(String_Current)*100;
		Set_Current=String_to_float(String_Current)*100;
 800fbac:	4b44      	ldr	r3, [pc, #272]	; (800fcc0 <ISET_enter+0x120>)
 800fbae:	0018      	movs	r0, r3
 800fbb0:	f7fe fbac 	bl	800e30c <String_to_float>
 800fbb4:	1c03      	adds	r3, r0, #0
 800fbb6:	4943      	ldr	r1, [pc, #268]	; (800fcc4 <ISET_enter+0x124>)
 800fbb8:	1c18      	adds	r0, r3, #0
 800fbba:	f7f1 f851 	bl	8000c60 <__aeabi_fmul>
 800fbbe:	1c03      	adds	r3, r0, #0
 800fbc0:	1c18      	adds	r0, r3, #0
 800fbc2:	f7f0 fcb1 	bl	8000528 <__aeabi_f2uiz>
 800fbc6:	0003      	movs	r3, r0
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	4b3f      	ldr	r3, [pc, #252]	; (800fcc8 <ISET_enter+0x128>)
 800fbcc:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800fbce:	4b3e      	ldr	r3, [pc, #248]	; (800fcc8 <ISET_enter+0x128>)
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	4a3e      	ldr	r2, [pc, #248]	; (800fccc <ISET_enter+0x12c>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d902      	bls.n	800fbde <ISET_enter+0x3e>
 800fbd8:	4b3b      	ldr	r3, [pc, #236]	; (800fcc8 <ISET_enter+0x128>)
 800fbda:	4a3c      	ldr	r2, [pc, #240]	; (800fccc <ISET_enter+0x12c>)
 800fbdc:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=10)   Set_Current=10;
 800fbde:	4b3a      	ldr	r3, [pc, #232]	; (800fcc8 <ISET_enter+0x128>)
 800fbe0:	881b      	ldrh	r3, [r3, #0]
 800fbe2:	2b0a      	cmp	r3, #10
 800fbe4:	d802      	bhi.n	800fbec <ISET_enter+0x4c>
 800fbe6:	4b38      	ldr	r3, [pc, #224]	; (800fcc8 <ISET_enter+0x128>)
 800fbe8:	220a      	movs	r2, #10
 800fbea:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fbec:	f7fc fb0e 	bl	800c20c <AT25_Save_VISet>



		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off))//处于非延时输出
 800fbf0:	4b37      	ldr	r3, [pc, #220]	; (800fcd0 <ISET_enter+0x130>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d10a      	bne.n	800fc0e <ISET_enter+0x6e>
 800fbf8:	4b36      	ldr	r3, [pc, #216]	; (800fcd4 <ISET_enter+0x134>)
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d106      	bne.n	800fc0e <ISET_enter+0x6e>
		{

			DAC_Cmd_send(1,5,Set_Current);
 800fc00:	4b31      	ldr	r3, [pc, #196]	; (800fcc8 <ISET_enter+0x128>)
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	001a      	movs	r2, r3
 800fc06:	2105      	movs	r1, #5
 800fc08:	2001      	movs	r0, #1
 800fc0a:	f7fc fde9 	bl	800c7e0 <DAC_Cmd_send>
		}

		Cursor_Position=9;
 800fc0e:	4b32      	ldr	r3, [pc, #200]	; (800fcd8 <ISET_enter+0x138>)
 800fc10:	2209      	movs	r2, #9
 800fc12:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode=Encoder_Mode;
 800fc14:	4b29      	ldr	r3, [pc, #164]	; (800fcbc <ISET_enter+0x11c>)
 800fc16:	2201      	movs	r2, #1
 800fc18:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fc1a:	f004 fc59 	bl	80144d0 <Cursor_flash_on>
		Cursor_Position=9;
		Keys_Encoder_Mode=Encoder_Mode;
		Cursor_flash_on();
	}

}
 800fc1e:	e049      	b.n	800fcb4 <ISET_enter+0x114>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800fc20:	4b26      	ldr	r3, [pc, #152]	; (800fcbc <ISET_enter+0x11c>)
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d145      	bne.n	800fcb4 <ISET_enter+0x114>
		Keys_Encoder_Mode = Encoder_Mode;//恢复为编码器输入模式
 800fc28:	4b24      	ldr	r3, [pc, #144]	; (800fcbc <ISET_enter+0x11c>)
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	701a      	strb	r2, [r3, #0]
		Set_Current=String_to_float(String_Current)*100;
 800fc2e:	4b24      	ldr	r3, [pc, #144]	; (800fcc0 <ISET_enter+0x120>)
 800fc30:	0018      	movs	r0, r3
 800fc32:	f7fe fb6b 	bl	800e30c <String_to_float>
 800fc36:	1c03      	adds	r3, r0, #0
 800fc38:	4922      	ldr	r1, [pc, #136]	; (800fcc4 <ISET_enter+0x124>)
 800fc3a:	1c18      	adds	r0, r3, #0
 800fc3c:	f7f1 f810 	bl	8000c60 <__aeabi_fmul>
 800fc40:	1c03      	adds	r3, r0, #0
 800fc42:	1c18      	adds	r0, r3, #0
 800fc44:	f7f0 fc70 	bl	8000528 <__aeabi_f2uiz>
 800fc48:	0003      	movs	r3, r0
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	4b1e      	ldr	r3, [pc, #120]	; (800fcc8 <ISET_enter+0x128>)
 800fc4e:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800fc50:	4b1d      	ldr	r3, [pc, #116]	; (800fcc8 <ISET_enter+0x128>)
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	4a1d      	ldr	r2, [pc, #116]	; (800fccc <ISET_enter+0x12c>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d902      	bls.n	800fc60 <ISET_enter+0xc0>
 800fc5a:	4b1b      	ldr	r3, [pc, #108]	; (800fcc8 <ISET_enter+0x128>)
 800fc5c:	4a1b      	ldr	r2, [pc, #108]	; (800fccc <ISET_enter+0x12c>)
 800fc5e:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=100)   Set_Current=100;
 800fc60:	4b19      	ldr	r3, [pc, #100]	; (800fcc8 <ISET_enter+0x128>)
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	2b64      	cmp	r3, #100	; 0x64
 800fc66:	d802      	bhi.n	800fc6e <ISET_enter+0xce>
 800fc68:	4b17      	ldr	r3, [pc, #92]	; (800fcc8 <ISET_enter+0x128>)
 800fc6a:	2264      	movs	r2, #100	; 0x64
 800fc6c:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fc6e:	f7fc facd 	bl	800c20c <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off))//处于非延时输出模式
 800fc72:	4b17      	ldr	r3, [pc, #92]	; (800fcd0 <ISET_enter+0x130>)
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d114      	bne.n	800fca4 <ISET_enter+0x104>
 800fc7a:	4b16      	ldr	r3, [pc, #88]	; (800fcd4 <ISET_enter+0x134>)
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d110      	bne.n	800fca4 <ISET_enter+0x104>
			DAC_Cmd_send(1,4,Set_Voltage);
 800fc82:	4b16      	ldr	r3, [pc, #88]	; (800fcdc <ISET_enter+0x13c>)
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	001a      	movs	r2, r3
 800fc88:	2104      	movs	r1, #4
 800fc8a:	2001      	movs	r0, #1
 800fc8c:	f7fc fda8 	bl	800c7e0 <DAC_Cmd_send>
			HAL_Delay(5);
 800fc90:	2005      	movs	r0, #5
 800fc92:	f7f5 faa9 	bl	80051e8 <HAL_Delay>
			DAC_Cmd_send(1,5,Set_Current);
 800fc96:	4b0c      	ldr	r3, [pc, #48]	; (800fcc8 <ISET_enter+0x128>)
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	001a      	movs	r2, r3
 800fc9c:	2105      	movs	r1, #5
 800fc9e:	2001      	movs	r0, #1
 800fca0:	f7fc fd9e 	bl	800c7e0 <DAC_Cmd_send>
		Cursor_Position=9;
 800fca4:	4b0c      	ldr	r3, [pc, #48]	; (800fcd8 <ISET_enter+0x138>)
 800fca6:	2209      	movs	r2, #9
 800fca8:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode=Encoder_Mode;
 800fcaa:	4b04      	ldr	r3, [pc, #16]	; (800fcbc <ISET_enter+0x11c>)
 800fcac:	2201      	movs	r2, #1
 800fcae:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fcb0:	f004 fc0e 	bl	80144d0 <Cursor_flash_on>
}
 800fcb4:	46c0      	nop			; (mov r8, r8)
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	46c0      	nop			; (mov r8, r8)
 800fcbc:	20002fd2 	.word	0x20002fd2
 800fcc0:	20003060 	.word	0x20003060
 800fcc4:	42c80000 	.word	0x42c80000
 800fcc8:	20002fda 	.word	0x20002fda
 800fccc:	00001388 	.word	0x00001388
 800fcd0:	20003989 	.word	0x20003989
 800fcd4:	200039e1 	.word	0x200039e1
 800fcd8:	2000398e 	.word	0x2000398e
 800fcdc:	20002fd8 	.word	0x20002fd8

0800fce0 <VSET_enter>:

static void VSET_enter(void)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800fce4:	4b3d      	ldr	r3, [pc, #244]	; (800fddc <VSET_enter+0xfc>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d137      	bne.n	800fd5c <VSET_enter+0x7c>
	{

		Set_Voltage = String_to_float(&String_Voltage[0])*100;
 800fcec:	4b3c      	ldr	r3, [pc, #240]	; (800fde0 <VSET_enter+0x100>)
 800fcee:	0018      	movs	r0, r3
 800fcf0:	f7fe fb0c 	bl	800e30c <String_to_float>
 800fcf4:	1c03      	adds	r3, r0, #0
 800fcf6:	493b      	ldr	r1, [pc, #236]	; (800fde4 <VSET_enter+0x104>)
 800fcf8:	1c18      	adds	r0, r3, #0
 800fcfa:	f7f0 ffb1 	bl	8000c60 <__aeabi_fmul>
 800fcfe:	1c03      	adds	r3, r0, #0
 800fd00:	1c18      	adds	r0, r3, #0
 800fd02:	f7f0 fc11 	bl	8000528 <__aeabi_f2uiz>
 800fd06:	0003      	movs	r3, r0
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	4b37      	ldr	r3, [pc, #220]	; (800fde8 <VSET_enter+0x108>)
 800fd0c:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000)
 800fd0e:	4b36      	ldr	r3, [pc, #216]	; (800fde8 <VSET_enter+0x108>)
 800fd10:	881b      	ldrh	r3, [r3, #0]
 800fd12:	4a36      	ldr	r2, [pc, #216]	; (800fdec <VSET_enter+0x10c>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d902      	bls.n	800fd1e <VSET_enter+0x3e>
		{
			Set_Voltage = 15000;  //限制电压最大值为150V
 800fd18:	4b33      	ldr	r3, [pc, #204]	; (800fde8 <VSET_enter+0x108>)
 800fd1a:	4a34      	ldr	r2, [pc, #208]	; (800fdec <VSET_enter+0x10c>)
 800fd1c:	801a      	strh	r2, [r3, #0]
		}
		if(Set_Voltage<=10)
 800fd1e:	4b32      	ldr	r3, [pc, #200]	; (800fde8 <VSET_enter+0x108>)
 800fd20:	881b      	ldrh	r3, [r3, #0]
 800fd22:	2b0a      	cmp	r3, #10
 800fd24:	d802      	bhi.n	800fd2c <VSET_enter+0x4c>
		{
			Set_Voltage=10;
 800fd26:	4b30      	ldr	r3, [pc, #192]	; (800fde8 <VSET_enter+0x108>)
 800fd28:	220a      	movs	r2, #10
 800fd2a:	801a      	strh	r2, [r3, #0]
		}


		AT25_Save_VISet();
 800fd2c:	f7fc fa6e 	bl	800c20c <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )//非延时输出
 800fd30:	4b2f      	ldr	r3, [pc, #188]	; (800fdf0 <VSET_enter+0x110>)
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d10a      	bne.n	800fd4e <VSET_enter+0x6e>
 800fd38:	4b2e      	ldr	r3, [pc, #184]	; (800fdf4 <VSET_enter+0x114>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d106      	bne.n	800fd4e <VSET_enter+0x6e>
		{
			DAC_Cmd_send(1,4,Set_Voltage);
 800fd40:	4b29      	ldr	r3, [pc, #164]	; (800fde8 <VSET_enter+0x108>)
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	001a      	movs	r2, r3
 800fd46:	2104      	movs	r1, #4
 800fd48:	2001      	movs	r0, #1
 800fd4a:	f7fc fd49 	bl	800c7e0 <DAC_Cmd_send>
		}

		xyz.coordinates2=1;//change to I set
 800fd4e:	4b2a      	ldr	r3, [pc, #168]	; (800fdf8 <VSET_enter+0x118>)
 800fd50:	2201      	movs	r2, #1
 800fd52:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800fd54:	4b29      	ldr	r3, [pc, #164]	; (800fdfc <VSET_enter+0x11c>)
 800fd56:	2209      	movs	r2, #9
 800fd58:	701a      	strb	r2, [r3, #0]
		Cursor_Position=9;//光标更新
		Keys_Encoder_Mode= Encoder_Mode;
		Cursor_flash_on();

	}
}
 800fd5a:	e03b      	b.n	800fdd4 <VSET_enter+0xf4>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800fd5c:	4b1f      	ldr	r3, [pc, #124]	; (800fddc <VSET_enter+0xfc>)
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d137      	bne.n	800fdd4 <VSET_enter+0xf4>
		Keys_Encoder_Mode = Encoder_Mode;   //恢复为编码器输入模式
 800fd64:	4b1d      	ldr	r3, [pc, #116]	; (800fddc <VSET_enter+0xfc>)
 800fd66:	2201      	movs	r2, #1
 800fd68:	701a      	strb	r2, [r3, #0]
		Set_Voltage = String_to_float(&String_Voltage[0])*100;
 800fd6a:	4b1d      	ldr	r3, [pc, #116]	; (800fde0 <VSET_enter+0x100>)
 800fd6c:	0018      	movs	r0, r3
 800fd6e:	f7fe facd 	bl	800e30c <String_to_float>
 800fd72:	1c03      	adds	r3, r0, #0
 800fd74:	491b      	ldr	r1, [pc, #108]	; (800fde4 <VSET_enter+0x104>)
 800fd76:	1c18      	adds	r0, r3, #0
 800fd78:	f7f0 ff72 	bl	8000c60 <__aeabi_fmul>
 800fd7c:	1c03      	adds	r3, r0, #0
 800fd7e:	1c18      	adds	r0, r3, #0
 800fd80:	f7f0 fbd2 	bl	8000528 <__aeabi_f2uiz>
 800fd84:	0003      	movs	r3, r0
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	4b17      	ldr	r3, [pc, #92]	; (800fde8 <VSET_enter+0x108>)
 800fd8a:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000) Set_Voltage = 15000;  //限制电压最大值为150V
 800fd8c:	4b16      	ldr	r3, [pc, #88]	; (800fde8 <VSET_enter+0x108>)
 800fd8e:	881b      	ldrh	r3, [r3, #0]
 800fd90:	4a16      	ldr	r2, [pc, #88]	; (800fdec <VSET_enter+0x10c>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d902      	bls.n	800fd9c <VSET_enter+0xbc>
 800fd96:	4b14      	ldr	r3, [pc, #80]	; (800fde8 <VSET_enter+0x108>)
 800fd98:	4a14      	ldr	r2, [pc, #80]	; (800fdec <VSET_enter+0x10c>)
 800fd9a:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fd9c:	f7fc fa36 	bl	800c20c <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )
 800fda0:	4b13      	ldr	r3, [pc, #76]	; (800fdf0 <VSET_enter+0x110>)
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d10a      	bne.n	800fdbe <VSET_enter+0xde>
 800fda8:	4b12      	ldr	r3, [pc, #72]	; (800fdf4 <VSET_enter+0x114>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d106      	bne.n	800fdbe <VSET_enter+0xde>
			DAC_Cmd_send(1,4,Set_Voltage);
 800fdb0:	4b0d      	ldr	r3, [pc, #52]	; (800fde8 <VSET_enter+0x108>)
 800fdb2:	881b      	ldrh	r3, [r3, #0]
 800fdb4:	001a      	movs	r2, r3
 800fdb6:	2104      	movs	r1, #4
 800fdb8:	2001      	movs	r0, #1
 800fdba:	f7fc fd11 	bl	800c7e0 <DAC_Cmd_send>
		xyz.coordinates2=1;//change to I set
 800fdbe:	4b0e      	ldr	r3, [pc, #56]	; (800fdf8 <VSET_enter+0x118>)
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800fdc4:	4b0d      	ldr	r3, [pc, #52]	; (800fdfc <VSET_enter+0x11c>)
 800fdc6:	2209      	movs	r2, #9
 800fdc8:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode= Encoder_Mode;
 800fdca:	4b04      	ldr	r3, [pc, #16]	; (800fddc <VSET_enter+0xfc>)
 800fdcc:	2201      	movs	r2, #1
 800fdce:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fdd0:	f004 fb7e 	bl	80144d0 <Cursor_flash_on>
}
 800fdd4:	46c0      	nop			; (mov r8, r8)
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	46c0      	nop			; (mov r8, r8)
 800fddc:	20002fd2 	.word	0x20002fd2
 800fde0:	20003058 	.word	0x20003058
 800fde4:	42c80000 	.word	0x42c80000
 800fde8:	20002fd8 	.word	0x20002fd8
 800fdec:	00003a98 	.word	0x00003a98
 800fdf0:	20003989 	.word	0x20003989
 800fdf4:	200039e1 	.word	0x200039e1
 800fdf8:	200039f4 	.word	0x200039f4
 800fdfc:	2000398e 	.word	0x2000398e

0800fe00 <Password_enter>:

static void Password_enter(void)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
	if(strcmp(String_Password,Password)==0)//密码正确
 800fe06:	4a27      	ldr	r2, [pc, #156]	; (800fea4 <Password_enter+0xa4>)
 800fe08:	4b27      	ldr	r3, [pc, #156]	; (800fea8 <Password_enter+0xa8>)
 800fe0a:	0011      	movs	r1, r2
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f7f0 f977 	bl	8000100 <strcmp>
 800fe12:	1e03      	subs	r3, r0, #0
 800fe14:	d122      	bne.n	800fe5c <Password_enter+0x5c>
	{
		Third_Menu_Flag=1;
 800fe16:	4b25      	ldr	r3, [pc, #148]	; (800feac <Password_enter+0xac>)
 800fe18:	2201      	movs	r2, #1
 800fe1a:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=2;//更新为显示隐藏界面
 800fe1c:	4b24      	ldr	r3, [pc, #144]	; (800feb0 <Password_enter+0xb0>)
 800fe1e:	2202      	movs	r2, #2
 800fe20:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 800fe22:	4b24      	ldr	r3, [pc, #144]	; (800feb4 <Password_enter+0xb4>)
 800fe24:	220a      	movs	r2, #10
 800fe26:	701a      	strb	r2, [r3, #0]
		Cursor_flash_off();
 800fe28:	f004 fb1c 	bl	8014464 <Cursor_flash_off>

		for(uint8_t i=0;i<6;i++)
 800fe2c:	1dfb      	adds	r3, r7, #7
 800fe2e:	2200      	movs	r2, #0
 800fe30:	701a      	strb	r2, [r3, #0]
 800fe32:	e00e      	b.n	800fe52 <Password_enter+0x52>
		{
			String_Password_mask[i]=' ';
 800fe34:	1dfb      	adds	r3, r7, #7
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	4a1f      	ldr	r2, [pc, #124]	; (800feb8 <Password_enter+0xb8>)
 800fe3a:	2120      	movs	r1, #32
 800fe3c:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 800fe3e:	1dfb      	adds	r3, r7, #7
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	4a19      	ldr	r2, [pc, #100]	; (800fea8 <Password_enter+0xa8>)
 800fe44:	2120      	movs	r1, #32
 800fe46:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 800fe48:	1dfb      	adds	r3, r7, #7
 800fe4a:	781a      	ldrb	r2, [r3, #0]
 800fe4c:	1dfb      	adds	r3, r7, #7
 800fe4e:	3201      	adds	r2, #1
 800fe50:	701a      	strb	r2, [r3, #0]
 800fe52:	1dfb      	adds	r3, r7, #7
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	2b05      	cmp	r3, #5
 800fe58:	d9ec      	bls.n	800fe34 <Password_enter+0x34>
			String_Password[i]=' ';
		}

	}

}
 800fe5a:	e01f      	b.n	800fe9c <Password_enter+0x9c>
		Third_Menu_Flag=1;
 800fe5c:	4b13      	ldr	r3, [pc, #76]	; (800feac <Password_enter+0xac>)
 800fe5e:	2201      	movs	r2, #1
 800fe60:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=1;
 800fe62:	4b13      	ldr	r3, [pc, #76]	; (800feb0 <Password_enter+0xb0>)
 800fe64:	2201      	movs	r2, #1
 800fe66:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 800fe68:	4b12      	ldr	r3, [pc, #72]	; (800feb4 <Password_enter+0xb4>)
 800fe6a:	220a      	movs	r2, #10
 800fe6c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<6;i++)
 800fe6e:	1dbb      	adds	r3, r7, #6
 800fe70:	2200      	movs	r2, #0
 800fe72:	701a      	strb	r2, [r3, #0]
 800fe74:	e00e      	b.n	800fe94 <Password_enter+0x94>
			String_Password_mask[i]=' ';
 800fe76:	1dbb      	adds	r3, r7, #6
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	4a0f      	ldr	r2, [pc, #60]	; (800feb8 <Password_enter+0xb8>)
 800fe7c:	2120      	movs	r1, #32
 800fe7e:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 800fe80:	1dbb      	adds	r3, r7, #6
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	4a08      	ldr	r2, [pc, #32]	; (800fea8 <Password_enter+0xa8>)
 800fe86:	2120      	movs	r1, #32
 800fe88:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 800fe8a:	1dbb      	adds	r3, r7, #6
 800fe8c:	781a      	ldrb	r2, [r3, #0]
 800fe8e:	1dbb      	adds	r3, r7, #6
 800fe90:	3201      	adds	r2, #1
 800fe92:	701a      	strb	r2, [r3, #0]
 800fe94:	1dbb      	adds	r3, r7, #6
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b05      	cmp	r3, #5
 800fe9a:	d9ec      	bls.n	800fe76 <Password_enter+0x76>
}
 800fe9c:	46c0      	nop			; (mov r8, r8)
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	b002      	add	sp, #8
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	080188a8 	.word	0x080188a8
 800fea8:	200030a4 	.word	0x200030a4
 800feac:	20002fd0 	.word	0x20002fd0
 800feb0:	200039f4 	.word	0x200039f4
 800feb4:	2000398e 	.word	0x2000398e
 800feb8:	200030ac 	.word	0x200030ac

0800febc <IRateSET_enter>:

static void IRateSET_enter(void)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_I_Slope=String_To_Float(&String_I_Rate[0])*10;
 800fec0:	4b13      	ldr	r3, [pc, #76]	; (800ff10 <IRateSET_enter+0x54>)
 800fec2:	0018      	movs	r0, r3
 800fec4:	f7fe fb76 	bl	800e5b4 <String_To_Float>
 800fec8:	1c03      	adds	r3, r0, #0
 800feca:	4912      	ldr	r1, [pc, #72]	; (800ff14 <IRateSET_enter+0x58>)
 800fecc:	1c18      	adds	r0, r3, #0
 800fece:	f7f0 fec7 	bl	8000c60 <__aeabi_fmul>
 800fed2:	1c03      	adds	r3, r0, #0
 800fed4:	1c18      	adds	r0, r3, #0
 800fed6:	f7f0 fb27 	bl	8000528 <__aeabi_f2uiz>
 800feda:	0003      	movs	r3, r0
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	4b0e      	ldr	r3, [pc, #56]	; (800ff18 <IRateSET_enter+0x5c>)
 800fee0:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_I_Slope);
 800fee2:	4b0d      	ldr	r3, [pc, #52]	; (800ff18 <IRateSET_enter+0x5c>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	001a      	movs	r2, r3
 800feea:	2108      	movs	r1, #8
 800feec:	2001      	movs	r0, #1
 800feee:	f7fc fc77 	bl	800c7e0 <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 800fef2:	f7fc fad3 	bl	800c49c <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 800fef6:	4b09      	ldr	r3, [pc, #36]	; (800ff1c <IRateSET_enter+0x60>)
 800fef8:	2201      	movs	r2, #1
 800fefa:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=2;//完成后设定，进入下一设定
 800fefc:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <IRateSET_enter+0x64>)
 800fefe:	2202      	movs	r2, #2
 800ff00:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 800ff02:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <IRateSET_enter+0x68>)
 800ff04:	2206      	movs	r2, #6
 800ff06:	701a      	strb	r2, [r3, #0]


}
 800ff08:	46c0      	nop			; (mov r8, r8)
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	46c0      	nop			; (mov r8, r8)
 800ff10:	20003040 	.word	0x20003040
 800ff14:	41200000 	.word	0x41200000
 800ff18:	20003999 	.word	0x20003999
 800ff1c:	20002fd0 	.word	0x20002fd0
 800ff20:	200039f4 	.word	0x200039f4
 800ff24:	2000398e 	.word	0x2000398e

0800ff28 <VRateSET_enter>:

static void VRateSET_enter(void)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_V_Slope=String_To_Float(&String_V_Rate[0])*10;
 800ff2c:	4b14      	ldr	r3, [pc, #80]	; (800ff80 <VRateSET_enter+0x58>)
 800ff2e:	0018      	movs	r0, r3
 800ff30:	f7fe fb40 	bl	800e5b4 <String_To_Float>
 800ff34:	1c03      	adds	r3, r0, #0
 800ff36:	4913      	ldr	r1, [pc, #76]	; (800ff84 <VRateSET_enter+0x5c>)
 800ff38:	1c18      	adds	r0, r3, #0
 800ff3a:	f7f0 fe91 	bl	8000c60 <__aeabi_fmul>
 800ff3e:	1c03      	adds	r3, r0, #0
 800ff40:	1c18      	adds	r0, r3, #0
 800ff42:	f7f0 faf1 	bl	8000528 <__aeabi_f2uiz>
 800ff46:	0003      	movs	r3, r0
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	4b0f      	ldr	r3, [pc, #60]	; (800ff88 <VRateSET_enter+0x60>)
 800ff4c:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,7,Set_V_Slope);
 800ff4e:	4b0e      	ldr	r3, [pc, #56]	; (800ff88 <VRateSET_enter+0x60>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	001a      	movs	r2, r3
 800ff56:	2107      	movs	r1, #7
 800ff58:	2001      	movs	r0, #1
 800ff5a:	f7fc fc41 	bl	800c7e0 <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 800ff5e:	f7fc fa9d 	bl	800c49c <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 800ff62:	4b0a      	ldr	r3, [pc, #40]	; (800ff8c <VRateSET_enter+0x64>)
 800ff64:	2201      	movs	r2, #1
 800ff66:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=0;//完成后设定，返回上一级
 800ff68:	4b09      	ldr	r3, [pc, #36]	; (800ff90 <VRateSET_enter+0x68>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 800ff6e:	4b09      	ldr	r3, [pc, #36]	; (800ff94 <VRateSET_enter+0x6c>)
 800ff70:	2206      	movs	r2, #6
 800ff72:	701a      	strb	r2, [r3, #0]
	Cursor_flash_off();
 800ff74:	f004 fa76 	bl	8014464 <Cursor_flash_off>
}
 800ff78:	46c0      	nop			; (mov r8, r8)
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	46c0      	nop			; (mov r8, r8)
 800ff80:	2000304c 	.word	0x2000304c
 800ff84:	41200000 	.word	0x41200000
 800ff88:	20003998 	.word	0x20003998
 800ff8c:	20002fd0 	.word	0x20002fd0
 800ff90:	200039f4 	.word	0x200039f4
 800ff94:	2000398e 	.word	0x2000398e

0800ff98 <Save_enter>:

static void Save_enter(void)
{
 800ff98:	b5b0      	push	{r4, r5, r7, lr}
 800ff9a:	af00      	add	r7, sp, #0
	Recall_Save_Current[Recall_Save_Number]=String_To_Float(String_Save_I);
	*/


	/*新的实现*/
	Recall_Save_Voltage[Recall_Save_Number]=String_to_float(String_Save_V);//将交互界面的数值进行转换
 800ff9c:	4b20      	ldr	r3, [pc, #128]	; (8010020 <Save_enter+0x88>)
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	001c      	movs	r4, r3
 800ffa2:	4b20      	ldr	r3, [pc, #128]	; (8010024 <Save_enter+0x8c>)
 800ffa4:	0018      	movs	r0, r3
 800ffa6:	f7fe f9b1 	bl	800e30c <String_to_float>
 800ffaa:	1c01      	adds	r1, r0, #0
 800ffac:	4b1e      	ldr	r3, [pc, #120]	; (8010028 <Save_enter+0x90>)
 800ffae:	00a2      	lsls	r2, r4, #2
 800ffb0:	50d1      	str	r1, [r2, r3]
	Recall_Save_Current[Recall_Save_Number]=String_to_float(String_Save_I);
 800ffb2:	4b1b      	ldr	r3, [pc, #108]	; (8010020 <Save_enter+0x88>)
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	001c      	movs	r4, r3
 800ffb8:	4b1c      	ldr	r3, [pc, #112]	; (801002c <Save_enter+0x94>)
 800ffba:	0018      	movs	r0, r3
 800ffbc:	f7fe f9a6 	bl	800e30c <String_to_float>
 800ffc0:	1c01      	adds	r1, r0, #0
 800ffc2:	4b1b      	ldr	r3, [pc, #108]	; (8010030 <Save_enter+0x98>)
 800ffc4:	00a2      	lsls	r2, r4, #2
 800ffc6:	50d1      	str	r1, [r2, r3]


	Recall_Save_Power[Recall_Save_Number]=Recall_Save_Voltage[Recall_Save_Number]*Recall_Save_Current[Recall_Save_Number];
 800ffc8:	4b15      	ldr	r3, [pc, #84]	; (8010020 <Save_enter+0x88>)
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	001a      	movs	r2, r3
 800ffce:	4b16      	ldr	r3, [pc, #88]	; (8010028 <Save_enter+0x90>)
 800ffd0:	0092      	lsls	r2, r2, #2
 800ffd2:	58d0      	ldr	r0, [r2, r3]
 800ffd4:	4b12      	ldr	r3, [pc, #72]	; (8010020 <Save_enter+0x88>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	001a      	movs	r2, r3
 800ffda:	4b15      	ldr	r3, [pc, #84]	; (8010030 <Save_enter+0x98>)
 800ffdc:	0092      	lsls	r2, r2, #2
 800ffde:	58d2      	ldr	r2, [r2, r3]
 800ffe0:	4b0f      	ldr	r3, [pc, #60]	; (8010020 <Save_enter+0x88>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	001c      	movs	r4, r3
 800ffe6:	1c11      	adds	r1, r2, #0
 800ffe8:	f7f0 fe3a 	bl	8000c60 <__aeabi_fmul>
 800ffec:	1c03      	adds	r3, r0, #0
 800ffee:	1c19      	adds	r1, r3, #0
 800fff0:	4b10      	ldr	r3, [pc, #64]	; (8010034 <Save_enter+0x9c>)
 800fff2:	00a2      	lsls	r2, r4, #2
 800fff4:	50d1      	str	r1, [r2, r3]
	AT25_Save_Recall_Save_VI(Recall_Save_Number);
 800fff6:	4b0a      	ldr	r3, [pc, #40]	; (8010020 <Save_enter+0x88>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	0018      	movs	r0, r3
 800fffc:	f7fc f94c 	bl	800c298 <AT25_Save_Recall_Save_VI>

	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 8010000:	4b0d      	ldr	r3, [pc, #52]	; (8010038 <Save_enter+0xa0>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d105      	bne.n	8010014 <Save_enter+0x7c>
 8010008:	4b0c      	ldr	r3, [pc, #48]	; (801003c <Save_enter+0xa4>)
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d101      	bne.n	8010014 <Save_enter+0x7c>
	{
		power_on();
 8010010:	f7fc fcc0 	bl	800c994 <power_on>
	}
	Cursor_Position=0;
 8010014:	4b0a      	ldr	r3, [pc, #40]	; (8010040 <Save_enter+0xa8>)
 8010016:	2200      	movs	r2, #0
 8010018:	701a      	strb	r2, [r3, #0]
}
 801001a:	46c0      	nop			; (mov r8, r8)
 801001c:	46bd      	mov	sp, r7
 801001e:	bdb0      	pop	{r4, r5, r7, pc}
 8010020:	2000398d 	.word	0x2000398d
 8010024:	2000301c 	.word	0x2000301c
 8010028:	20003a0c 	.word	0x20003a0c
 801002c:	20003028 	.word	0x20003028
 8010030:	20003a34 	.word	0x20003a34
 8010034:	20003a5c 	.word	0x20003a5c
 8010038:	20003989 	.word	0x20003989
 801003c:	200039e1 	.word	0x200039e1
 8010040:	2000398e 	.word	0x2000398e

08010044 <Load_enter>:

static void Load_enter(void)
{
 8010044:	b5b0      	push	{r4, r5, r7, lr}
 8010046:	af00      	add	r7, sp, #0

	xyz.coordinates3=1;
 8010048:	4b2e      	ldr	r3, [pc, #184]	; (8010104 <Load_enter+0xc0>)
 801004a:	2201      	movs	r2, #1
 801004c:	609a      	str	r2, [r3, #8]
	Recall_Save_Voltage[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 801004e:	4b2e      	ldr	r3, [pc, #184]	; (8010108 <Load_enter+0xc4>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	0018      	movs	r0, r3
 8010054:	f7fc f98c 	bl	800c370 <AT25_Save_Recall_Recall_VI>
 8010058:	0003      	movs	r3, r0
 801005a:	0018      	movs	r0, r3
 801005c:	f7f2 fed2 	bl	8002e04 <__aeabi_i2d>
 8010060:	2200      	movs	r2, #0
 8010062:	4b2a      	ldr	r3, [pc, #168]	; (801010c <Load_enter+0xc8>)
 8010064:	f7f1 fc7a 	bl	800195c <__aeabi_ddiv>
 8010068:	0002      	movs	r2, r0
 801006a:	000b      	movs	r3, r1
 801006c:	4926      	ldr	r1, [pc, #152]	; (8010108 <Load_enter+0xc4>)
 801006e:	7809      	ldrb	r1, [r1, #0]
 8010070:	000c      	movs	r4, r1
 8010072:	0010      	movs	r0, r2
 8010074:	0019      	movs	r1, r3
 8010076:	f7f2 ff63 	bl	8002f40 <__aeabi_d2f>
 801007a:	1c01      	adds	r1, r0, #0
 801007c:	4b24      	ldr	r3, [pc, #144]	; (8010110 <Load_enter+0xcc>)
 801007e:	00a2      	lsls	r2, r4, #2
 8010080:	50d1      	str	r1, [r2, r3]
	Set_Voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 8010082:	4b21      	ldr	r3, [pc, #132]	; (8010108 <Load_enter+0xc4>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	0018      	movs	r0, r3
 8010088:	f7fc f972 	bl	800c370 <AT25_Save_Recall_Recall_VI>
 801008c:	0003      	movs	r3, r0
 801008e:	001a      	movs	r2, r3
 8010090:	4b20      	ldr	r3, [pc, #128]	; (8010114 <Load_enter+0xd0>)
 8010092:	801a      	strh	r2, [r3, #0]


	xyz.coordinates3=2;
 8010094:	4b1b      	ldr	r3, [pc, #108]	; (8010104 <Load_enter+0xc0>)
 8010096:	2202      	movs	r2, #2
 8010098:	609a      	str	r2, [r3, #8]
	Recall_Save_Current[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 801009a:	4b1b      	ldr	r3, [pc, #108]	; (8010108 <Load_enter+0xc4>)
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	0018      	movs	r0, r3
 80100a0:	f7fc f966 	bl	800c370 <AT25_Save_Recall_Recall_VI>
 80100a4:	0003      	movs	r3, r0
 80100a6:	0018      	movs	r0, r3
 80100a8:	f7f2 feac 	bl	8002e04 <__aeabi_i2d>
 80100ac:	2200      	movs	r2, #0
 80100ae:	4b17      	ldr	r3, [pc, #92]	; (801010c <Load_enter+0xc8>)
 80100b0:	f7f1 fc54 	bl	800195c <__aeabi_ddiv>
 80100b4:	0002      	movs	r2, r0
 80100b6:	000b      	movs	r3, r1
 80100b8:	4913      	ldr	r1, [pc, #76]	; (8010108 <Load_enter+0xc4>)
 80100ba:	7809      	ldrb	r1, [r1, #0]
 80100bc:	000c      	movs	r4, r1
 80100be:	0010      	movs	r0, r2
 80100c0:	0019      	movs	r1, r3
 80100c2:	f7f2 ff3d 	bl	8002f40 <__aeabi_d2f>
 80100c6:	1c01      	adds	r1, r0, #0
 80100c8:	4b13      	ldr	r3, [pc, #76]	; (8010118 <Load_enter+0xd4>)
 80100ca:	00a2      	lsls	r2, r4, #2
 80100cc:	50d1      	str	r1, [r2, r3]
	Set_Current=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 80100ce:	4b0e      	ldr	r3, [pc, #56]	; (8010108 <Load_enter+0xc4>)
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	0018      	movs	r0, r3
 80100d4:	f7fc f94c 	bl	800c370 <AT25_Save_Recall_Recall_VI>
 80100d8:	0003      	movs	r3, r0
 80100da:	001a      	movs	r2, r3
 80100dc:	4b0f      	ldr	r3, [pc, #60]	; (801011c <Load_enter+0xd8>)
 80100de:	801a      	strh	r2, [r3, #0]


	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (Delay_Function_On_Off==Delay_Function_Off) )     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 80100e0:	4b0f      	ldr	r3, [pc, #60]	; (8010120 <Load_enter+0xdc>)
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d105      	bne.n	80100f4 <Load_enter+0xb0>
 80100e8:	4b0e      	ldr	r3, [pc, #56]	; (8010124 <Load_enter+0xe0>)
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d101      	bne.n	80100f4 <Load_enter+0xb0>
	{
		power_on();
 80100f0:	f7fc fc50 	bl	800c994 <power_on>
	}

	Cursor_Position=0;//光标复位
 80100f4:	4b0c      	ldr	r3, [pc, #48]	; (8010128 <Load_enter+0xe4>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	701a      	strb	r2, [r3, #0]
	Cursor_flash_off();
 80100fa:	f004 f9b3 	bl	8014464 <Cursor_flash_off>

}
 80100fe:	46c0      	nop			; (mov r8, r8)
 8010100:	46bd      	mov	sp, r7
 8010102:	bdb0      	pop	{r4, r5, r7, pc}
 8010104:	200039f4 	.word	0x200039f4
 8010108:	2000398d 	.word	0x2000398d
 801010c:	40590000 	.word	0x40590000
 8010110:	20003a0c 	.word	0x20003a0c
 8010114:	20002fd8 	.word	0x20002fd8
 8010118:	20003a34 	.word	0x20003a34
 801011c:	20002fda 	.word	0x20002fda
 8010120:	20003989 	.word	0x20003989
 8010124:	200039e1 	.word	0x200039e1
 8010128:	2000398e 	.word	0x2000398e

0801012c <Delay_enter>:

static void Delay_enter(void)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	af00      	add	r7, sp, #0

	Delay_s=(String_Delay[0] - '0') * 1000 + (String_Delay[1] - '0')*100+ (String_Delay[2] - '0')*10+ (String_Delay[3] - '0');
 8010130:	4b35      	ldr	r3, [pc, #212]	; (8010208 <Delay_enter+0xdc>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	3b30      	subs	r3, #48	; 0x30
 8010136:	b29b      	uxth	r3, r3
 8010138:	22fa      	movs	r2, #250	; 0xfa
 801013a:	0092      	lsls	r2, r2, #2
 801013c:	4353      	muls	r3, r2
 801013e:	b29a      	uxth	r2, r3
 8010140:	4b31      	ldr	r3, [pc, #196]	; (8010208 <Delay_enter+0xdc>)
 8010142:	785b      	ldrb	r3, [r3, #1]
 8010144:	3b30      	subs	r3, #48	; 0x30
 8010146:	b29b      	uxth	r3, r3
 8010148:	2164      	movs	r1, #100	; 0x64
 801014a:	434b      	muls	r3, r1
 801014c:	b29b      	uxth	r3, r3
 801014e:	18d3      	adds	r3, r2, r3
 8010150:	b29a      	uxth	r2, r3
 8010152:	4b2d      	ldr	r3, [pc, #180]	; (8010208 <Delay_enter+0xdc>)
 8010154:	789b      	ldrb	r3, [r3, #2]
 8010156:	3b30      	subs	r3, #48	; 0x30
 8010158:	b29b      	uxth	r3, r3
 801015a:	1c19      	adds	r1, r3, #0
 801015c:	0089      	lsls	r1, r1, #2
 801015e:	18cb      	adds	r3, r1, r3
 8010160:	18db      	adds	r3, r3, r3
 8010162:	b29b      	uxth	r3, r3
 8010164:	18d3      	adds	r3, r2, r3
 8010166:	b29a      	uxth	r2, r3
 8010168:	4b27      	ldr	r3, [pc, #156]	; (8010208 <Delay_enter+0xdc>)
 801016a:	78db      	ldrb	r3, [r3, #3]
 801016c:	b29b      	uxth	r3, r3
 801016e:	18d3      	adds	r3, r2, r3
 8010170:	b29b      	uxth	r3, r3
 8010172:	3b30      	subs	r3, #48	; 0x30
 8010174:	b29a      	uxth	r2, r3
 8010176:	4b25      	ldr	r3, [pc, #148]	; (801020c <Delay_enter+0xe0>)
 8010178:	801a      	strh	r2, [r3, #0]
	Delay_ms=(String_Delay[5] - '0') * 100 + (String_Delay[6] - '0')*10+ (String_Delay[7] - '0');
 801017a:	4b23      	ldr	r3, [pc, #140]	; (8010208 <Delay_enter+0xdc>)
 801017c:	795b      	ldrb	r3, [r3, #5]
 801017e:	3b30      	subs	r3, #48	; 0x30
 8010180:	b29b      	uxth	r3, r3
 8010182:	2264      	movs	r2, #100	; 0x64
 8010184:	4353      	muls	r3, r2
 8010186:	b29a      	uxth	r2, r3
 8010188:	4b1f      	ldr	r3, [pc, #124]	; (8010208 <Delay_enter+0xdc>)
 801018a:	799b      	ldrb	r3, [r3, #6]
 801018c:	3b30      	subs	r3, #48	; 0x30
 801018e:	b29b      	uxth	r3, r3
 8010190:	1c19      	adds	r1, r3, #0
 8010192:	0089      	lsls	r1, r1, #2
 8010194:	18cb      	adds	r3, r1, r3
 8010196:	18db      	adds	r3, r3, r3
 8010198:	b29b      	uxth	r3, r3
 801019a:	18d3      	adds	r3, r2, r3
 801019c:	b29a      	uxth	r2, r3
 801019e:	4b1a      	ldr	r3, [pc, #104]	; (8010208 <Delay_enter+0xdc>)
 80101a0:	79db      	ldrb	r3, [r3, #7]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	18d3      	adds	r3, r2, r3
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	3b30      	subs	r3, #48	; 0x30
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	4b18      	ldr	r3, [pc, #96]	; (8010210 <Delay_enter+0xe4>)
 80101ae:	801a      	strh	r2, [r3, #0]

	Keys_Encoder_Mode = Encoder_Mode;
 80101b0:	4b18      	ldr	r3, [pc, #96]	; (8010214 <Delay_enter+0xe8>)
 80101b2:	2201      	movs	r2, #1
 80101b4:	701a      	strb	r2, [r3, #0]
	if((Delay_s == 0) && (Delay_ms == 0)) Delay_Function_On_Off = Delay_Function_Off;
 80101b6:	4b15      	ldr	r3, [pc, #84]	; (801020c <Delay_enter+0xe0>)
 80101b8:	881b      	ldrh	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d107      	bne.n	80101ce <Delay_enter+0xa2>
 80101be:	4b14      	ldr	r3, [pc, #80]	; (8010210 <Delay_enter+0xe4>)
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d103      	bne.n	80101ce <Delay_enter+0xa2>
 80101c6:	4b14      	ldr	r3, [pc, #80]	; (8010218 <Delay_enter+0xec>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	701a      	strb	r2, [r3, #0]
 80101cc:	e002      	b.n	80101d4 <Delay_enter+0xa8>
	else    							  Delay_Function_On_Off = Delay_Function_On;
 80101ce:	4b12      	ldr	r3, [pc, #72]	; (8010218 <Delay_enter+0xec>)
 80101d0:	2201      	movs	r2, #1
 80101d2:	701a      	strb	r2, [r3, #0]

	AT25_Save_Delay();
 80101d4:	f7fc f90c 	bl	800c3f0 <AT25_Save_Delay>

	Third_Menu_Flag=1;
 80101d8:	4b10      	ldr	r3, [pc, #64]	; (801021c <Delay_enter+0xf0>)
 80101da:	2201      	movs	r2, #1
 80101dc:	701a      	strb	r2, [r3, #0]

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 80101de:	4b10      	ldr	r3, [pc, #64]	; (8010220 <Delay_enter+0xf4>)
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	2b03      	cmp	r3, #3
 80101e4:	d103      	bne.n	80101ee <Delay_enter+0xc2>
 80101e6:	4b0e      	ldr	r3, [pc, #56]	; (8010220 <Delay_enter+0xf4>)
 80101e8:	2201      	movs	r2, #1
 80101ea:	609a      	str	r2, [r3, #8]
 80101ec:	e004      	b.n	80101f8 <Delay_enter+0xcc>
	else xyz.coordinates3++;//完成后设定，进入下一级
 80101ee:	4b0c      	ldr	r3, [pc, #48]	; (8010220 <Delay_enter+0xf4>)
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	1c5a      	adds	r2, r3, #1
 80101f4:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <Delay_enter+0xf4>)
 80101f6:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 80101f8:	4b0a      	ldr	r3, [pc, #40]	; (8010224 <Delay_enter+0xf8>)
 80101fa:	2206      	movs	r2, #6
 80101fc:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 80101fe:	f004 f967 	bl	80144d0 <Cursor_flash_on>

}
 8010202:	46c0      	nop			; (mov r8, r8)
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	20003010 	.word	0x20003010
 801020c:	20003994 	.word	0x20003994
 8010210:	20003996 	.word	0x20003996
 8010214:	20002fd2 	.word	0x20002fd2
 8010218:	200039e1 	.word	0x200039e1
 801021c:	20002fd0 	.word	0x20002fd0
 8010220:	200039f4 	.word	0x200039f4
 8010224:	2000398e 	.word	0x2000398e

08010228 <Cycle_enter>:

static void Cycle_enter(void)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	af00      	add	r7, sp, #0
	//计算Cycle功能的导通和关断时间，加以限制并存储
	Cycle_On_s = (String_Cycle_On[0] - '0') * 1000 + (String_Cycle_On[1] - '0') * 100 + (String_Cycle_On[2] - '0') * 10 + (String_Cycle_On[3] - '0');
 801022c:	4b81      	ldr	r3, [pc, #516]	; (8010434 <Cycle_enter+0x20c>)
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	3b30      	subs	r3, #48	; 0x30
 8010232:	b29b      	uxth	r3, r3
 8010234:	22fa      	movs	r2, #250	; 0xfa
 8010236:	0092      	lsls	r2, r2, #2
 8010238:	4353      	muls	r3, r2
 801023a:	b29a      	uxth	r2, r3
 801023c:	4b7d      	ldr	r3, [pc, #500]	; (8010434 <Cycle_enter+0x20c>)
 801023e:	785b      	ldrb	r3, [r3, #1]
 8010240:	3b30      	subs	r3, #48	; 0x30
 8010242:	b29b      	uxth	r3, r3
 8010244:	2164      	movs	r1, #100	; 0x64
 8010246:	434b      	muls	r3, r1
 8010248:	b29b      	uxth	r3, r3
 801024a:	18d3      	adds	r3, r2, r3
 801024c:	b29a      	uxth	r2, r3
 801024e:	4b79      	ldr	r3, [pc, #484]	; (8010434 <Cycle_enter+0x20c>)
 8010250:	789b      	ldrb	r3, [r3, #2]
 8010252:	3b30      	subs	r3, #48	; 0x30
 8010254:	b29b      	uxth	r3, r3
 8010256:	1c19      	adds	r1, r3, #0
 8010258:	0089      	lsls	r1, r1, #2
 801025a:	18cb      	adds	r3, r1, r3
 801025c:	18db      	adds	r3, r3, r3
 801025e:	b29b      	uxth	r3, r3
 8010260:	18d3      	adds	r3, r2, r3
 8010262:	b29a      	uxth	r2, r3
 8010264:	4b73      	ldr	r3, [pc, #460]	; (8010434 <Cycle_enter+0x20c>)
 8010266:	78db      	ldrb	r3, [r3, #3]
 8010268:	b29b      	uxth	r3, r3
 801026a:	18d3      	adds	r3, r2, r3
 801026c:	b29b      	uxth	r3, r3
 801026e:	3b30      	subs	r3, #48	; 0x30
 8010270:	b29a      	uxth	r2, r3
 8010272:	4b71      	ldr	r3, [pc, #452]	; (8010438 <Cycle_enter+0x210>)
 8010274:	801a      	strh	r2, [r3, #0]
	Cycle_On_ms = (String_Cycle_On[5] - '0') * 100 + (String_Cycle_On[6] - '0') * 10 + (String_Cycle_On[7] - '0');
 8010276:	4b6f      	ldr	r3, [pc, #444]	; (8010434 <Cycle_enter+0x20c>)
 8010278:	795b      	ldrb	r3, [r3, #5]
 801027a:	3b30      	subs	r3, #48	; 0x30
 801027c:	b29b      	uxth	r3, r3
 801027e:	2264      	movs	r2, #100	; 0x64
 8010280:	4353      	muls	r3, r2
 8010282:	b29a      	uxth	r2, r3
 8010284:	4b6b      	ldr	r3, [pc, #428]	; (8010434 <Cycle_enter+0x20c>)
 8010286:	799b      	ldrb	r3, [r3, #6]
 8010288:	3b30      	subs	r3, #48	; 0x30
 801028a:	b29b      	uxth	r3, r3
 801028c:	1c19      	adds	r1, r3, #0
 801028e:	0089      	lsls	r1, r1, #2
 8010290:	18cb      	adds	r3, r1, r3
 8010292:	18db      	adds	r3, r3, r3
 8010294:	b29b      	uxth	r3, r3
 8010296:	18d3      	adds	r3, r2, r3
 8010298:	b29a      	uxth	r2, r3
 801029a:	4b66      	ldr	r3, [pc, #408]	; (8010434 <Cycle_enter+0x20c>)
 801029c:	79db      	ldrb	r3, [r3, #7]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	18d3      	adds	r3, r2, r3
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	3b30      	subs	r3, #48	; 0x30
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	4b64      	ldr	r3, [pc, #400]	; (801043c <Cycle_enter+0x214>)
 80102aa:	801a      	strh	r2, [r3, #0]

	Cycle_Close_s = (String_Cycle_Close[0] - '0') * 1000 + (String_Cycle_Close[1] - '0') * 100 + (String_Cycle_Close[2] - '0') * 10 + (String_Cycle_Close[3] - '0');
 80102ac:	4b64      	ldr	r3, [pc, #400]	; (8010440 <Cycle_enter+0x218>)
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	3b30      	subs	r3, #48	; 0x30
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	22fa      	movs	r2, #250	; 0xfa
 80102b6:	0092      	lsls	r2, r2, #2
 80102b8:	4353      	muls	r3, r2
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	4b60      	ldr	r3, [pc, #384]	; (8010440 <Cycle_enter+0x218>)
 80102be:	785b      	ldrb	r3, [r3, #1]
 80102c0:	3b30      	subs	r3, #48	; 0x30
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	2164      	movs	r1, #100	; 0x64
 80102c6:	434b      	muls	r3, r1
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	18d3      	adds	r3, r2, r3
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	4b5c      	ldr	r3, [pc, #368]	; (8010440 <Cycle_enter+0x218>)
 80102d0:	789b      	ldrb	r3, [r3, #2]
 80102d2:	3b30      	subs	r3, #48	; 0x30
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	1c19      	adds	r1, r3, #0
 80102d8:	0089      	lsls	r1, r1, #2
 80102da:	18cb      	adds	r3, r1, r3
 80102dc:	18db      	adds	r3, r3, r3
 80102de:	b29b      	uxth	r3, r3
 80102e0:	18d3      	adds	r3, r2, r3
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	4b56      	ldr	r3, [pc, #344]	; (8010440 <Cycle_enter+0x218>)
 80102e6:	78db      	ldrb	r3, [r3, #3]
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	18d3      	adds	r3, r2, r3
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	3b30      	subs	r3, #48	; 0x30
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	4b54      	ldr	r3, [pc, #336]	; (8010444 <Cycle_enter+0x21c>)
 80102f4:	801a      	strh	r2, [r3, #0]
	Cycle_Close_ms = (String_Cycle_Close[5] - '0') * 100 + (String_Cycle_Close[6] - '0') * 10 + (String_Cycle_Close[7] - '0');
 80102f6:	4b52      	ldr	r3, [pc, #328]	; (8010440 <Cycle_enter+0x218>)
 80102f8:	795b      	ldrb	r3, [r3, #5]
 80102fa:	3b30      	subs	r3, #48	; 0x30
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	2264      	movs	r2, #100	; 0x64
 8010300:	4353      	muls	r3, r2
 8010302:	b29a      	uxth	r2, r3
 8010304:	4b4e      	ldr	r3, [pc, #312]	; (8010440 <Cycle_enter+0x218>)
 8010306:	799b      	ldrb	r3, [r3, #6]
 8010308:	3b30      	subs	r3, #48	; 0x30
 801030a:	b29b      	uxth	r3, r3
 801030c:	1c19      	adds	r1, r3, #0
 801030e:	0089      	lsls	r1, r1, #2
 8010310:	18cb      	adds	r3, r1, r3
 8010312:	18db      	adds	r3, r3, r3
 8010314:	b29b      	uxth	r3, r3
 8010316:	18d3      	adds	r3, r2, r3
 8010318:	b29a      	uxth	r2, r3
 801031a:	4b49      	ldr	r3, [pc, #292]	; (8010440 <Cycle_enter+0x218>)
 801031c:	79db      	ldrb	r3, [r3, #7]
 801031e:	b29b      	uxth	r3, r3
 8010320:	18d3      	adds	r3, r2, r3
 8010322:	b29b      	uxth	r3, r3
 8010324:	3b30      	subs	r3, #48	; 0x30
 8010326:	b29a      	uxth	r2, r3
 8010328:	4b47      	ldr	r3, [pc, #284]	; (8010448 <Cycle_enter+0x220>)
 801032a:	801a      	strh	r2, [r3, #0]
	//最短也是5Hz的波
	if ((Cycle_On_s == 0) && (Cycle_On_ms > 0))
 801032c:	4b42      	ldr	r3, [pc, #264]	; (8010438 <Cycle_enter+0x210>)
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d109      	bne.n	8010348 <Cycle_enter+0x120>
 8010334:	4b41      	ldr	r3, [pc, #260]	; (801043c <Cycle_enter+0x214>)
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d005      	beq.n	8010348 <Cycle_enter+0x120>
	{
		Cycle_On_s = 1;
 801033c:	4b3e      	ldr	r3, [pc, #248]	; (8010438 <Cycle_enter+0x210>)
 801033e:	2201      	movs	r2, #1
 8010340:	801a      	strh	r2, [r3, #0]
		Cycle_On_ms = 0;
 8010342:	4b3e      	ldr	r3, [pc, #248]	; (801043c <Cycle_enter+0x214>)
 8010344:	2200      	movs	r2, #0
 8010346:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_On_s > 9999) Cycle_On_s = 9999;
 8010348:	4b3b      	ldr	r3, [pc, #236]	; (8010438 <Cycle_enter+0x210>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	4a3f      	ldr	r2, [pc, #252]	; (801044c <Cycle_enter+0x224>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d902      	bls.n	8010358 <Cycle_enter+0x130>
 8010352:	4b39      	ldr	r3, [pc, #228]	; (8010438 <Cycle_enter+0x210>)
 8010354:	4a3d      	ldr	r2, [pc, #244]	; (801044c <Cycle_enter+0x224>)
 8010356:	801a      	strh	r2, [r3, #0]
	if (Cycle_On_ms > 1000) Cycle_On_ms = 1000;
 8010358:	4b38      	ldr	r3, [pc, #224]	; (801043c <Cycle_enter+0x214>)
 801035a:	881a      	ldrh	r2, [r3, #0]
 801035c:	23fa      	movs	r3, #250	; 0xfa
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	429a      	cmp	r2, r3
 8010362:	d903      	bls.n	801036c <Cycle_enter+0x144>
 8010364:	4b35      	ldr	r3, [pc, #212]	; (801043c <Cycle_enter+0x214>)
 8010366:	22fa      	movs	r2, #250	; 0xfa
 8010368:	0092      	lsls	r2, r2, #2
 801036a:	801a      	strh	r2, [r3, #0]
	if ((Cycle_Close_s == 0) && (Cycle_Close_ms > 0))
 801036c:	4b35      	ldr	r3, [pc, #212]	; (8010444 <Cycle_enter+0x21c>)
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d109      	bne.n	8010388 <Cycle_enter+0x160>
 8010374:	4b34      	ldr	r3, [pc, #208]	; (8010448 <Cycle_enter+0x220>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d005      	beq.n	8010388 <Cycle_enter+0x160>
	{
		Cycle_Close_s = 1;
 801037c:	4b31      	ldr	r3, [pc, #196]	; (8010444 <Cycle_enter+0x21c>)
 801037e:	2201      	movs	r2, #1
 8010380:	801a      	strh	r2, [r3, #0]
		Cycle_Close_ms = 0;
 8010382:	4b31      	ldr	r3, [pc, #196]	; (8010448 <Cycle_enter+0x220>)
 8010384:	2200      	movs	r2, #0
 8010386:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_Close_s > 9999) Cycle_Close_s = 9999;
 8010388:	4b2e      	ldr	r3, [pc, #184]	; (8010444 <Cycle_enter+0x21c>)
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	4a2f      	ldr	r2, [pc, #188]	; (801044c <Cycle_enter+0x224>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d902      	bls.n	8010398 <Cycle_enter+0x170>
 8010392:	4b2c      	ldr	r3, [pc, #176]	; (8010444 <Cycle_enter+0x21c>)
 8010394:	4a2d      	ldr	r2, [pc, #180]	; (801044c <Cycle_enter+0x224>)
 8010396:	801a      	strh	r2, [r3, #0]
	if (Cycle_Close_ms > 1000) Cycle_On_ms = 1000;
 8010398:	4b2b      	ldr	r3, [pc, #172]	; (8010448 <Cycle_enter+0x220>)
 801039a:	881a      	ldrh	r2, [r3, #0]
 801039c:	23fa      	movs	r3, #250	; 0xfa
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d903      	bls.n	80103ac <Cycle_enter+0x184>
 80103a4:	4b25      	ldr	r3, [pc, #148]	; (801043c <Cycle_enter+0x214>)
 80103a6:	22fa      	movs	r2, #250	; 0xfa
 80103a8:	0092      	lsls	r2, r2, #2
 80103aa:	801a      	strh	r2, [r3, #0]
	//判断是否为Cycle功能输出模式
	if(((Cycle_On_s == 0) && (Cycle_On_ms == 0)) || ((Cycle_Close_s == 0) && (Cycle_Close_ms == 0)))
 80103ac:	4b22      	ldr	r3, [pc, #136]	; (8010438 <Cycle_enter+0x210>)
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d103      	bne.n	80103bc <Cycle_enter+0x194>
 80103b4:	4b21      	ldr	r3, [pc, #132]	; (801043c <Cycle_enter+0x214>)
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d007      	beq.n	80103cc <Cycle_enter+0x1a4>
 80103bc:	4b21      	ldr	r3, [pc, #132]	; (8010444 <Cycle_enter+0x21c>)
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d107      	bne.n	80103d4 <Cycle_enter+0x1ac>
 80103c4:	4b20      	ldr	r3, [pc, #128]	; (8010448 <Cycle_enter+0x220>)
 80103c6:	881b      	ldrh	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d103      	bne.n	80103d4 <Cycle_enter+0x1ac>
	{
		Cycle_Function_On_Off = Cycle_Function_Off;
 80103cc:	4b20      	ldr	r3, [pc, #128]	; (8010450 <Cycle_enter+0x228>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	701a      	strb	r2, [r3, #0]
 80103d2:	e012      	b.n	80103fa <Cycle_enter+0x1d2>
	}
	else if( (Cycle_On_s != 0 || Cycle_On_ms != 0) && (Cycle_Close_s != 0 || Cycle_Close_ms != 0) )
 80103d4:	4b18      	ldr	r3, [pc, #96]	; (8010438 <Cycle_enter+0x210>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d103      	bne.n	80103e4 <Cycle_enter+0x1bc>
 80103dc:	4b17      	ldr	r3, [pc, #92]	; (801043c <Cycle_enter+0x214>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00a      	beq.n	80103fa <Cycle_enter+0x1d2>
 80103e4:	4b17      	ldr	r3, [pc, #92]	; (8010444 <Cycle_enter+0x21c>)
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d103      	bne.n	80103f4 <Cycle_enter+0x1cc>
 80103ec:	4b16      	ldr	r3, [pc, #88]	; (8010448 <Cycle_enter+0x220>)
 80103ee:	881b      	ldrh	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <Cycle_enter+0x1d2>
	{
		Cycle_Function_On_Off = Cycle_Function_On;
 80103f4:	4b16      	ldr	r3, [pc, #88]	; (8010450 <Cycle_enter+0x228>)
 80103f6:	2201      	movs	r2, #1
 80103f8:	701a      	strb	r2, [r3, #0]

	}
	AT25_Save_Cycle();
 80103fa:	f7fc f813 	bl	800c424 <AT25_Save_Cycle>


	if(OUTPUT_NOT_OUTPUT == OUTPUT)
 80103fe:	4b15      	ldr	r3, [pc, #84]	; (8010454 <Cycle_enter+0x22c>)
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	2b01      	cmp	r3, #1
 8010404:	d101      	bne.n	801040a <Cycle_enter+0x1e2>
	{
		/*先输出零，延时一段时间后开始循环输出*/
		Output_Zero();
 8010406:	f7fc fb01 	bl	800ca0c <Output_Zero>

	}

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 801040a:	4b13      	ldr	r3, [pc, #76]	; (8010458 <Cycle_enter+0x230>)
 801040c:	689b      	ldr	r3, [r3, #8]
 801040e:	2b03      	cmp	r3, #3
 8010410:	d103      	bne.n	801041a <Cycle_enter+0x1f2>
 8010412:	4b11      	ldr	r3, [pc, #68]	; (8010458 <Cycle_enter+0x230>)
 8010414:	2201      	movs	r2, #1
 8010416:	609a      	str	r2, [r3, #8]
 8010418:	e004      	b.n	8010424 <Cycle_enter+0x1fc>
	else xyz.coordinates3++;//完成后设定，进入下一级
 801041a:	4b0f      	ldr	r3, [pc, #60]	; (8010458 <Cycle_enter+0x230>)
 801041c:	689b      	ldr	r3, [r3, #8]
 801041e:	1c5a      	adds	r2, r3, #1
 8010420:	4b0d      	ldr	r3, [pc, #52]	; (8010458 <Cycle_enter+0x230>)
 8010422:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <Cycle_enter+0x234>)
 8010426:	2206      	movs	r2, #6
 8010428:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 801042a:	f004 f851 	bl	80144d0 <Cursor_flash_on>
}
 801042e:	46c0      	nop			; (mov r8, r8)
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	20002ff8 	.word	0x20002ff8
 8010438:	20003990 	.word	0x20003990
 801043c:	20002fd4 	.word	0x20002fd4
 8010440:	20003004 	.word	0x20003004
 8010444:	20003992 	.word	0x20003992
 8010448:	20002fd6 	.word	0x20002fd6
 801044c:	0000270f 	.word	0x0000270f
 8010450:	200039e0 	.word	0x200039e0
 8010454:	20003989 	.word	0x20003989
 8010458:	200039f4 	.word	0x200039f4
 801045c:	2000398e 	.word	0x2000398e

08010460 <Reset_enter>:

static void Reset_enter(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0

	AT25_Reset();
 8010464:	f7fc f8f6 	bl	800c654 <AT25_Reset>

	static uint8_t count=1;

	if(count==3)
 8010468:	4b0e      	ldr	r3, [pc, #56]	; (80104a4 <Reset_enter+0x44>)
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b03      	cmp	r3, #3
 801046e:	d104      	bne.n	801047a <Reset_enter+0x1a>
	{
		count=1;
 8010470:	4b0c      	ldr	r3, [pc, #48]	; (80104a4 <Reset_enter+0x44>)
 8010472:	2201      	movs	r2, #1
 8010474:	701a      	strb	r2, [r3, #0]
		NVIC_SystemReset();
 8010476:	f7fd ff37 	bl	800e2e8 <__NVIC_SystemReset>
	}
	else if(count==2)
 801047a:	4b0a      	ldr	r3, [pc, #40]	; (80104a4 <Reset_enter+0x44>)
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	2b02      	cmp	r3, #2
 8010480:	d104      	bne.n	801048c <Reset_enter+0x2c>
	{
		DAC_Cmd_send(1,12,0);
 8010482:	2200      	movs	r2, #0
 8010484:	210c      	movs	r1, #12
 8010486:	2001      	movs	r0, #1
 8010488:	f7fc f9aa 	bl	800c7e0 <DAC_Cmd_send>

	}

	Cursor_flash_off();
 801048c:	f003 ffea 	bl	8014464 <Cursor_flash_off>

	count++;
 8010490:	4b04      	ldr	r3, [pc, #16]	; (80104a4 <Reset_enter+0x44>)
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	3301      	adds	r3, #1
 8010496:	b2da      	uxtb	r2, r3
 8010498:	4b02      	ldr	r3, [pc, #8]	; (80104a4 <Reset_enter+0x44>)
 801049a:	701a      	strb	r2, [r3, #0]
}
 801049c:	46c0      	nop			; (mov r8, r8)
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	46c0      	nop			; (mov r8, r8)
 80104a4:	20002fe2 	.word	0x20002fe2

080104a8 <Sample_show_enter>:
{
	;
}

static void Sample_show_enter(void)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0

	static uint8_t count=1;
	if(count==1)
 80104ac:	4b0f      	ldr	r3, [pc, #60]	; (80104ec <Sample_show_enter+0x44>)
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d108      	bne.n	80104c6 <Sample_show_enter+0x1e>
	{
		count=2;
 80104b4:	4b0d      	ldr	r3, [pc, #52]	; (80104ec <Sample_show_enter+0x44>)
 80104b6:	2202      	movs	r2, #2
 80104b8:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x00);
 80104ba:	2200      	movs	r2, #0
 80104bc:	2102      	movs	r1, #2
 80104be:	2001      	movs	r0, #1
 80104c0:	f7fc f98e 	bl	800c7e0 <DAC_Cmd_send>
 80104c4:	e00b      	b.n	80104de <Sample_show_enter+0x36>
	}
	else if(count==2)
 80104c6:	4b09      	ldr	r3, [pc, #36]	; (80104ec <Sample_show_enter+0x44>)
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d107      	bne.n	80104de <Sample_show_enter+0x36>
	{
		count=1;
 80104ce:	4b07      	ldr	r3, [pc, #28]	; (80104ec <Sample_show_enter+0x44>)
 80104d0:	2201      	movs	r2, #1
 80104d2:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x01);
 80104d4:	2201      	movs	r2, #1
 80104d6:	2102      	movs	r1, #2
 80104d8:	2001      	movs	r0, #1
 80104da:	f7fc f981 	bl	800c7e0 <DAC_Cmd_send>
	}
	Shift_Not_Shift=Not_Shift;
 80104de:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <Sample_show_enter+0x48>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	701a      	strb	r2, [r3, #0]
}
 80104e4:	46c0      	nop			; (mov r8, r8)
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	46c0      	nop			; (mov r8, r8)
 80104ec:	20002fe3 	.word	0x20002fe3
 80104f0:	20003987 	.word	0x20003987

080104f4 <Key_Enter>:
 * @brief  按键Enter的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Enter(void)
{
 80104f4:	b5b0      	push	{r4, r5, r7, lr}
 80104f6:	af00      	add	r7, sp, #0
	if(LOCK_UNLOCK == UNLOCK)
 80104f8:	4bbf      	ldr	r3, [pc, #764]	; (80107f8 <Key_Enter+0x304>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d000      	beq.n	8010502 <Key_Enter+0xe>
 8010500:	e1e9      	b.n	80108d6 <Key_Enter+0x3e2>
	{
		if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010502:	4bbe      	ldr	r3, [pc, #760]	; (80107fc <Key_Enter+0x308>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d10c      	bne.n	8010524 <Key_Enter+0x30>
 801050a:	4bbc      	ldr	r3, [pc, #752]	; (80107fc <Key_Enter+0x308>)
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d108      	bne.n	8010524 <Key_Enter+0x30>
 8010512:	4bba      	ldr	r3, [pc, #744]	; (80107fc <Key_Enter+0x308>)
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d104      	bne.n	8010524 <Key_Enter+0x30>
		{
			DAC_Cmd_send(1,2,0x01);
 801051a:	2201      	movs	r2, #1
 801051c:	2102      	movs	r1, #2
 801051e:	2001      	movs	r0, #1
 8010520:	f7fc f95e 	bl	800c7e0 <DAC_Cmd_send>
		}
		/*first menu enter second menu*/
		if( xyz.coordinates1==1 && (xyz.coordinates3==0) )//当处于第一级菜单,按下enter进入二级菜单
 8010524:	4bb5      	ldr	r3, [pc, #724]	; (80107fc <Key_Enter+0x308>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b01      	cmp	r3, #1
 801052a:	d106      	bne.n	801053a <Key_Enter+0x46>
 801052c:	4bb3      	ldr	r3, [pc, #716]	; (80107fc <Key_Enter+0x308>)
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d102      	bne.n	801053a <Key_Enter+0x46>
		{
			enter_second_menu();
 8010534:	f7ff fb04 	bl	800fb40 <enter_second_menu>
			return;
 8010538:	e1cd      	b.n	80108d6 <Key_Enter+0x3e2>
		}
		/*I——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) )//I_set 按下enter
 801053a:	4bb0      	ldr	r3, [pc, #704]	; (80107fc <Key_Enter+0x308>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	2b02      	cmp	r3, #2
 8010540:	d109      	bne.n	8010556 <Key_Enter+0x62>
 8010542:	4bae      	ldr	r3, [pc, #696]	; (80107fc <Key_Enter+0x308>)
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	2b01      	cmp	r3, #1
 8010548:	d105      	bne.n	8010556 <Key_Enter+0x62>
 801054a:	4bac      	ldr	r3, [pc, #688]	; (80107fc <Key_Enter+0x308>)
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <Key_Enter+0x62>
		{
			ISET_enter();
 8010552:	f7ff fb25 	bl	800fba0 <ISET_enter>
		}
		/*V——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) )//V_set 按下enter
 8010556:	4ba9      	ldr	r3, [pc, #676]	; (80107fc <Key_Enter+0x308>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b02      	cmp	r3, #2
 801055c:	d109      	bne.n	8010572 <Key_Enter+0x7e>
 801055e:	4ba7      	ldr	r3, [pc, #668]	; (80107fc <Key_Enter+0x308>)
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	2b02      	cmp	r3, #2
 8010564:	d105      	bne.n	8010572 <Key_Enter+0x7e>
 8010566:	4ba5      	ldr	r3, [pc, #660]	; (80107fc <Key_Enter+0x308>)
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d101      	bne.n	8010572 <Key_Enter+0x7e>
		{
			VSET_enter();
 801056e:	f7ff fbb7 	bl	800fce0 <VSET_enter>
		}
		/*AD GAIN FRQ enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))//GAIN
 8010572:	4ba2      	ldr	r3, [pc, #648]	; (80107fc <Key_Enter+0x308>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2b01      	cmp	r3, #1
 8010578:	d109      	bne.n	801058e <Key_Enter+0x9a>
 801057a:	4ba0      	ldr	r3, [pc, #640]	; (80107fc <Key_Enter+0x308>)
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	2b05      	cmp	r3, #5
 8010580:	d105      	bne.n	801058e <Key_Enter+0x9a>
 8010582:	4b9e      	ldr	r3, [pc, #632]	; (80107fc <Key_Enter+0x308>)
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	2b01      	cmp	r3, #1
 8010588:	d101      	bne.n	801058e <Key_Enter+0x9a>
		{
			Password_enter();
 801058a:	f7ff fc39 	bl	800fe00 <Password_enter>
		}
		/*rate set*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) )//i rate
 801058e:	4b9b      	ldr	r3, [pc, #620]	; (80107fc <Key_Enter+0x308>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2b01      	cmp	r3, #1
 8010594:	d109      	bne.n	80105aa <Key_Enter+0xb6>
 8010596:	4b99      	ldr	r3, [pc, #612]	; (80107fc <Key_Enter+0x308>)
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	2b02      	cmp	r3, #2
 801059c:	d105      	bne.n	80105aa <Key_Enter+0xb6>
 801059e:	4b97      	ldr	r3, [pc, #604]	; (80107fc <Key_Enter+0x308>)
 80105a0:	689b      	ldr	r3, [r3, #8]
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d101      	bne.n	80105aa <Key_Enter+0xb6>
		{
			IRateSET_enter();
 80105a6:	f7ff fc89 	bl	800febc <IRateSET_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) )//v rate
 80105aa:	4b94      	ldr	r3, [pc, #592]	; (80107fc <Key_Enter+0x308>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d109      	bne.n	80105c6 <Key_Enter+0xd2>
 80105b2:	4b92      	ldr	r3, [pc, #584]	; (80107fc <Key_Enter+0x308>)
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	2b02      	cmp	r3, #2
 80105b8:	d105      	bne.n	80105c6 <Key_Enter+0xd2>
 80105ba:	4b90      	ldr	r3, [pc, #576]	; (80107fc <Key_Enter+0x308>)
 80105bc:	689b      	ldr	r3, [r3, #8]
 80105be:	2b02      	cmp	r3, #2
 80105c0:	d101      	bne.n	80105c6 <Key_Enter+0xd2>
		{
			VRateSET_enter();
 80105c2:	f7ff fcb1 	bl	800ff28 <VRateSET_enter>
		}
		/*CYCLE DELAY enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) )//delay third menu enter
 80105c6:	4b8d      	ldr	r3, [pc, #564]	; (80107fc <Key_Enter+0x308>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d109      	bne.n	80105e2 <Key_Enter+0xee>
 80105ce:	4b8b      	ldr	r3, [pc, #556]	; (80107fc <Key_Enter+0x308>)
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	2b04      	cmp	r3, #4
 80105d4:	d105      	bne.n	80105e2 <Key_Enter+0xee>
 80105d6:	4b89      	ldr	r3, [pc, #548]	; (80107fc <Key_Enter+0x308>)
 80105d8:	689b      	ldr	r3, [r3, #8]
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d101      	bne.n	80105e2 <Key_Enter+0xee>
		{
			Delay_enter();
 80105de:	f7ff fda5 	bl	801012c <Delay_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && ((xyz.coordinates3==2) || (xyz.coordinates3==3)))//cycle third menu enter
 80105e2:	4b86      	ldr	r3, [pc, #536]	; (80107fc <Key_Enter+0x308>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d10d      	bne.n	8010606 <Key_Enter+0x112>
 80105ea:	4b84      	ldr	r3, [pc, #528]	; (80107fc <Key_Enter+0x308>)
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	2b04      	cmp	r3, #4
 80105f0:	d109      	bne.n	8010606 <Key_Enter+0x112>
 80105f2:	4b82      	ldr	r3, [pc, #520]	; (80107fc <Key_Enter+0x308>)
 80105f4:	689b      	ldr	r3, [r3, #8]
 80105f6:	2b02      	cmp	r3, #2
 80105f8:	d003      	beq.n	8010602 <Key_Enter+0x10e>
 80105fa:	4b80      	ldr	r3, [pc, #512]	; (80107fc <Key_Enter+0x308>)
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	2b03      	cmp	r3, #3
 8010600:	d101      	bne.n	8010606 <Key_Enter+0x112>
		{
			Cycle_enter();
 8010602:	f7ff fe11 	bl	8010228 <Cycle_enter>
		}
		/*Save  enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 8010606:	4b7d      	ldr	r3, [pc, #500]	; (80107fc <Key_Enter+0x308>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2b03      	cmp	r3, #3
 801060c:	d109      	bne.n	8010622 <Key_Enter+0x12e>
 801060e:	4b7b      	ldr	r3, [pc, #492]	; (80107fc <Key_Enter+0x308>)
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	2b01      	cmp	r3, #1
 8010614:	d105      	bne.n	8010622 <Key_Enter+0x12e>
 8010616:	4b79      	ldr	r3, [pc, #484]	; (80107fc <Key_Enter+0x308>)
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <Key_Enter+0x12e>
		{
			Save_enter();
 801061e:	f7ff fcbb 	bl	800ff98 <Save_enter>
		}
		/*load enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 8010622:	4b76      	ldr	r3, [pc, #472]	; (80107fc <Key_Enter+0x308>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b03      	cmp	r3, #3
 8010628:	d109      	bne.n	801063e <Key_Enter+0x14a>
 801062a:	4b74      	ldr	r3, [pc, #464]	; (80107fc <Key_Enter+0x308>)
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	2b02      	cmp	r3, #2
 8010630:	d105      	bne.n	801063e <Key_Enter+0x14a>
 8010632:	4b72      	ldr	r3, [pc, #456]	; (80107fc <Key_Enter+0x308>)
 8010634:	689b      	ldr	r3, [r3, #8]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d001      	beq.n	801063e <Key_Enter+0x14a>
		{
			Load_enter();
 801063a:	f7ff fd03 	bl	8010044 <Load_enter>
		}
		/*reset enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==1) && (xyz.coordinates3==1))
 801063e:	4b6f      	ldr	r3, [pc, #444]	; (80107fc <Key_Enter+0x308>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2b01      	cmp	r3, #1
 8010644:	d109      	bne.n	801065a <Key_Enter+0x166>
 8010646:	4b6d      	ldr	r3, [pc, #436]	; (80107fc <Key_Enter+0x308>)
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	2b01      	cmp	r3, #1
 801064c:	d105      	bne.n	801065a <Key_Enter+0x166>
 801064e:	4b6b      	ldr	r3, [pc, #428]	; (80107fc <Key_Enter+0x308>)
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	2b01      	cmp	r3, #1
 8010654:	d101      	bne.n	801065a <Key_Enter+0x166>
		{
			Reset_enter();
 8010656:	f7ff ff03 	bl	8010460 <Reset_enter>
		}
		/*light level ennter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3==1))
 801065a:	4b68      	ldr	r3, [pc, #416]	; (80107fc <Key_Enter+0x308>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b01      	cmp	r3, #1
 8010660:	d109      	bne.n	8010676 <Key_Enter+0x182>
 8010662:	4b66      	ldr	r3, [pc, #408]	; (80107fc <Key_Enter+0x308>)
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	2b06      	cmp	r3, #6
 8010668:	d105      	bne.n	8010676 <Key_Enter+0x182>
 801066a:	4b64      	ldr	r3, [pc, #400]	; (80107fc <Key_Enter+0x308>)
 801066c:	689b      	ldr	r3, [r3, #8]
 801066e:	2b01      	cmp	r3, #1
 8010670:	d101      	bne.n	8010676 <Key_Enter+0x182>
		{
			Cursor_flash_off();
 8010672:	f003 fef7 	bl	8014464 <Cursor_flash_off>
		}

		if(Shift_Not_Shift==Shift && (xyz.coordinates1==0 && xyz.coordinates2==0 && xyz.coordinates3==0))
 8010676:	4b62      	ldr	r3, [pc, #392]	; (8010800 <Key_Enter+0x30c>)
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d10d      	bne.n	801069a <Key_Enter+0x1a6>
 801067e:	4b5f      	ldr	r3, [pc, #380]	; (80107fc <Key_Enter+0x308>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d109      	bne.n	801069a <Key_Enter+0x1a6>
 8010686:	4b5d      	ldr	r3, [pc, #372]	; (80107fc <Key_Enter+0x308>)
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <Key_Enter+0x1a6>
 801068e:	4b5b      	ldr	r3, [pc, #364]	; (80107fc <Key_Enter+0x308>)
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <Key_Enter+0x1a6>
		{
			Sample_show_enter();
 8010696:	f7ff ff07 	bl	80104a8 <Sample_show_enter>
		}
		/*gain frq*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 801069a:	4b58      	ldr	r3, [pc, #352]	; (80107fc <Key_Enter+0x308>)
 801069c:	681b      	ldr	r3, [r3, #0]
		{
			//Frq_enter();

		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==3))
 801069e:	4b57      	ldr	r3, [pc, #348]	; (80107fc <Key_Enter+0x308>)
 80106a0:	681b      	ldr	r3, [r3, #0]
			Cursor_flash_off();
			*/
		}
		/*V calibration*/
		//此处采用两点法校准
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1))
 80106a2:	4b56      	ldr	r3, [pc, #344]	; (80107fc <Key_Enter+0x308>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d123      	bne.n	80106f2 <Key_Enter+0x1fe>
 80106aa:	4b54      	ldr	r3, [pc, #336]	; (80107fc <Key_Enter+0x308>)
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	2b08      	cmp	r3, #8
 80106b0:	d11f      	bne.n	80106f2 <Key_Enter+0x1fe>
 80106b2:	4b52      	ldr	r3, [pc, #328]	; (80107fc <Key_Enter+0x308>)
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d11b      	bne.n	80106f2 <Key_Enter+0x1fe>
		{
			data_V[0]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 80106ba:	4b52      	ldr	r3, [pc, #328]	; (8010804 <Key_Enter+0x310>)
 80106bc:	78db      	ldrb	r3, [r3, #3]
 80106be:	b29b      	uxth	r3, r3
 80106c0:	021b      	lsls	r3, r3, #8
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	4b4f      	ldr	r3, [pc, #316]	; (8010804 <Key_Enter+0x310>)
 80106c6:	791b      	ldrb	r3, [r3, #4]
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	18d3      	adds	r3, r2, r3
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	4b4e      	ldr	r3, [pc, #312]	; (8010808 <Key_Enter+0x314>)
 80106d0:	801a      	strh	r2, [r3, #0]
			Vref[0]=String_To_Float(String_Calibration_Vlotage);
 80106d2:	4b4e      	ldr	r3, [pc, #312]	; (801080c <Key_Enter+0x318>)
 80106d4:	0018      	movs	r0, r3
 80106d6:	f7fd ff6d 	bl	800e5b4 <String_To_Float>
 80106da:	1c02      	adds	r2, r0, #0
 80106dc:	4b4c      	ldr	r3, [pc, #304]	; (8010810 <Key_Enter+0x31c>)
 80106de:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 80106e0:	4b46      	ldr	r3, [pc, #280]	; (80107fc <Key_Enter+0x308>)
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	4b45      	ldr	r3, [pc, #276]	; (80107fc <Key_Enter+0x308>)
 80106e8:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 80106ea:	4b4a      	ldr	r3, [pc, #296]	; (8010814 <Key_Enter+0x320>)
 80106ec:	2209      	movs	r2, #9
 80106ee:	701a      	strb	r2, [r3, #0]
			return;
 80106f0:	e0f1      	b.n	80108d6 <Key_Enter+0x3e2>
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==2))
 80106f2:	4b42      	ldr	r3, [pc, #264]	; (80107fc <Key_Enter+0x308>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d158      	bne.n	80107ac <Key_Enter+0x2b8>
 80106fa:	4b40      	ldr	r3, [pc, #256]	; (80107fc <Key_Enter+0x308>)
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	2b08      	cmp	r3, #8
 8010700:	d154      	bne.n	80107ac <Key_Enter+0x2b8>
 8010702:	4b3e      	ldr	r3, [pc, #248]	; (80107fc <Key_Enter+0x308>)
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	2b02      	cmp	r3, #2
 8010708:	d150      	bne.n	80107ac <Key_Enter+0x2b8>
		{
			data_V[1]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 801070a:	4b3e      	ldr	r3, [pc, #248]	; (8010804 <Key_Enter+0x310>)
 801070c:	78db      	ldrb	r3, [r3, #3]
 801070e:	b29b      	uxth	r3, r3
 8010710:	021b      	lsls	r3, r3, #8
 8010712:	b29a      	uxth	r2, r3
 8010714:	4b3b      	ldr	r3, [pc, #236]	; (8010804 <Key_Enter+0x310>)
 8010716:	791b      	ldrb	r3, [r3, #4]
 8010718:	b29b      	uxth	r3, r3
 801071a:	18d3      	adds	r3, r2, r3
 801071c:	b29a      	uxth	r2, r3
 801071e:	4b3a      	ldr	r3, [pc, #232]	; (8010808 <Key_Enter+0x314>)
 8010720:	805a      	strh	r2, [r3, #2]
			Vref[1]=String_To_Float(String_Calibration_Vlotage);
 8010722:	4b3a      	ldr	r3, [pc, #232]	; (801080c <Key_Enter+0x318>)
 8010724:	0018      	movs	r0, r3
 8010726:	f7fd ff45 	bl	800e5b4 <String_To_Float>
 801072a:	1c02      	adds	r2, r0, #0
 801072c:	4b38      	ldr	r3, [pc, #224]	; (8010810 <Key_Enter+0x31c>)
 801072e:	605a      	str	r2, [r3, #4]
			ADC_Gain_V=(Vref[1]-Vref[0])/(data_V[1]-data_V[0]);
 8010730:	4b37      	ldr	r3, [pc, #220]	; (8010810 <Key_Enter+0x31c>)
 8010732:	685a      	ldr	r2, [r3, #4]
 8010734:	4b36      	ldr	r3, [pc, #216]	; (8010810 <Key_Enter+0x31c>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	1c19      	adds	r1, r3, #0
 801073a:	1c10      	adds	r0, r2, #0
 801073c:	f7f0 fbb6 	bl	8000eac <__aeabi_fsub>
 8010740:	1c03      	adds	r3, r0, #0
 8010742:	1c1c      	adds	r4, r3, #0
 8010744:	4b30      	ldr	r3, [pc, #192]	; (8010808 <Key_Enter+0x314>)
 8010746:	885b      	ldrh	r3, [r3, #2]
 8010748:	001a      	movs	r2, r3
 801074a:	4b2f      	ldr	r3, [pc, #188]	; (8010808 <Key_Enter+0x314>)
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	0018      	movs	r0, r3
 8010752:	f7f0 fd79 	bl	8001248 <__aeabi_i2f>
 8010756:	1c03      	adds	r3, r0, #0
 8010758:	1c19      	adds	r1, r3, #0
 801075a:	1c20      	adds	r0, r4, #0
 801075c:	f7f0 f8b8 	bl	80008d0 <__aeabi_fdiv>
 8010760:	1c03      	adds	r3, r0, #0
 8010762:	1c1a      	adds	r2, r3, #0
 8010764:	4b2c      	ldr	r3, [pc, #176]	; (8010818 <Key_Enter+0x324>)
 8010766:	601a      	str	r2, [r3, #0]
			Eror_ADC_V=Vref[0]-ADC_Gain_V*data_V[0];
 8010768:	4b29      	ldr	r3, [pc, #164]	; (8010810 <Key_Enter+0x31c>)
 801076a:	681c      	ldr	r4, [r3, #0]
 801076c:	4b26      	ldr	r3, [pc, #152]	; (8010808 <Key_Enter+0x314>)
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	0018      	movs	r0, r3
 8010772:	f7f0 fd69 	bl	8001248 <__aeabi_i2f>
 8010776:	1c02      	adds	r2, r0, #0
 8010778:	4b27      	ldr	r3, [pc, #156]	; (8010818 <Key_Enter+0x324>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	1c19      	adds	r1, r3, #0
 801077e:	1c10      	adds	r0, r2, #0
 8010780:	f7f0 fa6e 	bl	8000c60 <__aeabi_fmul>
 8010784:	1c03      	adds	r3, r0, #0
 8010786:	1c19      	adds	r1, r3, #0
 8010788:	1c20      	adds	r0, r4, #0
 801078a:	f7f0 fb8f 	bl	8000eac <__aeabi_fsub>
 801078e:	1c03      	adds	r3, r0, #0
 8010790:	1c1a      	adds	r2, r3, #0
 8010792:	4b22      	ldr	r3, [pc, #136]	; (801081c <Key_Enter+0x328>)
 8010794:	601a      	str	r2, [r3, #0]
			AT25_Save_AD_Param();
 8010796:	f7fb fe9d 	bl	800c4d4 <AT25_Save_AD_Param>
			xyz.coordinates3++;
 801079a:	4b18      	ldr	r3, [pc, #96]	; (80107fc <Key_Enter+0x308>)
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	4b16      	ldr	r3, [pc, #88]	; (80107fc <Key_Enter+0x308>)
 80107a2:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 80107a4:	4b1b      	ldr	r3, [pc, #108]	; (8010814 <Key_Enter+0x320>)
 80107a6:	2209      	movs	r2, #9
 80107a8:	701a      	strb	r2, [r3, #0]
			return;
 80107aa:	e094      	b.n	80108d6 <Key_Enter+0x3e2>
		}
		/*I calibration*/
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3))
 80107ac:	4b13      	ldr	r3, [pc, #76]	; (80107fc <Key_Enter+0x308>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d13b      	bne.n	801082c <Key_Enter+0x338>
 80107b4:	4b11      	ldr	r3, [pc, #68]	; (80107fc <Key_Enter+0x308>)
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	2b08      	cmp	r3, #8
 80107ba:	d137      	bne.n	801082c <Key_Enter+0x338>
 80107bc:	4b0f      	ldr	r3, [pc, #60]	; (80107fc <Key_Enter+0x308>)
 80107be:	689b      	ldr	r3, [r3, #8]
 80107c0:	2b03      	cmp	r3, #3
 80107c2:	d133      	bne.n	801082c <Key_Enter+0x338>
		{
			data_I[0]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 80107c4:	4b0f      	ldr	r3, [pc, #60]	; (8010804 <Key_Enter+0x310>)
 80107c6:	795b      	ldrb	r3, [r3, #5]
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	021b      	lsls	r3, r3, #8
 80107cc:	b29a      	uxth	r2, r3
 80107ce:	4b0d      	ldr	r3, [pc, #52]	; (8010804 <Key_Enter+0x310>)
 80107d0:	799b      	ldrb	r3, [r3, #6]
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	18d3      	adds	r3, r2, r3
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	4b11      	ldr	r3, [pc, #68]	; (8010820 <Key_Enter+0x32c>)
 80107da:	801a      	strh	r2, [r3, #0]
			Iref[0]=String_To_Float(String_Calibration_Current);
 80107dc:	4b11      	ldr	r3, [pc, #68]	; (8010824 <Key_Enter+0x330>)
 80107de:	0018      	movs	r0, r3
 80107e0:	f7fd fee8 	bl	800e5b4 <String_To_Float>
 80107e4:	1c02      	adds	r2, r0, #0
 80107e6:	4b10      	ldr	r3, [pc, #64]	; (8010828 <Key_Enter+0x334>)
 80107e8:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 80107ea:	4b04      	ldr	r3, [pc, #16]	; (80107fc <Key_Enter+0x308>)
 80107ec:	689b      	ldr	r3, [r3, #8]
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	4b02      	ldr	r3, [pc, #8]	; (80107fc <Key_Enter+0x308>)
 80107f2:	609a      	str	r2, [r3, #8]
			return;
 80107f4:	e06f      	b.n	80108d6 <Key_Enter+0x3e2>
 80107f6:	46c0      	nop			; (mov r8, r8)
 80107f8:	2000398b 	.word	0x2000398b
 80107fc:	200039f4 	.word	0x200039f4
 8010800:	20003987 	.word	0x20003987
 8010804:	200036a0 	.word	0x200036a0
 8010808:	200039b4 	.word	0x200039b4
 801080c:	2000308c 	.word	0x2000308c
 8010810:	200039a4 	.word	0x200039a4
 8010814:	2000398e 	.word	0x2000398e
 8010818:	20002fe8 	.word	0x20002fe8
 801081c:	20002ff0 	.word	0x20002ff0
 8010820:	200039b8 	.word	0x200039b8
 8010824:	20003098 	.word	0x20003098
 8010828:	200039ac 	.word	0x200039ac
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==4))
 801082c:	4b2b      	ldr	r3, [pc, #172]	; (80108dc <Key_Enter+0x3e8>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d150      	bne.n	80108d6 <Key_Enter+0x3e2>
 8010834:	4b29      	ldr	r3, [pc, #164]	; (80108dc <Key_Enter+0x3e8>)
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	2b08      	cmp	r3, #8
 801083a:	d14c      	bne.n	80108d6 <Key_Enter+0x3e2>
 801083c:	4b27      	ldr	r3, [pc, #156]	; (80108dc <Key_Enter+0x3e8>)
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	2b04      	cmp	r3, #4
 8010842:	d148      	bne.n	80108d6 <Key_Enter+0x3e2>
		{
			data_I[1]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 8010844:	4b26      	ldr	r3, [pc, #152]	; (80108e0 <Key_Enter+0x3ec>)
 8010846:	795b      	ldrb	r3, [r3, #5]
 8010848:	b29b      	uxth	r3, r3
 801084a:	021b      	lsls	r3, r3, #8
 801084c:	b29a      	uxth	r2, r3
 801084e:	4b24      	ldr	r3, [pc, #144]	; (80108e0 <Key_Enter+0x3ec>)
 8010850:	799b      	ldrb	r3, [r3, #6]
 8010852:	b29b      	uxth	r3, r3
 8010854:	18d3      	adds	r3, r2, r3
 8010856:	b29a      	uxth	r2, r3
 8010858:	4b22      	ldr	r3, [pc, #136]	; (80108e4 <Key_Enter+0x3f0>)
 801085a:	805a      	strh	r2, [r3, #2]
			Iref[1]=String_To_Float(String_Calibration_Current);
 801085c:	4b22      	ldr	r3, [pc, #136]	; (80108e8 <Key_Enter+0x3f4>)
 801085e:	0018      	movs	r0, r3
 8010860:	f7fd fea8 	bl	800e5b4 <String_To_Float>
 8010864:	1c02      	adds	r2, r0, #0
 8010866:	4b21      	ldr	r3, [pc, #132]	; (80108ec <Key_Enter+0x3f8>)
 8010868:	605a      	str	r2, [r3, #4]
			ADC_Gain_I=(Iref[1]-Iref[0])/(data_I[1]-data_I[0]);
 801086a:	4b20      	ldr	r3, [pc, #128]	; (80108ec <Key_Enter+0x3f8>)
 801086c:	685a      	ldr	r2, [r3, #4]
 801086e:	4b1f      	ldr	r3, [pc, #124]	; (80108ec <Key_Enter+0x3f8>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	1c19      	adds	r1, r3, #0
 8010874:	1c10      	adds	r0, r2, #0
 8010876:	f7f0 fb19 	bl	8000eac <__aeabi_fsub>
 801087a:	1c03      	adds	r3, r0, #0
 801087c:	1c1c      	adds	r4, r3, #0
 801087e:	4b19      	ldr	r3, [pc, #100]	; (80108e4 <Key_Enter+0x3f0>)
 8010880:	885b      	ldrh	r3, [r3, #2]
 8010882:	001a      	movs	r2, r3
 8010884:	4b17      	ldr	r3, [pc, #92]	; (80108e4 <Key_Enter+0x3f0>)
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	0018      	movs	r0, r3
 801088c:	f7f0 fcdc 	bl	8001248 <__aeabi_i2f>
 8010890:	1c03      	adds	r3, r0, #0
 8010892:	1c19      	adds	r1, r3, #0
 8010894:	1c20      	adds	r0, r4, #0
 8010896:	f7f0 f81b 	bl	80008d0 <__aeabi_fdiv>
 801089a:	1c03      	adds	r3, r0, #0
 801089c:	1c1a      	adds	r2, r3, #0
 801089e:	4b14      	ldr	r3, [pc, #80]	; (80108f0 <Key_Enter+0x3fc>)
 80108a0:	601a      	str	r2, [r3, #0]
			AT25_Save_AD_Param();
 80108a2:	f7fb fe17 	bl	800c4d4 <AT25_Save_AD_Param>
			Eror_ADC_I=Iref[0]-ADC_Gain_I*data_I[0];
 80108a6:	4b11      	ldr	r3, [pc, #68]	; (80108ec <Key_Enter+0x3f8>)
 80108a8:	681c      	ldr	r4, [r3, #0]
 80108aa:	4b0e      	ldr	r3, [pc, #56]	; (80108e4 <Key_Enter+0x3f0>)
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	0018      	movs	r0, r3
 80108b0:	f7f0 fcca 	bl	8001248 <__aeabi_i2f>
 80108b4:	1c02      	adds	r2, r0, #0
 80108b6:	4b0e      	ldr	r3, [pc, #56]	; (80108f0 <Key_Enter+0x3fc>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	1c19      	adds	r1, r3, #0
 80108bc:	1c10      	adds	r0, r2, #0
 80108be:	f7f0 f9cf 	bl	8000c60 <__aeabi_fmul>
 80108c2:	1c03      	adds	r3, r0, #0
 80108c4:	1c19      	adds	r1, r3, #0
 80108c6:	1c20      	adds	r0, r4, #0
 80108c8:	f7f0 faf0 	bl	8000eac <__aeabi_fsub>
 80108cc:	1c03      	adds	r3, r0, #0
 80108ce:	1c1a      	adds	r2, r3, #0
 80108d0:	4b08      	ldr	r3, [pc, #32]	; (80108f4 <Key_Enter+0x400>)
 80108d2:	601a      	str	r2, [r3, #0]
			return;
 80108d4:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bdb0      	pop	{r4, r5, r7, pc}
 80108da:	46c0      	nop			; (mov r8, r8)
 80108dc:	200039f4 	.word	0x200039f4
 80108e0:	200036a0 	.word	0x200036a0
 80108e4:	200039b8 	.word	0x200039b8
 80108e8:	20003098 	.word	0x20003098
 80108ec:	200039ac 	.word	0x200039ac
 80108f0:	20002fec 	.word	0x20002fec
 80108f4:	20002ff4 	.word	0x20002ff4

080108f8 <Key_Shift>:
 * @brief  按键Shift的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Shift(void)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	af00      	add	r7, sp, #0
	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0)) || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9)) )
 80108fc:	4b6b      	ldr	r3, [pc, #428]	; (8010aac <Key_Shift+0x1b4>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d107      	bne.n	8010914 <Key_Shift+0x1c>
 8010904:	4b69      	ldr	r3, [pc, #420]	; (8010aac <Key_Shift+0x1b4>)
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d103      	bne.n	8010914 <Key_Shift+0x1c>
 801090c:	4b67      	ldr	r3, [pc, #412]	; (8010aac <Key_Shift+0x1b4>)
 801090e:	689b      	ldr	r3, [r3, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00b      	beq.n	801092c <Key_Shift+0x34>
 8010914:	4b65      	ldr	r3, [pc, #404]	; (8010aac <Key_Shift+0x1b4>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b09      	cmp	r3, #9
 801091a:	d116      	bne.n	801094a <Key_Shift+0x52>
 801091c:	4b63      	ldr	r3, [pc, #396]	; (8010aac <Key_Shift+0x1b4>)
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	2b09      	cmp	r3, #9
 8010922:	d112      	bne.n	801094a <Key_Shift+0x52>
 8010924:	4b61      	ldr	r3, [pc, #388]	; (8010aac <Key_Shift+0x1b4>)
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	2b09      	cmp	r3, #9
 801092a:	d10e      	bne.n	801094a <Key_Shift+0x52>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 801092c:	4b60      	ldr	r3, [pc, #384]	; (8010ab0 <Key_Shift+0x1b8>)
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d103      	bne.n	801093c <Key_Shift+0x44>
 8010934:	4b5e      	ldr	r3, [pc, #376]	; (8010ab0 <Key_Shift+0x1b8>)
 8010936:	2201      	movs	r2, #1
 8010938:	701a      	strb	r2, [r3, #0]
 801093a:	e006      	b.n	801094a <Key_Shift+0x52>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 801093c:	4b5c      	ldr	r3, [pc, #368]	; (8010ab0 <Key_Shift+0x1b8>)
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	2b01      	cmp	r3, #1
 8010942:	d102      	bne.n	801094a <Key_Shift+0x52>
 8010944:	4b5a      	ldr	r3, [pc, #360]	; (8010ab0 <Key_Shift+0x1b8>)
 8010946:	2200      	movs	r2, #0
 8010948:	701a      	strb	r2, [r3, #0]
	}

	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) )
 801094a:	4b58      	ldr	r3, [pc, #352]	; (8010aac <Key_Shift+0x1b4>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b01      	cmp	r3, #1
 8010950:	d116      	bne.n	8010980 <Key_Shift+0x88>
 8010952:	4b56      	ldr	r3, [pc, #344]	; (8010aac <Key_Shift+0x1b4>)
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	2b05      	cmp	r3, #5
 8010958:	d112      	bne.n	8010980 <Key_Shift+0x88>
 801095a:	4b54      	ldr	r3, [pc, #336]	; (8010aac <Key_Shift+0x1b4>)
 801095c:	689b      	ldr	r3, [r3, #8]
 801095e:	2b01      	cmp	r3, #1
 8010960:	d10e      	bne.n	8010980 <Key_Shift+0x88>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 8010962:	4b53      	ldr	r3, [pc, #332]	; (8010ab0 <Key_Shift+0x1b8>)
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d103      	bne.n	8010972 <Key_Shift+0x7a>
 801096a:	4b51      	ldr	r3, [pc, #324]	; (8010ab0 <Key_Shift+0x1b8>)
 801096c:	2201      	movs	r2, #1
 801096e:	701a      	strb	r2, [r3, #0]
 8010970:	e006      	b.n	8010980 <Key_Shift+0x88>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 8010972:	4b4f      	ldr	r3, [pc, #316]	; (8010ab0 <Key_Shift+0x1b8>)
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	2b01      	cmp	r3, #1
 8010978:	d102      	bne.n	8010980 <Key_Shift+0x88>
 801097a:	4b4d      	ldr	r3, [pc, #308]	; (8010ab0 <Key_Shift+0x1b8>)
 801097c:	2200      	movs	r2, #0
 801097e:	701a      	strb	r2, [r3, #0]
	}

	if(xyz.coordinates1==2 && xyz.coordinates2!=0 && xyz.coordinates3==0)
 8010980:	4b4a      	ldr	r3, [pc, #296]	; (8010aac <Key_Shift+0x1b4>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b02      	cmp	r3, #2
 8010986:	d000      	beq.n	801098a <Key_Shift+0x92>
 8010988:	e08c      	b.n	8010aa4 <Key_Shift+0x1ac>
 801098a:	4b48      	ldr	r3, [pc, #288]	; (8010aac <Key_Shift+0x1b4>)
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d100      	bne.n	8010994 <Key_Shift+0x9c>
 8010992:	e087      	b.n	8010aa4 <Key_Shift+0x1ac>
 8010994:	4b45      	ldr	r3, [pc, #276]	; (8010aac <Key_Shift+0x1b4>)
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d000      	beq.n	801099e <Key_Shift+0xa6>
 801099c:	e082      	b.n	8010aa4 <Key_Shift+0x1ac>
	{
		/*vset*/
		if(xyz.coordinates2==2)
 801099e:	4b43      	ldr	r3, [pc, #268]	; (8010aac <Key_Shift+0x1b4>)
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d13d      	bne.n	8010a22 <Key_Shift+0x12a>
		{
			if(Keys_Encoder_Mode==Encoder_Mode)
 80109a6:	4b43      	ldr	r3, [pc, #268]	; (8010ab4 <Key_Shift+0x1bc>)
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d11a      	bne.n	80109e4 <Key_Shift+0xec>
			{
				Cursor_Position=0;
 80109ae:	4b42      	ldr	r3, [pc, #264]	; (8010ab8 <Key_Shift+0x1c0>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	701a      	strb	r2, [r3, #0]
				Cursor_flash_on();
 80109b4:	f003 fd8c 	bl	80144d0 <Cursor_flash_on>

				String_Voltage[0]=' ';
 80109b8:	4b40      	ldr	r3, [pc, #256]	; (8010abc <Key_Shift+0x1c4>)
 80109ba:	2220      	movs	r2, #32
 80109bc:	701a      	strb	r2, [r3, #0]
				String_Voltage[1]=' ';
 80109be:	4b3f      	ldr	r3, [pc, #252]	; (8010abc <Key_Shift+0x1c4>)
 80109c0:	2220      	movs	r2, #32
 80109c2:	705a      	strb	r2, [r3, #1]
				String_Voltage[2]=' ';
 80109c4:	4b3d      	ldr	r3, [pc, #244]	; (8010abc <Key_Shift+0x1c4>)
 80109c6:	2220      	movs	r2, #32
 80109c8:	709a      	strb	r2, [r3, #2]
				String_Voltage[3]=' ';
 80109ca:	4b3c      	ldr	r3, [pc, #240]	; (8010abc <Key_Shift+0x1c4>)
 80109cc:	2220      	movs	r2, #32
 80109ce:	70da      	strb	r2, [r3, #3]
				String_Voltage[4]=' ';
 80109d0:	4b3a      	ldr	r3, [pc, #232]	; (8010abc <Key_Shift+0x1c4>)
 80109d2:	2220      	movs	r2, #32
 80109d4:	711a      	strb	r2, [r3, #4]
				String_Voltage[5]=' ';
 80109d6:	4b39      	ldr	r3, [pc, #228]	; (8010abc <Key_Shift+0x1c4>)
 80109d8:	2220      	movs	r2, #32
 80109da:	715a      	strb	r2, [r3, #5]
				String_Voltage[6]='V';
 80109dc:	4b37      	ldr	r3, [pc, #220]	; (8010abc <Key_Shift+0x1c4>)
 80109de:	2256      	movs	r2, #86	; 0x56
 80109e0:	719a      	strb	r2, [r3, #6]
		}

	}


}
 80109e2:	e05f      	b.n	8010aa4 <Key_Shift+0x1ac>
			else if(Keys_Encoder_Mode==Keys_Mode)
 80109e4:	4b33      	ldr	r3, [pc, #204]	; (8010ab4 <Key_Shift+0x1bc>)
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d15b      	bne.n	8010aa4 <Key_Shift+0x1ac>
				Cursor_flash_off();
 80109ec:	f003 fd3a 	bl	8014464 <Cursor_flash_off>
				Cursor_Position=0;
 80109f0:	4b31      	ldr	r3, [pc, #196]	; (8010ab8 <Key_Shift+0x1c0>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	701a      	strb	r2, [r3, #0]
				String_Voltage[0]=' ';
 80109f6:	4b31      	ldr	r3, [pc, #196]	; (8010abc <Key_Shift+0x1c4>)
 80109f8:	2220      	movs	r2, #32
 80109fa:	701a      	strb	r2, [r3, #0]
				String_Voltage[1]=' ';
 80109fc:	4b2f      	ldr	r3, [pc, #188]	; (8010abc <Key_Shift+0x1c4>)
 80109fe:	2220      	movs	r2, #32
 8010a00:	705a      	strb	r2, [r3, #1]
				String_Voltage[2]=' ';
 8010a02:	4b2e      	ldr	r3, [pc, #184]	; (8010abc <Key_Shift+0x1c4>)
 8010a04:	2220      	movs	r2, #32
 8010a06:	709a      	strb	r2, [r3, #2]
				String_Voltage[3]=' ';
 8010a08:	4b2c      	ldr	r3, [pc, #176]	; (8010abc <Key_Shift+0x1c4>)
 8010a0a:	2220      	movs	r2, #32
 8010a0c:	70da      	strb	r2, [r3, #3]
				String_Voltage[4]=' ';
 8010a0e:	4b2b      	ldr	r3, [pc, #172]	; (8010abc <Key_Shift+0x1c4>)
 8010a10:	2220      	movs	r2, #32
 8010a12:	711a      	strb	r2, [r3, #4]
				String_Voltage[5]=' ';
 8010a14:	4b29      	ldr	r3, [pc, #164]	; (8010abc <Key_Shift+0x1c4>)
 8010a16:	2220      	movs	r2, #32
 8010a18:	715a      	strb	r2, [r3, #5]
				String_Voltage[6]='V';
 8010a1a:	4b28      	ldr	r3, [pc, #160]	; (8010abc <Key_Shift+0x1c4>)
 8010a1c:	2256      	movs	r2, #86	; 0x56
 8010a1e:	719a      	strb	r2, [r3, #6]
}
 8010a20:	e040      	b.n	8010aa4 <Key_Shift+0x1ac>
		else if(xyz.coordinates2==1)
 8010a22:	4b22      	ldr	r3, [pc, #136]	; (8010aac <Key_Shift+0x1b4>)
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d13c      	bne.n	8010aa4 <Key_Shift+0x1ac>
			if(Keys_Encoder_Mode==Encoder_Mode)
 8010a2a:	4b22      	ldr	r3, [pc, #136]	; (8010ab4 <Key_Shift+0x1bc>)
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d11a      	bne.n	8010a68 <Key_Shift+0x170>
				Cursor_Position=9;
 8010a32:	4b21      	ldr	r3, [pc, #132]	; (8010ab8 <Key_Shift+0x1c0>)
 8010a34:	2209      	movs	r2, #9
 8010a36:	701a      	strb	r2, [r3, #0]
				Cursor_flash_on();
 8010a38:	f003 fd4a 	bl	80144d0 <Cursor_flash_on>
				String_Current[0]=' ';
 8010a3c:	4b20      	ldr	r3, [pc, #128]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a3e:	2220      	movs	r2, #32
 8010a40:	701a      	strb	r2, [r3, #0]
				String_Current[1]=' ';
 8010a42:	4b1f      	ldr	r3, [pc, #124]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a44:	2220      	movs	r2, #32
 8010a46:	705a      	strb	r2, [r3, #1]
				String_Current[2]=' ';
 8010a48:	4b1d      	ldr	r3, [pc, #116]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a4a:	2220      	movs	r2, #32
 8010a4c:	709a      	strb	r2, [r3, #2]
				String_Current[3]=' ';
 8010a4e:	4b1c      	ldr	r3, [pc, #112]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a50:	2220      	movs	r2, #32
 8010a52:	70da      	strb	r2, [r3, #3]
				String_Current[4]=' ';
 8010a54:	4b1a      	ldr	r3, [pc, #104]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a56:	2220      	movs	r2, #32
 8010a58:	711a      	strb	r2, [r3, #4]
				String_Current[5]=' ';
 8010a5a:	4b19      	ldr	r3, [pc, #100]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a5c:	2220      	movs	r2, #32
 8010a5e:	715a      	strb	r2, [r3, #5]
				String_Current[6]='A';
 8010a60:	4b17      	ldr	r3, [pc, #92]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a62:	2241      	movs	r2, #65	; 0x41
 8010a64:	719a      	strb	r2, [r3, #6]
}
 8010a66:	e01d      	b.n	8010aa4 <Key_Shift+0x1ac>
			else if(Keys_Encoder_Mode==Keys_Mode)
 8010a68:	4b12      	ldr	r3, [pc, #72]	; (8010ab4 <Key_Shift+0x1bc>)
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d119      	bne.n	8010aa4 <Key_Shift+0x1ac>
				Cursor_flash_off();
 8010a70:	f003 fcf8 	bl	8014464 <Cursor_flash_off>
				Cursor_Position=9;
 8010a74:	4b10      	ldr	r3, [pc, #64]	; (8010ab8 <Key_Shift+0x1c0>)
 8010a76:	2209      	movs	r2, #9
 8010a78:	701a      	strb	r2, [r3, #0]
				String_Current[0]=' ';
 8010a7a:	4b11      	ldr	r3, [pc, #68]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a7c:	2220      	movs	r2, #32
 8010a7e:	701a      	strb	r2, [r3, #0]
				String_Current[1]=' ';
 8010a80:	4b0f      	ldr	r3, [pc, #60]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a82:	2220      	movs	r2, #32
 8010a84:	705a      	strb	r2, [r3, #1]
				String_Current[2]=' ';
 8010a86:	4b0e      	ldr	r3, [pc, #56]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a88:	2220      	movs	r2, #32
 8010a8a:	709a      	strb	r2, [r3, #2]
				String_Current[3]=' ';
 8010a8c:	4b0c      	ldr	r3, [pc, #48]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a8e:	2220      	movs	r2, #32
 8010a90:	70da      	strb	r2, [r3, #3]
				String_Current[4]=' ';
 8010a92:	4b0b      	ldr	r3, [pc, #44]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a94:	2220      	movs	r2, #32
 8010a96:	711a      	strb	r2, [r3, #4]
				String_Current[5]=' ';
 8010a98:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <Key_Shift+0x1c8>)
 8010a9a:	2220      	movs	r2, #32
 8010a9c:	715a      	strb	r2, [r3, #5]
				String_Current[6]='A';
 8010a9e:	4b08      	ldr	r3, [pc, #32]	; (8010ac0 <Key_Shift+0x1c8>)
 8010aa0:	2241      	movs	r2, #65	; 0x41
 8010aa2:	719a      	strb	r2, [r3, #6]
}
 8010aa4:	46c0      	nop			; (mov r8, r8)
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	46c0      	nop			; (mov r8, r8)
 8010aac:	200039f4 	.word	0x200039f4
 8010ab0:	20003987 	.word	0x20003987
 8010ab4:	20002fd2 	.word	0x20002fd2
 8010ab8:	2000398e 	.word	0x2000398e
 8010abc:	20003058 	.word	0x20003058
 8010ac0:	20003060 	.word	0x20003060

08010ac4 <Key_ON_OFF>:
 * @brief  按键ON/OFF的扫描服务函数
 * @param  None
 * @retval None
 */
void Key_ON_OFF(void)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	af00      	add	r7, sp, #0

	/* actual interface */
	if((xyz.coordinates1==0)&&(xyz.coordinates2==0)&&(xyz.coordinates3==0))
 8010ac8:	4b13      	ldr	r3, [pc, #76]	; (8010b18 <Key_ON_OFF+0x54>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d121      	bne.n	8010b14 <Key_ON_OFF+0x50>
 8010ad0:	4b11      	ldr	r3, [pc, #68]	; (8010b18 <Key_ON_OFF+0x54>)
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d11d      	bne.n	8010b14 <Key_ON_OFF+0x50>
 8010ad8:	4b0f      	ldr	r3, [pc, #60]	; (8010b18 <Key_ON_OFF+0x54>)
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d119      	bne.n	8010b14 <Key_ON_OFF+0x50>
	{
		if(OUTPUT_NOT_OUTPUT ==NOT_OUTPUT)
 8010ae0:	4b0e      	ldr	r3, [pc, #56]	; (8010b1c <Key_ON_OFF+0x58>)
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d10c      	bne.n	8010b02 <Key_ON_OFF+0x3e>
		{
			OUTPUT_NOT_OUTPUT =OUTPUT;
 8010ae8:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <Key_ON_OFF+0x58>)
 8010aea:	2201      	movs	r2, #1
 8010aec:	701a      	strb	r2, [r3, #0]
			if(Delay_Function_On_Off==Delay_Function_On)
 8010aee:	4b0c      	ldr	r3, [pc, #48]	; (8010b20 <Key_ON_OFF+0x5c>)
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d102      	bne.n	8010afc <Key_ON_OFF+0x38>
			{
				TIM16_DELAY_ON();
 8010af6:	f000 ff8b 	bl	8011a10 <TIM16_DELAY_ON>
				return;
 8010afa:	e00b      	b.n	8010b14 <Key_ON_OFF+0x50>
			}

			power_on();
 8010afc:	f7fb ff4a 	bl	800c994 <power_on>
 8010b00:	e008      	b.n	8010b14 <Key_ON_OFF+0x50>

		}
		else if(OUTPUT_NOT_OUTPUT ==OUTPUT)
 8010b02:	4b06      	ldr	r3, [pc, #24]	; (8010b1c <Key_ON_OFF+0x58>)
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d104      	bne.n	8010b14 <Key_ON_OFF+0x50>
		{
			OUTPUT_NOT_OUTPUT =NOT_OUTPUT;
 8010b0a:	4b04      	ldr	r3, [pc, #16]	; (8010b1c <Key_ON_OFF+0x58>)
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	701a      	strb	r2, [r3, #0]
			power_off();
 8010b10:	f7fb ff50 	bl	800c9b4 <power_off>
		}

	}


}
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	200039f4 	.word	0x200039f4
 8010b1c:	20003989 	.word	0x20003989
 8010b20:	200039e1 	.word	0x200039e1

08010b24 <Key_Preset_Lock>:
 * @brief  按键Preset/Lock的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Preset_Lock(void)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	af00      	add	r7, sp, #0
	if(Shift_Not_Shift == Not_Shift)//当不复用该按键时，该按键为切换功能，切换实时值和设定值界面
 8010b28:	4b18      	ldr	r3, [pc, #96]	; (8010b8c <Key_Preset_Lock+0x68>)
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d10b      	bne.n	8010b48 <Key_Preset_Lock+0x24>
	{
		Cursor_flash_off();
 8010b30:	f003 fc98 	bl	8014464 <Cursor_flash_off>
		xyz.coordinates1=9;
 8010b34:	4b16      	ldr	r3, [pc, #88]	; (8010b90 <Key_Preset_Lock+0x6c>)
 8010b36:	2209      	movs	r2, #9
 8010b38:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=9;
 8010b3a:	4b15      	ldr	r3, [pc, #84]	; (8010b90 <Key_Preset_Lock+0x6c>)
 8010b3c:	2209      	movs	r2, #9
 8010b3e:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=9;
 8010b40:	4b13      	ldr	r3, [pc, #76]	; (8010b90 <Key_Preset_Lock+0x6c>)
 8010b42:	2209      	movs	r2, #9
 8010b44:	609a      	str	r2, [r3, #8]
		{
			LOCK_UNLOCK = UNLOCK;
		}

	}
}
 8010b46:	e01e      	b.n	8010b86 <Key_Preset_Lock+0x62>
	else if(Shift_Not_Shift == Shift)
 8010b48:	4b10      	ldr	r3, [pc, #64]	; (8010b8c <Key_Preset_Lock+0x68>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d11a      	bne.n	8010b86 <Key_Preset_Lock+0x62>
		if(LOCK_UNLOCK == UNLOCK)
 8010b50:	4b10      	ldr	r3, [pc, #64]	; (8010b94 <Key_Preset_Lock+0x70>)
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d10f      	bne.n	8010b78 <Key_Preset_Lock+0x54>
			LOCK_UNLOCK = LOCK;
 8010b58:	4b0e      	ldr	r3, [pc, #56]	; (8010b94 <Key_Preset_Lock+0x70>)
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	701a      	strb	r2, [r3, #0]
			Shift_Not_Shift =Not_Shift;
 8010b5e:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <Key_Preset_Lock+0x68>)
 8010b60:	2200      	movs	r2, #0
 8010b62:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=0;
 8010b64:	4b0a      	ldr	r3, [pc, #40]	; (8010b90 <Key_Preset_Lock+0x6c>)
 8010b66:	2200      	movs	r2, #0
 8010b68:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 8010b6a:	4b09      	ldr	r3, [pc, #36]	; (8010b90 <Key_Preset_Lock+0x6c>)
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 8010b70:	4b07      	ldr	r3, [pc, #28]	; (8010b90 <Key_Preset_Lock+0x6c>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	609a      	str	r2, [r3, #8]
}
 8010b76:	e006      	b.n	8010b86 <Key_Preset_Lock+0x62>
		else if(LOCK_UNLOCK == LOCK)
 8010b78:	4b06      	ldr	r3, [pc, #24]	; (8010b94 <Key_Preset_Lock+0x70>)
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d102      	bne.n	8010b86 <Key_Preset_Lock+0x62>
			LOCK_UNLOCK = UNLOCK;
 8010b80:	4b04      	ldr	r3, [pc, #16]	; (8010b94 <Key_Preset_Lock+0x70>)
 8010b82:	2200      	movs	r2, #0
 8010b84:	701a      	strb	r2, [r3, #0]
}
 8010b86:	46c0      	nop			; (mov r8, r8)
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	20003987 	.word	0x20003987
 8010b90:	200039f4 	.word	0x200039f4
 8010b94:	2000398b 	.word	0x2000398b

08010b98 <Key_Recall_Save>:
 * @brief  按键Recall/Save的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Recall_Save(void)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	af00      	add	r7, sp, #0

	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (LOCK_UNLOCK==UNLOCK))
 8010b9c:	4b31      	ldr	r3, [pc, #196]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d10b      	bne.n	8010bbc <Key_Recall_Save+0x24>
 8010ba4:	4b2f      	ldr	r3, [pc, #188]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d107      	bne.n	8010bbc <Key_Recall_Save+0x24>
 8010bac:	4b2d      	ldr	r3, [pc, #180]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010bae:	689b      	ldr	r3, [r3, #8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d103      	bne.n	8010bbc <Key_Recall_Save+0x24>
 8010bb4:	4b2c      	ldr	r3, [pc, #176]	; (8010c68 <Key_Recall_Save+0xd0>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00f      	beq.n	8010bdc <Key_Recall_Save+0x44>
	 || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9) && (LOCK_UNLOCK==UNLOCK)) )
 8010bbc:	4b29      	ldr	r3, [pc, #164]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2b09      	cmp	r3, #9
 8010bc2:	d14b      	bne.n	8010c5c <Key_Recall_Save+0xc4>
 8010bc4:	4b27      	ldr	r3, [pc, #156]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	2b09      	cmp	r3, #9
 8010bca:	d147      	bne.n	8010c5c <Key_Recall_Save+0xc4>
 8010bcc:	4b25      	ldr	r3, [pc, #148]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010bce:	689b      	ldr	r3, [r3, #8]
 8010bd0:	2b09      	cmp	r3, #9
 8010bd2:	d143      	bne.n	8010c5c <Key_Recall_Save+0xc4>
 8010bd4:	4b24      	ldr	r3, [pc, #144]	; (8010c68 <Key_Recall_Save+0xd0>)
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d13f      	bne.n	8010c5c <Key_Recall_Save+0xc4>
	{
		if(Shift_Not_Shift == Not_Shift)          //无复用，处于取界面
 8010bdc:	4b23      	ldr	r3, [pc, #140]	; (8010c6c <Key_Recall_Save+0xd4>)
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d120      	bne.n	8010c26 <Key_Recall_Save+0x8e>
		{
			Recall_Save_Number = 0;//组别
 8010be4:	4b22      	ldr	r3, [pc, #136]	; (8010c70 <Key_Recall_Save+0xd8>)
 8010be6:	2200      	movs	r2, #0
 8010be8:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 8010bea:	4b1e      	ldr	r3, [pc, #120]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010bec:	2203      	movs	r2, #3
 8010bee:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 8010bf0:	4b1c      	ldr	r3, [pc, #112]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010bf2:	2202      	movs	r2, #2
 8010bf4:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;//无用
 8010bf6:	4b1b      	ldr	r3, [pc, #108]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	609a      	str	r2, [r3, #8]
			__HAL_TIM_DISABLE(&htim6);//cursor flash off
 8010bfc:	4b1d      	ldr	r3, [pc, #116]	; (8010c74 <Key_Recall_Save+0xdc>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	6a1b      	ldr	r3, [r3, #32]
 8010c02:	4a1d      	ldr	r2, [pc, #116]	; (8010c78 <Key_Recall_Save+0xe0>)
 8010c04:	4013      	ands	r3, r2
 8010c06:	d129      	bne.n	8010c5c <Key_Recall_Save+0xc4>
 8010c08:	4b1a      	ldr	r3, [pc, #104]	; (8010c74 <Key_Recall_Save+0xdc>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	6a1b      	ldr	r3, [r3, #32]
 8010c0e:	4a1b      	ldr	r2, [pc, #108]	; (8010c7c <Key_Recall_Save+0xe4>)
 8010c10:	4013      	ands	r3, r2
 8010c12:	d123      	bne.n	8010c5c <Key_Recall_Save+0xc4>
 8010c14:	4b17      	ldr	r3, [pc, #92]	; (8010c74 <Key_Recall_Save+0xdc>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	4b16      	ldr	r3, [pc, #88]	; (8010c74 <Key_Recall_Save+0xdc>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2101      	movs	r1, #1
 8010c20:	438a      	bics	r2, r1
 8010c22:	601a      	str	r2, [r3, #0]
		}

	}


}
 8010c24:	e01a      	b.n	8010c5c <Key_Recall_Save+0xc4>
		else if(Shift_Not_Shift == Shift)//save
 8010c26:	4b11      	ldr	r3, [pc, #68]	; (8010c6c <Key_Recall_Save+0xd4>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d116      	bne.n	8010c5c <Key_Recall_Save+0xc4>
			Recall_Save_Number = 0;//组别
 8010c2e:	4b10      	ldr	r3, [pc, #64]	; (8010c70 <Key_Recall_Save+0xd8>)
 8010c30:	2200      	movs	r2, #0
 8010c32:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 8010c34:	4b0b      	ldr	r3, [pc, #44]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010c36:	2203      	movs	r2, #3
 8010c38:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8010c3a:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8010c40:	4b08      	ldr	r3, [pc, #32]	; (8010c64 <Key_Recall_Save+0xcc>)
 8010c42:	2201      	movs	r2, #1
 8010c44:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift = Not_Shift;
 8010c46:	4b09      	ldr	r3, [pc, #36]	; (8010c6c <Key_Recall_Save+0xd4>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim6);//cursor flash off
 8010c4c:	4b09      	ldr	r3, [pc, #36]	; (8010c74 <Key_Recall_Save+0xdc>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	4b08      	ldr	r3, [pc, #32]	; (8010c74 <Key_Recall_Save+0xdc>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2101      	movs	r1, #1
 8010c58:	430a      	orrs	r2, r1
 8010c5a:	601a      	str	r2, [r3, #0]
}
 8010c5c:	46c0      	nop			; (mov r8, r8)
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	46c0      	nop			; (mov r8, r8)
 8010c64:	200039f4 	.word	0x200039f4
 8010c68:	2000398b 	.word	0x2000398b
 8010c6c:	20003987 	.word	0x20003987
 8010c70:	2000398d 	.word	0x2000398d
 8010c74:	200034c8 	.word	0x200034c8
 8010c78:	00001111 	.word	0x00001111
 8010c7c:	00000444 	.word	0x00000444

08010c80 <Key_Up>:
 * @brief  按键Up的扫描服务函数(Cursor_Position move)
 * @param	None
 * @retval None
 */
void Key_Up(void)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	af00      	add	r7, sp, #0
	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010c84:	4ba3      	ldr	r3, [pc, #652]	; (8010f14 <Key_Up+0x294>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d10c      	bne.n	8010ca6 <Key_Up+0x26>
 8010c8c:	4ba1      	ldr	r3, [pc, #644]	; (8010f14 <Key_Up+0x294>)
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d108      	bne.n	8010ca6 <Key_Up+0x26>
 8010c94:	4b9f      	ldr	r3, [pc, #636]	; (8010f14 <Key_Up+0x294>)
 8010c96:	689b      	ldr	r3, [r3, #8]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d104      	bne.n	8010ca6 <Key_Up+0x26>
	{

		//get_voltage_current(READ_VOLTAGE);
		DAC_Cmd_send(1,0x0a,0x00);//rise
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	210a      	movs	r1, #10
 8010ca0:	2001      	movs	r0, #1
 8010ca2:	f7fb fd9d 	bl	800c7e0 <DAC_Cmd_send>

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010ca6:	4b9b      	ldr	r3, [pc, #620]	; (8010f14 <Key_Up+0x294>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d110      	bne.n	8010cd0 <Key_Up+0x50>
 8010cae:	4b99      	ldr	r3, [pc, #612]	; (8010f14 <Key_Up+0x294>)
 8010cb0:	689b      	ldr	r3, [r3, #8]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d10c      	bne.n	8010cd0 <Key_Up+0x50>
	{
		if(xyz.coordinates2==8) xyz.coordinates2=1;
 8010cb6:	4b97      	ldr	r3, [pc, #604]	; (8010f14 <Key_Up+0x294>)
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	2b08      	cmp	r3, #8
 8010cbc:	d103      	bne.n	8010cc6 <Key_Up+0x46>
 8010cbe:	4b95      	ldr	r3, [pc, #596]	; (8010f14 <Key_Up+0x294>)
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	605a      	str	r2, [r3, #4]
 8010cc4:	e004      	b.n	8010cd0 <Key_Up+0x50>
		else 					xyz.coordinates2++;
 8010cc6:	4b93      	ldr	r3, [pc, #588]	; (8010f14 <Key_Up+0x294>)
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	4b91      	ldr	r3, [pc, #580]	; (8010f14 <Key_Up+0x294>)
 8010cce:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 8010cd0:	4b90      	ldr	r3, [pc, #576]	; (8010f14 <Key_Up+0x294>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b02      	cmp	r3, #2
 8010cd6:	d11b      	bne.n	8010d10 <Key_Up+0x90>
 8010cd8:	4b8e      	ldr	r3, [pc, #568]	; (8010f14 <Key_Up+0x294>)
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	2b02      	cmp	r3, #2
 8010cde:	d117      	bne.n	8010d10 <Key_Up+0x90>
 8010ce0:	4b8c      	ldr	r3, [pc, #560]	; (8010f14 <Key_Up+0x294>)
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d113      	bne.n	8010d10 <Key_Up+0x90>
	{
		Cursor_Position++;
 8010ce8:	4b8b      	ldr	r3, [pc, #556]	; (8010f18 <Key_Up+0x298>)
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	3301      	adds	r3, #1
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	4b89      	ldr	r3, [pc, #548]	; (8010f18 <Key_Up+0x298>)
 8010cf2:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3)	Cursor_Position=4;
 8010cf4:	4b88      	ldr	r3, [pc, #544]	; (8010f18 <Key_Up+0x298>)
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	2b03      	cmp	r3, #3
 8010cfa:	d102      	bne.n	8010d02 <Key_Up+0x82>
 8010cfc:	4b86      	ldr	r3, [pc, #536]	; (8010f18 <Key_Up+0x298>)
 8010cfe:	2204      	movs	r2, #4
 8010d00:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6)	Cursor_Position=0;
 8010d02:	4b85      	ldr	r3, [pc, #532]	; (8010f18 <Key_Up+0x298>)
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	2b06      	cmp	r3, #6
 8010d08:	d102      	bne.n	8010d10 <Key_Up+0x90>
 8010d0a:	4b83      	ldr	r3, [pc, #524]	; (8010f18 <Key_Up+0x298>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	701a      	strb	r2, [r3, #0]
	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8010d10:	4b80      	ldr	r3, [pc, #512]	; (8010f14 <Key_Up+0x294>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2b02      	cmp	r3, #2
 8010d16:	d11b      	bne.n	8010d50 <Key_Up+0xd0>
 8010d18:	4b7e      	ldr	r3, [pc, #504]	; (8010f14 <Key_Up+0x294>)
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d117      	bne.n	8010d50 <Key_Up+0xd0>
 8010d20:	4b7c      	ldr	r3, [pc, #496]	; (8010f14 <Key_Up+0x294>)
 8010d22:	689b      	ldr	r3, [r3, #8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d113      	bne.n	8010d50 <Key_Up+0xd0>
	{
		Cursor_Position++;
 8010d28:	4b7b      	ldr	r3, [pc, #492]	; (8010f18 <Key_Up+0x298>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	b2da      	uxtb	r2, r3
 8010d30:	4b79      	ldr	r3, [pc, #484]	; (8010f18 <Key_Up+0x298>)
 8010d32:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3+9)	Cursor_Position=4+9;
 8010d34:	4b78      	ldr	r3, [pc, #480]	; (8010f18 <Key_Up+0x298>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	2b0c      	cmp	r3, #12
 8010d3a:	d102      	bne.n	8010d42 <Key_Up+0xc2>
 8010d3c:	4b76      	ldr	r3, [pc, #472]	; (8010f18 <Key_Up+0x298>)
 8010d3e:	220d      	movs	r2, #13
 8010d40:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6+9)	Cursor_Position=0+9;
 8010d42:	4b75      	ldr	r3, [pc, #468]	; (8010f18 <Key_Up+0x298>)
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2b0f      	cmp	r3, #15
 8010d48:	d102      	bne.n	8010d50 <Key_Up+0xd0>
 8010d4a:	4b73      	ldr	r3, [pc, #460]	; (8010f18 <Key_Up+0x298>)
 8010d4c:	2209      	movs	r2, #9
 8010d4e:	701a      	strb	r2, [r3, #0]
	}

	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 8010d50:	4b70      	ldr	r3, [pc, #448]	; (8010f14 <Key_Up+0x294>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d114      	bne.n	8010d82 <Key_Up+0x102>
 8010d58:	4b6e      	ldr	r3, [pc, #440]	; (8010f14 <Key_Up+0x294>)
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	2b05      	cmp	r3, #5
 8010d5e:	d110      	bne.n	8010d82 <Key_Up+0x102>
 8010d60:	4b6c      	ldr	r3, [pc, #432]	; (8010f14 <Key_Up+0x294>)
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	dd0c      	ble.n	8010d82 <Key_Up+0x102>
	{
		if(xyz.coordinates3==3)	xyz.coordinates3=2;
 8010d68:	4b6a      	ldr	r3, [pc, #424]	; (8010f14 <Key_Up+0x294>)
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	2b03      	cmp	r3, #3
 8010d6e:	d103      	bne.n	8010d78 <Key_Up+0xf8>
 8010d70:	4b68      	ldr	r3, [pc, #416]	; (8010f14 <Key_Up+0x294>)
 8010d72:	2202      	movs	r2, #2
 8010d74:	609a      	str	r2, [r3, #8]
 8010d76:	e004      	b.n	8010d82 <Key_Up+0x102>
		else 					xyz.coordinates3++;
 8010d78:	4b66      	ldr	r3, [pc, #408]	; (8010f14 <Key_Up+0x294>)
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	1c5a      	adds	r2, r3, #1
 8010d7e:	4b65      	ldr	r3, [pc, #404]	; (8010f14 <Key_Up+0x294>)
 8010d80:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 8010d82:	4b64      	ldr	r3, [pc, #400]	; (8010f14 <Key_Up+0x294>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d107      	bne.n	8010d9a <Key_Up+0x11a>
 8010d8a:	4b62      	ldr	r3, [pc, #392]	; (8010f14 <Key_Up+0x294>)
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d103      	bne.n	8010d9a <Key_Up+0x11a>
 8010d92:	4b60      	ldr	r3, [pc, #384]	; (8010f14 <Key_Up+0x294>)
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d00b      	beq.n	8010db2 <Key_Up+0x132>
 8010d9a:	4b5e      	ldr	r3, [pc, #376]	; (8010f14 <Key_Up+0x294>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d117      	bne.n	8010dd2 <Key_Up+0x152>
 8010da2:	4b5c      	ldr	r3, [pc, #368]	; (8010f14 <Key_Up+0x294>)
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	2b02      	cmp	r3, #2
 8010da8:	d113      	bne.n	8010dd2 <Key_Up+0x152>
 8010daa:	4b5a      	ldr	r3, [pc, #360]	; (8010f14 <Key_Up+0x294>)
 8010dac:	689b      	ldr	r3, [r3, #8]
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d10f      	bne.n	8010dd2 <Key_Up+0x152>
	{
		Cursor_Position=6;
 8010db2:	4b59      	ldr	r3, [pc, #356]	; (8010f18 <Key_Up+0x298>)
 8010db4:	2206      	movs	r2, #6
 8010db6:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==2)	xyz.coordinates3=1;
 8010db8:	4b56      	ldr	r3, [pc, #344]	; (8010f14 <Key_Up+0x294>)
 8010dba:	689b      	ldr	r3, [r3, #8]
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d103      	bne.n	8010dc8 <Key_Up+0x148>
 8010dc0:	4b54      	ldr	r3, [pc, #336]	; (8010f14 <Key_Up+0x294>)
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	609a      	str	r2, [r3, #8]
 8010dc6:	e004      	b.n	8010dd2 <Key_Up+0x152>
		else 					xyz.coordinates3++;
 8010dc8:	4b52      	ldr	r3, [pc, #328]	; (8010f14 <Key_Up+0x294>)
 8010dca:	689b      	ldr	r3, [r3, #8]
 8010dcc:	1c5a      	adds	r2, r3, #1
 8010dce:	4b51      	ldr	r3, [pc, #324]	; (8010f14 <Key_Up+0x294>)
 8010dd0:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0)))
 8010dd2:	4b50      	ldr	r3, [pc, #320]	; (8010f14 <Key_Up+0x294>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	2b03      	cmp	r3, #3
 8010dd8:	d107      	bne.n	8010dea <Key_Up+0x16a>
 8010dda:	4b4e      	ldr	r3, [pc, #312]	; (8010f14 <Key_Up+0x294>)
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d103      	bne.n	8010dea <Key_Up+0x16a>
 8010de2:	4b4c      	ldr	r3, [pc, #304]	; (8010f14 <Key_Up+0x294>)
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10b      	bne.n	8010e02 <Key_Up+0x182>
 8010dea:	4b4a      	ldr	r3, [pc, #296]	; (8010f14 <Key_Up+0x294>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b03      	cmp	r3, #3
 8010df0:	d13c      	bne.n	8010e6c <Key_Up+0x1ec>
 8010df2:	4b48      	ldr	r3, [pc, #288]	; (8010f14 <Key_Up+0x294>)
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	d138      	bne.n	8010e6c <Key_Up+0x1ec>
 8010dfa:	4b46      	ldr	r3, [pc, #280]	; (8010f14 <Key_Up+0x294>)
 8010dfc:	689b      	ldr	r3, [r3, #8]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d034      	beq.n	8010e6c <Key_Up+0x1ec>
	{
		Cursor_Position=0;
 8010e02:	4b45      	ldr	r3, [pc, #276]	; (8010f18 <Key_Up+0x298>)
 8010e04:	2200      	movs	r2, #0
 8010e06:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 8010e08:	4b44      	ldr	r3, [pc, #272]	; (8010f1c <Key_Up+0x29c>)
 8010e0a:	2230      	movs	r2, #48	; 0x30
 8010e0c:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 8010e0e:	4b43      	ldr	r3, [pc, #268]	; (8010f1c <Key_Up+0x29c>)
 8010e10:	2230      	movs	r2, #48	; 0x30
 8010e12:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 8010e14:	4b41      	ldr	r3, [pc, #260]	; (8010f1c <Key_Up+0x29c>)
 8010e16:	2230      	movs	r2, #48	; 0x30
 8010e18:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 8010e1a:	4b40      	ldr	r3, [pc, #256]	; (8010f1c <Key_Up+0x29c>)
 8010e1c:	222e      	movs	r2, #46	; 0x2e
 8010e1e:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 8010e20:	4b3e      	ldr	r3, [pc, #248]	; (8010f1c <Key_Up+0x29c>)
 8010e22:	2230      	movs	r2, #48	; 0x30
 8010e24:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 8010e26:	4b3d      	ldr	r3, [pc, #244]	; (8010f1c <Key_Up+0x29c>)
 8010e28:	2230      	movs	r2, #48	; 0x30
 8010e2a:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 8010e2c:	4b3c      	ldr	r3, [pc, #240]	; (8010f20 <Key_Up+0x2a0>)
 8010e2e:	2230      	movs	r2, #48	; 0x30
 8010e30:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 8010e32:	4b3b      	ldr	r3, [pc, #236]	; (8010f20 <Key_Up+0x2a0>)
 8010e34:	2230      	movs	r2, #48	; 0x30
 8010e36:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 8010e38:	4b39      	ldr	r3, [pc, #228]	; (8010f20 <Key_Up+0x2a0>)
 8010e3a:	2230      	movs	r2, #48	; 0x30
 8010e3c:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 8010e3e:	4b38      	ldr	r3, [pc, #224]	; (8010f20 <Key_Up+0x2a0>)
 8010e40:	222e      	movs	r2, #46	; 0x2e
 8010e42:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 8010e44:	4b36      	ldr	r3, [pc, #216]	; (8010f20 <Key_Up+0x2a0>)
 8010e46:	2230      	movs	r2, #48	; 0x30
 8010e48:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 8010e4a:	4b35      	ldr	r3, [pc, #212]	; (8010f20 <Key_Up+0x2a0>)
 8010e4c:	2230      	movs	r2, #48	; 0x30
 8010e4e:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==9) Recall_Save_Number=0;
 8010e50:	4b34      	ldr	r3, [pc, #208]	; (8010f24 <Key_Up+0x2a4>)
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	2b09      	cmp	r3, #9
 8010e56:	d103      	bne.n	8010e60 <Key_Up+0x1e0>
 8010e58:	4b32      	ldr	r3, [pc, #200]	; (8010f24 <Key_Up+0x2a4>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	701a      	strb	r2, [r3, #0]
 8010e5e:	e005      	b.n	8010e6c <Key_Up+0x1ec>
		else 					  Recall_Save_Number++;
 8010e60:	4b30      	ldr	r3, [pc, #192]	; (8010f24 <Key_Up+0x2a4>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	3301      	adds	r3, #1
 8010e66:	b2da      	uxtb	r2, r3
 8010e68:	4b2e      	ldr	r3, [pc, #184]	; (8010f24 <Key_Up+0x2a4>)
 8010e6a:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 8010e6c:	4b29      	ldr	r3, [pc, #164]	; (8010f14 <Key_Up+0x294>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	d114      	bne.n	8010e9e <Key_Up+0x21e>
 8010e74:	4b27      	ldr	r3, [pc, #156]	; (8010f14 <Key_Up+0x294>)
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	2b04      	cmp	r3, #4
 8010e7a:	d110      	bne.n	8010e9e <Key_Up+0x21e>
 8010e7c:	4b25      	ldr	r3, [pc, #148]	; (8010f14 <Key_Up+0x294>)
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00c      	beq.n	8010e9e <Key_Up+0x21e>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 8010e84:	4b23      	ldr	r3, [pc, #140]	; (8010f14 <Key_Up+0x294>)
 8010e86:	689b      	ldr	r3, [r3, #8]
 8010e88:	2b03      	cmp	r3, #3
 8010e8a:	d103      	bne.n	8010e94 <Key_Up+0x214>
 8010e8c:	4b21      	ldr	r3, [pc, #132]	; (8010f14 <Key_Up+0x294>)
 8010e8e:	2201      	movs	r2, #1
 8010e90:	609a      	str	r2, [r3, #8]
 8010e92:	e004      	b.n	8010e9e <Key_Up+0x21e>
		else                    xyz.coordinates3++;
 8010e94:	4b1f      	ldr	r3, [pc, #124]	; (8010f14 <Key_Up+0x294>)
 8010e96:	689b      	ldr	r3, [r3, #8]
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	4b1e      	ldr	r3, [pc, #120]	; (8010f14 <Key_Up+0x294>)
 8010e9c:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 8010e9e:	4b1d      	ldr	r3, [pc, #116]	; (8010f14 <Key_Up+0x294>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 8010ea2:	4b1c      	ldr	r3, [pc, #112]	; (8010f14 <Key_Up+0x294>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d114      	bne.n	8010ed4 <Key_Up+0x254>
 8010eaa:	4b1a      	ldr	r3, [pc, #104]	; (8010f14 <Key_Up+0x294>)
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	2b06      	cmp	r3, #6
 8010eb0:	d110      	bne.n	8010ed4 <Key_Up+0x254>
 8010eb2:	4b18      	ldr	r3, [pc, #96]	; (8010f14 <Key_Up+0x294>)
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00c      	beq.n	8010ed4 <Key_Up+0x254>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 8010eba:	4b16      	ldr	r3, [pc, #88]	; (8010f14 <Key_Up+0x294>)
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	2b03      	cmp	r3, #3
 8010ec0:	d103      	bne.n	8010eca <Key_Up+0x24a>
 8010ec2:	4b14      	ldr	r3, [pc, #80]	; (8010f14 <Key_Up+0x294>)
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	609a      	str	r2, [r3, #8]
 8010ec8:	e004      	b.n	8010ed4 <Key_Up+0x254>
		else                    xyz.coordinates3++;
 8010eca:	4b12      	ldr	r3, [pc, #72]	; (8010f14 <Key_Up+0x294>)
 8010ecc:	689b      	ldr	r3, [r3, #8]
 8010ece:	1c5a      	adds	r2, r3, #1
 8010ed0:	4b10      	ldr	r3, [pc, #64]	; (8010f14 <Key_Up+0x294>)
 8010ed2:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 8010ed4:	4b0f      	ldr	r3, [pc, #60]	; (8010f14 <Key_Up+0x294>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d117      	bne.n	8010f0c <Key_Up+0x28c>
 8010edc:	4b0d      	ldr	r3, [pc, #52]	; (8010f14 <Key_Up+0x294>)
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	2b08      	cmp	r3, #8
 8010ee2:	d113      	bne.n	8010f0c <Key_Up+0x28c>
 8010ee4:	4b0b      	ldr	r3, [pc, #44]	; (8010f14 <Key_Up+0x294>)
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d00f      	beq.n	8010f0c <Key_Up+0x28c>
	{
		Cursor_Position=9;
 8010eec:	4b0a      	ldr	r3, [pc, #40]	; (8010f18 <Key_Up+0x298>)
 8010eee:	2209      	movs	r2, #9
 8010ef0:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==4) xyz.coordinates3=1;
 8010ef2:	4b08      	ldr	r3, [pc, #32]	; (8010f14 <Key_Up+0x294>)
 8010ef4:	689b      	ldr	r3, [r3, #8]
 8010ef6:	2b04      	cmp	r3, #4
 8010ef8:	d103      	bne.n	8010f02 <Key_Up+0x282>
 8010efa:	4b06      	ldr	r3, [pc, #24]	; (8010f14 <Key_Up+0x294>)
 8010efc:	2201      	movs	r2, #1
 8010efe:	609a      	str	r2, [r3, #8]
		else                    xyz.coordinates3++;

	}

}
 8010f00:	e004      	b.n	8010f0c <Key_Up+0x28c>
		else                    xyz.coordinates3++;
 8010f02:	4b04      	ldr	r3, [pc, #16]	; (8010f14 <Key_Up+0x294>)
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	1c5a      	adds	r2, r3, #1
 8010f08:	4b02      	ldr	r3, [pc, #8]	; (8010f14 <Key_Up+0x294>)
 8010f0a:	609a      	str	r2, [r3, #8]
}
 8010f0c:	46c0      	nop			; (mov r8, r8)
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	46c0      	nop			; (mov r8, r8)
 8010f14:	200039f4 	.word	0x200039f4
 8010f18:	2000398e 	.word	0x2000398e
 8010f1c:	2000301c 	.word	0x2000301c
 8010f20:	20003028 	.word	0x20003028
 8010f24:	2000398d 	.word	0x2000398d

08010f28 <Key_Down>:
 * @brief  按键Up的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Down(void)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0


	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010f2c:	4b9f      	ldr	r3, [pc, #636]	; (80111ac <Key_Down+0x284>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10c      	bne.n	8010f4e <Key_Down+0x26>
 8010f34:	4b9d      	ldr	r3, [pc, #628]	; (80111ac <Key_Down+0x284>)
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d108      	bne.n	8010f4e <Key_Down+0x26>
 8010f3c:	4b9b      	ldr	r3, [pc, #620]	; (80111ac <Key_Down+0x284>)
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d104      	bne.n	8010f4e <Key_Down+0x26>
	{
		//get_voltage_current(READ_CURRENT);
		DAC_Cmd_send(1,0x0a,0x01);//fall
 8010f44:	2201      	movs	r2, #1
 8010f46:	210a      	movs	r1, #10
 8010f48:	2001      	movs	r0, #1
 8010f4a:	f7fb fc49 	bl	800c7e0 <DAC_Cmd_send>

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010f4e:	4b97      	ldr	r3, [pc, #604]	; (80111ac <Key_Down+0x284>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d110      	bne.n	8010f78 <Key_Down+0x50>
 8010f56:	4b95      	ldr	r3, [pc, #596]	; (80111ac <Key_Down+0x284>)
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d10c      	bne.n	8010f78 <Key_Down+0x50>
	{
		if(xyz.coordinates2==1) xyz.coordinates2=8;
 8010f5e:	4b93      	ldr	r3, [pc, #588]	; (80111ac <Key_Down+0x284>)
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d103      	bne.n	8010f6e <Key_Down+0x46>
 8010f66:	4b91      	ldr	r3, [pc, #580]	; (80111ac <Key_Down+0x284>)
 8010f68:	2208      	movs	r2, #8
 8010f6a:	605a      	str	r2, [r3, #4]
 8010f6c:	e004      	b.n	8010f78 <Key_Down+0x50>
		else 					xyz.coordinates2--;
 8010f6e:	4b8f      	ldr	r3, [pc, #572]	; (80111ac <Key_Down+0x284>)
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	1e5a      	subs	r2, r3, #1
 8010f74:	4b8d      	ldr	r3, [pc, #564]	; (80111ac <Key_Down+0x284>)
 8010f76:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 8010f78:	4b8c      	ldr	r3, [pc, #560]	; (80111ac <Key_Down+0x284>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b02      	cmp	r3, #2
 8010f7e:	d11c      	bne.n	8010fba <Key_Down+0x92>
 8010f80:	4b8a      	ldr	r3, [pc, #552]	; (80111ac <Key_Down+0x284>)
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	2b02      	cmp	r3, #2
 8010f86:	d118      	bne.n	8010fba <Key_Down+0x92>
 8010f88:	4b88      	ldr	r3, [pc, #544]	; (80111ac <Key_Down+0x284>)
 8010f8a:	689b      	ldr	r3, [r3, #8]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d114      	bne.n	8010fba <Key_Down+0x92>
	{
		if(Cursor_Position==0)
 8010f90:	4b87      	ldr	r3, [pc, #540]	; (80111b0 <Key_Down+0x288>)
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d103      	bne.n	8010fa0 <Key_Down+0x78>
		{
			Cursor_Position=5;
 8010f98:	4b85      	ldr	r3, [pc, #532]	; (80111b0 <Key_Down+0x288>)
 8010f9a:	2205      	movs	r2, #5
 8010f9c:	701a      	strb	r2, [r3, #0]
			return;
 8010f9e:	e103      	b.n	80111a8 <Key_Down+0x280>
		}
		if(Cursor_Position==4)
 8010fa0:	4b83      	ldr	r3, [pc, #524]	; (80111b0 <Key_Down+0x288>)
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	2b04      	cmp	r3, #4
 8010fa6:	d102      	bne.n	8010fae <Key_Down+0x86>
		{
			Cursor_Position=3;
 8010fa8:	4b81      	ldr	r3, [pc, #516]	; (80111b0 <Key_Down+0x288>)
 8010faa:	2203      	movs	r2, #3
 8010fac:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 8010fae:	4b80      	ldr	r3, [pc, #512]	; (80111b0 <Key_Down+0x288>)
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	3b01      	subs	r3, #1
 8010fb4:	b2da      	uxtb	r2, r3
 8010fb6:	4b7e      	ldr	r3, [pc, #504]	; (80111b0 <Key_Down+0x288>)
 8010fb8:	701a      	strb	r2, [r3, #0]

	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8010fba:	4b7c      	ldr	r3, [pc, #496]	; (80111ac <Key_Down+0x284>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	d11c      	bne.n	8010ffc <Key_Down+0xd4>
 8010fc2:	4b7a      	ldr	r3, [pc, #488]	; (80111ac <Key_Down+0x284>)
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d118      	bne.n	8010ffc <Key_Down+0xd4>
 8010fca:	4b78      	ldr	r3, [pc, #480]	; (80111ac <Key_Down+0x284>)
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d114      	bne.n	8010ffc <Key_Down+0xd4>
	{
		if(Cursor_Position==0+9)
 8010fd2:	4b77      	ldr	r3, [pc, #476]	; (80111b0 <Key_Down+0x288>)
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	2b09      	cmp	r3, #9
 8010fd8:	d103      	bne.n	8010fe2 <Key_Down+0xba>
		{
			Cursor_Position=5+9;
 8010fda:	4b75      	ldr	r3, [pc, #468]	; (80111b0 <Key_Down+0x288>)
 8010fdc:	220e      	movs	r2, #14
 8010fde:	701a      	strb	r2, [r3, #0]
			return;
 8010fe0:	e0e2      	b.n	80111a8 <Key_Down+0x280>
		}
		if(Cursor_Position==4+9)
 8010fe2:	4b73      	ldr	r3, [pc, #460]	; (80111b0 <Key_Down+0x288>)
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	2b0d      	cmp	r3, #13
 8010fe8:	d102      	bne.n	8010ff0 <Key_Down+0xc8>
		{
			Cursor_Position=3+9;
 8010fea:	4b71      	ldr	r3, [pc, #452]	; (80111b0 <Key_Down+0x288>)
 8010fec:	220c      	movs	r2, #12
 8010fee:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 8010ff0:	4b6f      	ldr	r3, [pc, #444]	; (80111b0 <Key_Down+0x288>)
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	4b6d      	ldr	r3, [pc, #436]	; (80111b0 <Key_Down+0x288>)
 8010ffa:	701a      	strb	r2, [r3, #0]
	}

	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 8010ffc:	4b6b      	ldr	r3, [pc, #428]	; (80111ac <Key_Down+0x284>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b01      	cmp	r3, #1
 8011002:	d114      	bne.n	801102e <Key_Down+0x106>
 8011004:	4b69      	ldr	r3, [pc, #420]	; (80111ac <Key_Down+0x284>)
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	2b05      	cmp	r3, #5
 801100a:	d110      	bne.n	801102e <Key_Down+0x106>
 801100c:	4b67      	ldr	r3, [pc, #412]	; (80111ac <Key_Down+0x284>)
 801100e:	689b      	ldr	r3, [r3, #8]
 8011010:	2b01      	cmp	r3, #1
 8011012:	dd0c      	ble.n	801102e <Key_Down+0x106>
	{
		if(xyz.coordinates3==2)	xyz.coordinates3=3;
 8011014:	4b65      	ldr	r3, [pc, #404]	; (80111ac <Key_Down+0x284>)
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	2b02      	cmp	r3, #2
 801101a:	d103      	bne.n	8011024 <Key_Down+0xfc>
 801101c:	4b63      	ldr	r3, [pc, #396]	; (80111ac <Key_Down+0x284>)
 801101e:	2203      	movs	r2, #3
 8011020:	609a      	str	r2, [r3, #8]
 8011022:	e004      	b.n	801102e <Key_Down+0x106>
		else 					xyz.coordinates3--;
 8011024:	4b61      	ldr	r3, [pc, #388]	; (80111ac <Key_Down+0x284>)
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	1e5a      	subs	r2, r3, #1
 801102a:	4b60      	ldr	r3, [pc, #384]	; (80111ac <Key_Down+0x284>)
 801102c:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 801102e:	4b5f      	ldr	r3, [pc, #380]	; (80111ac <Key_Down+0x284>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d107      	bne.n	8011046 <Key_Down+0x11e>
 8011036:	4b5d      	ldr	r3, [pc, #372]	; (80111ac <Key_Down+0x284>)
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	2b02      	cmp	r3, #2
 801103c:	d103      	bne.n	8011046 <Key_Down+0x11e>
 801103e:	4b5b      	ldr	r3, [pc, #364]	; (80111ac <Key_Down+0x284>)
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	2b01      	cmp	r3, #1
 8011044:	d00b      	beq.n	801105e <Key_Down+0x136>
 8011046:	4b59      	ldr	r3, [pc, #356]	; (80111ac <Key_Down+0x284>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b01      	cmp	r3, #1
 801104c:	d117      	bne.n	801107e <Key_Down+0x156>
 801104e:	4b57      	ldr	r3, [pc, #348]	; (80111ac <Key_Down+0x284>)
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	2b02      	cmp	r3, #2
 8011054:	d113      	bne.n	801107e <Key_Down+0x156>
 8011056:	4b55      	ldr	r3, [pc, #340]	; (80111ac <Key_Down+0x284>)
 8011058:	689b      	ldr	r3, [r3, #8]
 801105a:	2b02      	cmp	r3, #2
 801105c:	d10f      	bne.n	801107e <Key_Down+0x156>
	{
		Cursor_Position=6;
 801105e:	4b54      	ldr	r3, [pc, #336]	; (80111b0 <Key_Down+0x288>)
 8011060:	2206      	movs	r2, #6
 8011062:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1)	xyz.coordinates3=2;
 8011064:	4b51      	ldr	r3, [pc, #324]	; (80111ac <Key_Down+0x284>)
 8011066:	689b      	ldr	r3, [r3, #8]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d103      	bne.n	8011074 <Key_Down+0x14c>
 801106c:	4b4f      	ldr	r3, [pc, #316]	; (80111ac <Key_Down+0x284>)
 801106e:	2202      	movs	r2, #2
 8011070:	609a      	str	r2, [r3, #8]
 8011072:	e004      	b.n	801107e <Key_Down+0x156>
		else 					xyz.coordinates3--;
 8011074:	4b4d      	ldr	r3, [pc, #308]	; (80111ac <Key_Down+0x284>)
 8011076:	689b      	ldr	r3, [r3, #8]
 8011078:	1e5a      	subs	r2, r3, #1
 801107a:	4b4c      	ldr	r3, [pc, #304]	; (80111ac <Key_Down+0x284>)
 801107c:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 801107e:	4b4b      	ldr	r3, [pc, #300]	; (80111ac <Key_Down+0x284>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	2b03      	cmp	r3, #3
 8011084:	d103      	bne.n	801108e <Key_Down+0x166>
 8011086:	4b49      	ldr	r3, [pc, #292]	; (80111ac <Key_Down+0x284>)
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	2b01      	cmp	r3, #1
 801108c:	d007      	beq.n	801109e <Key_Down+0x176>
 801108e:	4b47      	ldr	r3, [pc, #284]	; (80111ac <Key_Down+0x284>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b03      	cmp	r3, #3
 8011094:	d138      	bne.n	8011108 <Key_Down+0x1e0>
 8011096:	4b45      	ldr	r3, [pc, #276]	; (80111ac <Key_Down+0x284>)
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	2b02      	cmp	r3, #2
 801109c:	d134      	bne.n	8011108 <Key_Down+0x1e0>
	{
		Cursor_Position=0;
 801109e:	4b44      	ldr	r3, [pc, #272]	; (80111b0 <Key_Down+0x288>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 80110a4:	4b43      	ldr	r3, [pc, #268]	; (80111b4 <Key_Down+0x28c>)
 80110a6:	2230      	movs	r2, #48	; 0x30
 80110a8:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 80110aa:	4b42      	ldr	r3, [pc, #264]	; (80111b4 <Key_Down+0x28c>)
 80110ac:	2230      	movs	r2, #48	; 0x30
 80110ae:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 80110b0:	4b40      	ldr	r3, [pc, #256]	; (80111b4 <Key_Down+0x28c>)
 80110b2:	2230      	movs	r2, #48	; 0x30
 80110b4:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 80110b6:	4b3f      	ldr	r3, [pc, #252]	; (80111b4 <Key_Down+0x28c>)
 80110b8:	222e      	movs	r2, #46	; 0x2e
 80110ba:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 80110bc:	4b3d      	ldr	r3, [pc, #244]	; (80111b4 <Key_Down+0x28c>)
 80110be:	2230      	movs	r2, #48	; 0x30
 80110c0:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 80110c2:	4b3c      	ldr	r3, [pc, #240]	; (80111b4 <Key_Down+0x28c>)
 80110c4:	2230      	movs	r2, #48	; 0x30
 80110c6:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 80110c8:	4b3b      	ldr	r3, [pc, #236]	; (80111b8 <Key_Down+0x290>)
 80110ca:	2230      	movs	r2, #48	; 0x30
 80110cc:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 80110ce:	4b3a      	ldr	r3, [pc, #232]	; (80111b8 <Key_Down+0x290>)
 80110d0:	2230      	movs	r2, #48	; 0x30
 80110d2:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 80110d4:	4b38      	ldr	r3, [pc, #224]	; (80111b8 <Key_Down+0x290>)
 80110d6:	2230      	movs	r2, #48	; 0x30
 80110d8:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 80110da:	4b37      	ldr	r3, [pc, #220]	; (80111b8 <Key_Down+0x290>)
 80110dc:	222e      	movs	r2, #46	; 0x2e
 80110de:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 80110e0:	4b35      	ldr	r3, [pc, #212]	; (80111b8 <Key_Down+0x290>)
 80110e2:	2230      	movs	r2, #48	; 0x30
 80110e4:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 80110e6:	4b34      	ldr	r3, [pc, #208]	; (80111b8 <Key_Down+0x290>)
 80110e8:	2230      	movs	r2, #48	; 0x30
 80110ea:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==0) Recall_Save_Number=9;
 80110ec:	4b33      	ldr	r3, [pc, #204]	; (80111bc <Key_Down+0x294>)
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d103      	bne.n	80110fc <Key_Down+0x1d4>
 80110f4:	4b31      	ldr	r3, [pc, #196]	; (80111bc <Key_Down+0x294>)
 80110f6:	2209      	movs	r2, #9
 80110f8:	701a      	strb	r2, [r3, #0]
 80110fa:	e005      	b.n	8011108 <Key_Down+0x1e0>
		else 					   Recall_Save_Number--;
 80110fc:	4b2f      	ldr	r3, [pc, #188]	; (80111bc <Key_Down+0x294>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	3b01      	subs	r3, #1
 8011102:	b2da      	uxtb	r2, r3
 8011104:	4b2d      	ldr	r3, [pc, #180]	; (80111bc <Key_Down+0x294>)
 8011106:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 8011108:	4b28      	ldr	r3, [pc, #160]	; (80111ac <Key_Down+0x284>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d114      	bne.n	801113a <Key_Down+0x212>
 8011110:	4b26      	ldr	r3, [pc, #152]	; (80111ac <Key_Down+0x284>)
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	2b04      	cmp	r3, #4
 8011116:	d110      	bne.n	801113a <Key_Down+0x212>
 8011118:	4b24      	ldr	r3, [pc, #144]	; (80111ac <Key_Down+0x284>)
 801111a:	689b      	ldr	r3, [r3, #8]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00c      	beq.n	801113a <Key_Down+0x212>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 8011120:	4b22      	ldr	r3, [pc, #136]	; (80111ac <Key_Down+0x284>)
 8011122:	689b      	ldr	r3, [r3, #8]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d103      	bne.n	8011130 <Key_Down+0x208>
 8011128:	4b20      	ldr	r3, [pc, #128]	; (80111ac <Key_Down+0x284>)
 801112a:	2203      	movs	r2, #3
 801112c:	609a      	str	r2, [r3, #8]
 801112e:	e004      	b.n	801113a <Key_Down+0x212>
		else                    xyz.coordinates3--;
 8011130:	4b1e      	ldr	r3, [pc, #120]	; (80111ac <Key_Down+0x284>)
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	1e5a      	subs	r2, r3, #1
 8011136:	4b1d      	ldr	r3, [pc, #116]	; (80111ac <Key_Down+0x284>)
 8011138:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 801113a:	4b1c      	ldr	r3, [pc, #112]	; (80111ac <Key_Down+0x284>)
 801113c:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 801113e:	4b1b      	ldr	r3, [pc, #108]	; (80111ac <Key_Down+0x284>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b01      	cmp	r3, #1
 8011144:	d114      	bne.n	8011170 <Key_Down+0x248>
 8011146:	4b19      	ldr	r3, [pc, #100]	; (80111ac <Key_Down+0x284>)
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	2b06      	cmp	r3, #6
 801114c:	d110      	bne.n	8011170 <Key_Down+0x248>
 801114e:	4b17      	ldr	r3, [pc, #92]	; (80111ac <Key_Down+0x284>)
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00c      	beq.n	8011170 <Key_Down+0x248>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 8011156:	4b15      	ldr	r3, [pc, #84]	; (80111ac <Key_Down+0x284>)
 8011158:	689b      	ldr	r3, [r3, #8]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d103      	bne.n	8011166 <Key_Down+0x23e>
 801115e:	4b13      	ldr	r3, [pc, #76]	; (80111ac <Key_Down+0x284>)
 8011160:	2203      	movs	r2, #3
 8011162:	609a      	str	r2, [r3, #8]
 8011164:	e004      	b.n	8011170 <Key_Down+0x248>
		else                    xyz.coordinates3--;
 8011166:	4b11      	ldr	r3, [pc, #68]	; (80111ac <Key_Down+0x284>)
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	1e5a      	subs	r2, r3, #1
 801116c:	4b0f      	ldr	r3, [pc, #60]	; (80111ac <Key_Down+0x284>)
 801116e:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 8011170:	4b0e      	ldr	r3, [pc, #56]	; (80111ac <Key_Down+0x284>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d117      	bne.n	80111a8 <Key_Down+0x280>
 8011178:	4b0c      	ldr	r3, [pc, #48]	; (80111ac <Key_Down+0x284>)
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	2b08      	cmp	r3, #8
 801117e:	d113      	bne.n	80111a8 <Key_Down+0x280>
 8011180:	4b0a      	ldr	r3, [pc, #40]	; (80111ac <Key_Down+0x284>)
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00f      	beq.n	80111a8 <Key_Down+0x280>
	{
		Cursor_Position=9;
 8011188:	4b09      	ldr	r3, [pc, #36]	; (80111b0 <Key_Down+0x288>)
 801118a:	2209      	movs	r2, #9
 801118c:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1) xyz.coordinates3=4;
 801118e:	4b07      	ldr	r3, [pc, #28]	; (80111ac <Key_Down+0x284>)
 8011190:	689b      	ldr	r3, [r3, #8]
 8011192:	2b01      	cmp	r3, #1
 8011194:	d103      	bne.n	801119e <Key_Down+0x276>
 8011196:	4b05      	ldr	r3, [pc, #20]	; (80111ac <Key_Down+0x284>)
 8011198:	2204      	movs	r2, #4
 801119a:	609a      	str	r2, [r3, #8]
 801119c:	e004      	b.n	80111a8 <Key_Down+0x280>
		else                    xyz.coordinates3--;
 801119e:	4b03      	ldr	r3, [pc, #12]	; (80111ac <Key_Down+0x284>)
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	1e5a      	subs	r2, r3, #1
 80111a4:	4b01      	ldr	r3, [pc, #4]	; (80111ac <Key_Down+0x284>)
 80111a6:	609a      	str	r2, [r3, #8]

	}


}
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	200039f4 	.word	0x200039f4
 80111b0:	2000398e 	.word	0x2000398e
 80111b4:	2000301c 	.word	0x2000301c
 80111b8:	20003028 	.word	0x20003028
 80111bc:	2000398d 	.word	0x2000398d

080111c0 <Key_ESC>:
 * @brief  按键ESC的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_ESC(void)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	af00      	add	r7, sp, #0
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 80111c4:	4b5b      	ldr	r3, [pc, #364]	; (8011334 <Key_ESC+0x174>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d10e      	bne.n	80111ea <Key_ESC+0x2a>
 80111cc:	4b59      	ldr	r3, [pc, #356]	; (8011334 <Key_ESC+0x174>)
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d10a      	bne.n	80111ea <Key_ESC+0x2a>
 80111d4:	4b57      	ldr	r3, [pc, #348]	; (8011334 <Key_ESC+0x174>)
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d106      	bne.n	80111ea <Key_ESC+0x2a>
	{
		COUNT_ESC++;
 80111dc:	4b56      	ldr	r3, [pc, #344]	; (8011338 <Key_ESC+0x178>)
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	3301      	adds	r3, #1
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	4b54      	ldr	r3, [pc, #336]	; (8011338 <Key_ESC+0x178>)
 80111e6:	701a      	strb	r2, [r3, #0]
		return;
 80111e8:	e0a1      	b.n	801132e <Key_ESC+0x16e>
	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 80111ea:	4b52      	ldr	r3, [pc, #328]	; (8011334 <Key_ESC+0x174>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d10c      	bne.n	801120c <Key_ESC+0x4c>
 80111f2:	4b50      	ldr	r3, [pc, #320]	; (8011334 <Key_ESC+0x174>)
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d108      	bne.n	801120c <Key_ESC+0x4c>
	{
		xyz.coordinates1=0;
 80111fa:	4b4e      	ldr	r3, [pc, #312]	; (8011334 <Key_ESC+0x174>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8011200:	4b4c      	ldr	r3, [pc, #304]	; (8011334 <Key_ESC+0x174>)
 8011202:	2200      	movs	r2, #0
 8011204:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8011206:	4b4b      	ldr	r3, [pc, #300]	; (8011334 <Key_ESC+0x174>)
 8011208:	2200      	movs	r2, #0
 801120a:	609a      	str	r2, [r3, #8]
	}
	/*second menu enter*/
	if( (xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 801120c:	4b49      	ldr	r3, [pc, #292]	; (8011334 <Key_ESC+0x174>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d10d      	bne.n	8011230 <Key_ESC+0x70>
 8011214:	4b47      	ldr	r3, [pc, #284]	; (8011334 <Key_ESC+0x174>)
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d009      	beq.n	8011230 <Key_ESC+0x70>
 801121c:	4b45      	ldr	r3, [pc, #276]	; (8011334 <Key_ESC+0x174>)
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d005      	beq.n	8011230 <Key_ESC+0x70>
	{
		Cursor_Position=0;
 8011224:	4b45      	ldr	r3, [pc, #276]	; (801133c <Key_ESC+0x17c>)
 8011226:	2200      	movs	r2, #0
 8011228:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=0;
 801122a:	4b42      	ldr	r3, [pc, #264]	; (8011334 <Key_ESC+0x174>)
 801122c:	2200      	movs	r2, #0
 801122e:	609a      	str	r2, [r3, #8]
	}
	/*I——SET V——SET*/
	if( ((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0)) || ((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0)) )
 8011230:	4b40      	ldr	r3, [pc, #256]	; (8011334 <Key_ESC+0x174>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b02      	cmp	r3, #2
 8011236:	d107      	bne.n	8011248 <Key_ESC+0x88>
 8011238:	4b3e      	ldr	r3, [pc, #248]	; (8011334 <Key_ESC+0x174>)
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d103      	bne.n	8011248 <Key_ESC+0x88>
 8011240:	4b3c      	ldr	r3, [pc, #240]	; (8011334 <Key_ESC+0x174>)
 8011242:	689b      	ldr	r3, [r3, #8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00b      	beq.n	8011260 <Key_ESC+0xa0>
 8011248:	4b3a      	ldr	r3, [pc, #232]	; (8011334 <Key_ESC+0x174>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b02      	cmp	r3, #2
 801124e:	d110      	bne.n	8011272 <Key_ESC+0xb2>
 8011250:	4b38      	ldr	r3, [pc, #224]	; (8011334 <Key_ESC+0x174>)
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	2b02      	cmp	r3, #2
 8011256:	d10c      	bne.n	8011272 <Key_ESC+0xb2>
 8011258:	4b36      	ldr	r3, [pc, #216]	; (8011334 <Key_ESC+0x174>)
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d108      	bne.n	8011272 <Key_ESC+0xb2>
	{
		xyz.coordinates1=0;
 8011260:	4b34      	ldr	r3, [pc, #208]	; (8011334 <Key_ESC+0x174>)
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8011266:	4b33      	ldr	r3, [pc, #204]	; (8011334 <Key_ESC+0x174>)
 8011268:	2200      	movs	r2, #0
 801126a:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 801126c:	4b31      	ldr	r3, [pc, #196]	; (8011334 <Key_ESC+0x174>)
 801126e:	2200      	movs	r2, #0
 8011270:	609a      	str	r2, [r3, #8]
	}
	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3!=0))
 8011272:	4b30      	ldr	r3, [pc, #192]	; (8011334 <Key_ESC+0x174>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2b01      	cmp	r3, #1
 8011278:	d10a      	bne.n	8011290 <Key_ESC+0xd0>
 801127a:	4b2e      	ldr	r3, [pc, #184]	; (8011334 <Key_ESC+0x174>)
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	2b05      	cmp	r3, #5
 8011280:	d106      	bne.n	8011290 <Key_ESC+0xd0>
 8011282:	4b2c      	ldr	r3, [pc, #176]	; (8011334 <Key_ESC+0x174>)
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d002      	beq.n	8011290 <Key_ESC+0xd0>
	{
		xyz.coordinates3=0;
 801128a:	4b2a      	ldr	r3, [pc, #168]	; (8011334 <Key_ESC+0x174>)
 801128c:	2200      	movs	r2, #0
 801128e:	609a      	str	r2, [r3, #8]
	}

	/*I rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1))
 8011290:	4b28      	ldr	r3, [pc, #160]	; (8011334 <Key_ESC+0x174>)
 8011292:	681b      	ldr	r3, [r3, #0]
	{

	}
	/*V rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2))
 8011294:	4b27      	ldr	r3, [pc, #156]	; (8011334 <Key_ESC+0x174>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d10a      	bne.n	80112b2 <Key_ESC+0xf2>
 801129c:	4b25      	ldr	r3, [pc, #148]	; (8011334 <Key_ESC+0x174>)
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	2b02      	cmp	r3, #2
 80112a2:	d106      	bne.n	80112b2 <Key_ESC+0xf2>
 80112a4:	4b23      	ldr	r3, [pc, #140]	; (8011334 <Key_ESC+0x174>)
 80112a6:	689b      	ldr	r3, [r3, #8]
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d102      	bne.n	80112b2 <Key_ESC+0xf2>
	{
		xyz.coordinates3=0;
 80112ac:	4b21      	ldr	r3, [pc, #132]	; (8011334 <Key_ESC+0x174>)
 80112ae:	2200      	movs	r2, #0
 80112b0:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 80112b2:	4b20      	ldr	r3, [pc, #128]	; (8011334 <Key_ESC+0x174>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	d103      	bne.n	80112c2 <Key_ESC+0x102>
 80112ba:	4b1e      	ldr	r3, [pc, #120]	; (8011334 <Key_ESC+0x174>)
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d007      	beq.n	80112d2 <Key_ESC+0x112>
 80112c2:	4b1c      	ldr	r3, [pc, #112]	; (8011334 <Key_ESC+0x174>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	d10e      	bne.n	80112e8 <Key_ESC+0x128>
 80112ca:	4b1a      	ldr	r3, [pc, #104]	; (8011334 <Key_ESC+0x174>)
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	2b02      	cmp	r3, #2
 80112d0:	d10a      	bne.n	80112e8 <Key_ESC+0x128>
	{
		xyz.coordinates1=0;
 80112d2:	4b18      	ldr	r3, [pc, #96]	; (8011334 <Key_ESC+0x174>)
 80112d4:	2200      	movs	r2, #0
 80112d6:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 80112d8:	4b16      	ldr	r3, [pc, #88]	; (8011334 <Key_ESC+0x174>)
 80112da:	2200      	movs	r2, #0
 80112dc:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 80112de:	4b15      	ldr	r3, [pc, #84]	; (8011334 <Key_ESC+0x174>)
 80112e0:	2200      	movs	r2, #0
 80112e2:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 80112e4:	f003 f8be 	bl	8014464 <Cursor_flash_off>
	}
	/*protect*/
	if( (xyz.coordinates1==4) && (xyz.coordinates2==1) )
 80112e8:	4b12      	ldr	r3, [pc, #72]	; (8011334 <Key_ESC+0x174>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2b04      	cmp	r3, #4
 80112ee:	d105      	bne.n	80112fc <Key_ESC+0x13c>
 80112f0:	4b10      	ldr	r3, [pc, #64]	; (8011334 <Key_ESC+0x174>)
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d101      	bne.n	80112fc <Key_ESC+0x13c>
	{

		NVIC_SystemReset();
 80112f8:	f7fc fff6 	bl	800e2e8 <__NVIC_SystemReset>

	}
	if( (xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 80112fc:	4b0d      	ldr	r3, [pc, #52]	; (8011334 <Key_ESC+0x174>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b09      	cmp	r3, #9
 8011302:	d112      	bne.n	801132a <Key_ESC+0x16a>
 8011304:	4b0b      	ldr	r3, [pc, #44]	; (8011334 <Key_ESC+0x174>)
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	2b09      	cmp	r3, #9
 801130a:	d10e      	bne.n	801132a <Key_ESC+0x16a>
 801130c:	4b09      	ldr	r3, [pc, #36]	; (8011334 <Key_ESC+0x174>)
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	2b09      	cmp	r3, #9
 8011312:	d10a      	bne.n	801132a <Key_ESC+0x16a>
	{
		xyz.coordinates1=0;
 8011314:	4b07      	ldr	r3, [pc, #28]	; (8011334 <Key_ESC+0x174>)
 8011316:	2200      	movs	r2, #0
 8011318:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 801131a:	4b06      	ldr	r3, [pc, #24]	; (8011334 <Key_ESC+0x174>)
 801131c:	2200      	movs	r2, #0
 801131e:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8011320:	4b04      	ldr	r3, [pc, #16]	; (8011334 <Key_ESC+0x174>)
 8011322:	2200      	movs	r2, #0
 8011324:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 8011326:	f003 f89d 	bl	8014464 <Cursor_flash_off>
	}

	Cursor_flash_off();
 801132a:	f003 f89b 	bl	8014464 <Cursor_flash_off>


}
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	46c0      	nop			; (mov r8, r8)
 8011334:	200039f4 	.word	0x200039f4
 8011338:	2000398c 	.word	0x2000398c
 801133c:	2000398e 	.word	0x2000398e

08011340 <key_scan>:
 * @brief  按键扫描函数
 * @param	None
 * @retval None
 */
void key_scan(void)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
	if(keys_EN==DISABLE) return;
 8011346:	4b97      	ldr	r3, [pc, #604]	; (80115a4 <key_scan+0x264>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d100      	bne.n	8011350 <key_scan+0x10>
 801134e:	e11c      	b.n	801158a <key_scan+0x24a>
	static int Press_Status2;
	static int Press_Status3;


	/*IO RESET*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);
 8011350:	2380      	movs	r3, #128	; 0x80
 8011352:	019b      	lsls	r3, r3, #6
 8011354:	4894      	ldr	r0, [pc, #592]	; (80115a8 <key_scan+0x268>)
 8011356:	2201      	movs	r2, #1
 8011358:	0019      	movs	r1, r3
 801135a:	f7f5 fdea 	bl	8006f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);
 801135e:	2380      	movs	r3, #128	; 0x80
 8011360:	01db      	lsls	r3, r3, #7
 8011362:	4891      	ldr	r0, [pc, #580]	; (80115a8 <key_scan+0x268>)
 8011364:	2201      	movs	r2, #1
 8011366:	0019      	movs	r1, r3
 8011368:	f7f5 fde3 	bl	8006f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_SET);
 801136c:	2380      	movs	r3, #128	; 0x80
 801136e:	021b      	lsls	r3, r3, #8
 8011370:	488d      	ldr	r0, [pc, #564]	; (80115a8 <key_scan+0x268>)
 8011372:	2201      	movs	r2, #1
 8011374:	0019      	movs	r1, r3
 8011376:	f7f5 fddc 	bl	8006f32 <HAL_GPIO_WritePin>

	/*Scan the firest row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_RESET);
 801137a:	2380      	movs	r3, #128	; 0x80
 801137c:	019b      	lsls	r3, r3, #6
 801137e:	488a      	ldr	r0, [pc, #552]	; (80115a8 <key_scan+0x268>)
 8011380:	2200      	movs	r2, #0
 8011382:	0019      	movs	r1, r3
 8011384:	f7f5 fdd5 	bl	8006f32 <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 8011388:	1dfb      	adds	r3, r7, #7
 801138a:	2200      	movs	r2, #0
 801138c:	701a      	strb	r2, [r3, #0]
 801138e:	e004      	b.n	801139a <key_scan+0x5a>
 8011390:	1dfb      	adds	r3, r7, #7
 8011392:	781a      	ldrb	r2, [r3, #0]
 8011394:	1dfb      	adds	r3, r7, #7
 8011396:	3201      	adds	r2, #1
 8011398:	701a      	strb	r2, [r3, #0]
 801139a:	1dfb      	adds	r3, r7, #7
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b63      	cmp	r3, #99	; 0x63
 80113a0:	d9f6      	bls.n	8011390 <key_scan+0x50>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 80113a2:	4b82      	ldr	r3, [pc, #520]	; (80115ac <key_scan+0x26c>)
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	227f      	movs	r2, #127	; 0x7f
 80113aa:	4013      	ands	r3, r2
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	4b80      	ldr	r3, [pc, #512]	; (80115b0 <key_scan+0x270>)
 80113b0:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 80113b2:	4b7f      	ldr	r3, [pc, #508]	; (80115b0 <key_scan+0x270>)
 80113b4:	881b      	ldrh	r3, [r3, #0]
 80113b6:	2b7f      	cmp	r3, #127	; 0x7f
 80113b8:	d017      	beq.n	80113ea <key_scan+0xaa>
	{
		Press_Status1=1;//第一行按键按下
 80113ba:	4b7e      	ldr	r3, [pc, #504]	; (80115b4 <key_scan+0x274>)
 80113bc:	2201      	movs	r2, #1
 80113be:	601a      	str	r2, [r3, #0]
		if(++Key_Count1>5)
 80113c0:	4b7d      	ldr	r3, [pc, #500]	; (80115b8 <key_scan+0x278>)
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	3301      	adds	r3, #1
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	4b7b      	ldr	r3, [pc, #492]	; (80115b8 <key_scan+0x278>)
 80113ca:	701a      	strb	r2, [r3, #0]
 80113cc:	4b7a      	ldr	r3, [pc, #488]	; (80115b8 <key_scan+0x278>)
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b05      	cmp	r3, #5
 80113d2:	d90d      	bls.n	80113f0 <key_scan+0xb0>
		{
			Row_Flag=1;
 80113d4:	4b79      	ldr	r3, [pc, #484]	; (80115bc <key_scan+0x27c>)
 80113d6:	2201      	movs	r2, #1
 80113d8:	601a      	str	r2, [r3, #0]
			Key_Count1=5;
 80113da:	4b77      	ldr	r3, [pc, #476]	; (80115b8 <key_scan+0x278>)
 80113dc:	2205      	movs	r2, #5
 80113de:	701a      	strb	r2, [r3, #0]
			Key_Value1 = IO_Status;	//记下键值
 80113e0:	4b73      	ldr	r3, [pc, #460]	; (80115b0 <key_scan+0x270>)
 80113e2:	881a      	ldrh	r2, [r3, #0]
 80113e4:	4b76      	ldr	r3, [pc, #472]	; (80115c0 <key_scan+0x280>)
 80113e6:	801a      	strh	r2, [r3, #0]
 80113e8:	e002      	b.n	80113f0 <key_scan+0xb0>
		}

	}
	else Press_Status1=0;
 80113ea:	4b72      	ldr	r3, [pc, #456]	; (80115b4 <key_scan+0x274>)
 80113ec:	2200      	movs	r2, #0
 80113ee:	601a      	str	r2, [r3, #0]
	/*scan the second row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);//第一行恢复
 80113f0:	2380      	movs	r3, #128	; 0x80
 80113f2:	019b      	lsls	r3, r3, #6
 80113f4:	486c      	ldr	r0, [pc, #432]	; (80115a8 <key_scan+0x268>)
 80113f6:	2201      	movs	r2, #1
 80113f8:	0019      	movs	r1, r3
 80113fa:	f7f5 fd9a 	bl	8006f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_RESET);//拉低第二行
 80113fe:	2380      	movs	r3, #128	; 0x80
 8011400:	01db      	lsls	r3, r3, #7
 8011402:	4869      	ldr	r0, [pc, #420]	; (80115a8 <key_scan+0x268>)
 8011404:	2200      	movs	r2, #0
 8011406:	0019      	movs	r1, r3
 8011408:	f7f5 fd93 	bl	8006f32 <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 801140c:	1dbb      	adds	r3, r7, #6
 801140e:	2200      	movs	r2, #0
 8011410:	701a      	strb	r2, [r3, #0]
 8011412:	e004      	b.n	801141e <key_scan+0xde>
 8011414:	1dbb      	adds	r3, r7, #6
 8011416:	781a      	ldrb	r2, [r3, #0]
 8011418:	1dbb      	adds	r3, r7, #6
 801141a:	3201      	adds	r2, #1
 801141c:	701a      	strb	r2, [r3, #0]
 801141e:	1dbb      	adds	r3, r7, #6
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	2b63      	cmp	r3, #99	; 0x63
 8011424:	d9f6      	bls.n	8011414 <key_scan+0xd4>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 8011426:	4b61      	ldr	r3, [pc, #388]	; (80115ac <key_scan+0x26c>)
 8011428:	691b      	ldr	r3, [r3, #16]
 801142a:	b29b      	uxth	r3, r3
 801142c:	227f      	movs	r2, #127	; 0x7f
 801142e:	4013      	ands	r3, r2
 8011430:	b29a      	uxth	r2, r3
 8011432:	4b5f      	ldr	r3, [pc, #380]	; (80115b0 <key_scan+0x270>)
 8011434:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 8011436:	4b5e      	ldr	r3, [pc, #376]	; (80115b0 <key_scan+0x270>)
 8011438:	881b      	ldrh	r3, [r3, #0]
 801143a:	2b7f      	cmp	r3, #127	; 0x7f
 801143c:	d017      	beq.n	801146e <key_scan+0x12e>
	{
		Press_Status2=1;//第二行按键按下
 801143e:	4b61      	ldr	r3, [pc, #388]	; (80115c4 <key_scan+0x284>)
 8011440:	2201      	movs	r2, #1
 8011442:	601a      	str	r2, [r3, #0]
		if(++Key_Count2>5)
 8011444:	4b60      	ldr	r3, [pc, #384]	; (80115c8 <key_scan+0x288>)
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	3301      	adds	r3, #1
 801144a:	b2da      	uxtb	r2, r3
 801144c:	4b5e      	ldr	r3, [pc, #376]	; (80115c8 <key_scan+0x288>)
 801144e:	701a      	strb	r2, [r3, #0]
 8011450:	4b5d      	ldr	r3, [pc, #372]	; (80115c8 <key_scan+0x288>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b05      	cmp	r3, #5
 8011456:	d90d      	bls.n	8011474 <key_scan+0x134>
		{
			Row_Flag=2;
 8011458:	4b58      	ldr	r3, [pc, #352]	; (80115bc <key_scan+0x27c>)
 801145a:	2202      	movs	r2, #2
 801145c:	601a      	str	r2, [r3, #0]
			Key_Count2=5;
 801145e:	4b5a      	ldr	r3, [pc, #360]	; (80115c8 <key_scan+0x288>)
 8011460:	2205      	movs	r2, #5
 8011462:	701a      	strb	r2, [r3, #0]
			Key_Value2 = IO_Status;	//记下键值
 8011464:	4b52      	ldr	r3, [pc, #328]	; (80115b0 <key_scan+0x270>)
 8011466:	881a      	ldrh	r2, [r3, #0]
 8011468:	4b58      	ldr	r3, [pc, #352]	; (80115cc <key_scan+0x28c>)
 801146a:	801a      	strh	r2, [r3, #0]
 801146c:	e002      	b.n	8011474 <key_scan+0x134>
		}
	}
	else Press_Status2=0;
 801146e:	4b55      	ldr	r3, [pc, #340]	; (80115c4 <key_scan+0x284>)
 8011470:	2200      	movs	r2, #0
 8011472:	601a      	str	r2, [r3, #0]
	/*scan the third row */
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);//第二行恢复
 8011474:	2380      	movs	r3, #128	; 0x80
 8011476:	01db      	lsls	r3, r3, #7
 8011478:	484b      	ldr	r0, [pc, #300]	; (80115a8 <key_scan+0x268>)
 801147a:	2201      	movs	r2, #1
 801147c:	0019      	movs	r1, r3
 801147e:	f7f5 fd58 	bl	8006f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_RESET);//第三行拉低
 8011482:	2380      	movs	r3, #128	; 0x80
 8011484:	021b      	lsls	r3, r3, #8
 8011486:	4848      	ldr	r0, [pc, #288]	; (80115a8 <key_scan+0x268>)
 8011488:	2200      	movs	r2, #0
 801148a:	0019      	movs	r1, r3
 801148c:	f7f5 fd51 	bl	8006f32 <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 8011490:	1d7b      	adds	r3, r7, #5
 8011492:	2200      	movs	r2, #0
 8011494:	701a      	strb	r2, [r3, #0]
 8011496:	e004      	b.n	80114a2 <key_scan+0x162>
 8011498:	1d7b      	adds	r3, r7, #5
 801149a:	781a      	ldrb	r2, [r3, #0]
 801149c:	1d7b      	adds	r3, r7, #5
 801149e:	3201      	adds	r2, #1
 80114a0:	701a      	strb	r2, [r3, #0]
 80114a2:	1d7b      	adds	r3, r7, #5
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	2b63      	cmp	r3, #99	; 0x63
 80114a8:	d9f6      	bls.n	8011498 <key_scan+0x158>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 80114aa:	4b40      	ldr	r3, [pc, #256]	; (80115ac <key_scan+0x26c>)
 80114ac:	691b      	ldr	r3, [r3, #16]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	227f      	movs	r2, #127	; 0x7f
 80114b2:	4013      	ands	r3, r2
 80114b4:	b29a      	uxth	r2, r3
 80114b6:	4b3e      	ldr	r3, [pc, #248]	; (80115b0 <key_scan+0x270>)
 80114b8:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 80114ba:	4b3d      	ldr	r3, [pc, #244]	; (80115b0 <key_scan+0x270>)
 80114bc:	881b      	ldrh	r3, [r3, #0]
 80114be:	2b7f      	cmp	r3, #127	; 0x7f
 80114c0:	d017      	beq.n	80114f2 <key_scan+0x1b2>
	{
		Press_Status3=1;//第三行按键按下
 80114c2:	4b43      	ldr	r3, [pc, #268]	; (80115d0 <key_scan+0x290>)
 80114c4:	2201      	movs	r2, #1
 80114c6:	601a      	str	r2, [r3, #0]
		if(++Key_Count3>5)
 80114c8:	4b42      	ldr	r3, [pc, #264]	; (80115d4 <key_scan+0x294>)
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	3301      	adds	r3, #1
 80114ce:	b2da      	uxtb	r2, r3
 80114d0:	4b40      	ldr	r3, [pc, #256]	; (80115d4 <key_scan+0x294>)
 80114d2:	701a      	strb	r2, [r3, #0]
 80114d4:	4b3f      	ldr	r3, [pc, #252]	; (80115d4 <key_scan+0x294>)
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	2b05      	cmp	r3, #5
 80114da:	d90d      	bls.n	80114f8 <key_scan+0x1b8>
		{
			Row_Flag=3;
 80114dc:	4b37      	ldr	r3, [pc, #220]	; (80115bc <key_scan+0x27c>)
 80114de:	2203      	movs	r2, #3
 80114e0:	601a      	str	r2, [r3, #0]
			Key_Count3=5;
 80114e2:	4b3c      	ldr	r3, [pc, #240]	; (80115d4 <key_scan+0x294>)
 80114e4:	2205      	movs	r2, #5
 80114e6:	701a      	strb	r2, [r3, #0]
			Key_Value3 = IO_Status;	//记下键值
 80114e8:	4b31      	ldr	r3, [pc, #196]	; (80115b0 <key_scan+0x270>)
 80114ea:	881a      	ldrh	r2, [r3, #0]
 80114ec:	4b3a      	ldr	r3, [pc, #232]	; (80115d8 <key_scan+0x298>)
 80114ee:	801a      	strh	r2, [r3, #0]
 80114f0:	e002      	b.n	80114f8 <key_scan+0x1b8>
		}
	}
	else Press_Status3=0;
 80114f2:	4b37      	ldr	r3, [pc, #220]	; (80115d0 <key_scan+0x290>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	601a      	str	r2, [r3, #0]


	if(Press_Status1==0 && Press_Status2==0 && Press_Status3==0)//无按键按下
 80114f8:	4b2e      	ldr	r3, [pc, #184]	; (80115b4 <key_scan+0x274>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d14d      	bne.n	801159c <key_scan+0x25c>
 8011500:	4b30      	ldr	r3, [pc, #192]	; (80115c4 <key_scan+0x284>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d149      	bne.n	801159c <key_scan+0x25c>
 8011508:	4b31      	ldr	r3, [pc, #196]	; (80115d0 <key_scan+0x290>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d145      	bne.n	801159c <key_scan+0x25c>
	{
		switch(Row_Flag)
 8011510:	4b2a      	ldr	r3, [pc, #168]	; (80115bc <key_scan+0x27c>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2b03      	cmp	r3, #3
 8011516:	d027      	beq.n	8011568 <key_scan+0x228>
 8011518:	dc39      	bgt.n	801158e <key_scan+0x24e>
 801151a:	2b01      	cmp	r3, #1
 801151c:	d002      	beq.n	8011524 <key_scan+0x1e4>
 801151e:	2b02      	cmp	r3, #2
 8011520:	d011      	beq.n	8011546 <key_scan+0x206>
					}
					break;

			}

			default :break;
 8011522:	e034      	b.n	801158e <key_scan+0x24e>
					Key_Count1--;
 8011524:	4b24      	ldr	r3, [pc, #144]	; (80115b8 <key_scan+0x278>)
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	3b01      	subs	r3, #1
 801152a:	b2da      	uxtb	r2, r3
 801152c:	4b22      	ldr	r3, [pc, #136]	; (80115b8 <key_scan+0x278>)
 801152e:	701a      	strb	r2, [r3, #0]
					if(Key_Count1<=0)
 8011530:	4b21      	ldr	r3, [pc, #132]	; (80115b8 <key_scan+0x278>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d12c      	bne.n	8011592 <key_scan+0x252>
						Key_Count1=0;
 8011538:	4b1f      	ldr	r3, [pc, #124]	; (80115b8 <key_scan+0x278>)
 801153a:	2200      	movs	r2, #0
 801153c:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 801153e:	4b27      	ldr	r3, [pc, #156]	; (80115dc <key_scan+0x29c>)
 8011540:	2201      	movs	r2, #1
 8011542:	701a      	strb	r2, [r3, #0]
					break;
 8011544:	e025      	b.n	8011592 <key_scan+0x252>
					Key_Count2--;
 8011546:	4b20      	ldr	r3, [pc, #128]	; (80115c8 <key_scan+0x288>)
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	3b01      	subs	r3, #1
 801154c:	b2da      	uxtb	r2, r3
 801154e:	4b1e      	ldr	r3, [pc, #120]	; (80115c8 <key_scan+0x288>)
 8011550:	701a      	strb	r2, [r3, #0]
					if(Key_Count2<=0)
 8011552:	4b1d      	ldr	r3, [pc, #116]	; (80115c8 <key_scan+0x288>)
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d11d      	bne.n	8011596 <key_scan+0x256>
						Key_Count2=0;
 801155a:	4b1b      	ldr	r3, [pc, #108]	; (80115c8 <key_scan+0x288>)
 801155c:	2200      	movs	r2, #0
 801155e:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 8011560:	4b1e      	ldr	r3, [pc, #120]	; (80115dc <key_scan+0x29c>)
 8011562:	2201      	movs	r2, #1
 8011564:	701a      	strb	r2, [r3, #0]
					break;
 8011566:	e016      	b.n	8011596 <key_scan+0x256>
					Key_Count3--;
 8011568:	4b1a      	ldr	r3, [pc, #104]	; (80115d4 <key_scan+0x294>)
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	3b01      	subs	r3, #1
 801156e:	b2da      	uxtb	r2, r3
 8011570:	4b18      	ldr	r3, [pc, #96]	; (80115d4 <key_scan+0x294>)
 8011572:	701a      	strb	r2, [r3, #0]
					if(Key_Count3<=0)
 8011574:	4b17      	ldr	r3, [pc, #92]	; (80115d4 <key_scan+0x294>)
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d10e      	bne.n	801159a <key_scan+0x25a>
						Key_Count3=0;
 801157c:	4b15      	ldr	r3, [pc, #84]	; (80115d4 <key_scan+0x294>)
 801157e:	2200      	movs	r2, #0
 8011580:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 8011582:	4b16      	ldr	r3, [pc, #88]	; (80115dc <key_scan+0x29c>)
 8011584:	2201      	movs	r2, #1
 8011586:	701a      	strb	r2, [r3, #0]
					break;
 8011588:	e007      	b.n	801159a <key_scan+0x25a>
	if(keys_EN==DISABLE) return;
 801158a:	46c0      	nop			; (mov r8, r8)
 801158c:	e006      	b.n	801159c <key_scan+0x25c>
			default :break;
 801158e:	46c0      	nop			; (mov r8, r8)
 8011590:	e004      	b.n	801159c <key_scan+0x25c>
					break;
 8011592:	46c0      	nop			; (mov r8, r8)
 8011594:	e002      	b.n	801159c <key_scan+0x25c>
					break;
 8011596:	46c0      	nop			; (mov r8, r8)
 8011598:	e000      	b.n	801159c <key_scan+0x25c>
					break;
 801159a:	46c0      	nop			; (mov r8, r8)

	}



}
 801159c:	46bd      	mov	sp, r7
 801159e:	b002      	add	sp, #8
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	46c0      	nop			; (mov r8, r8)
 80115a4:	20003985 	.word	0x20003985
 80115a8:	50000800 	.word	0x50000800
 80115ac:	50000c00 	.word	0x50000c00
 80115b0:	200039c2 	.word	0x200039c2
 80115b4:	200039c4 	.word	0x200039c4
 80115b8:	200039c8 	.word	0x200039c8
 80115bc:	200039bc 	.word	0x200039bc
 80115c0:	20002fdc 	.word	0x20002fdc
 80115c4:	200039cc 	.word	0x200039cc
 80115c8:	200039d0 	.word	0x200039d0
 80115cc:	20002fde 	.word	0x20002fde
 80115d0:	200039d4 	.word	0x200039d4
 80115d4:	200039d8 	.word	0x200039d8
 80115d8:	20002fe0 	.word	0x20002fe0
 80115dc:	200039c0 	.word	0x200039c0

080115e0 <KEY_Handle>:
 * @brief  按键处理函数（先判断行列，再调用按键函数）
 * @param	None
 * @retval None
 */
void KEY_Handle(void)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	af00      	add	r7, sp, #0
	if(Key_Enable==ENABLE)
 80115e4:	4b5a      	ldr	r3, [pc, #360]	; (8011750 <KEY_Handle+0x170>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d000      	beq.n	80115ee <KEY_Handle+0xe>
 80115ec:	e0ac      	b.n	8011748 <KEY_Handle+0x168>
	{

		switch(Row_Flag)
 80115ee:	4b59      	ldr	r3, [pc, #356]	; (8011754 <KEY_Handle+0x174>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b03      	cmp	r3, #3
 80115f4:	d100      	bne.n	80115f8 <KEY_Handle+0x18>
 80115f6:	e065      	b.n	80116c4 <KEY_Handle+0xe4>
 80115f8:	dd00      	ble.n	80115fc <KEY_Handle+0x1c>
 80115fa:	e096      	b.n	801172a <KEY_Handle+0x14a>
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d002      	beq.n	8011606 <KEY_Handle+0x26>
 8011600:	2b02      	cmp	r3, #2
 8011602:	d031      	beq.n	8011668 <KEY_Handle+0x88>
 8011604:	e091      	b.n	801172a <KEY_Handle+0x14a>
			{
				case 1:
				{
					Row_Flag=0;
 8011606:	4b53      	ldr	r3, [pc, #332]	; (8011754 <KEY_Handle+0x174>)
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]
					switch(Key_Value1)
 801160c:	4b52      	ldr	r3, [pc, #328]	; (8011758 <KEY_Handle+0x178>)
 801160e:	881b      	ldrh	r3, [r3, #0]
 8011610:	2b3f      	cmp	r3, #63	; 0x3f
 8011612:	d025      	beq.n	8011660 <KEY_Handle+0x80>
 8011614:	da00      	bge.n	8011618 <KEY_Handle+0x38>
 8011616:	e083      	b.n	8011720 <KEY_Handle+0x140>
 8011618:	2b7e      	cmp	r3, #126	; 0x7e
 801161a:	dd00      	ble.n	801161e <KEY_Handle+0x3e>
 801161c:	e080      	b.n	8011720 <KEY_Handle+0x140>
 801161e:	2b5f      	cmp	r3, #95	; 0x5f
 8011620:	da00      	bge.n	8011624 <KEY_Handle+0x44>
 8011622:	e07d      	b.n	8011720 <KEY_Handle+0x140>
 8011624:	3b5f      	subs	r3, #95	; 0x5f
 8011626:	2b1f      	cmp	r3, #31
 8011628:	d900      	bls.n	801162c <KEY_Handle+0x4c>
 801162a:	e079      	b.n	8011720 <KEY_Handle+0x140>
 801162c:	009a      	lsls	r2, r3, #2
 801162e:	4b4b      	ldr	r3, [pc, #300]	; (801175c <KEY_Handle+0x17c>)
 8011630:	18d3      	adds	r3, r2, r3
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(1);
 8011636:	2001      	movs	r0, #1
 8011638:	f7fd ff98 	bl	800f56c <key_num_handle>
							break;
 801163c:	e013      	b.n	8011666 <KEY_Handle+0x86>
						}
						case 0x7d:
						{
							key_num_handle(2);
 801163e:	2002      	movs	r0, #2
 8011640:	f7fd ff94 	bl	800f56c <key_num_handle>
							break;
 8011644:	e00f      	b.n	8011666 <KEY_Handle+0x86>
						}
						case 0x7b:
						{
							key_num_handle(3);
 8011646:	2003      	movs	r0, #3
 8011648:	f7fd ff90 	bl	800f56c <key_num_handle>
							break;
 801164c:	e00b      	b.n	8011666 <KEY_Handle+0x86>
						}
						case 0x77:
						{
							Key_ESC();
 801164e:	f7ff fdb7 	bl	80111c0 <Key_ESC>
							break;
 8011652:	e008      	b.n	8011666 <KEY_Handle+0x86>
						}
						case 0x6f:
						{
							Key_V_set();
 8011654:	f7fe f812 	bl	800f67c <Key_V_set>
							break;
 8011658:	e005      	b.n	8011666 <KEY_Handle+0x86>
						}
						case 0x5f:
						{
							Key_I_set();
 801165a:	f7fe f941 	bl	800f8e0 <Key_I_set>
							break;
 801165e:	e002      	b.n	8011666 <KEY_Handle+0x86>
						}
						case 0x3f:
						{
							Key_Up();
 8011660:	f7ff fb0e 	bl	8010c80 <Key_Up>
							break;
 8011664:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 8011666:	e05b      	b.n	8011720 <KEY_Handle+0x140>

				}
				case 2:
				{
					Row_Flag=0;
 8011668:	4b3a      	ldr	r3, [pc, #232]	; (8011754 <KEY_Handle+0x174>)
 801166a:	2200      	movs	r2, #0
 801166c:	601a      	str	r2, [r3, #0]
					switch(Key_Value2)
 801166e:	4b3c      	ldr	r3, [pc, #240]	; (8011760 <KEY_Handle+0x180>)
 8011670:	881b      	ldrh	r3, [r3, #0]
 8011672:	2b3f      	cmp	r3, #63	; 0x3f
 8011674:	d022      	beq.n	80116bc <KEY_Handle+0xdc>
 8011676:	db55      	blt.n	8011724 <KEY_Handle+0x144>
 8011678:	2b7e      	cmp	r3, #126	; 0x7e
 801167a:	dc53      	bgt.n	8011724 <KEY_Handle+0x144>
 801167c:	2b5f      	cmp	r3, #95	; 0x5f
 801167e:	db51      	blt.n	8011724 <KEY_Handle+0x144>
 8011680:	3b5f      	subs	r3, #95	; 0x5f
 8011682:	2b1f      	cmp	r3, #31
 8011684:	d84e      	bhi.n	8011724 <KEY_Handle+0x144>
 8011686:	009a      	lsls	r2, r3, #2
 8011688:	4b36      	ldr	r3, [pc, #216]	; (8011764 <KEY_Handle+0x184>)
 801168a:	18d3      	adds	r3, r2, r3
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(4);
 8011690:	2004      	movs	r0, #4
 8011692:	f7fd ff6b 	bl	800f56c <key_num_handle>
							break;
 8011696:	e014      	b.n	80116c2 <KEY_Handle+0xe2>
						}
						case 0x7d:
						{
							key_num_handle(5);
 8011698:	2005      	movs	r0, #5
 801169a:	f7fd ff67 	bl	800f56c <key_num_handle>
							break;
 801169e:	e010      	b.n	80116c2 <KEY_Handle+0xe2>
						}
						case 0x7b:
						{
							key_num_handle(6);
 80116a0:	2006      	movs	r0, #6
 80116a2:	f7fd ff63 	bl	800f56c <key_num_handle>
							break;
 80116a6:	e00c      	b.n	80116c2 <KEY_Handle+0xe2>
						}
						case 0x77:
						{
							key_num_handle(0);
 80116a8:	2000      	movs	r0, #0
 80116aa:	f7fd ff5f 	bl	800f56c <key_num_handle>
							break;
 80116ae:	e008      	b.n	80116c2 <KEY_Handle+0xe2>
						}
						case 0x6f:
						{
							Key_Recall_Save();
 80116b0:	f7ff fa72 	bl	8010b98 <Key_Recall_Save>
							break;
 80116b4:	e005      	b.n	80116c2 <KEY_Handle+0xe2>
						}
						case 0x5f:
						{
							Key_Preset_Lock();
 80116b6:	f7ff fa35 	bl	8010b24 <Key_Preset_Lock>
							break;
 80116ba:	e002      	b.n	80116c2 <KEY_Handle+0xe2>
						}
						case 0x3f:
						{
							Key_Enter();
 80116bc:	f7fe ff1a 	bl	80104f4 <Key_Enter>
							break;
 80116c0:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 80116c2:	e02f      	b.n	8011724 <KEY_Handle+0x144>

				}
				case 3:
				{
					Row_Flag=0;
 80116c4:	4b23      	ldr	r3, [pc, #140]	; (8011754 <KEY_Handle+0x174>)
 80116c6:	2200      	movs	r2, #0
 80116c8:	601a      	str	r2, [r3, #0]
					switch(Key_Value3)
 80116ca:	4b27      	ldr	r3, [pc, #156]	; (8011768 <KEY_Handle+0x188>)
 80116cc:	881b      	ldrh	r3, [r3, #0]
 80116ce:	2b3f      	cmp	r3, #63	; 0x3f
 80116d0:	d022      	beq.n	8011718 <KEY_Handle+0x138>
 80116d2:	db29      	blt.n	8011728 <KEY_Handle+0x148>
 80116d4:	2b7e      	cmp	r3, #126	; 0x7e
 80116d6:	dc27      	bgt.n	8011728 <KEY_Handle+0x148>
 80116d8:	2b5f      	cmp	r3, #95	; 0x5f
 80116da:	db25      	blt.n	8011728 <KEY_Handle+0x148>
 80116dc:	3b5f      	subs	r3, #95	; 0x5f
 80116de:	2b1f      	cmp	r3, #31
 80116e0:	d822      	bhi.n	8011728 <KEY_Handle+0x148>
 80116e2:	009a      	lsls	r2, r3, #2
 80116e4:	4b21      	ldr	r3, [pc, #132]	; (801176c <KEY_Handle+0x18c>)
 80116e6:	18d3      	adds	r3, r2, r3
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(7);
 80116ec:	2007      	movs	r0, #7
 80116ee:	f7fd ff3d 	bl	800f56c <key_num_handle>
							break;
 80116f2:	e014      	b.n	801171e <KEY_Handle+0x13e>
						}
						case 0x7d:
						{
							key_num_handle(8);
 80116f4:	2008      	movs	r0, #8
 80116f6:	f7fd ff39 	bl	800f56c <key_num_handle>
							break;
 80116fa:	e010      	b.n	801171e <KEY_Handle+0x13e>
						}
						case 0x7b:
						{
							key_num_handle(9);
 80116fc:	2009      	movs	r0, #9
 80116fe:	f7fd ff35 	bl	800f56c <key_num_handle>
							break;
 8011702:	e00c      	b.n	801171e <KEY_Handle+0x13e>
						}
						case 0x77:
						{
							key_num_handle(10);
 8011704:	200a      	movs	r0, #10
 8011706:	f7fd ff31 	bl	800f56c <key_num_handle>
							break;
 801170a:	e008      	b.n	801171e <KEY_Handle+0x13e>
						}
						case 0x6f:
						{
							Key_Shift();
 801170c:	f7ff f8f4 	bl	80108f8 <Key_Shift>
							break;
 8011710:	e005      	b.n	801171e <KEY_Handle+0x13e>
						}
						case 0x5f:
						{
							Key_ON_OFF();
 8011712:	f7ff f9d7 	bl	8010ac4 <Key_ON_OFF>
							break;
 8011716:	e002      	b.n	801171e <KEY_Handle+0x13e>
						}
						case 0x3f:
						{
							Key_Down();
 8011718:	f7ff fc06 	bl	8010f28 <Key_Down>
							break;
 801171c:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 801171e:	e003      	b.n	8011728 <KEY_Handle+0x148>
					break;
 8011720:	46c0      	nop			; (mov r8, r8)
 8011722:	e002      	b.n	801172a <KEY_Handle+0x14a>
					break;
 8011724:	46c0      	nop			; (mov r8, r8)
 8011726:	e000      	b.n	801172a <KEY_Handle+0x14a>
					break;
 8011728:	46c0      	nop			; (mov r8, r8)

				}


			}
		Key_Enable=DISABLE;
 801172a:	4b09      	ldr	r3, [pc, #36]	; (8011750 <KEY_Handle+0x170>)
 801172c:	2200      	movs	r2, #0
 801172e:	701a      	strb	r2, [r3, #0]
		Row_Flag=0;
 8011730:	4b08      	ldr	r3, [pc, #32]	; (8011754 <KEY_Handle+0x174>)
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]
		Key_Value1=0x7f;
 8011736:	4b08      	ldr	r3, [pc, #32]	; (8011758 <KEY_Handle+0x178>)
 8011738:	227f      	movs	r2, #127	; 0x7f
 801173a:	801a      	strh	r2, [r3, #0]
		Key_Value2=0x7f;
 801173c:	4b08      	ldr	r3, [pc, #32]	; (8011760 <KEY_Handle+0x180>)
 801173e:	227f      	movs	r2, #127	; 0x7f
 8011740:	801a      	strh	r2, [r3, #0]
		Key_Value3=0x7f;
 8011742:	4b09      	ldr	r3, [pc, #36]	; (8011768 <KEY_Handle+0x188>)
 8011744:	227f      	movs	r2, #127	; 0x7f
 8011746:	801a      	strh	r2, [r3, #0]

	}

}
 8011748:	46c0      	nop			; (mov r8, r8)
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	46c0      	nop			; (mov r8, r8)
 8011750:	200039c0 	.word	0x200039c0
 8011754:	200039bc 	.word	0x200039bc
 8011758:	20002fdc 	.word	0x20002fdc
 801175c:	080188d4 	.word	0x080188d4
 8011760:	20002fde 	.word	0x20002fde
 8011764:	08018954 	.word	0x08018954
 8011768:	20002fe0 	.word	0x20002fe0
 801176c:	080189d4 	.word	0x080189d4

08011770 <HAL_ADC_ConvCpltCallback>:
  * @brief  温度传感器检测的中断服务函数，检测IGBT温度，软件层保护
  * @param  None
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]



	if(hadc==&hadc1)
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	4b0a      	ldr	r3, [pc, #40]	; (80117a4 <HAL_ADC_ConvCpltCallback+0x34>)
 801177c:	429a      	cmp	r2, r3
 801177e:	d10c      	bne.n	801179a <HAL_ADC_ConvCpltCallback+0x2a>
	{
		Flag.ADC1_IT=1;
 8011780:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <HAL_ADC_ConvCpltCallback+0x38>)
 8011782:	2201      	movs	r2, #1
 8011784:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 8011786:	4b07      	ldr	r3, [pc, #28]	; (80117a4 <HAL_ADC_ConvCpltCallback+0x34>)
 8011788:	0018      	movs	r0, r3
 801178a:	f7f4 f8fd 	bl	8005988 <HAL_ADC_Stop_DMA>


		HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 801178e:	4907      	ldr	r1, [pc, #28]	; (80117ac <HAL_ADC_ConvCpltCallback+0x3c>)
 8011790:	4b04      	ldr	r3, [pc, #16]	; (80117a4 <HAL_ADC_ConvCpltCallback+0x34>)
 8011792:	2202      	movs	r2, #2
 8011794:	0018      	movs	r0, r3
 8011796:	f7f4 f869 	bl	800586c <HAL_ADC_Start_DMA>
	}

}
 801179a:	46c0      	nop			; (mov r8, r8)
 801179c:	46bd      	mov	sp, r7
 801179e:	b002      	add	sp, #8
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	46c0      	nop			; (mov r8, r8)
 80117a4:	200032c4 	.word	0x200032c4
 80117a8:	20003384 	.word	0x20003384
 80117ac:	200039dc 	.word	0x200039dc

080117b0 <Check_Error>:
  * @brief  OTP/OVP/OCP的硬件保护服务函数(硬件保护)
  * @param  None
  * @retval None
  */
void Check_Error()
{
 80117b0:	b5b0      	push	{r4, r5, r7, lr}
 80117b2:	af00      	add	r7, sp, #0
	static uint8_t ERROR_Flag=1;
	static uint8_t ERROR_Flag2=1;
	static uint8_t ERROR_Flag3=1;


	if(Voltage_Actual>100)
 80117b4:	4b85      	ldr	r3, [pc, #532]	; (80119cc <Check_Error+0x21c>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	4985      	ldr	r1, [pc, #532]	; (80119d0 <Check_Error+0x220>)
 80117ba:	1c18      	adds	r0, r3, #0
 80117bc:	f7ee fea0 	bl	8000500 <__aeabi_fcmpgt>
 80117c0:	1e03      	subs	r3, r0, #0
 80117c2:	d019      	beq.n	80117f8 <Check_Error+0x48>
	{


		Error|=OVP;
 80117c4:	4b83      	ldr	r3, [pc, #524]	; (80119d4 <Check_Error+0x224>)
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2201      	movs	r2, #1
 80117ca:	4313      	orrs	r3, r2
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	4b81      	ldr	r3, [pc, #516]	; (80119d4 <Check_Error+0x224>)
 80117d0:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 80117d2:	4b81      	ldr	r3, [pc, #516]	; (80119d8 <Check_Error+0x228>)
 80117d4:	2204      	movs	r2, #4
 80117d6:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 80117d8:	4b7f      	ldr	r3, [pc, #508]	; (80119d8 <Check_Error+0x228>)
 80117da:	2201      	movs	r2, #1
 80117dc:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 80117de:	4b7e      	ldr	r3, [pc, #504]	; (80119d8 <Check_Error+0x228>)
 80117e0:	2201      	movs	r2, #1
 80117e2:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag==1)
 80117e4:	4b7d      	ldr	r3, [pc, #500]	; (80119dc <Check_Error+0x22c>)
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d10f      	bne.n	801180c <Check_Error+0x5c>
		{
			ERROR_Flag=2;
 80117ec:	4b7b      	ldr	r3, [pc, #492]	; (80119dc <Check_Error+0x22c>)
 80117ee:	2202      	movs	r2, #2
 80117f0:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 80117f2:	f7fb f90b 	bl	800ca0c <Output_Zero>
 80117f6:	e009      	b.n	801180c <Check_Error+0x5c>
		}

	}
	else
	{
		ERROR_Flag=1;
 80117f8:	4b78      	ldr	r3, [pc, #480]	; (80119dc <Check_Error+0x22c>)
 80117fa:	2201      	movs	r2, #1
 80117fc:	701a      	strb	r2, [r3, #0]
		Error&=0xfe;//解除电压警报
 80117fe:	4b75      	ldr	r3, [pc, #468]	; (80119d4 <Check_Error+0x224>)
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	2201      	movs	r2, #1
 8011804:	4393      	bics	r3, r2
 8011806:	b2da      	uxtb	r2, r3
 8011808:	4b72      	ldr	r3, [pc, #456]	; (80119d4 <Check_Error+0x224>)
 801180a:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual>50)
 801180c:	4b74      	ldr	r3, [pc, #464]	; (80119e0 <Check_Error+0x230>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4974      	ldr	r1, [pc, #464]	; (80119e4 <Check_Error+0x234>)
 8011812:	1c18      	adds	r0, r3, #0
 8011814:	f7ee fe74 	bl	8000500 <__aeabi_fcmpgt>
 8011818:	1e03      	subs	r3, r0, #0
 801181a:	d019      	beq.n	8011850 <Check_Error+0xa0>
	{

		Error|=OCP;
 801181c:	4b6d      	ldr	r3, [pc, #436]	; (80119d4 <Check_Error+0x224>)
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	2202      	movs	r2, #2
 8011822:	4313      	orrs	r3, r2
 8011824:	b2da      	uxtb	r2, r3
 8011826:	4b6b      	ldr	r3, [pc, #428]	; (80119d4 <Check_Error+0x224>)
 8011828:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 801182a:	4b6b      	ldr	r3, [pc, #428]	; (80119d8 <Check_Error+0x228>)
 801182c:	2204      	movs	r2, #4
 801182e:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011830:	4b69      	ldr	r3, [pc, #420]	; (80119d8 <Check_Error+0x228>)
 8011832:	2201      	movs	r2, #1
 8011834:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 8011836:	4b68      	ldr	r3, [pc, #416]	; (80119d8 <Check_Error+0x228>)
 8011838:	2201      	movs	r2, #1
 801183a:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag2==1)
 801183c:	4b6a      	ldr	r3, [pc, #424]	; (80119e8 <Check_Error+0x238>)
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	2b01      	cmp	r3, #1
 8011842:	d10f      	bne.n	8011864 <Check_Error+0xb4>
		{
			ERROR_Flag2=2;
 8011844:	4b68      	ldr	r3, [pc, #416]	; (80119e8 <Check_Error+0x238>)
 8011846:	2202      	movs	r2, #2
 8011848:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 801184a:	f7fb f8df 	bl	800ca0c <Output_Zero>
 801184e:	e009      	b.n	8011864 <Check_Error+0xb4>
		}
	}
	else
	{
		ERROR_Flag2=1;
 8011850:	4b65      	ldr	r3, [pc, #404]	; (80119e8 <Check_Error+0x238>)
 8011852:	2201      	movs	r2, #1
 8011854:	701a      	strb	r2, [r3, #0]
		Error&=0xfd;//解除电流警报
 8011856:	4b5f      	ldr	r3, [pc, #380]	; (80119d4 <Check_Error+0x224>)
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	2202      	movs	r2, #2
 801185c:	4393      	bics	r3, r2
 801185e:	b2da      	uxtb	r2, r3
 8011860:	4b5c      	ldr	r3, [pc, #368]	; (80119d4 <Check_Error+0x224>)
 8011862:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual*Voltage_Actual>7500)
 8011864:	4b5e      	ldr	r3, [pc, #376]	; (80119e0 <Check_Error+0x230>)
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	4b58      	ldr	r3, [pc, #352]	; (80119cc <Check_Error+0x21c>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	1c19      	adds	r1, r3, #0
 801186e:	1c10      	adds	r0, r2, #0
 8011870:	f7ef f9f6 	bl	8000c60 <__aeabi_fmul>
 8011874:	1c03      	adds	r3, r0, #0
 8011876:	495d      	ldr	r1, [pc, #372]	; (80119ec <Check_Error+0x23c>)
 8011878:	1c18      	adds	r0, r3, #0
 801187a:	f7ee fe41 	bl	8000500 <__aeabi_fcmpgt>
 801187e:	1e03      	subs	r3, r0, #0
 8011880:	d019      	beq.n	80118b6 <Check_Error+0x106>
	{

		Error|=CPP;
 8011882:	4b54      	ldr	r3, [pc, #336]	; (80119d4 <Check_Error+0x224>)
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	2208      	movs	r2, #8
 8011888:	4313      	orrs	r3, r2
 801188a:	b2da      	uxtb	r2, r3
 801188c:	4b51      	ldr	r3, [pc, #324]	; (80119d4 <Check_Error+0x224>)
 801188e:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 8011890:	4b51      	ldr	r3, [pc, #324]	; (80119d8 <Check_Error+0x228>)
 8011892:	2204      	movs	r2, #4
 8011894:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011896:	4b50      	ldr	r3, [pc, #320]	; (80119d8 <Check_Error+0x228>)
 8011898:	2201      	movs	r2, #1
 801189a:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 801189c:	4b4e      	ldr	r3, [pc, #312]	; (80119d8 <Check_Error+0x228>)
 801189e:	2201      	movs	r2, #1
 80118a0:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag3==1)
 80118a2:	4b53      	ldr	r3, [pc, #332]	; (80119f0 <Check_Error+0x240>)
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d10f      	bne.n	80118ca <Check_Error+0x11a>
		{
			ERROR_Flag3=2;
 80118aa:	4b51      	ldr	r3, [pc, #324]	; (80119f0 <Check_Error+0x240>)
 80118ac:	2202      	movs	r2, #2
 80118ae:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 80118b0:	f7fb f8ac 	bl	800ca0c <Output_Zero>
 80118b4:	e009      	b.n	80118ca <Check_Error+0x11a>

		}
	}
	else
	{
		ERROR_Flag3=1;
 80118b6:	4b4e      	ldr	r3, [pc, #312]	; (80119f0 <Check_Error+0x240>)
 80118b8:	2201      	movs	r2, #1
 80118ba:	701a      	strb	r2, [r3, #0]
		Error&=0xf7;//解除电流警报
 80118bc:	4b45      	ldr	r3, [pc, #276]	; (80119d4 <Check_Error+0x224>)
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2208      	movs	r2, #8
 80118c2:	4393      	bics	r3, r2
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	4b43      	ldr	r3, [pc, #268]	; (80119d4 <Check_Error+0x224>)
 80118c8:	701a      	strb	r2, [r3, #0]
		ERROR_Flag4=1;
		Error&=0xfb;//解除电流警报
	}
*/

	if(Voltage_Actual*100>0.95*Set_Voltage && Voltage_Actual*100<1.05*Set_Voltage)
 80118ca:	4b40      	ldr	r3, [pc, #256]	; (80119cc <Check_Error+0x21c>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4940      	ldr	r1, [pc, #256]	; (80119d0 <Check_Error+0x220>)
 80118d0:	1c18      	adds	r0, r3, #0
 80118d2:	f7ef f9c5 	bl	8000c60 <__aeabi_fmul>
 80118d6:	1c03      	adds	r3, r0, #0
 80118d8:	1c18      	adds	r0, r3, #0
 80118da:	f7f1 fae9 	bl	8002eb0 <__aeabi_f2d>
 80118de:	0004      	movs	r4, r0
 80118e0:	000d      	movs	r5, r1
 80118e2:	4b44      	ldr	r3, [pc, #272]	; (80119f4 <Check_Error+0x244>)
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	0018      	movs	r0, r3
 80118e8:	f7f1 fa8c 	bl	8002e04 <__aeabi_i2d>
 80118ec:	4a42      	ldr	r2, [pc, #264]	; (80119f8 <Check_Error+0x248>)
 80118ee:	4b43      	ldr	r3, [pc, #268]	; (80119fc <Check_Error+0x24c>)
 80118f0:	f7f0 fc36 	bl	8002160 <__aeabi_dmul>
 80118f4:	0002      	movs	r2, r0
 80118f6:	000b      	movs	r3, r1
 80118f8:	0020      	movs	r0, r4
 80118fa:	0029      	movs	r1, r5
 80118fc:	f7ee fdc6 	bl	800048c <__aeabi_dcmpgt>
 8011900:	1e03      	subs	r3, r0, #0
 8011902:	d020      	beq.n	8011946 <Check_Error+0x196>
 8011904:	4b31      	ldr	r3, [pc, #196]	; (80119cc <Check_Error+0x21c>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	4931      	ldr	r1, [pc, #196]	; (80119d0 <Check_Error+0x220>)
 801190a:	1c18      	adds	r0, r3, #0
 801190c:	f7ef f9a8 	bl	8000c60 <__aeabi_fmul>
 8011910:	1c03      	adds	r3, r0, #0
 8011912:	1c18      	adds	r0, r3, #0
 8011914:	f7f1 facc 	bl	8002eb0 <__aeabi_f2d>
 8011918:	0004      	movs	r4, r0
 801191a:	000d      	movs	r5, r1
 801191c:	4b35      	ldr	r3, [pc, #212]	; (80119f4 <Check_Error+0x244>)
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	0018      	movs	r0, r3
 8011922:	f7f1 fa6f 	bl	8002e04 <__aeabi_i2d>
 8011926:	4a36      	ldr	r2, [pc, #216]	; (8011a00 <Check_Error+0x250>)
 8011928:	4b36      	ldr	r3, [pc, #216]	; (8011a04 <Check_Error+0x254>)
 801192a:	f7f0 fc19 	bl	8002160 <__aeabi_dmul>
 801192e:	0002      	movs	r2, r0
 8011930:	000b      	movs	r3, r1
 8011932:	0020      	movs	r0, r4
 8011934:	0029      	movs	r1, r5
 8011936:	f7ee fd95 	bl	8000464 <__aeabi_dcmplt>
 801193a:	1e03      	subs	r3, r0, #0
 801193c:	d003      	beq.n	8011946 <Check_Error+0x196>
	{
		CV_CC_CP=CV;
 801193e:	4b32      	ldr	r3, [pc, #200]	; (8011a08 <Check_Error+0x258>)
 8011940:	2201      	movs	r2, #1
 8011942:	701a      	strb	r2, [r3, #0]
	}




}
 8011944:	e03e      	b.n	80119c4 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 8011946:	4b26      	ldr	r3, [pc, #152]	; (80119e0 <Check_Error+0x230>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4921      	ldr	r1, [pc, #132]	; (80119d0 <Check_Error+0x220>)
 801194c:	1c18      	adds	r0, r3, #0
 801194e:	f7ef f987 	bl	8000c60 <__aeabi_fmul>
 8011952:	1c03      	adds	r3, r0, #0
 8011954:	1c18      	adds	r0, r3, #0
 8011956:	f7f1 faab 	bl	8002eb0 <__aeabi_f2d>
 801195a:	0004      	movs	r4, r0
 801195c:	000d      	movs	r5, r1
 801195e:	4b2b      	ldr	r3, [pc, #172]	; (8011a0c <Check_Error+0x25c>)
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	0018      	movs	r0, r3
 8011964:	f7f1 fa4e 	bl	8002e04 <__aeabi_i2d>
 8011968:	4a23      	ldr	r2, [pc, #140]	; (80119f8 <Check_Error+0x248>)
 801196a:	4b24      	ldr	r3, [pc, #144]	; (80119fc <Check_Error+0x24c>)
 801196c:	f7f0 fbf8 	bl	8002160 <__aeabi_dmul>
 8011970:	0002      	movs	r2, r0
 8011972:	000b      	movs	r3, r1
 8011974:	0020      	movs	r0, r4
 8011976:	0029      	movs	r1, r5
 8011978:	f7ee fd88 	bl	800048c <__aeabi_dcmpgt>
 801197c:	1e03      	subs	r3, r0, #0
 801197e:	d100      	bne.n	8011982 <Check_Error+0x1d2>
}
 8011980:	e020      	b.n	80119c4 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 8011982:	4b17      	ldr	r3, [pc, #92]	; (80119e0 <Check_Error+0x230>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4912      	ldr	r1, [pc, #72]	; (80119d0 <Check_Error+0x220>)
 8011988:	1c18      	adds	r0, r3, #0
 801198a:	f7ef f969 	bl	8000c60 <__aeabi_fmul>
 801198e:	1c03      	adds	r3, r0, #0
 8011990:	1c18      	adds	r0, r3, #0
 8011992:	f7f1 fa8d 	bl	8002eb0 <__aeabi_f2d>
 8011996:	0004      	movs	r4, r0
 8011998:	000d      	movs	r5, r1
 801199a:	4b1c      	ldr	r3, [pc, #112]	; (8011a0c <Check_Error+0x25c>)
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	0018      	movs	r0, r3
 80119a0:	f7f1 fa30 	bl	8002e04 <__aeabi_i2d>
 80119a4:	4a16      	ldr	r2, [pc, #88]	; (8011a00 <Check_Error+0x250>)
 80119a6:	4b17      	ldr	r3, [pc, #92]	; (8011a04 <Check_Error+0x254>)
 80119a8:	f7f0 fbda 	bl	8002160 <__aeabi_dmul>
 80119ac:	0002      	movs	r2, r0
 80119ae:	000b      	movs	r3, r1
 80119b0:	0020      	movs	r0, r4
 80119b2:	0029      	movs	r1, r5
 80119b4:	f7ee fd56 	bl	8000464 <__aeabi_dcmplt>
 80119b8:	1e03      	subs	r3, r0, #0
 80119ba:	d100      	bne.n	80119be <Check_Error+0x20e>
}
 80119bc:	e002      	b.n	80119c4 <Check_Error+0x214>
		CV_CC_CP=CC;
 80119be:	4b12      	ldr	r3, [pc, #72]	; (8011a08 <Check_Error+0x258>)
 80119c0:	2202      	movs	r2, #2
 80119c2:	701a      	strb	r2, [r3, #0]
}
 80119c4:	46c0      	nop			; (mov r8, r8)
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bdb0      	pop	{r4, r5, r7, pc}
 80119ca:	46c0      	nop			; (mov r8, r8)
 80119cc:	2000399c 	.word	0x2000399c
 80119d0:	42c80000 	.word	0x42c80000
 80119d4:	200039d9 	.word	0x200039d9
 80119d8:	200039f4 	.word	0x200039f4
 80119dc:	20002fe4 	.word	0x20002fe4
 80119e0:	200039a0 	.word	0x200039a0
 80119e4:	42480000 	.word	0x42480000
 80119e8:	20002fe5 	.word	0x20002fe5
 80119ec:	45ea6000 	.word	0x45ea6000
 80119f0:	20002fe6 	.word	0x20002fe6
 80119f4:	20002fd8 	.word	0x20002fd8
 80119f8:	66666666 	.word	0x66666666
 80119fc:	3fee6666 	.word	0x3fee6666
 8011a00:	cccccccd 	.word	0xcccccccd
 8011a04:	3ff0cccc 	.word	0x3ff0cccc
 8011a08:	2000398a 	.word	0x2000398a
 8011a0c:	20002fda 	.word	0x20002fda

08011a10 <TIM16_DELAY_ON>:
  * @brief  开启DELAY功能，设置定时器时间和使能定时器
  * @param  None
  * @retval None
  */
void TIM16_DELAY_ON(void)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	af00      	add	r7, sp, #0

	Delay_Function_On_Off = Delay_Function_On;
 8011a14:	4b0a      	ldr	r3, [pc, #40]	; (8011a40 <TIM16_DELAY_ON+0x30>)
 8011a16:	2201      	movs	r2, #1
 8011a18:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 8011a1a:	4b0a      	ldr	r3, [pc, #40]	; (8011a44 <TIM16_DELAY_ON+0x34>)
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim16,0x00);
 8011a20:	4b09      	ldr	r3, [pc, #36]	; (8011a48 <TIM16_DELAY_ON+0x38>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2200      	movs	r2, #0
 8011a26:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim16,TIM_FLAG_UPDATE);
 8011a28:	4b07      	ldr	r3, [pc, #28]	; (8011a48 <TIM16_DELAY_ON+0x38>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2202      	movs	r2, #2
 8011a2e:	4252      	negs	r2, r2
 8011a30:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim16);
 8011a32:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <TIM16_DELAY_ON+0x38>)
 8011a34:	0018      	movs	r0, r3
 8011a36:	f7f7 f87b 	bl	8008b30 <HAL_TIM_Base_Start_IT>

}
 8011a3a:	46c0      	nop			; (mov r8, r8)
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	200039e1 	.word	0x200039e1
 8011a44:	20003988 	.word	0x20003988
 8011a48:	200035f8 	.word	0x200035f8

08011a4c <TIM16_DELAY_OFF>:
  * @brief  关闭DELAY功能
  * @param  None
  * @retval None
  */
void TIM16_DELAY_OFF(void)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	af00      	add	r7, sp, #0

	 Delay_Function_On_Off = Delay_Function_Off;
 8011a50:	4b0c      	ldr	r3, [pc, #48]	; (8011a84 <TIM16_DELAY_OFF+0x38>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim16);
 8011a56:	4b0c      	ldr	r3, [pc, #48]	; (8011a88 <TIM16_DELAY_OFF+0x3c>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	6a1b      	ldr	r3, [r3, #32]
 8011a5c:	4a0b      	ldr	r2, [pc, #44]	; (8011a8c <TIM16_DELAY_OFF+0x40>)
 8011a5e:	4013      	ands	r3, r2
 8011a60:	d10d      	bne.n	8011a7e <TIM16_DELAY_OFF+0x32>
 8011a62:	4b09      	ldr	r3, [pc, #36]	; (8011a88 <TIM16_DELAY_OFF+0x3c>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	6a1b      	ldr	r3, [r3, #32]
 8011a68:	4a09      	ldr	r2, [pc, #36]	; (8011a90 <TIM16_DELAY_OFF+0x44>)
 8011a6a:	4013      	ands	r3, r2
 8011a6c:	d107      	bne.n	8011a7e <TIM16_DELAY_OFF+0x32>
 8011a6e:	4b06      	ldr	r3, [pc, #24]	; (8011a88 <TIM16_DELAY_OFF+0x3c>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	4b04      	ldr	r3, [pc, #16]	; (8011a88 <TIM16_DELAY_OFF+0x3c>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2101      	movs	r1, #1
 8011a7a:	438a      	bics	r2, r1
 8011a7c:	601a      	str	r2, [r3, #0]

}
 8011a7e:	46c0      	nop			; (mov r8, r8)
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	200039e1 	.word	0x200039e1
 8011a88:	200035f8 	.word	0x200035f8
 8011a8c:	00001111 	.word	0x00001111
 8011a90:	00000444 	.word	0x00000444

08011a94 <TIM17_CYCLE_ON>:
  * @brief  打开CYCLE，打开TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_ON(void)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	af00      	add	r7, sp, #0
	Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 8011a98:	4b1d      	ldr	r3, [pc, #116]	; (8011b10 <TIM17_CYCLE_ON+0x7c>)
 8011a9a:	881b      	ldrh	r3, [r3, #0]
 8011a9c:	001a      	movs	r2, r3
 8011a9e:	0013      	movs	r3, r2
 8011aa0:	015b      	lsls	r3, r3, #5
 8011aa2:	1a9b      	subs	r3, r3, r2
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	189b      	adds	r3, r3, r2
 8011aa8:	00db      	lsls	r3, r3, #3
 8011aaa:	001a      	movs	r2, r3
 8011aac:	4b19      	ldr	r3, [pc, #100]	; (8011b14 <TIM17_CYCLE_ON+0x80>)
 8011aae:	881b      	ldrh	r3, [r3, #0]
 8011ab0:	18d3      	adds	r3, r2, r3
 8011ab2:	001a      	movs	r2, r3
 8011ab4:	4b18      	ldr	r3, [pc, #96]	; (8011b18 <TIM17_CYCLE_ON+0x84>)
 8011ab6:	601a      	str	r2, [r3, #0]
	Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms);
 8011ab8:	4b18      	ldr	r3, [pc, #96]	; (8011b1c <TIM17_CYCLE_ON+0x88>)
 8011aba:	881b      	ldrh	r3, [r3, #0]
 8011abc:	001a      	movs	r2, r3
 8011abe:	0013      	movs	r3, r2
 8011ac0:	015b      	lsls	r3, r3, #5
 8011ac2:	1a9b      	subs	r3, r3, r2
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	189b      	adds	r3, r3, r2
 8011ac8:	00db      	lsls	r3, r3, #3
 8011aca:	001a      	movs	r2, r3
 8011acc:	4b14      	ldr	r3, [pc, #80]	; (8011b20 <TIM17_CYCLE_ON+0x8c>)
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	18d3      	adds	r3, r2, r3
 8011ad2:	001a      	movs	r2, r3
 8011ad4:	4b13      	ldr	r3, [pc, #76]	; (8011b24 <TIM17_CYCLE_ON+0x90>)
 8011ad6:	601a      	str	r2, [r3, #0]

	Delay_Function_On_Off = Delay_Function_On;
 8011ad8:	4b13      	ldr	r3, [pc, #76]	; (8011b28 <TIM17_CYCLE_ON+0x94>)
 8011ada:	2201      	movs	r2, #1
 8011adc:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 8011ade:	4b13      	ldr	r3, [pc, #76]	; (8011b2c <TIM17_CYCLE_ON+0x98>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim17,0x00);
 8011ae4:	4b12      	ldr	r3, [pc, #72]	; (8011b30 <TIM17_CYCLE_ON+0x9c>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim17,TIM_FLAG_UPDATE);
 8011aec:	4b10      	ldr	r3, [pc, #64]	; (8011b30 <TIM17_CYCLE_ON+0x9c>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2202      	movs	r2, #2
 8011af2:	4252      	negs	r2, r2
 8011af4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim17);
 8011af6:	4b0e      	ldr	r3, [pc, #56]	; (8011b30 <TIM17_CYCLE_ON+0x9c>)
 8011af8:	0018      	movs	r0, r3
 8011afa:	f7f7 f819 	bl	8008b30 <HAL_TIM_Base_Start_IT>
	DAC_Cmd_send(1,0xff,0x00);
 8011afe:	2200      	movs	r2, #0
 8011b00:	21ff      	movs	r1, #255	; 0xff
 8011b02:	2001      	movs	r0, #1
 8011b04:	f7fa fe6c 	bl	800c7e0 <DAC_Cmd_send>

}
 8011b08:	46c0      	nop			; (mov r8, r8)
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	46c0      	nop			; (mov r8, r8)
 8011b10:	20003990 	.word	0x20003990
 8011b14:	20002fd4 	.word	0x20002fd4
 8011b18:	200039e4 	.word	0x200039e4
 8011b1c:	20003992 	.word	0x20003992
 8011b20:	20002fd6 	.word	0x20002fd6
 8011b24:	200039e8 	.word	0x200039e8
 8011b28:	200039e1 	.word	0x200039e1
 8011b2c:	20003988 	.word	0x20003988
 8011b30:	20003644 	.word	0x20003644

08011b34 <TIM17_CYCLE_OFF>:
  * @brief  关闭CYCLE，关闭TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_OFF(void)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	af00      	add	r7, sp, #0

	ON_OFF = OFF;
 8011b38:	4b0c      	ldr	r3, [pc, #48]	; (8011b6c <TIM17_CYCLE_OFF+0x38>)
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim17);
 8011b3e:	4b0c      	ldr	r3, [pc, #48]	; (8011b70 <TIM17_CYCLE_OFF+0x3c>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	6a1b      	ldr	r3, [r3, #32]
 8011b44:	4a0b      	ldr	r2, [pc, #44]	; (8011b74 <TIM17_CYCLE_OFF+0x40>)
 8011b46:	4013      	ands	r3, r2
 8011b48:	d10d      	bne.n	8011b66 <TIM17_CYCLE_OFF+0x32>
 8011b4a:	4b09      	ldr	r3, [pc, #36]	; (8011b70 <TIM17_CYCLE_OFF+0x3c>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	6a1b      	ldr	r3, [r3, #32]
 8011b50:	4a09      	ldr	r2, [pc, #36]	; (8011b78 <TIM17_CYCLE_OFF+0x44>)
 8011b52:	4013      	ands	r3, r2
 8011b54:	d107      	bne.n	8011b66 <TIM17_CYCLE_OFF+0x32>
 8011b56:	4b06      	ldr	r3, [pc, #24]	; (8011b70 <TIM17_CYCLE_OFF+0x3c>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	4b04      	ldr	r3, [pc, #16]	; (8011b70 <TIM17_CYCLE_OFF+0x3c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2101      	movs	r1, #1
 8011b62:	438a      	bics	r2, r1
 8011b64:	601a      	str	r2, [r3, #0]
}
 8011b66:	46c0      	nop			; (mov r8, r8)
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	20003988 	.word	0x20003988
 8011b70:	20003644 	.word	0x20003644
 8011b74:	00001111 	.word	0x00001111
 8011b78:	00000444 	.word	0x00000444

08011b7c <SPI_OLED_SendData>:
	* @brief  向OLED发送数据
	* @param  要发送的数据
	* @retval None
	*/
void SPI_OLED_SendData(uint8_t byte)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	0002      	movs	r2, r0
 8011b84:	1dfb      	adds	r3, r7, #7
 8011b86:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011b88:	4b15      	ldr	r3, [pc, #84]	; (8011be0 <SPI_OLED_SendData+0x64>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	68da      	ldr	r2, [r3, #12]
 8011b8e:	4b14      	ldr	r3, [pc, #80]	; (8011be0 <SPI_OLED_SendData+0x64>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2101      	movs	r1, #1
 8011b94:	438a      	bics	r2, r1
 8011b96:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011b98:	4b12      	ldr	r3, [pc, #72]	; (8011be4 <SPI_OLED_SendData+0x68>)
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	2102      	movs	r1, #2
 8011b9e:	0018      	movs	r0, r3
 8011ba0:	f7f5 f9c7 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011ba4:	4b0f      	ldr	r3, [pc, #60]	; (8011be4 <SPI_OLED_SendData+0x68>)
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	2101      	movs	r1, #1
 8011baa:	0018      	movs	r0, r3
 8011bac:	f7f5 f9c1 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 8011bb0:	1df9      	adds	r1, r7, #7
 8011bb2:	480d      	ldr	r0, [pc, #52]	; (8011be8 <SPI_OLED_SendData+0x6c>)
 8011bb4:	230a      	movs	r3, #10
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	f7f6 f8ca 	bl	8007d50 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011bbc:	4b09      	ldr	r3, [pc, #36]	; (8011be4 <SPI_OLED_SendData+0x68>)
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	2101      	movs	r1, #1
 8011bc2:	0018      	movs	r0, r3
 8011bc4:	f7f5 f9b5 	bl	8006f32 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011bc8:	4b05      	ldr	r3, [pc, #20]	; (8011be0 <SPI_OLED_SendData+0x64>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	68da      	ldr	r2, [r3, #12]
 8011bce:	4b04      	ldr	r3, [pc, #16]	; (8011be0 <SPI_OLED_SendData+0x64>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	430a      	orrs	r2, r1
 8011bd6:	60da      	str	r2, [r3, #12]

}
 8011bd8:	46c0      	nop			; (mov r8, r8)
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	b002      	add	sp, #8
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	2000347c 	.word	0x2000347c
 8011be4:	50000800 	.word	0x50000800
 8011be8:	200033c8 	.word	0x200033c8

08011bec <SPI_OLED_SendCommond>:
	* @brief  向OLED发送命令
	* @param  要发送的命令
	* @retval None
	*/
void SPI_OLED_SendCommond(uint8_t byte)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	0002      	movs	r2, r0
 8011bf4:	1dfb      	adds	r3, r7, #7
 8011bf6:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011bf8:	4b15      	ldr	r3, [pc, #84]	; (8011c50 <SPI_OLED_SendCommond+0x64>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	68da      	ldr	r2, [r3, #12]
 8011bfe:	4b14      	ldr	r3, [pc, #80]	; (8011c50 <SPI_OLED_SendCommond+0x64>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2101      	movs	r1, #1
 8011c04:	438a      	bics	r2, r1
 8011c06:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);//dc 0
 8011c08:	4b12      	ldr	r3, [pc, #72]	; (8011c54 <SPI_OLED_SendCommond+0x68>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	2102      	movs	r1, #2
 8011c0e:	0018      	movs	r0, r3
 8011c10:	f7f5 f98f 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011c14:	4b0f      	ldr	r3, [pc, #60]	; (8011c54 <SPI_OLED_SendCommond+0x68>)
 8011c16:	2200      	movs	r2, #0
 8011c18:	2101      	movs	r1, #1
 8011c1a:	0018      	movs	r0, r3
 8011c1c:	f7f5 f989 	bl	8006f32 <HAL_GPIO_WritePin>


	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 8011c20:	1df9      	adds	r1, r7, #7
 8011c22:	480d      	ldr	r0, [pc, #52]	; (8011c58 <SPI_OLED_SendCommond+0x6c>)
 8011c24:	230a      	movs	r3, #10
 8011c26:	2201      	movs	r2, #1
 8011c28:	f7f6 f892 	bl	8007d50 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011c2c:	4b09      	ldr	r3, [pc, #36]	; (8011c54 <SPI_OLED_SendCommond+0x68>)
 8011c2e:	2201      	movs	r2, #1
 8011c30:	2101      	movs	r1, #1
 8011c32:	0018      	movs	r0, r3
 8011c34:	f7f5 f97d 	bl	8006f32 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011c38:	4b05      	ldr	r3, [pc, #20]	; (8011c50 <SPI_OLED_SendCommond+0x64>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	68da      	ldr	r2, [r3, #12]
 8011c3e:	4b04      	ldr	r3, [pc, #16]	; (8011c50 <SPI_OLED_SendCommond+0x64>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	2101      	movs	r1, #1
 8011c44:	430a      	orrs	r2, r1
 8011c46:	60da      	str	r2, [r3, #12]
}
 8011c48:	46c0      	nop			; (mov r8, r8)
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	b002      	add	sp, #8
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	2000347c 	.word	0x2000347c
 8011c54:	50000800 	.word	0x50000800
 8011c58:	200033c8 	.word	0x200033c8

08011c5c <OLED_Init>:

void OLED_Init(void)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	af00      	add	r7, sp, #0

	res_OLED;							//将SPI3_RES引脚置0
 8011c60:	4b6b      	ldr	r3, [pc, #428]	; (8011e10 <OLED_Init+0x1b4>)
 8011c62:	2200      	movs	r2, #0
 8011c64:	2104      	movs	r1, #4
 8011c66:	0018      	movs	r0, r3
 8011c68:	f7f5 f963 	bl	8006f32 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	f7f3 fabb 	bl	80051e8 <HAL_Delay>
	set_OLED; 						//将SPI3_RES引脚置1
 8011c72:	4b67      	ldr	r3, [pc, #412]	; (8011e10 <OLED_Init+0x1b4>)
 8011c74:	2201      	movs	r2, #1
 8011c76:	2104      	movs	r1, #4
 8011c78:	0018      	movs	r0, r3
 8011c7a:	f7f5 f95a 	bl	8006f32 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8011c7e:	2005      	movs	r0, #5
 8011c80:	f7f3 fab2 	bl	80051e8 <HAL_Delay>

	SPI_OLED_SendCommond(Set_Command_Lock);//开锁
 8011c84:	20fd      	movs	r0, #253	; 0xfd
 8011c86:	f7ff ffb1 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x12);
 8011c8a:	2012      	movs	r0, #18
 8011c8c:	f7ff ff76 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Column_Address_Commond);//设置列地址
 8011c90:	2015      	movs	r0, #21
 8011c92:	f7ff ffab 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c);
 8011c96:	201c      	movs	r0, #28
 8011c98:	f7ff ff70 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x5b);
 8011c9c:	205b      	movs	r0, #91	; 0x5b
 8011c9e:	f7ff ff6d 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Row_Address_Commond);//设置行地址
 8011ca2:	2075      	movs	r0, #117	; 0x75
 8011ca4:	f7ff ffa2 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f7ff ff67 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3f);
 8011cae:	203f      	movs	r0, #63	; 0x3f
 8011cb0:	f7ff ff64 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Sleep_mode_ON);//休眠
 8011cb4:	20ae      	movs	r0, #174	; 0xae
 8011cb6:	f7ff ff99 	bl	8011bec <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Front_Clock_Divider);//设置前时钟分频器/振荡器频率
 8011cba:	20b3      	movs	r0, #179	; 0xb3
 8011cbc:	f7ff ff96 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x91);
 8011cc0:	2091      	movs	r0, #145	; 0x91
 8011cc2:	f7ff ff5b 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_MUX_Ratio);//设置多路选择开关比值
 8011cc6:	20ca      	movs	r0, #202	; 0xca
 8011cc8:	f7ff ff90 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x3f);
 8011ccc:	203f      	movs	r0, #63	; 0x3f
 8011cce:	f7ff ff55 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Offset);//从0-127设置垂直滚动
 8011cd2:	20a2      	movs	r0, #162	; 0xa2
 8011cd4:	f7ff ff8a 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011cd8:	2000      	movs	r0, #0
 8011cda:	f7ff ff4f 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Start_Line);//设置启动行
 8011cde:	20a1      	movs	r0, #161	; 0xa1
 8011ce0:	f7ff ff84 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	f7ff ff49 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//设置正常显示
 8011cea:	20a6      	movs	r0, #166	; 0xa6
 8011cec:	f7ff ff7e 	bl	8011bec <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8011cf0:	20a0      	movs	r0, #160	; 0xa0
 8011cf2:	f7ff ff7b 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8011cf6:	2014      	movs	r0, #20
 8011cf8:	f7ff ff40 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8011cfc:	2011      	movs	r0, #17
 8011cfe:	f7ff ff3d 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_GPIO);//引脚设定
 8011d02:	20b5      	movs	r0, #181	; 0xb5
 8011d04:	f7ff ff72 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011d08:	2000      	movs	r0, #0
 8011d0a:	f7ff ff37 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Function_Selection);//内部电压调节
 8011d0e:	20ab      	movs	r0, #171	; 0xab
 8011d10:	f7ff ff6c 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x01);
 8011d14:	2001      	movs	r0, #1
 8011d16:	f7ff ff31 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xb4);
 8011d1a:	20b4      	movs	r0, #180	; 0xb4
 8011d1c:	f7ff ff66 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa0);
 8011d20:	20a0      	movs	r0, #160	; 0xa0
 8011d22:	f7ff ff2b 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0xfd);
 8011d26:	20fd      	movs	r0, #253	; 0xfd
 8011d28:	f7ff ff28 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Contrast_Current);//设置对比度电流
 8011d2c:	20c1      	movs	r0, #193	; 0xc1
 8011d2e:	f7ff ff5d 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xaf);
 8011d32:	20af      	movs	r0, #175	; 0xaf
 8011d34:	f7ff ff22 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Master_Contrast_Current_Control);//主对比度电流控制
 8011d38:	20c7      	movs	r0, #199	; 0xc7
 8011d3a:	f7ff ff57 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0f);
 8011d3e:	200f      	movs	r0, #15
 8011d40:	f7ff ff1c 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Gray_Scale_Table);//设置灰度表
 8011d44:	20b8      	movs	r0, #184	; 0xb8
 8011d46:	f7ff ff51 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0c);
 8011d4a:	200c      	movs	r0, #12
 8011d4c:	f7ff ff16 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x18);
 8011d50:	2018      	movs	r0, #24
 8011d52:	f7ff ff13 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x24);
 8011d56:	2024      	movs	r0, #36	; 0x24
 8011d58:	f7ff ff10 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x30);
 8011d5c:	2030      	movs	r0, #48	; 0x30
 8011d5e:	f7ff ff0d 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3c);
 8011d62:	203c      	movs	r0, #60	; 0x3c
 8011d64:	f7ff ff0a 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x48);
 8011d68:	2048      	movs	r0, #72	; 0x48
 8011d6a:	f7ff ff07 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x54);
 8011d6e:	2054      	movs	r0, #84	; 0x54
 8011d70:	f7ff ff04 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x60);
 8011d74:	2060      	movs	r0, #96	; 0x60
 8011d76:	f7ff ff01 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x6c);
 8011d7a:	206c      	movs	r0, #108	; 0x6c
 8011d7c:	f7ff fefe 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x78);
 8011d80:	2078      	movs	r0, #120	; 0x78
 8011d82:	f7ff fefb 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x84);
 8011d86:	2084      	movs	r0, #132	; 0x84
 8011d88:	f7ff fef8 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x90);
 8011d8c:	2090      	movs	r0, #144	; 0x90
 8011d8e:	f7ff fef5 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x9c);
 8011d92:	209c      	movs	r0, #156	; 0x9c
 8011d94:	f7ff fef2 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0xa8);
 8011d98:	20a8      	movs	r0, #168	; 0xa8
 8011d9a:	f7ff feef 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0xb4);
 8011d9e:	20b4      	movs	r0, #180	; 0xb4
 8011da0:	f7ff feec 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Enable_Gray_Scale_table);//开启灰度表
 8011da4:	2000      	movs	r0, #0
 8011da6:	f7ff ff21 	bl	8011bec <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Phase_Length);//设置相位长度
 8011daa:	20b1      	movs	r0, #177	; 0xb1
 8011dac:	f7ff ff1e 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xE2);
 8011db0:	20e2      	movs	r0, #226	; 0xe2
 8011db2:	f7ff fee3 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xD1); 								//Display Enhancement B
 8011db6:	20d1      	movs	r0, #209	; 0xd1
 8011db8:	f7ff ff18 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa2);
 8011dbc:	20a2      	movs	r0, #162	; 0xa2
 8011dbe:	f7ff fedd 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x20);										//反显
 8011dc2:	2020      	movs	r0, #32
 8011dc4:	f7ff feda 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Pre_charge_voltage);//设置预充电电压
 8011dc8:	20bb      	movs	r0, #187	; 0xbb
 8011dca:	f7ff ff0f 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1F);
 8011dce:	201f      	movs	r0, #31
 8011dd0:	f7ff fed4 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Second_Precharge_Period);//设置第二预充期间
 8011dd4:	20b6      	movs	r0, #182	; 0xb6
 8011dd6:	f7ff ff09 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x08);
 8011dda:	2008      	movs	r0, #8
 8011ddc:	f7ff fece 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_VCOMH );//设置COM取消选择电压等级
 8011de0:	20be      	movs	r0, #190	; 0xbe
 8011de2:	f7ff ff03 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x07);
 8011de6:	2007      	movs	r0, #7
 8011de8:	f7ff fec8 	bl	8011b7c <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//正常显示
 8011dec:	20a6      	movs	r0, #166	; 0xa6
 8011dee:	f7ff fefd 	bl	8011bec <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Exit_Partial_Display);//该命令被发送到退出部分显示模式
 8011df2:	20a9      	movs	r0, #169	; 0xa9
 8011df4:	f7ff fefa 	bl	8011bec <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Write_RAM_Command);
 8011df8:	205c      	movs	r0, #92	; 0x5c
 8011dfa:	f7ff fef7 	bl	8011bec <SPI_OLED_SendCommond>

	Fill_RAM(0x00);   //清屏
 8011dfe:	2000      	movs	r0, #0
 8011e00:	f000 fcf8 	bl	80127f4 <Fill_RAM>

	SPI_OLED_SendCommond(Sleep_mode_OFF);//关休眠
 8011e04:	20af      	movs	r0, #175	; 0xaf
 8011e06:	f7ff fef1 	bl	8011bec <SPI_OLED_SendCommond>

}
 8011e0a:	46c0      	nop			; (mov r8, r8)
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	50000800 	.word	0x50000800

08011e14 <Font_1Bit_To_4Bit>:
 * @brief  转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据（字模表的元素）
 * @retval None
 */
void Font_1Bit_To_4Bit(uint8_t Data)
{
 8011e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e16:	b087      	sub	sp, #28
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	0002      	movs	r2, r0
 8011e1c:	1dfb      	adds	r3, r7, #7
 8011e1e:	701a      	strb	r2, [r3, #0]
	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 uint8_t mask=0x01;
 8011e20:	2317      	movs	r3, #23
 8011e22:	18fb      	adds	r3, r7, r3
 8011e24:	2201      	movs	r2, #1
 8011e26:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8011e28:	230c      	movs	r3, #12
 8011e2a:	18fb      	adds	r3, r7, r3
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	601a      	str	r2, [r3, #0]
 8011e30:	2200      	movs	r2, #0
 8011e32:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 8011e34:	2308      	movs	r3, #8
 8011e36:	18fb      	adds	r3, r7, r3
 8011e38:	2200      	movs	r2, #0
 8011e3a:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 8011e3c:	2316      	movs	r3, #22
 8011e3e:	18fb      	adds	r3, r7, r3
 8011e40:	2200      	movs	r2, #0
 8011e42:	701a      	strb	r2, [r3, #0]
 8011e44:	e037      	b.n	8011eb6 <Font_1Bit_To_4Bit+0xa2>
	 {
		 if((Data&mask)==mask) temp[i]|=Light;//low 4 bits set
 8011e46:	1dfb      	adds	r3, r7, #7
 8011e48:	2117      	movs	r1, #23
 8011e4a:	187a      	adds	r2, r7, r1
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	7812      	ldrb	r2, [r2, #0]
 8011e50:	4013      	ands	r3, r2
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	187a      	adds	r2, r7, r1
 8011e56:	7812      	ldrb	r2, [r2, #0]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d10e      	bne.n	8011e7a <Font_1Bit_To_4Bit+0x66>
 8011e5c:	2016      	movs	r0, #22
 8011e5e:	183b      	adds	r3, r7, r0
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	240c      	movs	r4, #12
 8011e64:	193a      	adds	r2, r7, r4
 8011e66:	5cd1      	ldrb	r1, [r2, r3]
 8011e68:	4b54      	ldr	r3, [pc, #336]	; (8011fbc <Font_1Bit_To_4Bit+0x1a8>)
 8011e6a:	781a      	ldrb	r2, [r3, #0]
 8011e6c:	183b      	adds	r3, r7, r0
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	430a      	orrs	r2, r1
 8011e72:	b2d1      	uxtb	r1, r2
 8011e74:	193a      	adds	r2, r7, r4
 8011e76:	54d1      	strb	r1, [r2, r3]
 8011e78:	e011      	b.n	8011e9e <Font_1Bit_To_4Bit+0x8a>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 8011e7a:	2116      	movs	r1, #22
 8011e7c:	187b      	adds	r3, r7, r1
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	200c      	movs	r0, #12
 8011e82:	183a      	adds	r2, r7, r0
 8011e84:	5cd3      	ldrb	r3, [r2, r3]
 8011e86:	b25b      	sxtb	r3, r3
 8011e88:	4a4c      	ldr	r2, [pc, #304]	; (8011fbc <Font_1Bit_To_4Bit+0x1a8>)
 8011e8a:	7812      	ldrb	r2, [r2, #0]
 8011e8c:	0112      	lsls	r2, r2, #4
 8011e8e:	b252      	sxtb	r2, r2
 8011e90:	4013      	ands	r3, r2
 8011e92:	b25a      	sxtb	r2, r3
 8011e94:	187b      	adds	r3, r7, r1
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	b2d1      	uxtb	r1, r2
 8011e9a:	183a      	adds	r2, r7, r0
 8011e9c:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8011e9e:	2317      	movs	r3, #23
 8011ea0:	18fa      	adds	r2, r7, r3
 8011ea2:	18fb      	adds	r3, r7, r3
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	18db      	adds	r3, r3, r3
 8011ea8:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 8011eaa:	2116      	movs	r1, #22
 8011eac:	187b      	adds	r3, r7, r1
 8011eae:	781a      	ldrb	r2, [r3, #0]
 8011eb0:	187b      	adds	r3, r7, r1
 8011eb2:	3201      	adds	r2, #1
 8011eb4:	701a      	strb	r2, [r3, #0]
 8011eb6:	2316      	movs	r3, #22
 8011eb8:	18fb      	adds	r3, r7, r3
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	2b07      	cmp	r3, #7
 8011ebe:	d9c2      	bls.n	8011e46 <Font_1Bit_To_4Bit+0x32>

	 }
	 mask=0x0f;
 8011ec0:	2317      	movs	r3, #23
 8011ec2:	18fb      	adds	r3, r7, r3
 8011ec4:	220f      	movs	r2, #15
 8011ec6:	701a      	strb	r2, [r3, #0]
	 uint8_t index=3;
 8011ec8:	2315      	movs	r3, #21
 8011eca:	18fb      	adds	r3, r7, r3
 8011ecc:	2203      	movs	r2, #3
 8011ece:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8011ed0:	2314      	movs	r3, #20
 8011ed2:	18fb      	adds	r3, r7, r3
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	e03d      	b.n	8011f56 <Font_1Bit_To_4Bit+0x142>
	 {
		 data_send[index]|=(temp[j]&mask);//0 2 4 6 low
 8011eda:	2015      	movs	r0, #21
 8011edc:	183b      	adds	r3, r7, r0
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	2508      	movs	r5, #8
 8011ee2:	197a      	adds	r2, r7, r5
 8011ee4:	5cd1      	ldrb	r1, [r2, r3]
 8011ee6:	2414      	movs	r4, #20
 8011ee8:	193b      	adds	r3, r7, r4
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	260c      	movs	r6, #12
 8011eee:	19ba      	adds	r2, r7, r6
 8011ef0:	5cd3      	ldrb	r3, [r2, r3]
 8011ef2:	2217      	movs	r2, #23
 8011ef4:	18ba      	adds	r2, r7, r2
 8011ef6:	7812      	ldrb	r2, [r2, #0]
 8011ef8:	4013      	ands	r3, r2
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	183b      	adds	r3, r7, r0
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	430a      	orrs	r2, r1
 8011f02:	b2d1      	uxtb	r1, r2
 8011f04:	197a      	adds	r2, r7, r5
 8011f06:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8011f08:	183b      	adds	r3, r7, r0
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	197a      	adds	r2, r7, r5
 8011f0e:	5cd3      	ldrb	r3, [r2, r3]
 8011f10:	b25a      	sxtb	r2, r3
 8011f12:	193b      	adds	r3, r7, r4
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	3301      	adds	r3, #1
 8011f18:	19b9      	adds	r1, r7, r6
 8011f1a:	5ccb      	ldrb	r3, [r1, r3]
 8011f1c:	2117      	movs	r1, #23
 8011f1e:	1879      	adds	r1, r7, r1
 8011f20:	7809      	ldrb	r1, [r1, #0]
 8011f22:	400b      	ands	r3, r1
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	011b      	lsls	r3, r3, #4
 8011f28:	b25b      	sxtb	r3, r3
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	b25a      	sxtb	r2, r3
 8011f2e:	183b      	adds	r3, r7, r0
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	b2d1      	uxtb	r1, r2
 8011f34:	197a      	adds	r2, r7, r5
 8011f36:	54d1      	strb	r1, [r2, r3]
		 j++;
 8011f38:	193b      	adds	r3, r7, r4
 8011f3a:	781a      	ldrb	r2, [r3, #0]
 8011f3c:	193b      	adds	r3, r7, r4
 8011f3e:	3201      	adds	r2, #1
 8011f40:	701a      	strb	r2, [r3, #0]
		 j++;
 8011f42:	193b      	adds	r3, r7, r4
 8011f44:	781a      	ldrb	r2, [r3, #0]
 8011f46:	193b      	adds	r3, r7, r4
 8011f48:	3201      	adds	r2, #1
 8011f4a:	701a      	strb	r2, [r3, #0]
		 index--;
 8011f4c:	183b      	adds	r3, r7, r0
 8011f4e:	781a      	ldrb	r2, [r3, #0]
 8011f50:	183b      	adds	r3, r7, r0
 8011f52:	3a01      	subs	r2, #1
 8011f54:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8011f56:	2314      	movs	r3, #20
 8011f58:	18fb      	adds	r3, r7, r3
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	2b07      	cmp	r3, #7
 8011f5e:	d9bc      	bls.n	8011eda <Font_1Bit_To_4Bit+0xc6>

	 }
	 //写RAM

		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011f60:	4b17      	ldr	r3, [pc, #92]	; (8011fc0 <Font_1Bit_To_4Bit+0x1ac>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68da      	ldr	r2, [r3, #12]
 8011f66:	4b16      	ldr	r3, [pc, #88]	; (8011fc0 <Font_1Bit_To_4Bit+0x1ac>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2101      	movs	r1, #1
 8011f6c:	438a      	bics	r2, r1
 8011f6e:	60da      	str	r2, [r3, #12]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011f70:	4b14      	ldr	r3, [pc, #80]	; (8011fc4 <Font_1Bit_To_4Bit+0x1b0>)
 8011f72:	2201      	movs	r2, #1
 8011f74:	2102      	movs	r1, #2
 8011f76:	0018      	movs	r0, r3
 8011f78:	f7f4 ffdb 	bl	8006f32 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011f7c:	4b11      	ldr	r3, [pc, #68]	; (8011fc4 <Font_1Bit_To_4Bit+0x1b0>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	2101      	movs	r1, #1
 8011f82:	0018      	movs	r0, r3
 8011f84:	f7f4 ffd5 	bl	8006f32 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1,data_send,4,100);
 8011f88:	2308      	movs	r3, #8
 8011f8a:	18f9      	adds	r1, r7, r3
 8011f8c:	480e      	ldr	r0, [pc, #56]	; (8011fc8 <Font_1Bit_To_4Bit+0x1b4>)
 8011f8e:	2364      	movs	r3, #100	; 0x64
 8011f90:	2204      	movs	r2, #4
 8011f92:	f7f5 fedd 	bl	8007d50 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011f96:	4b0b      	ldr	r3, [pc, #44]	; (8011fc4 <Font_1Bit_To_4Bit+0x1b0>)
 8011f98:	2201      	movs	r2, #1
 8011f9a:	2101      	movs	r1, #1
 8011f9c:	0018      	movs	r0, r3
 8011f9e:	f7f4 ffc8 	bl	8006f32 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011fa2:	4b07      	ldr	r3, [pc, #28]	; (8011fc0 <Font_1Bit_To_4Bit+0x1ac>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	68da      	ldr	r2, [r3, #12]
 8011fa8:	4b05      	ldr	r3, [pc, #20]	; (8011fc0 <Font_1Bit_To_4Bit+0x1ac>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2101      	movs	r1, #1
 8011fae:	430a      	orrs	r2, r1
 8011fb0:	60da      	str	r2, [r3, #12]


}
 8011fb2:	46c0      	nop			; (mov r8, r8)
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	b007      	add	sp, #28
 8011fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fba:	46c0      	nop			; (mov r8, r8)
 8011fbc:	200030b3 	.word	0x200030b3
 8011fc0:	2000347c 	.word	0x2000347c
 8011fc4:	50000800 	.word	0x50000800
 8011fc8:	200033c8 	.word	0x200033c8

08011fcc <_1Bit_To_4Bit_16x32>:

static void _1Bit_To_4Bit_16x32(uint8_t* Pdata)
{
 8011fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fce:	b0c7      	sub	sp, #284	; 0x11c
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]

	 uint8_t data_send_buffer[4*64]={0x00};
 8011fd4:	4b9e      	ldr	r3, [pc, #632]	; (8012250 <_1Bit_To_4Bit_16x32+0x284>)
 8011fd6:	248c      	movs	r4, #140	; 0x8c
 8011fd8:	0064      	lsls	r4, r4, #1
 8011fda:	191b      	adds	r3, r3, r4
 8011fdc:	19db      	adds	r3, r3, r7
 8011fde:	2200      	movs	r2, #0
 8011fe0:	601a      	str	r2, [r3, #0]
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	22fc      	movs	r2, #252	; 0xfc
 8011fe6:	2100      	movs	r1, #0
 8011fe8:	0018      	movs	r0, r3
 8011fea:	f002 fb82 	bl	80146f2 <memset>
	 uint8_t mask=0x01;
 8011fee:	2318      	movs	r3, #24
 8011ff0:	33ff      	adds	r3, #255	; 0xff
 8011ff2:	18fb      	adds	r3, r7, r3
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8011ff8:	4b96      	ldr	r3, [pc, #600]	; (8012254 <_1Bit_To_4Bit_16x32+0x288>)
 8011ffa:	191b      	adds	r3, r3, r4
 8011ffc:	19db      	adds	r3, r3, r7
 8011ffe:	2200      	movs	r2, #0
 8012000:	601a      	str	r2, [r3, #0]
 8012002:	2200      	movs	r2, #0
 8012004:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<64;index++)
 8012006:	238b      	movs	r3, #139	; 0x8b
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	18fb      	adds	r3, r7, r3
 801200c:	2200      	movs	r2, #0
 801200e:	701a      	strb	r2, [r3, #0]
 8012010:	e0e9      	b.n	80121e6 <_1Bit_To_4Bit_16x32+0x21a>
	 {
		 memset(&temp[0],0,8);
 8012012:	2308      	movs	r3, #8
 8012014:	18fb      	adds	r3, r7, r3
 8012016:	2208      	movs	r2, #8
 8012018:	2100      	movs	r1, #0
 801201a:	0018      	movs	r0, r3
 801201c:	f002 fb69 	bl	80146f2 <memset>
		 mask=0x01;
 8012020:	2318      	movs	r3, #24
 8012022:	33ff      	adds	r3, #255	; 0xff
 8012024:	18fb      	adds	r3, r7, r3
 8012026:	2201      	movs	r2, #1
 8012028:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 801202a:	2316      	movs	r3, #22
 801202c:	33ff      	adds	r3, #255	; 0xff
 801202e:	18fb      	adds	r3, r7, r3
 8012030:	2200      	movs	r2, #0
 8012032:	701a      	strb	r2, [r3, #0]
 8012034:	e04b      	b.n	80120ce <_1Bit_To_4Bit_16x32+0x102>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 8012036:	238b      	movs	r3, #139	; 0x8b
 8012038:	005b      	lsls	r3, r3, #1
 801203a:	18fb      	adds	r3, r7, r3
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	18d3      	adds	r3, r2, r3
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	2118      	movs	r1, #24
 8012046:	31ff      	adds	r1, #255	; 0xff
 8012048:	187a      	adds	r2, r7, r1
 801204a:	7812      	ldrb	r2, [r2, #0]
 801204c:	4013      	ands	r3, r2
 801204e:	b2db      	uxtb	r3, r3
 8012050:	187a      	adds	r2, r7, r1
 8012052:	7812      	ldrb	r2, [r2, #0]
 8012054:	429a      	cmp	r2, r3
 8012056:	d114      	bne.n	8012082 <_1Bit_To_4Bit_16x32+0xb6>
 8012058:	2016      	movs	r0, #22
 801205a:	30ff      	adds	r0, #255	; 0xff
 801205c:	183b      	adds	r3, r7, r0
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	4a7c      	ldr	r2, [pc, #496]	; (8012254 <_1Bit_To_4Bit_16x32+0x288>)
 8012062:	248c      	movs	r4, #140	; 0x8c
 8012064:	0064      	lsls	r4, r4, #1
 8012066:	1912      	adds	r2, r2, r4
 8012068:	19d2      	adds	r2, r2, r7
 801206a:	5cd1      	ldrb	r1, [r2, r3]
 801206c:	4b7a      	ldr	r3, [pc, #488]	; (8012258 <_1Bit_To_4Bit_16x32+0x28c>)
 801206e:	781a      	ldrb	r2, [r3, #0]
 8012070:	183b      	adds	r3, r7, r0
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	430a      	orrs	r2, r1
 8012076:	b2d1      	uxtb	r1, r2
 8012078:	4a76      	ldr	r2, [pc, #472]	; (8012254 <_1Bit_To_4Bit_16x32+0x288>)
 801207a:	1912      	adds	r2, r2, r4
 801207c:	19d2      	adds	r2, r2, r7
 801207e:	54d1      	strb	r1, [r2, r3]
 8012080:	e017      	b.n	80120b2 <_1Bit_To_4Bit_16x32+0xe6>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 8012082:	2116      	movs	r1, #22
 8012084:	31ff      	adds	r1, #255	; 0xff
 8012086:	187b      	adds	r3, r7, r1
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	4a72      	ldr	r2, [pc, #456]	; (8012254 <_1Bit_To_4Bit_16x32+0x288>)
 801208c:	208c      	movs	r0, #140	; 0x8c
 801208e:	0040      	lsls	r0, r0, #1
 8012090:	1812      	adds	r2, r2, r0
 8012092:	19d2      	adds	r2, r2, r7
 8012094:	5cd3      	ldrb	r3, [r2, r3]
 8012096:	b25b      	sxtb	r3, r3
 8012098:	4a6f      	ldr	r2, [pc, #444]	; (8012258 <_1Bit_To_4Bit_16x32+0x28c>)
 801209a:	7812      	ldrb	r2, [r2, #0]
 801209c:	0112      	lsls	r2, r2, #4
 801209e:	b252      	sxtb	r2, r2
 80120a0:	4013      	ands	r3, r2
 80120a2:	b25a      	sxtb	r2, r3
 80120a4:	187b      	adds	r3, r7, r1
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	b2d1      	uxtb	r1, r2
 80120aa:	4a6a      	ldr	r2, [pc, #424]	; (8012254 <_1Bit_To_4Bit_16x32+0x288>)
 80120ac:	1812      	adds	r2, r2, r0
 80120ae:	19d2      	adds	r2, r2, r7
 80120b0:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 80120b2:	2318      	movs	r3, #24
 80120b4:	33ff      	adds	r3, #255	; 0xff
 80120b6:	18fa      	adds	r2, r7, r3
 80120b8:	18fb      	adds	r3, r7, r3
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	18db      	adds	r3, r3, r3
 80120be:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 80120c0:	2116      	movs	r1, #22
 80120c2:	31ff      	adds	r1, #255	; 0xff
 80120c4:	187b      	adds	r3, r7, r1
 80120c6:	781a      	ldrb	r2, [r3, #0]
 80120c8:	187b      	adds	r3, r7, r1
 80120ca:	3201      	adds	r2, #1
 80120cc:	701a      	strb	r2, [r3, #0]
 80120ce:	2316      	movs	r3, #22
 80120d0:	33ff      	adds	r3, #255	; 0xff
 80120d2:	18fb      	adds	r3, r7, r3
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	2b07      	cmp	r3, #7
 80120d8:	d9ad      	bls.n	8012036 <_1Bit_To_4Bit_16x32+0x6a>

		 }

		 mask=0x0f;
 80120da:	2318      	movs	r3, #24
 80120dc:	33ff      	adds	r3, #255	; 0xff
 80120de:	18fb      	adds	r3, r7, r3
 80120e0:	220f      	movs	r2, #15
 80120e2:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 80120e4:	238a      	movs	r3, #138	; 0x8a
 80120e6:	005b      	lsls	r3, r3, #1
 80120e8:	18fb      	adds	r3, r7, r3
 80120ea:	2203      	movs	r2, #3
 80120ec:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 80120ee:	2314      	movs	r3, #20
 80120f0:	33ff      	adds	r3, #255	; 0xff
 80120f2:	18fb      	adds	r3, r7, r3
 80120f4:	2200      	movs	r2, #0
 80120f6:	701a      	strb	r2, [r3, #0]
 80120f8:	e068      	b.n	80121cc <_1Bit_To_4Bit_16x32+0x200>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 80120fa:	208a      	movs	r0, #138	; 0x8a
 80120fc:	0040      	lsls	r0, r0, #1
 80120fe:	183b      	adds	r3, r7, r0
 8012100:	781a      	ldrb	r2, [r3, #0]
 8012102:	238b      	movs	r3, #139	; 0x8b
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	18fb      	adds	r3, r7, r3
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	18d3      	adds	r3, r2, r3
 801210e:	4a50      	ldr	r2, [pc, #320]	; (8012250 <_1Bit_To_4Bit_16x32+0x284>)
 8012110:	258c      	movs	r5, #140	; 0x8c
 8012112:	006d      	lsls	r5, r5, #1
 8012114:	1952      	adds	r2, r2, r5
 8012116:	19d2      	adds	r2, r2, r7
 8012118:	5cd1      	ldrb	r1, [r2, r3]
 801211a:	2614      	movs	r6, #20
 801211c:	36ff      	adds	r6, #255	; 0xff
 801211e:	19bb      	adds	r3, r7, r6
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	4a4c      	ldr	r2, [pc, #304]	; (8012254 <_1Bit_To_4Bit_16x32+0x288>)
 8012124:	1952      	adds	r2, r2, r5
 8012126:	19d2      	adds	r2, r2, r7
 8012128:	5cd3      	ldrb	r3, [r2, r3]
 801212a:	2218      	movs	r2, #24
 801212c:	32ff      	adds	r2, #255	; 0xff
 801212e:	18ba      	adds	r2, r7, r2
 8012130:	7812      	ldrb	r2, [r2, #0]
 8012132:	4013      	ands	r3, r2
 8012134:	b2da      	uxtb	r2, r3
 8012136:	0004      	movs	r4, r0
 8012138:	183b      	adds	r3, r7, r0
 801213a:	7818      	ldrb	r0, [r3, #0]
 801213c:	238b      	movs	r3, #139	; 0x8b
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	18fb      	adds	r3, r7, r3
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	18c3      	adds	r3, r0, r3
 8012148:	430a      	orrs	r2, r1
 801214a:	b2d1      	uxtb	r1, r2
 801214c:	4a40      	ldr	r2, [pc, #256]	; (8012250 <_1Bit_To_4Bit_16x32+0x284>)
 801214e:	1950      	adds	r0, r2, r5
 8012150:	19c2      	adds	r2, r0, r7
 8012152:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8012154:	0020      	movs	r0, r4
 8012156:	183b      	adds	r3, r7, r0
 8012158:	781a      	ldrb	r2, [r3, #0]
 801215a:	238b      	movs	r3, #139	; 0x8b
 801215c:	005b      	lsls	r3, r3, #1
 801215e:	18fb      	adds	r3, r7, r3
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	009b      	lsls	r3, r3, #2
 8012164:	18d3      	adds	r3, r2, r3
 8012166:	4a3a      	ldr	r2, [pc, #232]	; (8012250 <_1Bit_To_4Bit_16x32+0x284>)
 8012168:	1954      	adds	r4, r2, r5
 801216a:	19e2      	adds	r2, r4, r7
 801216c:	5cd3      	ldrb	r3, [r2, r3]
 801216e:	b25a      	sxtb	r2, r3
 8012170:	19bb      	adds	r3, r7, r6
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	3301      	adds	r3, #1
 8012176:	4937      	ldr	r1, [pc, #220]	; (8012254 <_1Bit_To_4Bit_16x32+0x288>)
 8012178:	002c      	movs	r4, r5
 801217a:	194d      	adds	r5, r1, r5
 801217c:	19e9      	adds	r1, r5, r7
 801217e:	5ccb      	ldrb	r3, [r1, r3]
 8012180:	2118      	movs	r1, #24
 8012182:	31ff      	adds	r1, #255	; 0xff
 8012184:	1879      	adds	r1, r7, r1
 8012186:	7809      	ldrb	r1, [r1, #0]
 8012188:	400b      	ands	r3, r1
 801218a:	b2db      	uxtb	r3, r3
 801218c:	011b      	lsls	r3, r3, #4
 801218e:	b25b      	sxtb	r3, r3
 8012190:	4313      	orrs	r3, r2
 8012192:	b259      	sxtb	r1, r3
 8012194:	183b      	adds	r3, r7, r0
 8012196:	781a      	ldrb	r2, [r3, #0]
 8012198:	238b      	movs	r3, #139	; 0x8b
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	18fb      	adds	r3, r7, r3
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	009b      	lsls	r3, r3, #2
 80121a2:	18d3      	adds	r3, r2, r3
 80121a4:	b2c9      	uxtb	r1, r1
 80121a6:	4a2a      	ldr	r2, [pc, #168]	; (8012250 <_1Bit_To_4Bit_16x32+0x284>)
 80121a8:	1912      	adds	r2, r2, r4
 80121aa:	19d2      	adds	r2, r2, r7
 80121ac:	54d1      	strb	r1, [r2, r3]
			 j++;
 80121ae:	19bb      	adds	r3, r7, r6
 80121b0:	781a      	ldrb	r2, [r3, #0]
 80121b2:	19bb      	adds	r3, r7, r6
 80121b4:	3201      	adds	r2, #1
 80121b6:	701a      	strb	r2, [r3, #0]
			 j++;
 80121b8:	19bb      	adds	r3, r7, r6
 80121ba:	781a      	ldrb	r2, [r3, #0]
 80121bc:	19bb      	adds	r3, r7, r6
 80121be:	3201      	adds	r2, #1
 80121c0:	701a      	strb	r2, [r3, #0]
			 k--;
 80121c2:	183b      	adds	r3, r7, r0
 80121c4:	781a      	ldrb	r2, [r3, #0]
 80121c6:	183b      	adds	r3, r7, r0
 80121c8:	3a01      	subs	r2, #1
 80121ca:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 80121cc:	2314      	movs	r3, #20
 80121ce:	33ff      	adds	r3, #255	; 0xff
 80121d0:	18fb      	adds	r3, r7, r3
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	2b07      	cmp	r3, #7
 80121d6:	d990      	bls.n	80120fa <_1Bit_To_4Bit_16x32+0x12e>
	 for(uint8_t index=0;index<64;index++)
 80121d8:	218b      	movs	r1, #139	; 0x8b
 80121da:	0049      	lsls	r1, r1, #1
 80121dc:	187b      	adds	r3, r7, r1
 80121de:	781a      	ldrb	r2, [r3, #0]
 80121e0:	187b      	adds	r3, r7, r1
 80121e2:	3201      	adds	r2, #1
 80121e4:	701a      	strb	r2, [r3, #0]
 80121e6:	238b      	movs	r3, #139	; 0x8b
 80121e8:	005b      	lsls	r3, r3, #1
 80121ea:	18fb      	adds	r3, r7, r3
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	2b3f      	cmp	r3, #63	; 0x3f
 80121f0:	d800      	bhi.n	80121f4 <_1Bit_To_4Bit_16x32+0x228>
 80121f2:	e70e      	b.n	8012012 <_1Bit_To_4Bit_16x32+0x46>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80121f4:	4b19      	ldr	r3, [pc, #100]	; (801225c <_1Bit_To_4Bit_16x32+0x290>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	68da      	ldr	r2, [r3, #12]
 80121fa:	4b18      	ldr	r3, [pc, #96]	; (801225c <_1Bit_To_4Bit_16x32+0x290>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2101      	movs	r1, #1
 8012200:	438a      	bics	r2, r1
 8012202:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8012204:	4b16      	ldr	r3, [pc, #88]	; (8012260 <_1Bit_To_4Bit_16x32+0x294>)
 8012206:	2201      	movs	r2, #1
 8012208:	2102      	movs	r1, #2
 801220a:	0018      	movs	r0, r3
 801220c:	f7f4 fe91 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8012210:	4b13      	ldr	r3, [pc, #76]	; (8012260 <_1Bit_To_4Bit_16x32+0x294>)
 8012212:	2200      	movs	r2, #0
 8012214:	2101      	movs	r1, #1
 8012216:	0018      	movs	r0, r3
 8012218:	f7f4 fe8b 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*64,100);
 801221c:	2380      	movs	r3, #128	; 0x80
 801221e:	005a      	lsls	r2, r3, #1
 8012220:	2310      	movs	r3, #16
 8012222:	18f9      	adds	r1, r7, r3
 8012224:	480f      	ldr	r0, [pc, #60]	; (8012264 <_1Bit_To_4Bit_16x32+0x298>)
 8012226:	2364      	movs	r3, #100	; 0x64
 8012228:	f7f5 fd92 	bl	8007d50 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 801222c:	4b0c      	ldr	r3, [pc, #48]	; (8012260 <_1Bit_To_4Bit_16x32+0x294>)
 801222e:	2201      	movs	r2, #1
 8012230:	2101      	movs	r1, #1
 8012232:	0018      	movs	r0, r3
 8012234:	f7f4 fe7d 	bl	8006f32 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8012238:	4b08      	ldr	r3, [pc, #32]	; (801225c <_1Bit_To_4Bit_16x32+0x290>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	68da      	ldr	r2, [r3, #12]
 801223e:	4b07      	ldr	r3, [pc, #28]	; (801225c <_1Bit_To_4Bit_16x32+0x290>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2101      	movs	r1, #1
 8012244:	430a      	orrs	r2, r1
 8012246:	60da      	str	r2, [r3, #12]


}
 8012248:	46c0      	nop			; (mov r8, r8)
 801224a:	46bd      	mov	sp, r7
 801224c:	b047      	add	sp, #284	; 0x11c
 801224e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012250:	fffffef8 	.word	0xfffffef8
 8012254:	fffffef0 	.word	0xfffffef0
 8012258:	200030b3 	.word	0x200030b3
 801225c:	2000347c 	.word	0x2000347c
 8012260:	50000800 	.word	0x50000800
 8012264:	200033c8 	.word	0x200033c8

08012268 <_1Bit_To_4Bit_8x16>:

static void _1Bit_To_4Bit_8x16(uint8_t* Pdata)
{
 8012268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801226a:	b097      	sub	sp, #92	; 0x5c
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
	 uint8_t data_send_buffer[4*16]={0x00};
 8012270:	2310      	movs	r3, #16
 8012272:	18fb      	adds	r3, r7, r3
 8012274:	2200      	movs	r2, #0
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	3304      	adds	r3, #4
 801227a:	223c      	movs	r2, #60	; 0x3c
 801227c:	2100      	movs	r1, #0
 801227e:	0018      	movs	r0, r3
 8012280:	f002 fa37 	bl	80146f2 <memset>
	 uint8_t mask=0x01;
 8012284:	2357      	movs	r3, #87	; 0x57
 8012286:	18fb      	adds	r3, r7, r3
 8012288:	2201      	movs	r2, #1
 801228a:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 801228c:	2308      	movs	r3, #8
 801228e:	18fb      	adds	r3, r7, r3
 8012290:	2200      	movs	r2, #0
 8012292:	601a      	str	r2, [r3, #0]
 8012294:	2200      	movs	r2, #0
 8012296:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<16;index++)
 8012298:	2356      	movs	r3, #86	; 0x56
 801229a:	18fb      	adds	r3, r7, r3
 801229c:	2200      	movs	r2, #0
 801229e:	701a      	strb	r2, [r3, #0]
 80122a0:	e0bd      	b.n	801241e <_1Bit_To_4Bit_8x16+0x1b6>
	 {
		 memset(&temp[0],0,8);
 80122a2:	2308      	movs	r3, #8
 80122a4:	18fb      	adds	r3, r7, r3
 80122a6:	2208      	movs	r2, #8
 80122a8:	2100      	movs	r1, #0
 80122aa:	0018      	movs	r0, r3
 80122ac:	f002 fa21 	bl	80146f2 <memset>
		 mask=0x01;
 80122b0:	2357      	movs	r3, #87	; 0x57
 80122b2:	18fb      	adds	r3, r7, r3
 80122b4:	2201      	movs	r2, #1
 80122b6:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 80122b8:	2355      	movs	r3, #85	; 0x55
 80122ba:	18fb      	adds	r3, r7, r3
 80122bc:	2200      	movs	r2, #0
 80122be:	701a      	strb	r2, [r3, #0]
 80122c0:	e03b      	b.n	801233a <_1Bit_To_4Bit_8x16+0xd2>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 80122c2:	2356      	movs	r3, #86	; 0x56
 80122c4:	18fb      	adds	r3, r7, r3
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	687a      	ldr	r2, [r7, #4]
 80122ca:	18d3      	adds	r3, r2, r3
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2157      	movs	r1, #87	; 0x57
 80122d0:	187a      	adds	r2, r7, r1
 80122d2:	7812      	ldrb	r2, [r2, #0]
 80122d4:	4013      	ands	r3, r2
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	187a      	adds	r2, r7, r1
 80122da:	7812      	ldrb	r2, [r2, #0]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d10e      	bne.n	80122fe <_1Bit_To_4Bit_8x16+0x96>
 80122e0:	2055      	movs	r0, #85	; 0x55
 80122e2:	183b      	adds	r3, r7, r0
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	2408      	movs	r4, #8
 80122e8:	193a      	adds	r2, r7, r4
 80122ea:	5cd1      	ldrb	r1, [r2, r3]
 80122ec:	4b65      	ldr	r3, [pc, #404]	; (8012484 <_1Bit_To_4Bit_8x16+0x21c>)
 80122ee:	781a      	ldrb	r2, [r3, #0]
 80122f0:	183b      	adds	r3, r7, r0
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	430a      	orrs	r2, r1
 80122f6:	b2d1      	uxtb	r1, r2
 80122f8:	193a      	adds	r2, r7, r4
 80122fa:	54d1      	strb	r1, [r2, r3]
 80122fc:	e011      	b.n	8012322 <_1Bit_To_4Bit_8x16+0xba>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 80122fe:	2155      	movs	r1, #85	; 0x55
 8012300:	187b      	adds	r3, r7, r1
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	2008      	movs	r0, #8
 8012306:	183a      	adds	r2, r7, r0
 8012308:	5cd3      	ldrb	r3, [r2, r3]
 801230a:	b25b      	sxtb	r3, r3
 801230c:	4a5d      	ldr	r2, [pc, #372]	; (8012484 <_1Bit_To_4Bit_8x16+0x21c>)
 801230e:	7812      	ldrb	r2, [r2, #0]
 8012310:	0112      	lsls	r2, r2, #4
 8012312:	b252      	sxtb	r2, r2
 8012314:	4013      	ands	r3, r2
 8012316:	b25a      	sxtb	r2, r3
 8012318:	187b      	adds	r3, r7, r1
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	b2d1      	uxtb	r1, r2
 801231e:	183a      	adds	r2, r7, r0
 8012320:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 8012322:	2357      	movs	r3, #87	; 0x57
 8012324:	18fa      	adds	r2, r7, r3
 8012326:	18fb      	adds	r3, r7, r3
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	18db      	adds	r3, r3, r3
 801232c:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 801232e:	2155      	movs	r1, #85	; 0x55
 8012330:	187b      	adds	r3, r7, r1
 8012332:	781a      	ldrb	r2, [r3, #0]
 8012334:	187b      	adds	r3, r7, r1
 8012336:	3201      	adds	r2, #1
 8012338:	701a      	strb	r2, [r3, #0]
 801233a:	2355      	movs	r3, #85	; 0x55
 801233c:	18fb      	adds	r3, r7, r3
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	2b07      	cmp	r3, #7
 8012342:	d9be      	bls.n	80122c2 <_1Bit_To_4Bit_8x16+0x5a>

		 }

		 mask=0x0f;
 8012344:	2357      	movs	r3, #87	; 0x57
 8012346:	18fb      	adds	r3, r7, r3
 8012348:	220f      	movs	r2, #15
 801234a:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 801234c:	2354      	movs	r3, #84	; 0x54
 801234e:	18fb      	adds	r3, r7, r3
 8012350:	2203      	movs	r2, #3
 8012352:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8012354:	2353      	movs	r3, #83	; 0x53
 8012356:	18fb      	adds	r3, r7, r3
 8012358:	2200      	movs	r2, #0
 801235a:	701a      	strb	r2, [r3, #0]
 801235c:	e054      	b.n	8012408 <_1Bit_To_4Bit_8x16+0x1a0>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 801235e:	2054      	movs	r0, #84	; 0x54
 8012360:	183b      	adds	r3, r7, r0
 8012362:	781a      	ldrb	r2, [r3, #0]
 8012364:	2656      	movs	r6, #86	; 0x56
 8012366:	19bb      	adds	r3, r7, r6
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	009b      	lsls	r3, r3, #2
 801236c:	18d3      	adds	r3, r2, r3
 801236e:	2210      	movs	r2, #16
 8012370:	18ba      	adds	r2, r7, r2
 8012372:	5cd1      	ldrb	r1, [r2, r3]
 8012374:	2553      	movs	r5, #83	; 0x53
 8012376:	197b      	adds	r3, r7, r5
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2408      	movs	r4, #8
 801237c:	193a      	adds	r2, r7, r4
 801237e:	5cd3      	ldrb	r3, [r2, r3]
 8012380:	2457      	movs	r4, #87	; 0x57
 8012382:	193a      	adds	r2, r7, r4
 8012384:	7812      	ldrb	r2, [r2, #0]
 8012386:	4013      	ands	r3, r2
 8012388:	b2da      	uxtb	r2, r3
 801238a:	0004      	movs	r4, r0
 801238c:	183b      	adds	r3, r7, r0
 801238e:	7818      	ldrb	r0, [r3, #0]
 8012390:	19bb      	adds	r3, r7, r6
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	18c3      	adds	r3, r0, r3
 8012398:	430a      	orrs	r2, r1
 801239a:	b2d1      	uxtb	r1, r2
 801239c:	2210      	movs	r2, #16
 801239e:	18ba      	adds	r2, r7, r2
 80123a0:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 80123a2:	0020      	movs	r0, r4
 80123a4:	183b      	adds	r3, r7, r0
 80123a6:	781a      	ldrb	r2, [r3, #0]
 80123a8:	0034      	movs	r4, r6
 80123aa:	19bb      	adds	r3, r7, r6
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	18d3      	adds	r3, r2, r3
 80123b2:	2610      	movs	r6, #16
 80123b4:	19ba      	adds	r2, r7, r6
 80123b6:	5cd3      	ldrb	r3, [r2, r3]
 80123b8:	b25a      	sxtb	r2, r3
 80123ba:	197b      	adds	r3, r7, r5
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	3301      	adds	r3, #1
 80123c0:	2108      	movs	r1, #8
 80123c2:	1879      	adds	r1, r7, r1
 80123c4:	5ccb      	ldrb	r3, [r1, r3]
 80123c6:	2157      	movs	r1, #87	; 0x57
 80123c8:	1879      	adds	r1, r7, r1
 80123ca:	7809      	ldrb	r1, [r1, #0]
 80123cc:	400b      	ands	r3, r1
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	011b      	lsls	r3, r3, #4
 80123d2:	b25b      	sxtb	r3, r3
 80123d4:	4313      	orrs	r3, r2
 80123d6:	b259      	sxtb	r1, r3
 80123d8:	183b      	adds	r3, r7, r0
 80123da:	781a      	ldrb	r2, [r3, #0]
 80123dc:	193b      	adds	r3, r7, r4
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	18d3      	adds	r3, r2, r3
 80123e4:	b2c9      	uxtb	r1, r1
 80123e6:	19ba      	adds	r2, r7, r6
 80123e8:	54d1      	strb	r1, [r2, r3]
			 j++;
 80123ea:	197b      	adds	r3, r7, r5
 80123ec:	781a      	ldrb	r2, [r3, #0]
 80123ee:	197b      	adds	r3, r7, r5
 80123f0:	3201      	adds	r2, #1
 80123f2:	701a      	strb	r2, [r3, #0]
			 j++;
 80123f4:	197b      	adds	r3, r7, r5
 80123f6:	781a      	ldrb	r2, [r3, #0]
 80123f8:	197b      	adds	r3, r7, r5
 80123fa:	3201      	adds	r2, #1
 80123fc:	701a      	strb	r2, [r3, #0]
			 k--;
 80123fe:	183b      	adds	r3, r7, r0
 8012400:	781a      	ldrb	r2, [r3, #0]
 8012402:	183b      	adds	r3, r7, r0
 8012404:	3a01      	subs	r2, #1
 8012406:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8012408:	2353      	movs	r3, #83	; 0x53
 801240a:	18fb      	adds	r3, r7, r3
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	2b07      	cmp	r3, #7
 8012410:	d9a5      	bls.n	801235e <_1Bit_To_4Bit_8x16+0xf6>
	 for(uint8_t index=0;index<16;index++)
 8012412:	2156      	movs	r1, #86	; 0x56
 8012414:	187b      	adds	r3, r7, r1
 8012416:	781a      	ldrb	r2, [r3, #0]
 8012418:	187b      	adds	r3, r7, r1
 801241a:	3201      	adds	r2, #1
 801241c:	701a      	strb	r2, [r3, #0]
 801241e:	2356      	movs	r3, #86	; 0x56
 8012420:	18fb      	adds	r3, r7, r3
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	2b0f      	cmp	r3, #15
 8012426:	d800      	bhi.n	801242a <_1Bit_To_4Bit_8x16+0x1c2>
 8012428:	e73b      	b.n	80122a2 <_1Bit_To_4Bit_8x16+0x3a>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 801242a:	4b17      	ldr	r3, [pc, #92]	; (8012488 <_1Bit_To_4Bit_8x16+0x220>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	68da      	ldr	r2, [r3, #12]
 8012430:	4b15      	ldr	r3, [pc, #84]	; (8012488 <_1Bit_To_4Bit_8x16+0x220>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	2101      	movs	r1, #1
 8012436:	438a      	bics	r2, r1
 8012438:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 801243a:	4b14      	ldr	r3, [pc, #80]	; (801248c <_1Bit_To_4Bit_8x16+0x224>)
 801243c:	2201      	movs	r2, #1
 801243e:	2102      	movs	r1, #2
 8012440:	0018      	movs	r0, r3
 8012442:	f7f4 fd76 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8012446:	4b11      	ldr	r3, [pc, #68]	; (801248c <_1Bit_To_4Bit_8x16+0x224>)
 8012448:	2200      	movs	r2, #0
 801244a:	2101      	movs	r1, #1
 801244c:	0018      	movs	r0, r3
 801244e:	f7f4 fd70 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*16,100);
 8012452:	2310      	movs	r3, #16
 8012454:	18f9      	adds	r1, r7, r3
 8012456:	480e      	ldr	r0, [pc, #56]	; (8012490 <_1Bit_To_4Bit_8x16+0x228>)
 8012458:	2364      	movs	r3, #100	; 0x64
 801245a:	2240      	movs	r2, #64	; 0x40
 801245c:	f7f5 fc78 	bl	8007d50 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8012460:	4b0a      	ldr	r3, [pc, #40]	; (801248c <_1Bit_To_4Bit_8x16+0x224>)
 8012462:	2201      	movs	r2, #1
 8012464:	2101      	movs	r1, #1
 8012466:	0018      	movs	r0, r3
 8012468:	f7f4 fd63 	bl	8006f32 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 801246c:	4b06      	ldr	r3, [pc, #24]	; (8012488 <_1Bit_To_4Bit_8x16+0x220>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	68da      	ldr	r2, [r3, #12]
 8012472:	4b05      	ldr	r3, [pc, #20]	; (8012488 <_1Bit_To_4Bit_8x16+0x220>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2101      	movs	r1, #1
 8012478:	430a      	orrs	r2, r1
 801247a:	60da      	str	r2, [r3, #12]

}
 801247c:	46c0      	nop			; (mov r8, r8)
 801247e:	46bd      	mov	sp, r7
 8012480:	b017      	add	sp, #92	; 0x5c
 8012482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012484:	200030b3 	.word	0x200030b3
 8012488:	2000347c 	.word	0x2000347c
 801248c:	50000800 	.word	0x50000800
 8012490:	200033c8 	.word	0x200033c8

08012494 <Font_1Bit_To_4Bit_12x24>:
 * @brief  12x24专用的转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据
 * @retval None
 */
void Font_1Bit_To_4Bit_12x24(uint8_t Data0, uint8_t Data1)
{
 8012494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012496:	b08d      	sub	sp, #52	; 0x34
 8012498:	af00      	add	r7, sp, #0
 801249a:	0002      	movs	r2, r0
 801249c:	1dfb      	adds	r3, r7, #7
 801249e:	701a      	strb	r2, [r3, #0]
 80124a0:	1dbb      	adds	r3, r7, #6
 80124a2:	1c0a      	adds	r2, r1, #0
 80124a4:	701a      	strb	r2, [r3, #0]

	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 /*8位data0*/
	 uint8_t mask=0x01;
 80124a6:	232f      	movs	r3, #47	; 0x2f
 80124a8:	18fb      	adds	r3, r7, r3
 80124aa:	2201      	movs	r2, #1
 80124ac:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 80124ae:	2318      	movs	r3, #24
 80124b0:	18fb      	adds	r3, r7, r3
 80124b2:	2200      	movs	r2, #0
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	2200      	movs	r2, #0
 80124b8:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 80124ba:	2314      	movs	r3, #20
 80124bc:	18fb      	adds	r3, r7, r3
 80124be:	2200      	movs	r2, #0
 80124c0:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 80124c2:	232e      	movs	r3, #46	; 0x2e
 80124c4:	18fb      	adds	r3, r7, r3
 80124c6:	2200      	movs	r2, #0
 80124c8:	701a      	strb	r2, [r3, #0]
 80124ca:	e037      	b.n	801253c <Font_1Bit_To_4Bit_12x24+0xa8>
	 {
		 if((Data0&mask)==mask) temp[i]|=Light;//low 4 bits set
 80124cc:	1dfb      	adds	r3, r7, #7
 80124ce:	212f      	movs	r1, #47	; 0x2f
 80124d0:	187a      	adds	r2, r7, r1
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	7812      	ldrb	r2, [r2, #0]
 80124d6:	4013      	ands	r3, r2
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	187a      	adds	r2, r7, r1
 80124dc:	7812      	ldrb	r2, [r2, #0]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d10e      	bne.n	8012500 <Font_1Bit_To_4Bit_12x24+0x6c>
 80124e2:	202e      	movs	r0, #46	; 0x2e
 80124e4:	183b      	adds	r3, r7, r0
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	2418      	movs	r4, #24
 80124ea:	193a      	adds	r2, r7, r4
 80124ec:	5cd1      	ldrb	r1, [r2, r3]
 80124ee:	4ba0      	ldr	r3, [pc, #640]	; (8012770 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 80124f0:	781a      	ldrb	r2, [r3, #0]
 80124f2:	183b      	adds	r3, r7, r0
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	430a      	orrs	r2, r1
 80124f8:	b2d1      	uxtb	r1, r2
 80124fa:	193a      	adds	r2, r7, r4
 80124fc:	54d1      	strb	r1, [r2, r3]
 80124fe:	e011      	b.n	8012524 <Font_1Bit_To_4Bit_12x24+0x90>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 8012500:	212e      	movs	r1, #46	; 0x2e
 8012502:	187b      	adds	r3, r7, r1
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	2018      	movs	r0, #24
 8012508:	183a      	adds	r2, r7, r0
 801250a:	5cd3      	ldrb	r3, [r2, r3]
 801250c:	b25b      	sxtb	r3, r3
 801250e:	4a98      	ldr	r2, [pc, #608]	; (8012770 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 8012510:	7812      	ldrb	r2, [r2, #0]
 8012512:	0112      	lsls	r2, r2, #4
 8012514:	b252      	sxtb	r2, r2
 8012516:	4013      	ands	r3, r2
 8012518:	b25a      	sxtb	r2, r3
 801251a:	187b      	adds	r3, r7, r1
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	b2d1      	uxtb	r1, r2
 8012520:	183a      	adds	r2, r7, r0
 8012522:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8012524:	232f      	movs	r3, #47	; 0x2f
 8012526:	18fa      	adds	r2, r7, r3
 8012528:	18fb      	adds	r3, r7, r3
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	18db      	adds	r3, r3, r3
 801252e:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 8012530:	212e      	movs	r1, #46	; 0x2e
 8012532:	187b      	adds	r3, r7, r1
 8012534:	781a      	ldrb	r2, [r3, #0]
 8012536:	187b      	adds	r3, r7, r1
 8012538:	3201      	adds	r2, #1
 801253a:	701a      	strb	r2, [r3, #0]
 801253c:	232e      	movs	r3, #46	; 0x2e
 801253e:	18fb      	adds	r3, r7, r3
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	2b07      	cmp	r3, #7
 8012544:	d9c2      	bls.n	80124cc <Font_1Bit_To_4Bit_12x24+0x38>

	 }
	 mask=0x0f;
 8012546:	232f      	movs	r3, #47	; 0x2f
 8012548:	18fb      	adds	r3, r7, r3
 801254a:	220f      	movs	r2, #15
 801254c:	701a      	strb	r2, [r3, #0]
	 uint8_t index=0;
 801254e:	232d      	movs	r3, #45	; 0x2d
 8012550:	18fb      	adds	r3, r7, r3
 8012552:	2200      	movs	r2, #0
 8012554:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8012556:	232c      	movs	r3, #44	; 0x2c
 8012558:	18fb      	adds	r3, r7, r3
 801255a:	2200      	movs	r2, #0
 801255c:	701a      	strb	r2, [r3, #0]
 801255e:	e03d      	b.n	80125dc <Font_1Bit_To_4Bit_12x24+0x148>
	 {
		 data_send[index]|=(temp[j]&mask);
 8012560:	202d      	movs	r0, #45	; 0x2d
 8012562:	183b      	adds	r3, r7, r0
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	2514      	movs	r5, #20
 8012568:	197a      	adds	r2, r7, r5
 801256a:	5cd1      	ldrb	r1, [r2, r3]
 801256c:	242c      	movs	r4, #44	; 0x2c
 801256e:	193b      	adds	r3, r7, r4
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	2618      	movs	r6, #24
 8012574:	19ba      	adds	r2, r7, r6
 8012576:	5cd3      	ldrb	r3, [r2, r3]
 8012578:	222f      	movs	r2, #47	; 0x2f
 801257a:	18ba      	adds	r2, r7, r2
 801257c:	7812      	ldrb	r2, [r2, #0]
 801257e:	4013      	ands	r3, r2
 8012580:	b2da      	uxtb	r2, r3
 8012582:	183b      	adds	r3, r7, r0
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	430a      	orrs	r2, r1
 8012588:	b2d1      	uxtb	r1, r2
 801258a:	197a      	adds	r2, r7, r5
 801258c:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);
 801258e:	183b      	adds	r3, r7, r0
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	197a      	adds	r2, r7, r5
 8012594:	5cd3      	ldrb	r3, [r2, r3]
 8012596:	b25a      	sxtb	r2, r3
 8012598:	193b      	adds	r3, r7, r4
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	3301      	adds	r3, #1
 801259e:	19b9      	adds	r1, r7, r6
 80125a0:	5ccb      	ldrb	r3, [r1, r3]
 80125a2:	212f      	movs	r1, #47	; 0x2f
 80125a4:	1879      	adds	r1, r7, r1
 80125a6:	7809      	ldrb	r1, [r1, #0]
 80125a8:	400b      	ands	r3, r1
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	011b      	lsls	r3, r3, #4
 80125ae:	b25b      	sxtb	r3, r3
 80125b0:	4313      	orrs	r3, r2
 80125b2:	b25a      	sxtb	r2, r3
 80125b4:	183b      	adds	r3, r7, r0
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	b2d1      	uxtb	r1, r2
 80125ba:	197a      	adds	r2, r7, r5
 80125bc:	54d1      	strb	r1, [r2, r3]
		 j++;
 80125be:	193b      	adds	r3, r7, r4
 80125c0:	781a      	ldrb	r2, [r3, #0]
 80125c2:	193b      	adds	r3, r7, r4
 80125c4:	3201      	adds	r2, #1
 80125c6:	701a      	strb	r2, [r3, #0]
		 j++;
 80125c8:	193b      	adds	r3, r7, r4
 80125ca:	781a      	ldrb	r2, [r3, #0]
 80125cc:	193b      	adds	r3, r7, r4
 80125ce:	3201      	adds	r2, #1
 80125d0:	701a      	strb	r2, [r3, #0]
		 index++;
 80125d2:	183b      	adds	r3, r7, r0
 80125d4:	781a      	ldrb	r2, [r3, #0]
 80125d6:	183b      	adds	r3, r7, r0
 80125d8:	3201      	adds	r2, #1
 80125da:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 80125dc:	232c      	movs	r3, #44	; 0x2c
 80125de:	18fb      	adds	r3, r7, r3
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	2b07      	cmp	r3, #7
 80125e4:	d9bc      	bls.n	8012560 <Font_1Bit_To_4Bit_12x24+0xcc>

	 }
	 /*高四位data1*/
	 mask=0x10;
 80125e6:	232f      	movs	r3, #47	; 0x2f
 80125e8:	18fb      	adds	r3, r7, r3
 80125ea:	2210      	movs	r2, #16
 80125ec:	701a      	strb	r2, [r3, #0]
	 uint8_t temp1[4]={0x00};
 80125ee:	2310      	movs	r3, #16
 80125f0:	18fb      	adds	r3, r7, r3
 80125f2:	2200      	movs	r2, #0
 80125f4:	601a      	str	r2, [r3, #0]
	 uint8_t data_send1[2]={0x00};
 80125f6:	230c      	movs	r3, #12
 80125f8:	18fb      	adds	r3, r7, r3
 80125fa:	2200      	movs	r2, #0
 80125fc:	801a      	strh	r2, [r3, #0]
	 for(uint8_t i=0;i<4;i++)
 80125fe:	232b      	movs	r3, #43	; 0x2b
 8012600:	18fb      	adds	r3, r7, r3
 8012602:	2200      	movs	r2, #0
 8012604:	701a      	strb	r2, [r3, #0]
 8012606:	e037      	b.n	8012678 <Font_1Bit_To_4Bit_12x24+0x1e4>
	 {
		 if((Data1&mask)==mask) temp1[i]|=Light;//low 4 bits set
 8012608:	1dbb      	adds	r3, r7, #6
 801260a:	212f      	movs	r1, #47	; 0x2f
 801260c:	187a      	adds	r2, r7, r1
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	7812      	ldrb	r2, [r2, #0]
 8012612:	4013      	ands	r3, r2
 8012614:	b2db      	uxtb	r3, r3
 8012616:	187a      	adds	r2, r7, r1
 8012618:	7812      	ldrb	r2, [r2, #0]
 801261a:	429a      	cmp	r2, r3
 801261c:	d10e      	bne.n	801263c <Font_1Bit_To_4Bit_12x24+0x1a8>
 801261e:	202b      	movs	r0, #43	; 0x2b
 8012620:	183b      	adds	r3, r7, r0
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	2410      	movs	r4, #16
 8012626:	193a      	adds	r2, r7, r4
 8012628:	5cd1      	ldrb	r1, [r2, r3]
 801262a:	4b51      	ldr	r3, [pc, #324]	; (8012770 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 801262c:	781a      	ldrb	r2, [r3, #0]
 801262e:	183b      	adds	r3, r7, r0
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	430a      	orrs	r2, r1
 8012634:	b2d1      	uxtb	r1, r2
 8012636:	193a      	adds	r2, r7, r4
 8012638:	54d1      	strb	r1, [r2, r3]
 801263a:	e011      	b.n	8012660 <Font_1Bit_To_4Bit_12x24+0x1cc>
		 else 				   temp1[i]&=(Light<<4);//low 4 bits reset
 801263c:	212b      	movs	r1, #43	; 0x2b
 801263e:	187b      	adds	r3, r7, r1
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	2010      	movs	r0, #16
 8012644:	183a      	adds	r2, r7, r0
 8012646:	5cd3      	ldrb	r3, [r2, r3]
 8012648:	b25b      	sxtb	r3, r3
 801264a:	4a49      	ldr	r2, [pc, #292]	; (8012770 <Font_1Bit_To_4Bit_12x24+0x2dc>)
 801264c:	7812      	ldrb	r2, [r2, #0]
 801264e:	0112      	lsls	r2, r2, #4
 8012650:	b252      	sxtb	r2, r2
 8012652:	4013      	ands	r3, r2
 8012654:	b25a      	sxtb	r2, r3
 8012656:	187b      	adds	r3, r7, r1
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	b2d1      	uxtb	r1, r2
 801265c:	183a      	adds	r2, r7, r0
 801265e:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8012660:	232f      	movs	r3, #47	; 0x2f
 8012662:	18fa      	adds	r2, r7, r3
 8012664:	18fb      	adds	r3, r7, r3
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	18db      	adds	r3, r3, r3
 801266a:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<4;i++)
 801266c:	212b      	movs	r1, #43	; 0x2b
 801266e:	187b      	adds	r3, r7, r1
 8012670:	781a      	ldrb	r2, [r3, #0]
 8012672:	187b      	adds	r3, r7, r1
 8012674:	3201      	adds	r2, #1
 8012676:	701a      	strb	r2, [r3, #0]
 8012678:	232b      	movs	r3, #43	; 0x2b
 801267a:	18fb      	adds	r3, r7, r3
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	2b03      	cmp	r3, #3
 8012680:	d9c2      	bls.n	8012608 <Font_1Bit_To_4Bit_12x24+0x174>

	 }
	 mask=0x0f;
 8012682:	232f      	movs	r3, #47	; 0x2f
 8012684:	18fb      	adds	r3, r7, r3
 8012686:	220f      	movs	r2, #15
 8012688:	701a      	strb	r2, [r3, #0]
	 index=0;
 801268a:	232d      	movs	r3, #45	; 0x2d
 801268c:	18fb      	adds	r3, r7, r3
 801268e:	2200      	movs	r2, #0
 8012690:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 8012692:	232a      	movs	r3, #42	; 0x2a
 8012694:	18fb      	adds	r3, r7, r3
 8012696:	2200      	movs	r2, #0
 8012698:	701a      	strb	r2, [r3, #0]
 801269a:	e03d      	b.n	8012718 <Font_1Bit_To_4Bit_12x24+0x284>
	 {
		 data_send1[index]|=(temp1[j]&mask);
 801269c:	202d      	movs	r0, #45	; 0x2d
 801269e:	183b      	adds	r3, r7, r0
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	250c      	movs	r5, #12
 80126a4:	197a      	adds	r2, r7, r5
 80126a6:	5cd1      	ldrb	r1, [r2, r3]
 80126a8:	242a      	movs	r4, #42	; 0x2a
 80126aa:	193b      	adds	r3, r7, r4
 80126ac:	781b      	ldrb	r3, [r3, #0]
 80126ae:	2610      	movs	r6, #16
 80126b0:	19ba      	adds	r2, r7, r6
 80126b2:	5cd3      	ldrb	r3, [r2, r3]
 80126b4:	222f      	movs	r2, #47	; 0x2f
 80126b6:	18ba      	adds	r2, r7, r2
 80126b8:	7812      	ldrb	r2, [r2, #0]
 80126ba:	4013      	ands	r3, r2
 80126bc:	b2da      	uxtb	r2, r3
 80126be:	183b      	adds	r3, r7, r0
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	430a      	orrs	r2, r1
 80126c4:	b2d1      	uxtb	r1, r2
 80126c6:	197a      	adds	r2, r7, r5
 80126c8:	54d1      	strb	r1, [r2, r3]
		 data_send1[index]|=((temp1[j+1]&mask)<<4);
 80126ca:	183b      	adds	r3, r7, r0
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	197a      	adds	r2, r7, r5
 80126d0:	5cd3      	ldrb	r3, [r2, r3]
 80126d2:	b25a      	sxtb	r2, r3
 80126d4:	193b      	adds	r3, r7, r4
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	3301      	adds	r3, #1
 80126da:	19b9      	adds	r1, r7, r6
 80126dc:	5ccb      	ldrb	r3, [r1, r3]
 80126de:	212f      	movs	r1, #47	; 0x2f
 80126e0:	1879      	adds	r1, r7, r1
 80126e2:	7809      	ldrb	r1, [r1, #0]
 80126e4:	400b      	ands	r3, r1
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	011b      	lsls	r3, r3, #4
 80126ea:	b25b      	sxtb	r3, r3
 80126ec:	4313      	orrs	r3, r2
 80126ee:	b25a      	sxtb	r2, r3
 80126f0:	183b      	adds	r3, r7, r0
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	b2d1      	uxtb	r1, r2
 80126f6:	197a      	adds	r2, r7, r5
 80126f8:	54d1      	strb	r1, [r2, r3]
		 j++;
 80126fa:	193b      	adds	r3, r7, r4
 80126fc:	781a      	ldrb	r2, [r3, #0]
 80126fe:	193b      	adds	r3, r7, r4
 8012700:	3201      	adds	r2, #1
 8012702:	701a      	strb	r2, [r3, #0]
		 j++;
 8012704:	193b      	adds	r3, r7, r4
 8012706:	781a      	ldrb	r2, [r3, #0]
 8012708:	193b      	adds	r3, r7, r4
 801270a:	3201      	adds	r2, #1
 801270c:	701a      	strb	r2, [r3, #0]
		 index++;
 801270e:	183b      	adds	r3, r7, r0
 8012710:	781a      	ldrb	r2, [r3, #0]
 8012712:	183b      	adds	r3, r7, r0
 8012714:	3201      	adds	r2, #1
 8012716:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 8012718:	232a      	movs	r3, #42	; 0x2a
 801271a:	18fb      	adds	r3, r7, r3
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	2b03      	cmp	r3, #3
 8012720:	d9bc      	bls.n	801269c <Font_1Bit_To_4Bit_12x24+0x208>

	 }

	 //写RAM
	 for(int k=3;k>=0;k--)
 8012722:	2303      	movs	r3, #3
 8012724:	627b      	str	r3, [r7, #36]	; 0x24
 8012726:	e00a      	b.n	801273e <Font_1Bit_To_4Bit_12x24+0x2aa>
	 {
		 SPI_OLED_SendData(data_send[k]);//一次写两个像素点，写四次
 8012728:	2314      	movs	r3, #20
 801272a:	18fa      	adds	r2, r7, r3
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	18d3      	adds	r3, r2, r3
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	0018      	movs	r0, r3
 8012734:	f7ff fa22 	bl	8011b7c <SPI_OLED_SendData>
	 for(int k=3;k>=0;k--)
 8012738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273a:	3b01      	subs	r3, #1
 801273c:	627b      	str	r3, [r7, #36]	; 0x24
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	2b00      	cmp	r3, #0
 8012742:	daf1      	bge.n	8012728 <Font_1Bit_To_4Bit_12x24+0x294>
	 }
	 for(int k=1;k>=0;k--)
 8012744:	2301      	movs	r3, #1
 8012746:	623b      	str	r3, [r7, #32]
 8012748:	e00a      	b.n	8012760 <Font_1Bit_To_4Bit_12x24+0x2cc>
	 {
		 SPI_OLED_SendData(data_send1[k]);//一次写两个像素点，写两次
 801274a:	230c      	movs	r3, #12
 801274c:	18fa      	adds	r2, r7, r3
 801274e:	6a3b      	ldr	r3, [r7, #32]
 8012750:	18d3      	adds	r3, r2, r3
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	0018      	movs	r0, r3
 8012756:	f7ff fa11 	bl	8011b7c <SPI_OLED_SendData>
	 for(int k=1;k>=0;k--)
 801275a:	6a3b      	ldr	r3, [r7, #32]
 801275c:	3b01      	subs	r3, #1
 801275e:	623b      	str	r3, [r7, #32]
 8012760:	6a3b      	ldr	r3, [r7, #32]
 8012762:	2b00      	cmp	r3, #0
 8012764:	daf1      	bge.n	801274a <Font_1Bit_To_4Bit_12x24+0x2b6>
	 }


}
 8012766:	46c0      	nop			; (mov r8, r8)
 8012768:	46c0      	nop			; (mov r8, r8)
 801276a:	46bd      	mov	sp, r7
 801276c:	b00d      	add	sp, #52	; 0x34
 801276e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012770:	200030b3 	.word	0x200030b3

08012774 <Set_Column_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Column_Address(uint8_t a, uint8_t b)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	0002      	movs	r2, r0
 801277c:	1dfb      	adds	r3, r7, #7
 801277e:	701a      	strb	r2, [r3, #0]
 8012780:	1dbb      	adds	r3, r7, #6
 8012782:	1c0a      	adds	r2, r1, #0
 8012784:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Column_Address_Commond);			//Set Column Address
 8012786:	2015      	movs	r0, #21
 8012788:	f7ff fa30 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c+a);					                  //0x1c地址偏移量()
 801278c:	1dfb      	adds	r3, r7, #7
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	331c      	adds	r3, #28
 8012792:	b2db      	uxtb	r3, r3
 8012794:	0018      	movs	r0, r3
 8012796:	f7ff f9f1 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x1c+b);
 801279a:	1dbb      	adds	r3, r7, #6
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	331c      	adds	r3, #28
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	0018      	movs	r0, r3
 80127a4:	f7ff f9ea 	bl	8011b7c <SPI_OLED_SendData>
}
 80127a8:	46c0      	nop			; (mov r8, r8)
 80127aa:	46bd      	mov	sp, r7
 80127ac:	b002      	add	sp, #8
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <Set_Row_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Row_Address(uint8_t a, uint8_t b)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	0002      	movs	r2, r0
 80127b8:	1dfb      	adds	r3, r7, #7
 80127ba:	701a      	strb	r2, [r3, #0]
 80127bc:	1dbb      	adds	r3, r7, #6
 80127be:	1c0a      	adds	r2, r1, #0
 80127c0:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Row_Address_Commond);			// Set Row Address
 80127c2:	2075      	movs	r0, #117	; 0x75
 80127c4:	f7ff fa12 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(a);					//   Default => 0x00
 80127c8:	1dfb      	adds	r3, r7, #7
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	0018      	movs	r0, r3
 80127ce:	f7ff f9d5 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(b);					//   Default => 0x7F
 80127d2:	1dbb      	adds	r3, r7, #6
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	0018      	movs	r0, r3
 80127d8:	f7ff f9d0 	bl	8011b7c <SPI_OLED_SendData>
}
 80127dc:	46c0      	nop			; (mov r8, r8)
 80127de:	46bd      	mov	sp, r7
 80127e0:	b002      	add	sp, #8
 80127e2:	bd80      	pop	{r7, pc}

080127e4 <Set_WriteData>:
	* @brief  写命令
	* @param  None
	* @retval None
	*/
void Set_WriteData(void)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	af00      	add	r7, sp, #0
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 80127e8:	205c      	movs	r0, #92	; 0x5c
 80127ea:	f7ff f9ff 	bl	8011bec <SPI_OLED_SendCommond>
}
 80127ee:	46c0      	nop			; (mov r8, r8)
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <Fill_RAM>:
	* @brief  整屏显示
	* @param  要整屏显示的颜色
	* @retval None
	*/
void Fill_RAM(uint8_t Data)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	0002      	movs	r2, r0
 80127fc:	1dfb      	adds	r3, r7, #7
 80127fe:	701a      	strb	r2, [r3, #0]
	unsigned char i,j;

	Set_Column_Address(0x00,0x3f);//0到63列
 8012800:	213f      	movs	r1, #63	; 0x3f
 8012802:	2000      	movs	r0, #0
 8012804:	f7ff ffb6 	bl	8012774 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 8012808:	213f      	movs	r1, #63	; 0x3f
 801280a:	2000      	movs	r0, #0
 801280c:	f7ff ffd0 	bl	80127b0 <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 8012810:	205c      	movs	r0, #92	; 0x5c
 8012812:	f7ff f9eb 	bl	8011bec <SPI_OLED_SendCommond>

	for(i=0;i<64;i++)             //一共64行
 8012816:	230f      	movs	r3, #15
 8012818:	18fb      	adds	r3, r7, r3
 801281a:	2200      	movs	r2, #0
 801281c:	701a      	strb	r2, [r3, #0]
 801281e:	e01f      	b.n	8012860 <Fill_RAM+0x6c>
	{
		for(j=0;j<64;j++)           //一共64列
 8012820:	230e      	movs	r3, #14
 8012822:	18fb      	adds	r3, r7, r3
 8012824:	2200      	movs	r2, #0
 8012826:	701a      	strb	r2, [r3, #0]
 8012828:	e00f      	b.n	801284a <Fill_RAM+0x56>
		{
			//每次发八位数据，发送两次构成16位数据，完成四个像素点的控制（列地址对应四个像素点）
			//指定行和列地址后相当于选中了四个像素点，每次发送八位数据设置两个像素点，因此要发两次
			SPI_OLED_SendData(Data);
 801282a:	1dfb      	adds	r3, r7, #7
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	0018      	movs	r0, r3
 8012830:	f7ff f9a4 	bl	8011b7c <SPI_OLED_SendData>
			SPI_OLED_SendData(Data);
 8012834:	1dfb      	adds	r3, r7, #7
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	0018      	movs	r0, r3
 801283a:	f7ff f99f 	bl	8011b7c <SPI_OLED_SendData>
		for(j=0;j<64;j++)           //一共64列
 801283e:	210e      	movs	r1, #14
 8012840:	187b      	adds	r3, r7, r1
 8012842:	781a      	ldrb	r2, [r3, #0]
 8012844:	187b      	adds	r3, r7, r1
 8012846:	3201      	adds	r2, #1
 8012848:	701a      	strb	r2, [r3, #0]
 801284a:	230e      	movs	r3, #14
 801284c:	18fb      	adds	r3, r7, r3
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	2b3f      	cmp	r3, #63	; 0x3f
 8012852:	d9ea      	bls.n	801282a <Fill_RAM+0x36>
	for(i=0;i<64;i++)             //一共64行
 8012854:	210f      	movs	r1, #15
 8012856:	187b      	adds	r3, r7, r1
 8012858:	781a      	ldrb	r2, [r3, #0]
 801285a:	187b      	adds	r3, r7, r1
 801285c:	3201      	adds	r2, #1
 801285e:	701a      	strb	r2, [r3, #0]
 8012860:	230f      	movs	r3, #15
 8012862:	18fb      	adds	r3, r7, r3
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	2b3f      	cmp	r3, #63	; 0x3f
 8012868:	d9da      	bls.n	8012820 <Fill_RAM+0x2c>

		}
	}
}
 801286a:	46c0      	nop			; (mov r8, r8)
 801286c:	46c0      	nop			; (mov r8, r8)
 801286e:	46bd      	mov	sp, r7
 8012870:	b004      	add	sp, #16
 8012872:	bd80      	pop	{r7, pc}

08012874 <Clear_Screen>:


void Clear_Screen(void)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	4f25      	ldr	r7, [pc, #148]	; (801290c <Clear_Screen+0x98>)
 8012878:	44bd      	add	sp, r7
 801287a:	af00      	add	r7, sp, #0
	uint8_t clear_arry[64*128]={0x00};
 801287c:	4b23      	ldr	r3, [pc, #140]	; (801290c <Clear_Screen+0x98>)
 801287e:	2280      	movs	r2, #128	; 0x80
 8012880:	0192      	lsls	r2, r2, #6
 8012882:	189b      	adds	r3, r3, r2
 8012884:	19db      	adds	r3, r3, r7
 8012886:	2200      	movs	r2, #0
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	3304      	adds	r3, #4
 801288c:	4a20      	ldr	r2, [pc, #128]	; (8012910 <Clear_Screen+0x9c>)
 801288e:	2100      	movs	r1, #0
 8012890:	0018      	movs	r0, r3
 8012892:	f001 ff2e 	bl	80146f2 <memset>

	Set_Column_Address(0x00,0x3f);//0到63列
 8012896:	213f      	movs	r1, #63	; 0x3f
 8012898:	2000      	movs	r0, #0
 801289a:	f7ff ff6b 	bl	8012774 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 801289e:	213f      	movs	r1, #63	; 0x3f
 80128a0:	2000      	movs	r0, #0
 80128a2:	f7ff ff85 	bl	80127b0 <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 80128a6:	205c      	movs	r0, #92	; 0x5c
 80128a8:	f7ff f9a0 	bl	8011bec <SPI_OLED_SendCommond>

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80128ac:	4b19      	ldr	r3, [pc, #100]	; (8012914 <Clear_Screen+0xa0>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	68da      	ldr	r2, [r3, #12]
 80128b2:	4b18      	ldr	r3, [pc, #96]	; (8012914 <Clear_Screen+0xa0>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2101      	movs	r1, #1
 80128b8:	438a      	bics	r2, r1
 80128ba:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 80128bc:	4b16      	ldr	r3, [pc, #88]	; (8012918 <Clear_Screen+0xa4>)
 80128be:	2201      	movs	r2, #1
 80128c0:	2102      	movs	r1, #2
 80128c2:	0018      	movs	r0, r3
 80128c4:	f7f4 fb35 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 80128c8:	4b13      	ldr	r3, [pc, #76]	; (8012918 <Clear_Screen+0xa4>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	2101      	movs	r1, #1
 80128ce:	0018      	movs	r0, r3
 80128d0:	f7f4 fb2f 	bl	8006f32 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,clear_arry,64*128,1000);
 80128d4:	23fa      	movs	r3, #250	; 0xfa
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	2280      	movs	r2, #128	; 0x80
 80128da:	0192      	lsls	r2, r2, #6
 80128dc:	0039      	movs	r1, r7
 80128de:	480f      	ldr	r0, [pc, #60]	; (801291c <Clear_Screen+0xa8>)
 80128e0:	f7f5 fa36 	bl	8007d50 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 80128e4:	4b0c      	ldr	r3, [pc, #48]	; (8012918 <Clear_Screen+0xa4>)
 80128e6:	2201      	movs	r2, #1
 80128e8:	2101      	movs	r1, #1
 80128ea:	0018      	movs	r0, r3
 80128ec:	f7f4 fb21 	bl	8006f32 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 80128f0:	4b08      	ldr	r3, [pc, #32]	; (8012914 <Clear_Screen+0xa0>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	68da      	ldr	r2, [r3, #12]
 80128f6:	4b07      	ldr	r3, [pc, #28]	; (8012914 <Clear_Screen+0xa0>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	2101      	movs	r1, #1
 80128fc:	430a      	orrs	r2, r1
 80128fe:	60da      	str	r2, [r3, #12]


}
 8012900:	46c0      	nop			; (mov r8, r8)
 8012902:	46bd      	mov	sp, r7
 8012904:	2380      	movs	r3, #128	; 0x80
 8012906:	019b      	lsls	r3, r3, #6
 8012908:	449d      	add	sp, r3
 801290a:	bd80      	pop	{r7, pc}
 801290c:	ffffe000 	.word	0xffffe000
 8012910:	00001ffc 	.word	0x00001ffc
 8012914:	2000347c 	.word	0x2000347c
 8012918:	50000800 	.word	0x50000800
 801291c:	200033c8 	.word	0x200033c8

08012920 <Write_Single_8x16AsicII>:
  * @brief  写一个8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_Single_8x16AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012920:	b590      	push	{r4, r7, lr}
 8012922:	b085      	sub	sp, #20
 8012924:	af00      	add	r7, sp, #0
 8012926:	0004      	movs	r4, r0
 8012928:	0008      	movs	r0, r1
 801292a:	0011      	movs	r1, r2
 801292c:	1dfb      	adds	r3, r7, #7
 801292e:	1c22      	adds	r2, r4, #0
 8012930:	701a      	strb	r2, [r3, #0]
 8012932:	1dbb      	adds	r3, r7, #6
 8012934:	1c02      	adds	r2, r0, #0
 8012936:	701a      	strb	r2, [r3, #0]
 8012938:	1d7b      	adds	r3, r7, #5
 801293a:	1c0a      	adds	r2, r1, #0
 801293c:	701a      	strb	r2, [r3, #0]

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 801293e:	20a0      	movs	r0, #160	; 0xa0
 8012940:	f7ff f954 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012944:	2014      	movs	r0, #20
 8012946:	f7ff f919 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 801294a:	2011      	movs	r0, #17
 801294c:	f7ff f916 	bl	8011b7c <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+1);    //设置列地址，两列（8个像素点）
 8012950:	1dbb      	adds	r3, r7, #6
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	3301      	adds	r3, #1
 8012956:	b2da      	uxtb	r2, r3
 8012958:	1dbb      	adds	r3, r7, #6
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	0011      	movs	r1, r2
 801295e:	0018      	movs	r0, r3
 8012960:	f7ff ff08 	bl	8012774 <Set_Column_Address>
	Set_Row_Address(Row, Row+15);            //设置行地址，16行（16个像素点）
 8012964:	1dfb      	adds	r3, r7, #7
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	330f      	adds	r3, #15
 801296a:	b2da      	uxtb	r2, r3
 801296c:	1dfb      	adds	r3, r7, #7
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	0011      	movs	r1, r2
 8012972:	0018      	movs	r0, r3
 8012974:	f7ff ff1c 	bl	80127b0 <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012978:	205c      	movs	r0, #92	; 0x5c
 801297a:	f7ff f937 	bl	8011bec <SPI_OLED_SendCommond>

	uint16_t k=(Data-' ')*16;//求对空格的偏移量，确定是哪个字模（*16是因为一行有16个u8数据，构成一个字符）
 801297e:	1d7b      	adds	r3, r7, #5
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	3b20      	subs	r3, #32
 8012984:	b29a      	uxth	r2, r3
 8012986:	210e      	movs	r1, #14
 8012988:	187b      	adds	r3, r7, r1
 801298a:	0112      	lsls	r2, r2, #4
 801298c:	801a      	strh	r2, [r3, #0]
							 //确定字模及其偏移量后将那行的16个u8数据取出

	_1Bit_To_4Bit_8x16(&Fonts_AsicII_8x16[k]);
 801298e:	187b      	adds	r3, r7, r1
 8012990:	881a      	ldrh	r2, [r3, #0]
 8012992:	4b04      	ldr	r3, [pc, #16]	; (80129a4 <Write_Single_8x16AsicII+0x84>)
 8012994:	18d3      	adds	r3, r2, r3
 8012996:	0018      	movs	r0, r3
 8012998:	f7ff fc66 	bl	8012268 <_1Bit_To_4Bit_8x16>


}
 801299c:	46c0      	nop			; (mov r8, r8)
 801299e:	46bd      	mov	sp, r7
 80129a0:	b005      	add	sp, #20
 80129a2:	bd90      	pop	{r4, r7, pc}
 80129a4:	20000010 	.word	0x20000010

080129a8 <Write_String_8x16AsicII>:
  * @brief  写一行8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_String_8x16AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 80129a8:	b590      	push	{r4, r7, lr}
 80129aa:	b085      	sub	sp, #20
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	603a      	str	r2, [r7, #0]
 80129b0:	1dfb      	adds	r3, r7, #7
 80129b2:	1c02      	adds	r2, r0, #0
 80129b4:	701a      	strb	r2, [r3, #0]
 80129b6:	1dbb      	adds	r3, r7, #6
 80129b8:	1c0a      	adds	r2, r1, #0
 80129ba:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	0018      	movs	r0, r3
 80129c0:	f7ed fba8 	bl	8000114 <strlen>
 80129c4:	0002      	movs	r2, r0
 80129c6:	230e      	movs	r3, #14
 80129c8:	18fb      	adds	r3, r7, r3
 80129ca:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 80129cc:	230f      	movs	r3, #15
 80129ce:	18fb      	adds	r3, r7, r3
 80129d0:	2200      	movs	r2, #0
 80129d2:	701a      	strb	r2, [r3, #0]
 80129d4:	e018      	b.n	8012a08 <Write_String_8x16AsicII+0x60>
	{
	 Write_Single_8x16AsicII(Row,Column+2*i,Data[i]);
 80129d6:	200f      	movs	r0, #15
 80129d8:	183b      	adds	r3, r7, r0
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	18db      	adds	r3, r3, r3
 80129de:	b2da      	uxtb	r2, r3
 80129e0:	1dbb      	adds	r3, r7, #6
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	18d3      	adds	r3, r2, r3
 80129e6:	b2d9      	uxtb	r1, r3
 80129e8:	0004      	movs	r4, r0
 80129ea:	183b      	adds	r3, r7, r0
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	18d3      	adds	r3, r2, r3
 80129f2:	781a      	ldrb	r2, [r3, #0]
 80129f4:	1dfb      	adds	r3, r7, #7
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	0018      	movs	r0, r3
 80129fa:	f7ff ff91 	bl	8012920 <Write_Single_8x16AsicII>
	for(i=0;i<k;i++)
 80129fe:	193b      	adds	r3, r7, r4
 8012a00:	781a      	ldrb	r2, [r3, #0]
 8012a02:	193b      	adds	r3, r7, r4
 8012a04:	3201      	adds	r2, #1
 8012a06:	701a      	strb	r2, [r3, #0]
 8012a08:	230f      	movs	r3, #15
 8012a0a:	18fa      	adds	r2, r7, r3
 8012a0c:	230e      	movs	r3, #14
 8012a0e:	18fb      	adds	r3, r7, r3
 8012a10:	7812      	ldrb	r2, [r2, #0]
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d3de      	bcc.n	80129d6 <Write_String_8x16AsicII+0x2e>
	}
}
 8012a18:	46c0      	nop			; (mov r8, r8)
 8012a1a:	46c0      	nop			; (mov r8, r8)
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	b005      	add	sp, #20
 8012a20:	bd90      	pop	{r4, r7, pc}
	...

08012a24 <Write_Single_16x32AsicII>:
 * @brief  写一个16x32数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_16x32AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012a24:	b590      	push	{r4, r7, lr}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	0004      	movs	r4, r0
 8012a2c:	0008      	movs	r0, r1
 8012a2e:	0011      	movs	r1, r2
 8012a30:	1dfb      	adds	r3, r7, #7
 8012a32:	1c22      	adds	r2, r4, #0
 8012a34:	701a      	strb	r2, [r3, #0]
 8012a36:	1dbb      	adds	r3, r7, #6
 8012a38:	1c02      	adds	r2, r0, #0
 8012a3a:	701a      	strb	r2, [r3, #0]
 8012a3c:	1d7b      	adds	r3, r7, #5
 8012a3e:	1c0a      	adds	r2, r1, #0
 8012a40:	701a      	strb	r2, [r3, #0]

	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8012a42:	20a0      	movs	r0, #160	; 0xa0
 8012a44:	f7ff f8d2 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012a48:	2014      	movs	r0, #20
 8012a4a:	f7ff f897 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012a4e:	2011      	movs	r0, #17
 8012a50:	f7ff f894 	bl	8011b7c <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+3);    //设置列地址
 8012a54:	1dbb      	adds	r3, r7, #6
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	3303      	adds	r3, #3
 8012a5a:	b2da      	uxtb	r2, r3
 8012a5c:	1dbb      	adds	r3, r7, #6
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	0011      	movs	r1, r2
 8012a62:	0018      	movs	r0, r3
 8012a64:	f7ff fe86 	bl	8012774 <Set_Column_Address>
	Set_Row_Address(Row, Row+31);            //设置行地址
 8012a68:	1dfb      	adds	r3, r7, #7
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	331f      	adds	r3, #31
 8012a6e:	b2da      	uxtb	r2, r3
 8012a70:	1dfb      	adds	r3, r7, #7
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	0011      	movs	r1, r2
 8012a76:	0018      	movs	r0, r3
 8012a78:	f7ff fe9a 	bl	80127b0 <Set_Row_Address>

	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012a7c:	205c      	movs	r0, #92	; 0x5c
 8012a7e:	f7ff f8b5 	bl	8011bec <SPI_OLED_SendCommond>

	k=(Data-' ')*64;//求对空格的偏移量
 8012a82:	1d7b      	adds	r3, r7, #5
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	3b20      	subs	r3, #32
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	210e      	movs	r1, #14
 8012a8c:	187b      	adds	r3, r7, r1
 8012a8e:	0192      	lsls	r2, r2, #6
 8012a90:	801a      	strh	r2, [r3, #0]

	_1Bit_To_4Bit_16x32(&Fonts_AsicII_16x32[k]);
 8012a92:	187b      	adds	r3, r7, r1
 8012a94:	881a      	ldrh	r2, [r3, #0]
 8012a96:	4b04      	ldr	r3, [pc, #16]	; (8012aa8 <Write_Single_16x32AsicII+0x84>)
 8012a98:	18d3      	adds	r3, r2, r3
 8012a9a:	0018      	movs	r0, r3
 8012a9c:	f7ff fa96 	bl	8011fcc <_1Bit_To_4Bit_16x32>


}
 8012aa0:	46c0      	nop			; (mov r8, r8)
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	b005      	add	sp, #20
 8012aa6:	bd90      	pop	{r4, r7, pc}
 8012aa8:	20001810 	.word	0x20001810

08012aac <Write_String_16x32AsicII>:
 * @brief  写一行16x32数字、字母(ASIC II)   分辨率256*64，16*24==长16，宽32
 * @param  行，列，要写入的数字、字母         Row==行的左上角   Column==列的左边（总共64）
 * @retval None
 */
void Write_String_16x32AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012aac:	b590      	push	{r4, r7, lr}
 8012aae:	b085      	sub	sp, #20
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	603a      	str	r2, [r7, #0]
 8012ab4:	1dfb      	adds	r3, r7, #7
 8012ab6:	1c02      	adds	r2, r0, #0
 8012ab8:	701a      	strb	r2, [r3, #0]
 8012aba:	1dbb      	adds	r3, r7, #6
 8012abc:	1c0a      	adds	r2, r1, #0
 8012abe:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	0018      	movs	r0, r3
 8012ac4:	f7ed fb26 	bl	8000114 <strlen>
 8012ac8:	0002      	movs	r2, r0
 8012aca:	230e      	movs	r3, #14
 8012acc:	18fb      	adds	r3, r7, r3
 8012ace:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 8012ad0:	230f      	movs	r3, #15
 8012ad2:	18fb      	adds	r3, r7, r3
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	701a      	strb	r2, [r3, #0]
 8012ad8:	e018      	b.n	8012b0c <Write_String_16x32AsicII+0x60>
	{
	 Write_Single_16x32AsicII(Row,Column+4*i,Data[i]);
 8012ada:	200f      	movs	r0, #15
 8012adc:	183b      	adds	r3, r7, r0
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	b2da      	uxtb	r2, r3
 8012ae4:	1dbb      	adds	r3, r7, #6
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	18d3      	adds	r3, r2, r3
 8012aea:	b2d9      	uxtb	r1, r3
 8012aec:	0004      	movs	r4, r0
 8012aee:	183b      	adds	r3, r7, r0
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	683a      	ldr	r2, [r7, #0]
 8012af4:	18d3      	adds	r3, r2, r3
 8012af6:	781a      	ldrb	r2, [r3, #0]
 8012af8:	1dfb      	adds	r3, r7, #7
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	0018      	movs	r0, r3
 8012afe:	f7ff ff91 	bl	8012a24 <Write_Single_16x32AsicII>
	for(i=0;i<k;i++)
 8012b02:	193b      	adds	r3, r7, r4
 8012b04:	781a      	ldrb	r2, [r3, #0]
 8012b06:	193b      	adds	r3, r7, r4
 8012b08:	3201      	adds	r2, #1
 8012b0a:	701a      	strb	r2, [r3, #0]
 8012b0c:	230f      	movs	r3, #15
 8012b0e:	18fa      	adds	r2, r7, r3
 8012b10:	230e      	movs	r3, #14
 8012b12:	18fb      	adds	r3, r7, r3
 8012b14:	7812      	ldrb	r2, [r2, #0]
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d3de      	bcc.n	8012ada <Write_String_16x32AsicII+0x2e>
	}
}
 8012b1c:	46c0      	nop			; (mov r8, r8)
 8012b1e:	46c0      	nop			; (mov r8, r8)
 8012b20:	46bd      	mov	sp, r7
 8012b22:	b005      	add	sp, #20
 8012b24:	bd90      	pop	{r4, r7, pc}
	...

08012b28 <Write_Single_12x24AsicII>:
 * @brief  写一个12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_12x24AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012b28:	b590      	push	{r4, r7, lr}
 8012b2a:	b085      	sub	sp, #20
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	0004      	movs	r4, r0
 8012b30:	0008      	movs	r0, r1
 8012b32:	0011      	movs	r1, r2
 8012b34:	1dfb      	adds	r3, r7, #7
 8012b36:	1c22      	adds	r2, r4, #0
 8012b38:	701a      	strb	r2, [r3, #0]
 8012b3a:	1dbb      	adds	r3, r7, #6
 8012b3c:	1c02      	adds	r2, r0, #0
 8012b3e:	701a      	strb	r2, [r3, #0]
 8012b40:	1d7b      	adds	r3, r7, #5
 8012b42:	1c0a      	adds	r2, r1, #0
 8012b44:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8012b46:	20a0      	movs	r0, #160	; 0xa0
 8012b48:	f7ff f850 	bl	8011bec <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012b4c:	2014      	movs	r0, #20
 8012b4e:	f7ff f815 	bl	8011b7c <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012b52:	2011      	movs	r0, #17
 8012b54:	f7ff f812 	bl	8011b7c <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+2);    //设置列地址
 8012b58:	1dbb      	adds	r3, r7, #6
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	3302      	adds	r3, #2
 8012b5e:	b2da      	uxtb	r2, r3
 8012b60:	1dbb      	adds	r3, r7, #6
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	0011      	movs	r1, r2
 8012b66:	0018      	movs	r0, r3
 8012b68:	f7ff fe04 	bl	8012774 <Set_Column_Address>
	Set_Row_Address(Row, Row+23);            //设置行地址
 8012b6c:	1dfb      	adds	r3, r7, #7
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	3317      	adds	r3, #23
 8012b72:	b2da      	uxtb	r2, r3
 8012b74:	1dfb      	adds	r3, r7, #7
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	0011      	movs	r1, r2
 8012b7a:	0018      	movs	r0, r3
 8012b7c:	f7ff fe18 	bl	80127b0 <Set_Row_Address>

	Set_WriteData();
 8012b80:	f7ff fe30 	bl	80127e4 <Set_WriteData>

	k=(Data-' ')*48;//求对空格的偏移量
 8012b84:	1d7b      	adds	r3, r7, #5
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	3b20      	subs	r3, #32
 8012b8a:	b29a      	uxth	r2, r3
 8012b8c:	230c      	movs	r3, #12
 8012b8e:	18fb      	adds	r3, r7, r3
 8012b90:	2130      	movs	r1, #48	; 0x30
 8012b92:	434a      	muls	r2, r1
 8012b94:	801a      	strh	r2, [r3, #0]

	for(i=0;i<24;i++)
 8012b96:	230f      	movs	r3, #15
 8012b98:	18fb      	adds	r3, r7, r3
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	e017      	b.n	8012bd0 <Write_Single_12x24AsicII+0xa8>
	{
		/*12*24 12bits用两个8bit组合描述，因此，每次需要访问两个u8*/
		Font_1Bit_To_4Bit_12x24(Fonts_AsicII_12x24[k],Fonts_AsicII_12x24[k+1]);
 8012ba0:	240c      	movs	r4, #12
 8012ba2:	193b      	adds	r3, r7, r4
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	4a0f      	ldr	r2, [pc, #60]	; (8012be4 <Write_Single_12x24AsicII+0xbc>)
 8012ba8:	5cd0      	ldrb	r0, [r2, r3]
 8012baa:	193b      	adds	r3, r7, r4
 8012bac:	881b      	ldrh	r3, [r3, #0]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	4a0c      	ldr	r2, [pc, #48]	; (8012be4 <Write_Single_12x24AsicII+0xbc>)
 8012bb2:	5cd3      	ldrb	r3, [r2, r3]
 8012bb4:	0019      	movs	r1, r3
 8012bb6:	f7ff fc6d 	bl	8012494 <Font_1Bit_To_4Bit_12x24>
		k=k+2;
 8012bba:	193b      	adds	r3, r7, r4
 8012bbc:	193a      	adds	r2, r7, r4
 8012bbe:	8812      	ldrh	r2, [r2, #0]
 8012bc0:	3202      	adds	r2, #2
 8012bc2:	801a      	strh	r2, [r3, #0]
	for(i=0;i<24;i++)
 8012bc4:	210f      	movs	r1, #15
 8012bc6:	187b      	adds	r3, r7, r1
 8012bc8:	781a      	ldrb	r2, [r3, #0]
 8012bca:	187b      	adds	r3, r7, r1
 8012bcc:	3201      	adds	r2, #1
 8012bce:	701a      	strb	r2, [r3, #0]
 8012bd0:	230f      	movs	r3, #15
 8012bd2:	18fb      	adds	r3, r7, r3
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	2b17      	cmp	r3, #23
 8012bd8:	d9e2      	bls.n	8012ba0 <Write_Single_12x24AsicII+0x78>
	}
}
 8012bda:	46c0      	nop			; (mov r8, r8)
 8012bdc:	46c0      	nop			; (mov r8, r8)
 8012bde:	46bd      	mov	sp, r7
 8012be0:	b005      	add	sp, #20
 8012be2:	bd90      	pop	{r4, r7, pc}
 8012be4:	20000640 	.word	0x20000640

08012be8 <Write_String_12x24AsicII>:
 * @brief  写一行12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_String_12x24AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012be8:	b590      	push	{r4, r7, lr}
 8012bea:	b085      	sub	sp, #20
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	603a      	str	r2, [r7, #0]
 8012bf0:	1dfb      	adds	r3, r7, #7
 8012bf2:	1c02      	adds	r2, r0, #0
 8012bf4:	701a      	strb	r2, [r3, #0]
 8012bf6:	1dbb      	adds	r3, r7, #6
 8012bf8:	1c0a      	adds	r2, r1, #0
 8012bfa:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	0018      	movs	r0, r3
 8012c00:	f7ed fa88 	bl	8000114 <strlen>
 8012c04:	0002      	movs	r2, r0
 8012c06:	230e      	movs	r3, #14
 8012c08:	18fb      	adds	r3, r7, r3
 8012c0a:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 8012c0c:	230f      	movs	r3, #15
 8012c0e:	18fb      	adds	r3, r7, r3
 8012c10:	2200      	movs	r2, #0
 8012c12:	701a      	strb	r2, [r3, #0]
 8012c14:	e01a      	b.n	8012c4c <Write_String_12x24AsicII+0x64>
	{
		Write_Single_12x24AsicII(Row,Column+3*i,Data[i]);
 8012c16:	200f      	movs	r0, #15
 8012c18:	183b      	adds	r3, r7, r0
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	1c1a      	adds	r2, r3, #0
 8012c1e:	1892      	adds	r2, r2, r2
 8012c20:	18d3      	adds	r3, r2, r3
 8012c22:	b2da      	uxtb	r2, r3
 8012c24:	1dbb      	adds	r3, r7, #6
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	18d3      	adds	r3, r2, r3
 8012c2a:	b2d9      	uxtb	r1, r3
 8012c2c:	0004      	movs	r4, r0
 8012c2e:	183b      	adds	r3, r7, r0
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	683a      	ldr	r2, [r7, #0]
 8012c34:	18d3      	adds	r3, r2, r3
 8012c36:	781a      	ldrb	r2, [r3, #0]
 8012c38:	1dfb      	adds	r3, r7, #7
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	0018      	movs	r0, r3
 8012c3e:	f7ff ff73 	bl	8012b28 <Write_Single_12x24AsicII>
	for(i=0;i<k;i++)
 8012c42:	193b      	adds	r3, r7, r4
 8012c44:	781a      	ldrb	r2, [r3, #0]
 8012c46:	193b      	adds	r3, r7, r4
 8012c48:	3201      	adds	r2, #1
 8012c4a:	701a      	strb	r2, [r3, #0]
 8012c4c:	230f      	movs	r3, #15
 8012c4e:	18fa      	adds	r2, r7, r3
 8012c50:	230e      	movs	r3, #14
 8012c52:	18fb      	adds	r3, r7, r3
 8012c54:	7812      	ldrb	r2, [r2, #0]
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d3dc      	bcc.n	8012c16 <Write_String_12x24AsicII+0x2e>
	}
}
 8012c5c:	46c0      	nop			; (mov r8, r8)
 8012c5e:	46c0      	nop			; (mov r8, r8)
 8012c60:	46bd      	mov	sp, r7
 8012c62:	b005      	add	sp, #20
 8012c64:	bd90      	pop	{r4, r7, pc}
	...

08012c68 <Display_Main_Interface_Voltage>:
  * @brief  将电压值显示出来
  * @param  电压值
  * @retval None
  */
void Display_Main_Interface_Voltage(float Voltage)
{
 8012c68:	b5b0      	push	{r4, r5, r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
	char String_voltage_real[7]={'0','0','0','.','0','0'};
 8012c70:	2408      	movs	r4, #8
 8012c72:	193b      	adds	r3, r7, r4
 8012c74:	4a2c      	ldr	r2, [pc, #176]	; (8012d28 <Display_Main_Interface_Voltage+0xc0>)
 8012c76:	6811      	ldr	r1, [r2, #0]
 8012c78:	6019      	str	r1, [r3, #0]
 8012c7a:	8891      	ldrh	r1, [r2, #4]
 8012c7c:	8099      	strh	r1, [r3, #4]
 8012c7e:	7992      	ldrb	r2, [r2, #6]
 8012c80:	719a      	strb	r2, [r3, #6]
	if(Voltage>=100)   		sprintf(String_voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 8012c82:	492a      	ldr	r1, [pc, #168]	; (8012d2c <Display_Main_Interface_Voltage+0xc4>)
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f7ed fc45 	bl	8000514 <__aeabi_fcmpge>
 8012c8a:	1e03      	subs	r3, r0, #0
 8012c8c:	d009      	beq.n	8012ca2 <Display_Main_Interface_Voltage+0x3a>
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7f0 f90e 	bl	8002eb0 <__aeabi_f2d>
 8012c94:	0002      	movs	r2, r0
 8012c96:	000b      	movs	r3, r1
 8012c98:	4925      	ldr	r1, [pc, #148]	; (8012d30 <Display_Main_Interface_Voltage+0xc8>)
 8012c9a:	1938      	adds	r0, r7, r4
 8012c9c:	f002 fa94 	bl	80151c8 <siprintf>
 8012ca0:	e030      	b.n	8012d04 <Display_Main_Interface_Voltage+0x9c>
	else if(Voltage>=9.99)
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7f0 f904 	bl	8002eb0 <__aeabi_f2d>
 8012ca8:	4a22      	ldr	r2, [pc, #136]	; (8012d34 <Display_Main_Interface_Voltage+0xcc>)
 8012caa:	4b23      	ldr	r3, [pc, #140]	; (8012d38 <Display_Main_Interface_Voltage+0xd0>)
 8012cac:	f7ed fbf8 	bl	80004a0 <__aeabi_dcmpge>
 8012cb0:	1e03      	subs	r3, r0, #0
 8012cb2:	d00f      	beq.n	8012cd4 <Display_Main_Interface_Voltage+0x6c>
	{
		String_voltage_real[0]='0';
 8012cb4:	2508      	movs	r5, #8
 8012cb6:	197b      	adds	r3, r7, r5
 8012cb8:	2230      	movs	r2, #48	; 0x30
 8012cba:	701a      	strb	r2, [r3, #0]
		sprintf(&String_voltage_real[1], "%5.2f", Voltage);//保留两位小数
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7f0 f8f7 	bl	8002eb0 <__aeabi_f2d>
 8012cc2:	0002      	movs	r2, r0
 8012cc4:	000b      	movs	r3, r1
 8012cc6:	4c1d      	ldr	r4, [pc, #116]	; (8012d3c <Display_Main_Interface_Voltage+0xd4>)
 8012cc8:	1979      	adds	r1, r7, r5
 8012cca:	1c48      	adds	r0, r1, #1
 8012ccc:	0021      	movs	r1, r4
 8012cce:	f002 fa7b 	bl	80151c8 <siprintf>
 8012cd2:	e017      	b.n	8012d04 <Display_Main_Interface_Voltage+0x9c>
	}
	else if(Voltage>=0)
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7ed fc1c 	bl	8000514 <__aeabi_fcmpge>
 8012cdc:	1e03      	subs	r3, r0, #0
 8012cde:	d011      	beq.n	8012d04 <Display_Main_Interface_Voltage+0x9c>
	{
		String_voltage_real[0]='0';
 8012ce0:	2508      	movs	r5, #8
 8012ce2:	197b      	adds	r3, r7, r5
 8012ce4:	2230      	movs	r2, #48	; 0x30
 8012ce6:	701a      	strb	r2, [r3, #0]
		String_voltage_real[1]='0';
 8012ce8:	197b      	adds	r3, r7, r5
 8012cea:	2230      	movs	r2, #48	; 0x30
 8012cec:	705a      	strb	r2, [r3, #1]
		sprintf(&String_voltage_real[2], "%4.2f", Voltage);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7f0 f8de 	bl	8002eb0 <__aeabi_f2d>
 8012cf4:	0002      	movs	r2, r0
 8012cf6:	000b      	movs	r3, r1
 8012cf8:	4c11      	ldr	r4, [pc, #68]	; (8012d40 <Display_Main_Interface_Voltage+0xd8>)
 8012cfa:	1979      	adds	r1, r7, r5
 8012cfc:	1c88      	adds	r0, r1, #2
 8012cfe:	0021      	movs	r1, r4
 8012d00:	f002 fa62 	bl	80151c8 <siprintf>

	}


	Write_String_16x32AsicII(0, 0, String_voltage_real);
 8012d04:	2308      	movs	r3, #8
 8012d06:	18fb      	adds	r3, r7, r3
 8012d08:	001a      	movs	r2, r3
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	2000      	movs	r0, #0
 8012d0e:	f7ff fecd 	bl	8012aac <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0, 24, "V");
 8012d12:	4b0c      	ldr	r3, [pc, #48]	; (8012d44 <Display_Main_Interface_Voltage+0xdc>)
 8012d14:	001a      	movs	r2, r3
 8012d16:	2118      	movs	r1, #24
 8012d18:	2000      	movs	r0, #0
 8012d1a:	f7ff fec7 	bl	8012aac <Write_String_16x32AsicII>


}
 8012d1e:	46c0      	nop			; (mov r8, r8)
 8012d20:	46bd      	mov	sp, r7
 8012d22:	b004      	add	sp, #16
 8012d24:	bdb0      	pop	{r4, r5, r7, pc}
 8012d26:	46c0      	nop			; (mov r8, r8)
 8012d28:	08018418 	.word	0x08018418
 8012d2c:	42c80000 	.word	0x42c80000
 8012d30:	080183fc 	.word	0x080183fc
 8012d34:	47ae147b 	.word	0x47ae147b
 8012d38:	4023fae1 	.word	0x4023fae1
 8012d3c:	08018404 	.word	0x08018404
 8012d40:	0801840c 	.word	0x0801840c
 8012d44:	08018414 	.word	0x08018414

08012d48 <Display_Main_Interface_Current>:
  * @brief  将电流值显示出来
  * @param  电流值
  * @retval None
  */
void Display_Main_Interface_Current(float Current)
{
 8012d48:	b5b0      	push	{r4, r5, r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
	char String_Current_real[7]={'0','0','0','.','0','0'};
 8012d50:	2408      	movs	r4, #8
 8012d52:	193b      	adds	r3, r7, r4
 8012d54:	4a2c      	ldr	r2, [pc, #176]	; (8012e08 <Display_Main_Interface_Current+0xc0>)
 8012d56:	6811      	ldr	r1, [r2, #0]
 8012d58:	6019      	str	r1, [r3, #0]
 8012d5a:	8891      	ldrh	r1, [r2, #4]
 8012d5c:	8099      	strh	r1, [r3, #4]
 8012d5e:	7992      	ldrb	r2, [r2, #6]
 8012d60:	719a      	strb	r2, [r3, #6]
	if(Current>=100)     	sprintf(String_Current_real, "%6.2f", Current);//将float转为string，数据长度为6，保留两位小数
 8012d62:	492a      	ldr	r1, [pc, #168]	; (8012e0c <Display_Main_Interface_Current+0xc4>)
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7ed fbd5 	bl	8000514 <__aeabi_fcmpge>
 8012d6a:	1e03      	subs	r3, r0, #0
 8012d6c:	d009      	beq.n	8012d82 <Display_Main_Interface_Current+0x3a>
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f7f0 f89e 	bl	8002eb0 <__aeabi_f2d>
 8012d74:	0002      	movs	r2, r0
 8012d76:	000b      	movs	r3, r1
 8012d78:	4925      	ldr	r1, [pc, #148]	; (8012e10 <Display_Main_Interface_Current+0xc8>)
 8012d7a:	1938      	adds	r0, r7, r4
 8012d7c:	f002 fa24 	bl	80151c8 <siprintf>
 8012d80:	e030      	b.n	8012de4 <Display_Main_Interface_Current+0x9c>
	else if(Current>=9.99)
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7f0 f894 	bl	8002eb0 <__aeabi_f2d>
 8012d88:	4a22      	ldr	r2, [pc, #136]	; (8012e14 <Display_Main_Interface_Current+0xcc>)
 8012d8a:	4b23      	ldr	r3, [pc, #140]	; (8012e18 <Display_Main_Interface_Current+0xd0>)
 8012d8c:	f7ed fb88 	bl	80004a0 <__aeabi_dcmpge>
 8012d90:	1e03      	subs	r3, r0, #0
 8012d92:	d00f      	beq.n	8012db4 <Display_Main_Interface_Current+0x6c>
	{
		String_Current_real[0]='0';
 8012d94:	2508      	movs	r5, #8
 8012d96:	197b      	adds	r3, r7, r5
 8012d98:	2230      	movs	r2, #48	; 0x30
 8012d9a:	701a      	strb	r2, [r3, #0]
		sprintf(&String_Current_real[1], "%5.2f", Current);
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f7f0 f887 	bl	8002eb0 <__aeabi_f2d>
 8012da2:	0002      	movs	r2, r0
 8012da4:	000b      	movs	r3, r1
 8012da6:	4c1d      	ldr	r4, [pc, #116]	; (8012e1c <Display_Main_Interface_Current+0xd4>)
 8012da8:	1979      	adds	r1, r7, r5
 8012daa:	1c48      	adds	r0, r1, #1
 8012dac:	0021      	movs	r1, r4
 8012dae:	f002 fa0b 	bl	80151c8 <siprintf>
 8012db2:	e017      	b.n	8012de4 <Display_Main_Interface_Current+0x9c>
	}
	else if(Current>=0)
 8012db4:	2100      	movs	r1, #0
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7ed fbac 	bl	8000514 <__aeabi_fcmpge>
 8012dbc:	1e03      	subs	r3, r0, #0
 8012dbe:	d011      	beq.n	8012de4 <Display_Main_Interface_Current+0x9c>
	{
		String_Current_real[0]='0';
 8012dc0:	2508      	movs	r5, #8
 8012dc2:	197b      	adds	r3, r7, r5
 8012dc4:	2230      	movs	r2, #48	; 0x30
 8012dc6:	701a      	strb	r2, [r3, #0]
		String_Current_real[1]='0';
 8012dc8:	197b      	adds	r3, r7, r5
 8012dca:	2230      	movs	r2, #48	; 0x30
 8012dcc:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Current_real[2],"%4.2f", Current);
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f7f0 f86e 	bl	8002eb0 <__aeabi_f2d>
 8012dd4:	0002      	movs	r2, r0
 8012dd6:	000b      	movs	r3, r1
 8012dd8:	4c11      	ldr	r4, [pc, #68]	; (8012e20 <Display_Main_Interface_Current+0xd8>)
 8012dda:	1979      	adds	r1, r7, r5
 8012ddc:	1c88      	adds	r0, r1, #2
 8012dde:	0021      	movs	r1, r4
 8012de0:	f002 f9f2 	bl	80151c8 <siprintf>
	}

	Write_String_16x32AsicII(0,36, String_Current_real);
 8012de4:	2308      	movs	r3, #8
 8012de6:	18fb      	adds	r3, r7, r3
 8012de8:	001a      	movs	r2, r3
 8012dea:	2124      	movs	r1, #36	; 0x24
 8012dec:	2000      	movs	r0, #0
 8012dee:	f7ff fe5d 	bl	8012aac <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0,60, "A");
 8012df2:	4b0c      	ldr	r3, [pc, #48]	; (8012e24 <Display_Main_Interface_Current+0xdc>)
 8012df4:	001a      	movs	r2, r3
 8012df6:	213c      	movs	r1, #60	; 0x3c
 8012df8:	2000      	movs	r0, #0
 8012dfa:	f7ff fe57 	bl	8012aac <Write_String_16x32AsicII>

}
 8012dfe:	46c0      	nop			; (mov r8, r8)
 8012e00:	46bd      	mov	sp, r7
 8012e02:	b004      	add	sp, #16
 8012e04:	bdb0      	pop	{r4, r5, r7, pc}
 8012e06:	46c0      	nop			; (mov r8, r8)
 8012e08:	08018418 	.word	0x08018418
 8012e0c:	42c80000 	.word	0x42c80000
 8012e10:	080183fc 	.word	0x080183fc
 8012e14:	47ae147b 	.word	0x47ae147b
 8012e18:	4023fae1 	.word	0x4023fae1
 8012e1c:	08018404 	.word	0x08018404
 8012e20:	0801840c 	.word	0x0801840c
 8012e24:	08018420 	.word	0x08018420

08012e28 <Display_Main_Interface_Power>:
 * @brief  显示功率
 * @param  Shift/not Shift
 * @retval None
 */
void Display_Main_Interface_Power(float Voltage,float Current)
{
 8012e28:	b5b0      	push	{r4, r5, r7, lr}
 8012e2a:	b086      	sub	sp, #24
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
	char String_Power_real[10]={'0','0','0','.','0','0'};
 8012e32:	2408      	movs	r4, #8
 8012e34:	1939      	adds	r1, r7, r4
 8012e36:	4a49      	ldr	r2, [pc, #292]	; (8012f5c <Display_Main_Interface_Power+0x134>)
 8012e38:	000b      	movs	r3, r1
 8012e3a:	6810      	ldr	r0, [r2, #0]
 8012e3c:	6018      	str	r0, [r3, #0]
 8012e3e:	8890      	ldrh	r0, [r2, #4]
 8012e40:	8098      	strh	r0, [r3, #4]
 8012e42:	7992      	ldrb	r2, [r2, #6]
 8012e44:	719a      	strb	r2, [r3, #6]
 8012e46:	2307      	movs	r3, #7
 8012e48:	18cb      	adds	r3, r1, r3
 8012e4a:	2203      	movs	r2, #3
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	0018      	movs	r0, r3
 8012e50:	f001 fc4f 	bl	80146f2 <memset>
	float Power=Voltage*Current;
 8012e54:	6839      	ldr	r1, [r7, #0]
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7ed ff02 	bl	8000c60 <__aeabi_fmul>
 8012e5c:	1c03      	adds	r3, r0, #0
 8012e5e:	617b      	str	r3, [r7, #20]


	if(Power>1000)
 8012e60:	493f      	ldr	r1, [pc, #252]	; (8012f60 <Display_Main_Interface_Power+0x138>)
 8012e62:	6978      	ldr	r0, [r7, #20]
 8012e64:	f7ed fb4c 	bl	8000500 <__aeabi_fcmpgt>
 8012e68:	1e03      	subs	r3, r0, #0
 8012e6a:	d024      	beq.n	8012eb6 <Display_Main_Interface_Power+0x8e>
	{
		Power/=1000.0;
 8012e6c:	493c      	ldr	r1, [pc, #240]	; (8012f60 <Display_Main_Interface_Power+0x138>)
 8012e6e:	6978      	ldr	r0, [r7, #20]
 8012e70:	f7ed fd2e 	bl	80008d0 <__aeabi_fdiv>
 8012e74:	1c03      	adds	r3, r0, #0
 8012e76:	617b      	str	r3, [r7, #20]
		String_Power_real[0]='0';
 8012e78:	193b      	adds	r3, r7, r4
 8012e7a:	2230      	movs	r2, #48	; 0x30
 8012e7c:	701a      	strb	r2, [r3, #0]
		String_Power_real[1]='0';
 8012e7e:	0025      	movs	r5, r4
 8012e80:	193b      	adds	r3, r7, r4
 8012e82:	2230      	movs	r2, #48	; 0x30
 8012e84:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Power_real[2], "%4.2f", Power);
 8012e86:	6978      	ldr	r0, [r7, #20]
 8012e88:	f7f0 f812 	bl	8002eb0 <__aeabi_f2d>
 8012e8c:	0002      	movs	r2, r0
 8012e8e:	000b      	movs	r3, r1
 8012e90:	4c34      	ldr	r4, [pc, #208]	; (8012f64 <Display_Main_Interface_Power+0x13c>)
 8012e92:	1979      	adds	r1, r7, r5
 8012e94:	1c88      	adds	r0, r1, #2
 8012e96:	0021      	movs	r1, r4
 8012e98:	f002 f996 	bl	80151c8 <siprintf>

		Write_String_16x32AsicII(32,0,String_Power_real);
 8012e9c:	197b      	adds	r3, r7, r5
 8012e9e:	001a      	movs	r2, r3
 8012ea0:	2100      	movs	r1, #0
 8012ea2:	2020      	movs	r0, #32
 8012ea4:	f7ff fe02 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(32,24,"KW");
 8012ea8:	4b2f      	ldr	r3, [pc, #188]	; (8012f68 <Display_Main_Interface_Power+0x140>)
 8012eaa:	001a      	movs	r2, r3
 8012eac:	2118      	movs	r1, #24
 8012eae:	2020      	movs	r0, #32
 8012eb0:	f7ff fdfc 	bl	8012aac <Write_String_16x32AsicII>

		Write_String_12x24AsicII(40,0,String_Power_real);
		Write_Single_12x24AsicII(40,24,'W');
	}

}
 8012eb4:	e04d      	b.n	8012f52 <Display_Main_Interface_Power+0x12a>
		if(Power>=100)     	sprintf(String_Power_real, "%6.2f", Power);//将float转为string，数据长度为6，保留两位小数
 8012eb6:	492d      	ldr	r1, [pc, #180]	; (8012f6c <Display_Main_Interface_Power+0x144>)
 8012eb8:	6978      	ldr	r0, [r7, #20]
 8012eba:	f7ed fb2b 	bl	8000514 <__aeabi_fcmpge>
 8012ebe:	1e03      	subs	r3, r0, #0
 8012ec0:	d00a      	beq.n	8012ed8 <Display_Main_Interface_Power+0xb0>
 8012ec2:	6978      	ldr	r0, [r7, #20]
 8012ec4:	f7ef fff4 	bl	8002eb0 <__aeabi_f2d>
 8012ec8:	0002      	movs	r2, r0
 8012eca:	000b      	movs	r3, r1
 8012ecc:	4928      	ldr	r1, [pc, #160]	; (8012f70 <Display_Main_Interface_Power+0x148>)
 8012ece:	2008      	movs	r0, #8
 8012ed0:	1838      	adds	r0, r7, r0
 8012ed2:	f002 f979 	bl	80151c8 <siprintf>
 8012ed6:	e030      	b.n	8012f3a <Display_Main_Interface_Power+0x112>
		else if(Power>=9.99)
 8012ed8:	6978      	ldr	r0, [r7, #20]
 8012eda:	f7ef ffe9 	bl	8002eb0 <__aeabi_f2d>
 8012ede:	4a25      	ldr	r2, [pc, #148]	; (8012f74 <Display_Main_Interface_Power+0x14c>)
 8012ee0:	4b25      	ldr	r3, [pc, #148]	; (8012f78 <Display_Main_Interface_Power+0x150>)
 8012ee2:	f7ed fadd 	bl	80004a0 <__aeabi_dcmpge>
 8012ee6:	1e03      	subs	r3, r0, #0
 8012ee8:	d00f      	beq.n	8012f0a <Display_Main_Interface_Power+0xe2>
			String_Power_real[0]=' ';
 8012eea:	2508      	movs	r5, #8
 8012eec:	197b      	adds	r3, r7, r5
 8012eee:	2220      	movs	r2, #32
 8012ef0:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Power_real[1], "%5.2f", Power);
 8012ef2:	6978      	ldr	r0, [r7, #20]
 8012ef4:	f7ef ffdc 	bl	8002eb0 <__aeabi_f2d>
 8012ef8:	0002      	movs	r2, r0
 8012efa:	000b      	movs	r3, r1
 8012efc:	4c1f      	ldr	r4, [pc, #124]	; (8012f7c <Display_Main_Interface_Power+0x154>)
 8012efe:	1979      	adds	r1, r7, r5
 8012f00:	1c48      	adds	r0, r1, #1
 8012f02:	0021      	movs	r1, r4
 8012f04:	f002 f960 	bl	80151c8 <siprintf>
 8012f08:	e017      	b.n	8012f3a <Display_Main_Interface_Power+0x112>
		else if(Power>=0)
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	6978      	ldr	r0, [r7, #20]
 8012f0e:	f7ed fb01 	bl	8000514 <__aeabi_fcmpge>
 8012f12:	1e03      	subs	r3, r0, #0
 8012f14:	d011      	beq.n	8012f3a <Display_Main_Interface_Power+0x112>
			String_Power_real[0]=' ';
 8012f16:	2508      	movs	r5, #8
 8012f18:	197b      	adds	r3, r7, r5
 8012f1a:	2220      	movs	r2, #32
 8012f1c:	701a      	strb	r2, [r3, #0]
			String_Power_real[1]=' ';
 8012f1e:	197b      	adds	r3, r7, r5
 8012f20:	2220      	movs	r2, #32
 8012f22:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Power_real[2],"%4.2f", Power);
 8012f24:	6978      	ldr	r0, [r7, #20]
 8012f26:	f7ef ffc3 	bl	8002eb0 <__aeabi_f2d>
 8012f2a:	0002      	movs	r2, r0
 8012f2c:	000b      	movs	r3, r1
 8012f2e:	4c0d      	ldr	r4, [pc, #52]	; (8012f64 <Display_Main_Interface_Power+0x13c>)
 8012f30:	1979      	adds	r1, r7, r5
 8012f32:	1c88      	adds	r0, r1, #2
 8012f34:	0021      	movs	r1, r4
 8012f36:	f002 f947 	bl	80151c8 <siprintf>
		Write_String_12x24AsicII(40,0,String_Power_real);
 8012f3a:	2308      	movs	r3, #8
 8012f3c:	18fb      	adds	r3, r7, r3
 8012f3e:	001a      	movs	r2, r3
 8012f40:	2100      	movs	r1, #0
 8012f42:	2028      	movs	r0, #40	; 0x28
 8012f44:	f7ff fe50 	bl	8012be8 <Write_String_12x24AsicII>
		Write_Single_12x24AsicII(40,24,'W');
 8012f48:	2257      	movs	r2, #87	; 0x57
 8012f4a:	2118      	movs	r1, #24
 8012f4c:	2028      	movs	r0, #40	; 0x28
 8012f4e:	f7ff fdeb 	bl	8012b28 <Write_Single_12x24AsicII>
}
 8012f52:	46c0      	nop			; (mov r8, r8)
 8012f54:	46bd      	mov	sp, r7
 8012f56:	b006      	add	sp, #24
 8012f58:	bdb0      	pop	{r4, r5, r7, pc}
 8012f5a:	46c0      	nop			; (mov r8, r8)
 8012f5c:	08018428 	.word	0x08018428
 8012f60:	447a0000 	.word	0x447a0000
 8012f64:	0801840c 	.word	0x0801840c
 8012f68:	08018424 	.word	0x08018424
 8012f6c:	42c80000 	.word	0x42c80000
 8012f70:	080183fc 	.word	0x080183fc
 8012f74:	47ae147b 	.word	0x47ae147b
 8012f78:	4023fae1 	.word	0x4023fae1
 8012f7c:	08018404 	.word	0x08018404

08012f80 <Display_Main_Interface_Lock>:
 * @brief  显示键盘锁定状态
 * @param  显示ON，不显示OFF
 * @retval None
 */
static void Display_Main_Interface_Lock(uint8_t State)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	0002      	movs	r2, r0
 8012f88:	1dfb      	adds	r3, r7, #7
 8012f8a:	701a      	strb	r2, [r3, #0]
	if(State==UNLOCK) Write_String_8x16AsicII(32,36, "      ");
 8012f8c:	1dfb      	adds	r3, r7, #7
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d106      	bne.n	8012fa2 <Display_Main_Interface_Lock+0x22>
 8012f94:	4b08      	ldr	r3, [pc, #32]	; (8012fb8 <Display_Main_Interface_Lock+0x38>)
 8012f96:	001a      	movs	r2, r3
 8012f98:	2124      	movs	r1, #36	; 0x24
 8012f9a:	2020      	movs	r0, #32
 8012f9c:	f7ff fd04 	bl	80129a8 <Write_String_8x16AsicII>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");

}
 8012fa0:	e005      	b.n	8012fae <Display_Main_Interface_Lock+0x2e>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");
 8012fa2:	4b06      	ldr	r3, [pc, #24]	; (8012fbc <Display_Main_Interface_Lock+0x3c>)
 8012fa4:	001a      	movs	r2, r3
 8012fa6:	2124      	movs	r1, #36	; 0x24
 8012fa8:	2020      	movs	r0, #32
 8012faa:	f7ff fcfd 	bl	80129a8 <Write_String_8x16AsicII>
}
 8012fae:	46c0      	nop			; (mov r8, r8)
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	b002      	add	sp, #8
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	46c0      	nop			; (mov r8, r8)
 8012fb8:	08018434 	.word	0x08018434
 8012fbc:	0801843c 	.word	0x0801843c

08012fc0 <Display_Main_Interface_CV_CC_CP>:
 * @brief  显示处于CV/CC/CP状态
 * @param  CV/CC/CP
 * @retval None
 */
void Display_Main_Interface_CV_CC_CP(uint8_t CV_CC_CP)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	0002      	movs	r2, r0
 8012fc8:	1dfb      	adds	r3, r7, #7
 8012fca:	701a      	strb	r2, [r3, #0]
	uint8_t State;

	State = CV_CC_CP;
 8012fcc:	210f      	movs	r1, #15
 8012fce:	187b      	adds	r3, r7, r1
 8012fd0:	1dfa      	adds	r2, r7, #7
 8012fd2:	7812      	ldrb	r2, [r2, #0]
 8012fd4:	701a      	strb	r2, [r3, #0]
	switch(State)
 8012fd6:	187b      	adds	r3, r7, r1
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d002      	beq.n	8012fe4 <Display_Main_Interface_CV_CC_CP+0x24>
 8012fde:	2b02      	cmp	r3, #2
 8012fe0:	d007      	beq.n	8012ff2 <Display_Main_Interface_CV_CC_CP+0x32>
 8012fe2:	e00d      	b.n	8013000 <Display_Main_Interface_CV_CC_CP+0x40>
	{
		case CV:
			Write_String_8x16AsicII(48, 36, "CV");break;
 8012fe4:	4b0c      	ldr	r3, [pc, #48]	; (8013018 <Display_Main_Interface_CV_CC_CP+0x58>)
 8012fe6:	001a      	movs	r2, r3
 8012fe8:	2124      	movs	r1, #36	; 0x24
 8012fea:	2030      	movs	r0, #48	; 0x30
 8012fec:	f7ff fcdc 	bl	80129a8 <Write_String_8x16AsicII>
 8012ff0:	e00d      	b.n	801300e <Display_Main_Interface_CV_CC_CP+0x4e>
		case CC:
			Write_String_8x16AsicII(48, 36, "CC");break;
 8012ff2:	4b0a      	ldr	r3, [pc, #40]	; (801301c <Display_Main_Interface_CV_CC_CP+0x5c>)
 8012ff4:	001a      	movs	r2, r3
 8012ff6:	2124      	movs	r1, #36	; 0x24
 8012ff8:	2030      	movs	r0, #48	; 0x30
 8012ffa:	f7ff fcd5 	bl	80129a8 <Write_String_8x16AsicII>
 8012ffe:	e006      	b.n	801300e <Display_Main_Interface_CV_CC_CP+0x4e>
		default:
			{
				Write_String_8x16AsicII(48, 36, "  ");
 8013000:	4b07      	ldr	r3, [pc, #28]	; (8013020 <Display_Main_Interface_CV_CC_CP+0x60>)
 8013002:	001a      	movs	r2, r3
 8013004:	2124      	movs	r1, #36	; 0x24
 8013006:	2030      	movs	r0, #48	; 0x30
 8013008:	f7ff fcce 	bl	80129a8 <Write_String_8x16AsicII>
				break;
 801300c:	46c0      	nop			; (mov r8, r8)
			}
	}
}
 801300e:	46c0      	nop			; (mov r8, r8)
 8013010:	46bd      	mov	sp, r7
 8013012:	b004      	add	sp, #16
 8013014:	bd80      	pop	{r7, pc}
 8013016:	46c0      	nop			; (mov r8, r8)
 8013018:	08018444 	.word	0x08018444
 801301c:	08018448 	.word	0x08018448
 8013020:	0801844c 	.word	0x0801844c

08013024 <Display_Main_Interface_ON_OFF>:
 * @brief  显示处于ON/OFF状态
 * @param  ON/OFF
 * @retval None
 */
void Display_Main_Interface_ON_OFF(uint8_t State)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	0002      	movs	r2, r0
 801302c:	1dfb      	adds	r3, r7, #7
 801302e:	701a      	strb	r2, [r3, #0]
	if(State==OUTPUT)
 8013030:	1dfb      	adds	r3, r7, #7
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	2b01      	cmp	r3, #1
 8013036:	d106      	bne.n	8013046 <Display_Main_Interface_ON_OFF+0x22>
	{
		Write_String_8x16AsicII(48, 58, "ON ");
 8013038:	4b08      	ldr	r3, [pc, #32]	; (801305c <Display_Main_Interface_ON_OFF+0x38>)
 801303a:	001a      	movs	r2, r3
 801303c:	213a      	movs	r1, #58	; 0x3a
 801303e:	2030      	movs	r0, #48	; 0x30
 8013040:	f7ff fcb2 	bl	80129a8 <Write_String_8x16AsicII>
	}
	else
	{
		Write_String_8x16AsicII(48, 58, "OFF");
	}
}
 8013044:	e005      	b.n	8013052 <Display_Main_Interface_ON_OFF+0x2e>
		Write_String_8x16AsicII(48, 58, "OFF");
 8013046:	4b06      	ldr	r3, [pc, #24]	; (8013060 <Display_Main_Interface_ON_OFF+0x3c>)
 8013048:	001a      	movs	r2, r3
 801304a:	213a      	movs	r1, #58	; 0x3a
 801304c:	2030      	movs	r0, #48	; 0x30
 801304e:	f7ff fcab 	bl	80129a8 <Write_String_8x16AsicII>
}
 8013052:	46c0      	nop			; (mov r8, r8)
 8013054:	46bd      	mov	sp, r7
 8013056:	b002      	add	sp, #8
 8013058:	bd80      	pop	{r7, pc}
 801305a:	46c0      	nop			; (mov r8, r8)
 801305c:	08018450 	.word	0x08018450
 8013060:	08018454 	.word	0x08018454

08013064 <Display_Main_Interface_Shift>:
 * @brief  显示处于Shift/not Shift状态
 * @param  Shift/not Shift
 * @retval None
 */
static void Display_Main_Interface_Shift(uint8_t State)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	0002      	movs	r2, r0
 801306c:	1dfb      	adds	r3, r7, #7
 801306e:	701a      	strb	r2, [r3, #0]
	switch(State)
 8013070:	1dfb      	adds	r3, r7, #7
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d008      	beq.n	801308a <Display_Main_Interface_Shift+0x26>
 8013078:	2b01      	cmp	r3, #1
 801307a:	d10d      	bne.n	8013098 <Display_Main_Interface_Shift+0x34>
	{
		case Shift: Write_String_8x16AsicII(48,44, "Shift"); break;
 801307c:	4b09      	ldr	r3, [pc, #36]	; (80130a4 <Display_Main_Interface_Shift+0x40>)
 801307e:	001a      	movs	r2, r3
 8013080:	212c      	movs	r1, #44	; 0x2c
 8013082:	2030      	movs	r0, #48	; 0x30
 8013084:	f7ff fc90 	bl	80129a8 <Write_String_8x16AsicII>
 8013088:	e007      	b.n	801309a <Display_Main_Interface_Shift+0x36>
		case Not_Shift: Write_String_8x16AsicII(48, 44, "     "); break;
 801308a:	4b07      	ldr	r3, [pc, #28]	; (80130a8 <Display_Main_Interface_Shift+0x44>)
 801308c:	001a      	movs	r2, r3
 801308e:	212c      	movs	r1, #44	; 0x2c
 8013090:	2030      	movs	r0, #48	; 0x30
 8013092:	f7ff fc89 	bl	80129a8 <Write_String_8x16AsicII>
 8013096:	e000      	b.n	801309a <Display_Main_Interface_Shift+0x36>
		default: break;
 8013098:	46c0      	nop			; (mov r8, r8)
	}
}
 801309a:	46c0      	nop			; (mov r8, r8)
 801309c:	46bd      	mov	sp, r7
 801309e:	b002      	add	sp, #8
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	46c0      	nop			; (mov r8, r8)
 80130a4:	08018458 	.word	0x08018458
 80130a8:	08018460 	.word	0x08018460

080130ac <Display_Main_Interface_V_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_V_set  (void)

{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b084      	sub	sp, #16
 80130b0:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 80130b2:	4b90      	ldr	r3, [pc, #576]	; (80132f4 <Display_Main_Interface_V_set+0x248>)
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d000      	beq.n	80130bc <Display_Main_Interface_V_set+0x10>
 80130ba:	e0a9      	b.n	8013210 <Display_Main_Interface_V_set+0x164>
	{
		Write_String_8x16AsicII(48,56,"VSET");
 80130bc:	4b8e      	ldr	r3, [pc, #568]	; (80132f8 <Display_Main_Interface_V_set+0x24c>)
 80130be:	001a      	movs	r2, r3
 80130c0:	2138      	movs	r1, #56	; 0x38
 80130c2:	2030      	movs	r0, #48	; 0x30
 80130c4:	f7ff fc70 	bl	80129a8 <Write_String_8x16AsicII>


		/*显示上一电流设定值*/
		float Current=Set_Current/100.0;
 80130c8:	4b8c      	ldr	r3, [pc, #560]	; (80132fc <Display_Main_Interface_V_set+0x250>)
 80130ca:	881b      	ldrh	r3, [r3, #0]
 80130cc:	0018      	movs	r0, r3
 80130ce:	f7ef fe99 	bl	8002e04 <__aeabi_i2d>
 80130d2:	2200      	movs	r2, #0
 80130d4:	4b8a      	ldr	r3, [pc, #552]	; (8013300 <Display_Main_Interface_V_set+0x254>)
 80130d6:	f7ee fc41 	bl	800195c <__aeabi_ddiv>
 80130da:	0002      	movs	r2, r0
 80130dc:	000b      	movs	r3, r1
 80130de:	0010      	movs	r0, r2
 80130e0:	0019      	movs	r1, r3
 80130e2:	f7ef ff2d 	bl	8002f40 <__aeabi_d2f>
 80130e6:	1c03      	adds	r3, r0, #0
 80130e8:	60bb      	str	r3, [r7, #8]
		static char String_Current_real[7]={'0','0','0','.','0','0'};
		if(Current>=100)   		sprintf(String_Current_real, "%6.2f", Current);//将float转为string，保留一位小数
 80130ea:	4986      	ldr	r1, [pc, #536]	; (8013304 <Display_Main_Interface_V_set+0x258>)
 80130ec:	68b8      	ldr	r0, [r7, #8]
 80130ee:	f7ed fa11 	bl	8000514 <__aeabi_fcmpge>
 80130f2:	1e03      	subs	r3, r0, #0
 80130f4:	d009      	beq.n	801310a <Display_Main_Interface_V_set+0x5e>
 80130f6:	68b8      	ldr	r0, [r7, #8]
 80130f8:	f7ef feda 	bl	8002eb0 <__aeabi_f2d>
 80130fc:	0002      	movs	r2, r0
 80130fe:	000b      	movs	r3, r1
 8013100:	4981      	ldr	r1, [pc, #516]	; (8013308 <Display_Main_Interface_V_set+0x25c>)
 8013102:	4882      	ldr	r0, [pc, #520]	; (801330c <Display_Main_Interface_V_set+0x260>)
 8013104:	f002 f860 	bl	80151c8 <siprintf>
 8013108:	e02a      	b.n	8013160 <Display_Main_Interface_V_set+0xb4>
		else if(Current>=9.99)
 801310a:	68b8      	ldr	r0, [r7, #8]
 801310c:	f7ef fed0 	bl	8002eb0 <__aeabi_f2d>
 8013110:	4a7f      	ldr	r2, [pc, #508]	; (8013310 <Display_Main_Interface_V_set+0x264>)
 8013112:	4b80      	ldr	r3, [pc, #512]	; (8013314 <Display_Main_Interface_V_set+0x268>)
 8013114:	f7ed f9c4 	bl	80004a0 <__aeabi_dcmpge>
 8013118:	1e03      	subs	r3, r0, #0
 801311a:	d00c      	beq.n	8013136 <Display_Main_Interface_V_set+0x8a>
		{
			String_Current_real[0]='0';
 801311c:	4b7b      	ldr	r3, [pc, #492]	; (801330c <Display_Main_Interface_V_set+0x260>)
 801311e:	2230      	movs	r2, #48	; 0x30
 8013120:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current_real[1], "%5.2f", Current);//保留两位小数
 8013122:	68b8      	ldr	r0, [r7, #8]
 8013124:	f7ef fec4 	bl	8002eb0 <__aeabi_f2d>
 8013128:	0002      	movs	r2, r0
 801312a:	000b      	movs	r3, r1
 801312c:	497a      	ldr	r1, [pc, #488]	; (8013318 <Display_Main_Interface_V_set+0x26c>)
 801312e:	487b      	ldr	r0, [pc, #492]	; (801331c <Display_Main_Interface_V_set+0x270>)
 8013130:	f002 f84a 	bl	80151c8 <siprintf>
 8013134:	e014      	b.n	8013160 <Display_Main_Interface_V_set+0xb4>
		}
		else if(Current>=0)
 8013136:	2100      	movs	r1, #0
 8013138:	68b8      	ldr	r0, [r7, #8]
 801313a:	f7ed f9eb 	bl	8000514 <__aeabi_fcmpge>
 801313e:	1e03      	subs	r3, r0, #0
 8013140:	d00e      	beq.n	8013160 <Display_Main_Interface_V_set+0xb4>
		{
			String_Current_real[0]='0';
 8013142:	4b72      	ldr	r3, [pc, #456]	; (801330c <Display_Main_Interface_V_set+0x260>)
 8013144:	2230      	movs	r2, #48	; 0x30
 8013146:	701a      	strb	r2, [r3, #0]
			String_Current_real[1]='0';
 8013148:	4b70      	ldr	r3, [pc, #448]	; (801330c <Display_Main_Interface_V_set+0x260>)
 801314a:	2230      	movs	r2, #48	; 0x30
 801314c:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current_real[2], "%4.2f", Current);
 801314e:	68b8      	ldr	r0, [r7, #8]
 8013150:	f7ef feae 	bl	8002eb0 <__aeabi_f2d>
 8013154:	0002      	movs	r2, r0
 8013156:	000b      	movs	r3, r1
 8013158:	4971      	ldr	r1, [pc, #452]	; (8013320 <Display_Main_Interface_V_set+0x274>)
 801315a:	4872      	ldr	r0, [pc, #456]	; (8013324 <Display_Main_Interface_V_set+0x278>)
 801315c:	f002 f834 	bl	80151c8 <siprintf>

		}
		Write_String_16x32AsicII(16,36,String_Current_real);
 8013160:	4b6a      	ldr	r3, [pc, #424]	; (801330c <Display_Main_Interface_V_set+0x260>)
 8013162:	001a      	movs	r2, r3
 8013164:	2124      	movs	r1, #36	; 0x24
 8013166:	2010      	movs	r0, #16
 8013168:	f7ff fca0 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 801316c:	2241      	movs	r2, #65	; 0x41
 801316e:	213c      	movs	r1, #60	; 0x3c
 8013170:	2010      	movs	r0, #16
 8013172:	f7ff fc57 	bl	8012a24 <Write_Single_16x32AsicII>
		/*显示上电压设定值*/
		float Voltage=String_to_float(String_Voltage);//实时设定值
 8013176:	4b6c      	ldr	r3, [pc, #432]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 8013178:	0018      	movs	r0, r3
 801317a:	f7fb f8c7 	bl	800e30c <String_to_float>
 801317e:	1c03      	adds	r3, r0, #0
 8013180:	607b      	str	r3, [r7, #4]
		if(Voltage>=100)   		sprintf(String_Voltage, "%6.2f", Voltage);//将float转为string，保留一位小数
 8013182:	4960      	ldr	r1, [pc, #384]	; (8013304 <Display_Main_Interface_V_set+0x258>)
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f7ed f9c5 	bl	8000514 <__aeabi_fcmpge>
 801318a:	1e03      	subs	r3, r0, #0
 801318c:	d009      	beq.n	80131a2 <Display_Main_Interface_V_set+0xf6>
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7ef fe8e 	bl	8002eb0 <__aeabi_f2d>
 8013194:	0002      	movs	r2, r0
 8013196:	000b      	movs	r3, r1
 8013198:	495b      	ldr	r1, [pc, #364]	; (8013308 <Display_Main_Interface_V_set+0x25c>)
 801319a:	4863      	ldr	r0, [pc, #396]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 801319c:	f002 f814 	bl	80151c8 <siprintf>
 80131a0:	e02a      	b.n	80131f8 <Display_Main_Interface_V_set+0x14c>
		else if(Voltage>=9.99)
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f7ef fe84 	bl	8002eb0 <__aeabi_f2d>
 80131a8:	4a59      	ldr	r2, [pc, #356]	; (8013310 <Display_Main_Interface_V_set+0x264>)
 80131aa:	4b5a      	ldr	r3, [pc, #360]	; (8013314 <Display_Main_Interface_V_set+0x268>)
 80131ac:	f7ed f978 	bl	80004a0 <__aeabi_dcmpge>
 80131b0:	1e03      	subs	r3, r0, #0
 80131b2:	d00c      	beq.n	80131ce <Display_Main_Interface_V_set+0x122>
		{
			String_Voltage[0]='0';
 80131b4:	4b5c      	ldr	r3, [pc, #368]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 80131b6:	2230      	movs	r2, #48	; 0x30
 80131b8:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage[1], "%5.2f", Voltage);//保留两位小数
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f7ef fe78 	bl	8002eb0 <__aeabi_f2d>
 80131c0:	0002      	movs	r2, r0
 80131c2:	000b      	movs	r3, r1
 80131c4:	4954      	ldr	r1, [pc, #336]	; (8013318 <Display_Main_Interface_V_set+0x26c>)
 80131c6:	4859      	ldr	r0, [pc, #356]	; (801332c <Display_Main_Interface_V_set+0x280>)
 80131c8:	f001 fffe 	bl	80151c8 <siprintf>
 80131cc:	e014      	b.n	80131f8 <Display_Main_Interface_V_set+0x14c>
		}
		else if(Voltage>=0)
 80131ce:	2100      	movs	r1, #0
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f7ed f99f 	bl	8000514 <__aeabi_fcmpge>
 80131d6:	1e03      	subs	r3, r0, #0
 80131d8:	d00e      	beq.n	80131f8 <Display_Main_Interface_V_set+0x14c>
		{
			String_Voltage[0]='0';
 80131da:	4b53      	ldr	r3, [pc, #332]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 80131dc:	2230      	movs	r2, #48	; 0x30
 80131de:	701a      	strb	r2, [r3, #0]
			String_Voltage[1]='0';
 80131e0:	4b51      	ldr	r3, [pc, #324]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 80131e2:	2230      	movs	r2, #48	; 0x30
 80131e4:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage[2], "%4.2f", Voltage);
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f7ef fe62 	bl	8002eb0 <__aeabi_f2d>
 80131ec:	0002      	movs	r2, r0
 80131ee:	000b      	movs	r3, r1
 80131f0:	494b      	ldr	r1, [pc, #300]	; (8013320 <Display_Main_Interface_V_set+0x274>)
 80131f2:	484f      	ldr	r0, [pc, #316]	; (8013330 <Display_Main_Interface_V_set+0x284>)
 80131f4:	f001 ffe8 	bl	80151c8 <siprintf>

		}

		Write_String_16x32AsicII(16, 0, String_Voltage);
 80131f8:	4b4b      	ldr	r3, [pc, #300]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 80131fa:	001a      	movs	r2, r3
 80131fc:	2100      	movs	r1, #0
 80131fe:	2010      	movs	r0, #16
 8013200:	f7ff fc54 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 8013204:	2256      	movs	r2, #86	; 0x56
 8013206:	2118      	movs	r1, #24
 8013208:	2010      	movs	r0, #16
 801320a:	f7ff fc0b 	bl	8012a24 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16, 0, String_Voltage);
	}



}
 801320e:	e06c      	b.n	80132ea <Display_Main_Interface_V_set+0x23e>
	else if(Keys_Encoder_Mode==Keys_Mode)
 8013210:	4b38      	ldr	r3, [pc, #224]	; (80132f4 <Display_Main_Interface_V_set+0x248>)
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d168      	bne.n	80132ea <Display_Main_Interface_V_set+0x23e>
		Write_String_8x16AsicII(48,56,"VSET");
 8013218:	4b37      	ldr	r3, [pc, #220]	; (80132f8 <Display_Main_Interface_V_set+0x24c>)
 801321a:	001a      	movs	r2, r3
 801321c:	2138      	movs	r1, #56	; 0x38
 801321e:	2030      	movs	r0, #48	; 0x30
 8013220:	f7ff fbc2 	bl	80129a8 <Write_String_8x16AsicII>
		Write_String_16x32AsicII(16,0,String_Voltage);
 8013224:	4b40      	ldr	r3, [pc, #256]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 8013226:	001a      	movs	r2, r3
 8013228:	2100      	movs	r1, #0
 801322a:	2010      	movs	r0, #16
 801322c:	f7ff fc3e 	bl	8012aac <Write_String_16x32AsicII>
		float Current=Set_Current/100.0;
 8013230:	4b32      	ldr	r3, [pc, #200]	; (80132fc <Display_Main_Interface_V_set+0x250>)
 8013232:	881b      	ldrh	r3, [r3, #0]
 8013234:	0018      	movs	r0, r3
 8013236:	f7ef fde5 	bl	8002e04 <__aeabi_i2d>
 801323a:	2200      	movs	r2, #0
 801323c:	4b30      	ldr	r3, [pc, #192]	; (8013300 <Display_Main_Interface_V_set+0x254>)
 801323e:	f7ee fb8d 	bl	800195c <__aeabi_ddiv>
 8013242:	0002      	movs	r2, r0
 8013244:	000b      	movs	r3, r1
 8013246:	0010      	movs	r0, r2
 8013248:	0019      	movs	r1, r3
 801324a:	f7ef fe79 	bl	8002f40 <__aeabi_d2f>
 801324e:	1c03      	adds	r3, r0, #0
 8013250:	60fb      	str	r3, [r7, #12]
		if(Current>=100)   		sprintf(String_Current_real, "%6.2f", Current);//将float转为string，保留一位小数
 8013252:	492c      	ldr	r1, [pc, #176]	; (8013304 <Display_Main_Interface_V_set+0x258>)
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f7ed f95d 	bl	8000514 <__aeabi_fcmpge>
 801325a:	1e03      	subs	r3, r0, #0
 801325c:	d009      	beq.n	8013272 <Display_Main_Interface_V_set+0x1c6>
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7ef fe26 	bl	8002eb0 <__aeabi_f2d>
 8013264:	0002      	movs	r2, r0
 8013266:	000b      	movs	r3, r1
 8013268:	4927      	ldr	r1, [pc, #156]	; (8013308 <Display_Main_Interface_V_set+0x25c>)
 801326a:	4832      	ldr	r0, [pc, #200]	; (8013334 <Display_Main_Interface_V_set+0x288>)
 801326c:	f001 ffac 	bl	80151c8 <siprintf>
 8013270:	e02a      	b.n	80132c8 <Display_Main_Interface_V_set+0x21c>
		else if(Current>=9.99)
 8013272:	68f8      	ldr	r0, [r7, #12]
 8013274:	f7ef fe1c 	bl	8002eb0 <__aeabi_f2d>
 8013278:	4a25      	ldr	r2, [pc, #148]	; (8013310 <Display_Main_Interface_V_set+0x264>)
 801327a:	4b26      	ldr	r3, [pc, #152]	; (8013314 <Display_Main_Interface_V_set+0x268>)
 801327c:	f7ed f910 	bl	80004a0 <__aeabi_dcmpge>
 8013280:	1e03      	subs	r3, r0, #0
 8013282:	d00c      	beq.n	801329e <Display_Main_Interface_V_set+0x1f2>
			String_Current_real[0]='0';
 8013284:	4b2b      	ldr	r3, [pc, #172]	; (8013334 <Display_Main_Interface_V_set+0x288>)
 8013286:	2230      	movs	r2, #48	; 0x30
 8013288:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current_real[1], "%5.2f", Current);//保留两位小数
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f7ef fe10 	bl	8002eb0 <__aeabi_f2d>
 8013290:	0002      	movs	r2, r0
 8013292:	000b      	movs	r3, r1
 8013294:	4920      	ldr	r1, [pc, #128]	; (8013318 <Display_Main_Interface_V_set+0x26c>)
 8013296:	4828      	ldr	r0, [pc, #160]	; (8013338 <Display_Main_Interface_V_set+0x28c>)
 8013298:	f001 ff96 	bl	80151c8 <siprintf>
 801329c:	e014      	b.n	80132c8 <Display_Main_Interface_V_set+0x21c>
		else if(Current>=0)
 801329e:	2100      	movs	r1, #0
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	f7ed f937 	bl	8000514 <__aeabi_fcmpge>
 80132a6:	1e03      	subs	r3, r0, #0
 80132a8:	d00e      	beq.n	80132c8 <Display_Main_Interface_V_set+0x21c>
			String_Current_real[0]='0';
 80132aa:	4b22      	ldr	r3, [pc, #136]	; (8013334 <Display_Main_Interface_V_set+0x288>)
 80132ac:	2230      	movs	r2, #48	; 0x30
 80132ae:	701a      	strb	r2, [r3, #0]
			String_Current_real[1]='0';
 80132b0:	4b20      	ldr	r3, [pc, #128]	; (8013334 <Display_Main_Interface_V_set+0x288>)
 80132b2:	2230      	movs	r2, #48	; 0x30
 80132b4:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current_real[2], "%4.2f", Current);
 80132b6:	68f8      	ldr	r0, [r7, #12]
 80132b8:	f7ef fdfa 	bl	8002eb0 <__aeabi_f2d>
 80132bc:	0002      	movs	r2, r0
 80132be:	000b      	movs	r3, r1
 80132c0:	4917      	ldr	r1, [pc, #92]	; (8013320 <Display_Main_Interface_V_set+0x274>)
 80132c2:	481e      	ldr	r0, [pc, #120]	; (801333c <Display_Main_Interface_V_set+0x290>)
 80132c4:	f001 ff80 	bl	80151c8 <siprintf>
		Write_String_16x32AsicII(16,36,String_Current_real);
 80132c8:	4b1a      	ldr	r3, [pc, #104]	; (8013334 <Display_Main_Interface_V_set+0x288>)
 80132ca:	001a      	movs	r2, r3
 80132cc:	2124      	movs	r1, #36	; 0x24
 80132ce:	2010      	movs	r0, #16
 80132d0:	f7ff fbec 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 80132d4:	2241      	movs	r2, #65	; 0x41
 80132d6:	213c      	movs	r1, #60	; 0x3c
 80132d8:	2010      	movs	r0, #16
 80132da:	f7ff fba3 	bl	8012a24 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16, 0, String_Voltage);
 80132de:	4b12      	ldr	r3, [pc, #72]	; (8013328 <Display_Main_Interface_V_set+0x27c>)
 80132e0:	001a      	movs	r2, r3
 80132e2:	2100      	movs	r1, #0
 80132e4:	2010      	movs	r0, #16
 80132e6:	f7ff fbe1 	bl	8012aac <Write_String_16x32AsicII>
}
 80132ea:	46c0      	nop			; (mov r8, r8)
 80132ec:	46bd      	mov	sp, r7
 80132ee:	b004      	add	sp, #16
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	46c0      	nop			; (mov r8, r8)
 80132f4:	20002fd2 	.word	0x20002fd2
 80132f8:	08018498 	.word	0x08018498
 80132fc:	20002fda 	.word	0x20002fda
 8013300:	40590000 	.word	0x40590000
 8013304:	42c80000 	.word	0x42c80000
 8013308:	080183fc 	.word	0x080183fc
 801330c:	200030b4 	.word	0x200030b4
 8013310:	47ae147b 	.word	0x47ae147b
 8013314:	4023fae1 	.word	0x4023fae1
 8013318:	08018404 	.word	0x08018404
 801331c:	200030b5 	.word	0x200030b5
 8013320:	0801840c 	.word	0x0801840c
 8013324:	200030b6 	.word	0x200030b6
 8013328:	20003058 	.word	0x20003058
 801332c:	20003059 	.word	0x20003059
 8013330:	2000305a 	.word	0x2000305a
 8013334:	200030bc 	.word	0x200030bc
 8013338:	200030bd 	.word	0x200030bd
 801333c:	200030be 	.word	0x200030be

08013340 <Display_Main_Interface_I_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_I_set  (void)

{
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 8013346:	4b8d      	ldr	r3, [pc, #564]	; (801357c <Display_Main_Interface_I_set+0x23c>)
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	2b01      	cmp	r3, #1
 801334c:	d000      	beq.n	8013350 <Display_Main_Interface_I_set+0x10>
 801334e:	e0a9      	b.n	80134a4 <Display_Main_Interface_I_set+0x164>
	{
		Write_String_8x16AsicII(48,56,"ISET");
 8013350:	4b8b      	ldr	r3, [pc, #556]	; (8013580 <Display_Main_Interface_I_set+0x240>)
 8013352:	001a      	movs	r2, r3
 8013354:	2138      	movs	r1, #56	; 0x38
 8013356:	2030      	movs	r0, #48	; 0x30
 8013358:	f7ff fb26 	bl	80129a8 <Write_String_8x16AsicII>

		/*编码器模式下显示电压设定值*/
		float Voltage=Set_Voltage/100.0;
 801335c:	4b89      	ldr	r3, [pc, #548]	; (8013584 <Display_Main_Interface_I_set+0x244>)
 801335e:	881b      	ldrh	r3, [r3, #0]
 8013360:	0018      	movs	r0, r3
 8013362:	f7ef fd4f 	bl	8002e04 <__aeabi_i2d>
 8013366:	2200      	movs	r2, #0
 8013368:	4b87      	ldr	r3, [pc, #540]	; (8013588 <Display_Main_Interface_I_set+0x248>)
 801336a:	f7ee faf7 	bl	800195c <__aeabi_ddiv>
 801336e:	0002      	movs	r2, r0
 8013370:	000b      	movs	r3, r1
 8013372:	0010      	movs	r0, r2
 8013374:	0019      	movs	r1, r3
 8013376:	f7ef fde3 	bl	8002f40 <__aeabi_d2f>
 801337a:	1c03      	adds	r3, r0, #0
 801337c:	60bb      	str	r3, [r7, #8]
		static char String_Voltage_real[7]={'0','0','0','.','0','0'};
		if(Voltage>=100)   		sprintf(String_Voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 801337e:	4983      	ldr	r1, [pc, #524]	; (801358c <Display_Main_Interface_I_set+0x24c>)
 8013380:	68b8      	ldr	r0, [r7, #8]
 8013382:	f7ed f8c7 	bl	8000514 <__aeabi_fcmpge>
 8013386:	1e03      	subs	r3, r0, #0
 8013388:	d009      	beq.n	801339e <Display_Main_Interface_I_set+0x5e>
 801338a:	68b8      	ldr	r0, [r7, #8]
 801338c:	f7ef fd90 	bl	8002eb0 <__aeabi_f2d>
 8013390:	0002      	movs	r2, r0
 8013392:	000b      	movs	r3, r1
 8013394:	497e      	ldr	r1, [pc, #504]	; (8013590 <Display_Main_Interface_I_set+0x250>)
 8013396:	487f      	ldr	r0, [pc, #508]	; (8013594 <Display_Main_Interface_I_set+0x254>)
 8013398:	f001 ff16 	bl	80151c8 <siprintf>
 801339c:	e02a      	b.n	80133f4 <Display_Main_Interface_I_set+0xb4>
		else if(Voltage>=9.99)
 801339e:	68b8      	ldr	r0, [r7, #8]
 80133a0:	f7ef fd86 	bl	8002eb0 <__aeabi_f2d>
 80133a4:	4a7c      	ldr	r2, [pc, #496]	; (8013598 <Display_Main_Interface_I_set+0x258>)
 80133a6:	4b7d      	ldr	r3, [pc, #500]	; (801359c <Display_Main_Interface_I_set+0x25c>)
 80133a8:	f7ed f87a 	bl	80004a0 <__aeabi_dcmpge>
 80133ac:	1e03      	subs	r3, r0, #0
 80133ae:	d00c      	beq.n	80133ca <Display_Main_Interface_I_set+0x8a>
		{
			String_Voltage_real[0]='0';
 80133b0:	4b78      	ldr	r3, [pc, #480]	; (8013594 <Display_Main_Interface_I_set+0x254>)
 80133b2:	2230      	movs	r2, #48	; 0x30
 80133b4:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage_real[1], "%5.2f", Voltage);//保留两位小数
 80133b6:	68b8      	ldr	r0, [r7, #8]
 80133b8:	f7ef fd7a 	bl	8002eb0 <__aeabi_f2d>
 80133bc:	0002      	movs	r2, r0
 80133be:	000b      	movs	r3, r1
 80133c0:	4977      	ldr	r1, [pc, #476]	; (80135a0 <Display_Main_Interface_I_set+0x260>)
 80133c2:	4878      	ldr	r0, [pc, #480]	; (80135a4 <Display_Main_Interface_I_set+0x264>)
 80133c4:	f001 ff00 	bl	80151c8 <siprintf>
 80133c8:	e014      	b.n	80133f4 <Display_Main_Interface_I_set+0xb4>
		}
		else if(Voltage>=0)
 80133ca:	2100      	movs	r1, #0
 80133cc:	68b8      	ldr	r0, [r7, #8]
 80133ce:	f7ed f8a1 	bl	8000514 <__aeabi_fcmpge>
 80133d2:	1e03      	subs	r3, r0, #0
 80133d4:	d00e      	beq.n	80133f4 <Display_Main_Interface_I_set+0xb4>
		{
			String_Voltage_real[0]='0';
 80133d6:	4b6f      	ldr	r3, [pc, #444]	; (8013594 <Display_Main_Interface_I_set+0x254>)
 80133d8:	2230      	movs	r2, #48	; 0x30
 80133da:	701a      	strb	r2, [r3, #0]
			String_Voltage_real[1]='0';
 80133dc:	4b6d      	ldr	r3, [pc, #436]	; (8013594 <Display_Main_Interface_I_set+0x254>)
 80133de:	2230      	movs	r2, #48	; 0x30
 80133e0:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage_real[2], "%4.2f", Voltage);
 80133e2:	68b8      	ldr	r0, [r7, #8]
 80133e4:	f7ef fd64 	bl	8002eb0 <__aeabi_f2d>
 80133e8:	0002      	movs	r2, r0
 80133ea:	000b      	movs	r3, r1
 80133ec:	496e      	ldr	r1, [pc, #440]	; (80135a8 <Display_Main_Interface_I_set+0x268>)
 80133ee:	486f      	ldr	r0, [pc, #444]	; (80135ac <Display_Main_Interface_I_set+0x26c>)
 80133f0:	f001 feea 	bl	80151c8 <siprintf>

		}

		Write_String_16x32AsicII(16, 0, String_Voltage_real);
 80133f4:	4b67      	ldr	r3, [pc, #412]	; (8013594 <Display_Main_Interface_I_set+0x254>)
 80133f6:	001a      	movs	r2, r3
 80133f8:	2100      	movs	r1, #0
 80133fa:	2010      	movs	r0, #16
 80133fc:	f7ff fb56 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 8013400:	2256      	movs	r2, #86	; 0x56
 8013402:	2118      	movs	r1, #24
 8013404:	2010      	movs	r0, #16
 8013406:	f7ff fb0d 	bl	8012a24 <Write_Single_16x32AsicII>

		/*编码器模式下显示电流设定值*/
		float Current=String_to_float(String_Current);
 801340a:	4b69      	ldr	r3, [pc, #420]	; (80135b0 <Display_Main_Interface_I_set+0x270>)
 801340c:	0018      	movs	r0, r3
 801340e:	f7fa ff7d 	bl	800e30c <String_to_float>
 8013412:	1c03      	adds	r3, r0, #0
 8013414:	607b      	str	r3, [r7, #4]
		if(Current>=100)   		sprintf(String_Current, "%6.2f", Current);//将float转为string，保留一位小数
 8013416:	495d      	ldr	r1, [pc, #372]	; (801358c <Display_Main_Interface_I_set+0x24c>)
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f7ed f87b 	bl	8000514 <__aeabi_fcmpge>
 801341e:	1e03      	subs	r3, r0, #0
 8013420:	d009      	beq.n	8013436 <Display_Main_Interface_I_set+0xf6>
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f7ef fd44 	bl	8002eb0 <__aeabi_f2d>
 8013428:	0002      	movs	r2, r0
 801342a:	000b      	movs	r3, r1
 801342c:	4958      	ldr	r1, [pc, #352]	; (8013590 <Display_Main_Interface_I_set+0x250>)
 801342e:	4860      	ldr	r0, [pc, #384]	; (80135b0 <Display_Main_Interface_I_set+0x270>)
 8013430:	f001 feca 	bl	80151c8 <siprintf>
 8013434:	e02a      	b.n	801348c <Display_Main_Interface_I_set+0x14c>
		else if(Current>=9.99)
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f7ef fd3a 	bl	8002eb0 <__aeabi_f2d>
 801343c:	4a56      	ldr	r2, [pc, #344]	; (8013598 <Display_Main_Interface_I_set+0x258>)
 801343e:	4b57      	ldr	r3, [pc, #348]	; (801359c <Display_Main_Interface_I_set+0x25c>)
 8013440:	f7ed f82e 	bl	80004a0 <__aeabi_dcmpge>
 8013444:	1e03      	subs	r3, r0, #0
 8013446:	d00c      	beq.n	8013462 <Display_Main_Interface_I_set+0x122>
		{
			String_Current[0]='0';
 8013448:	4b59      	ldr	r3, [pc, #356]	; (80135b0 <Display_Main_Interface_I_set+0x270>)
 801344a:	2230      	movs	r2, #48	; 0x30
 801344c:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current[1], "%5.2f", Current);//保留两位小数
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f7ef fd2e 	bl	8002eb0 <__aeabi_f2d>
 8013454:	0002      	movs	r2, r0
 8013456:	000b      	movs	r3, r1
 8013458:	4951      	ldr	r1, [pc, #324]	; (80135a0 <Display_Main_Interface_I_set+0x260>)
 801345a:	4856      	ldr	r0, [pc, #344]	; (80135b4 <Display_Main_Interface_I_set+0x274>)
 801345c:	f001 feb4 	bl	80151c8 <siprintf>
 8013460:	e014      	b.n	801348c <Display_Main_Interface_I_set+0x14c>
		}
		else if(Current>=0)
 8013462:	2100      	movs	r1, #0
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ed f855 	bl	8000514 <__aeabi_fcmpge>
 801346a:	1e03      	subs	r3, r0, #0
 801346c:	d00e      	beq.n	801348c <Display_Main_Interface_I_set+0x14c>
		{
			String_Current[0]='0';
 801346e:	4b50      	ldr	r3, [pc, #320]	; (80135b0 <Display_Main_Interface_I_set+0x270>)
 8013470:	2230      	movs	r2, #48	; 0x30
 8013472:	701a      	strb	r2, [r3, #0]
			String_Current[1]='0';
 8013474:	4b4e      	ldr	r3, [pc, #312]	; (80135b0 <Display_Main_Interface_I_set+0x270>)
 8013476:	2230      	movs	r2, #48	; 0x30
 8013478:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current[2], "%4.2f", Current);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7ef fd18 	bl	8002eb0 <__aeabi_f2d>
 8013480:	0002      	movs	r2, r0
 8013482:	000b      	movs	r3, r1
 8013484:	4948      	ldr	r1, [pc, #288]	; (80135a8 <Display_Main_Interface_I_set+0x268>)
 8013486:	484c      	ldr	r0, [pc, #304]	; (80135b8 <Display_Main_Interface_I_set+0x278>)
 8013488:	f001 fe9e 	bl	80151c8 <siprintf>

		}
		Write_String_16x32AsicII(16,36,String_Current);
 801348c:	4b48      	ldr	r3, [pc, #288]	; (80135b0 <Display_Main_Interface_I_set+0x270>)
 801348e:	001a      	movs	r2, r3
 8013490:	2124      	movs	r1, #36	; 0x24
 8013492:	2010      	movs	r0, #16
 8013494:	f7ff fb0a 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013498:	2241      	movs	r2, #65	; 0x41
 801349a:	213c      	movs	r1, #60	; 0x3c
 801349c:	2010      	movs	r0, #16
 801349e:	f7ff fac1 	bl	8012a24 <Write_Single_16x32AsicII>
		/*按键模式下显示当前电流设定值*/
		Write_String_16x32AsicII(16,36,String_Current);
	}


}
 80134a2:	e066      	b.n	8013572 <Display_Main_Interface_I_set+0x232>
	else if(Keys_Encoder_Mode==Keys_Mode)
 80134a4:	4b35      	ldr	r3, [pc, #212]	; (801357c <Display_Main_Interface_I_set+0x23c>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d162      	bne.n	8013572 <Display_Main_Interface_I_set+0x232>
		Write_String_8x16AsicII(48,56,"ISET");
 80134ac:	4b34      	ldr	r3, [pc, #208]	; (8013580 <Display_Main_Interface_I_set+0x240>)
 80134ae:	001a      	movs	r2, r3
 80134b0:	2138      	movs	r1, #56	; 0x38
 80134b2:	2030      	movs	r0, #48	; 0x30
 80134b4:	f7ff fa78 	bl	80129a8 <Write_String_8x16AsicII>
		float Voltage=Set_Voltage/100.0;
 80134b8:	4b32      	ldr	r3, [pc, #200]	; (8013584 <Display_Main_Interface_I_set+0x244>)
 80134ba:	881b      	ldrh	r3, [r3, #0]
 80134bc:	0018      	movs	r0, r3
 80134be:	f7ef fca1 	bl	8002e04 <__aeabi_i2d>
 80134c2:	2200      	movs	r2, #0
 80134c4:	4b30      	ldr	r3, [pc, #192]	; (8013588 <Display_Main_Interface_I_set+0x248>)
 80134c6:	f7ee fa49 	bl	800195c <__aeabi_ddiv>
 80134ca:	0002      	movs	r2, r0
 80134cc:	000b      	movs	r3, r1
 80134ce:	0010      	movs	r0, r2
 80134d0:	0019      	movs	r1, r3
 80134d2:	f7ef fd35 	bl	8002f40 <__aeabi_d2f>
 80134d6:	1c03      	adds	r3, r0, #0
 80134d8:	60fb      	str	r3, [r7, #12]
		if(Voltage>=100)   		sprintf(String_Voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 80134da:	492c      	ldr	r1, [pc, #176]	; (801358c <Display_Main_Interface_I_set+0x24c>)
 80134dc:	68f8      	ldr	r0, [r7, #12]
 80134de:	f7ed f819 	bl	8000514 <__aeabi_fcmpge>
 80134e2:	1e03      	subs	r3, r0, #0
 80134e4:	d009      	beq.n	80134fa <Display_Main_Interface_I_set+0x1ba>
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	f7ef fce2 	bl	8002eb0 <__aeabi_f2d>
 80134ec:	0002      	movs	r2, r0
 80134ee:	000b      	movs	r3, r1
 80134f0:	4927      	ldr	r1, [pc, #156]	; (8013590 <Display_Main_Interface_I_set+0x250>)
 80134f2:	4832      	ldr	r0, [pc, #200]	; (80135bc <Display_Main_Interface_I_set+0x27c>)
 80134f4:	f001 fe68 	bl	80151c8 <siprintf>
 80134f8:	e02a      	b.n	8013550 <Display_Main_Interface_I_set+0x210>
		else if(Voltage>=9.99)
 80134fa:	68f8      	ldr	r0, [r7, #12]
 80134fc:	f7ef fcd8 	bl	8002eb0 <__aeabi_f2d>
 8013500:	4a25      	ldr	r2, [pc, #148]	; (8013598 <Display_Main_Interface_I_set+0x258>)
 8013502:	4b26      	ldr	r3, [pc, #152]	; (801359c <Display_Main_Interface_I_set+0x25c>)
 8013504:	f7ec ffcc 	bl	80004a0 <__aeabi_dcmpge>
 8013508:	1e03      	subs	r3, r0, #0
 801350a:	d00c      	beq.n	8013526 <Display_Main_Interface_I_set+0x1e6>
			String_Voltage_real[0]='0';
 801350c:	4b2b      	ldr	r3, [pc, #172]	; (80135bc <Display_Main_Interface_I_set+0x27c>)
 801350e:	2230      	movs	r2, #48	; 0x30
 8013510:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage_real[1], "%5.2f", Voltage);//保留两位小数
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ef fccc 	bl	8002eb0 <__aeabi_f2d>
 8013518:	0002      	movs	r2, r0
 801351a:	000b      	movs	r3, r1
 801351c:	4920      	ldr	r1, [pc, #128]	; (80135a0 <Display_Main_Interface_I_set+0x260>)
 801351e:	4828      	ldr	r0, [pc, #160]	; (80135c0 <Display_Main_Interface_I_set+0x280>)
 8013520:	f001 fe52 	bl	80151c8 <siprintf>
 8013524:	e014      	b.n	8013550 <Display_Main_Interface_I_set+0x210>
		else if(Voltage>=0)
 8013526:	2100      	movs	r1, #0
 8013528:	68f8      	ldr	r0, [r7, #12]
 801352a:	f7ec fff3 	bl	8000514 <__aeabi_fcmpge>
 801352e:	1e03      	subs	r3, r0, #0
 8013530:	d00e      	beq.n	8013550 <Display_Main_Interface_I_set+0x210>
			String_Voltage_real[0]='0';
 8013532:	4b22      	ldr	r3, [pc, #136]	; (80135bc <Display_Main_Interface_I_set+0x27c>)
 8013534:	2230      	movs	r2, #48	; 0x30
 8013536:	701a      	strb	r2, [r3, #0]
			String_Voltage_real[1]='0';
 8013538:	4b20      	ldr	r3, [pc, #128]	; (80135bc <Display_Main_Interface_I_set+0x27c>)
 801353a:	2230      	movs	r2, #48	; 0x30
 801353c:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage_real[2], "%4.2f", Voltage);
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	f7ef fcb6 	bl	8002eb0 <__aeabi_f2d>
 8013544:	0002      	movs	r2, r0
 8013546:	000b      	movs	r3, r1
 8013548:	4917      	ldr	r1, [pc, #92]	; (80135a8 <Display_Main_Interface_I_set+0x268>)
 801354a:	481e      	ldr	r0, [pc, #120]	; (80135c4 <Display_Main_Interface_I_set+0x284>)
 801354c:	f001 fe3c 	bl	80151c8 <siprintf>
		Write_String_16x32AsicII(16, 0, String_Voltage_real);
 8013550:	4b1a      	ldr	r3, [pc, #104]	; (80135bc <Display_Main_Interface_I_set+0x27c>)
 8013552:	001a      	movs	r2, r3
 8013554:	2100      	movs	r1, #0
 8013556:	2010      	movs	r0, #16
 8013558:	f7ff faa8 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 801355c:	2256      	movs	r2, #86	; 0x56
 801355e:	2118      	movs	r1, #24
 8013560:	2010      	movs	r0, #16
 8013562:	f7ff fa5f 	bl	8012a24 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16,36,String_Current);
 8013566:	4b12      	ldr	r3, [pc, #72]	; (80135b0 <Display_Main_Interface_I_set+0x270>)
 8013568:	001a      	movs	r2, r3
 801356a:	2124      	movs	r1, #36	; 0x24
 801356c:	2010      	movs	r0, #16
 801356e:	f7ff fa9d 	bl	8012aac <Write_String_16x32AsicII>
}
 8013572:	46c0      	nop			; (mov r8, r8)
 8013574:	46bd      	mov	sp, r7
 8013576:	b004      	add	sp, #16
 8013578:	bd80      	pop	{r7, pc}
 801357a:	46c0      	nop			; (mov r8, r8)
 801357c:	20002fd2 	.word	0x20002fd2
 8013580:	080184a0 	.word	0x080184a0
 8013584:	20002fd8 	.word	0x20002fd8
 8013588:	40590000 	.word	0x40590000
 801358c:	42c80000 	.word	0x42c80000
 8013590:	080183fc 	.word	0x080183fc
 8013594:	200030c4 	.word	0x200030c4
 8013598:	47ae147b 	.word	0x47ae147b
 801359c:	4023fae1 	.word	0x4023fae1
 80135a0:	08018404 	.word	0x08018404
 80135a4:	200030c5 	.word	0x200030c5
 80135a8:	0801840c 	.word	0x0801840c
 80135ac:	200030c6 	.word	0x200030c6
 80135b0:	20003060 	.word	0x20003060
 80135b4:	20003061 	.word	0x20003061
 80135b8:	20003062 	.word	0x20003062
 80135bc:	200030cc 	.word	0x200030cc
 80135c0:	200030cd 	.word	0x200030cd
 80135c4:	200030ce 	.word	0x200030ce

080135c8 <Display_Main_Interface>:
	                        const uint8_t CV_CC_CP,
							const uint8_t Preset_Actual,
							const uint8_t LOCK_UNLOCK,
							const uint8_t Shift_NotShift)

{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	0019      	movs	r1, r3
 80135d4:	1dfb      	adds	r3, r7, #7
 80135d6:	701a      	strb	r2, [r3, #0]
 80135d8:	1dbb      	adds	r3, r7, #6
 80135da:	1c0a      	adds	r2, r1, #0
 80135dc:	701a      	strb	r2, [r3, #0]


		//Current_Actual=Current_real;
		Display_Main_Interface_Voltage(Voltage_Actual);
 80135de:	4b16      	ldr	r3, [pc, #88]	; (8013638 <Display_Main_Interface+0x70>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	1c18      	adds	r0, r3, #0
 80135e4:	f7ff fb40 	bl	8012c68 <Display_Main_Interface_Voltage>
		Display_Main_Interface_Current(Current_Actual);
 80135e8:	4b14      	ldr	r3, [pc, #80]	; (801363c <Display_Main_Interface+0x74>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	1c18      	adds	r0, r3, #0
 80135ee:	f7ff fbab 	bl	8012d48 <Display_Main_Interface_Current>
		Display_Main_Interface_Power(Voltage_Actual,Current_Actual);
 80135f2:	4b11      	ldr	r3, [pc, #68]	; (8013638 <Display_Main_Interface+0x70>)
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	4b11      	ldr	r3, [pc, #68]	; (801363c <Display_Main_Interface+0x74>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	1c19      	adds	r1, r3, #0
 80135fc:	1c10      	adds	r0, r2, #0
 80135fe:	f7ff fc13 	bl	8012e28 <Display_Main_Interface_Power>
		Display_Main_Interface_Lock(LOCK_UNLOCK);
 8013602:	231c      	movs	r3, #28
 8013604:	18fb      	adds	r3, r7, r3
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	0018      	movs	r0, r3
 801360a:	f7ff fcb9 	bl	8012f80 <Display_Main_Interface_Lock>

		Display_Main_Interface_CV_CC_CP(CV_CC_CP);
 801360e:	1dbb      	adds	r3, r7, #6
 8013610:	781b      	ldrb	r3, [r3, #0]
 8013612:	0018      	movs	r0, r3
 8013614:	f7ff fcd4 	bl	8012fc0 <Display_Main_Interface_CV_CC_CP>
		//Display_Main_Interface_CYCLE_DELAY(CYCLE_NOT_CYCLE, DELAY_NOT_DELAY);
		Display_Main_Interface_ON_OFF(OUTPUT_NOT_OUTPUT);
 8013618:	4b09      	ldr	r3, [pc, #36]	; (8013640 <Display_Main_Interface+0x78>)
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	0018      	movs	r0, r3
 801361e:	f7ff fd01 	bl	8013024 <Display_Main_Interface_ON_OFF>
		Display_Main_Interface_Shift(Shift_NotShift);
 8013622:	2320      	movs	r3, #32
 8013624:	18fb      	adds	r3, r7, r3
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	0018      	movs	r0, r3
 801362a:	f7ff fd1b 	bl	8013064 <Display_Main_Interface_Shift>
		//Display_Vertical_Line_1(44,0,63);

//		Voltage_index++;

}
 801362e:	46c0      	nop			; (mov r8, r8)
 8013630:	46bd      	mov	sp, r7
 8013632:	b004      	add	sp, #16
 8013634:	bd80      	pop	{r7, pc}
 8013636:	46c0      	nop			; (mov r8, r8)
 8013638:	2000399c 	.word	0x2000399c
 801363c:	200039a0 	.word	0x200039a0
 8013640:	20003989 	.word	0x20003989

08013644 <Display_Param_Interface>:

void Display_Param_Interface(const uint16_t Set_Voltage,const uint16_t Set_Current)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b084      	sub	sp, #16
 8013648:	af00      	add	r7, sp, #0
 801364a:	0002      	movs	r2, r0
 801364c:	1dbb      	adds	r3, r7, #6
 801364e:	801a      	strh	r2, [r3, #0]
 8013650:	1d3b      	adds	r3, r7, #4
 8013652:	1c0a      	adds	r2, r1, #0
 8013654:	801a      	strh	r2, [r3, #0]


	float Voltage,Current;
	Voltage=Set_Voltage/100.0;
 8013656:	1dbb      	adds	r3, r7, #6
 8013658:	881b      	ldrh	r3, [r3, #0]
 801365a:	0018      	movs	r0, r3
 801365c:	f7ef fbd2 	bl	8002e04 <__aeabi_i2d>
 8013660:	2200      	movs	r2, #0
 8013662:	4b17      	ldr	r3, [pc, #92]	; (80136c0 <Display_Param_Interface+0x7c>)
 8013664:	f7ee f97a 	bl	800195c <__aeabi_ddiv>
 8013668:	0002      	movs	r2, r0
 801366a:	000b      	movs	r3, r1
 801366c:	0010      	movs	r0, r2
 801366e:	0019      	movs	r1, r3
 8013670:	f7ef fc66 	bl	8002f40 <__aeabi_d2f>
 8013674:	1c03      	adds	r3, r0, #0
 8013676:	60fb      	str	r3, [r7, #12]
	Current=Set_Current/100.0;
 8013678:	1d3b      	adds	r3, r7, #4
 801367a:	881b      	ldrh	r3, [r3, #0]
 801367c:	0018      	movs	r0, r3
 801367e:	f7ef fbc1 	bl	8002e04 <__aeabi_i2d>
 8013682:	2200      	movs	r2, #0
 8013684:	4b0e      	ldr	r3, [pc, #56]	; (80136c0 <Display_Param_Interface+0x7c>)
 8013686:	f7ee f969 	bl	800195c <__aeabi_ddiv>
 801368a:	0002      	movs	r2, r0
 801368c:	000b      	movs	r3, r1
 801368e:	0010      	movs	r0, r2
 8013690:	0019      	movs	r1, r3
 8013692:	f7ef fc55 	bl	8002f40 <__aeabi_d2f>
 8013696:	1c03      	adds	r3, r0, #0
 8013698:	60bb      	str	r3, [r7, #8]
	Display_Main_Interface_Voltage(Voltage);
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	1c18      	adds	r0, r3, #0
 801369e:	f7ff fae3 	bl	8012c68 <Display_Main_Interface_Voltage>
	Display_Main_Interface_Current(Current);
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	1c18      	adds	r0, r3, #0
 80136a6:	f7ff fb4f 	bl	8012d48 <Display_Main_Interface_Current>
	Display_Main_Interface_Power(Voltage,Current);
 80136aa:	68ba      	ldr	r2, [r7, #8]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	1c11      	adds	r1, r2, #0
 80136b0:	1c18      	adds	r0, r3, #0
 80136b2:	f7ff fbb9 	bl	8012e28 <Display_Main_Interface_Power>
}
 80136b6:	46c0      	nop			; (mov r8, r8)
 80136b8:	46bd      	mov	sp, r7
 80136ba:	b004      	add	sp, #16
 80136bc:	bd80      	pop	{r7, pc}
 80136be:	46c0      	nop			; (mov r8, r8)
 80136c0:	40590000 	.word	0x40590000

080136c4 <Display_Access_Interface_Voltage>:
 * @brief  显示存取界面电压值
 * @param  设定的电压值，范围0到99.99V
 * @retval None
 */
static void Display_Access_Interface_Voltage(float Voltage)
{
 80136c4:	b5b0      	push	{r4, r5, r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]

	char string_voltage[7]={0};
 80136cc:	2408      	movs	r4, #8
 80136ce:	193b      	adds	r3, r7, r4
 80136d0:	2200      	movs	r2, #0
 80136d2:	601a      	str	r2, [r3, #0]
 80136d4:	3304      	adds	r3, #4
 80136d6:	2203      	movs	r2, #3
 80136d8:	2100      	movs	r1, #0
 80136da:	0018      	movs	r0, r3
 80136dc:	f001 f809 	bl	80146f2 <memset>
	if(Voltage>=100)      sprintf(string_voltage, "%6.2f", Voltage);
 80136e0:	4931      	ldr	r1, [pc, #196]	; (80137a8 <Display_Access_Interface_Voltage+0xe4>)
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7ec ff16 	bl	8000514 <__aeabi_fcmpge>
 80136e8:	1e03      	subs	r3, r0, #0
 80136ea:	d009      	beq.n	8013700 <Display_Access_Interface_Voltage+0x3c>
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7ef fbdf 	bl	8002eb0 <__aeabi_f2d>
 80136f2:	0002      	movs	r2, r0
 80136f4:	000b      	movs	r3, r1
 80136f6:	492d      	ldr	r1, [pc, #180]	; (80137ac <Display_Access_Interface_Voltage+0xe8>)
 80136f8:	1938      	adds	r0, r7, r4
 80136fa:	f001 fd65 	bl	80151c8 <siprintf>
 80136fe:	e02d      	b.n	801375c <Display_Access_Interface_Voltage+0x98>
	else if(Voltage>=10)
 8013700:	492b      	ldr	r1, [pc, #172]	; (80137b0 <Display_Access_Interface_Voltage+0xec>)
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f7ec ff06 	bl	8000514 <__aeabi_fcmpge>
 8013708:	1e03      	subs	r3, r0, #0
 801370a:	d00f      	beq.n	801372c <Display_Access_Interface_Voltage+0x68>
	{
		string_voltage[0]='0';
 801370c:	2508      	movs	r5, #8
 801370e:	197b      	adds	r3, r7, r5
 8013710:	2230      	movs	r2, #48	; 0x30
 8013712:	701a      	strb	r2, [r3, #0]
		sprintf(&string_voltage[1], "%5.2f", Voltage);
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7ef fbcb 	bl	8002eb0 <__aeabi_f2d>
 801371a:	0002      	movs	r2, r0
 801371c:	000b      	movs	r3, r1
 801371e:	4c25      	ldr	r4, [pc, #148]	; (80137b4 <Display_Access_Interface_Voltage+0xf0>)
 8013720:	1979      	adds	r1, r7, r5
 8013722:	1c48      	adds	r0, r1, #1
 8013724:	0021      	movs	r1, r4
 8013726:	f001 fd4f 	bl	80151c8 <siprintf>
 801372a:	e017      	b.n	801375c <Display_Access_Interface_Voltage+0x98>

	}
	else if(Voltage>=0)
 801372c:	2100      	movs	r1, #0
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f7ec fef0 	bl	8000514 <__aeabi_fcmpge>
 8013734:	1e03      	subs	r3, r0, #0
 8013736:	d011      	beq.n	801375c <Display_Access_Interface_Voltage+0x98>
	{
		string_voltage[0]='0';
 8013738:	2508      	movs	r5, #8
 801373a:	197b      	adds	r3, r7, r5
 801373c:	2230      	movs	r2, #48	; 0x30
 801373e:	701a      	strb	r2, [r3, #0]
		string_voltage[1]='0';
 8013740:	197b      	adds	r3, r7, r5
 8013742:	2230      	movs	r2, #48	; 0x30
 8013744:	705a      	strb	r2, [r3, #1]
		sprintf(&string_voltage[2], "%4.2f", Voltage);
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f7ef fbb2 	bl	8002eb0 <__aeabi_f2d>
 801374c:	0002      	movs	r2, r0
 801374e:	000b      	movs	r3, r1
 8013750:	4c19      	ldr	r4, [pc, #100]	; (80137b8 <Display_Access_Interface_Voltage+0xf4>)
 8013752:	1979      	adds	r1, r7, r5
 8013754:	1c88      	adds	r0, r1, #2
 8013756:	0021      	movs	r1, r4
 8013758:	f001 fd36 	bl	80151c8 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 801375c:	4b17      	ldr	r3, [pc, #92]	; (80137bc <Display_Access_Interface_Voltage+0xf8>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	2b03      	cmp	r3, #3
 8013762:	d110      	bne.n	8013786 <Display_Access_Interface_Voltage+0xc2>
 8013764:	4b15      	ldr	r3, [pc, #84]	; (80137bc <Display_Access_Interface_Voltage+0xf8>)
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	2b02      	cmp	r3, #2
 801376a:	d10c      	bne.n	8013786 <Display_Access_Interface_Voltage+0xc2>
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 801376c:	2308      	movs	r3, #8
 801376e:	18fb      	adds	r3, r7, r3
 8013770:	001a      	movs	r2, r3
 8013772:	2100      	movs	r1, #0
 8013774:	2010      	movs	r0, #16
 8013776:	f7ff f999 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 801377a:	2256      	movs	r2, #86	; 0x56
 801377c:	2118      	movs	r1, #24
 801377e:	2010      	movs	r0, #16
 8013780:	f7ff f950 	bl	8012a24 <Write_Single_16x32AsicII>
 8013784:	e00c      	b.n	80137a0 <Display_Access_Interface_Voltage+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 8013786:	2308      	movs	r3, #8
 8013788:	18fb      	adds	r3, r7, r3
 801378a:	001a      	movs	r2, r3
 801378c:	2100      	movs	r1, #0
 801378e:	2010      	movs	r0, #16
 8013790:	f7ff f98c 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 8013794:	2256      	movs	r2, #86	; 0x56
 8013796:	2118      	movs	r1, #24
 8013798:	2010      	movs	r0, #16
 801379a:	f7ff f943 	bl	8012a24 <Write_Single_16x32AsicII>
	}


}
 801379e:	46c0      	nop			; (mov r8, r8)
 80137a0:	46c0      	nop			; (mov r8, r8)
 80137a2:	46bd      	mov	sp, r7
 80137a4:	b004      	add	sp, #16
 80137a6:	bdb0      	pop	{r4, r5, r7, pc}
 80137a8:	42c80000 	.word	0x42c80000
 80137ac:	080183fc 	.word	0x080183fc
 80137b0:	41200000 	.word	0x41200000
 80137b4:	08018404 	.word	0x08018404
 80137b8:	0801840c 	.word	0x0801840c
 80137bc:	200039f4 	.word	0x200039f4

080137c0 <Display_Access_Interface_Current>:
 * @brief  显示存取界面电流值
 * @param  设定的电流值，范围0到999.99A
 * @retval None
 */
static void Display_Access_Interface_Current(float Current)
{
 80137c0:	b5b0      	push	{r4, r5, r7, lr}
 80137c2:	b084      	sub	sp, #16
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
	char string_current[7]={0};
 80137c8:	2408      	movs	r4, #8
 80137ca:	193b      	adds	r3, r7, r4
 80137cc:	2200      	movs	r2, #0
 80137ce:	601a      	str	r2, [r3, #0]
 80137d0:	3304      	adds	r3, #4
 80137d2:	2203      	movs	r2, #3
 80137d4:	2100      	movs	r1, #0
 80137d6:	0018      	movs	r0, r3
 80137d8:	f000 ff8b 	bl	80146f2 <memset>
	if(Current>=100)      sprintf(string_current, "%6.2f", Current);
 80137dc:	4931      	ldr	r1, [pc, #196]	; (80138a4 <Display_Access_Interface_Current+0xe4>)
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f7ec fe98 	bl	8000514 <__aeabi_fcmpge>
 80137e4:	1e03      	subs	r3, r0, #0
 80137e6:	d009      	beq.n	80137fc <Display_Access_Interface_Current+0x3c>
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ef fb61 	bl	8002eb0 <__aeabi_f2d>
 80137ee:	0002      	movs	r2, r0
 80137f0:	000b      	movs	r3, r1
 80137f2:	492d      	ldr	r1, [pc, #180]	; (80138a8 <Display_Access_Interface_Current+0xe8>)
 80137f4:	1938      	adds	r0, r7, r4
 80137f6:	f001 fce7 	bl	80151c8 <siprintf>
 80137fa:	e02d      	b.n	8013858 <Display_Access_Interface_Current+0x98>
	else if(Current>=10)
 80137fc:	492b      	ldr	r1, [pc, #172]	; (80138ac <Display_Access_Interface_Current+0xec>)
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f7ec fe88 	bl	8000514 <__aeabi_fcmpge>
 8013804:	1e03      	subs	r3, r0, #0
 8013806:	d00f      	beq.n	8013828 <Display_Access_Interface_Current+0x68>
	{
		string_current[0]='0';
 8013808:	2508      	movs	r5, #8
 801380a:	197b      	adds	r3, r7, r5
 801380c:	2230      	movs	r2, #48	; 0x30
 801380e:	701a      	strb	r2, [r3, #0]
		sprintf(&string_current[1], "%5.2f", Current);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7ef fb4d 	bl	8002eb0 <__aeabi_f2d>
 8013816:	0002      	movs	r2, r0
 8013818:	000b      	movs	r3, r1
 801381a:	4c25      	ldr	r4, [pc, #148]	; (80138b0 <Display_Access_Interface_Current+0xf0>)
 801381c:	1979      	adds	r1, r7, r5
 801381e:	1c48      	adds	r0, r1, #1
 8013820:	0021      	movs	r1, r4
 8013822:	f001 fcd1 	bl	80151c8 <siprintf>
 8013826:	e017      	b.n	8013858 <Display_Access_Interface_Current+0x98>

	}
	else if(Current>=0)
 8013828:	2100      	movs	r1, #0
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f7ec fe72 	bl	8000514 <__aeabi_fcmpge>
 8013830:	1e03      	subs	r3, r0, #0
 8013832:	d011      	beq.n	8013858 <Display_Access_Interface_Current+0x98>
	{
		string_current[0]='0';
 8013834:	2508      	movs	r5, #8
 8013836:	197b      	adds	r3, r7, r5
 8013838:	2230      	movs	r2, #48	; 0x30
 801383a:	701a      	strb	r2, [r3, #0]
		string_current[1]='0';
 801383c:	197b      	adds	r3, r7, r5
 801383e:	2230      	movs	r2, #48	; 0x30
 8013840:	705a      	strb	r2, [r3, #1]
		sprintf(&string_current[2], "%4.2f", Current);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7ef fb34 	bl	8002eb0 <__aeabi_f2d>
 8013848:	0002      	movs	r2, r0
 801384a:	000b      	movs	r3, r1
 801384c:	4c19      	ldr	r4, [pc, #100]	; (80138b4 <Display_Access_Interface_Current+0xf4>)
 801384e:	1979      	adds	r1, r7, r5
 8013850:	1c88      	adds	r0, r1, #2
 8013852:	0021      	movs	r1, r4
 8013854:	f001 fcb8 	bl	80151c8 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 8013858:	4b17      	ldr	r3, [pc, #92]	; (80138b8 <Display_Access_Interface_Current+0xf8>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	2b03      	cmp	r3, #3
 801385e:	d110      	bne.n	8013882 <Display_Access_Interface_Current+0xc2>
 8013860:	4b15      	ldr	r3, [pc, #84]	; (80138b8 <Display_Access_Interface_Current+0xf8>)
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	2b02      	cmp	r3, #2
 8013866:	d10c      	bne.n	8013882 <Display_Access_Interface_Current+0xc2>
	{
		Write_String_16x32AsicII(16,36,string_current);
 8013868:	2308      	movs	r3, #8
 801386a:	18fb      	adds	r3, r7, r3
 801386c:	001a      	movs	r2, r3
 801386e:	2124      	movs	r1, #36	; 0x24
 8013870:	2010      	movs	r0, #16
 8013872:	f7ff f91b 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013876:	2241      	movs	r2, #65	; 0x41
 8013878:	213c      	movs	r1, #60	; 0x3c
 801387a:	2010      	movs	r0, #16
 801387c:	f7ff f8d2 	bl	8012a24 <Write_Single_16x32AsicII>
 8013880:	e00c      	b.n	801389c <Display_Access_Interface_Current+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,36,string_current);
 8013882:	2308      	movs	r3, #8
 8013884:	18fb      	adds	r3, r7, r3
 8013886:	001a      	movs	r2, r3
 8013888:	2124      	movs	r1, #36	; 0x24
 801388a:	2010      	movs	r0, #16
 801388c:	f7ff f90e 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013890:	2241      	movs	r2, #65	; 0x41
 8013892:	213c      	movs	r1, #60	; 0x3c
 8013894:	2010      	movs	r0, #16
 8013896:	f7ff f8c5 	bl	8012a24 <Write_Single_16x32AsicII>
	}

}
 801389a:	46c0      	nop			; (mov r8, r8)
 801389c:	46c0      	nop			; (mov r8, r8)
 801389e:	46bd      	mov	sp, r7
 80138a0:	b004      	add	sp, #16
 80138a2:	bdb0      	pop	{r4, r5, r7, pc}
 80138a4:	42c80000 	.word	0x42c80000
 80138a8:	080183fc 	.word	0x080183fc
 80138ac:	41200000 	.word	0x41200000
 80138b0:	08018404 	.word	0x08018404
 80138b4:	0801840c 	.word	0x0801840c
 80138b8:	200039f4 	.word	0x200039f4

080138bc <Display_Access_Interface_Save>:
	}

}

void Display_Access_Interface_Save(void)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"SAVE  ");
 80138c2:	4b1d      	ldr	r3, [pc, #116]	; (8013938 <Display_Access_Interface_Save+0x7c>)
 80138c4:	001a      	movs	r2, r3
 80138c6:	2124      	movs	r1, #36	; 0x24
 80138c8:	2030      	movs	r0, #48	; 0x30
 80138ca:	f7ff f86d 	bl	80129a8 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 80138ce:	4b1b      	ldr	r3, [pc, #108]	; (801393c <Display_Access_Interface_Save+0x80>)
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	2b09      	cmp	r3, #9
 80138d4:	d80e      	bhi.n	80138f4 <Display_Access_Interface_Save+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 80138d6:	2230      	movs	r2, #48	; 0x30
 80138d8:	213c      	movs	r1, #60	; 0x3c
 80138da:	2030      	movs	r0, #48	; 0x30
 80138dc:	f7ff f820 	bl	8012920 <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 80138e0:	4b16      	ldr	r3, [pc, #88]	; (801393c <Display_Access_Interface_Save+0x80>)
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	3330      	adds	r3, #48	; 0x30
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	001a      	movs	r2, r3
 80138ea:	213e      	movs	r1, #62	; 0x3e
 80138ec:	2030      	movs	r0, #48	; 0x30
 80138ee:	f7ff f817 	bl	8012920 <Write_Single_8x16AsicII>
 80138f2:	e008      	b.n	8013906 <Display_Access_Interface_Save+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 80138f4:	4b11      	ldr	r3, [pc, #68]	; (801393c <Display_Access_Interface_Save+0x80>)
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	3330      	adds	r3, #48	; 0x30
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	001a      	movs	r2, r3
 80138fe:	213c      	movs	r1, #60	; 0x3c
 8013900:	2030      	movs	r0, #48	; 0x30
 8013902:	f7ff f80d 	bl	8012920 <Write_Single_8x16AsicII>



	float voltage=String_To_Float(String_Save_V);
 8013906:	4b0e      	ldr	r3, [pc, #56]	; (8013940 <Display_Access_Interface_Save+0x84>)
 8013908:	0018      	movs	r0, r3
 801390a:	f7fa fe53 	bl	800e5b4 <String_To_Float>
 801390e:	1c03      	adds	r3, r0, #0
 8013910:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	1c18      	adds	r0, r3, #0
 8013916:	f7ff fed5 	bl	80136c4 <Display_Access_Interface_Voltage>


	float current=String_To_Float(String_Save_I);
 801391a:	4b0a      	ldr	r3, [pc, #40]	; (8013944 <Display_Access_Interface_Save+0x88>)
 801391c:	0018      	movs	r0, r3
 801391e:	f7fa fe49 	bl	800e5b4 <String_To_Float>
 8013922:	1c03      	adds	r3, r0, #0
 8013924:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	1c18      	adds	r0, r3, #0
 801392a:	f7ff ff49 	bl	80137c0 <Display_Access_Interface_Current>


}
 801392e:	46c0      	nop			; (mov r8, r8)
 8013930:	46bd      	mov	sp, r7
 8013932:	b002      	add	sp, #8
 8013934:	bd80      	pop	{r7, pc}
 8013936:	46c0      	nop			; (mov r8, r8)
 8013938:	080184b8 	.word	0x080184b8
 801393c:	2000398d 	.word	0x2000398d
 8013940:	2000301c 	.word	0x2000301c
 8013944:	20003028 	.word	0x20003028

08013948 <Display_Access_Interface_Recall>:
void Display_Access_Interface_Recall(void)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"RECALL");
 801394e:	4b2f      	ldr	r3, [pc, #188]	; (8013a0c <Display_Access_Interface_Recall+0xc4>)
 8013950:	001a      	movs	r2, r3
 8013952:	2124      	movs	r1, #36	; 0x24
 8013954:	2030      	movs	r0, #48	; 0x30
 8013956:	f7ff f827 	bl	80129a8 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 801395a:	4b2d      	ldr	r3, [pc, #180]	; (8013a10 <Display_Access_Interface_Recall+0xc8>)
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	2b09      	cmp	r3, #9
 8013960:	d80e      	bhi.n	8013980 <Display_Access_Interface_Recall+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 8013962:	2230      	movs	r2, #48	; 0x30
 8013964:	213c      	movs	r1, #60	; 0x3c
 8013966:	2030      	movs	r0, #48	; 0x30
 8013968:	f7fe ffda 	bl	8012920 <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 801396c:	4b28      	ldr	r3, [pc, #160]	; (8013a10 <Display_Access_Interface_Recall+0xc8>)
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	3330      	adds	r3, #48	; 0x30
 8013972:	b2db      	uxtb	r3, r3
 8013974:	001a      	movs	r2, r3
 8013976:	213e      	movs	r1, #62	; 0x3e
 8013978:	2030      	movs	r0, #48	; 0x30
 801397a:	f7fe ffd1 	bl	8012920 <Write_Single_8x16AsicII>
 801397e:	e008      	b.n	8013992 <Display_Access_Interface_Recall+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 8013980:	4b23      	ldr	r3, [pc, #140]	; (8013a10 <Display_Access_Interface_Recall+0xc8>)
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	3330      	adds	r3, #48	; 0x30
 8013986:	b2db      	uxtb	r3, r3
 8013988:	001a      	movs	r2, r3
 801398a:	213c      	movs	r1, #60	; 0x3c
 801398c:	2030      	movs	r0, #48	; 0x30
 801398e:	f7fe ffc7 	bl	8012920 <Write_Single_8x16AsicII>


	//float voltage=String_To_Float(String_Recall_V);
	xyz.coordinates3=1;
 8013992:	4b20      	ldr	r3, [pc, #128]	; (8013a14 <Display_Access_Interface_Recall+0xcc>)
 8013994:	2201      	movs	r2, #1
 8013996:	609a      	str	r2, [r3, #8]
	float voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 8013998:	4b1d      	ldr	r3, [pc, #116]	; (8013a10 <Display_Access_Interface_Recall+0xc8>)
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	0018      	movs	r0, r3
 801399e:	f7f8 fce7 	bl	800c370 <AT25_Save_Recall_Recall_VI>
 80139a2:	0003      	movs	r3, r0
 80139a4:	0018      	movs	r0, r3
 80139a6:	f7ef fa2d 	bl	8002e04 <__aeabi_i2d>
 80139aa:	2200      	movs	r2, #0
 80139ac:	4b1a      	ldr	r3, [pc, #104]	; (8013a18 <Display_Access_Interface_Recall+0xd0>)
 80139ae:	f7ed ffd5 	bl	800195c <__aeabi_ddiv>
 80139b2:	0002      	movs	r2, r0
 80139b4:	000b      	movs	r3, r1
 80139b6:	0010      	movs	r0, r2
 80139b8:	0019      	movs	r1, r3
 80139ba:	f7ef fac1 	bl	8002f40 <__aeabi_d2f>
 80139be:	1c03      	adds	r3, r0, #0
 80139c0:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	1c18      	adds	r0, r3, #0
 80139c6:	f7ff fe7d 	bl	80136c4 <Display_Access_Interface_Voltage>

	xyz.coordinates3=2;
 80139ca:	4b12      	ldr	r3, [pc, #72]	; (8013a14 <Display_Access_Interface_Recall+0xcc>)
 80139cc:	2202      	movs	r2, #2
 80139ce:	609a      	str	r2, [r3, #8]
	//float current=String_To_Float(String_Recall_I);
	float current=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 80139d0:	4b0f      	ldr	r3, [pc, #60]	; (8013a10 <Display_Access_Interface_Recall+0xc8>)
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	0018      	movs	r0, r3
 80139d6:	f7f8 fccb 	bl	800c370 <AT25_Save_Recall_Recall_VI>
 80139da:	0003      	movs	r3, r0
 80139dc:	0018      	movs	r0, r3
 80139de:	f7ef fa11 	bl	8002e04 <__aeabi_i2d>
 80139e2:	2200      	movs	r2, #0
 80139e4:	4b0c      	ldr	r3, [pc, #48]	; (8013a18 <Display_Access_Interface_Recall+0xd0>)
 80139e6:	f7ed ffb9 	bl	800195c <__aeabi_ddiv>
 80139ea:	0002      	movs	r2, r0
 80139ec:	000b      	movs	r3, r1
 80139ee:	0010      	movs	r0, r2
 80139f0:	0019      	movs	r1, r3
 80139f2:	f7ef faa5 	bl	8002f40 <__aeabi_d2f>
 80139f6:	1c03      	adds	r3, r0, #0
 80139f8:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	1c18      	adds	r0, r3, #0
 80139fe:	f7ff fedf 	bl	80137c0 <Display_Access_Interface_Current>

}
 8013a02:	46c0      	nop			; (mov r8, r8)
 8013a04:	46bd      	mov	sp, r7
 8013a06:	b002      	add	sp, #8
 8013a08:	bd80      	pop	{r7, pc}
 8013a0a:	46c0      	nop			; (mov r8, r8)
 8013a0c:	080184a8 	.word	0x080184a8
 8013a10:	2000398d 	.word	0x2000398d
 8013a14:	200039f4 	.word	0x200039f4
 8013a18:	40590000 	.word	0x40590000

08013a1c <Display_Menu_Function_Interface_First_Menu>:
  * @brief  显示一级菜单界面
  * @param  一级菜单的功能
  * @retval None
  */
void Display_Menu_Function_Interface_First_Menu(int Selection)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]

	Write_String_8x16AsicII(0,0,"FUNCTION");
 8013a24:	4b25      	ldr	r3, [pc, #148]	; (8013abc <Display_Menu_Function_Interface_First_Menu+0xa0>)
 8013a26:	001a      	movs	r2, r3
 8013a28:	2100      	movs	r1, #0
 8013a2a:	2000      	movs	r0, #0
 8013a2c:	f7fe ffbc 	bl	80129a8 <Write_String_8x16AsicII>
	switch(Selection)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2b08      	cmp	r3, #8
 8013a34:	d83d      	bhi.n	8013ab2 <Display_Menu_Function_Interface_First_Menu+0x96>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	009a      	lsls	r2, r3, #2
 8013a3a:	4b21      	ldr	r3, [pc, #132]	; (8013ac0 <Display_Menu_Function_Interface_First_Menu+0xa4>)
 8013a3c:	18d3      	adds	r3, r2, r3
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	469f      	mov	pc, r3
	{
		case 1:
			{
				Write_String_16x32AsicII(16,24,"SYSTEM     ");
 8013a42:	4b20      	ldr	r3, [pc, #128]	; (8013ac4 <Display_Menu_Function_Interface_First_Menu+0xa8>)
 8013a44:	001a      	movs	r2, r3
 8013a46:	2118      	movs	r1, #24
 8013a48:	2010      	movs	r0, #16
 8013a4a:	f7ff f82f 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013a4e:	e031      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 2:
			{
				Write_String_16x32AsicII(16,24,"SLOPE      ");
 8013a50:	4b1d      	ldr	r3, [pc, #116]	; (8013ac8 <Display_Menu_Function_Interface_First_Menu+0xac>)
 8013a52:	001a      	movs	r2, r3
 8013a54:	2118      	movs	r1, #24
 8013a56:	2010      	movs	r0, #16
 8013a58:	f7ff f828 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013a5c:	e02a      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 3:
			{
				Write_String_16x32AsicII(16,24,"RS232       ");
 8013a5e:	4b1b      	ldr	r3, [pc, #108]	; (8013acc <Display_Menu_Function_Interface_First_Menu+0xb0>)
 8013a60:	001a      	movs	r2, r3
 8013a62:	2118      	movs	r1, #24
 8013a64:	2010      	movs	r0, #16
 8013a66:	f7ff f821 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013a6a:	e023      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 4:
			{
				Write_String_16x32AsicII(16,24,"TIMER       ");
 8013a6c:	4b18      	ldr	r3, [pc, #96]	; (8013ad0 <Display_Menu_Function_Interface_First_Menu+0xb4>)
 8013a6e:	001a      	movs	r2, r3
 8013a70:	2118      	movs	r1, #24
 8013a72:	2010      	movs	r0, #16
 8013a74:	f7ff f81a 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013a78:	e01c      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 5:
			{
				Write_String_16x32AsicII(16,24,"AD SET      ");
 8013a7a:	4b16      	ldr	r3, [pc, #88]	; (8013ad4 <Display_Menu_Function_Interface_First_Menu+0xb8>)
 8013a7c:	001a      	movs	r2, r3
 8013a7e:	2118      	movs	r1, #24
 8013a80:	2010      	movs	r0, #16
 8013a82:	f7ff f813 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013a86:	e015      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 6:
			{
				Write_String_16x32AsicII(16,18,"LIGHT TEMP  ");
 8013a88:	4b13      	ldr	r3, [pc, #76]	; (8013ad8 <Display_Menu_Function_Interface_First_Menu+0xbc>)
 8013a8a:	001a      	movs	r2, r3
 8013a8c:	2112      	movs	r1, #18
 8013a8e:	2010      	movs	r0, #16
 8013a90:	f7ff f80c 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013a94:	e00e      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 7:
			{
				Write_String_16x32AsicII(16,18,"PROTECT     ");
 8013a96:	4b11      	ldr	r3, [pc, #68]	; (8013adc <Display_Menu_Function_Interface_First_Menu+0xc0>)
 8013a98:	001a      	movs	r2, r3
 8013a9a:	2112      	movs	r1, #18
 8013a9c:	2010      	movs	r0, #16
 8013a9e:	f7ff f805 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013aa2:	e007      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 8:
			{
				Write_String_16x32AsicII(16,18,"CALIRRATION ");
 8013aa4:	4b0e      	ldr	r3, [pc, #56]	; (8013ae0 <Display_Menu_Function_Interface_First_Menu+0xc4>)
 8013aa6:	001a      	movs	r2, r3
 8013aa8:	2112      	movs	r1, #18
 8013aaa:	2010      	movs	r0, #16
 8013aac:	f7fe fffe 	bl	8012aac <Write_String_16x32AsicII>
				break;
 8013ab0:	e000      	b.n	8013ab4 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		default :break;
 8013ab2:	46c0      	nop			; (mov r8, r8)
	}
}
 8013ab4:	46c0      	nop			; (mov r8, r8)
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	b002      	add	sp, #8
 8013aba:	bd80      	pop	{r7, pc}
 8013abc:	080184c0 	.word	0x080184c0
 8013ac0:	08018a54 	.word	0x08018a54
 8013ac4:	080184cc 	.word	0x080184cc
 8013ac8:	080184d8 	.word	0x080184d8
 8013acc:	080184e4 	.word	0x080184e4
 8013ad0:	080184f4 	.word	0x080184f4
 8013ad4:	08018504 	.word	0x08018504
 8013ad8:	08018514 	.word	0x08018514
 8013adc:	08018524 	.word	0x08018524
 8013ae0:	08018534 	.word	0x08018534

08013ae4 <second_munu_system>:
/*----------------------------------------------------------------------------------------------二级界面部分-----------------------------------------------------------------------------------------------------*/

static void second_munu_system(int z)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
	Write_String_16x32AsicII(16,24,"RESET");
 8013aec:	4b07      	ldr	r3, [pc, #28]	; (8013b0c <second_munu_system+0x28>)
 8013aee:	001a      	movs	r2, r3
 8013af0:	2118      	movs	r1, #24
 8013af2:	2010      	movs	r0, #16
 8013af4:	f7fe ffda 	bl	8012aac <Write_String_16x32AsicII>
	if(z==1)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d102      	bne.n	8013b04 <second_munu_system+0x20>
	{
		Cursor_flash_off();
 8013afe:	f000 fcb1 	bl	8014464 <Cursor_flash_off>
		return;
 8013b02:	46c0      	nop			; (mov r8, r8)
	}
	else if(z==2);

}
 8013b04:	46bd      	mov	sp, r7
 8013b06:	b002      	add	sp, #8
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	46c0      	nop			; (mov r8, r8)
 8013b0c:	08018544 	.word	0x08018544

08013b10 <second_munu_slope>:

static void second_munu_slope(int z)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 8013b18:	f000 fcda 	bl	80144d0 <Cursor_flash_on>
	if(z==1)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2b01      	cmp	r3, #1
 8013b20:	d10c      	bne.n	8013b3c <second_munu_slope+0x2c>
	{
		Write_String_16x32AsicII(16,0,"IRate");
 8013b22:	4b10      	ldr	r3, [pc, #64]	; (8013b64 <second_munu_slope+0x54>)
 8013b24:	001a      	movs	r2, r3
 8013b26:	2100      	movs	r1, #0
 8013b28:	2010      	movs	r0, #16
 8013b2a:	f7fe ffbf 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_I_Rate);//显示清空后的输入值
 8013b2e:	4b0e      	ldr	r3, [pc, #56]	; (8013b68 <second_munu_slope+0x58>)
 8013b30:	001a      	movs	r2, r3
 8013b32:	2118      	movs	r1, #24
 8013b34:	2010      	movs	r0, #16
 8013b36:	f7fe ffb9 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,0,"VRate");
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值

	}

}
 8013b3a:	e00e      	b.n	8013b5a <second_munu_slope+0x4a>
	else if(z==2)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2b02      	cmp	r3, #2
 8013b40:	d10b      	bne.n	8013b5a <second_munu_slope+0x4a>
		Write_String_16x32AsicII(16,0,"VRate");
 8013b42:	4b0a      	ldr	r3, [pc, #40]	; (8013b6c <second_munu_slope+0x5c>)
 8013b44:	001a      	movs	r2, r3
 8013b46:	2100      	movs	r1, #0
 8013b48:	2010      	movs	r0, #16
 8013b4a:	f7fe ffaf 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值
 8013b4e:	4b08      	ldr	r3, [pc, #32]	; (8013b70 <second_munu_slope+0x60>)
 8013b50:	001a      	movs	r2, r3
 8013b52:	2118      	movs	r1, #24
 8013b54:	2010      	movs	r0, #16
 8013b56:	f7fe ffa9 	bl	8012aac <Write_String_16x32AsicII>
}
 8013b5a:	46c0      	nop			; (mov r8, r8)
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	b002      	add	sp, #8
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	46c0      	nop			; (mov r8, r8)
 8013b64:	0801854c 	.word	0x0801854c
 8013b68:	20003040 	.word	0x20003040
 8013b6c:	08018554 	.word	0x08018554
 8013b70:	2000304c 	.word	0x2000304c

08013b74 <second_munu_RS232>:

static void second_munu_RS232(int z)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b082      	sub	sp, #8
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
	Cursor_flash_off();
 8013b7c:	f000 fc72 	bl	8014464 <Cursor_flash_off>
	Write_String_16x32AsicII(16,0,"BaudRate");
 8013b80:	4b09      	ldr	r3, [pc, #36]	; (8013ba8 <second_munu_RS232+0x34>)
 8013b82:	001a      	movs	r2, r3
 8013b84:	2100      	movs	r1, #0
 8013b86:	2010      	movs	r0, #16
 8013b88:	f7fe ff90 	bl	8012aac <Write_String_16x32AsicII>

	if(z==1) 	  Write_String_16x32AsicII(16,36,String_RS232_Rate);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2b01      	cmp	r3, #1
 8013b90:	d105      	bne.n	8013b9e <second_munu_RS232+0x2a>
 8013b92:	4b06      	ldr	r3, [pc, #24]	; (8013bac <second_munu_RS232+0x38>)
 8013b94:	001a      	movs	r2, r3
 8013b96:	2124      	movs	r1, #36	; 0x24
 8013b98:	2010      	movs	r0, #16
 8013b9a:	f7fe ff87 	bl	8012aac <Write_String_16x32AsicII>
	else if(z==2);
}
 8013b9e:	46c0      	nop			; (mov r8, r8)
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	b002      	add	sp, #8
 8013ba4:	bd80      	pop	{r7, pc}
 8013ba6:	46c0      	nop			; (mov r8, r8)
 8013ba8:	0801855c 	.word	0x0801855c
 8013bac:	20003034 	.word	0x20003034

08013bb0 <second_menu_timer>:

static void second_menu_timer(int z)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b082      	sub	sp, #8
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 8013bb8:	f000 fc8a 	bl	80144d0 <Cursor_flash_on>
	if(z==1)
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d10c      	bne.n	8013bdc <second_menu_timer+0x2c>
	{
		Write_String_16x32AsicII(16,0,"delay ");
 8013bc2:	4b18      	ldr	r3, [pc, #96]	; (8013c24 <second_menu_timer+0x74>)
 8013bc4:	001a      	movs	r2, r3
 8013bc6:	2100      	movs	r1, #0
 8013bc8:	2010      	movs	r0, #16
 8013bca:	f7fe ff6f 	bl	8012aac <Write_String_16x32AsicII>

		Write_String_16x32AsicII(16,24, String_Delay);//显示输入值
 8013bce:	4b16      	ldr	r3, [pc, #88]	; (8013c28 <second_menu_timer+0x78>)
 8013bd0:	001a      	movs	r2, r3
 8013bd2:	2118      	movs	r1, #24
 8013bd4:	2010      	movs	r0, #16
 8013bd6:	f7fe ff69 	bl	8012aac <Write_String_16x32AsicII>
	else if(z==3)
	{
		Write_String_16x32AsicII(16,0,"Toff  ");
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
	}
}
 8013bda:	e01e      	b.n	8013c1a <second_menu_timer+0x6a>
	else if(z==2)
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b02      	cmp	r3, #2
 8013be0:	d10c      	bne.n	8013bfc <second_menu_timer+0x4c>
		Write_String_16x32AsicII(16,0,"Ton   ");
 8013be2:	4b12      	ldr	r3, [pc, #72]	; (8013c2c <second_menu_timer+0x7c>)
 8013be4:	001a      	movs	r2, r3
 8013be6:	2100      	movs	r1, #0
 8013be8:	2010      	movs	r0, #16
 8013bea:	f7fe ff5f 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_On);//显示输入值
 8013bee:	4b10      	ldr	r3, [pc, #64]	; (8013c30 <second_menu_timer+0x80>)
 8013bf0:	001a      	movs	r2, r3
 8013bf2:	2118      	movs	r1, #24
 8013bf4:	2010      	movs	r0, #16
 8013bf6:	f7fe ff59 	bl	8012aac <Write_String_16x32AsicII>
}
 8013bfa:	e00e      	b.n	8013c1a <second_menu_timer+0x6a>
	else if(z==3)
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2b03      	cmp	r3, #3
 8013c00:	d10b      	bne.n	8013c1a <second_menu_timer+0x6a>
		Write_String_16x32AsicII(16,0,"Toff  ");
 8013c02:	4b0c      	ldr	r3, [pc, #48]	; (8013c34 <second_menu_timer+0x84>)
 8013c04:	001a      	movs	r2, r3
 8013c06:	2100      	movs	r1, #0
 8013c08:	2010      	movs	r0, #16
 8013c0a:	f7fe ff4f 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
 8013c0e:	4b0a      	ldr	r3, [pc, #40]	; (8013c38 <second_menu_timer+0x88>)
 8013c10:	001a      	movs	r2, r3
 8013c12:	2118      	movs	r1, #24
 8013c14:	2010      	movs	r0, #16
 8013c16:	f7fe ff49 	bl	8012aac <Write_String_16x32AsicII>
}
 8013c1a:	46c0      	nop			; (mov r8, r8)
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	b002      	add	sp, #8
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	46c0      	nop			; (mov r8, r8)
 8013c24:	08018568 	.word	0x08018568
 8013c28:	20003010 	.word	0x20003010
 8013c2c:	08018570 	.word	0x08018570
 8013c30:	20002ff8 	.word	0x20002ff8
 8013c34:	08018578 	.word	0x08018578
 8013c38:	20003004 	.word	0x20003004

08013c3c <second_menu_AD>:

static void second_menu_AD(int z)
{
 8013c3c:	b590      	push	{r4, r7, lr}
 8013c3e:	b087      	sub	sp, #28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d138      	bne.n	8013cbc <second_menu_AD+0x80>
	{
		Cursor_flash_on();
 8013c4a:	f000 fc41 	bl	80144d0 <Cursor_flash_on>
		/*输入密码界面*/
		Write_String_16x32AsicII(16,0, "INPUT:");
 8013c4e:	4b50      	ldr	r3, [pc, #320]	; (8013d90 <second_menu_AD+0x154>)
 8013c50:	001a      	movs	r2, r3
 8013c52:	2100      	movs	r1, #0
 8013c54:	2010      	movs	r0, #16
 8013c56:	f7fe ff29 	bl	8012aac <Write_String_16x32AsicII>
		if(Shift_Not_Shift == Shift)//显示输入的密码
 8013c5a:	4b4e      	ldr	r3, [pc, #312]	; (8013d94 <second_menu_AD+0x158>)
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	d106      	bne.n	8013c70 <second_menu_AD+0x34>
		{
			Write_String_16x32AsicII(16,24, String_Password);
 8013c62:	4b4d      	ldr	r3, [pc, #308]	; (8013d98 <second_menu_AD+0x15c>)
 8013c64:	001a      	movs	r2, r3
 8013c66:	2118      	movs	r1, #24
 8013c68:	2010      	movs	r0, #16
 8013c6a:	f7fe ff1f 	bl	8012aac <Write_String_16x32AsicII>
 8013c6e:	e025      	b.n	8013cbc <second_menu_AD+0x80>
		}
		else if(Shift_Not_Shift == Not_Shift)
 8013c70:	4b48      	ldr	r3, [pc, #288]	; (8013d94 <second_menu_AD+0x158>)
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d121      	bne.n	8013cbc <second_menu_AD+0x80>
		{
			for(uint8_t i=0;i<6;i++)
 8013c78:	2317      	movs	r3, #23
 8013c7a:	18fb      	adds	r3, r7, r3
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	701a      	strb	r2, [r3, #0]
 8013c80:	e011      	b.n	8013ca6 <second_menu_AD+0x6a>
			{
				if(String_Password[i]!=' ')	String_Password_mask[i]='*';
 8013c82:	2117      	movs	r1, #23
 8013c84:	187b      	adds	r3, r7, r1
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	4a43      	ldr	r2, [pc, #268]	; (8013d98 <second_menu_AD+0x15c>)
 8013c8a:	5cd3      	ldrb	r3, [r2, r3]
 8013c8c:	2b20      	cmp	r3, #32
 8013c8e:	d004      	beq.n	8013c9a <second_menu_AD+0x5e>
 8013c90:	187b      	adds	r3, r7, r1
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	4a41      	ldr	r2, [pc, #260]	; (8013d9c <second_menu_AD+0x160>)
 8013c96:	212a      	movs	r1, #42	; 0x2a
 8013c98:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0;i<6;i++)
 8013c9a:	2117      	movs	r1, #23
 8013c9c:	187b      	adds	r3, r7, r1
 8013c9e:	781a      	ldrb	r2, [r3, #0]
 8013ca0:	187b      	adds	r3, r7, r1
 8013ca2:	3201      	adds	r2, #1
 8013ca4:	701a      	strb	r2, [r3, #0]
 8013ca6:	2317      	movs	r3, #23
 8013ca8:	18fb      	adds	r3, r7, r3
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	2b05      	cmp	r3, #5
 8013cae:	d9e8      	bls.n	8013c82 <second_menu_AD+0x46>
			}
			Write_String_16x32AsicII(16,24, String_Password_mask);
 8013cb0:	4b3a      	ldr	r3, [pc, #232]	; (8013d9c <second_menu_AD+0x160>)
 8013cb2:	001a      	movs	r2, r3
 8013cb4:	2118      	movs	r1, #24
 8013cb6:	2010      	movs	r0, #16
 8013cb8:	f7fe fef8 	bl	8012aac <Write_String_16x32AsicII>

		}


	}
	if(z==2)
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2b02      	cmp	r3, #2
 8013cc0:	d162      	bne.n	8013d88 <second_menu_AD+0x14c>
	{

		Write_String_8x16AsicII(0,0,"GainV:");
 8013cc2:	4b37      	ldr	r3, [pc, #220]	; (8013da0 <second_menu_AD+0x164>)
 8013cc4:	001a      	movs	r2, r3
 8013cc6:	2100      	movs	r1, #0
 8013cc8:	2000      	movs	r0, #0
 8013cca:	f7fe fe6d 	bl	80129a8 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(16,0,"GainI:");
 8013cce:	4b35      	ldr	r3, [pc, #212]	; (8013da4 <second_menu_AD+0x168>)
 8013cd0:	001a      	movs	r2, r3
 8013cd2:	2100      	movs	r1, #0
 8013cd4:	2010      	movs	r0, #16
 8013cd6:	f7fe fe67 	bl	80129a8 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(32,0,"interceptV:");
 8013cda:	4b33      	ldr	r3, [pc, #204]	; (8013da8 <second_menu_AD+0x16c>)
 8013cdc:	001a      	movs	r2, r3
 8013cde:	2100      	movs	r1, #0
 8013ce0:	2020      	movs	r0, #32
 8013ce2:	f7fe fe61 	bl	80129a8 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(48,0,"interceptI:");
 8013ce6:	4b31      	ldr	r3, [pc, #196]	; (8013dac <second_menu_AD+0x170>)
 8013ce8:	001a      	movs	r2, r3
 8013cea:	2100      	movs	r1, #0
 8013cec:	2030      	movs	r0, #48	; 0x30
 8013cee:	f7fe fe5b 	bl	80129a8 <Write_String_8x16AsicII>
		char String[9]={'0','0','.','0','0','0','0','0'};
 8013cf2:	240c      	movs	r4, #12
 8013cf4:	193b      	adds	r3, r7, r4
 8013cf6:	4a2e      	ldr	r2, [pc, #184]	; (8013db0 <second_menu_AD+0x174>)
 8013cf8:	ca03      	ldmia	r2!, {r0, r1}
 8013cfa:	c303      	stmia	r3!, {r0, r1}
 8013cfc:	7812      	ldrb	r2, [r2, #0]
 8013cfe:	701a      	strb	r2, [r3, #0]

		sprintf(String, "%6.5f", ADC_Gain_V);//将float转为string，数据长度为6，保留两位小数
 8013d00:	4b2c      	ldr	r3, [pc, #176]	; (8013db4 <second_menu_AD+0x178>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	1c18      	adds	r0, r3, #0
 8013d06:	f7ef f8d3 	bl	8002eb0 <__aeabi_f2d>
 8013d0a:	0002      	movs	r2, r0
 8013d0c:	000b      	movs	r3, r1
 8013d0e:	492a      	ldr	r1, [pc, #168]	; (8013db8 <second_menu_AD+0x17c>)
 8013d10:	1938      	adds	r0, r7, r4
 8013d12:	f001 fa59 	bl	80151c8 <siprintf>
		Write_String_8x16AsicII(0,26, String);
 8013d16:	193b      	adds	r3, r7, r4
 8013d18:	001a      	movs	r2, r3
 8013d1a:	211a      	movs	r1, #26
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	f7fe fe43 	bl	80129a8 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", ADC_Gain_I);//将float转为string，数据长度为6，保留两位小数
 8013d22:	4b26      	ldr	r3, [pc, #152]	; (8013dbc <second_menu_AD+0x180>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	1c18      	adds	r0, r3, #0
 8013d28:	f7ef f8c2 	bl	8002eb0 <__aeabi_f2d>
 8013d2c:	0002      	movs	r2, r0
 8013d2e:	000b      	movs	r3, r1
 8013d30:	4921      	ldr	r1, [pc, #132]	; (8013db8 <second_menu_AD+0x17c>)
 8013d32:	1938      	adds	r0, r7, r4
 8013d34:	f001 fa48 	bl	80151c8 <siprintf>
		Write_String_8x16AsicII(16,26, String);
 8013d38:	193b      	adds	r3, r7, r4
 8013d3a:	001a      	movs	r2, r3
 8013d3c:	211a      	movs	r1, #26
 8013d3e:	2010      	movs	r0, #16
 8013d40:	f7fe fe32 	bl	80129a8 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_V);//将float转为string，数据长度为6，保留两位小数
 8013d44:	4b1e      	ldr	r3, [pc, #120]	; (8013dc0 <second_menu_AD+0x184>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	1c18      	adds	r0, r3, #0
 8013d4a:	f7ef f8b1 	bl	8002eb0 <__aeabi_f2d>
 8013d4e:	0002      	movs	r2, r0
 8013d50:	000b      	movs	r3, r1
 8013d52:	4919      	ldr	r1, [pc, #100]	; (8013db8 <second_menu_AD+0x17c>)
 8013d54:	1938      	adds	r0, r7, r4
 8013d56:	f001 fa37 	bl	80151c8 <siprintf>
		Write_String_8x16AsicII(32,26, String);
 8013d5a:	193b      	adds	r3, r7, r4
 8013d5c:	001a      	movs	r2, r3
 8013d5e:	211a      	movs	r1, #26
 8013d60:	2020      	movs	r0, #32
 8013d62:	f7fe fe21 	bl	80129a8 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_I);//将float转为string，数据长度为6，保留两位小数
 8013d66:	4b17      	ldr	r3, [pc, #92]	; (8013dc4 <second_menu_AD+0x188>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	1c18      	adds	r0, r3, #0
 8013d6c:	f7ef f8a0 	bl	8002eb0 <__aeabi_f2d>
 8013d70:	0002      	movs	r2, r0
 8013d72:	000b      	movs	r3, r1
 8013d74:	4910      	ldr	r1, [pc, #64]	; (8013db8 <second_menu_AD+0x17c>)
 8013d76:	1938      	adds	r0, r7, r4
 8013d78:	f001 fa26 	bl	80151c8 <siprintf>
		Write_String_8x16AsicII(48,26, String);
 8013d7c:	193b      	adds	r3, r7, r4
 8013d7e:	001a      	movs	r2, r3
 8013d80:	211a      	movs	r1, #26
 8013d82:	2030      	movs	r0, #48	; 0x30
 8013d84:	f7fe fe10 	bl	80129a8 <Write_String_8x16AsicII>
	}
	else if(z==3)
	{
		;
	}
}
 8013d88:	46c0      	nop			; (mov r8, r8)
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	b007      	add	sp, #28
 8013d8e:	bd90      	pop	{r4, r7, pc}
 8013d90:	08018580 	.word	0x08018580
 8013d94:	20003987 	.word	0x20003987
 8013d98:	200030a4 	.word	0x200030a4
 8013d9c:	200030ac 	.word	0x200030ac
 8013da0:	08018588 	.word	0x08018588
 8013da4:	08018590 	.word	0x08018590
 8013da8:	08018598 	.word	0x08018598
 8013dac:	080185a4 	.word	0x080185a4
 8013db0:	080185b8 	.word	0x080185b8
 8013db4:	20002fe8 	.word	0x20002fe8
 8013db8:	080185b0 	.word	0x080185b0
 8013dbc:	20002fec 	.word	0x20002fec
 8013dc0:	20002ff0 	.word	0x20002ff0
 8013dc4:	20002ff4 	.word	0x20002ff4

08013dc8 <second_menu_Hard>:

static void second_menu_Hard(int z)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d126      	bne.n	8013e24 <second_menu_Hard+0x5c>
	{
		Write_String_16x32AsicII(16,0,"Light ");
 8013dd6:	4b27      	ldr	r3, [pc, #156]	; (8013e74 <second_menu_Hard+0xac>)
 8013dd8:	001a      	movs	r2, r3
 8013dda:	2100      	movs	r1, #0
 8013ddc:	2010      	movs	r0, #16
 8013dde:	f7fe fe65 	bl	8012aac <Write_String_16x32AsicII>

		String_Light_Level[0]=Light/10+'0';
 8013de2:	4b25      	ldr	r3, [pc, #148]	; (8013e78 <second_menu_Hard+0xb0>)
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	210a      	movs	r1, #10
 8013de8:	0018      	movs	r0, r3
 8013dea:	f7ec f9af 	bl	800014c <__udivsi3>
 8013dee:	0003      	movs	r3, r0
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	3330      	adds	r3, #48	; 0x30
 8013df4:	b2da      	uxtb	r2, r3
 8013df6:	4b21      	ldr	r3, [pc, #132]	; (8013e7c <second_menu_Hard+0xb4>)
 8013df8:	701a      	strb	r2, [r3, #0]
		String_Light_Level[1]=Light%10+'0';
 8013dfa:	4b1f      	ldr	r3, [pc, #124]	; (8013e78 <second_menu_Hard+0xb0>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	210a      	movs	r1, #10
 8013e00:	0018      	movs	r0, r3
 8013e02:	f7ec fa29 	bl	8000258 <__aeabi_uidivmod>
 8013e06:	000b      	movs	r3, r1
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	3330      	adds	r3, #48	; 0x30
 8013e0c:	b2da      	uxtb	r2, r3
 8013e0e:	4b1b      	ldr	r3, [pc, #108]	; (8013e7c <second_menu_Hard+0xb4>)
 8013e10:	705a      	strb	r2, [r3, #1]
		Write_String_16x32AsicII(16,30, String_Light_Level);//显示输入值
 8013e12:	4b1a      	ldr	r3, [pc, #104]	; (8013e7c <second_menu_Hard+0xb4>)
 8013e14:	001a      	movs	r2, r3
 8013e16:	211e      	movs	r1, #30
 8013e18:	2010      	movs	r0, #16
 8013e1a:	f7fe fe47 	bl	8012aac <Write_String_16x32AsicII>

		Cursor_flash_off();
 8013e1e:	f000 fb21 	bl	8014464 <Cursor_flash_off>
		return;
 8013e22:	e023      	b.n	8013e6c <second_menu_Hard+0xa4>
	}
	else if(z==2)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2b02      	cmp	r3, #2
 8013e28:	d10e      	bne.n	8013e48 <second_menu_Hard+0x80>
	{
		Write_String_16x32AsicII(16,0,"Temp: ");
 8013e2a:	4b15      	ldr	r3, [pc, #84]	; (8013e80 <second_menu_Hard+0xb8>)
 8013e2c:	001a      	movs	r2, r3
 8013e2e:	2100      	movs	r1, #0
 8013e30:	2010      	movs	r0, #16
 8013e32:	f7fe fe3b 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Temperature_CH1);//显示温度
 8013e36:	4b13      	ldr	r3, [pc, #76]	; (8013e84 <second_menu_Hard+0xbc>)
 8013e38:	001a      	movs	r2, r3
 8013e3a:	2118      	movs	r1, #24
 8013e3c:	2010      	movs	r0, #16
 8013e3e:	f7fe fe35 	bl	8012aac <Write_String_16x32AsicII>

		Cursor_flash_off();
 8013e42:	f000 fb0f 	bl	8014464 <Cursor_flash_off>
		return;
 8013e46:	e011      	b.n	8013e6c <second_menu_Hard+0xa4>
	}
	else if(z==3)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b03      	cmp	r3, #3
 8013e4c:	d10e      	bne.n	8013e6c <second_menu_Hard+0xa4>
	{
		Write_String_16x32AsicII(16,0,"FANS: ");
 8013e4e:	4b0e      	ldr	r3, [pc, #56]	; (8013e88 <second_menu_Hard+0xc0>)
 8013e50:	001a      	movs	r2, r3
 8013e52:	2100      	movs	r1, #0
 8013e54:	2010      	movs	r0, #16
 8013e56:	f7fe fe29 	bl	8012aac <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_FAN);//转速
 8013e5a:	4b0c      	ldr	r3, [pc, #48]	; (8013e8c <second_menu_Hard+0xc4>)
 8013e5c:	001a      	movs	r2, r3
 8013e5e:	2118      	movs	r1, #24
 8013e60:	2010      	movs	r0, #16
 8013e62:	f7fe fe23 	bl	8012aac <Write_String_16x32AsicII>

		Cursor_flash_off();
 8013e66:	f000 fafd 	bl	8014464 <Cursor_flash_off>
		return;
 8013e6a:	46c0      	nop			; (mov r8, r8)
	}

}
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	b002      	add	sp, #8
 8013e70:	bd80      	pop	{r7, pc}
 8013e72:	46c0      	nop			; (mov r8, r8)
 8013e74:	080185c4 	.word	0x080185c4
 8013e78:	200030b3 	.word	0x200030b3
 8013e7c:	20003068 	.word	0x20003068
 8013e80:	080185cc 	.word	0x080185cc
 8013e84:	20003074 	.word	0x20003074
 8013e88:	080185d4 	.word	0x080185d4
 8013e8c:	20003080 	.word	0x20003080

08013e90 <second_menu_Calibration>:


static void second_menu_Calibration(int z)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2b01      	cmp	r3, #1
 8013e9c:	d112      	bne.n	8013ec4 <second_menu_Calibration+0x34>
	{
		Cursor_flash_on();
 8013e9e:	f000 fb17 	bl	80144d0 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 8013ea2:	4b2b      	ldr	r3, [pc, #172]	; (8013f50 <second_menu_Calibration+0xc0>)
 8013ea4:	001a      	movs	r2, r3
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	2010      	movs	r0, #16
 8013eaa:	f7fe fdff 	bl	8012aac <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 8013eae:	4b29      	ldr	r3, [pc, #164]	; (8013f54 <second_menu_Calibration+0xc4>)
 8013eb0:	001a      	movs	r2, r3
 8013eb2:	2124      	movs	r1, #36	; 0x24
 8013eb4:	2010      	movs	r0, #16
 8013eb6:	f7fe fdf9 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 8013eba:	2256      	movs	r2, #86	; 0x56
 8013ebc:	212c      	movs	r1, #44	; 0x2c
 8013ebe:	2030      	movs	r0, #48	; 0x30
 8013ec0:	f7fe fd2e 	bl	8012920 <Write_Single_8x16AsicII>

	}
	if(z==2)
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b02      	cmp	r3, #2
 8013ec8:	d112      	bne.n	8013ef0 <second_menu_Calibration+0x60>
	{
		Cursor_flash_on();
 8013eca:	f000 fb01 	bl	80144d0 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 8013ece:	4b22      	ldr	r3, [pc, #136]	; (8013f58 <second_menu_Calibration+0xc8>)
 8013ed0:	001a      	movs	r2, r3
 8013ed2:	2100      	movs	r1, #0
 8013ed4:	2010      	movs	r0, #16
 8013ed6:	f7fe fde9 	bl	8012aac <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 8013eda:	4b1e      	ldr	r3, [pc, #120]	; (8013f54 <second_menu_Calibration+0xc4>)
 8013edc:	001a      	movs	r2, r3
 8013ede:	2124      	movs	r1, #36	; 0x24
 8013ee0:	2010      	movs	r0, #16
 8013ee2:	f7fe fde3 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 8013ee6:	2256      	movs	r2, #86	; 0x56
 8013ee8:	212c      	movs	r1, #44	; 0x2c
 8013eea:	2030      	movs	r0, #48	; 0x30
 8013eec:	f7fe fd18 	bl	8012920 <Write_Single_8x16AsicII>

	}

	if(z==3)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2b03      	cmp	r3, #3
 8013ef4:	d112      	bne.n	8013f1c <second_menu_Calibration+0x8c>
	{
		Cursor_flash_on();
 8013ef6:	f000 faeb 	bl	80144d0 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 8013efa:	4b15      	ldr	r3, [pc, #84]	; (8013f50 <second_menu_Calibration+0xc0>)
 8013efc:	001a      	movs	r2, r3
 8013efe:	2100      	movs	r1, #0
 8013f00:	2010      	movs	r0, #16
 8013f02:	f7fe fdd3 	bl	8012aac <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 8013f06:	4b15      	ldr	r3, [pc, #84]	; (8013f5c <second_menu_Calibration+0xcc>)
 8013f08:	001a      	movs	r2, r3
 8013f0a:	2124      	movs	r1, #36	; 0x24
 8013f0c:	2010      	movs	r0, #16
 8013f0e:	f7fe fdcd 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 8013f12:	2241      	movs	r2, #65	; 0x41
 8013f14:	212c      	movs	r1, #44	; 0x2c
 8013f16:	2030      	movs	r0, #48	; 0x30
 8013f18:	f7fe fd02 	bl	8012920 <Write_Single_8x16AsicII>

	}
	if(z==4)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b04      	cmp	r3, #4
 8013f20:	d112      	bne.n	8013f48 <second_menu_Calibration+0xb8>
	{
		Cursor_flash_on();
 8013f22:	f000 fad5 	bl	80144d0 <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 8013f26:	4b0c      	ldr	r3, [pc, #48]	; (8013f58 <second_menu_Calibration+0xc8>)
 8013f28:	001a      	movs	r2, r3
 8013f2a:	2100      	movs	r1, #0
 8013f2c:	2010      	movs	r0, #16
 8013f2e:	f7fe fdbd 	bl	8012aac <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 8013f32:	4b0a      	ldr	r3, [pc, #40]	; (8013f5c <second_menu_Calibration+0xcc>)
 8013f34:	001a      	movs	r2, r3
 8013f36:	2124      	movs	r1, #36	; 0x24
 8013f38:	2010      	movs	r0, #16
 8013f3a:	f7fe fdb7 	bl	8012aac <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 8013f3e:	2241      	movs	r2, #65	; 0x41
 8013f40:	212c      	movs	r1, #44	; 0x2c
 8013f42:	2030      	movs	r0, #48	; 0x30
 8013f44:	f7fe fcec 	bl	8012920 <Write_Single_8x16AsicII>
	}
}
 8013f48:	46c0      	nop			; (mov r8, r8)
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	b002      	add	sp, #8
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	080185dc 	.word	0x080185dc
 8013f54:	2000308c 	.word	0x2000308c
 8013f58:	080185e4 	.word	0x080185e4
 8013f5c:	20003098 	.word	0x20003098

08013f60 <Display_Menu_Function_Interface_Second_Menu>:
 * @param  xyz.y
 * @param  xyz.z
 * @retval None
 */
void Display_Menu_Function_Interface_Second_Menu(int y,int z)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	6039      	str	r1, [r7, #0]

	Write_String_8x16AsicII(48,48, "2nd Menu");
 8013f6a:	4b1b      	ldr	r3, [pc, #108]	; (8013fd8 <Display_Menu_Function_Interface_Second_Menu+0x78>)
 8013f6c:	001a      	movs	r2, r3
 8013f6e:	2130      	movs	r1, #48	; 0x30
 8013f70:	2030      	movs	r0, #48	; 0x30
 8013f72:	f7fe fd19 	bl	80129a8 <Write_String_8x16AsicII>
	//一级菜单功能，显示在中间
	switch(y)
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2b08      	cmp	r3, #8
 8013f7a:	d828      	bhi.n	8013fce <Display_Menu_Function_Interface_Second_Menu+0x6e>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	009a      	lsls	r2, r3, #2
 8013f80:	4b16      	ldr	r3, [pc, #88]	; (8013fdc <Display_Menu_Function_Interface_Second_Menu+0x7c>)
 8013f82:	18d3      	adds	r3, r2, r3
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	469f      	mov	pc, r3
	{
		case 1://system
		{
			/*此处补充复位对象界面*/
			second_munu_system(z);
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	0018      	movs	r0, r3
 8013f8c:	f7ff fdaa 	bl	8013ae4 <second_munu_system>
			break;
 8013f90:	e01e      	b.n	8013fd0 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 2://slope
		{
			second_munu_slope(z);
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	0018      	movs	r0, r3
 8013f96:	f7ff fdbb 	bl	8013b10 <second_munu_slope>
			break;
 8013f9a:	e019      	b.n	8013fd0 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 3://Communication
		{
			second_munu_RS232(z);
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	0018      	movs	r0, r3
 8013fa0:	f7ff fde8 	bl	8013b74 <second_munu_RS232>
			break;
 8013fa4:	e014      	b.n	8013fd0 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 4://timer
		{
			second_menu_timer(z);
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	0018      	movs	r0, r3
 8013faa:	f7ff fe01 	bl	8013bb0 <second_menu_timer>
			break;
 8013fae:	e00f      	b.n	8013fd0 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 5://AD
		{
			second_menu_AD(z);
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	0018      	movs	r0, r3
 8013fb4:	f7ff fe42 	bl	8013c3c <second_menu_AD>
			break;
 8013fb8:	e00a      	b.n	8013fd0 <Display_Menu_Function_Interface_Second_Menu+0x70>

		}
		case 6:
		{
			second_menu_Hard(z);
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	0018      	movs	r0, r3
 8013fbe:	f7ff ff03 	bl	8013dc8 <second_menu_Hard>
			break;
 8013fc2:	e005      	b.n	8013fd0 <Display_Menu_Function_Interface_Second_Menu+0x70>
			 second_menu_Portect(z);
		}
		*/
		case 8:
		{
			second_menu_Calibration(z);
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	0018      	movs	r0, r3
 8013fc8:	f7ff ff62 	bl	8013e90 <second_menu_Calibration>
			break;
 8013fcc:	e000      	b.n	8013fd0 <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		default :break;
 8013fce:	46c0      	nop			; (mov r8, r8)
	}


}
 8013fd0:	46c0      	nop			; (mov r8, r8)
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	b002      	add	sp, #8
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	080185ec 	.word	0x080185ec
 8013fdc:	08018a78 	.word	0x08018a78

08013fe0 <Display_Protect_Interface>:
  * @brief  显示保护界面
  * @param  出现的错误类型
  * @retval None
  */
void Display_Protect_Interface(uint8_t Error)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b084      	sub	sp, #16
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	0002      	movs	r2, r0
 8013fe8:	1dfb      	adds	r3, r7, #7
 8013fea:	701a      	strb	r2, [r3, #0]

	Cursor_flash_off();
 8013fec:	f000 fa3a 	bl	8014464 <Cursor_flash_off>
	uint8_t mask=0x01;
 8013ff0:	210f      	movs	r1, #15
 8013ff2:	187b      	adds	r3, r7, r1
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	701a      	strb	r2, [r3, #0]
	static uint8_t count=0;

	count=0;
 8013ff8:	4ba4      	ldr	r3, [pc, #656]	; (801428c <Display_Protect_Interface+0x2ac>)
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	701a      	strb	r2, [r3, #0]
	if((Error&mask)==mask)//0x01
 8013ffe:	1dfb      	adds	r3, r7, #7
 8014000:	187a      	adds	r2, r7, r1
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	7812      	ldrb	r2, [r2, #0]
 8014006:	4013      	ands	r3, r2
 8014008:	b2db      	uxtb	r3, r3
 801400a:	187a      	adds	r2, r7, r1
 801400c:	7812      	ldrb	r2, [r2, #0]
 801400e:	429a      	cmp	r2, r3
 8014010:	d105      	bne.n	801401e <Display_Protect_Interface+0x3e>
	{
		count++;
 8014012:	4b9e      	ldr	r3, [pc, #632]	; (801428c <Display_Protect_Interface+0x2ac>)
 8014014:	781b      	ldrb	r3, [r3, #0]
 8014016:	3301      	adds	r3, #1
 8014018:	b2da      	uxtb	r2, r3
 801401a:	4b9c      	ldr	r3, [pc, #624]	; (801428c <Display_Protect_Interface+0x2ac>)
 801401c:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 801401e:	210f      	movs	r1, #15
 8014020:	187a      	adds	r2, r7, r1
 8014022:	187b      	adds	r3, r7, r1
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	18db      	adds	r3, r3, r3
 8014028:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 801402a:	1dfb      	adds	r3, r7, #7
 801402c:	187a      	adds	r2, r7, r1
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	7812      	ldrb	r2, [r2, #0]
 8014032:	4013      	ands	r3, r2
 8014034:	b2db      	uxtb	r3, r3
 8014036:	187a      	adds	r2, r7, r1
 8014038:	7812      	ldrb	r2, [r2, #0]
 801403a:	429a      	cmp	r2, r3
 801403c:	d105      	bne.n	801404a <Display_Protect_Interface+0x6a>
	{
		count++;
 801403e:	4b93      	ldr	r3, [pc, #588]	; (801428c <Display_Protect_Interface+0x2ac>)
 8014040:	781b      	ldrb	r3, [r3, #0]
 8014042:	3301      	adds	r3, #1
 8014044:	b2da      	uxtb	r2, r3
 8014046:	4b91      	ldr	r3, [pc, #580]	; (801428c <Display_Protect_Interface+0x2ac>)
 8014048:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 801404a:	210f      	movs	r1, #15
 801404c:	187a      	adds	r2, r7, r1
 801404e:	187b      	adds	r3, r7, r1
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	18db      	adds	r3, r3, r3
 8014054:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 8014056:	1dfb      	adds	r3, r7, #7
 8014058:	187a      	adds	r2, r7, r1
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	7812      	ldrb	r2, [r2, #0]
 801405e:	4013      	ands	r3, r2
 8014060:	b2db      	uxtb	r3, r3
 8014062:	187a      	adds	r2, r7, r1
 8014064:	7812      	ldrb	r2, [r2, #0]
 8014066:	429a      	cmp	r2, r3
 8014068:	d105      	bne.n	8014076 <Display_Protect_Interface+0x96>
	{
		count++;
 801406a:	4b88      	ldr	r3, [pc, #544]	; (801428c <Display_Protect_Interface+0x2ac>)
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	3301      	adds	r3, #1
 8014070:	b2da      	uxtb	r2, r3
 8014072:	4b86      	ldr	r3, [pc, #536]	; (801428c <Display_Protect_Interface+0x2ac>)
 8014074:	701a      	strb	r2, [r3, #0]
	}
	mask=0x01;
 8014076:	230f      	movs	r3, #15
 8014078:	18fb      	adds	r3, r7, r3
 801407a:	2201      	movs	r2, #1
 801407c:	701a      	strb	r2, [r3, #0]

	switch(count)
 801407e:	4b83      	ldr	r3, [pc, #524]	; (801428c <Display_Protect_Interface+0x2ac>)
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	2b03      	cmp	r3, #3
 8014084:	d100      	bne.n	8014088 <Display_Protect_Interface+0xa8>
 8014086:	e0db      	b.n	8014240 <Display_Protect_Interface+0x260>
 8014088:	dd00      	ble.n	801408c <Display_Protect_Interface+0xac>
 801408a:	e0fb      	b.n	8014284 <Display_Protect_Interface+0x2a4>
 801408c:	2b02      	cmp	r3, #2
 801408e:	d100      	bne.n	8014092 <Display_Protect_Interface+0xb2>
 8014090:	e07e      	b.n	8014190 <Display_Protect_Interface+0x1b0>
 8014092:	dd00      	ble.n	8014096 <Display_Protect_Interface+0xb6>
 8014094:	e0f6      	b.n	8014284 <Display_Protect_Interface+0x2a4>
 8014096:	2b00      	cmp	r3, #0
 8014098:	d002      	beq.n	80140a0 <Display_Protect_Interface+0xc0>
 801409a:	2b01      	cmp	r3, #1
 801409c:	d00b      	beq.n	80140b6 <Display_Protect_Interface+0xd6>

	}



}
 801409e:	e0f1      	b.n	8014284 <Display_Protect_Interface+0x2a4>
			Clear_Screen();
 80140a0:	f7fe fbe8 	bl	8012874 <Clear_Screen>
			xyz.coordinates1=0;
 80140a4:	4b7a      	ldr	r3, [pc, #488]	; (8014290 <Display_Protect_Interface+0x2b0>)
 80140a6:	2200      	movs	r2, #0
 80140a8:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 80140aa:	4b79      	ldr	r3, [pc, #484]	; (8014290 <Display_Protect_Interface+0x2b0>)
 80140ac:	2200      	movs	r2, #0
 80140ae:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 80140b0:	4b77      	ldr	r3, [pc, #476]	; (8014290 <Display_Protect_Interface+0x2b0>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	609a      	str	r2, [r3, #8]
			if((Error&0x01)==0x01)
 80140b6:	1dfb      	adds	r3, r7, #7
 80140b8:	781b      	ldrb	r3, [r3, #0]
 80140ba:	2201      	movs	r2, #1
 80140bc:	4013      	ands	r3, r2
 80140be:	d01e      	beq.n	80140fe <Display_Protect_Interface+0x11e>
				Write_String_16x32AsicII(16,4,"   ");
 80140c0:	4b74      	ldr	r3, [pc, #464]	; (8014294 <Display_Protect_Interface+0x2b4>)
 80140c2:	001a      	movs	r2, r3
 80140c4:	2104      	movs	r1, #4
 80140c6:	2010      	movs	r0, #16
 80140c8:	f7fe fcf0 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 80140cc:	4b72      	ldr	r3, [pc, #456]	; (8014298 <Display_Protect_Interface+0x2b8>)
 80140ce:	001a      	movs	r2, r3
 80140d0:	2112      	movs	r1, #18
 80140d2:	2010      	movs	r0, #16
 80140d4:	f7fe fcea 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OVP");
 80140d8:	4b70      	ldr	r3, [pc, #448]	; (801429c <Display_Protect_Interface+0x2bc>)
 80140da:	001a      	movs	r2, r3
 80140dc:	211a      	movs	r1, #26
 80140de:	2010      	movs	r0, #16
 80140e0:	f7fe fce4 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 80140e4:	4b6c      	ldr	r3, [pc, #432]	; (8014298 <Display_Protect_Interface+0x2b8>)
 80140e6:	001a      	movs	r2, r3
 80140e8:	2126      	movs	r1, #38	; 0x26
 80140ea:	2010      	movs	r0, #16
 80140ec:	f7fe fcde 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 80140f0:	4b6b      	ldr	r3, [pc, #428]	; (80142a0 <Display_Protect_Interface+0x2c0>)
 80140f2:	001a      	movs	r2, r3
 80140f4:	212c      	movs	r1, #44	; 0x2c
 80140f6:	2010      	movs	r0, #16
 80140f8:	f7fe fcd8 	bl	8012aac <Write_String_16x32AsicII>
			break;
 80140fc:	e0bf      	b.n	801427e <Display_Protect_Interface+0x29e>
			else if((Error&0x02)==0x02)
 80140fe:	1dfb      	adds	r3, r7, #7
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	2202      	movs	r2, #2
 8014104:	4013      	ands	r3, r2
 8014106:	d01e      	beq.n	8014146 <Display_Protect_Interface+0x166>
				Write_String_16x32AsicII(16,4,"   ");
 8014108:	4b62      	ldr	r3, [pc, #392]	; (8014294 <Display_Protect_Interface+0x2b4>)
 801410a:	001a      	movs	r2, r3
 801410c:	2104      	movs	r1, #4
 801410e:	2010      	movs	r0, #16
 8014110:	f7fe fccc 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 8014114:	4b60      	ldr	r3, [pc, #384]	; (8014298 <Display_Protect_Interface+0x2b8>)
 8014116:	001a      	movs	r2, r3
 8014118:	2112      	movs	r1, #18
 801411a:	2010      	movs	r0, #16
 801411c:	f7fe fcc6 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OCP");
 8014120:	4b60      	ldr	r3, [pc, #384]	; (80142a4 <Display_Protect_Interface+0x2c4>)
 8014122:	001a      	movs	r2, r3
 8014124:	211a      	movs	r1, #26
 8014126:	2010      	movs	r0, #16
 8014128:	f7fe fcc0 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 801412c:	4b5a      	ldr	r3, [pc, #360]	; (8014298 <Display_Protect_Interface+0x2b8>)
 801412e:	001a      	movs	r2, r3
 8014130:	2126      	movs	r1, #38	; 0x26
 8014132:	2010      	movs	r0, #16
 8014134:	f7fe fcba 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 8014138:	4b59      	ldr	r3, [pc, #356]	; (80142a0 <Display_Protect_Interface+0x2c0>)
 801413a:	001a      	movs	r2, r3
 801413c:	212c      	movs	r1, #44	; 0x2c
 801413e:	2010      	movs	r0, #16
 8014140:	f7fe fcb4 	bl	8012aac <Write_String_16x32AsicII>
			break;
 8014144:	e09b      	b.n	801427e <Display_Protect_Interface+0x29e>
			else if((Error&0x04)==0x04)
 8014146:	1dfb      	adds	r3, r7, #7
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	2204      	movs	r2, #4
 801414c:	4013      	ands	r3, r2
 801414e:	d100      	bne.n	8014152 <Display_Protect_Interface+0x172>
 8014150:	e095      	b.n	801427e <Display_Protect_Interface+0x29e>
				Write_String_16x32AsicII(16,4,"   ");
 8014152:	4b50      	ldr	r3, [pc, #320]	; (8014294 <Display_Protect_Interface+0x2b4>)
 8014154:	001a      	movs	r2, r3
 8014156:	2104      	movs	r1, #4
 8014158:	2010      	movs	r0, #16
 801415a:	f7fe fca7 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 801415e:	4b4e      	ldr	r3, [pc, #312]	; (8014298 <Display_Protect_Interface+0x2b8>)
 8014160:	001a      	movs	r2, r3
 8014162:	2112      	movs	r1, #18
 8014164:	2010      	movs	r0, #16
 8014166:	f7fe fca1 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OTP");
 801416a:	4b4f      	ldr	r3, [pc, #316]	; (80142a8 <Display_Protect_Interface+0x2c8>)
 801416c:	001a      	movs	r2, r3
 801416e:	211a      	movs	r1, #26
 8014170:	2010      	movs	r0, #16
 8014172:	f7fe fc9b 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 8014176:	4b48      	ldr	r3, [pc, #288]	; (8014298 <Display_Protect_Interface+0x2b8>)
 8014178:	001a      	movs	r2, r3
 801417a:	2126      	movs	r1, #38	; 0x26
 801417c:	2010      	movs	r0, #16
 801417e:	f7fe fc95 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 8014182:	4b47      	ldr	r3, [pc, #284]	; (80142a0 <Display_Protect_Interface+0x2c0>)
 8014184:	001a      	movs	r2, r3
 8014186:	212c      	movs	r1, #44	; 0x2c
 8014188:	2010      	movs	r0, #16
 801418a:	f7fe fc8f 	bl	8012aac <Write_String_16x32AsicII>
			break;
 801418e:	e076      	b.n	801427e <Display_Protect_Interface+0x29e>
			if((Error&0x02)==0x02 && (Error&0x04)==0x04)
 8014190:	1dfb      	adds	r3, r7, #7
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	2202      	movs	r2, #2
 8014196:	4013      	ands	r3, r2
 8014198:	d017      	beq.n	80141ca <Display_Protect_Interface+0x1ea>
 801419a:	1dfb      	adds	r3, r7, #7
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	2204      	movs	r2, #4
 80141a0:	4013      	ands	r3, r2
 80141a2:	d012      	beq.n	80141ca <Display_Protect_Interface+0x1ea>
				Write_String_16x32AsicII(16,18,"OCP");
 80141a4:	4b3f      	ldr	r3, [pc, #252]	; (80142a4 <Display_Protect_Interface+0x2c4>)
 80141a6:	001a      	movs	r2, r3
 80141a8:	2112      	movs	r1, #18
 80141aa:	2010      	movs	r0, #16
 80141ac:	f7fe fc7e 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 80141b0:	4b3e      	ldr	r3, [pc, #248]	; (80142ac <Display_Protect_Interface+0x2cc>)
 80141b2:	001a      	movs	r2, r3
 80141b4:	211e      	movs	r1, #30
 80141b6:	2010      	movs	r0, #16
 80141b8:	f7fe fc78 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 80141bc:	4b3a      	ldr	r3, [pc, #232]	; (80142a8 <Display_Protect_Interface+0x2c8>)
 80141be:	001a      	movs	r2, r3
 80141c0:	2122      	movs	r1, #34	; 0x22
 80141c2:	2010      	movs	r0, #16
 80141c4:	f7fe fc72 	bl	8012aac <Write_String_16x32AsicII>
 80141c8:	e039      	b.n	801423e <Display_Protect_Interface+0x25e>
			else if((Error&0x01)==0x01 && (Error&0x04)==0x04)
 80141ca:	1dfb      	adds	r3, r7, #7
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	2201      	movs	r2, #1
 80141d0:	4013      	ands	r3, r2
 80141d2:	d017      	beq.n	8014204 <Display_Protect_Interface+0x224>
 80141d4:	1dfb      	adds	r3, r7, #7
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	2204      	movs	r2, #4
 80141da:	4013      	ands	r3, r2
 80141dc:	d012      	beq.n	8014204 <Display_Protect_Interface+0x224>
				Write_String_16x32AsicII(16,18,"OVP");
 80141de:	4b2f      	ldr	r3, [pc, #188]	; (801429c <Display_Protect_Interface+0x2bc>)
 80141e0:	001a      	movs	r2, r3
 80141e2:	2112      	movs	r1, #18
 80141e4:	2010      	movs	r0, #16
 80141e6:	f7fe fc61 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 80141ea:	4b30      	ldr	r3, [pc, #192]	; (80142ac <Display_Protect_Interface+0x2cc>)
 80141ec:	001a      	movs	r2, r3
 80141ee:	211e      	movs	r1, #30
 80141f0:	2010      	movs	r0, #16
 80141f2:	f7fe fc5b 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 80141f6:	4b2c      	ldr	r3, [pc, #176]	; (80142a8 <Display_Protect_Interface+0x2c8>)
 80141f8:	001a      	movs	r2, r3
 80141fa:	2122      	movs	r1, #34	; 0x22
 80141fc:	2010      	movs	r0, #16
 80141fe:	f7fe fc55 	bl	8012aac <Write_String_16x32AsicII>
 8014202:	e01c      	b.n	801423e <Display_Protect_Interface+0x25e>
			else if((Error&0x02)==0x02 && (Error&0x01)==0x01)
 8014204:	1dfb      	adds	r3, r7, #7
 8014206:	781b      	ldrb	r3, [r3, #0]
 8014208:	2202      	movs	r2, #2
 801420a:	4013      	ands	r3, r2
 801420c:	d039      	beq.n	8014282 <Display_Protect_Interface+0x2a2>
 801420e:	1dfb      	adds	r3, r7, #7
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2201      	movs	r2, #1
 8014214:	4013      	ands	r3, r2
 8014216:	d034      	beq.n	8014282 <Display_Protect_Interface+0x2a2>
				Write_String_16x32AsicII(16,18,"OVP");
 8014218:	4b20      	ldr	r3, [pc, #128]	; (801429c <Display_Protect_Interface+0x2bc>)
 801421a:	001a      	movs	r2, r3
 801421c:	2112      	movs	r1, #18
 801421e:	2010      	movs	r0, #16
 8014220:	f7fe fc44 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8014224:	4b21      	ldr	r3, [pc, #132]	; (80142ac <Display_Protect_Interface+0x2cc>)
 8014226:	001a      	movs	r2, r3
 8014228:	211e      	movs	r1, #30
 801422a:	2010      	movs	r0, #16
 801422c:	f7fe fc3e 	bl	8012aac <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OCP");
 8014230:	4b1c      	ldr	r3, [pc, #112]	; (80142a4 <Display_Protect_Interface+0x2c4>)
 8014232:	001a      	movs	r2, r3
 8014234:	2122      	movs	r1, #34	; 0x22
 8014236:	2010      	movs	r0, #16
 8014238:	f7fe fc38 	bl	8012aac <Write_String_16x32AsicII>
			break;
 801423c:	e021      	b.n	8014282 <Display_Protect_Interface+0x2a2>
 801423e:	e020      	b.n	8014282 <Display_Protect_Interface+0x2a2>
			Write_String_16x32AsicII(16,18," ");
 8014240:	4b1a      	ldr	r3, [pc, #104]	; (80142ac <Display_Protect_Interface+0x2cc>)
 8014242:	001a      	movs	r2, r3
 8014244:	2112      	movs	r1, #18
 8014246:	2010      	movs	r0, #16
 8014248:	f7fe fc30 	bl	8012aac <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,4,"OVP");
 801424c:	4b13      	ldr	r3, [pc, #76]	; (801429c <Display_Protect_Interface+0x2bc>)
 801424e:	001a      	movs	r2, r3
 8014250:	2104      	movs	r1, #4
 8014252:	2010      	movs	r0, #16
 8014254:	f7fe fc2a 	bl	8012aac <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,24,"OCP");
 8014258:	4b12      	ldr	r3, [pc, #72]	; (80142a4 <Display_Protect_Interface+0x2c4>)
 801425a:	001a      	movs	r2, r3
 801425c:	2118      	movs	r1, #24
 801425e:	2010      	movs	r0, #16
 8014260:	f7fe fc24 	bl	8012aac <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,44,"OTP");
 8014264:	4b10      	ldr	r3, [pc, #64]	; (80142a8 <Display_Protect_Interface+0x2c8>)
 8014266:	001a      	movs	r2, r3
 8014268:	212c      	movs	r1, #44	; 0x2c
 801426a:	2010      	movs	r0, #16
 801426c:	f7fe fc1e 	bl	8012aac <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,36," ");
 8014270:	4b0e      	ldr	r3, [pc, #56]	; (80142ac <Display_Protect_Interface+0x2cc>)
 8014272:	001a      	movs	r2, r3
 8014274:	2124      	movs	r1, #36	; 0x24
 8014276:	2010      	movs	r0, #16
 8014278:	f7fe fc18 	bl	8012aac <Write_String_16x32AsicII>
			break;
 801427c:	e002      	b.n	8014284 <Display_Protect_Interface+0x2a4>
			break;
 801427e:	46c0      	nop			; (mov r8, r8)
 8014280:	e000      	b.n	8014284 <Display_Protect_Interface+0x2a4>
			break;
 8014282:	46c0      	nop			; (mov r8, r8)
}
 8014284:	46c0      	nop			; (mov r8, r8)
 8014286:	46bd      	mov	sp, r7
 8014288:	b004      	add	sp, #16
 801428a:	bd80      	pop	{r7, pc}
 801428c:	20003a89 	.word	0x20003a89
 8014290:	200039f4 	.word	0x200039f4
 8014294:	080185f8 	.word	0x080185f8
 8014298:	0801844c 	.word	0x0801844c
 801429c:	080185fc 	.word	0x080185fc
 80142a0:	08018600 	.word	0x08018600
 80142a4:	08018608 	.word	0x08018608
 80142a8:	0801860c 	.word	0x0801860c
 80142ac:	08018610 	.word	0x08018610

080142b0 <Cursor_flash>:

}


void Cursor_flash(void)
{
 80142b0:	b590      	push	{r4, r7, lr}
 80142b2:	4c5e      	ldr	r4, [pc, #376]	; (801442c <Cursor_flash+0x17c>)
 80142b4:	44a5      	add	sp, r4
 80142b6:	af00      	add	r7, sp, #0
	static int count;
	uint8_t clear_arry[16*64*2]={0x00};
 80142b8:	4b5d      	ldr	r3, [pc, #372]	; (8014430 <Cursor_flash+0x180>)
 80142ba:	4a5e      	ldr	r2, [pc, #376]	; (8014434 <Cursor_flash+0x184>)
 80142bc:	189b      	adds	r3, r3, r2
 80142be:	19db      	adds	r3, r3, r7
 80142c0:	2200      	movs	r2, #0
 80142c2:	601a      	str	r2, [r3, #0]
 80142c4:	3304      	adds	r3, #4
 80142c6:	4a5c      	ldr	r2, [pc, #368]	; (8014438 <Cursor_flash+0x188>)
 80142c8:	2100      	movs	r1, #0
 80142ca:	0018      	movs	r0, r3
 80142cc:	f000 fa11 	bl	80146f2 <memset>
	count++;
 80142d0:	4b5a      	ldr	r3, [pc, #360]	; (801443c <Cursor_flash+0x18c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	1c5a      	adds	r2, r3, #1
 80142d6:	4b59      	ldr	r3, [pc, #356]	; (801443c <Cursor_flash+0x18c>)
 80142d8:	601a      	str	r2, [r3, #0]
	if(count==2)
 80142da:	4b58      	ldr	r3, [pc, #352]	; (801443c <Cursor_flash+0x18c>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b02      	cmp	r3, #2
 80142e0:	d16a      	bne.n	80143b8 <Cursor_flash+0x108>
	{
		count=0;
 80142e2:	4b56      	ldr	r3, [pc, #344]	; (801443c <Cursor_flash+0x18c>)
 80142e4:	2200      	movs	r2, #0
 80142e6:	601a      	str	r2, [r3, #0]

		SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);
 80142e8:	20a0      	movs	r0, #160	; 0xa0
 80142ea:	f7fd fc7f 	bl	8011bec <SPI_OLED_SendCommond>
		SPI_OLED_SendData(0x14);
 80142ee:	2014      	movs	r0, #20
 80142f0:	f7fd fc44 	bl	8011b7c <SPI_OLED_SendData>
		SPI_OLED_SendData(0x11);
 80142f4:	2011      	movs	r0, #17
 80142f6:	f7fd fc41 	bl	8011b7c <SPI_OLED_SendData>

		Set_Column_Address(Cursor_Position*4, Cursor_Position*4+1);
 80142fa:	4b51      	ldr	r3, [pc, #324]	; (8014440 <Cursor_flash+0x190>)
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	b2da      	uxtb	r2, r3
 8014302:	4b4f      	ldr	r3, [pc, #316]	; (8014440 <Cursor_flash+0x190>)
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	009b      	lsls	r3, r3, #2
 8014308:	b2db      	uxtb	r3, r3
 801430a:	3301      	adds	r3, #1
 801430c:	b2db      	uxtb	r3, r3
 801430e:	0019      	movs	r1, r3
 8014310:	0010      	movs	r0, r2
 8014312:	f7fe fa2f 	bl	8012774 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 8014316:	210f      	movs	r1, #15
 8014318:	2000      	movs	r0, #0
 801431a:	f7fe fa49 	bl	80127b0 <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 801431e:	205c      	movs	r0, #92	; 0x5c
 8014320:	f7fd fc64 	bl	8011bec <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 8014324:	4b47      	ldr	r3, [pc, #284]	; (8014444 <Cursor_flash+0x194>)
 8014326:	18fb      	adds	r3, r7, r3
 8014328:	2200      	movs	r2, #0
 801432a:	701a      	strb	r2, [r3, #0]
 801432c:	e00e      	b.n	801434c <Cursor_flash+0x9c>
		{
			Font_1Bit_To_4Bit(Pointleft[i]);
 801432e:	4c45      	ldr	r4, [pc, #276]	; (8014444 <Cursor_flash+0x194>)
 8014330:	193b      	adds	r3, r7, r4
 8014332:	781a      	ldrb	r2, [r3, #0]
 8014334:	4b44      	ldr	r3, [pc, #272]	; (8014448 <Cursor_flash+0x198>)
 8014336:	0052      	lsls	r2, r2, #1
 8014338:	5ad3      	ldrh	r3, [r2, r3]
 801433a:	b2db      	uxtb	r3, r3
 801433c:	0018      	movs	r0, r3
 801433e:	f7fd fd69 	bl	8011e14 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 8014342:	193b      	adds	r3, r7, r4
 8014344:	781a      	ldrb	r2, [r3, #0]
 8014346:	193b      	adds	r3, r7, r4
 8014348:	3201      	adds	r2, #1
 801434a:	701a      	strb	r2, [r3, #0]
 801434c:	4b3d      	ldr	r3, [pc, #244]	; (8014444 <Cursor_flash+0x194>)
 801434e:	18fb      	adds	r3, r7, r3
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b0f      	cmp	r3, #15
 8014354:	d9eb      	bls.n	801432e <Cursor_flash+0x7e>
		}
		Set_Column_Address(Cursor_Position*4+2, Cursor_Position*4+3);
 8014356:	4b3a      	ldr	r3, [pc, #232]	; (8014440 <Cursor_flash+0x190>)
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	b2db      	uxtb	r3, r3
 801435e:	3302      	adds	r3, #2
 8014360:	b2da      	uxtb	r2, r3
 8014362:	4b37      	ldr	r3, [pc, #220]	; (8014440 <Cursor_flash+0x190>)
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	b2db      	uxtb	r3, r3
 801436a:	3303      	adds	r3, #3
 801436c:	b2db      	uxtb	r3, r3
 801436e:	0019      	movs	r1, r3
 8014370:	0010      	movs	r0, r2
 8014372:	f7fe f9ff 	bl	8012774 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 8014376:	210f      	movs	r1, #15
 8014378:	2000      	movs	r0, #0
 801437a:	f7fe fa19 	bl	80127b0 <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 801437e:	205c      	movs	r0, #92	; 0x5c
 8014380:	f7fd fc34 	bl	8011bec <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 8014384:	4b31      	ldr	r3, [pc, #196]	; (801444c <Cursor_flash+0x19c>)
 8014386:	18fb      	adds	r3, r7, r3
 8014388:	2200      	movs	r2, #0
 801438a:	701a      	strb	r2, [r3, #0]
 801438c:	e00e      	b.n	80143ac <Cursor_flash+0xfc>
		{
			Font_1Bit_To_4Bit(Pointright[i]);
 801438e:	4c2f      	ldr	r4, [pc, #188]	; (801444c <Cursor_flash+0x19c>)
 8014390:	193b      	adds	r3, r7, r4
 8014392:	781a      	ldrb	r2, [r3, #0]
 8014394:	4b2e      	ldr	r3, [pc, #184]	; (8014450 <Cursor_flash+0x1a0>)
 8014396:	0052      	lsls	r2, r2, #1
 8014398:	5ad3      	ldrh	r3, [r2, r3]
 801439a:	b2db      	uxtb	r3, r3
 801439c:	0018      	movs	r0, r3
 801439e:	f7fd fd39 	bl	8011e14 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 80143a2:	193b      	adds	r3, r7, r4
 80143a4:	781a      	ldrb	r2, [r3, #0]
 80143a6:	193b      	adds	r3, r7, r4
 80143a8:	3201      	adds	r2, #1
 80143aa:	701a      	strb	r2, [r3, #0]
 80143ac:	4b27      	ldr	r3, [pc, #156]	; (801444c <Cursor_flash+0x19c>)
 80143ae:	18fb      	adds	r3, r7, r3
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	2b0f      	cmp	r3, #15
 80143b4:	d9eb      	bls.n	801438e <Cursor_flash+0xde>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断

	}


}
 80143b6:	e033      	b.n	8014420 <Cursor_flash+0x170>
		Set_Column_Address(0x00,0x3f);//0到63列
 80143b8:	213f      	movs	r1, #63	; 0x3f
 80143ba:	2000      	movs	r0, #0
 80143bc:	f7fe f9da 	bl	8012774 <Set_Column_Address>
		Set_Row_Address(0x00,15);   //0到15行
 80143c0:	210f      	movs	r1, #15
 80143c2:	2000      	movs	r0, #0
 80143c4:	f7fe f9f4 	bl	80127b0 <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 80143c8:	205c      	movs	r0, #92	; 0x5c
 80143ca:	f7fd fc0f 	bl	8011bec <SPI_OLED_SendCommond>
		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80143ce:	4b21      	ldr	r3, [pc, #132]	; (8014454 <Cursor_flash+0x1a4>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	68da      	ldr	r2, [r3, #12]
 80143d4:	4b1f      	ldr	r3, [pc, #124]	; (8014454 <Cursor_flash+0x1a4>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	2101      	movs	r1, #1
 80143da:	438a      	bics	r2, r1
 80143dc:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 80143de:	4b1e      	ldr	r3, [pc, #120]	; (8014458 <Cursor_flash+0x1a8>)
 80143e0:	2201      	movs	r2, #1
 80143e2:	2102      	movs	r1, #2
 80143e4:	0018      	movs	r0, r3
 80143e6:	f7f2 fda4 	bl	8006f32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 80143ea:	4b1b      	ldr	r3, [pc, #108]	; (8014458 <Cursor_flash+0x1a8>)
 80143ec:	2200      	movs	r2, #0
 80143ee:	2101      	movs	r1, #1
 80143f0:	0018      	movs	r0, r3
 80143f2:	f7f2 fd9e 	bl	8006f32 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,clear_arry,32*64,100);
 80143f6:	2380      	movs	r3, #128	; 0x80
 80143f8:	011a      	lsls	r2, r3, #4
 80143fa:	1d39      	adds	r1, r7, #4
 80143fc:	4817      	ldr	r0, [pc, #92]	; (801445c <Cursor_flash+0x1ac>)
 80143fe:	2364      	movs	r3, #100	; 0x64
 8014400:	f7f3 fca6 	bl	8007d50 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8014404:	4b14      	ldr	r3, [pc, #80]	; (8014458 <Cursor_flash+0x1a8>)
 8014406:	2201      	movs	r2, #1
 8014408:	2101      	movs	r1, #1
 801440a:	0018      	movs	r0, r3
 801440c:	f7f2 fd91 	bl	8006f32 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8014410:	4b10      	ldr	r3, [pc, #64]	; (8014454 <Cursor_flash+0x1a4>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68da      	ldr	r2, [r3, #12]
 8014416:	4b0f      	ldr	r3, [pc, #60]	; (8014454 <Cursor_flash+0x1a4>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2101      	movs	r1, #1
 801441c:	430a      	orrs	r2, r1
 801441e:	60da      	str	r2, [r3, #12]
}
 8014420:	46c0      	nop			; (mov r8, r8)
 8014422:	46bd      	mov	sp, r7
 8014424:	4b0e      	ldr	r3, [pc, #56]	; (8014460 <Cursor_flash+0x1b0>)
 8014426:	449d      	add	sp, r3
 8014428:	bd90      	pop	{r4, r7, pc}
 801442a:	46c0      	nop			; (mov r8, r8)
 801442c:	fffff7f4 	.word	0xfffff7f4
 8014430:	fffff7fc 	.word	0xfffff7fc
 8014434:	00000808 	.word	0x00000808
 8014438:	000007fc 	.word	0x000007fc
 801443c:	20003a8c 	.word	0x20003a8c
 8014440:	2000398e 	.word	0x2000398e
 8014444:	00000807 	.word	0x00000807
 8014448:	20000600 	.word	0x20000600
 801444c:	00000806 	.word	0x00000806
 8014450:	20000620 	.word	0x20000620
 8014454:	2000347c 	.word	0x2000347c
 8014458:	50000800 	.word	0x50000800
 801445c:	200033c8 	.word	0x200033c8
 8014460:	0000080c 	.word	0x0000080c

08014464 <Cursor_flash_off>:

void Cursor_flash_off(void)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<64;i++)
 801446a:	1dfb      	adds	r3, r7, #7
 801446c:	2200      	movs	r2, #0
 801446e:	701a      	strb	r2, [r3, #0]
 8014470:	e00b      	b.n	801448a <Cursor_flash_off+0x26>
	{

		Write_Single_8x16AsicII(0,i,' ');
 8014472:	1dfb      	adds	r3, r7, #7
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	2220      	movs	r2, #32
 8014478:	0019      	movs	r1, r3
 801447a:	2000      	movs	r0, #0
 801447c:	f7fe fa50 	bl	8012920 <Write_Single_8x16AsicII>
	for(uint8_t i=0;i<64;i++)
 8014480:	1dfb      	adds	r3, r7, #7
 8014482:	781a      	ldrb	r2, [r3, #0]
 8014484:	1dfb      	adds	r3, r7, #7
 8014486:	3201      	adds	r2, #1
 8014488:	701a      	strb	r2, [r3, #0]
 801448a:	1dfb      	adds	r3, r7, #7
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	2b3f      	cmp	r3, #63	; 0x3f
 8014490:	d9ef      	bls.n	8014472 <Cursor_flash_off+0xe>

	}
	__HAL_TIM_DISABLE(&htim6);//cusor flash off
 8014492:	4b0c      	ldr	r3, [pc, #48]	; (80144c4 <Cursor_flash_off+0x60>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	6a1b      	ldr	r3, [r3, #32]
 8014498:	4a0b      	ldr	r2, [pc, #44]	; (80144c8 <Cursor_flash_off+0x64>)
 801449a:	4013      	ands	r3, r2
 801449c:	d10d      	bne.n	80144ba <Cursor_flash_off+0x56>
 801449e:	4b09      	ldr	r3, [pc, #36]	; (80144c4 <Cursor_flash_off+0x60>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	6a1b      	ldr	r3, [r3, #32]
 80144a4:	4a09      	ldr	r2, [pc, #36]	; (80144cc <Cursor_flash_off+0x68>)
 80144a6:	4013      	ands	r3, r2
 80144a8:	d107      	bne.n	80144ba <Cursor_flash_off+0x56>
 80144aa:	4b06      	ldr	r3, [pc, #24]	; (80144c4 <Cursor_flash_off+0x60>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	4b04      	ldr	r3, [pc, #16]	; (80144c4 <Cursor_flash_off+0x60>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	2101      	movs	r1, #1
 80144b6:	438a      	bics	r2, r1
 80144b8:	601a      	str	r2, [r3, #0]

}
 80144ba:	46c0      	nop			; (mov r8, r8)
 80144bc:	46bd      	mov	sp, r7
 80144be:	b002      	add	sp, #8
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	46c0      	nop			; (mov r8, r8)
 80144c4:	200034c8 	.word	0x200034c8
 80144c8:	00001111 	.word	0x00001111
 80144cc:	00000444 	.word	0x00000444

080144d0 <Cursor_flash_on>:

void Cursor_flash_on(void)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE(&htim6);//开启闪烁
 80144d4:	4b05      	ldr	r3, [pc, #20]	; (80144ec <Cursor_flash_on+0x1c>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	681a      	ldr	r2, [r3, #0]
 80144da:	4b04      	ldr	r3, [pc, #16]	; (80144ec <Cursor_flash_on+0x1c>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2101      	movs	r1, #1
 80144e0:	430a      	orrs	r2, r1
 80144e2:	601a      	str	r2, [r3, #0]
}
 80144e4:	46c0      	nop			; (mov r8, r8)
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	46c0      	nop			; (mov r8, r8)
 80144ec:	200034c8 	.word	0x200034c8

080144f0 <Display_Interface>:
  * @brief  综合各个界面的显示函数
  * @param  需要显示的界面
  * @retval None
  */
void Display_Interface(void)
{
 80144f0:	b5b0      	push	{r4, r5, r7, lr}
 80144f2:	b084      	sub	sp, #16
 80144f4:	af04      	add	r7, sp, #16
	if(Sleep_ON_OFF!=0xff)
 80144f6:	4b54      	ldr	r3, [pc, #336]	; (8014648 <Display_Interface+0x158>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	2bff      	cmp	r3, #255	; 0xff
 80144fc:	d002      	beq.n	8014504 <Display_Interface+0x14>
	{
		Clear_Screen();
 80144fe:	f7fe f9b9 	bl	8012874 <Clear_Screen>
		return;
 8014502:	e09f      	b.n	8014644 <Display_Interface+0x154>
	}
	if(Last_Interface.coordinates1!=xyz.coordinates1
 8014504:	4b51      	ldr	r3, [pc, #324]	; (801464c <Display_Interface+0x15c>)
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	4b51      	ldr	r3, [pc, #324]	; (8014650 <Display_Interface+0x160>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	429a      	cmp	r2, r3
 801450e:	d10b      	bne.n	8014528 <Display_Interface+0x38>
	   ||Last_Interface.coordinates2!=xyz.coordinates2
 8014510:	4b4e      	ldr	r3, [pc, #312]	; (801464c <Display_Interface+0x15c>)
 8014512:	685a      	ldr	r2, [r3, #4]
 8014514:	4b4e      	ldr	r3, [pc, #312]	; (8014650 <Display_Interface+0x160>)
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	429a      	cmp	r2, r3
 801451a:	d105      	bne.n	8014528 <Display_Interface+0x38>
	   ||Last_Interface.coordinates3!=xyz.coordinates3)
 801451c:	4b4b      	ldr	r3, [pc, #300]	; (801464c <Display_Interface+0x15c>)
 801451e:	689a      	ldr	r2, [r3, #8]
 8014520:	4b4b      	ldr	r3, [pc, #300]	; (8014650 <Display_Interface+0x160>)
 8014522:	689b      	ldr	r3, [r3, #8]
 8014524:	429a      	cmp	r2, r3
 8014526:	d001      	beq.n	801452c <Display_Interface+0x3c>
	{
		Clear_Screen();
 8014528:	f7fe f9a4 	bl	8012874 <Clear_Screen>

	}
	/*main interface*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 801452c:	4b48      	ldr	r3, [pc, #288]	; (8014650 <Display_Interface+0x160>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d11b      	bne.n	801456c <Display_Interface+0x7c>
 8014534:	4b46      	ldr	r3, [pc, #280]	; (8014650 <Display_Interface+0x160>)
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d117      	bne.n	801456c <Display_Interface+0x7c>
 801453c:	4b44      	ldr	r3, [pc, #272]	; (8014650 <Display_Interface+0x160>)
 801453e:	689b      	ldr	r3, [r3, #8]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d113      	bne.n	801456c <Display_Interface+0x7c>
	{
		Display_Main_Interface(Voltage_real,Current_real,ON_OFF,CV_CC_CP,Actual,LOCK_UNLOCK,Shift_Not_Shift);
 8014544:	4b43      	ldr	r3, [pc, #268]	; (8014654 <Display_Interface+0x164>)
 8014546:	6818      	ldr	r0, [r3, #0]
 8014548:	4b43      	ldr	r3, [pc, #268]	; (8014658 <Display_Interface+0x168>)
 801454a:	6819      	ldr	r1, [r3, #0]
 801454c:	4b43      	ldr	r3, [pc, #268]	; (801465c <Display_Interface+0x16c>)
 801454e:	781c      	ldrb	r4, [r3, #0]
 8014550:	4b43      	ldr	r3, [pc, #268]	; (8014660 <Display_Interface+0x170>)
 8014552:	781d      	ldrb	r5, [r3, #0]
 8014554:	4b43      	ldr	r3, [pc, #268]	; (8014664 <Display_Interface+0x174>)
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	4a43      	ldr	r2, [pc, #268]	; (8014668 <Display_Interface+0x178>)
 801455a:	7812      	ldrb	r2, [r2, #0]
 801455c:	9202      	str	r2, [sp, #8]
 801455e:	9301      	str	r3, [sp, #4]
 8014560:	2300      	movs	r3, #0
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	002b      	movs	r3, r5
 8014566:	0022      	movs	r2, r4
 8014568:	f7ff f82e 	bl	80135c8 <Display_Main_Interface>
	}
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates3==0))
 801456c:	4b38      	ldr	r3, [pc, #224]	; (8014650 <Display_Interface+0x160>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2b01      	cmp	r3, #1
 8014572:	d108      	bne.n	8014586 <Display_Interface+0x96>
 8014574:	4b36      	ldr	r3, [pc, #216]	; (8014650 <Display_Interface+0x160>)
 8014576:	689b      	ldr	r3, [r3, #8]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d104      	bne.n	8014586 <Display_Interface+0x96>
	{
		Display_Menu_Function_Interface_First_Menu(xyz.coordinates2);
 801457c:	4b34      	ldr	r3, [pc, #208]	; (8014650 <Display_Interface+0x160>)
 801457e:	685b      	ldr	r3, [r3, #4]
 8014580:	0018      	movs	r0, r3
 8014582:	f7ff fa4b 	bl	8013a1c <Display_Menu_Function_Interface_First_Menu>
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 8014586:	4b32      	ldr	r3, [pc, #200]	; (8014650 <Display_Interface+0x160>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	2b01      	cmp	r3, #1
 801458c:	d10f      	bne.n	80145ae <Display_Interface+0xbe>
 801458e:	4b30      	ldr	r3, [pc, #192]	; (8014650 <Display_Interface+0x160>)
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00b      	beq.n	80145ae <Display_Interface+0xbe>
 8014596:	4b2e      	ldr	r3, [pc, #184]	; (8014650 <Display_Interface+0x160>)
 8014598:	689b      	ldr	r3, [r3, #8]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d007      	beq.n	80145ae <Display_Interface+0xbe>
	{
		Display_Menu_Function_Interface_Second_Menu(xyz.coordinates2,xyz.coordinates3);
 801459e:	4b2c      	ldr	r3, [pc, #176]	; (8014650 <Display_Interface+0x160>)
 80145a0:	685a      	ldr	r2, [r3, #4]
 80145a2:	4b2b      	ldr	r3, [pc, #172]	; (8014650 <Display_Interface+0x160>)
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	0019      	movs	r1, r3
 80145a8:	0010      	movs	r0, r2
 80145aa:	f7ff fcd9 	bl	8013f60 <Display_Menu_Function_Interface_Second_Menu>
	}
	/*V_set I_set*/
	if(xyz.coordinates1==2)
 80145ae:	4b28      	ldr	r3, [pc, #160]	; (8014650 <Display_Interface+0x160>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2b02      	cmp	r3, #2
 80145b4:	d10c      	bne.n	80145d0 <Display_Interface+0xe0>
	{
		if(xyz.coordinates2==1 ) 	 Display_Main_Interface_I_set();
 80145b6:	4b26      	ldr	r3, [pc, #152]	; (8014650 <Display_Interface+0x160>)
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d102      	bne.n	80145c4 <Display_Interface+0xd4>
 80145be:	f7fe febf 	bl	8013340 <Display_Main_Interface_I_set>
 80145c2:	e005      	b.n	80145d0 <Display_Interface+0xe0>
		else if(xyz.coordinates2==2) Display_Main_Interface_V_set();
 80145c4:	4b22      	ldr	r3, [pc, #136]	; (8014650 <Display_Interface+0x160>)
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	2b02      	cmp	r3, #2
 80145ca:	d101      	bne.n	80145d0 <Display_Interface+0xe0>
 80145cc:	f7fe fd6e 	bl	80130ac <Display_Main_Interface_V_set>
	}
	/*Reacll Save*/
	if(xyz.coordinates1==3)
 80145d0:	4b1f      	ldr	r3, [pc, #124]	; (8014650 <Display_Interface+0x160>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	2b03      	cmp	r3, #3
 80145d6:	d114      	bne.n	8014602 <Display_Interface+0x112>
		if(xyz.coordinates3==0)
		{
			//Display_Access_Interface_default(Recall_Save,Recall_Save_Number);
		}
		//save
		if( (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 80145d8:	4b1d      	ldr	r3, [pc, #116]	; (8014650 <Display_Interface+0x160>)
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	2b01      	cmp	r3, #1
 80145de:	d106      	bne.n	80145ee <Display_Interface+0xfe>
 80145e0:	4b1b      	ldr	r3, [pc, #108]	; (8014650 <Display_Interface+0x160>)
 80145e2:	689b      	ldr	r3, [r3, #8]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d002      	beq.n	80145ee <Display_Interface+0xfe>
		{
			Display_Access_Interface_Save();
 80145e8:	f7ff f968 	bl	80138bc <Display_Access_Interface_Save>
 80145ec:	e009      	b.n	8014602 <Display_Interface+0x112>
		}
		//recall
		else if( (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 80145ee:	4b18      	ldr	r3, [pc, #96]	; (8014650 <Display_Interface+0x160>)
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	2b02      	cmp	r3, #2
 80145f4:	d105      	bne.n	8014602 <Display_Interface+0x112>
 80145f6:	4b16      	ldr	r3, [pc, #88]	; (8014650 <Display_Interface+0x160>)
 80145f8:	689b      	ldr	r3, [r3, #8]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d001      	beq.n	8014602 <Display_Interface+0x112>
		{
			Display_Access_Interface_Recall();
 80145fe:	f7ff f9a3 	bl	8013948 <Display_Access_Interface_Recall>
		}

	}
	/*Protect*/
	if(xyz.coordinates1==4)
 8014602:	4b13      	ldr	r3, [pc, #76]	; (8014650 <Display_Interface+0x160>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	2b04      	cmp	r3, #4
 8014608:	d104      	bne.n	8014614 <Display_Interface+0x124>
	{
		Display_Protect_Interface(Error);
 801460a:	4b18      	ldr	r3, [pc, #96]	; (801466c <Display_Interface+0x17c>)
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	0018      	movs	r0, r3
 8014610:	f7ff fce6 	bl	8013fe0 <Display_Protect_Interface>
	}
	/*advance interface*/
	if((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 8014614:	4b0e      	ldr	r3, [pc, #56]	; (8014650 <Display_Interface+0x160>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2b09      	cmp	r3, #9
 801461a:	d10f      	bne.n	801463c <Display_Interface+0x14c>
 801461c:	4b0c      	ldr	r3, [pc, #48]	; (8014650 <Display_Interface+0x160>)
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	2b09      	cmp	r3, #9
 8014622:	d10b      	bne.n	801463c <Display_Interface+0x14c>
 8014624:	4b0a      	ldr	r3, [pc, #40]	; (8014650 <Display_Interface+0x160>)
 8014626:	689b      	ldr	r3, [r3, #8]
 8014628:	2b09      	cmp	r3, #9
 801462a:	d107      	bne.n	801463c <Display_Interface+0x14c>
	{
		Display_Param_Interface(Set_Voltage,Set_Current);
 801462c:	4b10      	ldr	r3, [pc, #64]	; (8014670 <Display_Interface+0x180>)
 801462e:	881a      	ldrh	r2, [r3, #0]
 8014630:	4b10      	ldr	r3, [pc, #64]	; (8014674 <Display_Interface+0x184>)
 8014632:	881b      	ldrh	r3, [r3, #0]
 8014634:	0019      	movs	r1, r3
 8014636:	0010      	movs	r0, r2
 8014638:	f7ff f804 	bl	8013644 <Display_Param_Interface>
	}

	Last_Interface=xyz;//记录退出前界面
 801463c:	4b03      	ldr	r3, [pc, #12]	; (801464c <Display_Interface+0x15c>)
 801463e:	4a04      	ldr	r2, [pc, #16]	; (8014650 <Display_Interface+0x160>)
 8014640:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014642:	c313      	stmia	r3!, {r0, r1, r4}

}
 8014644:	46bd      	mov	sp, r7
 8014646:	bdb0      	pop	{r4, r5, r7, pc}
 8014648:	20002fd1 	.word	0x20002fd1
 801464c:	20003a00 	.word	0x20003a00
 8014650:	200039f4 	.word	0x200039f4
 8014654:	200039ec 	.word	0x200039ec
 8014658:	200039f0 	.word	0x200039f0
 801465c:	20003988 	.word	0x20003988
 8014660:	2000398a 	.word	0x2000398a
 8014664:	2000398b 	.word	0x2000398b
 8014668:	20003987 	.word	0x20003987
 801466c:	200039d9 	.word	0x200039d9
 8014670:	20002fd8 	.word	0x20002fd8
 8014674:	20002fda 	.word	0x20002fda

08014678 <__errno>:
 8014678:	4b01      	ldr	r3, [pc, #4]	; (8014680 <__errno+0x8>)
 801467a:	6818      	ldr	r0, [r3, #0]
 801467c:	4770      	bx	lr
 801467e:	46c0      	nop			; (mov r8, r8)
 8014680:	200030d8 	.word	0x200030d8

08014684 <__libc_init_array>:
 8014684:	b570      	push	{r4, r5, r6, lr}
 8014686:	2600      	movs	r6, #0
 8014688:	4d0c      	ldr	r5, [pc, #48]	; (80146bc <__libc_init_array+0x38>)
 801468a:	4c0d      	ldr	r4, [pc, #52]	; (80146c0 <__libc_init_array+0x3c>)
 801468c:	1b64      	subs	r4, r4, r5
 801468e:	10a4      	asrs	r4, r4, #2
 8014690:	42a6      	cmp	r6, r4
 8014692:	d109      	bne.n	80146a8 <__libc_init_array+0x24>
 8014694:	2600      	movs	r6, #0
 8014696:	f003 fe99 	bl	80183cc <_init>
 801469a:	4d0a      	ldr	r5, [pc, #40]	; (80146c4 <__libc_init_array+0x40>)
 801469c:	4c0a      	ldr	r4, [pc, #40]	; (80146c8 <__libc_init_array+0x44>)
 801469e:	1b64      	subs	r4, r4, r5
 80146a0:	10a4      	asrs	r4, r4, #2
 80146a2:	42a6      	cmp	r6, r4
 80146a4:	d105      	bne.n	80146b2 <__libc_init_array+0x2e>
 80146a6:	bd70      	pop	{r4, r5, r6, pc}
 80146a8:	00b3      	lsls	r3, r6, #2
 80146aa:	58eb      	ldr	r3, [r5, r3]
 80146ac:	4798      	blx	r3
 80146ae:	3601      	adds	r6, #1
 80146b0:	e7ee      	b.n	8014690 <__libc_init_array+0xc>
 80146b2:	00b3      	lsls	r3, r6, #2
 80146b4:	58eb      	ldr	r3, [r5, r3]
 80146b6:	4798      	blx	r3
 80146b8:	3601      	adds	r6, #1
 80146ba:	e7f2      	b.n	80146a2 <__libc_init_array+0x1e>
 80146bc:	08018ea8 	.word	0x08018ea8
 80146c0:	08018ea8 	.word	0x08018ea8
 80146c4:	08018ea8 	.word	0x08018ea8
 80146c8:	08018eac 	.word	0x08018eac

080146cc <malloc>:
 80146cc:	b510      	push	{r4, lr}
 80146ce:	4b03      	ldr	r3, [pc, #12]	; (80146dc <malloc+0x10>)
 80146d0:	0001      	movs	r1, r0
 80146d2:	6818      	ldr	r0, [r3, #0]
 80146d4:	f000 f882 	bl	80147dc <_malloc_r>
 80146d8:	bd10      	pop	{r4, pc}
 80146da:	46c0      	nop			; (mov r8, r8)
 80146dc:	200030d8 	.word	0x200030d8

080146e0 <memcpy>:
 80146e0:	2300      	movs	r3, #0
 80146e2:	b510      	push	{r4, lr}
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d100      	bne.n	80146ea <memcpy+0xa>
 80146e8:	bd10      	pop	{r4, pc}
 80146ea:	5ccc      	ldrb	r4, [r1, r3]
 80146ec:	54c4      	strb	r4, [r0, r3]
 80146ee:	3301      	adds	r3, #1
 80146f0:	e7f8      	b.n	80146e4 <memcpy+0x4>

080146f2 <memset>:
 80146f2:	0003      	movs	r3, r0
 80146f4:	1882      	adds	r2, r0, r2
 80146f6:	4293      	cmp	r3, r2
 80146f8:	d100      	bne.n	80146fc <memset+0xa>
 80146fa:	4770      	bx	lr
 80146fc:	7019      	strb	r1, [r3, #0]
 80146fe:	3301      	adds	r3, #1
 8014700:	e7f9      	b.n	80146f6 <memset+0x4>
	...

08014704 <_free_r>:
 8014704:	b570      	push	{r4, r5, r6, lr}
 8014706:	0005      	movs	r5, r0
 8014708:	2900      	cmp	r1, #0
 801470a:	d010      	beq.n	801472e <_free_r+0x2a>
 801470c:	1f0c      	subs	r4, r1, #4
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	2b00      	cmp	r3, #0
 8014712:	da00      	bge.n	8014716 <_free_r+0x12>
 8014714:	18e4      	adds	r4, r4, r3
 8014716:	0028      	movs	r0, r5
 8014718:	f001 fc2c 	bl	8015f74 <__malloc_lock>
 801471c:	4a1d      	ldr	r2, [pc, #116]	; (8014794 <_free_r+0x90>)
 801471e:	6813      	ldr	r3, [r2, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d105      	bne.n	8014730 <_free_r+0x2c>
 8014724:	6063      	str	r3, [r4, #4]
 8014726:	6014      	str	r4, [r2, #0]
 8014728:	0028      	movs	r0, r5
 801472a:	f001 fc2b 	bl	8015f84 <__malloc_unlock>
 801472e:	bd70      	pop	{r4, r5, r6, pc}
 8014730:	42a3      	cmp	r3, r4
 8014732:	d908      	bls.n	8014746 <_free_r+0x42>
 8014734:	6821      	ldr	r1, [r4, #0]
 8014736:	1860      	adds	r0, r4, r1
 8014738:	4283      	cmp	r3, r0
 801473a:	d1f3      	bne.n	8014724 <_free_r+0x20>
 801473c:	6818      	ldr	r0, [r3, #0]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	1841      	adds	r1, r0, r1
 8014742:	6021      	str	r1, [r4, #0]
 8014744:	e7ee      	b.n	8014724 <_free_r+0x20>
 8014746:	001a      	movs	r2, r3
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d001      	beq.n	8014752 <_free_r+0x4e>
 801474e:	42a3      	cmp	r3, r4
 8014750:	d9f9      	bls.n	8014746 <_free_r+0x42>
 8014752:	6811      	ldr	r1, [r2, #0]
 8014754:	1850      	adds	r0, r2, r1
 8014756:	42a0      	cmp	r0, r4
 8014758:	d10b      	bne.n	8014772 <_free_r+0x6e>
 801475a:	6820      	ldr	r0, [r4, #0]
 801475c:	1809      	adds	r1, r1, r0
 801475e:	1850      	adds	r0, r2, r1
 8014760:	6011      	str	r1, [r2, #0]
 8014762:	4283      	cmp	r3, r0
 8014764:	d1e0      	bne.n	8014728 <_free_r+0x24>
 8014766:	6818      	ldr	r0, [r3, #0]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	1841      	adds	r1, r0, r1
 801476c:	6011      	str	r1, [r2, #0]
 801476e:	6053      	str	r3, [r2, #4]
 8014770:	e7da      	b.n	8014728 <_free_r+0x24>
 8014772:	42a0      	cmp	r0, r4
 8014774:	d902      	bls.n	801477c <_free_r+0x78>
 8014776:	230c      	movs	r3, #12
 8014778:	602b      	str	r3, [r5, #0]
 801477a:	e7d5      	b.n	8014728 <_free_r+0x24>
 801477c:	6821      	ldr	r1, [r4, #0]
 801477e:	1860      	adds	r0, r4, r1
 8014780:	4283      	cmp	r3, r0
 8014782:	d103      	bne.n	801478c <_free_r+0x88>
 8014784:	6818      	ldr	r0, [r3, #0]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	1841      	adds	r1, r0, r1
 801478a:	6021      	str	r1, [r4, #0]
 801478c:	6063      	str	r3, [r4, #4]
 801478e:	6054      	str	r4, [r2, #4]
 8014790:	e7ca      	b.n	8014728 <_free_r+0x24>
 8014792:	46c0      	nop			; (mov r8, r8)
 8014794:	20003a90 	.word	0x20003a90

08014798 <sbrk_aligned>:
 8014798:	b570      	push	{r4, r5, r6, lr}
 801479a:	4e0f      	ldr	r6, [pc, #60]	; (80147d8 <sbrk_aligned+0x40>)
 801479c:	000d      	movs	r5, r1
 801479e:	6831      	ldr	r1, [r6, #0]
 80147a0:	0004      	movs	r4, r0
 80147a2:	2900      	cmp	r1, #0
 80147a4:	d102      	bne.n	80147ac <sbrk_aligned+0x14>
 80147a6:	f000 fcfd 	bl	80151a4 <_sbrk_r>
 80147aa:	6030      	str	r0, [r6, #0]
 80147ac:	0029      	movs	r1, r5
 80147ae:	0020      	movs	r0, r4
 80147b0:	f000 fcf8 	bl	80151a4 <_sbrk_r>
 80147b4:	1c43      	adds	r3, r0, #1
 80147b6:	d00a      	beq.n	80147ce <sbrk_aligned+0x36>
 80147b8:	2303      	movs	r3, #3
 80147ba:	1cc5      	adds	r5, r0, #3
 80147bc:	439d      	bics	r5, r3
 80147be:	42a8      	cmp	r0, r5
 80147c0:	d007      	beq.n	80147d2 <sbrk_aligned+0x3a>
 80147c2:	1a29      	subs	r1, r5, r0
 80147c4:	0020      	movs	r0, r4
 80147c6:	f000 fced 	bl	80151a4 <_sbrk_r>
 80147ca:	1c43      	adds	r3, r0, #1
 80147cc:	d101      	bne.n	80147d2 <sbrk_aligned+0x3a>
 80147ce:	2501      	movs	r5, #1
 80147d0:	426d      	negs	r5, r5
 80147d2:	0028      	movs	r0, r5
 80147d4:	bd70      	pop	{r4, r5, r6, pc}
 80147d6:	46c0      	nop			; (mov r8, r8)
 80147d8:	20003a94 	.word	0x20003a94

080147dc <_malloc_r>:
 80147dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147de:	2203      	movs	r2, #3
 80147e0:	1ccb      	adds	r3, r1, #3
 80147e2:	4393      	bics	r3, r2
 80147e4:	3308      	adds	r3, #8
 80147e6:	0006      	movs	r6, r0
 80147e8:	001f      	movs	r7, r3
 80147ea:	2b0c      	cmp	r3, #12
 80147ec:	d232      	bcs.n	8014854 <_malloc_r+0x78>
 80147ee:	270c      	movs	r7, #12
 80147f0:	42b9      	cmp	r1, r7
 80147f2:	d831      	bhi.n	8014858 <_malloc_r+0x7c>
 80147f4:	0030      	movs	r0, r6
 80147f6:	f001 fbbd 	bl	8015f74 <__malloc_lock>
 80147fa:	4d32      	ldr	r5, [pc, #200]	; (80148c4 <_malloc_r+0xe8>)
 80147fc:	682b      	ldr	r3, [r5, #0]
 80147fe:	001c      	movs	r4, r3
 8014800:	2c00      	cmp	r4, #0
 8014802:	d12e      	bne.n	8014862 <_malloc_r+0x86>
 8014804:	0039      	movs	r1, r7
 8014806:	0030      	movs	r0, r6
 8014808:	f7ff ffc6 	bl	8014798 <sbrk_aligned>
 801480c:	0004      	movs	r4, r0
 801480e:	1c43      	adds	r3, r0, #1
 8014810:	d11e      	bne.n	8014850 <_malloc_r+0x74>
 8014812:	682c      	ldr	r4, [r5, #0]
 8014814:	0025      	movs	r5, r4
 8014816:	2d00      	cmp	r5, #0
 8014818:	d14a      	bne.n	80148b0 <_malloc_r+0xd4>
 801481a:	6823      	ldr	r3, [r4, #0]
 801481c:	0029      	movs	r1, r5
 801481e:	18e3      	adds	r3, r4, r3
 8014820:	0030      	movs	r0, r6
 8014822:	9301      	str	r3, [sp, #4]
 8014824:	f000 fcbe 	bl	80151a4 <_sbrk_r>
 8014828:	9b01      	ldr	r3, [sp, #4]
 801482a:	4283      	cmp	r3, r0
 801482c:	d143      	bne.n	80148b6 <_malloc_r+0xda>
 801482e:	6823      	ldr	r3, [r4, #0]
 8014830:	3703      	adds	r7, #3
 8014832:	1aff      	subs	r7, r7, r3
 8014834:	2303      	movs	r3, #3
 8014836:	439f      	bics	r7, r3
 8014838:	3708      	adds	r7, #8
 801483a:	2f0c      	cmp	r7, #12
 801483c:	d200      	bcs.n	8014840 <_malloc_r+0x64>
 801483e:	270c      	movs	r7, #12
 8014840:	0039      	movs	r1, r7
 8014842:	0030      	movs	r0, r6
 8014844:	f7ff ffa8 	bl	8014798 <sbrk_aligned>
 8014848:	1c43      	adds	r3, r0, #1
 801484a:	d034      	beq.n	80148b6 <_malloc_r+0xda>
 801484c:	6823      	ldr	r3, [r4, #0]
 801484e:	19df      	adds	r7, r3, r7
 8014850:	6027      	str	r7, [r4, #0]
 8014852:	e013      	b.n	801487c <_malloc_r+0xa0>
 8014854:	2b00      	cmp	r3, #0
 8014856:	dacb      	bge.n	80147f0 <_malloc_r+0x14>
 8014858:	230c      	movs	r3, #12
 801485a:	2500      	movs	r5, #0
 801485c:	6033      	str	r3, [r6, #0]
 801485e:	0028      	movs	r0, r5
 8014860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014862:	6822      	ldr	r2, [r4, #0]
 8014864:	1bd1      	subs	r1, r2, r7
 8014866:	d420      	bmi.n	80148aa <_malloc_r+0xce>
 8014868:	290b      	cmp	r1, #11
 801486a:	d917      	bls.n	801489c <_malloc_r+0xc0>
 801486c:	19e2      	adds	r2, r4, r7
 801486e:	6027      	str	r7, [r4, #0]
 8014870:	42a3      	cmp	r3, r4
 8014872:	d111      	bne.n	8014898 <_malloc_r+0xbc>
 8014874:	602a      	str	r2, [r5, #0]
 8014876:	6863      	ldr	r3, [r4, #4]
 8014878:	6011      	str	r1, [r2, #0]
 801487a:	6053      	str	r3, [r2, #4]
 801487c:	0030      	movs	r0, r6
 801487e:	0025      	movs	r5, r4
 8014880:	f001 fb80 	bl	8015f84 <__malloc_unlock>
 8014884:	2207      	movs	r2, #7
 8014886:	350b      	adds	r5, #11
 8014888:	1d23      	adds	r3, r4, #4
 801488a:	4395      	bics	r5, r2
 801488c:	1aea      	subs	r2, r5, r3
 801488e:	429d      	cmp	r5, r3
 8014890:	d0e5      	beq.n	801485e <_malloc_r+0x82>
 8014892:	1b5b      	subs	r3, r3, r5
 8014894:	50a3      	str	r3, [r4, r2]
 8014896:	e7e2      	b.n	801485e <_malloc_r+0x82>
 8014898:	605a      	str	r2, [r3, #4]
 801489a:	e7ec      	b.n	8014876 <_malloc_r+0x9a>
 801489c:	6862      	ldr	r2, [r4, #4]
 801489e:	42a3      	cmp	r3, r4
 80148a0:	d101      	bne.n	80148a6 <_malloc_r+0xca>
 80148a2:	602a      	str	r2, [r5, #0]
 80148a4:	e7ea      	b.n	801487c <_malloc_r+0xa0>
 80148a6:	605a      	str	r2, [r3, #4]
 80148a8:	e7e8      	b.n	801487c <_malloc_r+0xa0>
 80148aa:	0023      	movs	r3, r4
 80148ac:	6864      	ldr	r4, [r4, #4]
 80148ae:	e7a7      	b.n	8014800 <_malloc_r+0x24>
 80148b0:	002c      	movs	r4, r5
 80148b2:	686d      	ldr	r5, [r5, #4]
 80148b4:	e7af      	b.n	8014816 <_malloc_r+0x3a>
 80148b6:	230c      	movs	r3, #12
 80148b8:	0030      	movs	r0, r6
 80148ba:	6033      	str	r3, [r6, #0]
 80148bc:	f001 fb62 	bl	8015f84 <__malloc_unlock>
 80148c0:	e7cd      	b.n	801485e <_malloc_r+0x82>
 80148c2:	46c0      	nop			; (mov r8, r8)
 80148c4:	20003a90 	.word	0x20003a90

080148c8 <__cvt>:
 80148c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148ca:	001e      	movs	r6, r3
 80148cc:	2300      	movs	r3, #0
 80148ce:	0014      	movs	r4, r2
 80148d0:	b08b      	sub	sp, #44	; 0x2c
 80148d2:	429e      	cmp	r6, r3
 80148d4:	da04      	bge.n	80148e0 <__cvt+0x18>
 80148d6:	2180      	movs	r1, #128	; 0x80
 80148d8:	0609      	lsls	r1, r1, #24
 80148da:	1873      	adds	r3, r6, r1
 80148dc:	001e      	movs	r6, r3
 80148de:	232d      	movs	r3, #45	; 0x2d
 80148e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80148e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80148e4:	7013      	strb	r3, [r2, #0]
 80148e6:	2320      	movs	r3, #32
 80148e8:	2203      	movs	r2, #3
 80148ea:	439f      	bics	r7, r3
 80148ec:	2f46      	cmp	r7, #70	; 0x46
 80148ee:	d007      	beq.n	8014900 <__cvt+0x38>
 80148f0:	003b      	movs	r3, r7
 80148f2:	3b45      	subs	r3, #69	; 0x45
 80148f4:	4259      	negs	r1, r3
 80148f6:	414b      	adcs	r3, r1
 80148f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80148fa:	3a01      	subs	r2, #1
 80148fc:	18cb      	adds	r3, r1, r3
 80148fe:	9310      	str	r3, [sp, #64]	; 0x40
 8014900:	ab09      	add	r3, sp, #36	; 0x24
 8014902:	9304      	str	r3, [sp, #16]
 8014904:	ab08      	add	r3, sp, #32
 8014906:	9303      	str	r3, [sp, #12]
 8014908:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801490a:	9200      	str	r2, [sp, #0]
 801490c:	9302      	str	r3, [sp, #8]
 801490e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014910:	0022      	movs	r2, r4
 8014912:	9301      	str	r3, [sp, #4]
 8014914:	0033      	movs	r3, r6
 8014916:	f000 fd03 	bl	8015320 <_dtoa_r>
 801491a:	0005      	movs	r5, r0
 801491c:	2f47      	cmp	r7, #71	; 0x47
 801491e:	d102      	bne.n	8014926 <__cvt+0x5e>
 8014920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014922:	07db      	lsls	r3, r3, #31
 8014924:	d528      	bpl.n	8014978 <__cvt+0xb0>
 8014926:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014928:	18eb      	adds	r3, r5, r3
 801492a:	9307      	str	r3, [sp, #28]
 801492c:	2f46      	cmp	r7, #70	; 0x46
 801492e:	d114      	bne.n	801495a <__cvt+0x92>
 8014930:	782b      	ldrb	r3, [r5, #0]
 8014932:	2b30      	cmp	r3, #48	; 0x30
 8014934:	d10c      	bne.n	8014950 <__cvt+0x88>
 8014936:	2200      	movs	r2, #0
 8014938:	2300      	movs	r3, #0
 801493a:	0020      	movs	r0, r4
 801493c:	0031      	movs	r1, r6
 801493e:	f7eb fd8b 	bl	8000458 <__aeabi_dcmpeq>
 8014942:	2800      	cmp	r0, #0
 8014944:	d104      	bne.n	8014950 <__cvt+0x88>
 8014946:	2301      	movs	r3, #1
 8014948:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801494a:	1a9b      	subs	r3, r3, r2
 801494c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801494e:	6013      	str	r3, [r2, #0]
 8014950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014952:	9a07      	ldr	r2, [sp, #28]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	18d3      	adds	r3, r2, r3
 8014958:	9307      	str	r3, [sp, #28]
 801495a:	2200      	movs	r2, #0
 801495c:	2300      	movs	r3, #0
 801495e:	0020      	movs	r0, r4
 8014960:	0031      	movs	r1, r6
 8014962:	f7eb fd79 	bl	8000458 <__aeabi_dcmpeq>
 8014966:	2800      	cmp	r0, #0
 8014968:	d001      	beq.n	801496e <__cvt+0xa6>
 801496a:	9b07      	ldr	r3, [sp, #28]
 801496c:	9309      	str	r3, [sp, #36]	; 0x24
 801496e:	2230      	movs	r2, #48	; 0x30
 8014970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014972:	9907      	ldr	r1, [sp, #28]
 8014974:	428b      	cmp	r3, r1
 8014976:	d306      	bcc.n	8014986 <__cvt+0xbe>
 8014978:	0028      	movs	r0, r5
 801497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801497e:	1b5b      	subs	r3, r3, r5
 8014980:	6013      	str	r3, [r2, #0]
 8014982:	b00b      	add	sp, #44	; 0x2c
 8014984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014986:	1c59      	adds	r1, r3, #1
 8014988:	9109      	str	r1, [sp, #36]	; 0x24
 801498a:	701a      	strb	r2, [r3, #0]
 801498c:	e7f0      	b.n	8014970 <__cvt+0xa8>

0801498e <__exponent>:
 801498e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014990:	1c83      	adds	r3, r0, #2
 8014992:	b087      	sub	sp, #28
 8014994:	9303      	str	r3, [sp, #12]
 8014996:	0005      	movs	r5, r0
 8014998:	000c      	movs	r4, r1
 801499a:	232b      	movs	r3, #43	; 0x2b
 801499c:	7002      	strb	r2, [r0, #0]
 801499e:	2900      	cmp	r1, #0
 80149a0:	da01      	bge.n	80149a6 <__exponent+0x18>
 80149a2:	424c      	negs	r4, r1
 80149a4:	3302      	adds	r3, #2
 80149a6:	706b      	strb	r3, [r5, #1]
 80149a8:	2c09      	cmp	r4, #9
 80149aa:	dd31      	ble.n	8014a10 <__exponent+0x82>
 80149ac:	270a      	movs	r7, #10
 80149ae:	ab04      	add	r3, sp, #16
 80149b0:	1dde      	adds	r6, r3, #7
 80149b2:	0020      	movs	r0, r4
 80149b4:	0039      	movs	r1, r7
 80149b6:	9601      	str	r6, [sp, #4]
 80149b8:	f7eb fd38 	bl	800042c <__aeabi_idivmod>
 80149bc:	3e01      	subs	r6, #1
 80149be:	3130      	adds	r1, #48	; 0x30
 80149c0:	0020      	movs	r0, r4
 80149c2:	7031      	strb	r1, [r6, #0]
 80149c4:	0039      	movs	r1, r7
 80149c6:	9402      	str	r4, [sp, #8]
 80149c8:	f7eb fc4a 	bl	8000260 <__divsi3>
 80149cc:	9b02      	ldr	r3, [sp, #8]
 80149ce:	0004      	movs	r4, r0
 80149d0:	2b63      	cmp	r3, #99	; 0x63
 80149d2:	dcee      	bgt.n	80149b2 <__exponent+0x24>
 80149d4:	9b01      	ldr	r3, [sp, #4]
 80149d6:	3430      	adds	r4, #48	; 0x30
 80149d8:	1e9a      	subs	r2, r3, #2
 80149da:	0013      	movs	r3, r2
 80149dc:	9903      	ldr	r1, [sp, #12]
 80149de:	7014      	strb	r4, [r2, #0]
 80149e0:	a804      	add	r0, sp, #16
 80149e2:	3007      	adds	r0, #7
 80149e4:	4298      	cmp	r0, r3
 80149e6:	d80e      	bhi.n	8014a06 <__exponent+0x78>
 80149e8:	ab04      	add	r3, sp, #16
 80149ea:	3307      	adds	r3, #7
 80149ec:	2000      	movs	r0, #0
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d804      	bhi.n	80149fc <__exponent+0x6e>
 80149f2:	ab04      	add	r3, sp, #16
 80149f4:	3009      	adds	r0, #9
 80149f6:	18c0      	adds	r0, r0, r3
 80149f8:	9b01      	ldr	r3, [sp, #4]
 80149fa:	1ac0      	subs	r0, r0, r3
 80149fc:	9b03      	ldr	r3, [sp, #12]
 80149fe:	1818      	adds	r0, r3, r0
 8014a00:	1b40      	subs	r0, r0, r5
 8014a02:	b007      	add	sp, #28
 8014a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a06:	7818      	ldrb	r0, [r3, #0]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	7008      	strb	r0, [r1, #0]
 8014a0c:	3101      	adds	r1, #1
 8014a0e:	e7e7      	b.n	80149e0 <__exponent+0x52>
 8014a10:	2330      	movs	r3, #48	; 0x30
 8014a12:	18e4      	adds	r4, r4, r3
 8014a14:	70ab      	strb	r3, [r5, #2]
 8014a16:	1d28      	adds	r0, r5, #4
 8014a18:	70ec      	strb	r4, [r5, #3]
 8014a1a:	e7f1      	b.n	8014a00 <__exponent+0x72>

08014a1c <_printf_float>:
 8014a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a1e:	b095      	sub	sp, #84	; 0x54
 8014a20:	000c      	movs	r4, r1
 8014a22:	9209      	str	r2, [sp, #36]	; 0x24
 8014a24:	001e      	movs	r6, r3
 8014a26:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014a28:	0007      	movs	r7, r0
 8014a2a:	f001 fa93 	bl	8015f54 <_localeconv_r>
 8014a2e:	6803      	ldr	r3, [r0, #0]
 8014a30:	0018      	movs	r0, r3
 8014a32:	930c      	str	r3, [sp, #48]	; 0x30
 8014a34:	f7eb fb6e 	bl	8000114 <strlen>
 8014a38:	2300      	movs	r3, #0
 8014a3a:	9312      	str	r3, [sp, #72]	; 0x48
 8014a3c:	7e23      	ldrb	r3, [r4, #24]
 8014a3e:	2207      	movs	r2, #7
 8014a40:	930a      	str	r3, [sp, #40]	; 0x28
 8014a42:	6823      	ldr	r3, [r4, #0]
 8014a44:	900e      	str	r0, [sp, #56]	; 0x38
 8014a46:	930d      	str	r3, [sp, #52]	; 0x34
 8014a48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a4a:	682b      	ldr	r3, [r5, #0]
 8014a4c:	05c9      	lsls	r1, r1, #23
 8014a4e:	d547      	bpl.n	8014ae0 <_printf_float+0xc4>
 8014a50:	189b      	adds	r3, r3, r2
 8014a52:	4393      	bics	r3, r2
 8014a54:	001a      	movs	r2, r3
 8014a56:	3208      	adds	r2, #8
 8014a58:	602a      	str	r2, [r5, #0]
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	64a2      	str	r2, [r4, #72]	; 0x48
 8014a60:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014a62:	2201      	movs	r2, #1
 8014a64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014a66:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8014a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a6a:	006b      	lsls	r3, r5, #1
 8014a6c:	085b      	lsrs	r3, r3, #1
 8014a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a72:	4ba7      	ldr	r3, [pc, #668]	; (8014d10 <_printf_float+0x2f4>)
 8014a74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014a76:	4252      	negs	r2, r2
 8014a78:	f7ee f970 	bl	8002d5c <__aeabi_dcmpun>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	d131      	bne.n	8014ae4 <_printf_float+0xc8>
 8014a80:	2201      	movs	r2, #1
 8014a82:	4ba3      	ldr	r3, [pc, #652]	; (8014d10 <_printf_float+0x2f4>)
 8014a84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014a88:	4252      	negs	r2, r2
 8014a8a:	f7eb fcf5 	bl	8000478 <__aeabi_dcmple>
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	d128      	bne.n	8014ae4 <_printf_float+0xc8>
 8014a92:	2200      	movs	r2, #0
 8014a94:	2300      	movs	r3, #0
 8014a96:	0029      	movs	r1, r5
 8014a98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a9a:	f7eb fce3 	bl	8000464 <__aeabi_dcmplt>
 8014a9e:	2800      	cmp	r0, #0
 8014aa0:	d003      	beq.n	8014aaa <_printf_float+0x8e>
 8014aa2:	0023      	movs	r3, r4
 8014aa4:	222d      	movs	r2, #45	; 0x2d
 8014aa6:	3343      	adds	r3, #67	; 0x43
 8014aa8:	701a      	strb	r2, [r3, #0]
 8014aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014aac:	4d99      	ldr	r5, [pc, #612]	; (8014d14 <_printf_float+0x2f8>)
 8014aae:	2b47      	cmp	r3, #71	; 0x47
 8014ab0:	d900      	bls.n	8014ab4 <_printf_float+0x98>
 8014ab2:	4d99      	ldr	r5, [pc, #612]	; (8014d18 <_printf_float+0x2fc>)
 8014ab4:	2303      	movs	r3, #3
 8014ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ab8:	6123      	str	r3, [r4, #16]
 8014aba:	3301      	adds	r3, #1
 8014abc:	439a      	bics	r2, r3
 8014abe:	2300      	movs	r3, #0
 8014ac0:	6022      	str	r2, [r4, #0]
 8014ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ac6:	0021      	movs	r1, r4
 8014ac8:	0038      	movs	r0, r7
 8014aca:	9600      	str	r6, [sp, #0]
 8014acc:	aa13      	add	r2, sp, #76	; 0x4c
 8014ace:	f000 f9e7 	bl	8014ea0 <_printf_common>
 8014ad2:	1c43      	adds	r3, r0, #1
 8014ad4:	d000      	beq.n	8014ad8 <_printf_float+0xbc>
 8014ad6:	e0a2      	b.n	8014c1e <_printf_float+0x202>
 8014ad8:	2001      	movs	r0, #1
 8014ada:	4240      	negs	r0, r0
 8014adc:	b015      	add	sp, #84	; 0x54
 8014ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae0:	3307      	adds	r3, #7
 8014ae2:	e7b6      	b.n	8014a52 <_printf_float+0x36>
 8014ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ae6:	002b      	movs	r3, r5
 8014ae8:	0010      	movs	r0, r2
 8014aea:	0029      	movs	r1, r5
 8014aec:	f7ee f936 	bl	8002d5c <__aeabi_dcmpun>
 8014af0:	2800      	cmp	r0, #0
 8014af2:	d00b      	beq.n	8014b0c <_printf_float+0xf0>
 8014af4:	2d00      	cmp	r5, #0
 8014af6:	da03      	bge.n	8014b00 <_printf_float+0xe4>
 8014af8:	0023      	movs	r3, r4
 8014afa:	222d      	movs	r2, #45	; 0x2d
 8014afc:	3343      	adds	r3, #67	; 0x43
 8014afe:	701a      	strb	r2, [r3, #0]
 8014b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b02:	4d86      	ldr	r5, [pc, #536]	; (8014d1c <_printf_float+0x300>)
 8014b04:	2b47      	cmp	r3, #71	; 0x47
 8014b06:	d9d5      	bls.n	8014ab4 <_printf_float+0x98>
 8014b08:	4d85      	ldr	r5, [pc, #532]	; (8014d20 <_printf_float+0x304>)
 8014b0a:	e7d3      	b.n	8014ab4 <_printf_float+0x98>
 8014b0c:	2220      	movs	r2, #32
 8014b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014b10:	6863      	ldr	r3, [r4, #4]
 8014b12:	4391      	bics	r1, r2
 8014b14:	910f      	str	r1, [sp, #60]	; 0x3c
 8014b16:	1c5a      	adds	r2, r3, #1
 8014b18:	d149      	bne.n	8014bae <_printf_float+0x192>
 8014b1a:	3307      	adds	r3, #7
 8014b1c:	6063      	str	r3, [r4, #4]
 8014b1e:	2380      	movs	r3, #128	; 0x80
 8014b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b22:	00db      	lsls	r3, r3, #3
 8014b24:	4313      	orrs	r3, r2
 8014b26:	2200      	movs	r2, #0
 8014b28:	9206      	str	r2, [sp, #24]
 8014b2a:	aa12      	add	r2, sp, #72	; 0x48
 8014b2c:	9205      	str	r2, [sp, #20]
 8014b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b30:	a908      	add	r1, sp, #32
 8014b32:	9204      	str	r2, [sp, #16]
 8014b34:	aa11      	add	r2, sp, #68	; 0x44
 8014b36:	9203      	str	r2, [sp, #12]
 8014b38:	2223      	movs	r2, #35	; 0x23
 8014b3a:	6023      	str	r3, [r4, #0]
 8014b3c:	9301      	str	r3, [sp, #4]
 8014b3e:	6863      	ldr	r3, [r4, #4]
 8014b40:	1852      	adds	r2, r2, r1
 8014b42:	9202      	str	r2, [sp, #8]
 8014b44:	9300      	str	r3, [sp, #0]
 8014b46:	0038      	movs	r0, r7
 8014b48:	002b      	movs	r3, r5
 8014b4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b4c:	f7ff febc 	bl	80148c8 <__cvt>
 8014b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b52:	0005      	movs	r5, r0
 8014b54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014b56:	2b47      	cmp	r3, #71	; 0x47
 8014b58:	d108      	bne.n	8014b6c <_printf_float+0x150>
 8014b5a:	1ccb      	adds	r3, r1, #3
 8014b5c:	db02      	blt.n	8014b64 <_printf_float+0x148>
 8014b5e:	6863      	ldr	r3, [r4, #4]
 8014b60:	4299      	cmp	r1, r3
 8014b62:	dd48      	ble.n	8014bf6 <_printf_float+0x1da>
 8014b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b66:	3b02      	subs	r3, #2
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8014b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b6e:	2b65      	cmp	r3, #101	; 0x65
 8014b70:	d824      	bhi.n	8014bbc <_printf_float+0x1a0>
 8014b72:	0020      	movs	r0, r4
 8014b74:	001a      	movs	r2, r3
 8014b76:	3901      	subs	r1, #1
 8014b78:	3050      	adds	r0, #80	; 0x50
 8014b7a:	9111      	str	r1, [sp, #68]	; 0x44
 8014b7c:	f7ff ff07 	bl	801498e <__exponent>
 8014b80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b82:	900b      	str	r0, [sp, #44]	; 0x2c
 8014b84:	1813      	adds	r3, r2, r0
 8014b86:	6123      	str	r3, [r4, #16]
 8014b88:	2a01      	cmp	r2, #1
 8014b8a:	dc02      	bgt.n	8014b92 <_printf_float+0x176>
 8014b8c:	6822      	ldr	r2, [r4, #0]
 8014b8e:	07d2      	lsls	r2, r2, #31
 8014b90:	d501      	bpl.n	8014b96 <_printf_float+0x17a>
 8014b92:	3301      	adds	r3, #1
 8014b94:	6123      	str	r3, [r4, #16]
 8014b96:	2323      	movs	r3, #35	; 0x23
 8014b98:	aa08      	add	r2, sp, #32
 8014b9a:	189b      	adds	r3, r3, r2
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d100      	bne.n	8014ba4 <_printf_float+0x188>
 8014ba2:	e78f      	b.n	8014ac4 <_printf_float+0xa8>
 8014ba4:	0023      	movs	r3, r4
 8014ba6:	222d      	movs	r2, #45	; 0x2d
 8014ba8:	3343      	adds	r3, #67	; 0x43
 8014baa:	701a      	strb	r2, [r3, #0]
 8014bac:	e78a      	b.n	8014ac4 <_printf_float+0xa8>
 8014bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bb0:	2a47      	cmp	r2, #71	; 0x47
 8014bb2:	d1b4      	bne.n	8014b1e <_printf_float+0x102>
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d1b2      	bne.n	8014b1e <_printf_float+0x102>
 8014bb8:	3301      	adds	r3, #1
 8014bba:	e7af      	b.n	8014b1c <_printf_float+0x100>
 8014bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bbe:	2b66      	cmp	r3, #102	; 0x66
 8014bc0:	d11b      	bne.n	8014bfa <_printf_float+0x1de>
 8014bc2:	6863      	ldr	r3, [r4, #4]
 8014bc4:	2900      	cmp	r1, #0
 8014bc6:	dd0d      	ble.n	8014be4 <_printf_float+0x1c8>
 8014bc8:	6121      	str	r1, [r4, #16]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d102      	bne.n	8014bd4 <_printf_float+0x1b8>
 8014bce:	6822      	ldr	r2, [r4, #0]
 8014bd0:	07d2      	lsls	r2, r2, #31
 8014bd2:	d502      	bpl.n	8014bda <_printf_float+0x1be>
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	1859      	adds	r1, r3, r1
 8014bd8:	6121      	str	r1, [r4, #16]
 8014bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8014bde:	2300      	movs	r3, #0
 8014be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8014be2:	e7d8      	b.n	8014b96 <_printf_float+0x17a>
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d103      	bne.n	8014bf0 <_printf_float+0x1d4>
 8014be8:	2201      	movs	r2, #1
 8014bea:	6821      	ldr	r1, [r4, #0]
 8014bec:	4211      	tst	r1, r2
 8014bee:	d000      	beq.n	8014bf2 <_printf_float+0x1d6>
 8014bf0:	1c9a      	adds	r2, r3, #2
 8014bf2:	6122      	str	r2, [r4, #16]
 8014bf4:	e7f1      	b.n	8014bda <_printf_float+0x1be>
 8014bf6:	2367      	movs	r3, #103	; 0x67
 8014bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8014bfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bfe:	4293      	cmp	r3, r2
 8014c00:	db06      	blt.n	8014c10 <_printf_float+0x1f4>
 8014c02:	6822      	ldr	r2, [r4, #0]
 8014c04:	6123      	str	r3, [r4, #16]
 8014c06:	07d2      	lsls	r2, r2, #31
 8014c08:	d5e7      	bpl.n	8014bda <_printf_float+0x1be>
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	6123      	str	r3, [r4, #16]
 8014c0e:	e7e4      	b.n	8014bda <_printf_float+0x1be>
 8014c10:	2101      	movs	r1, #1
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	dc01      	bgt.n	8014c1a <_printf_float+0x1fe>
 8014c16:	1849      	adds	r1, r1, r1
 8014c18:	1ac9      	subs	r1, r1, r3
 8014c1a:	1852      	adds	r2, r2, r1
 8014c1c:	e7e9      	b.n	8014bf2 <_printf_float+0x1d6>
 8014c1e:	6822      	ldr	r2, [r4, #0]
 8014c20:	0553      	lsls	r3, r2, #21
 8014c22:	d407      	bmi.n	8014c34 <_printf_float+0x218>
 8014c24:	6923      	ldr	r3, [r4, #16]
 8014c26:	002a      	movs	r2, r5
 8014c28:	0038      	movs	r0, r7
 8014c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c2c:	47b0      	blx	r6
 8014c2e:	1c43      	adds	r3, r0, #1
 8014c30:	d128      	bne.n	8014c84 <_printf_float+0x268>
 8014c32:	e751      	b.n	8014ad8 <_printf_float+0xbc>
 8014c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c36:	2b65      	cmp	r3, #101	; 0x65
 8014c38:	d800      	bhi.n	8014c3c <_printf_float+0x220>
 8014c3a:	e0e1      	b.n	8014e00 <_printf_float+0x3e4>
 8014c3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014c3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014c40:	2200      	movs	r2, #0
 8014c42:	2300      	movs	r3, #0
 8014c44:	f7eb fc08 	bl	8000458 <__aeabi_dcmpeq>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d031      	beq.n	8014cb0 <_printf_float+0x294>
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	0038      	movs	r0, r7
 8014c50:	4a34      	ldr	r2, [pc, #208]	; (8014d24 <_printf_float+0x308>)
 8014c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c54:	47b0      	blx	r6
 8014c56:	1c43      	adds	r3, r0, #1
 8014c58:	d100      	bne.n	8014c5c <_printf_float+0x240>
 8014c5a:	e73d      	b.n	8014ad8 <_printf_float+0xbc>
 8014c5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c60:	4293      	cmp	r3, r2
 8014c62:	db02      	blt.n	8014c6a <_printf_float+0x24e>
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	07db      	lsls	r3, r3, #31
 8014c68:	d50c      	bpl.n	8014c84 <_printf_float+0x268>
 8014c6a:	0038      	movs	r0, r7
 8014c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c72:	47b0      	blx	r6
 8014c74:	2500      	movs	r5, #0
 8014c76:	1c43      	adds	r3, r0, #1
 8014c78:	d100      	bne.n	8014c7c <_printf_float+0x260>
 8014c7a:	e72d      	b.n	8014ad8 <_printf_float+0xbc>
 8014c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c7e:	3b01      	subs	r3, #1
 8014c80:	42ab      	cmp	r3, r5
 8014c82:	dc0a      	bgt.n	8014c9a <_printf_float+0x27e>
 8014c84:	6823      	ldr	r3, [r4, #0]
 8014c86:	079b      	lsls	r3, r3, #30
 8014c88:	d500      	bpl.n	8014c8c <_printf_float+0x270>
 8014c8a:	e106      	b.n	8014e9a <_printf_float+0x47e>
 8014c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c8e:	68e0      	ldr	r0, [r4, #12]
 8014c90:	4298      	cmp	r0, r3
 8014c92:	db00      	blt.n	8014c96 <_printf_float+0x27a>
 8014c94:	e722      	b.n	8014adc <_printf_float+0xc0>
 8014c96:	0018      	movs	r0, r3
 8014c98:	e720      	b.n	8014adc <_printf_float+0xc0>
 8014c9a:	0022      	movs	r2, r4
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	0038      	movs	r0, r7
 8014ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ca2:	321a      	adds	r2, #26
 8014ca4:	47b0      	blx	r6
 8014ca6:	1c43      	adds	r3, r0, #1
 8014ca8:	d100      	bne.n	8014cac <_printf_float+0x290>
 8014caa:	e715      	b.n	8014ad8 <_printf_float+0xbc>
 8014cac:	3501      	adds	r5, #1
 8014cae:	e7e5      	b.n	8014c7c <_printf_float+0x260>
 8014cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	dc38      	bgt.n	8014d28 <_printf_float+0x30c>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	0038      	movs	r0, r7
 8014cba:	4a1a      	ldr	r2, [pc, #104]	; (8014d24 <_printf_float+0x308>)
 8014cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cbe:	47b0      	blx	r6
 8014cc0:	1c43      	adds	r3, r0, #1
 8014cc2:	d100      	bne.n	8014cc6 <_printf_float+0x2aa>
 8014cc4:	e708      	b.n	8014ad8 <_printf_float+0xbc>
 8014cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	d102      	bne.n	8014cd4 <_printf_float+0x2b8>
 8014cce:	6823      	ldr	r3, [r4, #0]
 8014cd0:	07db      	lsls	r3, r3, #31
 8014cd2:	d5d7      	bpl.n	8014c84 <_printf_float+0x268>
 8014cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cd6:	0038      	movs	r0, r7
 8014cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014cda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cdc:	47b0      	blx	r6
 8014cde:	1c43      	adds	r3, r0, #1
 8014ce0:	d100      	bne.n	8014ce4 <_printf_float+0x2c8>
 8014ce2:	e6f9      	b.n	8014ad8 <_printf_float+0xbc>
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8014ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cec:	425b      	negs	r3, r3
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	dc01      	bgt.n	8014cf6 <_printf_float+0x2da>
 8014cf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cf4:	e797      	b.n	8014c26 <_printf_float+0x20a>
 8014cf6:	0022      	movs	r2, r4
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	0038      	movs	r0, r7
 8014cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cfe:	321a      	adds	r2, #26
 8014d00:	47b0      	blx	r6
 8014d02:	1c43      	adds	r3, r0, #1
 8014d04:	d100      	bne.n	8014d08 <_printf_float+0x2ec>
 8014d06:	e6e7      	b.n	8014ad8 <_printf_float+0xbc>
 8014d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d0a:	3301      	adds	r3, #1
 8014d0c:	e7eb      	b.n	8014ce6 <_printf_float+0x2ca>
 8014d0e:	46c0      	nop			; (mov r8, r8)
 8014d10:	7fefffff 	.word	0x7fefffff
 8014d14:	08018aa0 	.word	0x08018aa0
 8014d18:	08018aa4 	.word	0x08018aa4
 8014d1c:	08018aa8 	.word	0x08018aa8
 8014d20:	08018aac 	.word	0x08018aac
 8014d24:	08018ab0 	.word	0x08018ab0
 8014d28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d2c:	920a      	str	r2, [sp, #40]	; 0x28
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	dd00      	ble.n	8014d34 <_printf_float+0x318>
 8014d32:	930a      	str	r3, [sp, #40]	; 0x28
 8014d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	dc3c      	bgt.n	8014db4 <_printf_float+0x398>
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8014d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d40:	43db      	mvns	r3, r3
 8014d42:	17db      	asrs	r3, r3, #31
 8014d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d4e:	4013      	ands	r3, r2
 8014d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d52:	1ad3      	subs	r3, r2, r3
 8014d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d56:	4293      	cmp	r3, r2
 8014d58:	dc34      	bgt.n	8014dc4 <_printf_float+0x3a8>
 8014d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d5e:	4293      	cmp	r3, r2
 8014d60:	db3d      	blt.n	8014dde <_printf_float+0x3c2>
 8014d62:	6823      	ldr	r3, [r4, #0]
 8014d64:	07db      	lsls	r3, r3, #31
 8014d66:	d43a      	bmi.n	8014dde <_printf_float+0x3c2>
 8014d68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014d6e:	1ad3      	subs	r3, r2, r3
 8014d70:	1a52      	subs	r2, r2, r1
 8014d72:	920a      	str	r2, [sp, #40]	; 0x28
 8014d74:	429a      	cmp	r2, r3
 8014d76:	dd00      	ble.n	8014d7a <_printf_float+0x35e>
 8014d78:	930a      	str	r3, [sp, #40]	; 0x28
 8014d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	dc36      	bgt.n	8014dee <_printf_float+0x3d2>
 8014d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d82:	2500      	movs	r5, #0
 8014d84:	43db      	mvns	r3, r3
 8014d86:	17db      	asrs	r3, r3, #31
 8014d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d90:	1a9b      	subs	r3, r3, r2
 8014d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d94:	400a      	ands	r2, r1
 8014d96:	1a9b      	subs	r3, r3, r2
 8014d98:	42ab      	cmp	r3, r5
 8014d9a:	dc00      	bgt.n	8014d9e <_printf_float+0x382>
 8014d9c:	e772      	b.n	8014c84 <_printf_float+0x268>
 8014d9e:	0022      	movs	r2, r4
 8014da0:	2301      	movs	r3, #1
 8014da2:	0038      	movs	r0, r7
 8014da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014da6:	321a      	adds	r2, #26
 8014da8:	47b0      	blx	r6
 8014daa:	1c43      	adds	r3, r0, #1
 8014dac:	d100      	bne.n	8014db0 <_printf_float+0x394>
 8014dae:	e693      	b.n	8014ad8 <_printf_float+0xbc>
 8014db0:	3501      	adds	r5, #1
 8014db2:	e7ea      	b.n	8014d8a <_printf_float+0x36e>
 8014db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014db6:	002a      	movs	r2, r5
 8014db8:	0038      	movs	r0, r7
 8014dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dbc:	47b0      	blx	r6
 8014dbe:	1c43      	adds	r3, r0, #1
 8014dc0:	d1bb      	bne.n	8014d3a <_printf_float+0x31e>
 8014dc2:	e689      	b.n	8014ad8 <_printf_float+0xbc>
 8014dc4:	0022      	movs	r2, r4
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	0038      	movs	r0, r7
 8014dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dcc:	321a      	adds	r2, #26
 8014dce:	47b0      	blx	r6
 8014dd0:	1c43      	adds	r3, r0, #1
 8014dd2:	d100      	bne.n	8014dd6 <_printf_float+0x3ba>
 8014dd4:	e680      	b.n	8014ad8 <_printf_float+0xbc>
 8014dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dd8:	3301      	adds	r3, #1
 8014dda:	930d      	str	r3, [sp, #52]	; 0x34
 8014ddc:	e7b3      	b.n	8014d46 <_printf_float+0x32a>
 8014dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014de0:	0038      	movs	r0, r7
 8014de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014de6:	47b0      	blx	r6
 8014de8:	1c43      	adds	r3, r0, #1
 8014dea:	d1bd      	bne.n	8014d68 <_printf_float+0x34c>
 8014dec:	e674      	b.n	8014ad8 <_printf_float+0xbc>
 8014dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014df0:	0038      	movs	r0, r7
 8014df2:	18ea      	adds	r2, r5, r3
 8014df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014df8:	47b0      	blx	r6
 8014dfa:	1c43      	adds	r3, r0, #1
 8014dfc:	d1c0      	bne.n	8014d80 <_printf_float+0x364>
 8014dfe:	e66b      	b.n	8014ad8 <_printf_float+0xbc>
 8014e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e02:	2b01      	cmp	r3, #1
 8014e04:	dc02      	bgt.n	8014e0c <_printf_float+0x3f0>
 8014e06:	2301      	movs	r3, #1
 8014e08:	421a      	tst	r2, r3
 8014e0a:	d034      	beq.n	8014e76 <_printf_float+0x45a>
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	002a      	movs	r2, r5
 8014e10:	0038      	movs	r0, r7
 8014e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e14:	47b0      	blx	r6
 8014e16:	1c43      	adds	r3, r0, #1
 8014e18:	d100      	bne.n	8014e1c <_printf_float+0x400>
 8014e1a:	e65d      	b.n	8014ad8 <_printf_float+0xbc>
 8014e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e1e:	0038      	movs	r0, r7
 8014e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e24:	47b0      	blx	r6
 8014e26:	1c43      	adds	r3, r0, #1
 8014e28:	d100      	bne.n	8014e2c <_printf_float+0x410>
 8014e2a:	e655      	b.n	8014ad8 <_printf_float+0xbc>
 8014e2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014e2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014e30:	2200      	movs	r2, #0
 8014e32:	2300      	movs	r3, #0
 8014e34:	f7eb fb10 	bl	8000458 <__aeabi_dcmpeq>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	d11a      	bne.n	8014e72 <_printf_float+0x456>
 8014e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e3e:	1c6a      	adds	r2, r5, #1
 8014e40:	3b01      	subs	r3, #1
 8014e42:	0038      	movs	r0, r7
 8014e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e46:	47b0      	blx	r6
 8014e48:	1c43      	adds	r3, r0, #1
 8014e4a:	d10e      	bne.n	8014e6a <_printf_float+0x44e>
 8014e4c:	e644      	b.n	8014ad8 <_printf_float+0xbc>
 8014e4e:	0022      	movs	r2, r4
 8014e50:	2301      	movs	r3, #1
 8014e52:	0038      	movs	r0, r7
 8014e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e56:	321a      	adds	r2, #26
 8014e58:	47b0      	blx	r6
 8014e5a:	1c43      	adds	r3, r0, #1
 8014e5c:	d100      	bne.n	8014e60 <_printf_float+0x444>
 8014e5e:	e63b      	b.n	8014ad8 <_printf_float+0xbc>
 8014e60:	3501      	adds	r5, #1
 8014e62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e64:	3b01      	subs	r3, #1
 8014e66:	42ab      	cmp	r3, r5
 8014e68:	dcf1      	bgt.n	8014e4e <_printf_float+0x432>
 8014e6a:	0022      	movs	r2, r4
 8014e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e6e:	3250      	adds	r2, #80	; 0x50
 8014e70:	e6da      	b.n	8014c28 <_printf_float+0x20c>
 8014e72:	2500      	movs	r5, #0
 8014e74:	e7f5      	b.n	8014e62 <_printf_float+0x446>
 8014e76:	002a      	movs	r2, r5
 8014e78:	e7e3      	b.n	8014e42 <_printf_float+0x426>
 8014e7a:	0022      	movs	r2, r4
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	0038      	movs	r0, r7
 8014e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e82:	3219      	adds	r2, #25
 8014e84:	47b0      	blx	r6
 8014e86:	1c43      	adds	r3, r0, #1
 8014e88:	d100      	bne.n	8014e8c <_printf_float+0x470>
 8014e8a:	e625      	b.n	8014ad8 <_printf_float+0xbc>
 8014e8c:	3501      	adds	r5, #1
 8014e8e:	68e3      	ldr	r3, [r4, #12]
 8014e90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e92:	1a9b      	subs	r3, r3, r2
 8014e94:	42ab      	cmp	r3, r5
 8014e96:	dcf0      	bgt.n	8014e7a <_printf_float+0x45e>
 8014e98:	e6f8      	b.n	8014c8c <_printf_float+0x270>
 8014e9a:	2500      	movs	r5, #0
 8014e9c:	e7f7      	b.n	8014e8e <_printf_float+0x472>
 8014e9e:	46c0      	nop			; (mov r8, r8)

08014ea0 <_printf_common>:
 8014ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ea2:	0015      	movs	r5, r2
 8014ea4:	9301      	str	r3, [sp, #4]
 8014ea6:	688a      	ldr	r2, [r1, #8]
 8014ea8:	690b      	ldr	r3, [r1, #16]
 8014eaa:	000c      	movs	r4, r1
 8014eac:	9000      	str	r0, [sp, #0]
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	da00      	bge.n	8014eb4 <_printf_common+0x14>
 8014eb2:	0013      	movs	r3, r2
 8014eb4:	0022      	movs	r2, r4
 8014eb6:	602b      	str	r3, [r5, #0]
 8014eb8:	3243      	adds	r2, #67	; 0x43
 8014eba:	7812      	ldrb	r2, [r2, #0]
 8014ebc:	2a00      	cmp	r2, #0
 8014ebe:	d001      	beq.n	8014ec4 <_printf_common+0x24>
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	602b      	str	r3, [r5, #0]
 8014ec4:	6823      	ldr	r3, [r4, #0]
 8014ec6:	069b      	lsls	r3, r3, #26
 8014ec8:	d502      	bpl.n	8014ed0 <_printf_common+0x30>
 8014eca:	682b      	ldr	r3, [r5, #0]
 8014ecc:	3302      	adds	r3, #2
 8014ece:	602b      	str	r3, [r5, #0]
 8014ed0:	6822      	ldr	r2, [r4, #0]
 8014ed2:	2306      	movs	r3, #6
 8014ed4:	0017      	movs	r7, r2
 8014ed6:	401f      	ands	r7, r3
 8014ed8:	421a      	tst	r2, r3
 8014eda:	d027      	beq.n	8014f2c <_printf_common+0x8c>
 8014edc:	0023      	movs	r3, r4
 8014ede:	3343      	adds	r3, #67	; 0x43
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	1e5a      	subs	r2, r3, #1
 8014ee4:	4193      	sbcs	r3, r2
 8014ee6:	6822      	ldr	r2, [r4, #0]
 8014ee8:	0692      	lsls	r2, r2, #26
 8014eea:	d430      	bmi.n	8014f4e <_printf_common+0xae>
 8014eec:	0022      	movs	r2, r4
 8014eee:	9901      	ldr	r1, [sp, #4]
 8014ef0:	9800      	ldr	r0, [sp, #0]
 8014ef2:	9e08      	ldr	r6, [sp, #32]
 8014ef4:	3243      	adds	r2, #67	; 0x43
 8014ef6:	47b0      	blx	r6
 8014ef8:	1c43      	adds	r3, r0, #1
 8014efa:	d025      	beq.n	8014f48 <_printf_common+0xa8>
 8014efc:	2306      	movs	r3, #6
 8014efe:	6820      	ldr	r0, [r4, #0]
 8014f00:	682a      	ldr	r2, [r5, #0]
 8014f02:	68e1      	ldr	r1, [r4, #12]
 8014f04:	2500      	movs	r5, #0
 8014f06:	4003      	ands	r3, r0
 8014f08:	2b04      	cmp	r3, #4
 8014f0a:	d103      	bne.n	8014f14 <_printf_common+0x74>
 8014f0c:	1a8d      	subs	r5, r1, r2
 8014f0e:	43eb      	mvns	r3, r5
 8014f10:	17db      	asrs	r3, r3, #31
 8014f12:	401d      	ands	r5, r3
 8014f14:	68a3      	ldr	r3, [r4, #8]
 8014f16:	6922      	ldr	r2, [r4, #16]
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	dd01      	ble.n	8014f20 <_printf_common+0x80>
 8014f1c:	1a9b      	subs	r3, r3, r2
 8014f1e:	18ed      	adds	r5, r5, r3
 8014f20:	2700      	movs	r7, #0
 8014f22:	42bd      	cmp	r5, r7
 8014f24:	d120      	bne.n	8014f68 <_printf_common+0xc8>
 8014f26:	2000      	movs	r0, #0
 8014f28:	e010      	b.n	8014f4c <_printf_common+0xac>
 8014f2a:	3701      	adds	r7, #1
 8014f2c:	68e3      	ldr	r3, [r4, #12]
 8014f2e:	682a      	ldr	r2, [r5, #0]
 8014f30:	1a9b      	subs	r3, r3, r2
 8014f32:	42bb      	cmp	r3, r7
 8014f34:	ddd2      	ble.n	8014edc <_printf_common+0x3c>
 8014f36:	0022      	movs	r2, r4
 8014f38:	2301      	movs	r3, #1
 8014f3a:	9901      	ldr	r1, [sp, #4]
 8014f3c:	9800      	ldr	r0, [sp, #0]
 8014f3e:	9e08      	ldr	r6, [sp, #32]
 8014f40:	3219      	adds	r2, #25
 8014f42:	47b0      	blx	r6
 8014f44:	1c43      	adds	r3, r0, #1
 8014f46:	d1f0      	bne.n	8014f2a <_printf_common+0x8a>
 8014f48:	2001      	movs	r0, #1
 8014f4a:	4240      	negs	r0, r0
 8014f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014f4e:	2030      	movs	r0, #48	; 0x30
 8014f50:	18e1      	adds	r1, r4, r3
 8014f52:	3143      	adds	r1, #67	; 0x43
 8014f54:	7008      	strb	r0, [r1, #0]
 8014f56:	0021      	movs	r1, r4
 8014f58:	1c5a      	adds	r2, r3, #1
 8014f5a:	3145      	adds	r1, #69	; 0x45
 8014f5c:	7809      	ldrb	r1, [r1, #0]
 8014f5e:	18a2      	adds	r2, r4, r2
 8014f60:	3243      	adds	r2, #67	; 0x43
 8014f62:	3302      	adds	r3, #2
 8014f64:	7011      	strb	r1, [r2, #0]
 8014f66:	e7c1      	b.n	8014eec <_printf_common+0x4c>
 8014f68:	0022      	movs	r2, r4
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	9901      	ldr	r1, [sp, #4]
 8014f6e:	9800      	ldr	r0, [sp, #0]
 8014f70:	9e08      	ldr	r6, [sp, #32]
 8014f72:	321a      	adds	r2, #26
 8014f74:	47b0      	blx	r6
 8014f76:	1c43      	adds	r3, r0, #1
 8014f78:	d0e6      	beq.n	8014f48 <_printf_common+0xa8>
 8014f7a:	3701      	adds	r7, #1
 8014f7c:	e7d1      	b.n	8014f22 <_printf_common+0x82>
	...

08014f80 <_printf_i>:
 8014f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f82:	b08b      	sub	sp, #44	; 0x2c
 8014f84:	9206      	str	r2, [sp, #24]
 8014f86:	000a      	movs	r2, r1
 8014f88:	3243      	adds	r2, #67	; 0x43
 8014f8a:	9307      	str	r3, [sp, #28]
 8014f8c:	9005      	str	r0, [sp, #20]
 8014f8e:	9204      	str	r2, [sp, #16]
 8014f90:	7e0a      	ldrb	r2, [r1, #24]
 8014f92:	000c      	movs	r4, r1
 8014f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f96:	2a78      	cmp	r2, #120	; 0x78
 8014f98:	d807      	bhi.n	8014faa <_printf_i+0x2a>
 8014f9a:	2a62      	cmp	r2, #98	; 0x62
 8014f9c:	d809      	bhi.n	8014fb2 <_printf_i+0x32>
 8014f9e:	2a00      	cmp	r2, #0
 8014fa0:	d100      	bne.n	8014fa4 <_printf_i+0x24>
 8014fa2:	e0c1      	b.n	8015128 <_printf_i+0x1a8>
 8014fa4:	2a58      	cmp	r2, #88	; 0x58
 8014fa6:	d100      	bne.n	8014faa <_printf_i+0x2a>
 8014fa8:	e08c      	b.n	80150c4 <_printf_i+0x144>
 8014faa:	0026      	movs	r6, r4
 8014fac:	3642      	adds	r6, #66	; 0x42
 8014fae:	7032      	strb	r2, [r6, #0]
 8014fb0:	e022      	b.n	8014ff8 <_printf_i+0x78>
 8014fb2:	0010      	movs	r0, r2
 8014fb4:	3863      	subs	r0, #99	; 0x63
 8014fb6:	2815      	cmp	r0, #21
 8014fb8:	d8f7      	bhi.n	8014faa <_printf_i+0x2a>
 8014fba:	f7eb f8bd 	bl	8000138 <__gnu_thumb1_case_shi>
 8014fbe:	0016      	.short	0x0016
 8014fc0:	fff6001f 	.word	0xfff6001f
 8014fc4:	fff6fff6 	.word	0xfff6fff6
 8014fc8:	001ffff6 	.word	0x001ffff6
 8014fcc:	fff6fff6 	.word	0xfff6fff6
 8014fd0:	fff6fff6 	.word	0xfff6fff6
 8014fd4:	003600a8 	.word	0x003600a8
 8014fd8:	fff6009a 	.word	0xfff6009a
 8014fdc:	00b9fff6 	.word	0x00b9fff6
 8014fe0:	0036fff6 	.word	0x0036fff6
 8014fe4:	fff6fff6 	.word	0xfff6fff6
 8014fe8:	009e      	.short	0x009e
 8014fea:	0026      	movs	r6, r4
 8014fec:	681a      	ldr	r2, [r3, #0]
 8014fee:	3642      	adds	r6, #66	; 0x42
 8014ff0:	1d11      	adds	r1, r2, #4
 8014ff2:	6019      	str	r1, [r3, #0]
 8014ff4:	6813      	ldr	r3, [r2, #0]
 8014ff6:	7033      	strb	r3, [r6, #0]
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e0a7      	b.n	801514c <_printf_i+0x1cc>
 8014ffc:	6808      	ldr	r0, [r1, #0]
 8014ffe:	6819      	ldr	r1, [r3, #0]
 8015000:	1d0a      	adds	r2, r1, #4
 8015002:	0605      	lsls	r5, r0, #24
 8015004:	d50b      	bpl.n	801501e <_printf_i+0x9e>
 8015006:	680d      	ldr	r5, [r1, #0]
 8015008:	601a      	str	r2, [r3, #0]
 801500a:	2d00      	cmp	r5, #0
 801500c:	da03      	bge.n	8015016 <_printf_i+0x96>
 801500e:	232d      	movs	r3, #45	; 0x2d
 8015010:	9a04      	ldr	r2, [sp, #16]
 8015012:	426d      	negs	r5, r5
 8015014:	7013      	strb	r3, [r2, #0]
 8015016:	4b61      	ldr	r3, [pc, #388]	; (801519c <_printf_i+0x21c>)
 8015018:	270a      	movs	r7, #10
 801501a:	9303      	str	r3, [sp, #12]
 801501c:	e01b      	b.n	8015056 <_printf_i+0xd6>
 801501e:	680d      	ldr	r5, [r1, #0]
 8015020:	601a      	str	r2, [r3, #0]
 8015022:	0641      	lsls	r1, r0, #25
 8015024:	d5f1      	bpl.n	801500a <_printf_i+0x8a>
 8015026:	b22d      	sxth	r5, r5
 8015028:	e7ef      	b.n	801500a <_printf_i+0x8a>
 801502a:	680d      	ldr	r5, [r1, #0]
 801502c:	6819      	ldr	r1, [r3, #0]
 801502e:	1d08      	adds	r0, r1, #4
 8015030:	6018      	str	r0, [r3, #0]
 8015032:	062e      	lsls	r6, r5, #24
 8015034:	d501      	bpl.n	801503a <_printf_i+0xba>
 8015036:	680d      	ldr	r5, [r1, #0]
 8015038:	e003      	b.n	8015042 <_printf_i+0xc2>
 801503a:	066d      	lsls	r5, r5, #25
 801503c:	d5fb      	bpl.n	8015036 <_printf_i+0xb6>
 801503e:	680d      	ldr	r5, [r1, #0]
 8015040:	b2ad      	uxth	r5, r5
 8015042:	4b56      	ldr	r3, [pc, #344]	; (801519c <_printf_i+0x21c>)
 8015044:	2708      	movs	r7, #8
 8015046:	9303      	str	r3, [sp, #12]
 8015048:	2a6f      	cmp	r2, #111	; 0x6f
 801504a:	d000      	beq.n	801504e <_printf_i+0xce>
 801504c:	3702      	adds	r7, #2
 801504e:	0023      	movs	r3, r4
 8015050:	2200      	movs	r2, #0
 8015052:	3343      	adds	r3, #67	; 0x43
 8015054:	701a      	strb	r2, [r3, #0]
 8015056:	6863      	ldr	r3, [r4, #4]
 8015058:	60a3      	str	r3, [r4, #8]
 801505a:	2b00      	cmp	r3, #0
 801505c:	db03      	blt.n	8015066 <_printf_i+0xe6>
 801505e:	2204      	movs	r2, #4
 8015060:	6821      	ldr	r1, [r4, #0]
 8015062:	4391      	bics	r1, r2
 8015064:	6021      	str	r1, [r4, #0]
 8015066:	2d00      	cmp	r5, #0
 8015068:	d102      	bne.n	8015070 <_printf_i+0xf0>
 801506a:	9e04      	ldr	r6, [sp, #16]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d00c      	beq.n	801508a <_printf_i+0x10a>
 8015070:	9e04      	ldr	r6, [sp, #16]
 8015072:	0028      	movs	r0, r5
 8015074:	0039      	movs	r1, r7
 8015076:	f7eb f8ef 	bl	8000258 <__aeabi_uidivmod>
 801507a:	9b03      	ldr	r3, [sp, #12]
 801507c:	3e01      	subs	r6, #1
 801507e:	5c5b      	ldrb	r3, [r3, r1]
 8015080:	7033      	strb	r3, [r6, #0]
 8015082:	002b      	movs	r3, r5
 8015084:	0005      	movs	r5, r0
 8015086:	429f      	cmp	r7, r3
 8015088:	d9f3      	bls.n	8015072 <_printf_i+0xf2>
 801508a:	2f08      	cmp	r7, #8
 801508c:	d109      	bne.n	80150a2 <_printf_i+0x122>
 801508e:	6823      	ldr	r3, [r4, #0]
 8015090:	07db      	lsls	r3, r3, #31
 8015092:	d506      	bpl.n	80150a2 <_printf_i+0x122>
 8015094:	6863      	ldr	r3, [r4, #4]
 8015096:	6922      	ldr	r2, [r4, #16]
 8015098:	4293      	cmp	r3, r2
 801509a:	dc02      	bgt.n	80150a2 <_printf_i+0x122>
 801509c:	2330      	movs	r3, #48	; 0x30
 801509e:	3e01      	subs	r6, #1
 80150a0:	7033      	strb	r3, [r6, #0]
 80150a2:	9b04      	ldr	r3, [sp, #16]
 80150a4:	1b9b      	subs	r3, r3, r6
 80150a6:	6123      	str	r3, [r4, #16]
 80150a8:	9b07      	ldr	r3, [sp, #28]
 80150aa:	0021      	movs	r1, r4
 80150ac:	9300      	str	r3, [sp, #0]
 80150ae:	9805      	ldr	r0, [sp, #20]
 80150b0:	9b06      	ldr	r3, [sp, #24]
 80150b2:	aa09      	add	r2, sp, #36	; 0x24
 80150b4:	f7ff fef4 	bl	8014ea0 <_printf_common>
 80150b8:	1c43      	adds	r3, r0, #1
 80150ba:	d14c      	bne.n	8015156 <_printf_i+0x1d6>
 80150bc:	2001      	movs	r0, #1
 80150be:	4240      	negs	r0, r0
 80150c0:	b00b      	add	sp, #44	; 0x2c
 80150c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150c4:	3145      	adds	r1, #69	; 0x45
 80150c6:	700a      	strb	r2, [r1, #0]
 80150c8:	4a34      	ldr	r2, [pc, #208]	; (801519c <_printf_i+0x21c>)
 80150ca:	9203      	str	r2, [sp, #12]
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	6821      	ldr	r1, [r4, #0]
 80150d0:	ca20      	ldmia	r2!, {r5}
 80150d2:	601a      	str	r2, [r3, #0]
 80150d4:	0608      	lsls	r0, r1, #24
 80150d6:	d516      	bpl.n	8015106 <_printf_i+0x186>
 80150d8:	07cb      	lsls	r3, r1, #31
 80150da:	d502      	bpl.n	80150e2 <_printf_i+0x162>
 80150dc:	2320      	movs	r3, #32
 80150de:	4319      	orrs	r1, r3
 80150e0:	6021      	str	r1, [r4, #0]
 80150e2:	2710      	movs	r7, #16
 80150e4:	2d00      	cmp	r5, #0
 80150e6:	d1b2      	bne.n	801504e <_printf_i+0xce>
 80150e8:	2320      	movs	r3, #32
 80150ea:	6822      	ldr	r2, [r4, #0]
 80150ec:	439a      	bics	r2, r3
 80150ee:	6022      	str	r2, [r4, #0]
 80150f0:	e7ad      	b.n	801504e <_printf_i+0xce>
 80150f2:	2220      	movs	r2, #32
 80150f4:	6809      	ldr	r1, [r1, #0]
 80150f6:	430a      	orrs	r2, r1
 80150f8:	6022      	str	r2, [r4, #0]
 80150fa:	0022      	movs	r2, r4
 80150fc:	2178      	movs	r1, #120	; 0x78
 80150fe:	3245      	adds	r2, #69	; 0x45
 8015100:	7011      	strb	r1, [r2, #0]
 8015102:	4a27      	ldr	r2, [pc, #156]	; (80151a0 <_printf_i+0x220>)
 8015104:	e7e1      	b.n	80150ca <_printf_i+0x14a>
 8015106:	0648      	lsls	r0, r1, #25
 8015108:	d5e6      	bpl.n	80150d8 <_printf_i+0x158>
 801510a:	b2ad      	uxth	r5, r5
 801510c:	e7e4      	b.n	80150d8 <_printf_i+0x158>
 801510e:	681a      	ldr	r2, [r3, #0]
 8015110:	680d      	ldr	r5, [r1, #0]
 8015112:	1d10      	adds	r0, r2, #4
 8015114:	6949      	ldr	r1, [r1, #20]
 8015116:	6018      	str	r0, [r3, #0]
 8015118:	6813      	ldr	r3, [r2, #0]
 801511a:	062e      	lsls	r6, r5, #24
 801511c:	d501      	bpl.n	8015122 <_printf_i+0x1a2>
 801511e:	6019      	str	r1, [r3, #0]
 8015120:	e002      	b.n	8015128 <_printf_i+0x1a8>
 8015122:	066d      	lsls	r5, r5, #25
 8015124:	d5fb      	bpl.n	801511e <_printf_i+0x19e>
 8015126:	8019      	strh	r1, [r3, #0]
 8015128:	2300      	movs	r3, #0
 801512a:	9e04      	ldr	r6, [sp, #16]
 801512c:	6123      	str	r3, [r4, #16]
 801512e:	e7bb      	b.n	80150a8 <_printf_i+0x128>
 8015130:	681a      	ldr	r2, [r3, #0]
 8015132:	1d11      	adds	r1, r2, #4
 8015134:	6019      	str	r1, [r3, #0]
 8015136:	6816      	ldr	r6, [r2, #0]
 8015138:	2100      	movs	r1, #0
 801513a:	0030      	movs	r0, r6
 801513c:	6862      	ldr	r2, [r4, #4]
 801513e:	f000 ff0d 	bl	8015f5c <memchr>
 8015142:	2800      	cmp	r0, #0
 8015144:	d001      	beq.n	801514a <_printf_i+0x1ca>
 8015146:	1b80      	subs	r0, r0, r6
 8015148:	6060      	str	r0, [r4, #4]
 801514a:	6863      	ldr	r3, [r4, #4]
 801514c:	6123      	str	r3, [r4, #16]
 801514e:	2300      	movs	r3, #0
 8015150:	9a04      	ldr	r2, [sp, #16]
 8015152:	7013      	strb	r3, [r2, #0]
 8015154:	e7a8      	b.n	80150a8 <_printf_i+0x128>
 8015156:	6923      	ldr	r3, [r4, #16]
 8015158:	0032      	movs	r2, r6
 801515a:	9906      	ldr	r1, [sp, #24]
 801515c:	9805      	ldr	r0, [sp, #20]
 801515e:	9d07      	ldr	r5, [sp, #28]
 8015160:	47a8      	blx	r5
 8015162:	1c43      	adds	r3, r0, #1
 8015164:	d0aa      	beq.n	80150bc <_printf_i+0x13c>
 8015166:	6823      	ldr	r3, [r4, #0]
 8015168:	079b      	lsls	r3, r3, #30
 801516a:	d415      	bmi.n	8015198 <_printf_i+0x218>
 801516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801516e:	68e0      	ldr	r0, [r4, #12]
 8015170:	4298      	cmp	r0, r3
 8015172:	daa5      	bge.n	80150c0 <_printf_i+0x140>
 8015174:	0018      	movs	r0, r3
 8015176:	e7a3      	b.n	80150c0 <_printf_i+0x140>
 8015178:	0022      	movs	r2, r4
 801517a:	2301      	movs	r3, #1
 801517c:	9906      	ldr	r1, [sp, #24]
 801517e:	9805      	ldr	r0, [sp, #20]
 8015180:	9e07      	ldr	r6, [sp, #28]
 8015182:	3219      	adds	r2, #25
 8015184:	47b0      	blx	r6
 8015186:	1c43      	adds	r3, r0, #1
 8015188:	d098      	beq.n	80150bc <_printf_i+0x13c>
 801518a:	3501      	adds	r5, #1
 801518c:	68e3      	ldr	r3, [r4, #12]
 801518e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015190:	1a9b      	subs	r3, r3, r2
 8015192:	42ab      	cmp	r3, r5
 8015194:	dcf0      	bgt.n	8015178 <_printf_i+0x1f8>
 8015196:	e7e9      	b.n	801516c <_printf_i+0x1ec>
 8015198:	2500      	movs	r5, #0
 801519a:	e7f7      	b.n	801518c <_printf_i+0x20c>
 801519c:	08018ab2 	.word	0x08018ab2
 80151a0:	08018ac3 	.word	0x08018ac3

080151a4 <_sbrk_r>:
 80151a4:	2300      	movs	r3, #0
 80151a6:	b570      	push	{r4, r5, r6, lr}
 80151a8:	4d06      	ldr	r5, [pc, #24]	; (80151c4 <_sbrk_r+0x20>)
 80151aa:	0004      	movs	r4, r0
 80151ac:	0008      	movs	r0, r1
 80151ae:	602b      	str	r3, [r5, #0]
 80151b0:	f7ee fe00 	bl	8003db4 <_sbrk>
 80151b4:	1c43      	adds	r3, r0, #1
 80151b6:	d103      	bne.n	80151c0 <_sbrk_r+0x1c>
 80151b8:	682b      	ldr	r3, [r5, #0]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d000      	beq.n	80151c0 <_sbrk_r+0x1c>
 80151be:	6023      	str	r3, [r4, #0]
 80151c0:	bd70      	pop	{r4, r5, r6, pc}
 80151c2:	46c0      	nop			; (mov r8, r8)
 80151c4:	20003a98 	.word	0x20003a98

080151c8 <siprintf>:
 80151c8:	b40e      	push	{r1, r2, r3}
 80151ca:	b500      	push	{lr}
 80151cc:	490b      	ldr	r1, [pc, #44]	; (80151fc <siprintf+0x34>)
 80151ce:	b09c      	sub	sp, #112	; 0x70
 80151d0:	ab1d      	add	r3, sp, #116	; 0x74
 80151d2:	9002      	str	r0, [sp, #8]
 80151d4:	9006      	str	r0, [sp, #24]
 80151d6:	9107      	str	r1, [sp, #28]
 80151d8:	9104      	str	r1, [sp, #16]
 80151da:	4809      	ldr	r0, [pc, #36]	; (8015200 <siprintf+0x38>)
 80151dc:	4909      	ldr	r1, [pc, #36]	; (8015204 <siprintf+0x3c>)
 80151de:	cb04      	ldmia	r3!, {r2}
 80151e0:	9105      	str	r1, [sp, #20]
 80151e2:	6800      	ldr	r0, [r0, #0]
 80151e4:	a902      	add	r1, sp, #8
 80151e6:	9301      	str	r3, [sp, #4]
 80151e8:	f001 fafe 	bl	80167e8 <_svfiprintf_r>
 80151ec:	2300      	movs	r3, #0
 80151ee:	9a02      	ldr	r2, [sp, #8]
 80151f0:	7013      	strb	r3, [r2, #0]
 80151f2:	b01c      	add	sp, #112	; 0x70
 80151f4:	bc08      	pop	{r3}
 80151f6:	b003      	add	sp, #12
 80151f8:	4718      	bx	r3
 80151fa:	46c0      	nop			; (mov r8, r8)
 80151fc:	7fffffff 	.word	0x7fffffff
 8015200:	200030d8 	.word	0x200030d8
 8015204:	ffff0208 	.word	0xffff0208

08015208 <quorem>:
 8015208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801520a:	0006      	movs	r6, r0
 801520c:	690b      	ldr	r3, [r1, #16]
 801520e:	6932      	ldr	r2, [r6, #16]
 8015210:	b087      	sub	sp, #28
 8015212:	2000      	movs	r0, #0
 8015214:	9103      	str	r1, [sp, #12]
 8015216:	429a      	cmp	r2, r3
 8015218:	db65      	blt.n	80152e6 <quorem+0xde>
 801521a:	3b01      	subs	r3, #1
 801521c:	009c      	lsls	r4, r3, #2
 801521e:	9300      	str	r3, [sp, #0]
 8015220:	000b      	movs	r3, r1
 8015222:	3314      	adds	r3, #20
 8015224:	9305      	str	r3, [sp, #20]
 8015226:	191b      	adds	r3, r3, r4
 8015228:	9304      	str	r3, [sp, #16]
 801522a:	0033      	movs	r3, r6
 801522c:	3314      	adds	r3, #20
 801522e:	9302      	str	r3, [sp, #8]
 8015230:	191c      	adds	r4, r3, r4
 8015232:	9b04      	ldr	r3, [sp, #16]
 8015234:	6827      	ldr	r7, [r4, #0]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	0038      	movs	r0, r7
 801523a:	1c5d      	adds	r5, r3, #1
 801523c:	0029      	movs	r1, r5
 801523e:	9301      	str	r3, [sp, #4]
 8015240:	f7ea ff84 	bl	800014c <__udivsi3>
 8015244:	9001      	str	r0, [sp, #4]
 8015246:	42af      	cmp	r7, r5
 8015248:	d324      	bcc.n	8015294 <quorem+0x8c>
 801524a:	2500      	movs	r5, #0
 801524c:	46ac      	mov	ip, r5
 801524e:	9802      	ldr	r0, [sp, #8]
 8015250:	9f05      	ldr	r7, [sp, #20]
 8015252:	cf08      	ldmia	r7!, {r3}
 8015254:	9a01      	ldr	r2, [sp, #4]
 8015256:	b299      	uxth	r1, r3
 8015258:	4351      	muls	r1, r2
 801525a:	0c1b      	lsrs	r3, r3, #16
 801525c:	4353      	muls	r3, r2
 801525e:	1949      	adds	r1, r1, r5
 8015260:	0c0a      	lsrs	r2, r1, #16
 8015262:	189b      	adds	r3, r3, r2
 8015264:	6802      	ldr	r2, [r0, #0]
 8015266:	b289      	uxth	r1, r1
 8015268:	b292      	uxth	r2, r2
 801526a:	4462      	add	r2, ip
 801526c:	1a52      	subs	r2, r2, r1
 801526e:	6801      	ldr	r1, [r0, #0]
 8015270:	0c1d      	lsrs	r5, r3, #16
 8015272:	0c09      	lsrs	r1, r1, #16
 8015274:	b29b      	uxth	r3, r3
 8015276:	1acb      	subs	r3, r1, r3
 8015278:	1411      	asrs	r1, r2, #16
 801527a:	185b      	adds	r3, r3, r1
 801527c:	1419      	asrs	r1, r3, #16
 801527e:	b292      	uxth	r2, r2
 8015280:	041b      	lsls	r3, r3, #16
 8015282:	431a      	orrs	r2, r3
 8015284:	9b04      	ldr	r3, [sp, #16]
 8015286:	468c      	mov	ip, r1
 8015288:	c004      	stmia	r0!, {r2}
 801528a:	42bb      	cmp	r3, r7
 801528c:	d2e1      	bcs.n	8015252 <quorem+0x4a>
 801528e:	6823      	ldr	r3, [r4, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d030      	beq.n	80152f6 <quorem+0xee>
 8015294:	0030      	movs	r0, r6
 8015296:	9903      	ldr	r1, [sp, #12]
 8015298:	f001 f900 	bl	801649c <__mcmp>
 801529c:	2800      	cmp	r0, #0
 801529e:	db21      	blt.n	80152e4 <quorem+0xdc>
 80152a0:	0030      	movs	r0, r6
 80152a2:	2400      	movs	r4, #0
 80152a4:	9b01      	ldr	r3, [sp, #4]
 80152a6:	9903      	ldr	r1, [sp, #12]
 80152a8:	3301      	adds	r3, #1
 80152aa:	9301      	str	r3, [sp, #4]
 80152ac:	3014      	adds	r0, #20
 80152ae:	3114      	adds	r1, #20
 80152b0:	6803      	ldr	r3, [r0, #0]
 80152b2:	c920      	ldmia	r1!, {r5}
 80152b4:	b29a      	uxth	r2, r3
 80152b6:	1914      	adds	r4, r2, r4
 80152b8:	b2aa      	uxth	r2, r5
 80152ba:	1aa2      	subs	r2, r4, r2
 80152bc:	0c1b      	lsrs	r3, r3, #16
 80152be:	0c2d      	lsrs	r5, r5, #16
 80152c0:	1414      	asrs	r4, r2, #16
 80152c2:	1b5b      	subs	r3, r3, r5
 80152c4:	191b      	adds	r3, r3, r4
 80152c6:	141c      	asrs	r4, r3, #16
 80152c8:	b292      	uxth	r2, r2
 80152ca:	041b      	lsls	r3, r3, #16
 80152cc:	4313      	orrs	r3, r2
 80152ce:	c008      	stmia	r0!, {r3}
 80152d0:	9b04      	ldr	r3, [sp, #16]
 80152d2:	428b      	cmp	r3, r1
 80152d4:	d2ec      	bcs.n	80152b0 <quorem+0xa8>
 80152d6:	9b00      	ldr	r3, [sp, #0]
 80152d8:	9a02      	ldr	r2, [sp, #8]
 80152da:	009b      	lsls	r3, r3, #2
 80152dc:	18d3      	adds	r3, r2, r3
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	2a00      	cmp	r2, #0
 80152e2:	d015      	beq.n	8015310 <quorem+0x108>
 80152e4:	9801      	ldr	r0, [sp, #4]
 80152e6:	b007      	add	sp, #28
 80152e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d106      	bne.n	80152fe <quorem+0xf6>
 80152f0:	9b00      	ldr	r3, [sp, #0]
 80152f2:	3b01      	subs	r3, #1
 80152f4:	9300      	str	r3, [sp, #0]
 80152f6:	9b02      	ldr	r3, [sp, #8]
 80152f8:	3c04      	subs	r4, #4
 80152fa:	42a3      	cmp	r3, r4
 80152fc:	d3f5      	bcc.n	80152ea <quorem+0xe2>
 80152fe:	9b00      	ldr	r3, [sp, #0]
 8015300:	6133      	str	r3, [r6, #16]
 8015302:	e7c7      	b.n	8015294 <quorem+0x8c>
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	2a00      	cmp	r2, #0
 8015308:	d106      	bne.n	8015318 <quorem+0x110>
 801530a:	9a00      	ldr	r2, [sp, #0]
 801530c:	3a01      	subs	r2, #1
 801530e:	9200      	str	r2, [sp, #0]
 8015310:	9a02      	ldr	r2, [sp, #8]
 8015312:	3b04      	subs	r3, #4
 8015314:	429a      	cmp	r2, r3
 8015316:	d3f5      	bcc.n	8015304 <quorem+0xfc>
 8015318:	9b00      	ldr	r3, [sp, #0]
 801531a:	6133      	str	r3, [r6, #16]
 801531c:	e7e2      	b.n	80152e4 <quorem+0xdc>
	...

08015320 <_dtoa_r>:
 8015320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015322:	b09d      	sub	sp, #116	; 0x74
 8015324:	9202      	str	r2, [sp, #8]
 8015326:	9303      	str	r3, [sp, #12]
 8015328:	9b02      	ldr	r3, [sp, #8]
 801532a:	9c03      	ldr	r4, [sp, #12]
 801532c:	9308      	str	r3, [sp, #32]
 801532e:	9409      	str	r4, [sp, #36]	; 0x24
 8015330:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015332:	0007      	movs	r7, r0
 8015334:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8015336:	2c00      	cmp	r4, #0
 8015338:	d10e      	bne.n	8015358 <_dtoa_r+0x38>
 801533a:	2010      	movs	r0, #16
 801533c:	f7ff f9c6 	bl	80146cc <malloc>
 8015340:	1e02      	subs	r2, r0, #0
 8015342:	6278      	str	r0, [r7, #36]	; 0x24
 8015344:	d104      	bne.n	8015350 <_dtoa_r+0x30>
 8015346:	21ea      	movs	r1, #234	; 0xea
 8015348:	4bc7      	ldr	r3, [pc, #796]	; (8015668 <_dtoa_r+0x348>)
 801534a:	48c8      	ldr	r0, [pc, #800]	; (801566c <_dtoa_r+0x34c>)
 801534c:	f001 fb4c 	bl	80169e8 <__assert_func>
 8015350:	6044      	str	r4, [r0, #4]
 8015352:	6084      	str	r4, [r0, #8]
 8015354:	6004      	str	r4, [r0, #0]
 8015356:	60c4      	str	r4, [r0, #12]
 8015358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535a:	6819      	ldr	r1, [r3, #0]
 801535c:	2900      	cmp	r1, #0
 801535e:	d00a      	beq.n	8015376 <_dtoa_r+0x56>
 8015360:	685a      	ldr	r2, [r3, #4]
 8015362:	2301      	movs	r3, #1
 8015364:	4093      	lsls	r3, r2
 8015366:	604a      	str	r2, [r1, #4]
 8015368:	608b      	str	r3, [r1, #8]
 801536a:	0038      	movs	r0, r7
 801536c:	f000 fe56 	bl	801601c <_Bfree>
 8015370:	2200      	movs	r2, #0
 8015372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015374:	601a      	str	r2, [r3, #0]
 8015376:	9b03      	ldr	r3, [sp, #12]
 8015378:	2b00      	cmp	r3, #0
 801537a:	da20      	bge.n	80153be <_dtoa_r+0x9e>
 801537c:	2301      	movs	r3, #1
 801537e:	602b      	str	r3, [r5, #0]
 8015380:	9b03      	ldr	r3, [sp, #12]
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	085b      	lsrs	r3, r3, #1
 8015386:	9309      	str	r3, [sp, #36]	; 0x24
 8015388:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801538a:	4bb9      	ldr	r3, [pc, #740]	; (8015670 <_dtoa_r+0x350>)
 801538c:	4ab8      	ldr	r2, [pc, #736]	; (8015670 <_dtoa_r+0x350>)
 801538e:	402b      	ands	r3, r5
 8015390:	4293      	cmp	r3, r2
 8015392:	d117      	bne.n	80153c4 <_dtoa_r+0xa4>
 8015394:	4bb7      	ldr	r3, [pc, #732]	; (8015674 <_dtoa_r+0x354>)
 8015396:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015398:	0328      	lsls	r0, r5, #12
 801539a:	6013      	str	r3, [r2, #0]
 801539c:	9b02      	ldr	r3, [sp, #8]
 801539e:	0b00      	lsrs	r0, r0, #12
 80153a0:	4318      	orrs	r0, r3
 80153a2:	d101      	bne.n	80153a8 <_dtoa_r+0x88>
 80153a4:	f000 fdbf 	bl	8015f26 <_dtoa_r+0xc06>
 80153a8:	48b3      	ldr	r0, [pc, #716]	; (8015678 <_dtoa_r+0x358>)
 80153aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80153ac:	9006      	str	r0, [sp, #24]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d002      	beq.n	80153b8 <_dtoa_r+0x98>
 80153b2:	4bb2      	ldr	r3, [pc, #712]	; (801567c <_dtoa_r+0x35c>)
 80153b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80153b6:	6013      	str	r3, [r2, #0]
 80153b8:	9806      	ldr	r0, [sp, #24]
 80153ba:	b01d      	add	sp, #116	; 0x74
 80153bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153be:	2300      	movs	r3, #0
 80153c0:	602b      	str	r3, [r5, #0]
 80153c2:	e7e1      	b.n	8015388 <_dtoa_r+0x68>
 80153c4:	9b08      	ldr	r3, [sp, #32]
 80153c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80153c8:	9312      	str	r3, [sp, #72]	; 0x48
 80153ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80153cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80153ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80153d0:	2200      	movs	r2, #0
 80153d2:	2300      	movs	r3, #0
 80153d4:	f7eb f840 	bl	8000458 <__aeabi_dcmpeq>
 80153d8:	1e04      	subs	r4, r0, #0
 80153da:	d009      	beq.n	80153f0 <_dtoa_r+0xd0>
 80153dc:	2301      	movs	r3, #1
 80153de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80153e0:	6013      	str	r3, [r2, #0]
 80153e2:	4ba7      	ldr	r3, [pc, #668]	; (8015680 <_dtoa_r+0x360>)
 80153e4:	9306      	str	r3, [sp, #24]
 80153e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d0e5      	beq.n	80153b8 <_dtoa_r+0x98>
 80153ec:	4ba5      	ldr	r3, [pc, #660]	; (8015684 <_dtoa_r+0x364>)
 80153ee:	e7e1      	b.n	80153b4 <_dtoa_r+0x94>
 80153f0:	ab1a      	add	r3, sp, #104	; 0x68
 80153f2:	9301      	str	r3, [sp, #4]
 80153f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80153f6:	9300      	str	r3, [sp, #0]
 80153f8:	0038      	movs	r0, r7
 80153fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153fe:	f001 f901 	bl	8016604 <__d2b>
 8015402:	006e      	lsls	r6, r5, #1
 8015404:	9005      	str	r0, [sp, #20]
 8015406:	0d76      	lsrs	r6, r6, #21
 8015408:	d100      	bne.n	801540c <_dtoa_r+0xec>
 801540a:	e07c      	b.n	8015506 <_dtoa_r+0x1e6>
 801540c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801540e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015412:	4a9d      	ldr	r2, [pc, #628]	; (8015688 <_dtoa_r+0x368>)
 8015414:	031b      	lsls	r3, r3, #12
 8015416:	0b1b      	lsrs	r3, r3, #12
 8015418:	431a      	orrs	r2, r3
 801541a:	0011      	movs	r1, r2
 801541c:	4b9b      	ldr	r3, [pc, #620]	; (801568c <_dtoa_r+0x36c>)
 801541e:	9418      	str	r4, [sp, #96]	; 0x60
 8015420:	18f6      	adds	r6, r6, r3
 8015422:	2200      	movs	r2, #0
 8015424:	4b9a      	ldr	r3, [pc, #616]	; (8015690 <_dtoa_r+0x370>)
 8015426:	f7ed f907 	bl	8002638 <__aeabi_dsub>
 801542a:	4a9a      	ldr	r2, [pc, #616]	; (8015694 <_dtoa_r+0x374>)
 801542c:	4b9a      	ldr	r3, [pc, #616]	; (8015698 <_dtoa_r+0x378>)
 801542e:	f7ec fe97 	bl	8002160 <__aeabi_dmul>
 8015432:	4a9a      	ldr	r2, [pc, #616]	; (801569c <_dtoa_r+0x37c>)
 8015434:	4b9a      	ldr	r3, [pc, #616]	; (80156a0 <_dtoa_r+0x380>)
 8015436:	f7eb ff55 	bl	80012e4 <__aeabi_dadd>
 801543a:	0004      	movs	r4, r0
 801543c:	0030      	movs	r0, r6
 801543e:	000d      	movs	r5, r1
 8015440:	f7ed fce0 	bl	8002e04 <__aeabi_i2d>
 8015444:	4a97      	ldr	r2, [pc, #604]	; (80156a4 <_dtoa_r+0x384>)
 8015446:	4b98      	ldr	r3, [pc, #608]	; (80156a8 <_dtoa_r+0x388>)
 8015448:	f7ec fe8a 	bl	8002160 <__aeabi_dmul>
 801544c:	0002      	movs	r2, r0
 801544e:	000b      	movs	r3, r1
 8015450:	0020      	movs	r0, r4
 8015452:	0029      	movs	r1, r5
 8015454:	f7eb ff46 	bl	80012e4 <__aeabi_dadd>
 8015458:	0004      	movs	r4, r0
 801545a:	000d      	movs	r5, r1
 801545c:	f7ed fc9c 	bl	8002d98 <__aeabi_d2iz>
 8015460:	2200      	movs	r2, #0
 8015462:	9002      	str	r0, [sp, #8]
 8015464:	2300      	movs	r3, #0
 8015466:	0020      	movs	r0, r4
 8015468:	0029      	movs	r1, r5
 801546a:	f7ea fffb 	bl	8000464 <__aeabi_dcmplt>
 801546e:	2800      	cmp	r0, #0
 8015470:	d00b      	beq.n	801548a <_dtoa_r+0x16a>
 8015472:	9802      	ldr	r0, [sp, #8]
 8015474:	f7ed fcc6 	bl	8002e04 <__aeabi_i2d>
 8015478:	002b      	movs	r3, r5
 801547a:	0022      	movs	r2, r4
 801547c:	f7ea ffec 	bl	8000458 <__aeabi_dcmpeq>
 8015480:	4243      	negs	r3, r0
 8015482:	4158      	adcs	r0, r3
 8015484:	9b02      	ldr	r3, [sp, #8]
 8015486:	1a1b      	subs	r3, r3, r0
 8015488:	9302      	str	r3, [sp, #8]
 801548a:	2301      	movs	r3, #1
 801548c:	9316      	str	r3, [sp, #88]	; 0x58
 801548e:	9b02      	ldr	r3, [sp, #8]
 8015490:	2b16      	cmp	r3, #22
 8015492:	d80f      	bhi.n	80154b4 <_dtoa_r+0x194>
 8015494:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015496:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015498:	00da      	lsls	r2, r3, #3
 801549a:	4b84      	ldr	r3, [pc, #528]	; (80156ac <_dtoa_r+0x38c>)
 801549c:	189b      	adds	r3, r3, r2
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	685b      	ldr	r3, [r3, #4]
 80154a2:	f7ea ffdf 	bl	8000464 <__aeabi_dcmplt>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	d049      	beq.n	801553e <_dtoa_r+0x21e>
 80154aa:	9b02      	ldr	r3, [sp, #8]
 80154ac:	3b01      	subs	r3, #1
 80154ae:	9302      	str	r3, [sp, #8]
 80154b0:	2300      	movs	r3, #0
 80154b2:	9316      	str	r3, [sp, #88]	; 0x58
 80154b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80154b6:	1b9e      	subs	r6, r3, r6
 80154b8:	2300      	movs	r3, #0
 80154ba:	930a      	str	r3, [sp, #40]	; 0x28
 80154bc:	0033      	movs	r3, r6
 80154be:	3b01      	subs	r3, #1
 80154c0:	930d      	str	r3, [sp, #52]	; 0x34
 80154c2:	d504      	bpl.n	80154ce <_dtoa_r+0x1ae>
 80154c4:	2301      	movs	r3, #1
 80154c6:	1b9b      	subs	r3, r3, r6
 80154c8:	930a      	str	r3, [sp, #40]	; 0x28
 80154ca:	2300      	movs	r3, #0
 80154cc:	930d      	str	r3, [sp, #52]	; 0x34
 80154ce:	9b02      	ldr	r3, [sp, #8]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	db36      	blt.n	8015542 <_dtoa_r+0x222>
 80154d4:	9a02      	ldr	r2, [sp, #8]
 80154d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154d8:	4694      	mov	ip, r2
 80154da:	4463      	add	r3, ip
 80154dc:	930d      	str	r3, [sp, #52]	; 0x34
 80154de:	2300      	movs	r3, #0
 80154e0:	9215      	str	r2, [sp, #84]	; 0x54
 80154e2:	930e      	str	r3, [sp, #56]	; 0x38
 80154e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80154e6:	2401      	movs	r4, #1
 80154e8:	2b09      	cmp	r3, #9
 80154ea:	d864      	bhi.n	80155b6 <_dtoa_r+0x296>
 80154ec:	2b05      	cmp	r3, #5
 80154ee:	dd02      	ble.n	80154f6 <_dtoa_r+0x1d6>
 80154f0:	2400      	movs	r4, #0
 80154f2:	3b04      	subs	r3, #4
 80154f4:	9322      	str	r3, [sp, #136]	; 0x88
 80154f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80154f8:	1e98      	subs	r0, r3, #2
 80154fa:	2803      	cmp	r0, #3
 80154fc:	d864      	bhi.n	80155c8 <_dtoa_r+0x2a8>
 80154fe:	f7ea fe11 	bl	8000124 <__gnu_thumb1_case_uqi>
 8015502:	3829      	.short	0x3829
 8015504:	5836      	.short	0x5836
 8015506:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015508:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801550a:	189e      	adds	r6, r3, r2
 801550c:	4b68      	ldr	r3, [pc, #416]	; (80156b0 <_dtoa_r+0x390>)
 801550e:	18f2      	adds	r2, r6, r3
 8015510:	2a20      	cmp	r2, #32
 8015512:	dd0f      	ble.n	8015534 <_dtoa_r+0x214>
 8015514:	2340      	movs	r3, #64	; 0x40
 8015516:	1a9b      	subs	r3, r3, r2
 8015518:	409d      	lsls	r5, r3
 801551a:	4b66      	ldr	r3, [pc, #408]	; (80156b4 <_dtoa_r+0x394>)
 801551c:	9802      	ldr	r0, [sp, #8]
 801551e:	18f3      	adds	r3, r6, r3
 8015520:	40d8      	lsrs	r0, r3
 8015522:	4328      	orrs	r0, r5
 8015524:	f7ed fc9e 	bl	8002e64 <__aeabi_ui2d>
 8015528:	2301      	movs	r3, #1
 801552a:	4c63      	ldr	r4, [pc, #396]	; (80156b8 <_dtoa_r+0x398>)
 801552c:	3e01      	subs	r6, #1
 801552e:	1909      	adds	r1, r1, r4
 8015530:	9318      	str	r3, [sp, #96]	; 0x60
 8015532:	e776      	b.n	8015422 <_dtoa_r+0x102>
 8015534:	2320      	movs	r3, #32
 8015536:	9802      	ldr	r0, [sp, #8]
 8015538:	1a9b      	subs	r3, r3, r2
 801553a:	4098      	lsls	r0, r3
 801553c:	e7f2      	b.n	8015524 <_dtoa_r+0x204>
 801553e:	9016      	str	r0, [sp, #88]	; 0x58
 8015540:	e7b8      	b.n	80154b4 <_dtoa_r+0x194>
 8015542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015544:	9a02      	ldr	r2, [sp, #8]
 8015546:	1a9b      	subs	r3, r3, r2
 8015548:	930a      	str	r3, [sp, #40]	; 0x28
 801554a:	4253      	negs	r3, r2
 801554c:	930e      	str	r3, [sp, #56]	; 0x38
 801554e:	2300      	movs	r3, #0
 8015550:	9315      	str	r3, [sp, #84]	; 0x54
 8015552:	e7c7      	b.n	80154e4 <_dtoa_r+0x1c4>
 8015554:	2300      	movs	r3, #0
 8015556:	930f      	str	r3, [sp, #60]	; 0x3c
 8015558:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801555a:	930c      	str	r3, [sp, #48]	; 0x30
 801555c:	9307      	str	r3, [sp, #28]
 801555e:	2b00      	cmp	r3, #0
 8015560:	dc13      	bgt.n	801558a <_dtoa_r+0x26a>
 8015562:	2301      	movs	r3, #1
 8015564:	001a      	movs	r2, r3
 8015566:	930c      	str	r3, [sp, #48]	; 0x30
 8015568:	9307      	str	r3, [sp, #28]
 801556a:	9223      	str	r2, [sp, #140]	; 0x8c
 801556c:	e00d      	b.n	801558a <_dtoa_r+0x26a>
 801556e:	2301      	movs	r3, #1
 8015570:	e7f1      	b.n	8015556 <_dtoa_r+0x236>
 8015572:	2300      	movs	r3, #0
 8015574:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015576:	930f      	str	r3, [sp, #60]	; 0x3c
 8015578:	4694      	mov	ip, r2
 801557a:	9b02      	ldr	r3, [sp, #8]
 801557c:	4463      	add	r3, ip
 801557e:	930c      	str	r3, [sp, #48]	; 0x30
 8015580:	3301      	adds	r3, #1
 8015582:	9307      	str	r3, [sp, #28]
 8015584:	2b00      	cmp	r3, #0
 8015586:	dc00      	bgt.n	801558a <_dtoa_r+0x26a>
 8015588:	2301      	movs	r3, #1
 801558a:	2200      	movs	r2, #0
 801558c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801558e:	6042      	str	r2, [r0, #4]
 8015590:	3204      	adds	r2, #4
 8015592:	0015      	movs	r5, r2
 8015594:	3514      	adds	r5, #20
 8015596:	6841      	ldr	r1, [r0, #4]
 8015598:	429d      	cmp	r5, r3
 801559a:	d919      	bls.n	80155d0 <_dtoa_r+0x2b0>
 801559c:	0038      	movs	r0, r7
 801559e:	f000 fcf9 	bl	8015f94 <_Balloc>
 80155a2:	9006      	str	r0, [sp, #24]
 80155a4:	2800      	cmp	r0, #0
 80155a6:	d117      	bne.n	80155d8 <_dtoa_r+0x2b8>
 80155a8:	21d5      	movs	r1, #213	; 0xd5
 80155aa:	0002      	movs	r2, r0
 80155ac:	4b43      	ldr	r3, [pc, #268]	; (80156bc <_dtoa_r+0x39c>)
 80155ae:	0049      	lsls	r1, r1, #1
 80155b0:	e6cb      	b.n	801534a <_dtoa_r+0x2a>
 80155b2:	2301      	movs	r3, #1
 80155b4:	e7de      	b.n	8015574 <_dtoa_r+0x254>
 80155b6:	2300      	movs	r3, #0
 80155b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80155ba:	9322      	str	r3, [sp, #136]	; 0x88
 80155bc:	3b01      	subs	r3, #1
 80155be:	930c      	str	r3, [sp, #48]	; 0x30
 80155c0:	9307      	str	r3, [sp, #28]
 80155c2:	2200      	movs	r2, #0
 80155c4:	3313      	adds	r3, #19
 80155c6:	e7d0      	b.n	801556a <_dtoa_r+0x24a>
 80155c8:	2301      	movs	r3, #1
 80155ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80155cc:	3b02      	subs	r3, #2
 80155ce:	e7f6      	b.n	80155be <_dtoa_r+0x29e>
 80155d0:	3101      	adds	r1, #1
 80155d2:	6041      	str	r1, [r0, #4]
 80155d4:	0052      	lsls	r2, r2, #1
 80155d6:	e7dc      	b.n	8015592 <_dtoa_r+0x272>
 80155d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155da:	9a06      	ldr	r2, [sp, #24]
 80155dc:	601a      	str	r2, [r3, #0]
 80155de:	9b07      	ldr	r3, [sp, #28]
 80155e0:	2b0e      	cmp	r3, #14
 80155e2:	d900      	bls.n	80155e6 <_dtoa_r+0x2c6>
 80155e4:	e0eb      	b.n	80157be <_dtoa_r+0x49e>
 80155e6:	2c00      	cmp	r4, #0
 80155e8:	d100      	bne.n	80155ec <_dtoa_r+0x2cc>
 80155ea:	e0e8      	b.n	80157be <_dtoa_r+0x49e>
 80155ec:	9b02      	ldr	r3, [sp, #8]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	dd68      	ble.n	80156c4 <_dtoa_r+0x3a4>
 80155f2:	001a      	movs	r2, r3
 80155f4:	210f      	movs	r1, #15
 80155f6:	4b2d      	ldr	r3, [pc, #180]	; (80156ac <_dtoa_r+0x38c>)
 80155f8:	400a      	ands	r2, r1
 80155fa:	00d2      	lsls	r2, r2, #3
 80155fc:	189b      	adds	r3, r3, r2
 80155fe:	681d      	ldr	r5, [r3, #0]
 8015600:	685e      	ldr	r6, [r3, #4]
 8015602:	9b02      	ldr	r3, [sp, #8]
 8015604:	111c      	asrs	r4, r3, #4
 8015606:	2302      	movs	r3, #2
 8015608:	9310      	str	r3, [sp, #64]	; 0x40
 801560a:	9b02      	ldr	r3, [sp, #8]
 801560c:	05db      	lsls	r3, r3, #23
 801560e:	d50b      	bpl.n	8015628 <_dtoa_r+0x308>
 8015610:	4b2b      	ldr	r3, [pc, #172]	; (80156c0 <_dtoa_r+0x3a0>)
 8015612:	400c      	ands	r4, r1
 8015614:	6a1a      	ldr	r2, [r3, #32]
 8015616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015618:	9812      	ldr	r0, [sp, #72]	; 0x48
 801561a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801561c:	f7ec f99e 	bl	800195c <__aeabi_ddiv>
 8015620:	2303      	movs	r3, #3
 8015622:	9008      	str	r0, [sp, #32]
 8015624:	9109      	str	r1, [sp, #36]	; 0x24
 8015626:	9310      	str	r3, [sp, #64]	; 0x40
 8015628:	4b25      	ldr	r3, [pc, #148]	; (80156c0 <_dtoa_r+0x3a0>)
 801562a:	9314      	str	r3, [sp, #80]	; 0x50
 801562c:	2c00      	cmp	r4, #0
 801562e:	d108      	bne.n	8015642 <_dtoa_r+0x322>
 8015630:	9808      	ldr	r0, [sp, #32]
 8015632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015634:	002a      	movs	r2, r5
 8015636:	0033      	movs	r3, r6
 8015638:	f7ec f990 	bl	800195c <__aeabi_ddiv>
 801563c:	9008      	str	r0, [sp, #32]
 801563e:	9109      	str	r1, [sp, #36]	; 0x24
 8015640:	e05c      	b.n	80156fc <_dtoa_r+0x3dc>
 8015642:	2301      	movs	r3, #1
 8015644:	421c      	tst	r4, r3
 8015646:	d00b      	beq.n	8015660 <_dtoa_r+0x340>
 8015648:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801564a:	0028      	movs	r0, r5
 801564c:	3301      	adds	r3, #1
 801564e:	9310      	str	r3, [sp, #64]	; 0x40
 8015650:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015652:	0031      	movs	r1, r6
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	f7ec fd82 	bl	8002160 <__aeabi_dmul>
 801565c:	0005      	movs	r5, r0
 801565e:	000e      	movs	r6, r1
 8015660:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015662:	1064      	asrs	r4, r4, #1
 8015664:	3308      	adds	r3, #8
 8015666:	e7e0      	b.n	801562a <_dtoa_r+0x30a>
 8015668:	08018ae1 	.word	0x08018ae1
 801566c:	08018af8 	.word	0x08018af8
 8015670:	7ff00000 	.word	0x7ff00000
 8015674:	0000270f 	.word	0x0000270f
 8015678:	08018add 	.word	0x08018add
 801567c:	08018ae0 	.word	0x08018ae0
 8015680:	08018ab0 	.word	0x08018ab0
 8015684:	08018ab1 	.word	0x08018ab1
 8015688:	3ff00000 	.word	0x3ff00000
 801568c:	fffffc01 	.word	0xfffffc01
 8015690:	3ff80000 	.word	0x3ff80000
 8015694:	636f4361 	.word	0x636f4361
 8015698:	3fd287a7 	.word	0x3fd287a7
 801569c:	8b60c8b3 	.word	0x8b60c8b3
 80156a0:	3fc68a28 	.word	0x3fc68a28
 80156a4:	509f79fb 	.word	0x509f79fb
 80156a8:	3fd34413 	.word	0x3fd34413
 80156ac:	08018be8 	.word	0x08018be8
 80156b0:	00000432 	.word	0x00000432
 80156b4:	00000412 	.word	0x00000412
 80156b8:	fe100000 	.word	0xfe100000
 80156bc:	08018b53 	.word	0x08018b53
 80156c0:	08018bc0 	.word	0x08018bc0
 80156c4:	2302      	movs	r3, #2
 80156c6:	9310      	str	r3, [sp, #64]	; 0x40
 80156c8:	9b02      	ldr	r3, [sp, #8]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d016      	beq.n	80156fc <_dtoa_r+0x3dc>
 80156ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80156d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80156d2:	425c      	negs	r4, r3
 80156d4:	230f      	movs	r3, #15
 80156d6:	4ab6      	ldr	r2, [pc, #728]	; (80159b0 <_dtoa_r+0x690>)
 80156d8:	4023      	ands	r3, r4
 80156da:	00db      	lsls	r3, r3, #3
 80156dc:	18d3      	adds	r3, r2, r3
 80156de:	681a      	ldr	r2, [r3, #0]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	f7ec fd3d 	bl	8002160 <__aeabi_dmul>
 80156e6:	2601      	movs	r6, #1
 80156e8:	2300      	movs	r3, #0
 80156ea:	9008      	str	r0, [sp, #32]
 80156ec:	9109      	str	r1, [sp, #36]	; 0x24
 80156ee:	4db1      	ldr	r5, [pc, #708]	; (80159b4 <_dtoa_r+0x694>)
 80156f0:	1124      	asrs	r4, r4, #4
 80156f2:	2c00      	cmp	r4, #0
 80156f4:	d000      	beq.n	80156f8 <_dtoa_r+0x3d8>
 80156f6:	e094      	b.n	8015822 <_dtoa_r+0x502>
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d19f      	bne.n	801563c <_dtoa_r+0x31c>
 80156fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d100      	bne.n	8015704 <_dtoa_r+0x3e4>
 8015702:	e09b      	b.n	801583c <_dtoa_r+0x51c>
 8015704:	9c08      	ldr	r4, [sp, #32]
 8015706:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015708:	2200      	movs	r2, #0
 801570a:	0020      	movs	r0, r4
 801570c:	0029      	movs	r1, r5
 801570e:	4baa      	ldr	r3, [pc, #680]	; (80159b8 <_dtoa_r+0x698>)
 8015710:	f7ea fea8 	bl	8000464 <__aeabi_dcmplt>
 8015714:	2800      	cmp	r0, #0
 8015716:	d100      	bne.n	801571a <_dtoa_r+0x3fa>
 8015718:	e090      	b.n	801583c <_dtoa_r+0x51c>
 801571a:	9b07      	ldr	r3, [sp, #28]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d100      	bne.n	8015722 <_dtoa_r+0x402>
 8015720:	e08c      	b.n	801583c <_dtoa_r+0x51c>
 8015722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015724:	2b00      	cmp	r3, #0
 8015726:	dd46      	ble.n	80157b6 <_dtoa_r+0x496>
 8015728:	9b02      	ldr	r3, [sp, #8]
 801572a:	2200      	movs	r2, #0
 801572c:	0020      	movs	r0, r4
 801572e:	0029      	movs	r1, r5
 8015730:	1e5e      	subs	r6, r3, #1
 8015732:	4ba2      	ldr	r3, [pc, #648]	; (80159bc <_dtoa_r+0x69c>)
 8015734:	f7ec fd14 	bl	8002160 <__aeabi_dmul>
 8015738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801573a:	9008      	str	r0, [sp, #32]
 801573c:	9109      	str	r1, [sp, #36]	; 0x24
 801573e:	3301      	adds	r3, #1
 8015740:	9310      	str	r3, [sp, #64]	; 0x40
 8015742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015744:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015746:	9c08      	ldr	r4, [sp, #32]
 8015748:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801574a:	9314      	str	r3, [sp, #80]	; 0x50
 801574c:	f7ed fb5a 	bl	8002e04 <__aeabi_i2d>
 8015750:	0022      	movs	r2, r4
 8015752:	002b      	movs	r3, r5
 8015754:	f7ec fd04 	bl	8002160 <__aeabi_dmul>
 8015758:	2200      	movs	r2, #0
 801575a:	4b99      	ldr	r3, [pc, #612]	; (80159c0 <_dtoa_r+0x6a0>)
 801575c:	f7eb fdc2 	bl	80012e4 <__aeabi_dadd>
 8015760:	9010      	str	r0, [sp, #64]	; 0x40
 8015762:	9111      	str	r1, [sp, #68]	; 0x44
 8015764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015768:	9208      	str	r2, [sp, #32]
 801576a:	9309      	str	r3, [sp, #36]	; 0x24
 801576c:	4a95      	ldr	r2, [pc, #596]	; (80159c4 <_dtoa_r+0x6a4>)
 801576e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015770:	4694      	mov	ip, r2
 8015772:	4463      	add	r3, ip
 8015774:	9317      	str	r3, [sp, #92]	; 0x5c
 8015776:	9309      	str	r3, [sp, #36]	; 0x24
 8015778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801577a:	2b00      	cmp	r3, #0
 801577c:	d161      	bne.n	8015842 <_dtoa_r+0x522>
 801577e:	2200      	movs	r2, #0
 8015780:	0020      	movs	r0, r4
 8015782:	0029      	movs	r1, r5
 8015784:	4b90      	ldr	r3, [pc, #576]	; (80159c8 <_dtoa_r+0x6a8>)
 8015786:	f7ec ff57 	bl	8002638 <__aeabi_dsub>
 801578a:	9a08      	ldr	r2, [sp, #32]
 801578c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801578e:	0004      	movs	r4, r0
 8015790:	000d      	movs	r5, r1
 8015792:	f7ea fe7b 	bl	800048c <__aeabi_dcmpgt>
 8015796:	2800      	cmp	r0, #0
 8015798:	d000      	beq.n	801579c <_dtoa_r+0x47c>
 801579a:	e2af      	b.n	8015cfc <_dtoa_r+0x9dc>
 801579c:	488b      	ldr	r0, [pc, #556]	; (80159cc <_dtoa_r+0x6ac>)
 801579e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80157a0:	4684      	mov	ip, r0
 80157a2:	4461      	add	r1, ip
 80157a4:	000b      	movs	r3, r1
 80157a6:	0020      	movs	r0, r4
 80157a8:	0029      	movs	r1, r5
 80157aa:	9a08      	ldr	r2, [sp, #32]
 80157ac:	f7ea fe5a 	bl	8000464 <__aeabi_dcmplt>
 80157b0:	2800      	cmp	r0, #0
 80157b2:	d000      	beq.n	80157b6 <_dtoa_r+0x496>
 80157b4:	e29f      	b.n	8015cf6 <_dtoa_r+0x9d6>
 80157b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80157ba:	9308      	str	r3, [sp, #32]
 80157bc:	9409      	str	r4, [sp, #36]	; 0x24
 80157be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	da00      	bge.n	80157c6 <_dtoa_r+0x4a6>
 80157c4:	e172      	b.n	8015aac <_dtoa_r+0x78c>
 80157c6:	9a02      	ldr	r2, [sp, #8]
 80157c8:	2a0e      	cmp	r2, #14
 80157ca:	dd00      	ble.n	80157ce <_dtoa_r+0x4ae>
 80157cc:	e16e      	b.n	8015aac <_dtoa_r+0x78c>
 80157ce:	4b78      	ldr	r3, [pc, #480]	; (80159b0 <_dtoa_r+0x690>)
 80157d0:	00d2      	lsls	r2, r2, #3
 80157d2:	189b      	adds	r3, r3, r2
 80157d4:	685c      	ldr	r4, [r3, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	930a      	str	r3, [sp, #40]	; 0x28
 80157da:	940b      	str	r4, [sp, #44]	; 0x2c
 80157dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80157de:	2b00      	cmp	r3, #0
 80157e0:	db00      	blt.n	80157e4 <_dtoa_r+0x4c4>
 80157e2:	e0f7      	b.n	80159d4 <_dtoa_r+0x6b4>
 80157e4:	9b07      	ldr	r3, [sp, #28]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	dd00      	ble.n	80157ec <_dtoa_r+0x4cc>
 80157ea:	e0f3      	b.n	80159d4 <_dtoa_r+0x6b4>
 80157ec:	d000      	beq.n	80157f0 <_dtoa_r+0x4d0>
 80157ee:	e282      	b.n	8015cf6 <_dtoa_r+0x9d6>
 80157f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157f4:	2200      	movs	r2, #0
 80157f6:	4b74      	ldr	r3, [pc, #464]	; (80159c8 <_dtoa_r+0x6a8>)
 80157f8:	f7ec fcb2 	bl	8002160 <__aeabi_dmul>
 80157fc:	9a08      	ldr	r2, [sp, #32]
 80157fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015800:	f7ea fe4e 	bl	80004a0 <__aeabi_dcmpge>
 8015804:	9e07      	ldr	r6, [sp, #28]
 8015806:	0035      	movs	r5, r6
 8015808:	2800      	cmp	r0, #0
 801580a:	d000      	beq.n	801580e <_dtoa_r+0x4ee>
 801580c:	e259      	b.n	8015cc2 <_dtoa_r+0x9a2>
 801580e:	9b06      	ldr	r3, [sp, #24]
 8015810:	9a06      	ldr	r2, [sp, #24]
 8015812:	3301      	adds	r3, #1
 8015814:	9308      	str	r3, [sp, #32]
 8015816:	2331      	movs	r3, #49	; 0x31
 8015818:	7013      	strb	r3, [r2, #0]
 801581a:	9b02      	ldr	r3, [sp, #8]
 801581c:	3301      	adds	r3, #1
 801581e:	9302      	str	r3, [sp, #8]
 8015820:	e254      	b.n	8015ccc <_dtoa_r+0x9ac>
 8015822:	4234      	tst	r4, r6
 8015824:	d007      	beq.n	8015836 <_dtoa_r+0x516>
 8015826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015828:	3301      	adds	r3, #1
 801582a:	9310      	str	r3, [sp, #64]	; 0x40
 801582c:	682a      	ldr	r2, [r5, #0]
 801582e:	686b      	ldr	r3, [r5, #4]
 8015830:	f7ec fc96 	bl	8002160 <__aeabi_dmul>
 8015834:	0033      	movs	r3, r6
 8015836:	1064      	asrs	r4, r4, #1
 8015838:	3508      	adds	r5, #8
 801583a:	e75a      	b.n	80156f2 <_dtoa_r+0x3d2>
 801583c:	9e02      	ldr	r6, [sp, #8]
 801583e:	9b07      	ldr	r3, [sp, #28]
 8015840:	e780      	b.n	8015744 <_dtoa_r+0x424>
 8015842:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015844:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015846:	1e5a      	subs	r2, r3, #1
 8015848:	4b59      	ldr	r3, [pc, #356]	; (80159b0 <_dtoa_r+0x690>)
 801584a:	00d2      	lsls	r2, r2, #3
 801584c:	189b      	adds	r3, r3, r2
 801584e:	681a      	ldr	r2, [r3, #0]
 8015850:	685b      	ldr	r3, [r3, #4]
 8015852:	2900      	cmp	r1, #0
 8015854:	d051      	beq.n	80158fa <_dtoa_r+0x5da>
 8015856:	2000      	movs	r0, #0
 8015858:	495d      	ldr	r1, [pc, #372]	; (80159d0 <_dtoa_r+0x6b0>)
 801585a:	f7ec f87f 	bl	800195c <__aeabi_ddiv>
 801585e:	9a08      	ldr	r2, [sp, #32]
 8015860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015862:	f7ec fee9 	bl	8002638 <__aeabi_dsub>
 8015866:	9a06      	ldr	r2, [sp, #24]
 8015868:	9b06      	ldr	r3, [sp, #24]
 801586a:	4694      	mov	ip, r2
 801586c:	9317      	str	r3, [sp, #92]	; 0x5c
 801586e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015870:	9010      	str	r0, [sp, #64]	; 0x40
 8015872:	9111      	str	r1, [sp, #68]	; 0x44
 8015874:	4463      	add	r3, ip
 8015876:	9319      	str	r3, [sp, #100]	; 0x64
 8015878:	0029      	movs	r1, r5
 801587a:	0020      	movs	r0, r4
 801587c:	f7ed fa8c 	bl	8002d98 <__aeabi_d2iz>
 8015880:	9014      	str	r0, [sp, #80]	; 0x50
 8015882:	f7ed fabf 	bl	8002e04 <__aeabi_i2d>
 8015886:	0002      	movs	r2, r0
 8015888:	000b      	movs	r3, r1
 801588a:	0020      	movs	r0, r4
 801588c:	0029      	movs	r1, r5
 801588e:	f7ec fed3 	bl	8002638 <__aeabi_dsub>
 8015892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015894:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015896:	3301      	adds	r3, #1
 8015898:	9308      	str	r3, [sp, #32]
 801589a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801589c:	0004      	movs	r4, r0
 801589e:	3330      	adds	r3, #48	; 0x30
 80158a0:	7013      	strb	r3, [r2, #0]
 80158a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158a6:	000d      	movs	r5, r1
 80158a8:	f7ea fddc 	bl	8000464 <__aeabi_dcmplt>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d175      	bne.n	801599c <_dtoa_r+0x67c>
 80158b0:	0022      	movs	r2, r4
 80158b2:	002b      	movs	r3, r5
 80158b4:	2000      	movs	r0, #0
 80158b6:	4940      	ldr	r1, [pc, #256]	; (80159b8 <_dtoa_r+0x698>)
 80158b8:	f7ec febe 	bl	8002638 <__aeabi_dsub>
 80158bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158c0:	f7ea fdd0 	bl	8000464 <__aeabi_dcmplt>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d000      	beq.n	80158ca <_dtoa_r+0x5aa>
 80158c8:	e0d2      	b.n	8015a70 <_dtoa_r+0x750>
 80158ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80158cc:	9a08      	ldr	r2, [sp, #32]
 80158ce:	4293      	cmp	r3, r2
 80158d0:	d100      	bne.n	80158d4 <_dtoa_r+0x5b4>
 80158d2:	e770      	b.n	80157b6 <_dtoa_r+0x496>
 80158d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80158d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80158d8:	2200      	movs	r2, #0
 80158da:	4b38      	ldr	r3, [pc, #224]	; (80159bc <_dtoa_r+0x69c>)
 80158dc:	f7ec fc40 	bl	8002160 <__aeabi_dmul>
 80158e0:	4b36      	ldr	r3, [pc, #216]	; (80159bc <_dtoa_r+0x69c>)
 80158e2:	9010      	str	r0, [sp, #64]	; 0x40
 80158e4:	9111      	str	r1, [sp, #68]	; 0x44
 80158e6:	2200      	movs	r2, #0
 80158e8:	0020      	movs	r0, r4
 80158ea:	0029      	movs	r1, r5
 80158ec:	f7ec fc38 	bl	8002160 <__aeabi_dmul>
 80158f0:	9b08      	ldr	r3, [sp, #32]
 80158f2:	0004      	movs	r4, r0
 80158f4:	000d      	movs	r5, r1
 80158f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80158f8:	e7be      	b.n	8015878 <_dtoa_r+0x558>
 80158fa:	9808      	ldr	r0, [sp, #32]
 80158fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158fe:	f7ec fc2f 	bl	8002160 <__aeabi_dmul>
 8015902:	9a06      	ldr	r2, [sp, #24]
 8015904:	9b06      	ldr	r3, [sp, #24]
 8015906:	4694      	mov	ip, r2
 8015908:	9308      	str	r3, [sp, #32]
 801590a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801590c:	9010      	str	r0, [sp, #64]	; 0x40
 801590e:	9111      	str	r1, [sp, #68]	; 0x44
 8015910:	4463      	add	r3, ip
 8015912:	9319      	str	r3, [sp, #100]	; 0x64
 8015914:	0029      	movs	r1, r5
 8015916:	0020      	movs	r0, r4
 8015918:	f7ed fa3e 	bl	8002d98 <__aeabi_d2iz>
 801591c:	9017      	str	r0, [sp, #92]	; 0x5c
 801591e:	f7ed fa71 	bl	8002e04 <__aeabi_i2d>
 8015922:	0002      	movs	r2, r0
 8015924:	000b      	movs	r3, r1
 8015926:	0020      	movs	r0, r4
 8015928:	0029      	movs	r1, r5
 801592a:	f7ec fe85 	bl	8002638 <__aeabi_dsub>
 801592e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015930:	9a08      	ldr	r2, [sp, #32]
 8015932:	3330      	adds	r3, #48	; 0x30
 8015934:	7013      	strb	r3, [r2, #0]
 8015936:	0013      	movs	r3, r2
 8015938:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801593a:	3301      	adds	r3, #1
 801593c:	0004      	movs	r4, r0
 801593e:	000d      	movs	r5, r1
 8015940:	9308      	str	r3, [sp, #32]
 8015942:	4293      	cmp	r3, r2
 8015944:	d12c      	bne.n	80159a0 <_dtoa_r+0x680>
 8015946:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015948:	9911      	ldr	r1, [sp, #68]	; 0x44
 801594a:	9a06      	ldr	r2, [sp, #24]
 801594c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801594e:	4694      	mov	ip, r2
 8015950:	4463      	add	r3, ip
 8015952:	2200      	movs	r2, #0
 8015954:	9308      	str	r3, [sp, #32]
 8015956:	4b1e      	ldr	r3, [pc, #120]	; (80159d0 <_dtoa_r+0x6b0>)
 8015958:	f7eb fcc4 	bl	80012e4 <__aeabi_dadd>
 801595c:	0002      	movs	r2, r0
 801595e:	000b      	movs	r3, r1
 8015960:	0020      	movs	r0, r4
 8015962:	0029      	movs	r1, r5
 8015964:	f7ea fd92 	bl	800048c <__aeabi_dcmpgt>
 8015968:	2800      	cmp	r0, #0
 801596a:	d000      	beq.n	801596e <_dtoa_r+0x64e>
 801596c:	e080      	b.n	8015a70 <_dtoa_r+0x750>
 801596e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015972:	2000      	movs	r0, #0
 8015974:	4916      	ldr	r1, [pc, #88]	; (80159d0 <_dtoa_r+0x6b0>)
 8015976:	f7ec fe5f 	bl	8002638 <__aeabi_dsub>
 801597a:	0002      	movs	r2, r0
 801597c:	000b      	movs	r3, r1
 801597e:	0020      	movs	r0, r4
 8015980:	0029      	movs	r1, r5
 8015982:	f7ea fd6f 	bl	8000464 <__aeabi_dcmplt>
 8015986:	2800      	cmp	r0, #0
 8015988:	d100      	bne.n	801598c <_dtoa_r+0x66c>
 801598a:	e714      	b.n	80157b6 <_dtoa_r+0x496>
 801598c:	9b08      	ldr	r3, [sp, #32]
 801598e:	001a      	movs	r2, r3
 8015990:	3a01      	subs	r2, #1
 8015992:	9208      	str	r2, [sp, #32]
 8015994:	7812      	ldrb	r2, [r2, #0]
 8015996:	2a30      	cmp	r2, #48	; 0x30
 8015998:	d0f8      	beq.n	801598c <_dtoa_r+0x66c>
 801599a:	9308      	str	r3, [sp, #32]
 801599c:	9602      	str	r6, [sp, #8]
 801599e:	e055      	b.n	8015a4c <_dtoa_r+0x72c>
 80159a0:	2200      	movs	r2, #0
 80159a2:	4b06      	ldr	r3, [pc, #24]	; (80159bc <_dtoa_r+0x69c>)
 80159a4:	f7ec fbdc 	bl	8002160 <__aeabi_dmul>
 80159a8:	0004      	movs	r4, r0
 80159aa:	000d      	movs	r5, r1
 80159ac:	e7b2      	b.n	8015914 <_dtoa_r+0x5f4>
 80159ae:	46c0      	nop			; (mov r8, r8)
 80159b0:	08018be8 	.word	0x08018be8
 80159b4:	08018bc0 	.word	0x08018bc0
 80159b8:	3ff00000 	.word	0x3ff00000
 80159bc:	40240000 	.word	0x40240000
 80159c0:	401c0000 	.word	0x401c0000
 80159c4:	fcc00000 	.word	0xfcc00000
 80159c8:	40140000 	.word	0x40140000
 80159cc:	7cc00000 	.word	0x7cc00000
 80159d0:	3fe00000 	.word	0x3fe00000
 80159d4:	9b07      	ldr	r3, [sp, #28]
 80159d6:	9e06      	ldr	r6, [sp, #24]
 80159d8:	3b01      	subs	r3, #1
 80159da:	199b      	adds	r3, r3, r6
 80159dc:	930c      	str	r3, [sp, #48]	; 0x30
 80159de:	9c08      	ldr	r4, [sp, #32]
 80159e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80159e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159e6:	0020      	movs	r0, r4
 80159e8:	0029      	movs	r1, r5
 80159ea:	f7eb ffb7 	bl	800195c <__aeabi_ddiv>
 80159ee:	f7ed f9d3 	bl	8002d98 <__aeabi_d2iz>
 80159f2:	9007      	str	r0, [sp, #28]
 80159f4:	f7ed fa06 	bl	8002e04 <__aeabi_i2d>
 80159f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159fc:	f7ec fbb0 	bl	8002160 <__aeabi_dmul>
 8015a00:	0002      	movs	r2, r0
 8015a02:	000b      	movs	r3, r1
 8015a04:	0020      	movs	r0, r4
 8015a06:	0029      	movs	r1, r5
 8015a08:	f7ec fe16 	bl	8002638 <__aeabi_dsub>
 8015a0c:	0033      	movs	r3, r6
 8015a0e:	9a07      	ldr	r2, [sp, #28]
 8015a10:	3601      	adds	r6, #1
 8015a12:	3230      	adds	r2, #48	; 0x30
 8015a14:	701a      	strb	r2, [r3, #0]
 8015a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a18:	9608      	str	r6, [sp, #32]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d139      	bne.n	8015a92 <_dtoa_r+0x772>
 8015a1e:	0002      	movs	r2, r0
 8015a20:	000b      	movs	r3, r1
 8015a22:	f7eb fc5f 	bl	80012e4 <__aeabi_dadd>
 8015a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a2a:	0004      	movs	r4, r0
 8015a2c:	000d      	movs	r5, r1
 8015a2e:	f7ea fd2d 	bl	800048c <__aeabi_dcmpgt>
 8015a32:	2800      	cmp	r0, #0
 8015a34:	d11b      	bne.n	8015a6e <_dtoa_r+0x74e>
 8015a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a3a:	0020      	movs	r0, r4
 8015a3c:	0029      	movs	r1, r5
 8015a3e:	f7ea fd0b 	bl	8000458 <__aeabi_dcmpeq>
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d002      	beq.n	8015a4c <_dtoa_r+0x72c>
 8015a46:	9b07      	ldr	r3, [sp, #28]
 8015a48:	07db      	lsls	r3, r3, #31
 8015a4a:	d410      	bmi.n	8015a6e <_dtoa_r+0x74e>
 8015a4c:	0038      	movs	r0, r7
 8015a4e:	9905      	ldr	r1, [sp, #20]
 8015a50:	f000 fae4 	bl	801601c <_Bfree>
 8015a54:	2300      	movs	r3, #0
 8015a56:	9a08      	ldr	r2, [sp, #32]
 8015a58:	9802      	ldr	r0, [sp, #8]
 8015a5a:	7013      	strb	r3, [r2, #0]
 8015a5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015a5e:	3001      	adds	r0, #1
 8015a60:	6018      	str	r0, [r3, #0]
 8015a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d100      	bne.n	8015a6a <_dtoa_r+0x74a>
 8015a68:	e4a6      	b.n	80153b8 <_dtoa_r+0x98>
 8015a6a:	601a      	str	r2, [r3, #0]
 8015a6c:	e4a4      	b.n	80153b8 <_dtoa_r+0x98>
 8015a6e:	9e02      	ldr	r6, [sp, #8]
 8015a70:	9b08      	ldr	r3, [sp, #32]
 8015a72:	9308      	str	r3, [sp, #32]
 8015a74:	3b01      	subs	r3, #1
 8015a76:	781a      	ldrb	r2, [r3, #0]
 8015a78:	2a39      	cmp	r2, #57	; 0x39
 8015a7a:	d106      	bne.n	8015a8a <_dtoa_r+0x76a>
 8015a7c:	9a06      	ldr	r2, [sp, #24]
 8015a7e:	429a      	cmp	r2, r3
 8015a80:	d1f7      	bne.n	8015a72 <_dtoa_r+0x752>
 8015a82:	2230      	movs	r2, #48	; 0x30
 8015a84:	9906      	ldr	r1, [sp, #24]
 8015a86:	3601      	adds	r6, #1
 8015a88:	700a      	strb	r2, [r1, #0]
 8015a8a:	781a      	ldrb	r2, [r3, #0]
 8015a8c:	3201      	adds	r2, #1
 8015a8e:	701a      	strb	r2, [r3, #0]
 8015a90:	e784      	b.n	801599c <_dtoa_r+0x67c>
 8015a92:	2200      	movs	r2, #0
 8015a94:	4baa      	ldr	r3, [pc, #680]	; (8015d40 <_dtoa_r+0xa20>)
 8015a96:	f7ec fb63 	bl	8002160 <__aeabi_dmul>
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	0004      	movs	r4, r0
 8015aa0:	000d      	movs	r5, r1
 8015aa2:	f7ea fcd9 	bl	8000458 <__aeabi_dcmpeq>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	d09b      	beq.n	80159e2 <_dtoa_r+0x6c2>
 8015aaa:	e7cf      	b.n	8015a4c <_dtoa_r+0x72c>
 8015aac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015aae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015ab0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ab2:	2d00      	cmp	r5, #0
 8015ab4:	d012      	beq.n	8015adc <_dtoa_r+0x7bc>
 8015ab6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015ab8:	2a01      	cmp	r2, #1
 8015aba:	dc66      	bgt.n	8015b8a <_dtoa_r+0x86a>
 8015abc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015abe:	2a00      	cmp	r2, #0
 8015ac0:	d05d      	beq.n	8015b7e <_dtoa_r+0x85e>
 8015ac2:	4aa0      	ldr	r2, [pc, #640]	; (8015d44 <_dtoa_r+0xa24>)
 8015ac4:	189b      	adds	r3, r3, r2
 8015ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ac8:	2101      	movs	r1, #1
 8015aca:	18d2      	adds	r2, r2, r3
 8015acc:	920a      	str	r2, [sp, #40]	; 0x28
 8015ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ad0:	0038      	movs	r0, r7
 8015ad2:	18d3      	adds	r3, r2, r3
 8015ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ad6:	f000 fb51 	bl	801617c <__i2b>
 8015ada:	0005      	movs	r5, r0
 8015adc:	2c00      	cmp	r4, #0
 8015ade:	dd0e      	ble.n	8015afe <_dtoa_r+0x7de>
 8015ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	dd0b      	ble.n	8015afe <_dtoa_r+0x7de>
 8015ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ae8:	0023      	movs	r3, r4
 8015aea:	4294      	cmp	r4, r2
 8015aec:	dd00      	ble.n	8015af0 <_dtoa_r+0x7d0>
 8015aee:	0013      	movs	r3, r2
 8015af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015af2:	1ae4      	subs	r4, r4, r3
 8015af4:	1ad2      	subs	r2, r2, r3
 8015af6:	920a      	str	r2, [sp, #40]	; 0x28
 8015af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015afa:	1ad3      	subs	r3, r2, r3
 8015afc:	930d      	str	r3, [sp, #52]	; 0x34
 8015afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d01f      	beq.n	8015b44 <_dtoa_r+0x824>
 8015b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d054      	beq.n	8015bb4 <_dtoa_r+0x894>
 8015b0a:	2e00      	cmp	r6, #0
 8015b0c:	dd11      	ble.n	8015b32 <_dtoa_r+0x812>
 8015b0e:	0029      	movs	r1, r5
 8015b10:	0032      	movs	r2, r6
 8015b12:	0038      	movs	r0, r7
 8015b14:	f000 fbf8 	bl	8016308 <__pow5mult>
 8015b18:	9a05      	ldr	r2, [sp, #20]
 8015b1a:	0001      	movs	r1, r0
 8015b1c:	0005      	movs	r5, r0
 8015b1e:	0038      	movs	r0, r7
 8015b20:	f000 fb42 	bl	80161a8 <__multiply>
 8015b24:	9905      	ldr	r1, [sp, #20]
 8015b26:	9014      	str	r0, [sp, #80]	; 0x50
 8015b28:	0038      	movs	r0, r7
 8015b2a:	f000 fa77 	bl	801601c <_Bfree>
 8015b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b30:	9305      	str	r3, [sp, #20]
 8015b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b34:	1b9a      	subs	r2, r3, r6
 8015b36:	42b3      	cmp	r3, r6
 8015b38:	d004      	beq.n	8015b44 <_dtoa_r+0x824>
 8015b3a:	0038      	movs	r0, r7
 8015b3c:	9905      	ldr	r1, [sp, #20]
 8015b3e:	f000 fbe3 	bl	8016308 <__pow5mult>
 8015b42:	9005      	str	r0, [sp, #20]
 8015b44:	2101      	movs	r1, #1
 8015b46:	0038      	movs	r0, r7
 8015b48:	f000 fb18 	bl	801617c <__i2b>
 8015b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b4e:	0006      	movs	r6, r0
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	dd31      	ble.n	8015bb8 <_dtoa_r+0x898>
 8015b54:	001a      	movs	r2, r3
 8015b56:	0001      	movs	r1, r0
 8015b58:	0038      	movs	r0, r7
 8015b5a:	f000 fbd5 	bl	8016308 <__pow5mult>
 8015b5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015b60:	0006      	movs	r6, r0
 8015b62:	2b01      	cmp	r3, #1
 8015b64:	dd2d      	ble.n	8015bc2 <_dtoa_r+0x8a2>
 8015b66:	2300      	movs	r3, #0
 8015b68:	930e      	str	r3, [sp, #56]	; 0x38
 8015b6a:	6933      	ldr	r3, [r6, #16]
 8015b6c:	3303      	adds	r3, #3
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	18f3      	adds	r3, r6, r3
 8015b72:	6858      	ldr	r0, [r3, #4]
 8015b74:	f000 faba 	bl	80160ec <__hi0bits>
 8015b78:	2320      	movs	r3, #32
 8015b7a:	1a18      	subs	r0, r3, r0
 8015b7c:	e039      	b.n	8015bf2 <_dtoa_r+0x8d2>
 8015b7e:	2336      	movs	r3, #54	; 0x36
 8015b80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015b82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015b84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015b86:	1a9b      	subs	r3, r3, r2
 8015b88:	e79d      	b.n	8015ac6 <_dtoa_r+0x7a6>
 8015b8a:	9b07      	ldr	r3, [sp, #28]
 8015b8c:	1e5e      	subs	r6, r3, #1
 8015b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b90:	42b3      	cmp	r3, r6
 8015b92:	db07      	blt.n	8015ba4 <_dtoa_r+0x884>
 8015b94:	1b9e      	subs	r6, r3, r6
 8015b96:	9b07      	ldr	r3, [sp, #28]
 8015b98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	da93      	bge.n	8015ac6 <_dtoa_r+0x7a6>
 8015b9e:	1ae4      	subs	r4, r4, r3
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	e790      	b.n	8015ac6 <_dtoa_r+0x7a6>
 8015ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ba6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015ba8:	1af3      	subs	r3, r6, r3
 8015baa:	18d3      	adds	r3, r2, r3
 8015bac:	960e      	str	r6, [sp, #56]	; 0x38
 8015bae:	9315      	str	r3, [sp, #84]	; 0x54
 8015bb0:	2600      	movs	r6, #0
 8015bb2:	e7f0      	b.n	8015b96 <_dtoa_r+0x876>
 8015bb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bb6:	e7c0      	b.n	8015b3a <_dtoa_r+0x81a>
 8015bb8:	2300      	movs	r3, #0
 8015bba:	930e      	str	r3, [sp, #56]	; 0x38
 8015bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015bbe:	2b01      	cmp	r3, #1
 8015bc0:	dc13      	bgt.n	8015bea <_dtoa_r+0x8ca>
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8015bc6:	9b08      	ldr	r3, [sp, #32]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d10e      	bne.n	8015bea <_dtoa_r+0x8ca>
 8015bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bce:	031b      	lsls	r3, r3, #12
 8015bd0:	d10b      	bne.n	8015bea <_dtoa_r+0x8ca>
 8015bd2:	4b5d      	ldr	r3, [pc, #372]	; (8015d48 <_dtoa_r+0xa28>)
 8015bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bd6:	4213      	tst	r3, r2
 8015bd8:	d007      	beq.n	8015bea <_dtoa_r+0x8ca>
 8015bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bdc:	3301      	adds	r3, #1
 8015bde:	930a      	str	r3, [sp, #40]	; 0x28
 8015be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015be2:	3301      	adds	r3, #1
 8015be4:	930d      	str	r3, [sp, #52]	; 0x34
 8015be6:	2301      	movs	r3, #1
 8015be8:	930e      	str	r3, [sp, #56]	; 0x38
 8015bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bec:	2001      	movs	r0, #1
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d1bb      	bne.n	8015b6a <_dtoa_r+0x84a>
 8015bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bf4:	221f      	movs	r2, #31
 8015bf6:	1818      	adds	r0, r3, r0
 8015bf8:	0003      	movs	r3, r0
 8015bfa:	4013      	ands	r3, r2
 8015bfc:	4210      	tst	r0, r2
 8015bfe:	d046      	beq.n	8015c8e <_dtoa_r+0x96e>
 8015c00:	3201      	adds	r2, #1
 8015c02:	1ad2      	subs	r2, r2, r3
 8015c04:	2a04      	cmp	r2, #4
 8015c06:	dd3f      	ble.n	8015c88 <_dtoa_r+0x968>
 8015c08:	221c      	movs	r2, #28
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c0e:	18e4      	adds	r4, r4, r3
 8015c10:	18d2      	adds	r2, r2, r3
 8015c12:	920a      	str	r2, [sp, #40]	; 0x28
 8015c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015c16:	18d3      	adds	r3, r2, r3
 8015c18:	930d      	str	r3, [sp, #52]	; 0x34
 8015c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	dd05      	ble.n	8015c2c <_dtoa_r+0x90c>
 8015c20:	001a      	movs	r2, r3
 8015c22:	0038      	movs	r0, r7
 8015c24:	9905      	ldr	r1, [sp, #20]
 8015c26:	f000 fbcb 	bl	80163c0 <__lshift>
 8015c2a:	9005      	str	r0, [sp, #20]
 8015c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	dd05      	ble.n	8015c3e <_dtoa_r+0x91e>
 8015c32:	0031      	movs	r1, r6
 8015c34:	001a      	movs	r2, r3
 8015c36:	0038      	movs	r0, r7
 8015c38:	f000 fbc2 	bl	80163c0 <__lshift>
 8015c3c:	0006      	movs	r6, r0
 8015c3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d026      	beq.n	8015c92 <_dtoa_r+0x972>
 8015c44:	0031      	movs	r1, r6
 8015c46:	9805      	ldr	r0, [sp, #20]
 8015c48:	f000 fc28 	bl	801649c <__mcmp>
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	da20      	bge.n	8015c92 <_dtoa_r+0x972>
 8015c50:	9b02      	ldr	r3, [sp, #8]
 8015c52:	220a      	movs	r2, #10
 8015c54:	3b01      	subs	r3, #1
 8015c56:	9302      	str	r3, [sp, #8]
 8015c58:	0038      	movs	r0, r7
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	9905      	ldr	r1, [sp, #20]
 8015c5e:	f000 fa01 	bl	8016064 <__multadd>
 8015c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c64:	9005      	str	r0, [sp, #20]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d100      	bne.n	8015c6c <_dtoa_r+0x94c>
 8015c6a:	e166      	b.n	8015f3a <_dtoa_r+0xc1a>
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	0029      	movs	r1, r5
 8015c70:	220a      	movs	r2, #10
 8015c72:	0038      	movs	r0, r7
 8015c74:	f000 f9f6 	bl	8016064 <__multadd>
 8015c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c7a:	0005      	movs	r5, r0
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	dc47      	bgt.n	8015d10 <_dtoa_r+0x9f0>
 8015c80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015c82:	2b02      	cmp	r3, #2
 8015c84:	dc0d      	bgt.n	8015ca2 <_dtoa_r+0x982>
 8015c86:	e043      	b.n	8015d10 <_dtoa_r+0x9f0>
 8015c88:	2a04      	cmp	r2, #4
 8015c8a:	d0c6      	beq.n	8015c1a <_dtoa_r+0x8fa>
 8015c8c:	0013      	movs	r3, r2
 8015c8e:	331c      	adds	r3, #28
 8015c90:	e7bc      	b.n	8015c0c <_dtoa_r+0x8ec>
 8015c92:	9b07      	ldr	r3, [sp, #28]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	dc35      	bgt.n	8015d04 <_dtoa_r+0x9e4>
 8015c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015c9a:	2b02      	cmp	r3, #2
 8015c9c:	dd32      	ble.n	8015d04 <_dtoa_r+0x9e4>
 8015c9e:	9b07      	ldr	r3, [sp, #28]
 8015ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8015ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d10c      	bne.n	8015cc2 <_dtoa_r+0x9a2>
 8015ca8:	0031      	movs	r1, r6
 8015caa:	2205      	movs	r2, #5
 8015cac:	0038      	movs	r0, r7
 8015cae:	f000 f9d9 	bl	8016064 <__multadd>
 8015cb2:	0006      	movs	r6, r0
 8015cb4:	0001      	movs	r1, r0
 8015cb6:	9805      	ldr	r0, [sp, #20]
 8015cb8:	f000 fbf0 	bl	801649c <__mcmp>
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	dd00      	ble.n	8015cc2 <_dtoa_r+0x9a2>
 8015cc0:	e5a5      	b.n	801580e <_dtoa_r+0x4ee>
 8015cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015cc4:	43db      	mvns	r3, r3
 8015cc6:	9302      	str	r3, [sp, #8]
 8015cc8:	9b06      	ldr	r3, [sp, #24]
 8015cca:	9308      	str	r3, [sp, #32]
 8015ccc:	2400      	movs	r4, #0
 8015cce:	0031      	movs	r1, r6
 8015cd0:	0038      	movs	r0, r7
 8015cd2:	f000 f9a3 	bl	801601c <_Bfree>
 8015cd6:	2d00      	cmp	r5, #0
 8015cd8:	d100      	bne.n	8015cdc <_dtoa_r+0x9bc>
 8015cda:	e6b7      	b.n	8015a4c <_dtoa_r+0x72c>
 8015cdc:	2c00      	cmp	r4, #0
 8015cde:	d005      	beq.n	8015cec <_dtoa_r+0x9cc>
 8015ce0:	42ac      	cmp	r4, r5
 8015ce2:	d003      	beq.n	8015cec <_dtoa_r+0x9cc>
 8015ce4:	0021      	movs	r1, r4
 8015ce6:	0038      	movs	r0, r7
 8015ce8:	f000 f998 	bl	801601c <_Bfree>
 8015cec:	0029      	movs	r1, r5
 8015cee:	0038      	movs	r0, r7
 8015cf0:	f000 f994 	bl	801601c <_Bfree>
 8015cf4:	e6aa      	b.n	8015a4c <_dtoa_r+0x72c>
 8015cf6:	2600      	movs	r6, #0
 8015cf8:	0035      	movs	r5, r6
 8015cfa:	e7e2      	b.n	8015cc2 <_dtoa_r+0x9a2>
 8015cfc:	9602      	str	r6, [sp, #8]
 8015cfe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015d00:	0035      	movs	r5, r6
 8015d02:	e584      	b.n	801580e <_dtoa_r+0x4ee>
 8015d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d100      	bne.n	8015d0c <_dtoa_r+0x9ec>
 8015d0a:	e0ce      	b.n	8015eaa <_dtoa_r+0xb8a>
 8015d0c:	9b07      	ldr	r3, [sp, #28]
 8015d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8015d10:	2c00      	cmp	r4, #0
 8015d12:	dd05      	ble.n	8015d20 <_dtoa_r+0xa00>
 8015d14:	0029      	movs	r1, r5
 8015d16:	0022      	movs	r2, r4
 8015d18:	0038      	movs	r0, r7
 8015d1a:	f000 fb51 	bl	80163c0 <__lshift>
 8015d1e:	0005      	movs	r5, r0
 8015d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d22:	0028      	movs	r0, r5
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d022      	beq.n	8015d6e <_dtoa_r+0xa4e>
 8015d28:	0038      	movs	r0, r7
 8015d2a:	6869      	ldr	r1, [r5, #4]
 8015d2c:	f000 f932 	bl	8015f94 <_Balloc>
 8015d30:	1e04      	subs	r4, r0, #0
 8015d32:	d10f      	bne.n	8015d54 <_dtoa_r+0xa34>
 8015d34:	0002      	movs	r2, r0
 8015d36:	4b05      	ldr	r3, [pc, #20]	; (8015d4c <_dtoa_r+0xa2c>)
 8015d38:	4905      	ldr	r1, [pc, #20]	; (8015d50 <_dtoa_r+0xa30>)
 8015d3a:	f7ff fb06 	bl	801534a <_dtoa_r+0x2a>
 8015d3e:	46c0      	nop			; (mov r8, r8)
 8015d40:	40240000 	.word	0x40240000
 8015d44:	00000433 	.word	0x00000433
 8015d48:	7ff00000 	.word	0x7ff00000
 8015d4c:	08018b53 	.word	0x08018b53
 8015d50:	000002ea 	.word	0x000002ea
 8015d54:	0029      	movs	r1, r5
 8015d56:	692b      	ldr	r3, [r5, #16]
 8015d58:	310c      	adds	r1, #12
 8015d5a:	1c9a      	adds	r2, r3, #2
 8015d5c:	0092      	lsls	r2, r2, #2
 8015d5e:	300c      	adds	r0, #12
 8015d60:	f7fe fcbe 	bl	80146e0 <memcpy>
 8015d64:	2201      	movs	r2, #1
 8015d66:	0021      	movs	r1, r4
 8015d68:	0038      	movs	r0, r7
 8015d6a:	f000 fb29 	bl	80163c0 <__lshift>
 8015d6e:	9b06      	ldr	r3, [sp, #24]
 8015d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015d72:	930a      	str	r3, [sp, #40]	; 0x28
 8015d74:	3b01      	subs	r3, #1
 8015d76:	189b      	adds	r3, r3, r2
 8015d78:	2201      	movs	r2, #1
 8015d7a:	002c      	movs	r4, r5
 8015d7c:	0005      	movs	r5, r0
 8015d7e:	9314      	str	r3, [sp, #80]	; 0x50
 8015d80:	9b08      	ldr	r3, [sp, #32]
 8015d82:	4013      	ands	r3, r2
 8015d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d86:	0031      	movs	r1, r6
 8015d88:	9805      	ldr	r0, [sp, #20]
 8015d8a:	f7ff fa3d 	bl	8015208 <quorem>
 8015d8e:	0003      	movs	r3, r0
 8015d90:	0021      	movs	r1, r4
 8015d92:	3330      	adds	r3, #48	; 0x30
 8015d94:	900d      	str	r0, [sp, #52]	; 0x34
 8015d96:	9805      	ldr	r0, [sp, #20]
 8015d98:	9307      	str	r3, [sp, #28]
 8015d9a:	f000 fb7f 	bl	801649c <__mcmp>
 8015d9e:	002a      	movs	r2, r5
 8015da0:	900e      	str	r0, [sp, #56]	; 0x38
 8015da2:	0031      	movs	r1, r6
 8015da4:	0038      	movs	r0, r7
 8015da6:	f000 fb95 	bl	80164d4 <__mdiff>
 8015daa:	68c3      	ldr	r3, [r0, #12]
 8015dac:	9008      	str	r0, [sp, #32]
 8015dae:	9310      	str	r3, [sp, #64]	; 0x40
 8015db0:	2301      	movs	r3, #1
 8015db2:	930c      	str	r3, [sp, #48]	; 0x30
 8015db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d104      	bne.n	8015dc4 <_dtoa_r+0xaa4>
 8015dba:	0001      	movs	r1, r0
 8015dbc:	9805      	ldr	r0, [sp, #20]
 8015dbe:	f000 fb6d 	bl	801649c <__mcmp>
 8015dc2:	900c      	str	r0, [sp, #48]	; 0x30
 8015dc4:	0038      	movs	r0, r7
 8015dc6:	9908      	ldr	r1, [sp, #32]
 8015dc8:	f000 f928 	bl	801601c <_Bfree>
 8015dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	9308      	str	r3, [sp, #32]
 8015dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015dd6:	4313      	orrs	r3, r2
 8015dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015dda:	4313      	orrs	r3, r2
 8015ddc:	d10c      	bne.n	8015df8 <_dtoa_r+0xad8>
 8015dde:	9b07      	ldr	r3, [sp, #28]
 8015de0:	2b39      	cmp	r3, #57	; 0x39
 8015de2:	d026      	beq.n	8015e32 <_dtoa_r+0xb12>
 8015de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	dd02      	ble.n	8015df0 <_dtoa_r+0xad0>
 8015dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dec:	3331      	adds	r3, #49	; 0x31
 8015dee:	9307      	str	r3, [sp, #28]
 8015df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015df2:	9a07      	ldr	r2, [sp, #28]
 8015df4:	701a      	strb	r2, [r3, #0]
 8015df6:	e76a      	b.n	8015cce <_dtoa_r+0x9ae>
 8015df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	db04      	blt.n	8015e08 <_dtoa_r+0xae8>
 8015dfe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015e00:	4313      	orrs	r3, r2
 8015e02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e04:	4313      	orrs	r3, r2
 8015e06:	d11f      	bne.n	8015e48 <_dtoa_r+0xb28>
 8015e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	ddf0      	ble.n	8015df0 <_dtoa_r+0xad0>
 8015e0e:	9905      	ldr	r1, [sp, #20]
 8015e10:	2201      	movs	r2, #1
 8015e12:	0038      	movs	r0, r7
 8015e14:	f000 fad4 	bl	80163c0 <__lshift>
 8015e18:	0031      	movs	r1, r6
 8015e1a:	9005      	str	r0, [sp, #20]
 8015e1c:	f000 fb3e 	bl	801649c <__mcmp>
 8015e20:	2800      	cmp	r0, #0
 8015e22:	dc03      	bgt.n	8015e2c <_dtoa_r+0xb0c>
 8015e24:	d1e4      	bne.n	8015df0 <_dtoa_r+0xad0>
 8015e26:	9b07      	ldr	r3, [sp, #28]
 8015e28:	07db      	lsls	r3, r3, #31
 8015e2a:	d5e1      	bpl.n	8015df0 <_dtoa_r+0xad0>
 8015e2c:	9b07      	ldr	r3, [sp, #28]
 8015e2e:	2b39      	cmp	r3, #57	; 0x39
 8015e30:	d1db      	bne.n	8015dea <_dtoa_r+0xaca>
 8015e32:	2339      	movs	r3, #57	; 0x39
 8015e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e36:	7013      	strb	r3, [r2, #0]
 8015e38:	9b08      	ldr	r3, [sp, #32]
 8015e3a:	9308      	str	r3, [sp, #32]
 8015e3c:	3b01      	subs	r3, #1
 8015e3e:	781a      	ldrb	r2, [r3, #0]
 8015e40:	2a39      	cmp	r2, #57	; 0x39
 8015e42:	d068      	beq.n	8015f16 <_dtoa_r+0xbf6>
 8015e44:	3201      	adds	r2, #1
 8015e46:	e7d5      	b.n	8015df4 <_dtoa_r+0xad4>
 8015e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	dd07      	ble.n	8015e5e <_dtoa_r+0xb3e>
 8015e4e:	9b07      	ldr	r3, [sp, #28]
 8015e50:	2b39      	cmp	r3, #57	; 0x39
 8015e52:	d0ee      	beq.n	8015e32 <_dtoa_r+0xb12>
 8015e54:	9b07      	ldr	r3, [sp, #28]
 8015e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e58:	3301      	adds	r3, #1
 8015e5a:	7013      	strb	r3, [r2, #0]
 8015e5c:	e737      	b.n	8015cce <_dtoa_r+0x9ae>
 8015e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e60:	9a07      	ldr	r2, [sp, #28]
 8015e62:	701a      	strb	r2, [r3, #0]
 8015e64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e68:	4293      	cmp	r3, r2
 8015e6a:	d03e      	beq.n	8015eea <_dtoa_r+0xbca>
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	220a      	movs	r2, #10
 8015e70:	9905      	ldr	r1, [sp, #20]
 8015e72:	0038      	movs	r0, r7
 8015e74:	f000 f8f6 	bl	8016064 <__multadd>
 8015e78:	2300      	movs	r3, #0
 8015e7a:	9005      	str	r0, [sp, #20]
 8015e7c:	220a      	movs	r2, #10
 8015e7e:	0021      	movs	r1, r4
 8015e80:	0038      	movs	r0, r7
 8015e82:	42ac      	cmp	r4, r5
 8015e84:	d106      	bne.n	8015e94 <_dtoa_r+0xb74>
 8015e86:	f000 f8ed 	bl	8016064 <__multadd>
 8015e8a:	0004      	movs	r4, r0
 8015e8c:	0005      	movs	r5, r0
 8015e8e:	9b08      	ldr	r3, [sp, #32]
 8015e90:	930a      	str	r3, [sp, #40]	; 0x28
 8015e92:	e778      	b.n	8015d86 <_dtoa_r+0xa66>
 8015e94:	f000 f8e6 	bl	8016064 <__multadd>
 8015e98:	0029      	movs	r1, r5
 8015e9a:	0004      	movs	r4, r0
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	220a      	movs	r2, #10
 8015ea0:	0038      	movs	r0, r7
 8015ea2:	f000 f8df 	bl	8016064 <__multadd>
 8015ea6:	0005      	movs	r5, r0
 8015ea8:	e7f1      	b.n	8015e8e <_dtoa_r+0xb6e>
 8015eaa:	9b07      	ldr	r3, [sp, #28]
 8015eac:	930c      	str	r3, [sp, #48]	; 0x30
 8015eae:	2400      	movs	r4, #0
 8015eb0:	0031      	movs	r1, r6
 8015eb2:	9805      	ldr	r0, [sp, #20]
 8015eb4:	f7ff f9a8 	bl	8015208 <quorem>
 8015eb8:	9b06      	ldr	r3, [sp, #24]
 8015eba:	3030      	adds	r0, #48	; 0x30
 8015ebc:	5518      	strb	r0, [r3, r4]
 8015ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ec0:	3401      	adds	r4, #1
 8015ec2:	9007      	str	r0, [sp, #28]
 8015ec4:	42a3      	cmp	r3, r4
 8015ec6:	dd07      	ble.n	8015ed8 <_dtoa_r+0xbb8>
 8015ec8:	2300      	movs	r3, #0
 8015eca:	220a      	movs	r2, #10
 8015ecc:	0038      	movs	r0, r7
 8015ece:	9905      	ldr	r1, [sp, #20]
 8015ed0:	f000 f8c8 	bl	8016064 <__multadd>
 8015ed4:	9005      	str	r0, [sp, #20]
 8015ed6:	e7eb      	b.n	8015eb0 <_dtoa_r+0xb90>
 8015ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eda:	2001      	movs	r0, #1
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	dd00      	ble.n	8015ee2 <_dtoa_r+0xbc2>
 8015ee0:	0018      	movs	r0, r3
 8015ee2:	2400      	movs	r4, #0
 8015ee4:	9b06      	ldr	r3, [sp, #24]
 8015ee6:	181b      	adds	r3, r3, r0
 8015ee8:	9308      	str	r3, [sp, #32]
 8015eea:	9905      	ldr	r1, [sp, #20]
 8015eec:	2201      	movs	r2, #1
 8015eee:	0038      	movs	r0, r7
 8015ef0:	f000 fa66 	bl	80163c0 <__lshift>
 8015ef4:	0031      	movs	r1, r6
 8015ef6:	9005      	str	r0, [sp, #20]
 8015ef8:	f000 fad0 	bl	801649c <__mcmp>
 8015efc:	2800      	cmp	r0, #0
 8015efe:	dc9b      	bgt.n	8015e38 <_dtoa_r+0xb18>
 8015f00:	d102      	bne.n	8015f08 <_dtoa_r+0xbe8>
 8015f02:	9b07      	ldr	r3, [sp, #28]
 8015f04:	07db      	lsls	r3, r3, #31
 8015f06:	d497      	bmi.n	8015e38 <_dtoa_r+0xb18>
 8015f08:	9b08      	ldr	r3, [sp, #32]
 8015f0a:	9308      	str	r3, [sp, #32]
 8015f0c:	3b01      	subs	r3, #1
 8015f0e:	781a      	ldrb	r2, [r3, #0]
 8015f10:	2a30      	cmp	r2, #48	; 0x30
 8015f12:	d0fa      	beq.n	8015f0a <_dtoa_r+0xbea>
 8015f14:	e6db      	b.n	8015cce <_dtoa_r+0x9ae>
 8015f16:	9a06      	ldr	r2, [sp, #24]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d18e      	bne.n	8015e3a <_dtoa_r+0xb1a>
 8015f1c:	9b02      	ldr	r3, [sp, #8]
 8015f1e:	3301      	adds	r3, #1
 8015f20:	9302      	str	r3, [sp, #8]
 8015f22:	2331      	movs	r3, #49	; 0x31
 8015f24:	e799      	b.n	8015e5a <_dtoa_r+0xb3a>
 8015f26:	4b09      	ldr	r3, [pc, #36]	; (8015f4c <_dtoa_r+0xc2c>)
 8015f28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015f2a:	9306      	str	r3, [sp, #24]
 8015f2c:	4b08      	ldr	r3, [pc, #32]	; (8015f50 <_dtoa_r+0xc30>)
 8015f2e:	2a00      	cmp	r2, #0
 8015f30:	d001      	beq.n	8015f36 <_dtoa_r+0xc16>
 8015f32:	f7ff fa3f 	bl	80153b4 <_dtoa_r+0x94>
 8015f36:	f7ff fa3f 	bl	80153b8 <_dtoa_r+0x98>
 8015f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	dcb6      	bgt.n	8015eae <_dtoa_r+0xb8e>
 8015f40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f42:	2b02      	cmp	r3, #2
 8015f44:	dd00      	ble.n	8015f48 <_dtoa_r+0xc28>
 8015f46:	e6ac      	b.n	8015ca2 <_dtoa_r+0x982>
 8015f48:	e7b1      	b.n	8015eae <_dtoa_r+0xb8e>
 8015f4a:	46c0      	nop			; (mov r8, r8)
 8015f4c:	08018ad4 	.word	0x08018ad4
 8015f50:	08018adc 	.word	0x08018adc

08015f54 <_localeconv_r>:
 8015f54:	4800      	ldr	r0, [pc, #0]	; (8015f58 <_localeconv_r+0x4>)
 8015f56:	4770      	bx	lr
 8015f58:	2000322c 	.word	0x2000322c

08015f5c <memchr>:
 8015f5c:	b2c9      	uxtb	r1, r1
 8015f5e:	1882      	adds	r2, r0, r2
 8015f60:	4290      	cmp	r0, r2
 8015f62:	d101      	bne.n	8015f68 <memchr+0xc>
 8015f64:	2000      	movs	r0, #0
 8015f66:	4770      	bx	lr
 8015f68:	7803      	ldrb	r3, [r0, #0]
 8015f6a:	428b      	cmp	r3, r1
 8015f6c:	d0fb      	beq.n	8015f66 <memchr+0xa>
 8015f6e:	3001      	adds	r0, #1
 8015f70:	e7f6      	b.n	8015f60 <memchr+0x4>
	...

08015f74 <__malloc_lock>:
 8015f74:	b510      	push	{r4, lr}
 8015f76:	4802      	ldr	r0, [pc, #8]	; (8015f80 <__malloc_lock+0xc>)
 8015f78:	f000 fd65 	bl	8016a46 <__retarget_lock_acquire_recursive>
 8015f7c:	bd10      	pop	{r4, pc}
 8015f7e:	46c0      	nop			; (mov r8, r8)
 8015f80:	20003a9c 	.word	0x20003a9c

08015f84 <__malloc_unlock>:
 8015f84:	b510      	push	{r4, lr}
 8015f86:	4802      	ldr	r0, [pc, #8]	; (8015f90 <__malloc_unlock+0xc>)
 8015f88:	f000 fd5e 	bl	8016a48 <__retarget_lock_release_recursive>
 8015f8c:	bd10      	pop	{r4, pc}
 8015f8e:	46c0      	nop			; (mov r8, r8)
 8015f90:	20003a9c 	.word	0x20003a9c

08015f94 <_Balloc>:
 8015f94:	b570      	push	{r4, r5, r6, lr}
 8015f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015f98:	0006      	movs	r6, r0
 8015f9a:	000c      	movs	r4, r1
 8015f9c:	2d00      	cmp	r5, #0
 8015f9e:	d10e      	bne.n	8015fbe <_Balloc+0x2a>
 8015fa0:	2010      	movs	r0, #16
 8015fa2:	f7fe fb93 	bl	80146cc <malloc>
 8015fa6:	1e02      	subs	r2, r0, #0
 8015fa8:	6270      	str	r0, [r6, #36]	; 0x24
 8015faa:	d104      	bne.n	8015fb6 <_Balloc+0x22>
 8015fac:	2166      	movs	r1, #102	; 0x66
 8015fae:	4b19      	ldr	r3, [pc, #100]	; (8016014 <_Balloc+0x80>)
 8015fb0:	4819      	ldr	r0, [pc, #100]	; (8016018 <_Balloc+0x84>)
 8015fb2:	f000 fd19 	bl	80169e8 <__assert_func>
 8015fb6:	6045      	str	r5, [r0, #4]
 8015fb8:	6085      	str	r5, [r0, #8]
 8015fba:	6005      	str	r5, [r0, #0]
 8015fbc:	60c5      	str	r5, [r0, #12]
 8015fbe:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8015fc0:	68eb      	ldr	r3, [r5, #12]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d013      	beq.n	8015fee <_Balloc+0x5a>
 8015fc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015fc8:	00a2      	lsls	r2, r4, #2
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	189b      	adds	r3, r3, r2
 8015fce:	6818      	ldr	r0, [r3, #0]
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	d118      	bne.n	8016006 <_Balloc+0x72>
 8015fd4:	2101      	movs	r1, #1
 8015fd6:	000d      	movs	r5, r1
 8015fd8:	40a5      	lsls	r5, r4
 8015fda:	1d6a      	adds	r2, r5, #5
 8015fdc:	0030      	movs	r0, r6
 8015fde:	0092      	lsls	r2, r2, #2
 8015fe0:	f000 fb74 	bl	80166cc <_calloc_r>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d00c      	beq.n	8016002 <_Balloc+0x6e>
 8015fe8:	6044      	str	r4, [r0, #4]
 8015fea:	6085      	str	r5, [r0, #8]
 8015fec:	e00d      	b.n	801600a <_Balloc+0x76>
 8015fee:	2221      	movs	r2, #33	; 0x21
 8015ff0:	2104      	movs	r1, #4
 8015ff2:	0030      	movs	r0, r6
 8015ff4:	f000 fb6a 	bl	80166cc <_calloc_r>
 8015ff8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015ffa:	60e8      	str	r0, [r5, #12]
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d1e1      	bne.n	8015fc6 <_Balloc+0x32>
 8016002:	2000      	movs	r0, #0
 8016004:	bd70      	pop	{r4, r5, r6, pc}
 8016006:	6802      	ldr	r2, [r0, #0]
 8016008:	601a      	str	r2, [r3, #0]
 801600a:	2300      	movs	r3, #0
 801600c:	6103      	str	r3, [r0, #16]
 801600e:	60c3      	str	r3, [r0, #12]
 8016010:	e7f8      	b.n	8016004 <_Balloc+0x70>
 8016012:	46c0      	nop			; (mov r8, r8)
 8016014:	08018ae1 	.word	0x08018ae1
 8016018:	08018b64 	.word	0x08018b64

0801601c <_Bfree>:
 801601c:	b570      	push	{r4, r5, r6, lr}
 801601e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016020:	0005      	movs	r5, r0
 8016022:	000c      	movs	r4, r1
 8016024:	2e00      	cmp	r6, #0
 8016026:	d10e      	bne.n	8016046 <_Bfree+0x2a>
 8016028:	2010      	movs	r0, #16
 801602a:	f7fe fb4f 	bl	80146cc <malloc>
 801602e:	1e02      	subs	r2, r0, #0
 8016030:	6268      	str	r0, [r5, #36]	; 0x24
 8016032:	d104      	bne.n	801603e <_Bfree+0x22>
 8016034:	218a      	movs	r1, #138	; 0x8a
 8016036:	4b09      	ldr	r3, [pc, #36]	; (801605c <_Bfree+0x40>)
 8016038:	4809      	ldr	r0, [pc, #36]	; (8016060 <_Bfree+0x44>)
 801603a:	f000 fcd5 	bl	80169e8 <__assert_func>
 801603e:	6046      	str	r6, [r0, #4]
 8016040:	6086      	str	r6, [r0, #8]
 8016042:	6006      	str	r6, [r0, #0]
 8016044:	60c6      	str	r6, [r0, #12]
 8016046:	2c00      	cmp	r4, #0
 8016048:	d007      	beq.n	801605a <_Bfree+0x3e>
 801604a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801604c:	6862      	ldr	r2, [r4, #4]
 801604e:	68db      	ldr	r3, [r3, #12]
 8016050:	0092      	lsls	r2, r2, #2
 8016052:	189b      	adds	r3, r3, r2
 8016054:	681a      	ldr	r2, [r3, #0]
 8016056:	6022      	str	r2, [r4, #0]
 8016058:	601c      	str	r4, [r3, #0]
 801605a:	bd70      	pop	{r4, r5, r6, pc}
 801605c:	08018ae1 	.word	0x08018ae1
 8016060:	08018b64 	.word	0x08018b64

08016064 <__multadd>:
 8016064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016066:	000e      	movs	r6, r1
 8016068:	9001      	str	r0, [sp, #4]
 801606a:	000c      	movs	r4, r1
 801606c:	001d      	movs	r5, r3
 801606e:	2000      	movs	r0, #0
 8016070:	690f      	ldr	r7, [r1, #16]
 8016072:	3614      	adds	r6, #20
 8016074:	6833      	ldr	r3, [r6, #0]
 8016076:	3001      	adds	r0, #1
 8016078:	b299      	uxth	r1, r3
 801607a:	4351      	muls	r1, r2
 801607c:	0c1b      	lsrs	r3, r3, #16
 801607e:	4353      	muls	r3, r2
 8016080:	1949      	adds	r1, r1, r5
 8016082:	0c0d      	lsrs	r5, r1, #16
 8016084:	195b      	adds	r3, r3, r5
 8016086:	0c1d      	lsrs	r5, r3, #16
 8016088:	b289      	uxth	r1, r1
 801608a:	041b      	lsls	r3, r3, #16
 801608c:	185b      	adds	r3, r3, r1
 801608e:	c608      	stmia	r6!, {r3}
 8016090:	4287      	cmp	r7, r0
 8016092:	dcef      	bgt.n	8016074 <__multadd+0x10>
 8016094:	2d00      	cmp	r5, #0
 8016096:	d022      	beq.n	80160de <__multadd+0x7a>
 8016098:	68a3      	ldr	r3, [r4, #8]
 801609a:	42bb      	cmp	r3, r7
 801609c:	dc19      	bgt.n	80160d2 <__multadd+0x6e>
 801609e:	6863      	ldr	r3, [r4, #4]
 80160a0:	9801      	ldr	r0, [sp, #4]
 80160a2:	1c59      	adds	r1, r3, #1
 80160a4:	f7ff ff76 	bl	8015f94 <_Balloc>
 80160a8:	1e06      	subs	r6, r0, #0
 80160aa:	d105      	bne.n	80160b8 <__multadd+0x54>
 80160ac:	0002      	movs	r2, r0
 80160ae:	21b5      	movs	r1, #181	; 0xb5
 80160b0:	4b0c      	ldr	r3, [pc, #48]	; (80160e4 <__multadd+0x80>)
 80160b2:	480d      	ldr	r0, [pc, #52]	; (80160e8 <__multadd+0x84>)
 80160b4:	f000 fc98 	bl	80169e8 <__assert_func>
 80160b8:	0021      	movs	r1, r4
 80160ba:	6923      	ldr	r3, [r4, #16]
 80160bc:	310c      	adds	r1, #12
 80160be:	1c9a      	adds	r2, r3, #2
 80160c0:	0092      	lsls	r2, r2, #2
 80160c2:	300c      	adds	r0, #12
 80160c4:	f7fe fb0c 	bl	80146e0 <memcpy>
 80160c8:	0021      	movs	r1, r4
 80160ca:	9801      	ldr	r0, [sp, #4]
 80160cc:	f7ff ffa6 	bl	801601c <_Bfree>
 80160d0:	0034      	movs	r4, r6
 80160d2:	1d3b      	adds	r3, r7, #4
 80160d4:	009b      	lsls	r3, r3, #2
 80160d6:	18e3      	adds	r3, r4, r3
 80160d8:	605d      	str	r5, [r3, #4]
 80160da:	1c7b      	adds	r3, r7, #1
 80160dc:	6123      	str	r3, [r4, #16]
 80160de:	0020      	movs	r0, r4
 80160e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80160e2:	46c0      	nop			; (mov r8, r8)
 80160e4:	08018b53 	.word	0x08018b53
 80160e8:	08018b64 	.word	0x08018b64

080160ec <__hi0bits>:
 80160ec:	0003      	movs	r3, r0
 80160ee:	0c02      	lsrs	r2, r0, #16
 80160f0:	2000      	movs	r0, #0
 80160f2:	4282      	cmp	r2, r0
 80160f4:	d101      	bne.n	80160fa <__hi0bits+0xe>
 80160f6:	041b      	lsls	r3, r3, #16
 80160f8:	3010      	adds	r0, #16
 80160fa:	0e1a      	lsrs	r2, r3, #24
 80160fc:	d101      	bne.n	8016102 <__hi0bits+0x16>
 80160fe:	3008      	adds	r0, #8
 8016100:	021b      	lsls	r3, r3, #8
 8016102:	0f1a      	lsrs	r2, r3, #28
 8016104:	d101      	bne.n	801610a <__hi0bits+0x1e>
 8016106:	3004      	adds	r0, #4
 8016108:	011b      	lsls	r3, r3, #4
 801610a:	0f9a      	lsrs	r2, r3, #30
 801610c:	d101      	bne.n	8016112 <__hi0bits+0x26>
 801610e:	3002      	adds	r0, #2
 8016110:	009b      	lsls	r3, r3, #2
 8016112:	2b00      	cmp	r3, #0
 8016114:	db03      	blt.n	801611e <__hi0bits+0x32>
 8016116:	3001      	adds	r0, #1
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	d400      	bmi.n	801611e <__hi0bits+0x32>
 801611c:	2020      	movs	r0, #32
 801611e:	4770      	bx	lr

08016120 <__lo0bits>:
 8016120:	6803      	ldr	r3, [r0, #0]
 8016122:	0002      	movs	r2, r0
 8016124:	2107      	movs	r1, #7
 8016126:	0018      	movs	r0, r3
 8016128:	4008      	ands	r0, r1
 801612a:	420b      	tst	r3, r1
 801612c:	d00d      	beq.n	801614a <__lo0bits+0x2a>
 801612e:	3906      	subs	r1, #6
 8016130:	2000      	movs	r0, #0
 8016132:	420b      	tst	r3, r1
 8016134:	d105      	bne.n	8016142 <__lo0bits+0x22>
 8016136:	3002      	adds	r0, #2
 8016138:	4203      	tst	r3, r0
 801613a:	d003      	beq.n	8016144 <__lo0bits+0x24>
 801613c:	40cb      	lsrs	r3, r1
 801613e:	0008      	movs	r0, r1
 8016140:	6013      	str	r3, [r2, #0]
 8016142:	4770      	bx	lr
 8016144:	089b      	lsrs	r3, r3, #2
 8016146:	6013      	str	r3, [r2, #0]
 8016148:	e7fb      	b.n	8016142 <__lo0bits+0x22>
 801614a:	b299      	uxth	r1, r3
 801614c:	2900      	cmp	r1, #0
 801614e:	d101      	bne.n	8016154 <__lo0bits+0x34>
 8016150:	2010      	movs	r0, #16
 8016152:	0c1b      	lsrs	r3, r3, #16
 8016154:	b2d9      	uxtb	r1, r3
 8016156:	2900      	cmp	r1, #0
 8016158:	d101      	bne.n	801615e <__lo0bits+0x3e>
 801615a:	3008      	adds	r0, #8
 801615c:	0a1b      	lsrs	r3, r3, #8
 801615e:	0719      	lsls	r1, r3, #28
 8016160:	d101      	bne.n	8016166 <__lo0bits+0x46>
 8016162:	3004      	adds	r0, #4
 8016164:	091b      	lsrs	r3, r3, #4
 8016166:	0799      	lsls	r1, r3, #30
 8016168:	d101      	bne.n	801616e <__lo0bits+0x4e>
 801616a:	3002      	adds	r0, #2
 801616c:	089b      	lsrs	r3, r3, #2
 801616e:	07d9      	lsls	r1, r3, #31
 8016170:	d4e9      	bmi.n	8016146 <__lo0bits+0x26>
 8016172:	3001      	adds	r0, #1
 8016174:	085b      	lsrs	r3, r3, #1
 8016176:	d1e6      	bne.n	8016146 <__lo0bits+0x26>
 8016178:	2020      	movs	r0, #32
 801617a:	e7e2      	b.n	8016142 <__lo0bits+0x22>

0801617c <__i2b>:
 801617c:	b510      	push	{r4, lr}
 801617e:	000c      	movs	r4, r1
 8016180:	2101      	movs	r1, #1
 8016182:	f7ff ff07 	bl	8015f94 <_Balloc>
 8016186:	2800      	cmp	r0, #0
 8016188:	d106      	bne.n	8016198 <__i2b+0x1c>
 801618a:	21a0      	movs	r1, #160	; 0xa0
 801618c:	0002      	movs	r2, r0
 801618e:	4b04      	ldr	r3, [pc, #16]	; (80161a0 <__i2b+0x24>)
 8016190:	4804      	ldr	r0, [pc, #16]	; (80161a4 <__i2b+0x28>)
 8016192:	0049      	lsls	r1, r1, #1
 8016194:	f000 fc28 	bl	80169e8 <__assert_func>
 8016198:	2301      	movs	r3, #1
 801619a:	6144      	str	r4, [r0, #20]
 801619c:	6103      	str	r3, [r0, #16]
 801619e:	bd10      	pop	{r4, pc}
 80161a0:	08018b53 	.word	0x08018b53
 80161a4:	08018b64 	.word	0x08018b64

080161a8 <__multiply>:
 80161a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161aa:	690b      	ldr	r3, [r1, #16]
 80161ac:	0014      	movs	r4, r2
 80161ae:	6912      	ldr	r2, [r2, #16]
 80161b0:	000d      	movs	r5, r1
 80161b2:	b089      	sub	sp, #36	; 0x24
 80161b4:	4293      	cmp	r3, r2
 80161b6:	da01      	bge.n	80161bc <__multiply+0x14>
 80161b8:	0025      	movs	r5, r4
 80161ba:	000c      	movs	r4, r1
 80161bc:	692f      	ldr	r7, [r5, #16]
 80161be:	6926      	ldr	r6, [r4, #16]
 80161c0:	6869      	ldr	r1, [r5, #4]
 80161c2:	19bb      	adds	r3, r7, r6
 80161c4:	9302      	str	r3, [sp, #8]
 80161c6:	68ab      	ldr	r3, [r5, #8]
 80161c8:	19ba      	adds	r2, r7, r6
 80161ca:	4293      	cmp	r3, r2
 80161cc:	da00      	bge.n	80161d0 <__multiply+0x28>
 80161ce:	3101      	adds	r1, #1
 80161d0:	f7ff fee0 	bl	8015f94 <_Balloc>
 80161d4:	9001      	str	r0, [sp, #4]
 80161d6:	2800      	cmp	r0, #0
 80161d8:	d106      	bne.n	80161e8 <__multiply+0x40>
 80161da:	215e      	movs	r1, #94	; 0x5e
 80161dc:	0002      	movs	r2, r0
 80161de:	4b48      	ldr	r3, [pc, #288]	; (8016300 <__multiply+0x158>)
 80161e0:	4848      	ldr	r0, [pc, #288]	; (8016304 <__multiply+0x15c>)
 80161e2:	31ff      	adds	r1, #255	; 0xff
 80161e4:	f000 fc00 	bl	80169e8 <__assert_func>
 80161e8:	9b01      	ldr	r3, [sp, #4]
 80161ea:	2200      	movs	r2, #0
 80161ec:	3314      	adds	r3, #20
 80161ee:	469c      	mov	ip, r3
 80161f0:	19bb      	adds	r3, r7, r6
 80161f2:	009b      	lsls	r3, r3, #2
 80161f4:	4463      	add	r3, ip
 80161f6:	9303      	str	r3, [sp, #12]
 80161f8:	4663      	mov	r3, ip
 80161fa:	9903      	ldr	r1, [sp, #12]
 80161fc:	428b      	cmp	r3, r1
 80161fe:	d32c      	bcc.n	801625a <__multiply+0xb2>
 8016200:	002b      	movs	r3, r5
 8016202:	0022      	movs	r2, r4
 8016204:	3314      	adds	r3, #20
 8016206:	00bf      	lsls	r7, r7, #2
 8016208:	3214      	adds	r2, #20
 801620a:	9306      	str	r3, [sp, #24]
 801620c:	00b6      	lsls	r6, r6, #2
 801620e:	19db      	adds	r3, r3, r7
 8016210:	9304      	str	r3, [sp, #16]
 8016212:	1993      	adds	r3, r2, r6
 8016214:	9307      	str	r3, [sp, #28]
 8016216:	2304      	movs	r3, #4
 8016218:	9305      	str	r3, [sp, #20]
 801621a:	002b      	movs	r3, r5
 801621c:	9904      	ldr	r1, [sp, #16]
 801621e:	3315      	adds	r3, #21
 8016220:	9200      	str	r2, [sp, #0]
 8016222:	4299      	cmp	r1, r3
 8016224:	d305      	bcc.n	8016232 <__multiply+0x8a>
 8016226:	1b4b      	subs	r3, r1, r5
 8016228:	3b15      	subs	r3, #21
 801622a:	089b      	lsrs	r3, r3, #2
 801622c:	3301      	adds	r3, #1
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	9305      	str	r3, [sp, #20]
 8016232:	9b07      	ldr	r3, [sp, #28]
 8016234:	9a00      	ldr	r2, [sp, #0]
 8016236:	429a      	cmp	r2, r3
 8016238:	d311      	bcc.n	801625e <__multiply+0xb6>
 801623a:	9b02      	ldr	r3, [sp, #8]
 801623c:	2b00      	cmp	r3, #0
 801623e:	dd06      	ble.n	801624e <__multiply+0xa6>
 8016240:	9b03      	ldr	r3, [sp, #12]
 8016242:	3b04      	subs	r3, #4
 8016244:	9303      	str	r3, [sp, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	9300      	str	r3, [sp, #0]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d053      	beq.n	80162f6 <__multiply+0x14e>
 801624e:	9b01      	ldr	r3, [sp, #4]
 8016250:	9a02      	ldr	r2, [sp, #8]
 8016252:	0018      	movs	r0, r3
 8016254:	611a      	str	r2, [r3, #16]
 8016256:	b009      	add	sp, #36	; 0x24
 8016258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801625a:	c304      	stmia	r3!, {r2}
 801625c:	e7cd      	b.n	80161fa <__multiply+0x52>
 801625e:	9b00      	ldr	r3, [sp, #0]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	b298      	uxth	r0, r3
 8016264:	2800      	cmp	r0, #0
 8016266:	d01b      	beq.n	80162a0 <__multiply+0xf8>
 8016268:	4667      	mov	r7, ip
 801626a:	2400      	movs	r4, #0
 801626c:	9e06      	ldr	r6, [sp, #24]
 801626e:	ce02      	ldmia	r6!, {r1}
 8016270:	683a      	ldr	r2, [r7, #0]
 8016272:	b28b      	uxth	r3, r1
 8016274:	4343      	muls	r3, r0
 8016276:	b292      	uxth	r2, r2
 8016278:	189b      	adds	r3, r3, r2
 801627a:	191b      	adds	r3, r3, r4
 801627c:	0c0c      	lsrs	r4, r1, #16
 801627e:	4344      	muls	r4, r0
 8016280:	683a      	ldr	r2, [r7, #0]
 8016282:	0c11      	lsrs	r1, r2, #16
 8016284:	1861      	adds	r1, r4, r1
 8016286:	0c1c      	lsrs	r4, r3, #16
 8016288:	1909      	adds	r1, r1, r4
 801628a:	0c0c      	lsrs	r4, r1, #16
 801628c:	b29b      	uxth	r3, r3
 801628e:	0409      	lsls	r1, r1, #16
 8016290:	430b      	orrs	r3, r1
 8016292:	c708      	stmia	r7!, {r3}
 8016294:	9b04      	ldr	r3, [sp, #16]
 8016296:	42b3      	cmp	r3, r6
 8016298:	d8e9      	bhi.n	801626e <__multiply+0xc6>
 801629a:	4663      	mov	r3, ip
 801629c:	9a05      	ldr	r2, [sp, #20]
 801629e:	509c      	str	r4, [r3, r2]
 80162a0:	9b00      	ldr	r3, [sp, #0]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	0c1e      	lsrs	r6, r3, #16
 80162a6:	d020      	beq.n	80162ea <__multiply+0x142>
 80162a8:	4663      	mov	r3, ip
 80162aa:	002c      	movs	r4, r5
 80162ac:	4660      	mov	r0, ip
 80162ae:	2700      	movs	r7, #0
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	3414      	adds	r4, #20
 80162b4:	6822      	ldr	r2, [r4, #0]
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	b291      	uxth	r1, r2
 80162ba:	4371      	muls	r1, r6
 80162bc:	6802      	ldr	r2, [r0, #0]
 80162be:	0c12      	lsrs	r2, r2, #16
 80162c0:	1889      	adds	r1, r1, r2
 80162c2:	19cf      	adds	r7, r1, r7
 80162c4:	0439      	lsls	r1, r7, #16
 80162c6:	430b      	orrs	r3, r1
 80162c8:	6003      	str	r3, [r0, #0]
 80162ca:	cc02      	ldmia	r4!, {r1}
 80162cc:	6843      	ldr	r3, [r0, #4]
 80162ce:	0c09      	lsrs	r1, r1, #16
 80162d0:	4371      	muls	r1, r6
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	0c3f      	lsrs	r7, r7, #16
 80162d6:	18cb      	adds	r3, r1, r3
 80162d8:	9a04      	ldr	r2, [sp, #16]
 80162da:	19db      	adds	r3, r3, r7
 80162dc:	0c1f      	lsrs	r7, r3, #16
 80162de:	3004      	adds	r0, #4
 80162e0:	42a2      	cmp	r2, r4
 80162e2:	d8e7      	bhi.n	80162b4 <__multiply+0x10c>
 80162e4:	4662      	mov	r2, ip
 80162e6:	9905      	ldr	r1, [sp, #20]
 80162e8:	5053      	str	r3, [r2, r1]
 80162ea:	9b00      	ldr	r3, [sp, #0]
 80162ec:	3304      	adds	r3, #4
 80162ee:	9300      	str	r3, [sp, #0]
 80162f0:	2304      	movs	r3, #4
 80162f2:	449c      	add	ip, r3
 80162f4:	e79d      	b.n	8016232 <__multiply+0x8a>
 80162f6:	9b02      	ldr	r3, [sp, #8]
 80162f8:	3b01      	subs	r3, #1
 80162fa:	9302      	str	r3, [sp, #8]
 80162fc:	e79d      	b.n	801623a <__multiply+0x92>
 80162fe:	46c0      	nop			; (mov r8, r8)
 8016300:	08018b53 	.word	0x08018b53
 8016304:	08018b64 	.word	0x08018b64

08016308 <__pow5mult>:
 8016308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801630a:	2303      	movs	r3, #3
 801630c:	0015      	movs	r5, r2
 801630e:	0007      	movs	r7, r0
 8016310:	000e      	movs	r6, r1
 8016312:	401a      	ands	r2, r3
 8016314:	421d      	tst	r5, r3
 8016316:	d008      	beq.n	801632a <__pow5mult+0x22>
 8016318:	4925      	ldr	r1, [pc, #148]	; (80163b0 <__pow5mult+0xa8>)
 801631a:	3a01      	subs	r2, #1
 801631c:	0092      	lsls	r2, r2, #2
 801631e:	5852      	ldr	r2, [r2, r1]
 8016320:	2300      	movs	r3, #0
 8016322:	0031      	movs	r1, r6
 8016324:	f7ff fe9e 	bl	8016064 <__multadd>
 8016328:	0006      	movs	r6, r0
 801632a:	10ad      	asrs	r5, r5, #2
 801632c:	d03d      	beq.n	80163aa <__pow5mult+0xa2>
 801632e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016330:	2c00      	cmp	r4, #0
 8016332:	d10f      	bne.n	8016354 <__pow5mult+0x4c>
 8016334:	2010      	movs	r0, #16
 8016336:	f7fe f9c9 	bl	80146cc <malloc>
 801633a:	1e02      	subs	r2, r0, #0
 801633c:	6278      	str	r0, [r7, #36]	; 0x24
 801633e:	d105      	bne.n	801634c <__pow5mult+0x44>
 8016340:	21d7      	movs	r1, #215	; 0xd7
 8016342:	4b1c      	ldr	r3, [pc, #112]	; (80163b4 <__pow5mult+0xac>)
 8016344:	481c      	ldr	r0, [pc, #112]	; (80163b8 <__pow5mult+0xb0>)
 8016346:	0049      	lsls	r1, r1, #1
 8016348:	f000 fb4e 	bl	80169e8 <__assert_func>
 801634c:	6044      	str	r4, [r0, #4]
 801634e:	6084      	str	r4, [r0, #8]
 8016350:	6004      	str	r4, [r0, #0]
 8016352:	60c4      	str	r4, [r0, #12]
 8016354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016356:	689c      	ldr	r4, [r3, #8]
 8016358:	9301      	str	r3, [sp, #4]
 801635a:	2c00      	cmp	r4, #0
 801635c:	d108      	bne.n	8016370 <__pow5mult+0x68>
 801635e:	0038      	movs	r0, r7
 8016360:	4916      	ldr	r1, [pc, #88]	; (80163bc <__pow5mult+0xb4>)
 8016362:	f7ff ff0b 	bl	801617c <__i2b>
 8016366:	9b01      	ldr	r3, [sp, #4]
 8016368:	0004      	movs	r4, r0
 801636a:	6098      	str	r0, [r3, #8]
 801636c:	2300      	movs	r3, #0
 801636e:	6003      	str	r3, [r0, #0]
 8016370:	2301      	movs	r3, #1
 8016372:	421d      	tst	r5, r3
 8016374:	d00a      	beq.n	801638c <__pow5mult+0x84>
 8016376:	0031      	movs	r1, r6
 8016378:	0022      	movs	r2, r4
 801637a:	0038      	movs	r0, r7
 801637c:	f7ff ff14 	bl	80161a8 <__multiply>
 8016380:	0031      	movs	r1, r6
 8016382:	9001      	str	r0, [sp, #4]
 8016384:	0038      	movs	r0, r7
 8016386:	f7ff fe49 	bl	801601c <_Bfree>
 801638a:	9e01      	ldr	r6, [sp, #4]
 801638c:	106d      	asrs	r5, r5, #1
 801638e:	d00c      	beq.n	80163aa <__pow5mult+0xa2>
 8016390:	6820      	ldr	r0, [r4, #0]
 8016392:	2800      	cmp	r0, #0
 8016394:	d107      	bne.n	80163a6 <__pow5mult+0x9e>
 8016396:	0022      	movs	r2, r4
 8016398:	0021      	movs	r1, r4
 801639a:	0038      	movs	r0, r7
 801639c:	f7ff ff04 	bl	80161a8 <__multiply>
 80163a0:	2300      	movs	r3, #0
 80163a2:	6020      	str	r0, [r4, #0]
 80163a4:	6003      	str	r3, [r0, #0]
 80163a6:	0004      	movs	r4, r0
 80163a8:	e7e2      	b.n	8016370 <__pow5mult+0x68>
 80163aa:	0030      	movs	r0, r6
 80163ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80163ae:	46c0      	nop			; (mov r8, r8)
 80163b0:	08018cb0 	.word	0x08018cb0
 80163b4:	08018ae1 	.word	0x08018ae1
 80163b8:	08018b64 	.word	0x08018b64
 80163bc:	00000271 	.word	0x00000271

080163c0 <__lshift>:
 80163c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163c2:	000c      	movs	r4, r1
 80163c4:	0017      	movs	r7, r2
 80163c6:	6923      	ldr	r3, [r4, #16]
 80163c8:	1155      	asrs	r5, r2, #5
 80163ca:	b087      	sub	sp, #28
 80163cc:	18eb      	adds	r3, r5, r3
 80163ce:	9302      	str	r3, [sp, #8]
 80163d0:	3301      	adds	r3, #1
 80163d2:	9301      	str	r3, [sp, #4]
 80163d4:	6849      	ldr	r1, [r1, #4]
 80163d6:	68a3      	ldr	r3, [r4, #8]
 80163d8:	9004      	str	r0, [sp, #16]
 80163da:	9a01      	ldr	r2, [sp, #4]
 80163dc:	4293      	cmp	r3, r2
 80163de:	db10      	blt.n	8016402 <__lshift+0x42>
 80163e0:	9804      	ldr	r0, [sp, #16]
 80163e2:	f7ff fdd7 	bl	8015f94 <_Balloc>
 80163e6:	2300      	movs	r3, #0
 80163e8:	0002      	movs	r2, r0
 80163ea:	0006      	movs	r6, r0
 80163ec:	0019      	movs	r1, r3
 80163ee:	3214      	adds	r2, #20
 80163f0:	4298      	cmp	r0, r3
 80163f2:	d10c      	bne.n	801640e <__lshift+0x4e>
 80163f4:	21da      	movs	r1, #218	; 0xda
 80163f6:	0002      	movs	r2, r0
 80163f8:	4b26      	ldr	r3, [pc, #152]	; (8016494 <__lshift+0xd4>)
 80163fa:	4827      	ldr	r0, [pc, #156]	; (8016498 <__lshift+0xd8>)
 80163fc:	31ff      	adds	r1, #255	; 0xff
 80163fe:	f000 faf3 	bl	80169e8 <__assert_func>
 8016402:	3101      	adds	r1, #1
 8016404:	005b      	lsls	r3, r3, #1
 8016406:	e7e8      	b.n	80163da <__lshift+0x1a>
 8016408:	0098      	lsls	r0, r3, #2
 801640a:	5011      	str	r1, [r2, r0]
 801640c:	3301      	adds	r3, #1
 801640e:	42ab      	cmp	r3, r5
 8016410:	dbfa      	blt.n	8016408 <__lshift+0x48>
 8016412:	43eb      	mvns	r3, r5
 8016414:	17db      	asrs	r3, r3, #31
 8016416:	401d      	ands	r5, r3
 8016418:	211f      	movs	r1, #31
 801641a:	0023      	movs	r3, r4
 801641c:	0038      	movs	r0, r7
 801641e:	00ad      	lsls	r5, r5, #2
 8016420:	1955      	adds	r5, r2, r5
 8016422:	6922      	ldr	r2, [r4, #16]
 8016424:	3314      	adds	r3, #20
 8016426:	0092      	lsls	r2, r2, #2
 8016428:	4008      	ands	r0, r1
 801642a:	4684      	mov	ip, r0
 801642c:	189a      	adds	r2, r3, r2
 801642e:	420f      	tst	r7, r1
 8016430:	d02a      	beq.n	8016488 <__lshift+0xc8>
 8016432:	3101      	adds	r1, #1
 8016434:	1a09      	subs	r1, r1, r0
 8016436:	9105      	str	r1, [sp, #20]
 8016438:	2100      	movs	r1, #0
 801643a:	9503      	str	r5, [sp, #12]
 801643c:	4667      	mov	r7, ip
 801643e:	6818      	ldr	r0, [r3, #0]
 8016440:	40b8      	lsls	r0, r7
 8016442:	4301      	orrs	r1, r0
 8016444:	9803      	ldr	r0, [sp, #12]
 8016446:	c002      	stmia	r0!, {r1}
 8016448:	cb02      	ldmia	r3!, {r1}
 801644a:	9003      	str	r0, [sp, #12]
 801644c:	9805      	ldr	r0, [sp, #20]
 801644e:	40c1      	lsrs	r1, r0
 8016450:	429a      	cmp	r2, r3
 8016452:	d8f3      	bhi.n	801643c <__lshift+0x7c>
 8016454:	0020      	movs	r0, r4
 8016456:	3015      	adds	r0, #21
 8016458:	2304      	movs	r3, #4
 801645a:	4282      	cmp	r2, r0
 801645c:	d304      	bcc.n	8016468 <__lshift+0xa8>
 801645e:	1b13      	subs	r3, r2, r4
 8016460:	3b15      	subs	r3, #21
 8016462:	089b      	lsrs	r3, r3, #2
 8016464:	3301      	adds	r3, #1
 8016466:	009b      	lsls	r3, r3, #2
 8016468:	50e9      	str	r1, [r5, r3]
 801646a:	2900      	cmp	r1, #0
 801646c:	d002      	beq.n	8016474 <__lshift+0xb4>
 801646e:	9b02      	ldr	r3, [sp, #8]
 8016470:	3302      	adds	r3, #2
 8016472:	9301      	str	r3, [sp, #4]
 8016474:	9b01      	ldr	r3, [sp, #4]
 8016476:	9804      	ldr	r0, [sp, #16]
 8016478:	3b01      	subs	r3, #1
 801647a:	0021      	movs	r1, r4
 801647c:	6133      	str	r3, [r6, #16]
 801647e:	f7ff fdcd 	bl	801601c <_Bfree>
 8016482:	0030      	movs	r0, r6
 8016484:	b007      	add	sp, #28
 8016486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016488:	cb02      	ldmia	r3!, {r1}
 801648a:	c502      	stmia	r5!, {r1}
 801648c:	429a      	cmp	r2, r3
 801648e:	d8fb      	bhi.n	8016488 <__lshift+0xc8>
 8016490:	e7f0      	b.n	8016474 <__lshift+0xb4>
 8016492:	46c0      	nop			; (mov r8, r8)
 8016494:	08018b53 	.word	0x08018b53
 8016498:	08018b64 	.word	0x08018b64

0801649c <__mcmp>:
 801649c:	6902      	ldr	r2, [r0, #16]
 801649e:	690b      	ldr	r3, [r1, #16]
 80164a0:	b530      	push	{r4, r5, lr}
 80164a2:	0004      	movs	r4, r0
 80164a4:	1ad0      	subs	r0, r2, r3
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d10d      	bne.n	80164c6 <__mcmp+0x2a>
 80164aa:	009b      	lsls	r3, r3, #2
 80164ac:	3414      	adds	r4, #20
 80164ae:	3114      	adds	r1, #20
 80164b0:	18e2      	adds	r2, r4, r3
 80164b2:	18c9      	adds	r1, r1, r3
 80164b4:	3a04      	subs	r2, #4
 80164b6:	3904      	subs	r1, #4
 80164b8:	6815      	ldr	r5, [r2, #0]
 80164ba:	680b      	ldr	r3, [r1, #0]
 80164bc:	429d      	cmp	r5, r3
 80164be:	d003      	beq.n	80164c8 <__mcmp+0x2c>
 80164c0:	2001      	movs	r0, #1
 80164c2:	429d      	cmp	r5, r3
 80164c4:	d303      	bcc.n	80164ce <__mcmp+0x32>
 80164c6:	bd30      	pop	{r4, r5, pc}
 80164c8:	4294      	cmp	r4, r2
 80164ca:	d3f3      	bcc.n	80164b4 <__mcmp+0x18>
 80164cc:	e7fb      	b.n	80164c6 <__mcmp+0x2a>
 80164ce:	4240      	negs	r0, r0
 80164d0:	e7f9      	b.n	80164c6 <__mcmp+0x2a>
	...

080164d4 <__mdiff>:
 80164d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164d6:	000e      	movs	r6, r1
 80164d8:	0007      	movs	r7, r0
 80164da:	0011      	movs	r1, r2
 80164dc:	0030      	movs	r0, r6
 80164de:	b087      	sub	sp, #28
 80164e0:	0014      	movs	r4, r2
 80164e2:	f7ff ffdb 	bl	801649c <__mcmp>
 80164e6:	1e05      	subs	r5, r0, #0
 80164e8:	d110      	bne.n	801650c <__mdiff+0x38>
 80164ea:	0001      	movs	r1, r0
 80164ec:	0038      	movs	r0, r7
 80164ee:	f7ff fd51 	bl	8015f94 <_Balloc>
 80164f2:	1e02      	subs	r2, r0, #0
 80164f4:	d104      	bne.n	8016500 <__mdiff+0x2c>
 80164f6:	4b40      	ldr	r3, [pc, #256]	; (80165f8 <__mdiff+0x124>)
 80164f8:	4940      	ldr	r1, [pc, #256]	; (80165fc <__mdiff+0x128>)
 80164fa:	4841      	ldr	r0, [pc, #260]	; (8016600 <__mdiff+0x12c>)
 80164fc:	f000 fa74 	bl	80169e8 <__assert_func>
 8016500:	2301      	movs	r3, #1
 8016502:	6145      	str	r5, [r0, #20]
 8016504:	6103      	str	r3, [r0, #16]
 8016506:	0010      	movs	r0, r2
 8016508:	b007      	add	sp, #28
 801650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801650c:	2301      	movs	r3, #1
 801650e:	9301      	str	r3, [sp, #4]
 8016510:	2800      	cmp	r0, #0
 8016512:	db04      	blt.n	801651e <__mdiff+0x4a>
 8016514:	0023      	movs	r3, r4
 8016516:	0034      	movs	r4, r6
 8016518:	001e      	movs	r6, r3
 801651a:	2300      	movs	r3, #0
 801651c:	9301      	str	r3, [sp, #4]
 801651e:	0038      	movs	r0, r7
 8016520:	6861      	ldr	r1, [r4, #4]
 8016522:	f7ff fd37 	bl	8015f94 <_Balloc>
 8016526:	1e02      	subs	r2, r0, #0
 8016528:	d103      	bne.n	8016532 <__mdiff+0x5e>
 801652a:	2190      	movs	r1, #144	; 0x90
 801652c:	4b32      	ldr	r3, [pc, #200]	; (80165f8 <__mdiff+0x124>)
 801652e:	0089      	lsls	r1, r1, #2
 8016530:	e7e3      	b.n	80164fa <__mdiff+0x26>
 8016532:	9b01      	ldr	r3, [sp, #4]
 8016534:	2700      	movs	r7, #0
 8016536:	60c3      	str	r3, [r0, #12]
 8016538:	6920      	ldr	r0, [r4, #16]
 801653a:	3414      	adds	r4, #20
 801653c:	9401      	str	r4, [sp, #4]
 801653e:	9b01      	ldr	r3, [sp, #4]
 8016540:	0084      	lsls	r4, r0, #2
 8016542:	191b      	adds	r3, r3, r4
 8016544:	0034      	movs	r4, r6
 8016546:	9302      	str	r3, [sp, #8]
 8016548:	6933      	ldr	r3, [r6, #16]
 801654a:	3414      	adds	r4, #20
 801654c:	0099      	lsls	r1, r3, #2
 801654e:	1863      	adds	r3, r4, r1
 8016550:	9303      	str	r3, [sp, #12]
 8016552:	0013      	movs	r3, r2
 8016554:	3314      	adds	r3, #20
 8016556:	469c      	mov	ip, r3
 8016558:	9305      	str	r3, [sp, #20]
 801655a:	9b01      	ldr	r3, [sp, #4]
 801655c:	9304      	str	r3, [sp, #16]
 801655e:	9b04      	ldr	r3, [sp, #16]
 8016560:	cc02      	ldmia	r4!, {r1}
 8016562:	cb20      	ldmia	r3!, {r5}
 8016564:	9304      	str	r3, [sp, #16]
 8016566:	b2ab      	uxth	r3, r5
 8016568:	19df      	adds	r7, r3, r7
 801656a:	b28b      	uxth	r3, r1
 801656c:	1afb      	subs	r3, r7, r3
 801656e:	0c09      	lsrs	r1, r1, #16
 8016570:	0c2d      	lsrs	r5, r5, #16
 8016572:	1a6d      	subs	r5, r5, r1
 8016574:	1419      	asrs	r1, r3, #16
 8016576:	186d      	adds	r5, r5, r1
 8016578:	4661      	mov	r1, ip
 801657a:	142f      	asrs	r7, r5, #16
 801657c:	b29b      	uxth	r3, r3
 801657e:	042d      	lsls	r5, r5, #16
 8016580:	432b      	orrs	r3, r5
 8016582:	c108      	stmia	r1!, {r3}
 8016584:	9b03      	ldr	r3, [sp, #12]
 8016586:	468c      	mov	ip, r1
 8016588:	42a3      	cmp	r3, r4
 801658a:	d8e8      	bhi.n	801655e <__mdiff+0x8a>
 801658c:	0031      	movs	r1, r6
 801658e:	9c03      	ldr	r4, [sp, #12]
 8016590:	3115      	adds	r1, #21
 8016592:	2304      	movs	r3, #4
 8016594:	428c      	cmp	r4, r1
 8016596:	d304      	bcc.n	80165a2 <__mdiff+0xce>
 8016598:	1ba3      	subs	r3, r4, r6
 801659a:	3b15      	subs	r3, #21
 801659c:	089b      	lsrs	r3, r3, #2
 801659e:	3301      	adds	r3, #1
 80165a0:	009b      	lsls	r3, r3, #2
 80165a2:	9901      	ldr	r1, [sp, #4]
 80165a4:	18cc      	adds	r4, r1, r3
 80165a6:	9905      	ldr	r1, [sp, #20]
 80165a8:	0026      	movs	r6, r4
 80165aa:	18cb      	adds	r3, r1, r3
 80165ac:	469c      	mov	ip, r3
 80165ae:	9902      	ldr	r1, [sp, #8]
 80165b0:	428e      	cmp	r6, r1
 80165b2:	d310      	bcc.n	80165d6 <__mdiff+0x102>
 80165b4:	9e02      	ldr	r6, [sp, #8]
 80165b6:	1ee1      	subs	r1, r4, #3
 80165b8:	2500      	movs	r5, #0
 80165ba:	428e      	cmp	r6, r1
 80165bc:	d304      	bcc.n	80165c8 <__mdiff+0xf4>
 80165be:	0031      	movs	r1, r6
 80165c0:	3103      	adds	r1, #3
 80165c2:	1b0c      	subs	r4, r1, r4
 80165c4:	08a4      	lsrs	r4, r4, #2
 80165c6:	00a5      	lsls	r5, r4, #2
 80165c8:	195b      	adds	r3, r3, r5
 80165ca:	3b04      	subs	r3, #4
 80165cc:	6819      	ldr	r1, [r3, #0]
 80165ce:	2900      	cmp	r1, #0
 80165d0:	d00f      	beq.n	80165f2 <__mdiff+0x11e>
 80165d2:	6110      	str	r0, [r2, #16]
 80165d4:	e797      	b.n	8016506 <__mdiff+0x32>
 80165d6:	ce02      	ldmia	r6!, {r1}
 80165d8:	b28d      	uxth	r5, r1
 80165da:	19ed      	adds	r5, r5, r7
 80165dc:	0c0f      	lsrs	r7, r1, #16
 80165de:	1429      	asrs	r1, r5, #16
 80165e0:	1879      	adds	r1, r7, r1
 80165e2:	140f      	asrs	r7, r1, #16
 80165e4:	b2ad      	uxth	r5, r5
 80165e6:	0409      	lsls	r1, r1, #16
 80165e8:	430d      	orrs	r5, r1
 80165ea:	4661      	mov	r1, ip
 80165ec:	c120      	stmia	r1!, {r5}
 80165ee:	468c      	mov	ip, r1
 80165f0:	e7dd      	b.n	80165ae <__mdiff+0xda>
 80165f2:	3801      	subs	r0, #1
 80165f4:	e7e9      	b.n	80165ca <__mdiff+0xf6>
 80165f6:	46c0      	nop			; (mov r8, r8)
 80165f8:	08018b53 	.word	0x08018b53
 80165fc:	00000232 	.word	0x00000232
 8016600:	08018b64 	.word	0x08018b64

08016604 <__d2b>:
 8016604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016606:	2101      	movs	r1, #1
 8016608:	0014      	movs	r4, r2
 801660a:	001e      	movs	r6, r3
 801660c:	9f08      	ldr	r7, [sp, #32]
 801660e:	f7ff fcc1 	bl	8015f94 <_Balloc>
 8016612:	1e05      	subs	r5, r0, #0
 8016614:	d105      	bne.n	8016622 <__d2b+0x1e>
 8016616:	0002      	movs	r2, r0
 8016618:	4b26      	ldr	r3, [pc, #152]	; (80166b4 <__d2b+0xb0>)
 801661a:	4927      	ldr	r1, [pc, #156]	; (80166b8 <__d2b+0xb4>)
 801661c:	4827      	ldr	r0, [pc, #156]	; (80166bc <__d2b+0xb8>)
 801661e:	f000 f9e3 	bl	80169e8 <__assert_func>
 8016622:	0333      	lsls	r3, r6, #12
 8016624:	0076      	lsls	r6, r6, #1
 8016626:	0b1b      	lsrs	r3, r3, #12
 8016628:	0d76      	lsrs	r6, r6, #21
 801662a:	d124      	bne.n	8016676 <__d2b+0x72>
 801662c:	9301      	str	r3, [sp, #4]
 801662e:	2c00      	cmp	r4, #0
 8016630:	d027      	beq.n	8016682 <__d2b+0x7e>
 8016632:	4668      	mov	r0, sp
 8016634:	9400      	str	r4, [sp, #0]
 8016636:	f7ff fd73 	bl	8016120 <__lo0bits>
 801663a:	9c00      	ldr	r4, [sp, #0]
 801663c:	2800      	cmp	r0, #0
 801663e:	d01e      	beq.n	801667e <__d2b+0x7a>
 8016640:	9b01      	ldr	r3, [sp, #4]
 8016642:	2120      	movs	r1, #32
 8016644:	001a      	movs	r2, r3
 8016646:	1a09      	subs	r1, r1, r0
 8016648:	408a      	lsls	r2, r1
 801664a:	40c3      	lsrs	r3, r0
 801664c:	4322      	orrs	r2, r4
 801664e:	616a      	str	r2, [r5, #20]
 8016650:	9301      	str	r3, [sp, #4]
 8016652:	9c01      	ldr	r4, [sp, #4]
 8016654:	61ac      	str	r4, [r5, #24]
 8016656:	1e63      	subs	r3, r4, #1
 8016658:	419c      	sbcs	r4, r3
 801665a:	3401      	adds	r4, #1
 801665c:	612c      	str	r4, [r5, #16]
 801665e:	2e00      	cmp	r6, #0
 8016660:	d018      	beq.n	8016694 <__d2b+0x90>
 8016662:	4b17      	ldr	r3, [pc, #92]	; (80166c0 <__d2b+0xbc>)
 8016664:	18f6      	adds	r6, r6, r3
 8016666:	2335      	movs	r3, #53	; 0x35
 8016668:	1836      	adds	r6, r6, r0
 801666a:	1a18      	subs	r0, r3, r0
 801666c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801666e:	603e      	str	r6, [r7, #0]
 8016670:	6018      	str	r0, [r3, #0]
 8016672:	0028      	movs	r0, r5
 8016674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016676:	2280      	movs	r2, #128	; 0x80
 8016678:	0352      	lsls	r2, r2, #13
 801667a:	4313      	orrs	r3, r2
 801667c:	e7d6      	b.n	801662c <__d2b+0x28>
 801667e:	616c      	str	r4, [r5, #20]
 8016680:	e7e7      	b.n	8016652 <__d2b+0x4e>
 8016682:	a801      	add	r0, sp, #4
 8016684:	f7ff fd4c 	bl	8016120 <__lo0bits>
 8016688:	2401      	movs	r4, #1
 801668a:	9b01      	ldr	r3, [sp, #4]
 801668c:	612c      	str	r4, [r5, #16]
 801668e:	616b      	str	r3, [r5, #20]
 8016690:	3020      	adds	r0, #32
 8016692:	e7e4      	b.n	801665e <__d2b+0x5a>
 8016694:	4b0b      	ldr	r3, [pc, #44]	; (80166c4 <__d2b+0xc0>)
 8016696:	18c0      	adds	r0, r0, r3
 8016698:	4b0b      	ldr	r3, [pc, #44]	; (80166c8 <__d2b+0xc4>)
 801669a:	6038      	str	r0, [r7, #0]
 801669c:	18e3      	adds	r3, r4, r3
 801669e:	009b      	lsls	r3, r3, #2
 80166a0:	18eb      	adds	r3, r5, r3
 80166a2:	6958      	ldr	r0, [r3, #20]
 80166a4:	f7ff fd22 	bl	80160ec <__hi0bits>
 80166a8:	0164      	lsls	r4, r4, #5
 80166aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166ac:	1a24      	subs	r4, r4, r0
 80166ae:	601c      	str	r4, [r3, #0]
 80166b0:	e7df      	b.n	8016672 <__d2b+0x6e>
 80166b2:	46c0      	nop			; (mov r8, r8)
 80166b4:	08018b53 	.word	0x08018b53
 80166b8:	0000030a 	.word	0x0000030a
 80166bc:	08018b64 	.word	0x08018b64
 80166c0:	fffffbcd 	.word	0xfffffbcd
 80166c4:	fffffbce 	.word	0xfffffbce
 80166c8:	3fffffff 	.word	0x3fffffff

080166cc <_calloc_r>:
 80166cc:	b570      	push	{r4, r5, r6, lr}
 80166ce:	0c13      	lsrs	r3, r2, #16
 80166d0:	0c0d      	lsrs	r5, r1, #16
 80166d2:	d11e      	bne.n	8016712 <_calloc_r+0x46>
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10c      	bne.n	80166f2 <_calloc_r+0x26>
 80166d8:	b289      	uxth	r1, r1
 80166da:	b294      	uxth	r4, r2
 80166dc:	434c      	muls	r4, r1
 80166de:	0021      	movs	r1, r4
 80166e0:	f7fe f87c 	bl	80147dc <_malloc_r>
 80166e4:	1e05      	subs	r5, r0, #0
 80166e6:	d01b      	beq.n	8016720 <_calloc_r+0x54>
 80166e8:	0022      	movs	r2, r4
 80166ea:	2100      	movs	r1, #0
 80166ec:	f7fe f801 	bl	80146f2 <memset>
 80166f0:	e016      	b.n	8016720 <_calloc_r+0x54>
 80166f2:	1c1d      	adds	r5, r3, #0
 80166f4:	1c0b      	adds	r3, r1, #0
 80166f6:	b292      	uxth	r2, r2
 80166f8:	b289      	uxth	r1, r1
 80166fa:	b29c      	uxth	r4, r3
 80166fc:	4351      	muls	r1, r2
 80166fe:	b2ab      	uxth	r3, r5
 8016700:	4363      	muls	r3, r4
 8016702:	0c0c      	lsrs	r4, r1, #16
 8016704:	191c      	adds	r4, r3, r4
 8016706:	0c22      	lsrs	r2, r4, #16
 8016708:	d107      	bne.n	801671a <_calloc_r+0x4e>
 801670a:	0424      	lsls	r4, r4, #16
 801670c:	b289      	uxth	r1, r1
 801670e:	430c      	orrs	r4, r1
 8016710:	e7e5      	b.n	80166de <_calloc_r+0x12>
 8016712:	2b00      	cmp	r3, #0
 8016714:	d101      	bne.n	801671a <_calloc_r+0x4e>
 8016716:	1c13      	adds	r3, r2, #0
 8016718:	e7ed      	b.n	80166f6 <_calloc_r+0x2a>
 801671a:	230c      	movs	r3, #12
 801671c:	2500      	movs	r5, #0
 801671e:	6003      	str	r3, [r0, #0]
 8016720:	0028      	movs	r0, r5
 8016722:	bd70      	pop	{r4, r5, r6, pc}

08016724 <__ssputs_r>:
 8016724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016726:	688e      	ldr	r6, [r1, #8]
 8016728:	b085      	sub	sp, #20
 801672a:	0007      	movs	r7, r0
 801672c:	000c      	movs	r4, r1
 801672e:	9203      	str	r2, [sp, #12]
 8016730:	9301      	str	r3, [sp, #4]
 8016732:	429e      	cmp	r6, r3
 8016734:	d83c      	bhi.n	80167b0 <__ssputs_r+0x8c>
 8016736:	2390      	movs	r3, #144	; 0x90
 8016738:	898a      	ldrh	r2, [r1, #12]
 801673a:	00db      	lsls	r3, r3, #3
 801673c:	421a      	tst	r2, r3
 801673e:	d034      	beq.n	80167aa <__ssputs_r+0x86>
 8016740:	6909      	ldr	r1, [r1, #16]
 8016742:	6823      	ldr	r3, [r4, #0]
 8016744:	6960      	ldr	r0, [r4, #20]
 8016746:	1a5b      	subs	r3, r3, r1
 8016748:	9302      	str	r3, [sp, #8]
 801674a:	2303      	movs	r3, #3
 801674c:	4343      	muls	r3, r0
 801674e:	0fdd      	lsrs	r5, r3, #31
 8016750:	18ed      	adds	r5, r5, r3
 8016752:	9b01      	ldr	r3, [sp, #4]
 8016754:	9802      	ldr	r0, [sp, #8]
 8016756:	3301      	adds	r3, #1
 8016758:	181b      	adds	r3, r3, r0
 801675a:	106d      	asrs	r5, r5, #1
 801675c:	42ab      	cmp	r3, r5
 801675e:	d900      	bls.n	8016762 <__ssputs_r+0x3e>
 8016760:	001d      	movs	r5, r3
 8016762:	0553      	lsls	r3, r2, #21
 8016764:	d532      	bpl.n	80167cc <__ssputs_r+0xa8>
 8016766:	0029      	movs	r1, r5
 8016768:	0038      	movs	r0, r7
 801676a:	f7fe f837 	bl	80147dc <_malloc_r>
 801676e:	1e06      	subs	r6, r0, #0
 8016770:	d109      	bne.n	8016786 <__ssputs_r+0x62>
 8016772:	230c      	movs	r3, #12
 8016774:	603b      	str	r3, [r7, #0]
 8016776:	2340      	movs	r3, #64	; 0x40
 8016778:	2001      	movs	r0, #1
 801677a:	89a2      	ldrh	r2, [r4, #12]
 801677c:	4240      	negs	r0, r0
 801677e:	4313      	orrs	r3, r2
 8016780:	81a3      	strh	r3, [r4, #12]
 8016782:	b005      	add	sp, #20
 8016784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016786:	9a02      	ldr	r2, [sp, #8]
 8016788:	6921      	ldr	r1, [r4, #16]
 801678a:	f7fd ffa9 	bl	80146e0 <memcpy>
 801678e:	89a3      	ldrh	r3, [r4, #12]
 8016790:	4a14      	ldr	r2, [pc, #80]	; (80167e4 <__ssputs_r+0xc0>)
 8016792:	401a      	ands	r2, r3
 8016794:	2380      	movs	r3, #128	; 0x80
 8016796:	4313      	orrs	r3, r2
 8016798:	81a3      	strh	r3, [r4, #12]
 801679a:	9b02      	ldr	r3, [sp, #8]
 801679c:	6126      	str	r6, [r4, #16]
 801679e:	18f6      	adds	r6, r6, r3
 80167a0:	6026      	str	r6, [r4, #0]
 80167a2:	6165      	str	r5, [r4, #20]
 80167a4:	9e01      	ldr	r6, [sp, #4]
 80167a6:	1aed      	subs	r5, r5, r3
 80167a8:	60a5      	str	r5, [r4, #8]
 80167aa:	9b01      	ldr	r3, [sp, #4]
 80167ac:	429e      	cmp	r6, r3
 80167ae:	d900      	bls.n	80167b2 <__ssputs_r+0x8e>
 80167b0:	9e01      	ldr	r6, [sp, #4]
 80167b2:	0032      	movs	r2, r6
 80167b4:	9903      	ldr	r1, [sp, #12]
 80167b6:	6820      	ldr	r0, [r4, #0]
 80167b8:	f000 f959 	bl	8016a6e <memmove>
 80167bc:	68a3      	ldr	r3, [r4, #8]
 80167be:	2000      	movs	r0, #0
 80167c0:	1b9b      	subs	r3, r3, r6
 80167c2:	60a3      	str	r3, [r4, #8]
 80167c4:	6823      	ldr	r3, [r4, #0]
 80167c6:	199e      	adds	r6, r3, r6
 80167c8:	6026      	str	r6, [r4, #0]
 80167ca:	e7da      	b.n	8016782 <__ssputs_r+0x5e>
 80167cc:	002a      	movs	r2, r5
 80167ce:	0038      	movs	r0, r7
 80167d0:	f000 f960 	bl	8016a94 <_realloc_r>
 80167d4:	1e06      	subs	r6, r0, #0
 80167d6:	d1e0      	bne.n	801679a <__ssputs_r+0x76>
 80167d8:	0038      	movs	r0, r7
 80167da:	6921      	ldr	r1, [r4, #16]
 80167dc:	f7fd ff92 	bl	8014704 <_free_r>
 80167e0:	e7c7      	b.n	8016772 <__ssputs_r+0x4e>
 80167e2:	46c0      	nop			; (mov r8, r8)
 80167e4:	fffffb7f 	.word	0xfffffb7f

080167e8 <_svfiprintf_r>:
 80167e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ea:	b0a1      	sub	sp, #132	; 0x84
 80167ec:	9003      	str	r0, [sp, #12]
 80167ee:	001d      	movs	r5, r3
 80167f0:	898b      	ldrh	r3, [r1, #12]
 80167f2:	000f      	movs	r7, r1
 80167f4:	0016      	movs	r6, r2
 80167f6:	061b      	lsls	r3, r3, #24
 80167f8:	d511      	bpl.n	801681e <_svfiprintf_r+0x36>
 80167fa:	690b      	ldr	r3, [r1, #16]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d10e      	bne.n	801681e <_svfiprintf_r+0x36>
 8016800:	2140      	movs	r1, #64	; 0x40
 8016802:	f7fd ffeb 	bl	80147dc <_malloc_r>
 8016806:	6038      	str	r0, [r7, #0]
 8016808:	6138      	str	r0, [r7, #16]
 801680a:	2800      	cmp	r0, #0
 801680c:	d105      	bne.n	801681a <_svfiprintf_r+0x32>
 801680e:	230c      	movs	r3, #12
 8016810:	9a03      	ldr	r2, [sp, #12]
 8016812:	3801      	subs	r0, #1
 8016814:	6013      	str	r3, [r2, #0]
 8016816:	b021      	add	sp, #132	; 0x84
 8016818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801681a:	2340      	movs	r3, #64	; 0x40
 801681c:	617b      	str	r3, [r7, #20]
 801681e:	2300      	movs	r3, #0
 8016820:	ac08      	add	r4, sp, #32
 8016822:	6163      	str	r3, [r4, #20]
 8016824:	3320      	adds	r3, #32
 8016826:	7663      	strb	r3, [r4, #25]
 8016828:	3310      	adds	r3, #16
 801682a:	76a3      	strb	r3, [r4, #26]
 801682c:	9507      	str	r5, [sp, #28]
 801682e:	0035      	movs	r5, r6
 8016830:	782b      	ldrb	r3, [r5, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d001      	beq.n	801683a <_svfiprintf_r+0x52>
 8016836:	2b25      	cmp	r3, #37	; 0x25
 8016838:	d147      	bne.n	80168ca <_svfiprintf_r+0xe2>
 801683a:	1bab      	subs	r3, r5, r6
 801683c:	9305      	str	r3, [sp, #20]
 801683e:	42b5      	cmp	r5, r6
 8016840:	d00c      	beq.n	801685c <_svfiprintf_r+0x74>
 8016842:	0032      	movs	r2, r6
 8016844:	0039      	movs	r1, r7
 8016846:	9803      	ldr	r0, [sp, #12]
 8016848:	f7ff ff6c 	bl	8016724 <__ssputs_r>
 801684c:	1c43      	adds	r3, r0, #1
 801684e:	d100      	bne.n	8016852 <_svfiprintf_r+0x6a>
 8016850:	e0ae      	b.n	80169b0 <_svfiprintf_r+0x1c8>
 8016852:	6962      	ldr	r2, [r4, #20]
 8016854:	9b05      	ldr	r3, [sp, #20]
 8016856:	4694      	mov	ip, r2
 8016858:	4463      	add	r3, ip
 801685a:	6163      	str	r3, [r4, #20]
 801685c:	782b      	ldrb	r3, [r5, #0]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d100      	bne.n	8016864 <_svfiprintf_r+0x7c>
 8016862:	e0a5      	b.n	80169b0 <_svfiprintf_r+0x1c8>
 8016864:	2201      	movs	r2, #1
 8016866:	2300      	movs	r3, #0
 8016868:	4252      	negs	r2, r2
 801686a:	6062      	str	r2, [r4, #4]
 801686c:	a904      	add	r1, sp, #16
 801686e:	3254      	adds	r2, #84	; 0x54
 8016870:	1852      	adds	r2, r2, r1
 8016872:	1c6e      	adds	r6, r5, #1
 8016874:	6023      	str	r3, [r4, #0]
 8016876:	60e3      	str	r3, [r4, #12]
 8016878:	60a3      	str	r3, [r4, #8]
 801687a:	7013      	strb	r3, [r2, #0]
 801687c:	65a3      	str	r3, [r4, #88]	; 0x58
 801687e:	2205      	movs	r2, #5
 8016880:	7831      	ldrb	r1, [r6, #0]
 8016882:	4854      	ldr	r0, [pc, #336]	; (80169d4 <_svfiprintf_r+0x1ec>)
 8016884:	f7ff fb6a 	bl	8015f5c <memchr>
 8016888:	1c75      	adds	r5, r6, #1
 801688a:	2800      	cmp	r0, #0
 801688c:	d11f      	bne.n	80168ce <_svfiprintf_r+0xe6>
 801688e:	6822      	ldr	r2, [r4, #0]
 8016890:	06d3      	lsls	r3, r2, #27
 8016892:	d504      	bpl.n	801689e <_svfiprintf_r+0xb6>
 8016894:	2353      	movs	r3, #83	; 0x53
 8016896:	a904      	add	r1, sp, #16
 8016898:	185b      	adds	r3, r3, r1
 801689a:	2120      	movs	r1, #32
 801689c:	7019      	strb	r1, [r3, #0]
 801689e:	0713      	lsls	r3, r2, #28
 80168a0:	d504      	bpl.n	80168ac <_svfiprintf_r+0xc4>
 80168a2:	2353      	movs	r3, #83	; 0x53
 80168a4:	a904      	add	r1, sp, #16
 80168a6:	185b      	adds	r3, r3, r1
 80168a8:	212b      	movs	r1, #43	; 0x2b
 80168aa:	7019      	strb	r1, [r3, #0]
 80168ac:	7833      	ldrb	r3, [r6, #0]
 80168ae:	2b2a      	cmp	r3, #42	; 0x2a
 80168b0:	d016      	beq.n	80168e0 <_svfiprintf_r+0xf8>
 80168b2:	0035      	movs	r5, r6
 80168b4:	2100      	movs	r1, #0
 80168b6:	200a      	movs	r0, #10
 80168b8:	68e3      	ldr	r3, [r4, #12]
 80168ba:	782a      	ldrb	r2, [r5, #0]
 80168bc:	1c6e      	adds	r6, r5, #1
 80168be:	3a30      	subs	r2, #48	; 0x30
 80168c0:	2a09      	cmp	r2, #9
 80168c2:	d94e      	bls.n	8016962 <_svfiprintf_r+0x17a>
 80168c4:	2900      	cmp	r1, #0
 80168c6:	d111      	bne.n	80168ec <_svfiprintf_r+0x104>
 80168c8:	e017      	b.n	80168fa <_svfiprintf_r+0x112>
 80168ca:	3501      	adds	r5, #1
 80168cc:	e7b0      	b.n	8016830 <_svfiprintf_r+0x48>
 80168ce:	4b41      	ldr	r3, [pc, #260]	; (80169d4 <_svfiprintf_r+0x1ec>)
 80168d0:	6822      	ldr	r2, [r4, #0]
 80168d2:	1ac0      	subs	r0, r0, r3
 80168d4:	2301      	movs	r3, #1
 80168d6:	4083      	lsls	r3, r0
 80168d8:	4313      	orrs	r3, r2
 80168da:	002e      	movs	r6, r5
 80168dc:	6023      	str	r3, [r4, #0]
 80168de:	e7ce      	b.n	801687e <_svfiprintf_r+0x96>
 80168e0:	9b07      	ldr	r3, [sp, #28]
 80168e2:	1d19      	adds	r1, r3, #4
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	9107      	str	r1, [sp, #28]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	db01      	blt.n	80168f0 <_svfiprintf_r+0x108>
 80168ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80168ee:	e004      	b.n	80168fa <_svfiprintf_r+0x112>
 80168f0:	425b      	negs	r3, r3
 80168f2:	60e3      	str	r3, [r4, #12]
 80168f4:	2302      	movs	r3, #2
 80168f6:	4313      	orrs	r3, r2
 80168f8:	6023      	str	r3, [r4, #0]
 80168fa:	782b      	ldrb	r3, [r5, #0]
 80168fc:	2b2e      	cmp	r3, #46	; 0x2e
 80168fe:	d10a      	bne.n	8016916 <_svfiprintf_r+0x12e>
 8016900:	786b      	ldrb	r3, [r5, #1]
 8016902:	2b2a      	cmp	r3, #42	; 0x2a
 8016904:	d135      	bne.n	8016972 <_svfiprintf_r+0x18a>
 8016906:	9b07      	ldr	r3, [sp, #28]
 8016908:	3502      	adds	r5, #2
 801690a:	1d1a      	adds	r2, r3, #4
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	9207      	str	r2, [sp, #28]
 8016910:	2b00      	cmp	r3, #0
 8016912:	db2b      	blt.n	801696c <_svfiprintf_r+0x184>
 8016914:	9309      	str	r3, [sp, #36]	; 0x24
 8016916:	4e30      	ldr	r6, [pc, #192]	; (80169d8 <_svfiprintf_r+0x1f0>)
 8016918:	2203      	movs	r2, #3
 801691a:	0030      	movs	r0, r6
 801691c:	7829      	ldrb	r1, [r5, #0]
 801691e:	f7ff fb1d 	bl	8015f5c <memchr>
 8016922:	2800      	cmp	r0, #0
 8016924:	d006      	beq.n	8016934 <_svfiprintf_r+0x14c>
 8016926:	2340      	movs	r3, #64	; 0x40
 8016928:	1b80      	subs	r0, r0, r6
 801692a:	4083      	lsls	r3, r0
 801692c:	6822      	ldr	r2, [r4, #0]
 801692e:	3501      	adds	r5, #1
 8016930:	4313      	orrs	r3, r2
 8016932:	6023      	str	r3, [r4, #0]
 8016934:	7829      	ldrb	r1, [r5, #0]
 8016936:	2206      	movs	r2, #6
 8016938:	4828      	ldr	r0, [pc, #160]	; (80169dc <_svfiprintf_r+0x1f4>)
 801693a:	1c6e      	adds	r6, r5, #1
 801693c:	7621      	strb	r1, [r4, #24]
 801693e:	f7ff fb0d 	bl	8015f5c <memchr>
 8016942:	2800      	cmp	r0, #0
 8016944:	d03c      	beq.n	80169c0 <_svfiprintf_r+0x1d8>
 8016946:	4b26      	ldr	r3, [pc, #152]	; (80169e0 <_svfiprintf_r+0x1f8>)
 8016948:	2b00      	cmp	r3, #0
 801694a:	d125      	bne.n	8016998 <_svfiprintf_r+0x1b0>
 801694c:	2207      	movs	r2, #7
 801694e:	9b07      	ldr	r3, [sp, #28]
 8016950:	3307      	adds	r3, #7
 8016952:	4393      	bics	r3, r2
 8016954:	3308      	adds	r3, #8
 8016956:	9307      	str	r3, [sp, #28]
 8016958:	6963      	ldr	r3, [r4, #20]
 801695a:	9a04      	ldr	r2, [sp, #16]
 801695c:	189b      	adds	r3, r3, r2
 801695e:	6163      	str	r3, [r4, #20]
 8016960:	e765      	b.n	801682e <_svfiprintf_r+0x46>
 8016962:	4343      	muls	r3, r0
 8016964:	0035      	movs	r5, r6
 8016966:	2101      	movs	r1, #1
 8016968:	189b      	adds	r3, r3, r2
 801696a:	e7a6      	b.n	80168ba <_svfiprintf_r+0xd2>
 801696c:	2301      	movs	r3, #1
 801696e:	425b      	negs	r3, r3
 8016970:	e7d0      	b.n	8016914 <_svfiprintf_r+0x12c>
 8016972:	2300      	movs	r3, #0
 8016974:	200a      	movs	r0, #10
 8016976:	001a      	movs	r2, r3
 8016978:	3501      	adds	r5, #1
 801697a:	6063      	str	r3, [r4, #4]
 801697c:	7829      	ldrb	r1, [r5, #0]
 801697e:	1c6e      	adds	r6, r5, #1
 8016980:	3930      	subs	r1, #48	; 0x30
 8016982:	2909      	cmp	r1, #9
 8016984:	d903      	bls.n	801698e <_svfiprintf_r+0x1a6>
 8016986:	2b00      	cmp	r3, #0
 8016988:	d0c5      	beq.n	8016916 <_svfiprintf_r+0x12e>
 801698a:	9209      	str	r2, [sp, #36]	; 0x24
 801698c:	e7c3      	b.n	8016916 <_svfiprintf_r+0x12e>
 801698e:	4342      	muls	r2, r0
 8016990:	0035      	movs	r5, r6
 8016992:	2301      	movs	r3, #1
 8016994:	1852      	adds	r2, r2, r1
 8016996:	e7f1      	b.n	801697c <_svfiprintf_r+0x194>
 8016998:	ab07      	add	r3, sp, #28
 801699a:	9300      	str	r3, [sp, #0]
 801699c:	003a      	movs	r2, r7
 801699e:	0021      	movs	r1, r4
 80169a0:	4b10      	ldr	r3, [pc, #64]	; (80169e4 <_svfiprintf_r+0x1fc>)
 80169a2:	9803      	ldr	r0, [sp, #12]
 80169a4:	f7fe f83a 	bl	8014a1c <_printf_float>
 80169a8:	9004      	str	r0, [sp, #16]
 80169aa:	9b04      	ldr	r3, [sp, #16]
 80169ac:	3301      	adds	r3, #1
 80169ae:	d1d3      	bne.n	8016958 <_svfiprintf_r+0x170>
 80169b0:	89bb      	ldrh	r3, [r7, #12]
 80169b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80169b4:	065b      	lsls	r3, r3, #25
 80169b6:	d400      	bmi.n	80169ba <_svfiprintf_r+0x1d2>
 80169b8:	e72d      	b.n	8016816 <_svfiprintf_r+0x2e>
 80169ba:	2001      	movs	r0, #1
 80169bc:	4240      	negs	r0, r0
 80169be:	e72a      	b.n	8016816 <_svfiprintf_r+0x2e>
 80169c0:	ab07      	add	r3, sp, #28
 80169c2:	9300      	str	r3, [sp, #0]
 80169c4:	003a      	movs	r2, r7
 80169c6:	0021      	movs	r1, r4
 80169c8:	4b06      	ldr	r3, [pc, #24]	; (80169e4 <_svfiprintf_r+0x1fc>)
 80169ca:	9803      	ldr	r0, [sp, #12]
 80169cc:	f7fe fad8 	bl	8014f80 <_printf_i>
 80169d0:	e7ea      	b.n	80169a8 <_svfiprintf_r+0x1c0>
 80169d2:	46c0      	nop			; (mov r8, r8)
 80169d4:	08018cbc 	.word	0x08018cbc
 80169d8:	08018cc2 	.word	0x08018cc2
 80169dc:	08018cc6 	.word	0x08018cc6
 80169e0:	08014a1d 	.word	0x08014a1d
 80169e4:	08016725 	.word	0x08016725

080169e8 <__assert_func>:
 80169e8:	b530      	push	{r4, r5, lr}
 80169ea:	0014      	movs	r4, r2
 80169ec:	001a      	movs	r2, r3
 80169ee:	4b09      	ldr	r3, [pc, #36]	; (8016a14 <__assert_func+0x2c>)
 80169f0:	0005      	movs	r5, r0
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	b085      	sub	sp, #20
 80169f6:	68d8      	ldr	r0, [r3, #12]
 80169f8:	4b07      	ldr	r3, [pc, #28]	; (8016a18 <__assert_func+0x30>)
 80169fa:	2c00      	cmp	r4, #0
 80169fc:	d101      	bne.n	8016a02 <__assert_func+0x1a>
 80169fe:	4b07      	ldr	r3, [pc, #28]	; (8016a1c <__assert_func+0x34>)
 8016a00:	001c      	movs	r4, r3
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	9100      	str	r1, [sp, #0]
 8016a06:	002b      	movs	r3, r5
 8016a08:	4905      	ldr	r1, [pc, #20]	; (8016a20 <__assert_func+0x38>)
 8016a0a:	9402      	str	r4, [sp, #8]
 8016a0c:	f000 f80a 	bl	8016a24 <fiprintf>
 8016a10:	f000 faac 	bl	8016f6c <abort>
 8016a14:	200030d8 	.word	0x200030d8
 8016a18:	08018ccd 	.word	0x08018ccd
 8016a1c:	08018d08 	.word	0x08018d08
 8016a20:	08018cda 	.word	0x08018cda

08016a24 <fiprintf>:
 8016a24:	b40e      	push	{r1, r2, r3}
 8016a26:	b503      	push	{r0, r1, lr}
 8016a28:	0001      	movs	r1, r0
 8016a2a:	ab03      	add	r3, sp, #12
 8016a2c:	4804      	ldr	r0, [pc, #16]	; (8016a40 <fiprintf+0x1c>)
 8016a2e:	cb04      	ldmia	r3!, {r2}
 8016a30:	6800      	ldr	r0, [r0, #0]
 8016a32:	9301      	str	r3, [sp, #4]
 8016a34:	f000 f884 	bl	8016b40 <_vfiprintf_r>
 8016a38:	b002      	add	sp, #8
 8016a3a:	bc08      	pop	{r3}
 8016a3c:	b003      	add	sp, #12
 8016a3e:	4718      	bx	r3
 8016a40:	200030d8 	.word	0x200030d8

08016a44 <__retarget_lock_init_recursive>:
 8016a44:	4770      	bx	lr

08016a46 <__retarget_lock_acquire_recursive>:
 8016a46:	4770      	bx	lr

08016a48 <__retarget_lock_release_recursive>:
 8016a48:	4770      	bx	lr

08016a4a <__ascii_mbtowc>:
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	2900      	cmp	r1, #0
 8016a4e:	d100      	bne.n	8016a52 <__ascii_mbtowc+0x8>
 8016a50:	a901      	add	r1, sp, #4
 8016a52:	1e10      	subs	r0, r2, #0
 8016a54:	d006      	beq.n	8016a64 <__ascii_mbtowc+0x1a>
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d006      	beq.n	8016a68 <__ascii_mbtowc+0x1e>
 8016a5a:	7813      	ldrb	r3, [r2, #0]
 8016a5c:	600b      	str	r3, [r1, #0]
 8016a5e:	7810      	ldrb	r0, [r2, #0]
 8016a60:	1e43      	subs	r3, r0, #1
 8016a62:	4198      	sbcs	r0, r3
 8016a64:	b002      	add	sp, #8
 8016a66:	4770      	bx	lr
 8016a68:	2002      	movs	r0, #2
 8016a6a:	4240      	negs	r0, r0
 8016a6c:	e7fa      	b.n	8016a64 <__ascii_mbtowc+0x1a>

08016a6e <memmove>:
 8016a6e:	b510      	push	{r4, lr}
 8016a70:	4288      	cmp	r0, r1
 8016a72:	d902      	bls.n	8016a7a <memmove+0xc>
 8016a74:	188b      	adds	r3, r1, r2
 8016a76:	4298      	cmp	r0, r3
 8016a78:	d303      	bcc.n	8016a82 <memmove+0x14>
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	e007      	b.n	8016a8e <memmove+0x20>
 8016a7e:	5c8b      	ldrb	r3, [r1, r2]
 8016a80:	5483      	strb	r3, [r0, r2]
 8016a82:	3a01      	subs	r2, #1
 8016a84:	d2fb      	bcs.n	8016a7e <memmove+0x10>
 8016a86:	bd10      	pop	{r4, pc}
 8016a88:	5ccc      	ldrb	r4, [r1, r3]
 8016a8a:	54c4      	strb	r4, [r0, r3]
 8016a8c:	3301      	adds	r3, #1
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d1fa      	bne.n	8016a88 <memmove+0x1a>
 8016a92:	e7f8      	b.n	8016a86 <memmove+0x18>

08016a94 <_realloc_r>:
 8016a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a96:	0007      	movs	r7, r0
 8016a98:	000e      	movs	r6, r1
 8016a9a:	0014      	movs	r4, r2
 8016a9c:	2900      	cmp	r1, #0
 8016a9e:	d105      	bne.n	8016aac <_realloc_r+0x18>
 8016aa0:	0011      	movs	r1, r2
 8016aa2:	f7fd fe9b 	bl	80147dc <_malloc_r>
 8016aa6:	0005      	movs	r5, r0
 8016aa8:	0028      	movs	r0, r5
 8016aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016aac:	2a00      	cmp	r2, #0
 8016aae:	d103      	bne.n	8016ab8 <_realloc_r+0x24>
 8016ab0:	f7fd fe28 	bl	8014704 <_free_r>
 8016ab4:	0025      	movs	r5, r4
 8016ab6:	e7f7      	b.n	8016aa8 <_realloc_r+0x14>
 8016ab8:	f000 fc9a 	bl	80173f0 <_malloc_usable_size_r>
 8016abc:	9001      	str	r0, [sp, #4]
 8016abe:	4284      	cmp	r4, r0
 8016ac0:	d803      	bhi.n	8016aca <_realloc_r+0x36>
 8016ac2:	0035      	movs	r5, r6
 8016ac4:	0843      	lsrs	r3, r0, #1
 8016ac6:	42a3      	cmp	r3, r4
 8016ac8:	d3ee      	bcc.n	8016aa8 <_realloc_r+0x14>
 8016aca:	0021      	movs	r1, r4
 8016acc:	0038      	movs	r0, r7
 8016ace:	f7fd fe85 	bl	80147dc <_malloc_r>
 8016ad2:	1e05      	subs	r5, r0, #0
 8016ad4:	d0e8      	beq.n	8016aa8 <_realloc_r+0x14>
 8016ad6:	9b01      	ldr	r3, [sp, #4]
 8016ad8:	0022      	movs	r2, r4
 8016ada:	429c      	cmp	r4, r3
 8016adc:	d900      	bls.n	8016ae0 <_realloc_r+0x4c>
 8016ade:	001a      	movs	r2, r3
 8016ae0:	0031      	movs	r1, r6
 8016ae2:	0028      	movs	r0, r5
 8016ae4:	f7fd fdfc 	bl	80146e0 <memcpy>
 8016ae8:	0031      	movs	r1, r6
 8016aea:	0038      	movs	r0, r7
 8016aec:	f7fd fe0a 	bl	8014704 <_free_r>
 8016af0:	e7da      	b.n	8016aa8 <_realloc_r+0x14>

08016af2 <__sfputc_r>:
 8016af2:	6893      	ldr	r3, [r2, #8]
 8016af4:	b510      	push	{r4, lr}
 8016af6:	3b01      	subs	r3, #1
 8016af8:	6093      	str	r3, [r2, #8]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	da04      	bge.n	8016b08 <__sfputc_r+0x16>
 8016afe:	6994      	ldr	r4, [r2, #24]
 8016b00:	42a3      	cmp	r3, r4
 8016b02:	db07      	blt.n	8016b14 <__sfputc_r+0x22>
 8016b04:	290a      	cmp	r1, #10
 8016b06:	d005      	beq.n	8016b14 <__sfputc_r+0x22>
 8016b08:	6813      	ldr	r3, [r2, #0]
 8016b0a:	1c58      	adds	r0, r3, #1
 8016b0c:	6010      	str	r0, [r2, #0]
 8016b0e:	7019      	strb	r1, [r3, #0]
 8016b10:	0008      	movs	r0, r1
 8016b12:	bd10      	pop	{r4, pc}
 8016b14:	f000 f94e 	bl	8016db4 <__swbuf_r>
 8016b18:	0001      	movs	r1, r0
 8016b1a:	e7f9      	b.n	8016b10 <__sfputc_r+0x1e>

08016b1c <__sfputs_r>:
 8016b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b1e:	0006      	movs	r6, r0
 8016b20:	000f      	movs	r7, r1
 8016b22:	0014      	movs	r4, r2
 8016b24:	18d5      	adds	r5, r2, r3
 8016b26:	42ac      	cmp	r4, r5
 8016b28:	d101      	bne.n	8016b2e <__sfputs_r+0x12>
 8016b2a:	2000      	movs	r0, #0
 8016b2c:	e007      	b.n	8016b3e <__sfputs_r+0x22>
 8016b2e:	7821      	ldrb	r1, [r4, #0]
 8016b30:	003a      	movs	r2, r7
 8016b32:	0030      	movs	r0, r6
 8016b34:	f7ff ffdd 	bl	8016af2 <__sfputc_r>
 8016b38:	3401      	adds	r4, #1
 8016b3a:	1c43      	adds	r3, r0, #1
 8016b3c:	d1f3      	bne.n	8016b26 <__sfputs_r+0xa>
 8016b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b40 <_vfiprintf_r>:
 8016b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b42:	b0a1      	sub	sp, #132	; 0x84
 8016b44:	0006      	movs	r6, r0
 8016b46:	000c      	movs	r4, r1
 8016b48:	001f      	movs	r7, r3
 8016b4a:	9203      	str	r2, [sp, #12]
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	d004      	beq.n	8016b5a <_vfiprintf_r+0x1a>
 8016b50:	6983      	ldr	r3, [r0, #24]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d101      	bne.n	8016b5a <_vfiprintf_r+0x1a>
 8016b56:	f000 fb3f 	bl	80171d8 <__sinit>
 8016b5a:	4b8e      	ldr	r3, [pc, #568]	; (8016d94 <_vfiprintf_r+0x254>)
 8016b5c:	429c      	cmp	r4, r3
 8016b5e:	d11c      	bne.n	8016b9a <_vfiprintf_r+0x5a>
 8016b60:	6874      	ldr	r4, [r6, #4]
 8016b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b64:	07db      	lsls	r3, r3, #31
 8016b66:	d405      	bmi.n	8016b74 <_vfiprintf_r+0x34>
 8016b68:	89a3      	ldrh	r3, [r4, #12]
 8016b6a:	059b      	lsls	r3, r3, #22
 8016b6c:	d402      	bmi.n	8016b74 <_vfiprintf_r+0x34>
 8016b6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b70:	f7ff ff69 	bl	8016a46 <__retarget_lock_acquire_recursive>
 8016b74:	89a3      	ldrh	r3, [r4, #12]
 8016b76:	071b      	lsls	r3, r3, #28
 8016b78:	d502      	bpl.n	8016b80 <_vfiprintf_r+0x40>
 8016b7a:	6923      	ldr	r3, [r4, #16]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d11d      	bne.n	8016bbc <_vfiprintf_r+0x7c>
 8016b80:	0021      	movs	r1, r4
 8016b82:	0030      	movs	r0, r6
 8016b84:	f000 f97a 	bl	8016e7c <__swsetup_r>
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	d017      	beq.n	8016bbc <_vfiprintf_r+0x7c>
 8016b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b8e:	07db      	lsls	r3, r3, #31
 8016b90:	d50d      	bpl.n	8016bae <_vfiprintf_r+0x6e>
 8016b92:	2001      	movs	r0, #1
 8016b94:	4240      	negs	r0, r0
 8016b96:	b021      	add	sp, #132	; 0x84
 8016b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b9a:	4b7f      	ldr	r3, [pc, #508]	; (8016d98 <_vfiprintf_r+0x258>)
 8016b9c:	429c      	cmp	r4, r3
 8016b9e:	d101      	bne.n	8016ba4 <_vfiprintf_r+0x64>
 8016ba0:	68b4      	ldr	r4, [r6, #8]
 8016ba2:	e7de      	b.n	8016b62 <_vfiprintf_r+0x22>
 8016ba4:	4b7d      	ldr	r3, [pc, #500]	; (8016d9c <_vfiprintf_r+0x25c>)
 8016ba6:	429c      	cmp	r4, r3
 8016ba8:	d1db      	bne.n	8016b62 <_vfiprintf_r+0x22>
 8016baa:	68f4      	ldr	r4, [r6, #12]
 8016bac:	e7d9      	b.n	8016b62 <_vfiprintf_r+0x22>
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	059b      	lsls	r3, r3, #22
 8016bb2:	d4ee      	bmi.n	8016b92 <_vfiprintf_r+0x52>
 8016bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bb6:	f7ff ff47 	bl	8016a48 <__retarget_lock_release_recursive>
 8016bba:	e7ea      	b.n	8016b92 <_vfiprintf_r+0x52>
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	ad08      	add	r5, sp, #32
 8016bc0:	616b      	str	r3, [r5, #20]
 8016bc2:	3320      	adds	r3, #32
 8016bc4:	766b      	strb	r3, [r5, #25]
 8016bc6:	3310      	adds	r3, #16
 8016bc8:	76ab      	strb	r3, [r5, #26]
 8016bca:	9707      	str	r7, [sp, #28]
 8016bcc:	9f03      	ldr	r7, [sp, #12]
 8016bce:	783b      	ldrb	r3, [r7, #0]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d001      	beq.n	8016bd8 <_vfiprintf_r+0x98>
 8016bd4:	2b25      	cmp	r3, #37	; 0x25
 8016bd6:	d14e      	bne.n	8016c76 <_vfiprintf_r+0x136>
 8016bd8:	9b03      	ldr	r3, [sp, #12]
 8016bda:	1afb      	subs	r3, r7, r3
 8016bdc:	9305      	str	r3, [sp, #20]
 8016bde:	9b03      	ldr	r3, [sp, #12]
 8016be0:	429f      	cmp	r7, r3
 8016be2:	d00d      	beq.n	8016c00 <_vfiprintf_r+0xc0>
 8016be4:	9b05      	ldr	r3, [sp, #20]
 8016be6:	0021      	movs	r1, r4
 8016be8:	0030      	movs	r0, r6
 8016bea:	9a03      	ldr	r2, [sp, #12]
 8016bec:	f7ff ff96 	bl	8016b1c <__sfputs_r>
 8016bf0:	1c43      	adds	r3, r0, #1
 8016bf2:	d100      	bne.n	8016bf6 <_vfiprintf_r+0xb6>
 8016bf4:	e0b5      	b.n	8016d62 <_vfiprintf_r+0x222>
 8016bf6:	696a      	ldr	r2, [r5, #20]
 8016bf8:	9b05      	ldr	r3, [sp, #20]
 8016bfa:	4694      	mov	ip, r2
 8016bfc:	4463      	add	r3, ip
 8016bfe:	616b      	str	r3, [r5, #20]
 8016c00:	783b      	ldrb	r3, [r7, #0]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d100      	bne.n	8016c08 <_vfiprintf_r+0xc8>
 8016c06:	e0ac      	b.n	8016d62 <_vfiprintf_r+0x222>
 8016c08:	2201      	movs	r2, #1
 8016c0a:	1c7b      	adds	r3, r7, #1
 8016c0c:	9303      	str	r3, [sp, #12]
 8016c0e:	2300      	movs	r3, #0
 8016c10:	4252      	negs	r2, r2
 8016c12:	606a      	str	r2, [r5, #4]
 8016c14:	a904      	add	r1, sp, #16
 8016c16:	3254      	adds	r2, #84	; 0x54
 8016c18:	1852      	adds	r2, r2, r1
 8016c1a:	602b      	str	r3, [r5, #0]
 8016c1c:	60eb      	str	r3, [r5, #12]
 8016c1e:	60ab      	str	r3, [r5, #8]
 8016c20:	7013      	strb	r3, [r2, #0]
 8016c22:	65ab      	str	r3, [r5, #88]	; 0x58
 8016c24:	9b03      	ldr	r3, [sp, #12]
 8016c26:	2205      	movs	r2, #5
 8016c28:	7819      	ldrb	r1, [r3, #0]
 8016c2a:	485d      	ldr	r0, [pc, #372]	; (8016da0 <_vfiprintf_r+0x260>)
 8016c2c:	f7ff f996 	bl	8015f5c <memchr>
 8016c30:	9b03      	ldr	r3, [sp, #12]
 8016c32:	1c5f      	adds	r7, r3, #1
 8016c34:	2800      	cmp	r0, #0
 8016c36:	d120      	bne.n	8016c7a <_vfiprintf_r+0x13a>
 8016c38:	682a      	ldr	r2, [r5, #0]
 8016c3a:	06d3      	lsls	r3, r2, #27
 8016c3c:	d504      	bpl.n	8016c48 <_vfiprintf_r+0x108>
 8016c3e:	2353      	movs	r3, #83	; 0x53
 8016c40:	a904      	add	r1, sp, #16
 8016c42:	185b      	adds	r3, r3, r1
 8016c44:	2120      	movs	r1, #32
 8016c46:	7019      	strb	r1, [r3, #0]
 8016c48:	0713      	lsls	r3, r2, #28
 8016c4a:	d504      	bpl.n	8016c56 <_vfiprintf_r+0x116>
 8016c4c:	2353      	movs	r3, #83	; 0x53
 8016c4e:	a904      	add	r1, sp, #16
 8016c50:	185b      	adds	r3, r3, r1
 8016c52:	212b      	movs	r1, #43	; 0x2b
 8016c54:	7019      	strb	r1, [r3, #0]
 8016c56:	9b03      	ldr	r3, [sp, #12]
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8016c5c:	d016      	beq.n	8016c8c <_vfiprintf_r+0x14c>
 8016c5e:	2100      	movs	r1, #0
 8016c60:	68eb      	ldr	r3, [r5, #12]
 8016c62:	9f03      	ldr	r7, [sp, #12]
 8016c64:	783a      	ldrb	r2, [r7, #0]
 8016c66:	1c78      	adds	r0, r7, #1
 8016c68:	3a30      	subs	r2, #48	; 0x30
 8016c6a:	4684      	mov	ip, r0
 8016c6c:	2a09      	cmp	r2, #9
 8016c6e:	d94f      	bls.n	8016d10 <_vfiprintf_r+0x1d0>
 8016c70:	2900      	cmp	r1, #0
 8016c72:	d111      	bne.n	8016c98 <_vfiprintf_r+0x158>
 8016c74:	e017      	b.n	8016ca6 <_vfiprintf_r+0x166>
 8016c76:	3701      	adds	r7, #1
 8016c78:	e7a9      	b.n	8016bce <_vfiprintf_r+0x8e>
 8016c7a:	4b49      	ldr	r3, [pc, #292]	; (8016da0 <_vfiprintf_r+0x260>)
 8016c7c:	682a      	ldr	r2, [r5, #0]
 8016c7e:	1ac0      	subs	r0, r0, r3
 8016c80:	2301      	movs	r3, #1
 8016c82:	4083      	lsls	r3, r0
 8016c84:	4313      	orrs	r3, r2
 8016c86:	602b      	str	r3, [r5, #0]
 8016c88:	9703      	str	r7, [sp, #12]
 8016c8a:	e7cb      	b.n	8016c24 <_vfiprintf_r+0xe4>
 8016c8c:	9b07      	ldr	r3, [sp, #28]
 8016c8e:	1d19      	adds	r1, r3, #4
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	9107      	str	r1, [sp, #28]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	db01      	blt.n	8016c9c <_vfiprintf_r+0x15c>
 8016c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c9a:	e004      	b.n	8016ca6 <_vfiprintf_r+0x166>
 8016c9c:	425b      	negs	r3, r3
 8016c9e:	60eb      	str	r3, [r5, #12]
 8016ca0:	2302      	movs	r3, #2
 8016ca2:	4313      	orrs	r3, r2
 8016ca4:	602b      	str	r3, [r5, #0]
 8016ca6:	783b      	ldrb	r3, [r7, #0]
 8016ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8016caa:	d10a      	bne.n	8016cc2 <_vfiprintf_r+0x182>
 8016cac:	787b      	ldrb	r3, [r7, #1]
 8016cae:	2b2a      	cmp	r3, #42	; 0x2a
 8016cb0:	d137      	bne.n	8016d22 <_vfiprintf_r+0x1e2>
 8016cb2:	9b07      	ldr	r3, [sp, #28]
 8016cb4:	3702      	adds	r7, #2
 8016cb6:	1d1a      	adds	r2, r3, #4
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	9207      	str	r2, [sp, #28]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	db2d      	blt.n	8016d1c <_vfiprintf_r+0x1dc>
 8016cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8016cc2:	2203      	movs	r2, #3
 8016cc4:	7839      	ldrb	r1, [r7, #0]
 8016cc6:	4837      	ldr	r0, [pc, #220]	; (8016da4 <_vfiprintf_r+0x264>)
 8016cc8:	f7ff f948 	bl	8015f5c <memchr>
 8016ccc:	2800      	cmp	r0, #0
 8016cce:	d007      	beq.n	8016ce0 <_vfiprintf_r+0x1a0>
 8016cd0:	4b34      	ldr	r3, [pc, #208]	; (8016da4 <_vfiprintf_r+0x264>)
 8016cd2:	682a      	ldr	r2, [r5, #0]
 8016cd4:	1ac0      	subs	r0, r0, r3
 8016cd6:	2340      	movs	r3, #64	; 0x40
 8016cd8:	4083      	lsls	r3, r0
 8016cda:	4313      	orrs	r3, r2
 8016cdc:	3701      	adds	r7, #1
 8016cde:	602b      	str	r3, [r5, #0]
 8016ce0:	7839      	ldrb	r1, [r7, #0]
 8016ce2:	1c7b      	adds	r3, r7, #1
 8016ce4:	2206      	movs	r2, #6
 8016ce6:	4830      	ldr	r0, [pc, #192]	; (8016da8 <_vfiprintf_r+0x268>)
 8016ce8:	9303      	str	r3, [sp, #12]
 8016cea:	7629      	strb	r1, [r5, #24]
 8016cec:	f7ff f936 	bl	8015f5c <memchr>
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d045      	beq.n	8016d80 <_vfiprintf_r+0x240>
 8016cf4:	4b2d      	ldr	r3, [pc, #180]	; (8016dac <_vfiprintf_r+0x26c>)
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d127      	bne.n	8016d4a <_vfiprintf_r+0x20a>
 8016cfa:	2207      	movs	r2, #7
 8016cfc:	9b07      	ldr	r3, [sp, #28]
 8016cfe:	3307      	adds	r3, #7
 8016d00:	4393      	bics	r3, r2
 8016d02:	3308      	adds	r3, #8
 8016d04:	9307      	str	r3, [sp, #28]
 8016d06:	696b      	ldr	r3, [r5, #20]
 8016d08:	9a04      	ldr	r2, [sp, #16]
 8016d0a:	189b      	adds	r3, r3, r2
 8016d0c:	616b      	str	r3, [r5, #20]
 8016d0e:	e75d      	b.n	8016bcc <_vfiprintf_r+0x8c>
 8016d10:	210a      	movs	r1, #10
 8016d12:	434b      	muls	r3, r1
 8016d14:	4667      	mov	r7, ip
 8016d16:	189b      	adds	r3, r3, r2
 8016d18:	3909      	subs	r1, #9
 8016d1a:	e7a3      	b.n	8016c64 <_vfiprintf_r+0x124>
 8016d1c:	2301      	movs	r3, #1
 8016d1e:	425b      	negs	r3, r3
 8016d20:	e7ce      	b.n	8016cc0 <_vfiprintf_r+0x180>
 8016d22:	2300      	movs	r3, #0
 8016d24:	001a      	movs	r2, r3
 8016d26:	3701      	adds	r7, #1
 8016d28:	606b      	str	r3, [r5, #4]
 8016d2a:	7839      	ldrb	r1, [r7, #0]
 8016d2c:	1c78      	adds	r0, r7, #1
 8016d2e:	3930      	subs	r1, #48	; 0x30
 8016d30:	4684      	mov	ip, r0
 8016d32:	2909      	cmp	r1, #9
 8016d34:	d903      	bls.n	8016d3e <_vfiprintf_r+0x1fe>
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d0c3      	beq.n	8016cc2 <_vfiprintf_r+0x182>
 8016d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8016d3c:	e7c1      	b.n	8016cc2 <_vfiprintf_r+0x182>
 8016d3e:	230a      	movs	r3, #10
 8016d40:	435a      	muls	r2, r3
 8016d42:	4667      	mov	r7, ip
 8016d44:	1852      	adds	r2, r2, r1
 8016d46:	3b09      	subs	r3, #9
 8016d48:	e7ef      	b.n	8016d2a <_vfiprintf_r+0x1ea>
 8016d4a:	ab07      	add	r3, sp, #28
 8016d4c:	9300      	str	r3, [sp, #0]
 8016d4e:	0022      	movs	r2, r4
 8016d50:	0029      	movs	r1, r5
 8016d52:	0030      	movs	r0, r6
 8016d54:	4b16      	ldr	r3, [pc, #88]	; (8016db0 <_vfiprintf_r+0x270>)
 8016d56:	f7fd fe61 	bl	8014a1c <_printf_float>
 8016d5a:	9004      	str	r0, [sp, #16]
 8016d5c:	9b04      	ldr	r3, [sp, #16]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	d1d1      	bne.n	8016d06 <_vfiprintf_r+0x1c6>
 8016d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d64:	07db      	lsls	r3, r3, #31
 8016d66:	d405      	bmi.n	8016d74 <_vfiprintf_r+0x234>
 8016d68:	89a3      	ldrh	r3, [r4, #12]
 8016d6a:	059b      	lsls	r3, r3, #22
 8016d6c:	d402      	bmi.n	8016d74 <_vfiprintf_r+0x234>
 8016d6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d70:	f7ff fe6a 	bl	8016a48 <__retarget_lock_release_recursive>
 8016d74:	89a3      	ldrh	r3, [r4, #12]
 8016d76:	065b      	lsls	r3, r3, #25
 8016d78:	d500      	bpl.n	8016d7c <_vfiprintf_r+0x23c>
 8016d7a:	e70a      	b.n	8016b92 <_vfiprintf_r+0x52>
 8016d7c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016d7e:	e70a      	b.n	8016b96 <_vfiprintf_r+0x56>
 8016d80:	ab07      	add	r3, sp, #28
 8016d82:	9300      	str	r3, [sp, #0]
 8016d84:	0022      	movs	r2, r4
 8016d86:	0029      	movs	r1, r5
 8016d88:	0030      	movs	r0, r6
 8016d8a:	4b09      	ldr	r3, [pc, #36]	; (8016db0 <_vfiprintf_r+0x270>)
 8016d8c:	f7fe f8f8 	bl	8014f80 <_printf_i>
 8016d90:	e7e3      	b.n	8016d5a <_vfiprintf_r+0x21a>
 8016d92:	46c0      	nop			; (mov r8, r8)
 8016d94:	08018e34 	.word	0x08018e34
 8016d98:	08018e54 	.word	0x08018e54
 8016d9c:	08018e14 	.word	0x08018e14
 8016da0:	08018cbc 	.word	0x08018cbc
 8016da4:	08018cc2 	.word	0x08018cc2
 8016da8:	08018cc6 	.word	0x08018cc6
 8016dac:	08014a1d 	.word	0x08014a1d
 8016db0:	08016b1d 	.word	0x08016b1d

08016db4 <__swbuf_r>:
 8016db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db6:	0005      	movs	r5, r0
 8016db8:	000e      	movs	r6, r1
 8016dba:	0014      	movs	r4, r2
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	d004      	beq.n	8016dca <__swbuf_r+0x16>
 8016dc0:	6983      	ldr	r3, [r0, #24]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d101      	bne.n	8016dca <__swbuf_r+0x16>
 8016dc6:	f000 fa07 	bl	80171d8 <__sinit>
 8016dca:	4b22      	ldr	r3, [pc, #136]	; (8016e54 <__swbuf_r+0xa0>)
 8016dcc:	429c      	cmp	r4, r3
 8016dce:	d12e      	bne.n	8016e2e <__swbuf_r+0x7a>
 8016dd0:	686c      	ldr	r4, [r5, #4]
 8016dd2:	69a3      	ldr	r3, [r4, #24]
 8016dd4:	60a3      	str	r3, [r4, #8]
 8016dd6:	89a3      	ldrh	r3, [r4, #12]
 8016dd8:	071b      	lsls	r3, r3, #28
 8016dda:	d532      	bpl.n	8016e42 <__swbuf_r+0x8e>
 8016ddc:	6923      	ldr	r3, [r4, #16]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d02f      	beq.n	8016e42 <__swbuf_r+0x8e>
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	6922      	ldr	r2, [r4, #16]
 8016de6:	b2f7      	uxtb	r7, r6
 8016de8:	1a98      	subs	r0, r3, r2
 8016dea:	6963      	ldr	r3, [r4, #20]
 8016dec:	b2f6      	uxtb	r6, r6
 8016dee:	4283      	cmp	r3, r0
 8016df0:	dc05      	bgt.n	8016dfe <__swbuf_r+0x4a>
 8016df2:	0021      	movs	r1, r4
 8016df4:	0028      	movs	r0, r5
 8016df6:	f000 f94d 	bl	8017094 <_fflush_r>
 8016dfa:	2800      	cmp	r0, #0
 8016dfc:	d127      	bne.n	8016e4e <__swbuf_r+0x9a>
 8016dfe:	68a3      	ldr	r3, [r4, #8]
 8016e00:	3001      	adds	r0, #1
 8016e02:	3b01      	subs	r3, #1
 8016e04:	60a3      	str	r3, [r4, #8]
 8016e06:	6823      	ldr	r3, [r4, #0]
 8016e08:	1c5a      	adds	r2, r3, #1
 8016e0a:	6022      	str	r2, [r4, #0]
 8016e0c:	701f      	strb	r7, [r3, #0]
 8016e0e:	6963      	ldr	r3, [r4, #20]
 8016e10:	4283      	cmp	r3, r0
 8016e12:	d004      	beq.n	8016e1e <__swbuf_r+0x6a>
 8016e14:	89a3      	ldrh	r3, [r4, #12]
 8016e16:	07db      	lsls	r3, r3, #31
 8016e18:	d507      	bpl.n	8016e2a <__swbuf_r+0x76>
 8016e1a:	2e0a      	cmp	r6, #10
 8016e1c:	d105      	bne.n	8016e2a <__swbuf_r+0x76>
 8016e1e:	0021      	movs	r1, r4
 8016e20:	0028      	movs	r0, r5
 8016e22:	f000 f937 	bl	8017094 <_fflush_r>
 8016e26:	2800      	cmp	r0, #0
 8016e28:	d111      	bne.n	8016e4e <__swbuf_r+0x9a>
 8016e2a:	0030      	movs	r0, r6
 8016e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e2e:	4b0a      	ldr	r3, [pc, #40]	; (8016e58 <__swbuf_r+0xa4>)
 8016e30:	429c      	cmp	r4, r3
 8016e32:	d101      	bne.n	8016e38 <__swbuf_r+0x84>
 8016e34:	68ac      	ldr	r4, [r5, #8]
 8016e36:	e7cc      	b.n	8016dd2 <__swbuf_r+0x1e>
 8016e38:	4b08      	ldr	r3, [pc, #32]	; (8016e5c <__swbuf_r+0xa8>)
 8016e3a:	429c      	cmp	r4, r3
 8016e3c:	d1c9      	bne.n	8016dd2 <__swbuf_r+0x1e>
 8016e3e:	68ec      	ldr	r4, [r5, #12]
 8016e40:	e7c7      	b.n	8016dd2 <__swbuf_r+0x1e>
 8016e42:	0021      	movs	r1, r4
 8016e44:	0028      	movs	r0, r5
 8016e46:	f000 f819 	bl	8016e7c <__swsetup_r>
 8016e4a:	2800      	cmp	r0, #0
 8016e4c:	d0c9      	beq.n	8016de2 <__swbuf_r+0x2e>
 8016e4e:	2601      	movs	r6, #1
 8016e50:	4276      	negs	r6, r6
 8016e52:	e7ea      	b.n	8016e2a <__swbuf_r+0x76>
 8016e54:	08018e34 	.word	0x08018e34
 8016e58:	08018e54 	.word	0x08018e54
 8016e5c:	08018e14 	.word	0x08018e14

08016e60 <__ascii_wctomb>:
 8016e60:	0003      	movs	r3, r0
 8016e62:	1e08      	subs	r0, r1, #0
 8016e64:	d005      	beq.n	8016e72 <__ascii_wctomb+0x12>
 8016e66:	2aff      	cmp	r2, #255	; 0xff
 8016e68:	d904      	bls.n	8016e74 <__ascii_wctomb+0x14>
 8016e6a:	228a      	movs	r2, #138	; 0x8a
 8016e6c:	2001      	movs	r0, #1
 8016e6e:	601a      	str	r2, [r3, #0]
 8016e70:	4240      	negs	r0, r0
 8016e72:	4770      	bx	lr
 8016e74:	2001      	movs	r0, #1
 8016e76:	700a      	strb	r2, [r1, #0]
 8016e78:	e7fb      	b.n	8016e72 <__ascii_wctomb+0x12>
	...

08016e7c <__swsetup_r>:
 8016e7c:	4b37      	ldr	r3, [pc, #220]	; (8016f5c <__swsetup_r+0xe0>)
 8016e7e:	b570      	push	{r4, r5, r6, lr}
 8016e80:	681d      	ldr	r5, [r3, #0]
 8016e82:	0006      	movs	r6, r0
 8016e84:	000c      	movs	r4, r1
 8016e86:	2d00      	cmp	r5, #0
 8016e88:	d005      	beq.n	8016e96 <__swsetup_r+0x1a>
 8016e8a:	69ab      	ldr	r3, [r5, #24]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d102      	bne.n	8016e96 <__swsetup_r+0x1a>
 8016e90:	0028      	movs	r0, r5
 8016e92:	f000 f9a1 	bl	80171d8 <__sinit>
 8016e96:	4b32      	ldr	r3, [pc, #200]	; (8016f60 <__swsetup_r+0xe4>)
 8016e98:	429c      	cmp	r4, r3
 8016e9a:	d10f      	bne.n	8016ebc <__swsetup_r+0x40>
 8016e9c:	686c      	ldr	r4, [r5, #4]
 8016e9e:	230c      	movs	r3, #12
 8016ea0:	5ee2      	ldrsh	r2, [r4, r3]
 8016ea2:	b293      	uxth	r3, r2
 8016ea4:	0711      	lsls	r1, r2, #28
 8016ea6:	d42d      	bmi.n	8016f04 <__swsetup_r+0x88>
 8016ea8:	06d9      	lsls	r1, r3, #27
 8016eaa:	d411      	bmi.n	8016ed0 <__swsetup_r+0x54>
 8016eac:	2309      	movs	r3, #9
 8016eae:	2001      	movs	r0, #1
 8016eb0:	6033      	str	r3, [r6, #0]
 8016eb2:	3337      	adds	r3, #55	; 0x37
 8016eb4:	4313      	orrs	r3, r2
 8016eb6:	81a3      	strh	r3, [r4, #12]
 8016eb8:	4240      	negs	r0, r0
 8016eba:	bd70      	pop	{r4, r5, r6, pc}
 8016ebc:	4b29      	ldr	r3, [pc, #164]	; (8016f64 <__swsetup_r+0xe8>)
 8016ebe:	429c      	cmp	r4, r3
 8016ec0:	d101      	bne.n	8016ec6 <__swsetup_r+0x4a>
 8016ec2:	68ac      	ldr	r4, [r5, #8]
 8016ec4:	e7eb      	b.n	8016e9e <__swsetup_r+0x22>
 8016ec6:	4b28      	ldr	r3, [pc, #160]	; (8016f68 <__swsetup_r+0xec>)
 8016ec8:	429c      	cmp	r4, r3
 8016eca:	d1e8      	bne.n	8016e9e <__swsetup_r+0x22>
 8016ecc:	68ec      	ldr	r4, [r5, #12]
 8016ece:	e7e6      	b.n	8016e9e <__swsetup_r+0x22>
 8016ed0:	075b      	lsls	r3, r3, #29
 8016ed2:	d513      	bpl.n	8016efc <__swsetup_r+0x80>
 8016ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ed6:	2900      	cmp	r1, #0
 8016ed8:	d008      	beq.n	8016eec <__swsetup_r+0x70>
 8016eda:	0023      	movs	r3, r4
 8016edc:	3344      	adds	r3, #68	; 0x44
 8016ede:	4299      	cmp	r1, r3
 8016ee0:	d002      	beq.n	8016ee8 <__swsetup_r+0x6c>
 8016ee2:	0030      	movs	r0, r6
 8016ee4:	f7fd fc0e 	bl	8014704 <_free_r>
 8016ee8:	2300      	movs	r3, #0
 8016eea:	6363      	str	r3, [r4, #52]	; 0x34
 8016eec:	2224      	movs	r2, #36	; 0x24
 8016eee:	89a3      	ldrh	r3, [r4, #12]
 8016ef0:	4393      	bics	r3, r2
 8016ef2:	81a3      	strh	r3, [r4, #12]
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	6063      	str	r3, [r4, #4]
 8016ef8:	6923      	ldr	r3, [r4, #16]
 8016efa:	6023      	str	r3, [r4, #0]
 8016efc:	2308      	movs	r3, #8
 8016efe:	89a2      	ldrh	r2, [r4, #12]
 8016f00:	4313      	orrs	r3, r2
 8016f02:	81a3      	strh	r3, [r4, #12]
 8016f04:	6923      	ldr	r3, [r4, #16]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d10b      	bne.n	8016f22 <__swsetup_r+0xa6>
 8016f0a:	21a0      	movs	r1, #160	; 0xa0
 8016f0c:	2280      	movs	r2, #128	; 0x80
 8016f0e:	89a3      	ldrh	r3, [r4, #12]
 8016f10:	0089      	lsls	r1, r1, #2
 8016f12:	0092      	lsls	r2, r2, #2
 8016f14:	400b      	ands	r3, r1
 8016f16:	4293      	cmp	r3, r2
 8016f18:	d003      	beq.n	8016f22 <__swsetup_r+0xa6>
 8016f1a:	0021      	movs	r1, r4
 8016f1c:	0030      	movs	r0, r6
 8016f1e:	f000 fa23 	bl	8017368 <__smakebuf_r>
 8016f22:	220c      	movs	r2, #12
 8016f24:	5ea3      	ldrsh	r3, [r4, r2]
 8016f26:	2001      	movs	r0, #1
 8016f28:	001a      	movs	r2, r3
 8016f2a:	b299      	uxth	r1, r3
 8016f2c:	4002      	ands	r2, r0
 8016f2e:	4203      	tst	r3, r0
 8016f30:	d00f      	beq.n	8016f52 <__swsetup_r+0xd6>
 8016f32:	2200      	movs	r2, #0
 8016f34:	60a2      	str	r2, [r4, #8]
 8016f36:	6962      	ldr	r2, [r4, #20]
 8016f38:	4252      	negs	r2, r2
 8016f3a:	61a2      	str	r2, [r4, #24]
 8016f3c:	2000      	movs	r0, #0
 8016f3e:	6922      	ldr	r2, [r4, #16]
 8016f40:	4282      	cmp	r2, r0
 8016f42:	d1ba      	bne.n	8016eba <__swsetup_r+0x3e>
 8016f44:	060a      	lsls	r2, r1, #24
 8016f46:	d5b8      	bpl.n	8016eba <__swsetup_r+0x3e>
 8016f48:	2240      	movs	r2, #64	; 0x40
 8016f4a:	4313      	orrs	r3, r2
 8016f4c:	81a3      	strh	r3, [r4, #12]
 8016f4e:	3801      	subs	r0, #1
 8016f50:	e7b3      	b.n	8016eba <__swsetup_r+0x3e>
 8016f52:	0788      	lsls	r0, r1, #30
 8016f54:	d400      	bmi.n	8016f58 <__swsetup_r+0xdc>
 8016f56:	6962      	ldr	r2, [r4, #20]
 8016f58:	60a2      	str	r2, [r4, #8]
 8016f5a:	e7ef      	b.n	8016f3c <__swsetup_r+0xc0>
 8016f5c:	200030d8 	.word	0x200030d8
 8016f60:	08018e34 	.word	0x08018e34
 8016f64:	08018e54 	.word	0x08018e54
 8016f68:	08018e14 	.word	0x08018e14

08016f6c <abort>:
 8016f6c:	2006      	movs	r0, #6
 8016f6e:	b510      	push	{r4, lr}
 8016f70:	f000 fa70 	bl	8017454 <raise>
 8016f74:	2001      	movs	r0, #1
 8016f76:	f7ec feab 	bl	8003cd0 <_exit>
	...

08016f7c <__sflush_r>:
 8016f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f7e:	898b      	ldrh	r3, [r1, #12]
 8016f80:	0005      	movs	r5, r0
 8016f82:	000c      	movs	r4, r1
 8016f84:	071a      	lsls	r2, r3, #28
 8016f86:	d45f      	bmi.n	8017048 <__sflush_r+0xcc>
 8016f88:	684a      	ldr	r2, [r1, #4]
 8016f8a:	2a00      	cmp	r2, #0
 8016f8c:	dc04      	bgt.n	8016f98 <__sflush_r+0x1c>
 8016f8e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8016f90:	2a00      	cmp	r2, #0
 8016f92:	dc01      	bgt.n	8016f98 <__sflush_r+0x1c>
 8016f94:	2000      	movs	r0, #0
 8016f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016f9a:	2f00      	cmp	r7, #0
 8016f9c:	d0fa      	beq.n	8016f94 <__sflush_r+0x18>
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	2180      	movs	r1, #128	; 0x80
 8016fa2:	682e      	ldr	r6, [r5, #0]
 8016fa4:	602a      	str	r2, [r5, #0]
 8016fa6:	001a      	movs	r2, r3
 8016fa8:	0149      	lsls	r1, r1, #5
 8016faa:	400a      	ands	r2, r1
 8016fac:	420b      	tst	r3, r1
 8016fae:	d034      	beq.n	801701a <__sflush_r+0x9e>
 8016fb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016fb2:	89a3      	ldrh	r3, [r4, #12]
 8016fb4:	075b      	lsls	r3, r3, #29
 8016fb6:	d506      	bpl.n	8016fc6 <__sflush_r+0x4a>
 8016fb8:	6863      	ldr	r3, [r4, #4]
 8016fba:	1ac0      	subs	r0, r0, r3
 8016fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d001      	beq.n	8016fc6 <__sflush_r+0x4a>
 8016fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016fc4:	1ac0      	subs	r0, r0, r3
 8016fc6:	0002      	movs	r2, r0
 8016fc8:	6a21      	ldr	r1, [r4, #32]
 8016fca:	2300      	movs	r3, #0
 8016fcc:	0028      	movs	r0, r5
 8016fce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016fd0:	47b8      	blx	r7
 8016fd2:	89a1      	ldrh	r1, [r4, #12]
 8016fd4:	1c43      	adds	r3, r0, #1
 8016fd6:	d106      	bne.n	8016fe6 <__sflush_r+0x6a>
 8016fd8:	682b      	ldr	r3, [r5, #0]
 8016fda:	2b1d      	cmp	r3, #29
 8016fdc:	d831      	bhi.n	8017042 <__sflush_r+0xc6>
 8016fde:	4a2c      	ldr	r2, [pc, #176]	; (8017090 <__sflush_r+0x114>)
 8016fe0:	40da      	lsrs	r2, r3
 8016fe2:	07d3      	lsls	r3, r2, #31
 8016fe4:	d52d      	bpl.n	8017042 <__sflush_r+0xc6>
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	6063      	str	r3, [r4, #4]
 8016fea:	6923      	ldr	r3, [r4, #16]
 8016fec:	6023      	str	r3, [r4, #0]
 8016fee:	04cb      	lsls	r3, r1, #19
 8016ff0:	d505      	bpl.n	8016ffe <__sflush_r+0x82>
 8016ff2:	1c43      	adds	r3, r0, #1
 8016ff4:	d102      	bne.n	8016ffc <__sflush_r+0x80>
 8016ff6:	682b      	ldr	r3, [r5, #0]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d100      	bne.n	8016ffe <__sflush_r+0x82>
 8016ffc:	6560      	str	r0, [r4, #84]	; 0x54
 8016ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017000:	602e      	str	r6, [r5, #0]
 8017002:	2900      	cmp	r1, #0
 8017004:	d0c6      	beq.n	8016f94 <__sflush_r+0x18>
 8017006:	0023      	movs	r3, r4
 8017008:	3344      	adds	r3, #68	; 0x44
 801700a:	4299      	cmp	r1, r3
 801700c:	d002      	beq.n	8017014 <__sflush_r+0x98>
 801700e:	0028      	movs	r0, r5
 8017010:	f7fd fb78 	bl	8014704 <_free_r>
 8017014:	2000      	movs	r0, #0
 8017016:	6360      	str	r0, [r4, #52]	; 0x34
 8017018:	e7bd      	b.n	8016f96 <__sflush_r+0x1a>
 801701a:	2301      	movs	r3, #1
 801701c:	0028      	movs	r0, r5
 801701e:	6a21      	ldr	r1, [r4, #32]
 8017020:	47b8      	blx	r7
 8017022:	1c43      	adds	r3, r0, #1
 8017024:	d1c5      	bne.n	8016fb2 <__sflush_r+0x36>
 8017026:	682b      	ldr	r3, [r5, #0]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d0c2      	beq.n	8016fb2 <__sflush_r+0x36>
 801702c:	2b1d      	cmp	r3, #29
 801702e:	d001      	beq.n	8017034 <__sflush_r+0xb8>
 8017030:	2b16      	cmp	r3, #22
 8017032:	d101      	bne.n	8017038 <__sflush_r+0xbc>
 8017034:	602e      	str	r6, [r5, #0]
 8017036:	e7ad      	b.n	8016f94 <__sflush_r+0x18>
 8017038:	2340      	movs	r3, #64	; 0x40
 801703a:	89a2      	ldrh	r2, [r4, #12]
 801703c:	4313      	orrs	r3, r2
 801703e:	81a3      	strh	r3, [r4, #12]
 8017040:	e7a9      	b.n	8016f96 <__sflush_r+0x1a>
 8017042:	2340      	movs	r3, #64	; 0x40
 8017044:	430b      	orrs	r3, r1
 8017046:	e7fa      	b.n	801703e <__sflush_r+0xc2>
 8017048:	690f      	ldr	r7, [r1, #16]
 801704a:	2f00      	cmp	r7, #0
 801704c:	d0a2      	beq.n	8016f94 <__sflush_r+0x18>
 801704e:	680a      	ldr	r2, [r1, #0]
 8017050:	600f      	str	r7, [r1, #0]
 8017052:	1bd2      	subs	r2, r2, r7
 8017054:	9201      	str	r2, [sp, #4]
 8017056:	2200      	movs	r2, #0
 8017058:	079b      	lsls	r3, r3, #30
 801705a:	d100      	bne.n	801705e <__sflush_r+0xe2>
 801705c:	694a      	ldr	r2, [r1, #20]
 801705e:	60a2      	str	r2, [r4, #8]
 8017060:	9b01      	ldr	r3, [sp, #4]
 8017062:	2b00      	cmp	r3, #0
 8017064:	dc00      	bgt.n	8017068 <__sflush_r+0xec>
 8017066:	e795      	b.n	8016f94 <__sflush_r+0x18>
 8017068:	003a      	movs	r2, r7
 801706a:	0028      	movs	r0, r5
 801706c:	9b01      	ldr	r3, [sp, #4]
 801706e:	6a21      	ldr	r1, [r4, #32]
 8017070:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017072:	47b0      	blx	r6
 8017074:	2800      	cmp	r0, #0
 8017076:	dc06      	bgt.n	8017086 <__sflush_r+0x10a>
 8017078:	2340      	movs	r3, #64	; 0x40
 801707a:	2001      	movs	r0, #1
 801707c:	89a2      	ldrh	r2, [r4, #12]
 801707e:	4240      	negs	r0, r0
 8017080:	4313      	orrs	r3, r2
 8017082:	81a3      	strh	r3, [r4, #12]
 8017084:	e787      	b.n	8016f96 <__sflush_r+0x1a>
 8017086:	9b01      	ldr	r3, [sp, #4]
 8017088:	183f      	adds	r7, r7, r0
 801708a:	1a1b      	subs	r3, r3, r0
 801708c:	9301      	str	r3, [sp, #4]
 801708e:	e7e7      	b.n	8017060 <__sflush_r+0xe4>
 8017090:	20400001 	.word	0x20400001

08017094 <_fflush_r>:
 8017094:	690b      	ldr	r3, [r1, #16]
 8017096:	b570      	push	{r4, r5, r6, lr}
 8017098:	0005      	movs	r5, r0
 801709a:	000c      	movs	r4, r1
 801709c:	2b00      	cmp	r3, #0
 801709e:	d102      	bne.n	80170a6 <_fflush_r+0x12>
 80170a0:	2500      	movs	r5, #0
 80170a2:	0028      	movs	r0, r5
 80170a4:	bd70      	pop	{r4, r5, r6, pc}
 80170a6:	2800      	cmp	r0, #0
 80170a8:	d004      	beq.n	80170b4 <_fflush_r+0x20>
 80170aa:	6983      	ldr	r3, [r0, #24]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d101      	bne.n	80170b4 <_fflush_r+0x20>
 80170b0:	f000 f892 	bl	80171d8 <__sinit>
 80170b4:	4b14      	ldr	r3, [pc, #80]	; (8017108 <_fflush_r+0x74>)
 80170b6:	429c      	cmp	r4, r3
 80170b8:	d11b      	bne.n	80170f2 <_fflush_r+0x5e>
 80170ba:	686c      	ldr	r4, [r5, #4]
 80170bc:	220c      	movs	r2, #12
 80170be:	5ea3      	ldrsh	r3, [r4, r2]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d0ed      	beq.n	80170a0 <_fflush_r+0xc>
 80170c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80170c6:	07d2      	lsls	r2, r2, #31
 80170c8:	d404      	bmi.n	80170d4 <_fflush_r+0x40>
 80170ca:	059b      	lsls	r3, r3, #22
 80170cc:	d402      	bmi.n	80170d4 <_fflush_r+0x40>
 80170ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170d0:	f7ff fcb9 	bl	8016a46 <__retarget_lock_acquire_recursive>
 80170d4:	0028      	movs	r0, r5
 80170d6:	0021      	movs	r1, r4
 80170d8:	f7ff ff50 	bl	8016f7c <__sflush_r>
 80170dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80170de:	0005      	movs	r5, r0
 80170e0:	07db      	lsls	r3, r3, #31
 80170e2:	d4de      	bmi.n	80170a2 <_fflush_r+0xe>
 80170e4:	89a3      	ldrh	r3, [r4, #12]
 80170e6:	059b      	lsls	r3, r3, #22
 80170e8:	d4db      	bmi.n	80170a2 <_fflush_r+0xe>
 80170ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170ec:	f7ff fcac 	bl	8016a48 <__retarget_lock_release_recursive>
 80170f0:	e7d7      	b.n	80170a2 <_fflush_r+0xe>
 80170f2:	4b06      	ldr	r3, [pc, #24]	; (801710c <_fflush_r+0x78>)
 80170f4:	429c      	cmp	r4, r3
 80170f6:	d101      	bne.n	80170fc <_fflush_r+0x68>
 80170f8:	68ac      	ldr	r4, [r5, #8]
 80170fa:	e7df      	b.n	80170bc <_fflush_r+0x28>
 80170fc:	4b04      	ldr	r3, [pc, #16]	; (8017110 <_fflush_r+0x7c>)
 80170fe:	429c      	cmp	r4, r3
 8017100:	d1dc      	bne.n	80170bc <_fflush_r+0x28>
 8017102:	68ec      	ldr	r4, [r5, #12]
 8017104:	e7da      	b.n	80170bc <_fflush_r+0x28>
 8017106:	46c0      	nop			; (mov r8, r8)
 8017108:	08018e34 	.word	0x08018e34
 801710c:	08018e54 	.word	0x08018e54
 8017110:	08018e14 	.word	0x08018e14

08017114 <std>:
 8017114:	2300      	movs	r3, #0
 8017116:	b510      	push	{r4, lr}
 8017118:	0004      	movs	r4, r0
 801711a:	6003      	str	r3, [r0, #0]
 801711c:	6043      	str	r3, [r0, #4]
 801711e:	6083      	str	r3, [r0, #8]
 8017120:	8181      	strh	r1, [r0, #12]
 8017122:	6643      	str	r3, [r0, #100]	; 0x64
 8017124:	0019      	movs	r1, r3
 8017126:	81c2      	strh	r2, [r0, #14]
 8017128:	6103      	str	r3, [r0, #16]
 801712a:	6143      	str	r3, [r0, #20]
 801712c:	6183      	str	r3, [r0, #24]
 801712e:	2208      	movs	r2, #8
 8017130:	305c      	adds	r0, #92	; 0x5c
 8017132:	f7fd fade 	bl	80146f2 <memset>
 8017136:	4b05      	ldr	r3, [pc, #20]	; (801714c <std+0x38>)
 8017138:	6224      	str	r4, [r4, #32]
 801713a:	6263      	str	r3, [r4, #36]	; 0x24
 801713c:	4b04      	ldr	r3, [pc, #16]	; (8017150 <std+0x3c>)
 801713e:	62a3      	str	r3, [r4, #40]	; 0x28
 8017140:	4b04      	ldr	r3, [pc, #16]	; (8017154 <std+0x40>)
 8017142:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017144:	4b04      	ldr	r3, [pc, #16]	; (8017158 <std+0x44>)
 8017146:	6323      	str	r3, [r4, #48]	; 0x30
 8017148:	bd10      	pop	{r4, pc}
 801714a:	46c0      	nop			; (mov r8, r8)
 801714c:	08017495 	.word	0x08017495
 8017150:	080174bd 	.word	0x080174bd
 8017154:	080174f5 	.word	0x080174f5
 8017158:	08017521 	.word	0x08017521

0801715c <_cleanup_r>:
 801715c:	b510      	push	{r4, lr}
 801715e:	4902      	ldr	r1, [pc, #8]	; (8017168 <_cleanup_r+0xc>)
 8017160:	f000 f8ba 	bl	80172d8 <_fwalk_reent>
 8017164:	bd10      	pop	{r4, pc}
 8017166:	46c0      	nop			; (mov r8, r8)
 8017168:	08017095 	.word	0x08017095

0801716c <__sfmoreglue>:
 801716c:	b570      	push	{r4, r5, r6, lr}
 801716e:	2568      	movs	r5, #104	; 0x68
 8017170:	1e4a      	subs	r2, r1, #1
 8017172:	4355      	muls	r5, r2
 8017174:	000e      	movs	r6, r1
 8017176:	0029      	movs	r1, r5
 8017178:	3174      	adds	r1, #116	; 0x74
 801717a:	f7fd fb2f 	bl	80147dc <_malloc_r>
 801717e:	1e04      	subs	r4, r0, #0
 8017180:	d008      	beq.n	8017194 <__sfmoreglue+0x28>
 8017182:	2100      	movs	r1, #0
 8017184:	002a      	movs	r2, r5
 8017186:	6001      	str	r1, [r0, #0]
 8017188:	6046      	str	r6, [r0, #4]
 801718a:	300c      	adds	r0, #12
 801718c:	60a0      	str	r0, [r4, #8]
 801718e:	3268      	adds	r2, #104	; 0x68
 8017190:	f7fd faaf 	bl	80146f2 <memset>
 8017194:	0020      	movs	r0, r4
 8017196:	bd70      	pop	{r4, r5, r6, pc}

08017198 <__sfp_lock_acquire>:
 8017198:	b510      	push	{r4, lr}
 801719a:	4802      	ldr	r0, [pc, #8]	; (80171a4 <__sfp_lock_acquire+0xc>)
 801719c:	f7ff fc53 	bl	8016a46 <__retarget_lock_acquire_recursive>
 80171a0:	bd10      	pop	{r4, pc}
 80171a2:	46c0      	nop			; (mov r8, r8)
 80171a4:	20003a9d 	.word	0x20003a9d

080171a8 <__sfp_lock_release>:
 80171a8:	b510      	push	{r4, lr}
 80171aa:	4802      	ldr	r0, [pc, #8]	; (80171b4 <__sfp_lock_release+0xc>)
 80171ac:	f7ff fc4c 	bl	8016a48 <__retarget_lock_release_recursive>
 80171b0:	bd10      	pop	{r4, pc}
 80171b2:	46c0      	nop			; (mov r8, r8)
 80171b4:	20003a9d 	.word	0x20003a9d

080171b8 <__sinit_lock_acquire>:
 80171b8:	b510      	push	{r4, lr}
 80171ba:	4802      	ldr	r0, [pc, #8]	; (80171c4 <__sinit_lock_acquire+0xc>)
 80171bc:	f7ff fc43 	bl	8016a46 <__retarget_lock_acquire_recursive>
 80171c0:	bd10      	pop	{r4, pc}
 80171c2:	46c0      	nop			; (mov r8, r8)
 80171c4:	20003a9e 	.word	0x20003a9e

080171c8 <__sinit_lock_release>:
 80171c8:	b510      	push	{r4, lr}
 80171ca:	4802      	ldr	r0, [pc, #8]	; (80171d4 <__sinit_lock_release+0xc>)
 80171cc:	f7ff fc3c 	bl	8016a48 <__retarget_lock_release_recursive>
 80171d0:	bd10      	pop	{r4, pc}
 80171d2:	46c0      	nop			; (mov r8, r8)
 80171d4:	20003a9e 	.word	0x20003a9e

080171d8 <__sinit>:
 80171d8:	b513      	push	{r0, r1, r4, lr}
 80171da:	0004      	movs	r4, r0
 80171dc:	f7ff ffec 	bl	80171b8 <__sinit_lock_acquire>
 80171e0:	69a3      	ldr	r3, [r4, #24]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d002      	beq.n	80171ec <__sinit+0x14>
 80171e6:	f7ff ffef 	bl	80171c8 <__sinit_lock_release>
 80171ea:	bd13      	pop	{r0, r1, r4, pc}
 80171ec:	64a3      	str	r3, [r4, #72]	; 0x48
 80171ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80171f0:	6523      	str	r3, [r4, #80]	; 0x50
 80171f2:	4b13      	ldr	r3, [pc, #76]	; (8017240 <__sinit+0x68>)
 80171f4:	4a13      	ldr	r2, [pc, #76]	; (8017244 <__sinit+0x6c>)
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80171fa:	9301      	str	r3, [sp, #4]
 80171fc:	42a3      	cmp	r3, r4
 80171fe:	d101      	bne.n	8017204 <__sinit+0x2c>
 8017200:	2301      	movs	r3, #1
 8017202:	61a3      	str	r3, [r4, #24]
 8017204:	0020      	movs	r0, r4
 8017206:	f000 f81f 	bl	8017248 <__sfp>
 801720a:	6060      	str	r0, [r4, #4]
 801720c:	0020      	movs	r0, r4
 801720e:	f000 f81b 	bl	8017248 <__sfp>
 8017212:	60a0      	str	r0, [r4, #8]
 8017214:	0020      	movs	r0, r4
 8017216:	f000 f817 	bl	8017248 <__sfp>
 801721a:	2200      	movs	r2, #0
 801721c:	2104      	movs	r1, #4
 801721e:	60e0      	str	r0, [r4, #12]
 8017220:	6860      	ldr	r0, [r4, #4]
 8017222:	f7ff ff77 	bl	8017114 <std>
 8017226:	2201      	movs	r2, #1
 8017228:	2109      	movs	r1, #9
 801722a:	68a0      	ldr	r0, [r4, #8]
 801722c:	f7ff ff72 	bl	8017114 <std>
 8017230:	2202      	movs	r2, #2
 8017232:	2112      	movs	r1, #18
 8017234:	68e0      	ldr	r0, [r4, #12]
 8017236:	f7ff ff6d 	bl	8017114 <std>
 801723a:	2301      	movs	r3, #1
 801723c:	61a3      	str	r3, [r4, #24]
 801723e:	e7d2      	b.n	80171e6 <__sinit+0xe>
 8017240:	08018a9c 	.word	0x08018a9c
 8017244:	0801715d 	.word	0x0801715d

08017248 <__sfp>:
 8017248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801724a:	0007      	movs	r7, r0
 801724c:	f7ff ffa4 	bl	8017198 <__sfp_lock_acquire>
 8017250:	4b1f      	ldr	r3, [pc, #124]	; (80172d0 <__sfp+0x88>)
 8017252:	681e      	ldr	r6, [r3, #0]
 8017254:	69b3      	ldr	r3, [r6, #24]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d102      	bne.n	8017260 <__sfp+0x18>
 801725a:	0030      	movs	r0, r6
 801725c:	f7ff ffbc 	bl	80171d8 <__sinit>
 8017260:	3648      	adds	r6, #72	; 0x48
 8017262:	68b4      	ldr	r4, [r6, #8]
 8017264:	6873      	ldr	r3, [r6, #4]
 8017266:	3b01      	subs	r3, #1
 8017268:	d504      	bpl.n	8017274 <__sfp+0x2c>
 801726a:	6833      	ldr	r3, [r6, #0]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d022      	beq.n	80172b6 <__sfp+0x6e>
 8017270:	6836      	ldr	r6, [r6, #0]
 8017272:	e7f6      	b.n	8017262 <__sfp+0x1a>
 8017274:	220c      	movs	r2, #12
 8017276:	5ea5      	ldrsh	r5, [r4, r2]
 8017278:	2d00      	cmp	r5, #0
 801727a:	d11a      	bne.n	80172b2 <__sfp+0x6a>
 801727c:	0020      	movs	r0, r4
 801727e:	4b15      	ldr	r3, [pc, #84]	; (80172d4 <__sfp+0x8c>)
 8017280:	3058      	adds	r0, #88	; 0x58
 8017282:	60e3      	str	r3, [r4, #12]
 8017284:	6665      	str	r5, [r4, #100]	; 0x64
 8017286:	f7ff fbdd 	bl	8016a44 <__retarget_lock_init_recursive>
 801728a:	f7ff ff8d 	bl	80171a8 <__sfp_lock_release>
 801728e:	0020      	movs	r0, r4
 8017290:	2208      	movs	r2, #8
 8017292:	0029      	movs	r1, r5
 8017294:	6025      	str	r5, [r4, #0]
 8017296:	60a5      	str	r5, [r4, #8]
 8017298:	6065      	str	r5, [r4, #4]
 801729a:	6125      	str	r5, [r4, #16]
 801729c:	6165      	str	r5, [r4, #20]
 801729e:	61a5      	str	r5, [r4, #24]
 80172a0:	305c      	adds	r0, #92	; 0x5c
 80172a2:	f7fd fa26 	bl	80146f2 <memset>
 80172a6:	6365      	str	r5, [r4, #52]	; 0x34
 80172a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80172aa:	64a5      	str	r5, [r4, #72]	; 0x48
 80172ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 80172ae:	0020      	movs	r0, r4
 80172b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172b2:	3468      	adds	r4, #104	; 0x68
 80172b4:	e7d7      	b.n	8017266 <__sfp+0x1e>
 80172b6:	2104      	movs	r1, #4
 80172b8:	0038      	movs	r0, r7
 80172ba:	f7ff ff57 	bl	801716c <__sfmoreglue>
 80172be:	1e04      	subs	r4, r0, #0
 80172c0:	6030      	str	r0, [r6, #0]
 80172c2:	d1d5      	bne.n	8017270 <__sfp+0x28>
 80172c4:	f7ff ff70 	bl	80171a8 <__sfp_lock_release>
 80172c8:	230c      	movs	r3, #12
 80172ca:	603b      	str	r3, [r7, #0]
 80172cc:	e7ef      	b.n	80172ae <__sfp+0x66>
 80172ce:	46c0      	nop			; (mov r8, r8)
 80172d0:	08018a9c 	.word	0x08018a9c
 80172d4:	ffff0001 	.word	0xffff0001

080172d8 <_fwalk_reent>:
 80172d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172da:	0004      	movs	r4, r0
 80172dc:	0006      	movs	r6, r0
 80172de:	2700      	movs	r7, #0
 80172e0:	9101      	str	r1, [sp, #4]
 80172e2:	3448      	adds	r4, #72	; 0x48
 80172e4:	6863      	ldr	r3, [r4, #4]
 80172e6:	68a5      	ldr	r5, [r4, #8]
 80172e8:	9300      	str	r3, [sp, #0]
 80172ea:	9b00      	ldr	r3, [sp, #0]
 80172ec:	3b01      	subs	r3, #1
 80172ee:	9300      	str	r3, [sp, #0]
 80172f0:	d504      	bpl.n	80172fc <_fwalk_reent+0x24>
 80172f2:	6824      	ldr	r4, [r4, #0]
 80172f4:	2c00      	cmp	r4, #0
 80172f6:	d1f5      	bne.n	80172e4 <_fwalk_reent+0xc>
 80172f8:	0038      	movs	r0, r7
 80172fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80172fc:	89ab      	ldrh	r3, [r5, #12]
 80172fe:	2b01      	cmp	r3, #1
 8017300:	d908      	bls.n	8017314 <_fwalk_reent+0x3c>
 8017302:	220e      	movs	r2, #14
 8017304:	5eab      	ldrsh	r3, [r5, r2]
 8017306:	3301      	adds	r3, #1
 8017308:	d004      	beq.n	8017314 <_fwalk_reent+0x3c>
 801730a:	0029      	movs	r1, r5
 801730c:	0030      	movs	r0, r6
 801730e:	9b01      	ldr	r3, [sp, #4]
 8017310:	4798      	blx	r3
 8017312:	4307      	orrs	r7, r0
 8017314:	3568      	adds	r5, #104	; 0x68
 8017316:	e7e8      	b.n	80172ea <_fwalk_reent+0x12>

08017318 <__swhatbuf_r>:
 8017318:	b570      	push	{r4, r5, r6, lr}
 801731a:	000e      	movs	r6, r1
 801731c:	001d      	movs	r5, r3
 801731e:	230e      	movs	r3, #14
 8017320:	5ec9      	ldrsh	r1, [r1, r3]
 8017322:	0014      	movs	r4, r2
 8017324:	b096      	sub	sp, #88	; 0x58
 8017326:	2900      	cmp	r1, #0
 8017328:	da08      	bge.n	801733c <__swhatbuf_r+0x24>
 801732a:	220c      	movs	r2, #12
 801732c:	5eb3      	ldrsh	r3, [r6, r2]
 801732e:	2200      	movs	r2, #0
 8017330:	602a      	str	r2, [r5, #0]
 8017332:	061b      	lsls	r3, r3, #24
 8017334:	d411      	bmi.n	801735a <__swhatbuf_r+0x42>
 8017336:	2380      	movs	r3, #128	; 0x80
 8017338:	00db      	lsls	r3, r3, #3
 801733a:	e00f      	b.n	801735c <__swhatbuf_r+0x44>
 801733c:	466a      	mov	r2, sp
 801733e:	f000 f91b 	bl	8017578 <_fstat_r>
 8017342:	2800      	cmp	r0, #0
 8017344:	dbf1      	blt.n	801732a <__swhatbuf_r+0x12>
 8017346:	23f0      	movs	r3, #240	; 0xf0
 8017348:	9901      	ldr	r1, [sp, #4]
 801734a:	021b      	lsls	r3, r3, #8
 801734c:	4019      	ands	r1, r3
 801734e:	4b05      	ldr	r3, [pc, #20]	; (8017364 <__swhatbuf_r+0x4c>)
 8017350:	18c9      	adds	r1, r1, r3
 8017352:	424b      	negs	r3, r1
 8017354:	4159      	adcs	r1, r3
 8017356:	6029      	str	r1, [r5, #0]
 8017358:	e7ed      	b.n	8017336 <__swhatbuf_r+0x1e>
 801735a:	2340      	movs	r3, #64	; 0x40
 801735c:	2000      	movs	r0, #0
 801735e:	6023      	str	r3, [r4, #0]
 8017360:	b016      	add	sp, #88	; 0x58
 8017362:	bd70      	pop	{r4, r5, r6, pc}
 8017364:	ffffe000 	.word	0xffffe000

08017368 <__smakebuf_r>:
 8017368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801736a:	2602      	movs	r6, #2
 801736c:	898b      	ldrh	r3, [r1, #12]
 801736e:	0005      	movs	r5, r0
 8017370:	000c      	movs	r4, r1
 8017372:	4233      	tst	r3, r6
 8017374:	d006      	beq.n	8017384 <__smakebuf_r+0x1c>
 8017376:	0023      	movs	r3, r4
 8017378:	3347      	adds	r3, #71	; 0x47
 801737a:	6023      	str	r3, [r4, #0]
 801737c:	6123      	str	r3, [r4, #16]
 801737e:	2301      	movs	r3, #1
 8017380:	6163      	str	r3, [r4, #20]
 8017382:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017384:	466a      	mov	r2, sp
 8017386:	ab01      	add	r3, sp, #4
 8017388:	f7ff ffc6 	bl	8017318 <__swhatbuf_r>
 801738c:	9900      	ldr	r1, [sp, #0]
 801738e:	0007      	movs	r7, r0
 8017390:	0028      	movs	r0, r5
 8017392:	f7fd fa23 	bl	80147dc <_malloc_r>
 8017396:	2800      	cmp	r0, #0
 8017398:	d108      	bne.n	80173ac <__smakebuf_r+0x44>
 801739a:	220c      	movs	r2, #12
 801739c:	5ea3      	ldrsh	r3, [r4, r2]
 801739e:	059a      	lsls	r2, r3, #22
 80173a0:	d4ef      	bmi.n	8017382 <__smakebuf_r+0x1a>
 80173a2:	2203      	movs	r2, #3
 80173a4:	4393      	bics	r3, r2
 80173a6:	431e      	orrs	r6, r3
 80173a8:	81a6      	strh	r6, [r4, #12]
 80173aa:	e7e4      	b.n	8017376 <__smakebuf_r+0xe>
 80173ac:	4b0f      	ldr	r3, [pc, #60]	; (80173ec <__smakebuf_r+0x84>)
 80173ae:	62ab      	str	r3, [r5, #40]	; 0x28
 80173b0:	2380      	movs	r3, #128	; 0x80
 80173b2:	89a2      	ldrh	r2, [r4, #12]
 80173b4:	6020      	str	r0, [r4, #0]
 80173b6:	4313      	orrs	r3, r2
 80173b8:	81a3      	strh	r3, [r4, #12]
 80173ba:	9b00      	ldr	r3, [sp, #0]
 80173bc:	6120      	str	r0, [r4, #16]
 80173be:	6163      	str	r3, [r4, #20]
 80173c0:	9b01      	ldr	r3, [sp, #4]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d00d      	beq.n	80173e2 <__smakebuf_r+0x7a>
 80173c6:	0028      	movs	r0, r5
 80173c8:	230e      	movs	r3, #14
 80173ca:	5ee1      	ldrsh	r1, [r4, r3]
 80173cc:	f000 f8e6 	bl	801759c <_isatty_r>
 80173d0:	2800      	cmp	r0, #0
 80173d2:	d006      	beq.n	80173e2 <__smakebuf_r+0x7a>
 80173d4:	2203      	movs	r2, #3
 80173d6:	89a3      	ldrh	r3, [r4, #12]
 80173d8:	4393      	bics	r3, r2
 80173da:	001a      	movs	r2, r3
 80173dc:	2301      	movs	r3, #1
 80173de:	4313      	orrs	r3, r2
 80173e0:	81a3      	strh	r3, [r4, #12]
 80173e2:	89a0      	ldrh	r0, [r4, #12]
 80173e4:	4307      	orrs	r7, r0
 80173e6:	81a7      	strh	r7, [r4, #12]
 80173e8:	e7cb      	b.n	8017382 <__smakebuf_r+0x1a>
 80173ea:	46c0      	nop			; (mov r8, r8)
 80173ec:	0801715d 	.word	0x0801715d

080173f0 <_malloc_usable_size_r>:
 80173f0:	1f0b      	subs	r3, r1, #4
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	1f18      	subs	r0, r3, #4
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	da01      	bge.n	80173fe <_malloc_usable_size_r+0xe>
 80173fa:	580b      	ldr	r3, [r1, r0]
 80173fc:	18c0      	adds	r0, r0, r3
 80173fe:	4770      	bx	lr

08017400 <_raise_r>:
 8017400:	b570      	push	{r4, r5, r6, lr}
 8017402:	0004      	movs	r4, r0
 8017404:	000d      	movs	r5, r1
 8017406:	291f      	cmp	r1, #31
 8017408:	d904      	bls.n	8017414 <_raise_r+0x14>
 801740a:	2316      	movs	r3, #22
 801740c:	6003      	str	r3, [r0, #0]
 801740e:	2001      	movs	r0, #1
 8017410:	4240      	negs	r0, r0
 8017412:	bd70      	pop	{r4, r5, r6, pc}
 8017414:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8017416:	2b00      	cmp	r3, #0
 8017418:	d004      	beq.n	8017424 <_raise_r+0x24>
 801741a:	008a      	lsls	r2, r1, #2
 801741c:	189b      	adds	r3, r3, r2
 801741e:	681a      	ldr	r2, [r3, #0]
 8017420:	2a00      	cmp	r2, #0
 8017422:	d108      	bne.n	8017436 <_raise_r+0x36>
 8017424:	0020      	movs	r0, r4
 8017426:	f000 f831 	bl	801748c <_getpid_r>
 801742a:	002a      	movs	r2, r5
 801742c:	0001      	movs	r1, r0
 801742e:	0020      	movs	r0, r4
 8017430:	f000 f81a 	bl	8017468 <_kill_r>
 8017434:	e7ed      	b.n	8017412 <_raise_r+0x12>
 8017436:	2000      	movs	r0, #0
 8017438:	2a01      	cmp	r2, #1
 801743a:	d0ea      	beq.n	8017412 <_raise_r+0x12>
 801743c:	1c51      	adds	r1, r2, #1
 801743e:	d103      	bne.n	8017448 <_raise_r+0x48>
 8017440:	2316      	movs	r3, #22
 8017442:	3001      	adds	r0, #1
 8017444:	6023      	str	r3, [r4, #0]
 8017446:	e7e4      	b.n	8017412 <_raise_r+0x12>
 8017448:	2400      	movs	r4, #0
 801744a:	0028      	movs	r0, r5
 801744c:	601c      	str	r4, [r3, #0]
 801744e:	4790      	blx	r2
 8017450:	0020      	movs	r0, r4
 8017452:	e7de      	b.n	8017412 <_raise_r+0x12>

08017454 <raise>:
 8017454:	b510      	push	{r4, lr}
 8017456:	4b03      	ldr	r3, [pc, #12]	; (8017464 <raise+0x10>)
 8017458:	0001      	movs	r1, r0
 801745a:	6818      	ldr	r0, [r3, #0]
 801745c:	f7ff ffd0 	bl	8017400 <_raise_r>
 8017460:	bd10      	pop	{r4, pc}
 8017462:	46c0      	nop			; (mov r8, r8)
 8017464:	200030d8 	.word	0x200030d8

08017468 <_kill_r>:
 8017468:	2300      	movs	r3, #0
 801746a:	b570      	push	{r4, r5, r6, lr}
 801746c:	4d06      	ldr	r5, [pc, #24]	; (8017488 <_kill_r+0x20>)
 801746e:	0004      	movs	r4, r0
 8017470:	0008      	movs	r0, r1
 8017472:	0011      	movs	r1, r2
 8017474:	602b      	str	r3, [r5, #0]
 8017476:	f7ec fc1b 	bl	8003cb0 <_kill>
 801747a:	1c43      	adds	r3, r0, #1
 801747c:	d103      	bne.n	8017486 <_kill_r+0x1e>
 801747e:	682b      	ldr	r3, [r5, #0]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d000      	beq.n	8017486 <_kill_r+0x1e>
 8017484:	6023      	str	r3, [r4, #0]
 8017486:	bd70      	pop	{r4, r5, r6, pc}
 8017488:	20003a98 	.word	0x20003a98

0801748c <_getpid_r>:
 801748c:	b510      	push	{r4, lr}
 801748e:	f7ec fc09 	bl	8003ca4 <_getpid>
 8017492:	bd10      	pop	{r4, pc}

08017494 <__sread>:
 8017494:	b570      	push	{r4, r5, r6, lr}
 8017496:	000c      	movs	r4, r1
 8017498:	250e      	movs	r5, #14
 801749a:	5f49      	ldrsh	r1, [r1, r5]
 801749c:	f000 f8a4 	bl	80175e8 <_read_r>
 80174a0:	2800      	cmp	r0, #0
 80174a2:	db03      	blt.n	80174ac <__sread+0x18>
 80174a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80174a6:	181b      	adds	r3, r3, r0
 80174a8:	6563      	str	r3, [r4, #84]	; 0x54
 80174aa:	bd70      	pop	{r4, r5, r6, pc}
 80174ac:	89a3      	ldrh	r3, [r4, #12]
 80174ae:	4a02      	ldr	r2, [pc, #8]	; (80174b8 <__sread+0x24>)
 80174b0:	4013      	ands	r3, r2
 80174b2:	81a3      	strh	r3, [r4, #12]
 80174b4:	e7f9      	b.n	80174aa <__sread+0x16>
 80174b6:	46c0      	nop			; (mov r8, r8)
 80174b8:	ffffefff 	.word	0xffffefff

080174bc <__swrite>:
 80174bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174be:	001f      	movs	r7, r3
 80174c0:	898b      	ldrh	r3, [r1, #12]
 80174c2:	0005      	movs	r5, r0
 80174c4:	000c      	movs	r4, r1
 80174c6:	0016      	movs	r6, r2
 80174c8:	05db      	lsls	r3, r3, #23
 80174ca:	d505      	bpl.n	80174d8 <__swrite+0x1c>
 80174cc:	230e      	movs	r3, #14
 80174ce:	5ec9      	ldrsh	r1, [r1, r3]
 80174d0:	2200      	movs	r2, #0
 80174d2:	2302      	movs	r3, #2
 80174d4:	f000 f874 	bl	80175c0 <_lseek_r>
 80174d8:	89a3      	ldrh	r3, [r4, #12]
 80174da:	4a05      	ldr	r2, [pc, #20]	; (80174f0 <__swrite+0x34>)
 80174dc:	0028      	movs	r0, r5
 80174de:	4013      	ands	r3, r2
 80174e0:	81a3      	strh	r3, [r4, #12]
 80174e2:	0032      	movs	r2, r6
 80174e4:	230e      	movs	r3, #14
 80174e6:	5ee1      	ldrsh	r1, [r4, r3]
 80174e8:	003b      	movs	r3, r7
 80174ea:	f000 f81f 	bl	801752c <_write_r>
 80174ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174f0:	ffffefff 	.word	0xffffefff

080174f4 <__sseek>:
 80174f4:	b570      	push	{r4, r5, r6, lr}
 80174f6:	000c      	movs	r4, r1
 80174f8:	250e      	movs	r5, #14
 80174fa:	5f49      	ldrsh	r1, [r1, r5]
 80174fc:	f000 f860 	bl	80175c0 <_lseek_r>
 8017500:	89a3      	ldrh	r3, [r4, #12]
 8017502:	1c42      	adds	r2, r0, #1
 8017504:	d103      	bne.n	801750e <__sseek+0x1a>
 8017506:	4a05      	ldr	r2, [pc, #20]	; (801751c <__sseek+0x28>)
 8017508:	4013      	ands	r3, r2
 801750a:	81a3      	strh	r3, [r4, #12]
 801750c:	bd70      	pop	{r4, r5, r6, pc}
 801750e:	2280      	movs	r2, #128	; 0x80
 8017510:	0152      	lsls	r2, r2, #5
 8017512:	4313      	orrs	r3, r2
 8017514:	81a3      	strh	r3, [r4, #12]
 8017516:	6560      	str	r0, [r4, #84]	; 0x54
 8017518:	e7f8      	b.n	801750c <__sseek+0x18>
 801751a:	46c0      	nop			; (mov r8, r8)
 801751c:	ffffefff 	.word	0xffffefff

08017520 <__sclose>:
 8017520:	b510      	push	{r4, lr}
 8017522:	230e      	movs	r3, #14
 8017524:	5ec9      	ldrsh	r1, [r1, r3]
 8017526:	f000 f815 	bl	8017554 <_close_r>
 801752a:	bd10      	pop	{r4, pc}

0801752c <_write_r>:
 801752c:	b570      	push	{r4, r5, r6, lr}
 801752e:	0004      	movs	r4, r0
 8017530:	0008      	movs	r0, r1
 8017532:	0011      	movs	r1, r2
 8017534:	001a      	movs	r2, r3
 8017536:	2300      	movs	r3, #0
 8017538:	4d05      	ldr	r5, [pc, #20]	; (8017550 <_write_r+0x24>)
 801753a:	602b      	str	r3, [r5, #0]
 801753c:	f7ec fbf1 	bl	8003d22 <_write>
 8017540:	1c43      	adds	r3, r0, #1
 8017542:	d103      	bne.n	801754c <_write_r+0x20>
 8017544:	682b      	ldr	r3, [r5, #0]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d000      	beq.n	801754c <_write_r+0x20>
 801754a:	6023      	str	r3, [r4, #0]
 801754c:	bd70      	pop	{r4, r5, r6, pc}
 801754e:	46c0      	nop			; (mov r8, r8)
 8017550:	20003a98 	.word	0x20003a98

08017554 <_close_r>:
 8017554:	2300      	movs	r3, #0
 8017556:	b570      	push	{r4, r5, r6, lr}
 8017558:	4d06      	ldr	r5, [pc, #24]	; (8017574 <_close_r+0x20>)
 801755a:	0004      	movs	r4, r0
 801755c:	0008      	movs	r0, r1
 801755e:	602b      	str	r3, [r5, #0]
 8017560:	f7ec fbfb 	bl	8003d5a <_close>
 8017564:	1c43      	adds	r3, r0, #1
 8017566:	d103      	bne.n	8017570 <_close_r+0x1c>
 8017568:	682b      	ldr	r3, [r5, #0]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d000      	beq.n	8017570 <_close_r+0x1c>
 801756e:	6023      	str	r3, [r4, #0]
 8017570:	bd70      	pop	{r4, r5, r6, pc}
 8017572:	46c0      	nop			; (mov r8, r8)
 8017574:	20003a98 	.word	0x20003a98

08017578 <_fstat_r>:
 8017578:	2300      	movs	r3, #0
 801757a:	b570      	push	{r4, r5, r6, lr}
 801757c:	4d06      	ldr	r5, [pc, #24]	; (8017598 <_fstat_r+0x20>)
 801757e:	0004      	movs	r4, r0
 8017580:	0008      	movs	r0, r1
 8017582:	0011      	movs	r1, r2
 8017584:	602b      	str	r3, [r5, #0]
 8017586:	f7ec fbf2 	bl	8003d6e <_fstat>
 801758a:	1c43      	adds	r3, r0, #1
 801758c:	d103      	bne.n	8017596 <_fstat_r+0x1e>
 801758e:	682b      	ldr	r3, [r5, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d000      	beq.n	8017596 <_fstat_r+0x1e>
 8017594:	6023      	str	r3, [r4, #0]
 8017596:	bd70      	pop	{r4, r5, r6, pc}
 8017598:	20003a98 	.word	0x20003a98

0801759c <_isatty_r>:
 801759c:	2300      	movs	r3, #0
 801759e:	b570      	push	{r4, r5, r6, lr}
 80175a0:	4d06      	ldr	r5, [pc, #24]	; (80175bc <_isatty_r+0x20>)
 80175a2:	0004      	movs	r4, r0
 80175a4:	0008      	movs	r0, r1
 80175a6:	602b      	str	r3, [r5, #0]
 80175a8:	f7ec fbef 	bl	8003d8a <_isatty>
 80175ac:	1c43      	adds	r3, r0, #1
 80175ae:	d103      	bne.n	80175b8 <_isatty_r+0x1c>
 80175b0:	682b      	ldr	r3, [r5, #0]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d000      	beq.n	80175b8 <_isatty_r+0x1c>
 80175b6:	6023      	str	r3, [r4, #0]
 80175b8:	bd70      	pop	{r4, r5, r6, pc}
 80175ba:	46c0      	nop			; (mov r8, r8)
 80175bc:	20003a98 	.word	0x20003a98

080175c0 <_lseek_r>:
 80175c0:	b570      	push	{r4, r5, r6, lr}
 80175c2:	0004      	movs	r4, r0
 80175c4:	0008      	movs	r0, r1
 80175c6:	0011      	movs	r1, r2
 80175c8:	001a      	movs	r2, r3
 80175ca:	2300      	movs	r3, #0
 80175cc:	4d05      	ldr	r5, [pc, #20]	; (80175e4 <_lseek_r+0x24>)
 80175ce:	602b      	str	r3, [r5, #0]
 80175d0:	f7ec fbe4 	bl	8003d9c <_lseek>
 80175d4:	1c43      	adds	r3, r0, #1
 80175d6:	d103      	bne.n	80175e0 <_lseek_r+0x20>
 80175d8:	682b      	ldr	r3, [r5, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d000      	beq.n	80175e0 <_lseek_r+0x20>
 80175de:	6023      	str	r3, [r4, #0]
 80175e0:	bd70      	pop	{r4, r5, r6, pc}
 80175e2:	46c0      	nop			; (mov r8, r8)
 80175e4:	20003a98 	.word	0x20003a98

080175e8 <_read_r>:
 80175e8:	b570      	push	{r4, r5, r6, lr}
 80175ea:	0004      	movs	r4, r0
 80175ec:	0008      	movs	r0, r1
 80175ee:	0011      	movs	r1, r2
 80175f0:	001a      	movs	r2, r3
 80175f2:	2300      	movs	r3, #0
 80175f4:	4d05      	ldr	r5, [pc, #20]	; (801760c <_read_r+0x24>)
 80175f6:	602b      	str	r3, [r5, #0]
 80175f8:	f7ec fb76 	bl	8003ce8 <_read>
 80175fc:	1c43      	adds	r3, r0, #1
 80175fe:	d103      	bne.n	8017608 <_read_r+0x20>
 8017600:	682b      	ldr	r3, [r5, #0]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d000      	beq.n	8017608 <_read_r+0x20>
 8017606:	6023      	str	r3, [r4, #0]
 8017608:	bd70      	pop	{r4, r5, r6, pc}
 801760a:	46c0      	nop			; (mov r8, r8)
 801760c:	20003a98 	.word	0x20003a98

08017610 <pow>:
 8017610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017612:	0014      	movs	r4, r2
 8017614:	001d      	movs	r5, r3
 8017616:	9000      	str	r0, [sp, #0]
 8017618:	9101      	str	r1, [sp, #4]
 801761a:	f000 f867 	bl	80176ec <__ieee754_pow>
 801761e:	0022      	movs	r2, r4
 8017620:	0006      	movs	r6, r0
 8017622:	000f      	movs	r7, r1
 8017624:	002b      	movs	r3, r5
 8017626:	0020      	movs	r0, r4
 8017628:	0029      	movs	r1, r5
 801762a:	f7eb fb97 	bl	8002d5c <__aeabi_dcmpun>
 801762e:	2800      	cmp	r0, #0
 8017630:	d13f      	bne.n	80176b2 <pow+0xa2>
 8017632:	9800      	ldr	r0, [sp, #0]
 8017634:	9901      	ldr	r1, [sp, #4]
 8017636:	2200      	movs	r2, #0
 8017638:	2300      	movs	r3, #0
 801763a:	f7e8 ff0d 	bl	8000458 <__aeabi_dcmpeq>
 801763e:	2800      	cmp	r0, #0
 8017640:	d019      	beq.n	8017676 <pow+0x66>
 8017642:	2200      	movs	r2, #0
 8017644:	2300      	movs	r3, #0
 8017646:	0020      	movs	r0, r4
 8017648:	0029      	movs	r1, r5
 801764a:	f7e8 ff05 	bl	8000458 <__aeabi_dcmpeq>
 801764e:	2800      	cmp	r0, #0
 8017650:	d146      	bne.n	80176e0 <pow+0xd0>
 8017652:	0020      	movs	r0, r4
 8017654:	0029      	movs	r1, r5
 8017656:	f000 fe3d 	bl	80182d4 <finite>
 801765a:	2800      	cmp	r0, #0
 801765c:	d029      	beq.n	80176b2 <pow+0xa2>
 801765e:	2200      	movs	r2, #0
 8017660:	2300      	movs	r3, #0
 8017662:	0020      	movs	r0, r4
 8017664:	0029      	movs	r1, r5
 8017666:	f7e8 fefd 	bl	8000464 <__aeabi_dcmplt>
 801766a:	2800      	cmp	r0, #0
 801766c:	d021      	beq.n	80176b2 <pow+0xa2>
 801766e:	f7fd f803 	bl	8014678 <__errno>
 8017672:	2322      	movs	r3, #34	; 0x22
 8017674:	e01c      	b.n	80176b0 <pow+0xa0>
 8017676:	0030      	movs	r0, r6
 8017678:	0039      	movs	r1, r7
 801767a:	f000 fe2b 	bl	80182d4 <finite>
 801767e:	2800      	cmp	r0, #0
 8017680:	d11b      	bne.n	80176ba <pow+0xaa>
 8017682:	9800      	ldr	r0, [sp, #0]
 8017684:	9901      	ldr	r1, [sp, #4]
 8017686:	f000 fe25 	bl	80182d4 <finite>
 801768a:	2800      	cmp	r0, #0
 801768c:	d015      	beq.n	80176ba <pow+0xaa>
 801768e:	0020      	movs	r0, r4
 8017690:	0029      	movs	r1, r5
 8017692:	f000 fe1f 	bl	80182d4 <finite>
 8017696:	2800      	cmp	r0, #0
 8017698:	d00f      	beq.n	80176ba <pow+0xaa>
 801769a:	0032      	movs	r2, r6
 801769c:	003b      	movs	r3, r7
 801769e:	0030      	movs	r0, r6
 80176a0:	0039      	movs	r1, r7
 80176a2:	f7eb fb5b 	bl	8002d5c <__aeabi_dcmpun>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	d0e1      	beq.n	801766e <pow+0x5e>
 80176aa:	f7fc ffe5 	bl	8014678 <__errno>
 80176ae:	2321      	movs	r3, #33	; 0x21
 80176b0:	6003      	str	r3, [r0, #0]
 80176b2:	0030      	movs	r0, r6
 80176b4:	0039      	movs	r1, r7
 80176b6:	b003      	add	sp, #12
 80176b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ba:	2200      	movs	r2, #0
 80176bc:	2300      	movs	r3, #0
 80176be:	0030      	movs	r0, r6
 80176c0:	0039      	movs	r1, r7
 80176c2:	f7e8 fec9 	bl	8000458 <__aeabi_dcmpeq>
 80176c6:	2800      	cmp	r0, #0
 80176c8:	d0f3      	beq.n	80176b2 <pow+0xa2>
 80176ca:	9800      	ldr	r0, [sp, #0]
 80176cc:	9901      	ldr	r1, [sp, #4]
 80176ce:	f000 fe01 	bl	80182d4 <finite>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	d0ed      	beq.n	80176b2 <pow+0xa2>
 80176d6:	0020      	movs	r0, r4
 80176d8:	0029      	movs	r1, r5
 80176da:	f000 fdfb 	bl	80182d4 <finite>
 80176de:	e7c4      	b.n	801766a <pow+0x5a>
 80176e0:	2600      	movs	r6, #0
 80176e2:	4f01      	ldr	r7, [pc, #4]	; (80176e8 <pow+0xd8>)
 80176e4:	e7e5      	b.n	80176b2 <pow+0xa2>
 80176e6:	46c0      	nop			; (mov r8, r8)
 80176e8:	3ff00000 	.word	0x3ff00000

080176ec <__ieee754_pow>:
 80176ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ee:	b095      	sub	sp, #84	; 0x54
 80176f0:	9202      	str	r2, [sp, #8]
 80176f2:	9303      	str	r3, [sp, #12]
 80176f4:	9b03      	ldr	r3, [sp, #12]
 80176f6:	9a03      	ldr	r2, [sp, #12]
 80176f8:	9304      	str	r3, [sp, #16]
 80176fa:	9b02      	ldr	r3, [sp, #8]
 80176fc:	0056      	lsls	r6, r2, #1
 80176fe:	001a      	movs	r2, r3
 8017700:	0876      	lsrs	r6, r6, #1
 8017702:	0007      	movs	r7, r0
 8017704:	000d      	movs	r5, r1
 8017706:	4332      	orrs	r2, r6
 8017708:	d119      	bne.n	801773e <__ieee754_pow+0x52>
 801770a:	2180      	movs	r1, #128	; 0x80
 801770c:	0309      	lsls	r1, r1, #12
 801770e:	4069      	eors	r1, r5
 8017710:	0002      	movs	r2, r0
 8017712:	000b      	movs	r3, r1
 8017714:	1892      	adds	r2, r2, r2
 8017716:	415b      	adcs	r3, r3
 8017718:	4989      	ldr	r1, [pc, #548]	; (8017940 <__ieee754_pow+0x254>)
 801771a:	428b      	cmp	r3, r1
 801771c:	d806      	bhi.n	801772c <__ieee754_pow+0x40>
 801771e:	d001      	beq.n	8017724 <__ieee754_pow+0x38>
 8017720:	f000 fcb6 	bl	8018090 <__ieee754_pow+0x9a4>
 8017724:	2a00      	cmp	r2, #0
 8017726:	d101      	bne.n	801772c <__ieee754_pow+0x40>
 8017728:	f000 fcb2 	bl	8018090 <__ieee754_pow+0x9a4>
 801772c:	9a02      	ldr	r2, [sp, #8]
 801772e:	9b03      	ldr	r3, [sp, #12]
 8017730:	0038      	movs	r0, r7
 8017732:	0029      	movs	r1, r5
 8017734:	f7e9 fdd6 	bl	80012e4 <__aeabi_dadd>
 8017738:	9000      	str	r0, [sp, #0]
 801773a:	9101      	str	r1, [sp, #4]
 801773c:	e0ad      	b.n	801789a <__ieee754_pow+0x1ae>
 801773e:	4a81      	ldr	r2, [pc, #516]	; (8017944 <__ieee754_pow+0x258>)
 8017740:	004c      	lsls	r4, r1, #1
 8017742:	9108      	str	r1, [sp, #32]
 8017744:	9000      	str	r0, [sp, #0]
 8017746:	0864      	lsrs	r4, r4, #1
 8017748:	4294      	cmp	r4, r2
 801774a:	dc08      	bgt.n	801775e <__ieee754_pow+0x72>
 801774c:	d101      	bne.n	8017752 <__ieee754_pow+0x66>
 801774e:	2800      	cmp	r0, #0
 8017750:	d1ec      	bne.n	801772c <__ieee754_pow+0x40>
 8017752:	4a7c      	ldr	r2, [pc, #496]	; (8017944 <__ieee754_pow+0x258>)
 8017754:	4296      	cmp	r6, r2
 8017756:	dc02      	bgt.n	801775e <__ieee754_pow+0x72>
 8017758:	d10c      	bne.n	8017774 <__ieee754_pow+0x88>
 801775a:	2b00      	cmp	r3, #0
 801775c:	d00a      	beq.n	8017774 <__ieee754_pow+0x88>
 801775e:	4b7a      	ldr	r3, [pc, #488]	; (8017948 <__ieee754_pow+0x25c>)
 8017760:	18eb      	adds	r3, r5, r3
 8017762:	433b      	orrs	r3, r7
 8017764:	d1e2      	bne.n	801772c <__ieee754_pow+0x40>
 8017766:	2180      	movs	r1, #128	; 0x80
 8017768:	9803      	ldr	r0, [sp, #12]
 801776a:	0309      	lsls	r1, r1, #12
 801776c:	4048      	eors	r0, r1
 801776e:	0003      	movs	r3, r0
 8017770:	9a02      	ldr	r2, [sp, #8]
 8017772:	e7cf      	b.n	8017714 <__ieee754_pow+0x28>
 8017774:	2200      	movs	r2, #0
 8017776:	9206      	str	r2, [sp, #24]
 8017778:	2d00      	cmp	r5, #0
 801777a:	da69      	bge.n	8017850 <__ieee754_pow+0x164>
 801777c:	4a73      	ldr	r2, [pc, #460]	; (801794c <__ieee754_pow+0x260>)
 801777e:	4296      	cmp	r6, r2
 8017780:	dc64      	bgt.n	801784c <__ieee754_pow+0x160>
 8017782:	4a73      	ldr	r2, [pc, #460]	; (8017950 <__ieee754_pow+0x264>)
 8017784:	4296      	cmp	r6, r2
 8017786:	dd11      	ble.n	80177ac <__ieee754_pow+0xc0>
 8017788:	4972      	ldr	r1, [pc, #456]	; (8017954 <__ieee754_pow+0x268>)
 801778a:	1532      	asrs	r2, r6, #20
 801778c:	1852      	adds	r2, r2, r1
 801778e:	2a14      	cmp	r2, #20
 8017790:	dd3c      	ble.n	801780c <__ieee754_pow+0x120>
 8017792:	2134      	movs	r1, #52	; 0x34
 8017794:	1a8a      	subs	r2, r1, r2
 8017796:	9902      	ldr	r1, [sp, #8]
 8017798:	40d1      	lsrs	r1, r2
 801779a:	0008      	movs	r0, r1
 801779c:	4090      	lsls	r0, r2
 801779e:	4298      	cmp	r0, r3
 80177a0:	d104      	bne.n	80177ac <__ieee754_pow+0xc0>
 80177a2:	2201      	movs	r2, #1
 80177a4:	4011      	ands	r1, r2
 80177a6:	1892      	adds	r2, r2, r2
 80177a8:	1a52      	subs	r2, r2, r1
 80177aa:	9206      	str	r2, [sp, #24]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d03c      	beq.n	801782a <__ieee754_pow+0x13e>
 80177b0:	0038      	movs	r0, r7
 80177b2:	0029      	movs	r1, r5
 80177b4:	f000 fd8b 	bl	80182ce <fabs>
 80177b8:	9000      	str	r0, [sp, #0]
 80177ba:	9101      	str	r1, [sp, #4]
 80177bc:	2f00      	cmp	r7, #0
 80177be:	d000      	beq.n	80177c2 <__ieee754_pow+0xd6>
 80177c0:	e094      	b.n	80178ec <__ieee754_pow+0x200>
 80177c2:	2c00      	cmp	r4, #0
 80177c4:	d005      	beq.n	80177d2 <__ieee754_pow+0xe6>
 80177c6:	4a64      	ldr	r2, [pc, #400]	; (8017958 <__ieee754_pow+0x26c>)
 80177c8:	00ab      	lsls	r3, r5, #2
 80177ca:	089b      	lsrs	r3, r3, #2
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d000      	beq.n	80177d2 <__ieee754_pow+0xe6>
 80177d0:	e08c      	b.n	80178ec <__ieee754_pow+0x200>
 80177d2:	9b04      	ldr	r3, [sp, #16]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	da07      	bge.n	80177e8 <__ieee754_pow+0xfc>
 80177d8:	9a00      	ldr	r2, [sp, #0]
 80177da:	9b01      	ldr	r3, [sp, #4]
 80177dc:	2000      	movs	r0, #0
 80177de:	495e      	ldr	r1, [pc, #376]	; (8017958 <__ieee754_pow+0x26c>)
 80177e0:	f7ea f8bc 	bl	800195c <__aeabi_ddiv>
 80177e4:	9000      	str	r0, [sp, #0]
 80177e6:	9101      	str	r1, [sp, #4]
 80177e8:	9b08      	ldr	r3, [sp, #32]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	da55      	bge.n	801789a <__ieee754_pow+0x1ae>
 80177ee:	4b56      	ldr	r3, [pc, #344]	; (8017948 <__ieee754_pow+0x25c>)
 80177f0:	18e4      	adds	r4, r4, r3
 80177f2:	9b06      	ldr	r3, [sp, #24]
 80177f4:	431c      	orrs	r4, r3
 80177f6:	d000      	beq.n	80177fa <__ieee754_pow+0x10e>
 80177f8:	e06c      	b.n	80178d4 <__ieee754_pow+0x1e8>
 80177fa:	9a00      	ldr	r2, [sp, #0]
 80177fc:	9b01      	ldr	r3, [sp, #4]
 80177fe:	0010      	movs	r0, r2
 8017800:	0019      	movs	r1, r3
 8017802:	f7ea ff19 	bl	8002638 <__aeabi_dsub>
 8017806:	0002      	movs	r2, r0
 8017808:	000b      	movs	r3, r1
 801780a:	e01c      	b.n	8017846 <__ieee754_pow+0x15a>
 801780c:	2b00      	cmp	r3, #0
 801780e:	d1cf      	bne.n	80177b0 <__ieee754_pow+0xc4>
 8017810:	3314      	adds	r3, #20
 8017812:	1a9a      	subs	r2, r3, r2
 8017814:	0033      	movs	r3, r6
 8017816:	4113      	asrs	r3, r2
 8017818:	0019      	movs	r1, r3
 801781a:	4091      	lsls	r1, r2
 801781c:	42b1      	cmp	r1, r6
 801781e:	d104      	bne.n	801782a <__ieee754_pow+0x13e>
 8017820:	2201      	movs	r2, #1
 8017822:	4013      	ands	r3, r2
 8017824:	1892      	adds	r2, r2, r2
 8017826:	1ad3      	subs	r3, r2, r3
 8017828:	9306      	str	r3, [sp, #24]
 801782a:	4b4b      	ldr	r3, [pc, #300]	; (8017958 <__ieee754_pow+0x26c>)
 801782c:	429e      	cmp	r6, r3
 801782e:	d138      	bne.n	80178a2 <__ieee754_pow+0x1b6>
 8017830:	0038      	movs	r0, r7
 8017832:	0029      	movs	r1, r5
 8017834:	9b04      	ldr	r3, [sp, #16]
 8017836:	9000      	str	r0, [sp, #0]
 8017838:	9101      	str	r1, [sp, #4]
 801783a:	2b00      	cmp	r3, #0
 801783c:	da2d      	bge.n	801789a <__ieee754_pow+0x1ae>
 801783e:	003a      	movs	r2, r7
 8017840:	002b      	movs	r3, r5
 8017842:	2000      	movs	r0, #0
 8017844:	4944      	ldr	r1, [pc, #272]	; (8017958 <__ieee754_pow+0x26c>)
 8017846:	f7ea f889 	bl	800195c <__aeabi_ddiv>
 801784a:	e775      	b.n	8017738 <__ieee754_pow+0x4c>
 801784c:	2202      	movs	r2, #2
 801784e:	9206      	str	r2, [sp, #24]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d1ad      	bne.n	80177b0 <__ieee754_pow+0xc4>
 8017854:	4b3b      	ldr	r3, [pc, #236]	; (8017944 <__ieee754_pow+0x258>)
 8017856:	429e      	cmp	r6, r3
 8017858:	d1e7      	bne.n	801782a <__ieee754_pow+0x13e>
 801785a:	4b3b      	ldr	r3, [pc, #236]	; (8017948 <__ieee754_pow+0x25c>)
 801785c:	18e3      	adds	r3, r4, r3
 801785e:	431f      	orrs	r7, r3
 8017860:	d101      	bne.n	8017866 <__ieee754_pow+0x17a>
 8017862:	f000 fc15 	bl	8018090 <__ieee754_pow+0x9a4>
 8017866:	4b3a      	ldr	r3, [pc, #232]	; (8017950 <__ieee754_pow+0x264>)
 8017868:	429c      	cmp	r4, r3
 801786a:	dd09      	ble.n	8017880 <__ieee754_pow+0x194>
 801786c:	9b04      	ldr	r3, [sp, #16]
 801786e:	2b00      	cmp	r3, #0
 8017870:	da01      	bge.n	8017876 <__ieee754_pow+0x18a>
 8017872:	f000 fc11 	bl	8018098 <__ieee754_pow+0x9ac>
 8017876:	9b02      	ldr	r3, [sp, #8]
 8017878:	9c03      	ldr	r4, [sp, #12]
 801787a:	9300      	str	r3, [sp, #0]
 801787c:	9401      	str	r4, [sp, #4]
 801787e:	e00c      	b.n	801789a <__ieee754_pow+0x1ae>
 8017880:	9b04      	ldr	r3, [sp, #16]
 8017882:	2b00      	cmp	r3, #0
 8017884:	db01      	blt.n	801788a <__ieee754_pow+0x19e>
 8017886:	f000 fc07 	bl	8018098 <__ieee754_pow+0x9ac>
 801788a:	2280      	movs	r2, #128	; 0x80
 801788c:	0612      	lsls	r2, r2, #24
 801788e:	4694      	mov	ip, r2
 8017890:	9b02      	ldr	r3, [sp, #8]
 8017892:	9300      	str	r3, [sp, #0]
 8017894:	9b03      	ldr	r3, [sp, #12]
 8017896:	4463      	add	r3, ip
 8017898:	9301      	str	r3, [sp, #4]
 801789a:	9800      	ldr	r0, [sp, #0]
 801789c:	9901      	ldr	r1, [sp, #4]
 801789e:	b015      	add	sp, #84	; 0x54
 80178a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178a2:	2380      	movs	r3, #128	; 0x80
 80178a4:	9a04      	ldr	r2, [sp, #16]
 80178a6:	05db      	lsls	r3, r3, #23
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d106      	bne.n	80178ba <__ieee754_pow+0x1ce>
 80178ac:	003a      	movs	r2, r7
 80178ae:	002b      	movs	r3, r5
 80178b0:	0038      	movs	r0, r7
 80178b2:	0029      	movs	r1, r5
 80178b4:	f7ea fc54 	bl	8002160 <__aeabi_dmul>
 80178b8:	e73e      	b.n	8017738 <__ieee754_pow+0x4c>
 80178ba:	4b28      	ldr	r3, [pc, #160]	; (801795c <__ieee754_pow+0x270>)
 80178bc:	9a04      	ldr	r2, [sp, #16]
 80178be:	429a      	cmp	r2, r3
 80178c0:	d000      	beq.n	80178c4 <__ieee754_pow+0x1d8>
 80178c2:	e775      	b.n	80177b0 <__ieee754_pow+0xc4>
 80178c4:	2d00      	cmp	r5, #0
 80178c6:	da00      	bge.n	80178ca <__ieee754_pow+0x1de>
 80178c8:	e772      	b.n	80177b0 <__ieee754_pow+0xc4>
 80178ca:	0038      	movs	r0, r7
 80178cc:	0029      	movs	r1, r5
 80178ce:	f000 fc17 	bl	8018100 <__ieee754_sqrt>
 80178d2:	e731      	b.n	8017738 <__ieee754_pow+0x4c>
 80178d4:	9b06      	ldr	r3, [sp, #24]
 80178d6:	2b01      	cmp	r3, #1
 80178d8:	d1df      	bne.n	801789a <__ieee754_pow+0x1ae>
 80178da:	9800      	ldr	r0, [sp, #0]
 80178dc:	2180      	movs	r1, #128	; 0x80
 80178de:	0002      	movs	r2, r0
 80178e0:	9801      	ldr	r0, [sp, #4]
 80178e2:	0609      	lsls	r1, r1, #24
 80178e4:	1843      	adds	r3, r0, r1
 80178e6:	9200      	str	r2, [sp, #0]
 80178e8:	9301      	str	r3, [sp, #4]
 80178ea:	e7d6      	b.n	801789a <__ieee754_pow+0x1ae>
 80178ec:	0feb      	lsrs	r3, r5, #31
 80178ee:	3b01      	subs	r3, #1
 80178f0:	930e      	str	r3, [sp, #56]	; 0x38
 80178f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80178f4:	9b06      	ldr	r3, [sp, #24]
 80178f6:	4313      	orrs	r3, r2
 80178f8:	d104      	bne.n	8017904 <__ieee754_pow+0x218>
 80178fa:	003a      	movs	r2, r7
 80178fc:	002b      	movs	r3, r5
 80178fe:	0038      	movs	r0, r7
 8017900:	0029      	movs	r1, r5
 8017902:	e77e      	b.n	8017802 <__ieee754_pow+0x116>
 8017904:	4b16      	ldr	r3, [pc, #88]	; (8017960 <__ieee754_pow+0x274>)
 8017906:	429e      	cmp	r6, r3
 8017908:	dc00      	bgt.n	801790c <__ieee754_pow+0x220>
 801790a:	e0ef      	b.n	8017aec <__ieee754_pow+0x400>
 801790c:	4b15      	ldr	r3, [pc, #84]	; (8017964 <__ieee754_pow+0x278>)
 801790e:	429e      	cmp	r6, r3
 8017910:	dd09      	ble.n	8017926 <__ieee754_pow+0x23a>
 8017912:	4b0f      	ldr	r3, [pc, #60]	; (8017950 <__ieee754_pow+0x264>)
 8017914:	429c      	cmp	r4, r3
 8017916:	dc0c      	bgt.n	8017932 <__ieee754_pow+0x246>
 8017918:	9b04      	ldr	r3, [sp, #16]
 801791a:	2b00      	cmp	r3, #0
 801791c:	da0c      	bge.n	8017938 <__ieee754_pow+0x24c>
 801791e:	2000      	movs	r0, #0
 8017920:	f000 fcce 	bl	80182c0 <__math_oflow>
 8017924:	e708      	b.n	8017738 <__ieee754_pow+0x4c>
 8017926:	4b10      	ldr	r3, [pc, #64]	; (8017968 <__ieee754_pow+0x27c>)
 8017928:	429c      	cmp	r4, r3
 801792a:	ddf5      	ble.n	8017918 <__ieee754_pow+0x22c>
 801792c:	4b0a      	ldr	r3, [pc, #40]	; (8017958 <__ieee754_pow+0x26c>)
 801792e:	429c      	cmp	r4, r3
 8017930:	dd1c      	ble.n	801796c <__ieee754_pow+0x280>
 8017932:	9b04      	ldr	r3, [sp, #16]
 8017934:	2b00      	cmp	r3, #0
 8017936:	dcf2      	bgt.n	801791e <__ieee754_pow+0x232>
 8017938:	2000      	movs	r0, #0
 801793a:	f000 fcba 	bl	80182b2 <__math_uflow>
 801793e:	e6fb      	b.n	8017738 <__ieee754_pow+0x4c>
 8017940:	fff00000 	.word	0xfff00000
 8017944:	7ff00000 	.word	0x7ff00000
 8017948:	c0100000 	.word	0xc0100000
 801794c:	433fffff 	.word	0x433fffff
 8017950:	3fefffff 	.word	0x3fefffff
 8017954:	fffffc01 	.word	0xfffffc01
 8017958:	3ff00000 	.word	0x3ff00000
 801795c:	3fe00000 	.word	0x3fe00000
 8017960:	41e00000 	.word	0x41e00000
 8017964:	43f00000 	.word	0x43f00000
 8017968:	3feffffe 	.word	0x3feffffe
 801796c:	2200      	movs	r2, #0
 801796e:	9800      	ldr	r0, [sp, #0]
 8017970:	9901      	ldr	r1, [sp, #4]
 8017972:	4b52      	ldr	r3, [pc, #328]	; (8017abc <__ieee754_pow+0x3d0>)
 8017974:	f7ea fe60 	bl	8002638 <__aeabi_dsub>
 8017978:	22c0      	movs	r2, #192	; 0xc0
 801797a:	4b51      	ldr	r3, [pc, #324]	; (8017ac0 <__ieee754_pow+0x3d4>)
 801797c:	05d2      	lsls	r2, r2, #23
 801797e:	0004      	movs	r4, r0
 8017980:	000d      	movs	r5, r1
 8017982:	f7ea fbed 	bl	8002160 <__aeabi_dmul>
 8017986:	4a4f      	ldr	r2, [pc, #316]	; (8017ac4 <__ieee754_pow+0x3d8>)
 8017988:	9000      	str	r0, [sp, #0]
 801798a:	9101      	str	r1, [sp, #4]
 801798c:	4b4e      	ldr	r3, [pc, #312]	; (8017ac8 <__ieee754_pow+0x3dc>)
 801798e:	0020      	movs	r0, r4
 8017990:	0029      	movs	r1, r5
 8017992:	f7ea fbe5 	bl	8002160 <__aeabi_dmul>
 8017996:	2200      	movs	r2, #0
 8017998:	9004      	str	r0, [sp, #16]
 801799a:	9105      	str	r1, [sp, #20]
 801799c:	4b4b      	ldr	r3, [pc, #300]	; (8017acc <__ieee754_pow+0x3e0>)
 801799e:	0020      	movs	r0, r4
 80179a0:	0029      	movs	r1, r5
 80179a2:	f7ea fbdd 	bl	8002160 <__aeabi_dmul>
 80179a6:	0002      	movs	r2, r0
 80179a8:	000b      	movs	r3, r1
 80179aa:	4849      	ldr	r0, [pc, #292]	; (8017ad0 <__ieee754_pow+0x3e4>)
 80179ac:	4949      	ldr	r1, [pc, #292]	; (8017ad4 <__ieee754_pow+0x3e8>)
 80179ae:	f7ea fe43 	bl	8002638 <__aeabi_dsub>
 80179b2:	0022      	movs	r2, r4
 80179b4:	002b      	movs	r3, r5
 80179b6:	f7ea fbd3 	bl	8002160 <__aeabi_dmul>
 80179ba:	0002      	movs	r2, r0
 80179bc:	000b      	movs	r3, r1
 80179be:	2000      	movs	r0, #0
 80179c0:	4945      	ldr	r1, [pc, #276]	; (8017ad8 <__ieee754_pow+0x3ec>)
 80179c2:	f7ea fe39 	bl	8002638 <__aeabi_dsub>
 80179c6:	0022      	movs	r2, r4
 80179c8:	0006      	movs	r6, r0
 80179ca:	000f      	movs	r7, r1
 80179cc:	002b      	movs	r3, r5
 80179ce:	0020      	movs	r0, r4
 80179d0:	0029      	movs	r1, r5
 80179d2:	f7ea fbc5 	bl	8002160 <__aeabi_dmul>
 80179d6:	0002      	movs	r2, r0
 80179d8:	000b      	movs	r3, r1
 80179da:	0030      	movs	r0, r6
 80179dc:	0039      	movs	r1, r7
 80179de:	f7ea fbbf 	bl	8002160 <__aeabi_dmul>
 80179e2:	4a3e      	ldr	r2, [pc, #248]	; (8017adc <__ieee754_pow+0x3f0>)
 80179e4:	4b36      	ldr	r3, [pc, #216]	; (8017ac0 <__ieee754_pow+0x3d4>)
 80179e6:	f7ea fbbb 	bl	8002160 <__aeabi_dmul>
 80179ea:	0002      	movs	r2, r0
 80179ec:	000b      	movs	r3, r1
 80179ee:	9804      	ldr	r0, [sp, #16]
 80179f0:	9905      	ldr	r1, [sp, #20]
 80179f2:	f7ea fe21 	bl	8002638 <__aeabi_dsub>
 80179f6:	0002      	movs	r2, r0
 80179f8:	000b      	movs	r3, r1
 80179fa:	0004      	movs	r4, r0
 80179fc:	000d      	movs	r5, r1
 80179fe:	9800      	ldr	r0, [sp, #0]
 8017a00:	9901      	ldr	r1, [sp, #4]
 8017a02:	f7e9 fc6f 	bl	80012e4 <__aeabi_dadd>
 8017a06:	9a00      	ldr	r2, [sp, #0]
 8017a08:	9b01      	ldr	r3, [sp, #4]
 8017a0a:	2000      	movs	r0, #0
 8017a0c:	000f      	movs	r7, r1
 8017a0e:	0006      	movs	r6, r0
 8017a10:	f7ea fe12 	bl	8002638 <__aeabi_dsub>
 8017a14:	0002      	movs	r2, r0
 8017a16:	000b      	movs	r3, r1
 8017a18:	0020      	movs	r0, r4
 8017a1a:	0029      	movs	r1, r5
 8017a1c:	f7ea fe0c 	bl	8002638 <__aeabi_dsub>
 8017a20:	9b06      	ldr	r3, [sp, #24]
 8017a22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a24:	3b01      	subs	r3, #1
 8017a26:	9004      	str	r0, [sp, #16]
 8017a28:	9105      	str	r1, [sp, #20]
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	d000      	beq.n	8017a30 <__ieee754_pow+0x344>
 8017a2e:	e1db      	b.n	8017de8 <__ieee754_pow+0x6fc>
 8017a30:	2300      	movs	r3, #0
 8017a32:	4c2b      	ldr	r4, [pc, #172]	; (8017ae0 <__ieee754_pow+0x3f4>)
 8017a34:	9300      	str	r3, [sp, #0]
 8017a36:	9401      	str	r4, [sp, #4]
 8017a38:	9c02      	ldr	r4, [sp, #8]
 8017a3a:	9d03      	ldr	r5, [sp, #12]
 8017a3c:	9802      	ldr	r0, [sp, #8]
 8017a3e:	9903      	ldr	r1, [sp, #12]
 8017a40:	2400      	movs	r4, #0
 8017a42:	002b      	movs	r3, r5
 8017a44:	0022      	movs	r2, r4
 8017a46:	f7ea fdf7 	bl	8002638 <__aeabi_dsub>
 8017a4a:	0032      	movs	r2, r6
 8017a4c:	003b      	movs	r3, r7
 8017a4e:	f7ea fb87 	bl	8002160 <__aeabi_dmul>
 8017a52:	9a02      	ldr	r2, [sp, #8]
 8017a54:	9b03      	ldr	r3, [sp, #12]
 8017a56:	9006      	str	r0, [sp, #24]
 8017a58:	9107      	str	r1, [sp, #28]
 8017a5a:	9804      	ldr	r0, [sp, #16]
 8017a5c:	9905      	ldr	r1, [sp, #20]
 8017a5e:	f7ea fb7f 	bl	8002160 <__aeabi_dmul>
 8017a62:	0002      	movs	r2, r0
 8017a64:	000b      	movs	r3, r1
 8017a66:	9806      	ldr	r0, [sp, #24]
 8017a68:	9907      	ldr	r1, [sp, #28]
 8017a6a:	f7e9 fc3b 	bl	80012e4 <__aeabi_dadd>
 8017a6e:	0022      	movs	r2, r4
 8017a70:	002b      	movs	r3, r5
 8017a72:	9004      	str	r0, [sp, #16]
 8017a74:	9105      	str	r1, [sp, #20]
 8017a76:	0030      	movs	r0, r6
 8017a78:	0039      	movs	r1, r7
 8017a7a:	f7ea fb71 	bl	8002160 <__aeabi_dmul>
 8017a7e:	0006      	movs	r6, r0
 8017a80:	000f      	movs	r7, r1
 8017a82:	000b      	movs	r3, r1
 8017a84:	0002      	movs	r2, r0
 8017a86:	9804      	ldr	r0, [sp, #16]
 8017a88:	9905      	ldr	r1, [sp, #20]
 8017a8a:	9606      	str	r6, [sp, #24]
 8017a8c:	9707      	str	r7, [sp, #28]
 8017a8e:	f7e9 fc29 	bl	80012e4 <__aeabi_dadd>
 8017a92:	4b14      	ldr	r3, [pc, #80]	; (8017ae4 <__ieee754_pow+0x3f8>)
 8017a94:	0005      	movs	r5, r0
 8017a96:	000c      	movs	r4, r1
 8017a98:	9108      	str	r1, [sp, #32]
 8017a9a:	4299      	cmp	r1, r3
 8017a9c:	dc00      	bgt.n	8017aa0 <__ieee754_pow+0x3b4>
 8017a9e:	e2d6      	b.n	801804e <__ieee754_pow+0x962>
 8017aa0:	4b11      	ldr	r3, [pc, #68]	; (8017ae8 <__ieee754_pow+0x3fc>)
 8017aa2:	18cb      	adds	r3, r1, r3
 8017aa4:	4303      	orrs	r3, r0
 8017aa6:	d100      	bne.n	8017aaa <__ieee754_pow+0x3be>
 8017aa8:	e1d8      	b.n	8017e5c <__ieee754_pow+0x770>
 8017aaa:	9800      	ldr	r0, [sp, #0]
 8017aac:	9901      	ldr	r1, [sp, #4]
 8017aae:	2300      	movs	r3, #0
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	f7e8 fcd7 	bl	8000464 <__aeabi_dcmplt>
 8017ab6:	1e43      	subs	r3, r0, #1
 8017ab8:	4198      	sbcs	r0, r3
 8017aba:	e731      	b.n	8017920 <__ieee754_pow+0x234>
 8017abc:	3ff00000 	.word	0x3ff00000
 8017ac0:	3ff71547 	.word	0x3ff71547
 8017ac4:	f85ddf44 	.word	0xf85ddf44
 8017ac8:	3e54ae0b 	.word	0x3e54ae0b
 8017acc:	3fd00000 	.word	0x3fd00000
 8017ad0:	55555555 	.word	0x55555555
 8017ad4:	3fd55555 	.word	0x3fd55555
 8017ad8:	3fe00000 	.word	0x3fe00000
 8017adc:	652b82fe 	.word	0x652b82fe
 8017ae0:	bff00000 	.word	0xbff00000
 8017ae4:	408fffff 	.word	0x408fffff
 8017ae8:	bf700000 	.word	0xbf700000
 8017aec:	4bc0      	ldr	r3, [pc, #768]	; (8017df0 <__ieee754_pow+0x704>)
 8017aee:	2200      	movs	r2, #0
 8017af0:	422b      	tst	r3, r5
 8017af2:	d10a      	bne.n	8017b0a <__ieee754_pow+0x41e>
 8017af4:	9800      	ldr	r0, [sp, #0]
 8017af6:	9901      	ldr	r1, [sp, #4]
 8017af8:	2200      	movs	r2, #0
 8017afa:	4bbe      	ldr	r3, [pc, #760]	; (8017df4 <__ieee754_pow+0x708>)
 8017afc:	f7ea fb30 	bl	8002160 <__aeabi_dmul>
 8017b00:	2235      	movs	r2, #53	; 0x35
 8017b02:	9000      	str	r0, [sp, #0]
 8017b04:	9101      	str	r1, [sp, #4]
 8017b06:	9c01      	ldr	r4, [sp, #4]
 8017b08:	4252      	negs	r2, r2
 8017b0a:	49bb      	ldr	r1, [pc, #748]	; (8017df8 <__ieee754_pow+0x70c>)
 8017b0c:	1523      	asrs	r3, r4, #20
 8017b0e:	185b      	adds	r3, r3, r1
 8017b10:	189b      	adds	r3, r3, r2
 8017b12:	0324      	lsls	r4, r4, #12
 8017b14:	4db9      	ldr	r5, [pc, #740]	; (8017dfc <__ieee754_pow+0x710>)
 8017b16:	930d      	str	r3, [sp, #52]	; 0x34
 8017b18:	4bb9      	ldr	r3, [pc, #740]	; (8017e00 <__ieee754_pow+0x714>)
 8017b1a:	0b22      	lsrs	r2, r4, #12
 8017b1c:	4315      	orrs	r5, r2
 8017b1e:	2400      	movs	r4, #0
 8017b20:	429a      	cmp	r2, r3
 8017b22:	dd09      	ble.n	8017b38 <__ieee754_pow+0x44c>
 8017b24:	4bb7      	ldr	r3, [pc, #732]	; (8017e04 <__ieee754_pow+0x718>)
 8017b26:	3401      	adds	r4, #1
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	dd05      	ble.n	8017b38 <__ieee754_pow+0x44c>
 8017b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b2e:	191b      	adds	r3, r3, r4
 8017b30:	2400      	movs	r4, #0
 8017b32:	930d      	str	r3, [sp, #52]	; 0x34
 8017b34:	4bb4      	ldr	r3, [pc, #720]	; (8017e08 <__ieee754_pow+0x71c>)
 8017b36:	18ed      	adds	r5, r5, r3
 8017b38:	00e3      	lsls	r3, r4, #3
 8017b3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b3c:	4bb3      	ldr	r3, [pc, #716]	; (8017e0c <__ieee754_pow+0x720>)
 8017b3e:	00e2      	lsls	r2, r4, #3
 8017b40:	189b      	adds	r3, r3, r2
 8017b42:	9800      	ldr	r0, [sp, #0]
 8017b44:	9901      	ldr	r1, [sp, #4]
 8017b46:	681a      	ldr	r2, [r3, #0]
 8017b48:	685b      	ldr	r3, [r3, #4]
 8017b4a:	0029      	movs	r1, r5
 8017b4c:	0006      	movs	r6, r0
 8017b4e:	920a      	str	r2, [sp, #40]	; 0x28
 8017b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b52:	f7ea fd71 	bl	8002638 <__aeabi_dsub>
 8017b56:	0032      	movs	r2, r6
 8017b58:	002b      	movs	r3, r5
 8017b5a:	9010      	str	r0, [sp, #64]	; 0x40
 8017b5c:	9111      	str	r1, [sp, #68]	; 0x44
 8017b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b62:	f7e9 fbbf 	bl	80012e4 <__aeabi_dadd>
 8017b66:	0002      	movs	r2, r0
 8017b68:	000b      	movs	r3, r1
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	49a3      	ldr	r1, [pc, #652]	; (8017dfc <__ieee754_pow+0x710>)
 8017b6e:	f7e9 fef5 	bl	800195c <__aeabi_ddiv>
 8017b72:	0002      	movs	r2, r0
 8017b74:	000b      	movs	r3, r1
 8017b76:	9012      	str	r0, [sp, #72]	; 0x48
 8017b78:	9113      	str	r1, [sp, #76]	; 0x4c
 8017b7a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017b7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017b7e:	f7ea faef 	bl	8002160 <__aeabi_dmul>
 8017b82:	9008      	str	r0, [sp, #32]
 8017b84:	9109      	str	r1, [sp, #36]	; 0x24
 8017b86:	9a08      	ldr	r2, [sp, #32]
 8017b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b8a:	2180      	movs	r1, #128	; 0x80
 8017b8c:	9204      	str	r2, [sp, #16]
 8017b8e:	9305      	str	r3, [sp, #20]
 8017b90:	2300      	movs	r3, #0
 8017b92:	002f      	movs	r7, r5
 8017b94:	0589      	lsls	r1, r1, #22
 8017b96:	106d      	asrs	r5, r5, #1
 8017b98:	430d      	orrs	r5, r1
 8017b9a:	2180      	movs	r1, #128	; 0x80
 8017b9c:	9304      	str	r3, [sp, #16]
 8017b9e:	9a04      	ldr	r2, [sp, #16]
 8017ba0:	9b05      	ldr	r3, [sp, #20]
 8017ba2:	9200      	str	r2, [sp, #0]
 8017ba4:	9301      	str	r3, [sp, #4]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	0309      	lsls	r1, r1, #12
 8017baa:	186d      	adds	r5, r5, r1
 8017bac:	04a1      	lsls	r1, r4, #18
 8017bae:	186b      	adds	r3, r5, r1
 8017bb0:	9800      	ldr	r0, [sp, #0]
 8017bb2:	9901      	ldr	r1, [sp, #4]
 8017bb4:	0014      	movs	r4, r2
 8017bb6:	001d      	movs	r5, r3
 8017bb8:	f7ea fad2 	bl	8002160 <__aeabi_dmul>
 8017bbc:	0002      	movs	r2, r0
 8017bbe:	000b      	movs	r3, r1
 8017bc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017bc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017bc4:	f7ea fd38 	bl	8002638 <__aeabi_dsub>
 8017bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bcc:	9010      	str	r0, [sp, #64]	; 0x40
 8017bce:	9111      	str	r1, [sp, #68]	; 0x44
 8017bd0:	0020      	movs	r0, r4
 8017bd2:	0029      	movs	r1, r5
 8017bd4:	f7ea fd30 	bl	8002638 <__aeabi_dsub>
 8017bd8:	0002      	movs	r2, r0
 8017bda:	000b      	movs	r3, r1
 8017bdc:	0030      	movs	r0, r6
 8017bde:	0039      	movs	r1, r7
 8017be0:	f7ea fd2a 	bl	8002638 <__aeabi_dsub>
 8017be4:	9a00      	ldr	r2, [sp, #0]
 8017be6:	9b01      	ldr	r3, [sp, #4]
 8017be8:	f7ea faba 	bl	8002160 <__aeabi_dmul>
 8017bec:	0002      	movs	r2, r0
 8017bee:	000b      	movs	r3, r1
 8017bf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017bf2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017bf4:	f7ea fd20 	bl	8002638 <__aeabi_dsub>
 8017bf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017bfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017bfc:	f7ea fab0 	bl	8002160 <__aeabi_dmul>
 8017c00:	9a08      	ldr	r2, [sp, #32]
 8017c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c04:	900a      	str	r0, [sp, #40]	; 0x28
 8017c06:	910b      	str	r1, [sp, #44]	; 0x2c
 8017c08:	0010      	movs	r0, r2
 8017c0a:	0019      	movs	r1, r3
 8017c0c:	f7ea faa8 	bl	8002160 <__aeabi_dmul>
 8017c10:	0006      	movs	r6, r0
 8017c12:	000f      	movs	r7, r1
 8017c14:	4a7e      	ldr	r2, [pc, #504]	; (8017e10 <__ieee754_pow+0x724>)
 8017c16:	4b7f      	ldr	r3, [pc, #508]	; (8017e14 <__ieee754_pow+0x728>)
 8017c18:	f7ea faa2 	bl	8002160 <__aeabi_dmul>
 8017c1c:	4a7e      	ldr	r2, [pc, #504]	; (8017e18 <__ieee754_pow+0x72c>)
 8017c1e:	4b7f      	ldr	r3, [pc, #508]	; (8017e1c <__ieee754_pow+0x730>)
 8017c20:	f7e9 fb60 	bl	80012e4 <__aeabi_dadd>
 8017c24:	0032      	movs	r2, r6
 8017c26:	003b      	movs	r3, r7
 8017c28:	f7ea fa9a 	bl	8002160 <__aeabi_dmul>
 8017c2c:	4a7c      	ldr	r2, [pc, #496]	; (8017e20 <__ieee754_pow+0x734>)
 8017c2e:	4b7d      	ldr	r3, [pc, #500]	; (8017e24 <__ieee754_pow+0x738>)
 8017c30:	f7e9 fb58 	bl	80012e4 <__aeabi_dadd>
 8017c34:	0032      	movs	r2, r6
 8017c36:	003b      	movs	r3, r7
 8017c38:	f7ea fa92 	bl	8002160 <__aeabi_dmul>
 8017c3c:	4a7a      	ldr	r2, [pc, #488]	; (8017e28 <__ieee754_pow+0x73c>)
 8017c3e:	4b7b      	ldr	r3, [pc, #492]	; (8017e2c <__ieee754_pow+0x740>)
 8017c40:	f7e9 fb50 	bl	80012e4 <__aeabi_dadd>
 8017c44:	0032      	movs	r2, r6
 8017c46:	003b      	movs	r3, r7
 8017c48:	f7ea fa8a 	bl	8002160 <__aeabi_dmul>
 8017c4c:	4a78      	ldr	r2, [pc, #480]	; (8017e30 <__ieee754_pow+0x744>)
 8017c4e:	4b79      	ldr	r3, [pc, #484]	; (8017e34 <__ieee754_pow+0x748>)
 8017c50:	f7e9 fb48 	bl	80012e4 <__aeabi_dadd>
 8017c54:	0032      	movs	r2, r6
 8017c56:	003b      	movs	r3, r7
 8017c58:	f7ea fa82 	bl	8002160 <__aeabi_dmul>
 8017c5c:	4a76      	ldr	r2, [pc, #472]	; (8017e38 <__ieee754_pow+0x74c>)
 8017c5e:	4b77      	ldr	r3, [pc, #476]	; (8017e3c <__ieee754_pow+0x750>)
 8017c60:	f7e9 fb40 	bl	80012e4 <__aeabi_dadd>
 8017c64:	0032      	movs	r2, r6
 8017c66:	0004      	movs	r4, r0
 8017c68:	000d      	movs	r5, r1
 8017c6a:	003b      	movs	r3, r7
 8017c6c:	0030      	movs	r0, r6
 8017c6e:	0039      	movs	r1, r7
 8017c70:	f7ea fa76 	bl	8002160 <__aeabi_dmul>
 8017c74:	0002      	movs	r2, r0
 8017c76:	000b      	movs	r3, r1
 8017c78:	0020      	movs	r0, r4
 8017c7a:	0029      	movs	r1, r5
 8017c7c:	f7ea fa70 	bl	8002160 <__aeabi_dmul>
 8017c80:	9a00      	ldr	r2, [sp, #0]
 8017c82:	9b01      	ldr	r3, [sp, #4]
 8017c84:	0004      	movs	r4, r0
 8017c86:	000d      	movs	r5, r1
 8017c88:	9808      	ldr	r0, [sp, #32]
 8017c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017c8c:	f7e9 fb2a 	bl	80012e4 <__aeabi_dadd>
 8017c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c94:	f7ea fa64 	bl	8002160 <__aeabi_dmul>
 8017c98:	0022      	movs	r2, r4
 8017c9a:	002b      	movs	r3, r5
 8017c9c:	f7e9 fb22 	bl	80012e4 <__aeabi_dadd>
 8017ca0:	9a00      	ldr	r2, [sp, #0]
 8017ca2:	9b01      	ldr	r3, [sp, #4]
 8017ca4:	9010      	str	r0, [sp, #64]	; 0x40
 8017ca6:	9111      	str	r1, [sp, #68]	; 0x44
 8017ca8:	0010      	movs	r0, r2
 8017caa:	0019      	movs	r1, r3
 8017cac:	f7ea fa58 	bl	8002160 <__aeabi_dmul>
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	4b63      	ldr	r3, [pc, #396]	; (8017e40 <__ieee754_pow+0x754>)
 8017cb4:	0004      	movs	r4, r0
 8017cb6:	000d      	movs	r5, r1
 8017cb8:	f7e9 fb14 	bl	80012e4 <__aeabi_dadd>
 8017cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017cc0:	f7e9 fb10 	bl	80012e4 <__aeabi_dadd>
 8017cc4:	2600      	movs	r6, #0
 8017cc6:	000f      	movs	r7, r1
 8017cc8:	0032      	movs	r2, r6
 8017cca:	000b      	movs	r3, r1
 8017ccc:	9800      	ldr	r0, [sp, #0]
 8017cce:	9901      	ldr	r1, [sp, #4]
 8017cd0:	f7ea fa46 	bl	8002160 <__aeabi_dmul>
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	9000      	str	r0, [sp, #0]
 8017cd8:	9101      	str	r1, [sp, #4]
 8017cda:	4b59      	ldr	r3, [pc, #356]	; (8017e40 <__ieee754_pow+0x754>)
 8017cdc:	0030      	movs	r0, r6
 8017cde:	0039      	movs	r1, r7
 8017ce0:	f7ea fcaa 	bl	8002638 <__aeabi_dsub>
 8017ce4:	0022      	movs	r2, r4
 8017ce6:	002b      	movs	r3, r5
 8017ce8:	f7ea fca6 	bl	8002638 <__aeabi_dsub>
 8017cec:	0002      	movs	r2, r0
 8017cee:	000b      	movs	r3, r1
 8017cf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017cf2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017cf4:	f7ea fca0 	bl	8002638 <__aeabi_dsub>
 8017cf8:	9a08      	ldr	r2, [sp, #32]
 8017cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cfc:	f7ea fa30 	bl	8002160 <__aeabi_dmul>
 8017d00:	0032      	movs	r2, r6
 8017d02:	0004      	movs	r4, r0
 8017d04:	000d      	movs	r5, r1
 8017d06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d0a:	003b      	movs	r3, r7
 8017d0c:	f7ea fa28 	bl	8002160 <__aeabi_dmul>
 8017d10:	0002      	movs	r2, r0
 8017d12:	000b      	movs	r3, r1
 8017d14:	0020      	movs	r0, r4
 8017d16:	0029      	movs	r1, r5
 8017d18:	f7e9 fae4 	bl	80012e4 <__aeabi_dadd>
 8017d1c:	0004      	movs	r4, r0
 8017d1e:	000d      	movs	r5, r1
 8017d20:	0002      	movs	r2, r0
 8017d22:	000b      	movs	r3, r1
 8017d24:	9800      	ldr	r0, [sp, #0]
 8017d26:	9901      	ldr	r1, [sp, #4]
 8017d28:	f7e9 fadc 	bl	80012e4 <__aeabi_dadd>
 8017d2c:	2600      	movs	r6, #0
 8017d2e:	22e0      	movs	r2, #224	; 0xe0
 8017d30:	4b44      	ldr	r3, [pc, #272]	; (8017e44 <__ieee754_pow+0x758>)
 8017d32:	0612      	lsls	r2, r2, #24
 8017d34:	0030      	movs	r0, r6
 8017d36:	000f      	movs	r7, r1
 8017d38:	f7ea fa12 	bl	8002160 <__aeabi_dmul>
 8017d3c:	9008      	str	r0, [sp, #32]
 8017d3e:	9109      	str	r1, [sp, #36]	; 0x24
 8017d40:	9a00      	ldr	r2, [sp, #0]
 8017d42:	9b01      	ldr	r3, [sp, #4]
 8017d44:	0039      	movs	r1, r7
 8017d46:	0030      	movs	r0, r6
 8017d48:	f7ea fc76 	bl	8002638 <__aeabi_dsub>
 8017d4c:	0002      	movs	r2, r0
 8017d4e:	000b      	movs	r3, r1
 8017d50:	0020      	movs	r0, r4
 8017d52:	0029      	movs	r1, r5
 8017d54:	f7ea fc70 	bl	8002638 <__aeabi_dsub>
 8017d58:	4a3b      	ldr	r2, [pc, #236]	; (8017e48 <__ieee754_pow+0x75c>)
 8017d5a:	4b3a      	ldr	r3, [pc, #232]	; (8017e44 <__ieee754_pow+0x758>)
 8017d5c:	f7ea fa00 	bl	8002160 <__aeabi_dmul>
 8017d60:	4a3a      	ldr	r2, [pc, #232]	; (8017e4c <__ieee754_pow+0x760>)
 8017d62:	0004      	movs	r4, r0
 8017d64:	000d      	movs	r5, r1
 8017d66:	4b3a      	ldr	r3, [pc, #232]	; (8017e50 <__ieee754_pow+0x764>)
 8017d68:	0039      	movs	r1, r7
 8017d6a:	0030      	movs	r0, r6
 8017d6c:	f7ea f9f8 	bl	8002160 <__aeabi_dmul>
 8017d70:	0002      	movs	r2, r0
 8017d72:	000b      	movs	r3, r1
 8017d74:	0020      	movs	r0, r4
 8017d76:	0029      	movs	r1, r5
 8017d78:	f7e9 fab4 	bl	80012e4 <__aeabi_dadd>
 8017d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d7e:	4b35      	ldr	r3, [pc, #212]	; (8017e54 <__ieee754_pow+0x768>)
 8017d80:	189b      	adds	r3, r3, r2
 8017d82:	681a      	ldr	r2, [r3, #0]
 8017d84:	685b      	ldr	r3, [r3, #4]
 8017d86:	f7e9 faad 	bl	80012e4 <__aeabi_dadd>
 8017d8a:	900a      	str	r0, [sp, #40]	; 0x28
 8017d8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8017d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017d90:	f7eb f838 	bl	8002e04 <__aeabi_i2d>
 8017d94:	0004      	movs	r4, r0
 8017d96:	000d      	movs	r5, r1
 8017d98:	9808      	ldr	r0, [sp, #32]
 8017d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d9e:	4b2e      	ldr	r3, [pc, #184]	; (8017e58 <__ieee754_pow+0x76c>)
 8017da0:	189b      	adds	r3, r3, r2
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	685b      	ldr	r3, [r3, #4]
 8017da6:	9200      	str	r2, [sp, #0]
 8017da8:	9301      	str	r3, [sp, #4]
 8017daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dae:	f7e9 fa99 	bl	80012e4 <__aeabi_dadd>
 8017db2:	9a00      	ldr	r2, [sp, #0]
 8017db4:	9b01      	ldr	r3, [sp, #4]
 8017db6:	f7e9 fa95 	bl	80012e4 <__aeabi_dadd>
 8017dba:	0022      	movs	r2, r4
 8017dbc:	002b      	movs	r3, r5
 8017dbe:	f7e9 fa91 	bl	80012e4 <__aeabi_dadd>
 8017dc2:	0022      	movs	r2, r4
 8017dc4:	002b      	movs	r3, r5
 8017dc6:	0030      	movs	r0, r6
 8017dc8:	000f      	movs	r7, r1
 8017dca:	f7ea fc35 	bl	8002638 <__aeabi_dsub>
 8017dce:	9a00      	ldr	r2, [sp, #0]
 8017dd0:	9b01      	ldr	r3, [sp, #4]
 8017dd2:	f7ea fc31 	bl	8002638 <__aeabi_dsub>
 8017dd6:	9a08      	ldr	r2, [sp, #32]
 8017dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dda:	f7ea fc2d 	bl	8002638 <__aeabi_dsub>
 8017dde:	0002      	movs	r2, r0
 8017de0:	000b      	movs	r3, r1
 8017de2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017de6:	e619      	b.n	8017a1c <__ieee754_pow+0x330>
 8017de8:	2300      	movs	r3, #0
 8017dea:	4c04      	ldr	r4, [pc, #16]	; (8017dfc <__ieee754_pow+0x710>)
 8017dec:	e622      	b.n	8017a34 <__ieee754_pow+0x348>
 8017dee:	46c0      	nop			; (mov r8, r8)
 8017df0:	7ff00000 	.word	0x7ff00000
 8017df4:	43400000 	.word	0x43400000
 8017df8:	fffffc01 	.word	0xfffffc01
 8017dfc:	3ff00000 	.word	0x3ff00000
 8017e00:	0003988e 	.word	0x0003988e
 8017e04:	000bb679 	.word	0x000bb679
 8017e08:	fff00000 	.word	0xfff00000
 8017e0c:	08018e78 	.word	0x08018e78
 8017e10:	4a454eef 	.word	0x4a454eef
 8017e14:	3fca7e28 	.word	0x3fca7e28
 8017e18:	93c9db65 	.word	0x93c9db65
 8017e1c:	3fcd864a 	.word	0x3fcd864a
 8017e20:	a91d4101 	.word	0xa91d4101
 8017e24:	3fd17460 	.word	0x3fd17460
 8017e28:	518f264d 	.word	0x518f264d
 8017e2c:	3fd55555 	.word	0x3fd55555
 8017e30:	db6fabff 	.word	0xdb6fabff
 8017e34:	3fdb6db6 	.word	0x3fdb6db6
 8017e38:	33333303 	.word	0x33333303
 8017e3c:	3fe33333 	.word	0x3fe33333
 8017e40:	40080000 	.word	0x40080000
 8017e44:	3feec709 	.word	0x3feec709
 8017e48:	dc3a03fd 	.word	0xdc3a03fd
 8017e4c:	145b01f5 	.word	0x145b01f5
 8017e50:	be3e2fe0 	.word	0xbe3e2fe0
 8017e54:	08018e98 	.word	0x08018e98
 8017e58:	08018e88 	.word	0x08018e88
 8017e5c:	4a90      	ldr	r2, [pc, #576]	; (80180a0 <__ieee754_pow+0x9b4>)
 8017e5e:	4b91      	ldr	r3, [pc, #580]	; (80180a4 <__ieee754_pow+0x9b8>)
 8017e60:	9804      	ldr	r0, [sp, #16]
 8017e62:	9905      	ldr	r1, [sp, #20]
 8017e64:	f7e9 fa3e 	bl	80012e4 <__aeabi_dadd>
 8017e68:	0032      	movs	r2, r6
 8017e6a:	9002      	str	r0, [sp, #8]
 8017e6c:	9103      	str	r1, [sp, #12]
 8017e6e:	003b      	movs	r3, r7
 8017e70:	0028      	movs	r0, r5
 8017e72:	0021      	movs	r1, r4
 8017e74:	f7ea fbe0 	bl	8002638 <__aeabi_dsub>
 8017e78:	0002      	movs	r2, r0
 8017e7a:	000b      	movs	r3, r1
 8017e7c:	9802      	ldr	r0, [sp, #8]
 8017e7e:	9903      	ldr	r1, [sp, #12]
 8017e80:	f7e8 fb04 	bl	800048c <__aeabi_dcmpgt>
 8017e84:	2800      	cmp	r0, #0
 8017e86:	d000      	beq.n	8017e8a <__ieee754_pow+0x79e>
 8017e88:	e60f      	b.n	8017aaa <__ieee754_pow+0x3be>
 8017e8a:	2100      	movs	r1, #0
 8017e8c:	4a86      	ldr	r2, [pc, #536]	; (80180a8 <__ieee754_pow+0x9bc>)
 8017e8e:	0063      	lsls	r3, r4, #1
 8017e90:	085b      	lsrs	r3, r3, #1
 8017e92:	9102      	str	r1, [sp, #8]
 8017e94:	4293      	cmp	r3, r2
 8017e96:	dd25      	ble.n	8017ee4 <__ieee754_pow+0x7f8>
 8017e98:	4a84      	ldr	r2, [pc, #528]	; (80180ac <__ieee754_pow+0x9c0>)
 8017e9a:	151b      	asrs	r3, r3, #20
 8017e9c:	189b      	adds	r3, r3, r2
 8017e9e:	2280      	movs	r2, #128	; 0x80
 8017ea0:	0352      	lsls	r2, r2, #13
 8017ea2:	4694      	mov	ip, r2
 8017ea4:	411a      	asrs	r2, r3
 8017ea6:	1914      	adds	r4, r2, r4
 8017ea8:	4b81      	ldr	r3, [pc, #516]	; (80180b0 <__ieee754_pow+0x9c4>)
 8017eaa:	0060      	lsls	r0, r4, #1
 8017eac:	4d81      	ldr	r5, [pc, #516]	; (80180b4 <__ieee754_pow+0x9c8>)
 8017eae:	0d40      	lsrs	r0, r0, #21
 8017eb0:	18c0      	adds	r0, r0, r3
 8017eb2:	4105      	asrs	r5, r0
 8017eb4:	0021      	movs	r1, r4
 8017eb6:	43a9      	bics	r1, r5
 8017eb8:	000b      	movs	r3, r1
 8017eba:	4661      	mov	r1, ip
 8017ebc:	0324      	lsls	r4, r4, #12
 8017ebe:	0b24      	lsrs	r4, r4, #12
 8017ec0:	4321      	orrs	r1, r4
 8017ec2:	2414      	movs	r4, #20
 8017ec4:	1a20      	subs	r0, r4, r0
 8017ec6:	4101      	asrs	r1, r0
 8017ec8:	9102      	str	r1, [sp, #8]
 8017eca:	9908      	ldr	r1, [sp, #32]
 8017ecc:	2200      	movs	r2, #0
 8017ece:	2900      	cmp	r1, #0
 8017ed0:	da02      	bge.n	8017ed8 <__ieee754_pow+0x7ec>
 8017ed2:	9902      	ldr	r1, [sp, #8]
 8017ed4:	4249      	negs	r1, r1
 8017ed6:	9102      	str	r1, [sp, #8]
 8017ed8:	0030      	movs	r0, r6
 8017eda:	0039      	movs	r1, r7
 8017edc:	f7ea fbac 	bl	8002638 <__aeabi_dsub>
 8017ee0:	9006      	str	r0, [sp, #24]
 8017ee2:	9107      	str	r1, [sp, #28]
 8017ee4:	9a04      	ldr	r2, [sp, #16]
 8017ee6:	9b05      	ldr	r3, [sp, #20]
 8017ee8:	9806      	ldr	r0, [sp, #24]
 8017eea:	9907      	ldr	r1, [sp, #28]
 8017eec:	2600      	movs	r6, #0
 8017eee:	f7e9 f9f9 	bl	80012e4 <__aeabi_dadd>
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	0030      	movs	r0, r6
 8017ef6:	4b70      	ldr	r3, [pc, #448]	; (80180b8 <__ieee754_pow+0x9cc>)
 8017ef8:	000f      	movs	r7, r1
 8017efa:	f7ea f931 	bl	8002160 <__aeabi_dmul>
 8017efe:	9a06      	ldr	r2, [sp, #24]
 8017f00:	9b07      	ldr	r3, [sp, #28]
 8017f02:	9008      	str	r0, [sp, #32]
 8017f04:	9109      	str	r1, [sp, #36]	; 0x24
 8017f06:	0030      	movs	r0, r6
 8017f08:	0039      	movs	r1, r7
 8017f0a:	f7ea fb95 	bl	8002638 <__aeabi_dsub>
 8017f0e:	0002      	movs	r2, r0
 8017f10:	000b      	movs	r3, r1
 8017f12:	9804      	ldr	r0, [sp, #16]
 8017f14:	9905      	ldr	r1, [sp, #20]
 8017f16:	f7ea fb8f 	bl	8002638 <__aeabi_dsub>
 8017f1a:	4a68      	ldr	r2, [pc, #416]	; (80180bc <__ieee754_pow+0x9d0>)
 8017f1c:	4b68      	ldr	r3, [pc, #416]	; (80180c0 <__ieee754_pow+0x9d4>)
 8017f1e:	f7ea f91f 	bl	8002160 <__aeabi_dmul>
 8017f22:	4a68      	ldr	r2, [pc, #416]	; (80180c4 <__ieee754_pow+0x9d8>)
 8017f24:	0004      	movs	r4, r0
 8017f26:	000d      	movs	r5, r1
 8017f28:	0030      	movs	r0, r6
 8017f2a:	0039      	movs	r1, r7
 8017f2c:	4b66      	ldr	r3, [pc, #408]	; (80180c8 <__ieee754_pow+0x9dc>)
 8017f2e:	f7ea f917 	bl	8002160 <__aeabi_dmul>
 8017f32:	0002      	movs	r2, r0
 8017f34:	000b      	movs	r3, r1
 8017f36:	0020      	movs	r0, r4
 8017f38:	0029      	movs	r1, r5
 8017f3a:	f7e9 f9d3 	bl	80012e4 <__aeabi_dadd>
 8017f3e:	0004      	movs	r4, r0
 8017f40:	000d      	movs	r5, r1
 8017f42:	0002      	movs	r2, r0
 8017f44:	000b      	movs	r3, r1
 8017f46:	9808      	ldr	r0, [sp, #32]
 8017f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f4a:	f7e9 f9cb 	bl	80012e4 <__aeabi_dadd>
 8017f4e:	9a08      	ldr	r2, [sp, #32]
 8017f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f52:	0006      	movs	r6, r0
 8017f54:	000f      	movs	r7, r1
 8017f56:	f7ea fb6f 	bl	8002638 <__aeabi_dsub>
 8017f5a:	0002      	movs	r2, r0
 8017f5c:	000b      	movs	r3, r1
 8017f5e:	0020      	movs	r0, r4
 8017f60:	0029      	movs	r1, r5
 8017f62:	f7ea fb69 	bl	8002638 <__aeabi_dsub>
 8017f66:	0032      	movs	r2, r6
 8017f68:	9004      	str	r0, [sp, #16]
 8017f6a:	9105      	str	r1, [sp, #20]
 8017f6c:	003b      	movs	r3, r7
 8017f6e:	0030      	movs	r0, r6
 8017f70:	0039      	movs	r1, r7
 8017f72:	f7ea f8f5 	bl	8002160 <__aeabi_dmul>
 8017f76:	0004      	movs	r4, r0
 8017f78:	000d      	movs	r5, r1
 8017f7a:	4a54      	ldr	r2, [pc, #336]	; (80180cc <__ieee754_pow+0x9e0>)
 8017f7c:	4b54      	ldr	r3, [pc, #336]	; (80180d0 <__ieee754_pow+0x9e4>)
 8017f7e:	f7ea f8ef 	bl	8002160 <__aeabi_dmul>
 8017f82:	4a54      	ldr	r2, [pc, #336]	; (80180d4 <__ieee754_pow+0x9e8>)
 8017f84:	4b54      	ldr	r3, [pc, #336]	; (80180d8 <__ieee754_pow+0x9ec>)
 8017f86:	f7ea fb57 	bl	8002638 <__aeabi_dsub>
 8017f8a:	0022      	movs	r2, r4
 8017f8c:	002b      	movs	r3, r5
 8017f8e:	f7ea f8e7 	bl	8002160 <__aeabi_dmul>
 8017f92:	4a52      	ldr	r2, [pc, #328]	; (80180dc <__ieee754_pow+0x9f0>)
 8017f94:	4b52      	ldr	r3, [pc, #328]	; (80180e0 <__ieee754_pow+0x9f4>)
 8017f96:	f7e9 f9a5 	bl	80012e4 <__aeabi_dadd>
 8017f9a:	0022      	movs	r2, r4
 8017f9c:	002b      	movs	r3, r5
 8017f9e:	f7ea f8df 	bl	8002160 <__aeabi_dmul>
 8017fa2:	4a50      	ldr	r2, [pc, #320]	; (80180e4 <__ieee754_pow+0x9f8>)
 8017fa4:	4b50      	ldr	r3, [pc, #320]	; (80180e8 <__ieee754_pow+0x9fc>)
 8017fa6:	f7ea fb47 	bl	8002638 <__aeabi_dsub>
 8017faa:	0022      	movs	r2, r4
 8017fac:	002b      	movs	r3, r5
 8017fae:	f7ea f8d7 	bl	8002160 <__aeabi_dmul>
 8017fb2:	4a4e      	ldr	r2, [pc, #312]	; (80180ec <__ieee754_pow+0xa00>)
 8017fb4:	4b4e      	ldr	r3, [pc, #312]	; (80180f0 <__ieee754_pow+0xa04>)
 8017fb6:	f7e9 f995 	bl	80012e4 <__aeabi_dadd>
 8017fba:	0022      	movs	r2, r4
 8017fbc:	002b      	movs	r3, r5
 8017fbe:	f7ea f8cf 	bl	8002160 <__aeabi_dmul>
 8017fc2:	0002      	movs	r2, r0
 8017fc4:	000b      	movs	r3, r1
 8017fc6:	0030      	movs	r0, r6
 8017fc8:	0039      	movs	r1, r7
 8017fca:	f7ea fb35 	bl	8002638 <__aeabi_dsub>
 8017fce:	0004      	movs	r4, r0
 8017fd0:	000d      	movs	r5, r1
 8017fd2:	0002      	movs	r2, r0
 8017fd4:	000b      	movs	r3, r1
 8017fd6:	0030      	movs	r0, r6
 8017fd8:	0039      	movs	r1, r7
 8017fda:	f7ea f8c1 	bl	8002160 <__aeabi_dmul>
 8017fde:	2380      	movs	r3, #128	; 0x80
 8017fe0:	9006      	str	r0, [sp, #24]
 8017fe2:	9107      	str	r1, [sp, #28]
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	0020      	movs	r0, r4
 8017fe8:	0029      	movs	r1, r5
 8017fea:	05db      	lsls	r3, r3, #23
 8017fec:	f7ea fb24 	bl	8002638 <__aeabi_dsub>
 8017ff0:	0002      	movs	r2, r0
 8017ff2:	000b      	movs	r3, r1
 8017ff4:	9806      	ldr	r0, [sp, #24]
 8017ff6:	9907      	ldr	r1, [sp, #28]
 8017ff8:	f7e9 fcb0 	bl	800195c <__aeabi_ddiv>
 8017ffc:	9a04      	ldr	r2, [sp, #16]
 8017ffe:	9b05      	ldr	r3, [sp, #20]
 8018000:	0004      	movs	r4, r0
 8018002:	000d      	movs	r5, r1
 8018004:	0030      	movs	r0, r6
 8018006:	0039      	movs	r1, r7
 8018008:	f7ea f8aa 	bl	8002160 <__aeabi_dmul>
 801800c:	9a04      	ldr	r2, [sp, #16]
 801800e:	9b05      	ldr	r3, [sp, #20]
 8018010:	f7e9 f968 	bl	80012e4 <__aeabi_dadd>
 8018014:	0002      	movs	r2, r0
 8018016:	000b      	movs	r3, r1
 8018018:	0020      	movs	r0, r4
 801801a:	0029      	movs	r1, r5
 801801c:	f7ea fb0c 	bl	8002638 <__aeabi_dsub>
 8018020:	0032      	movs	r2, r6
 8018022:	003b      	movs	r3, r7
 8018024:	f7ea fb08 	bl	8002638 <__aeabi_dsub>
 8018028:	0002      	movs	r2, r0
 801802a:	000b      	movs	r3, r1
 801802c:	2000      	movs	r0, #0
 801802e:	4931      	ldr	r1, [pc, #196]	; (80180f4 <__ieee754_pow+0xa08>)
 8018030:	f7ea fb02 	bl	8002638 <__aeabi_dsub>
 8018034:	9b02      	ldr	r3, [sp, #8]
 8018036:	051b      	lsls	r3, r3, #20
 8018038:	185b      	adds	r3, r3, r1
 801803a:	151a      	asrs	r2, r3, #20
 801803c:	2a00      	cmp	r2, #0
 801803e:	dc25      	bgt.n	801808c <__ieee754_pow+0x9a0>
 8018040:	9a02      	ldr	r2, [sp, #8]
 8018042:	f000 f94f 	bl	80182e4 <scalbn>
 8018046:	9a00      	ldr	r2, [sp, #0]
 8018048:	9b01      	ldr	r3, [sp, #4]
 801804a:	f7ff fc33 	bl	80178b4 <__ieee754_pow+0x1c8>
 801804e:	4a2a      	ldr	r2, [pc, #168]	; (80180f8 <__ieee754_pow+0xa0c>)
 8018050:	004b      	lsls	r3, r1, #1
 8018052:	085b      	lsrs	r3, r3, #1
 8018054:	4293      	cmp	r3, r2
 8018056:	dc00      	bgt.n	801805a <__ieee754_pow+0x96e>
 8018058:	e717      	b.n	8017e8a <__ieee754_pow+0x79e>
 801805a:	4b28      	ldr	r3, [pc, #160]	; (80180fc <__ieee754_pow+0xa10>)
 801805c:	18cb      	adds	r3, r1, r3
 801805e:	4303      	orrs	r3, r0
 8018060:	d008      	beq.n	8018074 <__ieee754_pow+0x988>
 8018062:	9800      	ldr	r0, [sp, #0]
 8018064:	9901      	ldr	r1, [sp, #4]
 8018066:	2300      	movs	r3, #0
 8018068:	2200      	movs	r2, #0
 801806a:	f7e8 f9fb 	bl	8000464 <__aeabi_dcmplt>
 801806e:	1e43      	subs	r3, r0, #1
 8018070:	4198      	sbcs	r0, r3
 8018072:	e462      	b.n	801793a <__ieee754_pow+0x24e>
 8018074:	0032      	movs	r2, r6
 8018076:	003b      	movs	r3, r7
 8018078:	f7ea fade 	bl	8002638 <__aeabi_dsub>
 801807c:	9a04      	ldr	r2, [sp, #16]
 801807e:	9b05      	ldr	r3, [sp, #20]
 8018080:	f7e8 fa0e 	bl	80004a0 <__aeabi_dcmpge>
 8018084:	2800      	cmp	r0, #0
 8018086:	d100      	bne.n	801808a <__ieee754_pow+0x99e>
 8018088:	e6ff      	b.n	8017e8a <__ieee754_pow+0x79e>
 801808a:	e7ea      	b.n	8018062 <__ieee754_pow+0x976>
 801808c:	0019      	movs	r1, r3
 801808e:	e7da      	b.n	8018046 <__ieee754_pow+0x95a>
 8018090:	2300      	movs	r3, #0
 8018092:	4c18      	ldr	r4, [pc, #96]	; (80180f4 <__ieee754_pow+0xa08>)
 8018094:	f7ff fbf1 	bl	801787a <__ieee754_pow+0x18e>
 8018098:	2300      	movs	r3, #0
 801809a:	2400      	movs	r4, #0
 801809c:	f7ff fbed 	bl	801787a <__ieee754_pow+0x18e>
 80180a0:	652b82fe 	.word	0x652b82fe
 80180a4:	3c971547 	.word	0x3c971547
 80180a8:	3fe00000 	.word	0x3fe00000
 80180ac:	fffffc02 	.word	0xfffffc02
 80180b0:	fffffc01 	.word	0xfffffc01
 80180b4:	000fffff 	.word	0x000fffff
 80180b8:	3fe62e43 	.word	0x3fe62e43
 80180bc:	fefa39ef 	.word	0xfefa39ef
 80180c0:	3fe62e42 	.word	0x3fe62e42
 80180c4:	0ca86c39 	.word	0x0ca86c39
 80180c8:	be205c61 	.word	0xbe205c61
 80180cc:	72bea4d0 	.word	0x72bea4d0
 80180d0:	3e663769 	.word	0x3e663769
 80180d4:	c5d26bf1 	.word	0xc5d26bf1
 80180d8:	3ebbbd41 	.word	0x3ebbbd41
 80180dc:	af25de2c 	.word	0xaf25de2c
 80180e0:	3f11566a 	.word	0x3f11566a
 80180e4:	16bebd93 	.word	0x16bebd93
 80180e8:	3f66c16c 	.word	0x3f66c16c
 80180ec:	5555553e 	.word	0x5555553e
 80180f0:	3fc55555 	.word	0x3fc55555
 80180f4:	3ff00000 	.word	0x3ff00000
 80180f8:	4090cbff 	.word	0x4090cbff
 80180fc:	3f6f3400 	.word	0x3f6f3400

08018100 <__ieee754_sqrt>:
 8018100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018102:	000b      	movs	r3, r1
 8018104:	000c      	movs	r4, r1
 8018106:	4956      	ldr	r1, [pc, #344]	; (8018260 <__ieee754_sqrt+0x160>)
 8018108:	0005      	movs	r5, r0
 801810a:	0002      	movs	r2, r0
 801810c:	0008      	movs	r0, r1
 801810e:	b085      	sub	sp, #20
 8018110:	4020      	ands	r0, r4
 8018112:	4288      	cmp	r0, r1
 8018114:	d10f      	bne.n	8018136 <__ieee754_sqrt+0x36>
 8018116:	0028      	movs	r0, r5
 8018118:	0021      	movs	r1, r4
 801811a:	f7ea f821 	bl	8002160 <__aeabi_dmul>
 801811e:	0002      	movs	r2, r0
 8018120:	000b      	movs	r3, r1
 8018122:	0028      	movs	r0, r5
 8018124:	0021      	movs	r1, r4
 8018126:	f7e9 f8dd 	bl	80012e4 <__aeabi_dadd>
 801812a:	0005      	movs	r5, r0
 801812c:	000c      	movs	r4, r1
 801812e:	0028      	movs	r0, r5
 8018130:	0021      	movs	r1, r4
 8018132:	b005      	add	sp, #20
 8018134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018136:	2c00      	cmp	r4, #0
 8018138:	dc10      	bgt.n	801815c <__ieee754_sqrt+0x5c>
 801813a:	0061      	lsls	r1, r4, #1
 801813c:	0849      	lsrs	r1, r1, #1
 801813e:	4329      	orrs	r1, r5
 8018140:	d0f5      	beq.n	801812e <__ieee754_sqrt+0x2e>
 8018142:	2100      	movs	r1, #0
 8018144:	428c      	cmp	r4, r1
 8018146:	d100      	bne.n	801814a <__ieee754_sqrt+0x4a>
 8018148:	e080      	b.n	801824c <__ieee754_sqrt+0x14c>
 801814a:	0028      	movs	r0, r5
 801814c:	0021      	movs	r1, r4
 801814e:	f7ea fa73 	bl	8002638 <__aeabi_dsub>
 8018152:	0002      	movs	r2, r0
 8018154:	000b      	movs	r3, r1
 8018156:	f7e9 fc01 	bl	800195c <__aeabi_ddiv>
 801815a:	e7e6      	b.n	801812a <__ieee754_sqrt+0x2a>
 801815c:	1521      	asrs	r1, r4, #20
 801815e:	d075      	beq.n	801824c <__ieee754_sqrt+0x14c>
 8018160:	4840      	ldr	r0, [pc, #256]	; (8018264 <__ieee754_sqrt+0x164>)
 8018162:	031b      	lsls	r3, r3, #12
 8018164:	180c      	adds	r4, r1, r0
 8018166:	2080      	movs	r0, #128	; 0x80
 8018168:	0b1b      	lsrs	r3, r3, #12
 801816a:	0340      	lsls	r0, r0, #13
 801816c:	4303      	orrs	r3, r0
 801816e:	07c9      	lsls	r1, r1, #31
 8018170:	d403      	bmi.n	801817a <__ieee754_sqrt+0x7a>
 8018172:	0fd1      	lsrs	r1, r2, #31
 8018174:	005b      	lsls	r3, r3, #1
 8018176:	185b      	adds	r3, r3, r1
 8018178:	0052      	lsls	r2, r2, #1
 801817a:	1061      	asrs	r1, r4, #1
 801817c:	2400      	movs	r4, #0
 801817e:	9103      	str	r1, [sp, #12]
 8018180:	005b      	lsls	r3, r3, #1
 8018182:	0fd1      	lsrs	r1, r2, #31
 8018184:	185b      	adds	r3, r3, r1
 8018186:	2180      	movs	r1, #128	; 0x80
 8018188:	2516      	movs	r5, #22
 801818a:	0020      	movs	r0, r4
 801818c:	0052      	lsls	r2, r2, #1
 801818e:	0389      	lsls	r1, r1, #14
 8018190:	1846      	adds	r6, r0, r1
 8018192:	429e      	cmp	r6, r3
 8018194:	dc02      	bgt.n	801819c <__ieee754_sqrt+0x9c>
 8018196:	1870      	adds	r0, r6, r1
 8018198:	1b9b      	subs	r3, r3, r6
 801819a:	1864      	adds	r4, r4, r1
 801819c:	0fd6      	lsrs	r6, r2, #31
 801819e:	005b      	lsls	r3, r3, #1
 80181a0:	3d01      	subs	r5, #1
 80181a2:	18f3      	adds	r3, r6, r3
 80181a4:	0052      	lsls	r2, r2, #1
 80181a6:	0849      	lsrs	r1, r1, #1
 80181a8:	2d00      	cmp	r5, #0
 80181aa:	d1f1      	bne.n	8018190 <__ieee754_sqrt+0x90>
 80181ac:	2620      	movs	r6, #32
 80181ae:	2780      	movs	r7, #128	; 0x80
 80181b0:	0029      	movs	r1, r5
 80181b2:	9601      	str	r6, [sp, #4]
 80181b4:	063f      	lsls	r7, r7, #24
 80181b6:	197e      	adds	r6, r7, r5
 80181b8:	46b4      	mov	ip, r6
 80181ba:	4283      	cmp	r3, r0
 80181bc:	dc02      	bgt.n	80181c4 <__ieee754_sqrt+0xc4>
 80181be:	d114      	bne.n	80181ea <__ieee754_sqrt+0xea>
 80181c0:	4296      	cmp	r6, r2
 80181c2:	d812      	bhi.n	80181ea <__ieee754_sqrt+0xea>
 80181c4:	4665      	mov	r5, ip
 80181c6:	4666      	mov	r6, ip
 80181c8:	19ed      	adds	r5, r5, r7
 80181ca:	9002      	str	r0, [sp, #8]
 80181cc:	2e00      	cmp	r6, #0
 80181ce:	da03      	bge.n	80181d8 <__ieee754_sqrt+0xd8>
 80181d0:	43ee      	mvns	r6, r5
 80181d2:	0ff6      	lsrs	r6, r6, #31
 80181d4:	1986      	adds	r6, r0, r6
 80181d6:	9602      	str	r6, [sp, #8]
 80181d8:	1a1b      	subs	r3, r3, r0
 80181da:	4562      	cmp	r2, ip
 80181dc:	4180      	sbcs	r0, r0
 80181de:	4240      	negs	r0, r0
 80181e0:	1a1b      	subs	r3, r3, r0
 80181e2:	4660      	mov	r0, ip
 80181e4:	1a12      	subs	r2, r2, r0
 80181e6:	9802      	ldr	r0, [sp, #8]
 80181e8:	19c9      	adds	r1, r1, r7
 80181ea:	0fd6      	lsrs	r6, r2, #31
 80181ec:	005b      	lsls	r3, r3, #1
 80181ee:	199b      	adds	r3, r3, r6
 80181f0:	9e01      	ldr	r6, [sp, #4]
 80181f2:	0052      	lsls	r2, r2, #1
 80181f4:	3e01      	subs	r6, #1
 80181f6:	087f      	lsrs	r7, r7, #1
 80181f8:	9601      	str	r6, [sp, #4]
 80181fa:	2e00      	cmp	r6, #0
 80181fc:	d1db      	bne.n	80181b6 <__ieee754_sqrt+0xb6>
 80181fe:	4313      	orrs	r3, r2
 8018200:	d003      	beq.n	801820a <__ieee754_sqrt+0x10a>
 8018202:	1c4b      	adds	r3, r1, #1
 8018204:	d127      	bne.n	8018256 <__ieee754_sqrt+0x156>
 8018206:	0031      	movs	r1, r6
 8018208:	3401      	adds	r4, #1
 801820a:	4b17      	ldr	r3, [pc, #92]	; (8018268 <__ieee754_sqrt+0x168>)
 801820c:	1060      	asrs	r0, r4, #1
 801820e:	18c0      	adds	r0, r0, r3
 8018210:	0849      	lsrs	r1, r1, #1
 8018212:	07e3      	lsls	r3, r4, #31
 8018214:	d502      	bpl.n	801821c <__ieee754_sqrt+0x11c>
 8018216:	2380      	movs	r3, #128	; 0x80
 8018218:	061b      	lsls	r3, r3, #24
 801821a:	4319      	orrs	r1, r3
 801821c:	9b03      	ldr	r3, [sp, #12]
 801821e:	000d      	movs	r5, r1
 8018220:	051c      	lsls	r4, r3, #20
 8018222:	1823      	adds	r3, r4, r0
 8018224:	001c      	movs	r4, r3
 8018226:	e782      	b.n	801812e <__ieee754_sqrt+0x2e>
 8018228:	0ad3      	lsrs	r3, r2, #11
 801822a:	3815      	subs	r0, #21
 801822c:	0552      	lsls	r2, r2, #21
 801822e:	2b00      	cmp	r3, #0
 8018230:	d0fa      	beq.n	8018228 <__ieee754_sqrt+0x128>
 8018232:	2480      	movs	r4, #128	; 0x80
 8018234:	0364      	lsls	r4, r4, #13
 8018236:	4223      	tst	r3, r4
 8018238:	d00a      	beq.n	8018250 <__ieee754_sqrt+0x150>
 801823a:	2420      	movs	r4, #32
 801823c:	0016      	movs	r6, r2
 801823e:	1a64      	subs	r4, r4, r1
 8018240:	40e6      	lsrs	r6, r4
 8018242:	1e4d      	subs	r5, r1, #1
 8018244:	408a      	lsls	r2, r1
 8018246:	4333      	orrs	r3, r6
 8018248:	1b41      	subs	r1, r0, r5
 801824a:	e789      	b.n	8018160 <__ieee754_sqrt+0x60>
 801824c:	2000      	movs	r0, #0
 801824e:	e7ee      	b.n	801822e <__ieee754_sqrt+0x12e>
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	3101      	adds	r1, #1
 8018254:	e7ef      	b.n	8018236 <__ieee754_sqrt+0x136>
 8018256:	2301      	movs	r3, #1
 8018258:	3101      	adds	r1, #1
 801825a:	4399      	bics	r1, r3
 801825c:	e7d5      	b.n	801820a <__ieee754_sqrt+0x10a>
 801825e:	46c0      	nop			; (mov r8, r8)
 8018260:	7ff00000 	.word	0x7ff00000
 8018264:	fffffc01 	.word	0xfffffc01
 8018268:	3fe00000 	.word	0x3fe00000

0801826c <with_errno>:
 801826c:	b570      	push	{r4, r5, r6, lr}
 801826e:	000d      	movs	r5, r1
 8018270:	0016      	movs	r6, r2
 8018272:	0004      	movs	r4, r0
 8018274:	f7fc fa00 	bl	8014678 <__errno>
 8018278:	0029      	movs	r1, r5
 801827a:	6006      	str	r6, [r0, #0]
 801827c:	0020      	movs	r0, r4
 801827e:	bd70      	pop	{r4, r5, r6, pc}

08018280 <xflow>:
 8018280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018282:	0015      	movs	r5, r2
 8018284:	001c      	movs	r4, r3
 8018286:	2800      	cmp	r0, #0
 8018288:	d010      	beq.n	80182ac <xflow+0x2c>
 801828a:	2380      	movs	r3, #128	; 0x80
 801828c:	0010      	movs	r0, r2
 801828e:	061b      	lsls	r3, r3, #24
 8018290:	18e1      	adds	r1, r4, r3
 8018292:	9000      	str	r0, [sp, #0]
 8018294:	9101      	str	r1, [sp, #4]
 8018296:	9a00      	ldr	r2, [sp, #0]
 8018298:	9b01      	ldr	r3, [sp, #4]
 801829a:	0028      	movs	r0, r5
 801829c:	0021      	movs	r1, r4
 801829e:	f7e9 ff5f 	bl	8002160 <__aeabi_dmul>
 80182a2:	2222      	movs	r2, #34	; 0x22
 80182a4:	f7ff ffe2 	bl	801826c <with_errno>
 80182a8:	b003      	add	sp, #12
 80182aa:	bd30      	pop	{r4, r5, pc}
 80182ac:	0010      	movs	r0, r2
 80182ae:	0019      	movs	r1, r3
 80182b0:	e7ef      	b.n	8018292 <xflow+0x12>

080182b2 <__math_uflow>:
 80182b2:	2380      	movs	r3, #128	; 0x80
 80182b4:	b510      	push	{r4, lr}
 80182b6:	2200      	movs	r2, #0
 80182b8:	055b      	lsls	r3, r3, #21
 80182ba:	f7ff ffe1 	bl	8018280 <xflow>
 80182be:	bd10      	pop	{r4, pc}

080182c0 <__math_oflow>:
 80182c0:	23e0      	movs	r3, #224	; 0xe0
 80182c2:	b510      	push	{r4, lr}
 80182c4:	2200      	movs	r2, #0
 80182c6:	05db      	lsls	r3, r3, #23
 80182c8:	f7ff ffda 	bl	8018280 <xflow>
 80182cc:	bd10      	pop	{r4, pc}

080182ce <fabs>:
 80182ce:	004b      	lsls	r3, r1, #1
 80182d0:	0859      	lsrs	r1, r3, #1
 80182d2:	4770      	bx	lr

080182d4 <finite>:
 80182d4:	4b02      	ldr	r3, [pc, #8]	; (80182e0 <finite+0xc>)
 80182d6:	0048      	lsls	r0, r1, #1
 80182d8:	0840      	lsrs	r0, r0, #1
 80182da:	18c0      	adds	r0, r0, r3
 80182dc:	0fc0      	lsrs	r0, r0, #31
 80182de:	4770      	bx	lr
 80182e0:	80100000 	.word	0x80100000

080182e4 <scalbn>:
 80182e4:	004b      	lsls	r3, r1, #1
 80182e6:	b570      	push	{r4, r5, r6, lr}
 80182e8:	0d5b      	lsrs	r3, r3, #21
 80182ea:	0014      	movs	r4, r2
 80182ec:	000a      	movs	r2, r1
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d10d      	bne.n	801830e <scalbn+0x2a>
 80182f2:	004b      	lsls	r3, r1, #1
 80182f4:	085b      	lsrs	r3, r3, #1
 80182f6:	4303      	orrs	r3, r0
 80182f8:	d010      	beq.n	801831c <scalbn+0x38>
 80182fa:	4b27      	ldr	r3, [pc, #156]	; (8018398 <scalbn+0xb4>)
 80182fc:	2200      	movs	r2, #0
 80182fe:	f7e9 ff2f 	bl	8002160 <__aeabi_dmul>
 8018302:	4b26      	ldr	r3, [pc, #152]	; (801839c <scalbn+0xb8>)
 8018304:	429c      	cmp	r4, r3
 8018306:	da0a      	bge.n	801831e <scalbn+0x3a>
 8018308:	4a25      	ldr	r2, [pc, #148]	; (80183a0 <scalbn+0xbc>)
 801830a:	4b26      	ldr	r3, [pc, #152]	; (80183a4 <scalbn+0xc0>)
 801830c:	e019      	b.n	8018342 <scalbn+0x5e>
 801830e:	4d26      	ldr	r5, [pc, #152]	; (80183a8 <scalbn+0xc4>)
 8018310:	42ab      	cmp	r3, r5
 8018312:	d108      	bne.n	8018326 <scalbn+0x42>
 8018314:	0002      	movs	r2, r0
 8018316:	000b      	movs	r3, r1
 8018318:	f7e8 ffe4 	bl	80012e4 <__aeabi_dadd>
 801831c:	bd70      	pop	{r4, r5, r6, pc}
 801831e:	000a      	movs	r2, r1
 8018320:	004b      	lsls	r3, r1, #1
 8018322:	0d5b      	lsrs	r3, r3, #21
 8018324:	3b36      	subs	r3, #54	; 0x36
 8018326:	4d21      	ldr	r5, [pc, #132]	; (80183ac <scalbn+0xc8>)
 8018328:	18e3      	adds	r3, r4, r3
 801832a:	42ab      	cmp	r3, r5
 801832c:	dd0c      	ble.n	8018348 <scalbn+0x64>
 801832e:	4c20      	ldr	r4, [pc, #128]	; (80183b0 <scalbn+0xcc>)
 8018330:	4d20      	ldr	r5, [pc, #128]	; (80183b4 <scalbn+0xd0>)
 8018332:	2900      	cmp	r1, #0
 8018334:	da01      	bge.n	801833a <scalbn+0x56>
 8018336:	4c1e      	ldr	r4, [pc, #120]	; (80183b0 <scalbn+0xcc>)
 8018338:	4d1f      	ldr	r5, [pc, #124]	; (80183b8 <scalbn+0xd4>)
 801833a:	0020      	movs	r0, r4
 801833c:	0029      	movs	r1, r5
 801833e:	4a1c      	ldr	r2, [pc, #112]	; (80183b0 <scalbn+0xcc>)
 8018340:	4b1c      	ldr	r3, [pc, #112]	; (80183b4 <scalbn+0xd0>)
 8018342:	f7e9 ff0d 	bl	8002160 <__aeabi_dmul>
 8018346:	e7e9      	b.n	801831c <scalbn+0x38>
 8018348:	2b00      	cmp	r3, #0
 801834a:	dd05      	ble.n	8018358 <scalbn+0x74>
 801834c:	4c1b      	ldr	r4, [pc, #108]	; (80183bc <scalbn+0xd8>)
 801834e:	051b      	lsls	r3, r3, #20
 8018350:	4022      	ands	r2, r4
 8018352:	431a      	orrs	r2, r3
 8018354:	0011      	movs	r1, r2
 8018356:	e7e1      	b.n	801831c <scalbn+0x38>
 8018358:	001d      	movs	r5, r3
 801835a:	3535      	adds	r5, #53	; 0x35
 801835c:	da13      	bge.n	8018386 <scalbn+0xa2>
 801835e:	4a18      	ldr	r2, [pc, #96]	; (80183c0 <scalbn+0xdc>)
 8018360:	0fcb      	lsrs	r3, r1, #31
 8018362:	4294      	cmp	r4, r2
 8018364:	dd08      	ble.n	8018378 <scalbn+0x94>
 8018366:	4812      	ldr	r0, [pc, #72]	; (80183b0 <scalbn+0xcc>)
 8018368:	4912      	ldr	r1, [pc, #72]	; (80183b4 <scalbn+0xd0>)
 801836a:	2b00      	cmp	r3, #0
 801836c:	d001      	beq.n	8018372 <scalbn+0x8e>
 801836e:	4810      	ldr	r0, [pc, #64]	; (80183b0 <scalbn+0xcc>)
 8018370:	4911      	ldr	r1, [pc, #68]	; (80183b8 <scalbn+0xd4>)
 8018372:	4a0f      	ldr	r2, [pc, #60]	; (80183b0 <scalbn+0xcc>)
 8018374:	4b0f      	ldr	r3, [pc, #60]	; (80183b4 <scalbn+0xd0>)
 8018376:	e7e4      	b.n	8018342 <scalbn+0x5e>
 8018378:	4809      	ldr	r0, [pc, #36]	; (80183a0 <scalbn+0xbc>)
 801837a:	490a      	ldr	r1, [pc, #40]	; (80183a4 <scalbn+0xc0>)
 801837c:	2b00      	cmp	r3, #0
 801837e:	d0c3      	beq.n	8018308 <scalbn+0x24>
 8018380:	4807      	ldr	r0, [pc, #28]	; (80183a0 <scalbn+0xbc>)
 8018382:	4910      	ldr	r1, [pc, #64]	; (80183c4 <scalbn+0xe0>)
 8018384:	e7c0      	b.n	8018308 <scalbn+0x24>
 8018386:	4c0d      	ldr	r4, [pc, #52]	; (80183bc <scalbn+0xd8>)
 8018388:	3336      	adds	r3, #54	; 0x36
 801838a:	4022      	ands	r2, r4
 801838c:	051b      	lsls	r3, r3, #20
 801838e:	4313      	orrs	r3, r2
 8018390:	0019      	movs	r1, r3
 8018392:	2200      	movs	r2, #0
 8018394:	4b0c      	ldr	r3, [pc, #48]	; (80183c8 <scalbn+0xe4>)
 8018396:	e7d4      	b.n	8018342 <scalbn+0x5e>
 8018398:	43500000 	.word	0x43500000
 801839c:	ffff3cb0 	.word	0xffff3cb0
 80183a0:	c2f8f359 	.word	0xc2f8f359
 80183a4:	01a56e1f 	.word	0x01a56e1f
 80183a8:	000007ff 	.word	0x000007ff
 80183ac:	000007fe 	.word	0x000007fe
 80183b0:	8800759c 	.word	0x8800759c
 80183b4:	7e37e43c 	.word	0x7e37e43c
 80183b8:	fe37e43c 	.word	0xfe37e43c
 80183bc:	800fffff 	.word	0x800fffff
 80183c0:	0000c350 	.word	0x0000c350
 80183c4:	81a56e1f 	.word	0x81a56e1f
 80183c8:	3c900000 	.word	0x3c900000

080183cc <_init>:
 80183cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ce:	46c0      	nop			; (mov r8, r8)
 80183d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183d2:	bc08      	pop	{r3}
 80183d4:	469e      	mov	lr, r3
 80183d6:	4770      	bx	lr

080183d8 <_fini>:
 80183d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183da:	46c0      	nop			; (mov r8, r8)
 80183dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183de:	bc08      	pop	{r3}
 80183e0:	469e      	mov	lr, r3
 80183e2:	4770      	bx	lr
