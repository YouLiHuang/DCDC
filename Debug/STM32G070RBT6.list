
STM32G070RBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018274  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08018330  08018330  00028330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e18  08018e18  000332ac  2**0
                  CONTENTS
  4 .ARM          00000000  08018e18  08018e18  000332ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018e18  08018e18  000332ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e18  08018e18  00028e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e1c  08018e1c  00028e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000032ac  20000000  08018e20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200032ac  0801c0cc  000332ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003aa4  0801c0cc  00033aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000332ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d2b  00000000  00000000  000332d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d5  00000000  00000000  00053fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  000589d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  0005a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e378  00000000  00000000  0005bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000266e0  00000000  00000000  0007a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3d7  00000000  00000000  000a0830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013fc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000758c  00000000  00000000  0013fc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200032ac 	.word	0x200032ac
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08018314 	.word	0x08018314

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200032b0 	.word	0x200032b0
 80000fc:	08018314 	.word	0x08018314

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fe25 	bl	8002098 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd75 	bl	8001f48 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe17 	bl	8002098 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe0d 	bl	8002098 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd9d 	bl	8001fcc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fd93 	bl	8001fcc <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fb8b 	bl	8000bd8 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb17 	bl	8000b00 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb7d 	bl	8000bd8 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb73 	bl	8000bd8 <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb23 	bl	8000b4c <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb19 	bl	8000b4c <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_f2uiz>:
 8000528:	219e      	movs	r1, #158	; 0x9e
 800052a:	b510      	push	{r4, lr}
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	1c04      	adds	r4, r0, #0
 8000530:	f7ff fff0 	bl	8000514 <__aeabi_fcmpge>
 8000534:	2800      	cmp	r0, #0
 8000536:	d103      	bne.n	8000540 <__aeabi_f2uiz+0x18>
 8000538:	1c20      	adds	r0, r4, #0
 800053a:	f000 fe65 	bl	8001208 <__aeabi_f2iz>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	219e      	movs	r1, #158	; 0x9e
 8000542:	1c20      	adds	r0, r4, #0
 8000544:	05c9      	lsls	r1, r1, #23
 8000546:	f000 fcb1 	bl	8000eac <__aeabi_fsub>
 800054a:	f000 fe5d 	bl	8001208 <__aeabi_f2iz>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	061b      	lsls	r3, r3, #24
 8000552:	469c      	mov	ip, r3
 8000554:	4460      	add	r0, ip
 8000556:	e7f2      	b.n	800053e <__aeabi_f2uiz+0x16>

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff9d 	bl	80004a0 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fc13 	bl	8002d98 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f85c 	bl	8002638 <__aeabi_dsub>
 8000580:	f002 fc0a 	bl	8002d98 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_fadd>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	46c6      	mov	lr, r8
 8000598:	0243      	lsls	r3, r0, #9
 800059a:	0a5b      	lsrs	r3, r3, #9
 800059c:	024e      	lsls	r6, r1, #9
 800059e:	0045      	lsls	r5, r0, #1
 80005a0:	004f      	lsls	r7, r1, #1
 80005a2:	00da      	lsls	r2, r3, #3
 80005a4:	0fc4      	lsrs	r4, r0, #31
 80005a6:	469c      	mov	ip, r3
 80005a8:	0a70      	lsrs	r0, r6, #9
 80005aa:	4690      	mov	r8, r2
 80005ac:	b500      	push	{lr}
 80005ae:	0e2d      	lsrs	r5, r5, #24
 80005b0:	0e3f      	lsrs	r7, r7, #24
 80005b2:	0fc9      	lsrs	r1, r1, #31
 80005b4:	09b6      	lsrs	r6, r6, #6
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d04b      	beq.n	8000652 <__aeabi_fadd+0xbe>
 80005ba:	1bea      	subs	r2, r5, r7
 80005bc:	2a00      	cmp	r2, #0
 80005be:	dd36      	ble.n	800062e <__aeabi_fadd+0x9a>
 80005c0:	2f00      	cmp	r7, #0
 80005c2:	d061      	beq.n	8000688 <__aeabi_fadd+0xf4>
 80005c4:	2dff      	cmp	r5, #255	; 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x36>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x192>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	04db      	lsls	r3, r3, #19
 80005ce:	431e      	orrs	r6, r3
 80005d0:	2a1b      	cmp	r2, #27
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_fadd+0x42>
 80005d4:	e0d3      	b.n	800077e <__aeabi_fadd+0x1ea>
 80005d6:	2001      	movs	r0, #1
 80005d8:	4643      	mov	r3, r8
 80005da:	1a18      	subs	r0, r3, r0
 80005dc:	0143      	lsls	r3, r0, #5
 80005de:	d400      	bmi.n	80005e2 <__aeabi_fadd+0x4e>
 80005e0:	e08c      	b.n	80006fc <__aeabi_fadd+0x168>
 80005e2:	0180      	lsls	r0, r0, #6
 80005e4:	0987      	lsrs	r7, r0, #6
 80005e6:	0038      	movs	r0, r7
 80005e8:	f002 fd32 	bl	8003050 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4087      	lsls	r7, r0
 80005f0:	4285      	cmp	r5, r0
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fadd+0x62>
 80005f4:	e0b6      	b.n	8000764 <__aeabi_fadd+0x1d0>
 80005f6:	1a2d      	subs	r5, r5, r0
 80005f8:	48b3      	ldr	r0, [pc, #716]	; (80008c8 <__aeabi_fadd+0x334>)
 80005fa:	4038      	ands	r0, r7
 80005fc:	0743      	lsls	r3, r0, #29
 80005fe:	d004      	beq.n	800060a <__aeabi_fadd+0x76>
 8000600:	230f      	movs	r3, #15
 8000602:	4003      	ands	r3, r0
 8000604:	2b04      	cmp	r3, #4
 8000606:	d000      	beq.n	800060a <__aeabi_fadd+0x76>
 8000608:	3004      	adds	r0, #4
 800060a:	0143      	lsls	r3, r0, #5
 800060c:	d400      	bmi.n	8000610 <__aeabi_fadd+0x7c>
 800060e:	e078      	b.n	8000702 <__aeabi_fadd+0x16e>
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	2dfe      	cmp	r5, #254	; 0xfe
 8000614:	d065      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 8000616:	0180      	lsls	r0, r0, #6
 8000618:	0a43      	lsrs	r3, r0, #9
 800061a:	469c      	mov	ip, r3
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	4663      	mov	r3, ip
 8000620:	05d0      	lsls	r0, r2, #23
 8000622:	4318      	orrs	r0, r3
 8000624:	07e4      	lsls	r4, r4, #31
 8000626:	4320      	orrs	r0, r4
 8000628:	bc80      	pop	{r7}
 800062a:	46b8      	mov	r8, r7
 800062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062e:	2a00      	cmp	r2, #0
 8000630:	d035      	beq.n	800069e <__aeabi_fadd+0x10a>
 8000632:	1b7a      	subs	r2, r7, r5
 8000634:	2d00      	cmp	r5, #0
 8000636:	d000      	beq.n	800063a <__aeabi_fadd+0xa6>
 8000638:	e0af      	b.n	800079a <__aeabi_fadd+0x206>
 800063a:	4643      	mov	r3, r8
 800063c:	2b00      	cmp	r3, #0
 800063e:	d100      	bne.n	8000642 <__aeabi_fadd+0xae>
 8000640:	e0a7      	b.n	8000792 <__aeabi_fadd+0x1fe>
 8000642:	1e53      	subs	r3, r2, #1
 8000644:	2a01      	cmp	r2, #1
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0xb6>
 8000648:	e12f      	b.n	80008aa <__aeabi_fadd+0x316>
 800064a:	2aff      	cmp	r2, #255	; 0xff
 800064c:	d069      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800064e:	001a      	movs	r2, r3
 8000650:	e0aa      	b.n	80007a8 <__aeabi_fadd+0x214>
 8000652:	1be9      	subs	r1, r5, r7
 8000654:	2900      	cmp	r1, #0
 8000656:	dd70      	ble.n	800073a <__aeabi_fadd+0x1a6>
 8000658:	2f00      	cmp	r7, #0
 800065a:	d037      	beq.n	80006cc <__aeabi_fadd+0x138>
 800065c:	2dff      	cmp	r5, #255	; 0xff
 800065e:	d062      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	04db      	lsls	r3, r3, #19
 8000664:	431e      	orrs	r6, r3
 8000666:	291b      	cmp	r1, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0xd8>
 800066a:	e0b0      	b.n	80007ce <__aeabi_fadd+0x23a>
 800066c:	2001      	movs	r0, #1
 800066e:	4440      	add	r0, r8
 8000670:	0143      	lsls	r3, r0, #5
 8000672:	d543      	bpl.n	80006fc <__aeabi_fadd+0x168>
 8000674:	3501      	adds	r5, #1
 8000676:	2dff      	cmp	r5, #255	; 0xff
 8000678:	d033      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800067a:	2301      	movs	r3, #1
 800067c:	4a93      	ldr	r2, [pc, #588]	; (80008cc <__aeabi_fadd+0x338>)
 800067e:	4003      	ands	r3, r0
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	4010      	ands	r0, r2
 8000684:	4318      	orrs	r0, r3
 8000686:	e7b9      	b.n	80005fc <__aeabi_fadd+0x68>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0xfa>
 800068c:	e083      	b.n	8000796 <__aeabi_fadd+0x202>
 800068e:	1e51      	subs	r1, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d100      	bne.n	8000696 <__aeabi_fadd+0x102>
 8000694:	e0d8      	b.n	8000848 <__aeabi_fadd+0x2b4>
 8000696:	2aff      	cmp	r2, #255	; 0xff
 8000698:	d045      	beq.n	8000726 <__aeabi_fadd+0x192>
 800069a:	000a      	movs	r2, r1
 800069c:	e798      	b.n	80005d0 <__aeabi_fadd+0x3c>
 800069e:	27fe      	movs	r7, #254	; 0xfe
 80006a0:	1c6a      	adds	r2, r5, #1
 80006a2:	4217      	tst	r7, r2
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x114>
 80006a6:	e086      	b.n	80007b6 <__aeabi_fadd+0x222>
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x11a>
 80006ac:	e0b7      	b.n	800081e <__aeabi_fadd+0x28a>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x122>
 80006b4:	e0f3      	b.n	800089e <__aeabi_fadd+0x30a>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d0b0      	beq.n	800061e <__aeabi_fadd+0x8a>
 80006bc:	1b98      	subs	r0, r3, r6
 80006be:	0143      	lsls	r3, r0, #5
 80006c0:	d400      	bmi.n	80006c4 <__aeabi_fadd+0x130>
 80006c2:	e0fa      	b.n	80008ba <__aeabi_fadd+0x326>
 80006c4:	4643      	mov	r3, r8
 80006c6:	000c      	movs	r4, r1
 80006c8:	1af0      	subs	r0, r6, r3
 80006ca:	e797      	b.n	80005fc <__aeabi_fadd+0x68>
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x13e>
 80006d0:	e0c8      	b.n	8000864 <__aeabi_fadd+0x2d0>
 80006d2:	1e4a      	subs	r2, r1, #1
 80006d4:	2901      	cmp	r1, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x146>
 80006d8:	e0ae      	b.n	8000838 <__aeabi_fadd+0x2a4>
 80006da:	29ff      	cmp	r1, #255	; 0xff
 80006dc:	d023      	beq.n	8000726 <__aeabi_fadd+0x192>
 80006de:	0011      	movs	r1, r2
 80006e0:	e7c1      	b.n	8000666 <__aeabi_fadd+0xd2>
 80006e2:	2300      	movs	r3, #0
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	469c      	mov	ip, r3
 80006e8:	e799      	b.n	800061e <__aeabi_fadd+0x8a>
 80006ea:	21fe      	movs	r1, #254	; 0xfe
 80006ec:	1c6a      	adds	r2, r5, #1
 80006ee:	4211      	tst	r1, r2
 80006f0:	d077      	beq.n	80007e2 <__aeabi_fadd+0x24e>
 80006f2:	2aff      	cmp	r2, #255	; 0xff
 80006f4:	d0f5      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 80006f6:	0015      	movs	r5, r2
 80006f8:	4446      	add	r6, r8
 80006fa:	0870      	lsrs	r0, r6, #1
 80006fc:	0743      	lsls	r3, r0, #29
 80006fe:	d000      	beq.n	8000702 <__aeabi_fadd+0x16e>
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x6c>
 8000702:	08c3      	lsrs	r3, r0, #3
 8000704:	2dff      	cmp	r5, #255	; 0xff
 8000706:	d00e      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	469c      	mov	ip, r3
 800070e:	b2ea      	uxtb	r2, r5
 8000710:	e785      	b.n	800061e <__aeabi_fadd+0x8a>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d007      	beq.n	8000726 <__aeabi_fadd+0x192>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	03d2      	lsls	r2, r2, #15
 800071a:	4213      	tst	r3, r2
 800071c:	d003      	beq.n	8000726 <__aeabi_fadd+0x192>
 800071e:	4210      	tst	r0, r2
 8000720:	d101      	bne.n	8000726 <__aeabi_fadd+0x192>
 8000722:	000c      	movs	r4, r1
 8000724:	0003      	movs	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0db      	beq.n	80006e2 <__aeabi_fadd+0x14e>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4318      	orrs	r0, r3
 8000730:	0240      	lsls	r0, r0, #9
 8000732:	0a43      	lsrs	r3, r0, #9
 8000734:	469c      	mov	ip, r3
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	e771      	b.n	800061e <__aeabi_fadd+0x8a>
 800073a:	2900      	cmp	r1, #0
 800073c:	d0d5      	beq.n	80006ea <__aeabi_fadd+0x156>
 800073e:	1b7a      	subs	r2, r7, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d160      	bne.n	8000806 <__aeabi_fadd+0x272>
 8000744:	4643      	mov	r3, r8
 8000746:	2b00      	cmp	r3, #0
 8000748:	d024      	beq.n	8000794 <__aeabi_fadd+0x200>
 800074a:	1e53      	subs	r3, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d073      	beq.n	8000838 <__aeabi_fadd+0x2a4>
 8000750:	2aff      	cmp	r2, #255	; 0xff
 8000752:	d0e7      	beq.n	8000724 <__aeabi_fadd+0x190>
 8000754:	001a      	movs	r2, r3
 8000756:	2a1b      	cmp	r2, #27
 8000758:	dc00      	bgt.n	800075c <__aeabi_fadd+0x1c8>
 800075a:	e085      	b.n	8000868 <__aeabi_fadd+0x2d4>
 800075c:	2001      	movs	r0, #1
 800075e:	003d      	movs	r5, r7
 8000760:	1980      	adds	r0, r0, r6
 8000762:	e785      	b.n	8000670 <__aeabi_fadd+0xdc>
 8000764:	2320      	movs	r3, #32
 8000766:	003a      	movs	r2, r7
 8000768:	1b45      	subs	r5, r0, r5
 800076a:	0038      	movs	r0, r7
 800076c:	3501      	adds	r5, #1
 800076e:	40ea      	lsrs	r2, r5
 8000770:	1b5d      	subs	r5, r3, r5
 8000772:	40a8      	lsls	r0, r5
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	2500      	movs	r5, #0
 800077a:	4310      	orrs	r0, r2
 800077c:	e73e      	b.n	80005fc <__aeabi_fadd+0x68>
 800077e:	2320      	movs	r3, #32
 8000780:	0030      	movs	r0, r6
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	0031      	movs	r1, r6
 8000786:	4098      	lsls	r0, r3
 8000788:	40d1      	lsrs	r1, r2
 800078a:	1e43      	subs	r3, r0, #1
 800078c:	4198      	sbcs	r0, r3
 800078e:	4308      	orrs	r0, r1
 8000790:	e722      	b.n	80005d8 <__aeabi_fadd+0x44>
 8000792:	000c      	movs	r4, r1
 8000794:	0003      	movs	r3, r0
 8000796:	0015      	movs	r5, r2
 8000798:	e7b4      	b.n	8000704 <__aeabi_fadd+0x170>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d0c1      	beq.n	8000722 <__aeabi_fadd+0x18e>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	4640      	mov	r0, r8
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	4318      	orrs	r0, r3
 80007a6:	4680      	mov	r8, r0
 80007a8:	2a1b      	cmp	r2, #27
 80007aa:	dd51      	ble.n	8000850 <__aeabi_fadd+0x2bc>
 80007ac:	2001      	movs	r0, #1
 80007ae:	000c      	movs	r4, r1
 80007b0:	003d      	movs	r5, r7
 80007b2:	1a30      	subs	r0, r6, r0
 80007b4:	e712      	b.n	80005dc <__aeabi_fadd+0x48>
 80007b6:	4643      	mov	r3, r8
 80007b8:	1b9f      	subs	r7, r3, r6
 80007ba:	017b      	lsls	r3, r7, #5
 80007bc:	d42b      	bmi.n	8000816 <__aeabi_fadd+0x282>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80007c2:	e710      	b.n	80005e6 <__aeabi_fadd+0x52>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	469c      	mov	ip, r3
 80007cc:	e727      	b.n	800061e <__aeabi_fadd+0x8a>
 80007ce:	2320      	movs	r3, #32
 80007d0:	0032      	movs	r2, r6
 80007d2:	0030      	movs	r0, r6
 80007d4:	40ca      	lsrs	r2, r1
 80007d6:	1a59      	subs	r1, r3, r1
 80007d8:	4088      	lsls	r0, r1
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
 80007de:	4310      	orrs	r0, r2
 80007e0:	e745      	b.n	800066e <__aeabi_fadd+0xda>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d14a      	bne.n	800087c <__aeabi_fadd+0x2e8>
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d063      	beq.n	80008b4 <__aeabi_fadd+0x320>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x260>
 80007f2:	e714      	b.n	800061e <__aeabi_fadd+0x8a>
 80007f4:	0030      	movs	r0, r6
 80007f6:	4440      	add	r0, r8
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	d400      	bmi.n	80007fe <__aeabi_fadd+0x26a>
 80007fc:	e77e      	b.n	80006fc <__aeabi_fadd+0x168>
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <__aeabi_fadd+0x334>)
 8000800:	3501      	adds	r5, #1
 8000802:	4018      	ands	r0, r3
 8000804:	e77a      	b.n	80006fc <__aeabi_fadd+0x168>
 8000806:	2fff      	cmp	r7, #255	; 0xff
 8000808:	d08c      	beq.n	8000724 <__aeabi_fadd+0x190>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	4641      	mov	r1, r8
 800080e:	04db      	lsls	r3, r3, #19
 8000810:	4319      	orrs	r1, r3
 8000812:	4688      	mov	r8, r1
 8000814:	e79f      	b.n	8000756 <__aeabi_fadd+0x1c2>
 8000816:	4643      	mov	r3, r8
 8000818:	000c      	movs	r4, r1
 800081a:	1af7      	subs	r7, r6, r3
 800081c:	e6e3      	b.n	80005e6 <__aeabi_fadd+0x52>
 800081e:	4642      	mov	r2, r8
 8000820:	2a00      	cmp	r2, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x292>
 8000824:	e775      	b.n	8000712 <__aeabi_fadd+0x17e>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x298>
 800082a:	e77a      	b.n	8000722 <__aeabi_fadd+0x18e>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	2400      	movs	r4, #0
 8000832:	469c      	mov	ip, r3
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	e6f2      	b.n	800061e <__aeabi_fadd+0x8a>
 8000838:	0030      	movs	r0, r6
 800083a:	4440      	add	r0, r8
 800083c:	2501      	movs	r5, #1
 800083e:	0143      	lsls	r3, r0, #5
 8000840:	d400      	bmi.n	8000844 <__aeabi_fadd+0x2b0>
 8000842:	e75b      	b.n	80006fc <__aeabi_fadd+0x168>
 8000844:	2502      	movs	r5, #2
 8000846:	e718      	b.n	800067a <__aeabi_fadd+0xe6>
 8000848:	4643      	mov	r3, r8
 800084a:	2501      	movs	r5, #1
 800084c:	1b98      	subs	r0, r3, r6
 800084e:	e6c5      	b.n	80005dc <__aeabi_fadd+0x48>
 8000850:	2320      	movs	r3, #32
 8000852:	4644      	mov	r4, r8
 8000854:	4640      	mov	r0, r8
 8000856:	40d4      	lsrs	r4, r2
 8000858:	1a9a      	subs	r2, r3, r2
 800085a:	4090      	lsls	r0, r2
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	4320      	orrs	r0, r4
 8000862:	e7a4      	b.n	80007ae <__aeabi_fadd+0x21a>
 8000864:	000d      	movs	r5, r1
 8000866:	e74d      	b.n	8000704 <__aeabi_fadd+0x170>
 8000868:	2320      	movs	r3, #32
 800086a:	4641      	mov	r1, r8
 800086c:	4640      	mov	r0, r8
 800086e:	40d1      	lsrs	r1, r2
 8000870:	1a9a      	subs	r2, r3, r2
 8000872:	4090      	lsls	r0, r2
 8000874:	1e43      	subs	r3, r0, #1
 8000876:	4198      	sbcs	r0, r3
 8000878:	4308      	orrs	r0, r1
 800087a:	e770      	b.n	800075e <__aeabi_fadd+0x1ca>
 800087c:	4642      	mov	r2, r8
 800087e:	2a00      	cmp	r2, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x2f0>
 8000882:	e74f      	b.n	8000724 <__aeabi_fadd+0x190>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x2f6>
 8000888:	e74d      	b.n	8000726 <__aeabi_fadd+0x192>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	03d2      	lsls	r2, r2, #15
 800088e:	4213      	tst	r3, r2
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x300>
 8000892:	e748      	b.n	8000726 <__aeabi_fadd+0x192>
 8000894:	4210      	tst	r0, r2
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x306>
 8000898:	e745      	b.n	8000726 <__aeabi_fadd+0x192>
 800089a:	0003      	movs	r3, r0
 800089c:	e743      	b.n	8000726 <__aeabi_fadd+0x192>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d090      	beq.n	80007c4 <__aeabi_fadd+0x230>
 80008a2:	000c      	movs	r4, r1
 80008a4:	4684      	mov	ip, r0
 80008a6:	2200      	movs	r2, #0
 80008a8:	e6b9      	b.n	800061e <__aeabi_fadd+0x8a>
 80008aa:	4643      	mov	r3, r8
 80008ac:	000c      	movs	r4, r1
 80008ae:	1af0      	subs	r0, r6, r3
 80008b0:	3501      	adds	r5, #1
 80008b2:	e693      	b.n	80005dc <__aeabi_fadd+0x48>
 80008b4:	4684      	mov	ip, r0
 80008b6:	2200      	movs	r2, #0
 80008b8:	e6b1      	b.n	800061e <__aeabi_fadd+0x8a>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x32c>
 80008be:	e71d      	b.n	80006fc <__aeabi_fadd+0x168>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2400      	movs	r4, #0
 80008c4:	469c      	mov	ip, r3
 80008c6:	e6aa      	b.n	800061e <__aeabi_fadd+0x8a>
 80008c8:	fbffffff 	.word	0xfbffffff
 80008cc:	7dffffff 	.word	0x7dffffff

080008d0 <__aeabi_fdiv>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	464f      	mov	r7, r9
 80008d4:	4646      	mov	r6, r8
 80008d6:	46d6      	mov	lr, sl
 80008d8:	0245      	lsls	r5, r0, #9
 80008da:	b5c0      	push	{r6, r7, lr}
 80008dc:	0047      	lsls	r7, r0, #1
 80008de:	1c0c      	adds	r4, r1, #0
 80008e0:	0a6d      	lsrs	r5, r5, #9
 80008e2:	0e3f      	lsrs	r7, r7, #24
 80008e4:	0fc6      	lsrs	r6, r0, #31
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0x1c>
 80008ea:	e070      	b.n	80009ce <__aeabi_fdiv+0xfe>
 80008ec:	2fff      	cmp	r7, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fdiv+0x22>
 80008f0:	e075      	b.n	80009de <__aeabi_fdiv+0x10e>
 80008f2:	00eb      	lsls	r3, r5, #3
 80008f4:	2580      	movs	r5, #128	; 0x80
 80008f6:	04ed      	lsls	r5, r5, #19
 80008f8:	431d      	orrs	r5, r3
 80008fa:	2300      	movs	r3, #0
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	3f7f      	subs	r7, #127	; 0x7f
 8000902:	0260      	lsls	r0, r4, #9
 8000904:	0a43      	lsrs	r3, r0, #9
 8000906:	4698      	mov	r8, r3
 8000908:	0063      	lsls	r3, r4, #1
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	0fe4      	lsrs	r4, r4, #31
 800090e:	2b00      	cmp	r3, #0
 8000910:	d04e      	beq.n	80009b0 <__aeabi_fdiv+0xe0>
 8000912:	2bff      	cmp	r3, #255	; 0xff
 8000914:	d046      	beq.n	80009a4 <__aeabi_fdiv+0xd4>
 8000916:	4642      	mov	r2, r8
 8000918:	00d0      	lsls	r0, r2, #3
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	04d2      	lsls	r2, r2, #19
 800091e:	4302      	orrs	r2, r0
 8000920:	4690      	mov	r8, r2
 8000922:	2200      	movs	r2, #0
 8000924:	3b7f      	subs	r3, #127	; 0x7f
 8000926:	0031      	movs	r1, r6
 8000928:	1aff      	subs	r7, r7, r3
 800092a:	464b      	mov	r3, r9
 800092c:	4061      	eors	r1, r4
 800092e:	b2c9      	uxtb	r1, r1
 8000930:	4313      	orrs	r3, r2
 8000932:	2b0f      	cmp	r3, #15
 8000934:	d900      	bls.n	8000938 <__aeabi_fdiv+0x68>
 8000936:	e0b5      	b.n	8000aa4 <__aeabi_fdiv+0x1d4>
 8000938:	486e      	ldr	r0, [pc, #440]	; (8000af4 <__aeabi_fdiv+0x224>)
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	58c3      	ldr	r3, [r0, r3]
 800093e:	469f      	mov	pc, r3
 8000940:	2300      	movs	r3, #0
 8000942:	4698      	mov	r8, r3
 8000944:	0026      	movs	r6, r4
 8000946:	4645      	mov	r5, r8
 8000948:	4692      	mov	sl, r2
 800094a:	4653      	mov	r3, sl
 800094c:	2b02      	cmp	r3, #2
 800094e:	d100      	bne.n	8000952 <__aeabi_fdiv+0x82>
 8000950:	e089      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000952:	2b03      	cmp	r3, #3
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x88>
 8000956:	e09e      	b.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000958:	2b01      	cmp	r3, #1
 800095a:	d018      	beq.n	800098e <__aeabi_fdiv+0xbe>
 800095c:	003b      	movs	r3, r7
 800095e:	337f      	adds	r3, #127	; 0x7f
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd69      	ble.n	8000a38 <__aeabi_fdiv+0x168>
 8000964:	076a      	lsls	r2, r5, #29
 8000966:	d004      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000968:	220f      	movs	r2, #15
 800096a:	402a      	ands	r2, r5
 800096c:	2a04      	cmp	r2, #4
 800096e:	d000      	beq.n	8000972 <__aeabi_fdiv+0xa2>
 8000970:	3504      	adds	r5, #4
 8000972:	012a      	lsls	r2, r5, #4
 8000974:	d503      	bpl.n	800097e <__aeabi_fdiv+0xae>
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <__aeabi_fdiv+0x228>)
 8000978:	401d      	ands	r5, r3
 800097a:	003b      	movs	r3, r7
 800097c:	3380      	adds	r3, #128	; 0x80
 800097e:	2bfe      	cmp	r3, #254	; 0xfe
 8000980:	dd00      	ble.n	8000984 <__aeabi_fdiv+0xb4>
 8000982:	e070      	b.n	8000a66 <__aeabi_fdiv+0x196>
 8000984:	01ad      	lsls	r5, r5, #6
 8000986:	0a6d      	lsrs	r5, r5, #9
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	e002      	b.n	8000992 <__aeabi_fdiv+0xc2>
 800098c:	000e      	movs	r6, r1
 800098e:	2000      	movs	r0, #0
 8000990:	2500      	movs	r5, #0
 8000992:	05c0      	lsls	r0, r0, #23
 8000994:	4328      	orrs	r0, r5
 8000996:	07f6      	lsls	r6, r6, #31
 8000998:	4330      	orrs	r0, r6
 800099a:	bce0      	pop	{r5, r6, r7}
 800099c:	46ba      	mov	sl, r7
 800099e:	46b1      	mov	r9, r6
 80009a0:	46a8      	mov	r8, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d13f      	bne.n	8000a2a <__aeabi_fdiv+0x15a>
 80009aa:	2202      	movs	r2, #2
 80009ac:	3fff      	subs	r7, #255	; 0xff
 80009ae:	e003      	b.n	80009b8 <__aeabi_fdiv+0xe8>
 80009b0:	4643      	mov	r3, r8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12d      	bne.n	8000a12 <__aeabi_fdiv+0x142>
 80009b6:	2201      	movs	r2, #1
 80009b8:	0031      	movs	r1, r6
 80009ba:	464b      	mov	r3, r9
 80009bc:	4061      	eors	r1, r4
 80009be:	b2c9      	uxtb	r1, r1
 80009c0:	4313      	orrs	r3, r2
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d834      	bhi.n	8000a30 <__aeabi_fdiv+0x160>
 80009c6:	484d      	ldr	r0, [pc, #308]	; (8000afc <__aeabi_fdiv+0x22c>)
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	58c3      	ldr	r3, [r0, r3]
 80009cc:	469f      	mov	pc, r3
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d113      	bne.n	80009fa <__aeabi_fdiv+0x12a>
 80009d2:	2304      	movs	r3, #4
 80009d4:	4699      	mov	r9, r3
 80009d6:	3b03      	subs	r3, #3
 80009d8:	2700      	movs	r7, #0
 80009da:	469a      	mov	sl, r3
 80009dc:	e791      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d105      	bne.n	80009ee <__aeabi_fdiv+0x11e>
 80009e2:	2308      	movs	r3, #8
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b06      	subs	r3, #6
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e789      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009ee:	230c      	movs	r3, #12
 80009f0:	4699      	mov	r9, r3
 80009f2:	3b09      	subs	r3, #9
 80009f4:	27ff      	movs	r7, #255	; 0xff
 80009f6:	469a      	mov	sl, r3
 80009f8:	e783      	b.n	8000902 <__aeabi_fdiv+0x32>
 80009fa:	0028      	movs	r0, r5
 80009fc:	f002 fb28 	bl	8003050 <__clzsi2>
 8000a00:	2776      	movs	r7, #118	; 0x76
 8000a02:	1f43      	subs	r3, r0, #5
 8000a04:	409d      	lsls	r5, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	427f      	negs	r7, r7
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	1a3f      	subs	r7, r7, r0
 8000a10:	e777      	b.n	8000902 <__aeabi_fdiv+0x32>
 8000a12:	4640      	mov	r0, r8
 8000a14:	f002 fb1c 	bl	8003050 <__clzsi2>
 8000a18:	4642      	mov	r2, r8
 8000a1a:	1f43      	subs	r3, r0, #5
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	2376      	movs	r3, #118	; 0x76
 8000a20:	425b      	negs	r3, r3
 8000a22:	4690      	mov	r8, r2
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	2200      	movs	r2, #0
 8000a28:	e77d      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	e77a      	b.n	8000926 <__aeabi_fdiv+0x56>
 8000a30:	000e      	movs	r6, r1
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2500      	movs	r5, #0
 8000a36:	e7ac      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a38:	2001      	movs	r0, #1
 8000a3a:	1ac0      	subs	r0, r0, r3
 8000a3c:	281b      	cmp	r0, #27
 8000a3e:	dca6      	bgt.n	800098e <__aeabi_fdiv+0xbe>
 8000a40:	379e      	adds	r7, #158	; 0x9e
 8000a42:	002a      	movs	r2, r5
 8000a44:	40bd      	lsls	r5, r7
 8000a46:	40c2      	lsrs	r2, r0
 8000a48:	1e6b      	subs	r3, r5, #1
 8000a4a:	419d      	sbcs	r5, r3
 8000a4c:	4315      	orrs	r5, r2
 8000a4e:	076b      	lsls	r3, r5, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a52:	230f      	movs	r3, #15
 8000a54:	402b      	ands	r3, r5
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fdiv+0x18c>
 8000a5a:	3504      	adds	r5, #4
 8000a5c:	016b      	lsls	r3, r5, #5
 8000a5e:	d544      	bpl.n	8000aea <__aeabi_fdiv+0x21a>
 8000a60:	2001      	movs	r0, #1
 8000a62:	2500      	movs	r5, #0
 8000a64:	e795      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a66:	20ff      	movs	r0, #255	; 0xff
 8000a68:	2500      	movs	r5, #0
 8000a6a:	e792      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a6c:	2580      	movs	r5, #128	; 0x80
 8000a6e:	2600      	movs	r6, #0
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	03ed      	lsls	r5, r5, #15
 8000a74:	e78d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a76:	2300      	movs	r3, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	03c0      	lsls	r0, r0, #15
 8000a7e:	4205      	tst	r5, r0
 8000a80:	d009      	beq.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a82:	4643      	mov	r3, r8
 8000a84:	4203      	tst	r3, r0
 8000a86:	d106      	bne.n	8000a96 <__aeabi_fdiv+0x1c6>
 8000a88:	4645      	mov	r5, r8
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	026d      	lsls	r5, r5, #9
 8000a8e:	0026      	movs	r6, r4
 8000a90:	20ff      	movs	r0, #255	; 0xff
 8000a92:	0a6d      	lsrs	r5, r5, #9
 8000a94:	e77d      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000a96:	2080      	movs	r0, #128	; 0x80
 8000a98:	03c0      	lsls	r0, r0, #15
 8000a9a:	4305      	orrs	r5, r0
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	0a6d      	lsrs	r5, r5, #9
 8000aa2:	e776      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	0150      	lsls	r0, r2, #5
 8000aaa:	4283      	cmp	r3, r0
 8000aac:	d219      	bcs.n	8000ae2 <__aeabi_fdiv+0x212>
 8000aae:	221b      	movs	r2, #27
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	3f01      	subs	r7, #1
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	006d      	lsls	r5, r5, #1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	db01      	blt.n	8000ac4 <__aeabi_fdiv+0x1f4>
 8000ac0:	4298      	cmp	r0, r3
 8000ac2:	d801      	bhi.n	8000ac8 <__aeabi_fdiv+0x1f8>
 8000ac4:	1a1b      	subs	r3, r3, r0
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d1f3      	bne.n	8000ab6 <__aeabi_fdiv+0x1e6>
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	4193      	sbcs	r3, r2
 8000ad2:	431d      	orrs	r5, r3
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	337f      	adds	r3, #127	; 0x7f
 8000ad8:	000e      	movs	r6, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_fdiv+0x210>
 8000ade:	e741      	b.n	8000964 <__aeabi_fdiv+0x94>
 8000ae0:	e7aa      	b.n	8000a38 <__aeabi_fdiv+0x168>
 8000ae2:	221a      	movs	r2, #26
 8000ae4:	2501      	movs	r5, #1
 8000ae6:	1a1b      	subs	r3, r3, r0
 8000ae8:	e7e4      	b.n	8000ab4 <__aeabi_fdiv+0x1e4>
 8000aea:	01ad      	lsls	r5, r5, #6
 8000aec:	2000      	movs	r0, #0
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	e74f      	b.n	8000992 <__aeabi_fdiv+0xc2>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	08018598 	.word	0x08018598
 8000af8:	f7ffffff 	.word	0xf7ffffff
 8000afc:	080185d8 	.word	0x080185d8

08000b00 <__eqsf2>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	0042      	lsls	r2, r0, #1
 8000b04:	0245      	lsls	r5, r0, #9
 8000b06:	024e      	lsls	r6, r1, #9
 8000b08:	004c      	lsls	r4, r1, #1
 8000b0a:	0fc3      	lsrs	r3, r0, #31
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	2001      	movs	r0, #1
 8000b10:	0e12      	lsrs	r2, r2, #24
 8000b12:	0a76      	lsrs	r6, r6, #9
 8000b14:	0e24      	lsrs	r4, r4, #24
 8000b16:	0fc9      	lsrs	r1, r1, #31
 8000b18:	2aff      	cmp	r2, #255	; 0xff
 8000b1a:	d006      	beq.n	8000b2a <__eqsf2+0x2a>
 8000b1c:	2cff      	cmp	r4, #255	; 0xff
 8000b1e:	d003      	beq.n	8000b28 <__eqsf2+0x28>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	d101      	bne.n	8000b28 <__eqsf2+0x28>
 8000b24:	42b5      	cmp	r5, r6
 8000b26:	d006      	beq.n	8000b36 <__eqsf2+0x36>
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d1fc      	bne.n	8000b28 <__eqsf2+0x28>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d1fa      	bne.n	8000b28 <__eqsf2+0x28>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1f8      	bne.n	8000b28 <__eqsf2+0x28>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d006      	beq.n	8000b48 <__eqsf2+0x48>
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d1f3      	bne.n	8000b28 <__eqsf2+0x28>
 8000b40:	0028      	movs	r0, r5
 8000b42:	1e43      	subs	r3, r0, #1
 8000b44:	4198      	sbcs	r0, r3
 8000b46:	e7ef      	b.n	8000b28 <__eqsf2+0x28>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7ed      	b.n	8000b28 <__eqsf2+0x28>

08000b4c <__gesf2>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	0042      	lsls	r2, r0, #1
 8000b50:	0245      	lsls	r5, r0, #9
 8000b52:	024e      	lsls	r6, r1, #9
 8000b54:	004c      	lsls	r4, r1, #1
 8000b56:	0fc3      	lsrs	r3, r0, #31
 8000b58:	0a6d      	lsrs	r5, r5, #9
 8000b5a:	0e12      	lsrs	r2, r2, #24
 8000b5c:	0a76      	lsrs	r6, r6, #9
 8000b5e:	0e24      	lsrs	r4, r4, #24
 8000b60:	0fc8      	lsrs	r0, r1, #31
 8000b62:	2aff      	cmp	r2, #255	; 0xff
 8000b64:	d01b      	beq.n	8000b9e <__gesf2+0x52>
 8000b66:	2cff      	cmp	r4, #255	; 0xff
 8000b68:	d00e      	beq.n	8000b88 <__gesf2+0x3c>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d11b      	bne.n	8000ba6 <__gesf2+0x5a>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d101      	bne.n	8000b76 <__gesf2+0x2a>
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d01c      	beq.n	8000bb0 <__gesf2+0x64>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d00c      	beq.n	8000b94 <__gesf2+0x48>
 8000b7a:	4283      	cmp	r3, r0
 8000b7c:	d01c      	beq.n	8000bb8 <__gesf2+0x6c>
 8000b7e:	2102      	movs	r1, #2
 8000b80:	1e58      	subs	r0, r3, #1
 8000b82:	4008      	ands	r0, r1
 8000b84:	3801      	subs	r0, #1
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d122      	bne.n	8000bd2 <__gesf2+0x86>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d1f4      	bne.n	8000b7a <__gesf2+0x2e>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d1f2      	bne.n	8000b7a <__gesf2+0x2e>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1f6      	bne.n	8000b86 <__gesf2+0x3a>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	e7f3      	b.n	8000b86 <__gesf2+0x3a>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d117      	bne.n	8000bd2 <__gesf2+0x86>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d0f0      	beq.n	8000b88 <__gesf2+0x3c>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d1e7      	bne.n	8000b7a <__gesf2+0x2e>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d1e5      	bne.n	8000b7a <__gesf2+0x2e>
 8000bae:	e7e6      	b.n	8000b7e <__gesf2+0x32>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e7      	beq.n	8000b86 <__gesf2+0x3a>
 8000bb6:	e7e2      	b.n	8000b7e <__gesf2+0x32>
 8000bb8:	42a2      	cmp	r2, r4
 8000bba:	dc05      	bgt.n	8000bc8 <__gesf2+0x7c>
 8000bbc:	dbea      	blt.n	8000b94 <__gesf2+0x48>
 8000bbe:	42b5      	cmp	r5, r6
 8000bc0:	d802      	bhi.n	8000bc8 <__gesf2+0x7c>
 8000bc2:	d3e7      	bcc.n	8000b94 <__gesf2+0x48>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7de      	b.n	8000b86 <__gesf2+0x3a>
 8000bc8:	4243      	negs	r3, r0
 8000bca:	4158      	adcs	r0, r3
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7d9      	b.n	8000b86 <__gesf2+0x3a>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	e7d6      	b.n	8000b86 <__gesf2+0x3a>

08000bd8 <__lesf2>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0245      	lsls	r5, r0, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	0a76      	lsrs	r6, r6, #9
 8000bea:	0e24      	lsrs	r4, r4, #24
 8000bec:	0fc8      	lsrs	r0, r1, #31
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d00b      	beq.n	8000c0a <__lesf2+0x32>
 8000bf2:	2cff      	cmp	r4, #255	; 0xff
 8000bf4:	d00d      	beq.n	8000c12 <__lesf2+0x3a>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d11f      	bne.n	8000c3a <__lesf2+0x62>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d116      	bne.n	8000c2c <__lesf2+0x54>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d114      	bne.n	8000c2c <__lesf2+0x54>
 8000c02:	2000      	movs	r0, #0
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d010      	beq.n	8000c2a <__lesf2+0x52>
 8000c08:	e009      	b.n	8000c1e <__lesf2+0x46>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d10c      	bne.n	8000c28 <__lesf2+0x50>
 8000c0e:	2cff      	cmp	r4, #255	; 0xff
 8000c10:	d113      	bne.n	8000c3a <__lesf2+0x62>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d108      	bne.n	8000c28 <__lesf2+0x50>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d008      	beq.n	8000c2c <__lesf2+0x54>
 8000c1a:	4283      	cmp	r3, r0
 8000c1c:	d012      	beq.n	8000c44 <__lesf2+0x6c>
 8000c1e:	2102      	movs	r1, #2
 8000c20:	1e58      	subs	r0, r3, #1
 8000c22:	4008      	ands	r0, r1
 8000c24:	3801      	subs	r0, #1
 8000c26:	e000      	b.n	8000c2a <__lesf2+0x52>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d1f4      	bne.n	8000c1a <__lesf2+0x42>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d1fa      	bne.n	8000c2a <__lesf2+0x52>
 8000c34:	2001      	movs	r0, #1
 8000c36:	4240      	negs	r0, r0
 8000c38:	e7f7      	b.n	8000c2a <__lesf2+0x52>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d1ed      	bne.n	8000c1a <__lesf2+0x42>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d1eb      	bne.n	8000c1a <__lesf2+0x42>
 8000c42:	e7ec      	b.n	8000c1e <__lesf2+0x46>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__lesf2+0x7c>
 8000c48:	dbf2      	blt.n	8000c30 <__lesf2+0x58>
 8000c4a:	42b5      	cmp	r5, r6
 8000c4c:	d802      	bhi.n	8000c54 <__lesf2+0x7c>
 8000c4e:	d3ef      	bcc.n	8000c30 <__lesf2+0x58>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7ea      	b.n	8000c2a <__lesf2+0x52>
 8000c54:	4243      	negs	r3, r0
 8000c56:	4158      	adcs	r0, r3
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	3801      	subs	r0, #1
 8000c5c:	e7e5      	b.n	8000c2a <__lesf2+0x52>
 8000c5e:	46c0      	nop			; (mov r8, r8)

08000c60 <__aeabi_fmul>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	464f      	mov	r7, r9
 8000c64:	4646      	mov	r6, r8
 8000c66:	46d6      	mov	lr, sl
 8000c68:	0244      	lsls	r4, r0, #9
 8000c6a:	0045      	lsls	r5, r0, #1
 8000c6c:	b5c0      	push	{r6, r7, lr}
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	1c0f      	adds	r7, r1, #0
 8000c72:	0e2d      	lsrs	r5, r5, #24
 8000c74:	0fc6      	lsrs	r6, r0, #31
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fmul+0x1c>
 8000c7a:	e08d      	b.n	8000d98 <__aeabi_fmul+0x138>
 8000c7c:	2dff      	cmp	r5, #255	; 0xff
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_fmul+0x22>
 8000c80:	e092      	b.n	8000da8 <__aeabi_fmul+0x148>
 8000c82:	2300      	movs	r3, #0
 8000c84:	2080      	movs	r0, #128	; 0x80
 8000c86:	4699      	mov	r9, r3
 8000c88:	469a      	mov	sl, r3
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	04c0      	lsls	r0, r0, #19
 8000c8e:	4304      	orrs	r4, r0
 8000c90:	3d7f      	subs	r5, #127	; 0x7f
 8000c92:	0278      	lsls	r0, r7, #9
 8000c94:	0a43      	lsrs	r3, r0, #9
 8000c96:	4698      	mov	r8, r3
 8000c98:	007b      	lsls	r3, r7, #1
 8000c9a:	0e1b      	lsrs	r3, r3, #24
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fmul+0x44>
 8000ca2:	e070      	b.n	8000d86 <__aeabi_fmul+0x126>
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fmul+0x4a>
 8000ca8:	e086      	b.n	8000db8 <__aeabi_fmul+0x158>
 8000caa:	4642      	mov	r2, r8
 8000cac:	00d0      	lsls	r0, r2, #3
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	3b7f      	subs	r3, #127	; 0x7f
 8000cb2:	18ed      	adds	r5, r5, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	04d2      	lsls	r2, r2, #19
 8000cb8:	4302      	orrs	r2, r0
 8000cba:	4690      	mov	r8, r2
 8000cbc:	469c      	mov	ip, r3
 8000cbe:	0031      	movs	r1, r6
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	4079      	eors	r1, r7
 8000cc4:	1c68      	adds	r0, r5, #1
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d81c      	bhi.n	8000d04 <__aeabi_fmul+0xa4>
 8000cca:	4a76      	ldr	r2, [pc, #472]	; (8000ea4 <__aeabi_fmul+0x244>)
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	0039      	movs	r1, r7
 8000cd4:	4644      	mov	r4, r8
 8000cd6:	46e2      	mov	sl, ip
 8000cd8:	4653      	mov	r3, sl
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d00f      	beq.n	8000cfe <__aeabi_fmul+0x9e>
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fmul+0x84>
 8000ce2:	e0d7      	b.n	8000e94 <__aeabi_fmul+0x234>
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d137      	bne.n	8000d58 <__aeabi_fmul+0xf8>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	2400      	movs	r4, #0
 8000cec:	05c0      	lsls	r0, r0, #23
 8000cee:	4320      	orrs	r0, r4
 8000cf0:	07c9      	lsls	r1, r1, #31
 8000cf2:	4308      	orrs	r0, r1
 8000cf4:	bce0      	pop	{r5, r6, r7}
 8000cf6:	46ba      	mov	sl, r7
 8000cf8:	46b1      	mov	r9, r6
 8000cfa:	46a8      	mov	r8, r5
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfe:	20ff      	movs	r0, #255	; 0xff
 8000d00:	2400      	movs	r4, #0
 8000d02:	e7f3      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d04:	0c26      	lsrs	r6, r4, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c22      	lsrs	r2, r4, #16
 8000d0a:	4644      	mov	r4, r8
 8000d0c:	0424      	lsls	r4, r4, #16
 8000d0e:	0c24      	lsrs	r4, r4, #16
 8000d10:	4643      	mov	r3, r8
 8000d12:	0027      	movs	r7, r4
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	4357      	muls	r7, r2
 8000d18:	4374      	muls	r4, r6
 8000d1a:	435a      	muls	r2, r3
 8000d1c:	435e      	muls	r6, r3
 8000d1e:	1912      	adds	r2, r2, r4
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	189b      	adds	r3, r3, r2
 8000d24:	429c      	cmp	r4, r3
 8000d26:	d903      	bls.n	8000d30 <__aeabi_fmul+0xd0>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	4466      	add	r6, ip
 8000d30:	043f      	lsls	r7, r7, #16
 8000d32:	041a      	lsls	r2, r3, #16
 8000d34:	0c3f      	lsrs	r7, r7, #16
 8000d36:	19d2      	adds	r2, r2, r7
 8000d38:	0194      	lsls	r4, r2, #6
 8000d3a:	1e67      	subs	r7, r4, #1
 8000d3c:	41bc      	sbcs	r4, r7
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	0e92      	lsrs	r2, r2, #26
 8000d42:	199b      	adds	r3, r3, r6
 8000d44:	4314      	orrs	r4, r2
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	d400      	bmi.n	8000d50 <__aeabi_fmul+0xf0>
 8000d4e:	e09b      	b.n	8000e88 <__aeabi_fmul+0x228>
 8000d50:	2301      	movs	r3, #1
 8000d52:	0862      	lsrs	r2, r4, #1
 8000d54:	401c      	ands	r4, r3
 8000d56:	4314      	orrs	r4, r2
 8000d58:	0002      	movs	r2, r0
 8000d5a:	327f      	adds	r2, #127	; 0x7f
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	dd64      	ble.n	8000e2a <__aeabi_fmul+0x1ca>
 8000d60:	0763      	lsls	r3, r4, #29
 8000d62:	d004      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d64:	230f      	movs	r3, #15
 8000d66:	4023      	ands	r3, r4
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x10e>
 8000d6c:	3404      	adds	r4, #4
 8000d6e:	0123      	lsls	r3, r4, #4
 8000d70:	d503      	bpl.n	8000d7a <__aeabi_fmul+0x11a>
 8000d72:	0002      	movs	r2, r0
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <__aeabi_fmul+0x248>)
 8000d76:	3280      	adds	r2, #128	; 0x80
 8000d78:	401c      	ands	r4, r3
 8000d7a:	2afe      	cmp	r2, #254	; 0xfe
 8000d7c:	dcbf      	bgt.n	8000cfe <__aeabi_fmul+0x9e>
 8000d7e:	01a4      	lsls	r4, r4, #6
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	b2d0      	uxtb	r0, r2
 8000d84:	e7b2      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000d86:	4643      	mov	r3, r8
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d13d      	bne.n	8000e08 <__aeabi_fmul+0x1a8>
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	3301      	adds	r3, #1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	e792      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d129      	bne.n	8000df0 <__aeabi_fmul+0x190>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b03      	subs	r3, #3
 8000da2:	2500      	movs	r5, #0
 8000da4:	469a      	mov	sl, r3
 8000da6:	e774      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d11b      	bne.n	8000de4 <__aeabi_fmul+0x184>
 8000dac:	2308      	movs	r3, #8
 8000dae:	4699      	mov	r9, r3
 8000db0:	3b06      	subs	r3, #6
 8000db2:	25ff      	movs	r5, #255	; 0xff
 8000db4:	469a      	mov	sl, r3
 8000db6:	e76c      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000db8:	4643      	mov	r3, r8
 8000dba:	35ff      	adds	r5, #255	; 0xff
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10b      	bne.n	8000dd8 <__aeabi_fmul+0x178>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	469c      	mov	ip, r3
 8000dca:	e778      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000dcc:	4653      	mov	r3, sl
 8000dce:	0031      	movs	r1, r6
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fmul+0x176>
 8000dd4:	e783      	b.n	8000cde <__aeabi_fmul+0x7e>
 8000dd6:	e792      	b.n	8000cfe <__aeabi_fmul+0x9e>
 8000dd8:	2303      	movs	r3, #3
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000de4:	230c      	movs	r3, #12
 8000de6:	4699      	mov	r9, r3
 8000de8:	3b09      	subs	r3, #9
 8000dea:	25ff      	movs	r5, #255	; 0xff
 8000dec:	469a      	mov	sl, r3
 8000dee:	e750      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000df0:	0020      	movs	r0, r4
 8000df2:	f002 f92d 	bl	8003050 <__clzsi2>
 8000df6:	2576      	movs	r5, #118	; 0x76
 8000df8:	1f43      	subs	r3, r0, #5
 8000dfa:	409c      	lsls	r4, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	426d      	negs	r5, r5
 8000e00:	4699      	mov	r9, r3
 8000e02:	469a      	mov	sl, r3
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	e744      	b.n	8000c92 <__aeabi_fmul+0x32>
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f002 f921 	bl	8003050 <__clzsi2>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	1f43      	subs	r3, r0, #5
 8000e12:	409a      	lsls	r2, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	1a2d      	subs	r5, r5, r0
 8000e18:	4690      	mov	r8, r2
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	3d76      	subs	r5, #118	; 0x76
 8000e1e:	e74e      	b.n	8000cbe <__aeabi_fmul+0x5e>
 8000e20:	2480      	movs	r4, #128	; 0x80
 8000e22:	2100      	movs	r1, #0
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	03e4      	lsls	r4, r4, #15
 8000e28:	e760      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	2b1b      	cmp	r3, #27
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fmul+0x1d4>
 8000e32:	e759      	b.n	8000ce8 <__aeabi_fmul+0x88>
 8000e34:	0022      	movs	r2, r4
 8000e36:	309e      	adds	r0, #158	; 0x9e
 8000e38:	40da      	lsrs	r2, r3
 8000e3a:	4084      	lsls	r4, r0
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	1e62      	subs	r2, r4, #1
 8000e40:	4194      	sbcs	r4, r2
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0763      	lsls	r3, r4, #29
 8000e46:	d004      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e48:	230f      	movs	r3, #15
 8000e4a:	4023      	ands	r3, r4
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fmul+0x1f2>
 8000e50:	3404      	adds	r4, #4
 8000e52:	0163      	lsls	r3, r4, #5
 8000e54:	d51a      	bpl.n	8000e8c <__aeabi_fmul+0x22c>
 8000e56:	2001      	movs	r0, #1
 8000e58:	2400      	movs	r4, #0
 8000e5a:	e747      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e5c:	2080      	movs	r0, #128	; 0x80
 8000e5e:	03c0      	lsls	r0, r0, #15
 8000e60:	4204      	tst	r4, r0
 8000e62:	d009      	beq.n	8000e78 <__aeabi_fmul+0x218>
 8000e64:	4643      	mov	r3, r8
 8000e66:	4203      	tst	r3, r0
 8000e68:	d106      	bne.n	8000e78 <__aeabi_fmul+0x218>
 8000e6a:	4644      	mov	r4, r8
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	0264      	lsls	r4, r4, #9
 8000e70:	0039      	movs	r1, r7
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	0a64      	lsrs	r4, r4, #9
 8000e76:	e739      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e78:	2080      	movs	r0, #128	; 0x80
 8000e7a:	03c0      	lsls	r0, r0, #15
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	0264      	lsls	r4, r4, #9
 8000e80:	0031      	movs	r1, r6
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	0a64      	lsrs	r4, r4, #9
 8000e86:	e731      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e88:	0028      	movs	r0, r5
 8000e8a:	e765      	b.n	8000d58 <__aeabi_fmul+0xf8>
 8000e8c:	01a4      	lsls	r4, r4, #6
 8000e8e:	2000      	movs	r0, #0
 8000e90:	0a64      	lsrs	r4, r4, #9
 8000e92:	e72b      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000e94:	2080      	movs	r0, #128	; 0x80
 8000e96:	03c0      	lsls	r0, r0, #15
 8000e98:	4304      	orrs	r4, r0
 8000e9a:	0264      	lsls	r4, r4, #9
 8000e9c:	20ff      	movs	r0, #255	; 0xff
 8000e9e:	0a64      	lsrs	r4, r4, #9
 8000ea0:	e724      	b.n	8000cec <__aeabi_fmul+0x8c>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	08018618 	.word	0x08018618
 8000ea8:	f7ffffff 	.word	0xf7ffffff

08000eac <__aeabi_fsub>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	46ce      	mov	lr, r9
 8000eb0:	4647      	mov	r7, r8
 8000eb2:	0243      	lsls	r3, r0, #9
 8000eb4:	0a5b      	lsrs	r3, r3, #9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	00da      	lsls	r2, r3, #3
 8000eba:	4694      	mov	ip, r2
 8000ebc:	0a72      	lsrs	r2, r6, #9
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	0045      	lsls	r5, r0, #1
 8000ec2:	004a      	lsls	r2, r1, #1
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	0e2d      	lsrs	r5, r5, #24
 8000ec8:	001f      	movs	r7, r3
 8000eca:	0fc4      	lsrs	r4, r0, #31
 8000ecc:	0e12      	lsrs	r2, r2, #24
 8000ece:	0fc9      	lsrs	r1, r1, #31
 8000ed0:	09b6      	lsrs	r6, r6, #6
 8000ed2:	2aff      	cmp	r2, #255	; 0xff
 8000ed4:	d05b      	beq.n	8000f8e <__aeabi_fsub+0xe2>
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4041      	eors	r1, r0
 8000eda:	428c      	cmp	r4, r1
 8000edc:	d039      	beq.n	8000f52 <__aeabi_fsub+0xa6>
 8000ede:	1aa8      	subs	r0, r5, r2
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	dd5a      	ble.n	8000f9a <__aeabi_fsub+0xee>
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d06a      	beq.n	8000fbe <__aeabi_fsub+0x112>
 8000ee8:	2dff      	cmp	r5, #255	; 0xff
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x42>
 8000eec:	e0d9      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	04d2      	lsls	r2, r2, #19
 8000ef2:	4316      	orrs	r6, r2
 8000ef4:	281b      	cmp	r0, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0x4e>
 8000ef8:	e0e9      	b.n	80010ce <__aeabi_fsub+0x222>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4663      	mov	r3, ip
 8000efe:	1a18      	subs	r0, r3, r0
 8000f00:	0143      	lsls	r3, r0, #5
 8000f02:	d400      	bmi.n	8000f06 <__aeabi_fsub+0x5a>
 8000f04:	e0b4      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8000f06:	0180      	lsls	r0, r0, #6
 8000f08:	0987      	lsrs	r7, r0, #6
 8000f0a:	0038      	movs	r0, r7
 8000f0c:	f002 f8a0 	bl	8003050 <__clzsi2>
 8000f10:	3805      	subs	r0, #5
 8000f12:	4087      	lsls	r7, r0
 8000f14:	4285      	cmp	r5, r0
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x6e>
 8000f18:	e0cc      	b.n	80010b4 <__aeabi_fsub+0x208>
 8000f1a:	1a2d      	subs	r5, r5, r0
 8000f1c:	48b5      	ldr	r0, [pc, #724]	; (80011f4 <__aeabi_fsub+0x348>)
 8000f1e:	4038      	ands	r0, r7
 8000f20:	0743      	lsls	r3, r0, #29
 8000f22:	d004      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f24:	230f      	movs	r3, #15
 8000f26:	4003      	ands	r3, r0
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x82>
 8000f2c:	3004      	adds	r0, #4
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0x88>
 8000f32:	e0a0      	b.n	8001076 <__aeabi_fsub+0x1ca>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	; 0xfe
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x90>
 8000f3a:	e08d      	b.n	8001058 <__aeabi_fsub+0x1ac>
 8000f3c:	0180      	lsls	r0, r0, #6
 8000f3e:	0a47      	lsrs	r7, r0, #9
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	05d0      	lsls	r0, r2, #23
 8000f44:	4338      	orrs	r0, r7
 8000f46:	07e4      	lsls	r4, r4, #31
 8000f48:	4320      	orrs	r0, r4
 8000f4a:	bcc0      	pop	{r6, r7}
 8000f4c:	46b9      	mov	r9, r7
 8000f4e:	46b0      	mov	r8, r6
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f52:	1aa8      	subs	r0, r5, r2
 8000f54:	4680      	mov	r8, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	dd45      	ble.n	8000fe6 <__aeabi_fsub+0x13a>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d070      	beq.n	8001040 <__aeabi_fsub+0x194>
 8000f5e:	2dff      	cmp	r5, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0xb8>
 8000f62:	e09e      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	04db      	lsls	r3, r3, #19
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	2b1b      	cmp	r3, #27
 8000f6e:	dc00      	bgt.n	8000f72 <__aeabi_fsub+0xc6>
 8000f70:	e0d2      	b.n	8001118 <__aeabi_fsub+0x26c>
 8000f72:	2001      	movs	r0, #1
 8000f74:	4460      	add	r0, ip
 8000f76:	0143      	lsls	r3, r0, #5
 8000f78:	d57a      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 8000f7a:	3501      	adds	r5, #1
 8000f7c:	2dff      	cmp	r5, #255	; 0xff
 8000f7e:	d06b      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4a9d      	ldr	r2, [pc, #628]	; (80011f8 <__aeabi_fsub+0x34c>)
 8000f84:	4003      	ands	r3, r0
 8000f86:	0840      	lsrs	r0, r0, #1
 8000f88:	4010      	ands	r0, r2
 8000f8a:	4318      	orrs	r0, r3
 8000f8c:	e7c8      	b.n	8000f20 <__aeabi_fsub+0x74>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d020      	beq.n	8000fd4 <__aeabi_fsub+0x128>
 8000f92:	428c      	cmp	r4, r1
 8000f94:	d023      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000f96:	0028      	movs	r0, r5
 8000f98:	38ff      	subs	r0, #255	; 0xff
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d039      	beq.n	8001012 <__aeabi_fsub+0x166>
 8000f9e:	1b57      	subs	r7, r2, r5
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0xfa>
 8000fa4:	e09d      	b.n	80010e2 <__aeabi_fsub+0x236>
 8000fa6:	4663      	mov	r3, ip
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x102>
 8000fac:	e0db      	b.n	8001166 <__aeabi_fsub+0x2ba>
 8000fae:	1e7b      	subs	r3, r7, #1
 8000fb0:	2f01      	cmp	r7, #1
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x10a>
 8000fb4:	e10d      	b.n	80011d2 <__aeabi_fsub+0x326>
 8000fb6:	2fff      	cmp	r7, #255	; 0xff
 8000fb8:	d071      	beq.n	800109e <__aeabi_fsub+0x1f2>
 8000fba:	001f      	movs	r7, r3
 8000fbc:	e098      	b.n	80010f0 <__aeabi_fsub+0x244>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x118>
 8000fc2:	e0a7      	b.n	8001114 <__aeabi_fsub+0x268>
 8000fc4:	1e42      	subs	r2, r0, #1
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x120>
 8000fca:	e0e6      	b.n	800119a <__aeabi_fsub+0x2ee>
 8000fcc:	28ff      	cmp	r0, #255	; 0xff
 8000fce:	d068      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	e78f      	b.n	8000ef4 <__aeabi_fsub+0x48>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	4041      	eors	r1, r0
 8000fd8:	42a1      	cmp	r1, r4
 8000fda:	d000      	beq.n	8000fde <__aeabi_fsub+0x132>
 8000fdc:	e77f      	b.n	8000ede <__aeabi_fsub+0x32>
 8000fde:	20ff      	movs	r0, #255	; 0xff
 8000fe0:	4240      	negs	r0, r0
 8000fe2:	4680      	mov	r8, r0
 8000fe4:	44a8      	add	r8, r5
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d038      	beq.n	800105e <__aeabi_fsub+0x1b2>
 8000fec:	1b51      	subs	r1, r2, r5
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x148>
 8000ff2:	e0ae      	b.n	8001152 <__aeabi_fsub+0x2a6>
 8000ff4:	2aff      	cmp	r2, #255	; 0xff
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x14e>
 8000ff8:	e0df      	b.n	80011ba <__aeabi_fsub+0x30e>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	4318      	orrs	r0, r3
 8001002:	4684      	mov	ip, r0
 8001004:	291b      	cmp	r1, #27
 8001006:	dc00      	bgt.n	800100a <__aeabi_fsub+0x15e>
 8001008:	e0d9      	b.n	80011be <__aeabi_fsub+0x312>
 800100a:	2001      	movs	r0, #1
 800100c:	0015      	movs	r5, r2
 800100e:	1980      	adds	r0, r0, r6
 8001010:	e7b1      	b.n	8000f76 <__aeabi_fsub+0xca>
 8001012:	20fe      	movs	r0, #254	; 0xfe
 8001014:	1c6a      	adds	r2, r5, #1
 8001016:	4210      	tst	r0, r2
 8001018:	d171      	bne.n	80010fe <__aeabi_fsub+0x252>
 800101a:	2d00      	cmp	r5, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x174>
 800101e:	e0a6      	b.n	800116e <__aeabi_fsub+0x2c2>
 8001020:	4663      	mov	r3, ip
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x17c>
 8001026:	e0d9      	b.n	80011dc <__aeabi_fsub+0x330>
 8001028:	2200      	movs	r2, #0
 800102a:	2e00      	cmp	r6, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x184>
 800102e:	e788      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001030:	1b98      	subs	r0, r3, r6
 8001032:	0143      	lsls	r3, r0, #5
 8001034:	d400      	bmi.n	8001038 <__aeabi_fsub+0x18c>
 8001036:	e0e1      	b.n	80011fc <__aeabi_fsub+0x350>
 8001038:	4663      	mov	r3, ip
 800103a:	000c      	movs	r4, r1
 800103c:	1af0      	subs	r0, r6, r3
 800103e:	e76f      	b.n	8000f20 <__aeabi_fsub+0x74>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x19a>
 8001044:	e0b7      	b.n	80011b6 <__aeabi_fsub+0x30a>
 8001046:	0002      	movs	r2, r0
 8001048:	3a01      	subs	r2, #1
 800104a:	2801      	cmp	r0, #1
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x1a4>
 800104e:	e09c      	b.n	800118a <__aeabi_fsub+0x2de>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d026      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001054:	4690      	mov	r8, r2
 8001056:	e788      	b.n	8000f6a <__aeabi_fsub+0xbe>
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	2700      	movs	r7, #0
 800105c:	e771      	b.n	8000f42 <__aeabi_fsub+0x96>
 800105e:	20fe      	movs	r0, #254	; 0xfe
 8001060:	1c6a      	adds	r2, r5, #1
 8001062:	4210      	tst	r0, r2
 8001064:	d064      	beq.n	8001130 <__aeabi_fsub+0x284>
 8001066:	2aff      	cmp	r2, #255	; 0xff
 8001068:	d0f6      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 800106a:	0015      	movs	r5, r2
 800106c:	4466      	add	r6, ip
 800106e:	0870      	lsrs	r0, r6, #1
 8001070:	0743      	lsls	r3, r0, #29
 8001072:	d000      	beq.n	8001076 <__aeabi_fsub+0x1ca>
 8001074:	e756      	b.n	8000f24 <__aeabi_fsub+0x78>
 8001076:	08c3      	lsrs	r3, r0, #3
 8001078:	2dff      	cmp	r5, #255	; 0xff
 800107a:	d012      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	0a5f      	lsrs	r7, r3, #9
 8001080:	b2ea      	uxtb	r2, r5
 8001082:	e75e      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001084:	4662      	mov	r2, ip
 8001086:	2a00      	cmp	r2, #0
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x1e0>
 800108a:	e096      	b.n	80011ba <__aeabi_fsub+0x30e>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d008      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	03d2      	lsls	r2, r2, #15
 8001094:	4213      	tst	r3, r2
 8001096:	d004      	beq.n	80010a2 <__aeabi_fsub+0x1f6>
 8001098:	4648      	mov	r0, r9
 800109a:	4210      	tst	r0, r2
 800109c:	d101      	bne.n	80010a2 <__aeabi_fsub+0x1f6>
 800109e:	000c      	movs	r4, r1
 80010a0:	464b      	mov	r3, r9
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0d8      	beq.n	8001058 <__aeabi_fsub+0x1ac>
 80010a6:	2780      	movs	r7, #128	; 0x80
 80010a8:	03ff      	lsls	r7, r7, #15
 80010aa:	431f      	orrs	r7, r3
 80010ac:	027f      	lsls	r7, r7, #9
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	0a7f      	lsrs	r7, r7, #9
 80010b2:	e746      	b.n	8000f42 <__aeabi_fsub+0x96>
 80010b4:	2320      	movs	r3, #32
 80010b6:	003a      	movs	r2, r7
 80010b8:	1b45      	subs	r5, r0, r5
 80010ba:	0038      	movs	r0, r7
 80010bc:	3501      	adds	r5, #1
 80010be:	40ea      	lsrs	r2, r5
 80010c0:	1b5d      	subs	r5, r3, r5
 80010c2:	40a8      	lsls	r0, r5
 80010c4:	1e43      	subs	r3, r0, #1
 80010c6:	4198      	sbcs	r0, r3
 80010c8:	2500      	movs	r5, #0
 80010ca:	4310      	orrs	r0, r2
 80010cc:	e728      	b.n	8000f20 <__aeabi_fsub+0x74>
 80010ce:	2320      	movs	r3, #32
 80010d0:	1a1b      	subs	r3, r3, r0
 80010d2:	0032      	movs	r2, r6
 80010d4:	409e      	lsls	r6, r3
 80010d6:	40c2      	lsrs	r2, r0
 80010d8:	0030      	movs	r0, r6
 80010da:	1e43      	subs	r3, r0, #1
 80010dc:	4198      	sbcs	r0, r3
 80010de:	4310      	orrs	r0, r2
 80010e0:	e70c      	b.n	8000efc <__aeabi_fsub+0x50>
 80010e2:	2aff      	cmp	r2, #255	; 0xff
 80010e4:	d0db      	beq.n	800109e <__aeabi_fsub+0x1f2>
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	4660      	mov	r0, ip
 80010ea:	04db      	lsls	r3, r3, #19
 80010ec:	4318      	orrs	r0, r3
 80010ee:	4684      	mov	ip, r0
 80010f0:	2f1b      	cmp	r7, #27
 80010f2:	dd56      	ble.n	80011a2 <__aeabi_fsub+0x2f6>
 80010f4:	2001      	movs	r0, #1
 80010f6:	000c      	movs	r4, r1
 80010f8:	0015      	movs	r5, r2
 80010fa:	1a30      	subs	r0, r6, r0
 80010fc:	e700      	b.n	8000f00 <__aeabi_fsub+0x54>
 80010fe:	4663      	mov	r3, ip
 8001100:	1b9f      	subs	r7, r3, r6
 8001102:	017b      	lsls	r3, r7, #5
 8001104:	d43d      	bmi.n	8001182 <__aeabi_fsub+0x2d6>
 8001106:	2f00      	cmp	r7, #0
 8001108:	d000      	beq.n	800110c <__aeabi_fsub+0x260>
 800110a:	e6fe      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800110c:	2400      	movs	r4, #0
 800110e:	2200      	movs	r2, #0
 8001110:	2700      	movs	r7, #0
 8001112:	e716      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001114:	0005      	movs	r5, r0
 8001116:	e7af      	b.n	8001078 <__aeabi_fsub+0x1cc>
 8001118:	0032      	movs	r2, r6
 800111a:	4643      	mov	r3, r8
 800111c:	4641      	mov	r1, r8
 800111e:	40da      	lsrs	r2, r3
 8001120:	2320      	movs	r3, #32
 8001122:	1a5b      	subs	r3, r3, r1
 8001124:	409e      	lsls	r6, r3
 8001126:	0030      	movs	r0, r6
 8001128:	1e43      	subs	r3, r0, #1
 800112a:	4198      	sbcs	r0, r3
 800112c:	4310      	orrs	r0, r2
 800112e:	e721      	b.n	8000f74 <__aeabi_fsub+0xc8>
 8001130:	2d00      	cmp	r5, #0
 8001132:	d1a7      	bne.n	8001084 <__aeabi_fsub+0x1d8>
 8001134:	4663      	mov	r3, ip
 8001136:	2b00      	cmp	r3, #0
 8001138:	d059      	beq.n	80011ee <__aeabi_fsub+0x342>
 800113a:	2200      	movs	r2, #0
 800113c:	2e00      	cmp	r6, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_fsub+0x296>
 8001140:	e6ff      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001142:	0030      	movs	r0, r6
 8001144:	4460      	add	r0, ip
 8001146:	0143      	lsls	r3, r0, #5
 8001148:	d592      	bpl.n	8001070 <__aeabi_fsub+0x1c4>
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <__aeabi_fsub+0x348>)
 800114c:	3501      	adds	r5, #1
 800114e:	4018      	ands	r0, r3
 8001150:	e78e      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001152:	4663      	mov	r3, ip
 8001154:	2b00      	cmp	r3, #0
 8001156:	d047      	beq.n	80011e8 <__aeabi_fsub+0x33c>
 8001158:	1e4b      	subs	r3, r1, #1
 800115a:	2901      	cmp	r1, #1
 800115c:	d015      	beq.n	800118a <__aeabi_fsub+0x2de>
 800115e:	29ff      	cmp	r1, #255	; 0xff
 8001160:	d02b      	beq.n	80011ba <__aeabi_fsub+0x30e>
 8001162:	0019      	movs	r1, r3
 8001164:	e74e      	b.n	8001004 <__aeabi_fsub+0x158>
 8001166:	000c      	movs	r4, r1
 8001168:	464b      	mov	r3, r9
 800116a:	003d      	movs	r5, r7
 800116c:	e784      	b.n	8001078 <__aeabi_fsub+0x1cc>
 800116e:	4662      	mov	r2, ip
 8001170:	2a00      	cmp	r2, #0
 8001172:	d18b      	bne.n	800108c <__aeabi_fsub+0x1e0>
 8001174:	2e00      	cmp	r6, #0
 8001176:	d192      	bne.n	800109e <__aeabi_fsub+0x1f2>
 8001178:	2780      	movs	r7, #128	; 0x80
 800117a:	2400      	movs	r4, #0
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	03ff      	lsls	r7, r7, #15
 8001180:	e6df      	b.n	8000f42 <__aeabi_fsub+0x96>
 8001182:	4663      	mov	r3, ip
 8001184:	000c      	movs	r4, r1
 8001186:	1af7      	subs	r7, r6, r3
 8001188:	e6bf      	b.n	8000f0a <__aeabi_fsub+0x5e>
 800118a:	0030      	movs	r0, r6
 800118c:	4460      	add	r0, ip
 800118e:	2501      	movs	r5, #1
 8001190:	0143      	lsls	r3, r0, #5
 8001192:	d400      	bmi.n	8001196 <__aeabi_fsub+0x2ea>
 8001194:	e76c      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001196:	2502      	movs	r5, #2
 8001198:	e6f2      	b.n	8000f80 <__aeabi_fsub+0xd4>
 800119a:	4663      	mov	r3, ip
 800119c:	2501      	movs	r5, #1
 800119e:	1b98      	subs	r0, r3, r6
 80011a0:	e6ae      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011a2:	2320      	movs	r3, #32
 80011a4:	4664      	mov	r4, ip
 80011a6:	4660      	mov	r0, ip
 80011a8:	40fc      	lsrs	r4, r7
 80011aa:	1bdf      	subs	r7, r3, r7
 80011ac:	40b8      	lsls	r0, r7
 80011ae:	1e43      	subs	r3, r0, #1
 80011b0:	4198      	sbcs	r0, r3
 80011b2:	4320      	orrs	r0, r4
 80011b4:	e79f      	b.n	80010f6 <__aeabi_fsub+0x24a>
 80011b6:	0005      	movs	r5, r0
 80011b8:	e75e      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ba:	464b      	mov	r3, r9
 80011bc:	e771      	b.n	80010a2 <__aeabi_fsub+0x1f6>
 80011be:	2320      	movs	r3, #32
 80011c0:	4665      	mov	r5, ip
 80011c2:	4660      	mov	r0, ip
 80011c4:	40cd      	lsrs	r5, r1
 80011c6:	1a59      	subs	r1, r3, r1
 80011c8:	4088      	lsls	r0, r1
 80011ca:	1e43      	subs	r3, r0, #1
 80011cc:	4198      	sbcs	r0, r3
 80011ce:	4328      	orrs	r0, r5
 80011d0:	e71c      	b.n	800100c <__aeabi_fsub+0x160>
 80011d2:	4663      	mov	r3, ip
 80011d4:	000c      	movs	r4, r1
 80011d6:	2501      	movs	r5, #1
 80011d8:	1af0      	subs	r0, r6, r3
 80011da:	e691      	b.n	8000f00 <__aeabi_fsub+0x54>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d095      	beq.n	800110c <__aeabi_fsub+0x260>
 80011e0:	000c      	movs	r4, r1
 80011e2:	464f      	mov	r7, r9
 80011e4:	2200      	movs	r2, #0
 80011e6:	e6ac      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011e8:	464b      	mov	r3, r9
 80011ea:	000d      	movs	r5, r1
 80011ec:	e744      	b.n	8001078 <__aeabi_fsub+0x1cc>
 80011ee:	464f      	mov	r7, r9
 80011f0:	2200      	movs	r2, #0
 80011f2:	e6a6      	b.n	8000f42 <__aeabi_fsub+0x96>
 80011f4:	fbffffff 	.word	0xfbffffff
 80011f8:	7dffffff 	.word	0x7dffffff
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d000      	beq.n	8001202 <__aeabi_fsub+0x356>
 8001200:	e736      	b.n	8001070 <__aeabi_fsub+0x1c4>
 8001202:	2400      	movs	r4, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e69c      	b.n	8000f42 <__aeabi_fsub+0x96>

08001208 <__aeabi_f2iz>:
 8001208:	0241      	lsls	r1, r0, #9
 800120a:	0042      	lsls	r2, r0, #1
 800120c:	0fc3      	lsrs	r3, r0, #31
 800120e:	0a49      	lsrs	r1, r1, #9
 8001210:	2000      	movs	r0, #0
 8001212:	0e12      	lsrs	r2, r2, #24
 8001214:	2a7e      	cmp	r2, #126	; 0x7e
 8001216:	dd03      	ble.n	8001220 <__aeabi_f2iz+0x18>
 8001218:	2a9d      	cmp	r2, #157	; 0x9d
 800121a:	dd02      	ble.n	8001222 <__aeabi_f2iz+0x1a>
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <__aeabi_f2iz+0x3c>)
 800121e:	1898      	adds	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	2080      	movs	r0, #128	; 0x80
 8001224:	0400      	lsls	r0, r0, #16
 8001226:	4301      	orrs	r1, r0
 8001228:	2a95      	cmp	r2, #149	; 0x95
 800122a:	dc07      	bgt.n	800123c <__aeabi_f2iz+0x34>
 800122c:	2096      	movs	r0, #150	; 0x96
 800122e:	1a82      	subs	r2, r0, r2
 8001230:	40d1      	lsrs	r1, r2
 8001232:	4248      	negs	r0, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f3      	bne.n	8001220 <__aeabi_f2iz+0x18>
 8001238:	0008      	movs	r0, r1
 800123a:	e7f1      	b.n	8001220 <__aeabi_f2iz+0x18>
 800123c:	3a96      	subs	r2, #150	; 0x96
 800123e:	4091      	lsls	r1, r2
 8001240:	e7f7      	b.n	8001232 <__aeabi_f2iz+0x2a>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	7fffffff 	.word	0x7fffffff

08001248 <__aeabi_i2f>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	2800      	cmp	r0, #0
 800124c:	d013      	beq.n	8001276 <__aeabi_i2f+0x2e>
 800124e:	17c3      	asrs	r3, r0, #31
 8001250:	18c6      	adds	r6, r0, r3
 8001252:	405e      	eors	r6, r3
 8001254:	0fc4      	lsrs	r4, r0, #31
 8001256:	0030      	movs	r0, r6
 8001258:	f001 fefa 	bl	8003050 <__clzsi2>
 800125c:	239e      	movs	r3, #158	; 0x9e
 800125e:	0005      	movs	r5, r0
 8001260:	1a1b      	subs	r3, r3, r0
 8001262:	2b96      	cmp	r3, #150	; 0x96
 8001264:	dc0f      	bgt.n	8001286 <__aeabi_i2f+0x3e>
 8001266:	2808      	cmp	r0, #8
 8001268:	dd01      	ble.n	800126e <__aeabi_i2f+0x26>
 800126a:	3d08      	subs	r5, #8
 800126c:	40ae      	lsls	r6, r5
 800126e:	0276      	lsls	r6, r6, #9
 8001270:	0a76      	lsrs	r6, r6, #9
 8001272:	b2d8      	uxtb	r0, r3
 8001274:	e002      	b.n	800127c <__aeabi_i2f+0x34>
 8001276:	2400      	movs	r4, #0
 8001278:	2000      	movs	r0, #0
 800127a:	2600      	movs	r6, #0
 800127c:	05c0      	lsls	r0, r0, #23
 800127e:	4330      	orrs	r0, r6
 8001280:	07e4      	lsls	r4, r4, #31
 8001282:	4320      	orrs	r0, r4
 8001284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001286:	2b99      	cmp	r3, #153	; 0x99
 8001288:	dd0c      	ble.n	80012a4 <__aeabi_i2f+0x5c>
 800128a:	2205      	movs	r2, #5
 800128c:	0031      	movs	r1, r6
 800128e:	1a12      	subs	r2, r2, r0
 8001290:	40d1      	lsrs	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	0001      	movs	r1, r0
 8001296:	0030      	movs	r0, r6
 8001298:	311b      	adds	r1, #27
 800129a:	4088      	lsls	r0, r1
 800129c:	1e41      	subs	r1, r0, #1
 800129e:	4188      	sbcs	r0, r1
 80012a0:	4302      	orrs	r2, r0
 80012a2:	0016      	movs	r6, r2
 80012a4:	2d05      	cmp	r5, #5
 80012a6:	dc12      	bgt.n	80012ce <__aeabi_i2f+0x86>
 80012a8:	0031      	movs	r1, r6
 80012aa:	4f0d      	ldr	r7, [pc, #52]	; (80012e0 <__aeabi_i2f+0x98>)
 80012ac:	4039      	ands	r1, r7
 80012ae:	0772      	lsls	r2, r6, #29
 80012b0:	d009      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012b2:	200f      	movs	r0, #15
 80012b4:	4030      	ands	r0, r6
 80012b6:	2804      	cmp	r0, #4
 80012b8:	d005      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012ba:	3104      	adds	r1, #4
 80012bc:	014a      	lsls	r2, r1, #5
 80012be:	d502      	bpl.n	80012c6 <__aeabi_i2f+0x7e>
 80012c0:	239f      	movs	r3, #159	; 0x9f
 80012c2:	4039      	ands	r1, r7
 80012c4:	1b5b      	subs	r3, r3, r5
 80012c6:	0189      	lsls	r1, r1, #6
 80012c8:	0a4e      	lsrs	r6, r1, #9
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	e7d6      	b.n	800127c <__aeabi_i2f+0x34>
 80012ce:	1f6a      	subs	r2, r5, #5
 80012d0:	4096      	lsls	r6, r2
 80012d2:	0031      	movs	r1, r6
 80012d4:	4f02      	ldr	r7, [pc, #8]	; (80012e0 <__aeabi_i2f+0x98>)
 80012d6:	4039      	ands	r1, r7
 80012d8:	0772      	lsls	r2, r6, #29
 80012da:	d0f4      	beq.n	80012c6 <__aeabi_i2f+0x7e>
 80012dc:	e7e9      	b.n	80012b2 <__aeabi_i2f+0x6a>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	fbffffff 	.word	0xfbffffff

080012e4 <__aeabi_dadd>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464f      	mov	r7, r9
 80012e8:	4646      	mov	r6, r8
 80012ea:	46d6      	mov	lr, sl
 80012ec:	000d      	movs	r5, r1
 80012ee:	0004      	movs	r4, r0
 80012f0:	b5c0      	push	{r6, r7, lr}
 80012f2:	001f      	movs	r7, r3
 80012f4:	0011      	movs	r1, r2
 80012f6:	0328      	lsls	r0, r5, #12
 80012f8:	0f62      	lsrs	r2, r4, #29
 80012fa:	0a40      	lsrs	r0, r0, #9
 80012fc:	4310      	orrs	r0, r2
 80012fe:	007a      	lsls	r2, r7, #1
 8001300:	0d52      	lsrs	r2, r2, #21
 8001302:	00e3      	lsls	r3, r4, #3
 8001304:	033c      	lsls	r4, r7, #12
 8001306:	4691      	mov	r9, r2
 8001308:	0a64      	lsrs	r4, r4, #9
 800130a:	0ffa      	lsrs	r2, r7, #31
 800130c:	0f4f      	lsrs	r7, r1, #29
 800130e:	006e      	lsls	r6, r5, #1
 8001310:	4327      	orrs	r7, r4
 8001312:	4692      	mov	sl, r2
 8001314:	46b8      	mov	r8, r7
 8001316:	0d76      	lsrs	r6, r6, #21
 8001318:	0fed      	lsrs	r5, r5, #31
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	4295      	cmp	r5, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x3e>
 8001320:	e099      	b.n	8001456 <__aeabi_dadd+0x172>
 8001322:	464c      	mov	r4, r9
 8001324:	1b34      	subs	r4, r6, r4
 8001326:	46a4      	mov	ip, r4
 8001328:	2c00      	cmp	r4, #0
 800132a:	dc00      	bgt.n	800132e <__aeabi_dadd+0x4a>
 800132c:	e07c      	b.n	8001428 <__aeabi_dadd+0x144>
 800132e:	464a      	mov	r2, r9
 8001330:	2a00      	cmp	r2, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x52>
 8001334:	e0b8      	b.n	80014a8 <__aeabi_dadd+0x1c4>
 8001336:	4ac5      	ldr	r2, [pc, #788]	; (800164c <__aeabi_dadd+0x368>)
 8001338:	4296      	cmp	r6, r2
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x5a>
 800133c:	e11c      	b.n	8001578 <__aeabi_dadd+0x294>
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	003c      	movs	r4, r7
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	4314      	orrs	r4, r2
 8001346:	46a0      	mov	r8, r4
 8001348:	4662      	mov	r2, ip
 800134a:	2a38      	cmp	r2, #56	; 0x38
 800134c:	dd00      	ble.n	8001350 <__aeabi_dadd+0x6c>
 800134e:	e161      	b.n	8001614 <__aeabi_dadd+0x330>
 8001350:	2a1f      	cmp	r2, #31
 8001352:	dd00      	ble.n	8001356 <__aeabi_dadd+0x72>
 8001354:	e1cc      	b.n	80016f0 <__aeabi_dadd+0x40c>
 8001356:	4664      	mov	r4, ip
 8001358:	2220      	movs	r2, #32
 800135a:	1b12      	subs	r2, r2, r4
 800135c:	4644      	mov	r4, r8
 800135e:	4094      	lsls	r4, r2
 8001360:	000f      	movs	r7, r1
 8001362:	46a1      	mov	r9, r4
 8001364:	4664      	mov	r4, ip
 8001366:	4091      	lsls	r1, r2
 8001368:	40e7      	lsrs	r7, r4
 800136a:	464c      	mov	r4, r9
 800136c:	1e4a      	subs	r2, r1, #1
 800136e:	4191      	sbcs	r1, r2
 8001370:	433c      	orrs	r4, r7
 8001372:	4642      	mov	r2, r8
 8001374:	4321      	orrs	r1, r4
 8001376:	4664      	mov	r4, ip
 8001378:	40e2      	lsrs	r2, r4
 800137a:	1a80      	subs	r0, r0, r2
 800137c:	1a5c      	subs	r4, r3, r1
 800137e:	42a3      	cmp	r3, r4
 8001380:	419b      	sbcs	r3, r3
 8001382:	425f      	negs	r7, r3
 8001384:	1bc7      	subs	r7, r0, r7
 8001386:	023b      	lsls	r3, r7, #8
 8001388:	d400      	bmi.n	800138c <__aeabi_dadd+0xa8>
 800138a:	e0d0      	b.n	800152e <__aeabi_dadd+0x24a>
 800138c:	027f      	lsls	r7, r7, #9
 800138e:	0a7f      	lsrs	r7, r7, #9
 8001390:	2f00      	cmp	r7, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0xb2>
 8001394:	e0ff      	b.n	8001596 <__aeabi_dadd+0x2b2>
 8001396:	0038      	movs	r0, r7
 8001398:	f001 fe5a 	bl	8003050 <__clzsi2>
 800139c:	0001      	movs	r1, r0
 800139e:	3908      	subs	r1, #8
 80013a0:	2320      	movs	r3, #32
 80013a2:	0022      	movs	r2, r4
 80013a4:	1a5b      	subs	r3, r3, r1
 80013a6:	408f      	lsls	r7, r1
 80013a8:	40da      	lsrs	r2, r3
 80013aa:	408c      	lsls	r4, r1
 80013ac:	4317      	orrs	r7, r2
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	da00      	bge.n	80013b4 <__aeabi_dadd+0xd0>
 80013b2:	e0ff      	b.n	80015b4 <__aeabi_dadd+0x2d0>
 80013b4:	1b89      	subs	r1, r1, r6
 80013b6:	1c4b      	adds	r3, r1, #1
 80013b8:	2b1f      	cmp	r3, #31
 80013ba:	dd00      	ble.n	80013be <__aeabi_dadd+0xda>
 80013bc:	e0a8      	b.n	8001510 <__aeabi_dadd+0x22c>
 80013be:	2220      	movs	r2, #32
 80013c0:	0039      	movs	r1, r7
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	0020      	movs	r0, r4
 80013c6:	4094      	lsls	r4, r2
 80013c8:	4091      	lsls	r1, r2
 80013ca:	40d8      	lsrs	r0, r3
 80013cc:	1e62      	subs	r2, r4, #1
 80013ce:	4194      	sbcs	r4, r2
 80013d0:	40df      	lsrs	r7, r3
 80013d2:	2600      	movs	r6, #0
 80013d4:	4301      	orrs	r1, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	0763      	lsls	r3, r4, #29
 80013da:	d009      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013dc:	230f      	movs	r3, #15
 80013de:	4023      	ands	r3, r4
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d005      	beq.n	80013f0 <__aeabi_dadd+0x10c>
 80013e4:	1d23      	adds	r3, r4, #4
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	41a4      	sbcs	r4, r4
 80013ea:	4264      	negs	r4, r4
 80013ec:	193f      	adds	r7, r7, r4
 80013ee:	001c      	movs	r4, r3
 80013f0:	023b      	lsls	r3, r7, #8
 80013f2:	d400      	bmi.n	80013f6 <__aeabi_dadd+0x112>
 80013f4:	e09e      	b.n	8001534 <__aeabi_dadd+0x250>
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <__aeabi_dadd+0x368>)
 80013f8:	3601      	adds	r6, #1
 80013fa:	429e      	cmp	r6, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x11c>
 80013fe:	e0b7      	b.n	8001570 <__aeabi_dadd+0x28c>
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <__aeabi_dadd+0x36c>)
 8001402:	08e4      	lsrs	r4, r4, #3
 8001404:	4017      	ands	r7, r2
 8001406:	077b      	lsls	r3, r7, #29
 8001408:	0571      	lsls	r1, r6, #21
 800140a:	027f      	lsls	r7, r7, #9
 800140c:	4323      	orrs	r3, r4
 800140e:	0b3f      	lsrs	r7, r7, #12
 8001410:	0d4a      	lsrs	r2, r1, #21
 8001412:	0512      	lsls	r2, r2, #20
 8001414:	433a      	orrs	r2, r7
 8001416:	07ed      	lsls	r5, r5, #31
 8001418:	432a      	orrs	r2, r5
 800141a:	0018      	movs	r0, r3
 800141c:	0011      	movs	r1, r2
 800141e:	bce0      	pop	{r5, r6, r7}
 8001420:	46ba      	mov	sl, r7
 8001422:	46b1      	mov	r9, r6
 8001424:	46a8      	mov	r8, r5
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	2c00      	cmp	r4, #0
 800142a:	d04b      	beq.n	80014c4 <__aeabi_dadd+0x1e0>
 800142c:	464c      	mov	r4, r9
 800142e:	1ba4      	subs	r4, r4, r6
 8001430:	46a4      	mov	ip, r4
 8001432:	2e00      	cmp	r6, #0
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x154>
 8001436:	e123      	b.n	8001680 <__aeabi_dadd+0x39c>
 8001438:	0004      	movs	r4, r0
 800143a:	431c      	orrs	r4, r3
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x15c>
 800143e:	e1af      	b.n	80017a0 <__aeabi_dadd+0x4bc>
 8001440:	4662      	mov	r2, ip
 8001442:	1e54      	subs	r4, r2, #1
 8001444:	2a01      	cmp	r2, #1
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x166>
 8001448:	e215      	b.n	8001876 <__aeabi_dadd+0x592>
 800144a:	4d80      	ldr	r5, [pc, #512]	; (800164c <__aeabi_dadd+0x368>)
 800144c:	45ac      	cmp	ip, r5
 800144e:	d100      	bne.n	8001452 <__aeabi_dadd+0x16e>
 8001450:	e1c8      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001452:	46a4      	mov	ip, r4
 8001454:	e11b      	b.n	800168e <__aeabi_dadd+0x3aa>
 8001456:	464a      	mov	r2, r9
 8001458:	1ab2      	subs	r2, r6, r2
 800145a:	4694      	mov	ip, r2
 800145c:	2a00      	cmp	r2, #0
 800145e:	dc00      	bgt.n	8001462 <__aeabi_dadd+0x17e>
 8001460:	e0ac      	b.n	80015bc <__aeabi_dadd+0x2d8>
 8001462:	464a      	mov	r2, r9
 8001464:	2a00      	cmp	r2, #0
 8001466:	d043      	beq.n	80014f0 <__aeabi_dadd+0x20c>
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <__aeabi_dadd+0x368>)
 800146a:	4296      	cmp	r6, r2
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x18c>
 800146e:	e1af      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	003c      	movs	r4, r7
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	4314      	orrs	r4, r2
 8001478:	46a0      	mov	r8, r4
 800147a:	4662      	mov	r2, ip
 800147c:	2a38      	cmp	r2, #56	; 0x38
 800147e:	dc67      	bgt.n	8001550 <__aeabi_dadd+0x26c>
 8001480:	2a1f      	cmp	r2, #31
 8001482:	dc00      	bgt.n	8001486 <__aeabi_dadd+0x1a2>
 8001484:	e15f      	b.n	8001746 <__aeabi_dadd+0x462>
 8001486:	4647      	mov	r7, r8
 8001488:	3a20      	subs	r2, #32
 800148a:	40d7      	lsrs	r7, r2
 800148c:	4662      	mov	r2, ip
 800148e:	2a20      	cmp	r2, #32
 8001490:	d005      	beq.n	800149e <__aeabi_dadd+0x1ba>
 8001492:	4664      	mov	r4, ip
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	1b12      	subs	r2, r2, r4
 8001498:	4644      	mov	r4, r8
 800149a:	4094      	lsls	r4, r2
 800149c:	4321      	orrs	r1, r4
 800149e:	1e4a      	subs	r2, r1, #1
 80014a0:	4191      	sbcs	r1, r2
 80014a2:	000c      	movs	r4, r1
 80014a4:	433c      	orrs	r4, r7
 80014a6:	e057      	b.n	8001558 <__aeabi_dadd+0x274>
 80014a8:	003a      	movs	r2, r7
 80014aa:	430a      	orrs	r2, r1
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1cc>
 80014ae:	e105      	b.n	80016bc <__aeabi_dadd+0x3d8>
 80014b0:	0022      	movs	r2, r4
 80014b2:	3a01      	subs	r2, #1
 80014b4:	2c01      	cmp	r4, #1
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0x1d6>
 80014b8:	e182      	b.n	80017c0 <__aeabi_dadd+0x4dc>
 80014ba:	4c64      	ldr	r4, [pc, #400]	; (800164c <__aeabi_dadd+0x368>)
 80014bc:	45a4      	cmp	ip, r4
 80014be:	d05b      	beq.n	8001578 <__aeabi_dadd+0x294>
 80014c0:	4694      	mov	ip, r2
 80014c2:	e741      	b.n	8001348 <__aeabi_dadd+0x64>
 80014c4:	4c63      	ldr	r4, [pc, #396]	; (8001654 <__aeabi_dadd+0x370>)
 80014c6:	1c77      	adds	r7, r6, #1
 80014c8:	4227      	tst	r7, r4
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x1ea>
 80014cc:	e0c4      	b.n	8001658 <__aeabi_dadd+0x374>
 80014ce:	0004      	movs	r4, r0
 80014d0:	431c      	orrs	r4, r3
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dadd+0x1f4>
 80014d6:	e169      	b.n	80017ac <__aeabi_dadd+0x4c8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x1fa>
 80014dc:	e1bf      	b.n	800185e <__aeabi_dadd+0x57a>
 80014de:	4644      	mov	r4, r8
 80014e0:	430c      	orrs	r4, r1
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x202>
 80014e4:	e1d0      	b.n	8001888 <__aeabi_dadd+0x5a4>
 80014e6:	0742      	lsls	r2, r0, #29
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	08c0      	lsrs	r0, r0, #3
 80014ee:	e029      	b.n	8001544 <__aeabi_dadd+0x260>
 80014f0:	003a      	movs	r2, r7
 80014f2:	430a      	orrs	r2, r1
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x214>
 80014f6:	e170      	b.n	80017da <__aeabi_dadd+0x4f6>
 80014f8:	4662      	mov	r2, ip
 80014fa:	4664      	mov	r4, ip
 80014fc:	3a01      	subs	r2, #1
 80014fe:	2c01      	cmp	r4, #1
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x220>
 8001502:	e0e0      	b.n	80016c6 <__aeabi_dadd+0x3e2>
 8001504:	4c51      	ldr	r4, [pc, #324]	; (800164c <__aeabi_dadd+0x368>)
 8001506:	45a4      	cmp	ip, r4
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x228>
 800150a:	e161      	b.n	80017d0 <__aeabi_dadd+0x4ec>
 800150c:	4694      	mov	ip, r2
 800150e:	e7b4      	b.n	800147a <__aeabi_dadd+0x196>
 8001510:	003a      	movs	r2, r7
 8001512:	391f      	subs	r1, #31
 8001514:	40ca      	lsrs	r2, r1
 8001516:	0011      	movs	r1, r2
 8001518:	2b20      	cmp	r3, #32
 800151a:	d003      	beq.n	8001524 <__aeabi_dadd+0x240>
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	409f      	lsls	r7, r3
 8001522:	433c      	orrs	r4, r7
 8001524:	1e63      	subs	r3, r4, #1
 8001526:	419c      	sbcs	r4, r3
 8001528:	2700      	movs	r7, #0
 800152a:	2600      	movs	r6, #0
 800152c:	430c      	orrs	r4, r1
 800152e:	0763      	lsls	r3, r4, #29
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x250>
 8001532:	e753      	b.n	80013dc <__aeabi_dadd+0xf8>
 8001534:	46b4      	mov	ip, r6
 8001536:	08e4      	lsrs	r4, r4, #3
 8001538:	077b      	lsls	r3, r7, #29
 800153a:	4323      	orrs	r3, r4
 800153c:	08f8      	lsrs	r0, r7, #3
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <__aeabi_dadd+0x368>)
 8001540:	4594      	cmp	ip, r2
 8001542:	d01d      	beq.n	8001580 <__aeabi_dadd+0x29c>
 8001544:	4662      	mov	r2, ip
 8001546:	0307      	lsls	r7, r0, #12
 8001548:	0552      	lsls	r2, r2, #21
 800154a:	0b3f      	lsrs	r7, r7, #12
 800154c:	0d52      	lsrs	r2, r2, #21
 800154e:	e760      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001550:	4644      	mov	r4, r8
 8001552:	430c      	orrs	r4, r1
 8001554:	1e62      	subs	r2, r4, #1
 8001556:	4194      	sbcs	r4, r2
 8001558:	18e4      	adds	r4, r4, r3
 800155a:	429c      	cmp	r4, r3
 800155c:	419b      	sbcs	r3, r3
 800155e:	425f      	negs	r7, r3
 8001560:	183f      	adds	r7, r7, r0
 8001562:	023b      	lsls	r3, r7, #8
 8001564:	d5e3      	bpl.n	800152e <__aeabi_dadd+0x24a>
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <__aeabi_dadd+0x368>)
 8001568:	3601      	adds	r6, #1
 800156a:	429e      	cmp	r6, r3
 800156c:	d000      	beq.n	8001570 <__aeabi_dadd+0x28c>
 800156e:	e0b5      	b.n	80016dc <__aeabi_dadd+0x3f8>
 8001570:	0032      	movs	r2, r6
 8001572:	2700      	movs	r7, #0
 8001574:	2300      	movs	r3, #0
 8001576:	e74c      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001578:	0742      	lsls	r2, r0, #29
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	4313      	orrs	r3, r2
 800157e:	08c0      	lsrs	r0, r0, #3
 8001580:	001a      	movs	r2, r3
 8001582:	4302      	orrs	r2, r0
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x2a4>
 8001586:	e1e1      	b.n	800194c <__aeabi_dadd+0x668>
 8001588:	2780      	movs	r7, #128	; 0x80
 800158a:	033f      	lsls	r7, r7, #12
 800158c:	4307      	orrs	r7, r0
 800158e:	033f      	lsls	r7, r7, #12
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <__aeabi_dadd+0x368>)
 8001592:	0b3f      	lsrs	r7, r7, #12
 8001594:	e73d      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001596:	0020      	movs	r0, r4
 8001598:	f001 fd5a 	bl	8003050 <__clzsi2>
 800159c:	0001      	movs	r1, r0
 800159e:	3118      	adds	r1, #24
 80015a0:	291f      	cmp	r1, #31
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dadd+0x2c2>
 80015a4:	e6fc      	b.n	80013a0 <__aeabi_dadd+0xbc>
 80015a6:	3808      	subs	r0, #8
 80015a8:	4084      	lsls	r4, r0
 80015aa:	0027      	movs	r7, r4
 80015ac:	2400      	movs	r4, #0
 80015ae:	42b1      	cmp	r1, r6
 80015b0:	db00      	blt.n	80015b4 <__aeabi_dadd+0x2d0>
 80015b2:	e6ff      	b.n	80013b4 <__aeabi_dadd+0xd0>
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <__aeabi_dadd+0x36c>)
 80015b6:	1a76      	subs	r6, r6, r1
 80015b8:	4017      	ands	r7, r2
 80015ba:	e70d      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d02f      	beq.n	8001620 <__aeabi_dadd+0x33c>
 80015c0:	464a      	mov	r2, r9
 80015c2:	1b92      	subs	r2, r2, r6
 80015c4:	4694      	mov	ip, r2
 80015c6:	2e00      	cmp	r6, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x2e8>
 80015ca:	e0ad      	b.n	8001728 <__aeabi_dadd+0x444>
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <__aeabi_dadd+0x368>)
 80015ce:	4591      	cmp	r9, r2
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x2f0>
 80015d2:	e10f      	b.n	80017f4 <__aeabi_dadd+0x510>
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	4310      	orrs	r0, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	2a38      	cmp	r2, #56	; 0x38
 80015de:	dd00      	ble.n	80015e2 <__aeabi_dadd+0x2fe>
 80015e0:	e10f      	b.n	8001802 <__aeabi_dadd+0x51e>
 80015e2:	2a1f      	cmp	r2, #31
 80015e4:	dd00      	ble.n	80015e8 <__aeabi_dadd+0x304>
 80015e6:	e180      	b.n	80018ea <__aeabi_dadd+0x606>
 80015e8:	4664      	mov	r4, ip
 80015ea:	2220      	movs	r2, #32
 80015ec:	001e      	movs	r6, r3
 80015ee:	1b12      	subs	r2, r2, r4
 80015f0:	4667      	mov	r7, ip
 80015f2:	0004      	movs	r4, r0
 80015f4:	4093      	lsls	r3, r2
 80015f6:	4094      	lsls	r4, r2
 80015f8:	40fe      	lsrs	r6, r7
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4193      	sbcs	r3, r2
 80015fe:	40f8      	lsrs	r0, r7
 8001600:	4334      	orrs	r4, r6
 8001602:	431c      	orrs	r4, r3
 8001604:	4480      	add	r8, r0
 8001606:	1864      	adds	r4, r4, r1
 8001608:	428c      	cmp	r4, r1
 800160a:	41bf      	sbcs	r7, r7
 800160c:	427f      	negs	r7, r7
 800160e:	464e      	mov	r6, r9
 8001610:	4447      	add	r7, r8
 8001612:	e7a6      	b.n	8001562 <__aeabi_dadd+0x27e>
 8001614:	4642      	mov	r2, r8
 8001616:	430a      	orrs	r2, r1
 8001618:	0011      	movs	r1, r2
 800161a:	1e4a      	subs	r2, r1, #1
 800161c:	4191      	sbcs	r1, r2
 800161e:	e6ad      	b.n	800137c <__aeabi_dadd+0x98>
 8001620:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <__aeabi_dadd+0x370>)
 8001622:	1c72      	adds	r2, r6, #1
 8001624:	4222      	tst	r2, r4
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x346>
 8001628:	e0a1      	b.n	800176e <__aeabi_dadd+0x48a>
 800162a:	0002      	movs	r2, r0
 800162c:	431a      	orrs	r2, r3
 800162e:	2e00      	cmp	r6, #0
 8001630:	d000      	beq.n	8001634 <__aeabi_dadd+0x350>
 8001632:	e0fa      	b.n	800182a <__aeabi_dadd+0x546>
 8001634:	2a00      	cmp	r2, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x356>
 8001638:	e145      	b.n	80018c6 <__aeabi_dadd+0x5e2>
 800163a:	003a      	movs	r2, r7
 800163c:	430a      	orrs	r2, r1
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x35e>
 8001640:	e146      	b.n	80018d0 <__aeabi_dadd+0x5ec>
 8001642:	0742      	lsls	r2, r0, #29
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	4313      	orrs	r3, r2
 8001648:	08c0      	lsrs	r0, r0, #3
 800164a:	e77b      	b.n	8001544 <__aeabi_dadd+0x260>
 800164c:	000007ff 	.word	0x000007ff
 8001650:	ff7fffff 	.word	0xff7fffff
 8001654:	000007fe 	.word	0x000007fe
 8001658:	4647      	mov	r7, r8
 800165a:	1a5c      	subs	r4, r3, r1
 800165c:	1bc2      	subs	r2, r0, r7
 800165e:	42a3      	cmp	r3, r4
 8001660:	41bf      	sbcs	r7, r7
 8001662:	427f      	negs	r7, r7
 8001664:	46b9      	mov	r9, r7
 8001666:	0017      	movs	r7, r2
 8001668:	464a      	mov	r2, r9
 800166a:	1abf      	subs	r7, r7, r2
 800166c:	023a      	lsls	r2, r7, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dadd+0x38e>
 8001670:	e08d      	b.n	800178e <__aeabi_dadd+0x4aa>
 8001672:	0023      	movs	r3, r4
 8001674:	433b      	orrs	r3, r7
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x396>
 8001678:	e68a      	b.n	8001390 <__aeabi_dadd+0xac>
 800167a:	2000      	movs	r0, #0
 800167c:	2500      	movs	r5, #0
 800167e:	e761      	b.n	8001544 <__aeabi_dadd+0x260>
 8001680:	4cb4      	ldr	r4, [pc, #720]	; (8001954 <__aeabi_dadd+0x670>)
 8001682:	45a1      	cmp	r9, r4
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x3a4>
 8001686:	e0ad      	b.n	80017e4 <__aeabi_dadd+0x500>
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	0424      	lsls	r4, r4, #16
 800168c:	4320      	orrs	r0, r4
 800168e:	4664      	mov	r4, ip
 8001690:	2c38      	cmp	r4, #56	; 0x38
 8001692:	dc3d      	bgt.n	8001710 <__aeabi_dadd+0x42c>
 8001694:	4662      	mov	r2, ip
 8001696:	2c1f      	cmp	r4, #31
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0x3b8>
 800169a:	e0b7      	b.n	800180c <__aeabi_dadd+0x528>
 800169c:	2520      	movs	r5, #32
 800169e:	001e      	movs	r6, r3
 80016a0:	1b2d      	subs	r5, r5, r4
 80016a2:	0004      	movs	r4, r0
 80016a4:	40ab      	lsls	r3, r5
 80016a6:	40ac      	lsls	r4, r5
 80016a8:	40d6      	lsrs	r6, r2
 80016aa:	40d0      	lsrs	r0, r2
 80016ac:	4642      	mov	r2, r8
 80016ae:	1e5d      	subs	r5, r3, #1
 80016b0:	41ab      	sbcs	r3, r5
 80016b2:	4334      	orrs	r4, r6
 80016b4:	1a12      	subs	r2, r2, r0
 80016b6:	4690      	mov	r8, r2
 80016b8:	4323      	orrs	r3, r4
 80016ba:	e02c      	b.n	8001716 <__aeabi_dadd+0x432>
 80016bc:	0742      	lsls	r2, r0, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c0      	lsrs	r0, r0, #3
 80016c4:	e73b      	b.n	800153e <__aeabi_dadd+0x25a>
 80016c6:	185c      	adds	r4, r3, r1
 80016c8:	429c      	cmp	r4, r3
 80016ca:	419b      	sbcs	r3, r3
 80016cc:	4440      	add	r0, r8
 80016ce:	425b      	negs	r3, r3
 80016d0:	18c7      	adds	r7, r0, r3
 80016d2:	2601      	movs	r6, #1
 80016d4:	023b      	lsls	r3, r7, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dadd+0x3f6>
 80016d8:	e729      	b.n	800152e <__aeabi_dadd+0x24a>
 80016da:	2602      	movs	r6, #2
 80016dc:	4a9e      	ldr	r2, [pc, #632]	; (8001958 <__aeabi_dadd+0x674>)
 80016de:	0863      	lsrs	r3, r4, #1
 80016e0:	4017      	ands	r7, r2
 80016e2:	2201      	movs	r2, #1
 80016e4:	4014      	ands	r4, r2
 80016e6:	431c      	orrs	r4, r3
 80016e8:	07fb      	lsls	r3, r7, #31
 80016ea:	431c      	orrs	r4, r3
 80016ec:	087f      	lsrs	r7, r7, #1
 80016ee:	e673      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80016f0:	4644      	mov	r4, r8
 80016f2:	3a20      	subs	r2, #32
 80016f4:	40d4      	lsrs	r4, r2
 80016f6:	4662      	mov	r2, ip
 80016f8:	2a20      	cmp	r2, #32
 80016fa:	d005      	beq.n	8001708 <__aeabi_dadd+0x424>
 80016fc:	4667      	mov	r7, ip
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	1bd2      	subs	r2, r2, r7
 8001702:	4647      	mov	r7, r8
 8001704:	4097      	lsls	r7, r2
 8001706:	4339      	orrs	r1, r7
 8001708:	1e4a      	subs	r2, r1, #1
 800170a:	4191      	sbcs	r1, r2
 800170c:	4321      	orrs	r1, r4
 800170e:	e635      	b.n	800137c <__aeabi_dadd+0x98>
 8001710:	4303      	orrs	r3, r0
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	4183      	sbcs	r3, r0
 8001716:	1acc      	subs	r4, r1, r3
 8001718:	42a1      	cmp	r1, r4
 800171a:	41bf      	sbcs	r7, r7
 800171c:	4643      	mov	r3, r8
 800171e:	427f      	negs	r7, r7
 8001720:	4655      	mov	r5, sl
 8001722:	464e      	mov	r6, r9
 8001724:	1bdf      	subs	r7, r3, r7
 8001726:	e62e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001728:	0002      	movs	r2, r0
 800172a:	431a      	orrs	r2, r3
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x44c>
 800172e:	e0bd      	b.n	80018ac <__aeabi_dadd+0x5c8>
 8001730:	4662      	mov	r2, ip
 8001732:	4664      	mov	r4, ip
 8001734:	3a01      	subs	r2, #1
 8001736:	2c01      	cmp	r4, #1
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x458>
 800173a:	e0e5      	b.n	8001908 <__aeabi_dadd+0x624>
 800173c:	4c85      	ldr	r4, [pc, #532]	; (8001954 <__aeabi_dadd+0x670>)
 800173e:	45a4      	cmp	ip, r4
 8001740:	d058      	beq.n	80017f4 <__aeabi_dadd+0x510>
 8001742:	4694      	mov	ip, r2
 8001744:	e749      	b.n	80015da <__aeabi_dadd+0x2f6>
 8001746:	4664      	mov	r4, ip
 8001748:	2220      	movs	r2, #32
 800174a:	1b12      	subs	r2, r2, r4
 800174c:	4644      	mov	r4, r8
 800174e:	4094      	lsls	r4, r2
 8001750:	000f      	movs	r7, r1
 8001752:	46a1      	mov	r9, r4
 8001754:	4664      	mov	r4, ip
 8001756:	4091      	lsls	r1, r2
 8001758:	40e7      	lsrs	r7, r4
 800175a:	464c      	mov	r4, r9
 800175c:	1e4a      	subs	r2, r1, #1
 800175e:	4191      	sbcs	r1, r2
 8001760:	433c      	orrs	r4, r7
 8001762:	4642      	mov	r2, r8
 8001764:	430c      	orrs	r4, r1
 8001766:	4661      	mov	r1, ip
 8001768:	40ca      	lsrs	r2, r1
 800176a:	1880      	adds	r0, r0, r2
 800176c:	e6f4      	b.n	8001558 <__aeabi_dadd+0x274>
 800176e:	4c79      	ldr	r4, [pc, #484]	; (8001954 <__aeabi_dadd+0x670>)
 8001770:	42a2      	cmp	r2, r4
 8001772:	d100      	bne.n	8001776 <__aeabi_dadd+0x492>
 8001774:	e6fd      	b.n	8001572 <__aeabi_dadd+0x28e>
 8001776:	1859      	adds	r1, r3, r1
 8001778:	4299      	cmp	r1, r3
 800177a:	419b      	sbcs	r3, r3
 800177c:	4440      	add	r0, r8
 800177e:	425f      	negs	r7, r3
 8001780:	19c7      	adds	r7, r0, r7
 8001782:	07fc      	lsls	r4, r7, #31
 8001784:	0849      	lsrs	r1, r1, #1
 8001786:	0016      	movs	r6, r2
 8001788:	430c      	orrs	r4, r1
 800178a:	087f      	lsrs	r7, r7, #1
 800178c:	e6cf      	b.n	800152e <__aeabi_dadd+0x24a>
 800178e:	1acc      	subs	r4, r1, r3
 8001790:	42a1      	cmp	r1, r4
 8001792:	41bf      	sbcs	r7, r7
 8001794:	4643      	mov	r3, r8
 8001796:	427f      	negs	r7, r7
 8001798:	1a18      	subs	r0, r3, r0
 800179a:	4655      	mov	r5, sl
 800179c:	1bc7      	subs	r7, r0, r7
 800179e:	e5f7      	b.n	8001390 <__aeabi_dadd+0xac>
 80017a0:	08c9      	lsrs	r1, r1, #3
 80017a2:	077b      	lsls	r3, r7, #29
 80017a4:	4655      	mov	r5, sl
 80017a6:	430b      	orrs	r3, r1
 80017a8:	08f8      	lsrs	r0, r7, #3
 80017aa:	e6c8      	b.n	800153e <__aeabi_dadd+0x25a>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x4ce>
 80017b0:	e081      	b.n	80018b6 <__aeabi_dadd+0x5d2>
 80017b2:	4643      	mov	r3, r8
 80017b4:	430b      	orrs	r3, r1
 80017b6:	d115      	bne.n	80017e4 <__aeabi_dadd+0x500>
 80017b8:	2080      	movs	r0, #128	; 0x80
 80017ba:	2500      	movs	r5, #0
 80017bc:	0300      	lsls	r0, r0, #12
 80017be:	e6e3      	b.n	8001588 <__aeabi_dadd+0x2a4>
 80017c0:	1a5c      	subs	r4, r3, r1
 80017c2:	42a3      	cmp	r3, r4
 80017c4:	419b      	sbcs	r3, r3
 80017c6:	1bc7      	subs	r7, r0, r7
 80017c8:	425b      	negs	r3, r3
 80017ca:	2601      	movs	r6, #1
 80017cc:	1aff      	subs	r7, r7, r3
 80017ce:	e5da      	b.n	8001386 <__aeabi_dadd+0xa2>
 80017d0:	0742      	lsls	r2, r0, #29
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	08c0      	lsrs	r0, r0, #3
 80017d8:	e6d2      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017da:	0742      	lsls	r2, r0, #29
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	4313      	orrs	r3, r2
 80017e0:	08c0      	lsrs	r0, r0, #3
 80017e2:	e6ac      	b.n	800153e <__aeabi_dadd+0x25a>
 80017e4:	4643      	mov	r3, r8
 80017e6:	4642      	mov	r2, r8
 80017e8:	08c9      	lsrs	r1, r1, #3
 80017ea:	075b      	lsls	r3, r3, #29
 80017ec:	4655      	mov	r5, sl
 80017ee:	430b      	orrs	r3, r1
 80017f0:	08d0      	lsrs	r0, r2, #3
 80017f2:	e6c5      	b.n	8001580 <__aeabi_dadd+0x29c>
 80017f4:	4643      	mov	r3, r8
 80017f6:	4642      	mov	r2, r8
 80017f8:	075b      	lsls	r3, r3, #29
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	430b      	orrs	r3, r1
 80017fe:	08d0      	lsrs	r0, r2, #3
 8001800:	e6be      	b.n	8001580 <__aeabi_dadd+0x29c>
 8001802:	4303      	orrs	r3, r0
 8001804:	001c      	movs	r4, r3
 8001806:	1e63      	subs	r3, r4, #1
 8001808:	419c      	sbcs	r4, r3
 800180a:	e6fc      	b.n	8001606 <__aeabi_dadd+0x322>
 800180c:	0002      	movs	r2, r0
 800180e:	3c20      	subs	r4, #32
 8001810:	40e2      	lsrs	r2, r4
 8001812:	0014      	movs	r4, r2
 8001814:	4662      	mov	r2, ip
 8001816:	2a20      	cmp	r2, #32
 8001818:	d003      	beq.n	8001822 <__aeabi_dadd+0x53e>
 800181a:	2540      	movs	r5, #64	; 0x40
 800181c:	1aad      	subs	r5, r5, r2
 800181e:	40a8      	lsls	r0, r5
 8001820:	4303      	orrs	r3, r0
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	4183      	sbcs	r3, r0
 8001826:	4323      	orrs	r3, r4
 8001828:	e775      	b.n	8001716 <__aeabi_dadd+0x432>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d0e2      	beq.n	80017f4 <__aeabi_dadd+0x510>
 800182e:	003a      	movs	r2, r7
 8001830:	430a      	orrs	r2, r1
 8001832:	d0cd      	beq.n	80017d0 <__aeabi_dadd+0x4ec>
 8001834:	0742      	lsls	r2, r0, #29
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	4313      	orrs	r3, r2
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	08c0      	lsrs	r0, r0, #3
 800183e:	0312      	lsls	r2, r2, #12
 8001840:	4210      	tst	r0, r2
 8001842:	d006      	beq.n	8001852 <__aeabi_dadd+0x56e>
 8001844:	08fc      	lsrs	r4, r7, #3
 8001846:	4214      	tst	r4, r2
 8001848:	d103      	bne.n	8001852 <__aeabi_dadd+0x56e>
 800184a:	0020      	movs	r0, r4
 800184c:	08cb      	lsrs	r3, r1, #3
 800184e:	077a      	lsls	r2, r7, #29
 8001850:	4313      	orrs	r3, r2
 8001852:	0f5a      	lsrs	r2, r3, #29
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	0752      	lsls	r2, r2, #29
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	4313      	orrs	r3, r2
 800185c:	e690      	b.n	8001580 <__aeabi_dadd+0x29c>
 800185e:	4643      	mov	r3, r8
 8001860:	430b      	orrs	r3, r1
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x582>
 8001864:	e709      	b.n	800167a <__aeabi_dadd+0x396>
 8001866:	4643      	mov	r3, r8
 8001868:	4642      	mov	r2, r8
 800186a:	08c9      	lsrs	r1, r1, #3
 800186c:	075b      	lsls	r3, r3, #29
 800186e:	4655      	mov	r5, sl
 8001870:	430b      	orrs	r3, r1
 8001872:	08d0      	lsrs	r0, r2, #3
 8001874:	e666      	b.n	8001544 <__aeabi_dadd+0x260>
 8001876:	1acc      	subs	r4, r1, r3
 8001878:	42a1      	cmp	r1, r4
 800187a:	4189      	sbcs	r1, r1
 800187c:	1a3f      	subs	r7, r7, r0
 800187e:	4249      	negs	r1, r1
 8001880:	4655      	mov	r5, sl
 8001882:	2601      	movs	r6, #1
 8001884:	1a7f      	subs	r7, r7, r1
 8001886:	e57e      	b.n	8001386 <__aeabi_dadd+0xa2>
 8001888:	4642      	mov	r2, r8
 800188a:	1a5c      	subs	r4, r3, r1
 800188c:	1a87      	subs	r7, r0, r2
 800188e:	42a3      	cmp	r3, r4
 8001890:	4192      	sbcs	r2, r2
 8001892:	4252      	negs	r2, r2
 8001894:	1abf      	subs	r7, r7, r2
 8001896:	023a      	lsls	r2, r7, #8
 8001898:	d53d      	bpl.n	8001916 <__aeabi_dadd+0x632>
 800189a:	1acc      	subs	r4, r1, r3
 800189c:	42a1      	cmp	r1, r4
 800189e:	4189      	sbcs	r1, r1
 80018a0:	4643      	mov	r3, r8
 80018a2:	4249      	negs	r1, r1
 80018a4:	1a1f      	subs	r7, r3, r0
 80018a6:	4655      	mov	r5, sl
 80018a8:	1a7f      	subs	r7, r7, r1
 80018aa:	e595      	b.n	80013d8 <__aeabi_dadd+0xf4>
 80018ac:	077b      	lsls	r3, r7, #29
 80018ae:	08c9      	lsrs	r1, r1, #3
 80018b0:	430b      	orrs	r3, r1
 80018b2:	08f8      	lsrs	r0, r7, #3
 80018b4:	e643      	b.n	800153e <__aeabi_dadd+0x25a>
 80018b6:	4644      	mov	r4, r8
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	430c      	orrs	r4, r1
 80018bc:	d130      	bne.n	8001920 <__aeabi_dadd+0x63c>
 80018be:	0742      	lsls	r2, r0, #29
 80018c0:	4313      	orrs	r3, r2
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	e65c      	b.n	8001580 <__aeabi_dadd+0x29c>
 80018c6:	077b      	lsls	r3, r7, #29
 80018c8:	08c9      	lsrs	r1, r1, #3
 80018ca:	430b      	orrs	r3, r1
 80018cc:	08f8      	lsrs	r0, r7, #3
 80018ce:	e639      	b.n	8001544 <__aeabi_dadd+0x260>
 80018d0:	185c      	adds	r4, r3, r1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	419b      	sbcs	r3, r3
 80018d6:	4440      	add	r0, r8
 80018d8:	425b      	negs	r3, r3
 80018da:	18c7      	adds	r7, r0, r3
 80018dc:	023b      	lsls	r3, r7, #8
 80018de:	d400      	bmi.n	80018e2 <__aeabi_dadd+0x5fe>
 80018e0:	e625      	b.n	800152e <__aeabi_dadd+0x24a>
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <__aeabi_dadd+0x674>)
 80018e4:	2601      	movs	r6, #1
 80018e6:	401f      	ands	r7, r3
 80018e8:	e621      	b.n	800152e <__aeabi_dadd+0x24a>
 80018ea:	0004      	movs	r4, r0
 80018ec:	3a20      	subs	r2, #32
 80018ee:	40d4      	lsrs	r4, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	2a20      	cmp	r2, #32
 80018f4:	d004      	beq.n	8001900 <__aeabi_dadd+0x61c>
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	4666      	mov	r6, ip
 80018fa:	1b92      	subs	r2, r2, r6
 80018fc:	4090      	lsls	r0, r2
 80018fe:	4303      	orrs	r3, r0
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	4193      	sbcs	r3, r2
 8001904:	431c      	orrs	r4, r3
 8001906:	e67e      	b.n	8001606 <__aeabi_dadd+0x322>
 8001908:	185c      	adds	r4, r3, r1
 800190a:	428c      	cmp	r4, r1
 800190c:	4189      	sbcs	r1, r1
 800190e:	4440      	add	r0, r8
 8001910:	4249      	negs	r1, r1
 8001912:	1847      	adds	r7, r0, r1
 8001914:	e6dd      	b.n	80016d2 <__aeabi_dadd+0x3ee>
 8001916:	0023      	movs	r3, r4
 8001918:	433b      	orrs	r3, r7
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x63a>
 800191c:	e6ad      	b.n	800167a <__aeabi_dadd+0x396>
 800191e:	e606      	b.n	800152e <__aeabi_dadd+0x24a>
 8001920:	0744      	lsls	r4, r0, #29
 8001922:	4323      	orrs	r3, r4
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	08c0      	lsrs	r0, r0, #3
 8001928:	0324      	lsls	r4, r4, #12
 800192a:	4220      	tst	r0, r4
 800192c:	d008      	beq.n	8001940 <__aeabi_dadd+0x65c>
 800192e:	4642      	mov	r2, r8
 8001930:	08d6      	lsrs	r6, r2, #3
 8001932:	4226      	tst	r6, r4
 8001934:	d104      	bne.n	8001940 <__aeabi_dadd+0x65c>
 8001936:	4655      	mov	r5, sl
 8001938:	0030      	movs	r0, r6
 800193a:	08cb      	lsrs	r3, r1, #3
 800193c:	0751      	lsls	r1, r2, #29
 800193e:	430b      	orrs	r3, r1
 8001940:	0f5a      	lsrs	r2, r3, #29
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	0752      	lsls	r2, r2, #29
 8001948:	4313      	orrs	r3, r2
 800194a:	e619      	b.n	8001580 <__aeabi_dadd+0x29c>
 800194c:	2300      	movs	r3, #0
 800194e:	4a01      	ldr	r2, [pc, #4]	; (8001954 <__aeabi_dadd+0x670>)
 8001950:	001f      	movs	r7, r3
 8001952:	e55e      	b.n	8001412 <__aeabi_dadd+0x12e>
 8001954:	000007ff 	.word	0x000007ff
 8001958:	ff7fffff 	.word	0xff7fffff

0800195c <__aeabi_ddiv>:
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	4657      	mov	r7, sl
 8001960:	464e      	mov	r6, r9
 8001962:	4645      	mov	r5, r8
 8001964:	46de      	mov	lr, fp
 8001966:	b5e0      	push	{r5, r6, r7, lr}
 8001968:	4681      	mov	r9, r0
 800196a:	0005      	movs	r5, r0
 800196c:	030c      	lsls	r4, r1, #12
 800196e:	0048      	lsls	r0, r1, #1
 8001970:	4692      	mov	sl, r2
 8001972:	001f      	movs	r7, r3
 8001974:	b085      	sub	sp, #20
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	0d40      	lsrs	r0, r0, #21
 800197a:	0fce      	lsrs	r6, r1, #31
 800197c:	2800      	cmp	r0, #0
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0x26>
 8001980:	e156      	b.n	8001c30 <__aeabi_ddiv+0x2d4>
 8001982:	4bd4      	ldr	r3, [pc, #848]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001984:	4298      	cmp	r0, r3
 8001986:	d100      	bne.n	800198a <__aeabi_ddiv+0x2e>
 8001988:	e172      	b.n	8001c70 <__aeabi_ddiv+0x314>
 800198a:	0f6b      	lsrs	r3, r5, #29
 800198c:	00e4      	lsls	r4, r4, #3
 800198e:	431c      	orrs	r4, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	4323      	orrs	r3, r4
 8001996:	4698      	mov	r8, r3
 8001998:	4bcf      	ldr	r3, [pc, #828]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 800199a:	00ed      	lsls	r5, r5, #3
 800199c:	469b      	mov	fp, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	4699      	mov	r9, r3
 80019a2:	4483      	add	fp, r0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	033c      	lsls	r4, r7, #12
 80019a8:	007b      	lsls	r3, r7, #1
 80019aa:	4650      	mov	r0, sl
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	0fff      	lsrs	r7, r7, #31
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x5c>
 80019b6:	e11f      	b.n	8001bf8 <__aeabi_ddiv+0x29c>
 80019b8:	4ac6      	ldr	r2, [pc, #792]	; (8001cd4 <__aeabi_ddiv+0x378>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x64>
 80019be:	e162      	b.n	8001c86 <__aeabi_ddiv+0x32a>
 80019c0:	49c5      	ldr	r1, [pc, #788]	; (8001cd8 <__aeabi_ddiv+0x37c>)
 80019c2:	0f42      	lsrs	r2, r0, #29
 80019c4:	468c      	mov	ip, r1
 80019c6:	00e4      	lsls	r4, r4, #3
 80019c8:	4659      	mov	r1, fp
 80019ca:	4314      	orrs	r4, r2
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	4463      	add	r3, ip
 80019d0:	0412      	lsls	r2, r2, #16
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	4314      	orrs	r4, r2
 80019d6:	469b      	mov	fp, r3
 80019d8:	00c2      	lsls	r2, r0, #3
 80019da:	2000      	movs	r0, #0
 80019dc:	0033      	movs	r3, r6
 80019de:	407b      	eors	r3, r7
 80019e0:	469a      	mov	sl, r3
 80019e2:	464b      	mov	r3, r9
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d827      	bhi.n	8001a38 <__aeabi_ddiv+0xdc>
 80019e8:	49bc      	ldr	r1, [pc, #752]	; (8001cdc <__aeabi_ddiv+0x380>)
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	58cb      	ldr	r3, [r1, r3]
 80019ee:	469f      	mov	pc, r3
 80019f0:	46b2      	mov	sl, r6
 80019f2:	9b00      	ldr	r3, [sp, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d016      	beq.n	8001a26 <__aeabi_ddiv+0xca>
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d100      	bne.n	80019fe <__aeabi_ddiv+0xa2>
 80019fc:	e28e      	b.n	8001f1c <__aeabi_ddiv+0x5c0>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d000      	beq.n	8001a04 <__aeabi_ddiv+0xa8>
 8001a02:	e0d9      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2400      	movs	r4, #0
 8001a08:	2500      	movs	r5, #0
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	051b      	lsls	r3, r3, #20
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	07d2      	lsls	r2, r2, #31
 8001a12:	4313      	orrs	r3, r2
 8001a14:	0028      	movs	r0, r5
 8001a16:	0019      	movs	r1, r3
 8001a18:	b005      	add	sp, #20
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	46a9      	mov	r9, r5
 8001a22:	46a0      	mov	r8, r4
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	2400      	movs	r4, #0
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4baa      	ldr	r3, [pc, #680]	; (8001cd4 <__aeabi_ddiv+0x378>)
 8001a2c:	e7ed      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001a2e:	46ba      	mov	sl, r7
 8001a30:	46a0      	mov	r8, r4
 8001a32:	0015      	movs	r5, r2
 8001a34:	9000      	str	r0, [sp, #0]
 8001a36:	e7dc      	b.n	80019f2 <__aeabi_ddiv+0x96>
 8001a38:	4544      	cmp	r4, r8
 8001a3a:	d200      	bcs.n	8001a3e <__aeabi_ddiv+0xe2>
 8001a3c:	e1c7      	b.n	8001dce <__aeabi_ddiv+0x472>
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_ddiv+0xe6>
 8001a40:	e1c2      	b.n	8001dc8 <__aeabi_ddiv+0x46c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	425b      	negs	r3, r3
 8001a46:	469c      	mov	ip, r3
 8001a48:	002e      	movs	r6, r5
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	44e3      	add	fp, ip
 8001a50:	0223      	lsls	r3, r4, #8
 8001a52:	0e14      	lsrs	r4, r2, #24
 8001a54:	431c      	orrs	r4, r3
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	4699      	mov	r9, r3
 8001a5a:	0423      	lsls	r3, r4, #16
 8001a5c:	0c1f      	lsrs	r7, r3, #16
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4649      	mov	r1, r9
 8001a62:	9200      	str	r2, [sp, #0]
 8001a64:	9701      	str	r7, [sp, #4]
 8001a66:	f7fe fbf7 	bl	8000258 <__aeabi_uidivmod>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	437a      	muls	r2, r7
 8001a6e:	040b      	lsls	r3, r1, #16
 8001a70:	0c31      	lsrs	r1, r6, #16
 8001a72:	4680      	mov	r8, r0
 8001a74:	4319      	orrs	r1, r3
 8001a76:	428a      	cmp	r2, r1
 8001a78:	d907      	bls.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	469c      	mov	ip, r3
 8001a80:	1909      	adds	r1, r1, r4
 8001a82:	44e0      	add	r8, ip
 8001a84:	428c      	cmp	r4, r1
 8001a86:	d800      	bhi.n	8001a8a <__aeabi_ddiv+0x12e>
 8001a88:	e207      	b.n	8001e9a <__aeabi_ddiv+0x53e>
 8001a8a:	1a88      	subs	r0, r1, r2
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fbe3 	bl	8000258 <__aeabi_uidivmod>
 8001a92:	0409      	lsls	r1, r1, #16
 8001a94:	468c      	mov	ip, r1
 8001a96:	0431      	lsls	r1, r6, #16
 8001a98:	4666      	mov	r6, ip
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	0c09      	lsrs	r1, r1, #16
 8001a9e:	4342      	muls	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	4331      	orrs	r1, r6
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d904      	bls.n	8001ab2 <__aeabi_ddiv+0x156>
 8001aa8:	1909      	adds	r1, r1, r4
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	428c      	cmp	r4, r1
 8001aae:	d800      	bhi.n	8001ab2 <__aeabi_ddiv+0x156>
 8001ab0:	e1ed      	b.n	8001e8e <__aeabi_ddiv+0x532>
 8001ab2:	1a88      	subs	r0, r1, r2
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4641      	mov	r1, r8
 8001abe:	9b00      	ldr	r3, [sp, #0]
 8001ac0:	040e      	lsls	r6, r1, #16
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	001f      	movs	r7, r3
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	9b00      	ldr	r3, [sp, #0]
 8001aca:	0c36      	lsrs	r6, r6, #16
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c19      	lsrs	r1, r3, #16
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	4373      	muls	r3, r6
 8001ad4:	0c12      	lsrs	r2, r2, #16
 8001ad6:	437e      	muls	r6, r7
 8001ad8:	9103      	str	r1, [sp, #12]
 8001ada:	4351      	muls	r1, r2
 8001adc:	437a      	muls	r2, r7
 8001ade:	0c1f      	lsrs	r7, r3, #16
 8001ae0:	46bc      	mov	ip, r7
 8001ae2:	1876      	adds	r6, r6, r1
 8001ae4:	4466      	add	r6, ip
 8001ae6:	42b1      	cmp	r1, r6
 8001ae8:	d903      	bls.n	8001af2 <__aeabi_ddiv+0x196>
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	468c      	mov	ip, r1
 8001af0:	4462      	add	r2, ip
 8001af2:	0c31      	lsrs	r1, r6, #16
 8001af4:	188a      	adds	r2, r1, r2
 8001af6:	0431      	lsls	r1, r6, #16
 8001af8:	041e      	lsls	r6, r3, #16
 8001afa:	0c36      	lsrs	r6, r6, #16
 8001afc:	198e      	adds	r6, r1, r6
 8001afe:	4290      	cmp	r0, r2
 8001b00:	d302      	bcc.n	8001b08 <__aeabi_ddiv+0x1ac>
 8001b02:	d112      	bne.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b04:	42b5      	cmp	r5, r6
 8001b06:	d210      	bcs.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	469c      	mov	ip, r3
 8001b10:	4465      	add	r5, ip
 8001b12:	001f      	movs	r7, r3
 8001b14:	429d      	cmp	r5, r3
 8001b16:	419b      	sbcs	r3, r3
 8001b18:	425b      	negs	r3, r3
 8001b1a:	191b      	adds	r3, r3, r4
 8001b1c:	18c0      	adds	r0, r0, r3
 8001b1e:	4284      	cmp	r4, r0
 8001b20:	d200      	bcs.n	8001b24 <__aeabi_ddiv+0x1c8>
 8001b22:	e1a0      	b.n	8001e66 <__aeabi_ddiv+0x50a>
 8001b24:	d100      	bne.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001b26:	e19b      	b.n	8001e60 <__aeabi_ddiv+0x504>
 8001b28:	4688      	mov	r8, r1
 8001b2a:	1bae      	subs	r6, r5, r6
 8001b2c:	42b5      	cmp	r5, r6
 8001b2e:	41ad      	sbcs	r5, r5
 8001b30:	1a80      	subs	r0, r0, r2
 8001b32:	426d      	negs	r5, r5
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	4284      	cmp	r4, r0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x1e0>
 8001b3a:	e1d5      	b.n	8001ee8 <__aeabi_ddiv+0x58c>
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	f7fe fb8b 	bl	8000258 <__aeabi_uidivmod>
 8001b42:	9a01      	ldr	r2, [sp, #4]
 8001b44:	040b      	lsls	r3, r1, #16
 8001b46:	4342      	muls	r2, r0
 8001b48:	0c31      	lsrs	r1, r6, #16
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	428a      	cmp	r2, r1
 8001b50:	d900      	bls.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001b52:	e16c      	b.n	8001e2e <__aeabi_ddiv+0x4d2>
 8001b54:	1a88      	subs	r0, r1, r2
 8001b56:	4649      	mov	r1, r9
 8001b58:	f7fe fb7e 	bl	8000258 <__aeabi_uidivmod>
 8001b5c:	9a01      	ldr	r2, [sp, #4]
 8001b5e:	0436      	lsls	r6, r6, #16
 8001b60:	4342      	muls	r2, r0
 8001b62:	0409      	lsls	r1, r1, #16
 8001b64:	0c36      	lsrs	r6, r6, #16
 8001b66:	0003      	movs	r3, r0
 8001b68:	430e      	orrs	r6, r1
 8001b6a:	42b2      	cmp	r2, r6
 8001b6c:	d900      	bls.n	8001b70 <__aeabi_ddiv+0x214>
 8001b6e:	e153      	b.n	8001e18 <__aeabi_ddiv+0x4bc>
 8001b70:	9803      	ldr	r0, [sp, #12]
 8001b72:	1ab6      	subs	r6, r6, r2
 8001b74:	0002      	movs	r2, r0
 8001b76:	042d      	lsls	r5, r5, #16
 8001b78:	431d      	orrs	r5, r3
 8001b7a:	9f02      	ldr	r7, [sp, #8]
 8001b7c:	042b      	lsls	r3, r5, #16
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	435a      	muls	r2, r3
 8001b82:	437b      	muls	r3, r7
 8001b84:	469c      	mov	ip, r3
 8001b86:	0c29      	lsrs	r1, r5, #16
 8001b88:	4348      	muls	r0, r1
 8001b8a:	0c13      	lsrs	r3, r2, #16
 8001b8c:	4484      	add	ip, r0
 8001b8e:	4463      	add	r3, ip
 8001b90:	4379      	muls	r1, r7
 8001b92:	4298      	cmp	r0, r3
 8001b94:	d903      	bls.n	8001b9e <__aeabi_ddiv+0x242>
 8001b96:	2080      	movs	r0, #128	; 0x80
 8001b98:	0240      	lsls	r0, r0, #9
 8001b9a:	4684      	mov	ip, r0
 8001b9c:	4461      	add	r1, ip
 8001b9e:	0c18      	lsrs	r0, r3, #16
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c12      	lsrs	r2, r2, #16
 8001ba6:	1841      	adds	r1, r0, r1
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	428e      	cmp	r6, r1
 8001bac:	d200      	bcs.n	8001bb0 <__aeabi_ddiv+0x254>
 8001bae:	e0ff      	b.n	8001db0 <__aeabi_ddiv+0x454>
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_ddiv+0x258>
 8001bb2:	e0fa      	b.n	8001daa <__aeabi_ddiv+0x44e>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <__aeabi_ddiv+0x384>)
 8001bba:	445a      	add	r2, fp
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	dc00      	bgt.n	8001bc2 <__aeabi_ddiv+0x266>
 8001bc0:	e0aa      	b.n	8001d18 <__aeabi_ddiv+0x3bc>
 8001bc2:	076b      	lsls	r3, r5, #29
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001bc6:	e13d      	b.n	8001e44 <__aeabi_ddiv+0x4e8>
 8001bc8:	08ed      	lsrs	r5, r5, #3
 8001bca:	4643      	mov	r3, r8
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	d506      	bpl.n	8001bde <__aeabi_ddiv+0x282>
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <__aeabi_ddiv+0x388>)
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	00d2      	lsls	r2, r2, #3
 8001bdc:	445a      	add	r2, fp
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <__aeabi_ddiv+0x38c>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dd00      	ble.n	8001be6 <__aeabi_ddiv+0x28a>
 8001be4:	e71f      	b.n	8001a26 <__aeabi_ddiv+0xca>
 8001be6:	4643      	mov	r3, r8
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	431d      	orrs	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	025c      	lsls	r4, r3, #9
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	0d53      	lsrs	r3, r2, #21
 8001bf6:	e708      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_ddiv+0x2a4>
 8001bfe:	e07b      	b.n	8001cf8 <__aeabi_ddiv+0x39c>
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x2aa>
 8001c04:	e0fa      	b.n	8001dfc <__aeabi_ddiv+0x4a0>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f001 fa22 	bl	8003050 <__clzsi2>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	3a0b      	subs	r2, #11
 8001c10:	231d      	movs	r3, #29
 8001c12:	0001      	movs	r1, r0
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	4652      	mov	r2, sl
 8001c18:	3908      	subs	r1, #8
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	408c      	lsls	r4, r1
 8001c1e:	4314      	orrs	r4, r2
 8001c20:	4652      	mov	r2, sl
 8001c22:	408a      	lsls	r2, r1
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <__aeabi_ddiv+0x390>)
 8001c26:	4458      	add	r0, fp
 8001c28:	469b      	mov	fp, r3
 8001c2a:	4483      	add	fp, r0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e6d5      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001c30:	464b      	mov	r3, r9
 8001c32:	4323      	orrs	r3, r4
 8001c34:	4698      	mov	r8, r3
 8001c36:	d044      	beq.n	8001cc2 <__aeabi_ddiv+0x366>
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_ddiv+0x2e2>
 8001c3c:	e0ce      	b.n	8001ddc <__aeabi_ddiv+0x480>
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f001 fa06 	bl	8003050 <__clzsi2>
 8001c44:	0001      	movs	r1, r0
 8001c46:	0002      	movs	r2, r0
 8001c48:	390b      	subs	r1, #11
 8001c4a:	231d      	movs	r3, #29
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	0010      	movs	r0, r2
 8001c52:	40d9      	lsrs	r1, r3
 8001c54:	3808      	subs	r0, #8
 8001c56:	4084      	lsls	r4, r0
 8001c58:	000b      	movs	r3, r1
 8001c5a:	464d      	mov	r5, r9
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	4698      	mov	r8, r3
 8001c60:	4085      	lsls	r5, r0
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <__aeabi_ddiv+0x394>)
 8001c64:	1a83      	subs	r3, r0, r2
 8001c66:	469b      	mov	fp, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	e69a      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c70:	464b      	mov	r3, r9
 8001c72:	4323      	orrs	r3, r4
 8001c74:	4698      	mov	r8, r3
 8001c76:	d11d      	bne.n	8001cb4 <__aeabi_ddiv+0x358>
 8001c78:	2308      	movs	r3, #8
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	3b06      	subs	r3, #6
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4683      	mov	fp, r0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	e68f      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001c86:	4652      	mov	r2, sl
 8001c88:	4322      	orrs	r2, r4
 8001c8a:	d109      	bne.n	8001ca0 <__aeabi_ddiv+0x344>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4319      	orrs	r1, r3
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001c94:	4689      	mov	r9, r1
 8001c96:	469c      	mov	ip, r3
 8001c98:	2400      	movs	r4, #0
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	44e3      	add	fp, ip
 8001c9e:	e69d      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	464a      	mov	r2, r9
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <__aeabi_ddiv+0x398>)
 8001ca8:	4691      	mov	r9, r2
 8001caa:	469c      	mov	ip, r3
 8001cac:	4652      	mov	r2, sl
 8001cae:	2003      	movs	r0, #3
 8001cb0:	44e3      	add	fp, ip
 8001cb2:	e693      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	3b09      	subs	r3, #9
 8001cba:	46a0      	mov	r8, r4
 8001cbc:	4683      	mov	fp, r0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	e671      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	2500      	movs	r5, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	e669      	b.n	80019a6 <__aeabi_ddiv+0x4a>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	fffffc01 	.word	0xfffffc01
 8001cdc:	08018658 	.word	0x08018658
 8001ce0:	000003ff 	.word	0x000003ff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	000003f3 	.word	0x000003f3
 8001cf0:	fffffc0d 	.word	0xfffffc0d
 8001cf4:	fffff801 	.word	0xfffff801
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4689      	mov	r9, r1
 8001d00:	2400      	movs	r4, #0
 8001d02:	2001      	movs	r0, #1
 8001d04:	e66a      	b.n	80019dc <__aeabi_ddiv+0x80>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	469a      	mov	sl, r3
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	e67a      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d14:	2501      	movs	r5, #1
 8001d16:	426d      	negs	r5, r5
 8001d18:	2301      	movs	r3, #1
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	2b38      	cmp	r3, #56	; 0x38
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_ddiv+0x3c6>
 8001d20:	e670      	b.n	8001a04 <__aeabi_ddiv+0xa8>
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_ddiv+0x3cc>
 8001d26:	e0bf      	b.n	8001ea8 <__aeabi_ddiv+0x54c>
 8001d28:	211f      	movs	r1, #31
 8001d2a:	4249      	negs	r1, r1
 8001d2c:	1a8a      	subs	r2, r1, r2
 8001d2e:	4641      	mov	r1, r8
 8001d30:	40d1      	lsrs	r1, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d004      	beq.n	8001d42 <__aeabi_ddiv+0x3e6>
 8001d38:	4641      	mov	r1, r8
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <__aeabi_ddiv+0x5e0>)
 8001d3c:	445b      	add	r3, fp
 8001d3e:	4099      	lsls	r1, r3
 8001d40:	430d      	orrs	r5, r1
 8001d42:	1e6b      	subs	r3, r5, #1
 8001d44:	419d      	sbcs	r5, r3
 8001d46:	2307      	movs	r3, #7
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	001d      	movs	r5, r3
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4015      	ands	r5, r2
 8001d50:	4213      	tst	r3, r2
 8001d52:	d100      	bne.n	8001d56 <__aeabi_ddiv+0x3fa>
 8001d54:	e0d4      	b.n	8001f00 <__aeabi_ddiv+0x5a4>
 8001d56:	210f      	movs	r1, #15
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4011      	ands	r1, r2
 8001d5c:	2904      	cmp	r1, #4
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x406>
 8001d60:	e0cb      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d62:	1d11      	adds	r1, r2, #4
 8001d64:	4291      	cmp	r1, r2
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	0219      	lsls	r1, r3, #8
 8001d70:	d400      	bmi.n	8001d74 <__aeabi_ddiv+0x418>
 8001d72:	e0c2      	b.n	8001efa <__aeabi_ddiv+0x59e>
 8001d74:	2301      	movs	r3, #1
 8001d76:	2400      	movs	r4, #0
 8001d78:	2500      	movs	r5, #0
 8001d7a:	e646      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	4641      	mov	r1, r8
 8001d80:	031b      	lsls	r3, r3, #12
 8001d82:	4219      	tst	r1, r3
 8001d84:	d008      	beq.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d86:	421c      	tst	r4, r3
 8001d88:	d106      	bne.n	8001d98 <__aeabi_ddiv+0x43c>
 8001d8a:	431c      	orrs	r4, r3
 8001d8c:	0324      	lsls	r4, r4, #12
 8001d8e:	46ba      	mov	sl, r7
 8001d90:	0015      	movs	r5, r2
 8001d92:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	e638      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	431c      	orrs	r4, r3
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	46b2      	mov	sl, r6
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001da6:	0b24      	lsrs	r4, r4, #12
 8001da8:	e62f      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_ddiv+0x454>
 8001dae:	e703      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001db0:	19a6      	adds	r6, r4, r6
 8001db2:	1e68      	subs	r0, r5, #1
 8001db4:	42a6      	cmp	r6, r4
 8001db6:	d200      	bcs.n	8001dba <__aeabi_ddiv+0x45e>
 8001db8:	e08d      	b.n	8001ed6 <__aeabi_ddiv+0x57a>
 8001dba:	428e      	cmp	r6, r1
 8001dbc:	d200      	bcs.n	8001dc0 <__aeabi_ddiv+0x464>
 8001dbe:	e0a3      	b.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x468>
 8001dc2:	e0b3      	b.n	8001f2c <__aeabi_ddiv+0x5d0>
 8001dc4:	0005      	movs	r5, r0
 8001dc6:	e6f5      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001dc8:	42aa      	cmp	r2, r5
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x472>
 8001dcc:	e639      	b.n	8001a42 <__aeabi_ddiv+0xe6>
 8001dce:	4643      	mov	r3, r8
 8001dd0:	07de      	lsls	r6, r3, #31
 8001dd2:	0858      	lsrs	r0, r3, #1
 8001dd4:	086b      	lsrs	r3, r5, #1
 8001dd6:	431e      	orrs	r6, r3
 8001dd8:	07ed      	lsls	r5, r5, #31
 8001dda:	e639      	b.n	8001a50 <__aeabi_ddiv+0xf4>
 8001ddc:	4648      	mov	r0, r9
 8001dde:	f001 f937 	bl	8003050 <__clzsi2>
 8001de2:	0001      	movs	r1, r0
 8001de4:	0002      	movs	r2, r0
 8001de6:	3115      	adds	r1, #21
 8001de8:	3220      	adds	r2, #32
 8001dea:	291c      	cmp	r1, #28
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_ddiv+0x494>
 8001dee:	e72c      	b.n	8001c4a <__aeabi_ddiv+0x2ee>
 8001df0:	464b      	mov	r3, r9
 8001df2:	3808      	subs	r0, #8
 8001df4:	4083      	lsls	r3, r0
 8001df6:	2500      	movs	r5, #0
 8001df8:	4698      	mov	r8, r3
 8001dfa:	e732      	b.n	8001c62 <__aeabi_ddiv+0x306>
 8001dfc:	f001 f928 	bl	8003050 <__clzsi2>
 8001e00:	0003      	movs	r3, r0
 8001e02:	001a      	movs	r2, r3
 8001e04:	3215      	adds	r2, #21
 8001e06:	3020      	adds	r0, #32
 8001e08:	2a1c      	cmp	r2, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_ddiv+0x4b2>
 8001e0c:	e700      	b.n	8001c10 <__aeabi_ddiv+0x2b4>
 8001e0e:	4654      	mov	r4, sl
 8001e10:	3b08      	subs	r3, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	409c      	lsls	r4, r3
 8001e16:	e705      	b.n	8001c24 <__aeabi_ddiv+0x2c8>
 8001e18:	1936      	adds	r6, r6, r4
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	42b4      	cmp	r4, r6
 8001e1e:	d900      	bls.n	8001e22 <__aeabi_ddiv+0x4c6>
 8001e20:	e6a6      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e22:	42b2      	cmp	r2, r6
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x4cc>
 8001e26:	e6a3      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e28:	1e83      	subs	r3, r0, #2
 8001e2a:	1936      	adds	r6, r6, r4
 8001e2c:	e6a0      	b.n	8001b70 <__aeabi_ddiv+0x214>
 8001e2e:	1909      	adds	r1, r1, r4
 8001e30:	3d01      	subs	r5, #1
 8001e32:	428c      	cmp	r4, r1
 8001e34:	d900      	bls.n	8001e38 <__aeabi_ddiv+0x4dc>
 8001e36:	e68d      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d800      	bhi.n	8001e3e <__aeabi_ddiv+0x4e2>
 8001e3c:	e68a      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e3e:	1e85      	subs	r5, r0, #2
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	e687      	b.n	8001b54 <__aeabi_ddiv+0x1f8>
 8001e44:	230f      	movs	r3, #15
 8001e46:	402b      	ands	r3, r5
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_ddiv+0x4f2>
 8001e4c:	e6bc      	b.n	8001bc8 <__aeabi_ddiv+0x26c>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	425b      	negs	r3, r3
 8001e52:	42ab      	cmp	r3, r5
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	3504      	adds	r5, #4
 8001e58:	425b      	negs	r3, r3
 8001e5a:	08ed      	lsrs	r5, r5, #3
 8001e5c:	4498      	add	r8, r3
 8001e5e:	e6b4      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001e60:	42af      	cmp	r7, r5
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x50a>
 8001e64:	e660      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e66:	4282      	cmp	r2, r0
 8001e68:	d804      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x512>
 8001e6c:	e65c      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e6e:	42ae      	cmp	r6, r5
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x518>
 8001e72:	e659      	b.n	8001b28 <__aeabi_ddiv+0x1cc>
 8001e74:	2302      	movs	r3, #2
 8001e76:	425b      	negs	r3, r3
 8001e78:	469c      	mov	ip, r3
 8001e7a:	9b00      	ldr	r3, [sp, #0]
 8001e7c:	44e0      	add	r8, ip
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4465      	add	r5, ip
 8001e82:	429d      	cmp	r5, r3
 8001e84:	419b      	sbcs	r3, r3
 8001e86:	425b      	negs	r3, r3
 8001e88:	191b      	adds	r3, r3, r4
 8001e8a:	18c0      	adds	r0, r0, r3
 8001e8c:	e64d      	b.n	8001b2a <__aeabi_ddiv+0x1ce>
 8001e8e:	428a      	cmp	r2, r1
 8001e90:	d800      	bhi.n	8001e94 <__aeabi_ddiv+0x538>
 8001e92:	e60e      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	1909      	adds	r1, r1, r4
 8001e98:	e60b      	b.n	8001ab2 <__aeabi_ddiv+0x156>
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d800      	bhi.n	8001ea0 <__aeabi_ddiv+0x544>
 8001e9e:	e5f4      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea0:	1e83      	subs	r3, r0, #2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	1909      	adds	r1, r1, r4
 8001ea6:	e5f0      	b.n	8001a8a <__aeabi_ddiv+0x12e>
 8001ea8:	4925      	ldr	r1, [pc, #148]	; (8001f40 <__aeabi_ddiv+0x5e4>)
 8001eaa:	0028      	movs	r0, r5
 8001eac:	4459      	add	r1, fp
 8001eae:	408d      	lsls	r5, r1
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	408a      	lsls	r2, r1
 8001eb4:	1e69      	subs	r1, r5, #1
 8001eb6:	418d      	sbcs	r5, r1
 8001eb8:	4641      	mov	r1, r8
 8001eba:	40d8      	lsrs	r0, r3
 8001ebc:	40d9      	lsrs	r1, r3
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	432a      	orrs	r2, r5
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	0751      	lsls	r1, r2, #29
 8001ec6:	d100      	bne.n	8001eca <__aeabi_ddiv+0x56e>
 8001ec8:	e751      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001eca:	210f      	movs	r1, #15
 8001ecc:	4011      	ands	r1, r2
 8001ece:	2904      	cmp	r1, #4
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_ddiv+0x578>
 8001ed2:	e746      	b.n	8001d62 <__aeabi_ddiv+0x406>
 8001ed4:	e74b      	b.n	8001d6e <__aeabi_ddiv+0x412>
 8001ed6:	0005      	movs	r5, r0
 8001ed8:	428e      	cmp	r6, r1
 8001eda:	d000      	beq.n	8001ede <__aeabi_ddiv+0x582>
 8001edc:	e66a      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ede:	9a00      	ldr	r2, [sp, #0]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_ddiv+0x58a>
 8001ee4:	e666      	b.n	8001bb4 <__aeabi_ddiv+0x258>
 8001ee6:	e667      	b.n	8001bb8 <__aeabi_ddiv+0x25c>
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <__aeabi_ddiv+0x5e8>)
 8001eea:	445a      	add	r2, fp
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x596>
 8001ef0:	e710      	b.n	8001d14 <__aeabi_ddiv+0x3b8>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4498      	add	r8, r3
 8001ef8:	e667      	b.n	8001bca <__aeabi_ddiv+0x26e>
 8001efa:	075d      	lsls	r5, r3, #29
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	0b1c      	lsrs	r4, r3, #12
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	2300      	movs	r3, #0
 8001f04:	4315      	orrs	r5, r2
 8001f06:	e580      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f08:	9800      	ldr	r0, [sp, #0]
 8001f0a:	3d02      	subs	r5, #2
 8001f0c:	0042      	lsls	r2, r0, #1
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	41bf      	sbcs	r7, r7
 8001f12:	427f      	negs	r7, r7
 8001f14:	193c      	adds	r4, r7, r4
 8001f16:	1936      	adds	r6, r6, r4
 8001f18:	9200      	str	r2, [sp, #0]
 8001f1a:	e7dd      	b.n	8001ed8 <__aeabi_ddiv+0x57c>
 8001f1c:	2480      	movs	r4, #128	; 0x80
 8001f1e:	4643      	mov	r3, r8
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__aeabi_ddiv+0x5dc>)
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	e56e      	b.n	8001a0a <__aeabi_ddiv+0xae>
 8001f2c:	9a00      	ldr	r2, [sp, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3ea      	bcc.n	8001f08 <__aeabi_ddiv+0x5ac>
 8001f32:	0005      	movs	r5, r0
 8001f34:	e7d3      	b.n	8001ede <__aeabi_ddiv+0x582>
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	000007ff 	.word	0x000007ff
 8001f3c:	0000043e 	.word	0x0000043e
 8001f40:	0000041e 	.word	0x0000041e
 8001f44:	000003ff 	.word	0x000003ff

08001f48 <__eqdf2>:
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	464e      	mov	r6, r9
 8001f4c:	4645      	mov	r5, r8
 8001f4e:	46de      	mov	lr, fp
 8001f50:	4657      	mov	r7, sl
 8001f52:	4690      	mov	r8, r2
 8001f54:	b5e0      	push	{r5, r6, r7, lr}
 8001f56:	0017      	movs	r7, r2
 8001f58:	031a      	lsls	r2, r3, #12
 8001f5a:	0b12      	lsrs	r2, r2, #12
 8001f5c:	0005      	movs	r5, r0
 8001f5e:	4684      	mov	ip, r0
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <__eqdf2+0x80>)
 8001f62:	030e      	lsls	r6, r1, #12
 8001f64:	004c      	lsls	r4, r1, #1
 8001f66:	4691      	mov	r9, r2
 8001f68:	005a      	lsls	r2, r3, #1
 8001f6a:	0fdb      	lsrs	r3, r3, #31
 8001f6c:	469b      	mov	fp, r3
 8001f6e:	0b36      	lsrs	r6, r6, #12
 8001f70:	0d64      	lsrs	r4, r4, #21
 8001f72:	0fc9      	lsrs	r1, r1, #31
 8001f74:	0d52      	lsrs	r2, r2, #21
 8001f76:	4284      	cmp	r4, r0
 8001f78:	d019      	beq.n	8001fae <__eqdf2+0x66>
 8001f7a:	4282      	cmp	r2, r0
 8001f7c:	d010      	beq.n	8001fa0 <__eqdf2+0x58>
 8001f7e:	2001      	movs	r0, #1
 8001f80:	4294      	cmp	r4, r2
 8001f82:	d10e      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f84:	454e      	cmp	r6, r9
 8001f86:	d10c      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f88:	2001      	movs	r0, #1
 8001f8a:	45c4      	cmp	ip, r8
 8001f8c:	d109      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f8e:	4559      	cmp	r1, fp
 8001f90:	d017      	beq.n	8001fc2 <__eqdf2+0x7a>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d105      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001f96:	0030      	movs	r0, r6
 8001f98:	4328      	orrs	r0, r5
 8001f9a:	1e43      	subs	r3, r0, #1
 8001f9c:	4198      	sbcs	r0, r3
 8001f9e:	e000      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa4:	46bb      	mov	fp, r7
 8001fa6:	46b2      	mov	sl, r6
 8001fa8:	46a9      	mov	r9, r5
 8001faa:	46a0      	mov	r8, r4
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	0033      	movs	r3, r6
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	432b      	orrs	r3, r5
 8001fb4:	d1f5      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fb6:	42a2      	cmp	r2, r4
 8001fb8:	d1f3      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fba:	464b      	mov	r3, r9
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	d1f0      	bne.n	8001fa2 <__eqdf2+0x5a>
 8001fc0:	e7e2      	b.n	8001f88 <__eqdf2+0x40>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	e7ed      	b.n	8001fa2 <__eqdf2+0x5a>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__gedf2>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4647      	mov	r7, r8
 8001fd0:	46ce      	mov	lr, r9
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	0b1b      	lsrs	r3, r3, #12
 8001fdc:	4d2d      	ldr	r5, [pc, #180]	; (8002094 <__gedf2+0xc8>)
 8001fde:	004a      	lsls	r2, r1, #1
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	0043      	lsls	r3, r0, #1
 8001fe6:	030f      	lsls	r7, r1, #12
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	46b0      	mov	r8, r6
 8001fec:	0b3f      	lsrs	r7, r7, #12
 8001fee:	0d52      	lsrs	r2, r2, #21
 8001ff0:	0fc9      	lsrs	r1, r1, #31
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	0fc0      	lsrs	r0, r0, #31
 8001ff6:	42aa      	cmp	r2, r5
 8001ff8:	d021      	beq.n	800203e <__gedf2+0x72>
 8001ffa:	42ab      	cmp	r3, r5
 8001ffc:	d013      	beq.n	8002026 <__gedf2+0x5a>
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d122      	bne.n	8002048 <__gedf2+0x7c>
 8002002:	433c      	orrs	r4, r7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <__gedf2+0x42>
 8002008:	464d      	mov	r5, r9
 800200a:	432e      	orrs	r6, r5
 800200c:	d022      	beq.n	8002054 <__gedf2+0x88>
 800200e:	2c00      	cmp	r4, #0
 8002010:	d010      	beq.n	8002034 <__gedf2+0x68>
 8002012:	4281      	cmp	r1, r0
 8002014:	d022      	beq.n	800205c <__gedf2+0x90>
 8002016:	2002      	movs	r0, #2
 8002018:	3901      	subs	r1, #1
 800201a:	4008      	ands	r0, r1
 800201c:	3801      	subs	r0, #1
 800201e:	bcc0      	pop	{r6, r7}
 8002020:	46b9      	mov	r9, r7
 8002022:	46b0      	mov	r8, r6
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	464d      	mov	r5, r9
 8002028:	432e      	orrs	r6, r5
 800202a:	d129      	bne.n	8002080 <__gedf2+0xb4>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d1f0      	bne.n	8002012 <__gedf2+0x46>
 8002030:	433c      	orrs	r4, r7
 8002032:	d1ee      	bne.n	8002012 <__gedf2+0x46>
 8002034:	2800      	cmp	r0, #0
 8002036:	d1f2      	bne.n	800201e <__gedf2+0x52>
 8002038:	2001      	movs	r0, #1
 800203a:	4240      	negs	r0, r0
 800203c:	e7ef      	b.n	800201e <__gedf2+0x52>
 800203e:	003d      	movs	r5, r7
 8002040:	4325      	orrs	r5, r4
 8002042:	d11d      	bne.n	8002080 <__gedf2+0xb4>
 8002044:	4293      	cmp	r3, r2
 8002046:	d0ee      	beq.n	8002026 <__gedf2+0x5a>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e2      	bne.n	8002012 <__gedf2+0x46>
 800204c:	464c      	mov	r4, r9
 800204e:	4326      	orrs	r6, r4
 8002050:	d1df      	bne.n	8002012 <__gedf2+0x46>
 8002052:	e7e0      	b.n	8002016 <__gedf2+0x4a>
 8002054:	2000      	movs	r0, #0
 8002056:	2c00      	cmp	r4, #0
 8002058:	d0e1      	beq.n	800201e <__gedf2+0x52>
 800205a:	e7dc      	b.n	8002016 <__gedf2+0x4a>
 800205c:	429a      	cmp	r2, r3
 800205e:	dc0a      	bgt.n	8002076 <__gedf2+0xaa>
 8002060:	dbe8      	blt.n	8002034 <__gedf2+0x68>
 8002062:	454f      	cmp	r7, r9
 8002064:	d8d7      	bhi.n	8002016 <__gedf2+0x4a>
 8002066:	d00e      	beq.n	8002086 <__gedf2+0xba>
 8002068:	2000      	movs	r0, #0
 800206a:	454f      	cmp	r7, r9
 800206c:	d2d7      	bcs.n	800201e <__gedf2+0x52>
 800206e:	2900      	cmp	r1, #0
 8002070:	d0e2      	beq.n	8002038 <__gedf2+0x6c>
 8002072:	0008      	movs	r0, r1
 8002074:	e7d3      	b.n	800201e <__gedf2+0x52>
 8002076:	4243      	negs	r3, r0
 8002078:	4158      	adcs	r0, r3
 800207a:	0040      	lsls	r0, r0, #1
 800207c:	3801      	subs	r0, #1
 800207e:	e7ce      	b.n	800201e <__gedf2+0x52>
 8002080:	2002      	movs	r0, #2
 8002082:	4240      	negs	r0, r0
 8002084:	e7cb      	b.n	800201e <__gedf2+0x52>
 8002086:	45c4      	cmp	ip, r8
 8002088:	d8c5      	bhi.n	8002016 <__gedf2+0x4a>
 800208a:	2000      	movs	r0, #0
 800208c:	45c4      	cmp	ip, r8
 800208e:	d2c6      	bcs.n	800201e <__gedf2+0x52>
 8002090:	e7ed      	b.n	800206e <__gedf2+0xa2>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000007ff 	.word	0x000007ff

08002098 <__ledf2>:
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	4647      	mov	r7, r8
 800209c:	46ce      	mov	lr, r9
 800209e:	0004      	movs	r4, r0
 80020a0:	0018      	movs	r0, r3
 80020a2:	0016      	movs	r6, r2
 80020a4:	031b      	lsls	r3, r3, #12
 80020a6:	0b1b      	lsrs	r3, r3, #12
 80020a8:	4d2c      	ldr	r5, [pc, #176]	; (800215c <__ledf2+0xc4>)
 80020aa:	004a      	lsls	r2, r1, #1
 80020ac:	4699      	mov	r9, r3
 80020ae:	b580      	push	{r7, lr}
 80020b0:	0043      	lsls	r3, r0, #1
 80020b2:	030f      	lsls	r7, r1, #12
 80020b4:	46a4      	mov	ip, r4
 80020b6:	46b0      	mov	r8, r6
 80020b8:	0b3f      	lsrs	r7, r7, #12
 80020ba:	0d52      	lsrs	r2, r2, #21
 80020bc:	0fc9      	lsrs	r1, r1, #31
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	0fc0      	lsrs	r0, r0, #31
 80020c2:	42aa      	cmp	r2, r5
 80020c4:	d00d      	beq.n	80020e2 <__ledf2+0x4a>
 80020c6:	42ab      	cmp	r3, r5
 80020c8:	d010      	beq.n	80020ec <__ledf2+0x54>
 80020ca:	2a00      	cmp	r2, #0
 80020cc:	d127      	bne.n	800211e <__ledf2+0x86>
 80020ce:	433c      	orrs	r4, r7
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <__ledf2+0x60>
 80020d4:	464d      	mov	r5, r9
 80020d6:	432e      	orrs	r6, r5
 80020d8:	d10e      	bne.n	80020f8 <__ledf2+0x60>
 80020da:	2000      	movs	r0, #0
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d015      	beq.n	800210c <__ledf2+0x74>
 80020e0:	e00e      	b.n	8002100 <__ledf2+0x68>
 80020e2:	003d      	movs	r5, r7
 80020e4:	4325      	orrs	r5, r4
 80020e6:	d110      	bne.n	800210a <__ledf2+0x72>
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d118      	bne.n	800211e <__ledf2+0x86>
 80020ec:	464d      	mov	r5, r9
 80020ee:	432e      	orrs	r6, r5
 80020f0:	d10b      	bne.n	800210a <__ledf2+0x72>
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d102      	bne.n	80020fc <__ledf2+0x64>
 80020f6:	433c      	orrs	r4, r7
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d00b      	beq.n	8002114 <__ledf2+0x7c>
 80020fc:	4281      	cmp	r1, r0
 80020fe:	d014      	beq.n	800212a <__ledf2+0x92>
 8002100:	2002      	movs	r0, #2
 8002102:	3901      	subs	r1, #1
 8002104:	4008      	ands	r0, r1
 8002106:	3801      	subs	r0, #1
 8002108:	e000      	b.n	800210c <__ledf2+0x74>
 800210a:	2002      	movs	r0, #2
 800210c:	bcc0      	pop	{r6, r7}
 800210e:	46b9      	mov	r9, r7
 8002110:	46b0      	mov	r8, r6
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002114:	2800      	cmp	r0, #0
 8002116:	d1f9      	bne.n	800210c <__ledf2+0x74>
 8002118:	2001      	movs	r0, #1
 800211a:	4240      	negs	r0, r0
 800211c:	e7f6      	b.n	800210c <__ledf2+0x74>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ec      	bne.n	80020fc <__ledf2+0x64>
 8002122:	464c      	mov	r4, r9
 8002124:	4326      	orrs	r6, r4
 8002126:	d1e9      	bne.n	80020fc <__ledf2+0x64>
 8002128:	e7ea      	b.n	8002100 <__ledf2+0x68>
 800212a:	429a      	cmp	r2, r3
 800212c:	dd04      	ble.n	8002138 <__ledf2+0xa0>
 800212e:	4243      	negs	r3, r0
 8002130:	4158      	adcs	r0, r3
 8002132:	0040      	lsls	r0, r0, #1
 8002134:	3801      	subs	r0, #1
 8002136:	e7e9      	b.n	800210c <__ledf2+0x74>
 8002138:	429a      	cmp	r2, r3
 800213a:	dbeb      	blt.n	8002114 <__ledf2+0x7c>
 800213c:	454f      	cmp	r7, r9
 800213e:	d8df      	bhi.n	8002100 <__ledf2+0x68>
 8002140:	d006      	beq.n	8002150 <__ledf2+0xb8>
 8002142:	2000      	movs	r0, #0
 8002144:	454f      	cmp	r7, r9
 8002146:	d2e1      	bcs.n	800210c <__ledf2+0x74>
 8002148:	2900      	cmp	r1, #0
 800214a:	d0e5      	beq.n	8002118 <__ledf2+0x80>
 800214c:	0008      	movs	r0, r1
 800214e:	e7dd      	b.n	800210c <__ledf2+0x74>
 8002150:	45c4      	cmp	ip, r8
 8002152:	d8d5      	bhi.n	8002100 <__ledf2+0x68>
 8002154:	2000      	movs	r0, #0
 8002156:	45c4      	cmp	ip, r8
 8002158:	d2d8      	bcs.n	800210c <__ledf2+0x74>
 800215a:	e7f5      	b.n	8002148 <__ledf2+0xb0>
 800215c:	000007ff 	.word	0x000007ff

08002160 <__aeabi_dmul>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	4645      	mov	r5, r8
 8002168:	46de      	mov	lr, fp
 800216a:	b5e0      	push	{r5, r6, r7, lr}
 800216c:	4698      	mov	r8, r3
 800216e:	030c      	lsls	r4, r1, #12
 8002170:	004b      	lsls	r3, r1, #1
 8002172:	0006      	movs	r6, r0
 8002174:	4692      	mov	sl, r2
 8002176:	b087      	sub	sp, #28
 8002178:	0b24      	lsrs	r4, r4, #12
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	0fcf      	lsrs	r7, r1, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dmul+0x24>
 8002182:	e15c      	b.n	800243e <__aeabi_dmul+0x2de>
 8002184:	4ad9      	ldr	r2, [pc, #868]	; (80024ec <__aeabi_dmul+0x38c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d100      	bne.n	800218c <__aeabi_dmul+0x2c>
 800218a:	e175      	b.n	8002478 <__aeabi_dmul+0x318>
 800218c:	0f42      	lsrs	r2, r0, #29
 800218e:	00e4      	lsls	r4, r4, #3
 8002190:	4314      	orrs	r4, r2
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	4314      	orrs	r4, r2
 8002198:	4ad5      	ldr	r2, [pc, #852]	; (80024f0 <__aeabi_dmul+0x390>)
 800219a:	00c5      	lsls	r5, r0, #3
 800219c:	4694      	mov	ip, r2
 800219e:	4463      	add	r3, ip
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	4699      	mov	r9, r3
 80021a6:	469b      	mov	fp, r3
 80021a8:	4643      	mov	r3, r8
 80021aa:	4642      	mov	r2, r8
 80021ac:	031e      	lsls	r6, r3, #12
 80021ae:	0fd2      	lsrs	r2, r2, #31
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4650      	mov	r0, sl
 80021b4:	4690      	mov	r8, r2
 80021b6:	0b36      	lsrs	r6, r6, #12
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	d100      	bne.n	80021be <__aeabi_dmul+0x5e>
 80021bc:	e120      	b.n	8002400 <__aeabi_dmul+0x2a0>
 80021be:	4acb      	ldr	r2, [pc, #812]	; (80024ec <__aeabi_dmul+0x38c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x66>
 80021c4:	e162      	b.n	800248c <__aeabi_dmul+0x32c>
 80021c6:	49ca      	ldr	r1, [pc, #808]	; (80024f0 <__aeabi_dmul+0x390>)
 80021c8:	0f42      	lsrs	r2, r0, #29
 80021ca:	468c      	mov	ip, r1
 80021cc:	9900      	ldr	r1, [sp, #0]
 80021ce:	4463      	add	r3, ip
 80021d0:	00f6      	lsls	r6, r6, #3
 80021d2:	468c      	mov	ip, r1
 80021d4:	4316      	orrs	r6, r2
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	449c      	add	ip, r3
 80021da:	0412      	lsls	r2, r2, #16
 80021dc:	4663      	mov	r3, ip
 80021de:	4316      	orrs	r6, r2
 80021e0:	00c2      	lsls	r2, r0, #3
 80021e2:	2000      	movs	r0, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	4643      	mov	r3, r8
 80021ea:	3101      	adds	r1, #1
 80021ec:	468c      	mov	ip, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	407b      	eors	r3, r7
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	290f      	cmp	r1, #15
 80021f6:	d826      	bhi.n	8002246 <__aeabi_dmul+0xe6>
 80021f8:	4bbe      	ldr	r3, [pc, #760]	; (80024f4 <__aeabi_dmul+0x394>)
 80021fa:	0089      	lsls	r1, r1, #2
 80021fc:	5859      	ldr	r1, [r3, r1]
 80021fe:	468f      	mov	pc, r1
 8002200:	4643      	mov	r3, r8
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	0034      	movs	r4, r6
 8002206:	0015      	movs	r5, r2
 8002208:	4683      	mov	fp, r0
 800220a:	465b      	mov	r3, fp
 800220c:	2b02      	cmp	r3, #2
 800220e:	d016      	beq.n	800223e <__aeabi_dmul+0xde>
 8002210:	2b03      	cmp	r3, #3
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0xb6>
 8002214:	e203      	b.n	800261e <__aeabi_dmul+0x4be>
 8002216:	2b01      	cmp	r3, #1
 8002218:	d000      	beq.n	800221c <__aeabi_dmul+0xbc>
 800221a:	e0cd      	b.n	80023b8 <__aeabi_dmul+0x258>
 800221c:	2200      	movs	r2, #0
 800221e:	2400      	movs	r4, #0
 8002220:	2500      	movs	r5, #0
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	0512      	lsls	r2, r2, #20
 8002226:	4322      	orrs	r2, r4
 8002228:	07db      	lsls	r3, r3, #31
 800222a:	431a      	orrs	r2, r3
 800222c:	0028      	movs	r0, r5
 800222e:	0011      	movs	r1, r2
 8002230:	b007      	add	sp, #28
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	46bb      	mov	fp, r7
 8002236:	46b2      	mov	sl, r6
 8002238:	46a9      	mov	r9, r5
 800223a:	46a0      	mov	r8, r4
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223e:	2400      	movs	r4, #0
 8002240:	2500      	movs	r5, #0
 8002242:	4aaa      	ldr	r2, [pc, #680]	; (80024ec <__aeabi_dmul+0x38c>)
 8002244:	e7ed      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002246:	0c28      	lsrs	r0, r5, #16
 8002248:	042d      	lsls	r5, r5, #16
 800224a:	0c2d      	lsrs	r5, r5, #16
 800224c:	002b      	movs	r3, r5
 800224e:	0c11      	lsrs	r1, r2, #16
 8002250:	0412      	lsls	r2, r2, #16
 8002252:	0c12      	lsrs	r2, r2, #16
 8002254:	4353      	muls	r3, r2
 8002256:	4698      	mov	r8, r3
 8002258:	0013      	movs	r3, r2
 800225a:	002f      	movs	r7, r5
 800225c:	4343      	muls	r3, r0
 800225e:	4699      	mov	r9, r3
 8002260:	434f      	muls	r7, r1
 8002262:	444f      	add	r7, r9
 8002264:	46bb      	mov	fp, r7
 8002266:	4647      	mov	r7, r8
 8002268:	000b      	movs	r3, r1
 800226a:	0c3f      	lsrs	r7, r7, #16
 800226c:	46ba      	mov	sl, r7
 800226e:	4343      	muls	r3, r0
 8002270:	44da      	add	sl, fp
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	45d1      	cmp	r9, sl
 8002276:	d904      	bls.n	8002282 <__aeabi_dmul+0x122>
 8002278:	2780      	movs	r7, #128	; 0x80
 800227a:	027f      	lsls	r7, r7, #9
 800227c:	46b9      	mov	r9, r7
 800227e:	444b      	add	r3, r9
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	4653      	mov	r3, sl
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	469b      	mov	fp, r3
 8002288:	4653      	mov	r3, sl
 800228a:	041f      	lsls	r7, r3, #16
 800228c:	4643      	mov	r3, r8
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	4698      	mov	r8, r3
 8002294:	003b      	movs	r3, r7
 8002296:	4443      	add	r3, r8
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	0c33      	lsrs	r3, r6, #16
 800229c:	0436      	lsls	r6, r6, #16
 800229e:	0c36      	lsrs	r6, r6, #16
 80022a0:	4698      	mov	r8, r3
 80022a2:	0033      	movs	r3, r6
 80022a4:	4343      	muls	r3, r0
 80022a6:	4699      	mov	r9, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4343      	muls	r3, r0
 80022ac:	002f      	movs	r7, r5
 80022ae:	469a      	mov	sl, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	4377      	muls	r7, r6
 80022b4:	435d      	muls	r5, r3
 80022b6:	0c38      	lsrs	r0, r7, #16
 80022b8:	444d      	add	r5, r9
 80022ba:	1945      	adds	r5, r0, r5
 80022bc:	45a9      	cmp	r9, r5
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x168>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	4699      	mov	r9, r3
 80022c6:	44ca      	add	sl, r9
 80022c8:	043f      	lsls	r7, r7, #16
 80022ca:	0c28      	lsrs	r0, r5, #16
 80022cc:	0c3f      	lsrs	r7, r7, #16
 80022ce:	042d      	lsls	r5, r5, #16
 80022d0:	19ed      	adds	r5, r5, r7
 80022d2:	0c27      	lsrs	r7, r4, #16
 80022d4:	0424      	lsls	r4, r4, #16
 80022d6:	0c24      	lsrs	r4, r4, #16
 80022d8:	0003      	movs	r3, r0
 80022da:	0020      	movs	r0, r4
 80022dc:	4350      	muls	r0, r2
 80022de:	437a      	muls	r2, r7
 80022e0:	4691      	mov	r9, r2
 80022e2:	003a      	movs	r2, r7
 80022e4:	4453      	add	r3, sl
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	0c03      	lsrs	r3, r0, #16
 80022ea:	469a      	mov	sl, r3
 80022ec:	434a      	muls	r2, r1
 80022ee:	4361      	muls	r1, r4
 80022f0:	4449      	add	r1, r9
 80022f2:	4451      	add	r1, sl
 80022f4:	44ab      	add	fp, r5
 80022f6:	4589      	cmp	r9, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x1a2>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	4699      	mov	r9, r3
 8002300:	444a      	add	r2, r9
 8002302:	0400      	lsls	r0, r0, #16
 8002304:	0c0b      	lsrs	r3, r1, #16
 8002306:	0c00      	lsrs	r0, r0, #16
 8002308:	0409      	lsls	r1, r1, #16
 800230a:	1809      	adds	r1, r1, r0
 800230c:	0020      	movs	r0, r4
 800230e:	4699      	mov	r9, r3
 8002310:	4643      	mov	r3, r8
 8002312:	4370      	muls	r0, r6
 8002314:	435c      	muls	r4, r3
 8002316:	437e      	muls	r6, r7
 8002318:	435f      	muls	r7, r3
 800231a:	0c03      	lsrs	r3, r0, #16
 800231c:	4698      	mov	r8, r3
 800231e:	19a4      	adds	r4, r4, r6
 8002320:	4444      	add	r4, r8
 8002322:	444a      	add	r2, r9
 8002324:	9703      	str	r7, [sp, #12]
 8002326:	42a6      	cmp	r6, r4
 8002328:	d904      	bls.n	8002334 <__aeabi_dmul+0x1d4>
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	4698      	mov	r8, r3
 8002330:	4447      	add	r7, r8
 8002332:	9703      	str	r7, [sp, #12]
 8002334:	0423      	lsls	r3, r4, #16
 8002336:	9e02      	ldr	r6, [sp, #8]
 8002338:	469a      	mov	sl, r3
 800233a:	9b05      	ldr	r3, [sp, #20]
 800233c:	445e      	add	r6, fp
 800233e:	4698      	mov	r8, r3
 8002340:	42ae      	cmp	r6, r5
 8002342:	41ad      	sbcs	r5, r5
 8002344:	1876      	adds	r6, r6, r1
 8002346:	428e      	cmp	r6, r1
 8002348:	4189      	sbcs	r1, r1
 800234a:	0400      	lsls	r0, r0, #16
 800234c:	0c00      	lsrs	r0, r0, #16
 800234e:	4450      	add	r0, sl
 8002350:	4440      	add	r0, r8
 8002352:	426d      	negs	r5, r5
 8002354:	1947      	adds	r7, r0, r5
 8002356:	46b8      	mov	r8, r7
 8002358:	4693      	mov	fp, r2
 800235a:	4249      	negs	r1, r1
 800235c:	4689      	mov	r9, r1
 800235e:	44c3      	add	fp, r8
 8002360:	44d9      	add	r9, fp
 8002362:	4298      	cmp	r0, r3
 8002364:	4180      	sbcs	r0, r0
 8002366:	45a8      	cmp	r8, r5
 8002368:	41ad      	sbcs	r5, r5
 800236a:	4593      	cmp	fp, r2
 800236c:	4192      	sbcs	r2, r2
 800236e:	4589      	cmp	r9, r1
 8002370:	4189      	sbcs	r1, r1
 8002372:	426d      	negs	r5, r5
 8002374:	4240      	negs	r0, r0
 8002376:	4328      	orrs	r0, r5
 8002378:	0c24      	lsrs	r4, r4, #16
 800237a:	4252      	negs	r2, r2
 800237c:	4249      	negs	r1, r1
 800237e:	430a      	orrs	r2, r1
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	1900      	adds	r0, r0, r4
 8002384:	1880      	adds	r0, r0, r2
 8002386:	18c7      	adds	r7, r0, r3
 8002388:	464b      	mov	r3, r9
 800238a:	0ddc      	lsrs	r4, r3, #23
 800238c:	9b04      	ldr	r3, [sp, #16]
 800238e:	0275      	lsls	r5, r6, #9
 8002390:	431d      	orrs	r5, r3
 8002392:	1e6a      	subs	r2, r5, #1
 8002394:	4195      	sbcs	r5, r2
 8002396:	464b      	mov	r3, r9
 8002398:	0df6      	lsrs	r6, r6, #23
 800239a:	027f      	lsls	r7, r7, #9
 800239c:	4335      	orrs	r5, r6
 800239e:	025a      	lsls	r2, r3, #9
 80023a0:	433c      	orrs	r4, r7
 80023a2:	4315      	orrs	r5, r2
 80023a4:	01fb      	lsls	r3, r7, #7
 80023a6:	d400      	bmi.n	80023aa <__aeabi_dmul+0x24a>
 80023a8:	e11c      	b.n	80025e4 <__aeabi_dmul+0x484>
 80023aa:	2101      	movs	r1, #1
 80023ac:	086a      	lsrs	r2, r5, #1
 80023ae:	400d      	ands	r5, r1
 80023b0:	4315      	orrs	r5, r2
 80023b2:	07e2      	lsls	r2, r4, #31
 80023b4:	4315      	orrs	r5, r2
 80023b6:	0864      	lsrs	r4, r4, #1
 80023b8:	494f      	ldr	r1, [pc, #316]	; (80024f8 <__aeabi_dmul+0x398>)
 80023ba:	4461      	add	r1, ip
 80023bc:	2900      	cmp	r1, #0
 80023be:	dc00      	bgt.n	80023c2 <__aeabi_dmul+0x262>
 80023c0:	e0b0      	b.n	8002524 <__aeabi_dmul+0x3c4>
 80023c2:	076b      	lsls	r3, r5, #29
 80023c4:	d009      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023c6:	220f      	movs	r2, #15
 80023c8:	402a      	ands	r2, r5
 80023ca:	2a04      	cmp	r2, #4
 80023cc:	d005      	beq.n	80023da <__aeabi_dmul+0x27a>
 80023ce:	1d2a      	adds	r2, r5, #4
 80023d0:	42aa      	cmp	r2, r5
 80023d2:	41ad      	sbcs	r5, r5
 80023d4:	426d      	negs	r5, r5
 80023d6:	1964      	adds	r4, r4, r5
 80023d8:	0015      	movs	r5, r2
 80023da:	01e3      	lsls	r3, r4, #7
 80023dc:	d504      	bpl.n	80023e8 <__aeabi_dmul+0x288>
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	4a46      	ldr	r2, [pc, #280]	; (80024fc <__aeabi_dmul+0x39c>)
 80023e2:	00c9      	lsls	r1, r1, #3
 80023e4:	4014      	ands	r4, r2
 80023e6:	4461      	add	r1, ip
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <__aeabi_dmul+0x3a0>)
 80023ea:	4291      	cmp	r1, r2
 80023ec:	dd00      	ble.n	80023f0 <__aeabi_dmul+0x290>
 80023ee:	e726      	b.n	800223e <__aeabi_dmul+0xde>
 80023f0:	0762      	lsls	r2, r4, #29
 80023f2:	08ed      	lsrs	r5, r5, #3
 80023f4:	0264      	lsls	r4, r4, #9
 80023f6:	0549      	lsls	r1, r1, #21
 80023f8:	4315      	orrs	r5, r2
 80023fa:	0b24      	lsrs	r4, r4, #12
 80023fc:	0d4a      	lsrs	r2, r1, #21
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002400:	4652      	mov	r2, sl
 8002402:	4332      	orrs	r2, r6
 8002404:	d100      	bne.n	8002408 <__aeabi_dmul+0x2a8>
 8002406:	e07f      	b.n	8002508 <__aeabi_dmul+0x3a8>
 8002408:	2e00      	cmp	r6, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dmul+0x2ae>
 800240c:	e0dc      	b.n	80025c8 <__aeabi_dmul+0x468>
 800240e:	0030      	movs	r0, r6
 8002410:	f000 fe1e 	bl	8003050 <__clzsi2>
 8002414:	0002      	movs	r2, r0
 8002416:	3a0b      	subs	r2, #11
 8002418:	231d      	movs	r3, #29
 800241a:	0001      	movs	r1, r0
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	4652      	mov	r2, sl
 8002420:	3908      	subs	r1, #8
 8002422:	40da      	lsrs	r2, r3
 8002424:	408e      	lsls	r6, r1
 8002426:	4316      	orrs	r6, r2
 8002428:	4652      	mov	r2, sl
 800242a:	408a      	lsls	r2, r1
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	4935      	ldr	r1, [pc, #212]	; (8002504 <__aeabi_dmul+0x3a4>)
 8002430:	1a18      	subs	r0, r3, r0
 8002432:	0003      	movs	r3, r0
 8002434:	468c      	mov	ip, r1
 8002436:	4463      	add	r3, ip
 8002438:	2000      	movs	r0, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	e6d3      	b.n	80021e6 <__aeabi_dmul+0x86>
 800243e:	0025      	movs	r5, r4
 8002440:	4305      	orrs	r5, r0
 8002442:	d04a      	beq.n	80024da <__aeabi_dmul+0x37a>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d100      	bne.n	800244a <__aeabi_dmul+0x2ea>
 8002448:	e0b0      	b.n	80025ac <__aeabi_dmul+0x44c>
 800244a:	0020      	movs	r0, r4
 800244c:	f000 fe00 	bl	8003050 <__clzsi2>
 8002450:	0001      	movs	r1, r0
 8002452:	0002      	movs	r2, r0
 8002454:	390b      	subs	r1, #11
 8002456:	231d      	movs	r3, #29
 8002458:	0010      	movs	r0, r2
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	0031      	movs	r1, r6
 800245e:	0035      	movs	r5, r6
 8002460:	3808      	subs	r0, #8
 8002462:	4084      	lsls	r4, r0
 8002464:	40d9      	lsrs	r1, r3
 8002466:	4085      	lsls	r5, r0
 8002468:	430c      	orrs	r4, r1
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <__aeabi_dmul+0x3a4>)
 800246c:	1a83      	subs	r3, r0, r2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	4699      	mov	r9, r3
 8002474:	469b      	mov	fp, r3
 8002476:	e697      	b.n	80021a8 <__aeabi_dmul+0x48>
 8002478:	0005      	movs	r5, r0
 800247a:	4325      	orrs	r5, r4
 800247c:	d126      	bne.n	80024cc <__aeabi_dmul+0x36c>
 800247e:	2208      	movs	r2, #8
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	2400      	movs	r4, #0
 8002486:	4691      	mov	r9, r2
 8002488:	469b      	mov	fp, r3
 800248a:	e68d      	b.n	80021a8 <__aeabi_dmul+0x48>
 800248c:	4652      	mov	r2, sl
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	4332      	orrs	r2, r6
 8002492:	d110      	bne.n	80024b6 <__aeabi_dmul+0x356>
 8002494:	4915      	ldr	r1, [pc, #84]	; (80024ec <__aeabi_dmul+0x38c>)
 8002496:	2600      	movs	r6, #0
 8002498:	468c      	mov	ip, r1
 800249a:	4463      	add	r3, ip
 800249c:	4649      	mov	r1, r9
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2302      	movs	r3, #2
 80024a2:	4319      	orrs	r1, r3
 80024a4:	4689      	mov	r9, r1
 80024a6:	2002      	movs	r0, #2
 80024a8:	e69d      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024aa:	465b      	mov	r3, fp
 80024ac:	9701      	str	r7, [sp, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d000      	beq.n	80024b4 <__aeabi_dmul+0x354>
 80024b2:	e6ad      	b.n	8002210 <__aeabi_dmul+0xb0>
 80024b4:	e6c3      	b.n	800223e <__aeabi_dmul+0xde>
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <__aeabi_dmul+0x38c>)
 80024b8:	2003      	movs	r0, #3
 80024ba:	4694      	mov	ip, r2
 80024bc:	4463      	add	r3, ip
 80024be:	464a      	mov	r2, r9
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2303      	movs	r3, #3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	4652      	mov	r2, sl
 80024ca:	e68c      	b.n	80021e6 <__aeabi_dmul+0x86>
 80024cc:	220c      	movs	r2, #12
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2303      	movs	r3, #3
 80024d2:	0005      	movs	r5, r0
 80024d4:	4691      	mov	r9, r2
 80024d6:	469b      	mov	fp, r3
 80024d8:	e666      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024da:	2304      	movs	r3, #4
 80024dc:	4699      	mov	r9, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	2400      	movs	r4, #0
 80024e6:	469b      	mov	fp, r3
 80024e8:	e65e      	b.n	80021a8 <__aeabi_dmul+0x48>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000007ff 	.word	0x000007ff
 80024f0:	fffffc01 	.word	0xfffffc01
 80024f4:	08018698 	.word	0x08018698
 80024f8:	000003ff 	.word	0x000003ff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	000007fe 	.word	0x000007fe
 8002504:	fffffc0d 	.word	0xfffffc0d
 8002508:	4649      	mov	r1, r9
 800250a:	2301      	movs	r3, #1
 800250c:	4319      	orrs	r1, r3
 800250e:	4689      	mov	r9, r1
 8002510:	2600      	movs	r6, #0
 8002512:	2001      	movs	r0, #1
 8002514:	e667      	b.n	80021e6 <__aeabi_dmul+0x86>
 8002516:	2300      	movs	r3, #0
 8002518:	2480      	movs	r4, #128	; 0x80
 800251a:	2500      	movs	r5, #0
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <__aeabi_dmul+0x4cc>)
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	0324      	lsls	r4, r4, #12
 8002522:	e67e      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002524:	2001      	movs	r0, #1
 8002526:	1a40      	subs	r0, r0, r1
 8002528:	2838      	cmp	r0, #56	; 0x38
 800252a:	dd00      	ble.n	800252e <__aeabi_dmul+0x3ce>
 800252c:	e676      	b.n	800221c <__aeabi_dmul+0xbc>
 800252e:	281f      	cmp	r0, #31
 8002530:	dd5b      	ble.n	80025ea <__aeabi_dmul+0x48a>
 8002532:	221f      	movs	r2, #31
 8002534:	0023      	movs	r3, r4
 8002536:	4252      	negs	r2, r2
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	0019      	movs	r1, r3
 800253e:	2820      	cmp	r0, #32
 8002540:	d003      	beq.n	800254a <__aeabi_dmul+0x3ea>
 8002542:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <__aeabi_dmul+0x4d0>)
 8002544:	4462      	add	r2, ip
 8002546:	4094      	lsls	r4, r2
 8002548:	4325      	orrs	r5, r4
 800254a:	1e6a      	subs	r2, r5, #1
 800254c:	4195      	sbcs	r5, r2
 800254e:	002a      	movs	r2, r5
 8002550:	430a      	orrs	r2, r1
 8002552:	2107      	movs	r1, #7
 8002554:	000d      	movs	r5, r1
 8002556:	2400      	movs	r4, #0
 8002558:	4015      	ands	r5, r2
 800255a:	4211      	tst	r1, r2
 800255c:	d05b      	beq.n	8002616 <__aeabi_dmul+0x4b6>
 800255e:	210f      	movs	r1, #15
 8002560:	2400      	movs	r4, #0
 8002562:	4011      	ands	r1, r2
 8002564:	2904      	cmp	r1, #4
 8002566:	d053      	beq.n	8002610 <__aeabi_dmul+0x4b0>
 8002568:	1d11      	adds	r1, r2, #4
 800256a:	4291      	cmp	r1, r2
 800256c:	4192      	sbcs	r2, r2
 800256e:	4252      	negs	r2, r2
 8002570:	18a4      	adds	r4, r4, r2
 8002572:	000a      	movs	r2, r1
 8002574:	0223      	lsls	r3, r4, #8
 8002576:	d54b      	bpl.n	8002610 <__aeabi_dmul+0x4b0>
 8002578:	2201      	movs	r2, #1
 800257a:	2400      	movs	r4, #0
 800257c:	2500      	movs	r5, #0
 800257e:	e650      	b.n	8002222 <__aeabi_dmul+0xc2>
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	031b      	lsls	r3, r3, #12
 8002584:	421c      	tst	r4, r3
 8002586:	d009      	beq.n	800259c <__aeabi_dmul+0x43c>
 8002588:	421e      	tst	r6, r3
 800258a:	d107      	bne.n	800259c <__aeabi_dmul+0x43c>
 800258c:	4333      	orrs	r3, r6
 800258e:	031c      	lsls	r4, r3, #12
 8002590:	4643      	mov	r3, r8
 8002592:	0015      	movs	r5, r2
 8002594:	0b24      	lsrs	r4, r4, #12
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <__aeabi_dmul+0x4cc>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	e642      	b.n	8002222 <__aeabi_dmul+0xc2>
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0312      	lsls	r2, r2, #12
 80025a0:	4314      	orrs	r4, r2
 80025a2:	0324      	lsls	r4, r4, #12
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <__aeabi_dmul+0x4cc>)
 80025a6:	0b24      	lsrs	r4, r4, #12
 80025a8:	9701      	str	r7, [sp, #4]
 80025aa:	e63a      	b.n	8002222 <__aeabi_dmul+0xc2>
 80025ac:	f000 fd50 	bl	8003050 <__clzsi2>
 80025b0:	0001      	movs	r1, r0
 80025b2:	0002      	movs	r2, r0
 80025b4:	3115      	adds	r1, #21
 80025b6:	3220      	adds	r2, #32
 80025b8:	291c      	cmp	r1, #28
 80025ba:	dc00      	bgt.n	80025be <__aeabi_dmul+0x45e>
 80025bc:	e74b      	b.n	8002456 <__aeabi_dmul+0x2f6>
 80025be:	0034      	movs	r4, r6
 80025c0:	3808      	subs	r0, #8
 80025c2:	2500      	movs	r5, #0
 80025c4:	4084      	lsls	r4, r0
 80025c6:	e750      	b.n	800246a <__aeabi_dmul+0x30a>
 80025c8:	f000 fd42 	bl	8003050 <__clzsi2>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	3215      	adds	r2, #21
 80025d2:	3020      	adds	r0, #32
 80025d4:	2a1c      	cmp	r2, #28
 80025d6:	dc00      	bgt.n	80025da <__aeabi_dmul+0x47a>
 80025d8:	e71e      	b.n	8002418 <__aeabi_dmul+0x2b8>
 80025da:	4656      	mov	r6, sl
 80025dc:	3b08      	subs	r3, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	409e      	lsls	r6, r3
 80025e2:	e723      	b.n	800242c <__aeabi_dmul+0x2cc>
 80025e4:	9b00      	ldr	r3, [sp, #0]
 80025e6:	469c      	mov	ip, r3
 80025e8:	e6e6      	b.n	80023b8 <__aeabi_dmul+0x258>
 80025ea:	4912      	ldr	r1, [pc, #72]	; (8002634 <__aeabi_dmul+0x4d4>)
 80025ec:	0022      	movs	r2, r4
 80025ee:	4461      	add	r1, ip
 80025f0:	002e      	movs	r6, r5
 80025f2:	408d      	lsls	r5, r1
 80025f4:	408a      	lsls	r2, r1
 80025f6:	40c6      	lsrs	r6, r0
 80025f8:	1e69      	subs	r1, r5, #1
 80025fa:	418d      	sbcs	r5, r1
 80025fc:	4332      	orrs	r2, r6
 80025fe:	432a      	orrs	r2, r5
 8002600:	40c4      	lsrs	r4, r0
 8002602:	0753      	lsls	r3, r2, #29
 8002604:	d0b6      	beq.n	8002574 <__aeabi_dmul+0x414>
 8002606:	210f      	movs	r1, #15
 8002608:	4011      	ands	r1, r2
 800260a:	2904      	cmp	r1, #4
 800260c:	d1ac      	bne.n	8002568 <__aeabi_dmul+0x408>
 800260e:	e7b1      	b.n	8002574 <__aeabi_dmul+0x414>
 8002610:	0765      	lsls	r5, r4, #29
 8002612:	0264      	lsls	r4, r4, #9
 8002614:	0b24      	lsrs	r4, r4, #12
 8002616:	08d2      	lsrs	r2, r2, #3
 8002618:	4315      	orrs	r5, r2
 800261a:	2200      	movs	r2, #0
 800261c:	e601      	b.n	8002222 <__aeabi_dmul+0xc2>
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0312      	lsls	r2, r2, #12
 8002622:	4314      	orrs	r4, r2
 8002624:	0324      	lsls	r4, r4, #12
 8002626:	4a01      	ldr	r2, [pc, #4]	; (800262c <__aeabi_dmul+0x4cc>)
 8002628:	0b24      	lsrs	r4, r4, #12
 800262a:	e5fa      	b.n	8002222 <__aeabi_dmul+0xc2>
 800262c:	000007ff 	.word	0x000007ff
 8002630:	0000043e 	.word	0x0000043e
 8002634:	0000041e 	.word	0x0000041e

08002638 <__aeabi_dsub>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	4657      	mov	r7, sl
 800263c:	464e      	mov	r6, r9
 800263e:	4645      	mov	r5, r8
 8002640:	46de      	mov	lr, fp
 8002642:	b5e0      	push	{r5, r6, r7, lr}
 8002644:	001e      	movs	r6, r3
 8002646:	0017      	movs	r7, r2
 8002648:	004a      	lsls	r2, r1, #1
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0d52      	lsrs	r2, r2, #21
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	4690      	mov	r8, r2
 8002652:	0f42      	lsrs	r2, r0, #29
 8002654:	431a      	orrs	r2, r3
 8002656:	0fcd      	lsrs	r5, r1, #31
 8002658:	4ccd      	ldr	r4, [pc, #820]	; (8002990 <__aeabi_dsub+0x358>)
 800265a:	0331      	lsls	r1, r6, #12
 800265c:	00c3      	lsls	r3, r0, #3
 800265e:	4694      	mov	ip, r2
 8002660:	0070      	lsls	r0, r6, #1
 8002662:	0f7a      	lsrs	r2, r7, #29
 8002664:	0a49      	lsrs	r1, r1, #9
 8002666:	00ff      	lsls	r7, r7, #3
 8002668:	469a      	mov	sl, r3
 800266a:	46b9      	mov	r9, r7
 800266c:	0d40      	lsrs	r0, r0, #21
 800266e:	0ff6      	lsrs	r6, r6, #31
 8002670:	4311      	orrs	r1, r2
 8002672:	42a0      	cmp	r0, r4
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x40>
 8002676:	e0b1      	b.n	80027dc <__aeabi_dsub+0x1a4>
 8002678:	2201      	movs	r2, #1
 800267a:	4056      	eors	r6, r2
 800267c:	46b3      	mov	fp, r6
 800267e:	42b5      	cmp	r5, r6
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x4c>
 8002682:	e088      	b.n	8002796 <__aeabi_dsub+0x15e>
 8002684:	4642      	mov	r2, r8
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	2a00      	cmp	r2, #0
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x56>
 800268c:	e0ae      	b.n	80027ec <__aeabi_dsub+0x1b4>
 800268e:	2800      	cmp	r0, #0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x5c>
 8002692:	e0c1      	b.n	8002818 <__aeabi_dsub+0x1e0>
 8002694:	48be      	ldr	r0, [pc, #760]	; (8002990 <__aeabi_dsub+0x358>)
 8002696:	4580      	cmp	r8, r0
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x64>
 800269a:	e151      	b.n	8002940 <__aeabi_dsub+0x308>
 800269c:	2080      	movs	r0, #128	; 0x80
 800269e:	0400      	lsls	r0, r0, #16
 80026a0:	4301      	orrs	r1, r0
 80026a2:	2a38      	cmp	r2, #56	; 0x38
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dsub+0x70>
 80026a6:	e17b      	b.n	80029a0 <__aeabi_dsub+0x368>
 80026a8:	2a1f      	cmp	r2, #31
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dsub+0x76>
 80026ac:	e1ee      	b.n	8002a8c <__aeabi_dsub+0x454>
 80026ae:	2020      	movs	r0, #32
 80026b0:	003e      	movs	r6, r7
 80026b2:	1a80      	subs	r0, r0, r2
 80026b4:	000c      	movs	r4, r1
 80026b6:	40d6      	lsrs	r6, r2
 80026b8:	40d1      	lsrs	r1, r2
 80026ba:	4087      	lsls	r7, r0
 80026bc:	4662      	mov	r2, ip
 80026be:	4084      	lsls	r4, r0
 80026c0:	1a52      	subs	r2, r2, r1
 80026c2:	1e78      	subs	r0, r7, #1
 80026c4:	4187      	sbcs	r7, r0
 80026c6:	4694      	mov	ip, r2
 80026c8:	4334      	orrs	r4, r6
 80026ca:	4327      	orrs	r7, r4
 80026cc:	1bdc      	subs	r4, r3, r7
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	419b      	sbcs	r3, r3
 80026d2:	4662      	mov	r2, ip
 80026d4:	425b      	negs	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4699      	mov	r9, r3
 80026da:	464b      	mov	r3, r9
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0xaa>
 80026e0:	e118      	b.n	8002914 <__aeabi_dsub+0x2dc>
 80026e2:	464b      	mov	r3, r9
 80026e4:	0258      	lsls	r0, r3, #9
 80026e6:	0a43      	lsrs	r3, r0, #9
 80026e8:	4699      	mov	r9, r3
 80026ea:	464b      	mov	r3, r9
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0xba>
 80026f0:	e137      	b.n	8002962 <__aeabi_dsub+0x32a>
 80026f2:	4648      	mov	r0, r9
 80026f4:	f000 fcac 	bl	8003050 <__clzsi2>
 80026f8:	0001      	movs	r1, r0
 80026fa:	3908      	subs	r1, #8
 80026fc:	2320      	movs	r3, #32
 80026fe:	0022      	movs	r2, r4
 8002700:	4648      	mov	r0, r9
 8002702:	1a5b      	subs	r3, r3, r1
 8002704:	40da      	lsrs	r2, r3
 8002706:	4088      	lsls	r0, r1
 8002708:	408c      	lsls	r4, r1
 800270a:	4643      	mov	r3, r8
 800270c:	4310      	orrs	r0, r2
 800270e:	4588      	cmp	r8, r1
 8002710:	dd00      	ble.n	8002714 <__aeabi_dsub+0xdc>
 8002712:	e136      	b.n	8002982 <__aeabi_dsub+0x34a>
 8002714:	1ac9      	subs	r1, r1, r3
 8002716:	1c4b      	adds	r3, r1, #1
 8002718:	2b1f      	cmp	r3, #31
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0xe6>
 800271c:	e0ea      	b.n	80028f4 <__aeabi_dsub+0x2bc>
 800271e:	2220      	movs	r2, #32
 8002720:	0026      	movs	r6, r4
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	0001      	movs	r1, r0
 8002726:	4094      	lsls	r4, r2
 8002728:	40de      	lsrs	r6, r3
 800272a:	40d8      	lsrs	r0, r3
 800272c:	2300      	movs	r3, #0
 800272e:	4091      	lsls	r1, r2
 8002730:	1e62      	subs	r2, r4, #1
 8002732:	4194      	sbcs	r4, r2
 8002734:	4681      	mov	r9, r0
 8002736:	4698      	mov	r8, r3
 8002738:	4331      	orrs	r1, r6
 800273a:	430c      	orrs	r4, r1
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	d009      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002740:	230f      	movs	r3, #15
 8002742:	4023      	ands	r3, r4
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <__aeabi_dsub+0x11c>
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	42a3      	cmp	r3, r4
 800274c:	41a4      	sbcs	r4, r4
 800274e:	4264      	negs	r4, r4
 8002750:	44a1      	add	r9, r4
 8002752:	001c      	movs	r4, r3
 8002754:	464b      	mov	r3, r9
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	d400      	bmi.n	800275c <__aeabi_dsub+0x124>
 800275a:	e0de      	b.n	800291a <__aeabi_dsub+0x2e2>
 800275c:	4641      	mov	r1, r8
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <__aeabi_dsub+0x358>)
 8002760:	3101      	adds	r1, #1
 8002762:	4299      	cmp	r1, r3
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x130>
 8002766:	e0e7      	b.n	8002938 <__aeabi_dsub+0x300>
 8002768:	464b      	mov	r3, r9
 800276a:	488a      	ldr	r0, [pc, #552]	; (8002994 <__aeabi_dsub+0x35c>)
 800276c:	08e4      	lsrs	r4, r4, #3
 800276e:	4003      	ands	r3, r0
 8002770:	0018      	movs	r0, r3
 8002772:	0549      	lsls	r1, r1, #21
 8002774:	075b      	lsls	r3, r3, #29
 8002776:	0240      	lsls	r0, r0, #9
 8002778:	4323      	orrs	r3, r4
 800277a:	0d4a      	lsrs	r2, r1, #21
 800277c:	0b04      	lsrs	r4, r0, #12
 800277e:	0512      	lsls	r2, r2, #20
 8002780:	07ed      	lsls	r5, r5, #31
 8002782:	4322      	orrs	r2, r4
 8002784:	432a      	orrs	r2, r5
 8002786:	0018      	movs	r0, r3
 8002788:	0011      	movs	r1, r2
 800278a:	bcf0      	pop	{r4, r5, r6, r7}
 800278c:	46bb      	mov	fp, r7
 800278e:	46b2      	mov	sl, r6
 8002790:	46a9      	mov	r9, r5
 8002792:	46a0      	mov	r8, r4
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002796:	4642      	mov	r2, r8
 8002798:	1a12      	subs	r2, r2, r0
 800279a:	2a00      	cmp	r2, #0
 800279c:	dd52      	ble.n	8002844 <__aeabi_dsub+0x20c>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x16c>
 80027a2:	e09c      	b.n	80028de <__aeabi_dsub+0x2a6>
 80027a4:	45a0      	cmp	r8, r4
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x172>
 80027a8:	e0ca      	b.n	8002940 <__aeabi_dsub+0x308>
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	0400      	lsls	r0, r0, #16
 80027ae:	4301      	orrs	r1, r0
 80027b0:	2a38      	cmp	r2, #56	; 0x38
 80027b2:	dd00      	ble.n	80027b6 <__aeabi_dsub+0x17e>
 80027b4:	e149      	b.n	8002a4a <__aeabi_dsub+0x412>
 80027b6:	2a1f      	cmp	r2, #31
 80027b8:	dc00      	bgt.n	80027bc <__aeabi_dsub+0x184>
 80027ba:	e197      	b.n	8002aec <__aeabi_dsub+0x4b4>
 80027bc:	0010      	movs	r0, r2
 80027be:	000e      	movs	r6, r1
 80027c0:	3820      	subs	r0, #32
 80027c2:	40c6      	lsrs	r6, r0
 80027c4:	2a20      	cmp	r2, #32
 80027c6:	d004      	beq.n	80027d2 <__aeabi_dsub+0x19a>
 80027c8:	2040      	movs	r0, #64	; 0x40
 80027ca:	1a82      	subs	r2, r0, r2
 80027cc:	4091      	lsls	r1, r2
 80027ce:	430f      	orrs	r7, r1
 80027d0:	46b9      	mov	r9, r7
 80027d2:	464c      	mov	r4, r9
 80027d4:	1e62      	subs	r2, r4, #1
 80027d6:	4194      	sbcs	r4, r2
 80027d8:	4334      	orrs	r4, r6
 80027da:	e13a      	b.n	8002a52 <__aeabi_dsub+0x41a>
 80027dc:	000a      	movs	r2, r1
 80027de:	433a      	orrs	r2, r7
 80027e0:	d028      	beq.n	8002834 <__aeabi_dsub+0x1fc>
 80027e2:	46b3      	mov	fp, r6
 80027e4:	42b5      	cmp	r5, r6
 80027e6:	d02b      	beq.n	8002840 <__aeabi_dsub+0x208>
 80027e8:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <__aeabi_dsub+0x360>)
 80027ea:	4442      	add	r2, r8
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d05d      	beq.n	80028ac <__aeabi_dsub+0x274>
 80027f0:	4642      	mov	r2, r8
 80027f2:	4644      	mov	r4, r8
 80027f4:	1a82      	subs	r2, r0, r2
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	d000      	beq.n	80027fc <__aeabi_dsub+0x1c4>
 80027fa:	e0f5      	b.n	80029e8 <__aeabi_dsub+0x3b0>
 80027fc:	4665      	mov	r5, ip
 80027fe:	431d      	orrs	r5, r3
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x1cc>
 8002802:	e19c      	b.n	8002b3e <__aeabi_dsub+0x506>
 8002804:	1e55      	subs	r5, r2, #1
 8002806:	2a01      	cmp	r2, #1
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x1d4>
 800280a:	e1fb      	b.n	8002c04 <__aeabi_dsub+0x5cc>
 800280c:	4c60      	ldr	r4, [pc, #384]	; (8002990 <__aeabi_dsub+0x358>)
 800280e:	42a2      	cmp	r2, r4
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x1dc>
 8002812:	e1bd      	b.n	8002b90 <__aeabi_dsub+0x558>
 8002814:	002a      	movs	r2, r5
 8002816:	e0f0      	b.n	80029fa <__aeabi_dsub+0x3c2>
 8002818:	0008      	movs	r0, r1
 800281a:	4338      	orrs	r0, r7
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x1e8>
 800281e:	e0c3      	b.n	80029a8 <__aeabi_dsub+0x370>
 8002820:	1e50      	subs	r0, r2, #1
 8002822:	2a01      	cmp	r2, #1
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x1f0>
 8002826:	e1a8      	b.n	8002b7a <__aeabi_dsub+0x542>
 8002828:	4c59      	ldr	r4, [pc, #356]	; (8002990 <__aeabi_dsub+0x358>)
 800282a:	42a2      	cmp	r2, r4
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x1f8>
 800282e:	e087      	b.n	8002940 <__aeabi_dsub+0x308>
 8002830:	0002      	movs	r2, r0
 8002832:	e736      	b.n	80026a2 <__aeabi_dsub+0x6a>
 8002834:	2201      	movs	r2, #1
 8002836:	4056      	eors	r6, r2
 8002838:	46b3      	mov	fp, r6
 800283a:	42b5      	cmp	r5, r6
 800283c:	d000      	beq.n	8002840 <__aeabi_dsub+0x208>
 800283e:	e721      	b.n	8002684 <__aeabi_dsub+0x4c>
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <__aeabi_dsub+0x360>)
 8002842:	4442      	add	r2, r8
 8002844:	2a00      	cmp	r2, #0
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x212>
 8002848:	e0b5      	b.n	80029b6 <__aeabi_dsub+0x37e>
 800284a:	4642      	mov	r2, r8
 800284c:	4644      	mov	r4, r8
 800284e:	1a82      	subs	r2, r0, r2
 8002850:	2c00      	cmp	r4, #0
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x21e>
 8002854:	e138      	b.n	8002ac8 <__aeabi_dsub+0x490>
 8002856:	4e4e      	ldr	r6, [pc, #312]	; (8002990 <__aeabi_dsub+0x358>)
 8002858:	42b0      	cmp	r0, r6
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x226>
 800285c:	e1de      	b.n	8002c1c <__aeabi_dsub+0x5e4>
 800285e:	2680      	movs	r6, #128	; 0x80
 8002860:	4664      	mov	r4, ip
 8002862:	0436      	lsls	r6, r6, #16
 8002864:	4334      	orrs	r4, r6
 8002866:	46a4      	mov	ip, r4
 8002868:	2a38      	cmp	r2, #56	; 0x38
 800286a:	dd00      	ble.n	800286e <__aeabi_dsub+0x236>
 800286c:	e196      	b.n	8002b9c <__aeabi_dsub+0x564>
 800286e:	2a1f      	cmp	r2, #31
 8002870:	dd00      	ble.n	8002874 <__aeabi_dsub+0x23c>
 8002872:	e224      	b.n	8002cbe <__aeabi_dsub+0x686>
 8002874:	2620      	movs	r6, #32
 8002876:	1ab4      	subs	r4, r6, r2
 8002878:	46a2      	mov	sl, r4
 800287a:	4664      	mov	r4, ip
 800287c:	4656      	mov	r6, sl
 800287e:	40b4      	lsls	r4, r6
 8002880:	46a1      	mov	r9, r4
 8002882:	001c      	movs	r4, r3
 8002884:	464e      	mov	r6, r9
 8002886:	40d4      	lsrs	r4, r2
 8002888:	4326      	orrs	r6, r4
 800288a:	0034      	movs	r4, r6
 800288c:	4656      	mov	r6, sl
 800288e:	40b3      	lsls	r3, r6
 8002890:	1e5e      	subs	r6, r3, #1
 8002892:	41b3      	sbcs	r3, r6
 8002894:	431c      	orrs	r4, r3
 8002896:	4663      	mov	r3, ip
 8002898:	40d3      	lsrs	r3, r2
 800289a:	18c9      	adds	r1, r1, r3
 800289c:	19e4      	adds	r4, r4, r7
 800289e:	42bc      	cmp	r4, r7
 80028a0:	41bf      	sbcs	r7, r7
 80028a2:	427f      	negs	r7, r7
 80028a4:	46b9      	mov	r9, r7
 80028a6:	4680      	mov	r8, r0
 80028a8:	4489      	add	r9, r1
 80028aa:	e0d8      	b.n	8002a5e <__aeabi_dsub+0x426>
 80028ac:	4640      	mov	r0, r8
 80028ae:	4c3b      	ldr	r4, [pc, #236]	; (800299c <__aeabi_dsub+0x364>)
 80028b0:	3001      	adds	r0, #1
 80028b2:	4220      	tst	r0, r4
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x280>
 80028b6:	e0b4      	b.n	8002a22 <__aeabi_dsub+0x3ea>
 80028b8:	4640      	mov	r0, r8
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d000      	beq.n	80028c0 <__aeabi_dsub+0x288>
 80028be:	e144      	b.n	8002b4a <__aeabi_dsub+0x512>
 80028c0:	4660      	mov	r0, ip
 80028c2:	4318      	orrs	r0, r3
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x290>
 80028c6:	e190      	b.n	8002bea <__aeabi_dsub+0x5b2>
 80028c8:	0008      	movs	r0, r1
 80028ca:	4338      	orrs	r0, r7
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x298>
 80028ce:	e1aa      	b.n	8002c26 <__aeabi_dsub+0x5ee>
 80028d0:	4661      	mov	r1, ip
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	0749      	lsls	r1, r1, #29
 80028d6:	430b      	orrs	r3, r1
 80028d8:	4661      	mov	r1, ip
 80028da:	08cc      	lsrs	r4, r1, #3
 80028dc:	e027      	b.n	800292e <__aeabi_dsub+0x2f6>
 80028de:	0008      	movs	r0, r1
 80028e0:	4338      	orrs	r0, r7
 80028e2:	d061      	beq.n	80029a8 <__aeabi_dsub+0x370>
 80028e4:	1e50      	subs	r0, r2, #1
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x2b4>
 80028ea:	e139      	b.n	8002b60 <__aeabi_dsub+0x528>
 80028ec:	42a2      	cmp	r2, r4
 80028ee:	d027      	beq.n	8002940 <__aeabi_dsub+0x308>
 80028f0:	0002      	movs	r2, r0
 80028f2:	e75d      	b.n	80027b0 <__aeabi_dsub+0x178>
 80028f4:	0002      	movs	r2, r0
 80028f6:	391f      	subs	r1, #31
 80028f8:	40ca      	lsrs	r2, r1
 80028fa:	0011      	movs	r1, r2
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d003      	beq.n	8002908 <__aeabi_dsub+0x2d0>
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4098      	lsls	r0, r3
 8002906:	4304      	orrs	r4, r0
 8002908:	1e63      	subs	r3, r4, #1
 800290a:	419c      	sbcs	r4, r3
 800290c:	2300      	movs	r3, #0
 800290e:	4699      	mov	r9, r3
 8002910:	4698      	mov	r8, r3
 8002912:	430c      	orrs	r4, r1
 8002914:	0763      	lsls	r3, r4, #29
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x2e2>
 8002918:	e712      	b.n	8002740 <__aeabi_dsub+0x108>
 800291a:	464b      	mov	r3, r9
 800291c:	464a      	mov	r2, r9
 800291e:	08e4      	lsrs	r4, r4, #3
 8002920:	075b      	lsls	r3, r3, #29
 8002922:	4323      	orrs	r3, r4
 8002924:	08d4      	lsrs	r4, r2, #3
 8002926:	4642      	mov	r2, r8
 8002928:	4919      	ldr	r1, [pc, #100]	; (8002990 <__aeabi_dsub+0x358>)
 800292a:	428a      	cmp	r2, r1
 800292c:	d00e      	beq.n	800294c <__aeabi_dsub+0x314>
 800292e:	0324      	lsls	r4, r4, #12
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	0b24      	lsrs	r4, r4, #12
 8002934:	0d52      	lsrs	r2, r2, #21
 8002936:	e722      	b.n	800277e <__aeabi_dsub+0x146>
 8002938:	000a      	movs	r2, r1
 800293a:	2400      	movs	r4, #0
 800293c:	2300      	movs	r3, #0
 800293e:	e71e      	b.n	800277e <__aeabi_dsub+0x146>
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	4662      	mov	r2, ip
 8002944:	0752      	lsls	r2, r2, #29
 8002946:	4313      	orrs	r3, r2
 8002948:	4662      	mov	r2, ip
 800294a:	08d4      	lsrs	r4, r2, #3
 800294c:	001a      	movs	r2, r3
 800294e:	4322      	orrs	r2, r4
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x31c>
 8002952:	e1fc      	b.n	8002d4e <__aeabi_dsub+0x716>
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0312      	lsls	r2, r2, #12
 8002958:	4314      	orrs	r4, r2
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <__aeabi_dsub+0x358>)
 800295e:	0b24      	lsrs	r4, r4, #12
 8002960:	e70d      	b.n	800277e <__aeabi_dsub+0x146>
 8002962:	0020      	movs	r0, r4
 8002964:	f000 fb74 	bl	8003050 <__clzsi2>
 8002968:	0001      	movs	r1, r0
 800296a:	3118      	adds	r1, #24
 800296c:	291f      	cmp	r1, #31
 800296e:	dc00      	bgt.n	8002972 <__aeabi_dsub+0x33a>
 8002970:	e6c4      	b.n	80026fc <__aeabi_dsub+0xc4>
 8002972:	3808      	subs	r0, #8
 8002974:	4084      	lsls	r4, r0
 8002976:	4643      	mov	r3, r8
 8002978:	0020      	movs	r0, r4
 800297a:	2400      	movs	r4, #0
 800297c:	4588      	cmp	r8, r1
 800297e:	dc00      	bgt.n	8002982 <__aeabi_dsub+0x34a>
 8002980:	e6c8      	b.n	8002714 <__aeabi_dsub+0xdc>
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__aeabi_dsub+0x35c>)
 8002984:	1a5b      	subs	r3, r3, r1
 8002986:	4010      	ands	r0, r2
 8002988:	4698      	mov	r8, r3
 800298a:	4681      	mov	r9, r0
 800298c:	e6d6      	b.n	800273c <__aeabi_dsub+0x104>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	000007ff 	.word	0x000007ff
 8002994:	ff7fffff 	.word	0xff7fffff
 8002998:	fffff801 	.word	0xfffff801
 800299c:	000007fe 	.word	0x000007fe
 80029a0:	430f      	orrs	r7, r1
 80029a2:	1e7a      	subs	r2, r7, #1
 80029a4:	4197      	sbcs	r7, r2
 80029a6:	e691      	b.n	80026cc <__aeabi_dsub+0x94>
 80029a8:	4661      	mov	r1, ip
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	0749      	lsls	r1, r1, #29
 80029ae:	430b      	orrs	r3, r1
 80029b0:	4661      	mov	r1, ip
 80029b2:	08cc      	lsrs	r4, r1, #3
 80029b4:	e7b8      	b.n	8002928 <__aeabi_dsub+0x2f0>
 80029b6:	4640      	mov	r0, r8
 80029b8:	4cd3      	ldr	r4, [pc, #844]	; (8002d08 <__aeabi_dsub+0x6d0>)
 80029ba:	3001      	adds	r0, #1
 80029bc:	4220      	tst	r0, r4
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x38a>
 80029c0:	e0a2      	b.n	8002b08 <__aeabi_dsub+0x4d0>
 80029c2:	4640      	mov	r0, r8
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d000      	beq.n	80029ca <__aeabi_dsub+0x392>
 80029c8:	e101      	b.n	8002bce <__aeabi_dsub+0x596>
 80029ca:	4660      	mov	r0, ip
 80029cc:	4318      	orrs	r0, r3
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x39a>
 80029d0:	e15e      	b.n	8002c90 <__aeabi_dsub+0x658>
 80029d2:	0008      	movs	r0, r1
 80029d4:	4338      	orrs	r0, r7
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3a2>
 80029d8:	e15f      	b.n	8002c9a <__aeabi_dsub+0x662>
 80029da:	4661      	mov	r1, ip
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	0749      	lsls	r1, r1, #29
 80029e0:	430b      	orrs	r3, r1
 80029e2:	4661      	mov	r1, ip
 80029e4:	08cc      	lsrs	r4, r1, #3
 80029e6:	e7a2      	b.n	800292e <__aeabi_dsub+0x2f6>
 80029e8:	4dc8      	ldr	r5, [pc, #800]	; (8002d0c <__aeabi_dsub+0x6d4>)
 80029ea:	42a8      	cmp	r0, r5
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x3b8>
 80029ee:	e0cf      	b.n	8002b90 <__aeabi_dsub+0x558>
 80029f0:	2580      	movs	r5, #128	; 0x80
 80029f2:	4664      	mov	r4, ip
 80029f4:	042d      	lsls	r5, r5, #16
 80029f6:	432c      	orrs	r4, r5
 80029f8:	46a4      	mov	ip, r4
 80029fa:	2a38      	cmp	r2, #56	; 0x38
 80029fc:	dc56      	bgt.n	8002aac <__aeabi_dsub+0x474>
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x3cc>
 8002a02:	e0d1      	b.n	8002ba8 <__aeabi_dsub+0x570>
 8002a04:	2520      	movs	r5, #32
 8002a06:	001e      	movs	r6, r3
 8002a08:	1aad      	subs	r5, r5, r2
 8002a0a:	4664      	mov	r4, ip
 8002a0c:	40ab      	lsls	r3, r5
 8002a0e:	40ac      	lsls	r4, r5
 8002a10:	40d6      	lsrs	r6, r2
 8002a12:	1e5d      	subs	r5, r3, #1
 8002a14:	41ab      	sbcs	r3, r5
 8002a16:	4334      	orrs	r4, r6
 8002a18:	4323      	orrs	r3, r4
 8002a1a:	4664      	mov	r4, ip
 8002a1c:	40d4      	lsrs	r4, r2
 8002a1e:	1b09      	subs	r1, r1, r4
 8002a20:	e049      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002a22:	4660      	mov	r0, ip
 8002a24:	1bdc      	subs	r4, r3, r7
 8002a26:	1a46      	subs	r6, r0, r1
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	4180      	sbcs	r0, r0
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	4681      	mov	r9, r0
 8002a30:	0030      	movs	r0, r6
 8002a32:	464e      	mov	r6, r9
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	4681      	mov	r9, r0
 8002a38:	0200      	lsls	r0, r0, #8
 8002a3a:	d476      	bmi.n	8002b2a <__aeabi_dsub+0x4f2>
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	d000      	beq.n	8002a44 <__aeabi_dsub+0x40c>
 8002a42:	e652      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002a44:	2400      	movs	r4, #0
 8002a46:	2500      	movs	r5, #0
 8002a48:	e771      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002a4a:	4339      	orrs	r1, r7
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	1e62      	subs	r2, r4, #1
 8002a50:	4194      	sbcs	r4, r2
 8002a52:	18e4      	adds	r4, r4, r3
 8002a54:	429c      	cmp	r4, r3
 8002a56:	419b      	sbcs	r3, r3
 8002a58:	425b      	negs	r3, r3
 8002a5a:	4463      	add	r3, ip
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	464b      	mov	r3, r9
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	d400      	bmi.n	8002a66 <__aeabi_dsub+0x42e>
 8002a64:	e756      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002a66:	2301      	movs	r3, #1
 8002a68:	469c      	mov	ip, r3
 8002a6a:	4ba8      	ldr	r3, [pc, #672]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002a6c:	44e0      	add	r8, ip
 8002a6e:	4598      	cmp	r8, r3
 8002a70:	d038      	beq.n	8002ae4 <__aeabi_dsub+0x4ac>
 8002a72:	464b      	mov	r3, r9
 8002a74:	48a6      	ldr	r0, [pc, #664]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	4003      	ands	r3, r0
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	0863      	lsrs	r3, r4, #1
 8002a7e:	4014      	ands	r4, r2
 8002a80:	431c      	orrs	r4, r3
 8002a82:	07c3      	lsls	r3, r0, #31
 8002a84:	431c      	orrs	r4, r3
 8002a86:	0843      	lsrs	r3, r0, #1
 8002a88:	4699      	mov	r9, r3
 8002a8a:	e657      	b.n	800273c <__aeabi_dsub+0x104>
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	000e      	movs	r6, r1
 8002a90:	3820      	subs	r0, #32
 8002a92:	40c6      	lsrs	r6, r0
 8002a94:	2a20      	cmp	r2, #32
 8002a96:	d004      	beq.n	8002aa2 <__aeabi_dsub+0x46a>
 8002a98:	2040      	movs	r0, #64	; 0x40
 8002a9a:	1a82      	subs	r2, r0, r2
 8002a9c:	4091      	lsls	r1, r2
 8002a9e:	430f      	orrs	r7, r1
 8002aa0:	46b9      	mov	r9, r7
 8002aa2:	464f      	mov	r7, r9
 8002aa4:	1e7a      	subs	r2, r7, #1
 8002aa6:	4197      	sbcs	r7, r2
 8002aa8:	4337      	orrs	r7, r6
 8002aaa:	e60f      	b.n	80026cc <__aeabi_dsub+0x94>
 8002aac:	4662      	mov	r2, ip
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	1afc      	subs	r4, r7, r3
 8002ab8:	42a7      	cmp	r7, r4
 8002aba:	41bf      	sbcs	r7, r7
 8002abc:	427f      	negs	r7, r7
 8002abe:	1bcb      	subs	r3, r1, r7
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	465d      	mov	r5, fp
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	e608      	b.n	80026da <__aeabi_dsub+0xa2>
 8002ac8:	4666      	mov	r6, ip
 8002aca:	431e      	orrs	r6, r3
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x498>
 8002ace:	e0be      	b.n	8002c4e <__aeabi_dsub+0x616>
 8002ad0:	1e56      	subs	r6, r2, #1
 8002ad2:	2a01      	cmp	r2, #1
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x4a0>
 8002ad6:	e109      	b.n	8002cec <__aeabi_dsub+0x6b4>
 8002ad8:	4c8c      	ldr	r4, [pc, #560]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x4a8>
 8002ade:	e119      	b.n	8002d14 <__aeabi_dsub+0x6dc>
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	e6c1      	b.n	8002868 <__aeabi_dsub+0x230>
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e648      	b.n	800277e <__aeabi_dsub+0x146>
 8002aec:	2020      	movs	r0, #32
 8002aee:	000c      	movs	r4, r1
 8002af0:	1a80      	subs	r0, r0, r2
 8002af2:	003e      	movs	r6, r7
 8002af4:	4087      	lsls	r7, r0
 8002af6:	4084      	lsls	r4, r0
 8002af8:	40d6      	lsrs	r6, r2
 8002afa:	1e78      	subs	r0, r7, #1
 8002afc:	4187      	sbcs	r7, r0
 8002afe:	40d1      	lsrs	r1, r2
 8002b00:	4334      	orrs	r4, r6
 8002b02:	433c      	orrs	r4, r7
 8002b04:	448c      	add	ip, r1
 8002b06:	e7a4      	b.n	8002a52 <__aeabi_dsub+0x41a>
 8002b08:	4a80      	ldr	r2, [pc, #512]	; (8002d0c <__aeabi_dsub+0x6d4>)
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x4d8>
 8002b0e:	e0e9      	b.n	8002ce4 <__aeabi_dsub+0x6ac>
 8002b10:	19df      	adds	r7, r3, r7
 8002b12:	429f      	cmp	r7, r3
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	4461      	add	r1, ip
 8002b18:	425b      	negs	r3, r3
 8002b1a:	18c9      	adds	r1, r1, r3
 8002b1c:	07cc      	lsls	r4, r1, #31
 8002b1e:	087f      	lsrs	r7, r7, #1
 8002b20:	084b      	lsrs	r3, r1, #1
 8002b22:	4699      	mov	r9, r3
 8002b24:	4680      	mov	r8, r0
 8002b26:	433c      	orrs	r4, r7
 8002b28:	e6f4      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b2a:	1afc      	subs	r4, r7, r3
 8002b2c:	42a7      	cmp	r7, r4
 8002b2e:	41bf      	sbcs	r7, r7
 8002b30:	4663      	mov	r3, ip
 8002b32:	427f      	negs	r7, r7
 8002b34:	1ac9      	subs	r1, r1, r3
 8002b36:	1bcb      	subs	r3, r1, r7
 8002b38:	4699      	mov	r9, r3
 8002b3a:	465d      	mov	r5, fp
 8002b3c:	e5d5      	b.n	80026ea <__aeabi_dsub+0xb2>
 8002b3e:	08ff      	lsrs	r7, r7, #3
 8002b40:	074b      	lsls	r3, r1, #29
 8002b42:	465d      	mov	r5, fp
 8002b44:	433b      	orrs	r3, r7
 8002b46:	08cc      	lsrs	r4, r1, #3
 8002b48:	e6ee      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002b4a:	4662      	mov	r2, ip
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_dsub+0x51a>
 8002b50:	e082      	b.n	8002c58 <__aeabi_dsub+0x620>
 8002b52:	000b      	movs	r3, r1
 8002b54:	433b      	orrs	r3, r7
 8002b56:	d11b      	bne.n	8002b90 <__aeabi_dsub+0x558>
 8002b58:	2480      	movs	r4, #128	; 0x80
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	0324      	lsls	r4, r4, #12
 8002b5e:	e6f9      	b.n	8002954 <__aeabi_dsub+0x31c>
 8002b60:	19dc      	adds	r4, r3, r7
 8002b62:	429c      	cmp	r4, r3
 8002b64:	419b      	sbcs	r3, r3
 8002b66:	4461      	add	r1, ip
 8002b68:	4689      	mov	r9, r1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	4499      	add	r9, r3
 8002b6e:	464b      	mov	r3, r9
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	d444      	bmi.n	8002bfe <__aeabi_dsub+0x5c6>
 8002b74:	2301      	movs	r3, #1
 8002b76:	4698      	mov	r8, r3
 8002b78:	e6cc      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002b7a:	1bdc      	subs	r4, r3, r7
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	42a3      	cmp	r3, r4
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	1a51      	subs	r1, r2, r1
 8002b84:	425b      	negs	r3, r3
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	4699      	mov	r9, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	e5a4      	b.n	80026da <__aeabi_dsub+0xa2>
 8002b90:	08ff      	lsrs	r7, r7, #3
 8002b92:	074b      	lsls	r3, r1, #29
 8002b94:	465d      	mov	r5, fp
 8002b96:	433b      	orrs	r3, r7
 8002b98:	08cc      	lsrs	r4, r1, #3
 8002b9a:	e6d7      	b.n	800294c <__aeabi_dsub+0x314>
 8002b9c:	4662      	mov	r2, ip
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	0014      	movs	r4, r2
 8002ba2:	1e63      	subs	r3, r4, #1
 8002ba4:	419c      	sbcs	r4, r3
 8002ba6:	e679      	b.n	800289c <__aeabi_dsub+0x264>
 8002ba8:	0015      	movs	r5, r2
 8002baa:	4664      	mov	r4, ip
 8002bac:	3d20      	subs	r5, #32
 8002bae:	40ec      	lsrs	r4, r5
 8002bb0:	46a0      	mov	r8, r4
 8002bb2:	2a20      	cmp	r2, #32
 8002bb4:	d005      	beq.n	8002bc2 <__aeabi_dsub+0x58a>
 8002bb6:	2540      	movs	r5, #64	; 0x40
 8002bb8:	4664      	mov	r4, ip
 8002bba:	1aaa      	subs	r2, r5, r2
 8002bbc:	4094      	lsls	r4, r2
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	469a      	mov	sl, r3
 8002bc2:	4654      	mov	r4, sl
 8002bc4:	1e63      	subs	r3, r4, #1
 8002bc6:	419c      	sbcs	r4, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	4323      	orrs	r3, r4
 8002bcc:	e773      	b.n	8002ab6 <__aeabi_dsub+0x47e>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	d023      	beq.n	8002c1c <__aeabi_dsub+0x5e4>
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	433a      	orrs	r2, r7
 8002bd8:	d000      	beq.n	8002bdc <__aeabi_dsub+0x5a4>
 8002bda:	e0a0      	b.n	8002d1e <__aeabi_dsub+0x6e6>
 8002bdc:	4662      	mov	r2, ip
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	0752      	lsls	r2, r2, #29
 8002be2:	4313      	orrs	r3, r2
 8002be4:	4662      	mov	r2, ip
 8002be6:	08d4      	lsrs	r4, r2, #3
 8002be8:	e6b0      	b.n	800294c <__aeabi_dsub+0x314>
 8002bea:	000b      	movs	r3, r1
 8002bec:	433b      	orrs	r3, r7
 8002bee:	d100      	bne.n	8002bf2 <__aeabi_dsub+0x5ba>
 8002bf0:	e728      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002bf2:	08ff      	lsrs	r7, r7, #3
 8002bf4:	074b      	lsls	r3, r1, #29
 8002bf6:	465d      	mov	r5, fp
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	08cc      	lsrs	r4, r1, #3
 8002bfc:	e697      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	4698      	mov	r8, r3
 8002c02:	e736      	b.n	8002a72 <__aeabi_dsub+0x43a>
 8002c04:	1afc      	subs	r4, r7, r3
 8002c06:	42a7      	cmp	r7, r4
 8002c08:	41bf      	sbcs	r7, r7
 8002c0a:	4663      	mov	r3, ip
 8002c0c:	427f      	negs	r7, r7
 8002c0e:	1ac9      	subs	r1, r1, r3
 8002c10:	1bcb      	subs	r3, r1, r7
 8002c12:	4699      	mov	r9, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	465d      	mov	r5, fp
 8002c18:	4698      	mov	r8, r3
 8002c1a:	e55e      	b.n	80026da <__aeabi_dsub+0xa2>
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	08ff      	lsrs	r7, r7, #3
 8002c20:	433b      	orrs	r3, r7
 8002c22:	08cc      	lsrs	r4, r1, #3
 8002c24:	e692      	b.n	800294c <__aeabi_dsub+0x314>
 8002c26:	1bdc      	subs	r4, r3, r7
 8002c28:	4660      	mov	r0, ip
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	41b6      	sbcs	r6, r6
 8002c2e:	1a40      	subs	r0, r0, r1
 8002c30:	4276      	negs	r6, r6
 8002c32:	1b80      	subs	r0, r0, r6
 8002c34:	4681      	mov	r9, r0
 8002c36:	0200      	lsls	r0, r0, #8
 8002c38:	d560      	bpl.n	8002cfc <__aeabi_dsub+0x6c4>
 8002c3a:	1afc      	subs	r4, r7, r3
 8002c3c:	42a7      	cmp	r7, r4
 8002c3e:	41bf      	sbcs	r7, r7
 8002c40:	4663      	mov	r3, ip
 8002c42:	427f      	negs	r7, r7
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	1bcb      	subs	r3, r1, r7
 8002c48:	4699      	mov	r9, r3
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	e576      	b.n	800273c <__aeabi_dsub+0x104>
 8002c4e:	08ff      	lsrs	r7, r7, #3
 8002c50:	074b      	lsls	r3, r1, #29
 8002c52:	433b      	orrs	r3, r7
 8002c54:	08cc      	lsrs	r4, r1, #3
 8002c56:	e667      	b.n	8002928 <__aeabi_dsub+0x2f0>
 8002c58:	000a      	movs	r2, r1
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	433a      	orrs	r2, r7
 8002c5e:	d100      	bne.n	8002c62 <__aeabi_dsub+0x62a>
 8002c60:	e66f      	b.n	8002942 <__aeabi_dsub+0x30a>
 8002c62:	4662      	mov	r2, ip
 8002c64:	0752      	lsls	r2, r2, #29
 8002c66:	4313      	orrs	r3, r2
 8002c68:	4662      	mov	r2, ip
 8002c6a:	08d4      	lsrs	r4, r2, #3
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	4214      	tst	r4, r2
 8002c72:	d007      	beq.n	8002c84 <__aeabi_dsub+0x64c>
 8002c74:	08c8      	lsrs	r0, r1, #3
 8002c76:	4210      	tst	r0, r2
 8002c78:	d104      	bne.n	8002c84 <__aeabi_dsub+0x64c>
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	0004      	movs	r4, r0
 8002c7e:	08fb      	lsrs	r3, r7, #3
 8002c80:	0749      	lsls	r1, r1, #29
 8002c82:	430b      	orrs	r3, r1
 8002c84:	0f5a      	lsrs	r2, r3, #29
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	0752      	lsls	r2, r2, #29
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	e65d      	b.n	800294c <__aeabi_dsub+0x314>
 8002c90:	074b      	lsls	r3, r1, #29
 8002c92:	08ff      	lsrs	r7, r7, #3
 8002c94:	433b      	orrs	r3, r7
 8002c96:	08cc      	lsrs	r4, r1, #3
 8002c98:	e649      	b.n	800292e <__aeabi_dsub+0x2f6>
 8002c9a:	19dc      	adds	r4, r3, r7
 8002c9c:	429c      	cmp	r4, r3
 8002c9e:	419b      	sbcs	r3, r3
 8002ca0:	4461      	add	r1, ip
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	4499      	add	r9, r3
 8002ca8:	464b      	mov	r3, r9
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	d400      	bmi.n	8002cb0 <__aeabi_dsub+0x678>
 8002cae:	e631      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <__aeabi_dsub+0x6d8>)
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4691      	mov	r9, r2
 8002cba:	4698      	mov	r8, r3
 8002cbc:	e62a      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002cbe:	0016      	movs	r6, r2
 8002cc0:	4664      	mov	r4, ip
 8002cc2:	3e20      	subs	r6, #32
 8002cc4:	40f4      	lsrs	r4, r6
 8002cc6:	46a0      	mov	r8, r4
 8002cc8:	2a20      	cmp	r2, #32
 8002cca:	d005      	beq.n	8002cd8 <__aeabi_dsub+0x6a0>
 8002ccc:	2640      	movs	r6, #64	; 0x40
 8002cce:	4664      	mov	r4, ip
 8002cd0:	1ab2      	subs	r2, r6, r2
 8002cd2:	4094      	lsls	r4, r2
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	469a      	mov	sl, r3
 8002cd8:	4654      	mov	r4, sl
 8002cda:	1e63      	subs	r3, r4, #1
 8002cdc:	419c      	sbcs	r4, r3
 8002cde:	4643      	mov	r3, r8
 8002ce0:	431c      	orrs	r4, r3
 8002ce2:	e5db      	b.n	800289c <__aeabi_dsub+0x264>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e548      	b.n	800277e <__aeabi_dsub+0x146>
 8002cec:	19dc      	adds	r4, r3, r7
 8002cee:	42bc      	cmp	r4, r7
 8002cf0:	41bf      	sbcs	r7, r7
 8002cf2:	4461      	add	r1, ip
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	427f      	negs	r7, r7
 8002cf8:	44b9      	add	r9, r7
 8002cfa:	e738      	b.n	8002b6e <__aeabi_dsub+0x536>
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	d100      	bne.n	8002d04 <__aeabi_dsub+0x6cc>
 8002d02:	e69f      	b.n	8002a44 <__aeabi_dsub+0x40c>
 8002d04:	e606      	b.n	8002914 <__aeabi_dsub+0x2dc>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	000007fe 	.word	0x000007fe
 8002d0c:	000007ff 	.word	0x000007ff
 8002d10:	ff7fffff 	.word	0xff7fffff
 8002d14:	08ff      	lsrs	r7, r7, #3
 8002d16:	074b      	lsls	r3, r1, #29
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	08cc      	lsrs	r4, r1, #3
 8002d1c:	e616      	b.n	800294c <__aeabi_dsub+0x314>
 8002d1e:	4662      	mov	r2, ip
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	0752      	lsls	r2, r2, #29
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4662      	mov	r2, ip
 8002d28:	08d4      	lsrs	r4, r2, #3
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0312      	lsls	r2, r2, #12
 8002d2e:	4214      	tst	r4, r2
 8002d30:	d007      	beq.n	8002d42 <__aeabi_dsub+0x70a>
 8002d32:	08c8      	lsrs	r0, r1, #3
 8002d34:	4210      	tst	r0, r2
 8002d36:	d104      	bne.n	8002d42 <__aeabi_dsub+0x70a>
 8002d38:	465d      	mov	r5, fp
 8002d3a:	0004      	movs	r4, r0
 8002d3c:	08fb      	lsrs	r3, r7, #3
 8002d3e:	0749      	lsls	r1, r1, #29
 8002d40:	430b      	orrs	r3, r1
 8002d42:	0f5a      	lsrs	r2, r3, #29
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	0752      	lsls	r2, r2, #29
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	e5fe      	b.n	800294c <__aeabi_dsub+0x314>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4a01      	ldr	r2, [pc, #4]	; (8002d58 <__aeabi_dsub+0x720>)
 8002d52:	001c      	movs	r4, r3
 8002d54:	e513      	b.n	800277e <__aeabi_dsub+0x146>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000007ff 	.word	0x000007ff

08002d5c <__aeabi_dcmpun>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	0005      	movs	r5, r0
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d62:	031c      	lsls	r4, r3, #12
 8002d64:	0016      	movs	r6, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	030a      	lsls	r2, r1, #12
 8002d6a:	0049      	lsls	r1, r1, #1
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	0d49      	lsrs	r1, r1, #21
 8002d70:	0b24      	lsrs	r4, r4, #12
 8002d72:	0d5b      	lsrs	r3, r3, #21
 8002d74:	4281      	cmp	r1, r0
 8002d76:	d008      	beq.n	8002d8a <__aeabi_dcmpun+0x2e>
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <__aeabi_dcmpun+0x38>)
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d80:	0020      	movs	r0, r4
 8002d82:	4330      	orrs	r0, r6
 8002d84:	1e43      	subs	r3, r0, #1
 8002d86:	4198      	sbcs	r0, r3
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	432a      	orrs	r2, r5
 8002d8e:	d1fb      	bne.n	8002d88 <__aeabi_dcmpun+0x2c>
 8002d90:	e7f2      	b.n	8002d78 <__aeabi_dcmpun+0x1c>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	000007ff 	.word	0x000007ff

08002d98 <__aeabi_d2iz>:
 8002d98:	000a      	movs	r2, r1
 8002d9a:	b530      	push	{r4, r5, lr}
 8002d9c:	4c13      	ldr	r4, [pc, #76]	; (8002dec <__aeabi_d2iz+0x54>)
 8002d9e:	0053      	lsls	r3, r2, #1
 8002da0:	0309      	lsls	r1, r1, #12
 8002da2:	0005      	movs	r5, r0
 8002da4:	0b09      	lsrs	r1, r1, #12
 8002da6:	2000      	movs	r0, #0
 8002da8:	0d5b      	lsrs	r3, r3, #21
 8002daa:	0fd2      	lsrs	r2, r2, #31
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	dd04      	ble.n	8002dba <__aeabi_d2iz+0x22>
 8002db0:	480f      	ldr	r0, [pc, #60]	; (8002df0 <__aeabi_d2iz+0x58>)
 8002db2:	4283      	cmp	r3, r0
 8002db4:	dd02      	ble.n	8002dbc <__aeabi_d2iz+0x24>
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_d2iz+0x5c>)
 8002db8:	18d0      	adds	r0, r2, r3
 8002dba:	bd30      	pop	{r4, r5, pc}
 8002dbc:	2080      	movs	r0, #128	; 0x80
 8002dbe:	0340      	lsls	r0, r0, #13
 8002dc0:	4301      	orrs	r1, r0
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <__aeabi_d2iz+0x60>)
 8002dc4:	1ac0      	subs	r0, r0, r3
 8002dc6:	281f      	cmp	r0, #31
 8002dc8:	dd08      	ble.n	8002ddc <__aeabi_d2iz+0x44>
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <__aeabi_d2iz+0x64>)
 8002dcc:	1ac3      	subs	r3, r0, r3
 8002dce:	40d9      	lsrs	r1, r3
 8002dd0:	000b      	movs	r3, r1
 8002dd2:	4258      	negs	r0, r3
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d1f0      	bne.n	8002dba <__aeabi_d2iz+0x22>
 8002dd8:	0018      	movs	r0, r3
 8002dda:	e7ee      	b.n	8002dba <__aeabi_d2iz+0x22>
 8002ddc:	4c08      	ldr	r4, [pc, #32]	; (8002e00 <__aeabi_d2iz+0x68>)
 8002dde:	40c5      	lsrs	r5, r0
 8002de0:	46a4      	mov	ip, r4
 8002de2:	4463      	add	r3, ip
 8002de4:	4099      	lsls	r1, r3
 8002de6:	000b      	movs	r3, r1
 8002de8:	432b      	orrs	r3, r5
 8002dea:	e7f2      	b.n	8002dd2 <__aeabi_d2iz+0x3a>
 8002dec:	000003fe 	.word	0x000003fe
 8002df0:	0000041d 	.word	0x0000041d
 8002df4:	7fffffff 	.word	0x7fffffff
 8002df8:	00000433 	.word	0x00000433
 8002dfc:	00000413 	.word	0x00000413
 8002e00:	fffffbed 	.word	0xfffffbed

08002e04 <__aeabi_i2d>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d016      	beq.n	8002e38 <__aeabi_i2d+0x34>
 8002e0a:	17c3      	asrs	r3, r0, #31
 8002e0c:	18c5      	adds	r5, r0, r3
 8002e0e:	405d      	eors	r5, r3
 8002e10:	0fc4      	lsrs	r4, r0, #31
 8002e12:	0028      	movs	r0, r5
 8002e14:	f000 f91c 	bl	8003050 <__clzsi2>
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <__aeabi_i2d+0x5c>)
 8002e1a:	1a12      	subs	r2, r2, r0
 8002e1c:	280a      	cmp	r0, #10
 8002e1e:	dc16      	bgt.n	8002e4e <__aeabi_i2d+0x4a>
 8002e20:	0003      	movs	r3, r0
 8002e22:	002e      	movs	r6, r5
 8002e24:	3315      	adds	r3, #21
 8002e26:	409e      	lsls	r6, r3
 8002e28:	230b      	movs	r3, #11
 8002e2a:	1a18      	subs	r0, r3, r0
 8002e2c:	40c5      	lsrs	r5, r0
 8002e2e:	0552      	lsls	r2, r2, #21
 8002e30:	032d      	lsls	r5, r5, #12
 8002e32:	0b2d      	lsrs	r5, r5, #12
 8002e34:	0d53      	lsrs	r3, r2, #21
 8002e36:	e003      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e38:	2400      	movs	r4, #0
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	2600      	movs	r6, #0
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	432b      	orrs	r3, r5
 8002e44:	07e4      	lsls	r4, r4, #31
 8002e46:	4323      	orrs	r3, r4
 8002e48:	0030      	movs	r0, r6
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	380b      	subs	r0, #11
 8002e50:	4085      	lsls	r5, r0
 8002e52:	0552      	lsls	r2, r2, #21
 8002e54:	032d      	lsls	r5, r5, #12
 8002e56:	2600      	movs	r6, #0
 8002e58:	0b2d      	lsrs	r5, r5, #12
 8002e5a:	0d53      	lsrs	r3, r2, #21
 8002e5c:	e7f0      	b.n	8002e40 <__aeabi_i2d+0x3c>
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	0000041e 	.word	0x0000041e

08002e64 <__aeabi_ui2d>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	1e04      	subs	r4, r0, #0
 8002e68:	d010      	beq.n	8002e8c <__aeabi_ui2d+0x28>
 8002e6a:	f000 f8f1 	bl	8003050 <__clzsi2>
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <__aeabi_ui2d+0x48>)
 8002e70:	1a1b      	subs	r3, r3, r0
 8002e72:	280a      	cmp	r0, #10
 8002e74:	dc11      	bgt.n	8002e9a <__aeabi_ui2d+0x36>
 8002e76:	220b      	movs	r2, #11
 8002e78:	0021      	movs	r1, r4
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	40d1      	lsrs	r1, r2
 8002e7e:	3015      	adds	r0, #21
 8002e80:	030a      	lsls	r2, r1, #12
 8002e82:	055b      	lsls	r3, r3, #21
 8002e84:	4084      	lsls	r4, r0
 8002e86:	0b12      	lsrs	r2, r2, #12
 8002e88:	0d5b      	lsrs	r3, r3, #21
 8002e8a:	e001      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	051b      	lsls	r3, r3, #20
 8002e92:	4313      	orrs	r3, r2
 8002e94:	0020      	movs	r0, r4
 8002e96:	0019      	movs	r1, r3
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	0022      	movs	r2, r4
 8002e9c:	380b      	subs	r0, #11
 8002e9e:	4082      	lsls	r2, r0
 8002ea0:	055b      	lsls	r3, r3, #21
 8002ea2:	0312      	lsls	r2, r2, #12
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e7f1      	b.n	8002e90 <__aeabi_ui2d+0x2c>
 8002eac:	0000041e 	.word	0x0000041e

08002eb0 <__aeabi_f2d>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	0043      	lsls	r3, r0, #1
 8002eb4:	0246      	lsls	r6, r0, #9
 8002eb6:	0fc4      	lsrs	r4, r0, #31
 8002eb8:	20fe      	movs	r0, #254	; 0xfe
 8002eba:	0e1b      	lsrs	r3, r3, #24
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	0a75      	lsrs	r5, r6, #9
 8002ec0:	4208      	tst	r0, r1
 8002ec2:	d00c      	beq.n	8002ede <__aeabi_f2d+0x2e>
 8002ec4:	22e0      	movs	r2, #224	; 0xe0
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	4694      	mov	ip, r2
 8002eca:	076d      	lsls	r5, r5, #29
 8002ecc:	0b36      	lsrs	r6, r6, #12
 8002ece:	4463      	add	r3, ip
 8002ed0:	051b      	lsls	r3, r3, #20
 8002ed2:	4333      	orrs	r3, r6
 8002ed4:	07e4      	lsls	r4, r4, #31
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	0028      	movs	r0, r5
 8002eda:	0019      	movs	r1, r3
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d114      	bne.n	8002f0c <__aeabi_f2d+0x5c>
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	d01b      	beq.n	8002f1e <__aeabi_f2d+0x6e>
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	f000 f8b2 	bl	8003050 <__clzsi2>
 8002eec:	280a      	cmp	r0, #10
 8002eee:	dc1c      	bgt.n	8002f2a <__aeabi_f2d+0x7a>
 8002ef0:	230b      	movs	r3, #11
 8002ef2:	002e      	movs	r6, r5
 8002ef4:	1a1b      	subs	r3, r3, r0
 8002ef6:	40de      	lsrs	r6, r3
 8002ef8:	0003      	movs	r3, r0
 8002efa:	3315      	adds	r3, #21
 8002efc:	409d      	lsls	r5, r3
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <__aeabi_f2d+0x88>)
 8002f00:	0336      	lsls	r6, r6, #12
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	0552      	lsls	r2, r2, #21
 8002f06:	0b36      	lsrs	r6, r6, #12
 8002f08:	0d53      	lsrs	r3, r2, #21
 8002f0a:	e7e1      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	d009      	beq.n	8002f24 <__aeabi_f2d+0x74>
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0b36      	lsrs	r6, r6, #12
 8002f14:	0312      	lsls	r2, r2, #12
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f18:	076d      	lsls	r5, r5, #29
 8002f1a:	4316      	orrs	r6, r2
 8002f1c:	e7d8      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2600      	movs	r6, #0
 8002f22:	e7d5      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f24:	2600      	movs	r6, #0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <__aeabi_f2d+0x8c>)
 8002f28:	e7d2      	b.n	8002ed0 <__aeabi_f2d+0x20>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	3b0b      	subs	r3, #11
 8002f2e:	409d      	lsls	r5, r3
 8002f30:	002e      	movs	r6, r5
 8002f32:	2500      	movs	r5, #0
 8002f34:	e7e3      	b.n	8002efe <__aeabi_f2d+0x4e>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	00000389 	.word	0x00000389
 8002f3c:	000007ff 	.word	0x000007ff

08002f40 <__aeabi_d2f>:
 8002f40:	0002      	movs	r2, r0
 8002f42:	004b      	lsls	r3, r1, #1
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	030c      	lsls	r4, r1, #12
 8002f4a:	4e3d      	ldr	r6, [pc, #244]	; (8003040 <__aeabi_d2f+0x100>)
 8002f4c:	0a64      	lsrs	r4, r4, #9
 8002f4e:	0f40      	lsrs	r0, r0, #29
 8002f50:	1c5f      	adds	r7, r3, #1
 8002f52:	0fc9      	lsrs	r1, r1, #31
 8002f54:	4304      	orrs	r4, r0
 8002f56:	00d5      	lsls	r5, r2, #3
 8002f58:	4237      	tst	r7, r6
 8002f5a:	d00a      	beq.n	8002f72 <__aeabi_d2f+0x32>
 8002f5c:	4839      	ldr	r0, [pc, #228]	; (8003044 <__aeabi_d2f+0x104>)
 8002f5e:	181e      	adds	r6, r3, r0
 8002f60:	2efe      	cmp	r6, #254	; 0xfe
 8002f62:	dd16      	ble.n	8002f92 <__aeabi_d2f+0x52>
 8002f64:	20ff      	movs	r0, #255	; 0xff
 8002f66:	2400      	movs	r4, #0
 8002f68:	05c0      	lsls	r0, r0, #23
 8002f6a:	4320      	orrs	r0, r4
 8002f6c:	07c9      	lsls	r1, r1, #31
 8002f6e:	4308      	orrs	r0, r1
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <__aeabi_d2f+0x44>
 8002f76:	432c      	orrs	r4, r5
 8002f78:	d026      	beq.n	8002fc8 <__aeabi_d2f+0x88>
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	0192      	lsls	r2, r2, #6
 8002f7e:	0a54      	lsrs	r4, r2, #9
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	e7f1      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f84:	4325      	orrs	r5, r4
 8002f86:	d0ed      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002f88:	2080      	movs	r0, #128	; 0x80
 8002f8a:	03c0      	lsls	r0, r0, #15
 8002f8c:	4304      	orrs	r4, r0
 8002f8e:	20ff      	movs	r0, #255	; 0xff
 8002f90:	e7ea      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002f92:	2e00      	cmp	r6, #0
 8002f94:	dd1b      	ble.n	8002fce <__aeabi_d2f+0x8e>
 8002f96:	0192      	lsls	r2, r2, #6
 8002f98:	1e53      	subs	r3, r2, #1
 8002f9a:	419a      	sbcs	r2, r3
 8002f9c:	00e4      	lsls	r4, r4, #3
 8002f9e:	0f6d      	lsrs	r5, r5, #29
 8002fa0:	4322      	orrs	r2, r4
 8002fa2:	432a      	orrs	r2, r5
 8002fa4:	0753      	lsls	r3, r2, #29
 8002fa6:	d048      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fa8:	230f      	movs	r3, #15
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d000      	beq.n	8002fb2 <__aeabi_d2f+0x72>
 8002fb0:	3204      	adds	r2, #4
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	04db      	lsls	r3, r3, #19
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d03f      	beq.n	800303a <__aeabi_d2f+0xfa>
 8002fba:	1c70      	adds	r0, r6, #1
 8002fbc:	2efe      	cmp	r6, #254	; 0xfe
 8002fbe:	d0d1      	beq.n	8002f64 <__aeabi_d2f+0x24>
 8002fc0:	0192      	lsls	r2, r2, #6
 8002fc2:	0a54      	lsrs	r4, r2, #9
 8002fc4:	b2c0      	uxtb	r0, r0
 8002fc6:	e7cf      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e7cc      	b.n	8002f68 <__aeabi_d2f+0x28>
 8002fce:	0032      	movs	r2, r6
 8002fd0:	3217      	adds	r2, #23
 8002fd2:	db22      	blt.n	800301a <__aeabi_d2f+0xda>
 8002fd4:	2080      	movs	r0, #128	; 0x80
 8002fd6:	0400      	lsls	r0, r0, #16
 8002fd8:	4320      	orrs	r0, r4
 8002fda:	241e      	movs	r4, #30
 8002fdc:	1ba4      	subs	r4, r4, r6
 8002fde:	2c1f      	cmp	r4, #31
 8002fe0:	dd1d      	ble.n	800301e <__aeabi_d2f+0xde>
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	1b96      	subs	r6, r2, r6
 8002fe8:	0002      	movs	r2, r0
 8002fea:	40f2      	lsrs	r2, r6
 8002fec:	0016      	movs	r6, r2
 8002fee:	2c20      	cmp	r4, #32
 8002ff0:	d004      	beq.n	8002ffc <__aeabi_d2f+0xbc>
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <__aeabi_d2f+0x108>)
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	4463      	add	r3, ip
 8002ff8:	4098      	lsls	r0, r3
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	002a      	movs	r2, r5
 8002ffe:	1e53      	subs	r3, r2, #1
 8003000:	419a      	sbcs	r2, r3
 8003002:	4332      	orrs	r2, r6
 8003004:	2600      	movs	r6, #0
 8003006:	0753      	lsls	r3, r2, #29
 8003008:	d1ce      	bne.n	8002fa8 <__aeabi_d2f+0x68>
 800300a:	2480      	movs	r4, #128	; 0x80
 800300c:	0013      	movs	r3, r2
 800300e:	04e4      	lsls	r4, r4, #19
 8003010:	2001      	movs	r0, #1
 8003012:	4023      	ands	r3, r4
 8003014:	4222      	tst	r2, r4
 8003016:	d1d3      	bne.n	8002fc0 <__aeabi_d2f+0x80>
 8003018:	e7b0      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800301a:	2300      	movs	r3, #0
 800301c:	e7ad      	b.n	8002f7a <__aeabi_d2f+0x3a>
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <__aeabi_d2f+0x10c>)
 8003020:	4694      	mov	ip, r2
 8003022:	002a      	movs	r2, r5
 8003024:	40e2      	lsrs	r2, r4
 8003026:	0014      	movs	r4, r2
 8003028:	002a      	movs	r2, r5
 800302a:	4463      	add	r3, ip
 800302c:	409a      	lsls	r2, r3
 800302e:	4098      	lsls	r0, r3
 8003030:	1e55      	subs	r5, r2, #1
 8003032:	41aa      	sbcs	r2, r5
 8003034:	4302      	orrs	r2, r0
 8003036:	4322      	orrs	r2, r4
 8003038:	e7e4      	b.n	8003004 <__aeabi_d2f+0xc4>
 800303a:	0033      	movs	r3, r6
 800303c:	e79e      	b.n	8002f7c <__aeabi_d2f+0x3c>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	000007fe 	.word	0x000007fe
 8003044:	fffffc80 	.word	0xfffffc80
 8003048:	fffffca2 	.word	0xfffffca2
 800304c:	fffffc82 	.word	0xfffffc82

08003050 <__clzsi2>:
 8003050:	211c      	movs	r1, #28
 8003052:	2301      	movs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	4298      	cmp	r0, r3
 8003058:	d301      	bcc.n	800305e <__clzsi2+0xe>
 800305a:	0c00      	lsrs	r0, r0, #16
 800305c:	3910      	subs	r1, #16
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	4298      	cmp	r0, r3
 8003062:	d301      	bcc.n	8003068 <__clzsi2+0x18>
 8003064:	0a00      	lsrs	r0, r0, #8
 8003066:	3908      	subs	r1, #8
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	4298      	cmp	r0, r3
 800306c:	d301      	bcc.n	8003072 <__clzsi2+0x22>
 800306e:	0900      	lsrs	r0, r0, #4
 8003070:	3904      	subs	r1, #4
 8003072:	a202      	add	r2, pc, #8	; (adr r2, 800307c <__clzsi2+0x2c>)
 8003074:	5c10      	ldrb	r0, [r2, r0]
 8003076:	1840      	adds	r0, r0, r1
 8003078:	4770      	bx	lr
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	02020304 	.word	0x02020304
 8003080:	01010101 	.word	0x01010101
	...

0800308c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	0018      	movs	r0, r3
 8003096:	230c      	movs	r3, #12
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f011 facd 	bl	801463a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <MX_ADC1_Init+0xf8>)
 80030a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80030a6:	4b36      	ldr	r3, [pc, #216]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	0392      	lsls	r2, r2, #14
 80030ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0392      	lsls	r2, r2, #14
 80030c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030c4:	2208      	movs	r2, #8
 80030c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030dc:	2202      	movs	r2, #2
 80030de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030e2:	2220      	movs	r2, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030f6:	222c      	movs	r2, #44	; 0x2c
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <MX_ADC1_Init+0xf4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003104:	2205      	movs	r2, #5
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <MX_ADC1_Init+0xf4>)
 800310a:	2205      	movs	r2, #5
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003110:	223c      	movs	r2, #60	; 0x3c
 8003112:	2100      	movs	r1, #0
 8003114:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003118:	2200      	movs	r2, #0
 800311a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <MX_ADC1_Init+0xf4>)
 800311e:	0018      	movs	r0, r3
 8003120:	f002 fa20 	bl	8005564 <HAL_ADC_Init>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003128:	f000 fc0a 	bl	8003940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <MX_ADC1_Init+0xfc>)
 8003130:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800313e:	1d3a      	adds	r2, r7, #4
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f002 fde5 	bl	8005d14 <HAL_ADC_ConfigChannel>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d001      	beq.n	8003152 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800314e:	f000 fbf7 	bl	8003940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2204      	movs	r2, #4
 8003156:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003158:	1d3a      	adds	r2, r7, #4
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_ADC1_Init+0xf4>)
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f002 fdd8 	bl	8005d14 <HAL_ADC_ConfigChannel>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8003168:	f000 fbea 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <MX_ADC1_Init+0x100>)
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <MX_ADC1_Init+0xf4>)
 8003170:	2202      	movs	r2, #2
 8003172:	0018      	movs	r0, r3
 8003174:	f002 fb9e 	bl	80058b4 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200032c8 	.word	0x200032c8
 8003184:	40012400 	.word	0x40012400
 8003188:	20000100 	.word	0x20000100
 800318c:	200039dc 	.word	0x200039dc

08003190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b091      	sub	sp, #68	; 0x44
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	232c      	movs	r3, #44	; 0x2c
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f011 fa49 	bl	801463a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	2410      	movs	r4, #16
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	0018      	movs	r0, r3
 80031ae:	231c      	movs	r3, #28
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f011 fa41 	bl	801463a <memset>
  if(adcHandle->Instance==ADC1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a39      	ldr	r2, [pc, #228]	; (80032a4 <HAL_ADC_MspInit+0x114>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d16b      	bne.n	800329a <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	01d2      	lsls	r2, r2, #7
 80031c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	f004 fbf4 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d001      	beq.n	80031e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031dc:	f000 fbb0 	bl	8003940 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0349      	lsls	r1, r1, #13
 80031ea:	430a      	orrs	r2, r1
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 8003202:	2102      	movs	r1, #2
 8003204:	430a      	orrs	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	; 0x34
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_ADC_MspInit+0x118>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_CH0_temp1_Pin|ADC1_CH1_temp2_Pin;
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2203      	movs	r2, #3
 800321a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2203      	movs	r2, #3
 8003220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	187b      	adds	r3, r7, r1
 800322a:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_ADC_MspInit+0x11c>)
 800322c:	0019      	movs	r1, r3
 800322e:	0010      	movs	r0, r2
 8003230:	f003 fd22 	bl	8006c78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_ADC_MspInit+0x124>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800323c:	2205      	movs	r2, #5
 800323e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	0052      	lsls	r2, r2, #1
 8003258:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	00d2      	lsls	r2, r2, #3
 8003260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003264:	2200      	movs	r2, #0
 8003266:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003270:	0018      	movs	r0, r3
 8003272:	f003 f9d9 	bl	8006628 <HAL_DMA_Init>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800327a:	f000 fb61 	bl	8003940 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_ADC_MspInit+0x120>)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	200c      	movs	r0, #12
 8003290:	f003 f998 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003294:	200c      	movs	r0, #12
 8003296:	f003 f9aa 	bl	80065ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b011      	add	sp, #68	; 0x44
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40012400 	.word	0x40012400
 80032a8:	40021000 	.word	0x40021000
 80032ac:	50000400 	.word	0x50000400
 80032b0:	2000332c 	.word	0x2000332c
 80032b4:	40020030 	.word	0x40020030

080032b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_DMA_Init+0x58>)
 80032c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_DMA_Init+0x58>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_DMA_Init+0x58>)
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	2009      	movs	r0, #9
 80032dc:	f003 f972 	bl	80065c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032e0:	2009      	movs	r0, #9
 80032e2:	f003 f984 	bl	80065ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	200a      	movs	r0, #10
 80032ec:	f003 f96a 	bl	80065c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80032f0:	200a      	movs	r0, #10
 80032f2:	f003 f97c 	bl	80065ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	200b      	movs	r0, #11
 80032fc:	f003 f962 	bl	80065c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8003300:	200b      	movs	r0, #11
 8003302:	f003 f974 	bl	80065ee <HAL_NVIC_EnableIRQ>

}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b002      	add	sp, #8
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40021000 	.word	0x40021000

08003314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b08b      	sub	sp, #44	; 0x2c
 8003318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	2414      	movs	r4, #20
 800331c:	193b      	adds	r3, r7, r4
 800331e:	0018      	movs	r0, r3
 8003320:	2314      	movs	r3, #20
 8003322:	001a      	movs	r2, r3
 8003324:	2100      	movs	r1, #0
 8003326:	f011 f988 	bl	801463a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <MX_GPIO_Init+0x15c>)
 800332c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003330:	2104      	movs	r1, #4
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2204      	movs	r2, #4
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003342:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003348:	2120      	movs	r1, #32
 800334a:	430a      	orrs	r2, r1
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
 800334e:	4b48      	ldr	r3, [pc, #288]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b45      	ldr	r3, [pc, #276]	; (8003470 <MX_GPIO_Init+0x15c>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003360:	2101      	movs	r1, #1
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
 8003366:	4b42      	ldr	r3, [pc, #264]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003378:	2102      	movs	r1, #2
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <MX_GPIO_Init+0x15c>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003390:	2108      	movs	r1, #8
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <MX_GPIO_Init+0x15c>)
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2208      	movs	r2, #8
 800339c:	4013      	ands	r3, r2
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <MX_GPIO_Init+0x160>)
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <MX_GPIO_Init+0x164>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	0018      	movs	r0, r3
 80033aa:	f003 fde6 	bl	8006f7a <HAL_GPIO_WritePin>
                          |softstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin, GPIO_PIN_SET);
 80033ae:	4933      	ldr	r1, [pc, #204]	; (800347c <MX_GPIO_Init+0x168>)
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <MX_GPIO_Init+0x164>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	0018      	movs	r0, r3
 80033b6:	f003 fde0 	bl	8006f7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SYS_LED_Pin|LCD_CS_Pin|LCD_DC_Pin|LCD_RES_Pin
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <MX_GPIO_Init+0x160>)
 80033be:	601a      	str	r2, [r3, #0]
                          |softstart_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	2201      	movs	r2, #1
 80033c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <MX_GPIO_Init+0x164>)
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f003 fc4d 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Y1_Pin|Y2_Pin|Y3_Pin|AT25_CS_Pin;
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <MX_GPIO_Init+0x168>)
 80033e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	2201      	movs	r2, #1
 80033e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	2201      	movs	r2, #1
 80033ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <MX_GPIO_Init+0x164>)
 80033fa:	0019      	movs	r1, r3
 80033fc:	0010      	movs	r0, r2
 80033fe:	f003 fc3b 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTP1_Pin|OTP2_Pin;
 8003402:	0021      	movs	r1, r4
 8003404:	187b      	adds	r3, r7, r1
 8003406:	22c0      	movs	r2, #192	; 0xc0
 8003408:	0152      	lsls	r2, r2, #5
 800340a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340c:	000c      	movs	r4, r1
 800340e:	193b      	adds	r3, r7, r4
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	193b      	adds	r3, r7, r4
 8003416:	2201      	movs	r2, #1
 8003418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	193b      	adds	r3, r7, r4
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <MX_GPIO_Init+0x16c>)
 800341e:	0019      	movs	r1, r3
 8003420:	0010      	movs	r0, r2
 8003422:	f003 fc29 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_enter_Pin;
 8003426:	193b      	adds	r3, r7, r4
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	0052      	lsls	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800342e:	193b      	adds	r3, r7, r4
 8003430:	2284      	movs	r2, #132	; 0x84
 8003432:	0392      	lsls	r2, r2, #14
 8003434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003436:	193b      	adds	r3, r7, r4
 8003438:	2201      	movs	r2, #1
 800343a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_enter_GPIO_Port, &GPIO_InitStruct);
 800343c:	193a      	adds	r2, r7, r4
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f003 fc17 	bl	8006c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = X1_Pin|X2_Pin|X1D2_Pin|X4_Pin
 800344a:	193b      	adds	r3, r7, r4
 800344c:	227f      	movs	r2, #127	; 0x7f
 800344e:	601a      	str	r2, [r3, #0]
                          |X5_Pin|X6_Pin|X7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003456:	193b      	adds	r3, r7, r4
 8003458:	2201      	movs	r2, #1
 800345a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800345c:	193b      	adds	r3, r7, r4
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <MX_GPIO_Init+0x170>)
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f003 fc08 	bl	8006c78 <HAL_GPIO_Init>

}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b00b      	add	sp, #44	; 0x2c
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	00001027 	.word	0x00001027
 8003478:	50000800 	.word	0x50000800
 800347c:	0000e008 	.word	0x0000e008
 8003480:	50000400 	.word	0x50000400
 8003484:	50000c00 	.word	0x50000c00

08003488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800348c:	f001 fe4a 	bl	8005124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003490:	f000 f827 	bl	80034e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003494:	f7ff ff3e 	bl	8003314 <MX_GPIO_Init>
  MX_DMA_Init();
 8003498:	f7ff ff0e 	bl	80032b8 <MX_DMA_Init>
  MX_SPI1_Init();
 800349c:	f000 fa56 	bl	800394c <MX_SPI1_Init>
  MX_TIM3_Init();
 80034a0:	f000 fd46 	bl	8003f30 <MX_TIM3_Init>
  MX_TIM6_Init();
 80034a4:	f000 fdaa 	bl	8003ffc <MX_TIM6_Init>
  MX_TIM7_Init();
 80034a8:	f000 fdea 	bl	8004080 <MX_TIM7_Init>
  MX_TIM15_Init();
 80034ac:	f000 fe56 	bl	800415c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80034b0:	f001 fb20 	bl	8004af4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80034b4:	f001 fb70 	bl	8004b98 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80034b8:	f7ff fde8 	bl	800308c <MX_ADC1_Init>
  MX_TIM16_Init();
 80034bc:	f000 ff28 	bl	8004310 <MX_TIM16_Init>
  MX_TIM17_Init();
 80034c0:	f000 ff72 	bl	80043a8 <MX_TIM17_Init>
  MX_TIM14_Init();
 80034c4:	f000 fe20 	bl	8004108 <MX_TIM14_Init>
  MX_TIM1_Init();
 80034c8:	f000 fcb4 	bl	8003e34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80034cc:	f001 fac4 	bl	8004a58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  My_sys_Init();
 80034d0:	f000 f85c 	bl	800358c <My_sys_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/*encoder&Cursor&key*/
	IT_handle();
 80034d4:	f000 f908 	bl	80036e8 <IT_handle>
	/*LCD update*/
	Display_Interface();
 80034d8:	f010 ffa0 	bl	801441c <Display_Interface>

	Check_Error();
 80034dc:	f00e f8d6 	bl	801168c <Check_Error>
	IT_handle();
 80034e0:	e7f8      	b.n	80034d4 <main+0x4c>

080034e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034e2:	b590      	push	{r4, r7, lr}
 80034e4:	b093      	sub	sp, #76	; 0x4c
 80034e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034e8:	2414      	movs	r4, #20
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	0018      	movs	r0, r3
 80034ee:	2334      	movs	r3, #52	; 0x34
 80034f0:	001a      	movs	r2, r3
 80034f2:	2100      	movs	r1, #0
 80034f4:	f011 f8a1 	bl	801463a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	0018      	movs	r0, r3
 80034fc:	2310      	movs	r3, #16
 80034fe:	001a      	movs	r2, r3
 8003500:	2100      	movs	r1, #0
 8003502:	f011 f89a 	bl	801463a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	0018      	movs	r0, r3
 800350c:	f003 fd52 	bl	8006fb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003510:	193b      	adds	r3, r7, r4
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	0252      	lsls	r2, r2, #9
 800351c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800351e:	0021      	movs	r1, r4
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2202      	movs	r2, #2
 8003524:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2203      	movs	r2, #3
 800352a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2210      	movs	r2, #16
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2210      	movs	r2, #16
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	0292      	lsls	r2, r2, #10
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8003540:	187b      	adds	r3, r7, r1
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	05d2      	lsls	r2, r2, #23
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003548:	187b      	adds	r3, r7, r1
 800354a:	0018      	movs	r0, r3
 800354c:	f003 fd7e 	bl	800704c <HAL_RCC_OscConfig>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003554:	f000 f9f4 	bl	8003940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	2207      	movs	r2, #7
 800355c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	2202      	movs	r2, #2
 8003562:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	01d2      	lsls	r2, r2, #7
 8003570:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2102      	movs	r1, #2
 8003576:	0018      	movs	r0, r3
 8003578:	f004 f878 	bl	800766c <HAL_RCC_ClockConfig>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003580:	f000 f9de 	bl	8003940 <Error_Handler>
  }
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b013      	add	sp, #76	; 0x4c
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <My_sys_Init>:

/* USER CODE BEGIN 4 */
void My_sys_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
	Flag.ADC1_IT=0;
 8003592:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <My_sys_Init+0x128>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
	Flag.TIM7_IT=0;
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <My_sys_Init+0x128>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
	Flag.TIM3_IT=0;
 800359e:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <My_sys_Init+0x128>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
	Flag.TIM6_IT=0;
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <My_sys_Init+0x128>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
	Flag.TIM7_IT=0;
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <My_sys_Init+0x128>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
	Flag.TIM17_IT=0;
 80035b0:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <My_sys_Init+0x128>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
	Flag.ERROR_Flag=0;
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <My_sys_Init+0x128>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
	Flag.Encoder_BF=0;
 80035bc:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <My_sys_Init+0x128>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
	/*main interface*/
	xyz.coordinates1=0;
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <My_sys_Init+0x12c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
	xyz.coordinates2=0;
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <My_sys_Init+0x12c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
	xyz.coordinates3=0;
 80035ce:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <My_sys_Init+0x12c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
	/*power off till soft start*/
	Power_AC_Off;
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <My_sys_Init+0x130>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	2120      	movs	r1, #32
 80035da:	0018      	movs	r0, r3
 80035dc:	f003 fccd 	bl	8006f7a <HAL_GPIO_WritePin>
	/*Disable the key at first*/
	keys_EN = DISABLE;
 80035e0:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <My_sys_Init+0x134>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
	//PD0 PD2 key scan init
	SYSCFG_TypeDef  *SYScfg=SYSCFG;
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <My_sys_Init+0x138>)
 80035e8:	607b      	str	r3, [r7, #4]
	SYScfg->CFGR1|=(SYSCFG_CFGR1_UCPD2_STROBE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	00d2      	lsls	r2, r2, #3
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
	//PA8
	SYSCFG_TypeDef  *SYScfg1=SYSCFG;
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <My_sys_Init+0x138>)
 80035fa:	603b      	str	r3, [r7, #0]
	SYScfg1->CFGR1|=(SYSCFG_CFGR1_UCPD1_STROBE);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	431a      	orrs	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	601a      	str	r2, [r3, #0]
	/*other device init*/
	AT_25_init();
 800360a:	f008 fc65 	bl	800bed8 <AT_25_init>
	AT25_Reset();
 800360e:	f009 f86d 	bl	800c6ec <AT25_Reset>
	AT25_load_AD_Param();
 8003612:	f009 f803 	bl	800c61c <AT25_load_AD_Param>
	OLED_Init();
 8003616:	f00e fab7 	bl	8011b88 <OLED_Init>
	/*Cursor off*/
	__HAL_TIM_DISABLE(&htim6);
 800361a:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <My_sys_Init+0x13c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <My_sys_Init+0x140>)
 8003622:	4013      	ands	r3, r2
 8003624:	d10d      	bne.n	8003642 <My_sys_Init+0xb6>
 8003626:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <My_sys_Init+0x13c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <My_sys_Init+0x144>)
 800362e:	4013      	ands	r3, r2
 8003630:	d107      	bne.n	8003642 <My_sys_Init+0xb6>
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <My_sys_Init+0x13c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <My_sys_Init+0x13c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
	/*check temperature*/
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 8003642:	4924      	ldr	r1, [pc, #144]	; (80036d4 <My_sys_Init+0x148>)
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <My_sys_Init+0x14c>)
 8003646:	2202      	movs	r2, #2
 8003648:	0018      	movs	r0, r3
 800364a:	f002 f933 	bl	80058b4 <HAL_ADC_Start_DMA>
	/*start to communicate with mini board*/
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <My_sys_Init+0x150>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b21      	ldr	r3, [pc, #132]	; (80036dc <My_sys_Init+0x150>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2110      	movs	r1, #16
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
	UART_Start_Receive_DMA(&huart2,Uart2_Receive_buffer,20);
 800365e:	4920      	ldr	r1, [pc, #128]	; (80036e0 <My_sys_Init+0x154>)
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <My_sys_Init+0x150>)
 8003662:	2214      	movs	r2, #20
 8003664:	0018      	movs	r0, r3
 8003666:	f007 fe5f 	bl	800b328 <UART_Start_Receive_DMA>
	__HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <My_sys_Init+0x150>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	621a      	str	r2, [r3, #32]
	/*Delay on soft start*/
	DAC_Cmd_send(1,2,0x01);
 8003672:	2201      	movs	r2, #1
 8003674:	2102      	movs	r1, #2
 8003676:	2001      	movs	r0, #1
 8003678:	f009 f8fe 	bl	800c878 <DAC_Cmd_send>
	HAL_Delay(10);
 800367c:	200a      	movs	r0, #10
 800367e:	f001 fdd7 	bl	8005230 <HAL_Delay>
	DAC_Cmd_send(1,4,100);
 8003682:	2264      	movs	r2, #100	; 0x64
 8003684:	2104      	movs	r1, #4
 8003686:	2001      	movs	r0, #1
 8003688:	f009 f8f6 	bl	800c878 <DAC_Cmd_send>
	HAL_Delay(10);
 800368c:	200a      	movs	r0, #10
 800368e:	f001 fdcf 	bl	8005230 <HAL_Delay>
	DAC_Cmd_send(1,5,100);
 8003692:	2264      	movs	r2, #100	; 0x64
 8003694:	2105      	movs	r1, #5
 8003696:	2001      	movs	r0, #1
 8003698:	f009 f8ee 	bl	800c878 <DAC_Cmd_send>
	HAL_Delay(10);
 800369c:	200a      	movs	r0, #10
 800369e:	f001 fdc7 	bl	8005230 <HAL_Delay>
	/*all device initialize�?? soft start timer on，power on*/
	HAL_TIM_Base_Start_IT(&htim1);
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <My_sys_Init+0x158>)
 80036a4:	0018      	movs	r0, r3
 80036a6:	f005 fa67 	bl	8008b78 <HAL_TIM_Base_Start_IT>

}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b002      	add	sp, #8
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	20003388 	.word	0x20003388
 80036b8:	200039f8 	.word	0x200039f8
 80036bc:	50000800 	.word	0x50000800
 80036c0:	20003985 	.word	0x20003985
 80036c4:	40010000 	.word	0x40010000
 80036c8:	200034c8 	.word	0x200034c8
 80036cc:	00001111 	.word	0x00001111
 80036d0:	00000444 	.word	0x00000444
 80036d4:	200039dc 	.word	0x200039dc
 80036d8:	200032c8 	.word	0x200032c8
 80036dc:	20003740 	.word	0x20003740
 80036e0:	200036a0 	.word	0x200036a0
 80036e4:	20003430 	.word	0x20003430

080036e8 <IT_handle>:
/**
  * @brief
  * @retval None
  */
void IT_handle(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0

		if(Flag.TIM3_IT==1)
 80036ec:	4b7e      	ldr	r3, [pc, #504]	; (80038e8 <IT_handle+0x200>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d104      	bne.n	80036fe <IT_handle+0x16>
		{
			Encoder_Data_refresh();
 80036f4:	f00a fcde 	bl	800e0b4 <Encoder_Data_refresh>
			Flag.Encoder_BF=0;
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <IT_handle+0x200>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]
		}
		/*key scan 100Hz*/
		if(Flag.TIM7_IT==1)
 80036fe:	4b7a      	ldr	r3, [pc, #488]	; (80038e8 <IT_handle+0x200>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d104      	bne.n	8003710 <IT_handle+0x28>
		{
			Flag.TIM7_IT=0;
 8003706:	4b78      	ldr	r3, [pc, #480]	; (80038e8 <IT_handle+0x200>)
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
			KEY_Handle();
 800370c:	f00d fed6 	bl	80114bc <KEY_Handle>
		}
		/*Cursor flash*/
		if(Flag.TIM6_IT==1)
 8003710:	4b75      	ldr	r3, [pc, #468]	; (80038e8 <IT_handle+0x200>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d104      	bne.n	8003722 <IT_handle+0x3a>
		{
			Flag.TIM6_IT=0;
 8003718:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <IT_handle+0x200>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
			Cursor_flash();
 800371e:	f010 fd5d 	bl	80141dc <Cursor_flash>

		}
		if(Flag.ADC1_IT==1)
 8003722:	4b71      	ldr	r3, [pc, #452]	; (80038e8 <IT_handle+0x200>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d000      	beq.n	800372c <IT_handle+0x44>
 800372a:	e0cb      	b.n	80038c4 <IT_handle+0x1dc>
		{
			Flag.ADC1_IT=0;
 800372c:	4b6e      	ldr	r3, [pc, #440]	; (80038e8 <IT_handle+0x200>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
			static float R1,R2,T;
			static uint16_t Voltage_Temperature[2];

			Voltage_Temperature[0]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[0],ADC_RESOLUTION_12B);//mv
 8003732:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <IT_handle+0x204>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	001a      	movs	r2, r3
 8003738:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <IT_handle+0x208>)
 800373a:	4353      	muls	r3, r2
 800373c:	496d      	ldr	r1, [pc, #436]	; (80038f4 <IT_handle+0x20c>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7fc fd04 	bl	800014c <__udivsi3>
 8003744:	0003      	movs	r3, r0
 8003746:	b29a      	uxth	r2, r3
 8003748:	4b6b      	ldr	r3, [pc, #428]	; (80038f8 <IT_handle+0x210>)
 800374a:	801a      	strh	r2, [r3, #0]
			Voltage_Temperature[1]=__HAL_ADC_CALC_DATA_TO_VOLTAGE(3300,ADC_temp_buffer[1],ADC_RESOLUTION_12B);//mv
 800374c:	4b67      	ldr	r3, [pc, #412]	; (80038ec <IT_handle+0x204>)
 800374e:	885b      	ldrh	r3, [r3, #2]
 8003750:	001a      	movs	r2, r3
 8003752:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <IT_handle+0x208>)
 8003754:	4353      	muls	r3, r2
 8003756:	4967      	ldr	r1, [pc, #412]	; (80038f4 <IT_handle+0x20c>)
 8003758:	0018      	movs	r0, r3
 800375a:	f7fc fcf7 	bl	800014c <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <IT_handle+0x210>)
 8003764:	805a      	strh	r2, [r3, #2]

			R1=Voltage_Temperature[0]/(Voltage_Temperature[0]-2970);
 8003766:	4b64      	ldr	r3, [pc, #400]	; (80038f8 <IT_handle+0x210>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	001a      	movs	r2, r3
 800376c:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <IT_handle+0x210>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4962      	ldr	r1, [pc, #392]	; (80038fc <IT_handle+0x214>)
 8003772:	468c      	mov	ip, r1
 8003774:	4463      	add	r3, ip
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f7fc fd71 	bl	8000260 <__divsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	0018      	movs	r0, r3
 8003782:	f7fd fd61 	bl	8001248 <__aeabi_i2f>
 8003786:	1c02      	adds	r2, r0, #0
 8003788:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <IT_handle+0x218>)
 800378a:	601a      	str	r2, [r3, #0]
			R2=Voltage_Temperature[1]/(Voltage_Temperature[1]-2970);
 800378c:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <IT_handle+0x210>)
 800378e:	885b      	ldrh	r3, [r3, #2]
 8003790:	001a      	movs	r2, r3
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <IT_handle+0x210>)
 8003794:	885b      	ldrh	r3, [r3, #2]
 8003796:	4959      	ldr	r1, [pc, #356]	; (80038fc <IT_handle+0x214>)
 8003798:	468c      	mov	ip, r1
 800379a:	4463      	add	r3, ip
 800379c:	0019      	movs	r1, r3
 800379e:	0010      	movs	r0, r2
 80037a0:	f7fc fd5e 	bl	8000260 <__divsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fd fd4e 	bl	8001248 <__aeabi_i2f>
 80037ac:	1c02      	adds	r2, r0, #0
 80037ae:	4b55      	ldr	r3, [pc, #340]	; (8003904 <IT_handle+0x21c>)
 80037b0:	601a      	str	r2, [r3, #0]
			T=-6.25*(R1+R2)/2+87.5;//温度电阻曲线 Kohm
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <IT_handle+0x218>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b53      	ldr	r3, [pc, #332]	; (8003904 <IT_handle+0x21c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1c19      	adds	r1, r3, #0
 80037bc:	1c10      	adds	r0, r2, #0
 80037be:	f7fc fee9 	bl	8000594 <__aeabi_fadd>
 80037c2:	1c03      	adds	r3, r0, #0
 80037c4:	1c18      	adds	r0, r3, #0
 80037c6:	f7ff fb73 	bl	8002eb0 <__aeabi_f2d>
 80037ca:	2200      	movs	r2, #0
 80037cc:	4b4e      	ldr	r3, [pc, #312]	; (8003908 <IT_handle+0x220>)
 80037ce:	f7fe fcc7 	bl	8002160 <__aeabi_dmul>
 80037d2:	0002      	movs	r2, r0
 80037d4:	000b      	movs	r3, r1
 80037d6:	0010      	movs	r0, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	2200      	movs	r2, #0
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	05db      	lsls	r3, r3, #23
 80037e0:	f7fe f8bc 	bl	800195c <__aeabi_ddiv>
 80037e4:	0002      	movs	r2, r0
 80037e6:	000b      	movs	r3, r1
 80037e8:	0010      	movs	r0, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	2200      	movs	r2, #0
 80037ee:	4b47      	ldr	r3, [pc, #284]	; (800390c <IT_handle+0x224>)
 80037f0:	f7fd fd78 	bl	80012e4 <__aeabi_dadd>
 80037f4:	0002      	movs	r2, r0
 80037f6:	000b      	movs	r3, r1
 80037f8:	0010      	movs	r0, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	f7ff fba0 	bl	8002f40 <__aeabi_d2f>
 8003800:	1c02      	adds	r2, r0, #0
 8003802:	4b43      	ldr	r3, [pc, #268]	; (8003910 <IT_handle+0x228>)
 8003804:	601a      	str	r2, [r3, #0]
			sprintf(String_Temperature_CH1, "%6.2f", T);//update temperature
 8003806:	4b42      	ldr	r3, [pc, #264]	; (8003910 <IT_handle+0x228>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1c18      	adds	r0, r3, #0
 800380c:	f7ff fb50 	bl	8002eb0 <__aeabi_f2d>
 8003810:	0002      	movs	r2, r0
 8003812:	000b      	movs	r3, r1
 8003814:	493f      	ldr	r1, [pc, #252]	; (8003914 <IT_handle+0x22c>)
 8003816:	4840      	ldr	r0, [pc, #256]	; (8003918 <IT_handle+0x230>)
 8003818:	f011 fc7a 	bl	8015110 <siprintf>
			Flag.FAN_LEVEL=99/5.0*T-485;//compare value
 800381c:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <IT_handle+0x228>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1c18      	adds	r0, r3, #0
 8003822:	f7ff fb45 	bl	8002eb0 <__aeabi_f2d>
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <IT_handle+0x234>)
 8003828:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <IT_handle+0x238>)
 800382a:	f7fe fc99 	bl	8002160 <__aeabi_dmul>
 800382e:	0002      	movs	r2, r0
 8003830:	000b      	movs	r3, r1
 8003832:	0010      	movs	r0, r2
 8003834:	0019      	movs	r1, r3
 8003836:	2200      	movs	r2, #0
 8003838:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <IT_handle+0x23c>)
 800383a:	f7fe fefd 	bl	8002638 <__aeabi_dsub>
 800383e:	0002      	movs	r2, r0
 8003840:	000b      	movs	r3, r1
 8003842:	0010      	movs	r0, r2
 8003844:	0019      	movs	r1, r3
 8003846:	f7ff fb7b 	bl	8002f40 <__aeabi_d2f>
 800384a:	1c02      	adds	r2, r0, #0
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <IT_handle+0x200>)
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,(uint16_t)Flag.FAN_LEVEL);//set compare value
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <IT_handle+0x200>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	1c18      	adds	r0, r3, #0
 8003856:	f7fc fe67 	bl	8000528 <__aeabi_f2uiz>
 800385a:	0003      	movs	r3, r0
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b32      	ldr	r3, [pc, #200]	; (8003928 <IT_handle+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,(uint16_t)Flag.FAN_LEVEL);
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <IT_handle+0x200>)
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	1c18      	adds	r0, r3, #0
 800386a:	f7fc fe5d 	bl	8000528 <__aeabi_f2uiz>
 800386e:	0003      	movs	r3, r0
 8003870:	b29a      	uxth	r2, r3
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <IT_handle+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
			/*过温判别*/
			if(Voltage_Temperature[0]<1500||Voltage_Temperature[1]<1500)
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <IT_handle+0x210>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <IT_handle+0x244>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d904      	bls.n	800388c <IT_handle+0x1a4>
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <IT_handle+0x210>)
 8003884:	885b      	ldrh	r3, [r3, #2]
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <IT_handle+0x244>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d81b      	bhi.n	80038c4 <IT_handle+0x1dc>
			{
				ON_OFF = OFF;
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <IT_handle+0x248>)
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
				OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8003892:	4b28      	ldr	r3, [pc, #160]	; (8003934 <IT_handle+0x24c>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
				Output_Zero();
 8003898:	f009 f8ec 	bl	800ca74 <Output_Zero>
				TIM16_DELAY_OFF();
 800389c:	f00e f866 	bl	801196c <TIM16_DELAY_OFF>
				TIM17_CYCLE_OFF();
 80038a0:	f00e f8d8 	bl	8011a54 <TIM17_CYCLE_OFF>
				Error |= OTP;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <IT_handle+0x250>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2204      	movs	r2, #4
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <IT_handle+0x250>)
 80038b0:	701a      	strb	r2, [r3, #0]
				xyz.coordinates1=4;
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <IT_handle+0x254>)
 80038b4:	2204      	movs	r2, #4
 80038b6:	601a      	str	r2, [r3, #0]
				xyz.coordinates2=1;
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <IT_handle+0x254>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	605a      	str	r2, [r3, #4]
				xyz.coordinates3=0;
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <IT_handle+0x254>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
			}


		}
		if(Flag.TIM14_IT==1)
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <IT_handle+0x200>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d102      	bne.n	80038d2 <IT_handle+0x1ea>
		{
			Flag.TIM14_IT=0;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <IT_handle+0x200>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	621a      	str	r2, [r3, #32]

		}
		if(Flag.TIM17_IT==1)
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <IT_handle+0x200>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <IT_handle+0x1f8>
		{
			Flag.TIM17_IT=0;
 80038da:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <IT_handle+0x200>)
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]

		}


}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20003388 	.word	0x20003388
 80038ec:	200039dc 	.word	0x200039dc
 80038f0:	00000ce4 	.word	0x00000ce4
 80038f4:	00000fff 	.word	0x00000fff
 80038f8:	200033b8 	.word	0x200033b8
 80038fc:	fffff466 	.word	0xfffff466
 8003900:	200033bc 	.word	0x200033bc
 8003904:	200033c0 	.word	0x200033c0
 8003908:	c0190000 	.word	0xc0190000
 800390c:	4055e000 	.word	0x4055e000
 8003910:	200033c4 	.word	0x200033c4
 8003914:	08018330 	.word	0x08018330
 8003918:	20003078 	.word	0x20003078
 800391c:	cccccccd 	.word	0xcccccccd
 8003920:	4033cccc 	.word	0x4033cccc
 8003924:	407e5000 	.word	0x407e5000
 8003928:	200035ac 	.word	0x200035ac
 800392c:	000005db 	.word	0x000005db
 8003930:	20003988 	.word	0x20003988
 8003934:	20003989 	.word	0x20003989
 8003938:	200039d9 	.word	0x200039d9
 800393c:	200039f8 	.word	0x200039f8

08003940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003944:	b672      	cpsid	i
}
 8003946:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003948:	e7fe      	b.n	8003948 <Error_Handler+0x8>
	...

0800394c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <MX_SPI1_Init+0x78>)
 8003954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003958:	2282      	movs	r2, #130	; 0x82
 800395a:	0052      	lsls	r2, r2, #1
 800395c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003966:	22e0      	movs	r2, #224	; 0xe0
 8003968:	00d2      	lsls	r2, r2, #3
 800396a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <MX_SPI1_Init+0x74>)
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <MX_SPI1_Init+0x74>)
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003982:	2208      	movs	r2, #8
 8003984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003988:	2200      	movs	r2, #0
 800398a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <MX_SPI1_Init+0x74>)
 800398e:	2200      	movs	r2, #0
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <MX_SPI1_Init+0x74>)
 8003994:	2200      	movs	r2, #0
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <MX_SPI1_Init+0x74>)
 800399a:	2207      	movs	r2, #7
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <MX_SPI1_Init+0x74>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <MX_SPI1_Init+0x74>)
 80039a6:	2208      	movs	r2, #8
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <MX_SPI1_Init+0x74>)
 80039ac:	0018      	movs	r0, r3
 80039ae:	f004 f93b 	bl	8007c28 <HAL_SPI_Init>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d001      	beq.n	80039ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80039b6:	f7ff ffc3 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200033c8 	.word	0x200033c8
 80039c4:	40013000 	.word	0x40013000

080039c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b08b      	sub	sp, #44	; 0x2c
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	2414      	movs	r4, #20
 80039d2:	193b      	adds	r3, r7, r4
 80039d4:	0018      	movs	r0, r3
 80039d6:	2314      	movs	r3, #20
 80039d8:	001a      	movs	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	f010 fe2d 	bl	801463a <memset>
  if(spiHandle->Instance==SPI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_SPI_MspInit+0xd4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d153      	bne.n	8003a92 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039ea:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	0149      	lsls	r1, r1, #5
 80039f4:	430a      	orrs	r2, r1
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
 80039f8:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 80039fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	015b      	lsls	r3, r3, #5
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	635a      	str	r2, [r3, #52]	; 0x34
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	2208      	movs	r2, #8
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	430a      	orrs	r2, r1
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_SPI_MspInit+0xd8>)
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	0052      	lsls	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	2202      	movs	r2, #2
 8003a42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2201      	movs	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_SPI_MspInit+0xdc>)
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	f003 f90b 	bl	8006c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a62:	0021      	movs	r1, r4
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	22c0      	movs	r2, #192	; 0xc0
 8003a68:	0152      	lsls	r2, r2, #5
 8003a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2202      	movs	r2, #2
 8003a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a84:	187a      	adds	r2, r7, r1
 8003a86:	23a0      	movs	r3, #160	; 0xa0
 8003a88:	05db      	lsls	r3, r3, #23
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f003 f8f3 	bl	8006c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b00b      	add	sp, #44	; 0x2c
 8003a98:	bd90      	pop	{r4, r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	40013000 	.word	0x40013000
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	50000c00 	.word	0x50000c00

08003aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_MspInit+0x44>)
 8003ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_MspInit+0x44>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_MspInit+0x44>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_MspInit+0x44>)
 8003ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_MspInit+0x44>)
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	0549      	lsls	r1, r1, #21
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_MspInit+0x44>)
 8003ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	055b      	lsls	r3, r3, #21
 8003adc:	4013      	ands	r3, r2
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	40021000 	.word	0x40021000

08003af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <NMI_Handler+0x4>

08003af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afa:	e7fe      	b.n	8003afa <HardFault_Handler+0x4>

08003afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b14:	f001 fb70 	bl	80051f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <DMA1_Channel1_IRQHandler+0x14>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f002 ff5a 	bl	80069e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20003868 	.word	0x20003868

08003b38 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <DMA1_Channel2_3_IRQHandler+0x14>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f002 ff4e 	bl	80069e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	2000332c 	.word	0x2000332c

08003b50 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8003b56:	0018      	movs	r0, r3
 8003b58:	f002 ff42 	bl	80069e0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f002 ff3e 	bl	80069e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	200038c4 	.word	0x200038c4
 8003b70:	20003920 	.word	0x20003920

08003b74 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <ADC1_IRQHandler+0x14>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f001 ff9a 	bl	8005ab4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	200032c8 	.word	0x200032c8

08003b8c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003b92:	0018      	movs	r0, r3
 8003b94:	f005 fad6 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	20003430 	.word	0x20003430

08003ba4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <TIM3_IRQHandler+0x14>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f005 faca 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	2000347c 	.word	0x2000347c

08003bbc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <TIM6_IRQHandler+0x14>)
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f005 fabe 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  //TIM6_Protect_IT_Handle();
  /* USER CODE END TIM6_IRQn 1 */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	200034c8 	.word	0x200034c8

08003bd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <TIM7_IRQHandler+0x14>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f005 fab2 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  //OLED光标显示接口
  //TIM7_Oled_IT_Handle();
  /* USER CODE END TIM7_IRQn 1 */
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20003514 	.word	0x20003514

08003bec <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <TIM14_IRQHandler+0x14>)
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f005 faa6 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	20003560 	.word	0x20003560

08003c04 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <TIM16_IRQHandler+0x14>)
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f005 fa9a 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */


  /* USER CODE END TIM16_IRQn 1 */
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	200035f8 	.word	0x200035f8

08003c1c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <TIM17_IRQHandler+0x14>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f005 fa8e 	bl	8009144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */


  /* USER CODE END TIM17_IRQn 1 */
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20003644 	.word	0x20003644

08003c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <USART1_IRQHandler+0x14>)
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f006 fcb4 	bl	800a5a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	200036ac 	.word	0x200036ac

08003c4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c50:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c52:	0018      	movs	r0, r3
 8003c54:	f006 fca8 	bl	800a5a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	2210      	movs	r2, #16
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d11d      	bne.n	8003ca2 <USART2_IRQHandler+0x56>
  {

	    //HAL_UART_DMAStop(&huart2);
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);    //关了空闲中断
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2110      	movs	r1, #16
 8003c72:	438a      	bics	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
	    __HAL_UART_CLEAR_IDLEFLAG(&huart2);				//清除IDLE标志
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	621a      	str	r2, [r3, #32]
	    __HAL_UART_DISABLE_IT(&huart2,UART_IT_IDLE);	//清除IDLE标志
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2110      	movs	r1, #16
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]

	    USART2_IDLECallback();
 8003c8e:	f001 f95d 	bl	8004f4c <USART2_IDLECallback>

	    __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);    	//使能空闲中断
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <USART2_IRQHandler+0x5c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2110      	movs	r1, #16
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20003740 	.word	0x20003740

08003cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  return 1;
 8003cb0:	2301      	movs	r3, #1
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_kill>:

int _kill(int pid, int sig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cc2:	f010 fc7d 	bl	80145c0 <__errno>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	2216      	movs	r2, #22
 8003cca:	601a      	str	r2, [r3, #0]
  return -1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	425b      	negs	r3, r3
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_exit>:

void _exit (int status)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	425a      	negs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ffe5 	bl	8003cb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cee:	e7fe      	b.n	8003cee <_exit+0x16>

08003cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e00a      	b.n	8003d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d02:	e000      	b.n	8003d06 <_read+0x16>
 8003d04:	bf00      	nop
 8003d06:	0001      	movs	r1, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	60ba      	str	r2, [r7, #8]
 8003d0e:	b2ca      	uxtb	r2, r1
 8003d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dbf0      	blt.n	8003d02 <_read+0x12>
  }

  return len;
 8003d20:	687b      	ldr	r3, [r7, #4]
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e009      	b.n	8003d50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	60ba      	str	r2, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	0018      	movs	r0, r3
 8003d46:	e000      	b.n	8003d4a <_write+0x20>
 8003d48:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	dbf1      	blt.n	8003d3c <_write+0x12>
  }
  return len;
 8003d58:	687b      	ldr	r3, [r7, #4]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_close>:

int _close(int file)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	425b      	negs	r3, r3
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	0192      	lsls	r2, r2, #6
 8003d86:	605a      	str	r2, [r3, #4]
  return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_isatty>:

int _isatty(int file)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <_sbrk+0x5c>)
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <_sbrk+0x60>)
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <_sbrk+0x64>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <_sbrk+0x64>)
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <_sbrk+0x68>)
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <_sbrk+0x64>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d207      	bcs.n	8003dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dec:	f010 fbe8 	bl	80145c0 <__errno>
 8003df0:	0003      	movs	r3, r0
 8003df2:	220c      	movs	r2, #12
 8003df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	425b      	negs	r3, r3
 8003dfa:	e009      	b.n	8003e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <_sbrk+0x64>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <_sbrk+0x64>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	18d2      	adds	r2, r2, r3
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <_sbrk+0x64>)
 8003e0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b006      	add	sp, #24
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20009000 	.word	0x20009000
 8003e1c:	00000400 	.word	0x00000400
 8003e20:	2000342c 	.word	0x2000342c
 8003e24:	20003aa8 	.word	0x20003aa8

08003e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	0018      	movs	r0, r3
 8003e40:	2310      	movs	r3, #16
 8003e42:	001a      	movs	r2, r3
 8003e44:	2100      	movs	r1, #0
 8003e46:	f010 fbf8 	bl	801463a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	230c      	movs	r3, #12
 8003e50:	001a      	movs	r2, r3
 8003e52:	2100      	movs	r1, #0
 8003e54:	f010 fbf1 	bl	801463a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e58:	4b2f      	ldr	r3, [pc, #188]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e5a:	4a30      	ldr	r2, [pc, #192]	; (8003f1c <MX_TIM1_Init+0xe8>)
 8003e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <MX_TIM1_Init+0xec>)
 8003e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e64:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <MX_TIM1_Init+0xf0>)
 8003e6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e70:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e82:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003e84:	0018      	movs	r0, r3
 8003e86:	f004 fdd1 	bl	8008a2c <HAL_TIM_Base_Init>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003e8e:	f7ff fd57 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e92:	2110      	movs	r1, #16
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	0152      	lsls	r2, r2, #5
 8003e9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e9c:	187a      	adds	r2, r7, r1
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f005 fb80 	bl	80095a8 <HAL_TIM_ConfigClockSource>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003eac:	f7ff fd48 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ec2:	1d3a      	adds	r2, r7, #4
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f006 f85d 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003ed2:	f7ff fd35 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2202      	movs	r2, #2
 8003edc:	4252      	negs	r2, r2
 8003ede:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim1,0x00);
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim1);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <MX_TIM1_Init+0xf4>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d10d      	bne.n	8003f10 <MX_TIM1_Init+0xdc>
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <MX_TIM1_Init+0xf8>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	d107      	bne.n	8003f10 <MX_TIM1_Init+0xdc>
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <MX_TIM1_Init+0xe4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b008      	add	sp, #32
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20003430 	.word	0x20003430
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	0000f9ff 	.word	0x0000f9ff
 8003f24:	00001387 	.word	0x00001387
 8003f28:	00001111 	.word	0x00001111
 8003f2c:	00000444 	.word	0x00000444

08003f30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b08d      	sub	sp, #52	; 0x34
 8003f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f36:	240c      	movs	r4, #12
 8003f38:	193b      	adds	r3, r7, r4
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	2324      	movs	r3, #36	; 0x24
 8003f3e:	001a      	movs	r2, r3
 8003f40:	2100      	movs	r1, #0
 8003f42:	f010 fb7a 	bl	801463a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f46:	003b      	movs	r3, r7
 8003f48:	0018      	movs	r0, r3
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	001a      	movs	r2, r3
 8003f4e:	2100      	movs	r1, #0
 8003f50:	f010 fb73 	bl	801463a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f56:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <MX_TIM3_Init+0xc8>)
 8003f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f5a:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f78:	0021      	movs	r1, r4
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	2200      	movs	r2, #0
 8003f84:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	2201      	movs	r2, #1
 8003f8a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	2200      	movs	r2, #0
 8003fae:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003fb0:	187a      	adds	r2, r7, r1
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003fb4:	0011      	movs	r1, r2
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f004 ff78 	bl	8008eac <HAL_TIM_Encoder_Init>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003fc0:	f7ff fcbe 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc4:	003b      	movs	r3, r7
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fca:	003b      	movs	r3, r7
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fd0:	003a      	movs	r2, r7
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f005 ffd6 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003fe0:	f7ff fcae 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <MX_TIM3_Init+0xc4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);//encoder on
  /* USER CODE END TIM3_Init 2 */

}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b00d      	add	sp, #52	; 0x34
 8003ff2:	bd90      	pop	{r4, r7, pc}
 8003ff4:	2000347c 	.word	0x2000347c
 8003ff8:	40000400 	.word	0x40000400

08003ffc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	0018      	movs	r0, r3
 8004006:	230c      	movs	r3, #12
 8004008:	001a      	movs	r2, r3
 800400a:	2100      	movs	r1, #0
 800400c:	f010 fb15 	bl	801463a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <MX_TIM6_Init+0x74>)
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <MX_TIM6_Init+0x78>)
 8004014:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6399;
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <MX_TIM6_Init+0x74>)
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <MX_TIM6_Init+0x7c>)
 800401a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <MX_TIM6_Init+0x74>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <MX_TIM6_Init+0x74>)
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <MX_TIM6_Init+0x80>)
 8004026:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <MX_TIM6_Init+0x74>)
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <MX_TIM6_Init+0x74>)
 8004030:	0018      	movs	r0, r3
 8004032:	f004 fcfb 	bl	8008a2c <HAL_TIM_Base_Init>
 8004036:	1e03      	subs	r3, r0, #0
 8004038:	d001      	beq.n	800403e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800403a:	f7ff fc81 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403e:	1d3b      	adds	r3, r7, #4
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800404a:	1d3a      	adds	r2, r7, #4
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <MX_TIM6_Init+0x74>)
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f005 ff99 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800405a:	f7ff fc71 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <MX_TIM6_Init+0x74>)
 8004060:	0018      	movs	r0, r3
 8004062:	f004 fd89 	bl	8008b78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	200034c8 	.word	0x200034c8
 8004074:	40001000 	.word	0x40001000
 8004078:	000018ff 	.word	0x000018ff
 800407c:	00001387 	.word	0x00001387

08004080 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	0018      	movs	r0, r3
 800408a:	230c      	movs	r3, #12
 800408c:	001a      	movs	r2, r3
 800408e:	2100      	movs	r1, #0
 8004090:	f010 fad3 	bl	801463a <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <MX_TIM7_Init+0x7c>)
 8004096:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <MX_TIM7_Init+0x80>)
 8004098:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6399;
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <MX_TIM7_Init+0x7c>)
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <MX_TIM7_Init+0x84>)
 800409e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040a8:	2209      	movs	r2, #9
 80040aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040b4:	0018      	movs	r0, r3
 80040b6:	f004 fcb9 	bl	8008a2c <HAL_TIM_Base_Init>
 80040ba:	1e03      	subs	r3, r0, #0
 80040bc:	d001      	beq.n	80040c2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80040be:	f7ff fc3f 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80040ce:	1d3a      	adds	r2, r7, #4
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f005 ff57 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80040de:	f7ff fc2f 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim7,TIM_IT_UPDATE);
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4252      	negs	r2, r2
 80040ea:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim7);
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <MX_TIM7_Init+0x7c>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f004 fd42 	bl	8008b78 <HAL_TIM_Base_Start_IT>
  //__HAL_TIM_DISABLE(&htim7);
  /* USER CODE END TIM7_Init 2 */

}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20003514 	.word	0x20003514
 8004100:	40001400 	.word	0x40001400
 8004104:	000018ff 	.word	0x000018ff

08004108 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <MX_TIM14_Init+0x48>)
 800410e:	4a11      	ldr	r2, [pc, #68]	; (8004154 <MX_TIM14_Init+0x4c>)
 8004110:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63999;
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <MX_TIM14_Init+0x48>)
 8004114:	4a10      	ldr	r2, [pc, #64]	; (8004158 <MX_TIM14_Init+0x50>)
 8004116:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <MX_TIM14_Init+0x48>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <MX_TIM14_Init+0x48>)
 8004120:	22f4      	movs	r2, #244	; 0xf4
 8004122:	32ff      	adds	r2, #255	; 0xff
 8004124:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <MX_TIM14_Init+0x48>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800412c:	4b08      	ldr	r3, [pc, #32]	; (8004150 <MX_TIM14_Init+0x48>)
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <MX_TIM14_Init+0x48>)
 8004134:	0018      	movs	r0, r3
 8004136:	f004 fc79 	bl	8008a2c <HAL_TIM_Base_Init>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d001      	beq.n	8004142 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800413e:	f7ff fbff 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
	/*check error*/
	HAL_TIM_Base_Start_IT(&htim14);
 8004142:	4b03      	ldr	r3, [pc, #12]	; (8004150 <MX_TIM14_Init+0x48>)
 8004144:	0018      	movs	r0, r3
 8004146:	f004 fd17 	bl	8008b78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20003560 	.word	0x20003560
 8004154:	40002000 	.word	0x40002000
 8004158:	0000f9ff 	.word	0x0000f9ff

0800415c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b09c      	sub	sp, #112	; 0x70
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004162:	2360      	movs	r3, #96	; 0x60
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	0018      	movs	r0, r3
 8004168:	2310      	movs	r3, #16
 800416a:	001a      	movs	r2, r3
 800416c:	2100      	movs	r1, #0
 800416e:	f010 fa64 	bl	801463a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004172:	2354      	movs	r3, #84	; 0x54
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	0018      	movs	r0, r3
 8004178:	230c      	movs	r3, #12
 800417a:	001a      	movs	r2, r3
 800417c:	2100      	movs	r1, #0
 800417e:	f010 fa5c 	bl	801463a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004182:	2338      	movs	r3, #56	; 0x38
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	0018      	movs	r0, r3
 8004188:	231c      	movs	r3, #28
 800418a:	001a      	movs	r2, r3
 800418c:	2100      	movs	r1, #0
 800418e:	f010 fa54 	bl	801463a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	0018      	movs	r0, r3
 8004196:	2334      	movs	r3, #52	; 0x34
 8004198:	001a      	movs	r2, r3
 800419a:	2100      	movs	r1, #0
 800419c:	f010 fa4d 	bl	801463a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80041a0:	4b58      	ldr	r3, [pc, #352]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041a2:	4a59      	ldr	r2, [pc, #356]	; (8004308 <MX_TIM15_Init+0x1ac>)
 80041a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80041a6:	4b57      	ldr	r3, [pc, #348]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041a8:	223f      	movs	r2, #63	; 0x3f
 80041aa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ac:	4b55      	ldr	r3, [pc, #340]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80041b2:	4b54      	ldr	r3, [pc, #336]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041b4:	4a55      	ldr	r2, [pc, #340]	; (800430c <MX_TIM15_Init+0x1b0>)
 80041b6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b8:	4b52      	ldr	r3, [pc, #328]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80041be:	4b51      	ldr	r3, [pc, #324]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80041ca:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041cc:	0018      	movs	r0, r3
 80041ce:	f004 fc2d 	bl	8008a2c <HAL_TIM_Base_Init>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80041d6:	f7ff fbb3 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041da:	2160      	movs	r1, #96	; 0x60
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	0152      	lsls	r2, r2, #5
 80041e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80041e4:	187a      	adds	r2, r7, r1
 80041e6:	4b47      	ldr	r3, [pc, #284]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f005 f9dc 	bl	80095a8 <HAL_TIM_ConfigClockSource>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d001      	beq.n	80041f8 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80041f4:	f7ff fba4 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80041f8:	4b42      	ldr	r3, [pc, #264]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80041fa:	0018      	movs	r0, r3
 80041fc:	f004 fd12 	bl	8008c24 <HAL_TIM_PWM_Init>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8004204:	f7ff fb9c 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004208:	2154      	movs	r1, #84	; 0x54
 800420a:	187b      	adds	r3, r7, r1
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004210:	187b      	adds	r3, r7, r1
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004216:	187a      	adds	r2, r7, r1
 8004218:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <MX_TIM15_Init+0x1a8>)
 800421a:	0011      	movs	r1, r2
 800421c:	0018      	movs	r0, r3
 800421e:	f005 feb3 	bl	8009f88 <HAL_TIMEx_MasterConfigSynchronization>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d001      	beq.n	800422a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8004226:	f7ff fb8b 	bl	8003940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800422a:	2138      	movs	r1, #56	; 0x38
 800422c:	187b      	adds	r3, r7, r1
 800422e:	2260      	movs	r2, #96	; 0x60
 8004230:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 99;
 8004232:	187b      	adds	r3, r7, r1
 8004234:	2263      	movs	r2, #99	; 0x63
 8004236:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004238:	187b      	adds	r3, r7, r1
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800423e:	187b      	adds	r3, r7, r1
 8004240:	2200      	movs	r2, #0
 8004242:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004244:	187b      	adds	r3, r7, r1
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800424a:	187b      	adds	r3, r7, r1
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004250:	187b      	adds	r3, r7, r1
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004256:	1879      	adds	r1, r7, r1
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <MX_TIM15_Init+0x1a8>)
 800425a:	2200      	movs	r2, #0
 800425c:	0018      	movs	r0, r3
 800425e:	f005 f8a3 	bl	80093a8 <HAL_TIM_PWM_ConfigChannel>
 8004262:	1e03      	subs	r3, r0, #0
 8004264:	d001      	beq.n	800426a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004266:	f7ff fb6b 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800426a:	2338      	movs	r3, #56	; 0x38
 800426c:	18f9      	adds	r1, r7, r3
 800426e:	4b25      	ldr	r3, [pc, #148]	; (8004304 <MX_TIM15_Init+0x1a8>)
 8004270:	2204      	movs	r2, #4
 8004272:	0018      	movs	r0, r3
 8004274:	f005 f898 	bl	80093a8 <HAL_TIM_PWM_ConfigChannel>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d001      	beq.n	8004280 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 800427c:	f7ff fb60 	bl	8003940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	2200      	movs	r2, #0
 8004296:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	0192      	lsls	r2, r2, #6
 80042a4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042ac:	1d3b      	adds	r3, r7, #4
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80042b2:	1d3a      	adds	r2, r7, #4
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042b6:	0011      	movs	r1, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f005 fecd 	bl	800a058 <HAL_TIMEx_ConfigBreakDeadTime>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d001      	beq.n	80042c6 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 80042c2:	f7ff fb3d 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
	HAL_TIM_Base_Start(&htim15);
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042c8:	0018      	movs	r0, r3
 80042ca:	f004 fc07 	bl	8008adc <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 10);
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	220a      	movs	r2, #10
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 10);
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	220a      	movs	r2, #10
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042e0:	2100      	movs	r1, #0
 80042e2:	0018      	movs	r0, r3
 80042e4:	f004 fcfe 	bl	8008ce4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042ea:	2104      	movs	r1, #4
 80042ec:	0018      	movs	r0, r3
 80042ee:	f004 fcf9 	bl	8008ce4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80042f2:	4b04      	ldr	r3, [pc, #16]	; (8004304 <MX_TIM15_Init+0x1a8>)
 80042f4:	0018      	movs	r0, r3
 80042f6:	f000 f9c3 	bl	8004680 <HAL_TIM_MspPostInit>

}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b01c      	add	sp, #112	; 0x70
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	200035ac 	.word	0x200035ac
 8004308:	40014000 	.word	0x40014000
 800430c:	000003e7 	.word	0x000003e7

08004310 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004314:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <MX_TIM16_Init+0x80>)
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <MX_TIM16_Init+0x84>)
 8004318:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63999;
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <MX_TIM16_Init+0x80>)
 800431c:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <MX_TIM16_Init+0x88>)
 800431e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <MX_TIM16_Init+0x80>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <MX_TIM16_Init+0x80>)
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <MX_TIM16_Init+0x8c>)
 800432a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <MX_TIM16_Init+0x80>)
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004332:	4b17      	ldr	r3, [pc, #92]	; (8004390 <MX_TIM16_Init+0x80>)
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <MX_TIM16_Init+0x80>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800433e:	4b14      	ldr	r3, [pc, #80]	; (8004390 <MX_TIM16_Init+0x80>)
 8004340:	0018      	movs	r0, r3
 8004342:	f004 fb73 	bl	8008a2c <HAL_TIM_Base_Init>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d001      	beq.n	800434e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800434a:	f7ff faf9 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <MX_TIM16_Init+0x80>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2202      	movs	r2, #2
 8004354:	4252      	negs	r2, r2
 8004356:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim16,0x00);
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <MX_TIM16_Init+0x80>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim16);
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <MX_TIM16_Init+0x80>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <MX_TIM16_Init+0x90>)
 8004368:	4013      	ands	r3, r2
 800436a:	d10d      	bne.n	8004388 <MX_TIM16_Init+0x78>
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <MX_TIM16_Init+0x80>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <MX_TIM16_Init+0x94>)
 8004374:	4013      	ands	r3, r2
 8004376:	d107      	bne.n	8004388 <MX_TIM16_Init+0x78>
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <MX_TIM16_Init+0x80>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <MX_TIM16_Init+0x80>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2101      	movs	r1, #1
 8004384:	438a      	bics	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM16_Init 2 */

}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	200035f8 	.word	0x200035f8
 8004394:	40014400 	.word	0x40014400
 8004398:	0000f9ff 	.word	0x0000f9ff
 800439c:	00001387 	.word	0x00001387
 80043a0:	00001111 	.word	0x00001111
 80043a4:	00000444 	.word	0x00000444

080043a8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <MX_TIM17_Init+0x80>)
 80043ae:	4a1f      	ldr	r2, [pc, #124]	; (800442c <MX_TIM17_Init+0x84>)
 80043b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6399;
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <MX_TIM17_Init+0x80>)
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <MX_TIM17_Init+0x88>)
 80043b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <MX_TIM17_Init+0x80>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9;
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <MX_TIM17_Init+0x80>)
 80043c0:	2209      	movs	r2, #9
 80043c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <MX_TIM17_Init+0x80>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80043ca:	4b17      	ldr	r3, [pc, #92]	; (8004428 <MX_TIM17_Init+0x80>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <MX_TIM17_Init+0x80>)
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <MX_TIM17_Init+0x80>)
 80043d8:	0018      	movs	r0, r3
 80043da:	f004 fb27 	bl	8008a2c <HAL_TIM_Base_Init>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80043e2:	f7ff faad 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim17,TIM_IT_UPDATE);
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <MX_TIM17_Init+0x80>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2202      	movs	r2, #2
 80043ec:	4252      	negs	r2, r2
 80043ee:	611a      	str	r2, [r3, #16]
  __HAL_TIM_SET_COUNTER(&htim17,0x00);
 80043f0:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <MX_TIM17_Init+0x80>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_DISABLE(&htim17);
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <MX_TIM17_Init+0x80>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <MX_TIM17_Init+0x8c>)
 8004400:	4013      	ands	r3, r2
 8004402:	d10d      	bne.n	8004420 <MX_TIM17_Init+0x78>
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <MX_TIM17_Init+0x80>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <MX_TIM17_Init+0x90>)
 800440c:	4013      	ands	r3, r2
 800440e:	d107      	bne.n	8004420 <MX_TIM17_Init+0x78>
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <MX_TIM17_Init+0x80>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b04      	ldr	r3, [pc, #16]	; (8004428 <MX_TIM17_Init+0x80>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	438a      	bics	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM17_Init 2 */

}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	20003644 	.word	0x20003644
 800442c:	40014800 	.word	0x40014800
 8004430:	000018ff 	.word	0x000018ff
 8004434:	00001111 	.word	0x00001111
 8004438:	00000444 	.word	0x00000444

0800443c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a5c      	ldr	r2, [pc, #368]	; (80045bc <HAL_TIM_Base_MspInit+0x180>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d116      	bne.n	800447c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800444e:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004452:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004454:	2180      	movs	r1, #128	; 0x80
 8004456:	0109      	lsls	r1, r1, #4
 8004458:	430a      	orrs	r2, r1
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
 800445c:	4b58      	ldr	r3, [pc, #352]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800445e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4013      	ands	r3, r2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800446a:	2200      	movs	r2, #0
 800446c:	2100      	movs	r1, #0
 800446e:	200d      	movs	r0, #13
 8004470:	f002 f8a8 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004474:	200d      	movs	r0, #13
 8004476:	f002 f8ba 	bl	80065ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800447a:	e09a      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a50      	ldr	r2, [pc, #320]	; (80045c4 <HAL_TIM_Base_MspInit+0x188>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d114      	bne.n	80044b0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004486:	4b4e      	ldr	r3, [pc, #312]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448a:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800448c:	2110      	movs	r1, #16
 800448e:	430a      	orrs	r2, r1
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c
 8004492:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	2210      	movs	r2, #16
 8004498:	4013      	ands	r3, r2
 800449a:	623b      	str	r3, [r7, #32]
 800449c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	2100      	movs	r1, #0
 80044a2:	2011      	movs	r0, #17
 80044a4:	f002 f88e 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80044a8:	2011      	movs	r0, #17
 80044aa:	f002 f8a0 	bl	80065ee <HAL_NVIC_EnableIRQ>
}
 80044ae:	e080      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a44      	ldr	r2, [pc, #272]	; (80045c8 <HAL_TIM_Base_MspInit+0x18c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d114      	bne.n	80044e4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044be:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044c0:	2120      	movs	r1, #32
 80044c2:	430a      	orrs	r2, r1
 80044c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	2220      	movs	r2, #32
 80044cc:	4013      	ands	r3, r2
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2100      	movs	r1, #0
 80044d6:	2012      	movs	r0, #18
 80044d8:	f002 f874 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80044dc:	2012      	movs	r0, #18
 80044de:	f002 f886 	bl	80065ee <HAL_NVIC_EnableIRQ>
}
 80044e2:	e066      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM14)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a38      	ldr	r2, [pc, #224]	; (80045cc <HAL_TIM_Base_MspInit+0x190>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d116      	bne.n	800451c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044ee:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f2:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044f4:	2180      	movs	r1, #128	; 0x80
 80044f6:	0209      	lsls	r1, r1, #8
 80044f8:	430a      	orrs	r2, r1
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
 80044fc:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 80044fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	2013      	movs	r0, #19
 8004510:	f002 f858 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004514:	2013      	movs	r0, #19
 8004516:	f002 f86a 	bl	80065ee <HAL_NVIC_EnableIRQ>
}
 800451a:	e04a      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <HAL_TIM_Base_MspInit+0x194>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800452a:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	0249      	lsls	r1, r1, #9
 8004530:	430a      	orrs	r2, r1
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
 8004534:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	025b      	lsls	r3, r3, #9
 800453c:	4013      	ands	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697b      	ldr	r3, [r7, #20]
}
 8004542:	e036      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <HAL_TIM_Base_MspInit+0x198>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d116      	bne.n	800457c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800454e:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0289      	lsls	r1, r1, #10
 8004558:	430a      	orrs	r2, r1
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
 800455c:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800455e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	029b      	lsls	r3, r3, #10
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800456a:	2200      	movs	r2, #0
 800456c:	2100      	movs	r1, #0
 800456e:	2015      	movs	r0, #21
 8004570:	f002 f828 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004574:	2015      	movs	r0, #21
 8004576:	f002 f83a 	bl	80065ee <HAL_NVIC_EnableIRQ>
}
 800457a:	e01a      	b.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_TIM_Base_MspInit+0x19c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d115      	bne.n	80045b2 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004586:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	02c9      	lsls	r1, r1, #11
 8004590:	430a      	orrs	r2, r1
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_TIM_Base_MspInit+0x184>)
 8004596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	02db      	lsls	r3, r3, #11
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	2016      	movs	r0, #22
 80045a8:	f002 f80c 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80045ac:	2016      	movs	r0, #22
 80045ae:	f002 f81e 	bl	80065ee <HAL_NVIC_EnableIRQ>
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b00a      	add	sp, #40	; 0x28
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40001000 	.word	0x40001000
 80045c8:	40001400 	.word	0x40001400
 80045cc:	40002000 	.word	0x40002000
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b08b      	sub	sp, #44	; 0x2c
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	2414      	movs	r4, #20
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	0018      	movs	r0, r3
 80045ea:	2314      	movs	r3, #20
 80045ec:	001a      	movs	r2, r3
 80045ee:	2100      	movs	r1, #0
 80045f0:	f010 f823 	bl	801463a <memset>
  if(tim_encoderHandle->Instance==TIM3)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_TIM_Encoder_MspInit+0x98>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d135      	bne.n	800466a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004604:	2102      	movs	r1, #2
 8004606:	430a      	orrs	r2, r1
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
 800460a:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	2202      	movs	r2, #2
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004616:	4b18      	ldr	r3, [pc, #96]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 800461c:	2104      	movs	r1, #4
 800461e:	430a      	orrs	r2, r1
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	2204      	movs	r2, #4
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800462e:	0021      	movs	r1, r4
 8004630:	187b      	adds	r3, r7, r1
 8004632:	22c0      	movs	r2, #192	; 0xc0
 8004634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	187b      	adds	r3, r7, r1
 8004638:	2202      	movs	r2, #2
 800463a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004642:	187b      	adds	r3, r7, r1
 8004644:	2200      	movs	r2, #0
 8004646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004648:	187b      	adds	r3, r7, r1
 800464a:	2201      	movs	r2, #1
 800464c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800464e:	187b      	adds	r3, r7, r1
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <HAL_TIM_Encoder_MspInit+0xa0>)
 8004652:	0019      	movs	r1, r3
 8004654:	0010      	movs	r0, r2
 8004656:	f002 fb0f 	bl	8006c78 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	2010      	movs	r0, #16
 8004660:	f001 ffb0 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004664:	2010      	movs	r0, #16
 8004666:	f001 ffc2 	bl	80065ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b00b      	add	sp, #44	; 0x2c
 8004670:	bd90      	pop	{r4, r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	40000400 	.word	0x40000400
 8004678:	40021000 	.word	0x40021000
 800467c:	50000800 	.word	0x50000800

08004680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	240c      	movs	r4, #12
 800468a:	193b      	adds	r3, r7, r4
 800468c:	0018      	movs	r0, r3
 800468e:	2314      	movs	r3, #20
 8004690:	001a      	movs	r2, r3
 8004692:	2100      	movs	r1, #0
 8004694:	f00f ffd1 	bl	801463a <memset>
  if(timHandle->Instance==TIM15)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <HAL_TIM_MspPostInit+0x70>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d122      	bne.n	80046e8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_TIM_MspPostInit+0x74>)
 80046a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <HAL_TIM_MspPostInit+0x74>)
 80046a8:	2102      	movs	r1, #2
 80046aa:	430a      	orrs	r2, r1
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_TIM_MspPostInit+0x74>)
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = FAN_CRTL1_Pin|FAN_CTRL2_Pin;
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	22c0      	movs	r2, #192	; 0xc0
 80046be:	0212      	lsls	r2, r2, #8
 80046c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	0021      	movs	r1, r4
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	2202      	movs	r2, #2
 80046c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	187b      	adds	r3, r7, r1
 80046cc:	2200      	movs	r2, #0
 80046ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	2200      	movs	r2, #0
 80046d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2205      	movs	r2, #5
 80046da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	4a06      	ldr	r2, [pc, #24]	; (80046f8 <HAL_TIM_MspPostInit+0x78>)
 80046e0:	0019      	movs	r1, r3
 80046e2:	0010      	movs	r0, r2
 80046e4:	f002 fac8 	bl	8006c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b009      	add	sp, #36	; 0x24
 80046ee:	bd90      	pop	{r4, r7, pc}
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40021000 	.word	0x40021000
 80046f8:	50000400 	.word	0x50000400

080046fc <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

	/*soft start*/
	if(htim==&htim1)
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4bb6      	ldr	r3, [pc, #728]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004708:	429a      	cmp	r2, r3
 800470a:	d000      	beq.n	800470e <HAL_TIM_PeriodElapsedCallback+0x12>
 800470c:	e0b5      	b.n	800487a <HAL_TIM_PeriodElapsedCallback+0x17e>
	{
		keys_EN = ENABLE;//ENABLE按键
 800470e:	4bb5      	ldr	r3, [pc, #724]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
		Flag.Current_error=0;
 8004714:	4bb4      	ldr	r3, [pc, #720]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004716:	2200      	movs	r2, #0
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c
		/*补充校准程序*/
		__HAL_TIM_ENABLE(&htim3);
 800471a:	4bb4      	ldr	r3, [pc, #720]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4bb2      	ldr	r3, [pc, #712]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800472a:	4bb0      	ldr	r3, [pc, #704]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	4bae      	ldr	r3, [pc, #696]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	430a      	orrs	r2, r1
 8004738:	60da      	str	r2, [r3, #12]
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800473a:	4bac      	ldr	r3, [pc, #688]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800473c:	213c      	movs	r1, #60	; 0x3c
 800473e:	0018      	movs	r0, r3
 8004740:	f004 fc5c 	bl	8008ffc <HAL_TIM_Encoder_Start>
		Power_AC_On;	 //time to soft start
 8004744:	4baa      	ldr	r3, [pc, #680]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004746:	2201      	movs	r2, #1
 8004748:	2120      	movs	r1, #32
 800474a:	0018      	movs	r0, r3
 800474c:	f002 fc15 	bl	8006f7a <HAL_GPIO_WritePin>

		/*OVP*/
		if(Voltage_Actual> 150)
 8004750:	4ba8      	ldr	r3, [pc, #672]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	49a8      	ldr	r1, [pc, #672]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004756:	1c18      	adds	r0, r3, #0
 8004758:	f7fb fed2 	bl	8000500 <__aeabi_fcmpgt>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d01e      	beq.n	800479e <HAL_TIM_PeriodElapsedCallback+0xa2>
		{
			ON_OFF = OFF;
 8004760:	4ba6      	ldr	r3, [pc, #664]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8004766:	4ba6      	ldr	r3, [pc, #664]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 800476c:	2200      	movs	r2, #0
 800476e:	2108      	movs	r1, #8
 8004770:	2001      	movs	r0, #1
 8004772:	f008 f881 	bl	800c878 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 8004776:	f00d f8f9 	bl	801196c <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 800477a:	f00d f96b 	bl	8011a54 <TIM17_CYCLE_OFF>
			Error |= OVP;
 800477e:	4ba1      	ldr	r3, [pc, #644]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	4313      	orrs	r3, r2
 8004786:	b2da      	uxtb	r2, r3
 8004788:	4b9e      	ldr	r3, [pc, #632]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800478a:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 800478c:	4b9e      	ldr	r3, [pc, #632]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800478e:	2204      	movs	r2, #4
 8004790:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8004792:	4b9d      	ldr	r3, [pc, #628]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004794:	2201      	movs	r2, #1
 8004796:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8004798:	4b9b      	ldr	r3, [pc, #620]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800479a:	2201      	movs	r2, #1
 800479c:	609a      	str	r2, [r3, #8]
		}
		/*OCP*/
		if(Current_Actual > 50)
 800479e:	4b9b      	ldr	r3, [pc, #620]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x310>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	499b      	ldr	r1, [pc, #620]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80047a4:	1c18      	adds	r0, r3, #0
 80047a6:	f7fb feab 	bl	8000500 <__aeabi_fcmpgt>
 80047aa:	1e03      	subs	r3, r0, #0
 80047ac:	d01e      	beq.n	80047ec <HAL_TIM_PeriodElapsedCallback+0xf0>
		{
			ON_OFF = OFF;
 80047ae:	4b93      	ldr	r3, [pc, #588]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 80047b4:	4b92      	ldr	r3, [pc, #584]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 80047ba:	2200      	movs	r2, #0
 80047bc:	2108      	movs	r1, #8
 80047be:	2001      	movs	r0, #1
 80047c0:	f008 f85a 	bl	800c878 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 80047c4:	f00d f8d2 	bl	801196c <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 80047c8:	f00d f944 	bl	8011a54 <TIM17_CYCLE_OFF>
			Error |= OCP;
 80047cc:	4b8d      	ldr	r3, [pc, #564]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2202      	movs	r2, #2
 80047d2:	4313      	orrs	r3, r2
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	4b8b      	ldr	r3, [pc, #556]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80047d8:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 80047da:	4b8b      	ldr	r3, [pc, #556]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80047dc:	2204      	movs	r2, #4
 80047de:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 80047e0:	4b89      	ldr	r3, [pc, #548]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 80047e6:	4b88      	ldr	r3, [pc, #544]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	609a      	str	r2, [r3, #8]
		}
		/*OPP*/
		if(Current_Actual*Voltage_Actual>7500)
 80047ec:	4b87      	ldr	r3, [pc, #540]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x310>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b80      	ldr	r3, [pc, #512]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1c19      	adds	r1, r3, #0
 80047f6:	1c10      	adds	r0, r2, #0
 80047f8:	f7fc fa32 	bl	8000c60 <__aeabi_fmul>
 80047fc:	1c03      	adds	r3, r0, #0
 80047fe:	4985      	ldr	r1, [pc, #532]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004800:	1c18      	adds	r0, r3, #0
 8004802:	f7fb fe7d 	bl	8000500 <__aeabi_fcmpgt>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d01e      	beq.n	8004848 <HAL_TIM_PeriodElapsedCallback+0x14c>
		{
			ON_OFF = OFF;
 800480a:	4b7c      	ldr	r3, [pc, #496]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
			OUTPUT_NOT_OUTPUT = NOT_OUTPUT;
 8004810:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
			OUTPUT_ZERO;
 8004816:	2200      	movs	r2, #0
 8004818:	2108      	movs	r1, #8
 800481a:	2001      	movs	r0, #1
 800481c:	f008 f82c 	bl	800c878 <DAC_Cmd_send>
			TIM16_DELAY_OFF();
 8004820:	f00d f8a4 	bl	801196c <TIM16_DELAY_OFF>
			TIM17_CYCLE_OFF();
 8004824:	f00d f916 	bl	8011a54 <TIM17_CYCLE_OFF>
			Error |= OCP;
 8004828:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2202      	movs	r2, #2
 800482e:	4313      	orrs	r3, r2
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4b74      	ldr	r3, [pc, #464]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004834:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=4;
 8004836:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004838:	2204      	movs	r2, #4
 800483a:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800483c:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800483e:	2201      	movs	r2, #1
 8004840:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8004842:	4b71      	ldr	r3, [pc, #452]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004844:	2201      	movs	r2, #1
 8004846:	609a      	str	r2, [r3, #8]
		}
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8004848:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2202      	movs	r2, #2
 800484e:	4252      	negs	r2, r2
 8004850:	611a      	str	r2, [r3, #16]
		__HAL_TIM_DISABLE(&htim1);
 8004852:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a6f      	ldr	r2, [pc, #444]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800485a:	4013      	ands	r3, r2
 800485c:	d10d      	bne.n	800487a <HAL_TIM_PeriodElapsedCallback+0x17e>
 800485e:	4b60      	ldr	r3, [pc, #384]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	4a6d      	ldr	r2, [pc, #436]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004866:	4013      	ands	r3, r2
 8004868:	d107      	bne.n	800487a <HAL_TIM_PeriodElapsedCallback+0x17e>
 800486a:	4b5d      	ldr	r3, [pc, #372]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b5b      	ldr	r3, [pc, #364]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	438a      	bics	r2, r1
 8004878:	601a      	str	r2, [r3, #0]

	}
	/*key scan*/
	if(htim==&htim7)
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800487e:	429a      	cmp	r2, r3
 8004880:	d106      	bne.n	8004890 <HAL_TIM_PeriodElapsedCallback+0x194>
	{
		Flag.TIM7_IT=1;
 8004882:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004884:	2201      	movs	r2, #1
 8004886:	605a      	str	r2, [r3, #4]
		key_scan();
 8004888:	f00c fcc8 	bl	801121c <key_scan>
		Encoder_Enter_Handle();
 800488c:	f009 fcc0 	bl	800e210 <Encoder_Enter_Handle>

	}
	/*encoder*/
	if(htim==&htim3)
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4b56      	ldr	r3, [pc, #344]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004894:	429a      	cmp	r2, r3
 8004896:	d11f      	bne.n	80048d8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
	{

		Flag.TIM3_IT=1;
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800489a:	2201      	movs	r2, #1
 800489c:	609a      	str	r2, [r3, #8]
		static int count;

		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==1)
 800489e:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2210      	movs	r2, #16
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PeriodElapsedCallback+0x1ba>
		{
			count=-1;
 80048ac:	4b5d      	ldr	r3, [pc, #372]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	4252      	negs	r2, r2
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e009      	b.n	80048ca <HAL_TIM_PeriodElapsedCallback+0x1ce>

		}
		else if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)==0)
 80048b6:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	4013      	ands	r3, r2
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d002      	beq.n	80048ca <HAL_TIM_PeriodElapsedCallback+0x1ce>
		{
			count=1;
 80048c4:	4b57      	ldr	r3, [pc, #348]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

		}
		Flag.Encoder_BF+=count;
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	4b55      	ldr	r3, [pc, #340]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	18d2      	adds	r2, r2, r3
 80048d4:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80048d6:	61da      	str	r2, [r3, #28]
	}
	/*cursor flash*/
	if(htim==&htim6)
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80048dc:	429a      	cmp	r2, r3
 80048de:	d102      	bne.n	80048e6 <HAL_TIM_PeriodElapsedCallback+0x1ea>
	{
		Flag.TIM6_IT=1;
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	60da      	str	r2, [r3, #12]
	}
	/**/
	if(htim==&htim14)
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4b50      	ldr	r3, [pc, #320]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x330>)
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d102      	bne.n	80048f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>
	{
		Flag.TIM14_IT=1;
 80048ee:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	621a      	str	r2, [r3, #32]

	}
	if(htim==&htim16)
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	4b4e      	ldr	r3, [pc, #312]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_PeriodElapsedCallback+0x238>
	{
		//tim16 delay soft start delay 5s

		TIM16_DELAY_OFF();//到时间了,关闭延时功能
 80048fc:	f00d f836 	bl	801196c <TIM16_DELAY_OFF>

		if(Cycle_Function_On_Off == Cycle_Function_On)     //打开了循环功能，调用循环函数
 8004900:	4b4c      	ldr	r3, [pc, #304]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d102      	bne.n	800490e <HAL_TIM_PeriodElapsedCallback+0x212>
		{
			TIM17_CYCLE_ON();
 8004908:	f00d f854 	bl	80119b4 <TIM17_CYCLE_ON>
 800490c:	e00d      	b.n	800492a <HAL_TIM_PeriodElapsedCallback+0x22e>
		}
		else if(Cycle_Function_On_Off == Cycle_Function_Off)
 800490e:	4b49      	ldr	r3, [pc, #292]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_TIM_PeriodElapsedCallback+0x22e>
		{
			ON_OFF =ON;
 8004916:	4b39      	ldr	r3, [pc, #228]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]
			DAC_Cmd_send(1,4,Set_Voltage);
 800491c:	4b46      	ldr	r3, [pc, #280]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	001a      	movs	r2, r3
 8004922:	2104      	movs	r1, #4
 8004924:	2001      	movs	r0, #1
 8004926:	f007 ffa7 	bl	800c878 <DAC_Cmd_send>
		}


		__HAL_TIM_CLEAR_IT(&htim16,TIM_IT_UPDATE);
 800492a:	4b41      	ldr	r3, [pc, #260]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2202      	movs	r2, #2
 8004930:	4252      	negs	r2, r2
 8004932:	611a      	str	r2, [r3, #16]
	}

	if(htim==&htim17)
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004938:	429a      	cmp	r2, r3
 800493a:	d14d      	bne.n	80049d8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
	{
		Flag.TIM17_IT=1;
 800493c:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800493e:	2201      	movs	r2, #1
 8004940:	611a      	str	r2, [r3, #16]

		if(OUTPUT_NOT_OUTPUT == OUTPUT)
 8004942:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d146      	bne.n	80049d8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
		{
			if(ON_OFF == ON)
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d11f      	bne.n	8004992 <HAL_TIM_PeriodElapsedCallback+0x296>
			{
				if(Cycle_On_Time > 0)
 8004952:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_TIM_PeriodElapsedCallback+0x26a>
				{
				  Cycle_On_Time --;
 800495a:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1e5a      	subs	r2, r3, #1
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004962:	601a      	str	r2, [r3, #0]

		}

	}

}
 8004964:	e038      	b.n	80049d8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
					Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	001a      	movs	r2, r3
 800496c:	0013      	movs	r3, r2
 800496e:	015b      	lsls	r3, r3, #5
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	189b      	adds	r3, r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	001a      	movs	r2, r3
 800497a:	4b33      	ldr	r3, [pc, #204]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	18d3      	adds	r3, r2, r3
 8004980:	001a      	movs	r2, r3
 8004982:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004984:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=0;
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004988:	2200      	movs	r2, #0
 800498a:	615a      	str	r2, [r3, #20]
					power_off();
 800498c:	f008 f858 	bl	800ca40 <power_off>
}
 8004990:	e022      	b.n	80049d8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
			else if(ON_OFF == OFF)
 8004992:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11e      	bne.n	80049d8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
				if(Cycle_Close_Time >0)
 800499a:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <HAL_TIM_PeriodElapsedCallback+0x350>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_TIM_PeriodElapsedCallback+0x2b2>
					Cycle_Close_Time --;
 80049a2:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <HAL_TIM_PeriodElapsedCallback+0x350>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	1e5a      	subs	r2, r3, #1
 80049a8:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <HAL_TIM_PeriodElapsedCallback+0x350>)
 80049aa:	601a      	str	r2, [r3, #0]
}
 80049ac:	e014      	b.n	80049d8 <HAL_TIM_PeriodElapsedCallback+0x2dc>
					Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms );
 80049ae:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	001a      	movs	r2, r3
 80049b4:	0013      	movs	r3, r2
 80049b6:	015b      	lsls	r3, r3, #5
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	001a      	movs	r2, r3
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	18d3      	adds	r3, r2, r3
 80049c8:	001a      	movs	r2, r3
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_TIM_PeriodElapsedCallback+0x350>)
 80049cc:	601a      	str	r2, [r3, #0]
					Flag.TIM17_ON_OFF=1;
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	615a      	str	r2, [r3, #20]
					power_on();
 80049d4:	f008 f824 	bl	800ca20 <power_on>
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b002      	add	sp, #8
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20003430 	.word	0x20003430
 80049e4:	20003985 	.word	0x20003985
 80049e8:	20003388 	.word	0x20003388
 80049ec:	2000347c 	.word	0x2000347c
 80049f0:	50000800 	.word	0x50000800
 80049f4:	2000399c 	.word	0x2000399c
 80049f8:	43160000 	.word	0x43160000
 80049fc:	20003988 	.word	0x20003988
 8004a00:	20003989 	.word	0x20003989
 8004a04:	200039d9 	.word	0x200039d9
 8004a08:	200039f8 	.word	0x200039f8
 8004a0c:	200039a0 	.word	0x200039a0
 8004a10:	42480000 	.word	0x42480000
 8004a14:	45ea6000 	.word	0x45ea6000
 8004a18:	00001111 	.word	0x00001111
 8004a1c:	00000444 	.word	0x00000444
 8004a20:	20003514 	.word	0x20003514
 8004a24:	20003690 	.word	0x20003690
 8004a28:	200034c8 	.word	0x200034c8
 8004a2c:	20003560 	.word	0x20003560
 8004a30:	200035f8 	.word	0x200035f8
 8004a34:	200039e0 	.word	0x200039e0
 8004a38:	20002fda 	.word	0x20002fda
 8004a3c:	20003644 	.word	0x20003644
 8004a40:	200039e4 	.word	0x200039e4
 8004a44:	20003990 	.word	0x20003990
 8004a48:	20002fd6 	.word	0x20002fd6
 8004a4c:	200039e8 	.word	0x200039e8
 8004a50:	20003992 	.word	0x20003992
 8004a54:	20002fd8 	.word	0x20002fd8

08004a58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a5c:	4b23      	ldr	r3, [pc, #140]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a5e:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <MX_USART1_UART_Init+0x98>)
 8004a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a64:	22e1      	movs	r2, #225	; 0xe1
 8004a66:	0252      	lsls	r2, r2, #9
 8004a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a6a:	4b20      	ldr	r3, [pc, #128]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a70:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a7e:	220c      	movs	r2, #12
 8004a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a94:	4b15      	ldr	r3, [pc, #84]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f005 fb96 	bl	800a1d4 <HAL_UART_Init>
 8004aa8:	1e03      	subs	r3, r0, #0
 8004aaa:	d001      	beq.n	8004ab0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004aac:	f7fe ff48 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f007 f92f 	bl	800bd18 <HAL_UARTEx_SetTxFifoThreshold>
 8004aba:	1e03      	subs	r3, r0, #0
 8004abc:	d001      	beq.n	8004ac2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004abe:	f7fe ff3f 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f007 f966 	bl	800bd98 <HAL_UARTEx_SetRxFifoThreshold>
 8004acc:	1e03      	subs	r3, r0, #0
 8004ace:	d001      	beq.n	8004ad4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ad0:	f7fe ff36 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <MX_USART1_UART_Init+0x94>)
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f007 f8e4 	bl	800bca4 <HAL_UARTEx_DisableFifoMode>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004ae0:	f7fe ff2e 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	200036ac 	.word	0x200036ac
 8004af0:	40013800 	.word	0x40013800

08004af4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004af8:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004afa:	4a26      	ldr	r2, [pc, #152]	; (8004b94 <MX_USART2_UART_Init+0xa0>)
 8004afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b00:	22e1      	movs	r2, #225	; 0xe1
 8004b02:	0252      	lsls	r2, r2, #9
 8004b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004b06:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b1a:	220c      	movs	r2, #12
 8004b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b2a:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b30:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b36:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f005 fb48 	bl	800a1d4 <HAL_UART_Init>
 8004b44:	1e03      	subs	r3, r0, #0
 8004b46:	d001      	beq.n	8004b4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004b48:	f7fe fefa 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b4e:	2100      	movs	r1, #0
 8004b50:	0018      	movs	r0, r3
 8004b52:	f007 f8e1 	bl	800bd18 <HAL_UARTEx_SetTxFifoThreshold>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d001      	beq.n	8004b5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004b5a:	f7fe fef1 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b60:	2100      	movs	r1, #0
 8004b62:	0018      	movs	r0, r3
 8004b64:	f007 f918 	bl	800bd98 <HAL_UARTEx_SetRxFifoThreshold>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d001      	beq.n	8004b70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b6c:	f7fe fee8 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b72:	0018      	movs	r0, r3
 8004b74:	f007 f896 	bl	800bca4 <HAL_UARTEx_DisableFifoMode>
 8004b78:	1e03      	subs	r3, r0, #0
 8004b7a:	d001      	beq.n	8004b80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b7c:	f7fe fee0 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  __HAL_UART_CLEAR_IT(&huart2,UART_CLEAR_IDLEF);
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <MX_USART2_UART_Init+0x9c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2210      	movs	r2, #16
 8004b86:	621a      	str	r2, [r3, #32]
  /* USER CODE END USART2_Init 2 */

}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	20003740 	.word	0x20003740
 8004b94:	40004400 	.word	0x40004400

08004b98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b9c:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004b9e:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <MX_USART3_UART_Init+0x68>)
 8004ba0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004ba4:	22e1      	movs	r2, #225	; 0xe1
 8004ba6:	0252      	lsls	r2, r2, #9
 8004ba8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bc2:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004be0:	4806      	ldr	r0, [pc, #24]	; (8004bfc <MX_USART3_UART_Init+0x64>)
 8004be2:	2300      	movs	r3, #0
 8004be4:	2200      	movs	r2, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	f006 ffd2 	bl	800bb90 <HAL_RS485Ex_Init>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8004bf0:	f7fe fea6 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	200037d4 	.word	0x200037d4
 8004c00:	40004800 	.word	0x40004800

08004c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b097      	sub	sp, #92	; 0x5c
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c0c:	2344      	movs	r3, #68	; 0x44
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	0018      	movs	r0, r3
 8004c12:	2314      	movs	r3, #20
 8004c14:	001a      	movs	r2, r3
 8004c16:	2100      	movs	r1, #0
 8004c18:	f00f fd0f 	bl	801463a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c1c:	2428      	movs	r4, #40	; 0x28
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	0018      	movs	r0, r3
 8004c22:	231c      	movs	r3, #28
 8004c24:	001a      	movs	r2, r3
 8004c26:	2100      	movs	r1, #0
 8004c28:	f00f fd07 	bl	801463a <memset>
  if(uartHandle->Instance==USART1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4abb      	ldr	r2, [pc, #748]	; (8004f20 <HAL_UART_MspInit+0x31c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d148      	bne.n	8004cc8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c36:	193b      	adds	r3, r7, r4
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	2200      	movs	r2, #0
 8004c40:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c42:	193b      	adds	r3, r7, r4
 8004c44:	0018      	movs	r0, r3
 8004c46:	f002 febb 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 8004c4a:	1e03      	subs	r3, r0, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c4e:	f7fe fe77 	bl	8003940 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c52:	4bb4      	ldr	r3, [pc, #720]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c56:	4bb3      	ldr	r3, [pc, #716]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	01c9      	lsls	r1, r1, #7
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8004c60:	4bb0      	ldr	r3, [pc, #704]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	01db      	lsls	r3, r3, #7
 8004c68:	4013      	ands	r3, r2
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6e:	4bad      	ldr	r3, [pc, #692]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c72:	4bac      	ldr	r3, [pc, #688]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004c74:	2101      	movs	r1, #1
 8004c76:	430a      	orrs	r2, r1
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34
 8004c7a:	4baa      	ldr	r3, [pc, #680]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c86:	2144      	movs	r1, #68	; 0x44
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	22c0      	movs	r2, #192	; 0xc0
 8004c8c:	00d2      	lsls	r2, r2, #3
 8004c8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	2202      	movs	r2, #2
 8004c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	187b      	adds	r3, r7, r1
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca8:	187a      	adds	r2, r7, r1
 8004caa:	23a0      	movs	r3, #160	; 0xa0
 8004cac:	05db      	lsls	r3, r3, #23
 8004cae:	0011      	movs	r1, r2
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f001 ffe1 	bl	8006c78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2100      	movs	r1, #0
 8004cba:	201b      	movs	r0, #27
 8004cbc:	f001 fc82 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cc0:	201b      	movs	r0, #27
 8004cc2:	f001 fc94 	bl	80065ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004cc6:	e127      	b.n	8004f18 <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a96      	ldr	r2, [pc, #600]	; (8004f28 <HAL_UART_MspInit+0x324>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d173      	bne.n	8004dba <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004cd2:	2128      	movs	r1, #40	; 0x28
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	2200      	movs	r2, #0
 8004cde:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f002 fe6c 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 8004ce8:	1e03      	subs	r3, r0, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8004cec:	f7fe fe28 	bl	8003940 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf4:	4b8b      	ldr	r3, [pc, #556]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	0289      	lsls	r1, r1, #10
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cfe:	4b89      	ldr	r3, [pc, #548]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	4013      	ands	r3, r2
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0c:	4b85      	ldr	r3, [pc, #532]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d10:	4b84      	ldr	r3, [pc, #528]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004d12:	2101      	movs	r1, #1
 8004d14:	430a      	orrs	r2, r1
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34
 8004d18:	4b82      	ldr	r3, [pc, #520]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = miniboard1_Pin|miniboard2_Pin;
 8004d24:	2144      	movs	r1, #68	; 0x44
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	220c      	movs	r2, #12
 8004d2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	2202      	movs	r2, #2
 8004d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	2200      	movs	r2, #0
 8004d36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	2201      	movs	r2, #1
 8004d42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d44:	187a      	adds	r2, r7, r1
 8004d46:	23a0      	movs	r3, #160	; 0xa0
 8004d48:	05db      	lsls	r3, r3, #23
 8004d4a:	0011      	movs	r1, r2
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f001 ff93 	bl	8006c78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004d52:	4b76      	ldr	r3, [pc, #472]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d54:	4a76      	ldr	r2, [pc, #472]	; (8004f30 <HAL_UART_MspInit+0x32c>)
 8004d56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004d58:	4b74      	ldr	r3, [pc, #464]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d5a:	2234      	movs	r2, #52	; 0x34
 8004d5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d5e:	4b73      	ldr	r3, [pc, #460]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d64:	4b71      	ldr	r3, [pc, #452]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d6a:	4b70      	ldr	r3, [pc, #448]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d70:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d76:	4b6d      	ldr	r3, [pc, #436]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d7c:	4b6b      	ldr	r3, [pc, #428]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d82:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d84:	2280      	movs	r2, #128	; 0x80
 8004d86:	0152      	lsls	r2, r2, #5
 8004d88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d8a:	4b68      	ldr	r3, [pc, #416]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f001 fc4b 	bl	8006628 <HAL_DMA_Init>
 8004d92:	1e03      	subs	r3, r0, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8004d96:	f7fe fdd3 	bl	8003940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	4a63      	ldr	r2, [pc, #396]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004da0:	505a      	str	r2, [r3, r1]
 8004da2:	4b62      	ldr	r3, [pc, #392]	; (8004f2c <HAL_UART_MspInit+0x328>)
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004da8:	2200      	movs	r2, #0
 8004daa:	2100      	movs	r1, #0
 8004dac:	201c      	movs	r0, #28
 8004dae:	f001 fc09 	bl	80065c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004db2:	201c      	movs	r0, #28
 8004db4:	f001 fc1b 	bl	80065ee <HAL_NVIC_EnableIRQ>
}
 8004db8:	e0ae      	b.n	8004f18 <HAL_UART_MspInit+0x314>
  else if(uartHandle->Instance==USART3)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5d      	ldr	r2, [pc, #372]	; (8004f34 <HAL_UART_MspInit+0x330>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d000      	beq.n	8004dc6 <HAL_UART_MspInit+0x1c2>
 8004dc4:	e0a8      	b.n	8004f18 <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004dc6:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dca:	4b56      	ldr	r3, [pc, #344]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	02c9      	lsls	r1, r1, #11
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dd4:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	02db      	lsls	r3, r3, #11
 8004ddc:	4013      	ands	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de2:	4b50      	ldr	r3, [pc, #320]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de6:	4b4f      	ldr	r3, [pc, #316]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	635a      	str	r2, [r3, #52]	; 0x34
 8004dee:	4b4d      	ldr	r3, [pc, #308]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	2201      	movs	r2, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dfa:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004e00:	2102      	movs	r1, #2
 8004e02:	430a      	orrs	r2, r1
 8004e04:	635a      	str	r2, [r3, #52]	; 0x34
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <HAL_UART_MspInit+0x320>)
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e12:	2144      	movs	r1, #68	; 0x44
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	2280      	movs	r2, #128	; 0x80
 8004e18:	0212      	lsls	r2, r2, #8
 8004e1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1c:	000c      	movs	r4, r1
 8004e1e:	193b      	adds	r3, r7, r4
 8004e20:	2202      	movs	r2, #2
 8004e22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e24:	193b      	adds	r3, r7, r4
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART3;
 8004e30:	193b      	adds	r3, r7, r4
 8004e32:	2205      	movs	r2, #5
 8004e34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e36:	193a      	adds	r2, r7, r4
 8004e38:	23a0      	movs	r3, #160	; 0xa0
 8004e3a:	05db      	lsls	r3, r3, #23
 8004e3c:	0011      	movs	r1, r2
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f001 ff1a 	bl	8006c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e44:	0021      	movs	r1, r4
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	22c0      	movs	r2, #192	; 0xc0
 8004e4a:	0092      	lsls	r2, r2, #2
 8004e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	187b      	adds	r3, r7, r1
 8004e50:	2202      	movs	r2, #2
 8004e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	2200      	movs	r2, #0
 8004e58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5a:	187b      	adds	r3, r7, r1
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	2204      	movs	r2, #4
 8004e64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	4a33      	ldr	r2, [pc, #204]	; (8004f38 <HAL_UART_MspInit+0x334>)
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	0010      	movs	r0, r2
 8004e6e:	f001 ff03 	bl	8006c78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel4;
 8004e72:	4b32      	ldr	r3, [pc, #200]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e74:	4a32      	ldr	r2, [pc, #200]	; (8004f40 <HAL_UART_MspInit+0x33c>)
 8004e76:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004e78:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e7a:	2236      	movs	r2, #54	; 0x36
 8004e7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e84:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e8a:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e90:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004e9c:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ea2:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f001 fbbc 	bl	8006628 <HAL_DMA_Init>
 8004eb0:	1e03      	subs	r3, r0, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8004eb4:	f7fe fd44 	bl	8003940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004ebe:	505a      	str	r2, [r3, r1]
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <HAL_UART_MspInit+0x338>)
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel5;
 8004ec6:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004ec8:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_UART_MspInit+0x344>)
 8004eca:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004ece:	2237      	movs	r2, #55	; 0x37
 8004ed0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ed8:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ede:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004ee0:	2280      	movs	r2, #128	; 0x80
 8004ee2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ef0:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004efe:	0018      	movs	r0, r3
 8004f00:	f001 fb92 	bl	8006628 <HAL_DMA_Init>
 8004f04:	1e03      	subs	r3, r0, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_UART_MspInit+0x308>
      Error_Handler();
 8004f08:	f7fe fd1a 	bl	8003940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a0d      	ldr	r2, [pc, #52]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004f10:	67da      	str	r2, [r3, #124]	; 0x7c
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <HAL_UART_MspInit+0x340>)
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b017      	add	sp, #92	; 0x5c
 8004f1e:	bd90      	pop	{r4, r7, pc}
 8004f20:	40013800 	.word	0x40013800
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40004400 	.word	0x40004400
 8004f2c:	20003868 	.word	0x20003868
 8004f30:	40020008 	.word	0x40020008
 8004f34:	40004800 	.word	0x40004800
 8004f38:	50000400 	.word	0x50000400
 8004f3c:	200038c4 	.word	0x200038c4
 8004f40:	40020044 	.word	0x40020044
 8004f44:	20003920 	.word	0x20003920
 8004f48:	40020058 	.word	0x40020058

08004f4c <USART2_IDLECallback>:
  * @brief  串口2的接收空闲回调，用于和控制板通信
  * @param  None
  * @retval None
  */
void USART2_IDLECallback(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0

	HAL_UART_DMAStop(&huart2);
 8004f52:	4b51      	ldr	r3, [pc, #324]	; (8005098 <USART2_IDLECallback+0x14c>)
 8004f54:	0018      	movs	r0, r3
 8004f56:	f005 fa92 	bl	800a47e <HAL_UART_DMAStop>


	if(Uart2_Receive_buffer[0]==RS232_ID||Uart2_Receive_buffer[0]==0)
 8004f5a:	4b50      	ldr	r3, [pc, #320]	; (800509c <USART2_IDLECallback+0x150>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <USART2_IDLECallback+0x154>)
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d004      	beq.n	8004f72 <USART2_IDLECallback+0x26>
 8004f68:	4b4c      	ldr	r3, [pc, #304]	; (800509c <USART2_IDLECallback+0x150>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d000      	beq.n	8004f72 <USART2_IDLECallback+0x26>
 8004f70:	e085      	b.n	800507e <USART2_IDLECallback+0x132>

		}
#endif

#ifdef ADD_CHECK
		uint16_t addvalue=( (Uart2_Receive_buffer [USART2_Received_Length-2])|(Uart2_Receive_buffer[USART2_Received_Length-1]<<8) );
 8004f72:	4b4c      	ldr	r3, [pc, #304]	; (80050a4 <USART2_IDLECallback+0x158>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	3b02      	subs	r3, #2
 8004f78:	4a48      	ldr	r2, [pc, #288]	; (800509c <USART2_IDLECallback+0x150>)
 8004f7a:	5cd3      	ldrb	r3, [r2, r3]
 8004f7c:	b21a      	sxth	r2, r3
 8004f7e:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <USART2_IDLECallback+0x158>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	4945      	ldr	r1, [pc, #276]	; (800509c <USART2_IDLECallback+0x150>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	b21b      	sxth	r3, r3
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	b21a      	sxth	r2, r3
 8004f90:	1dbb      	adds	r3, r7, #6
 8004f92:	801a      	strh	r2, [r3, #0]
		//接收端用CRC16算法对接到的数据进行校验，计算出的结果和传过来的CRC字节比较是否相等
		if(addvalue==ADD(Uart2_Receive_buffer,USART2_Received_Length-2))
 8004f94:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <USART2_IDLECallback+0x158>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	3b02      	subs	r3, #2
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	4b3f      	ldr	r3, [pc, #252]	; (800509c <USART2_IDLECallback+0x150>)
 8004f9e:	0011      	movs	r1, r2
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f007 fc37 	bl	800c814 <ADD>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	001a      	movs	r2, r3
 8004faa:	1dbb      	adds	r3, r7, #6
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d165      	bne.n	800507e <USART2_IDLECallback+0x132>
		{
				switch(Uart2_Receive_buffer[1])
 8004fb2:	4b3a      	ldr	r3, [pc, #232]	; (800509c <USART2_IDLECallback+0x150>)
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <USART2_IDLECallback+0x136>
 8004fba:	2b12      	cmp	r3, #18
 8004fbc:	d000      	beq.n	8004fc0 <USART2_IDLECallback+0x74>
						break;
					}



					default: break;
 8004fbe:	e061      	b.n	8005084 <USART2_IDLECallback+0x138>
						Voltage_Actual=ADC_Gain_V*(Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4])+Eror_ADC_V;
 8004fc0:	4b36      	ldr	r3, [pc, #216]	; (800509c <USART2_IDLECallback+0x150>)
 8004fc2:	78db      	ldrb	r3, [r3, #3]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	4a35      	ldr	r2, [pc, #212]	; (800509c <USART2_IDLECallback+0x150>)
 8004fc8:	7912      	ldrb	r2, [r2, #4]
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f7fc f93b 	bl	8001248 <__aeabi_i2f>
 8004fd2:	1c02      	adds	r2, r0, #0
 8004fd4:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <USART2_IDLECallback+0x15c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	1c19      	adds	r1, r3, #0
 8004fda:	1c10      	adds	r0, r2, #0
 8004fdc:	f7fb fe40 	bl	8000c60 <__aeabi_fmul>
 8004fe0:	1c03      	adds	r3, r0, #0
 8004fe2:	1c1a      	adds	r2, r3, #0
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <USART2_IDLECallback+0x160>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	1c19      	adds	r1, r3, #0
 8004fea:	1c10      	adds	r0, r2, #0
 8004fec:	f7fb fad2 	bl	8000594 <__aeabi_fadd>
 8004ff0:	1c03      	adds	r3, r0, #0
 8004ff2:	1c1a      	adds	r2, r3, #0
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <USART2_IDLECallback+0x164>)
 8004ff6:	601a      	str	r2, [r3, #0]
						Current_Actual=ADC_Gain_I*(Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6])+Eror_ADC_I;
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <USART2_IDLECallback+0x150>)
 8004ffa:	795b      	ldrb	r3, [r3, #5]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	4a27      	ldr	r2, [pc, #156]	; (800509c <USART2_IDLECallback+0x150>)
 8005000:	7992      	ldrb	r2, [r2, #6]
 8005002:	189b      	adds	r3, r3, r2
 8005004:	0018      	movs	r0, r3
 8005006:	f7fc f91f 	bl	8001248 <__aeabi_i2f>
 800500a:	1c02      	adds	r2, r0, #0
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <USART2_IDLECallback+0x168>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1c19      	adds	r1, r3, #0
 8005012:	1c10      	adds	r0, r2, #0
 8005014:	f7fb fe24 	bl	8000c60 <__aeabi_fmul>
 8005018:	1c03      	adds	r3, r0, #0
 800501a:	1c1a      	adds	r2, r3, #0
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <USART2_IDLECallback+0x16c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1c19      	adds	r1, r3, #0
 8005022:	1c10      	adds	r0, r2, #0
 8005024:	f7fb fab6 	bl	8000594 <__aeabi_fadd>
 8005028:	1c03      	adds	r3, r0, #0
 800502a:	1c1a      	adds	r2, r3, #0
 800502c:	4b23      	ldr	r3, [pc, #140]	; (80050bc <USART2_IDLECallback+0x170>)
 800502e:	601a      	str	r2, [r3, #0]
						Current_Actual*=1000;//61mv/A
 8005030:	4b22      	ldr	r3, [pc, #136]	; (80050bc <USART2_IDLECallback+0x170>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4922      	ldr	r1, [pc, #136]	; (80050c0 <USART2_IDLECallback+0x174>)
 8005036:	1c18      	adds	r0, r3, #0
 8005038:	f7fb fe12 	bl	8000c60 <__aeabi_fmul>
 800503c:	1c03      	adds	r3, r0, #0
 800503e:	1c1a      	adds	r2, r3, #0
 8005040:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <USART2_IDLECallback+0x170>)
 8005042:	601a      	str	r2, [r3, #0]
						Current_Actual/=61;
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <USART2_IDLECallback+0x170>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	491e      	ldr	r1, [pc, #120]	; (80050c4 <USART2_IDLECallback+0x178>)
 800504a:	1c18      	adds	r0, r3, #0
 800504c:	f7fb fc40 	bl	80008d0 <__aeabi_fdiv>
 8005050:	1c03      	adds	r3, r0, #0
 8005052:	1c1a      	adds	r2, r3, #0
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <USART2_IDLECallback+0x170>)
 8005056:	601a      	str	r2, [r3, #0]
						Current_Actual-=Current_Error;//偏置
 8005058:	4b18      	ldr	r3, [pc, #96]	; (80050bc <USART2_IDLECallback+0x170>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	1c18      	adds	r0, r3, #0
 800505e:	f7fd ff27 	bl	8002eb0 <__aeabi_f2d>
 8005062:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <USART2_IDLECallback+0x17c>)
 8005064:	4b19      	ldr	r3, [pc, #100]	; (80050cc <USART2_IDLECallback+0x180>)
 8005066:	f7fd fae7 	bl	8002638 <__aeabi_dsub>
 800506a:	0002      	movs	r2, r0
 800506c:	000b      	movs	r3, r1
 800506e:	0010      	movs	r0, r2
 8005070:	0019      	movs	r1, r3
 8005072:	f7fd ff65 	bl	8002f40 <__aeabi_d2f>
 8005076:	1c02      	adds	r2, r0, #0
 8005078:	4b10      	ldr	r3, [pc, #64]	; (80050bc <USART2_IDLECallback+0x170>)
 800507a:	601a      	str	r2, [r3, #0]
						break;
 800507c:	e002      	b.n	8005084 <USART2_IDLECallback+0x138>
				}

		}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	e000      	b.n	8005084 <USART2_IDLECallback+0x138>
						break;
 8005082:	46c0      	nop			; (mov r8, r8)

	}



	HAL_UART_Receive_DMA(&huart2, &Uart2_Receive_buffer[0],9);
 8005084:	4905      	ldr	r1, [pc, #20]	; (800509c <USART2_IDLECallback+0x150>)
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <USART2_IDLECallback+0x14c>)
 8005088:	2209      	movs	r2, #9
 800508a:	0018      	movs	r0, r3
 800508c:	f005 f9a0 	bl	800a3d0 <HAL_UART_Receive_DMA>


}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20003740 	.word	0x20003740
 800509c:	200036a0 	.word	0x200036a0
 80050a0:	200030d8 	.word	0x200030d8
 80050a4:	20000004 	.word	0x20000004
 80050a8:	20002fec 	.word	0x20002fec
 80050ac:	20002ff4 	.word	0x20002ff4
 80050b0:	2000399c 	.word	0x2000399c
 80050b4:	20002ff0 	.word	0x20002ff0
 80050b8:	20002ff8 	.word	0x20002ff8
 80050bc:	200039a0 	.word	0x200039a0
 80050c0:	447a0000 	.word	0x447a0000
 80050c4:	42740000 	.word	0x42740000
 80050c8:	7ae147ae 	.word	0x7ae147ae
 80050cc:	4001ae14 	.word	0x4001ae14

080050d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050d0:	480d      	ldr	r0, [pc, #52]	; (8005108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050d4:	f7fe fea8 	bl	8003e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050d8:	480c      	ldr	r0, [pc, #48]	; (800510c <LoopForever+0x6>)
  ldr r1, =_edata
 80050da:	490d      	ldr	r1, [pc, #52]	; (8005110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <LoopForever+0xe>)
  movs r3, #0
 80050de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e0:	e002      	b.n	80050e8 <LoopCopyDataInit>

080050e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050e6:	3304      	adds	r3, #4

080050e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050ec:	d3f9      	bcc.n	80050e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050f0:	4c0a      	ldr	r4, [pc, #40]	; (800511c <LoopForever+0x16>)
  movs r3, #0
 80050f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f4:	e001      	b.n	80050fa <LoopFillZerobss>

080050f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050f8:	3204      	adds	r2, #4

080050fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050fc:	d3fb      	bcc.n	80050f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80050fe:	f00f fa65 	bl	80145cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005102:	f7fe f9c1 	bl	8003488 <main>

08005106 <LoopForever>:

LoopForever:
  b LoopForever
 8005106:	e7fe      	b.n	8005106 <LoopForever>
  ldr   r0, =_estack
 8005108:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800510c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005110:	200032ac 	.word	0x200032ac
  ldr r2, =_sidata
 8005114:	08018e20 	.word	0x08018e20
  ldr r2, =_sbss
 8005118:	200032ac 	.word	0x200032ac
  ldr r4, =_ebss
 800511c:	20003aa4 	.word	0x20003aa4

08005120 <EXTI0_1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005120:	e7fe      	b.n	8005120 <EXTI0_1_IRQHandler>
	...

08005124 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_Init+0x3c>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <HAL_Init+0x3c>)
 8005136:	2180      	movs	r1, #128	; 0x80
 8005138:	0049      	lsls	r1, r1, #1
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800513e:	2003      	movs	r0, #3
 8005140:	f000 f810 	bl	8005164 <HAL_InitTick>
 8005144:	1e03      	subs	r3, r0, #0
 8005146:	d003      	beq.n	8005150 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005148:	1dfb      	adds	r3, r7, #7
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e001      	b.n	8005154 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005150:	f7fe fcaa 	bl	8003aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	781b      	ldrb	r3, [r3, #0]
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40022000 	.word	0x40022000

08005164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800516c:	230f      	movs	r3, #15
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_InitTick+0x88>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02b      	beq.n	80051d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800517c:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <HAL_InitTick+0x8c>)
 800517e:	681c      	ldr	r4, [r3, #0]
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <HAL_InitTick+0x88>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	0019      	movs	r1, r3
 8005186:	23fa      	movs	r3, #250	; 0xfa
 8005188:	0098      	lsls	r0, r3, #2
 800518a:	f7fa ffdf 	bl	800014c <__udivsi3>
 800518e:	0003      	movs	r3, r0
 8005190:	0019      	movs	r1, r3
 8005192:	0020      	movs	r0, r4
 8005194:	f7fa ffda 	bl	800014c <__udivsi3>
 8005198:	0003      	movs	r3, r0
 800519a:	0018      	movs	r0, r3
 800519c:	f001 fa37 	bl	800660e <HAL_SYSTICK_Config>
 80051a0:	1e03      	subs	r3, r0, #0
 80051a2:	d112      	bne.n	80051ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d80a      	bhi.n	80051c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	2301      	movs	r3, #1
 80051ae:	425b      	negs	r3, r3
 80051b0:	2200      	movs	r2, #0
 80051b2:	0018      	movs	r0, r3
 80051b4:	f001 fa06 	bl	80065c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051b8:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <HAL_InitTick+0x90>)
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e00d      	b.n	80051dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80051c0:	230f      	movs	r3, #15
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e008      	b.n	80051dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051ca:	230f      	movs	r3, #15
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	e003      	b.n	80051dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051d4:	230f      	movs	r3, #15
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80051dc:	230f      	movs	r3, #15
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	781b      	ldrb	r3, [r3, #0]
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b005      	add	sp, #20
 80051e8:	bd90      	pop	{r4, r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	2000000c 	.word	0x2000000c
 80051f0:	20000000 	.word	0x20000000
 80051f4:	20000008 	.word	0x20000008

080051f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <HAL_IncTick+0x1c>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	001a      	movs	r2, r3
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_IncTick+0x20>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	18d2      	adds	r2, r2, r3
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <HAL_IncTick+0x20>)
 800520a:	601a      	str	r2, [r3, #0]
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	2000000c 	.word	0x2000000c
 8005218:	2000397c 	.word	0x2000397c

0800521c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  return uwTick;
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <HAL_GetTick+0x10>)
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	2000397c 	.word	0x2000397c

08005230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005238:	f7ff fff0 	bl	800521c <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	d005      	beq.n	8005256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <HAL_Delay+0x44>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	001a      	movs	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	189b      	adds	r3, r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	f7ff ffe0 	bl	800521c <HAL_GetTick>
 800525c:	0002      	movs	r2, r0
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d8f7      	bhi.n	8005258 <HAL_Delay+0x28>
  {
  }
}
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	46bd      	mov	sp, r7
 800526e:	b004      	add	sp, #16
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	2000000c 	.word	0x2000000c

08005278 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a05      	ldr	r2, [pc, #20]	; (800529c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005288:	401a      	ands	r2, r3
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b002      	add	sp, #8
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	fe3fffff 	.word	0xfe3fffff

080052a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	23e0      	movs	r3, #224	; 0xe0
 80052ae:	045b      	lsls	r3, r3, #17
 80052b0:	4013      	ands	r3, r2
}
 80052b2:	0018      	movs	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b002      	add	sp, #8
 80052b8:	bd80      	pop	{r7, pc}

080052ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	2104      	movs	r1, #4
 80052ce:	400a      	ands	r2, r1
 80052d0:	2107      	movs	r1, #7
 80052d2:	4091      	lsls	r1, r2
 80052d4:	000a      	movs	r2, r1
 80052d6:	43d2      	mvns	r2, r2
 80052d8:	401a      	ands	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2104      	movs	r1, #4
 80052de:	400b      	ands	r3, r1
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4099      	lsls	r1, r3
 80052e4:	000b      	movs	r3, r1
 80052e6:	431a      	orrs	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80052ec:	46c0      	nop			; (mov r8, r8)
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b004      	add	sp, #16
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	2104      	movs	r1, #4
 8005306:	400a      	ands	r2, r1
 8005308:	2107      	movs	r1, #7
 800530a:	4091      	lsls	r1, r2
 800530c:	000a      	movs	r2, r1
 800530e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2104      	movs	r1, #4
 8005314:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005316:	40da      	lsrs	r2, r3
 8005318:	0013      	movs	r3, r2
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b002      	add	sp, #8
 8005320:	bd80      	pop	{r7, pc}

08005322 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	23c0      	movs	r3, #192	; 0xc0
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	4013      	ands	r3, r2
 8005334:	d101      	bne.n	800533a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800533a:	2300      	movs	r3, #0
}
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	b002      	add	sp, #8
 8005342:	bd80      	pop	{r7, pc}

08005344 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	211f      	movs	r1, #31
 8005358:	400a      	ands	r2, r1
 800535a:	210f      	movs	r1, #15
 800535c:	4091      	lsls	r1, r2
 800535e:	000a      	movs	r2, r1
 8005360:	43d2      	mvns	r2, r2
 8005362:	401a      	ands	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0e9b      	lsrs	r3, r3, #26
 8005368:	210f      	movs	r1, #15
 800536a:	4019      	ands	r1, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	201f      	movs	r0, #31
 8005370:	4003      	ands	r3, r0
 8005372:	4099      	lsls	r1, r3
 8005374:	000b      	movs	r3, r1
 8005376:	431a      	orrs	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b004      	add	sp, #16
 8005382:	bd80      	pop	{r7, pc}

08005384 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	035b      	lsls	r3, r3, #13
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b002      	add	sp, #8
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	0352      	lsls	r2, r2, #13
 80053b8:	0b52      	lsrs	r2, r2, #13
 80053ba:	43d2      	mvns	r2, r2
 80053bc:	401a      	ands	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b002      	add	sp, #8
 80053c8:	bd80      	pop	{r7, pc}

080053ca <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2203      	movs	r2, #3
 80053d8:	4013      	ands	r3, r2
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b002      	add	sp, #8
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	0212      	lsls	r2, r2, #8
 80053f8:	43d2      	mvns	r2, r2
 80053fa:	401a      	ands	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	400b      	ands	r3, r1
 8005404:	4904      	ldr	r1, [pc, #16]	; (8005418 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005406:	400b      	ands	r3, r1
 8005408:	431a      	orrs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	46bd      	mov	sp, r7
 8005412:	b004      	add	sp, #16
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	07ffff00 	.word	0x07ffff00

0800541c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4a05      	ldr	r2, [pc, #20]	; (8005440 <LL_ADC_EnableInternalRegulator+0x24>)
 800542a:	4013      	ands	r3, r2
 800542c:	2280      	movs	r2, #128	; 0x80
 800542e:	0552      	lsls	r2, r2, #21
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	46bd      	mov	sp, r7
 800543a:	b002      	add	sp, #8
 800543c:	bd80      	pop	{r7, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	6fffffe8 	.word	0x6fffffe8

08005444 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	055b      	lsls	r3, r3, #21
 8005454:	401a      	ands	r2, r3
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	055b      	lsls	r3, r3, #21
 800545a:	429a      	cmp	r2, r3
 800545c:	d101      	bne.n	8005462 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005462:	2300      	movs	r3, #0
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}

0800546c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4a04      	ldr	r2, [pc, #16]	; (800548c <LL_ADC_Enable+0x20>)
 800547a:	4013      	ands	r3, r2
 800547c:	2201      	movs	r2, #1
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005484:	46c0      	nop			; (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}
 800548c:	7fffffe8 	.word	0x7fffffe8

08005490 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <LL_ADC_Disable+0x20>)
 800549e:	4013      	ands	r3, r2
 80054a0:	2202      	movs	r2, #2
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	7fffffe8 	.word	0x7fffffe8

080054b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2201      	movs	r2, #1
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <LL_ADC_IsEnabled+0x18>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <LL_ADC_IsEnabled+0x1a>
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b002      	add	sp, #8
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2202      	movs	r2, #2
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d101      	bne.n	80054ee <LL_ADC_IsDisableOngoing+0x18>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <LL_ADC_IsDisableOngoing+0x1a>
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <LL_ADC_REG_StartConversion+0x20>)
 8005506:	4013      	ands	r3, r2
 8005508:	2204      	movs	r2, #4
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}
 8005518:	7fffffe8 	.word	0x7fffffe8

0800551c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a04      	ldr	r2, [pc, #16]	; (800553c <LL_ADC_REG_StopConversion+0x20>)
 800552a:	4013      	ands	r3, r2
 800552c:	2210      	movs	r2, #16
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}
 800553c:	7fffffe8 	.word	0x7fffffe8

08005540 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2204      	movs	r2, #4
 800554e:	4013      	ands	r3, r2
 8005550:	2b04      	cmp	r3, #4
 8005552:	d101      	bne.n	8005558 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005558:	2300      	movs	r3, #0
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800556c:	231f      	movs	r3, #31
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005574:	2300      	movs	r3, #0
 8005576:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e17f      	b.n	800588a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f7fd fdfb 	bl	8003190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2254      	movs	r2, #84	; 0x54
 80055a4:	2100      	movs	r1, #0
 80055a6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7ff ff49 	bl	8005444 <LL_ADC_IsInternalRegulatorEnabled>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d115      	bne.n	80055e2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7ff ff2e 	bl	800541c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055c0:	4bb4      	ldr	r3, [pc, #720]	; (8005894 <HAL_ADC_Init+0x330>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	49b4      	ldr	r1, [pc, #720]	; (8005898 <HAL_ADC_Init+0x334>)
 80055c6:	0018      	movs	r0, r3
 80055c8:	f7fa fdc0 	bl	800014c <__udivsi3>
 80055cc:	0003      	movs	r3, r0
 80055ce:	3301      	adds	r3, #1
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055d4:	e002      	b.n	80055dc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3b01      	subs	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f9      	bne.n	80055d6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f7ff ff2c 	bl	8005444 <LL_ADC_IsInternalRegulatorEnabled>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d10f      	bne.n	8005610 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	2210      	movs	r2, #16
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	2201      	movs	r2, #1
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005608:	231f      	movs	r3, #31
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	0018      	movs	r0, r3
 8005616:	f7ff ff93 	bl	8005540 <LL_ADC_REG_IsConversionOngoing>
 800561a:	0003      	movs	r3, r0
 800561c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	2210      	movs	r2, #16
 8005624:	4013      	ands	r3, r2
 8005626:	d000      	beq.n	800562a <HAL_ADC_Init+0xc6>
 8005628:	e122      	b.n	8005870 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d000      	beq.n	8005632 <HAL_ADC_Init+0xce>
 8005630:	e11e      	b.n	8005870 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005636:	4a99      	ldr	r2, [pc, #612]	; (800589c <HAL_ADC_Init+0x338>)
 8005638:	4013      	ands	r3, r2
 800563a:	2202      	movs	r2, #2
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	0018      	movs	r0, r3
 8005648:	f7ff ff34 	bl	80054b4 <LL_ADC_IsEnabled>
 800564c:	1e03      	subs	r3, r0, #0
 800564e:	d000      	beq.n	8005652 <HAL_ADC_Init+0xee>
 8005650:	e0ad      	b.n	80057ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	7e1b      	ldrb	r3, [r3, #24]
 800565a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800565c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	7e5b      	ldrb	r3, [r3, #25]
 8005662:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005664:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7e9b      	ldrb	r3, [r3, #26]
 800566a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800566c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_ADC_Init+0x118>
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	015b      	lsls	r3, r3, #5
 800567a:	e000      	b.n	800567e <HAL_ADC_Init+0x11a>
 800567c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800567e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005684:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da04      	bge.n	8005698 <HAL_ADC_Init+0x134>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	e001      	b.n	800569c <HAL_ADC_Init+0x138>
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800569c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	212c      	movs	r1, #44	; 0x2c
 80056a2:	5c5b      	ldrb	r3, [r3, r1]
 80056a4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80056a6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	5c9b      	ldrb	r3, [r3, r2]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d115      	bne.n	80056e4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	7e9b      	ldrb	r3, [r3, #26]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2280      	movs	r2, #128	; 0x80
 80056c4:	0252      	lsls	r2, r2, #9
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	e00b      	b.n	80056e4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	2220      	movs	r2, #32
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	2201      	movs	r2, #1
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056f0:	23e0      	movs	r3, #224	; 0xe0
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80056fa:	4313      	orrs	r3, r2
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a65      	ldr	r2, [pc, #404]	; (80058a0 <HAL_ADC_Init+0x33c>)
 800570a:	4013      	ands	r3, r2
 800570c:	0019      	movs	r1, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	430a      	orrs	r2, r1
 8005716:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	0f9b      	lsrs	r3, r3, #30
 800571e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005724:	4313      	orrs	r3, r2
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	223c      	movs	r2, #60	; 0x3c
 8005730:	5c9b      	ldrb	r3, [r3, r2]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d111      	bne.n	800575a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	0f9b      	lsrs	r3, r3, #30
 800573c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005742:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005748:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800574e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	2201      	movs	r2, #1
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	4a50      	ldr	r2, [pc, #320]	; (80058a4 <HAL_ADC_Init+0x340>)
 8005762:	4013      	ands	r3, r2
 8005764:	0019      	movs	r1, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	430a      	orrs	r2, r1
 800576e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	23c0      	movs	r3, #192	; 0xc0
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	429a      	cmp	r2, r3
 800577a:	d018      	beq.n	80057ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	05db      	lsls	r3, r3, #23
 8005784:	429a      	cmp	r2, r3
 8005786:	d012      	beq.n	80057ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	061b      	lsls	r3, r3, #24
 8005790:	429a      	cmp	r2, r3
 8005792:	d00c      	beq.n	80057ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005794:	4b44      	ldr	r3, [pc, #272]	; (80058a8 <HAL_ADC_Init+0x344>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a44      	ldr	r2, [pc, #272]	; (80058ac <HAL_ADC_Init+0x348>)
 800579a:	4013      	ands	r3, r2
 800579c:	0019      	movs	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	23f0      	movs	r3, #240	; 0xf0
 80057a4:	039b      	lsls	r3, r3, #14
 80057a6:	401a      	ands	r2, r3
 80057a8:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <HAL_ADC_Init+0x344>)
 80057aa:	430a      	orrs	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	001a      	movs	r2, r3
 80057b8:	2100      	movs	r1, #0
 80057ba:	f7ff fd7e 	bl	80052ba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	493a      	ldr	r1, [pc, #232]	; (80058b0 <HAL_ADC_Init+0x34c>)
 80057c8:	001a      	movs	r2, r3
 80057ca:	f7ff fd76 	bl	80052ba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2110      	movs	r1, #16
 80057e2:	4249      	negs	r1, r1
 80057e4:	430a      	orrs	r2, r1
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28
 80057e8:	e018      	b.n	800581c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	039b      	lsls	r3, r3, #14
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d112      	bne.n	800581c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	3b01      	subs	r3, #1
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	221c      	movs	r2, #28
 8005806:	4013      	ands	r3, r2
 8005808:	2210      	movs	r2, #16
 800580a:	4252      	negs	r2, r2
 800580c:	409a      	lsls	r2, r3
 800580e:	0011      	movs	r1, r2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2100      	movs	r1, #0
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff fd66 	bl	80052f4 <LL_ADC_GetSamplingTimeCommonChannels>
 8005828:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800582e:	429a      	cmp	r2, r3
 8005830:	d10b      	bne.n	800584a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583c:	2203      	movs	r2, #3
 800583e:	4393      	bics	r3, r2
 8005840:	2201      	movs	r2, #1
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005848:	e01c      	b.n	8005884 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	2212      	movs	r2, #18
 8005850:	4393      	bics	r3, r2
 8005852:	2210      	movs	r2, #16
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585e:	2201      	movs	r2, #1
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005866:	231f      	movs	r3, #31
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800586e:	e009      	b.n	8005884 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	2210      	movs	r2, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800587c:	231f      	movs	r3, #31
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005884:	231f      	movs	r3, #31
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	781b      	ldrb	r3, [r3, #0]
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b008      	add	sp, #32
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	20000000 	.word	0x20000000
 8005898:	00030d40 	.word	0x00030d40
 800589c:	fffffefd 	.word	0xfffffefd
 80058a0:	fffe0201 	.word	0xfffe0201
 80058a4:	1ffffc02 	.word	0x1ffffc02
 80058a8:	40012708 	.word	0x40012708
 80058ac:	ffc3ffff 	.word	0xffc3ffff
 80058b0:	07ffff04 	.word	0x07ffff04

080058b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80058b4:	b5b0      	push	{r4, r5, r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff fe3b 	bl	8005540 <LL_ADC_REG_IsConversionOngoing>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d16c      	bne.n	80059a8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2254      	movs	r2, #84	; 0x54
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_Start_DMA+0x28>
 80058d8:	2302      	movs	r3, #2
 80058da:	e06c      	b.n	80059b6 <HAL_ADC_Start_DMA+0x102>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2254      	movs	r2, #84	; 0x54
 80058e0:	2101      	movs	r1, #1
 80058e2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	4013      	ands	r3, r2
 80058ee:	d113      	bne.n	8005918 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7ff fddd 	bl	80054b4 <LL_ADC_IsEnabled>
 80058fa:	1e03      	subs	r3, r0, #0
 80058fc:	d004      	beq.n	8005908 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	0018      	movs	r0, r3
 8005904:	f7ff fdc4 	bl	8005490 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2101      	movs	r1, #1
 8005914:	430a      	orrs	r2, r1
 8005916:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005918:	2517      	movs	r5, #23
 800591a:	197c      	adds	r4, r7, r5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	0018      	movs	r0, r3
 8005920:	f000 fc12 	bl	8006148 <ADC_Enable>
 8005924:	0003      	movs	r3, r0
 8005926:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005928:	002c      	movs	r4, r5
 800592a:	193b      	adds	r3, r7, r4
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d13e      	bne.n	80059b0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <HAL_ADC_Start_DMA+0x10c>)
 8005938:	4013      	ands	r3, r2
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	0052      	lsls	r2, r2, #1
 800593e:	431a      	orrs	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594e:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <HAL_ADC_Start_DMA+0x110>)
 8005950:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <HAL_ADC_Start_DMA+0x114>)
 8005958:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_ADC_Start_DMA+0x118>)
 8005960:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	221c      	movs	r2, #28
 8005968:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2254      	movs	r2, #84	; 0x54
 800596e:	2100      	movs	r1, #0
 8005970:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2110      	movs	r1, #16
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3340      	adds	r3, #64	; 0x40
 800598c:	0019      	movs	r1, r3
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	193c      	adds	r4, r7, r4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f000 fed2 	bl	800673c <HAL_DMA_Start_IT>
 8005998:	0003      	movs	r3, r0
 800599a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff fda9 	bl	80054f8 <LL_ADC_REG_StartConversion>
 80059a6:	e003      	b.n	80059b0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80059a8:	2317      	movs	r3, #23
 80059aa:	18fb      	adds	r3, r7, r3
 80059ac:	2202      	movs	r2, #2
 80059ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80059b0:	2317      	movs	r3, #23
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	781b      	ldrb	r3, [r3, #0]
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b006      	add	sp, #24
 80059bc:	bdb0      	pop	{r4, r5, r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	fffff0fe 	.word	0xfffff0fe
 80059c4:	08006311 	.word	0x08006311
 80059c8:	080063d9 	.word	0x080063d9
 80059cc:	080063f7 	.word	0x080063f7

080059d0 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80059d0:	b5b0      	push	{r4, r5, r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2254      	movs	r2, #84	; 0x54
 80059dc:	5c9b      	ldrb	r3, [r3, r2]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_ADC_Stop_DMA+0x16>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e05f      	b.n	8005aa6 <HAL_ADC_Stop_DMA+0xd6>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2254      	movs	r2, #84	; 0x54
 80059ea:	2101      	movs	r1, #1
 80059ec:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80059ee:	250f      	movs	r5, #15
 80059f0:	197c      	adds	r4, r7, r5
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 fb65 	bl	80060c4 <ADC_ConversionStop>
 80059fa:	0003      	movs	r3, r0
 80059fc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80059fe:	0029      	movs	r1, r5
 8005a00:	187b      	adds	r3, r7, r1
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d147      	bne.n	8005a98 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0c:	2225      	movs	r2, #37	; 0x25
 8005a0e:	5c9b      	ldrb	r3, [r3, r2]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d112      	bne.n	8005a3c <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	000d      	movs	r5, r1
 8005a1c:	187c      	adds	r4, r7, r1
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f000 ff12 	bl	8006848 <HAL_DMA_Abort>
 8005a24:	0003      	movs	r3, r0
 8005a26:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005a28:	197b      	adds	r3, r7, r5
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	2240      	movs	r2, #64	; 0x40
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2110      	movs	r1, #16
 8005a48:	438a      	bics	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	18bb      	adds	r3, r7, r2
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d107      	bne.n	8005a66 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005a56:	18bc      	adds	r4, r7, r2
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 fbfa 	bl	8006254 <ADC_Disable>
 8005a60:	0003      	movs	r3, r0
 8005a62:	7023      	strb	r3, [r4, #0]
 8005a64:	e003      	b.n	8005a6e <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f000 fbf3 	bl	8006254 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005a6e:	230f      	movs	r3, #15
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d107      	bne.n	8005a88 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <HAL_ADC_Stop_DMA+0xe0>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2201      	movs	r2, #1
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2101      	movs	r1, #1
 8005a94:	438a      	bics	r2, r1
 8005a96:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2254      	movs	r2, #84	; 0x54
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005aa0:	230f      	movs	r3, #15
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	781b      	ldrb	r3, [r3, #0]
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b004      	add	sp, #16
 8005aac:	bdb0      	pop	{r4, r5, r7, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	fffffefe 	.word	0xfffffefe

08005ab4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d017      	beq.n	8005b08 <HAL_ADC_IRQHandler+0x54>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2202      	movs	r2, #2
 8005adc:	4013      	ands	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d106      	bne.n	8005af8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	0112      	lsls	r2, r2, #4
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	0018      	movs	r0, r3
 8005afc:	f000 fca6 	bl	800644c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2202      	movs	r2, #2
 8005b06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <HAL_ADC_IRQHandler+0x64>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2204      	movs	r2, #4
 8005b14:	4013      	ands	r3, r2
 8005b16:	d107      	bne.n	8005b28 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005b1e:	d04d      	beq.n	8005bbc <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2208      	movs	r2, #8
 8005b24:	4013      	ands	r3, r2
 8005b26:	d049      	beq.n	8005bbc <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d106      	bne.n	8005b40 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	2280      	movs	r2, #128	; 0x80
 8005b38:	0092      	lsls	r2, r2, #2
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7ff fbec 	bl	8005322 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b4a:	1e03      	subs	r3, r0, #0
 8005b4c:	d02e      	beq.n	8005bac <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7e9b      	ldrb	r3, [r3, #26]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d12a      	bne.n	8005bac <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d123      	bne.n	8005bac <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f7ff fce9 	bl	8005540 <LL_ADC_REG_IsConversionOngoing>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d110      	bne.n	8005b94 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	210c      	movs	r1, #12
 8005b7e:	438a      	bics	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b86:	4a56      	ldr	r2, [pc, #344]	; (8005ce0 <HAL_ADC_IRQHandler+0x22c>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	659a      	str	r2, [r3, #88]	; 0x58
 8005b92:	e00b      	b.n	8005bac <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	2220      	movs	r2, #32
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f00b fd4c 	bl	801164c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	220c      	movs	r2, #12
 8005bba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2280      	movs	r2, #128	; 0x80
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d012      	beq.n	8005bea <HAL_ADC_IRQHandler+0x136>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2280      	movs	r2, #128	; 0x80
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	0252      	lsls	r2, r2, #9
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 f889 	bl	8005cf4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d014      	beq.n	8005c1e <HAL_ADC_IRQHandler+0x16a>
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d00f      	beq.n	8005c1e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	0292      	lsls	r2, r2, #10
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 fc0c 	bl	800642c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	0052      	lsls	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4013      	ands	r3, r2
 8005c26:	d014      	beq.n	8005c52 <HAL_ADC_IRQHandler+0x19e>
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d00f      	beq.n	8005c52 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	02d2      	lsls	r2, r2, #11
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 fbfa 	bl	800643c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	0092      	lsls	r2, r2, #2
 8005c50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2210      	movs	r2, #16
 8005c56:	4013      	ands	r3, r2
 8005c58:	d02b      	beq.n	8005cb2 <HAL_ADC_IRQHandler+0x1fe>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d027      	beq.n	8005cb2 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e008      	b.n	8005c82 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f7ff fba8 	bl	80053ca <LL_ADC_REG_GetDMATransfer>
 8005c7a:	1e03      	subs	r3, r0, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d110      	bne.n	8005caa <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	00d2      	lsls	r2, r2, #3
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f000 f82d 	bl	8005d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2210      	movs	r2, #16
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	019b      	lsls	r3, r3, #6
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d00d      	beq.n	8005cd8 <HAL_ADC_IRQHandler+0x224>
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	019b      	lsls	r3, r3, #6
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d008      	beq.n	8005cd8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 fbc7 	bl	800645c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	0192      	lsls	r2, r2, #6
 8005cd6:	601a      	str	r2, [r3, #0]
  }
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b006      	add	sp, #24
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	fffffefe 	.word	0xfffffefe

08005ce4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b002      	add	sp, #8
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005cfc:	46c0      	nop			; (mov r8, r8)
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b002      	add	sp, #8
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d0c:	46c0      	nop			; (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d1e:	2317      	movs	r3, #23
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2254      	movs	r2, #84	; 0x54
 8005d2e:	5c9b      	ldrb	r3, [r3, r2]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x24>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e1c0      	b.n	80060ba <HAL_ADC_ConfigChannel+0x3a6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2254      	movs	r2, #84	; 0x54
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7ff fbfb 	bl	8005540 <LL_ADC_REG_IsConversionOngoing>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d000      	beq.n	8005d50 <HAL_ADC_ConfigChannel+0x3c>
 8005d4e:	e1a3      	b.n	8006098 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d100      	bne.n	8005d5a <HAL_ADC_ConfigChannel+0x46>
 8005d58:	e143      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d004      	beq.n	8005d70 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d6a:	4ac1      	ldr	r2, [pc, #772]	; (8006070 <HAL_ADC_ConfigChannel+0x35c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	0019      	movs	r1, r3
 8005d7a:	0010      	movs	r0, r2
 8005d7c:	f7ff fb02 	bl	8005384 <LL_ADC_REG_SetSequencerChAdd>
 8005d80:	e0c9      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	211f      	movs	r1, #31
 8005d8c:	400b      	ands	r3, r1
 8005d8e:	210f      	movs	r1, #15
 8005d90:	4099      	lsls	r1, r3
 8005d92:	000b      	movs	r3, r1
 8005d94:	43db      	mvns	r3, r3
 8005d96:	4013      	ands	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	035b      	lsls	r3, r3, #13
 8005da0:	0b5b      	lsrs	r3, r3, #13
 8005da2:	d105      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x9c>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	0e9b      	lsrs	r3, r3, #26
 8005daa:	221f      	movs	r2, #31
 8005dac:	4013      	ands	r3, r2
 8005dae:	e098      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2201      	movs	r2, #1
 8005db6:	4013      	ands	r3, r2
 8005db8:	d000      	beq.n	8005dbc <HAL_ADC_ConfigChannel+0xa8>
 8005dba:	e091      	b.n	8005ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d000      	beq.n	8005dc8 <HAL_ADC_ConfigChannel+0xb4>
 8005dc6:	e089      	b.n	8005edc <HAL_ADC_ConfigChannel+0x1c8>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d000      	beq.n	8005dd4 <HAL_ADC_ConfigChannel+0xc0>
 8005dd2:	e081      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x1c4>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d000      	beq.n	8005de0 <HAL_ADC_ConfigChannel+0xcc>
 8005dde:	e079      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x1c0>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2210      	movs	r2, #16
 8005de6:	4013      	ands	r3, r2
 8005de8:	d000      	beq.n	8005dec <HAL_ADC_ConfigChannel+0xd8>
 8005dea:	e071      	b.n	8005ed0 <HAL_ADC_ConfigChannel+0x1bc>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2220      	movs	r2, #32
 8005df2:	4013      	ands	r3, r2
 8005df4:	d000      	beq.n	8005df8 <HAL_ADC_ConfigChannel+0xe4>
 8005df6:	e069      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x1b8>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2240      	movs	r2, #64	; 0x40
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d000      	beq.n	8005e04 <HAL_ADC_ConfigChannel+0xf0>
 8005e02:	e061      	b.n	8005ec8 <HAL_ADC_ConfigChannel+0x1b4>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d000      	beq.n	8005e10 <HAL_ADC_ConfigChannel+0xfc>
 8005e0e:	e059      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x1b0>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d151      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x1ac>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4013      	ands	r3, r2
 8005e26:	d149      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x1a8>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4013      	ands	r3, r2
 8005e32:	d141      	bne.n	8005eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d139      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x1a0>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	015b      	lsls	r3, r3, #5
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d131      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x19c>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	019b      	lsls	r3, r3, #6
 8005e54:	4013      	ands	r3, r2
 8005e56:	d129      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x198>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	01db      	lsls	r3, r3, #7
 8005e60:	4013      	ands	r3, r2
 8005e62:	d121      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x194>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d119      	bne.n	8005ea4 <HAL_ADC_ConfigChannel+0x190>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	025b      	lsls	r3, r3, #9
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d111      	bne.n	8005ea0 <HAL_ADC_ConfigChannel+0x18c>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	4013      	ands	r3, r2
 8005e86:	d109      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x188>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	02db      	lsls	r3, r3, #11
 8005e90:	4013      	ands	r3, r2
 8005e92:	d001      	beq.n	8005e98 <HAL_ADC_ConfigChannel+0x184>
 8005e94:	2312      	movs	r3, #18
 8005e96:	e024      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e022      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e9c:	2311      	movs	r3, #17
 8005e9e:	e020      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	e01e      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea4:	230f      	movs	r3, #15
 8005ea6:	e01c      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea8:	230e      	movs	r3, #14
 8005eaa:	e01a      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eac:	230d      	movs	r3, #13
 8005eae:	e018      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	e016      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb4:	230b      	movs	r3, #11
 8005eb6:	e014      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb8:	230a      	movs	r3, #10
 8005eba:	e012      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ebc:	2309      	movs	r3, #9
 8005ebe:	e010      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	e00e      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ec4:	2307      	movs	r3, #7
 8005ec6:	e00c      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ec8:	2306      	movs	r3, #6
 8005eca:	e00a      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ecc:	2305      	movs	r3, #5
 8005ece:	e008      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	e006      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e004      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e002      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	6852      	ldr	r2, [r2, #4]
 8005ee6:	201f      	movs	r0, #31
 8005ee8:	4002      	ands	r2, r0
 8005eea:	4093      	lsls	r3, r2
 8005eec:	000a      	movs	r2, r1
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d808      	bhi.n	8005f16 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6859      	ldr	r1, [r3, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	001a      	movs	r2, r3
 8005f12:	f7ff fa17 	bl	8005344 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	001a      	movs	r2, r3
 8005f24:	f7ff fa5e 	bl	80053e4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db00      	blt.n	8005f32 <HAL_ADC_ConfigChannel+0x21e>
 8005f30:	e0bc      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f32:	4b50      	ldr	r3, [pc, #320]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7ff f9b3 	bl	80052a0 <LL_ADC_GetCommonPathInternalCh>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_ADC_ConfigChannel+0x364>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d122      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f50:	d11d      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	0412      	lsls	r2, r2, #16
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	4a46      	ldr	r2, [pc, #280]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	0010      	movs	r0, r2
 8005f60:	f7ff f98a 	bl	8005278 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <HAL_ADC_ConfigChannel+0x368>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4945      	ldr	r1, [pc, #276]	; (8006080 <HAL_ADC_ConfigChannel+0x36c>)
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7fa f8ee 	bl	800014c <__udivsi3>
 8005f70:	0003      	movs	r3, r0
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	0013      	movs	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f7e:	e002      	b.n	8005f86 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f9      	bne.n	8005f80 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f8c:	e08e      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a3c      	ldr	r2, [pc, #240]	; (8006084 <HAL_ADC_ConfigChannel+0x370>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d10e      	bne.n	8005fb6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	045b      	lsls	r3, r3, #17
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d109      	bne.n	8005fb6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	0452      	lsls	r2, r2, #17
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	4a32      	ldr	r2, [pc, #200]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005fac:	0019      	movs	r1, r3
 8005fae:	0010      	movs	r0, r2
 8005fb0:	f7ff f962 	bl	8005278 <LL_ADC_SetCommonPathInternalCh>
 8005fb4:	e07a      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a33      	ldr	r2, [pc, #204]	; (8006088 <HAL_ADC_ConfigChannel+0x374>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d000      	beq.n	8005fc2 <HAL_ADC_ConfigChannel+0x2ae>
 8005fc0:	e074      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	03db      	lsls	r3, r3, #15
 8005fc8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005fca:	d000      	beq.n	8005fce <HAL_ADC_ConfigChannel+0x2ba>
 8005fcc:	e06e      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2280      	movs	r2, #128	; 0x80
 8005fd2:	03d2      	lsls	r2, r2, #15
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	4a27      	ldr	r2, [pc, #156]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005fd8:	0019      	movs	r1, r3
 8005fda:	0010      	movs	r0, r2
 8005fdc:	f7ff f94c 	bl	8005278 <LL_ADC_SetCommonPathInternalCh>
 8005fe0:	e064      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	061b      	lsls	r3, r3, #24
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d004      	beq.n	8005ff8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005ff2:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_ADC_ConfigChannel+0x35c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d107      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	0019      	movs	r1, r3
 8006002:	0010      	movs	r0, r2
 8006004:	f7ff f9cf 	bl	80053a6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da4d      	bge.n	80060ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8006012:	0018      	movs	r0, r3
 8006014:	f7ff f944 	bl	80052a0 <LL_ADC_GetCommonPathInternalCh>
 8006018:	0003      	movs	r3, r0
 800601a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_ADC_ConfigChannel+0x364>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d108      	bne.n	8006038 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_ADC_ConfigChannel+0x378>)
 800602a:	4013      	ands	r3, r2
 800602c:	4a11      	ldr	r2, [pc, #68]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 800602e:	0019      	movs	r1, r3
 8006030:	0010      	movs	r0, r2
 8006032:	f7ff f921 	bl	8005278 <LL_ADC_SetCommonPathInternalCh>
 8006036:	e039      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a11      	ldr	r2, [pc, #68]	; (8006084 <HAL_ADC_ConfigChannel+0x370>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d108      	bne.n	8006054 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_ADC_ConfigChannel+0x37c>)
 8006046:	4013      	ands	r3, r2
 8006048:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 800604a:	0019      	movs	r1, r3
 800604c:	0010      	movs	r0, r2
 800604e:	f7ff f913 	bl	8005278 <LL_ADC_SetCommonPathInternalCh>
 8006052:	e02b      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0b      	ldr	r2, [pc, #44]	; (8006088 <HAL_ADC_ConfigChannel+0x374>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d126      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <HAL_ADC_ConfigChannel+0x380>)
 8006062:	4013      	ands	r3, r2
 8006064:	4a03      	ldr	r2, [pc, #12]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8006066:	0019      	movs	r1, r3
 8006068:	0010      	movs	r0, r2
 800606a:	f7ff f905 	bl	8005278 <LL_ADC_SetCommonPathInternalCh>
 800606e:	e01d      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
 8006070:	80000004 	.word	0x80000004
 8006074:	40012708 	.word	0x40012708
 8006078:	b0001000 	.word	0xb0001000
 800607c:	20000000 	.word	0x20000000
 8006080:	00030d40 	.word	0x00030d40
 8006084:	b8004000 	.word	0xb8004000
 8006088:	b4002000 	.word	0xb4002000
 800608c:	ff7fffff 	.word	0xff7fffff
 8006090:	feffffff 	.word	0xfeffffff
 8006094:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609c:	2220      	movs	r2, #32
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80060a4:	2317      	movs	r3, #23
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2254      	movs	r2, #84	; 0x54
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80060b4:	2317      	movs	r3, #23
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b006      	add	sp, #24
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)

080060c4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f7ff fa35 	bl	8005540 <LL_ADC_REG_IsConversionOngoing>
 80060d6:	1e03      	subs	r3, r0, #0
 80060d8:	d031      	beq.n	800613e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	0018      	movs	r0, r3
 80060e0:	f7ff f9f9 	bl	80054d6 <LL_ADC_IsDisableOngoing>
 80060e4:	1e03      	subs	r3, r0, #0
 80060e6:	d104      	bne.n	80060f2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7ff fa15 	bl	800551c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060f2:	f7ff f893 	bl	800521c <HAL_GetTick>
 80060f6:	0003      	movs	r3, r0
 80060f8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80060fa:	e01a      	b.n	8006132 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80060fc:	f7ff f88e 	bl	800521c <HAL_GetTick>
 8006100:	0002      	movs	r2, r0
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d913      	bls.n	8006132 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2204      	movs	r2, #4
 8006112:	4013      	ands	r3, r2
 8006114:	d00d      	beq.n	8006132 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	2210      	movs	r2, #16
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	2201      	movs	r2, #1
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e006      	b.n	8006140 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2204      	movs	r2, #4
 800613a:	4013      	ands	r3, r2
 800613c:	d1de      	bne.n	80060fc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	0018      	movs	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	b004      	add	sp, #16
 8006146:	bd80      	pop	{r7, pc}

08006148 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006150:	2300      	movs	r3, #0
 8006152:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	0018      	movs	r0, r3
 800615a:	f7ff f9ab 	bl	80054b4 <LL_ADC_IsEnabled>
 800615e:	1e03      	subs	r3, r0, #0
 8006160:	d000      	beq.n	8006164 <ADC_Enable+0x1c>
 8006162:	e069      	b.n	8006238 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4a36      	ldr	r2, [pc, #216]	; (8006244 <ADC_Enable+0xfc>)
 800616c:	4013      	ands	r3, r2
 800616e:	d00d      	beq.n	800618c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006174:	2210      	movs	r2, #16
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006180:	2201      	movs	r2, #1
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e056      	b.n	800623a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	0018      	movs	r0, r3
 8006192:	f7ff f96b 	bl	800546c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006196:	4b2c      	ldr	r3, [pc, #176]	; (8006248 <ADC_Enable+0x100>)
 8006198:	0018      	movs	r0, r3
 800619a:	f7ff f881 	bl	80052a0 <LL_ADC_GetCommonPathInternalCh>
 800619e:	0002      	movs	r2, r0
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	041b      	lsls	r3, r3, #16
 80061a4:	4013      	ands	r3, r2
 80061a6:	d00f      	beq.n	80061c8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061a8:	4b28      	ldr	r3, [pc, #160]	; (800624c <ADC_Enable+0x104>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4928      	ldr	r1, [pc, #160]	; (8006250 <ADC_Enable+0x108>)
 80061ae:	0018      	movs	r0, r3
 80061b0:	f7f9 ffcc 	bl	800014c <__udivsi3>
 80061b4:	0003      	movs	r3, r0
 80061b6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80061b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80061ba:	e002      	b.n	80061c2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	3b01      	subs	r3, #1
 80061c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f9      	bne.n	80061bc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7e5b      	ldrb	r3, [r3, #25]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d033      	beq.n	8006238 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80061d0:	f7ff f824 	bl	800521c <HAL_GetTick>
 80061d4:	0003      	movs	r3, r0
 80061d6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061d8:	e027      	b.n	800622a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	0018      	movs	r0, r3
 80061e0:	f7ff f968 	bl	80054b4 <LL_ADC_IsEnabled>
 80061e4:	1e03      	subs	r3, r0, #0
 80061e6:	d104      	bne.n	80061f2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7ff f93d 	bl	800546c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061f2:	f7ff f813 	bl	800521c <HAL_GetTick>
 80061f6:	0002      	movs	r2, r0
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d914      	bls.n	800622a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2201      	movs	r2, #1
 8006208:	4013      	ands	r3, r2
 800620a:	2b01      	cmp	r3, #1
 800620c:	d00d      	beq.n	800622a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	2210      	movs	r2, #16
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621e:	2201      	movs	r2, #1
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e007      	b.n	800623a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2201      	movs	r2, #1
 8006232:	4013      	ands	r3, r2
 8006234:	2b01      	cmp	r3, #1
 8006236:	d1d0      	bne.n	80061da <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	0018      	movs	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	b004      	add	sp, #16
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	80000017 	.word	0x80000017
 8006248:	40012708 	.word	0x40012708
 800624c:	20000000 	.word	0x20000000
 8006250:	00030d40 	.word	0x00030d40

08006254 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	0018      	movs	r0, r3
 8006262:	f7ff f938 	bl	80054d6 <LL_ADC_IsDisableOngoing>
 8006266:	0003      	movs	r3, r0
 8006268:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	0018      	movs	r0, r3
 8006270:	f7ff f920 	bl	80054b4 <LL_ADC_IsEnabled>
 8006274:	1e03      	subs	r3, r0, #0
 8006276:	d046      	beq.n	8006306 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d143      	bne.n	8006306 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2205      	movs	r2, #5
 8006286:	4013      	ands	r3, r2
 8006288:	2b01      	cmp	r3, #1
 800628a:	d10d      	bne.n	80062a8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	0018      	movs	r0, r3
 8006292:	f7ff f8fd 	bl	8005490 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2203      	movs	r2, #3
 800629c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800629e:	f7fe ffbd 	bl	800521c <HAL_GetTick>
 80062a2:	0003      	movs	r3, r0
 80062a4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062a6:	e028      	b.n	80062fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ac:	2210      	movs	r2, #16
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b8:	2201      	movs	r2, #1
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e021      	b.n	8006308 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80062c4:	f7fe ffaa 	bl	800521c <HAL_GetTick>
 80062c8:	0002      	movs	r2, r0
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d913      	bls.n	80062fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2201      	movs	r2, #1
 80062da:	4013      	ands	r3, r2
 80062dc:	d00d      	beq.n	80062fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e2:	2210      	movs	r2, #16
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ee:	2201      	movs	r2, #1
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e006      	b.n	8006308 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2201      	movs	r2, #1
 8006302:	4013      	ands	r3, r2
 8006304:	d1de      	bne.n	80062c4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	0018      	movs	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	b004      	add	sp, #16
 800630e:	bd80      	pop	{r7, pc}

08006310 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	2250      	movs	r2, #80	; 0x50
 8006324:	4013      	ands	r3, r2
 8006326:	d141      	bne.n	80063ac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	0018      	movs	r0, r3
 800633c:	f7fe fff1 	bl	8005322 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006340:	1e03      	subs	r3, r0, #0
 8006342:	d02e      	beq.n	80063a2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	7e9b      	ldrb	r3, [r3, #26]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d12a      	bne.n	80063a2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2208      	movs	r2, #8
 8006354:	4013      	ands	r3, r2
 8006356:	2b08      	cmp	r3, #8
 8006358:	d123      	bne.n	80063a2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	0018      	movs	r0, r3
 8006360:	f7ff f8ee 	bl	8005540 <LL_ADC_REG_IsConversionOngoing>
 8006364:	1e03      	subs	r3, r0, #0
 8006366:	d110      	bne.n	800638a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	210c      	movs	r1, #12
 8006374:	438a      	bics	r2, r1
 8006376:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <ADC_DMAConvCplt+0xc4>)
 800637e:	4013      	ands	r3, r2
 8006380:	2201      	movs	r2, #1
 8006382:	431a      	orrs	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	659a      	str	r2, [r3, #88]	; 0x58
 8006388:	e00b      	b.n	80063a2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638e:	2220      	movs	r2, #32
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639a:	2201      	movs	r2, #1
 800639c:	431a      	orrs	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	0018      	movs	r0, r3
 80063a6:	f00b f951 	bl	801164c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80063aa:	e00f      	b.n	80063cc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b0:	2210      	movs	r2, #16
 80063b2:	4013      	ands	r3, r2
 80063b4:	d004      	beq.n	80063c0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	0018      	movs	r0, r3
 80063ba:	f7ff fca3 	bl	8005d04 <HAL_ADC_ErrorCallback>
}
 80063be:	e005      	b.n	80063cc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	0010      	movs	r0, r2
 80063ca:	4798      	blx	r3
}
 80063cc:	46c0      	nop			; (mov r8, r8)
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b004      	add	sp, #16
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	fffffefe 	.word	0xfffffefe

080063d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7ff fc7b 	bl	8005ce4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b004      	add	sp, #16
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	2240      	movs	r2, #64	; 0x40
 800640a:	431a      	orrs	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006414:	2204      	movs	r2, #4
 8006416:	431a      	orrs	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	0018      	movs	r0, r3
 8006420:	f7ff fc70 	bl	8005d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006424:	46c0      	nop			; (mov r8, r8)
 8006426:	46bd      	mov	sp, r7
 8006428:	b004      	add	sp, #16
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b002      	add	sp, #8
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	46bd      	mov	sp, r7
 8006448:	b002      	add	sp, #8
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006454:	46c0      	nop			; (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	b002      	add	sp, #8
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006464:	46c0      	nop			; (mov r8, r8)
 8006466:	46bd      	mov	sp, r7
 8006468:	b002      	add	sp, #8
 800646a:	bd80      	pop	{r7, pc}

0800646c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	0002      	movs	r2, r0
 8006474:	1dfb      	adds	r3, r7, #7
 8006476:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006478:	1dfb      	adds	r3, r7, #7
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b7f      	cmp	r3, #127	; 0x7f
 800647e:	d809      	bhi.n	8006494 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006480:	1dfb      	adds	r3, r7, #7
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	001a      	movs	r2, r3
 8006486:	231f      	movs	r3, #31
 8006488:	401a      	ands	r2, r3
 800648a:	4b04      	ldr	r3, [pc, #16]	; (800649c <__NVIC_EnableIRQ+0x30>)
 800648c:	2101      	movs	r1, #1
 800648e:	4091      	lsls	r1, r2
 8006490:	000a      	movs	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	46bd      	mov	sp, r7
 8006498:	b002      	add	sp, #8
 800649a:	bd80      	pop	{r7, pc}
 800649c:	e000e100 	.word	0xe000e100

080064a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	0002      	movs	r2, r0
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	1dfb      	adds	r3, r7, #7
 80064ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80064ae:	1dfb      	adds	r3, r7, #7
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b7f      	cmp	r3, #127	; 0x7f
 80064b4:	d828      	bhi.n	8006508 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064b6:	4a2f      	ldr	r2, [pc, #188]	; (8006574 <__NVIC_SetPriority+0xd4>)
 80064b8:	1dfb      	adds	r3, r7, #7
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b25b      	sxtb	r3, r3
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	33c0      	adds	r3, #192	; 0xc0
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	589b      	ldr	r3, [r3, r2]
 80064c6:	1dfa      	adds	r2, r7, #7
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	0011      	movs	r1, r2
 80064cc:	2203      	movs	r2, #3
 80064ce:	400a      	ands	r2, r1
 80064d0:	00d2      	lsls	r2, r2, #3
 80064d2:	21ff      	movs	r1, #255	; 0xff
 80064d4:	4091      	lsls	r1, r2
 80064d6:	000a      	movs	r2, r1
 80064d8:	43d2      	mvns	r2, r2
 80064da:	401a      	ands	r2, r3
 80064dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	22ff      	movs	r2, #255	; 0xff
 80064e4:	401a      	ands	r2, r3
 80064e6:	1dfb      	adds	r3, r7, #7
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	0018      	movs	r0, r3
 80064ec:	2303      	movs	r3, #3
 80064ee:	4003      	ands	r3, r0
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064f4:	481f      	ldr	r0, [pc, #124]	; (8006574 <__NVIC_SetPriority+0xd4>)
 80064f6:	1dfb      	adds	r3, r7, #7
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	430a      	orrs	r2, r1
 8006500:	33c0      	adds	r3, #192	; 0xc0
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006506:	e031      	b.n	800656c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006508:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <__NVIC_SetPriority+0xd8>)
 800650a:	1dfb      	adds	r3, r7, #7
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	0019      	movs	r1, r3
 8006510:	230f      	movs	r3, #15
 8006512:	400b      	ands	r3, r1
 8006514:	3b08      	subs	r3, #8
 8006516:	089b      	lsrs	r3, r3, #2
 8006518:	3306      	adds	r3, #6
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	18d3      	adds	r3, r2, r3
 800651e:	3304      	adds	r3, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	1dfa      	adds	r2, r7, #7
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	0011      	movs	r1, r2
 8006528:	2203      	movs	r2, #3
 800652a:	400a      	ands	r2, r1
 800652c:	00d2      	lsls	r2, r2, #3
 800652e:	21ff      	movs	r1, #255	; 0xff
 8006530:	4091      	lsls	r1, r2
 8006532:	000a      	movs	r2, r1
 8006534:	43d2      	mvns	r2, r2
 8006536:	401a      	ands	r2, r3
 8006538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	019b      	lsls	r3, r3, #6
 800653e:	22ff      	movs	r2, #255	; 0xff
 8006540:	401a      	ands	r2, r3
 8006542:	1dfb      	adds	r3, r7, #7
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	0018      	movs	r0, r3
 8006548:	2303      	movs	r3, #3
 800654a:	4003      	ands	r3, r0
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006550:	4809      	ldr	r0, [pc, #36]	; (8006578 <__NVIC_SetPriority+0xd8>)
 8006552:	1dfb      	adds	r3, r7, #7
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	001c      	movs	r4, r3
 8006558:	230f      	movs	r3, #15
 800655a:	4023      	ands	r3, r4
 800655c:	3b08      	subs	r3, #8
 800655e:	089b      	lsrs	r3, r3, #2
 8006560:	430a      	orrs	r2, r1
 8006562:	3306      	adds	r3, #6
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	18c3      	adds	r3, r0, r3
 8006568:	3304      	adds	r3, #4
 800656a:	601a      	str	r2, [r3, #0]
}
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	46bd      	mov	sp, r7
 8006570:	b003      	add	sp, #12
 8006572:	bd90      	pop	{r4, r7, pc}
 8006574:	e000e100 	.word	0xe000e100
 8006578:	e000ed00 	.word	0xe000ed00

0800657c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	045b      	lsls	r3, r3, #17
 800658c:	429a      	cmp	r2, r3
 800658e:	d301      	bcc.n	8006594 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006590:	2301      	movs	r3, #1
 8006592:	e010      	b.n	80065b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <SysTick_Config+0x44>)
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	3a01      	subs	r2, #1
 800659a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800659c:	2301      	movs	r3, #1
 800659e:	425b      	negs	r3, r3
 80065a0:	2103      	movs	r1, #3
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7ff ff7c 	bl	80064a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <SysTick_Config+0x44>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065ae:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <SysTick_Config+0x44>)
 80065b0:	2207      	movs	r2, #7
 80065b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b002      	add	sp, #8
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	e000e010 	.word	0xe000e010

080065c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	210f      	movs	r1, #15
 80065d0:	187b      	adds	r3, r7, r1
 80065d2:	1c02      	adds	r2, r0, #0
 80065d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	187b      	adds	r3, r7, r1
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b25b      	sxtb	r3, r3
 80065de:	0011      	movs	r1, r2
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7ff ff5d 	bl	80064a0 <__NVIC_SetPriority>
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b004      	add	sp, #16
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	0002      	movs	r2, r0
 80065f6:	1dfb      	adds	r3, r7, #7
 80065f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065fa:	1dfb      	adds	r3, r7, #7
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b25b      	sxtb	r3, r3
 8006600:	0018      	movs	r0, r3
 8006602:	f7ff ff33 	bl	800646c <__NVIC_EnableIRQ>
}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	46bd      	mov	sp, r7
 800660a:	b002      	add	sp, #8
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b082      	sub	sp, #8
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f7ff ffaf 	bl	800657c <SysTick_Config>
 800661e:	0003      	movs	r3, r0
}
 8006620:	0018      	movs	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e077      	b.n	800672a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a3d      	ldr	r2, [pc, #244]	; (8006734 <HAL_DMA_Init+0x10c>)
 8006640:	4694      	mov	ip, r2
 8006642:	4463      	add	r3, ip
 8006644:	2114      	movs	r1, #20
 8006646:	0018      	movs	r0, r3
 8006648:	f7f9 fd80 	bl	800014c <__udivsi3>
 800664c:	0003      	movs	r3, r0
 800664e:	009a      	lsls	r2, r3, #2
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2225      	movs	r2, #37	; 0x25
 8006658:	2102      	movs	r1, #2
 800665a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4934      	ldr	r1, [pc, #208]	; (8006738 <HAL_DMA_Init+0x110>)
 8006668:	400a      	ands	r2, r1
 800666a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0018      	movs	r0, r3
 80066a6:	f000 fa97 	bl	8006bd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	01db      	lsls	r3, r3, #7
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d102      	bne.n	80066bc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	213f      	movs	r1, #63	; 0x3f
 80066c6:	400a      	ands	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80066d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d011      	beq.n	8006700 <HAL_DMA_Init+0xd8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d80d      	bhi.n	8006700 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f000 faa2 	bl	8006c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	e008      	b.n	8006712 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2225      	movs	r2, #37	; 0x25
 800671c:	2101      	movs	r1, #1
 800671e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2224      	movs	r2, #36	; 0x24
 8006724:	2100      	movs	r1, #0
 8006726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	0018      	movs	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	b002      	add	sp, #8
 8006730:	bd80      	pop	{r7, pc}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	bffdfff8 	.word	0xbffdfff8
 8006738:	ffff800f 	.word	0xffff800f

0800673c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800674a:	2317      	movs	r3, #23
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2224      	movs	r2, #36	; 0x24
 8006756:	5c9b      	ldrb	r3, [r3, r2]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_DMA_Start_IT+0x24>
 800675c:	2302      	movs	r3, #2
 800675e:	e06f      	b.n	8006840 <HAL_DMA_Start_IT+0x104>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	2101      	movs	r1, #1
 8006766:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2225      	movs	r2, #37	; 0x25
 800676c:	5c9b      	ldrb	r3, [r3, r2]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d157      	bne.n	8006824 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2225      	movs	r2, #37	; 0x25
 8006778:	2102      	movs	r1, #2
 800677a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2101      	movs	r1, #1
 800678e:	438a      	bics	r2, r1
 8006790:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f9dd 	bl	8006b58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	210e      	movs	r1, #14
 80067b2:	430a      	orrs	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e00f      	b.n	80067d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2104      	movs	r1, #4
 80067c4:	438a      	bics	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	210a      	movs	r1, #10
 80067d4:	430a      	orrs	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	2380      	movs	r3, #128	; 0x80
 80067e0:	025b      	lsls	r3, r3, #9
 80067e2:	4013      	ands	r3, r2
 80067e4:	d008      	beq.n	80067f8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f0:	2180      	movs	r1, #128	; 0x80
 80067f2:	0049      	lsls	r1, r1, #1
 80067f4:	430a      	orrs	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	0049      	lsls	r1, r1, #1
 800680e:	430a      	orrs	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2101      	movs	r1, #1
 800681e:	430a      	orrs	r2, r1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e00a      	b.n	800683a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2224      	movs	r2, #36	; 0x24
 800682e:	2100      	movs	r1, #0
 8006830:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006832:	2317      	movs	r3, #23
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800683a:	2317      	movs	r3, #23
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	781b      	ldrb	r3, [r3, #0]
}
 8006840:	0018      	movs	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	b006      	add	sp, #24
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e050      	b.n	80068fc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2225      	movs	r2, #37	; 0x25
 800685e:	5c9b      	ldrb	r3, [r3, r2]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d008      	beq.n	8006878 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2204      	movs	r2, #4
 800686a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2224      	movs	r2, #36	; 0x24
 8006870:	2100      	movs	r1, #0
 8006872:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e041      	b.n	80068fc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	210e      	movs	r1, #14
 8006884:	438a      	bics	r2, r1
 8006886:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006892:	491c      	ldr	r1, [pc, #112]	; (8006904 <HAL_DMA_Abort+0xbc>)
 8006894:	400a      	ands	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2101      	movs	r1, #1
 80068a4:	438a      	bics	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80068a8:	4b17      	ldr	r3, [pc, #92]	; (8006908 <HAL_DMA_Abort+0xc0>)
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	221c      	movs	r2, #28
 80068b2:	4013      	ands	r3, r2
 80068b4:	2201      	movs	r2, #1
 80068b6:	409a      	lsls	r2, r3
 80068b8:	4b13      	ldr	r3, [pc, #76]	; (8006908 <HAL_DMA_Abort+0xc0>)
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80068c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00c      	beq.n	80068ea <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068da:	490a      	ldr	r1, [pc, #40]	; (8006904 <HAL_DMA_Abort+0xbc>)
 80068dc:	400a      	ands	r2, r1
 80068de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80068e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2225      	movs	r2, #37	; 0x25
 80068ee:	2101      	movs	r1, #1
 80068f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2224      	movs	r2, #36	; 0x24
 80068f6:	2100      	movs	r1, #0
 80068f8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	0018      	movs	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	b002      	add	sp, #8
 8006902:	bd80      	pop	{r7, pc}
 8006904:	fffffeff 	.word	0xfffffeff
 8006908:	40020000 	.word	0x40020000

0800690c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	210f      	movs	r1, #15
 8006916:	187b      	adds	r3, r7, r1
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2225      	movs	r2, #37	; 0x25
 8006920:	5c9b      	ldrb	r3, [r3, r2]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d006      	beq.n	8006936 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2204      	movs	r2, #4
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800692e:	187b      	adds	r3, r7, r1
 8006930:	2201      	movs	r2, #1
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	e049      	b.n	80069ca <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	210e      	movs	r1, #14
 8006942:	438a      	bics	r2, r1
 8006944:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2101      	movs	r1, #1
 8006952:	438a      	bics	r2, r1
 8006954:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	491d      	ldr	r1, [pc, #116]	; (80069d8 <HAL_DMA_Abort_IT+0xcc>)
 8006962:	400a      	ands	r2, r1
 8006964:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006966:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <HAL_DMA_Abort_IT+0xd0>)
 8006968:	6859      	ldr	r1, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	221c      	movs	r2, #28
 8006970:	4013      	ands	r3, r2
 8006972:	2201      	movs	r2, #1
 8006974:	409a      	lsls	r2, r3
 8006976:	4b19      	ldr	r3, [pc, #100]	; (80069dc <HAL_DMA_Abort_IT+0xd0>)
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006984:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006998:	490f      	ldr	r1, [pc, #60]	; (80069d8 <HAL_DMA_Abort_IT+0xcc>)
 800699a:	400a      	ands	r2, r1
 800699c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80069a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2225      	movs	r2, #37	; 0x25
 80069ac:	2101      	movs	r1, #1
 80069ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2224      	movs	r2, #36	; 0x24
 80069b4:	2100      	movs	r1, #0
 80069b6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	0010      	movs	r0, r2
 80069c8:	4798      	blx	r3
    }
  }
  return status;
 80069ca:	230f      	movs	r3, #15
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	781b      	ldrb	r3, [r3, #0]
}
 80069d0:	0018      	movs	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b004      	add	sp, #16
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	fffffeff 	.word	0xfffffeff
 80069dc:	40020000 	.word	0x40020000

080069e0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80069e8:	4b55      	ldr	r3, [pc, #340]	; (8006b40 <HAL_DMA_IRQHandler+0x160>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	221c      	movs	r2, #28
 80069fc:	4013      	ands	r3, r2
 80069fe:	2204      	movs	r2, #4
 8006a00:	409a      	lsls	r2, r3
 8006a02:	0013      	movs	r3, r2
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4013      	ands	r3, r2
 8006a08:	d027      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x7a>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d023      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d107      	bne.n	8006a2e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2104      	movs	r1, #4
 8006a2a:	438a      	bics	r2, r1
 8006a2c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006a2e:	4b44      	ldr	r3, [pc, #272]	; (8006b40 <HAL_DMA_IRQHandler+0x160>)
 8006a30:	6859      	ldr	r1, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	221c      	movs	r2, #28
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <HAL_DMA_IRQHandler+0x160>)
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d100      	bne.n	8006a4e <HAL_DMA_IRQHandler+0x6e>
 8006a4c:	e073      	b.n	8006b36 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	0010      	movs	r0, r2
 8006a56:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006a58:	e06d      	b.n	8006b36 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	221c      	movs	r2, #28
 8006a60:	4013      	ands	r3, r2
 8006a62:	2202      	movs	r2, #2
 8006a64:	409a      	lsls	r2, r3
 8006a66:	0013      	movs	r3, r2
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	d02e      	beq.n	8006acc <HAL_DMA_IRQHandler+0xec>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2202      	movs	r2, #2
 8006a72:	4013      	ands	r3, r2
 8006a74:	d02a      	beq.n	8006acc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	4013      	ands	r3, r2
 8006a80:	d10b      	bne.n	8006a9a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	210a      	movs	r1, #10
 8006a8e:	438a      	bics	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2225      	movs	r2, #37	; 0x25
 8006a96:	2101      	movs	r1, #1
 8006a98:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006a9a:	4b29      	ldr	r3, [pc, #164]	; (8006b40 <HAL_DMA_IRQHandler+0x160>)
 8006a9c:	6859      	ldr	r1, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	221c      	movs	r2, #28
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	4b25      	ldr	r3, [pc, #148]	; (8006b40 <HAL_DMA_IRQHandler+0x160>)
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2224      	movs	r2, #36	; 0x24
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d03a      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	0010      	movs	r0, r2
 8006ac8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006aca:	e034      	b.n	8006b36 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	221c      	movs	r2, #28
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	0013      	movs	r3, r2
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4013      	ands	r3, r2
 8006ade:	d02b      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x158>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2208      	movs	r2, #8
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	d027      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	210e      	movs	r1, #14
 8006af4:	438a      	bics	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <HAL_DMA_IRQHandler+0x160>)
 8006afa:	6859      	ldr	r1, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	221c      	movs	r2, #28
 8006b02:	4013      	ands	r3, r2
 8006b04:	2201      	movs	r2, #1
 8006b06:	409a      	lsls	r2, r3
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <HAL_DMA_IRQHandler+0x160>)
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2225      	movs	r2, #37	; 0x25
 8006b18:	2101      	movs	r1, #1
 8006b1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	; 0x24
 8006b20:	2100      	movs	r1, #0
 8006b22:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	0010      	movs	r0, r2
 8006b34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	46c0      	nop			; (mov r8, r8)
}
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	b004      	add	sp, #16
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40020000 	.word	0x40020000

08006b44 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b002      	add	sp, #8
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006b6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b80:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <DMA_SetConfig+0x7c>)
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	221c      	movs	r2, #28
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2201      	movs	r2, #1
 8006b90:	409a      	lsls	r2, r3
 8006b92:	4b10      	ldr	r3, [pc, #64]	; (8006bd4 <DMA_SetConfig+0x7c>)
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d108      	bne.n	8006bba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006bb8:	e007      	b.n	8006bca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	60da      	str	r2, [r3, #12]
}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	b004      	add	sp, #16
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	40020000 	.word	0x40020000

08006bd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	089b      	lsrs	r3, r3, #2
 8006be6:	4a10      	ldr	r2, [pc, #64]	; (8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006be8:	4694      	mov	ip, r2
 8006bea:	4463      	add	r3, ip
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	001a      	movs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	001a      	movs	r2, r3
 8006bfa:	23ff      	movs	r3, #255	; 0xff
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	3b08      	subs	r3, #8
 8006c00:	2114      	movs	r1, #20
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7f9 faa2 	bl	800014c <__udivsi3>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a07      	ldr	r2, [pc, #28]	; (8006c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006c10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	221f      	movs	r2, #31
 8006c16:	4013      	ands	r3, r2
 8006c18:	2201      	movs	r2, #1
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006c20:	46c0      	nop			; (mov r8, r8)
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b004      	add	sp, #16
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	10008200 	.word	0x10008200
 8006c2c:	40020880 	.word	0x40020880

08006c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	223f      	movs	r2, #63	; 0x3f
 8006c3e:	4013      	ands	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006c46:	4694      	mov	ip, r2
 8006c48:	4463      	add	r3, ip
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	001a      	movs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c56:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2201      	movs	r2, #1
 8006c62:	409a      	lsls	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006c68:	46c0      	nop			; (mov r8, r8)
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b004      	add	sp, #16
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	1000823f 	.word	0x1000823f
 8006c74:	40020940 	.word	0x40020940

08006c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c82:	2300      	movs	r3, #0
 8006c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c86:	e147      	b.n	8006f18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4091      	lsls	r1, r2
 8006c92:	000a      	movs	r2, r1
 8006c94:	4013      	ands	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d100      	bne.n	8006ca0 <HAL_GPIO_Init+0x28>
 8006c9e:	e138      	b.n	8006f12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d005      	beq.n	8006cb8 <HAL_GPIO_Init+0x40>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d130      	bne.n	8006d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	409a      	lsls	r2, r3
 8006cc6:	0013      	movs	r3, r2
 8006cc8:	43da      	mvns	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	0013      	movs	r3, r2
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cee:	2201      	movs	r2, #1
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	0013      	movs	r3, r2
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	2201      	movs	r2, #1
 8006d06:	401a      	ands	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	409a      	lsls	r2, r3
 8006d0c:	0013      	movs	r3, r2
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d017      	beq.n	8006d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	2203      	movs	r2, #3
 8006d32:	409a      	lsls	r2, r3
 8006d34:	0013      	movs	r3, r2
 8006d36:	43da      	mvns	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	409a      	lsls	r2, r3
 8006d48:	0013      	movs	r3, r2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d123      	bne.n	8006daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	08da      	lsrs	r2, r3, #3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3208      	adds	r2, #8
 8006d6a:	0092      	lsls	r2, r2, #2
 8006d6c:	58d3      	ldr	r3, [r2, r3]
 8006d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2207      	movs	r2, #7
 8006d74:	4013      	ands	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	220f      	movs	r2, #15
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	43da      	mvns	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4013      	ands	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2107      	movs	r1, #7
 8006d8e:	400b      	ands	r3, r1
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	409a      	lsls	r2, r3
 8006d94:	0013      	movs	r3, r2
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	08da      	lsrs	r2, r3, #3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3208      	adds	r2, #8
 8006da4:	0092      	lsls	r2, r2, #2
 8006da6:	6939      	ldr	r1, [r7, #16]
 8006da8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	2203      	movs	r2, #3
 8006db6:	409a      	lsls	r2, r3
 8006db8:	0013      	movs	r3, r2
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	401a      	ands	r2, r3
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	0013      	movs	r3, r2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	23c0      	movs	r3, #192	; 0xc0
 8006de4:	029b      	lsls	r3, r3, #10
 8006de6:	4013      	ands	r3, r2
 8006de8:	d100      	bne.n	8006dec <HAL_GPIO_Init+0x174>
 8006dea:	e092      	b.n	8006f12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006dec:	4a50      	ldr	r2, [pc, #320]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	089b      	lsrs	r3, r3, #2
 8006df2:	3318      	adds	r3, #24
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	589b      	ldr	r3, [r3, r2]
 8006df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	4013      	ands	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	220f      	movs	r2, #15
 8006e04:	409a      	lsls	r2, r3
 8006e06:	0013      	movs	r3, r2
 8006e08:	43da      	mvns	r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	23a0      	movs	r3, #160	; 0xa0
 8006e14:	05db      	lsls	r3, r3, #23
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d013      	beq.n	8006e42 <HAL_GPIO_Init+0x1ca>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a45      	ldr	r2, [pc, #276]	; (8006f34 <HAL_GPIO_Init+0x2bc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00d      	beq.n	8006e3e <HAL_GPIO_Init+0x1c6>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a44      	ldr	r2, [pc, #272]	; (8006f38 <HAL_GPIO_Init+0x2c0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d007      	beq.n	8006e3a <HAL_GPIO_Init+0x1c2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a43      	ldr	r2, [pc, #268]	; (8006f3c <HAL_GPIO_Init+0x2c4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d101      	bne.n	8006e36 <HAL_GPIO_Init+0x1be>
 8006e32:	2303      	movs	r3, #3
 8006e34:	e006      	b.n	8006e44 <HAL_GPIO_Init+0x1cc>
 8006e36:	2305      	movs	r3, #5
 8006e38:	e004      	b.n	8006e44 <HAL_GPIO_Init+0x1cc>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e002      	b.n	8006e44 <HAL_GPIO_Init+0x1cc>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <HAL_GPIO_Init+0x1cc>
 8006e42:	2300      	movs	r3, #0
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	2103      	movs	r1, #3
 8006e48:	400a      	ands	r2, r1
 8006e4a:	00d2      	lsls	r2, r2, #3
 8006e4c:	4093      	lsls	r3, r2
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006e54:	4936      	ldr	r1, [pc, #216]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	089b      	lsrs	r3, r3, #2
 8006e5a:	3318      	adds	r3, #24
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e62:	4b33      	ldr	r3, [pc, #204]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	43da      	mvns	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	035b      	lsls	r3, r3, #13
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d003      	beq.n	8006e86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e86:	4b2a      	ldr	r3, [pc, #168]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	43da      	mvns	r2, r3
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	039b      	lsls	r3, r3, #14
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006eb0:	4b1f      	ldr	r3, [pc, #124]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006eb6:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006eb8:	2384      	movs	r3, #132	; 0x84
 8006eba:	58d3      	ldr	r3, [r2, r3]
 8006ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	43da      	mvns	r2, r3
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	029b      	lsls	r3, r3, #10
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	d003      	beq.n	8006edc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006edc:	4914      	ldr	r1, [pc, #80]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006ede:	2284      	movs	r2, #132	; 0x84
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006ee4:	4a12      	ldr	r2, [pc, #72]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006ee6:	2380      	movs	r3, #128	; 0x80
 8006ee8:	58d3      	ldr	r3, [r2, r3]
 8006eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	43da      	mvns	r2, r3
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	025b      	lsls	r3, r3, #9
 8006efe:	4013      	ands	r3, r2
 8006f00:	d003      	beq.n	8006f0a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f0a:	4909      	ldr	r1, [pc, #36]	; (8006f30 <HAL_GPIO_Init+0x2b8>)
 8006f0c:	2280      	movs	r2, #128	; 0x80
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	3301      	adds	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	40da      	lsrs	r2, r3
 8006f20:	1e13      	subs	r3, r2, #0
 8006f22:	d000      	beq.n	8006f26 <HAL_GPIO_Init+0x2ae>
 8006f24:	e6b0      	b.n	8006c88 <HAL_GPIO_Init+0x10>
  }
}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b006      	add	sp, #24
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40021800 	.word	0x40021800
 8006f34:	50000400 	.word	0x50000400
 8006f38:	50000800 	.word	0x50000800
 8006f3c:	50000c00 	.word	0x50000c00

08006f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	000a      	movs	r2, r1
 8006f4a:	1cbb      	adds	r3, r7, #2
 8006f4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	1cba      	adds	r2, r7, #2
 8006f54:	8812      	ldrh	r2, [r2, #0]
 8006f56:	4013      	ands	r3, r2
 8006f58:	d004      	beq.n	8006f64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006f5a:	230f      	movs	r3, #15
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	2201      	movs	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e003      	b.n	8006f6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f64:	230f      	movs	r3, #15
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	2200      	movs	r2, #0
 8006f6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006f6c:	230f      	movs	r3, #15
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	781b      	ldrb	r3, [r3, #0]
}
 8006f72:	0018      	movs	r0, r3
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b004      	add	sp, #16
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	0008      	movs	r0, r1
 8006f84:	0011      	movs	r1, r2
 8006f86:	1cbb      	adds	r3, r7, #2
 8006f88:	1c02      	adds	r2, r0, #0
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	1c7b      	adds	r3, r7, #1
 8006f8e:	1c0a      	adds	r2, r1, #0
 8006f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f92:	1c7b      	adds	r3, r7, #1
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f9a:	1cbb      	adds	r3, r7, #2
 8006f9c:	881a      	ldrh	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006fa2:	e003      	b.n	8006fac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006fa4:	1cbb      	adds	r3, r7, #2
 8006fa6:	881a      	ldrh	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006fac:	46c0      	nop			; (mov r8, r8)
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b002      	add	sp, #8
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006fbc:	4b19      	ldr	r3, [pc, #100]	; (8007024 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a19      	ldr	r2, [pc, #100]	; (8007028 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	4b17      	ldr	r3, [pc, #92]	; (8007024 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d11f      	bne.n	8007018 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006fd8:	4b14      	ldr	r3, [pc, #80]	; (800702c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	0013      	movs	r3, r2
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	189b      	adds	r3, r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	4912      	ldr	r1, [pc, #72]	; (8007030 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7f9 f8b0 	bl	800014c <__udivsi3>
 8006fec:	0003      	movs	r3, r0
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ff2:	e008      	b.n	8007006 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e001      	b.n	8007006 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e009      	b.n	800701a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007006:	4b07      	ldr	r3, [pc, #28]	; (8007024 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	401a      	ands	r2, r3
 8007010:	2380      	movs	r3, #128	; 0x80
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	429a      	cmp	r2, r3
 8007016:	d0ed      	beq.n	8006ff4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	0018      	movs	r0, r3
 800701c:	46bd      	mov	sp, r7
 800701e:	b004      	add	sp, #16
 8007020:	bd80      	pop	{r7, pc}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	40007000 	.word	0x40007000
 8007028:	fffff9ff 	.word	0xfffff9ff
 800702c:	20000000 	.word	0x20000000
 8007030:	000f4240 	.word	0x000f4240

08007034 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007038:	4b03      	ldr	r3, [pc, #12]	; (8007048 <LL_RCC_GetAPB1Prescaler+0x14>)
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	23e0      	movs	r3, #224	; 0xe0
 800703e:	01db      	lsls	r3, r3, #7
 8007040:	4013      	ands	r3, r2
}
 8007042:	0018      	movs	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40021000 	.word	0x40021000

0800704c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e2f3      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2201      	movs	r2, #1
 8007064:	4013      	ands	r3, r2
 8007066:	d100      	bne.n	800706a <HAL_RCC_OscConfig+0x1e>
 8007068:	e07c      	b.n	8007164 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800706a:	4bc3      	ldr	r3, [pc, #780]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2238      	movs	r2, #56	; 0x38
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007074:	4bc0      	ldr	r3, [pc, #768]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	2203      	movs	r2, #3
 800707a:	4013      	ands	r3, r2
 800707c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b10      	cmp	r3, #16
 8007082:	d102      	bne.n	800708a <HAL_RCC_OscConfig+0x3e>
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d002      	beq.n	8007090 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d10b      	bne.n	80070a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007090:	4bb9      	ldr	r3, [pc, #740]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	2380      	movs	r3, #128	; 0x80
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	4013      	ands	r3, r2
 800709a:	d062      	beq.n	8007162 <HAL_RCC_OscConfig+0x116>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15e      	bne.n	8007162 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e2ce      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	025b      	lsls	r3, r3, #9
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d107      	bne.n	80070c4 <HAL_RCC_OscConfig+0x78>
 80070b4:	4bb0      	ldr	r3, [pc, #704]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4baf      	ldr	r3, [pc, #700]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	0249      	lsls	r1, r1, #9
 80070be:	430a      	orrs	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e020      	b.n	8007106 <HAL_RCC_OscConfig+0xba>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	23a0      	movs	r3, #160	; 0xa0
 80070ca:	02db      	lsls	r3, r3, #11
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d10e      	bne.n	80070ee <HAL_RCC_OscConfig+0xa2>
 80070d0:	4ba9      	ldr	r3, [pc, #676]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	4ba8      	ldr	r3, [pc, #672]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070d6:	2180      	movs	r1, #128	; 0x80
 80070d8:	02c9      	lsls	r1, r1, #11
 80070da:	430a      	orrs	r2, r1
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	4ba6      	ldr	r3, [pc, #664]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4ba5      	ldr	r3, [pc, #660]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070e4:	2180      	movs	r1, #128	; 0x80
 80070e6:	0249      	lsls	r1, r1, #9
 80070e8:	430a      	orrs	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e00b      	b.n	8007106 <HAL_RCC_OscConfig+0xba>
 80070ee:	4ba2      	ldr	r3, [pc, #648]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4ba1      	ldr	r3, [pc, #644]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070f4:	49a1      	ldr	r1, [pc, #644]	; (800737c <HAL_RCC_OscConfig+0x330>)
 80070f6:	400a      	ands	r2, r1
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	4b9f      	ldr	r3, [pc, #636]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b9e      	ldr	r3, [pc, #632]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007100:	499f      	ldr	r1, [pc, #636]	; (8007380 <HAL_RCC_OscConfig+0x334>)
 8007102:	400a      	ands	r2, r1
 8007104:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d014      	beq.n	8007138 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710e:	f7fe f885 	bl	800521c <HAL_GetTick>
 8007112:	0003      	movs	r3, r0
 8007114:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007118:	f7fe f880 	bl	800521c <HAL_GetTick>
 800711c:	0002      	movs	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b64      	cmp	r3, #100	; 0x64
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e28d      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800712a:	4b93      	ldr	r3, [pc, #588]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	2380      	movs	r3, #128	; 0x80
 8007130:	029b      	lsls	r3, r3, #10
 8007132:	4013      	ands	r3, r2
 8007134:	d0f0      	beq.n	8007118 <HAL_RCC_OscConfig+0xcc>
 8007136:	e015      	b.n	8007164 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fe f870 	bl	800521c <HAL_GetTick>
 800713c:	0003      	movs	r3, r0
 800713e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007142:	f7fe f86b 	bl	800521c <HAL_GetTick>
 8007146:	0002      	movs	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b64      	cmp	r3, #100	; 0x64
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e278      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007154:	4b88      	ldr	r3, [pc, #544]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	029b      	lsls	r3, r3, #10
 800715c:	4013      	ands	r3, r2
 800715e:	d1f0      	bne.n	8007142 <HAL_RCC_OscConfig+0xf6>
 8007160:	e000      	b.n	8007164 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007162:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2202      	movs	r2, #2
 800716a:	4013      	ands	r3, r2
 800716c:	d100      	bne.n	8007170 <HAL_RCC_OscConfig+0x124>
 800716e:	e099      	b.n	80072a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007170:	4b81      	ldr	r3, [pc, #516]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2238      	movs	r2, #56	; 0x38
 8007176:	4013      	ands	r3, r2
 8007178:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800717a:	4b7f      	ldr	r3, [pc, #508]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	2203      	movs	r2, #3
 8007180:	4013      	ands	r3, r2
 8007182:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b10      	cmp	r3, #16
 8007188:	d102      	bne.n	8007190 <HAL_RCC_OscConfig+0x144>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d002      	beq.n	8007196 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d135      	bne.n	8007202 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007196:	4b78      	ldr	r3, [pc, #480]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	2380      	movs	r3, #128	; 0x80
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	4013      	ands	r3, r2
 80071a0:	d005      	beq.n	80071ae <HAL_RCC_OscConfig+0x162>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e24b      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ae:	4b72      	ldr	r3, [pc, #456]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4a74      	ldr	r2, [pc, #464]	; (8007384 <HAL_RCC_OscConfig+0x338>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	0019      	movs	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	021a      	lsls	r2, r3, #8
 80071be:	4b6e      	ldr	r3, [pc, #440]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d112      	bne.n	80071f0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80071ca:	4b6b      	ldr	r3, [pc, #428]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a6e      	ldr	r2, [pc, #440]	; (8007388 <HAL_RCC_OscConfig+0x33c>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	0019      	movs	r1, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	4b67      	ldr	r3, [pc, #412]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80071da:	430a      	orrs	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80071de:	4b66      	ldr	r3, [pc, #408]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	0adb      	lsrs	r3, r3, #11
 80071e4:	2207      	movs	r2, #7
 80071e6:	4013      	ands	r3, r2
 80071e8:	4a68      	ldr	r2, [pc, #416]	; (800738c <HAL_RCC_OscConfig+0x340>)
 80071ea:	40da      	lsrs	r2, r3
 80071ec:	4b68      	ldr	r3, [pc, #416]	; (8007390 <HAL_RCC_OscConfig+0x344>)
 80071ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071f0:	4b68      	ldr	r3, [pc, #416]	; (8007394 <HAL_RCC_OscConfig+0x348>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7fd ffb5 	bl	8005164 <HAL_InitTick>
 80071fa:	1e03      	subs	r3, r0, #0
 80071fc:	d051      	beq.n	80072a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e221      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d030      	beq.n	800726c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800720a:	4b5b      	ldr	r3, [pc, #364]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a5e      	ldr	r2, [pc, #376]	; (8007388 <HAL_RCC_OscConfig+0x33c>)
 8007210:	4013      	ands	r3, r2
 8007212:	0019      	movs	r1, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	4b57      	ldr	r3, [pc, #348]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800721a:	430a      	orrs	r2, r1
 800721c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800721e:	4b56      	ldr	r3, [pc, #344]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4b55      	ldr	r3, [pc, #340]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007224:	2180      	movs	r1, #128	; 0x80
 8007226:	0049      	lsls	r1, r1, #1
 8007228:	430a      	orrs	r2, r1
 800722a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722c:	f7fd fff6 	bl	800521c <HAL_GetTick>
 8007230:	0003      	movs	r3, r0
 8007232:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007234:	e008      	b.n	8007248 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007236:	f7fd fff1 	bl	800521c <HAL_GetTick>
 800723a:	0002      	movs	r2, r0
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e1fe      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007248:	4b4b      	ldr	r3, [pc, #300]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	2380      	movs	r3, #128	; 0x80
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4013      	ands	r3, r2
 8007252:	d0f0      	beq.n	8007236 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007254:	4b48      	ldr	r3, [pc, #288]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4a4a      	ldr	r2, [pc, #296]	; (8007384 <HAL_RCC_OscConfig+0x338>)
 800725a:	4013      	ands	r3, r2
 800725c:	0019      	movs	r1, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	4b44      	ldr	r3, [pc, #272]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	e01b      	b.n	80072a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800726c:	4b42      	ldr	r3, [pc, #264]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4b41      	ldr	r3, [pc, #260]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007272:	4949      	ldr	r1, [pc, #292]	; (8007398 <HAL_RCC_OscConfig+0x34c>)
 8007274:	400a      	ands	r2, r1
 8007276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fd ffd0 	bl	800521c <HAL_GetTick>
 800727c:	0003      	movs	r3, r0
 800727e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007280:	e008      	b.n	8007294 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007282:	f7fd ffcb 	bl	800521c <HAL_GetTick>
 8007286:	0002      	movs	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d901      	bls.n	8007294 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e1d8      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007294:	4b38      	ldr	r3, [pc, #224]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4013      	ands	r3, r2
 800729e:	d1f0      	bne.n	8007282 <HAL_RCC_OscConfig+0x236>
 80072a0:	e000      	b.n	80072a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2208      	movs	r2, #8
 80072aa:	4013      	ands	r3, r2
 80072ac:	d047      	beq.n	800733e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80072ae:	4b32      	ldr	r3, [pc, #200]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2238      	movs	r2, #56	; 0x38
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b18      	cmp	r3, #24
 80072b8:	d10a      	bne.n	80072d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80072ba:	4b2f      	ldr	r3, [pc, #188]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80072bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072be:	2202      	movs	r2, #2
 80072c0:	4013      	ands	r3, r2
 80072c2:	d03c      	beq.n	800733e <HAL_RCC_OscConfig+0x2f2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d138      	bne.n	800733e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e1ba      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d019      	beq.n	800730c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80072d8:	4b27      	ldr	r3, [pc, #156]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80072da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072dc:	4b26      	ldr	r3, [pc, #152]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 80072de:	2101      	movs	r1, #1
 80072e0:	430a      	orrs	r2, r1
 80072e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e4:	f7fd ff9a 	bl	800521c <HAL_GetTick>
 80072e8:	0003      	movs	r3, r0
 80072ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ee:	f7fd ff95 	bl	800521c <HAL_GetTick>
 80072f2:	0002      	movs	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e1a2      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007300:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007304:	2202      	movs	r2, #2
 8007306:	4013      	ands	r3, r2
 8007308:	d0f1      	beq.n	80072ee <HAL_RCC_OscConfig+0x2a2>
 800730a:	e018      	b.n	800733e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800730c:	4b1a      	ldr	r3, [pc, #104]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 800730e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007310:	4b19      	ldr	r3, [pc, #100]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007312:	2101      	movs	r1, #1
 8007314:	438a      	bics	r2, r1
 8007316:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fd ff80 	bl	800521c <HAL_GetTick>
 800731c:	0003      	movs	r3, r0
 800731e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007322:	f7fd ff7b 	bl	800521c <HAL_GetTick>
 8007326:	0002      	movs	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e188      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007338:	2202      	movs	r2, #2
 800733a:	4013      	ands	r3, r2
 800733c:	d1f1      	bne.n	8007322 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2204      	movs	r2, #4
 8007344:	4013      	ands	r3, r2
 8007346:	d100      	bne.n	800734a <HAL_RCC_OscConfig+0x2fe>
 8007348:	e0c6      	b.n	80074d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800734a:	231f      	movs	r3, #31
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007352:	4b09      	ldr	r3, [pc, #36]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2238      	movs	r2, #56	; 0x38
 8007358:	4013      	ands	r3, r2
 800735a:	2b20      	cmp	r3, #32
 800735c:	d11e      	bne.n	800739c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <HAL_RCC_OscConfig+0x32c>)
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	2202      	movs	r2, #2
 8007364:	4013      	ands	r3, r2
 8007366:	d100      	bne.n	800736a <HAL_RCC_OscConfig+0x31e>
 8007368:	e0b6      	b.n	80074d8 <HAL_RCC_OscConfig+0x48c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d000      	beq.n	8007374 <HAL_RCC_OscConfig+0x328>
 8007372:	e0b1      	b.n	80074d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e166      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
 8007378:	40021000 	.word	0x40021000
 800737c:	fffeffff 	.word	0xfffeffff
 8007380:	fffbffff 	.word	0xfffbffff
 8007384:	ffff80ff 	.word	0xffff80ff
 8007388:	ffffc7ff 	.word	0xffffc7ff
 800738c:	00f42400 	.word	0x00f42400
 8007390:	20000000 	.word	0x20000000
 8007394:	20000008 	.word	0x20000008
 8007398:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800739c:	4bac      	ldr	r3, [pc, #688]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 800739e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	055b      	lsls	r3, r3, #21
 80073a4:	4013      	ands	r3, r2
 80073a6:	d101      	bne.n	80073ac <HAL_RCC_OscConfig+0x360>
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <HAL_RCC_OscConfig+0x362>
 80073ac:	2300      	movs	r3, #0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d011      	beq.n	80073d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80073b2:	4ba7      	ldr	r3, [pc, #668]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80073b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b6:	4ba6      	ldr	r3, [pc, #664]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80073b8:	2180      	movs	r1, #128	; 0x80
 80073ba:	0549      	lsls	r1, r1, #21
 80073bc:	430a      	orrs	r2, r1
 80073be:	63da      	str	r2, [r3, #60]	; 0x3c
 80073c0:	4ba3      	ldr	r3, [pc, #652]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80073c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c4:	2380      	movs	r3, #128	; 0x80
 80073c6:	055b      	lsls	r3, r3, #21
 80073c8:	4013      	ands	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80073ce:	231f      	movs	r3, #31
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	2201      	movs	r2, #1
 80073d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d6:	4b9f      	ldr	r3, [pc, #636]	; (8007654 <HAL_RCC_OscConfig+0x608>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	2380      	movs	r3, #128	; 0x80
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	4013      	ands	r3, r2
 80073e0:	d11a      	bne.n	8007418 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073e2:	4b9c      	ldr	r3, [pc, #624]	; (8007654 <HAL_RCC_OscConfig+0x608>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4b9b      	ldr	r3, [pc, #620]	; (8007654 <HAL_RCC_OscConfig+0x608>)
 80073e8:	2180      	movs	r1, #128	; 0x80
 80073ea:	0049      	lsls	r1, r1, #1
 80073ec:	430a      	orrs	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80073f0:	f7fd ff14 	bl	800521c <HAL_GetTick>
 80073f4:	0003      	movs	r3, r0
 80073f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f8:	e008      	b.n	800740c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fa:	f7fd ff0f 	bl	800521c <HAL_GetTick>
 80073fe:	0002      	movs	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e11c      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800740c:	4b91      	ldr	r3, [pc, #580]	; (8007654 <HAL_RCC_OscConfig+0x608>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	2380      	movs	r3, #128	; 0x80
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4013      	ands	r3, r2
 8007416:	d0f0      	beq.n	80073fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d106      	bne.n	800742e <HAL_RCC_OscConfig+0x3e2>
 8007420:	4b8b      	ldr	r3, [pc, #556]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007424:	4b8a      	ldr	r3, [pc, #552]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007426:	2101      	movs	r1, #1
 8007428:	430a      	orrs	r2, r1
 800742a:	65da      	str	r2, [r3, #92]	; 0x5c
 800742c:	e01c      	b.n	8007468 <HAL_RCC_OscConfig+0x41c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b05      	cmp	r3, #5
 8007434:	d10c      	bne.n	8007450 <HAL_RCC_OscConfig+0x404>
 8007436:	4b86      	ldr	r3, [pc, #536]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007438:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800743a:	4b85      	ldr	r3, [pc, #532]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 800743c:	2104      	movs	r1, #4
 800743e:	430a      	orrs	r2, r1
 8007440:	65da      	str	r2, [r3, #92]	; 0x5c
 8007442:	4b83      	ldr	r3, [pc, #524]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007444:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007446:	4b82      	ldr	r3, [pc, #520]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007448:	2101      	movs	r1, #1
 800744a:	430a      	orrs	r2, r1
 800744c:	65da      	str	r2, [r3, #92]	; 0x5c
 800744e:	e00b      	b.n	8007468 <HAL_RCC_OscConfig+0x41c>
 8007450:	4b7f      	ldr	r3, [pc, #508]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007452:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007454:	4b7e      	ldr	r3, [pc, #504]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007456:	2101      	movs	r1, #1
 8007458:	438a      	bics	r2, r1
 800745a:	65da      	str	r2, [r3, #92]	; 0x5c
 800745c:	4b7c      	ldr	r3, [pc, #496]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 800745e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007460:	4b7b      	ldr	r3, [pc, #492]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007462:	2104      	movs	r1, #4
 8007464:	438a      	bics	r2, r1
 8007466:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d014      	beq.n	800749a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007470:	f7fd fed4 	bl	800521c <HAL_GetTick>
 8007474:	0003      	movs	r3, r0
 8007476:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007478:	e009      	b.n	800748e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800747a:	f7fd fecf 	bl	800521c <HAL_GetTick>
 800747e:	0002      	movs	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	4a74      	ldr	r2, [pc, #464]	; (8007658 <HAL_RCC_OscConfig+0x60c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e0db      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800748e:	4b70      	ldr	r3, [pc, #448]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007492:	2202      	movs	r2, #2
 8007494:	4013      	ands	r3, r2
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x42e>
 8007498:	e013      	b.n	80074c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749a:	f7fd febf 	bl	800521c <HAL_GetTick>
 800749e:	0003      	movs	r3, r0
 80074a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074a2:	e009      	b.n	80074b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a4:	f7fd feba 	bl	800521c <HAL_GetTick>
 80074a8:	0002      	movs	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	4a6a      	ldr	r2, [pc, #424]	; (8007658 <HAL_RCC_OscConfig+0x60c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e0c6      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074b8:	4b65      	ldr	r3, [pc, #404]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80074ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074bc:	2202      	movs	r2, #2
 80074be:	4013      	ands	r3, r2
 80074c0:	d1f0      	bne.n	80074a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80074c2:	231f      	movs	r3, #31
 80074c4:	18fb      	adds	r3, r7, r3
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d105      	bne.n	80074d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80074cc:	4b60      	ldr	r3, [pc, #384]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80074ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d0:	4b5f      	ldr	r3, [pc, #380]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80074d2:	4962      	ldr	r1, [pc, #392]	; (800765c <HAL_RCC_OscConfig+0x610>)
 80074d4:	400a      	ands	r2, r1
 80074d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d100      	bne.n	80074e2 <HAL_RCC_OscConfig+0x496>
 80074e0:	e0b0      	b.n	8007644 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074e2:	4b5b      	ldr	r3, [pc, #364]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2238      	movs	r2, #56	; 0x38
 80074e8:	4013      	ands	r3, r2
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d100      	bne.n	80074f0 <HAL_RCC_OscConfig+0x4a4>
 80074ee:	e078      	b.n	80075e2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d153      	bne.n	80075a0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f8:	4b55      	ldr	r3, [pc, #340]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	4b54      	ldr	r3, [pc, #336]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80074fe:	4958      	ldr	r1, [pc, #352]	; (8007660 <HAL_RCC_OscConfig+0x614>)
 8007500:	400a      	ands	r2, r1
 8007502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fd fe8a 	bl	800521c <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750e:	f7fd fe85 	bl	800521c <HAL_GetTick>
 8007512:	0002      	movs	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e092      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007520:	4b4b      	ldr	r3, [pc, #300]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	2380      	movs	r3, #128	; 0x80
 8007526:	049b      	lsls	r3, r3, #18
 8007528:	4013      	ands	r3, r2
 800752a:	d1f0      	bne.n	800750e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800752c:	4b48      	ldr	r3, [pc, #288]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	4a4c      	ldr	r2, [pc, #304]	; (8007664 <HAL_RCC_OscConfig+0x618>)
 8007532:	4013      	ands	r3, r2
 8007534:	0019      	movs	r1, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1a      	ldr	r2, [r3, #32]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	431a      	orrs	r2, r3
 8007554:	4b3e      	ldr	r3, [pc, #248]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007556:	430a      	orrs	r2, r1
 8007558:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800755a:	4b3d      	ldr	r3, [pc, #244]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4b3c      	ldr	r3, [pc, #240]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007560:	2180      	movs	r1, #128	; 0x80
 8007562:	0449      	lsls	r1, r1, #17
 8007564:	430a      	orrs	r2, r1
 8007566:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007568:	4b39      	ldr	r3, [pc, #228]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	4b38      	ldr	r3, [pc, #224]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 800756e:	2180      	movs	r1, #128	; 0x80
 8007570:	0549      	lsls	r1, r1, #21
 8007572:	430a      	orrs	r2, r1
 8007574:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007576:	f7fd fe51 	bl	800521c <HAL_GetTick>
 800757a:	0003      	movs	r3, r0
 800757c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007580:	f7fd fe4c 	bl	800521c <HAL_GetTick>
 8007584:	0002      	movs	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e059      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007592:	4b2f      	ldr	r3, [pc, #188]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	049b      	lsls	r3, r3, #18
 800759a:	4013      	ands	r3, r2
 800759c:	d0f0      	beq.n	8007580 <HAL_RCC_OscConfig+0x534>
 800759e:	e051      	b.n	8007644 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a0:	4b2b      	ldr	r3, [pc, #172]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	4b2a      	ldr	r3, [pc, #168]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80075a6:	492e      	ldr	r1, [pc, #184]	; (8007660 <HAL_RCC_OscConfig+0x614>)
 80075a8:	400a      	ands	r2, r1
 80075aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ac:	f7fd fe36 	bl	800521c <HAL_GetTick>
 80075b0:	0003      	movs	r3, r0
 80075b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b6:	f7fd fe31 	bl	800521c <HAL_GetTick>
 80075ba:	0002      	movs	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e03e      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075c8:	4b21      	ldr	r3, [pc, #132]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	049b      	lsls	r3, r3, #18
 80075d0:	4013      	ands	r3, r2
 80075d2:	d1f0      	bne.n	80075b6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80075d4:	4b1e      	ldr	r3, [pc, #120]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80075da:	4923      	ldr	r1, [pc, #140]	; (8007668 <HAL_RCC_OscConfig+0x61c>)
 80075dc:	400a      	ands	r2, r1
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	e030      	b.n	8007644 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e02b      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80075ee:	4b18      	ldr	r3, [pc, #96]	; (8007650 <HAL_RCC_OscConfig+0x604>)
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2203      	movs	r2, #3
 80075f8:	401a      	ands	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d11e      	bne.n	8007640 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2270      	movs	r2, #112	; 0x70
 8007606:	401a      	ands	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800760c:	429a      	cmp	r2, r3
 800760e:	d117      	bne.n	8007640 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	23fe      	movs	r3, #254	; 0xfe
 8007614:	01db      	lsls	r3, r3, #7
 8007616:	401a      	ands	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800761e:	429a      	cmp	r2, r3
 8007620:	d10e      	bne.n	8007640 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	23f8      	movs	r3, #248	; 0xf8
 8007626:	039b      	lsls	r3, r3, #14
 8007628:	401a      	ands	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800762e:	429a      	cmp	r2, r3
 8007630:	d106      	bne.n	8007640 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	0f5b      	lsrs	r3, r3, #29
 8007636:	075a      	lsls	r2, r3, #29
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d001      	beq.n	8007644 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	0018      	movs	r0, r3
 8007648:	46bd      	mov	sp, r7
 800764a:	b008      	add	sp, #32
 800764c:	bd80      	pop	{r7, pc}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	40021000 	.word	0x40021000
 8007654:	40007000 	.word	0x40007000
 8007658:	00001388 	.word	0x00001388
 800765c:	efffffff 	.word	0xefffffff
 8007660:	feffffff 	.word	0xfeffffff
 8007664:	1fc1808c 	.word	0x1fc1808c
 8007668:	effefffc 	.word	0xeffefffc

0800766c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e0e9      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007680:	4b76      	ldr	r3, [pc, #472]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2207      	movs	r2, #7
 8007686:	4013      	ands	r3, r2
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d91e      	bls.n	80076cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800768e:	4b73      	ldr	r3, [pc, #460]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2207      	movs	r2, #7
 8007694:	4393      	bics	r3, r2
 8007696:	0019      	movs	r1, r3
 8007698:	4b70      	ldr	r3, [pc, #448]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076a0:	f7fd fdbc 	bl	800521c <HAL_GetTick>
 80076a4:	0003      	movs	r3, r0
 80076a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80076a8:	e009      	b.n	80076be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076aa:	f7fd fdb7 	bl	800521c <HAL_GetTick>
 80076ae:	0002      	movs	r2, r0
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	4a6a      	ldr	r2, [pc, #424]	; (8007860 <HAL_RCC_ClockConfig+0x1f4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e0ca      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80076be:	4b67      	ldr	r3, [pc, #412]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2207      	movs	r2, #7
 80076c4:	4013      	ands	r3, r2
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d1ee      	bne.n	80076aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2202      	movs	r2, #2
 80076d2:	4013      	ands	r3, r2
 80076d4:	d015      	beq.n	8007702 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2204      	movs	r2, #4
 80076dc:	4013      	ands	r3, r2
 80076de:	d006      	beq.n	80076ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80076e0:	4b60      	ldr	r3, [pc, #384]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	4b5f      	ldr	r3, [pc, #380]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 80076e6:	21e0      	movs	r1, #224	; 0xe0
 80076e8:	01c9      	lsls	r1, r1, #7
 80076ea:	430a      	orrs	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ee:	4b5d      	ldr	r3, [pc, #372]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	4a5d      	ldr	r2, [pc, #372]	; (8007868 <HAL_RCC_ClockConfig+0x1fc>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	0019      	movs	r1, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	4b59      	ldr	r3, [pc, #356]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 80076fe:	430a      	orrs	r2, r1
 8007700:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2201      	movs	r2, #1
 8007708:	4013      	ands	r3, r2
 800770a:	d057      	beq.n	80077bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d107      	bne.n	8007724 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007714:	4b53      	ldr	r3, [pc, #332]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	4013      	ands	r3, r2
 800771e:	d12b      	bne.n	8007778 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e097      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d107      	bne.n	800773c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772c:	4b4d      	ldr	r3, [pc, #308]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	2380      	movs	r3, #128	; 0x80
 8007732:	049b      	lsls	r3, r3, #18
 8007734:	4013      	ands	r3, r2
 8007736:	d11f      	bne.n	8007778 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e08b      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007744:	4b47      	ldr	r3, [pc, #284]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	4013      	ands	r3, r2
 800774e:	d113      	bne.n	8007778 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e07f      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d106      	bne.n	800776a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800775c:	4b41      	ldr	r3, [pc, #260]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 800775e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007760:	2202      	movs	r2, #2
 8007762:	4013      	ands	r3, r2
 8007764:	d108      	bne.n	8007778 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e074      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800776a:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 800776c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776e:	2202      	movs	r2, #2
 8007770:	4013      	ands	r3, r2
 8007772:	d101      	bne.n	8007778 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e06d      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007778:	4b3a      	ldr	r3, [pc, #232]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2207      	movs	r2, #7
 800777e:	4393      	bics	r3, r2
 8007780:	0019      	movs	r1, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b37      	ldr	r3, [pc, #220]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 8007788:	430a      	orrs	r2, r1
 800778a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778c:	f7fd fd46 	bl	800521c <HAL_GetTick>
 8007790:	0003      	movs	r3, r0
 8007792:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007794:	e009      	b.n	80077aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007796:	f7fd fd41 	bl	800521c <HAL_GetTick>
 800779a:	0002      	movs	r2, r0
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <HAL_RCC_ClockConfig+0x1f4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e054      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077aa:	4b2e      	ldr	r3, [pc, #184]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2238      	movs	r2, #56	; 0x38
 80077b0:	401a      	ands	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d1ec      	bne.n	8007796 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077bc:	4b27      	ldr	r3, [pc, #156]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2207      	movs	r2, #7
 80077c2:	4013      	ands	r3, r2
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d21e      	bcs.n	8007808 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ca:	4b24      	ldr	r3, [pc, #144]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2207      	movs	r2, #7
 80077d0:	4393      	bics	r3, r2
 80077d2:	0019      	movs	r1, r3
 80077d4:	4b21      	ldr	r3, [pc, #132]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077dc:	f7fd fd1e 	bl	800521c <HAL_GetTick>
 80077e0:	0003      	movs	r3, r0
 80077e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077e4:	e009      	b.n	80077fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077e6:	f7fd fd19 	bl	800521c <HAL_GetTick>
 80077ea:	0002      	movs	r2, r0
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	4a1b      	ldr	r2, [pc, #108]	; (8007860 <HAL_RCC_ClockConfig+0x1f4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e02c      	b.n	8007854 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <HAL_RCC_ClockConfig+0x1f0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2207      	movs	r2, #7
 8007800:	4013      	ands	r3, r2
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d1ee      	bne.n	80077e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2204      	movs	r2, #4
 800780e:	4013      	ands	r3, r2
 8007810:	d009      	beq.n	8007826 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <HAL_RCC_ClockConfig+0x200>)
 8007818:	4013      	ands	r3, r2
 800781a:	0019      	movs	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	4b10      	ldr	r3, [pc, #64]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 8007822:	430a      	orrs	r2, r1
 8007824:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007826:	f000 f829 	bl	800787c <HAL_RCC_GetSysClockFreq>
 800782a:	0001      	movs	r1, r0
 800782c:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <HAL_RCC_ClockConfig+0x1f8>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	0a1b      	lsrs	r3, r3, #8
 8007832:	220f      	movs	r2, #15
 8007834:	401a      	ands	r2, r3
 8007836:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <HAL_RCC_ClockConfig+0x204>)
 8007838:	0092      	lsls	r2, r2, #2
 800783a:	58d3      	ldr	r3, [r2, r3]
 800783c:	221f      	movs	r2, #31
 800783e:	4013      	ands	r3, r2
 8007840:	000a      	movs	r2, r1
 8007842:	40da      	lsrs	r2, r3
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_RCC_ClockConfig+0x208>)
 8007846:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007848:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <HAL_RCC_ClockConfig+0x20c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	0018      	movs	r0, r3
 800784e:	f7fd fc89 	bl	8005164 <HAL_InitTick>
 8007852:	0003      	movs	r3, r0
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b004      	add	sp, #16
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40022000 	.word	0x40022000
 8007860:	00001388 	.word	0x00001388
 8007864:	40021000 	.word	0x40021000
 8007868:	fffff0ff 	.word	0xfffff0ff
 800786c:	ffff8fff 	.word	0xffff8fff
 8007870:	080186d8 	.word	0x080186d8
 8007874:	20000000 	.word	0x20000000
 8007878:	20000008 	.word	0x20000008

0800787c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007882:	4b3c      	ldr	r3, [pc, #240]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2238      	movs	r2, #56	; 0x38
 8007888:	4013      	ands	r3, r2
 800788a:	d10f      	bne.n	80078ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800788c:	4b39      	ldr	r3, [pc, #228]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	0adb      	lsrs	r3, r3, #11
 8007892:	2207      	movs	r2, #7
 8007894:	4013      	ands	r3, r2
 8007896:	2201      	movs	r2, #1
 8007898:	409a      	lsls	r2, r3
 800789a:	0013      	movs	r3, r2
 800789c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	4835      	ldr	r0, [pc, #212]	; (8007978 <HAL_RCC_GetSysClockFreq+0xfc>)
 80078a2:	f7f8 fc53 	bl	800014c <__udivsi3>
 80078a6:	0003      	movs	r3, r0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e05d      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078ac:	4b31      	ldr	r3, [pc, #196]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2238      	movs	r2, #56	; 0x38
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d102      	bne.n	80078be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078b8:	4b30      	ldr	r3, [pc, #192]	; (800797c <HAL_RCC_GetSysClockFreq+0x100>)
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	e054      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078be:	4b2d      	ldr	r3, [pc, #180]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	2238      	movs	r2, #56	; 0x38
 80078c4:	4013      	ands	r3, r2
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d138      	bne.n	800793c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80078ca:	4b2a      	ldr	r3, [pc, #168]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2203      	movs	r2, #3
 80078d0:	4013      	ands	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078d4:	4b27      	ldr	r3, [pc, #156]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	091b      	lsrs	r3, r3, #4
 80078da:	2207      	movs	r2, #7
 80078dc:	4013      	ands	r3, r2
 80078de:	3301      	adds	r3, #1
 80078e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d10d      	bne.n	8007904 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	4824      	ldr	r0, [pc, #144]	; (800797c <HAL_RCC_GetSysClockFreq+0x100>)
 80078ec:	f7f8 fc2e 	bl	800014c <__udivsi3>
 80078f0:	0003      	movs	r3, r0
 80078f2:	0019      	movs	r1, r3
 80078f4:	4b1f      	ldr	r3, [pc, #124]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	0a1b      	lsrs	r3, r3, #8
 80078fa:	227f      	movs	r2, #127	; 0x7f
 80078fc:	4013      	ands	r3, r2
 80078fe:	434b      	muls	r3, r1
 8007900:	617b      	str	r3, [r7, #20]
        break;
 8007902:	e00d      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	481c      	ldr	r0, [pc, #112]	; (8007978 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007908:	f7f8 fc20 	bl	800014c <__udivsi3>
 800790c:	0003      	movs	r3, r0
 800790e:	0019      	movs	r1, r3
 8007910:	4b18      	ldr	r3, [pc, #96]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	227f      	movs	r2, #127	; 0x7f
 8007918:	4013      	ands	r3, r2
 800791a:	434b      	muls	r3, r1
 800791c:	617b      	str	r3, [r7, #20]
        break;
 800791e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007920:	4b14      	ldr	r3, [pc, #80]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	0f5b      	lsrs	r3, r3, #29
 8007926:	2207      	movs	r2, #7
 8007928:	4013      	ands	r3, r2
 800792a:	3301      	adds	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	6978      	ldr	r0, [r7, #20]
 8007932:	f7f8 fc0b 	bl	800014c <__udivsi3>
 8007936:	0003      	movs	r3, r0
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	e015      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2238      	movs	r2, #56	; 0x38
 8007942:	4013      	ands	r3, r2
 8007944:	2b20      	cmp	r3, #32
 8007946:	d103      	bne.n	8007950 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007948:	2380      	movs	r3, #128	; 0x80
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	e00b      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007950:	4b08      	ldr	r3, [pc, #32]	; (8007974 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2238      	movs	r2, #56	; 0x38
 8007956:	4013      	ands	r3, r2
 8007958:	2b18      	cmp	r3, #24
 800795a:	d103      	bne.n	8007964 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800795c:	23fa      	movs	r3, #250	; 0xfa
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	e001      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007968:	693b      	ldr	r3, [r7, #16]
}
 800796a:	0018      	movs	r0, r3
 800796c:	46bd      	mov	sp, r7
 800796e:	b006      	add	sp, #24
 8007970:	bd80      	pop	{r7, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	40021000 	.word	0x40021000
 8007978:	00f42400 	.word	0x00f42400
 800797c:	016e3600 	.word	0x016e3600

08007980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <HAL_RCC_GetHCLKFreq+0x10>)
 8007986:	681b      	ldr	r3, [r3, #0]
}
 8007988:	0018      	movs	r0, r3
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	20000000 	.word	0x20000000

08007994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007994:	b5b0      	push	{r4, r5, r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007998:	f7ff fff2 	bl	8007980 <HAL_RCC_GetHCLKFreq>
 800799c:	0004      	movs	r4, r0
 800799e:	f7ff fb49 	bl	8007034 <LL_RCC_GetAPB1Prescaler>
 80079a2:	0003      	movs	r3, r0
 80079a4:	0b1a      	lsrs	r2, r3, #12
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80079a8:	0092      	lsls	r2, r2, #2
 80079aa:	58d3      	ldr	r3, [r2, r3]
 80079ac:	221f      	movs	r2, #31
 80079ae:	4013      	ands	r3, r2
 80079b0:	40dc      	lsrs	r4, r3
 80079b2:	0023      	movs	r3, r4
}
 80079b4:	0018      	movs	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bdb0      	pop	{r4, r5, r7, pc}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	08018718 	.word	0x08018718

080079c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80079c8:	2313      	movs	r3, #19
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079d0:	2312      	movs	r3, #18
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	2200      	movs	r2, #0
 80079d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	2380      	movs	r3, #128	; 0x80
 80079de:	029b      	lsls	r3, r3, #10
 80079e0:	4013      	ands	r3, r2
 80079e2:	d100      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80079e4:	e0a3      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079e6:	2011      	movs	r0, #17
 80079e8:	183b      	adds	r3, r7, r0
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ee:	4b86      	ldr	r3, [pc, #536]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079f2:	2380      	movs	r3, #128	; 0x80
 80079f4:	055b      	lsls	r3, r3, #21
 80079f6:	4013      	ands	r3, r2
 80079f8:	d110      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079fa:	4b83      	ldr	r3, [pc, #524]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079fe:	4b82      	ldr	r3, [pc, #520]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a00:	2180      	movs	r1, #128	; 0x80
 8007a02:	0549      	lsls	r1, r1, #21
 8007a04:	430a      	orrs	r2, r1
 8007a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a08:	4b7f      	ldr	r3, [pc, #508]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	055b      	lsls	r3, r3, #21
 8007a10:	4013      	ands	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a16:	183b      	adds	r3, r7, r0
 8007a18:	2201      	movs	r2, #1
 8007a1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a1c:	4b7b      	ldr	r3, [pc, #492]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b7a      	ldr	r3, [pc, #488]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	0049      	lsls	r1, r1, #1
 8007a26:	430a      	orrs	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a2a:	f7fd fbf7 	bl	800521c <HAL_GetTick>
 8007a2e:	0003      	movs	r3, r0
 8007a30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a32:	e00b      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a34:	f7fd fbf2 	bl	800521c <HAL_GetTick>
 8007a38:	0002      	movs	r2, r0
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d904      	bls.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007a42:	2313      	movs	r3, #19
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	2203      	movs	r2, #3
 8007a48:	701a      	strb	r2, [r3, #0]
        break;
 8007a4a:	e005      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a4c:	4b6f      	ldr	r3, [pc, #444]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	2380      	movs	r3, #128	; 0x80
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	4013      	ands	r3, r2
 8007a56:	d0ed      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007a58:	2313      	movs	r3, #19
 8007a5a:	18fb      	adds	r3, r7, r3
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d154      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a62:	4b69      	ldr	r3, [pc, #420]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a66:	23c0      	movs	r3, #192	; 0xc0
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d019      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d014      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a7e:	4b62      	ldr	r3, [pc, #392]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a82:	4a63      	ldr	r2, [pc, #396]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a88:	4b5f      	ldr	r3, [pc, #380]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a8c:	4b5e      	ldr	r3, [pc, #376]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a8e:	2180      	movs	r1, #128	; 0x80
 8007a90:	0249      	lsls	r1, r1, #9
 8007a92:	430a      	orrs	r2, r1
 8007a94:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a96:	4b5c      	ldr	r3, [pc, #368]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a9a:	4b5b      	ldr	r3, [pc, #364]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007a9c:	495d      	ldr	r1, [pc, #372]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007a9e:	400a      	ands	r2, r1
 8007aa0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007aa2:	4b59      	ldr	r3, [pc, #356]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4013      	ands	r3, r2
 8007aae:	d016      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab0:	f7fd fbb4 	bl	800521c <HAL_GetTick>
 8007ab4:	0003      	movs	r3, r0
 8007ab6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab8:	e00c      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aba:	f7fd fbaf 	bl	800521c <HAL_GetTick>
 8007abe:	0002      	movs	r2, r0
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	4a54      	ldr	r2, [pc, #336]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d904      	bls.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007aca:	2313      	movs	r3, #19
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	2203      	movs	r2, #3
 8007ad0:	701a      	strb	r2, [r3, #0]
            break;
 8007ad2:	e004      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ad4:	4b4c      	ldr	r3, [pc, #304]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad8:	2202      	movs	r2, #2
 8007ada:	4013      	ands	r3, r2
 8007adc:	d0ed      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007ade:	2313      	movs	r3, #19
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ae8:	4b47      	ldr	r3, [pc, #284]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aec:	4a48      	ldr	r2, [pc, #288]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	0019      	movs	r1, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	4b44      	ldr	r3, [pc, #272]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007af8:	430a      	orrs	r2, r1
 8007afa:	65da      	str	r2, [r3, #92]	; 0x5c
 8007afc:	e00c      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007afe:	2312      	movs	r3, #18
 8007b00:	18fb      	adds	r3, r7, r3
 8007b02:	2213      	movs	r2, #19
 8007b04:	18ba      	adds	r2, r7, r2
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e005      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0c:	2312      	movs	r3, #18
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	2213      	movs	r2, #19
 8007b12:	18ba      	adds	r2, r7, r2
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b18:	2311      	movs	r3, #17
 8007b1a:	18fb      	adds	r3, r7, r3
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d105      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b22:	4b39      	ldr	r3, [pc, #228]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b26:	4b38      	ldr	r3, [pc, #224]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b28:	493c      	ldr	r1, [pc, #240]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007b2a:	400a      	ands	r2, r1
 8007b2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2201      	movs	r2, #1
 8007b34:	4013      	ands	r3, r2
 8007b36:	d009      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b38:	4b33      	ldr	r3, [pc, #204]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	4393      	bics	r3, r2
 8007b40:	0019      	movs	r1, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	4b30      	ldr	r3, [pc, #192]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2202      	movs	r2, #2
 8007b52:	4013      	ands	r3, r2
 8007b54:	d009      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b56:	4b2c      	ldr	r3, [pc, #176]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5a:	220c      	movs	r2, #12
 8007b5c:	4393      	bics	r3, r2
 8007b5e:	0019      	movs	r1, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b66:	430a      	orrs	r2, r1
 8007b68:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	4013      	ands	r3, r2
 8007b72:	d009      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b74:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b78:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b84:	430a      	orrs	r2, r1
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	2380      	movs	r3, #128	; 0x80
 8007b8e:	01db      	lsls	r3, r3, #7
 8007b90:	4013      	ands	r3, r2
 8007b92:	d015      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b94:	4b1c      	ldr	r3, [pc, #112]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	0899      	lsrs	r1, r3, #2
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	695a      	ldr	r2, [r3, #20]
 8007ba0:	4b19      	ldr	r3, [pc, #100]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695a      	ldr	r2, [r3, #20]
 8007baa:	2380      	movs	r3, #128	; 0x80
 8007bac:	05db      	lsls	r3, r3, #23
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d106      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007bb2:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bb8:	2180      	movs	r1, #128	; 0x80
 8007bba:	0249      	lsls	r1, r1, #9
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	2380      	movs	r3, #128	; 0x80
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	4013      	ands	r3, r2
 8007bca:	d016      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd0:	4a14      	ldr	r2, [pc, #80]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	01db      	lsls	r3, r3, #7
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d106      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	0249      	lsls	r1, r1, #9
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007bfa:	2312      	movs	r3, #18
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	781b      	ldrb	r3, [r3, #0]
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b006      	add	sp, #24
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40021000 	.word	0x40021000
 8007c0c:	40007000 	.word	0x40007000
 8007c10:	fffffcff 	.word	0xfffffcff
 8007c14:	fffeffff 	.word	0xfffeffff
 8007c18:	00001388 	.word	0x00001388
 8007c1c:	efffffff 	.word	0xefffffff
 8007c20:	ffffcfff 	.word	0xffffcfff
 8007c24:	ffff3fff 	.word	0xffff3fff

08007c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e0a8      	b.n	8007d8c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	2382      	movs	r3, #130	; 0x82
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d009      	beq.n	8007c62 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	61da      	str	r2, [r3, #28]
 8007c54:	e005      	b.n	8007c62 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	225d      	movs	r2, #93	; 0x5d
 8007c6c:	5c9b      	ldrb	r3, [r3, r2]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	225c      	movs	r2, #92	; 0x5c
 8007c78:	2100      	movs	r1, #0
 8007c7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7fb fea2 	bl	80039c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	225d      	movs	r2, #93	; 0x5d
 8007c88:	2102      	movs	r1, #2
 8007c8a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2140      	movs	r1, #64	; 0x40
 8007c98:	438a      	bics	r2, r1
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	23e0      	movs	r3, #224	; 0xe0
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d902      	bls.n	8007cae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e002      	b.n	8007cb4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007cae:	2380      	movs	r3, #128	; 0x80
 8007cb0:	015b      	lsls	r3, r3, #5
 8007cb2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	23f0      	movs	r3, #240	; 0xf0
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d008      	beq.n	8007cd2 <HAL_SPI_Init+0xaa>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	23e0      	movs	r3, #224	; 0xe0
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d002      	beq.n	8007cd2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	2382      	movs	r3, #130	; 0x82
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	401a      	ands	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6899      	ldr	r1, [r3, #8]
 8007ce0:	2384      	movs	r3, #132	; 0x84
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	400b      	ands	r3, r1
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2102      	movs	r1, #2
 8007cee:	400b      	ands	r3, r1
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	400b      	ands	r3, r1
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6999      	ldr	r1, [r3, #24]
 8007d00:	2380      	movs	r3, #128	; 0x80
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	400b      	ands	r3, r1
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	2138      	movs	r1, #56	; 0x38
 8007d0e:	400b      	ands	r3, r1
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	400b      	ands	r3, r1
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	0011      	movs	r1, r2
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d22:	2380      	movs	r3, #128	; 0x80
 8007d24:	019b      	lsls	r3, r3, #6
 8007d26:	401a      	ands	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	2204      	movs	r2, #4
 8007d38:	401a      	ands	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2110      	movs	r1, #16
 8007d40:	400b      	ands	r3, r1
 8007d42:	431a      	orrs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d48:	2108      	movs	r1, #8
 8007d4a:	400b      	ands	r3, r1
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68d9      	ldr	r1, [r3, #12]
 8007d52:	23f0      	movs	r3, #240	; 0xf0
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	400b      	ands	r3, r1
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	0011      	movs	r1, r2
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	2380      	movs	r3, #128	; 0x80
 8007d60:	015b      	lsls	r3, r3, #5
 8007d62:	401a      	ands	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69da      	ldr	r2, [r3, #28]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4907      	ldr	r1, [pc, #28]	; (8007d94 <HAL_SPI_Init+0x16c>)
 8007d78:	400a      	ands	r2, r1
 8007d7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	225d      	movs	r2, #93	; 0x5d
 8007d86:	2101      	movs	r1, #1
 8007d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	0018      	movs	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	b004      	add	sp, #16
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	fffff7ff 	.word	0xfffff7ff

08007d98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	1dbb      	adds	r3, r7, #6
 8007da6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007da8:	231f      	movs	r3, #31
 8007daa:	18fb      	adds	r3, r7, r3
 8007dac:	2200      	movs	r2, #0
 8007dae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	225c      	movs	r2, #92	; 0x5c
 8007db4:	5c9b      	ldrb	r3, [r3, r2]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_SPI_Transmit+0x26>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e140      	b.n	8008040 <HAL_SPI_Transmit+0x2a8>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	225c      	movs	r2, #92	; 0x5c
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dc6:	f7fd fa29 	bl	800521c <HAL_GetTick>
 8007dca:	0003      	movs	r3, r0
 8007dcc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007dce:	2316      	movs	r3, #22
 8007dd0:	18fb      	adds	r3, r7, r3
 8007dd2:	1dba      	adds	r2, r7, #6
 8007dd4:	8812      	ldrh	r2, [r2, #0]
 8007dd6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	225d      	movs	r2, #93	; 0x5d
 8007ddc:	5c9b      	ldrb	r3, [r3, r2]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d004      	beq.n	8007dee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007de4:	231f      	movs	r3, #31
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	2202      	movs	r2, #2
 8007dea:	701a      	strb	r2, [r3, #0]
    goto error;
 8007dec:	e11d      	b.n	800802a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <HAL_SPI_Transmit+0x64>
 8007df4:	1dbb      	adds	r3, r7, #6
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007dfc:	231f      	movs	r3, #31
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	2201      	movs	r2, #1
 8007e02:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e04:	e111      	b.n	800802a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	225d      	movs	r2, #93	; 0x5d
 8007e0a:	2103      	movs	r1, #3
 8007e0c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1dba      	adds	r2, r7, #6
 8007e1e:	8812      	ldrh	r2, [r2, #0]
 8007e20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1dba      	adds	r2, r7, #6
 8007e26:	8812      	ldrh	r2, [r2, #0]
 8007e28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2244      	movs	r2, #68	; 0x44
 8007e34:	2100      	movs	r1, #0
 8007e36:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2246      	movs	r2, #70	; 0x46
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d110      	bne.n	8007e7a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2140      	movs	r1, #64	; 0x40
 8007e64:	438a      	bics	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2180      	movs	r1, #128	; 0x80
 8007e74:	01c9      	lsls	r1, r1, #7
 8007e76:	430a      	orrs	r2, r1
 8007e78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2240      	movs	r2, #64	; 0x40
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b40      	cmp	r3, #64	; 0x40
 8007e86:	d007      	beq.n	8007e98 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2140      	movs	r1, #64	; 0x40
 8007e94:	430a      	orrs	r2, r1
 8007e96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	23e0      	movs	r3, #224	; 0xe0
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d94e      	bls.n	8007f42 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <HAL_SPI_Transmit+0x11e>
 8007eac:	2316      	movs	r3, #22
 8007eae:	18fb      	adds	r3, r7, r3
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d13f      	bne.n	8007f36 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	881a      	ldrh	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	1c9a      	adds	r2, r3, #2
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007eda:	e02c      	b.n	8007f36 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d112      	bne.n	8007f10 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	881a      	ldrh	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	1c9a      	adds	r2, r3, #2
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f0e:	e012      	b.n	8007f36 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f10:	f7fd f984 	bl	800521c <HAL_GetTick>
 8007f14:	0002      	movs	r2, r0
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d802      	bhi.n	8007f26 <HAL_SPI_Transmit+0x18e>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	d102      	bne.n	8007f2c <HAL_SPI_Transmit+0x194>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007f2c:	231f      	movs	r3, #31
 8007f2e:	18fb      	adds	r3, r7, r3
 8007f30:	2203      	movs	r2, #3
 8007f32:	701a      	strb	r2, [r3, #0]
          goto error;
 8007f34:	e079      	b.n	800802a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1cd      	bne.n	8007edc <HAL_SPI_Transmit+0x144>
 8007f40:	e04f      	b.n	8007fe2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <HAL_SPI_Transmit+0x1bc>
 8007f4a:	2316      	movs	r3, #22
 8007f4c:	18fb      	adds	r3, r7, r3
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d141      	bne.n	8007fd8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	330c      	adds	r3, #12
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007f7a:	e02d      	b.n	8007fd8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2202      	movs	r2, #2
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d113      	bne.n	8007fb2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	7812      	ldrb	r2, [r2, #0]
 8007f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fb0:	e012      	b.n	8007fd8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fb2:	f7fd f933 	bl	800521c <HAL_GetTick>
 8007fb6:	0002      	movs	r2, r0
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d802      	bhi.n	8007fc8 <HAL_SPI_Transmit+0x230>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	d102      	bne.n	8007fce <HAL_SPI_Transmit+0x236>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8007fce:	231f      	movs	r3, #31
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	2203      	movs	r2, #3
 8007fd4:	701a      	strb	r2, [r3, #0]
          goto error;
 8007fd6:	e028      	b.n	800802a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1cc      	bne.n	8007f7c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f000 fcd9 	bl	80089a0 <SPI_EndRxTxTransaction>
 8007fee:	1e03      	subs	r3, r0, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10a      	bne.n	8008016 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	613b      	str	r3, [r7, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800801e:	231f      	movs	r3, #31
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	2201      	movs	r2, #1
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e000      	b.n	800802a <HAL_SPI_Transmit+0x292>
  }

error:
 8008028:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	225d      	movs	r2, #93	; 0x5d
 800802e:	2101      	movs	r1, #1
 8008030:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	225c      	movs	r2, #92	; 0x5c
 8008036:	2100      	movs	r1, #0
 8008038:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800803a:	231f      	movs	r3, #31
 800803c:	18fb      	adds	r3, r7, r3
 800803e:	781b      	ldrb	r3, [r3, #0]
}
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	b008      	add	sp, #32
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b089      	sub	sp, #36	; 0x24
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	1dbb      	adds	r3, r7, #6
 8008056:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008058:	2317      	movs	r3, #23
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	2382      	movs	r3, #130	; 0x82
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	429a      	cmp	r2, r3
 800806a:	d113      	bne.n	8008094 <HAL_SPI_Receive+0x4c>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10f      	bne.n	8008094 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	225d      	movs	r2, #93	; 0x5d
 8008078:	2104      	movs	r1, #4
 800807a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800807c:	1dbb      	adds	r3, r7, #6
 800807e:	881c      	ldrh	r4, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	0023      	movs	r3, r4
 800808c:	f000 f928 	bl	80082e0 <HAL_SPI_TransmitReceive>
 8008090:	0003      	movs	r3, r0
 8008092:	e11c      	b.n	80082ce <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	225c      	movs	r2, #92	; 0x5c
 8008098:	5c9b      	ldrb	r3, [r3, r2]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_SPI_Receive+0x5a>
 800809e:	2302      	movs	r3, #2
 80080a0:	e115      	b.n	80082ce <HAL_SPI_Receive+0x286>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	225c      	movs	r2, #92	; 0x5c
 80080a6:	2101      	movs	r1, #1
 80080a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080aa:	f7fd f8b7 	bl	800521c <HAL_GetTick>
 80080ae:	0003      	movs	r3, r0
 80080b0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	225d      	movs	r2, #93	; 0x5d
 80080b6:	5c9b      	ldrb	r3, [r3, r2]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d004      	beq.n	80080c8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80080be:	2317      	movs	r3, #23
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	2202      	movs	r2, #2
 80080c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80080c6:	e0f7      	b.n	80082b8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_SPI_Receive+0x8e>
 80080ce:	1dbb      	adds	r3, r7, #6
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d104      	bne.n	80080e0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80080d6:	2317      	movs	r3, #23
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80080de:	e0eb      	b.n	80082b8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	225d      	movs	r2, #93	; 0x5d
 80080e4:	2104      	movs	r1, #4
 80080e6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	1dba      	adds	r2, r7, #6
 80080f8:	2144      	movs	r1, #68	; 0x44
 80080fa:	8812      	ldrh	r2, [r2, #0]
 80080fc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1dba      	adds	r2, r7, #6
 8008102:	2146      	movs	r1, #70	; 0x46
 8008104:	8812      	ldrh	r2, [r2, #0]
 8008106:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	23e0      	movs	r3, #224	; 0xe0
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	429a      	cmp	r2, r3
 8008130:	d908      	bls.n	8008144 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4966      	ldr	r1, [pc, #408]	; (80082d8 <HAL_SPI_Receive+0x290>)
 800813e:	400a      	ands	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	e008      	b.n	8008156 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2180      	movs	r1, #128	; 0x80
 8008150:	0149      	lsls	r1, r1, #5
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	2380      	movs	r3, #128	; 0x80
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	429a      	cmp	r2, r3
 8008160:	d10f      	bne.n	8008182 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	438a      	bics	r2, r1
 8008170:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4957      	ldr	r1, [pc, #348]	; (80082dc <HAL_SPI_Receive+0x294>)
 800817e:	400a      	ands	r2, r1
 8008180:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2240      	movs	r2, #64	; 0x40
 800818a:	4013      	ands	r3, r2
 800818c:	2b40      	cmp	r3, #64	; 0x40
 800818e:	d007      	beq.n	80081a0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2140      	movs	r1, #64	; 0x40
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	23e0      	movs	r3, #224	; 0xe0
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d900      	bls.n	80081ae <HAL_SPI_Receive+0x166>
 80081ac:	e069      	b.n	8008282 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80081ae:	e031      	b.n	8008214 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2201      	movs	r2, #1
 80081b8:	4013      	ands	r3, r2
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d117      	bne.n	80081ee <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	001a      	movs	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2246      	movs	r2, #70	; 0x46
 80081de:	5a9b      	ldrh	r3, [r3, r2]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b299      	uxth	r1, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2246      	movs	r2, #70	; 0x46
 80081ea:	5299      	strh	r1, [r3, r2]
 80081ec:	e012      	b.n	8008214 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ee:	f7fd f815 	bl	800521c <HAL_GetTick>
 80081f2:	0002      	movs	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d802      	bhi.n	8008204 <HAL_SPI_Receive+0x1bc>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	3301      	adds	r3, #1
 8008202:	d102      	bne.n	800820a <HAL_SPI_Receive+0x1c2>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800820a:	2317      	movs	r3, #23
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	2203      	movs	r2, #3
 8008210:	701a      	strb	r2, [r3, #0]
          goto error;
 8008212:	e051      	b.n	80082b8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2246      	movs	r2, #70	; 0x46
 8008218:	5a9b      	ldrh	r3, [r3, r2]
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1c7      	bne.n	80081b0 <HAL_SPI_Receive+0x168>
 8008220:	e035      	b.n	800828e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	2201      	movs	r2, #1
 800822a:	4013      	ands	r3, r2
 800822c:	2b01      	cmp	r3, #1
 800822e:	d115      	bne.n	800825c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	b292      	uxth	r2, r2
 800823c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	1c9a      	adds	r2, r3, #2
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2246      	movs	r2, #70	; 0x46
 800824c:	5a9b      	ldrh	r3, [r3, r2]
 800824e:	b29b      	uxth	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	b299      	uxth	r1, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2246      	movs	r2, #70	; 0x46
 8008258:	5299      	strh	r1, [r3, r2]
 800825a:	e012      	b.n	8008282 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800825c:	f7fc ffde 	bl	800521c <HAL_GetTick>
 8008260:	0002      	movs	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d802      	bhi.n	8008272 <HAL_SPI_Receive+0x22a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	d102      	bne.n	8008278 <HAL_SPI_Receive+0x230>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8008278:	2317      	movs	r3, #23
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	2203      	movs	r2, #3
 800827e:	701a      	strb	r2, [r3, #0]
          goto error;
 8008280:	e01a      	b.n	80082b8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2246      	movs	r2, #70	; 0x46
 8008286:	5a9b      	ldrh	r3, [r3, r2]
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1c9      	bne.n	8008222 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	0018      	movs	r0, r3
 8008296:	f000 fb25 	bl	80088e4 <SPI_EndRxTransaction>
 800829a:	1e03      	subs	r3, r0, #0
 800829c:	d002      	beq.n	80082a4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80082ac:	2317      	movs	r3, #23
 80082ae:	18fb      	adds	r3, r7, r3
 80082b0:	2201      	movs	r2, #1
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	e000      	b.n	80082b8 <HAL_SPI_Receive+0x270>
  }

error :
 80082b6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	225d      	movs	r2, #93	; 0x5d
 80082bc:	2101      	movs	r1, #1
 80082be:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	225c      	movs	r2, #92	; 0x5c
 80082c4:	2100      	movs	r1, #0
 80082c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80082c8:	2317      	movs	r3, #23
 80082ca:	18fb      	adds	r3, r7, r3
 80082cc:	781b      	ldrb	r3, [r3, #0]
}
 80082ce:	0018      	movs	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	b007      	add	sp, #28
 80082d4:	bd90      	pop	{r4, r7, pc}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	ffffefff 	.word	0xffffefff
 80082dc:	ffffbfff 	.word	0xffffbfff

080082e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	; 0x28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	001a      	movs	r2, r3
 80082ee:	1cbb      	adds	r3, r7, #2
 80082f0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082f2:	2301      	movs	r3, #1
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082f6:	2323      	movs	r3, #35	; 0x23
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	225c      	movs	r2, #92	; 0x5c
 8008302:	5c9b      	ldrb	r3, [r3, r2]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_SPI_TransmitReceive+0x2c>
 8008308:	2302      	movs	r3, #2
 800830a:	e1b5      	b.n	8008678 <HAL_SPI_TransmitReceive+0x398>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	225c      	movs	r2, #92	; 0x5c
 8008310:	2101      	movs	r1, #1
 8008312:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008314:	f7fc ff82 	bl	800521c <HAL_GetTick>
 8008318:	0003      	movs	r3, r0
 800831a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800831c:	201b      	movs	r0, #27
 800831e:	183b      	adds	r3, r7, r0
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	215d      	movs	r1, #93	; 0x5d
 8008324:	5c52      	ldrb	r2, [r2, r1]
 8008326:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800832e:	2312      	movs	r3, #18
 8008330:	18fb      	adds	r3, r7, r3
 8008332:	1cba      	adds	r2, r7, #2
 8008334:	8812      	ldrh	r2, [r2, #0]
 8008336:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008338:	183b      	adds	r3, r7, r0
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d011      	beq.n	8008364 <HAL_SPI_TransmitReceive+0x84>
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	2382      	movs	r3, #130	; 0x82
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	429a      	cmp	r2, r3
 8008348:	d107      	bne.n	800835a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <HAL_SPI_TransmitReceive+0x7a>
 8008352:	183b      	adds	r3, r7, r0
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b04      	cmp	r3, #4
 8008358:	d004      	beq.n	8008364 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800835a:	2323      	movs	r3, #35	; 0x23
 800835c:	18fb      	adds	r3, r7, r3
 800835e:	2202      	movs	r2, #2
 8008360:	701a      	strb	r2, [r3, #0]
    goto error;
 8008362:	e17e      	b.n	8008662 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d006      	beq.n	8008378 <HAL_SPI_TransmitReceive+0x98>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <HAL_SPI_TransmitReceive+0x98>
 8008370:	1cbb      	adds	r3, r7, #2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008378:	2323      	movs	r3, #35	; 0x23
 800837a:	18fb      	adds	r3, r7, r3
 800837c:	2201      	movs	r2, #1
 800837e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008380:	e16f      	b.n	8008662 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	225d      	movs	r2, #93	; 0x5d
 8008386:	5c9b      	ldrb	r3, [r3, r2]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b04      	cmp	r3, #4
 800838c:	d003      	beq.n	8008396 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	225d      	movs	r2, #93	; 0x5d
 8008392:	2105      	movs	r1, #5
 8008394:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1cba      	adds	r2, r7, #2
 80083a6:	2146      	movs	r1, #70	; 0x46
 80083a8:	8812      	ldrh	r2, [r2, #0]
 80083aa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	1cba      	adds	r2, r7, #2
 80083b0:	2144      	movs	r1, #68	; 0x44
 80083b2:	8812      	ldrh	r2, [r2, #0]
 80083b4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	1cba      	adds	r2, r7, #2
 80083c0:	8812      	ldrh	r2, [r2, #0]
 80083c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	1cba      	adds	r2, r7, #2
 80083c8:	8812      	ldrh	r2, [r2, #0]
 80083ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68da      	ldr	r2, [r3, #12]
 80083dc:	23e0      	movs	r3, #224	; 0xe0
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d908      	bls.n	80083f6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	49a4      	ldr	r1, [pc, #656]	; (8008680 <HAL_SPI_TransmitReceive+0x3a0>)
 80083f0:	400a      	ands	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
 80083f4:	e008      	b.n	8008408 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2180      	movs	r1, #128	; 0x80
 8008402:	0149      	lsls	r1, r1, #5
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2240      	movs	r2, #64	; 0x40
 8008410:	4013      	ands	r3, r2
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d007      	beq.n	8008426 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2140      	movs	r1, #64	; 0x40
 8008422:	430a      	orrs	r2, r1
 8008424:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	23e0      	movs	r3, #224	; 0xe0
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	429a      	cmp	r2, r3
 8008430:	d800      	bhi.n	8008434 <HAL_SPI_TransmitReceive+0x154>
 8008432:	e07f      	b.n	8008534 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <HAL_SPI_TransmitReceive+0x168>
 800843c:	2312      	movs	r3, #18
 800843e:	18fb      	adds	r3, r7, r3
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d000      	beq.n	8008448 <HAL_SPI_TransmitReceive+0x168>
 8008446:	e069      	b.n	800851c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	881a      	ldrh	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008458:	1c9a      	adds	r2, r3, #2
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800846c:	e056      	b.n	800851c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2202      	movs	r2, #2
 8008476:	4013      	ands	r3, r2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d11b      	bne.n	80084b4 <HAL_SPI_TransmitReceive+0x1d4>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d016      	beq.n	80084b4 <HAL_SPI_TransmitReceive+0x1d4>
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	2b01      	cmp	r3, #1
 800848a:	d113      	bne.n	80084b4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	881a      	ldrh	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	1c9a      	adds	r2, r3, #2
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2201      	movs	r2, #1
 80084bc:	4013      	ands	r3, r2
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d11c      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x21c>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2246      	movs	r2, #70	; 0x46
 80084c6:	5a9b      	ldrh	r3, [r3, r2]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	b292      	uxth	r2, r2
 80084da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	1c9a      	adds	r2, r3, #2
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2246      	movs	r2, #70	; 0x46
 80084ea:	5a9b      	ldrh	r3, [r3, r2]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b299      	uxth	r1, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2246      	movs	r2, #70	; 0x46
 80084f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084f8:	2301      	movs	r3, #1
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084fc:	f7fc fe8e 	bl	800521c <HAL_GetTick>
 8008500:	0002      	movs	r2, r0
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008508:	429a      	cmp	r2, r3
 800850a:	d807      	bhi.n	800851c <HAL_SPI_TransmitReceive+0x23c>
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	3301      	adds	r3, #1
 8008510:	d004      	beq.n	800851c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8008512:	2323      	movs	r3, #35	; 0x23
 8008514:	18fb      	adds	r3, r7, r3
 8008516:	2203      	movs	r2, #3
 8008518:	701a      	strb	r2, [r3, #0]
        goto error;
 800851a:	e0a2      	b.n	8008662 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1a3      	bne.n	800846e <HAL_SPI_TransmitReceive+0x18e>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2246      	movs	r2, #70	; 0x46
 800852a:	5a9b      	ldrh	r3, [r3, r2]
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d19d      	bne.n	800846e <HAL_SPI_TransmitReceive+0x18e>
 8008532:	e085      	b.n	8008640 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x268>
 800853c:	2312      	movs	r3, #18
 800853e:	18fb      	adds	r3, r7, r3
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d000      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x268>
 8008546:	e070      	b.n	800862a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800856e:	e05c      	b.n	800862a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2202      	movs	r2, #2
 8008578:	4013      	ands	r3, r2
 800857a:	2b02      	cmp	r3, #2
 800857c:	d11c      	bne.n	80085b8 <HAL_SPI_TransmitReceive+0x2d8>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d017      	beq.n	80085b8 <HAL_SPI_TransmitReceive+0x2d8>
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	2b01      	cmp	r3, #1
 800858c:	d114      	bne.n	80085b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	330c      	adds	r3, #12
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2201      	movs	r2, #1
 80085c0:	4013      	ands	r3, r2
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d11e      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x324>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2246      	movs	r2, #70	; 0x46
 80085ca:	5a9b      	ldrh	r3, [r3, r2]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d018      	beq.n	8008604 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	001a      	movs	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	b2d2      	uxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2246      	movs	r2, #70	; 0x46
 80085f2:	5a9b      	ldrh	r3, [r3, r2]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b299      	uxth	r1, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2246      	movs	r2, #70	; 0x46
 80085fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008604:	f7fc fe0a 	bl	800521c <HAL_GetTick>
 8008608:	0002      	movs	r2, r0
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008610:	429a      	cmp	r2, r3
 8008612:	d802      	bhi.n	800861a <HAL_SPI_TransmitReceive+0x33a>
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	3301      	adds	r3, #1
 8008618:	d102      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x340>
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8008620:	2323      	movs	r3, #35	; 0x23
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	2203      	movs	r2, #3
 8008626:	701a      	strb	r2, [r3, #0]
        goto error;
 8008628:	e01b      	b.n	8008662 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d19d      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x290>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2246      	movs	r2, #70	; 0x46
 8008638:	5a9b      	ldrh	r3, [r3, r2]
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d197      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	0018      	movs	r0, r3
 8008648:	f000 f9aa 	bl	80089a0 <SPI_EndRxTxTransaction>
 800864c:	1e03      	subs	r3, r0, #0
 800864e:	d007      	beq.n	8008660 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8008650:	2323      	movs	r3, #35	; 0x23
 8008652:	18fb      	adds	r3, r7, r3
 8008654:	2201      	movs	r2, #1
 8008656:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2220      	movs	r2, #32
 800865c:	661a      	str	r2, [r3, #96]	; 0x60
 800865e:	e000      	b.n	8008662 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8008660:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	225d      	movs	r2, #93	; 0x5d
 8008666:	2101      	movs	r1, #1
 8008668:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	225c      	movs	r2, #92	; 0x5c
 800866e:	2100      	movs	r1, #0
 8008670:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008672:	2323      	movs	r3, #35	; 0x23
 8008674:	18fb      	adds	r3, r7, r3
 8008676:	781b      	ldrb	r3, [r3, #0]
}
 8008678:	0018      	movs	r0, r3
 800867a:	46bd      	mov	sp, r7
 800867c:	b00a      	add	sp, #40	; 0x28
 800867e:	bd80      	pop	{r7, pc}
 8008680:	ffffefff 	.word	0xffffefff

08008684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	1dfb      	adds	r3, r7, #7
 8008692:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008694:	f7fc fdc2 	bl	800521c <HAL_GetTick>
 8008698:	0002      	movs	r2, r0
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	1a9b      	subs	r3, r3, r2
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	18d3      	adds	r3, r2, r3
 80086a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086a4:	f7fc fdba 	bl	800521c <HAL_GetTick>
 80086a8:	0003      	movs	r3, r0
 80086aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086ac:	4b3a      	ldr	r3, [pc, #232]	; (8008798 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	015b      	lsls	r3, r3, #5
 80086b2:	0d1b      	lsrs	r3, r3, #20
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	4353      	muls	r3, r2
 80086b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ba:	e058      	b.n	800876e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	3301      	adds	r3, #1
 80086c0:	d055      	beq.n	800876e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086c2:	f7fc fdab 	bl	800521c <HAL_GetTick>
 80086c6:	0002      	movs	r2, r0
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d902      	bls.n	80086d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d142      	bne.n	800875e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	21e0      	movs	r1, #224	; 0xe0
 80086e4:	438a      	bics	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	2382      	movs	r3, #130	; 0x82
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d113      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x98>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	2380      	movs	r3, #128	; 0x80
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d005      	beq.n	800870c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	2380      	movs	r3, #128	; 0x80
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	429a      	cmp	r2, r3
 800870a:	d107      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2140      	movs	r1, #64	; 0x40
 8008718:	438a      	bics	r2, r1
 800871a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008720:	2380      	movs	r3, #128	; 0x80
 8008722:	019b      	lsls	r3, r3, #6
 8008724:	429a      	cmp	r2, r3
 8008726:	d110      	bne.n	800874a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	491a      	ldr	r1, [pc, #104]	; (800879c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008734:	400a      	ands	r2, r1
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2180      	movs	r1, #128	; 0x80
 8008744:	0189      	lsls	r1, r1, #6
 8008746:	430a      	orrs	r2, r1
 8008748:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	225d      	movs	r2, #93	; 0x5d
 800874e:	2101      	movs	r1, #1
 8008750:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	225c      	movs	r2, #92	; 0x5c
 8008756:	2100      	movs	r1, #0
 8008758:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e017      	b.n	800878e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	3b01      	subs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	4013      	ands	r3, r2
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	425a      	negs	r2, r3
 800877e:	4153      	adcs	r3, r2
 8008780:	b2db      	uxtb	r3, r3
 8008782:	001a      	movs	r2, r3
 8008784:	1dfb      	adds	r3, r7, #7
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d197      	bne.n	80086bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	0018      	movs	r0, r3
 8008790:	46bd      	mov	sp, r7
 8008792:	b008      	add	sp, #32
 8008794:	bd80      	pop	{r7, pc}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	20000000 	.word	0x20000000
 800879c:	ffffdfff 	.word	0xffffdfff

080087a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087ae:	2317      	movs	r3, #23
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087b6:	f7fc fd31 	bl	800521c <HAL_GetTick>
 80087ba:	0002      	movs	r2, r0
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	18d3      	adds	r3, r2, r3
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80087c6:	f7fc fd29 	bl	800521c <HAL_GetTick>
 80087ca:	0003      	movs	r3, r0
 80087cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	330c      	adds	r3, #12
 80087d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087d6:	4b41      	ldr	r3, [pc, #260]	; (80088dc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	0013      	movs	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	189b      	adds	r3, r3, r2
 80087e0:	00da      	lsls	r2, r3, #3
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	0d1b      	lsrs	r3, r3, #20
 80087e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e8:	4353      	muls	r3, r2
 80087ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80087ec:	e068      	b.n	80088c0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	23c0      	movs	r3, #192	; 0xc0
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d10a      	bne.n	800880e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d107      	bne.n	800880e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	b2da      	uxtb	r2, r3
 8008804:	2117      	movs	r1, #23
 8008806:	187b      	adds	r3, r7, r1
 8008808:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800880a:	187b      	adds	r3, r7, r1
 800880c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	3301      	adds	r3, #1
 8008812:	d055      	beq.n	80088c0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008814:	f7fc fd02 	bl	800521c <HAL_GetTick>
 8008818:	0002      	movs	r2, r0
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008820:	429a      	cmp	r2, r3
 8008822:	d902      	bls.n	800882a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d142      	bne.n	80088b0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	21e0      	movs	r1, #224	; 0xe0
 8008836:	438a      	bics	r2, r1
 8008838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	2382      	movs	r3, #130	; 0x82
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	429a      	cmp	r2, r3
 8008844:	d113      	bne.n	800886e <SPI_WaitFifoStateUntilTimeout+0xce>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	2380      	movs	r3, #128	; 0x80
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	429a      	cmp	r2, r3
 8008850:	d005      	beq.n	800885e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	2380      	movs	r3, #128	; 0x80
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	429a      	cmp	r2, r3
 800885c:	d107      	bne.n	800886e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2140      	movs	r1, #64	; 0x40
 800886a:	438a      	bics	r2, r1
 800886c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008872:	2380      	movs	r3, #128	; 0x80
 8008874:	019b      	lsls	r3, r3, #6
 8008876:	429a      	cmp	r2, r3
 8008878:	d110      	bne.n	800889c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4916      	ldr	r1, [pc, #88]	; (80088e0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008886:	400a      	ands	r2, r1
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2180      	movs	r1, #128	; 0x80
 8008896:	0189      	lsls	r1, r1, #6
 8008898:	430a      	orrs	r2, r1
 800889a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	225d      	movs	r2, #93	; 0x5d
 80088a0:	2101      	movs	r1, #1
 80088a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	225c      	movs	r2, #92	; 0x5c
 80088a8:	2100      	movs	r1, #0
 80088aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e010      	b.n	80088d2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	3b01      	subs	r3, #1
 80088be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	4013      	ands	r3, r2
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d18e      	bne.n	80087ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	0018      	movs	r0, r3
 80088d4:	46bd      	mov	sp, r7
 80088d6:	b00a      	add	sp, #40	; 0x28
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	20000000 	.word	0x20000000
 80088e0:	ffffdfff 	.word	0xffffdfff

080088e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	2382      	movs	r3, #130	; 0x82
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d113      	bne.n	8008924 <SPI_EndRxTransaction+0x40>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	2380      	movs	r3, #128	; 0x80
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	429a      	cmp	r2, r3
 8008906:	d005      	beq.n	8008914 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	2380      	movs	r3, #128	; 0x80
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	429a      	cmp	r2, r3
 8008912:	d107      	bne.n	8008924 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2140      	movs	r1, #64	; 0x40
 8008920:	438a      	bics	r2, r1
 8008922:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	0013      	movs	r3, r2
 800892e:	2200      	movs	r2, #0
 8008930:	2180      	movs	r1, #128	; 0x80
 8008932:	f7ff fea7 	bl	8008684 <SPI_WaitFlagStateUntilTimeout>
 8008936:	1e03      	subs	r3, r0, #0
 8008938:	d007      	beq.n	800894a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893e:	2220      	movs	r2, #32
 8008940:	431a      	orrs	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e026      	b.n	8008998 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	2382      	movs	r3, #130	; 0x82
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	429a      	cmp	r2, r3
 8008954:	d11f      	bne.n	8008996 <SPI_EndRxTransaction+0xb2>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	2380      	movs	r3, #128	; 0x80
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	429a      	cmp	r2, r3
 8008960:	d005      	beq.n	800896e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	2380      	movs	r3, #128	; 0x80
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	429a      	cmp	r2, r3
 800896c:	d113      	bne.n	8008996 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	23c0      	movs	r3, #192	; 0xc0
 8008972:	00d9      	lsls	r1, r3, #3
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	0013      	movs	r3, r2
 800897c:	2200      	movs	r2, #0
 800897e:	f7ff ff0f 	bl	80087a0 <SPI_WaitFifoStateUntilTimeout>
 8008982:	1e03      	subs	r3, r0, #0
 8008984:	d007      	beq.n	8008996 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898a:	2220      	movs	r2, #32
 800898c:	431a      	orrs	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e000      	b.n	8008998 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	0018      	movs	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	b004      	add	sp, #16
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	23c0      	movs	r3, #192	; 0xc0
 80089b0:	0159      	lsls	r1, r3, #5
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	0013      	movs	r3, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	f7ff fef0 	bl	80087a0 <SPI_WaitFifoStateUntilTimeout>
 80089c0:	1e03      	subs	r3, r0, #0
 80089c2:	d007      	beq.n	80089d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c8:	2220      	movs	r2, #32
 80089ca:	431a      	orrs	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e027      	b.n	8008a24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	0013      	movs	r3, r2
 80089de:	2200      	movs	r2, #0
 80089e0:	2180      	movs	r1, #128	; 0x80
 80089e2:	f7ff fe4f 	bl	8008684 <SPI_WaitFlagStateUntilTimeout>
 80089e6:	1e03      	subs	r3, r0, #0
 80089e8:	d007      	beq.n	80089fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ee:	2220      	movs	r2, #32
 80089f0:	431a      	orrs	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e014      	b.n	8008a24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	23c0      	movs	r3, #192	; 0xc0
 80089fe:	00d9      	lsls	r1, r3, #3
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	0013      	movs	r3, r2
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f7ff fec9 	bl	80087a0 <SPI_WaitFifoStateUntilTimeout>
 8008a0e:	1e03      	subs	r3, r0, #0
 8008a10:	d007      	beq.n	8008a22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a16:	2220      	movs	r2, #32
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e000      	b.n	8008a24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b004      	add	sp, #16
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e04a      	b.n	8008ad4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	223d      	movs	r2, #61	; 0x3d
 8008a42:	5c9b      	ldrb	r3, [r3, r2]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d107      	bne.n	8008a5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	223c      	movs	r2, #60	; 0x3c
 8008a4e:	2100      	movs	r1, #0
 8008a50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	0018      	movs	r0, r3
 8008a56:	f7fb fcf1 	bl	800443c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	223d      	movs	r2, #61	; 0x3d
 8008a5e:	2102      	movs	r1, #2
 8008a60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	0010      	movs	r0, r2
 8008a6e:	f000 fe91 	bl	8009794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2248      	movs	r2, #72	; 0x48
 8008a76:	2101      	movs	r1, #1
 8008a78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	223e      	movs	r2, #62	; 0x3e
 8008a7e:	2101      	movs	r1, #1
 8008a80:	5499      	strb	r1, [r3, r2]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	223f      	movs	r2, #63	; 0x3f
 8008a86:	2101      	movs	r1, #1
 8008a88:	5499      	strb	r1, [r3, r2]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2240      	movs	r2, #64	; 0x40
 8008a8e:	2101      	movs	r1, #1
 8008a90:	5499      	strb	r1, [r3, r2]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2241      	movs	r2, #65	; 0x41
 8008a96:	2101      	movs	r1, #1
 8008a98:	5499      	strb	r1, [r3, r2]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2242      	movs	r2, #66	; 0x42
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	5499      	strb	r1, [r3, r2]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2243      	movs	r2, #67	; 0x43
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2244      	movs	r2, #68	; 0x44
 8008aae:	2101      	movs	r1, #1
 8008ab0:	5499      	strb	r1, [r3, r2]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2245      	movs	r2, #69	; 0x45
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	5499      	strb	r1, [r3, r2]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2246      	movs	r2, #70	; 0x46
 8008abe:	2101      	movs	r1, #1
 8008ac0:	5499      	strb	r1, [r3, r2]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2247      	movs	r2, #71	; 0x47
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	223d      	movs	r2, #61	; 0x3d
 8008ace:	2101      	movs	r1, #1
 8008ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	b002      	add	sp, #8
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	223d      	movs	r2, #61	; 0x3d
 8008ae8:	5c9b      	ldrb	r3, [r3, r2]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d001      	beq.n	8008af4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e034      	b.n	8008b5e <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	223d      	movs	r2, #61	; 0x3d
 8008af8:	2102      	movs	r1, #2
 8008afa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a19      	ldr	r2, [pc, #100]	; (8008b68 <HAL_TIM_Base_Start+0x8c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d009      	beq.n	8008b1a <HAL_TIM_Base_Start+0x3e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <HAL_TIM_Base_Start+0x90>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d004      	beq.n	8008b1a <HAL_TIM_Base_Start+0x3e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a16      	ldr	r2, [pc, #88]	; (8008b70 <HAL_TIM_Base_Start+0x94>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d116      	bne.n	8008b48 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <HAL_TIM_Base_Start+0x98>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b06      	cmp	r3, #6
 8008b2a:	d016      	beq.n	8008b5a <HAL_TIM_Base_Start+0x7e>
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	025b      	lsls	r3, r3, #9
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d011      	beq.n	8008b5a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2101      	movs	r1, #1
 8008b42:	430a      	orrs	r2, r1
 8008b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b46:	e008      	b.n	8008b5a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2101      	movs	r1, #1
 8008b54:	430a      	orrs	r2, r1
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	e000      	b.n	8008b5c <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	0018      	movs	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	b004      	add	sp, #16
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	40012c00 	.word	0x40012c00
 8008b6c:	40000400 	.word	0x40000400
 8008b70:	40014000 	.word	0x40014000
 8008b74:	00010007 	.word	0x00010007

08008b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	223d      	movs	r2, #61	; 0x3d
 8008b84:	5c9b      	ldrb	r3, [r3, r2]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d001      	beq.n	8008b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e03c      	b.n	8008c0a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	223d      	movs	r2, #61	; 0x3d
 8008b94:	2102      	movs	r1, #2
 8008b96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68da      	ldr	r2, [r3, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a19      	ldr	r2, [pc, #100]	; (8008c14 <HAL_TIM_Base_Start_IT+0x9c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d009      	beq.n	8008bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a18      	ldr	r2, [pc, #96]	; (8008c18 <HAL_TIM_Base_Start_IT+0xa0>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d004      	beq.n	8008bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a16      	ldr	r2, [pc, #88]	; (8008c1c <HAL_TIM_Base_Start_IT+0xa4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d116      	bne.n	8008bf4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	4a14      	ldr	r2, [pc, #80]	; (8008c20 <HAL_TIM_Base_Start_IT+0xa8>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b06      	cmp	r3, #6
 8008bd6:	d016      	beq.n	8008c06 <HAL_TIM_Base_Start_IT+0x8e>
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	2380      	movs	r3, #128	; 0x80
 8008bdc:	025b      	lsls	r3, r3, #9
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d011      	beq.n	8008c06 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2101      	movs	r1, #1
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf2:	e008      	b.n	8008c06 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2101      	movs	r1, #1
 8008c00:	430a      	orrs	r2, r1
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	e000      	b.n	8008c08 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c06:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	b004      	add	sp, #16
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	40012c00 	.word	0x40012c00
 8008c18:	40000400 	.word	0x40000400
 8008c1c:	40014000 	.word	0x40014000
 8008c20:	00010007 	.word	0x00010007

08008c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e04a      	b.n	8008ccc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	223d      	movs	r2, #61	; 0x3d
 8008c3a:	5c9b      	ldrb	r3, [r3, r2]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d107      	bne.n	8008c52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	223c      	movs	r2, #60	; 0x3c
 8008c46:	2100      	movs	r1, #0
 8008c48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f000 f841 	bl	8008cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	223d      	movs	r2, #61	; 0x3d
 8008c56:	2102      	movs	r1, #2
 8008c58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3304      	adds	r3, #4
 8008c62:	0019      	movs	r1, r3
 8008c64:	0010      	movs	r0, r2
 8008c66:	f000 fd95 	bl	8009794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2248      	movs	r2, #72	; 0x48
 8008c6e:	2101      	movs	r1, #1
 8008c70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	223e      	movs	r2, #62	; 0x3e
 8008c76:	2101      	movs	r1, #1
 8008c78:	5499      	strb	r1, [r3, r2]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	223f      	movs	r2, #63	; 0x3f
 8008c7e:	2101      	movs	r1, #1
 8008c80:	5499      	strb	r1, [r3, r2]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2240      	movs	r2, #64	; 0x40
 8008c86:	2101      	movs	r1, #1
 8008c88:	5499      	strb	r1, [r3, r2]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2241      	movs	r2, #65	; 0x41
 8008c8e:	2101      	movs	r1, #1
 8008c90:	5499      	strb	r1, [r3, r2]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2242      	movs	r2, #66	; 0x42
 8008c96:	2101      	movs	r1, #1
 8008c98:	5499      	strb	r1, [r3, r2]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2243      	movs	r2, #67	; 0x43
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2244      	movs	r2, #68	; 0x44
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	5499      	strb	r1, [r3, r2]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2245      	movs	r2, #69	; 0x45
 8008cae:	2101      	movs	r1, #1
 8008cb0:	5499      	strb	r1, [r3, r2]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2246      	movs	r2, #70	; 0x46
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	5499      	strb	r1, [r3, r2]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2247      	movs	r2, #71	; 0x47
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	223d      	movs	r2, #61	; 0x3d
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	0018      	movs	r0, r3
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b002      	add	sp, #8
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008cdc:	46c0      	nop			; (mov r8, r8)
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	b002      	add	sp, #8
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d108      	bne.n	8008d06 <HAL_TIM_PWM_Start+0x22>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	223e      	movs	r2, #62	; 0x3e
 8008cf8:	5c9b      	ldrb	r3, [r3, r2]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	1e5a      	subs	r2, r3, #1
 8008d00:	4193      	sbcs	r3, r2
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	e037      	b.n	8008d76 <HAL_TIM_PWM_Start+0x92>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d108      	bne.n	8008d1e <HAL_TIM_PWM_Start+0x3a>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	223f      	movs	r2, #63	; 0x3f
 8008d10:	5c9b      	ldrb	r3, [r3, r2]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	1e5a      	subs	r2, r3, #1
 8008d18:	4193      	sbcs	r3, r2
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	e02b      	b.n	8008d76 <HAL_TIM_PWM_Start+0x92>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d108      	bne.n	8008d36 <HAL_TIM_PWM_Start+0x52>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2240      	movs	r2, #64	; 0x40
 8008d28:	5c9b      	ldrb	r3, [r3, r2]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	1e5a      	subs	r2, r3, #1
 8008d30:	4193      	sbcs	r3, r2
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	e01f      	b.n	8008d76 <HAL_TIM_PWM_Start+0x92>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b0c      	cmp	r3, #12
 8008d3a:	d108      	bne.n	8008d4e <HAL_TIM_PWM_Start+0x6a>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2241      	movs	r2, #65	; 0x41
 8008d40:	5c9b      	ldrb	r3, [r3, r2]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	3b01      	subs	r3, #1
 8008d46:	1e5a      	subs	r2, r3, #1
 8008d48:	4193      	sbcs	r3, r2
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	e013      	b.n	8008d76 <HAL_TIM_PWM_Start+0x92>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b10      	cmp	r3, #16
 8008d52:	d108      	bne.n	8008d66 <HAL_TIM_PWM_Start+0x82>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2242      	movs	r2, #66	; 0x42
 8008d58:	5c9b      	ldrb	r3, [r3, r2]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	1e5a      	subs	r2, r3, #1
 8008d60:	4193      	sbcs	r3, r2
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	e007      	b.n	8008d76 <HAL_TIM_PWM_Start+0x92>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2243      	movs	r2, #67	; 0x43
 8008d6a:	5c9b      	ldrb	r3, [r3, r2]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	1e5a      	subs	r2, r3, #1
 8008d72:	4193      	sbcs	r3, r2
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e085      	b.n	8008e8a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <HAL_TIM_PWM_Start+0xaa>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	223e      	movs	r2, #62	; 0x3e
 8008d88:	2102      	movs	r1, #2
 8008d8a:	5499      	strb	r1, [r3, r2]
 8008d8c:	e023      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xf2>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d104      	bne.n	8008d9e <HAL_TIM_PWM_Start+0xba>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	223f      	movs	r2, #63	; 0x3f
 8008d98:	2102      	movs	r1, #2
 8008d9a:	5499      	strb	r1, [r3, r2]
 8008d9c:	e01b      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xf2>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d104      	bne.n	8008dae <HAL_TIM_PWM_Start+0xca>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2240      	movs	r2, #64	; 0x40
 8008da8:	2102      	movs	r1, #2
 8008daa:	5499      	strb	r1, [r3, r2]
 8008dac:	e013      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xf2>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b0c      	cmp	r3, #12
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_PWM_Start+0xda>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2241      	movs	r2, #65	; 0x41
 8008db8:	2102      	movs	r1, #2
 8008dba:	5499      	strb	r1, [r3, r2]
 8008dbc:	e00b      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xf2>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d104      	bne.n	8008dce <HAL_TIM_PWM_Start+0xea>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2242      	movs	r2, #66	; 0x42
 8008dc8:	2102      	movs	r1, #2
 8008dca:	5499      	strb	r1, [r3, r2]
 8008dcc:	e003      	b.n	8008dd6 <HAL_TIM_PWM_Start+0xf2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2243      	movs	r2, #67	; 0x43
 8008dd2:	2102      	movs	r1, #2
 8008dd4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	0018      	movs	r0, r3
 8008de0:	f001 f8ae 	bl	8009f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a2a      	ldr	r2, [pc, #168]	; (8008e94 <HAL_TIM_PWM_Start+0x1b0>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00e      	beq.n	8008e0c <HAL_TIM_PWM_Start+0x128>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a29      	ldr	r2, [pc, #164]	; (8008e98 <HAL_TIM_PWM_Start+0x1b4>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d009      	beq.n	8008e0c <HAL_TIM_PWM_Start+0x128>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a27      	ldr	r2, [pc, #156]	; (8008e9c <HAL_TIM_PWM_Start+0x1b8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d004      	beq.n	8008e0c <HAL_TIM_PWM_Start+0x128>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a26      	ldr	r2, [pc, #152]	; (8008ea0 <HAL_TIM_PWM_Start+0x1bc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d101      	bne.n	8008e10 <HAL_TIM_PWM_Start+0x12c>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e000      	b.n	8008e12 <HAL_TIM_PWM_Start+0x12e>
 8008e10:	2300      	movs	r3, #0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d008      	beq.n	8008e28 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2180      	movs	r1, #128	; 0x80
 8008e22:	0209      	lsls	r1, r1, #8
 8008e24:	430a      	orrs	r2, r1
 8008e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a19      	ldr	r2, [pc, #100]	; (8008e94 <HAL_TIM_PWM_Start+0x1b0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d009      	beq.n	8008e46 <HAL_TIM_PWM_Start+0x162>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1b      	ldr	r2, [pc, #108]	; (8008ea4 <HAL_TIM_PWM_Start+0x1c0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d004      	beq.n	8008e46 <HAL_TIM_PWM_Start+0x162>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a15      	ldr	r2, [pc, #84]	; (8008e98 <HAL_TIM_PWM_Start+0x1b4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d116      	bne.n	8008e74 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	4a16      	ldr	r2, [pc, #88]	; (8008ea8 <HAL_TIM_PWM_Start+0x1c4>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b06      	cmp	r3, #6
 8008e56:	d016      	beq.n	8008e86 <HAL_TIM_PWM_Start+0x1a2>
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	2380      	movs	r3, #128	; 0x80
 8008e5c:	025b      	lsls	r3, r3, #9
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d011      	beq.n	8008e86 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e72:	e008      	b.n	8008e86 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2101      	movs	r1, #1
 8008e80:	430a      	orrs	r2, r1
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e000      	b.n	8008e88 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e86:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	b004      	add	sp, #16
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	46c0      	nop			; (mov r8, r8)
 8008e94:	40012c00 	.word	0x40012c00
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40014400 	.word	0x40014400
 8008ea0:	40014800 	.word	0x40014800
 8008ea4:	40000400 	.word	0x40000400
 8008ea8:	00010007 	.word	0x00010007

08008eac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e090      	b.n	8008fe2 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	223d      	movs	r2, #61	; 0x3d
 8008ec4:	5c9b      	ldrb	r3, [r3, r2]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	223c      	movs	r2, #60	; 0x3c
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7fb fb80 	bl	80045dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	223d      	movs	r2, #61	; 0x3d
 8008ee0:	2102      	movs	r1, #2
 8008ee2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	493f      	ldr	r1, [pc, #252]	; (8008fec <HAL_TIM_Encoder_Init+0x140>)
 8008ef0:	400a      	ands	r2, r1
 8008ef2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3304      	adds	r3, #4
 8008efc:	0019      	movs	r1, r3
 8008efe:	0010      	movs	r0, r2
 8008f00:	f000 fc48 	bl	8009794 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	4a31      	ldr	r2, [pc, #196]	; (8008ff0 <HAL_TIM_Encoder_Init+0x144>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	4a2c      	ldr	r2, [pc, #176]	; (8008ff4 <HAL_TIM_Encoder_Init+0x148>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4a2b      	ldr	r2, [pc, #172]	; (8008ff8 <HAL_TIM_Encoder_Init+0x14c>)
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	011a      	lsls	r2, r3, #4
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	031b      	lsls	r3, r3, #12
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2222      	movs	r2, #34	; 0x22
 8008f7a:	4393      	bics	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2288      	movs	r2, #136	; 0x88
 8008f82:	4393      	bics	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	4313      	orrs	r3, r2
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2248      	movs	r2, #72	; 0x48
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	223e      	movs	r2, #62	; 0x3e
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	223f      	movs	r2, #63	; 0x3f
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2244      	movs	r2, #68	; 0x44
 8008fcc:	2101      	movs	r1, #1
 8008fce:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2245      	movs	r2, #69	; 0x45
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	223d      	movs	r2, #61	; 0x3d
 8008fdc:	2101      	movs	r1, #1
 8008fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	b006      	add	sp, #24
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	46c0      	nop			; (mov r8, r8)
 8008fec:	fffebff8 	.word	0xfffebff8
 8008ff0:	fffffcfc 	.word	0xfffffcfc
 8008ff4:	fffff3f3 	.word	0xfffff3f3
 8008ff8:	ffff0f0f 	.word	0xffff0f0f

08008ffc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ffc:	b590      	push	{r4, r7, lr}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009006:	200f      	movs	r0, #15
 8009008:	183b      	adds	r3, r7, r0
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	213e      	movs	r1, #62	; 0x3e
 800900e:	5c52      	ldrb	r2, [r2, r1]
 8009010:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009012:	230e      	movs	r3, #14
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	213f      	movs	r1, #63	; 0x3f
 800901a:	5c52      	ldrb	r2, [r2, r1]
 800901c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800901e:	240d      	movs	r4, #13
 8009020:	193b      	adds	r3, r7, r4
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	2144      	movs	r1, #68	; 0x44
 8009026:	5c52      	ldrb	r2, [r2, r1]
 8009028:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800902a:	230c      	movs	r3, #12
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	2145      	movs	r1, #69	; 0x45
 8009032:	5c52      	ldrb	r2, [r2, r1]
 8009034:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d112      	bne.n	8009062 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800903c:	183b      	adds	r3, r7, r0
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d103      	bne.n	800904c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009044:	193b      	adds	r3, r7, r4
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d001      	beq.n	8009050 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e075      	b.n	800913c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	223e      	movs	r2, #62	; 0x3e
 8009054:	2102      	movs	r1, #2
 8009056:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2244      	movs	r2, #68	; 0x44
 800905c:	2102      	movs	r1, #2
 800905e:	5499      	strb	r1, [r3, r2]
 8009060:	e03d      	b.n	80090de <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b04      	cmp	r3, #4
 8009066:	d114      	bne.n	8009092 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009068:	230e      	movs	r3, #14
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d104      	bne.n	800907c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009072:	230c      	movs	r3, #12
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d001      	beq.n	8009080 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e05d      	b.n	800913c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	223f      	movs	r2, #63	; 0x3f
 8009084:	2102      	movs	r1, #2
 8009086:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2245      	movs	r2, #69	; 0x45
 800908c:	2102      	movs	r1, #2
 800908e:	5499      	strb	r1, [r3, r2]
 8009090:	e025      	b.n	80090de <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009092:	230f      	movs	r3, #15
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d10e      	bne.n	80090ba <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800909c:	230e      	movs	r3, #14
 800909e:	18fb      	adds	r3, r7, r3
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d109      	bne.n	80090ba <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090a6:	230d      	movs	r3, #13
 80090a8:	18fb      	adds	r3, r7, r3
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d104      	bne.n	80090ba <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090b0:	230c      	movs	r3, #12
 80090b2:	18fb      	adds	r3, r7, r3
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d001      	beq.n	80090be <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e03e      	b.n	800913c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	223e      	movs	r2, #62	; 0x3e
 80090c2:	2102      	movs	r1, #2
 80090c4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	223f      	movs	r2, #63	; 0x3f
 80090ca:	2102      	movs	r1, #2
 80090cc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2244      	movs	r2, #68	; 0x44
 80090d2:	2102      	movs	r1, #2
 80090d4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2245      	movs	r2, #69	; 0x45
 80090da:	2102      	movs	r1, #2
 80090dc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_TIM_Encoder_Start+0xf0>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d008      	beq.n	80090fc <HAL_TIM_Encoder_Start+0x100>
 80090ea:	e00f      	b.n	800910c <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2201      	movs	r2, #1
 80090f2:	2100      	movs	r1, #0
 80090f4:	0018      	movs	r0, r3
 80090f6:	f000 ff23 	bl	8009f40 <TIM_CCxChannelCmd>
      break;
 80090fa:	e016      	b.n	800912a <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2201      	movs	r2, #1
 8009102:	2104      	movs	r1, #4
 8009104:	0018      	movs	r0, r3
 8009106:	f000 ff1b 	bl	8009f40 <TIM_CCxChannelCmd>
      break;
 800910a:	e00e      	b.n	800912a <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2201      	movs	r2, #1
 8009112:	2100      	movs	r1, #0
 8009114:	0018      	movs	r0, r3
 8009116:	f000 ff13 	bl	8009f40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2201      	movs	r2, #1
 8009120:	2104      	movs	r1, #4
 8009122:	0018      	movs	r0, r3
 8009124:	f000 ff0c 	bl	8009f40 <TIM_CCxChannelCmd>
      break;
 8009128:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2101      	movs	r1, #1
 8009136:	430a      	orrs	r2, r1
 8009138:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	0018      	movs	r0, r3
 800913e:	46bd      	mov	sp, r7
 8009140:	b005      	add	sp, #20
 8009142:	bd90      	pop	{r4, r7, pc}

08009144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2202      	movs	r2, #2
 8009154:	4013      	ands	r3, r2
 8009156:	2b02      	cmp	r3, #2
 8009158:	d124      	bne.n	80091a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	2202      	movs	r2, #2
 8009162:	4013      	ands	r3, r2
 8009164:	2b02      	cmp	r3, #2
 8009166:	d11d      	bne.n	80091a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2203      	movs	r2, #3
 800916e:	4252      	negs	r2, r2
 8009170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	2203      	movs	r2, #3
 8009180:	4013      	ands	r3, r2
 8009182:	d004      	beq.n	800918e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	0018      	movs	r0, r3
 8009188:	f000 faec 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 800918c:	e007      	b.n	800919e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	0018      	movs	r0, r3
 8009192:	f000 fadf 	bl	8009754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	0018      	movs	r0, r3
 800919a:	f000 faeb 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2204      	movs	r2, #4
 80091ac:	4013      	ands	r3, r2
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d125      	bne.n	80091fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	2204      	movs	r2, #4
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b04      	cmp	r3, #4
 80091be:	d11e      	bne.n	80091fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2205      	movs	r2, #5
 80091c6:	4252      	negs	r2, r2
 80091c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2202      	movs	r2, #2
 80091ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	23c0      	movs	r3, #192	; 0xc0
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4013      	ands	r3, r2
 80091dc:	d004      	beq.n	80091e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	0018      	movs	r0, r3
 80091e2:	f000 fabf 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 80091e6:	e007      	b.n	80091f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	0018      	movs	r0, r3
 80091ec:	f000 fab2 	bl	8009754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	0018      	movs	r0, r3
 80091f4:	f000 fabe 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	2208      	movs	r2, #8
 8009206:	4013      	ands	r3, r2
 8009208:	2b08      	cmp	r3, #8
 800920a:	d124      	bne.n	8009256 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2208      	movs	r2, #8
 8009214:	4013      	ands	r3, r2
 8009216:	2b08      	cmp	r3, #8
 8009218:	d11d      	bne.n	8009256 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2209      	movs	r2, #9
 8009220:	4252      	negs	r2, r2
 8009222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2204      	movs	r2, #4
 8009228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	2203      	movs	r2, #3
 8009232:	4013      	ands	r3, r2
 8009234:	d004      	beq.n	8009240 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	0018      	movs	r0, r3
 800923a:	f000 fa93 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 800923e:	e007      	b.n	8009250 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	0018      	movs	r0, r3
 8009244:	f000 fa86 	bl	8009754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	0018      	movs	r0, r3
 800924c:	f000 fa92 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2210      	movs	r2, #16
 800925e:	4013      	ands	r3, r2
 8009260:	2b10      	cmp	r3, #16
 8009262:	d125      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2210      	movs	r2, #16
 800926c:	4013      	ands	r3, r2
 800926e:	2b10      	cmp	r3, #16
 8009270:	d11e      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2211      	movs	r2, #17
 8009278:	4252      	negs	r2, r2
 800927a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2208      	movs	r2, #8
 8009280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69da      	ldr	r2, [r3, #28]
 8009288:	23c0      	movs	r3, #192	; 0xc0
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4013      	ands	r3, r2
 800928e:	d004      	beq.n	800929a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	0018      	movs	r0, r3
 8009294:	f000 fa66 	bl	8009764 <HAL_TIM_IC_CaptureCallback>
 8009298:	e007      	b.n	80092aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	0018      	movs	r0, r3
 800929e:	f000 fa59 	bl	8009754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	0018      	movs	r0, r3
 80092a6:	f000 fa65 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2201      	movs	r2, #1
 80092b8:	4013      	ands	r3, r2
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d10f      	bne.n	80092de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	4013      	ands	r3, r2
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d108      	bne.n	80092de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2202      	movs	r2, #2
 80092d2:	4252      	negs	r2, r2
 80092d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	0018      	movs	r0, r3
 80092da:	f7fb fa0f 	bl	80046fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2280      	movs	r2, #128	; 0x80
 80092e6:	4013      	ands	r3, r2
 80092e8:	2b80      	cmp	r3, #128	; 0x80
 80092ea:	d10f      	bne.n	800930c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2280      	movs	r2, #128	; 0x80
 80092f4:	4013      	ands	r3, r2
 80092f6:	2b80      	cmp	r3, #128	; 0x80
 80092f8:	d108      	bne.n	800930c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2281      	movs	r2, #129	; 0x81
 8009300:	4252      	negs	r2, r2
 8009302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	0018      	movs	r0, r3
 8009308:	f000 ff54 	bl	800a1b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691a      	ldr	r2, [r3, #16]
 8009312:	2380      	movs	r3, #128	; 0x80
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	401a      	ands	r2, r3
 8009318:	2380      	movs	r3, #128	; 0x80
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	429a      	cmp	r2, r3
 800931e:	d10e      	bne.n	800933e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	2280      	movs	r2, #128	; 0x80
 8009328:	4013      	ands	r3, r2
 800932a:	2b80      	cmp	r3, #128	; 0x80
 800932c:	d107      	bne.n	800933e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a1c      	ldr	r2, [pc, #112]	; (80093a4 <HAL_TIM_IRQHandler+0x260>)
 8009334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	0018      	movs	r0, r3
 800933a:	f000 ff43 	bl	800a1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	2240      	movs	r2, #64	; 0x40
 8009346:	4013      	ands	r3, r2
 8009348:	2b40      	cmp	r3, #64	; 0x40
 800934a:	d10f      	bne.n	800936c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	2240      	movs	r2, #64	; 0x40
 8009354:	4013      	ands	r3, r2
 8009356:	2b40      	cmp	r3, #64	; 0x40
 8009358:	d108      	bne.n	800936c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2241      	movs	r2, #65	; 0x41
 8009360:	4252      	negs	r2, r2
 8009362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	0018      	movs	r0, r3
 8009368:	f000 fa0c 	bl	8009784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2220      	movs	r2, #32
 8009374:	4013      	ands	r3, r2
 8009376:	2b20      	cmp	r3, #32
 8009378:	d10f      	bne.n	800939a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	4013      	ands	r3, r2
 8009384:	2b20      	cmp	r3, #32
 8009386:	d108      	bne.n	800939a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2221      	movs	r2, #33	; 0x21
 800938e:	4252      	negs	r2, r2
 8009390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	0018      	movs	r0, r3
 8009396:	f000 ff05 	bl	800a1a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	46bd      	mov	sp, r7
 800939e:	b002      	add	sp, #8
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	fffffeff 	.word	0xfffffeff

080093a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093b4:	2317      	movs	r3, #23
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	223c      	movs	r2, #60	; 0x3c
 80093c0:	5c9b      	ldrb	r3, [r3, r2]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e0e5      	b.n	8009596 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	223c      	movs	r2, #60	; 0x3c
 80093ce:	2101      	movs	r1, #1
 80093d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b14      	cmp	r3, #20
 80093d6:	d900      	bls.n	80093da <HAL_TIM_PWM_ConfigChannel+0x32>
 80093d8:	e0d1      	b.n	800957e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	009a      	lsls	r2, r3, #2
 80093de:	4b70      	ldr	r3, [pc, #448]	; (80095a0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80093e0:	18d3      	adds	r3, r2, r3
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	0011      	movs	r1, r2
 80093ee:	0018      	movs	r0, r3
 80093f0:	f000 fa46 	bl	8009880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2108      	movs	r1, #8
 8009400:	430a      	orrs	r2, r1
 8009402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699a      	ldr	r2, [r3, #24]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2104      	movs	r1, #4
 8009410:	438a      	bics	r2, r1
 8009412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6999      	ldr	r1, [r3, #24]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	691a      	ldr	r2, [r3, #16]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	619a      	str	r2, [r3, #24]
      break;
 8009426:	e0af      	b.n	8009588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	0011      	movs	r1, r2
 8009430:	0018      	movs	r0, r3
 8009432:	f000 faaf 	bl	8009994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	699a      	ldr	r2, [r3, #24]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	0109      	lsls	r1, r1, #4
 8009444:	430a      	orrs	r2, r1
 8009446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4954      	ldr	r1, [pc, #336]	; (80095a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009454:	400a      	ands	r2, r1
 8009456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6999      	ldr	r1, [r3, #24]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	021a      	lsls	r2, r3, #8
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	619a      	str	r2, [r3, #24]
      break;
 800946c:	e08c      	b.n	8009588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	0011      	movs	r1, r2
 8009476:	0018      	movs	r0, r3
 8009478:	f000 fb10 	bl	8009a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69da      	ldr	r2, [r3, #28]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2108      	movs	r1, #8
 8009488:	430a      	orrs	r2, r1
 800948a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69da      	ldr	r2, [r3, #28]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2104      	movs	r1, #4
 8009498:	438a      	bics	r2, r1
 800949a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69d9      	ldr	r1, [r3, #28]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	691a      	ldr	r2, [r3, #16]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	61da      	str	r2, [r3, #28]
      break;
 80094ae:	e06b      	b.n	8009588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	0011      	movs	r1, r2
 80094b8:	0018      	movs	r0, r3
 80094ba:	f000 fb77 	bl	8009bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69da      	ldr	r2, [r3, #28]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2180      	movs	r1, #128	; 0x80
 80094ca:	0109      	lsls	r1, r1, #4
 80094cc:	430a      	orrs	r2, r1
 80094ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69da      	ldr	r2, [r3, #28]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4932      	ldr	r1, [pc, #200]	; (80095a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80094dc:	400a      	ands	r2, r1
 80094de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	69d9      	ldr	r1, [r3, #28]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	021a      	lsls	r2, r3, #8
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	61da      	str	r2, [r3, #28]
      break;
 80094f4:	e048      	b.n	8009588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	0011      	movs	r1, r2
 80094fe:	0018      	movs	r0, r3
 8009500:	f000 fbbe 	bl	8009c80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2108      	movs	r1, #8
 8009510:	430a      	orrs	r2, r1
 8009512:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2104      	movs	r1, #4
 8009520:	438a      	bics	r2, r1
 8009522:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009536:	e027      	b.n	8009588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	0011      	movs	r1, r2
 8009540:	0018      	movs	r0, r3
 8009542:	f000 fbfd 	bl	8009d40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2180      	movs	r1, #128	; 0x80
 8009552:	0109      	lsls	r1, r1, #4
 8009554:	430a      	orrs	r2, r1
 8009556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4910      	ldr	r1, [pc, #64]	; (80095a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009564:	400a      	ands	r2, r1
 8009566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	021a      	lsls	r2, r3, #8
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800957c:	e004      	b.n	8009588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800957e:	2317      	movs	r3, #23
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	2201      	movs	r2, #1
 8009584:	701a      	strb	r2, [r3, #0]
      break;
 8009586:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	223c      	movs	r2, #60	; 0x3c
 800958c:	2100      	movs	r1, #0
 800958e:	5499      	strb	r1, [r3, r2]

  return status;
 8009590:	2317      	movs	r3, #23
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	781b      	ldrb	r3, [r3, #0]
}
 8009596:	0018      	movs	r0, r3
 8009598:	46bd      	mov	sp, r7
 800959a:	b006      	add	sp, #24
 800959c:	bd80      	pop	{r7, pc}
 800959e:	46c0      	nop			; (mov r8, r8)
 80095a0:	08018738 	.word	0x08018738
 80095a4:	fffffbff 	.word	0xfffffbff

080095a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095b2:	230f      	movs	r3, #15
 80095b4:	18fb      	adds	r3, r7, r3
 80095b6:	2200      	movs	r2, #0
 80095b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	223c      	movs	r2, #60	; 0x3c
 80095be:	5c9b      	ldrb	r3, [r3, r2]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d101      	bne.n	80095c8 <HAL_TIM_ConfigClockSource+0x20>
 80095c4:	2302      	movs	r3, #2
 80095c6:	e0bc      	b.n	8009742 <HAL_TIM_ConfigClockSource+0x19a>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	223c      	movs	r2, #60	; 0x3c
 80095cc:	2101      	movs	r1, #1
 80095ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	223d      	movs	r2, #61	; 0x3d
 80095d4:	2102      	movs	r1, #2
 80095d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4a5a      	ldr	r2, [pc, #360]	; (800974c <HAL_TIM_ConfigClockSource+0x1a4>)
 80095e4:	4013      	ands	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4a59      	ldr	r2, [pc, #356]	; (8009750 <HAL_TIM_ConfigClockSource+0x1a8>)
 80095ec:	4013      	ands	r3, r2
 80095ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2280      	movs	r2, #128	; 0x80
 80095fe:	0192      	lsls	r2, r2, #6
 8009600:	4293      	cmp	r3, r2
 8009602:	d040      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0xde>
 8009604:	2280      	movs	r2, #128	; 0x80
 8009606:	0192      	lsls	r2, r2, #6
 8009608:	4293      	cmp	r3, r2
 800960a:	d900      	bls.n	800960e <HAL_TIM_ConfigClockSource+0x66>
 800960c:	e088      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 800960e:	2280      	movs	r2, #128	; 0x80
 8009610:	0152      	lsls	r2, r2, #5
 8009612:	4293      	cmp	r3, r2
 8009614:	d100      	bne.n	8009618 <HAL_TIM_ConfigClockSource+0x70>
 8009616:	e088      	b.n	800972a <HAL_TIM_ConfigClockSource+0x182>
 8009618:	2280      	movs	r2, #128	; 0x80
 800961a:	0152      	lsls	r2, r2, #5
 800961c:	4293      	cmp	r3, r2
 800961e:	d900      	bls.n	8009622 <HAL_TIM_ConfigClockSource+0x7a>
 8009620:	e07e      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 8009622:	2b70      	cmp	r3, #112	; 0x70
 8009624:	d018      	beq.n	8009658 <HAL_TIM_ConfigClockSource+0xb0>
 8009626:	d900      	bls.n	800962a <HAL_TIM_ConfigClockSource+0x82>
 8009628:	e07a      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 800962a:	2b60      	cmp	r3, #96	; 0x60
 800962c:	d04f      	beq.n	80096ce <HAL_TIM_ConfigClockSource+0x126>
 800962e:	d900      	bls.n	8009632 <HAL_TIM_ConfigClockSource+0x8a>
 8009630:	e076      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 8009632:	2b50      	cmp	r3, #80	; 0x50
 8009634:	d03b      	beq.n	80096ae <HAL_TIM_ConfigClockSource+0x106>
 8009636:	d900      	bls.n	800963a <HAL_TIM_ConfigClockSource+0x92>
 8009638:	e072      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	d057      	beq.n	80096ee <HAL_TIM_ConfigClockSource+0x146>
 800963e:	d900      	bls.n	8009642 <HAL_TIM_ConfigClockSource+0x9a>
 8009640:	e06e      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 8009642:	2b30      	cmp	r3, #48	; 0x30
 8009644:	d063      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x166>
 8009646:	d86b      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 8009648:	2b20      	cmp	r3, #32
 800964a:	d060      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x166>
 800964c:	d868      	bhi.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d05d      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x166>
 8009652:	2b10      	cmp	r3, #16
 8009654:	d05b      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x166>
 8009656:	e063      	b.n	8009720 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	6899      	ldr	r1, [r3, #8]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f000 fc4a 	bl	8009f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2277      	movs	r2, #119	; 0x77
 8009678:	4313      	orrs	r3, r2
 800967a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	609a      	str	r2, [r3, #8]
      break;
 8009684:	e052      	b.n	800972c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6818      	ldr	r0, [r3, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	6899      	ldr	r1, [r3, #8]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f000 fc33 	bl	8009f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689a      	ldr	r2, [r3, #8]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2180      	movs	r1, #128	; 0x80
 80096a6:	01c9      	lsls	r1, r1, #7
 80096a8:	430a      	orrs	r2, r1
 80096aa:	609a      	str	r2, [r3, #8]
      break;
 80096ac:	e03e      	b.n	800972c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	6859      	ldr	r1, [r3, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	001a      	movs	r2, r3
 80096bc:	f000 fba4 	bl	8009e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2150      	movs	r1, #80	; 0x50
 80096c6:	0018      	movs	r0, r3
 80096c8:	f000 fbfe 	bl	8009ec8 <TIM_ITRx_SetConfig>
      break;
 80096cc:	e02e      	b.n	800972c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	6859      	ldr	r1, [r3, #4]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	001a      	movs	r2, r3
 80096dc:	f000 fbc2 	bl	8009e64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2160      	movs	r1, #96	; 0x60
 80096e6:	0018      	movs	r0, r3
 80096e8:	f000 fbee 	bl	8009ec8 <TIM_ITRx_SetConfig>
      break;
 80096ec:	e01e      	b.n	800972c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6859      	ldr	r1, [r3, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	001a      	movs	r2, r3
 80096fc:	f000 fb84 	bl	8009e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2140      	movs	r1, #64	; 0x40
 8009706:	0018      	movs	r0, r3
 8009708:	f000 fbde 	bl	8009ec8 <TIM_ITRx_SetConfig>
      break;
 800970c:	e00e      	b.n	800972c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	0019      	movs	r1, r3
 8009718:	0010      	movs	r0, r2
 800971a:	f000 fbd5 	bl	8009ec8 <TIM_ITRx_SetConfig>
      break;
 800971e:	e005      	b.n	800972c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8009720:	230f      	movs	r3, #15
 8009722:	18fb      	adds	r3, r7, r3
 8009724:	2201      	movs	r2, #1
 8009726:	701a      	strb	r2, [r3, #0]
      break;
 8009728:	e000      	b.n	800972c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800972a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	223d      	movs	r2, #61	; 0x3d
 8009730:	2101      	movs	r1, #1
 8009732:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	223c      	movs	r2, #60	; 0x3c
 8009738:	2100      	movs	r1, #0
 800973a:	5499      	strb	r1, [r3, r2]

  return status;
 800973c:	230f      	movs	r3, #15
 800973e:	18fb      	adds	r3, r7, r3
 8009740:	781b      	ldrb	r3, [r3, #0]
}
 8009742:	0018      	movs	r0, r3
 8009744:	46bd      	mov	sp, r7
 8009746:	b004      	add	sp, #16
 8009748:	bd80      	pop	{r7, pc}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	ffceff88 	.word	0xffceff88
 8009750:	ffff00ff 	.word	0xffff00ff

08009754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800975c:	46c0      	nop			; (mov r8, r8)
 800975e:	46bd      	mov	sp, r7
 8009760:	b002      	add	sp, #8
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800976c:	46c0      	nop			; (mov r8, r8)
 800976e:	46bd      	mov	sp, r7
 8009770:	b002      	add	sp, #8
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800977c:	46c0      	nop			; (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	b002      	add	sp, #8
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800978c:	46c0      	nop			; (mov r8, r8)
 800978e:	46bd      	mov	sp, r7
 8009790:	b002      	add	sp, #8
 8009792:	bd80      	pop	{r7, pc}

08009794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a2f      	ldr	r2, [pc, #188]	; (8009864 <TIM_Base_SetConfig+0xd0>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d003      	beq.n	80097b4 <TIM_Base_SetConfig+0x20>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a2e      	ldr	r2, [pc, #184]	; (8009868 <TIM_Base_SetConfig+0xd4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d108      	bne.n	80097c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2270      	movs	r2, #112	; 0x70
 80097b8:	4393      	bics	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a26      	ldr	r2, [pc, #152]	; (8009864 <TIM_Base_SetConfig+0xd0>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d013      	beq.n	80097f6 <TIM_Base_SetConfig+0x62>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a25      	ldr	r2, [pc, #148]	; (8009868 <TIM_Base_SetConfig+0xd4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00f      	beq.n	80097f6 <TIM_Base_SetConfig+0x62>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a24      	ldr	r2, [pc, #144]	; (800986c <TIM_Base_SetConfig+0xd8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00b      	beq.n	80097f6 <TIM_Base_SetConfig+0x62>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a23      	ldr	r2, [pc, #140]	; (8009870 <TIM_Base_SetConfig+0xdc>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d007      	beq.n	80097f6 <TIM_Base_SetConfig+0x62>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a22      	ldr	r2, [pc, #136]	; (8009874 <TIM_Base_SetConfig+0xe0>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d003      	beq.n	80097f6 <TIM_Base_SetConfig+0x62>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a21      	ldr	r2, [pc, #132]	; (8009878 <TIM_Base_SetConfig+0xe4>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d108      	bne.n	8009808 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4a20      	ldr	r2, [pc, #128]	; (800987c <TIM_Base_SetConfig+0xe8>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4313      	orrs	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2280      	movs	r2, #128	; 0x80
 800980c:	4393      	bics	r3, r2
 800980e:	001a      	movs	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <TIM_Base_SetConfig+0xd0>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00b      	beq.n	800984e <TIM_Base_SetConfig+0xba>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a0d      	ldr	r2, [pc, #52]	; (8009870 <TIM_Base_SetConfig+0xdc>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d007      	beq.n	800984e <TIM_Base_SetConfig+0xba>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a0c      	ldr	r2, [pc, #48]	; (8009874 <TIM_Base_SetConfig+0xe0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d003      	beq.n	800984e <TIM_Base_SetConfig+0xba>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a0b      	ldr	r2, [pc, #44]	; (8009878 <TIM_Base_SetConfig+0xe4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d103      	bne.n	8009856 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	691a      	ldr	r2, [r3, #16]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	615a      	str	r2, [r3, #20]
}
 800985c:	46c0      	nop			; (mov r8, r8)
 800985e:	46bd      	mov	sp, r7
 8009860:	b004      	add	sp, #16
 8009862:	bd80      	pop	{r7, pc}
 8009864:	40012c00 	.word	0x40012c00
 8009868:	40000400 	.word	0x40000400
 800986c:	40002000 	.word	0x40002000
 8009870:	40014000 	.word	0x40014000
 8009874:	40014400 	.word	0x40014400
 8009878:	40014800 	.word	0x40014800
 800987c:	fffffcff 	.word	0xfffffcff

08009880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	2201      	movs	r2, #1
 8009890:	4393      	bics	r3, r2
 8009892:	001a      	movs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4a32      	ldr	r2, [pc, #200]	; (8009978 <TIM_OC1_SetConfig+0xf8>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2203      	movs	r2, #3
 80098b6:	4393      	bics	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2202      	movs	r2, #2
 80098c8:	4393      	bics	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a28      	ldr	r2, [pc, #160]	; (800997c <TIM_OC1_SetConfig+0xfc>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00b      	beq.n	80098f6 <TIM_OC1_SetConfig+0x76>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a27      	ldr	r2, [pc, #156]	; (8009980 <TIM_OC1_SetConfig+0x100>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d007      	beq.n	80098f6 <TIM_OC1_SetConfig+0x76>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a26      	ldr	r2, [pc, #152]	; (8009984 <TIM_OC1_SetConfig+0x104>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d003      	beq.n	80098f6 <TIM_OC1_SetConfig+0x76>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a25      	ldr	r2, [pc, #148]	; (8009988 <TIM_OC1_SetConfig+0x108>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d10c      	bne.n	8009910 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2208      	movs	r2, #8
 80098fa:	4393      	bics	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2204      	movs	r2, #4
 800990c:	4393      	bics	r3, r2
 800990e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a1a      	ldr	r2, [pc, #104]	; (800997c <TIM_OC1_SetConfig+0xfc>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00b      	beq.n	8009930 <TIM_OC1_SetConfig+0xb0>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a19      	ldr	r2, [pc, #100]	; (8009980 <TIM_OC1_SetConfig+0x100>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d007      	beq.n	8009930 <TIM_OC1_SetConfig+0xb0>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a18      	ldr	r2, [pc, #96]	; (8009984 <TIM_OC1_SetConfig+0x104>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_OC1_SetConfig+0xb0>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a17      	ldr	r2, [pc, #92]	; (8009988 <TIM_OC1_SetConfig+0x108>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d111      	bne.n	8009954 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	4a16      	ldr	r2, [pc, #88]	; (800998c <TIM_OC1_SetConfig+0x10c>)
 8009934:	4013      	ands	r3, r2
 8009936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	4a15      	ldr	r2, [pc, #84]	; (8009990 <TIM_OC1_SetConfig+0x110>)
 800993c:	4013      	ands	r3, r2
 800993e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	46c0      	nop			; (mov r8, r8)
 8009970:	46bd      	mov	sp, r7
 8009972:	b006      	add	sp, #24
 8009974:	bd80      	pop	{r7, pc}
 8009976:	46c0      	nop			; (mov r8, r8)
 8009978:	fffeff8f 	.word	0xfffeff8f
 800997c:	40012c00 	.word	0x40012c00
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800
 800998c:	fffffeff 	.word	0xfffffeff
 8009990:	fffffdff 	.word	0xfffffdff

08009994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	2210      	movs	r2, #16
 80099a4:	4393      	bics	r3, r2
 80099a6:	001a      	movs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4a2e      	ldr	r2, [pc, #184]	; (8009a7c <TIM_OC2_SetConfig+0xe8>)
 80099c2:	4013      	ands	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4a2d      	ldr	r2, [pc, #180]	; (8009a80 <TIM_OC2_SetConfig+0xec>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2220      	movs	r2, #32
 80099de:	4393      	bics	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a24      	ldr	r2, [pc, #144]	; (8009a84 <TIM_OC2_SetConfig+0xf0>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d10d      	bne.n	8009a12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2280      	movs	r2, #128	; 0x80
 80099fa:	4393      	bics	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2240      	movs	r2, #64	; 0x40
 8009a0e:	4393      	bics	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a1b      	ldr	r2, [pc, #108]	; (8009a84 <TIM_OC2_SetConfig+0xf0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00b      	beq.n	8009a32 <TIM_OC2_SetConfig+0x9e>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a1a      	ldr	r2, [pc, #104]	; (8009a88 <TIM_OC2_SetConfig+0xf4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d007      	beq.n	8009a32 <TIM_OC2_SetConfig+0x9e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a19      	ldr	r2, [pc, #100]	; (8009a8c <TIM_OC2_SetConfig+0xf8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d003      	beq.n	8009a32 <TIM_OC2_SetConfig+0x9e>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a18      	ldr	r2, [pc, #96]	; (8009a90 <TIM_OC2_SetConfig+0xfc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d113      	bne.n	8009a5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4a17      	ldr	r2, [pc, #92]	; (8009a94 <TIM_OC2_SetConfig+0x100>)
 8009a36:	4013      	ands	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <TIM_OC2_SetConfig+0x104>)
 8009a3e:	4013      	ands	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	621a      	str	r2, [r3, #32]
}
 8009a74:	46c0      	nop			; (mov r8, r8)
 8009a76:	46bd      	mov	sp, r7
 8009a78:	b006      	add	sp, #24
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	feff8fff 	.word	0xfeff8fff
 8009a80:	fffffcff 	.word	0xfffffcff
 8009a84:	40012c00 	.word	0x40012c00
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40014400 	.word	0x40014400
 8009a90:	40014800 	.word	0x40014800
 8009a94:	fffffbff 	.word	0xfffffbff
 8009a98:	fffff7ff 	.word	0xfffff7ff

08009a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	4a35      	ldr	r2, [pc, #212]	; (8009b80 <TIM_OC3_SetConfig+0xe4>)
 8009aac:	401a      	ands	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a2f      	ldr	r2, [pc, #188]	; (8009b84 <TIM_OC3_SetConfig+0xe8>)
 8009ac8:	4013      	ands	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2203      	movs	r2, #3
 8009ad0:	4393      	bics	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	4a29      	ldr	r2, [pc, #164]	; (8009b88 <TIM_OC3_SetConfig+0xec>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	021b      	lsls	r3, r3, #8
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a25      	ldr	r2, [pc, #148]	; (8009b8c <TIM_OC3_SetConfig+0xf0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d10d      	bne.n	8009b16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	4a24      	ldr	r2, [pc, #144]	; (8009b90 <TIM_OC3_SetConfig+0xf4>)
 8009afe:	4013      	ands	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	021b      	lsls	r3, r3, #8
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	4a20      	ldr	r2, [pc, #128]	; (8009b94 <TIM_OC3_SetConfig+0xf8>)
 8009b12:	4013      	ands	r3, r2
 8009b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a1c      	ldr	r2, [pc, #112]	; (8009b8c <TIM_OC3_SetConfig+0xf0>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00b      	beq.n	8009b36 <TIM_OC3_SetConfig+0x9a>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a1d      	ldr	r2, [pc, #116]	; (8009b98 <TIM_OC3_SetConfig+0xfc>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d007      	beq.n	8009b36 <TIM_OC3_SetConfig+0x9a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a1c      	ldr	r2, [pc, #112]	; (8009b9c <TIM_OC3_SetConfig+0x100>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d003      	beq.n	8009b36 <TIM_OC3_SetConfig+0x9a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a1b      	ldr	r2, [pc, #108]	; (8009ba0 <TIM_OC3_SetConfig+0x104>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d113      	bne.n	8009b5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <TIM_OC3_SetConfig+0x108>)
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	4a19      	ldr	r2, [pc, #100]	; (8009ba8 <TIM_OC3_SetConfig+0x10c>)
 8009b42:	4013      	ands	r3, r2
 8009b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	621a      	str	r2, [r3, #32]
}
 8009b78:	46c0      	nop			; (mov r8, r8)
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	b006      	add	sp, #24
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	fffffeff 	.word	0xfffffeff
 8009b84:	fffeff8f 	.word	0xfffeff8f
 8009b88:	fffffdff 	.word	0xfffffdff
 8009b8c:	40012c00 	.word	0x40012c00
 8009b90:	fffff7ff 	.word	0xfffff7ff
 8009b94:	fffffbff 	.word	0xfffffbff
 8009b98:	40014000 	.word	0x40014000
 8009b9c:	40014400 	.word	0x40014400
 8009ba0:	40014800 	.word	0x40014800
 8009ba4:	ffffefff 	.word	0xffffefff
 8009ba8:	ffffdfff 	.word	0xffffdfff

08009bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	4a28      	ldr	r2, [pc, #160]	; (8009c5c <TIM_OC4_SetConfig+0xb0>)
 8009bbc:	401a      	ands	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4a22      	ldr	r2, [pc, #136]	; (8009c60 <TIM_OC4_SetConfig+0xb4>)
 8009bd8:	4013      	ands	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4a21      	ldr	r2, [pc, #132]	; (8009c64 <TIM_OC4_SetConfig+0xb8>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	021b      	lsls	r3, r3, #8
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	4a1d      	ldr	r2, [pc, #116]	; (8009c68 <TIM_OC4_SetConfig+0xbc>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	031b      	lsls	r3, r3, #12
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a19      	ldr	r2, [pc, #100]	; (8009c6c <TIM_OC4_SetConfig+0xc0>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00b      	beq.n	8009c24 <TIM_OC4_SetConfig+0x78>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a18      	ldr	r2, [pc, #96]	; (8009c70 <TIM_OC4_SetConfig+0xc4>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <TIM_OC4_SetConfig+0x78>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a17      	ldr	r2, [pc, #92]	; (8009c74 <TIM_OC4_SetConfig+0xc8>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <TIM_OC4_SetConfig+0x78>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a16      	ldr	r2, [pc, #88]	; (8009c78 <TIM_OC4_SetConfig+0xcc>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d109      	bne.n	8009c38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	4a15      	ldr	r2, [pc, #84]	; (8009c7c <TIM_OC4_SetConfig+0xd0>)
 8009c28:	4013      	ands	r3, r2
 8009c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	019b      	lsls	r3, r3, #6
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	46c0      	nop			; (mov r8, r8)
 8009c54:	46bd      	mov	sp, r7
 8009c56:	b006      	add	sp, #24
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	ffffefff 	.word	0xffffefff
 8009c60:	feff8fff 	.word	0xfeff8fff
 8009c64:	fffffcff 	.word	0xfffffcff
 8009c68:	ffffdfff 	.word	0xffffdfff
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40014000 	.word	0x40014000
 8009c74:	40014400 	.word	0x40014400
 8009c78:	40014800 	.word	0x40014800
 8009c7c:	ffffbfff 	.word	0xffffbfff

08009c80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	4a25      	ldr	r2, [pc, #148]	; (8009d24 <TIM_OC5_SetConfig+0xa4>)
 8009c90:	401a      	ands	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4a1f      	ldr	r2, [pc, #124]	; (8009d28 <TIM_OC5_SetConfig+0xa8>)
 8009cac:	4013      	ands	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	4a1b      	ldr	r2, [pc, #108]	; (8009d2c <TIM_OC5_SetConfig+0xac>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a17      	ldr	r2, [pc, #92]	; (8009d30 <TIM_OC5_SetConfig+0xb0>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00b      	beq.n	8009cee <TIM_OC5_SetConfig+0x6e>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a16      	ldr	r2, [pc, #88]	; (8009d34 <TIM_OC5_SetConfig+0xb4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d007      	beq.n	8009cee <TIM_OC5_SetConfig+0x6e>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <TIM_OC5_SetConfig+0xb8>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d003      	beq.n	8009cee <TIM_OC5_SetConfig+0x6e>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <TIM_OC5_SetConfig+0xbc>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d109      	bne.n	8009d02 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	4a0c      	ldr	r2, [pc, #48]	; (8009d24 <TIM_OC5_SetConfig+0xa4>)
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	021b      	lsls	r3, r3, #8
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	685a      	ldr	r2, [r3, #4]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	621a      	str	r2, [r3, #32]
}
 8009d1c:	46c0      	nop			; (mov r8, r8)
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	b006      	add	sp, #24
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	fffeffff 	.word	0xfffeffff
 8009d28:	fffeff8f 	.word	0xfffeff8f
 8009d2c:	fffdffff 	.word	0xfffdffff
 8009d30:	40012c00 	.word	0x40012c00
 8009d34:	40014000 	.word	0x40014000
 8009d38:	40014400 	.word	0x40014400
 8009d3c:	40014800 	.word	0x40014800

08009d40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	4a26      	ldr	r2, [pc, #152]	; (8009de8 <TIM_OC6_SetConfig+0xa8>)
 8009d50:	401a      	ands	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4a20      	ldr	r2, [pc, #128]	; (8009dec <TIM_OC6_SetConfig+0xac>)
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	021b      	lsls	r3, r3, #8
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	4a1c      	ldr	r2, [pc, #112]	; (8009df0 <TIM_OC6_SetConfig+0xb0>)
 8009d80:	4013      	ands	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	051b      	lsls	r3, r3, #20
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a18      	ldr	r2, [pc, #96]	; (8009df4 <TIM_OC6_SetConfig+0xb4>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00b      	beq.n	8009db0 <TIM_OC6_SetConfig+0x70>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <TIM_OC6_SetConfig+0xb8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d007      	beq.n	8009db0 <TIM_OC6_SetConfig+0x70>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a16      	ldr	r2, [pc, #88]	; (8009dfc <TIM_OC6_SetConfig+0xbc>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_OC6_SetConfig+0x70>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a15      	ldr	r2, [pc, #84]	; (8009e00 <TIM_OC6_SetConfig+0xc0>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d109      	bne.n	8009dc4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	4a14      	ldr	r2, [pc, #80]	; (8009e04 <TIM_OC6_SetConfig+0xc4>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	029b      	lsls	r3, r3, #10
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	46bd      	mov	sp, r7
 8009de2:	b006      	add	sp, #24
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	ffefffff 	.word	0xffefffff
 8009dec:	feff8fff 	.word	0xfeff8fff
 8009df0:	ffdfffff 	.word	0xffdfffff
 8009df4:	40012c00 	.word	0x40012c00
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800
 8009e04:	fffbffff 	.word	0xfffbffff

08009e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6a1b      	ldr	r3, [r3, #32]
 8009e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4393      	bics	r3, r2
 8009e22:	001a      	movs	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	22f0      	movs	r2, #240	; 0xf0
 8009e32:	4393      	bics	r3, r2
 8009e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	220a      	movs	r2, #10
 8009e44:	4393      	bics	r3, r2
 8009e46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	621a      	str	r2, [r3, #32]
}
 8009e5c:	46c0      	nop			; (mov r8, r8)
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b006      	add	sp, #24
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	2210      	movs	r2, #16
 8009e76:	4393      	bics	r3, r2
 8009e78:	001a      	movs	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	4a0d      	ldr	r2, [pc, #52]	; (8009ec4 <TIM_TI2_ConfigInputStage+0x60>)
 8009e8e:	4013      	ands	r3, r2
 8009e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	031b      	lsls	r3, r3, #12
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	22a0      	movs	r2, #160	; 0xa0
 8009ea0:	4393      	bics	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	621a      	str	r2, [r3, #32]
}
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	b006      	add	sp, #24
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	ffff0fff 	.word	0xffff0fff

08009ec8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4a08      	ldr	r2, [pc, #32]	; (8009efc <TIM_ITRx_SetConfig+0x34>)
 8009edc:	4013      	ands	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	2207      	movs	r2, #7
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	609a      	str	r2, [r3, #8]
}
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b004      	add	sp, #16
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	ffcfff8f 	.word	0xffcfff8f

08009f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <TIM_ETR_SetConfig+0x3c>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	021a      	lsls	r2, r3, #8
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	431a      	orrs	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	609a      	str	r2, [r3, #8]
}
 8009f34:	46c0      	nop			; (mov r8, r8)
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b006      	add	sp, #24
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	ffff00ff 	.word	0xffff00ff

08009f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	221f      	movs	r2, #31
 8009f50:	4013      	ands	r3, r2
 8009f52:	2201      	movs	r2, #1
 8009f54:	409a      	lsls	r2, r3
 8009f56:	0013      	movs	r3, r2
 8009f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	43d2      	mvns	r2, r2
 8009f62:	401a      	ands	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a1a      	ldr	r2, [r3, #32]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	211f      	movs	r1, #31
 8009f70:	400b      	ands	r3, r1
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	4099      	lsls	r1, r3
 8009f76:	000b      	movs	r3, r1
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	46bd      	mov	sp, r7
 8009f82:	b006      	add	sp, #24
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	223c      	movs	r2, #60	; 0x3c
 8009f96:	5c9b      	ldrb	r3, [r3, r2]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d101      	bne.n	8009fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e04f      	b.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	223c      	movs	r2, #60	; 0x3c
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	223d      	movs	r2, #61	; 0x3d
 8009fac:	2102      	movs	r1, #2
 8009fae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a20      	ldr	r2, [pc, #128]	; (800a048 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d108      	bne.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4a1f      	ldr	r2, [pc, #124]	; (800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009fce:	4013      	ands	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2270      	movs	r2, #112	; 0x70
 8009fe0:	4393      	bics	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a13      	ldr	r2, [pc, #76]	; (800a048 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d009      	beq.n	800a014 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a12      	ldr	r2, [pc, #72]	; (800a050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d004      	beq.n	800a014 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a11      	ldr	r2, [pc, #68]	; (800a054 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d10c      	bne.n	800a02e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2280      	movs	r2, #128	; 0x80
 800a018:	4393      	bics	r3, r2
 800a01a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	4313      	orrs	r3, r2
 800a024:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	223d      	movs	r2, #61	; 0x3d
 800a032:	2101      	movs	r1, #1
 800a034:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	223c      	movs	r2, #60	; 0x3c
 800a03a:	2100      	movs	r1, #0
 800a03c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	0018      	movs	r0, r3
 800a042:	46bd      	mov	sp, r7
 800a044:	b004      	add	sp, #16
 800a046:	bd80      	pop	{r7, pc}
 800a048:	40012c00 	.word	0x40012c00
 800a04c:	ff0fffff 	.word	0xff0fffff
 800a050:	40000400 	.word	0x40000400
 800a054:	40014000 	.word	0x40014000

0800a058 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	223c      	movs	r2, #60	; 0x3c
 800a06a:	5c9b      	ldrb	r3, [r3, r2]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a070:	2302      	movs	r3, #2
 800a072:	e079      	b.n	800a168 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	223c      	movs	r2, #60	; 0x3c
 800a078:	2101      	movs	r1, #1
 800a07a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	22ff      	movs	r2, #255	; 0xff
 800a080:	4393      	bics	r3, r2
 800a082:	001a      	movs	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	4313      	orrs	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4a38      	ldr	r2, [pc, #224]	; (800a170 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a090:	401a      	ands	r2, r3
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	4313      	orrs	r3, r2
 800a098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4a35      	ldr	r2, [pc, #212]	; (800a174 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a09e:	401a      	ands	r2, r3
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4a33      	ldr	r2, [pc, #204]	; (800a178 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a0ac:	401a      	ands	r2, r3
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4a30      	ldr	r2, [pc, #192]	; (800a17c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a0ba:	401a      	ands	r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4a2e      	ldr	r2, [pc, #184]	; (800a180 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a0c8:	401a      	ands	r2, r3
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	4a2b      	ldr	r2, [pc, #172]	; (800a184 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a0d6:	401a      	ands	r2, r3
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4a29      	ldr	r2, [pc, #164]	; (800a188 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a0e4:	401a      	ands	r2, r3
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	041b      	lsls	r3, r3, #16
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a25      	ldr	r2, [pc, #148]	; (800a18c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d106      	bne.n	800a108 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4a24      	ldr	r2, [pc, #144]	; (800a190 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0fe:	401a      	ands	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	4313      	orrs	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1f      	ldr	r2, [pc, #124]	; (800a18c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d121      	bne.n	800a156 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4a1f      	ldr	r2, [pc, #124]	; (800a194 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a116:	401a      	ands	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11c:	051b      	lsls	r3, r3, #20
 800a11e:	4313      	orrs	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4a1c      	ldr	r2, [pc, #112]	; (800a198 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800a126:	401a      	ands	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4a1a      	ldr	r2, [pc, #104]	; (800a19c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800a134:	401a      	ands	r2, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a12      	ldr	r2, [pc, #72]	; (800a18c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d106      	bne.n	800a156 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4a15      	ldr	r2, [pc, #84]	; (800a1a0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800a14c:	401a      	ands	r2, r3
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	223c      	movs	r2, #60	; 0x3c
 800a162:	2100      	movs	r1, #0
 800a164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	0018      	movs	r0, r3
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b004      	add	sp, #16
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	fffffcff 	.word	0xfffffcff
 800a174:	fffffbff 	.word	0xfffffbff
 800a178:	fffff7ff 	.word	0xfffff7ff
 800a17c:	ffffefff 	.word	0xffffefff
 800a180:	ffffdfff 	.word	0xffffdfff
 800a184:	ffffbfff 	.word	0xffffbfff
 800a188:	fff0ffff 	.word	0xfff0ffff
 800a18c:	40012c00 	.word	0x40012c00
 800a190:	efffffff 	.word	0xefffffff
 800a194:	ff0fffff 	.word	0xff0fffff
 800a198:	feffffff 	.word	0xfeffffff
 800a19c:	fdffffff 	.word	0xfdffffff
 800a1a0:	dfffffff 	.word	0xdfffffff

0800a1a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1ac:	46c0      	nop			; (mov r8, r8)
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	b002      	add	sp, #8
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1bc:	46c0      	nop			; (mov r8, r8)
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	b002      	add	sp, #8
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1cc:	46c0      	nop			; (mov r8, r8)
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	b002      	add	sp, #8
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e046      	b.n	800a274 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2288      	movs	r2, #136	; 0x88
 800a1ea:	589b      	ldr	r3, [r3, r2]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d107      	bne.n	800a200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2284      	movs	r2, #132	; 0x84
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f7fa fd02 	bl	8004c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2288      	movs	r2, #136	; 0x88
 800a204:	2124      	movs	r1, #36	; 0x24
 800a206:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2101      	movs	r1, #1
 800a214:	438a      	bics	r2, r1
 800a216:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	0018      	movs	r0, r3
 800a21c:	f000 fd16 	bl	800ac4c <UART_SetConfig>
 800a220:	0003      	movs	r3, r0
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e024      	b.n	800a274 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	0018      	movs	r0, r3
 800a236:	f000 fead 	bl	800af94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	490d      	ldr	r1, [pc, #52]	; (800a27c <HAL_UART_Init+0xa8>)
 800a246:	400a      	ands	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	212a      	movs	r1, #42	; 0x2a
 800a256:	438a      	bics	r2, r1
 800a258:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2101      	movs	r1, #1
 800a266:	430a      	orrs	r2, r1
 800a268:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	0018      	movs	r0, r3
 800a26e:	f000 ff45 	bl	800b0fc <UART_CheckIdleState>
 800a272:	0003      	movs	r3, r0
}
 800a274:	0018      	movs	r0, r3
 800a276:	46bd      	mov	sp, r7
 800a278:	b002      	add	sp, #8
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	ffffb7ff 	.word	0xffffb7ff

0800a280 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08c      	sub	sp, #48	; 0x30
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	1dbb      	adds	r3, r7, #6
 800a28c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2288      	movs	r2, #136	; 0x88
 800a292:	589b      	ldr	r3, [r3, r2]
 800a294:	2b20      	cmp	r3, #32
 800a296:	d000      	beq.n	800a29a <HAL_UART_Transmit_IT+0x1a>
 800a298:	e08d      	b.n	800a3b6 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <HAL_UART_Transmit_IT+0x28>
 800a2a0:	1dbb      	adds	r3, r7, #6
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e085      	b.n	800a3b8 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	689a      	ldr	r2, [r3, #8]
 800a2b0:	2380      	movs	r3, #128	; 0x80
 800a2b2:	015b      	lsls	r3, r3, #5
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d109      	bne.n	800a2cc <HAL_UART_Transmit_IT+0x4c>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d001      	beq.n	800a2cc <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e075      	b.n	800a3b8 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	1dba      	adds	r2, r7, #6
 800a2d6:	2154      	movs	r1, #84	; 0x54
 800a2d8:	8812      	ldrh	r2, [r2, #0]
 800a2da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	1dba      	adds	r2, r7, #6
 800a2e0:	2156      	movs	r1, #86	; 0x56
 800a2e2:	8812      	ldrh	r2, [r2, #0]
 800a2e4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2290      	movs	r2, #144	; 0x90
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2288      	movs	r2, #136	; 0x88
 800a2f8:	2121      	movs	r1, #33	; 0x21
 800a2fa:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a300:	2380      	movs	r3, #128	; 0x80
 800a302:	059b      	lsls	r3, r3, #22
 800a304:	429a      	cmp	r2, r3
 800a306:	d12a      	bne.n	800a35e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	2380      	movs	r3, #128	; 0x80
 800a30e:	015b      	lsls	r3, r3, #5
 800a310:	429a      	cmp	r2, r3
 800a312:	d107      	bne.n	800a324 <HAL_UART_Transmit_IT+0xa4>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d103      	bne.n	800a324 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4a28      	ldr	r2, [pc, #160]	; (800a3c0 <HAL_UART_Transmit_IT+0x140>)
 800a320:	679a      	str	r2, [r3, #120]	; 0x78
 800a322:	e002      	b.n	800a32a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	4a27      	ldr	r2, [pc, #156]	; (800a3c4 <HAL_UART_Transmit_IT+0x144>)
 800a328:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a32a:	f3ef 8310 	mrs	r3, PRIMASK
 800a32e:	61fb      	str	r3, [r7, #28]
  return(result);
 800a330:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a332:	62bb      	str	r3, [r7, #40]	; 0x28
 800a334:	2301      	movs	r3, #1
 800a336:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	f383 8810 	msr	PRIMASK, r3
}
 800a33e:	46c0      	nop			; (mov r8, r8)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2180      	movs	r1, #128	; 0x80
 800a34c:	0409      	lsls	r1, r1, #16
 800a34e:	430a      	orrs	r2, r1
 800a350:	609a      	str	r2, [r3, #8]
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	f383 8810 	msr	PRIMASK, r3
}
 800a35c:	e029      	b.n	800a3b2 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689a      	ldr	r2, [r3, #8]
 800a362:	2380      	movs	r3, #128	; 0x80
 800a364:	015b      	lsls	r3, r3, #5
 800a366:	429a      	cmp	r2, r3
 800a368:	d107      	bne.n	800a37a <HAL_UART_Transmit_IT+0xfa>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d103      	bne.n	800a37a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4a14      	ldr	r2, [pc, #80]	; (800a3c8 <HAL_UART_Transmit_IT+0x148>)
 800a376:	679a      	str	r2, [r3, #120]	; 0x78
 800a378:	e002      	b.n	800a380 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	4a13      	ldr	r2, [pc, #76]	; (800a3cc <HAL_UART_Transmit_IT+0x14c>)
 800a37e:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a380:	f3ef 8310 	mrs	r3, PRIMASK
 800a384:	613b      	str	r3, [r7, #16]
  return(result);
 800a386:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a38a:	2301      	movs	r3, #1
 800a38c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f383 8810 	msr	PRIMASK, r3
}
 800a394:	46c0      	nop			; (mov r8, r8)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2180      	movs	r1, #128	; 0x80
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	f383 8810 	msr	PRIMASK, r3
}
 800a3b0:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e000      	b.n	800a3b8 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800a3b6:	2302      	movs	r3, #2
  }
}
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	b00c      	add	sp, #48	; 0x30
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0800ba45 	.word	0x0800ba45
 800a3c4:	0800b959 	.word	0x0800b959
 800a3c8:	0800b89b 	.word	0x0800b89b
 800a3cc:	0800b7e7 	.word	0x0800b7e7

0800a3d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b088      	sub	sp, #32
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	1dbb      	adds	r3, r7, #6
 800a3dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	228c      	movs	r2, #140	; 0x8c
 800a3e2:	589b      	ldr	r3, [r3, r2]
 800a3e4:	2b20      	cmp	r3, #32
 800a3e6:	d145      	bne.n	800a474 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_UART_Receive_DMA+0x26>
 800a3ee:	1dbb      	adds	r3, r7, #6
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e03d      	b.n	800a476 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	689a      	ldr	r2, [r3, #8]
 800a3fe:	2380      	movs	r3, #128	; 0x80
 800a400:	015b      	lsls	r3, r3, #5
 800a402:	429a      	cmp	r2, r3
 800a404:	d109      	bne.n	800a41a <HAL_UART_Receive_DMA+0x4a>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2201      	movs	r2, #1
 800a412:	4013      	ands	r3, r2
 800a414:	d001      	beq.n	800a41a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e02d      	b.n	800a476 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	2380      	movs	r3, #128	; 0x80
 800a428:	041b      	lsls	r3, r3, #16
 800a42a:	4013      	ands	r3, r2
 800a42c:	d019      	beq.n	800a462 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a42e:	f3ef 8310 	mrs	r3, PRIMASK
 800a432:	613b      	str	r3, [r7, #16]
  return(result);
 800a434:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a436:	61fb      	str	r3, [r7, #28]
 800a438:	2301      	movs	r3, #1
 800a43a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f383 8810 	msr	PRIMASK, r3
}
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2180      	movs	r1, #128	; 0x80
 800a450:	04c9      	lsls	r1, r1, #19
 800a452:	430a      	orrs	r2, r1
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	f383 8810 	msr	PRIMASK, r3
}
 800a460:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a462:	1dbb      	adds	r3, r7, #6
 800a464:	881a      	ldrh	r2, [r3, #0]
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	0018      	movs	r0, r3
 800a46c:	f000 ff5c 	bl	800b328 <UART_Start_Receive_DMA>
 800a470:	0003      	movs	r3, r0
 800a472:	e000      	b.n	800a476 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a474:	2302      	movs	r3, #2
  }
}
 800a476:	0018      	movs	r0, r3
 800a478:	46bd      	mov	sp, r7
 800a47a:	b008      	add	sp, #32
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b08c      	sub	sp, #48	; 0x30
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2288      	movs	r2, #136	; 0x88
 800a48a:	589b      	ldr	r3, [r3, r2]
 800a48c:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	228c      	movs	r2, #140	; 0x8c
 800a492:	589b      	ldr	r3, [r3, r2]
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	2280      	movs	r2, #128	; 0x80
 800a49e:	4013      	ands	r3, r2
 800a4a0:	2b80      	cmp	r3, #128	; 0x80
 800a4a2:	d138      	bne.n	800a516 <HAL_UART_DMAStop+0x98>
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	2b21      	cmp	r3, #33	; 0x21
 800a4a8:	d135      	bne.n	800a516 <HAL_UART_DMAStop+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ae:	617b      	str	r3, [r7, #20]
  return(result);
 800a4b0:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	f383 8810 	msr	PRIMASK, r3
}
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689a      	ldr	r2, [r3, #8]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2180      	movs	r1, #128	; 0x80
 800a4cc:	438a      	bics	r2, r1
 800a4ce:	609a      	str	r2, [r3, #8]
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	f383 8810 	msr	PRIMASK, r3
}
 800a4da:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d014      	beq.n	800a50e <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f7fc f9ad 	bl	8006848 <HAL_DMA_Abort>
 800a4ee:	1e03      	subs	r3, r0, #0
 800a4f0:	d00d      	beq.n	800a50e <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f7fc fb24 	bl	8006b44 <HAL_DMA_GetError>
 800a4fc:	0003      	movs	r3, r0
 800a4fe:	2b20      	cmp	r3, #32
 800a500:	d105      	bne.n	800a50e <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2290      	movs	r2, #144	; 0x90
 800a506:	2110      	movs	r1, #16
 800a508:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e047      	b.n	800a59e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	0018      	movs	r0, r3
 800a512:	f000 ffaf 	bl	800b474 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	2240      	movs	r2, #64	; 0x40
 800a51e:	4013      	ands	r3, r2
 800a520:	2b40      	cmp	r3, #64	; 0x40
 800a522:	d13b      	bne.n	800a59c <HAL_UART_DMAStop+0x11e>
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	2b22      	cmp	r3, #34	; 0x22
 800a528:	d138      	bne.n	800a59c <HAL_UART_DMAStop+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a52a:	f3ef 8310 	mrs	r3, PRIMASK
 800a52e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a530:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a532:	623b      	str	r3, [r7, #32]
 800a534:	2301      	movs	r3, #1
 800a536:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f383 8810 	msr	PRIMASK, r3
}
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2140      	movs	r1, #64	; 0x40
 800a54c:	438a      	bics	r2, r1
 800a54e:	609a      	str	r2, [r3, #8]
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f383 8810 	msr	PRIMASK, r3
}
 800a55a:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2280      	movs	r2, #128	; 0x80
 800a560:	589b      	ldr	r3, [r3, r2]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d016      	beq.n	800a594 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2280      	movs	r2, #128	; 0x80
 800a56a:	589b      	ldr	r3, [r3, r2]
 800a56c:	0018      	movs	r0, r3
 800a56e:	f7fc f96b 	bl	8006848 <HAL_DMA_Abort>
 800a572:	1e03      	subs	r3, r0, #0
 800a574:	d00e      	beq.n	800a594 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2280      	movs	r2, #128	; 0x80
 800a57a:	589b      	ldr	r3, [r3, r2]
 800a57c:	0018      	movs	r0, r3
 800a57e:	f7fc fae1 	bl	8006b44 <HAL_DMA_GetError>
 800a582:	0003      	movs	r3, r0
 800a584:	2b20      	cmp	r3, #32
 800a586:	d105      	bne.n	800a594 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2290      	movs	r2, #144	; 0x90
 800a58c:	2110      	movs	r1, #16
 800a58e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e004      	b.n	800a59e <HAL_UART_DMAStop+0x120>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	0018      	movs	r0, r3
 800a598:	f000 ffac 	bl	800b4f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	0018      	movs	r0, r3
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	b00c      	add	sp, #48	; 0x30
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5a8:	b5b0      	push	{r4, r5, r7, lr}
 800a5aa:	b0aa      	sub	sp, #168	; 0xa8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	22a4      	movs	r2, #164	; 0xa4
 800a5b8:	18b9      	adds	r1, r7, r2
 800a5ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	20a0      	movs	r0, #160	; 0xa0
 800a5c4:	1839      	adds	r1, r7, r0
 800a5c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	249c      	movs	r4, #156	; 0x9c
 800a5d0:	1939      	adds	r1, r7, r4
 800a5d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5d4:	0011      	movs	r1, r2
 800a5d6:	18bb      	adds	r3, r7, r2
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4aa2      	ldr	r2, [pc, #648]	; (800a864 <HAL_UART_IRQHandler+0x2bc>)
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2298      	movs	r2, #152	; 0x98
 800a5e0:	18bd      	adds	r5, r7, r2
 800a5e2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a5e4:	18bb      	adds	r3, r7, r2
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d11a      	bne.n	800a622 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5ec:	187b      	adds	r3, r7, r1
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	d015      	beq.n	800a622 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5f6:	183b      	adds	r3, r7, r0
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	d105      	bne.n	800a60c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a600:	193b      	adds	r3, r7, r4
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	2380      	movs	r3, #128	; 0x80
 800a606:	055b      	lsls	r3, r3, #21
 800a608:	4013      	ands	r3, r2
 800a60a:	d00a      	beq.n	800a622 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a610:	2b00      	cmp	r3, #0
 800a612:	d100      	bne.n	800a616 <HAL_UART_IRQHandler+0x6e>
 800a614:	e2dc      	b.n	800abd0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	0010      	movs	r0, r2
 800a61e:	4798      	blx	r3
      }
      return;
 800a620:	e2d6      	b.n	800abd0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a622:	2398      	movs	r3, #152	; 0x98
 800a624:	18fb      	adds	r3, r7, r3
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d100      	bne.n	800a62e <HAL_UART_IRQHandler+0x86>
 800a62c:	e122      	b.n	800a874 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a62e:	239c      	movs	r3, #156	; 0x9c
 800a630:	18fb      	adds	r3, r7, r3
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a8c      	ldr	r2, [pc, #560]	; (800a868 <HAL_UART_IRQHandler+0x2c0>)
 800a636:	4013      	ands	r3, r2
 800a638:	d106      	bne.n	800a648 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a63a:	23a0      	movs	r3, #160	; 0xa0
 800a63c:	18fb      	adds	r3, r7, r3
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a8a      	ldr	r2, [pc, #552]	; (800a86c <HAL_UART_IRQHandler+0x2c4>)
 800a642:	4013      	ands	r3, r2
 800a644:	d100      	bne.n	800a648 <HAL_UART_IRQHandler+0xa0>
 800a646:	e115      	b.n	800a874 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a648:	23a4      	movs	r3, #164	; 0xa4
 800a64a:	18fb      	adds	r3, r7, r3
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2201      	movs	r2, #1
 800a650:	4013      	ands	r3, r2
 800a652:	d012      	beq.n	800a67a <HAL_UART_IRQHandler+0xd2>
 800a654:	23a0      	movs	r3, #160	; 0xa0
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	2380      	movs	r3, #128	; 0x80
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	4013      	ands	r3, r2
 800a660:	d00b      	beq.n	800a67a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2201      	movs	r2, #1
 800a668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2290      	movs	r2, #144	; 0x90
 800a66e:	589b      	ldr	r3, [r3, r2]
 800a670:	2201      	movs	r2, #1
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2190      	movs	r1, #144	; 0x90
 800a678:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a67a:	23a4      	movs	r3, #164	; 0xa4
 800a67c:	18fb      	adds	r3, r7, r3
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2202      	movs	r2, #2
 800a682:	4013      	ands	r3, r2
 800a684:	d011      	beq.n	800a6aa <HAL_UART_IRQHandler+0x102>
 800a686:	239c      	movs	r3, #156	; 0x9c
 800a688:	18fb      	adds	r3, r7, r3
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2201      	movs	r2, #1
 800a68e:	4013      	ands	r3, r2
 800a690:	d00b      	beq.n	800a6aa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2202      	movs	r2, #2
 800a698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2290      	movs	r2, #144	; 0x90
 800a69e:	589b      	ldr	r3, [r3, r2]
 800a6a0:	2204      	movs	r2, #4
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2190      	movs	r1, #144	; 0x90
 800a6a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6aa:	23a4      	movs	r3, #164	; 0xa4
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	d011      	beq.n	800a6da <HAL_UART_IRQHandler+0x132>
 800a6b6:	239c      	movs	r3, #156	; 0x9c
 800a6b8:	18fb      	adds	r3, r7, r3
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	4013      	ands	r3, r2
 800a6c0:	d00b      	beq.n	800a6da <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2290      	movs	r2, #144	; 0x90
 800a6ce:	589b      	ldr	r3, [r3, r2]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2190      	movs	r1, #144	; 0x90
 800a6d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6da:	23a4      	movs	r3, #164	; 0xa4
 800a6dc:	18fb      	adds	r3, r7, r3
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2208      	movs	r2, #8
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	d017      	beq.n	800a716 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6e6:	23a0      	movs	r3, #160	; 0xa0
 800a6e8:	18fb      	adds	r3, r7, r3
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	d105      	bne.n	800a6fe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a6f2:	239c      	movs	r3, #156	; 0x9c
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a5b      	ldr	r2, [pc, #364]	; (800a868 <HAL_UART_IRQHandler+0x2c0>)
 800a6fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6fc:	d00b      	beq.n	800a716 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2208      	movs	r2, #8
 800a704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2290      	movs	r2, #144	; 0x90
 800a70a:	589b      	ldr	r3, [r3, r2]
 800a70c:	2208      	movs	r2, #8
 800a70e:	431a      	orrs	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2190      	movs	r1, #144	; 0x90
 800a714:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a716:	23a4      	movs	r3, #164	; 0xa4
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	2380      	movs	r3, #128	; 0x80
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	4013      	ands	r3, r2
 800a722:	d013      	beq.n	800a74c <HAL_UART_IRQHandler+0x1a4>
 800a724:	23a0      	movs	r3, #160	; 0xa0
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	2380      	movs	r3, #128	; 0x80
 800a72c:	04db      	lsls	r3, r3, #19
 800a72e:	4013      	ands	r3, r2
 800a730:	d00c      	beq.n	800a74c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2280      	movs	r2, #128	; 0x80
 800a738:	0112      	lsls	r2, r2, #4
 800a73a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2290      	movs	r2, #144	; 0x90
 800a740:	589b      	ldr	r3, [r3, r2]
 800a742:	2220      	movs	r2, #32
 800a744:	431a      	orrs	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2190      	movs	r1, #144	; 0x90
 800a74a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2290      	movs	r2, #144	; 0x90
 800a750:	589b      	ldr	r3, [r3, r2]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d100      	bne.n	800a758 <HAL_UART_IRQHandler+0x1b0>
 800a756:	e23d      	b.n	800abd4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a758:	23a4      	movs	r3, #164	; 0xa4
 800a75a:	18fb      	adds	r3, r7, r3
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2220      	movs	r2, #32
 800a760:	4013      	ands	r3, r2
 800a762:	d015      	beq.n	800a790 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a764:	23a0      	movs	r3, #160	; 0xa0
 800a766:	18fb      	adds	r3, r7, r3
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2220      	movs	r2, #32
 800a76c:	4013      	ands	r3, r2
 800a76e:	d106      	bne.n	800a77e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a770:	239c      	movs	r3, #156	; 0x9c
 800a772:	18fb      	adds	r3, r7, r3
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	2380      	movs	r3, #128	; 0x80
 800a778:	055b      	lsls	r3, r3, #21
 800a77a:	4013      	ands	r3, r2
 800a77c:	d008      	beq.n	800a790 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a782:	2b00      	cmp	r3, #0
 800a784:	d004      	beq.n	800a790 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	0010      	movs	r0, r2
 800a78e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2290      	movs	r2, #144	; 0x90
 800a794:	589b      	ldr	r3, [r3, r2]
 800a796:	2194      	movs	r1, #148	; 0x94
 800a798:	187a      	adds	r2, r7, r1
 800a79a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	2240      	movs	r2, #64	; 0x40
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	2b40      	cmp	r3, #64	; 0x40
 800a7a8:	d004      	beq.n	800a7b4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7aa:	187b      	adds	r3, r7, r1
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2228      	movs	r2, #40	; 0x28
 800a7b0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7b2:	d04c      	beq.n	800a84e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	f000 fe9c 	bl	800b4f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	2240      	movs	r2, #64	; 0x40
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	2b40      	cmp	r3, #64	; 0x40
 800a7c8:	d13c      	bne.n	800a844 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ce:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a7d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d2:	2090      	movs	r0, #144	; 0x90
 800a7d4:	183a      	adds	r2, r7, r0
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	2301      	movs	r3, #1
 800a7da:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7de:	f383 8810 	msr	PRIMASK, r3
}
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2140      	movs	r1, #64	; 0x40
 800a7f0:	438a      	bics	r2, r1
 800a7f2:	609a      	str	r2, [r3, #8]
 800a7f4:	183b      	adds	r3, r7, r0
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7fc:	f383 8810 	msr	PRIMASK, r3
}
 800a800:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2280      	movs	r2, #128	; 0x80
 800a806:	589b      	ldr	r3, [r3, r2]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d016      	beq.n	800a83a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2280      	movs	r2, #128	; 0x80
 800a810:	589b      	ldr	r3, [r3, r2]
 800a812:	4a17      	ldr	r2, [pc, #92]	; (800a870 <HAL_UART_IRQHandler+0x2c8>)
 800a814:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2280      	movs	r2, #128	; 0x80
 800a81a:	589b      	ldr	r3, [r3, r2]
 800a81c:	0018      	movs	r0, r3
 800a81e:	f7fc f875 	bl	800690c <HAL_DMA_Abort_IT>
 800a822:	1e03      	subs	r3, r0, #0
 800a824:	d01c      	beq.n	800a860 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2280      	movs	r2, #128	; 0x80
 800a82a:	589b      	ldr	r3, [r3, r2]
 800a82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	2180      	movs	r1, #128	; 0x80
 800a832:	5852      	ldr	r2, [r2, r1]
 800a834:	0010      	movs	r0, r2
 800a836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a838:	e012      	b.n	800a860 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	0018      	movs	r0, r3
 800a83e:	f000 f9f1 	bl	800ac24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a842:	e00d      	b.n	800a860 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	0018      	movs	r0, r3
 800a848:	f000 f9ec 	bl	800ac24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a84c:	e008      	b.n	800a860 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	0018      	movs	r0, r3
 800a852:	f000 f9e7 	bl	800ac24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2290      	movs	r2, #144	; 0x90
 800a85a:	2100      	movs	r1, #0
 800a85c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a85e:	e1b9      	b.n	800abd4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a860:	46c0      	nop			; (mov r8, r8)
    return;
 800a862:	e1b7      	b.n	800abd4 <HAL_UART_IRQHandler+0x62c>
 800a864:	0000080f 	.word	0x0000080f
 800a868:	10000001 	.word	0x10000001
 800a86c:	04000120 	.word	0x04000120
 800a870:	0800b7b9 	.word	0x0800b7b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d000      	beq.n	800a87e <HAL_UART_IRQHandler+0x2d6>
 800a87c:	e13e      	b.n	800aafc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a87e:	23a4      	movs	r3, #164	; 0xa4
 800a880:	18fb      	adds	r3, r7, r3
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2210      	movs	r2, #16
 800a886:	4013      	ands	r3, r2
 800a888:	d100      	bne.n	800a88c <HAL_UART_IRQHandler+0x2e4>
 800a88a:	e137      	b.n	800aafc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a88c:	23a0      	movs	r3, #160	; 0xa0
 800a88e:	18fb      	adds	r3, r7, r3
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2210      	movs	r2, #16
 800a894:	4013      	ands	r3, r2
 800a896:	d100      	bne.n	800a89a <HAL_UART_IRQHandler+0x2f2>
 800a898:	e130      	b.n	800aafc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2210      	movs	r2, #16
 800a8a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	2240      	movs	r2, #64	; 0x40
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b40      	cmp	r3, #64	; 0x40
 800a8ae:	d000      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x30a>
 800a8b0:	e0a4      	b.n	800a9fc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2280      	movs	r2, #128	; 0x80
 800a8b6:	589b      	ldr	r3, [r3, r2]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	217e      	movs	r1, #126	; 0x7e
 800a8be:	187b      	adds	r3, r7, r1
 800a8c0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a8c2:	187b      	adds	r3, r7, r1
 800a8c4:	881b      	ldrh	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d100      	bne.n	800a8cc <HAL_UART_IRQHandler+0x324>
 800a8ca:	e185      	b.n	800abd8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	225c      	movs	r2, #92	; 0x5c
 800a8d0:	5a9b      	ldrh	r3, [r3, r2]
 800a8d2:	187a      	adds	r2, r7, r1
 800a8d4:	8812      	ldrh	r2, [r2, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d300      	bcc.n	800a8dc <HAL_UART_IRQHandler+0x334>
 800a8da:	e17d      	b.n	800abd8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	187a      	adds	r2, r7, r1
 800a8e0:	215e      	movs	r1, #94	; 0x5e
 800a8e2:	8812      	ldrh	r2, [r2, #0]
 800a8e4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2280      	movs	r2, #128	; 0x80
 800a8ea:	589b      	ldr	r3, [r3, r2]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	d170      	bne.n	800a9d8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8fe:	67bb      	str	r3, [r7, #120]	; 0x78
 800a900:	2301      	movs	r3, #1
 800a902:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a906:	f383 8810 	msr	PRIMASK, r3
}
 800a90a:	46c0      	nop			; (mov r8, r8)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	49b4      	ldr	r1, [pc, #720]	; (800abe8 <HAL_UART_IRQHandler+0x640>)
 800a918:	400a      	ands	r2, r1
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a91e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	f383 8810 	msr	PRIMASK, r3
}
 800a926:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a928:	f3ef 8310 	mrs	r3, PRIMASK
 800a92c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a930:	677b      	str	r3, [r7, #116]	; 0x74
 800a932:	2301      	movs	r3, #1
 800a934:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a938:	f383 8810 	msr	PRIMASK, r3
}
 800a93c:	46c0      	nop			; (mov r8, r8)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2101      	movs	r1, #1
 800a94a:	438a      	bics	r2, r1
 800a94c:	609a      	str	r2, [r3, #8]
 800a94e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a950:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a954:	f383 8810 	msr	PRIMASK, r3
}
 800a958:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a95a:	f3ef 8310 	mrs	r3, PRIMASK
 800a95e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a960:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a962:	673b      	str	r3, [r7, #112]	; 0x70
 800a964:	2301      	movs	r3, #1
 800a966:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a96a:	f383 8810 	msr	PRIMASK, r3
}
 800a96e:	46c0      	nop			; (mov r8, r8)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2140      	movs	r1, #64	; 0x40
 800a97c:	438a      	bics	r2, r1
 800a97e:	609a      	str	r2, [r3, #8]
 800a980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a982:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a986:	f383 8810 	msr	PRIMASK, r3
}
 800a98a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	228c      	movs	r2, #140	; 0x8c
 800a990:	2120      	movs	r1, #32
 800a992:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a99a:	f3ef 8310 	mrs	r3, PRIMASK
 800a99e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a9a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9aa:	f383 8810 	msr	PRIMASK, r3
}
 800a9ae:	46c0      	nop			; (mov r8, r8)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2110      	movs	r1, #16
 800a9bc:	438a      	bics	r2, r1
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9c6:	f383 8810 	msr	PRIMASK, r3
}
 800a9ca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2280      	movs	r2, #128	; 0x80
 800a9d0:	589b      	ldr	r3, [r3, r2]
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f7fb ff38 	bl	8006848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	225c      	movs	r2, #92	; 0x5c
 800a9e2:	5a9a      	ldrh	r2, [r3, r2]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	215e      	movs	r1, #94	; 0x5e
 800a9e8:	5a5b      	ldrh	r3, [r3, r1]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	0011      	movs	r1, r2
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	f000 f91d 	bl	800ac34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9fa:	e0ed      	b.n	800abd8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	225c      	movs	r2, #92	; 0x5c
 800aa00:	5a99      	ldrh	r1, [r3, r2]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	225e      	movs	r2, #94	; 0x5e
 800aa06:	5a9b      	ldrh	r3, [r3, r2]
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	208e      	movs	r0, #142	; 0x8e
 800aa0c:	183b      	adds	r3, r7, r0
 800aa0e:	1a8a      	subs	r2, r1, r2
 800aa10:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	225e      	movs	r2, #94	; 0x5e
 800aa16:	5a9b      	ldrh	r3, [r3, r2]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d100      	bne.n	800aa20 <HAL_UART_IRQHandler+0x478>
 800aa1e:	e0dd      	b.n	800abdc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800aa20:	183b      	adds	r3, r7, r0
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d100      	bne.n	800aa2a <HAL_UART_IRQHandler+0x482>
 800aa28:	e0d8      	b.n	800abdc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa2a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa30:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa32:	2488      	movs	r4, #136	; 0x88
 800aa34:	193a      	adds	r2, r7, r4
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	2301      	movs	r3, #1
 800aa3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f383 8810 	msr	PRIMASK, r3
}
 800aa42:	46c0      	nop			; (mov r8, r8)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4967      	ldr	r1, [pc, #412]	; (800abec <HAL_UART_IRQHandler+0x644>)
 800aa50:	400a      	ands	r2, r1
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	193b      	adds	r3, r7, r4
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f383 8810 	msr	PRIMASK, r3
}
 800aa60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa62:	f3ef 8310 	mrs	r3, PRIMASK
 800aa66:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa6a:	2484      	movs	r4, #132	; 0x84
 800aa6c:	193a      	adds	r2, r7, r4
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	2301      	movs	r3, #1
 800aa72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	f383 8810 	msr	PRIMASK, r3
}
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	495a      	ldr	r1, [pc, #360]	; (800abf0 <HAL_UART_IRQHandler+0x648>)
 800aa88:	400a      	ands	r2, r1
 800aa8a:	609a      	str	r2, [r3, #8]
 800aa8c:	193b      	adds	r3, r7, r4
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	f383 8810 	msr	PRIMASK, r3
}
 800aa98:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	228c      	movs	r2, #140	; 0x8c
 800aa9e:	2120      	movs	r1, #32
 800aaa0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaae:	f3ef 8310 	mrs	r3, PRIMASK
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab6:	2480      	movs	r4, #128	; 0x80
 800aab8:	193a      	adds	r2, r7, r4
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	2301      	movs	r3, #1
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	f383 8810 	msr	PRIMASK, r3
}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2110      	movs	r1, #16
 800aad4:	438a      	bics	r2, r1
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	193b      	adds	r3, r7, r4
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	f383 8810 	msr	PRIMASK, r3
}
 800aae4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aaec:	183b      	adds	r3, r7, r0
 800aaee:	881a      	ldrh	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	0011      	movs	r1, r2
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f000 f89d 	bl	800ac34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aafa:	e06f      	b.n	800abdc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aafc:	23a4      	movs	r3, #164	; 0xa4
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	2380      	movs	r3, #128	; 0x80
 800ab04:	035b      	lsls	r3, r3, #13
 800ab06:	4013      	ands	r3, r2
 800ab08:	d010      	beq.n	800ab2c <HAL_UART_IRQHandler+0x584>
 800ab0a:	239c      	movs	r3, #156	; 0x9c
 800ab0c:	18fb      	adds	r3, r7, r3
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	2380      	movs	r3, #128	; 0x80
 800ab12:	03db      	lsls	r3, r3, #15
 800ab14:	4013      	ands	r3, r2
 800ab16:	d009      	beq.n	800ab2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2280      	movs	r2, #128	; 0x80
 800ab1e:	0352      	lsls	r2, r2, #13
 800ab20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	0018      	movs	r0, r3
 800ab26:	f001 f8a5 	bl	800bc74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab2a:	e05a      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ab2c:	23a4      	movs	r3, #164	; 0xa4
 800ab2e:	18fb      	adds	r3, r7, r3
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2280      	movs	r2, #128	; 0x80
 800ab34:	4013      	ands	r3, r2
 800ab36:	d016      	beq.n	800ab66 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab38:	23a0      	movs	r3, #160	; 0xa0
 800ab3a:	18fb      	adds	r3, r7, r3
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2280      	movs	r2, #128	; 0x80
 800ab40:	4013      	ands	r3, r2
 800ab42:	d106      	bne.n	800ab52 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab44:	239c      	movs	r3, #156	; 0x9c
 800ab46:	18fb      	adds	r3, r7, r3
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	2380      	movs	r3, #128	; 0x80
 800ab4c:	041b      	lsls	r3, r3, #16
 800ab4e:	4013      	ands	r3, r2
 800ab50:	d009      	beq.n	800ab66 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d042      	beq.n	800abe0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	0010      	movs	r0, r2
 800ab62:	4798      	blx	r3
    }
    return;
 800ab64:	e03c      	b.n	800abe0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab66:	23a4      	movs	r3, #164	; 0xa4
 800ab68:	18fb      	adds	r3, r7, r3
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2240      	movs	r2, #64	; 0x40
 800ab6e:	4013      	ands	r3, r2
 800ab70:	d00a      	beq.n	800ab88 <HAL_UART_IRQHandler+0x5e0>
 800ab72:	23a0      	movs	r3, #160	; 0xa0
 800ab74:	18fb      	adds	r3, r7, r3
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2240      	movs	r2, #64	; 0x40
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	d004      	beq.n	800ab88 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	0018      	movs	r0, r3
 800ab82:	f000 ffd9 	bl	800bb38 <UART_EndTransmit_IT>
    return;
 800ab86:	e02c      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab88:	23a4      	movs	r3, #164	; 0xa4
 800ab8a:	18fb      	adds	r3, r7, r3
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	2380      	movs	r3, #128	; 0x80
 800ab90:	041b      	lsls	r3, r3, #16
 800ab92:	4013      	ands	r3, r2
 800ab94:	d00b      	beq.n	800abae <HAL_UART_IRQHandler+0x606>
 800ab96:	23a0      	movs	r3, #160	; 0xa0
 800ab98:	18fb      	adds	r3, r7, r3
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	2380      	movs	r3, #128	; 0x80
 800ab9e:	05db      	lsls	r3, r3, #23
 800aba0:	4013      	ands	r3, r2
 800aba2:	d004      	beq.n	800abae <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	0018      	movs	r0, r3
 800aba8:	f001 f874 	bl	800bc94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abac:	e019      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800abae:	23a4      	movs	r3, #164	; 0xa4
 800abb0:	18fb      	adds	r3, r7, r3
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	2380      	movs	r3, #128	; 0x80
 800abb6:	045b      	lsls	r3, r3, #17
 800abb8:	4013      	ands	r3, r2
 800abba:	d012      	beq.n	800abe2 <HAL_UART_IRQHandler+0x63a>
 800abbc:	23a0      	movs	r3, #160	; 0xa0
 800abbe:	18fb      	adds	r3, r7, r3
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da0d      	bge.n	800abe2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	0018      	movs	r0, r3
 800abca:	f001 f85b 	bl	800bc84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abce:	e008      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
      return;
 800abd0:	46c0      	nop			; (mov r8, r8)
 800abd2:	e006      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
    return;
 800abd4:	46c0      	nop			; (mov r8, r8)
 800abd6:	e004      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
      return;
 800abd8:	46c0      	nop			; (mov r8, r8)
 800abda:	e002      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
      return;
 800abdc:	46c0      	nop			; (mov r8, r8)
 800abde:	e000      	b.n	800abe2 <HAL_UART_IRQHandler+0x63a>
    return;
 800abe0:	46c0      	nop			; (mov r8, r8)
  }
}
 800abe2:	46bd      	mov	sp, r7
 800abe4:	b02a      	add	sp, #168	; 0xa8
 800abe6:	bdb0      	pop	{r4, r5, r7, pc}
 800abe8:	fffffeff 	.word	0xfffffeff
 800abec:	fffffedf 	.word	0xfffffedf
 800abf0:	effffffe 	.word	0xeffffffe

0800abf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800abfc:	46c0      	nop			; (mov r8, r8)
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b002      	add	sp, #8
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ac0c:	46c0      	nop			; (mov r8, r8)
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	b002      	add	sp, #8
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac1c:	46c0      	nop			; (mov r8, r8)
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b002      	add	sp, #8
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac2c:	46c0      	nop			; (mov r8, r8)
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	b002      	add	sp, #8
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	000a      	movs	r2, r1
 800ac3e:	1cbb      	adds	r3, r7, #2
 800ac40:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	46bd      	mov	sp, r7
 800ac46:	b002      	add	sp, #8
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac54:	231a      	movs	r3, #26
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	2200      	movs	r2, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689a      	ldr	r2, [r3, #8]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	431a      	orrs	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4abc      	ldr	r2, [pc, #752]	; (800af6c <UART_SetConfig+0x320>)
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	0019      	movs	r1, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	4ab7      	ldr	r2, [pc, #732]	; (800af70 <UART_SetConfig+0x324>)
 800ac92:	4013      	ands	r3, r2
 800ac94:	0019      	movs	r1, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a1b      	ldr	r3, [r3, #32]
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	4313      	orrs	r3, r2
 800acb0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	4aae      	ldr	r2, [pc, #696]	; (800af74 <UART_SetConfig+0x328>)
 800acba:	4013      	ands	r3, r2
 800acbc:	0019      	movs	r1, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69fa      	ldr	r2, [r7, #28]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	220f      	movs	r2, #15
 800acd0:	4393      	bics	r3, r2
 800acd2:	0019      	movs	r1, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4aa4      	ldr	r2, [pc, #656]	; (800af78 <UART_SetConfig+0x32c>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d127      	bne.n	800ad3a <UART_SetConfig+0xee>
 800acea:	4ba4      	ldr	r3, [pc, #656]	; (800af7c <UART_SetConfig+0x330>)
 800acec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acee:	2203      	movs	r2, #3
 800acf0:	4013      	ands	r3, r2
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d017      	beq.n	800ad26 <UART_SetConfig+0xda>
 800acf6:	d81b      	bhi.n	800ad30 <UART_SetConfig+0xe4>
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d00a      	beq.n	800ad12 <UART_SetConfig+0xc6>
 800acfc:	d818      	bhi.n	800ad30 <UART_SetConfig+0xe4>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <UART_SetConfig+0xbc>
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d00a      	beq.n	800ad1c <UART_SetConfig+0xd0>
 800ad06:	e013      	b.n	800ad30 <UART_SetConfig+0xe4>
 800ad08:	231b      	movs	r3, #27
 800ad0a:	18fb      	adds	r3, r7, r3
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	e058      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad12:	231b      	movs	r3, #27
 800ad14:	18fb      	adds	r3, r7, r3
 800ad16:	2202      	movs	r2, #2
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	e053      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad1c:	231b      	movs	r3, #27
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	2204      	movs	r2, #4
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	e04e      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad26:	231b      	movs	r3, #27
 800ad28:	18fb      	adds	r3, r7, r3
 800ad2a:	2208      	movs	r2, #8
 800ad2c:	701a      	strb	r2, [r3, #0]
 800ad2e:	e049      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad30:	231b      	movs	r3, #27
 800ad32:	18fb      	adds	r3, r7, r3
 800ad34:	2210      	movs	r2, #16
 800ad36:	701a      	strb	r2, [r3, #0]
 800ad38:	e044      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a90      	ldr	r2, [pc, #576]	; (800af80 <UART_SetConfig+0x334>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d127      	bne.n	800ad94 <UART_SetConfig+0x148>
 800ad44:	4b8d      	ldr	r3, [pc, #564]	; (800af7c <UART_SetConfig+0x330>)
 800ad46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad48:	220c      	movs	r2, #12
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	2b0c      	cmp	r3, #12
 800ad4e:	d017      	beq.n	800ad80 <UART_SetConfig+0x134>
 800ad50:	d81b      	bhi.n	800ad8a <UART_SetConfig+0x13e>
 800ad52:	2b08      	cmp	r3, #8
 800ad54:	d00a      	beq.n	800ad6c <UART_SetConfig+0x120>
 800ad56:	d818      	bhi.n	800ad8a <UART_SetConfig+0x13e>
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d002      	beq.n	800ad62 <UART_SetConfig+0x116>
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d00a      	beq.n	800ad76 <UART_SetConfig+0x12a>
 800ad60:	e013      	b.n	800ad8a <UART_SetConfig+0x13e>
 800ad62:	231b      	movs	r3, #27
 800ad64:	18fb      	adds	r3, r7, r3
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	e02b      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad6c:	231b      	movs	r3, #27
 800ad6e:	18fb      	adds	r3, r7, r3
 800ad70:	2202      	movs	r2, #2
 800ad72:	701a      	strb	r2, [r3, #0]
 800ad74:	e026      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad76:	231b      	movs	r3, #27
 800ad78:	18fb      	adds	r3, r7, r3
 800ad7a:	2204      	movs	r2, #4
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	e021      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad80:	231b      	movs	r3, #27
 800ad82:	18fb      	adds	r3, r7, r3
 800ad84:	2208      	movs	r2, #8
 800ad86:	701a      	strb	r2, [r3, #0]
 800ad88:	e01c      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad8a:	231b      	movs	r3, #27
 800ad8c:	18fb      	adds	r3, r7, r3
 800ad8e:	2210      	movs	r2, #16
 800ad90:	701a      	strb	r2, [r3, #0]
 800ad92:	e017      	b.n	800adc4 <UART_SetConfig+0x178>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a7a      	ldr	r2, [pc, #488]	; (800af84 <UART_SetConfig+0x338>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d104      	bne.n	800ada8 <UART_SetConfig+0x15c>
 800ad9e:	231b      	movs	r3, #27
 800ada0:	18fb      	adds	r3, r7, r3
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	e00d      	b.n	800adc4 <UART_SetConfig+0x178>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a76      	ldr	r2, [pc, #472]	; (800af88 <UART_SetConfig+0x33c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d104      	bne.n	800adbc <UART_SetConfig+0x170>
 800adb2:	231b      	movs	r3, #27
 800adb4:	18fb      	adds	r3, r7, r3
 800adb6:	2200      	movs	r2, #0
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	e003      	b.n	800adc4 <UART_SetConfig+0x178>
 800adbc:	231b      	movs	r3, #27
 800adbe:	18fb      	adds	r3, r7, r3
 800adc0:	2210      	movs	r2, #16
 800adc2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	2380      	movs	r3, #128	; 0x80
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	429a      	cmp	r2, r3
 800adce:	d000      	beq.n	800add2 <UART_SetConfig+0x186>
 800add0:	e065      	b.n	800ae9e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800add2:	231b      	movs	r3, #27
 800add4:	18fb      	adds	r3, r7, r3
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2b08      	cmp	r3, #8
 800adda:	d015      	beq.n	800ae08 <UART_SetConfig+0x1bc>
 800addc:	dc18      	bgt.n	800ae10 <UART_SetConfig+0x1c4>
 800adde:	2b04      	cmp	r3, #4
 800ade0:	d00d      	beq.n	800adfe <UART_SetConfig+0x1b2>
 800ade2:	dc15      	bgt.n	800ae10 <UART_SetConfig+0x1c4>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <UART_SetConfig+0x1a2>
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d005      	beq.n	800adf8 <UART_SetConfig+0x1ac>
 800adec:	e010      	b.n	800ae10 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adee:	f7fc fdd1 	bl	8007994 <HAL_RCC_GetPCLK1Freq>
 800adf2:	0003      	movs	r3, r0
 800adf4:	617b      	str	r3, [r7, #20]
        break;
 800adf6:	e012      	b.n	800ae1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adf8:	4b64      	ldr	r3, [pc, #400]	; (800af8c <UART_SetConfig+0x340>)
 800adfa:	617b      	str	r3, [r7, #20]
        break;
 800adfc:	e00f      	b.n	800ae1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adfe:	f7fc fd3d 	bl	800787c <HAL_RCC_GetSysClockFreq>
 800ae02:	0003      	movs	r3, r0
 800ae04:	617b      	str	r3, [r7, #20]
        break;
 800ae06:	e00a      	b.n	800ae1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae08:	2380      	movs	r3, #128	; 0x80
 800ae0a:	021b      	lsls	r3, r3, #8
 800ae0c:	617b      	str	r3, [r7, #20]
        break;
 800ae0e:	e006      	b.n	800ae1e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ae14:	231a      	movs	r3, #26
 800ae16:	18fb      	adds	r3, r7, r3
 800ae18:	2201      	movs	r2, #1
 800ae1a:	701a      	strb	r2, [r3, #0]
        break;
 800ae1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d100      	bne.n	800ae26 <UART_SetConfig+0x1da>
 800ae24:	e08d      	b.n	800af42 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae2a:	4b59      	ldr	r3, [pc, #356]	; (800af90 <UART_SetConfig+0x344>)
 800ae2c:	0052      	lsls	r2, r2, #1
 800ae2e:	5ad3      	ldrh	r3, [r2, r3]
 800ae30:	0019      	movs	r1, r3
 800ae32:	6978      	ldr	r0, [r7, #20]
 800ae34:	f7f5 f98a 	bl	800014c <__udivsi3>
 800ae38:	0003      	movs	r3, r0
 800ae3a:	005a      	lsls	r2, r3, #1
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	085b      	lsrs	r3, r3, #1
 800ae42:	18d2      	adds	r2, r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	0019      	movs	r1, r3
 800ae4a:	0010      	movs	r0, r2
 800ae4c:	f7f5 f97e 	bl	800014c <__udivsi3>
 800ae50:	0003      	movs	r3, r0
 800ae52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2b0f      	cmp	r3, #15
 800ae58:	d91c      	bls.n	800ae94 <UART_SetConfig+0x248>
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	2380      	movs	r3, #128	; 0x80
 800ae5e:	025b      	lsls	r3, r3, #9
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d217      	bcs.n	800ae94 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	200e      	movs	r0, #14
 800ae6a:	183b      	adds	r3, r7, r0
 800ae6c:	210f      	movs	r1, #15
 800ae6e:	438a      	bics	r2, r1
 800ae70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	085b      	lsrs	r3, r3, #1
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	2207      	movs	r2, #7
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	b299      	uxth	r1, r3
 800ae7e:	183b      	adds	r3, r7, r0
 800ae80:	183a      	adds	r2, r7, r0
 800ae82:	8812      	ldrh	r2, [r2, #0]
 800ae84:	430a      	orrs	r2, r1
 800ae86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	183a      	adds	r2, r7, r0
 800ae8e:	8812      	ldrh	r2, [r2, #0]
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	e056      	b.n	800af42 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800ae94:	231a      	movs	r3, #26
 800ae96:	18fb      	adds	r3, r7, r3
 800ae98:	2201      	movs	r2, #1
 800ae9a:	701a      	strb	r2, [r3, #0]
 800ae9c:	e051      	b.n	800af42 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae9e:	231b      	movs	r3, #27
 800aea0:	18fb      	adds	r3, r7, r3
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d015      	beq.n	800aed4 <UART_SetConfig+0x288>
 800aea8:	dc18      	bgt.n	800aedc <UART_SetConfig+0x290>
 800aeaa:	2b04      	cmp	r3, #4
 800aeac:	d00d      	beq.n	800aeca <UART_SetConfig+0x27e>
 800aeae:	dc15      	bgt.n	800aedc <UART_SetConfig+0x290>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <UART_SetConfig+0x26e>
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d005      	beq.n	800aec4 <UART_SetConfig+0x278>
 800aeb8:	e010      	b.n	800aedc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeba:	f7fc fd6b 	bl	8007994 <HAL_RCC_GetPCLK1Freq>
 800aebe:	0003      	movs	r3, r0
 800aec0:	617b      	str	r3, [r7, #20]
        break;
 800aec2:	e012      	b.n	800aeea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aec4:	4b31      	ldr	r3, [pc, #196]	; (800af8c <UART_SetConfig+0x340>)
 800aec6:	617b      	str	r3, [r7, #20]
        break;
 800aec8:	e00f      	b.n	800aeea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeca:	f7fc fcd7 	bl	800787c <HAL_RCC_GetSysClockFreq>
 800aece:	0003      	movs	r3, r0
 800aed0:	617b      	str	r3, [r7, #20]
        break;
 800aed2:	e00a      	b.n	800aeea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aed4:	2380      	movs	r3, #128	; 0x80
 800aed6:	021b      	lsls	r3, r3, #8
 800aed8:	617b      	str	r3, [r7, #20]
        break;
 800aeda:	e006      	b.n	800aeea <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aee0:	231a      	movs	r3, #26
 800aee2:	18fb      	adds	r3, r7, r3
 800aee4:	2201      	movs	r2, #1
 800aee6:	701a      	strb	r2, [r3, #0]
        break;
 800aee8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d028      	beq.n	800af42 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aef4:	4b26      	ldr	r3, [pc, #152]	; (800af90 <UART_SetConfig+0x344>)
 800aef6:	0052      	lsls	r2, r2, #1
 800aef8:	5ad3      	ldrh	r3, [r2, r3]
 800aefa:	0019      	movs	r1, r3
 800aefc:	6978      	ldr	r0, [r7, #20]
 800aefe:	f7f5 f925 	bl	800014c <__udivsi3>
 800af02:	0003      	movs	r3, r0
 800af04:	001a      	movs	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	085b      	lsrs	r3, r3, #1
 800af0c:	18d2      	adds	r2, r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	0019      	movs	r1, r3
 800af14:	0010      	movs	r0, r2
 800af16:	f7f5 f919 	bl	800014c <__udivsi3>
 800af1a:	0003      	movs	r3, r0
 800af1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	2b0f      	cmp	r3, #15
 800af22:	d90a      	bls.n	800af3a <UART_SetConfig+0x2ee>
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	2380      	movs	r3, #128	; 0x80
 800af28:	025b      	lsls	r3, r3, #9
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d205      	bcs.n	800af3a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	b29a      	uxth	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60da      	str	r2, [r3, #12]
 800af38:	e003      	b.n	800af42 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800af3a:	231a      	movs	r3, #26
 800af3c:	18fb      	adds	r3, r7, r3
 800af3e:	2201      	movs	r2, #1
 800af40:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	226a      	movs	r2, #106	; 0x6a
 800af46:	2101      	movs	r1, #1
 800af48:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2268      	movs	r2, #104	; 0x68
 800af4e:	2101      	movs	r1, #1
 800af50:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800af5e:	231a      	movs	r3, #26
 800af60:	18fb      	adds	r3, r7, r3
 800af62:	781b      	ldrb	r3, [r3, #0]
}
 800af64:	0018      	movs	r0, r3
 800af66:	46bd      	mov	sp, r7
 800af68:	b008      	add	sp, #32
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	cfff69f3 	.word	0xcfff69f3
 800af70:	ffffcfff 	.word	0xffffcfff
 800af74:	11fff4ff 	.word	0x11fff4ff
 800af78:	40013800 	.word	0x40013800
 800af7c:	40021000 	.word	0x40021000
 800af80:	40004400 	.word	0x40004400
 800af84:	40004800 	.word	0x40004800
 800af88:	40004c00 	.word	0x40004c00
 800af8c:	00f42400 	.word	0x00f42400
 800af90:	0801878c 	.word	0x0801878c

0800af94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa0:	2201      	movs	r2, #1
 800afa2:	4013      	ands	r3, r2
 800afa4:	d00b      	beq.n	800afbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	4a4a      	ldr	r2, [pc, #296]	; (800b0d8 <UART_AdvFeatureConfig+0x144>)
 800afae:	4013      	ands	r3, r2
 800afb0:	0019      	movs	r1, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc2:	2202      	movs	r2, #2
 800afc4:	4013      	ands	r3, r2
 800afc6:	d00b      	beq.n	800afe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	4a43      	ldr	r2, [pc, #268]	; (800b0dc <UART_AdvFeatureConfig+0x148>)
 800afd0:	4013      	ands	r3, r2
 800afd2:	0019      	movs	r1, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe4:	2204      	movs	r2, #4
 800afe6:	4013      	ands	r3, r2
 800afe8:	d00b      	beq.n	800b002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	4a3b      	ldr	r2, [pc, #236]	; (800b0e0 <UART_AdvFeatureConfig+0x14c>)
 800aff2:	4013      	ands	r3, r2
 800aff4:	0019      	movs	r1, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	430a      	orrs	r2, r1
 800b000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b006:	2208      	movs	r2, #8
 800b008:	4013      	ands	r3, r2
 800b00a:	d00b      	beq.n	800b024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	4a34      	ldr	r2, [pc, #208]	; (800b0e4 <UART_AdvFeatureConfig+0x150>)
 800b014:	4013      	ands	r3, r2
 800b016:	0019      	movs	r1, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b028:	2210      	movs	r2, #16
 800b02a:	4013      	ands	r3, r2
 800b02c:	d00b      	beq.n	800b046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	4a2c      	ldr	r2, [pc, #176]	; (800b0e8 <UART_AdvFeatureConfig+0x154>)
 800b036:	4013      	ands	r3, r2
 800b038:	0019      	movs	r1, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	430a      	orrs	r2, r1
 800b044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	2220      	movs	r2, #32
 800b04c:	4013      	ands	r3, r2
 800b04e:	d00b      	beq.n	800b068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	4a25      	ldr	r2, [pc, #148]	; (800b0ec <UART_AdvFeatureConfig+0x158>)
 800b058:	4013      	ands	r3, r2
 800b05a:	0019      	movs	r1, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06c:	2240      	movs	r2, #64	; 0x40
 800b06e:	4013      	ands	r3, r2
 800b070:	d01d      	beq.n	800b0ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	4a1d      	ldr	r2, [pc, #116]	; (800b0f0 <UART_AdvFeatureConfig+0x15c>)
 800b07a:	4013      	ands	r3, r2
 800b07c:	0019      	movs	r1, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	430a      	orrs	r2, r1
 800b088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b08e:	2380      	movs	r3, #128	; 0x80
 800b090:	035b      	lsls	r3, r3, #13
 800b092:	429a      	cmp	r2, r3
 800b094:	d10b      	bne.n	800b0ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <UART_AdvFeatureConfig+0x160>)
 800b09e:	4013      	ands	r3, r2
 800b0a0:	0019      	movs	r1, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b2:	2280      	movs	r2, #128	; 0x80
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	d00b      	beq.n	800b0d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	4a0e      	ldr	r2, [pc, #56]	; (800b0f8 <UART_AdvFeatureConfig+0x164>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	0019      	movs	r1, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	430a      	orrs	r2, r1
 800b0ce:	605a      	str	r2, [r3, #4]
  }
}
 800b0d0:	46c0      	nop			; (mov r8, r8)
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	b002      	add	sp, #8
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	fffdffff 	.word	0xfffdffff
 800b0dc:	fffeffff 	.word	0xfffeffff
 800b0e0:	fffbffff 	.word	0xfffbffff
 800b0e4:	ffff7fff 	.word	0xffff7fff
 800b0e8:	ffffefff 	.word	0xffffefff
 800b0ec:	ffffdfff 	.word	0xffffdfff
 800b0f0:	ffefffff 	.word	0xffefffff
 800b0f4:	ff9fffff 	.word	0xff9fffff
 800b0f8:	fff7ffff 	.word	0xfff7ffff

0800b0fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af02      	add	r7, sp, #8
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2290      	movs	r2, #144	; 0x90
 800b108:	2100      	movs	r1, #0
 800b10a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b10c:	f7fa f886 	bl	800521c <HAL_GetTick>
 800b110:	0003      	movs	r3, r0
 800b112:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2208      	movs	r2, #8
 800b11c:	4013      	ands	r3, r2
 800b11e:	2b08      	cmp	r3, #8
 800b120:	d10c      	bne.n	800b13c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2280      	movs	r2, #128	; 0x80
 800b126:	0391      	lsls	r1, r2, #14
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	4a1a      	ldr	r2, [pc, #104]	; (800b194 <UART_CheckIdleState+0x98>)
 800b12c:	9200      	str	r2, [sp, #0]
 800b12e:	2200      	movs	r2, #0
 800b130:	f000 f832 	bl	800b198 <UART_WaitOnFlagUntilTimeout>
 800b134:	1e03      	subs	r3, r0, #0
 800b136:	d001      	beq.n	800b13c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	e026      	b.n	800b18a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2204      	movs	r2, #4
 800b144:	4013      	ands	r3, r2
 800b146:	2b04      	cmp	r3, #4
 800b148:	d10c      	bne.n	800b164 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2280      	movs	r2, #128	; 0x80
 800b14e:	03d1      	lsls	r1, r2, #15
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	4a10      	ldr	r2, [pc, #64]	; (800b194 <UART_CheckIdleState+0x98>)
 800b154:	9200      	str	r2, [sp, #0]
 800b156:	2200      	movs	r2, #0
 800b158:	f000 f81e 	bl	800b198 <UART_WaitOnFlagUntilTimeout>
 800b15c:	1e03      	subs	r3, r0, #0
 800b15e:	d001      	beq.n	800b164 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e012      	b.n	800b18a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2288      	movs	r2, #136	; 0x88
 800b168:	2120      	movs	r1, #32
 800b16a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	228c      	movs	r2, #140	; 0x8c
 800b170:	2120      	movs	r1, #32
 800b172:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2284      	movs	r2, #132	; 0x84
 800b184:	2100      	movs	r1, #0
 800b186:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	0018      	movs	r0, r3
 800b18c:	46bd      	mov	sp, r7
 800b18e:	b004      	add	sp, #16
 800b190:	bd80      	pop	{r7, pc}
 800b192:	46c0      	nop			; (mov r8, r8)
 800b194:	01ffffff 	.word	0x01ffffff

0800b198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b094      	sub	sp, #80	; 0x50
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	1dfb      	adds	r3, r7, #7
 800b1a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1a8:	e0a7      	b.n	800b2fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	d100      	bne.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800b1b0:	e0a3      	b.n	800b2fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b2:	f7fa f833 	bl	800521c <HAL_GetTick>
 800b1b6:	0002      	movs	r2, r0
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d302      	bcc.n	800b1c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d13f      	bne.n	800b248 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b1cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d8:	f383 8810 	msr	PRIMASK, r3
}
 800b1dc:	46c0      	nop			; (mov r8, r8)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	494e      	ldr	r1, [pc, #312]	; (800b324 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b1ea:	400a      	ands	r2, r1
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	f383 8810 	msr	PRIMASK, r3
}
 800b1f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b1fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b202:	643b      	str	r3, [r7, #64]	; 0x40
 800b204:	2301      	movs	r3, #1
 800b206:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	f383 8810 	msr	PRIMASK, r3
}
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689a      	ldr	r2, [r3, #8]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2101      	movs	r1, #1
 800b21c:	438a      	bics	r2, r1
 800b21e:	609a      	str	r2, [r3, #8]
 800b220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b222:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b226:	f383 8810 	msr	PRIMASK, r3
}
 800b22a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2288      	movs	r2, #136	; 0x88
 800b230:	2120      	movs	r1, #32
 800b232:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	228c      	movs	r2, #140	; 0x8c
 800b238:	2120      	movs	r1, #32
 800b23a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2284      	movs	r2, #132	; 0x84
 800b240:	2100      	movs	r1, #0
 800b242:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e069      	b.n	800b31c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2204      	movs	r2, #4
 800b250:	4013      	ands	r3, r2
 800b252:	d052      	beq.n	800b2fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	69da      	ldr	r2, [r3, #28]
 800b25a:	2380      	movs	r3, #128	; 0x80
 800b25c:	011b      	lsls	r3, r3, #4
 800b25e:	401a      	ands	r2, r3
 800b260:	2380      	movs	r3, #128	; 0x80
 800b262:	011b      	lsls	r3, r3, #4
 800b264:	429a      	cmp	r2, r3
 800b266:	d148      	bne.n	800b2fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2280      	movs	r2, #128	; 0x80
 800b26e:	0112      	lsls	r2, r2, #4
 800b270:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b272:	f3ef 8310 	mrs	r3, PRIMASK
 800b276:	613b      	str	r3, [r7, #16]
  return(result);
 800b278:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b27c:	2301      	movs	r3, #1
 800b27e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f383 8810 	msr	PRIMASK, r3
}
 800b286:	46c0      	nop			; (mov r8, r8)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4924      	ldr	r1, [pc, #144]	; (800b324 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b294:	400a      	ands	r2, r1
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b29a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	f383 8810 	msr	PRIMASK, r3
}
 800b2a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800b2aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	f383 8810 	msr	PRIMASK, r3
}
 800b2b8:	46c0      	nop			; (mov r8, r8)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	438a      	bics	r2, r1
 800b2c8:	609a      	str	r2, [r3, #8]
 800b2ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	f383 8810 	msr	PRIMASK, r3
}
 800b2d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2288      	movs	r2, #136	; 0x88
 800b2da:	2120      	movs	r1, #32
 800b2dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	228c      	movs	r2, #140	; 0x8c
 800b2e2:	2120      	movs	r1, #32
 800b2e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2290      	movs	r2, #144	; 0x90
 800b2ea:	2120      	movs	r1, #32
 800b2ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2284      	movs	r2, #132	; 0x84
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e010      	b.n	800b31c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	4013      	ands	r3, r2
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	425a      	negs	r2, r3
 800b30a:	4153      	adcs	r3, r2
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	001a      	movs	r2, r3
 800b310:	1dfb      	adds	r3, r7, #7
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	429a      	cmp	r2, r3
 800b316:	d100      	bne.n	800b31a <UART_WaitOnFlagUntilTimeout+0x182>
 800b318:	e747      	b.n	800b1aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	0018      	movs	r0, r3
 800b31e:	46bd      	mov	sp, r7
 800b320:	b014      	add	sp, #80	; 0x50
 800b322:	bd80      	pop	{r7, pc}
 800b324:	fffffe5f 	.word	0xfffffe5f

0800b328 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b090      	sub	sp, #64	; 0x40
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	1dbb      	adds	r3, r7, #6
 800b334:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	1dba      	adds	r2, r7, #6
 800b340:	215c      	movs	r1, #92	; 0x5c
 800b342:	8812      	ldrh	r2, [r2, #0]
 800b344:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2290      	movs	r2, #144	; 0x90
 800b34a:	2100      	movs	r1, #0
 800b34c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	228c      	movs	r2, #140	; 0x8c
 800b352:	2122      	movs	r1, #34	; 0x22
 800b354:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2280      	movs	r2, #128	; 0x80
 800b35a:	589b      	ldr	r3, [r3, r2]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d02d      	beq.n	800b3bc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2280      	movs	r2, #128	; 0x80
 800b364:	589b      	ldr	r3, [r3, r2]
 800b366:	4a40      	ldr	r2, [pc, #256]	; (800b468 <UART_Start_Receive_DMA+0x140>)
 800b368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2280      	movs	r2, #128	; 0x80
 800b36e:	589b      	ldr	r3, [r3, r2]
 800b370:	4a3e      	ldr	r2, [pc, #248]	; (800b46c <UART_Start_Receive_DMA+0x144>)
 800b372:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2280      	movs	r2, #128	; 0x80
 800b378:	589b      	ldr	r3, [r3, r2]
 800b37a:	4a3d      	ldr	r2, [pc, #244]	; (800b470 <UART_Start_Receive_DMA+0x148>)
 800b37c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2280      	movs	r2, #128	; 0x80
 800b382:	589b      	ldr	r3, [r3, r2]
 800b384:	2200      	movs	r2, #0
 800b386:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2280      	movs	r2, #128	; 0x80
 800b38c:	5898      	ldr	r0, [r3, r2]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3324      	adds	r3, #36	; 0x24
 800b394:	0019      	movs	r1, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39a:	001a      	movs	r2, r3
 800b39c:	1dbb      	adds	r3, r7, #6
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	f7fb f9cc 	bl	800673c <HAL_DMA_Start_IT>
 800b3a4:	1e03      	subs	r3, r0, #0
 800b3a6:	d009      	beq.n	800b3bc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2290      	movs	r2, #144	; 0x90
 800b3ac:	2110      	movs	r1, #16
 800b3ae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	228c      	movs	r2, #140	; 0x8c
 800b3b4:	2120      	movs	r1, #32
 800b3b6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e050      	b.n	800b45e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d019      	beq.n	800b3f8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d4:	f383 8810 	msr	PRIMASK, r3
}
 800b3d8:	46c0      	nop			; (mov r8, r8)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2180      	movs	r1, #128	; 0x80
 800b3e6:	0049      	lsls	r1, r1, #1
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	f383 8810 	msr	PRIMASK, r3
}
 800b3f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b3fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b400:	63bb      	str	r3, [r7, #56]	; 0x38
 800b402:	2301      	movs	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f383 8810 	msr	PRIMASK, r3
}
 800b40c:	46c0      	nop			; (mov r8, r8)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	689a      	ldr	r2, [r3, #8]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2101      	movs	r1, #1
 800b41a:	430a      	orrs	r2, r1
 800b41c:	609a      	str	r2, [r3, #8]
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	f383 8810 	msr	PRIMASK, r3
}
 800b428:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b42a:	f3ef 8310 	mrs	r3, PRIMASK
 800b42e:	61fb      	str	r3, [r7, #28]
  return(result);
 800b430:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b432:	637b      	str	r3, [r7, #52]	; 0x34
 800b434:	2301      	movs	r3, #1
 800b436:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	f383 8810 	msr	PRIMASK, r3
}
 800b43e:	46c0      	nop			; (mov r8, r8)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689a      	ldr	r2, [r3, #8]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2140      	movs	r1, #64	; 0x40
 800b44c:	430a      	orrs	r2, r1
 800b44e:	609a      	str	r2, [r3, #8]
 800b450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	f383 8810 	msr	PRIMASK, r3
}
 800b45a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	0018      	movs	r0, r3
 800b460:	46bd      	mov	sp, r7
 800b462:	b010      	add	sp, #64	; 0x40
 800b464:	bd80      	pop	{r7, pc}
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	0800b5c1 	.word	0x0800b5c1
 800b46c:	0800b6f1 	.word	0x0800b6f1
 800b470:	0800b733 	.word	0x0800b733

0800b474 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08a      	sub	sp, #40	; 0x28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b47c:	f3ef 8310 	mrs	r3, PRIMASK
 800b480:	60bb      	str	r3, [r7, #8]
  return(result);
 800b482:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b484:	627b      	str	r3, [r7, #36]	; 0x24
 800b486:	2301      	movs	r3, #1
 800b488:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f383 8810 	msr	PRIMASK, r3
}
 800b490:	46c0      	nop			; (mov r8, r8)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	21c0      	movs	r1, #192	; 0xc0
 800b49e:	438a      	bics	r2, r1
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f383 8810 	msr	PRIMASK, r3
}
 800b4ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b2:	617b      	str	r3, [r7, #20]
  return(result);
 800b4b4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b4b6:	623b      	str	r3, [r7, #32]
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	f383 8810 	msr	PRIMASK, r3
}
 800b4c2:	46c0      	nop			; (mov r8, r8)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4908      	ldr	r1, [pc, #32]	; (800b4f0 <UART_EndTxTransfer+0x7c>)
 800b4d0:	400a      	ands	r2, r1
 800b4d2:	609a      	str	r2, [r3, #8]
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	f383 8810 	msr	PRIMASK, r3
}
 800b4de:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2288      	movs	r2, #136	; 0x88
 800b4e4:	2120      	movs	r1, #32
 800b4e6:	5099      	str	r1, [r3, r2]
}
 800b4e8:	46c0      	nop			; (mov r8, r8)
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	b00a      	add	sp, #40	; 0x28
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	ff7fffff 	.word	0xff7fffff

0800b4f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b500:	617b      	str	r3, [r7, #20]
  return(result);
 800b502:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b504:	637b      	str	r3, [r7, #52]	; 0x34
 800b506:	2301      	movs	r3, #1
 800b508:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	f383 8810 	msr	PRIMASK, r3
}
 800b510:	46c0      	nop			; (mov r8, r8)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4926      	ldr	r1, [pc, #152]	; (800b5b8 <UART_EndRxTransfer+0xc4>)
 800b51e:	400a      	ands	r2, r1
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b524:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	f383 8810 	msr	PRIMASK, r3
}
 800b52c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b52e:	f3ef 8310 	mrs	r3, PRIMASK
 800b532:	623b      	str	r3, [r7, #32]
  return(result);
 800b534:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b536:	633b      	str	r3, [r7, #48]	; 0x30
 800b538:	2301      	movs	r3, #1
 800b53a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	f383 8810 	msr	PRIMASK, r3
}
 800b542:	46c0      	nop			; (mov r8, r8)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	689a      	ldr	r2, [r3, #8]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	491b      	ldr	r1, [pc, #108]	; (800b5bc <UART_EndRxTransfer+0xc8>)
 800b550:	400a      	ands	r2, r1
 800b552:	609a      	str	r2, [r3, #8]
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	f383 8810 	msr	PRIMASK, r3
}
 800b55e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b564:	2b01      	cmp	r3, #1
 800b566:	d118      	bne.n	800b59a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b568:	f3ef 8310 	mrs	r3, PRIMASK
 800b56c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b56e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b572:	2301      	movs	r3, #1
 800b574:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f383 8810 	msr	PRIMASK, r3
}
 800b57c:	46c0      	nop			; (mov r8, r8)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2110      	movs	r1, #16
 800b58a:	438a      	bics	r2, r1
 800b58c:	601a      	str	r2, [r3, #0]
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f383 8810 	msr	PRIMASK, r3
}
 800b598:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	228c      	movs	r2, #140	; 0x8c
 800b59e:	2120      	movs	r1, #32
 800b5a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b5ae:	46c0      	nop			; (mov r8, r8)
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	b00e      	add	sp, #56	; 0x38
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	46c0      	nop			; (mov r8, r8)
 800b5b8:	fffffedf 	.word	0xfffffedf
 800b5bc:	effffffe 	.word	0xeffffffe

0800b5c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b094      	sub	sp, #80	; 0x50
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	d16f      	bne.n	800b6ba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5dc:	225e      	movs	r2, #94	; 0x5e
 800b5de:	2100      	movs	r1, #0
 800b5e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5e8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	f383 8810 	msr	PRIMASK, r3
}
 800b5f6:	46c0      	nop			; (mov r8, r8)
 800b5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	493a      	ldr	r1, [pc, #232]	; (800b6ec <UART_DMAReceiveCplt+0x12c>)
 800b604:	400a      	ands	r2, r1
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b60a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b60c:	6a3b      	ldr	r3, [r7, #32]
 800b60e:	f383 8810 	msr	PRIMASK, r3
}
 800b612:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b614:	f3ef 8310 	mrs	r3, PRIMASK
 800b618:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61c:	647b      	str	r3, [r7, #68]	; 0x44
 800b61e:	2301      	movs	r3, #1
 800b620:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	f383 8810 	msr	PRIMASK, r3
}
 800b628:	46c0      	nop			; (mov r8, r8)
 800b62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689a      	ldr	r2, [r3, #8]
 800b630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2101      	movs	r1, #1
 800b636:	438a      	bics	r2, r1
 800b638:	609a      	str	r2, [r3, #8]
 800b63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b63c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	f383 8810 	msr	PRIMASK, r3
}
 800b644:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b646:	f3ef 8310 	mrs	r3, PRIMASK
 800b64a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b64e:	643b      	str	r3, [r7, #64]	; 0x40
 800b650:	2301      	movs	r3, #1
 800b652:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b656:	f383 8810 	msr	PRIMASK, r3
}
 800b65a:	46c0      	nop			; (mov r8, r8)
 800b65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	689a      	ldr	r2, [r3, #8]
 800b662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2140      	movs	r1, #64	; 0x40
 800b668:	438a      	bics	r2, r1
 800b66a:	609a      	str	r2, [r3, #8]
 800b66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b66e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b672:	f383 8810 	msr	PRIMASK, r3
}
 800b676:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67a:	228c      	movs	r2, #140	; 0x8c
 800b67c:	2120      	movs	r1, #32
 800b67e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b684:	2b01      	cmp	r3, #1
 800b686:	d118      	bne.n	800b6ba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b688:	f3ef 8310 	mrs	r3, PRIMASK
 800b68c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b68e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b692:	2301      	movs	r3, #1
 800b694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f383 8810 	msr	PRIMASK, r3
}
 800b69c:	46c0      	nop			; (mov r8, r8)
 800b69e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2110      	movs	r1, #16
 800b6aa:	438a      	bics	r2, r1
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f383 8810 	msr	PRIMASK, r3
}
 800b6b8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6bc:	2200      	movs	r2, #0
 800b6be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d108      	bne.n	800b6da <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ca:	225c      	movs	r2, #92	; 0x5c
 800b6cc:	5a9a      	ldrh	r2, [r3, r2]
 800b6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d0:	0011      	movs	r1, r2
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f7ff faae 	bl	800ac34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6d8:	e003      	b.n	800b6e2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6dc:	0018      	movs	r0, r3
 800b6de:	f7ff fa91 	bl	800ac04 <HAL_UART_RxCpltCallback>
}
 800b6e2:	46c0      	nop			; (mov r8, r8)
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b014      	add	sp, #80	; 0x50
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	fffffeff 	.word	0xfffffeff

0800b6f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2201      	movs	r2, #1
 800b702:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d10a      	bne.n	800b722 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	225c      	movs	r2, #92	; 0x5c
 800b710:	5a9b      	ldrh	r3, [r3, r2]
 800b712:	085b      	lsrs	r3, r3, #1
 800b714:	b29a      	uxth	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	0011      	movs	r1, r2
 800b71a:	0018      	movs	r0, r3
 800b71c:	f7ff fa8a 	bl	800ac34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b720:	e003      	b.n	800b72a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	0018      	movs	r0, r3
 800b726:	f7ff fa75 	bl	800ac14 <HAL_UART_RxHalfCpltCallback>
}
 800b72a:	46c0      	nop			; (mov r8, r8)
 800b72c:	46bd      	mov	sp, r7
 800b72e:	b004      	add	sp, #16
 800b730:	bd80      	pop	{r7, pc}

0800b732 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b086      	sub	sp, #24
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2288      	movs	r2, #136	; 0x88
 800b744:	589b      	ldr	r3, [r3, r2]
 800b746:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	228c      	movs	r2, #140	; 0x8c
 800b74c:	589b      	ldr	r3, [r3, r2]
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	2280      	movs	r2, #128	; 0x80
 800b758:	4013      	ands	r3, r2
 800b75a:	2b80      	cmp	r3, #128	; 0x80
 800b75c:	d10a      	bne.n	800b774 <UART_DMAError+0x42>
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	2b21      	cmp	r3, #33	; 0x21
 800b762:	d107      	bne.n	800b774 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2256      	movs	r2, #86	; 0x56
 800b768:	2100      	movs	r1, #0
 800b76a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	0018      	movs	r0, r3
 800b770:	f7ff fe80 	bl	800b474 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	2240      	movs	r2, #64	; 0x40
 800b77c:	4013      	ands	r3, r2
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d10a      	bne.n	800b798 <UART_DMAError+0x66>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b22      	cmp	r3, #34	; 0x22
 800b786:	d107      	bne.n	800b798 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	225e      	movs	r2, #94	; 0x5e
 800b78c:	2100      	movs	r1, #0
 800b78e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	0018      	movs	r0, r3
 800b794:	f7ff feae 	bl	800b4f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2290      	movs	r2, #144	; 0x90
 800b79c:	589b      	ldr	r3, [r3, r2]
 800b79e:	2210      	movs	r2, #16
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2190      	movs	r1, #144	; 0x90
 800b7a6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	f7ff fa3a 	bl	800ac24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7b0:	46c0      	nop			; (mov r8, r8)
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	b006      	add	sp, #24
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	225e      	movs	r2, #94	; 0x5e
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2256      	movs	r2, #86	; 0x56
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	0018      	movs	r0, r3
 800b7da:	f7ff fa23 	bl	800ac24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7de:	46c0      	nop			; (mov r8, r8)
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	b004      	add	sp, #16
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b08a      	sub	sp, #40	; 0x28
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2288      	movs	r2, #136	; 0x88
 800b7f2:	589b      	ldr	r3, [r3, r2]
 800b7f4:	2b21      	cmp	r3, #33	; 0x21
 800b7f6:	d14c      	bne.n	800b892 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2256      	movs	r2, #86	; 0x56
 800b7fc:	5a9b      	ldrh	r3, [r3, r2]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d132      	bne.n	800b86a <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b804:	f3ef 8310 	mrs	r3, PRIMASK
 800b808:	60bb      	str	r3, [r7, #8]
  return(result);
 800b80a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b80c:	627b      	str	r3, [r7, #36]	; 0x24
 800b80e:	2301      	movs	r3, #1
 800b810:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f383 8810 	msr	PRIMASK, r3
}
 800b818:	46c0      	nop			; (mov r8, r8)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2180      	movs	r1, #128	; 0x80
 800b826:	438a      	bics	r2, r1
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	f383 8810 	msr	PRIMASK, r3
}
 800b834:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b836:	f3ef 8310 	mrs	r3, PRIMASK
 800b83a:	617b      	str	r3, [r7, #20]
  return(result);
 800b83c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b83e:	623b      	str	r3, [r7, #32]
 800b840:	2301      	movs	r3, #1
 800b842:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	f383 8810 	msr	PRIMASK, r3
}
 800b84a:	46c0      	nop			; (mov r8, r8)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2140      	movs	r1, #64	; 0x40
 800b858:	430a      	orrs	r2, r1
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	f383 8810 	msr	PRIMASK, r3
}
 800b866:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b868:	e013      	b.n	800b892 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b86e:	781a      	ldrb	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2256      	movs	r2, #86	; 0x56
 800b884:	5a9b      	ldrh	r3, [r3, r2]
 800b886:	b29b      	uxth	r3, r3
 800b888:	3b01      	subs	r3, #1
 800b88a:	b299      	uxth	r1, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2256      	movs	r2, #86	; 0x56
 800b890:	5299      	strh	r1, [r3, r2]
}
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	46bd      	mov	sp, r7
 800b896:	b00a      	add	sp, #40	; 0x28
 800b898:	bd80      	pop	{r7, pc}

0800b89a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b08c      	sub	sp, #48	; 0x30
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2288      	movs	r2, #136	; 0x88
 800b8a6:	589b      	ldr	r3, [r3, r2]
 800b8a8:	2b21      	cmp	r3, #33	; 0x21
 800b8aa:	d151      	bne.n	800b950 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2256      	movs	r2, #86	; 0x56
 800b8b0:	5a9b      	ldrh	r3, [r3, r2]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d132      	bne.n	800b91e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b8bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b8c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f383 8810 	msr	PRIMASK, r3
}
 800b8cc:	46c0      	nop			; (mov r8, r8)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2180      	movs	r1, #128	; 0x80
 800b8da:	438a      	bics	r2, r1
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	f383 8810 	msr	PRIMASK, r3
}
 800b8e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ee:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8f0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	f383 8810 	msr	PRIMASK, r3
}
 800b8fe:	46c0      	nop			; (mov r8, r8)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2140      	movs	r1, #64	; 0x40
 800b90c:	430a      	orrs	r2, r1
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	f383 8810 	msr	PRIMASK, r3
}
 800b91a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b91c:	e018      	b.n	800b950 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b922:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	001a      	movs	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	05d2      	lsls	r2, r2, #23
 800b930:	0dd2      	lsrs	r2, r2, #23
 800b932:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b938:	1c9a      	adds	r2, r3, #2
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2256      	movs	r2, #86	; 0x56
 800b942:	5a9b      	ldrh	r3, [r3, r2]
 800b944:	b29b      	uxth	r3, r3
 800b946:	3b01      	subs	r3, #1
 800b948:	b299      	uxth	r1, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2256      	movs	r2, #86	; 0x56
 800b94e:	5299      	strh	r1, [r3, r2]
}
 800b950:	46c0      	nop			; (mov r8, r8)
 800b952:	46bd      	mov	sp, r7
 800b954:	b00c      	add	sp, #48	; 0x30
 800b956:	bd80      	pop	{r7, pc}

0800b958 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08c      	sub	sp, #48	; 0x30
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2288      	movs	r2, #136	; 0x88
 800b964:	589b      	ldr	r3, [r3, r2]
 800b966:	2b21      	cmp	r3, #33	; 0x21
 800b968:	d165      	bne.n	800ba36 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b96a:	232e      	movs	r3, #46	; 0x2e
 800b96c:	18fb      	adds	r3, r7, r3
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	216a      	movs	r1, #106	; 0x6a
 800b972:	5a52      	ldrh	r2, [r2, r1]
 800b974:	801a      	strh	r2, [r3, #0]
 800b976:	e059      	b.n	800ba2c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2256      	movs	r2, #86	; 0x56
 800b97c:	5a9b      	ldrh	r3, [r3, r2]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d133      	bne.n	800b9ec <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b984:	f3ef 8310 	mrs	r3, PRIMASK
 800b988:	60fb      	str	r3, [r7, #12]
  return(result);
 800b98a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b98c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b98e:	2301      	movs	r3, #1
 800b990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f383 8810 	msr	PRIMASK, r3
}
 800b998:	46c0      	nop			; (mov r8, r8)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4926      	ldr	r1, [pc, #152]	; (800ba40 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800b9a6:	400a      	ands	r2, r1
 800b9a8:	609a      	str	r2, [r3, #8]
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f383 8810 	msr	PRIMASK, r3
}
 800b9b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ba:	61bb      	str	r3, [r7, #24]
  return(result);
 800b9bc:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9be:	627b      	str	r3, [r7, #36]	; 0x24
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	f383 8810 	msr	PRIMASK, r3
}
 800b9ca:	46c0      	nop			; (mov r8, r8)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2140      	movs	r1, #64	; 0x40
 800b9d8:	430a      	orrs	r2, r1
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	f383 8810 	msr	PRIMASK, r3
}
 800b9e6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b9e8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b9ea:	e024      	b.n	800ba36 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	2280      	movs	r2, #128	; 0x80
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	d013      	beq.n	800ba20 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9fc:	781a      	ldrb	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba08:	1c5a      	adds	r2, r3, #1
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2256      	movs	r2, #86	; 0x56
 800ba12:	5a9b      	ldrh	r3, [r3, r2]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	b299      	uxth	r1, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2256      	movs	r2, #86	; 0x56
 800ba1e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba20:	212e      	movs	r1, #46	; 0x2e
 800ba22:	187b      	adds	r3, r7, r1
 800ba24:	881a      	ldrh	r2, [r3, #0]
 800ba26:	187b      	adds	r3, r7, r1
 800ba28:	3a01      	subs	r2, #1
 800ba2a:	801a      	strh	r2, [r3, #0]
 800ba2c:	232e      	movs	r3, #46	; 0x2e
 800ba2e:	18fb      	adds	r3, r7, r3
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1a0      	bne.n	800b978 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	b00c      	add	sp, #48	; 0x30
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	46c0      	nop			; (mov r8, r8)
 800ba40:	ff7fffff 	.word	0xff7fffff

0800ba44 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b08c      	sub	sp, #48	; 0x30
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2288      	movs	r2, #136	; 0x88
 800ba50:	589b      	ldr	r3, [r3, r2]
 800ba52:	2b21      	cmp	r3, #33	; 0x21
 800ba54:	d16a      	bne.n	800bb2c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba56:	232e      	movs	r3, #46	; 0x2e
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	216a      	movs	r1, #106	; 0x6a
 800ba5e:	5a52      	ldrh	r2, [r2, r1]
 800ba60:	801a      	strh	r2, [r3, #0]
 800ba62:	e05e      	b.n	800bb22 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2256      	movs	r2, #86	; 0x56
 800ba68:	5a9b      	ldrh	r3, [r3, r2]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d133      	bne.n	800bad8 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba70:	f3ef 8310 	mrs	r3, PRIMASK
 800ba74:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba76:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f383 8810 	msr	PRIMASK, r3
}
 800ba84:	46c0      	nop			; (mov r8, r8)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4928      	ldr	r1, [pc, #160]	; (800bb34 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800ba92:	400a      	ands	r2, r1
 800ba94:	609a      	str	r2, [r3, #8]
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f383 8810 	msr	PRIMASK, r3
}
 800baa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baa2:	f3ef 8310 	mrs	r3, PRIMASK
 800baa6:	617b      	str	r3, [r7, #20]
  return(result);
 800baa8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800baaa:	623b      	str	r3, [r7, #32]
 800baac:	2301      	movs	r3, #1
 800baae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	f383 8810 	msr	PRIMASK, r3
}
 800bab6:	46c0      	nop			; (mov r8, r8)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2140      	movs	r1, #64	; 0x40
 800bac4:	430a      	orrs	r2, r1
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	f383 8810 	msr	PRIMASK, r3
}
 800bad2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800bad4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800bad6:	e029      	b.n	800bb2c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	2280      	movs	r2, #128	; 0x80
 800bae0:	4013      	ands	r3, r2
 800bae2:	d018      	beq.n	800bb16 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae8:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	001a      	movs	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	05d2      	lsls	r2, r2, #23
 800baf6:	0dd2      	lsrs	r2, r2, #23
 800baf8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafe:	1c9a      	adds	r2, r3, #2
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2256      	movs	r2, #86	; 0x56
 800bb08:	5a9b      	ldrh	r3, [r3, r2]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b299      	uxth	r1, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2256      	movs	r2, #86	; 0x56
 800bb14:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb16:	212e      	movs	r1, #46	; 0x2e
 800bb18:	187b      	adds	r3, r7, r1
 800bb1a:	881a      	ldrh	r2, [r3, #0]
 800bb1c:	187b      	adds	r3, r7, r1
 800bb1e:	3a01      	subs	r2, #1
 800bb20:	801a      	strh	r2, [r3, #0]
 800bb22:	232e      	movs	r3, #46	; 0x2e
 800bb24:	18fb      	adds	r3, r7, r3
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d19b      	bne.n	800ba64 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800bb2c:	46c0      	nop			; (mov r8, r8)
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	b00c      	add	sp, #48	; 0x30
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	ff7fffff 	.word	0xff7fffff

0800bb38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb40:	f3ef 8310 	mrs	r3, PRIMASK
 800bb44:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb46:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f383 8810 	msr	PRIMASK, r3
}
 800bb54:	46c0      	nop			; (mov r8, r8)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2140      	movs	r1, #64	; 0x40
 800bb62:	438a      	bics	r2, r1
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f383 8810 	msr	PRIMASK, r3
}
 800bb70:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2288      	movs	r2, #136	; 0x88
 800bb76:	2120      	movs	r1, #32
 800bb78:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	0018      	movs	r0, r3
 800bb84:	f7ff f836 	bl	800abf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb88:	46c0      	nop			; (mov r8, r8)
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	b006      	add	sp, #24
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d101      	bne.n	800bba8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e05d      	b.n	800bc64 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2288      	movs	r2, #136	; 0x88
 800bbac:	589b      	ldr	r3, [r3, r2]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d107      	bne.n	800bbc2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2284      	movs	r2, #132	; 0x84
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f7f9 f821 	bl	8004c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2288      	movs	r2, #136	; 0x88
 800bbc6:	2124      	movs	r1, #36	; 0x24
 800bbc8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	438a      	bics	r2, r1
 800bbd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f7ff f835 	bl	800ac4c <UART_SetConfig>
 800bbe2:	0003      	movs	r3, r0
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e03b      	b.n	800bc64 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	f7ff f9cc 	bl	800af94 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689a      	ldr	r2, [r3, #8]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2180      	movs	r1, #128	; 0x80
 800bc08:	01c9      	lsls	r1, r1, #7
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	4a15      	ldr	r2, [pc, #84]	; (800bc6c <HAL_RS485Ex_Init+0xdc>)
 800bc16:	4013      	ands	r3, r2
 800bc18:	0019      	movs	r1, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	430a      	orrs	r2, r1
 800bc22:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	055b      	lsls	r3, r3, #21
 800bc28:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	041b      	lsls	r3, r3, #16
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a0d      	ldr	r2, [pc, #52]	; (800bc70 <HAL_RS485Ex_Init+0xe0>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	0019      	movs	r1, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	430a      	orrs	r2, r1
 800bc48:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2101      	movs	r1, #1
 800bc56:	430a      	orrs	r2, r1
 800bc58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f7ff fa4d 	bl	800b0fc <UART_CheckIdleState>
 800bc62:	0003      	movs	r3, r0
}
 800bc64:	0018      	movs	r0, r3
 800bc66:	46bd      	mov	sp, r7
 800bc68:	b006      	add	sp, #24
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	ffff7fff 	.word	0xffff7fff
 800bc70:	fc00ffff 	.word	0xfc00ffff

0800bc74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc7c:	46c0      	nop			; (mov r8, r8)
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	b002      	add	sp, #8
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc8c:	46c0      	nop			; (mov r8, r8)
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	b002      	add	sp, #8
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc9c:	46c0      	nop			; (mov r8, r8)
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	b002      	add	sp, #8
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2284      	movs	r2, #132	; 0x84
 800bcb0:	5c9b      	ldrb	r3, [r3, r2]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d101      	bne.n	800bcba <HAL_UARTEx_DisableFifoMode+0x16>
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	e027      	b.n	800bd0a <HAL_UARTEx_DisableFifoMode+0x66>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2284      	movs	r2, #132	; 0x84
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2288      	movs	r2, #136	; 0x88
 800bcc6:	2124      	movs	r1, #36	; 0x24
 800bcc8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2101      	movs	r1, #1
 800bcde:	438a      	bics	r2, r1
 800bce0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	4a0b      	ldr	r2, [pc, #44]	; (800bd14 <HAL_UARTEx_DisableFifoMode+0x70>)
 800bce6:	4013      	ands	r3, r2
 800bce8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2288      	movs	r2, #136	; 0x88
 800bcfc:	2120      	movs	r1, #32
 800bcfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2284      	movs	r2, #132	; 0x84
 800bd04:	2100      	movs	r1, #0
 800bd06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	b004      	add	sp, #16
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	46c0      	nop			; (mov r8, r8)
 800bd14:	dfffffff 	.word	0xdfffffff

0800bd18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2284      	movs	r2, #132	; 0x84
 800bd26:	5c9b      	ldrb	r3, [r3, r2]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d101      	bne.n	800bd30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	e02e      	b.n	800bd8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2284      	movs	r2, #132	; 0x84
 800bd34:	2101      	movs	r1, #1
 800bd36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2288      	movs	r2, #136	; 0x88
 800bd3c:	2124      	movs	r1, #36	; 0x24
 800bd3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2101      	movs	r1, #1
 800bd54:	438a      	bics	r2, r1
 800bd56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	00db      	lsls	r3, r3, #3
 800bd60:	08d9      	lsrs	r1, r3, #3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	0018      	movs	r0, r3
 800bd70:	f000 f854 	bl	800be1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2288      	movs	r2, #136	; 0x88
 800bd80:	2120      	movs	r1, #32
 800bd82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2284      	movs	r2, #132	; 0x84
 800bd88:	2100      	movs	r1, #0
 800bd8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	0018      	movs	r0, r3
 800bd90:	46bd      	mov	sp, r7
 800bd92:	b004      	add	sp, #16
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2284      	movs	r2, #132	; 0x84
 800bda6:	5c9b      	ldrb	r3, [r3, r2]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d101      	bne.n	800bdb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e02f      	b.n	800be10 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2284      	movs	r2, #132	; 0x84
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2288      	movs	r2, #136	; 0x88
 800bdbc:	2124      	movs	r1, #36	; 0x24
 800bdbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	438a      	bics	r2, r1
 800bdd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	4a0e      	ldr	r2, [pc, #56]	; (800be18 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bde0:	4013      	ands	r3, r2
 800bde2:	0019      	movs	r1, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	f000 f813 	bl	800be1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2288      	movs	r2, #136	; 0x88
 800be02:	2120      	movs	r1, #32
 800be04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2284      	movs	r2, #132	; 0x84
 800be0a:	2100      	movs	r1, #0
 800be0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	0018      	movs	r0, r3
 800be12:	46bd      	mov	sp, r7
 800be14:	b004      	add	sp, #16
 800be16:	bd80      	pop	{r7, pc}
 800be18:	f1ffffff 	.word	0xf1ffffff

0800be1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d108      	bne.n	800be3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	226a      	movs	r2, #106	; 0x6a
 800be30:	2101      	movs	r1, #1
 800be32:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2268      	movs	r2, #104	; 0x68
 800be38:	2101      	movs	r1, #1
 800be3a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be3c:	e043      	b.n	800bec6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be3e:	260f      	movs	r6, #15
 800be40:	19bb      	adds	r3, r7, r6
 800be42:	2208      	movs	r2, #8
 800be44:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be46:	200e      	movs	r0, #14
 800be48:	183b      	adds	r3, r7, r0
 800be4a:	2208      	movs	r2, #8
 800be4c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	0e5b      	lsrs	r3, r3, #25
 800be56:	b2da      	uxtb	r2, r3
 800be58:	240d      	movs	r4, #13
 800be5a:	193b      	adds	r3, r7, r4
 800be5c:	2107      	movs	r1, #7
 800be5e:	400a      	ands	r2, r1
 800be60:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	0f5b      	lsrs	r3, r3, #29
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	250c      	movs	r5, #12
 800be6e:	197b      	adds	r3, r7, r5
 800be70:	2107      	movs	r1, #7
 800be72:	400a      	ands	r2, r1
 800be74:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be76:	183b      	adds	r3, r7, r0
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	197a      	adds	r2, r7, r5
 800be7c:	7812      	ldrb	r2, [r2, #0]
 800be7e:	4914      	ldr	r1, [pc, #80]	; (800bed0 <UARTEx_SetNbDataToProcess+0xb4>)
 800be80:	5c8a      	ldrb	r2, [r1, r2]
 800be82:	435a      	muls	r2, r3
 800be84:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800be86:	197b      	adds	r3, r7, r5
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	4a12      	ldr	r2, [pc, #72]	; (800bed4 <UARTEx_SetNbDataToProcess+0xb8>)
 800be8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be8e:	0019      	movs	r1, r3
 800be90:	f7f4 f9e6 	bl	8000260 <__divsi3>
 800be94:	0003      	movs	r3, r0
 800be96:	b299      	uxth	r1, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	226a      	movs	r2, #106	; 0x6a
 800be9c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be9e:	19bb      	adds	r3, r7, r6
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	193a      	adds	r2, r7, r4
 800bea4:	7812      	ldrb	r2, [r2, #0]
 800bea6:	490a      	ldr	r1, [pc, #40]	; (800bed0 <UARTEx_SetNbDataToProcess+0xb4>)
 800bea8:	5c8a      	ldrb	r2, [r1, r2]
 800beaa:	435a      	muls	r2, r3
 800beac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800beae:	193b      	adds	r3, r7, r4
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	4a08      	ldr	r2, [pc, #32]	; (800bed4 <UARTEx_SetNbDataToProcess+0xb8>)
 800beb4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800beb6:	0019      	movs	r1, r3
 800beb8:	f7f4 f9d2 	bl	8000260 <__divsi3>
 800bebc:	0003      	movs	r3, r0
 800bebe:	b299      	uxth	r1, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2268      	movs	r2, #104	; 0x68
 800bec4:	5299      	strh	r1, [r3, r2]
}
 800bec6:	46c0      	nop			; (mov r8, r8)
 800bec8:	46bd      	mov	sp, r7
 800beca:	b005      	add	sp, #20
 800becc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bece:	46c0      	nop			; (mov r8, r8)
 800bed0:	080187a4 	.word	0x080187a4
 800bed4:	080187ac 	.word	0x080187ac

0800bed8 <AT_25_init>:
	else return 0xff;

}

void AT_25_init(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
	uint8_t buffer[1]={0};
 800bede:	1d3b      	adds	r3, r7, #4
 800bee0:	4a31      	ldr	r2, [pc, #196]	; (800bfa8 <AT_25_init+0xd0>)
 800bee2:	7812      	ldrb	r2, [r2, #0]
 800bee4:	701a      	strb	r2, [r3, #0]
	uint8_t RDY=0x01;
 800bee6:	1dfb      	adds	r3, r7, #7
 800bee8:	2201      	movs	r2, #1
 800beea:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1
 800beec:	4b2f      	ldr	r3, [pc, #188]	; (800bfac <AT_25_init+0xd4>)
 800beee:	2201      	movs	r2, #1
 800bef0:	2101      	movs	r1, #1
 800bef2:	0018      	movs	r0, r3
 800bef4:	f7fb f841 	bl	8006f7a <HAL_GPIO_WritePin>
	AT25CS_LOW;
 800bef8:	4b2c      	ldr	r3, [pc, #176]	; (800bfac <AT_25_init+0xd4>)
 800befa:	2200      	movs	r2, #0
 800befc:	2108      	movs	r1, #8
 800befe:	0018      	movs	r0, r3
 800bf00:	f7fb f83b 	bl	8006f7a <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800bf04:	1d3b      	adds	r3, r7, #4
 800bf06:	2206      	movs	r2, #6
 800bf08:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800bf0a:	23fa      	movs	r3, #250	; 0xfa
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	1d39      	adds	r1, r7, #4
 800bf10:	4827      	ldr	r0, [pc, #156]	; (800bfb0 <AT_25_init+0xd8>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	f7fb ff40 	bl	8007d98 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800bf18:	1d3b      	adds	r3, r7, #4
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800bf1e:	23fa      	movs	r3, #250	; 0xfa
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	1d39      	adds	r1, r7, #4
 800bf24:	4822      	ldr	r0, [pc, #136]	; (800bfb0 <AT_25_init+0xd8>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	f7fb ff36 	bl	8007d98 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800bf2c:	1d3b      	adds	r3, r7, #4
 800bf2e:	22f2      	movs	r2, #242	; 0xf2
 800bf30:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800bf32:	23fa      	movs	r3, #250	; 0xfa
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	1d39      	adds	r1, r7, #4
 800bf38:	481d      	ldr	r0, [pc, #116]	; (800bfb0 <AT_25_init+0xd8>)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f7fb ff2c 	bl	8007d98 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800bf40:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <AT_25_init+0xd4>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	2108      	movs	r1, #8
 800bf46:	0018      	movs	r0, r3
 800bf48:	f7fb f817 	bl	8006f7a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800bf4c:	2001      	movs	r0, #1
 800bf4e:	f7f9 f96f 	bl	8005230 <HAL_Delay>
	//wait for AT25 ready
	do
	{
		AT25CS_LOW;
 800bf52:	4b16      	ldr	r3, [pc, #88]	; (800bfac <AT_25_init+0xd4>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	2108      	movs	r1, #8
 800bf58:	0018      	movs	r0, r3
 800bf5a:	f7fb f80e 	bl	8006f7a <HAL_GPIO_WritePin>
		buffer[0]=AT25_RDSR;
 800bf5e:	1d3b      	adds	r3, r7, #4
 800bf60:	2205      	movs	r2, #5
 800bf62:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800bf64:	23fa      	movs	r3, #250	; 0xfa
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	1d39      	adds	r1, r7, #4
 800bf6a:	4811      	ldr	r0, [pc, #68]	; (800bfb0 <AT_25_init+0xd8>)
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f7fb ff13 	bl	8007d98 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1,buffer,1,1000);
 800bf72:	23fa      	movs	r3, #250	; 0xfa
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	1d39      	adds	r1, r7, #4
 800bf78:	480d      	ldr	r0, [pc, #52]	; (800bfb0 <AT_25_init+0xd8>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f7fc f864 	bl	8008048 <HAL_SPI_Receive>
		AT25CS_HIGH;
 800bf80:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <AT_25_init+0xd4>)
 800bf82:	2201      	movs	r2, #1
 800bf84:	2108      	movs	r1, #8
 800bf86:	0018      	movs	r0, r3
 800bf88:	f7fa fff7 	bl	8006f7a <HAL_GPIO_WritePin>
		RDY=buffer[0];
 800bf8c:	1dfb      	adds	r3, r7, #7
 800bf8e:	1d3a      	adds	r2, r7, #4
 800bf90:	7812      	ldrb	r2, [r2, #0]
 800bf92:	701a      	strb	r2, [r3, #0]
	}
	while((RDY&0x01) == 1);
 800bf94:	1dfb      	adds	r3, r7, #7
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	d1d9      	bne.n	800bf52 <AT_25_init+0x7a>


}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	46c0      	nop			; (mov r8, r8)
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	b002      	add	sp, #8
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	08018338 	.word	0x08018338
 800bfac:	50000800 	.word	0x50000800
 800bfb0:	200033c8 	.word	0x200033c8

0800bfb4 <SPI_Save_Word_16bits>:
 * @param  data，要存入的数据
 * @param  addr，要存入的地址
 * @retval 无
 */
void SPI_Save_Word_16bits(uint16_t data,uint8_t addr)
{
 800bfb4:	b590      	push	{r4, r7, lr}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	0002      	movs	r2, r0
 800bfbc:	1dbb      	adds	r3, r7, #6
 800bfbe:	801a      	strh	r2, [r3, #0]
 800bfc0:	1d7b      	adds	r3, r7, #5
 800bfc2:	1c0a      	adds	r2, r1, #0
 800bfc4:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[1]={0};
 800bfc6:	240c      	movs	r4, #12
 800bfc8:	193b      	adds	r3, r7, r4
 800bfca:	4a3a      	ldr	r2, [pc, #232]	; (800c0b4 <SPI_Save_Word_16bits+0x100>)
 800bfcc:	7812      	ldrb	r2, [r2, #0]
 800bfce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd off
 800bfd0:	4b39      	ldr	r3, [pc, #228]	; (800c0b8 <SPI_Save_Word_16bits+0x104>)
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f7fa ffcf 	bl	8006f7a <HAL_GPIO_WritePin>
	/*AT25 config*/
	AT25CS_LOW;
 800bfdc:	4b36      	ldr	r3, [pc, #216]	; (800c0b8 <SPI_Save_Word_16bits+0x104>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	2108      	movs	r1, #8
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	f7fa ffc9 	bl	8006f7a <HAL_GPIO_WritePin>

	buffer[0]=0x06;
 800bfe8:	193b      	adds	r3, r7, r4
 800bfea:	2206      	movs	r2, #6
 800bfec:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write enable
 800bfee:	23fa      	movs	r3, #250	; 0xfa
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	1939      	adds	r1, r7, r4
 800bff4:	4831      	ldr	r0, [pc, #196]	; (800c0bc <SPI_Save_Word_16bits+0x108>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	f7fb fece 	bl	8007d98 <HAL_SPI_Transmit>
	buffer[0]=0x01;
 800bffc:	193b      	adds	r3, r7, r4
 800bffe:	2201      	movs	r2, #1
 800c000:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd write status register
 800c002:	23fa      	movs	r3, #250	; 0xfa
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	1939      	adds	r1, r7, r4
 800c008:	482c      	ldr	r0, [pc, #176]	; (800c0bc <SPI_Save_Word_16bits+0x108>)
 800c00a:	2201      	movs	r2, #1
 800c00c:	f7fb fec4 	bl	8007d98 <HAL_SPI_Transmit>
	buffer[0]=0xf2;
 800c010:	193b      	adds	r3, r7, r4
 800c012:	22f2      	movs	r2, #242	; 0xf2
 800c014:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data write to status register(1111 0010)
 800c016:	23fa      	movs	r3, #250	; 0xfa
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	1939      	adds	r1, r7, r4
 800c01c:	4827      	ldr	r0, [pc, #156]	; (800c0bc <SPI_Save_Word_16bits+0x108>)
 800c01e:	2201      	movs	r2, #1
 800c020:	f7fb feba 	bl	8007d98 <HAL_SPI_Transmit>

	AT25CS_HIGH;
 800c024:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <SPI_Save_Word_16bits+0x104>)
 800c026:	2201      	movs	r2, #1
 800c028:	2108      	movs	r1, #8
 800c02a:	0018      	movs	r0, r3
 800c02c:	f7fa ffa5 	bl	8006f7a <HAL_GPIO_WritePin>

	/*16bits data send*/
	AT25CS_LOW;
 800c030:	4b21      	ldr	r3, [pc, #132]	; (800c0b8 <SPI_Save_Word_16bits+0x104>)
 800c032:	2200      	movs	r2, #0
 800c034:	2108      	movs	r1, #8
 800c036:	0018      	movs	r0, r3
 800c038:	f7fa ff9f 	bl	8006f7a <HAL_GPIO_WritePin>
	buffer[0]=AT25_Write;
 800c03c:	193b      	adds	r3, r7, r4
 800c03e:	2202      	movs	r2, #2
 800c040:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd:write status register
 800c042:	23fa      	movs	r3, #250	; 0xfa
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	1939      	adds	r1, r7, r4
 800c048:	481c      	ldr	r0, [pc, #112]	; (800c0bc <SPI_Save_Word_16bits+0x108>)
 800c04a:	2201      	movs	r2, #1
 800c04c:	f7fb fea4 	bl	8007d98 <HAL_SPI_Transmit>

	buffer[0]=addr;
 800c050:	193b      	adds	r3, r7, r4
 800c052:	1d7a      	adds	r2, r7, #5
 800c054:	7812      	ldrb	r2, [r2, #0]
 800c056:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//adress
 800c058:	23fa      	movs	r3, #250	; 0xfa
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	1939      	adds	r1, r7, r4
 800c05e:	4817      	ldr	r0, [pc, #92]	; (800c0bc <SPI_Save_Word_16bits+0x108>)
 800c060:	2201      	movs	r2, #1
 800c062:	f7fb fe99 	bl	8007d98 <HAL_SPI_Transmit>

	buffer[0]=(data>>8);
 800c066:	1dbb      	adds	r3, r7, #6
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	0a1b      	lsrs	r3, r3, #8
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	193b      	adds	r3, r7, r4
 800c072:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data high
 800c074:	23fa      	movs	r3, #250	; 0xfa
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	1939      	adds	r1, r7, r4
 800c07a:	4810      	ldr	r0, [pc, #64]	; (800c0bc <SPI_Save_Word_16bits+0x108>)
 800c07c:	2201      	movs	r2, #1
 800c07e:	f7fb fe8b 	bl	8007d98 <HAL_SPI_Transmit>

	buffer[0]=data;
 800c082:	1dbb      	adds	r3, r7, #6
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	b2da      	uxtb	r2, r3
 800c088:	193b      	adds	r3, r7, r4
 800c08a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//data low
 800c08c:	23fa      	movs	r3, #250	; 0xfa
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	1939      	adds	r1, r7, r4
 800c092:	480a      	ldr	r0, [pc, #40]	; (800c0bc <SPI_Save_Word_16bits+0x108>)
 800c094:	2201      	movs	r2, #1
 800c096:	f7fb fe7f 	bl	8007d98 <HAL_SPI_Transmit>
	AT25CS_HIGH;
 800c09a:	4b07      	ldr	r3, [pc, #28]	; (800c0b8 <SPI_Save_Word_16bits+0x104>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	2108      	movs	r1, #8
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	f7fa ff6a 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	f7f9 f8c2 	bl	8005230 <HAL_Delay>
}
 800c0ac:	46c0      	nop			; (mov r8, r8)
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	b005      	add	sp, #20
 800c0b2:	bd90      	pop	{r4, r7, pc}
 800c0b4:	08018338 	.word	0x08018338
 800c0b8:	50000800 	.word	0x50000800
 800c0bc:	200033c8 	.word	0x200033c8

0800c0c0 <SPI_Load_Word_16bits>:
 * @brief  从at25取出一个长度16bits的数据
 * @param  addr，要取数据的地址
 * @retval 无
 */
uint16_t SPI_Load_Word_16bits(uint8_t addr)
{
 800c0c0:	b5b0      	push	{r4, r5, r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	0002      	movs	r2, r0
 800c0c8:	1dfb      	adds	r3, r7, #7
 800c0ca:	701a      	strb	r2, [r3, #0]

	uint16_t tmp=0x00;
 800c0cc:	250e      	movs	r5, #14
 800c0ce:	197b      	adds	r3, r7, r5
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	801a      	strh	r2, [r3, #0]

	uint8_t buffer[1];
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);//lcd cs 1 off
 800c0d4:	4b2e      	ldr	r3, [pc, #184]	; (800c190 <SPI_Load_Word_16bits+0xd0>)
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	2101      	movs	r1, #1
 800c0da:	0018      	movs	r0, r3
 800c0dc:	f7fa ff4d 	bl	8006f7a <HAL_GPIO_WritePin>

	/*load word 8bits*/
	AT25CS_LOW;
 800c0e0:	4b2b      	ldr	r3, [pc, #172]	; (800c190 <SPI_Load_Word_16bits+0xd0>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2108      	movs	r1, #8
 800c0e6:	0018      	movs	r0, r3
 800c0e8:	f7fa ff47 	bl	8006f7a <HAL_GPIO_WritePin>
	buffer[0]=AT25_Read;
 800c0ec:	200c      	movs	r0, #12
 800c0ee:	183b      	adds	r3, r7, r0
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//cmd
 800c0f4:	23fa      	movs	r3, #250	; 0xfa
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	0004      	movs	r4, r0
 800c0fa:	1839      	adds	r1, r7, r0
 800c0fc:	4825      	ldr	r0, [pc, #148]	; (800c194 <SPI_Load_Word_16bits+0xd4>)
 800c0fe:	2201      	movs	r2, #1
 800c100:	f7fb fe4a 	bl	8007d98 <HAL_SPI_Transmit>
	buffer[0]=addr;
 800c104:	0020      	movs	r0, r4
 800c106:	183b      	adds	r3, r7, r0
 800c108:	1dfa      	adds	r2, r7, #7
 800c10a:	7812      	ldrb	r2, [r2, #0]
 800c10c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buffer,1,1000);//address
 800c10e:	23fa      	movs	r3, #250	; 0xfa
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	0004      	movs	r4, r0
 800c114:	1839      	adds	r1, r7, r0
 800c116:	481f      	ldr	r0, [pc, #124]	; (800c194 <SPI_Load_Word_16bits+0xd4>)
 800c118:	2201      	movs	r2, #1
 800c11a:	f7fb fe3d 	bl	8007d98 <HAL_SPI_Transmit>
	buffer[0]=0x00;//clear the buffer
 800c11e:	0020      	movs	r0, r4
 800c120:	183b      	adds	r3, r7, r0
 800c122:	2200      	movs	r2, #0
 800c124:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c126:	23fa      	movs	r3, #250	; 0xfa
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	0004      	movs	r4, r0
 800c12c:	1839      	adds	r1, r7, r0
 800c12e:	4819      	ldr	r0, [pc, #100]	; (800c194 <SPI_Load_Word_16bits+0xd4>)
 800c130:	2201      	movs	r2, #1
 800c132:	f7fb ff89 	bl	8008048 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c136:	0020      	movs	r0, r4
 800c138:	183b      	adds	r3, r7, r0
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	b299      	uxth	r1, r3
 800c13e:	197b      	adds	r3, r7, r5
 800c140:	197a      	adds	r2, r7, r5
 800c142:	8812      	ldrh	r2, [r2, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	801a      	strh	r2, [r3, #0]
	tmp<<=8;
 800c148:	197b      	adds	r3, r7, r5
 800c14a:	197a      	adds	r2, r7, r5
 800c14c:	8812      	ldrh	r2, [r2, #0]
 800c14e:	0212      	lsls	r2, r2, #8
 800c150:	801a      	strh	r2, [r3, #0]
	buffer[0]=0x00;//clear the buffer
 800c152:	183b      	adds	r3, r7, r0
 800c154:	2200      	movs	r2, #0
 800c156:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1,buffer,1,1000);//get data
 800c158:	23fa      	movs	r3, #250	; 0xfa
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	0004      	movs	r4, r0
 800c15e:	1839      	adds	r1, r7, r0
 800c160:	480c      	ldr	r0, [pc, #48]	; (800c194 <SPI_Load_Word_16bits+0xd4>)
 800c162:	2201      	movs	r2, #1
 800c164:	f7fb ff70 	bl	8008048 <HAL_SPI_Receive>
	tmp|=buffer[0];
 800c168:	193b      	adds	r3, r7, r4
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	b299      	uxth	r1, r3
 800c16e:	197b      	adds	r3, r7, r5
 800c170:	197a      	adds	r2, r7, r5
 800c172:	8812      	ldrh	r2, [r2, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	801a      	strh	r2, [r3, #0]
	AT25CS_HIGH;
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <SPI_Load_Word_16bits+0xd0>)
 800c17a:	2201      	movs	r2, #1
 800c17c:	2108      	movs	r1, #8
 800c17e:	0018      	movs	r0, r3
 800c180:	f7fa fefb 	bl	8006f7a <HAL_GPIO_WritePin>

	return tmp;
 800c184:	197b      	adds	r3, r7, r5
 800c186:	881b      	ldrh	r3, [r3, #0]
}
 800c188:	0018      	movs	r0, r3
 800c18a:	46bd      	mov	sp, r7
 800c18c:	b004      	add	sp, #16
 800c18e:	bdb0      	pop	{r4, r5, r7, pc}
 800c190:	50000800 	.word	0x50000800
 800c194:	200033c8 	.word	0x200033c8

0800c198 <SPI_AT25_Write>:
 * @param  WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度，必须小于等于SPI_FLASH_PerWritePageSize
 * @retval 无
 */
void SPI_AT25_Write(uint16_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	0008      	movs	r0, r1
 800c1a2:	0011      	movs	r1, r2
 800c1a4:	1cfb      	adds	r3, r7, #3
 800c1a6:	1c02      	adds	r2, r0, #0
 800c1a8:	701a      	strb	r2, [r3, #0]
 800c1aa:	003b      	movs	r3, r7
 800c1ac:	1c0a      	adds	r2, r1, #0
 800c1ae:	801a      	strh	r2, [r3, #0]
	NumByteToWrite = NumByteToWrite/2;
 800c1b0:	003b      	movs	r3, r7
 800c1b2:	003a      	movs	r2, r7
 800c1b4:	8812      	ldrh	r2, [r2, #0]
 800c1b6:	0852      	lsrs	r2, r2, #1
 800c1b8:	801a      	strh	r2, [r3, #0]

	 while (NumByteToWrite > 0)
 800c1ba:	e013      	b.n	800c1e4 <SPI_AT25_Write+0x4c>
	 {
			SPI_Save_Word_16bits(*pBuffer++, WriteAddr);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	1c9a      	adds	r2, r3, #2
 800c1c0:	607a      	str	r2, [r7, #4]
 800c1c2:	881a      	ldrh	r2, [r3, #0]
 800c1c4:	1cfb      	adds	r3, r7, #3
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	0019      	movs	r1, r3
 800c1ca:	0010      	movs	r0, r2
 800c1cc:	f7ff fef2 	bl	800bfb4 <SPI_Save_Word_16bits>
			NumByteToWrite --;
 800c1d0:	003b      	movs	r3, r7
 800c1d2:	881a      	ldrh	r2, [r3, #0]
 800c1d4:	003b      	movs	r3, r7
 800c1d6:	3a01      	subs	r2, #1
 800c1d8:	801a      	strh	r2, [r3, #0]
			WriteAddr+=2;
 800c1da:	1cfb      	adds	r3, r7, #3
 800c1dc:	1cfa      	adds	r2, r7, #3
 800c1de:	7812      	ldrb	r2, [r2, #0]
 800c1e0:	3202      	adds	r2, #2
 800c1e2:	701a      	strb	r2, [r3, #0]
	 while (NumByteToWrite > 0)
 800c1e4:	003b      	movs	r3, r7
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1e7      	bne.n	800c1bc <SPI_AT25_Write+0x24>
	 }
}
 800c1ec:	46c0      	nop			; (mov r8, r8)
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	b002      	add	sp, #8
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <SPI_AT25_Read>:
 * @param   ReadAddr，读取地址
 * @param   NumByteToRead，读取数据长度
 * @retval  无
 */
void SPI_AT25_Read(uint16_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800c1f6:	b590      	push	{r4, r7, lr}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	0008      	movs	r0, r1
 800c200:	0011      	movs	r1, r2
 800c202:	1cfb      	adds	r3, r7, #3
 800c204:	1c02      	adds	r2, r0, #0
 800c206:	701a      	strb	r2, [r3, #0]
 800c208:	003b      	movs	r3, r7
 800c20a:	1c0a      	adds	r2, r1, #0
 800c20c:	801a      	strh	r2, [r3, #0]
	NumByteToRead = NumByteToRead/2;
 800c20e:	003b      	movs	r3, r7
 800c210:	003a      	movs	r2, r7
 800c212:	8812      	ldrh	r2, [r2, #0]
 800c214:	0852      	lsrs	r2, r2, #1
 800c216:	801a      	strh	r2, [r3, #0]

	/* 读取数据 */
 while (NumByteToRead > 0) /* while there is data to be read */
 800c218:	e013      	b.n	800c242 <SPI_AT25_Read+0x4c>
 {
		*pBuffer++ = SPI_Load_Word_16bits(ReadAddr);
 800c21a:	687c      	ldr	r4, [r7, #4]
 800c21c:	1ca3      	adds	r3, r4, #2
 800c21e:	607b      	str	r3, [r7, #4]
 800c220:	1cfb      	adds	r3, r7, #3
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	0018      	movs	r0, r3
 800c226:	f7ff ff4b 	bl	800c0c0 <SPI_Load_Word_16bits>
 800c22a:	0003      	movs	r3, r0
 800c22c:	8023      	strh	r3, [r4, #0]
		NumByteToRead--;
 800c22e:	003b      	movs	r3, r7
 800c230:	881a      	ldrh	r2, [r3, #0]
 800c232:	003b      	movs	r3, r7
 800c234:	3a01      	subs	r2, #1
 800c236:	801a      	strh	r2, [r3, #0]
		ReadAddr = ReadAddr + 2;
 800c238:	1cfb      	adds	r3, r7, #3
 800c23a:	1cfa      	adds	r2, r7, #3
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	3202      	adds	r2, #2
 800c240:	701a      	strb	r2, [r3, #0]
 while (NumByteToRead > 0) /* while there is data to be read */
 800c242:	003b      	movs	r3, r7
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e7      	bne.n	800c21a <SPI_AT25_Read+0x24>
 }


}
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	46c0      	nop			; (mov r8, r8)
 800c24e:	46bd      	mov	sp, r7
 800c250:	b003      	add	sp, #12
 800c252:	bd90      	pop	{r4, r7, pc}

0800c254 <AT25_Save_VISet>:
 * @brief  对AT25写入电流电压设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_VISet(void)
{
 800c254:	b5b0      	push	{r4, r5, r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
	uint16_t temp[3];
	float Power=(Set_Voltage/100.0)*(Set_Current/100.0);
 800c25a:	4b1e      	ldr	r3, [pc, #120]	; (800c2d4 <AT25_Save_VISet+0x80>)
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	0018      	movs	r0, r3
 800c260:	f7f6 fdd0 	bl	8002e04 <__aeabi_i2d>
 800c264:	2200      	movs	r2, #0
 800c266:	4b1c      	ldr	r3, [pc, #112]	; (800c2d8 <AT25_Save_VISet+0x84>)
 800c268:	f7f5 fb78 	bl	800195c <__aeabi_ddiv>
 800c26c:	0002      	movs	r2, r0
 800c26e:	000b      	movs	r3, r1
 800c270:	0014      	movs	r4, r2
 800c272:	001d      	movs	r5, r3
 800c274:	4b19      	ldr	r3, [pc, #100]	; (800c2dc <AT25_Save_VISet+0x88>)
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	0018      	movs	r0, r3
 800c27a:	f7f6 fdc3 	bl	8002e04 <__aeabi_i2d>
 800c27e:	2200      	movs	r2, #0
 800c280:	4b15      	ldr	r3, [pc, #84]	; (800c2d8 <AT25_Save_VISet+0x84>)
 800c282:	f7f5 fb6b 	bl	800195c <__aeabi_ddiv>
 800c286:	0002      	movs	r2, r0
 800c288:	000b      	movs	r3, r1
 800c28a:	0020      	movs	r0, r4
 800c28c:	0029      	movs	r1, r5
 800c28e:	f7f5 ff67 	bl	8002160 <__aeabi_dmul>
 800c292:	0002      	movs	r2, r0
 800c294:	000b      	movs	r3, r1
 800c296:	0010      	movs	r0, r2
 800c298:	0019      	movs	r1, r3
 800c29a:	f7f6 fe51 	bl	8002f40 <__aeabi_d2f>
 800c29e:	1c03      	adds	r3, r0, #0
 800c2a0:	60fb      	str	r3, [r7, #12]
	//将设定值强制类型转换成uint16_t
	temp[0] = (uint16_t) Set_Voltage;
 800c2a2:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <AT25_Save_VISet+0x80>)
 800c2a4:	881a      	ldrh	r2, [r3, #0]
 800c2a6:	1d3b      	adds	r3, r7, #4
 800c2a8:	801a      	strh	r2, [r3, #0]
	temp[1] = (uint16_t) Set_Current;
 800c2aa:	4b0c      	ldr	r3, [pc, #48]	; (800c2dc <AT25_Save_VISet+0x88>)
 800c2ac:	881a      	ldrh	r2, [r3, #0]
 800c2ae:	1d3b      	adds	r3, r7, #4
 800c2b0:	805a      	strh	r2, [r3, #2]
	temp[2] = (uint16_t) Power;
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7f4 f938 	bl	8000528 <__aeabi_f2uiz>
 800c2b8:	0003      	movs	r3, r0
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	1d3b      	adds	r3, r7, #4
 800c2be:	809a      	strh	r2, [r3, #4]

	SPI_AT25_Write(temp, 0, sizeof(temp));
 800c2c0:	1d3b      	adds	r3, r7, #4
 800c2c2:	2206      	movs	r2, #6
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	0018      	movs	r0, r3
 800c2c8:	f7ff ff66 	bl	800c198 <SPI_AT25_Write>
}
 800c2cc:	46c0      	nop			; (mov r8, r8)
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	b004      	add	sp, #16
 800c2d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c2d4:	20002fda 	.word	0x20002fda
 800c2d8:	40590000 	.word	0x40590000
 800c2dc:	20002fdc 	.word	0x20002fdc

0800c2e0 <AT25_Save_Recall_Save_VI>:
 * @brief  对AT25写入设定的电流电压值
 * @param	Recall_Save的编号
 * @retval 无
 */
void AT25_Save_Recall_Save_VI(uint8_t Number)
{
 800c2e0:	b590      	push	{r4, r7, lr}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	0002      	movs	r2, r0
 800c2e8:	1dfb      	adds	r3, r7, #7
 800c2ea:	701a      	strb	r2, [r3, #0]
	uint16_t temp;
	//将设定值强制类型转换成uint16_t(保留两位小数)
	temp = (uint16_t) (Recall_Save_Voltage[Number] * 100.0);//保留两位小数
 800c2ec:	1dfb      	adds	r3, r7, #7
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	4b2d      	ldr	r3, [pc, #180]	; (800c3a8 <AT25_Save_Recall_Save_VI+0xc8>)
 800c2f2:	0092      	lsls	r2, r2, #2
 800c2f4:	58d3      	ldr	r3, [r2, r3]
 800c2f6:	1c18      	adds	r0, r3, #0
 800c2f8:	f7f6 fdda 	bl	8002eb0 <__aeabi_f2d>
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4b2b      	ldr	r3, [pc, #172]	; (800c3ac <AT25_Save_Recall_Save_VI+0xcc>)
 800c300:	f7f5 ff2e 	bl	8002160 <__aeabi_dmul>
 800c304:	0002      	movs	r2, r0
 800c306:	000b      	movs	r3, r1
 800c308:	0010      	movs	r0, r2
 800c30a:	0019      	movs	r1, r3
 800c30c:	f7f4 f924 	bl	8000558 <__aeabi_d2uiz>
 800c310:	0003      	movs	r3, r0
 800c312:	b29a      	uxth	r2, r3
 800c314:	240e      	movs	r4, #14
 800c316:	193b      	adds	r3, r7, r4
 800c318:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 6+2*Number,sizeof(temp));//6 7、8 9...24、25
 800c31a:	1dfb      	adds	r3, r7, #7
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	3303      	adds	r3, #3
 800c320:	b2db      	uxtb	r3, r3
 800c322:	18db      	adds	r3, r3, r3
 800c324:	b2d9      	uxtb	r1, r3
 800c326:	193b      	adds	r3, r7, r4
 800c328:	2202      	movs	r2, #2
 800c32a:	0018      	movs	r0, r3
 800c32c:	f7ff ff34 	bl	800c198 <SPI_AT25_Write>

	temp = (uint16_t) (Recall_Save_Current[Number] * 100.0);
 800c330:	1dfb      	adds	r3, r7, #7
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	4b1e      	ldr	r3, [pc, #120]	; (800c3b0 <AT25_Save_Recall_Save_VI+0xd0>)
 800c336:	0092      	lsls	r2, r2, #2
 800c338:	58d3      	ldr	r3, [r2, r3]
 800c33a:	1c18      	adds	r0, r3, #0
 800c33c:	f7f6 fdb8 	bl	8002eb0 <__aeabi_f2d>
 800c340:	2200      	movs	r2, #0
 800c342:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <AT25_Save_Recall_Save_VI+0xcc>)
 800c344:	f7f5 ff0c 	bl	8002160 <__aeabi_dmul>
 800c348:	0002      	movs	r2, r0
 800c34a:	000b      	movs	r3, r1
 800c34c:	0010      	movs	r0, r2
 800c34e:	0019      	movs	r1, r3
 800c350:	f7f4 f902 	bl	8000558 <__aeabi_d2uiz>
 800c354:	0003      	movs	r3, r0
 800c356:	b29a      	uxth	r2, r3
 800c358:	193b      	adds	r3, r7, r4
 800c35a:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 26+2*Number,sizeof(temp));//26 27、28 29...44、45
 800c35c:	1dfb      	adds	r3, r7, #7
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	330d      	adds	r3, #13
 800c362:	b2db      	uxtb	r3, r3
 800c364:	18db      	adds	r3, r3, r3
 800c366:	b2d9      	uxtb	r1, r3
 800c368:	193b      	adds	r3, r7, r4
 800c36a:	2202      	movs	r2, #2
 800c36c:	0018      	movs	r0, r3
 800c36e:	f7ff ff13 	bl	800c198 <SPI_AT25_Write>

	temp=Recall_Save_Power[Number];//W
 800c372:	1dfb      	adds	r3, r7, #7
 800c374:	781a      	ldrb	r2, [r3, #0]
 800c376:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <AT25_Save_Recall_Save_VI+0xd4>)
 800c378:	0092      	lsls	r2, r2, #2
 800c37a:	58d3      	ldr	r3, [r2, r3]
 800c37c:	1c18      	adds	r0, r3, #0
 800c37e:	f7f4 f8d3 	bl	8000528 <__aeabi_f2uiz>
 800c382:	0003      	movs	r3, r0
 800c384:	b29a      	uxth	r2, r3
 800c386:	193b      	adds	r3, r7, r4
 800c388:	801a      	strh	r2, [r3, #0]
	SPI_AT25_Write(&temp, 46+2*Number,sizeof(temp));//46、47...64、65
 800c38a:	1dfb      	adds	r3, r7, #7
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	3317      	adds	r3, #23
 800c390:	b2db      	uxtb	r3, r3
 800c392:	18db      	adds	r3, r3, r3
 800c394:	b2d9      	uxtb	r1, r3
 800c396:	193b      	adds	r3, r7, r4
 800c398:	2202      	movs	r2, #2
 800c39a:	0018      	movs	r0, r3
 800c39c:	f7ff fefc 	bl	800c198 <SPI_AT25_Write>

}
 800c3a0:	46c0      	nop			; (mov r8, r8)
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	b005      	add	sp, #20
 800c3a6:	bd90      	pop	{r4, r7, pc}
 800c3a8:	20003a10 	.word	0x20003a10
 800c3ac:	40590000 	.word	0x40590000
 800c3b0:	20003a38 	.word	0x20003a38
 800c3b4:	20003a60 	.word	0x20003a60

0800c3b8 <AT25_Save_Recall_Recall_VI>:



uint16_t AT25_Save_Recall_Recall_VI(uint8_t Number)
{
 800c3b8:	b590      	push	{r4, r7, lr}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	0002      	movs	r2, r0
 800c3c0:	1dfb      	adds	r3, r7, #7
 800c3c2:	701a      	strb	r2, [r3, #0]

	uint16_t temp;
	if(xyz.coordinates3==1)//V
 800c3c4:	4b1b      	ldr	r3, [pc, #108]	; (800c434 <AT25_Save_Recall_Recall_VI+0x7c>)
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d10e      	bne.n	800c3ea <AT25_Save_Recall_Recall_VI+0x32>
	{
		SPI_AT25_Read(&temp,6+2*Number,2);
 800c3cc:	1dfb      	adds	r3, r7, #7
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	3303      	adds	r3, #3
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	18db      	adds	r3, r3, r3
 800c3d6:	b2d9      	uxtb	r1, r3
 800c3d8:	240e      	movs	r4, #14
 800c3da:	193b      	adds	r3, r7, r4
 800c3dc:	2202      	movs	r2, #2
 800c3de:	0018      	movs	r0, r3
 800c3e0:	f7ff ff09 	bl	800c1f6 <SPI_AT25_Read>

		return temp;
 800c3e4:	193b      	adds	r3, r7, r4
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	e020      	b.n	800c42c <AT25_Save_Recall_Recall_VI+0x74>
	}
	else if(xyz.coordinates3==2)//I
 800c3ea:	4b12      	ldr	r3, [pc, #72]	; (800c434 <AT25_Save_Recall_Recall_VI+0x7c>)
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d10e      	bne.n	800c410 <AT25_Save_Recall_Recall_VI+0x58>
	{
		SPI_AT25_Read(&temp,26+2*Number,2);
 800c3f2:	1dfb      	adds	r3, r7, #7
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	330d      	adds	r3, #13
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	18db      	adds	r3, r3, r3
 800c3fc:	b2d9      	uxtb	r1, r3
 800c3fe:	240e      	movs	r4, #14
 800c400:	193b      	adds	r3, r7, r4
 800c402:	2202      	movs	r2, #2
 800c404:	0018      	movs	r0, r3
 800c406:	f7ff fef6 	bl	800c1f6 <SPI_AT25_Read>

		return temp;
 800c40a:	193b      	adds	r3, r7, r4
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	e00d      	b.n	800c42c <AT25_Save_Recall_Recall_VI+0x74>
	}

	SPI_AT25_Read(&temp,46+2*Number,2);//P
 800c410:	1dfb      	adds	r3, r7, #7
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	3317      	adds	r3, #23
 800c416:	b2db      	uxtb	r3, r3
 800c418:	18db      	adds	r3, r3, r3
 800c41a:	b2d9      	uxtb	r1, r3
 800c41c:	240e      	movs	r4, #14
 800c41e:	193b      	adds	r3, r7, r4
 800c420:	2202      	movs	r2, #2
 800c422:	0018      	movs	r0, r3
 800c424:	f7ff fee7 	bl	800c1f6 <SPI_AT25_Read>
	return temp;
 800c428:	193b      	adds	r3, r7, r4
 800c42a:	881b      	ldrh	r3, [r3, #0]


}
 800c42c:	0018      	movs	r0, r3
 800c42e:	46bd      	mov	sp, r7
 800c430:	b005      	add	sp, #20
 800c432:	bd90      	pop	{r4, r7, pc}
 800c434:	200039f8 	.word	0x200039f8

0800c438 <AT25_Save_Delay>:
 * @brief  对AT25写入延时时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Delay(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
	uint8_t temp[4];
	uint8_t temp_1[2];

	temp[0] = Delay_h;
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <AT25_Save_Delay+0x54>)
 800c440:	781a      	ldrb	r2, [r3, #0]
 800c442:	1d3b      	adds	r3, r7, #4
 800c444:	701a      	strb	r2, [r3, #0]
	temp[1] = Delay_m;
 800c446:	4b12      	ldr	r3, [pc, #72]	; (800c490 <AT25_Save_Delay+0x58>)
 800c448:	781a      	ldrb	r2, [r3, #0]
 800c44a:	1d3b      	adds	r3, r7, #4
 800c44c:	705a      	strb	r2, [r3, #1]
	temp[2] = Delay_s;
 800c44e:	4b11      	ldr	r3, [pc, #68]	; (800c494 <AT25_Save_Delay+0x5c>)
 800c450:	781a      	ldrb	r2, [r3, #0]
 800c452:	1d3b      	adds	r3, r7, #4
 800c454:	709a      	strb	r2, [r3, #2]
	temp[3] = 0x00;
 800c456:	1d3b      	adds	r3, r7, #4
 800c458:	2200      	movs	r2, #0
 800c45a:	70da      	strb	r2, [r3, #3]

	temp_1[0] = Delay_Function_On_Off;
 800c45c:	4b0e      	ldr	r3, [pc, #56]	; (800c498 <AT25_Save_Delay+0x60>)
 800c45e:	781a      	ldrb	r2, [r3, #0]
 800c460:	003b      	movs	r3, r7
 800c462:	701a      	strb	r2, [r3, #0]
	temp_1[1] = 0x00;
 800c464:	003b      	movs	r3, r7
 800c466:	2200      	movs	r2, #0
 800c468:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write((uint16_t*)temp, 78, sizeof(temp));
 800c46a:	1d3b      	adds	r3, r7, #4
 800c46c:	2204      	movs	r2, #4
 800c46e:	214e      	movs	r1, #78	; 0x4e
 800c470:	0018      	movs	r0, r3
 800c472:	f7ff fe91 	bl	800c198 <SPI_AT25_Write>
	SPI_AT25_Write((uint16_t*)temp_1, 108, sizeof(temp_1));
 800c476:	003b      	movs	r3, r7
 800c478:	2202      	movs	r2, #2
 800c47a:	216c      	movs	r1, #108	; 0x6c
 800c47c:	0018      	movs	r0, r3
 800c47e:	f7ff fe8b 	bl	800c198 <SPI_AT25_Write>
}
 800c482:	46c0      	nop			; (mov r8, r8)
 800c484:	46bd      	mov	sp, r7
 800c486:	b002      	add	sp, #8
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	20003994 	.word	0x20003994
 800c490:	20003995 	.word	0x20003995
 800c494:	20003996 	.word	0x20003996
 800c498:	20002fe8 	.word	0x20002fe8

0800c49c <AT25_Save_Cycle>:
 * @brief  对AT25写入循环时间设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_Cycle(void)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
	uint16_t temp[4];

	uint8_t temp_1[2];

	temp[0] = Cycle_On_s;
 800c4a2:	4b14      	ldr	r3, [pc, #80]	; (800c4f4 <AT25_Save_Cycle+0x58>)
 800c4a4:	881a      	ldrh	r2, [r3, #0]
 800c4a6:	2108      	movs	r1, #8
 800c4a8:	187b      	adds	r3, r7, r1
 800c4aa:	801a      	strh	r2, [r3, #0]
	temp[1] = Cycle_On_ms;
 800c4ac:	4b12      	ldr	r3, [pc, #72]	; (800c4f8 <AT25_Save_Cycle+0x5c>)
 800c4ae:	881a      	ldrh	r2, [r3, #0]
 800c4b0:	187b      	adds	r3, r7, r1
 800c4b2:	805a      	strh	r2, [r3, #2]
	temp[2] = Cycle_Close_s;
 800c4b4:	4b11      	ldr	r3, [pc, #68]	; (800c4fc <AT25_Save_Cycle+0x60>)
 800c4b6:	881a      	ldrh	r2, [r3, #0]
 800c4b8:	187b      	adds	r3, r7, r1
 800c4ba:	809a      	strh	r2, [r3, #4]
	temp[3] = Cycle_Close_ms;
 800c4bc:	4b10      	ldr	r3, [pc, #64]	; (800c500 <AT25_Save_Cycle+0x64>)
 800c4be:	881a      	ldrh	r2, [r3, #0]
 800c4c0:	187b      	adds	r3, r7, r1
 800c4c2:	80da      	strh	r2, [r3, #6]

	temp_1[0] = Cycle_Function_On_Off;
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <AT25_Save_Cycle+0x68>)
 800c4c6:	781a      	ldrb	r2, [r3, #0]
 800c4c8:	1d3b      	adds	r3, r7, #4
 800c4ca:	701a      	strb	r2, [r3, #0]
	temp_1[1] = 0x00;
 800c4cc:	1d3b      	adds	r3, r7, #4
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c4d2:	187b      	adds	r3, r7, r1
 800c4d4:	2208      	movs	r2, #8
 800c4d6:	2152      	movs	r1, #82	; 0x52
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f7ff fe5d 	bl	800c198 <SPI_AT25_Write>
	SPI_AT25_Write((uint16_t*)temp_1, 110, sizeof(temp_1));
 800c4de:	1d3b      	adds	r3, r7, #4
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	216e      	movs	r1, #110	; 0x6e
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	f7ff fe57 	bl	800c198 <SPI_AT25_Write>
}
 800c4ea:	46c0      	nop			; (mov r8, r8)
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	b004      	add	sp, #16
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	46c0      	nop			; (mov r8, r8)
 800c4f4:	20003990 	.word	0x20003990
 800c4f8:	20002fd6 	.word	0x20002fd6
 800c4fc:	20003992 	.word	0x20003992
 800c500:	20002fd8 	.word	0x20002fd8
 800c504:	200039e0 	.word	0x200039e0

0800c508 <AT25_Save_CC_CV_CP>:
 * @brief  对AT25写入CC_CV_CP设定值
 * @param	无
 * @retval 无
 */
void AT25_Save_CC_CV_CP(void)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
	uint8_t temp[2];

	temp[0] = CV_CC_CP;
 800c50e:	4b08      	ldr	r3, [pc, #32]	; (800c530 <AT25_Save_CC_CV_CP+0x28>)
 800c510:	781a      	ldrb	r2, [r3, #0]
 800c512:	1d3b      	adds	r3, r7, #4
 800c514:	701a      	strb	r2, [r3, #0]
	temp[1] = 0x00;
 800c516:	1d3b      	adds	r3, r7, #4
 800c518:	2200      	movs	r2, #0
 800c51a:	705a      	strb	r2, [r3, #1]

	SPI_AT25_Write((uint16_t*)temp, 80, sizeof(temp));
 800c51c:	1d3b      	adds	r3, r7, #4
 800c51e:	2202      	movs	r2, #2
 800c520:	2150      	movs	r1, #80	; 0x50
 800c522:	0018      	movs	r0, r3
 800c524:	f7ff fe38 	bl	800c198 <SPI_AT25_Write>
}
 800c528:	46c0      	nop			; (mov r8, r8)
 800c52a:	46bd      	mov	sp, r7
 800c52c:	b002      	add	sp, #8
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	2000398a 	.word	0x2000398a

0800c534 <AT25_Save_VI_Rate>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_VI_Rate(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
	uint16_t temp[2];

	temp[0] = Set_V_Slope;
 800c53a:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <AT25_Save_VI_Rate+0x30>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	b29a      	uxth	r2, r3
 800c540:	1d3b      	adds	r3, r7, #4
 800c542:	801a      	strh	r2, [r3, #0]
	temp[1] = Set_I_Slope;
 800c544:	4b08      	ldr	r3, [pc, #32]	; (800c568 <AT25_Save_VI_Rate+0x34>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	b29a      	uxth	r2, r3
 800c54a:	1d3b      	adds	r3, r7, #4
 800c54c:	805a      	strh	r2, [r3, #2]

	SPI_AT25_Write(temp, 82, sizeof(temp));
 800c54e:	1d3b      	adds	r3, r7, #4
 800c550:	2204      	movs	r2, #4
 800c552:	2152      	movs	r1, #82	; 0x52
 800c554:	0018      	movs	r0, r3
 800c556:	f7ff fe1f 	bl	800c198 <SPI_AT25_Write>

}
 800c55a:	46c0      	nop			; (mov r8, r8)
 800c55c:	46bd      	mov	sp, r7
 800c55e:	b002      	add	sp, #8
 800c560:	bd80      	pop	{r7, pc}
 800c562:	46c0      	nop			; (mov r8, r8)
 800c564:	20003997 	.word	0x20003997
 800c568:	20003998 	.word	0x20003998

0800c56c <AT25_Save_AD_Param>:
 * @brief  对AT25写入电压电流变化速率
 * @param	无
 * @retval 无
 */
void AT25_Save_AD_Param(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
	uint16_t temp[4];

	temp[0] = ADC_Gain_V*1000000;
 800c572:	4b24      	ldr	r3, [pc, #144]	; (800c604 <AT25_Save_AD_Param+0x98>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4924      	ldr	r1, [pc, #144]	; (800c608 <AT25_Save_AD_Param+0x9c>)
 800c578:	1c18      	adds	r0, r3, #0
 800c57a:	f7f4 fb71 	bl	8000c60 <__aeabi_fmul>
 800c57e:	1c03      	adds	r3, r0, #0
 800c580:	1c18      	adds	r0, r3, #0
 800c582:	f7f3 ffd1 	bl	8000528 <__aeabi_f2uiz>
 800c586:	0003      	movs	r3, r0
 800c588:	b29a      	uxth	r2, r3
 800c58a:	003b      	movs	r3, r7
 800c58c:	801a      	strh	r2, [r3, #0]
	temp[1] = ADC_Gain_I*1000000;
 800c58e:	4b1f      	ldr	r3, [pc, #124]	; (800c60c <AT25_Save_AD_Param+0xa0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	491d      	ldr	r1, [pc, #116]	; (800c608 <AT25_Save_AD_Param+0x9c>)
 800c594:	1c18      	adds	r0, r3, #0
 800c596:	f7f4 fb63 	bl	8000c60 <__aeabi_fmul>
 800c59a:	1c03      	adds	r3, r0, #0
 800c59c:	1c18      	adds	r0, r3, #0
 800c59e:	f7f3 ffc3 	bl	8000528 <__aeabi_f2uiz>
 800c5a2:	0003      	movs	r3, r0
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	003b      	movs	r3, r7
 800c5a8:	805a      	strh	r2, [r3, #2]
	/*test*/
	temp[2] = (-1*Eror_ADC_V)*10000;
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <AT25_Save_AD_Param+0xa4>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2280      	movs	r2, #128	; 0x80
 800c5b0:	0612      	lsls	r2, r2, #24
 800c5b2:	4053      	eors	r3, r2
 800c5b4:	4917      	ldr	r1, [pc, #92]	; (800c614 <AT25_Save_AD_Param+0xa8>)
 800c5b6:	1c18      	adds	r0, r3, #0
 800c5b8:	f7f4 fb52 	bl	8000c60 <__aeabi_fmul>
 800c5bc:	1c03      	adds	r3, r0, #0
 800c5be:	1c18      	adds	r0, r3, #0
 800c5c0:	f7f3 ffb2 	bl	8000528 <__aeabi_f2uiz>
 800c5c4:	0003      	movs	r3, r0
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	003b      	movs	r3, r7
 800c5ca:	809a      	strh	r2, [r3, #4]
	temp[3] = (-1*Eror_ADC_I)*10000;
 800c5cc:	4b12      	ldr	r3, [pc, #72]	; (800c618 <AT25_Save_AD_Param+0xac>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2280      	movs	r2, #128	; 0x80
 800c5d2:	0612      	lsls	r2, r2, #24
 800c5d4:	4053      	eors	r3, r2
 800c5d6:	490f      	ldr	r1, [pc, #60]	; (800c614 <AT25_Save_AD_Param+0xa8>)
 800c5d8:	1c18      	adds	r0, r3, #0
 800c5da:	f7f4 fb41 	bl	8000c60 <__aeabi_fmul>
 800c5de:	1c03      	adds	r3, r0, #0
 800c5e0:	1c18      	adds	r0, r3, #0
 800c5e2:	f7f3 ffa1 	bl	8000528 <__aeabi_f2uiz>
 800c5e6:	0003      	movs	r3, r0
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	003b      	movs	r3, r7
 800c5ec:	80da      	strh	r2, [r3, #6]

	SPI_AT25_Write(temp, 86, sizeof(temp));
 800c5ee:	003b      	movs	r3, r7
 800c5f0:	2208      	movs	r2, #8
 800c5f2:	2156      	movs	r1, #86	; 0x56
 800c5f4:	0018      	movs	r0, r3
 800c5f6:	f7ff fdcf 	bl	800c198 <SPI_AT25_Write>

}
 800c5fa:	46c0      	nop			; (mov r8, r8)
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	b002      	add	sp, #8
 800c600:	bd80      	pop	{r7, pc}
 800c602:	46c0      	nop			; (mov r8, r8)
 800c604:	20002fec 	.word	0x20002fec
 800c608:	49742400 	.word	0x49742400
 800c60c:	20002ff0 	.word	0x20002ff0
 800c610:	20002ff4 	.word	0x20002ff4
 800c614:	461c4000 	.word	0x461c4000
 800c618:	20002ff8 	.word	0x20002ff8

0800c61c <AT25_load_AD_Param>:

void AT25_load_AD_Param(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0

	uint16_t temp[4];

	SPI_AT25_Read((uint16_t*)temp, 86, sizeof(temp));
 800c622:	003b      	movs	r3, r7
 800c624:	2208      	movs	r2, #8
 800c626:	2156      	movs	r1, #86	; 0x56
 800c628:	0018      	movs	r0, r3
 800c62a:	f7ff fde4 	bl	800c1f6 <SPI_AT25_Read>

	ADC_Gain_V=temp[0]/1000000.0;
 800c62e:	003b      	movs	r3, r7
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	0018      	movs	r0, r3
 800c634:	f7f6 fbe6 	bl	8002e04 <__aeabi_i2d>
 800c638:	2200      	movs	r2, #0
 800c63a:	4b26      	ldr	r3, [pc, #152]	; (800c6d4 <AT25_load_AD_Param+0xb8>)
 800c63c:	f7f5 f98e 	bl	800195c <__aeabi_ddiv>
 800c640:	0002      	movs	r2, r0
 800c642:	000b      	movs	r3, r1
 800c644:	0010      	movs	r0, r2
 800c646:	0019      	movs	r1, r3
 800c648:	f7f6 fc7a 	bl	8002f40 <__aeabi_d2f>
 800c64c:	1c02      	adds	r2, r0, #0
 800c64e:	4b22      	ldr	r3, [pc, #136]	; (800c6d8 <AT25_load_AD_Param+0xbc>)
 800c650:	601a      	str	r2, [r3, #0]
	ADC_Gain_I=temp[1]/1000000.0;
 800c652:	003b      	movs	r3, r7
 800c654:	885b      	ldrh	r3, [r3, #2]
 800c656:	0018      	movs	r0, r3
 800c658:	f7f6 fbd4 	bl	8002e04 <__aeabi_i2d>
 800c65c:	2200      	movs	r2, #0
 800c65e:	4b1d      	ldr	r3, [pc, #116]	; (800c6d4 <AT25_load_AD_Param+0xb8>)
 800c660:	f7f5 f97c 	bl	800195c <__aeabi_ddiv>
 800c664:	0002      	movs	r2, r0
 800c666:	000b      	movs	r3, r1
 800c668:	0010      	movs	r0, r2
 800c66a:	0019      	movs	r1, r3
 800c66c:	f7f6 fc68 	bl	8002f40 <__aeabi_d2f>
 800c670:	1c02      	adds	r2, r0, #0
 800c672:	4b1a      	ldr	r3, [pc, #104]	; (800c6dc <AT25_load_AD_Param+0xc0>)
 800c674:	601a      	str	r2, [r3, #0]
	Eror_ADC_V=-(temp[2]/10000.0);
 800c676:	003b      	movs	r3, r7
 800c678:	889b      	ldrh	r3, [r3, #4]
 800c67a:	0018      	movs	r0, r3
 800c67c:	f7f6 fbc2 	bl	8002e04 <__aeabi_i2d>
 800c680:	2200      	movs	r2, #0
 800c682:	4b17      	ldr	r3, [pc, #92]	; (800c6e0 <AT25_load_AD_Param+0xc4>)
 800c684:	f7f5 f96a 	bl	800195c <__aeabi_ddiv>
 800c688:	0002      	movs	r2, r0
 800c68a:	000b      	movs	r3, r1
 800c68c:	0010      	movs	r0, r2
 800c68e:	0019      	movs	r1, r3
 800c690:	f7f6 fc56 	bl	8002f40 <__aeabi_d2f>
 800c694:	1c02      	adds	r2, r0, #0
 800c696:	2380      	movs	r3, #128	; 0x80
 800c698:	061b      	lsls	r3, r3, #24
 800c69a:	405a      	eors	r2, r3
 800c69c:	4b11      	ldr	r3, [pc, #68]	; (800c6e4 <AT25_load_AD_Param+0xc8>)
 800c69e:	601a      	str	r2, [r3, #0]
	Eror_ADC_I=-(temp[3]/10000.0);
 800c6a0:	003b      	movs	r3, r7
 800c6a2:	88db      	ldrh	r3, [r3, #6]
 800c6a4:	0018      	movs	r0, r3
 800c6a6:	f7f6 fbad 	bl	8002e04 <__aeabi_i2d>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	4b0c      	ldr	r3, [pc, #48]	; (800c6e0 <AT25_load_AD_Param+0xc4>)
 800c6ae:	f7f5 f955 	bl	800195c <__aeabi_ddiv>
 800c6b2:	0002      	movs	r2, r0
 800c6b4:	000b      	movs	r3, r1
 800c6b6:	0010      	movs	r0, r2
 800c6b8:	0019      	movs	r1, r3
 800c6ba:	f7f6 fc41 	bl	8002f40 <__aeabi_d2f>
 800c6be:	1c02      	adds	r2, r0, #0
 800c6c0:	2380      	movs	r3, #128	; 0x80
 800c6c2:	061b      	lsls	r3, r3, #24
 800c6c4:	405a      	eors	r2, r3
 800c6c6:	4b08      	ldr	r3, [pc, #32]	; (800c6e8 <AT25_load_AD_Param+0xcc>)
 800c6c8:	601a      	str	r2, [r3, #0]
}
 800c6ca:	46c0      	nop			; (mov r8, r8)
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	b002      	add	sp, #8
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	46c0      	nop			; (mov r8, r8)
 800c6d4:	412e8480 	.word	0x412e8480
 800c6d8:	20002fec 	.word	0x20002fec
 800c6dc:	20002ff0 	.word	0x20002ff0
 800c6e0:	40c38800 	.word	0x40c38800
 800c6e4:	20002ff4 	.word	0x20002ff4
 800c6e8:	20002ff8 	.word	0x20002ff8

0800c6ec <AT25_Reset>:
 * @brief  对AT25重置所有设定值
 * @param	无
 * @retval 无
 */
void AT25_Reset(void)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b090      	sub	sp, #64	; 0x40
 800c6f0:	af00      	add	r7, sp, #0
	AT_25_init();
 800c6f2:	f7ff fbf1 	bl	800bed8 <AT_25_init>

	CV_CC_CP = CV;
 800c6f6:	4b42      	ldr	r3, [pc, #264]	; (800c800 <AT25_Reset+0x114>)
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	701a      	strb	r2, [r3, #0]
	AT25_Save_CC_CV_CP();
 800c6fc:	f7ff ff04 	bl	800c508 <AT25_Save_CC_CV_CP>
	Set_V_Slope=15;
 800c700:	4b40      	ldr	r3, [pc, #256]	; (800c804 <AT25_Reset+0x118>)
 800c702:	220f      	movs	r2, #15
 800c704:	701a      	strb	r2, [r3, #0]
	Set_I_Slope=5;
 800c706:	4b40      	ldr	r3, [pc, #256]	; (800c808 <AT25_Reset+0x11c>)
 800c708:	2205      	movs	r2, #5
 800c70a:	701a      	strb	r2, [r3, #0]
	AT25_Save_VI_Rate();
 800c70c:	f7ff ff12 	bl	800c534 <AT25_Save_VI_Rate>
	Set_Current=0;
 800c710:	4b3e      	ldr	r3, [pc, #248]	; (800c80c <AT25_Reset+0x120>)
 800c712:	2200      	movs	r2, #0
 800c714:	801a      	strh	r2, [r3, #0]
	Set_Voltage=0;
 800c716:	4b3e      	ldr	r3, [pc, #248]	; (800c810 <AT25_Reset+0x124>)
 800c718:	2200      	movs	r2, #0
 800c71a:	801a      	strh	r2, [r3, #0]
	AT25_Save_VISet();
 800c71c:	f7ff fd9a 	bl	800c254 <AT25_Save_VISet>
	/*save recall reset*/
	uint16_t temp[30] = {0};
 800c720:	003b      	movs	r3, r7
 800c722:	0018      	movs	r0, r3
 800c724:	233c      	movs	r3, #60	; 0x3c
 800c726:	001a      	movs	r2, r3
 800c728:	2100      	movs	r1, #0
 800c72a:	f007 ff86 	bl	801463a <memset>
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c72e:	233f      	movs	r3, #63	; 0x3f
 800c730:	18fb      	adds	r3, r7, r3
 800c732:	2200      	movs	r2, #0
 800c734:	701a      	strb	r2, [r3, #0]
 800c736:	e012      	b.n	800c75e <AT25_Reset+0x72>
	{
		temp[i]=1000*(i+1);
 800c738:	203f      	movs	r0, #63	; 0x3f
 800c73a:	183b      	adds	r3, r7, r0
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	3301      	adds	r3, #1
 800c740:	b29b      	uxth	r3, r3
 800c742:	183a      	adds	r2, r7, r0
 800c744:	7812      	ldrb	r2, [r2, #0]
 800c746:	21fa      	movs	r1, #250	; 0xfa
 800c748:	0089      	lsls	r1, r1, #2
 800c74a:	434b      	muls	r3, r1
 800c74c:	b299      	uxth	r1, r3
 800c74e:	003b      	movs	r3, r7
 800c750:	0052      	lsls	r2, r2, #1
 800c752:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i=0;i<10;i++)//1000-10000
 800c754:	183b      	adds	r3, r7, r0
 800c756:	781a      	ldrb	r2, [r3, #0]
 800c758:	183b      	adds	r3, r7, r0
 800c75a:	3201      	adds	r2, #1
 800c75c:	701a      	strb	r2, [r3, #0]
 800c75e:	233f      	movs	r3, #63	; 0x3f
 800c760:	18fb      	adds	r3, r7, r3
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b09      	cmp	r3, #9
 800c766:	d9e7      	bls.n	800c738 <AT25_Reset+0x4c>
	}
	for(uint8_t j=10;j<20;j++)//100-1000
 800c768:	233e      	movs	r3, #62	; 0x3e
 800c76a:	18fb      	adds	r3, r7, r3
 800c76c:	220a      	movs	r2, #10
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	e011      	b.n	800c796 <AT25_Reset+0xaa>
	{
		temp[j]=(j-9)*100;
 800c772:	203e      	movs	r0, #62	; 0x3e
 800c774:	183b      	adds	r3, r7, r0
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	3b09      	subs	r3, #9
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	183a      	adds	r2, r7, r0
 800c77e:	7812      	ldrb	r2, [r2, #0]
 800c780:	2164      	movs	r1, #100	; 0x64
 800c782:	434b      	muls	r3, r1
 800c784:	b299      	uxth	r1, r3
 800c786:	003b      	movs	r3, r7
 800c788:	0052      	lsls	r2, r2, #1
 800c78a:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=10;j<20;j++)//100-1000
 800c78c:	183b      	adds	r3, r7, r0
 800c78e:	781a      	ldrb	r2, [r3, #0]
 800c790:	183b      	adds	r3, r7, r0
 800c792:	3201      	adds	r2, #1
 800c794:	701a      	strb	r2, [r3, #0]
 800c796:	233e      	movs	r3, #62	; 0x3e
 800c798:	18fb      	adds	r3, r7, r3
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	2b13      	cmp	r3, #19
 800c79e:	d9e8      	bls.n	800c772 <AT25_Reset+0x86>
	}
	for(uint8_t k=20;k<30;k++)
 800c7a0:	233d      	movs	r3, #61	; 0x3d
 800c7a2:	18fb      	adds	r3, r7, r3
 800c7a4:	2214      	movs	r2, #20
 800c7a6:	701a      	strb	r2, [r3, #0]
 800c7a8:	e01a      	b.n	800c7e0 <AT25_Reset+0xf4>
	{
		temp[k]=temp[k-20]*temp[k-10];
 800c7aa:	203d      	movs	r0, #61	; 0x3d
 800c7ac:	183b      	adds	r3, r7, r0
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	3b14      	subs	r3, #20
 800c7b2:	001a      	movs	r2, r3
 800c7b4:	003b      	movs	r3, r7
 800c7b6:	0052      	lsls	r2, r2, #1
 800c7b8:	5ad3      	ldrh	r3, [r2, r3]
 800c7ba:	183a      	adds	r2, r7, r0
 800c7bc:	7812      	ldrb	r2, [r2, #0]
 800c7be:	3a0a      	subs	r2, #10
 800c7c0:	0011      	movs	r1, r2
 800c7c2:	003a      	movs	r2, r7
 800c7c4:	0049      	lsls	r1, r1, #1
 800c7c6:	5a89      	ldrh	r1, [r1, r2]
 800c7c8:	183a      	adds	r2, r7, r0
 800c7ca:	7812      	ldrb	r2, [r2, #0]
 800c7cc:	434b      	muls	r3, r1
 800c7ce:	b299      	uxth	r1, r3
 800c7d0:	003b      	movs	r3, r7
 800c7d2:	0052      	lsls	r2, r2, #1
 800c7d4:	52d1      	strh	r1, [r2, r3]
	for(uint8_t k=20;k<30;k++)
 800c7d6:	183b      	adds	r3, r7, r0
 800c7d8:	781a      	ldrb	r2, [r3, #0]
 800c7da:	183b      	adds	r3, r7, r0
 800c7dc:	3201      	adds	r2, #1
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	233d      	movs	r3, #61	; 0x3d
 800c7e2:	18fb      	adds	r3, r7, r3
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b1d      	cmp	r3, #29
 800c7e8:	d9df      	bls.n	800c7aa <AT25_Reset+0xbe>
	}
	SPI_AT25_Write(temp,0x06, sizeof(temp));
 800c7ea:	003b      	movs	r3, r7
 800c7ec:	223c      	movs	r2, #60	; 0x3c
 800c7ee:	2106      	movs	r1, #6
 800c7f0:	0018      	movs	r0, r3
 800c7f2:	f7ff fcd1 	bl	800c198 <SPI_AT25_Write>



}
 800c7f6:	46c0      	nop			; (mov r8, r8)
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	b010      	add	sp, #64	; 0x40
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	2000398a 	.word	0x2000398a
 800c804:	20003997 	.word	0x20003997
 800c808:	20003998 	.word	0x20003998
 800c80c:	20002fdc 	.word	0x20002fdc
 800c810:	20002fda 	.word	0x20002fda

0800c814 <ADD>:
		}
		return (uchCRCHi<<8|uchCRCLo);
}
#endif
uint16_t ADD(uint8_t *puchMsg,uint8_t usDataLen)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	000a      	movs	r2, r1
 800c81e:	1cfb      	adds	r3, r7, #3
 800c820:	701a      	strb	r2, [r3, #0]

	uint16_t sum=0;
 800c822:	2316      	movs	r3, #22
 800c824:	18fb      	adds	r3, r7, r3
 800c826:	2200      	movs	r2, #0
 800c828:	801a      	strh	r2, [r3, #0]
	uint8_t * pindex=puchMsg;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0;i<usDataLen;i++)
 800c82e:	230f      	movs	r3, #15
 800c830:	18fb      	adds	r3, r7, r3
 800c832:	2200      	movs	r2, #0
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	e010      	b.n	800c85a <ADD+0x46>
	{
		sum+=*(pindex++);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	613a      	str	r2, [r7, #16]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	b299      	uxth	r1, r3
 800c842:	2216      	movs	r2, #22
 800c844:	18bb      	adds	r3, r7, r2
 800c846:	18ba      	adds	r2, r7, r2
 800c848:	8812      	ldrh	r2, [r2, #0]
 800c84a:	188a      	adds	r2, r1, r2
 800c84c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<usDataLen;i++)
 800c84e:	210f      	movs	r1, #15
 800c850:	187b      	adds	r3, r7, r1
 800c852:	781a      	ldrb	r2, [r3, #0]
 800c854:	187b      	adds	r3, r7, r1
 800c856:	3201      	adds	r2, #1
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	230f      	movs	r3, #15
 800c85c:	18fa      	adds	r2, r7, r3
 800c85e:	1cfb      	adds	r3, r7, #3
 800c860:	7812      	ldrb	r2, [r2, #0]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	429a      	cmp	r2, r3
 800c866:	d3e7      	bcc.n	800c838 <ADD+0x24>
	}

	return sum;
 800c868:	2316      	movs	r3, #22
 800c86a:	18fb      	adds	r3, r7, r3
 800c86c:	881b      	ldrh	r3, [r3, #0]
}
 800c86e:	0018      	movs	r0, r3
 800c870:	46bd      	mov	sp, r7
 800c872:	b006      	add	sp, #24
 800c874:	bd80      	pop	{r7, pc}
	...

0800c878 <DAC_Cmd_send>:
  * @param  command
  * @param  Date need to be send
  * @retval
  */
void DAC_Cmd_send(uint8_t IDindex,uint8_t cmd,uint16_t Data_To_Send)
{
 800c878:	b590      	push	{r4, r7, lr}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	0004      	movs	r4, r0
 800c880:	0008      	movs	r0, r1
 800c882:	0011      	movs	r1, r2
 800c884:	1dfb      	adds	r3, r7, #7
 800c886:	1c22      	adds	r2, r4, #0
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	1dbb      	adds	r3, r7, #6
 800c88c:	1c02      	adds	r2, r0, #0
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	1d3b      	adds	r3, r7, #4
 800c892:	1c0a      	adds	r2, r1, #0
 800c894:	801a      	strh	r2, [r3, #0]

	__HAL_UART_ENABLE(&huart2);
 800c896:	4b5d      	ldr	r3, [pc, #372]	; (800ca0c <DAC_Cmd_send+0x194>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	4b5b      	ldr	r3, [pc, #364]	; (800ca0c <DAC_Cmd_send+0x194>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	601a      	str	r2, [r3, #0]
	/*********************ID&Command*********************/
	Uart2_Send_buffer[0]=IDindex;//id
 800c8a6:	4b5a      	ldr	r3, [pc, #360]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c8a8:	1dfa      	adds	r2, r7, #7
 800c8aa:	7812      	ldrb	r2, [r2, #0]
 800c8ac:	701a      	strb	r2, [r3, #0]
	Uart2_Send_buffer[1]=cmd;//cmd
 800c8ae:	4b58      	ldr	r3, [pc, #352]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c8b0:	1dba      	adds	r2, r7, #6
 800c8b2:	7812      	ldrb	r2, [r2, #0]
 800c8b4:	705a      	strb	r2, [r3, #1]
	 /*********************data length*********************/
	 if((Data_To_Send&0xff00))
 800c8b6:	1d3b      	adds	r3, r7, #4
 800c8b8:	881a      	ldrh	r2, [r3, #0]
 800c8ba:	23ff      	movs	r3, #255	; 0xff
 800c8bc:	021b      	lsls	r3, r3, #8
 800c8be:	4013      	ands	r3, r2
 800c8c0:	d003      	beq.n	800c8ca <DAC_Cmd_send+0x52>
	 {
		 Uart2_Send_buffer[2]=0x02;
 800c8c2:	4b53      	ldr	r3, [pc, #332]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c8c4:	2202      	movs	r2, #2
 800c8c6:	709a      	strb	r2, [r3, #2]
 800c8c8:	e00b      	b.n	800c8e2 <DAC_Cmd_send+0x6a>
	 }
	 else if((Data_To_Send&0x00ff))
 800c8ca:	1d3b      	adds	r3, r7, #4
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	22ff      	movs	r2, #255	; 0xff
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	d003      	beq.n	800c8dc <DAC_Cmd_send+0x64>
	 {
		 Uart2_Send_buffer[2]=0x01;
 800c8d4:	4b4e      	ldr	r3, [pc, #312]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	709a      	strb	r2, [r3, #2]
 800c8da:	e002      	b.n	800c8e2 <DAC_Cmd_send+0x6a>
	 }
	 else Uart2_Send_buffer[2]=0x00;
 800c8dc:	4b4c      	ldr	r3, [pc, #304]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	709a      	strb	r2, [r3, #2]
	 /*********************data convert*********************/
	  Uart2_Send_buffer[3]=0x00;//data H
 800c8e2:	4b4b      	ldr	r3, [pc, #300]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	70da      	strb	r2, [r3, #3]
	  Uart2_Send_buffer[4]=0x00;//data L
 800c8e8:	4b49      	ldr	r3, [pc, #292]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	711a      	strb	r2, [r3, #4]
	  switch(cmd)
 800c8ee:	1dbb      	adds	r3, r7, #6
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	2b0b      	cmp	r3, #11
 800c8f4:	d86b      	bhi.n	800c9ce <DAC_Cmd_send+0x156>
 800c8f6:	009a      	lsls	r2, r3, #2
 800c8f8:	4b46      	ldr	r3, [pc, #280]	; (800ca14 <DAC_Cmd_send+0x19c>)
 800c8fa:	18d3      	adds	r3, r2, r3
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	469f      	mov	pc, r3

		  /*set max voltage current*/
		  case 4://set voltage
		  case 5://set current
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//low max_voltage
 800c900:	4b43      	ldr	r3, [pc, #268]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c902:	791b      	ldrb	r3, [r3, #4]
 800c904:	b25a      	sxtb	r2, r3
 800c906:	1d3b      	adds	r3, r7, #4
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	b25b      	sxtb	r3, r3
 800c90c:	4313      	orrs	r3, r2
 800c90e:	b25b      	sxtb	r3, r3
 800c910:	b2da      	uxtb	r2, r3
 800c912:	4b3f      	ldr	r3, [pc, #252]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c914:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//Hight max_voltage
 800c916:	4b3e      	ldr	r3, [pc, #248]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c918:	78da      	ldrb	r2, [r3, #3]
 800c91a:	1d3b      	adds	r3, r7, #4
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	0a1b      	lsrs	r3, r3, #8
 800c920:	b29b      	uxth	r3, r3
 800c922:	b2db      	uxtb	r3, r3
 800c924:	4313      	orrs	r3, r2
 800c926:	b2da      	uxtb	r2, r3
 800c928:	4b39      	ldr	r3, [pc, #228]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c92a:	70da      	strb	r2, [r3, #3]
			  break;
 800c92c:	e050      	b.n	800c9d0 <DAC_Cmd_send+0x158>
		  }
		  /*set min voltage current*/
		  case 6://set voltage & current
		  {

			  Uart2_Send_buffer[4]|=(Set_Voltage&0x00ff);//low voltage
 800c92e:	4b38      	ldr	r3, [pc, #224]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c930:	791b      	ldrb	r3, [r3, #4]
 800c932:	b25a      	sxtb	r2, r3
 800c934:	4b38      	ldr	r3, [pc, #224]	; (800ca18 <DAC_Cmd_send+0x1a0>)
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	b25b      	sxtb	r3, r3
 800c93a:	4313      	orrs	r3, r2
 800c93c:	b25b      	sxtb	r3, r3
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	4b33      	ldr	r3, [pc, #204]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c942:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Set_Voltage>>8);//Hight voltage
 800c944:	4b32      	ldr	r3, [pc, #200]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c946:	78da      	ldrb	r2, [r3, #3]
 800c948:	4b33      	ldr	r3, [pc, #204]	; (800ca18 <DAC_Cmd_send+0x1a0>)
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	0a1b      	lsrs	r3, r3, #8
 800c94e:	b29b      	uxth	r3, r3
 800c950:	b2db      	uxtb	r3, r3
 800c952:	4313      	orrs	r3, r2
 800c954:	b2da      	uxtb	r2, r3
 800c956:	4b2e      	ldr	r3, [pc, #184]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c958:	70da      	strb	r2, [r3, #3]

			  Uart2_Send_buffer[6]|=(Set_Current&0x00ff);//low current
 800c95a:	4b2d      	ldr	r3, [pc, #180]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c95c:	799b      	ldrb	r3, [r3, #6]
 800c95e:	b25a      	sxtb	r2, r3
 800c960:	4b2e      	ldr	r3, [pc, #184]	; (800ca1c <DAC_Cmd_send+0x1a4>)
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	b25b      	sxtb	r3, r3
 800c966:	4313      	orrs	r3, r2
 800c968:	b25b      	sxtb	r3, r3
 800c96a:	b2da      	uxtb	r2, r3
 800c96c:	4b28      	ldr	r3, [pc, #160]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c96e:	719a      	strb	r2, [r3, #6]
			  Uart2_Send_buffer[5]|=(Set_Current>>8);//Hight current
 800c970:	4b27      	ldr	r3, [pc, #156]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c972:	795a      	ldrb	r2, [r3, #5]
 800c974:	4b29      	ldr	r3, [pc, #164]	; (800ca1c <DAC_Cmd_send+0x1a4>)
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	0a1b      	lsrs	r3, r3, #8
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	4313      	orrs	r3, r2
 800c980:	b2da      	uxtb	r2, r3
 800c982:	4b23      	ldr	r3, [pc, #140]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c984:	715a      	strb	r2, [r3, #5]
			  break;
 800c986:	e023      	b.n	800c9d0 <DAC_Cmd_send+0x158>
		  }
		  /*set V/I rate*/
		  case 7:
		  case 8:
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//Low min_voltage
 800c988:	4b21      	ldr	r3, [pc, #132]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c98a:	791b      	ldrb	r3, [r3, #4]
 800c98c:	b25a      	sxtb	r2, r3
 800c98e:	1d3b      	adds	r3, r7, #4
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	b25b      	sxtb	r3, r3
 800c994:	4313      	orrs	r3, r2
 800c996:	b25b      	sxtb	r3, r3
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	4b1d      	ldr	r3, [pc, #116]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c99c:	711a      	strb	r2, [r3, #4]
			  break;
 800c99e:	e017      	b.n	800c9d0 <DAC_Cmd_send+0x158>
		  }
		  /*set V I rate*/
		  case 9:
		  {
			  Uart2_Send_buffer[4]|=(Data_To_Send&0x00ff);//Low min_voltage
 800c9a0:	4b1b      	ldr	r3, [pc, #108]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9a2:	791b      	ldrb	r3, [r3, #4]
 800c9a4:	b25a      	sxtb	r2, r3
 800c9a6:	1d3b      	adds	r3, r7, #4
 800c9a8:	881b      	ldrh	r3, [r3, #0]
 800c9aa:	b25b      	sxtb	r3, r3
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	b25b      	sxtb	r3, r3
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	4b17      	ldr	r3, [pc, #92]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9b4:	711a      	strb	r2, [r3, #4]
			  Uart2_Send_buffer[3]|=(Data_To_Send>>8);//high min_voltage
 800c9b6:	4b16      	ldr	r3, [pc, #88]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9b8:	78da      	ldrb	r2, [r3, #3]
 800c9ba:	1d3b      	adds	r3, r7, #4
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	0a1b      	lsrs	r3, r3, #8
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	4b11      	ldr	r3, [pc, #68]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9ca:	70da      	strb	r2, [r3, #3]
			  break;
 800c9cc:	e000      	b.n	800c9d0 <DAC_Cmd_send+0x158>
		  }

		  case 11:break;//start Fall ON/OFF

		  default: break;
 800c9ce:	46c0      	nop			; (mov r8, r8)
	  /*********************CRC Calculate*********************/
	  Uart2_Send_buffer[5]=CRC16(Uart2_Send_buffer,5);//CRC L
	  Uart2_Send_buffer[6]=(CRC16(Uart2_Send_buffer,5)>>8);//CRC H
#endif
#ifdef ADD_CHECK
	  Uart2_Send_buffer[7]=ADD(Uart2_Send_buffer,7);//Low
 800c9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9d2:	2107      	movs	r1, #7
 800c9d4:	0018      	movs	r0, r3
 800c9d6:	f7ff ff1d 	bl	800c814 <ADD>
 800c9da:	0003      	movs	r3, r0
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	4b0c      	ldr	r3, [pc, #48]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9e0:	71da      	strb	r2, [r3, #7]
	  Uart2_Send_buffer[8]=(ADD(Uart2_Send_buffer,7)>>8);//High
 800c9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9e4:	2107      	movs	r1, #7
 800c9e6:	0018      	movs	r0, r3
 800c9e8:	f7ff ff14 	bl	800c814 <ADD>
 800c9ec:	0003      	movs	r3, r0
 800c9ee:	0a1b      	lsrs	r3, r3, #8
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9f6:	721a      	strb	r2, [r3, #8]
#endif

	  HAL_UART_Transmit_IT(&huart2,Uart2_Send_buffer,9);
 800c9f8:	4905      	ldr	r1, [pc, #20]	; (800ca10 <DAC_Cmd_send+0x198>)
 800c9fa:	4b04      	ldr	r3, [pc, #16]	; (800ca0c <DAC_Cmd_send+0x194>)
 800c9fc:	2209      	movs	r2, #9
 800c9fe:	0018      	movs	r0, r3
 800ca00:	f7fd fc3e 	bl	800a280 <HAL_UART_Transmit_IT>

}
 800ca04:	46c0      	nop			; (mov r8, r8)
 800ca06:	46bd      	mov	sp, r7
 800ca08:	b003      	add	sp, #12
 800ca0a:	bd90      	pop	{r4, r7, pc}
 800ca0c:	20003740 	.word	0x20003740
 800ca10:	20003694 	.word	0x20003694
 800ca14:	080187b4 	.word	0x080187b4
 800ca18:	20002fda 	.word	0x20002fda
 800ca1c:	20002fdc 	.word	0x20002fdc

0800ca20 <power_on>:
  * @brief  开始输出
  * @param  无
  * @retval 无
  */
void power_on(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0


	ON_OFF =ON;
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <power_on+0x1c>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,6,0);
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2106      	movs	r1, #6
 800ca2e:	2001      	movs	r0, #1
 800ca30:	f7ff ff22 	bl	800c878 <DAC_Cmd_send>

}
 800ca34:	46c0      	nop			; (mov r8, r8)
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	46c0      	nop			; (mov r8, r8)
 800ca3c:	20003988 	.word	0x20003988

0800ca40 <power_off>:
  * @brief  关闭输出
  * @param  无
  * @retval 无
  */
void power_off(void)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	af00      	add	r7, sp, #0

	ON_OFF =OFF;
 800ca44:	4b08      	ldr	r3, [pc, #32]	; (800ca68 <power_off+0x28>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	701a      	strb	r2, [r3, #0]
	Set_Voltage=100;
 800ca4a:	4b08      	ldr	r3, [pc, #32]	; (800ca6c <power_off+0x2c>)
 800ca4c:	2264      	movs	r2, #100	; 0x64
 800ca4e:	801a      	strh	r2, [r3, #0]
	Set_Current=100;
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <power_off+0x30>)
 800ca52:	2264      	movs	r2, #100	; 0x64
 800ca54:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,6,0);
 800ca56:	2200      	movs	r2, #0
 800ca58:	2106      	movs	r1, #6
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	f7ff ff0c 	bl	800c878 <DAC_Cmd_send>


}
 800ca60:	46c0      	nop			; (mov r8, r8)
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	46c0      	nop			; (mov r8, r8)
 800ca68:	20003988 	.word	0x20003988
 800ca6c:	20002fda 	.word	0x20002fda
 800ca70:	20002fdc 	.word	0x20002fdc

0800ca74 <Output_Zero>:
  * @brief  输出零
  * @param  无
  * @retval 无
  */
void Output_Zero(void)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	af00      	add	r7, sp, #0

	DAC_Cmd_send(1,4,100);
 800ca78:	2264      	movs	r2, #100	; 0x64
 800ca7a:	2104      	movs	r1, #4
 800ca7c:	2001      	movs	r0, #1
 800ca7e:	f7ff fefb 	bl	800c878 <DAC_Cmd_send>
	HAL_Delay(10);
 800ca82:	200a      	movs	r0, #10
 800ca84:	f7f8 fbd4 	bl	8005230 <HAL_Delay>
	DAC_Cmd_send(1,5,100);
 800ca88:	2264      	movs	r2, #100	; 0x64
 800ca8a:	2105      	movs	r1, #5
 800ca8c:	2001      	movs	r0, #1
 800ca8e:	f7ff fef3 	bl	800c878 <DAC_Cmd_send>

}
 800ca92:	46c0      	nop			; (mov r8, r8)
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <First_menu_data_Refresh>:
#include "encoder.h"

static void First_menu_data_Refresh(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
	xyz.coordinates2+=Flag.Encoder_BF;
 800ca9c:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <First_menu_data_Refresh+0x34>)
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <First_menu_data_Refresh+0x38>)
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	18d2      	adds	r2, r2, r3
 800caa6:	4b09      	ldr	r3, [pc, #36]	; (800cacc <First_menu_data_Refresh+0x34>)
 800caa8:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2<1)	xyz.coordinates2=8;
 800caaa:	4b08      	ldr	r3, [pc, #32]	; (800cacc <First_menu_data_Refresh+0x34>)
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	dc02      	bgt.n	800cab8 <First_menu_data_Refresh+0x20>
 800cab2:	4b06      	ldr	r3, [pc, #24]	; (800cacc <First_menu_data_Refresh+0x34>)
 800cab4:	2208      	movs	r2, #8
 800cab6:	605a      	str	r2, [r3, #4]
	if(xyz.coordinates2>8)  xyz.coordinates2=1;
 800cab8:	4b04      	ldr	r3, [pc, #16]	; (800cacc <First_menu_data_Refresh+0x34>)
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	2b08      	cmp	r3, #8
 800cabe:	dd02      	ble.n	800cac6 <First_menu_data_Refresh+0x2e>
 800cac0:	4b02      	ldr	r3, [pc, #8]	; (800cacc <First_menu_data_Refresh+0x34>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	605a      	str	r2, [r3, #4]
}
 800cac6:	46c0      	nop			; (mov r8, r8)
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	200039f8 	.word	0x200039f8
 800cad0:	20003388 	.word	0x20003388

0800cad4 <Calibration_V_data_Refresh>:

static void Calibration_V_data_Refresh(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0

	String_Calibration_Vlotage[Cursor_Position-9]+=Flag.Encoder_BF;
 800cad8:	4b8a      	ldr	r3, [pc, #552]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	3b09      	subs	r3, #9
 800cade:	4a8a      	ldr	r2, [pc, #552]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cae0:	5cd1      	ldrb	r1, [r2, r3]
 800cae2:	4b8a      	ldr	r3, [pc, #552]	; (800cd0c <Calibration_V_data_Refresh+0x238>)
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	4b86      	ldr	r3, [pc, #536]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	3b09      	subs	r3, #9
 800caee:	188a      	adds	r2, r1, r2
 800caf0:	b2d1      	uxtb	r1, r2
 800caf2:	4a85      	ldr	r2, [pc, #532]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800caf4:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Vlotage[Cursor_Position-9]<'0')//退位
 800caf6:	4b83      	ldr	r3, [pc, #524]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	3b09      	subs	r3, #9
 800cafc:	4a82      	ldr	r2, [pc, #520]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cafe:	5cd3      	ldrb	r3, [r2, r3]
 800cb00:	2b2f      	cmp	r3, #47	; 0x2f
 800cb02:	d900      	bls.n	800cb06 <Calibration_V_data_Refresh+0x32>
 800cb04:	e0a3      	b.n	800cc4e <Calibration_V_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800cb06:	4b7f      	ldr	r3, [pc, #508]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	2b0b      	cmp	r3, #11
 800cb0c:	d165      	bne.n	800cbda <Calibration_V_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cb0e:	4b7d      	ldr	r3, [pc, #500]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	3b01      	subs	r3, #1
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	4b7b      	ldr	r3, [pc, #492]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb18:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cb1a:	4b7a      	ldr	r3, [pc, #488]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	3b09      	subs	r3, #9
 800cb20:	4a79      	ldr	r2, [pc, #484]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb22:	5cd3      	ldrb	r3, [r2, r3]
 800cb24:	2b30      	cmp	r3, #48	; 0x30
 800cb26:	d915      	bls.n	800cb54 <Calibration_V_data_Refresh+0x80>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cb28:	4b76      	ldr	r3, [pc, #472]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	3b09      	subs	r3, #9
 800cb2e:	4a76      	ldr	r2, [pc, #472]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb30:	5cd2      	ldrb	r2, [r2, r3]
 800cb32:	3a01      	subs	r2, #1
 800cb34:	b2d1      	uxtb	r1, r2
 800cb36:	4a74      	ldr	r2, [pc, #464]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb38:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cb3a:	4b72      	ldr	r3, [pc, #456]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	4b70      	ldr	r3, [pc, #448]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb44:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cb46:	4b6f      	ldr	r3, [pc, #444]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	3b09      	subs	r3, #9
 800cb4c:	4a6e      	ldr	r2, [pc, #440]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb4e:	2139      	movs	r1, #57	; 0x39
 800cb50:	54d1      	strb	r1, [r2, r3]
 800cb52:	e07c      	b.n	800cc4e <Calibration_V_data_Refresh+0x17a>

			}
			else if(String_Calibration_Vlotage[Cursor_Position-9]=='0')
 800cb54:	4b6b      	ldr	r3, [pc, #428]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	3b09      	subs	r3, #9
 800cb5a:	4a6b      	ldr	r2, [pc, #428]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb5c:	5cd3      	ldrb	r3, [r2, r3]
 800cb5e:	2b30      	cmp	r3, #48	; 0x30
 800cb60:	d175      	bne.n	800cc4e <Calibration_V_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cb62:	4b68      	ldr	r3, [pc, #416]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	4b66      	ldr	r3, [pc, #408]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb6c:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cb6e:	4b65      	ldr	r3, [pc, #404]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	3b09      	subs	r3, #9
 800cb74:	4a64      	ldr	r2, [pc, #400]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb76:	5cd3      	ldrb	r3, [r2, r3]
 800cb78:	2b30      	cmp	r3, #48	; 0x30
 800cb7a:	d921      	bls.n	800cbc0 <Calibration_V_data_Refresh+0xec>
				{
					String_Calibration_Vlotage[Cursor_Position-9]--;
 800cb7c:	4b61      	ldr	r3, [pc, #388]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	3b09      	subs	r3, #9
 800cb82:	4a61      	ldr	r2, [pc, #388]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb84:	5cd2      	ldrb	r2, [r2, r3]
 800cb86:	3a01      	subs	r2, #1
 800cb88:	b2d1      	uxtb	r1, r2
 800cb8a:	4a5f      	ldr	r2, [pc, #380]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cb8c:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cb8e:	4b5d      	ldr	r3, [pc, #372]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	4b5b      	ldr	r3, [pc, #364]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb98:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cb9a:	4b5a      	ldr	r3, [pc, #360]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	3b09      	subs	r3, #9
 800cba0:	4a59      	ldr	r2, [pc, #356]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cba2:	2139      	movs	r1, #57	; 0x39
 800cba4:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cba6:	4b57      	ldr	r3, [pc, #348]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	b2da      	uxtb	r2, r3
 800cbae:	4b55      	ldr	r3, [pc, #340]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbb0:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cbb2:	4b54      	ldr	r3, [pc, #336]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	3b09      	subs	r3, #9
 800cbb8:	4a53      	ldr	r2, [pc, #332]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cbba:	2139      	movs	r1, #57	; 0x39
 800cbbc:	54d1      	strb	r1, [r2, r3]
 800cbbe:	e046      	b.n	800cc4e <Calibration_V_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cbc0:	4b50      	ldr	r3, [pc, #320]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	3302      	adds	r3, #2
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	4b4e      	ldr	r3, [pc, #312]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbca:	701a      	strb	r2, [r3, #0]
					String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cbcc:	4b4d      	ldr	r3, [pc, #308]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	3b09      	subs	r3, #9
 800cbd2:	4a4d      	ldr	r2, [pc, #308]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cbd4:	2130      	movs	r1, #48	; 0x30
 800cbd6:	54d1      	strb	r1, [r2, r3]
 800cbd8:	e039      	b.n	800cc4e <Calibration_V_data_Refresh+0x17a>

			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800cbda:	4b4a      	ldr	r3, [pc, #296]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b0a      	cmp	r3, #10
 800cbe0:	d12f      	bne.n	800cc42 <Calibration_V_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800cbe2:	4b48      	ldr	r3, [pc, #288]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	4b46      	ldr	r3, [pc, #280]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbec:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'0')
 800cbee:	4b45      	ldr	r3, [pc, #276]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	3b09      	subs	r3, #9
 800cbf4:	4a44      	ldr	r2, [pc, #272]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cbf6:	5cd3      	ldrb	r3, [r2, r3]
 800cbf8:	2b30      	cmp	r3, #48	; 0x30
 800cbfa:	d915      	bls.n	800cc28 <Calibration_V_data_Refresh+0x154>
			{
				String_Calibration_Vlotage[Cursor_Position-9]--;
 800cbfc:	4b41      	ldr	r3, [pc, #260]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	3b09      	subs	r3, #9
 800cc02:	4a41      	ldr	r2, [pc, #260]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc04:	5cd2      	ldrb	r2, [r2, r3]
 800cc06:	3a01      	subs	r2, #1
 800cc08:	b2d1      	uxtb	r1, r2
 800cc0a:	4a3f      	ldr	r2, [pc, #252]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc0c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cc0e:	4b3d      	ldr	r3, [pc, #244]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	3301      	adds	r3, #1
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	4b3b      	ldr	r3, [pc, #236]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc18:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='9';
 800cc1a:	4b3a      	ldr	r3, [pc, #232]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	3b09      	subs	r3, #9
 800cc20:	4a39      	ldr	r2, [pc, #228]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc22:	2139      	movs	r1, #57	; 0x39
 800cc24:	54d1      	strb	r1, [r2, r3]
 800cc26:	e012      	b.n	800cc4e <Calibration_V_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800cc28:	4b36      	ldr	r3, [pc, #216]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	4b34      	ldr	r3, [pc, #208]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc32:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cc34:	4b33      	ldr	r3, [pc, #204]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	3b09      	subs	r3, #9
 800cc3a:	4a33      	ldr	r2, [pc, #204]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc3c:	2130      	movs	r1, #48	; 0x30
 800cc3e:	54d1      	strb	r1, [r2, r3]
 800cc40:	e005      	b.n	800cc4e <Calibration_V_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cc42:	4b30      	ldr	r3, [pc, #192]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	3b09      	subs	r3, #9
 800cc48:	4a2f      	ldr	r2, [pc, #188]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc4a:	2130      	movs	r1, #48	; 0x30
 800cc4c:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Vlotage[Cursor_Position-9]>'9')
 800cc4e:	4b2d      	ldr	r3, [pc, #180]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	3b09      	subs	r3, #9
 800cc54:	4a2c      	ldr	r2, [pc, #176]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc56:	5cd3      	ldrb	r3, [r2, r3]
 800cc58:	2b39      	cmp	r3, #57	; 0x39
 800cc5a:	d94f      	bls.n	800ccfc <Calibration_V_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800cc5c:	4b29      	ldr	r3, [pc, #164]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d041      	beq.n	800cce8 <Calibration_V_data_Refresh+0x214>
		{
			String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cc64:	4b27      	ldr	r3, [pc, #156]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	3b09      	subs	r3, #9
 800cc6a:	4a27      	ldr	r2, [pc, #156]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc6c:	2130      	movs	r1, #48	; 0x30
 800cc6e:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800cc70:	4b24      	ldr	r3, [pc, #144]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	4b22      	ldr	r3, [pc, #136]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc7a:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]++;
 800cc7c:	4b21      	ldr	r3, [pc, #132]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	3b09      	subs	r3, #9
 800cc82:	4a21      	ldr	r2, [pc, #132]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc84:	5cd2      	ldrb	r2, [r2, r3]
 800cc86:	3201      	adds	r2, #1
 800cc88:	b2d1      	uxtb	r1, r2
 800cc8a:	4a1f      	ldr	r2, [pc, #124]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc8c:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Vlotage[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800cc8e:	4b1d      	ldr	r3, [pc, #116]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	3b09      	subs	r3, #9
 800cc94:	4a1c      	ldr	r2, [pc, #112]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cc96:	5cd3      	ldrb	r3, [r2, r3]
 800cc98:	2b39      	cmp	r3, #57	; 0x39
 800cc9a:	d91e      	bls.n	800ccda <Calibration_V_data_Refresh+0x206>
 800cc9c:	4b19      	ldr	r3, [pc, #100]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d01a      	beq.n	800ccda <Calibration_V_data_Refresh+0x206>
			{
				String_Calibration_Vlotage[Cursor_Position-9]='0';
 800cca4:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	3b09      	subs	r3, #9
 800ccaa:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800ccac:	2130      	movs	r1, #48	; 0x30
 800ccae:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800ccb0:	4b14      	ldr	r3, [pc, #80]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	4b12      	ldr	r3, [pc, #72]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccba:	701a      	strb	r2, [r3, #0]
				String_Calibration_Vlotage[Cursor_Position-9]++;
 800ccbc:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	3b09      	subs	r3, #9
 800ccc2:	4a11      	ldr	r2, [pc, #68]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800ccc4:	5cd2      	ldrb	r2, [r2, r3]
 800ccc6:	3201      	adds	r2, #1
 800ccc8:	b2d1      	uxtb	r1, r2
 800ccca:	4a0f      	ldr	r2, [pc, #60]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800cccc:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ccce:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	4b0b      	ldr	r3, [pc, #44]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccd8:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800ccda:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	3301      	adds	r3, #1
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	4b08      	ldr	r3, [pc, #32]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800cce4:	701a      	strb	r2, [r3, #0]
			String_Calibration_Vlotage[Cursor_Position-9]='9';
		}

	}

}
 800cce6:	e009      	b.n	800ccfc <Calibration_V_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800cce8:	4b06      	ldr	r3, [pc, #24]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d105      	bne.n	800ccfc <Calibration_V_data_Refresh+0x228>
			String_Calibration_Vlotage[Cursor_Position-9]='9';
 800ccf0:	4b04      	ldr	r3, [pc, #16]	; (800cd04 <Calibration_V_data_Refresh+0x230>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	3b09      	subs	r3, #9
 800ccf6:	4a04      	ldr	r2, [pc, #16]	; (800cd08 <Calibration_V_data_Refresh+0x234>)
 800ccf8:	2139      	movs	r1, #57	; 0x39
 800ccfa:	54d1      	strb	r1, [r2, r3]
}
 800ccfc:	46c0      	nop			; (mov r8, r8)
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	46c0      	nop			; (mov r8, r8)
 800cd04:	2000398e 	.word	0x2000398e
 800cd08:	20003090 	.word	0x20003090
 800cd0c:	20003388 	.word	0x20003388

0800cd10 <Calibration_I_data_Refresh>:


static void Calibration_I_data_Refresh(void)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	af00      	add	r7, sp, #0

	String_Calibration_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800cd14:	4b8a      	ldr	r3, [pc, #552]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	3b09      	subs	r3, #9
 800cd1a:	4a8a      	ldr	r2, [pc, #552]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd1c:	5cd1      	ldrb	r1, [r2, r3]
 800cd1e:	4b8a      	ldr	r3, [pc, #552]	; (800cf48 <Calibration_I_data_Refresh+0x238>)
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	4b86      	ldr	r3, [pc, #536]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	3b09      	subs	r3, #9
 800cd2a:	188a      	adds	r2, r1, r2
 800cd2c:	b2d1      	uxtb	r1, r2
 800cd2e:	4a85      	ldr	r2, [pc, #532]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd30:	54d1      	strb	r1, [r2, r3]
	if(String_Calibration_Current[Cursor_Position-9]<'0')//退位
 800cd32:	4b83      	ldr	r3, [pc, #524]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	3b09      	subs	r3, #9
 800cd38:	4a82      	ldr	r2, [pc, #520]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd3a:	5cd3      	ldrb	r3, [r2, r3]
 800cd3c:	2b2f      	cmp	r3, #47	; 0x2f
 800cd3e:	d900      	bls.n	800cd42 <Calibration_I_data_Refresh+0x32>
 800cd40:	e0a3      	b.n	800ce8a <Calibration_I_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800cd42:	4b7f      	ldr	r3, [pc, #508]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b0b      	cmp	r3, #11
 800cd48:	d165      	bne.n	800ce16 <Calibration_I_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cd4a:	4b7d      	ldr	r3, [pc, #500]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	4b7b      	ldr	r3, [pc, #492]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd54:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cd56:	4b7a      	ldr	r3, [pc, #488]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	3b09      	subs	r3, #9
 800cd5c:	4a79      	ldr	r2, [pc, #484]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd5e:	5cd3      	ldrb	r3, [r2, r3]
 800cd60:	2b30      	cmp	r3, #48	; 0x30
 800cd62:	d915      	bls.n	800cd90 <Calibration_I_data_Refresh+0x80>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800cd64:	4b76      	ldr	r3, [pc, #472]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	3b09      	subs	r3, #9
 800cd6a:	4a76      	ldr	r2, [pc, #472]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd6c:	5cd2      	ldrb	r2, [r2, r3]
 800cd6e:	3a01      	subs	r2, #1
 800cd70:	b2d1      	uxtb	r1, r2
 800cd72:	4a74      	ldr	r2, [pc, #464]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd74:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cd76:	4b72      	ldr	r3, [pc, #456]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	4b70      	ldr	r3, [pc, #448]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd80:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800cd82:	4b6f      	ldr	r3, [pc, #444]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	3b09      	subs	r3, #9
 800cd88:	4a6e      	ldr	r2, [pc, #440]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd8a:	2139      	movs	r1, #57	; 0x39
 800cd8c:	54d1      	strb	r1, [r2, r3]
 800cd8e:	e07c      	b.n	800ce8a <Calibration_I_data_Refresh+0x17a>

			}
			else if(String_Calibration_Current[Cursor_Position-9]=='0')
 800cd90:	4b6b      	ldr	r3, [pc, #428]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	3b09      	subs	r3, #9
 800cd96:	4a6b      	ldr	r2, [pc, #428]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cd98:	5cd3      	ldrb	r3, [r2, r3]
 800cd9a:	2b30      	cmp	r3, #48	; 0x30
 800cd9c:	d175      	bne.n	800ce8a <Calibration_I_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cd9e:	4b68      	ldr	r3, [pc, #416]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	4b66      	ldr	r3, [pc, #408]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cda8:	701a      	strb	r2, [r3, #0]
				if(String_Calibration_Current[Cursor_Position-9]>'0')
 800cdaa:	4b65      	ldr	r3, [pc, #404]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	3b09      	subs	r3, #9
 800cdb0:	4a64      	ldr	r2, [pc, #400]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cdb2:	5cd3      	ldrb	r3, [r2, r3]
 800cdb4:	2b30      	cmp	r3, #48	; 0x30
 800cdb6:	d921      	bls.n	800cdfc <Calibration_I_data_Refresh+0xec>
				{
					String_Calibration_Current[Cursor_Position-9]--;
 800cdb8:	4b61      	ldr	r3, [pc, #388]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	3b09      	subs	r3, #9
 800cdbe:	4a61      	ldr	r2, [pc, #388]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cdc0:	5cd2      	ldrb	r2, [r2, r3]
 800cdc2:	3a01      	subs	r2, #1
 800cdc4:	b2d1      	uxtb	r1, r2
 800cdc6:	4a5f      	ldr	r2, [pc, #380]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cdc8:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cdca:	4b5d      	ldr	r3, [pc, #372]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	4b5b      	ldr	r3, [pc, #364]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdd4:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cdd6:	4b5a      	ldr	r3, [pc, #360]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	3b09      	subs	r3, #9
 800cddc:	4a59      	ldr	r2, [pc, #356]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cdde:	2139      	movs	r1, #57	; 0x39
 800cde0:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800cde2:	4b57      	ldr	r3, [pc, #348]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	3301      	adds	r3, #1
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	4b55      	ldr	r3, [pc, #340]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdec:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='9';
 800cdee:	4b54      	ldr	r3, [pc, #336]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	3b09      	subs	r3, #9
 800cdf4:	4a53      	ldr	r2, [pc, #332]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cdf6:	2139      	movs	r1, #57	; 0x39
 800cdf8:	54d1      	strb	r1, [r2, r3]
 800cdfa:	e046      	b.n	800ce8a <Calibration_I_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800cdfc:	4b50      	ldr	r3, [pc, #320]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	3302      	adds	r3, #2
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	4b4e      	ldr	r3, [pc, #312]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce06:	701a      	strb	r2, [r3, #0]
					String_Calibration_Current[Cursor_Position-9]='0';
 800ce08:	4b4d      	ldr	r3, [pc, #308]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	3b09      	subs	r3, #9
 800ce0e:	4a4d      	ldr	r2, [pc, #308]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce10:	2130      	movs	r1, #48	; 0x30
 800ce12:	54d1      	strb	r1, [r2, r3]
 800ce14:	e039      	b.n	800ce8a <Calibration_I_data_Refresh+0x17a>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800ce16:	4b4a      	ldr	r3, [pc, #296]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b0a      	cmp	r3, #10
 800ce1c:	d12f      	bne.n	800ce7e <Calibration_I_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800ce1e:	4b48      	ldr	r3, [pc, #288]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	3b01      	subs	r3, #1
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	4b46      	ldr	r3, [pc, #280]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce28:	701a      	strb	r2, [r3, #0]
			if(String_Calibration_Current[Cursor_Position-9]>'0')
 800ce2a:	4b45      	ldr	r3, [pc, #276]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	3b09      	subs	r3, #9
 800ce30:	4a44      	ldr	r2, [pc, #272]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce32:	5cd3      	ldrb	r3, [r2, r3]
 800ce34:	2b30      	cmp	r3, #48	; 0x30
 800ce36:	d915      	bls.n	800ce64 <Calibration_I_data_Refresh+0x154>
			{
				String_Calibration_Current[Cursor_Position-9]--;
 800ce38:	4b41      	ldr	r3, [pc, #260]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	3b09      	subs	r3, #9
 800ce3e:	4a41      	ldr	r2, [pc, #260]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce40:	5cd2      	ldrb	r2, [r2, r3]
 800ce42:	3a01      	subs	r2, #1
 800ce44:	b2d1      	uxtb	r1, r2
 800ce46:	4a3f      	ldr	r2, [pc, #252]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce48:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800ce4a:	4b3d      	ldr	r3, [pc, #244]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	4b3b      	ldr	r3, [pc, #236]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce54:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='9';
 800ce56:	4b3a      	ldr	r3, [pc, #232]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	3b09      	subs	r3, #9
 800ce5c:	4a39      	ldr	r2, [pc, #228]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce5e:	2139      	movs	r1, #57	; 0x39
 800ce60:	54d1      	strb	r1, [r2, r3]
 800ce62:	e012      	b.n	800ce8a <Calibration_I_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800ce64:	4b36      	ldr	r3, [pc, #216]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	4b34      	ldr	r3, [pc, #208]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce6e:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]='0';
 800ce70:	4b33      	ldr	r3, [pc, #204]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	3b09      	subs	r3, #9
 800ce76:	4a33      	ldr	r2, [pc, #204]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce78:	2130      	movs	r1, #48	; 0x30
 800ce7a:	54d1      	strb	r1, [r2, r3]
 800ce7c:	e005      	b.n	800ce8a <Calibration_I_data_Refresh+0x17a>
			}
		}
		else String_Calibration_Current[Cursor_Position-9]='0';
 800ce7e:	4b30      	ldr	r3, [pc, #192]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	3b09      	subs	r3, #9
 800ce84:	4a2f      	ldr	r2, [pc, #188]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce86:	2130      	movs	r1, #48	; 0x30
 800ce88:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Calibration_Current[Cursor_Position-9]>'9')
 800ce8a:	4b2d      	ldr	r3, [pc, #180]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	3b09      	subs	r3, #9
 800ce90:	4a2c      	ldr	r2, [pc, #176]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ce92:	5cd3      	ldrb	r3, [r2, r3]
 800ce94:	2b39      	cmp	r3, #57	; 0x39
 800ce96:	d94f      	bls.n	800cf38 <Calibration_I_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800ce98:	4b29      	ldr	r3, [pc, #164]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d041      	beq.n	800cf24 <Calibration_I_data_Refresh+0x214>
		{
			String_Calibration_Current[Cursor_Position-9]='0';
 800cea0:	4b27      	ldr	r3, [pc, #156]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	3b09      	subs	r3, #9
 800cea6:	4a27      	ldr	r2, [pc, #156]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cea8:	2130      	movs	r1, #48	; 0x30
 800ceaa:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800ceac:	4b24      	ldr	r3, [pc, #144]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	4b22      	ldr	r3, [pc, #136]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ceb6:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]++;
 800ceb8:	4b21      	ldr	r3, [pc, #132]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	3b09      	subs	r3, #9
 800cebe:	4a21      	ldr	r2, [pc, #132]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cec0:	5cd2      	ldrb	r2, [r2, r3]
 800cec2:	3201      	adds	r2, #1
 800cec4:	b2d1      	uxtb	r1, r2
 800cec6:	4a1f      	ldr	r2, [pc, #124]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cec8:	54d1      	strb	r1, [r2, r3]
			if(String_Calibration_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800ceca:	4b1d      	ldr	r3, [pc, #116]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	3b09      	subs	r3, #9
 800ced0:	4a1c      	ldr	r2, [pc, #112]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800ced2:	5cd3      	ldrb	r3, [r2, r3]
 800ced4:	2b39      	cmp	r3, #57	; 0x39
 800ced6:	d91e      	bls.n	800cf16 <Calibration_I_data_Refresh+0x206>
 800ced8:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d01a      	beq.n	800cf16 <Calibration_I_data_Refresh+0x206>
			{
				String_Calibration_Current[Cursor_Position-9]='0';
 800cee0:	4b17      	ldr	r3, [pc, #92]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	3b09      	subs	r3, #9
 800cee6:	4a17      	ldr	r2, [pc, #92]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cee8:	2130      	movs	r1, #48	; 0x30
 800ceea:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800ceec:	4b14      	ldr	r3, [pc, #80]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	3b01      	subs	r3, #1
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	4b12      	ldr	r3, [pc, #72]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cef6:	701a      	strb	r2, [r3, #0]
				String_Calibration_Current[Cursor_Position-9]++;
 800cef8:	4b11      	ldr	r3, [pc, #68]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	3b09      	subs	r3, #9
 800cefe:	4a11      	ldr	r2, [pc, #68]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cf00:	5cd2      	ldrb	r2, [r2, r3]
 800cf02:	3201      	adds	r2, #1
 800cf04:	b2d1      	uxtb	r1, r2
 800cf06:	4a0f      	ldr	r2, [pc, #60]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cf08:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cf0a:	4b0d      	ldr	r3, [pc, #52]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cf14:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800cf16:	4b0a      	ldr	r3, [pc, #40]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	4b08      	ldr	r3, [pc, #32]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cf20:	701a      	strb	r2, [r3, #0]
			String_Calibration_Current[Cursor_Position-9]='9';
		}

	}

}
 800cf22:	e009      	b.n	800cf38 <Calibration_I_data_Refresh+0x228>
		else if(Cursor_Position==0)
 800cf24:	4b06      	ldr	r3, [pc, #24]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d105      	bne.n	800cf38 <Calibration_I_data_Refresh+0x228>
			String_Calibration_Current[Cursor_Position-9]='9';
 800cf2c:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <Calibration_I_data_Refresh+0x230>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	3b09      	subs	r3, #9
 800cf32:	4a04      	ldr	r2, [pc, #16]	; (800cf44 <Calibration_I_data_Refresh+0x234>)
 800cf34:	2139      	movs	r1, #57	; 0x39
 800cf36:	54d1      	strb	r1, [r2, r3]
}
 800cf38:	46c0      	nop			; (mov r8, r8)
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	46c0      	nop			; (mov r8, r8)
 800cf40:	2000398e 	.word	0x2000398e
 800cf44:	2000309c 	.word	0x2000309c
 800cf48:	20003388 	.word	0x20003388

0800cf4c <Vset_data_Refresh>:

static void Vset_data_Refresh(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
	String_Voltage[Cursor_Position]+=Flag.Encoder_BF;
 800cf50:	4b9e      	ldr	r3, [pc, #632]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	001a      	movs	r2, r3
 800cf56:	4b9e      	ldr	r3, [pc, #632]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cf58:	5c9a      	ldrb	r2, [r3, r2]
 800cf5a:	4b9e      	ldr	r3, [pc, #632]	; (800d1d4 <Vset_data_Refresh+0x288>)
 800cf5c:	69db      	ldr	r3, [r3, #28]
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	499a      	ldr	r1, [pc, #616]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cf62:	7809      	ldrb	r1, [r1, #0]
 800cf64:	18d3      	adds	r3, r2, r3
 800cf66:	b2da      	uxtb	r2, r3
 800cf68:	4b99      	ldr	r3, [pc, #612]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cf6a:	545a      	strb	r2, [r3, r1]
	if(String_Voltage[Cursor_Position]<'0')
 800cf6c:	4b97      	ldr	r3, [pc, #604]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	001a      	movs	r2, r3
 800cf72:	4b97      	ldr	r3, [pc, #604]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cf74:	5c9b      	ldrb	r3, [r3, r2]
 800cf76:	2b2f      	cmp	r3, #47	; 0x2f
 800cf78:	d900      	bls.n	800cf7c <Vset_data_Refresh+0x30>
 800cf7a:	e0a0      	b.n	800d0be <Vset_data_Refresh+0x172>
	{
		/*第三位退位*/
		if(Cursor_Position==2)
 800cf7c:	4b93      	ldr	r3, [pc, #588]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d163      	bne.n	800d04c <Vset_data_Refresh+0x100>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800cf84:	4b91      	ldr	r3, [pc, #580]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	b2da      	uxtb	r2, r3
 800cf8c:	4b8f      	ldr	r3, [pc, #572]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cf8e:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800cf90:	4b8e      	ldr	r3, [pc, #568]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	001a      	movs	r2, r3
 800cf96:	4b8e      	ldr	r3, [pc, #568]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cf98:	5c9b      	ldrb	r3, [r3, r2]
 800cf9a:	2b30      	cmp	r3, #48	; 0x30
 800cf9c:	d914      	bls.n	800cfc8 <Vset_data_Refresh+0x7c>
			{
				String_Voltage[Cursor_Position]--;
 800cf9e:	4b8b      	ldr	r3, [pc, #556]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	4a8b      	ldr	r2, [pc, #556]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cfa4:	5cd2      	ldrb	r2, [r2, r3]
 800cfa6:	3a01      	subs	r2, #1
 800cfa8:	b2d1      	uxtb	r1, r2
 800cfaa:	4a89      	ldr	r2, [pc, #548]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cfac:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800cfae:	4b87      	ldr	r3, [pc, #540]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	4b85      	ldr	r3, [pc, #532]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfb8:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800cfba:	4b84      	ldr	r3, [pc, #528]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	001a      	movs	r2, r3
 800cfc0:	4b83      	ldr	r3, [pc, #524]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cfc2:	2139      	movs	r1, #57	; 0x39
 800cfc4:	5499      	strb	r1, [r3, r2]
 800cfc6:	e07a      	b.n	800d0be <Vset_data_Refresh+0x172>

			}
			else if(String_Voltage[Cursor_Position]=='0')
 800cfc8:	4b80      	ldr	r3, [pc, #512]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	001a      	movs	r2, r3
 800cfce:	4b80      	ldr	r3, [pc, #512]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cfd0:	5c9b      	ldrb	r3, [r3, r2]
 800cfd2:	2b30      	cmp	r3, #48	; 0x30
 800cfd4:	d173      	bne.n	800d0be <Vset_data_Refresh+0x172>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800cfd6:	4b7d      	ldr	r3, [pc, #500]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	4b7b      	ldr	r3, [pc, #492]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfe0:	701a      	strb	r2, [r3, #0]
				if(String_Voltage[Cursor_Position]>'0')
 800cfe2:	4b7a      	ldr	r3, [pc, #488]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	001a      	movs	r2, r3
 800cfe8:	4b79      	ldr	r3, [pc, #484]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cfea:	5c9b      	ldrb	r3, [r3, r2]
 800cfec:	2b30      	cmp	r3, #48	; 0x30
 800cfee:	d920      	bls.n	800d032 <Vset_data_Refresh+0xe6>
				{
					String_Voltage[Cursor_Position]--;
 800cff0:	4b76      	ldr	r3, [pc, #472]	; (800d1cc <Vset_data_Refresh+0x280>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	4a76      	ldr	r2, [pc, #472]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cff6:	5cd2      	ldrb	r2, [r2, r3]
 800cff8:	3a01      	subs	r2, #1
 800cffa:	b2d1      	uxtb	r1, r2
 800cffc:	4a74      	ldr	r2, [pc, #464]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800cffe:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d000:	4b72      	ldr	r3, [pc, #456]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	3301      	adds	r3, #1
 800d006:	b2da      	uxtb	r2, r3
 800d008:	4b70      	ldr	r3, [pc, #448]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d00a:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800d00c:	4b6f      	ldr	r3, [pc, #444]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	001a      	movs	r2, r3
 800d012:	4b6f      	ldr	r3, [pc, #444]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d014:	2139      	movs	r1, #57	; 0x39
 800d016:	5499      	strb	r1, [r3, r2]
					Cursor_Position++;
 800d018:	4b6c      	ldr	r3, [pc, #432]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	3301      	adds	r3, #1
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	4b6a      	ldr	r3, [pc, #424]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d022:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='9';
 800d024:	4b69      	ldr	r3, [pc, #420]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	001a      	movs	r2, r3
 800d02a:	4b69      	ldr	r3, [pc, #420]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d02c:	2139      	movs	r1, #57	; 0x39
 800d02e:	5499      	strb	r1, [r3, r2]
 800d030:	e045      	b.n	800d0be <Vset_data_Refresh+0x172>


				}
				else
				{
					Cursor_Position+=2;
 800d032:	4b66      	ldr	r3, [pc, #408]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	3302      	adds	r3, #2
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	4b64      	ldr	r3, [pc, #400]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d03c:	701a      	strb	r2, [r3, #0]
					String_Voltage[Cursor_Position]='0';
 800d03e:	4b63      	ldr	r3, [pc, #396]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	001a      	movs	r2, r3
 800d044:	4b62      	ldr	r3, [pc, #392]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d046:	2130      	movs	r1, #48	; 0x30
 800d048:	5499      	strb	r1, [r3, r2]
 800d04a:	e038      	b.n	800d0be <Vset_data_Refresh+0x172>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1)
 800d04c:	4b5f      	ldr	r3, [pc, #380]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d12e      	bne.n	800d0b2 <Vset_data_Refresh+0x166>
		{
			Cursor_Position--;
 800d054:	4b5d      	ldr	r3, [pc, #372]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	3b01      	subs	r3, #1
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	4b5b      	ldr	r3, [pc, #364]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d05e:	701a      	strb	r2, [r3, #0]
			if(String_Voltage[Cursor_Position]>'0')
 800d060:	4b5a      	ldr	r3, [pc, #360]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	001a      	movs	r2, r3
 800d066:	4b5a      	ldr	r3, [pc, #360]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d068:	5c9b      	ldrb	r3, [r3, r2]
 800d06a:	2b30      	cmp	r3, #48	; 0x30
 800d06c:	d914      	bls.n	800d098 <Vset_data_Refresh+0x14c>
			{
				String_Voltage[Cursor_Position]--;
 800d06e:	4b57      	ldr	r3, [pc, #348]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	4a57      	ldr	r2, [pc, #348]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d074:	5cd2      	ldrb	r2, [r2, r3]
 800d076:	3a01      	subs	r2, #1
 800d078:	b2d1      	uxtb	r1, r2
 800d07a:	4a55      	ldr	r2, [pc, #340]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d07c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d07e:	4b53      	ldr	r3, [pc, #332]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	b2da      	uxtb	r2, r3
 800d086:	4b51      	ldr	r3, [pc, #324]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d088:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='9';
 800d08a:	4b50      	ldr	r3, [pc, #320]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	001a      	movs	r2, r3
 800d090:	4b4f      	ldr	r3, [pc, #316]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d092:	2139      	movs	r1, #57	; 0x39
 800d094:	5499      	strb	r1, [r3, r2]
 800d096:	e012      	b.n	800d0be <Vset_data_Refresh+0x172>

			}
			else
			{
				Cursor_Position++;
 800d098:	4b4c      	ldr	r3, [pc, #304]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	3301      	adds	r3, #1
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	4b4a      	ldr	r3, [pc, #296]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0a2:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]='0';
 800d0a4:	4b49      	ldr	r3, [pc, #292]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	001a      	movs	r2, r3
 800d0aa:	4b49      	ldr	r3, [pc, #292]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d0ac:	2130      	movs	r1, #48	; 0x30
 800d0ae:	5499      	strb	r1, [r3, r2]
 800d0b0:	e005      	b.n	800d0be <Vset_data_Refresh+0x172>
			}
		}
		else String_Voltage[Cursor_Position]='0';
 800d0b2:	4b46      	ldr	r3, [pc, #280]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	001a      	movs	r2, r3
 800d0b8:	4b45      	ldr	r3, [pc, #276]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d0ba:	2130      	movs	r1, #48	; 0x30
 800d0bc:	5499      	strb	r1, [r3, r2]
	}
	if(String_Voltage[Cursor_Position]>'9')
 800d0be:	4b43      	ldr	r3, [pc, #268]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	001a      	movs	r2, r3
 800d0c4:	4b42      	ldr	r3, [pc, #264]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d0c6:	5c9b      	ldrb	r3, [r3, r2]
 800d0c8:	2b39      	cmp	r3, #57	; 0x39
 800d0ca:	d94d      	bls.n	800d168 <Vset_data_Refresh+0x21c>
	{
		/*进位处理*/
		if(Cursor_Position!=0)
 800d0cc:	4b3f      	ldr	r3, [pc, #252]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d03f      	beq.n	800d154 <Vset_data_Refresh+0x208>
		{
			String_Voltage[Cursor_Position]='0';
 800d0d4:	4b3d      	ldr	r3, [pc, #244]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	001a      	movs	r2, r3
 800d0da:	4b3d      	ldr	r3, [pc, #244]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d0dc:	2130      	movs	r1, #48	; 0x30
 800d0de:	5499      	strb	r1, [r3, r2]
			Cursor_Position--;
 800d0e0:	4b3a      	ldr	r3, [pc, #232]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	4b38      	ldr	r3, [pc, #224]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0ea:	701a      	strb	r2, [r3, #0]
			String_Voltage[Cursor_Position]++;
 800d0ec:	4b37      	ldr	r3, [pc, #220]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	4a37      	ldr	r2, [pc, #220]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d0f2:	5cd2      	ldrb	r2, [r2, r3]
 800d0f4:	3201      	adds	r2, #1
 800d0f6:	b2d1      	uxtb	r1, r2
 800d0f8:	4a35      	ldr	r2, [pc, #212]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d0fa:	54d1      	strb	r1, [r2, r3]
			if(String_Voltage[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800d0fc:	4b33      	ldr	r3, [pc, #204]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	001a      	movs	r2, r3
 800d102:	4b33      	ldr	r3, [pc, #204]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d104:	5c9b      	ldrb	r3, [r3, r2]
 800d106:	2b39      	cmp	r3, #57	; 0x39
 800d108:	d91d      	bls.n	800d146 <Vset_data_Refresh+0x1fa>
 800d10a:	4b30      	ldr	r3, [pc, #192]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d019      	beq.n	800d146 <Vset_data_Refresh+0x1fa>
			{
				String_Voltage[Cursor_Position]='0';
 800d112:	4b2e      	ldr	r3, [pc, #184]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	001a      	movs	r2, r3
 800d118:	4b2d      	ldr	r3, [pc, #180]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d11a:	2130      	movs	r1, #48	; 0x30
 800d11c:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800d11e:	4b2b      	ldr	r3, [pc, #172]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	3b01      	subs	r3, #1
 800d124:	b2da      	uxtb	r2, r3
 800d126:	4b29      	ldr	r3, [pc, #164]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d128:	701a      	strb	r2, [r3, #0]
				String_Voltage[Cursor_Position]++;
 800d12a:	4b28      	ldr	r3, [pc, #160]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	4a28      	ldr	r2, [pc, #160]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d130:	5cd2      	ldrb	r2, [r2, r3]
 800d132:	3201      	adds	r2, #1
 800d134:	b2d1      	uxtb	r1, r2
 800d136:	4a26      	ldr	r2, [pc, #152]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d138:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d13a:	4b24      	ldr	r3, [pc, #144]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	3301      	adds	r3, #1
 800d140:	b2da      	uxtb	r2, r3
 800d142:	4b22      	ldr	r3, [pc, #136]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d144:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d146:	4b21      	ldr	r3, [pc, #132]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	3301      	adds	r3, #1
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	4b1f      	ldr	r3, [pc, #124]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	e009      	b.n	800d168 <Vset_data_Refresh+0x21c>
		}
		else if(Cursor_Position==0)
 800d154:	4b1d      	ldr	r3, [pc, #116]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d105      	bne.n	800d168 <Vset_data_Refresh+0x21c>
		{
			String_Voltage[Cursor_Position]='9';
 800d15c:	4b1b      	ldr	r3, [pc, #108]	; (800d1cc <Vset_data_Refresh+0x280>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	001a      	movs	r2, r3
 800d162:	4b1b      	ldr	r3, [pc, #108]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d164:	2139      	movs	r1, #57	; 0x39
 800d166:	5499      	strb	r1, [r3, r2]
		}

	}

	if(Inner_Mode==ENABLE)
 800d168:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <Vset_data_Refresh+0x28c>)
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d12a      	bne.n	800d1c6 <Vset_data_Refresh+0x27a>
	{
		/*确认设定电压，发送给mini board*/
		Set_Voltage = String_To_Float(String_Voltage)*100;
 800d170:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <Vset_data_Refresh+0x284>)
 800d172:	0018      	movs	r0, r3
 800d174:	f001 f9c2 	bl	800e4fc <String_To_Float>
 800d178:	1c03      	adds	r3, r0, #0
 800d17a:	4918      	ldr	r1, [pc, #96]	; (800d1dc <Vset_data_Refresh+0x290>)
 800d17c:	1c18      	adds	r0, r3, #0
 800d17e:	f7f3 fd6f 	bl	8000c60 <__aeabi_fmul>
 800d182:	1c03      	adds	r3, r0, #0
 800d184:	1c18      	adds	r0, r3, #0
 800d186:	f7f3 f9cf 	bl	8000528 <__aeabi_f2uiz>
 800d18a:	0003      	movs	r3, r0
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	4b14      	ldr	r3, [pc, #80]	; (800d1e0 <Vset_data_Refresh+0x294>)
 800d190:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 14900) Set_Voltage = 14900;//150V
 800d192:	4b13      	ldr	r3, [pc, #76]	; (800d1e0 <Vset_data_Refresh+0x294>)
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	4a13      	ldr	r2, [pc, #76]	; (800d1e4 <Vset_data_Refresh+0x298>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d902      	bls.n	800d1a2 <Vset_data_Refresh+0x256>
 800d19c:	4b10      	ldr	r3, [pc, #64]	; (800d1e0 <Vset_data_Refresh+0x294>)
 800d19e:	4a11      	ldr	r2, [pc, #68]	; (800d1e4 <Vset_data_Refresh+0x298>)
 800d1a0:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage <100||Set_Voltage==100)	Set_Voltage=100;
 800d1a2:	4b0f      	ldr	r3, [pc, #60]	; (800d1e0 <Vset_data_Refresh+0x294>)
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	2b63      	cmp	r3, #99	; 0x63
 800d1a8:	d903      	bls.n	800d1b2 <Vset_data_Refresh+0x266>
 800d1aa:	4b0d      	ldr	r3, [pc, #52]	; (800d1e0 <Vset_data_Refresh+0x294>)
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	2b64      	cmp	r3, #100	; 0x64
 800d1b0:	d102      	bne.n	800d1b8 <Vset_data_Refresh+0x26c>
 800d1b2:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <Vset_data_Refresh+0x294>)
 800d1b4:	2264      	movs	r2, #100	; 0x64
 800d1b6:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,4,Set_Voltage);
 800d1b8:	4b09      	ldr	r3, [pc, #36]	; (800d1e0 <Vset_data_Refresh+0x294>)
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	001a      	movs	r2, r3
 800d1be:	2104      	movs	r1, #4
 800d1c0:	2001      	movs	r0, #1
 800d1c2:	f7ff fb59 	bl	800c878 <DAC_Cmd_send>

	}

}
 800d1c6:	46c0      	nop			; (mov r8, r8)
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	2000398e 	.word	0x2000398e
 800d1d0:	2000305c 	.word	0x2000305c
 800d1d4:	20003388 	.word	0x20003388
 800d1d8:	20003986 	.word	0x20003986
 800d1dc:	42c80000 	.word	0x42c80000
 800d1e0:	20002fda 	.word	0x20002fda
 800d1e4:	00003a34 	.word	0x00003a34

0800d1e8 <Iset_data_Refresh>:


static void Iset_data_Refresh(void)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	af00      	add	r7, sp, #0
	String_Current[Cursor_Position-9]+=Flag.Encoder_BF;
 800d1ec:	4ba1      	ldr	r3, [pc, #644]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	3b09      	subs	r3, #9
 800d1f2:	4aa1      	ldr	r2, [pc, #644]	; (800d478 <Iset_data_Refresh+0x290>)
 800d1f4:	5cd1      	ldrb	r1, [r2, r3]
 800d1f6:	4ba1      	ldr	r3, [pc, #644]	; (800d47c <Iset_data_Refresh+0x294>)
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	4b9d      	ldr	r3, [pc, #628]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	3b09      	subs	r3, #9
 800d202:	188a      	adds	r2, r1, r2
 800d204:	b2d1      	uxtb	r1, r2
 800d206:	4a9c      	ldr	r2, [pc, #624]	; (800d478 <Iset_data_Refresh+0x290>)
 800d208:	54d1      	strb	r1, [r2, r3]
	if(String_Current[Cursor_Position-9]<'0')//退位
 800d20a:	4b9a      	ldr	r3, [pc, #616]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	3b09      	subs	r3, #9
 800d210:	4a99      	ldr	r2, [pc, #612]	; (800d478 <Iset_data_Refresh+0x290>)
 800d212:	5cd3      	ldrb	r3, [r2, r3]
 800d214:	2b2f      	cmp	r3, #47	; 0x2f
 800d216:	d900      	bls.n	800d21a <Iset_data_Refresh+0x32>
 800d218:	e0a3      	b.n	800d362 <Iset_data_Refresh+0x17a>
	{
		/*第三位退位*/
		if(Cursor_Position==2+9)
 800d21a:	4b96      	ldr	r3, [pc, #600]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b0b      	cmp	r3, #11
 800d220:	d165      	bne.n	800d2ee <Iset_data_Refresh+0x106>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d222:	4b94      	ldr	r3, [pc, #592]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3b01      	subs	r3, #1
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b92      	ldr	r3, [pc, #584]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d22c:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d22e:	4b91      	ldr	r3, [pc, #580]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	3b09      	subs	r3, #9
 800d234:	4a90      	ldr	r2, [pc, #576]	; (800d478 <Iset_data_Refresh+0x290>)
 800d236:	5cd3      	ldrb	r3, [r2, r3]
 800d238:	2b30      	cmp	r3, #48	; 0x30
 800d23a:	d915      	bls.n	800d268 <Iset_data_Refresh+0x80>
			{
				String_Current[Cursor_Position-9]--;
 800d23c:	4b8d      	ldr	r3, [pc, #564]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	3b09      	subs	r3, #9
 800d242:	4a8d      	ldr	r2, [pc, #564]	; (800d478 <Iset_data_Refresh+0x290>)
 800d244:	5cd2      	ldrb	r2, [r2, r3]
 800d246:	3a01      	subs	r2, #1
 800d248:	b2d1      	uxtb	r1, r2
 800d24a:	4a8b      	ldr	r2, [pc, #556]	; (800d478 <Iset_data_Refresh+0x290>)
 800d24c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d24e:	4b89      	ldr	r3, [pc, #548]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	b2da      	uxtb	r2, r3
 800d256:	4b87      	ldr	r3, [pc, #540]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d258:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d25a:	4b86      	ldr	r3, [pc, #536]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	3b09      	subs	r3, #9
 800d260:	4a85      	ldr	r2, [pc, #532]	; (800d478 <Iset_data_Refresh+0x290>)
 800d262:	2139      	movs	r1, #57	; 0x39
 800d264:	54d1      	strb	r1, [r2, r3]
 800d266:	e07c      	b.n	800d362 <Iset_data_Refresh+0x17a>

			}
			else if(String_Current[Cursor_Position-9]=='0')
 800d268:	4b82      	ldr	r3, [pc, #520]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	3b09      	subs	r3, #9
 800d26e:	4a82      	ldr	r2, [pc, #520]	; (800d478 <Iset_data_Refresh+0x290>)
 800d270:	5cd3      	ldrb	r3, [r2, r3]
 800d272:	2b30      	cmp	r3, #48	; 0x30
 800d274:	d175      	bne.n	800d362 <Iset_data_Refresh+0x17a>
			{
				/*否则再看上上位是否大于0*/
				Cursor_Position--;
 800d276:	4b7f      	ldr	r3, [pc, #508]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	4b7d      	ldr	r3, [pc, #500]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d280:	701a      	strb	r2, [r3, #0]
				if(String_Current[Cursor_Position-9]>'0')
 800d282:	4b7c      	ldr	r3, [pc, #496]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	3b09      	subs	r3, #9
 800d288:	4a7b      	ldr	r2, [pc, #492]	; (800d478 <Iset_data_Refresh+0x290>)
 800d28a:	5cd3      	ldrb	r3, [r2, r3]
 800d28c:	2b30      	cmp	r3, #48	; 0x30
 800d28e:	d921      	bls.n	800d2d4 <Iset_data_Refresh+0xec>
				{
					String_Current[Cursor_Position-9]--;
 800d290:	4b78      	ldr	r3, [pc, #480]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	3b09      	subs	r3, #9
 800d296:	4a78      	ldr	r2, [pc, #480]	; (800d478 <Iset_data_Refresh+0x290>)
 800d298:	5cd2      	ldrb	r2, [r2, r3]
 800d29a:	3a01      	subs	r2, #1
 800d29c:	b2d1      	uxtb	r1, r2
 800d29e:	4a76      	ldr	r2, [pc, #472]	; (800d478 <Iset_data_Refresh+0x290>)
 800d2a0:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d2a2:	4b74      	ldr	r3, [pc, #464]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	4b72      	ldr	r3, [pc, #456]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2ac:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d2ae:	4b71      	ldr	r3, [pc, #452]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	3b09      	subs	r3, #9
 800d2b4:	4a70      	ldr	r2, [pc, #448]	; (800d478 <Iset_data_Refresh+0x290>)
 800d2b6:	2139      	movs	r1, #57	; 0x39
 800d2b8:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d2ba:	4b6e      	ldr	r3, [pc, #440]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	4b6c      	ldr	r3, [pc, #432]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2c4:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='9';
 800d2c6:	4b6b      	ldr	r3, [pc, #428]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	3b09      	subs	r3, #9
 800d2cc:	4a6a      	ldr	r2, [pc, #424]	; (800d478 <Iset_data_Refresh+0x290>)
 800d2ce:	2139      	movs	r1, #57	; 0x39
 800d2d0:	54d1      	strb	r1, [r2, r3]
 800d2d2:	e046      	b.n	800d362 <Iset_data_Refresh+0x17a>


				}
				else
				{
					Cursor_Position+=2;
 800d2d4:	4b67      	ldr	r3, [pc, #412]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	3302      	adds	r3, #2
 800d2da:	b2da      	uxtb	r2, r3
 800d2dc:	4b65      	ldr	r3, [pc, #404]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2de:	701a      	strb	r2, [r3, #0]
					String_Current[Cursor_Position-9]='0';
 800d2e0:	4b64      	ldr	r3, [pc, #400]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	3b09      	subs	r3, #9
 800d2e6:	4a64      	ldr	r2, [pc, #400]	; (800d478 <Iset_data_Refresh+0x290>)
 800d2e8:	2130      	movs	r1, #48	; 0x30
 800d2ea:	54d1      	strb	r1, [r2, r3]
 800d2ec:	e039      	b.n	800d362 <Iset_data_Refresh+0x17a>
				}
			}

		}
		/*第二位退位*/
		else if(Cursor_Position==1+9)
 800d2ee:	4b61      	ldr	r3, [pc, #388]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	2b0a      	cmp	r3, #10
 800d2f4:	d12f      	bne.n	800d356 <Iset_data_Refresh+0x16e>
		{
			Cursor_Position--;
 800d2f6:	4b5f      	ldr	r3, [pc, #380]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4b5d      	ldr	r3, [pc, #372]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d300:	701a      	strb	r2, [r3, #0]
			if(String_Current[Cursor_Position-9]>'0')
 800d302:	4b5c      	ldr	r3, [pc, #368]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	3b09      	subs	r3, #9
 800d308:	4a5b      	ldr	r2, [pc, #364]	; (800d478 <Iset_data_Refresh+0x290>)
 800d30a:	5cd3      	ldrb	r3, [r2, r3]
 800d30c:	2b30      	cmp	r3, #48	; 0x30
 800d30e:	d915      	bls.n	800d33c <Iset_data_Refresh+0x154>
			{
				String_Current[Cursor_Position-9]--;
 800d310:	4b58      	ldr	r3, [pc, #352]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	3b09      	subs	r3, #9
 800d316:	4a58      	ldr	r2, [pc, #352]	; (800d478 <Iset_data_Refresh+0x290>)
 800d318:	5cd2      	ldrb	r2, [r2, r3]
 800d31a:	3a01      	subs	r2, #1
 800d31c:	b2d1      	uxtb	r1, r2
 800d31e:	4a56      	ldr	r2, [pc, #344]	; (800d478 <Iset_data_Refresh+0x290>)
 800d320:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d322:	4b54      	ldr	r3, [pc, #336]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	3301      	adds	r3, #1
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	4b52      	ldr	r3, [pc, #328]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d32c:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='9';
 800d32e:	4b51      	ldr	r3, [pc, #324]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	3b09      	subs	r3, #9
 800d334:	4a50      	ldr	r2, [pc, #320]	; (800d478 <Iset_data_Refresh+0x290>)
 800d336:	2139      	movs	r1, #57	; 0x39
 800d338:	54d1      	strb	r1, [r2, r3]
 800d33a:	e012      	b.n	800d362 <Iset_data_Refresh+0x17a>

			}
			else
			{
				Cursor_Position++;
 800d33c:	4b4d      	ldr	r3, [pc, #308]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	3301      	adds	r3, #1
 800d342:	b2da      	uxtb	r2, r3
 800d344:	4b4b      	ldr	r3, [pc, #300]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d346:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]='0';
 800d348:	4b4a      	ldr	r3, [pc, #296]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	3b09      	subs	r3, #9
 800d34e:	4a4a      	ldr	r2, [pc, #296]	; (800d478 <Iset_data_Refresh+0x290>)
 800d350:	2130      	movs	r1, #48	; 0x30
 800d352:	54d1      	strb	r1, [r2, r3]
 800d354:	e005      	b.n	800d362 <Iset_data_Refresh+0x17a>
			}
		}
		else String_Current[Cursor_Position-9]='0';
 800d356:	4b47      	ldr	r3, [pc, #284]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	3b09      	subs	r3, #9
 800d35c:	4a46      	ldr	r2, [pc, #280]	; (800d478 <Iset_data_Refresh+0x290>)
 800d35e:	2130      	movs	r1, #48	; 0x30
 800d360:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_Current[Cursor_Position-9]>'9')
 800d362:	4b44      	ldr	r3, [pc, #272]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	3b09      	subs	r3, #9
 800d368:	4a43      	ldr	r2, [pc, #268]	; (800d478 <Iset_data_Refresh+0x290>)
 800d36a:	5cd3      	ldrb	r3, [r2, r3]
 800d36c:	2b39      	cmp	r3, #57	; 0x39
 800d36e:	d94f      	bls.n	800d410 <Iset_data_Refresh+0x228>
	{

		if(Cursor_Position!=0)
 800d370:	4b40      	ldr	r3, [pc, #256]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d041      	beq.n	800d3fc <Iset_data_Refresh+0x214>
		{
			String_Current[Cursor_Position-9]='0';
 800d378:	4b3e      	ldr	r3, [pc, #248]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	3b09      	subs	r3, #9
 800d37e:	4a3e      	ldr	r2, [pc, #248]	; (800d478 <Iset_data_Refresh+0x290>)
 800d380:	2130      	movs	r1, #48	; 0x30
 800d382:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d384:	4b3b      	ldr	r3, [pc, #236]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	3b01      	subs	r3, #1
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	4b39      	ldr	r3, [pc, #228]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d38e:	701a      	strb	r2, [r3, #0]
			String_Current[Cursor_Position-9]++;
 800d390:	4b38      	ldr	r3, [pc, #224]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	3b09      	subs	r3, #9
 800d396:	4a38      	ldr	r2, [pc, #224]	; (800d478 <Iset_data_Refresh+0x290>)
 800d398:	5cd2      	ldrb	r2, [r2, r3]
 800d39a:	3201      	adds	r2, #1
 800d39c:	b2d1      	uxtb	r1, r2
 800d39e:	4a36      	ldr	r2, [pc, #216]	; (800d478 <Iset_data_Refresh+0x290>)
 800d3a0:	54d1      	strb	r1, [r2, r3]
			if(String_Current[Cursor_Position-9]>'9'&&Cursor_Position!=0)//下一位也进位
 800d3a2:	4b34      	ldr	r3, [pc, #208]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	3b09      	subs	r3, #9
 800d3a8:	4a33      	ldr	r2, [pc, #204]	; (800d478 <Iset_data_Refresh+0x290>)
 800d3aa:	5cd3      	ldrb	r3, [r2, r3]
 800d3ac:	2b39      	cmp	r3, #57	; 0x39
 800d3ae:	d91e      	bls.n	800d3ee <Iset_data_Refresh+0x206>
 800d3b0:	4b30      	ldr	r3, [pc, #192]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01a      	beq.n	800d3ee <Iset_data_Refresh+0x206>
			{
				String_Current[Cursor_Position-9]='0';
 800d3b8:	4b2e      	ldr	r3, [pc, #184]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	3b09      	subs	r3, #9
 800d3be:	4a2e      	ldr	r2, [pc, #184]	; (800d478 <Iset_data_Refresh+0x290>)
 800d3c0:	2130      	movs	r1, #48	; 0x30
 800d3c2:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d3c4:	4b2b      	ldr	r3, [pc, #172]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	4b29      	ldr	r3, [pc, #164]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3ce:	701a      	strb	r2, [r3, #0]
				String_Current[Cursor_Position-9]++;
 800d3d0:	4b28      	ldr	r3, [pc, #160]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	3b09      	subs	r3, #9
 800d3d6:	4a28      	ldr	r2, [pc, #160]	; (800d478 <Iset_data_Refresh+0x290>)
 800d3d8:	5cd2      	ldrb	r2, [r2, r3]
 800d3da:	3201      	adds	r2, #1
 800d3dc:	b2d1      	uxtb	r1, r2
 800d3de:	4a26      	ldr	r2, [pc, #152]	; (800d478 <Iset_data_Refresh+0x290>)
 800d3e0:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d3e2:	4b24      	ldr	r3, [pc, #144]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	4b22      	ldr	r3, [pc, #136]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3ec:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d3ee:	4b21      	ldr	r3, [pc, #132]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	4b1f      	ldr	r3, [pc, #124]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	e009      	b.n	800d410 <Iset_data_Refresh+0x228>
		}
		else if(Cursor_Position==0)
 800d3fc:	4b1d      	ldr	r3, [pc, #116]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d105      	bne.n	800d410 <Iset_data_Refresh+0x228>
		{
			String_Current[Cursor_Position-9]='9';
 800d404:	4b1b      	ldr	r3, [pc, #108]	; (800d474 <Iset_data_Refresh+0x28c>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	3b09      	subs	r3, #9
 800d40a:	4a1b      	ldr	r2, [pc, #108]	; (800d478 <Iset_data_Refresh+0x290>)
 800d40c:	2139      	movs	r1, #57	; 0x39
 800d40e:	54d1      	strb	r1, [r2, r3]
		}

	}
	if(Inner_Mode==ENABLE)
 800d410:	4b1b      	ldr	r3, [pc, #108]	; (800d480 <Iset_data_Refresh+0x298>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d12a      	bne.n	800d46e <Iset_data_Refresh+0x286>
	{
		/*确认设定电压，发送给mini board*/
		Set_Current = String_To_Float(String_Current)*100;
 800d418:	4b17      	ldr	r3, [pc, #92]	; (800d478 <Iset_data_Refresh+0x290>)
 800d41a:	0018      	movs	r0, r3
 800d41c:	f001 f86e 	bl	800e4fc <String_To_Float>
 800d420:	1c03      	adds	r3, r0, #0
 800d422:	4918      	ldr	r1, [pc, #96]	; (800d484 <Iset_data_Refresh+0x29c>)
 800d424:	1c18      	adds	r0, r3, #0
 800d426:	f7f3 fc1b 	bl	8000c60 <__aeabi_fmul>
 800d42a:	1c03      	adds	r3, r0, #0
 800d42c:	1c18      	adds	r0, r3, #0
 800d42e:	f7f3 f87b 	bl	8000528 <__aeabi_f2uiz>
 800d432:	0003      	movs	r3, r0
 800d434:	b29a      	uxth	r2, r3
 800d436:	4b14      	ldr	r3, [pc, #80]	; (800d488 <Iset_data_Refresh+0x2a0>)
 800d438:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 4900) Set_Current = 4900;//150V
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <Iset_data_Refresh+0x2a0>)
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	4a13      	ldr	r2, [pc, #76]	; (800d48c <Iset_data_Refresh+0x2a4>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d902      	bls.n	800d44a <Iset_data_Refresh+0x262>
 800d444:	4b10      	ldr	r3, [pc, #64]	; (800d488 <Iset_data_Refresh+0x2a0>)
 800d446:	4a11      	ldr	r2, [pc, #68]	; (800d48c <Iset_data_Refresh+0x2a4>)
 800d448:	801a      	strh	r2, [r3, #0]
		if(Set_Current <100||Set_Current==100)	Set_Current=100;
 800d44a:	4b0f      	ldr	r3, [pc, #60]	; (800d488 <Iset_data_Refresh+0x2a0>)
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	2b63      	cmp	r3, #99	; 0x63
 800d450:	d903      	bls.n	800d45a <Iset_data_Refresh+0x272>
 800d452:	4b0d      	ldr	r3, [pc, #52]	; (800d488 <Iset_data_Refresh+0x2a0>)
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	2b64      	cmp	r3, #100	; 0x64
 800d458:	d102      	bne.n	800d460 <Iset_data_Refresh+0x278>
 800d45a:	4b0b      	ldr	r3, [pc, #44]	; (800d488 <Iset_data_Refresh+0x2a0>)
 800d45c:	2264      	movs	r2, #100	; 0x64
 800d45e:	801a      	strh	r2, [r3, #0]
		DAC_Cmd_send(1,5,Set_Current);
 800d460:	4b09      	ldr	r3, [pc, #36]	; (800d488 <Iset_data_Refresh+0x2a0>)
 800d462:	881b      	ldrh	r3, [r3, #0]
 800d464:	001a      	movs	r2, r3
 800d466:	2105      	movs	r1, #5
 800d468:	2001      	movs	r0, #1
 800d46a:	f7ff fa05 	bl	800c878 <DAC_Cmd_send>

	}

}
 800d46e:	46c0      	nop			; (mov r8, r8)
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	2000398e 	.word	0x2000398e
 800d478:	20003064 	.word	0x20003064
 800d47c:	20003388 	.word	0x20003388
 800d480:	20003986 	.word	0x20003986
 800d484:	42c80000 	.word	0x42c80000
 800d488:	20002fdc 	.word	0x20002fdc
 800d48c:	00001324 	.word	0x00001324

0800d490 <VRate_data_Refresh>:



static void VRate_data_Refresh(void)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	af00      	add	r7, sp, #0
	String_V_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800d494:	4bdc      	ldr	r3, [pc, #880]	; (800d808 <VRate_data_Refresh+0x378>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	3b06      	subs	r3, #6
 800d49a:	4adc      	ldr	r2, [pc, #880]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d49c:	5cd1      	ldrb	r1, [r2, r3]
 800d49e:	4bdc      	ldr	r3, [pc, #880]	; (800d810 <VRate_data_Refresh+0x380>)
 800d4a0:	69db      	ldr	r3, [r3, #28]
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	4bd8      	ldr	r3, [pc, #864]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	3b06      	subs	r3, #6
 800d4aa:	188a      	adds	r2, r1, r2
 800d4ac:	b2d1      	uxtb	r1, r2
 800d4ae:	4ad7      	ldr	r2, [pc, #860]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d4b0:	54d1      	strb	r1, [r2, r3]
	/*退位处理*/
	if(String_V_Rate[Cursor_Position-6]<'0')
 800d4b2:	4bd5      	ldr	r3, [pc, #852]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	3b06      	subs	r3, #6
 800d4b8:	4ad4      	ldr	r2, [pc, #848]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d4ba:	5cd3      	ldrb	r3, [r2, r3]
 800d4bc:	2b2f      	cmp	r3, #47	; 0x2f
 800d4be:	d900      	bls.n	800d4c2 <VRate_data_Refresh+0x32>
 800d4c0:	e0c2      	b.n	800d648 <VRate_data_Refresh+0x1b8>
	{

		/*小数第二位退位*/
		if(Cursor_Position==3+6)
 800d4c2:	4bd1      	ldr	r3, [pc, #836]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b09      	cmp	r3, #9
 800d4c8:	d172      	bne.n	800d5b0 <VRate_data_Refresh+0x120>
		{
			/*先看上一位是否大于0*/
			Cursor_Position--;
 800d4ca:	4bcf      	ldr	r3, [pc, #828]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	4bcd      	ldr	r3, [pc, #820]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4d4:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')
 800d4d6:	4bcc      	ldr	r3, [pc, #816]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	3b06      	subs	r3, #6
 800d4dc:	4acb      	ldr	r2, [pc, #812]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d4de:	5cd3      	ldrb	r3, [r2, r3]
 800d4e0:	2b30      	cmp	r3, #48	; 0x30
 800d4e2:	d915      	bls.n	800d510 <VRate_data_Refresh+0x80>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d4e4:	4bc8      	ldr	r3, [pc, #800]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	3b06      	subs	r3, #6
 800d4ea:	4ac8      	ldr	r2, [pc, #800]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d4ec:	5cd2      	ldrb	r2, [r2, r3]
 800d4ee:	3a01      	subs	r2, #1
 800d4f0:	b2d1      	uxtb	r1, r2
 800d4f2:	4ac6      	ldr	r2, [pc, #792]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d4f4:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d4f6:	4bc4      	ldr	r3, [pc, #784]	; (800d808 <VRate_data_Refresh+0x378>)
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	4bc2      	ldr	r3, [pc, #776]	; (800d808 <VRate_data_Refresh+0x378>)
 800d500:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d502:	4bc1      	ldr	r3, [pc, #772]	; (800d808 <VRate_data_Refresh+0x378>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	3b06      	subs	r3, #6
 800d508:	4ac0      	ldr	r2, [pc, #768]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d50a:	2139      	movs	r1, #57	; 0x39
 800d50c:	54d1      	strb	r1, [r2, r3]
 800d50e:	e09b      	b.n	800d648 <VRate_data_Refresh+0x1b8>

			}
			else if(String_V_Rate[Cursor_Position-6]=='0')
 800d510:	4bbd      	ldr	r3, [pc, #756]	; (800d808 <VRate_data_Refresh+0x378>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	3b06      	subs	r3, #6
 800d516:	4abd      	ldr	r2, [pc, #756]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d518:	5cd3      	ldrb	r3, [r2, r3]
 800d51a:	2b30      	cmp	r3, #48	; 0x30
 800d51c:	d000      	beq.n	800d520 <VRate_data_Refresh+0x90>
 800d51e:	e093      	b.n	800d648 <VRate_data_Refresh+0x1b8>
			{
				/*否则再看个位是否大于0*/
				Cursor_Position--;
 800d520:	4bb9      	ldr	r3, [pc, #740]	; (800d808 <VRate_data_Refresh+0x378>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	3b01      	subs	r3, #1
 800d526:	b2da      	uxtb	r2, r3
 800d528:	4bb7      	ldr	r3, [pc, #732]	; (800d808 <VRate_data_Refresh+0x378>)
 800d52a:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d52c:	4bb6      	ldr	r3, [pc, #728]	; (800d808 <VRate_data_Refresh+0x378>)
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	3b01      	subs	r3, #1
 800d532:	b2da      	uxtb	r2, r3
 800d534:	4bb4      	ldr	r3, [pc, #720]	; (800d808 <VRate_data_Refresh+0x378>)
 800d536:	701a      	strb	r2, [r3, #0]
				if(String_V_Rate[Cursor_Position-6]>'0')
 800d538:	4bb3      	ldr	r3, [pc, #716]	; (800d808 <VRate_data_Refresh+0x378>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	3b06      	subs	r3, #6
 800d53e:	4ab3      	ldr	r2, [pc, #716]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d540:	5cd3      	ldrb	r3, [r2, r3]
 800d542:	2b30      	cmp	r3, #48	; 0x30
 800d544:	d927      	bls.n	800d596 <VRate_data_Refresh+0x106>
				{
					String_V_Rate[Cursor_Position-6]--;
 800d546:	4bb0      	ldr	r3, [pc, #704]	; (800d808 <VRate_data_Refresh+0x378>)
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	3b06      	subs	r3, #6
 800d54c:	4aaf      	ldr	r2, [pc, #700]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d54e:	5cd2      	ldrb	r2, [r2, r3]
 800d550:	3a01      	subs	r2, #1
 800d552:	b2d1      	uxtb	r1, r2
 800d554:	4aad      	ldr	r2, [pc, #692]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d556:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d558:	4bab      	ldr	r3, [pc, #684]	; (800d808 <VRate_data_Refresh+0x378>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	3301      	adds	r3, #1
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	4ba9      	ldr	r3, [pc, #676]	; (800d808 <VRate_data_Refresh+0x378>)
 800d562:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d564:	4ba8      	ldr	r3, [pc, #672]	; (800d808 <VRate_data_Refresh+0x378>)
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	3301      	adds	r3, #1
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	4ba6      	ldr	r3, [pc, #664]	; (800d808 <VRate_data_Refresh+0x378>)
 800d56e:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数一位
 800d570:	4ba5      	ldr	r3, [pc, #660]	; (800d808 <VRate_data_Refresh+0x378>)
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	3b06      	subs	r3, #6
 800d576:	4aa5      	ldr	r2, [pc, #660]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d578:	2139      	movs	r1, #57	; 0x39
 800d57a:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d57c:	4ba2      	ldr	r3, [pc, #648]	; (800d808 <VRate_data_Refresh+0x378>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	b2da      	uxtb	r2, r3
 800d584:	4ba0      	ldr	r3, [pc, #640]	; (800d808 <VRate_data_Refresh+0x378>)
 800d586:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';//小数二位
 800d588:	4b9f      	ldr	r3, [pc, #636]	; (800d808 <VRate_data_Refresh+0x378>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	3b06      	subs	r3, #6
 800d58e:	4a9f      	ldr	r2, [pc, #636]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d590:	2139      	movs	r1, #57	; 0x39
 800d592:	54d1      	strb	r1, [r2, r3]
 800d594:	e058      	b.n	800d648 <VRate_data_Refresh+0x1b8>


				}
				else
				{
					Cursor_Position+=3;
 800d596:	4b9c      	ldr	r3, [pc, #624]	; (800d808 <VRate_data_Refresh+0x378>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	3303      	adds	r3, #3
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	4b9a      	ldr	r3, [pc, #616]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5a0:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';
 800d5a2:	4b99      	ldr	r3, [pc, #612]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	3b06      	subs	r3, #6
 800d5a8:	4a98      	ldr	r2, [pc, #608]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d5aa:	2130      	movs	r1, #48	; 0x30
 800d5ac:	54d1      	strb	r1, [r2, r3]
 800d5ae:	e04b      	b.n	800d648 <VRate_data_Refresh+0x1b8>
				}
			}

		}
		/*小数第一位退位*/
		else if(Cursor_Position==2+6)
 800d5b0:	4b95      	ldr	r3, [pc, #596]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	2b08      	cmp	r3, #8
 800d5b6:	d141      	bne.n	800d63c <VRate_data_Refresh+0x1ac>
		{
			Cursor_Position--;
 800d5b8:	4b93      	ldr	r3, [pc, #588]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	4b91      	ldr	r3, [pc, #580]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5c2:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d5c4:	4b90      	ldr	r3, [pc, #576]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	4b8e      	ldr	r3, [pc, #568]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5ce:	701a      	strb	r2, [r3, #0]
			if(String_V_Rate[Cursor_Position-6]>'0')//个位
 800d5d0:	4b8d      	ldr	r3, [pc, #564]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	3b06      	subs	r3, #6
 800d5d6:	4a8d      	ldr	r2, [pc, #564]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d5d8:	5cd3      	ldrb	r3, [r2, r3]
 800d5da:	2b30      	cmp	r3, #48	; 0x30
 800d5dc:	d91b      	bls.n	800d616 <VRate_data_Refresh+0x186>
			{
				String_V_Rate[Cursor_Position-6]--;
 800d5de:	4b8a      	ldr	r3, [pc, #552]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	3b06      	subs	r3, #6
 800d5e4:	4a89      	ldr	r2, [pc, #548]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d5e6:	5cd2      	ldrb	r2, [r2, r3]
 800d5e8:	3a01      	subs	r2, #1
 800d5ea:	b2d1      	uxtb	r1, r2
 800d5ec:	4a87      	ldr	r2, [pc, #540]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d5ee:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d5f0:	4b85      	ldr	r3, [pc, #532]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	b2da      	uxtb	r2, r3
 800d5f8:	4b83      	ldr	r3, [pc, #524]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5fa:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d5fc:	4b82      	ldr	r3, [pc, #520]	; (800d808 <VRate_data_Refresh+0x378>)
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	3301      	adds	r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	4b80      	ldr	r3, [pc, #512]	; (800d808 <VRate_data_Refresh+0x378>)
 800d606:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d608:	4b7f      	ldr	r3, [pc, #508]	; (800d808 <VRate_data_Refresh+0x378>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	3b06      	subs	r3, #6
 800d60e:	4a7f      	ldr	r2, [pc, #508]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d610:	2139      	movs	r1, #57	; 0x39
 800d612:	54d1      	strb	r1, [r2, r3]
 800d614:	e018      	b.n	800d648 <VRate_data_Refresh+0x1b8>

			}
			else
			{
				Cursor_Position++;
 800d616:	4b7c      	ldr	r3, [pc, #496]	; (800d808 <VRate_data_Refresh+0x378>)
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	3301      	adds	r3, #1
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	4b7a      	ldr	r3, [pc, #488]	; (800d808 <VRate_data_Refresh+0x378>)
 800d620:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d622:	4b79      	ldr	r3, [pc, #484]	; (800d808 <VRate_data_Refresh+0x378>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	3301      	adds	r3, #1
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	4b77      	ldr	r3, [pc, #476]	; (800d808 <VRate_data_Refresh+0x378>)
 800d62c:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='0';
 800d62e:	4b76      	ldr	r3, [pc, #472]	; (800d808 <VRate_data_Refresh+0x378>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	3b06      	subs	r3, #6
 800d634:	4a75      	ldr	r2, [pc, #468]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d636:	2130      	movs	r1, #48	; 0x30
 800d638:	54d1      	strb	r1, [r2, r3]
 800d63a:	e005      	b.n	800d648 <VRate_data_Refresh+0x1b8>
			}
		}
		else String_V_Rate[Cursor_Position-6]='0';
 800d63c:	4b72      	ldr	r3, [pc, #456]	; (800d808 <VRate_data_Refresh+0x378>)
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	3b06      	subs	r3, #6
 800d642:	4a72      	ldr	r2, [pc, #456]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d644:	2130      	movs	r1, #48	; 0x30
 800d646:	54d1      	strb	r1, [r2, r3]


	}
	/*进位处理*/
	if(String_V_Rate[Cursor_Position-6]>'9')
 800d648:	4b6f      	ldr	r3, [pc, #444]	; (800d808 <VRate_data_Refresh+0x378>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	3b06      	subs	r3, #6
 800d64e:	4a6f      	ldr	r2, [pc, #444]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d650:	5cd3      	ldrb	r3, [r2, r3]
 800d652:	2b39      	cmp	r3, #57	; 0x39
 800d654:	d800      	bhi.n	800d658 <VRate_data_Refresh+0x1c8>
 800d656:	e0e7      	b.n	800d828 <VRate_data_Refresh+0x398>
	{

		if(Cursor_Position==2+6)
 800d658:	4b6b      	ldr	r3, [pc, #428]	; (800d808 <VRate_data_Refresh+0x378>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b08      	cmp	r3, #8
 800d65e:	d146      	bne.n	800d6ee <VRate_data_Refresh+0x25e>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d660:	4b69      	ldr	r3, [pc, #420]	; (800d808 <VRate_data_Refresh+0x378>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	3b06      	subs	r3, #6
 800d666:	4a69      	ldr	r2, [pc, #420]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d668:	2130      	movs	r1, #48	; 0x30
 800d66a:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d66c:	4b66      	ldr	r3, [pc, #408]	; (800d808 <VRate_data_Refresh+0x378>)
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	3b01      	subs	r3, #1
 800d672:	b2da      	uxtb	r2, r3
 800d674:	4b64      	ldr	r3, [pc, #400]	; (800d808 <VRate_data_Refresh+0x378>)
 800d676:	701a      	strb	r2, [r3, #0]
			Cursor_Position--;
 800d678:	4b63      	ldr	r3, [pc, #396]	; (800d808 <VRate_data_Refresh+0x378>)
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	4b61      	ldr	r3, [pc, #388]	; (800d808 <VRate_data_Refresh+0x378>)
 800d682:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d684:	4b60      	ldr	r3, [pc, #384]	; (800d808 <VRate_data_Refresh+0x378>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	3b06      	subs	r3, #6
 800d68a:	4a60      	ldr	r2, [pc, #384]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d68c:	5cd2      	ldrb	r2, [r2, r3]
 800d68e:	3201      	adds	r2, #1
 800d690:	b2d1      	uxtb	r1, r2
 800d692:	4a5e      	ldr	r2, [pc, #376]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d694:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//下一位也进位
 800d696:	4b5c      	ldr	r3, [pc, #368]	; (800d808 <VRate_data_Refresh+0x378>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	3b06      	subs	r3, #6
 800d69c:	4a5b      	ldr	r2, [pc, #364]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d69e:	5cd3      	ldrb	r3, [r2, r3]
 800d6a0:	2b39      	cmp	r3, #57	; 0x39
 800d6a2:	d917      	bls.n	800d6d4 <VRate_data_Refresh+0x244>
			{
				String_V_Rate[Cursor_Position-6]='9';
 800d6a4:	4b58      	ldr	r3, [pc, #352]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	3b06      	subs	r3, #6
 800d6aa:	4a58      	ldr	r2, [pc, #352]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d6ac:	2139      	movs	r1, #57	; 0x39
 800d6ae:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d6b0:	4b55      	ldr	r3, [pc, #340]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	4b53      	ldr	r3, [pc, #332]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6ba:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800d6bc:	4b52      	ldr	r3, [pc, #328]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	4b50      	ldr	r3, [pc, #320]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6c6:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]='9';
 800d6c8:	4b4f      	ldr	r3, [pc, #316]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	3b06      	subs	r3, #6
 800d6ce:	4a4f      	ldr	r2, [pc, #316]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d6d0:	2139      	movs	r1, #57	; 0x39
 800d6d2:	54d1      	strb	r1, [r2, r3]

			}
			Cursor_Position++;
 800d6d4:	4b4c      	ldr	r3, [pc, #304]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	4b4a      	ldr	r3, [pc, #296]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6de:	701a      	strb	r2, [r3, #0]
			Cursor_Position++;
 800d6e0:	4b49      	ldr	r3, [pc, #292]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	b2da      	uxtb	r2, r3
 800d6e8:	4b47      	ldr	r3, [pc, #284]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	e09c      	b.n	800d828 <VRate_data_Refresh+0x398>
		}
		else if(Cursor_Position==3+6)
 800d6ee:	4b46      	ldr	r3, [pc, #280]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	2b09      	cmp	r3, #9
 800d6f4:	d000      	beq.n	800d6f8 <VRate_data_Refresh+0x268>
 800d6f6:	e08d      	b.n	800d814 <VRate_data_Refresh+0x384>
		{
			String_V_Rate[Cursor_Position-6]='0';
 800d6f8:	4b43      	ldr	r3, [pc, #268]	; (800d808 <VRate_data_Refresh+0x378>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	3b06      	subs	r3, #6
 800d6fe:	4a43      	ldr	r2, [pc, #268]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d700:	2130      	movs	r1, #48	; 0x30
 800d702:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d704:	4b40      	ldr	r3, [pc, #256]	; (800d808 <VRate_data_Refresh+0x378>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	3b01      	subs	r3, #1
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	4b3e      	ldr	r3, [pc, #248]	; (800d808 <VRate_data_Refresh+0x378>)
 800d70e:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]++;
 800d710:	4b3d      	ldr	r3, [pc, #244]	; (800d808 <VRate_data_Refresh+0x378>)
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	3b06      	subs	r3, #6
 800d716:	4a3d      	ldr	r2, [pc, #244]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d718:	5cd2      	ldrb	r2, [r2, r3]
 800d71a:	3201      	adds	r2, #1
 800d71c:	b2d1      	uxtb	r1, r2
 800d71e:	4a3b      	ldr	r2, [pc, #236]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d720:	54d1      	strb	r1, [r2, r3]
			if(String_V_Rate[Cursor_Position-6]>'9')//小数一位也进位
 800d722:	4b39      	ldr	r3, [pc, #228]	; (800d808 <VRate_data_Refresh+0x378>)
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	3b06      	subs	r3, #6
 800d728:	4a38      	ldr	r2, [pc, #224]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d72a:	5cd3      	ldrb	r3, [r2, r3]
 800d72c:	2b39      	cmp	r3, #57	; 0x39
 800d72e:	d95e      	bls.n	800d7ee <VRate_data_Refresh+0x35e>
			{
				Cursor_Position--;
 800d730:	4b35      	ldr	r3, [pc, #212]	; (800d808 <VRate_data_Refresh+0x378>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	3b01      	subs	r3, #1
 800d736:	b2da      	uxtb	r2, r3
 800d738:	4b33      	ldr	r3, [pc, #204]	; (800d808 <VRate_data_Refresh+0x378>)
 800d73a:	701a      	strb	r2, [r3, #0]
				Cursor_Position--;
 800d73c:	4b32      	ldr	r3, [pc, #200]	; (800d808 <VRate_data_Refresh+0x378>)
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	3b01      	subs	r3, #1
 800d742:	b2da      	uxtb	r2, r3
 800d744:	4b30      	ldr	r3, [pc, #192]	; (800d808 <VRate_data_Refresh+0x378>)
 800d746:	701a      	strb	r2, [r3, #0]
				String_V_Rate[Cursor_Position-6]++;
 800d748:	4b2f      	ldr	r3, [pc, #188]	; (800d808 <VRate_data_Refresh+0x378>)
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	3b06      	subs	r3, #6
 800d74e:	4a2f      	ldr	r2, [pc, #188]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d750:	5cd2      	ldrb	r2, [r2, r3]
 800d752:	3201      	adds	r2, #1
 800d754:	b2d1      	uxtb	r1, r2
 800d756:	4a2d      	ldr	r2, [pc, #180]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d758:	54d1      	strb	r1, [r2, r3]
				if(String_V_Rate[Cursor_Position-6]>'9')//个位也进位
 800d75a:	4b2b      	ldr	r3, [pc, #172]	; (800d808 <VRate_data_Refresh+0x378>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	3b06      	subs	r3, #6
 800d760:	4a2a      	ldr	r2, [pc, #168]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d762:	5cd3      	ldrb	r3, [r2, r3]
 800d764:	2b39      	cmp	r3, #57	; 0x39
 800d766:	d924      	bls.n	800d7b2 <VRate_data_Refresh+0x322>
				{
					String_V_Rate[Cursor_Position-6]='9';
 800d768:	4b27      	ldr	r3, [pc, #156]	; (800d808 <VRate_data_Refresh+0x378>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	3b06      	subs	r3, #6
 800d76e:	4a27      	ldr	r2, [pc, #156]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d770:	2139      	movs	r1, #57	; 0x39
 800d772:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d774:	4b24      	ldr	r3, [pc, #144]	; (800d808 <VRate_data_Refresh+0x378>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	3301      	adds	r3, #1
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	4b22      	ldr	r3, [pc, #136]	; (800d808 <VRate_data_Refresh+0x378>)
 800d77e:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d780:	4b21      	ldr	r3, [pc, #132]	; (800d808 <VRate_data_Refresh+0x378>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	3301      	adds	r3, #1
 800d786:	b2da      	uxtb	r2, r3
 800d788:	4b1f      	ldr	r3, [pc, #124]	; (800d808 <VRate_data_Refresh+0x378>)
 800d78a:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d78c:	4b1e      	ldr	r3, [pc, #120]	; (800d808 <VRate_data_Refresh+0x378>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	3b06      	subs	r3, #6
 800d792:	4a1e      	ldr	r2, [pc, #120]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d794:	2139      	movs	r1, #57	; 0x39
 800d796:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d798:	4b1b      	ldr	r3, [pc, #108]	; (800d808 <VRate_data_Refresh+0x378>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	3301      	adds	r3, #1
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	4b19      	ldr	r3, [pc, #100]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7a2:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='9';
 800d7a4:	4b18      	ldr	r3, [pc, #96]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	3b06      	subs	r3, #6
 800d7aa:	4a18      	ldr	r2, [pc, #96]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d7ac:	2139      	movs	r1, #57	; 0x39
 800d7ae:	54d1      	strb	r1, [r2, r3]
 800d7b0:	e01d      	b.n	800d7ee <VRate_data_Refresh+0x35e>

				}
				else//个位正常进位，小数一位为0，小数二位
				{
					Cursor_Position++;
 800d7b2:	4b15      	ldr	r3, [pc, #84]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	4b13      	ldr	r3, [pc, #76]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7bc:	701a      	strb	r2, [r3, #0]
					Cursor_Position++;
 800d7be:	4b12      	ldr	r3, [pc, #72]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	4b10      	ldr	r3, [pc, #64]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7c8:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数一位为0
 800d7ca:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	3b06      	subs	r3, #6
 800d7d0:	4a0e      	ldr	r2, [pc, #56]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d7d2:	2130      	movs	r1, #48	; 0x30
 800d7d4:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800d7d6:	4b0c      	ldr	r3, [pc, #48]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7e0:	701a      	strb	r2, [r3, #0]
					String_V_Rate[Cursor_Position-6]='0';//小数二位为0
 800d7e2:	4b09      	ldr	r3, [pc, #36]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	3b06      	subs	r3, #6
 800d7e8:	4a08      	ldr	r2, [pc, #32]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d7ea:	2130      	movs	r1, #48	; 0x30
 800d7ec:	54d1      	strb	r1, [r2, r3]

				}

			}

			Cursor_Position++;
 800d7ee:	4b06      	ldr	r3, [pc, #24]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	4b04      	ldr	r3, [pc, #16]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7f8:	701a      	strb	r2, [r3, #0]
			String_V_Rate[Cursor_Position-6]='0';
 800d7fa:	4b03      	ldr	r3, [pc, #12]	; (800d808 <VRate_data_Refresh+0x378>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	3b06      	subs	r3, #6
 800d800:	4a02      	ldr	r2, [pc, #8]	; (800d80c <VRate_data_Refresh+0x37c>)
 800d802:	2130      	movs	r1, #48	; 0x30
 800d804:	54d1      	strb	r1, [r2, r3]
 800d806:	e00f      	b.n	800d828 <VRate_data_Refresh+0x398>
 800d808:	2000398e 	.word	0x2000398e
 800d80c:	20003050 	.word	0x20003050
 800d810:	20003388 	.word	0x20003388
		}
		else if(Cursor_Position==0+6)
 800d814:	4b1b      	ldr	r3, [pc, #108]	; (800d884 <VRate_data_Refresh+0x3f4>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	2b06      	cmp	r3, #6
 800d81a:	d105      	bne.n	800d828 <VRate_data_Refresh+0x398>
		{
			String_V_Rate[Cursor_Position-6]='9';
 800d81c:	4b19      	ldr	r3, [pc, #100]	; (800d884 <VRate_data_Refresh+0x3f4>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	3b06      	subs	r3, #6
 800d822:	4a19      	ldr	r2, [pc, #100]	; (800d888 <VRate_data_Refresh+0x3f8>)
 800d824:	2139      	movs	r1, #57	; 0x39
 800d826:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_V_Slope = String_To_Float(String_V_Rate)*10;
 800d828:	4b17      	ldr	r3, [pc, #92]	; (800d888 <VRate_data_Refresh+0x3f8>)
 800d82a:	0018      	movs	r0, r3
 800d82c:	f000 fe66 	bl	800e4fc <String_To_Float>
 800d830:	1c03      	adds	r3, r0, #0
 800d832:	4916      	ldr	r1, [pc, #88]	; (800d88c <VRate_data_Refresh+0x3fc>)
 800d834:	1c18      	adds	r0, r3, #0
 800d836:	f7f3 fa13 	bl	8000c60 <__aeabi_fmul>
 800d83a:	1c03      	adds	r3, r0, #0
 800d83c:	1c18      	adds	r0, r3, #0
 800d83e:	f7f2 fe73 	bl	8000528 <__aeabi_f2uiz>
 800d842:	0003      	movs	r3, r0
 800d844:	b2da      	uxtb	r2, r3
 800d846:	4b12      	ldr	r3, [pc, #72]	; (800d890 <VRate_data_Refresh+0x400>)
 800d848:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope > 30) Set_V_Slope = 30;//150V
 800d84a:	4b11      	ldr	r3, [pc, #68]	; (800d890 <VRate_data_Refresh+0x400>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	2b1e      	cmp	r3, #30
 800d850:	d902      	bls.n	800d858 <VRate_data_Refresh+0x3c8>
 800d852:	4b0f      	ldr	r3, [pc, #60]	; (800d890 <VRate_data_Refresh+0x400>)
 800d854:	221e      	movs	r2, #30
 800d856:	701a      	strb	r2, [r3, #0]
	if(Set_V_Slope <1||Set_Voltage==1)	Set_V_Slope=1;
 800d858:	4b0d      	ldr	r3, [pc, #52]	; (800d890 <VRate_data_Refresh+0x400>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d003      	beq.n	800d868 <VRate_data_Refresh+0x3d8>
 800d860:	4b0c      	ldr	r3, [pc, #48]	; (800d894 <VRate_data_Refresh+0x404>)
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d102      	bne.n	800d86e <VRate_data_Refresh+0x3de>
 800d868:	4b09      	ldr	r3, [pc, #36]	; (800d890 <VRate_data_Refresh+0x400>)
 800d86a:	2201      	movs	r2, #1
 800d86c:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_V_Slope);
 800d86e:	4b08      	ldr	r3, [pc, #32]	; (800d890 <VRate_data_Refresh+0x400>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	b29b      	uxth	r3, r3
 800d874:	001a      	movs	r2, r3
 800d876:	2108      	movs	r1, #8
 800d878:	2001      	movs	r0, #1
 800d87a:	f7fe fffd 	bl	800c878 <DAC_Cmd_send>


}
 800d87e:	46c0      	nop			; (mov r8, r8)
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	2000398e 	.word	0x2000398e
 800d888:	20003050 	.word	0x20003050
 800d88c:	41200000 	.word	0x41200000
 800d890:	20003997 	.word	0x20003997
 800d894:	20002fda 	.word	0x20002fda

0800d898 <IRate_data_Refresh>:

static void IRate_data_Refresh(void)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
	String_I_Rate[Cursor_Position-6]+=Flag.Encoder_BF;
 800d89c:	4b50      	ldr	r3, [pc, #320]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	3b06      	subs	r3, #6
 800d8a2:	4a50      	ldr	r2, [pc, #320]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d8a4:	5cd1      	ldrb	r1, [r2, r3]
 800d8a6:	4b50      	ldr	r3, [pc, #320]	; (800d9e8 <IRate_data_Refresh+0x150>)
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	4b4c      	ldr	r3, [pc, #304]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	3b06      	subs	r3, #6
 800d8b2:	188a      	adds	r2, r1, r2
 800d8b4:	b2d1      	uxtb	r1, r2
 800d8b6:	4a4b      	ldr	r2, [pc, #300]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d8b8:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]<'0')	String_I_Rate[Cursor_Position-6]='0';
 800d8ba:	4b49      	ldr	r3, [pc, #292]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	3b06      	subs	r3, #6
 800d8c0:	4a48      	ldr	r2, [pc, #288]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d8c2:	5cd3      	ldrb	r3, [r2, r3]
 800d8c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d8c6:	d805      	bhi.n	800d8d4 <IRate_data_Refresh+0x3c>
 800d8c8:	4b45      	ldr	r3, [pc, #276]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	3b06      	subs	r3, #6
 800d8ce:	4a45      	ldr	r2, [pc, #276]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d8d0:	2130      	movs	r1, #48	; 0x30
 800d8d2:	54d1      	strb	r1, [r2, r3]
	if(String_I_Rate[Cursor_Position-6]>'9')
 800d8d4:	4b42      	ldr	r3, [pc, #264]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	3b06      	subs	r3, #6
 800d8da:	4a42      	ldr	r2, [pc, #264]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d8dc:	5cd3      	ldrb	r3, [r2, r3]
 800d8de:	2b39      	cmp	r3, #57	; 0x39
 800d8e0:	d94f      	bls.n	800d982 <IRate_data_Refresh+0xea>
	{
		/*进位处理*/
		if(Cursor_Position!=0+6)
 800d8e2:	4b3f      	ldr	r3, [pc, #252]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	2b06      	cmp	r3, #6
 800d8e8:	d041      	beq.n	800d96e <IRate_data_Refresh+0xd6>
		{
			String_I_Rate[Cursor_Position-6]='0';
 800d8ea:	4b3d      	ldr	r3, [pc, #244]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	3b06      	subs	r3, #6
 800d8f0:	4a3c      	ldr	r2, [pc, #240]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d8f2:	2130      	movs	r1, #48	; 0x30
 800d8f4:	54d1      	strb	r1, [r2, r3]
			Cursor_Position--;
 800d8f6:	4b3a      	ldr	r3, [pc, #232]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	4b38      	ldr	r3, [pc, #224]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d900:	701a      	strb	r2, [r3, #0]
			String_I_Rate[Cursor_Position-6]++;
 800d902:	4b37      	ldr	r3, [pc, #220]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	3b06      	subs	r3, #6
 800d908:	4a36      	ldr	r2, [pc, #216]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d90a:	5cd2      	ldrb	r2, [r2, r3]
 800d90c:	3201      	adds	r2, #1
 800d90e:	b2d1      	uxtb	r1, r2
 800d910:	4a34      	ldr	r2, [pc, #208]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d912:	54d1      	strb	r1, [r2, r3]
			if(String_I_Rate[Cursor_Position-6]>'9'&&Cursor_Position!=0+6)//下一位也进位
 800d914:	4b32      	ldr	r3, [pc, #200]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	3b06      	subs	r3, #6
 800d91a:	4a32      	ldr	r2, [pc, #200]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d91c:	5cd3      	ldrb	r3, [r2, r3]
 800d91e:	2b39      	cmp	r3, #57	; 0x39
 800d920:	d91e      	bls.n	800d960 <IRate_data_Refresh+0xc8>
 800d922:	4b2f      	ldr	r3, [pc, #188]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2b06      	cmp	r3, #6
 800d928:	d01a      	beq.n	800d960 <IRate_data_Refresh+0xc8>
			{
				String_I_Rate[Cursor_Position-6]='0';
 800d92a:	4b2d      	ldr	r3, [pc, #180]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	3b06      	subs	r3, #6
 800d930:	4a2c      	ldr	r2, [pc, #176]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d932:	2130      	movs	r1, #48	; 0x30
 800d934:	54d1      	strb	r1, [r2, r3]
				Cursor_Position--;
 800d936:	4b2a      	ldr	r3, [pc, #168]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	3b01      	subs	r3, #1
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	4b28      	ldr	r3, [pc, #160]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d940:	701a      	strb	r2, [r3, #0]
				String_I_Rate[Cursor_Position-6]++;
 800d942:	4b27      	ldr	r3, [pc, #156]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	3b06      	subs	r3, #6
 800d948:	4a26      	ldr	r2, [pc, #152]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d94a:	5cd2      	ldrb	r2, [r2, r3]
 800d94c:	3201      	adds	r2, #1
 800d94e:	b2d1      	uxtb	r1, r2
 800d950:	4a24      	ldr	r2, [pc, #144]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d952:	54d1      	strb	r1, [r2, r3]
				Cursor_Position++;
 800d954:	4b22      	ldr	r3, [pc, #136]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	4b20      	ldr	r3, [pc, #128]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d95e:	701a      	strb	r2, [r3, #0]
			}
			Cursor_Position++;
 800d960:	4b1f      	ldr	r3, [pc, #124]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	3301      	adds	r3, #1
 800d966:	b2da      	uxtb	r2, r3
 800d968:	4b1d      	ldr	r3, [pc, #116]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d96a:	701a      	strb	r2, [r3, #0]
 800d96c:	e009      	b.n	800d982 <IRate_data_Refresh+0xea>
		}
		else if(Cursor_Position==0+6)
 800d96e:	4b1c      	ldr	r3, [pc, #112]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	2b06      	cmp	r3, #6
 800d974:	d105      	bne.n	800d982 <IRate_data_Refresh+0xea>
		{
			String_I_Rate[Cursor_Position-6]='9';
 800d976:	4b1a      	ldr	r3, [pc, #104]	; (800d9e0 <IRate_data_Refresh+0x148>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	3b06      	subs	r3, #6
 800d97c:	4a19      	ldr	r2, [pc, #100]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d97e:	2139      	movs	r1, #57	; 0x39
 800d980:	54d1      	strb	r1, [r2, r3]
		}

	}
	/*补充指令发送*/
	Set_I_Slope = String_To_Float(String_I_Rate)*100;
 800d982:	4b18      	ldr	r3, [pc, #96]	; (800d9e4 <IRate_data_Refresh+0x14c>)
 800d984:	0018      	movs	r0, r3
 800d986:	f000 fdb9 	bl	800e4fc <String_To_Float>
 800d98a:	1c03      	adds	r3, r0, #0
 800d98c:	4917      	ldr	r1, [pc, #92]	; (800d9ec <IRate_data_Refresh+0x154>)
 800d98e:	1c18      	adds	r0, r3, #0
 800d990:	f7f3 f966 	bl	8000c60 <__aeabi_fmul>
 800d994:	1c03      	adds	r3, r0, #0
 800d996:	1c18      	adds	r0, r3, #0
 800d998:	f7f2 fdc6 	bl	8000528 <__aeabi_f2uiz>
 800d99c:	0003      	movs	r3, r0
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <IRate_data_Refresh+0x158>)
 800d9a2:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope > 30) Set_I_Slope = 30;//150V
 800d9a4:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <IRate_data_Refresh+0x158>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	2b1e      	cmp	r3, #30
 800d9aa:	d902      	bls.n	800d9b2 <IRate_data_Refresh+0x11a>
 800d9ac:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <IRate_data_Refresh+0x158>)
 800d9ae:	221e      	movs	r2, #30
 800d9b0:	701a      	strb	r2, [r3, #0]
	if(Set_I_Slope <1||Set_Voltage==1)	Set_I_Slope=1;
 800d9b2:	4b0f      	ldr	r3, [pc, #60]	; (800d9f0 <IRate_data_Refresh+0x158>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <IRate_data_Refresh+0x12a>
 800d9ba:	4b0e      	ldr	r3, [pc, #56]	; (800d9f4 <IRate_data_Refresh+0x15c>)
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d102      	bne.n	800d9c8 <IRate_data_Refresh+0x130>
 800d9c2:	4b0b      	ldr	r3, [pc, #44]	; (800d9f0 <IRate_data_Refresh+0x158>)
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,9,Set_I_Slope);
 800d9c8:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <IRate_data_Refresh+0x158>)
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	001a      	movs	r2, r3
 800d9d0:	2109      	movs	r1, #9
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	f7fe ff50 	bl	800c878 <DAC_Cmd_send>

}
 800d9d8:	46c0      	nop			; (mov r8, r8)
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	2000398e 	.word	0x2000398e
 800d9e4:	20003044 	.word	0x20003044
 800d9e8:	20003388 	.word	0x20003388
 800d9ec:	42c80000 	.word	0x42c80000
 800d9f0:	20003998 	.word	0x20003998
 800d9f4:	20002fda 	.word	0x20002fda

0800d9f8 <Save_data_Refresh>:

static void Save_data_Refresh(void)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)//Vset
 800d9fc:	4b76      	ldr	r3, [pc, #472]	; (800dbd8 <Save_data_Refresh+0x1e0>)
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d172      	bne.n	800daea <Save_data_Refresh+0xf2>
	{
		String_Save_V[Cursor_Position]+=Flag.Encoder_BF;
 800da04:	4b75      	ldr	r3, [pc, #468]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	001a      	movs	r2, r3
 800da0a:	4b75      	ldr	r3, [pc, #468]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da0c:	5c9a      	ldrb	r2, [r3, r2]
 800da0e:	4b75      	ldr	r3, [pc, #468]	; (800dbe4 <Save_data_Refresh+0x1ec>)
 800da10:	69db      	ldr	r3, [r3, #28]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	4971      	ldr	r1, [pc, #452]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da16:	7809      	ldrb	r1, [r1, #0]
 800da18:	18d3      	adds	r3, r2, r3
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	4b70      	ldr	r3, [pc, #448]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da1e:	545a      	strb	r2, [r3, r1]
		if(String_Save_V[Cursor_Position]<'0')	String_Save_V[Cursor_Position]='0';
 800da20:	4b6e      	ldr	r3, [pc, #440]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	001a      	movs	r2, r3
 800da26:	4b6e      	ldr	r3, [pc, #440]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da28:	5c9b      	ldrb	r3, [r3, r2]
 800da2a:	2b2f      	cmp	r3, #47	; 0x2f
 800da2c:	d805      	bhi.n	800da3a <Save_data_Refresh+0x42>
 800da2e:	4b6b      	ldr	r3, [pc, #428]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	001a      	movs	r2, r3
 800da34:	4b6a      	ldr	r3, [pc, #424]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da36:	2130      	movs	r1, #48	; 0x30
 800da38:	5499      	strb	r1, [r3, r2]
		if(String_Save_V[Cursor_Position]>'9')
 800da3a:	4b68      	ldr	r3, [pc, #416]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	001a      	movs	r2, r3
 800da40:	4b67      	ldr	r3, [pc, #412]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da42:	5c9b      	ldrb	r3, [r3, r2]
 800da44:	2b39      	cmp	r3, #57	; 0x39
 800da46:	d800      	bhi.n	800da4a <Save_data_Refresh+0x52>
 800da48:	e0c3      	b.n	800dbd2 <Save_data_Refresh+0x1da>
		{
			/*进位处理*/
			if(Cursor_Position!=0)
 800da4a:	4b64      	ldr	r3, [pc, #400]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d03f      	beq.n	800dad2 <Save_data_Refresh+0xda>
			{
				String_Save_V[Cursor_Position]='0';
 800da52:	4b62      	ldr	r3, [pc, #392]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	001a      	movs	r2, r3
 800da58:	4b61      	ldr	r3, [pc, #388]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da5a:	2130      	movs	r1, #48	; 0x30
 800da5c:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800da5e:	4b5f      	ldr	r3, [pc, #380]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	3b01      	subs	r3, #1
 800da64:	b2da      	uxtb	r2, r3
 800da66:	4b5d      	ldr	r3, [pc, #372]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da68:	701a      	strb	r2, [r3, #0]
				String_Save_V[Cursor_Position]++;
 800da6a:	4b5c      	ldr	r3, [pc, #368]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	4a5c      	ldr	r2, [pc, #368]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da70:	5cd2      	ldrb	r2, [r2, r3]
 800da72:	3201      	adds	r2, #1
 800da74:	b2d1      	uxtb	r1, r2
 800da76:	4a5a      	ldr	r2, [pc, #360]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da78:	54d1      	strb	r1, [r2, r3]
				if(String_Save_V[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800da7a:	4b58      	ldr	r3, [pc, #352]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	001a      	movs	r2, r3
 800da80:	4b57      	ldr	r3, [pc, #348]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da82:	5c9b      	ldrb	r3, [r3, r2]
 800da84:	2b39      	cmp	r3, #57	; 0x39
 800da86:	d91d      	bls.n	800dac4 <Save_data_Refresh+0xcc>
 800da88:	4b54      	ldr	r3, [pc, #336]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d019      	beq.n	800dac4 <Save_data_Refresh+0xcc>
				{
					String_Save_V[Cursor_Position]='0';
 800da90:	4b52      	ldr	r3, [pc, #328]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	001a      	movs	r2, r3
 800da96:	4b52      	ldr	r3, [pc, #328]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800da98:	2130      	movs	r1, #48	; 0x30
 800da9a:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800da9c:	4b4f      	ldr	r3, [pc, #316]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	4b4d      	ldr	r3, [pc, #308]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800daa6:	701a      	strb	r2, [r3, #0]
					String_Save_V[Cursor_Position]++;
 800daa8:	4b4c      	ldr	r3, [pc, #304]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	4a4c      	ldr	r2, [pc, #304]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800daae:	5cd2      	ldrb	r2, [r2, r3]
 800dab0:	3201      	adds	r2, #1
 800dab2:	b2d1      	uxtb	r1, r2
 800dab4:	4a4a      	ldr	r2, [pc, #296]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800dab6:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800dab8:	4b48      	ldr	r3, [pc, #288]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	3301      	adds	r3, #1
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	4b46      	ldr	r3, [pc, #280]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dac2:	701a      	strb	r2, [r3, #0]
				}
				Cursor_Position++;
 800dac4:	4b45      	ldr	r3, [pc, #276]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	3301      	adds	r3, #1
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	4b43      	ldr	r3, [pc, #268]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dace:	701a      	strb	r2, [r3, #0]

		}

	}

}
 800dad0:	e07f      	b.n	800dbd2 <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800dad2:	4b42      	ldr	r3, [pc, #264]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d000      	beq.n	800dadc <Save_data_Refresh+0xe4>
 800dada:	e07a      	b.n	800dbd2 <Save_data_Refresh+0x1da>
				String_Save_V[Cursor_Position]='9';
 800dadc:	4b3f      	ldr	r3, [pc, #252]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	001a      	movs	r2, r3
 800dae2:	4b3f      	ldr	r3, [pc, #252]	; (800dbe0 <Save_data_Refresh+0x1e8>)
 800dae4:	2139      	movs	r1, #57	; 0x39
 800dae6:	5499      	strb	r1, [r3, r2]
}
 800dae8:	e073      	b.n	800dbd2 <Save_data_Refresh+0x1da>
	else if(xyz.coordinates3==2)//Iset
 800daea:	4b3b      	ldr	r3, [pc, #236]	; (800dbd8 <Save_data_Refresh+0x1e0>)
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d16f      	bne.n	800dbd2 <Save_data_Refresh+0x1da>
		String_Save_I[Cursor_Position]+=Flag.Encoder_BF;
 800daf2:	4b3a      	ldr	r3, [pc, #232]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	001a      	movs	r2, r3
 800daf8:	4b3b      	ldr	r3, [pc, #236]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800dafa:	5c9a      	ldrb	r2, [r3, r2]
 800dafc:	4b39      	ldr	r3, [pc, #228]	; (800dbe4 <Save_data_Refresh+0x1ec>)
 800dafe:	69db      	ldr	r3, [r3, #28]
 800db00:	b2db      	uxtb	r3, r3
 800db02:	4936      	ldr	r1, [pc, #216]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db04:	7809      	ldrb	r1, [r1, #0]
 800db06:	18d3      	adds	r3, r2, r3
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	4b37      	ldr	r3, [pc, #220]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db0c:	545a      	strb	r2, [r3, r1]
		if(String_Save_I[Cursor_Position]<'0')	String_Save_I[Cursor_Position]='0';
 800db0e:	4b33      	ldr	r3, [pc, #204]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	001a      	movs	r2, r3
 800db14:	4b34      	ldr	r3, [pc, #208]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db16:	5c9b      	ldrb	r3, [r3, r2]
 800db18:	2b2f      	cmp	r3, #47	; 0x2f
 800db1a:	d805      	bhi.n	800db28 <Save_data_Refresh+0x130>
 800db1c:	4b2f      	ldr	r3, [pc, #188]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	001a      	movs	r2, r3
 800db22:	4b31      	ldr	r3, [pc, #196]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db24:	2130      	movs	r1, #48	; 0x30
 800db26:	5499      	strb	r1, [r3, r2]
		if(String_Save_I[Cursor_Position]>'9')
 800db28:	4b2c      	ldr	r3, [pc, #176]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	001a      	movs	r2, r3
 800db2e:	4b2e      	ldr	r3, [pc, #184]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db30:	5c9b      	ldrb	r3, [r3, r2]
 800db32:	2b39      	cmp	r3, #57	; 0x39
 800db34:	d94d      	bls.n	800dbd2 <Save_data_Refresh+0x1da>
			if(Cursor_Position!=0)
 800db36:	4b29      	ldr	r3, [pc, #164]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d03f      	beq.n	800dbbe <Save_data_Refresh+0x1c6>
				String_Save_I[Cursor_Position]='0';
 800db3e:	4b27      	ldr	r3, [pc, #156]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	001a      	movs	r2, r3
 800db44:	4b28      	ldr	r3, [pc, #160]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db46:	2130      	movs	r1, #48	; 0x30
 800db48:	5499      	strb	r1, [r3, r2]
				Cursor_Position--;
 800db4a:	4b24      	ldr	r3, [pc, #144]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	3b01      	subs	r3, #1
 800db50:	b2da      	uxtb	r2, r3
 800db52:	4b22      	ldr	r3, [pc, #136]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db54:	701a      	strb	r2, [r3, #0]
				String_Save_I[Cursor_Position]++;
 800db56:	4b21      	ldr	r3, [pc, #132]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	4a23      	ldr	r2, [pc, #140]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db5c:	5cd2      	ldrb	r2, [r2, r3]
 800db5e:	3201      	adds	r2, #1
 800db60:	b2d1      	uxtb	r1, r2
 800db62:	4a21      	ldr	r2, [pc, #132]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db64:	54d1      	strb	r1, [r2, r3]
				if(String_Save_I[Cursor_Position]>'9'&&Cursor_Position!=0)//下一位也进位
 800db66:	4b1d      	ldr	r3, [pc, #116]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	001a      	movs	r2, r3
 800db6c:	4b1e      	ldr	r3, [pc, #120]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db6e:	5c9b      	ldrb	r3, [r3, r2]
 800db70:	2b39      	cmp	r3, #57	; 0x39
 800db72:	d91d      	bls.n	800dbb0 <Save_data_Refresh+0x1b8>
 800db74:	4b19      	ldr	r3, [pc, #100]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d019      	beq.n	800dbb0 <Save_data_Refresh+0x1b8>
					String_Save_I[Cursor_Position]='0';
 800db7c:	4b17      	ldr	r3, [pc, #92]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	001a      	movs	r2, r3
 800db82:	4b19      	ldr	r3, [pc, #100]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db84:	2130      	movs	r1, #48	; 0x30
 800db86:	5499      	strb	r1, [r3, r2]
					Cursor_Position--;
 800db88:	4b14      	ldr	r3, [pc, #80]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	3b01      	subs	r3, #1
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	4b12      	ldr	r3, [pc, #72]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db92:	701a      	strb	r2, [r3, #0]
					String_Save_I[Cursor_Position]++;
 800db94:	4b11      	ldr	r3, [pc, #68]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	4a13      	ldr	r2, [pc, #76]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800db9a:	5cd2      	ldrb	r2, [r2, r3]
 800db9c:	3201      	adds	r2, #1
 800db9e:	b2d1      	uxtb	r1, r2
 800dba0:	4a11      	ldr	r2, [pc, #68]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800dba2:	54d1      	strb	r1, [r2, r3]
					Cursor_Position++;
 800dba4:	4b0d      	ldr	r3, [pc, #52]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	4b0b      	ldr	r3, [pc, #44]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dbae:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800dbb0:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dbba:	701a      	strb	r2, [r3, #0]
}
 800dbbc:	e009      	b.n	800dbd2 <Save_data_Refresh+0x1da>
			else if(Cursor_Position==0)
 800dbbe:	4b07      	ldr	r3, [pc, #28]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d105      	bne.n	800dbd2 <Save_data_Refresh+0x1da>
				String_Save_I[Cursor_Position]='9';
 800dbc6:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <Save_data_Refresh+0x1e4>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	001a      	movs	r2, r3
 800dbcc:	4b06      	ldr	r3, [pc, #24]	; (800dbe8 <Save_data_Refresh+0x1f0>)
 800dbce:	2139      	movs	r1, #57	; 0x39
 800dbd0:	5499      	strb	r1, [r3, r2]
}
 800dbd2:	46c0      	nop			; (mov r8, r8)
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	200039f8 	.word	0x200039f8
 800dbdc:	2000398e 	.word	0x2000398e
 800dbe0:	20003020 	.word	0x20003020
 800dbe4:	20003388 	.word	0x20003388
 800dbe8:	2000302c 	.word	0x2000302c

0800dbec <Recall_data_Refresh>:

static void Recall_data_Refresh(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
	Recall_Save_Number+=Flag.Encoder_BF;
 800dbf0:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <Recall_data_Refresh+0x2c>)
 800dbf2:	69db      	ldr	r3, [r3, #28]
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <Recall_data_Refresh+0x30>)
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	18d3      	adds	r3, r2, r3
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	4b07      	ldr	r3, [pc, #28]	; (800dc1c <Recall_data_Refresh+0x30>)
 800dc00:	701a      	strb	r2, [r3, #0]
	if(Recall_Save_Number<0)	Recall_Save_Number=9;
	if(Recall_Save_Number>9)	Recall_Save_Number=0;
 800dc02:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <Recall_data_Refresh+0x30>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b09      	cmp	r3, #9
 800dc08:	d902      	bls.n	800dc10 <Recall_data_Refresh+0x24>
 800dc0a:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <Recall_data_Refresh+0x30>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	701a      	strb	r2, [r3, #0]
}
 800dc10:	46c0      	nop			; (mov r8, r8)
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	20003388 	.word	0x20003388
 800dc1c:	2000398d 	.word	0x2000398d

0800dc20 <Timer_data_Refresh>:

static void Timer_data_Refresh(void)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	af00      	add	r7, sp, #0
	if(xyz.coordinates3==1)
 800dc24:	4b45      	ldr	r3, [pc, #276]	; (800dd3c <Timer_data_Refresh+0x11c>)
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d129      	bne.n	800dc80 <Timer_data_Refresh+0x60>
	{
		String_Delay[Cursor_Position-6]+=Flag.Encoder_BF;
 800dc2c:	4b44      	ldr	r3, [pc, #272]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	3b06      	subs	r3, #6
 800dc32:	4a44      	ldr	r2, [pc, #272]	; (800dd44 <Timer_data_Refresh+0x124>)
 800dc34:	5cd1      	ldrb	r1, [r2, r3]
 800dc36:	4b44      	ldr	r3, [pc, #272]	; (800dd48 <Timer_data_Refresh+0x128>)
 800dc38:	69db      	ldr	r3, [r3, #28]
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	4b40      	ldr	r3, [pc, #256]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	3b06      	subs	r3, #6
 800dc42:	188a      	adds	r2, r1, r2
 800dc44:	b2d1      	uxtb	r1, r2
 800dc46:	4a3f      	ldr	r2, [pc, #252]	; (800dd44 <Timer_data_Refresh+0x124>)
 800dc48:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]<'0')	String_Delay[Cursor_Position-6]='0';
 800dc4a:	4b3d      	ldr	r3, [pc, #244]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	3b06      	subs	r3, #6
 800dc50:	4a3c      	ldr	r2, [pc, #240]	; (800dd44 <Timer_data_Refresh+0x124>)
 800dc52:	5cd3      	ldrb	r3, [r2, r3]
 800dc54:	2b2f      	cmp	r3, #47	; 0x2f
 800dc56:	d805      	bhi.n	800dc64 <Timer_data_Refresh+0x44>
 800dc58:	4b39      	ldr	r3, [pc, #228]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	3b06      	subs	r3, #6
 800dc5e:	4a39      	ldr	r2, [pc, #228]	; (800dd44 <Timer_data_Refresh+0x124>)
 800dc60:	2130      	movs	r1, #48	; 0x30
 800dc62:	54d1      	strb	r1, [r2, r3]
		if(String_Delay[Cursor_Position-6]>'9')	String_Delay[Cursor_Position-6]='9';
 800dc64:	4b36      	ldr	r3, [pc, #216]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	3b06      	subs	r3, #6
 800dc6a:	4a36      	ldr	r2, [pc, #216]	; (800dd44 <Timer_data_Refresh+0x124>)
 800dc6c:	5cd3      	ldrb	r3, [r2, r3]
 800dc6e:	2b39      	cmp	r3, #57	; 0x39
 800dc70:	d961      	bls.n	800dd36 <Timer_data_Refresh+0x116>
 800dc72:	4b33      	ldr	r3, [pc, #204]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	3b06      	subs	r3, #6
 800dc78:	4a32      	ldr	r2, [pc, #200]	; (800dd44 <Timer_data_Refresh+0x124>)
 800dc7a:	2139      	movs	r1, #57	; 0x39
 800dc7c:	54d1      	strb	r1, [r2, r3]
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
	}

}
 800dc7e:	e05a      	b.n	800dd36 <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==2)
 800dc80:	4b2e      	ldr	r3, [pc, #184]	; (800dd3c <Timer_data_Refresh+0x11c>)
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d129      	bne.n	800dcdc <Timer_data_Refresh+0xbc>
		String_Cycle_On[Cursor_Position-6]+=Flag.Encoder_BF;
 800dc88:	4b2d      	ldr	r3, [pc, #180]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	3b06      	subs	r3, #6
 800dc8e:	4a2f      	ldr	r2, [pc, #188]	; (800dd4c <Timer_data_Refresh+0x12c>)
 800dc90:	5cd1      	ldrb	r1, [r2, r3]
 800dc92:	4b2d      	ldr	r3, [pc, #180]	; (800dd48 <Timer_data_Refresh+0x128>)
 800dc94:	69db      	ldr	r3, [r3, #28]
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	4b29      	ldr	r3, [pc, #164]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	3b06      	subs	r3, #6
 800dc9e:	188a      	adds	r2, r1, r2
 800dca0:	b2d1      	uxtb	r1, r2
 800dca2:	4a2a      	ldr	r2, [pc, #168]	; (800dd4c <Timer_data_Refresh+0x12c>)
 800dca4:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]<'0')	String_Cycle_On[Cursor_Position-6]='0';
 800dca6:	4b26      	ldr	r3, [pc, #152]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	3b06      	subs	r3, #6
 800dcac:	4a27      	ldr	r2, [pc, #156]	; (800dd4c <Timer_data_Refresh+0x12c>)
 800dcae:	5cd3      	ldrb	r3, [r2, r3]
 800dcb0:	2b2f      	cmp	r3, #47	; 0x2f
 800dcb2:	d805      	bhi.n	800dcc0 <Timer_data_Refresh+0xa0>
 800dcb4:	4b22      	ldr	r3, [pc, #136]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	3b06      	subs	r3, #6
 800dcba:	4a24      	ldr	r2, [pc, #144]	; (800dd4c <Timer_data_Refresh+0x12c>)
 800dcbc:	2130      	movs	r1, #48	; 0x30
 800dcbe:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_On[Cursor_Position-6]>'9')	String_Cycle_On[Cursor_Position-6]='9';
 800dcc0:	4b1f      	ldr	r3, [pc, #124]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	3b06      	subs	r3, #6
 800dcc6:	4a21      	ldr	r2, [pc, #132]	; (800dd4c <Timer_data_Refresh+0x12c>)
 800dcc8:	5cd3      	ldrb	r3, [r2, r3]
 800dcca:	2b39      	cmp	r3, #57	; 0x39
 800dccc:	d933      	bls.n	800dd36 <Timer_data_Refresh+0x116>
 800dcce:	4b1c      	ldr	r3, [pc, #112]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	3b06      	subs	r3, #6
 800dcd4:	4a1d      	ldr	r2, [pc, #116]	; (800dd4c <Timer_data_Refresh+0x12c>)
 800dcd6:	2139      	movs	r1, #57	; 0x39
 800dcd8:	54d1      	strb	r1, [r2, r3]
}
 800dcda:	e02c      	b.n	800dd36 <Timer_data_Refresh+0x116>
	else if(xyz.coordinates3==3)
 800dcdc:	4b17      	ldr	r3, [pc, #92]	; (800dd3c <Timer_data_Refresh+0x11c>)
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d128      	bne.n	800dd36 <Timer_data_Refresh+0x116>
		String_Cycle_Close[Cursor_Position-6]+=Flag.Encoder_BF;
 800dce4:	4b16      	ldr	r3, [pc, #88]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	3b06      	subs	r3, #6
 800dcea:	4a19      	ldr	r2, [pc, #100]	; (800dd50 <Timer_data_Refresh+0x130>)
 800dcec:	5cd1      	ldrb	r1, [r2, r3]
 800dcee:	4b16      	ldr	r3, [pc, #88]	; (800dd48 <Timer_data_Refresh+0x128>)
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	4b12      	ldr	r3, [pc, #72]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	3b06      	subs	r3, #6
 800dcfa:	188a      	adds	r2, r1, r2
 800dcfc:	b2d1      	uxtb	r1, r2
 800dcfe:	4a14      	ldr	r2, [pc, #80]	; (800dd50 <Timer_data_Refresh+0x130>)
 800dd00:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]<'0')	String_Cycle_Close[Cursor_Position-6]='0';
 800dd02:	4b0f      	ldr	r3, [pc, #60]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	3b06      	subs	r3, #6
 800dd08:	4a11      	ldr	r2, [pc, #68]	; (800dd50 <Timer_data_Refresh+0x130>)
 800dd0a:	5cd3      	ldrb	r3, [r2, r3]
 800dd0c:	2b2f      	cmp	r3, #47	; 0x2f
 800dd0e:	d805      	bhi.n	800dd1c <Timer_data_Refresh+0xfc>
 800dd10:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	3b06      	subs	r3, #6
 800dd16:	4a0e      	ldr	r2, [pc, #56]	; (800dd50 <Timer_data_Refresh+0x130>)
 800dd18:	2130      	movs	r1, #48	; 0x30
 800dd1a:	54d1      	strb	r1, [r2, r3]
		if(String_Cycle_Close[Cursor_Position-6]>'9')	String_Cycle_Close[Cursor_Position-6]='9';
 800dd1c:	4b08      	ldr	r3, [pc, #32]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	3b06      	subs	r3, #6
 800dd22:	4a0b      	ldr	r2, [pc, #44]	; (800dd50 <Timer_data_Refresh+0x130>)
 800dd24:	5cd3      	ldrb	r3, [r2, r3]
 800dd26:	2b39      	cmp	r3, #57	; 0x39
 800dd28:	d905      	bls.n	800dd36 <Timer_data_Refresh+0x116>
 800dd2a:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <Timer_data_Refresh+0x120>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	3b06      	subs	r3, #6
 800dd30:	4a07      	ldr	r2, [pc, #28]	; (800dd50 <Timer_data_Refresh+0x130>)
 800dd32:	2139      	movs	r1, #57	; 0x39
 800dd34:	54d1      	strb	r1, [r2, r3]
}
 800dd36:	46c0      	nop			; (mov r8, r8)
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	200039f8 	.word	0x200039f8
 800dd40:	2000398e 	.word	0x2000398e
 800dd44:	20003014 	.word	0x20003014
 800dd48:	20003388 	.word	0x20003388
 800dd4c:	20002ffc 	.word	0x20002ffc
 800dd50:	20003008 	.word	0x20003008

0800dd54 <Light_data_Refresh>:

static void Light_data_Refresh(void)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	af00      	add	r7, sp, #0
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800dd58:	4b12      	ldr	r3, [pc, #72]	; (800dda4 <Light_data_Refresh+0x50>)
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d103      	bne.n	800dd68 <Light_data_Refresh+0x14>
 800dd60:	4b11      	ldr	r3, [pc, #68]	; (800dda8 <Light_data_Refresh+0x54>)
 800dd62:	69db      	ldr	r3, [r3, #28]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	db18      	blt.n	800dd9a <Light_data_Refresh+0x46>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800dd68:	4b0e      	ldr	r3, [pc, #56]	; (800dda4 <Light_data_Refresh+0x50>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	2b0f      	cmp	r3, #15
 800dd6e:	d103      	bne.n	800dd78 <Light_data_Refresh+0x24>
 800dd70:	4b0d      	ldr	r3, [pc, #52]	; (800dda8 <Light_data_Refresh+0x54>)
 800dd72:	69db      	ldr	r3, [r3, #28]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	dc12      	bgt.n	800dd9e <Light_data_Refresh+0x4a>
	else Light+=Flag.Encoder_BF;
 800dd78:	4b0b      	ldr	r3, [pc, #44]	; (800dda8 <Light_data_Refresh+0x54>)
 800dd7a:	69db      	ldr	r3, [r3, #28]
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <Light_data_Refresh+0x50>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	18d3      	adds	r3, r2, r3
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	4b07      	ldr	r3, [pc, #28]	; (800dda4 <Light_data_Refresh+0x50>)
 800dd88:	701a      	strb	r2, [r3, #0]
	if(Light>=0x0f)	Light=0x0f;
 800dd8a:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <Light_data_Refresh+0x50>)
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b0e      	cmp	r3, #14
 800dd90:	d906      	bls.n	800dda0 <Light_data_Refresh+0x4c>
 800dd92:	4b04      	ldr	r3, [pc, #16]	; (800dda4 <Light_data_Refresh+0x50>)
 800dd94:	220f      	movs	r2, #15
 800dd96:	701a      	strb	r2, [r3, #0]
 800dd98:	e002      	b.n	800dda0 <Light_data_Refresh+0x4c>
	if(Light==0x01 && Flag.Encoder_BF<0) return;
 800dd9a:	46c0      	nop			; (mov r8, r8)
 800dd9c:	e000      	b.n	800dda0 <Light_data_Refresh+0x4c>
	if(Light==0x0f && Flag.Encoder_BF>0) return;
 800dd9e:	46c0      	nop			; (mov r8, r8)
}
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	200030b7 	.word	0x200030b7
 800dda8:	20003388 	.word	0x20003388

0800ddac <FAN_data_Refresh>:

static void FAN_data_Refresh(void)
{
 800ddac:	b5b0      	push	{r4, r5, r7, lr}
 800ddae:	af00      	add	r7, sp, #0
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800ddb0:	4b22      	ldr	r3, [pc, #136]	; (800de3c <FAN_data_Refresh+0x90>)
 800ddb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb4:	21fe      	movs	r1, #254	; 0xfe
 800ddb6:	0589      	lsls	r1, r1, #22
 800ddb8:	1c18      	adds	r0, r3, #0
 800ddba:	f7f2 fb87 	bl	80004cc <__aeabi_fcmpeq>
 800ddbe:	1e03      	subs	r3, r0, #0
 800ddc0:	d003      	beq.n	800ddca <FAN_data_Refresh+0x1e>
 800ddc2:	4b1e      	ldr	r3, [pc, #120]	; (800de3c <FAN_data_Refresh+0x90>)
 800ddc4:	69db      	ldr	r3, [r3, #28]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	db32      	blt.n	800de30 <FAN_data_Refresh+0x84>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800ddca:	4b1c      	ldr	r3, [pc, #112]	; (800de3c <FAN_data_Refresh+0x90>)
 800ddcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddce:	491c      	ldr	r1, [pc, #112]	; (800de40 <FAN_data_Refresh+0x94>)
 800ddd0:	1c18      	adds	r0, r3, #0
 800ddd2:	f7f2 fb7b 	bl	80004cc <__aeabi_fcmpeq>
 800ddd6:	1e03      	subs	r3, r0, #0
 800ddd8:	d003      	beq.n	800dde2 <FAN_data_Refresh+0x36>
 800ddda:	4b18      	ldr	r3, [pc, #96]	; (800de3c <FAN_data_Refresh+0x90>)
 800dddc:	69db      	ldr	r3, [r3, #28]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dc28      	bgt.n	800de34 <FAN_data_Refresh+0x88>
	else Flag.FAN_LEVEL+=Flag.Encoder_BF;
 800dde2:	4b16      	ldr	r3, [pc, #88]	; (800de3c <FAN_data_Refresh+0x90>)
 800dde4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800dde6:	4b15      	ldr	r3, [pc, #84]	; (800de3c <FAN_data_Refresh+0x90>)
 800dde8:	69db      	ldr	r3, [r3, #28]
 800ddea:	0018      	movs	r0, r3
 800ddec:	f7f3 fa2c 	bl	8001248 <__aeabi_i2f>
 800ddf0:	1c03      	adds	r3, r0, #0
 800ddf2:	1c19      	adds	r1, r3, #0
 800ddf4:	1c20      	adds	r0, r4, #0
 800ddf6:	f7f2 fbcd 	bl	8000594 <__aeabi_fadd>
 800ddfa:	1c03      	adds	r3, r0, #0
 800ddfc:	1c1a      	adds	r2, r3, #0
 800ddfe:	4b0f      	ldr	r3, [pc, #60]	; (800de3c <FAN_data_Refresh+0x90>)
 800de00:	629a      	str	r2, [r3, #40]	; 0x28
	if(Flag.FAN_LEVEL>=1000)	Flag.FAN_LEVEL=1000;
 800de02:	4b0e      	ldr	r3, [pc, #56]	; (800de3c <FAN_data_Refresh+0x90>)
 800de04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de06:	490e      	ldr	r1, [pc, #56]	; (800de40 <FAN_data_Refresh+0x94>)
 800de08:	1c18      	adds	r0, r3, #0
 800de0a:	f7f2 fb83 	bl	8000514 <__aeabi_fcmpge>
 800de0e:	1e03      	subs	r3, r0, #0
 800de10:	d002      	beq.n	800de18 <FAN_data_Refresh+0x6c>
 800de12:	4b0a      	ldr	r3, [pc, #40]	; (800de3c <FAN_data_Refresh+0x90>)
 800de14:	4a0a      	ldr	r2, [pc, #40]	; (800de40 <FAN_data_Refresh+0x94>)
 800de16:	629a      	str	r2, [r3, #40]	; 0x28

	sprintf(String_FAN, "%6.2f", Flag.FAN_LEVEL);
 800de18:	4b08      	ldr	r3, [pc, #32]	; (800de3c <FAN_data_Refresh+0x90>)
 800de1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1c:	1c18      	adds	r0, r3, #0
 800de1e:	f7f5 f847 	bl	8002eb0 <__aeabi_f2d>
 800de22:	0002      	movs	r2, r0
 800de24:	000b      	movs	r3, r1
 800de26:	4907      	ldr	r1, [pc, #28]	; (800de44 <FAN_data_Refresh+0x98>)
 800de28:	4807      	ldr	r0, [pc, #28]	; (800de48 <FAN_data_Refresh+0x9c>)
 800de2a:	f007 f971 	bl	8015110 <siprintf>
 800de2e:	e002      	b.n	800de36 <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1 && Flag.Encoder_BF<0) return;
 800de30:	46c0      	nop			; (mov r8, r8)
 800de32:	e000      	b.n	800de36 <FAN_data_Refresh+0x8a>
	if(Flag.FAN_LEVEL==1000 && Flag.Encoder_BF>0) return;
 800de34:	46c0      	nop			; (mov r8, r8)

}
 800de36:	46bd      	mov	sp, r7
 800de38:	bdb0      	pop	{r4, r5, r7, pc}
 800de3a:	46c0      	nop			; (mov r8, r8)
 800de3c:	20003388 	.word	0x20003388
 800de40:	447a0000 	.word	0x447a0000
 800de44:	0801833c 	.word	0x0801833c
 800de48:	20003084 	.word	0x20003084

0800de4c <enter_action>:
 * @brief  编码器按键动作响应
 * @param  none
 * @retval None
 */
static void enter_action(void)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	af00      	add	r7, sp, #0
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800de50:	4b95      	ldr	r3, [pc, #596]	; (800e0a8 <enter_action+0x25c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d10a      	bne.n	800de6e <enter_action+0x22>
 800de58:	4b93      	ldr	r3, [pc, #588]	; (800e0a8 <enter_action+0x25c>)
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d006      	beq.n	800de6e <enter_action+0x22>
 800de60:	4b91      	ldr	r3, [pc, #580]	; (800e0a8 <enter_action+0x25c>)
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d102      	bne.n	800de6e <enter_action+0x22>
	{
		xyz.coordinates3=1;//enter second menu
 800de68:	4b8f      	ldr	r3, [pc, #572]	; (800e0a8 <enter_action+0x25c>)
 800de6a:	2201      	movs	r2, #1
 800de6c:	609a      	str	r2, [r3, #8]
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800de6e:	4b8e      	ldr	r3, [pc, #568]	; (800e0a8 <enter_action+0x25c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d14f      	bne.n	800df16 <enter_action+0xca>
 800de76:	4b8c      	ldr	r3, [pc, #560]	; (800e0a8 <enter_action+0x25c>)
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d04b      	beq.n	800df16 <enter_action+0xca>
 800de7e:	4b8a      	ldr	r3, [pc, #552]	; (800e0a8 <enter_action+0x25c>)
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d047      	beq.n	800df16 <enter_action+0xca>
	{
		switch(xyz.coordinates2)
 800de86:	4b88      	ldr	r3, [pc, #544]	; (800e0a8 <enter_action+0x25c>)
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	2b05      	cmp	r3, #5
 800de8c:	d83b      	bhi.n	800df06 <enter_action+0xba>
 800de8e:	009a      	lsls	r2, r3, #2
 800de90:	4b86      	ldr	r3, [pc, #536]	; (800e0ac <enter_action+0x260>)
 800de92:	18d3      	adds	r3, r2, r3
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	469f      	mov	pc, r3
		{
			case 1:break;
			case 2://rate
			{
				Cursor_Position++;
 800de98:	4b85      	ldr	r3, [pc, #532]	; (800e0b0 <enter_action+0x264>)
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	3301      	adds	r3, #1
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	4b83      	ldr	r3, [pc, #524]	; (800e0b0 <enter_action+0x264>)
 800dea2:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>4+6) Cursor_Position=0+6;
 800dea4:	4b82      	ldr	r3, [pc, #520]	; (800e0b0 <enter_action+0x264>)
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	2b0a      	cmp	r3, #10
 800deaa:	d92e      	bls.n	800df0a <enter_action+0xbe>
 800deac:	4b80      	ldr	r3, [pc, #512]	; (800e0b0 <enter_action+0x264>)
 800deae:	2206      	movs	r2, #6
 800deb0:	701a      	strb	r2, [r3, #0]
				break;
 800deb2:	e02a      	b.n	800df0a <enter_action+0xbe>
			}
			case 3:break;//以后补充
			case 4://cycle on/off delay
			{
				if(Cursor_Position==3+6)	Cursor_Position=4+6;
 800deb4:	4b7e      	ldr	r3, [pc, #504]	; (800e0b0 <enter_action+0x264>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	2b09      	cmp	r3, #9
 800deba:	d102      	bne.n	800dec2 <enter_action+0x76>
 800debc:	4b7c      	ldr	r3, [pc, #496]	; (800e0b0 <enter_action+0x264>)
 800debe:	220a      	movs	r2, #10
 800dec0:	701a      	strb	r2, [r3, #0]
				Cursor_Position++;
 800dec2:	4b7b      	ldr	r3, [pc, #492]	; (800e0b0 <enter_action+0x264>)
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	3301      	adds	r3, #1
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	4b79      	ldr	r3, [pc, #484]	; (800e0b0 <enter_action+0x264>)
 800decc:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position>7+6) 	Cursor_Position=0+6;
 800dece:	4b78      	ldr	r3, [pc, #480]	; (800e0b0 <enter_action+0x264>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b0d      	cmp	r3, #13
 800ded4:	d91b      	bls.n	800df0e <enter_action+0xc2>
 800ded6:	4b76      	ldr	r3, [pc, #472]	; (800e0b0 <enter_action+0x264>)
 800ded8:	2206      	movs	r2, #6
 800deda:	701a      	strb	r2, [r3, #0]
				break;
 800dedc:	e017      	b.n	800df0e <enter_action+0xc2>
			}
			case 5:
			{
				if(xyz.coordinates3==2)//gain
 800dede:	4b72      	ldr	r3, [pc, #456]	; (800e0a8 <enter_action+0x25c>)
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d115      	bne.n	800df12 <enter_action+0xc6>
				{
					if(Cursor_Position==4+6)
 800dee6:	4b72      	ldr	r3, [pc, #456]	; (800e0b0 <enter_action+0x264>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	2b0a      	cmp	r3, #10
 800deec:	d103      	bne.n	800def6 <enter_action+0xaa>
					{
						Cursor_Position=5+6;
 800deee:	4b70      	ldr	r3, [pc, #448]	; (800e0b0 <enter_action+0x264>)
 800def0:	220b      	movs	r2, #11
 800def2:	701a      	strb	r2, [r3, #0]
				}
				if(xyz.coordinates3==3)//frq
				{
					;
				}
				break;
 800def4:	e00d      	b.n	800df12 <enter_action+0xc6>
					else if(Cursor_Position==5+6)
 800def6:	4b6e      	ldr	r3, [pc, #440]	; (800e0b0 <enter_action+0x264>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b0b      	cmp	r3, #11
 800defc:	d109      	bne.n	800df12 <enter_action+0xc6>
						Cursor_Position=4+6;
 800defe:	4b6c      	ldr	r3, [pc, #432]	; (800e0b0 <enter_action+0x264>)
 800df00:	220a      	movs	r2, #10
 800df02:	701a      	strb	r2, [r3, #0]
				break;
 800df04:	e005      	b.n	800df12 <enter_action+0xc6>

			}
			default: break;
 800df06:	46c0      	nop			; (mov r8, r8)
 800df08:	e043      	b.n	800df92 <enter_action+0x146>
				break;
 800df0a:	46c0      	nop			; (mov r8, r8)
 800df0c:	e041      	b.n	800df92 <enter_action+0x146>
				break;
 800df0e:	46c0      	nop			; (mov r8, r8)
 800df10:	e03f      	b.n	800df92 <enter_action+0x146>
				break;
 800df12:	46c0      	nop			; (mov r8, r8)
		switch(xyz.coordinates2)
 800df14:	e03d      	b.n	800df92 <enter_action+0x146>
		}

	}
	/*V I Set*/
	else if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800df16:	4b64      	ldr	r3, [pc, #400]	; (800e0a8 <enter_action+0x25c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d134      	bne.n	800df88 <enter_action+0x13c>
 800df1e:	4b62      	ldr	r3, [pc, #392]	; (800e0a8 <enter_action+0x25c>)
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d030      	beq.n	800df88 <enter_action+0x13c>
	{
		switch(xyz.coordinates2)
 800df26:	4b60      	ldr	r3, [pc, #384]	; (800e0a8 <enter_action+0x25c>)
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d002      	beq.n	800df34 <enter_action+0xe8>
 800df2e:	2b02      	cmp	r3, #2
 800df30:	d015      	beq.n	800df5e <enter_action+0x112>
 800df32:	e02e      	b.n	800df92 <enter_action+0x146>
		{
			case 1://I set
			{
				Cursor_Position++;
 800df34:	4b5e      	ldr	r3, [pc, #376]	; (800e0b0 <enter_action+0x264>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	3301      	adds	r3, #1
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	4b5c      	ldr	r3, [pc, #368]	; (800e0b0 <enter_action+0x264>)
 800df3e:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800df40:	4b5b      	ldr	r3, [pc, #364]	; (800e0b0 <enter_action+0x264>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b0c      	cmp	r3, #12
 800df46:	d102      	bne.n	800df4e <enter_action+0x102>
 800df48:	4b59      	ldr	r3, [pc, #356]	; (800e0b0 <enter_action+0x264>)
 800df4a:	220d      	movs	r2, #13
 800df4c:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800df4e:	4b58      	ldr	r3, [pc, #352]	; (800e0b0 <enter_action+0x264>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2b0f      	cmp	r3, #15
 800df54:	d11a      	bne.n	800df8c <enter_action+0x140>
 800df56:	4b56      	ldr	r3, [pc, #344]	; (800e0b0 <enter_action+0x264>)
 800df58:	2209      	movs	r2, #9
 800df5a:	701a      	strb	r2, [r3, #0]
				break;
 800df5c:	e016      	b.n	800df8c <enter_action+0x140>
			}
			case 2://V set
			{
				Cursor_Position++;
 800df5e:	4b54      	ldr	r3, [pc, #336]	; (800e0b0 <enter_action+0x264>)
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	3301      	adds	r3, #1
 800df64:	b2da      	uxtb	r2, r3
 800df66:	4b52      	ldr	r3, [pc, #328]	; (800e0b0 <enter_action+0x264>)
 800df68:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800df6a:	4b51      	ldr	r3, [pc, #324]	; (800e0b0 <enter_action+0x264>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b03      	cmp	r3, #3
 800df70:	d102      	bne.n	800df78 <enter_action+0x12c>
 800df72:	4b4f      	ldr	r3, [pc, #316]	; (800e0b0 <enter_action+0x264>)
 800df74:	2204      	movs	r2, #4
 800df76:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800df78:	4b4d      	ldr	r3, [pc, #308]	; (800e0b0 <enter_action+0x264>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	2b06      	cmp	r3, #6
 800df7e:	d107      	bne.n	800df90 <enter_action+0x144>
 800df80:	4b4b      	ldr	r3, [pc, #300]	; (800e0b0 <enter_action+0x264>)
 800df82:	2200      	movs	r2, #0
 800df84:	701a      	strb	r2, [r3, #0]
				break;
 800df86:	e003      	b.n	800df90 <enter_action+0x144>
			}
		}

	}
 800df88:	46c0      	nop			; (mov r8, r8)
 800df8a:	e002      	b.n	800df92 <enter_action+0x146>
				break;
 800df8c:	46c0      	nop			; (mov r8, r8)
 800df8e:	e000      	b.n	800df92 <enter_action+0x146>
				break;
 800df90:	46c0      	nop			; (mov r8, r8)
	/*save load */
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800df92:	4b45      	ldr	r3, [pc, #276]	; (800e0a8 <enter_action+0x25c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b03      	cmp	r3, #3
 800df98:	d139      	bne.n	800e00e <enter_action+0x1c2>
 800df9a:	4b43      	ldr	r3, [pc, #268]	; (800e0a8 <enter_action+0x25c>)
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d035      	beq.n	800e00e <enter_action+0x1c2>
	{
		switch(xyz.coordinates2)
 800dfa2:	4b41      	ldr	r3, [pc, #260]	; (800e0a8 <enter_action+0x25c>)
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d133      	bne.n	800e012 <enter_action+0x1c6>
		{
			case 1://save
			{
				if(xyz.coordinates3==1)//v est
 800dfaa:	4b3f      	ldr	r3, [pc, #252]	; (800e0a8 <enter_action+0x25c>)
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d114      	bne.n	800dfdc <enter_action+0x190>
				{
					Cursor_Position++;
 800dfb2:	4b3f      	ldr	r3, [pc, #252]	; (800e0b0 <enter_action+0x264>)
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	4b3d      	ldr	r3, [pc, #244]	; (800e0b0 <enter_action+0x264>)
 800dfbc:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2)	Cursor_Position=4;
 800dfbe:	4b3c      	ldr	r3, [pc, #240]	; (800e0b0 <enter_action+0x264>)
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	2b02      	cmp	r3, #2
 800dfc4:	d102      	bne.n	800dfcc <enter_action+0x180>
 800dfc6:	4b3a      	ldr	r3, [pc, #232]	; (800e0b0 <enter_action+0x264>)
 800dfc8:	2204      	movs	r2, #4
 800dfca:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5)	Cursor_Position=0;
 800dfcc:	4b38      	ldr	r3, [pc, #224]	; (800e0b0 <enter_action+0x264>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b05      	cmp	r3, #5
 800dfd2:	d120      	bne.n	800e016 <enter_action+0x1ca>
 800dfd4:	4b36      	ldr	r3, [pc, #216]	; (800e0b0 <enter_action+0x264>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	701a      	strb	r2, [r3, #0]
					break;
 800dfda:	e01c      	b.n	800e016 <enter_action+0x1ca>
				}
				else if(xyz.coordinates3==2)//I set
 800dfdc:	4b32      	ldr	r3, [pc, #200]	; (800e0a8 <enter_action+0x25c>)
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d116      	bne.n	800e012 <enter_action+0x1c6>
				{
					Cursor_Position++;
 800dfe4:	4b32      	ldr	r3, [pc, #200]	; (800e0b0 <enter_action+0x264>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	4b30      	ldr	r3, [pc, #192]	; (800e0b0 <enter_action+0x264>)
 800dfee:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==2+9)	Cursor_Position=4;
 800dff0:	4b2f      	ldr	r3, [pc, #188]	; (800e0b0 <enter_action+0x264>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	2b0b      	cmp	r3, #11
 800dff6:	d102      	bne.n	800dffe <enter_action+0x1b2>
 800dff8:	4b2d      	ldr	r3, [pc, #180]	; (800e0b0 <enter_action+0x264>)
 800dffa:	2204      	movs	r2, #4
 800dffc:	701a      	strb	r2, [r3, #0]
					if(Cursor_Position==5+9)	Cursor_Position=0;
 800dffe:	4b2c      	ldr	r3, [pc, #176]	; (800e0b0 <enter_action+0x264>)
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	2b0e      	cmp	r3, #14
 800e004:	d109      	bne.n	800e01a <enter_action+0x1ce>
 800e006:	4b2a      	ldr	r3, [pc, #168]	; (800e0b0 <enter_action+0x264>)
 800e008:	2200      	movs	r2, #0
 800e00a:	701a      	strb	r2, [r3, #0]
					break;
 800e00c:	e005      	b.n	800e01a <enter_action+0x1ce>
			{
				break;
			}

		}
	}
 800e00e:	46c0      	nop			; (mov r8, r8)
 800e010:	e004      	b.n	800e01c <enter_action+0x1d0>
				break;
 800e012:	46c0      	nop			; (mov r8, r8)
 800e014:	e002      	b.n	800e01c <enter_action+0x1d0>
					break;
 800e016:	46c0      	nop			; (mov r8, r8)
 800e018:	e000      	b.n	800e01c <enter_action+0x1d0>
					break;
 800e01a:	46c0      	nop			; (mov r8, r8)
	if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800e01c:	4b22      	ldr	r3, [pc, #136]	; (800e0a8 <enter_action+0x25c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d138      	bne.n	800e096 <enter_action+0x24a>
 800e024:	4b20      	ldr	r3, [pc, #128]	; (800e0a8 <enter_action+0x25c>)
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	2b08      	cmp	r3, #8
 800e02a:	d134      	bne.n	800e096 <enter_action+0x24a>
	{
		switch(xyz.coordinates3)
 800e02c:	4b1e      	ldr	r3, [pc, #120]	; (800e0a8 <enter_action+0x25c>)
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	2b02      	cmp	r3, #2
 800e032:	dc02      	bgt.n	800e03a <enter_action+0x1ee>
 800e034:	2b00      	cmp	r3, #0
 800e036:	dc04      	bgt.n	800e042 <enter_action+0x1f6>
			}

		}
	}

}
 800e038:	e032      	b.n	800e0a0 <enter_action+0x254>
 800e03a:	3b03      	subs	r3, #3
		switch(xyz.coordinates3)
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d82f      	bhi.n	800e0a0 <enter_action+0x254>
 800e040:	e014      	b.n	800e06c <enter_action+0x220>
				Cursor_Position++;
 800e042:	4b1b      	ldr	r3, [pc, #108]	; (800e0b0 <enter_action+0x264>)
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	3301      	adds	r3, #1
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	4b19      	ldr	r3, [pc, #100]	; (800e0b0 <enter_action+0x264>)
 800e04c:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3)	Cursor_Position=4;
 800e04e:	4b18      	ldr	r3, [pc, #96]	; (800e0b0 <enter_action+0x264>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	2b03      	cmp	r3, #3
 800e054:	d102      	bne.n	800e05c <enter_action+0x210>
 800e056:	4b16      	ldr	r3, [pc, #88]	; (800e0b0 <enter_action+0x264>)
 800e058:	2204      	movs	r2, #4
 800e05a:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6)	Cursor_Position=0;
 800e05c:	4b14      	ldr	r3, [pc, #80]	; (800e0b0 <enter_action+0x264>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b06      	cmp	r3, #6
 800e062:	d11a      	bne.n	800e09a <enter_action+0x24e>
 800e064:	4b12      	ldr	r3, [pc, #72]	; (800e0b0 <enter_action+0x264>)
 800e066:	2200      	movs	r2, #0
 800e068:	701a      	strb	r2, [r3, #0]
				break;
 800e06a:	e016      	b.n	800e09a <enter_action+0x24e>
				Cursor_Position++;
 800e06c:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <enter_action+0x264>)
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	3301      	adds	r3, #1
 800e072:	b2da      	uxtb	r2, r3
 800e074:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <enter_action+0x264>)
 800e076:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==3+9)	Cursor_Position=4+9;
 800e078:	4b0d      	ldr	r3, [pc, #52]	; (800e0b0 <enter_action+0x264>)
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	2b0c      	cmp	r3, #12
 800e07e:	d102      	bne.n	800e086 <enter_action+0x23a>
 800e080:	4b0b      	ldr	r3, [pc, #44]	; (800e0b0 <enter_action+0x264>)
 800e082:	220d      	movs	r2, #13
 800e084:	701a      	strb	r2, [r3, #0]
				if(Cursor_Position==6+9)	Cursor_Position=0+9;
 800e086:	4b0a      	ldr	r3, [pc, #40]	; (800e0b0 <enter_action+0x264>)
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b0f      	cmp	r3, #15
 800e08c:	d107      	bne.n	800e09e <enter_action+0x252>
 800e08e:	4b08      	ldr	r3, [pc, #32]	; (800e0b0 <enter_action+0x264>)
 800e090:	2209      	movs	r2, #9
 800e092:	701a      	strb	r2, [r3, #0]
				break;
 800e094:	e003      	b.n	800e09e <enter_action+0x252>
	}
 800e096:	46c0      	nop			; (mov r8, r8)
 800e098:	e002      	b.n	800e0a0 <enter_action+0x254>
				break;
 800e09a:	46c0      	nop			; (mov r8, r8)
 800e09c:	e000      	b.n	800e0a0 <enter_action+0x254>
				break;
 800e09e:	46c0      	nop			; (mov r8, r8)
}
 800e0a0:	46c0      	nop			; (mov r8, r8)
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	46c0      	nop			; (mov r8, r8)
 800e0a8:	200039f8 	.word	0x200039f8
 800e0ac:	080187e4 	.word	0x080187e4
 800e0b0:	2000398e 	.word	0x2000398e

0800e0b4 <Encoder_Data_refresh>:
 * @brief  编码器转动数据更新
 * @param  none
 * @retval None
 */
void Encoder_Data_refresh(void)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	af00      	add	r7, sp, #0
	if(Flag.TIM3_IT==1)
 800e0b8:	4b52      	ldr	r3, [pc, #328]	; (800e204 <Encoder_Data_refresh+0x150>)
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d000      	beq.n	800e0c2 <Encoder_Data_refresh+0xe>
 800e0c0:	e09c      	b.n	800e1fc <Encoder_Data_refresh+0x148>
	{
		Flag.TIM3_IT=0;
 800e0c2:	4b50      	ldr	r3, [pc, #320]	; (800e204 <Encoder_Data_refresh+0x150>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	609a      	str	r2, [r3, #8]
		/*first menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3==0))
 800e0c8:	4b4f      	ldr	r3, [pc, #316]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d109      	bne.n	800e0e4 <Encoder_Data_refresh+0x30>
 800e0d0:	4b4d      	ldr	r3, [pc, #308]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <Encoder_Data_refresh+0x30>
 800e0d8:	4b4b      	ldr	r3, [pc, #300]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d101      	bne.n	800e0e4 <Encoder_Data_refresh+0x30>
		{
			First_menu_data_Refresh();
 800e0e0:	f7fe fcda 	bl	800ca98 <First_menu_data_Refresh>
		}
		/*second menu*/
		if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0) )
 800e0e4:	4b48      	ldr	r3, [pc, #288]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d121      	bne.n	800e130 <Encoder_Data_refresh+0x7c>
 800e0ec:	4b46      	ldr	r3, [pc, #280]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d01d      	beq.n	800e130 <Encoder_Data_refresh+0x7c>
 800e0f4:	4b44      	ldr	r3, [pc, #272]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d019      	beq.n	800e130 <Encoder_Data_refresh+0x7c>
		{
			switch(xyz.coordinates2)
 800e0fc:	4b42      	ldr	r3, [pc, #264]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	2b05      	cmp	r3, #5
 800e102:	d817      	bhi.n	800e134 <Encoder_Data_refresh+0x80>
 800e104:	009a      	lsls	r2, r3, #2
 800e106:	4b41      	ldr	r3, [pc, #260]	; (800e20c <Encoder_Data_refresh+0x158>)
 800e108:	18d3      	adds	r3, r2, r3
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	469f      	mov	pc, r3
			{
				case 1:break;
				case 2://rate
				{
					if(xyz.coordinates3==1)//I rate
 800e10e:	4b3e      	ldr	r3, [pc, #248]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d102      	bne.n	800e11c <Encoder_Data_refresh+0x68>
					{
						IRate_data_Refresh();
 800e116:	f7ff fbbf 	bl	800d898 <IRate_data_Refresh>
					}
					else if(xyz.coordinates3==2)//V rate
					{
						VRate_data_Refresh();
					}
					break;
 800e11a:	e00d      	b.n	800e138 <Encoder_Data_refresh+0x84>
					else if(xyz.coordinates3==2)//V rate
 800e11c:	4b3a      	ldr	r3, [pc, #232]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	2b02      	cmp	r3, #2
 800e122:	d109      	bne.n	800e138 <Encoder_Data_refresh+0x84>
						VRate_data_Refresh();
 800e124:	f7ff f9b4 	bl	800d490 <VRate_data_Refresh>
					break;
 800e128:	e006      	b.n	800e138 <Encoder_Data_refresh+0x84>
				}
				case 3:break;
				case 4://delay cycle on/off
				{
					Timer_data_Refresh();
 800e12a:	f7ff fd79 	bl	800dc20 <Timer_data_Refresh>
					break;
 800e12e:	e004      	b.n	800e13a <Encoder_Data_refresh+0x86>
					}
					break;
				}
				default: break;
			}
		}
 800e130:	46c0      	nop			; (mov r8, r8)
 800e132:	e002      	b.n	800e13a <Encoder_Data_refresh+0x86>
				default: break;
 800e134:	46c0      	nop			; (mov r8, r8)
 800e136:	e000      	b.n	800e13a <Encoder_Data_refresh+0x86>
					break;
 800e138:	46c0      	nop			; (mov r8, r8)
		/*V I set*/
		if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e13a:	4b33      	ldr	r3, [pc, #204]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b02      	cmp	r3, #2
 800e140:	d110      	bne.n	800e164 <Encoder_Data_refresh+0xb0>
 800e142:	4b31      	ldr	r3, [pc, #196]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00c      	beq.n	800e164 <Encoder_Data_refresh+0xb0>
		{
			switch(xyz.coordinates2)
 800e14a:	4b2f      	ldr	r3, [pc, #188]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d002      	beq.n	800e158 <Encoder_Data_refresh+0xa4>
 800e152:	2b02      	cmp	r3, #2
 800e154:	d003      	beq.n	800e15e <Encoder_Data_refresh+0xaa>
 800e156:	e006      	b.n	800e166 <Encoder_Data_refresh+0xb2>
			{
				case 1:
				{
					Iset_data_Refresh();
 800e158:	f7ff f846 	bl	800d1e8 <Iset_data_Refresh>
					break;
 800e15c:	e003      	b.n	800e166 <Encoder_Data_refresh+0xb2>
				}
				case 2:
				{
					Vset_data_Refresh();
 800e15e:	f7fe fef5 	bl	800cf4c <Vset_data_Refresh>
					break;
 800e162:	e000      	b.n	800e166 <Encoder_Data_refresh+0xb2>
				}

			}

		}
 800e164:	46c0      	nop			; (mov r8, r8)
		/*save load */
		if((xyz.coordinates1==3) && (xyz.coordinates2!=0))
 800e166:	4b28      	ldr	r3, [pc, #160]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b03      	cmp	r3, #3
 800e16c:	d110      	bne.n	800e190 <Encoder_Data_refresh+0xdc>
 800e16e:	4b26      	ldr	r3, [pc, #152]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00c      	beq.n	800e190 <Encoder_Data_refresh+0xdc>
		{
			switch(xyz.coordinates2)
 800e176:	4b24      	ldr	r3, [pc, #144]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d002      	beq.n	800e184 <Encoder_Data_refresh+0xd0>
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d003      	beq.n	800e18a <Encoder_Data_refresh+0xd6>
 800e182:	e006      	b.n	800e192 <Encoder_Data_refresh+0xde>
			{
				case 1://save
				{
					Save_data_Refresh();
 800e184:	f7ff fc38 	bl	800d9f8 <Save_data_Refresh>
					break;
 800e188:	e003      	b.n	800e192 <Encoder_Data_refresh+0xde>
				}
				case 2://recall
				{
					Recall_data_Refresh();
 800e18a:	f7ff fd2f 	bl	800dbec <Recall_data_Refresh>
					break;
 800e18e:	e000      	b.n	800e192 <Encoder_Data_refresh+0xde>
				}

			}
		}
 800e190:	46c0      	nop			; (mov r8, r8)
		/*light set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==1)
 800e192:	4b1d      	ldr	r3, [pc, #116]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b01      	cmp	r3, #1
 800e198:	d109      	bne.n	800e1ae <Encoder_Data_refresh+0xfa>
 800e19a:	4b1b      	ldr	r3, [pc, #108]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	2b06      	cmp	r3, #6
 800e1a0:	d105      	bne.n	800e1ae <Encoder_Data_refresh+0xfa>
 800e1a2:	4b19      	ldr	r3, [pc, #100]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d101      	bne.n	800e1ae <Encoder_Data_refresh+0xfa>
		{
			Light_data_Refresh();
 800e1aa:	f7ff fdd3 	bl	800dd54 <Light_data_Refresh>
		}
		/*FAN set*/
		if(xyz.coordinates1==1 && xyz.coordinates2==6 && xyz.coordinates3==3)
 800e1ae:	4b16      	ldr	r3, [pc, #88]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d109      	bne.n	800e1ca <Encoder_Data_refresh+0x116>
 800e1b6:	4b14      	ldr	r3, [pc, #80]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	2b06      	cmp	r3, #6
 800e1bc:	d105      	bne.n	800e1ca <Encoder_Data_refresh+0x116>
 800e1be:	4b12      	ldr	r3, [pc, #72]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	d101      	bne.n	800e1ca <Encoder_Data_refresh+0x116>
		{
			FAN_data_Refresh();
 800e1c6:	f7ff fdf1 	bl	800ddac <FAN_data_Refresh>
		}

		if(xyz.coordinates1==1 && xyz.coordinates2==8)
 800e1ca:	4b0f      	ldr	r3, [pc, #60]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d114      	bne.n	800e1fc <Encoder_Data_refresh+0x148>
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b08      	cmp	r3, #8
 800e1d8:	d110      	bne.n	800e1fc <Encoder_Data_refresh+0x148>
		{
			switch(xyz.coordinates3)
 800e1da:	4b0b      	ldr	r3, [pc, #44]	; (800e208 <Encoder_Data_refresh+0x154>)
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	dc02      	bgt.n	800e1e8 <Encoder_Data_refresh+0x134>
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dc04      	bgt.n	800e1f0 <Encoder_Data_refresh+0x13c>
		}


	}

}
 800e1e6:	e00a      	b.n	800e1fe <Encoder_Data_refresh+0x14a>
 800e1e8:	3b03      	subs	r3, #3
			switch(xyz.coordinates3)
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d807      	bhi.n	800e1fe <Encoder_Data_refresh+0x14a>
 800e1ee:	e002      	b.n	800e1f6 <Encoder_Data_refresh+0x142>
					Calibration_V_data_Refresh();
 800e1f0:	f7fe fc70 	bl	800cad4 <Calibration_V_data_Refresh>
					break;
 800e1f4:	e003      	b.n	800e1fe <Encoder_Data_refresh+0x14a>
					Calibration_I_data_Refresh();
 800e1f6:	f7fe fd8b 	bl	800cd10 <Calibration_I_data_Refresh>
					break;
 800e1fa:	e000      	b.n	800e1fe <Encoder_Data_refresh+0x14a>
		}
 800e1fc:	46c0      	nop			; (mov r8, r8)
}
 800e1fe:	46c0      	nop			; (mov r8, r8)
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	20003388 	.word	0x20003388
 800e208:	200039f8 	.word	0x200039f8
 800e20c:	080187fc 	.word	0x080187fc

0800e210 <Encoder_Enter_Handle>:
 * @brief  编码器按键动作
 * @param  none
 * @retval None
 */
void Encoder_Enter_Handle(void)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	af00      	add	r7, sp, #0

	static 	FunctionalState ENCODER_PRESS=DISABLE;
	static int count;

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_RESET)
 800e214:	2380      	movs	r3, #128	; 0x80
 800e216:	005a      	lsls	r2, r3, #1
 800e218:	23a0      	movs	r3, #160	; 0xa0
 800e21a:	05db      	lsls	r3, r3, #23
 800e21c:	0011      	movs	r1, r2
 800e21e:	0018      	movs	r0, r3
 800e220:	f7f8 fe8e 	bl	8006f40 <HAL_GPIO_ReadPin>
 800e224:	1e03      	subs	r3, r0, #0
 800e226:	d10f      	bne.n	800e248 <Encoder_Enter_Handle+0x38>
	{

		if(++count>=5)
 800e228:	4b19      	ldr	r3, [pc, #100]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	4b18      	ldr	r3, [pc, #96]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e230:	601a      	str	r2, [r3, #0]
 800e232:	4b17      	ldr	r3, [pc, #92]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b04      	cmp	r3, #4
 800e238:	dd26      	ble.n	800e288 <Encoder_Enter_Handle+0x78>
		{
			count=5;
 800e23a:	4b15      	ldr	r3, [pc, #84]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e23c:	2205      	movs	r2, #5
 800e23e:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=ENABLE;
 800e240:	4b14      	ldr	r3, [pc, #80]	; (800e294 <Encoder_Enter_Handle+0x84>)
 800e242:	2201      	movs	r2, #1
 800e244:	701a      	strb	r2, [r3, #0]
		}

	}


}
 800e246:	e01f      	b.n	800e288 <Encoder_Enter_Handle+0x78>
	else if(ENCODER_PRESS==ENABLE && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==GPIO_PIN_SET)
 800e248:	4b12      	ldr	r3, [pc, #72]	; (800e294 <Encoder_Enter_Handle+0x84>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d11b      	bne.n	800e288 <Encoder_Enter_Handle+0x78>
 800e250:	2380      	movs	r3, #128	; 0x80
 800e252:	005a      	lsls	r2, r3, #1
 800e254:	23a0      	movs	r3, #160	; 0xa0
 800e256:	05db      	lsls	r3, r3, #23
 800e258:	0011      	movs	r1, r2
 800e25a:	0018      	movs	r0, r3
 800e25c:	f7f8 fe70 	bl	8006f40 <HAL_GPIO_ReadPin>
 800e260:	0003      	movs	r3, r0
 800e262:	2b01      	cmp	r3, #1
 800e264:	d110      	bne.n	800e288 <Encoder_Enter_Handle+0x78>
		if(--count<=0)
 800e266:	4b0a      	ldr	r3, [pc, #40]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	1e5a      	subs	r2, r3, #1
 800e26c:	4b08      	ldr	r3, [pc, #32]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e26e:	601a      	str	r2, [r3, #0]
 800e270:	4b07      	ldr	r3, [pc, #28]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	dc07      	bgt.n	800e288 <Encoder_Enter_Handle+0x78>
			count=0;
 800e278:	4b05      	ldr	r3, [pc, #20]	; (800e290 <Encoder_Enter_Handle+0x80>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	601a      	str	r2, [r3, #0]
			ENCODER_PRESS=DISABLE;
 800e27e:	4b05      	ldr	r3, [pc, #20]	; (800e294 <Encoder_Enter_Handle+0x84>)
 800e280:	2200      	movs	r2, #0
 800e282:	701a      	strb	r2, [r3, #0]
			enter_action();//动作响应
 800e284:	f7ff fde2 	bl	800de4c <enter_action>
}
 800e288:	46c0      	nop			; (mov r8, r8)
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	46c0      	nop			; (mov r8, r8)
 800e290:	20003980 	.word	0x20003980
 800e294:	20003984 	.word	0x20003984

0800e298 <__NVIC_SystemReset>:
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e29c:	f3bf 8f4f 	dsb	sy
}
 800e2a0:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e2a2:	4b04      	ldr	r3, [pc, #16]	; (800e2b4 <__NVIC_SystemReset+0x1c>)
 800e2a4:	4a04      	ldr	r2, [pc, #16]	; (800e2b8 <__NVIC_SystemReset+0x20>)
 800e2a6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e2a8:	f3bf 8f4f 	dsb	sy
}
 800e2ac:	46c0      	nop			; (mov r8, r8)
    __NOP();
 800e2ae:	46c0      	nop			; (mov r8, r8)
 800e2b0:	e7fd      	b.n	800e2ae <__NVIC_SystemReset+0x16>
 800e2b2:	46c0      	nop			; (mov r8, r8)
 800e2b4:	e000ed00 	.word	0xe000ed00
 800e2b8:	05fa0004 	.word	0x05fa0004

0800e2bc <String_to_float>:
/***********************************************************************************************************************************************************************************/
/*********************************************************************************以下为函数接口*************************************************************************************/
/***********************************************************************************************************************************************************************************/

float String_to_float(char* string)
{
 800e2bc:	b5b0      	push	{r4, r5, r7, lr}
 800e2be:	b086      	sub	sp, #24
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
	float value;

		uint8_t point_index=0;
 800e2c4:	2313      	movs	r3, #19
 800e2c6:	18fb      	adds	r3, r7, r3
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	701a      	strb	r2, [r3, #0]
		uint8_t data_length=0;
 800e2cc:	2312      	movs	r3, #18
 800e2ce:	18fb      	adds	r3, r7, r3
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<strlen(string);i++)
 800e2d4:	2311      	movs	r3, #17
 800e2d6:	18fb      	adds	r3, r7, r3
 800e2d8:	2200      	movs	r2, #0
 800e2da:	701a      	strb	r2, [r3, #0]
 800e2dc:	e013      	b.n	800e306 <String_to_float+0x4a>
		{
			if(string[i]=='.')
 800e2de:	2111      	movs	r1, #17
 800e2e0:	187b      	adds	r3, r7, r1
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	18d3      	adds	r3, r2, r3
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e2ec:	d105      	bne.n	800e2fa <String_to_float+0x3e>
			{
				point_index=i;
 800e2ee:	2313      	movs	r3, #19
 800e2f0:	18fb      	adds	r3, r7, r3
 800e2f2:	187a      	adds	r2, r7, r1
 800e2f4:	7812      	ldrb	r2, [r2, #0]
 800e2f6:	701a      	strb	r2, [r3, #0]
				break;
 800e2f8:	e00f      	b.n	800e31a <String_to_float+0x5e>
		for(uint8_t i=0;i<strlen(string);i++)
 800e2fa:	2111      	movs	r1, #17
 800e2fc:	187b      	adds	r3, r7, r1
 800e2fe:	781a      	ldrb	r2, [r3, #0]
 800e300:	187b      	adds	r3, r7, r1
 800e302:	3201      	adds	r2, #1
 800e304:	701a      	strb	r2, [r3, #0]
 800e306:	2311      	movs	r3, #17
 800e308:	18fb      	adds	r3, r7, r3
 800e30a:	781c      	ldrb	r4, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	0018      	movs	r0, r3
 800e310:	f7f1 ff00 	bl	8000114 <strlen>
 800e314:	0003      	movs	r3, r0
 800e316:	429c      	cmp	r4, r3
 800e318:	d3e1      	bcc.n	800e2de <String_to_float+0x22>
			}

		}
		if(point_index==0)
 800e31a:	2313      	movs	r3, #19
 800e31c:	18fb      	adds	r3, r7, r3
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d169      	bne.n	800e3f8 <String_to_float+0x13c>
		{
			for(uint8_t j=0;j<strlen(string);j++)
 800e324:	2310      	movs	r3, #16
 800e326:	18fb      	adds	r3, r7, r3
 800e328:	2200      	movs	r2, #0
 800e32a:	701a      	strb	r2, [r3, #0]
 800e32c:	e01a      	b.n	800e364 <String_to_float+0xa8>
			{
				if(string[j]<='9' && string[j]>='0')
 800e32e:	2110      	movs	r1, #16
 800e330:	187b      	adds	r3, r7, r1
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	18d3      	adds	r3, r2, r3
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	2b39      	cmp	r3, #57	; 0x39
 800e33c:	d80c      	bhi.n	800e358 <String_to_float+0x9c>
 800e33e:	187b      	adds	r3, r7, r1
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	18d3      	adds	r3, r2, r3
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	2b2f      	cmp	r3, #47	; 0x2f
 800e34a:	d905      	bls.n	800e358 <String_to_float+0x9c>
				{
					data_length++;
 800e34c:	2112      	movs	r1, #18
 800e34e:	187b      	adds	r3, r7, r1
 800e350:	781a      	ldrb	r2, [r3, #0]
 800e352:	187b      	adds	r3, r7, r1
 800e354:	3201      	adds	r2, #1
 800e356:	701a      	strb	r2, [r3, #0]
			for(uint8_t j=0;j<strlen(string);j++)
 800e358:	2110      	movs	r1, #16
 800e35a:	187b      	adds	r3, r7, r1
 800e35c:	781a      	ldrb	r2, [r3, #0]
 800e35e:	187b      	adds	r3, r7, r1
 800e360:	3201      	adds	r2, #1
 800e362:	701a      	strb	r2, [r3, #0]
 800e364:	2310      	movs	r3, #16
 800e366:	18fb      	adds	r3, r7, r3
 800e368:	781c      	ldrb	r4, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	0018      	movs	r0, r3
 800e36e:	f7f1 fed1 	bl	8000114 <strlen>
 800e372:	0003      	movs	r3, r0
 800e374:	429c      	cmp	r4, r3
 800e376:	d3da      	bcc.n	800e32e <String_to_float+0x72>
				}

			}
			for(uint8_t j=0;j<data_length;j++)
 800e378:	230f      	movs	r3, #15
 800e37a:	18fb      	adds	r3, r7, r3
 800e37c:	2200      	movs	r2, #0
 800e37e:	701a      	strb	r2, [r3, #0]
 800e380:	e031      	b.n	800e3e6 <String_to_float+0x12a>
			{
				value+=(string[j]-'0')*(float)pow(10,(data_length-j-1));
 800e382:	250f      	movs	r5, #15
 800e384:	197b      	adds	r3, r7, r5
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	18d3      	adds	r3, r2, r3
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	3b30      	subs	r3, #48	; 0x30
 800e390:	0018      	movs	r0, r3
 800e392:	f7f2 ff59 	bl	8001248 <__aeabi_i2f>
 800e396:	1c04      	adds	r4, r0, #0
 800e398:	2312      	movs	r3, #18
 800e39a:	18fb      	adds	r3, r7, r3
 800e39c:	781a      	ldrb	r2, [r3, #0]
 800e39e:	197b      	adds	r3, r7, r5
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	0018      	movs	r0, r3
 800e3a8:	f7f4 fd2c 	bl	8002e04 <__aeabi_i2d>
 800e3ac:	0002      	movs	r2, r0
 800e3ae:	000b      	movs	r3, r1
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	4951      	ldr	r1, [pc, #324]	; (800e4f8 <String_to_float+0x23c>)
 800e3b4:	f009 f8d0 	bl	8017558 <pow>
 800e3b8:	0002      	movs	r2, r0
 800e3ba:	000b      	movs	r3, r1
 800e3bc:	0010      	movs	r0, r2
 800e3be:	0019      	movs	r1, r3
 800e3c0:	f7f4 fdbe 	bl	8002f40 <__aeabi_d2f>
 800e3c4:	1c03      	adds	r3, r0, #0
 800e3c6:	1c19      	adds	r1, r3, #0
 800e3c8:	1c20      	adds	r0, r4, #0
 800e3ca:	f7f2 fc49 	bl	8000c60 <__aeabi_fmul>
 800e3ce:	1c03      	adds	r3, r0, #0
 800e3d0:	1c19      	adds	r1, r3, #0
 800e3d2:	6978      	ldr	r0, [r7, #20]
 800e3d4:	f7f2 f8de 	bl	8000594 <__aeabi_fadd>
 800e3d8:	1c03      	adds	r3, r0, #0
 800e3da:	617b      	str	r3, [r7, #20]
			for(uint8_t j=0;j<data_length;j++)
 800e3dc:	197b      	adds	r3, r7, r5
 800e3de:	781a      	ldrb	r2, [r3, #0]
 800e3e0:	197b      	adds	r3, r7, r5
 800e3e2:	3201      	adds	r2, #1
 800e3e4:	701a      	strb	r2, [r3, #0]
 800e3e6:	230f      	movs	r3, #15
 800e3e8:	18fa      	adds	r2, r7, r3
 800e3ea:	2312      	movs	r3, #18
 800e3ec:	18fb      	adds	r3, r7, r3
 800e3ee:	7812      	ldrb	r2, [r2, #0]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d3c5      	bcc.n	800e382 <String_to_float+0xc6>
 800e3f6:	e07a      	b.n	800e4ee <String_to_float+0x232>
			}
		}
		else
		{
			for(uint8_t j=0;j<point_index;j++)
 800e3f8:	230e      	movs	r3, #14
 800e3fa:	18fb      	adds	r3, r7, r3
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	701a      	strb	r2, [r3, #0]
 800e400:	e031      	b.n	800e466 <String_to_float+0x1aa>
			{
				value+=(string[j]-'0')*(float)pow(10,(point_index-j-1));
 800e402:	250e      	movs	r5, #14
 800e404:	197b      	adds	r3, r7, r5
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	18d3      	adds	r3, r2, r3
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	3b30      	subs	r3, #48	; 0x30
 800e410:	0018      	movs	r0, r3
 800e412:	f7f2 ff19 	bl	8001248 <__aeabi_i2f>
 800e416:	1c04      	adds	r4, r0, #0
 800e418:	2313      	movs	r3, #19
 800e41a:	18fb      	adds	r3, r7, r3
 800e41c:	781a      	ldrb	r2, [r3, #0]
 800e41e:	197b      	adds	r3, r7, r5
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	3b01      	subs	r3, #1
 800e426:	0018      	movs	r0, r3
 800e428:	f7f4 fcec 	bl	8002e04 <__aeabi_i2d>
 800e42c:	0002      	movs	r2, r0
 800e42e:	000b      	movs	r3, r1
 800e430:	2000      	movs	r0, #0
 800e432:	4931      	ldr	r1, [pc, #196]	; (800e4f8 <String_to_float+0x23c>)
 800e434:	f009 f890 	bl	8017558 <pow>
 800e438:	0002      	movs	r2, r0
 800e43a:	000b      	movs	r3, r1
 800e43c:	0010      	movs	r0, r2
 800e43e:	0019      	movs	r1, r3
 800e440:	f7f4 fd7e 	bl	8002f40 <__aeabi_d2f>
 800e444:	1c03      	adds	r3, r0, #0
 800e446:	1c19      	adds	r1, r3, #0
 800e448:	1c20      	adds	r0, r4, #0
 800e44a:	f7f2 fc09 	bl	8000c60 <__aeabi_fmul>
 800e44e:	1c03      	adds	r3, r0, #0
 800e450:	1c19      	adds	r1, r3, #0
 800e452:	6978      	ldr	r0, [r7, #20]
 800e454:	f7f2 f89e 	bl	8000594 <__aeabi_fadd>
 800e458:	1c03      	adds	r3, r0, #0
 800e45a:	617b      	str	r3, [r7, #20]
			for(uint8_t j=0;j<point_index;j++)
 800e45c:	197b      	adds	r3, r7, r5
 800e45e:	781a      	ldrb	r2, [r3, #0]
 800e460:	197b      	adds	r3, r7, r5
 800e462:	3201      	adds	r2, #1
 800e464:	701a      	strb	r2, [r3, #0]
 800e466:	230e      	movs	r3, #14
 800e468:	18fa      	adds	r2, r7, r3
 800e46a:	2313      	movs	r3, #19
 800e46c:	18fb      	adds	r3, r7, r3
 800e46e:	7812      	ldrb	r2, [r2, #0]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	429a      	cmp	r2, r3
 800e474:	d3c5      	bcc.n	800e402 <String_to_float+0x146>
			}
			for(uint8_t j=1;j<3;j++)
 800e476:	230d      	movs	r3, #13
 800e478:	18fb      	adds	r3, r7, r3
 800e47a:	2201      	movs	r2, #1
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	e031      	b.n	800e4e4 <String_to_float+0x228>
			{
				value+=(string[point_index+j]-'0')/(float)pow(10,j);
 800e480:	2313      	movs	r3, #19
 800e482:	18fb      	adds	r3, r7, r3
 800e484:	781a      	ldrb	r2, [r3, #0]
 800e486:	250d      	movs	r5, #13
 800e488:	197b      	adds	r3, r7, r5
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	18d3      	adds	r3, r2, r3
 800e48e:	001a      	movs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	189b      	adds	r3, r3, r2
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	3b30      	subs	r3, #48	; 0x30
 800e498:	0018      	movs	r0, r3
 800e49a:	f7f2 fed5 	bl	8001248 <__aeabi_i2f>
 800e49e:	1c04      	adds	r4, r0, #0
 800e4a0:	197b      	adds	r3, r7, r5
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	0018      	movs	r0, r3
 800e4a6:	f7f4 fcdd 	bl	8002e64 <__aeabi_ui2d>
 800e4aa:	0002      	movs	r2, r0
 800e4ac:	000b      	movs	r3, r1
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	4911      	ldr	r1, [pc, #68]	; (800e4f8 <String_to_float+0x23c>)
 800e4b2:	f009 f851 	bl	8017558 <pow>
 800e4b6:	0002      	movs	r2, r0
 800e4b8:	000b      	movs	r3, r1
 800e4ba:	0010      	movs	r0, r2
 800e4bc:	0019      	movs	r1, r3
 800e4be:	f7f4 fd3f 	bl	8002f40 <__aeabi_d2f>
 800e4c2:	1c03      	adds	r3, r0, #0
 800e4c4:	1c19      	adds	r1, r3, #0
 800e4c6:	1c20      	adds	r0, r4, #0
 800e4c8:	f7f2 fa02 	bl	80008d0 <__aeabi_fdiv>
 800e4cc:	1c03      	adds	r3, r0, #0
 800e4ce:	1c19      	adds	r1, r3, #0
 800e4d0:	6978      	ldr	r0, [r7, #20]
 800e4d2:	f7f2 f85f 	bl	8000594 <__aeabi_fadd>
 800e4d6:	1c03      	adds	r3, r0, #0
 800e4d8:	617b      	str	r3, [r7, #20]
			for(uint8_t j=1;j<3;j++)
 800e4da:	197b      	adds	r3, r7, r5
 800e4dc:	781a      	ldrb	r2, [r3, #0]
 800e4de:	197b      	adds	r3, r7, r5
 800e4e0:	3201      	adds	r2, #1
 800e4e2:	701a      	strb	r2, [r3, #0]
 800e4e4:	230d      	movs	r3, #13
 800e4e6:	18fb      	adds	r3, r7, r3
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	2b02      	cmp	r3, #2
 800e4ec:	d9c8      	bls.n	800e480 <String_to_float+0x1c4>
			}
		}


		return value;
 800e4ee:	697b      	ldr	r3, [r7, #20]




}
 800e4f0:	1c18      	adds	r0, r3, #0
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	b006      	add	sp, #24
 800e4f6:	bdb0      	pop	{r4, r5, r7, pc}
 800e4f8:	40240000 	.word	0x40240000

0800e4fc <String_To_Float>:
 * @brief  将设定电压电流功率字符数组变为浮点数
 * @param	数组名
 * @retval 对应的浮点数
 */
float String_To_Float(char* string)
{
 800e4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4fe:	b087      	sub	sp, #28
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]

	float sum=0.0;
 800e504:	2300      	movs	r3, #0
 800e506:	617b      	str	r3, [r7, #20]
	/*V set I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2!=0))
 800e508:	4bdc      	ldr	r3, [pc, #880]	; (800e87c <String_To_Float+0x380>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b02      	cmp	r3, #2
 800e50e:	d000      	beq.n	800e512 <String_To_Float+0x16>
 800e510:	e081      	b.n	800e616 <String_To_Float+0x11a>
 800e512:	4bda      	ldr	r3, [pc, #872]	; (800e87c <String_To_Float+0x380>)
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d100      	bne.n	800e51c <String_To_Float+0x20>
 800e51a:	e07c      	b.n	800e616 <String_To_Float+0x11a>
	{
		for(uint8_t i=0;i<3;i++)
 800e51c:	2313      	movs	r3, #19
 800e51e:	18fb      	adds	r3, r7, r3
 800e520:	2200      	movs	r2, #0
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	e038      	b.n	800e598 <String_To_Float+0x9c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e526:	2613      	movs	r6, #19
 800e528:	19bb      	adds	r3, r7, r6
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	18d3      	adds	r3, r2, r3
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	3b30      	subs	r3, #48	; 0x30
 800e534:	0018      	movs	r0, r3
 800e536:	f7f4 fc65 	bl	8002e04 <__aeabi_i2d>
 800e53a:	0004      	movs	r4, r0
 800e53c:	000d      	movs	r5, r1
 800e53e:	19bb      	adds	r3, r7, r6
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	2202      	movs	r2, #2
 800e544:	1ad3      	subs	r3, r2, r3
 800e546:	0018      	movs	r0, r3
 800e548:	f7f4 fc5c 	bl	8002e04 <__aeabi_i2d>
 800e54c:	0002      	movs	r2, r0
 800e54e:	000b      	movs	r3, r1
 800e550:	2000      	movs	r0, #0
 800e552:	49cb      	ldr	r1, [pc, #812]	; (800e880 <String_To_Float+0x384>)
 800e554:	f009 f800 	bl	8017558 <pow>
 800e558:	0002      	movs	r2, r0
 800e55a:	000b      	movs	r3, r1
 800e55c:	0020      	movs	r0, r4
 800e55e:	0029      	movs	r1, r5
 800e560:	f7f3 fdfe 	bl	8002160 <__aeabi_dmul>
 800e564:	0002      	movs	r2, r0
 800e566:	000b      	movs	r3, r1
 800e568:	0014      	movs	r4, r2
 800e56a:	001d      	movs	r5, r3
 800e56c:	6978      	ldr	r0, [r7, #20]
 800e56e:	f7f4 fc9f 	bl	8002eb0 <__aeabi_f2d>
 800e572:	0002      	movs	r2, r0
 800e574:	000b      	movs	r3, r1
 800e576:	0020      	movs	r0, r4
 800e578:	0029      	movs	r1, r5
 800e57a:	f7f2 feb3 	bl	80012e4 <__aeabi_dadd>
 800e57e:	0002      	movs	r2, r0
 800e580:	000b      	movs	r3, r1
 800e582:	0010      	movs	r0, r2
 800e584:	0019      	movs	r1, r3
 800e586:	f7f4 fcdb 	bl	8002f40 <__aeabi_d2f>
 800e58a:	1c03      	adds	r3, r0, #0
 800e58c:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<3;i++)
 800e58e:	19bb      	adds	r3, r7, r6
 800e590:	781a      	ldrb	r2, [r3, #0]
 800e592:	19bb      	adds	r3, r7, r6
 800e594:	3201      	adds	r2, #1
 800e596:	701a      	strb	r2, [r3, #0]
 800e598:	2313      	movs	r3, #19
 800e59a:	18fb      	adds	r3, r7, r3
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d9c1      	bls.n	800e526 <String_To_Float+0x2a>
		}
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e5a2:	2312      	movs	r3, #18
 800e5a4:	18fb      	adds	r3, r7, r3
 800e5a6:	2204      	movs	r2, #4
 800e5a8:	701a      	strb	r2, [r3, #0]
 800e5aa:	e02d      	b.n	800e608 <String_To_Float+0x10c>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e5ac:	2512      	movs	r5, #18
 800e5ae:	197b      	adds	r3, r7, r5
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	18d3      	adds	r3, r2, r3
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	3b30      	subs	r3, #48	; 0x30
 800e5ba:	0018      	movs	r0, r3
 800e5bc:	f7f2 fe44 	bl	8001248 <__aeabi_i2f>
 800e5c0:	1c04      	adds	r4, r0, #0
 800e5c2:	197b      	adds	r3, r7, r5
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	3b03      	subs	r3, #3
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	f7f4 fc1b 	bl	8002e04 <__aeabi_i2d>
 800e5ce:	0002      	movs	r2, r0
 800e5d0:	000b      	movs	r3, r1
 800e5d2:	2000      	movs	r0, #0
 800e5d4:	49aa      	ldr	r1, [pc, #680]	; (800e880 <String_To_Float+0x384>)
 800e5d6:	f008 ffbf 	bl	8017558 <pow>
 800e5da:	0002      	movs	r2, r0
 800e5dc:	000b      	movs	r3, r1
 800e5de:	0010      	movs	r0, r2
 800e5e0:	0019      	movs	r1, r3
 800e5e2:	f7f4 fcad 	bl	8002f40 <__aeabi_d2f>
 800e5e6:	1c03      	adds	r3, r0, #0
 800e5e8:	1c19      	adds	r1, r3, #0
 800e5ea:	1c20      	adds	r0, r4, #0
 800e5ec:	f7f2 f970 	bl	80008d0 <__aeabi_fdiv>
 800e5f0:	1c03      	adds	r3, r0, #0
 800e5f2:	1c19      	adds	r1, r3, #0
 800e5f4:	6978      	ldr	r0, [r7, #20]
 800e5f6:	f7f1 ffcd 	bl	8000594 <__aeabi_fadd>
 800e5fa:	1c03      	adds	r3, r0, #0
 800e5fc:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)//4 1 5 2
 800e5fe:	197b      	adds	r3, r7, r5
 800e600:	781a      	ldrb	r2, [r3, #0]
 800e602:	197b      	adds	r3, r7, r5
 800e604:	3201      	adds	r2, #1
 800e606:	701a      	strb	r2, [r3, #0]
 800e608:	2312      	movs	r3, #18
 800e60a:	18fb      	adds	r3, r7, r3
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b05      	cmp	r3, #5
 800e610:	d9cc      	bls.n	800e5ac <String_To_Float+0xb0>
		}
		return sum;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	e284      	b.n	800eb20 <String_To_Float+0x624>
	}
	//rata set
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 800e616:	4b99      	ldr	r3, [pc, #612]	; (800e87c <String_To_Float+0x380>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d000      	beq.n	800e620 <String_To_Float+0x124>
 800e61e:	e085      	b.n	800e72c <String_To_Float+0x230>
 800e620:	4b96      	ldr	r3, [pc, #600]	; (800e87c <String_To_Float+0x380>)
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	2b02      	cmp	r3, #2
 800e626:	d000      	beq.n	800e62a <String_To_Float+0x12e>
 800e628:	e080      	b.n	800e72c <String_To_Float+0x230>
 800e62a:	4b94      	ldr	r3, [pc, #592]	; (800e87c <String_To_Float+0x380>)
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d100      	bne.n	800e634 <String_To_Float+0x138>
 800e632:	e07b      	b.n	800e72c <String_To_Float+0x230>
	{
		for(uint8_t i=0;i<1;i++)
 800e634:	2311      	movs	r3, #17
 800e636:	18fb      	adds	r3, r7, r3
 800e638:	2200      	movs	r2, #0
 800e63a:	701a      	strb	r2, [r3, #0]
 800e63c:	e037      	b.n	800e6ae <String_To_Float+0x1b2>
		{
			sum+=(string[i]-'0')*(pow(10,(0-i)));
 800e63e:	2611      	movs	r6, #17
 800e640:	19bb      	adds	r3, r7, r6
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	18d3      	adds	r3, r2, r3
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	3b30      	subs	r3, #48	; 0x30
 800e64c:	0018      	movs	r0, r3
 800e64e:	f7f4 fbd9 	bl	8002e04 <__aeabi_i2d>
 800e652:	0004      	movs	r4, r0
 800e654:	000d      	movs	r5, r1
 800e656:	19bb      	adds	r3, r7, r6
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	425b      	negs	r3, r3
 800e65c:	0018      	movs	r0, r3
 800e65e:	f7f4 fbd1 	bl	8002e04 <__aeabi_i2d>
 800e662:	0002      	movs	r2, r0
 800e664:	000b      	movs	r3, r1
 800e666:	2000      	movs	r0, #0
 800e668:	4985      	ldr	r1, [pc, #532]	; (800e880 <String_To_Float+0x384>)
 800e66a:	f008 ff75 	bl	8017558 <pow>
 800e66e:	0002      	movs	r2, r0
 800e670:	000b      	movs	r3, r1
 800e672:	0020      	movs	r0, r4
 800e674:	0029      	movs	r1, r5
 800e676:	f7f3 fd73 	bl	8002160 <__aeabi_dmul>
 800e67a:	0002      	movs	r2, r0
 800e67c:	000b      	movs	r3, r1
 800e67e:	0014      	movs	r4, r2
 800e680:	001d      	movs	r5, r3
 800e682:	6978      	ldr	r0, [r7, #20]
 800e684:	f7f4 fc14 	bl	8002eb0 <__aeabi_f2d>
 800e688:	0002      	movs	r2, r0
 800e68a:	000b      	movs	r3, r1
 800e68c:	0020      	movs	r0, r4
 800e68e:	0029      	movs	r1, r5
 800e690:	f7f2 fe28 	bl	80012e4 <__aeabi_dadd>
 800e694:	0002      	movs	r2, r0
 800e696:	000b      	movs	r3, r1
 800e698:	0010      	movs	r0, r2
 800e69a:	0019      	movs	r1, r3
 800e69c:	f7f4 fc50 	bl	8002f40 <__aeabi_d2f>
 800e6a0:	1c03      	adds	r3, r0, #0
 800e6a2:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<1;i++)
 800e6a4:	19bb      	adds	r3, r7, r6
 800e6a6:	781a      	ldrb	r2, [r3, #0]
 800e6a8:	19bb      	adds	r3, r7, r6
 800e6aa:	3201      	adds	r2, #1
 800e6ac:	701a      	strb	r2, [r3, #0]
 800e6ae:	2311      	movs	r3, #17
 800e6b0:	18fb      	adds	r3, r7, r3
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d0c2      	beq.n	800e63e <String_To_Float+0x142>
		}
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	18fb      	adds	r3, r7, r3
 800e6bc:	2202      	movs	r2, #2
 800e6be:	701a      	strb	r2, [r3, #0]
 800e6c0:	e02d      	b.n	800e71e <String_To_Float+0x222>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-1)));
 800e6c2:	2510      	movs	r5, #16
 800e6c4:	197b      	adds	r3, r7, r5
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	18d3      	adds	r3, r2, r3
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	3b30      	subs	r3, #48	; 0x30
 800e6d0:	0018      	movs	r0, r3
 800e6d2:	f7f2 fdb9 	bl	8001248 <__aeabi_i2f>
 800e6d6:	1c04      	adds	r4, r0, #0
 800e6d8:	197b      	adds	r3, r7, r5
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	0018      	movs	r0, r3
 800e6e0:	f7f4 fb90 	bl	8002e04 <__aeabi_i2d>
 800e6e4:	0002      	movs	r2, r0
 800e6e6:	000b      	movs	r3, r1
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	4965      	ldr	r1, [pc, #404]	; (800e880 <String_To_Float+0x384>)
 800e6ec:	f008 ff34 	bl	8017558 <pow>
 800e6f0:	0002      	movs	r2, r0
 800e6f2:	000b      	movs	r3, r1
 800e6f4:	0010      	movs	r0, r2
 800e6f6:	0019      	movs	r1, r3
 800e6f8:	f7f4 fc22 	bl	8002f40 <__aeabi_d2f>
 800e6fc:	1c03      	adds	r3, r0, #0
 800e6fe:	1c19      	adds	r1, r3, #0
 800e700:	1c20      	adds	r0, r4, #0
 800e702:	f7f2 f8e5 	bl	80008d0 <__aeabi_fdiv>
 800e706:	1c03      	adds	r3, r0, #0
 800e708:	1c19      	adds	r1, r3, #0
 800e70a:	6978      	ldr	r0, [r7, #20]
 800e70c:	f7f1 ff42 	bl	8000594 <__aeabi_fadd>
 800e710:	1c03      	adds	r3, r0, #0
 800e712:	617b      	str	r3, [r7, #20]
		for(uint8_t i=2;i<=3;i++)//4 1 5 2
 800e714:	197b      	adds	r3, r7, r5
 800e716:	781a      	ldrb	r2, [r3, #0]
 800e718:	197b      	adds	r3, r7, r5
 800e71a:	3201      	adds	r2, #1
 800e71c:	701a      	strb	r2, [r3, #0]
 800e71e:	2310      	movs	r3, #16
 800e720:	18fb      	adds	r3, r7, r3
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2b03      	cmp	r3, #3
 800e726:	d9cc      	bls.n	800e6c2 <String_To_Float+0x1c6>
		}
		return sum;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	e1f9      	b.n	800eb20 <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))
 800e72c:	4b53      	ldr	r3, [pc, #332]	; (800e87c <String_To_Float+0x380>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d14c      	bne.n	800e7ce <String_To_Float+0x2d2>
 800e734:	4b51      	ldr	r3, [pc, #324]	; (800e87c <String_To_Float+0x380>)
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	2b05      	cmp	r3, #5
 800e73a:	d148      	bne.n	800e7ce <String_To_Float+0x2d2>
 800e73c:	4b4f      	ldr	r3, [pc, #316]	; (800e87c <String_To_Float+0x380>)
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	2b01      	cmp	r3, #1
 800e742:	d144      	bne.n	800e7ce <String_To_Float+0x2d2>
	{
		for(uint8_t i=0;i<2;i++)
 800e744:	230f      	movs	r3, #15
 800e746:	18fb      	adds	r3, r7, r3
 800e748:	2200      	movs	r2, #0
 800e74a:	701a      	strb	r2, [r3, #0]
 800e74c:	e038      	b.n	800e7c0 <String_To_Float+0x2c4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e74e:	260f      	movs	r6, #15
 800e750:	19bb      	adds	r3, r7, r6
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	18d3      	adds	r3, r2, r3
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	3b30      	subs	r3, #48	; 0x30
 800e75c:	0018      	movs	r0, r3
 800e75e:	f7f4 fb51 	bl	8002e04 <__aeabi_i2d>
 800e762:	0004      	movs	r4, r0
 800e764:	000d      	movs	r5, r1
 800e766:	19bb      	adds	r3, r7, r6
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2202      	movs	r2, #2
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	0018      	movs	r0, r3
 800e770:	f7f4 fb48 	bl	8002e04 <__aeabi_i2d>
 800e774:	0002      	movs	r2, r0
 800e776:	000b      	movs	r3, r1
 800e778:	2000      	movs	r0, #0
 800e77a:	4941      	ldr	r1, [pc, #260]	; (800e880 <String_To_Float+0x384>)
 800e77c:	f008 feec 	bl	8017558 <pow>
 800e780:	0002      	movs	r2, r0
 800e782:	000b      	movs	r3, r1
 800e784:	0020      	movs	r0, r4
 800e786:	0029      	movs	r1, r5
 800e788:	f7f3 fcea 	bl	8002160 <__aeabi_dmul>
 800e78c:	0002      	movs	r2, r0
 800e78e:	000b      	movs	r3, r1
 800e790:	0014      	movs	r4, r2
 800e792:	001d      	movs	r5, r3
 800e794:	6978      	ldr	r0, [r7, #20]
 800e796:	f7f4 fb8b 	bl	8002eb0 <__aeabi_f2d>
 800e79a:	0002      	movs	r2, r0
 800e79c:	000b      	movs	r3, r1
 800e79e:	0020      	movs	r0, r4
 800e7a0:	0029      	movs	r1, r5
 800e7a2:	f7f2 fd9f 	bl	80012e4 <__aeabi_dadd>
 800e7a6:	0002      	movs	r2, r0
 800e7a8:	000b      	movs	r3, r1
 800e7aa:	0010      	movs	r0, r2
 800e7ac:	0019      	movs	r1, r3
 800e7ae:	f7f4 fbc7 	bl	8002f40 <__aeabi_d2f>
 800e7b2:	1c03      	adds	r3, r0, #0
 800e7b4:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800e7b6:	19bb      	adds	r3, r7, r6
 800e7b8:	781a      	ldrb	r2, [r3, #0]
 800e7ba:	19bb      	adds	r3, r7, r6
 800e7bc:	3201      	adds	r2, #1
 800e7be:	701a      	strb	r2, [r3, #0]
 800e7c0:	230f      	movs	r3, #15
 800e7c2:	18fb      	adds	r3, r7, r3
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d9c1      	bls.n	800e74e <String_To_Float+0x252>
		}

		return sum;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	e1a8      	b.n	800eb20 <String_To_Float+0x624>
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 800e7ce:	4b2b      	ldr	r3, [pc, #172]	; (800e87c <String_To_Float+0x380>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d000      	beq.n	800e7d8 <String_To_Float+0x2dc>
 800e7d6:	e08a      	b.n	800e8ee <String_To_Float+0x3f2>
 800e7d8:	4b28      	ldr	r3, [pc, #160]	; (800e87c <String_To_Float+0x380>)
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	2b05      	cmp	r3, #5
 800e7de:	d000      	beq.n	800e7e2 <String_To_Float+0x2e6>
 800e7e0:	e085      	b.n	800e8ee <String_To_Float+0x3f2>
 800e7e2:	4b26      	ldr	r3, [pc, #152]	; (800e87c <String_To_Float+0x380>)
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d000      	beq.n	800e7ec <String_To_Float+0x2f0>
 800e7ea:	e080      	b.n	800e8ee <String_To_Float+0x3f2>
	{
		for(uint8_t i=0;i<2;i++)
 800e7ec:	230e      	movs	r3, #14
 800e7ee:	18fb      	adds	r3, r7, r3
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	701a      	strb	r2, [r3, #0]
 800e7f4:	e038      	b.n	800e868 <String_To_Float+0x36c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e7f6:	260e      	movs	r6, #14
 800e7f8:	19bb      	adds	r3, r7, r6
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	18d3      	adds	r3, r2, r3
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	3b30      	subs	r3, #48	; 0x30
 800e804:	0018      	movs	r0, r3
 800e806:	f7f4 fafd 	bl	8002e04 <__aeabi_i2d>
 800e80a:	0004      	movs	r4, r0
 800e80c:	000d      	movs	r5, r1
 800e80e:	19bb      	adds	r3, r7, r6
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	2202      	movs	r2, #2
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	0018      	movs	r0, r3
 800e818:	f7f4 faf4 	bl	8002e04 <__aeabi_i2d>
 800e81c:	0002      	movs	r2, r0
 800e81e:	000b      	movs	r3, r1
 800e820:	2000      	movs	r0, #0
 800e822:	4917      	ldr	r1, [pc, #92]	; (800e880 <String_To_Float+0x384>)
 800e824:	f008 fe98 	bl	8017558 <pow>
 800e828:	0002      	movs	r2, r0
 800e82a:	000b      	movs	r3, r1
 800e82c:	0020      	movs	r0, r4
 800e82e:	0029      	movs	r1, r5
 800e830:	f7f3 fc96 	bl	8002160 <__aeabi_dmul>
 800e834:	0002      	movs	r2, r0
 800e836:	000b      	movs	r3, r1
 800e838:	0014      	movs	r4, r2
 800e83a:	001d      	movs	r5, r3
 800e83c:	6978      	ldr	r0, [r7, #20]
 800e83e:	f7f4 fb37 	bl	8002eb0 <__aeabi_f2d>
 800e842:	0002      	movs	r2, r0
 800e844:	000b      	movs	r3, r1
 800e846:	0020      	movs	r0, r4
 800e848:	0029      	movs	r1, r5
 800e84a:	f7f2 fd4b 	bl	80012e4 <__aeabi_dadd>
 800e84e:	0002      	movs	r2, r0
 800e850:	000b      	movs	r3, r1
 800e852:	0010      	movs	r0, r2
 800e854:	0019      	movs	r1, r3
 800e856:	f7f4 fb73 	bl	8002f40 <__aeabi_d2f>
 800e85a:	1c03      	adds	r3, r0, #0
 800e85c:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<2;i++)
 800e85e:	19bb      	adds	r3, r7, r6
 800e860:	781a      	ldrb	r2, [r3, #0]
 800e862:	19bb      	adds	r3, r7, r6
 800e864:	3201      	adds	r2, #1
 800e866:	701a      	strb	r2, [r3, #0]
 800e868:	230e      	movs	r3, #14
 800e86a:	18fb      	adds	r3, r7, r3
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d9c1      	bls.n	800e7f6 <String_To_Float+0x2fa>
		}
		for(uint8_t i=4;i<=5;i++)
 800e872:	230d      	movs	r3, #13
 800e874:	18fb      	adds	r3, r7, r3
 800e876:	2204      	movs	r2, #4
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	e031      	b.n	800e8e0 <String_To_Float+0x3e4>
 800e87c:	200039f8 	.word	0x200039f8
 800e880:	40240000 	.word	0x40240000
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e884:	250d      	movs	r5, #13
 800e886:	197b      	adds	r3, r7, r5
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	18d3      	adds	r3, r2, r3
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	3b30      	subs	r3, #48	; 0x30
 800e892:	0018      	movs	r0, r3
 800e894:	f7f2 fcd8 	bl	8001248 <__aeabi_i2f>
 800e898:	1c04      	adds	r4, r0, #0
 800e89a:	197b      	adds	r3, r7, r5
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	3b03      	subs	r3, #3
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	f7f4 faaf 	bl	8002e04 <__aeabi_i2d>
 800e8a6:	0002      	movs	r2, r0
 800e8a8:	000b      	movs	r3, r1
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	499e      	ldr	r1, [pc, #632]	; (800eb28 <String_To_Float+0x62c>)
 800e8ae:	f008 fe53 	bl	8017558 <pow>
 800e8b2:	0002      	movs	r2, r0
 800e8b4:	000b      	movs	r3, r1
 800e8b6:	0010      	movs	r0, r2
 800e8b8:	0019      	movs	r1, r3
 800e8ba:	f7f4 fb41 	bl	8002f40 <__aeabi_d2f>
 800e8be:	1c03      	adds	r3, r0, #0
 800e8c0:	1c19      	adds	r1, r3, #0
 800e8c2:	1c20      	adds	r0, r4, #0
 800e8c4:	f7f2 f804 	bl	80008d0 <__aeabi_fdiv>
 800e8c8:	1c03      	adds	r3, r0, #0
 800e8ca:	1c19      	adds	r1, r3, #0
 800e8cc:	6978      	ldr	r0, [r7, #20]
 800e8ce:	f7f1 fe61 	bl	8000594 <__aeabi_fadd>
 800e8d2:	1c03      	adds	r3, r0, #0
 800e8d4:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800e8d6:	197b      	adds	r3, r7, r5
 800e8d8:	781a      	ldrb	r2, [r3, #0]
 800e8da:	197b      	adds	r3, r7, r5
 800e8dc:	3201      	adds	r2, #1
 800e8de:	701a      	strb	r2, [r3, #0]
 800e8e0:	230d      	movs	r3, #13
 800e8e2:	18fb      	adds	r3, r7, r3
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2b05      	cmp	r3, #5
 800e8e8:	d9cc      	bls.n	800e884 <String_To_Float+0x388>
		}

		return sum;
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	e118      	b.n	800eb20 <String_To_Float+0x624>
	}
	/*save load*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 800e8ee:	4b8f      	ldr	r3, [pc, #572]	; (800eb2c <String_To_Float+0x630>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d000      	beq.n	800e8f8 <String_To_Float+0x3fc>
 800e8f6:	e086      	b.n	800ea06 <String_To_Float+0x50a>
 800e8f8:	4b8c      	ldr	r3, [pc, #560]	; (800eb2c <String_To_Float+0x630>)
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d100      	bne.n	800e902 <String_To_Float+0x406>
 800e900:	e081      	b.n	800ea06 <String_To_Float+0x50a>
 800e902:	4b8a      	ldr	r3, [pc, #552]	; (800eb2c <String_To_Float+0x630>)
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d100      	bne.n	800e90c <String_To_Float+0x410>
 800e90a:	e07c      	b.n	800ea06 <String_To_Float+0x50a>
	{
		for(uint8_t i=0;i<=2;i++)
 800e90c:	230c      	movs	r3, #12
 800e90e:	18fb      	adds	r3, r7, r3
 800e910:	2200      	movs	r2, #0
 800e912:	701a      	strb	r2, [r3, #0]
 800e914:	e038      	b.n	800e988 <String_To_Float+0x48c>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800e916:	260c      	movs	r6, #12
 800e918:	19bb      	adds	r3, r7, r6
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	18d3      	adds	r3, r2, r3
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	3b30      	subs	r3, #48	; 0x30
 800e924:	0018      	movs	r0, r3
 800e926:	f7f4 fa6d 	bl	8002e04 <__aeabi_i2d>
 800e92a:	0004      	movs	r4, r0
 800e92c:	000d      	movs	r5, r1
 800e92e:	19bb      	adds	r3, r7, r6
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	2202      	movs	r2, #2
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	0018      	movs	r0, r3
 800e938:	f7f4 fa64 	bl	8002e04 <__aeabi_i2d>
 800e93c:	0002      	movs	r2, r0
 800e93e:	000b      	movs	r3, r1
 800e940:	2000      	movs	r0, #0
 800e942:	4979      	ldr	r1, [pc, #484]	; (800eb28 <String_To_Float+0x62c>)
 800e944:	f008 fe08 	bl	8017558 <pow>
 800e948:	0002      	movs	r2, r0
 800e94a:	000b      	movs	r3, r1
 800e94c:	0020      	movs	r0, r4
 800e94e:	0029      	movs	r1, r5
 800e950:	f7f3 fc06 	bl	8002160 <__aeabi_dmul>
 800e954:	0002      	movs	r2, r0
 800e956:	000b      	movs	r3, r1
 800e958:	0014      	movs	r4, r2
 800e95a:	001d      	movs	r5, r3
 800e95c:	6978      	ldr	r0, [r7, #20]
 800e95e:	f7f4 faa7 	bl	8002eb0 <__aeabi_f2d>
 800e962:	0002      	movs	r2, r0
 800e964:	000b      	movs	r3, r1
 800e966:	0020      	movs	r0, r4
 800e968:	0029      	movs	r1, r5
 800e96a:	f7f2 fcbb 	bl	80012e4 <__aeabi_dadd>
 800e96e:	0002      	movs	r2, r0
 800e970:	000b      	movs	r3, r1
 800e972:	0010      	movs	r0, r2
 800e974:	0019      	movs	r1, r3
 800e976:	f7f4 fae3 	bl	8002f40 <__aeabi_d2f>
 800e97a:	1c03      	adds	r3, r0, #0
 800e97c:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800e97e:	19bb      	adds	r3, r7, r6
 800e980:	781a      	ldrb	r2, [r3, #0]
 800e982:	19bb      	adds	r3, r7, r6
 800e984:	3201      	adds	r2, #1
 800e986:	701a      	strb	r2, [r3, #0]
 800e988:	230c      	movs	r3, #12
 800e98a:	18fb      	adds	r3, r7, r3
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d9c1      	bls.n	800e916 <String_To_Float+0x41a>
		}
		for(uint8_t i=4;i<=5;i++)
 800e992:	230b      	movs	r3, #11
 800e994:	18fb      	adds	r3, r7, r3
 800e996:	2204      	movs	r2, #4
 800e998:	701a      	strb	r2, [r3, #0]
 800e99a:	e02d      	b.n	800e9f8 <String_To_Float+0x4fc>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800e99c:	250b      	movs	r5, #11
 800e99e:	197b      	adds	r3, r7, r5
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	18d3      	adds	r3, r2, r3
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	3b30      	subs	r3, #48	; 0x30
 800e9aa:	0018      	movs	r0, r3
 800e9ac:	f7f2 fc4c 	bl	8001248 <__aeabi_i2f>
 800e9b0:	1c04      	adds	r4, r0, #0
 800e9b2:	197b      	adds	r3, r7, r5
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	3b03      	subs	r3, #3
 800e9b8:	0018      	movs	r0, r3
 800e9ba:	f7f4 fa23 	bl	8002e04 <__aeabi_i2d>
 800e9be:	0002      	movs	r2, r0
 800e9c0:	000b      	movs	r3, r1
 800e9c2:	2000      	movs	r0, #0
 800e9c4:	4958      	ldr	r1, [pc, #352]	; (800eb28 <String_To_Float+0x62c>)
 800e9c6:	f008 fdc7 	bl	8017558 <pow>
 800e9ca:	0002      	movs	r2, r0
 800e9cc:	000b      	movs	r3, r1
 800e9ce:	0010      	movs	r0, r2
 800e9d0:	0019      	movs	r1, r3
 800e9d2:	f7f4 fab5 	bl	8002f40 <__aeabi_d2f>
 800e9d6:	1c03      	adds	r3, r0, #0
 800e9d8:	1c19      	adds	r1, r3, #0
 800e9da:	1c20      	adds	r0, r4, #0
 800e9dc:	f7f1 ff78 	bl	80008d0 <__aeabi_fdiv>
 800e9e0:	1c03      	adds	r3, r0, #0
 800e9e2:	1c19      	adds	r1, r3, #0
 800e9e4:	6978      	ldr	r0, [r7, #20]
 800e9e6:	f7f1 fdd5 	bl	8000594 <__aeabi_fadd>
 800e9ea:	1c03      	adds	r3, r0, #0
 800e9ec:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800e9ee:	197b      	adds	r3, r7, r5
 800e9f0:	781a      	ldrb	r2, [r3, #0]
 800e9f2:	197b      	adds	r3, r7, r5
 800e9f4:	3201      	adds	r2, #1
 800e9f6:	701a      	strb	r2, [r3, #0]
 800e9f8:	230b      	movs	r3, #11
 800e9fa:	18fb      	adds	r3, r7, r3
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	2b05      	cmp	r3, #5
 800ea00:	d9cc      	bls.n	800e99c <String_To_Float+0x4a0>
		}

		return sum;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	e08c      	b.n	800eb20 <String_To_Float+0x624>
	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))
 800ea06:	4b49      	ldr	r3, [pc, #292]	; (800eb2c <String_To_Float+0x630>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d000      	beq.n	800ea10 <String_To_Float+0x514>
 800ea0e:	e086      	b.n	800eb1e <String_To_Float+0x622>
 800ea10:	4b46      	ldr	r3, [pc, #280]	; (800eb2c <String_To_Float+0x630>)
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	2b08      	cmp	r3, #8
 800ea16:	d000      	beq.n	800ea1a <String_To_Float+0x51e>
 800ea18:	e081      	b.n	800eb1e <String_To_Float+0x622>
 800ea1a:	4b44      	ldr	r3, [pc, #272]	; (800eb2c <String_To_Float+0x630>)
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d100      	bne.n	800ea24 <String_To_Float+0x528>
 800ea22:	e07c      	b.n	800eb1e <String_To_Float+0x622>
	{
		for(uint8_t i=0;i<=2;i++)
 800ea24:	230a      	movs	r3, #10
 800ea26:	18fb      	adds	r3, r7, r3
 800ea28:	2200      	movs	r2, #0
 800ea2a:	701a      	strb	r2, [r3, #0]
 800ea2c:	e038      	b.n	800eaa0 <String_To_Float+0x5a4>
		{
			sum+=(string[i]-'0')*(pow(10,(2-i)));
 800ea2e:	260a      	movs	r6, #10
 800ea30:	19bb      	adds	r3, r7, r6
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	18d3      	adds	r3, r2, r3
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	3b30      	subs	r3, #48	; 0x30
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	f7f4 f9e1 	bl	8002e04 <__aeabi_i2d>
 800ea42:	0004      	movs	r4, r0
 800ea44:	000d      	movs	r5, r1
 800ea46:	19bb      	adds	r3, r7, r6
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	0018      	movs	r0, r3
 800ea50:	f7f4 f9d8 	bl	8002e04 <__aeabi_i2d>
 800ea54:	0002      	movs	r2, r0
 800ea56:	000b      	movs	r3, r1
 800ea58:	2000      	movs	r0, #0
 800ea5a:	4933      	ldr	r1, [pc, #204]	; (800eb28 <String_To_Float+0x62c>)
 800ea5c:	f008 fd7c 	bl	8017558 <pow>
 800ea60:	0002      	movs	r2, r0
 800ea62:	000b      	movs	r3, r1
 800ea64:	0020      	movs	r0, r4
 800ea66:	0029      	movs	r1, r5
 800ea68:	f7f3 fb7a 	bl	8002160 <__aeabi_dmul>
 800ea6c:	0002      	movs	r2, r0
 800ea6e:	000b      	movs	r3, r1
 800ea70:	0014      	movs	r4, r2
 800ea72:	001d      	movs	r5, r3
 800ea74:	6978      	ldr	r0, [r7, #20]
 800ea76:	f7f4 fa1b 	bl	8002eb0 <__aeabi_f2d>
 800ea7a:	0002      	movs	r2, r0
 800ea7c:	000b      	movs	r3, r1
 800ea7e:	0020      	movs	r0, r4
 800ea80:	0029      	movs	r1, r5
 800ea82:	f7f2 fc2f 	bl	80012e4 <__aeabi_dadd>
 800ea86:	0002      	movs	r2, r0
 800ea88:	000b      	movs	r3, r1
 800ea8a:	0010      	movs	r0, r2
 800ea8c:	0019      	movs	r1, r3
 800ea8e:	f7f4 fa57 	bl	8002f40 <__aeabi_d2f>
 800ea92:	1c03      	adds	r3, r0, #0
 800ea94:	617b      	str	r3, [r7, #20]
		for(uint8_t i=0;i<=2;i++)
 800ea96:	19bb      	adds	r3, r7, r6
 800ea98:	781a      	ldrb	r2, [r3, #0]
 800ea9a:	19bb      	adds	r3, r7, r6
 800ea9c:	3201      	adds	r2, #1
 800ea9e:	701a      	strb	r2, [r3, #0]
 800eaa0:	230a      	movs	r3, #10
 800eaa2:	18fb      	adds	r3, r7, r3
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d9c1      	bls.n	800ea2e <String_To_Float+0x532>
		}
		for(uint8_t i=4;i<=5;i++)
 800eaaa:	2309      	movs	r3, #9
 800eaac:	18fb      	adds	r3, r7, r3
 800eaae:	2204      	movs	r2, #4
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	e02d      	b.n	800eb10 <String_To_Float+0x614>
		{
			sum+=(string[i]-'0')/(float)(pow(10,(i-3)));
 800eab4:	2509      	movs	r5, #9
 800eab6:	197b      	adds	r3, r7, r5
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	18d3      	adds	r3, r2, r3
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	3b30      	subs	r3, #48	; 0x30
 800eac2:	0018      	movs	r0, r3
 800eac4:	f7f2 fbc0 	bl	8001248 <__aeabi_i2f>
 800eac8:	1c04      	adds	r4, r0, #0
 800eaca:	197b      	adds	r3, r7, r5
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	3b03      	subs	r3, #3
 800ead0:	0018      	movs	r0, r3
 800ead2:	f7f4 f997 	bl	8002e04 <__aeabi_i2d>
 800ead6:	0002      	movs	r2, r0
 800ead8:	000b      	movs	r3, r1
 800eada:	2000      	movs	r0, #0
 800eadc:	4912      	ldr	r1, [pc, #72]	; (800eb28 <String_To_Float+0x62c>)
 800eade:	f008 fd3b 	bl	8017558 <pow>
 800eae2:	0002      	movs	r2, r0
 800eae4:	000b      	movs	r3, r1
 800eae6:	0010      	movs	r0, r2
 800eae8:	0019      	movs	r1, r3
 800eaea:	f7f4 fa29 	bl	8002f40 <__aeabi_d2f>
 800eaee:	1c03      	adds	r3, r0, #0
 800eaf0:	1c19      	adds	r1, r3, #0
 800eaf2:	1c20      	adds	r0, r4, #0
 800eaf4:	f7f1 feec 	bl	80008d0 <__aeabi_fdiv>
 800eaf8:	1c03      	adds	r3, r0, #0
 800eafa:	1c19      	adds	r1, r3, #0
 800eafc:	6978      	ldr	r0, [r7, #20]
 800eafe:	f7f1 fd49 	bl	8000594 <__aeabi_fadd>
 800eb02:	1c03      	adds	r3, r0, #0
 800eb04:	617b      	str	r3, [r7, #20]
		for(uint8_t i=4;i<=5;i++)
 800eb06:	197b      	adds	r3, r7, r5
 800eb08:	781a      	ldrb	r2, [r3, #0]
 800eb0a:	197b      	adds	r3, r7, r5
 800eb0c:	3201      	adds	r2, #1
 800eb0e:	701a      	strb	r2, [r3, #0]
 800eb10:	2309      	movs	r3, #9
 800eb12:	18fb      	adds	r3, r7, r3
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b05      	cmp	r3, #5
 800eb18:	d9cc      	bls.n	800eab4 <String_To_Float+0x5b8>
		}

		return sum;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	e000      	b.n	800eb20 <String_To_Float+0x624>
	}

	else return 0.0;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	1c18      	adds	r0, r3, #0
 800eb22:	46bd      	mov	sp, r7
 800eb24:	b007      	add	sp, #28
 800eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb28:	40240000 	.word	0x40240000
 800eb2c:	200039f8 	.word	0x200039f8

0800eb30 <Keys_Input_Set_Voltage>:
 * @brief  数字键盘输入设定电压的处理函数
 * @param  数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Voltage(char Number)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	0002      	movs	r2, r0
 800eb38:	1dfb      	adds	r3, r7, #7
 800eb3a:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (LOCK_UNLOCK == UNLOCK) )
 800eb3c:	4b21      	ldr	r3, [pc, #132]	; (800ebc4 <Keys_Input_Set_Voltage+0x94>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d13b      	bne.n	800ebbc <Keys_Input_Set_Voltage+0x8c>
 800eb44:	4b1f      	ldr	r3, [pc, #124]	; (800ebc4 <Keys_Input_Set_Voltage+0x94>)
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d137      	bne.n	800ebbc <Keys_Input_Set_Voltage+0x8c>
 800eb4c:	4b1e      	ldr	r3, [pc, #120]	; (800ebc8 <Keys_Input_Set_Voltage+0x98>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d133      	bne.n	800ebbc <Keys_Input_Set_Voltage+0x8c>
	{
		Cursor_flash_off();
 800eb54:	f005 fc1c 	bl	8014390 <Cursor_flash_off>
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800eb58:	4b1c      	ldr	r3, [pc, #112]	; (800ebcc <Keys_Input_Set_Voltage+0x9c>)
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d019      	beq.n	800eb94 <Keys_Input_Set_Voltage+0x64>
		{
		    Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800eb60:	4b1a      	ldr	r3, [pc, #104]	; (800ebcc <Keys_Input_Set_Voltage+0x9c>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	701a      	strb	r2, [r3, #0]
		    Cursor_flash_off();
 800eb66:	f005 fc13 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 0;                                    //指针设为0位
 800eb6a:	4b19      	ldr	r3, [pc, #100]	; (800ebd0 <Keys_Input_Set_Voltage+0xa0>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	701a      	strb	r2, [r3, #0]

			String_Voltage[0] = ' ';
 800eb70:	4b18      	ldr	r3, [pc, #96]	; (800ebd4 <Keys_Input_Set_Voltage+0xa4>)
 800eb72:	2220      	movs	r2, #32
 800eb74:	701a      	strb	r2, [r3, #0]
			String_Voltage[1] = ' ';
 800eb76:	4b17      	ldr	r3, [pc, #92]	; (800ebd4 <Keys_Input_Set_Voltage+0xa4>)
 800eb78:	2220      	movs	r2, #32
 800eb7a:	705a      	strb	r2, [r3, #1]
			String_Voltage[2] = ' ';
 800eb7c:	4b15      	ldr	r3, [pc, #84]	; (800ebd4 <Keys_Input_Set_Voltage+0xa4>)
 800eb7e:	2220      	movs	r2, #32
 800eb80:	709a      	strb	r2, [r3, #2]
			String_Voltage[3] = ' ';
 800eb82:	4b14      	ldr	r3, [pc, #80]	; (800ebd4 <Keys_Input_Set_Voltage+0xa4>)
 800eb84:	2220      	movs	r2, #32
 800eb86:	70da      	strb	r2, [r3, #3]
			String_Voltage[4] = ' ';
 800eb88:	4b12      	ldr	r3, [pc, #72]	; (800ebd4 <Keys_Input_Set_Voltage+0xa4>)
 800eb8a:	2220      	movs	r2, #32
 800eb8c:	711a      	strb	r2, [r3, #4]
			String_Voltage[5] = ' ';
 800eb8e:	4b11      	ldr	r3, [pc, #68]	; (800ebd4 <Keys_Input_Set_Voltage+0xa4>)
 800eb90:	2220      	movs	r2, #32
 800eb92:	715a      	strb	r2, [r3, #5]

		}


		String_Voltage[Cursor_Position] = Number;                  //使光标位置置Number
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <Keys_Input_Set_Voltage+0xa0>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	0019      	movs	r1, r3
 800eb9a:	4b0e      	ldr	r3, [pc, #56]	; (800ebd4 <Keys_Input_Set_Voltage+0xa4>)
 800eb9c:	1dfa      	adds	r2, r7, #7
 800eb9e:	7812      	ldrb	r2, [r2, #0]
 800eba0:	545a      	strb	r2, [r3, r1]
		Cursor_Position ++;                                        //光标位置加1
 800eba2:	4b0b      	ldr	r3, [pc, #44]	; (800ebd0 <Keys_Input_Set_Voltage+0xa0>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	3301      	adds	r3, #1
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	4b09      	ldr	r3, [pc, #36]	; (800ebd0 <Keys_Input_Set_Voltage+0xa0>)
 800ebac:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6) Cursor_Position=0;
 800ebae:	4b08      	ldr	r3, [pc, #32]	; (800ebd0 <Keys_Input_Set_Voltage+0xa0>)
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	2b06      	cmp	r3, #6
 800ebb4:	d102      	bne.n	800ebbc <Keys_Input_Set_Voltage+0x8c>
 800ebb6:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <Keys_Input_Set_Voltage+0xa0>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	701a      	strb	r2, [r3, #0]

	}

}
 800ebbc:	46c0      	nop			; (mov r8, r8)
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	b002      	add	sp, #8
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	200039f8 	.word	0x200039f8
 800ebc8:	2000398b 	.word	0x2000398b
 800ebcc:	20002fd4 	.word	0x20002fd4
 800ebd0:	2000398e 	.word	0x2000398e
 800ebd4:	2000305c 	.word	0x2000305c

0800ebd8 <Keys_Input_Set_Current>:
 * @brief  数字键盘输入设定电流的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_Current(char Number)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	0002      	movs	r2, r0
 800ebe0:	1dfb      	adds	r3, r7, #7
 800ebe2:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (LOCK_UNLOCK == UNLOCK) )
 800ebe4:	4b1d      	ldr	r3, [pc, #116]	; (800ec5c <Keys_Input_Set_Current+0x84>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d132      	bne.n	800ec52 <Keys_Input_Set_Current+0x7a>
 800ebec:	4b1b      	ldr	r3, [pc, #108]	; (800ec5c <Keys_Input_Set_Current+0x84>)
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d12e      	bne.n	800ec52 <Keys_Input_Set_Current+0x7a>
 800ebf4:	4b1a      	ldr	r3, [pc, #104]	; (800ec60 <Keys_Input_Set_Current+0x88>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d12a      	bne.n	800ec52 <Keys_Input_Set_Current+0x7a>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ebfc:	4b19      	ldr	r3, [pc, #100]	; (800ec64 <Keys_Input_Set_Current+0x8c>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d019      	beq.n	800ec38 <Keys_Input_Set_Current+0x60>
		{
		    Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ec04:	4b17      	ldr	r3, [pc, #92]	; (800ec64 <Keys_Input_Set_Current+0x8c>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	701a      	strb	r2, [r3, #0]
		    Cursor_flash_off();
 800ec0a:	f005 fbc1 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 9;                                    //指针设为0位
 800ec0e:	4b16      	ldr	r3, [pc, #88]	; (800ec68 <Keys_Input_Set_Current+0x90>)
 800ec10:	2209      	movs	r2, #9
 800ec12:	701a      	strb	r2, [r3, #0]

			String_Current[0] = ' ';
 800ec14:	4b15      	ldr	r3, [pc, #84]	; (800ec6c <Keys_Input_Set_Current+0x94>)
 800ec16:	2220      	movs	r2, #32
 800ec18:	701a      	strb	r2, [r3, #0]
			String_Current[1] = ' ';
 800ec1a:	4b14      	ldr	r3, [pc, #80]	; (800ec6c <Keys_Input_Set_Current+0x94>)
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	705a      	strb	r2, [r3, #1]
			String_Current[2] = ' ';
 800ec20:	4b12      	ldr	r3, [pc, #72]	; (800ec6c <Keys_Input_Set_Current+0x94>)
 800ec22:	2220      	movs	r2, #32
 800ec24:	709a      	strb	r2, [r3, #2]
			String_Current[3] = ' ';
 800ec26:	4b11      	ldr	r3, [pc, #68]	; (800ec6c <Keys_Input_Set_Current+0x94>)
 800ec28:	2220      	movs	r2, #32
 800ec2a:	70da      	strb	r2, [r3, #3]
			String_Current[4] = ' ';
 800ec2c:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <Keys_Input_Set_Current+0x94>)
 800ec2e:	2220      	movs	r2, #32
 800ec30:	711a      	strb	r2, [r3, #4]
			String_Current[5] = ' ';
 800ec32:	4b0e      	ldr	r3, [pc, #56]	; (800ec6c <Keys_Input_Set_Current+0x94>)
 800ec34:	2220      	movs	r2, #32
 800ec36:	715a      	strb	r2, [r3, #5]

		}


		String_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800ec38:	4b0b      	ldr	r3, [pc, #44]	; (800ec68 <Keys_Input_Set_Current+0x90>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	3b09      	subs	r3, #9
 800ec3e:	4a0b      	ldr	r2, [pc, #44]	; (800ec6c <Keys_Input_Set_Current+0x94>)
 800ec40:	1df9      	adds	r1, r7, #7
 800ec42:	7809      	ldrb	r1, [r1, #0]
 800ec44:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800ec46:	4b08      	ldr	r3, [pc, #32]	; (800ec68 <Keys_Input_Set_Current+0x90>)
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	b2da      	uxtb	r2, r3
 800ec4e:	4b06      	ldr	r3, [pc, #24]	; (800ec68 <Keys_Input_Set_Current+0x90>)
 800ec50:	701a      	strb	r2, [r3, #0]


	}

}
 800ec52:	46c0      	nop			; (mov r8, r8)
 800ec54:	46bd      	mov	sp, r7
 800ec56:	b002      	add	sp, #8
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	46c0      	nop			; (mov r8, r8)
 800ec5c:	200039f8 	.word	0x200039f8
 800ec60:	2000398b 	.word	0x2000398b
 800ec64:	20002fd4 	.word	0x20002fd4
 800ec68:	2000398e 	.word	0x2000398e
 800ec6c:	20003064 	.word	0x20003064

0800ec70 <Keys_Input_Set_V_Rate>:
 * @brief  数字键盘输入设定V_Rate时间的处理函数（暂定0-30）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_V_Rate(char Number)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	0002      	movs	r2, r0
 800ec78:	1dfb      	adds	r3, r7, #7
 800ec7a:	701a      	strb	r2, [r3, #0]

	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800ec7c:	4b32      	ldr	r3, [pc, #200]	; (800ed48 <Keys_Input_Set_V_Rate+0xd8>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d15d      	bne.n	800ed40 <Keys_Input_Set_V_Rate+0xd0>
 800ec84:	4b30      	ldr	r3, [pc, #192]	; (800ed48 <Keys_Input_Set_V_Rate+0xd8>)
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d159      	bne.n	800ed40 <Keys_Input_Set_V_Rate+0xd0>
 800ec8c:	4b2e      	ldr	r3, [pc, #184]	; (800ed48 <Keys_Input_Set_V_Rate+0xd8>)
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d155      	bne.n	800ed40 <Keys_Input_Set_V_Rate+0xd0>
 800ec94:	4b2d      	ldr	r3, [pc, #180]	; (800ed4c <Keys_Input_Set_V_Rate+0xdc>)
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d151      	bne.n	800ed40 <Keys_Input_Set_V_Rate+0xd0>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ec9c:	4b2c      	ldr	r3, [pc, #176]	; (800ed50 <Keys_Input_Set_V_Rate+0xe0>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d022      	beq.n	800ecea <Keys_Input_Set_V_Rate+0x7a>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800eca4:	4b2a      	ldr	r3, [pc, #168]	; (800ed50 <Keys_Input_Set_V_Rate+0xe0>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ecaa:	f005 fb71 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 6;                                     //指针设为0位
 800ecae:	4b29      	ldr	r3, [pc, #164]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ecb0:	2206      	movs	r2, #6
 800ecb2:	701a      	strb	r2, [r3, #0]

			String_V_Rate[0] = '0';                                 //初始化
 800ecb4:	4b28      	ldr	r3, [pc, #160]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecb6:	2230      	movs	r2, #48	; 0x30
 800ecb8:	701a      	strb	r2, [r3, #0]
			String_V_Rate[1] = '.';
 800ecba:	4b27      	ldr	r3, [pc, #156]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecbc:	222e      	movs	r2, #46	; 0x2e
 800ecbe:	705a      	strb	r2, [r3, #1]
			String_V_Rate[2] = '0';
 800ecc0:	4b25      	ldr	r3, [pc, #148]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecc2:	2230      	movs	r2, #48	; 0x30
 800ecc4:	709a      	strb	r2, [r3, #2]
			String_V_Rate[3] = '0';
 800ecc6:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecc8:	2230      	movs	r2, #48	; 0x30
 800ecca:	70da      	strb	r2, [r3, #3]
			String_V_Rate[4] = ' ';
 800eccc:	4b22      	ldr	r3, [pc, #136]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecce:	2220      	movs	r2, #32
 800ecd0:	711a      	strb	r2, [r3, #4]

			String_V_Rate[5] = 'V';
 800ecd2:	4b21      	ldr	r3, [pc, #132]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecd4:	2256      	movs	r2, #86	; 0x56
 800ecd6:	715a      	strb	r2, [r3, #5]
			String_V_Rate[6] = '/';
 800ecd8:	4b1f      	ldr	r3, [pc, #124]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecda:	222f      	movs	r2, #47	; 0x2f
 800ecdc:	719a      	strb	r2, [r3, #6]
			String_V_Rate[7] = 'm';
 800ecde:	4b1e      	ldr	r3, [pc, #120]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ece0:	226d      	movs	r2, #109	; 0x6d
 800ece2:	71da      	strb	r2, [r3, #7]
			String_V_Rate[8] = 's';
 800ece4:	4b1c      	ldr	r3, [pc, #112]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ece6:	2273      	movs	r2, #115	; 0x73
 800ece8:	721a      	strb	r2, [r3, #8]

		}

		if(Cursor_Position==0+6)
 800ecea:	4b1a      	ldr	r3, [pc, #104]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b06      	cmp	r3, #6
 800ecf0:	d10a      	bne.n	800ed08 <Keys_Input_Set_V_Rate+0x98>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800ecf2:	4b18      	ldr	r3, [pc, #96]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	3b06      	subs	r3, #6
 800ecf8:	4a17      	ldr	r2, [pc, #92]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ecfa:	1df9      	adds	r1, r7, #7
 800ecfc:	7809      	ldrb	r1, [r1, #0]
 800ecfe:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800ed00:	4b14      	ldr	r3, [pc, #80]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ed02:	2208      	movs	r2, #8
 800ed04:	701a      	strb	r2, [r3, #0]
			return;
 800ed06:	e01b      	b.n	800ed40 <Keys_Input_Set_V_Rate+0xd0>
		}
		if(Cursor_Position == 3+6)
 800ed08:	4b12      	ldr	r3, [pc, #72]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	2b09      	cmp	r3, #9
 800ed0e:	d10a      	bne.n	800ed26 <Keys_Input_Set_V_Rate+0xb6>
		{
			String_V_Rate[Cursor_Position-6] = Number;
 800ed10:	4b10      	ldr	r3, [pc, #64]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	3b06      	subs	r3, #6
 800ed16:	4a10      	ldr	r2, [pc, #64]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ed18:	1df9      	adds	r1, r7, #7
 800ed1a:	7809      	ldrb	r1, [r1, #0]
 800ed1c:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800ed1e:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ed20:	2206      	movs	r2, #6
 800ed22:	701a      	strb	r2, [r3, #0]
			return;
 800ed24:	e00c      	b.n	800ed40 <Keys_Input_Set_V_Rate+0xd0>
		}
		String_V_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800ed26:	4b0b      	ldr	r3, [pc, #44]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	3b06      	subs	r3, #6
 800ed2c:	4a0a      	ldr	r2, [pc, #40]	; (800ed58 <Keys_Input_Set_V_Rate+0xe8>)
 800ed2e:	1df9      	adds	r1, r7, #7
 800ed30:	7809      	ldrb	r1, [r1, #0]
 800ed32:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800ed34:	4b07      	ldr	r3, [pc, #28]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	b2da      	uxtb	r2, r3
 800ed3c:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <Keys_Input_Set_V_Rate+0xe4>)
 800ed3e:	701a      	strb	r2, [r3, #0]
	}


}
 800ed40:	46bd      	mov	sp, r7
 800ed42:	b002      	add	sp, #8
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	46c0      	nop			; (mov r8, r8)
 800ed48:	200039f8 	.word	0x200039f8
 800ed4c:	2000398b 	.word	0x2000398b
 800ed50:	20002fd4 	.word	0x20002fd4
 800ed54:	2000398e 	.word	0x2000398e
 800ed58:	20003050 	.word	0x20003050

0800ed5c <Keys_Input_Set_I_Rate>:
 * @brief  数字键盘输入设定I_Rate时间的处理函数（暂定0-10）
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Set_I_Rate(char Number)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	0002      	movs	r2, r0
 800ed64:	1dfb      	adds	r3, r7, #7
 800ed66:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800ed68:	4b32      	ldr	r3, [pc, #200]	; (800ee34 <Keys_Input_Set_I_Rate+0xd8>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d15d      	bne.n	800ee2c <Keys_Input_Set_I_Rate+0xd0>
 800ed70:	4b30      	ldr	r3, [pc, #192]	; (800ee34 <Keys_Input_Set_I_Rate+0xd8>)
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d159      	bne.n	800ee2c <Keys_Input_Set_I_Rate+0xd0>
 800ed78:	4b2e      	ldr	r3, [pc, #184]	; (800ee34 <Keys_Input_Set_I_Rate+0xd8>)
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d155      	bne.n	800ee2c <Keys_Input_Set_I_Rate+0xd0>
 800ed80:	4b2d      	ldr	r3, [pc, #180]	; (800ee38 <Keys_Input_Set_I_Rate+0xdc>)
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d151      	bne.n	800ee2c <Keys_Input_Set_I_Rate+0xd0>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                           //第一次按下按键
 800ed88:	4b2c      	ldr	r3, [pc, #176]	; (800ee3c <Keys_Input_Set_I_Rate+0xe0>)
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d022      	beq.n	800edd6 <Keys_Input_Set_I_Rate+0x7a>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ed90:	4b2a      	ldr	r3, [pc, #168]	; (800ee3c <Keys_Input_Set_I_Rate+0xe0>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	701a      	strb	r2, [r3, #0]
			Cursor_Position = 6;                                     //指针设为0位
 800ed96:	4b2a      	ldr	r3, [pc, #168]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800ed98:	2206      	movs	r2, #6
 800ed9a:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ed9c:	f005 faf8 	bl	8014390 <Cursor_flash_off>
			String_I_Rate[0] = '0';                                  //初始化接收输入的字符串
 800eda0:	4b28      	ldr	r3, [pc, #160]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800eda2:	2230      	movs	r2, #48	; 0x30
 800eda4:	701a      	strb	r2, [r3, #0]
			String_I_Rate[1] = '.';
 800eda6:	4b27      	ldr	r3, [pc, #156]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800eda8:	222e      	movs	r2, #46	; 0x2e
 800edaa:	705a      	strb	r2, [r3, #1]
			String_I_Rate[2] = '0';
 800edac:	4b25      	ldr	r3, [pc, #148]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800edae:	2230      	movs	r2, #48	; 0x30
 800edb0:	709a      	strb	r2, [r3, #2]
			String_I_Rate[3] = '0';
 800edb2:	4b24      	ldr	r3, [pc, #144]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800edb4:	2230      	movs	r2, #48	; 0x30
 800edb6:	70da      	strb	r2, [r3, #3]
			String_I_Rate[5] = ' ';
 800edb8:	4b22      	ldr	r3, [pc, #136]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800edba:	2220      	movs	r2, #32
 800edbc:	715a      	strb	r2, [r3, #5]
			String_I_Rate[6] = 'A';
 800edbe:	4b21      	ldr	r3, [pc, #132]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800edc0:	2241      	movs	r2, #65	; 0x41
 800edc2:	719a      	strb	r2, [r3, #6]
			String_I_Rate[7] = '/';
 800edc4:	4b1f      	ldr	r3, [pc, #124]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800edc6:	222f      	movs	r2, #47	; 0x2f
 800edc8:	71da      	strb	r2, [r3, #7]
			String_I_Rate[8] = 'm';
 800edca:	4b1e      	ldr	r3, [pc, #120]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800edcc:	226d      	movs	r2, #109	; 0x6d
 800edce:	721a      	strb	r2, [r3, #8]
			String_I_Rate[9] = 's';
 800edd0:	4b1c      	ldr	r3, [pc, #112]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800edd2:	2273      	movs	r2, #115	; 0x73
 800edd4:	725a      	strb	r2, [r3, #9]
		}


		if(Cursor_Position==0+6)
 800edd6:	4b1a      	ldr	r3, [pc, #104]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	2b06      	cmp	r3, #6
 800eddc:	d10a      	bne.n	800edf4 <Keys_Input_Set_I_Rate+0x98>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800edde:	4b18      	ldr	r3, [pc, #96]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	3b06      	subs	r3, #6
 800ede4:	4a17      	ldr	r2, [pc, #92]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800ede6:	1df9      	adds	r1, r7, #7
 800ede8:	7809      	ldrb	r1, [r1, #0]
 800edea:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=2+6;
 800edec:	4b14      	ldr	r3, [pc, #80]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800edee:	2208      	movs	r2, #8
 800edf0:	701a      	strb	r2, [r3, #0]
			return;
 800edf2:	e01b      	b.n	800ee2c <Keys_Input_Set_I_Rate+0xd0>
		}
		if(Cursor_Position == 3+6)
 800edf4:	4b12      	ldr	r3, [pc, #72]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	2b09      	cmp	r3, #9
 800edfa:	d10a      	bne.n	800ee12 <Keys_Input_Set_I_Rate+0xb6>
		{
			String_I_Rate[Cursor_Position-6] = Number;
 800edfc:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	3b06      	subs	r3, #6
 800ee02:	4a10      	ldr	r2, [pc, #64]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800ee04:	1df9      	adds	r1, r7, #7
 800ee06:	7809      	ldrb	r1, [r1, #0]
 800ee08:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800ee0a:	4b0d      	ldr	r3, [pc, #52]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800ee0c:	2206      	movs	r2, #6
 800ee0e:	701a      	strb	r2, [r3, #0]
			return;
 800ee10:	e00c      	b.n	800ee2c <Keys_Input_Set_I_Rate+0xd0>
		}
		String_I_Rate[Cursor_Position-6] = Number;                  //使光标位置置Number
 800ee12:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	3b06      	subs	r3, #6
 800ee18:	4a0a      	ldr	r2, [pc, #40]	; (800ee44 <Keys_Input_Set_I_Rate+0xe8>)
 800ee1a:	1df9      	adds	r1, r7, #7
 800ee1c:	7809      	ldrb	r1, [r1, #0]
 800ee1e:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                       //光标位置加1
 800ee20:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	b2da      	uxtb	r2, r3
 800ee28:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <Keys_Input_Set_I_Rate+0xe4>)
 800ee2a:	701a      	strb	r2, [r3, #0]

	}
}
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	b002      	add	sp, #8
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	46c0      	nop			; (mov r8, r8)
 800ee34:	200039f8 	.word	0x200039f8
 800ee38:	2000398b 	.word	0x2000398b
 800ee3c:	20002fd4 	.word	0x20002fd4
 800ee40:	2000398e 	.word	0x2000398e
 800ee44:	20003044 	.word	0x20003044

0800ee48 <Keys_Input_RS232>:
 * @brief  数字键盘输入设定串口ID的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_RS232(char Number)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	0002      	movs	r2, r0
 800ee50:	1dfb      	adds	r3, r7, #7
 800ee52:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800ee54:	4b1f      	ldr	r3, [pc, #124]	; (800eed4 <Keys_Input_RS232+0x8c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d138      	bne.n	800eece <Keys_Input_RS232+0x86>
 800ee5c:	4b1d      	ldr	r3, [pc, #116]	; (800eed4 <Keys_Input_RS232+0x8c>)
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	2b03      	cmp	r3, #3
 800ee62:	d134      	bne.n	800eece <Keys_Input_RS232+0x86>
 800ee64:	4b1b      	ldr	r3, [pc, #108]	; (800eed4 <Keys_Input_RS232+0x8c>)
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d130      	bne.n	800eece <Keys_Input_RS232+0x86>
 800ee6c:	4b1a      	ldr	r3, [pc, #104]	; (800eed8 <Keys_Input_RS232+0x90>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d12c      	bne.n	800eece <Keys_Input_RS232+0x86>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ee74:	4b19      	ldr	r3, [pc, #100]	; (800eedc <Keys_Input_RS232+0x94>)
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00d      	beq.n	800ee98 <Keys_Input_RS232+0x50>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ee7c:	4b17      	ldr	r3, [pc, #92]	; (800eedc <Keys_Input_RS232+0x94>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ee82:	f005 fa85 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 0;                                     //指针设为0位
 800ee86:	4b16      	ldr	r3, [pc, #88]	; (800eee0 <Keys_Input_RS232+0x98>)
 800ee88:	2200      	movs	r2, #0
 800ee8a:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[0] = ' ';                                 //清空字符串
 800ee8c:	4b15      	ldr	r3, [pc, #84]	; (800eee4 <Keys_Input_RS232+0x9c>)
 800ee8e:	2220      	movs	r2, #32
 800ee90:	701a      	strb	r2, [r3, #0]
			String_RS232_ID[1] = ' ';
 800ee92:	4b14      	ldr	r3, [pc, #80]	; (800eee4 <Keys_Input_RS232+0x9c>)
 800ee94:	2220      	movs	r2, #32
 800ee96:	705a      	strb	r2, [r3, #1]
		}

		if(Cursor_Position == 2)
 800ee98:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <Keys_Input_RS232+0x98>)
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	2b02      	cmp	r3, #2
 800ee9e:	d103      	bne.n	800eea8 <Keys_Input_RS232+0x60>
		{
			Cursor_Position = 0;                                     //如果光标超过范围，回到启始位置
 800eea0:	4b0f      	ldr	r3, [pc, #60]	; (800eee0 <Keys_Input_RS232+0x98>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	701a      	strb	r2, [r3, #0]
			return;
 800eea6:	e012      	b.n	800eece <Keys_Input_RS232+0x86>
		}

		String_RS232_ID[Cursor_Position] = Number;                  //使光标位置置Number
 800eea8:	4b0d      	ldr	r3, [pc, #52]	; (800eee0 <Keys_Input_RS232+0x98>)
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	0019      	movs	r1, r3
 800eeae:	4b0d      	ldr	r3, [pc, #52]	; (800eee4 <Keys_Input_RS232+0x9c>)
 800eeb0:	1dfa      	adds	r2, r7, #7
 800eeb2:	7812      	ldrb	r2, [r2, #0]
 800eeb4:	545a      	strb	r2, [r3, r1]

		Cursor_Position ++;                                         //光标位置加1
 800eeb6:	4b0a      	ldr	r3, [pc, #40]	; (800eee0 <Keys_Input_RS232+0x98>)
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	3301      	adds	r3, #1
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	4b08      	ldr	r3, [pc, #32]	; (800eee0 <Keys_Input_RS232+0x98>)
 800eec0:	701a      	strb	r2, [r3, #0]
		Write_String_8x16AsicII(48,38,String_RS232_ID);           //显示输入值
 800eec2:	4b08      	ldr	r3, [pc, #32]	; (800eee4 <Keys_Input_RS232+0x9c>)
 800eec4:	001a      	movs	r2, r3
 800eec6:	2126      	movs	r1, #38	; 0x26
 800eec8:	2030      	movs	r0, #48	; 0x30
 800eeca:	f003 fd03 	bl	80128d4 <Write_String_8x16AsicII>
	}
}
 800eece:	46bd      	mov	sp, r7
 800eed0:	b002      	add	sp, #8
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	200039f8 	.word	0x200039f8
 800eed8:	2000398b 	.word	0x2000398b
 800eedc:	20002fd4 	.word	0x20002fd4
 800eee0:	2000398e 	.word	0x2000398e
 800eee4:	20003a88 	.word	0x20003a88

0800eee8 <Keys_Input_Cycle>:
 * @brief  数字键盘输入设定Cycle时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Cycle(char Number)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	0002      	movs	r2, r0
 800eef0:	1dfb      	adds	r3, r7, #7
 800eef2:	701a      	strb	r2, [r3, #0]
	//cycle on time
	if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK))
 800eef4:	4b51      	ldr	r3, [pc, #324]	; (800f03c <Keys_Input_Cycle+0x154>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d14b      	bne.n	800ef94 <Keys_Input_Cycle+0xac>
 800eefc:	4b4f      	ldr	r3, [pc, #316]	; (800f03c <Keys_Input_Cycle+0x154>)
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	2b04      	cmp	r3, #4
 800ef02:	d147      	bne.n	800ef94 <Keys_Input_Cycle+0xac>
 800ef04:	4b4d      	ldr	r3, [pc, #308]	; (800f03c <Keys_Input_Cycle+0x154>)
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	2b02      	cmp	r3, #2
 800ef0a:	d143      	bne.n	800ef94 <Keys_Input_Cycle+0xac>
 800ef0c:	4b4c      	ldr	r3, [pc, #304]	; (800f040 <Keys_Input_Cycle+0x158>)
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d13f      	bne.n	800ef94 <Keys_Input_Cycle+0xac>
	{
		String_Cycle_On[4]='s';
 800ef14:	4b4b      	ldr	r3, [pc, #300]	; (800f044 <Keys_Input_Cycle+0x15c>)
 800ef16:	2273      	movs	r2, #115	; 0x73
 800ef18:	711a      	strb	r2, [r3, #4]
		String_Cycle_On[8]='m';
 800ef1a:	4b4a      	ldr	r3, [pc, #296]	; (800f044 <Keys_Input_Cycle+0x15c>)
 800ef1c:	226d      	movs	r2, #109	; 0x6d
 800ef1e:	721a      	strb	r2, [r3, #8]
		String_Cycle_On[9]='s';
 800ef20:	4b48      	ldr	r3, [pc, #288]	; (800f044 <Keys_Input_Cycle+0x15c>)
 800ef22:	2273      	movs	r2, #115	; 0x73
 800ef24:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800ef26:	4b48      	ldr	r3, [pc, #288]	; (800f048 <Keys_Input_Cycle+0x160>)
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d007      	beq.n	800ef3e <Keys_Input_Cycle+0x56>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800ef2e:	4b46      	ldr	r3, [pc, #280]	; (800f048 <Keys_Input_Cycle+0x160>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800ef34:	f005 fa2c 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 0+6;                                     //指针设为0位
 800ef38:	4b44      	ldr	r3, [pc, #272]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef3a:	2206      	movs	r2, #6
 800ef3c:	701a      	strb	r2, [r3, #0]
		}
		if( (Cursor_Position<4+6) || ((Cursor_Position>4+6) && (Cursor_Position<8+6)) )
 800ef3e:	4b43      	ldr	r3, [pc, #268]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	2b09      	cmp	r3, #9
 800ef44:	d907      	bls.n	800ef56 <Keys_Input_Cycle+0x6e>
 800ef46:	4b41      	ldr	r3, [pc, #260]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	2b0a      	cmp	r3, #10
 800ef4c:	d90a      	bls.n	800ef64 <Keys_Input_Cycle+0x7c>
 800ef4e:	4b3f      	ldr	r3, [pc, #252]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	2b0d      	cmp	r3, #13
 800ef54:	d806      	bhi.n	800ef64 <Keys_Input_Cycle+0x7c>
		{
			String_Cycle_On[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800ef56:	4b3d      	ldr	r3, [pc, #244]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	3b06      	subs	r3, #6
 800ef5c:	4a39      	ldr	r2, [pc, #228]	; (800f044 <Keys_Input_Cycle+0x15c>)
 800ef5e:	1df9      	adds	r1, r7, #7
 800ef60:	7809      	ldrb	r1, [r1, #0]
 800ef62:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                         //光标位置加1
 800ef64:	4b39      	ldr	r3, [pc, #228]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	4b37      	ldr	r3, [pc, #220]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef6e:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800ef70:	4b36      	ldr	r3, [pc, #216]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b0a      	cmp	r3, #10
 800ef76:	d105      	bne.n	800ef84 <Keys_Input_Cycle+0x9c>
		{
			Cursor_Position +=1;//位置4不设置，跳过到下一位
 800ef78:	4b34      	ldr	r3, [pc, #208]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	4b32      	ldr	r3, [pc, #200]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef82:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)
 800ef84:	4b31      	ldr	r3, [pc, #196]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	2b0e      	cmp	r3, #14
 800ef8a:	d153      	bne.n	800f034 <Keys_Input_Cycle+0x14c>
		{
			Cursor_Position=0+6;
 800ef8c:	4b2f      	ldr	r3, [pc, #188]	; (800f04c <Keys_Input_Cycle+0x164>)
 800ef8e:	2206      	movs	r2, #6
 800ef90:	701a      	strb	r2, [r3, #0]
			return;
 800ef92:	e04f      	b.n	800f034 <Keys_Input_Cycle+0x14c>
		}

	}
	//cycle off time
	else if ((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==3) && (LOCK_UNLOCK == UNLOCK))
 800ef94:	4b29      	ldr	r3, [pc, #164]	; (800f03c <Keys_Input_Cycle+0x154>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d14b      	bne.n	800f034 <Keys_Input_Cycle+0x14c>
 800ef9c:	4b27      	ldr	r3, [pc, #156]	; (800f03c <Keys_Input_Cycle+0x154>)
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d147      	bne.n	800f034 <Keys_Input_Cycle+0x14c>
 800efa4:	4b25      	ldr	r3, [pc, #148]	; (800f03c <Keys_Input_Cycle+0x154>)
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	2b03      	cmp	r3, #3
 800efaa:	d143      	bne.n	800f034 <Keys_Input_Cycle+0x14c>
 800efac:	4b24      	ldr	r3, [pc, #144]	; (800f040 <Keys_Input_Cycle+0x158>)
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d13f      	bne.n	800f034 <Keys_Input_Cycle+0x14c>
	{
		String_Cycle_Close[4]='s';
 800efb4:	4b26      	ldr	r3, [pc, #152]	; (800f050 <Keys_Input_Cycle+0x168>)
 800efb6:	2273      	movs	r2, #115	; 0x73
 800efb8:	711a      	strb	r2, [r3, #4]
		String_Cycle_Close[8]='m';
 800efba:	4b25      	ldr	r3, [pc, #148]	; (800f050 <Keys_Input_Cycle+0x168>)
 800efbc:	226d      	movs	r2, #109	; 0x6d
 800efbe:	721a      	strb	r2, [r3, #8]
		String_Cycle_Close[9]='s';
 800efc0:	4b23      	ldr	r3, [pc, #140]	; (800f050 <Keys_Input_Cycle+0x168>)
 800efc2:	2273      	movs	r2, #115	; 0x73
 800efc4:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800efc6:	4b20      	ldr	r3, [pc, #128]	; (800f048 <Keys_Input_Cycle+0x160>)
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d007      	beq.n	800efde <Keys_Input_Cycle+0xf6>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800efce:	4b1e      	ldr	r3, [pc, #120]	; (800f048 <Keys_Input_Cycle+0x160>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800efd4:	f005 f9dc 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 0+6;                                     //指针设为0位
 800efd8:	4b1c      	ldr	r3, [pc, #112]	; (800f04c <Keys_Input_Cycle+0x164>)
 800efda:	2206      	movs	r2, #6
 800efdc:	701a      	strb	r2, [r3, #0]

		}
		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800efde:	4b1b      	ldr	r3, [pc, #108]	; (800f04c <Keys_Input_Cycle+0x164>)
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b09      	cmp	r3, #9
 800efe4:	d907      	bls.n	800eff6 <Keys_Input_Cycle+0x10e>
 800efe6:	4b19      	ldr	r3, [pc, #100]	; (800f04c <Keys_Input_Cycle+0x164>)
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	2b0a      	cmp	r3, #10
 800efec:	d90a      	bls.n	800f004 <Keys_Input_Cycle+0x11c>
 800efee:	4b17      	ldr	r3, [pc, #92]	; (800f04c <Keys_Input_Cycle+0x164>)
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	2b0d      	cmp	r3, #13
 800eff4:	d806      	bhi.n	800f004 <Keys_Input_Cycle+0x11c>
		{
			String_Cycle_Close[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800eff6:	4b15      	ldr	r3, [pc, #84]	; (800f04c <Keys_Input_Cycle+0x164>)
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	3b06      	subs	r3, #6
 800effc:	4a14      	ldr	r2, [pc, #80]	; (800f050 <Keys_Input_Cycle+0x168>)
 800effe:	1df9      	adds	r1, r7, #7
 800f000:	7809      	ldrb	r1, [r1, #0]
 800f002:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800f004:	4b11      	ldr	r3, [pc, #68]	; (800f04c <Keys_Input_Cycle+0x164>)
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	3301      	adds	r3, #1
 800f00a:	b2da      	uxtb	r2, r3
 800f00c:	4b0f      	ldr	r3, [pc, #60]	; (800f04c <Keys_Input_Cycle+0x164>)
 800f00e:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f010:	4b0e      	ldr	r3, [pc, #56]	; (800f04c <Keys_Input_Cycle+0x164>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	2b0a      	cmp	r3, #10
 800f016:	d105      	bne.n	800f024 <Keys_Input_Cycle+0x13c>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800f018:	4b0c      	ldr	r3, [pc, #48]	; (800f04c <Keys_Input_Cycle+0x164>)
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	3301      	adds	r3, #1
 800f01e:	b2da      	uxtb	r2, r3
 800f020:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <Keys_Input_Cycle+0x164>)
 800f022:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800f024:	4b09      	ldr	r3, [pc, #36]	; (800f04c <Keys_Input_Cycle+0x164>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b0e      	cmp	r3, #14
 800f02a:	d103      	bne.n	800f034 <Keys_Input_Cycle+0x14c>
		{
			Cursor_Position=0+6;
 800f02c:	4b07      	ldr	r3, [pc, #28]	; (800f04c <Keys_Input_Cycle+0x164>)
 800f02e:	2206      	movs	r2, #6
 800f030:	701a      	strb	r2, [r3, #0]
			return;
 800f032:	46c0      	nop			; (mov r8, r8)

		}

	}

}
 800f034:	46bd      	mov	sp, r7
 800f036:	b002      	add	sp, #8
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	46c0      	nop			; (mov r8, r8)
 800f03c:	200039f8 	.word	0x200039f8
 800f040:	2000398b 	.word	0x2000398b
 800f044:	20002ffc 	.word	0x20002ffc
 800f048:	20002fd4 	.word	0x20002fd4
 800f04c:	2000398e 	.word	0x2000398e
 800f050:	20003008 	.word	0x20003008

0800f054 <Keys_Input_Delay>:
 * @brief  数字键盘输入设定Delay时间的处理函数
 * @param	数字键的号码（1，2，3，4，5，6，7，8，9，0）
 * @retval None
 */
static void Keys_Input_Delay(char Number)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	0002      	movs	r2, r0
 800f05c:	1dfb      	adds	r3, r7, #7
 800f05e:	701a      	strb	r2, [r3, #0]
	//设置软起动延时
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK))
 800f060:	4b29      	ldr	r3, [pc, #164]	; (800f108 <Keys_Input_Delay+0xb4>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d14b      	bne.n	800f100 <Keys_Input_Delay+0xac>
 800f068:	4b27      	ldr	r3, [pc, #156]	; (800f108 <Keys_Input_Delay+0xb4>)
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	2b04      	cmp	r3, #4
 800f06e:	d147      	bne.n	800f100 <Keys_Input_Delay+0xac>
 800f070:	4b25      	ldr	r3, [pc, #148]	; (800f108 <Keys_Input_Delay+0xb4>)
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d143      	bne.n	800f100 <Keys_Input_Delay+0xac>
 800f078:	4b24      	ldr	r3, [pc, #144]	; (800f10c <Keys_Input_Delay+0xb8>)
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d13f      	bne.n	800f100 <Keys_Input_Delay+0xac>
	{
		String_Delay[4]='s';
 800f080:	4b23      	ldr	r3, [pc, #140]	; (800f110 <Keys_Input_Delay+0xbc>)
 800f082:	2273      	movs	r2, #115	; 0x73
 800f084:	711a      	strb	r2, [r3, #4]
		String_Delay[8]='m';
 800f086:	4b22      	ldr	r3, [pc, #136]	; (800f110 <Keys_Input_Delay+0xbc>)
 800f088:	226d      	movs	r2, #109	; 0x6d
 800f08a:	721a      	strb	r2, [r3, #8]
		String_Delay[9]='s';
 800f08c:	4b20      	ldr	r3, [pc, #128]	; (800f110 <Keys_Input_Delay+0xbc>)
 800f08e:	2273      	movs	r2, #115	; 0x73
 800f090:	725a      	strb	r2, [r3, #9]
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f092:	4b20      	ldr	r3, [pc, #128]	; (800f114 <Keys_Input_Delay+0xc0>)
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d007      	beq.n	800f0aa <Keys_Input_Delay+0x56>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f09a:	4b1e      	ldr	r3, [pc, #120]	; (800f114 <Keys_Input_Delay+0xc0>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f0a0:	f005 f976 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 6;                                     //指针设为0位
 800f0a4:	4b1c      	ldr	r3, [pc, #112]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0a6:	2206      	movs	r2, #6
 800f0a8:	701a      	strb	r2, [r3, #0]
		}

		if( Cursor_Position<4+6 || ((Cursor_Position>4+6)&&(Cursor_Position<8+6)) )
 800f0aa:	4b1b      	ldr	r3, [pc, #108]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b09      	cmp	r3, #9
 800f0b0:	d907      	bls.n	800f0c2 <Keys_Input_Delay+0x6e>
 800f0b2:	4b19      	ldr	r3, [pc, #100]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b0a      	cmp	r3, #10
 800f0b8:	d90a      	bls.n	800f0d0 <Keys_Input_Delay+0x7c>
 800f0ba:	4b17      	ldr	r3, [pc, #92]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b0d      	cmp	r3, #13
 800f0c0:	d806      	bhi.n	800f0d0 <Keys_Input_Delay+0x7c>
		{
			String_Delay[Cursor_Position-6] = Number;//光标位置正确，使光标位置置Number
 800f0c2:	4b15      	ldr	r3, [pc, #84]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	3b06      	subs	r3, #6
 800f0c8:	4a11      	ldr	r2, [pc, #68]	; (800f110 <Keys_Input_Delay+0xbc>)
 800f0ca:	1df9      	adds	r1, r7, #7
 800f0cc:	7809      	ldrb	r1, [r1, #0]
 800f0ce:	54d1      	strb	r1, [r2, r3]
		}

		Cursor_Position ++;                                            //光标位置加1
 800f0d0:	4b11      	ldr	r3, [pc, #68]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	4b0f      	ldr	r3, [pc, #60]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0da:	701a      	strb	r2, [r3, #0]

		if(Cursor_Position == 4+6)
 800f0dc:	4b0e      	ldr	r3, [pc, #56]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	2b0a      	cmp	r3, #10
 800f0e2:	d105      	bne.n	800f0f0 <Keys_Input_Delay+0x9c>
		{
			Cursor_Position +=1;//位置4不设置，跳过
 800f0e4:	4b0c      	ldr	r3, [pc, #48]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	4b0a      	ldr	r3, [pc, #40]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0ee:	701a      	strb	r2, [r3, #0]
		}
		if(Cursor_Position==8+6)//越界而没有按下enter，复位清空
 800f0f0:	4b09      	ldr	r3, [pc, #36]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	2b0e      	cmp	r3, #14
 800f0f6:	d103      	bne.n	800f100 <Keys_Input_Delay+0xac>
		{
			Cursor_Position=0+6;
 800f0f8:	4b07      	ldr	r3, [pc, #28]	; (800f118 <Keys_Input_Delay+0xc4>)
 800f0fa:	2206      	movs	r2, #6
 800f0fc:	701a      	strb	r2, [r3, #0]
			return;
 800f0fe:	46c0      	nop			; (mov r8, r8)
		}
	}

}
 800f100:	46bd      	mov	sp, r7
 800f102:	b002      	add	sp, #8
 800f104:	bd80      	pop	{r7, pc}
 800f106:	46c0      	nop			; (mov r8, r8)
 800f108:	200039f8 	.word	0x200039f8
 800f10c:	2000398b 	.word	0x2000398b
 800f110:	20003014 	.word	0x20003014
 800f114:	20002fd4 	.word	0x20002fd4
 800f118:	2000398e 	.word	0x2000398e

0800f11c <Keys_Input_Save>:

static void Keys_Input_Save(char Number)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	0002      	movs	r2, r0
 800f124:	1dfb      	adds	r3, r7, #7
 800f126:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f128:	4b52      	ldr	r3, [pc, #328]	; (800f274 <Keys_Input_Save+0x158>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b03      	cmp	r3, #3
 800f12e:	d000      	beq.n	800f132 <Keys_Input_Save+0x16>
 800f130:	e09d      	b.n	800f26e <Keys_Input_Save+0x152>
 800f132:	4b50      	ldr	r3, [pc, #320]	; (800f274 <Keys_Input_Save+0x158>)
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d000      	beq.n	800f13c <Keys_Input_Save+0x20>
 800f13a:	e098      	b.n	800f26e <Keys_Input_Save+0x152>
 800f13c:	4b4d      	ldr	r3, [pc, #308]	; (800f274 <Keys_Input_Save+0x158>)
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d100      	bne.n	800f146 <Keys_Input_Save+0x2a>
 800f144:	e093      	b.n	800f26e <Keys_Input_Save+0x152>
 800f146:	4b4c      	ldr	r3, [pc, #304]	; (800f278 <Keys_Input_Save+0x15c>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d000      	beq.n	800f150 <Keys_Input_Save+0x34>
 800f14e:	e08e      	b.n	800f26e <Keys_Input_Save+0x152>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f150:	4b4a      	ldr	r3, [pc, #296]	; (800f27c <Keys_Input_Save+0x160>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d02b      	beq.n	800f1b0 <Keys_Input_Save+0x94>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f158:	4b48      	ldr	r3, [pc, #288]	; (800f27c <Keys_Input_Save+0x160>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f15e:	f005 f917 	bl	8014390 <Cursor_flash_off>
			Cursor_Position = 0;                                     //指针设为0位
 800f162:	4b47      	ldr	r3, [pc, #284]	; (800f280 <Keys_Input_Save+0x164>)
 800f164:	2200      	movs	r2, #0
 800f166:	701a      	strb	r2, [r3, #0]
			String_Save_V[0]=' ';
 800f168:	4b46      	ldr	r3, [pc, #280]	; (800f284 <Keys_Input_Save+0x168>)
 800f16a:	2220      	movs	r2, #32
 800f16c:	701a      	strb	r2, [r3, #0]
			String_Save_V[1]=' ';
 800f16e:	4b45      	ldr	r3, [pc, #276]	; (800f284 <Keys_Input_Save+0x168>)
 800f170:	2220      	movs	r2, #32
 800f172:	705a      	strb	r2, [r3, #1]
			String_Save_V[2]=' ';
 800f174:	4b43      	ldr	r3, [pc, #268]	; (800f284 <Keys_Input_Save+0x168>)
 800f176:	2220      	movs	r2, #32
 800f178:	709a      	strb	r2, [r3, #2]
			String_Save_V[3]=' ';
 800f17a:	4b42      	ldr	r3, [pc, #264]	; (800f284 <Keys_Input_Save+0x168>)
 800f17c:	2220      	movs	r2, #32
 800f17e:	70da      	strb	r2, [r3, #3]
			String_Save_V[4]=' ';
 800f180:	4b40      	ldr	r3, [pc, #256]	; (800f284 <Keys_Input_Save+0x168>)
 800f182:	2220      	movs	r2, #32
 800f184:	711a      	strb	r2, [r3, #4]
			String_Save_V[5]=' ';
 800f186:	4b3f      	ldr	r3, [pc, #252]	; (800f284 <Keys_Input_Save+0x168>)
 800f188:	2220      	movs	r2, #32
 800f18a:	715a      	strb	r2, [r3, #5]

			String_Save_I[0]=' ';
 800f18c:	4b3e      	ldr	r3, [pc, #248]	; (800f288 <Keys_Input_Save+0x16c>)
 800f18e:	2220      	movs	r2, #32
 800f190:	701a      	strb	r2, [r3, #0]
			String_Save_I[1]=' ';
 800f192:	4b3d      	ldr	r3, [pc, #244]	; (800f288 <Keys_Input_Save+0x16c>)
 800f194:	2220      	movs	r2, #32
 800f196:	705a      	strb	r2, [r3, #1]
			String_Save_I[2]=' ';
 800f198:	4b3b      	ldr	r3, [pc, #236]	; (800f288 <Keys_Input_Save+0x16c>)
 800f19a:	2220      	movs	r2, #32
 800f19c:	709a      	strb	r2, [r3, #2]
			String_Save_I[3]=' ';
 800f19e:	4b3a      	ldr	r3, [pc, #232]	; (800f288 <Keys_Input_Save+0x16c>)
 800f1a0:	2220      	movs	r2, #32
 800f1a2:	70da      	strb	r2, [r3, #3]
			String_Save_I[4]=' ';
 800f1a4:	4b38      	ldr	r3, [pc, #224]	; (800f288 <Keys_Input_Save+0x16c>)
 800f1a6:	2220      	movs	r2, #32
 800f1a8:	711a      	strb	r2, [r3, #4]
			String_Save_I[5]=' ';
 800f1aa:	4b37      	ldr	r3, [pc, #220]	; (800f288 <Keys_Input_Save+0x16c>)
 800f1ac:	2220      	movs	r2, #32
 800f1ae:	715a      	strb	r2, [r3, #5]


		}
		if(xyz.coordinates3==1)//voltage set
 800f1b0:	4b30      	ldr	r3, [pc, #192]	; (800f274 <Keys_Input_Save+0x158>)
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d12b      	bne.n	800f210 <Keys_Input_Save+0xf4>
		{

			if(Cursor_Position==2)
 800f1b8:	4b31      	ldr	r3, [pc, #196]	; (800f280 <Keys_Input_Save+0x164>)
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	d10a      	bne.n	800f1d6 <Keys_Input_Save+0xba>
			{
				String_Save_V[Cursor_Position]=Number;
 800f1c0:	4b2f      	ldr	r3, [pc, #188]	; (800f280 <Keys_Input_Save+0x164>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	0019      	movs	r1, r3
 800f1c6:	4b2f      	ldr	r3, [pc, #188]	; (800f284 <Keys_Input_Save+0x168>)
 800f1c8:	1dfa      	adds	r2, r7, #7
 800f1ca:	7812      	ldrb	r2, [r2, #0]
 800f1cc:	545a      	strb	r2, [r3, r1]
				Cursor_Position=4;
 800f1ce:	4b2c      	ldr	r3, [pc, #176]	; (800f280 <Keys_Input_Save+0x164>)
 800f1d0:	2204      	movs	r2, #4
 800f1d2:	701a      	strb	r2, [r3, #0]
				return;
 800f1d4:	e04b      	b.n	800f26e <Keys_Input_Save+0x152>
			}
			if(Cursor_Position==5)
 800f1d6:	4b2a      	ldr	r3, [pc, #168]	; (800f280 <Keys_Input_Save+0x164>)
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	2b05      	cmp	r3, #5
 800f1dc:	d10a      	bne.n	800f1f4 <Keys_Input_Save+0xd8>
			{
				String_Save_V[Cursor_Position]=Number;
 800f1de:	4b28      	ldr	r3, [pc, #160]	; (800f280 <Keys_Input_Save+0x164>)
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	0019      	movs	r1, r3
 800f1e4:	4b27      	ldr	r3, [pc, #156]	; (800f284 <Keys_Input_Save+0x168>)
 800f1e6:	1dfa      	adds	r2, r7, #7
 800f1e8:	7812      	ldrb	r2, [r2, #0]
 800f1ea:	545a      	strb	r2, [r3, r1]
				Cursor_Position=0;
 800f1ec:	4b24      	ldr	r3, [pc, #144]	; (800f280 <Keys_Input_Save+0x164>)
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	701a      	strb	r2, [r3, #0]
				return;
 800f1f2:	e03c      	b.n	800f26e <Keys_Input_Save+0x152>
			}
			String_Save_V[Cursor_Position]=Number;
 800f1f4:	4b22      	ldr	r3, [pc, #136]	; (800f280 <Keys_Input_Save+0x164>)
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	0019      	movs	r1, r3
 800f1fa:	4b22      	ldr	r3, [pc, #136]	; (800f284 <Keys_Input_Save+0x168>)
 800f1fc:	1dfa      	adds	r2, r7, #7
 800f1fe:	7812      	ldrb	r2, [r2, #0]
 800f200:	545a      	strb	r2, [r3, r1]
			Cursor_Position++;
 800f202:	4b1f      	ldr	r3, [pc, #124]	; (800f280 <Keys_Input_Save+0x164>)
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	3301      	adds	r3, #1
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	4b1d      	ldr	r3, [pc, #116]	; (800f280 <Keys_Input_Save+0x164>)
 800f20c:	701a      	strb	r2, [r3, #0]
 800f20e:	e02e      	b.n	800f26e <Keys_Input_Save+0x152>
		}
		else if(xyz.coordinates3==2)//current set
 800f210:	4b18      	ldr	r3, [pc, #96]	; (800f274 <Keys_Input_Save+0x158>)
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	2b02      	cmp	r3, #2
 800f216:	d12a      	bne.n	800f26e <Keys_Input_Save+0x152>
		{
			if(Cursor_Position==2+9)
 800f218:	4b19      	ldr	r3, [pc, #100]	; (800f280 <Keys_Input_Save+0x164>)
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	2b0b      	cmp	r3, #11
 800f21e:	d10a      	bne.n	800f236 <Keys_Input_Save+0x11a>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800f220:	4b17      	ldr	r3, [pc, #92]	; (800f280 <Keys_Input_Save+0x164>)
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	3b09      	subs	r3, #9
 800f226:	4a18      	ldr	r2, [pc, #96]	; (800f288 <Keys_Input_Save+0x16c>)
 800f228:	1df9      	adds	r1, r7, #7
 800f22a:	7809      	ldrb	r1, [r1, #0]
 800f22c:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=4+9;
 800f22e:	4b14      	ldr	r3, [pc, #80]	; (800f280 <Keys_Input_Save+0x164>)
 800f230:	220d      	movs	r2, #13
 800f232:	701a      	strb	r2, [r3, #0]
				return;
 800f234:	e01b      	b.n	800f26e <Keys_Input_Save+0x152>
			}
			if(Cursor_Position==5+9)
 800f236:	4b12      	ldr	r3, [pc, #72]	; (800f280 <Keys_Input_Save+0x164>)
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	2b0e      	cmp	r3, #14
 800f23c:	d10a      	bne.n	800f254 <Keys_Input_Save+0x138>
			{
				String_Save_I[Cursor_Position-9]=Number;
 800f23e:	4b10      	ldr	r3, [pc, #64]	; (800f280 <Keys_Input_Save+0x164>)
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	3b09      	subs	r3, #9
 800f244:	4a10      	ldr	r2, [pc, #64]	; (800f288 <Keys_Input_Save+0x16c>)
 800f246:	1df9      	adds	r1, r7, #7
 800f248:	7809      	ldrb	r1, [r1, #0]
 800f24a:	54d1      	strb	r1, [r2, r3]
				Cursor_Position=0+9;
 800f24c:	4b0c      	ldr	r3, [pc, #48]	; (800f280 <Keys_Input_Save+0x164>)
 800f24e:	2209      	movs	r2, #9
 800f250:	701a      	strb	r2, [r3, #0]
				return;
 800f252:	e00c      	b.n	800f26e <Keys_Input_Save+0x152>
			}
			String_Save_I[Cursor_Position-9]=Number;
 800f254:	4b0a      	ldr	r3, [pc, #40]	; (800f280 <Keys_Input_Save+0x164>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	3b09      	subs	r3, #9
 800f25a:	4a0b      	ldr	r2, [pc, #44]	; (800f288 <Keys_Input_Save+0x16c>)
 800f25c:	1df9      	adds	r1, r7, #7
 800f25e:	7809      	ldrb	r1, [r1, #0]
 800f260:	54d1      	strb	r1, [r2, r3]
			Cursor_Position++;
 800f262:	4b07      	ldr	r3, [pc, #28]	; (800f280 <Keys_Input_Save+0x164>)
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	3301      	adds	r3, #1
 800f268:	b2da      	uxtb	r2, r3
 800f26a:	4b05      	ldr	r3, [pc, #20]	; (800f280 <Keys_Input_Save+0x164>)
 800f26c:	701a      	strb	r2, [r3, #0]


	}


}
 800f26e:	46bd      	mov	sp, r7
 800f270:	b002      	add	sp, #8
 800f272:	bd80      	pop	{r7, pc}
 800f274:	200039f8 	.word	0x200039f8
 800f278:	2000398b 	.word	0x2000398b
 800f27c:	20002fd4 	.word	0x20002fd4
 800f280:	2000398e 	.word	0x2000398e
 800f284:	20003020 	.word	0x20003020
 800f288:	2000302c 	.word	0x2000302c

0800f28c <Keys_Input_Recall>:

static void Keys_Input_Recall(char Number)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	0002      	movs	r2, r0
 800f294:	1dfb      	adds	r3, r7, #7
 800f296:	701a      	strb	r2, [r3, #0]
	if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f298:	4b04      	ldr	r3, [pc, #16]	; (800f2ac <Keys_Input_Recall+0x20>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b03      	cmp	r3, #3
 800f29e:	d101      	bne.n	800f2a4 <Keys_Input_Recall+0x18>
 800f2a0:	4b02      	ldr	r3, [pc, #8]	; (800f2ac <Keys_Input_Recall+0x20>)
 800f2a2:	685b      	ldr	r3, [r3, #4]
	{
		//不可参数设定

	}
}
 800f2a4:	46c0      	nop			; (mov r8, r8)
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	b002      	add	sp, #8
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	200039f8 	.word	0x200039f8

0800f2b0 <Keys_Input_Password>:




static void Keys_Input_Password(char Number)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	0002      	movs	r2, r0
 800f2b8:	1dfb      	adds	r3, r7, #7
 800f2ba:	701a      	strb	r2, [r3, #0]
	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) && (LOCK_UNLOCK == UNLOCK) )
 800f2bc:	4b17      	ldr	r3, [pc, #92]	; (800f31c <Keys_Input_Password+0x6c>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d127      	bne.n	800f314 <Keys_Input_Password+0x64>
 800f2c4:	4b15      	ldr	r3, [pc, #84]	; (800f31c <Keys_Input_Password+0x6c>)
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	2b05      	cmp	r3, #5
 800f2ca:	d123      	bne.n	800f314 <Keys_Input_Password+0x64>
 800f2cc:	4b13      	ldr	r3, [pc, #76]	; (800f31c <Keys_Input_Password+0x6c>)
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d11f      	bne.n	800f314 <Keys_Input_Password+0x64>
 800f2d4:	4b12      	ldr	r3, [pc, #72]	; (800f320 <Keys_Input_Password+0x70>)
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d11b      	bne.n	800f314 <Keys_Input_Password+0x64>
	{


		if(Cursor_Position == 5+6)
 800f2dc:	4b11      	ldr	r3, [pc, #68]	; (800f324 <Keys_Input_Password+0x74>)
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b0b      	cmp	r3, #11
 800f2e2:	d10a      	bne.n	800f2fa <Keys_Input_Password+0x4a>
		{
			String_Password[Cursor_Position-6] = Number;
 800f2e4:	4b0f      	ldr	r3, [pc, #60]	; (800f324 <Keys_Input_Password+0x74>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	3b06      	subs	r3, #6
 800f2ea:	4a0f      	ldr	r2, [pc, #60]	; (800f328 <Keys_Input_Password+0x78>)
 800f2ec:	1df9      	adds	r1, r7, #7
 800f2ee:	7809      	ldrb	r1, [r1, #0]
 800f2f0:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+6;
 800f2f2:	4b0c      	ldr	r3, [pc, #48]	; (800f324 <Keys_Input_Password+0x74>)
 800f2f4:	2206      	movs	r2, #6
 800f2f6:	701a      	strb	r2, [r3, #0]
			return;
 800f2f8:	e00c      	b.n	800f314 <Keys_Input_Password+0x64>
		}
		String_Password[Cursor_Position-6] = Number;                  //使光标位置置Number
 800f2fa:	4b0a      	ldr	r3, [pc, #40]	; (800f324 <Keys_Input_Password+0x74>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	3b06      	subs	r3, #6
 800f300:	4a09      	ldr	r2, [pc, #36]	; (800f328 <Keys_Input_Password+0x78>)
 800f302:	1df9      	adds	r1, r7, #7
 800f304:	7809      	ldrb	r1, [r1, #0]
 800f306:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f308:	4b06      	ldr	r3, [pc, #24]	; (800f324 <Keys_Input_Password+0x74>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	3301      	adds	r3, #1
 800f30e:	b2da      	uxtb	r2, r3
 800f310:	4b04      	ldr	r3, [pc, #16]	; (800f324 <Keys_Input_Password+0x74>)
 800f312:	701a      	strb	r2, [r3, #0]

	}
}
 800f314:	46bd      	mov	sp, r7
 800f316:	b002      	add	sp, #8
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	46c0      	nop			; (mov r8, r8)
 800f31c:	200039f8 	.word	0x200039f8
 800f320:	2000398b 	.word	0x2000398b
 800f324:	2000398e 	.word	0x2000398e
 800f328:	200030a8 	.word	0x200030a8

0800f32c <Keys_Input_Calibration_Voltage>:

static void Keys_Input_Calibration_Voltage(char Number)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	0002      	movs	r2, r0
 800f334:	1dfb      	adds	r3, r7, #7
 800f336:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1||xyz.coordinates3==2) && (LOCK_UNLOCK == UNLOCK) )
 800f338:	4b28      	ldr	r3, [pc, #160]	; (800f3dc <Keys_Input_Calibration_Voltage+0xb0>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d149      	bne.n	800f3d4 <Keys_Input_Calibration_Voltage+0xa8>
 800f340:	4b26      	ldr	r3, [pc, #152]	; (800f3dc <Keys_Input_Calibration_Voltage+0xb0>)
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	2b08      	cmp	r3, #8
 800f346:	d145      	bne.n	800f3d4 <Keys_Input_Calibration_Voltage+0xa8>
 800f348:	4b24      	ldr	r3, [pc, #144]	; (800f3dc <Keys_Input_Calibration_Voltage+0xb0>)
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d003      	beq.n	800f358 <Keys_Input_Calibration_Voltage+0x2c>
 800f350:	4b22      	ldr	r3, [pc, #136]	; (800f3dc <Keys_Input_Calibration_Voltage+0xb0>)
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	2b02      	cmp	r3, #2
 800f356:	d13d      	bne.n	800f3d4 <Keys_Input_Calibration_Voltage+0xa8>
 800f358:	4b21      	ldr	r3, [pc, #132]	; (800f3e0 <Keys_Input_Calibration_Voltage+0xb4>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d139      	bne.n	800f3d4 <Keys_Input_Calibration_Voltage+0xa8>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f360:	4b20      	ldr	r3, [pc, #128]	; (800f3e4 <Keys_Input_Calibration_Voltage+0xb8>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00a      	beq.n	800f37e <Keys_Input_Calibration_Voltage+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f368:	4b1e      	ldr	r3, [pc, #120]	; (800f3e4 <Keys_Input_Calibration_Voltage+0xb8>)
 800f36a:	2200      	movs	r2, #0
 800f36c:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f36e:	f005 f80f 	bl	8014390 <Cursor_flash_off>

			Cursor_Position = 9;                                    //指针设为0位
 800f372:	4b1d      	ldr	r3, [pc, #116]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f374:	2209      	movs	r2, #9
 800f376:	701a      	strb	r2, [r3, #0]

			String_Calibration_Vlotage[3] = '.';
 800f378:	4b1c      	ldr	r3, [pc, #112]	; (800f3ec <Keys_Input_Calibration_Voltage+0xc0>)
 800f37a:	222e      	movs	r2, #46	; 0x2e
 800f37c:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f37e:	4b1a      	ldr	r3, [pc, #104]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	2b0b      	cmp	r3, #11
 800f384:	d10a      	bne.n	800f39c <Keys_Input_Calibration_Voltage+0x70>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f386:	4b18      	ldr	r3, [pc, #96]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	3b09      	subs	r3, #9
 800f38c:	4a17      	ldr	r2, [pc, #92]	; (800f3ec <Keys_Input_Calibration_Voltage+0xc0>)
 800f38e:	1df9      	adds	r1, r7, #7
 800f390:	7809      	ldrb	r1, [r1, #0]
 800f392:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f394:	4b14      	ldr	r3, [pc, #80]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f396:	220d      	movs	r2, #13
 800f398:	701a      	strb	r2, [r3, #0]
			return;
 800f39a:	e01b      	b.n	800f3d4 <Keys_Input_Calibration_Voltage+0xa8>
		}
		if(Cursor_Position == 5+9)
 800f39c:	4b12      	ldr	r3, [pc, #72]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	2b0e      	cmp	r3, #14
 800f3a2:	d10a      	bne.n	800f3ba <Keys_Input_Calibration_Voltage+0x8e>
		{
			String_Calibration_Vlotage[Cursor_Position-9] = Number;
 800f3a4:	4b10      	ldr	r3, [pc, #64]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	3b09      	subs	r3, #9
 800f3aa:	4a10      	ldr	r2, [pc, #64]	; (800f3ec <Keys_Input_Calibration_Voltage+0xc0>)
 800f3ac:	1df9      	adds	r1, r7, #7
 800f3ae:	7809      	ldrb	r1, [r1, #0]
 800f3b0:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f3b2:	4b0d      	ldr	r3, [pc, #52]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f3b4:	2209      	movs	r2, #9
 800f3b6:	701a      	strb	r2, [r3, #0]
			return;
 800f3b8:	e00c      	b.n	800f3d4 <Keys_Input_Calibration_Voltage+0xa8>
		}
		String_Calibration_Vlotage[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f3ba:	4b0b      	ldr	r3, [pc, #44]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	3b09      	subs	r3, #9
 800f3c0:	4a0a      	ldr	r2, [pc, #40]	; (800f3ec <Keys_Input_Calibration_Voltage+0xc0>)
 800f3c2:	1df9      	adds	r1, r7, #7
 800f3c4:	7809      	ldrb	r1, [r1, #0]
 800f3c6:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f3c8:	4b07      	ldr	r3, [pc, #28]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	b2da      	uxtb	r2, r3
 800f3d0:	4b05      	ldr	r3, [pc, #20]	; (800f3e8 <Keys_Input_Calibration_Voltage+0xbc>)
 800f3d2:	701a      	strb	r2, [r3, #0]

	}

}
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	b002      	add	sp, #8
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	46c0      	nop			; (mov r8, r8)
 800f3dc:	200039f8 	.word	0x200039f8
 800f3e0:	2000398b 	.word	0x2000398b
 800f3e4:	20002fd4 	.word	0x20002fd4
 800f3e8:	2000398e 	.word	0x2000398e
 800f3ec:	20003090 	.word	0x20003090

0800f3f0 <Keys_Input_Calibration_Current>:

static void Keys_Input_Calibration_Current(char Number)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	0002      	movs	r2, r0
 800f3f8:	1dfb      	adds	r3, r7, #7
 800f3fa:	701a      	strb	r2, [r3, #0]
	//处于设定电压模式、无锁定和非保护状态
	if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3||xyz.coordinates3==4) && (LOCK_UNLOCK == UNLOCK) )
 800f3fc:	4b28      	ldr	r3, [pc, #160]	; (800f4a0 <Keys_Input_Calibration_Current+0xb0>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d149      	bne.n	800f498 <Keys_Input_Calibration_Current+0xa8>
 800f404:	4b26      	ldr	r3, [pc, #152]	; (800f4a0 <Keys_Input_Calibration_Current+0xb0>)
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	2b08      	cmp	r3, #8
 800f40a:	d145      	bne.n	800f498 <Keys_Input_Calibration_Current+0xa8>
 800f40c:	4b24      	ldr	r3, [pc, #144]	; (800f4a0 <Keys_Input_Calibration_Current+0xb0>)
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	2b03      	cmp	r3, #3
 800f412:	d003      	beq.n	800f41c <Keys_Input_Calibration_Current+0x2c>
 800f414:	4b22      	ldr	r3, [pc, #136]	; (800f4a0 <Keys_Input_Calibration_Current+0xb0>)
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	2b04      	cmp	r3, #4
 800f41a:	d13d      	bne.n	800f498 <Keys_Input_Calibration_Current+0xa8>
 800f41c:	4b21      	ldr	r3, [pc, #132]	; (800f4a4 <Keys_Input_Calibration_Current+0xb4>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d139      	bne.n	800f498 <Keys_Input_Calibration_Current+0xa8>
	{
		if(Keys_Encoder_Mode != Keys_Mode)                         //第一次按下按键
 800f424:	4b20      	ldr	r3, [pc, #128]	; (800f4a8 <Keys_Input_Calibration_Current+0xb8>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00a      	beq.n	800f442 <Keys_Input_Calibration_Current+0x52>
		{
			Keys_Encoder_Mode = Keys_Mode;                           //切换到键盘模式
 800f42c:	4b1e      	ldr	r3, [pc, #120]	; (800f4a8 <Keys_Input_Calibration_Current+0xb8>)
 800f42e:	2200      	movs	r2, #0
 800f430:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f432:	f004 ffad 	bl	8014390 <Cursor_flash_off>

			Cursor_Position = 9;                                    //指针设为0位
 800f436:	4b1d      	ldr	r3, [pc, #116]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f438:	2209      	movs	r2, #9
 800f43a:	701a      	strb	r2, [r3, #0]

			String_Calibration_Current[3] = '.';
 800f43c:	4b1c      	ldr	r3, [pc, #112]	; (800f4b0 <Keys_Input_Calibration_Current+0xc0>)
 800f43e:	222e      	movs	r2, #46	; 0x2e
 800f440:	70da      	strb	r2, [r3, #3]

		}

		if(Cursor_Position==2+9)
 800f442:	4b1a      	ldr	r3, [pc, #104]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	2b0b      	cmp	r3, #11
 800f448:	d10a      	bne.n	800f460 <Keys_Input_Calibration_Current+0x70>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f44a:	4b18      	ldr	r3, [pc, #96]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	3b09      	subs	r3, #9
 800f450:	4a17      	ldr	r2, [pc, #92]	; (800f4b0 <Keys_Input_Calibration_Current+0xc0>)
 800f452:	1df9      	adds	r1, r7, #7
 800f454:	7809      	ldrb	r1, [r1, #0]
 800f456:	54d1      	strb	r1, [r2, r3]
			Cursor_Position=4+9;
 800f458:	4b14      	ldr	r3, [pc, #80]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f45a:	220d      	movs	r2, #13
 800f45c:	701a      	strb	r2, [r3, #0]
			return;
 800f45e:	e01b      	b.n	800f498 <Keys_Input_Calibration_Current+0xa8>
		}
		if(Cursor_Position == 5+9)
 800f460:	4b12      	ldr	r3, [pc, #72]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	2b0e      	cmp	r3, #14
 800f466:	d10a      	bne.n	800f47e <Keys_Input_Calibration_Current+0x8e>
		{
			String_Calibration_Current[Cursor_Position-9] = Number;
 800f468:	4b10      	ldr	r3, [pc, #64]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	3b09      	subs	r3, #9
 800f46e:	4a10      	ldr	r2, [pc, #64]	; (800f4b0 <Keys_Input_Calibration_Current+0xc0>)
 800f470:	1df9      	adds	r1, r7, #7
 800f472:	7809      	ldrb	r1, [r1, #0]
 800f474:	54d1      	strb	r1, [r2, r3]
			Cursor_Position = 0+9;
 800f476:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f478:	2209      	movs	r2, #9
 800f47a:	701a      	strb	r2, [r3, #0]
			return;
 800f47c:	e00c      	b.n	800f498 <Keys_Input_Calibration_Current+0xa8>
		}
		String_Calibration_Current[Cursor_Position-9] = Number;                  //使光标位置置Number
 800f47e:	4b0b      	ldr	r3, [pc, #44]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	3b09      	subs	r3, #9
 800f484:	4a0a      	ldr	r2, [pc, #40]	; (800f4b0 <Keys_Input_Calibration_Current+0xc0>)
 800f486:	1df9      	adds	r1, r7, #7
 800f488:	7809      	ldrb	r1, [r1, #0]
 800f48a:	54d1      	strb	r1, [r2, r3]
		Cursor_Position ++;                                        //光标位置加1
 800f48c:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	3301      	adds	r3, #1
 800f492:	b2da      	uxtb	r2, r3
 800f494:	4b05      	ldr	r3, [pc, #20]	; (800f4ac <Keys_Input_Calibration_Current+0xbc>)
 800f496:	701a      	strb	r2, [r3, #0]

	}

}
 800f498:	46bd      	mov	sp, r7
 800f49a:	b002      	add	sp, #8
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	46c0      	nop			; (mov r8, r8)
 800f4a0:	200039f8 	.word	0x200039f8
 800f4a4:	2000398b 	.word	0x2000398b
 800f4a8:	20002fd4 	.word	0x20002fd4
 800f4ac:	2000398e 	.word	0x2000398e
 800f4b0:	2000309c 	.word	0x2000309c

0800f4b4 <key_num_handle>:
 * @brief  数字按键的扫描服务函数
 * @param  数字0~9&point(10)
 * @retval None
 */
void key_num_handle(int key_number)
{
 800f4b4:	b590      	push	{r4, r7, lr}
 800f4b6:	b085      	sub	sp, #20
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
	//number
	if(key_number<=9&&key_number>=0)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b09      	cmp	r3, #9
 800f4c0:	dc47      	bgt.n	800f552 <key_num_handle+0x9e>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	db44      	blt.n	800f552 <key_num_handle+0x9e>
	{
		char number=key_number+'0';
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	b2da      	uxtb	r2, r3
 800f4cc:	210f      	movs	r1, #15
 800f4ce:	187b      	adds	r3, r7, r1
 800f4d0:	3230      	adds	r2, #48	; 0x30
 800f4d2:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f4d4:	000c      	movs	r4, r1
 800f4d6:	193b      	adds	r3, r7, r4
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	0018      	movs	r0, r3
 800f4dc:	f7ff fb28 	bl	800eb30 <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f4e0:	193b      	adds	r3, r7, r4
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	0018      	movs	r0, r3
 800f4e6:	f7ff fb77 	bl	800ebd8 <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f4ea:	193b      	adds	r3, r7, r4
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	f7ff fbbe 	bl	800ec70 <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f4f4:	193b      	adds	r3, r7, r4
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	0018      	movs	r0, r3
 800f4fa:	f7ff fc2f 	bl	800ed5c <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f4fe:	193b      	adds	r3, r7, r4
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	0018      	movs	r0, r3
 800f504:	f7ff fca0 	bl	800ee48 <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f508:	193b      	adds	r3, r7, r4
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	0018      	movs	r0, r3
 800f50e:	f7ff fceb 	bl	800eee8 <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f512:	193b      	adds	r3, r7, r4
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	0018      	movs	r0, r3
 800f518:	f7ff fd9c 	bl	800f054 <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f51c:	193b      	adds	r3, r7, r4
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	0018      	movs	r0, r3
 800f522:	f7ff fdfb 	bl	800f11c <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f526:	193b      	adds	r3, r7, r4
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	0018      	movs	r0, r3
 800f52c:	f7ff feae 	bl	800f28c <Keys_Input_Recall>
		Keys_Input_Password(number);
 800f530:	193b      	adds	r3, r7, r4
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	0018      	movs	r0, r3
 800f536:	f7ff febb 	bl	800f2b0 <Keys_Input_Password>
		Keys_Input_Calibration_Voltage(number);
 800f53a:	193b      	adds	r3, r7, r4
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	0018      	movs	r0, r3
 800f540:	f7ff fef4 	bl	800f32c <Keys_Input_Calibration_Voltage>
		Keys_Input_Calibration_Current(number);
 800f544:	193b      	adds	r3, r7, r4
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	0018      	movs	r0, r3
 800f54a:	f7ff ff51 	bl	800f3f0 <Keys_Input_Calibration_Current>
	{
 800f54e:	46c0      	nop			; (mov r8, r8)
		Keys_Input_Delay(number);
		Keys_Input_Save(number);
		Keys_Input_Recall(number);
	}

}
 800f550:	e033      	b.n	800f5ba <key_num_handle+0x106>
	else if(key_number==10)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b0a      	cmp	r3, #10
 800f556:	d130      	bne.n	800f5ba <key_num_handle+0x106>
		char number='.';
 800f558:	240e      	movs	r4, #14
 800f55a:	193b      	adds	r3, r7, r4
 800f55c:	222e      	movs	r2, #46	; 0x2e
 800f55e:	701a      	strb	r2, [r3, #0]
		Keys_Input_Set_Voltage(number);
 800f560:	193b      	adds	r3, r7, r4
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	0018      	movs	r0, r3
 800f566:	f7ff fae3 	bl	800eb30 <Keys_Input_Set_Voltage>
		Keys_Input_Set_Current(number);
 800f56a:	193b      	adds	r3, r7, r4
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	0018      	movs	r0, r3
 800f570:	f7ff fb32 	bl	800ebd8 <Keys_Input_Set_Current>
		Keys_Input_Set_V_Rate(number);
 800f574:	193b      	adds	r3, r7, r4
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	0018      	movs	r0, r3
 800f57a:	f7ff fb79 	bl	800ec70 <Keys_Input_Set_V_Rate>
		Keys_Input_Set_I_Rate(number);
 800f57e:	193b      	adds	r3, r7, r4
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	0018      	movs	r0, r3
 800f584:	f7ff fbea 	bl	800ed5c <Keys_Input_Set_I_Rate>
		Keys_Input_RS232(number);
 800f588:	193b      	adds	r3, r7, r4
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	0018      	movs	r0, r3
 800f58e:	f7ff fc5b 	bl	800ee48 <Keys_Input_RS232>
		Keys_Input_Cycle(number);
 800f592:	193b      	adds	r3, r7, r4
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	0018      	movs	r0, r3
 800f598:	f7ff fca6 	bl	800eee8 <Keys_Input_Cycle>
		Keys_Input_Delay(number);
 800f59c:	193b      	adds	r3, r7, r4
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	0018      	movs	r0, r3
 800f5a2:	f7ff fd57 	bl	800f054 <Keys_Input_Delay>
		Keys_Input_Save(number);
 800f5a6:	193b      	adds	r3, r7, r4
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	0018      	movs	r0, r3
 800f5ac:	f7ff fdb6 	bl	800f11c <Keys_Input_Save>
		Keys_Input_Recall(number);
 800f5b0:	193b      	adds	r3, r7, r4
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	0018      	movs	r0, r3
 800f5b6:	f7ff fe69 	bl	800f28c <Keys_Input_Recall>
}
 800f5ba:	46c0      	nop			; (mov r8, r8)
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	b005      	add	sp, #20
 800f5c0:	bd90      	pop	{r4, r7, pc}
	...

0800f5c4 <Key_V_set>:
 * @brief  按键V-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_V_set(void)
{
 800f5c4:	b590      	push	{r4, r7, lr}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800f5ca:	4b91      	ldr	r3, [pc, #580]	; (800f810 <Key_V_set+0x24c>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d14b      	bne.n	800f66a <Key_V_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)   //当复用该按键时，该按键为菜单进入键
 800f5d2:	4b90      	ldr	r3, [pc, #576]	; (800f814 <Key_V_set+0x250>)
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d10e      	bne.n	800f5f8 <Key_V_set+0x34>
		{
			xyz.coordinates1=1;//更新界面为一级菜单界面system
 800f5da:	4b8f      	ldr	r3, [pc, #572]	; (800f818 <Key_V_set+0x254>)
 800f5dc:	2201      	movs	r2, #1
 800f5de:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800f5e0:	4b8d      	ldr	r3, [pc, #564]	; (800f818 <Key_V_set+0x254>)
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f5e6:	4b8c      	ldr	r3, [pc, #560]	; (800f818 <Key_V_set+0x254>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	609a      	str	r2, [r3, #8]
			Cursor_flash_off();
 800f5ec:	f004 fed0 	bl	8014390 <Cursor_flash_off>
			Shift_Not_Shift=Not_Shift;
 800f5f0:	4b88      	ldr	r3, [pc, #544]	; (800f814 <Key_V_set+0x250>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	701a      	strb	r2, [r3, #0]
 800f5f6:	e038      	b.n	800f66a <Key_V_set+0xa6>

		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )
 800f5f8:	4b87      	ldr	r3, [pc, #540]	; (800f818 <Key_V_set+0x254>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d134      	bne.n	800f66a <Key_V_set+0xa6>
 800f600:	4b85      	ldr	r3, [pc, #532]	; (800f818 <Key_V_set+0x254>)
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d130      	bne.n	800f66a <Key_V_set+0xa6>
 800f608:	4b83      	ldr	r3, [pc, #524]	; (800f818 <Key_V_set+0x254>)
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d12c      	bne.n	800f66a <Key_V_set+0xa6>
 800f610:	4b80      	ldr	r3, [pc, #512]	; (800f814 <Key_V_set+0x250>)
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d128      	bne.n	800f66a <Key_V_set+0xa6>
		{

			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800f618:	4b80      	ldr	r3, [pc, #512]	; (800f81c <Key_V_set+0x258>)
 800f61a:	2201      	movs	r2, #1
 800f61c:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800f61e:	1d3b      	adds	r3, r7, #4
 800f620:	4a7d      	ldr	r2, [pc, #500]	; (800f818 <Key_V_set+0x254>)
 800f622:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f624:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800f626:	4b7c      	ldr	r3, [pc, #496]	; (800f818 <Key_V_set+0x254>)
 800f628:	2202      	movs	r2, #2
 800f62a:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 800f62c:	4b7a      	ldr	r3, [pc, #488]	; (800f818 <Key_V_set+0x254>)
 800f62e:	2202      	movs	r2, #2
 800f630:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f632:	4b79      	ldr	r3, [pc, #484]	; (800f818 <Key_V_set+0x254>)
 800f634:	2200      	movs	r2, #0
 800f636:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)  Clear_Screen();//更新前后的界面不同，清屏
 800f638:	1d3b      	adds	r3, r7, #4
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	4b76      	ldr	r3, [pc, #472]	; (800f818 <Key_V_set+0x254>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	429a      	cmp	r2, r3
 800f642:	d10b      	bne.n	800f65c <Key_V_set+0x98>
 800f644:	1d3b      	adds	r3, r7, #4
 800f646:	685a      	ldr	r2, [r3, #4]
 800f648:	4b73      	ldr	r3, [pc, #460]	; (800f818 <Key_V_set+0x254>)
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d105      	bne.n	800f65c <Key_V_set+0x98>
 800f650:	1d3b      	adds	r3, r7, #4
 800f652:	689a      	ldr	r2, [r3, #8]
 800f654:	4b70      	ldr	r3, [pc, #448]	; (800f818 <Key_V_set+0x254>)
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d001      	beq.n	800f660 <Key_V_set+0x9c>
 800f65c:	f003 f8a0 	bl	80127a0 <Clear_Screen>
			Cursor_Position = 0;   //令光标位于最低位
 800f660:	4b6f      	ldr	r3, [pc, #444]	; (800f820 <Key_V_set+0x25c>)
 800f662:	2200      	movs	r2, #0
 800f664:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800f666:	f004 fec9 	bl	80143fc <Cursor_flash_on>


	}
	/*特殊复用功能*/
	/*I set change to v set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800f66a:	4b6b      	ldr	r3, [pc, #428]	; (800f818 <Key_V_set+0x254>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2b02      	cmp	r3, #2
 800f670:	d11f      	bne.n	800f6b2 <Key_V_set+0xee>
 800f672:	4b69      	ldr	r3, [pc, #420]	; (800f818 <Key_V_set+0x254>)
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d11b      	bne.n	800f6b2 <Key_V_set+0xee>
 800f67a:	4b67      	ldr	r3, [pc, #412]	; (800f818 <Key_V_set+0x254>)
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d117      	bne.n	800f6b2 <Key_V_set+0xee>
 800f682:	4b63      	ldr	r3, [pc, #396]	; (800f810 <Key_V_set+0x24c>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d113      	bne.n	800f6b2 <Key_V_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800f68a:	4b63      	ldr	r3, [pc, #396]	; (800f818 <Key_V_set+0x254>)
 800f68c:	2202      	movs	r2, #2
 800f68e:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=2;
 800f690:	4b61      	ldr	r3, [pc, #388]	; (800f818 <Key_V_set+0x254>)
 800f692:	2202      	movs	r2, #2
 800f694:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f696:	4b60      	ldr	r3, [pc, #384]	; (800f818 <Key_V_set+0x254>)
 800f698:	2200      	movs	r2, #0
 800f69a:	609a      	str	r2, [r3, #8]

		Cursor_Position = 0;   //令光标位于最低位
 800f69c:	4b60      	ldr	r3, [pc, #384]	; (800f820 <Key_V_set+0x25c>)
 800f69e:	2200      	movs	r2, #0
 800f6a0:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800f6a2:	4b60      	ldr	r3, [pc, #384]	; (800f824 <Key_V_set+0x260>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	4b5e      	ldr	r3, [pc, #376]	; (800f824 <Key_V_set+0x260>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f6b2:	4b59      	ldr	r3, [pc, #356]	; (800f818 <Key_V_set+0x254>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d120      	bne.n	800f6fc <Key_V_set+0x138>
 800f6ba:	4b57      	ldr	r3, [pc, #348]	; (800f818 <Key_V_set+0x254>)
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	d11c      	bne.n	800f6fc <Key_V_set+0x138>
 800f6c2:	4b55      	ldr	r3, [pc, #340]	; (800f818 <Key_V_set+0x254>)
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d018      	beq.n	800f6fc <Key_V_set+0x138>
 800f6ca:	4b51      	ldr	r3, [pc, #324]	; (800f810 <Key_V_set+0x24c>)
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d114      	bne.n	800f6fc <Key_V_set+0x138>
	{
		if(Cursor_Position==0)
 800f6d2:	4b53      	ldr	r3, [pc, #332]	; (800f820 <Key_V_set+0x25c>)
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d103      	bne.n	800f6e2 <Key_V_set+0x11e>
		{
			Cursor_Position=4;
 800f6da:	4b51      	ldr	r3, [pc, #324]	; (800f820 <Key_V_set+0x25c>)
 800f6dc:	2204      	movs	r2, #4
 800f6de:	701a      	strb	r2, [r3, #0]
			return;
 800f6e0:	e093      	b.n	800f80a <Key_V_set+0x246>
		}
		if(Cursor_Position==3)
 800f6e2:	4b4f      	ldr	r3, [pc, #316]	; (800f820 <Key_V_set+0x25c>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	2b03      	cmp	r3, #3
 800f6e8:	d102      	bne.n	800f6f0 <Key_V_set+0x12c>
		{
			Cursor_Position=2;
 800f6ea:	4b4d      	ldr	r3, [pc, #308]	; (800f820 <Key_V_set+0x25c>)
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 800f6f0:	4b4b      	ldr	r3, [pc, #300]	; (800f820 <Key_V_set+0x25c>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	4b49      	ldr	r3, [pc, #292]	; (800f820 <Key_V_set+0x25c>)
 800f6fa:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f6fc:	4b46      	ldr	r3, [pc, #280]	; (800f818 <Key_V_set+0x254>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b01      	cmp	r3, #1
 800f702:	d120      	bne.n	800f746 <Key_V_set+0x182>
 800f704:	4b44      	ldr	r3, [pc, #272]	; (800f818 <Key_V_set+0x254>)
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	2b04      	cmp	r3, #4
 800f70a:	d11c      	bne.n	800f746 <Key_V_set+0x182>
 800f70c:	4b42      	ldr	r3, [pc, #264]	; (800f818 <Key_V_set+0x254>)
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d018      	beq.n	800f746 <Key_V_set+0x182>
 800f714:	4b3e      	ldr	r3, [pc, #248]	; (800f810 <Key_V_set+0x24c>)
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d114      	bne.n	800f746 <Key_V_set+0x182>
	{
		if(Cursor_Position==0)
 800f71c:	4b40      	ldr	r3, [pc, #256]	; (800f820 <Key_V_set+0x25c>)
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d103      	bne.n	800f72c <Key_V_set+0x168>
		{
			Cursor_Position=7;
 800f724:	4b3e      	ldr	r3, [pc, #248]	; (800f820 <Key_V_set+0x25c>)
 800f726:	2207      	movs	r2, #7
 800f728:	701a      	strb	r2, [r3, #0]
			return;
 800f72a:	e06e      	b.n	800f80a <Key_V_set+0x246>
		}
		if(Cursor_Position==5)
 800f72c:	4b3c      	ldr	r3, [pc, #240]	; (800f820 <Key_V_set+0x25c>)
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	2b05      	cmp	r3, #5
 800f732:	d102      	bne.n	800f73a <Key_V_set+0x176>
		{
			Cursor_Position=4;
 800f734:	4b3a      	ldr	r3, [pc, #232]	; (800f820 <Key_V_set+0x25c>)
 800f736:	2204      	movs	r2, #4
 800f738:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f73a:	4b39      	ldr	r3, [pc, #228]	; (800f820 <Key_V_set+0x25c>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	3b01      	subs	r3, #1
 800f740:	b2da      	uxtb	r2, r3
 800f742:	4b37      	ldr	r3, [pc, #220]	; (800f820 <Key_V_set+0x25c>)
 800f744:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800f746:	4b34      	ldr	r3, [pc, #208]	; (800f818 <Key_V_set+0x254>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d11f      	bne.n	800f78e <Key_V_set+0x1ca>
 800f74e:	4b32      	ldr	r3, [pc, #200]	; (800f818 <Key_V_set+0x254>)
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	2b05      	cmp	r3, #5
 800f754:	d11b      	bne.n	800f78e <Key_V_set+0x1ca>
 800f756:	4b30      	ldr	r3, [pc, #192]	; (800f818 <Key_V_set+0x254>)
 800f758:	2201      	movs	r2, #1
 800f75a:	609a      	str	r2, [r3, #8]
 800f75c:	4b2c      	ldr	r3, [pc, #176]	; (800f810 <Key_V_set+0x24c>)
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d114      	bne.n	800f78e <Key_V_set+0x1ca>
	{
		if(Cursor_Position==0)
 800f764:	4b2e      	ldr	r3, [pc, #184]	; (800f820 <Key_V_set+0x25c>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d103      	bne.n	800f774 <Key_V_set+0x1b0>
		{
			Cursor_Position=5;
 800f76c:	4b2c      	ldr	r3, [pc, #176]	; (800f820 <Key_V_set+0x25c>)
 800f76e:	2205      	movs	r2, #5
 800f770:	701a      	strb	r2, [r3, #0]
			return;
 800f772:	e04a      	b.n	800f80a <Key_V_set+0x246>
		}
		if(Cursor_Position==4)
 800f774:	4b2a      	ldr	r3, [pc, #168]	; (800f820 <Key_V_set+0x25c>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	2b04      	cmp	r3, #4
 800f77a:	d102      	bne.n	800f782 <Key_V_set+0x1be>
		{
			Cursor_Position=3;
 800f77c:	4b28      	ldr	r3, [pc, #160]	; (800f820 <Key_V_set+0x25c>)
 800f77e:	2203      	movs	r2, #3
 800f780:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position--;
 800f782:	4b27      	ldr	r3, [pc, #156]	; (800f820 <Key_V_set+0x25c>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	3b01      	subs	r3, #1
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	4b25      	ldr	r3, [pc, #148]	; (800f820 <Key_V_set+0x25c>)
 800f78c:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800f78e:	4b22      	ldr	r3, [pc, #136]	; (800f818 <Key_V_set+0x254>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d118      	bne.n	800f7c8 <Key_V_set+0x204>
 800f796:	4b20      	ldr	r3, [pc, #128]	; (800f818 <Key_V_set+0x254>)
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	2b05      	cmp	r3, #5
 800f79c:	d114      	bne.n	800f7c8 <Key_V_set+0x204>
 800f79e:	4b1e      	ldr	r3, [pc, #120]	; (800f818 <Key_V_set+0x254>)
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	609a      	str	r2, [r3, #8]
 800f7a4:	4b1a      	ldr	r3, [pc, #104]	; (800f810 <Key_V_set+0x24c>)
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10d      	bne.n	800f7c8 <Key_V_set+0x204>
	{
		if(Cursor_Position==0)
 800f7ac:	4b1c      	ldr	r3, [pc, #112]	; (800f820 <Key_V_set+0x25c>)
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d103      	bne.n	800f7bc <Key_V_set+0x1f8>
		{
			Cursor_Position=2;
 800f7b4:	4b1a      	ldr	r3, [pc, #104]	; (800f820 <Key_V_set+0x25c>)
 800f7b6:	2202      	movs	r2, #2
 800f7b8:	701a      	strb	r2, [r3, #0]
			return;
 800f7ba:	e026      	b.n	800f80a <Key_V_set+0x246>
		}
		Cursor_Position--;
 800f7bc:	4b18      	ldr	r3, [pc, #96]	; (800f820 <Key_V_set+0x25c>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	4b16      	ldr	r3, [pc, #88]	; (800f820 <Key_V_set+0x25c>)
 800f7c6:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800f7c8:	4b13      	ldr	r3, [pc, #76]	; (800f818 <Key_V_set+0x254>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b03      	cmp	r3, #3
 800f7ce:	d11a      	bne.n	800f806 <Key_V_set+0x242>
 800f7d0:	4b11      	ldr	r3, [pc, #68]	; (800f818 <Key_V_set+0x254>)
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d016      	beq.n	800f806 <Key_V_set+0x242>
 800f7d8:	4b0d      	ldr	r3, [pc, #52]	; (800f810 <Key_V_set+0x24c>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d112      	bne.n	800f806 <Key_V_set+0x242>
	{
		if(xyz.coordinates2==2)//recall
 800f7e0:	4b0d      	ldr	r3, [pc, #52]	; (800f818 <Key_V_set+0x254>)
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d102      	bne.n	800f7ee <Key_V_set+0x22a>
		{
			Cursor_flash_off();
 800f7e8:	f004 fdd2 	bl	8014390 <Cursor_flash_off>
 800f7ec:	e00b      	b.n	800f806 <Key_V_set+0x242>
		}
		else if(xyz.coordinates2==1)//save
 800f7ee:	4b0a      	ldr	r3, [pc, #40]	; (800f818 <Key_V_set+0x254>)
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d107      	bne.n	800f806 <Key_V_set+0x242>
		{
			xyz.coordinates3=1;
 800f7f6:	4b08      	ldr	r3, [pc, #32]	; (800f818 <Key_V_set+0x254>)
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	609a      	str	r2, [r3, #8]
			Cursor_Position=0;
 800f7fc:	4b08      	ldr	r3, [pc, #32]	; (800f820 <Key_V_set+0x25c>)
 800f7fe:	2200      	movs	r2, #0
 800f800:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800f802:	f004 fdfb 	bl	80143fc <Cursor_flash_on>
		}


	}

	Display_Interface();
 800f806:	f004 fe09 	bl	801441c <Display_Interface>


}
 800f80a:	46bd      	mov	sp, r7
 800f80c:	b005      	add	sp, #20
 800f80e:	bd90      	pop	{r4, r7, pc}
 800f810:	2000398b 	.word	0x2000398b
 800f814:	20003987 	.word	0x20003987
 800f818:	200039f8 	.word	0x200039f8
 800f81c:	20002fd4 	.word	0x20002fd4
 800f820:	2000398e 	.word	0x2000398e
 800f824:	200034c8 	.word	0x200034c8

0800f828 <Key_I_set>:
 * @brief  按键I-set的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_I_set(void)
{
 800f828:	b590      	push	{r4, r7, lr}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
	if (LOCK_UNLOCK == UNLOCK)
 800f82e:	4b90      	ldr	r3, [pc, #576]	; (800fa70 <Key_I_set+0x248>)
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d14b      	bne.n	800f8ce <Key_I_set+0xa6>
	{
		if(Shift_Not_Shift == Shift)
 800f836:	4b8f      	ldr	r3, [pc, #572]	; (800fa74 <Key_I_set+0x24c>)
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d10e      	bne.n	800f85c <Key_I_set+0x34>
		{

			/*进入设定值展示界面*/
			xyz.coordinates1=9;
 800f83e:	4b8e      	ldr	r3, [pc, #568]	; (800fa78 <Key_I_set+0x250>)
 800f840:	2209      	movs	r2, #9
 800f842:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=9;
 800f844:	4b8c      	ldr	r3, [pc, #560]	; (800fa78 <Key_I_set+0x250>)
 800f846:	2209      	movs	r2, #9
 800f848:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=9;
 800f84a:	4b8b      	ldr	r3, [pc, #556]	; (800fa78 <Key_I_set+0x250>)
 800f84c:	2209      	movs	r2, #9
 800f84e:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift=Not_Shift;
 800f850:	4b88      	ldr	r3, [pc, #544]	; (800fa74 <Key_I_set+0x24c>)
 800f852:	2200      	movs	r2, #0
 800f854:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800f856:	f004 fd9b 	bl	8014390 <Cursor_flash_off>
 800f85a:	e038      	b.n	800f8ce <Key_I_set+0xa6>
		}
		else if( (xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (Shift_Not_Shift == Not_Shift) )//补充一个设定界面坐标
 800f85c:	4b86      	ldr	r3, [pc, #536]	; (800fa78 <Key_I_set+0x250>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d134      	bne.n	800f8ce <Key_I_set+0xa6>
 800f864:	4b84      	ldr	r3, [pc, #528]	; (800fa78 <Key_I_set+0x250>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d130      	bne.n	800f8ce <Key_I_set+0xa6>
 800f86c:	4b82      	ldr	r3, [pc, #520]	; (800fa78 <Key_I_set+0x250>)
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d12c      	bne.n	800f8ce <Key_I_set+0xa6>
 800f874:	4b7f      	ldr	r3, [pc, #508]	; (800fa74 <Key_I_set+0x24c>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d128      	bne.n	800f8ce <Key_I_set+0xa6>
		{
			//当不复用该按键时，该按键为电压设定功能按键
			Keys_Encoder_Mode = Encoder_Mode;   //默认用编码器输入模式
 800f87c:	4b7f      	ldr	r3, [pc, #508]	; (800fa7c <Key_I_set+0x254>)
 800f87e:	2201      	movs	r2, #1
 800f880:	701a      	strb	r2, [r3, #0]
			Interface_coordinates last_xyz=xyz;//上一界面
 800f882:	1d3b      	adds	r3, r7, #4
 800f884:	4a7c      	ldr	r2, [pc, #496]	; (800fa78 <Key_I_set+0x250>)
 800f886:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f888:	c313      	stmia	r3!, {r0, r1, r4}
			xyz.coordinates1=2;
 800f88a:	4b7b      	ldr	r3, [pc, #492]	; (800fa78 <Key_I_set+0x250>)
 800f88c:	2202      	movs	r2, #2
 800f88e:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 800f890:	4b79      	ldr	r3, [pc, #484]	; (800fa78 <Key_I_set+0x250>)
 800f892:	2201      	movs	r2, #1
 800f894:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 800f896:	4b78      	ldr	r3, [pc, #480]	; (800fa78 <Key_I_set+0x250>)
 800f898:	2200      	movs	r2, #0
 800f89a:	609a      	str	r2, [r3, #8]

			if(last_xyz.coordinates1!= xyz.coordinates1||last_xyz.coordinates2!= xyz.coordinates2||last_xyz.coordinates3!= xyz.coordinates3)   Clear_Screen();;//更新前后的界面不同，清屏
 800f89c:	1d3b      	adds	r3, r7, #4
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	4b75      	ldr	r3, [pc, #468]	; (800fa78 <Key_I_set+0x250>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d10b      	bne.n	800f8c0 <Key_I_set+0x98>
 800f8a8:	1d3b      	adds	r3, r7, #4
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	4b72      	ldr	r3, [pc, #456]	; (800fa78 <Key_I_set+0x250>)
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d105      	bne.n	800f8c0 <Key_I_set+0x98>
 800f8b4:	1d3b      	adds	r3, r7, #4
 800f8b6:	689a      	ldr	r2, [r3, #8]
 800f8b8:	4b6f      	ldr	r3, [pc, #444]	; (800fa78 <Key_I_set+0x250>)
 800f8ba:	689b      	ldr	r3, [r3, #8]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d001      	beq.n	800f8c4 <Key_I_set+0x9c>
 800f8c0:	f002 ff6e 	bl	80127a0 <Clear_Screen>
			Cursor_Position = 9;   //Cursor reset
 800f8c4:	4b6e      	ldr	r3, [pc, #440]	; (800fa80 <Key_I_set+0x258>)
 800f8c6:	2209      	movs	r2, #9
 800f8c8:	701a      	strb	r2, [r3, #0]


			Cursor_flash_on();
 800f8ca:	f004 fd97 	bl	80143fc <Cursor_flash_on>

	}

	/*特殊复用功能*/
	/*V set change to I set*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) && (LOCK_UNLOCK == UNLOCK))
 800f8ce:	4b6a      	ldr	r3, [pc, #424]	; (800fa78 <Key_I_set+0x250>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	d11f      	bne.n	800f916 <Key_I_set+0xee>
 800f8d6:	4b68      	ldr	r3, [pc, #416]	; (800fa78 <Key_I_set+0x250>)
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d11b      	bne.n	800f916 <Key_I_set+0xee>
 800f8de:	4b66      	ldr	r3, [pc, #408]	; (800fa78 <Key_I_set+0x250>)
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d117      	bne.n	800f916 <Key_I_set+0xee>
 800f8e6:	4b62      	ldr	r3, [pc, #392]	; (800fa70 <Key_I_set+0x248>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d113      	bne.n	800f916 <Key_I_set+0xee>
	{
		xyz.coordinates1=2;//更新界面v_set 界面
 800f8ee:	4b62      	ldr	r3, [pc, #392]	; (800fa78 <Key_I_set+0x250>)
 800f8f0:	2202      	movs	r2, #2
 800f8f2:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 800f8f4:	4b60      	ldr	r3, [pc, #384]	; (800fa78 <Key_I_set+0x250>)
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 800f8fa:	4b5f      	ldr	r3, [pc, #380]	; (800fa78 <Key_I_set+0x250>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	609a      	str	r2, [r3, #8]

		Cursor_Position = 9;   //令光标位于最低位
 800f900:	4b5f      	ldr	r3, [pc, #380]	; (800fa80 <Key_I_set+0x258>)
 800f902:	2209      	movs	r2, #9
 800f904:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim6);//开启闪烁
 800f906:	4b5f      	ldr	r3, [pc, #380]	; (800fa84 <Key_I_set+0x25c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	4b5d      	ldr	r3, [pc, #372]	; (800fa84 <Key_I_set+0x25c>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2101      	movs	r1, #1
 800f912:	430a      	orrs	r2, r1
 800f914:	601a      	str	r2, [r3, #0]

	}
	/*rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f916:	4b58      	ldr	r3, [pc, #352]	; (800fa78 <Key_I_set+0x250>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d120      	bne.n	800f960 <Key_I_set+0x138>
 800f91e:	4b56      	ldr	r3, [pc, #344]	; (800fa78 <Key_I_set+0x250>)
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	2b02      	cmp	r3, #2
 800f924:	d11c      	bne.n	800f960 <Key_I_set+0x138>
 800f926:	4b54      	ldr	r3, [pc, #336]	; (800fa78 <Key_I_set+0x250>)
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d018      	beq.n	800f960 <Key_I_set+0x138>
 800f92e:	4b50      	ldr	r3, [pc, #320]	; (800fa70 <Key_I_set+0x248>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d114      	bne.n	800f960 <Key_I_set+0x138>
	{
		if(Cursor_Position==4)
 800f936:	4b52      	ldr	r3, [pc, #328]	; (800fa80 <Key_I_set+0x258>)
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	2b04      	cmp	r3, #4
 800f93c:	d103      	bne.n	800f946 <Key_I_set+0x11e>
		{
			Cursor_Position=0;
 800f93e:	4b50      	ldr	r3, [pc, #320]	; (800fa80 <Key_I_set+0x258>)
 800f940:	2200      	movs	r2, #0
 800f942:	701a      	strb	r2, [r3, #0]
			return;
 800f944:	e091      	b.n	800fa6a <Key_I_set+0x242>
		}
		if(Cursor_Position==1)
 800f946:	4b4e      	ldr	r3, [pc, #312]	; (800fa80 <Key_I_set+0x258>)
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d102      	bne.n	800f954 <Key_I_set+0x12c>
		{
			Cursor_Position=2;
 800f94e:	4b4c      	ldr	r3, [pc, #304]	; (800fa80 <Key_I_set+0x258>)
 800f950:	2202      	movs	r2, #2
 800f952:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800f954:	4b4a      	ldr	r3, [pc, #296]	; (800fa80 <Key_I_set+0x258>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	3301      	adds	r3, #1
 800f95a:	b2da      	uxtb	r2, r3
 800f95c:	4b48      	ldr	r3, [pc, #288]	; (800fa80 <Key_I_set+0x258>)
 800f95e:	701a      	strb	r2, [r3, #0]

	}
	/*timer*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0) && (LOCK_UNLOCK == UNLOCK))
 800f960:	4b45      	ldr	r3, [pc, #276]	; (800fa78 <Key_I_set+0x250>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d120      	bne.n	800f9aa <Key_I_set+0x182>
 800f968:	4b43      	ldr	r3, [pc, #268]	; (800fa78 <Key_I_set+0x250>)
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	d11c      	bne.n	800f9aa <Key_I_set+0x182>
 800f970:	4b41      	ldr	r3, [pc, #260]	; (800fa78 <Key_I_set+0x250>)
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d018      	beq.n	800f9aa <Key_I_set+0x182>
 800f978:	4b3d      	ldr	r3, [pc, #244]	; (800fa70 <Key_I_set+0x248>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d114      	bne.n	800f9aa <Key_I_set+0x182>
	{
		if(Cursor_Position==7)
 800f980:	4b3f      	ldr	r3, [pc, #252]	; (800fa80 <Key_I_set+0x258>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b07      	cmp	r3, #7
 800f986:	d103      	bne.n	800f990 <Key_I_set+0x168>
		{
			Cursor_Position=0;
 800f988:	4b3d      	ldr	r3, [pc, #244]	; (800fa80 <Key_I_set+0x258>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	701a      	strb	r2, [r3, #0]
			return;
 800f98e:	e06c      	b.n	800fa6a <Key_I_set+0x242>
		}
		if(Cursor_Position==3)
 800f990:	4b3b      	ldr	r3, [pc, #236]	; (800fa80 <Key_I_set+0x258>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	2b03      	cmp	r3, #3
 800f996:	d102      	bne.n	800f99e <Key_I_set+0x176>
		{
			Cursor_Position=4;
 800f998:	4b39      	ldr	r3, [pc, #228]	; (800fa80 <Key_I_set+0x258>)
 800f99a:	2204      	movs	r2, #4
 800f99c:	701a      	strb	r2, [r3, #0]

		}

		Cursor_Position++;
 800f99e:	4b38      	ldr	r3, [pc, #224]	; (800fa80 <Key_I_set+0x258>)
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	b2da      	uxtb	r2, r3
 800f9a6:	4b36      	ldr	r3, [pc, #216]	; (800fa80 <Key_I_set+0x258>)
 800f9a8:	701a      	strb	r2, [r3, #0]
	}
	/*AD*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=1) && (LOCK_UNLOCK == UNLOCK))
 800f9aa:	4b33      	ldr	r3, [pc, #204]	; (800fa78 <Key_I_set+0x250>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d11f      	bne.n	800f9f2 <Key_I_set+0x1ca>
 800f9b2:	4b31      	ldr	r3, [pc, #196]	; (800fa78 <Key_I_set+0x250>)
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	2b05      	cmp	r3, #5
 800f9b8:	d11b      	bne.n	800f9f2 <Key_I_set+0x1ca>
 800f9ba:	4b2f      	ldr	r3, [pc, #188]	; (800fa78 <Key_I_set+0x250>)
 800f9bc:	2201      	movs	r2, #1
 800f9be:	609a      	str	r2, [r3, #8]
 800f9c0:	4b2b      	ldr	r3, [pc, #172]	; (800fa70 <Key_I_set+0x248>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d114      	bne.n	800f9f2 <Key_I_set+0x1ca>
	{
		if(Cursor_Position==5)
 800f9c8:	4b2d      	ldr	r3, [pc, #180]	; (800fa80 <Key_I_set+0x258>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	2b05      	cmp	r3, #5
 800f9ce:	d103      	bne.n	800f9d8 <Key_I_set+0x1b0>
		{
			Cursor_Position=0;
 800f9d0:	4b2b      	ldr	r3, [pc, #172]	; (800fa80 <Key_I_set+0x258>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	701a      	strb	r2, [r3, #0]
			return;
 800f9d6:	e048      	b.n	800fa6a <Key_I_set+0x242>
		}
		if(Cursor_Position==2)
 800f9d8:	4b29      	ldr	r3, [pc, #164]	; (800fa80 <Key_I_set+0x258>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d102      	bne.n	800f9e6 <Key_I_set+0x1be>
		{
			Cursor_Position=3;
 800f9e0:	4b27      	ldr	r3, [pc, #156]	; (800fa80 <Key_I_set+0x258>)
 800f9e2:	2203      	movs	r2, #3
 800f9e4:	701a      	strb	r2, [r3, #0]
		}

		Cursor_Position++;
 800f9e6:	4b26      	ldr	r3, [pc, #152]	; (800fa80 <Key_I_set+0x258>)
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	4b24      	ldr	r3, [pc, #144]	; (800fa80 <Key_I_set+0x258>)
 800f9f0:	701a      	strb	r2, [r3, #0]
	}
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3=2) && (LOCK_UNLOCK == UNLOCK))
 800f9f2:	4b21      	ldr	r3, [pc, #132]	; (800fa78 <Key_I_set+0x250>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d118      	bne.n	800fa2c <Key_I_set+0x204>
 800f9fa:	4b1f      	ldr	r3, [pc, #124]	; (800fa78 <Key_I_set+0x250>)
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	2b05      	cmp	r3, #5
 800fa00:	d114      	bne.n	800fa2c <Key_I_set+0x204>
 800fa02:	4b1d      	ldr	r3, [pc, #116]	; (800fa78 <Key_I_set+0x250>)
 800fa04:	2202      	movs	r2, #2
 800fa06:	609a      	str	r2, [r3, #8]
 800fa08:	4b19      	ldr	r3, [pc, #100]	; (800fa70 <Key_I_set+0x248>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10d      	bne.n	800fa2c <Key_I_set+0x204>
	{
		if(Cursor_Position==2)
 800fa10:	4b1b      	ldr	r3, [pc, #108]	; (800fa80 <Key_I_set+0x258>)
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	d103      	bne.n	800fa20 <Key_I_set+0x1f8>
		{
			Cursor_Position=0;
 800fa18:	4b19      	ldr	r3, [pc, #100]	; (800fa80 <Key_I_set+0x258>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	701a      	strb	r2, [r3, #0]
			return;
 800fa1e:	e024      	b.n	800fa6a <Key_I_set+0x242>
		}
		Cursor_Position++;
 800fa20:	4b17      	ldr	r3, [pc, #92]	; (800fa80 <Key_I_set+0x258>)
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	3301      	adds	r3, #1
 800fa26:	b2da      	uxtb	r2, r3
 800fa28:	4b15      	ldr	r3, [pc, #84]	; (800fa80 <Key_I_set+0x258>)
 800fa2a:	701a      	strb	r2, [r3, #0]
	}
	/*save recall*/
	if((xyz.coordinates1==3) && (xyz.coordinates2!=0) && (LOCK_UNLOCK == UNLOCK))
 800fa2c:	4b12      	ldr	r3, [pc, #72]	; (800fa78 <Key_I_set+0x250>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b03      	cmp	r3, #3
 800fa32:	d11a      	bne.n	800fa6a <Key_I_set+0x242>
 800fa34:	4b10      	ldr	r3, [pc, #64]	; (800fa78 <Key_I_set+0x250>)
 800fa36:	685b      	ldr	r3, [r3, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d016      	beq.n	800fa6a <Key_I_set+0x242>
 800fa3c:	4b0c      	ldr	r3, [pc, #48]	; (800fa70 <Key_I_set+0x248>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d112      	bne.n	800fa6a <Key_I_set+0x242>
	{
		if(xyz.coordinates2==2)//recall
 800fa44:	4b0c      	ldr	r3, [pc, #48]	; (800fa78 <Key_I_set+0x250>)
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	2b02      	cmp	r3, #2
 800fa4a:	d102      	bne.n	800fa52 <Key_I_set+0x22a>
		{
			Cursor_flash_off();
 800fa4c:	f004 fca0 	bl	8014390 <Cursor_flash_off>
 800fa50:	e00b      	b.n	800fa6a <Key_I_set+0x242>
		}
		else if(xyz.coordinates2==1)
 800fa52:	4b09      	ldr	r3, [pc, #36]	; (800fa78 <Key_I_set+0x250>)
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d107      	bne.n	800fa6a <Key_I_set+0x242>
		{
			xyz.coordinates3=2;
 800fa5a:	4b07      	ldr	r3, [pc, #28]	; (800fa78 <Key_I_set+0x250>)
 800fa5c:	2202      	movs	r2, #2
 800fa5e:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 800fa60:	4b07      	ldr	r3, [pc, #28]	; (800fa80 <Key_I_set+0x258>)
 800fa62:	2209      	movs	r2, #9
 800fa64:	701a      	strb	r2, [r3, #0]

			Cursor_flash_on();
 800fa66:	f004 fcc9 	bl	80143fc <Cursor_flash_on>
		}

	}

}
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	b005      	add	sp, #20
 800fa6e:	bd90      	pop	{r4, r7, pc}
 800fa70:	2000398b 	.word	0x2000398b
 800fa74:	20003987 	.word	0x20003987
 800fa78:	200039f8 	.word	0x200039f8
 800fa7c:	20002fd4 	.word	0x20002fd4
 800fa80:	2000398e 	.word	0x2000398e
 800fa84:	200034c8 	.word	0x200034c8

0800fa88 <enter_second_menu>:


static void enter_second_menu(void)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	af00      	add	r7, sp, #0
	switch(xyz.coordinates2)
 800fa8c:	4b13      	ldr	r3, [pc, #76]	; (800fadc <enter_second_menu+0x54>)
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	2b08      	cmp	r3, #8
 800fa92:	d81f      	bhi.n	800fad4 <enter_second_menu+0x4c>
 800fa94:	009a      	lsls	r2, r3, #2
 800fa96:	4b12      	ldr	r3, [pc, #72]	; (800fae0 <enter_second_menu+0x58>)
 800fa98:	18d3      	adds	r3, r2, r3
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	469f      	mov	pc, r3
	{
		case 1://system to reset
		case 3://RS232 to braudrate
		case 7://protect
		{
			Cursor_Position=0;
 800fa9e:	4b11      	ldr	r3, [pc, #68]	; (800fae4 <enter_second_menu+0x5c>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	701a      	strb	r2, [r3, #0]
			Cursor_flash_off();
 800faa4:	f004 fc74 	bl	8014390 <Cursor_flash_off>
			xyz.coordinates3=1;
 800faa8:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <enter_second_menu+0x54>)
 800faaa:	2201      	movs	r2, #1
 800faac:	609a      	str	r2, [r3, #8]
			break;
 800faae:	e011      	b.n	800fad4 <enter_second_menu+0x4c>
		case 5://ADparam show
		case 2://slope to rate
		case 4://timer to delay cycle
		case 6://hard param
		{
			Cursor_Position=6;
 800fab0:	4b0c      	ldr	r3, [pc, #48]	; (800fae4 <enter_second_menu+0x5c>)
 800fab2:	2206      	movs	r2, #6
 800fab4:	701a      	strb	r2, [r3, #0]
			Cursor_flash_on();
 800fab6:	f004 fca1 	bl	80143fc <Cursor_flash_on>
			xyz.coordinates3=1;
 800faba:	4b08      	ldr	r3, [pc, #32]	; (800fadc <enter_second_menu+0x54>)
 800fabc:	2201      	movs	r2, #1
 800fabe:	609a      	str	r2, [r3, #8]
			break;
 800fac0:	e008      	b.n	800fad4 <enter_second_menu+0x4c>
		}
		case 8://calibration
		{
			Cursor_flash_on();
 800fac2:	f004 fc9b 	bl	80143fc <Cursor_flash_on>
			Cursor_Position=9;
 800fac6:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <enter_second_menu+0x5c>)
 800fac8:	2209      	movs	r2, #9
 800faca:	701a      	strb	r2, [r3, #0]
			xyz.coordinates3=1;
 800facc:	4b03      	ldr	r3, [pc, #12]	; (800fadc <enter_second_menu+0x54>)
 800face:	2201      	movs	r2, #1
 800fad0:	609a      	str	r2, [r3, #8]
			break;
 800fad2:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 800fad4:	46c0      	nop			; (mov r8, r8)
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	46c0      	nop			; (mov r8, r8)
 800fadc:	200039f8 	.word	0x200039f8
 800fae0:	0801881c 	.word	0x0801881c
 800fae4:	2000398e 	.word	0x2000398e

0800fae8 <ISET_enter>:

static void ISET_enter(void)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800faec:	4b49      	ldr	r3, [pc, #292]	; (800fc14 <ISET_enter+0x12c>)
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d13d      	bne.n	800fb70 <ISET_enter+0x88>
	{
		//Set_Current = String_To_Float(String_Current)*100;
		Set_Current=String_to_float(String_Current)*100;
 800faf4:	4b48      	ldr	r3, [pc, #288]	; (800fc18 <ISET_enter+0x130>)
 800faf6:	0018      	movs	r0, r3
 800faf8:	f7fe fbe0 	bl	800e2bc <String_to_float>
 800fafc:	1c03      	adds	r3, r0, #0
 800fafe:	4947      	ldr	r1, [pc, #284]	; (800fc1c <ISET_enter+0x134>)
 800fb00:	1c18      	adds	r0, r3, #0
 800fb02:	f7f1 f8ad 	bl	8000c60 <__aeabi_fmul>
 800fb06:	1c03      	adds	r3, r0, #0
 800fb08:	1c18      	adds	r0, r3, #0
 800fb0a:	f7f0 fd0d 	bl	8000528 <__aeabi_f2uiz>
 800fb0e:	0003      	movs	r3, r0
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	4b43      	ldr	r3, [pc, #268]	; (800fc20 <ISET_enter+0x138>)
 800fb14:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800fb16:	4b42      	ldr	r3, [pc, #264]	; (800fc20 <ISET_enter+0x138>)
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	4a42      	ldr	r2, [pc, #264]	; (800fc24 <ISET_enter+0x13c>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d902      	bls.n	800fb26 <ISET_enter+0x3e>
 800fb20:	4b3f      	ldr	r3, [pc, #252]	; (800fc20 <ISET_enter+0x138>)
 800fb22:	4a40      	ldr	r2, [pc, #256]	; (800fc24 <ISET_enter+0x13c>)
 800fb24:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=100)   Set_Current=100;
 800fb26:	4b3e      	ldr	r3, [pc, #248]	; (800fc20 <ISET_enter+0x138>)
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	2b64      	cmp	r3, #100	; 0x64
 800fb2c:	d802      	bhi.n	800fb34 <ISET_enter+0x4c>
 800fb2e:	4b3c      	ldr	r3, [pc, #240]	; (800fc20 <ISET_enter+0x138>)
 800fb30:	2264      	movs	r2, #100	; 0x64
 800fb32:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fb34:	f7fc fb8e 	bl	800c254 <AT25_Save_VISet>



		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))//处于非延时输出
 800fb38:	4b3b      	ldr	r3, [pc, #236]	; (800fc28 <ISET_enter+0x140>)
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d10e      	bne.n	800fb5e <ISET_enter+0x76>
 800fb40:	4b3a      	ldr	r3, [pc, #232]	; (800fc2c <ISET_enter+0x144>)
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	2bff      	cmp	r3, #255	; 0xff
 800fb46:	d10a      	bne.n	800fb5e <ISET_enter+0x76>
 800fb48:	4b39      	ldr	r3, [pc, #228]	; (800fc30 <ISET_enter+0x148>)
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d106      	bne.n	800fb5e <ISET_enter+0x76>
		{

			DAC_Cmd_send(1,5,Set_Current);
 800fb50:	4b33      	ldr	r3, [pc, #204]	; (800fc20 <ISET_enter+0x138>)
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	001a      	movs	r2, r3
 800fb56:	2105      	movs	r1, #5
 800fb58:	2001      	movs	r0, #1
 800fb5a:	f7fc fe8d 	bl	800c878 <DAC_Cmd_send>
		}

		Cursor_Position=9;
 800fb5e:	4b35      	ldr	r3, [pc, #212]	; (800fc34 <ISET_enter+0x14c>)
 800fb60:	2209      	movs	r2, #9
 800fb62:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode=Encoder_Mode;
 800fb64:	4b2b      	ldr	r3, [pc, #172]	; (800fc14 <ISET_enter+0x12c>)
 800fb66:	2201      	movs	r2, #1
 800fb68:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fb6a:	f004 fc47 	bl	80143fc <Cursor_flash_on>
		Cursor_Position=9;
		Keys_Encoder_Mode=Encoder_Mode;
		Cursor_flash_on();
	}

}
 800fb6e:	e04d      	b.n	800fc0c <ISET_enter+0x124>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800fb70:	4b28      	ldr	r3, [pc, #160]	; (800fc14 <ISET_enter+0x12c>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d149      	bne.n	800fc0c <ISET_enter+0x124>
		Keys_Encoder_Mode = Encoder_Mode;//恢复为编码器输入模式
 800fb78:	4b26      	ldr	r3, [pc, #152]	; (800fc14 <ISET_enter+0x12c>)
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	701a      	strb	r2, [r3, #0]
		Set_Current=String_to_float(String_Current)*100;
 800fb7e:	4b26      	ldr	r3, [pc, #152]	; (800fc18 <ISET_enter+0x130>)
 800fb80:	0018      	movs	r0, r3
 800fb82:	f7fe fb9b 	bl	800e2bc <String_to_float>
 800fb86:	1c03      	adds	r3, r0, #0
 800fb88:	4924      	ldr	r1, [pc, #144]	; (800fc1c <ISET_enter+0x134>)
 800fb8a:	1c18      	adds	r0, r3, #0
 800fb8c:	f7f1 f868 	bl	8000c60 <__aeabi_fmul>
 800fb90:	1c03      	adds	r3, r0, #0
 800fb92:	1c18      	adds	r0, r3, #0
 800fb94:	f7f0 fcc8 	bl	8000528 <__aeabi_f2uiz>
 800fb98:	0003      	movs	r3, r0
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	4b20      	ldr	r3, [pc, #128]	; (800fc20 <ISET_enter+0x138>)
 800fb9e:	801a      	strh	r2, [r3, #0]
		if(Set_Current > 5000) Set_Current = 5000;//50A
 800fba0:	4b1f      	ldr	r3, [pc, #124]	; (800fc20 <ISET_enter+0x138>)
 800fba2:	881b      	ldrh	r3, [r3, #0]
 800fba4:	4a1f      	ldr	r2, [pc, #124]	; (800fc24 <ISET_enter+0x13c>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d902      	bls.n	800fbb0 <ISET_enter+0xc8>
 800fbaa:	4b1d      	ldr	r3, [pc, #116]	; (800fc20 <ISET_enter+0x138>)
 800fbac:	4a1d      	ldr	r2, [pc, #116]	; (800fc24 <ISET_enter+0x13c>)
 800fbae:	801a      	strh	r2, [r3, #0]
		if(Set_Current<=100)   Set_Current=100;
 800fbb0:	4b1b      	ldr	r3, [pc, #108]	; (800fc20 <ISET_enter+0x138>)
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	2b64      	cmp	r3, #100	; 0x64
 800fbb6:	d802      	bhi.n	800fbbe <ISET_enter+0xd6>
 800fbb8:	4b19      	ldr	r3, [pc, #100]	; (800fc20 <ISET_enter+0x138>)
 800fbba:	2264      	movs	r2, #100	; 0x64
 800fbbc:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fbbe:	f7fc fb49 	bl	800c254 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))//处于非延时输出模式
 800fbc2:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <ISET_enter+0x140>)
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d118      	bne.n	800fbfc <ISET_enter+0x114>
 800fbca:	4b18      	ldr	r3, [pc, #96]	; (800fc2c <ISET_enter+0x144>)
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	2bff      	cmp	r3, #255	; 0xff
 800fbd0:	d114      	bne.n	800fbfc <ISET_enter+0x114>
 800fbd2:	4b17      	ldr	r3, [pc, #92]	; (800fc30 <ISET_enter+0x148>)
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d110      	bne.n	800fbfc <ISET_enter+0x114>
			DAC_Cmd_send(1,4,Set_Voltage);
 800fbda:	4b17      	ldr	r3, [pc, #92]	; (800fc38 <ISET_enter+0x150>)
 800fbdc:	881b      	ldrh	r3, [r3, #0]
 800fbde:	001a      	movs	r2, r3
 800fbe0:	2104      	movs	r1, #4
 800fbe2:	2001      	movs	r0, #1
 800fbe4:	f7fc fe48 	bl	800c878 <DAC_Cmd_send>
			HAL_Delay(5);
 800fbe8:	2005      	movs	r0, #5
 800fbea:	f7f5 fb21 	bl	8005230 <HAL_Delay>
			DAC_Cmd_send(1,5,Set_Current);
 800fbee:	4b0c      	ldr	r3, [pc, #48]	; (800fc20 <ISET_enter+0x138>)
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	001a      	movs	r2, r3
 800fbf4:	2105      	movs	r1, #5
 800fbf6:	2001      	movs	r0, #1
 800fbf8:	f7fc fe3e 	bl	800c878 <DAC_Cmd_send>
		Cursor_Position=9;
 800fbfc:	4b0d      	ldr	r3, [pc, #52]	; (800fc34 <ISET_enter+0x14c>)
 800fbfe:	2209      	movs	r2, #9
 800fc00:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode=Encoder_Mode;
 800fc02:	4b04      	ldr	r3, [pc, #16]	; (800fc14 <ISET_enter+0x12c>)
 800fc04:	2201      	movs	r2, #1
 800fc06:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fc08:	f004 fbf8 	bl	80143fc <Cursor_flash_on>
}
 800fc0c:	46c0      	nop			; (mov r8, r8)
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	46c0      	nop			; (mov r8, r8)
 800fc14:	20002fd4 	.word	0x20002fd4
 800fc18:	20003064 	.word	0x20003064
 800fc1c:	42c80000 	.word	0x42c80000
 800fc20:	20002fdc 	.word	0x20002fdc
 800fc24:	00001388 	.word	0x00001388
 800fc28:	20003989 	.word	0x20003989
 800fc2c:	20002fd1 	.word	0x20002fd1
 800fc30:	20003988 	.word	0x20003988
 800fc34:	2000398e 	.word	0x2000398e
 800fc38:	20002fda 	.word	0x20002fda

0800fc3c <VSET_enter>:

static void VSET_enter(void)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 800fc40:	4b41      	ldr	r3, [pc, #260]	; (800fd48 <VSET_enter+0x10c>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d13b      	bne.n	800fcc0 <VSET_enter+0x84>
	{

		Set_Voltage = String_to_float(&String_Voltage[0])*100;
 800fc48:	4b40      	ldr	r3, [pc, #256]	; (800fd4c <VSET_enter+0x110>)
 800fc4a:	0018      	movs	r0, r3
 800fc4c:	f7fe fb36 	bl	800e2bc <String_to_float>
 800fc50:	1c03      	adds	r3, r0, #0
 800fc52:	493f      	ldr	r1, [pc, #252]	; (800fd50 <VSET_enter+0x114>)
 800fc54:	1c18      	adds	r0, r3, #0
 800fc56:	f7f1 f803 	bl	8000c60 <__aeabi_fmul>
 800fc5a:	1c03      	adds	r3, r0, #0
 800fc5c:	1c18      	adds	r0, r3, #0
 800fc5e:	f7f0 fc63 	bl	8000528 <__aeabi_f2uiz>
 800fc62:	0003      	movs	r3, r0
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	4b3b      	ldr	r3, [pc, #236]	; (800fd54 <VSET_enter+0x118>)
 800fc68:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000)
 800fc6a:	4b3a      	ldr	r3, [pc, #232]	; (800fd54 <VSET_enter+0x118>)
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	4a3a      	ldr	r2, [pc, #232]	; (800fd58 <VSET_enter+0x11c>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d902      	bls.n	800fc7a <VSET_enter+0x3e>
		{
			Set_Voltage = 15000;  //限制电压最大值为150V
 800fc74:	4b37      	ldr	r3, [pc, #220]	; (800fd54 <VSET_enter+0x118>)
 800fc76:	4a38      	ldr	r2, [pc, #224]	; (800fd58 <VSET_enter+0x11c>)
 800fc78:	801a      	strh	r2, [r3, #0]
		}
		if(Set_Voltage<=100)
 800fc7a:	4b36      	ldr	r3, [pc, #216]	; (800fd54 <VSET_enter+0x118>)
 800fc7c:	881b      	ldrh	r3, [r3, #0]
 800fc7e:	2b64      	cmp	r3, #100	; 0x64
 800fc80:	d802      	bhi.n	800fc88 <VSET_enter+0x4c>
		{
			Set_Voltage=100;
 800fc82:	4b34      	ldr	r3, [pc, #208]	; (800fd54 <VSET_enter+0x118>)
 800fc84:	2264      	movs	r2, #100	; 0x64
 800fc86:	801a      	strh	r2, [r3, #0]
		}


		AT25_Save_VISet();
 800fc88:	f7fc fae4 	bl	800c254 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))//非延时输出
 800fc8c:	4b33      	ldr	r3, [pc, #204]	; (800fd5c <VSET_enter+0x120>)
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d10e      	bne.n	800fcb2 <VSET_enter+0x76>
 800fc94:	4b32      	ldr	r3, [pc, #200]	; (800fd60 <VSET_enter+0x124>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2bff      	cmp	r3, #255	; 0xff
 800fc9a:	d10a      	bne.n	800fcb2 <VSET_enter+0x76>
 800fc9c:	4b31      	ldr	r3, [pc, #196]	; (800fd64 <VSET_enter+0x128>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d106      	bne.n	800fcb2 <VSET_enter+0x76>
		{
			DAC_Cmd_send(1,4,Set_Voltage);
 800fca4:	4b2b      	ldr	r3, [pc, #172]	; (800fd54 <VSET_enter+0x118>)
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	001a      	movs	r2, r3
 800fcaa:	2104      	movs	r1, #4
 800fcac:	2001      	movs	r0, #1
 800fcae:	f7fc fde3 	bl	800c878 <DAC_Cmd_send>
		}

		xyz.coordinates2=1;//change to I set
 800fcb2:	4b2d      	ldr	r3, [pc, #180]	; (800fd68 <VSET_enter+0x12c>)
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800fcb8:	4b2c      	ldr	r3, [pc, #176]	; (800fd6c <VSET_enter+0x130>)
 800fcba:	2209      	movs	r2, #9
 800fcbc:	701a      	strb	r2, [r3, #0]
		Cursor_Position=9;//光标更新
		Keys_Encoder_Mode= Encoder_Mode;
		Cursor_flash_on();

	}
}
 800fcbe:	e03f      	b.n	800fd40 <VSET_enter+0x104>
	else if(Keys_Encoder_Mode==Keys_Mode)
 800fcc0:	4b21      	ldr	r3, [pc, #132]	; (800fd48 <VSET_enter+0x10c>)
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d13b      	bne.n	800fd40 <VSET_enter+0x104>
		Keys_Encoder_Mode = Encoder_Mode;   //恢复为编码器输入模式
 800fcc8:	4b1f      	ldr	r3, [pc, #124]	; (800fd48 <VSET_enter+0x10c>)
 800fcca:	2201      	movs	r2, #1
 800fccc:	701a      	strb	r2, [r3, #0]
		Set_Voltage = String_to_float(&String_Voltage[0])*100;
 800fcce:	4b1f      	ldr	r3, [pc, #124]	; (800fd4c <VSET_enter+0x110>)
 800fcd0:	0018      	movs	r0, r3
 800fcd2:	f7fe faf3 	bl	800e2bc <String_to_float>
 800fcd6:	1c03      	adds	r3, r0, #0
 800fcd8:	491d      	ldr	r1, [pc, #116]	; (800fd50 <VSET_enter+0x114>)
 800fcda:	1c18      	adds	r0, r3, #0
 800fcdc:	f7f0 ffc0 	bl	8000c60 <__aeabi_fmul>
 800fce0:	1c03      	adds	r3, r0, #0
 800fce2:	1c18      	adds	r0, r3, #0
 800fce4:	f7f0 fc20 	bl	8000528 <__aeabi_f2uiz>
 800fce8:	0003      	movs	r3, r0
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	4b19      	ldr	r3, [pc, #100]	; (800fd54 <VSET_enter+0x118>)
 800fcee:	801a      	strh	r2, [r3, #0]
		if(Set_Voltage > 15000) Set_Voltage = 15000;  //限制电压最大值为150V
 800fcf0:	4b18      	ldr	r3, [pc, #96]	; (800fd54 <VSET_enter+0x118>)
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	4a18      	ldr	r2, [pc, #96]	; (800fd58 <VSET_enter+0x11c>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d902      	bls.n	800fd00 <VSET_enter+0xc4>
 800fcfa:	4b16      	ldr	r3, [pc, #88]	; (800fd54 <VSET_enter+0x118>)
 800fcfc:	4a16      	ldr	r2, [pc, #88]	; (800fd58 <VSET_enter+0x11c>)
 800fcfe:	801a      	strh	r2, [r3, #0]
		AT25_Save_VISet();
 800fd00:	f7fc faa8 	bl	800c254 <AT25_Save_VISet>
		if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))
 800fd04:	4b15      	ldr	r3, [pc, #84]	; (800fd5c <VSET_enter+0x120>)
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d10e      	bne.n	800fd2a <VSET_enter+0xee>
 800fd0c:	4b14      	ldr	r3, [pc, #80]	; (800fd60 <VSET_enter+0x124>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	2bff      	cmp	r3, #255	; 0xff
 800fd12:	d10a      	bne.n	800fd2a <VSET_enter+0xee>
 800fd14:	4b13      	ldr	r3, [pc, #76]	; (800fd64 <VSET_enter+0x128>)
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d106      	bne.n	800fd2a <VSET_enter+0xee>
			DAC_Cmd_send(1,4,Set_Voltage);
 800fd1c:	4b0d      	ldr	r3, [pc, #52]	; (800fd54 <VSET_enter+0x118>)
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	001a      	movs	r2, r3
 800fd22:	2104      	movs	r1, #4
 800fd24:	2001      	movs	r0, #1
 800fd26:	f7fc fda7 	bl	800c878 <DAC_Cmd_send>
		xyz.coordinates2=1;//change to I set
 800fd2a:	4b0f      	ldr	r3, [pc, #60]	; (800fd68 <VSET_enter+0x12c>)
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	605a      	str	r2, [r3, #4]
		Cursor_Position=9;//光标更新
 800fd30:	4b0e      	ldr	r3, [pc, #56]	; (800fd6c <VSET_enter+0x130>)
 800fd32:	2209      	movs	r2, #9
 800fd34:	701a      	strb	r2, [r3, #0]
		Keys_Encoder_Mode= Encoder_Mode;
 800fd36:	4b04      	ldr	r3, [pc, #16]	; (800fd48 <VSET_enter+0x10c>)
 800fd38:	2201      	movs	r2, #1
 800fd3a:	701a      	strb	r2, [r3, #0]
		Cursor_flash_on();
 800fd3c:	f004 fb5e 	bl	80143fc <Cursor_flash_on>
}
 800fd40:	46c0      	nop			; (mov r8, r8)
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	46c0      	nop			; (mov r8, r8)
 800fd48:	20002fd4 	.word	0x20002fd4
 800fd4c:	2000305c 	.word	0x2000305c
 800fd50:	42c80000 	.word	0x42c80000
 800fd54:	20002fda 	.word	0x20002fda
 800fd58:	00003a98 	.word	0x00003a98
 800fd5c:	20003989 	.word	0x20003989
 800fd60:	20002fd1 	.word	0x20002fd1
 800fd64:	20003988 	.word	0x20003988
 800fd68:	200039f8 	.word	0x200039f8
 800fd6c:	2000398e 	.word	0x2000398e

0800fd70 <Password_enter>:

static void Password_enter(void)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
	if(strcmp(String_Password,Password)==0)//密码正确
 800fd76:	4a27      	ldr	r2, [pc, #156]	; (800fe14 <Password_enter+0xa4>)
 800fd78:	4b27      	ldr	r3, [pc, #156]	; (800fe18 <Password_enter+0xa8>)
 800fd7a:	0011      	movs	r1, r2
 800fd7c:	0018      	movs	r0, r3
 800fd7e:	f7f0 f9bf 	bl	8000100 <strcmp>
 800fd82:	1e03      	subs	r3, r0, #0
 800fd84:	d122      	bne.n	800fdcc <Password_enter+0x5c>
	{
		Third_Menu_Flag=1;
 800fd86:	4b25      	ldr	r3, [pc, #148]	; (800fe1c <Password_enter+0xac>)
 800fd88:	2201      	movs	r2, #1
 800fd8a:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=2;//更新为显示隐藏界面
 800fd8c:	4b24      	ldr	r3, [pc, #144]	; (800fe20 <Password_enter+0xb0>)
 800fd8e:	2202      	movs	r2, #2
 800fd90:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 800fd92:	4b24      	ldr	r3, [pc, #144]	; (800fe24 <Password_enter+0xb4>)
 800fd94:	220a      	movs	r2, #10
 800fd96:	701a      	strb	r2, [r3, #0]
		Cursor_flash_off();
 800fd98:	f004 fafa 	bl	8014390 <Cursor_flash_off>

		for(uint8_t i=0;i<6;i++)
 800fd9c:	1dfb      	adds	r3, r7, #7
 800fd9e:	2200      	movs	r2, #0
 800fda0:	701a      	strb	r2, [r3, #0]
 800fda2:	e00e      	b.n	800fdc2 <Password_enter+0x52>
		{
			String_Password_mask[i]=' ';
 800fda4:	1dfb      	adds	r3, r7, #7
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	4a1f      	ldr	r2, [pc, #124]	; (800fe28 <Password_enter+0xb8>)
 800fdaa:	2120      	movs	r1, #32
 800fdac:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 800fdae:	1dfb      	adds	r3, r7, #7
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	4a19      	ldr	r2, [pc, #100]	; (800fe18 <Password_enter+0xa8>)
 800fdb4:	2120      	movs	r1, #32
 800fdb6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 800fdb8:	1dfb      	adds	r3, r7, #7
 800fdba:	781a      	ldrb	r2, [r3, #0]
 800fdbc:	1dfb      	adds	r3, r7, #7
 800fdbe:	3201      	adds	r2, #1
 800fdc0:	701a      	strb	r2, [r3, #0]
 800fdc2:	1dfb      	adds	r3, r7, #7
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	2b05      	cmp	r3, #5
 800fdc8:	d9ec      	bls.n	800fda4 <Password_enter+0x34>
			String_Password[i]=' ';
		}

	}

}
 800fdca:	e01f      	b.n	800fe0c <Password_enter+0x9c>
		Third_Menu_Flag=1;
 800fdcc:	4b13      	ldr	r3, [pc, #76]	; (800fe1c <Password_enter+0xac>)
 800fdce:	2201      	movs	r2, #1
 800fdd0:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=1;
 800fdd2:	4b13      	ldr	r3, [pc, #76]	; (800fe20 <Password_enter+0xb0>)
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	609a      	str	r2, [r3, #8]
		Cursor_Position=10;//光标复位
 800fdd8:	4b12      	ldr	r3, [pc, #72]	; (800fe24 <Password_enter+0xb4>)
 800fdda:	220a      	movs	r2, #10
 800fddc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<6;i++)
 800fdde:	1dbb      	adds	r3, r7, #6
 800fde0:	2200      	movs	r2, #0
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	e00e      	b.n	800fe04 <Password_enter+0x94>
			String_Password_mask[i]=' ';
 800fde6:	1dbb      	adds	r3, r7, #6
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	4a0f      	ldr	r2, [pc, #60]	; (800fe28 <Password_enter+0xb8>)
 800fdec:	2120      	movs	r1, #32
 800fdee:	54d1      	strb	r1, [r2, r3]
			String_Password[i]=' ';
 800fdf0:	1dbb      	adds	r3, r7, #6
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	4a08      	ldr	r2, [pc, #32]	; (800fe18 <Password_enter+0xa8>)
 800fdf6:	2120      	movs	r1, #32
 800fdf8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<6;i++)
 800fdfa:	1dbb      	adds	r3, r7, #6
 800fdfc:	781a      	ldrb	r2, [r3, #0]
 800fdfe:	1dbb      	adds	r3, r7, #6
 800fe00:	3201      	adds	r2, #1
 800fe02:	701a      	strb	r2, [r3, #0]
 800fe04:	1dbb      	adds	r3, r7, #6
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	2b05      	cmp	r3, #5
 800fe0a:	d9ec      	bls.n	800fde6 <Password_enter+0x76>
}
 800fe0c:	46c0      	nop			; (mov r8, r8)
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	b002      	add	sp, #8
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	08018814 	.word	0x08018814
 800fe18:	200030a8 	.word	0x200030a8
 800fe1c:	20002fd2 	.word	0x20002fd2
 800fe20:	200039f8 	.word	0x200039f8
 800fe24:	2000398e 	.word	0x2000398e
 800fe28:	200030b0 	.word	0x200030b0

0800fe2c <IRateSET_enter>:

static void IRateSET_enter(void)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_I_Slope=String_To_Float(&String_I_Rate[0])*10;
 800fe30:	4b13      	ldr	r3, [pc, #76]	; (800fe80 <IRateSET_enter+0x54>)
 800fe32:	0018      	movs	r0, r3
 800fe34:	f7fe fb62 	bl	800e4fc <String_To_Float>
 800fe38:	1c03      	adds	r3, r0, #0
 800fe3a:	4912      	ldr	r1, [pc, #72]	; (800fe84 <IRateSET_enter+0x58>)
 800fe3c:	1c18      	adds	r0, r3, #0
 800fe3e:	f7f0 ff0f 	bl	8000c60 <__aeabi_fmul>
 800fe42:	1c03      	adds	r3, r0, #0
 800fe44:	1c18      	adds	r0, r3, #0
 800fe46:	f7f0 fb6f 	bl	8000528 <__aeabi_f2uiz>
 800fe4a:	0003      	movs	r3, r0
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	4b0e      	ldr	r3, [pc, #56]	; (800fe88 <IRateSET_enter+0x5c>)
 800fe50:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,8,Set_I_Slope);
 800fe52:	4b0d      	ldr	r3, [pc, #52]	; (800fe88 <IRateSET_enter+0x5c>)
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	001a      	movs	r2, r3
 800fe5a:	2108      	movs	r1, #8
 800fe5c:	2001      	movs	r0, #1
 800fe5e:	f7fc fd0b 	bl	800c878 <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 800fe62:	f7fc fb67 	bl	800c534 <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 800fe66:	4b09      	ldr	r3, [pc, #36]	; (800fe8c <IRateSET_enter+0x60>)
 800fe68:	2201      	movs	r2, #1
 800fe6a:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=2;//完成后设定，进入下一设定
 800fe6c:	4b08      	ldr	r3, [pc, #32]	; (800fe90 <IRateSET_enter+0x64>)
 800fe6e:	2202      	movs	r2, #2
 800fe70:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 800fe72:	4b08      	ldr	r3, [pc, #32]	; (800fe94 <IRateSET_enter+0x68>)
 800fe74:	2206      	movs	r2, #6
 800fe76:	701a      	strb	r2, [r3, #0]


}
 800fe78:	46c0      	nop			; (mov r8, r8)
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	46c0      	nop			; (mov r8, r8)
 800fe80:	20003044 	.word	0x20003044
 800fe84:	41200000 	.word	0x41200000
 800fe88:	20003998 	.word	0x20003998
 800fe8c:	20002fd2 	.word	0x20002fd2
 800fe90:	200039f8 	.word	0x200039f8
 800fe94:	2000398e 	.word	0x2000398e

0800fe98 <VRateSET_enter>:

static void VRateSET_enter(void)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	af00      	add	r7, sp, #0
	/*此处补充指令修改控制板的rate*/
	Set_V_Slope=String_To_Float(&String_V_Rate[0])*10;
 800fe9c:	4b14      	ldr	r3, [pc, #80]	; (800fef0 <VRateSET_enter+0x58>)
 800fe9e:	0018      	movs	r0, r3
 800fea0:	f7fe fb2c 	bl	800e4fc <String_To_Float>
 800fea4:	1c03      	adds	r3, r0, #0
 800fea6:	4913      	ldr	r1, [pc, #76]	; (800fef4 <VRateSET_enter+0x5c>)
 800fea8:	1c18      	adds	r0, r3, #0
 800feaa:	f7f0 fed9 	bl	8000c60 <__aeabi_fmul>
 800feae:	1c03      	adds	r3, r0, #0
 800feb0:	1c18      	adds	r0, r3, #0
 800feb2:	f7f0 fb39 	bl	8000528 <__aeabi_f2uiz>
 800feb6:	0003      	movs	r3, r0
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	4b0f      	ldr	r3, [pc, #60]	; (800fef8 <VRateSET_enter+0x60>)
 800febc:	701a      	strb	r2, [r3, #0]
	DAC_Cmd_send(1,7,Set_V_Slope);
 800febe:	4b0e      	ldr	r3, [pc, #56]	; (800fef8 <VRateSET_enter+0x60>)
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	001a      	movs	r2, r3
 800fec6:	2107      	movs	r1, #7
 800fec8:	2001      	movs	r0, #1
 800feca:	f7fc fcd5 	bl	800c878 <DAC_Cmd_send>
	AT25_Save_VI_Rate();
 800fece:	f7fc fb31 	bl	800c534 <AT25_Save_VI_Rate>
	Third_Menu_Flag=1;
 800fed2:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <VRateSET_enter+0x64>)
 800fed4:	2201      	movs	r2, #1
 800fed6:	701a      	strb	r2, [r3, #0]

	xyz.coordinates3=0;//完成后设定，返回上一级
 800fed8:	4b09      	ldr	r3, [pc, #36]	; (800ff00 <VRateSET_enter+0x68>)
 800feda:	2200      	movs	r2, #0
 800fedc:	609a      	str	r2, [r3, #8]
	Cursor_Position=6;//光标复位
 800fede:	4b09      	ldr	r3, [pc, #36]	; (800ff04 <VRateSET_enter+0x6c>)
 800fee0:	2206      	movs	r2, #6
 800fee2:	701a      	strb	r2, [r3, #0]
	Cursor_flash_off();
 800fee4:	f004 fa54 	bl	8014390 <Cursor_flash_off>
}
 800fee8:	46c0      	nop			; (mov r8, r8)
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	46c0      	nop			; (mov r8, r8)
 800fef0:	20003050 	.word	0x20003050
 800fef4:	41200000 	.word	0x41200000
 800fef8:	20003997 	.word	0x20003997
 800fefc:	20002fd2 	.word	0x20002fd2
 800ff00:	200039f8 	.word	0x200039f8
 800ff04:	2000398e 	.word	0x2000398e

0800ff08 <Save_enter>:

static void Save_enter(void)
{
 800ff08:	b5b0      	push	{r4, r5, r7, lr}
 800ff0a:	af00      	add	r7, sp, #0
	Recall_Save_Current[Recall_Save_Number]=String_To_Float(String_Save_I);
	*/


	/*新的实现*/
	Recall_Save_Voltage[Recall_Save_Number]=String_to_float(String_Save_V);//将交互界面的数值进行转换
 800ff0c:	4b22      	ldr	r3, [pc, #136]	; (800ff98 <Save_enter+0x90>)
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	001c      	movs	r4, r3
 800ff12:	4b22      	ldr	r3, [pc, #136]	; (800ff9c <Save_enter+0x94>)
 800ff14:	0018      	movs	r0, r3
 800ff16:	f7fe f9d1 	bl	800e2bc <String_to_float>
 800ff1a:	1c01      	adds	r1, r0, #0
 800ff1c:	4b20      	ldr	r3, [pc, #128]	; (800ffa0 <Save_enter+0x98>)
 800ff1e:	00a2      	lsls	r2, r4, #2
 800ff20:	50d1      	str	r1, [r2, r3]
	Recall_Save_Current[Recall_Save_Number]=String_to_float(String_Save_I);
 800ff22:	4b1d      	ldr	r3, [pc, #116]	; (800ff98 <Save_enter+0x90>)
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	001c      	movs	r4, r3
 800ff28:	4b1e      	ldr	r3, [pc, #120]	; (800ffa4 <Save_enter+0x9c>)
 800ff2a:	0018      	movs	r0, r3
 800ff2c:	f7fe f9c6 	bl	800e2bc <String_to_float>
 800ff30:	1c01      	adds	r1, r0, #0
 800ff32:	4b1d      	ldr	r3, [pc, #116]	; (800ffa8 <Save_enter+0xa0>)
 800ff34:	00a2      	lsls	r2, r4, #2
 800ff36:	50d1      	str	r1, [r2, r3]


	Recall_Save_Power[Recall_Save_Number]=Recall_Save_Voltage[Recall_Save_Number]*Recall_Save_Current[Recall_Save_Number];
 800ff38:	4b17      	ldr	r3, [pc, #92]	; (800ff98 <Save_enter+0x90>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	001a      	movs	r2, r3
 800ff3e:	4b18      	ldr	r3, [pc, #96]	; (800ffa0 <Save_enter+0x98>)
 800ff40:	0092      	lsls	r2, r2, #2
 800ff42:	58d0      	ldr	r0, [r2, r3]
 800ff44:	4b14      	ldr	r3, [pc, #80]	; (800ff98 <Save_enter+0x90>)
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	001a      	movs	r2, r3
 800ff4a:	4b17      	ldr	r3, [pc, #92]	; (800ffa8 <Save_enter+0xa0>)
 800ff4c:	0092      	lsls	r2, r2, #2
 800ff4e:	58d2      	ldr	r2, [r2, r3]
 800ff50:	4b11      	ldr	r3, [pc, #68]	; (800ff98 <Save_enter+0x90>)
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	001c      	movs	r4, r3
 800ff56:	1c11      	adds	r1, r2, #0
 800ff58:	f7f0 fe82 	bl	8000c60 <__aeabi_fmul>
 800ff5c:	1c03      	adds	r3, r0, #0
 800ff5e:	1c19      	adds	r1, r3, #0
 800ff60:	4b12      	ldr	r3, [pc, #72]	; (800ffac <Save_enter+0xa4>)
 800ff62:	00a2      	lsls	r2, r4, #2
 800ff64:	50d1      	str	r1, [r2, r3]
	AT25_Save_Recall_Save_VI(Recall_Save_Number);
 800ff66:	4b0c      	ldr	r3, [pc, #48]	; (800ff98 <Save_enter+0x90>)
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	0018      	movs	r0, r3
 800ff6c:	f7fc f9b8 	bl	800c2e0 <AT25_Save_Recall_Save_VI>

	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 800ff70:	4b0f      	ldr	r3, [pc, #60]	; (800ffb0 <Save_enter+0xa8>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d109      	bne.n	800ff8c <Save_enter+0x84>
 800ff78:	4b0e      	ldr	r3, [pc, #56]	; (800ffb4 <Save_enter+0xac>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2bff      	cmp	r3, #255	; 0xff
 800ff7e:	d105      	bne.n	800ff8c <Save_enter+0x84>
 800ff80:	4b0d      	ldr	r3, [pc, #52]	; (800ffb8 <Save_enter+0xb0>)
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d101      	bne.n	800ff8c <Save_enter+0x84>
	{
		power_on();
 800ff88:	f7fc fd4a 	bl	800ca20 <power_on>
	}
	Cursor_Position=0;
 800ff8c:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <Save_enter+0xb4>)
 800ff8e:	2200      	movs	r2, #0
 800ff90:	701a      	strb	r2, [r3, #0]
}
 800ff92:	46c0      	nop			; (mov r8, r8)
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bdb0      	pop	{r4, r5, r7, pc}
 800ff98:	2000398d 	.word	0x2000398d
 800ff9c:	20003020 	.word	0x20003020
 800ffa0:	20003a10 	.word	0x20003a10
 800ffa4:	2000302c 	.word	0x2000302c
 800ffa8:	20003a38 	.word	0x20003a38
 800ffac:	20003a60 	.word	0x20003a60
 800ffb0:	20003989 	.word	0x20003989
 800ffb4:	20002fd1 	.word	0x20002fd1
 800ffb8:	20003988 	.word	0x20003988
 800ffbc:	2000398e 	.word	0x2000398e

0800ffc0 <Load_enter>:

static void Load_enter(void)
{
 800ffc0:	b5b0      	push	{r4, r5, r7, lr}
 800ffc2:	af00      	add	r7, sp, #0

	xyz.coordinates3=1;
 800ffc4:	4b37      	ldr	r3, [pc, #220]	; (80100a4 <Load_enter+0xe4>)
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	609a      	str	r2, [r3, #8]
	Recall_Save_Voltage[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 800ffca:	4b37      	ldr	r3, [pc, #220]	; (80100a8 <Load_enter+0xe8>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	0018      	movs	r0, r3
 800ffd0:	f7fc f9f2 	bl	800c3b8 <AT25_Save_Recall_Recall_VI>
 800ffd4:	0003      	movs	r3, r0
 800ffd6:	0018      	movs	r0, r3
 800ffd8:	f7f2 ff14 	bl	8002e04 <__aeabi_i2d>
 800ffdc:	2200      	movs	r2, #0
 800ffde:	4b33      	ldr	r3, [pc, #204]	; (80100ac <Load_enter+0xec>)
 800ffe0:	f7f1 fcbc 	bl	800195c <__aeabi_ddiv>
 800ffe4:	0002      	movs	r2, r0
 800ffe6:	000b      	movs	r3, r1
 800ffe8:	492f      	ldr	r1, [pc, #188]	; (80100a8 <Load_enter+0xe8>)
 800ffea:	7809      	ldrb	r1, [r1, #0]
 800ffec:	000c      	movs	r4, r1
 800ffee:	0010      	movs	r0, r2
 800fff0:	0019      	movs	r1, r3
 800fff2:	f7f2 ffa5 	bl	8002f40 <__aeabi_d2f>
 800fff6:	1c01      	adds	r1, r0, #0
 800fff8:	4b2d      	ldr	r3, [pc, #180]	; (80100b0 <Load_enter+0xf0>)
 800fffa:	00a2      	lsls	r2, r4, #2
 800fffc:	50d1      	str	r1, [r2, r3]
	Set_Voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 800fffe:	4b2a      	ldr	r3, [pc, #168]	; (80100a8 <Load_enter+0xe8>)
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	0018      	movs	r0, r3
 8010004:	f7fc f9d8 	bl	800c3b8 <AT25_Save_Recall_Recall_VI>
 8010008:	0003      	movs	r3, r0
 801000a:	001a      	movs	r2, r3
 801000c:	4b29      	ldr	r3, [pc, #164]	; (80100b4 <Load_enter+0xf4>)
 801000e:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,4,Set_Voltage);
 8010010:	4b28      	ldr	r3, [pc, #160]	; (80100b4 <Load_enter+0xf4>)
 8010012:	881b      	ldrh	r3, [r3, #0]
 8010014:	001a      	movs	r2, r3
 8010016:	2104      	movs	r1, #4
 8010018:	2001      	movs	r0, #1
 801001a:	f7fc fc2d 	bl	800c878 <DAC_Cmd_send>
	HAL_Delay(10);
 801001e:	200a      	movs	r0, #10
 8010020:	f7f5 f906 	bl	8005230 <HAL_Delay>
	xyz.coordinates3=2;
 8010024:	4b1f      	ldr	r3, [pc, #124]	; (80100a4 <Load_enter+0xe4>)
 8010026:	2202      	movs	r2, #2
 8010028:	609a      	str	r2, [r3, #8]
	Recall_Save_Current[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 801002a:	4b1f      	ldr	r3, [pc, #124]	; (80100a8 <Load_enter+0xe8>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	0018      	movs	r0, r3
 8010030:	f7fc f9c2 	bl	800c3b8 <AT25_Save_Recall_Recall_VI>
 8010034:	0003      	movs	r3, r0
 8010036:	0018      	movs	r0, r3
 8010038:	f7f2 fee4 	bl	8002e04 <__aeabi_i2d>
 801003c:	2200      	movs	r2, #0
 801003e:	4b1b      	ldr	r3, [pc, #108]	; (80100ac <Load_enter+0xec>)
 8010040:	f7f1 fc8c 	bl	800195c <__aeabi_ddiv>
 8010044:	0002      	movs	r2, r0
 8010046:	000b      	movs	r3, r1
 8010048:	4917      	ldr	r1, [pc, #92]	; (80100a8 <Load_enter+0xe8>)
 801004a:	7809      	ldrb	r1, [r1, #0]
 801004c:	000c      	movs	r4, r1
 801004e:	0010      	movs	r0, r2
 8010050:	0019      	movs	r1, r3
 8010052:	f7f2 ff75 	bl	8002f40 <__aeabi_d2f>
 8010056:	1c01      	adds	r1, r0, #0
 8010058:	4b17      	ldr	r3, [pc, #92]	; (80100b8 <Load_enter+0xf8>)
 801005a:	00a2      	lsls	r2, r4, #2
 801005c:	50d1      	str	r1, [r2, r3]
	Set_Current=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
 801005e:	4b12      	ldr	r3, [pc, #72]	; (80100a8 <Load_enter+0xe8>)
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	0018      	movs	r0, r3
 8010064:	f7fc f9a8 	bl	800c3b8 <AT25_Save_Recall_Recall_VI>
 8010068:	0003      	movs	r3, r0
 801006a:	001a      	movs	r2, r3
 801006c:	4b13      	ldr	r3, [pc, #76]	; (80100bc <Load_enter+0xfc>)
 801006e:	801a      	strh	r2, [r3, #0]
	DAC_Cmd_send(1,5,Set_Current);
 8010070:	4b12      	ldr	r3, [pc, #72]	; (80100bc <Load_enter+0xfc>)
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	001a      	movs	r2, r3
 8010076:	2105      	movs	r1, #5
 8010078:	2001      	movs	r0, #1
 801007a:	f7fc fbfd 	bl	800c878 <DAC_Cmd_send>
	/*
	Recall_Save_Power[Recall_Save_Number]=AT25_Save_Recall_Recall_VI(Recall_Save_Number);
	Set_Power=Recall_Save_Power[Recall_Save_Number];
	 */

	if((OUTPUT_NOT_OUTPUT == OUTPUT) && (DELAY_NOT_DELAY == NOT_DELAY) && (ON_OFF == ON))     //处于输出模式并且延时时间结束,当改变设定值以后要改变输出电压
 801007e:	4b10      	ldr	r3, [pc, #64]	; (80100c0 <Load_enter+0x100>)
 8010080:	781b      	ldrb	r3, [r3, #0]
	{
		//power_on();
	}

	Cursor_Position=0;//光标复位
 8010082:	4b10      	ldr	r3, [pc, #64]	; (80100c4 <Load_enter+0x104>)
 8010084:	2200      	movs	r2, #0
 8010086:	701a      	strb	r2, [r3, #0]
	xyz.coordinates1=0;
 8010088:	4b06      	ldr	r3, [pc, #24]	; (80100a4 <Load_enter+0xe4>)
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]
	xyz.coordinates2=0;
 801008e:	4b05      	ldr	r3, [pc, #20]	; (80100a4 <Load_enter+0xe4>)
 8010090:	2200      	movs	r2, #0
 8010092:	605a      	str	r2, [r3, #4]
	xyz.coordinates3=0;
 8010094:	4b03      	ldr	r3, [pc, #12]	; (80100a4 <Load_enter+0xe4>)
 8010096:	2200      	movs	r2, #0
 8010098:	609a      	str	r2, [r3, #8]
	Cursor_flash_off();
 801009a:	f004 f979 	bl	8014390 <Cursor_flash_off>

}
 801009e:	46c0      	nop			; (mov r8, r8)
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bdb0      	pop	{r4, r5, r7, pc}
 80100a4:	200039f8 	.word	0x200039f8
 80100a8:	2000398d 	.word	0x2000398d
 80100ac:	40590000 	.word	0x40590000
 80100b0:	20003a10 	.word	0x20003a10
 80100b4:	20002fda 	.word	0x20002fda
 80100b8:	20003a38 	.word	0x20003a38
 80100bc:	20002fdc 	.word	0x20002fdc
 80100c0:	20003989 	.word	0x20003989
 80100c4:	2000398e 	.word	0x2000398e

080100c8 <Delay_enter>:

static void Delay_enter(void)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	af00      	add	r7, sp, #0

	Delay_h = (String_Delay[0] - '0') * 10 + (String_Delay[1] - '0');
 80100cc:	4b3d      	ldr	r3, [pc, #244]	; (80101c4 <Delay_enter+0xfc>)
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	3b30      	subs	r3, #48	; 0x30
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	1c1a      	adds	r2, r3, #0
 80100d6:	0092      	lsls	r2, r2, #2
 80100d8:	18d3      	adds	r3, r2, r3
 80100da:	18db      	adds	r3, r3, r3
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	4b39      	ldr	r3, [pc, #228]	; (80101c4 <Delay_enter+0xfc>)
 80100e0:	785b      	ldrb	r3, [r3, #1]
 80100e2:	18d3      	adds	r3, r2, r3
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	3b30      	subs	r3, #48	; 0x30
 80100e8:	b2da      	uxtb	r2, r3
 80100ea:	4b37      	ldr	r3, [pc, #220]	; (80101c8 <Delay_enter+0x100>)
 80100ec:	701a      	strb	r2, [r3, #0]
	Delay_m = (String_Delay[3] - '0') * 10 + (String_Delay[4] - '0');
 80100ee:	4b35      	ldr	r3, [pc, #212]	; (80101c4 <Delay_enter+0xfc>)
 80100f0:	78db      	ldrb	r3, [r3, #3]
 80100f2:	3b30      	subs	r3, #48	; 0x30
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	1c1a      	adds	r2, r3, #0
 80100f8:	0092      	lsls	r2, r2, #2
 80100fa:	18d3      	adds	r3, r2, r3
 80100fc:	18db      	adds	r3, r3, r3
 80100fe:	b2da      	uxtb	r2, r3
 8010100:	4b30      	ldr	r3, [pc, #192]	; (80101c4 <Delay_enter+0xfc>)
 8010102:	791b      	ldrb	r3, [r3, #4]
 8010104:	18d3      	adds	r3, r2, r3
 8010106:	b2db      	uxtb	r3, r3
 8010108:	3b30      	subs	r3, #48	; 0x30
 801010a:	b2da      	uxtb	r2, r3
 801010c:	4b2f      	ldr	r3, [pc, #188]	; (80101cc <Delay_enter+0x104>)
 801010e:	701a      	strb	r2, [r3, #0]
	Delay_s = (String_Delay[6] - '0') * 10 + (String_Delay[7] - '0');
 8010110:	4b2c      	ldr	r3, [pc, #176]	; (80101c4 <Delay_enter+0xfc>)
 8010112:	799b      	ldrb	r3, [r3, #6]
 8010114:	3b30      	subs	r3, #48	; 0x30
 8010116:	b2db      	uxtb	r3, r3
 8010118:	1c1a      	adds	r2, r3, #0
 801011a:	0092      	lsls	r2, r2, #2
 801011c:	18d3      	adds	r3, r2, r3
 801011e:	18db      	adds	r3, r3, r3
 8010120:	b2da      	uxtb	r2, r3
 8010122:	4b28      	ldr	r3, [pc, #160]	; (80101c4 <Delay_enter+0xfc>)
 8010124:	79db      	ldrb	r3, [r3, #7]
 8010126:	18d3      	adds	r3, r2, r3
 8010128:	b2db      	uxtb	r3, r3
 801012a:	3b30      	subs	r3, #48	; 0x30
 801012c:	b2da      	uxtb	r2, r3
 801012e:	4b28      	ldr	r3, [pc, #160]	; (80101d0 <Delay_enter+0x108>)
 8010130:	701a      	strb	r2, [r3, #0]
	if(Delay_h > 99) Delay_h = 99;
 8010132:	4b25      	ldr	r3, [pc, #148]	; (80101c8 <Delay_enter+0x100>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	2b63      	cmp	r3, #99	; 0x63
 8010138:	d902      	bls.n	8010140 <Delay_enter+0x78>
 801013a:	4b23      	ldr	r3, [pc, #140]	; (80101c8 <Delay_enter+0x100>)
 801013c:	2263      	movs	r2, #99	; 0x63
 801013e:	701a      	strb	r2, [r3, #0]
	if(Delay_m > 59) Delay_m = 59;
 8010140:	4b22      	ldr	r3, [pc, #136]	; (80101cc <Delay_enter+0x104>)
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b3b      	cmp	r3, #59	; 0x3b
 8010146:	d902      	bls.n	801014e <Delay_enter+0x86>
 8010148:	4b20      	ldr	r3, [pc, #128]	; (80101cc <Delay_enter+0x104>)
 801014a:	223b      	movs	r2, #59	; 0x3b
 801014c:	701a      	strb	r2, [r3, #0]
	if(Delay_s > 59) Delay_s = 59;
 801014e:	4b20      	ldr	r3, [pc, #128]	; (80101d0 <Delay_enter+0x108>)
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	2b3b      	cmp	r3, #59	; 0x3b
 8010154:	d902      	bls.n	801015c <Delay_enter+0x94>
 8010156:	4b1e      	ldr	r3, [pc, #120]	; (80101d0 <Delay_enter+0x108>)
 8010158:	223b      	movs	r2, #59	; 0x3b
 801015a:	701a      	strb	r2, [r3, #0]

	Keys_Encoder_Mode = Encoder_Mode;
 801015c:	4b1d      	ldr	r3, [pc, #116]	; (80101d4 <Delay_enter+0x10c>)
 801015e:	2201      	movs	r2, #1
 8010160:	701a      	strb	r2, [r3, #0]
	if((Delay_h == 0) && (Delay_m == 0) && (Delay_s == 0)) Delay_Function_On_Off = Delay_Function_Off;
 8010162:	4b19      	ldr	r3, [pc, #100]	; (80101c8 <Delay_enter+0x100>)
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d10b      	bne.n	8010182 <Delay_enter+0xba>
 801016a:	4b18      	ldr	r3, [pc, #96]	; (80101cc <Delay_enter+0x104>)
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d107      	bne.n	8010182 <Delay_enter+0xba>
 8010172:	4b17      	ldr	r3, [pc, #92]	; (80101d0 <Delay_enter+0x108>)
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d103      	bne.n	8010182 <Delay_enter+0xba>
 801017a:	4b17      	ldr	r3, [pc, #92]	; (80101d8 <Delay_enter+0x110>)
 801017c:	2200      	movs	r2, #0
 801017e:	701a      	strb	r2, [r3, #0]
 8010180:	e006      	b.n	8010190 <Delay_enter+0xc8>
	else if(Delay_Function_On_Off == Delay_Function_Off)   Delay_Function_On_Off = Delay_Function_On;
 8010182:	4b15      	ldr	r3, [pc, #84]	; (80101d8 <Delay_enter+0x110>)
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d102      	bne.n	8010190 <Delay_enter+0xc8>
 801018a:	4b13      	ldr	r3, [pc, #76]	; (80101d8 <Delay_enter+0x110>)
 801018c:	2201      	movs	r2, #1
 801018e:	701a      	strb	r2, [r3, #0]

	AT25_Save_Delay();
 8010190:	f7fc f952 	bl	800c438 <AT25_Save_Delay>

	Third_Menu_Flag=1;
 8010194:	4b11      	ldr	r3, [pc, #68]	; (80101dc <Delay_enter+0x114>)
 8010196:	2201      	movs	r2, #1
 8010198:	701a      	strb	r2, [r3, #0]

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 801019a:	4b11      	ldr	r3, [pc, #68]	; (80101e0 <Delay_enter+0x118>)
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	2b03      	cmp	r3, #3
 80101a0:	d103      	bne.n	80101aa <Delay_enter+0xe2>
 80101a2:	4b0f      	ldr	r3, [pc, #60]	; (80101e0 <Delay_enter+0x118>)
 80101a4:	2201      	movs	r2, #1
 80101a6:	609a      	str	r2, [r3, #8]
 80101a8:	e004      	b.n	80101b4 <Delay_enter+0xec>
	else xyz.coordinates3++;//完成后设定，进入下一级
 80101aa:	4b0d      	ldr	r3, [pc, #52]	; (80101e0 <Delay_enter+0x118>)
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	4b0b      	ldr	r3, [pc, #44]	; (80101e0 <Delay_enter+0x118>)
 80101b2:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 80101b4:	4b0b      	ldr	r3, [pc, #44]	; (80101e4 <Delay_enter+0x11c>)
 80101b6:	2206      	movs	r2, #6
 80101b8:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 80101ba:	f004 f91f 	bl	80143fc <Cursor_flash_on>

}
 80101be:	46c0      	nop			; (mov r8, r8)
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	20003014 	.word	0x20003014
 80101c8:	20003994 	.word	0x20003994
 80101cc:	20003995 	.word	0x20003995
 80101d0:	20003996 	.word	0x20003996
 80101d4:	20002fd4 	.word	0x20002fd4
 80101d8:	20002fe8 	.word	0x20002fe8
 80101dc:	20002fd2 	.word	0x20002fd2
 80101e0:	200039f8 	.word	0x200039f8
 80101e4:	2000398e 	.word	0x2000398e

080101e8 <Cycle_enter>:

static void Cycle_enter(void)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	af00      	add	r7, sp, #0
	//计算Cycle功能的导通和关断时间，加以限制并存储
	Cycle_On_s = (String_Cycle_On[0] - '0') * 1000 + (String_Cycle_On[1] - '0') * 100 + (String_Cycle_On[2] - '0') * 10 + (String_Cycle_On[3] - '0');
 80101ec:	4b8c      	ldr	r3, [pc, #560]	; (8010420 <Cycle_enter+0x238>)
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	3b30      	subs	r3, #48	; 0x30
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	22fa      	movs	r2, #250	; 0xfa
 80101f6:	0092      	lsls	r2, r2, #2
 80101f8:	4353      	muls	r3, r2
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	4b88      	ldr	r3, [pc, #544]	; (8010420 <Cycle_enter+0x238>)
 80101fe:	785b      	ldrb	r3, [r3, #1]
 8010200:	3b30      	subs	r3, #48	; 0x30
 8010202:	b29b      	uxth	r3, r3
 8010204:	2164      	movs	r1, #100	; 0x64
 8010206:	434b      	muls	r3, r1
 8010208:	b29b      	uxth	r3, r3
 801020a:	18d3      	adds	r3, r2, r3
 801020c:	b29a      	uxth	r2, r3
 801020e:	4b84      	ldr	r3, [pc, #528]	; (8010420 <Cycle_enter+0x238>)
 8010210:	789b      	ldrb	r3, [r3, #2]
 8010212:	3b30      	subs	r3, #48	; 0x30
 8010214:	b29b      	uxth	r3, r3
 8010216:	1c19      	adds	r1, r3, #0
 8010218:	0089      	lsls	r1, r1, #2
 801021a:	18cb      	adds	r3, r1, r3
 801021c:	18db      	adds	r3, r3, r3
 801021e:	b29b      	uxth	r3, r3
 8010220:	18d3      	adds	r3, r2, r3
 8010222:	b29a      	uxth	r2, r3
 8010224:	4b7e      	ldr	r3, [pc, #504]	; (8010420 <Cycle_enter+0x238>)
 8010226:	78db      	ldrb	r3, [r3, #3]
 8010228:	b29b      	uxth	r3, r3
 801022a:	18d3      	adds	r3, r2, r3
 801022c:	b29b      	uxth	r3, r3
 801022e:	3b30      	subs	r3, #48	; 0x30
 8010230:	b29a      	uxth	r2, r3
 8010232:	4b7c      	ldr	r3, [pc, #496]	; (8010424 <Cycle_enter+0x23c>)
 8010234:	801a      	strh	r2, [r3, #0]
	Cycle_On_ms = (String_Cycle_On[5] - '0') * 100 + (String_Cycle_On[6] - '0') * 10 + (String_Cycle_On[7] - '0');
 8010236:	4b7a      	ldr	r3, [pc, #488]	; (8010420 <Cycle_enter+0x238>)
 8010238:	795b      	ldrb	r3, [r3, #5]
 801023a:	3b30      	subs	r3, #48	; 0x30
 801023c:	b29b      	uxth	r3, r3
 801023e:	2264      	movs	r2, #100	; 0x64
 8010240:	4353      	muls	r3, r2
 8010242:	b29a      	uxth	r2, r3
 8010244:	4b76      	ldr	r3, [pc, #472]	; (8010420 <Cycle_enter+0x238>)
 8010246:	799b      	ldrb	r3, [r3, #6]
 8010248:	3b30      	subs	r3, #48	; 0x30
 801024a:	b29b      	uxth	r3, r3
 801024c:	1c19      	adds	r1, r3, #0
 801024e:	0089      	lsls	r1, r1, #2
 8010250:	18cb      	adds	r3, r1, r3
 8010252:	18db      	adds	r3, r3, r3
 8010254:	b29b      	uxth	r3, r3
 8010256:	18d3      	adds	r3, r2, r3
 8010258:	b29a      	uxth	r2, r3
 801025a:	4b71      	ldr	r3, [pc, #452]	; (8010420 <Cycle_enter+0x238>)
 801025c:	79db      	ldrb	r3, [r3, #7]
 801025e:	b29b      	uxth	r3, r3
 8010260:	18d3      	adds	r3, r2, r3
 8010262:	b29b      	uxth	r3, r3
 8010264:	3b30      	subs	r3, #48	; 0x30
 8010266:	b29a      	uxth	r2, r3
 8010268:	4b6f      	ldr	r3, [pc, #444]	; (8010428 <Cycle_enter+0x240>)
 801026a:	801a      	strh	r2, [r3, #0]

	Cycle_Close_s = (String_Cycle_Close[0] - '0') * 1000 + (String_Cycle_Close[1] - '0') * 100 + (String_Cycle_Close[2] - '0') * 10 + (String_Cycle_Close[3] - '0');
 801026c:	4b6f      	ldr	r3, [pc, #444]	; (801042c <Cycle_enter+0x244>)
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	3b30      	subs	r3, #48	; 0x30
 8010272:	b29b      	uxth	r3, r3
 8010274:	22fa      	movs	r2, #250	; 0xfa
 8010276:	0092      	lsls	r2, r2, #2
 8010278:	4353      	muls	r3, r2
 801027a:	b29a      	uxth	r2, r3
 801027c:	4b6b      	ldr	r3, [pc, #428]	; (801042c <Cycle_enter+0x244>)
 801027e:	785b      	ldrb	r3, [r3, #1]
 8010280:	3b30      	subs	r3, #48	; 0x30
 8010282:	b29b      	uxth	r3, r3
 8010284:	2164      	movs	r1, #100	; 0x64
 8010286:	434b      	muls	r3, r1
 8010288:	b29b      	uxth	r3, r3
 801028a:	18d3      	adds	r3, r2, r3
 801028c:	b29a      	uxth	r2, r3
 801028e:	4b67      	ldr	r3, [pc, #412]	; (801042c <Cycle_enter+0x244>)
 8010290:	789b      	ldrb	r3, [r3, #2]
 8010292:	3b30      	subs	r3, #48	; 0x30
 8010294:	b29b      	uxth	r3, r3
 8010296:	1c19      	adds	r1, r3, #0
 8010298:	0089      	lsls	r1, r1, #2
 801029a:	18cb      	adds	r3, r1, r3
 801029c:	18db      	adds	r3, r3, r3
 801029e:	b29b      	uxth	r3, r3
 80102a0:	18d3      	adds	r3, r2, r3
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	4b61      	ldr	r3, [pc, #388]	; (801042c <Cycle_enter+0x244>)
 80102a6:	78db      	ldrb	r3, [r3, #3]
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	18d3      	adds	r3, r2, r3
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	3b30      	subs	r3, #48	; 0x30
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	4b5f      	ldr	r3, [pc, #380]	; (8010430 <Cycle_enter+0x248>)
 80102b4:	801a      	strh	r2, [r3, #0]
	Cycle_Close_ms = (String_Cycle_Close[5] - '0') * 100 + (String_Cycle_Close[6] - '0') * 10 + (String_Cycle_Close[7] - '0');
 80102b6:	4b5d      	ldr	r3, [pc, #372]	; (801042c <Cycle_enter+0x244>)
 80102b8:	795b      	ldrb	r3, [r3, #5]
 80102ba:	3b30      	subs	r3, #48	; 0x30
 80102bc:	b29b      	uxth	r3, r3
 80102be:	2264      	movs	r2, #100	; 0x64
 80102c0:	4353      	muls	r3, r2
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	4b59      	ldr	r3, [pc, #356]	; (801042c <Cycle_enter+0x244>)
 80102c6:	799b      	ldrb	r3, [r3, #6]
 80102c8:	3b30      	subs	r3, #48	; 0x30
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	1c19      	adds	r1, r3, #0
 80102ce:	0089      	lsls	r1, r1, #2
 80102d0:	18cb      	adds	r3, r1, r3
 80102d2:	18db      	adds	r3, r3, r3
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	18d3      	adds	r3, r2, r3
 80102d8:	b29a      	uxth	r2, r3
 80102da:	4b54      	ldr	r3, [pc, #336]	; (801042c <Cycle_enter+0x244>)
 80102dc:	79db      	ldrb	r3, [r3, #7]
 80102de:	b29b      	uxth	r3, r3
 80102e0:	18d3      	adds	r3, r2, r3
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	3b30      	subs	r3, #48	; 0x30
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	4b52      	ldr	r3, [pc, #328]	; (8010434 <Cycle_enter+0x24c>)
 80102ea:	801a      	strh	r2, [r3, #0]
	//最短也是5Hz的波
	if ((Cycle_On_s == 0) && (Cycle_On_ms > 0))
 80102ec:	4b4d      	ldr	r3, [pc, #308]	; (8010424 <Cycle_enter+0x23c>)
 80102ee:	881b      	ldrh	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d109      	bne.n	8010308 <Cycle_enter+0x120>
 80102f4:	4b4c      	ldr	r3, [pc, #304]	; (8010428 <Cycle_enter+0x240>)
 80102f6:	881b      	ldrh	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d005      	beq.n	8010308 <Cycle_enter+0x120>
	{
		Cycle_On_s = 1;
 80102fc:	4b49      	ldr	r3, [pc, #292]	; (8010424 <Cycle_enter+0x23c>)
 80102fe:	2201      	movs	r2, #1
 8010300:	801a      	strh	r2, [r3, #0]
		Cycle_On_ms = 0;
 8010302:	4b49      	ldr	r3, [pc, #292]	; (8010428 <Cycle_enter+0x240>)
 8010304:	2200      	movs	r2, #0
 8010306:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_On_s > 9999) Cycle_On_s = 9999;
 8010308:	4b46      	ldr	r3, [pc, #280]	; (8010424 <Cycle_enter+0x23c>)
 801030a:	881b      	ldrh	r3, [r3, #0]
 801030c:	4a4a      	ldr	r2, [pc, #296]	; (8010438 <Cycle_enter+0x250>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d902      	bls.n	8010318 <Cycle_enter+0x130>
 8010312:	4b44      	ldr	r3, [pc, #272]	; (8010424 <Cycle_enter+0x23c>)
 8010314:	4a48      	ldr	r2, [pc, #288]	; (8010438 <Cycle_enter+0x250>)
 8010316:	801a      	strh	r2, [r3, #0]
	if (Cycle_On_ms > 1000) Cycle_On_ms = 1000;
 8010318:	4b43      	ldr	r3, [pc, #268]	; (8010428 <Cycle_enter+0x240>)
 801031a:	881a      	ldrh	r2, [r3, #0]
 801031c:	23fa      	movs	r3, #250	; 0xfa
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	429a      	cmp	r2, r3
 8010322:	d903      	bls.n	801032c <Cycle_enter+0x144>
 8010324:	4b40      	ldr	r3, [pc, #256]	; (8010428 <Cycle_enter+0x240>)
 8010326:	22fa      	movs	r2, #250	; 0xfa
 8010328:	0092      	lsls	r2, r2, #2
 801032a:	801a      	strh	r2, [r3, #0]
	if ((Cycle_Close_s == 0) && (Cycle_Close_ms > 0))
 801032c:	4b40      	ldr	r3, [pc, #256]	; (8010430 <Cycle_enter+0x248>)
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d109      	bne.n	8010348 <Cycle_enter+0x160>
 8010334:	4b3f      	ldr	r3, [pc, #252]	; (8010434 <Cycle_enter+0x24c>)
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d005      	beq.n	8010348 <Cycle_enter+0x160>
	{
		Cycle_Close_s = 1;
 801033c:	4b3c      	ldr	r3, [pc, #240]	; (8010430 <Cycle_enter+0x248>)
 801033e:	2201      	movs	r2, #1
 8010340:	801a      	strh	r2, [r3, #0]
		Cycle_Close_ms = 0;
 8010342:	4b3c      	ldr	r3, [pc, #240]	; (8010434 <Cycle_enter+0x24c>)
 8010344:	2200      	movs	r2, #0
 8010346:	801a      	strh	r2, [r3, #0]
	}
	if (Cycle_Close_s > 9999) Cycle_Close_s = 9999;
 8010348:	4b39      	ldr	r3, [pc, #228]	; (8010430 <Cycle_enter+0x248>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	4a3a      	ldr	r2, [pc, #232]	; (8010438 <Cycle_enter+0x250>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d902      	bls.n	8010358 <Cycle_enter+0x170>
 8010352:	4b37      	ldr	r3, [pc, #220]	; (8010430 <Cycle_enter+0x248>)
 8010354:	4a38      	ldr	r2, [pc, #224]	; (8010438 <Cycle_enter+0x250>)
 8010356:	801a      	strh	r2, [r3, #0]
	if (Cycle_Close_ms > 1000) Cycle_On_ms = 1000;
 8010358:	4b36      	ldr	r3, [pc, #216]	; (8010434 <Cycle_enter+0x24c>)
 801035a:	881a      	ldrh	r2, [r3, #0]
 801035c:	23fa      	movs	r3, #250	; 0xfa
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	429a      	cmp	r2, r3
 8010362:	d903      	bls.n	801036c <Cycle_enter+0x184>
 8010364:	4b30      	ldr	r3, [pc, #192]	; (8010428 <Cycle_enter+0x240>)
 8010366:	22fa      	movs	r2, #250	; 0xfa
 8010368:	0092      	lsls	r2, r2, #2
 801036a:	801a      	strh	r2, [r3, #0]
	//判断是否为Cycle功能输出模式
	if(((Cycle_On_s == 0) && (Cycle_On_ms == 0)) || ((Cycle_Close_s == 0) && (Cycle_Close_ms == 0)))
 801036c:	4b2d      	ldr	r3, [pc, #180]	; (8010424 <Cycle_enter+0x23c>)
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d103      	bne.n	801037c <Cycle_enter+0x194>
 8010374:	4b2c      	ldr	r3, [pc, #176]	; (8010428 <Cycle_enter+0x240>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d007      	beq.n	801038c <Cycle_enter+0x1a4>
 801037c:	4b2c      	ldr	r3, [pc, #176]	; (8010430 <Cycle_enter+0x248>)
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d10a      	bne.n	801039a <Cycle_enter+0x1b2>
 8010384:	4b2b      	ldr	r3, [pc, #172]	; (8010434 <Cycle_enter+0x24c>)
 8010386:	881b      	ldrh	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d106      	bne.n	801039a <Cycle_enter+0x1b2>
	{
		Cycle_Function_On_Off = Cycle_Function_Off;
 801038c:	4b2b      	ldr	r3, [pc, #172]	; (801043c <Cycle_enter+0x254>)
 801038e:	2200      	movs	r2, #0
 8010390:	701a      	strb	r2, [r3, #0]
		CYCLE_NOT_CYCLE = NOT_CYCLE;
 8010392:	4b2b      	ldr	r3, [pc, #172]	; (8010440 <Cycle_enter+0x258>)
 8010394:	22f0      	movs	r2, #240	; 0xf0
 8010396:	701a      	strb	r2, [r3, #0]
 8010398:	e015      	b.n	80103c6 <Cycle_enter+0x1de>
	}
	else if((Cycle_On_s != 0) || (Cycle_On_ms != 0) || (Cycle_Close_s != 0) || (Cycle_Close_ms != 0))
 801039a:	4b22      	ldr	r3, [pc, #136]	; (8010424 <Cycle_enter+0x23c>)
 801039c:	881b      	ldrh	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d10b      	bne.n	80103ba <Cycle_enter+0x1d2>
 80103a2:	4b21      	ldr	r3, [pc, #132]	; (8010428 <Cycle_enter+0x240>)
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d107      	bne.n	80103ba <Cycle_enter+0x1d2>
 80103aa:	4b21      	ldr	r3, [pc, #132]	; (8010430 <Cycle_enter+0x248>)
 80103ac:	881b      	ldrh	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d103      	bne.n	80103ba <Cycle_enter+0x1d2>
 80103b2:	4b20      	ldr	r3, [pc, #128]	; (8010434 <Cycle_enter+0x24c>)
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d005      	beq.n	80103c6 <Cycle_enter+0x1de>
	{
		Cycle_Function_On_Off = Cycle_Function_On;
 80103ba:	4b20      	ldr	r3, [pc, #128]	; (801043c <Cycle_enter+0x254>)
 80103bc:	2201      	movs	r2, #1
 80103be:	701a      	strb	r2, [r3, #0]
		CYCLE_NOT_CYCLE = CYCLE;
 80103c0:	4b1f      	ldr	r3, [pc, #124]	; (8010440 <Cycle_enter+0x258>)
 80103c2:	220f      	movs	r2, #15
 80103c4:	701a      	strb	r2, [r3, #0]
	}
	AT25_Save_Cycle();
 80103c6:	f7fc f869 	bl	800c49c <AT25_Save_Cycle>

	//输出
	if(OUTPUT_NOT_OUTPUT == OUTPUT)
 80103ca:	4b1e      	ldr	r3, [pc, #120]	; (8010444 <Cycle_enter+0x25c>)
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d111      	bne.n	80103f6 <Cycle_enter+0x20e>
	{
		/*先输出零，延时一段时间后开始循环输出*/
		Output_Zero();
 80103d2:	f7fc fb4f 	bl	800ca74 <Output_Zero>
		if(Delay_Function_On_Off == Delay_Function_On) TIM16_DELAY_ON();
 80103d6:	4b1c      	ldr	r3, [pc, #112]	; (8010448 <Cycle_enter+0x260>)
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d102      	bne.n	80103e4 <Cycle_enter+0x1fc>
 80103de:	f001 fa85 	bl	80118ec <TIM16_DELAY_ON>
 80103e2:	e008      	b.n	80103f6 <Cycle_enter+0x20e>
		else if(Cycle_Function_On_Off == Cycle_Function_On) TIM17_CYCLE_ON();
 80103e4:	4b15      	ldr	r3, [pc, #84]	; (801043c <Cycle_enter+0x254>)
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d102      	bne.n	80103f2 <Cycle_enter+0x20a>
 80103ec:	f001 fae2 	bl	80119b4 <TIM17_CYCLE_ON>
 80103f0:	e001      	b.n	80103f6 <Cycle_enter+0x20e>
		else power_on();//直接输出
 80103f2:	f7fc fb15 	bl	800ca20 <power_on>
	}

	if(xyz.coordinates3==3)	xyz.coordinates3=1;
 80103f6:	4b15      	ldr	r3, [pc, #84]	; (801044c <Cycle_enter+0x264>)
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	2b03      	cmp	r3, #3
 80103fc:	d103      	bne.n	8010406 <Cycle_enter+0x21e>
 80103fe:	4b13      	ldr	r3, [pc, #76]	; (801044c <Cycle_enter+0x264>)
 8010400:	2201      	movs	r2, #1
 8010402:	609a      	str	r2, [r3, #8]
 8010404:	e004      	b.n	8010410 <Cycle_enter+0x228>
	else xyz.coordinates3++;//完成后设定，进入下一级
 8010406:	4b11      	ldr	r3, [pc, #68]	; (801044c <Cycle_enter+0x264>)
 8010408:	689b      	ldr	r3, [r3, #8]
 801040a:	1c5a      	adds	r2, r3, #1
 801040c:	4b0f      	ldr	r3, [pc, #60]	; (801044c <Cycle_enter+0x264>)
 801040e:	609a      	str	r2, [r3, #8]

	Cursor_Position=6;//光标复位
 8010410:	4b0f      	ldr	r3, [pc, #60]	; (8010450 <Cycle_enter+0x268>)
 8010412:	2206      	movs	r2, #6
 8010414:	701a      	strb	r2, [r3, #0]
	Cursor_flash_on();
 8010416:	f003 fff1 	bl	80143fc <Cursor_flash_on>
}
 801041a:	46c0      	nop			; (mov r8, r8)
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	20002ffc 	.word	0x20002ffc
 8010424:	20003990 	.word	0x20003990
 8010428:	20002fd6 	.word	0x20002fd6
 801042c:	20003008 	.word	0x20003008
 8010430:	20003992 	.word	0x20003992
 8010434:	20002fd8 	.word	0x20002fd8
 8010438:	0000270f 	.word	0x0000270f
 801043c:	200039e0 	.word	0x200039e0
 8010440:	20002fd0 	.word	0x20002fd0
 8010444:	20003989 	.word	0x20003989
 8010448:	20002fe8 	.word	0x20002fe8
 801044c:	200039f8 	.word	0x200039f8
 8010450:	2000398e 	.word	0x2000398e

08010454 <Reset_enter>:

static void Reset_enter(void)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	af00      	add	r7, sp, #0

	AT25_Reset();
 8010458:	f7fc f948 	bl	800c6ec <AT25_Reset>
	DAC_Cmd_send(1,11,0);
 801045c:	2200      	movs	r2, #0
 801045e:	210b      	movs	r1, #11
 8010460:	2001      	movs	r0, #1
 8010462:	f7fc fa09 	bl	800c878 <DAC_Cmd_send>
	HAL_Delay(100);//等待子板复位
 8010466:	2064      	movs	r0, #100	; 0x64
 8010468:	f7f4 fee2 	bl	8005230 <HAL_Delay>
	NVIC_SystemReset();
 801046c:	f7fd ff14 	bl	800e298 <__NVIC_SystemReset>

08010470 <Sample_show_enter>:
	Cursor_Position=6;//光标复位
	Cursor_flash_off();
}

static void Sample_show_enter(void)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0

	static uint8_t count=1;
	if(count==1)
 8010474:	4b0f      	ldr	r3, [pc, #60]	; (80104b4 <Sample_show_enter+0x44>)
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d108      	bne.n	801048e <Sample_show_enter+0x1e>
	{
		count=2;
 801047c:	4b0d      	ldr	r3, [pc, #52]	; (80104b4 <Sample_show_enter+0x44>)
 801047e:	2202      	movs	r2, #2
 8010480:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x00);
 8010482:	2200      	movs	r2, #0
 8010484:	2102      	movs	r1, #2
 8010486:	2001      	movs	r0, #1
 8010488:	f7fc f9f6 	bl	800c878 <DAC_Cmd_send>
 801048c:	e00b      	b.n	80104a6 <Sample_show_enter+0x36>
	}
	else if(count==2)
 801048e:	4b09      	ldr	r3, [pc, #36]	; (80104b4 <Sample_show_enter+0x44>)
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	2b02      	cmp	r3, #2
 8010494:	d107      	bne.n	80104a6 <Sample_show_enter+0x36>
	{
		count=1;
 8010496:	4b07      	ldr	r3, [pc, #28]	; (80104b4 <Sample_show_enter+0x44>)
 8010498:	2201      	movs	r2, #1
 801049a:	701a      	strb	r2, [r3, #0]
		DAC_Cmd_send(1,2,0x01);
 801049c:	2201      	movs	r2, #1
 801049e:	2102      	movs	r1, #2
 80104a0:	2001      	movs	r0, #1
 80104a2:	f7fc f9e9 	bl	800c878 <DAC_Cmd_send>
	}
	Shift_Not_Shift=Not_Shift;
 80104a6:	4b04      	ldr	r3, [pc, #16]	; (80104b8 <Sample_show_enter+0x48>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	701a      	strb	r2, [r3, #0]
}
 80104ac:	46c0      	nop			; (mov r8, r8)
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	46c0      	nop			; (mov r8, r8)
 80104b4:	20002fe4 	.word	0x20002fe4
 80104b8:	20003987 	.word	0x20003987

080104bc <Key_Enter>:
 * @brief  按键Enter的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Enter(void)
{
 80104bc:	b5b0      	push	{r4, r5, r7, lr}
 80104be:	af00      	add	r7, sp, #0
	if(LOCK_UNLOCK == UNLOCK)
 80104c0:	4bb7      	ldr	r3, [pc, #732]	; (80107a0 <Key_Enter+0x2e4>)
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d000      	beq.n	80104ca <Key_Enter+0xe>
 80104c8:	e1d9      	b.n	801087e <Key_Enter+0x3c2>
	{
		if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 80104ca:	4bb6      	ldr	r3, [pc, #728]	; (80107a4 <Key_Enter+0x2e8>)
 80104cc:	681b      	ldr	r3, [r3, #0]
			if(Inner_Mode==ENABLE) Inner_Mode=DISABLE;
			else if(Inner_Mode==DISABLE) Inner_Mode=ENABLE;
			*/
		}
		/*first menu enter second menu*/
		if( xyz.coordinates1==1 && (xyz.coordinates3==0) )//当处于第一级菜单,按下enter进入二级菜单
 80104ce:	4bb5      	ldr	r3, [pc, #724]	; (80107a4 <Key_Enter+0x2e8>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d106      	bne.n	80104e4 <Key_Enter+0x28>
 80104d6:	4bb3      	ldr	r3, [pc, #716]	; (80107a4 <Key_Enter+0x2e8>)
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d102      	bne.n	80104e4 <Key_Enter+0x28>
		{
			enter_second_menu();
 80104de:	f7ff fad3 	bl	800fa88 <enter_second_menu>
			return;
 80104e2:	e1cc      	b.n	801087e <Key_Enter+0x3c2>
		}
		/*I——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0) )//I_set 按下enter
 80104e4:	4baf      	ldr	r3, [pc, #700]	; (80107a4 <Key_Enter+0x2e8>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	d109      	bne.n	8010500 <Key_Enter+0x44>
 80104ec:	4bad      	ldr	r3, [pc, #692]	; (80107a4 <Key_Enter+0x2e8>)
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d105      	bne.n	8010500 <Key_Enter+0x44>
 80104f4:	4bab      	ldr	r3, [pc, #684]	; (80107a4 <Key_Enter+0x2e8>)
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d101      	bne.n	8010500 <Key_Enter+0x44>
		{
			ISET_enter();
 80104fc:	f7ff faf4 	bl	800fae8 <ISET_enter>
		}
		/*V——SET enter*/
		if( (xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0) )//V_set 按下enter
 8010500:	4ba8      	ldr	r3, [pc, #672]	; (80107a4 <Key_Enter+0x2e8>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b02      	cmp	r3, #2
 8010506:	d109      	bne.n	801051c <Key_Enter+0x60>
 8010508:	4ba6      	ldr	r3, [pc, #664]	; (80107a4 <Key_Enter+0x2e8>)
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	2b02      	cmp	r3, #2
 801050e:	d105      	bne.n	801051c <Key_Enter+0x60>
 8010510:	4ba4      	ldr	r3, [pc, #656]	; (80107a4 <Key_Enter+0x2e8>)
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d101      	bne.n	801051c <Key_Enter+0x60>
		{
			VSET_enter();
 8010518:	f7ff fb90 	bl	800fc3c <VSET_enter>
		}
		/*AD GAIN FRQ enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1))//GAIN
 801051c:	4ba1      	ldr	r3, [pc, #644]	; (80107a4 <Key_Enter+0x2e8>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d109      	bne.n	8010538 <Key_Enter+0x7c>
 8010524:	4b9f      	ldr	r3, [pc, #636]	; (80107a4 <Key_Enter+0x2e8>)
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	2b05      	cmp	r3, #5
 801052a:	d105      	bne.n	8010538 <Key_Enter+0x7c>
 801052c:	4b9d      	ldr	r3, [pc, #628]	; (80107a4 <Key_Enter+0x2e8>)
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	2b01      	cmp	r3, #1
 8010532:	d101      	bne.n	8010538 <Key_Enter+0x7c>
		{
			Password_enter();
 8010534:	f7ff fc1c 	bl	800fd70 <Password_enter>
		}
		/*rate set*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1) )//i rate
 8010538:	4b9a      	ldr	r3, [pc, #616]	; (80107a4 <Key_Enter+0x2e8>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d109      	bne.n	8010554 <Key_Enter+0x98>
 8010540:	4b98      	ldr	r3, [pc, #608]	; (80107a4 <Key_Enter+0x2e8>)
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	2b02      	cmp	r3, #2
 8010546:	d105      	bne.n	8010554 <Key_Enter+0x98>
 8010548:	4b96      	ldr	r3, [pc, #600]	; (80107a4 <Key_Enter+0x2e8>)
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d101      	bne.n	8010554 <Key_Enter+0x98>
		{
			IRateSET_enter();
 8010550:	f7ff fc6c 	bl	800fe2c <IRateSET_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2) )//v rate
 8010554:	4b93      	ldr	r3, [pc, #588]	; (80107a4 <Key_Enter+0x2e8>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b01      	cmp	r3, #1
 801055a:	d109      	bne.n	8010570 <Key_Enter+0xb4>
 801055c:	4b91      	ldr	r3, [pc, #580]	; (80107a4 <Key_Enter+0x2e8>)
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	2b02      	cmp	r3, #2
 8010562:	d105      	bne.n	8010570 <Key_Enter+0xb4>
 8010564:	4b8f      	ldr	r3, [pc, #572]	; (80107a4 <Key_Enter+0x2e8>)
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	2b02      	cmp	r3, #2
 801056a:	d101      	bne.n	8010570 <Key_Enter+0xb4>
		{
			VRateSET_enter();
 801056c:	f7ff fc94 	bl	800fe98 <VRateSET_enter>
		}
		/*CYCLE DELAY enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3==1) )//delay third menu enter
 8010570:	4b8c      	ldr	r3, [pc, #560]	; (80107a4 <Key_Enter+0x2e8>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	2b01      	cmp	r3, #1
 8010576:	d109      	bne.n	801058c <Key_Enter+0xd0>
 8010578:	4b8a      	ldr	r3, [pc, #552]	; (80107a4 <Key_Enter+0x2e8>)
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	2b04      	cmp	r3, #4
 801057e:	d105      	bne.n	801058c <Key_Enter+0xd0>
 8010580:	4b88      	ldr	r3, [pc, #544]	; (80107a4 <Key_Enter+0x2e8>)
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	2b01      	cmp	r3, #1
 8010586:	d101      	bne.n	801058c <Key_Enter+0xd0>
		{
			Delay_enter();
 8010588:	f7ff fd9e 	bl	80100c8 <Delay_enter>
		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==4) && ((xyz.coordinates3==2) || (xyz.coordinates3==3)))//cycle third menu enter
 801058c:	4b85      	ldr	r3, [pc, #532]	; (80107a4 <Key_Enter+0x2e8>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d10d      	bne.n	80105b0 <Key_Enter+0xf4>
 8010594:	4b83      	ldr	r3, [pc, #524]	; (80107a4 <Key_Enter+0x2e8>)
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	2b04      	cmp	r3, #4
 801059a:	d109      	bne.n	80105b0 <Key_Enter+0xf4>
 801059c:	4b81      	ldr	r3, [pc, #516]	; (80107a4 <Key_Enter+0x2e8>)
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d003      	beq.n	80105ac <Key_Enter+0xf0>
 80105a4:	4b7f      	ldr	r3, [pc, #508]	; (80107a4 <Key_Enter+0x2e8>)
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	2b03      	cmp	r3, #3
 80105aa:	d101      	bne.n	80105b0 <Key_Enter+0xf4>
		{
			Cycle_enter();
 80105ac:	f7ff fe1c 	bl	80101e8 <Cycle_enter>
		}
		/*Save  enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 80105b0:	4b7c      	ldr	r3, [pc, #496]	; (80107a4 <Key_Enter+0x2e8>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b03      	cmp	r3, #3
 80105b6:	d109      	bne.n	80105cc <Key_Enter+0x110>
 80105b8:	4b7a      	ldr	r3, [pc, #488]	; (80107a4 <Key_Enter+0x2e8>)
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d105      	bne.n	80105cc <Key_Enter+0x110>
 80105c0:	4b78      	ldr	r3, [pc, #480]	; (80107a4 <Key_Enter+0x2e8>)
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d001      	beq.n	80105cc <Key_Enter+0x110>
		{
			Save_enter();
 80105c8:	f7ff fc9e 	bl	800ff08 <Save_enter>
		}
		/*load enter*/
		if((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 80105cc:	4b75      	ldr	r3, [pc, #468]	; (80107a4 <Key_Enter+0x2e8>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b03      	cmp	r3, #3
 80105d2:	d109      	bne.n	80105e8 <Key_Enter+0x12c>
 80105d4:	4b73      	ldr	r3, [pc, #460]	; (80107a4 <Key_Enter+0x2e8>)
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	2b02      	cmp	r3, #2
 80105da:	d105      	bne.n	80105e8 <Key_Enter+0x12c>
 80105dc:	4b71      	ldr	r3, [pc, #452]	; (80107a4 <Key_Enter+0x2e8>)
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d001      	beq.n	80105e8 <Key_Enter+0x12c>
		{
			Load_enter();
 80105e4:	f7ff fcec 	bl	800ffc0 <Load_enter>
		}
		/*reset enter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==1) && (xyz.coordinates3==1))
 80105e8:	4b6e      	ldr	r3, [pc, #440]	; (80107a4 <Key_Enter+0x2e8>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d109      	bne.n	8010604 <Key_Enter+0x148>
 80105f0:	4b6c      	ldr	r3, [pc, #432]	; (80107a4 <Key_Enter+0x2e8>)
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d105      	bne.n	8010604 <Key_Enter+0x148>
 80105f8:	4b6a      	ldr	r3, [pc, #424]	; (80107a4 <Key_Enter+0x2e8>)
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d101      	bne.n	8010604 <Key_Enter+0x148>
		{
			Reset_enter();
 8010600:	f7ff ff28 	bl	8010454 <Reset_enter>
		}
		/*light level ennter*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3==1))
 8010604:	4b67      	ldr	r3, [pc, #412]	; (80107a4 <Key_Enter+0x2e8>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d109      	bne.n	8010620 <Key_Enter+0x164>
 801060c:	4b65      	ldr	r3, [pc, #404]	; (80107a4 <Key_Enter+0x2e8>)
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	2b06      	cmp	r3, #6
 8010612:	d105      	bne.n	8010620 <Key_Enter+0x164>
 8010614:	4b63      	ldr	r3, [pc, #396]	; (80107a4 <Key_Enter+0x2e8>)
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	2b01      	cmp	r3, #1
 801061a:	d101      	bne.n	8010620 <Key_Enter+0x164>
		{
			Cursor_flash_off();
 801061c:	f003 feb8 	bl	8014390 <Cursor_flash_off>
		}

		if(Shift_Not_Shift==Shift && (xyz.coordinates1==0 && xyz.coordinates2==0 && xyz.coordinates3==0))
 8010620:	4b61      	ldr	r3, [pc, #388]	; (80107a8 <Key_Enter+0x2ec>)
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	2b01      	cmp	r3, #1
 8010626:	d10d      	bne.n	8010644 <Key_Enter+0x188>
 8010628:	4b5e      	ldr	r3, [pc, #376]	; (80107a4 <Key_Enter+0x2e8>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d109      	bne.n	8010644 <Key_Enter+0x188>
 8010630:	4b5c      	ldr	r3, [pc, #368]	; (80107a4 <Key_Enter+0x2e8>)
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d105      	bne.n	8010644 <Key_Enter+0x188>
 8010638:	4b5a      	ldr	r3, [pc, #360]	; (80107a4 <Key_Enter+0x2e8>)
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d101      	bne.n	8010644 <Key_Enter+0x188>
		{
			Sample_show_enter();
 8010640:	f7ff ff16 	bl	8010470 <Sample_show_enter>
		}
		/*gain frq*/
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==2))
 8010644:	4b57      	ldr	r3, [pc, #348]	; (80107a4 <Key_Enter+0x2e8>)
 8010646:	681b      	ldr	r3, [r3, #0]
		{
			//Frq_enter();

		}
		if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==3))
 8010648:	4b56      	ldr	r3, [pc, #344]	; (80107a4 <Key_Enter+0x2e8>)
 801064a:	681b      	ldr	r3, [r3, #0]
			Cursor_flash_off();
			*/
		}
		/*V calibration*/
		//此处采用两点法校准
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==1))
 801064c:	4b55      	ldr	r3, [pc, #340]	; (80107a4 <Key_Enter+0x2e8>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	2b01      	cmp	r3, #1
 8010652:	d123      	bne.n	801069c <Key_Enter+0x1e0>
 8010654:	4b53      	ldr	r3, [pc, #332]	; (80107a4 <Key_Enter+0x2e8>)
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	2b08      	cmp	r3, #8
 801065a:	d11f      	bne.n	801069c <Key_Enter+0x1e0>
 801065c:	4b51      	ldr	r3, [pc, #324]	; (80107a4 <Key_Enter+0x2e8>)
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d11b      	bne.n	801069c <Key_Enter+0x1e0>
		{
			data_V[0]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 8010664:	4b51      	ldr	r3, [pc, #324]	; (80107ac <Key_Enter+0x2f0>)
 8010666:	78db      	ldrb	r3, [r3, #3]
 8010668:	b29b      	uxth	r3, r3
 801066a:	021b      	lsls	r3, r3, #8
 801066c:	b29a      	uxth	r2, r3
 801066e:	4b4f      	ldr	r3, [pc, #316]	; (80107ac <Key_Enter+0x2f0>)
 8010670:	791b      	ldrb	r3, [r3, #4]
 8010672:	b29b      	uxth	r3, r3
 8010674:	18d3      	adds	r3, r2, r3
 8010676:	b29a      	uxth	r2, r3
 8010678:	4b4d      	ldr	r3, [pc, #308]	; (80107b0 <Key_Enter+0x2f4>)
 801067a:	801a      	strh	r2, [r3, #0]
			Vref[0]=String_To_Float(String_Calibration_Vlotage);
 801067c:	4b4d      	ldr	r3, [pc, #308]	; (80107b4 <Key_Enter+0x2f8>)
 801067e:	0018      	movs	r0, r3
 8010680:	f7fd ff3c 	bl	800e4fc <String_To_Float>
 8010684:	1c02      	adds	r2, r0, #0
 8010686:	4b4c      	ldr	r3, [pc, #304]	; (80107b8 <Key_Enter+0x2fc>)
 8010688:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 801068a:	4b46      	ldr	r3, [pc, #280]	; (80107a4 <Key_Enter+0x2e8>)
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	4b44      	ldr	r3, [pc, #272]	; (80107a4 <Key_Enter+0x2e8>)
 8010692:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 8010694:	4b49      	ldr	r3, [pc, #292]	; (80107bc <Key_Enter+0x300>)
 8010696:	2209      	movs	r2, #9
 8010698:	701a      	strb	r2, [r3, #0]
			return;
 801069a:	e0f0      	b.n	801087e <Key_Enter+0x3c2>
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==2))
 801069c:	4b41      	ldr	r3, [pc, #260]	; (80107a4 <Key_Enter+0x2e8>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d158      	bne.n	8010756 <Key_Enter+0x29a>
 80106a4:	4b3f      	ldr	r3, [pc, #252]	; (80107a4 <Key_Enter+0x2e8>)
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	2b08      	cmp	r3, #8
 80106aa:	d154      	bne.n	8010756 <Key_Enter+0x29a>
 80106ac:	4b3d      	ldr	r3, [pc, #244]	; (80107a4 <Key_Enter+0x2e8>)
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	2b02      	cmp	r3, #2
 80106b2:	d150      	bne.n	8010756 <Key_Enter+0x29a>
		{
			data_V[1]=Uart2_Receive_buffer[3]*256+Uart2_Receive_buffer[4];
 80106b4:	4b3d      	ldr	r3, [pc, #244]	; (80107ac <Key_Enter+0x2f0>)
 80106b6:	78db      	ldrb	r3, [r3, #3]
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	021b      	lsls	r3, r3, #8
 80106bc:	b29a      	uxth	r2, r3
 80106be:	4b3b      	ldr	r3, [pc, #236]	; (80107ac <Key_Enter+0x2f0>)
 80106c0:	791b      	ldrb	r3, [r3, #4]
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	18d3      	adds	r3, r2, r3
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	4b39      	ldr	r3, [pc, #228]	; (80107b0 <Key_Enter+0x2f4>)
 80106ca:	805a      	strh	r2, [r3, #2]
			Vref[1]=String_To_Float(String_Calibration_Vlotage);
 80106cc:	4b39      	ldr	r3, [pc, #228]	; (80107b4 <Key_Enter+0x2f8>)
 80106ce:	0018      	movs	r0, r3
 80106d0:	f7fd ff14 	bl	800e4fc <String_To_Float>
 80106d4:	1c02      	adds	r2, r0, #0
 80106d6:	4b38      	ldr	r3, [pc, #224]	; (80107b8 <Key_Enter+0x2fc>)
 80106d8:	605a      	str	r2, [r3, #4]
			ADC_Gain_V=(Vref[1]-Vref[0])/(data_V[1]-data_V[0]);
 80106da:	4b37      	ldr	r3, [pc, #220]	; (80107b8 <Key_Enter+0x2fc>)
 80106dc:	685a      	ldr	r2, [r3, #4]
 80106de:	4b36      	ldr	r3, [pc, #216]	; (80107b8 <Key_Enter+0x2fc>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	1c19      	adds	r1, r3, #0
 80106e4:	1c10      	adds	r0, r2, #0
 80106e6:	f7f0 fbe1 	bl	8000eac <__aeabi_fsub>
 80106ea:	1c03      	adds	r3, r0, #0
 80106ec:	1c1c      	adds	r4, r3, #0
 80106ee:	4b30      	ldr	r3, [pc, #192]	; (80107b0 <Key_Enter+0x2f4>)
 80106f0:	885b      	ldrh	r3, [r3, #2]
 80106f2:	001a      	movs	r2, r3
 80106f4:	4b2e      	ldr	r3, [pc, #184]	; (80107b0 <Key_Enter+0x2f4>)
 80106f6:	881b      	ldrh	r3, [r3, #0]
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	0018      	movs	r0, r3
 80106fc:	f7f0 fda4 	bl	8001248 <__aeabi_i2f>
 8010700:	1c03      	adds	r3, r0, #0
 8010702:	1c19      	adds	r1, r3, #0
 8010704:	1c20      	adds	r0, r4, #0
 8010706:	f7f0 f8e3 	bl	80008d0 <__aeabi_fdiv>
 801070a:	1c03      	adds	r3, r0, #0
 801070c:	1c1a      	adds	r2, r3, #0
 801070e:	4b2c      	ldr	r3, [pc, #176]	; (80107c0 <Key_Enter+0x304>)
 8010710:	601a      	str	r2, [r3, #0]
			Eror_ADC_V=Vref[0]-ADC_Gain_V*data_V[0];
 8010712:	4b29      	ldr	r3, [pc, #164]	; (80107b8 <Key_Enter+0x2fc>)
 8010714:	681c      	ldr	r4, [r3, #0]
 8010716:	4b26      	ldr	r3, [pc, #152]	; (80107b0 <Key_Enter+0x2f4>)
 8010718:	881b      	ldrh	r3, [r3, #0]
 801071a:	0018      	movs	r0, r3
 801071c:	f7f0 fd94 	bl	8001248 <__aeabi_i2f>
 8010720:	1c02      	adds	r2, r0, #0
 8010722:	4b27      	ldr	r3, [pc, #156]	; (80107c0 <Key_Enter+0x304>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	1c19      	adds	r1, r3, #0
 8010728:	1c10      	adds	r0, r2, #0
 801072a:	f7f0 fa99 	bl	8000c60 <__aeabi_fmul>
 801072e:	1c03      	adds	r3, r0, #0
 8010730:	1c19      	adds	r1, r3, #0
 8010732:	1c20      	adds	r0, r4, #0
 8010734:	f7f0 fbba 	bl	8000eac <__aeabi_fsub>
 8010738:	1c03      	adds	r3, r0, #0
 801073a:	1c1a      	adds	r2, r3, #0
 801073c:	4b21      	ldr	r3, [pc, #132]	; (80107c4 <Key_Enter+0x308>)
 801073e:	601a      	str	r2, [r3, #0]
			AT25_Save_AD_Param();
 8010740:	f7fb ff14 	bl	800c56c <AT25_Save_AD_Param>
			xyz.coordinates3++;
 8010744:	4b17      	ldr	r3, [pc, #92]	; (80107a4 <Key_Enter+0x2e8>)
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	1c5a      	adds	r2, r3, #1
 801074a:	4b16      	ldr	r3, [pc, #88]	; (80107a4 <Key_Enter+0x2e8>)
 801074c:	609a      	str	r2, [r3, #8]
			Cursor_Position=9;
 801074e:	4b1b      	ldr	r3, [pc, #108]	; (80107bc <Key_Enter+0x300>)
 8010750:	2209      	movs	r2, #9
 8010752:	701a      	strb	r2, [r3, #0]
			return;
 8010754:	e093      	b.n	801087e <Key_Enter+0x3c2>
		}
		/*I calibration*/
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==3))
 8010756:	4b13      	ldr	r3, [pc, #76]	; (80107a4 <Key_Enter+0x2e8>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b01      	cmp	r3, #1
 801075c:	d13a      	bne.n	80107d4 <Key_Enter+0x318>
 801075e:	4b11      	ldr	r3, [pc, #68]	; (80107a4 <Key_Enter+0x2e8>)
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	2b08      	cmp	r3, #8
 8010764:	d136      	bne.n	80107d4 <Key_Enter+0x318>
 8010766:	4b0f      	ldr	r3, [pc, #60]	; (80107a4 <Key_Enter+0x2e8>)
 8010768:	689b      	ldr	r3, [r3, #8]
 801076a:	2b03      	cmp	r3, #3
 801076c:	d132      	bne.n	80107d4 <Key_Enter+0x318>
		{
			data_I[0]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 801076e:	4b0f      	ldr	r3, [pc, #60]	; (80107ac <Key_Enter+0x2f0>)
 8010770:	795b      	ldrb	r3, [r3, #5]
 8010772:	b29b      	uxth	r3, r3
 8010774:	021b      	lsls	r3, r3, #8
 8010776:	b29a      	uxth	r2, r3
 8010778:	4b0c      	ldr	r3, [pc, #48]	; (80107ac <Key_Enter+0x2f0>)
 801077a:	799b      	ldrb	r3, [r3, #6]
 801077c:	b29b      	uxth	r3, r3
 801077e:	18d3      	adds	r3, r2, r3
 8010780:	b29a      	uxth	r2, r3
 8010782:	4b11      	ldr	r3, [pc, #68]	; (80107c8 <Key_Enter+0x30c>)
 8010784:	801a      	strh	r2, [r3, #0]
			Iref[0]=String_To_Float(String_Calibration_Current);
 8010786:	4b11      	ldr	r3, [pc, #68]	; (80107cc <Key_Enter+0x310>)
 8010788:	0018      	movs	r0, r3
 801078a:	f7fd feb7 	bl	800e4fc <String_To_Float>
 801078e:	1c02      	adds	r2, r0, #0
 8010790:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <Key_Enter+0x314>)
 8010792:	601a      	str	r2, [r3, #0]
			xyz.coordinates3++;
 8010794:	4b03      	ldr	r3, [pc, #12]	; (80107a4 <Key_Enter+0x2e8>)
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	1c5a      	adds	r2, r3, #1
 801079a:	4b02      	ldr	r3, [pc, #8]	; (80107a4 <Key_Enter+0x2e8>)
 801079c:	609a      	str	r2, [r3, #8]
			return;
 801079e:	e06e      	b.n	801087e <Key_Enter+0x3c2>
 80107a0:	2000398b 	.word	0x2000398b
 80107a4:	200039f8 	.word	0x200039f8
 80107a8:	20003987 	.word	0x20003987
 80107ac:	200036a0 	.word	0x200036a0
 80107b0:	200039b4 	.word	0x200039b4
 80107b4:	20003090 	.word	0x20003090
 80107b8:	200039a4 	.word	0x200039a4
 80107bc:	2000398e 	.word	0x2000398e
 80107c0:	20002fec 	.word	0x20002fec
 80107c4:	20002ff4 	.word	0x20002ff4
 80107c8:	200039b8 	.word	0x200039b8
 80107cc:	2000309c 	.word	0x2000309c
 80107d0:	200039ac 	.word	0x200039ac
		}
		if( (xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3==4))
 80107d4:	4b2b      	ldr	r3, [pc, #172]	; (8010884 <Key_Enter+0x3c8>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d150      	bne.n	801087e <Key_Enter+0x3c2>
 80107dc:	4b29      	ldr	r3, [pc, #164]	; (8010884 <Key_Enter+0x3c8>)
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	2b08      	cmp	r3, #8
 80107e2:	d14c      	bne.n	801087e <Key_Enter+0x3c2>
 80107e4:	4b27      	ldr	r3, [pc, #156]	; (8010884 <Key_Enter+0x3c8>)
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	2b04      	cmp	r3, #4
 80107ea:	d148      	bne.n	801087e <Key_Enter+0x3c2>
		{
			data_I[1]=Uart2_Receive_buffer[5]*256+Uart2_Receive_buffer[6];
 80107ec:	4b26      	ldr	r3, [pc, #152]	; (8010888 <Key_Enter+0x3cc>)
 80107ee:	795b      	ldrb	r3, [r3, #5]
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	021b      	lsls	r3, r3, #8
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	4b24      	ldr	r3, [pc, #144]	; (8010888 <Key_Enter+0x3cc>)
 80107f8:	799b      	ldrb	r3, [r3, #6]
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	18d3      	adds	r3, r2, r3
 80107fe:	b29a      	uxth	r2, r3
 8010800:	4b22      	ldr	r3, [pc, #136]	; (801088c <Key_Enter+0x3d0>)
 8010802:	805a      	strh	r2, [r3, #2]
			Iref[1]=String_To_Float(String_Calibration_Current);
 8010804:	4b22      	ldr	r3, [pc, #136]	; (8010890 <Key_Enter+0x3d4>)
 8010806:	0018      	movs	r0, r3
 8010808:	f7fd fe78 	bl	800e4fc <String_To_Float>
 801080c:	1c02      	adds	r2, r0, #0
 801080e:	4b21      	ldr	r3, [pc, #132]	; (8010894 <Key_Enter+0x3d8>)
 8010810:	605a      	str	r2, [r3, #4]
			ADC_Gain_I=(Iref[1]-Iref[0])/(data_I[1]-data_I[0]);
 8010812:	4b20      	ldr	r3, [pc, #128]	; (8010894 <Key_Enter+0x3d8>)
 8010814:	685a      	ldr	r2, [r3, #4]
 8010816:	4b1f      	ldr	r3, [pc, #124]	; (8010894 <Key_Enter+0x3d8>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	1c19      	adds	r1, r3, #0
 801081c:	1c10      	adds	r0, r2, #0
 801081e:	f7f0 fb45 	bl	8000eac <__aeabi_fsub>
 8010822:	1c03      	adds	r3, r0, #0
 8010824:	1c1c      	adds	r4, r3, #0
 8010826:	4b19      	ldr	r3, [pc, #100]	; (801088c <Key_Enter+0x3d0>)
 8010828:	885b      	ldrh	r3, [r3, #2]
 801082a:	001a      	movs	r2, r3
 801082c:	4b17      	ldr	r3, [pc, #92]	; (801088c <Key_Enter+0x3d0>)
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	0018      	movs	r0, r3
 8010834:	f7f0 fd08 	bl	8001248 <__aeabi_i2f>
 8010838:	1c03      	adds	r3, r0, #0
 801083a:	1c19      	adds	r1, r3, #0
 801083c:	1c20      	adds	r0, r4, #0
 801083e:	f7f0 f847 	bl	80008d0 <__aeabi_fdiv>
 8010842:	1c03      	adds	r3, r0, #0
 8010844:	1c1a      	adds	r2, r3, #0
 8010846:	4b14      	ldr	r3, [pc, #80]	; (8010898 <Key_Enter+0x3dc>)
 8010848:	601a      	str	r2, [r3, #0]
			AT25_Save_AD_Param();
 801084a:	f7fb fe8f 	bl	800c56c <AT25_Save_AD_Param>
			Eror_ADC_I=Iref[0]-ADC_Gain_I*data_I[0];
 801084e:	4b11      	ldr	r3, [pc, #68]	; (8010894 <Key_Enter+0x3d8>)
 8010850:	681c      	ldr	r4, [r3, #0]
 8010852:	4b0e      	ldr	r3, [pc, #56]	; (801088c <Key_Enter+0x3d0>)
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	0018      	movs	r0, r3
 8010858:	f7f0 fcf6 	bl	8001248 <__aeabi_i2f>
 801085c:	1c02      	adds	r2, r0, #0
 801085e:	4b0e      	ldr	r3, [pc, #56]	; (8010898 <Key_Enter+0x3dc>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	1c19      	adds	r1, r3, #0
 8010864:	1c10      	adds	r0, r2, #0
 8010866:	f7f0 f9fb 	bl	8000c60 <__aeabi_fmul>
 801086a:	1c03      	adds	r3, r0, #0
 801086c:	1c19      	adds	r1, r3, #0
 801086e:	1c20      	adds	r0, r4, #0
 8010870:	f7f0 fb1c 	bl	8000eac <__aeabi_fsub>
 8010874:	1c03      	adds	r3, r0, #0
 8010876:	1c1a      	adds	r2, r3, #0
 8010878:	4b08      	ldr	r3, [pc, #32]	; (801089c <Key_Enter+0x3e0>)
 801087a:	601a      	str	r2, [r3, #0]
			return;
 801087c:	46c0      	nop			; (mov r8, r8)
		}

	}


}
 801087e:	46bd      	mov	sp, r7
 8010880:	bdb0      	pop	{r4, r5, r7, pc}
 8010882:	46c0      	nop			; (mov r8, r8)
 8010884:	200039f8 	.word	0x200039f8
 8010888:	200036a0 	.word	0x200036a0
 801088c:	200039b8 	.word	0x200039b8
 8010890:	2000309c 	.word	0x2000309c
 8010894:	200039ac 	.word	0x200039ac
 8010898:	20002ff0 	.word	0x20002ff0
 801089c:	20002ff8 	.word	0x20002ff8

080108a0 <Key_Shift>:
 * @brief  按键Shift的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Shift(void)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	af00      	add	r7, sp, #0
	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0)) || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9)) )
 80108a4:	4b22      	ldr	r3, [pc, #136]	; (8010930 <Key_Shift+0x90>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d107      	bne.n	80108bc <Key_Shift+0x1c>
 80108ac:	4b20      	ldr	r3, [pc, #128]	; (8010930 <Key_Shift+0x90>)
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d103      	bne.n	80108bc <Key_Shift+0x1c>
 80108b4:	4b1e      	ldr	r3, [pc, #120]	; (8010930 <Key_Shift+0x90>)
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00b      	beq.n	80108d4 <Key_Shift+0x34>
 80108bc:	4b1c      	ldr	r3, [pc, #112]	; (8010930 <Key_Shift+0x90>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b09      	cmp	r3, #9
 80108c2:	d116      	bne.n	80108f2 <Key_Shift+0x52>
 80108c4:	4b1a      	ldr	r3, [pc, #104]	; (8010930 <Key_Shift+0x90>)
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	2b09      	cmp	r3, #9
 80108ca:	d112      	bne.n	80108f2 <Key_Shift+0x52>
 80108cc:	4b18      	ldr	r3, [pc, #96]	; (8010930 <Key_Shift+0x90>)
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	2b09      	cmp	r3, #9
 80108d2:	d10e      	bne.n	80108f2 <Key_Shift+0x52>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 80108d4:	4b17      	ldr	r3, [pc, #92]	; (8010934 <Key_Shift+0x94>)
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d103      	bne.n	80108e4 <Key_Shift+0x44>
 80108dc:	4b15      	ldr	r3, [pc, #84]	; (8010934 <Key_Shift+0x94>)
 80108de:	2201      	movs	r2, #1
 80108e0:	701a      	strb	r2, [r3, #0]
 80108e2:	e006      	b.n	80108f2 <Key_Shift+0x52>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 80108e4:	4b13      	ldr	r3, [pc, #76]	; (8010934 <Key_Shift+0x94>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d102      	bne.n	80108f2 <Key_Shift+0x52>
 80108ec:	4b11      	ldr	r3, [pc, #68]	; (8010934 <Key_Shift+0x94>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	701a      	strb	r2, [r3, #0]
	}

	if( (xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3==1) )
 80108f2:	4b0f      	ldr	r3, [pc, #60]	; (8010930 <Key_Shift+0x90>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d116      	bne.n	8010928 <Key_Shift+0x88>
 80108fa:	4b0d      	ldr	r3, [pc, #52]	; (8010930 <Key_Shift+0x90>)
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	2b05      	cmp	r3, #5
 8010900:	d112      	bne.n	8010928 <Key_Shift+0x88>
 8010902:	4b0b      	ldr	r3, [pc, #44]	; (8010930 <Key_Shift+0x90>)
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	2b01      	cmp	r3, #1
 8010908:	d10e      	bne.n	8010928 <Key_Shift+0x88>
	{
		if(Shift_Not_Shift == Not_Shift)          Shift_Not_Shift = Shift;//如果没复用，就复用
 801090a:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <Key_Shift+0x94>)
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d103      	bne.n	801091a <Key_Shift+0x7a>
 8010912:	4b08      	ldr	r3, [pc, #32]	; (8010934 <Key_Shift+0x94>)
 8010914:	2201      	movs	r2, #1
 8010916:	701a      	strb	r2, [r3, #0]
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
	}
}
 8010918:	e006      	b.n	8010928 <Key_Shift+0x88>
		else if(Shift_Not_Shift == Shift)         Shift_Not_Shift = Not_Shift; //如果复用了，就取消复用
 801091a:	4b06      	ldr	r3, [pc, #24]	; (8010934 <Key_Shift+0x94>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	2b01      	cmp	r3, #1
 8010920:	d102      	bne.n	8010928 <Key_Shift+0x88>
 8010922:	4b04      	ldr	r3, [pc, #16]	; (8010934 <Key_Shift+0x94>)
 8010924:	2200      	movs	r2, #0
 8010926:	701a      	strb	r2, [r3, #0]
}
 8010928:	46c0      	nop			; (mov r8, r8)
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	46c0      	nop			; (mov r8, r8)
 8010930:	200039f8 	.word	0x200039f8
 8010934:	20003987 	.word	0x20003987

08010938 <Key_ON_OFF>:
 * @brief  按键ON/OFF的扫描服务函数
 * @param  None
 * @retval None
 */
void Key_ON_OFF(void)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	af00      	add	r7, sp, #0

	/* actual interface */
	if((xyz.coordinates1==0)&&(xyz.coordinates2==0)&&(xyz.coordinates3==0))
 801093c:	4b2d      	ldr	r3, [pc, #180]	; (80109f4 <Key_ON_OFF+0xbc>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d11a      	bne.n	801097a <Key_ON_OFF+0x42>
 8010944:	4b2b      	ldr	r3, [pc, #172]	; (80109f4 <Key_ON_OFF+0xbc>)
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d116      	bne.n	801097a <Key_ON_OFF+0x42>
 801094c:	4b29      	ldr	r3, [pc, #164]	; (80109f4 <Key_ON_OFF+0xbc>)
 801094e:	689b      	ldr	r3, [r3, #8]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d112      	bne.n	801097a <Key_ON_OFF+0x42>
	{
		if(OUTPUT_NOT_OUTPUT ==NOT_OUTPUT)
 8010954:	4b28      	ldr	r3, [pc, #160]	; (80109f8 <Key_ON_OFF+0xc0>)
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d105      	bne.n	8010968 <Key_ON_OFF+0x30>
		{
			OUTPUT_NOT_OUTPUT =OUTPUT;
 801095c:	4b26      	ldr	r3, [pc, #152]	; (80109f8 <Key_ON_OFF+0xc0>)
 801095e:	2201      	movs	r2, #1
 8010960:	701a      	strb	r2, [r3, #0]
			power_on();
 8010962:	f7fc f85d 	bl	800ca20 <power_on>
 8010966:	e008      	b.n	801097a <Key_ON_OFF+0x42>

		}
		else if(OUTPUT_NOT_OUTPUT ==OUTPUT)
 8010968:	4b23      	ldr	r3, [pc, #140]	; (80109f8 <Key_ON_OFF+0xc0>)
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b01      	cmp	r3, #1
 801096e:	d104      	bne.n	801097a <Key_ON_OFF+0x42>
		{
			OUTPUT_NOT_OUTPUT =NOT_OUTPUT;
 8010970:	4b21      	ldr	r3, [pc, #132]	; (80109f8 <Key_ON_OFF+0xc0>)
 8010972:	2200      	movs	r2, #0
 8010974:	701a      	strb	r2, [r3, #0]
			power_off();
 8010976:	f7fc f863 	bl	800ca40 <power_off>
		}

	}
	/* timer */
	if( (xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))
 801097a:	4b1e      	ldr	r3, [pc, #120]	; (80109f4 <Key_ON_OFF+0xbc>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b01      	cmp	r3, #1
 8010980:	d131      	bne.n	80109e6 <Key_ON_OFF+0xae>
 8010982:	4b1c      	ldr	r3, [pc, #112]	; (80109f4 <Key_ON_OFF+0xbc>)
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	2b04      	cmp	r3, #4
 8010988:	d12d      	bne.n	80109e6 <Key_ON_OFF+0xae>
 801098a:	4b1a      	ldr	r3, [pc, #104]	; (80109f4 <Key_ON_OFF+0xbc>)
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d029      	beq.n	80109e6 <Key_ON_OFF+0xae>
	{
		switch(xyz.coordinates3)
 8010992:	4b18      	ldr	r3, [pc, #96]	; (80109f4 <Key_ON_OFF+0xbc>)
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	2b01      	cmp	r3, #1
 8010998:	d005      	beq.n	80109a6 <Key_ON_OFF+0x6e>
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd26      	ble.n	80109ec <Key_ON_OFF+0xb4>
 801099e:	3b02      	subs	r3, #2
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d823      	bhi.n	80109ec <Key_ON_OFF+0xb4>
 80109a4:	e00f      	b.n	80109c6 <Key_ON_OFF+0x8e>
		{
			case 1:
			{
				if(DELAY_NOT_DELAY==NOT_DELAY)
 80109a6:	4b15      	ldr	r3, [pc, #84]	; (80109fc <Key_ON_OFF+0xc4>)
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	2bff      	cmp	r3, #255	; 0xff
 80109ac:	d103      	bne.n	80109b6 <Key_ON_OFF+0x7e>
				{
					DELAY_NOT_DELAY=DELAY;
 80109ae:	4b13      	ldr	r3, [pc, #76]	; (80109fc <Key_ON_OFF+0xc4>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	701a      	strb	r2, [r3, #0]
					break;
 80109b4:	e01a      	b.n	80109ec <Key_ON_OFF+0xb4>
				}
				else if(DELAY_NOT_DELAY==DELAY)
 80109b6:	4b11      	ldr	r3, [pc, #68]	; (80109fc <Key_ON_OFF+0xc4>)
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d103      	bne.n	80109c6 <Key_ON_OFF+0x8e>
				{
					DELAY_NOT_DELAY=NOT_DELAY;
 80109be:	4b0f      	ldr	r3, [pc, #60]	; (80109fc <Key_ON_OFF+0xc4>)
 80109c0:	22ff      	movs	r2, #255	; 0xff
 80109c2:	701a      	strb	r2, [r3, #0]
					break;
 80109c4:	e012      	b.n	80109ec <Key_ON_OFF+0xb4>

			}
			case 2:
			case 3:
			{
				if(CYCLE_NOT_CYCLE==CYCLE)
 80109c6:	4b0e      	ldr	r3, [pc, #56]	; (8010a00 <Key_ON_OFF+0xc8>)
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2b0f      	cmp	r3, #15
 80109cc:	d103      	bne.n	80109d6 <Key_ON_OFF+0x9e>
				{
					CYCLE_NOT_CYCLE=NOT_CYCLE;
 80109ce:	4b0c      	ldr	r3, [pc, #48]	; (8010a00 <Key_ON_OFF+0xc8>)
 80109d0:	22f0      	movs	r2, #240	; 0xf0
 80109d2:	701a      	strb	r2, [r3, #0]
				else if(CYCLE_NOT_CYCLE==NOT_CYCLE)
				{
					CYCLE_NOT_CYCLE=CYCLE;
				}

				break;
 80109d4:	e009      	b.n	80109ea <Key_ON_OFF+0xb2>
				else if(CYCLE_NOT_CYCLE==NOT_CYCLE)
 80109d6:	4b0a      	ldr	r3, [pc, #40]	; (8010a00 <Key_ON_OFF+0xc8>)
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	2bf0      	cmp	r3, #240	; 0xf0
 80109dc:	d105      	bne.n	80109ea <Key_ON_OFF+0xb2>
					CYCLE_NOT_CYCLE=CYCLE;
 80109de:	4b08      	ldr	r3, [pc, #32]	; (8010a00 <Key_ON_OFF+0xc8>)
 80109e0:	220f      	movs	r2, #15
 80109e2:	701a      	strb	r2, [r3, #0]
				break;
 80109e4:	e001      	b.n	80109ea <Key_ON_OFF+0xb2>
			}

		}


	}
 80109e6:	46c0      	nop			; (mov r8, r8)
 80109e8:	e000      	b.n	80109ec <Key_ON_OFF+0xb4>
				break;
 80109ea:	46c0      	nop			; (mov r8, r8)

}
 80109ec:	46c0      	nop			; (mov r8, r8)
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	46c0      	nop			; (mov r8, r8)
 80109f4:	200039f8 	.word	0x200039f8
 80109f8:	20003989 	.word	0x20003989
 80109fc:	20002fd1 	.word	0x20002fd1
 8010a00:	20002fd0 	.word	0x20002fd0

08010a04 <Key_Preset_Lock>:
 * @brief  按键Preset/Lock的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Preset_Lock(void)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	af00      	add	r7, sp, #0
	if(Shift_Not_Shift == Not_Shift)//当不复用该按键时，该按键为切换功能，切换实时值和设定值界面
 8010a08:	4b17      	ldr	r3, [pc, #92]	; (8010a68 <Key_Preset_Lock+0x64>)
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d109      	bne.n	8010a24 <Key_Preset_Lock+0x20>
	{
		xyz.coordinates1=9;
 8010a10:	4b16      	ldr	r3, [pc, #88]	; (8010a6c <Key_Preset_Lock+0x68>)
 8010a12:	2209      	movs	r2, #9
 8010a14:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=9;
 8010a16:	4b15      	ldr	r3, [pc, #84]	; (8010a6c <Key_Preset_Lock+0x68>)
 8010a18:	2209      	movs	r2, #9
 8010a1a:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=9;
 8010a1c:	4b13      	ldr	r3, [pc, #76]	; (8010a6c <Key_Preset_Lock+0x68>)
 8010a1e:	2209      	movs	r2, #9
 8010a20:	609a      	str	r2, [r3, #8]
		{
			LOCK_UNLOCK = UNLOCK;
		}

	}
}
 8010a22:	e01e      	b.n	8010a62 <Key_Preset_Lock+0x5e>
	else if(Shift_Not_Shift == Shift)
 8010a24:	4b10      	ldr	r3, [pc, #64]	; (8010a68 <Key_Preset_Lock+0x64>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d11a      	bne.n	8010a62 <Key_Preset_Lock+0x5e>
		if(LOCK_UNLOCK == UNLOCK)
 8010a2c:	4b10      	ldr	r3, [pc, #64]	; (8010a70 <Key_Preset_Lock+0x6c>)
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d10f      	bne.n	8010a54 <Key_Preset_Lock+0x50>
			LOCK_UNLOCK = LOCK;
 8010a34:	4b0e      	ldr	r3, [pc, #56]	; (8010a70 <Key_Preset_Lock+0x6c>)
 8010a36:	2201      	movs	r2, #1
 8010a38:	701a      	strb	r2, [r3, #0]
			Shift_Not_Shift =Not_Shift;
 8010a3a:	4b0b      	ldr	r3, [pc, #44]	; (8010a68 <Key_Preset_Lock+0x64>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=0;
 8010a40:	4b0a      	ldr	r3, [pc, #40]	; (8010a6c <Key_Preset_Lock+0x68>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 8010a46:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <Key_Preset_Lock+0x68>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 8010a4c:	4b07      	ldr	r3, [pc, #28]	; (8010a6c <Key_Preset_Lock+0x68>)
 8010a4e:	2200      	movs	r2, #0
 8010a50:	609a      	str	r2, [r3, #8]
}
 8010a52:	e006      	b.n	8010a62 <Key_Preset_Lock+0x5e>
		else if(LOCK_UNLOCK == LOCK)
 8010a54:	4b06      	ldr	r3, [pc, #24]	; (8010a70 <Key_Preset_Lock+0x6c>)
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d102      	bne.n	8010a62 <Key_Preset_Lock+0x5e>
			LOCK_UNLOCK = UNLOCK;
 8010a5c:	4b04      	ldr	r3, [pc, #16]	; (8010a70 <Key_Preset_Lock+0x6c>)
 8010a5e:	2200      	movs	r2, #0
 8010a60:	701a      	strb	r2, [r3, #0]
}
 8010a62:	46c0      	nop			; (mov r8, r8)
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	20003987 	.word	0x20003987
 8010a6c:	200039f8 	.word	0x200039f8
 8010a70:	2000398b 	.word	0x2000398b

08010a74 <Key_Recall_Save>:
 * @brief  按键Recall/Save的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Recall_Save(void)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	af00      	add	r7, sp, #0

	if( ((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0) && (LOCK_UNLOCK==UNLOCK))
 8010a78:	4b31      	ldr	r3, [pc, #196]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10b      	bne.n	8010a98 <Key_Recall_Save+0x24>
 8010a80:	4b2f      	ldr	r3, [pc, #188]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d107      	bne.n	8010a98 <Key_Recall_Save+0x24>
 8010a88:	4b2d      	ldr	r3, [pc, #180]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d103      	bne.n	8010a98 <Key_Recall_Save+0x24>
 8010a90:	4b2c      	ldr	r3, [pc, #176]	; (8010b44 <Key_Recall_Save+0xd0>)
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d00f      	beq.n	8010ab8 <Key_Recall_Save+0x44>
	 || ((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9) && (LOCK_UNLOCK==UNLOCK)) )
 8010a98:	4b29      	ldr	r3, [pc, #164]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	2b09      	cmp	r3, #9
 8010a9e:	d14b      	bne.n	8010b38 <Key_Recall_Save+0xc4>
 8010aa0:	4b27      	ldr	r3, [pc, #156]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	2b09      	cmp	r3, #9
 8010aa6:	d147      	bne.n	8010b38 <Key_Recall_Save+0xc4>
 8010aa8:	4b25      	ldr	r3, [pc, #148]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	2b09      	cmp	r3, #9
 8010aae:	d143      	bne.n	8010b38 <Key_Recall_Save+0xc4>
 8010ab0:	4b24      	ldr	r3, [pc, #144]	; (8010b44 <Key_Recall_Save+0xd0>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d13f      	bne.n	8010b38 <Key_Recall_Save+0xc4>
	{
		if(Shift_Not_Shift == Not_Shift)          //无复用，处于取界面
 8010ab8:	4b23      	ldr	r3, [pc, #140]	; (8010b48 <Key_Recall_Save+0xd4>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d120      	bne.n	8010b02 <Key_Recall_Save+0x8e>
		{
			Recall_Save_Number = 0;//组别
 8010ac0:	4b22      	ldr	r3, [pc, #136]	; (8010b4c <Key_Recall_Save+0xd8>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 8010ac6:	4b1e      	ldr	r3, [pc, #120]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010ac8:	2203      	movs	r2, #3
 8010aca:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=2;
 8010acc:	4b1c      	ldr	r3, [pc, #112]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010ace:	2202      	movs	r2, #2
 8010ad0:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;//无用
 8010ad2:	4b1b      	ldr	r3, [pc, #108]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	609a      	str	r2, [r3, #8]
			__HAL_TIM_DISABLE(&htim6);//cursor flash off
 8010ad8:	4b1d      	ldr	r3, [pc, #116]	; (8010b50 <Key_Recall_Save+0xdc>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	6a1b      	ldr	r3, [r3, #32]
 8010ade:	4a1d      	ldr	r2, [pc, #116]	; (8010b54 <Key_Recall_Save+0xe0>)
 8010ae0:	4013      	ands	r3, r2
 8010ae2:	d129      	bne.n	8010b38 <Key_Recall_Save+0xc4>
 8010ae4:	4b1a      	ldr	r3, [pc, #104]	; (8010b50 <Key_Recall_Save+0xdc>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6a1b      	ldr	r3, [r3, #32]
 8010aea:	4a1b      	ldr	r2, [pc, #108]	; (8010b58 <Key_Recall_Save+0xe4>)
 8010aec:	4013      	ands	r3, r2
 8010aee:	d123      	bne.n	8010b38 <Key_Recall_Save+0xc4>
 8010af0:	4b17      	ldr	r3, [pc, #92]	; (8010b50 <Key_Recall_Save+0xdc>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	4b16      	ldr	r3, [pc, #88]	; (8010b50 <Key_Recall_Save+0xdc>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2101      	movs	r1, #1
 8010afc:	438a      	bics	r2, r1
 8010afe:	601a      	str	r2, [r3, #0]
		}

	}


}
 8010b00:	e01a      	b.n	8010b38 <Key_Recall_Save+0xc4>
		else if(Shift_Not_Shift == Shift)//save
 8010b02:	4b11      	ldr	r3, [pc, #68]	; (8010b48 <Key_Recall_Save+0xd4>)
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d116      	bne.n	8010b38 <Key_Recall_Save+0xc4>
			Recall_Save_Number = 0;//组别
 8010b0a:	4b10      	ldr	r3, [pc, #64]	; (8010b4c <Key_Recall_Save+0xd8>)
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	701a      	strb	r2, [r3, #0]
			xyz.coordinates1=3;
 8010b10:	4b0b      	ldr	r3, [pc, #44]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010b12:	2203      	movs	r2, #3
 8010b14:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=1;
 8010b16:	4b0a      	ldr	r3, [pc, #40]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010b18:	2201      	movs	r2, #1
 8010b1a:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=1;
 8010b1c:	4b08      	ldr	r3, [pc, #32]	; (8010b40 <Key_Recall_Save+0xcc>)
 8010b1e:	2201      	movs	r2, #1
 8010b20:	609a      	str	r2, [r3, #8]
			Shift_Not_Shift = Not_Shift;
 8010b22:	4b09      	ldr	r3, [pc, #36]	; (8010b48 <Key_Recall_Save+0xd4>)
 8010b24:	2200      	movs	r2, #0
 8010b26:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim6);//cursor flash off
 8010b28:	4b09      	ldr	r3, [pc, #36]	; (8010b50 <Key_Recall_Save+0xdc>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	4b08      	ldr	r3, [pc, #32]	; (8010b50 <Key_Recall_Save+0xdc>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2101      	movs	r1, #1
 8010b34:	430a      	orrs	r2, r1
 8010b36:	601a      	str	r2, [r3, #0]
}
 8010b38:	46c0      	nop			; (mov r8, r8)
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	46c0      	nop			; (mov r8, r8)
 8010b40:	200039f8 	.word	0x200039f8
 8010b44:	2000398b 	.word	0x2000398b
 8010b48:	20003987 	.word	0x20003987
 8010b4c:	2000398d 	.word	0x2000398d
 8010b50:	200034c8 	.word	0x200034c8
 8010b54:	00001111 	.word	0x00001111
 8010b58:	00000444 	.word	0x00000444

08010b5c <Key_Up>:
 * @brief  按键Up的扫描服务函数(Cursor_Position move)
 * @param	None
 * @retval None
 */
void Key_Up(void)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	af00      	add	r7, sp, #0
	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010b60:	4ba3      	ldr	r3, [pc, #652]	; (8010df0 <Key_Up+0x294>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d10c      	bne.n	8010b82 <Key_Up+0x26>
 8010b68:	4ba1      	ldr	r3, [pc, #644]	; (8010df0 <Key_Up+0x294>)
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d108      	bne.n	8010b82 <Key_Up+0x26>
 8010b70:	4b9f      	ldr	r3, [pc, #636]	; (8010df0 <Key_Up+0x294>)
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d104      	bne.n	8010b82 <Key_Up+0x26>
	{

		//get_voltage_current(READ_VOLTAGE);
		DAC_Cmd_send(1,0x0a,0x00);//rise
 8010b78:	2200      	movs	r2, #0
 8010b7a:	210a      	movs	r1, #10
 8010b7c:	2001      	movs	r0, #1
 8010b7e:	f7fb fe7b 	bl	800c878 <DAC_Cmd_send>

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010b82:	4b9b      	ldr	r3, [pc, #620]	; (8010df0 <Key_Up+0x294>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d110      	bne.n	8010bac <Key_Up+0x50>
 8010b8a:	4b99      	ldr	r3, [pc, #612]	; (8010df0 <Key_Up+0x294>)
 8010b8c:	689b      	ldr	r3, [r3, #8]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d10c      	bne.n	8010bac <Key_Up+0x50>
	{
		if(xyz.coordinates2==8) xyz.coordinates2=1;
 8010b92:	4b97      	ldr	r3, [pc, #604]	; (8010df0 <Key_Up+0x294>)
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	2b08      	cmp	r3, #8
 8010b98:	d103      	bne.n	8010ba2 <Key_Up+0x46>
 8010b9a:	4b95      	ldr	r3, [pc, #596]	; (8010df0 <Key_Up+0x294>)
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	605a      	str	r2, [r3, #4]
 8010ba0:	e004      	b.n	8010bac <Key_Up+0x50>
		else 					xyz.coordinates2++;
 8010ba2:	4b93      	ldr	r3, [pc, #588]	; (8010df0 <Key_Up+0x294>)
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	1c5a      	adds	r2, r3, #1
 8010ba8:	4b91      	ldr	r3, [pc, #580]	; (8010df0 <Key_Up+0x294>)
 8010baa:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 8010bac:	4b90      	ldr	r3, [pc, #576]	; (8010df0 <Key_Up+0x294>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b02      	cmp	r3, #2
 8010bb2:	d11b      	bne.n	8010bec <Key_Up+0x90>
 8010bb4:	4b8e      	ldr	r3, [pc, #568]	; (8010df0 <Key_Up+0x294>)
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	2b02      	cmp	r3, #2
 8010bba:	d117      	bne.n	8010bec <Key_Up+0x90>
 8010bbc:	4b8c      	ldr	r3, [pc, #560]	; (8010df0 <Key_Up+0x294>)
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d113      	bne.n	8010bec <Key_Up+0x90>
	{
		Cursor_Position++;
 8010bc4:	4b8b      	ldr	r3, [pc, #556]	; (8010df4 <Key_Up+0x298>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	4b89      	ldr	r3, [pc, #548]	; (8010df4 <Key_Up+0x298>)
 8010bce:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3)	Cursor_Position=4;
 8010bd0:	4b88      	ldr	r3, [pc, #544]	; (8010df4 <Key_Up+0x298>)
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	2b03      	cmp	r3, #3
 8010bd6:	d102      	bne.n	8010bde <Key_Up+0x82>
 8010bd8:	4b86      	ldr	r3, [pc, #536]	; (8010df4 <Key_Up+0x298>)
 8010bda:	2204      	movs	r2, #4
 8010bdc:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6)	Cursor_Position=0;
 8010bde:	4b85      	ldr	r3, [pc, #532]	; (8010df4 <Key_Up+0x298>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	2b06      	cmp	r3, #6
 8010be4:	d102      	bne.n	8010bec <Key_Up+0x90>
 8010be6:	4b83      	ldr	r3, [pc, #524]	; (8010df4 <Key_Up+0x298>)
 8010be8:	2200      	movs	r2, #0
 8010bea:	701a      	strb	r2, [r3, #0]
	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8010bec:	4b80      	ldr	r3, [pc, #512]	; (8010df0 <Key_Up+0x294>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d11b      	bne.n	8010c2c <Key_Up+0xd0>
 8010bf4:	4b7e      	ldr	r3, [pc, #504]	; (8010df0 <Key_Up+0x294>)
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d117      	bne.n	8010c2c <Key_Up+0xd0>
 8010bfc:	4b7c      	ldr	r3, [pc, #496]	; (8010df0 <Key_Up+0x294>)
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d113      	bne.n	8010c2c <Key_Up+0xd0>
	{
		Cursor_Position++;
 8010c04:	4b7b      	ldr	r3, [pc, #492]	; (8010df4 <Key_Up+0x298>)
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	b2da      	uxtb	r2, r3
 8010c0c:	4b79      	ldr	r3, [pc, #484]	; (8010df4 <Key_Up+0x298>)
 8010c0e:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==3+9)	Cursor_Position=4+9;
 8010c10:	4b78      	ldr	r3, [pc, #480]	; (8010df4 <Key_Up+0x298>)
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	2b0c      	cmp	r3, #12
 8010c16:	d102      	bne.n	8010c1e <Key_Up+0xc2>
 8010c18:	4b76      	ldr	r3, [pc, #472]	; (8010df4 <Key_Up+0x298>)
 8010c1a:	220d      	movs	r2, #13
 8010c1c:	701a      	strb	r2, [r3, #0]
		if(Cursor_Position==6+9)	Cursor_Position=0+9;
 8010c1e:	4b75      	ldr	r3, [pc, #468]	; (8010df4 <Key_Up+0x298>)
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	2b0f      	cmp	r3, #15
 8010c24:	d102      	bne.n	8010c2c <Key_Up+0xd0>
 8010c26:	4b73      	ldr	r3, [pc, #460]	; (8010df4 <Key_Up+0x298>)
 8010c28:	2209      	movs	r2, #9
 8010c2a:	701a      	strb	r2, [r3, #0]
	}

	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 8010c2c:	4b70      	ldr	r3, [pc, #448]	; (8010df0 <Key_Up+0x294>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d114      	bne.n	8010c5e <Key_Up+0x102>
 8010c34:	4b6e      	ldr	r3, [pc, #440]	; (8010df0 <Key_Up+0x294>)
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	2b05      	cmp	r3, #5
 8010c3a:	d110      	bne.n	8010c5e <Key_Up+0x102>
 8010c3c:	4b6c      	ldr	r3, [pc, #432]	; (8010df0 <Key_Up+0x294>)
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	dd0c      	ble.n	8010c5e <Key_Up+0x102>
	{
		if(xyz.coordinates3==3)	xyz.coordinates3=2;
 8010c44:	4b6a      	ldr	r3, [pc, #424]	; (8010df0 <Key_Up+0x294>)
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	2b03      	cmp	r3, #3
 8010c4a:	d103      	bne.n	8010c54 <Key_Up+0xf8>
 8010c4c:	4b68      	ldr	r3, [pc, #416]	; (8010df0 <Key_Up+0x294>)
 8010c4e:	2202      	movs	r2, #2
 8010c50:	609a      	str	r2, [r3, #8]
 8010c52:	e004      	b.n	8010c5e <Key_Up+0x102>
		else 					xyz.coordinates3++;
 8010c54:	4b66      	ldr	r3, [pc, #408]	; (8010df0 <Key_Up+0x294>)
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	1c5a      	adds	r2, r3, #1
 8010c5a:	4b65      	ldr	r3, [pc, #404]	; (8010df0 <Key_Up+0x294>)
 8010c5c:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 8010c5e:	4b64      	ldr	r3, [pc, #400]	; (8010df0 <Key_Up+0x294>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d107      	bne.n	8010c76 <Key_Up+0x11a>
 8010c66:	4b62      	ldr	r3, [pc, #392]	; (8010df0 <Key_Up+0x294>)
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	2b02      	cmp	r3, #2
 8010c6c:	d103      	bne.n	8010c76 <Key_Up+0x11a>
 8010c6e:	4b60      	ldr	r3, [pc, #384]	; (8010df0 <Key_Up+0x294>)
 8010c70:	689b      	ldr	r3, [r3, #8]
 8010c72:	2b01      	cmp	r3, #1
 8010c74:	d00b      	beq.n	8010c8e <Key_Up+0x132>
 8010c76:	4b5e      	ldr	r3, [pc, #376]	; (8010df0 <Key_Up+0x294>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d117      	bne.n	8010cae <Key_Up+0x152>
 8010c7e:	4b5c      	ldr	r3, [pc, #368]	; (8010df0 <Key_Up+0x294>)
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d113      	bne.n	8010cae <Key_Up+0x152>
 8010c86:	4b5a      	ldr	r3, [pc, #360]	; (8010df0 <Key_Up+0x294>)
 8010c88:	689b      	ldr	r3, [r3, #8]
 8010c8a:	2b02      	cmp	r3, #2
 8010c8c:	d10f      	bne.n	8010cae <Key_Up+0x152>
	{
		Cursor_Position=6;
 8010c8e:	4b59      	ldr	r3, [pc, #356]	; (8010df4 <Key_Up+0x298>)
 8010c90:	2206      	movs	r2, #6
 8010c92:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==2)	xyz.coordinates3=1;
 8010c94:	4b56      	ldr	r3, [pc, #344]	; (8010df0 <Key_Up+0x294>)
 8010c96:	689b      	ldr	r3, [r3, #8]
 8010c98:	2b02      	cmp	r3, #2
 8010c9a:	d103      	bne.n	8010ca4 <Key_Up+0x148>
 8010c9c:	4b54      	ldr	r3, [pc, #336]	; (8010df0 <Key_Up+0x294>)
 8010c9e:	2201      	movs	r2, #1
 8010ca0:	609a      	str	r2, [r3, #8]
 8010ca2:	e004      	b.n	8010cae <Key_Up+0x152>
		else 					xyz.coordinates3++;
 8010ca4:	4b52      	ldr	r3, [pc, #328]	; (8010df0 <Key_Up+0x294>)
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	1c5a      	adds	r2, r3, #1
 8010caa:	4b51      	ldr	r3, [pc, #324]	; (8010df0 <Key_Up+0x294>)
 8010cac:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1) && (xyz.coordinates3!=0)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2) && (xyz.coordinates3!=0)))
 8010cae:	4b50      	ldr	r3, [pc, #320]	; (8010df0 <Key_Up+0x294>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d107      	bne.n	8010cc6 <Key_Up+0x16a>
 8010cb6:	4b4e      	ldr	r3, [pc, #312]	; (8010df0 <Key_Up+0x294>)
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d103      	bne.n	8010cc6 <Key_Up+0x16a>
 8010cbe:	4b4c      	ldr	r3, [pc, #304]	; (8010df0 <Key_Up+0x294>)
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d10b      	bne.n	8010cde <Key_Up+0x182>
 8010cc6:	4b4a      	ldr	r3, [pc, #296]	; (8010df0 <Key_Up+0x294>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2b03      	cmp	r3, #3
 8010ccc:	d13c      	bne.n	8010d48 <Key_Up+0x1ec>
 8010cce:	4b48      	ldr	r3, [pc, #288]	; (8010df0 <Key_Up+0x294>)
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d138      	bne.n	8010d48 <Key_Up+0x1ec>
 8010cd6:	4b46      	ldr	r3, [pc, #280]	; (8010df0 <Key_Up+0x294>)
 8010cd8:	689b      	ldr	r3, [r3, #8]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d034      	beq.n	8010d48 <Key_Up+0x1ec>
	{
		Cursor_Position=0;
 8010cde:	4b45      	ldr	r3, [pc, #276]	; (8010df4 <Key_Up+0x298>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 8010ce4:	4b44      	ldr	r3, [pc, #272]	; (8010df8 <Key_Up+0x29c>)
 8010ce6:	2230      	movs	r2, #48	; 0x30
 8010ce8:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 8010cea:	4b43      	ldr	r3, [pc, #268]	; (8010df8 <Key_Up+0x29c>)
 8010cec:	2230      	movs	r2, #48	; 0x30
 8010cee:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 8010cf0:	4b41      	ldr	r3, [pc, #260]	; (8010df8 <Key_Up+0x29c>)
 8010cf2:	2230      	movs	r2, #48	; 0x30
 8010cf4:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 8010cf6:	4b40      	ldr	r3, [pc, #256]	; (8010df8 <Key_Up+0x29c>)
 8010cf8:	222e      	movs	r2, #46	; 0x2e
 8010cfa:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 8010cfc:	4b3e      	ldr	r3, [pc, #248]	; (8010df8 <Key_Up+0x29c>)
 8010cfe:	2230      	movs	r2, #48	; 0x30
 8010d00:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 8010d02:	4b3d      	ldr	r3, [pc, #244]	; (8010df8 <Key_Up+0x29c>)
 8010d04:	2230      	movs	r2, #48	; 0x30
 8010d06:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 8010d08:	4b3c      	ldr	r3, [pc, #240]	; (8010dfc <Key_Up+0x2a0>)
 8010d0a:	2230      	movs	r2, #48	; 0x30
 8010d0c:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 8010d0e:	4b3b      	ldr	r3, [pc, #236]	; (8010dfc <Key_Up+0x2a0>)
 8010d10:	2230      	movs	r2, #48	; 0x30
 8010d12:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 8010d14:	4b39      	ldr	r3, [pc, #228]	; (8010dfc <Key_Up+0x2a0>)
 8010d16:	2230      	movs	r2, #48	; 0x30
 8010d18:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 8010d1a:	4b38      	ldr	r3, [pc, #224]	; (8010dfc <Key_Up+0x2a0>)
 8010d1c:	222e      	movs	r2, #46	; 0x2e
 8010d1e:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 8010d20:	4b36      	ldr	r3, [pc, #216]	; (8010dfc <Key_Up+0x2a0>)
 8010d22:	2230      	movs	r2, #48	; 0x30
 8010d24:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 8010d26:	4b35      	ldr	r3, [pc, #212]	; (8010dfc <Key_Up+0x2a0>)
 8010d28:	2230      	movs	r2, #48	; 0x30
 8010d2a:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==9) Recall_Save_Number=0;
 8010d2c:	4b34      	ldr	r3, [pc, #208]	; (8010e00 <Key_Up+0x2a4>)
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	2b09      	cmp	r3, #9
 8010d32:	d103      	bne.n	8010d3c <Key_Up+0x1e0>
 8010d34:	4b32      	ldr	r3, [pc, #200]	; (8010e00 <Key_Up+0x2a4>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	701a      	strb	r2, [r3, #0]
 8010d3a:	e005      	b.n	8010d48 <Key_Up+0x1ec>
		else 					  Recall_Save_Number++;
 8010d3c:	4b30      	ldr	r3, [pc, #192]	; (8010e00 <Key_Up+0x2a4>)
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	3301      	adds	r3, #1
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	4b2e      	ldr	r3, [pc, #184]	; (8010e00 <Key_Up+0x2a4>)
 8010d46:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 8010d48:	4b29      	ldr	r3, [pc, #164]	; (8010df0 <Key_Up+0x294>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d114      	bne.n	8010d7a <Key_Up+0x21e>
 8010d50:	4b27      	ldr	r3, [pc, #156]	; (8010df0 <Key_Up+0x294>)
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	2b04      	cmp	r3, #4
 8010d56:	d110      	bne.n	8010d7a <Key_Up+0x21e>
 8010d58:	4b25      	ldr	r3, [pc, #148]	; (8010df0 <Key_Up+0x294>)
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d00c      	beq.n	8010d7a <Key_Up+0x21e>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 8010d60:	4b23      	ldr	r3, [pc, #140]	; (8010df0 <Key_Up+0x294>)
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	2b03      	cmp	r3, #3
 8010d66:	d103      	bne.n	8010d70 <Key_Up+0x214>
 8010d68:	4b21      	ldr	r3, [pc, #132]	; (8010df0 <Key_Up+0x294>)
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	609a      	str	r2, [r3, #8]
 8010d6e:	e004      	b.n	8010d7a <Key_Up+0x21e>
		else                    xyz.coordinates3++;
 8010d70:	4b1f      	ldr	r3, [pc, #124]	; (8010df0 <Key_Up+0x294>)
 8010d72:	689b      	ldr	r3, [r3, #8]
 8010d74:	1c5a      	adds	r2, r3, #1
 8010d76:	4b1e      	ldr	r3, [pc, #120]	; (8010df0 <Key_Up+0x294>)
 8010d78:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 8010d7a:	4b1d      	ldr	r3, [pc, #116]	; (8010df0 <Key_Up+0x294>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 8010d7e:	4b1c      	ldr	r3, [pc, #112]	; (8010df0 <Key_Up+0x294>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	d114      	bne.n	8010db0 <Key_Up+0x254>
 8010d86:	4b1a      	ldr	r3, [pc, #104]	; (8010df0 <Key_Up+0x294>)
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	2b06      	cmp	r3, #6
 8010d8c:	d110      	bne.n	8010db0 <Key_Up+0x254>
 8010d8e:	4b18      	ldr	r3, [pc, #96]	; (8010df0 <Key_Up+0x294>)
 8010d90:	689b      	ldr	r3, [r3, #8]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00c      	beq.n	8010db0 <Key_Up+0x254>
	{
		if(xyz.coordinates3==3) xyz.coordinates3=1;
 8010d96:	4b16      	ldr	r3, [pc, #88]	; (8010df0 <Key_Up+0x294>)
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	2b03      	cmp	r3, #3
 8010d9c:	d103      	bne.n	8010da6 <Key_Up+0x24a>
 8010d9e:	4b14      	ldr	r3, [pc, #80]	; (8010df0 <Key_Up+0x294>)
 8010da0:	2201      	movs	r2, #1
 8010da2:	609a      	str	r2, [r3, #8]
 8010da4:	e004      	b.n	8010db0 <Key_Up+0x254>
		else                    xyz.coordinates3++;
 8010da6:	4b12      	ldr	r3, [pc, #72]	; (8010df0 <Key_Up+0x294>)
 8010da8:	689b      	ldr	r3, [r3, #8]
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <Key_Up+0x294>)
 8010dae:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 8010db0:	4b0f      	ldr	r3, [pc, #60]	; (8010df0 <Key_Up+0x294>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d117      	bne.n	8010de8 <Key_Up+0x28c>
 8010db8:	4b0d      	ldr	r3, [pc, #52]	; (8010df0 <Key_Up+0x294>)
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	2b08      	cmp	r3, #8
 8010dbe:	d113      	bne.n	8010de8 <Key_Up+0x28c>
 8010dc0:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <Key_Up+0x294>)
 8010dc2:	689b      	ldr	r3, [r3, #8]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00f      	beq.n	8010de8 <Key_Up+0x28c>
	{
		Cursor_Position=9;
 8010dc8:	4b0a      	ldr	r3, [pc, #40]	; (8010df4 <Key_Up+0x298>)
 8010dca:	2209      	movs	r2, #9
 8010dcc:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==4) xyz.coordinates3=1;
 8010dce:	4b08      	ldr	r3, [pc, #32]	; (8010df0 <Key_Up+0x294>)
 8010dd0:	689b      	ldr	r3, [r3, #8]
 8010dd2:	2b04      	cmp	r3, #4
 8010dd4:	d103      	bne.n	8010dde <Key_Up+0x282>
 8010dd6:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <Key_Up+0x294>)
 8010dd8:	2201      	movs	r2, #1
 8010dda:	609a      	str	r2, [r3, #8]
		else                    xyz.coordinates3++;

	}

}
 8010ddc:	e004      	b.n	8010de8 <Key_Up+0x28c>
		else                    xyz.coordinates3++;
 8010dde:	4b04      	ldr	r3, [pc, #16]	; (8010df0 <Key_Up+0x294>)
 8010de0:	689b      	ldr	r3, [r3, #8]
 8010de2:	1c5a      	adds	r2, r3, #1
 8010de4:	4b02      	ldr	r3, [pc, #8]	; (8010df0 <Key_Up+0x294>)
 8010de6:	609a      	str	r2, [r3, #8]
}
 8010de8:	46c0      	nop			; (mov r8, r8)
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	46c0      	nop			; (mov r8, r8)
 8010df0:	200039f8 	.word	0x200039f8
 8010df4:	2000398e 	.word	0x2000398e
 8010df8:	20003020 	.word	0x20003020
 8010dfc:	2000302c 	.word	0x2000302c
 8010e00:	2000398d 	.word	0x2000398d

08010e04 <Key_Down>:
 * @brief  按键Up的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_Down(void)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	af00      	add	r7, sp, #0


	/*test*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8010e08:	4b9f      	ldr	r3, [pc, #636]	; (8011088 <Key_Down+0x284>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d10c      	bne.n	8010e2a <Key_Down+0x26>
 8010e10:	4b9d      	ldr	r3, [pc, #628]	; (8011088 <Key_Down+0x284>)
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d108      	bne.n	8010e2a <Key_Down+0x26>
 8010e18:	4b9b      	ldr	r3, [pc, #620]	; (8011088 <Key_Down+0x284>)
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d104      	bne.n	8010e2a <Key_Down+0x26>
	{
		//get_voltage_current(READ_CURRENT);
		DAC_Cmd_send(1,0x0a,0x01);//fall
 8010e20:	2201      	movs	r2, #1
 8010e22:	210a      	movs	r1, #10
 8010e24:	2001      	movs	r0, #1
 8010e26:	f7fb fd27 	bl	800c878 <DAC_Cmd_send>

	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 8010e2a:	4b97      	ldr	r3, [pc, #604]	; (8011088 <Key_Down+0x284>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d110      	bne.n	8010e54 <Key_Down+0x50>
 8010e32:	4b95      	ldr	r3, [pc, #596]	; (8011088 <Key_Down+0x284>)
 8010e34:	689b      	ldr	r3, [r3, #8]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d10c      	bne.n	8010e54 <Key_Down+0x50>
	{
		if(xyz.coordinates2==1) xyz.coordinates2=8;
 8010e3a:	4b93      	ldr	r3, [pc, #588]	; (8011088 <Key_Down+0x284>)
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d103      	bne.n	8010e4a <Key_Down+0x46>
 8010e42:	4b91      	ldr	r3, [pc, #580]	; (8011088 <Key_Down+0x284>)
 8010e44:	2208      	movs	r2, #8
 8010e46:	605a      	str	r2, [r3, #4]
 8010e48:	e004      	b.n	8010e54 <Key_Down+0x50>
		else 					xyz.coordinates2--;
 8010e4a:	4b8f      	ldr	r3, [pc, #572]	; (8011088 <Key_Down+0x284>)
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	1e5a      	subs	r2, r3, #1
 8010e50:	4b8d      	ldr	r3, [pc, #564]	; (8011088 <Key_Down+0x284>)
 8010e52:	605a      	str	r2, [r3, #4]

	}
	/*V——SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0))
 8010e54:	4b8c      	ldr	r3, [pc, #560]	; (8011088 <Key_Down+0x284>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	d11c      	bne.n	8010e96 <Key_Down+0x92>
 8010e5c:	4b8a      	ldr	r3, [pc, #552]	; (8011088 <Key_Down+0x284>)
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	2b02      	cmp	r3, #2
 8010e62:	d118      	bne.n	8010e96 <Key_Down+0x92>
 8010e64:	4b88      	ldr	r3, [pc, #544]	; (8011088 <Key_Down+0x284>)
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d114      	bne.n	8010e96 <Key_Down+0x92>
	{
		if(Cursor_Position==0)
 8010e6c:	4b87      	ldr	r3, [pc, #540]	; (801108c <Key_Down+0x288>)
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d103      	bne.n	8010e7c <Key_Down+0x78>
		{
			Cursor_Position=5;
 8010e74:	4b85      	ldr	r3, [pc, #532]	; (801108c <Key_Down+0x288>)
 8010e76:	2205      	movs	r2, #5
 8010e78:	701a      	strb	r2, [r3, #0]
			return;
 8010e7a:	e103      	b.n	8011084 <Key_Down+0x280>
		}
		if(Cursor_Position==4)
 8010e7c:	4b83      	ldr	r3, [pc, #524]	; (801108c <Key_Down+0x288>)
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	2b04      	cmp	r3, #4
 8010e82:	d102      	bne.n	8010e8a <Key_Down+0x86>
		{
			Cursor_Position=3;
 8010e84:	4b81      	ldr	r3, [pc, #516]	; (801108c <Key_Down+0x288>)
 8010e86:	2203      	movs	r2, #3
 8010e88:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 8010e8a:	4b80      	ldr	r3, [pc, #512]	; (801108c <Key_Down+0x288>)
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	4b7e      	ldr	r3, [pc, #504]	; (801108c <Key_Down+0x288>)
 8010e94:	701a      	strb	r2, [r3, #0]

	}
	/*I SET*/
	if((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0))
 8010e96:	4b7c      	ldr	r3, [pc, #496]	; (8011088 <Key_Down+0x284>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2b02      	cmp	r3, #2
 8010e9c:	d11c      	bne.n	8010ed8 <Key_Down+0xd4>
 8010e9e:	4b7a      	ldr	r3, [pc, #488]	; (8011088 <Key_Down+0x284>)
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d118      	bne.n	8010ed8 <Key_Down+0xd4>
 8010ea6:	4b78      	ldr	r3, [pc, #480]	; (8011088 <Key_Down+0x284>)
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d114      	bne.n	8010ed8 <Key_Down+0xd4>
	{
		if(Cursor_Position==0+9)
 8010eae:	4b77      	ldr	r3, [pc, #476]	; (801108c <Key_Down+0x288>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	2b09      	cmp	r3, #9
 8010eb4:	d103      	bne.n	8010ebe <Key_Down+0xba>
		{
			Cursor_Position=5+9;
 8010eb6:	4b75      	ldr	r3, [pc, #468]	; (801108c <Key_Down+0x288>)
 8010eb8:	220e      	movs	r2, #14
 8010eba:	701a      	strb	r2, [r3, #0]
			return;
 8010ebc:	e0e2      	b.n	8011084 <Key_Down+0x280>
		}
		if(Cursor_Position==4+9)
 8010ebe:	4b73      	ldr	r3, [pc, #460]	; (801108c <Key_Down+0x288>)
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	2b0d      	cmp	r3, #13
 8010ec4:	d102      	bne.n	8010ecc <Key_Down+0xc8>
		{
			Cursor_Position=3+9;
 8010ec6:	4b71      	ldr	r3, [pc, #452]	; (801108c <Key_Down+0x288>)
 8010ec8:	220c      	movs	r2, #12
 8010eca:	701a      	strb	r2, [r3, #0]
		}
		Cursor_Position--;
 8010ecc:	4b6f      	ldr	r3, [pc, #444]	; (801108c <Key_Down+0x288>)
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	b2da      	uxtb	r2, r3
 8010ed4:	4b6d      	ldr	r3, [pc, #436]	; (801108c <Key_Down+0x288>)
 8010ed6:	701a      	strb	r2, [r3, #0]
	}

	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3>1))
 8010ed8:	4b6b      	ldr	r3, [pc, #428]	; (8011088 <Key_Down+0x284>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d114      	bne.n	8010f0a <Key_Down+0x106>
 8010ee0:	4b69      	ldr	r3, [pc, #420]	; (8011088 <Key_Down+0x284>)
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	2b05      	cmp	r3, #5
 8010ee6:	d110      	bne.n	8010f0a <Key_Down+0x106>
 8010ee8:	4b67      	ldr	r3, [pc, #412]	; (8011088 <Key_Down+0x284>)
 8010eea:	689b      	ldr	r3, [r3, #8]
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	dd0c      	ble.n	8010f0a <Key_Down+0x106>
	{
		if(xyz.coordinates3==2)	xyz.coordinates3=3;
 8010ef0:	4b65      	ldr	r3, [pc, #404]	; (8011088 <Key_Down+0x284>)
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d103      	bne.n	8010f00 <Key_Down+0xfc>
 8010ef8:	4b63      	ldr	r3, [pc, #396]	; (8011088 <Key_Down+0x284>)
 8010efa:	2203      	movs	r2, #3
 8010efc:	609a      	str	r2, [r3, #8]
 8010efe:	e004      	b.n	8010f0a <Key_Down+0x106>
		else 					xyz.coordinates3--;
 8010f00:	4b61      	ldr	r3, [pc, #388]	; (8011088 <Key_Down+0x284>)
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	1e5a      	subs	r2, r3, #1
 8010f06:	4b60      	ldr	r3, [pc, #384]	; (8011088 <Key_Down+0x284>)
 8010f08:	609a      	str	r2, [r3, #8]
	}

	/*I rate V rate */
	if( ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1)) || ((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2)) )
 8010f0a:	4b5f      	ldr	r3, [pc, #380]	; (8011088 <Key_Down+0x284>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d107      	bne.n	8010f22 <Key_Down+0x11e>
 8010f12:	4b5d      	ldr	r3, [pc, #372]	; (8011088 <Key_Down+0x284>)
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	2b02      	cmp	r3, #2
 8010f18:	d103      	bne.n	8010f22 <Key_Down+0x11e>
 8010f1a:	4b5b      	ldr	r3, [pc, #364]	; (8011088 <Key_Down+0x284>)
 8010f1c:	689b      	ldr	r3, [r3, #8]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d00b      	beq.n	8010f3a <Key_Down+0x136>
 8010f22:	4b59      	ldr	r3, [pc, #356]	; (8011088 <Key_Down+0x284>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d117      	bne.n	8010f5a <Key_Down+0x156>
 8010f2a:	4b57      	ldr	r3, [pc, #348]	; (8011088 <Key_Down+0x284>)
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	2b02      	cmp	r3, #2
 8010f30:	d113      	bne.n	8010f5a <Key_Down+0x156>
 8010f32:	4b55      	ldr	r3, [pc, #340]	; (8011088 <Key_Down+0x284>)
 8010f34:	689b      	ldr	r3, [r3, #8]
 8010f36:	2b02      	cmp	r3, #2
 8010f38:	d10f      	bne.n	8010f5a <Key_Down+0x156>
	{
		Cursor_Position=6;
 8010f3a:	4b54      	ldr	r3, [pc, #336]	; (801108c <Key_Down+0x288>)
 8010f3c:	2206      	movs	r2, #6
 8010f3e:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1)	xyz.coordinates3=2;
 8010f40:	4b51      	ldr	r3, [pc, #324]	; (8011088 <Key_Down+0x284>)
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d103      	bne.n	8010f50 <Key_Down+0x14c>
 8010f48:	4b4f      	ldr	r3, [pc, #316]	; (8011088 <Key_Down+0x284>)
 8010f4a:	2202      	movs	r2, #2
 8010f4c:	609a      	str	r2, [r3, #8]
 8010f4e:	e004      	b.n	8010f5a <Key_Down+0x156>
		else 					xyz.coordinates3--;
 8010f50:	4b4d      	ldr	r3, [pc, #308]	; (8011088 <Key_Down+0x284>)
 8010f52:	689b      	ldr	r3, [r3, #8]
 8010f54:	1e5a      	subs	r2, r3, #1
 8010f56:	4b4c      	ldr	r3, [pc, #304]	; (8011088 <Key_Down+0x284>)
 8010f58:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 8010f5a:	4b4b      	ldr	r3, [pc, #300]	; (8011088 <Key_Down+0x284>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2b03      	cmp	r3, #3
 8010f60:	d103      	bne.n	8010f6a <Key_Down+0x166>
 8010f62:	4b49      	ldr	r3, [pc, #292]	; (8011088 <Key_Down+0x284>)
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d007      	beq.n	8010f7a <Key_Down+0x176>
 8010f6a:	4b47      	ldr	r3, [pc, #284]	; (8011088 <Key_Down+0x284>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2b03      	cmp	r3, #3
 8010f70:	d138      	bne.n	8010fe4 <Key_Down+0x1e0>
 8010f72:	4b45      	ldr	r3, [pc, #276]	; (8011088 <Key_Down+0x284>)
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	2b02      	cmp	r3, #2
 8010f78:	d134      	bne.n	8010fe4 <Key_Down+0x1e0>
	{
		Cursor_Position=0;
 8010f7a:	4b44      	ldr	r3, [pc, #272]	; (801108c <Key_Down+0x288>)
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	701a      	strb	r2, [r3, #0]
		String_Save_V[0]='0';
 8010f80:	4b43      	ldr	r3, [pc, #268]	; (8011090 <Key_Down+0x28c>)
 8010f82:	2230      	movs	r2, #48	; 0x30
 8010f84:	701a      	strb	r2, [r3, #0]
		String_Save_V[1]='0';
 8010f86:	4b42      	ldr	r3, [pc, #264]	; (8011090 <Key_Down+0x28c>)
 8010f88:	2230      	movs	r2, #48	; 0x30
 8010f8a:	705a      	strb	r2, [r3, #1]
		String_Save_V[2]='0';
 8010f8c:	4b40      	ldr	r3, [pc, #256]	; (8011090 <Key_Down+0x28c>)
 8010f8e:	2230      	movs	r2, #48	; 0x30
 8010f90:	709a      	strb	r2, [r3, #2]
		String_Save_V[3]='.';
 8010f92:	4b3f      	ldr	r3, [pc, #252]	; (8011090 <Key_Down+0x28c>)
 8010f94:	222e      	movs	r2, #46	; 0x2e
 8010f96:	70da      	strb	r2, [r3, #3]
		String_Save_V[4]='0';
 8010f98:	4b3d      	ldr	r3, [pc, #244]	; (8011090 <Key_Down+0x28c>)
 8010f9a:	2230      	movs	r2, #48	; 0x30
 8010f9c:	711a      	strb	r2, [r3, #4]
		String_Save_V[5]='0';
 8010f9e:	4b3c      	ldr	r3, [pc, #240]	; (8011090 <Key_Down+0x28c>)
 8010fa0:	2230      	movs	r2, #48	; 0x30
 8010fa2:	715a      	strb	r2, [r3, #5]

		String_Save_I[0]='0';
 8010fa4:	4b3b      	ldr	r3, [pc, #236]	; (8011094 <Key_Down+0x290>)
 8010fa6:	2230      	movs	r2, #48	; 0x30
 8010fa8:	701a      	strb	r2, [r3, #0]
		String_Save_I[1]='0';
 8010faa:	4b3a      	ldr	r3, [pc, #232]	; (8011094 <Key_Down+0x290>)
 8010fac:	2230      	movs	r2, #48	; 0x30
 8010fae:	705a      	strb	r2, [r3, #1]
		String_Save_I[2]='0';
 8010fb0:	4b38      	ldr	r3, [pc, #224]	; (8011094 <Key_Down+0x290>)
 8010fb2:	2230      	movs	r2, #48	; 0x30
 8010fb4:	709a      	strb	r2, [r3, #2]
		String_Save_I[3]='.';
 8010fb6:	4b37      	ldr	r3, [pc, #220]	; (8011094 <Key_Down+0x290>)
 8010fb8:	222e      	movs	r2, #46	; 0x2e
 8010fba:	70da      	strb	r2, [r3, #3]
		String_Save_I[4]='0';
 8010fbc:	4b35      	ldr	r3, [pc, #212]	; (8011094 <Key_Down+0x290>)
 8010fbe:	2230      	movs	r2, #48	; 0x30
 8010fc0:	711a      	strb	r2, [r3, #4]
		String_Save_I[5]='0';
 8010fc2:	4b34      	ldr	r3, [pc, #208]	; (8011094 <Key_Down+0x290>)
 8010fc4:	2230      	movs	r2, #48	; 0x30
 8010fc6:	715a      	strb	r2, [r3, #5]

		if(Recall_Save_Number==0) Recall_Save_Number=9;
 8010fc8:	4b33      	ldr	r3, [pc, #204]	; (8011098 <Key_Down+0x294>)
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d103      	bne.n	8010fd8 <Key_Down+0x1d4>
 8010fd0:	4b31      	ldr	r3, [pc, #196]	; (8011098 <Key_Down+0x294>)
 8010fd2:	2209      	movs	r2, #9
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	e005      	b.n	8010fe4 <Key_Down+0x1e0>
		else 					   Recall_Save_Number--;
 8010fd8:	4b2f      	ldr	r3, [pc, #188]	; (8011098 <Key_Down+0x294>)
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	4b2d      	ldr	r3, [pc, #180]	; (8011098 <Key_Down+0x294>)
 8010fe2:	701a      	strb	r2, [r3, #0]
	}
	/*cycle_on cycle_off  delay*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==4) && (xyz.coordinates3!=0))//cycle third menu enter
 8010fe4:	4b28      	ldr	r3, [pc, #160]	; (8011088 <Key_Down+0x284>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d114      	bne.n	8011016 <Key_Down+0x212>
 8010fec:	4b26      	ldr	r3, [pc, #152]	; (8011088 <Key_Down+0x284>)
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	2b04      	cmp	r3, #4
 8010ff2:	d110      	bne.n	8011016 <Key_Down+0x212>
 8010ff4:	4b24      	ldr	r3, [pc, #144]	; (8011088 <Key_Down+0x284>)
 8010ff6:	689b      	ldr	r3, [r3, #8]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00c      	beq.n	8011016 <Key_Down+0x212>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 8010ffc:	4b22      	ldr	r3, [pc, #136]	; (8011088 <Key_Down+0x284>)
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	2b01      	cmp	r3, #1
 8011002:	d103      	bne.n	801100c <Key_Down+0x208>
 8011004:	4b20      	ldr	r3, [pc, #128]	; (8011088 <Key_Down+0x284>)
 8011006:	2203      	movs	r2, #3
 8011008:	609a      	str	r2, [r3, #8]
 801100a:	e004      	b.n	8011016 <Key_Down+0x212>
		else                    xyz.coordinates3--;
 801100c:	4b1e      	ldr	r3, [pc, #120]	; (8011088 <Key_Down+0x284>)
 801100e:	689b      	ldr	r3, [r3, #8]
 8011010:	1e5a      	subs	r2, r3, #1
 8011012:	4b1d      	ldr	r3, [pc, #116]	; (8011088 <Key_Down+0x284>)
 8011014:	609a      	str	r2, [r3, #8]

	}
	/*RS232*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==3) && (xyz.coordinates3==1))
 8011016:	4b1c      	ldr	r3, [pc, #112]	; (8011088 <Key_Down+0x284>)
 8011018:	681b      	ldr	r3, [r3, #0]
	{
		;//之后完善
	}
	/*light temperature*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==6) && (xyz.coordinates3!=0))//cycle third menu enter
 801101a:	4b1b      	ldr	r3, [pc, #108]	; (8011088 <Key_Down+0x284>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2b01      	cmp	r3, #1
 8011020:	d114      	bne.n	801104c <Key_Down+0x248>
 8011022:	4b19      	ldr	r3, [pc, #100]	; (8011088 <Key_Down+0x284>)
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	2b06      	cmp	r3, #6
 8011028:	d110      	bne.n	801104c <Key_Down+0x248>
 801102a:	4b17      	ldr	r3, [pc, #92]	; (8011088 <Key_Down+0x284>)
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00c      	beq.n	801104c <Key_Down+0x248>
	{
		if(xyz.coordinates3==1) xyz.coordinates3=3;
 8011032:	4b15      	ldr	r3, [pc, #84]	; (8011088 <Key_Down+0x284>)
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	2b01      	cmp	r3, #1
 8011038:	d103      	bne.n	8011042 <Key_Down+0x23e>
 801103a:	4b13      	ldr	r3, [pc, #76]	; (8011088 <Key_Down+0x284>)
 801103c:	2203      	movs	r2, #3
 801103e:	609a      	str	r2, [r3, #8]
 8011040:	e004      	b.n	801104c <Key_Down+0x248>
		else                    xyz.coordinates3--;
 8011042:	4b11      	ldr	r3, [pc, #68]	; (8011088 <Key_Down+0x284>)
 8011044:	689b      	ldr	r3, [r3, #8]
 8011046:	1e5a      	subs	r2, r3, #1
 8011048:	4b0f      	ldr	r3, [pc, #60]	; (8011088 <Key_Down+0x284>)
 801104a:	609a      	str	r2, [r3, #8]

	}
	/*calibration*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==8) && (xyz.coordinates3!=0))//cycle third menu enter
 801104c:	4b0e      	ldr	r3, [pc, #56]	; (8011088 <Key_Down+0x284>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2b01      	cmp	r3, #1
 8011052:	d117      	bne.n	8011084 <Key_Down+0x280>
 8011054:	4b0c      	ldr	r3, [pc, #48]	; (8011088 <Key_Down+0x284>)
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	2b08      	cmp	r3, #8
 801105a:	d113      	bne.n	8011084 <Key_Down+0x280>
 801105c:	4b0a      	ldr	r3, [pc, #40]	; (8011088 <Key_Down+0x284>)
 801105e:	689b      	ldr	r3, [r3, #8]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d00f      	beq.n	8011084 <Key_Down+0x280>
	{
		Cursor_Position=9;
 8011064:	4b09      	ldr	r3, [pc, #36]	; (801108c <Key_Down+0x288>)
 8011066:	2209      	movs	r2, #9
 8011068:	701a      	strb	r2, [r3, #0]
		if(xyz.coordinates3==1) xyz.coordinates3=4;
 801106a:	4b07      	ldr	r3, [pc, #28]	; (8011088 <Key_Down+0x284>)
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	2b01      	cmp	r3, #1
 8011070:	d103      	bne.n	801107a <Key_Down+0x276>
 8011072:	4b05      	ldr	r3, [pc, #20]	; (8011088 <Key_Down+0x284>)
 8011074:	2204      	movs	r2, #4
 8011076:	609a      	str	r2, [r3, #8]
 8011078:	e004      	b.n	8011084 <Key_Down+0x280>
		else                    xyz.coordinates3--;
 801107a:	4b03      	ldr	r3, [pc, #12]	; (8011088 <Key_Down+0x284>)
 801107c:	689b      	ldr	r3, [r3, #8]
 801107e:	1e5a      	subs	r2, r3, #1
 8011080:	4b01      	ldr	r3, [pc, #4]	; (8011088 <Key_Down+0x284>)
 8011082:	609a      	str	r2, [r3, #8]

	}


}
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	200039f8 	.word	0x200039f8
 801108c:	2000398e 	.word	0x2000398e
 8011090:	20003020 	.word	0x20003020
 8011094:	2000302c 	.word	0x2000302c
 8011098:	2000398d 	.word	0x2000398d

0801109c <Key_ESC>:
 * @brief  按键ESC的扫描服务函数
 * @param	None
 * @retval None
 */
void Key_ESC(void)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	af00      	add	r7, sp, #0
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 80110a0:	4b5b      	ldr	r3, [pc, #364]	; (8011210 <Key_ESC+0x174>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d10d      	bne.n	80110c4 <Key_ESC+0x28>
 80110a8:	4b59      	ldr	r3, [pc, #356]	; (8011210 <Key_ESC+0x174>)
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d109      	bne.n	80110c4 <Key_ESC+0x28>
 80110b0:	4b57      	ldr	r3, [pc, #348]	; (8011210 <Key_ESC+0x174>)
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d105      	bne.n	80110c4 <Key_ESC+0x28>
	{
		COUNT_ESC++;
 80110b8:	4b56      	ldr	r3, [pc, #344]	; (8011214 <Key_ESC+0x178>)
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	3301      	adds	r3, #1
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	4b54      	ldr	r3, [pc, #336]	; (8011214 <Key_ESC+0x178>)
 80110c2:	701a      	strb	r2, [r3, #0]
	}
	/*first menu*/
	if( xyz.coordinates1==1 && (xyz.coordinates3==0) )
 80110c4:	4b52      	ldr	r3, [pc, #328]	; (8011210 <Key_ESC+0x174>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d10c      	bne.n	80110e6 <Key_ESC+0x4a>
 80110cc:	4b50      	ldr	r3, [pc, #320]	; (8011210 <Key_ESC+0x174>)
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d108      	bne.n	80110e6 <Key_ESC+0x4a>
	{
		xyz.coordinates1=0;
 80110d4:	4b4e      	ldr	r3, [pc, #312]	; (8011210 <Key_ESC+0x174>)
 80110d6:	2200      	movs	r2, #0
 80110d8:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 80110da:	4b4d      	ldr	r3, [pc, #308]	; (8011210 <Key_ESC+0x174>)
 80110dc:	2200      	movs	r2, #0
 80110de:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 80110e0:	4b4b      	ldr	r3, [pc, #300]	; (8011210 <Key_ESC+0x174>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	609a      	str	r2, [r3, #8]
	}
	/*second menu enter*/
	if( (xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 80110e6:	4b4a      	ldr	r3, [pc, #296]	; (8011210 <Key_ESC+0x174>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d10d      	bne.n	801110a <Key_ESC+0x6e>
 80110ee:	4b48      	ldr	r3, [pc, #288]	; (8011210 <Key_ESC+0x174>)
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d009      	beq.n	801110a <Key_ESC+0x6e>
 80110f6:	4b46      	ldr	r3, [pc, #280]	; (8011210 <Key_ESC+0x174>)
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d005      	beq.n	801110a <Key_ESC+0x6e>
	{
		Cursor_Position=0;
 80110fe:	4b46      	ldr	r3, [pc, #280]	; (8011218 <Key_ESC+0x17c>)
 8011100:	2200      	movs	r2, #0
 8011102:	701a      	strb	r2, [r3, #0]
		xyz.coordinates3=0;
 8011104:	4b42      	ldr	r3, [pc, #264]	; (8011210 <Key_ESC+0x174>)
 8011106:	2200      	movs	r2, #0
 8011108:	609a      	str	r2, [r3, #8]
	}
	/*I——SET V——SET*/
	if( ((xyz.coordinates1==2) && (xyz.coordinates2==1) && (xyz.coordinates3==0)) || ((xyz.coordinates1==2) && (xyz.coordinates2==2) && (xyz.coordinates3==0)) )
 801110a:	4b41      	ldr	r3, [pc, #260]	; (8011210 <Key_ESC+0x174>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b02      	cmp	r3, #2
 8011110:	d107      	bne.n	8011122 <Key_ESC+0x86>
 8011112:	4b3f      	ldr	r3, [pc, #252]	; (8011210 <Key_ESC+0x174>)
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	2b01      	cmp	r3, #1
 8011118:	d103      	bne.n	8011122 <Key_ESC+0x86>
 801111a:	4b3d      	ldr	r3, [pc, #244]	; (8011210 <Key_ESC+0x174>)
 801111c:	689b      	ldr	r3, [r3, #8]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d00b      	beq.n	801113a <Key_ESC+0x9e>
 8011122:	4b3b      	ldr	r3, [pc, #236]	; (8011210 <Key_ESC+0x174>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b02      	cmp	r3, #2
 8011128:	d110      	bne.n	801114c <Key_ESC+0xb0>
 801112a:	4b39      	ldr	r3, [pc, #228]	; (8011210 <Key_ESC+0x174>)
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	2b02      	cmp	r3, #2
 8011130:	d10c      	bne.n	801114c <Key_ESC+0xb0>
 8011132:	4b37      	ldr	r3, [pc, #220]	; (8011210 <Key_ESC+0x174>)
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d108      	bne.n	801114c <Key_ESC+0xb0>
	{
		xyz.coordinates1=0;
 801113a:	4b35      	ldr	r3, [pc, #212]	; (8011210 <Key_ESC+0x174>)
 801113c:	2200      	movs	r2, #0
 801113e:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 8011140:	4b33      	ldr	r3, [pc, #204]	; (8011210 <Key_ESC+0x174>)
 8011142:	2200      	movs	r2, #0
 8011144:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 8011146:	4b32      	ldr	r3, [pc, #200]	; (8011210 <Key_ESC+0x174>)
 8011148:	2200      	movs	r2, #0
 801114a:	609a      	str	r2, [r3, #8]
	}
	/*AD set*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==5) && (xyz.coordinates3!=0))
 801114c:	4b30      	ldr	r3, [pc, #192]	; (8011210 <Key_ESC+0x174>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d10a      	bne.n	801116a <Key_ESC+0xce>
 8011154:	4b2e      	ldr	r3, [pc, #184]	; (8011210 <Key_ESC+0x174>)
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	2b05      	cmp	r3, #5
 801115a:	d106      	bne.n	801116a <Key_ESC+0xce>
 801115c:	4b2c      	ldr	r3, [pc, #176]	; (8011210 <Key_ESC+0x174>)
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d002      	beq.n	801116a <Key_ESC+0xce>
	{
		xyz.coordinates3=0;
 8011164:	4b2a      	ldr	r3, [pc, #168]	; (8011210 <Key_ESC+0x174>)
 8011166:	2200      	movs	r2, #0
 8011168:	609a      	str	r2, [r3, #8]
	}

	/*I rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==1))
 801116a:	4b29      	ldr	r3, [pc, #164]	; (8011210 <Key_ESC+0x174>)
 801116c:	681b      	ldr	r3, [r3, #0]
	{

	}
	/*V rate*/
	if((xyz.coordinates1==1) && (xyz.coordinates2==2) && (xyz.coordinates3==2))
 801116e:	4b28      	ldr	r3, [pc, #160]	; (8011210 <Key_ESC+0x174>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b01      	cmp	r3, #1
 8011174:	d10a      	bne.n	801118c <Key_ESC+0xf0>
 8011176:	4b26      	ldr	r3, [pc, #152]	; (8011210 <Key_ESC+0x174>)
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	2b02      	cmp	r3, #2
 801117c:	d106      	bne.n	801118c <Key_ESC+0xf0>
 801117e:	4b24      	ldr	r3, [pc, #144]	; (8011210 <Key_ESC+0x174>)
 8011180:	689b      	ldr	r3, [r3, #8]
 8011182:	2b02      	cmp	r3, #2
 8011184:	d102      	bne.n	801118c <Key_ESC+0xf0>
	{
		xyz.coordinates3=0;
 8011186:	4b22      	ldr	r3, [pc, #136]	; (8011210 <Key_ESC+0x174>)
 8011188:	2200      	movs	r2, #0
 801118a:	609a      	str	r2, [r3, #8]
	}
	/*Save load*/
	if(((xyz.coordinates1==3) && (xyz.coordinates2==1)) || ((xyz.coordinates1==3) && (xyz.coordinates2==2)))
 801118c:	4b20      	ldr	r3, [pc, #128]	; (8011210 <Key_ESC+0x174>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b03      	cmp	r3, #3
 8011192:	d103      	bne.n	801119c <Key_ESC+0x100>
 8011194:	4b1e      	ldr	r3, [pc, #120]	; (8011210 <Key_ESC+0x174>)
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d007      	beq.n	80111ac <Key_ESC+0x110>
 801119c:	4b1c      	ldr	r3, [pc, #112]	; (8011210 <Key_ESC+0x174>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b03      	cmp	r3, #3
 80111a2:	d10e      	bne.n	80111c2 <Key_ESC+0x126>
 80111a4:	4b1a      	ldr	r3, [pc, #104]	; (8011210 <Key_ESC+0x174>)
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	2b02      	cmp	r3, #2
 80111aa:	d10a      	bne.n	80111c2 <Key_ESC+0x126>
	{
		xyz.coordinates1=0;
 80111ac:	4b18      	ldr	r3, [pc, #96]	; (8011210 <Key_ESC+0x174>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 80111b2:	4b17      	ldr	r3, [pc, #92]	; (8011210 <Key_ESC+0x174>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 80111b8:	4b15      	ldr	r3, [pc, #84]	; (8011210 <Key_ESC+0x174>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 80111be:	f003 f8e7 	bl	8014390 <Cursor_flash_off>
	}
	/*protect*/
	if( (xyz.coordinates1==4) && (xyz.coordinates2==1) )
 80111c2:	4b13      	ldr	r3, [pc, #76]	; (8011210 <Key_ESC+0x174>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b04      	cmp	r3, #4
 80111c8:	d105      	bne.n	80111d6 <Key_ESC+0x13a>
 80111ca:	4b11      	ldr	r3, [pc, #68]	; (8011210 <Key_ESC+0x174>)
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d101      	bne.n	80111d6 <Key_ESC+0x13a>
	{

		NVIC_SystemReset();
 80111d2:	f7fd f861 	bl	800e298 <__NVIC_SystemReset>

	}
	if( (xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 80111d6:	4b0e      	ldr	r3, [pc, #56]	; (8011210 <Key_ESC+0x174>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b09      	cmp	r3, #9
 80111dc:	d112      	bne.n	8011204 <Key_ESC+0x168>
 80111de:	4b0c      	ldr	r3, [pc, #48]	; (8011210 <Key_ESC+0x174>)
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	2b09      	cmp	r3, #9
 80111e4:	d10e      	bne.n	8011204 <Key_ESC+0x168>
 80111e6:	4b0a      	ldr	r3, [pc, #40]	; (8011210 <Key_ESC+0x174>)
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	2b09      	cmp	r3, #9
 80111ec:	d10a      	bne.n	8011204 <Key_ESC+0x168>
	{
		xyz.coordinates1=0;
 80111ee:	4b08      	ldr	r3, [pc, #32]	; (8011210 <Key_ESC+0x174>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=0;
 80111f4:	4b06      	ldr	r3, [pc, #24]	; (8011210 <Key_ESC+0x174>)
 80111f6:	2200      	movs	r2, #0
 80111f8:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=0;
 80111fa:	4b05      	ldr	r3, [pc, #20]	; (8011210 <Key_ESC+0x174>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	609a      	str	r2, [r3, #8]
		Cursor_flash_off();
 8011200:	f003 f8c6 	bl	8014390 <Cursor_flash_off>
	}
	//Write_String_8x16AsicII(32,38,"          ");
	Cursor_flash_off();
 8011204:	f003 f8c4 	bl	8014390 <Cursor_flash_off>


}
 8011208:	46c0      	nop			; (mov r8, r8)
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	46c0      	nop			; (mov r8, r8)
 8011210:	200039f8 	.word	0x200039f8
 8011214:	2000398c 	.word	0x2000398c
 8011218:	2000398e 	.word	0x2000398e

0801121c <key_scan>:
 * @brief  按键扫描函数
 * @param	None
 * @retval None
 */
void key_scan(void)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
	if(keys_EN==DISABLE) return;
 8011222:	4b97      	ldr	r3, [pc, #604]	; (8011480 <key_scan+0x264>)
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d100      	bne.n	801122c <key_scan+0x10>
 801122a:	e11c      	b.n	8011466 <key_scan+0x24a>
	static int Press_Status2;
	static int Press_Status3;


	/*IO RESET*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);
 801122c:	2380      	movs	r3, #128	; 0x80
 801122e:	019b      	lsls	r3, r3, #6
 8011230:	4894      	ldr	r0, [pc, #592]	; (8011484 <key_scan+0x268>)
 8011232:	2201      	movs	r2, #1
 8011234:	0019      	movs	r1, r3
 8011236:	f7f5 fea0 	bl	8006f7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);
 801123a:	2380      	movs	r3, #128	; 0x80
 801123c:	01db      	lsls	r3, r3, #7
 801123e:	4891      	ldr	r0, [pc, #580]	; (8011484 <key_scan+0x268>)
 8011240:	2201      	movs	r2, #1
 8011242:	0019      	movs	r1, r3
 8011244:	f7f5 fe99 	bl	8006f7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_SET);
 8011248:	2380      	movs	r3, #128	; 0x80
 801124a:	021b      	lsls	r3, r3, #8
 801124c:	488d      	ldr	r0, [pc, #564]	; (8011484 <key_scan+0x268>)
 801124e:	2201      	movs	r2, #1
 8011250:	0019      	movs	r1, r3
 8011252:	f7f5 fe92 	bl	8006f7a <HAL_GPIO_WritePin>

	/*Scan the firest row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_RESET);
 8011256:	2380      	movs	r3, #128	; 0x80
 8011258:	019b      	lsls	r3, r3, #6
 801125a:	488a      	ldr	r0, [pc, #552]	; (8011484 <key_scan+0x268>)
 801125c:	2200      	movs	r2, #0
 801125e:	0019      	movs	r1, r3
 8011260:	f7f5 fe8b 	bl	8006f7a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 8011264:	1dfb      	adds	r3, r7, #7
 8011266:	2200      	movs	r2, #0
 8011268:	701a      	strb	r2, [r3, #0]
 801126a:	e004      	b.n	8011276 <key_scan+0x5a>
 801126c:	1dfb      	adds	r3, r7, #7
 801126e:	781a      	ldrb	r2, [r3, #0]
 8011270:	1dfb      	adds	r3, r7, #7
 8011272:	3201      	adds	r2, #1
 8011274:	701a      	strb	r2, [r3, #0]
 8011276:	1dfb      	adds	r3, r7, #7
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	2b63      	cmp	r3, #99	; 0x63
 801127c:	d9f6      	bls.n	801126c <key_scan+0x50>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 801127e:	4b82      	ldr	r3, [pc, #520]	; (8011488 <key_scan+0x26c>)
 8011280:	691b      	ldr	r3, [r3, #16]
 8011282:	b29b      	uxth	r3, r3
 8011284:	227f      	movs	r2, #127	; 0x7f
 8011286:	4013      	ands	r3, r2
 8011288:	b29a      	uxth	r2, r3
 801128a:	4b80      	ldr	r3, [pc, #512]	; (801148c <key_scan+0x270>)
 801128c:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 801128e:	4b7f      	ldr	r3, [pc, #508]	; (801148c <key_scan+0x270>)
 8011290:	881b      	ldrh	r3, [r3, #0]
 8011292:	2b7f      	cmp	r3, #127	; 0x7f
 8011294:	d017      	beq.n	80112c6 <key_scan+0xaa>
	{
		Press_Status1=1;//第一行按键按下
 8011296:	4b7e      	ldr	r3, [pc, #504]	; (8011490 <key_scan+0x274>)
 8011298:	2201      	movs	r2, #1
 801129a:	601a      	str	r2, [r3, #0]
		if(++Key_Count1>5)
 801129c:	4b7d      	ldr	r3, [pc, #500]	; (8011494 <key_scan+0x278>)
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	3301      	adds	r3, #1
 80112a2:	b2da      	uxtb	r2, r3
 80112a4:	4b7b      	ldr	r3, [pc, #492]	; (8011494 <key_scan+0x278>)
 80112a6:	701a      	strb	r2, [r3, #0]
 80112a8:	4b7a      	ldr	r3, [pc, #488]	; (8011494 <key_scan+0x278>)
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	2b05      	cmp	r3, #5
 80112ae:	d90d      	bls.n	80112cc <key_scan+0xb0>
		{
			Row_Flag=1;
 80112b0:	4b79      	ldr	r3, [pc, #484]	; (8011498 <key_scan+0x27c>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	601a      	str	r2, [r3, #0]
			Key_Count1=5;
 80112b6:	4b77      	ldr	r3, [pc, #476]	; (8011494 <key_scan+0x278>)
 80112b8:	2205      	movs	r2, #5
 80112ba:	701a      	strb	r2, [r3, #0]
			Key_Value1 = IO_Status;	//记下键值
 80112bc:	4b73      	ldr	r3, [pc, #460]	; (801148c <key_scan+0x270>)
 80112be:	881a      	ldrh	r2, [r3, #0]
 80112c0:	4b76      	ldr	r3, [pc, #472]	; (801149c <key_scan+0x280>)
 80112c2:	801a      	strh	r2, [r3, #0]
 80112c4:	e002      	b.n	80112cc <key_scan+0xb0>
		}

	}
	else Press_Status1=0;
 80112c6:	4b72      	ldr	r3, [pc, #456]	; (8011490 <key_scan+0x274>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	601a      	str	r2, [r3, #0]
	/*scan the second row*/
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_1_Pin,GPIO_PIN_SET);//第一行恢复
 80112cc:	2380      	movs	r3, #128	; 0x80
 80112ce:	019b      	lsls	r3, r3, #6
 80112d0:	486c      	ldr	r0, [pc, #432]	; (8011484 <key_scan+0x268>)
 80112d2:	2201      	movs	r2, #1
 80112d4:	0019      	movs	r1, r3
 80112d6:	f7f5 fe50 	bl	8006f7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_RESET);//拉低第二行
 80112da:	2380      	movs	r3, #128	; 0x80
 80112dc:	01db      	lsls	r3, r3, #7
 80112de:	4869      	ldr	r0, [pc, #420]	; (8011484 <key_scan+0x268>)
 80112e0:	2200      	movs	r2, #0
 80112e2:	0019      	movs	r1, r3
 80112e4:	f7f5 fe49 	bl	8006f7a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 80112e8:	1dbb      	adds	r3, r7, #6
 80112ea:	2200      	movs	r2, #0
 80112ec:	701a      	strb	r2, [r3, #0]
 80112ee:	e004      	b.n	80112fa <key_scan+0xde>
 80112f0:	1dbb      	adds	r3, r7, #6
 80112f2:	781a      	ldrb	r2, [r3, #0]
 80112f4:	1dbb      	adds	r3, r7, #6
 80112f6:	3201      	adds	r2, #1
 80112f8:	701a      	strb	r2, [r3, #0]
 80112fa:	1dbb      	adds	r3, r7, #6
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	2b63      	cmp	r3, #99	; 0x63
 8011300:	d9f6      	bls.n	80112f0 <key_scan+0xd4>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 8011302:	4b61      	ldr	r3, [pc, #388]	; (8011488 <key_scan+0x26c>)
 8011304:	691b      	ldr	r3, [r3, #16]
 8011306:	b29b      	uxth	r3, r3
 8011308:	227f      	movs	r2, #127	; 0x7f
 801130a:	4013      	ands	r3, r2
 801130c:	b29a      	uxth	r2, r3
 801130e:	4b5f      	ldr	r3, [pc, #380]	; (801148c <key_scan+0x270>)
 8011310:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 8011312:	4b5e      	ldr	r3, [pc, #376]	; (801148c <key_scan+0x270>)
 8011314:	881b      	ldrh	r3, [r3, #0]
 8011316:	2b7f      	cmp	r3, #127	; 0x7f
 8011318:	d017      	beq.n	801134a <key_scan+0x12e>
	{
		Press_Status2=1;//第二行按键按下
 801131a:	4b61      	ldr	r3, [pc, #388]	; (80114a0 <key_scan+0x284>)
 801131c:	2201      	movs	r2, #1
 801131e:	601a      	str	r2, [r3, #0]
		if(++Key_Count2>5)
 8011320:	4b60      	ldr	r3, [pc, #384]	; (80114a4 <key_scan+0x288>)
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	3301      	adds	r3, #1
 8011326:	b2da      	uxtb	r2, r3
 8011328:	4b5e      	ldr	r3, [pc, #376]	; (80114a4 <key_scan+0x288>)
 801132a:	701a      	strb	r2, [r3, #0]
 801132c:	4b5d      	ldr	r3, [pc, #372]	; (80114a4 <key_scan+0x288>)
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	2b05      	cmp	r3, #5
 8011332:	d90d      	bls.n	8011350 <key_scan+0x134>
		{
			Row_Flag=2;
 8011334:	4b58      	ldr	r3, [pc, #352]	; (8011498 <key_scan+0x27c>)
 8011336:	2202      	movs	r2, #2
 8011338:	601a      	str	r2, [r3, #0]
			Key_Count2=5;
 801133a:	4b5a      	ldr	r3, [pc, #360]	; (80114a4 <key_scan+0x288>)
 801133c:	2205      	movs	r2, #5
 801133e:	701a      	strb	r2, [r3, #0]
			Key_Value2 = IO_Status;	//记下键值
 8011340:	4b52      	ldr	r3, [pc, #328]	; (801148c <key_scan+0x270>)
 8011342:	881a      	ldrh	r2, [r3, #0]
 8011344:	4b58      	ldr	r3, [pc, #352]	; (80114a8 <key_scan+0x28c>)
 8011346:	801a      	strh	r2, [r3, #0]
 8011348:	e002      	b.n	8011350 <key_scan+0x134>
		}
	}
	else Press_Status2=0;
 801134a:	4b55      	ldr	r3, [pc, #340]	; (80114a0 <key_scan+0x284>)
 801134c:	2200      	movs	r2, #0
 801134e:	601a      	str	r2, [r3, #0]
	/*scan the third row */
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_2_Pin,GPIO_PIN_SET);//第二行恢复
 8011350:	2380      	movs	r3, #128	; 0x80
 8011352:	01db      	lsls	r3, r3, #7
 8011354:	484b      	ldr	r0, [pc, #300]	; (8011484 <key_scan+0x268>)
 8011356:	2201      	movs	r2, #1
 8011358:	0019      	movs	r1, r3
 801135a:	f7f5 fe0e 	bl	8006f7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeyRow_Port, KeyRow_3_Pin,GPIO_PIN_RESET);//第三行拉低
 801135e:	2380      	movs	r3, #128	; 0x80
 8011360:	021b      	lsls	r3, r3, #8
 8011362:	4848      	ldr	r0, [pc, #288]	; (8011484 <key_scan+0x268>)
 8011364:	2200      	movs	r2, #0
 8011366:	0019      	movs	r1, r3
 8011368:	f7f5 fe07 	bl	8006f7a <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<100;i++)
 801136c:	1d7b      	adds	r3, r7, #5
 801136e:	2200      	movs	r2, #0
 8011370:	701a      	strb	r2, [r3, #0]
 8011372:	e004      	b.n	801137e <key_scan+0x162>
 8011374:	1d7b      	adds	r3, r7, #5
 8011376:	781a      	ldrb	r2, [r3, #0]
 8011378:	1d7b      	adds	r3, r7, #5
 801137a:	3201      	adds	r2, #1
 801137c:	701a      	strb	r2, [r3, #0]
 801137e:	1d7b      	adds	r3, r7, #5
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	2b63      	cmp	r3, #99	; 0x63
 8011384:	d9f6      	bls.n	8011374 <key_scan+0x158>
		;
	IO_Status=(GPIOD->IDR&0x007f);
 8011386:	4b40      	ldr	r3, [pc, #256]	; (8011488 <key_scan+0x26c>)
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	b29b      	uxth	r3, r3
 801138c:	227f      	movs	r2, #127	; 0x7f
 801138e:	4013      	ands	r3, r2
 8011390:	b29a      	uxth	r2, r3
 8011392:	4b3e      	ldr	r3, [pc, #248]	; (801148c <key_scan+0x270>)
 8011394:	801a      	strh	r2, [r3, #0]
	if(IO_Status != 0x7f)
 8011396:	4b3d      	ldr	r3, [pc, #244]	; (801148c <key_scan+0x270>)
 8011398:	881b      	ldrh	r3, [r3, #0]
 801139a:	2b7f      	cmp	r3, #127	; 0x7f
 801139c:	d017      	beq.n	80113ce <key_scan+0x1b2>
	{
		Press_Status3=1;//第三行按键按下
 801139e:	4b43      	ldr	r3, [pc, #268]	; (80114ac <key_scan+0x290>)
 80113a0:	2201      	movs	r2, #1
 80113a2:	601a      	str	r2, [r3, #0]
		if(++Key_Count3>5)
 80113a4:	4b42      	ldr	r3, [pc, #264]	; (80114b0 <key_scan+0x294>)
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	3301      	adds	r3, #1
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	4b40      	ldr	r3, [pc, #256]	; (80114b0 <key_scan+0x294>)
 80113ae:	701a      	strb	r2, [r3, #0]
 80113b0:	4b3f      	ldr	r3, [pc, #252]	; (80114b0 <key_scan+0x294>)
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	2b05      	cmp	r3, #5
 80113b6:	d90d      	bls.n	80113d4 <key_scan+0x1b8>
		{
			Row_Flag=3;
 80113b8:	4b37      	ldr	r3, [pc, #220]	; (8011498 <key_scan+0x27c>)
 80113ba:	2203      	movs	r2, #3
 80113bc:	601a      	str	r2, [r3, #0]
			Key_Count3=5;
 80113be:	4b3c      	ldr	r3, [pc, #240]	; (80114b0 <key_scan+0x294>)
 80113c0:	2205      	movs	r2, #5
 80113c2:	701a      	strb	r2, [r3, #0]
			Key_Value3 = IO_Status;	//记下键值
 80113c4:	4b31      	ldr	r3, [pc, #196]	; (801148c <key_scan+0x270>)
 80113c6:	881a      	ldrh	r2, [r3, #0]
 80113c8:	4b3a      	ldr	r3, [pc, #232]	; (80114b4 <key_scan+0x298>)
 80113ca:	801a      	strh	r2, [r3, #0]
 80113cc:	e002      	b.n	80113d4 <key_scan+0x1b8>
		}
	}
	else Press_Status3=0;
 80113ce:	4b37      	ldr	r3, [pc, #220]	; (80114ac <key_scan+0x290>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	601a      	str	r2, [r3, #0]


	if(Press_Status1==0 && Press_Status2==0 && Press_Status3==0)//无按键按下
 80113d4:	4b2e      	ldr	r3, [pc, #184]	; (8011490 <key_scan+0x274>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d14d      	bne.n	8011478 <key_scan+0x25c>
 80113dc:	4b30      	ldr	r3, [pc, #192]	; (80114a0 <key_scan+0x284>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d149      	bne.n	8011478 <key_scan+0x25c>
 80113e4:	4b31      	ldr	r3, [pc, #196]	; (80114ac <key_scan+0x290>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d145      	bne.n	8011478 <key_scan+0x25c>
	{
		switch(Row_Flag)
 80113ec:	4b2a      	ldr	r3, [pc, #168]	; (8011498 <key_scan+0x27c>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b03      	cmp	r3, #3
 80113f2:	d027      	beq.n	8011444 <key_scan+0x228>
 80113f4:	dc39      	bgt.n	801146a <key_scan+0x24e>
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d002      	beq.n	8011400 <key_scan+0x1e4>
 80113fa:	2b02      	cmp	r3, #2
 80113fc:	d011      	beq.n	8011422 <key_scan+0x206>
					}
					break;

			}

			default :break;
 80113fe:	e034      	b.n	801146a <key_scan+0x24e>
					Key_Count1--;
 8011400:	4b24      	ldr	r3, [pc, #144]	; (8011494 <key_scan+0x278>)
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	3b01      	subs	r3, #1
 8011406:	b2da      	uxtb	r2, r3
 8011408:	4b22      	ldr	r3, [pc, #136]	; (8011494 <key_scan+0x278>)
 801140a:	701a      	strb	r2, [r3, #0]
					if(Key_Count1<=0)
 801140c:	4b21      	ldr	r3, [pc, #132]	; (8011494 <key_scan+0x278>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d12c      	bne.n	801146e <key_scan+0x252>
						Key_Count1=0;
 8011414:	4b1f      	ldr	r3, [pc, #124]	; (8011494 <key_scan+0x278>)
 8011416:	2200      	movs	r2, #0
 8011418:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 801141a:	4b27      	ldr	r3, [pc, #156]	; (80114b8 <key_scan+0x29c>)
 801141c:	2201      	movs	r2, #1
 801141e:	701a      	strb	r2, [r3, #0]
					break;
 8011420:	e025      	b.n	801146e <key_scan+0x252>
					Key_Count2--;
 8011422:	4b20      	ldr	r3, [pc, #128]	; (80114a4 <key_scan+0x288>)
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	3b01      	subs	r3, #1
 8011428:	b2da      	uxtb	r2, r3
 801142a:	4b1e      	ldr	r3, [pc, #120]	; (80114a4 <key_scan+0x288>)
 801142c:	701a      	strb	r2, [r3, #0]
					if(Key_Count2<=0)
 801142e:	4b1d      	ldr	r3, [pc, #116]	; (80114a4 <key_scan+0x288>)
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d11d      	bne.n	8011472 <key_scan+0x256>
						Key_Count2=0;
 8011436:	4b1b      	ldr	r3, [pc, #108]	; (80114a4 <key_scan+0x288>)
 8011438:	2200      	movs	r2, #0
 801143a:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 801143c:	4b1e      	ldr	r3, [pc, #120]	; (80114b8 <key_scan+0x29c>)
 801143e:	2201      	movs	r2, #1
 8011440:	701a      	strb	r2, [r3, #0]
					break;
 8011442:	e016      	b.n	8011472 <key_scan+0x256>
					Key_Count3--;
 8011444:	4b1a      	ldr	r3, [pc, #104]	; (80114b0 <key_scan+0x294>)
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	3b01      	subs	r3, #1
 801144a:	b2da      	uxtb	r2, r3
 801144c:	4b18      	ldr	r3, [pc, #96]	; (80114b0 <key_scan+0x294>)
 801144e:	701a      	strb	r2, [r3, #0]
					if(Key_Count3<=0)
 8011450:	4b17      	ldr	r3, [pc, #92]	; (80114b0 <key_scan+0x294>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d10e      	bne.n	8011476 <key_scan+0x25a>
						Key_Count3=0;
 8011458:	4b15      	ldr	r3, [pc, #84]	; (80114b0 <key_scan+0x294>)
 801145a:	2200      	movs	r2, #0
 801145c:	701a      	strb	r2, [r3, #0]
						Key_Enable=ENABLE;
 801145e:	4b16      	ldr	r3, [pc, #88]	; (80114b8 <key_scan+0x29c>)
 8011460:	2201      	movs	r2, #1
 8011462:	701a      	strb	r2, [r3, #0]
					break;
 8011464:	e007      	b.n	8011476 <key_scan+0x25a>
	if(keys_EN==DISABLE) return;
 8011466:	46c0      	nop			; (mov r8, r8)
 8011468:	e006      	b.n	8011478 <key_scan+0x25c>
			default :break;
 801146a:	46c0      	nop			; (mov r8, r8)
 801146c:	e004      	b.n	8011478 <key_scan+0x25c>
					break;
 801146e:	46c0      	nop			; (mov r8, r8)
 8011470:	e002      	b.n	8011478 <key_scan+0x25c>
					break;
 8011472:	46c0      	nop			; (mov r8, r8)
 8011474:	e000      	b.n	8011478 <key_scan+0x25c>
					break;
 8011476:	46c0      	nop			; (mov r8, r8)

	}



}
 8011478:	46bd      	mov	sp, r7
 801147a:	b002      	add	sp, #8
 801147c:	bd80      	pop	{r7, pc}
 801147e:	46c0      	nop			; (mov r8, r8)
 8011480:	20003985 	.word	0x20003985
 8011484:	50000800 	.word	0x50000800
 8011488:	50000c00 	.word	0x50000c00
 801148c:	200039c2 	.word	0x200039c2
 8011490:	200039c4 	.word	0x200039c4
 8011494:	200039c8 	.word	0x200039c8
 8011498:	200039bc 	.word	0x200039bc
 801149c:	20002fde 	.word	0x20002fde
 80114a0:	200039cc 	.word	0x200039cc
 80114a4:	200039d0 	.word	0x200039d0
 80114a8:	20002fe0 	.word	0x20002fe0
 80114ac:	200039d4 	.word	0x200039d4
 80114b0:	200039d8 	.word	0x200039d8
 80114b4:	20002fe2 	.word	0x20002fe2
 80114b8:	200039c0 	.word	0x200039c0

080114bc <KEY_Handle>:
 * @brief  按键处理函数（先判断行列，再调用按键函数）
 * @param	None
 * @retval None
 */
void KEY_Handle(void)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	af00      	add	r7, sp, #0
	if(Key_Enable==ENABLE)
 80114c0:	4b5a      	ldr	r3, [pc, #360]	; (801162c <KEY_Handle+0x170>)
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d000      	beq.n	80114ca <KEY_Handle+0xe>
 80114c8:	e0ac      	b.n	8011624 <KEY_Handle+0x168>
	{

		switch(Row_Flag)
 80114ca:	4b59      	ldr	r3, [pc, #356]	; (8011630 <KEY_Handle+0x174>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	2b03      	cmp	r3, #3
 80114d0:	d100      	bne.n	80114d4 <KEY_Handle+0x18>
 80114d2:	e065      	b.n	80115a0 <KEY_Handle+0xe4>
 80114d4:	dd00      	ble.n	80114d8 <KEY_Handle+0x1c>
 80114d6:	e096      	b.n	8011606 <KEY_Handle+0x14a>
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d002      	beq.n	80114e2 <KEY_Handle+0x26>
 80114dc:	2b02      	cmp	r3, #2
 80114de:	d031      	beq.n	8011544 <KEY_Handle+0x88>
 80114e0:	e091      	b.n	8011606 <KEY_Handle+0x14a>
			{
				case 1:
				{
					Row_Flag=0;
 80114e2:	4b53      	ldr	r3, [pc, #332]	; (8011630 <KEY_Handle+0x174>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	601a      	str	r2, [r3, #0]
					switch(Key_Value1)
 80114e8:	4b52      	ldr	r3, [pc, #328]	; (8011634 <KEY_Handle+0x178>)
 80114ea:	881b      	ldrh	r3, [r3, #0]
 80114ec:	2b3f      	cmp	r3, #63	; 0x3f
 80114ee:	d025      	beq.n	801153c <KEY_Handle+0x80>
 80114f0:	da00      	bge.n	80114f4 <KEY_Handle+0x38>
 80114f2:	e083      	b.n	80115fc <KEY_Handle+0x140>
 80114f4:	2b7e      	cmp	r3, #126	; 0x7e
 80114f6:	dd00      	ble.n	80114fa <KEY_Handle+0x3e>
 80114f8:	e080      	b.n	80115fc <KEY_Handle+0x140>
 80114fa:	2b5f      	cmp	r3, #95	; 0x5f
 80114fc:	da00      	bge.n	8011500 <KEY_Handle+0x44>
 80114fe:	e07d      	b.n	80115fc <KEY_Handle+0x140>
 8011500:	3b5f      	subs	r3, #95	; 0x5f
 8011502:	2b1f      	cmp	r3, #31
 8011504:	d900      	bls.n	8011508 <KEY_Handle+0x4c>
 8011506:	e079      	b.n	80115fc <KEY_Handle+0x140>
 8011508:	009a      	lsls	r2, r3, #2
 801150a:	4b4b      	ldr	r3, [pc, #300]	; (8011638 <KEY_Handle+0x17c>)
 801150c:	18d3      	adds	r3, r2, r3
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(1);
 8011512:	2001      	movs	r0, #1
 8011514:	f7fd ffce 	bl	800f4b4 <key_num_handle>
							break;
 8011518:	e013      	b.n	8011542 <KEY_Handle+0x86>
						}
						case 0x7d:
						{
							key_num_handle(2);
 801151a:	2002      	movs	r0, #2
 801151c:	f7fd ffca 	bl	800f4b4 <key_num_handle>
							break;
 8011520:	e00f      	b.n	8011542 <KEY_Handle+0x86>
						}
						case 0x7b:
						{
							key_num_handle(3);
 8011522:	2003      	movs	r0, #3
 8011524:	f7fd ffc6 	bl	800f4b4 <key_num_handle>
							break;
 8011528:	e00b      	b.n	8011542 <KEY_Handle+0x86>
						}
						case 0x77:
						{
							Key_ESC();
 801152a:	f7ff fdb7 	bl	801109c <Key_ESC>
							break;
 801152e:	e008      	b.n	8011542 <KEY_Handle+0x86>
						}
						case 0x6f:
						{
							Key_V_set();
 8011530:	f7fe f848 	bl	800f5c4 <Key_V_set>
							break;
 8011534:	e005      	b.n	8011542 <KEY_Handle+0x86>
						}
						case 0x5f:
						{
							Key_I_set();
 8011536:	f7fe f977 	bl	800f828 <Key_I_set>
							break;
 801153a:	e002      	b.n	8011542 <KEY_Handle+0x86>
						}
						case 0x3f:
						{
							Key_Up();
 801153c:	f7ff fb0e 	bl	8010b5c <Key_Up>
							break;
 8011540:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 8011542:	e05b      	b.n	80115fc <KEY_Handle+0x140>

				}
				case 2:
				{
					Row_Flag=0;
 8011544:	4b3a      	ldr	r3, [pc, #232]	; (8011630 <KEY_Handle+0x174>)
 8011546:	2200      	movs	r2, #0
 8011548:	601a      	str	r2, [r3, #0]
					switch(Key_Value2)
 801154a:	4b3c      	ldr	r3, [pc, #240]	; (801163c <KEY_Handle+0x180>)
 801154c:	881b      	ldrh	r3, [r3, #0]
 801154e:	2b3f      	cmp	r3, #63	; 0x3f
 8011550:	d022      	beq.n	8011598 <KEY_Handle+0xdc>
 8011552:	db55      	blt.n	8011600 <KEY_Handle+0x144>
 8011554:	2b7e      	cmp	r3, #126	; 0x7e
 8011556:	dc53      	bgt.n	8011600 <KEY_Handle+0x144>
 8011558:	2b5f      	cmp	r3, #95	; 0x5f
 801155a:	db51      	blt.n	8011600 <KEY_Handle+0x144>
 801155c:	3b5f      	subs	r3, #95	; 0x5f
 801155e:	2b1f      	cmp	r3, #31
 8011560:	d84e      	bhi.n	8011600 <KEY_Handle+0x144>
 8011562:	009a      	lsls	r2, r3, #2
 8011564:	4b36      	ldr	r3, [pc, #216]	; (8011640 <KEY_Handle+0x184>)
 8011566:	18d3      	adds	r3, r2, r3
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(4);
 801156c:	2004      	movs	r0, #4
 801156e:	f7fd ffa1 	bl	800f4b4 <key_num_handle>
							break;
 8011572:	e014      	b.n	801159e <KEY_Handle+0xe2>
						}
						case 0x7d:
						{
							key_num_handle(5);
 8011574:	2005      	movs	r0, #5
 8011576:	f7fd ff9d 	bl	800f4b4 <key_num_handle>
							break;
 801157a:	e010      	b.n	801159e <KEY_Handle+0xe2>
						}
						case 0x7b:
						{
							key_num_handle(6);
 801157c:	2006      	movs	r0, #6
 801157e:	f7fd ff99 	bl	800f4b4 <key_num_handle>
							break;
 8011582:	e00c      	b.n	801159e <KEY_Handle+0xe2>
						}
						case 0x77:
						{
							key_num_handle(0);
 8011584:	2000      	movs	r0, #0
 8011586:	f7fd ff95 	bl	800f4b4 <key_num_handle>
							break;
 801158a:	e008      	b.n	801159e <KEY_Handle+0xe2>
						}
						case 0x6f:
						{
							Key_Recall_Save();
 801158c:	f7ff fa72 	bl	8010a74 <Key_Recall_Save>
							break;
 8011590:	e005      	b.n	801159e <KEY_Handle+0xe2>
						}
						case 0x5f:
						{
							Key_Preset_Lock();
 8011592:	f7ff fa37 	bl	8010a04 <Key_Preset_Lock>
							break;
 8011596:	e002      	b.n	801159e <KEY_Handle+0xe2>
						}
						case 0x3f:
						{
							Key_Enter();
 8011598:	f7fe ff90 	bl	80104bc <Key_Enter>
							break;
 801159c:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 801159e:	e02f      	b.n	8011600 <KEY_Handle+0x144>

				}
				case 3:
				{
					Row_Flag=0;
 80115a0:	4b23      	ldr	r3, [pc, #140]	; (8011630 <KEY_Handle+0x174>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	601a      	str	r2, [r3, #0]
					switch(Key_Value3)
 80115a6:	4b27      	ldr	r3, [pc, #156]	; (8011644 <KEY_Handle+0x188>)
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	2b3f      	cmp	r3, #63	; 0x3f
 80115ac:	d022      	beq.n	80115f4 <KEY_Handle+0x138>
 80115ae:	db29      	blt.n	8011604 <KEY_Handle+0x148>
 80115b0:	2b7e      	cmp	r3, #126	; 0x7e
 80115b2:	dc27      	bgt.n	8011604 <KEY_Handle+0x148>
 80115b4:	2b5f      	cmp	r3, #95	; 0x5f
 80115b6:	db25      	blt.n	8011604 <KEY_Handle+0x148>
 80115b8:	3b5f      	subs	r3, #95	; 0x5f
 80115ba:	2b1f      	cmp	r3, #31
 80115bc:	d822      	bhi.n	8011604 <KEY_Handle+0x148>
 80115be:	009a      	lsls	r2, r3, #2
 80115c0:	4b21      	ldr	r3, [pc, #132]	; (8011648 <KEY_Handle+0x18c>)
 80115c2:	18d3      	adds	r3, r2, r3
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	469f      	mov	pc, r3
					{
						case 0X7e:
						{
							key_num_handle(7);
 80115c8:	2007      	movs	r0, #7
 80115ca:	f7fd ff73 	bl	800f4b4 <key_num_handle>
							break;
 80115ce:	e014      	b.n	80115fa <KEY_Handle+0x13e>
						}
						case 0x7d:
						{
							key_num_handle(8);
 80115d0:	2008      	movs	r0, #8
 80115d2:	f7fd ff6f 	bl	800f4b4 <key_num_handle>
							break;
 80115d6:	e010      	b.n	80115fa <KEY_Handle+0x13e>
						}
						case 0x7b:
						{
							key_num_handle(9);
 80115d8:	2009      	movs	r0, #9
 80115da:	f7fd ff6b 	bl	800f4b4 <key_num_handle>
							break;
 80115de:	e00c      	b.n	80115fa <KEY_Handle+0x13e>
						}
						case 0x77:
						{
							key_num_handle(10);
 80115e0:	200a      	movs	r0, #10
 80115e2:	f7fd ff67 	bl	800f4b4 <key_num_handle>
							break;
 80115e6:	e008      	b.n	80115fa <KEY_Handle+0x13e>
						}
						case 0x6f:
						{
							Key_Shift();
 80115e8:	f7ff f95a 	bl	80108a0 <Key_Shift>
							break;
 80115ec:	e005      	b.n	80115fa <KEY_Handle+0x13e>
						}
						case 0x5f:
						{
							Key_ON_OFF();
 80115ee:	f7ff f9a3 	bl	8010938 <Key_ON_OFF>
							break;
 80115f2:	e002      	b.n	80115fa <KEY_Handle+0x13e>
						}
						case 0x3f:
						{
							Key_Down();
 80115f4:	f7ff fc06 	bl	8010e04 <Key_Down>
							break;
 80115f8:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
 80115fa:	e003      	b.n	8011604 <KEY_Handle+0x148>
					break;
 80115fc:	46c0      	nop			; (mov r8, r8)
 80115fe:	e002      	b.n	8011606 <KEY_Handle+0x14a>
					break;
 8011600:	46c0      	nop			; (mov r8, r8)
 8011602:	e000      	b.n	8011606 <KEY_Handle+0x14a>
					break;
 8011604:	46c0      	nop			; (mov r8, r8)

				}


			}
		Key_Enable=DISABLE;
 8011606:	4b09      	ldr	r3, [pc, #36]	; (801162c <KEY_Handle+0x170>)
 8011608:	2200      	movs	r2, #0
 801160a:	701a      	strb	r2, [r3, #0]
		Row_Flag=0;
 801160c:	4b08      	ldr	r3, [pc, #32]	; (8011630 <KEY_Handle+0x174>)
 801160e:	2200      	movs	r2, #0
 8011610:	601a      	str	r2, [r3, #0]
		Key_Value1=0x7f;
 8011612:	4b08      	ldr	r3, [pc, #32]	; (8011634 <KEY_Handle+0x178>)
 8011614:	227f      	movs	r2, #127	; 0x7f
 8011616:	801a      	strh	r2, [r3, #0]
		Key_Value2=0x7f;
 8011618:	4b08      	ldr	r3, [pc, #32]	; (801163c <KEY_Handle+0x180>)
 801161a:	227f      	movs	r2, #127	; 0x7f
 801161c:	801a      	strh	r2, [r3, #0]
		Key_Value3=0x7f;
 801161e:	4b09      	ldr	r3, [pc, #36]	; (8011644 <KEY_Handle+0x188>)
 8011620:	227f      	movs	r2, #127	; 0x7f
 8011622:	801a      	strh	r2, [r3, #0]

	}

}
 8011624:	46c0      	nop			; (mov r8, r8)
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	46c0      	nop			; (mov r8, r8)
 801162c:	200039c0 	.word	0x200039c0
 8011630:	200039bc 	.word	0x200039bc
 8011634:	20002fde 	.word	0x20002fde
 8011638:	08018840 	.word	0x08018840
 801163c:	20002fe0 	.word	0x20002fe0
 8011640:	080188c0 	.word	0x080188c0
 8011644:	20002fe2 	.word	0x20002fe2
 8011648:	08018940 	.word	0x08018940

0801164c <HAL_ADC_ConvCpltCallback>:
  * @brief  温度传感器检测的中断服务函数，检测IGBT温度，软件层保护
  * @param  None
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]



	if(hadc==&hadc1)
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	4b0a      	ldr	r3, [pc, #40]	; (8011680 <HAL_ADC_ConvCpltCallback+0x34>)
 8011658:	429a      	cmp	r2, r3
 801165a:	d10c      	bne.n	8011676 <HAL_ADC_ConvCpltCallback+0x2a>
	{
		Flag.ADC1_IT=1;
 801165c:	4b09      	ldr	r3, [pc, #36]	; (8011684 <HAL_ADC_ConvCpltCallback+0x38>)
 801165e:	2201      	movs	r2, #1
 8011660:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 8011662:	4b07      	ldr	r3, [pc, #28]	; (8011680 <HAL_ADC_ConvCpltCallback+0x34>)
 8011664:	0018      	movs	r0, r3
 8011666:	f7f4 f9b3 	bl	80059d0 <HAL_ADC_Stop_DMA>


		HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_temp_buffer,2);
 801166a:	4907      	ldr	r1, [pc, #28]	; (8011688 <HAL_ADC_ConvCpltCallback+0x3c>)
 801166c:	4b04      	ldr	r3, [pc, #16]	; (8011680 <HAL_ADC_ConvCpltCallback+0x34>)
 801166e:	2202      	movs	r2, #2
 8011670:	0018      	movs	r0, r3
 8011672:	f7f4 f91f 	bl	80058b4 <HAL_ADC_Start_DMA>
	}

}
 8011676:	46c0      	nop			; (mov r8, r8)
 8011678:	46bd      	mov	sp, r7
 801167a:	b002      	add	sp, #8
 801167c:	bd80      	pop	{r7, pc}
 801167e:	46c0      	nop			; (mov r8, r8)
 8011680:	200032c8 	.word	0x200032c8
 8011684:	20003388 	.word	0x20003388
 8011688:	200039dc 	.word	0x200039dc

0801168c <Check_Error>:
  * @brief  OTP/OVP/OCP的硬件保护服务函数(硬件保护)
  * @param  None
  * @retval None
  */
void Check_Error()
{
 801168c:	b5b0      	push	{r4, r5, r7, lr}
 801168e:	af00      	add	r7, sp, #0
	static uint8_t ERROR_Flag=1;
	static uint8_t ERROR_Flag2=1;
	static uint8_t ERROR_Flag3=1;
	static uint8_t ERROR_Flag4=1;

	if(Voltage_Actual>100)
 8011690:	4b85      	ldr	r3, [pc, #532]	; (80118a8 <Check_Error+0x21c>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4985      	ldr	r1, [pc, #532]	; (80118ac <Check_Error+0x220>)
 8011696:	1c18      	adds	r0, r3, #0
 8011698:	f7ee ff32 	bl	8000500 <__aeabi_fcmpgt>
 801169c:	1e03      	subs	r3, r0, #0
 801169e:	d019      	beq.n	80116d4 <Check_Error+0x48>
	{


		Error|=OVP;
 80116a0:	4b83      	ldr	r3, [pc, #524]	; (80118b0 <Check_Error+0x224>)
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	2201      	movs	r2, #1
 80116a6:	4313      	orrs	r3, r2
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	4b81      	ldr	r3, [pc, #516]	; (80118b0 <Check_Error+0x224>)
 80116ac:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 80116ae:	4b81      	ldr	r3, [pc, #516]	; (80118b4 <Check_Error+0x228>)
 80116b0:	2204      	movs	r2, #4
 80116b2:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 80116b4:	4b7f      	ldr	r3, [pc, #508]	; (80118b4 <Check_Error+0x228>)
 80116b6:	2201      	movs	r2, #1
 80116b8:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 80116ba:	4b7e      	ldr	r3, [pc, #504]	; (80118b4 <Check_Error+0x228>)
 80116bc:	2201      	movs	r2, #1
 80116be:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag==1)
 80116c0:	4b7d      	ldr	r3, [pc, #500]	; (80118b8 <Check_Error+0x22c>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d10f      	bne.n	80116e8 <Check_Error+0x5c>
		{
			ERROR_Flag=2;
 80116c8:	4b7b      	ldr	r3, [pc, #492]	; (80118b8 <Check_Error+0x22c>)
 80116ca:	2202      	movs	r2, #2
 80116cc:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 80116ce:	f7fb f9d1 	bl	800ca74 <Output_Zero>
 80116d2:	e009      	b.n	80116e8 <Check_Error+0x5c>
		}

	}
	else
	{
		ERROR_Flag=1;
 80116d4:	4b78      	ldr	r3, [pc, #480]	; (80118b8 <Check_Error+0x22c>)
 80116d6:	2201      	movs	r2, #1
 80116d8:	701a      	strb	r2, [r3, #0]
		Error&=0xfe;//解除电压警报
 80116da:	4b75      	ldr	r3, [pc, #468]	; (80118b0 <Check_Error+0x224>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	2201      	movs	r2, #1
 80116e0:	4393      	bics	r3, r2
 80116e2:	b2da      	uxtb	r2, r3
 80116e4:	4b72      	ldr	r3, [pc, #456]	; (80118b0 <Check_Error+0x224>)
 80116e6:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual>50)
 80116e8:	4b74      	ldr	r3, [pc, #464]	; (80118bc <Check_Error+0x230>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4974      	ldr	r1, [pc, #464]	; (80118c0 <Check_Error+0x234>)
 80116ee:	1c18      	adds	r0, r3, #0
 80116f0:	f7ee ff06 	bl	8000500 <__aeabi_fcmpgt>
 80116f4:	1e03      	subs	r3, r0, #0
 80116f6:	d019      	beq.n	801172c <Check_Error+0xa0>
	{

		Error|=OCP;
 80116f8:	4b6d      	ldr	r3, [pc, #436]	; (80118b0 <Check_Error+0x224>)
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2202      	movs	r2, #2
 80116fe:	4313      	orrs	r3, r2
 8011700:	b2da      	uxtb	r2, r3
 8011702:	4b6b      	ldr	r3, [pc, #428]	; (80118b0 <Check_Error+0x224>)
 8011704:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 8011706:	4b6b      	ldr	r3, [pc, #428]	; (80118b4 <Check_Error+0x228>)
 8011708:	2204      	movs	r2, #4
 801170a:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 801170c:	4b69      	ldr	r3, [pc, #420]	; (80118b4 <Check_Error+0x228>)
 801170e:	2201      	movs	r2, #1
 8011710:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 8011712:	4b68      	ldr	r3, [pc, #416]	; (80118b4 <Check_Error+0x228>)
 8011714:	2201      	movs	r2, #1
 8011716:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag2==1)
 8011718:	4b6a      	ldr	r3, [pc, #424]	; (80118c4 <Check_Error+0x238>)
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	2b01      	cmp	r3, #1
 801171e:	d10f      	bne.n	8011740 <Check_Error+0xb4>
		{
			ERROR_Flag2=2;
 8011720:	4b68      	ldr	r3, [pc, #416]	; (80118c4 <Check_Error+0x238>)
 8011722:	2202      	movs	r2, #2
 8011724:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 8011726:	f7fb f9a5 	bl	800ca74 <Output_Zero>
 801172a:	e009      	b.n	8011740 <Check_Error+0xb4>
		}
	}
	else
	{
		ERROR_Flag2=1;
 801172c:	4b65      	ldr	r3, [pc, #404]	; (80118c4 <Check_Error+0x238>)
 801172e:	2201      	movs	r2, #1
 8011730:	701a      	strb	r2, [r3, #0]
		Error&=0xfd;//解除电流警报
 8011732:	4b5f      	ldr	r3, [pc, #380]	; (80118b0 <Check_Error+0x224>)
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	2202      	movs	r2, #2
 8011738:	4393      	bics	r3, r2
 801173a:	b2da      	uxtb	r2, r3
 801173c:	4b5c      	ldr	r3, [pc, #368]	; (80118b0 <Check_Error+0x224>)
 801173e:	701a      	strb	r2, [r3, #0]
	}
	if(Current_Actual*Voltage_Actual>7500)
 8011740:	4b5e      	ldr	r3, [pc, #376]	; (80118bc <Check_Error+0x230>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	4b58      	ldr	r3, [pc, #352]	; (80118a8 <Check_Error+0x21c>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	1c19      	adds	r1, r3, #0
 801174a:	1c10      	adds	r0, r2, #0
 801174c:	f7ef fa88 	bl	8000c60 <__aeabi_fmul>
 8011750:	1c03      	adds	r3, r0, #0
 8011752:	495d      	ldr	r1, [pc, #372]	; (80118c8 <Check_Error+0x23c>)
 8011754:	1c18      	adds	r0, r3, #0
 8011756:	f7ee fed3 	bl	8000500 <__aeabi_fcmpgt>
 801175a:	1e03      	subs	r3, r0, #0
 801175c:	d019      	beq.n	8011792 <Check_Error+0x106>
	{

		Error|=CPP;
 801175e:	4b54      	ldr	r3, [pc, #336]	; (80118b0 <Check_Error+0x224>)
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	2208      	movs	r2, #8
 8011764:	4313      	orrs	r3, r2
 8011766:	b2da      	uxtb	r2, r3
 8011768:	4b51      	ldr	r3, [pc, #324]	; (80118b0 <Check_Error+0x224>)
 801176a:	701a      	strb	r2, [r3, #0]
		xyz.coordinates1=4;
 801176c:	4b51      	ldr	r3, [pc, #324]	; (80118b4 <Check_Error+0x228>)
 801176e:	2204      	movs	r2, #4
 8011770:	601a      	str	r2, [r3, #0]
		xyz.coordinates2=1;
 8011772:	4b50      	ldr	r3, [pc, #320]	; (80118b4 <Check_Error+0x228>)
 8011774:	2201      	movs	r2, #1
 8011776:	605a      	str	r2, [r3, #4]
		xyz.coordinates3=1;
 8011778:	4b4e      	ldr	r3, [pc, #312]	; (80118b4 <Check_Error+0x228>)
 801177a:	2201      	movs	r2, #1
 801177c:	609a      	str	r2, [r3, #8]
		if(ERROR_Flag3==1)
 801177e:	4b53      	ldr	r3, [pc, #332]	; (80118cc <Check_Error+0x240>)
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	2b01      	cmp	r3, #1
 8011784:	d10f      	bne.n	80117a6 <Check_Error+0x11a>
		{
			ERROR_Flag3=2;
 8011786:	4b51      	ldr	r3, [pc, #324]	; (80118cc <Check_Error+0x240>)
 8011788:	2202      	movs	r2, #2
 801178a:	701a      	strb	r2, [r3, #0]
			Output_Zero();
 801178c:	f7fb f972 	bl	800ca74 <Output_Zero>
 8011790:	e009      	b.n	80117a6 <Check_Error+0x11a>

		}
	}
	else
	{
		ERROR_Flag3=1;
 8011792:	4b4e      	ldr	r3, [pc, #312]	; (80118cc <Check_Error+0x240>)
 8011794:	2201      	movs	r2, #1
 8011796:	701a      	strb	r2, [r3, #0]
		Error&=0xf7;//解除电流警报
 8011798:	4b45      	ldr	r3, [pc, #276]	; (80118b0 <Check_Error+0x224>)
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	2208      	movs	r2, #8
 801179e:	4393      	bics	r3, r2
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	4b43      	ldr	r3, [pc, #268]	; (80118b0 <Check_Error+0x224>)
 80117a4:	701a      	strb	r2, [r3, #0]
		ERROR_Flag4=1;
		Error&=0xfb;//解除电流警报
	}
*/

	if(Voltage_Actual*100>0.95*Set_Voltage && Voltage_Actual*100<1.05*Set_Voltage)
 80117a6:	4b40      	ldr	r3, [pc, #256]	; (80118a8 <Check_Error+0x21c>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4940      	ldr	r1, [pc, #256]	; (80118ac <Check_Error+0x220>)
 80117ac:	1c18      	adds	r0, r3, #0
 80117ae:	f7ef fa57 	bl	8000c60 <__aeabi_fmul>
 80117b2:	1c03      	adds	r3, r0, #0
 80117b4:	1c18      	adds	r0, r3, #0
 80117b6:	f7f1 fb7b 	bl	8002eb0 <__aeabi_f2d>
 80117ba:	0004      	movs	r4, r0
 80117bc:	000d      	movs	r5, r1
 80117be:	4b44      	ldr	r3, [pc, #272]	; (80118d0 <Check_Error+0x244>)
 80117c0:	881b      	ldrh	r3, [r3, #0]
 80117c2:	0018      	movs	r0, r3
 80117c4:	f7f1 fb1e 	bl	8002e04 <__aeabi_i2d>
 80117c8:	4a42      	ldr	r2, [pc, #264]	; (80118d4 <Check_Error+0x248>)
 80117ca:	4b43      	ldr	r3, [pc, #268]	; (80118d8 <Check_Error+0x24c>)
 80117cc:	f7f0 fcc8 	bl	8002160 <__aeabi_dmul>
 80117d0:	0002      	movs	r2, r0
 80117d2:	000b      	movs	r3, r1
 80117d4:	0020      	movs	r0, r4
 80117d6:	0029      	movs	r1, r5
 80117d8:	f7ee fe58 	bl	800048c <__aeabi_dcmpgt>
 80117dc:	1e03      	subs	r3, r0, #0
 80117de:	d020      	beq.n	8011822 <Check_Error+0x196>
 80117e0:	4b31      	ldr	r3, [pc, #196]	; (80118a8 <Check_Error+0x21c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4931      	ldr	r1, [pc, #196]	; (80118ac <Check_Error+0x220>)
 80117e6:	1c18      	adds	r0, r3, #0
 80117e8:	f7ef fa3a 	bl	8000c60 <__aeabi_fmul>
 80117ec:	1c03      	adds	r3, r0, #0
 80117ee:	1c18      	adds	r0, r3, #0
 80117f0:	f7f1 fb5e 	bl	8002eb0 <__aeabi_f2d>
 80117f4:	0004      	movs	r4, r0
 80117f6:	000d      	movs	r5, r1
 80117f8:	4b35      	ldr	r3, [pc, #212]	; (80118d0 <Check_Error+0x244>)
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	0018      	movs	r0, r3
 80117fe:	f7f1 fb01 	bl	8002e04 <__aeabi_i2d>
 8011802:	4a36      	ldr	r2, [pc, #216]	; (80118dc <Check_Error+0x250>)
 8011804:	4b36      	ldr	r3, [pc, #216]	; (80118e0 <Check_Error+0x254>)
 8011806:	f7f0 fcab 	bl	8002160 <__aeabi_dmul>
 801180a:	0002      	movs	r2, r0
 801180c:	000b      	movs	r3, r1
 801180e:	0020      	movs	r0, r4
 8011810:	0029      	movs	r1, r5
 8011812:	f7ee fe27 	bl	8000464 <__aeabi_dcmplt>
 8011816:	1e03      	subs	r3, r0, #0
 8011818:	d003      	beq.n	8011822 <Check_Error+0x196>
	{
		CV_CC_CP=CV;
 801181a:	4b32      	ldr	r3, [pc, #200]	; (80118e4 <Check_Error+0x258>)
 801181c:	2201      	movs	r2, #1
 801181e:	701a      	strb	r2, [r3, #0]
	}




}
 8011820:	e03e      	b.n	80118a0 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 8011822:	4b26      	ldr	r3, [pc, #152]	; (80118bc <Check_Error+0x230>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	4921      	ldr	r1, [pc, #132]	; (80118ac <Check_Error+0x220>)
 8011828:	1c18      	adds	r0, r3, #0
 801182a:	f7ef fa19 	bl	8000c60 <__aeabi_fmul>
 801182e:	1c03      	adds	r3, r0, #0
 8011830:	1c18      	adds	r0, r3, #0
 8011832:	f7f1 fb3d 	bl	8002eb0 <__aeabi_f2d>
 8011836:	0004      	movs	r4, r0
 8011838:	000d      	movs	r5, r1
 801183a:	4b2b      	ldr	r3, [pc, #172]	; (80118e8 <Check_Error+0x25c>)
 801183c:	881b      	ldrh	r3, [r3, #0]
 801183e:	0018      	movs	r0, r3
 8011840:	f7f1 fae0 	bl	8002e04 <__aeabi_i2d>
 8011844:	4a23      	ldr	r2, [pc, #140]	; (80118d4 <Check_Error+0x248>)
 8011846:	4b24      	ldr	r3, [pc, #144]	; (80118d8 <Check_Error+0x24c>)
 8011848:	f7f0 fc8a 	bl	8002160 <__aeabi_dmul>
 801184c:	0002      	movs	r2, r0
 801184e:	000b      	movs	r3, r1
 8011850:	0020      	movs	r0, r4
 8011852:	0029      	movs	r1, r5
 8011854:	f7ee fe1a 	bl	800048c <__aeabi_dcmpgt>
 8011858:	1e03      	subs	r3, r0, #0
 801185a:	d100      	bne.n	801185e <Check_Error+0x1d2>
}
 801185c:	e020      	b.n	80118a0 <Check_Error+0x214>
	else if(Current_Actual*100>0.95*Set_Current && Current_Actual*100<1.05*Set_Current)
 801185e:	4b17      	ldr	r3, [pc, #92]	; (80118bc <Check_Error+0x230>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4912      	ldr	r1, [pc, #72]	; (80118ac <Check_Error+0x220>)
 8011864:	1c18      	adds	r0, r3, #0
 8011866:	f7ef f9fb 	bl	8000c60 <__aeabi_fmul>
 801186a:	1c03      	adds	r3, r0, #0
 801186c:	1c18      	adds	r0, r3, #0
 801186e:	f7f1 fb1f 	bl	8002eb0 <__aeabi_f2d>
 8011872:	0004      	movs	r4, r0
 8011874:	000d      	movs	r5, r1
 8011876:	4b1c      	ldr	r3, [pc, #112]	; (80118e8 <Check_Error+0x25c>)
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	0018      	movs	r0, r3
 801187c:	f7f1 fac2 	bl	8002e04 <__aeabi_i2d>
 8011880:	4a16      	ldr	r2, [pc, #88]	; (80118dc <Check_Error+0x250>)
 8011882:	4b17      	ldr	r3, [pc, #92]	; (80118e0 <Check_Error+0x254>)
 8011884:	f7f0 fc6c 	bl	8002160 <__aeabi_dmul>
 8011888:	0002      	movs	r2, r0
 801188a:	000b      	movs	r3, r1
 801188c:	0020      	movs	r0, r4
 801188e:	0029      	movs	r1, r5
 8011890:	f7ee fde8 	bl	8000464 <__aeabi_dcmplt>
 8011894:	1e03      	subs	r3, r0, #0
 8011896:	d100      	bne.n	801189a <Check_Error+0x20e>
}
 8011898:	e002      	b.n	80118a0 <Check_Error+0x214>
		CV_CC_CP=CC;
 801189a:	4b12      	ldr	r3, [pc, #72]	; (80118e4 <Check_Error+0x258>)
 801189c:	2202      	movs	r2, #2
 801189e:	701a      	strb	r2, [r3, #0]
}
 80118a0:	46c0      	nop			; (mov r8, r8)
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bdb0      	pop	{r4, r5, r7, pc}
 80118a6:	46c0      	nop			; (mov r8, r8)
 80118a8:	2000399c 	.word	0x2000399c
 80118ac:	42c80000 	.word	0x42c80000
 80118b0:	200039d9 	.word	0x200039d9
 80118b4:	200039f8 	.word	0x200039f8
 80118b8:	20002fe5 	.word	0x20002fe5
 80118bc:	200039a0 	.word	0x200039a0
 80118c0:	42480000 	.word	0x42480000
 80118c4:	20002fe6 	.word	0x20002fe6
 80118c8:	45ea6000 	.word	0x45ea6000
 80118cc:	20002fe7 	.word	0x20002fe7
 80118d0:	20002fda 	.word	0x20002fda
 80118d4:	66666666 	.word	0x66666666
 80118d8:	3fee6666 	.word	0x3fee6666
 80118dc:	cccccccd 	.word	0xcccccccd
 80118e0:	3ff0cccc 	.word	0x3ff0cccc
 80118e4:	2000398a 	.word	0x2000398a
 80118e8:	20002fdc 	.word	0x20002fdc

080118ec <TIM16_DELAY_ON>:
  * @brief  开启DELAY功能，设置定时器时间和使能定时器
  * @param  None
  * @retval None
  */
void TIM16_DELAY_ON(void)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	af00      	add	r7, sp, #0
	TIM_Delay_time = Delay_h * 3600 + Delay_m * 60 + Delay_s;
 80118f0:	4b17      	ldr	r3, [pc, #92]	; (8011950 <TIM16_DELAY_ON+0x64>)
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	001a      	movs	r2, r3
 80118f6:	0013      	movs	r3, r2
 80118f8:	011b      	lsls	r3, r3, #4
 80118fa:	1a9b      	subs	r3, r3, r2
 80118fc:	011a      	lsls	r2, r3, #4
 80118fe:	1ad2      	subs	r2, r2, r3
 8011900:	0113      	lsls	r3, r2, #4
 8011902:	001a      	movs	r2, r3
 8011904:	0011      	movs	r1, r2
 8011906:	4b13      	ldr	r3, [pc, #76]	; (8011954 <TIM16_DELAY_ON+0x68>)
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	001a      	movs	r2, r3
 801190c:	0013      	movs	r3, r2
 801190e:	011b      	lsls	r3, r3, #4
 8011910:	1a9b      	subs	r3, r3, r2
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	18cb      	adds	r3, r1, r3
 8011916:	4a10      	ldr	r2, [pc, #64]	; (8011958 <TIM16_DELAY_ON+0x6c>)
 8011918:	7812      	ldrb	r2, [r2, #0]
 801191a:	189b      	adds	r3, r3, r2
 801191c:	001a      	movs	r2, r3
 801191e:	4b0f      	ldr	r3, [pc, #60]	; (801195c <TIM16_DELAY_ON+0x70>)
 8011920:	601a      	str	r2, [r3, #0]
	DELAY_NOT_DELAY = DELAY;
 8011922:	4b0f      	ldr	r3, [pc, #60]	; (8011960 <TIM16_DELAY_ON+0x74>)
 8011924:	2200      	movs	r2, #0
 8011926:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 8011928:	4b0e      	ldr	r3, [pc, #56]	; (8011964 <TIM16_DELAY_ON+0x78>)
 801192a:	2200      	movs	r2, #0
 801192c:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim16,0x00);
 801192e:	4b0e      	ldr	r3, [pc, #56]	; (8011968 <TIM16_DELAY_ON+0x7c>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2200      	movs	r2, #0
 8011934:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim16,TIM_FLAG_UPDATE);
 8011936:	4b0c      	ldr	r3, [pc, #48]	; (8011968 <TIM16_DELAY_ON+0x7c>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	2202      	movs	r2, #2
 801193c:	4252      	negs	r2, r2
 801193e:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim16);
 8011940:	4b09      	ldr	r3, [pc, #36]	; (8011968 <TIM16_DELAY_ON+0x7c>)
 8011942:	0018      	movs	r0, r3
 8011944:	f7f7 f918 	bl	8008b78 <HAL_TIM_Base_Start_IT>

}
 8011948:	46c0      	nop			; (mov r8, r8)
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	46c0      	nop			; (mov r8, r8)
 8011950:	20003994 	.word	0x20003994
 8011954:	20003995 	.word	0x20003995
 8011958:	20003996 	.word	0x20003996
 801195c:	200039ec 	.word	0x200039ec
 8011960:	20002fd1 	.word	0x20002fd1
 8011964:	20003988 	.word	0x20003988
 8011968:	200035f8 	.word	0x200035f8

0801196c <TIM16_DELAY_OFF>:
  * @brief  关闭DELAY功能
  * @param  None
  * @retval None
  */
void TIM16_DELAY_OFF(void)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	af00      	add	r7, sp, #0
	DELAY_NOT_DELAY = NOT_DELAY;
 8011970:	4b0c      	ldr	r3, [pc, #48]	; (80119a4 <TIM16_DELAY_OFF+0x38>)
 8011972:	22ff      	movs	r2, #255	; 0xff
 8011974:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim16);
 8011976:	4b0c      	ldr	r3, [pc, #48]	; (80119a8 <TIM16_DELAY_OFF+0x3c>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	6a1b      	ldr	r3, [r3, #32]
 801197c:	4a0b      	ldr	r2, [pc, #44]	; (80119ac <TIM16_DELAY_OFF+0x40>)
 801197e:	4013      	ands	r3, r2
 8011980:	d10d      	bne.n	801199e <TIM16_DELAY_OFF+0x32>
 8011982:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <TIM16_DELAY_OFF+0x3c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	6a1b      	ldr	r3, [r3, #32]
 8011988:	4a09      	ldr	r2, [pc, #36]	; (80119b0 <TIM16_DELAY_OFF+0x44>)
 801198a:	4013      	ands	r3, r2
 801198c:	d107      	bne.n	801199e <TIM16_DELAY_OFF+0x32>
 801198e:	4b06      	ldr	r3, [pc, #24]	; (80119a8 <TIM16_DELAY_OFF+0x3c>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	681a      	ldr	r2, [r3, #0]
 8011994:	4b04      	ldr	r3, [pc, #16]	; (80119a8 <TIM16_DELAY_OFF+0x3c>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2101      	movs	r1, #1
 801199a:	438a      	bics	r2, r1
 801199c:	601a      	str	r2, [r3, #0]
}
 801199e:	46c0      	nop			; (mov r8, r8)
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	20002fd1 	.word	0x20002fd1
 80119a8:	200035f8 	.word	0x200035f8
 80119ac:	00001111 	.word	0x00001111
 80119b0:	00000444 	.word	0x00000444

080119b4 <TIM17_CYCLE_ON>:
  * @brief  打开CYCLE，打开TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_ON(void)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	af00      	add	r7, sp, #0
	Cycle_On_Time = Cycle_On_s * 1000 + Cycle_On_ms;
 80119b8:	4b1d      	ldr	r3, [pc, #116]	; (8011a30 <TIM17_CYCLE_ON+0x7c>)
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	001a      	movs	r2, r3
 80119be:	0013      	movs	r3, r2
 80119c0:	015b      	lsls	r3, r3, #5
 80119c2:	1a9b      	subs	r3, r3, r2
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	189b      	adds	r3, r3, r2
 80119c8:	00db      	lsls	r3, r3, #3
 80119ca:	001a      	movs	r2, r3
 80119cc:	4b19      	ldr	r3, [pc, #100]	; (8011a34 <TIM17_CYCLE_ON+0x80>)
 80119ce:	881b      	ldrh	r3, [r3, #0]
 80119d0:	18d3      	adds	r3, r2, r3
 80119d2:	001a      	movs	r2, r3
 80119d4:	4b18      	ldr	r3, [pc, #96]	; (8011a38 <TIM17_CYCLE_ON+0x84>)
 80119d6:	601a      	str	r2, [r3, #0]
	Cycle_Close_Time = (Cycle_Close_s * 1000 + Cycle_Close_ms);
 80119d8:	4b18      	ldr	r3, [pc, #96]	; (8011a3c <TIM17_CYCLE_ON+0x88>)
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	001a      	movs	r2, r3
 80119de:	0013      	movs	r3, r2
 80119e0:	015b      	lsls	r3, r3, #5
 80119e2:	1a9b      	subs	r3, r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	189b      	adds	r3, r3, r2
 80119e8:	00db      	lsls	r3, r3, #3
 80119ea:	001a      	movs	r2, r3
 80119ec:	4b14      	ldr	r3, [pc, #80]	; (8011a40 <TIM17_CYCLE_ON+0x8c>)
 80119ee:	881b      	ldrh	r3, [r3, #0]
 80119f0:	18d3      	adds	r3, r2, r3
 80119f2:	001a      	movs	r2, r3
 80119f4:	4b13      	ldr	r3, [pc, #76]	; (8011a44 <TIM17_CYCLE_ON+0x90>)
 80119f6:	601a      	str	r2, [r3, #0]

	CYCLE_NOT_CYCLE = CYCLE;
 80119f8:	4b13      	ldr	r3, [pc, #76]	; (8011a48 <TIM17_CYCLE_ON+0x94>)
 80119fa:	220f      	movs	r2, #15
 80119fc:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 80119fe:	4b13      	ldr	r3, [pc, #76]	; (8011a4c <TIM17_CYCLE_ON+0x98>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim17,0x00);
 8011a04:	4b12      	ldr	r3, [pc, #72]	; (8011a50 <TIM17_CYCLE_ON+0x9c>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim17,TIM_FLAG_UPDATE);
 8011a0c:	4b10      	ldr	r3, [pc, #64]	; (8011a50 <TIM17_CYCLE_ON+0x9c>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	2202      	movs	r2, #2
 8011a12:	4252      	negs	r2, r2
 8011a14:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim17);
 8011a16:	4b0e      	ldr	r3, [pc, #56]	; (8011a50 <TIM17_CYCLE_ON+0x9c>)
 8011a18:	0018      	movs	r0, r3
 8011a1a:	f7f7 f8ad 	bl	8008b78 <HAL_TIM_Base_Start_IT>
	DAC_Cmd_send(1,0xff,0x00);
 8011a1e:	2200      	movs	r2, #0
 8011a20:	21ff      	movs	r1, #255	; 0xff
 8011a22:	2001      	movs	r0, #1
 8011a24:	f7fa ff28 	bl	800c878 <DAC_Cmd_send>

}
 8011a28:	46c0      	nop			; (mov r8, r8)
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	46c0      	nop			; (mov r8, r8)
 8011a30:	20003990 	.word	0x20003990
 8011a34:	20002fd6 	.word	0x20002fd6
 8011a38:	200039e4 	.word	0x200039e4
 8011a3c:	20003992 	.word	0x20003992
 8011a40:	20002fd8 	.word	0x20002fd8
 8011a44:	200039e8 	.word	0x200039e8
 8011a48:	20002fd0 	.word	0x20002fd0
 8011a4c:	20003988 	.word	0x20003988
 8011a50:	20003644 	.word	0x20003644

08011a54 <TIM17_CYCLE_OFF>:
  * @brief  关闭CYCLE，关闭TIM17定时器
  * @param  None
  * @retval None
  */
void TIM17_CYCLE_OFF(void)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	af00      	add	r7, sp, #0
	CYCLE_NOT_CYCLE = NOT_CYCLE;
 8011a58:	4b0e      	ldr	r3, [pc, #56]	; (8011a94 <TIM17_CYCLE_OFF+0x40>)
 8011a5a:	22f0      	movs	r2, #240	; 0xf0
 8011a5c:	701a      	strb	r2, [r3, #0]
	ON_OFF = OFF;
 8011a5e:	4b0e      	ldr	r3, [pc, #56]	; (8011a98 <TIM17_CYCLE_OFF+0x44>)
 8011a60:	2200      	movs	r2, #0
 8011a62:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE(&htim17);
 8011a64:	4b0d      	ldr	r3, [pc, #52]	; (8011a9c <TIM17_CYCLE_OFF+0x48>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	6a1b      	ldr	r3, [r3, #32]
 8011a6a:	4a0d      	ldr	r2, [pc, #52]	; (8011aa0 <TIM17_CYCLE_OFF+0x4c>)
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	d10d      	bne.n	8011a8c <TIM17_CYCLE_OFF+0x38>
 8011a70:	4b0a      	ldr	r3, [pc, #40]	; (8011a9c <TIM17_CYCLE_OFF+0x48>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	6a1b      	ldr	r3, [r3, #32]
 8011a76:	4a0b      	ldr	r2, [pc, #44]	; (8011aa4 <TIM17_CYCLE_OFF+0x50>)
 8011a78:	4013      	ands	r3, r2
 8011a7a:	d107      	bne.n	8011a8c <TIM17_CYCLE_OFF+0x38>
 8011a7c:	4b07      	ldr	r3, [pc, #28]	; (8011a9c <TIM17_CYCLE_OFF+0x48>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	4b06      	ldr	r3, [pc, #24]	; (8011a9c <TIM17_CYCLE_OFF+0x48>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2101      	movs	r1, #1
 8011a88:	438a      	bics	r2, r1
 8011a8a:	601a      	str	r2, [r3, #0]
}
 8011a8c:	46c0      	nop			; (mov r8, r8)
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	46c0      	nop			; (mov r8, r8)
 8011a94:	20002fd0 	.word	0x20002fd0
 8011a98:	20003988 	.word	0x20003988
 8011a9c:	20003644 	.word	0x20003644
 8011aa0:	00001111 	.word	0x00001111
 8011aa4:	00000444 	.word	0x00000444

08011aa8 <SPI_OLED_SendData>:
	* @brief  向OLED发送数据
	* @param  要发送的数据
	* @retval None
	*/
void SPI_OLED_SendData(uint8_t byte)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	0002      	movs	r2, r0
 8011ab0:	1dfb      	adds	r3, r7, #7
 8011ab2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011ab4:	4b15      	ldr	r3, [pc, #84]	; (8011b0c <SPI_OLED_SendData+0x64>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	68da      	ldr	r2, [r3, #12]
 8011aba:	4b14      	ldr	r3, [pc, #80]	; (8011b0c <SPI_OLED_SendData+0x64>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	2101      	movs	r1, #1
 8011ac0:	438a      	bics	r2, r1
 8011ac2:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011ac4:	4b12      	ldr	r3, [pc, #72]	; (8011b10 <SPI_OLED_SendData+0x68>)
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	2102      	movs	r1, #2
 8011aca:	0018      	movs	r0, r3
 8011acc:	f7f5 fa55 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011ad0:	4b0f      	ldr	r3, [pc, #60]	; (8011b10 <SPI_OLED_SendData+0x68>)
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	0018      	movs	r0, r3
 8011ad8:	f7f5 fa4f 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 8011adc:	1df9      	adds	r1, r7, #7
 8011ade:	480d      	ldr	r0, [pc, #52]	; (8011b14 <SPI_OLED_SendData+0x6c>)
 8011ae0:	230a      	movs	r3, #10
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	f7f6 f958 	bl	8007d98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011ae8:	4b09      	ldr	r3, [pc, #36]	; (8011b10 <SPI_OLED_SendData+0x68>)
 8011aea:	2201      	movs	r2, #1
 8011aec:	2101      	movs	r1, #1
 8011aee:	0018      	movs	r0, r3
 8011af0:	f7f5 fa43 	bl	8006f7a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011af4:	4b05      	ldr	r3, [pc, #20]	; (8011b0c <SPI_OLED_SendData+0x64>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	68da      	ldr	r2, [r3, #12]
 8011afa:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <SPI_OLED_SendData+0x64>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2101      	movs	r1, #1
 8011b00:	430a      	orrs	r2, r1
 8011b02:	60da      	str	r2, [r3, #12]

}
 8011b04:	46c0      	nop			; (mov r8, r8)
 8011b06:	46bd      	mov	sp, r7
 8011b08:	b002      	add	sp, #8
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	2000347c 	.word	0x2000347c
 8011b10:	50000800 	.word	0x50000800
 8011b14:	200033c8 	.word	0x200033c8

08011b18 <SPI_OLED_SendCommond>:
	* @brief  向OLED发送命令
	* @param  要发送的命令
	* @retval None
	*/
void SPI_OLED_SendCommond(uint8_t byte)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	0002      	movs	r2, r0
 8011b20:	1dfb      	adds	r3, r7, #7
 8011b22:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011b24:	4b15      	ldr	r3, [pc, #84]	; (8011b7c <SPI_OLED_SendCommond+0x64>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	68da      	ldr	r2, [r3, #12]
 8011b2a:	4b14      	ldr	r3, [pc, #80]	; (8011b7c <SPI_OLED_SendCommond+0x64>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2101      	movs	r1, #1
 8011b30:	438a      	bics	r2, r1
 8011b32:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);//dc 0
 8011b34:	4b12      	ldr	r3, [pc, #72]	; (8011b80 <SPI_OLED_SendCommond+0x68>)
 8011b36:	2200      	movs	r2, #0
 8011b38:	2102      	movs	r1, #2
 8011b3a:	0018      	movs	r0, r3
 8011b3c:	f7f5 fa1d 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011b40:	4b0f      	ldr	r3, [pc, #60]	; (8011b80 <SPI_OLED_SendCommond+0x68>)
 8011b42:	2200      	movs	r2, #0
 8011b44:	2101      	movs	r1, #1
 8011b46:	0018      	movs	r0, r3
 8011b48:	f7f5 fa17 	bl	8006f7a <HAL_GPIO_WritePin>


	HAL_SPI_Transmit(&hspi1,&byte,1, 10);
 8011b4c:	1df9      	adds	r1, r7, #7
 8011b4e:	480d      	ldr	r0, [pc, #52]	; (8011b84 <SPI_OLED_SendCommond+0x6c>)
 8011b50:	230a      	movs	r3, #10
 8011b52:	2201      	movs	r2, #1
 8011b54:	f7f6 f920 	bl	8007d98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011b58:	4b09      	ldr	r3, [pc, #36]	; (8011b80 <SPI_OLED_SendCommond+0x68>)
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	2101      	movs	r1, #1
 8011b5e:	0018      	movs	r0, r3
 8011b60:	f7f5 fa0b 	bl	8006f7a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011b64:	4b05      	ldr	r3, [pc, #20]	; (8011b7c <SPI_OLED_SendCommond+0x64>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	68da      	ldr	r2, [r3, #12]
 8011b6a:	4b04      	ldr	r3, [pc, #16]	; (8011b7c <SPI_OLED_SendCommond+0x64>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2101      	movs	r1, #1
 8011b70:	430a      	orrs	r2, r1
 8011b72:	60da      	str	r2, [r3, #12]
}
 8011b74:	46c0      	nop			; (mov r8, r8)
 8011b76:	46bd      	mov	sp, r7
 8011b78:	b002      	add	sp, #8
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	2000347c 	.word	0x2000347c
 8011b80:	50000800 	.word	0x50000800
 8011b84:	200033c8 	.word	0x200033c8

08011b88 <OLED_Init>:

void OLED_Init(void)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	af00      	add	r7, sp, #0

	res_OLED;							//将SPI3_RES引脚置0
 8011b8c:	4b6b      	ldr	r3, [pc, #428]	; (8011d3c <OLED_Init+0x1b4>)
 8011b8e:	2200      	movs	r2, #0
 8011b90:	2104      	movs	r1, #4
 8011b92:	0018      	movs	r0, r3
 8011b94:	f7f5 f9f1 	bl	8006f7a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011b98:	2001      	movs	r0, #1
 8011b9a:	f7f3 fb49 	bl	8005230 <HAL_Delay>
	set_OLED; 						//将SPI3_RES引脚置1
 8011b9e:	4b67      	ldr	r3, [pc, #412]	; (8011d3c <OLED_Init+0x1b4>)
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	2104      	movs	r1, #4
 8011ba4:	0018      	movs	r0, r3
 8011ba6:	f7f5 f9e8 	bl	8006f7a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8011baa:	2005      	movs	r0, #5
 8011bac:	f7f3 fb40 	bl	8005230 <HAL_Delay>

	SPI_OLED_SendCommond(Set_Command_Lock);//开锁
 8011bb0:	20fd      	movs	r0, #253	; 0xfd
 8011bb2:	f7ff ffb1 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x12);
 8011bb6:	2012      	movs	r0, #18
 8011bb8:	f7ff ff76 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Column_Address_Commond);//设置列地址
 8011bbc:	2015      	movs	r0, #21
 8011bbe:	f7ff ffab 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c);
 8011bc2:	201c      	movs	r0, #28
 8011bc4:	f7ff ff70 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x5b);
 8011bc8:	205b      	movs	r0, #91	; 0x5b
 8011bca:	f7ff ff6d 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Row_Address_Commond);//设置行地址
 8011bce:	2075      	movs	r0, #117	; 0x75
 8011bd0:	f7ff ffa2 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	f7ff ff67 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3f);
 8011bda:	203f      	movs	r0, #63	; 0x3f
 8011bdc:	f7ff ff64 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Sleep_mode_ON);//休眠
 8011be0:	20ae      	movs	r0, #174	; 0xae
 8011be2:	f7ff ff99 	bl	8011b18 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Front_Clock_Divider);//设置前时钟分频器/振荡器频率
 8011be6:	20b3      	movs	r0, #179	; 0xb3
 8011be8:	f7ff ff96 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x91);
 8011bec:	2091      	movs	r0, #145	; 0x91
 8011bee:	f7ff ff5b 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_MUX_Ratio);//设置多路选择开关比值
 8011bf2:	20ca      	movs	r0, #202	; 0xca
 8011bf4:	f7ff ff90 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x3f);
 8011bf8:	203f      	movs	r0, #63	; 0x3f
 8011bfa:	f7ff ff55 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Offset);//从0-127设置垂直滚动
 8011bfe:	20a2      	movs	r0, #162	; 0xa2
 8011c00:	f7ff ff8a 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011c04:	2000      	movs	r0, #0
 8011c06:	f7ff ff4f 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Display_Start_Line);//设置启动行
 8011c0a:	20a1      	movs	r0, #161	; 0xa1
 8011c0c:	f7ff ff84 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011c10:	2000      	movs	r0, #0
 8011c12:	f7ff ff49 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//设置正常显示
 8011c16:	20a6      	movs	r0, #166	; 0xa6
 8011c18:	f7ff ff7e 	bl	8011b18 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8011c1c:	20a0      	movs	r0, #160	; 0xa0
 8011c1e:	f7ff ff7b 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8011c22:	2014      	movs	r0, #20
 8011c24:	f7ff ff40 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8011c28:	2011      	movs	r0, #17
 8011c2a:	f7ff ff3d 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_GPIO);//引脚设定
 8011c2e:	20b5      	movs	r0, #181	; 0xb5
 8011c30:	f7ff ff72 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x00);
 8011c34:	2000      	movs	r0, #0
 8011c36:	f7ff ff37 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Function_Selection);//内部电压调节
 8011c3a:	20ab      	movs	r0, #171	; 0xab
 8011c3c:	f7ff ff6c 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x01);
 8011c40:	2001      	movs	r0, #1
 8011c42:	f7ff ff31 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xb4);
 8011c46:	20b4      	movs	r0, #180	; 0xb4
 8011c48:	f7ff ff66 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa0);
 8011c4c:	20a0      	movs	r0, #160	; 0xa0
 8011c4e:	f7ff ff2b 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0xfd);
 8011c52:	20fd      	movs	r0, #253	; 0xfd
 8011c54:	f7ff ff28 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Contrast_Current);//设置对比度电流
 8011c58:	20c1      	movs	r0, #193	; 0xc1
 8011c5a:	f7ff ff5d 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xaf);
 8011c5e:	20af      	movs	r0, #175	; 0xaf
 8011c60:	f7ff ff22 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Master_Contrast_Current_Control);//主对比度电流控制
 8011c64:	20c7      	movs	r0, #199	; 0xc7
 8011c66:	f7ff ff57 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0f);
 8011c6a:	200f      	movs	r0, #15
 8011c6c:	f7ff ff1c 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Gray_Scale_Table);//设置灰度表
 8011c70:	20b8      	movs	r0, #184	; 0xb8
 8011c72:	f7ff ff51 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x0c);
 8011c76:	200c      	movs	r0, #12
 8011c78:	f7ff ff16 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x18);
 8011c7c:	2018      	movs	r0, #24
 8011c7e:	f7ff ff13 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x24);
 8011c82:	2024      	movs	r0, #36	; 0x24
 8011c84:	f7ff ff10 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x30);
 8011c88:	2030      	movs	r0, #48	; 0x30
 8011c8a:	f7ff ff0d 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x3c);
 8011c8e:	203c      	movs	r0, #60	; 0x3c
 8011c90:	f7ff ff0a 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x48);
 8011c94:	2048      	movs	r0, #72	; 0x48
 8011c96:	f7ff ff07 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x54);
 8011c9a:	2054      	movs	r0, #84	; 0x54
 8011c9c:	f7ff ff04 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x60);
 8011ca0:	2060      	movs	r0, #96	; 0x60
 8011ca2:	f7ff ff01 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x6c);
 8011ca6:	206c      	movs	r0, #108	; 0x6c
 8011ca8:	f7ff fefe 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x78);
 8011cac:	2078      	movs	r0, #120	; 0x78
 8011cae:	f7ff fefb 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x84);
 8011cb2:	2084      	movs	r0, #132	; 0x84
 8011cb4:	f7ff fef8 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x90);
 8011cb8:	2090      	movs	r0, #144	; 0x90
 8011cba:	f7ff fef5 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x9c);
 8011cbe:	209c      	movs	r0, #156	; 0x9c
 8011cc0:	f7ff fef2 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0xa8);
 8011cc4:	20a8      	movs	r0, #168	; 0xa8
 8011cc6:	f7ff feef 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0xb4);
 8011cca:	20b4      	movs	r0, #180	; 0xb4
 8011ccc:	f7ff feec 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Enable_Gray_Scale_table);//开启灰度表
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	f7ff ff21 	bl	8011b18 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Set_Phase_Length);//设置相位长度
 8011cd6:	20b1      	movs	r0, #177	; 0xb1
 8011cd8:	f7ff ff1e 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xE2);
 8011cdc:	20e2      	movs	r0, #226	; 0xe2
 8011cde:	f7ff fee3 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(0xD1); 								//Display Enhancement B
 8011ce2:	20d1      	movs	r0, #209	; 0xd1
 8011ce4:	f7ff ff18 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0xa2);
 8011ce8:	20a2      	movs	r0, #162	; 0xa2
 8011cea:	f7ff fedd 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x20);										//反显
 8011cee:	2020      	movs	r0, #32
 8011cf0:	f7ff feda 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Pre_charge_voltage);//设置预充电电压
 8011cf4:	20bb      	movs	r0, #187	; 0xbb
 8011cf6:	f7ff ff0f 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1F);
 8011cfa:	201f      	movs	r0, #31
 8011cfc:	f7ff fed4 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_Second_Precharge_Period);//设置第二预充期间
 8011d00:	20b6      	movs	r0, #182	; 0xb6
 8011d02:	f7ff ff09 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x08);
 8011d06:	2008      	movs	r0, #8
 8011d08:	f7ff fece 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Set_VCOMH );//设置COM取消选择电压等级
 8011d0c:	20be      	movs	r0, #190	; 0xbe
 8011d0e:	f7ff ff03 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x07);
 8011d12:	2007      	movs	r0, #7
 8011d14:	f7ff fec8 	bl	8011aa8 <SPI_OLED_SendData>

	SPI_OLED_SendCommond(Normal_Display);//正常显示
 8011d18:	20a6      	movs	r0, #166	; 0xa6
 8011d1a:	f7ff fefd 	bl	8011b18 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Exit_Partial_Display);//该命令被发送到退出部分显示模式
 8011d1e:	20a9      	movs	r0, #169	; 0xa9
 8011d20:	f7ff fefa 	bl	8011b18 <SPI_OLED_SendCommond>

	SPI_OLED_SendCommond(Write_RAM_Command);
 8011d24:	205c      	movs	r0, #92	; 0x5c
 8011d26:	f7ff fef7 	bl	8011b18 <SPI_OLED_SendCommond>

	Fill_RAM(0x00);   //清屏
 8011d2a:	2000      	movs	r0, #0
 8011d2c:	f000 fcf8 	bl	8012720 <Fill_RAM>

	SPI_OLED_SendCommond(Sleep_mode_OFF);//关休眠
 8011d30:	20af      	movs	r0, #175	; 0xaf
 8011d32:	f7ff fef1 	bl	8011b18 <SPI_OLED_SendCommond>

}
 8011d36:	46c0      	nop			; (mov r8, r8)
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	50000800 	.word	0x50000800

08011d40 <Font_1Bit_To_4Bit>:
 * @brief  转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据（字模表的元素）
 * @retval None
 */
void Font_1Bit_To_4Bit(uint8_t Data)
{
 8011d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d42:	b087      	sub	sp, #28
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	0002      	movs	r2, r0
 8011d48:	1dfb      	adds	r3, r7, #7
 8011d4a:	701a      	strb	r2, [r3, #0]
	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 uint8_t mask=0x01;
 8011d4c:	2317      	movs	r3, #23
 8011d4e:	18fb      	adds	r3, r7, r3
 8011d50:	2201      	movs	r2, #1
 8011d52:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8011d54:	230c      	movs	r3, #12
 8011d56:	18fb      	adds	r3, r7, r3
 8011d58:	2200      	movs	r2, #0
 8011d5a:	601a      	str	r2, [r3, #0]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 8011d60:	2308      	movs	r3, #8
 8011d62:	18fb      	adds	r3, r7, r3
 8011d64:	2200      	movs	r2, #0
 8011d66:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 8011d68:	2316      	movs	r3, #22
 8011d6a:	18fb      	adds	r3, r7, r3
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	701a      	strb	r2, [r3, #0]
 8011d70:	e037      	b.n	8011de2 <Font_1Bit_To_4Bit+0xa2>
	 {
		 if((Data&mask)==mask) temp[i]|=Light;//low 4 bits set
 8011d72:	1dfb      	adds	r3, r7, #7
 8011d74:	2117      	movs	r1, #23
 8011d76:	187a      	adds	r2, r7, r1
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	7812      	ldrb	r2, [r2, #0]
 8011d7c:	4013      	ands	r3, r2
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	187a      	adds	r2, r7, r1
 8011d82:	7812      	ldrb	r2, [r2, #0]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d10e      	bne.n	8011da6 <Font_1Bit_To_4Bit+0x66>
 8011d88:	2016      	movs	r0, #22
 8011d8a:	183b      	adds	r3, r7, r0
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	240c      	movs	r4, #12
 8011d90:	193a      	adds	r2, r7, r4
 8011d92:	5cd1      	ldrb	r1, [r2, r3]
 8011d94:	4b54      	ldr	r3, [pc, #336]	; (8011ee8 <Font_1Bit_To_4Bit+0x1a8>)
 8011d96:	781a      	ldrb	r2, [r3, #0]
 8011d98:	183b      	adds	r3, r7, r0
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	430a      	orrs	r2, r1
 8011d9e:	b2d1      	uxtb	r1, r2
 8011da0:	193a      	adds	r2, r7, r4
 8011da2:	54d1      	strb	r1, [r2, r3]
 8011da4:	e011      	b.n	8011dca <Font_1Bit_To_4Bit+0x8a>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 8011da6:	2116      	movs	r1, #22
 8011da8:	187b      	adds	r3, r7, r1
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	200c      	movs	r0, #12
 8011dae:	183a      	adds	r2, r7, r0
 8011db0:	5cd3      	ldrb	r3, [r2, r3]
 8011db2:	b25b      	sxtb	r3, r3
 8011db4:	4a4c      	ldr	r2, [pc, #304]	; (8011ee8 <Font_1Bit_To_4Bit+0x1a8>)
 8011db6:	7812      	ldrb	r2, [r2, #0]
 8011db8:	0112      	lsls	r2, r2, #4
 8011dba:	b252      	sxtb	r2, r2
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	b25a      	sxtb	r2, r3
 8011dc0:	187b      	adds	r3, r7, r1
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	b2d1      	uxtb	r1, r2
 8011dc6:	183a      	adds	r2, r7, r0
 8011dc8:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8011dca:	2317      	movs	r3, #23
 8011dcc:	18fa      	adds	r2, r7, r3
 8011dce:	18fb      	adds	r3, r7, r3
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	18db      	adds	r3, r3, r3
 8011dd4:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 8011dd6:	2116      	movs	r1, #22
 8011dd8:	187b      	adds	r3, r7, r1
 8011dda:	781a      	ldrb	r2, [r3, #0]
 8011ddc:	187b      	adds	r3, r7, r1
 8011dde:	3201      	adds	r2, #1
 8011de0:	701a      	strb	r2, [r3, #0]
 8011de2:	2316      	movs	r3, #22
 8011de4:	18fb      	adds	r3, r7, r3
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	2b07      	cmp	r3, #7
 8011dea:	d9c2      	bls.n	8011d72 <Font_1Bit_To_4Bit+0x32>

	 }
	 mask=0x0f;
 8011dec:	2317      	movs	r3, #23
 8011dee:	18fb      	adds	r3, r7, r3
 8011df0:	220f      	movs	r2, #15
 8011df2:	701a      	strb	r2, [r3, #0]
	 uint8_t index=3;
 8011df4:	2315      	movs	r3, #21
 8011df6:	18fb      	adds	r3, r7, r3
 8011df8:	2203      	movs	r2, #3
 8011dfa:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8011dfc:	2314      	movs	r3, #20
 8011dfe:	18fb      	adds	r3, r7, r3
 8011e00:	2200      	movs	r2, #0
 8011e02:	701a      	strb	r2, [r3, #0]
 8011e04:	e03d      	b.n	8011e82 <Font_1Bit_To_4Bit+0x142>
	 {
		 data_send[index]|=(temp[j]&mask);//0 2 4 6 low
 8011e06:	2015      	movs	r0, #21
 8011e08:	183b      	adds	r3, r7, r0
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	2508      	movs	r5, #8
 8011e0e:	197a      	adds	r2, r7, r5
 8011e10:	5cd1      	ldrb	r1, [r2, r3]
 8011e12:	2414      	movs	r4, #20
 8011e14:	193b      	adds	r3, r7, r4
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	260c      	movs	r6, #12
 8011e1a:	19ba      	adds	r2, r7, r6
 8011e1c:	5cd3      	ldrb	r3, [r2, r3]
 8011e1e:	2217      	movs	r2, #23
 8011e20:	18ba      	adds	r2, r7, r2
 8011e22:	7812      	ldrb	r2, [r2, #0]
 8011e24:	4013      	ands	r3, r2
 8011e26:	b2da      	uxtb	r2, r3
 8011e28:	183b      	adds	r3, r7, r0
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	430a      	orrs	r2, r1
 8011e2e:	b2d1      	uxtb	r1, r2
 8011e30:	197a      	adds	r2, r7, r5
 8011e32:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8011e34:	183b      	adds	r3, r7, r0
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	197a      	adds	r2, r7, r5
 8011e3a:	5cd3      	ldrb	r3, [r2, r3]
 8011e3c:	b25a      	sxtb	r2, r3
 8011e3e:	193b      	adds	r3, r7, r4
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	3301      	adds	r3, #1
 8011e44:	19b9      	adds	r1, r7, r6
 8011e46:	5ccb      	ldrb	r3, [r1, r3]
 8011e48:	2117      	movs	r1, #23
 8011e4a:	1879      	adds	r1, r7, r1
 8011e4c:	7809      	ldrb	r1, [r1, #0]
 8011e4e:	400b      	ands	r3, r1
 8011e50:	b2db      	uxtb	r3, r3
 8011e52:	011b      	lsls	r3, r3, #4
 8011e54:	b25b      	sxtb	r3, r3
 8011e56:	4313      	orrs	r3, r2
 8011e58:	b25a      	sxtb	r2, r3
 8011e5a:	183b      	adds	r3, r7, r0
 8011e5c:	781b      	ldrb	r3, [r3, #0]
 8011e5e:	b2d1      	uxtb	r1, r2
 8011e60:	197a      	adds	r2, r7, r5
 8011e62:	54d1      	strb	r1, [r2, r3]
		 j++;
 8011e64:	193b      	adds	r3, r7, r4
 8011e66:	781a      	ldrb	r2, [r3, #0]
 8011e68:	193b      	adds	r3, r7, r4
 8011e6a:	3201      	adds	r2, #1
 8011e6c:	701a      	strb	r2, [r3, #0]
		 j++;
 8011e6e:	193b      	adds	r3, r7, r4
 8011e70:	781a      	ldrb	r2, [r3, #0]
 8011e72:	193b      	adds	r3, r7, r4
 8011e74:	3201      	adds	r2, #1
 8011e76:	701a      	strb	r2, [r3, #0]
		 index--;
 8011e78:	183b      	adds	r3, r7, r0
 8011e7a:	781a      	ldrb	r2, [r3, #0]
 8011e7c:	183b      	adds	r3, r7, r0
 8011e7e:	3a01      	subs	r2, #1
 8011e80:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8011e82:	2314      	movs	r3, #20
 8011e84:	18fb      	adds	r3, r7, r3
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	2b07      	cmp	r3, #7
 8011e8a:	d9bc      	bls.n	8011e06 <Font_1Bit_To_4Bit+0xc6>

	 }
	 //写RAM

		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8011e8c:	4b17      	ldr	r3, [pc, #92]	; (8011eec <Font_1Bit_To_4Bit+0x1ac>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	68da      	ldr	r2, [r3, #12]
 8011e92:	4b16      	ldr	r3, [pc, #88]	; (8011eec <Font_1Bit_To_4Bit+0x1ac>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2101      	movs	r1, #1
 8011e98:	438a      	bics	r2, r1
 8011e9a:	60da      	str	r2, [r3, #12]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8011e9c:	4b14      	ldr	r3, [pc, #80]	; (8011ef0 <Font_1Bit_To_4Bit+0x1b0>)
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	2102      	movs	r1, #2
 8011ea2:	0018      	movs	r0, r3
 8011ea4:	f7f5 f869 	bl	8006f7a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8011ea8:	4b11      	ldr	r3, [pc, #68]	; (8011ef0 <Font_1Bit_To_4Bit+0x1b0>)
 8011eaa:	2200      	movs	r2, #0
 8011eac:	2101      	movs	r1, #1
 8011eae:	0018      	movs	r0, r3
 8011eb0:	f7f5 f863 	bl	8006f7a <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1,data_send,4,100);
 8011eb4:	2308      	movs	r3, #8
 8011eb6:	18f9      	adds	r1, r7, r3
 8011eb8:	480e      	ldr	r0, [pc, #56]	; (8011ef4 <Font_1Bit_To_4Bit+0x1b4>)
 8011eba:	2364      	movs	r3, #100	; 0x64
 8011ebc:	2204      	movs	r2, #4
 8011ebe:	f7f5 ff6b 	bl	8007d98 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8011ec2:	4b0b      	ldr	r3, [pc, #44]	; (8011ef0 <Font_1Bit_To_4Bit+0x1b0>)
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	2101      	movs	r1, #1
 8011ec8:	0018      	movs	r0, r3
 8011eca:	f7f5 f856 	bl	8006f7a <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8011ece:	4b07      	ldr	r3, [pc, #28]	; (8011eec <Font_1Bit_To_4Bit+0x1ac>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	68da      	ldr	r2, [r3, #12]
 8011ed4:	4b05      	ldr	r3, [pc, #20]	; (8011eec <Font_1Bit_To_4Bit+0x1ac>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2101      	movs	r1, #1
 8011eda:	430a      	orrs	r2, r1
 8011edc:	60da      	str	r2, [r3, #12]


}
 8011ede:	46c0      	nop			; (mov r8, r8)
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	b007      	add	sp, #28
 8011ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ee6:	46c0      	nop			; (mov r8, r8)
 8011ee8:	200030b7 	.word	0x200030b7
 8011eec:	2000347c 	.word	0x2000347c
 8011ef0:	50000800 	.word	0x50000800
 8011ef4:	200033c8 	.word	0x200033c8

08011ef8 <_1Bit_To_4Bit_16x32>:

static void _1Bit_To_4Bit_16x32(uint8_t* Pdata)
{
 8011ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011efa:	b0c7      	sub	sp, #284	; 0x11c
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]

	 uint8_t data_send_buffer[4*64]={0x00};
 8011f00:	4b9e      	ldr	r3, [pc, #632]	; (801217c <_1Bit_To_4Bit_16x32+0x284>)
 8011f02:	248c      	movs	r4, #140	; 0x8c
 8011f04:	0064      	lsls	r4, r4, #1
 8011f06:	191b      	adds	r3, r3, r4
 8011f08:	19db      	adds	r3, r3, r7
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	601a      	str	r2, [r3, #0]
 8011f0e:	3304      	adds	r3, #4
 8011f10:	22fc      	movs	r2, #252	; 0xfc
 8011f12:	2100      	movs	r1, #0
 8011f14:	0018      	movs	r0, r3
 8011f16:	f002 fb90 	bl	801463a <memset>
	 uint8_t mask=0x01;
 8011f1a:	2318      	movs	r3, #24
 8011f1c:	33ff      	adds	r3, #255	; 0xff
 8011f1e:	18fb      	adds	r3, r7, r3
 8011f20:	2201      	movs	r2, #1
 8011f22:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 8011f24:	4b96      	ldr	r3, [pc, #600]	; (8012180 <_1Bit_To_4Bit_16x32+0x288>)
 8011f26:	191b      	adds	r3, r3, r4
 8011f28:	19db      	adds	r3, r3, r7
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	601a      	str	r2, [r3, #0]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<64;index++)
 8011f32:	238b      	movs	r3, #139	; 0x8b
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	18fb      	adds	r3, r7, r3
 8011f38:	2200      	movs	r2, #0
 8011f3a:	701a      	strb	r2, [r3, #0]
 8011f3c:	e0e9      	b.n	8012112 <_1Bit_To_4Bit_16x32+0x21a>
	 {
		 memset(&temp[0],0,8);
 8011f3e:	2308      	movs	r3, #8
 8011f40:	18fb      	adds	r3, r7, r3
 8011f42:	2208      	movs	r2, #8
 8011f44:	2100      	movs	r1, #0
 8011f46:	0018      	movs	r0, r3
 8011f48:	f002 fb77 	bl	801463a <memset>
		 mask=0x01;
 8011f4c:	2318      	movs	r3, #24
 8011f4e:	33ff      	adds	r3, #255	; 0xff
 8011f50:	18fb      	adds	r3, r7, r3
 8011f52:	2201      	movs	r2, #1
 8011f54:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 8011f56:	2316      	movs	r3, #22
 8011f58:	33ff      	adds	r3, #255	; 0xff
 8011f5a:	18fb      	adds	r3, r7, r3
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	701a      	strb	r2, [r3, #0]
 8011f60:	e04b      	b.n	8011ffa <_1Bit_To_4Bit_16x32+0x102>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 8011f62:	238b      	movs	r3, #139	; 0x8b
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	18fb      	adds	r3, r7, r3
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	18d3      	adds	r3, r2, r3
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	2118      	movs	r1, #24
 8011f72:	31ff      	adds	r1, #255	; 0xff
 8011f74:	187a      	adds	r2, r7, r1
 8011f76:	7812      	ldrb	r2, [r2, #0]
 8011f78:	4013      	ands	r3, r2
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	187a      	adds	r2, r7, r1
 8011f7e:	7812      	ldrb	r2, [r2, #0]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d114      	bne.n	8011fae <_1Bit_To_4Bit_16x32+0xb6>
 8011f84:	2016      	movs	r0, #22
 8011f86:	30ff      	adds	r0, #255	; 0xff
 8011f88:	183b      	adds	r3, r7, r0
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	4a7c      	ldr	r2, [pc, #496]	; (8012180 <_1Bit_To_4Bit_16x32+0x288>)
 8011f8e:	248c      	movs	r4, #140	; 0x8c
 8011f90:	0064      	lsls	r4, r4, #1
 8011f92:	1912      	adds	r2, r2, r4
 8011f94:	19d2      	adds	r2, r2, r7
 8011f96:	5cd1      	ldrb	r1, [r2, r3]
 8011f98:	4b7a      	ldr	r3, [pc, #488]	; (8012184 <_1Bit_To_4Bit_16x32+0x28c>)
 8011f9a:	781a      	ldrb	r2, [r3, #0]
 8011f9c:	183b      	adds	r3, r7, r0
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	430a      	orrs	r2, r1
 8011fa2:	b2d1      	uxtb	r1, r2
 8011fa4:	4a76      	ldr	r2, [pc, #472]	; (8012180 <_1Bit_To_4Bit_16x32+0x288>)
 8011fa6:	1912      	adds	r2, r2, r4
 8011fa8:	19d2      	adds	r2, r2, r7
 8011faa:	54d1      	strb	r1, [r2, r3]
 8011fac:	e017      	b.n	8011fde <_1Bit_To_4Bit_16x32+0xe6>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 8011fae:	2116      	movs	r1, #22
 8011fb0:	31ff      	adds	r1, #255	; 0xff
 8011fb2:	187b      	adds	r3, r7, r1
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	4a72      	ldr	r2, [pc, #456]	; (8012180 <_1Bit_To_4Bit_16x32+0x288>)
 8011fb8:	208c      	movs	r0, #140	; 0x8c
 8011fba:	0040      	lsls	r0, r0, #1
 8011fbc:	1812      	adds	r2, r2, r0
 8011fbe:	19d2      	adds	r2, r2, r7
 8011fc0:	5cd3      	ldrb	r3, [r2, r3]
 8011fc2:	b25b      	sxtb	r3, r3
 8011fc4:	4a6f      	ldr	r2, [pc, #444]	; (8012184 <_1Bit_To_4Bit_16x32+0x28c>)
 8011fc6:	7812      	ldrb	r2, [r2, #0]
 8011fc8:	0112      	lsls	r2, r2, #4
 8011fca:	b252      	sxtb	r2, r2
 8011fcc:	4013      	ands	r3, r2
 8011fce:	b25a      	sxtb	r2, r3
 8011fd0:	187b      	adds	r3, r7, r1
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	b2d1      	uxtb	r1, r2
 8011fd6:	4a6a      	ldr	r2, [pc, #424]	; (8012180 <_1Bit_To_4Bit_16x32+0x288>)
 8011fd8:	1812      	adds	r2, r2, r0
 8011fda:	19d2      	adds	r2, r2, r7
 8011fdc:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 8011fde:	2318      	movs	r3, #24
 8011fe0:	33ff      	adds	r3, #255	; 0xff
 8011fe2:	18fa      	adds	r2, r7, r3
 8011fe4:	18fb      	adds	r3, r7, r3
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	18db      	adds	r3, r3, r3
 8011fea:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 8011fec:	2116      	movs	r1, #22
 8011fee:	31ff      	adds	r1, #255	; 0xff
 8011ff0:	187b      	adds	r3, r7, r1
 8011ff2:	781a      	ldrb	r2, [r3, #0]
 8011ff4:	187b      	adds	r3, r7, r1
 8011ff6:	3201      	adds	r2, #1
 8011ff8:	701a      	strb	r2, [r3, #0]
 8011ffa:	2316      	movs	r3, #22
 8011ffc:	33ff      	adds	r3, #255	; 0xff
 8011ffe:	18fb      	adds	r3, r7, r3
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	2b07      	cmp	r3, #7
 8012004:	d9ad      	bls.n	8011f62 <_1Bit_To_4Bit_16x32+0x6a>

		 }

		 mask=0x0f;
 8012006:	2318      	movs	r3, #24
 8012008:	33ff      	adds	r3, #255	; 0xff
 801200a:	18fb      	adds	r3, r7, r3
 801200c:	220f      	movs	r2, #15
 801200e:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 8012010:	238a      	movs	r3, #138	; 0x8a
 8012012:	005b      	lsls	r3, r3, #1
 8012014:	18fb      	adds	r3, r7, r3
 8012016:	2203      	movs	r2, #3
 8012018:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 801201a:	2314      	movs	r3, #20
 801201c:	33ff      	adds	r3, #255	; 0xff
 801201e:	18fb      	adds	r3, r7, r3
 8012020:	2200      	movs	r2, #0
 8012022:	701a      	strb	r2, [r3, #0]
 8012024:	e068      	b.n	80120f8 <_1Bit_To_4Bit_16x32+0x200>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 8012026:	208a      	movs	r0, #138	; 0x8a
 8012028:	0040      	lsls	r0, r0, #1
 801202a:	183b      	adds	r3, r7, r0
 801202c:	781a      	ldrb	r2, [r3, #0]
 801202e:	238b      	movs	r3, #139	; 0x8b
 8012030:	005b      	lsls	r3, r3, #1
 8012032:	18fb      	adds	r3, r7, r3
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	18d3      	adds	r3, r2, r3
 801203a:	4a50      	ldr	r2, [pc, #320]	; (801217c <_1Bit_To_4Bit_16x32+0x284>)
 801203c:	258c      	movs	r5, #140	; 0x8c
 801203e:	006d      	lsls	r5, r5, #1
 8012040:	1952      	adds	r2, r2, r5
 8012042:	19d2      	adds	r2, r2, r7
 8012044:	5cd1      	ldrb	r1, [r2, r3]
 8012046:	2614      	movs	r6, #20
 8012048:	36ff      	adds	r6, #255	; 0xff
 801204a:	19bb      	adds	r3, r7, r6
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	4a4c      	ldr	r2, [pc, #304]	; (8012180 <_1Bit_To_4Bit_16x32+0x288>)
 8012050:	1952      	adds	r2, r2, r5
 8012052:	19d2      	adds	r2, r2, r7
 8012054:	5cd3      	ldrb	r3, [r2, r3]
 8012056:	2218      	movs	r2, #24
 8012058:	32ff      	adds	r2, #255	; 0xff
 801205a:	18ba      	adds	r2, r7, r2
 801205c:	7812      	ldrb	r2, [r2, #0]
 801205e:	4013      	ands	r3, r2
 8012060:	b2da      	uxtb	r2, r3
 8012062:	0004      	movs	r4, r0
 8012064:	183b      	adds	r3, r7, r0
 8012066:	7818      	ldrb	r0, [r3, #0]
 8012068:	238b      	movs	r3, #139	; 0x8b
 801206a:	005b      	lsls	r3, r3, #1
 801206c:	18fb      	adds	r3, r7, r3
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	18c3      	adds	r3, r0, r3
 8012074:	430a      	orrs	r2, r1
 8012076:	b2d1      	uxtb	r1, r2
 8012078:	4a40      	ldr	r2, [pc, #256]	; (801217c <_1Bit_To_4Bit_16x32+0x284>)
 801207a:	1950      	adds	r0, r2, r5
 801207c:	19c2      	adds	r2, r0, r7
 801207e:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 8012080:	0020      	movs	r0, r4
 8012082:	183b      	adds	r3, r7, r0
 8012084:	781a      	ldrb	r2, [r3, #0]
 8012086:	238b      	movs	r3, #139	; 0x8b
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	18fb      	adds	r3, r7, r3
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	18d3      	adds	r3, r2, r3
 8012092:	4a3a      	ldr	r2, [pc, #232]	; (801217c <_1Bit_To_4Bit_16x32+0x284>)
 8012094:	1954      	adds	r4, r2, r5
 8012096:	19e2      	adds	r2, r4, r7
 8012098:	5cd3      	ldrb	r3, [r2, r3]
 801209a:	b25a      	sxtb	r2, r3
 801209c:	19bb      	adds	r3, r7, r6
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	3301      	adds	r3, #1
 80120a2:	4937      	ldr	r1, [pc, #220]	; (8012180 <_1Bit_To_4Bit_16x32+0x288>)
 80120a4:	002c      	movs	r4, r5
 80120a6:	194d      	adds	r5, r1, r5
 80120a8:	19e9      	adds	r1, r5, r7
 80120aa:	5ccb      	ldrb	r3, [r1, r3]
 80120ac:	2118      	movs	r1, #24
 80120ae:	31ff      	adds	r1, #255	; 0xff
 80120b0:	1879      	adds	r1, r7, r1
 80120b2:	7809      	ldrb	r1, [r1, #0]
 80120b4:	400b      	ands	r3, r1
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	011b      	lsls	r3, r3, #4
 80120ba:	b25b      	sxtb	r3, r3
 80120bc:	4313      	orrs	r3, r2
 80120be:	b259      	sxtb	r1, r3
 80120c0:	183b      	adds	r3, r7, r0
 80120c2:	781a      	ldrb	r2, [r3, #0]
 80120c4:	238b      	movs	r3, #139	; 0x8b
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	18fb      	adds	r3, r7, r3
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	18d3      	adds	r3, r2, r3
 80120d0:	b2c9      	uxtb	r1, r1
 80120d2:	4a2a      	ldr	r2, [pc, #168]	; (801217c <_1Bit_To_4Bit_16x32+0x284>)
 80120d4:	1912      	adds	r2, r2, r4
 80120d6:	19d2      	adds	r2, r2, r7
 80120d8:	54d1      	strb	r1, [r2, r3]
			 j++;
 80120da:	19bb      	adds	r3, r7, r6
 80120dc:	781a      	ldrb	r2, [r3, #0]
 80120de:	19bb      	adds	r3, r7, r6
 80120e0:	3201      	adds	r2, #1
 80120e2:	701a      	strb	r2, [r3, #0]
			 j++;
 80120e4:	19bb      	adds	r3, r7, r6
 80120e6:	781a      	ldrb	r2, [r3, #0]
 80120e8:	19bb      	adds	r3, r7, r6
 80120ea:	3201      	adds	r2, #1
 80120ec:	701a      	strb	r2, [r3, #0]
			 k--;
 80120ee:	183b      	adds	r3, r7, r0
 80120f0:	781a      	ldrb	r2, [r3, #0]
 80120f2:	183b      	adds	r3, r7, r0
 80120f4:	3a01      	subs	r2, #1
 80120f6:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 80120f8:	2314      	movs	r3, #20
 80120fa:	33ff      	adds	r3, #255	; 0xff
 80120fc:	18fb      	adds	r3, r7, r3
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	2b07      	cmp	r3, #7
 8012102:	d990      	bls.n	8012026 <_1Bit_To_4Bit_16x32+0x12e>
	 for(uint8_t index=0;index<64;index++)
 8012104:	218b      	movs	r1, #139	; 0x8b
 8012106:	0049      	lsls	r1, r1, #1
 8012108:	187b      	adds	r3, r7, r1
 801210a:	781a      	ldrb	r2, [r3, #0]
 801210c:	187b      	adds	r3, r7, r1
 801210e:	3201      	adds	r2, #1
 8012110:	701a      	strb	r2, [r3, #0]
 8012112:	238b      	movs	r3, #139	; 0x8b
 8012114:	005b      	lsls	r3, r3, #1
 8012116:	18fb      	adds	r3, r7, r3
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	2b3f      	cmp	r3, #63	; 0x3f
 801211c:	d800      	bhi.n	8012120 <_1Bit_To_4Bit_16x32+0x228>
 801211e:	e70e      	b.n	8011f3e <_1Bit_To_4Bit_16x32+0x46>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8012120:	4b19      	ldr	r3, [pc, #100]	; (8012188 <_1Bit_To_4Bit_16x32+0x290>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	68da      	ldr	r2, [r3, #12]
 8012126:	4b18      	ldr	r3, [pc, #96]	; (8012188 <_1Bit_To_4Bit_16x32+0x290>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	2101      	movs	r1, #1
 801212c:	438a      	bics	r2, r1
 801212e:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8012130:	4b16      	ldr	r3, [pc, #88]	; (801218c <_1Bit_To_4Bit_16x32+0x294>)
 8012132:	2201      	movs	r2, #1
 8012134:	2102      	movs	r1, #2
 8012136:	0018      	movs	r0, r3
 8012138:	f7f4 ff1f 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 801213c:	4b13      	ldr	r3, [pc, #76]	; (801218c <_1Bit_To_4Bit_16x32+0x294>)
 801213e:	2200      	movs	r2, #0
 8012140:	2101      	movs	r1, #1
 8012142:	0018      	movs	r0, r3
 8012144:	f7f4 ff19 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*64,100);
 8012148:	2380      	movs	r3, #128	; 0x80
 801214a:	005a      	lsls	r2, r3, #1
 801214c:	2310      	movs	r3, #16
 801214e:	18f9      	adds	r1, r7, r3
 8012150:	480f      	ldr	r0, [pc, #60]	; (8012190 <_1Bit_To_4Bit_16x32+0x298>)
 8012152:	2364      	movs	r3, #100	; 0x64
 8012154:	f7f5 fe20 	bl	8007d98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8012158:	4b0c      	ldr	r3, [pc, #48]	; (801218c <_1Bit_To_4Bit_16x32+0x294>)
 801215a:	2201      	movs	r2, #1
 801215c:	2101      	movs	r1, #1
 801215e:	0018      	movs	r0, r3
 8012160:	f7f4 ff0b 	bl	8006f7a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8012164:	4b08      	ldr	r3, [pc, #32]	; (8012188 <_1Bit_To_4Bit_16x32+0x290>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	68da      	ldr	r2, [r3, #12]
 801216a:	4b07      	ldr	r3, [pc, #28]	; (8012188 <_1Bit_To_4Bit_16x32+0x290>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2101      	movs	r1, #1
 8012170:	430a      	orrs	r2, r1
 8012172:	60da      	str	r2, [r3, #12]


}
 8012174:	46c0      	nop			; (mov r8, r8)
 8012176:	46bd      	mov	sp, r7
 8012178:	b047      	add	sp, #284	; 0x11c
 801217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801217c:	fffffef8 	.word	0xfffffef8
 8012180:	fffffef0 	.word	0xfffffef0
 8012184:	200030b7 	.word	0x200030b7
 8012188:	2000347c 	.word	0x2000347c
 801218c:	50000800 	.word	0x50000800
 8012190:	200033c8 	.word	0x200033c8

08012194 <_1Bit_To_4Bit_8x16>:

static void _1Bit_To_4Bit_8x16(uint8_t* Pdata)
{
 8012194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012196:	b097      	sub	sp, #92	; 0x5c
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
	 uint8_t data_send_buffer[4*16]={0x00};
 801219c:	2310      	movs	r3, #16
 801219e:	18fb      	adds	r3, r7, r3
 80121a0:	2200      	movs	r2, #0
 80121a2:	601a      	str	r2, [r3, #0]
 80121a4:	3304      	adds	r3, #4
 80121a6:	223c      	movs	r2, #60	; 0x3c
 80121a8:	2100      	movs	r1, #0
 80121aa:	0018      	movs	r0, r3
 80121ac:	f002 fa45 	bl	801463a <memset>
	 uint8_t mask=0x01;
 80121b0:	2357      	movs	r3, #87	; 0x57
 80121b2:	18fb      	adds	r3, r7, r3
 80121b4:	2201      	movs	r2, #1
 80121b6:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 80121b8:	2308      	movs	r3, #8
 80121ba:	18fb      	adds	r3, r7, r3
 80121bc:	2200      	movs	r2, #0
 80121be:	601a      	str	r2, [r3, #0]
 80121c0:	2200      	movs	r2, #0
 80121c2:	605a      	str	r2, [r3, #4]
	 for(uint8_t index=0;index<16;index++)
 80121c4:	2356      	movs	r3, #86	; 0x56
 80121c6:	18fb      	adds	r3, r7, r3
 80121c8:	2200      	movs	r2, #0
 80121ca:	701a      	strb	r2, [r3, #0]
 80121cc:	e0bd      	b.n	801234a <_1Bit_To_4Bit_8x16+0x1b6>
	 {
		 memset(&temp[0],0,8);
 80121ce:	2308      	movs	r3, #8
 80121d0:	18fb      	adds	r3, r7, r3
 80121d2:	2208      	movs	r2, #8
 80121d4:	2100      	movs	r1, #0
 80121d6:	0018      	movs	r0, r3
 80121d8:	f002 fa2f 	bl	801463a <memset>
		 mask=0x01;
 80121dc:	2357      	movs	r3, #87	; 0x57
 80121de:	18fb      	adds	r3, r7, r3
 80121e0:	2201      	movs	r2, #1
 80121e2:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i<8;i++)
 80121e4:	2355      	movs	r3, #85	; 0x55
 80121e6:	18fb      	adds	r3, r7, r3
 80121e8:	2200      	movs	r2, #0
 80121ea:	701a      	strb	r2, [r3, #0]
 80121ec:	e03b      	b.n	8012266 <_1Bit_To_4Bit_8x16+0xd2>
		 {
			 if( ((*(Pdata+index))&mask) == mask) temp[i]|=Light;//low 4 bits set
 80121ee:	2356      	movs	r3, #86	; 0x56
 80121f0:	18fb      	adds	r3, r7, r3
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	18d3      	adds	r3, r2, r3
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	2157      	movs	r1, #87	; 0x57
 80121fc:	187a      	adds	r2, r7, r1
 80121fe:	7812      	ldrb	r2, [r2, #0]
 8012200:	4013      	ands	r3, r2
 8012202:	b2db      	uxtb	r3, r3
 8012204:	187a      	adds	r2, r7, r1
 8012206:	7812      	ldrb	r2, [r2, #0]
 8012208:	429a      	cmp	r2, r3
 801220a:	d10e      	bne.n	801222a <_1Bit_To_4Bit_8x16+0x96>
 801220c:	2055      	movs	r0, #85	; 0x55
 801220e:	183b      	adds	r3, r7, r0
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	2408      	movs	r4, #8
 8012214:	193a      	adds	r2, r7, r4
 8012216:	5cd1      	ldrb	r1, [r2, r3]
 8012218:	4b65      	ldr	r3, [pc, #404]	; (80123b0 <_1Bit_To_4Bit_8x16+0x21c>)
 801221a:	781a      	ldrb	r2, [r3, #0]
 801221c:	183b      	adds	r3, r7, r0
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	430a      	orrs	r2, r1
 8012222:	b2d1      	uxtb	r1, r2
 8012224:	193a      	adds	r2, r7, r4
 8012226:	54d1      	strb	r1, [r2, r3]
 8012228:	e011      	b.n	801224e <_1Bit_To_4Bit_8x16+0xba>
			 else 				   				  temp[i]&=(Light<<4);//low 4 bits reset
 801222a:	2155      	movs	r1, #85	; 0x55
 801222c:	187b      	adds	r3, r7, r1
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	2008      	movs	r0, #8
 8012232:	183a      	adds	r2, r7, r0
 8012234:	5cd3      	ldrb	r3, [r2, r3]
 8012236:	b25b      	sxtb	r3, r3
 8012238:	4a5d      	ldr	r2, [pc, #372]	; (80123b0 <_1Bit_To_4Bit_8x16+0x21c>)
 801223a:	7812      	ldrb	r2, [r2, #0]
 801223c:	0112      	lsls	r2, r2, #4
 801223e:	b252      	sxtb	r2, r2
 8012240:	4013      	ands	r3, r2
 8012242:	b25a      	sxtb	r2, r3
 8012244:	187b      	adds	r3, r7, r1
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	b2d1      	uxtb	r1, r2
 801224a:	183a      	adds	r2, r7, r0
 801224c:	54d1      	strb	r1, [r2, r3]
			 mask<<=1;
 801224e:	2357      	movs	r3, #87	; 0x57
 8012250:	18fa      	adds	r2, r7, r3
 8012252:	18fb      	adds	r3, r7, r3
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	18db      	adds	r3, r3, r3
 8012258:	7013      	strb	r3, [r2, #0]
		 for(uint8_t i=0;i<8;i++)
 801225a:	2155      	movs	r1, #85	; 0x55
 801225c:	187b      	adds	r3, r7, r1
 801225e:	781a      	ldrb	r2, [r3, #0]
 8012260:	187b      	adds	r3, r7, r1
 8012262:	3201      	adds	r2, #1
 8012264:	701a      	strb	r2, [r3, #0]
 8012266:	2355      	movs	r3, #85	; 0x55
 8012268:	18fb      	adds	r3, r7, r3
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2b07      	cmp	r3, #7
 801226e:	d9be      	bls.n	80121ee <_1Bit_To_4Bit_8x16+0x5a>

		 }

		 mask=0x0f;
 8012270:	2357      	movs	r3, #87	; 0x57
 8012272:	18fb      	adds	r3, r7, r3
 8012274:	220f      	movs	r2, #15
 8012276:	701a      	strb	r2, [r3, #0]
		 uint8_t k;
		 k=3;
 8012278:	2354      	movs	r3, #84	; 0x54
 801227a:	18fb      	adds	r3, r7, r3
 801227c:	2203      	movs	r2, #3
 801227e:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8012280:	2353      	movs	r3, #83	; 0x53
 8012282:	18fb      	adds	r3, r7, r3
 8012284:	2200      	movs	r2, #0
 8012286:	701a      	strb	r2, [r3, #0]
 8012288:	e054      	b.n	8012334 <_1Bit_To_4Bit_8x16+0x1a0>
		 {
			 data_send_buffer[k+index*4]|=(temp[j]&mask);//0 2 4 6 low
 801228a:	2054      	movs	r0, #84	; 0x54
 801228c:	183b      	adds	r3, r7, r0
 801228e:	781a      	ldrb	r2, [r3, #0]
 8012290:	2656      	movs	r6, #86	; 0x56
 8012292:	19bb      	adds	r3, r7, r6
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	18d3      	adds	r3, r2, r3
 801229a:	2210      	movs	r2, #16
 801229c:	18ba      	adds	r2, r7, r2
 801229e:	5cd1      	ldrb	r1, [r2, r3]
 80122a0:	2553      	movs	r5, #83	; 0x53
 80122a2:	197b      	adds	r3, r7, r5
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	2408      	movs	r4, #8
 80122a8:	193a      	adds	r2, r7, r4
 80122aa:	5cd3      	ldrb	r3, [r2, r3]
 80122ac:	2457      	movs	r4, #87	; 0x57
 80122ae:	193a      	adds	r2, r7, r4
 80122b0:	7812      	ldrb	r2, [r2, #0]
 80122b2:	4013      	ands	r3, r2
 80122b4:	b2da      	uxtb	r2, r3
 80122b6:	0004      	movs	r4, r0
 80122b8:	183b      	adds	r3, r7, r0
 80122ba:	7818      	ldrb	r0, [r3, #0]
 80122bc:	19bb      	adds	r3, r7, r6
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	18c3      	adds	r3, r0, r3
 80122c4:	430a      	orrs	r2, r1
 80122c6:	b2d1      	uxtb	r1, r2
 80122c8:	2210      	movs	r2, #16
 80122ca:	18ba      	adds	r2, r7, r2
 80122cc:	54d1      	strb	r1, [r2, r3]
			 data_send_buffer[k+index*4]|=((temp[j+1]&mask)<<4);//1 3 5 7 high
 80122ce:	0020      	movs	r0, r4
 80122d0:	183b      	adds	r3, r7, r0
 80122d2:	781a      	ldrb	r2, [r3, #0]
 80122d4:	0034      	movs	r4, r6
 80122d6:	19bb      	adds	r3, r7, r6
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	18d3      	adds	r3, r2, r3
 80122de:	2610      	movs	r6, #16
 80122e0:	19ba      	adds	r2, r7, r6
 80122e2:	5cd3      	ldrb	r3, [r2, r3]
 80122e4:	b25a      	sxtb	r2, r3
 80122e6:	197b      	adds	r3, r7, r5
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	3301      	adds	r3, #1
 80122ec:	2108      	movs	r1, #8
 80122ee:	1879      	adds	r1, r7, r1
 80122f0:	5ccb      	ldrb	r3, [r1, r3]
 80122f2:	2157      	movs	r1, #87	; 0x57
 80122f4:	1879      	adds	r1, r7, r1
 80122f6:	7809      	ldrb	r1, [r1, #0]
 80122f8:	400b      	ands	r3, r1
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	011b      	lsls	r3, r3, #4
 80122fe:	b25b      	sxtb	r3, r3
 8012300:	4313      	orrs	r3, r2
 8012302:	b259      	sxtb	r1, r3
 8012304:	183b      	adds	r3, r7, r0
 8012306:	781a      	ldrb	r2, [r3, #0]
 8012308:	193b      	adds	r3, r7, r4
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	18d3      	adds	r3, r2, r3
 8012310:	b2c9      	uxtb	r1, r1
 8012312:	19ba      	adds	r2, r7, r6
 8012314:	54d1      	strb	r1, [r2, r3]
			 j++;
 8012316:	197b      	adds	r3, r7, r5
 8012318:	781a      	ldrb	r2, [r3, #0]
 801231a:	197b      	adds	r3, r7, r5
 801231c:	3201      	adds	r2, #1
 801231e:	701a      	strb	r2, [r3, #0]
			 j++;
 8012320:	197b      	adds	r3, r7, r5
 8012322:	781a      	ldrb	r2, [r3, #0]
 8012324:	197b      	adds	r3, r7, r5
 8012326:	3201      	adds	r2, #1
 8012328:	701a      	strb	r2, [r3, #0]
			 k--;
 801232a:	183b      	adds	r3, r7, r0
 801232c:	781a      	ldrb	r2, [r3, #0]
 801232e:	183b      	adds	r3, r7, r0
 8012330:	3a01      	subs	r2, #1
 8012332:	701a      	strb	r2, [r3, #0]
		 for(uint8_t j=0;j<8;)
 8012334:	2353      	movs	r3, #83	; 0x53
 8012336:	18fb      	adds	r3, r7, r3
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	2b07      	cmp	r3, #7
 801233c:	d9a5      	bls.n	801228a <_1Bit_To_4Bit_8x16+0xf6>
	 for(uint8_t index=0;index<16;index++)
 801233e:	2156      	movs	r1, #86	; 0x56
 8012340:	187b      	adds	r3, r7, r1
 8012342:	781a      	ldrb	r2, [r3, #0]
 8012344:	187b      	adds	r3, r7, r1
 8012346:	3201      	adds	r2, #1
 8012348:	701a      	strb	r2, [r3, #0]
 801234a:	2356      	movs	r3, #86	; 0x56
 801234c:	18fb      	adds	r3, r7, r3
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	2b0f      	cmp	r3, #15
 8012352:	d800      	bhi.n	8012356 <_1Bit_To_4Bit_8x16+0x1c2>
 8012354:	e73b      	b.n	80121ce <_1Bit_To_4Bit_8x16+0x3a>
		 }


	 }

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 8012356:	4b17      	ldr	r3, [pc, #92]	; (80123b4 <_1Bit_To_4Bit_8x16+0x220>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	68da      	ldr	r2, [r3, #12]
 801235c:	4b15      	ldr	r3, [pc, #84]	; (80123b4 <_1Bit_To_4Bit_8x16+0x220>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2101      	movs	r1, #1
 8012362:	438a      	bics	r2, r1
 8012364:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 8012366:	4b14      	ldr	r3, [pc, #80]	; (80123b8 <_1Bit_To_4Bit_8x16+0x224>)
 8012368:	2201      	movs	r2, #1
 801236a:	2102      	movs	r1, #2
 801236c:	0018      	movs	r0, r3
 801236e:	f7f4 fe04 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8012372:	4b11      	ldr	r3, [pc, #68]	; (80123b8 <_1Bit_To_4Bit_8x16+0x224>)
 8012374:	2200      	movs	r2, #0
 8012376:	2101      	movs	r1, #1
 8012378:	0018      	movs	r0, r3
 801237a:	f7f4 fdfe 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&data_send_buffer[0],4*16,100);
 801237e:	2310      	movs	r3, #16
 8012380:	18f9      	adds	r1, r7, r3
 8012382:	480e      	ldr	r0, [pc, #56]	; (80123bc <_1Bit_To_4Bit_8x16+0x228>)
 8012384:	2364      	movs	r3, #100	; 0x64
 8012386:	2240      	movs	r2, #64	; 0x40
 8012388:	f7f5 fd06 	bl	8007d98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 801238c:	4b0a      	ldr	r3, [pc, #40]	; (80123b8 <_1Bit_To_4Bit_8x16+0x224>)
 801238e:	2201      	movs	r2, #1
 8012390:	2101      	movs	r1, #1
 8012392:	0018      	movs	r0, r3
 8012394:	f7f4 fdf1 	bl	8006f7a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 8012398:	4b06      	ldr	r3, [pc, #24]	; (80123b4 <_1Bit_To_4Bit_8x16+0x220>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	68da      	ldr	r2, [r3, #12]
 801239e:	4b05      	ldr	r3, [pc, #20]	; (80123b4 <_1Bit_To_4Bit_8x16+0x220>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2101      	movs	r1, #1
 80123a4:	430a      	orrs	r2, r1
 80123a6:	60da      	str	r2, [r3, #12]

}
 80123a8:	46c0      	nop			; (mov r8, r8)
 80123aa:	46bd      	mov	sp, r7
 80123ac:	b017      	add	sp, #92	; 0x5c
 80123ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123b0:	200030b7 	.word	0x200030b7
 80123b4:	2000347c 	.word	0x2000347c
 80123b8:	50000800 	.word	0x50000800
 80123bc:	200033c8 	.word	0x200033c8

080123c0 <Font_1Bit_To_4Bit_12x24>:
 * @brief  12x24专用的转换函数，将一位转为四位（SD1322四位表示一个像素点）,并写入SD1322
 * @param  要转换的数据
 * @retval None
 */
void Font_1Bit_To_4Bit_12x24(uint8_t Data0, uint8_t Data1)
{
 80123c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123c2:	b08d      	sub	sp, #52	; 0x34
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	0002      	movs	r2, r0
 80123c8:	1dfb      	adds	r3, r7, #7
 80123ca:	701a      	strb	r2, [r3, #0]
 80123cc:	1dbb      	adds	r3, r7, #6
 80123ce:	1c0a      	adds	r2, r1, #0
 80123d0:	701a      	strb	r2, [r3, #0]

	 /*对于字模而言，用16个u8构成的数组便可以描述一个字，u8的每一bit代表一个像素点，但我们的OLED是4个bit代表一个像素点
	   因此，u8要膨胀成一个u32的数据，u8的一个bit对应u32的四个bit，u8的bit=1对应u32的4个bit=1111即可*/

	 /*8位data0*/
	 uint8_t mask=0x01;
 80123d2:	232f      	movs	r3, #47	; 0x2f
 80123d4:	18fb      	adds	r3, r7, r3
 80123d6:	2201      	movs	r2, #1
 80123d8:	701a      	strb	r2, [r3, #0]
	 uint8_t temp[8]={0x00};
 80123da:	2318      	movs	r3, #24
 80123dc:	18fb      	adds	r3, r7, r3
 80123de:	2200      	movs	r2, #0
 80123e0:	601a      	str	r2, [r3, #0]
 80123e2:	2200      	movs	r2, #0
 80123e4:	605a      	str	r2, [r3, #4]
	 uint8_t data_send[4]={0x00};
 80123e6:	2314      	movs	r3, #20
 80123e8:	18fb      	adds	r3, r7, r3
 80123ea:	2200      	movs	r2, #0
 80123ec:	601a      	str	r2, [r3, #0]
	 /*新的实现*/
	 for(uint8_t i=0;i<8;i++)
 80123ee:	232e      	movs	r3, #46	; 0x2e
 80123f0:	18fb      	adds	r3, r7, r3
 80123f2:	2200      	movs	r2, #0
 80123f4:	701a      	strb	r2, [r3, #0]
 80123f6:	e037      	b.n	8012468 <Font_1Bit_To_4Bit_12x24+0xa8>
	 {
		 if((Data0&mask)==mask) temp[i]|=Light;//low 4 bits set
 80123f8:	1dfb      	adds	r3, r7, #7
 80123fa:	212f      	movs	r1, #47	; 0x2f
 80123fc:	187a      	adds	r2, r7, r1
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	7812      	ldrb	r2, [r2, #0]
 8012402:	4013      	ands	r3, r2
 8012404:	b2db      	uxtb	r3, r3
 8012406:	187a      	adds	r2, r7, r1
 8012408:	7812      	ldrb	r2, [r2, #0]
 801240a:	429a      	cmp	r2, r3
 801240c:	d10e      	bne.n	801242c <Font_1Bit_To_4Bit_12x24+0x6c>
 801240e:	202e      	movs	r0, #46	; 0x2e
 8012410:	183b      	adds	r3, r7, r0
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	2418      	movs	r4, #24
 8012416:	193a      	adds	r2, r7, r4
 8012418:	5cd1      	ldrb	r1, [r2, r3]
 801241a:	4ba0      	ldr	r3, [pc, #640]	; (801269c <Font_1Bit_To_4Bit_12x24+0x2dc>)
 801241c:	781a      	ldrb	r2, [r3, #0]
 801241e:	183b      	adds	r3, r7, r0
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	430a      	orrs	r2, r1
 8012424:	b2d1      	uxtb	r1, r2
 8012426:	193a      	adds	r2, r7, r4
 8012428:	54d1      	strb	r1, [r2, r3]
 801242a:	e011      	b.n	8012450 <Font_1Bit_To_4Bit_12x24+0x90>
		 else 				   temp[i]&=(Light<<4);//low 4 bits reset
 801242c:	212e      	movs	r1, #46	; 0x2e
 801242e:	187b      	adds	r3, r7, r1
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	2018      	movs	r0, #24
 8012434:	183a      	adds	r2, r7, r0
 8012436:	5cd3      	ldrb	r3, [r2, r3]
 8012438:	b25b      	sxtb	r3, r3
 801243a:	4a98      	ldr	r2, [pc, #608]	; (801269c <Font_1Bit_To_4Bit_12x24+0x2dc>)
 801243c:	7812      	ldrb	r2, [r2, #0]
 801243e:	0112      	lsls	r2, r2, #4
 8012440:	b252      	sxtb	r2, r2
 8012442:	4013      	ands	r3, r2
 8012444:	b25a      	sxtb	r2, r3
 8012446:	187b      	adds	r3, r7, r1
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	b2d1      	uxtb	r1, r2
 801244c:	183a      	adds	r2, r7, r0
 801244e:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 8012450:	232f      	movs	r3, #47	; 0x2f
 8012452:	18fa      	adds	r2, r7, r3
 8012454:	18fb      	adds	r3, r7, r3
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	18db      	adds	r3, r3, r3
 801245a:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<8;i++)
 801245c:	212e      	movs	r1, #46	; 0x2e
 801245e:	187b      	adds	r3, r7, r1
 8012460:	781a      	ldrb	r2, [r3, #0]
 8012462:	187b      	adds	r3, r7, r1
 8012464:	3201      	adds	r2, #1
 8012466:	701a      	strb	r2, [r3, #0]
 8012468:	232e      	movs	r3, #46	; 0x2e
 801246a:	18fb      	adds	r3, r7, r3
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	2b07      	cmp	r3, #7
 8012470:	d9c2      	bls.n	80123f8 <Font_1Bit_To_4Bit_12x24+0x38>

	 }
	 mask=0x0f;
 8012472:	232f      	movs	r3, #47	; 0x2f
 8012474:	18fb      	adds	r3, r7, r3
 8012476:	220f      	movs	r2, #15
 8012478:	701a      	strb	r2, [r3, #0]
	 uint8_t index=0;
 801247a:	232d      	movs	r3, #45	; 0x2d
 801247c:	18fb      	adds	r3, r7, r3
 801247e:	2200      	movs	r2, #0
 8012480:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8012482:	232c      	movs	r3, #44	; 0x2c
 8012484:	18fb      	adds	r3, r7, r3
 8012486:	2200      	movs	r2, #0
 8012488:	701a      	strb	r2, [r3, #0]
 801248a:	e03d      	b.n	8012508 <Font_1Bit_To_4Bit_12x24+0x148>
	 {
		 data_send[index]|=(temp[j]&mask);
 801248c:	202d      	movs	r0, #45	; 0x2d
 801248e:	183b      	adds	r3, r7, r0
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	2514      	movs	r5, #20
 8012494:	197a      	adds	r2, r7, r5
 8012496:	5cd1      	ldrb	r1, [r2, r3]
 8012498:	242c      	movs	r4, #44	; 0x2c
 801249a:	193b      	adds	r3, r7, r4
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	2618      	movs	r6, #24
 80124a0:	19ba      	adds	r2, r7, r6
 80124a2:	5cd3      	ldrb	r3, [r2, r3]
 80124a4:	222f      	movs	r2, #47	; 0x2f
 80124a6:	18ba      	adds	r2, r7, r2
 80124a8:	7812      	ldrb	r2, [r2, #0]
 80124aa:	4013      	ands	r3, r2
 80124ac:	b2da      	uxtb	r2, r3
 80124ae:	183b      	adds	r3, r7, r0
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	430a      	orrs	r2, r1
 80124b4:	b2d1      	uxtb	r1, r2
 80124b6:	197a      	adds	r2, r7, r5
 80124b8:	54d1      	strb	r1, [r2, r3]
		 data_send[index]|=((temp[j+1]&mask)<<4);
 80124ba:	183b      	adds	r3, r7, r0
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	197a      	adds	r2, r7, r5
 80124c0:	5cd3      	ldrb	r3, [r2, r3]
 80124c2:	b25a      	sxtb	r2, r3
 80124c4:	193b      	adds	r3, r7, r4
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	3301      	adds	r3, #1
 80124ca:	19b9      	adds	r1, r7, r6
 80124cc:	5ccb      	ldrb	r3, [r1, r3]
 80124ce:	212f      	movs	r1, #47	; 0x2f
 80124d0:	1879      	adds	r1, r7, r1
 80124d2:	7809      	ldrb	r1, [r1, #0]
 80124d4:	400b      	ands	r3, r1
 80124d6:	b2db      	uxtb	r3, r3
 80124d8:	011b      	lsls	r3, r3, #4
 80124da:	b25b      	sxtb	r3, r3
 80124dc:	4313      	orrs	r3, r2
 80124de:	b25a      	sxtb	r2, r3
 80124e0:	183b      	adds	r3, r7, r0
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	b2d1      	uxtb	r1, r2
 80124e6:	197a      	adds	r2, r7, r5
 80124e8:	54d1      	strb	r1, [r2, r3]
		 j++;
 80124ea:	193b      	adds	r3, r7, r4
 80124ec:	781a      	ldrb	r2, [r3, #0]
 80124ee:	193b      	adds	r3, r7, r4
 80124f0:	3201      	adds	r2, #1
 80124f2:	701a      	strb	r2, [r3, #0]
		 j++;
 80124f4:	193b      	adds	r3, r7, r4
 80124f6:	781a      	ldrb	r2, [r3, #0]
 80124f8:	193b      	adds	r3, r7, r4
 80124fa:	3201      	adds	r2, #1
 80124fc:	701a      	strb	r2, [r3, #0]
		 index++;
 80124fe:	183b      	adds	r3, r7, r0
 8012500:	781a      	ldrb	r2, [r3, #0]
 8012502:	183b      	adds	r3, r7, r0
 8012504:	3201      	adds	r2, #1
 8012506:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<8;)
 8012508:	232c      	movs	r3, #44	; 0x2c
 801250a:	18fb      	adds	r3, r7, r3
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	2b07      	cmp	r3, #7
 8012510:	d9bc      	bls.n	801248c <Font_1Bit_To_4Bit_12x24+0xcc>

	 }
	 /*高四位data1*/
	 mask=0x10;
 8012512:	232f      	movs	r3, #47	; 0x2f
 8012514:	18fb      	adds	r3, r7, r3
 8012516:	2210      	movs	r2, #16
 8012518:	701a      	strb	r2, [r3, #0]
	 uint8_t temp1[4]={0x00};
 801251a:	2310      	movs	r3, #16
 801251c:	18fb      	adds	r3, r7, r3
 801251e:	2200      	movs	r2, #0
 8012520:	601a      	str	r2, [r3, #0]
	 uint8_t data_send1[2]={0x00};
 8012522:	230c      	movs	r3, #12
 8012524:	18fb      	adds	r3, r7, r3
 8012526:	2200      	movs	r2, #0
 8012528:	801a      	strh	r2, [r3, #0]
	 for(uint8_t i=0;i<4;i++)
 801252a:	232b      	movs	r3, #43	; 0x2b
 801252c:	18fb      	adds	r3, r7, r3
 801252e:	2200      	movs	r2, #0
 8012530:	701a      	strb	r2, [r3, #0]
 8012532:	e037      	b.n	80125a4 <Font_1Bit_To_4Bit_12x24+0x1e4>
	 {
		 if((Data1&mask)==mask) temp1[i]|=Light;//low 4 bits set
 8012534:	1dbb      	adds	r3, r7, #6
 8012536:	212f      	movs	r1, #47	; 0x2f
 8012538:	187a      	adds	r2, r7, r1
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	7812      	ldrb	r2, [r2, #0]
 801253e:	4013      	ands	r3, r2
 8012540:	b2db      	uxtb	r3, r3
 8012542:	187a      	adds	r2, r7, r1
 8012544:	7812      	ldrb	r2, [r2, #0]
 8012546:	429a      	cmp	r2, r3
 8012548:	d10e      	bne.n	8012568 <Font_1Bit_To_4Bit_12x24+0x1a8>
 801254a:	202b      	movs	r0, #43	; 0x2b
 801254c:	183b      	adds	r3, r7, r0
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	2410      	movs	r4, #16
 8012552:	193a      	adds	r2, r7, r4
 8012554:	5cd1      	ldrb	r1, [r2, r3]
 8012556:	4b51      	ldr	r3, [pc, #324]	; (801269c <Font_1Bit_To_4Bit_12x24+0x2dc>)
 8012558:	781a      	ldrb	r2, [r3, #0]
 801255a:	183b      	adds	r3, r7, r0
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	430a      	orrs	r2, r1
 8012560:	b2d1      	uxtb	r1, r2
 8012562:	193a      	adds	r2, r7, r4
 8012564:	54d1      	strb	r1, [r2, r3]
 8012566:	e011      	b.n	801258c <Font_1Bit_To_4Bit_12x24+0x1cc>
		 else 				   temp1[i]&=(Light<<4);//low 4 bits reset
 8012568:	212b      	movs	r1, #43	; 0x2b
 801256a:	187b      	adds	r3, r7, r1
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	2010      	movs	r0, #16
 8012570:	183a      	adds	r2, r7, r0
 8012572:	5cd3      	ldrb	r3, [r2, r3]
 8012574:	b25b      	sxtb	r3, r3
 8012576:	4a49      	ldr	r2, [pc, #292]	; (801269c <Font_1Bit_To_4Bit_12x24+0x2dc>)
 8012578:	7812      	ldrb	r2, [r2, #0]
 801257a:	0112      	lsls	r2, r2, #4
 801257c:	b252      	sxtb	r2, r2
 801257e:	4013      	ands	r3, r2
 8012580:	b25a      	sxtb	r2, r3
 8012582:	187b      	adds	r3, r7, r1
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	b2d1      	uxtb	r1, r2
 8012588:	183a      	adds	r2, r7, r0
 801258a:	54d1      	strb	r1, [r2, r3]
		 mask<<=1;
 801258c:	232f      	movs	r3, #47	; 0x2f
 801258e:	18fa      	adds	r2, r7, r3
 8012590:	18fb      	adds	r3, r7, r3
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	18db      	adds	r3, r3, r3
 8012596:	7013      	strb	r3, [r2, #0]
	 for(uint8_t i=0;i<4;i++)
 8012598:	212b      	movs	r1, #43	; 0x2b
 801259a:	187b      	adds	r3, r7, r1
 801259c:	781a      	ldrb	r2, [r3, #0]
 801259e:	187b      	adds	r3, r7, r1
 80125a0:	3201      	adds	r2, #1
 80125a2:	701a      	strb	r2, [r3, #0]
 80125a4:	232b      	movs	r3, #43	; 0x2b
 80125a6:	18fb      	adds	r3, r7, r3
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	2b03      	cmp	r3, #3
 80125ac:	d9c2      	bls.n	8012534 <Font_1Bit_To_4Bit_12x24+0x174>

	 }
	 mask=0x0f;
 80125ae:	232f      	movs	r3, #47	; 0x2f
 80125b0:	18fb      	adds	r3, r7, r3
 80125b2:	220f      	movs	r2, #15
 80125b4:	701a      	strb	r2, [r3, #0]
	 index=0;
 80125b6:	232d      	movs	r3, #45	; 0x2d
 80125b8:	18fb      	adds	r3, r7, r3
 80125ba:	2200      	movs	r2, #0
 80125bc:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 80125be:	232a      	movs	r3, #42	; 0x2a
 80125c0:	18fb      	adds	r3, r7, r3
 80125c2:	2200      	movs	r2, #0
 80125c4:	701a      	strb	r2, [r3, #0]
 80125c6:	e03d      	b.n	8012644 <Font_1Bit_To_4Bit_12x24+0x284>
	 {
		 data_send1[index]|=(temp1[j]&mask);
 80125c8:	202d      	movs	r0, #45	; 0x2d
 80125ca:	183b      	adds	r3, r7, r0
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	250c      	movs	r5, #12
 80125d0:	197a      	adds	r2, r7, r5
 80125d2:	5cd1      	ldrb	r1, [r2, r3]
 80125d4:	242a      	movs	r4, #42	; 0x2a
 80125d6:	193b      	adds	r3, r7, r4
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	2610      	movs	r6, #16
 80125dc:	19ba      	adds	r2, r7, r6
 80125de:	5cd3      	ldrb	r3, [r2, r3]
 80125e0:	222f      	movs	r2, #47	; 0x2f
 80125e2:	18ba      	adds	r2, r7, r2
 80125e4:	7812      	ldrb	r2, [r2, #0]
 80125e6:	4013      	ands	r3, r2
 80125e8:	b2da      	uxtb	r2, r3
 80125ea:	183b      	adds	r3, r7, r0
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	430a      	orrs	r2, r1
 80125f0:	b2d1      	uxtb	r1, r2
 80125f2:	197a      	adds	r2, r7, r5
 80125f4:	54d1      	strb	r1, [r2, r3]
		 data_send1[index]|=((temp1[j+1]&mask)<<4);
 80125f6:	183b      	adds	r3, r7, r0
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	197a      	adds	r2, r7, r5
 80125fc:	5cd3      	ldrb	r3, [r2, r3]
 80125fe:	b25a      	sxtb	r2, r3
 8012600:	193b      	adds	r3, r7, r4
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	3301      	adds	r3, #1
 8012606:	19b9      	adds	r1, r7, r6
 8012608:	5ccb      	ldrb	r3, [r1, r3]
 801260a:	212f      	movs	r1, #47	; 0x2f
 801260c:	1879      	adds	r1, r7, r1
 801260e:	7809      	ldrb	r1, [r1, #0]
 8012610:	400b      	ands	r3, r1
 8012612:	b2db      	uxtb	r3, r3
 8012614:	011b      	lsls	r3, r3, #4
 8012616:	b25b      	sxtb	r3, r3
 8012618:	4313      	orrs	r3, r2
 801261a:	b25a      	sxtb	r2, r3
 801261c:	183b      	adds	r3, r7, r0
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	b2d1      	uxtb	r1, r2
 8012622:	197a      	adds	r2, r7, r5
 8012624:	54d1      	strb	r1, [r2, r3]
		 j++;
 8012626:	193b      	adds	r3, r7, r4
 8012628:	781a      	ldrb	r2, [r3, #0]
 801262a:	193b      	adds	r3, r7, r4
 801262c:	3201      	adds	r2, #1
 801262e:	701a      	strb	r2, [r3, #0]
		 j++;
 8012630:	193b      	adds	r3, r7, r4
 8012632:	781a      	ldrb	r2, [r3, #0]
 8012634:	193b      	adds	r3, r7, r4
 8012636:	3201      	adds	r2, #1
 8012638:	701a      	strb	r2, [r3, #0]
		 index++;
 801263a:	183b      	adds	r3, r7, r0
 801263c:	781a      	ldrb	r2, [r3, #0]
 801263e:	183b      	adds	r3, r7, r0
 8012640:	3201      	adds	r2, #1
 8012642:	701a      	strb	r2, [r3, #0]
	 for(uint8_t j=0;j<4;)
 8012644:	232a      	movs	r3, #42	; 0x2a
 8012646:	18fb      	adds	r3, r7, r3
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	2b03      	cmp	r3, #3
 801264c:	d9bc      	bls.n	80125c8 <Font_1Bit_To_4Bit_12x24+0x208>

	 }

	 //写RAM
	 for(int k=3;k>=0;k--)
 801264e:	2303      	movs	r3, #3
 8012650:	627b      	str	r3, [r7, #36]	; 0x24
 8012652:	e00a      	b.n	801266a <Font_1Bit_To_4Bit_12x24+0x2aa>
	 {
		 SPI_OLED_SendData(data_send[k]);//一次写两个像素点，写四次
 8012654:	2314      	movs	r3, #20
 8012656:	18fa      	adds	r2, r7, r3
 8012658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265a:	18d3      	adds	r3, r2, r3
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	0018      	movs	r0, r3
 8012660:	f7ff fa22 	bl	8011aa8 <SPI_OLED_SendData>
	 for(int k=3;k>=0;k--)
 8012664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012666:	3b01      	subs	r3, #1
 8012668:	627b      	str	r3, [r7, #36]	; 0x24
 801266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266c:	2b00      	cmp	r3, #0
 801266e:	daf1      	bge.n	8012654 <Font_1Bit_To_4Bit_12x24+0x294>
	 }
	 for(int k=1;k>=0;k--)
 8012670:	2301      	movs	r3, #1
 8012672:	623b      	str	r3, [r7, #32]
 8012674:	e00a      	b.n	801268c <Font_1Bit_To_4Bit_12x24+0x2cc>
	 {
		 SPI_OLED_SendData(data_send1[k]);//一次写两个像素点，写两次
 8012676:	230c      	movs	r3, #12
 8012678:	18fa      	adds	r2, r7, r3
 801267a:	6a3b      	ldr	r3, [r7, #32]
 801267c:	18d3      	adds	r3, r2, r3
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	0018      	movs	r0, r3
 8012682:	f7ff fa11 	bl	8011aa8 <SPI_OLED_SendData>
	 for(int k=1;k>=0;k--)
 8012686:	6a3b      	ldr	r3, [r7, #32]
 8012688:	3b01      	subs	r3, #1
 801268a:	623b      	str	r3, [r7, #32]
 801268c:	6a3b      	ldr	r3, [r7, #32]
 801268e:	2b00      	cmp	r3, #0
 8012690:	daf1      	bge.n	8012676 <Font_1Bit_To_4Bit_12x24+0x2b6>
	 }


}
 8012692:	46c0      	nop			; (mov r8, r8)
 8012694:	46c0      	nop			; (mov r8, r8)
 8012696:	46bd      	mov	sp, r7
 8012698:	b00d      	add	sp, #52	; 0x34
 801269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801269c:	200030b7 	.word	0x200030b7

080126a0 <Set_Column_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Column_Address(uint8_t a, uint8_t b)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	0002      	movs	r2, r0
 80126a8:	1dfb      	adds	r3, r7, #7
 80126aa:	701a      	strb	r2, [r3, #0]
 80126ac:	1dbb      	adds	r3, r7, #6
 80126ae:	1c0a      	adds	r2, r1, #0
 80126b0:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Column_Address_Commond);			//Set Column Address
 80126b2:	2015      	movs	r0, #21
 80126b4:	f7ff fa30 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x1c+a);					                  //0x1c地址偏移量()
 80126b8:	1dfb      	adds	r3, r7, #7
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	331c      	adds	r3, #28
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	0018      	movs	r0, r3
 80126c2:	f7ff f9f1 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x1c+b);
 80126c6:	1dbb      	adds	r3, r7, #6
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	331c      	adds	r3, #28
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	0018      	movs	r0, r3
 80126d0:	f7ff f9ea 	bl	8011aa8 <SPI_OLED_SendData>
}
 80126d4:	46c0      	nop			; (mov r8, r8)
 80126d6:	46bd      	mov	sp, r7
 80126d8:	b002      	add	sp, #8
 80126da:	bd80      	pop	{r7, pc}

080126dc <Set_Row_Address>:
	* @param  byte：起始地址
	* @param  byte：结束地址
	* @retval None
	*/
void Set_Row_Address(uint8_t a, uint8_t b)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	0002      	movs	r2, r0
 80126e4:	1dfb      	adds	r3, r7, #7
 80126e6:	701a      	strb	r2, [r3, #0]
 80126e8:	1dbb      	adds	r3, r7, #6
 80126ea:	1c0a      	adds	r2, r1, #0
 80126ec:	701a      	strb	r2, [r3, #0]
	SPI_OLED_SendCommond(Set_Row_Address_Commond);			// Set Row Address
 80126ee:	2075      	movs	r0, #117	; 0x75
 80126f0:	f7ff fa12 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(a);					//   Default => 0x00
 80126f4:	1dfb      	adds	r3, r7, #7
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	0018      	movs	r0, r3
 80126fa:	f7ff f9d5 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(b);					//   Default => 0x7F
 80126fe:	1dbb      	adds	r3, r7, #6
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	0018      	movs	r0, r3
 8012704:	f7ff f9d0 	bl	8011aa8 <SPI_OLED_SendData>
}
 8012708:	46c0      	nop			; (mov r8, r8)
 801270a:	46bd      	mov	sp, r7
 801270c:	b002      	add	sp, #8
 801270e:	bd80      	pop	{r7, pc}

08012710 <Set_WriteData>:
	* @brief  写命令
	* @param  None
	* @retval None
	*/
void Set_WriteData(void)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	af00      	add	r7, sp, #0
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 8012714:	205c      	movs	r0, #92	; 0x5c
 8012716:	f7ff f9ff 	bl	8011b18 <SPI_OLED_SendCommond>
}
 801271a:	46c0      	nop			; (mov r8, r8)
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <Fill_RAM>:
	* @brief  整屏显示
	* @param  要整屏显示的颜色
	* @retval None
	*/
void Fill_RAM(uint8_t Data)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	0002      	movs	r2, r0
 8012728:	1dfb      	adds	r3, r7, #7
 801272a:	701a      	strb	r2, [r3, #0]
	unsigned char i,j;

	Set_Column_Address(0x00,0x3f);//0到63列
 801272c:	213f      	movs	r1, #63	; 0x3f
 801272e:	2000      	movs	r0, #0
 8012730:	f7ff ffb6 	bl	80126a0 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 8012734:	213f      	movs	r1, #63	; 0x3f
 8012736:	2000      	movs	r0, #0
 8012738:	f7ff ffd0 	bl	80126dc <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 801273c:	205c      	movs	r0, #92	; 0x5c
 801273e:	f7ff f9eb 	bl	8011b18 <SPI_OLED_SendCommond>

	for(i=0;i<64;i++)             //一共64行
 8012742:	230f      	movs	r3, #15
 8012744:	18fb      	adds	r3, r7, r3
 8012746:	2200      	movs	r2, #0
 8012748:	701a      	strb	r2, [r3, #0]
 801274a:	e01f      	b.n	801278c <Fill_RAM+0x6c>
	{
		for(j=0;j<64;j++)           //一共64列
 801274c:	230e      	movs	r3, #14
 801274e:	18fb      	adds	r3, r7, r3
 8012750:	2200      	movs	r2, #0
 8012752:	701a      	strb	r2, [r3, #0]
 8012754:	e00f      	b.n	8012776 <Fill_RAM+0x56>
		{
			//每次发八位数据，发送两次构成16位数据，完成四个像素点的控制（列地址对应四个像素点）
			//指定行和列地址后相当于选中了四个像素点，每次发送八位数据设置两个像素点，因此要发两次
			SPI_OLED_SendData(Data);
 8012756:	1dfb      	adds	r3, r7, #7
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	0018      	movs	r0, r3
 801275c:	f7ff f9a4 	bl	8011aa8 <SPI_OLED_SendData>
			SPI_OLED_SendData(Data);
 8012760:	1dfb      	adds	r3, r7, #7
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	0018      	movs	r0, r3
 8012766:	f7ff f99f 	bl	8011aa8 <SPI_OLED_SendData>
		for(j=0;j<64;j++)           //一共64列
 801276a:	210e      	movs	r1, #14
 801276c:	187b      	adds	r3, r7, r1
 801276e:	781a      	ldrb	r2, [r3, #0]
 8012770:	187b      	adds	r3, r7, r1
 8012772:	3201      	adds	r2, #1
 8012774:	701a      	strb	r2, [r3, #0]
 8012776:	230e      	movs	r3, #14
 8012778:	18fb      	adds	r3, r7, r3
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b3f      	cmp	r3, #63	; 0x3f
 801277e:	d9ea      	bls.n	8012756 <Fill_RAM+0x36>
	for(i=0;i<64;i++)             //一共64行
 8012780:	210f      	movs	r1, #15
 8012782:	187b      	adds	r3, r7, r1
 8012784:	781a      	ldrb	r2, [r3, #0]
 8012786:	187b      	adds	r3, r7, r1
 8012788:	3201      	adds	r2, #1
 801278a:	701a      	strb	r2, [r3, #0]
 801278c:	230f      	movs	r3, #15
 801278e:	18fb      	adds	r3, r7, r3
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b3f      	cmp	r3, #63	; 0x3f
 8012794:	d9da      	bls.n	801274c <Fill_RAM+0x2c>

		}
	}
}
 8012796:	46c0      	nop			; (mov r8, r8)
 8012798:	46c0      	nop			; (mov r8, r8)
 801279a:	46bd      	mov	sp, r7
 801279c:	b004      	add	sp, #16
 801279e:	bd80      	pop	{r7, pc}

080127a0 <Clear_Screen>:


void Clear_Screen(void)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	4f25      	ldr	r7, [pc, #148]	; (8012838 <Clear_Screen+0x98>)
 80127a4:	44bd      	add	sp, r7
 80127a6:	af00      	add	r7, sp, #0
	uint8_t clear_arry[64*128]={0x00};
 80127a8:	4b23      	ldr	r3, [pc, #140]	; (8012838 <Clear_Screen+0x98>)
 80127aa:	2280      	movs	r2, #128	; 0x80
 80127ac:	0192      	lsls	r2, r2, #6
 80127ae:	189b      	adds	r3, r3, r2
 80127b0:	19db      	adds	r3, r3, r7
 80127b2:	2200      	movs	r2, #0
 80127b4:	601a      	str	r2, [r3, #0]
 80127b6:	3304      	adds	r3, #4
 80127b8:	4a20      	ldr	r2, [pc, #128]	; (801283c <Clear_Screen+0x9c>)
 80127ba:	2100      	movs	r1, #0
 80127bc:	0018      	movs	r0, r3
 80127be:	f001 ff3c 	bl	801463a <memset>

	Set_Column_Address(0x00,0x3f);//0到63列
 80127c2:	213f      	movs	r1, #63	; 0x3f
 80127c4:	2000      	movs	r0, #0
 80127c6:	f7ff ff6b 	bl	80126a0 <Set_Column_Address>
	Set_Row_Address(0x00,0x3f);   //0到63行
 80127ca:	213f      	movs	r1, #63	; 0x3f
 80127cc:	2000      	movs	r0, #0
 80127ce:	f7ff ff85 	bl	80126dc <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 80127d2:	205c      	movs	r0, #92	; 0x5c
 80127d4:	f7ff f9a0 	bl	8011b18 <SPI_OLED_SendCommond>

	__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80127d8:	4b19      	ldr	r3, [pc, #100]	; (8012840 <Clear_Screen+0xa0>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	68da      	ldr	r2, [r3, #12]
 80127de:	4b18      	ldr	r3, [pc, #96]	; (8012840 <Clear_Screen+0xa0>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2101      	movs	r1, #1
 80127e4:	438a      	bics	r2, r1
 80127e6:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 80127e8:	4b16      	ldr	r3, [pc, #88]	; (8012844 <Clear_Screen+0xa4>)
 80127ea:	2201      	movs	r2, #1
 80127ec:	2102      	movs	r1, #2
 80127ee:	0018      	movs	r0, r3
 80127f0:	f7f4 fbc3 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 80127f4:	4b13      	ldr	r3, [pc, #76]	; (8012844 <Clear_Screen+0xa4>)
 80127f6:	2200      	movs	r2, #0
 80127f8:	2101      	movs	r1, #1
 80127fa:	0018      	movs	r0, r3
 80127fc:	f7f4 fbbd 	bl	8006f7a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,clear_arry,64*128,1000);
 8012800:	23fa      	movs	r3, #250	; 0xfa
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	2280      	movs	r2, #128	; 0x80
 8012806:	0192      	lsls	r2, r2, #6
 8012808:	0039      	movs	r1, r7
 801280a:	480f      	ldr	r0, [pc, #60]	; (8012848 <Clear_Screen+0xa8>)
 801280c:	f7f5 fac4 	bl	8007d98 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8012810:	4b0c      	ldr	r3, [pc, #48]	; (8012844 <Clear_Screen+0xa4>)
 8012812:	2201      	movs	r2, #1
 8012814:	2101      	movs	r1, #1
 8012816:	0018      	movs	r0, r3
 8012818:	f7f4 fbaf 	bl	8006f7a <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 801281c:	4b08      	ldr	r3, [pc, #32]	; (8012840 <Clear_Screen+0xa0>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	68da      	ldr	r2, [r3, #12]
 8012822:	4b07      	ldr	r3, [pc, #28]	; (8012840 <Clear_Screen+0xa0>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2101      	movs	r1, #1
 8012828:	430a      	orrs	r2, r1
 801282a:	60da      	str	r2, [r3, #12]


}
 801282c:	46c0      	nop			; (mov r8, r8)
 801282e:	46bd      	mov	sp, r7
 8012830:	2380      	movs	r3, #128	; 0x80
 8012832:	019b      	lsls	r3, r3, #6
 8012834:	449d      	add	sp, r3
 8012836:	bd80      	pop	{r7, pc}
 8012838:	ffffe000 	.word	0xffffe000
 801283c:	00001ffc 	.word	0x00001ffc
 8012840:	2000347c 	.word	0x2000347c
 8012844:	50000800 	.word	0x50000800
 8012848:	200033c8 	.word	0x200033c8

0801284c <Write_Single_8x16AsicII>:
  * @brief  写一个8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_Single_8x16AsicII(uint8_t Row, uint8_t Column, char Data)
{
 801284c:	b590      	push	{r4, r7, lr}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	0004      	movs	r4, r0
 8012854:	0008      	movs	r0, r1
 8012856:	0011      	movs	r1, r2
 8012858:	1dfb      	adds	r3, r7, #7
 801285a:	1c22      	adds	r2, r4, #0
 801285c:	701a      	strb	r2, [r3, #0]
 801285e:	1dbb      	adds	r3, r7, #6
 8012860:	1c02      	adds	r2, r0, #0
 8012862:	701a      	strb	r2, [r3, #0]
 8012864:	1d7b      	adds	r3, r7, #5
 8012866:	1c0a      	adds	r2, r1, #0
 8012868:	701a      	strb	r2, [r3, #0]

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 801286a:	20a0      	movs	r0, #160	; 0xa0
 801286c:	f7ff f954 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012870:	2014      	movs	r0, #20
 8012872:	f7ff f919 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012876:	2011      	movs	r0, #17
 8012878:	f7ff f916 	bl	8011aa8 <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+1);    //设置列地址，两列（8个像素点）
 801287c:	1dbb      	adds	r3, r7, #6
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	3301      	adds	r3, #1
 8012882:	b2da      	uxtb	r2, r3
 8012884:	1dbb      	adds	r3, r7, #6
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	0011      	movs	r1, r2
 801288a:	0018      	movs	r0, r3
 801288c:	f7ff ff08 	bl	80126a0 <Set_Column_Address>
	Set_Row_Address(Row, Row+15);            //设置行地址，16行（16个像素点）
 8012890:	1dfb      	adds	r3, r7, #7
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	330f      	adds	r3, #15
 8012896:	b2da      	uxtb	r2, r3
 8012898:	1dfb      	adds	r3, r7, #7
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	0011      	movs	r1, r2
 801289e:	0018      	movs	r0, r3
 80128a0:	f7ff ff1c 	bl	80126dc <Set_Row_Address>
	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 80128a4:	205c      	movs	r0, #92	; 0x5c
 80128a6:	f7ff f937 	bl	8011b18 <SPI_OLED_SendCommond>

	uint16_t k=(Data-' ')*16;//求对空格的偏移量，确定是哪个字模（*16是因为一行有16个u8数据，构成一个字符）
 80128aa:	1d7b      	adds	r3, r7, #5
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	3b20      	subs	r3, #32
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	210e      	movs	r1, #14
 80128b4:	187b      	adds	r3, r7, r1
 80128b6:	0112      	lsls	r2, r2, #4
 80128b8:	801a      	strh	r2, [r3, #0]
							 //确定字模及其偏移量后将那行的16个u8数据取出

	_1Bit_To_4Bit_8x16(&Fonts_AsicII_8x16[k]);
 80128ba:	187b      	adds	r3, r7, r1
 80128bc:	881a      	ldrh	r2, [r3, #0]
 80128be:	4b04      	ldr	r3, [pc, #16]	; (80128d0 <Write_Single_8x16AsicII+0x84>)
 80128c0:	18d3      	adds	r3, r2, r3
 80128c2:	0018      	movs	r0, r3
 80128c4:	f7ff fc66 	bl	8012194 <_1Bit_To_4Bit_8x16>


}
 80128c8:	46c0      	nop			; (mov r8, r8)
 80128ca:	46bd      	mov	sp, r7
 80128cc:	b005      	add	sp, #20
 80128ce:	bd90      	pop	{r4, r7, pc}
 80128d0:	20000010 	.word	0x20000010

080128d4 <Write_String_8x16AsicII>:
  * @brief  写一行8x16数字、字母(ASIC II)
  * @param  行，列，要写入的数字、字母
  * @retval None
  */
void Write_String_8x16AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 80128d4:	b590      	push	{r4, r7, lr}
 80128d6:	b085      	sub	sp, #20
 80128d8:	af00      	add	r7, sp, #0
 80128da:	603a      	str	r2, [r7, #0]
 80128dc:	1dfb      	adds	r3, r7, #7
 80128de:	1c02      	adds	r2, r0, #0
 80128e0:	701a      	strb	r2, [r3, #0]
 80128e2:	1dbb      	adds	r3, r7, #6
 80128e4:	1c0a      	adds	r2, r1, #0
 80128e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	0018      	movs	r0, r3
 80128ec:	f7ed fc12 	bl	8000114 <strlen>
 80128f0:	0002      	movs	r2, r0
 80128f2:	230e      	movs	r3, #14
 80128f4:	18fb      	adds	r3, r7, r3
 80128f6:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 80128f8:	230f      	movs	r3, #15
 80128fa:	18fb      	adds	r3, r7, r3
 80128fc:	2200      	movs	r2, #0
 80128fe:	701a      	strb	r2, [r3, #0]
 8012900:	e018      	b.n	8012934 <Write_String_8x16AsicII+0x60>
	{
	 Write_Single_8x16AsicII(Row,Column+2*i,Data[i]);
 8012902:	200f      	movs	r0, #15
 8012904:	183b      	adds	r3, r7, r0
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	18db      	adds	r3, r3, r3
 801290a:	b2da      	uxtb	r2, r3
 801290c:	1dbb      	adds	r3, r7, #6
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	18d3      	adds	r3, r2, r3
 8012912:	b2d9      	uxtb	r1, r3
 8012914:	0004      	movs	r4, r0
 8012916:	183b      	adds	r3, r7, r0
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	683a      	ldr	r2, [r7, #0]
 801291c:	18d3      	adds	r3, r2, r3
 801291e:	781a      	ldrb	r2, [r3, #0]
 8012920:	1dfb      	adds	r3, r7, #7
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	0018      	movs	r0, r3
 8012926:	f7ff ff91 	bl	801284c <Write_Single_8x16AsicII>
	for(i=0;i<k;i++)
 801292a:	193b      	adds	r3, r7, r4
 801292c:	781a      	ldrb	r2, [r3, #0]
 801292e:	193b      	adds	r3, r7, r4
 8012930:	3201      	adds	r2, #1
 8012932:	701a      	strb	r2, [r3, #0]
 8012934:	230f      	movs	r3, #15
 8012936:	18fa      	adds	r2, r7, r3
 8012938:	230e      	movs	r3, #14
 801293a:	18fb      	adds	r3, r7, r3
 801293c:	7812      	ldrb	r2, [r2, #0]
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	429a      	cmp	r2, r3
 8012942:	d3de      	bcc.n	8012902 <Write_String_8x16AsicII+0x2e>
	}
}
 8012944:	46c0      	nop			; (mov r8, r8)
 8012946:	46c0      	nop			; (mov r8, r8)
 8012948:	46bd      	mov	sp, r7
 801294a:	b005      	add	sp, #20
 801294c:	bd90      	pop	{r4, r7, pc}
	...

08012950 <Write_Single_16x32AsicII>:
 * @brief  写一个16x32数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_16x32AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012950:	b590      	push	{r4, r7, lr}
 8012952:	b085      	sub	sp, #20
 8012954:	af00      	add	r7, sp, #0
 8012956:	0004      	movs	r4, r0
 8012958:	0008      	movs	r0, r1
 801295a:	0011      	movs	r1, r2
 801295c:	1dfb      	adds	r3, r7, #7
 801295e:	1c22      	adds	r2, r4, #0
 8012960:	701a      	strb	r2, [r3, #0]
 8012962:	1dbb      	adds	r3, r7, #6
 8012964:	1c02      	adds	r2, r0, #0
 8012966:	701a      	strb	r2, [r3, #0]
 8012968:	1d7b      	adds	r3, r7, #5
 801296a:	1c0a      	adds	r2, r1, #0
 801296c:	701a      	strb	r2, [r3, #0]

	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 801296e:	20a0      	movs	r0, #160	; 0xa0
 8012970:	f7ff f8d2 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012974:	2014      	movs	r0, #20
 8012976:	f7ff f897 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 801297a:	2011      	movs	r0, #17
 801297c:	f7ff f894 	bl	8011aa8 <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+3);    //设置列地址
 8012980:	1dbb      	adds	r3, r7, #6
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	3303      	adds	r3, #3
 8012986:	b2da      	uxtb	r2, r3
 8012988:	1dbb      	adds	r3, r7, #6
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	0011      	movs	r1, r2
 801298e:	0018      	movs	r0, r3
 8012990:	f7ff fe86 	bl	80126a0 <Set_Column_Address>
	Set_Row_Address(Row, Row+31);            //设置行地址
 8012994:	1dfb      	adds	r3, r7, #7
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	331f      	adds	r3, #31
 801299a:	b2da      	uxtb	r2, r3
 801299c:	1dfb      	adds	r3, r7, #7
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	0011      	movs	r1, r2
 80129a2:	0018      	movs	r0, r3
 80129a4:	f7ff fe9a 	bl	80126dc <Set_Row_Address>

	SPI_OLED_SendCommond(Write_RAM_Command);			//Enable MCU to write Data into RAM
 80129a8:	205c      	movs	r0, #92	; 0x5c
 80129aa:	f7ff f8b5 	bl	8011b18 <SPI_OLED_SendCommond>

	k=(Data-' ')*64;//求对空格的偏移量
 80129ae:	1d7b      	adds	r3, r7, #5
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	3b20      	subs	r3, #32
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	210e      	movs	r1, #14
 80129b8:	187b      	adds	r3, r7, r1
 80129ba:	0192      	lsls	r2, r2, #6
 80129bc:	801a      	strh	r2, [r3, #0]

	_1Bit_To_4Bit_16x32(&Fonts_AsicII_16x32[k]);
 80129be:	187b      	adds	r3, r7, r1
 80129c0:	881a      	ldrh	r2, [r3, #0]
 80129c2:	4b04      	ldr	r3, [pc, #16]	; (80129d4 <Write_Single_16x32AsicII+0x84>)
 80129c4:	18d3      	adds	r3, r2, r3
 80129c6:	0018      	movs	r0, r3
 80129c8:	f7ff fa96 	bl	8011ef8 <_1Bit_To_4Bit_16x32>


}
 80129cc:	46c0      	nop			; (mov r8, r8)
 80129ce:	46bd      	mov	sp, r7
 80129d0:	b005      	add	sp, #20
 80129d2:	bd90      	pop	{r4, r7, pc}
 80129d4:	20001810 	.word	0x20001810

080129d8 <Write_String_16x32AsicII>:
 * @brief  写一行16x32数字、字母(ASIC II)   分辨率256*64，16*24==长16，宽32
 * @param  行，列，要写入的数字、字母         Row==行的左上角   Column==列的左边（总共64）
 * @retval None
 */
void Write_String_16x32AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 80129d8:	b590      	push	{r4, r7, lr}
 80129da:	b085      	sub	sp, #20
 80129dc:	af00      	add	r7, sp, #0
 80129de:	603a      	str	r2, [r7, #0]
 80129e0:	1dfb      	adds	r3, r7, #7
 80129e2:	1c02      	adds	r2, r0, #0
 80129e4:	701a      	strb	r2, [r3, #0]
 80129e6:	1dbb      	adds	r3, r7, #6
 80129e8:	1c0a      	adds	r2, r1, #0
 80129ea:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	0018      	movs	r0, r3
 80129f0:	f7ed fb90 	bl	8000114 <strlen>
 80129f4:	0002      	movs	r2, r0
 80129f6:	230e      	movs	r3, #14
 80129f8:	18fb      	adds	r3, r7, r3
 80129fa:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 80129fc:	230f      	movs	r3, #15
 80129fe:	18fb      	adds	r3, r7, r3
 8012a00:	2200      	movs	r2, #0
 8012a02:	701a      	strb	r2, [r3, #0]
 8012a04:	e018      	b.n	8012a38 <Write_String_16x32AsicII+0x60>
	{
	 Write_Single_16x32AsicII(Row,Column+4*i,Data[i]);
 8012a06:	200f      	movs	r0, #15
 8012a08:	183b      	adds	r3, r7, r0
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	b2da      	uxtb	r2, r3
 8012a10:	1dbb      	adds	r3, r7, #6
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	18d3      	adds	r3, r2, r3
 8012a16:	b2d9      	uxtb	r1, r3
 8012a18:	0004      	movs	r4, r0
 8012a1a:	183b      	adds	r3, r7, r0
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	683a      	ldr	r2, [r7, #0]
 8012a20:	18d3      	adds	r3, r2, r3
 8012a22:	781a      	ldrb	r2, [r3, #0]
 8012a24:	1dfb      	adds	r3, r7, #7
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	0018      	movs	r0, r3
 8012a2a:	f7ff ff91 	bl	8012950 <Write_Single_16x32AsicII>
	for(i=0;i<k;i++)
 8012a2e:	193b      	adds	r3, r7, r4
 8012a30:	781a      	ldrb	r2, [r3, #0]
 8012a32:	193b      	adds	r3, r7, r4
 8012a34:	3201      	adds	r2, #1
 8012a36:	701a      	strb	r2, [r3, #0]
 8012a38:	230f      	movs	r3, #15
 8012a3a:	18fa      	adds	r2, r7, r3
 8012a3c:	230e      	movs	r3, #14
 8012a3e:	18fb      	adds	r3, r7, r3
 8012a40:	7812      	ldrb	r2, [r2, #0]
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d3de      	bcc.n	8012a06 <Write_String_16x32AsicII+0x2e>
	}
}
 8012a48:	46c0      	nop			; (mov r8, r8)
 8012a4a:	46c0      	nop			; (mov r8, r8)
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	b005      	add	sp, #20
 8012a50:	bd90      	pop	{r4, r7, pc}
	...

08012a54 <Write_Single_12x24AsicII>:
 * @brief  写一个12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_Single_12x24AsicII(uint8_t Row, uint8_t Column, char Data)
{
 8012a54:	b590      	push	{r4, r7, lr}
 8012a56:	b085      	sub	sp, #20
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	0004      	movs	r4, r0
 8012a5c:	0008      	movs	r0, r1
 8012a5e:	0011      	movs	r1, r2
 8012a60:	1dfb      	adds	r3, r7, #7
 8012a62:	1c22      	adds	r2, r4, #0
 8012a64:	701a      	strb	r2, [r3, #0]
 8012a66:	1dbb      	adds	r3, r7, #6
 8012a68:	1c02      	adds	r2, r0, #0
 8012a6a:	701a      	strb	r2, [r3, #0]
 8012a6c:	1d7b      	adds	r3, r7, #5
 8012a6e:	1c0a      	adds	r2, r1, #0
 8012a70:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t k;

	SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);//设置扫描方向
 8012a72:	20a0      	movs	r0, #160	; 0xa0
 8012a74:	f7ff f850 	bl	8011b18 <SPI_OLED_SendCommond>
	SPI_OLED_SendData(0x14);
 8012a78:	2014      	movs	r0, #20
 8012a7a:	f7ff f815 	bl	8011aa8 <SPI_OLED_SendData>
	SPI_OLED_SendData(0x11);
 8012a7e:	2011      	movs	r0, #17
 8012a80:	f7ff f812 	bl	8011aa8 <SPI_OLED_SendData>

	Set_Column_Address(Column, Column+2);    //设置列地址
 8012a84:	1dbb      	adds	r3, r7, #6
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	3302      	adds	r3, #2
 8012a8a:	b2da      	uxtb	r2, r3
 8012a8c:	1dbb      	adds	r3, r7, #6
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	0011      	movs	r1, r2
 8012a92:	0018      	movs	r0, r3
 8012a94:	f7ff fe04 	bl	80126a0 <Set_Column_Address>
	Set_Row_Address(Row, Row+23);            //设置行地址
 8012a98:	1dfb      	adds	r3, r7, #7
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	3317      	adds	r3, #23
 8012a9e:	b2da      	uxtb	r2, r3
 8012aa0:	1dfb      	adds	r3, r7, #7
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	0011      	movs	r1, r2
 8012aa6:	0018      	movs	r0, r3
 8012aa8:	f7ff fe18 	bl	80126dc <Set_Row_Address>

	Set_WriteData();
 8012aac:	f7ff fe30 	bl	8012710 <Set_WriteData>

	k=(Data-' ')*48;//求对空格的偏移量
 8012ab0:	1d7b      	adds	r3, r7, #5
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	3b20      	subs	r3, #32
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	230c      	movs	r3, #12
 8012aba:	18fb      	adds	r3, r7, r3
 8012abc:	2130      	movs	r1, #48	; 0x30
 8012abe:	434a      	muls	r2, r1
 8012ac0:	801a      	strh	r2, [r3, #0]

	for(i=0;i<24;i++)
 8012ac2:	230f      	movs	r3, #15
 8012ac4:	18fb      	adds	r3, r7, r3
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	701a      	strb	r2, [r3, #0]
 8012aca:	e017      	b.n	8012afc <Write_Single_12x24AsicII+0xa8>
	{
		/*12*24 12bits用两个8bit组合描述，因此，每次需要访问两个u8*/
		Font_1Bit_To_4Bit_12x24(Fonts_AsicII_12x24[k],Fonts_AsicII_12x24[k+1]);
 8012acc:	240c      	movs	r4, #12
 8012ace:	193b      	adds	r3, r7, r4
 8012ad0:	881b      	ldrh	r3, [r3, #0]
 8012ad2:	4a0f      	ldr	r2, [pc, #60]	; (8012b10 <Write_Single_12x24AsicII+0xbc>)
 8012ad4:	5cd0      	ldrb	r0, [r2, r3]
 8012ad6:	193b      	adds	r3, r7, r4
 8012ad8:	881b      	ldrh	r3, [r3, #0]
 8012ada:	3301      	adds	r3, #1
 8012adc:	4a0c      	ldr	r2, [pc, #48]	; (8012b10 <Write_Single_12x24AsicII+0xbc>)
 8012ade:	5cd3      	ldrb	r3, [r2, r3]
 8012ae0:	0019      	movs	r1, r3
 8012ae2:	f7ff fc6d 	bl	80123c0 <Font_1Bit_To_4Bit_12x24>
		k=k+2;
 8012ae6:	193b      	adds	r3, r7, r4
 8012ae8:	193a      	adds	r2, r7, r4
 8012aea:	8812      	ldrh	r2, [r2, #0]
 8012aec:	3202      	adds	r2, #2
 8012aee:	801a      	strh	r2, [r3, #0]
	for(i=0;i<24;i++)
 8012af0:	210f      	movs	r1, #15
 8012af2:	187b      	adds	r3, r7, r1
 8012af4:	781a      	ldrb	r2, [r3, #0]
 8012af6:	187b      	adds	r3, r7, r1
 8012af8:	3201      	adds	r2, #1
 8012afa:	701a      	strb	r2, [r3, #0]
 8012afc:	230f      	movs	r3, #15
 8012afe:	18fb      	adds	r3, r7, r3
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	2b17      	cmp	r3, #23
 8012b04:	d9e2      	bls.n	8012acc <Write_Single_12x24AsicII+0x78>
	}
}
 8012b06:	46c0      	nop			; (mov r8, r8)
 8012b08:	46c0      	nop			; (mov r8, r8)
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	b005      	add	sp, #20
 8012b0e:	bd90      	pop	{r4, r7, pc}
 8012b10:	20000640 	.word	0x20000640

08012b14 <Write_String_12x24AsicII>:
 * @brief  写一行12x24数字、字母(ASIC II)
 * @param  行，列，要写入的数字、字母
 * @retval None
 */
void Write_String_12x24AsicII(uint8_t Row, uint8_t Column, char Data[])
{
 8012b14:	b590      	push	{r4, r7, lr}
 8012b16:	b085      	sub	sp, #20
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	603a      	str	r2, [r7, #0]
 8012b1c:	1dfb      	adds	r3, r7, #7
 8012b1e:	1c02      	adds	r2, r0, #0
 8012b20:	701a      	strb	r2, [r3, #0]
 8012b22:	1dbb      	adds	r3, r7, #6
 8012b24:	1c0a      	adds	r2, r1, #0
 8012b26:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint8_t k;
	k=strlen(Data);
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	0018      	movs	r0, r3
 8012b2c:	f7ed faf2 	bl	8000114 <strlen>
 8012b30:	0002      	movs	r2, r0
 8012b32:	230e      	movs	r3, #14
 8012b34:	18fb      	adds	r3, r7, r3
 8012b36:	701a      	strb	r2, [r3, #0]

	for(i=0;i<k;i++)
 8012b38:	230f      	movs	r3, #15
 8012b3a:	18fb      	adds	r3, r7, r3
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	701a      	strb	r2, [r3, #0]
 8012b40:	e01a      	b.n	8012b78 <Write_String_12x24AsicII+0x64>
	{
		Write_Single_12x24AsicII(Row,Column+3*i,Data[i]);
 8012b42:	200f      	movs	r0, #15
 8012b44:	183b      	adds	r3, r7, r0
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	1c1a      	adds	r2, r3, #0
 8012b4a:	1892      	adds	r2, r2, r2
 8012b4c:	18d3      	adds	r3, r2, r3
 8012b4e:	b2da      	uxtb	r2, r3
 8012b50:	1dbb      	adds	r3, r7, #6
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	18d3      	adds	r3, r2, r3
 8012b56:	b2d9      	uxtb	r1, r3
 8012b58:	0004      	movs	r4, r0
 8012b5a:	183b      	adds	r3, r7, r0
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	683a      	ldr	r2, [r7, #0]
 8012b60:	18d3      	adds	r3, r2, r3
 8012b62:	781a      	ldrb	r2, [r3, #0]
 8012b64:	1dfb      	adds	r3, r7, #7
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	0018      	movs	r0, r3
 8012b6a:	f7ff ff73 	bl	8012a54 <Write_Single_12x24AsicII>
	for(i=0;i<k;i++)
 8012b6e:	193b      	adds	r3, r7, r4
 8012b70:	781a      	ldrb	r2, [r3, #0]
 8012b72:	193b      	adds	r3, r7, r4
 8012b74:	3201      	adds	r2, #1
 8012b76:	701a      	strb	r2, [r3, #0]
 8012b78:	230f      	movs	r3, #15
 8012b7a:	18fa      	adds	r2, r7, r3
 8012b7c:	230e      	movs	r3, #14
 8012b7e:	18fb      	adds	r3, r7, r3
 8012b80:	7812      	ldrb	r2, [r2, #0]
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d3dc      	bcc.n	8012b42 <Write_String_12x24AsicII+0x2e>
	}
}
 8012b88:	46c0      	nop			; (mov r8, r8)
 8012b8a:	46c0      	nop			; (mov r8, r8)
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	b005      	add	sp, #20
 8012b90:	bd90      	pop	{r4, r7, pc}
	...

08012b94 <Display_Main_Interface_Voltage>:
  * @brief  将电压值显示出来
  * @param  电压值
  * @retval None
  */
void Display_Main_Interface_Voltage(float Voltage)
{
 8012b94:	b5b0      	push	{r4, r5, r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
	char String_voltage_real[7]={'0','0','0','.','0','0'};
 8012b9c:	2408      	movs	r4, #8
 8012b9e:	193b      	adds	r3, r7, r4
 8012ba0:	4a2c      	ldr	r2, [pc, #176]	; (8012c54 <Display_Main_Interface_Voltage+0xc0>)
 8012ba2:	6811      	ldr	r1, [r2, #0]
 8012ba4:	6019      	str	r1, [r3, #0]
 8012ba6:	8891      	ldrh	r1, [r2, #4]
 8012ba8:	8099      	strh	r1, [r3, #4]
 8012baa:	7992      	ldrb	r2, [r2, #6]
 8012bac:	719a      	strb	r2, [r3, #6]
	if(Voltage>=100)   		sprintf(String_voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 8012bae:	492a      	ldr	r1, [pc, #168]	; (8012c58 <Display_Main_Interface_Voltage+0xc4>)
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ed fcaf 	bl	8000514 <__aeabi_fcmpge>
 8012bb6:	1e03      	subs	r3, r0, #0
 8012bb8:	d009      	beq.n	8012bce <Display_Main_Interface_Voltage+0x3a>
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f7f0 f978 	bl	8002eb0 <__aeabi_f2d>
 8012bc0:	0002      	movs	r2, r0
 8012bc2:	000b      	movs	r3, r1
 8012bc4:	4925      	ldr	r1, [pc, #148]	; (8012c5c <Display_Main_Interface_Voltage+0xc8>)
 8012bc6:	1938      	adds	r0, r7, r4
 8012bc8:	f002 faa2 	bl	8015110 <siprintf>
 8012bcc:	e030      	b.n	8012c30 <Display_Main_Interface_Voltage+0x9c>
	else if(Voltage>=9.99)
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7f0 f96e 	bl	8002eb0 <__aeabi_f2d>
 8012bd4:	4a22      	ldr	r2, [pc, #136]	; (8012c60 <Display_Main_Interface_Voltage+0xcc>)
 8012bd6:	4b23      	ldr	r3, [pc, #140]	; (8012c64 <Display_Main_Interface_Voltage+0xd0>)
 8012bd8:	f7ed fc62 	bl	80004a0 <__aeabi_dcmpge>
 8012bdc:	1e03      	subs	r3, r0, #0
 8012bde:	d00f      	beq.n	8012c00 <Display_Main_Interface_Voltage+0x6c>
	{
		String_voltage_real[0]='0';
 8012be0:	2508      	movs	r5, #8
 8012be2:	197b      	adds	r3, r7, r5
 8012be4:	2230      	movs	r2, #48	; 0x30
 8012be6:	701a      	strb	r2, [r3, #0]
		sprintf(&String_voltage_real[1], "%5.2f", Voltage);//保留两位小数
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7f0 f961 	bl	8002eb0 <__aeabi_f2d>
 8012bee:	0002      	movs	r2, r0
 8012bf0:	000b      	movs	r3, r1
 8012bf2:	4c1d      	ldr	r4, [pc, #116]	; (8012c68 <Display_Main_Interface_Voltage+0xd4>)
 8012bf4:	1979      	adds	r1, r7, r5
 8012bf6:	1c48      	adds	r0, r1, #1
 8012bf8:	0021      	movs	r1, r4
 8012bfa:	f002 fa89 	bl	8015110 <siprintf>
 8012bfe:	e017      	b.n	8012c30 <Display_Main_Interface_Voltage+0x9c>
	}
	else if(Voltage>=0)
 8012c00:	2100      	movs	r1, #0
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f7ed fc86 	bl	8000514 <__aeabi_fcmpge>
 8012c08:	1e03      	subs	r3, r0, #0
 8012c0a:	d011      	beq.n	8012c30 <Display_Main_Interface_Voltage+0x9c>
	{
		String_voltage_real[0]='0';
 8012c0c:	2508      	movs	r5, #8
 8012c0e:	197b      	adds	r3, r7, r5
 8012c10:	2230      	movs	r2, #48	; 0x30
 8012c12:	701a      	strb	r2, [r3, #0]
		String_voltage_real[1]='0';
 8012c14:	197b      	adds	r3, r7, r5
 8012c16:	2230      	movs	r2, #48	; 0x30
 8012c18:	705a      	strb	r2, [r3, #1]
		sprintf(&String_voltage_real[2], "%4.2f", Voltage);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f7f0 f948 	bl	8002eb0 <__aeabi_f2d>
 8012c20:	0002      	movs	r2, r0
 8012c22:	000b      	movs	r3, r1
 8012c24:	4c11      	ldr	r4, [pc, #68]	; (8012c6c <Display_Main_Interface_Voltage+0xd8>)
 8012c26:	1979      	adds	r1, r7, r5
 8012c28:	1c88      	adds	r0, r1, #2
 8012c2a:	0021      	movs	r1, r4
 8012c2c:	f002 fa70 	bl	8015110 <siprintf>

	}


	Write_String_16x32AsicII(0, 0, String_voltage_real);
 8012c30:	2308      	movs	r3, #8
 8012c32:	18fb      	adds	r3, r7, r3
 8012c34:	001a      	movs	r2, r3
 8012c36:	2100      	movs	r1, #0
 8012c38:	2000      	movs	r0, #0
 8012c3a:	f7ff fecd 	bl	80129d8 <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0, 24, "V");
 8012c3e:	4b0c      	ldr	r3, [pc, #48]	; (8012c70 <Display_Main_Interface_Voltage+0xdc>)
 8012c40:	001a      	movs	r2, r3
 8012c42:	2118      	movs	r1, #24
 8012c44:	2000      	movs	r0, #0
 8012c46:	f7ff fec7 	bl	80129d8 <Write_String_16x32AsicII>


}
 8012c4a:	46c0      	nop			; (mov r8, r8)
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	b004      	add	sp, #16
 8012c50:	bdb0      	pop	{r4, r5, r7, pc}
 8012c52:	46c0      	nop			; (mov r8, r8)
 8012c54:	08018360 	.word	0x08018360
 8012c58:	42c80000 	.word	0x42c80000
 8012c5c:	08018344 	.word	0x08018344
 8012c60:	47ae147b 	.word	0x47ae147b
 8012c64:	4023fae1 	.word	0x4023fae1
 8012c68:	0801834c 	.word	0x0801834c
 8012c6c:	08018354 	.word	0x08018354
 8012c70:	0801835c 	.word	0x0801835c

08012c74 <Display_Main_Interface_Current>:
  * @brief  将电流值显示出来
  * @param  电流值
  * @retval None
  */
void Display_Main_Interface_Current(float Current)
{
 8012c74:	b5b0      	push	{r4, r5, r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
	char String_Current_real[7]={'0','0','0','.','0','0'};
 8012c7c:	2408      	movs	r4, #8
 8012c7e:	193b      	adds	r3, r7, r4
 8012c80:	4a2c      	ldr	r2, [pc, #176]	; (8012d34 <Display_Main_Interface_Current+0xc0>)
 8012c82:	6811      	ldr	r1, [r2, #0]
 8012c84:	6019      	str	r1, [r3, #0]
 8012c86:	8891      	ldrh	r1, [r2, #4]
 8012c88:	8099      	strh	r1, [r3, #4]
 8012c8a:	7992      	ldrb	r2, [r2, #6]
 8012c8c:	719a      	strb	r2, [r3, #6]
	if(Current>=100)     	sprintf(String_Current_real, "%6.2f", Current);//将float转为string，数据长度为6，保留两位小数
 8012c8e:	492a      	ldr	r1, [pc, #168]	; (8012d38 <Display_Main_Interface_Current+0xc4>)
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f7ed fc3f 	bl	8000514 <__aeabi_fcmpge>
 8012c96:	1e03      	subs	r3, r0, #0
 8012c98:	d009      	beq.n	8012cae <Display_Main_Interface_Current+0x3a>
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f7f0 f908 	bl	8002eb0 <__aeabi_f2d>
 8012ca0:	0002      	movs	r2, r0
 8012ca2:	000b      	movs	r3, r1
 8012ca4:	4925      	ldr	r1, [pc, #148]	; (8012d3c <Display_Main_Interface_Current+0xc8>)
 8012ca6:	1938      	adds	r0, r7, r4
 8012ca8:	f002 fa32 	bl	8015110 <siprintf>
 8012cac:	e030      	b.n	8012d10 <Display_Main_Interface_Current+0x9c>
	else if(Current>=9.99)
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f7f0 f8fe 	bl	8002eb0 <__aeabi_f2d>
 8012cb4:	4a22      	ldr	r2, [pc, #136]	; (8012d40 <Display_Main_Interface_Current+0xcc>)
 8012cb6:	4b23      	ldr	r3, [pc, #140]	; (8012d44 <Display_Main_Interface_Current+0xd0>)
 8012cb8:	f7ed fbf2 	bl	80004a0 <__aeabi_dcmpge>
 8012cbc:	1e03      	subs	r3, r0, #0
 8012cbe:	d00f      	beq.n	8012ce0 <Display_Main_Interface_Current+0x6c>
	{
		String_Current_real[0]='0';
 8012cc0:	2508      	movs	r5, #8
 8012cc2:	197b      	adds	r3, r7, r5
 8012cc4:	2230      	movs	r2, #48	; 0x30
 8012cc6:	701a      	strb	r2, [r3, #0]
		sprintf(&String_Current_real[1], "%5.2f", Current);
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f7f0 f8f1 	bl	8002eb0 <__aeabi_f2d>
 8012cce:	0002      	movs	r2, r0
 8012cd0:	000b      	movs	r3, r1
 8012cd2:	4c1d      	ldr	r4, [pc, #116]	; (8012d48 <Display_Main_Interface_Current+0xd4>)
 8012cd4:	1979      	adds	r1, r7, r5
 8012cd6:	1c48      	adds	r0, r1, #1
 8012cd8:	0021      	movs	r1, r4
 8012cda:	f002 fa19 	bl	8015110 <siprintf>
 8012cde:	e017      	b.n	8012d10 <Display_Main_Interface_Current+0x9c>
	}
	else if(Current>=0)
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7ed fc16 	bl	8000514 <__aeabi_fcmpge>
 8012ce8:	1e03      	subs	r3, r0, #0
 8012cea:	d011      	beq.n	8012d10 <Display_Main_Interface_Current+0x9c>
	{
		String_Current_real[0]='0';
 8012cec:	2508      	movs	r5, #8
 8012cee:	197b      	adds	r3, r7, r5
 8012cf0:	2230      	movs	r2, #48	; 0x30
 8012cf2:	701a      	strb	r2, [r3, #0]
		String_Current_real[1]='0';
 8012cf4:	197b      	adds	r3, r7, r5
 8012cf6:	2230      	movs	r2, #48	; 0x30
 8012cf8:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Current_real[2],"%4.2f", Current);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f7f0 f8d8 	bl	8002eb0 <__aeabi_f2d>
 8012d00:	0002      	movs	r2, r0
 8012d02:	000b      	movs	r3, r1
 8012d04:	4c11      	ldr	r4, [pc, #68]	; (8012d4c <Display_Main_Interface_Current+0xd8>)
 8012d06:	1979      	adds	r1, r7, r5
 8012d08:	1c88      	adds	r0, r1, #2
 8012d0a:	0021      	movs	r1, r4
 8012d0c:	f002 fa00 	bl	8015110 <siprintf>
	}

	Write_String_16x32AsicII(0,36, String_Current_real);
 8012d10:	2308      	movs	r3, #8
 8012d12:	18fb      	adds	r3, r7, r3
 8012d14:	001a      	movs	r2, r3
 8012d16:	2124      	movs	r1, #36	; 0x24
 8012d18:	2000      	movs	r0, #0
 8012d1a:	f7ff fe5d 	bl	80129d8 <Write_String_16x32AsicII>
	Write_String_16x32AsicII(0,60, "A");
 8012d1e:	4b0c      	ldr	r3, [pc, #48]	; (8012d50 <Display_Main_Interface_Current+0xdc>)
 8012d20:	001a      	movs	r2, r3
 8012d22:	213c      	movs	r1, #60	; 0x3c
 8012d24:	2000      	movs	r0, #0
 8012d26:	f7ff fe57 	bl	80129d8 <Write_String_16x32AsicII>

}
 8012d2a:	46c0      	nop			; (mov r8, r8)
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	b004      	add	sp, #16
 8012d30:	bdb0      	pop	{r4, r5, r7, pc}
 8012d32:	46c0      	nop			; (mov r8, r8)
 8012d34:	08018360 	.word	0x08018360
 8012d38:	42c80000 	.word	0x42c80000
 8012d3c:	08018344 	.word	0x08018344
 8012d40:	47ae147b 	.word	0x47ae147b
 8012d44:	4023fae1 	.word	0x4023fae1
 8012d48:	0801834c 	.word	0x0801834c
 8012d4c:	08018354 	.word	0x08018354
 8012d50:	08018368 	.word	0x08018368

08012d54 <Display_Main_Interface_Power>:
 * @brief  显示功率
 * @param  Shift/not Shift
 * @retval None
 */
void Display_Main_Interface_Power(float Voltage,float Current)
{
 8012d54:	b5b0      	push	{r4, r5, r7, lr}
 8012d56:	b086      	sub	sp, #24
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	6039      	str	r1, [r7, #0]
	char String_Power_real[10]={'0','0','0','.','0','0'};
 8012d5e:	2408      	movs	r4, #8
 8012d60:	1939      	adds	r1, r7, r4
 8012d62:	4a49      	ldr	r2, [pc, #292]	; (8012e88 <Display_Main_Interface_Power+0x134>)
 8012d64:	000b      	movs	r3, r1
 8012d66:	6810      	ldr	r0, [r2, #0]
 8012d68:	6018      	str	r0, [r3, #0]
 8012d6a:	8890      	ldrh	r0, [r2, #4]
 8012d6c:	8098      	strh	r0, [r3, #4]
 8012d6e:	7992      	ldrb	r2, [r2, #6]
 8012d70:	719a      	strb	r2, [r3, #6]
 8012d72:	2307      	movs	r3, #7
 8012d74:	18cb      	adds	r3, r1, r3
 8012d76:	2203      	movs	r2, #3
 8012d78:	2100      	movs	r1, #0
 8012d7a:	0018      	movs	r0, r3
 8012d7c:	f001 fc5d 	bl	801463a <memset>
	float Power=Voltage*Current;
 8012d80:	6839      	ldr	r1, [r7, #0]
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7ed ff6c 	bl	8000c60 <__aeabi_fmul>
 8012d88:	1c03      	adds	r3, r0, #0
 8012d8a:	617b      	str	r3, [r7, #20]


	if(Power>1000)
 8012d8c:	493f      	ldr	r1, [pc, #252]	; (8012e8c <Display_Main_Interface_Power+0x138>)
 8012d8e:	6978      	ldr	r0, [r7, #20]
 8012d90:	f7ed fbb6 	bl	8000500 <__aeabi_fcmpgt>
 8012d94:	1e03      	subs	r3, r0, #0
 8012d96:	d024      	beq.n	8012de2 <Display_Main_Interface_Power+0x8e>
	{
		Power/=1000.0;
 8012d98:	493c      	ldr	r1, [pc, #240]	; (8012e8c <Display_Main_Interface_Power+0x138>)
 8012d9a:	6978      	ldr	r0, [r7, #20]
 8012d9c:	f7ed fd98 	bl	80008d0 <__aeabi_fdiv>
 8012da0:	1c03      	adds	r3, r0, #0
 8012da2:	617b      	str	r3, [r7, #20]
		String_Power_real[0]='0';
 8012da4:	193b      	adds	r3, r7, r4
 8012da6:	2230      	movs	r2, #48	; 0x30
 8012da8:	701a      	strb	r2, [r3, #0]
		String_Power_real[1]='0';
 8012daa:	0025      	movs	r5, r4
 8012dac:	193b      	adds	r3, r7, r4
 8012dae:	2230      	movs	r2, #48	; 0x30
 8012db0:	705a      	strb	r2, [r3, #1]
		sprintf(&String_Power_real[2], "%4.2f", Power);
 8012db2:	6978      	ldr	r0, [r7, #20]
 8012db4:	f7f0 f87c 	bl	8002eb0 <__aeabi_f2d>
 8012db8:	0002      	movs	r2, r0
 8012dba:	000b      	movs	r3, r1
 8012dbc:	4c34      	ldr	r4, [pc, #208]	; (8012e90 <Display_Main_Interface_Power+0x13c>)
 8012dbe:	1979      	adds	r1, r7, r5
 8012dc0:	1c88      	adds	r0, r1, #2
 8012dc2:	0021      	movs	r1, r4
 8012dc4:	f002 f9a4 	bl	8015110 <siprintf>

		Write_String_16x32AsicII(32,0,String_Power_real);
 8012dc8:	197b      	adds	r3, r7, r5
 8012dca:	001a      	movs	r2, r3
 8012dcc:	2100      	movs	r1, #0
 8012dce:	2020      	movs	r0, #32
 8012dd0:	f7ff fe02 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(32,24,"KW");
 8012dd4:	4b2f      	ldr	r3, [pc, #188]	; (8012e94 <Display_Main_Interface_Power+0x140>)
 8012dd6:	001a      	movs	r2, r3
 8012dd8:	2118      	movs	r1, #24
 8012dda:	2020      	movs	r0, #32
 8012ddc:	f7ff fdfc 	bl	80129d8 <Write_String_16x32AsicII>

		Write_String_12x24AsicII(40,0,String_Power_real);
		Write_Single_12x24AsicII(40,24,'W');
	}

}
 8012de0:	e04d      	b.n	8012e7e <Display_Main_Interface_Power+0x12a>
		if(Power>=100)     	sprintf(String_Power_real, "%6.2f", Power);//将float转为string，数据长度为6，保留两位小数
 8012de2:	492d      	ldr	r1, [pc, #180]	; (8012e98 <Display_Main_Interface_Power+0x144>)
 8012de4:	6978      	ldr	r0, [r7, #20]
 8012de6:	f7ed fb95 	bl	8000514 <__aeabi_fcmpge>
 8012dea:	1e03      	subs	r3, r0, #0
 8012dec:	d00a      	beq.n	8012e04 <Display_Main_Interface_Power+0xb0>
 8012dee:	6978      	ldr	r0, [r7, #20]
 8012df0:	f7f0 f85e 	bl	8002eb0 <__aeabi_f2d>
 8012df4:	0002      	movs	r2, r0
 8012df6:	000b      	movs	r3, r1
 8012df8:	4928      	ldr	r1, [pc, #160]	; (8012e9c <Display_Main_Interface_Power+0x148>)
 8012dfa:	2008      	movs	r0, #8
 8012dfc:	1838      	adds	r0, r7, r0
 8012dfe:	f002 f987 	bl	8015110 <siprintf>
 8012e02:	e030      	b.n	8012e66 <Display_Main_Interface_Power+0x112>
		else if(Power>=9.99)
 8012e04:	6978      	ldr	r0, [r7, #20]
 8012e06:	f7f0 f853 	bl	8002eb0 <__aeabi_f2d>
 8012e0a:	4a25      	ldr	r2, [pc, #148]	; (8012ea0 <Display_Main_Interface_Power+0x14c>)
 8012e0c:	4b25      	ldr	r3, [pc, #148]	; (8012ea4 <Display_Main_Interface_Power+0x150>)
 8012e0e:	f7ed fb47 	bl	80004a0 <__aeabi_dcmpge>
 8012e12:	1e03      	subs	r3, r0, #0
 8012e14:	d00f      	beq.n	8012e36 <Display_Main_Interface_Power+0xe2>
			String_Power_real[0]=' ';
 8012e16:	2508      	movs	r5, #8
 8012e18:	197b      	adds	r3, r7, r5
 8012e1a:	2220      	movs	r2, #32
 8012e1c:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Power_real[1], "%5.2f", Power);
 8012e1e:	6978      	ldr	r0, [r7, #20]
 8012e20:	f7f0 f846 	bl	8002eb0 <__aeabi_f2d>
 8012e24:	0002      	movs	r2, r0
 8012e26:	000b      	movs	r3, r1
 8012e28:	4c1f      	ldr	r4, [pc, #124]	; (8012ea8 <Display_Main_Interface_Power+0x154>)
 8012e2a:	1979      	adds	r1, r7, r5
 8012e2c:	1c48      	adds	r0, r1, #1
 8012e2e:	0021      	movs	r1, r4
 8012e30:	f002 f96e 	bl	8015110 <siprintf>
 8012e34:	e017      	b.n	8012e66 <Display_Main_Interface_Power+0x112>
		else if(Power>=0)
 8012e36:	2100      	movs	r1, #0
 8012e38:	6978      	ldr	r0, [r7, #20]
 8012e3a:	f7ed fb6b 	bl	8000514 <__aeabi_fcmpge>
 8012e3e:	1e03      	subs	r3, r0, #0
 8012e40:	d011      	beq.n	8012e66 <Display_Main_Interface_Power+0x112>
			String_Power_real[0]=' ';
 8012e42:	2508      	movs	r5, #8
 8012e44:	197b      	adds	r3, r7, r5
 8012e46:	2220      	movs	r2, #32
 8012e48:	701a      	strb	r2, [r3, #0]
			String_Power_real[1]=' ';
 8012e4a:	197b      	adds	r3, r7, r5
 8012e4c:	2220      	movs	r2, #32
 8012e4e:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Power_real[2],"%4.2f", Power);
 8012e50:	6978      	ldr	r0, [r7, #20]
 8012e52:	f7f0 f82d 	bl	8002eb0 <__aeabi_f2d>
 8012e56:	0002      	movs	r2, r0
 8012e58:	000b      	movs	r3, r1
 8012e5a:	4c0d      	ldr	r4, [pc, #52]	; (8012e90 <Display_Main_Interface_Power+0x13c>)
 8012e5c:	1979      	adds	r1, r7, r5
 8012e5e:	1c88      	adds	r0, r1, #2
 8012e60:	0021      	movs	r1, r4
 8012e62:	f002 f955 	bl	8015110 <siprintf>
		Write_String_12x24AsicII(40,0,String_Power_real);
 8012e66:	2308      	movs	r3, #8
 8012e68:	18fb      	adds	r3, r7, r3
 8012e6a:	001a      	movs	r2, r3
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	2028      	movs	r0, #40	; 0x28
 8012e70:	f7ff fe50 	bl	8012b14 <Write_String_12x24AsicII>
		Write_Single_12x24AsicII(40,24,'W');
 8012e74:	2257      	movs	r2, #87	; 0x57
 8012e76:	2118      	movs	r1, #24
 8012e78:	2028      	movs	r0, #40	; 0x28
 8012e7a:	f7ff fdeb 	bl	8012a54 <Write_Single_12x24AsicII>
}
 8012e7e:	46c0      	nop			; (mov r8, r8)
 8012e80:	46bd      	mov	sp, r7
 8012e82:	b006      	add	sp, #24
 8012e84:	bdb0      	pop	{r4, r5, r7, pc}
 8012e86:	46c0      	nop			; (mov r8, r8)
 8012e88:	08018370 	.word	0x08018370
 8012e8c:	447a0000 	.word	0x447a0000
 8012e90:	08018354 	.word	0x08018354
 8012e94:	0801836c 	.word	0x0801836c
 8012e98:	42c80000 	.word	0x42c80000
 8012e9c:	08018344 	.word	0x08018344
 8012ea0:	47ae147b 	.word	0x47ae147b
 8012ea4:	4023fae1 	.word	0x4023fae1
 8012ea8:	0801834c 	.word	0x0801834c

08012eac <Display_Main_Interface_Lock>:
 * @brief  显示键盘锁定状态
 * @param  显示ON，不显示OFF
 * @retval None
 */
static void Display_Main_Interface_Lock(uint8_t State)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	0002      	movs	r2, r0
 8012eb4:	1dfb      	adds	r3, r7, #7
 8012eb6:	701a      	strb	r2, [r3, #0]
	if(State==UNLOCK) Write_String_8x16AsicII(32,36, "      ");
 8012eb8:	1dfb      	adds	r3, r7, #7
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d106      	bne.n	8012ece <Display_Main_Interface_Lock+0x22>
 8012ec0:	4b08      	ldr	r3, [pc, #32]	; (8012ee4 <Display_Main_Interface_Lock+0x38>)
 8012ec2:	001a      	movs	r2, r3
 8012ec4:	2124      	movs	r1, #36	; 0x24
 8012ec6:	2020      	movs	r0, #32
 8012ec8:	f7ff fd04 	bl	80128d4 <Write_String_8x16AsicII>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");

}
 8012ecc:	e005      	b.n	8012eda <Display_Main_Interface_Lock+0x2e>
	else 			  Write_String_8x16AsicII(32,36, "LOCK  ");
 8012ece:	4b06      	ldr	r3, [pc, #24]	; (8012ee8 <Display_Main_Interface_Lock+0x3c>)
 8012ed0:	001a      	movs	r2, r3
 8012ed2:	2124      	movs	r1, #36	; 0x24
 8012ed4:	2020      	movs	r0, #32
 8012ed6:	f7ff fcfd 	bl	80128d4 <Write_String_8x16AsicII>
}
 8012eda:	46c0      	nop			; (mov r8, r8)
 8012edc:	46bd      	mov	sp, r7
 8012ede:	b002      	add	sp, #8
 8012ee0:	bd80      	pop	{r7, pc}
 8012ee2:	46c0      	nop			; (mov r8, r8)
 8012ee4:	0801837c 	.word	0x0801837c
 8012ee8:	08018384 	.word	0x08018384

08012eec <Display_Main_Interface_CV_CC_CP>:
 * @brief  显示处于CV/CC/CP状态
 * @param  CV/CC/CP
 * @retval None
 */
void Display_Main_Interface_CV_CC_CP(uint8_t CV_CC_CP)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	0002      	movs	r2, r0
 8012ef4:	1dfb      	adds	r3, r7, #7
 8012ef6:	701a      	strb	r2, [r3, #0]
	uint8_t State;

	State = CV_CC_CP;
 8012ef8:	210f      	movs	r1, #15
 8012efa:	187b      	adds	r3, r7, r1
 8012efc:	1dfa      	adds	r2, r7, #7
 8012efe:	7812      	ldrb	r2, [r2, #0]
 8012f00:	701a      	strb	r2, [r3, #0]
	switch(State)
 8012f02:	187b      	adds	r3, r7, r1
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	2b01      	cmp	r3, #1
 8012f08:	d002      	beq.n	8012f10 <Display_Main_Interface_CV_CC_CP+0x24>
 8012f0a:	2b02      	cmp	r3, #2
 8012f0c:	d007      	beq.n	8012f1e <Display_Main_Interface_CV_CC_CP+0x32>
 8012f0e:	e00d      	b.n	8012f2c <Display_Main_Interface_CV_CC_CP+0x40>
	{
		case CV:
			Write_String_8x16AsicII(48, 36, "CV");break;
 8012f10:	4b0c      	ldr	r3, [pc, #48]	; (8012f44 <Display_Main_Interface_CV_CC_CP+0x58>)
 8012f12:	001a      	movs	r2, r3
 8012f14:	2124      	movs	r1, #36	; 0x24
 8012f16:	2030      	movs	r0, #48	; 0x30
 8012f18:	f7ff fcdc 	bl	80128d4 <Write_String_8x16AsicII>
 8012f1c:	e00d      	b.n	8012f3a <Display_Main_Interface_CV_CC_CP+0x4e>
		case CC:
			Write_String_8x16AsicII(48, 36, "CC");break;
 8012f1e:	4b0a      	ldr	r3, [pc, #40]	; (8012f48 <Display_Main_Interface_CV_CC_CP+0x5c>)
 8012f20:	001a      	movs	r2, r3
 8012f22:	2124      	movs	r1, #36	; 0x24
 8012f24:	2030      	movs	r0, #48	; 0x30
 8012f26:	f7ff fcd5 	bl	80128d4 <Write_String_8x16AsicII>
 8012f2a:	e006      	b.n	8012f3a <Display_Main_Interface_CV_CC_CP+0x4e>
		default:
			{
				Write_String_8x16AsicII(48, 36, "  ");
 8012f2c:	4b07      	ldr	r3, [pc, #28]	; (8012f4c <Display_Main_Interface_CV_CC_CP+0x60>)
 8012f2e:	001a      	movs	r2, r3
 8012f30:	2124      	movs	r1, #36	; 0x24
 8012f32:	2030      	movs	r0, #48	; 0x30
 8012f34:	f7ff fcce 	bl	80128d4 <Write_String_8x16AsicII>
				break;
 8012f38:	46c0      	nop			; (mov r8, r8)
			}
	}
}
 8012f3a:	46c0      	nop			; (mov r8, r8)
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	b004      	add	sp, #16
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	46c0      	nop			; (mov r8, r8)
 8012f44:	0801838c 	.word	0x0801838c
 8012f48:	08018390 	.word	0x08018390
 8012f4c:	08018394 	.word	0x08018394

08012f50 <Display_Main_Interface_ON_OFF>:
 * @brief  显示处于ON/OFF状态
 * @param  ON/OFF
 * @retval None
 */
void Display_Main_Interface_ON_OFF(uint8_t State)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	0002      	movs	r2, r0
 8012f58:	1dfb      	adds	r3, r7, #7
 8012f5a:	701a      	strb	r2, [r3, #0]
	if(State==OUTPUT)
 8012f5c:	1dfb      	adds	r3, r7, #7
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d106      	bne.n	8012f72 <Display_Main_Interface_ON_OFF+0x22>
	{
		Write_String_8x16AsicII(48, 58, "ON ");
 8012f64:	4b08      	ldr	r3, [pc, #32]	; (8012f88 <Display_Main_Interface_ON_OFF+0x38>)
 8012f66:	001a      	movs	r2, r3
 8012f68:	213a      	movs	r1, #58	; 0x3a
 8012f6a:	2030      	movs	r0, #48	; 0x30
 8012f6c:	f7ff fcb2 	bl	80128d4 <Write_String_8x16AsicII>
	}
	else
	{
		Write_String_8x16AsicII(48, 58, "OFF");
	}
}
 8012f70:	e005      	b.n	8012f7e <Display_Main_Interface_ON_OFF+0x2e>
		Write_String_8x16AsicII(48, 58, "OFF");
 8012f72:	4b06      	ldr	r3, [pc, #24]	; (8012f8c <Display_Main_Interface_ON_OFF+0x3c>)
 8012f74:	001a      	movs	r2, r3
 8012f76:	213a      	movs	r1, #58	; 0x3a
 8012f78:	2030      	movs	r0, #48	; 0x30
 8012f7a:	f7ff fcab 	bl	80128d4 <Write_String_8x16AsicII>
}
 8012f7e:	46c0      	nop			; (mov r8, r8)
 8012f80:	46bd      	mov	sp, r7
 8012f82:	b002      	add	sp, #8
 8012f84:	bd80      	pop	{r7, pc}
 8012f86:	46c0      	nop			; (mov r8, r8)
 8012f88:	08018398 	.word	0x08018398
 8012f8c:	0801839c 	.word	0x0801839c

08012f90 <Display_Main_Interface_Shift>:
 * @brief  显示处于Shift/not Shift状态
 * @param  Shift/not Shift
 * @retval None
 */
static void Display_Main_Interface_Shift(uint8_t State)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	0002      	movs	r2, r0
 8012f98:	1dfb      	adds	r3, r7, #7
 8012f9a:	701a      	strb	r2, [r3, #0]
	switch(State)
 8012f9c:	1dfb      	adds	r3, r7, #7
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d008      	beq.n	8012fb6 <Display_Main_Interface_Shift+0x26>
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d10d      	bne.n	8012fc4 <Display_Main_Interface_Shift+0x34>
	{
		case Shift: Write_String_8x16AsicII(48,44, "Shift"); break;
 8012fa8:	4b09      	ldr	r3, [pc, #36]	; (8012fd0 <Display_Main_Interface_Shift+0x40>)
 8012faa:	001a      	movs	r2, r3
 8012fac:	212c      	movs	r1, #44	; 0x2c
 8012fae:	2030      	movs	r0, #48	; 0x30
 8012fb0:	f7ff fc90 	bl	80128d4 <Write_String_8x16AsicII>
 8012fb4:	e007      	b.n	8012fc6 <Display_Main_Interface_Shift+0x36>
		case Not_Shift: Write_String_8x16AsicII(48, 44, "     "); break;
 8012fb6:	4b07      	ldr	r3, [pc, #28]	; (8012fd4 <Display_Main_Interface_Shift+0x44>)
 8012fb8:	001a      	movs	r2, r3
 8012fba:	212c      	movs	r1, #44	; 0x2c
 8012fbc:	2030      	movs	r0, #48	; 0x30
 8012fbe:	f7ff fc89 	bl	80128d4 <Write_String_8x16AsicII>
 8012fc2:	e000      	b.n	8012fc6 <Display_Main_Interface_Shift+0x36>
		default: break;
 8012fc4:	46c0      	nop			; (mov r8, r8)
	}
}
 8012fc6:	46c0      	nop			; (mov r8, r8)
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	b002      	add	sp, #8
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	46c0      	nop			; (mov r8, r8)
 8012fd0:	080183a0 	.word	0x080183a0
 8012fd4:	080183a8 	.word	0x080183a8

08012fd8 <Display_Main_Interface_V_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_V_set  (void)

{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 8012fde:	4b90      	ldr	r3, [pc, #576]	; (8013220 <Display_Main_Interface_V_set+0x248>)
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d000      	beq.n	8012fe8 <Display_Main_Interface_V_set+0x10>
 8012fe6:	e0a9      	b.n	801313c <Display_Main_Interface_V_set+0x164>
	{
		Write_String_8x16AsicII(48,56,"VSET");
 8012fe8:	4b8e      	ldr	r3, [pc, #568]	; (8013224 <Display_Main_Interface_V_set+0x24c>)
 8012fea:	001a      	movs	r2, r3
 8012fec:	2138      	movs	r1, #56	; 0x38
 8012fee:	2030      	movs	r0, #48	; 0x30
 8012ff0:	f7ff fc70 	bl	80128d4 <Write_String_8x16AsicII>


		/*显示上一电流设定值*/
		float Current=Set_Current/100.0;
 8012ff4:	4b8c      	ldr	r3, [pc, #560]	; (8013228 <Display_Main_Interface_V_set+0x250>)
 8012ff6:	881b      	ldrh	r3, [r3, #0]
 8012ff8:	0018      	movs	r0, r3
 8012ffa:	f7ef ff03 	bl	8002e04 <__aeabi_i2d>
 8012ffe:	2200      	movs	r2, #0
 8013000:	4b8a      	ldr	r3, [pc, #552]	; (801322c <Display_Main_Interface_V_set+0x254>)
 8013002:	f7ee fcab 	bl	800195c <__aeabi_ddiv>
 8013006:	0002      	movs	r2, r0
 8013008:	000b      	movs	r3, r1
 801300a:	0010      	movs	r0, r2
 801300c:	0019      	movs	r1, r3
 801300e:	f7ef ff97 	bl	8002f40 <__aeabi_d2f>
 8013012:	1c03      	adds	r3, r0, #0
 8013014:	60bb      	str	r3, [r7, #8]
		static char String_Current_real[7]={'0','0','0','.','0','0'};
		if(Current>=100)   		sprintf(String_Current_real, "%6.2f", Current);//将float转为string，保留一位小数
 8013016:	4986      	ldr	r1, [pc, #536]	; (8013230 <Display_Main_Interface_V_set+0x258>)
 8013018:	68b8      	ldr	r0, [r7, #8]
 801301a:	f7ed fa7b 	bl	8000514 <__aeabi_fcmpge>
 801301e:	1e03      	subs	r3, r0, #0
 8013020:	d009      	beq.n	8013036 <Display_Main_Interface_V_set+0x5e>
 8013022:	68b8      	ldr	r0, [r7, #8]
 8013024:	f7ef ff44 	bl	8002eb0 <__aeabi_f2d>
 8013028:	0002      	movs	r2, r0
 801302a:	000b      	movs	r3, r1
 801302c:	4981      	ldr	r1, [pc, #516]	; (8013234 <Display_Main_Interface_V_set+0x25c>)
 801302e:	4882      	ldr	r0, [pc, #520]	; (8013238 <Display_Main_Interface_V_set+0x260>)
 8013030:	f002 f86e 	bl	8015110 <siprintf>
 8013034:	e02a      	b.n	801308c <Display_Main_Interface_V_set+0xb4>
		else if(Current>=9.99)
 8013036:	68b8      	ldr	r0, [r7, #8]
 8013038:	f7ef ff3a 	bl	8002eb0 <__aeabi_f2d>
 801303c:	4a7f      	ldr	r2, [pc, #508]	; (801323c <Display_Main_Interface_V_set+0x264>)
 801303e:	4b80      	ldr	r3, [pc, #512]	; (8013240 <Display_Main_Interface_V_set+0x268>)
 8013040:	f7ed fa2e 	bl	80004a0 <__aeabi_dcmpge>
 8013044:	1e03      	subs	r3, r0, #0
 8013046:	d00c      	beq.n	8013062 <Display_Main_Interface_V_set+0x8a>
		{
			String_Current_real[0]='0';
 8013048:	4b7b      	ldr	r3, [pc, #492]	; (8013238 <Display_Main_Interface_V_set+0x260>)
 801304a:	2230      	movs	r2, #48	; 0x30
 801304c:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current_real[1], "%5.2f", Current);//保留两位小数
 801304e:	68b8      	ldr	r0, [r7, #8]
 8013050:	f7ef ff2e 	bl	8002eb0 <__aeabi_f2d>
 8013054:	0002      	movs	r2, r0
 8013056:	000b      	movs	r3, r1
 8013058:	497a      	ldr	r1, [pc, #488]	; (8013244 <Display_Main_Interface_V_set+0x26c>)
 801305a:	487b      	ldr	r0, [pc, #492]	; (8013248 <Display_Main_Interface_V_set+0x270>)
 801305c:	f002 f858 	bl	8015110 <siprintf>
 8013060:	e014      	b.n	801308c <Display_Main_Interface_V_set+0xb4>
		}
		else if(Current>=0)
 8013062:	2100      	movs	r1, #0
 8013064:	68b8      	ldr	r0, [r7, #8]
 8013066:	f7ed fa55 	bl	8000514 <__aeabi_fcmpge>
 801306a:	1e03      	subs	r3, r0, #0
 801306c:	d00e      	beq.n	801308c <Display_Main_Interface_V_set+0xb4>
		{
			String_Current_real[0]='0';
 801306e:	4b72      	ldr	r3, [pc, #456]	; (8013238 <Display_Main_Interface_V_set+0x260>)
 8013070:	2230      	movs	r2, #48	; 0x30
 8013072:	701a      	strb	r2, [r3, #0]
			String_Current_real[1]='0';
 8013074:	4b70      	ldr	r3, [pc, #448]	; (8013238 <Display_Main_Interface_V_set+0x260>)
 8013076:	2230      	movs	r2, #48	; 0x30
 8013078:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current_real[2], "%4.2f", Current);
 801307a:	68b8      	ldr	r0, [r7, #8]
 801307c:	f7ef ff18 	bl	8002eb0 <__aeabi_f2d>
 8013080:	0002      	movs	r2, r0
 8013082:	000b      	movs	r3, r1
 8013084:	4971      	ldr	r1, [pc, #452]	; (801324c <Display_Main_Interface_V_set+0x274>)
 8013086:	4872      	ldr	r0, [pc, #456]	; (8013250 <Display_Main_Interface_V_set+0x278>)
 8013088:	f002 f842 	bl	8015110 <siprintf>

		}
		Write_String_16x32AsicII(16,36,String_Current_real);
 801308c:	4b6a      	ldr	r3, [pc, #424]	; (8013238 <Display_Main_Interface_V_set+0x260>)
 801308e:	001a      	movs	r2, r3
 8013090:	2124      	movs	r1, #36	; 0x24
 8013092:	2010      	movs	r0, #16
 8013094:	f7ff fca0 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013098:	2241      	movs	r2, #65	; 0x41
 801309a:	213c      	movs	r1, #60	; 0x3c
 801309c:	2010      	movs	r0, #16
 801309e:	f7ff fc57 	bl	8012950 <Write_Single_16x32AsicII>
		/*显示上电压设定值*/
		float Voltage=String_to_float(String_Voltage);//实时设定值
 80130a2:	4b6c      	ldr	r3, [pc, #432]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 80130a4:	0018      	movs	r0, r3
 80130a6:	f7fb f909 	bl	800e2bc <String_to_float>
 80130aa:	1c03      	adds	r3, r0, #0
 80130ac:	607b      	str	r3, [r7, #4]
		if(Voltage>=100)   		sprintf(String_Voltage, "%6.2f", Voltage);//将float转为string，保留一位小数
 80130ae:	4960      	ldr	r1, [pc, #384]	; (8013230 <Display_Main_Interface_V_set+0x258>)
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7ed fa2f 	bl	8000514 <__aeabi_fcmpge>
 80130b6:	1e03      	subs	r3, r0, #0
 80130b8:	d009      	beq.n	80130ce <Display_Main_Interface_V_set+0xf6>
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f7ef fef8 	bl	8002eb0 <__aeabi_f2d>
 80130c0:	0002      	movs	r2, r0
 80130c2:	000b      	movs	r3, r1
 80130c4:	495b      	ldr	r1, [pc, #364]	; (8013234 <Display_Main_Interface_V_set+0x25c>)
 80130c6:	4863      	ldr	r0, [pc, #396]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 80130c8:	f002 f822 	bl	8015110 <siprintf>
 80130cc:	e02a      	b.n	8013124 <Display_Main_Interface_V_set+0x14c>
		else if(Voltage>=9.99)
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f7ef feee 	bl	8002eb0 <__aeabi_f2d>
 80130d4:	4a59      	ldr	r2, [pc, #356]	; (801323c <Display_Main_Interface_V_set+0x264>)
 80130d6:	4b5a      	ldr	r3, [pc, #360]	; (8013240 <Display_Main_Interface_V_set+0x268>)
 80130d8:	f7ed f9e2 	bl	80004a0 <__aeabi_dcmpge>
 80130dc:	1e03      	subs	r3, r0, #0
 80130de:	d00c      	beq.n	80130fa <Display_Main_Interface_V_set+0x122>
		{
			String_Voltage[0]='0';
 80130e0:	4b5c      	ldr	r3, [pc, #368]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 80130e2:	2230      	movs	r2, #48	; 0x30
 80130e4:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage[1], "%5.2f", Voltage);//保留两位小数
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f7ef fee2 	bl	8002eb0 <__aeabi_f2d>
 80130ec:	0002      	movs	r2, r0
 80130ee:	000b      	movs	r3, r1
 80130f0:	4954      	ldr	r1, [pc, #336]	; (8013244 <Display_Main_Interface_V_set+0x26c>)
 80130f2:	4859      	ldr	r0, [pc, #356]	; (8013258 <Display_Main_Interface_V_set+0x280>)
 80130f4:	f002 f80c 	bl	8015110 <siprintf>
 80130f8:	e014      	b.n	8013124 <Display_Main_Interface_V_set+0x14c>
		}
		else if(Voltage>=0)
 80130fa:	2100      	movs	r1, #0
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7ed fa09 	bl	8000514 <__aeabi_fcmpge>
 8013102:	1e03      	subs	r3, r0, #0
 8013104:	d00e      	beq.n	8013124 <Display_Main_Interface_V_set+0x14c>
		{
			String_Voltage[0]='0';
 8013106:	4b53      	ldr	r3, [pc, #332]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 8013108:	2230      	movs	r2, #48	; 0x30
 801310a:	701a      	strb	r2, [r3, #0]
			String_Voltage[1]='0';
 801310c:	4b51      	ldr	r3, [pc, #324]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 801310e:	2230      	movs	r2, #48	; 0x30
 8013110:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage[2], "%4.2f", Voltage);
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f7ef fecc 	bl	8002eb0 <__aeabi_f2d>
 8013118:	0002      	movs	r2, r0
 801311a:	000b      	movs	r3, r1
 801311c:	494b      	ldr	r1, [pc, #300]	; (801324c <Display_Main_Interface_V_set+0x274>)
 801311e:	484f      	ldr	r0, [pc, #316]	; (801325c <Display_Main_Interface_V_set+0x284>)
 8013120:	f001 fff6 	bl	8015110 <siprintf>

		}

		Write_String_16x32AsicII(16, 0, String_Voltage);
 8013124:	4b4b      	ldr	r3, [pc, #300]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 8013126:	001a      	movs	r2, r3
 8013128:	2100      	movs	r1, #0
 801312a:	2010      	movs	r0, #16
 801312c:	f7ff fc54 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 8013130:	2256      	movs	r2, #86	; 0x56
 8013132:	2118      	movs	r1, #24
 8013134:	2010      	movs	r0, #16
 8013136:	f7ff fc0b 	bl	8012950 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16, 0, String_Voltage);
	}



}
 801313a:	e06c      	b.n	8013216 <Display_Main_Interface_V_set+0x23e>
	else if(Keys_Encoder_Mode==Keys_Mode)
 801313c:	4b38      	ldr	r3, [pc, #224]	; (8013220 <Display_Main_Interface_V_set+0x248>)
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d168      	bne.n	8013216 <Display_Main_Interface_V_set+0x23e>
		Write_String_8x16AsicII(48,56,"VSET");
 8013144:	4b37      	ldr	r3, [pc, #220]	; (8013224 <Display_Main_Interface_V_set+0x24c>)
 8013146:	001a      	movs	r2, r3
 8013148:	2138      	movs	r1, #56	; 0x38
 801314a:	2030      	movs	r0, #48	; 0x30
 801314c:	f7ff fbc2 	bl	80128d4 <Write_String_8x16AsicII>
		Write_String_16x32AsicII(16,0,String_Voltage);
 8013150:	4b40      	ldr	r3, [pc, #256]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 8013152:	001a      	movs	r2, r3
 8013154:	2100      	movs	r1, #0
 8013156:	2010      	movs	r0, #16
 8013158:	f7ff fc3e 	bl	80129d8 <Write_String_16x32AsicII>
		float Current=Set_Current/100.0;
 801315c:	4b32      	ldr	r3, [pc, #200]	; (8013228 <Display_Main_Interface_V_set+0x250>)
 801315e:	881b      	ldrh	r3, [r3, #0]
 8013160:	0018      	movs	r0, r3
 8013162:	f7ef fe4f 	bl	8002e04 <__aeabi_i2d>
 8013166:	2200      	movs	r2, #0
 8013168:	4b30      	ldr	r3, [pc, #192]	; (801322c <Display_Main_Interface_V_set+0x254>)
 801316a:	f7ee fbf7 	bl	800195c <__aeabi_ddiv>
 801316e:	0002      	movs	r2, r0
 8013170:	000b      	movs	r3, r1
 8013172:	0010      	movs	r0, r2
 8013174:	0019      	movs	r1, r3
 8013176:	f7ef fee3 	bl	8002f40 <__aeabi_d2f>
 801317a:	1c03      	adds	r3, r0, #0
 801317c:	60fb      	str	r3, [r7, #12]
		if(Current>=100)   		sprintf(String_Current_real, "%6.2f", Current);//将float转为string，保留一位小数
 801317e:	492c      	ldr	r1, [pc, #176]	; (8013230 <Display_Main_Interface_V_set+0x258>)
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f7ed f9c7 	bl	8000514 <__aeabi_fcmpge>
 8013186:	1e03      	subs	r3, r0, #0
 8013188:	d009      	beq.n	801319e <Display_Main_Interface_V_set+0x1c6>
 801318a:	68f8      	ldr	r0, [r7, #12]
 801318c:	f7ef fe90 	bl	8002eb0 <__aeabi_f2d>
 8013190:	0002      	movs	r2, r0
 8013192:	000b      	movs	r3, r1
 8013194:	4927      	ldr	r1, [pc, #156]	; (8013234 <Display_Main_Interface_V_set+0x25c>)
 8013196:	4832      	ldr	r0, [pc, #200]	; (8013260 <Display_Main_Interface_V_set+0x288>)
 8013198:	f001 ffba 	bl	8015110 <siprintf>
 801319c:	e02a      	b.n	80131f4 <Display_Main_Interface_V_set+0x21c>
		else if(Current>=9.99)
 801319e:	68f8      	ldr	r0, [r7, #12]
 80131a0:	f7ef fe86 	bl	8002eb0 <__aeabi_f2d>
 80131a4:	4a25      	ldr	r2, [pc, #148]	; (801323c <Display_Main_Interface_V_set+0x264>)
 80131a6:	4b26      	ldr	r3, [pc, #152]	; (8013240 <Display_Main_Interface_V_set+0x268>)
 80131a8:	f7ed f97a 	bl	80004a0 <__aeabi_dcmpge>
 80131ac:	1e03      	subs	r3, r0, #0
 80131ae:	d00c      	beq.n	80131ca <Display_Main_Interface_V_set+0x1f2>
			String_Current_real[0]='0';
 80131b0:	4b2b      	ldr	r3, [pc, #172]	; (8013260 <Display_Main_Interface_V_set+0x288>)
 80131b2:	2230      	movs	r2, #48	; 0x30
 80131b4:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current_real[1], "%5.2f", Current);//保留两位小数
 80131b6:	68f8      	ldr	r0, [r7, #12]
 80131b8:	f7ef fe7a 	bl	8002eb0 <__aeabi_f2d>
 80131bc:	0002      	movs	r2, r0
 80131be:	000b      	movs	r3, r1
 80131c0:	4920      	ldr	r1, [pc, #128]	; (8013244 <Display_Main_Interface_V_set+0x26c>)
 80131c2:	4828      	ldr	r0, [pc, #160]	; (8013264 <Display_Main_Interface_V_set+0x28c>)
 80131c4:	f001 ffa4 	bl	8015110 <siprintf>
 80131c8:	e014      	b.n	80131f4 <Display_Main_Interface_V_set+0x21c>
		else if(Current>=0)
 80131ca:	2100      	movs	r1, #0
 80131cc:	68f8      	ldr	r0, [r7, #12]
 80131ce:	f7ed f9a1 	bl	8000514 <__aeabi_fcmpge>
 80131d2:	1e03      	subs	r3, r0, #0
 80131d4:	d00e      	beq.n	80131f4 <Display_Main_Interface_V_set+0x21c>
			String_Current_real[0]='0';
 80131d6:	4b22      	ldr	r3, [pc, #136]	; (8013260 <Display_Main_Interface_V_set+0x288>)
 80131d8:	2230      	movs	r2, #48	; 0x30
 80131da:	701a      	strb	r2, [r3, #0]
			String_Current_real[1]='0';
 80131dc:	4b20      	ldr	r3, [pc, #128]	; (8013260 <Display_Main_Interface_V_set+0x288>)
 80131de:	2230      	movs	r2, #48	; 0x30
 80131e0:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current_real[2], "%4.2f", Current);
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f7ef fe64 	bl	8002eb0 <__aeabi_f2d>
 80131e8:	0002      	movs	r2, r0
 80131ea:	000b      	movs	r3, r1
 80131ec:	4917      	ldr	r1, [pc, #92]	; (801324c <Display_Main_Interface_V_set+0x274>)
 80131ee:	481e      	ldr	r0, [pc, #120]	; (8013268 <Display_Main_Interface_V_set+0x290>)
 80131f0:	f001 ff8e 	bl	8015110 <siprintf>
		Write_String_16x32AsicII(16,36,String_Current_real);
 80131f4:	4b1a      	ldr	r3, [pc, #104]	; (8013260 <Display_Main_Interface_V_set+0x288>)
 80131f6:	001a      	movs	r2, r3
 80131f8:	2124      	movs	r1, #36	; 0x24
 80131fa:	2010      	movs	r0, #16
 80131fc:	f7ff fbec 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 8013200:	2241      	movs	r2, #65	; 0x41
 8013202:	213c      	movs	r1, #60	; 0x3c
 8013204:	2010      	movs	r0, #16
 8013206:	f7ff fba3 	bl	8012950 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16, 0, String_Voltage);
 801320a:	4b12      	ldr	r3, [pc, #72]	; (8013254 <Display_Main_Interface_V_set+0x27c>)
 801320c:	001a      	movs	r2, r3
 801320e:	2100      	movs	r1, #0
 8013210:	2010      	movs	r0, #16
 8013212:	f7ff fbe1 	bl	80129d8 <Write_String_16x32AsicII>
}
 8013216:	46c0      	nop			; (mov r8, r8)
 8013218:	46bd      	mov	sp, r7
 801321a:	b004      	add	sp, #16
 801321c:	bd80      	pop	{r7, pc}
 801321e:	46c0      	nop			; (mov r8, r8)
 8013220:	20002fd4 	.word	0x20002fd4
 8013224:	080183e0 	.word	0x080183e0
 8013228:	20002fdc 	.word	0x20002fdc
 801322c:	40590000 	.word	0x40590000
 8013230:	42c80000 	.word	0x42c80000
 8013234:	08018344 	.word	0x08018344
 8013238:	200030b8 	.word	0x200030b8
 801323c:	47ae147b 	.word	0x47ae147b
 8013240:	4023fae1 	.word	0x4023fae1
 8013244:	0801834c 	.word	0x0801834c
 8013248:	200030b9 	.word	0x200030b9
 801324c:	08018354 	.word	0x08018354
 8013250:	200030ba 	.word	0x200030ba
 8013254:	2000305c 	.word	0x2000305c
 8013258:	2000305d 	.word	0x2000305d
 801325c:	2000305e 	.word	0x2000305e
 8013260:	200030c0 	.word	0x200030c0
 8013264:	200030c1 	.word	0x200030c1
 8013268:	200030c2 	.word	0x200030c2

0801326c <Display_Main_Interface_I_set>:
* @param  Shift/NotShift
* @retval None
*/
void Display_Main_Interface_I_set  (void)

{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
	if(Keys_Encoder_Mode==Encoder_Mode)
 8013272:	4b8d      	ldr	r3, [pc, #564]	; (80134a8 <Display_Main_Interface_I_set+0x23c>)
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	2b01      	cmp	r3, #1
 8013278:	d000      	beq.n	801327c <Display_Main_Interface_I_set+0x10>
 801327a:	e0a9      	b.n	80133d0 <Display_Main_Interface_I_set+0x164>
	{
		Write_String_8x16AsicII(48,56,"ISET");
 801327c:	4b8b      	ldr	r3, [pc, #556]	; (80134ac <Display_Main_Interface_I_set+0x240>)
 801327e:	001a      	movs	r2, r3
 8013280:	2138      	movs	r1, #56	; 0x38
 8013282:	2030      	movs	r0, #48	; 0x30
 8013284:	f7ff fb26 	bl	80128d4 <Write_String_8x16AsicII>
		/*编码器模式下显示上一电压设定值*/
		float Voltage=Set_Voltage/100.0;
 8013288:	4b89      	ldr	r3, [pc, #548]	; (80134b0 <Display_Main_Interface_I_set+0x244>)
 801328a:	881b      	ldrh	r3, [r3, #0]
 801328c:	0018      	movs	r0, r3
 801328e:	f7ef fdb9 	bl	8002e04 <__aeabi_i2d>
 8013292:	2200      	movs	r2, #0
 8013294:	4b87      	ldr	r3, [pc, #540]	; (80134b4 <Display_Main_Interface_I_set+0x248>)
 8013296:	f7ee fb61 	bl	800195c <__aeabi_ddiv>
 801329a:	0002      	movs	r2, r0
 801329c:	000b      	movs	r3, r1
 801329e:	0010      	movs	r0, r2
 80132a0:	0019      	movs	r1, r3
 80132a2:	f7ef fe4d 	bl	8002f40 <__aeabi_d2f>
 80132a6:	1c03      	adds	r3, r0, #0
 80132a8:	60bb      	str	r3, [r7, #8]
		static char String_Voltage_real[7]={'0','0','0','.','0','0'};
		if(Voltage>=100)   		sprintf(String_Voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 80132aa:	4983      	ldr	r1, [pc, #524]	; (80134b8 <Display_Main_Interface_I_set+0x24c>)
 80132ac:	68b8      	ldr	r0, [r7, #8]
 80132ae:	f7ed f931 	bl	8000514 <__aeabi_fcmpge>
 80132b2:	1e03      	subs	r3, r0, #0
 80132b4:	d009      	beq.n	80132ca <Display_Main_Interface_I_set+0x5e>
 80132b6:	68b8      	ldr	r0, [r7, #8]
 80132b8:	f7ef fdfa 	bl	8002eb0 <__aeabi_f2d>
 80132bc:	0002      	movs	r2, r0
 80132be:	000b      	movs	r3, r1
 80132c0:	497e      	ldr	r1, [pc, #504]	; (80134bc <Display_Main_Interface_I_set+0x250>)
 80132c2:	487f      	ldr	r0, [pc, #508]	; (80134c0 <Display_Main_Interface_I_set+0x254>)
 80132c4:	f001 ff24 	bl	8015110 <siprintf>
 80132c8:	e02a      	b.n	8013320 <Display_Main_Interface_I_set+0xb4>
		else if(Voltage>=9.99)
 80132ca:	68b8      	ldr	r0, [r7, #8]
 80132cc:	f7ef fdf0 	bl	8002eb0 <__aeabi_f2d>
 80132d0:	4a7c      	ldr	r2, [pc, #496]	; (80134c4 <Display_Main_Interface_I_set+0x258>)
 80132d2:	4b7d      	ldr	r3, [pc, #500]	; (80134c8 <Display_Main_Interface_I_set+0x25c>)
 80132d4:	f7ed f8e4 	bl	80004a0 <__aeabi_dcmpge>
 80132d8:	1e03      	subs	r3, r0, #0
 80132da:	d00c      	beq.n	80132f6 <Display_Main_Interface_I_set+0x8a>
		{
			String_Voltage_real[0]='0';
 80132dc:	4b78      	ldr	r3, [pc, #480]	; (80134c0 <Display_Main_Interface_I_set+0x254>)
 80132de:	2230      	movs	r2, #48	; 0x30
 80132e0:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage_real[1], "%5.2f", Voltage);//保留两位小数
 80132e2:	68b8      	ldr	r0, [r7, #8]
 80132e4:	f7ef fde4 	bl	8002eb0 <__aeabi_f2d>
 80132e8:	0002      	movs	r2, r0
 80132ea:	000b      	movs	r3, r1
 80132ec:	4977      	ldr	r1, [pc, #476]	; (80134cc <Display_Main_Interface_I_set+0x260>)
 80132ee:	4878      	ldr	r0, [pc, #480]	; (80134d0 <Display_Main_Interface_I_set+0x264>)
 80132f0:	f001 ff0e 	bl	8015110 <siprintf>
 80132f4:	e014      	b.n	8013320 <Display_Main_Interface_I_set+0xb4>
		}
		else if(Voltage>=0)
 80132f6:	2100      	movs	r1, #0
 80132f8:	68b8      	ldr	r0, [r7, #8]
 80132fa:	f7ed f90b 	bl	8000514 <__aeabi_fcmpge>
 80132fe:	1e03      	subs	r3, r0, #0
 8013300:	d00e      	beq.n	8013320 <Display_Main_Interface_I_set+0xb4>
		{
			String_Voltage_real[0]='0';
 8013302:	4b6f      	ldr	r3, [pc, #444]	; (80134c0 <Display_Main_Interface_I_set+0x254>)
 8013304:	2230      	movs	r2, #48	; 0x30
 8013306:	701a      	strb	r2, [r3, #0]
			String_Voltage_real[1]='0';
 8013308:	4b6d      	ldr	r3, [pc, #436]	; (80134c0 <Display_Main_Interface_I_set+0x254>)
 801330a:	2230      	movs	r2, #48	; 0x30
 801330c:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage_real[2], "%4.2f", Voltage);
 801330e:	68b8      	ldr	r0, [r7, #8]
 8013310:	f7ef fdce 	bl	8002eb0 <__aeabi_f2d>
 8013314:	0002      	movs	r2, r0
 8013316:	000b      	movs	r3, r1
 8013318:	496e      	ldr	r1, [pc, #440]	; (80134d4 <Display_Main_Interface_I_set+0x268>)
 801331a:	486f      	ldr	r0, [pc, #444]	; (80134d8 <Display_Main_Interface_I_set+0x26c>)
 801331c:	f001 fef8 	bl	8015110 <siprintf>

		}

		Write_String_16x32AsicII(16, 0, String_Voltage_real);
 8013320:	4b67      	ldr	r3, [pc, #412]	; (80134c0 <Display_Main_Interface_I_set+0x254>)
 8013322:	001a      	movs	r2, r3
 8013324:	2100      	movs	r1, #0
 8013326:	2010      	movs	r0, #16
 8013328:	f7ff fb56 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 801332c:	2256      	movs	r2, #86	; 0x56
 801332e:	2118      	movs	r1, #24
 8013330:	2010      	movs	r0, #16
 8013332:	f7ff fb0d 	bl	8012950 <Write_Single_16x32AsicII>
		/*编码器模式下显示电流设定值*/
		float Current=String_to_float(String_Current);
 8013336:	4b69      	ldr	r3, [pc, #420]	; (80134dc <Display_Main_Interface_I_set+0x270>)
 8013338:	0018      	movs	r0, r3
 801333a:	f7fa ffbf 	bl	800e2bc <String_to_float>
 801333e:	1c03      	adds	r3, r0, #0
 8013340:	607b      	str	r3, [r7, #4]
		if(Current>=100)   		sprintf(String_Current, "%6.2f", Current);//将float转为string，保留一位小数
 8013342:	495d      	ldr	r1, [pc, #372]	; (80134b8 <Display_Main_Interface_I_set+0x24c>)
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ed f8e5 	bl	8000514 <__aeabi_fcmpge>
 801334a:	1e03      	subs	r3, r0, #0
 801334c:	d009      	beq.n	8013362 <Display_Main_Interface_I_set+0xf6>
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f7ef fdae 	bl	8002eb0 <__aeabi_f2d>
 8013354:	0002      	movs	r2, r0
 8013356:	000b      	movs	r3, r1
 8013358:	4958      	ldr	r1, [pc, #352]	; (80134bc <Display_Main_Interface_I_set+0x250>)
 801335a:	4860      	ldr	r0, [pc, #384]	; (80134dc <Display_Main_Interface_I_set+0x270>)
 801335c:	f001 fed8 	bl	8015110 <siprintf>
 8013360:	e02a      	b.n	80133b8 <Display_Main_Interface_I_set+0x14c>
		else if(Current>=9.99)
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7ef fda4 	bl	8002eb0 <__aeabi_f2d>
 8013368:	4a56      	ldr	r2, [pc, #344]	; (80134c4 <Display_Main_Interface_I_set+0x258>)
 801336a:	4b57      	ldr	r3, [pc, #348]	; (80134c8 <Display_Main_Interface_I_set+0x25c>)
 801336c:	f7ed f898 	bl	80004a0 <__aeabi_dcmpge>
 8013370:	1e03      	subs	r3, r0, #0
 8013372:	d00c      	beq.n	801338e <Display_Main_Interface_I_set+0x122>
		{
			String_Current[0]='0';
 8013374:	4b59      	ldr	r3, [pc, #356]	; (80134dc <Display_Main_Interface_I_set+0x270>)
 8013376:	2230      	movs	r2, #48	; 0x30
 8013378:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Current[1], "%5.2f", Current);//保留两位小数
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ef fd98 	bl	8002eb0 <__aeabi_f2d>
 8013380:	0002      	movs	r2, r0
 8013382:	000b      	movs	r3, r1
 8013384:	4951      	ldr	r1, [pc, #324]	; (80134cc <Display_Main_Interface_I_set+0x260>)
 8013386:	4856      	ldr	r0, [pc, #344]	; (80134e0 <Display_Main_Interface_I_set+0x274>)
 8013388:	f001 fec2 	bl	8015110 <siprintf>
 801338c:	e014      	b.n	80133b8 <Display_Main_Interface_I_set+0x14c>
		}
		else if(Current>=0)
 801338e:	2100      	movs	r1, #0
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f7ed f8bf 	bl	8000514 <__aeabi_fcmpge>
 8013396:	1e03      	subs	r3, r0, #0
 8013398:	d00e      	beq.n	80133b8 <Display_Main_Interface_I_set+0x14c>
		{
			String_Current[0]='0';
 801339a:	4b50      	ldr	r3, [pc, #320]	; (80134dc <Display_Main_Interface_I_set+0x270>)
 801339c:	2230      	movs	r2, #48	; 0x30
 801339e:	701a      	strb	r2, [r3, #0]
			String_Current[1]='0';
 80133a0:	4b4e      	ldr	r3, [pc, #312]	; (80134dc <Display_Main_Interface_I_set+0x270>)
 80133a2:	2230      	movs	r2, #48	; 0x30
 80133a4:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Current[2], "%4.2f", Current);
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f7ef fd82 	bl	8002eb0 <__aeabi_f2d>
 80133ac:	0002      	movs	r2, r0
 80133ae:	000b      	movs	r3, r1
 80133b0:	4948      	ldr	r1, [pc, #288]	; (80134d4 <Display_Main_Interface_I_set+0x268>)
 80133b2:	484c      	ldr	r0, [pc, #304]	; (80134e4 <Display_Main_Interface_I_set+0x278>)
 80133b4:	f001 feac 	bl	8015110 <siprintf>

		}
		Write_String_16x32AsicII(16,36,String_Current);
 80133b8:	4b48      	ldr	r3, [pc, #288]	; (80134dc <Display_Main_Interface_I_set+0x270>)
 80133ba:	001a      	movs	r2, r3
 80133bc:	2124      	movs	r1, #36	; 0x24
 80133be:	2010      	movs	r0, #16
 80133c0:	f7ff fb0a 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 80133c4:	2241      	movs	r2, #65	; 0x41
 80133c6:	213c      	movs	r1, #60	; 0x3c
 80133c8:	2010      	movs	r0, #16
 80133ca:	f7ff fac1 	bl	8012950 <Write_Single_16x32AsicII>
		/*按键模式下显示当前电流设定值*/
		Write_String_16x32AsicII(16,36,String_Current);
	}


}
 80133ce:	e066      	b.n	801349e <Display_Main_Interface_I_set+0x232>
	else if(Keys_Encoder_Mode==Keys_Mode)
 80133d0:	4b35      	ldr	r3, [pc, #212]	; (80134a8 <Display_Main_Interface_I_set+0x23c>)
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d162      	bne.n	801349e <Display_Main_Interface_I_set+0x232>
		Write_String_8x16AsicII(48,56,"ISET");
 80133d8:	4b34      	ldr	r3, [pc, #208]	; (80134ac <Display_Main_Interface_I_set+0x240>)
 80133da:	001a      	movs	r2, r3
 80133dc:	2138      	movs	r1, #56	; 0x38
 80133de:	2030      	movs	r0, #48	; 0x30
 80133e0:	f7ff fa78 	bl	80128d4 <Write_String_8x16AsicII>
		float Voltage=Set_Voltage/100.0;
 80133e4:	4b32      	ldr	r3, [pc, #200]	; (80134b0 <Display_Main_Interface_I_set+0x244>)
 80133e6:	881b      	ldrh	r3, [r3, #0]
 80133e8:	0018      	movs	r0, r3
 80133ea:	f7ef fd0b 	bl	8002e04 <__aeabi_i2d>
 80133ee:	2200      	movs	r2, #0
 80133f0:	4b30      	ldr	r3, [pc, #192]	; (80134b4 <Display_Main_Interface_I_set+0x248>)
 80133f2:	f7ee fab3 	bl	800195c <__aeabi_ddiv>
 80133f6:	0002      	movs	r2, r0
 80133f8:	000b      	movs	r3, r1
 80133fa:	0010      	movs	r0, r2
 80133fc:	0019      	movs	r1, r3
 80133fe:	f7ef fd9f 	bl	8002f40 <__aeabi_d2f>
 8013402:	1c03      	adds	r3, r0, #0
 8013404:	60fb      	str	r3, [r7, #12]
		if(Voltage>=100)   		sprintf(String_Voltage_real, "%6.2f", Voltage);//将float转为string，保留一位小数
 8013406:	492c      	ldr	r1, [pc, #176]	; (80134b8 <Display_Main_Interface_I_set+0x24c>)
 8013408:	68f8      	ldr	r0, [r7, #12]
 801340a:	f7ed f883 	bl	8000514 <__aeabi_fcmpge>
 801340e:	1e03      	subs	r3, r0, #0
 8013410:	d009      	beq.n	8013426 <Display_Main_Interface_I_set+0x1ba>
 8013412:	68f8      	ldr	r0, [r7, #12]
 8013414:	f7ef fd4c 	bl	8002eb0 <__aeabi_f2d>
 8013418:	0002      	movs	r2, r0
 801341a:	000b      	movs	r3, r1
 801341c:	4927      	ldr	r1, [pc, #156]	; (80134bc <Display_Main_Interface_I_set+0x250>)
 801341e:	4832      	ldr	r0, [pc, #200]	; (80134e8 <Display_Main_Interface_I_set+0x27c>)
 8013420:	f001 fe76 	bl	8015110 <siprintf>
 8013424:	e02a      	b.n	801347c <Display_Main_Interface_I_set+0x210>
		else if(Voltage>=9.99)
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f7ef fd42 	bl	8002eb0 <__aeabi_f2d>
 801342c:	4a25      	ldr	r2, [pc, #148]	; (80134c4 <Display_Main_Interface_I_set+0x258>)
 801342e:	4b26      	ldr	r3, [pc, #152]	; (80134c8 <Display_Main_Interface_I_set+0x25c>)
 8013430:	f7ed f836 	bl	80004a0 <__aeabi_dcmpge>
 8013434:	1e03      	subs	r3, r0, #0
 8013436:	d00c      	beq.n	8013452 <Display_Main_Interface_I_set+0x1e6>
			String_Voltage_real[0]='0';
 8013438:	4b2b      	ldr	r3, [pc, #172]	; (80134e8 <Display_Main_Interface_I_set+0x27c>)
 801343a:	2230      	movs	r2, #48	; 0x30
 801343c:	701a      	strb	r2, [r3, #0]
			sprintf(&String_Voltage_real[1], "%5.2f", Voltage);//保留两位小数
 801343e:	68f8      	ldr	r0, [r7, #12]
 8013440:	f7ef fd36 	bl	8002eb0 <__aeabi_f2d>
 8013444:	0002      	movs	r2, r0
 8013446:	000b      	movs	r3, r1
 8013448:	4920      	ldr	r1, [pc, #128]	; (80134cc <Display_Main_Interface_I_set+0x260>)
 801344a:	4828      	ldr	r0, [pc, #160]	; (80134ec <Display_Main_Interface_I_set+0x280>)
 801344c:	f001 fe60 	bl	8015110 <siprintf>
 8013450:	e014      	b.n	801347c <Display_Main_Interface_I_set+0x210>
		else if(Voltage>=0)
 8013452:	2100      	movs	r1, #0
 8013454:	68f8      	ldr	r0, [r7, #12]
 8013456:	f7ed f85d 	bl	8000514 <__aeabi_fcmpge>
 801345a:	1e03      	subs	r3, r0, #0
 801345c:	d00e      	beq.n	801347c <Display_Main_Interface_I_set+0x210>
			String_Voltage_real[0]='0';
 801345e:	4b22      	ldr	r3, [pc, #136]	; (80134e8 <Display_Main_Interface_I_set+0x27c>)
 8013460:	2230      	movs	r2, #48	; 0x30
 8013462:	701a      	strb	r2, [r3, #0]
			String_Voltage_real[1]='0';
 8013464:	4b20      	ldr	r3, [pc, #128]	; (80134e8 <Display_Main_Interface_I_set+0x27c>)
 8013466:	2230      	movs	r2, #48	; 0x30
 8013468:	705a      	strb	r2, [r3, #1]
			sprintf(&String_Voltage_real[2], "%4.2f", Voltage);
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f7ef fd20 	bl	8002eb0 <__aeabi_f2d>
 8013470:	0002      	movs	r2, r0
 8013472:	000b      	movs	r3, r1
 8013474:	4917      	ldr	r1, [pc, #92]	; (80134d4 <Display_Main_Interface_I_set+0x268>)
 8013476:	481e      	ldr	r0, [pc, #120]	; (80134f0 <Display_Main_Interface_I_set+0x284>)
 8013478:	f001 fe4a 	bl	8015110 <siprintf>
		Write_String_16x32AsicII(16, 0, String_Voltage_real);
 801347c:	4b1a      	ldr	r3, [pc, #104]	; (80134e8 <Display_Main_Interface_I_set+0x27c>)
 801347e:	001a      	movs	r2, r3
 8013480:	2100      	movs	r1, #0
 8013482:	2010      	movs	r0, #16
 8013484:	f7ff faa8 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24, 'V');
 8013488:	2256      	movs	r2, #86	; 0x56
 801348a:	2118      	movs	r1, #24
 801348c:	2010      	movs	r0, #16
 801348e:	f7ff fa5f 	bl	8012950 <Write_Single_16x32AsicII>
		Write_String_16x32AsicII(16,36,String_Current);
 8013492:	4b12      	ldr	r3, [pc, #72]	; (80134dc <Display_Main_Interface_I_set+0x270>)
 8013494:	001a      	movs	r2, r3
 8013496:	2124      	movs	r1, #36	; 0x24
 8013498:	2010      	movs	r0, #16
 801349a:	f7ff fa9d 	bl	80129d8 <Write_String_16x32AsicII>
}
 801349e:	46c0      	nop			; (mov r8, r8)
 80134a0:	46bd      	mov	sp, r7
 80134a2:	b004      	add	sp, #16
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	46c0      	nop			; (mov r8, r8)
 80134a8:	20002fd4 	.word	0x20002fd4
 80134ac:	080183e8 	.word	0x080183e8
 80134b0:	20002fda 	.word	0x20002fda
 80134b4:	40590000 	.word	0x40590000
 80134b8:	42c80000 	.word	0x42c80000
 80134bc:	08018344 	.word	0x08018344
 80134c0:	200030c8 	.word	0x200030c8
 80134c4:	47ae147b 	.word	0x47ae147b
 80134c8:	4023fae1 	.word	0x4023fae1
 80134cc:	0801834c 	.word	0x0801834c
 80134d0:	200030c9 	.word	0x200030c9
 80134d4:	08018354 	.word	0x08018354
 80134d8:	200030ca 	.word	0x200030ca
 80134dc:	20003064 	.word	0x20003064
 80134e0:	20003065 	.word	0x20003065
 80134e4:	20003066 	.word	0x20003066
 80134e8:	200030d0 	.word	0x200030d0
 80134ec:	200030d1 	.word	0x200030d1
 80134f0:	200030d2 	.word	0x200030d2

080134f4 <Display_Main_Interface>:
							const uint8_t DELAY_NOT_DELAY,
							const uint8_t Preset_Actual,
							const uint8_t LOCK_UNLOCK,
							const uint8_t Shift_NotShift)

{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	0019      	movs	r1, r3
 8013500:	1dfb      	adds	r3, r7, #7
 8013502:	701a      	strb	r2, [r3, #0]
 8013504:	1dbb      	adds	r3, r7, #6
 8013506:	1c0a      	adds	r2, r1, #0
 8013508:	701a      	strb	r2, [r3, #0]


		//Current_Actual=Current_real;
		Display_Main_Interface_Voltage(Voltage_Actual);
 801350a:	4b16      	ldr	r3, [pc, #88]	; (8013564 <Display_Main_Interface+0x70>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	1c18      	adds	r0, r3, #0
 8013510:	f7ff fb40 	bl	8012b94 <Display_Main_Interface_Voltage>
		Display_Main_Interface_Current(Current_Actual);
 8013514:	4b14      	ldr	r3, [pc, #80]	; (8013568 <Display_Main_Interface+0x74>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	1c18      	adds	r0, r3, #0
 801351a:	f7ff fbab 	bl	8012c74 <Display_Main_Interface_Current>
		Display_Main_Interface_Power(Voltage_Actual,Current_Actual);
 801351e:	4b11      	ldr	r3, [pc, #68]	; (8013564 <Display_Main_Interface+0x70>)
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	4b11      	ldr	r3, [pc, #68]	; (8013568 <Display_Main_Interface+0x74>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	1c19      	adds	r1, r3, #0
 8013528:	1c10      	adds	r0, r2, #0
 801352a:	f7ff fc13 	bl	8012d54 <Display_Main_Interface_Power>
		Display_Main_Interface_Lock(LOCK_UNLOCK);
 801352e:	2324      	movs	r3, #36	; 0x24
 8013530:	18fb      	adds	r3, r7, r3
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	0018      	movs	r0, r3
 8013536:	f7ff fcb9 	bl	8012eac <Display_Main_Interface_Lock>

		Display_Main_Interface_CV_CC_CP(CV_CC_CP);
 801353a:	1dbb      	adds	r3, r7, #6
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	0018      	movs	r0, r3
 8013540:	f7ff fcd4 	bl	8012eec <Display_Main_Interface_CV_CC_CP>
		//Display_Main_Interface_CYCLE_DELAY(CYCLE_NOT_CYCLE, DELAY_NOT_DELAY);
		Display_Main_Interface_ON_OFF(OUTPUT_NOT_OUTPUT);
 8013544:	4b09      	ldr	r3, [pc, #36]	; (801356c <Display_Main_Interface+0x78>)
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	0018      	movs	r0, r3
 801354a:	f7ff fd01 	bl	8012f50 <Display_Main_Interface_ON_OFF>
		Display_Main_Interface_Shift(Shift_NotShift);
 801354e:	2328      	movs	r3, #40	; 0x28
 8013550:	18fb      	adds	r3, r7, r3
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	0018      	movs	r0, r3
 8013556:	f7ff fd1b 	bl	8012f90 <Display_Main_Interface_Shift>
		//Display_Vertical_Line_1(44,0,63);

//		Voltage_index++;

}
 801355a:	46c0      	nop			; (mov r8, r8)
 801355c:	46bd      	mov	sp, r7
 801355e:	b004      	add	sp, #16
 8013560:	bd80      	pop	{r7, pc}
 8013562:	46c0      	nop			; (mov r8, r8)
 8013564:	2000399c 	.word	0x2000399c
 8013568:	200039a0 	.word	0x200039a0
 801356c:	20003989 	.word	0x20003989

08013570 <Display_Param_Interface>:

void Display_Param_Interface(const uint16_t Set_Voltage,const uint16_t Set_Current)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	0002      	movs	r2, r0
 8013578:	1dbb      	adds	r3, r7, #6
 801357a:	801a      	strh	r2, [r3, #0]
 801357c:	1d3b      	adds	r3, r7, #4
 801357e:	1c0a      	adds	r2, r1, #0
 8013580:	801a      	strh	r2, [r3, #0]

	float Voltage,Current;
	Voltage=Set_Voltage/100.0;
 8013582:	1dbb      	adds	r3, r7, #6
 8013584:	881b      	ldrh	r3, [r3, #0]
 8013586:	0018      	movs	r0, r3
 8013588:	f7ef fc3c 	bl	8002e04 <__aeabi_i2d>
 801358c:	2200      	movs	r2, #0
 801358e:	4b17      	ldr	r3, [pc, #92]	; (80135ec <Display_Param_Interface+0x7c>)
 8013590:	f7ee f9e4 	bl	800195c <__aeabi_ddiv>
 8013594:	0002      	movs	r2, r0
 8013596:	000b      	movs	r3, r1
 8013598:	0010      	movs	r0, r2
 801359a:	0019      	movs	r1, r3
 801359c:	f7ef fcd0 	bl	8002f40 <__aeabi_d2f>
 80135a0:	1c03      	adds	r3, r0, #0
 80135a2:	60fb      	str	r3, [r7, #12]
	Current=Set_Current/100.0;
 80135a4:	1d3b      	adds	r3, r7, #4
 80135a6:	881b      	ldrh	r3, [r3, #0]
 80135a8:	0018      	movs	r0, r3
 80135aa:	f7ef fc2b 	bl	8002e04 <__aeabi_i2d>
 80135ae:	2200      	movs	r2, #0
 80135b0:	4b0e      	ldr	r3, [pc, #56]	; (80135ec <Display_Param_Interface+0x7c>)
 80135b2:	f7ee f9d3 	bl	800195c <__aeabi_ddiv>
 80135b6:	0002      	movs	r2, r0
 80135b8:	000b      	movs	r3, r1
 80135ba:	0010      	movs	r0, r2
 80135bc:	0019      	movs	r1, r3
 80135be:	f7ef fcbf 	bl	8002f40 <__aeabi_d2f>
 80135c2:	1c03      	adds	r3, r0, #0
 80135c4:	60bb      	str	r3, [r7, #8]
	Display_Main_Interface_Voltage(Voltage);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	1c18      	adds	r0, r3, #0
 80135ca:	f7ff fae3 	bl	8012b94 <Display_Main_Interface_Voltage>
	Display_Main_Interface_Current(Current);
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	1c18      	adds	r0, r3, #0
 80135d2:	f7ff fb4f 	bl	8012c74 <Display_Main_Interface_Current>
	Display_Main_Interface_Power(Voltage,Current);
 80135d6:	68ba      	ldr	r2, [r7, #8]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	1c11      	adds	r1, r2, #0
 80135dc:	1c18      	adds	r0, r3, #0
 80135de:	f7ff fbb9 	bl	8012d54 <Display_Main_Interface_Power>
}
 80135e2:	46c0      	nop			; (mov r8, r8)
 80135e4:	46bd      	mov	sp, r7
 80135e6:	b004      	add	sp, #16
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	46c0      	nop			; (mov r8, r8)
 80135ec:	40590000 	.word	0x40590000

080135f0 <Display_Access_Interface_Voltage>:
 * @brief  显示存取界面电压值
 * @param  设定的电压值，范围0到99.99V
 * @retval None
 */
static void Display_Access_Interface_Voltage(float Voltage)
{
 80135f0:	b5b0      	push	{r4, r5, r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]

	char string_voltage[7]={0};
 80135f8:	2408      	movs	r4, #8
 80135fa:	193b      	adds	r3, r7, r4
 80135fc:	2200      	movs	r2, #0
 80135fe:	601a      	str	r2, [r3, #0]
 8013600:	3304      	adds	r3, #4
 8013602:	2203      	movs	r2, #3
 8013604:	2100      	movs	r1, #0
 8013606:	0018      	movs	r0, r3
 8013608:	f001 f817 	bl	801463a <memset>
	if(Voltage>=100)      sprintf(string_voltage, "%6.2f", Voltage);
 801360c:	4931      	ldr	r1, [pc, #196]	; (80136d4 <Display_Access_Interface_Voltage+0xe4>)
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f7ec ff80 	bl	8000514 <__aeabi_fcmpge>
 8013614:	1e03      	subs	r3, r0, #0
 8013616:	d009      	beq.n	801362c <Display_Access_Interface_Voltage+0x3c>
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f7ef fc49 	bl	8002eb0 <__aeabi_f2d>
 801361e:	0002      	movs	r2, r0
 8013620:	000b      	movs	r3, r1
 8013622:	492d      	ldr	r1, [pc, #180]	; (80136d8 <Display_Access_Interface_Voltage+0xe8>)
 8013624:	1938      	adds	r0, r7, r4
 8013626:	f001 fd73 	bl	8015110 <siprintf>
 801362a:	e02d      	b.n	8013688 <Display_Access_Interface_Voltage+0x98>
	else if(Voltage>=10)
 801362c:	492b      	ldr	r1, [pc, #172]	; (80136dc <Display_Access_Interface_Voltage+0xec>)
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7ec ff70 	bl	8000514 <__aeabi_fcmpge>
 8013634:	1e03      	subs	r3, r0, #0
 8013636:	d00f      	beq.n	8013658 <Display_Access_Interface_Voltage+0x68>
	{
		string_voltage[0]='0';
 8013638:	2508      	movs	r5, #8
 801363a:	197b      	adds	r3, r7, r5
 801363c:	2230      	movs	r2, #48	; 0x30
 801363e:	701a      	strb	r2, [r3, #0]
		sprintf(&string_voltage[1], "%5.2f", Voltage);
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ef fc35 	bl	8002eb0 <__aeabi_f2d>
 8013646:	0002      	movs	r2, r0
 8013648:	000b      	movs	r3, r1
 801364a:	4c25      	ldr	r4, [pc, #148]	; (80136e0 <Display_Access_Interface_Voltage+0xf0>)
 801364c:	1979      	adds	r1, r7, r5
 801364e:	1c48      	adds	r0, r1, #1
 8013650:	0021      	movs	r1, r4
 8013652:	f001 fd5d 	bl	8015110 <siprintf>
 8013656:	e017      	b.n	8013688 <Display_Access_Interface_Voltage+0x98>

	}
	else if(Voltage>=0)
 8013658:	2100      	movs	r1, #0
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7ec ff5a 	bl	8000514 <__aeabi_fcmpge>
 8013660:	1e03      	subs	r3, r0, #0
 8013662:	d011      	beq.n	8013688 <Display_Access_Interface_Voltage+0x98>
	{
		string_voltage[0]='0';
 8013664:	2508      	movs	r5, #8
 8013666:	197b      	adds	r3, r7, r5
 8013668:	2230      	movs	r2, #48	; 0x30
 801366a:	701a      	strb	r2, [r3, #0]
		string_voltage[1]='0';
 801366c:	197b      	adds	r3, r7, r5
 801366e:	2230      	movs	r2, #48	; 0x30
 8013670:	705a      	strb	r2, [r3, #1]
		sprintf(&string_voltage[2], "%4.2f", Voltage);
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f7ef fc1c 	bl	8002eb0 <__aeabi_f2d>
 8013678:	0002      	movs	r2, r0
 801367a:	000b      	movs	r3, r1
 801367c:	4c19      	ldr	r4, [pc, #100]	; (80136e4 <Display_Access_Interface_Voltage+0xf4>)
 801367e:	1979      	adds	r1, r7, r5
 8013680:	1c88      	adds	r0, r1, #2
 8013682:	0021      	movs	r1, r4
 8013684:	f001 fd44 	bl	8015110 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 8013688:	4b17      	ldr	r3, [pc, #92]	; (80136e8 <Display_Access_Interface_Voltage+0xf8>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2b03      	cmp	r3, #3
 801368e:	d110      	bne.n	80136b2 <Display_Access_Interface_Voltage+0xc2>
 8013690:	4b15      	ldr	r3, [pc, #84]	; (80136e8 <Display_Access_Interface_Voltage+0xf8>)
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	2b02      	cmp	r3, #2
 8013696:	d10c      	bne.n	80136b2 <Display_Access_Interface_Voltage+0xc2>
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 8013698:	2308      	movs	r3, #8
 801369a:	18fb      	adds	r3, r7, r3
 801369c:	001a      	movs	r2, r3
 801369e:	2100      	movs	r1, #0
 80136a0:	2010      	movs	r0, #16
 80136a2:	f7ff f999 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 80136a6:	2256      	movs	r2, #86	; 0x56
 80136a8:	2118      	movs	r1, #24
 80136aa:	2010      	movs	r0, #16
 80136ac:	f7ff f950 	bl	8012950 <Write_Single_16x32AsicII>
 80136b0:	e00c      	b.n	80136cc <Display_Access_Interface_Voltage+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,0,string_voltage);
 80136b2:	2308      	movs	r3, #8
 80136b4:	18fb      	adds	r3, r7, r3
 80136b6:	001a      	movs	r2, r3
 80136b8:	2100      	movs	r1, #0
 80136ba:	2010      	movs	r0, #16
 80136bc:	f7ff f98c 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,24,'V');
 80136c0:	2256      	movs	r2, #86	; 0x56
 80136c2:	2118      	movs	r1, #24
 80136c4:	2010      	movs	r0, #16
 80136c6:	f7ff f943 	bl	8012950 <Write_Single_16x32AsicII>
	}


}
 80136ca:	46c0      	nop			; (mov r8, r8)
 80136cc:	46c0      	nop			; (mov r8, r8)
 80136ce:	46bd      	mov	sp, r7
 80136d0:	b004      	add	sp, #16
 80136d2:	bdb0      	pop	{r4, r5, r7, pc}
 80136d4:	42c80000 	.word	0x42c80000
 80136d8:	08018344 	.word	0x08018344
 80136dc:	41200000 	.word	0x41200000
 80136e0:	0801834c 	.word	0x0801834c
 80136e4:	08018354 	.word	0x08018354
 80136e8:	200039f8 	.word	0x200039f8

080136ec <Display_Access_Interface_Current>:
 * @brief  显示存取界面电流值
 * @param  设定的电流值，范围0到999.99A
 * @retval None
 */
static void Display_Access_Interface_Current(float Current)
{
 80136ec:	b5b0      	push	{r4, r5, r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
	char string_current[7]={0};
 80136f4:	2408      	movs	r4, #8
 80136f6:	193b      	adds	r3, r7, r4
 80136f8:	2200      	movs	r2, #0
 80136fa:	601a      	str	r2, [r3, #0]
 80136fc:	3304      	adds	r3, #4
 80136fe:	2203      	movs	r2, #3
 8013700:	2100      	movs	r1, #0
 8013702:	0018      	movs	r0, r3
 8013704:	f000 ff99 	bl	801463a <memset>
	if(Current>=100)      sprintf(string_current, "%6.2f", Current);
 8013708:	4931      	ldr	r1, [pc, #196]	; (80137d0 <Display_Access_Interface_Current+0xe4>)
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f7ec ff02 	bl	8000514 <__aeabi_fcmpge>
 8013710:	1e03      	subs	r3, r0, #0
 8013712:	d009      	beq.n	8013728 <Display_Access_Interface_Current+0x3c>
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7ef fbcb 	bl	8002eb0 <__aeabi_f2d>
 801371a:	0002      	movs	r2, r0
 801371c:	000b      	movs	r3, r1
 801371e:	492d      	ldr	r1, [pc, #180]	; (80137d4 <Display_Access_Interface_Current+0xe8>)
 8013720:	1938      	adds	r0, r7, r4
 8013722:	f001 fcf5 	bl	8015110 <siprintf>
 8013726:	e02d      	b.n	8013784 <Display_Access_Interface_Current+0x98>
	else if(Current>=10)
 8013728:	492b      	ldr	r1, [pc, #172]	; (80137d8 <Display_Access_Interface_Current+0xec>)
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7ec fef2 	bl	8000514 <__aeabi_fcmpge>
 8013730:	1e03      	subs	r3, r0, #0
 8013732:	d00f      	beq.n	8013754 <Display_Access_Interface_Current+0x68>
	{
		string_current[0]='0';
 8013734:	2508      	movs	r5, #8
 8013736:	197b      	adds	r3, r7, r5
 8013738:	2230      	movs	r2, #48	; 0x30
 801373a:	701a      	strb	r2, [r3, #0]
		sprintf(&string_current[1], "%5.2f", Current);
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f7ef fbb7 	bl	8002eb0 <__aeabi_f2d>
 8013742:	0002      	movs	r2, r0
 8013744:	000b      	movs	r3, r1
 8013746:	4c25      	ldr	r4, [pc, #148]	; (80137dc <Display_Access_Interface_Current+0xf0>)
 8013748:	1979      	adds	r1, r7, r5
 801374a:	1c48      	adds	r0, r1, #1
 801374c:	0021      	movs	r1, r4
 801374e:	f001 fcdf 	bl	8015110 <siprintf>
 8013752:	e017      	b.n	8013784 <Display_Access_Interface_Current+0x98>

	}
	else if(Current>=0)
 8013754:	2100      	movs	r1, #0
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7ec fedc 	bl	8000514 <__aeabi_fcmpge>
 801375c:	1e03      	subs	r3, r0, #0
 801375e:	d011      	beq.n	8013784 <Display_Access_Interface_Current+0x98>
	{
		string_current[0]='0';
 8013760:	2508      	movs	r5, #8
 8013762:	197b      	adds	r3, r7, r5
 8013764:	2230      	movs	r2, #48	; 0x30
 8013766:	701a      	strb	r2, [r3, #0]
		string_current[1]='0';
 8013768:	197b      	adds	r3, r7, r5
 801376a:	2230      	movs	r2, #48	; 0x30
 801376c:	705a      	strb	r2, [r3, #1]
		sprintf(&string_current[2], "%4.2f", Current);
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f7ef fb9e 	bl	8002eb0 <__aeabi_f2d>
 8013774:	0002      	movs	r2, r0
 8013776:	000b      	movs	r3, r1
 8013778:	4c19      	ldr	r4, [pc, #100]	; (80137e0 <Display_Access_Interface_Current+0xf4>)
 801377a:	1979      	adds	r1, r7, r5
 801377c:	1c88      	adds	r0, r1, #2
 801377e:	0021      	movs	r1, r4
 8013780:	f001 fcc6 	bl	8015110 <siprintf>
	}
	if((xyz.coordinates1==3) && (xyz.coordinates2==2))//recall
 8013784:	4b17      	ldr	r3, [pc, #92]	; (80137e4 <Display_Access_Interface_Current+0xf8>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2b03      	cmp	r3, #3
 801378a:	d110      	bne.n	80137ae <Display_Access_Interface_Current+0xc2>
 801378c:	4b15      	ldr	r3, [pc, #84]	; (80137e4 <Display_Access_Interface_Current+0xf8>)
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	2b02      	cmp	r3, #2
 8013792:	d10c      	bne.n	80137ae <Display_Access_Interface_Current+0xc2>
	{
		Write_String_16x32AsicII(16,36,string_current);
 8013794:	2308      	movs	r3, #8
 8013796:	18fb      	adds	r3, r7, r3
 8013798:	001a      	movs	r2, r3
 801379a:	2124      	movs	r1, #36	; 0x24
 801379c:	2010      	movs	r0, #16
 801379e:	f7ff f91b 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 80137a2:	2241      	movs	r2, #65	; 0x41
 80137a4:	213c      	movs	r1, #60	; 0x3c
 80137a6:	2010      	movs	r0, #16
 80137a8:	f7ff f8d2 	bl	8012950 <Write_Single_16x32AsicII>
 80137ac:	e00c      	b.n	80137c8 <Display_Access_Interface_Current+0xdc>
	}
	else
	{
		Write_String_16x32AsicII(16,36,string_current);
 80137ae:	2308      	movs	r3, #8
 80137b0:	18fb      	adds	r3, r7, r3
 80137b2:	001a      	movs	r2, r3
 80137b4:	2124      	movs	r1, #36	; 0x24
 80137b6:	2010      	movs	r0, #16
 80137b8:	f7ff f90e 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_16x32AsicII(16,60,'A');
 80137bc:	2241      	movs	r2, #65	; 0x41
 80137be:	213c      	movs	r1, #60	; 0x3c
 80137c0:	2010      	movs	r0, #16
 80137c2:	f7ff f8c5 	bl	8012950 <Write_Single_16x32AsicII>
	}

}
 80137c6:	46c0      	nop			; (mov r8, r8)
 80137c8:	46c0      	nop			; (mov r8, r8)
 80137ca:	46bd      	mov	sp, r7
 80137cc:	b004      	add	sp, #16
 80137ce:	bdb0      	pop	{r4, r5, r7, pc}
 80137d0:	42c80000 	.word	0x42c80000
 80137d4:	08018344 	.word	0x08018344
 80137d8:	41200000 	.word	0x41200000
 80137dc:	0801834c 	.word	0x0801834c
 80137e0:	08018354 	.word	0x08018354
 80137e4:	200039f8 	.word	0x200039f8

080137e8 <Display_Access_Interface_Save>:
	}

}

void Display_Access_Interface_Save(void)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"SAVE  ");
 80137ee:	4b1d      	ldr	r3, [pc, #116]	; (8013864 <Display_Access_Interface_Save+0x7c>)
 80137f0:	001a      	movs	r2, r3
 80137f2:	2124      	movs	r1, #36	; 0x24
 80137f4:	2030      	movs	r0, #48	; 0x30
 80137f6:	f7ff f86d 	bl	80128d4 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 80137fa:	4b1b      	ldr	r3, [pc, #108]	; (8013868 <Display_Access_Interface_Save+0x80>)
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	2b09      	cmp	r3, #9
 8013800:	d80e      	bhi.n	8013820 <Display_Access_Interface_Save+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 8013802:	2230      	movs	r2, #48	; 0x30
 8013804:	213c      	movs	r1, #60	; 0x3c
 8013806:	2030      	movs	r0, #48	; 0x30
 8013808:	f7ff f820 	bl	801284c <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 801380c:	4b16      	ldr	r3, [pc, #88]	; (8013868 <Display_Access_Interface_Save+0x80>)
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	3330      	adds	r3, #48	; 0x30
 8013812:	b2db      	uxtb	r3, r3
 8013814:	001a      	movs	r2, r3
 8013816:	213e      	movs	r1, #62	; 0x3e
 8013818:	2030      	movs	r0, #48	; 0x30
 801381a:	f7ff f817 	bl	801284c <Write_Single_8x16AsicII>
 801381e:	e008      	b.n	8013832 <Display_Access_Interface_Save+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 8013820:	4b11      	ldr	r3, [pc, #68]	; (8013868 <Display_Access_Interface_Save+0x80>)
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	3330      	adds	r3, #48	; 0x30
 8013826:	b2db      	uxtb	r3, r3
 8013828:	001a      	movs	r2, r3
 801382a:	213c      	movs	r1, #60	; 0x3c
 801382c:	2030      	movs	r0, #48	; 0x30
 801382e:	f7ff f80d 	bl	801284c <Write_Single_8x16AsicII>



	float voltage=String_To_Float(String_Save_V);
 8013832:	4b0e      	ldr	r3, [pc, #56]	; (801386c <Display_Access_Interface_Save+0x84>)
 8013834:	0018      	movs	r0, r3
 8013836:	f7fa fe61 	bl	800e4fc <String_To_Float>
 801383a:	1c03      	adds	r3, r0, #0
 801383c:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	1c18      	adds	r0, r3, #0
 8013842:	f7ff fed5 	bl	80135f0 <Display_Access_Interface_Voltage>


	float current=String_To_Float(String_Save_I);
 8013846:	4b0a      	ldr	r3, [pc, #40]	; (8013870 <Display_Access_Interface_Save+0x88>)
 8013848:	0018      	movs	r0, r3
 801384a:	f7fa fe57 	bl	800e4fc <String_To_Float>
 801384e:	1c03      	adds	r3, r0, #0
 8013850:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	1c18      	adds	r0, r3, #0
 8013856:	f7ff ff49 	bl	80136ec <Display_Access_Interface_Current>


}
 801385a:	46c0      	nop			; (mov r8, r8)
 801385c:	46bd      	mov	sp, r7
 801385e:	b002      	add	sp, #8
 8013860:	bd80      	pop	{r7, pc}
 8013862:	46c0      	nop			; (mov r8, r8)
 8013864:	08018400 	.word	0x08018400
 8013868:	2000398d 	.word	0x2000398d
 801386c:	20003020 	.word	0x20003020
 8013870:	2000302c 	.word	0x2000302c

08013874 <Display_Access_Interface_Recall>:
void Display_Access_Interface_Recall(void)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b082      	sub	sp, #8
 8013878:	af00      	add	r7, sp, #0

	Write_String_8x16AsicII(48,36,"RECALL");
 801387a:	4b2f      	ldr	r3, [pc, #188]	; (8013938 <Display_Access_Interface_Recall+0xc4>)
 801387c:	001a      	movs	r2, r3
 801387e:	2124      	movs	r1, #36	; 0x24
 8013880:	2030      	movs	r0, #48	; 0x30
 8013882:	f7ff f827 	bl	80128d4 <Write_String_8x16AsicII>
	if(Recall_Save_Number<10)
 8013886:	4b2d      	ldr	r3, [pc, #180]	; (801393c <Display_Access_Interface_Recall+0xc8>)
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	2b09      	cmp	r3, #9
 801388c:	d80e      	bhi.n	80138ac <Display_Access_Interface_Recall+0x38>
	{
		Write_Single_8x16AsicII(48,60,'0');
 801388e:	2230      	movs	r2, #48	; 0x30
 8013890:	213c      	movs	r1, #60	; 0x3c
 8013892:	2030      	movs	r0, #48	; 0x30
 8013894:	f7fe ffda 	bl	801284c <Write_Single_8x16AsicII>
		Write_Single_8x16AsicII(48,62,Recall_Save_Number+'0');
 8013898:	4b28      	ldr	r3, [pc, #160]	; (801393c <Display_Access_Interface_Recall+0xc8>)
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	3330      	adds	r3, #48	; 0x30
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	001a      	movs	r2, r3
 80138a2:	213e      	movs	r1, #62	; 0x3e
 80138a4:	2030      	movs	r0, #48	; 0x30
 80138a6:	f7fe ffd1 	bl	801284c <Write_Single_8x16AsicII>
 80138aa:	e008      	b.n	80138be <Display_Access_Interface_Recall+0x4a>
	}
	else Write_Single_8x16AsicII(48,60,Recall_Save_Number+'0');
 80138ac:	4b23      	ldr	r3, [pc, #140]	; (801393c <Display_Access_Interface_Recall+0xc8>)
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	3330      	adds	r3, #48	; 0x30
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	001a      	movs	r2, r3
 80138b6:	213c      	movs	r1, #60	; 0x3c
 80138b8:	2030      	movs	r0, #48	; 0x30
 80138ba:	f7fe ffc7 	bl	801284c <Write_Single_8x16AsicII>


	//float voltage=String_To_Float(String_Recall_V);
	xyz.coordinates3=1;
 80138be:	4b20      	ldr	r3, [pc, #128]	; (8013940 <Display_Access_Interface_Recall+0xcc>)
 80138c0:	2201      	movs	r2, #1
 80138c2:	609a      	str	r2, [r3, #8]
	float voltage=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 80138c4:	4b1d      	ldr	r3, [pc, #116]	; (801393c <Display_Access_Interface_Recall+0xc8>)
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	0018      	movs	r0, r3
 80138ca:	f7f8 fd75 	bl	800c3b8 <AT25_Save_Recall_Recall_VI>
 80138ce:	0003      	movs	r3, r0
 80138d0:	0018      	movs	r0, r3
 80138d2:	f7ef fa97 	bl	8002e04 <__aeabi_i2d>
 80138d6:	2200      	movs	r2, #0
 80138d8:	4b1a      	ldr	r3, [pc, #104]	; (8013944 <Display_Access_Interface_Recall+0xd0>)
 80138da:	f7ee f83f 	bl	800195c <__aeabi_ddiv>
 80138de:	0002      	movs	r2, r0
 80138e0:	000b      	movs	r3, r1
 80138e2:	0010      	movs	r0, r2
 80138e4:	0019      	movs	r1, r3
 80138e6:	f7ef fb2b 	bl	8002f40 <__aeabi_d2f>
 80138ea:	1c03      	adds	r3, r0, #0
 80138ec:	607b      	str	r3, [r7, #4]
	Display_Access_Interface_Voltage(voltage);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	1c18      	adds	r0, r3, #0
 80138f2:	f7ff fe7d 	bl	80135f0 <Display_Access_Interface_Voltage>

	xyz.coordinates3=2;
 80138f6:	4b12      	ldr	r3, [pc, #72]	; (8013940 <Display_Access_Interface_Recall+0xcc>)
 80138f8:	2202      	movs	r2, #2
 80138fa:	609a      	str	r2, [r3, #8]
	//float current=String_To_Float(String_Recall_I);
	float current=AT25_Save_Recall_Recall_VI(Recall_Save_Number)/100.0;
 80138fc:	4b0f      	ldr	r3, [pc, #60]	; (801393c <Display_Access_Interface_Recall+0xc8>)
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	0018      	movs	r0, r3
 8013902:	f7f8 fd59 	bl	800c3b8 <AT25_Save_Recall_Recall_VI>
 8013906:	0003      	movs	r3, r0
 8013908:	0018      	movs	r0, r3
 801390a:	f7ef fa7b 	bl	8002e04 <__aeabi_i2d>
 801390e:	2200      	movs	r2, #0
 8013910:	4b0c      	ldr	r3, [pc, #48]	; (8013944 <Display_Access_Interface_Recall+0xd0>)
 8013912:	f7ee f823 	bl	800195c <__aeabi_ddiv>
 8013916:	0002      	movs	r2, r0
 8013918:	000b      	movs	r3, r1
 801391a:	0010      	movs	r0, r2
 801391c:	0019      	movs	r1, r3
 801391e:	f7ef fb0f 	bl	8002f40 <__aeabi_d2f>
 8013922:	1c03      	adds	r3, r0, #0
 8013924:	603b      	str	r3, [r7, #0]
	Display_Access_Interface_Current(current);
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	1c18      	adds	r0, r3, #0
 801392a:	f7ff fedf 	bl	80136ec <Display_Access_Interface_Current>

}
 801392e:	46c0      	nop			; (mov r8, r8)
 8013930:	46bd      	mov	sp, r7
 8013932:	b002      	add	sp, #8
 8013934:	bd80      	pop	{r7, pc}
 8013936:	46c0      	nop			; (mov r8, r8)
 8013938:	080183f0 	.word	0x080183f0
 801393c:	2000398d 	.word	0x2000398d
 8013940:	200039f8 	.word	0x200039f8
 8013944:	40590000 	.word	0x40590000

08013948 <Display_Menu_Function_Interface_First_Menu>:
  * @brief  显示一级菜单界面
  * @param  一级菜单的功能
  * @retval None
  */
void Display_Menu_Function_Interface_First_Menu(int Selection)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]

	Write_String_8x16AsicII(0,0,"FUNCTION");
 8013950:	4b25      	ldr	r3, [pc, #148]	; (80139e8 <Display_Menu_Function_Interface_First_Menu+0xa0>)
 8013952:	001a      	movs	r2, r3
 8013954:	2100      	movs	r1, #0
 8013956:	2000      	movs	r0, #0
 8013958:	f7fe ffbc 	bl	80128d4 <Write_String_8x16AsicII>
	switch(Selection)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2b08      	cmp	r3, #8
 8013960:	d83d      	bhi.n	80139de <Display_Menu_Function_Interface_First_Menu+0x96>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	009a      	lsls	r2, r3, #2
 8013966:	4b21      	ldr	r3, [pc, #132]	; (80139ec <Display_Menu_Function_Interface_First_Menu+0xa4>)
 8013968:	18d3      	adds	r3, r2, r3
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	469f      	mov	pc, r3
	{
		case 1:
			{
				Write_String_16x32AsicII(16,24,"SYSTEM     ");
 801396e:	4b20      	ldr	r3, [pc, #128]	; (80139f0 <Display_Menu_Function_Interface_First_Menu+0xa8>)
 8013970:	001a      	movs	r2, r3
 8013972:	2118      	movs	r1, #24
 8013974:	2010      	movs	r0, #16
 8013976:	f7ff f82f 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 801397a:	e031      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 2:
			{
				Write_String_16x32AsicII(16,24,"SLOPE      ");
 801397c:	4b1d      	ldr	r3, [pc, #116]	; (80139f4 <Display_Menu_Function_Interface_First_Menu+0xac>)
 801397e:	001a      	movs	r2, r3
 8013980:	2118      	movs	r1, #24
 8013982:	2010      	movs	r0, #16
 8013984:	f7ff f828 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 8013988:	e02a      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 3:
			{
				Write_String_16x32AsicII(16,24,"RS232       ");
 801398a:	4b1b      	ldr	r3, [pc, #108]	; (80139f8 <Display_Menu_Function_Interface_First_Menu+0xb0>)
 801398c:	001a      	movs	r2, r3
 801398e:	2118      	movs	r1, #24
 8013990:	2010      	movs	r0, #16
 8013992:	f7ff f821 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 8013996:	e023      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 4:
			{
				Write_String_16x32AsicII(16,24,"TIMER       ");
 8013998:	4b18      	ldr	r3, [pc, #96]	; (80139fc <Display_Menu_Function_Interface_First_Menu+0xb4>)
 801399a:	001a      	movs	r2, r3
 801399c:	2118      	movs	r1, #24
 801399e:	2010      	movs	r0, #16
 80139a0:	f7ff f81a 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 80139a4:	e01c      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 5:
			{
				Write_String_16x32AsicII(16,24,"AD SET      ");
 80139a6:	4b16      	ldr	r3, [pc, #88]	; (8013a00 <Display_Menu_Function_Interface_First_Menu+0xb8>)
 80139a8:	001a      	movs	r2, r3
 80139aa:	2118      	movs	r1, #24
 80139ac:	2010      	movs	r0, #16
 80139ae:	f7ff f813 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 80139b2:	e015      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 6:
			{
				Write_String_16x32AsicII(16,18,"LIGHT TEMP  ");
 80139b4:	4b13      	ldr	r3, [pc, #76]	; (8013a04 <Display_Menu_Function_Interface_First_Menu+0xbc>)
 80139b6:	001a      	movs	r2, r3
 80139b8:	2112      	movs	r1, #18
 80139ba:	2010      	movs	r0, #16
 80139bc:	f7ff f80c 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 80139c0:	e00e      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 7:
			{
				Write_String_16x32AsicII(16,18,"PROTECT     ");
 80139c2:	4b11      	ldr	r3, [pc, #68]	; (8013a08 <Display_Menu_Function_Interface_First_Menu+0xc0>)
 80139c4:	001a      	movs	r2, r3
 80139c6:	2112      	movs	r1, #18
 80139c8:	2010      	movs	r0, #16
 80139ca:	f7ff f805 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 80139ce:	e007      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		case 8:
			{
				Write_String_16x32AsicII(16,18,"CALIRRATION ");
 80139d0:	4b0e      	ldr	r3, [pc, #56]	; (8013a0c <Display_Menu_Function_Interface_First_Menu+0xc4>)
 80139d2:	001a      	movs	r2, r3
 80139d4:	2112      	movs	r1, #18
 80139d6:	2010      	movs	r0, #16
 80139d8:	f7fe fffe 	bl	80129d8 <Write_String_16x32AsicII>
				break;
 80139dc:	e000      	b.n	80139e0 <Display_Menu_Function_Interface_First_Menu+0x98>
			}
		default :break;
 80139de:	46c0      	nop			; (mov r8, r8)
	}
}
 80139e0:	46c0      	nop			; (mov r8, r8)
 80139e2:	46bd      	mov	sp, r7
 80139e4:	b002      	add	sp, #8
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	08018408 	.word	0x08018408
 80139ec:	080189c0 	.word	0x080189c0
 80139f0:	08018414 	.word	0x08018414
 80139f4:	08018420 	.word	0x08018420
 80139f8:	0801842c 	.word	0x0801842c
 80139fc:	0801843c 	.word	0x0801843c
 8013a00:	0801844c 	.word	0x0801844c
 8013a04:	0801845c 	.word	0x0801845c
 8013a08:	0801846c 	.word	0x0801846c
 8013a0c:	0801847c 	.word	0x0801847c

08013a10 <second_munu_system>:
/*----------------------------------------------------------------------------------------------二级界面部分-----------------------------------------------------------------------------------------------------*/

static void second_munu_system(int z)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
	Write_String_16x32AsicII(16,24,"RESET");
 8013a18:	4b07      	ldr	r3, [pc, #28]	; (8013a38 <second_munu_system+0x28>)
 8013a1a:	001a      	movs	r2, r3
 8013a1c:	2118      	movs	r1, #24
 8013a1e:	2010      	movs	r0, #16
 8013a20:	f7fe ffda 	bl	80129d8 <Write_String_16x32AsicII>
	if(z==1)
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	d102      	bne.n	8013a30 <second_munu_system+0x20>
	{
		Cursor_flash_off();
 8013a2a:	f000 fcb1 	bl	8014390 <Cursor_flash_off>
		return;
 8013a2e:	46c0      	nop			; (mov r8, r8)
	}
	else if(z==2);

}
 8013a30:	46bd      	mov	sp, r7
 8013a32:	b002      	add	sp, #8
 8013a34:	bd80      	pop	{r7, pc}
 8013a36:	46c0      	nop			; (mov r8, r8)
 8013a38:	0801848c 	.word	0x0801848c

08013a3c <second_munu_slope>:

static void second_munu_slope(int z)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 8013a44:	f000 fcda 	bl	80143fc <Cursor_flash_on>
	if(z==1)
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d10c      	bne.n	8013a68 <second_munu_slope+0x2c>
	{
		Write_String_16x32AsicII(16,0,"IRate");
 8013a4e:	4b10      	ldr	r3, [pc, #64]	; (8013a90 <second_munu_slope+0x54>)
 8013a50:	001a      	movs	r2, r3
 8013a52:	2100      	movs	r1, #0
 8013a54:	2010      	movs	r0, #16
 8013a56:	f7fe ffbf 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_I_Rate);//显示清空后的输入值
 8013a5a:	4b0e      	ldr	r3, [pc, #56]	; (8013a94 <second_munu_slope+0x58>)
 8013a5c:	001a      	movs	r2, r3
 8013a5e:	2118      	movs	r1, #24
 8013a60:	2010      	movs	r0, #16
 8013a62:	f7fe ffb9 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,0,"VRate");
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值

	}

}
 8013a66:	e00e      	b.n	8013a86 <second_munu_slope+0x4a>
	else if(z==2)
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d10b      	bne.n	8013a86 <second_munu_slope+0x4a>
		Write_String_16x32AsicII(16,0,"VRate");
 8013a6e:	4b0a      	ldr	r3, [pc, #40]	; (8013a98 <second_munu_slope+0x5c>)
 8013a70:	001a      	movs	r2, r3
 8013a72:	2100      	movs	r1, #0
 8013a74:	2010      	movs	r0, #16
 8013a76:	f7fe ffaf 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_V_Rate);//显示清空后的输入值
 8013a7a:	4b08      	ldr	r3, [pc, #32]	; (8013a9c <second_munu_slope+0x60>)
 8013a7c:	001a      	movs	r2, r3
 8013a7e:	2118      	movs	r1, #24
 8013a80:	2010      	movs	r0, #16
 8013a82:	f7fe ffa9 	bl	80129d8 <Write_String_16x32AsicII>
}
 8013a86:	46c0      	nop			; (mov r8, r8)
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	b002      	add	sp, #8
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	46c0      	nop			; (mov r8, r8)
 8013a90:	08018494 	.word	0x08018494
 8013a94:	20003044 	.word	0x20003044
 8013a98:	0801849c 	.word	0x0801849c
 8013a9c:	20003050 	.word	0x20003050

08013aa0 <second_munu_RS232>:

static void second_munu_RS232(int z)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
	Cursor_flash_off();
 8013aa8:	f000 fc72 	bl	8014390 <Cursor_flash_off>
	Write_String_16x32AsicII(16,0,"BaudRate");
 8013aac:	4b09      	ldr	r3, [pc, #36]	; (8013ad4 <second_munu_RS232+0x34>)
 8013aae:	001a      	movs	r2, r3
 8013ab0:	2100      	movs	r1, #0
 8013ab2:	2010      	movs	r0, #16
 8013ab4:	f7fe ff90 	bl	80129d8 <Write_String_16x32AsicII>

	if(z==1) 	  Write_String_16x32AsicII(16,36,String_RS232_Rate);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d105      	bne.n	8013aca <second_munu_RS232+0x2a>
 8013abe:	4b06      	ldr	r3, [pc, #24]	; (8013ad8 <second_munu_RS232+0x38>)
 8013ac0:	001a      	movs	r2, r3
 8013ac2:	2124      	movs	r1, #36	; 0x24
 8013ac4:	2010      	movs	r0, #16
 8013ac6:	f7fe ff87 	bl	80129d8 <Write_String_16x32AsicII>
	else if(z==2);
}
 8013aca:	46c0      	nop			; (mov r8, r8)
 8013acc:	46bd      	mov	sp, r7
 8013ace:	b002      	add	sp, #8
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	46c0      	nop			; (mov r8, r8)
 8013ad4:	080184a4 	.word	0x080184a4
 8013ad8:	20003038 	.word	0x20003038

08013adc <second_menu_timer>:

static void second_menu_timer(int z)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
	Cursor_flash_on();
 8013ae4:	f000 fc8a 	bl	80143fc <Cursor_flash_on>
	if(z==1)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b01      	cmp	r3, #1
 8013aec:	d10c      	bne.n	8013b08 <second_menu_timer+0x2c>
	{
		Write_String_16x32AsicII(16,0,"delay ");
 8013aee:	4b18      	ldr	r3, [pc, #96]	; (8013b50 <second_menu_timer+0x74>)
 8013af0:	001a      	movs	r2, r3
 8013af2:	2100      	movs	r1, #0
 8013af4:	2010      	movs	r0, #16
 8013af6:	f7fe ff6f 	bl	80129d8 <Write_String_16x32AsicII>

		Write_String_16x32AsicII(16,24, String_Delay);//显示输入值
 8013afa:	4b16      	ldr	r3, [pc, #88]	; (8013b54 <second_menu_timer+0x78>)
 8013afc:	001a      	movs	r2, r3
 8013afe:	2118      	movs	r1, #24
 8013b00:	2010      	movs	r0, #16
 8013b02:	f7fe ff69 	bl	80129d8 <Write_String_16x32AsicII>
	else if(z==3)
	{
		Write_String_16x32AsicII(16,0,"Toff  ");
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
	}
}
 8013b06:	e01e      	b.n	8013b46 <second_menu_timer+0x6a>
	else if(z==2)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2b02      	cmp	r3, #2
 8013b0c:	d10c      	bne.n	8013b28 <second_menu_timer+0x4c>
		Write_String_16x32AsicII(16,0,"Ton   ");
 8013b0e:	4b12      	ldr	r3, [pc, #72]	; (8013b58 <second_menu_timer+0x7c>)
 8013b10:	001a      	movs	r2, r3
 8013b12:	2100      	movs	r1, #0
 8013b14:	2010      	movs	r0, #16
 8013b16:	f7fe ff5f 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_On);//显示输入值
 8013b1a:	4b10      	ldr	r3, [pc, #64]	; (8013b5c <second_menu_timer+0x80>)
 8013b1c:	001a      	movs	r2, r3
 8013b1e:	2118      	movs	r1, #24
 8013b20:	2010      	movs	r0, #16
 8013b22:	f7fe ff59 	bl	80129d8 <Write_String_16x32AsicII>
}
 8013b26:	e00e      	b.n	8013b46 <second_menu_timer+0x6a>
	else if(z==3)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b03      	cmp	r3, #3
 8013b2c:	d10b      	bne.n	8013b46 <second_menu_timer+0x6a>
		Write_String_16x32AsicII(16,0,"Toff  ");
 8013b2e:	4b0c      	ldr	r3, [pc, #48]	; (8013b60 <second_menu_timer+0x84>)
 8013b30:	001a      	movs	r2, r3
 8013b32:	2100      	movs	r1, #0
 8013b34:	2010      	movs	r0, #16
 8013b36:	f7fe ff4f 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Cycle_Close);//显示输入值
 8013b3a:	4b0a      	ldr	r3, [pc, #40]	; (8013b64 <second_menu_timer+0x88>)
 8013b3c:	001a      	movs	r2, r3
 8013b3e:	2118      	movs	r1, #24
 8013b40:	2010      	movs	r0, #16
 8013b42:	f7fe ff49 	bl	80129d8 <Write_String_16x32AsicII>
}
 8013b46:	46c0      	nop			; (mov r8, r8)
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	b002      	add	sp, #8
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	46c0      	nop			; (mov r8, r8)
 8013b50:	080184b0 	.word	0x080184b0
 8013b54:	20003014 	.word	0x20003014
 8013b58:	080184b8 	.word	0x080184b8
 8013b5c:	20002ffc 	.word	0x20002ffc
 8013b60:	080184c0 	.word	0x080184c0
 8013b64:	20003008 	.word	0x20003008

08013b68 <second_menu_AD>:

static void second_menu_AD(int z)
{
 8013b68:	b590      	push	{r4, r7, lr}
 8013b6a:	b087      	sub	sp, #28
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d138      	bne.n	8013be8 <second_menu_AD+0x80>
	{
		Cursor_flash_on();
 8013b76:	f000 fc41 	bl	80143fc <Cursor_flash_on>
		/*输入密码界面*/
		Write_String_16x32AsicII(16,0, "INPUT:");
 8013b7a:	4b50      	ldr	r3, [pc, #320]	; (8013cbc <second_menu_AD+0x154>)
 8013b7c:	001a      	movs	r2, r3
 8013b7e:	2100      	movs	r1, #0
 8013b80:	2010      	movs	r0, #16
 8013b82:	f7fe ff29 	bl	80129d8 <Write_String_16x32AsicII>
		if(Shift_Not_Shift == Shift)//显示输入的密码
 8013b86:	4b4e      	ldr	r3, [pc, #312]	; (8013cc0 <second_menu_AD+0x158>)
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d106      	bne.n	8013b9c <second_menu_AD+0x34>
		{
			Write_String_16x32AsicII(16,24, String_Password);
 8013b8e:	4b4d      	ldr	r3, [pc, #308]	; (8013cc4 <second_menu_AD+0x15c>)
 8013b90:	001a      	movs	r2, r3
 8013b92:	2118      	movs	r1, #24
 8013b94:	2010      	movs	r0, #16
 8013b96:	f7fe ff1f 	bl	80129d8 <Write_String_16x32AsicII>
 8013b9a:	e025      	b.n	8013be8 <second_menu_AD+0x80>
		}
		else if(Shift_Not_Shift == Not_Shift)
 8013b9c:	4b48      	ldr	r3, [pc, #288]	; (8013cc0 <second_menu_AD+0x158>)
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d121      	bne.n	8013be8 <second_menu_AD+0x80>
		{
			for(uint8_t i=0;i<6;i++)
 8013ba4:	2317      	movs	r3, #23
 8013ba6:	18fb      	adds	r3, r7, r3
 8013ba8:	2200      	movs	r2, #0
 8013baa:	701a      	strb	r2, [r3, #0]
 8013bac:	e011      	b.n	8013bd2 <second_menu_AD+0x6a>
			{
				if(String_Password[i]!=' ')	String_Password_mask[i]='*';
 8013bae:	2117      	movs	r1, #23
 8013bb0:	187b      	adds	r3, r7, r1
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	4a43      	ldr	r2, [pc, #268]	; (8013cc4 <second_menu_AD+0x15c>)
 8013bb6:	5cd3      	ldrb	r3, [r2, r3]
 8013bb8:	2b20      	cmp	r3, #32
 8013bba:	d004      	beq.n	8013bc6 <second_menu_AD+0x5e>
 8013bbc:	187b      	adds	r3, r7, r1
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	4a41      	ldr	r2, [pc, #260]	; (8013cc8 <second_menu_AD+0x160>)
 8013bc2:	212a      	movs	r1, #42	; 0x2a
 8013bc4:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0;i<6;i++)
 8013bc6:	2117      	movs	r1, #23
 8013bc8:	187b      	adds	r3, r7, r1
 8013bca:	781a      	ldrb	r2, [r3, #0]
 8013bcc:	187b      	adds	r3, r7, r1
 8013bce:	3201      	adds	r2, #1
 8013bd0:	701a      	strb	r2, [r3, #0]
 8013bd2:	2317      	movs	r3, #23
 8013bd4:	18fb      	adds	r3, r7, r3
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	2b05      	cmp	r3, #5
 8013bda:	d9e8      	bls.n	8013bae <second_menu_AD+0x46>
			}
			Write_String_16x32AsicII(16,24, String_Password_mask);
 8013bdc:	4b3a      	ldr	r3, [pc, #232]	; (8013cc8 <second_menu_AD+0x160>)
 8013bde:	001a      	movs	r2, r3
 8013be0:	2118      	movs	r1, #24
 8013be2:	2010      	movs	r0, #16
 8013be4:	f7fe fef8 	bl	80129d8 <Write_String_16x32AsicII>

		}


	}
	if(z==2)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2b02      	cmp	r3, #2
 8013bec:	d162      	bne.n	8013cb4 <second_menu_AD+0x14c>
	{

		Write_String_8x16AsicII(0,0,"GainV:");
 8013bee:	4b37      	ldr	r3, [pc, #220]	; (8013ccc <second_menu_AD+0x164>)
 8013bf0:	001a      	movs	r2, r3
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	f7fe fe6d 	bl	80128d4 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(16,0,"GainI:");
 8013bfa:	4b35      	ldr	r3, [pc, #212]	; (8013cd0 <second_menu_AD+0x168>)
 8013bfc:	001a      	movs	r2, r3
 8013bfe:	2100      	movs	r1, #0
 8013c00:	2010      	movs	r0, #16
 8013c02:	f7fe fe67 	bl	80128d4 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(32,0,"interceptV:");
 8013c06:	4b33      	ldr	r3, [pc, #204]	; (8013cd4 <second_menu_AD+0x16c>)
 8013c08:	001a      	movs	r2, r3
 8013c0a:	2100      	movs	r1, #0
 8013c0c:	2020      	movs	r0, #32
 8013c0e:	f7fe fe61 	bl	80128d4 <Write_String_8x16AsicII>
		Write_String_8x16AsicII(48,0,"interceptI:");
 8013c12:	4b31      	ldr	r3, [pc, #196]	; (8013cd8 <second_menu_AD+0x170>)
 8013c14:	001a      	movs	r2, r3
 8013c16:	2100      	movs	r1, #0
 8013c18:	2030      	movs	r0, #48	; 0x30
 8013c1a:	f7fe fe5b 	bl	80128d4 <Write_String_8x16AsicII>
		char String[9]={'0','0','.','0','0','0','0','0'};
 8013c1e:	240c      	movs	r4, #12
 8013c20:	193b      	adds	r3, r7, r4
 8013c22:	4a2e      	ldr	r2, [pc, #184]	; (8013cdc <second_menu_AD+0x174>)
 8013c24:	ca03      	ldmia	r2!, {r0, r1}
 8013c26:	c303      	stmia	r3!, {r0, r1}
 8013c28:	7812      	ldrb	r2, [r2, #0]
 8013c2a:	701a      	strb	r2, [r3, #0]

		sprintf(String, "%6.5f", ADC_Gain_V);//将float转为string，数据长度为6，保留两位小数
 8013c2c:	4b2c      	ldr	r3, [pc, #176]	; (8013ce0 <second_menu_AD+0x178>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	1c18      	adds	r0, r3, #0
 8013c32:	f7ef f93d 	bl	8002eb0 <__aeabi_f2d>
 8013c36:	0002      	movs	r2, r0
 8013c38:	000b      	movs	r3, r1
 8013c3a:	492a      	ldr	r1, [pc, #168]	; (8013ce4 <second_menu_AD+0x17c>)
 8013c3c:	1938      	adds	r0, r7, r4
 8013c3e:	f001 fa67 	bl	8015110 <siprintf>
		Write_String_8x16AsicII(0,26, String);
 8013c42:	193b      	adds	r3, r7, r4
 8013c44:	001a      	movs	r2, r3
 8013c46:	211a      	movs	r1, #26
 8013c48:	2000      	movs	r0, #0
 8013c4a:	f7fe fe43 	bl	80128d4 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", ADC_Gain_I);//将float转为string，数据长度为6，保留两位小数
 8013c4e:	4b26      	ldr	r3, [pc, #152]	; (8013ce8 <second_menu_AD+0x180>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	1c18      	adds	r0, r3, #0
 8013c54:	f7ef f92c 	bl	8002eb0 <__aeabi_f2d>
 8013c58:	0002      	movs	r2, r0
 8013c5a:	000b      	movs	r3, r1
 8013c5c:	4921      	ldr	r1, [pc, #132]	; (8013ce4 <second_menu_AD+0x17c>)
 8013c5e:	1938      	adds	r0, r7, r4
 8013c60:	f001 fa56 	bl	8015110 <siprintf>
		Write_String_8x16AsicII(16,26, String);
 8013c64:	193b      	adds	r3, r7, r4
 8013c66:	001a      	movs	r2, r3
 8013c68:	211a      	movs	r1, #26
 8013c6a:	2010      	movs	r0, #16
 8013c6c:	f7fe fe32 	bl	80128d4 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_V);//将float转为string，数据长度为6，保留两位小数
 8013c70:	4b1e      	ldr	r3, [pc, #120]	; (8013cec <second_menu_AD+0x184>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	1c18      	adds	r0, r3, #0
 8013c76:	f7ef f91b 	bl	8002eb0 <__aeabi_f2d>
 8013c7a:	0002      	movs	r2, r0
 8013c7c:	000b      	movs	r3, r1
 8013c7e:	4919      	ldr	r1, [pc, #100]	; (8013ce4 <second_menu_AD+0x17c>)
 8013c80:	1938      	adds	r0, r7, r4
 8013c82:	f001 fa45 	bl	8015110 <siprintf>
		Write_String_8x16AsicII(32,26, String);
 8013c86:	193b      	adds	r3, r7, r4
 8013c88:	001a      	movs	r2, r3
 8013c8a:	211a      	movs	r1, #26
 8013c8c:	2020      	movs	r0, #32
 8013c8e:	f7fe fe21 	bl	80128d4 <Write_String_8x16AsicII>
		sprintf(String, "%6.5f", Eror_ADC_I);//将float转为string，数据长度为6，保留两位小数
 8013c92:	4b17      	ldr	r3, [pc, #92]	; (8013cf0 <second_menu_AD+0x188>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	1c18      	adds	r0, r3, #0
 8013c98:	f7ef f90a 	bl	8002eb0 <__aeabi_f2d>
 8013c9c:	0002      	movs	r2, r0
 8013c9e:	000b      	movs	r3, r1
 8013ca0:	4910      	ldr	r1, [pc, #64]	; (8013ce4 <second_menu_AD+0x17c>)
 8013ca2:	1938      	adds	r0, r7, r4
 8013ca4:	f001 fa34 	bl	8015110 <siprintf>
		Write_String_8x16AsicII(48,26, String);
 8013ca8:	193b      	adds	r3, r7, r4
 8013caa:	001a      	movs	r2, r3
 8013cac:	211a      	movs	r1, #26
 8013cae:	2030      	movs	r0, #48	; 0x30
 8013cb0:	f7fe fe10 	bl	80128d4 <Write_String_8x16AsicII>
	}
	else if(z==3)
	{
		;
	}
}
 8013cb4:	46c0      	nop			; (mov r8, r8)
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	b007      	add	sp, #28
 8013cba:	bd90      	pop	{r4, r7, pc}
 8013cbc:	080184c8 	.word	0x080184c8
 8013cc0:	20003987 	.word	0x20003987
 8013cc4:	200030a8 	.word	0x200030a8
 8013cc8:	200030b0 	.word	0x200030b0
 8013ccc:	080184d0 	.word	0x080184d0
 8013cd0:	080184d8 	.word	0x080184d8
 8013cd4:	080184e0 	.word	0x080184e0
 8013cd8:	080184ec 	.word	0x080184ec
 8013cdc:	08018500 	.word	0x08018500
 8013ce0:	20002fec 	.word	0x20002fec
 8013ce4:	080184f8 	.word	0x080184f8
 8013ce8:	20002ff0 	.word	0x20002ff0
 8013cec:	20002ff4 	.word	0x20002ff4
 8013cf0:	20002ff8 	.word	0x20002ff8

08013cf4 <second_menu_Hard>:

static void second_menu_Hard(int z)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b082      	sub	sp, #8
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b01      	cmp	r3, #1
 8013d00:	d126      	bne.n	8013d50 <second_menu_Hard+0x5c>
	{
		Write_String_16x32AsicII(16,0,"Light ");
 8013d02:	4b27      	ldr	r3, [pc, #156]	; (8013da0 <second_menu_Hard+0xac>)
 8013d04:	001a      	movs	r2, r3
 8013d06:	2100      	movs	r1, #0
 8013d08:	2010      	movs	r0, #16
 8013d0a:	f7fe fe65 	bl	80129d8 <Write_String_16x32AsicII>

		String_Light_Level[0]=Light/10+'0';
 8013d0e:	4b25      	ldr	r3, [pc, #148]	; (8013da4 <second_menu_Hard+0xb0>)
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	210a      	movs	r1, #10
 8013d14:	0018      	movs	r0, r3
 8013d16:	f7ec fa19 	bl	800014c <__udivsi3>
 8013d1a:	0003      	movs	r3, r0
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	3330      	adds	r3, #48	; 0x30
 8013d20:	b2da      	uxtb	r2, r3
 8013d22:	4b21      	ldr	r3, [pc, #132]	; (8013da8 <second_menu_Hard+0xb4>)
 8013d24:	701a      	strb	r2, [r3, #0]
		String_Light_Level[1]=Light%10+'0';
 8013d26:	4b1f      	ldr	r3, [pc, #124]	; (8013da4 <second_menu_Hard+0xb0>)
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	210a      	movs	r1, #10
 8013d2c:	0018      	movs	r0, r3
 8013d2e:	f7ec fa93 	bl	8000258 <__aeabi_uidivmod>
 8013d32:	000b      	movs	r3, r1
 8013d34:	b2db      	uxtb	r3, r3
 8013d36:	3330      	adds	r3, #48	; 0x30
 8013d38:	b2da      	uxtb	r2, r3
 8013d3a:	4b1b      	ldr	r3, [pc, #108]	; (8013da8 <second_menu_Hard+0xb4>)
 8013d3c:	705a      	strb	r2, [r3, #1]
		Write_String_16x32AsicII(16,30, String_Light_Level);//显示输入值
 8013d3e:	4b1a      	ldr	r3, [pc, #104]	; (8013da8 <second_menu_Hard+0xb4>)
 8013d40:	001a      	movs	r2, r3
 8013d42:	211e      	movs	r1, #30
 8013d44:	2010      	movs	r0, #16
 8013d46:	f7fe fe47 	bl	80129d8 <Write_String_16x32AsicII>

		Cursor_flash_off();
 8013d4a:	f000 fb21 	bl	8014390 <Cursor_flash_off>
		return;
 8013d4e:	e023      	b.n	8013d98 <second_menu_Hard+0xa4>
	}
	else if(z==2)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2b02      	cmp	r3, #2
 8013d54:	d10e      	bne.n	8013d74 <second_menu_Hard+0x80>
	{
		Write_String_16x32AsicII(16,0,"Temp: ");
 8013d56:	4b15      	ldr	r3, [pc, #84]	; (8013dac <second_menu_Hard+0xb8>)
 8013d58:	001a      	movs	r2, r3
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	2010      	movs	r0, #16
 8013d5e:	f7fe fe3b 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_Temperature_CH1);//显示温度
 8013d62:	4b13      	ldr	r3, [pc, #76]	; (8013db0 <second_menu_Hard+0xbc>)
 8013d64:	001a      	movs	r2, r3
 8013d66:	2118      	movs	r1, #24
 8013d68:	2010      	movs	r0, #16
 8013d6a:	f7fe fe35 	bl	80129d8 <Write_String_16x32AsicII>

		Cursor_flash_off();
 8013d6e:	f000 fb0f 	bl	8014390 <Cursor_flash_off>
		return;
 8013d72:	e011      	b.n	8013d98 <second_menu_Hard+0xa4>
	}
	else if(z==3)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b03      	cmp	r3, #3
 8013d78:	d10e      	bne.n	8013d98 <second_menu_Hard+0xa4>
	{
		Write_String_16x32AsicII(16,0,"FANS: ");
 8013d7a:	4b0e      	ldr	r3, [pc, #56]	; (8013db4 <second_menu_Hard+0xc0>)
 8013d7c:	001a      	movs	r2, r3
 8013d7e:	2100      	movs	r1, #0
 8013d80:	2010      	movs	r0, #16
 8013d82:	f7fe fe29 	bl	80129d8 <Write_String_16x32AsicII>
		Write_String_16x32AsicII(16,24, String_FAN);//转速
 8013d86:	4b0c      	ldr	r3, [pc, #48]	; (8013db8 <second_menu_Hard+0xc4>)
 8013d88:	001a      	movs	r2, r3
 8013d8a:	2118      	movs	r1, #24
 8013d8c:	2010      	movs	r0, #16
 8013d8e:	f7fe fe23 	bl	80129d8 <Write_String_16x32AsicII>

		Cursor_flash_off();
 8013d92:	f000 fafd 	bl	8014390 <Cursor_flash_off>
		return;
 8013d96:	46c0      	nop			; (mov r8, r8)
	}

}
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	b002      	add	sp, #8
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	46c0      	nop			; (mov r8, r8)
 8013da0:	0801850c 	.word	0x0801850c
 8013da4:	200030b7 	.word	0x200030b7
 8013da8:	2000306c 	.word	0x2000306c
 8013dac:	08018514 	.word	0x08018514
 8013db0:	20003078 	.word	0x20003078
 8013db4:	0801851c 	.word	0x0801851c
 8013db8:	20003084 	.word	0x20003084

08013dbc <second_menu_Calibration>:


static void second_menu_Calibration(int z)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
	if(z==1)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d112      	bne.n	8013df0 <second_menu_Calibration+0x34>
	{
		Cursor_flash_on();
 8013dca:	f000 fb17 	bl	80143fc <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 8013dce:	4b2b      	ldr	r3, [pc, #172]	; (8013e7c <second_menu_Calibration+0xc0>)
 8013dd0:	001a      	movs	r2, r3
 8013dd2:	2100      	movs	r1, #0
 8013dd4:	2010      	movs	r0, #16
 8013dd6:	f7fe fdff 	bl	80129d8 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 8013dda:	4b29      	ldr	r3, [pc, #164]	; (8013e80 <second_menu_Calibration+0xc4>)
 8013ddc:	001a      	movs	r2, r3
 8013dde:	2124      	movs	r1, #36	; 0x24
 8013de0:	2010      	movs	r0, #16
 8013de2:	f7fe fdf9 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 8013de6:	2256      	movs	r2, #86	; 0x56
 8013de8:	212c      	movs	r1, #44	; 0x2c
 8013dea:	2030      	movs	r0, #48	; 0x30
 8013dec:	f7fe fd2e 	bl	801284c <Write_Single_8x16AsicII>

	}
	if(z==2)
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2b02      	cmp	r3, #2
 8013df4:	d112      	bne.n	8013e1c <second_menu_Calibration+0x60>
	{
		Cursor_flash_on();
 8013df6:	f000 fb01 	bl	80143fc <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 8013dfa:	4b22      	ldr	r3, [pc, #136]	; (8013e84 <second_menu_Calibration+0xc8>)
 8013dfc:	001a      	movs	r2, r3
 8013dfe:	2100      	movs	r1, #0
 8013e00:	2010      	movs	r0, #16
 8013e02:	f7fe fde9 	bl	80129d8 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Vlotage);
 8013e06:	4b1e      	ldr	r3, [pc, #120]	; (8013e80 <second_menu_Calibration+0xc4>)
 8013e08:	001a      	movs	r2, r3
 8013e0a:	2124      	movs	r1, #36	; 0x24
 8013e0c:	2010      	movs	r0, #16
 8013e0e:	f7fe fde3 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'V');
 8013e12:	2256      	movs	r2, #86	; 0x56
 8013e14:	212c      	movs	r1, #44	; 0x2c
 8013e16:	2030      	movs	r0, #48	; 0x30
 8013e18:	f7fe fd18 	bl	801284c <Write_Single_8x16AsicII>

	}

	if(z==3)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b03      	cmp	r3, #3
 8013e20:	d112      	bne.n	8013e48 <second_menu_Calibration+0x8c>
	{
		Cursor_flash_on();
 8013e22:	f000 faeb 	bl	80143fc <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT1");
 8013e26:	4b15      	ldr	r3, [pc, #84]	; (8013e7c <second_menu_Calibration+0xc0>)
 8013e28:	001a      	movs	r2, r3
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	2010      	movs	r0, #16
 8013e2e:	f7fe fdd3 	bl	80129d8 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 8013e32:	4b15      	ldr	r3, [pc, #84]	; (8013e88 <second_menu_Calibration+0xcc>)
 8013e34:	001a      	movs	r2, r3
 8013e36:	2124      	movs	r1, #36	; 0x24
 8013e38:	2010      	movs	r0, #16
 8013e3a:	f7fe fdcd 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 8013e3e:	2241      	movs	r2, #65	; 0x41
 8013e40:	212c      	movs	r1, #44	; 0x2c
 8013e42:	2030      	movs	r0, #48	; 0x30
 8013e44:	f7fe fd02 	bl	801284c <Write_Single_8x16AsicII>

	}
	if(z==4)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b04      	cmp	r3, #4
 8013e4c:	d112      	bne.n	8013e74 <second_menu_Calibration+0xb8>
	{
		Cursor_flash_on();
 8013e4e:	f000 fad5 	bl	80143fc <Cursor_flash_on>
		Write_String_16x32AsicII(16,0,"POINT2");
 8013e52:	4b0c      	ldr	r3, [pc, #48]	; (8013e84 <second_menu_Calibration+0xc8>)
 8013e54:	001a      	movs	r2, r3
 8013e56:	2100      	movs	r1, #0
 8013e58:	2010      	movs	r0, #16
 8013e5a:	f7fe fdbd 	bl	80129d8 <Write_String_16x32AsicII>
		/*用户设定值*/
		Write_String_16x32AsicII(16,36,String_Calibration_Current);
 8013e5e:	4b0a      	ldr	r3, [pc, #40]	; (8013e88 <second_menu_Calibration+0xcc>)
 8013e60:	001a      	movs	r2, r3
 8013e62:	2124      	movs	r1, #36	; 0x24
 8013e64:	2010      	movs	r0, #16
 8013e66:	f7fe fdb7 	bl	80129d8 <Write_String_16x32AsicII>
		Write_Single_8x16AsicII(48,44, 'A');
 8013e6a:	2241      	movs	r2, #65	; 0x41
 8013e6c:	212c      	movs	r1, #44	; 0x2c
 8013e6e:	2030      	movs	r0, #48	; 0x30
 8013e70:	f7fe fcec 	bl	801284c <Write_Single_8x16AsicII>
	}
}
 8013e74:	46c0      	nop			; (mov r8, r8)
 8013e76:	46bd      	mov	sp, r7
 8013e78:	b002      	add	sp, #8
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	08018524 	.word	0x08018524
 8013e80:	20003090 	.word	0x20003090
 8013e84:	0801852c 	.word	0x0801852c
 8013e88:	2000309c 	.word	0x2000309c

08013e8c <Display_Menu_Function_Interface_Second_Menu>:
 * @param  xyz.y
 * @param  xyz.z
 * @retval None
 */
void Display_Menu_Function_Interface_Second_Menu(int y,int z)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b082      	sub	sp, #8
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	6039      	str	r1, [r7, #0]

	Write_String_8x16AsicII(48,48, "2nd Menu");
 8013e96:	4b1b      	ldr	r3, [pc, #108]	; (8013f04 <Display_Menu_Function_Interface_Second_Menu+0x78>)
 8013e98:	001a      	movs	r2, r3
 8013e9a:	2130      	movs	r1, #48	; 0x30
 8013e9c:	2030      	movs	r0, #48	; 0x30
 8013e9e:	f7fe fd19 	bl	80128d4 <Write_String_8x16AsicII>
	//一级菜单功能，显示在中间
	switch(y)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b08      	cmp	r3, #8
 8013ea6:	d828      	bhi.n	8013efa <Display_Menu_Function_Interface_Second_Menu+0x6e>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	009a      	lsls	r2, r3, #2
 8013eac:	4b16      	ldr	r3, [pc, #88]	; (8013f08 <Display_Menu_Function_Interface_Second_Menu+0x7c>)
 8013eae:	18d3      	adds	r3, r2, r3
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	469f      	mov	pc, r3
	{
		case 1://system
		{
			second_munu_system(z);
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	0018      	movs	r0, r3
 8013eb8:	f7ff fdaa 	bl	8013a10 <second_munu_system>
			break;
 8013ebc:	e01e      	b.n	8013efc <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 2://slope
		{
			second_munu_slope(z);
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	0018      	movs	r0, r3
 8013ec2:	f7ff fdbb 	bl	8013a3c <second_munu_slope>
			break;
 8013ec6:	e019      	b.n	8013efc <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 3://Communication
		{
			second_munu_RS232(z);
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	0018      	movs	r0, r3
 8013ecc:	f7ff fde8 	bl	8013aa0 <second_munu_RS232>
			break;
 8013ed0:	e014      	b.n	8013efc <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 4://timer
		{
			second_menu_timer(z);
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	0018      	movs	r0, r3
 8013ed6:	f7ff fe01 	bl	8013adc <second_menu_timer>
			break;
 8013eda:	e00f      	b.n	8013efc <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		case 5://AD
		{
			second_menu_AD(z);
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	0018      	movs	r0, r3
 8013ee0:	f7ff fe42 	bl	8013b68 <second_menu_AD>
			break;
 8013ee4:	e00a      	b.n	8013efc <Display_Menu_Function_Interface_Second_Menu+0x70>

		}
		case 6:
		{
			second_menu_Hard(z);
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	0018      	movs	r0, r3
 8013eea:	f7ff ff03 	bl	8013cf4 <second_menu_Hard>
			break;
 8013eee:	e005      	b.n	8013efc <Display_Menu_Function_Interface_Second_Menu+0x70>
			 second_menu_Portect(z);
		}
		*/
		case 8:
		{
			second_menu_Calibration(z);
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	0018      	movs	r0, r3
 8013ef4:	f7ff ff62 	bl	8013dbc <second_menu_Calibration>
			break;
 8013ef8:	e000      	b.n	8013efc <Display_Menu_Function_Interface_Second_Menu+0x70>
		}
		default :break;
 8013efa:	46c0      	nop			; (mov r8, r8)
	}


}
 8013efc:	46c0      	nop			; (mov r8, r8)
 8013efe:	46bd      	mov	sp, r7
 8013f00:	b002      	add	sp, #8
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	08018534 	.word	0x08018534
 8013f08:	080189e4 	.word	0x080189e4

08013f0c <Display_Protect_Interface>:
  * @brief  显示保护界面
  * @param  出现的错误类型
  * @retval None
  */
void Display_Protect_Interface(uint8_t Error)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	0002      	movs	r2, r0
 8013f14:	1dfb      	adds	r3, r7, #7
 8013f16:	701a      	strb	r2, [r3, #0]

	Cursor_flash_off();
 8013f18:	f000 fa3a 	bl	8014390 <Cursor_flash_off>
	uint8_t mask=0x01;
 8013f1c:	210f      	movs	r1, #15
 8013f1e:	187b      	adds	r3, r7, r1
 8013f20:	2201      	movs	r2, #1
 8013f22:	701a      	strb	r2, [r3, #0]
	static uint8_t count=0;

	count=0;
 8013f24:	4ba4      	ldr	r3, [pc, #656]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013f26:	2200      	movs	r2, #0
 8013f28:	701a      	strb	r2, [r3, #0]
	if((Error&mask)==mask)//0x01
 8013f2a:	1dfb      	adds	r3, r7, #7
 8013f2c:	187a      	adds	r2, r7, r1
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	7812      	ldrb	r2, [r2, #0]
 8013f32:	4013      	ands	r3, r2
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	187a      	adds	r2, r7, r1
 8013f38:	7812      	ldrb	r2, [r2, #0]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d105      	bne.n	8013f4a <Display_Protect_Interface+0x3e>
	{
		count++;
 8013f3e:	4b9e      	ldr	r3, [pc, #632]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	3301      	adds	r3, #1
 8013f44:	b2da      	uxtb	r2, r3
 8013f46:	4b9c      	ldr	r3, [pc, #624]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013f48:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 8013f4a:	210f      	movs	r1, #15
 8013f4c:	187a      	adds	r2, r7, r1
 8013f4e:	187b      	adds	r3, r7, r1
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	18db      	adds	r3, r3, r3
 8013f54:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 8013f56:	1dfb      	adds	r3, r7, #7
 8013f58:	187a      	adds	r2, r7, r1
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	7812      	ldrb	r2, [r2, #0]
 8013f5e:	4013      	ands	r3, r2
 8013f60:	b2db      	uxtb	r3, r3
 8013f62:	187a      	adds	r2, r7, r1
 8013f64:	7812      	ldrb	r2, [r2, #0]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d105      	bne.n	8013f76 <Display_Protect_Interface+0x6a>
	{
		count++;
 8013f6a:	4b93      	ldr	r3, [pc, #588]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	3301      	adds	r3, #1
 8013f70:	b2da      	uxtb	r2, r3
 8013f72:	4b91      	ldr	r3, [pc, #580]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013f74:	701a      	strb	r2, [r3, #0]
	}
	mask<<=1;
 8013f76:	210f      	movs	r1, #15
 8013f78:	187a      	adds	r2, r7, r1
 8013f7a:	187b      	adds	r3, r7, r1
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	18db      	adds	r3, r3, r3
 8013f80:	7013      	strb	r3, [r2, #0]
	if((Error&mask)==mask)//0x01
 8013f82:	1dfb      	adds	r3, r7, #7
 8013f84:	187a      	adds	r2, r7, r1
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	7812      	ldrb	r2, [r2, #0]
 8013f8a:	4013      	ands	r3, r2
 8013f8c:	b2db      	uxtb	r3, r3
 8013f8e:	187a      	adds	r2, r7, r1
 8013f90:	7812      	ldrb	r2, [r2, #0]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d105      	bne.n	8013fa2 <Display_Protect_Interface+0x96>
	{
		count++;
 8013f96:	4b88      	ldr	r3, [pc, #544]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	b2da      	uxtb	r2, r3
 8013f9e:	4b86      	ldr	r3, [pc, #536]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013fa0:	701a      	strb	r2, [r3, #0]
	}
	mask=0x01;
 8013fa2:	230f      	movs	r3, #15
 8013fa4:	18fb      	adds	r3, r7, r3
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	701a      	strb	r2, [r3, #0]

	switch(count)
 8013faa:	4b83      	ldr	r3, [pc, #524]	; (80141b8 <Display_Protect_Interface+0x2ac>)
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	2b03      	cmp	r3, #3
 8013fb0:	d100      	bne.n	8013fb4 <Display_Protect_Interface+0xa8>
 8013fb2:	e0db      	b.n	801416c <Display_Protect_Interface+0x260>
 8013fb4:	dd00      	ble.n	8013fb8 <Display_Protect_Interface+0xac>
 8013fb6:	e0fb      	b.n	80141b0 <Display_Protect_Interface+0x2a4>
 8013fb8:	2b02      	cmp	r3, #2
 8013fba:	d100      	bne.n	8013fbe <Display_Protect_Interface+0xb2>
 8013fbc:	e07e      	b.n	80140bc <Display_Protect_Interface+0x1b0>
 8013fbe:	dd00      	ble.n	8013fc2 <Display_Protect_Interface+0xb6>
 8013fc0:	e0f6      	b.n	80141b0 <Display_Protect_Interface+0x2a4>
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d002      	beq.n	8013fcc <Display_Protect_Interface+0xc0>
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d00b      	beq.n	8013fe2 <Display_Protect_Interface+0xd6>

	}



}
 8013fca:	e0f1      	b.n	80141b0 <Display_Protect_Interface+0x2a4>
			Clear_Screen();
 8013fcc:	f7fe fbe8 	bl	80127a0 <Clear_Screen>
			xyz.coordinates1=0;
 8013fd0:	4b7a      	ldr	r3, [pc, #488]	; (80141bc <Display_Protect_Interface+0x2b0>)
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	601a      	str	r2, [r3, #0]
			xyz.coordinates2=0;
 8013fd6:	4b79      	ldr	r3, [pc, #484]	; (80141bc <Display_Protect_Interface+0x2b0>)
 8013fd8:	2200      	movs	r2, #0
 8013fda:	605a      	str	r2, [r3, #4]
			xyz.coordinates3=0;
 8013fdc:	4b77      	ldr	r3, [pc, #476]	; (80141bc <Display_Protect_Interface+0x2b0>)
 8013fde:	2200      	movs	r2, #0
 8013fe0:	609a      	str	r2, [r3, #8]
			if((Error&0x01)==0x01)
 8013fe2:	1dfb      	adds	r3, r7, #7
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	2201      	movs	r2, #1
 8013fe8:	4013      	ands	r3, r2
 8013fea:	d01e      	beq.n	801402a <Display_Protect_Interface+0x11e>
				Write_String_16x32AsicII(16,4,"   ");
 8013fec:	4b74      	ldr	r3, [pc, #464]	; (80141c0 <Display_Protect_Interface+0x2b4>)
 8013fee:	001a      	movs	r2, r3
 8013ff0:	2104      	movs	r1, #4
 8013ff2:	2010      	movs	r0, #16
 8013ff4:	f7fe fcf0 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 8013ff8:	4b72      	ldr	r3, [pc, #456]	; (80141c4 <Display_Protect_Interface+0x2b8>)
 8013ffa:	001a      	movs	r2, r3
 8013ffc:	2112      	movs	r1, #18
 8013ffe:	2010      	movs	r0, #16
 8014000:	f7fe fcea 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OVP");
 8014004:	4b70      	ldr	r3, [pc, #448]	; (80141c8 <Display_Protect_Interface+0x2bc>)
 8014006:	001a      	movs	r2, r3
 8014008:	211a      	movs	r1, #26
 801400a:	2010      	movs	r0, #16
 801400c:	f7fe fce4 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 8014010:	4b6c      	ldr	r3, [pc, #432]	; (80141c4 <Display_Protect_Interface+0x2b8>)
 8014012:	001a      	movs	r2, r3
 8014014:	2126      	movs	r1, #38	; 0x26
 8014016:	2010      	movs	r0, #16
 8014018:	f7fe fcde 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 801401c:	4b6b      	ldr	r3, [pc, #428]	; (80141cc <Display_Protect_Interface+0x2c0>)
 801401e:	001a      	movs	r2, r3
 8014020:	212c      	movs	r1, #44	; 0x2c
 8014022:	2010      	movs	r0, #16
 8014024:	f7fe fcd8 	bl	80129d8 <Write_String_16x32AsicII>
			break;
 8014028:	e0bf      	b.n	80141aa <Display_Protect_Interface+0x29e>
			else if((Error&0x02)==0x02)
 801402a:	1dfb      	adds	r3, r7, #7
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	2202      	movs	r2, #2
 8014030:	4013      	ands	r3, r2
 8014032:	d01e      	beq.n	8014072 <Display_Protect_Interface+0x166>
				Write_String_16x32AsicII(16,4,"   ");
 8014034:	4b62      	ldr	r3, [pc, #392]	; (80141c0 <Display_Protect_Interface+0x2b4>)
 8014036:	001a      	movs	r2, r3
 8014038:	2104      	movs	r1, #4
 801403a:	2010      	movs	r0, #16
 801403c:	f7fe fccc 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 8014040:	4b60      	ldr	r3, [pc, #384]	; (80141c4 <Display_Protect_Interface+0x2b8>)
 8014042:	001a      	movs	r2, r3
 8014044:	2112      	movs	r1, #18
 8014046:	2010      	movs	r0, #16
 8014048:	f7fe fcc6 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OCP");
 801404c:	4b60      	ldr	r3, [pc, #384]	; (80141d0 <Display_Protect_Interface+0x2c4>)
 801404e:	001a      	movs	r2, r3
 8014050:	211a      	movs	r1, #26
 8014052:	2010      	movs	r0, #16
 8014054:	f7fe fcc0 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 8014058:	4b5a      	ldr	r3, [pc, #360]	; (80141c4 <Display_Protect_Interface+0x2b8>)
 801405a:	001a      	movs	r2, r3
 801405c:	2126      	movs	r1, #38	; 0x26
 801405e:	2010      	movs	r0, #16
 8014060:	f7fe fcba 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 8014064:	4b59      	ldr	r3, [pc, #356]	; (80141cc <Display_Protect_Interface+0x2c0>)
 8014066:	001a      	movs	r2, r3
 8014068:	212c      	movs	r1, #44	; 0x2c
 801406a:	2010      	movs	r0, #16
 801406c:	f7fe fcb4 	bl	80129d8 <Write_String_16x32AsicII>
			break;
 8014070:	e09b      	b.n	80141aa <Display_Protect_Interface+0x29e>
			else if((Error&0x04)==0x04)
 8014072:	1dfb      	adds	r3, r7, #7
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	2204      	movs	r2, #4
 8014078:	4013      	ands	r3, r2
 801407a:	d100      	bne.n	801407e <Display_Protect_Interface+0x172>
 801407c:	e095      	b.n	80141aa <Display_Protect_Interface+0x29e>
				Write_String_16x32AsicII(16,4,"   ");
 801407e:	4b50      	ldr	r3, [pc, #320]	; (80141c0 <Display_Protect_Interface+0x2b4>)
 8014080:	001a      	movs	r2, r3
 8014082:	2104      	movs	r1, #4
 8014084:	2010      	movs	r0, #16
 8014086:	f7fe fca7 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,18,"  ");
 801408a:	4b4e      	ldr	r3, [pc, #312]	; (80141c4 <Display_Protect_Interface+0x2b8>)
 801408c:	001a      	movs	r2, r3
 801408e:	2112      	movs	r1, #18
 8014090:	2010      	movs	r0, #16
 8014092:	f7fe fca1 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,26,"OTP");
 8014096:	4b4f      	ldr	r3, [pc, #316]	; (80141d4 <Display_Protect_Interface+0x2c8>)
 8014098:	001a      	movs	r2, r3
 801409a:	211a      	movs	r1, #26
 801409c:	2010      	movs	r0, #16
 801409e:	f7fe fc9b 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,38,"  ");
 80140a2:	4b48      	ldr	r3, [pc, #288]	; (80141c4 <Display_Protect_Interface+0x2b8>)
 80140a4:	001a      	movs	r2, r3
 80140a6:	2126      	movs	r1, #38	; 0x26
 80140a8:	2010      	movs	r0, #16
 80140aa:	f7fe fc95 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,44,"    ");
 80140ae:	4b47      	ldr	r3, [pc, #284]	; (80141cc <Display_Protect_Interface+0x2c0>)
 80140b0:	001a      	movs	r2, r3
 80140b2:	212c      	movs	r1, #44	; 0x2c
 80140b4:	2010      	movs	r0, #16
 80140b6:	f7fe fc8f 	bl	80129d8 <Write_String_16x32AsicII>
			break;
 80140ba:	e076      	b.n	80141aa <Display_Protect_Interface+0x29e>
			if((Error&0x02)==0x02 && (Error&0x04)==0x04)
 80140bc:	1dfb      	adds	r3, r7, #7
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	2202      	movs	r2, #2
 80140c2:	4013      	ands	r3, r2
 80140c4:	d017      	beq.n	80140f6 <Display_Protect_Interface+0x1ea>
 80140c6:	1dfb      	adds	r3, r7, #7
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	2204      	movs	r2, #4
 80140cc:	4013      	ands	r3, r2
 80140ce:	d012      	beq.n	80140f6 <Display_Protect_Interface+0x1ea>
				Write_String_16x32AsicII(16,18,"OCP");
 80140d0:	4b3f      	ldr	r3, [pc, #252]	; (80141d0 <Display_Protect_Interface+0x2c4>)
 80140d2:	001a      	movs	r2, r3
 80140d4:	2112      	movs	r1, #18
 80140d6:	2010      	movs	r0, #16
 80140d8:	f7fe fc7e 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 80140dc:	4b3e      	ldr	r3, [pc, #248]	; (80141d8 <Display_Protect_Interface+0x2cc>)
 80140de:	001a      	movs	r2, r3
 80140e0:	211e      	movs	r1, #30
 80140e2:	2010      	movs	r0, #16
 80140e4:	f7fe fc78 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 80140e8:	4b3a      	ldr	r3, [pc, #232]	; (80141d4 <Display_Protect_Interface+0x2c8>)
 80140ea:	001a      	movs	r2, r3
 80140ec:	2122      	movs	r1, #34	; 0x22
 80140ee:	2010      	movs	r0, #16
 80140f0:	f7fe fc72 	bl	80129d8 <Write_String_16x32AsicII>
 80140f4:	e039      	b.n	801416a <Display_Protect_Interface+0x25e>
			else if((Error&0x01)==0x01 && (Error&0x04)==0x04)
 80140f6:	1dfb      	adds	r3, r7, #7
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	2201      	movs	r2, #1
 80140fc:	4013      	ands	r3, r2
 80140fe:	d017      	beq.n	8014130 <Display_Protect_Interface+0x224>
 8014100:	1dfb      	adds	r3, r7, #7
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	2204      	movs	r2, #4
 8014106:	4013      	ands	r3, r2
 8014108:	d012      	beq.n	8014130 <Display_Protect_Interface+0x224>
				Write_String_16x32AsicII(16,18,"OVP");
 801410a:	4b2f      	ldr	r3, [pc, #188]	; (80141c8 <Display_Protect_Interface+0x2bc>)
 801410c:	001a      	movs	r2, r3
 801410e:	2112      	movs	r1, #18
 8014110:	2010      	movs	r0, #16
 8014112:	f7fe fc61 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8014116:	4b30      	ldr	r3, [pc, #192]	; (80141d8 <Display_Protect_Interface+0x2cc>)
 8014118:	001a      	movs	r2, r3
 801411a:	211e      	movs	r1, #30
 801411c:	2010      	movs	r0, #16
 801411e:	f7fe fc5b 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OTP");
 8014122:	4b2c      	ldr	r3, [pc, #176]	; (80141d4 <Display_Protect_Interface+0x2c8>)
 8014124:	001a      	movs	r2, r3
 8014126:	2122      	movs	r1, #34	; 0x22
 8014128:	2010      	movs	r0, #16
 801412a:	f7fe fc55 	bl	80129d8 <Write_String_16x32AsicII>
 801412e:	e01c      	b.n	801416a <Display_Protect_Interface+0x25e>
			else if((Error&0x02)==0x02 && (Error&0x01)==0x01)
 8014130:	1dfb      	adds	r3, r7, #7
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	2202      	movs	r2, #2
 8014136:	4013      	ands	r3, r2
 8014138:	d039      	beq.n	80141ae <Display_Protect_Interface+0x2a2>
 801413a:	1dfb      	adds	r3, r7, #7
 801413c:	781b      	ldrb	r3, [r3, #0]
 801413e:	2201      	movs	r2, #1
 8014140:	4013      	ands	r3, r2
 8014142:	d034      	beq.n	80141ae <Display_Protect_Interface+0x2a2>
				Write_String_16x32AsicII(16,18,"OVP");
 8014144:	4b20      	ldr	r3, [pc, #128]	; (80141c8 <Display_Protect_Interface+0x2bc>)
 8014146:	001a      	movs	r2, r3
 8014148:	2112      	movs	r1, #18
 801414a:	2010      	movs	r0, #16
 801414c:	f7fe fc44 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,30," ");
 8014150:	4b21      	ldr	r3, [pc, #132]	; (80141d8 <Display_Protect_Interface+0x2cc>)
 8014152:	001a      	movs	r2, r3
 8014154:	211e      	movs	r1, #30
 8014156:	2010      	movs	r0, #16
 8014158:	f7fe fc3e 	bl	80129d8 <Write_String_16x32AsicII>
				Write_String_16x32AsicII(16,34,"OCP");
 801415c:	4b1c      	ldr	r3, [pc, #112]	; (80141d0 <Display_Protect_Interface+0x2c4>)
 801415e:	001a      	movs	r2, r3
 8014160:	2122      	movs	r1, #34	; 0x22
 8014162:	2010      	movs	r0, #16
 8014164:	f7fe fc38 	bl	80129d8 <Write_String_16x32AsicII>
			break;
 8014168:	e021      	b.n	80141ae <Display_Protect_Interface+0x2a2>
 801416a:	e020      	b.n	80141ae <Display_Protect_Interface+0x2a2>
			Write_String_16x32AsicII(16,18," ");
 801416c:	4b1a      	ldr	r3, [pc, #104]	; (80141d8 <Display_Protect_Interface+0x2cc>)
 801416e:	001a      	movs	r2, r3
 8014170:	2112      	movs	r1, #18
 8014172:	2010      	movs	r0, #16
 8014174:	f7fe fc30 	bl	80129d8 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,4,"OVP");
 8014178:	4b13      	ldr	r3, [pc, #76]	; (80141c8 <Display_Protect_Interface+0x2bc>)
 801417a:	001a      	movs	r2, r3
 801417c:	2104      	movs	r1, #4
 801417e:	2010      	movs	r0, #16
 8014180:	f7fe fc2a 	bl	80129d8 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,24,"OCP");
 8014184:	4b12      	ldr	r3, [pc, #72]	; (80141d0 <Display_Protect_Interface+0x2c4>)
 8014186:	001a      	movs	r2, r3
 8014188:	2118      	movs	r1, #24
 801418a:	2010      	movs	r0, #16
 801418c:	f7fe fc24 	bl	80129d8 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,44,"OTP");
 8014190:	4b10      	ldr	r3, [pc, #64]	; (80141d4 <Display_Protect_Interface+0x2c8>)
 8014192:	001a      	movs	r2, r3
 8014194:	212c      	movs	r1, #44	; 0x2c
 8014196:	2010      	movs	r0, #16
 8014198:	f7fe fc1e 	bl	80129d8 <Write_String_16x32AsicII>
			Write_String_16x32AsicII(16,36," ");
 801419c:	4b0e      	ldr	r3, [pc, #56]	; (80141d8 <Display_Protect_Interface+0x2cc>)
 801419e:	001a      	movs	r2, r3
 80141a0:	2124      	movs	r1, #36	; 0x24
 80141a2:	2010      	movs	r0, #16
 80141a4:	f7fe fc18 	bl	80129d8 <Write_String_16x32AsicII>
			break;
 80141a8:	e002      	b.n	80141b0 <Display_Protect_Interface+0x2a4>
			break;
 80141aa:	46c0      	nop			; (mov r8, r8)
 80141ac:	e000      	b.n	80141b0 <Display_Protect_Interface+0x2a4>
			break;
 80141ae:	46c0      	nop			; (mov r8, r8)
}
 80141b0:	46c0      	nop			; (mov r8, r8)
 80141b2:	46bd      	mov	sp, r7
 80141b4:	b004      	add	sp, #16
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	20003a8d 	.word	0x20003a8d
 80141bc:	200039f8 	.word	0x200039f8
 80141c0:	08018540 	.word	0x08018540
 80141c4:	08018394 	.word	0x08018394
 80141c8:	08018544 	.word	0x08018544
 80141cc:	08018548 	.word	0x08018548
 80141d0:	08018550 	.word	0x08018550
 80141d4:	08018554 	.word	0x08018554
 80141d8:	08018558 	.word	0x08018558

080141dc <Cursor_flash>:

}


void Cursor_flash(void)
{
 80141dc:	b590      	push	{r4, r7, lr}
 80141de:	4c5e      	ldr	r4, [pc, #376]	; (8014358 <Cursor_flash+0x17c>)
 80141e0:	44a5      	add	sp, r4
 80141e2:	af00      	add	r7, sp, #0
	static int count;
	uint8_t clear_arry[16*64*2]={0x00};
 80141e4:	4b5d      	ldr	r3, [pc, #372]	; (801435c <Cursor_flash+0x180>)
 80141e6:	4a5e      	ldr	r2, [pc, #376]	; (8014360 <Cursor_flash+0x184>)
 80141e8:	189b      	adds	r3, r3, r2
 80141ea:	19db      	adds	r3, r3, r7
 80141ec:	2200      	movs	r2, #0
 80141ee:	601a      	str	r2, [r3, #0]
 80141f0:	3304      	adds	r3, #4
 80141f2:	4a5c      	ldr	r2, [pc, #368]	; (8014364 <Cursor_flash+0x188>)
 80141f4:	2100      	movs	r1, #0
 80141f6:	0018      	movs	r0, r3
 80141f8:	f000 fa1f 	bl	801463a <memset>
	count++;
 80141fc:	4b5a      	ldr	r3, [pc, #360]	; (8014368 <Cursor_flash+0x18c>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	1c5a      	adds	r2, r3, #1
 8014202:	4b59      	ldr	r3, [pc, #356]	; (8014368 <Cursor_flash+0x18c>)
 8014204:	601a      	str	r2, [r3, #0]
	if(count==2)
 8014206:	4b58      	ldr	r3, [pc, #352]	; (8014368 <Cursor_flash+0x18c>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2b02      	cmp	r3, #2
 801420c:	d16a      	bne.n	80142e4 <Cursor_flash+0x108>
	{
		count=0;
 801420e:	4b56      	ldr	r3, [pc, #344]	; (8014368 <Cursor_flash+0x18c>)
 8014210:	2200      	movs	r2, #0
 8014212:	601a      	str	r2, [r3, #0]

		SPI_OLED_SendCommond(Set_Re_map_and_Dual_COM_Line_mode);
 8014214:	20a0      	movs	r0, #160	; 0xa0
 8014216:	f7fd fc7f 	bl	8011b18 <SPI_OLED_SendCommond>
		SPI_OLED_SendData(0x14);
 801421a:	2014      	movs	r0, #20
 801421c:	f7fd fc44 	bl	8011aa8 <SPI_OLED_SendData>
		SPI_OLED_SendData(0x11);
 8014220:	2011      	movs	r0, #17
 8014222:	f7fd fc41 	bl	8011aa8 <SPI_OLED_SendData>

		Set_Column_Address(Cursor_Position*4, Cursor_Position*4+1);
 8014226:	4b51      	ldr	r3, [pc, #324]	; (801436c <Cursor_flash+0x190>)
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	009b      	lsls	r3, r3, #2
 801422c:	b2da      	uxtb	r2, r3
 801422e:	4b4f      	ldr	r3, [pc, #316]	; (801436c <Cursor_flash+0x190>)
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	009b      	lsls	r3, r3, #2
 8014234:	b2db      	uxtb	r3, r3
 8014236:	3301      	adds	r3, #1
 8014238:	b2db      	uxtb	r3, r3
 801423a:	0019      	movs	r1, r3
 801423c:	0010      	movs	r0, r2
 801423e:	f7fe fa2f 	bl	80126a0 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 8014242:	210f      	movs	r1, #15
 8014244:	2000      	movs	r0, #0
 8014246:	f7fe fa49 	bl	80126dc <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 801424a:	205c      	movs	r0, #92	; 0x5c
 801424c:	f7fd fc64 	bl	8011b18 <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 8014250:	4b47      	ldr	r3, [pc, #284]	; (8014370 <Cursor_flash+0x194>)
 8014252:	18fb      	adds	r3, r7, r3
 8014254:	2200      	movs	r2, #0
 8014256:	701a      	strb	r2, [r3, #0]
 8014258:	e00e      	b.n	8014278 <Cursor_flash+0x9c>
		{
			Font_1Bit_To_4Bit(Pointleft[i]);
 801425a:	4c45      	ldr	r4, [pc, #276]	; (8014370 <Cursor_flash+0x194>)
 801425c:	193b      	adds	r3, r7, r4
 801425e:	781a      	ldrb	r2, [r3, #0]
 8014260:	4b44      	ldr	r3, [pc, #272]	; (8014374 <Cursor_flash+0x198>)
 8014262:	0052      	lsls	r2, r2, #1
 8014264:	5ad3      	ldrh	r3, [r2, r3]
 8014266:	b2db      	uxtb	r3, r3
 8014268:	0018      	movs	r0, r3
 801426a:	f7fd fd69 	bl	8011d40 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 801426e:	193b      	adds	r3, r7, r4
 8014270:	781a      	ldrb	r2, [r3, #0]
 8014272:	193b      	adds	r3, r7, r4
 8014274:	3201      	adds	r2, #1
 8014276:	701a      	strb	r2, [r3, #0]
 8014278:	4b3d      	ldr	r3, [pc, #244]	; (8014370 <Cursor_flash+0x194>)
 801427a:	18fb      	adds	r3, r7, r3
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	2b0f      	cmp	r3, #15
 8014280:	d9eb      	bls.n	801425a <Cursor_flash+0x7e>
		}
		Set_Column_Address(Cursor_Position*4+2, Cursor_Position*4+3);
 8014282:	4b3a      	ldr	r3, [pc, #232]	; (801436c <Cursor_flash+0x190>)
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	b2db      	uxtb	r3, r3
 801428a:	3302      	adds	r3, #2
 801428c:	b2da      	uxtb	r2, r3
 801428e:	4b37      	ldr	r3, [pc, #220]	; (801436c <Cursor_flash+0x190>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	009b      	lsls	r3, r3, #2
 8014294:	b2db      	uxtb	r3, r3
 8014296:	3303      	adds	r3, #3
 8014298:	b2db      	uxtb	r3, r3
 801429a:	0019      	movs	r1, r3
 801429c:	0010      	movs	r0, r2
 801429e:	f7fe f9ff 	bl	80126a0 <Set_Column_Address>
		Set_Row_Address(0, 0+15);
 80142a2:	210f      	movs	r1, #15
 80142a4:	2000      	movs	r0, #0
 80142a6:	f7fe fa19 	bl	80126dc <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM
 80142aa:	205c      	movs	r0, #92	; 0x5c
 80142ac:	f7fd fc34 	bl	8011b18 <SPI_OLED_SendCommond>
		for(uint8_t i=0;i<16;i++)
 80142b0:	4b31      	ldr	r3, [pc, #196]	; (8014378 <Cursor_flash+0x19c>)
 80142b2:	18fb      	adds	r3, r7, r3
 80142b4:	2200      	movs	r2, #0
 80142b6:	701a      	strb	r2, [r3, #0]
 80142b8:	e00e      	b.n	80142d8 <Cursor_flash+0xfc>
		{
			Font_1Bit_To_4Bit(Pointright[i]);
 80142ba:	4c2f      	ldr	r4, [pc, #188]	; (8014378 <Cursor_flash+0x19c>)
 80142bc:	193b      	adds	r3, r7, r4
 80142be:	781a      	ldrb	r2, [r3, #0]
 80142c0:	4b2e      	ldr	r3, [pc, #184]	; (801437c <Cursor_flash+0x1a0>)
 80142c2:	0052      	lsls	r2, r2, #1
 80142c4:	5ad3      	ldrh	r3, [r2, r3]
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	0018      	movs	r0, r3
 80142ca:	f7fd fd39 	bl	8011d40 <Font_1Bit_To_4Bit>
		for(uint8_t i=0;i<16;i++)
 80142ce:	193b      	adds	r3, r7, r4
 80142d0:	781a      	ldrb	r2, [r3, #0]
 80142d2:	193b      	adds	r3, r7, r4
 80142d4:	3201      	adds	r2, #1
 80142d6:	701a      	strb	r2, [r3, #0]
 80142d8:	4b27      	ldr	r3, [pc, #156]	; (8014378 <Cursor_flash+0x19c>)
 80142da:	18fb      	adds	r3, r7, r3
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	2b0f      	cmp	r3, #15
 80142e0:	d9eb      	bls.n	80142ba <Cursor_flash+0xde>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断

	}


}
 80142e2:	e033      	b.n	801434c <Cursor_flash+0x170>
		Set_Column_Address(0x00,0x3f);//0到63列
 80142e4:	213f      	movs	r1, #63	; 0x3f
 80142e6:	2000      	movs	r0, #0
 80142e8:	f7fe f9da 	bl	80126a0 <Set_Column_Address>
		Set_Row_Address(0x00,15);   //0到15行
 80142ec:	210f      	movs	r1, #15
 80142ee:	2000      	movs	r0, #0
 80142f0:	f7fe f9f4 	bl	80126dc <Set_Row_Address>
		SPI_OLED_SendCommond(Write_RAM_Command);//Enable MCU to write Data into RAM;//Enable MCU to write Data into RAM
 80142f4:	205c      	movs	r0, #92	; 0x5c
 80142f6:	f7fd fc0f 	bl	8011b18 <SPI_OLED_SendCommond>
		__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_UPDATE); //关闭编码器中断
 80142fa:	4b21      	ldr	r3, [pc, #132]	; (8014380 <Cursor_flash+0x1a4>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	68da      	ldr	r2, [r3, #12]
 8014300:	4b1f      	ldr	r3, [pc, #124]	; (8014380 <Cursor_flash+0x1a4>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2101      	movs	r1, #1
 8014306:	438a      	bics	r2, r1
 8014308:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//dc 1
 801430a:	4b1e      	ldr	r3, [pc, #120]	; (8014384 <Cursor_flash+0x1a8>)
 801430c:	2201      	movs	r2, #1
 801430e:	2102      	movs	r1, #2
 8014310:	0018      	movs	r0, r3
 8014312:	f7f2 fe32 	bl	8006f7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);//cs 0
 8014316:	4b1b      	ldr	r3, [pc, #108]	; (8014384 <Cursor_flash+0x1a8>)
 8014318:	2200      	movs	r2, #0
 801431a:	2101      	movs	r1, #1
 801431c:	0018      	movs	r0, r3
 801431e:	f7f2 fe2c 	bl	8006f7a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,clear_arry,32*64,100);
 8014322:	2380      	movs	r3, #128	; 0x80
 8014324:	011a      	lsls	r2, r3, #4
 8014326:	1d39      	adds	r1, r7, #4
 8014328:	4817      	ldr	r0, [pc, #92]	; (8014388 <Cursor_flash+0x1ac>)
 801432a:	2364      	movs	r3, #100	; 0x64
 801432c:	f7f3 fd34 	bl	8007d98 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);//cs 1
 8014330:	4b14      	ldr	r3, [pc, #80]	; (8014384 <Cursor_flash+0x1a8>)
 8014332:	2201      	movs	r2, #1
 8014334:	2101      	movs	r1, #1
 8014336:	0018      	movs	r0, r3
 8014338:	f7f2 fe1f 	bl	8006f7a <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //开启编码器中断
 801433c:	4b10      	ldr	r3, [pc, #64]	; (8014380 <Cursor_flash+0x1a4>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	68da      	ldr	r2, [r3, #12]
 8014342:	4b0f      	ldr	r3, [pc, #60]	; (8014380 <Cursor_flash+0x1a4>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2101      	movs	r1, #1
 8014348:	430a      	orrs	r2, r1
 801434a:	60da      	str	r2, [r3, #12]
}
 801434c:	46c0      	nop			; (mov r8, r8)
 801434e:	46bd      	mov	sp, r7
 8014350:	4b0e      	ldr	r3, [pc, #56]	; (801438c <Cursor_flash+0x1b0>)
 8014352:	449d      	add	sp, r3
 8014354:	bd90      	pop	{r4, r7, pc}
 8014356:	46c0      	nop			; (mov r8, r8)
 8014358:	fffff7f4 	.word	0xfffff7f4
 801435c:	fffff7fc 	.word	0xfffff7fc
 8014360:	00000808 	.word	0x00000808
 8014364:	000007fc 	.word	0x000007fc
 8014368:	20003a90 	.word	0x20003a90
 801436c:	2000398e 	.word	0x2000398e
 8014370:	00000807 	.word	0x00000807
 8014374:	20000600 	.word	0x20000600
 8014378:	00000806 	.word	0x00000806
 801437c:	20000620 	.word	0x20000620
 8014380:	2000347c 	.word	0x2000347c
 8014384:	50000800 	.word	0x50000800
 8014388:	200033c8 	.word	0x200033c8
 801438c:	0000080c 	.word	0x0000080c

08014390 <Cursor_flash_off>:

void Cursor_flash_off(void)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<64;i++)
 8014396:	1dfb      	adds	r3, r7, #7
 8014398:	2200      	movs	r2, #0
 801439a:	701a      	strb	r2, [r3, #0]
 801439c:	e00b      	b.n	80143b6 <Cursor_flash_off+0x26>
	{

		Write_Single_8x16AsicII(0,i,' ');
 801439e:	1dfb      	adds	r3, r7, #7
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	2220      	movs	r2, #32
 80143a4:	0019      	movs	r1, r3
 80143a6:	2000      	movs	r0, #0
 80143a8:	f7fe fa50 	bl	801284c <Write_Single_8x16AsicII>
	for(uint8_t i=0;i<64;i++)
 80143ac:	1dfb      	adds	r3, r7, #7
 80143ae:	781a      	ldrb	r2, [r3, #0]
 80143b0:	1dfb      	adds	r3, r7, #7
 80143b2:	3201      	adds	r2, #1
 80143b4:	701a      	strb	r2, [r3, #0]
 80143b6:	1dfb      	adds	r3, r7, #7
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	2b3f      	cmp	r3, #63	; 0x3f
 80143bc:	d9ef      	bls.n	801439e <Cursor_flash_off+0xe>

	}
	__HAL_TIM_DISABLE(&htim6);//cusor flash off
 80143be:	4b0c      	ldr	r3, [pc, #48]	; (80143f0 <Cursor_flash_off+0x60>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	6a1b      	ldr	r3, [r3, #32]
 80143c4:	4a0b      	ldr	r2, [pc, #44]	; (80143f4 <Cursor_flash_off+0x64>)
 80143c6:	4013      	ands	r3, r2
 80143c8:	d10d      	bne.n	80143e6 <Cursor_flash_off+0x56>
 80143ca:	4b09      	ldr	r3, [pc, #36]	; (80143f0 <Cursor_flash_off+0x60>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	6a1b      	ldr	r3, [r3, #32]
 80143d0:	4a09      	ldr	r2, [pc, #36]	; (80143f8 <Cursor_flash_off+0x68>)
 80143d2:	4013      	ands	r3, r2
 80143d4:	d107      	bne.n	80143e6 <Cursor_flash_off+0x56>
 80143d6:	4b06      	ldr	r3, [pc, #24]	; (80143f0 <Cursor_flash_off+0x60>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	4b04      	ldr	r3, [pc, #16]	; (80143f0 <Cursor_flash_off+0x60>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2101      	movs	r1, #1
 80143e2:	438a      	bics	r2, r1
 80143e4:	601a      	str	r2, [r3, #0]

}
 80143e6:	46c0      	nop			; (mov r8, r8)
 80143e8:	46bd      	mov	sp, r7
 80143ea:	b002      	add	sp, #8
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	46c0      	nop			; (mov r8, r8)
 80143f0:	200034c8 	.word	0x200034c8
 80143f4:	00001111 	.word	0x00001111
 80143f8:	00000444 	.word	0x00000444

080143fc <Cursor_flash_on>:

void Cursor_flash_on(void)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE(&htim6);//开启闪烁
 8014400:	4b05      	ldr	r3, [pc, #20]	; (8014418 <Cursor_flash_on+0x1c>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	4b04      	ldr	r3, [pc, #16]	; (8014418 <Cursor_flash_on+0x1c>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2101      	movs	r1, #1
 801440c:	430a      	orrs	r2, r1
 801440e:	601a      	str	r2, [r3, #0]
}
 8014410:	46c0      	nop			; (mov r8, r8)
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	46c0      	nop			; (mov r8, r8)
 8014418:	200034c8 	.word	0x200034c8

0801441c <Display_Interface>:
  * @brief  综合各个界面的显示函数
  * @param  需要显示的界面
  * @retval None
  */
void Display_Interface(void)
{
 801441c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801441e:	b087      	sub	sp, #28
 8014420:	af06      	add	r7, sp, #24
	if(Sleep_ON_OFF!=0xff) return;
 8014422:	4b59      	ldr	r3, [pc, #356]	; (8014588 <Display_Interface+0x16c>)
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2bff      	cmp	r3, #255	; 0xff
 8014428:	d000      	beq.n	801442c <Display_Interface+0x10>
 801442a:	e0a9      	b.n	8014580 <Display_Interface+0x164>
	if(Last_Interface.coordinates1!=xyz.coordinates1
 801442c:	4b57      	ldr	r3, [pc, #348]	; (801458c <Display_Interface+0x170>)
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	4b57      	ldr	r3, [pc, #348]	; (8014590 <Display_Interface+0x174>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	429a      	cmp	r2, r3
 8014436:	d10b      	bne.n	8014450 <Display_Interface+0x34>
	   ||Last_Interface.coordinates2!=xyz.coordinates2
 8014438:	4b54      	ldr	r3, [pc, #336]	; (801458c <Display_Interface+0x170>)
 801443a:	685a      	ldr	r2, [r3, #4]
 801443c:	4b54      	ldr	r3, [pc, #336]	; (8014590 <Display_Interface+0x174>)
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	429a      	cmp	r2, r3
 8014442:	d105      	bne.n	8014450 <Display_Interface+0x34>
	   ||Last_Interface.coordinates3!=xyz.coordinates3)
 8014444:	4b51      	ldr	r3, [pc, #324]	; (801458c <Display_Interface+0x170>)
 8014446:	689a      	ldr	r2, [r3, #8]
 8014448:	4b51      	ldr	r3, [pc, #324]	; (8014590 <Display_Interface+0x174>)
 801444a:	689b      	ldr	r3, [r3, #8]
 801444c:	429a      	cmp	r2, r3
 801444e:	d001      	beq.n	8014454 <Display_Interface+0x38>
	{
		Clear_Screen();
 8014450:	f7fe f9a6 	bl	80127a0 <Clear_Screen>

	}
	/*main interface*/
	if((xyz.coordinates1==0) && (xyz.coordinates2==0) && (xyz.coordinates3==0))
 8014454:	4b4e      	ldr	r3, [pc, #312]	; (8014590 <Display_Interface+0x174>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d124      	bne.n	80144a6 <Display_Interface+0x8a>
 801445c:	4b4c      	ldr	r3, [pc, #304]	; (8014590 <Display_Interface+0x174>)
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d120      	bne.n	80144a6 <Display_Interface+0x8a>
 8014464:	4b4a      	ldr	r3, [pc, #296]	; (8014590 <Display_Interface+0x174>)
 8014466:	689b      	ldr	r3, [r3, #8]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d11c      	bne.n	80144a6 <Display_Interface+0x8a>
	{
		Display_Main_Interface(Voltage_real,Current_real,ON_OFF,CV_CC_CP,CYCLE_NOT_CYCLE,DELAY_NOT_DELAY,Actual,LOCK_UNLOCK,Shift_Not_Shift);
 801446c:	4b49      	ldr	r3, [pc, #292]	; (8014594 <Display_Interface+0x178>)
 801446e:	681c      	ldr	r4, [r3, #0]
 8014470:	4b49      	ldr	r3, [pc, #292]	; (8014598 <Display_Interface+0x17c>)
 8014472:	681d      	ldr	r5, [r3, #0]
 8014474:	4b49      	ldr	r3, [pc, #292]	; (801459c <Display_Interface+0x180>)
 8014476:	781e      	ldrb	r6, [r3, #0]
 8014478:	4b49      	ldr	r3, [pc, #292]	; (80145a0 <Display_Interface+0x184>)
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	469c      	mov	ip, r3
 801447e:	4b49      	ldr	r3, [pc, #292]	; (80145a4 <Display_Interface+0x188>)
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	4a49      	ldr	r2, [pc, #292]	; (80145a8 <Display_Interface+0x18c>)
 8014484:	7812      	ldrb	r2, [r2, #0]
 8014486:	4949      	ldr	r1, [pc, #292]	; (80145ac <Display_Interface+0x190>)
 8014488:	7809      	ldrb	r1, [r1, #0]
 801448a:	4849      	ldr	r0, [pc, #292]	; (80145b0 <Display_Interface+0x194>)
 801448c:	7800      	ldrb	r0, [r0, #0]
 801448e:	9004      	str	r0, [sp, #16]
 8014490:	9103      	str	r1, [sp, #12]
 8014492:	2100      	movs	r1, #0
 8014494:	9102      	str	r1, [sp, #8]
 8014496:	9201      	str	r2, [sp, #4]
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	4663      	mov	r3, ip
 801449c:	0032      	movs	r2, r6
 801449e:	1c29      	adds	r1, r5, #0
 80144a0:	1c20      	adds	r0, r4, #0
 80144a2:	f7ff f827 	bl	80134f4 <Display_Main_Interface>
	}
	/*first menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates3==0))
 80144a6:	4b3a      	ldr	r3, [pc, #232]	; (8014590 <Display_Interface+0x174>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d108      	bne.n	80144c0 <Display_Interface+0xa4>
 80144ae:	4b38      	ldr	r3, [pc, #224]	; (8014590 <Display_Interface+0x174>)
 80144b0:	689b      	ldr	r3, [r3, #8]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d104      	bne.n	80144c0 <Display_Interface+0xa4>
	{
		Display_Menu_Function_Interface_First_Menu(xyz.coordinates2);
 80144b6:	4b36      	ldr	r3, [pc, #216]	; (8014590 <Display_Interface+0x174>)
 80144b8:	685b      	ldr	r3, [r3, #4]
 80144ba:	0018      	movs	r0, r3
 80144bc:	f7ff fa44 	bl	8013948 <Display_Menu_Function_Interface_First_Menu>
	}
	/*second menu*/
	if((xyz.coordinates1==1) && (xyz.coordinates2!=0) && (xyz.coordinates3!=0))
 80144c0:	4b33      	ldr	r3, [pc, #204]	; (8014590 <Display_Interface+0x174>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d10f      	bne.n	80144e8 <Display_Interface+0xcc>
 80144c8:	4b31      	ldr	r3, [pc, #196]	; (8014590 <Display_Interface+0x174>)
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d00b      	beq.n	80144e8 <Display_Interface+0xcc>
 80144d0:	4b2f      	ldr	r3, [pc, #188]	; (8014590 <Display_Interface+0x174>)
 80144d2:	689b      	ldr	r3, [r3, #8]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d007      	beq.n	80144e8 <Display_Interface+0xcc>
	{
		Display_Menu_Function_Interface_Second_Menu(xyz.coordinates2,xyz.coordinates3);
 80144d8:	4b2d      	ldr	r3, [pc, #180]	; (8014590 <Display_Interface+0x174>)
 80144da:	685a      	ldr	r2, [r3, #4]
 80144dc:	4b2c      	ldr	r3, [pc, #176]	; (8014590 <Display_Interface+0x174>)
 80144de:	689b      	ldr	r3, [r3, #8]
 80144e0:	0019      	movs	r1, r3
 80144e2:	0010      	movs	r0, r2
 80144e4:	f7ff fcd2 	bl	8013e8c <Display_Menu_Function_Interface_Second_Menu>
	}
	/*V_set I_set*/
	if(xyz.coordinates1==2)
 80144e8:	4b29      	ldr	r3, [pc, #164]	; (8014590 <Display_Interface+0x174>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2b02      	cmp	r3, #2
 80144ee:	d10c      	bne.n	801450a <Display_Interface+0xee>
	{
		if(xyz.coordinates2==1 ) 	 Display_Main_Interface_I_set();
 80144f0:	4b27      	ldr	r3, [pc, #156]	; (8014590 <Display_Interface+0x174>)
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d102      	bne.n	80144fe <Display_Interface+0xe2>
 80144f8:	f7fe feb8 	bl	801326c <Display_Main_Interface_I_set>
 80144fc:	e005      	b.n	801450a <Display_Interface+0xee>
		else if(xyz.coordinates2==2) Display_Main_Interface_V_set();
 80144fe:	4b24      	ldr	r3, [pc, #144]	; (8014590 <Display_Interface+0x174>)
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	2b02      	cmp	r3, #2
 8014504:	d101      	bne.n	801450a <Display_Interface+0xee>
 8014506:	f7fe fd67 	bl	8012fd8 <Display_Main_Interface_V_set>
	}
	/*Reacll Save*/
	if(xyz.coordinates1==3)
 801450a:	4b21      	ldr	r3, [pc, #132]	; (8014590 <Display_Interface+0x174>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b03      	cmp	r3, #3
 8014510:	d114      	bne.n	801453c <Display_Interface+0x120>
		if(xyz.coordinates3==0)
		{
			//Display_Access_Interface_default(Recall_Save,Recall_Save_Number);
		}
		//save
		if( (xyz.coordinates2==1) && (xyz.coordinates3!=0))
 8014512:	4b1f      	ldr	r3, [pc, #124]	; (8014590 <Display_Interface+0x174>)
 8014514:	685b      	ldr	r3, [r3, #4]
 8014516:	2b01      	cmp	r3, #1
 8014518:	d106      	bne.n	8014528 <Display_Interface+0x10c>
 801451a:	4b1d      	ldr	r3, [pc, #116]	; (8014590 <Display_Interface+0x174>)
 801451c:	689b      	ldr	r3, [r3, #8]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d002      	beq.n	8014528 <Display_Interface+0x10c>
		{
			Display_Access_Interface_Save();
 8014522:	f7ff f961 	bl	80137e8 <Display_Access_Interface_Save>
 8014526:	e009      	b.n	801453c <Display_Interface+0x120>
		}
		//recall
		else if( (xyz.coordinates2==2) && (xyz.coordinates3!=0))
 8014528:	4b19      	ldr	r3, [pc, #100]	; (8014590 <Display_Interface+0x174>)
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	2b02      	cmp	r3, #2
 801452e:	d105      	bne.n	801453c <Display_Interface+0x120>
 8014530:	4b17      	ldr	r3, [pc, #92]	; (8014590 <Display_Interface+0x174>)
 8014532:	689b      	ldr	r3, [r3, #8]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <Display_Interface+0x120>
		{
			Display_Access_Interface_Recall();
 8014538:	f7ff f99c 	bl	8013874 <Display_Access_Interface_Recall>
		}

	}
	/*Protect*/
	if(xyz.coordinates1==4)
 801453c:	4b14      	ldr	r3, [pc, #80]	; (8014590 <Display_Interface+0x174>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2b04      	cmp	r3, #4
 8014542:	d104      	bne.n	801454e <Display_Interface+0x132>
	{
		Display_Protect_Interface(Error);
 8014544:	4b1b      	ldr	r3, [pc, #108]	; (80145b4 <Display_Interface+0x198>)
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	0018      	movs	r0, r3
 801454a:	f7ff fcdf 	bl	8013f0c <Display_Protect_Interface>
	}
	/*advance interface*/
	if((xyz.coordinates1==9) && (xyz.coordinates2==9) && (xyz.coordinates3==9))
 801454e:	4b10      	ldr	r3, [pc, #64]	; (8014590 <Display_Interface+0x174>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	2b09      	cmp	r3, #9
 8014554:	d10f      	bne.n	8014576 <Display_Interface+0x15a>
 8014556:	4b0e      	ldr	r3, [pc, #56]	; (8014590 <Display_Interface+0x174>)
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	2b09      	cmp	r3, #9
 801455c:	d10b      	bne.n	8014576 <Display_Interface+0x15a>
 801455e:	4b0c      	ldr	r3, [pc, #48]	; (8014590 <Display_Interface+0x174>)
 8014560:	689b      	ldr	r3, [r3, #8]
 8014562:	2b09      	cmp	r3, #9
 8014564:	d107      	bne.n	8014576 <Display_Interface+0x15a>
	{
		Display_Param_Interface(Set_Voltage,Set_Current);
 8014566:	4b14      	ldr	r3, [pc, #80]	; (80145b8 <Display_Interface+0x19c>)
 8014568:	881a      	ldrh	r2, [r3, #0]
 801456a:	4b14      	ldr	r3, [pc, #80]	; (80145bc <Display_Interface+0x1a0>)
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	0019      	movs	r1, r3
 8014570:	0010      	movs	r0, r2
 8014572:	f7fe fffd 	bl	8013570 <Display_Param_Interface>
	}

	Last_Interface=xyz;//记录退出前界面
 8014576:	4b05      	ldr	r3, [pc, #20]	; (801458c <Display_Interface+0x170>)
 8014578:	4a05      	ldr	r2, [pc, #20]	; (8014590 <Display_Interface+0x174>)
 801457a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801457c:	c313      	stmia	r3!, {r0, r1, r4}
 801457e:	e000      	b.n	8014582 <Display_Interface+0x166>
	if(Sleep_ON_OFF!=0xff) return;
 8014580:	46c0      	nop			; (mov r8, r8)

}
 8014582:	46bd      	mov	sp, r7
 8014584:	b001      	add	sp, #4
 8014586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014588:	20002fd3 	.word	0x20002fd3
 801458c:	20003a04 	.word	0x20003a04
 8014590:	200039f8 	.word	0x200039f8
 8014594:	200039f0 	.word	0x200039f0
 8014598:	200039f4 	.word	0x200039f4
 801459c:	20003988 	.word	0x20003988
 80145a0:	2000398a 	.word	0x2000398a
 80145a4:	20002fd0 	.word	0x20002fd0
 80145a8:	20002fd1 	.word	0x20002fd1
 80145ac:	2000398b 	.word	0x2000398b
 80145b0:	20003987 	.word	0x20003987
 80145b4:	200039d9 	.word	0x200039d9
 80145b8:	20002fda 	.word	0x20002fda
 80145bc:	20002fdc 	.word	0x20002fdc

080145c0 <__errno>:
 80145c0:	4b01      	ldr	r3, [pc, #4]	; (80145c8 <__errno+0x8>)
 80145c2:	6818      	ldr	r0, [r3, #0]
 80145c4:	4770      	bx	lr
 80145c6:	46c0      	nop			; (mov r8, r8)
 80145c8:	200030dc 	.word	0x200030dc

080145cc <__libc_init_array>:
 80145cc:	b570      	push	{r4, r5, r6, lr}
 80145ce:	2600      	movs	r6, #0
 80145d0:	4d0c      	ldr	r5, [pc, #48]	; (8014604 <__libc_init_array+0x38>)
 80145d2:	4c0d      	ldr	r4, [pc, #52]	; (8014608 <__libc_init_array+0x3c>)
 80145d4:	1b64      	subs	r4, r4, r5
 80145d6:	10a4      	asrs	r4, r4, #2
 80145d8:	42a6      	cmp	r6, r4
 80145da:	d109      	bne.n	80145f0 <__libc_init_array+0x24>
 80145dc:	2600      	movs	r6, #0
 80145de:	f003 fe99 	bl	8018314 <_init>
 80145e2:	4d0a      	ldr	r5, [pc, #40]	; (801460c <__libc_init_array+0x40>)
 80145e4:	4c0a      	ldr	r4, [pc, #40]	; (8014610 <__libc_init_array+0x44>)
 80145e6:	1b64      	subs	r4, r4, r5
 80145e8:	10a4      	asrs	r4, r4, #2
 80145ea:	42a6      	cmp	r6, r4
 80145ec:	d105      	bne.n	80145fa <__libc_init_array+0x2e>
 80145ee:	bd70      	pop	{r4, r5, r6, pc}
 80145f0:	00b3      	lsls	r3, r6, #2
 80145f2:	58eb      	ldr	r3, [r5, r3]
 80145f4:	4798      	blx	r3
 80145f6:	3601      	adds	r6, #1
 80145f8:	e7ee      	b.n	80145d8 <__libc_init_array+0xc>
 80145fa:	00b3      	lsls	r3, r6, #2
 80145fc:	58eb      	ldr	r3, [r5, r3]
 80145fe:	4798      	blx	r3
 8014600:	3601      	adds	r6, #1
 8014602:	e7f2      	b.n	80145ea <__libc_init_array+0x1e>
 8014604:	08018e18 	.word	0x08018e18
 8014608:	08018e18 	.word	0x08018e18
 801460c:	08018e18 	.word	0x08018e18
 8014610:	08018e1c 	.word	0x08018e1c

08014614 <malloc>:
 8014614:	b510      	push	{r4, lr}
 8014616:	4b03      	ldr	r3, [pc, #12]	; (8014624 <malloc+0x10>)
 8014618:	0001      	movs	r1, r0
 801461a:	6818      	ldr	r0, [r3, #0]
 801461c:	f000 f882 	bl	8014724 <_malloc_r>
 8014620:	bd10      	pop	{r4, pc}
 8014622:	46c0      	nop			; (mov r8, r8)
 8014624:	200030dc 	.word	0x200030dc

08014628 <memcpy>:
 8014628:	2300      	movs	r3, #0
 801462a:	b510      	push	{r4, lr}
 801462c:	429a      	cmp	r2, r3
 801462e:	d100      	bne.n	8014632 <memcpy+0xa>
 8014630:	bd10      	pop	{r4, pc}
 8014632:	5ccc      	ldrb	r4, [r1, r3]
 8014634:	54c4      	strb	r4, [r0, r3]
 8014636:	3301      	adds	r3, #1
 8014638:	e7f8      	b.n	801462c <memcpy+0x4>

0801463a <memset>:
 801463a:	0003      	movs	r3, r0
 801463c:	1882      	adds	r2, r0, r2
 801463e:	4293      	cmp	r3, r2
 8014640:	d100      	bne.n	8014644 <memset+0xa>
 8014642:	4770      	bx	lr
 8014644:	7019      	strb	r1, [r3, #0]
 8014646:	3301      	adds	r3, #1
 8014648:	e7f9      	b.n	801463e <memset+0x4>
	...

0801464c <_free_r>:
 801464c:	b570      	push	{r4, r5, r6, lr}
 801464e:	0005      	movs	r5, r0
 8014650:	2900      	cmp	r1, #0
 8014652:	d010      	beq.n	8014676 <_free_r+0x2a>
 8014654:	1f0c      	subs	r4, r1, #4
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	da00      	bge.n	801465e <_free_r+0x12>
 801465c:	18e4      	adds	r4, r4, r3
 801465e:	0028      	movs	r0, r5
 8014660:	f001 fc2c 	bl	8015ebc <__malloc_lock>
 8014664:	4a1d      	ldr	r2, [pc, #116]	; (80146dc <_free_r+0x90>)
 8014666:	6813      	ldr	r3, [r2, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d105      	bne.n	8014678 <_free_r+0x2c>
 801466c:	6063      	str	r3, [r4, #4]
 801466e:	6014      	str	r4, [r2, #0]
 8014670:	0028      	movs	r0, r5
 8014672:	f001 fc2b 	bl	8015ecc <__malloc_unlock>
 8014676:	bd70      	pop	{r4, r5, r6, pc}
 8014678:	42a3      	cmp	r3, r4
 801467a:	d908      	bls.n	801468e <_free_r+0x42>
 801467c:	6821      	ldr	r1, [r4, #0]
 801467e:	1860      	adds	r0, r4, r1
 8014680:	4283      	cmp	r3, r0
 8014682:	d1f3      	bne.n	801466c <_free_r+0x20>
 8014684:	6818      	ldr	r0, [r3, #0]
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	1841      	adds	r1, r0, r1
 801468a:	6021      	str	r1, [r4, #0]
 801468c:	e7ee      	b.n	801466c <_free_r+0x20>
 801468e:	001a      	movs	r2, r3
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d001      	beq.n	801469a <_free_r+0x4e>
 8014696:	42a3      	cmp	r3, r4
 8014698:	d9f9      	bls.n	801468e <_free_r+0x42>
 801469a:	6811      	ldr	r1, [r2, #0]
 801469c:	1850      	adds	r0, r2, r1
 801469e:	42a0      	cmp	r0, r4
 80146a0:	d10b      	bne.n	80146ba <_free_r+0x6e>
 80146a2:	6820      	ldr	r0, [r4, #0]
 80146a4:	1809      	adds	r1, r1, r0
 80146a6:	1850      	adds	r0, r2, r1
 80146a8:	6011      	str	r1, [r2, #0]
 80146aa:	4283      	cmp	r3, r0
 80146ac:	d1e0      	bne.n	8014670 <_free_r+0x24>
 80146ae:	6818      	ldr	r0, [r3, #0]
 80146b0:	685b      	ldr	r3, [r3, #4]
 80146b2:	1841      	adds	r1, r0, r1
 80146b4:	6011      	str	r1, [r2, #0]
 80146b6:	6053      	str	r3, [r2, #4]
 80146b8:	e7da      	b.n	8014670 <_free_r+0x24>
 80146ba:	42a0      	cmp	r0, r4
 80146bc:	d902      	bls.n	80146c4 <_free_r+0x78>
 80146be:	230c      	movs	r3, #12
 80146c0:	602b      	str	r3, [r5, #0]
 80146c2:	e7d5      	b.n	8014670 <_free_r+0x24>
 80146c4:	6821      	ldr	r1, [r4, #0]
 80146c6:	1860      	adds	r0, r4, r1
 80146c8:	4283      	cmp	r3, r0
 80146ca:	d103      	bne.n	80146d4 <_free_r+0x88>
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	1841      	adds	r1, r0, r1
 80146d2:	6021      	str	r1, [r4, #0]
 80146d4:	6063      	str	r3, [r4, #4]
 80146d6:	6054      	str	r4, [r2, #4]
 80146d8:	e7ca      	b.n	8014670 <_free_r+0x24>
 80146da:	46c0      	nop			; (mov r8, r8)
 80146dc:	20003a94 	.word	0x20003a94

080146e0 <sbrk_aligned>:
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	4e0f      	ldr	r6, [pc, #60]	; (8014720 <sbrk_aligned+0x40>)
 80146e4:	000d      	movs	r5, r1
 80146e6:	6831      	ldr	r1, [r6, #0]
 80146e8:	0004      	movs	r4, r0
 80146ea:	2900      	cmp	r1, #0
 80146ec:	d102      	bne.n	80146f4 <sbrk_aligned+0x14>
 80146ee:	f000 fcfd 	bl	80150ec <_sbrk_r>
 80146f2:	6030      	str	r0, [r6, #0]
 80146f4:	0029      	movs	r1, r5
 80146f6:	0020      	movs	r0, r4
 80146f8:	f000 fcf8 	bl	80150ec <_sbrk_r>
 80146fc:	1c43      	adds	r3, r0, #1
 80146fe:	d00a      	beq.n	8014716 <sbrk_aligned+0x36>
 8014700:	2303      	movs	r3, #3
 8014702:	1cc5      	adds	r5, r0, #3
 8014704:	439d      	bics	r5, r3
 8014706:	42a8      	cmp	r0, r5
 8014708:	d007      	beq.n	801471a <sbrk_aligned+0x3a>
 801470a:	1a29      	subs	r1, r5, r0
 801470c:	0020      	movs	r0, r4
 801470e:	f000 fced 	bl	80150ec <_sbrk_r>
 8014712:	1c43      	adds	r3, r0, #1
 8014714:	d101      	bne.n	801471a <sbrk_aligned+0x3a>
 8014716:	2501      	movs	r5, #1
 8014718:	426d      	negs	r5, r5
 801471a:	0028      	movs	r0, r5
 801471c:	bd70      	pop	{r4, r5, r6, pc}
 801471e:	46c0      	nop			; (mov r8, r8)
 8014720:	20003a98 	.word	0x20003a98

08014724 <_malloc_r>:
 8014724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014726:	2203      	movs	r2, #3
 8014728:	1ccb      	adds	r3, r1, #3
 801472a:	4393      	bics	r3, r2
 801472c:	3308      	adds	r3, #8
 801472e:	0006      	movs	r6, r0
 8014730:	001f      	movs	r7, r3
 8014732:	2b0c      	cmp	r3, #12
 8014734:	d232      	bcs.n	801479c <_malloc_r+0x78>
 8014736:	270c      	movs	r7, #12
 8014738:	42b9      	cmp	r1, r7
 801473a:	d831      	bhi.n	80147a0 <_malloc_r+0x7c>
 801473c:	0030      	movs	r0, r6
 801473e:	f001 fbbd 	bl	8015ebc <__malloc_lock>
 8014742:	4d32      	ldr	r5, [pc, #200]	; (801480c <_malloc_r+0xe8>)
 8014744:	682b      	ldr	r3, [r5, #0]
 8014746:	001c      	movs	r4, r3
 8014748:	2c00      	cmp	r4, #0
 801474a:	d12e      	bne.n	80147aa <_malloc_r+0x86>
 801474c:	0039      	movs	r1, r7
 801474e:	0030      	movs	r0, r6
 8014750:	f7ff ffc6 	bl	80146e0 <sbrk_aligned>
 8014754:	0004      	movs	r4, r0
 8014756:	1c43      	adds	r3, r0, #1
 8014758:	d11e      	bne.n	8014798 <_malloc_r+0x74>
 801475a:	682c      	ldr	r4, [r5, #0]
 801475c:	0025      	movs	r5, r4
 801475e:	2d00      	cmp	r5, #0
 8014760:	d14a      	bne.n	80147f8 <_malloc_r+0xd4>
 8014762:	6823      	ldr	r3, [r4, #0]
 8014764:	0029      	movs	r1, r5
 8014766:	18e3      	adds	r3, r4, r3
 8014768:	0030      	movs	r0, r6
 801476a:	9301      	str	r3, [sp, #4]
 801476c:	f000 fcbe 	bl	80150ec <_sbrk_r>
 8014770:	9b01      	ldr	r3, [sp, #4]
 8014772:	4283      	cmp	r3, r0
 8014774:	d143      	bne.n	80147fe <_malloc_r+0xda>
 8014776:	6823      	ldr	r3, [r4, #0]
 8014778:	3703      	adds	r7, #3
 801477a:	1aff      	subs	r7, r7, r3
 801477c:	2303      	movs	r3, #3
 801477e:	439f      	bics	r7, r3
 8014780:	3708      	adds	r7, #8
 8014782:	2f0c      	cmp	r7, #12
 8014784:	d200      	bcs.n	8014788 <_malloc_r+0x64>
 8014786:	270c      	movs	r7, #12
 8014788:	0039      	movs	r1, r7
 801478a:	0030      	movs	r0, r6
 801478c:	f7ff ffa8 	bl	80146e0 <sbrk_aligned>
 8014790:	1c43      	adds	r3, r0, #1
 8014792:	d034      	beq.n	80147fe <_malloc_r+0xda>
 8014794:	6823      	ldr	r3, [r4, #0]
 8014796:	19df      	adds	r7, r3, r7
 8014798:	6027      	str	r7, [r4, #0]
 801479a:	e013      	b.n	80147c4 <_malloc_r+0xa0>
 801479c:	2b00      	cmp	r3, #0
 801479e:	dacb      	bge.n	8014738 <_malloc_r+0x14>
 80147a0:	230c      	movs	r3, #12
 80147a2:	2500      	movs	r5, #0
 80147a4:	6033      	str	r3, [r6, #0]
 80147a6:	0028      	movs	r0, r5
 80147a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80147aa:	6822      	ldr	r2, [r4, #0]
 80147ac:	1bd1      	subs	r1, r2, r7
 80147ae:	d420      	bmi.n	80147f2 <_malloc_r+0xce>
 80147b0:	290b      	cmp	r1, #11
 80147b2:	d917      	bls.n	80147e4 <_malloc_r+0xc0>
 80147b4:	19e2      	adds	r2, r4, r7
 80147b6:	6027      	str	r7, [r4, #0]
 80147b8:	42a3      	cmp	r3, r4
 80147ba:	d111      	bne.n	80147e0 <_malloc_r+0xbc>
 80147bc:	602a      	str	r2, [r5, #0]
 80147be:	6863      	ldr	r3, [r4, #4]
 80147c0:	6011      	str	r1, [r2, #0]
 80147c2:	6053      	str	r3, [r2, #4]
 80147c4:	0030      	movs	r0, r6
 80147c6:	0025      	movs	r5, r4
 80147c8:	f001 fb80 	bl	8015ecc <__malloc_unlock>
 80147cc:	2207      	movs	r2, #7
 80147ce:	350b      	adds	r5, #11
 80147d0:	1d23      	adds	r3, r4, #4
 80147d2:	4395      	bics	r5, r2
 80147d4:	1aea      	subs	r2, r5, r3
 80147d6:	429d      	cmp	r5, r3
 80147d8:	d0e5      	beq.n	80147a6 <_malloc_r+0x82>
 80147da:	1b5b      	subs	r3, r3, r5
 80147dc:	50a3      	str	r3, [r4, r2]
 80147de:	e7e2      	b.n	80147a6 <_malloc_r+0x82>
 80147e0:	605a      	str	r2, [r3, #4]
 80147e2:	e7ec      	b.n	80147be <_malloc_r+0x9a>
 80147e4:	6862      	ldr	r2, [r4, #4]
 80147e6:	42a3      	cmp	r3, r4
 80147e8:	d101      	bne.n	80147ee <_malloc_r+0xca>
 80147ea:	602a      	str	r2, [r5, #0]
 80147ec:	e7ea      	b.n	80147c4 <_malloc_r+0xa0>
 80147ee:	605a      	str	r2, [r3, #4]
 80147f0:	e7e8      	b.n	80147c4 <_malloc_r+0xa0>
 80147f2:	0023      	movs	r3, r4
 80147f4:	6864      	ldr	r4, [r4, #4]
 80147f6:	e7a7      	b.n	8014748 <_malloc_r+0x24>
 80147f8:	002c      	movs	r4, r5
 80147fa:	686d      	ldr	r5, [r5, #4]
 80147fc:	e7af      	b.n	801475e <_malloc_r+0x3a>
 80147fe:	230c      	movs	r3, #12
 8014800:	0030      	movs	r0, r6
 8014802:	6033      	str	r3, [r6, #0]
 8014804:	f001 fb62 	bl	8015ecc <__malloc_unlock>
 8014808:	e7cd      	b.n	80147a6 <_malloc_r+0x82>
 801480a:	46c0      	nop			; (mov r8, r8)
 801480c:	20003a94 	.word	0x20003a94

08014810 <__cvt>:
 8014810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014812:	001e      	movs	r6, r3
 8014814:	2300      	movs	r3, #0
 8014816:	0014      	movs	r4, r2
 8014818:	b08b      	sub	sp, #44	; 0x2c
 801481a:	429e      	cmp	r6, r3
 801481c:	da04      	bge.n	8014828 <__cvt+0x18>
 801481e:	2180      	movs	r1, #128	; 0x80
 8014820:	0609      	lsls	r1, r1, #24
 8014822:	1873      	adds	r3, r6, r1
 8014824:	001e      	movs	r6, r3
 8014826:	232d      	movs	r3, #45	; 0x2d
 8014828:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801482a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801482c:	7013      	strb	r3, [r2, #0]
 801482e:	2320      	movs	r3, #32
 8014830:	2203      	movs	r2, #3
 8014832:	439f      	bics	r7, r3
 8014834:	2f46      	cmp	r7, #70	; 0x46
 8014836:	d007      	beq.n	8014848 <__cvt+0x38>
 8014838:	003b      	movs	r3, r7
 801483a:	3b45      	subs	r3, #69	; 0x45
 801483c:	4259      	negs	r1, r3
 801483e:	414b      	adcs	r3, r1
 8014840:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014842:	3a01      	subs	r2, #1
 8014844:	18cb      	adds	r3, r1, r3
 8014846:	9310      	str	r3, [sp, #64]	; 0x40
 8014848:	ab09      	add	r3, sp, #36	; 0x24
 801484a:	9304      	str	r3, [sp, #16]
 801484c:	ab08      	add	r3, sp, #32
 801484e:	9303      	str	r3, [sp, #12]
 8014850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014852:	9200      	str	r2, [sp, #0]
 8014854:	9302      	str	r3, [sp, #8]
 8014856:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014858:	0022      	movs	r2, r4
 801485a:	9301      	str	r3, [sp, #4]
 801485c:	0033      	movs	r3, r6
 801485e:	f000 fd03 	bl	8015268 <_dtoa_r>
 8014862:	0005      	movs	r5, r0
 8014864:	2f47      	cmp	r7, #71	; 0x47
 8014866:	d102      	bne.n	801486e <__cvt+0x5e>
 8014868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801486a:	07db      	lsls	r3, r3, #31
 801486c:	d528      	bpl.n	80148c0 <__cvt+0xb0>
 801486e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014870:	18eb      	adds	r3, r5, r3
 8014872:	9307      	str	r3, [sp, #28]
 8014874:	2f46      	cmp	r7, #70	; 0x46
 8014876:	d114      	bne.n	80148a2 <__cvt+0x92>
 8014878:	782b      	ldrb	r3, [r5, #0]
 801487a:	2b30      	cmp	r3, #48	; 0x30
 801487c:	d10c      	bne.n	8014898 <__cvt+0x88>
 801487e:	2200      	movs	r2, #0
 8014880:	2300      	movs	r3, #0
 8014882:	0020      	movs	r0, r4
 8014884:	0031      	movs	r1, r6
 8014886:	f7eb fde7 	bl	8000458 <__aeabi_dcmpeq>
 801488a:	2800      	cmp	r0, #0
 801488c:	d104      	bne.n	8014898 <__cvt+0x88>
 801488e:	2301      	movs	r3, #1
 8014890:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014892:	1a9b      	subs	r3, r3, r2
 8014894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014896:	6013      	str	r3, [r2, #0]
 8014898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801489a:	9a07      	ldr	r2, [sp, #28]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	18d3      	adds	r3, r2, r3
 80148a0:	9307      	str	r3, [sp, #28]
 80148a2:	2200      	movs	r2, #0
 80148a4:	2300      	movs	r3, #0
 80148a6:	0020      	movs	r0, r4
 80148a8:	0031      	movs	r1, r6
 80148aa:	f7eb fdd5 	bl	8000458 <__aeabi_dcmpeq>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d001      	beq.n	80148b6 <__cvt+0xa6>
 80148b2:	9b07      	ldr	r3, [sp, #28]
 80148b4:	9309      	str	r3, [sp, #36]	; 0x24
 80148b6:	2230      	movs	r2, #48	; 0x30
 80148b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148ba:	9907      	ldr	r1, [sp, #28]
 80148bc:	428b      	cmp	r3, r1
 80148be:	d306      	bcc.n	80148ce <__cvt+0xbe>
 80148c0:	0028      	movs	r0, r5
 80148c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80148c6:	1b5b      	subs	r3, r3, r5
 80148c8:	6013      	str	r3, [r2, #0]
 80148ca:	b00b      	add	sp, #44	; 0x2c
 80148cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ce:	1c59      	adds	r1, r3, #1
 80148d0:	9109      	str	r1, [sp, #36]	; 0x24
 80148d2:	701a      	strb	r2, [r3, #0]
 80148d4:	e7f0      	b.n	80148b8 <__cvt+0xa8>

080148d6 <__exponent>:
 80148d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148d8:	1c83      	adds	r3, r0, #2
 80148da:	b087      	sub	sp, #28
 80148dc:	9303      	str	r3, [sp, #12]
 80148de:	0005      	movs	r5, r0
 80148e0:	000c      	movs	r4, r1
 80148e2:	232b      	movs	r3, #43	; 0x2b
 80148e4:	7002      	strb	r2, [r0, #0]
 80148e6:	2900      	cmp	r1, #0
 80148e8:	da01      	bge.n	80148ee <__exponent+0x18>
 80148ea:	424c      	negs	r4, r1
 80148ec:	3302      	adds	r3, #2
 80148ee:	706b      	strb	r3, [r5, #1]
 80148f0:	2c09      	cmp	r4, #9
 80148f2:	dd31      	ble.n	8014958 <__exponent+0x82>
 80148f4:	270a      	movs	r7, #10
 80148f6:	ab04      	add	r3, sp, #16
 80148f8:	1dde      	adds	r6, r3, #7
 80148fa:	0020      	movs	r0, r4
 80148fc:	0039      	movs	r1, r7
 80148fe:	9601      	str	r6, [sp, #4]
 8014900:	f7eb fd94 	bl	800042c <__aeabi_idivmod>
 8014904:	3e01      	subs	r6, #1
 8014906:	3130      	adds	r1, #48	; 0x30
 8014908:	0020      	movs	r0, r4
 801490a:	7031      	strb	r1, [r6, #0]
 801490c:	0039      	movs	r1, r7
 801490e:	9402      	str	r4, [sp, #8]
 8014910:	f7eb fca6 	bl	8000260 <__divsi3>
 8014914:	9b02      	ldr	r3, [sp, #8]
 8014916:	0004      	movs	r4, r0
 8014918:	2b63      	cmp	r3, #99	; 0x63
 801491a:	dcee      	bgt.n	80148fa <__exponent+0x24>
 801491c:	9b01      	ldr	r3, [sp, #4]
 801491e:	3430      	adds	r4, #48	; 0x30
 8014920:	1e9a      	subs	r2, r3, #2
 8014922:	0013      	movs	r3, r2
 8014924:	9903      	ldr	r1, [sp, #12]
 8014926:	7014      	strb	r4, [r2, #0]
 8014928:	a804      	add	r0, sp, #16
 801492a:	3007      	adds	r0, #7
 801492c:	4298      	cmp	r0, r3
 801492e:	d80e      	bhi.n	801494e <__exponent+0x78>
 8014930:	ab04      	add	r3, sp, #16
 8014932:	3307      	adds	r3, #7
 8014934:	2000      	movs	r0, #0
 8014936:	429a      	cmp	r2, r3
 8014938:	d804      	bhi.n	8014944 <__exponent+0x6e>
 801493a:	ab04      	add	r3, sp, #16
 801493c:	3009      	adds	r0, #9
 801493e:	18c0      	adds	r0, r0, r3
 8014940:	9b01      	ldr	r3, [sp, #4]
 8014942:	1ac0      	subs	r0, r0, r3
 8014944:	9b03      	ldr	r3, [sp, #12]
 8014946:	1818      	adds	r0, r3, r0
 8014948:	1b40      	subs	r0, r0, r5
 801494a:	b007      	add	sp, #28
 801494c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801494e:	7818      	ldrb	r0, [r3, #0]
 8014950:	3301      	adds	r3, #1
 8014952:	7008      	strb	r0, [r1, #0]
 8014954:	3101      	adds	r1, #1
 8014956:	e7e7      	b.n	8014928 <__exponent+0x52>
 8014958:	2330      	movs	r3, #48	; 0x30
 801495a:	18e4      	adds	r4, r4, r3
 801495c:	70ab      	strb	r3, [r5, #2]
 801495e:	1d28      	adds	r0, r5, #4
 8014960:	70ec      	strb	r4, [r5, #3]
 8014962:	e7f1      	b.n	8014948 <__exponent+0x72>

08014964 <_printf_float>:
 8014964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014966:	b095      	sub	sp, #84	; 0x54
 8014968:	000c      	movs	r4, r1
 801496a:	9209      	str	r2, [sp, #36]	; 0x24
 801496c:	001e      	movs	r6, r3
 801496e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014970:	0007      	movs	r7, r0
 8014972:	f001 fa93 	bl	8015e9c <_localeconv_r>
 8014976:	6803      	ldr	r3, [r0, #0]
 8014978:	0018      	movs	r0, r3
 801497a:	930c      	str	r3, [sp, #48]	; 0x30
 801497c:	f7eb fbca 	bl	8000114 <strlen>
 8014980:	2300      	movs	r3, #0
 8014982:	9312      	str	r3, [sp, #72]	; 0x48
 8014984:	7e23      	ldrb	r3, [r4, #24]
 8014986:	2207      	movs	r2, #7
 8014988:	930a      	str	r3, [sp, #40]	; 0x28
 801498a:	6823      	ldr	r3, [r4, #0]
 801498c:	900e      	str	r0, [sp, #56]	; 0x38
 801498e:	930d      	str	r3, [sp, #52]	; 0x34
 8014990:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014992:	682b      	ldr	r3, [r5, #0]
 8014994:	05c9      	lsls	r1, r1, #23
 8014996:	d547      	bpl.n	8014a28 <_printf_float+0xc4>
 8014998:	189b      	adds	r3, r3, r2
 801499a:	4393      	bics	r3, r2
 801499c:	001a      	movs	r2, r3
 801499e:	3208      	adds	r2, #8
 80149a0:	602a      	str	r2, [r5, #0]
 80149a2:	681a      	ldr	r2, [r3, #0]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	64a2      	str	r2, [r4, #72]	; 0x48
 80149a8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80149aa:	2201      	movs	r2, #1
 80149ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80149ae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80149b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80149b2:	006b      	lsls	r3, r5, #1
 80149b4:	085b      	lsrs	r3, r3, #1
 80149b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80149b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80149ba:	4ba7      	ldr	r3, [pc, #668]	; (8014c58 <_printf_float+0x2f4>)
 80149bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80149be:	4252      	negs	r2, r2
 80149c0:	f7ee f9cc 	bl	8002d5c <__aeabi_dcmpun>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	d131      	bne.n	8014a2c <_printf_float+0xc8>
 80149c8:	2201      	movs	r2, #1
 80149ca:	4ba3      	ldr	r3, [pc, #652]	; (8014c58 <_printf_float+0x2f4>)
 80149cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80149ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80149d0:	4252      	negs	r2, r2
 80149d2:	f7eb fd51 	bl	8000478 <__aeabi_dcmple>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	d128      	bne.n	8014a2c <_printf_float+0xc8>
 80149da:	2200      	movs	r2, #0
 80149dc:	2300      	movs	r3, #0
 80149de:	0029      	movs	r1, r5
 80149e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80149e2:	f7eb fd3f 	bl	8000464 <__aeabi_dcmplt>
 80149e6:	2800      	cmp	r0, #0
 80149e8:	d003      	beq.n	80149f2 <_printf_float+0x8e>
 80149ea:	0023      	movs	r3, r4
 80149ec:	222d      	movs	r2, #45	; 0x2d
 80149ee:	3343      	adds	r3, #67	; 0x43
 80149f0:	701a      	strb	r2, [r3, #0]
 80149f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149f4:	4d99      	ldr	r5, [pc, #612]	; (8014c5c <_printf_float+0x2f8>)
 80149f6:	2b47      	cmp	r3, #71	; 0x47
 80149f8:	d900      	bls.n	80149fc <_printf_float+0x98>
 80149fa:	4d99      	ldr	r5, [pc, #612]	; (8014c60 <_printf_float+0x2fc>)
 80149fc:	2303      	movs	r3, #3
 80149fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a00:	6123      	str	r3, [r4, #16]
 8014a02:	3301      	adds	r3, #1
 8014a04:	439a      	bics	r2, r3
 8014a06:	2300      	movs	r3, #0
 8014a08:	6022      	str	r2, [r4, #0]
 8014a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a0e:	0021      	movs	r1, r4
 8014a10:	0038      	movs	r0, r7
 8014a12:	9600      	str	r6, [sp, #0]
 8014a14:	aa13      	add	r2, sp, #76	; 0x4c
 8014a16:	f000 f9e7 	bl	8014de8 <_printf_common>
 8014a1a:	1c43      	adds	r3, r0, #1
 8014a1c:	d000      	beq.n	8014a20 <_printf_float+0xbc>
 8014a1e:	e0a2      	b.n	8014b66 <_printf_float+0x202>
 8014a20:	2001      	movs	r0, #1
 8014a22:	4240      	negs	r0, r0
 8014a24:	b015      	add	sp, #84	; 0x54
 8014a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a28:	3307      	adds	r3, #7
 8014a2a:	e7b6      	b.n	801499a <_printf_float+0x36>
 8014a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a2e:	002b      	movs	r3, r5
 8014a30:	0010      	movs	r0, r2
 8014a32:	0029      	movs	r1, r5
 8014a34:	f7ee f992 	bl	8002d5c <__aeabi_dcmpun>
 8014a38:	2800      	cmp	r0, #0
 8014a3a:	d00b      	beq.n	8014a54 <_printf_float+0xf0>
 8014a3c:	2d00      	cmp	r5, #0
 8014a3e:	da03      	bge.n	8014a48 <_printf_float+0xe4>
 8014a40:	0023      	movs	r3, r4
 8014a42:	222d      	movs	r2, #45	; 0x2d
 8014a44:	3343      	adds	r3, #67	; 0x43
 8014a46:	701a      	strb	r2, [r3, #0]
 8014a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a4a:	4d86      	ldr	r5, [pc, #536]	; (8014c64 <_printf_float+0x300>)
 8014a4c:	2b47      	cmp	r3, #71	; 0x47
 8014a4e:	d9d5      	bls.n	80149fc <_printf_float+0x98>
 8014a50:	4d85      	ldr	r5, [pc, #532]	; (8014c68 <_printf_float+0x304>)
 8014a52:	e7d3      	b.n	80149fc <_printf_float+0x98>
 8014a54:	2220      	movs	r2, #32
 8014a56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014a58:	6863      	ldr	r3, [r4, #4]
 8014a5a:	4391      	bics	r1, r2
 8014a5c:	910f      	str	r1, [sp, #60]	; 0x3c
 8014a5e:	1c5a      	adds	r2, r3, #1
 8014a60:	d149      	bne.n	8014af6 <_printf_float+0x192>
 8014a62:	3307      	adds	r3, #7
 8014a64:	6063      	str	r3, [r4, #4]
 8014a66:	2380      	movs	r3, #128	; 0x80
 8014a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a6a:	00db      	lsls	r3, r3, #3
 8014a6c:	4313      	orrs	r3, r2
 8014a6e:	2200      	movs	r2, #0
 8014a70:	9206      	str	r2, [sp, #24]
 8014a72:	aa12      	add	r2, sp, #72	; 0x48
 8014a74:	9205      	str	r2, [sp, #20]
 8014a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a78:	a908      	add	r1, sp, #32
 8014a7a:	9204      	str	r2, [sp, #16]
 8014a7c:	aa11      	add	r2, sp, #68	; 0x44
 8014a7e:	9203      	str	r2, [sp, #12]
 8014a80:	2223      	movs	r2, #35	; 0x23
 8014a82:	6023      	str	r3, [r4, #0]
 8014a84:	9301      	str	r3, [sp, #4]
 8014a86:	6863      	ldr	r3, [r4, #4]
 8014a88:	1852      	adds	r2, r2, r1
 8014a8a:	9202      	str	r2, [sp, #8]
 8014a8c:	9300      	str	r3, [sp, #0]
 8014a8e:	0038      	movs	r0, r7
 8014a90:	002b      	movs	r3, r5
 8014a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a94:	f7ff febc 	bl	8014810 <__cvt>
 8014a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a9a:	0005      	movs	r5, r0
 8014a9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014a9e:	2b47      	cmp	r3, #71	; 0x47
 8014aa0:	d108      	bne.n	8014ab4 <_printf_float+0x150>
 8014aa2:	1ccb      	adds	r3, r1, #3
 8014aa4:	db02      	blt.n	8014aac <_printf_float+0x148>
 8014aa6:	6863      	ldr	r3, [r4, #4]
 8014aa8:	4299      	cmp	r1, r3
 8014aaa:	dd48      	ble.n	8014b3e <_printf_float+0x1da>
 8014aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014aae:	3b02      	subs	r3, #2
 8014ab0:	b2db      	uxtb	r3, r3
 8014ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ab6:	2b65      	cmp	r3, #101	; 0x65
 8014ab8:	d824      	bhi.n	8014b04 <_printf_float+0x1a0>
 8014aba:	0020      	movs	r0, r4
 8014abc:	001a      	movs	r2, r3
 8014abe:	3901      	subs	r1, #1
 8014ac0:	3050      	adds	r0, #80	; 0x50
 8014ac2:	9111      	str	r1, [sp, #68]	; 0x44
 8014ac4:	f7ff ff07 	bl	80148d6 <__exponent>
 8014ac8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014aca:	900b      	str	r0, [sp, #44]	; 0x2c
 8014acc:	1813      	adds	r3, r2, r0
 8014ace:	6123      	str	r3, [r4, #16]
 8014ad0:	2a01      	cmp	r2, #1
 8014ad2:	dc02      	bgt.n	8014ada <_printf_float+0x176>
 8014ad4:	6822      	ldr	r2, [r4, #0]
 8014ad6:	07d2      	lsls	r2, r2, #31
 8014ad8:	d501      	bpl.n	8014ade <_printf_float+0x17a>
 8014ada:	3301      	adds	r3, #1
 8014adc:	6123      	str	r3, [r4, #16]
 8014ade:	2323      	movs	r3, #35	; 0x23
 8014ae0:	aa08      	add	r2, sp, #32
 8014ae2:	189b      	adds	r3, r3, r2
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d100      	bne.n	8014aec <_printf_float+0x188>
 8014aea:	e78f      	b.n	8014a0c <_printf_float+0xa8>
 8014aec:	0023      	movs	r3, r4
 8014aee:	222d      	movs	r2, #45	; 0x2d
 8014af0:	3343      	adds	r3, #67	; 0x43
 8014af2:	701a      	strb	r2, [r3, #0]
 8014af4:	e78a      	b.n	8014a0c <_printf_float+0xa8>
 8014af6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014af8:	2a47      	cmp	r2, #71	; 0x47
 8014afa:	d1b4      	bne.n	8014a66 <_printf_float+0x102>
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d1b2      	bne.n	8014a66 <_printf_float+0x102>
 8014b00:	3301      	adds	r3, #1
 8014b02:	e7af      	b.n	8014a64 <_printf_float+0x100>
 8014b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b06:	2b66      	cmp	r3, #102	; 0x66
 8014b08:	d11b      	bne.n	8014b42 <_printf_float+0x1de>
 8014b0a:	6863      	ldr	r3, [r4, #4]
 8014b0c:	2900      	cmp	r1, #0
 8014b0e:	dd0d      	ble.n	8014b2c <_printf_float+0x1c8>
 8014b10:	6121      	str	r1, [r4, #16]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d102      	bne.n	8014b1c <_printf_float+0x1b8>
 8014b16:	6822      	ldr	r2, [r4, #0]
 8014b18:	07d2      	lsls	r2, r2, #31
 8014b1a:	d502      	bpl.n	8014b22 <_printf_float+0x1be>
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	1859      	adds	r1, r3, r1
 8014b20:	6121      	str	r1, [r4, #16]
 8014b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b24:	65a3      	str	r3, [r4, #88]	; 0x58
 8014b26:	2300      	movs	r3, #0
 8014b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b2a:	e7d8      	b.n	8014ade <_printf_float+0x17a>
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d103      	bne.n	8014b38 <_printf_float+0x1d4>
 8014b30:	2201      	movs	r2, #1
 8014b32:	6821      	ldr	r1, [r4, #0]
 8014b34:	4211      	tst	r1, r2
 8014b36:	d000      	beq.n	8014b3a <_printf_float+0x1d6>
 8014b38:	1c9a      	adds	r2, r3, #2
 8014b3a:	6122      	str	r2, [r4, #16]
 8014b3c:	e7f1      	b.n	8014b22 <_printf_float+0x1be>
 8014b3e:	2367      	movs	r3, #103	; 0x67
 8014b40:	930a      	str	r3, [sp, #40]	; 0x28
 8014b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b46:	4293      	cmp	r3, r2
 8014b48:	db06      	blt.n	8014b58 <_printf_float+0x1f4>
 8014b4a:	6822      	ldr	r2, [r4, #0]
 8014b4c:	6123      	str	r3, [r4, #16]
 8014b4e:	07d2      	lsls	r2, r2, #31
 8014b50:	d5e7      	bpl.n	8014b22 <_printf_float+0x1be>
 8014b52:	3301      	adds	r3, #1
 8014b54:	6123      	str	r3, [r4, #16]
 8014b56:	e7e4      	b.n	8014b22 <_printf_float+0x1be>
 8014b58:	2101      	movs	r1, #1
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	dc01      	bgt.n	8014b62 <_printf_float+0x1fe>
 8014b5e:	1849      	adds	r1, r1, r1
 8014b60:	1ac9      	subs	r1, r1, r3
 8014b62:	1852      	adds	r2, r2, r1
 8014b64:	e7e9      	b.n	8014b3a <_printf_float+0x1d6>
 8014b66:	6822      	ldr	r2, [r4, #0]
 8014b68:	0553      	lsls	r3, r2, #21
 8014b6a:	d407      	bmi.n	8014b7c <_printf_float+0x218>
 8014b6c:	6923      	ldr	r3, [r4, #16]
 8014b6e:	002a      	movs	r2, r5
 8014b70:	0038      	movs	r0, r7
 8014b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b74:	47b0      	blx	r6
 8014b76:	1c43      	adds	r3, r0, #1
 8014b78:	d128      	bne.n	8014bcc <_printf_float+0x268>
 8014b7a:	e751      	b.n	8014a20 <_printf_float+0xbc>
 8014b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b7e:	2b65      	cmp	r3, #101	; 0x65
 8014b80:	d800      	bhi.n	8014b84 <_printf_float+0x220>
 8014b82:	e0e1      	b.n	8014d48 <_printf_float+0x3e4>
 8014b84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014b86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014b88:	2200      	movs	r2, #0
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	f7eb fc64 	bl	8000458 <__aeabi_dcmpeq>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d031      	beq.n	8014bf8 <_printf_float+0x294>
 8014b94:	2301      	movs	r3, #1
 8014b96:	0038      	movs	r0, r7
 8014b98:	4a34      	ldr	r2, [pc, #208]	; (8014c6c <_printf_float+0x308>)
 8014b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b9c:	47b0      	blx	r6
 8014b9e:	1c43      	adds	r3, r0, #1
 8014ba0:	d100      	bne.n	8014ba4 <_printf_float+0x240>
 8014ba2:	e73d      	b.n	8014a20 <_printf_float+0xbc>
 8014ba4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ba6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	db02      	blt.n	8014bb2 <_printf_float+0x24e>
 8014bac:	6823      	ldr	r3, [r4, #0]
 8014bae:	07db      	lsls	r3, r3, #31
 8014bb0:	d50c      	bpl.n	8014bcc <_printf_float+0x268>
 8014bb2:	0038      	movs	r0, r7
 8014bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014bba:	47b0      	blx	r6
 8014bbc:	2500      	movs	r5, #0
 8014bbe:	1c43      	adds	r3, r0, #1
 8014bc0:	d100      	bne.n	8014bc4 <_printf_float+0x260>
 8014bc2:	e72d      	b.n	8014a20 <_printf_float+0xbc>
 8014bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014bc6:	3b01      	subs	r3, #1
 8014bc8:	42ab      	cmp	r3, r5
 8014bca:	dc0a      	bgt.n	8014be2 <_printf_float+0x27e>
 8014bcc:	6823      	ldr	r3, [r4, #0]
 8014bce:	079b      	lsls	r3, r3, #30
 8014bd0:	d500      	bpl.n	8014bd4 <_printf_float+0x270>
 8014bd2:	e106      	b.n	8014de2 <_printf_float+0x47e>
 8014bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014bd6:	68e0      	ldr	r0, [r4, #12]
 8014bd8:	4298      	cmp	r0, r3
 8014bda:	db00      	blt.n	8014bde <_printf_float+0x27a>
 8014bdc:	e722      	b.n	8014a24 <_printf_float+0xc0>
 8014bde:	0018      	movs	r0, r3
 8014be0:	e720      	b.n	8014a24 <_printf_float+0xc0>
 8014be2:	0022      	movs	r2, r4
 8014be4:	2301      	movs	r3, #1
 8014be6:	0038      	movs	r0, r7
 8014be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014bea:	321a      	adds	r2, #26
 8014bec:	47b0      	blx	r6
 8014bee:	1c43      	adds	r3, r0, #1
 8014bf0:	d100      	bne.n	8014bf4 <_printf_float+0x290>
 8014bf2:	e715      	b.n	8014a20 <_printf_float+0xbc>
 8014bf4:	3501      	adds	r5, #1
 8014bf6:	e7e5      	b.n	8014bc4 <_printf_float+0x260>
 8014bf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	dc38      	bgt.n	8014c70 <_printf_float+0x30c>
 8014bfe:	2301      	movs	r3, #1
 8014c00:	0038      	movs	r0, r7
 8014c02:	4a1a      	ldr	r2, [pc, #104]	; (8014c6c <_printf_float+0x308>)
 8014c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c06:	47b0      	blx	r6
 8014c08:	1c43      	adds	r3, r0, #1
 8014c0a:	d100      	bne.n	8014c0e <_printf_float+0x2aa>
 8014c0c:	e708      	b.n	8014a20 <_printf_float+0xbc>
 8014c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c12:	4313      	orrs	r3, r2
 8014c14:	d102      	bne.n	8014c1c <_printf_float+0x2b8>
 8014c16:	6823      	ldr	r3, [r4, #0]
 8014c18:	07db      	lsls	r3, r3, #31
 8014c1a:	d5d7      	bpl.n	8014bcc <_printf_float+0x268>
 8014c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c1e:	0038      	movs	r0, r7
 8014c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c24:	47b0      	blx	r6
 8014c26:	1c43      	adds	r3, r0, #1
 8014c28:	d100      	bne.n	8014c2c <_printf_float+0x2c8>
 8014c2a:	e6f9      	b.n	8014a20 <_printf_float+0xbc>
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8014c30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c34:	425b      	negs	r3, r3
 8014c36:	4293      	cmp	r3, r2
 8014c38:	dc01      	bgt.n	8014c3e <_printf_float+0x2da>
 8014c3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c3c:	e797      	b.n	8014b6e <_printf_float+0x20a>
 8014c3e:	0022      	movs	r2, r4
 8014c40:	2301      	movs	r3, #1
 8014c42:	0038      	movs	r0, r7
 8014c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c46:	321a      	adds	r2, #26
 8014c48:	47b0      	blx	r6
 8014c4a:	1c43      	adds	r3, r0, #1
 8014c4c:	d100      	bne.n	8014c50 <_printf_float+0x2ec>
 8014c4e:	e6e7      	b.n	8014a20 <_printf_float+0xbc>
 8014c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c52:	3301      	adds	r3, #1
 8014c54:	e7eb      	b.n	8014c2e <_printf_float+0x2ca>
 8014c56:	46c0      	nop			; (mov r8, r8)
 8014c58:	7fefffff 	.word	0x7fefffff
 8014c5c:	08018a0c 	.word	0x08018a0c
 8014c60:	08018a10 	.word	0x08018a10
 8014c64:	08018a14 	.word	0x08018a14
 8014c68:	08018a18 	.word	0x08018a18
 8014c6c:	08018a1c 	.word	0x08018a1c
 8014c70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c74:	920a      	str	r2, [sp, #40]	; 0x28
 8014c76:	429a      	cmp	r2, r3
 8014c78:	dd00      	ble.n	8014c7c <_printf_float+0x318>
 8014c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8014c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	dc3c      	bgt.n	8014cfc <_printf_float+0x398>
 8014c82:	2300      	movs	r3, #0
 8014c84:	930d      	str	r3, [sp, #52]	; 0x34
 8014c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c88:	43db      	mvns	r3, r3
 8014c8a:	17db      	asrs	r3, r3, #31
 8014c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c96:	4013      	ands	r3, r2
 8014c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c9a:	1ad3      	subs	r3, r2, r3
 8014c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	dc34      	bgt.n	8014d0c <_printf_float+0x3a8>
 8014ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ca4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	db3d      	blt.n	8014d26 <_printf_float+0x3c2>
 8014caa:	6823      	ldr	r3, [r4, #0]
 8014cac:	07db      	lsls	r3, r3, #31
 8014cae:	d43a      	bmi.n	8014d26 <_printf_float+0x3c2>
 8014cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014cb6:	1ad3      	subs	r3, r2, r3
 8014cb8:	1a52      	subs	r2, r2, r1
 8014cba:	920a      	str	r2, [sp, #40]	; 0x28
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	dd00      	ble.n	8014cc2 <_printf_float+0x35e>
 8014cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8014cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	dc36      	bgt.n	8014d36 <_printf_float+0x3d2>
 8014cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cca:	2500      	movs	r5, #0
 8014ccc:	43db      	mvns	r3, r3
 8014cce:	17db      	asrs	r3, r3, #31
 8014cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8014cd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cd8:	1a9b      	subs	r3, r3, r2
 8014cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cdc:	400a      	ands	r2, r1
 8014cde:	1a9b      	subs	r3, r3, r2
 8014ce0:	42ab      	cmp	r3, r5
 8014ce2:	dc00      	bgt.n	8014ce6 <_printf_float+0x382>
 8014ce4:	e772      	b.n	8014bcc <_printf_float+0x268>
 8014ce6:	0022      	movs	r2, r4
 8014ce8:	2301      	movs	r3, #1
 8014cea:	0038      	movs	r0, r7
 8014cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cee:	321a      	adds	r2, #26
 8014cf0:	47b0      	blx	r6
 8014cf2:	1c43      	adds	r3, r0, #1
 8014cf4:	d100      	bne.n	8014cf8 <_printf_float+0x394>
 8014cf6:	e693      	b.n	8014a20 <_printf_float+0xbc>
 8014cf8:	3501      	adds	r5, #1
 8014cfa:	e7ea      	b.n	8014cd2 <_printf_float+0x36e>
 8014cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cfe:	002a      	movs	r2, r5
 8014d00:	0038      	movs	r0, r7
 8014d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d04:	47b0      	blx	r6
 8014d06:	1c43      	adds	r3, r0, #1
 8014d08:	d1bb      	bne.n	8014c82 <_printf_float+0x31e>
 8014d0a:	e689      	b.n	8014a20 <_printf_float+0xbc>
 8014d0c:	0022      	movs	r2, r4
 8014d0e:	2301      	movs	r3, #1
 8014d10:	0038      	movs	r0, r7
 8014d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d14:	321a      	adds	r2, #26
 8014d16:	47b0      	blx	r6
 8014d18:	1c43      	adds	r3, r0, #1
 8014d1a:	d100      	bne.n	8014d1e <_printf_float+0x3ba>
 8014d1c:	e680      	b.n	8014a20 <_printf_float+0xbc>
 8014d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d20:	3301      	adds	r3, #1
 8014d22:	930d      	str	r3, [sp, #52]	; 0x34
 8014d24:	e7b3      	b.n	8014c8e <_printf_float+0x32a>
 8014d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d28:	0038      	movs	r0, r7
 8014d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d2e:	47b0      	blx	r6
 8014d30:	1c43      	adds	r3, r0, #1
 8014d32:	d1bd      	bne.n	8014cb0 <_printf_float+0x34c>
 8014d34:	e674      	b.n	8014a20 <_printf_float+0xbc>
 8014d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d38:	0038      	movs	r0, r7
 8014d3a:	18ea      	adds	r2, r5, r3
 8014d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d40:	47b0      	blx	r6
 8014d42:	1c43      	adds	r3, r0, #1
 8014d44:	d1c0      	bne.n	8014cc8 <_printf_float+0x364>
 8014d46:	e66b      	b.n	8014a20 <_printf_float+0xbc>
 8014d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	dc02      	bgt.n	8014d54 <_printf_float+0x3f0>
 8014d4e:	2301      	movs	r3, #1
 8014d50:	421a      	tst	r2, r3
 8014d52:	d034      	beq.n	8014dbe <_printf_float+0x45a>
 8014d54:	2301      	movs	r3, #1
 8014d56:	002a      	movs	r2, r5
 8014d58:	0038      	movs	r0, r7
 8014d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d5c:	47b0      	blx	r6
 8014d5e:	1c43      	adds	r3, r0, #1
 8014d60:	d100      	bne.n	8014d64 <_printf_float+0x400>
 8014d62:	e65d      	b.n	8014a20 <_printf_float+0xbc>
 8014d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d66:	0038      	movs	r0, r7
 8014d68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d6c:	47b0      	blx	r6
 8014d6e:	1c43      	adds	r3, r0, #1
 8014d70:	d100      	bne.n	8014d74 <_printf_float+0x410>
 8014d72:	e655      	b.n	8014a20 <_printf_float+0xbc>
 8014d74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014d76:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014d78:	2200      	movs	r2, #0
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	f7eb fb6c 	bl	8000458 <__aeabi_dcmpeq>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d11a      	bne.n	8014dba <_printf_float+0x456>
 8014d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d86:	1c6a      	adds	r2, r5, #1
 8014d88:	3b01      	subs	r3, #1
 8014d8a:	0038      	movs	r0, r7
 8014d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d8e:	47b0      	blx	r6
 8014d90:	1c43      	adds	r3, r0, #1
 8014d92:	d10e      	bne.n	8014db2 <_printf_float+0x44e>
 8014d94:	e644      	b.n	8014a20 <_printf_float+0xbc>
 8014d96:	0022      	movs	r2, r4
 8014d98:	2301      	movs	r3, #1
 8014d9a:	0038      	movs	r0, r7
 8014d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d9e:	321a      	adds	r2, #26
 8014da0:	47b0      	blx	r6
 8014da2:	1c43      	adds	r3, r0, #1
 8014da4:	d100      	bne.n	8014da8 <_printf_float+0x444>
 8014da6:	e63b      	b.n	8014a20 <_printf_float+0xbc>
 8014da8:	3501      	adds	r5, #1
 8014daa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014dac:	3b01      	subs	r3, #1
 8014dae:	42ab      	cmp	r3, r5
 8014db0:	dcf1      	bgt.n	8014d96 <_printf_float+0x432>
 8014db2:	0022      	movs	r2, r4
 8014db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014db6:	3250      	adds	r2, #80	; 0x50
 8014db8:	e6da      	b.n	8014b70 <_printf_float+0x20c>
 8014dba:	2500      	movs	r5, #0
 8014dbc:	e7f5      	b.n	8014daa <_printf_float+0x446>
 8014dbe:	002a      	movs	r2, r5
 8014dc0:	e7e3      	b.n	8014d8a <_printf_float+0x426>
 8014dc2:	0022      	movs	r2, r4
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	0038      	movs	r0, r7
 8014dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dca:	3219      	adds	r2, #25
 8014dcc:	47b0      	blx	r6
 8014dce:	1c43      	adds	r3, r0, #1
 8014dd0:	d100      	bne.n	8014dd4 <_printf_float+0x470>
 8014dd2:	e625      	b.n	8014a20 <_printf_float+0xbc>
 8014dd4:	3501      	adds	r5, #1
 8014dd6:	68e3      	ldr	r3, [r4, #12]
 8014dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014dda:	1a9b      	subs	r3, r3, r2
 8014ddc:	42ab      	cmp	r3, r5
 8014dde:	dcf0      	bgt.n	8014dc2 <_printf_float+0x45e>
 8014de0:	e6f8      	b.n	8014bd4 <_printf_float+0x270>
 8014de2:	2500      	movs	r5, #0
 8014de4:	e7f7      	b.n	8014dd6 <_printf_float+0x472>
 8014de6:	46c0      	nop			; (mov r8, r8)

08014de8 <_printf_common>:
 8014de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014dea:	0015      	movs	r5, r2
 8014dec:	9301      	str	r3, [sp, #4]
 8014dee:	688a      	ldr	r2, [r1, #8]
 8014df0:	690b      	ldr	r3, [r1, #16]
 8014df2:	000c      	movs	r4, r1
 8014df4:	9000      	str	r0, [sp, #0]
 8014df6:	4293      	cmp	r3, r2
 8014df8:	da00      	bge.n	8014dfc <_printf_common+0x14>
 8014dfa:	0013      	movs	r3, r2
 8014dfc:	0022      	movs	r2, r4
 8014dfe:	602b      	str	r3, [r5, #0]
 8014e00:	3243      	adds	r2, #67	; 0x43
 8014e02:	7812      	ldrb	r2, [r2, #0]
 8014e04:	2a00      	cmp	r2, #0
 8014e06:	d001      	beq.n	8014e0c <_printf_common+0x24>
 8014e08:	3301      	adds	r3, #1
 8014e0a:	602b      	str	r3, [r5, #0]
 8014e0c:	6823      	ldr	r3, [r4, #0]
 8014e0e:	069b      	lsls	r3, r3, #26
 8014e10:	d502      	bpl.n	8014e18 <_printf_common+0x30>
 8014e12:	682b      	ldr	r3, [r5, #0]
 8014e14:	3302      	adds	r3, #2
 8014e16:	602b      	str	r3, [r5, #0]
 8014e18:	6822      	ldr	r2, [r4, #0]
 8014e1a:	2306      	movs	r3, #6
 8014e1c:	0017      	movs	r7, r2
 8014e1e:	401f      	ands	r7, r3
 8014e20:	421a      	tst	r2, r3
 8014e22:	d027      	beq.n	8014e74 <_printf_common+0x8c>
 8014e24:	0023      	movs	r3, r4
 8014e26:	3343      	adds	r3, #67	; 0x43
 8014e28:	781b      	ldrb	r3, [r3, #0]
 8014e2a:	1e5a      	subs	r2, r3, #1
 8014e2c:	4193      	sbcs	r3, r2
 8014e2e:	6822      	ldr	r2, [r4, #0]
 8014e30:	0692      	lsls	r2, r2, #26
 8014e32:	d430      	bmi.n	8014e96 <_printf_common+0xae>
 8014e34:	0022      	movs	r2, r4
 8014e36:	9901      	ldr	r1, [sp, #4]
 8014e38:	9800      	ldr	r0, [sp, #0]
 8014e3a:	9e08      	ldr	r6, [sp, #32]
 8014e3c:	3243      	adds	r2, #67	; 0x43
 8014e3e:	47b0      	blx	r6
 8014e40:	1c43      	adds	r3, r0, #1
 8014e42:	d025      	beq.n	8014e90 <_printf_common+0xa8>
 8014e44:	2306      	movs	r3, #6
 8014e46:	6820      	ldr	r0, [r4, #0]
 8014e48:	682a      	ldr	r2, [r5, #0]
 8014e4a:	68e1      	ldr	r1, [r4, #12]
 8014e4c:	2500      	movs	r5, #0
 8014e4e:	4003      	ands	r3, r0
 8014e50:	2b04      	cmp	r3, #4
 8014e52:	d103      	bne.n	8014e5c <_printf_common+0x74>
 8014e54:	1a8d      	subs	r5, r1, r2
 8014e56:	43eb      	mvns	r3, r5
 8014e58:	17db      	asrs	r3, r3, #31
 8014e5a:	401d      	ands	r5, r3
 8014e5c:	68a3      	ldr	r3, [r4, #8]
 8014e5e:	6922      	ldr	r2, [r4, #16]
 8014e60:	4293      	cmp	r3, r2
 8014e62:	dd01      	ble.n	8014e68 <_printf_common+0x80>
 8014e64:	1a9b      	subs	r3, r3, r2
 8014e66:	18ed      	adds	r5, r5, r3
 8014e68:	2700      	movs	r7, #0
 8014e6a:	42bd      	cmp	r5, r7
 8014e6c:	d120      	bne.n	8014eb0 <_printf_common+0xc8>
 8014e6e:	2000      	movs	r0, #0
 8014e70:	e010      	b.n	8014e94 <_printf_common+0xac>
 8014e72:	3701      	adds	r7, #1
 8014e74:	68e3      	ldr	r3, [r4, #12]
 8014e76:	682a      	ldr	r2, [r5, #0]
 8014e78:	1a9b      	subs	r3, r3, r2
 8014e7a:	42bb      	cmp	r3, r7
 8014e7c:	ddd2      	ble.n	8014e24 <_printf_common+0x3c>
 8014e7e:	0022      	movs	r2, r4
 8014e80:	2301      	movs	r3, #1
 8014e82:	9901      	ldr	r1, [sp, #4]
 8014e84:	9800      	ldr	r0, [sp, #0]
 8014e86:	9e08      	ldr	r6, [sp, #32]
 8014e88:	3219      	adds	r2, #25
 8014e8a:	47b0      	blx	r6
 8014e8c:	1c43      	adds	r3, r0, #1
 8014e8e:	d1f0      	bne.n	8014e72 <_printf_common+0x8a>
 8014e90:	2001      	movs	r0, #1
 8014e92:	4240      	negs	r0, r0
 8014e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014e96:	2030      	movs	r0, #48	; 0x30
 8014e98:	18e1      	adds	r1, r4, r3
 8014e9a:	3143      	adds	r1, #67	; 0x43
 8014e9c:	7008      	strb	r0, [r1, #0]
 8014e9e:	0021      	movs	r1, r4
 8014ea0:	1c5a      	adds	r2, r3, #1
 8014ea2:	3145      	adds	r1, #69	; 0x45
 8014ea4:	7809      	ldrb	r1, [r1, #0]
 8014ea6:	18a2      	adds	r2, r4, r2
 8014ea8:	3243      	adds	r2, #67	; 0x43
 8014eaa:	3302      	adds	r3, #2
 8014eac:	7011      	strb	r1, [r2, #0]
 8014eae:	e7c1      	b.n	8014e34 <_printf_common+0x4c>
 8014eb0:	0022      	movs	r2, r4
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	9901      	ldr	r1, [sp, #4]
 8014eb6:	9800      	ldr	r0, [sp, #0]
 8014eb8:	9e08      	ldr	r6, [sp, #32]
 8014eba:	321a      	adds	r2, #26
 8014ebc:	47b0      	blx	r6
 8014ebe:	1c43      	adds	r3, r0, #1
 8014ec0:	d0e6      	beq.n	8014e90 <_printf_common+0xa8>
 8014ec2:	3701      	adds	r7, #1
 8014ec4:	e7d1      	b.n	8014e6a <_printf_common+0x82>
	...

08014ec8 <_printf_i>:
 8014ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eca:	b08b      	sub	sp, #44	; 0x2c
 8014ecc:	9206      	str	r2, [sp, #24]
 8014ece:	000a      	movs	r2, r1
 8014ed0:	3243      	adds	r2, #67	; 0x43
 8014ed2:	9307      	str	r3, [sp, #28]
 8014ed4:	9005      	str	r0, [sp, #20]
 8014ed6:	9204      	str	r2, [sp, #16]
 8014ed8:	7e0a      	ldrb	r2, [r1, #24]
 8014eda:	000c      	movs	r4, r1
 8014edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ede:	2a78      	cmp	r2, #120	; 0x78
 8014ee0:	d807      	bhi.n	8014ef2 <_printf_i+0x2a>
 8014ee2:	2a62      	cmp	r2, #98	; 0x62
 8014ee4:	d809      	bhi.n	8014efa <_printf_i+0x32>
 8014ee6:	2a00      	cmp	r2, #0
 8014ee8:	d100      	bne.n	8014eec <_printf_i+0x24>
 8014eea:	e0c1      	b.n	8015070 <_printf_i+0x1a8>
 8014eec:	2a58      	cmp	r2, #88	; 0x58
 8014eee:	d100      	bne.n	8014ef2 <_printf_i+0x2a>
 8014ef0:	e08c      	b.n	801500c <_printf_i+0x144>
 8014ef2:	0026      	movs	r6, r4
 8014ef4:	3642      	adds	r6, #66	; 0x42
 8014ef6:	7032      	strb	r2, [r6, #0]
 8014ef8:	e022      	b.n	8014f40 <_printf_i+0x78>
 8014efa:	0010      	movs	r0, r2
 8014efc:	3863      	subs	r0, #99	; 0x63
 8014efe:	2815      	cmp	r0, #21
 8014f00:	d8f7      	bhi.n	8014ef2 <_printf_i+0x2a>
 8014f02:	f7eb f919 	bl	8000138 <__gnu_thumb1_case_shi>
 8014f06:	0016      	.short	0x0016
 8014f08:	fff6001f 	.word	0xfff6001f
 8014f0c:	fff6fff6 	.word	0xfff6fff6
 8014f10:	001ffff6 	.word	0x001ffff6
 8014f14:	fff6fff6 	.word	0xfff6fff6
 8014f18:	fff6fff6 	.word	0xfff6fff6
 8014f1c:	003600a8 	.word	0x003600a8
 8014f20:	fff6009a 	.word	0xfff6009a
 8014f24:	00b9fff6 	.word	0x00b9fff6
 8014f28:	0036fff6 	.word	0x0036fff6
 8014f2c:	fff6fff6 	.word	0xfff6fff6
 8014f30:	009e      	.short	0x009e
 8014f32:	0026      	movs	r6, r4
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	3642      	adds	r6, #66	; 0x42
 8014f38:	1d11      	adds	r1, r2, #4
 8014f3a:	6019      	str	r1, [r3, #0]
 8014f3c:	6813      	ldr	r3, [r2, #0]
 8014f3e:	7033      	strb	r3, [r6, #0]
 8014f40:	2301      	movs	r3, #1
 8014f42:	e0a7      	b.n	8015094 <_printf_i+0x1cc>
 8014f44:	6808      	ldr	r0, [r1, #0]
 8014f46:	6819      	ldr	r1, [r3, #0]
 8014f48:	1d0a      	adds	r2, r1, #4
 8014f4a:	0605      	lsls	r5, r0, #24
 8014f4c:	d50b      	bpl.n	8014f66 <_printf_i+0x9e>
 8014f4e:	680d      	ldr	r5, [r1, #0]
 8014f50:	601a      	str	r2, [r3, #0]
 8014f52:	2d00      	cmp	r5, #0
 8014f54:	da03      	bge.n	8014f5e <_printf_i+0x96>
 8014f56:	232d      	movs	r3, #45	; 0x2d
 8014f58:	9a04      	ldr	r2, [sp, #16]
 8014f5a:	426d      	negs	r5, r5
 8014f5c:	7013      	strb	r3, [r2, #0]
 8014f5e:	4b61      	ldr	r3, [pc, #388]	; (80150e4 <_printf_i+0x21c>)
 8014f60:	270a      	movs	r7, #10
 8014f62:	9303      	str	r3, [sp, #12]
 8014f64:	e01b      	b.n	8014f9e <_printf_i+0xd6>
 8014f66:	680d      	ldr	r5, [r1, #0]
 8014f68:	601a      	str	r2, [r3, #0]
 8014f6a:	0641      	lsls	r1, r0, #25
 8014f6c:	d5f1      	bpl.n	8014f52 <_printf_i+0x8a>
 8014f6e:	b22d      	sxth	r5, r5
 8014f70:	e7ef      	b.n	8014f52 <_printf_i+0x8a>
 8014f72:	680d      	ldr	r5, [r1, #0]
 8014f74:	6819      	ldr	r1, [r3, #0]
 8014f76:	1d08      	adds	r0, r1, #4
 8014f78:	6018      	str	r0, [r3, #0]
 8014f7a:	062e      	lsls	r6, r5, #24
 8014f7c:	d501      	bpl.n	8014f82 <_printf_i+0xba>
 8014f7e:	680d      	ldr	r5, [r1, #0]
 8014f80:	e003      	b.n	8014f8a <_printf_i+0xc2>
 8014f82:	066d      	lsls	r5, r5, #25
 8014f84:	d5fb      	bpl.n	8014f7e <_printf_i+0xb6>
 8014f86:	680d      	ldr	r5, [r1, #0]
 8014f88:	b2ad      	uxth	r5, r5
 8014f8a:	4b56      	ldr	r3, [pc, #344]	; (80150e4 <_printf_i+0x21c>)
 8014f8c:	2708      	movs	r7, #8
 8014f8e:	9303      	str	r3, [sp, #12]
 8014f90:	2a6f      	cmp	r2, #111	; 0x6f
 8014f92:	d000      	beq.n	8014f96 <_printf_i+0xce>
 8014f94:	3702      	adds	r7, #2
 8014f96:	0023      	movs	r3, r4
 8014f98:	2200      	movs	r2, #0
 8014f9a:	3343      	adds	r3, #67	; 0x43
 8014f9c:	701a      	strb	r2, [r3, #0]
 8014f9e:	6863      	ldr	r3, [r4, #4]
 8014fa0:	60a3      	str	r3, [r4, #8]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	db03      	blt.n	8014fae <_printf_i+0xe6>
 8014fa6:	2204      	movs	r2, #4
 8014fa8:	6821      	ldr	r1, [r4, #0]
 8014faa:	4391      	bics	r1, r2
 8014fac:	6021      	str	r1, [r4, #0]
 8014fae:	2d00      	cmp	r5, #0
 8014fb0:	d102      	bne.n	8014fb8 <_printf_i+0xf0>
 8014fb2:	9e04      	ldr	r6, [sp, #16]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d00c      	beq.n	8014fd2 <_printf_i+0x10a>
 8014fb8:	9e04      	ldr	r6, [sp, #16]
 8014fba:	0028      	movs	r0, r5
 8014fbc:	0039      	movs	r1, r7
 8014fbe:	f7eb f94b 	bl	8000258 <__aeabi_uidivmod>
 8014fc2:	9b03      	ldr	r3, [sp, #12]
 8014fc4:	3e01      	subs	r6, #1
 8014fc6:	5c5b      	ldrb	r3, [r3, r1]
 8014fc8:	7033      	strb	r3, [r6, #0]
 8014fca:	002b      	movs	r3, r5
 8014fcc:	0005      	movs	r5, r0
 8014fce:	429f      	cmp	r7, r3
 8014fd0:	d9f3      	bls.n	8014fba <_printf_i+0xf2>
 8014fd2:	2f08      	cmp	r7, #8
 8014fd4:	d109      	bne.n	8014fea <_printf_i+0x122>
 8014fd6:	6823      	ldr	r3, [r4, #0]
 8014fd8:	07db      	lsls	r3, r3, #31
 8014fda:	d506      	bpl.n	8014fea <_printf_i+0x122>
 8014fdc:	6863      	ldr	r3, [r4, #4]
 8014fde:	6922      	ldr	r2, [r4, #16]
 8014fe0:	4293      	cmp	r3, r2
 8014fe2:	dc02      	bgt.n	8014fea <_printf_i+0x122>
 8014fe4:	2330      	movs	r3, #48	; 0x30
 8014fe6:	3e01      	subs	r6, #1
 8014fe8:	7033      	strb	r3, [r6, #0]
 8014fea:	9b04      	ldr	r3, [sp, #16]
 8014fec:	1b9b      	subs	r3, r3, r6
 8014fee:	6123      	str	r3, [r4, #16]
 8014ff0:	9b07      	ldr	r3, [sp, #28]
 8014ff2:	0021      	movs	r1, r4
 8014ff4:	9300      	str	r3, [sp, #0]
 8014ff6:	9805      	ldr	r0, [sp, #20]
 8014ff8:	9b06      	ldr	r3, [sp, #24]
 8014ffa:	aa09      	add	r2, sp, #36	; 0x24
 8014ffc:	f7ff fef4 	bl	8014de8 <_printf_common>
 8015000:	1c43      	adds	r3, r0, #1
 8015002:	d14c      	bne.n	801509e <_printf_i+0x1d6>
 8015004:	2001      	movs	r0, #1
 8015006:	4240      	negs	r0, r0
 8015008:	b00b      	add	sp, #44	; 0x2c
 801500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801500c:	3145      	adds	r1, #69	; 0x45
 801500e:	700a      	strb	r2, [r1, #0]
 8015010:	4a34      	ldr	r2, [pc, #208]	; (80150e4 <_printf_i+0x21c>)
 8015012:	9203      	str	r2, [sp, #12]
 8015014:	681a      	ldr	r2, [r3, #0]
 8015016:	6821      	ldr	r1, [r4, #0]
 8015018:	ca20      	ldmia	r2!, {r5}
 801501a:	601a      	str	r2, [r3, #0]
 801501c:	0608      	lsls	r0, r1, #24
 801501e:	d516      	bpl.n	801504e <_printf_i+0x186>
 8015020:	07cb      	lsls	r3, r1, #31
 8015022:	d502      	bpl.n	801502a <_printf_i+0x162>
 8015024:	2320      	movs	r3, #32
 8015026:	4319      	orrs	r1, r3
 8015028:	6021      	str	r1, [r4, #0]
 801502a:	2710      	movs	r7, #16
 801502c:	2d00      	cmp	r5, #0
 801502e:	d1b2      	bne.n	8014f96 <_printf_i+0xce>
 8015030:	2320      	movs	r3, #32
 8015032:	6822      	ldr	r2, [r4, #0]
 8015034:	439a      	bics	r2, r3
 8015036:	6022      	str	r2, [r4, #0]
 8015038:	e7ad      	b.n	8014f96 <_printf_i+0xce>
 801503a:	2220      	movs	r2, #32
 801503c:	6809      	ldr	r1, [r1, #0]
 801503e:	430a      	orrs	r2, r1
 8015040:	6022      	str	r2, [r4, #0]
 8015042:	0022      	movs	r2, r4
 8015044:	2178      	movs	r1, #120	; 0x78
 8015046:	3245      	adds	r2, #69	; 0x45
 8015048:	7011      	strb	r1, [r2, #0]
 801504a:	4a27      	ldr	r2, [pc, #156]	; (80150e8 <_printf_i+0x220>)
 801504c:	e7e1      	b.n	8015012 <_printf_i+0x14a>
 801504e:	0648      	lsls	r0, r1, #25
 8015050:	d5e6      	bpl.n	8015020 <_printf_i+0x158>
 8015052:	b2ad      	uxth	r5, r5
 8015054:	e7e4      	b.n	8015020 <_printf_i+0x158>
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	680d      	ldr	r5, [r1, #0]
 801505a:	1d10      	adds	r0, r2, #4
 801505c:	6949      	ldr	r1, [r1, #20]
 801505e:	6018      	str	r0, [r3, #0]
 8015060:	6813      	ldr	r3, [r2, #0]
 8015062:	062e      	lsls	r6, r5, #24
 8015064:	d501      	bpl.n	801506a <_printf_i+0x1a2>
 8015066:	6019      	str	r1, [r3, #0]
 8015068:	e002      	b.n	8015070 <_printf_i+0x1a8>
 801506a:	066d      	lsls	r5, r5, #25
 801506c:	d5fb      	bpl.n	8015066 <_printf_i+0x19e>
 801506e:	8019      	strh	r1, [r3, #0]
 8015070:	2300      	movs	r3, #0
 8015072:	9e04      	ldr	r6, [sp, #16]
 8015074:	6123      	str	r3, [r4, #16]
 8015076:	e7bb      	b.n	8014ff0 <_printf_i+0x128>
 8015078:	681a      	ldr	r2, [r3, #0]
 801507a:	1d11      	adds	r1, r2, #4
 801507c:	6019      	str	r1, [r3, #0]
 801507e:	6816      	ldr	r6, [r2, #0]
 8015080:	2100      	movs	r1, #0
 8015082:	0030      	movs	r0, r6
 8015084:	6862      	ldr	r2, [r4, #4]
 8015086:	f000 ff0d 	bl	8015ea4 <memchr>
 801508a:	2800      	cmp	r0, #0
 801508c:	d001      	beq.n	8015092 <_printf_i+0x1ca>
 801508e:	1b80      	subs	r0, r0, r6
 8015090:	6060      	str	r0, [r4, #4]
 8015092:	6863      	ldr	r3, [r4, #4]
 8015094:	6123      	str	r3, [r4, #16]
 8015096:	2300      	movs	r3, #0
 8015098:	9a04      	ldr	r2, [sp, #16]
 801509a:	7013      	strb	r3, [r2, #0]
 801509c:	e7a8      	b.n	8014ff0 <_printf_i+0x128>
 801509e:	6923      	ldr	r3, [r4, #16]
 80150a0:	0032      	movs	r2, r6
 80150a2:	9906      	ldr	r1, [sp, #24]
 80150a4:	9805      	ldr	r0, [sp, #20]
 80150a6:	9d07      	ldr	r5, [sp, #28]
 80150a8:	47a8      	blx	r5
 80150aa:	1c43      	adds	r3, r0, #1
 80150ac:	d0aa      	beq.n	8015004 <_printf_i+0x13c>
 80150ae:	6823      	ldr	r3, [r4, #0]
 80150b0:	079b      	lsls	r3, r3, #30
 80150b2:	d415      	bmi.n	80150e0 <_printf_i+0x218>
 80150b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b6:	68e0      	ldr	r0, [r4, #12]
 80150b8:	4298      	cmp	r0, r3
 80150ba:	daa5      	bge.n	8015008 <_printf_i+0x140>
 80150bc:	0018      	movs	r0, r3
 80150be:	e7a3      	b.n	8015008 <_printf_i+0x140>
 80150c0:	0022      	movs	r2, r4
 80150c2:	2301      	movs	r3, #1
 80150c4:	9906      	ldr	r1, [sp, #24]
 80150c6:	9805      	ldr	r0, [sp, #20]
 80150c8:	9e07      	ldr	r6, [sp, #28]
 80150ca:	3219      	adds	r2, #25
 80150cc:	47b0      	blx	r6
 80150ce:	1c43      	adds	r3, r0, #1
 80150d0:	d098      	beq.n	8015004 <_printf_i+0x13c>
 80150d2:	3501      	adds	r5, #1
 80150d4:	68e3      	ldr	r3, [r4, #12]
 80150d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150d8:	1a9b      	subs	r3, r3, r2
 80150da:	42ab      	cmp	r3, r5
 80150dc:	dcf0      	bgt.n	80150c0 <_printf_i+0x1f8>
 80150de:	e7e9      	b.n	80150b4 <_printf_i+0x1ec>
 80150e0:	2500      	movs	r5, #0
 80150e2:	e7f7      	b.n	80150d4 <_printf_i+0x20c>
 80150e4:	08018a1e 	.word	0x08018a1e
 80150e8:	08018a2f 	.word	0x08018a2f

080150ec <_sbrk_r>:
 80150ec:	2300      	movs	r3, #0
 80150ee:	b570      	push	{r4, r5, r6, lr}
 80150f0:	4d06      	ldr	r5, [pc, #24]	; (801510c <_sbrk_r+0x20>)
 80150f2:	0004      	movs	r4, r0
 80150f4:	0008      	movs	r0, r1
 80150f6:	602b      	str	r3, [r5, #0]
 80150f8:	f7ee fe60 	bl	8003dbc <_sbrk>
 80150fc:	1c43      	adds	r3, r0, #1
 80150fe:	d103      	bne.n	8015108 <_sbrk_r+0x1c>
 8015100:	682b      	ldr	r3, [r5, #0]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d000      	beq.n	8015108 <_sbrk_r+0x1c>
 8015106:	6023      	str	r3, [r4, #0]
 8015108:	bd70      	pop	{r4, r5, r6, pc}
 801510a:	46c0      	nop			; (mov r8, r8)
 801510c:	20003a9c 	.word	0x20003a9c

08015110 <siprintf>:
 8015110:	b40e      	push	{r1, r2, r3}
 8015112:	b500      	push	{lr}
 8015114:	490b      	ldr	r1, [pc, #44]	; (8015144 <siprintf+0x34>)
 8015116:	b09c      	sub	sp, #112	; 0x70
 8015118:	ab1d      	add	r3, sp, #116	; 0x74
 801511a:	9002      	str	r0, [sp, #8]
 801511c:	9006      	str	r0, [sp, #24]
 801511e:	9107      	str	r1, [sp, #28]
 8015120:	9104      	str	r1, [sp, #16]
 8015122:	4809      	ldr	r0, [pc, #36]	; (8015148 <siprintf+0x38>)
 8015124:	4909      	ldr	r1, [pc, #36]	; (801514c <siprintf+0x3c>)
 8015126:	cb04      	ldmia	r3!, {r2}
 8015128:	9105      	str	r1, [sp, #20]
 801512a:	6800      	ldr	r0, [r0, #0]
 801512c:	a902      	add	r1, sp, #8
 801512e:	9301      	str	r3, [sp, #4]
 8015130:	f001 fafe 	bl	8016730 <_svfiprintf_r>
 8015134:	2300      	movs	r3, #0
 8015136:	9a02      	ldr	r2, [sp, #8]
 8015138:	7013      	strb	r3, [r2, #0]
 801513a:	b01c      	add	sp, #112	; 0x70
 801513c:	bc08      	pop	{r3}
 801513e:	b003      	add	sp, #12
 8015140:	4718      	bx	r3
 8015142:	46c0      	nop			; (mov r8, r8)
 8015144:	7fffffff 	.word	0x7fffffff
 8015148:	200030dc 	.word	0x200030dc
 801514c:	ffff0208 	.word	0xffff0208

08015150 <quorem>:
 8015150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015152:	0006      	movs	r6, r0
 8015154:	690b      	ldr	r3, [r1, #16]
 8015156:	6932      	ldr	r2, [r6, #16]
 8015158:	b087      	sub	sp, #28
 801515a:	2000      	movs	r0, #0
 801515c:	9103      	str	r1, [sp, #12]
 801515e:	429a      	cmp	r2, r3
 8015160:	db65      	blt.n	801522e <quorem+0xde>
 8015162:	3b01      	subs	r3, #1
 8015164:	009c      	lsls	r4, r3, #2
 8015166:	9300      	str	r3, [sp, #0]
 8015168:	000b      	movs	r3, r1
 801516a:	3314      	adds	r3, #20
 801516c:	9305      	str	r3, [sp, #20]
 801516e:	191b      	adds	r3, r3, r4
 8015170:	9304      	str	r3, [sp, #16]
 8015172:	0033      	movs	r3, r6
 8015174:	3314      	adds	r3, #20
 8015176:	9302      	str	r3, [sp, #8]
 8015178:	191c      	adds	r4, r3, r4
 801517a:	9b04      	ldr	r3, [sp, #16]
 801517c:	6827      	ldr	r7, [r4, #0]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	0038      	movs	r0, r7
 8015182:	1c5d      	adds	r5, r3, #1
 8015184:	0029      	movs	r1, r5
 8015186:	9301      	str	r3, [sp, #4]
 8015188:	f7ea ffe0 	bl	800014c <__udivsi3>
 801518c:	9001      	str	r0, [sp, #4]
 801518e:	42af      	cmp	r7, r5
 8015190:	d324      	bcc.n	80151dc <quorem+0x8c>
 8015192:	2500      	movs	r5, #0
 8015194:	46ac      	mov	ip, r5
 8015196:	9802      	ldr	r0, [sp, #8]
 8015198:	9f05      	ldr	r7, [sp, #20]
 801519a:	cf08      	ldmia	r7!, {r3}
 801519c:	9a01      	ldr	r2, [sp, #4]
 801519e:	b299      	uxth	r1, r3
 80151a0:	4351      	muls	r1, r2
 80151a2:	0c1b      	lsrs	r3, r3, #16
 80151a4:	4353      	muls	r3, r2
 80151a6:	1949      	adds	r1, r1, r5
 80151a8:	0c0a      	lsrs	r2, r1, #16
 80151aa:	189b      	adds	r3, r3, r2
 80151ac:	6802      	ldr	r2, [r0, #0]
 80151ae:	b289      	uxth	r1, r1
 80151b0:	b292      	uxth	r2, r2
 80151b2:	4462      	add	r2, ip
 80151b4:	1a52      	subs	r2, r2, r1
 80151b6:	6801      	ldr	r1, [r0, #0]
 80151b8:	0c1d      	lsrs	r5, r3, #16
 80151ba:	0c09      	lsrs	r1, r1, #16
 80151bc:	b29b      	uxth	r3, r3
 80151be:	1acb      	subs	r3, r1, r3
 80151c0:	1411      	asrs	r1, r2, #16
 80151c2:	185b      	adds	r3, r3, r1
 80151c4:	1419      	asrs	r1, r3, #16
 80151c6:	b292      	uxth	r2, r2
 80151c8:	041b      	lsls	r3, r3, #16
 80151ca:	431a      	orrs	r2, r3
 80151cc:	9b04      	ldr	r3, [sp, #16]
 80151ce:	468c      	mov	ip, r1
 80151d0:	c004      	stmia	r0!, {r2}
 80151d2:	42bb      	cmp	r3, r7
 80151d4:	d2e1      	bcs.n	801519a <quorem+0x4a>
 80151d6:	6823      	ldr	r3, [r4, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d030      	beq.n	801523e <quorem+0xee>
 80151dc:	0030      	movs	r0, r6
 80151de:	9903      	ldr	r1, [sp, #12]
 80151e0:	f001 f900 	bl	80163e4 <__mcmp>
 80151e4:	2800      	cmp	r0, #0
 80151e6:	db21      	blt.n	801522c <quorem+0xdc>
 80151e8:	0030      	movs	r0, r6
 80151ea:	2400      	movs	r4, #0
 80151ec:	9b01      	ldr	r3, [sp, #4]
 80151ee:	9903      	ldr	r1, [sp, #12]
 80151f0:	3301      	adds	r3, #1
 80151f2:	9301      	str	r3, [sp, #4]
 80151f4:	3014      	adds	r0, #20
 80151f6:	3114      	adds	r1, #20
 80151f8:	6803      	ldr	r3, [r0, #0]
 80151fa:	c920      	ldmia	r1!, {r5}
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	1914      	adds	r4, r2, r4
 8015200:	b2aa      	uxth	r2, r5
 8015202:	1aa2      	subs	r2, r4, r2
 8015204:	0c1b      	lsrs	r3, r3, #16
 8015206:	0c2d      	lsrs	r5, r5, #16
 8015208:	1414      	asrs	r4, r2, #16
 801520a:	1b5b      	subs	r3, r3, r5
 801520c:	191b      	adds	r3, r3, r4
 801520e:	141c      	asrs	r4, r3, #16
 8015210:	b292      	uxth	r2, r2
 8015212:	041b      	lsls	r3, r3, #16
 8015214:	4313      	orrs	r3, r2
 8015216:	c008      	stmia	r0!, {r3}
 8015218:	9b04      	ldr	r3, [sp, #16]
 801521a:	428b      	cmp	r3, r1
 801521c:	d2ec      	bcs.n	80151f8 <quorem+0xa8>
 801521e:	9b00      	ldr	r3, [sp, #0]
 8015220:	9a02      	ldr	r2, [sp, #8]
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	18d3      	adds	r3, r2, r3
 8015226:	681a      	ldr	r2, [r3, #0]
 8015228:	2a00      	cmp	r2, #0
 801522a:	d015      	beq.n	8015258 <quorem+0x108>
 801522c:	9801      	ldr	r0, [sp, #4]
 801522e:	b007      	add	sp, #28
 8015230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015232:	6823      	ldr	r3, [r4, #0]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d106      	bne.n	8015246 <quorem+0xf6>
 8015238:	9b00      	ldr	r3, [sp, #0]
 801523a:	3b01      	subs	r3, #1
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	9b02      	ldr	r3, [sp, #8]
 8015240:	3c04      	subs	r4, #4
 8015242:	42a3      	cmp	r3, r4
 8015244:	d3f5      	bcc.n	8015232 <quorem+0xe2>
 8015246:	9b00      	ldr	r3, [sp, #0]
 8015248:	6133      	str	r3, [r6, #16]
 801524a:	e7c7      	b.n	80151dc <quorem+0x8c>
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	2a00      	cmp	r2, #0
 8015250:	d106      	bne.n	8015260 <quorem+0x110>
 8015252:	9a00      	ldr	r2, [sp, #0]
 8015254:	3a01      	subs	r2, #1
 8015256:	9200      	str	r2, [sp, #0]
 8015258:	9a02      	ldr	r2, [sp, #8]
 801525a:	3b04      	subs	r3, #4
 801525c:	429a      	cmp	r2, r3
 801525e:	d3f5      	bcc.n	801524c <quorem+0xfc>
 8015260:	9b00      	ldr	r3, [sp, #0]
 8015262:	6133      	str	r3, [r6, #16]
 8015264:	e7e2      	b.n	801522c <quorem+0xdc>
	...

08015268 <_dtoa_r>:
 8015268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801526a:	b09d      	sub	sp, #116	; 0x74
 801526c:	9202      	str	r2, [sp, #8]
 801526e:	9303      	str	r3, [sp, #12]
 8015270:	9b02      	ldr	r3, [sp, #8]
 8015272:	9c03      	ldr	r4, [sp, #12]
 8015274:	9308      	str	r3, [sp, #32]
 8015276:	9409      	str	r4, [sp, #36]	; 0x24
 8015278:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801527a:	0007      	movs	r7, r0
 801527c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801527e:	2c00      	cmp	r4, #0
 8015280:	d10e      	bne.n	80152a0 <_dtoa_r+0x38>
 8015282:	2010      	movs	r0, #16
 8015284:	f7ff f9c6 	bl	8014614 <malloc>
 8015288:	1e02      	subs	r2, r0, #0
 801528a:	6278      	str	r0, [r7, #36]	; 0x24
 801528c:	d104      	bne.n	8015298 <_dtoa_r+0x30>
 801528e:	21ea      	movs	r1, #234	; 0xea
 8015290:	4bc7      	ldr	r3, [pc, #796]	; (80155b0 <_dtoa_r+0x348>)
 8015292:	48c8      	ldr	r0, [pc, #800]	; (80155b4 <_dtoa_r+0x34c>)
 8015294:	f001 fb4c 	bl	8016930 <__assert_func>
 8015298:	6044      	str	r4, [r0, #4]
 801529a:	6084      	str	r4, [r0, #8]
 801529c:	6004      	str	r4, [r0, #0]
 801529e:	60c4      	str	r4, [r0, #12]
 80152a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a2:	6819      	ldr	r1, [r3, #0]
 80152a4:	2900      	cmp	r1, #0
 80152a6:	d00a      	beq.n	80152be <_dtoa_r+0x56>
 80152a8:	685a      	ldr	r2, [r3, #4]
 80152aa:	2301      	movs	r3, #1
 80152ac:	4093      	lsls	r3, r2
 80152ae:	604a      	str	r2, [r1, #4]
 80152b0:	608b      	str	r3, [r1, #8]
 80152b2:	0038      	movs	r0, r7
 80152b4:	f000 fe56 	bl	8015f64 <_Bfree>
 80152b8:	2200      	movs	r2, #0
 80152ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152bc:	601a      	str	r2, [r3, #0]
 80152be:	9b03      	ldr	r3, [sp, #12]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	da20      	bge.n	8015306 <_dtoa_r+0x9e>
 80152c4:	2301      	movs	r3, #1
 80152c6:	602b      	str	r3, [r5, #0]
 80152c8:	9b03      	ldr	r3, [sp, #12]
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	085b      	lsrs	r3, r3, #1
 80152ce:	9309      	str	r3, [sp, #36]	; 0x24
 80152d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80152d2:	4bb9      	ldr	r3, [pc, #740]	; (80155b8 <_dtoa_r+0x350>)
 80152d4:	4ab8      	ldr	r2, [pc, #736]	; (80155b8 <_dtoa_r+0x350>)
 80152d6:	402b      	ands	r3, r5
 80152d8:	4293      	cmp	r3, r2
 80152da:	d117      	bne.n	801530c <_dtoa_r+0xa4>
 80152dc:	4bb7      	ldr	r3, [pc, #732]	; (80155bc <_dtoa_r+0x354>)
 80152de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80152e0:	0328      	lsls	r0, r5, #12
 80152e2:	6013      	str	r3, [r2, #0]
 80152e4:	9b02      	ldr	r3, [sp, #8]
 80152e6:	0b00      	lsrs	r0, r0, #12
 80152e8:	4318      	orrs	r0, r3
 80152ea:	d101      	bne.n	80152f0 <_dtoa_r+0x88>
 80152ec:	f000 fdbf 	bl	8015e6e <_dtoa_r+0xc06>
 80152f0:	48b3      	ldr	r0, [pc, #716]	; (80155c0 <_dtoa_r+0x358>)
 80152f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80152f4:	9006      	str	r0, [sp, #24]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d002      	beq.n	8015300 <_dtoa_r+0x98>
 80152fa:	4bb2      	ldr	r3, [pc, #712]	; (80155c4 <_dtoa_r+0x35c>)
 80152fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80152fe:	6013      	str	r3, [r2, #0]
 8015300:	9806      	ldr	r0, [sp, #24]
 8015302:	b01d      	add	sp, #116	; 0x74
 8015304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015306:	2300      	movs	r3, #0
 8015308:	602b      	str	r3, [r5, #0]
 801530a:	e7e1      	b.n	80152d0 <_dtoa_r+0x68>
 801530c:	9b08      	ldr	r3, [sp, #32]
 801530e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015310:	9312      	str	r3, [sp, #72]	; 0x48
 8015312:	9413      	str	r4, [sp, #76]	; 0x4c
 8015314:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015316:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015318:	2200      	movs	r2, #0
 801531a:	2300      	movs	r3, #0
 801531c:	f7eb f89c 	bl	8000458 <__aeabi_dcmpeq>
 8015320:	1e04      	subs	r4, r0, #0
 8015322:	d009      	beq.n	8015338 <_dtoa_r+0xd0>
 8015324:	2301      	movs	r3, #1
 8015326:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015328:	6013      	str	r3, [r2, #0]
 801532a:	4ba7      	ldr	r3, [pc, #668]	; (80155c8 <_dtoa_r+0x360>)
 801532c:	9306      	str	r3, [sp, #24]
 801532e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015330:	2b00      	cmp	r3, #0
 8015332:	d0e5      	beq.n	8015300 <_dtoa_r+0x98>
 8015334:	4ba5      	ldr	r3, [pc, #660]	; (80155cc <_dtoa_r+0x364>)
 8015336:	e7e1      	b.n	80152fc <_dtoa_r+0x94>
 8015338:	ab1a      	add	r3, sp, #104	; 0x68
 801533a:	9301      	str	r3, [sp, #4]
 801533c:	ab1b      	add	r3, sp, #108	; 0x6c
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	0038      	movs	r0, r7
 8015342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015346:	f001 f901 	bl	801654c <__d2b>
 801534a:	006e      	lsls	r6, r5, #1
 801534c:	9005      	str	r0, [sp, #20]
 801534e:	0d76      	lsrs	r6, r6, #21
 8015350:	d100      	bne.n	8015354 <_dtoa_r+0xec>
 8015352:	e07c      	b.n	801544e <_dtoa_r+0x1e6>
 8015354:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015356:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801535a:	4a9d      	ldr	r2, [pc, #628]	; (80155d0 <_dtoa_r+0x368>)
 801535c:	031b      	lsls	r3, r3, #12
 801535e:	0b1b      	lsrs	r3, r3, #12
 8015360:	431a      	orrs	r2, r3
 8015362:	0011      	movs	r1, r2
 8015364:	4b9b      	ldr	r3, [pc, #620]	; (80155d4 <_dtoa_r+0x36c>)
 8015366:	9418      	str	r4, [sp, #96]	; 0x60
 8015368:	18f6      	adds	r6, r6, r3
 801536a:	2200      	movs	r2, #0
 801536c:	4b9a      	ldr	r3, [pc, #616]	; (80155d8 <_dtoa_r+0x370>)
 801536e:	f7ed f963 	bl	8002638 <__aeabi_dsub>
 8015372:	4a9a      	ldr	r2, [pc, #616]	; (80155dc <_dtoa_r+0x374>)
 8015374:	4b9a      	ldr	r3, [pc, #616]	; (80155e0 <_dtoa_r+0x378>)
 8015376:	f7ec fef3 	bl	8002160 <__aeabi_dmul>
 801537a:	4a9a      	ldr	r2, [pc, #616]	; (80155e4 <_dtoa_r+0x37c>)
 801537c:	4b9a      	ldr	r3, [pc, #616]	; (80155e8 <_dtoa_r+0x380>)
 801537e:	f7eb ffb1 	bl	80012e4 <__aeabi_dadd>
 8015382:	0004      	movs	r4, r0
 8015384:	0030      	movs	r0, r6
 8015386:	000d      	movs	r5, r1
 8015388:	f7ed fd3c 	bl	8002e04 <__aeabi_i2d>
 801538c:	4a97      	ldr	r2, [pc, #604]	; (80155ec <_dtoa_r+0x384>)
 801538e:	4b98      	ldr	r3, [pc, #608]	; (80155f0 <_dtoa_r+0x388>)
 8015390:	f7ec fee6 	bl	8002160 <__aeabi_dmul>
 8015394:	0002      	movs	r2, r0
 8015396:	000b      	movs	r3, r1
 8015398:	0020      	movs	r0, r4
 801539a:	0029      	movs	r1, r5
 801539c:	f7eb ffa2 	bl	80012e4 <__aeabi_dadd>
 80153a0:	0004      	movs	r4, r0
 80153a2:	000d      	movs	r5, r1
 80153a4:	f7ed fcf8 	bl	8002d98 <__aeabi_d2iz>
 80153a8:	2200      	movs	r2, #0
 80153aa:	9002      	str	r0, [sp, #8]
 80153ac:	2300      	movs	r3, #0
 80153ae:	0020      	movs	r0, r4
 80153b0:	0029      	movs	r1, r5
 80153b2:	f7eb f857 	bl	8000464 <__aeabi_dcmplt>
 80153b6:	2800      	cmp	r0, #0
 80153b8:	d00b      	beq.n	80153d2 <_dtoa_r+0x16a>
 80153ba:	9802      	ldr	r0, [sp, #8]
 80153bc:	f7ed fd22 	bl	8002e04 <__aeabi_i2d>
 80153c0:	002b      	movs	r3, r5
 80153c2:	0022      	movs	r2, r4
 80153c4:	f7eb f848 	bl	8000458 <__aeabi_dcmpeq>
 80153c8:	4243      	negs	r3, r0
 80153ca:	4158      	adcs	r0, r3
 80153cc:	9b02      	ldr	r3, [sp, #8]
 80153ce:	1a1b      	subs	r3, r3, r0
 80153d0:	9302      	str	r3, [sp, #8]
 80153d2:	2301      	movs	r3, #1
 80153d4:	9316      	str	r3, [sp, #88]	; 0x58
 80153d6:	9b02      	ldr	r3, [sp, #8]
 80153d8:	2b16      	cmp	r3, #22
 80153da:	d80f      	bhi.n	80153fc <_dtoa_r+0x194>
 80153dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80153de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80153e0:	00da      	lsls	r2, r3, #3
 80153e2:	4b84      	ldr	r3, [pc, #528]	; (80155f4 <_dtoa_r+0x38c>)
 80153e4:	189b      	adds	r3, r3, r2
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	f7eb f83b 	bl	8000464 <__aeabi_dcmplt>
 80153ee:	2800      	cmp	r0, #0
 80153f0:	d049      	beq.n	8015486 <_dtoa_r+0x21e>
 80153f2:	9b02      	ldr	r3, [sp, #8]
 80153f4:	3b01      	subs	r3, #1
 80153f6:	9302      	str	r3, [sp, #8]
 80153f8:	2300      	movs	r3, #0
 80153fa:	9316      	str	r3, [sp, #88]	; 0x58
 80153fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80153fe:	1b9e      	subs	r6, r3, r6
 8015400:	2300      	movs	r3, #0
 8015402:	930a      	str	r3, [sp, #40]	; 0x28
 8015404:	0033      	movs	r3, r6
 8015406:	3b01      	subs	r3, #1
 8015408:	930d      	str	r3, [sp, #52]	; 0x34
 801540a:	d504      	bpl.n	8015416 <_dtoa_r+0x1ae>
 801540c:	2301      	movs	r3, #1
 801540e:	1b9b      	subs	r3, r3, r6
 8015410:	930a      	str	r3, [sp, #40]	; 0x28
 8015412:	2300      	movs	r3, #0
 8015414:	930d      	str	r3, [sp, #52]	; 0x34
 8015416:	9b02      	ldr	r3, [sp, #8]
 8015418:	2b00      	cmp	r3, #0
 801541a:	db36      	blt.n	801548a <_dtoa_r+0x222>
 801541c:	9a02      	ldr	r2, [sp, #8]
 801541e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015420:	4694      	mov	ip, r2
 8015422:	4463      	add	r3, ip
 8015424:	930d      	str	r3, [sp, #52]	; 0x34
 8015426:	2300      	movs	r3, #0
 8015428:	9215      	str	r2, [sp, #84]	; 0x54
 801542a:	930e      	str	r3, [sp, #56]	; 0x38
 801542c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801542e:	2401      	movs	r4, #1
 8015430:	2b09      	cmp	r3, #9
 8015432:	d864      	bhi.n	80154fe <_dtoa_r+0x296>
 8015434:	2b05      	cmp	r3, #5
 8015436:	dd02      	ble.n	801543e <_dtoa_r+0x1d6>
 8015438:	2400      	movs	r4, #0
 801543a:	3b04      	subs	r3, #4
 801543c:	9322      	str	r3, [sp, #136]	; 0x88
 801543e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015440:	1e98      	subs	r0, r3, #2
 8015442:	2803      	cmp	r0, #3
 8015444:	d864      	bhi.n	8015510 <_dtoa_r+0x2a8>
 8015446:	f7ea fe6d 	bl	8000124 <__gnu_thumb1_case_uqi>
 801544a:	3829      	.short	0x3829
 801544c:	5836      	.short	0x5836
 801544e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015450:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015452:	189e      	adds	r6, r3, r2
 8015454:	4b68      	ldr	r3, [pc, #416]	; (80155f8 <_dtoa_r+0x390>)
 8015456:	18f2      	adds	r2, r6, r3
 8015458:	2a20      	cmp	r2, #32
 801545a:	dd0f      	ble.n	801547c <_dtoa_r+0x214>
 801545c:	2340      	movs	r3, #64	; 0x40
 801545e:	1a9b      	subs	r3, r3, r2
 8015460:	409d      	lsls	r5, r3
 8015462:	4b66      	ldr	r3, [pc, #408]	; (80155fc <_dtoa_r+0x394>)
 8015464:	9802      	ldr	r0, [sp, #8]
 8015466:	18f3      	adds	r3, r6, r3
 8015468:	40d8      	lsrs	r0, r3
 801546a:	4328      	orrs	r0, r5
 801546c:	f7ed fcfa 	bl	8002e64 <__aeabi_ui2d>
 8015470:	2301      	movs	r3, #1
 8015472:	4c63      	ldr	r4, [pc, #396]	; (8015600 <_dtoa_r+0x398>)
 8015474:	3e01      	subs	r6, #1
 8015476:	1909      	adds	r1, r1, r4
 8015478:	9318      	str	r3, [sp, #96]	; 0x60
 801547a:	e776      	b.n	801536a <_dtoa_r+0x102>
 801547c:	2320      	movs	r3, #32
 801547e:	9802      	ldr	r0, [sp, #8]
 8015480:	1a9b      	subs	r3, r3, r2
 8015482:	4098      	lsls	r0, r3
 8015484:	e7f2      	b.n	801546c <_dtoa_r+0x204>
 8015486:	9016      	str	r0, [sp, #88]	; 0x58
 8015488:	e7b8      	b.n	80153fc <_dtoa_r+0x194>
 801548a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801548c:	9a02      	ldr	r2, [sp, #8]
 801548e:	1a9b      	subs	r3, r3, r2
 8015490:	930a      	str	r3, [sp, #40]	; 0x28
 8015492:	4253      	negs	r3, r2
 8015494:	930e      	str	r3, [sp, #56]	; 0x38
 8015496:	2300      	movs	r3, #0
 8015498:	9315      	str	r3, [sp, #84]	; 0x54
 801549a:	e7c7      	b.n	801542c <_dtoa_r+0x1c4>
 801549c:	2300      	movs	r3, #0
 801549e:	930f      	str	r3, [sp, #60]	; 0x3c
 80154a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80154a2:	930c      	str	r3, [sp, #48]	; 0x30
 80154a4:	9307      	str	r3, [sp, #28]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	dc13      	bgt.n	80154d2 <_dtoa_r+0x26a>
 80154aa:	2301      	movs	r3, #1
 80154ac:	001a      	movs	r2, r3
 80154ae:	930c      	str	r3, [sp, #48]	; 0x30
 80154b0:	9307      	str	r3, [sp, #28]
 80154b2:	9223      	str	r2, [sp, #140]	; 0x8c
 80154b4:	e00d      	b.n	80154d2 <_dtoa_r+0x26a>
 80154b6:	2301      	movs	r3, #1
 80154b8:	e7f1      	b.n	801549e <_dtoa_r+0x236>
 80154ba:	2300      	movs	r3, #0
 80154bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80154be:	930f      	str	r3, [sp, #60]	; 0x3c
 80154c0:	4694      	mov	ip, r2
 80154c2:	9b02      	ldr	r3, [sp, #8]
 80154c4:	4463      	add	r3, ip
 80154c6:	930c      	str	r3, [sp, #48]	; 0x30
 80154c8:	3301      	adds	r3, #1
 80154ca:	9307      	str	r3, [sp, #28]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dc00      	bgt.n	80154d2 <_dtoa_r+0x26a>
 80154d0:	2301      	movs	r3, #1
 80154d2:	2200      	movs	r2, #0
 80154d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154d6:	6042      	str	r2, [r0, #4]
 80154d8:	3204      	adds	r2, #4
 80154da:	0015      	movs	r5, r2
 80154dc:	3514      	adds	r5, #20
 80154de:	6841      	ldr	r1, [r0, #4]
 80154e0:	429d      	cmp	r5, r3
 80154e2:	d919      	bls.n	8015518 <_dtoa_r+0x2b0>
 80154e4:	0038      	movs	r0, r7
 80154e6:	f000 fcf9 	bl	8015edc <_Balloc>
 80154ea:	9006      	str	r0, [sp, #24]
 80154ec:	2800      	cmp	r0, #0
 80154ee:	d117      	bne.n	8015520 <_dtoa_r+0x2b8>
 80154f0:	21d5      	movs	r1, #213	; 0xd5
 80154f2:	0002      	movs	r2, r0
 80154f4:	4b43      	ldr	r3, [pc, #268]	; (8015604 <_dtoa_r+0x39c>)
 80154f6:	0049      	lsls	r1, r1, #1
 80154f8:	e6cb      	b.n	8015292 <_dtoa_r+0x2a>
 80154fa:	2301      	movs	r3, #1
 80154fc:	e7de      	b.n	80154bc <_dtoa_r+0x254>
 80154fe:	2300      	movs	r3, #0
 8015500:	940f      	str	r4, [sp, #60]	; 0x3c
 8015502:	9322      	str	r3, [sp, #136]	; 0x88
 8015504:	3b01      	subs	r3, #1
 8015506:	930c      	str	r3, [sp, #48]	; 0x30
 8015508:	9307      	str	r3, [sp, #28]
 801550a:	2200      	movs	r2, #0
 801550c:	3313      	adds	r3, #19
 801550e:	e7d0      	b.n	80154b2 <_dtoa_r+0x24a>
 8015510:	2301      	movs	r3, #1
 8015512:	930f      	str	r3, [sp, #60]	; 0x3c
 8015514:	3b02      	subs	r3, #2
 8015516:	e7f6      	b.n	8015506 <_dtoa_r+0x29e>
 8015518:	3101      	adds	r1, #1
 801551a:	6041      	str	r1, [r0, #4]
 801551c:	0052      	lsls	r2, r2, #1
 801551e:	e7dc      	b.n	80154da <_dtoa_r+0x272>
 8015520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015522:	9a06      	ldr	r2, [sp, #24]
 8015524:	601a      	str	r2, [r3, #0]
 8015526:	9b07      	ldr	r3, [sp, #28]
 8015528:	2b0e      	cmp	r3, #14
 801552a:	d900      	bls.n	801552e <_dtoa_r+0x2c6>
 801552c:	e0eb      	b.n	8015706 <_dtoa_r+0x49e>
 801552e:	2c00      	cmp	r4, #0
 8015530:	d100      	bne.n	8015534 <_dtoa_r+0x2cc>
 8015532:	e0e8      	b.n	8015706 <_dtoa_r+0x49e>
 8015534:	9b02      	ldr	r3, [sp, #8]
 8015536:	2b00      	cmp	r3, #0
 8015538:	dd68      	ble.n	801560c <_dtoa_r+0x3a4>
 801553a:	001a      	movs	r2, r3
 801553c:	210f      	movs	r1, #15
 801553e:	4b2d      	ldr	r3, [pc, #180]	; (80155f4 <_dtoa_r+0x38c>)
 8015540:	400a      	ands	r2, r1
 8015542:	00d2      	lsls	r2, r2, #3
 8015544:	189b      	adds	r3, r3, r2
 8015546:	681d      	ldr	r5, [r3, #0]
 8015548:	685e      	ldr	r6, [r3, #4]
 801554a:	9b02      	ldr	r3, [sp, #8]
 801554c:	111c      	asrs	r4, r3, #4
 801554e:	2302      	movs	r3, #2
 8015550:	9310      	str	r3, [sp, #64]	; 0x40
 8015552:	9b02      	ldr	r3, [sp, #8]
 8015554:	05db      	lsls	r3, r3, #23
 8015556:	d50b      	bpl.n	8015570 <_dtoa_r+0x308>
 8015558:	4b2b      	ldr	r3, [pc, #172]	; (8015608 <_dtoa_r+0x3a0>)
 801555a:	400c      	ands	r4, r1
 801555c:	6a1a      	ldr	r2, [r3, #32]
 801555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015560:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015562:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015564:	f7ec f9fa 	bl	800195c <__aeabi_ddiv>
 8015568:	2303      	movs	r3, #3
 801556a:	9008      	str	r0, [sp, #32]
 801556c:	9109      	str	r1, [sp, #36]	; 0x24
 801556e:	9310      	str	r3, [sp, #64]	; 0x40
 8015570:	4b25      	ldr	r3, [pc, #148]	; (8015608 <_dtoa_r+0x3a0>)
 8015572:	9314      	str	r3, [sp, #80]	; 0x50
 8015574:	2c00      	cmp	r4, #0
 8015576:	d108      	bne.n	801558a <_dtoa_r+0x322>
 8015578:	9808      	ldr	r0, [sp, #32]
 801557a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801557c:	002a      	movs	r2, r5
 801557e:	0033      	movs	r3, r6
 8015580:	f7ec f9ec 	bl	800195c <__aeabi_ddiv>
 8015584:	9008      	str	r0, [sp, #32]
 8015586:	9109      	str	r1, [sp, #36]	; 0x24
 8015588:	e05c      	b.n	8015644 <_dtoa_r+0x3dc>
 801558a:	2301      	movs	r3, #1
 801558c:	421c      	tst	r4, r3
 801558e:	d00b      	beq.n	80155a8 <_dtoa_r+0x340>
 8015590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015592:	0028      	movs	r0, r5
 8015594:	3301      	adds	r3, #1
 8015596:	9310      	str	r3, [sp, #64]	; 0x40
 8015598:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801559a:	0031      	movs	r1, r6
 801559c:	681a      	ldr	r2, [r3, #0]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	f7ec fdde 	bl	8002160 <__aeabi_dmul>
 80155a4:	0005      	movs	r5, r0
 80155a6:	000e      	movs	r6, r1
 80155a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155aa:	1064      	asrs	r4, r4, #1
 80155ac:	3308      	adds	r3, #8
 80155ae:	e7e0      	b.n	8015572 <_dtoa_r+0x30a>
 80155b0:	08018a4d 	.word	0x08018a4d
 80155b4:	08018a64 	.word	0x08018a64
 80155b8:	7ff00000 	.word	0x7ff00000
 80155bc:	0000270f 	.word	0x0000270f
 80155c0:	08018a49 	.word	0x08018a49
 80155c4:	08018a4c 	.word	0x08018a4c
 80155c8:	08018a1c 	.word	0x08018a1c
 80155cc:	08018a1d 	.word	0x08018a1d
 80155d0:	3ff00000 	.word	0x3ff00000
 80155d4:	fffffc01 	.word	0xfffffc01
 80155d8:	3ff80000 	.word	0x3ff80000
 80155dc:	636f4361 	.word	0x636f4361
 80155e0:	3fd287a7 	.word	0x3fd287a7
 80155e4:	8b60c8b3 	.word	0x8b60c8b3
 80155e8:	3fc68a28 	.word	0x3fc68a28
 80155ec:	509f79fb 	.word	0x509f79fb
 80155f0:	3fd34413 	.word	0x3fd34413
 80155f4:	08018b58 	.word	0x08018b58
 80155f8:	00000432 	.word	0x00000432
 80155fc:	00000412 	.word	0x00000412
 8015600:	fe100000 	.word	0xfe100000
 8015604:	08018abf 	.word	0x08018abf
 8015608:	08018b30 	.word	0x08018b30
 801560c:	2302      	movs	r3, #2
 801560e:	9310      	str	r3, [sp, #64]	; 0x40
 8015610:	9b02      	ldr	r3, [sp, #8]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d016      	beq.n	8015644 <_dtoa_r+0x3dc>
 8015616:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015618:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801561a:	425c      	negs	r4, r3
 801561c:	230f      	movs	r3, #15
 801561e:	4ab6      	ldr	r2, [pc, #728]	; (80158f8 <_dtoa_r+0x690>)
 8015620:	4023      	ands	r3, r4
 8015622:	00db      	lsls	r3, r3, #3
 8015624:	18d3      	adds	r3, r2, r3
 8015626:	681a      	ldr	r2, [r3, #0]
 8015628:	685b      	ldr	r3, [r3, #4]
 801562a:	f7ec fd99 	bl	8002160 <__aeabi_dmul>
 801562e:	2601      	movs	r6, #1
 8015630:	2300      	movs	r3, #0
 8015632:	9008      	str	r0, [sp, #32]
 8015634:	9109      	str	r1, [sp, #36]	; 0x24
 8015636:	4db1      	ldr	r5, [pc, #708]	; (80158fc <_dtoa_r+0x694>)
 8015638:	1124      	asrs	r4, r4, #4
 801563a:	2c00      	cmp	r4, #0
 801563c:	d000      	beq.n	8015640 <_dtoa_r+0x3d8>
 801563e:	e094      	b.n	801576a <_dtoa_r+0x502>
 8015640:	2b00      	cmp	r3, #0
 8015642:	d19f      	bne.n	8015584 <_dtoa_r+0x31c>
 8015644:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015646:	2b00      	cmp	r3, #0
 8015648:	d100      	bne.n	801564c <_dtoa_r+0x3e4>
 801564a:	e09b      	b.n	8015784 <_dtoa_r+0x51c>
 801564c:	9c08      	ldr	r4, [sp, #32]
 801564e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015650:	2200      	movs	r2, #0
 8015652:	0020      	movs	r0, r4
 8015654:	0029      	movs	r1, r5
 8015656:	4baa      	ldr	r3, [pc, #680]	; (8015900 <_dtoa_r+0x698>)
 8015658:	f7ea ff04 	bl	8000464 <__aeabi_dcmplt>
 801565c:	2800      	cmp	r0, #0
 801565e:	d100      	bne.n	8015662 <_dtoa_r+0x3fa>
 8015660:	e090      	b.n	8015784 <_dtoa_r+0x51c>
 8015662:	9b07      	ldr	r3, [sp, #28]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d100      	bne.n	801566a <_dtoa_r+0x402>
 8015668:	e08c      	b.n	8015784 <_dtoa_r+0x51c>
 801566a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801566c:	2b00      	cmp	r3, #0
 801566e:	dd46      	ble.n	80156fe <_dtoa_r+0x496>
 8015670:	9b02      	ldr	r3, [sp, #8]
 8015672:	2200      	movs	r2, #0
 8015674:	0020      	movs	r0, r4
 8015676:	0029      	movs	r1, r5
 8015678:	1e5e      	subs	r6, r3, #1
 801567a:	4ba2      	ldr	r3, [pc, #648]	; (8015904 <_dtoa_r+0x69c>)
 801567c:	f7ec fd70 	bl	8002160 <__aeabi_dmul>
 8015680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015682:	9008      	str	r0, [sp, #32]
 8015684:	9109      	str	r1, [sp, #36]	; 0x24
 8015686:	3301      	adds	r3, #1
 8015688:	9310      	str	r3, [sp, #64]	; 0x40
 801568a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801568c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801568e:	9c08      	ldr	r4, [sp, #32]
 8015690:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015692:	9314      	str	r3, [sp, #80]	; 0x50
 8015694:	f7ed fbb6 	bl	8002e04 <__aeabi_i2d>
 8015698:	0022      	movs	r2, r4
 801569a:	002b      	movs	r3, r5
 801569c:	f7ec fd60 	bl	8002160 <__aeabi_dmul>
 80156a0:	2200      	movs	r2, #0
 80156a2:	4b99      	ldr	r3, [pc, #612]	; (8015908 <_dtoa_r+0x6a0>)
 80156a4:	f7eb fe1e 	bl	80012e4 <__aeabi_dadd>
 80156a8:	9010      	str	r0, [sp, #64]	; 0x40
 80156aa:	9111      	str	r1, [sp, #68]	; 0x44
 80156ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80156ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156b0:	9208      	str	r2, [sp, #32]
 80156b2:	9309      	str	r3, [sp, #36]	; 0x24
 80156b4:	4a95      	ldr	r2, [pc, #596]	; (801590c <_dtoa_r+0x6a4>)
 80156b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156b8:	4694      	mov	ip, r2
 80156ba:	4463      	add	r3, ip
 80156bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80156be:	9309      	str	r3, [sp, #36]	; 0x24
 80156c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d161      	bne.n	801578a <_dtoa_r+0x522>
 80156c6:	2200      	movs	r2, #0
 80156c8:	0020      	movs	r0, r4
 80156ca:	0029      	movs	r1, r5
 80156cc:	4b90      	ldr	r3, [pc, #576]	; (8015910 <_dtoa_r+0x6a8>)
 80156ce:	f7ec ffb3 	bl	8002638 <__aeabi_dsub>
 80156d2:	9a08      	ldr	r2, [sp, #32]
 80156d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80156d6:	0004      	movs	r4, r0
 80156d8:	000d      	movs	r5, r1
 80156da:	f7ea fed7 	bl	800048c <__aeabi_dcmpgt>
 80156de:	2800      	cmp	r0, #0
 80156e0:	d000      	beq.n	80156e4 <_dtoa_r+0x47c>
 80156e2:	e2af      	b.n	8015c44 <_dtoa_r+0x9dc>
 80156e4:	488b      	ldr	r0, [pc, #556]	; (8015914 <_dtoa_r+0x6ac>)
 80156e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80156e8:	4684      	mov	ip, r0
 80156ea:	4461      	add	r1, ip
 80156ec:	000b      	movs	r3, r1
 80156ee:	0020      	movs	r0, r4
 80156f0:	0029      	movs	r1, r5
 80156f2:	9a08      	ldr	r2, [sp, #32]
 80156f4:	f7ea feb6 	bl	8000464 <__aeabi_dcmplt>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	d000      	beq.n	80156fe <_dtoa_r+0x496>
 80156fc:	e29f      	b.n	8015c3e <_dtoa_r+0x9d6>
 80156fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015700:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015702:	9308      	str	r3, [sp, #32]
 8015704:	9409      	str	r4, [sp, #36]	; 0x24
 8015706:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015708:	2b00      	cmp	r3, #0
 801570a:	da00      	bge.n	801570e <_dtoa_r+0x4a6>
 801570c:	e172      	b.n	80159f4 <_dtoa_r+0x78c>
 801570e:	9a02      	ldr	r2, [sp, #8]
 8015710:	2a0e      	cmp	r2, #14
 8015712:	dd00      	ble.n	8015716 <_dtoa_r+0x4ae>
 8015714:	e16e      	b.n	80159f4 <_dtoa_r+0x78c>
 8015716:	4b78      	ldr	r3, [pc, #480]	; (80158f8 <_dtoa_r+0x690>)
 8015718:	00d2      	lsls	r2, r2, #3
 801571a:	189b      	adds	r3, r3, r2
 801571c:	685c      	ldr	r4, [r3, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	930a      	str	r3, [sp, #40]	; 0x28
 8015722:	940b      	str	r4, [sp, #44]	; 0x2c
 8015724:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015726:	2b00      	cmp	r3, #0
 8015728:	db00      	blt.n	801572c <_dtoa_r+0x4c4>
 801572a:	e0f7      	b.n	801591c <_dtoa_r+0x6b4>
 801572c:	9b07      	ldr	r3, [sp, #28]
 801572e:	2b00      	cmp	r3, #0
 8015730:	dd00      	ble.n	8015734 <_dtoa_r+0x4cc>
 8015732:	e0f3      	b.n	801591c <_dtoa_r+0x6b4>
 8015734:	d000      	beq.n	8015738 <_dtoa_r+0x4d0>
 8015736:	e282      	b.n	8015c3e <_dtoa_r+0x9d6>
 8015738:	980a      	ldr	r0, [sp, #40]	; 0x28
 801573a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801573c:	2200      	movs	r2, #0
 801573e:	4b74      	ldr	r3, [pc, #464]	; (8015910 <_dtoa_r+0x6a8>)
 8015740:	f7ec fd0e 	bl	8002160 <__aeabi_dmul>
 8015744:	9a08      	ldr	r2, [sp, #32]
 8015746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015748:	f7ea feaa 	bl	80004a0 <__aeabi_dcmpge>
 801574c:	9e07      	ldr	r6, [sp, #28]
 801574e:	0035      	movs	r5, r6
 8015750:	2800      	cmp	r0, #0
 8015752:	d000      	beq.n	8015756 <_dtoa_r+0x4ee>
 8015754:	e259      	b.n	8015c0a <_dtoa_r+0x9a2>
 8015756:	9b06      	ldr	r3, [sp, #24]
 8015758:	9a06      	ldr	r2, [sp, #24]
 801575a:	3301      	adds	r3, #1
 801575c:	9308      	str	r3, [sp, #32]
 801575e:	2331      	movs	r3, #49	; 0x31
 8015760:	7013      	strb	r3, [r2, #0]
 8015762:	9b02      	ldr	r3, [sp, #8]
 8015764:	3301      	adds	r3, #1
 8015766:	9302      	str	r3, [sp, #8]
 8015768:	e254      	b.n	8015c14 <_dtoa_r+0x9ac>
 801576a:	4234      	tst	r4, r6
 801576c:	d007      	beq.n	801577e <_dtoa_r+0x516>
 801576e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015770:	3301      	adds	r3, #1
 8015772:	9310      	str	r3, [sp, #64]	; 0x40
 8015774:	682a      	ldr	r2, [r5, #0]
 8015776:	686b      	ldr	r3, [r5, #4]
 8015778:	f7ec fcf2 	bl	8002160 <__aeabi_dmul>
 801577c:	0033      	movs	r3, r6
 801577e:	1064      	asrs	r4, r4, #1
 8015780:	3508      	adds	r5, #8
 8015782:	e75a      	b.n	801563a <_dtoa_r+0x3d2>
 8015784:	9e02      	ldr	r6, [sp, #8]
 8015786:	9b07      	ldr	r3, [sp, #28]
 8015788:	e780      	b.n	801568c <_dtoa_r+0x424>
 801578a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801578c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801578e:	1e5a      	subs	r2, r3, #1
 8015790:	4b59      	ldr	r3, [pc, #356]	; (80158f8 <_dtoa_r+0x690>)
 8015792:	00d2      	lsls	r2, r2, #3
 8015794:	189b      	adds	r3, r3, r2
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	685b      	ldr	r3, [r3, #4]
 801579a:	2900      	cmp	r1, #0
 801579c:	d051      	beq.n	8015842 <_dtoa_r+0x5da>
 801579e:	2000      	movs	r0, #0
 80157a0:	495d      	ldr	r1, [pc, #372]	; (8015918 <_dtoa_r+0x6b0>)
 80157a2:	f7ec f8db 	bl	800195c <__aeabi_ddiv>
 80157a6:	9a08      	ldr	r2, [sp, #32]
 80157a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157aa:	f7ec ff45 	bl	8002638 <__aeabi_dsub>
 80157ae:	9a06      	ldr	r2, [sp, #24]
 80157b0:	9b06      	ldr	r3, [sp, #24]
 80157b2:	4694      	mov	ip, r2
 80157b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80157b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157b8:	9010      	str	r0, [sp, #64]	; 0x40
 80157ba:	9111      	str	r1, [sp, #68]	; 0x44
 80157bc:	4463      	add	r3, ip
 80157be:	9319      	str	r3, [sp, #100]	; 0x64
 80157c0:	0029      	movs	r1, r5
 80157c2:	0020      	movs	r0, r4
 80157c4:	f7ed fae8 	bl	8002d98 <__aeabi_d2iz>
 80157c8:	9014      	str	r0, [sp, #80]	; 0x50
 80157ca:	f7ed fb1b 	bl	8002e04 <__aeabi_i2d>
 80157ce:	0002      	movs	r2, r0
 80157d0:	000b      	movs	r3, r1
 80157d2:	0020      	movs	r0, r4
 80157d4:	0029      	movs	r1, r5
 80157d6:	f7ec ff2f 	bl	8002638 <__aeabi_dsub>
 80157da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80157de:	3301      	adds	r3, #1
 80157e0:	9308      	str	r3, [sp, #32]
 80157e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157e4:	0004      	movs	r4, r0
 80157e6:	3330      	adds	r3, #48	; 0x30
 80157e8:	7013      	strb	r3, [r2, #0]
 80157ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80157ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157ee:	000d      	movs	r5, r1
 80157f0:	f7ea fe38 	bl	8000464 <__aeabi_dcmplt>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d175      	bne.n	80158e4 <_dtoa_r+0x67c>
 80157f8:	0022      	movs	r2, r4
 80157fa:	002b      	movs	r3, r5
 80157fc:	2000      	movs	r0, #0
 80157fe:	4940      	ldr	r1, [pc, #256]	; (8015900 <_dtoa_r+0x698>)
 8015800:	f7ec ff1a 	bl	8002638 <__aeabi_dsub>
 8015804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015808:	f7ea fe2c 	bl	8000464 <__aeabi_dcmplt>
 801580c:	2800      	cmp	r0, #0
 801580e:	d000      	beq.n	8015812 <_dtoa_r+0x5aa>
 8015810:	e0d2      	b.n	80159b8 <_dtoa_r+0x750>
 8015812:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015814:	9a08      	ldr	r2, [sp, #32]
 8015816:	4293      	cmp	r3, r2
 8015818:	d100      	bne.n	801581c <_dtoa_r+0x5b4>
 801581a:	e770      	b.n	80156fe <_dtoa_r+0x496>
 801581c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801581e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015820:	2200      	movs	r2, #0
 8015822:	4b38      	ldr	r3, [pc, #224]	; (8015904 <_dtoa_r+0x69c>)
 8015824:	f7ec fc9c 	bl	8002160 <__aeabi_dmul>
 8015828:	4b36      	ldr	r3, [pc, #216]	; (8015904 <_dtoa_r+0x69c>)
 801582a:	9010      	str	r0, [sp, #64]	; 0x40
 801582c:	9111      	str	r1, [sp, #68]	; 0x44
 801582e:	2200      	movs	r2, #0
 8015830:	0020      	movs	r0, r4
 8015832:	0029      	movs	r1, r5
 8015834:	f7ec fc94 	bl	8002160 <__aeabi_dmul>
 8015838:	9b08      	ldr	r3, [sp, #32]
 801583a:	0004      	movs	r4, r0
 801583c:	000d      	movs	r5, r1
 801583e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015840:	e7be      	b.n	80157c0 <_dtoa_r+0x558>
 8015842:	9808      	ldr	r0, [sp, #32]
 8015844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015846:	f7ec fc8b 	bl	8002160 <__aeabi_dmul>
 801584a:	9a06      	ldr	r2, [sp, #24]
 801584c:	9b06      	ldr	r3, [sp, #24]
 801584e:	4694      	mov	ip, r2
 8015850:	9308      	str	r3, [sp, #32]
 8015852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015854:	9010      	str	r0, [sp, #64]	; 0x40
 8015856:	9111      	str	r1, [sp, #68]	; 0x44
 8015858:	4463      	add	r3, ip
 801585a:	9319      	str	r3, [sp, #100]	; 0x64
 801585c:	0029      	movs	r1, r5
 801585e:	0020      	movs	r0, r4
 8015860:	f7ed fa9a 	bl	8002d98 <__aeabi_d2iz>
 8015864:	9017      	str	r0, [sp, #92]	; 0x5c
 8015866:	f7ed facd 	bl	8002e04 <__aeabi_i2d>
 801586a:	0002      	movs	r2, r0
 801586c:	000b      	movs	r3, r1
 801586e:	0020      	movs	r0, r4
 8015870:	0029      	movs	r1, r5
 8015872:	f7ec fee1 	bl	8002638 <__aeabi_dsub>
 8015876:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015878:	9a08      	ldr	r2, [sp, #32]
 801587a:	3330      	adds	r3, #48	; 0x30
 801587c:	7013      	strb	r3, [r2, #0]
 801587e:	0013      	movs	r3, r2
 8015880:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015882:	3301      	adds	r3, #1
 8015884:	0004      	movs	r4, r0
 8015886:	000d      	movs	r5, r1
 8015888:	9308      	str	r3, [sp, #32]
 801588a:	4293      	cmp	r3, r2
 801588c:	d12c      	bne.n	80158e8 <_dtoa_r+0x680>
 801588e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015890:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015892:	9a06      	ldr	r2, [sp, #24]
 8015894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015896:	4694      	mov	ip, r2
 8015898:	4463      	add	r3, ip
 801589a:	2200      	movs	r2, #0
 801589c:	9308      	str	r3, [sp, #32]
 801589e:	4b1e      	ldr	r3, [pc, #120]	; (8015918 <_dtoa_r+0x6b0>)
 80158a0:	f7eb fd20 	bl	80012e4 <__aeabi_dadd>
 80158a4:	0002      	movs	r2, r0
 80158a6:	000b      	movs	r3, r1
 80158a8:	0020      	movs	r0, r4
 80158aa:	0029      	movs	r1, r5
 80158ac:	f7ea fdee 	bl	800048c <__aeabi_dcmpgt>
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d000      	beq.n	80158b6 <_dtoa_r+0x64e>
 80158b4:	e080      	b.n	80159b8 <_dtoa_r+0x750>
 80158b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158ba:	2000      	movs	r0, #0
 80158bc:	4916      	ldr	r1, [pc, #88]	; (8015918 <_dtoa_r+0x6b0>)
 80158be:	f7ec febb 	bl	8002638 <__aeabi_dsub>
 80158c2:	0002      	movs	r2, r0
 80158c4:	000b      	movs	r3, r1
 80158c6:	0020      	movs	r0, r4
 80158c8:	0029      	movs	r1, r5
 80158ca:	f7ea fdcb 	bl	8000464 <__aeabi_dcmplt>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	d100      	bne.n	80158d4 <_dtoa_r+0x66c>
 80158d2:	e714      	b.n	80156fe <_dtoa_r+0x496>
 80158d4:	9b08      	ldr	r3, [sp, #32]
 80158d6:	001a      	movs	r2, r3
 80158d8:	3a01      	subs	r2, #1
 80158da:	9208      	str	r2, [sp, #32]
 80158dc:	7812      	ldrb	r2, [r2, #0]
 80158de:	2a30      	cmp	r2, #48	; 0x30
 80158e0:	d0f8      	beq.n	80158d4 <_dtoa_r+0x66c>
 80158e2:	9308      	str	r3, [sp, #32]
 80158e4:	9602      	str	r6, [sp, #8]
 80158e6:	e055      	b.n	8015994 <_dtoa_r+0x72c>
 80158e8:	2200      	movs	r2, #0
 80158ea:	4b06      	ldr	r3, [pc, #24]	; (8015904 <_dtoa_r+0x69c>)
 80158ec:	f7ec fc38 	bl	8002160 <__aeabi_dmul>
 80158f0:	0004      	movs	r4, r0
 80158f2:	000d      	movs	r5, r1
 80158f4:	e7b2      	b.n	801585c <_dtoa_r+0x5f4>
 80158f6:	46c0      	nop			; (mov r8, r8)
 80158f8:	08018b58 	.word	0x08018b58
 80158fc:	08018b30 	.word	0x08018b30
 8015900:	3ff00000 	.word	0x3ff00000
 8015904:	40240000 	.word	0x40240000
 8015908:	401c0000 	.word	0x401c0000
 801590c:	fcc00000 	.word	0xfcc00000
 8015910:	40140000 	.word	0x40140000
 8015914:	7cc00000 	.word	0x7cc00000
 8015918:	3fe00000 	.word	0x3fe00000
 801591c:	9b07      	ldr	r3, [sp, #28]
 801591e:	9e06      	ldr	r6, [sp, #24]
 8015920:	3b01      	subs	r3, #1
 8015922:	199b      	adds	r3, r3, r6
 8015924:	930c      	str	r3, [sp, #48]	; 0x30
 8015926:	9c08      	ldr	r4, [sp, #32]
 8015928:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801592a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801592c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801592e:	0020      	movs	r0, r4
 8015930:	0029      	movs	r1, r5
 8015932:	f7ec f813 	bl	800195c <__aeabi_ddiv>
 8015936:	f7ed fa2f 	bl	8002d98 <__aeabi_d2iz>
 801593a:	9007      	str	r0, [sp, #28]
 801593c:	f7ed fa62 	bl	8002e04 <__aeabi_i2d>
 8015940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015944:	f7ec fc0c 	bl	8002160 <__aeabi_dmul>
 8015948:	0002      	movs	r2, r0
 801594a:	000b      	movs	r3, r1
 801594c:	0020      	movs	r0, r4
 801594e:	0029      	movs	r1, r5
 8015950:	f7ec fe72 	bl	8002638 <__aeabi_dsub>
 8015954:	0033      	movs	r3, r6
 8015956:	9a07      	ldr	r2, [sp, #28]
 8015958:	3601      	adds	r6, #1
 801595a:	3230      	adds	r2, #48	; 0x30
 801595c:	701a      	strb	r2, [r3, #0]
 801595e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015960:	9608      	str	r6, [sp, #32]
 8015962:	429a      	cmp	r2, r3
 8015964:	d139      	bne.n	80159da <_dtoa_r+0x772>
 8015966:	0002      	movs	r2, r0
 8015968:	000b      	movs	r3, r1
 801596a:	f7eb fcbb 	bl	80012e4 <__aeabi_dadd>
 801596e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015972:	0004      	movs	r4, r0
 8015974:	000d      	movs	r5, r1
 8015976:	f7ea fd89 	bl	800048c <__aeabi_dcmpgt>
 801597a:	2800      	cmp	r0, #0
 801597c:	d11b      	bne.n	80159b6 <_dtoa_r+0x74e>
 801597e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015982:	0020      	movs	r0, r4
 8015984:	0029      	movs	r1, r5
 8015986:	f7ea fd67 	bl	8000458 <__aeabi_dcmpeq>
 801598a:	2800      	cmp	r0, #0
 801598c:	d002      	beq.n	8015994 <_dtoa_r+0x72c>
 801598e:	9b07      	ldr	r3, [sp, #28]
 8015990:	07db      	lsls	r3, r3, #31
 8015992:	d410      	bmi.n	80159b6 <_dtoa_r+0x74e>
 8015994:	0038      	movs	r0, r7
 8015996:	9905      	ldr	r1, [sp, #20]
 8015998:	f000 fae4 	bl	8015f64 <_Bfree>
 801599c:	2300      	movs	r3, #0
 801599e:	9a08      	ldr	r2, [sp, #32]
 80159a0:	9802      	ldr	r0, [sp, #8]
 80159a2:	7013      	strb	r3, [r2, #0]
 80159a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80159a6:	3001      	adds	r0, #1
 80159a8:	6018      	str	r0, [r3, #0]
 80159aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d100      	bne.n	80159b2 <_dtoa_r+0x74a>
 80159b0:	e4a6      	b.n	8015300 <_dtoa_r+0x98>
 80159b2:	601a      	str	r2, [r3, #0]
 80159b4:	e4a4      	b.n	8015300 <_dtoa_r+0x98>
 80159b6:	9e02      	ldr	r6, [sp, #8]
 80159b8:	9b08      	ldr	r3, [sp, #32]
 80159ba:	9308      	str	r3, [sp, #32]
 80159bc:	3b01      	subs	r3, #1
 80159be:	781a      	ldrb	r2, [r3, #0]
 80159c0:	2a39      	cmp	r2, #57	; 0x39
 80159c2:	d106      	bne.n	80159d2 <_dtoa_r+0x76a>
 80159c4:	9a06      	ldr	r2, [sp, #24]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d1f7      	bne.n	80159ba <_dtoa_r+0x752>
 80159ca:	2230      	movs	r2, #48	; 0x30
 80159cc:	9906      	ldr	r1, [sp, #24]
 80159ce:	3601      	adds	r6, #1
 80159d0:	700a      	strb	r2, [r1, #0]
 80159d2:	781a      	ldrb	r2, [r3, #0]
 80159d4:	3201      	adds	r2, #1
 80159d6:	701a      	strb	r2, [r3, #0]
 80159d8:	e784      	b.n	80158e4 <_dtoa_r+0x67c>
 80159da:	2200      	movs	r2, #0
 80159dc:	4baa      	ldr	r3, [pc, #680]	; (8015c88 <_dtoa_r+0xa20>)
 80159de:	f7ec fbbf 	bl	8002160 <__aeabi_dmul>
 80159e2:	2200      	movs	r2, #0
 80159e4:	2300      	movs	r3, #0
 80159e6:	0004      	movs	r4, r0
 80159e8:	000d      	movs	r5, r1
 80159ea:	f7ea fd35 	bl	8000458 <__aeabi_dcmpeq>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d09b      	beq.n	801592a <_dtoa_r+0x6c2>
 80159f2:	e7cf      	b.n	8015994 <_dtoa_r+0x72c>
 80159f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80159f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80159f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80159fa:	2d00      	cmp	r5, #0
 80159fc:	d012      	beq.n	8015a24 <_dtoa_r+0x7bc>
 80159fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015a00:	2a01      	cmp	r2, #1
 8015a02:	dc66      	bgt.n	8015ad2 <_dtoa_r+0x86a>
 8015a04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a06:	2a00      	cmp	r2, #0
 8015a08:	d05d      	beq.n	8015ac6 <_dtoa_r+0x85e>
 8015a0a:	4aa0      	ldr	r2, [pc, #640]	; (8015c8c <_dtoa_r+0xa24>)
 8015a0c:	189b      	adds	r3, r3, r2
 8015a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a10:	2101      	movs	r1, #1
 8015a12:	18d2      	adds	r2, r2, r3
 8015a14:	920a      	str	r2, [sp, #40]	; 0x28
 8015a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a18:	0038      	movs	r0, r7
 8015a1a:	18d3      	adds	r3, r2, r3
 8015a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8015a1e:	f000 fb51 	bl	80160c4 <__i2b>
 8015a22:	0005      	movs	r5, r0
 8015a24:	2c00      	cmp	r4, #0
 8015a26:	dd0e      	ble.n	8015a46 <_dtoa_r+0x7de>
 8015a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	dd0b      	ble.n	8015a46 <_dtoa_r+0x7de>
 8015a2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a30:	0023      	movs	r3, r4
 8015a32:	4294      	cmp	r4, r2
 8015a34:	dd00      	ble.n	8015a38 <_dtoa_r+0x7d0>
 8015a36:	0013      	movs	r3, r2
 8015a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a3a:	1ae4      	subs	r4, r4, r3
 8015a3c:	1ad2      	subs	r2, r2, r3
 8015a3e:	920a      	str	r2, [sp, #40]	; 0x28
 8015a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a42:	1ad3      	subs	r3, r2, r3
 8015a44:	930d      	str	r3, [sp, #52]	; 0x34
 8015a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d01f      	beq.n	8015a8c <_dtoa_r+0x824>
 8015a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d054      	beq.n	8015afc <_dtoa_r+0x894>
 8015a52:	2e00      	cmp	r6, #0
 8015a54:	dd11      	ble.n	8015a7a <_dtoa_r+0x812>
 8015a56:	0029      	movs	r1, r5
 8015a58:	0032      	movs	r2, r6
 8015a5a:	0038      	movs	r0, r7
 8015a5c:	f000 fbf8 	bl	8016250 <__pow5mult>
 8015a60:	9a05      	ldr	r2, [sp, #20]
 8015a62:	0001      	movs	r1, r0
 8015a64:	0005      	movs	r5, r0
 8015a66:	0038      	movs	r0, r7
 8015a68:	f000 fb42 	bl	80160f0 <__multiply>
 8015a6c:	9905      	ldr	r1, [sp, #20]
 8015a6e:	9014      	str	r0, [sp, #80]	; 0x50
 8015a70:	0038      	movs	r0, r7
 8015a72:	f000 fa77 	bl	8015f64 <_Bfree>
 8015a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a78:	9305      	str	r3, [sp, #20]
 8015a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a7c:	1b9a      	subs	r2, r3, r6
 8015a7e:	42b3      	cmp	r3, r6
 8015a80:	d004      	beq.n	8015a8c <_dtoa_r+0x824>
 8015a82:	0038      	movs	r0, r7
 8015a84:	9905      	ldr	r1, [sp, #20]
 8015a86:	f000 fbe3 	bl	8016250 <__pow5mult>
 8015a8a:	9005      	str	r0, [sp, #20]
 8015a8c:	2101      	movs	r1, #1
 8015a8e:	0038      	movs	r0, r7
 8015a90:	f000 fb18 	bl	80160c4 <__i2b>
 8015a94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a96:	0006      	movs	r6, r0
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	dd31      	ble.n	8015b00 <_dtoa_r+0x898>
 8015a9c:	001a      	movs	r2, r3
 8015a9e:	0001      	movs	r1, r0
 8015aa0:	0038      	movs	r0, r7
 8015aa2:	f000 fbd5 	bl	8016250 <__pow5mult>
 8015aa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015aa8:	0006      	movs	r6, r0
 8015aaa:	2b01      	cmp	r3, #1
 8015aac:	dd2d      	ble.n	8015b0a <_dtoa_r+0x8a2>
 8015aae:	2300      	movs	r3, #0
 8015ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8015ab2:	6933      	ldr	r3, [r6, #16]
 8015ab4:	3303      	adds	r3, #3
 8015ab6:	009b      	lsls	r3, r3, #2
 8015ab8:	18f3      	adds	r3, r6, r3
 8015aba:	6858      	ldr	r0, [r3, #4]
 8015abc:	f000 faba 	bl	8016034 <__hi0bits>
 8015ac0:	2320      	movs	r3, #32
 8015ac2:	1a18      	subs	r0, r3, r0
 8015ac4:	e039      	b.n	8015b3a <_dtoa_r+0x8d2>
 8015ac6:	2336      	movs	r3, #54	; 0x36
 8015ac8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015aca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015acc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ace:	1a9b      	subs	r3, r3, r2
 8015ad0:	e79d      	b.n	8015a0e <_dtoa_r+0x7a6>
 8015ad2:	9b07      	ldr	r3, [sp, #28]
 8015ad4:	1e5e      	subs	r6, r3, #1
 8015ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ad8:	42b3      	cmp	r3, r6
 8015ada:	db07      	blt.n	8015aec <_dtoa_r+0x884>
 8015adc:	1b9e      	subs	r6, r3, r6
 8015ade:	9b07      	ldr	r3, [sp, #28]
 8015ae0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	da93      	bge.n	8015a0e <_dtoa_r+0x7a6>
 8015ae6:	1ae4      	subs	r4, r4, r3
 8015ae8:	2300      	movs	r3, #0
 8015aea:	e790      	b.n	8015a0e <_dtoa_r+0x7a6>
 8015aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015af0:	1af3      	subs	r3, r6, r3
 8015af2:	18d3      	adds	r3, r2, r3
 8015af4:	960e      	str	r6, [sp, #56]	; 0x38
 8015af6:	9315      	str	r3, [sp, #84]	; 0x54
 8015af8:	2600      	movs	r6, #0
 8015afa:	e7f0      	b.n	8015ade <_dtoa_r+0x876>
 8015afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015afe:	e7c0      	b.n	8015a82 <_dtoa_r+0x81a>
 8015b00:	2300      	movs	r3, #0
 8015b02:	930e      	str	r3, [sp, #56]	; 0x38
 8015b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015b06:	2b01      	cmp	r3, #1
 8015b08:	dc13      	bgt.n	8015b32 <_dtoa_r+0x8ca>
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8015b0e:	9b08      	ldr	r3, [sp, #32]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d10e      	bne.n	8015b32 <_dtoa_r+0x8ca>
 8015b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b16:	031b      	lsls	r3, r3, #12
 8015b18:	d10b      	bne.n	8015b32 <_dtoa_r+0x8ca>
 8015b1a:	4b5d      	ldr	r3, [pc, #372]	; (8015c90 <_dtoa_r+0xa28>)
 8015b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b1e:	4213      	tst	r3, r2
 8015b20:	d007      	beq.n	8015b32 <_dtoa_r+0x8ca>
 8015b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b24:	3301      	adds	r3, #1
 8015b26:	930a      	str	r3, [sp, #40]	; 0x28
 8015b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b2a:	3301      	adds	r3, #1
 8015b2c:	930d      	str	r3, [sp, #52]	; 0x34
 8015b2e:	2301      	movs	r3, #1
 8015b30:	930e      	str	r3, [sp, #56]	; 0x38
 8015b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b34:	2001      	movs	r0, #1
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d1bb      	bne.n	8015ab2 <_dtoa_r+0x84a>
 8015b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b3c:	221f      	movs	r2, #31
 8015b3e:	1818      	adds	r0, r3, r0
 8015b40:	0003      	movs	r3, r0
 8015b42:	4013      	ands	r3, r2
 8015b44:	4210      	tst	r0, r2
 8015b46:	d046      	beq.n	8015bd6 <_dtoa_r+0x96e>
 8015b48:	3201      	adds	r2, #1
 8015b4a:	1ad2      	subs	r2, r2, r3
 8015b4c:	2a04      	cmp	r2, #4
 8015b4e:	dd3f      	ble.n	8015bd0 <_dtoa_r+0x968>
 8015b50:	221c      	movs	r2, #28
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b56:	18e4      	adds	r4, r4, r3
 8015b58:	18d2      	adds	r2, r2, r3
 8015b5a:	920a      	str	r2, [sp, #40]	; 0x28
 8015b5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015b5e:	18d3      	adds	r3, r2, r3
 8015b60:	930d      	str	r3, [sp, #52]	; 0x34
 8015b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	dd05      	ble.n	8015b74 <_dtoa_r+0x90c>
 8015b68:	001a      	movs	r2, r3
 8015b6a:	0038      	movs	r0, r7
 8015b6c:	9905      	ldr	r1, [sp, #20]
 8015b6e:	f000 fbcb 	bl	8016308 <__lshift>
 8015b72:	9005      	str	r0, [sp, #20]
 8015b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	dd05      	ble.n	8015b86 <_dtoa_r+0x91e>
 8015b7a:	0031      	movs	r1, r6
 8015b7c:	001a      	movs	r2, r3
 8015b7e:	0038      	movs	r0, r7
 8015b80:	f000 fbc2 	bl	8016308 <__lshift>
 8015b84:	0006      	movs	r6, r0
 8015b86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d026      	beq.n	8015bda <_dtoa_r+0x972>
 8015b8c:	0031      	movs	r1, r6
 8015b8e:	9805      	ldr	r0, [sp, #20]
 8015b90:	f000 fc28 	bl	80163e4 <__mcmp>
 8015b94:	2800      	cmp	r0, #0
 8015b96:	da20      	bge.n	8015bda <_dtoa_r+0x972>
 8015b98:	9b02      	ldr	r3, [sp, #8]
 8015b9a:	220a      	movs	r2, #10
 8015b9c:	3b01      	subs	r3, #1
 8015b9e:	9302      	str	r3, [sp, #8]
 8015ba0:	0038      	movs	r0, r7
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	9905      	ldr	r1, [sp, #20]
 8015ba6:	f000 fa01 	bl	8015fac <__multadd>
 8015baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bac:	9005      	str	r0, [sp, #20]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d100      	bne.n	8015bb4 <_dtoa_r+0x94c>
 8015bb2:	e166      	b.n	8015e82 <_dtoa_r+0xc1a>
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	0029      	movs	r1, r5
 8015bb8:	220a      	movs	r2, #10
 8015bba:	0038      	movs	r0, r7
 8015bbc:	f000 f9f6 	bl	8015fac <__multadd>
 8015bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bc2:	0005      	movs	r5, r0
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	dc47      	bgt.n	8015c58 <_dtoa_r+0x9f0>
 8015bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015bca:	2b02      	cmp	r3, #2
 8015bcc:	dc0d      	bgt.n	8015bea <_dtoa_r+0x982>
 8015bce:	e043      	b.n	8015c58 <_dtoa_r+0x9f0>
 8015bd0:	2a04      	cmp	r2, #4
 8015bd2:	d0c6      	beq.n	8015b62 <_dtoa_r+0x8fa>
 8015bd4:	0013      	movs	r3, r2
 8015bd6:	331c      	adds	r3, #28
 8015bd8:	e7bc      	b.n	8015b54 <_dtoa_r+0x8ec>
 8015bda:	9b07      	ldr	r3, [sp, #28]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	dc35      	bgt.n	8015c4c <_dtoa_r+0x9e4>
 8015be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015be2:	2b02      	cmp	r3, #2
 8015be4:	dd32      	ble.n	8015c4c <_dtoa_r+0x9e4>
 8015be6:	9b07      	ldr	r3, [sp, #28]
 8015be8:	930c      	str	r3, [sp, #48]	; 0x30
 8015bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d10c      	bne.n	8015c0a <_dtoa_r+0x9a2>
 8015bf0:	0031      	movs	r1, r6
 8015bf2:	2205      	movs	r2, #5
 8015bf4:	0038      	movs	r0, r7
 8015bf6:	f000 f9d9 	bl	8015fac <__multadd>
 8015bfa:	0006      	movs	r6, r0
 8015bfc:	0001      	movs	r1, r0
 8015bfe:	9805      	ldr	r0, [sp, #20]
 8015c00:	f000 fbf0 	bl	80163e4 <__mcmp>
 8015c04:	2800      	cmp	r0, #0
 8015c06:	dd00      	ble.n	8015c0a <_dtoa_r+0x9a2>
 8015c08:	e5a5      	b.n	8015756 <_dtoa_r+0x4ee>
 8015c0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015c0c:	43db      	mvns	r3, r3
 8015c0e:	9302      	str	r3, [sp, #8]
 8015c10:	9b06      	ldr	r3, [sp, #24]
 8015c12:	9308      	str	r3, [sp, #32]
 8015c14:	2400      	movs	r4, #0
 8015c16:	0031      	movs	r1, r6
 8015c18:	0038      	movs	r0, r7
 8015c1a:	f000 f9a3 	bl	8015f64 <_Bfree>
 8015c1e:	2d00      	cmp	r5, #0
 8015c20:	d100      	bne.n	8015c24 <_dtoa_r+0x9bc>
 8015c22:	e6b7      	b.n	8015994 <_dtoa_r+0x72c>
 8015c24:	2c00      	cmp	r4, #0
 8015c26:	d005      	beq.n	8015c34 <_dtoa_r+0x9cc>
 8015c28:	42ac      	cmp	r4, r5
 8015c2a:	d003      	beq.n	8015c34 <_dtoa_r+0x9cc>
 8015c2c:	0021      	movs	r1, r4
 8015c2e:	0038      	movs	r0, r7
 8015c30:	f000 f998 	bl	8015f64 <_Bfree>
 8015c34:	0029      	movs	r1, r5
 8015c36:	0038      	movs	r0, r7
 8015c38:	f000 f994 	bl	8015f64 <_Bfree>
 8015c3c:	e6aa      	b.n	8015994 <_dtoa_r+0x72c>
 8015c3e:	2600      	movs	r6, #0
 8015c40:	0035      	movs	r5, r6
 8015c42:	e7e2      	b.n	8015c0a <_dtoa_r+0x9a2>
 8015c44:	9602      	str	r6, [sp, #8]
 8015c46:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015c48:	0035      	movs	r5, r6
 8015c4a:	e584      	b.n	8015756 <_dtoa_r+0x4ee>
 8015c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d100      	bne.n	8015c54 <_dtoa_r+0x9ec>
 8015c52:	e0ce      	b.n	8015df2 <_dtoa_r+0xb8a>
 8015c54:	9b07      	ldr	r3, [sp, #28]
 8015c56:	930c      	str	r3, [sp, #48]	; 0x30
 8015c58:	2c00      	cmp	r4, #0
 8015c5a:	dd05      	ble.n	8015c68 <_dtoa_r+0xa00>
 8015c5c:	0029      	movs	r1, r5
 8015c5e:	0022      	movs	r2, r4
 8015c60:	0038      	movs	r0, r7
 8015c62:	f000 fb51 	bl	8016308 <__lshift>
 8015c66:	0005      	movs	r5, r0
 8015c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c6a:	0028      	movs	r0, r5
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d022      	beq.n	8015cb6 <_dtoa_r+0xa4e>
 8015c70:	0038      	movs	r0, r7
 8015c72:	6869      	ldr	r1, [r5, #4]
 8015c74:	f000 f932 	bl	8015edc <_Balloc>
 8015c78:	1e04      	subs	r4, r0, #0
 8015c7a:	d10f      	bne.n	8015c9c <_dtoa_r+0xa34>
 8015c7c:	0002      	movs	r2, r0
 8015c7e:	4b05      	ldr	r3, [pc, #20]	; (8015c94 <_dtoa_r+0xa2c>)
 8015c80:	4905      	ldr	r1, [pc, #20]	; (8015c98 <_dtoa_r+0xa30>)
 8015c82:	f7ff fb06 	bl	8015292 <_dtoa_r+0x2a>
 8015c86:	46c0      	nop			; (mov r8, r8)
 8015c88:	40240000 	.word	0x40240000
 8015c8c:	00000433 	.word	0x00000433
 8015c90:	7ff00000 	.word	0x7ff00000
 8015c94:	08018abf 	.word	0x08018abf
 8015c98:	000002ea 	.word	0x000002ea
 8015c9c:	0029      	movs	r1, r5
 8015c9e:	692b      	ldr	r3, [r5, #16]
 8015ca0:	310c      	adds	r1, #12
 8015ca2:	1c9a      	adds	r2, r3, #2
 8015ca4:	0092      	lsls	r2, r2, #2
 8015ca6:	300c      	adds	r0, #12
 8015ca8:	f7fe fcbe 	bl	8014628 <memcpy>
 8015cac:	2201      	movs	r2, #1
 8015cae:	0021      	movs	r1, r4
 8015cb0:	0038      	movs	r0, r7
 8015cb2:	f000 fb29 	bl	8016308 <__lshift>
 8015cb6:	9b06      	ldr	r3, [sp, #24]
 8015cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015cba:	930a      	str	r3, [sp, #40]	; 0x28
 8015cbc:	3b01      	subs	r3, #1
 8015cbe:	189b      	adds	r3, r3, r2
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	002c      	movs	r4, r5
 8015cc4:	0005      	movs	r5, r0
 8015cc6:	9314      	str	r3, [sp, #80]	; 0x50
 8015cc8:	9b08      	ldr	r3, [sp, #32]
 8015cca:	4013      	ands	r3, r2
 8015ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cce:	0031      	movs	r1, r6
 8015cd0:	9805      	ldr	r0, [sp, #20]
 8015cd2:	f7ff fa3d 	bl	8015150 <quorem>
 8015cd6:	0003      	movs	r3, r0
 8015cd8:	0021      	movs	r1, r4
 8015cda:	3330      	adds	r3, #48	; 0x30
 8015cdc:	900d      	str	r0, [sp, #52]	; 0x34
 8015cde:	9805      	ldr	r0, [sp, #20]
 8015ce0:	9307      	str	r3, [sp, #28]
 8015ce2:	f000 fb7f 	bl	80163e4 <__mcmp>
 8015ce6:	002a      	movs	r2, r5
 8015ce8:	900e      	str	r0, [sp, #56]	; 0x38
 8015cea:	0031      	movs	r1, r6
 8015cec:	0038      	movs	r0, r7
 8015cee:	f000 fb95 	bl	801641c <__mdiff>
 8015cf2:	68c3      	ldr	r3, [r0, #12]
 8015cf4:	9008      	str	r0, [sp, #32]
 8015cf6:	9310      	str	r3, [sp, #64]	; 0x40
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8015cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d104      	bne.n	8015d0c <_dtoa_r+0xaa4>
 8015d02:	0001      	movs	r1, r0
 8015d04:	9805      	ldr	r0, [sp, #20]
 8015d06:	f000 fb6d 	bl	80163e4 <__mcmp>
 8015d0a:	900c      	str	r0, [sp, #48]	; 0x30
 8015d0c:	0038      	movs	r0, r7
 8015d0e:	9908      	ldr	r1, [sp, #32]
 8015d10:	f000 f928 	bl	8015f64 <_Bfree>
 8015d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015d18:	3301      	adds	r3, #1
 8015d1a:	9308      	str	r3, [sp, #32]
 8015d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015d1e:	4313      	orrs	r3, r2
 8015d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d22:	4313      	orrs	r3, r2
 8015d24:	d10c      	bne.n	8015d40 <_dtoa_r+0xad8>
 8015d26:	9b07      	ldr	r3, [sp, #28]
 8015d28:	2b39      	cmp	r3, #57	; 0x39
 8015d2a:	d026      	beq.n	8015d7a <_dtoa_r+0xb12>
 8015d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	dd02      	ble.n	8015d38 <_dtoa_r+0xad0>
 8015d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d34:	3331      	adds	r3, #49	; 0x31
 8015d36:	9307      	str	r3, [sp, #28]
 8015d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d3a:	9a07      	ldr	r2, [sp, #28]
 8015d3c:	701a      	strb	r2, [r3, #0]
 8015d3e:	e76a      	b.n	8015c16 <_dtoa_r+0x9ae>
 8015d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	db04      	blt.n	8015d50 <_dtoa_r+0xae8>
 8015d46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015d48:	4313      	orrs	r3, r2
 8015d4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d4c:	4313      	orrs	r3, r2
 8015d4e:	d11f      	bne.n	8015d90 <_dtoa_r+0xb28>
 8015d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	ddf0      	ble.n	8015d38 <_dtoa_r+0xad0>
 8015d56:	9905      	ldr	r1, [sp, #20]
 8015d58:	2201      	movs	r2, #1
 8015d5a:	0038      	movs	r0, r7
 8015d5c:	f000 fad4 	bl	8016308 <__lshift>
 8015d60:	0031      	movs	r1, r6
 8015d62:	9005      	str	r0, [sp, #20]
 8015d64:	f000 fb3e 	bl	80163e4 <__mcmp>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	dc03      	bgt.n	8015d74 <_dtoa_r+0xb0c>
 8015d6c:	d1e4      	bne.n	8015d38 <_dtoa_r+0xad0>
 8015d6e:	9b07      	ldr	r3, [sp, #28]
 8015d70:	07db      	lsls	r3, r3, #31
 8015d72:	d5e1      	bpl.n	8015d38 <_dtoa_r+0xad0>
 8015d74:	9b07      	ldr	r3, [sp, #28]
 8015d76:	2b39      	cmp	r3, #57	; 0x39
 8015d78:	d1db      	bne.n	8015d32 <_dtoa_r+0xaca>
 8015d7a:	2339      	movs	r3, #57	; 0x39
 8015d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d7e:	7013      	strb	r3, [r2, #0]
 8015d80:	9b08      	ldr	r3, [sp, #32]
 8015d82:	9308      	str	r3, [sp, #32]
 8015d84:	3b01      	subs	r3, #1
 8015d86:	781a      	ldrb	r2, [r3, #0]
 8015d88:	2a39      	cmp	r2, #57	; 0x39
 8015d8a:	d068      	beq.n	8015e5e <_dtoa_r+0xbf6>
 8015d8c:	3201      	adds	r2, #1
 8015d8e:	e7d5      	b.n	8015d3c <_dtoa_r+0xad4>
 8015d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	dd07      	ble.n	8015da6 <_dtoa_r+0xb3e>
 8015d96:	9b07      	ldr	r3, [sp, #28]
 8015d98:	2b39      	cmp	r3, #57	; 0x39
 8015d9a:	d0ee      	beq.n	8015d7a <_dtoa_r+0xb12>
 8015d9c:	9b07      	ldr	r3, [sp, #28]
 8015d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015da0:	3301      	adds	r3, #1
 8015da2:	7013      	strb	r3, [r2, #0]
 8015da4:	e737      	b.n	8015c16 <_dtoa_r+0x9ae>
 8015da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015da8:	9a07      	ldr	r2, [sp, #28]
 8015daa:	701a      	strb	r2, [r3, #0]
 8015dac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d03e      	beq.n	8015e32 <_dtoa_r+0xbca>
 8015db4:	2300      	movs	r3, #0
 8015db6:	220a      	movs	r2, #10
 8015db8:	9905      	ldr	r1, [sp, #20]
 8015dba:	0038      	movs	r0, r7
 8015dbc:	f000 f8f6 	bl	8015fac <__multadd>
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	9005      	str	r0, [sp, #20]
 8015dc4:	220a      	movs	r2, #10
 8015dc6:	0021      	movs	r1, r4
 8015dc8:	0038      	movs	r0, r7
 8015dca:	42ac      	cmp	r4, r5
 8015dcc:	d106      	bne.n	8015ddc <_dtoa_r+0xb74>
 8015dce:	f000 f8ed 	bl	8015fac <__multadd>
 8015dd2:	0004      	movs	r4, r0
 8015dd4:	0005      	movs	r5, r0
 8015dd6:	9b08      	ldr	r3, [sp, #32]
 8015dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8015dda:	e778      	b.n	8015cce <_dtoa_r+0xa66>
 8015ddc:	f000 f8e6 	bl	8015fac <__multadd>
 8015de0:	0029      	movs	r1, r5
 8015de2:	0004      	movs	r4, r0
 8015de4:	2300      	movs	r3, #0
 8015de6:	220a      	movs	r2, #10
 8015de8:	0038      	movs	r0, r7
 8015dea:	f000 f8df 	bl	8015fac <__multadd>
 8015dee:	0005      	movs	r5, r0
 8015df0:	e7f1      	b.n	8015dd6 <_dtoa_r+0xb6e>
 8015df2:	9b07      	ldr	r3, [sp, #28]
 8015df4:	930c      	str	r3, [sp, #48]	; 0x30
 8015df6:	2400      	movs	r4, #0
 8015df8:	0031      	movs	r1, r6
 8015dfa:	9805      	ldr	r0, [sp, #20]
 8015dfc:	f7ff f9a8 	bl	8015150 <quorem>
 8015e00:	9b06      	ldr	r3, [sp, #24]
 8015e02:	3030      	adds	r0, #48	; 0x30
 8015e04:	5518      	strb	r0, [r3, r4]
 8015e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e08:	3401      	adds	r4, #1
 8015e0a:	9007      	str	r0, [sp, #28]
 8015e0c:	42a3      	cmp	r3, r4
 8015e0e:	dd07      	ble.n	8015e20 <_dtoa_r+0xbb8>
 8015e10:	2300      	movs	r3, #0
 8015e12:	220a      	movs	r2, #10
 8015e14:	0038      	movs	r0, r7
 8015e16:	9905      	ldr	r1, [sp, #20]
 8015e18:	f000 f8c8 	bl	8015fac <__multadd>
 8015e1c:	9005      	str	r0, [sp, #20]
 8015e1e:	e7eb      	b.n	8015df8 <_dtoa_r+0xb90>
 8015e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e22:	2001      	movs	r0, #1
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	dd00      	ble.n	8015e2a <_dtoa_r+0xbc2>
 8015e28:	0018      	movs	r0, r3
 8015e2a:	2400      	movs	r4, #0
 8015e2c:	9b06      	ldr	r3, [sp, #24]
 8015e2e:	181b      	adds	r3, r3, r0
 8015e30:	9308      	str	r3, [sp, #32]
 8015e32:	9905      	ldr	r1, [sp, #20]
 8015e34:	2201      	movs	r2, #1
 8015e36:	0038      	movs	r0, r7
 8015e38:	f000 fa66 	bl	8016308 <__lshift>
 8015e3c:	0031      	movs	r1, r6
 8015e3e:	9005      	str	r0, [sp, #20]
 8015e40:	f000 fad0 	bl	80163e4 <__mcmp>
 8015e44:	2800      	cmp	r0, #0
 8015e46:	dc9b      	bgt.n	8015d80 <_dtoa_r+0xb18>
 8015e48:	d102      	bne.n	8015e50 <_dtoa_r+0xbe8>
 8015e4a:	9b07      	ldr	r3, [sp, #28]
 8015e4c:	07db      	lsls	r3, r3, #31
 8015e4e:	d497      	bmi.n	8015d80 <_dtoa_r+0xb18>
 8015e50:	9b08      	ldr	r3, [sp, #32]
 8015e52:	9308      	str	r3, [sp, #32]
 8015e54:	3b01      	subs	r3, #1
 8015e56:	781a      	ldrb	r2, [r3, #0]
 8015e58:	2a30      	cmp	r2, #48	; 0x30
 8015e5a:	d0fa      	beq.n	8015e52 <_dtoa_r+0xbea>
 8015e5c:	e6db      	b.n	8015c16 <_dtoa_r+0x9ae>
 8015e5e:	9a06      	ldr	r2, [sp, #24]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d18e      	bne.n	8015d82 <_dtoa_r+0xb1a>
 8015e64:	9b02      	ldr	r3, [sp, #8]
 8015e66:	3301      	adds	r3, #1
 8015e68:	9302      	str	r3, [sp, #8]
 8015e6a:	2331      	movs	r3, #49	; 0x31
 8015e6c:	e799      	b.n	8015da2 <_dtoa_r+0xb3a>
 8015e6e:	4b09      	ldr	r3, [pc, #36]	; (8015e94 <_dtoa_r+0xc2c>)
 8015e70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015e72:	9306      	str	r3, [sp, #24]
 8015e74:	4b08      	ldr	r3, [pc, #32]	; (8015e98 <_dtoa_r+0xc30>)
 8015e76:	2a00      	cmp	r2, #0
 8015e78:	d001      	beq.n	8015e7e <_dtoa_r+0xc16>
 8015e7a:	f7ff fa3f 	bl	80152fc <_dtoa_r+0x94>
 8015e7e:	f7ff fa3f 	bl	8015300 <_dtoa_r+0x98>
 8015e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	dcb6      	bgt.n	8015df6 <_dtoa_r+0xb8e>
 8015e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015e8a:	2b02      	cmp	r3, #2
 8015e8c:	dd00      	ble.n	8015e90 <_dtoa_r+0xc28>
 8015e8e:	e6ac      	b.n	8015bea <_dtoa_r+0x982>
 8015e90:	e7b1      	b.n	8015df6 <_dtoa_r+0xb8e>
 8015e92:	46c0      	nop			; (mov r8, r8)
 8015e94:	08018a40 	.word	0x08018a40
 8015e98:	08018a48 	.word	0x08018a48

08015e9c <_localeconv_r>:
 8015e9c:	4800      	ldr	r0, [pc, #0]	; (8015ea0 <_localeconv_r+0x4>)
 8015e9e:	4770      	bx	lr
 8015ea0:	20003230 	.word	0x20003230

08015ea4 <memchr>:
 8015ea4:	b2c9      	uxtb	r1, r1
 8015ea6:	1882      	adds	r2, r0, r2
 8015ea8:	4290      	cmp	r0, r2
 8015eaa:	d101      	bne.n	8015eb0 <memchr+0xc>
 8015eac:	2000      	movs	r0, #0
 8015eae:	4770      	bx	lr
 8015eb0:	7803      	ldrb	r3, [r0, #0]
 8015eb2:	428b      	cmp	r3, r1
 8015eb4:	d0fb      	beq.n	8015eae <memchr+0xa>
 8015eb6:	3001      	adds	r0, #1
 8015eb8:	e7f6      	b.n	8015ea8 <memchr+0x4>
	...

08015ebc <__malloc_lock>:
 8015ebc:	b510      	push	{r4, lr}
 8015ebe:	4802      	ldr	r0, [pc, #8]	; (8015ec8 <__malloc_lock+0xc>)
 8015ec0:	f000 fd65 	bl	801698e <__retarget_lock_acquire_recursive>
 8015ec4:	bd10      	pop	{r4, pc}
 8015ec6:	46c0      	nop			; (mov r8, r8)
 8015ec8:	20003aa0 	.word	0x20003aa0

08015ecc <__malloc_unlock>:
 8015ecc:	b510      	push	{r4, lr}
 8015ece:	4802      	ldr	r0, [pc, #8]	; (8015ed8 <__malloc_unlock+0xc>)
 8015ed0:	f000 fd5e 	bl	8016990 <__retarget_lock_release_recursive>
 8015ed4:	bd10      	pop	{r4, pc}
 8015ed6:	46c0      	nop			; (mov r8, r8)
 8015ed8:	20003aa0 	.word	0x20003aa0

08015edc <_Balloc>:
 8015edc:	b570      	push	{r4, r5, r6, lr}
 8015ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015ee0:	0006      	movs	r6, r0
 8015ee2:	000c      	movs	r4, r1
 8015ee4:	2d00      	cmp	r5, #0
 8015ee6:	d10e      	bne.n	8015f06 <_Balloc+0x2a>
 8015ee8:	2010      	movs	r0, #16
 8015eea:	f7fe fb93 	bl	8014614 <malloc>
 8015eee:	1e02      	subs	r2, r0, #0
 8015ef0:	6270      	str	r0, [r6, #36]	; 0x24
 8015ef2:	d104      	bne.n	8015efe <_Balloc+0x22>
 8015ef4:	2166      	movs	r1, #102	; 0x66
 8015ef6:	4b19      	ldr	r3, [pc, #100]	; (8015f5c <_Balloc+0x80>)
 8015ef8:	4819      	ldr	r0, [pc, #100]	; (8015f60 <_Balloc+0x84>)
 8015efa:	f000 fd19 	bl	8016930 <__assert_func>
 8015efe:	6045      	str	r5, [r0, #4]
 8015f00:	6085      	str	r5, [r0, #8]
 8015f02:	6005      	str	r5, [r0, #0]
 8015f04:	60c5      	str	r5, [r0, #12]
 8015f06:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8015f08:	68eb      	ldr	r3, [r5, #12]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d013      	beq.n	8015f36 <_Balloc+0x5a>
 8015f0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015f10:	00a2      	lsls	r2, r4, #2
 8015f12:	68db      	ldr	r3, [r3, #12]
 8015f14:	189b      	adds	r3, r3, r2
 8015f16:	6818      	ldr	r0, [r3, #0]
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	d118      	bne.n	8015f4e <_Balloc+0x72>
 8015f1c:	2101      	movs	r1, #1
 8015f1e:	000d      	movs	r5, r1
 8015f20:	40a5      	lsls	r5, r4
 8015f22:	1d6a      	adds	r2, r5, #5
 8015f24:	0030      	movs	r0, r6
 8015f26:	0092      	lsls	r2, r2, #2
 8015f28:	f000 fb74 	bl	8016614 <_calloc_r>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d00c      	beq.n	8015f4a <_Balloc+0x6e>
 8015f30:	6044      	str	r4, [r0, #4]
 8015f32:	6085      	str	r5, [r0, #8]
 8015f34:	e00d      	b.n	8015f52 <_Balloc+0x76>
 8015f36:	2221      	movs	r2, #33	; 0x21
 8015f38:	2104      	movs	r1, #4
 8015f3a:	0030      	movs	r0, r6
 8015f3c:	f000 fb6a 	bl	8016614 <_calloc_r>
 8015f40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015f42:	60e8      	str	r0, [r5, #12]
 8015f44:	68db      	ldr	r3, [r3, #12]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1e1      	bne.n	8015f0e <_Balloc+0x32>
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	bd70      	pop	{r4, r5, r6, pc}
 8015f4e:	6802      	ldr	r2, [r0, #0]
 8015f50:	601a      	str	r2, [r3, #0]
 8015f52:	2300      	movs	r3, #0
 8015f54:	6103      	str	r3, [r0, #16]
 8015f56:	60c3      	str	r3, [r0, #12]
 8015f58:	e7f8      	b.n	8015f4c <_Balloc+0x70>
 8015f5a:	46c0      	nop			; (mov r8, r8)
 8015f5c:	08018a4d 	.word	0x08018a4d
 8015f60:	08018ad0 	.word	0x08018ad0

08015f64 <_Bfree>:
 8015f64:	b570      	push	{r4, r5, r6, lr}
 8015f66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015f68:	0005      	movs	r5, r0
 8015f6a:	000c      	movs	r4, r1
 8015f6c:	2e00      	cmp	r6, #0
 8015f6e:	d10e      	bne.n	8015f8e <_Bfree+0x2a>
 8015f70:	2010      	movs	r0, #16
 8015f72:	f7fe fb4f 	bl	8014614 <malloc>
 8015f76:	1e02      	subs	r2, r0, #0
 8015f78:	6268      	str	r0, [r5, #36]	; 0x24
 8015f7a:	d104      	bne.n	8015f86 <_Bfree+0x22>
 8015f7c:	218a      	movs	r1, #138	; 0x8a
 8015f7e:	4b09      	ldr	r3, [pc, #36]	; (8015fa4 <_Bfree+0x40>)
 8015f80:	4809      	ldr	r0, [pc, #36]	; (8015fa8 <_Bfree+0x44>)
 8015f82:	f000 fcd5 	bl	8016930 <__assert_func>
 8015f86:	6046      	str	r6, [r0, #4]
 8015f88:	6086      	str	r6, [r0, #8]
 8015f8a:	6006      	str	r6, [r0, #0]
 8015f8c:	60c6      	str	r6, [r0, #12]
 8015f8e:	2c00      	cmp	r4, #0
 8015f90:	d007      	beq.n	8015fa2 <_Bfree+0x3e>
 8015f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015f94:	6862      	ldr	r2, [r4, #4]
 8015f96:	68db      	ldr	r3, [r3, #12]
 8015f98:	0092      	lsls	r2, r2, #2
 8015f9a:	189b      	adds	r3, r3, r2
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	6022      	str	r2, [r4, #0]
 8015fa0:	601c      	str	r4, [r3, #0]
 8015fa2:	bd70      	pop	{r4, r5, r6, pc}
 8015fa4:	08018a4d 	.word	0x08018a4d
 8015fa8:	08018ad0 	.word	0x08018ad0

08015fac <__multadd>:
 8015fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fae:	000e      	movs	r6, r1
 8015fb0:	9001      	str	r0, [sp, #4]
 8015fb2:	000c      	movs	r4, r1
 8015fb4:	001d      	movs	r5, r3
 8015fb6:	2000      	movs	r0, #0
 8015fb8:	690f      	ldr	r7, [r1, #16]
 8015fba:	3614      	adds	r6, #20
 8015fbc:	6833      	ldr	r3, [r6, #0]
 8015fbe:	3001      	adds	r0, #1
 8015fc0:	b299      	uxth	r1, r3
 8015fc2:	4351      	muls	r1, r2
 8015fc4:	0c1b      	lsrs	r3, r3, #16
 8015fc6:	4353      	muls	r3, r2
 8015fc8:	1949      	adds	r1, r1, r5
 8015fca:	0c0d      	lsrs	r5, r1, #16
 8015fcc:	195b      	adds	r3, r3, r5
 8015fce:	0c1d      	lsrs	r5, r3, #16
 8015fd0:	b289      	uxth	r1, r1
 8015fd2:	041b      	lsls	r3, r3, #16
 8015fd4:	185b      	adds	r3, r3, r1
 8015fd6:	c608      	stmia	r6!, {r3}
 8015fd8:	4287      	cmp	r7, r0
 8015fda:	dcef      	bgt.n	8015fbc <__multadd+0x10>
 8015fdc:	2d00      	cmp	r5, #0
 8015fde:	d022      	beq.n	8016026 <__multadd+0x7a>
 8015fe0:	68a3      	ldr	r3, [r4, #8]
 8015fe2:	42bb      	cmp	r3, r7
 8015fe4:	dc19      	bgt.n	801601a <__multadd+0x6e>
 8015fe6:	6863      	ldr	r3, [r4, #4]
 8015fe8:	9801      	ldr	r0, [sp, #4]
 8015fea:	1c59      	adds	r1, r3, #1
 8015fec:	f7ff ff76 	bl	8015edc <_Balloc>
 8015ff0:	1e06      	subs	r6, r0, #0
 8015ff2:	d105      	bne.n	8016000 <__multadd+0x54>
 8015ff4:	0002      	movs	r2, r0
 8015ff6:	21b5      	movs	r1, #181	; 0xb5
 8015ff8:	4b0c      	ldr	r3, [pc, #48]	; (801602c <__multadd+0x80>)
 8015ffa:	480d      	ldr	r0, [pc, #52]	; (8016030 <__multadd+0x84>)
 8015ffc:	f000 fc98 	bl	8016930 <__assert_func>
 8016000:	0021      	movs	r1, r4
 8016002:	6923      	ldr	r3, [r4, #16]
 8016004:	310c      	adds	r1, #12
 8016006:	1c9a      	adds	r2, r3, #2
 8016008:	0092      	lsls	r2, r2, #2
 801600a:	300c      	adds	r0, #12
 801600c:	f7fe fb0c 	bl	8014628 <memcpy>
 8016010:	0021      	movs	r1, r4
 8016012:	9801      	ldr	r0, [sp, #4]
 8016014:	f7ff ffa6 	bl	8015f64 <_Bfree>
 8016018:	0034      	movs	r4, r6
 801601a:	1d3b      	adds	r3, r7, #4
 801601c:	009b      	lsls	r3, r3, #2
 801601e:	18e3      	adds	r3, r4, r3
 8016020:	605d      	str	r5, [r3, #4]
 8016022:	1c7b      	adds	r3, r7, #1
 8016024:	6123      	str	r3, [r4, #16]
 8016026:	0020      	movs	r0, r4
 8016028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801602a:	46c0      	nop			; (mov r8, r8)
 801602c:	08018abf 	.word	0x08018abf
 8016030:	08018ad0 	.word	0x08018ad0

08016034 <__hi0bits>:
 8016034:	0003      	movs	r3, r0
 8016036:	0c02      	lsrs	r2, r0, #16
 8016038:	2000      	movs	r0, #0
 801603a:	4282      	cmp	r2, r0
 801603c:	d101      	bne.n	8016042 <__hi0bits+0xe>
 801603e:	041b      	lsls	r3, r3, #16
 8016040:	3010      	adds	r0, #16
 8016042:	0e1a      	lsrs	r2, r3, #24
 8016044:	d101      	bne.n	801604a <__hi0bits+0x16>
 8016046:	3008      	adds	r0, #8
 8016048:	021b      	lsls	r3, r3, #8
 801604a:	0f1a      	lsrs	r2, r3, #28
 801604c:	d101      	bne.n	8016052 <__hi0bits+0x1e>
 801604e:	3004      	adds	r0, #4
 8016050:	011b      	lsls	r3, r3, #4
 8016052:	0f9a      	lsrs	r2, r3, #30
 8016054:	d101      	bne.n	801605a <__hi0bits+0x26>
 8016056:	3002      	adds	r0, #2
 8016058:	009b      	lsls	r3, r3, #2
 801605a:	2b00      	cmp	r3, #0
 801605c:	db03      	blt.n	8016066 <__hi0bits+0x32>
 801605e:	3001      	adds	r0, #1
 8016060:	005b      	lsls	r3, r3, #1
 8016062:	d400      	bmi.n	8016066 <__hi0bits+0x32>
 8016064:	2020      	movs	r0, #32
 8016066:	4770      	bx	lr

08016068 <__lo0bits>:
 8016068:	6803      	ldr	r3, [r0, #0]
 801606a:	0002      	movs	r2, r0
 801606c:	2107      	movs	r1, #7
 801606e:	0018      	movs	r0, r3
 8016070:	4008      	ands	r0, r1
 8016072:	420b      	tst	r3, r1
 8016074:	d00d      	beq.n	8016092 <__lo0bits+0x2a>
 8016076:	3906      	subs	r1, #6
 8016078:	2000      	movs	r0, #0
 801607a:	420b      	tst	r3, r1
 801607c:	d105      	bne.n	801608a <__lo0bits+0x22>
 801607e:	3002      	adds	r0, #2
 8016080:	4203      	tst	r3, r0
 8016082:	d003      	beq.n	801608c <__lo0bits+0x24>
 8016084:	40cb      	lsrs	r3, r1
 8016086:	0008      	movs	r0, r1
 8016088:	6013      	str	r3, [r2, #0]
 801608a:	4770      	bx	lr
 801608c:	089b      	lsrs	r3, r3, #2
 801608e:	6013      	str	r3, [r2, #0]
 8016090:	e7fb      	b.n	801608a <__lo0bits+0x22>
 8016092:	b299      	uxth	r1, r3
 8016094:	2900      	cmp	r1, #0
 8016096:	d101      	bne.n	801609c <__lo0bits+0x34>
 8016098:	2010      	movs	r0, #16
 801609a:	0c1b      	lsrs	r3, r3, #16
 801609c:	b2d9      	uxtb	r1, r3
 801609e:	2900      	cmp	r1, #0
 80160a0:	d101      	bne.n	80160a6 <__lo0bits+0x3e>
 80160a2:	3008      	adds	r0, #8
 80160a4:	0a1b      	lsrs	r3, r3, #8
 80160a6:	0719      	lsls	r1, r3, #28
 80160a8:	d101      	bne.n	80160ae <__lo0bits+0x46>
 80160aa:	3004      	adds	r0, #4
 80160ac:	091b      	lsrs	r3, r3, #4
 80160ae:	0799      	lsls	r1, r3, #30
 80160b0:	d101      	bne.n	80160b6 <__lo0bits+0x4e>
 80160b2:	3002      	adds	r0, #2
 80160b4:	089b      	lsrs	r3, r3, #2
 80160b6:	07d9      	lsls	r1, r3, #31
 80160b8:	d4e9      	bmi.n	801608e <__lo0bits+0x26>
 80160ba:	3001      	adds	r0, #1
 80160bc:	085b      	lsrs	r3, r3, #1
 80160be:	d1e6      	bne.n	801608e <__lo0bits+0x26>
 80160c0:	2020      	movs	r0, #32
 80160c2:	e7e2      	b.n	801608a <__lo0bits+0x22>

080160c4 <__i2b>:
 80160c4:	b510      	push	{r4, lr}
 80160c6:	000c      	movs	r4, r1
 80160c8:	2101      	movs	r1, #1
 80160ca:	f7ff ff07 	bl	8015edc <_Balloc>
 80160ce:	2800      	cmp	r0, #0
 80160d0:	d106      	bne.n	80160e0 <__i2b+0x1c>
 80160d2:	21a0      	movs	r1, #160	; 0xa0
 80160d4:	0002      	movs	r2, r0
 80160d6:	4b04      	ldr	r3, [pc, #16]	; (80160e8 <__i2b+0x24>)
 80160d8:	4804      	ldr	r0, [pc, #16]	; (80160ec <__i2b+0x28>)
 80160da:	0049      	lsls	r1, r1, #1
 80160dc:	f000 fc28 	bl	8016930 <__assert_func>
 80160e0:	2301      	movs	r3, #1
 80160e2:	6144      	str	r4, [r0, #20]
 80160e4:	6103      	str	r3, [r0, #16]
 80160e6:	bd10      	pop	{r4, pc}
 80160e8:	08018abf 	.word	0x08018abf
 80160ec:	08018ad0 	.word	0x08018ad0

080160f0 <__multiply>:
 80160f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160f2:	690b      	ldr	r3, [r1, #16]
 80160f4:	0014      	movs	r4, r2
 80160f6:	6912      	ldr	r2, [r2, #16]
 80160f8:	000d      	movs	r5, r1
 80160fa:	b089      	sub	sp, #36	; 0x24
 80160fc:	4293      	cmp	r3, r2
 80160fe:	da01      	bge.n	8016104 <__multiply+0x14>
 8016100:	0025      	movs	r5, r4
 8016102:	000c      	movs	r4, r1
 8016104:	692f      	ldr	r7, [r5, #16]
 8016106:	6926      	ldr	r6, [r4, #16]
 8016108:	6869      	ldr	r1, [r5, #4]
 801610a:	19bb      	adds	r3, r7, r6
 801610c:	9302      	str	r3, [sp, #8]
 801610e:	68ab      	ldr	r3, [r5, #8]
 8016110:	19ba      	adds	r2, r7, r6
 8016112:	4293      	cmp	r3, r2
 8016114:	da00      	bge.n	8016118 <__multiply+0x28>
 8016116:	3101      	adds	r1, #1
 8016118:	f7ff fee0 	bl	8015edc <_Balloc>
 801611c:	9001      	str	r0, [sp, #4]
 801611e:	2800      	cmp	r0, #0
 8016120:	d106      	bne.n	8016130 <__multiply+0x40>
 8016122:	215e      	movs	r1, #94	; 0x5e
 8016124:	0002      	movs	r2, r0
 8016126:	4b48      	ldr	r3, [pc, #288]	; (8016248 <__multiply+0x158>)
 8016128:	4848      	ldr	r0, [pc, #288]	; (801624c <__multiply+0x15c>)
 801612a:	31ff      	adds	r1, #255	; 0xff
 801612c:	f000 fc00 	bl	8016930 <__assert_func>
 8016130:	9b01      	ldr	r3, [sp, #4]
 8016132:	2200      	movs	r2, #0
 8016134:	3314      	adds	r3, #20
 8016136:	469c      	mov	ip, r3
 8016138:	19bb      	adds	r3, r7, r6
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	4463      	add	r3, ip
 801613e:	9303      	str	r3, [sp, #12]
 8016140:	4663      	mov	r3, ip
 8016142:	9903      	ldr	r1, [sp, #12]
 8016144:	428b      	cmp	r3, r1
 8016146:	d32c      	bcc.n	80161a2 <__multiply+0xb2>
 8016148:	002b      	movs	r3, r5
 801614a:	0022      	movs	r2, r4
 801614c:	3314      	adds	r3, #20
 801614e:	00bf      	lsls	r7, r7, #2
 8016150:	3214      	adds	r2, #20
 8016152:	9306      	str	r3, [sp, #24]
 8016154:	00b6      	lsls	r6, r6, #2
 8016156:	19db      	adds	r3, r3, r7
 8016158:	9304      	str	r3, [sp, #16]
 801615a:	1993      	adds	r3, r2, r6
 801615c:	9307      	str	r3, [sp, #28]
 801615e:	2304      	movs	r3, #4
 8016160:	9305      	str	r3, [sp, #20]
 8016162:	002b      	movs	r3, r5
 8016164:	9904      	ldr	r1, [sp, #16]
 8016166:	3315      	adds	r3, #21
 8016168:	9200      	str	r2, [sp, #0]
 801616a:	4299      	cmp	r1, r3
 801616c:	d305      	bcc.n	801617a <__multiply+0x8a>
 801616e:	1b4b      	subs	r3, r1, r5
 8016170:	3b15      	subs	r3, #21
 8016172:	089b      	lsrs	r3, r3, #2
 8016174:	3301      	adds	r3, #1
 8016176:	009b      	lsls	r3, r3, #2
 8016178:	9305      	str	r3, [sp, #20]
 801617a:	9b07      	ldr	r3, [sp, #28]
 801617c:	9a00      	ldr	r2, [sp, #0]
 801617e:	429a      	cmp	r2, r3
 8016180:	d311      	bcc.n	80161a6 <__multiply+0xb6>
 8016182:	9b02      	ldr	r3, [sp, #8]
 8016184:	2b00      	cmp	r3, #0
 8016186:	dd06      	ble.n	8016196 <__multiply+0xa6>
 8016188:	9b03      	ldr	r3, [sp, #12]
 801618a:	3b04      	subs	r3, #4
 801618c:	9303      	str	r3, [sp, #12]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d053      	beq.n	801623e <__multiply+0x14e>
 8016196:	9b01      	ldr	r3, [sp, #4]
 8016198:	9a02      	ldr	r2, [sp, #8]
 801619a:	0018      	movs	r0, r3
 801619c:	611a      	str	r2, [r3, #16]
 801619e:	b009      	add	sp, #36	; 0x24
 80161a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161a2:	c304      	stmia	r3!, {r2}
 80161a4:	e7cd      	b.n	8016142 <__multiply+0x52>
 80161a6:	9b00      	ldr	r3, [sp, #0]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	b298      	uxth	r0, r3
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d01b      	beq.n	80161e8 <__multiply+0xf8>
 80161b0:	4667      	mov	r7, ip
 80161b2:	2400      	movs	r4, #0
 80161b4:	9e06      	ldr	r6, [sp, #24]
 80161b6:	ce02      	ldmia	r6!, {r1}
 80161b8:	683a      	ldr	r2, [r7, #0]
 80161ba:	b28b      	uxth	r3, r1
 80161bc:	4343      	muls	r3, r0
 80161be:	b292      	uxth	r2, r2
 80161c0:	189b      	adds	r3, r3, r2
 80161c2:	191b      	adds	r3, r3, r4
 80161c4:	0c0c      	lsrs	r4, r1, #16
 80161c6:	4344      	muls	r4, r0
 80161c8:	683a      	ldr	r2, [r7, #0]
 80161ca:	0c11      	lsrs	r1, r2, #16
 80161cc:	1861      	adds	r1, r4, r1
 80161ce:	0c1c      	lsrs	r4, r3, #16
 80161d0:	1909      	adds	r1, r1, r4
 80161d2:	0c0c      	lsrs	r4, r1, #16
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	0409      	lsls	r1, r1, #16
 80161d8:	430b      	orrs	r3, r1
 80161da:	c708      	stmia	r7!, {r3}
 80161dc:	9b04      	ldr	r3, [sp, #16]
 80161de:	42b3      	cmp	r3, r6
 80161e0:	d8e9      	bhi.n	80161b6 <__multiply+0xc6>
 80161e2:	4663      	mov	r3, ip
 80161e4:	9a05      	ldr	r2, [sp, #20]
 80161e6:	509c      	str	r4, [r3, r2]
 80161e8:	9b00      	ldr	r3, [sp, #0]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	0c1e      	lsrs	r6, r3, #16
 80161ee:	d020      	beq.n	8016232 <__multiply+0x142>
 80161f0:	4663      	mov	r3, ip
 80161f2:	002c      	movs	r4, r5
 80161f4:	4660      	mov	r0, ip
 80161f6:	2700      	movs	r7, #0
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	3414      	adds	r4, #20
 80161fc:	6822      	ldr	r2, [r4, #0]
 80161fe:	b29b      	uxth	r3, r3
 8016200:	b291      	uxth	r1, r2
 8016202:	4371      	muls	r1, r6
 8016204:	6802      	ldr	r2, [r0, #0]
 8016206:	0c12      	lsrs	r2, r2, #16
 8016208:	1889      	adds	r1, r1, r2
 801620a:	19cf      	adds	r7, r1, r7
 801620c:	0439      	lsls	r1, r7, #16
 801620e:	430b      	orrs	r3, r1
 8016210:	6003      	str	r3, [r0, #0]
 8016212:	cc02      	ldmia	r4!, {r1}
 8016214:	6843      	ldr	r3, [r0, #4]
 8016216:	0c09      	lsrs	r1, r1, #16
 8016218:	4371      	muls	r1, r6
 801621a:	b29b      	uxth	r3, r3
 801621c:	0c3f      	lsrs	r7, r7, #16
 801621e:	18cb      	adds	r3, r1, r3
 8016220:	9a04      	ldr	r2, [sp, #16]
 8016222:	19db      	adds	r3, r3, r7
 8016224:	0c1f      	lsrs	r7, r3, #16
 8016226:	3004      	adds	r0, #4
 8016228:	42a2      	cmp	r2, r4
 801622a:	d8e7      	bhi.n	80161fc <__multiply+0x10c>
 801622c:	4662      	mov	r2, ip
 801622e:	9905      	ldr	r1, [sp, #20]
 8016230:	5053      	str	r3, [r2, r1]
 8016232:	9b00      	ldr	r3, [sp, #0]
 8016234:	3304      	adds	r3, #4
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	2304      	movs	r3, #4
 801623a:	449c      	add	ip, r3
 801623c:	e79d      	b.n	801617a <__multiply+0x8a>
 801623e:	9b02      	ldr	r3, [sp, #8]
 8016240:	3b01      	subs	r3, #1
 8016242:	9302      	str	r3, [sp, #8]
 8016244:	e79d      	b.n	8016182 <__multiply+0x92>
 8016246:	46c0      	nop			; (mov r8, r8)
 8016248:	08018abf 	.word	0x08018abf
 801624c:	08018ad0 	.word	0x08018ad0

08016250 <__pow5mult>:
 8016250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016252:	2303      	movs	r3, #3
 8016254:	0015      	movs	r5, r2
 8016256:	0007      	movs	r7, r0
 8016258:	000e      	movs	r6, r1
 801625a:	401a      	ands	r2, r3
 801625c:	421d      	tst	r5, r3
 801625e:	d008      	beq.n	8016272 <__pow5mult+0x22>
 8016260:	4925      	ldr	r1, [pc, #148]	; (80162f8 <__pow5mult+0xa8>)
 8016262:	3a01      	subs	r2, #1
 8016264:	0092      	lsls	r2, r2, #2
 8016266:	5852      	ldr	r2, [r2, r1]
 8016268:	2300      	movs	r3, #0
 801626a:	0031      	movs	r1, r6
 801626c:	f7ff fe9e 	bl	8015fac <__multadd>
 8016270:	0006      	movs	r6, r0
 8016272:	10ad      	asrs	r5, r5, #2
 8016274:	d03d      	beq.n	80162f2 <__pow5mult+0xa2>
 8016276:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016278:	2c00      	cmp	r4, #0
 801627a:	d10f      	bne.n	801629c <__pow5mult+0x4c>
 801627c:	2010      	movs	r0, #16
 801627e:	f7fe f9c9 	bl	8014614 <malloc>
 8016282:	1e02      	subs	r2, r0, #0
 8016284:	6278      	str	r0, [r7, #36]	; 0x24
 8016286:	d105      	bne.n	8016294 <__pow5mult+0x44>
 8016288:	21d7      	movs	r1, #215	; 0xd7
 801628a:	4b1c      	ldr	r3, [pc, #112]	; (80162fc <__pow5mult+0xac>)
 801628c:	481c      	ldr	r0, [pc, #112]	; (8016300 <__pow5mult+0xb0>)
 801628e:	0049      	lsls	r1, r1, #1
 8016290:	f000 fb4e 	bl	8016930 <__assert_func>
 8016294:	6044      	str	r4, [r0, #4]
 8016296:	6084      	str	r4, [r0, #8]
 8016298:	6004      	str	r4, [r0, #0]
 801629a:	60c4      	str	r4, [r0, #12]
 801629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629e:	689c      	ldr	r4, [r3, #8]
 80162a0:	9301      	str	r3, [sp, #4]
 80162a2:	2c00      	cmp	r4, #0
 80162a4:	d108      	bne.n	80162b8 <__pow5mult+0x68>
 80162a6:	0038      	movs	r0, r7
 80162a8:	4916      	ldr	r1, [pc, #88]	; (8016304 <__pow5mult+0xb4>)
 80162aa:	f7ff ff0b 	bl	80160c4 <__i2b>
 80162ae:	9b01      	ldr	r3, [sp, #4]
 80162b0:	0004      	movs	r4, r0
 80162b2:	6098      	str	r0, [r3, #8]
 80162b4:	2300      	movs	r3, #0
 80162b6:	6003      	str	r3, [r0, #0]
 80162b8:	2301      	movs	r3, #1
 80162ba:	421d      	tst	r5, r3
 80162bc:	d00a      	beq.n	80162d4 <__pow5mult+0x84>
 80162be:	0031      	movs	r1, r6
 80162c0:	0022      	movs	r2, r4
 80162c2:	0038      	movs	r0, r7
 80162c4:	f7ff ff14 	bl	80160f0 <__multiply>
 80162c8:	0031      	movs	r1, r6
 80162ca:	9001      	str	r0, [sp, #4]
 80162cc:	0038      	movs	r0, r7
 80162ce:	f7ff fe49 	bl	8015f64 <_Bfree>
 80162d2:	9e01      	ldr	r6, [sp, #4]
 80162d4:	106d      	asrs	r5, r5, #1
 80162d6:	d00c      	beq.n	80162f2 <__pow5mult+0xa2>
 80162d8:	6820      	ldr	r0, [r4, #0]
 80162da:	2800      	cmp	r0, #0
 80162dc:	d107      	bne.n	80162ee <__pow5mult+0x9e>
 80162de:	0022      	movs	r2, r4
 80162e0:	0021      	movs	r1, r4
 80162e2:	0038      	movs	r0, r7
 80162e4:	f7ff ff04 	bl	80160f0 <__multiply>
 80162e8:	2300      	movs	r3, #0
 80162ea:	6020      	str	r0, [r4, #0]
 80162ec:	6003      	str	r3, [r0, #0]
 80162ee:	0004      	movs	r4, r0
 80162f0:	e7e2      	b.n	80162b8 <__pow5mult+0x68>
 80162f2:	0030      	movs	r0, r6
 80162f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80162f6:	46c0      	nop			; (mov r8, r8)
 80162f8:	08018c20 	.word	0x08018c20
 80162fc:	08018a4d 	.word	0x08018a4d
 8016300:	08018ad0 	.word	0x08018ad0
 8016304:	00000271 	.word	0x00000271

08016308 <__lshift>:
 8016308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801630a:	000c      	movs	r4, r1
 801630c:	0017      	movs	r7, r2
 801630e:	6923      	ldr	r3, [r4, #16]
 8016310:	1155      	asrs	r5, r2, #5
 8016312:	b087      	sub	sp, #28
 8016314:	18eb      	adds	r3, r5, r3
 8016316:	9302      	str	r3, [sp, #8]
 8016318:	3301      	adds	r3, #1
 801631a:	9301      	str	r3, [sp, #4]
 801631c:	6849      	ldr	r1, [r1, #4]
 801631e:	68a3      	ldr	r3, [r4, #8]
 8016320:	9004      	str	r0, [sp, #16]
 8016322:	9a01      	ldr	r2, [sp, #4]
 8016324:	4293      	cmp	r3, r2
 8016326:	db10      	blt.n	801634a <__lshift+0x42>
 8016328:	9804      	ldr	r0, [sp, #16]
 801632a:	f7ff fdd7 	bl	8015edc <_Balloc>
 801632e:	2300      	movs	r3, #0
 8016330:	0002      	movs	r2, r0
 8016332:	0006      	movs	r6, r0
 8016334:	0019      	movs	r1, r3
 8016336:	3214      	adds	r2, #20
 8016338:	4298      	cmp	r0, r3
 801633a:	d10c      	bne.n	8016356 <__lshift+0x4e>
 801633c:	21da      	movs	r1, #218	; 0xda
 801633e:	0002      	movs	r2, r0
 8016340:	4b26      	ldr	r3, [pc, #152]	; (80163dc <__lshift+0xd4>)
 8016342:	4827      	ldr	r0, [pc, #156]	; (80163e0 <__lshift+0xd8>)
 8016344:	31ff      	adds	r1, #255	; 0xff
 8016346:	f000 faf3 	bl	8016930 <__assert_func>
 801634a:	3101      	adds	r1, #1
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	e7e8      	b.n	8016322 <__lshift+0x1a>
 8016350:	0098      	lsls	r0, r3, #2
 8016352:	5011      	str	r1, [r2, r0]
 8016354:	3301      	adds	r3, #1
 8016356:	42ab      	cmp	r3, r5
 8016358:	dbfa      	blt.n	8016350 <__lshift+0x48>
 801635a:	43eb      	mvns	r3, r5
 801635c:	17db      	asrs	r3, r3, #31
 801635e:	401d      	ands	r5, r3
 8016360:	211f      	movs	r1, #31
 8016362:	0023      	movs	r3, r4
 8016364:	0038      	movs	r0, r7
 8016366:	00ad      	lsls	r5, r5, #2
 8016368:	1955      	adds	r5, r2, r5
 801636a:	6922      	ldr	r2, [r4, #16]
 801636c:	3314      	adds	r3, #20
 801636e:	0092      	lsls	r2, r2, #2
 8016370:	4008      	ands	r0, r1
 8016372:	4684      	mov	ip, r0
 8016374:	189a      	adds	r2, r3, r2
 8016376:	420f      	tst	r7, r1
 8016378:	d02a      	beq.n	80163d0 <__lshift+0xc8>
 801637a:	3101      	adds	r1, #1
 801637c:	1a09      	subs	r1, r1, r0
 801637e:	9105      	str	r1, [sp, #20]
 8016380:	2100      	movs	r1, #0
 8016382:	9503      	str	r5, [sp, #12]
 8016384:	4667      	mov	r7, ip
 8016386:	6818      	ldr	r0, [r3, #0]
 8016388:	40b8      	lsls	r0, r7
 801638a:	4301      	orrs	r1, r0
 801638c:	9803      	ldr	r0, [sp, #12]
 801638e:	c002      	stmia	r0!, {r1}
 8016390:	cb02      	ldmia	r3!, {r1}
 8016392:	9003      	str	r0, [sp, #12]
 8016394:	9805      	ldr	r0, [sp, #20]
 8016396:	40c1      	lsrs	r1, r0
 8016398:	429a      	cmp	r2, r3
 801639a:	d8f3      	bhi.n	8016384 <__lshift+0x7c>
 801639c:	0020      	movs	r0, r4
 801639e:	3015      	adds	r0, #21
 80163a0:	2304      	movs	r3, #4
 80163a2:	4282      	cmp	r2, r0
 80163a4:	d304      	bcc.n	80163b0 <__lshift+0xa8>
 80163a6:	1b13      	subs	r3, r2, r4
 80163a8:	3b15      	subs	r3, #21
 80163aa:	089b      	lsrs	r3, r3, #2
 80163ac:	3301      	adds	r3, #1
 80163ae:	009b      	lsls	r3, r3, #2
 80163b0:	50e9      	str	r1, [r5, r3]
 80163b2:	2900      	cmp	r1, #0
 80163b4:	d002      	beq.n	80163bc <__lshift+0xb4>
 80163b6:	9b02      	ldr	r3, [sp, #8]
 80163b8:	3302      	adds	r3, #2
 80163ba:	9301      	str	r3, [sp, #4]
 80163bc:	9b01      	ldr	r3, [sp, #4]
 80163be:	9804      	ldr	r0, [sp, #16]
 80163c0:	3b01      	subs	r3, #1
 80163c2:	0021      	movs	r1, r4
 80163c4:	6133      	str	r3, [r6, #16]
 80163c6:	f7ff fdcd 	bl	8015f64 <_Bfree>
 80163ca:	0030      	movs	r0, r6
 80163cc:	b007      	add	sp, #28
 80163ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d0:	cb02      	ldmia	r3!, {r1}
 80163d2:	c502      	stmia	r5!, {r1}
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d8fb      	bhi.n	80163d0 <__lshift+0xc8>
 80163d8:	e7f0      	b.n	80163bc <__lshift+0xb4>
 80163da:	46c0      	nop			; (mov r8, r8)
 80163dc:	08018abf 	.word	0x08018abf
 80163e0:	08018ad0 	.word	0x08018ad0

080163e4 <__mcmp>:
 80163e4:	6902      	ldr	r2, [r0, #16]
 80163e6:	690b      	ldr	r3, [r1, #16]
 80163e8:	b530      	push	{r4, r5, lr}
 80163ea:	0004      	movs	r4, r0
 80163ec:	1ad0      	subs	r0, r2, r3
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d10d      	bne.n	801640e <__mcmp+0x2a>
 80163f2:	009b      	lsls	r3, r3, #2
 80163f4:	3414      	adds	r4, #20
 80163f6:	3114      	adds	r1, #20
 80163f8:	18e2      	adds	r2, r4, r3
 80163fa:	18c9      	adds	r1, r1, r3
 80163fc:	3a04      	subs	r2, #4
 80163fe:	3904      	subs	r1, #4
 8016400:	6815      	ldr	r5, [r2, #0]
 8016402:	680b      	ldr	r3, [r1, #0]
 8016404:	429d      	cmp	r5, r3
 8016406:	d003      	beq.n	8016410 <__mcmp+0x2c>
 8016408:	2001      	movs	r0, #1
 801640a:	429d      	cmp	r5, r3
 801640c:	d303      	bcc.n	8016416 <__mcmp+0x32>
 801640e:	bd30      	pop	{r4, r5, pc}
 8016410:	4294      	cmp	r4, r2
 8016412:	d3f3      	bcc.n	80163fc <__mcmp+0x18>
 8016414:	e7fb      	b.n	801640e <__mcmp+0x2a>
 8016416:	4240      	negs	r0, r0
 8016418:	e7f9      	b.n	801640e <__mcmp+0x2a>
	...

0801641c <__mdiff>:
 801641c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801641e:	000e      	movs	r6, r1
 8016420:	0007      	movs	r7, r0
 8016422:	0011      	movs	r1, r2
 8016424:	0030      	movs	r0, r6
 8016426:	b087      	sub	sp, #28
 8016428:	0014      	movs	r4, r2
 801642a:	f7ff ffdb 	bl	80163e4 <__mcmp>
 801642e:	1e05      	subs	r5, r0, #0
 8016430:	d110      	bne.n	8016454 <__mdiff+0x38>
 8016432:	0001      	movs	r1, r0
 8016434:	0038      	movs	r0, r7
 8016436:	f7ff fd51 	bl	8015edc <_Balloc>
 801643a:	1e02      	subs	r2, r0, #0
 801643c:	d104      	bne.n	8016448 <__mdiff+0x2c>
 801643e:	4b40      	ldr	r3, [pc, #256]	; (8016540 <__mdiff+0x124>)
 8016440:	4940      	ldr	r1, [pc, #256]	; (8016544 <__mdiff+0x128>)
 8016442:	4841      	ldr	r0, [pc, #260]	; (8016548 <__mdiff+0x12c>)
 8016444:	f000 fa74 	bl	8016930 <__assert_func>
 8016448:	2301      	movs	r3, #1
 801644a:	6145      	str	r5, [r0, #20]
 801644c:	6103      	str	r3, [r0, #16]
 801644e:	0010      	movs	r0, r2
 8016450:	b007      	add	sp, #28
 8016452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016454:	2301      	movs	r3, #1
 8016456:	9301      	str	r3, [sp, #4]
 8016458:	2800      	cmp	r0, #0
 801645a:	db04      	blt.n	8016466 <__mdiff+0x4a>
 801645c:	0023      	movs	r3, r4
 801645e:	0034      	movs	r4, r6
 8016460:	001e      	movs	r6, r3
 8016462:	2300      	movs	r3, #0
 8016464:	9301      	str	r3, [sp, #4]
 8016466:	0038      	movs	r0, r7
 8016468:	6861      	ldr	r1, [r4, #4]
 801646a:	f7ff fd37 	bl	8015edc <_Balloc>
 801646e:	1e02      	subs	r2, r0, #0
 8016470:	d103      	bne.n	801647a <__mdiff+0x5e>
 8016472:	2190      	movs	r1, #144	; 0x90
 8016474:	4b32      	ldr	r3, [pc, #200]	; (8016540 <__mdiff+0x124>)
 8016476:	0089      	lsls	r1, r1, #2
 8016478:	e7e3      	b.n	8016442 <__mdiff+0x26>
 801647a:	9b01      	ldr	r3, [sp, #4]
 801647c:	2700      	movs	r7, #0
 801647e:	60c3      	str	r3, [r0, #12]
 8016480:	6920      	ldr	r0, [r4, #16]
 8016482:	3414      	adds	r4, #20
 8016484:	9401      	str	r4, [sp, #4]
 8016486:	9b01      	ldr	r3, [sp, #4]
 8016488:	0084      	lsls	r4, r0, #2
 801648a:	191b      	adds	r3, r3, r4
 801648c:	0034      	movs	r4, r6
 801648e:	9302      	str	r3, [sp, #8]
 8016490:	6933      	ldr	r3, [r6, #16]
 8016492:	3414      	adds	r4, #20
 8016494:	0099      	lsls	r1, r3, #2
 8016496:	1863      	adds	r3, r4, r1
 8016498:	9303      	str	r3, [sp, #12]
 801649a:	0013      	movs	r3, r2
 801649c:	3314      	adds	r3, #20
 801649e:	469c      	mov	ip, r3
 80164a0:	9305      	str	r3, [sp, #20]
 80164a2:	9b01      	ldr	r3, [sp, #4]
 80164a4:	9304      	str	r3, [sp, #16]
 80164a6:	9b04      	ldr	r3, [sp, #16]
 80164a8:	cc02      	ldmia	r4!, {r1}
 80164aa:	cb20      	ldmia	r3!, {r5}
 80164ac:	9304      	str	r3, [sp, #16]
 80164ae:	b2ab      	uxth	r3, r5
 80164b0:	19df      	adds	r7, r3, r7
 80164b2:	b28b      	uxth	r3, r1
 80164b4:	1afb      	subs	r3, r7, r3
 80164b6:	0c09      	lsrs	r1, r1, #16
 80164b8:	0c2d      	lsrs	r5, r5, #16
 80164ba:	1a6d      	subs	r5, r5, r1
 80164bc:	1419      	asrs	r1, r3, #16
 80164be:	186d      	adds	r5, r5, r1
 80164c0:	4661      	mov	r1, ip
 80164c2:	142f      	asrs	r7, r5, #16
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	042d      	lsls	r5, r5, #16
 80164c8:	432b      	orrs	r3, r5
 80164ca:	c108      	stmia	r1!, {r3}
 80164cc:	9b03      	ldr	r3, [sp, #12]
 80164ce:	468c      	mov	ip, r1
 80164d0:	42a3      	cmp	r3, r4
 80164d2:	d8e8      	bhi.n	80164a6 <__mdiff+0x8a>
 80164d4:	0031      	movs	r1, r6
 80164d6:	9c03      	ldr	r4, [sp, #12]
 80164d8:	3115      	adds	r1, #21
 80164da:	2304      	movs	r3, #4
 80164dc:	428c      	cmp	r4, r1
 80164de:	d304      	bcc.n	80164ea <__mdiff+0xce>
 80164e0:	1ba3      	subs	r3, r4, r6
 80164e2:	3b15      	subs	r3, #21
 80164e4:	089b      	lsrs	r3, r3, #2
 80164e6:	3301      	adds	r3, #1
 80164e8:	009b      	lsls	r3, r3, #2
 80164ea:	9901      	ldr	r1, [sp, #4]
 80164ec:	18cc      	adds	r4, r1, r3
 80164ee:	9905      	ldr	r1, [sp, #20]
 80164f0:	0026      	movs	r6, r4
 80164f2:	18cb      	adds	r3, r1, r3
 80164f4:	469c      	mov	ip, r3
 80164f6:	9902      	ldr	r1, [sp, #8]
 80164f8:	428e      	cmp	r6, r1
 80164fa:	d310      	bcc.n	801651e <__mdiff+0x102>
 80164fc:	9e02      	ldr	r6, [sp, #8]
 80164fe:	1ee1      	subs	r1, r4, #3
 8016500:	2500      	movs	r5, #0
 8016502:	428e      	cmp	r6, r1
 8016504:	d304      	bcc.n	8016510 <__mdiff+0xf4>
 8016506:	0031      	movs	r1, r6
 8016508:	3103      	adds	r1, #3
 801650a:	1b0c      	subs	r4, r1, r4
 801650c:	08a4      	lsrs	r4, r4, #2
 801650e:	00a5      	lsls	r5, r4, #2
 8016510:	195b      	adds	r3, r3, r5
 8016512:	3b04      	subs	r3, #4
 8016514:	6819      	ldr	r1, [r3, #0]
 8016516:	2900      	cmp	r1, #0
 8016518:	d00f      	beq.n	801653a <__mdiff+0x11e>
 801651a:	6110      	str	r0, [r2, #16]
 801651c:	e797      	b.n	801644e <__mdiff+0x32>
 801651e:	ce02      	ldmia	r6!, {r1}
 8016520:	b28d      	uxth	r5, r1
 8016522:	19ed      	adds	r5, r5, r7
 8016524:	0c0f      	lsrs	r7, r1, #16
 8016526:	1429      	asrs	r1, r5, #16
 8016528:	1879      	adds	r1, r7, r1
 801652a:	140f      	asrs	r7, r1, #16
 801652c:	b2ad      	uxth	r5, r5
 801652e:	0409      	lsls	r1, r1, #16
 8016530:	430d      	orrs	r5, r1
 8016532:	4661      	mov	r1, ip
 8016534:	c120      	stmia	r1!, {r5}
 8016536:	468c      	mov	ip, r1
 8016538:	e7dd      	b.n	80164f6 <__mdiff+0xda>
 801653a:	3801      	subs	r0, #1
 801653c:	e7e9      	b.n	8016512 <__mdiff+0xf6>
 801653e:	46c0      	nop			; (mov r8, r8)
 8016540:	08018abf 	.word	0x08018abf
 8016544:	00000232 	.word	0x00000232
 8016548:	08018ad0 	.word	0x08018ad0

0801654c <__d2b>:
 801654c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801654e:	2101      	movs	r1, #1
 8016550:	0014      	movs	r4, r2
 8016552:	001e      	movs	r6, r3
 8016554:	9f08      	ldr	r7, [sp, #32]
 8016556:	f7ff fcc1 	bl	8015edc <_Balloc>
 801655a:	1e05      	subs	r5, r0, #0
 801655c:	d105      	bne.n	801656a <__d2b+0x1e>
 801655e:	0002      	movs	r2, r0
 8016560:	4b26      	ldr	r3, [pc, #152]	; (80165fc <__d2b+0xb0>)
 8016562:	4927      	ldr	r1, [pc, #156]	; (8016600 <__d2b+0xb4>)
 8016564:	4827      	ldr	r0, [pc, #156]	; (8016604 <__d2b+0xb8>)
 8016566:	f000 f9e3 	bl	8016930 <__assert_func>
 801656a:	0333      	lsls	r3, r6, #12
 801656c:	0076      	lsls	r6, r6, #1
 801656e:	0b1b      	lsrs	r3, r3, #12
 8016570:	0d76      	lsrs	r6, r6, #21
 8016572:	d124      	bne.n	80165be <__d2b+0x72>
 8016574:	9301      	str	r3, [sp, #4]
 8016576:	2c00      	cmp	r4, #0
 8016578:	d027      	beq.n	80165ca <__d2b+0x7e>
 801657a:	4668      	mov	r0, sp
 801657c:	9400      	str	r4, [sp, #0]
 801657e:	f7ff fd73 	bl	8016068 <__lo0bits>
 8016582:	9c00      	ldr	r4, [sp, #0]
 8016584:	2800      	cmp	r0, #0
 8016586:	d01e      	beq.n	80165c6 <__d2b+0x7a>
 8016588:	9b01      	ldr	r3, [sp, #4]
 801658a:	2120      	movs	r1, #32
 801658c:	001a      	movs	r2, r3
 801658e:	1a09      	subs	r1, r1, r0
 8016590:	408a      	lsls	r2, r1
 8016592:	40c3      	lsrs	r3, r0
 8016594:	4322      	orrs	r2, r4
 8016596:	616a      	str	r2, [r5, #20]
 8016598:	9301      	str	r3, [sp, #4]
 801659a:	9c01      	ldr	r4, [sp, #4]
 801659c:	61ac      	str	r4, [r5, #24]
 801659e:	1e63      	subs	r3, r4, #1
 80165a0:	419c      	sbcs	r4, r3
 80165a2:	3401      	adds	r4, #1
 80165a4:	612c      	str	r4, [r5, #16]
 80165a6:	2e00      	cmp	r6, #0
 80165a8:	d018      	beq.n	80165dc <__d2b+0x90>
 80165aa:	4b17      	ldr	r3, [pc, #92]	; (8016608 <__d2b+0xbc>)
 80165ac:	18f6      	adds	r6, r6, r3
 80165ae:	2335      	movs	r3, #53	; 0x35
 80165b0:	1836      	adds	r6, r6, r0
 80165b2:	1a18      	subs	r0, r3, r0
 80165b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165b6:	603e      	str	r6, [r7, #0]
 80165b8:	6018      	str	r0, [r3, #0]
 80165ba:	0028      	movs	r0, r5
 80165bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80165be:	2280      	movs	r2, #128	; 0x80
 80165c0:	0352      	lsls	r2, r2, #13
 80165c2:	4313      	orrs	r3, r2
 80165c4:	e7d6      	b.n	8016574 <__d2b+0x28>
 80165c6:	616c      	str	r4, [r5, #20]
 80165c8:	e7e7      	b.n	801659a <__d2b+0x4e>
 80165ca:	a801      	add	r0, sp, #4
 80165cc:	f7ff fd4c 	bl	8016068 <__lo0bits>
 80165d0:	2401      	movs	r4, #1
 80165d2:	9b01      	ldr	r3, [sp, #4]
 80165d4:	612c      	str	r4, [r5, #16]
 80165d6:	616b      	str	r3, [r5, #20]
 80165d8:	3020      	adds	r0, #32
 80165da:	e7e4      	b.n	80165a6 <__d2b+0x5a>
 80165dc:	4b0b      	ldr	r3, [pc, #44]	; (801660c <__d2b+0xc0>)
 80165de:	18c0      	adds	r0, r0, r3
 80165e0:	4b0b      	ldr	r3, [pc, #44]	; (8016610 <__d2b+0xc4>)
 80165e2:	6038      	str	r0, [r7, #0]
 80165e4:	18e3      	adds	r3, r4, r3
 80165e6:	009b      	lsls	r3, r3, #2
 80165e8:	18eb      	adds	r3, r5, r3
 80165ea:	6958      	ldr	r0, [r3, #20]
 80165ec:	f7ff fd22 	bl	8016034 <__hi0bits>
 80165f0:	0164      	lsls	r4, r4, #5
 80165f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165f4:	1a24      	subs	r4, r4, r0
 80165f6:	601c      	str	r4, [r3, #0]
 80165f8:	e7df      	b.n	80165ba <__d2b+0x6e>
 80165fa:	46c0      	nop			; (mov r8, r8)
 80165fc:	08018abf 	.word	0x08018abf
 8016600:	0000030a 	.word	0x0000030a
 8016604:	08018ad0 	.word	0x08018ad0
 8016608:	fffffbcd 	.word	0xfffffbcd
 801660c:	fffffbce 	.word	0xfffffbce
 8016610:	3fffffff 	.word	0x3fffffff

08016614 <_calloc_r>:
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	0c13      	lsrs	r3, r2, #16
 8016618:	0c0d      	lsrs	r5, r1, #16
 801661a:	d11e      	bne.n	801665a <_calloc_r+0x46>
 801661c:	2b00      	cmp	r3, #0
 801661e:	d10c      	bne.n	801663a <_calloc_r+0x26>
 8016620:	b289      	uxth	r1, r1
 8016622:	b294      	uxth	r4, r2
 8016624:	434c      	muls	r4, r1
 8016626:	0021      	movs	r1, r4
 8016628:	f7fe f87c 	bl	8014724 <_malloc_r>
 801662c:	1e05      	subs	r5, r0, #0
 801662e:	d01b      	beq.n	8016668 <_calloc_r+0x54>
 8016630:	0022      	movs	r2, r4
 8016632:	2100      	movs	r1, #0
 8016634:	f7fe f801 	bl	801463a <memset>
 8016638:	e016      	b.n	8016668 <_calloc_r+0x54>
 801663a:	1c1d      	adds	r5, r3, #0
 801663c:	1c0b      	adds	r3, r1, #0
 801663e:	b292      	uxth	r2, r2
 8016640:	b289      	uxth	r1, r1
 8016642:	b29c      	uxth	r4, r3
 8016644:	4351      	muls	r1, r2
 8016646:	b2ab      	uxth	r3, r5
 8016648:	4363      	muls	r3, r4
 801664a:	0c0c      	lsrs	r4, r1, #16
 801664c:	191c      	adds	r4, r3, r4
 801664e:	0c22      	lsrs	r2, r4, #16
 8016650:	d107      	bne.n	8016662 <_calloc_r+0x4e>
 8016652:	0424      	lsls	r4, r4, #16
 8016654:	b289      	uxth	r1, r1
 8016656:	430c      	orrs	r4, r1
 8016658:	e7e5      	b.n	8016626 <_calloc_r+0x12>
 801665a:	2b00      	cmp	r3, #0
 801665c:	d101      	bne.n	8016662 <_calloc_r+0x4e>
 801665e:	1c13      	adds	r3, r2, #0
 8016660:	e7ed      	b.n	801663e <_calloc_r+0x2a>
 8016662:	230c      	movs	r3, #12
 8016664:	2500      	movs	r5, #0
 8016666:	6003      	str	r3, [r0, #0]
 8016668:	0028      	movs	r0, r5
 801666a:	bd70      	pop	{r4, r5, r6, pc}

0801666c <__ssputs_r>:
 801666c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801666e:	688e      	ldr	r6, [r1, #8]
 8016670:	b085      	sub	sp, #20
 8016672:	0007      	movs	r7, r0
 8016674:	000c      	movs	r4, r1
 8016676:	9203      	str	r2, [sp, #12]
 8016678:	9301      	str	r3, [sp, #4]
 801667a:	429e      	cmp	r6, r3
 801667c:	d83c      	bhi.n	80166f8 <__ssputs_r+0x8c>
 801667e:	2390      	movs	r3, #144	; 0x90
 8016680:	898a      	ldrh	r2, [r1, #12]
 8016682:	00db      	lsls	r3, r3, #3
 8016684:	421a      	tst	r2, r3
 8016686:	d034      	beq.n	80166f2 <__ssputs_r+0x86>
 8016688:	6909      	ldr	r1, [r1, #16]
 801668a:	6823      	ldr	r3, [r4, #0]
 801668c:	6960      	ldr	r0, [r4, #20]
 801668e:	1a5b      	subs	r3, r3, r1
 8016690:	9302      	str	r3, [sp, #8]
 8016692:	2303      	movs	r3, #3
 8016694:	4343      	muls	r3, r0
 8016696:	0fdd      	lsrs	r5, r3, #31
 8016698:	18ed      	adds	r5, r5, r3
 801669a:	9b01      	ldr	r3, [sp, #4]
 801669c:	9802      	ldr	r0, [sp, #8]
 801669e:	3301      	adds	r3, #1
 80166a0:	181b      	adds	r3, r3, r0
 80166a2:	106d      	asrs	r5, r5, #1
 80166a4:	42ab      	cmp	r3, r5
 80166a6:	d900      	bls.n	80166aa <__ssputs_r+0x3e>
 80166a8:	001d      	movs	r5, r3
 80166aa:	0553      	lsls	r3, r2, #21
 80166ac:	d532      	bpl.n	8016714 <__ssputs_r+0xa8>
 80166ae:	0029      	movs	r1, r5
 80166b0:	0038      	movs	r0, r7
 80166b2:	f7fe f837 	bl	8014724 <_malloc_r>
 80166b6:	1e06      	subs	r6, r0, #0
 80166b8:	d109      	bne.n	80166ce <__ssputs_r+0x62>
 80166ba:	230c      	movs	r3, #12
 80166bc:	603b      	str	r3, [r7, #0]
 80166be:	2340      	movs	r3, #64	; 0x40
 80166c0:	2001      	movs	r0, #1
 80166c2:	89a2      	ldrh	r2, [r4, #12]
 80166c4:	4240      	negs	r0, r0
 80166c6:	4313      	orrs	r3, r2
 80166c8:	81a3      	strh	r3, [r4, #12]
 80166ca:	b005      	add	sp, #20
 80166cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ce:	9a02      	ldr	r2, [sp, #8]
 80166d0:	6921      	ldr	r1, [r4, #16]
 80166d2:	f7fd ffa9 	bl	8014628 <memcpy>
 80166d6:	89a3      	ldrh	r3, [r4, #12]
 80166d8:	4a14      	ldr	r2, [pc, #80]	; (801672c <__ssputs_r+0xc0>)
 80166da:	401a      	ands	r2, r3
 80166dc:	2380      	movs	r3, #128	; 0x80
 80166de:	4313      	orrs	r3, r2
 80166e0:	81a3      	strh	r3, [r4, #12]
 80166e2:	9b02      	ldr	r3, [sp, #8]
 80166e4:	6126      	str	r6, [r4, #16]
 80166e6:	18f6      	adds	r6, r6, r3
 80166e8:	6026      	str	r6, [r4, #0]
 80166ea:	6165      	str	r5, [r4, #20]
 80166ec:	9e01      	ldr	r6, [sp, #4]
 80166ee:	1aed      	subs	r5, r5, r3
 80166f0:	60a5      	str	r5, [r4, #8]
 80166f2:	9b01      	ldr	r3, [sp, #4]
 80166f4:	429e      	cmp	r6, r3
 80166f6:	d900      	bls.n	80166fa <__ssputs_r+0x8e>
 80166f8:	9e01      	ldr	r6, [sp, #4]
 80166fa:	0032      	movs	r2, r6
 80166fc:	9903      	ldr	r1, [sp, #12]
 80166fe:	6820      	ldr	r0, [r4, #0]
 8016700:	f000 f959 	bl	80169b6 <memmove>
 8016704:	68a3      	ldr	r3, [r4, #8]
 8016706:	2000      	movs	r0, #0
 8016708:	1b9b      	subs	r3, r3, r6
 801670a:	60a3      	str	r3, [r4, #8]
 801670c:	6823      	ldr	r3, [r4, #0]
 801670e:	199e      	adds	r6, r3, r6
 8016710:	6026      	str	r6, [r4, #0]
 8016712:	e7da      	b.n	80166ca <__ssputs_r+0x5e>
 8016714:	002a      	movs	r2, r5
 8016716:	0038      	movs	r0, r7
 8016718:	f000 f960 	bl	80169dc <_realloc_r>
 801671c:	1e06      	subs	r6, r0, #0
 801671e:	d1e0      	bne.n	80166e2 <__ssputs_r+0x76>
 8016720:	0038      	movs	r0, r7
 8016722:	6921      	ldr	r1, [r4, #16]
 8016724:	f7fd ff92 	bl	801464c <_free_r>
 8016728:	e7c7      	b.n	80166ba <__ssputs_r+0x4e>
 801672a:	46c0      	nop			; (mov r8, r8)
 801672c:	fffffb7f 	.word	0xfffffb7f

08016730 <_svfiprintf_r>:
 8016730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016732:	b0a1      	sub	sp, #132	; 0x84
 8016734:	9003      	str	r0, [sp, #12]
 8016736:	001d      	movs	r5, r3
 8016738:	898b      	ldrh	r3, [r1, #12]
 801673a:	000f      	movs	r7, r1
 801673c:	0016      	movs	r6, r2
 801673e:	061b      	lsls	r3, r3, #24
 8016740:	d511      	bpl.n	8016766 <_svfiprintf_r+0x36>
 8016742:	690b      	ldr	r3, [r1, #16]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10e      	bne.n	8016766 <_svfiprintf_r+0x36>
 8016748:	2140      	movs	r1, #64	; 0x40
 801674a:	f7fd ffeb 	bl	8014724 <_malloc_r>
 801674e:	6038      	str	r0, [r7, #0]
 8016750:	6138      	str	r0, [r7, #16]
 8016752:	2800      	cmp	r0, #0
 8016754:	d105      	bne.n	8016762 <_svfiprintf_r+0x32>
 8016756:	230c      	movs	r3, #12
 8016758:	9a03      	ldr	r2, [sp, #12]
 801675a:	3801      	subs	r0, #1
 801675c:	6013      	str	r3, [r2, #0]
 801675e:	b021      	add	sp, #132	; 0x84
 8016760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016762:	2340      	movs	r3, #64	; 0x40
 8016764:	617b      	str	r3, [r7, #20]
 8016766:	2300      	movs	r3, #0
 8016768:	ac08      	add	r4, sp, #32
 801676a:	6163      	str	r3, [r4, #20]
 801676c:	3320      	adds	r3, #32
 801676e:	7663      	strb	r3, [r4, #25]
 8016770:	3310      	adds	r3, #16
 8016772:	76a3      	strb	r3, [r4, #26]
 8016774:	9507      	str	r5, [sp, #28]
 8016776:	0035      	movs	r5, r6
 8016778:	782b      	ldrb	r3, [r5, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d001      	beq.n	8016782 <_svfiprintf_r+0x52>
 801677e:	2b25      	cmp	r3, #37	; 0x25
 8016780:	d147      	bne.n	8016812 <_svfiprintf_r+0xe2>
 8016782:	1bab      	subs	r3, r5, r6
 8016784:	9305      	str	r3, [sp, #20]
 8016786:	42b5      	cmp	r5, r6
 8016788:	d00c      	beq.n	80167a4 <_svfiprintf_r+0x74>
 801678a:	0032      	movs	r2, r6
 801678c:	0039      	movs	r1, r7
 801678e:	9803      	ldr	r0, [sp, #12]
 8016790:	f7ff ff6c 	bl	801666c <__ssputs_r>
 8016794:	1c43      	adds	r3, r0, #1
 8016796:	d100      	bne.n	801679a <_svfiprintf_r+0x6a>
 8016798:	e0ae      	b.n	80168f8 <_svfiprintf_r+0x1c8>
 801679a:	6962      	ldr	r2, [r4, #20]
 801679c:	9b05      	ldr	r3, [sp, #20]
 801679e:	4694      	mov	ip, r2
 80167a0:	4463      	add	r3, ip
 80167a2:	6163      	str	r3, [r4, #20]
 80167a4:	782b      	ldrb	r3, [r5, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d100      	bne.n	80167ac <_svfiprintf_r+0x7c>
 80167aa:	e0a5      	b.n	80168f8 <_svfiprintf_r+0x1c8>
 80167ac:	2201      	movs	r2, #1
 80167ae:	2300      	movs	r3, #0
 80167b0:	4252      	negs	r2, r2
 80167b2:	6062      	str	r2, [r4, #4]
 80167b4:	a904      	add	r1, sp, #16
 80167b6:	3254      	adds	r2, #84	; 0x54
 80167b8:	1852      	adds	r2, r2, r1
 80167ba:	1c6e      	adds	r6, r5, #1
 80167bc:	6023      	str	r3, [r4, #0]
 80167be:	60e3      	str	r3, [r4, #12]
 80167c0:	60a3      	str	r3, [r4, #8]
 80167c2:	7013      	strb	r3, [r2, #0]
 80167c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80167c6:	2205      	movs	r2, #5
 80167c8:	7831      	ldrb	r1, [r6, #0]
 80167ca:	4854      	ldr	r0, [pc, #336]	; (801691c <_svfiprintf_r+0x1ec>)
 80167cc:	f7ff fb6a 	bl	8015ea4 <memchr>
 80167d0:	1c75      	adds	r5, r6, #1
 80167d2:	2800      	cmp	r0, #0
 80167d4:	d11f      	bne.n	8016816 <_svfiprintf_r+0xe6>
 80167d6:	6822      	ldr	r2, [r4, #0]
 80167d8:	06d3      	lsls	r3, r2, #27
 80167da:	d504      	bpl.n	80167e6 <_svfiprintf_r+0xb6>
 80167dc:	2353      	movs	r3, #83	; 0x53
 80167de:	a904      	add	r1, sp, #16
 80167e0:	185b      	adds	r3, r3, r1
 80167e2:	2120      	movs	r1, #32
 80167e4:	7019      	strb	r1, [r3, #0]
 80167e6:	0713      	lsls	r3, r2, #28
 80167e8:	d504      	bpl.n	80167f4 <_svfiprintf_r+0xc4>
 80167ea:	2353      	movs	r3, #83	; 0x53
 80167ec:	a904      	add	r1, sp, #16
 80167ee:	185b      	adds	r3, r3, r1
 80167f0:	212b      	movs	r1, #43	; 0x2b
 80167f2:	7019      	strb	r1, [r3, #0]
 80167f4:	7833      	ldrb	r3, [r6, #0]
 80167f6:	2b2a      	cmp	r3, #42	; 0x2a
 80167f8:	d016      	beq.n	8016828 <_svfiprintf_r+0xf8>
 80167fa:	0035      	movs	r5, r6
 80167fc:	2100      	movs	r1, #0
 80167fe:	200a      	movs	r0, #10
 8016800:	68e3      	ldr	r3, [r4, #12]
 8016802:	782a      	ldrb	r2, [r5, #0]
 8016804:	1c6e      	adds	r6, r5, #1
 8016806:	3a30      	subs	r2, #48	; 0x30
 8016808:	2a09      	cmp	r2, #9
 801680a:	d94e      	bls.n	80168aa <_svfiprintf_r+0x17a>
 801680c:	2900      	cmp	r1, #0
 801680e:	d111      	bne.n	8016834 <_svfiprintf_r+0x104>
 8016810:	e017      	b.n	8016842 <_svfiprintf_r+0x112>
 8016812:	3501      	adds	r5, #1
 8016814:	e7b0      	b.n	8016778 <_svfiprintf_r+0x48>
 8016816:	4b41      	ldr	r3, [pc, #260]	; (801691c <_svfiprintf_r+0x1ec>)
 8016818:	6822      	ldr	r2, [r4, #0]
 801681a:	1ac0      	subs	r0, r0, r3
 801681c:	2301      	movs	r3, #1
 801681e:	4083      	lsls	r3, r0
 8016820:	4313      	orrs	r3, r2
 8016822:	002e      	movs	r6, r5
 8016824:	6023      	str	r3, [r4, #0]
 8016826:	e7ce      	b.n	80167c6 <_svfiprintf_r+0x96>
 8016828:	9b07      	ldr	r3, [sp, #28]
 801682a:	1d19      	adds	r1, r3, #4
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	9107      	str	r1, [sp, #28]
 8016830:	2b00      	cmp	r3, #0
 8016832:	db01      	blt.n	8016838 <_svfiprintf_r+0x108>
 8016834:	930b      	str	r3, [sp, #44]	; 0x2c
 8016836:	e004      	b.n	8016842 <_svfiprintf_r+0x112>
 8016838:	425b      	negs	r3, r3
 801683a:	60e3      	str	r3, [r4, #12]
 801683c:	2302      	movs	r3, #2
 801683e:	4313      	orrs	r3, r2
 8016840:	6023      	str	r3, [r4, #0]
 8016842:	782b      	ldrb	r3, [r5, #0]
 8016844:	2b2e      	cmp	r3, #46	; 0x2e
 8016846:	d10a      	bne.n	801685e <_svfiprintf_r+0x12e>
 8016848:	786b      	ldrb	r3, [r5, #1]
 801684a:	2b2a      	cmp	r3, #42	; 0x2a
 801684c:	d135      	bne.n	80168ba <_svfiprintf_r+0x18a>
 801684e:	9b07      	ldr	r3, [sp, #28]
 8016850:	3502      	adds	r5, #2
 8016852:	1d1a      	adds	r2, r3, #4
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	9207      	str	r2, [sp, #28]
 8016858:	2b00      	cmp	r3, #0
 801685a:	db2b      	blt.n	80168b4 <_svfiprintf_r+0x184>
 801685c:	9309      	str	r3, [sp, #36]	; 0x24
 801685e:	4e30      	ldr	r6, [pc, #192]	; (8016920 <_svfiprintf_r+0x1f0>)
 8016860:	2203      	movs	r2, #3
 8016862:	0030      	movs	r0, r6
 8016864:	7829      	ldrb	r1, [r5, #0]
 8016866:	f7ff fb1d 	bl	8015ea4 <memchr>
 801686a:	2800      	cmp	r0, #0
 801686c:	d006      	beq.n	801687c <_svfiprintf_r+0x14c>
 801686e:	2340      	movs	r3, #64	; 0x40
 8016870:	1b80      	subs	r0, r0, r6
 8016872:	4083      	lsls	r3, r0
 8016874:	6822      	ldr	r2, [r4, #0]
 8016876:	3501      	adds	r5, #1
 8016878:	4313      	orrs	r3, r2
 801687a:	6023      	str	r3, [r4, #0]
 801687c:	7829      	ldrb	r1, [r5, #0]
 801687e:	2206      	movs	r2, #6
 8016880:	4828      	ldr	r0, [pc, #160]	; (8016924 <_svfiprintf_r+0x1f4>)
 8016882:	1c6e      	adds	r6, r5, #1
 8016884:	7621      	strb	r1, [r4, #24]
 8016886:	f7ff fb0d 	bl	8015ea4 <memchr>
 801688a:	2800      	cmp	r0, #0
 801688c:	d03c      	beq.n	8016908 <_svfiprintf_r+0x1d8>
 801688e:	4b26      	ldr	r3, [pc, #152]	; (8016928 <_svfiprintf_r+0x1f8>)
 8016890:	2b00      	cmp	r3, #0
 8016892:	d125      	bne.n	80168e0 <_svfiprintf_r+0x1b0>
 8016894:	2207      	movs	r2, #7
 8016896:	9b07      	ldr	r3, [sp, #28]
 8016898:	3307      	adds	r3, #7
 801689a:	4393      	bics	r3, r2
 801689c:	3308      	adds	r3, #8
 801689e:	9307      	str	r3, [sp, #28]
 80168a0:	6963      	ldr	r3, [r4, #20]
 80168a2:	9a04      	ldr	r2, [sp, #16]
 80168a4:	189b      	adds	r3, r3, r2
 80168a6:	6163      	str	r3, [r4, #20]
 80168a8:	e765      	b.n	8016776 <_svfiprintf_r+0x46>
 80168aa:	4343      	muls	r3, r0
 80168ac:	0035      	movs	r5, r6
 80168ae:	2101      	movs	r1, #1
 80168b0:	189b      	adds	r3, r3, r2
 80168b2:	e7a6      	b.n	8016802 <_svfiprintf_r+0xd2>
 80168b4:	2301      	movs	r3, #1
 80168b6:	425b      	negs	r3, r3
 80168b8:	e7d0      	b.n	801685c <_svfiprintf_r+0x12c>
 80168ba:	2300      	movs	r3, #0
 80168bc:	200a      	movs	r0, #10
 80168be:	001a      	movs	r2, r3
 80168c0:	3501      	adds	r5, #1
 80168c2:	6063      	str	r3, [r4, #4]
 80168c4:	7829      	ldrb	r1, [r5, #0]
 80168c6:	1c6e      	adds	r6, r5, #1
 80168c8:	3930      	subs	r1, #48	; 0x30
 80168ca:	2909      	cmp	r1, #9
 80168cc:	d903      	bls.n	80168d6 <_svfiprintf_r+0x1a6>
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d0c5      	beq.n	801685e <_svfiprintf_r+0x12e>
 80168d2:	9209      	str	r2, [sp, #36]	; 0x24
 80168d4:	e7c3      	b.n	801685e <_svfiprintf_r+0x12e>
 80168d6:	4342      	muls	r2, r0
 80168d8:	0035      	movs	r5, r6
 80168da:	2301      	movs	r3, #1
 80168dc:	1852      	adds	r2, r2, r1
 80168de:	e7f1      	b.n	80168c4 <_svfiprintf_r+0x194>
 80168e0:	ab07      	add	r3, sp, #28
 80168e2:	9300      	str	r3, [sp, #0]
 80168e4:	003a      	movs	r2, r7
 80168e6:	0021      	movs	r1, r4
 80168e8:	4b10      	ldr	r3, [pc, #64]	; (801692c <_svfiprintf_r+0x1fc>)
 80168ea:	9803      	ldr	r0, [sp, #12]
 80168ec:	f7fe f83a 	bl	8014964 <_printf_float>
 80168f0:	9004      	str	r0, [sp, #16]
 80168f2:	9b04      	ldr	r3, [sp, #16]
 80168f4:	3301      	adds	r3, #1
 80168f6:	d1d3      	bne.n	80168a0 <_svfiprintf_r+0x170>
 80168f8:	89bb      	ldrh	r3, [r7, #12]
 80168fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80168fc:	065b      	lsls	r3, r3, #25
 80168fe:	d400      	bmi.n	8016902 <_svfiprintf_r+0x1d2>
 8016900:	e72d      	b.n	801675e <_svfiprintf_r+0x2e>
 8016902:	2001      	movs	r0, #1
 8016904:	4240      	negs	r0, r0
 8016906:	e72a      	b.n	801675e <_svfiprintf_r+0x2e>
 8016908:	ab07      	add	r3, sp, #28
 801690a:	9300      	str	r3, [sp, #0]
 801690c:	003a      	movs	r2, r7
 801690e:	0021      	movs	r1, r4
 8016910:	4b06      	ldr	r3, [pc, #24]	; (801692c <_svfiprintf_r+0x1fc>)
 8016912:	9803      	ldr	r0, [sp, #12]
 8016914:	f7fe fad8 	bl	8014ec8 <_printf_i>
 8016918:	e7ea      	b.n	80168f0 <_svfiprintf_r+0x1c0>
 801691a:	46c0      	nop			; (mov r8, r8)
 801691c:	08018c2c 	.word	0x08018c2c
 8016920:	08018c32 	.word	0x08018c32
 8016924:	08018c36 	.word	0x08018c36
 8016928:	08014965 	.word	0x08014965
 801692c:	0801666d 	.word	0x0801666d

08016930 <__assert_func>:
 8016930:	b530      	push	{r4, r5, lr}
 8016932:	0014      	movs	r4, r2
 8016934:	001a      	movs	r2, r3
 8016936:	4b09      	ldr	r3, [pc, #36]	; (801695c <__assert_func+0x2c>)
 8016938:	0005      	movs	r5, r0
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	b085      	sub	sp, #20
 801693e:	68d8      	ldr	r0, [r3, #12]
 8016940:	4b07      	ldr	r3, [pc, #28]	; (8016960 <__assert_func+0x30>)
 8016942:	2c00      	cmp	r4, #0
 8016944:	d101      	bne.n	801694a <__assert_func+0x1a>
 8016946:	4b07      	ldr	r3, [pc, #28]	; (8016964 <__assert_func+0x34>)
 8016948:	001c      	movs	r4, r3
 801694a:	9301      	str	r3, [sp, #4]
 801694c:	9100      	str	r1, [sp, #0]
 801694e:	002b      	movs	r3, r5
 8016950:	4905      	ldr	r1, [pc, #20]	; (8016968 <__assert_func+0x38>)
 8016952:	9402      	str	r4, [sp, #8]
 8016954:	f000 f80a 	bl	801696c <fiprintf>
 8016958:	f000 faac 	bl	8016eb4 <abort>
 801695c:	200030dc 	.word	0x200030dc
 8016960:	08018c3d 	.word	0x08018c3d
 8016964:	08018c78 	.word	0x08018c78
 8016968:	08018c4a 	.word	0x08018c4a

0801696c <fiprintf>:
 801696c:	b40e      	push	{r1, r2, r3}
 801696e:	b503      	push	{r0, r1, lr}
 8016970:	0001      	movs	r1, r0
 8016972:	ab03      	add	r3, sp, #12
 8016974:	4804      	ldr	r0, [pc, #16]	; (8016988 <fiprintf+0x1c>)
 8016976:	cb04      	ldmia	r3!, {r2}
 8016978:	6800      	ldr	r0, [r0, #0]
 801697a:	9301      	str	r3, [sp, #4]
 801697c:	f000 f884 	bl	8016a88 <_vfiprintf_r>
 8016980:	b002      	add	sp, #8
 8016982:	bc08      	pop	{r3}
 8016984:	b003      	add	sp, #12
 8016986:	4718      	bx	r3
 8016988:	200030dc 	.word	0x200030dc

0801698c <__retarget_lock_init_recursive>:
 801698c:	4770      	bx	lr

0801698e <__retarget_lock_acquire_recursive>:
 801698e:	4770      	bx	lr

08016990 <__retarget_lock_release_recursive>:
 8016990:	4770      	bx	lr

08016992 <__ascii_mbtowc>:
 8016992:	b082      	sub	sp, #8
 8016994:	2900      	cmp	r1, #0
 8016996:	d100      	bne.n	801699a <__ascii_mbtowc+0x8>
 8016998:	a901      	add	r1, sp, #4
 801699a:	1e10      	subs	r0, r2, #0
 801699c:	d006      	beq.n	80169ac <__ascii_mbtowc+0x1a>
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d006      	beq.n	80169b0 <__ascii_mbtowc+0x1e>
 80169a2:	7813      	ldrb	r3, [r2, #0]
 80169a4:	600b      	str	r3, [r1, #0]
 80169a6:	7810      	ldrb	r0, [r2, #0]
 80169a8:	1e43      	subs	r3, r0, #1
 80169aa:	4198      	sbcs	r0, r3
 80169ac:	b002      	add	sp, #8
 80169ae:	4770      	bx	lr
 80169b0:	2002      	movs	r0, #2
 80169b2:	4240      	negs	r0, r0
 80169b4:	e7fa      	b.n	80169ac <__ascii_mbtowc+0x1a>

080169b6 <memmove>:
 80169b6:	b510      	push	{r4, lr}
 80169b8:	4288      	cmp	r0, r1
 80169ba:	d902      	bls.n	80169c2 <memmove+0xc>
 80169bc:	188b      	adds	r3, r1, r2
 80169be:	4298      	cmp	r0, r3
 80169c0:	d303      	bcc.n	80169ca <memmove+0x14>
 80169c2:	2300      	movs	r3, #0
 80169c4:	e007      	b.n	80169d6 <memmove+0x20>
 80169c6:	5c8b      	ldrb	r3, [r1, r2]
 80169c8:	5483      	strb	r3, [r0, r2]
 80169ca:	3a01      	subs	r2, #1
 80169cc:	d2fb      	bcs.n	80169c6 <memmove+0x10>
 80169ce:	bd10      	pop	{r4, pc}
 80169d0:	5ccc      	ldrb	r4, [r1, r3]
 80169d2:	54c4      	strb	r4, [r0, r3]
 80169d4:	3301      	adds	r3, #1
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d1fa      	bne.n	80169d0 <memmove+0x1a>
 80169da:	e7f8      	b.n	80169ce <memmove+0x18>

080169dc <_realloc_r>:
 80169dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169de:	0007      	movs	r7, r0
 80169e0:	000e      	movs	r6, r1
 80169e2:	0014      	movs	r4, r2
 80169e4:	2900      	cmp	r1, #0
 80169e6:	d105      	bne.n	80169f4 <_realloc_r+0x18>
 80169e8:	0011      	movs	r1, r2
 80169ea:	f7fd fe9b 	bl	8014724 <_malloc_r>
 80169ee:	0005      	movs	r5, r0
 80169f0:	0028      	movs	r0, r5
 80169f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169f4:	2a00      	cmp	r2, #0
 80169f6:	d103      	bne.n	8016a00 <_realloc_r+0x24>
 80169f8:	f7fd fe28 	bl	801464c <_free_r>
 80169fc:	0025      	movs	r5, r4
 80169fe:	e7f7      	b.n	80169f0 <_realloc_r+0x14>
 8016a00:	f000 fc9a 	bl	8017338 <_malloc_usable_size_r>
 8016a04:	9001      	str	r0, [sp, #4]
 8016a06:	4284      	cmp	r4, r0
 8016a08:	d803      	bhi.n	8016a12 <_realloc_r+0x36>
 8016a0a:	0035      	movs	r5, r6
 8016a0c:	0843      	lsrs	r3, r0, #1
 8016a0e:	42a3      	cmp	r3, r4
 8016a10:	d3ee      	bcc.n	80169f0 <_realloc_r+0x14>
 8016a12:	0021      	movs	r1, r4
 8016a14:	0038      	movs	r0, r7
 8016a16:	f7fd fe85 	bl	8014724 <_malloc_r>
 8016a1a:	1e05      	subs	r5, r0, #0
 8016a1c:	d0e8      	beq.n	80169f0 <_realloc_r+0x14>
 8016a1e:	9b01      	ldr	r3, [sp, #4]
 8016a20:	0022      	movs	r2, r4
 8016a22:	429c      	cmp	r4, r3
 8016a24:	d900      	bls.n	8016a28 <_realloc_r+0x4c>
 8016a26:	001a      	movs	r2, r3
 8016a28:	0031      	movs	r1, r6
 8016a2a:	0028      	movs	r0, r5
 8016a2c:	f7fd fdfc 	bl	8014628 <memcpy>
 8016a30:	0031      	movs	r1, r6
 8016a32:	0038      	movs	r0, r7
 8016a34:	f7fd fe0a 	bl	801464c <_free_r>
 8016a38:	e7da      	b.n	80169f0 <_realloc_r+0x14>

08016a3a <__sfputc_r>:
 8016a3a:	6893      	ldr	r3, [r2, #8]
 8016a3c:	b510      	push	{r4, lr}
 8016a3e:	3b01      	subs	r3, #1
 8016a40:	6093      	str	r3, [r2, #8]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	da04      	bge.n	8016a50 <__sfputc_r+0x16>
 8016a46:	6994      	ldr	r4, [r2, #24]
 8016a48:	42a3      	cmp	r3, r4
 8016a4a:	db07      	blt.n	8016a5c <__sfputc_r+0x22>
 8016a4c:	290a      	cmp	r1, #10
 8016a4e:	d005      	beq.n	8016a5c <__sfputc_r+0x22>
 8016a50:	6813      	ldr	r3, [r2, #0]
 8016a52:	1c58      	adds	r0, r3, #1
 8016a54:	6010      	str	r0, [r2, #0]
 8016a56:	7019      	strb	r1, [r3, #0]
 8016a58:	0008      	movs	r0, r1
 8016a5a:	bd10      	pop	{r4, pc}
 8016a5c:	f000 f94e 	bl	8016cfc <__swbuf_r>
 8016a60:	0001      	movs	r1, r0
 8016a62:	e7f9      	b.n	8016a58 <__sfputc_r+0x1e>

08016a64 <__sfputs_r>:
 8016a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a66:	0006      	movs	r6, r0
 8016a68:	000f      	movs	r7, r1
 8016a6a:	0014      	movs	r4, r2
 8016a6c:	18d5      	adds	r5, r2, r3
 8016a6e:	42ac      	cmp	r4, r5
 8016a70:	d101      	bne.n	8016a76 <__sfputs_r+0x12>
 8016a72:	2000      	movs	r0, #0
 8016a74:	e007      	b.n	8016a86 <__sfputs_r+0x22>
 8016a76:	7821      	ldrb	r1, [r4, #0]
 8016a78:	003a      	movs	r2, r7
 8016a7a:	0030      	movs	r0, r6
 8016a7c:	f7ff ffdd 	bl	8016a3a <__sfputc_r>
 8016a80:	3401      	adds	r4, #1
 8016a82:	1c43      	adds	r3, r0, #1
 8016a84:	d1f3      	bne.n	8016a6e <__sfputs_r+0xa>
 8016a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016a88 <_vfiprintf_r>:
 8016a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a8a:	b0a1      	sub	sp, #132	; 0x84
 8016a8c:	0006      	movs	r6, r0
 8016a8e:	000c      	movs	r4, r1
 8016a90:	001f      	movs	r7, r3
 8016a92:	9203      	str	r2, [sp, #12]
 8016a94:	2800      	cmp	r0, #0
 8016a96:	d004      	beq.n	8016aa2 <_vfiprintf_r+0x1a>
 8016a98:	6983      	ldr	r3, [r0, #24]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d101      	bne.n	8016aa2 <_vfiprintf_r+0x1a>
 8016a9e:	f000 fb3f 	bl	8017120 <__sinit>
 8016aa2:	4b8e      	ldr	r3, [pc, #568]	; (8016cdc <_vfiprintf_r+0x254>)
 8016aa4:	429c      	cmp	r4, r3
 8016aa6:	d11c      	bne.n	8016ae2 <_vfiprintf_r+0x5a>
 8016aa8:	6874      	ldr	r4, [r6, #4]
 8016aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016aac:	07db      	lsls	r3, r3, #31
 8016aae:	d405      	bmi.n	8016abc <_vfiprintf_r+0x34>
 8016ab0:	89a3      	ldrh	r3, [r4, #12]
 8016ab2:	059b      	lsls	r3, r3, #22
 8016ab4:	d402      	bmi.n	8016abc <_vfiprintf_r+0x34>
 8016ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ab8:	f7ff ff69 	bl	801698e <__retarget_lock_acquire_recursive>
 8016abc:	89a3      	ldrh	r3, [r4, #12]
 8016abe:	071b      	lsls	r3, r3, #28
 8016ac0:	d502      	bpl.n	8016ac8 <_vfiprintf_r+0x40>
 8016ac2:	6923      	ldr	r3, [r4, #16]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d11d      	bne.n	8016b04 <_vfiprintf_r+0x7c>
 8016ac8:	0021      	movs	r1, r4
 8016aca:	0030      	movs	r0, r6
 8016acc:	f000 f97a 	bl	8016dc4 <__swsetup_r>
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d017      	beq.n	8016b04 <_vfiprintf_r+0x7c>
 8016ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ad6:	07db      	lsls	r3, r3, #31
 8016ad8:	d50d      	bpl.n	8016af6 <_vfiprintf_r+0x6e>
 8016ada:	2001      	movs	r0, #1
 8016adc:	4240      	negs	r0, r0
 8016ade:	b021      	add	sp, #132	; 0x84
 8016ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae2:	4b7f      	ldr	r3, [pc, #508]	; (8016ce0 <_vfiprintf_r+0x258>)
 8016ae4:	429c      	cmp	r4, r3
 8016ae6:	d101      	bne.n	8016aec <_vfiprintf_r+0x64>
 8016ae8:	68b4      	ldr	r4, [r6, #8]
 8016aea:	e7de      	b.n	8016aaa <_vfiprintf_r+0x22>
 8016aec:	4b7d      	ldr	r3, [pc, #500]	; (8016ce4 <_vfiprintf_r+0x25c>)
 8016aee:	429c      	cmp	r4, r3
 8016af0:	d1db      	bne.n	8016aaa <_vfiprintf_r+0x22>
 8016af2:	68f4      	ldr	r4, [r6, #12]
 8016af4:	e7d9      	b.n	8016aaa <_vfiprintf_r+0x22>
 8016af6:	89a3      	ldrh	r3, [r4, #12]
 8016af8:	059b      	lsls	r3, r3, #22
 8016afa:	d4ee      	bmi.n	8016ada <_vfiprintf_r+0x52>
 8016afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016afe:	f7ff ff47 	bl	8016990 <__retarget_lock_release_recursive>
 8016b02:	e7ea      	b.n	8016ada <_vfiprintf_r+0x52>
 8016b04:	2300      	movs	r3, #0
 8016b06:	ad08      	add	r5, sp, #32
 8016b08:	616b      	str	r3, [r5, #20]
 8016b0a:	3320      	adds	r3, #32
 8016b0c:	766b      	strb	r3, [r5, #25]
 8016b0e:	3310      	adds	r3, #16
 8016b10:	76ab      	strb	r3, [r5, #26]
 8016b12:	9707      	str	r7, [sp, #28]
 8016b14:	9f03      	ldr	r7, [sp, #12]
 8016b16:	783b      	ldrb	r3, [r7, #0]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d001      	beq.n	8016b20 <_vfiprintf_r+0x98>
 8016b1c:	2b25      	cmp	r3, #37	; 0x25
 8016b1e:	d14e      	bne.n	8016bbe <_vfiprintf_r+0x136>
 8016b20:	9b03      	ldr	r3, [sp, #12]
 8016b22:	1afb      	subs	r3, r7, r3
 8016b24:	9305      	str	r3, [sp, #20]
 8016b26:	9b03      	ldr	r3, [sp, #12]
 8016b28:	429f      	cmp	r7, r3
 8016b2a:	d00d      	beq.n	8016b48 <_vfiprintf_r+0xc0>
 8016b2c:	9b05      	ldr	r3, [sp, #20]
 8016b2e:	0021      	movs	r1, r4
 8016b30:	0030      	movs	r0, r6
 8016b32:	9a03      	ldr	r2, [sp, #12]
 8016b34:	f7ff ff96 	bl	8016a64 <__sfputs_r>
 8016b38:	1c43      	adds	r3, r0, #1
 8016b3a:	d100      	bne.n	8016b3e <_vfiprintf_r+0xb6>
 8016b3c:	e0b5      	b.n	8016caa <_vfiprintf_r+0x222>
 8016b3e:	696a      	ldr	r2, [r5, #20]
 8016b40:	9b05      	ldr	r3, [sp, #20]
 8016b42:	4694      	mov	ip, r2
 8016b44:	4463      	add	r3, ip
 8016b46:	616b      	str	r3, [r5, #20]
 8016b48:	783b      	ldrb	r3, [r7, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d100      	bne.n	8016b50 <_vfiprintf_r+0xc8>
 8016b4e:	e0ac      	b.n	8016caa <_vfiprintf_r+0x222>
 8016b50:	2201      	movs	r2, #1
 8016b52:	1c7b      	adds	r3, r7, #1
 8016b54:	9303      	str	r3, [sp, #12]
 8016b56:	2300      	movs	r3, #0
 8016b58:	4252      	negs	r2, r2
 8016b5a:	606a      	str	r2, [r5, #4]
 8016b5c:	a904      	add	r1, sp, #16
 8016b5e:	3254      	adds	r2, #84	; 0x54
 8016b60:	1852      	adds	r2, r2, r1
 8016b62:	602b      	str	r3, [r5, #0]
 8016b64:	60eb      	str	r3, [r5, #12]
 8016b66:	60ab      	str	r3, [r5, #8]
 8016b68:	7013      	strb	r3, [r2, #0]
 8016b6a:	65ab      	str	r3, [r5, #88]	; 0x58
 8016b6c:	9b03      	ldr	r3, [sp, #12]
 8016b6e:	2205      	movs	r2, #5
 8016b70:	7819      	ldrb	r1, [r3, #0]
 8016b72:	485d      	ldr	r0, [pc, #372]	; (8016ce8 <_vfiprintf_r+0x260>)
 8016b74:	f7ff f996 	bl	8015ea4 <memchr>
 8016b78:	9b03      	ldr	r3, [sp, #12]
 8016b7a:	1c5f      	adds	r7, r3, #1
 8016b7c:	2800      	cmp	r0, #0
 8016b7e:	d120      	bne.n	8016bc2 <_vfiprintf_r+0x13a>
 8016b80:	682a      	ldr	r2, [r5, #0]
 8016b82:	06d3      	lsls	r3, r2, #27
 8016b84:	d504      	bpl.n	8016b90 <_vfiprintf_r+0x108>
 8016b86:	2353      	movs	r3, #83	; 0x53
 8016b88:	a904      	add	r1, sp, #16
 8016b8a:	185b      	adds	r3, r3, r1
 8016b8c:	2120      	movs	r1, #32
 8016b8e:	7019      	strb	r1, [r3, #0]
 8016b90:	0713      	lsls	r3, r2, #28
 8016b92:	d504      	bpl.n	8016b9e <_vfiprintf_r+0x116>
 8016b94:	2353      	movs	r3, #83	; 0x53
 8016b96:	a904      	add	r1, sp, #16
 8016b98:	185b      	adds	r3, r3, r1
 8016b9a:	212b      	movs	r1, #43	; 0x2b
 8016b9c:	7019      	strb	r1, [r3, #0]
 8016b9e:	9b03      	ldr	r3, [sp, #12]
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8016ba4:	d016      	beq.n	8016bd4 <_vfiprintf_r+0x14c>
 8016ba6:	2100      	movs	r1, #0
 8016ba8:	68eb      	ldr	r3, [r5, #12]
 8016baa:	9f03      	ldr	r7, [sp, #12]
 8016bac:	783a      	ldrb	r2, [r7, #0]
 8016bae:	1c78      	adds	r0, r7, #1
 8016bb0:	3a30      	subs	r2, #48	; 0x30
 8016bb2:	4684      	mov	ip, r0
 8016bb4:	2a09      	cmp	r2, #9
 8016bb6:	d94f      	bls.n	8016c58 <_vfiprintf_r+0x1d0>
 8016bb8:	2900      	cmp	r1, #0
 8016bba:	d111      	bne.n	8016be0 <_vfiprintf_r+0x158>
 8016bbc:	e017      	b.n	8016bee <_vfiprintf_r+0x166>
 8016bbe:	3701      	adds	r7, #1
 8016bc0:	e7a9      	b.n	8016b16 <_vfiprintf_r+0x8e>
 8016bc2:	4b49      	ldr	r3, [pc, #292]	; (8016ce8 <_vfiprintf_r+0x260>)
 8016bc4:	682a      	ldr	r2, [r5, #0]
 8016bc6:	1ac0      	subs	r0, r0, r3
 8016bc8:	2301      	movs	r3, #1
 8016bca:	4083      	lsls	r3, r0
 8016bcc:	4313      	orrs	r3, r2
 8016bce:	602b      	str	r3, [r5, #0]
 8016bd0:	9703      	str	r7, [sp, #12]
 8016bd2:	e7cb      	b.n	8016b6c <_vfiprintf_r+0xe4>
 8016bd4:	9b07      	ldr	r3, [sp, #28]
 8016bd6:	1d19      	adds	r1, r3, #4
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	9107      	str	r1, [sp, #28]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	db01      	blt.n	8016be4 <_vfiprintf_r+0x15c>
 8016be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8016be2:	e004      	b.n	8016bee <_vfiprintf_r+0x166>
 8016be4:	425b      	negs	r3, r3
 8016be6:	60eb      	str	r3, [r5, #12]
 8016be8:	2302      	movs	r3, #2
 8016bea:	4313      	orrs	r3, r2
 8016bec:	602b      	str	r3, [r5, #0]
 8016bee:	783b      	ldrb	r3, [r7, #0]
 8016bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8016bf2:	d10a      	bne.n	8016c0a <_vfiprintf_r+0x182>
 8016bf4:	787b      	ldrb	r3, [r7, #1]
 8016bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8016bf8:	d137      	bne.n	8016c6a <_vfiprintf_r+0x1e2>
 8016bfa:	9b07      	ldr	r3, [sp, #28]
 8016bfc:	3702      	adds	r7, #2
 8016bfe:	1d1a      	adds	r2, r3, #4
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	9207      	str	r2, [sp, #28]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	db2d      	blt.n	8016c64 <_vfiprintf_r+0x1dc>
 8016c08:	9309      	str	r3, [sp, #36]	; 0x24
 8016c0a:	2203      	movs	r2, #3
 8016c0c:	7839      	ldrb	r1, [r7, #0]
 8016c0e:	4837      	ldr	r0, [pc, #220]	; (8016cec <_vfiprintf_r+0x264>)
 8016c10:	f7ff f948 	bl	8015ea4 <memchr>
 8016c14:	2800      	cmp	r0, #0
 8016c16:	d007      	beq.n	8016c28 <_vfiprintf_r+0x1a0>
 8016c18:	4b34      	ldr	r3, [pc, #208]	; (8016cec <_vfiprintf_r+0x264>)
 8016c1a:	682a      	ldr	r2, [r5, #0]
 8016c1c:	1ac0      	subs	r0, r0, r3
 8016c1e:	2340      	movs	r3, #64	; 0x40
 8016c20:	4083      	lsls	r3, r0
 8016c22:	4313      	orrs	r3, r2
 8016c24:	3701      	adds	r7, #1
 8016c26:	602b      	str	r3, [r5, #0]
 8016c28:	7839      	ldrb	r1, [r7, #0]
 8016c2a:	1c7b      	adds	r3, r7, #1
 8016c2c:	2206      	movs	r2, #6
 8016c2e:	4830      	ldr	r0, [pc, #192]	; (8016cf0 <_vfiprintf_r+0x268>)
 8016c30:	9303      	str	r3, [sp, #12]
 8016c32:	7629      	strb	r1, [r5, #24]
 8016c34:	f7ff f936 	bl	8015ea4 <memchr>
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d045      	beq.n	8016cc8 <_vfiprintf_r+0x240>
 8016c3c:	4b2d      	ldr	r3, [pc, #180]	; (8016cf4 <_vfiprintf_r+0x26c>)
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d127      	bne.n	8016c92 <_vfiprintf_r+0x20a>
 8016c42:	2207      	movs	r2, #7
 8016c44:	9b07      	ldr	r3, [sp, #28]
 8016c46:	3307      	adds	r3, #7
 8016c48:	4393      	bics	r3, r2
 8016c4a:	3308      	adds	r3, #8
 8016c4c:	9307      	str	r3, [sp, #28]
 8016c4e:	696b      	ldr	r3, [r5, #20]
 8016c50:	9a04      	ldr	r2, [sp, #16]
 8016c52:	189b      	adds	r3, r3, r2
 8016c54:	616b      	str	r3, [r5, #20]
 8016c56:	e75d      	b.n	8016b14 <_vfiprintf_r+0x8c>
 8016c58:	210a      	movs	r1, #10
 8016c5a:	434b      	muls	r3, r1
 8016c5c:	4667      	mov	r7, ip
 8016c5e:	189b      	adds	r3, r3, r2
 8016c60:	3909      	subs	r1, #9
 8016c62:	e7a3      	b.n	8016bac <_vfiprintf_r+0x124>
 8016c64:	2301      	movs	r3, #1
 8016c66:	425b      	negs	r3, r3
 8016c68:	e7ce      	b.n	8016c08 <_vfiprintf_r+0x180>
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	001a      	movs	r2, r3
 8016c6e:	3701      	adds	r7, #1
 8016c70:	606b      	str	r3, [r5, #4]
 8016c72:	7839      	ldrb	r1, [r7, #0]
 8016c74:	1c78      	adds	r0, r7, #1
 8016c76:	3930      	subs	r1, #48	; 0x30
 8016c78:	4684      	mov	ip, r0
 8016c7a:	2909      	cmp	r1, #9
 8016c7c:	d903      	bls.n	8016c86 <_vfiprintf_r+0x1fe>
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d0c3      	beq.n	8016c0a <_vfiprintf_r+0x182>
 8016c82:	9209      	str	r2, [sp, #36]	; 0x24
 8016c84:	e7c1      	b.n	8016c0a <_vfiprintf_r+0x182>
 8016c86:	230a      	movs	r3, #10
 8016c88:	435a      	muls	r2, r3
 8016c8a:	4667      	mov	r7, ip
 8016c8c:	1852      	adds	r2, r2, r1
 8016c8e:	3b09      	subs	r3, #9
 8016c90:	e7ef      	b.n	8016c72 <_vfiprintf_r+0x1ea>
 8016c92:	ab07      	add	r3, sp, #28
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	0022      	movs	r2, r4
 8016c98:	0029      	movs	r1, r5
 8016c9a:	0030      	movs	r0, r6
 8016c9c:	4b16      	ldr	r3, [pc, #88]	; (8016cf8 <_vfiprintf_r+0x270>)
 8016c9e:	f7fd fe61 	bl	8014964 <_printf_float>
 8016ca2:	9004      	str	r0, [sp, #16]
 8016ca4:	9b04      	ldr	r3, [sp, #16]
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	d1d1      	bne.n	8016c4e <_vfiprintf_r+0x1c6>
 8016caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016cac:	07db      	lsls	r3, r3, #31
 8016cae:	d405      	bmi.n	8016cbc <_vfiprintf_r+0x234>
 8016cb0:	89a3      	ldrh	r3, [r4, #12]
 8016cb2:	059b      	lsls	r3, r3, #22
 8016cb4:	d402      	bmi.n	8016cbc <_vfiprintf_r+0x234>
 8016cb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cb8:	f7ff fe6a 	bl	8016990 <__retarget_lock_release_recursive>
 8016cbc:	89a3      	ldrh	r3, [r4, #12]
 8016cbe:	065b      	lsls	r3, r3, #25
 8016cc0:	d500      	bpl.n	8016cc4 <_vfiprintf_r+0x23c>
 8016cc2:	e70a      	b.n	8016ada <_vfiprintf_r+0x52>
 8016cc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016cc6:	e70a      	b.n	8016ade <_vfiprintf_r+0x56>
 8016cc8:	ab07      	add	r3, sp, #28
 8016cca:	9300      	str	r3, [sp, #0]
 8016ccc:	0022      	movs	r2, r4
 8016cce:	0029      	movs	r1, r5
 8016cd0:	0030      	movs	r0, r6
 8016cd2:	4b09      	ldr	r3, [pc, #36]	; (8016cf8 <_vfiprintf_r+0x270>)
 8016cd4:	f7fe f8f8 	bl	8014ec8 <_printf_i>
 8016cd8:	e7e3      	b.n	8016ca2 <_vfiprintf_r+0x21a>
 8016cda:	46c0      	nop			; (mov r8, r8)
 8016cdc:	08018da4 	.word	0x08018da4
 8016ce0:	08018dc4 	.word	0x08018dc4
 8016ce4:	08018d84 	.word	0x08018d84
 8016ce8:	08018c2c 	.word	0x08018c2c
 8016cec:	08018c32 	.word	0x08018c32
 8016cf0:	08018c36 	.word	0x08018c36
 8016cf4:	08014965 	.word	0x08014965
 8016cf8:	08016a65 	.word	0x08016a65

08016cfc <__swbuf_r>:
 8016cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cfe:	0005      	movs	r5, r0
 8016d00:	000e      	movs	r6, r1
 8016d02:	0014      	movs	r4, r2
 8016d04:	2800      	cmp	r0, #0
 8016d06:	d004      	beq.n	8016d12 <__swbuf_r+0x16>
 8016d08:	6983      	ldr	r3, [r0, #24]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d101      	bne.n	8016d12 <__swbuf_r+0x16>
 8016d0e:	f000 fa07 	bl	8017120 <__sinit>
 8016d12:	4b22      	ldr	r3, [pc, #136]	; (8016d9c <__swbuf_r+0xa0>)
 8016d14:	429c      	cmp	r4, r3
 8016d16:	d12e      	bne.n	8016d76 <__swbuf_r+0x7a>
 8016d18:	686c      	ldr	r4, [r5, #4]
 8016d1a:	69a3      	ldr	r3, [r4, #24]
 8016d1c:	60a3      	str	r3, [r4, #8]
 8016d1e:	89a3      	ldrh	r3, [r4, #12]
 8016d20:	071b      	lsls	r3, r3, #28
 8016d22:	d532      	bpl.n	8016d8a <__swbuf_r+0x8e>
 8016d24:	6923      	ldr	r3, [r4, #16]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d02f      	beq.n	8016d8a <__swbuf_r+0x8e>
 8016d2a:	6823      	ldr	r3, [r4, #0]
 8016d2c:	6922      	ldr	r2, [r4, #16]
 8016d2e:	b2f7      	uxtb	r7, r6
 8016d30:	1a98      	subs	r0, r3, r2
 8016d32:	6963      	ldr	r3, [r4, #20]
 8016d34:	b2f6      	uxtb	r6, r6
 8016d36:	4283      	cmp	r3, r0
 8016d38:	dc05      	bgt.n	8016d46 <__swbuf_r+0x4a>
 8016d3a:	0021      	movs	r1, r4
 8016d3c:	0028      	movs	r0, r5
 8016d3e:	f000 f94d 	bl	8016fdc <_fflush_r>
 8016d42:	2800      	cmp	r0, #0
 8016d44:	d127      	bne.n	8016d96 <__swbuf_r+0x9a>
 8016d46:	68a3      	ldr	r3, [r4, #8]
 8016d48:	3001      	adds	r0, #1
 8016d4a:	3b01      	subs	r3, #1
 8016d4c:	60a3      	str	r3, [r4, #8]
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	1c5a      	adds	r2, r3, #1
 8016d52:	6022      	str	r2, [r4, #0]
 8016d54:	701f      	strb	r7, [r3, #0]
 8016d56:	6963      	ldr	r3, [r4, #20]
 8016d58:	4283      	cmp	r3, r0
 8016d5a:	d004      	beq.n	8016d66 <__swbuf_r+0x6a>
 8016d5c:	89a3      	ldrh	r3, [r4, #12]
 8016d5e:	07db      	lsls	r3, r3, #31
 8016d60:	d507      	bpl.n	8016d72 <__swbuf_r+0x76>
 8016d62:	2e0a      	cmp	r6, #10
 8016d64:	d105      	bne.n	8016d72 <__swbuf_r+0x76>
 8016d66:	0021      	movs	r1, r4
 8016d68:	0028      	movs	r0, r5
 8016d6a:	f000 f937 	bl	8016fdc <_fflush_r>
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	d111      	bne.n	8016d96 <__swbuf_r+0x9a>
 8016d72:	0030      	movs	r0, r6
 8016d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d76:	4b0a      	ldr	r3, [pc, #40]	; (8016da0 <__swbuf_r+0xa4>)
 8016d78:	429c      	cmp	r4, r3
 8016d7a:	d101      	bne.n	8016d80 <__swbuf_r+0x84>
 8016d7c:	68ac      	ldr	r4, [r5, #8]
 8016d7e:	e7cc      	b.n	8016d1a <__swbuf_r+0x1e>
 8016d80:	4b08      	ldr	r3, [pc, #32]	; (8016da4 <__swbuf_r+0xa8>)
 8016d82:	429c      	cmp	r4, r3
 8016d84:	d1c9      	bne.n	8016d1a <__swbuf_r+0x1e>
 8016d86:	68ec      	ldr	r4, [r5, #12]
 8016d88:	e7c7      	b.n	8016d1a <__swbuf_r+0x1e>
 8016d8a:	0021      	movs	r1, r4
 8016d8c:	0028      	movs	r0, r5
 8016d8e:	f000 f819 	bl	8016dc4 <__swsetup_r>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d0c9      	beq.n	8016d2a <__swbuf_r+0x2e>
 8016d96:	2601      	movs	r6, #1
 8016d98:	4276      	negs	r6, r6
 8016d9a:	e7ea      	b.n	8016d72 <__swbuf_r+0x76>
 8016d9c:	08018da4 	.word	0x08018da4
 8016da0:	08018dc4 	.word	0x08018dc4
 8016da4:	08018d84 	.word	0x08018d84

08016da8 <__ascii_wctomb>:
 8016da8:	0003      	movs	r3, r0
 8016daa:	1e08      	subs	r0, r1, #0
 8016dac:	d005      	beq.n	8016dba <__ascii_wctomb+0x12>
 8016dae:	2aff      	cmp	r2, #255	; 0xff
 8016db0:	d904      	bls.n	8016dbc <__ascii_wctomb+0x14>
 8016db2:	228a      	movs	r2, #138	; 0x8a
 8016db4:	2001      	movs	r0, #1
 8016db6:	601a      	str	r2, [r3, #0]
 8016db8:	4240      	negs	r0, r0
 8016dba:	4770      	bx	lr
 8016dbc:	2001      	movs	r0, #1
 8016dbe:	700a      	strb	r2, [r1, #0]
 8016dc0:	e7fb      	b.n	8016dba <__ascii_wctomb+0x12>
	...

08016dc4 <__swsetup_r>:
 8016dc4:	4b37      	ldr	r3, [pc, #220]	; (8016ea4 <__swsetup_r+0xe0>)
 8016dc6:	b570      	push	{r4, r5, r6, lr}
 8016dc8:	681d      	ldr	r5, [r3, #0]
 8016dca:	0006      	movs	r6, r0
 8016dcc:	000c      	movs	r4, r1
 8016dce:	2d00      	cmp	r5, #0
 8016dd0:	d005      	beq.n	8016dde <__swsetup_r+0x1a>
 8016dd2:	69ab      	ldr	r3, [r5, #24]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d102      	bne.n	8016dde <__swsetup_r+0x1a>
 8016dd8:	0028      	movs	r0, r5
 8016dda:	f000 f9a1 	bl	8017120 <__sinit>
 8016dde:	4b32      	ldr	r3, [pc, #200]	; (8016ea8 <__swsetup_r+0xe4>)
 8016de0:	429c      	cmp	r4, r3
 8016de2:	d10f      	bne.n	8016e04 <__swsetup_r+0x40>
 8016de4:	686c      	ldr	r4, [r5, #4]
 8016de6:	230c      	movs	r3, #12
 8016de8:	5ee2      	ldrsh	r2, [r4, r3]
 8016dea:	b293      	uxth	r3, r2
 8016dec:	0711      	lsls	r1, r2, #28
 8016dee:	d42d      	bmi.n	8016e4c <__swsetup_r+0x88>
 8016df0:	06d9      	lsls	r1, r3, #27
 8016df2:	d411      	bmi.n	8016e18 <__swsetup_r+0x54>
 8016df4:	2309      	movs	r3, #9
 8016df6:	2001      	movs	r0, #1
 8016df8:	6033      	str	r3, [r6, #0]
 8016dfa:	3337      	adds	r3, #55	; 0x37
 8016dfc:	4313      	orrs	r3, r2
 8016dfe:	81a3      	strh	r3, [r4, #12]
 8016e00:	4240      	negs	r0, r0
 8016e02:	bd70      	pop	{r4, r5, r6, pc}
 8016e04:	4b29      	ldr	r3, [pc, #164]	; (8016eac <__swsetup_r+0xe8>)
 8016e06:	429c      	cmp	r4, r3
 8016e08:	d101      	bne.n	8016e0e <__swsetup_r+0x4a>
 8016e0a:	68ac      	ldr	r4, [r5, #8]
 8016e0c:	e7eb      	b.n	8016de6 <__swsetup_r+0x22>
 8016e0e:	4b28      	ldr	r3, [pc, #160]	; (8016eb0 <__swsetup_r+0xec>)
 8016e10:	429c      	cmp	r4, r3
 8016e12:	d1e8      	bne.n	8016de6 <__swsetup_r+0x22>
 8016e14:	68ec      	ldr	r4, [r5, #12]
 8016e16:	e7e6      	b.n	8016de6 <__swsetup_r+0x22>
 8016e18:	075b      	lsls	r3, r3, #29
 8016e1a:	d513      	bpl.n	8016e44 <__swsetup_r+0x80>
 8016e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e1e:	2900      	cmp	r1, #0
 8016e20:	d008      	beq.n	8016e34 <__swsetup_r+0x70>
 8016e22:	0023      	movs	r3, r4
 8016e24:	3344      	adds	r3, #68	; 0x44
 8016e26:	4299      	cmp	r1, r3
 8016e28:	d002      	beq.n	8016e30 <__swsetup_r+0x6c>
 8016e2a:	0030      	movs	r0, r6
 8016e2c:	f7fd fc0e 	bl	801464c <_free_r>
 8016e30:	2300      	movs	r3, #0
 8016e32:	6363      	str	r3, [r4, #52]	; 0x34
 8016e34:	2224      	movs	r2, #36	; 0x24
 8016e36:	89a3      	ldrh	r3, [r4, #12]
 8016e38:	4393      	bics	r3, r2
 8016e3a:	81a3      	strh	r3, [r4, #12]
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	6063      	str	r3, [r4, #4]
 8016e40:	6923      	ldr	r3, [r4, #16]
 8016e42:	6023      	str	r3, [r4, #0]
 8016e44:	2308      	movs	r3, #8
 8016e46:	89a2      	ldrh	r2, [r4, #12]
 8016e48:	4313      	orrs	r3, r2
 8016e4a:	81a3      	strh	r3, [r4, #12]
 8016e4c:	6923      	ldr	r3, [r4, #16]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d10b      	bne.n	8016e6a <__swsetup_r+0xa6>
 8016e52:	21a0      	movs	r1, #160	; 0xa0
 8016e54:	2280      	movs	r2, #128	; 0x80
 8016e56:	89a3      	ldrh	r3, [r4, #12]
 8016e58:	0089      	lsls	r1, r1, #2
 8016e5a:	0092      	lsls	r2, r2, #2
 8016e5c:	400b      	ands	r3, r1
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	d003      	beq.n	8016e6a <__swsetup_r+0xa6>
 8016e62:	0021      	movs	r1, r4
 8016e64:	0030      	movs	r0, r6
 8016e66:	f000 fa23 	bl	80172b0 <__smakebuf_r>
 8016e6a:	220c      	movs	r2, #12
 8016e6c:	5ea3      	ldrsh	r3, [r4, r2]
 8016e6e:	2001      	movs	r0, #1
 8016e70:	001a      	movs	r2, r3
 8016e72:	b299      	uxth	r1, r3
 8016e74:	4002      	ands	r2, r0
 8016e76:	4203      	tst	r3, r0
 8016e78:	d00f      	beq.n	8016e9a <__swsetup_r+0xd6>
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	60a2      	str	r2, [r4, #8]
 8016e7e:	6962      	ldr	r2, [r4, #20]
 8016e80:	4252      	negs	r2, r2
 8016e82:	61a2      	str	r2, [r4, #24]
 8016e84:	2000      	movs	r0, #0
 8016e86:	6922      	ldr	r2, [r4, #16]
 8016e88:	4282      	cmp	r2, r0
 8016e8a:	d1ba      	bne.n	8016e02 <__swsetup_r+0x3e>
 8016e8c:	060a      	lsls	r2, r1, #24
 8016e8e:	d5b8      	bpl.n	8016e02 <__swsetup_r+0x3e>
 8016e90:	2240      	movs	r2, #64	; 0x40
 8016e92:	4313      	orrs	r3, r2
 8016e94:	81a3      	strh	r3, [r4, #12]
 8016e96:	3801      	subs	r0, #1
 8016e98:	e7b3      	b.n	8016e02 <__swsetup_r+0x3e>
 8016e9a:	0788      	lsls	r0, r1, #30
 8016e9c:	d400      	bmi.n	8016ea0 <__swsetup_r+0xdc>
 8016e9e:	6962      	ldr	r2, [r4, #20]
 8016ea0:	60a2      	str	r2, [r4, #8]
 8016ea2:	e7ef      	b.n	8016e84 <__swsetup_r+0xc0>
 8016ea4:	200030dc 	.word	0x200030dc
 8016ea8:	08018da4 	.word	0x08018da4
 8016eac:	08018dc4 	.word	0x08018dc4
 8016eb0:	08018d84 	.word	0x08018d84

08016eb4 <abort>:
 8016eb4:	2006      	movs	r0, #6
 8016eb6:	b510      	push	{r4, lr}
 8016eb8:	f000 fa70 	bl	801739c <raise>
 8016ebc:	2001      	movs	r0, #1
 8016ebe:	f7ec ff0b 	bl	8003cd8 <_exit>
	...

08016ec4 <__sflush_r>:
 8016ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ec6:	898b      	ldrh	r3, [r1, #12]
 8016ec8:	0005      	movs	r5, r0
 8016eca:	000c      	movs	r4, r1
 8016ecc:	071a      	lsls	r2, r3, #28
 8016ece:	d45f      	bmi.n	8016f90 <__sflush_r+0xcc>
 8016ed0:	684a      	ldr	r2, [r1, #4]
 8016ed2:	2a00      	cmp	r2, #0
 8016ed4:	dc04      	bgt.n	8016ee0 <__sflush_r+0x1c>
 8016ed6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	dc01      	bgt.n	8016ee0 <__sflush_r+0x1c>
 8016edc:	2000      	movs	r0, #0
 8016ede:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016ee0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016ee2:	2f00      	cmp	r7, #0
 8016ee4:	d0fa      	beq.n	8016edc <__sflush_r+0x18>
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	2180      	movs	r1, #128	; 0x80
 8016eea:	682e      	ldr	r6, [r5, #0]
 8016eec:	602a      	str	r2, [r5, #0]
 8016eee:	001a      	movs	r2, r3
 8016ef0:	0149      	lsls	r1, r1, #5
 8016ef2:	400a      	ands	r2, r1
 8016ef4:	420b      	tst	r3, r1
 8016ef6:	d034      	beq.n	8016f62 <__sflush_r+0x9e>
 8016ef8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	075b      	lsls	r3, r3, #29
 8016efe:	d506      	bpl.n	8016f0e <__sflush_r+0x4a>
 8016f00:	6863      	ldr	r3, [r4, #4]
 8016f02:	1ac0      	subs	r0, r0, r3
 8016f04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d001      	beq.n	8016f0e <__sflush_r+0x4a>
 8016f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f0c:	1ac0      	subs	r0, r0, r3
 8016f0e:	0002      	movs	r2, r0
 8016f10:	6a21      	ldr	r1, [r4, #32]
 8016f12:	2300      	movs	r3, #0
 8016f14:	0028      	movs	r0, r5
 8016f16:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016f18:	47b8      	blx	r7
 8016f1a:	89a1      	ldrh	r1, [r4, #12]
 8016f1c:	1c43      	adds	r3, r0, #1
 8016f1e:	d106      	bne.n	8016f2e <__sflush_r+0x6a>
 8016f20:	682b      	ldr	r3, [r5, #0]
 8016f22:	2b1d      	cmp	r3, #29
 8016f24:	d831      	bhi.n	8016f8a <__sflush_r+0xc6>
 8016f26:	4a2c      	ldr	r2, [pc, #176]	; (8016fd8 <__sflush_r+0x114>)
 8016f28:	40da      	lsrs	r2, r3
 8016f2a:	07d3      	lsls	r3, r2, #31
 8016f2c:	d52d      	bpl.n	8016f8a <__sflush_r+0xc6>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	6063      	str	r3, [r4, #4]
 8016f32:	6923      	ldr	r3, [r4, #16]
 8016f34:	6023      	str	r3, [r4, #0]
 8016f36:	04cb      	lsls	r3, r1, #19
 8016f38:	d505      	bpl.n	8016f46 <__sflush_r+0x82>
 8016f3a:	1c43      	adds	r3, r0, #1
 8016f3c:	d102      	bne.n	8016f44 <__sflush_r+0x80>
 8016f3e:	682b      	ldr	r3, [r5, #0]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d100      	bne.n	8016f46 <__sflush_r+0x82>
 8016f44:	6560      	str	r0, [r4, #84]	; 0x54
 8016f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f48:	602e      	str	r6, [r5, #0]
 8016f4a:	2900      	cmp	r1, #0
 8016f4c:	d0c6      	beq.n	8016edc <__sflush_r+0x18>
 8016f4e:	0023      	movs	r3, r4
 8016f50:	3344      	adds	r3, #68	; 0x44
 8016f52:	4299      	cmp	r1, r3
 8016f54:	d002      	beq.n	8016f5c <__sflush_r+0x98>
 8016f56:	0028      	movs	r0, r5
 8016f58:	f7fd fb78 	bl	801464c <_free_r>
 8016f5c:	2000      	movs	r0, #0
 8016f5e:	6360      	str	r0, [r4, #52]	; 0x34
 8016f60:	e7bd      	b.n	8016ede <__sflush_r+0x1a>
 8016f62:	2301      	movs	r3, #1
 8016f64:	0028      	movs	r0, r5
 8016f66:	6a21      	ldr	r1, [r4, #32]
 8016f68:	47b8      	blx	r7
 8016f6a:	1c43      	adds	r3, r0, #1
 8016f6c:	d1c5      	bne.n	8016efa <__sflush_r+0x36>
 8016f6e:	682b      	ldr	r3, [r5, #0]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d0c2      	beq.n	8016efa <__sflush_r+0x36>
 8016f74:	2b1d      	cmp	r3, #29
 8016f76:	d001      	beq.n	8016f7c <__sflush_r+0xb8>
 8016f78:	2b16      	cmp	r3, #22
 8016f7a:	d101      	bne.n	8016f80 <__sflush_r+0xbc>
 8016f7c:	602e      	str	r6, [r5, #0]
 8016f7e:	e7ad      	b.n	8016edc <__sflush_r+0x18>
 8016f80:	2340      	movs	r3, #64	; 0x40
 8016f82:	89a2      	ldrh	r2, [r4, #12]
 8016f84:	4313      	orrs	r3, r2
 8016f86:	81a3      	strh	r3, [r4, #12]
 8016f88:	e7a9      	b.n	8016ede <__sflush_r+0x1a>
 8016f8a:	2340      	movs	r3, #64	; 0x40
 8016f8c:	430b      	orrs	r3, r1
 8016f8e:	e7fa      	b.n	8016f86 <__sflush_r+0xc2>
 8016f90:	690f      	ldr	r7, [r1, #16]
 8016f92:	2f00      	cmp	r7, #0
 8016f94:	d0a2      	beq.n	8016edc <__sflush_r+0x18>
 8016f96:	680a      	ldr	r2, [r1, #0]
 8016f98:	600f      	str	r7, [r1, #0]
 8016f9a:	1bd2      	subs	r2, r2, r7
 8016f9c:	9201      	str	r2, [sp, #4]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	079b      	lsls	r3, r3, #30
 8016fa2:	d100      	bne.n	8016fa6 <__sflush_r+0xe2>
 8016fa4:	694a      	ldr	r2, [r1, #20]
 8016fa6:	60a2      	str	r2, [r4, #8]
 8016fa8:	9b01      	ldr	r3, [sp, #4]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	dc00      	bgt.n	8016fb0 <__sflush_r+0xec>
 8016fae:	e795      	b.n	8016edc <__sflush_r+0x18>
 8016fb0:	003a      	movs	r2, r7
 8016fb2:	0028      	movs	r0, r5
 8016fb4:	9b01      	ldr	r3, [sp, #4]
 8016fb6:	6a21      	ldr	r1, [r4, #32]
 8016fb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016fba:	47b0      	blx	r6
 8016fbc:	2800      	cmp	r0, #0
 8016fbe:	dc06      	bgt.n	8016fce <__sflush_r+0x10a>
 8016fc0:	2340      	movs	r3, #64	; 0x40
 8016fc2:	2001      	movs	r0, #1
 8016fc4:	89a2      	ldrh	r2, [r4, #12]
 8016fc6:	4240      	negs	r0, r0
 8016fc8:	4313      	orrs	r3, r2
 8016fca:	81a3      	strh	r3, [r4, #12]
 8016fcc:	e787      	b.n	8016ede <__sflush_r+0x1a>
 8016fce:	9b01      	ldr	r3, [sp, #4]
 8016fd0:	183f      	adds	r7, r7, r0
 8016fd2:	1a1b      	subs	r3, r3, r0
 8016fd4:	9301      	str	r3, [sp, #4]
 8016fd6:	e7e7      	b.n	8016fa8 <__sflush_r+0xe4>
 8016fd8:	20400001 	.word	0x20400001

08016fdc <_fflush_r>:
 8016fdc:	690b      	ldr	r3, [r1, #16]
 8016fde:	b570      	push	{r4, r5, r6, lr}
 8016fe0:	0005      	movs	r5, r0
 8016fe2:	000c      	movs	r4, r1
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d102      	bne.n	8016fee <_fflush_r+0x12>
 8016fe8:	2500      	movs	r5, #0
 8016fea:	0028      	movs	r0, r5
 8016fec:	bd70      	pop	{r4, r5, r6, pc}
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d004      	beq.n	8016ffc <_fflush_r+0x20>
 8016ff2:	6983      	ldr	r3, [r0, #24]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d101      	bne.n	8016ffc <_fflush_r+0x20>
 8016ff8:	f000 f892 	bl	8017120 <__sinit>
 8016ffc:	4b14      	ldr	r3, [pc, #80]	; (8017050 <_fflush_r+0x74>)
 8016ffe:	429c      	cmp	r4, r3
 8017000:	d11b      	bne.n	801703a <_fflush_r+0x5e>
 8017002:	686c      	ldr	r4, [r5, #4]
 8017004:	220c      	movs	r2, #12
 8017006:	5ea3      	ldrsh	r3, [r4, r2]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d0ed      	beq.n	8016fe8 <_fflush_r+0xc>
 801700c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801700e:	07d2      	lsls	r2, r2, #31
 8017010:	d404      	bmi.n	801701c <_fflush_r+0x40>
 8017012:	059b      	lsls	r3, r3, #22
 8017014:	d402      	bmi.n	801701c <_fflush_r+0x40>
 8017016:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017018:	f7ff fcb9 	bl	801698e <__retarget_lock_acquire_recursive>
 801701c:	0028      	movs	r0, r5
 801701e:	0021      	movs	r1, r4
 8017020:	f7ff ff50 	bl	8016ec4 <__sflush_r>
 8017024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017026:	0005      	movs	r5, r0
 8017028:	07db      	lsls	r3, r3, #31
 801702a:	d4de      	bmi.n	8016fea <_fflush_r+0xe>
 801702c:	89a3      	ldrh	r3, [r4, #12]
 801702e:	059b      	lsls	r3, r3, #22
 8017030:	d4db      	bmi.n	8016fea <_fflush_r+0xe>
 8017032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017034:	f7ff fcac 	bl	8016990 <__retarget_lock_release_recursive>
 8017038:	e7d7      	b.n	8016fea <_fflush_r+0xe>
 801703a:	4b06      	ldr	r3, [pc, #24]	; (8017054 <_fflush_r+0x78>)
 801703c:	429c      	cmp	r4, r3
 801703e:	d101      	bne.n	8017044 <_fflush_r+0x68>
 8017040:	68ac      	ldr	r4, [r5, #8]
 8017042:	e7df      	b.n	8017004 <_fflush_r+0x28>
 8017044:	4b04      	ldr	r3, [pc, #16]	; (8017058 <_fflush_r+0x7c>)
 8017046:	429c      	cmp	r4, r3
 8017048:	d1dc      	bne.n	8017004 <_fflush_r+0x28>
 801704a:	68ec      	ldr	r4, [r5, #12]
 801704c:	e7da      	b.n	8017004 <_fflush_r+0x28>
 801704e:	46c0      	nop			; (mov r8, r8)
 8017050:	08018da4 	.word	0x08018da4
 8017054:	08018dc4 	.word	0x08018dc4
 8017058:	08018d84 	.word	0x08018d84

0801705c <std>:
 801705c:	2300      	movs	r3, #0
 801705e:	b510      	push	{r4, lr}
 8017060:	0004      	movs	r4, r0
 8017062:	6003      	str	r3, [r0, #0]
 8017064:	6043      	str	r3, [r0, #4]
 8017066:	6083      	str	r3, [r0, #8]
 8017068:	8181      	strh	r1, [r0, #12]
 801706a:	6643      	str	r3, [r0, #100]	; 0x64
 801706c:	0019      	movs	r1, r3
 801706e:	81c2      	strh	r2, [r0, #14]
 8017070:	6103      	str	r3, [r0, #16]
 8017072:	6143      	str	r3, [r0, #20]
 8017074:	6183      	str	r3, [r0, #24]
 8017076:	2208      	movs	r2, #8
 8017078:	305c      	adds	r0, #92	; 0x5c
 801707a:	f7fd fade 	bl	801463a <memset>
 801707e:	4b05      	ldr	r3, [pc, #20]	; (8017094 <std+0x38>)
 8017080:	6224      	str	r4, [r4, #32]
 8017082:	6263      	str	r3, [r4, #36]	; 0x24
 8017084:	4b04      	ldr	r3, [pc, #16]	; (8017098 <std+0x3c>)
 8017086:	62a3      	str	r3, [r4, #40]	; 0x28
 8017088:	4b04      	ldr	r3, [pc, #16]	; (801709c <std+0x40>)
 801708a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801708c:	4b04      	ldr	r3, [pc, #16]	; (80170a0 <std+0x44>)
 801708e:	6323      	str	r3, [r4, #48]	; 0x30
 8017090:	bd10      	pop	{r4, pc}
 8017092:	46c0      	nop			; (mov r8, r8)
 8017094:	080173dd 	.word	0x080173dd
 8017098:	08017405 	.word	0x08017405
 801709c:	0801743d 	.word	0x0801743d
 80170a0:	08017469 	.word	0x08017469

080170a4 <_cleanup_r>:
 80170a4:	b510      	push	{r4, lr}
 80170a6:	4902      	ldr	r1, [pc, #8]	; (80170b0 <_cleanup_r+0xc>)
 80170a8:	f000 f8ba 	bl	8017220 <_fwalk_reent>
 80170ac:	bd10      	pop	{r4, pc}
 80170ae:	46c0      	nop			; (mov r8, r8)
 80170b0:	08016fdd 	.word	0x08016fdd

080170b4 <__sfmoreglue>:
 80170b4:	b570      	push	{r4, r5, r6, lr}
 80170b6:	2568      	movs	r5, #104	; 0x68
 80170b8:	1e4a      	subs	r2, r1, #1
 80170ba:	4355      	muls	r5, r2
 80170bc:	000e      	movs	r6, r1
 80170be:	0029      	movs	r1, r5
 80170c0:	3174      	adds	r1, #116	; 0x74
 80170c2:	f7fd fb2f 	bl	8014724 <_malloc_r>
 80170c6:	1e04      	subs	r4, r0, #0
 80170c8:	d008      	beq.n	80170dc <__sfmoreglue+0x28>
 80170ca:	2100      	movs	r1, #0
 80170cc:	002a      	movs	r2, r5
 80170ce:	6001      	str	r1, [r0, #0]
 80170d0:	6046      	str	r6, [r0, #4]
 80170d2:	300c      	adds	r0, #12
 80170d4:	60a0      	str	r0, [r4, #8]
 80170d6:	3268      	adds	r2, #104	; 0x68
 80170d8:	f7fd faaf 	bl	801463a <memset>
 80170dc:	0020      	movs	r0, r4
 80170de:	bd70      	pop	{r4, r5, r6, pc}

080170e0 <__sfp_lock_acquire>:
 80170e0:	b510      	push	{r4, lr}
 80170e2:	4802      	ldr	r0, [pc, #8]	; (80170ec <__sfp_lock_acquire+0xc>)
 80170e4:	f7ff fc53 	bl	801698e <__retarget_lock_acquire_recursive>
 80170e8:	bd10      	pop	{r4, pc}
 80170ea:	46c0      	nop			; (mov r8, r8)
 80170ec:	20003aa1 	.word	0x20003aa1

080170f0 <__sfp_lock_release>:
 80170f0:	b510      	push	{r4, lr}
 80170f2:	4802      	ldr	r0, [pc, #8]	; (80170fc <__sfp_lock_release+0xc>)
 80170f4:	f7ff fc4c 	bl	8016990 <__retarget_lock_release_recursive>
 80170f8:	bd10      	pop	{r4, pc}
 80170fa:	46c0      	nop			; (mov r8, r8)
 80170fc:	20003aa1 	.word	0x20003aa1

08017100 <__sinit_lock_acquire>:
 8017100:	b510      	push	{r4, lr}
 8017102:	4802      	ldr	r0, [pc, #8]	; (801710c <__sinit_lock_acquire+0xc>)
 8017104:	f7ff fc43 	bl	801698e <__retarget_lock_acquire_recursive>
 8017108:	bd10      	pop	{r4, pc}
 801710a:	46c0      	nop			; (mov r8, r8)
 801710c:	20003aa2 	.word	0x20003aa2

08017110 <__sinit_lock_release>:
 8017110:	b510      	push	{r4, lr}
 8017112:	4802      	ldr	r0, [pc, #8]	; (801711c <__sinit_lock_release+0xc>)
 8017114:	f7ff fc3c 	bl	8016990 <__retarget_lock_release_recursive>
 8017118:	bd10      	pop	{r4, pc}
 801711a:	46c0      	nop			; (mov r8, r8)
 801711c:	20003aa2 	.word	0x20003aa2

08017120 <__sinit>:
 8017120:	b513      	push	{r0, r1, r4, lr}
 8017122:	0004      	movs	r4, r0
 8017124:	f7ff ffec 	bl	8017100 <__sinit_lock_acquire>
 8017128:	69a3      	ldr	r3, [r4, #24]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d002      	beq.n	8017134 <__sinit+0x14>
 801712e:	f7ff ffef 	bl	8017110 <__sinit_lock_release>
 8017132:	bd13      	pop	{r0, r1, r4, pc}
 8017134:	64a3      	str	r3, [r4, #72]	; 0x48
 8017136:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017138:	6523      	str	r3, [r4, #80]	; 0x50
 801713a:	4b13      	ldr	r3, [pc, #76]	; (8017188 <__sinit+0x68>)
 801713c:	4a13      	ldr	r2, [pc, #76]	; (801718c <__sinit+0x6c>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	62a2      	str	r2, [r4, #40]	; 0x28
 8017142:	9301      	str	r3, [sp, #4]
 8017144:	42a3      	cmp	r3, r4
 8017146:	d101      	bne.n	801714c <__sinit+0x2c>
 8017148:	2301      	movs	r3, #1
 801714a:	61a3      	str	r3, [r4, #24]
 801714c:	0020      	movs	r0, r4
 801714e:	f000 f81f 	bl	8017190 <__sfp>
 8017152:	6060      	str	r0, [r4, #4]
 8017154:	0020      	movs	r0, r4
 8017156:	f000 f81b 	bl	8017190 <__sfp>
 801715a:	60a0      	str	r0, [r4, #8]
 801715c:	0020      	movs	r0, r4
 801715e:	f000 f817 	bl	8017190 <__sfp>
 8017162:	2200      	movs	r2, #0
 8017164:	2104      	movs	r1, #4
 8017166:	60e0      	str	r0, [r4, #12]
 8017168:	6860      	ldr	r0, [r4, #4]
 801716a:	f7ff ff77 	bl	801705c <std>
 801716e:	2201      	movs	r2, #1
 8017170:	2109      	movs	r1, #9
 8017172:	68a0      	ldr	r0, [r4, #8]
 8017174:	f7ff ff72 	bl	801705c <std>
 8017178:	2202      	movs	r2, #2
 801717a:	2112      	movs	r1, #18
 801717c:	68e0      	ldr	r0, [r4, #12]
 801717e:	f7ff ff6d 	bl	801705c <std>
 8017182:	2301      	movs	r3, #1
 8017184:	61a3      	str	r3, [r4, #24]
 8017186:	e7d2      	b.n	801712e <__sinit+0xe>
 8017188:	08018a08 	.word	0x08018a08
 801718c:	080170a5 	.word	0x080170a5

08017190 <__sfp>:
 8017190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017192:	0007      	movs	r7, r0
 8017194:	f7ff ffa4 	bl	80170e0 <__sfp_lock_acquire>
 8017198:	4b1f      	ldr	r3, [pc, #124]	; (8017218 <__sfp+0x88>)
 801719a:	681e      	ldr	r6, [r3, #0]
 801719c:	69b3      	ldr	r3, [r6, #24]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d102      	bne.n	80171a8 <__sfp+0x18>
 80171a2:	0030      	movs	r0, r6
 80171a4:	f7ff ffbc 	bl	8017120 <__sinit>
 80171a8:	3648      	adds	r6, #72	; 0x48
 80171aa:	68b4      	ldr	r4, [r6, #8]
 80171ac:	6873      	ldr	r3, [r6, #4]
 80171ae:	3b01      	subs	r3, #1
 80171b0:	d504      	bpl.n	80171bc <__sfp+0x2c>
 80171b2:	6833      	ldr	r3, [r6, #0]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d022      	beq.n	80171fe <__sfp+0x6e>
 80171b8:	6836      	ldr	r6, [r6, #0]
 80171ba:	e7f6      	b.n	80171aa <__sfp+0x1a>
 80171bc:	220c      	movs	r2, #12
 80171be:	5ea5      	ldrsh	r5, [r4, r2]
 80171c0:	2d00      	cmp	r5, #0
 80171c2:	d11a      	bne.n	80171fa <__sfp+0x6a>
 80171c4:	0020      	movs	r0, r4
 80171c6:	4b15      	ldr	r3, [pc, #84]	; (801721c <__sfp+0x8c>)
 80171c8:	3058      	adds	r0, #88	; 0x58
 80171ca:	60e3      	str	r3, [r4, #12]
 80171cc:	6665      	str	r5, [r4, #100]	; 0x64
 80171ce:	f7ff fbdd 	bl	801698c <__retarget_lock_init_recursive>
 80171d2:	f7ff ff8d 	bl	80170f0 <__sfp_lock_release>
 80171d6:	0020      	movs	r0, r4
 80171d8:	2208      	movs	r2, #8
 80171da:	0029      	movs	r1, r5
 80171dc:	6025      	str	r5, [r4, #0]
 80171de:	60a5      	str	r5, [r4, #8]
 80171e0:	6065      	str	r5, [r4, #4]
 80171e2:	6125      	str	r5, [r4, #16]
 80171e4:	6165      	str	r5, [r4, #20]
 80171e6:	61a5      	str	r5, [r4, #24]
 80171e8:	305c      	adds	r0, #92	; 0x5c
 80171ea:	f7fd fa26 	bl	801463a <memset>
 80171ee:	6365      	str	r5, [r4, #52]	; 0x34
 80171f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80171f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80171f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80171f6:	0020      	movs	r0, r4
 80171f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171fa:	3468      	adds	r4, #104	; 0x68
 80171fc:	e7d7      	b.n	80171ae <__sfp+0x1e>
 80171fe:	2104      	movs	r1, #4
 8017200:	0038      	movs	r0, r7
 8017202:	f7ff ff57 	bl	80170b4 <__sfmoreglue>
 8017206:	1e04      	subs	r4, r0, #0
 8017208:	6030      	str	r0, [r6, #0]
 801720a:	d1d5      	bne.n	80171b8 <__sfp+0x28>
 801720c:	f7ff ff70 	bl	80170f0 <__sfp_lock_release>
 8017210:	230c      	movs	r3, #12
 8017212:	603b      	str	r3, [r7, #0]
 8017214:	e7ef      	b.n	80171f6 <__sfp+0x66>
 8017216:	46c0      	nop			; (mov r8, r8)
 8017218:	08018a08 	.word	0x08018a08
 801721c:	ffff0001 	.word	0xffff0001

08017220 <_fwalk_reent>:
 8017220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017222:	0004      	movs	r4, r0
 8017224:	0006      	movs	r6, r0
 8017226:	2700      	movs	r7, #0
 8017228:	9101      	str	r1, [sp, #4]
 801722a:	3448      	adds	r4, #72	; 0x48
 801722c:	6863      	ldr	r3, [r4, #4]
 801722e:	68a5      	ldr	r5, [r4, #8]
 8017230:	9300      	str	r3, [sp, #0]
 8017232:	9b00      	ldr	r3, [sp, #0]
 8017234:	3b01      	subs	r3, #1
 8017236:	9300      	str	r3, [sp, #0]
 8017238:	d504      	bpl.n	8017244 <_fwalk_reent+0x24>
 801723a:	6824      	ldr	r4, [r4, #0]
 801723c:	2c00      	cmp	r4, #0
 801723e:	d1f5      	bne.n	801722c <_fwalk_reent+0xc>
 8017240:	0038      	movs	r0, r7
 8017242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017244:	89ab      	ldrh	r3, [r5, #12]
 8017246:	2b01      	cmp	r3, #1
 8017248:	d908      	bls.n	801725c <_fwalk_reent+0x3c>
 801724a:	220e      	movs	r2, #14
 801724c:	5eab      	ldrsh	r3, [r5, r2]
 801724e:	3301      	adds	r3, #1
 8017250:	d004      	beq.n	801725c <_fwalk_reent+0x3c>
 8017252:	0029      	movs	r1, r5
 8017254:	0030      	movs	r0, r6
 8017256:	9b01      	ldr	r3, [sp, #4]
 8017258:	4798      	blx	r3
 801725a:	4307      	orrs	r7, r0
 801725c:	3568      	adds	r5, #104	; 0x68
 801725e:	e7e8      	b.n	8017232 <_fwalk_reent+0x12>

08017260 <__swhatbuf_r>:
 8017260:	b570      	push	{r4, r5, r6, lr}
 8017262:	000e      	movs	r6, r1
 8017264:	001d      	movs	r5, r3
 8017266:	230e      	movs	r3, #14
 8017268:	5ec9      	ldrsh	r1, [r1, r3]
 801726a:	0014      	movs	r4, r2
 801726c:	b096      	sub	sp, #88	; 0x58
 801726e:	2900      	cmp	r1, #0
 8017270:	da08      	bge.n	8017284 <__swhatbuf_r+0x24>
 8017272:	220c      	movs	r2, #12
 8017274:	5eb3      	ldrsh	r3, [r6, r2]
 8017276:	2200      	movs	r2, #0
 8017278:	602a      	str	r2, [r5, #0]
 801727a:	061b      	lsls	r3, r3, #24
 801727c:	d411      	bmi.n	80172a2 <__swhatbuf_r+0x42>
 801727e:	2380      	movs	r3, #128	; 0x80
 8017280:	00db      	lsls	r3, r3, #3
 8017282:	e00f      	b.n	80172a4 <__swhatbuf_r+0x44>
 8017284:	466a      	mov	r2, sp
 8017286:	f000 f91b 	bl	80174c0 <_fstat_r>
 801728a:	2800      	cmp	r0, #0
 801728c:	dbf1      	blt.n	8017272 <__swhatbuf_r+0x12>
 801728e:	23f0      	movs	r3, #240	; 0xf0
 8017290:	9901      	ldr	r1, [sp, #4]
 8017292:	021b      	lsls	r3, r3, #8
 8017294:	4019      	ands	r1, r3
 8017296:	4b05      	ldr	r3, [pc, #20]	; (80172ac <__swhatbuf_r+0x4c>)
 8017298:	18c9      	adds	r1, r1, r3
 801729a:	424b      	negs	r3, r1
 801729c:	4159      	adcs	r1, r3
 801729e:	6029      	str	r1, [r5, #0]
 80172a0:	e7ed      	b.n	801727e <__swhatbuf_r+0x1e>
 80172a2:	2340      	movs	r3, #64	; 0x40
 80172a4:	2000      	movs	r0, #0
 80172a6:	6023      	str	r3, [r4, #0]
 80172a8:	b016      	add	sp, #88	; 0x58
 80172aa:	bd70      	pop	{r4, r5, r6, pc}
 80172ac:	ffffe000 	.word	0xffffe000

080172b0 <__smakebuf_r>:
 80172b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172b2:	2602      	movs	r6, #2
 80172b4:	898b      	ldrh	r3, [r1, #12]
 80172b6:	0005      	movs	r5, r0
 80172b8:	000c      	movs	r4, r1
 80172ba:	4233      	tst	r3, r6
 80172bc:	d006      	beq.n	80172cc <__smakebuf_r+0x1c>
 80172be:	0023      	movs	r3, r4
 80172c0:	3347      	adds	r3, #71	; 0x47
 80172c2:	6023      	str	r3, [r4, #0]
 80172c4:	6123      	str	r3, [r4, #16]
 80172c6:	2301      	movs	r3, #1
 80172c8:	6163      	str	r3, [r4, #20]
 80172ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80172cc:	466a      	mov	r2, sp
 80172ce:	ab01      	add	r3, sp, #4
 80172d0:	f7ff ffc6 	bl	8017260 <__swhatbuf_r>
 80172d4:	9900      	ldr	r1, [sp, #0]
 80172d6:	0007      	movs	r7, r0
 80172d8:	0028      	movs	r0, r5
 80172da:	f7fd fa23 	bl	8014724 <_malloc_r>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d108      	bne.n	80172f4 <__smakebuf_r+0x44>
 80172e2:	220c      	movs	r2, #12
 80172e4:	5ea3      	ldrsh	r3, [r4, r2]
 80172e6:	059a      	lsls	r2, r3, #22
 80172e8:	d4ef      	bmi.n	80172ca <__smakebuf_r+0x1a>
 80172ea:	2203      	movs	r2, #3
 80172ec:	4393      	bics	r3, r2
 80172ee:	431e      	orrs	r6, r3
 80172f0:	81a6      	strh	r6, [r4, #12]
 80172f2:	e7e4      	b.n	80172be <__smakebuf_r+0xe>
 80172f4:	4b0f      	ldr	r3, [pc, #60]	; (8017334 <__smakebuf_r+0x84>)
 80172f6:	62ab      	str	r3, [r5, #40]	; 0x28
 80172f8:	2380      	movs	r3, #128	; 0x80
 80172fa:	89a2      	ldrh	r2, [r4, #12]
 80172fc:	6020      	str	r0, [r4, #0]
 80172fe:	4313      	orrs	r3, r2
 8017300:	81a3      	strh	r3, [r4, #12]
 8017302:	9b00      	ldr	r3, [sp, #0]
 8017304:	6120      	str	r0, [r4, #16]
 8017306:	6163      	str	r3, [r4, #20]
 8017308:	9b01      	ldr	r3, [sp, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00d      	beq.n	801732a <__smakebuf_r+0x7a>
 801730e:	0028      	movs	r0, r5
 8017310:	230e      	movs	r3, #14
 8017312:	5ee1      	ldrsh	r1, [r4, r3]
 8017314:	f000 f8e6 	bl	80174e4 <_isatty_r>
 8017318:	2800      	cmp	r0, #0
 801731a:	d006      	beq.n	801732a <__smakebuf_r+0x7a>
 801731c:	2203      	movs	r2, #3
 801731e:	89a3      	ldrh	r3, [r4, #12]
 8017320:	4393      	bics	r3, r2
 8017322:	001a      	movs	r2, r3
 8017324:	2301      	movs	r3, #1
 8017326:	4313      	orrs	r3, r2
 8017328:	81a3      	strh	r3, [r4, #12]
 801732a:	89a0      	ldrh	r0, [r4, #12]
 801732c:	4307      	orrs	r7, r0
 801732e:	81a7      	strh	r7, [r4, #12]
 8017330:	e7cb      	b.n	80172ca <__smakebuf_r+0x1a>
 8017332:	46c0      	nop			; (mov r8, r8)
 8017334:	080170a5 	.word	0x080170a5

08017338 <_malloc_usable_size_r>:
 8017338:	1f0b      	subs	r3, r1, #4
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	1f18      	subs	r0, r3, #4
 801733e:	2b00      	cmp	r3, #0
 8017340:	da01      	bge.n	8017346 <_malloc_usable_size_r+0xe>
 8017342:	580b      	ldr	r3, [r1, r0]
 8017344:	18c0      	adds	r0, r0, r3
 8017346:	4770      	bx	lr

08017348 <_raise_r>:
 8017348:	b570      	push	{r4, r5, r6, lr}
 801734a:	0004      	movs	r4, r0
 801734c:	000d      	movs	r5, r1
 801734e:	291f      	cmp	r1, #31
 8017350:	d904      	bls.n	801735c <_raise_r+0x14>
 8017352:	2316      	movs	r3, #22
 8017354:	6003      	str	r3, [r0, #0]
 8017356:	2001      	movs	r0, #1
 8017358:	4240      	negs	r0, r0
 801735a:	bd70      	pop	{r4, r5, r6, pc}
 801735c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801735e:	2b00      	cmp	r3, #0
 8017360:	d004      	beq.n	801736c <_raise_r+0x24>
 8017362:	008a      	lsls	r2, r1, #2
 8017364:	189b      	adds	r3, r3, r2
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	2a00      	cmp	r2, #0
 801736a:	d108      	bne.n	801737e <_raise_r+0x36>
 801736c:	0020      	movs	r0, r4
 801736e:	f000 f831 	bl	80173d4 <_getpid_r>
 8017372:	002a      	movs	r2, r5
 8017374:	0001      	movs	r1, r0
 8017376:	0020      	movs	r0, r4
 8017378:	f000 f81a 	bl	80173b0 <_kill_r>
 801737c:	e7ed      	b.n	801735a <_raise_r+0x12>
 801737e:	2000      	movs	r0, #0
 8017380:	2a01      	cmp	r2, #1
 8017382:	d0ea      	beq.n	801735a <_raise_r+0x12>
 8017384:	1c51      	adds	r1, r2, #1
 8017386:	d103      	bne.n	8017390 <_raise_r+0x48>
 8017388:	2316      	movs	r3, #22
 801738a:	3001      	adds	r0, #1
 801738c:	6023      	str	r3, [r4, #0]
 801738e:	e7e4      	b.n	801735a <_raise_r+0x12>
 8017390:	2400      	movs	r4, #0
 8017392:	0028      	movs	r0, r5
 8017394:	601c      	str	r4, [r3, #0]
 8017396:	4790      	blx	r2
 8017398:	0020      	movs	r0, r4
 801739a:	e7de      	b.n	801735a <_raise_r+0x12>

0801739c <raise>:
 801739c:	b510      	push	{r4, lr}
 801739e:	4b03      	ldr	r3, [pc, #12]	; (80173ac <raise+0x10>)
 80173a0:	0001      	movs	r1, r0
 80173a2:	6818      	ldr	r0, [r3, #0]
 80173a4:	f7ff ffd0 	bl	8017348 <_raise_r>
 80173a8:	bd10      	pop	{r4, pc}
 80173aa:	46c0      	nop			; (mov r8, r8)
 80173ac:	200030dc 	.word	0x200030dc

080173b0 <_kill_r>:
 80173b0:	2300      	movs	r3, #0
 80173b2:	b570      	push	{r4, r5, r6, lr}
 80173b4:	4d06      	ldr	r5, [pc, #24]	; (80173d0 <_kill_r+0x20>)
 80173b6:	0004      	movs	r4, r0
 80173b8:	0008      	movs	r0, r1
 80173ba:	0011      	movs	r1, r2
 80173bc:	602b      	str	r3, [r5, #0]
 80173be:	f7ec fc7b 	bl	8003cb8 <_kill>
 80173c2:	1c43      	adds	r3, r0, #1
 80173c4:	d103      	bne.n	80173ce <_kill_r+0x1e>
 80173c6:	682b      	ldr	r3, [r5, #0]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d000      	beq.n	80173ce <_kill_r+0x1e>
 80173cc:	6023      	str	r3, [r4, #0]
 80173ce:	bd70      	pop	{r4, r5, r6, pc}
 80173d0:	20003a9c 	.word	0x20003a9c

080173d4 <_getpid_r>:
 80173d4:	b510      	push	{r4, lr}
 80173d6:	f7ec fc69 	bl	8003cac <_getpid>
 80173da:	bd10      	pop	{r4, pc}

080173dc <__sread>:
 80173dc:	b570      	push	{r4, r5, r6, lr}
 80173de:	000c      	movs	r4, r1
 80173e0:	250e      	movs	r5, #14
 80173e2:	5f49      	ldrsh	r1, [r1, r5]
 80173e4:	f000 f8a4 	bl	8017530 <_read_r>
 80173e8:	2800      	cmp	r0, #0
 80173ea:	db03      	blt.n	80173f4 <__sread+0x18>
 80173ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80173ee:	181b      	adds	r3, r3, r0
 80173f0:	6563      	str	r3, [r4, #84]	; 0x54
 80173f2:	bd70      	pop	{r4, r5, r6, pc}
 80173f4:	89a3      	ldrh	r3, [r4, #12]
 80173f6:	4a02      	ldr	r2, [pc, #8]	; (8017400 <__sread+0x24>)
 80173f8:	4013      	ands	r3, r2
 80173fa:	81a3      	strh	r3, [r4, #12]
 80173fc:	e7f9      	b.n	80173f2 <__sread+0x16>
 80173fe:	46c0      	nop			; (mov r8, r8)
 8017400:	ffffefff 	.word	0xffffefff

08017404 <__swrite>:
 8017404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017406:	001f      	movs	r7, r3
 8017408:	898b      	ldrh	r3, [r1, #12]
 801740a:	0005      	movs	r5, r0
 801740c:	000c      	movs	r4, r1
 801740e:	0016      	movs	r6, r2
 8017410:	05db      	lsls	r3, r3, #23
 8017412:	d505      	bpl.n	8017420 <__swrite+0x1c>
 8017414:	230e      	movs	r3, #14
 8017416:	5ec9      	ldrsh	r1, [r1, r3]
 8017418:	2200      	movs	r2, #0
 801741a:	2302      	movs	r3, #2
 801741c:	f000 f874 	bl	8017508 <_lseek_r>
 8017420:	89a3      	ldrh	r3, [r4, #12]
 8017422:	4a05      	ldr	r2, [pc, #20]	; (8017438 <__swrite+0x34>)
 8017424:	0028      	movs	r0, r5
 8017426:	4013      	ands	r3, r2
 8017428:	81a3      	strh	r3, [r4, #12]
 801742a:	0032      	movs	r2, r6
 801742c:	230e      	movs	r3, #14
 801742e:	5ee1      	ldrsh	r1, [r4, r3]
 8017430:	003b      	movs	r3, r7
 8017432:	f000 f81f 	bl	8017474 <_write_r>
 8017436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017438:	ffffefff 	.word	0xffffefff

0801743c <__sseek>:
 801743c:	b570      	push	{r4, r5, r6, lr}
 801743e:	000c      	movs	r4, r1
 8017440:	250e      	movs	r5, #14
 8017442:	5f49      	ldrsh	r1, [r1, r5]
 8017444:	f000 f860 	bl	8017508 <_lseek_r>
 8017448:	89a3      	ldrh	r3, [r4, #12]
 801744a:	1c42      	adds	r2, r0, #1
 801744c:	d103      	bne.n	8017456 <__sseek+0x1a>
 801744e:	4a05      	ldr	r2, [pc, #20]	; (8017464 <__sseek+0x28>)
 8017450:	4013      	ands	r3, r2
 8017452:	81a3      	strh	r3, [r4, #12]
 8017454:	bd70      	pop	{r4, r5, r6, pc}
 8017456:	2280      	movs	r2, #128	; 0x80
 8017458:	0152      	lsls	r2, r2, #5
 801745a:	4313      	orrs	r3, r2
 801745c:	81a3      	strh	r3, [r4, #12]
 801745e:	6560      	str	r0, [r4, #84]	; 0x54
 8017460:	e7f8      	b.n	8017454 <__sseek+0x18>
 8017462:	46c0      	nop			; (mov r8, r8)
 8017464:	ffffefff 	.word	0xffffefff

08017468 <__sclose>:
 8017468:	b510      	push	{r4, lr}
 801746a:	230e      	movs	r3, #14
 801746c:	5ec9      	ldrsh	r1, [r1, r3]
 801746e:	f000 f815 	bl	801749c <_close_r>
 8017472:	bd10      	pop	{r4, pc}

08017474 <_write_r>:
 8017474:	b570      	push	{r4, r5, r6, lr}
 8017476:	0004      	movs	r4, r0
 8017478:	0008      	movs	r0, r1
 801747a:	0011      	movs	r1, r2
 801747c:	001a      	movs	r2, r3
 801747e:	2300      	movs	r3, #0
 8017480:	4d05      	ldr	r5, [pc, #20]	; (8017498 <_write_r+0x24>)
 8017482:	602b      	str	r3, [r5, #0]
 8017484:	f7ec fc51 	bl	8003d2a <_write>
 8017488:	1c43      	adds	r3, r0, #1
 801748a:	d103      	bne.n	8017494 <_write_r+0x20>
 801748c:	682b      	ldr	r3, [r5, #0]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d000      	beq.n	8017494 <_write_r+0x20>
 8017492:	6023      	str	r3, [r4, #0]
 8017494:	bd70      	pop	{r4, r5, r6, pc}
 8017496:	46c0      	nop			; (mov r8, r8)
 8017498:	20003a9c 	.word	0x20003a9c

0801749c <_close_r>:
 801749c:	2300      	movs	r3, #0
 801749e:	b570      	push	{r4, r5, r6, lr}
 80174a0:	4d06      	ldr	r5, [pc, #24]	; (80174bc <_close_r+0x20>)
 80174a2:	0004      	movs	r4, r0
 80174a4:	0008      	movs	r0, r1
 80174a6:	602b      	str	r3, [r5, #0]
 80174a8:	f7ec fc5b 	bl	8003d62 <_close>
 80174ac:	1c43      	adds	r3, r0, #1
 80174ae:	d103      	bne.n	80174b8 <_close_r+0x1c>
 80174b0:	682b      	ldr	r3, [r5, #0]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d000      	beq.n	80174b8 <_close_r+0x1c>
 80174b6:	6023      	str	r3, [r4, #0]
 80174b8:	bd70      	pop	{r4, r5, r6, pc}
 80174ba:	46c0      	nop			; (mov r8, r8)
 80174bc:	20003a9c 	.word	0x20003a9c

080174c0 <_fstat_r>:
 80174c0:	2300      	movs	r3, #0
 80174c2:	b570      	push	{r4, r5, r6, lr}
 80174c4:	4d06      	ldr	r5, [pc, #24]	; (80174e0 <_fstat_r+0x20>)
 80174c6:	0004      	movs	r4, r0
 80174c8:	0008      	movs	r0, r1
 80174ca:	0011      	movs	r1, r2
 80174cc:	602b      	str	r3, [r5, #0]
 80174ce:	f7ec fc52 	bl	8003d76 <_fstat>
 80174d2:	1c43      	adds	r3, r0, #1
 80174d4:	d103      	bne.n	80174de <_fstat_r+0x1e>
 80174d6:	682b      	ldr	r3, [r5, #0]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d000      	beq.n	80174de <_fstat_r+0x1e>
 80174dc:	6023      	str	r3, [r4, #0]
 80174de:	bd70      	pop	{r4, r5, r6, pc}
 80174e0:	20003a9c 	.word	0x20003a9c

080174e4 <_isatty_r>:
 80174e4:	2300      	movs	r3, #0
 80174e6:	b570      	push	{r4, r5, r6, lr}
 80174e8:	4d06      	ldr	r5, [pc, #24]	; (8017504 <_isatty_r+0x20>)
 80174ea:	0004      	movs	r4, r0
 80174ec:	0008      	movs	r0, r1
 80174ee:	602b      	str	r3, [r5, #0]
 80174f0:	f7ec fc4f 	bl	8003d92 <_isatty>
 80174f4:	1c43      	adds	r3, r0, #1
 80174f6:	d103      	bne.n	8017500 <_isatty_r+0x1c>
 80174f8:	682b      	ldr	r3, [r5, #0]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d000      	beq.n	8017500 <_isatty_r+0x1c>
 80174fe:	6023      	str	r3, [r4, #0]
 8017500:	bd70      	pop	{r4, r5, r6, pc}
 8017502:	46c0      	nop			; (mov r8, r8)
 8017504:	20003a9c 	.word	0x20003a9c

08017508 <_lseek_r>:
 8017508:	b570      	push	{r4, r5, r6, lr}
 801750a:	0004      	movs	r4, r0
 801750c:	0008      	movs	r0, r1
 801750e:	0011      	movs	r1, r2
 8017510:	001a      	movs	r2, r3
 8017512:	2300      	movs	r3, #0
 8017514:	4d05      	ldr	r5, [pc, #20]	; (801752c <_lseek_r+0x24>)
 8017516:	602b      	str	r3, [r5, #0]
 8017518:	f7ec fc44 	bl	8003da4 <_lseek>
 801751c:	1c43      	adds	r3, r0, #1
 801751e:	d103      	bne.n	8017528 <_lseek_r+0x20>
 8017520:	682b      	ldr	r3, [r5, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d000      	beq.n	8017528 <_lseek_r+0x20>
 8017526:	6023      	str	r3, [r4, #0]
 8017528:	bd70      	pop	{r4, r5, r6, pc}
 801752a:	46c0      	nop			; (mov r8, r8)
 801752c:	20003a9c 	.word	0x20003a9c

08017530 <_read_r>:
 8017530:	b570      	push	{r4, r5, r6, lr}
 8017532:	0004      	movs	r4, r0
 8017534:	0008      	movs	r0, r1
 8017536:	0011      	movs	r1, r2
 8017538:	001a      	movs	r2, r3
 801753a:	2300      	movs	r3, #0
 801753c:	4d05      	ldr	r5, [pc, #20]	; (8017554 <_read_r+0x24>)
 801753e:	602b      	str	r3, [r5, #0]
 8017540:	f7ec fbd6 	bl	8003cf0 <_read>
 8017544:	1c43      	adds	r3, r0, #1
 8017546:	d103      	bne.n	8017550 <_read_r+0x20>
 8017548:	682b      	ldr	r3, [r5, #0]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d000      	beq.n	8017550 <_read_r+0x20>
 801754e:	6023      	str	r3, [r4, #0]
 8017550:	bd70      	pop	{r4, r5, r6, pc}
 8017552:	46c0      	nop			; (mov r8, r8)
 8017554:	20003a9c 	.word	0x20003a9c

08017558 <pow>:
 8017558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801755a:	0014      	movs	r4, r2
 801755c:	001d      	movs	r5, r3
 801755e:	9000      	str	r0, [sp, #0]
 8017560:	9101      	str	r1, [sp, #4]
 8017562:	f000 f867 	bl	8017634 <__ieee754_pow>
 8017566:	0022      	movs	r2, r4
 8017568:	0006      	movs	r6, r0
 801756a:	000f      	movs	r7, r1
 801756c:	002b      	movs	r3, r5
 801756e:	0020      	movs	r0, r4
 8017570:	0029      	movs	r1, r5
 8017572:	f7eb fbf3 	bl	8002d5c <__aeabi_dcmpun>
 8017576:	2800      	cmp	r0, #0
 8017578:	d13f      	bne.n	80175fa <pow+0xa2>
 801757a:	9800      	ldr	r0, [sp, #0]
 801757c:	9901      	ldr	r1, [sp, #4]
 801757e:	2200      	movs	r2, #0
 8017580:	2300      	movs	r3, #0
 8017582:	f7e8 ff69 	bl	8000458 <__aeabi_dcmpeq>
 8017586:	2800      	cmp	r0, #0
 8017588:	d019      	beq.n	80175be <pow+0x66>
 801758a:	2200      	movs	r2, #0
 801758c:	2300      	movs	r3, #0
 801758e:	0020      	movs	r0, r4
 8017590:	0029      	movs	r1, r5
 8017592:	f7e8 ff61 	bl	8000458 <__aeabi_dcmpeq>
 8017596:	2800      	cmp	r0, #0
 8017598:	d146      	bne.n	8017628 <pow+0xd0>
 801759a:	0020      	movs	r0, r4
 801759c:	0029      	movs	r1, r5
 801759e:	f000 fe3d 	bl	801821c <finite>
 80175a2:	2800      	cmp	r0, #0
 80175a4:	d029      	beq.n	80175fa <pow+0xa2>
 80175a6:	2200      	movs	r2, #0
 80175a8:	2300      	movs	r3, #0
 80175aa:	0020      	movs	r0, r4
 80175ac:	0029      	movs	r1, r5
 80175ae:	f7e8 ff59 	bl	8000464 <__aeabi_dcmplt>
 80175b2:	2800      	cmp	r0, #0
 80175b4:	d021      	beq.n	80175fa <pow+0xa2>
 80175b6:	f7fd f803 	bl	80145c0 <__errno>
 80175ba:	2322      	movs	r3, #34	; 0x22
 80175bc:	e01c      	b.n	80175f8 <pow+0xa0>
 80175be:	0030      	movs	r0, r6
 80175c0:	0039      	movs	r1, r7
 80175c2:	f000 fe2b 	bl	801821c <finite>
 80175c6:	2800      	cmp	r0, #0
 80175c8:	d11b      	bne.n	8017602 <pow+0xaa>
 80175ca:	9800      	ldr	r0, [sp, #0]
 80175cc:	9901      	ldr	r1, [sp, #4]
 80175ce:	f000 fe25 	bl	801821c <finite>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	d015      	beq.n	8017602 <pow+0xaa>
 80175d6:	0020      	movs	r0, r4
 80175d8:	0029      	movs	r1, r5
 80175da:	f000 fe1f 	bl	801821c <finite>
 80175de:	2800      	cmp	r0, #0
 80175e0:	d00f      	beq.n	8017602 <pow+0xaa>
 80175e2:	0032      	movs	r2, r6
 80175e4:	003b      	movs	r3, r7
 80175e6:	0030      	movs	r0, r6
 80175e8:	0039      	movs	r1, r7
 80175ea:	f7eb fbb7 	bl	8002d5c <__aeabi_dcmpun>
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d0e1      	beq.n	80175b6 <pow+0x5e>
 80175f2:	f7fc ffe5 	bl	80145c0 <__errno>
 80175f6:	2321      	movs	r3, #33	; 0x21
 80175f8:	6003      	str	r3, [r0, #0]
 80175fa:	0030      	movs	r0, r6
 80175fc:	0039      	movs	r1, r7
 80175fe:	b003      	add	sp, #12
 8017600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017602:	2200      	movs	r2, #0
 8017604:	2300      	movs	r3, #0
 8017606:	0030      	movs	r0, r6
 8017608:	0039      	movs	r1, r7
 801760a:	f7e8 ff25 	bl	8000458 <__aeabi_dcmpeq>
 801760e:	2800      	cmp	r0, #0
 8017610:	d0f3      	beq.n	80175fa <pow+0xa2>
 8017612:	9800      	ldr	r0, [sp, #0]
 8017614:	9901      	ldr	r1, [sp, #4]
 8017616:	f000 fe01 	bl	801821c <finite>
 801761a:	2800      	cmp	r0, #0
 801761c:	d0ed      	beq.n	80175fa <pow+0xa2>
 801761e:	0020      	movs	r0, r4
 8017620:	0029      	movs	r1, r5
 8017622:	f000 fdfb 	bl	801821c <finite>
 8017626:	e7c4      	b.n	80175b2 <pow+0x5a>
 8017628:	2600      	movs	r6, #0
 801762a:	4f01      	ldr	r7, [pc, #4]	; (8017630 <pow+0xd8>)
 801762c:	e7e5      	b.n	80175fa <pow+0xa2>
 801762e:	46c0      	nop			; (mov r8, r8)
 8017630:	3ff00000 	.word	0x3ff00000

08017634 <__ieee754_pow>:
 8017634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017636:	b095      	sub	sp, #84	; 0x54
 8017638:	9202      	str	r2, [sp, #8]
 801763a:	9303      	str	r3, [sp, #12]
 801763c:	9b03      	ldr	r3, [sp, #12]
 801763e:	9a03      	ldr	r2, [sp, #12]
 8017640:	9304      	str	r3, [sp, #16]
 8017642:	9b02      	ldr	r3, [sp, #8]
 8017644:	0056      	lsls	r6, r2, #1
 8017646:	001a      	movs	r2, r3
 8017648:	0876      	lsrs	r6, r6, #1
 801764a:	0007      	movs	r7, r0
 801764c:	000d      	movs	r5, r1
 801764e:	4332      	orrs	r2, r6
 8017650:	d119      	bne.n	8017686 <__ieee754_pow+0x52>
 8017652:	2180      	movs	r1, #128	; 0x80
 8017654:	0309      	lsls	r1, r1, #12
 8017656:	4069      	eors	r1, r5
 8017658:	0002      	movs	r2, r0
 801765a:	000b      	movs	r3, r1
 801765c:	1892      	adds	r2, r2, r2
 801765e:	415b      	adcs	r3, r3
 8017660:	4989      	ldr	r1, [pc, #548]	; (8017888 <__ieee754_pow+0x254>)
 8017662:	428b      	cmp	r3, r1
 8017664:	d806      	bhi.n	8017674 <__ieee754_pow+0x40>
 8017666:	d001      	beq.n	801766c <__ieee754_pow+0x38>
 8017668:	f000 fcb6 	bl	8017fd8 <__ieee754_pow+0x9a4>
 801766c:	2a00      	cmp	r2, #0
 801766e:	d101      	bne.n	8017674 <__ieee754_pow+0x40>
 8017670:	f000 fcb2 	bl	8017fd8 <__ieee754_pow+0x9a4>
 8017674:	9a02      	ldr	r2, [sp, #8]
 8017676:	9b03      	ldr	r3, [sp, #12]
 8017678:	0038      	movs	r0, r7
 801767a:	0029      	movs	r1, r5
 801767c:	f7e9 fe32 	bl	80012e4 <__aeabi_dadd>
 8017680:	9000      	str	r0, [sp, #0]
 8017682:	9101      	str	r1, [sp, #4]
 8017684:	e0ad      	b.n	80177e2 <__ieee754_pow+0x1ae>
 8017686:	4a81      	ldr	r2, [pc, #516]	; (801788c <__ieee754_pow+0x258>)
 8017688:	004c      	lsls	r4, r1, #1
 801768a:	9108      	str	r1, [sp, #32]
 801768c:	9000      	str	r0, [sp, #0]
 801768e:	0864      	lsrs	r4, r4, #1
 8017690:	4294      	cmp	r4, r2
 8017692:	dc08      	bgt.n	80176a6 <__ieee754_pow+0x72>
 8017694:	d101      	bne.n	801769a <__ieee754_pow+0x66>
 8017696:	2800      	cmp	r0, #0
 8017698:	d1ec      	bne.n	8017674 <__ieee754_pow+0x40>
 801769a:	4a7c      	ldr	r2, [pc, #496]	; (801788c <__ieee754_pow+0x258>)
 801769c:	4296      	cmp	r6, r2
 801769e:	dc02      	bgt.n	80176a6 <__ieee754_pow+0x72>
 80176a0:	d10c      	bne.n	80176bc <__ieee754_pow+0x88>
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d00a      	beq.n	80176bc <__ieee754_pow+0x88>
 80176a6:	4b7a      	ldr	r3, [pc, #488]	; (8017890 <__ieee754_pow+0x25c>)
 80176a8:	18eb      	adds	r3, r5, r3
 80176aa:	433b      	orrs	r3, r7
 80176ac:	d1e2      	bne.n	8017674 <__ieee754_pow+0x40>
 80176ae:	2180      	movs	r1, #128	; 0x80
 80176b0:	9803      	ldr	r0, [sp, #12]
 80176b2:	0309      	lsls	r1, r1, #12
 80176b4:	4048      	eors	r0, r1
 80176b6:	0003      	movs	r3, r0
 80176b8:	9a02      	ldr	r2, [sp, #8]
 80176ba:	e7cf      	b.n	801765c <__ieee754_pow+0x28>
 80176bc:	2200      	movs	r2, #0
 80176be:	9206      	str	r2, [sp, #24]
 80176c0:	2d00      	cmp	r5, #0
 80176c2:	da69      	bge.n	8017798 <__ieee754_pow+0x164>
 80176c4:	4a73      	ldr	r2, [pc, #460]	; (8017894 <__ieee754_pow+0x260>)
 80176c6:	4296      	cmp	r6, r2
 80176c8:	dc64      	bgt.n	8017794 <__ieee754_pow+0x160>
 80176ca:	4a73      	ldr	r2, [pc, #460]	; (8017898 <__ieee754_pow+0x264>)
 80176cc:	4296      	cmp	r6, r2
 80176ce:	dd11      	ble.n	80176f4 <__ieee754_pow+0xc0>
 80176d0:	4972      	ldr	r1, [pc, #456]	; (801789c <__ieee754_pow+0x268>)
 80176d2:	1532      	asrs	r2, r6, #20
 80176d4:	1852      	adds	r2, r2, r1
 80176d6:	2a14      	cmp	r2, #20
 80176d8:	dd3c      	ble.n	8017754 <__ieee754_pow+0x120>
 80176da:	2134      	movs	r1, #52	; 0x34
 80176dc:	1a8a      	subs	r2, r1, r2
 80176de:	9902      	ldr	r1, [sp, #8]
 80176e0:	40d1      	lsrs	r1, r2
 80176e2:	0008      	movs	r0, r1
 80176e4:	4090      	lsls	r0, r2
 80176e6:	4298      	cmp	r0, r3
 80176e8:	d104      	bne.n	80176f4 <__ieee754_pow+0xc0>
 80176ea:	2201      	movs	r2, #1
 80176ec:	4011      	ands	r1, r2
 80176ee:	1892      	adds	r2, r2, r2
 80176f0:	1a52      	subs	r2, r2, r1
 80176f2:	9206      	str	r2, [sp, #24]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d03c      	beq.n	8017772 <__ieee754_pow+0x13e>
 80176f8:	0038      	movs	r0, r7
 80176fa:	0029      	movs	r1, r5
 80176fc:	f000 fd8b 	bl	8018216 <fabs>
 8017700:	9000      	str	r0, [sp, #0]
 8017702:	9101      	str	r1, [sp, #4]
 8017704:	2f00      	cmp	r7, #0
 8017706:	d000      	beq.n	801770a <__ieee754_pow+0xd6>
 8017708:	e094      	b.n	8017834 <__ieee754_pow+0x200>
 801770a:	2c00      	cmp	r4, #0
 801770c:	d005      	beq.n	801771a <__ieee754_pow+0xe6>
 801770e:	4a64      	ldr	r2, [pc, #400]	; (80178a0 <__ieee754_pow+0x26c>)
 8017710:	00ab      	lsls	r3, r5, #2
 8017712:	089b      	lsrs	r3, r3, #2
 8017714:	4293      	cmp	r3, r2
 8017716:	d000      	beq.n	801771a <__ieee754_pow+0xe6>
 8017718:	e08c      	b.n	8017834 <__ieee754_pow+0x200>
 801771a:	9b04      	ldr	r3, [sp, #16]
 801771c:	2b00      	cmp	r3, #0
 801771e:	da07      	bge.n	8017730 <__ieee754_pow+0xfc>
 8017720:	9a00      	ldr	r2, [sp, #0]
 8017722:	9b01      	ldr	r3, [sp, #4]
 8017724:	2000      	movs	r0, #0
 8017726:	495e      	ldr	r1, [pc, #376]	; (80178a0 <__ieee754_pow+0x26c>)
 8017728:	f7ea f918 	bl	800195c <__aeabi_ddiv>
 801772c:	9000      	str	r0, [sp, #0]
 801772e:	9101      	str	r1, [sp, #4]
 8017730:	9b08      	ldr	r3, [sp, #32]
 8017732:	2b00      	cmp	r3, #0
 8017734:	da55      	bge.n	80177e2 <__ieee754_pow+0x1ae>
 8017736:	4b56      	ldr	r3, [pc, #344]	; (8017890 <__ieee754_pow+0x25c>)
 8017738:	18e4      	adds	r4, r4, r3
 801773a:	9b06      	ldr	r3, [sp, #24]
 801773c:	431c      	orrs	r4, r3
 801773e:	d000      	beq.n	8017742 <__ieee754_pow+0x10e>
 8017740:	e06c      	b.n	801781c <__ieee754_pow+0x1e8>
 8017742:	9a00      	ldr	r2, [sp, #0]
 8017744:	9b01      	ldr	r3, [sp, #4]
 8017746:	0010      	movs	r0, r2
 8017748:	0019      	movs	r1, r3
 801774a:	f7ea ff75 	bl	8002638 <__aeabi_dsub>
 801774e:	0002      	movs	r2, r0
 8017750:	000b      	movs	r3, r1
 8017752:	e01c      	b.n	801778e <__ieee754_pow+0x15a>
 8017754:	2b00      	cmp	r3, #0
 8017756:	d1cf      	bne.n	80176f8 <__ieee754_pow+0xc4>
 8017758:	3314      	adds	r3, #20
 801775a:	1a9a      	subs	r2, r3, r2
 801775c:	0033      	movs	r3, r6
 801775e:	4113      	asrs	r3, r2
 8017760:	0019      	movs	r1, r3
 8017762:	4091      	lsls	r1, r2
 8017764:	42b1      	cmp	r1, r6
 8017766:	d104      	bne.n	8017772 <__ieee754_pow+0x13e>
 8017768:	2201      	movs	r2, #1
 801776a:	4013      	ands	r3, r2
 801776c:	1892      	adds	r2, r2, r2
 801776e:	1ad3      	subs	r3, r2, r3
 8017770:	9306      	str	r3, [sp, #24]
 8017772:	4b4b      	ldr	r3, [pc, #300]	; (80178a0 <__ieee754_pow+0x26c>)
 8017774:	429e      	cmp	r6, r3
 8017776:	d138      	bne.n	80177ea <__ieee754_pow+0x1b6>
 8017778:	0038      	movs	r0, r7
 801777a:	0029      	movs	r1, r5
 801777c:	9b04      	ldr	r3, [sp, #16]
 801777e:	9000      	str	r0, [sp, #0]
 8017780:	9101      	str	r1, [sp, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	da2d      	bge.n	80177e2 <__ieee754_pow+0x1ae>
 8017786:	003a      	movs	r2, r7
 8017788:	002b      	movs	r3, r5
 801778a:	2000      	movs	r0, #0
 801778c:	4944      	ldr	r1, [pc, #272]	; (80178a0 <__ieee754_pow+0x26c>)
 801778e:	f7ea f8e5 	bl	800195c <__aeabi_ddiv>
 8017792:	e775      	b.n	8017680 <__ieee754_pow+0x4c>
 8017794:	2202      	movs	r2, #2
 8017796:	9206      	str	r2, [sp, #24]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d1ad      	bne.n	80176f8 <__ieee754_pow+0xc4>
 801779c:	4b3b      	ldr	r3, [pc, #236]	; (801788c <__ieee754_pow+0x258>)
 801779e:	429e      	cmp	r6, r3
 80177a0:	d1e7      	bne.n	8017772 <__ieee754_pow+0x13e>
 80177a2:	4b3b      	ldr	r3, [pc, #236]	; (8017890 <__ieee754_pow+0x25c>)
 80177a4:	18e3      	adds	r3, r4, r3
 80177a6:	431f      	orrs	r7, r3
 80177a8:	d101      	bne.n	80177ae <__ieee754_pow+0x17a>
 80177aa:	f000 fc15 	bl	8017fd8 <__ieee754_pow+0x9a4>
 80177ae:	4b3a      	ldr	r3, [pc, #232]	; (8017898 <__ieee754_pow+0x264>)
 80177b0:	429c      	cmp	r4, r3
 80177b2:	dd09      	ble.n	80177c8 <__ieee754_pow+0x194>
 80177b4:	9b04      	ldr	r3, [sp, #16]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	da01      	bge.n	80177be <__ieee754_pow+0x18a>
 80177ba:	f000 fc11 	bl	8017fe0 <__ieee754_pow+0x9ac>
 80177be:	9b02      	ldr	r3, [sp, #8]
 80177c0:	9c03      	ldr	r4, [sp, #12]
 80177c2:	9300      	str	r3, [sp, #0]
 80177c4:	9401      	str	r4, [sp, #4]
 80177c6:	e00c      	b.n	80177e2 <__ieee754_pow+0x1ae>
 80177c8:	9b04      	ldr	r3, [sp, #16]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	db01      	blt.n	80177d2 <__ieee754_pow+0x19e>
 80177ce:	f000 fc07 	bl	8017fe0 <__ieee754_pow+0x9ac>
 80177d2:	2280      	movs	r2, #128	; 0x80
 80177d4:	0612      	lsls	r2, r2, #24
 80177d6:	4694      	mov	ip, r2
 80177d8:	9b02      	ldr	r3, [sp, #8]
 80177da:	9300      	str	r3, [sp, #0]
 80177dc:	9b03      	ldr	r3, [sp, #12]
 80177de:	4463      	add	r3, ip
 80177e0:	9301      	str	r3, [sp, #4]
 80177e2:	9800      	ldr	r0, [sp, #0]
 80177e4:	9901      	ldr	r1, [sp, #4]
 80177e6:	b015      	add	sp, #84	; 0x54
 80177e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177ea:	2380      	movs	r3, #128	; 0x80
 80177ec:	9a04      	ldr	r2, [sp, #16]
 80177ee:	05db      	lsls	r3, r3, #23
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d106      	bne.n	8017802 <__ieee754_pow+0x1ce>
 80177f4:	003a      	movs	r2, r7
 80177f6:	002b      	movs	r3, r5
 80177f8:	0038      	movs	r0, r7
 80177fa:	0029      	movs	r1, r5
 80177fc:	f7ea fcb0 	bl	8002160 <__aeabi_dmul>
 8017800:	e73e      	b.n	8017680 <__ieee754_pow+0x4c>
 8017802:	4b28      	ldr	r3, [pc, #160]	; (80178a4 <__ieee754_pow+0x270>)
 8017804:	9a04      	ldr	r2, [sp, #16]
 8017806:	429a      	cmp	r2, r3
 8017808:	d000      	beq.n	801780c <__ieee754_pow+0x1d8>
 801780a:	e775      	b.n	80176f8 <__ieee754_pow+0xc4>
 801780c:	2d00      	cmp	r5, #0
 801780e:	da00      	bge.n	8017812 <__ieee754_pow+0x1de>
 8017810:	e772      	b.n	80176f8 <__ieee754_pow+0xc4>
 8017812:	0038      	movs	r0, r7
 8017814:	0029      	movs	r1, r5
 8017816:	f000 fc17 	bl	8018048 <__ieee754_sqrt>
 801781a:	e731      	b.n	8017680 <__ieee754_pow+0x4c>
 801781c:	9b06      	ldr	r3, [sp, #24]
 801781e:	2b01      	cmp	r3, #1
 8017820:	d1df      	bne.n	80177e2 <__ieee754_pow+0x1ae>
 8017822:	9800      	ldr	r0, [sp, #0]
 8017824:	2180      	movs	r1, #128	; 0x80
 8017826:	0002      	movs	r2, r0
 8017828:	9801      	ldr	r0, [sp, #4]
 801782a:	0609      	lsls	r1, r1, #24
 801782c:	1843      	adds	r3, r0, r1
 801782e:	9200      	str	r2, [sp, #0]
 8017830:	9301      	str	r3, [sp, #4]
 8017832:	e7d6      	b.n	80177e2 <__ieee754_pow+0x1ae>
 8017834:	0feb      	lsrs	r3, r5, #31
 8017836:	3b01      	subs	r3, #1
 8017838:	930e      	str	r3, [sp, #56]	; 0x38
 801783a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801783c:	9b06      	ldr	r3, [sp, #24]
 801783e:	4313      	orrs	r3, r2
 8017840:	d104      	bne.n	801784c <__ieee754_pow+0x218>
 8017842:	003a      	movs	r2, r7
 8017844:	002b      	movs	r3, r5
 8017846:	0038      	movs	r0, r7
 8017848:	0029      	movs	r1, r5
 801784a:	e77e      	b.n	801774a <__ieee754_pow+0x116>
 801784c:	4b16      	ldr	r3, [pc, #88]	; (80178a8 <__ieee754_pow+0x274>)
 801784e:	429e      	cmp	r6, r3
 8017850:	dc00      	bgt.n	8017854 <__ieee754_pow+0x220>
 8017852:	e0ef      	b.n	8017a34 <__ieee754_pow+0x400>
 8017854:	4b15      	ldr	r3, [pc, #84]	; (80178ac <__ieee754_pow+0x278>)
 8017856:	429e      	cmp	r6, r3
 8017858:	dd09      	ble.n	801786e <__ieee754_pow+0x23a>
 801785a:	4b0f      	ldr	r3, [pc, #60]	; (8017898 <__ieee754_pow+0x264>)
 801785c:	429c      	cmp	r4, r3
 801785e:	dc0c      	bgt.n	801787a <__ieee754_pow+0x246>
 8017860:	9b04      	ldr	r3, [sp, #16]
 8017862:	2b00      	cmp	r3, #0
 8017864:	da0c      	bge.n	8017880 <__ieee754_pow+0x24c>
 8017866:	2000      	movs	r0, #0
 8017868:	f000 fcce 	bl	8018208 <__math_oflow>
 801786c:	e708      	b.n	8017680 <__ieee754_pow+0x4c>
 801786e:	4b10      	ldr	r3, [pc, #64]	; (80178b0 <__ieee754_pow+0x27c>)
 8017870:	429c      	cmp	r4, r3
 8017872:	ddf5      	ble.n	8017860 <__ieee754_pow+0x22c>
 8017874:	4b0a      	ldr	r3, [pc, #40]	; (80178a0 <__ieee754_pow+0x26c>)
 8017876:	429c      	cmp	r4, r3
 8017878:	dd1c      	ble.n	80178b4 <__ieee754_pow+0x280>
 801787a:	9b04      	ldr	r3, [sp, #16]
 801787c:	2b00      	cmp	r3, #0
 801787e:	dcf2      	bgt.n	8017866 <__ieee754_pow+0x232>
 8017880:	2000      	movs	r0, #0
 8017882:	f000 fcba 	bl	80181fa <__math_uflow>
 8017886:	e6fb      	b.n	8017680 <__ieee754_pow+0x4c>
 8017888:	fff00000 	.word	0xfff00000
 801788c:	7ff00000 	.word	0x7ff00000
 8017890:	c0100000 	.word	0xc0100000
 8017894:	433fffff 	.word	0x433fffff
 8017898:	3fefffff 	.word	0x3fefffff
 801789c:	fffffc01 	.word	0xfffffc01
 80178a0:	3ff00000 	.word	0x3ff00000
 80178a4:	3fe00000 	.word	0x3fe00000
 80178a8:	41e00000 	.word	0x41e00000
 80178ac:	43f00000 	.word	0x43f00000
 80178b0:	3feffffe 	.word	0x3feffffe
 80178b4:	2200      	movs	r2, #0
 80178b6:	9800      	ldr	r0, [sp, #0]
 80178b8:	9901      	ldr	r1, [sp, #4]
 80178ba:	4b52      	ldr	r3, [pc, #328]	; (8017a04 <__ieee754_pow+0x3d0>)
 80178bc:	f7ea febc 	bl	8002638 <__aeabi_dsub>
 80178c0:	22c0      	movs	r2, #192	; 0xc0
 80178c2:	4b51      	ldr	r3, [pc, #324]	; (8017a08 <__ieee754_pow+0x3d4>)
 80178c4:	05d2      	lsls	r2, r2, #23
 80178c6:	0004      	movs	r4, r0
 80178c8:	000d      	movs	r5, r1
 80178ca:	f7ea fc49 	bl	8002160 <__aeabi_dmul>
 80178ce:	4a4f      	ldr	r2, [pc, #316]	; (8017a0c <__ieee754_pow+0x3d8>)
 80178d0:	9000      	str	r0, [sp, #0]
 80178d2:	9101      	str	r1, [sp, #4]
 80178d4:	4b4e      	ldr	r3, [pc, #312]	; (8017a10 <__ieee754_pow+0x3dc>)
 80178d6:	0020      	movs	r0, r4
 80178d8:	0029      	movs	r1, r5
 80178da:	f7ea fc41 	bl	8002160 <__aeabi_dmul>
 80178de:	2200      	movs	r2, #0
 80178e0:	9004      	str	r0, [sp, #16]
 80178e2:	9105      	str	r1, [sp, #20]
 80178e4:	4b4b      	ldr	r3, [pc, #300]	; (8017a14 <__ieee754_pow+0x3e0>)
 80178e6:	0020      	movs	r0, r4
 80178e8:	0029      	movs	r1, r5
 80178ea:	f7ea fc39 	bl	8002160 <__aeabi_dmul>
 80178ee:	0002      	movs	r2, r0
 80178f0:	000b      	movs	r3, r1
 80178f2:	4849      	ldr	r0, [pc, #292]	; (8017a18 <__ieee754_pow+0x3e4>)
 80178f4:	4949      	ldr	r1, [pc, #292]	; (8017a1c <__ieee754_pow+0x3e8>)
 80178f6:	f7ea fe9f 	bl	8002638 <__aeabi_dsub>
 80178fa:	0022      	movs	r2, r4
 80178fc:	002b      	movs	r3, r5
 80178fe:	f7ea fc2f 	bl	8002160 <__aeabi_dmul>
 8017902:	0002      	movs	r2, r0
 8017904:	000b      	movs	r3, r1
 8017906:	2000      	movs	r0, #0
 8017908:	4945      	ldr	r1, [pc, #276]	; (8017a20 <__ieee754_pow+0x3ec>)
 801790a:	f7ea fe95 	bl	8002638 <__aeabi_dsub>
 801790e:	0022      	movs	r2, r4
 8017910:	0006      	movs	r6, r0
 8017912:	000f      	movs	r7, r1
 8017914:	002b      	movs	r3, r5
 8017916:	0020      	movs	r0, r4
 8017918:	0029      	movs	r1, r5
 801791a:	f7ea fc21 	bl	8002160 <__aeabi_dmul>
 801791e:	0002      	movs	r2, r0
 8017920:	000b      	movs	r3, r1
 8017922:	0030      	movs	r0, r6
 8017924:	0039      	movs	r1, r7
 8017926:	f7ea fc1b 	bl	8002160 <__aeabi_dmul>
 801792a:	4a3e      	ldr	r2, [pc, #248]	; (8017a24 <__ieee754_pow+0x3f0>)
 801792c:	4b36      	ldr	r3, [pc, #216]	; (8017a08 <__ieee754_pow+0x3d4>)
 801792e:	f7ea fc17 	bl	8002160 <__aeabi_dmul>
 8017932:	0002      	movs	r2, r0
 8017934:	000b      	movs	r3, r1
 8017936:	9804      	ldr	r0, [sp, #16]
 8017938:	9905      	ldr	r1, [sp, #20]
 801793a:	f7ea fe7d 	bl	8002638 <__aeabi_dsub>
 801793e:	0002      	movs	r2, r0
 8017940:	000b      	movs	r3, r1
 8017942:	0004      	movs	r4, r0
 8017944:	000d      	movs	r5, r1
 8017946:	9800      	ldr	r0, [sp, #0]
 8017948:	9901      	ldr	r1, [sp, #4]
 801794a:	f7e9 fccb 	bl	80012e4 <__aeabi_dadd>
 801794e:	9a00      	ldr	r2, [sp, #0]
 8017950:	9b01      	ldr	r3, [sp, #4]
 8017952:	2000      	movs	r0, #0
 8017954:	000f      	movs	r7, r1
 8017956:	0006      	movs	r6, r0
 8017958:	f7ea fe6e 	bl	8002638 <__aeabi_dsub>
 801795c:	0002      	movs	r2, r0
 801795e:	000b      	movs	r3, r1
 8017960:	0020      	movs	r0, r4
 8017962:	0029      	movs	r1, r5
 8017964:	f7ea fe68 	bl	8002638 <__aeabi_dsub>
 8017968:	9b06      	ldr	r3, [sp, #24]
 801796a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801796c:	3b01      	subs	r3, #1
 801796e:	9004      	str	r0, [sp, #16]
 8017970:	9105      	str	r1, [sp, #20]
 8017972:	4313      	orrs	r3, r2
 8017974:	d000      	beq.n	8017978 <__ieee754_pow+0x344>
 8017976:	e1db      	b.n	8017d30 <__ieee754_pow+0x6fc>
 8017978:	2300      	movs	r3, #0
 801797a:	4c2b      	ldr	r4, [pc, #172]	; (8017a28 <__ieee754_pow+0x3f4>)
 801797c:	9300      	str	r3, [sp, #0]
 801797e:	9401      	str	r4, [sp, #4]
 8017980:	9c02      	ldr	r4, [sp, #8]
 8017982:	9d03      	ldr	r5, [sp, #12]
 8017984:	9802      	ldr	r0, [sp, #8]
 8017986:	9903      	ldr	r1, [sp, #12]
 8017988:	2400      	movs	r4, #0
 801798a:	002b      	movs	r3, r5
 801798c:	0022      	movs	r2, r4
 801798e:	f7ea fe53 	bl	8002638 <__aeabi_dsub>
 8017992:	0032      	movs	r2, r6
 8017994:	003b      	movs	r3, r7
 8017996:	f7ea fbe3 	bl	8002160 <__aeabi_dmul>
 801799a:	9a02      	ldr	r2, [sp, #8]
 801799c:	9b03      	ldr	r3, [sp, #12]
 801799e:	9006      	str	r0, [sp, #24]
 80179a0:	9107      	str	r1, [sp, #28]
 80179a2:	9804      	ldr	r0, [sp, #16]
 80179a4:	9905      	ldr	r1, [sp, #20]
 80179a6:	f7ea fbdb 	bl	8002160 <__aeabi_dmul>
 80179aa:	0002      	movs	r2, r0
 80179ac:	000b      	movs	r3, r1
 80179ae:	9806      	ldr	r0, [sp, #24]
 80179b0:	9907      	ldr	r1, [sp, #28]
 80179b2:	f7e9 fc97 	bl	80012e4 <__aeabi_dadd>
 80179b6:	0022      	movs	r2, r4
 80179b8:	002b      	movs	r3, r5
 80179ba:	9004      	str	r0, [sp, #16]
 80179bc:	9105      	str	r1, [sp, #20]
 80179be:	0030      	movs	r0, r6
 80179c0:	0039      	movs	r1, r7
 80179c2:	f7ea fbcd 	bl	8002160 <__aeabi_dmul>
 80179c6:	0006      	movs	r6, r0
 80179c8:	000f      	movs	r7, r1
 80179ca:	000b      	movs	r3, r1
 80179cc:	0002      	movs	r2, r0
 80179ce:	9804      	ldr	r0, [sp, #16]
 80179d0:	9905      	ldr	r1, [sp, #20]
 80179d2:	9606      	str	r6, [sp, #24]
 80179d4:	9707      	str	r7, [sp, #28]
 80179d6:	f7e9 fc85 	bl	80012e4 <__aeabi_dadd>
 80179da:	4b14      	ldr	r3, [pc, #80]	; (8017a2c <__ieee754_pow+0x3f8>)
 80179dc:	0005      	movs	r5, r0
 80179de:	000c      	movs	r4, r1
 80179e0:	9108      	str	r1, [sp, #32]
 80179e2:	4299      	cmp	r1, r3
 80179e4:	dc00      	bgt.n	80179e8 <__ieee754_pow+0x3b4>
 80179e6:	e2d6      	b.n	8017f96 <__ieee754_pow+0x962>
 80179e8:	4b11      	ldr	r3, [pc, #68]	; (8017a30 <__ieee754_pow+0x3fc>)
 80179ea:	18cb      	adds	r3, r1, r3
 80179ec:	4303      	orrs	r3, r0
 80179ee:	d100      	bne.n	80179f2 <__ieee754_pow+0x3be>
 80179f0:	e1d8      	b.n	8017da4 <__ieee754_pow+0x770>
 80179f2:	9800      	ldr	r0, [sp, #0]
 80179f4:	9901      	ldr	r1, [sp, #4]
 80179f6:	2300      	movs	r3, #0
 80179f8:	2200      	movs	r2, #0
 80179fa:	f7e8 fd33 	bl	8000464 <__aeabi_dcmplt>
 80179fe:	1e43      	subs	r3, r0, #1
 8017a00:	4198      	sbcs	r0, r3
 8017a02:	e731      	b.n	8017868 <__ieee754_pow+0x234>
 8017a04:	3ff00000 	.word	0x3ff00000
 8017a08:	3ff71547 	.word	0x3ff71547
 8017a0c:	f85ddf44 	.word	0xf85ddf44
 8017a10:	3e54ae0b 	.word	0x3e54ae0b
 8017a14:	3fd00000 	.word	0x3fd00000
 8017a18:	55555555 	.word	0x55555555
 8017a1c:	3fd55555 	.word	0x3fd55555
 8017a20:	3fe00000 	.word	0x3fe00000
 8017a24:	652b82fe 	.word	0x652b82fe
 8017a28:	bff00000 	.word	0xbff00000
 8017a2c:	408fffff 	.word	0x408fffff
 8017a30:	bf700000 	.word	0xbf700000
 8017a34:	4bc0      	ldr	r3, [pc, #768]	; (8017d38 <__ieee754_pow+0x704>)
 8017a36:	2200      	movs	r2, #0
 8017a38:	422b      	tst	r3, r5
 8017a3a:	d10a      	bne.n	8017a52 <__ieee754_pow+0x41e>
 8017a3c:	9800      	ldr	r0, [sp, #0]
 8017a3e:	9901      	ldr	r1, [sp, #4]
 8017a40:	2200      	movs	r2, #0
 8017a42:	4bbe      	ldr	r3, [pc, #760]	; (8017d3c <__ieee754_pow+0x708>)
 8017a44:	f7ea fb8c 	bl	8002160 <__aeabi_dmul>
 8017a48:	2235      	movs	r2, #53	; 0x35
 8017a4a:	9000      	str	r0, [sp, #0]
 8017a4c:	9101      	str	r1, [sp, #4]
 8017a4e:	9c01      	ldr	r4, [sp, #4]
 8017a50:	4252      	negs	r2, r2
 8017a52:	49bb      	ldr	r1, [pc, #748]	; (8017d40 <__ieee754_pow+0x70c>)
 8017a54:	1523      	asrs	r3, r4, #20
 8017a56:	185b      	adds	r3, r3, r1
 8017a58:	189b      	adds	r3, r3, r2
 8017a5a:	0324      	lsls	r4, r4, #12
 8017a5c:	4db9      	ldr	r5, [pc, #740]	; (8017d44 <__ieee754_pow+0x710>)
 8017a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8017a60:	4bb9      	ldr	r3, [pc, #740]	; (8017d48 <__ieee754_pow+0x714>)
 8017a62:	0b22      	lsrs	r2, r4, #12
 8017a64:	4315      	orrs	r5, r2
 8017a66:	2400      	movs	r4, #0
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	dd09      	ble.n	8017a80 <__ieee754_pow+0x44c>
 8017a6c:	4bb7      	ldr	r3, [pc, #732]	; (8017d4c <__ieee754_pow+0x718>)
 8017a6e:	3401      	adds	r4, #1
 8017a70:	429a      	cmp	r2, r3
 8017a72:	dd05      	ble.n	8017a80 <__ieee754_pow+0x44c>
 8017a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a76:	191b      	adds	r3, r3, r4
 8017a78:	2400      	movs	r4, #0
 8017a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8017a7c:	4bb4      	ldr	r3, [pc, #720]	; (8017d50 <__ieee754_pow+0x71c>)
 8017a7e:	18ed      	adds	r5, r5, r3
 8017a80:	00e3      	lsls	r3, r4, #3
 8017a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a84:	4bb3      	ldr	r3, [pc, #716]	; (8017d54 <__ieee754_pow+0x720>)
 8017a86:	00e2      	lsls	r2, r4, #3
 8017a88:	189b      	adds	r3, r3, r2
 8017a8a:	9800      	ldr	r0, [sp, #0]
 8017a8c:	9901      	ldr	r1, [sp, #4]
 8017a8e:	681a      	ldr	r2, [r3, #0]
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	0029      	movs	r1, r5
 8017a94:	0006      	movs	r6, r0
 8017a96:	920a      	str	r2, [sp, #40]	; 0x28
 8017a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a9a:	f7ea fdcd 	bl	8002638 <__aeabi_dsub>
 8017a9e:	0032      	movs	r2, r6
 8017aa0:	002b      	movs	r3, r5
 8017aa2:	9010      	str	r0, [sp, #64]	; 0x40
 8017aa4:	9111      	str	r1, [sp, #68]	; 0x44
 8017aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017aa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017aaa:	f7e9 fc1b 	bl	80012e4 <__aeabi_dadd>
 8017aae:	0002      	movs	r2, r0
 8017ab0:	000b      	movs	r3, r1
 8017ab2:	2000      	movs	r0, #0
 8017ab4:	49a3      	ldr	r1, [pc, #652]	; (8017d44 <__ieee754_pow+0x710>)
 8017ab6:	f7e9 ff51 	bl	800195c <__aeabi_ddiv>
 8017aba:	0002      	movs	r2, r0
 8017abc:	000b      	movs	r3, r1
 8017abe:	9012      	str	r0, [sp, #72]	; 0x48
 8017ac0:	9113      	str	r1, [sp, #76]	; 0x4c
 8017ac2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017ac4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017ac6:	f7ea fb4b 	bl	8002160 <__aeabi_dmul>
 8017aca:	9008      	str	r0, [sp, #32]
 8017acc:	9109      	str	r1, [sp, #36]	; 0x24
 8017ace:	9a08      	ldr	r2, [sp, #32]
 8017ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ad2:	2180      	movs	r1, #128	; 0x80
 8017ad4:	9204      	str	r2, [sp, #16]
 8017ad6:	9305      	str	r3, [sp, #20]
 8017ad8:	2300      	movs	r3, #0
 8017ada:	002f      	movs	r7, r5
 8017adc:	0589      	lsls	r1, r1, #22
 8017ade:	106d      	asrs	r5, r5, #1
 8017ae0:	430d      	orrs	r5, r1
 8017ae2:	2180      	movs	r1, #128	; 0x80
 8017ae4:	9304      	str	r3, [sp, #16]
 8017ae6:	9a04      	ldr	r2, [sp, #16]
 8017ae8:	9b05      	ldr	r3, [sp, #20]
 8017aea:	9200      	str	r2, [sp, #0]
 8017aec:	9301      	str	r3, [sp, #4]
 8017aee:	2200      	movs	r2, #0
 8017af0:	0309      	lsls	r1, r1, #12
 8017af2:	186d      	adds	r5, r5, r1
 8017af4:	04a1      	lsls	r1, r4, #18
 8017af6:	186b      	adds	r3, r5, r1
 8017af8:	9800      	ldr	r0, [sp, #0]
 8017afa:	9901      	ldr	r1, [sp, #4]
 8017afc:	0014      	movs	r4, r2
 8017afe:	001d      	movs	r5, r3
 8017b00:	f7ea fb2e 	bl	8002160 <__aeabi_dmul>
 8017b04:	0002      	movs	r2, r0
 8017b06:	000b      	movs	r3, r1
 8017b08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017b0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017b0c:	f7ea fd94 	bl	8002638 <__aeabi_dsub>
 8017b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b14:	9010      	str	r0, [sp, #64]	; 0x40
 8017b16:	9111      	str	r1, [sp, #68]	; 0x44
 8017b18:	0020      	movs	r0, r4
 8017b1a:	0029      	movs	r1, r5
 8017b1c:	f7ea fd8c 	bl	8002638 <__aeabi_dsub>
 8017b20:	0002      	movs	r2, r0
 8017b22:	000b      	movs	r3, r1
 8017b24:	0030      	movs	r0, r6
 8017b26:	0039      	movs	r1, r7
 8017b28:	f7ea fd86 	bl	8002638 <__aeabi_dsub>
 8017b2c:	9a00      	ldr	r2, [sp, #0]
 8017b2e:	9b01      	ldr	r3, [sp, #4]
 8017b30:	f7ea fb16 	bl	8002160 <__aeabi_dmul>
 8017b34:	0002      	movs	r2, r0
 8017b36:	000b      	movs	r3, r1
 8017b38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017b3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017b3c:	f7ea fd7c 	bl	8002638 <__aeabi_dsub>
 8017b40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b44:	f7ea fb0c 	bl	8002160 <__aeabi_dmul>
 8017b48:	9a08      	ldr	r2, [sp, #32]
 8017b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b4c:	900a      	str	r0, [sp, #40]	; 0x28
 8017b4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017b50:	0010      	movs	r0, r2
 8017b52:	0019      	movs	r1, r3
 8017b54:	f7ea fb04 	bl	8002160 <__aeabi_dmul>
 8017b58:	0006      	movs	r6, r0
 8017b5a:	000f      	movs	r7, r1
 8017b5c:	4a7e      	ldr	r2, [pc, #504]	; (8017d58 <__ieee754_pow+0x724>)
 8017b5e:	4b7f      	ldr	r3, [pc, #508]	; (8017d5c <__ieee754_pow+0x728>)
 8017b60:	f7ea fafe 	bl	8002160 <__aeabi_dmul>
 8017b64:	4a7e      	ldr	r2, [pc, #504]	; (8017d60 <__ieee754_pow+0x72c>)
 8017b66:	4b7f      	ldr	r3, [pc, #508]	; (8017d64 <__ieee754_pow+0x730>)
 8017b68:	f7e9 fbbc 	bl	80012e4 <__aeabi_dadd>
 8017b6c:	0032      	movs	r2, r6
 8017b6e:	003b      	movs	r3, r7
 8017b70:	f7ea faf6 	bl	8002160 <__aeabi_dmul>
 8017b74:	4a7c      	ldr	r2, [pc, #496]	; (8017d68 <__ieee754_pow+0x734>)
 8017b76:	4b7d      	ldr	r3, [pc, #500]	; (8017d6c <__ieee754_pow+0x738>)
 8017b78:	f7e9 fbb4 	bl	80012e4 <__aeabi_dadd>
 8017b7c:	0032      	movs	r2, r6
 8017b7e:	003b      	movs	r3, r7
 8017b80:	f7ea faee 	bl	8002160 <__aeabi_dmul>
 8017b84:	4a7a      	ldr	r2, [pc, #488]	; (8017d70 <__ieee754_pow+0x73c>)
 8017b86:	4b7b      	ldr	r3, [pc, #492]	; (8017d74 <__ieee754_pow+0x740>)
 8017b88:	f7e9 fbac 	bl	80012e4 <__aeabi_dadd>
 8017b8c:	0032      	movs	r2, r6
 8017b8e:	003b      	movs	r3, r7
 8017b90:	f7ea fae6 	bl	8002160 <__aeabi_dmul>
 8017b94:	4a78      	ldr	r2, [pc, #480]	; (8017d78 <__ieee754_pow+0x744>)
 8017b96:	4b79      	ldr	r3, [pc, #484]	; (8017d7c <__ieee754_pow+0x748>)
 8017b98:	f7e9 fba4 	bl	80012e4 <__aeabi_dadd>
 8017b9c:	0032      	movs	r2, r6
 8017b9e:	003b      	movs	r3, r7
 8017ba0:	f7ea fade 	bl	8002160 <__aeabi_dmul>
 8017ba4:	4a76      	ldr	r2, [pc, #472]	; (8017d80 <__ieee754_pow+0x74c>)
 8017ba6:	4b77      	ldr	r3, [pc, #476]	; (8017d84 <__ieee754_pow+0x750>)
 8017ba8:	f7e9 fb9c 	bl	80012e4 <__aeabi_dadd>
 8017bac:	0032      	movs	r2, r6
 8017bae:	0004      	movs	r4, r0
 8017bb0:	000d      	movs	r5, r1
 8017bb2:	003b      	movs	r3, r7
 8017bb4:	0030      	movs	r0, r6
 8017bb6:	0039      	movs	r1, r7
 8017bb8:	f7ea fad2 	bl	8002160 <__aeabi_dmul>
 8017bbc:	0002      	movs	r2, r0
 8017bbe:	000b      	movs	r3, r1
 8017bc0:	0020      	movs	r0, r4
 8017bc2:	0029      	movs	r1, r5
 8017bc4:	f7ea facc 	bl	8002160 <__aeabi_dmul>
 8017bc8:	9a00      	ldr	r2, [sp, #0]
 8017bca:	9b01      	ldr	r3, [sp, #4]
 8017bcc:	0004      	movs	r4, r0
 8017bce:	000d      	movs	r5, r1
 8017bd0:	9808      	ldr	r0, [sp, #32]
 8017bd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017bd4:	f7e9 fb86 	bl	80012e4 <__aeabi_dadd>
 8017bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bdc:	f7ea fac0 	bl	8002160 <__aeabi_dmul>
 8017be0:	0022      	movs	r2, r4
 8017be2:	002b      	movs	r3, r5
 8017be4:	f7e9 fb7e 	bl	80012e4 <__aeabi_dadd>
 8017be8:	9a00      	ldr	r2, [sp, #0]
 8017bea:	9b01      	ldr	r3, [sp, #4]
 8017bec:	9010      	str	r0, [sp, #64]	; 0x40
 8017bee:	9111      	str	r1, [sp, #68]	; 0x44
 8017bf0:	0010      	movs	r0, r2
 8017bf2:	0019      	movs	r1, r3
 8017bf4:	f7ea fab4 	bl	8002160 <__aeabi_dmul>
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	4b63      	ldr	r3, [pc, #396]	; (8017d88 <__ieee754_pow+0x754>)
 8017bfc:	0004      	movs	r4, r0
 8017bfe:	000d      	movs	r5, r1
 8017c00:	f7e9 fb70 	bl	80012e4 <__aeabi_dadd>
 8017c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c08:	f7e9 fb6c 	bl	80012e4 <__aeabi_dadd>
 8017c0c:	2600      	movs	r6, #0
 8017c0e:	000f      	movs	r7, r1
 8017c10:	0032      	movs	r2, r6
 8017c12:	000b      	movs	r3, r1
 8017c14:	9800      	ldr	r0, [sp, #0]
 8017c16:	9901      	ldr	r1, [sp, #4]
 8017c18:	f7ea faa2 	bl	8002160 <__aeabi_dmul>
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	9000      	str	r0, [sp, #0]
 8017c20:	9101      	str	r1, [sp, #4]
 8017c22:	4b59      	ldr	r3, [pc, #356]	; (8017d88 <__ieee754_pow+0x754>)
 8017c24:	0030      	movs	r0, r6
 8017c26:	0039      	movs	r1, r7
 8017c28:	f7ea fd06 	bl	8002638 <__aeabi_dsub>
 8017c2c:	0022      	movs	r2, r4
 8017c2e:	002b      	movs	r3, r5
 8017c30:	f7ea fd02 	bl	8002638 <__aeabi_dsub>
 8017c34:	0002      	movs	r2, r0
 8017c36:	000b      	movs	r3, r1
 8017c38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017c3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017c3c:	f7ea fcfc 	bl	8002638 <__aeabi_dsub>
 8017c40:	9a08      	ldr	r2, [sp, #32]
 8017c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c44:	f7ea fa8c 	bl	8002160 <__aeabi_dmul>
 8017c48:	0032      	movs	r2, r6
 8017c4a:	0004      	movs	r4, r0
 8017c4c:	000d      	movs	r5, r1
 8017c4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017c52:	003b      	movs	r3, r7
 8017c54:	f7ea fa84 	bl	8002160 <__aeabi_dmul>
 8017c58:	0002      	movs	r2, r0
 8017c5a:	000b      	movs	r3, r1
 8017c5c:	0020      	movs	r0, r4
 8017c5e:	0029      	movs	r1, r5
 8017c60:	f7e9 fb40 	bl	80012e4 <__aeabi_dadd>
 8017c64:	0004      	movs	r4, r0
 8017c66:	000d      	movs	r5, r1
 8017c68:	0002      	movs	r2, r0
 8017c6a:	000b      	movs	r3, r1
 8017c6c:	9800      	ldr	r0, [sp, #0]
 8017c6e:	9901      	ldr	r1, [sp, #4]
 8017c70:	f7e9 fb38 	bl	80012e4 <__aeabi_dadd>
 8017c74:	2600      	movs	r6, #0
 8017c76:	22e0      	movs	r2, #224	; 0xe0
 8017c78:	4b44      	ldr	r3, [pc, #272]	; (8017d8c <__ieee754_pow+0x758>)
 8017c7a:	0612      	lsls	r2, r2, #24
 8017c7c:	0030      	movs	r0, r6
 8017c7e:	000f      	movs	r7, r1
 8017c80:	f7ea fa6e 	bl	8002160 <__aeabi_dmul>
 8017c84:	9008      	str	r0, [sp, #32]
 8017c86:	9109      	str	r1, [sp, #36]	; 0x24
 8017c88:	9a00      	ldr	r2, [sp, #0]
 8017c8a:	9b01      	ldr	r3, [sp, #4]
 8017c8c:	0039      	movs	r1, r7
 8017c8e:	0030      	movs	r0, r6
 8017c90:	f7ea fcd2 	bl	8002638 <__aeabi_dsub>
 8017c94:	0002      	movs	r2, r0
 8017c96:	000b      	movs	r3, r1
 8017c98:	0020      	movs	r0, r4
 8017c9a:	0029      	movs	r1, r5
 8017c9c:	f7ea fccc 	bl	8002638 <__aeabi_dsub>
 8017ca0:	4a3b      	ldr	r2, [pc, #236]	; (8017d90 <__ieee754_pow+0x75c>)
 8017ca2:	4b3a      	ldr	r3, [pc, #232]	; (8017d8c <__ieee754_pow+0x758>)
 8017ca4:	f7ea fa5c 	bl	8002160 <__aeabi_dmul>
 8017ca8:	4a3a      	ldr	r2, [pc, #232]	; (8017d94 <__ieee754_pow+0x760>)
 8017caa:	0004      	movs	r4, r0
 8017cac:	000d      	movs	r5, r1
 8017cae:	4b3a      	ldr	r3, [pc, #232]	; (8017d98 <__ieee754_pow+0x764>)
 8017cb0:	0039      	movs	r1, r7
 8017cb2:	0030      	movs	r0, r6
 8017cb4:	f7ea fa54 	bl	8002160 <__aeabi_dmul>
 8017cb8:	0002      	movs	r2, r0
 8017cba:	000b      	movs	r3, r1
 8017cbc:	0020      	movs	r0, r4
 8017cbe:	0029      	movs	r1, r5
 8017cc0:	f7e9 fb10 	bl	80012e4 <__aeabi_dadd>
 8017cc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017cc6:	4b35      	ldr	r3, [pc, #212]	; (8017d9c <__ieee754_pow+0x768>)
 8017cc8:	189b      	adds	r3, r3, r2
 8017cca:	681a      	ldr	r2, [r3, #0]
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	f7e9 fb09 	bl	80012e4 <__aeabi_dadd>
 8017cd2:	900a      	str	r0, [sp, #40]	; 0x28
 8017cd4:	910b      	str	r1, [sp, #44]	; 0x2c
 8017cd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017cd8:	f7eb f894 	bl	8002e04 <__aeabi_i2d>
 8017cdc:	0004      	movs	r4, r0
 8017cde:	000d      	movs	r5, r1
 8017ce0:	9808      	ldr	r0, [sp, #32]
 8017ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ce6:	4b2e      	ldr	r3, [pc, #184]	; (8017da0 <__ieee754_pow+0x76c>)
 8017ce8:	189b      	adds	r3, r3, r2
 8017cea:	681a      	ldr	r2, [r3, #0]
 8017cec:	685b      	ldr	r3, [r3, #4]
 8017cee:	9200      	str	r2, [sp, #0]
 8017cf0:	9301      	str	r3, [sp, #4]
 8017cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cf6:	f7e9 faf5 	bl	80012e4 <__aeabi_dadd>
 8017cfa:	9a00      	ldr	r2, [sp, #0]
 8017cfc:	9b01      	ldr	r3, [sp, #4]
 8017cfe:	f7e9 faf1 	bl	80012e4 <__aeabi_dadd>
 8017d02:	0022      	movs	r2, r4
 8017d04:	002b      	movs	r3, r5
 8017d06:	f7e9 faed 	bl	80012e4 <__aeabi_dadd>
 8017d0a:	0022      	movs	r2, r4
 8017d0c:	002b      	movs	r3, r5
 8017d0e:	0030      	movs	r0, r6
 8017d10:	000f      	movs	r7, r1
 8017d12:	f7ea fc91 	bl	8002638 <__aeabi_dsub>
 8017d16:	9a00      	ldr	r2, [sp, #0]
 8017d18:	9b01      	ldr	r3, [sp, #4]
 8017d1a:	f7ea fc8d 	bl	8002638 <__aeabi_dsub>
 8017d1e:	9a08      	ldr	r2, [sp, #32]
 8017d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d22:	f7ea fc89 	bl	8002638 <__aeabi_dsub>
 8017d26:	0002      	movs	r2, r0
 8017d28:	000b      	movs	r3, r1
 8017d2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d2e:	e619      	b.n	8017964 <__ieee754_pow+0x330>
 8017d30:	2300      	movs	r3, #0
 8017d32:	4c04      	ldr	r4, [pc, #16]	; (8017d44 <__ieee754_pow+0x710>)
 8017d34:	e622      	b.n	801797c <__ieee754_pow+0x348>
 8017d36:	46c0      	nop			; (mov r8, r8)
 8017d38:	7ff00000 	.word	0x7ff00000
 8017d3c:	43400000 	.word	0x43400000
 8017d40:	fffffc01 	.word	0xfffffc01
 8017d44:	3ff00000 	.word	0x3ff00000
 8017d48:	0003988e 	.word	0x0003988e
 8017d4c:	000bb679 	.word	0x000bb679
 8017d50:	fff00000 	.word	0xfff00000
 8017d54:	08018de8 	.word	0x08018de8
 8017d58:	4a454eef 	.word	0x4a454eef
 8017d5c:	3fca7e28 	.word	0x3fca7e28
 8017d60:	93c9db65 	.word	0x93c9db65
 8017d64:	3fcd864a 	.word	0x3fcd864a
 8017d68:	a91d4101 	.word	0xa91d4101
 8017d6c:	3fd17460 	.word	0x3fd17460
 8017d70:	518f264d 	.word	0x518f264d
 8017d74:	3fd55555 	.word	0x3fd55555
 8017d78:	db6fabff 	.word	0xdb6fabff
 8017d7c:	3fdb6db6 	.word	0x3fdb6db6
 8017d80:	33333303 	.word	0x33333303
 8017d84:	3fe33333 	.word	0x3fe33333
 8017d88:	40080000 	.word	0x40080000
 8017d8c:	3feec709 	.word	0x3feec709
 8017d90:	dc3a03fd 	.word	0xdc3a03fd
 8017d94:	145b01f5 	.word	0x145b01f5
 8017d98:	be3e2fe0 	.word	0xbe3e2fe0
 8017d9c:	08018e08 	.word	0x08018e08
 8017da0:	08018df8 	.word	0x08018df8
 8017da4:	4a90      	ldr	r2, [pc, #576]	; (8017fe8 <__ieee754_pow+0x9b4>)
 8017da6:	4b91      	ldr	r3, [pc, #580]	; (8017fec <__ieee754_pow+0x9b8>)
 8017da8:	9804      	ldr	r0, [sp, #16]
 8017daa:	9905      	ldr	r1, [sp, #20]
 8017dac:	f7e9 fa9a 	bl	80012e4 <__aeabi_dadd>
 8017db0:	0032      	movs	r2, r6
 8017db2:	9002      	str	r0, [sp, #8]
 8017db4:	9103      	str	r1, [sp, #12]
 8017db6:	003b      	movs	r3, r7
 8017db8:	0028      	movs	r0, r5
 8017dba:	0021      	movs	r1, r4
 8017dbc:	f7ea fc3c 	bl	8002638 <__aeabi_dsub>
 8017dc0:	0002      	movs	r2, r0
 8017dc2:	000b      	movs	r3, r1
 8017dc4:	9802      	ldr	r0, [sp, #8]
 8017dc6:	9903      	ldr	r1, [sp, #12]
 8017dc8:	f7e8 fb60 	bl	800048c <__aeabi_dcmpgt>
 8017dcc:	2800      	cmp	r0, #0
 8017dce:	d000      	beq.n	8017dd2 <__ieee754_pow+0x79e>
 8017dd0:	e60f      	b.n	80179f2 <__ieee754_pow+0x3be>
 8017dd2:	2100      	movs	r1, #0
 8017dd4:	4a86      	ldr	r2, [pc, #536]	; (8017ff0 <__ieee754_pow+0x9bc>)
 8017dd6:	0063      	lsls	r3, r4, #1
 8017dd8:	085b      	lsrs	r3, r3, #1
 8017dda:	9102      	str	r1, [sp, #8]
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	dd25      	ble.n	8017e2c <__ieee754_pow+0x7f8>
 8017de0:	4a84      	ldr	r2, [pc, #528]	; (8017ff4 <__ieee754_pow+0x9c0>)
 8017de2:	151b      	asrs	r3, r3, #20
 8017de4:	189b      	adds	r3, r3, r2
 8017de6:	2280      	movs	r2, #128	; 0x80
 8017de8:	0352      	lsls	r2, r2, #13
 8017dea:	4694      	mov	ip, r2
 8017dec:	411a      	asrs	r2, r3
 8017dee:	1914      	adds	r4, r2, r4
 8017df0:	4b81      	ldr	r3, [pc, #516]	; (8017ff8 <__ieee754_pow+0x9c4>)
 8017df2:	0060      	lsls	r0, r4, #1
 8017df4:	4d81      	ldr	r5, [pc, #516]	; (8017ffc <__ieee754_pow+0x9c8>)
 8017df6:	0d40      	lsrs	r0, r0, #21
 8017df8:	18c0      	adds	r0, r0, r3
 8017dfa:	4105      	asrs	r5, r0
 8017dfc:	0021      	movs	r1, r4
 8017dfe:	43a9      	bics	r1, r5
 8017e00:	000b      	movs	r3, r1
 8017e02:	4661      	mov	r1, ip
 8017e04:	0324      	lsls	r4, r4, #12
 8017e06:	0b24      	lsrs	r4, r4, #12
 8017e08:	4321      	orrs	r1, r4
 8017e0a:	2414      	movs	r4, #20
 8017e0c:	1a20      	subs	r0, r4, r0
 8017e0e:	4101      	asrs	r1, r0
 8017e10:	9102      	str	r1, [sp, #8]
 8017e12:	9908      	ldr	r1, [sp, #32]
 8017e14:	2200      	movs	r2, #0
 8017e16:	2900      	cmp	r1, #0
 8017e18:	da02      	bge.n	8017e20 <__ieee754_pow+0x7ec>
 8017e1a:	9902      	ldr	r1, [sp, #8]
 8017e1c:	4249      	negs	r1, r1
 8017e1e:	9102      	str	r1, [sp, #8]
 8017e20:	0030      	movs	r0, r6
 8017e22:	0039      	movs	r1, r7
 8017e24:	f7ea fc08 	bl	8002638 <__aeabi_dsub>
 8017e28:	9006      	str	r0, [sp, #24]
 8017e2a:	9107      	str	r1, [sp, #28]
 8017e2c:	9a04      	ldr	r2, [sp, #16]
 8017e2e:	9b05      	ldr	r3, [sp, #20]
 8017e30:	9806      	ldr	r0, [sp, #24]
 8017e32:	9907      	ldr	r1, [sp, #28]
 8017e34:	2600      	movs	r6, #0
 8017e36:	f7e9 fa55 	bl	80012e4 <__aeabi_dadd>
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	0030      	movs	r0, r6
 8017e3e:	4b70      	ldr	r3, [pc, #448]	; (8018000 <__ieee754_pow+0x9cc>)
 8017e40:	000f      	movs	r7, r1
 8017e42:	f7ea f98d 	bl	8002160 <__aeabi_dmul>
 8017e46:	9a06      	ldr	r2, [sp, #24]
 8017e48:	9b07      	ldr	r3, [sp, #28]
 8017e4a:	9008      	str	r0, [sp, #32]
 8017e4c:	9109      	str	r1, [sp, #36]	; 0x24
 8017e4e:	0030      	movs	r0, r6
 8017e50:	0039      	movs	r1, r7
 8017e52:	f7ea fbf1 	bl	8002638 <__aeabi_dsub>
 8017e56:	0002      	movs	r2, r0
 8017e58:	000b      	movs	r3, r1
 8017e5a:	9804      	ldr	r0, [sp, #16]
 8017e5c:	9905      	ldr	r1, [sp, #20]
 8017e5e:	f7ea fbeb 	bl	8002638 <__aeabi_dsub>
 8017e62:	4a68      	ldr	r2, [pc, #416]	; (8018004 <__ieee754_pow+0x9d0>)
 8017e64:	4b68      	ldr	r3, [pc, #416]	; (8018008 <__ieee754_pow+0x9d4>)
 8017e66:	f7ea f97b 	bl	8002160 <__aeabi_dmul>
 8017e6a:	4a68      	ldr	r2, [pc, #416]	; (801800c <__ieee754_pow+0x9d8>)
 8017e6c:	0004      	movs	r4, r0
 8017e6e:	000d      	movs	r5, r1
 8017e70:	0030      	movs	r0, r6
 8017e72:	0039      	movs	r1, r7
 8017e74:	4b66      	ldr	r3, [pc, #408]	; (8018010 <__ieee754_pow+0x9dc>)
 8017e76:	f7ea f973 	bl	8002160 <__aeabi_dmul>
 8017e7a:	0002      	movs	r2, r0
 8017e7c:	000b      	movs	r3, r1
 8017e7e:	0020      	movs	r0, r4
 8017e80:	0029      	movs	r1, r5
 8017e82:	f7e9 fa2f 	bl	80012e4 <__aeabi_dadd>
 8017e86:	0004      	movs	r4, r0
 8017e88:	000d      	movs	r5, r1
 8017e8a:	0002      	movs	r2, r0
 8017e8c:	000b      	movs	r3, r1
 8017e8e:	9808      	ldr	r0, [sp, #32]
 8017e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e92:	f7e9 fa27 	bl	80012e4 <__aeabi_dadd>
 8017e96:	9a08      	ldr	r2, [sp, #32]
 8017e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e9a:	0006      	movs	r6, r0
 8017e9c:	000f      	movs	r7, r1
 8017e9e:	f7ea fbcb 	bl	8002638 <__aeabi_dsub>
 8017ea2:	0002      	movs	r2, r0
 8017ea4:	000b      	movs	r3, r1
 8017ea6:	0020      	movs	r0, r4
 8017ea8:	0029      	movs	r1, r5
 8017eaa:	f7ea fbc5 	bl	8002638 <__aeabi_dsub>
 8017eae:	0032      	movs	r2, r6
 8017eb0:	9004      	str	r0, [sp, #16]
 8017eb2:	9105      	str	r1, [sp, #20]
 8017eb4:	003b      	movs	r3, r7
 8017eb6:	0030      	movs	r0, r6
 8017eb8:	0039      	movs	r1, r7
 8017eba:	f7ea f951 	bl	8002160 <__aeabi_dmul>
 8017ebe:	0004      	movs	r4, r0
 8017ec0:	000d      	movs	r5, r1
 8017ec2:	4a54      	ldr	r2, [pc, #336]	; (8018014 <__ieee754_pow+0x9e0>)
 8017ec4:	4b54      	ldr	r3, [pc, #336]	; (8018018 <__ieee754_pow+0x9e4>)
 8017ec6:	f7ea f94b 	bl	8002160 <__aeabi_dmul>
 8017eca:	4a54      	ldr	r2, [pc, #336]	; (801801c <__ieee754_pow+0x9e8>)
 8017ecc:	4b54      	ldr	r3, [pc, #336]	; (8018020 <__ieee754_pow+0x9ec>)
 8017ece:	f7ea fbb3 	bl	8002638 <__aeabi_dsub>
 8017ed2:	0022      	movs	r2, r4
 8017ed4:	002b      	movs	r3, r5
 8017ed6:	f7ea f943 	bl	8002160 <__aeabi_dmul>
 8017eda:	4a52      	ldr	r2, [pc, #328]	; (8018024 <__ieee754_pow+0x9f0>)
 8017edc:	4b52      	ldr	r3, [pc, #328]	; (8018028 <__ieee754_pow+0x9f4>)
 8017ede:	f7e9 fa01 	bl	80012e4 <__aeabi_dadd>
 8017ee2:	0022      	movs	r2, r4
 8017ee4:	002b      	movs	r3, r5
 8017ee6:	f7ea f93b 	bl	8002160 <__aeabi_dmul>
 8017eea:	4a50      	ldr	r2, [pc, #320]	; (801802c <__ieee754_pow+0x9f8>)
 8017eec:	4b50      	ldr	r3, [pc, #320]	; (8018030 <__ieee754_pow+0x9fc>)
 8017eee:	f7ea fba3 	bl	8002638 <__aeabi_dsub>
 8017ef2:	0022      	movs	r2, r4
 8017ef4:	002b      	movs	r3, r5
 8017ef6:	f7ea f933 	bl	8002160 <__aeabi_dmul>
 8017efa:	4a4e      	ldr	r2, [pc, #312]	; (8018034 <__ieee754_pow+0xa00>)
 8017efc:	4b4e      	ldr	r3, [pc, #312]	; (8018038 <__ieee754_pow+0xa04>)
 8017efe:	f7e9 f9f1 	bl	80012e4 <__aeabi_dadd>
 8017f02:	0022      	movs	r2, r4
 8017f04:	002b      	movs	r3, r5
 8017f06:	f7ea f92b 	bl	8002160 <__aeabi_dmul>
 8017f0a:	0002      	movs	r2, r0
 8017f0c:	000b      	movs	r3, r1
 8017f0e:	0030      	movs	r0, r6
 8017f10:	0039      	movs	r1, r7
 8017f12:	f7ea fb91 	bl	8002638 <__aeabi_dsub>
 8017f16:	0004      	movs	r4, r0
 8017f18:	000d      	movs	r5, r1
 8017f1a:	0002      	movs	r2, r0
 8017f1c:	000b      	movs	r3, r1
 8017f1e:	0030      	movs	r0, r6
 8017f20:	0039      	movs	r1, r7
 8017f22:	f7ea f91d 	bl	8002160 <__aeabi_dmul>
 8017f26:	2380      	movs	r3, #128	; 0x80
 8017f28:	9006      	str	r0, [sp, #24]
 8017f2a:	9107      	str	r1, [sp, #28]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	0020      	movs	r0, r4
 8017f30:	0029      	movs	r1, r5
 8017f32:	05db      	lsls	r3, r3, #23
 8017f34:	f7ea fb80 	bl	8002638 <__aeabi_dsub>
 8017f38:	0002      	movs	r2, r0
 8017f3a:	000b      	movs	r3, r1
 8017f3c:	9806      	ldr	r0, [sp, #24]
 8017f3e:	9907      	ldr	r1, [sp, #28]
 8017f40:	f7e9 fd0c 	bl	800195c <__aeabi_ddiv>
 8017f44:	9a04      	ldr	r2, [sp, #16]
 8017f46:	9b05      	ldr	r3, [sp, #20]
 8017f48:	0004      	movs	r4, r0
 8017f4a:	000d      	movs	r5, r1
 8017f4c:	0030      	movs	r0, r6
 8017f4e:	0039      	movs	r1, r7
 8017f50:	f7ea f906 	bl	8002160 <__aeabi_dmul>
 8017f54:	9a04      	ldr	r2, [sp, #16]
 8017f56:	9b05      	ldr	r3, [sp, #20]
 8017f58:	f7e9 f9c4 	bl	80012e4 <__aeabi_dadd>
 8017f5c:	0002      	movs	r2, r0
 8017f5e:	000b      	movs	r3, r1
 8017f60:	0020      	movs	r0, r4
 8017f62:	0029      	movs	r1, r5
 8017f64:	f7ea fb68 	bl	8002638 <__aeabi_dsub>
 8017f68:	0032      	movs	r2, r6
 8017f6a:	003b      	movs	r3, r7
 8017f6c:	f7ea fb64 	bl	8002638 <__aeabi_dsub>
 8017f70:	0002      	movs	r2, r0
 8017f72:	000b      	movs	r3, r1
 8017f74:	2000      	movs	r0, #0
 8017f76:	4931      	ldr	r1, [pc, #196]	; (801803c <__ieee754_pow+0xa08>)
 8017f78:	f7ea fb5e 	bl	8002638 <__aeabi_dsub>
 8017f7c:	9b02      	ldr	r3, [sp, #8]
 8017f7e:	051b      	lsls	r3, r3, #20
 8017f80:	185b      	adds	r3, r3, r1
 8017f82:	151a      	asrs	r2, r3, #20
 8017f84:	2a00      	cmp	r2, #0
 8017f86:	dc25      	bgt.n	8017fd4 <__ieee754_pow+0x9a0>
 8017f88:	9a02      	ldr	r2, [sp, #8]
 8017f8a:	f000 f94f 	bl	801822c <scalbn>
 8017f8e:	9a00      	ldr	r2, [sp, #0]
 8017f90:	9b01      	ldr	r3, [sp, #4]
 8017f92:	f7ff fc33 	bl	80177fc <__ieee754_pow+0x1c8>
 8017f96:	4a2a      	ldr	r2, [pc, #168]	; (8018040 <__ieee754_pow+0xa0c>)
 8017f98:	004b      	lsls	r3, r1, #1
 8017f9a:	085b      	lsrs	r3, r3, #1
 8017f9c:	4293      	cmp	r3, r2
 8017f9e:	dc00      	bgt.n	8017fa2 <__ieee754_pow+0x96e>
 8017fa0:	e717      	b.n	8017dd2 <__ieee754_pow+0x79e>
 8017fa2:	4b28      	ldr	r3, [pc, #160]	; (8018044 <__ieee754_pow+0xa10>)
 8017fa4:	18cb      	adds	r3, r1, r3
 8017fa6:	4303      	orrs	r3, r0
 8017fa8:	d008      	beq.n	8017fbc <__ieee754_pow+0x988>
 8017faa:	9800      	ldr	r0, [sp, #0]
 8017fac:	9901      	ldr	r1, [sp, #4]
 8017fae:	2300      	movs	r3, #0
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	f7e8 fa57 	bl	8000464 <__aeabi_dcmplt>
 8017fb6:	1e43      	subs	r3, r0, #1
 8017fb8:	4198      	sbcs	r0, r3
 8017fba:	e462      	b.n	8017882 <__ieee754_pow+0x24e>
 8017fbc:	0032      	movs	r2, r6
 8017fbe:	003b      	movs	r3, r7
 8017fc0:	f7ea fb3a 	bl	8002638 <__aeabi_dsub>
 8017fc4:	9a04      	ldr	r2, [sp, #16]
 8017fc6:	9b05      	ldr	r3, [sp, #20]
 8017fc8:	f7e8 fa6a 	bl	80004a0 <__aeabi_dcmpge>
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	d100      	bne.n	8017fd2 <__ieee754_pow+0x99e>
 8017fd0:	e6ff      	b.n	8017dd2 <__ieee754_pow+0x79e>
 8017fd2:	e7ea      	b.n	8017faa <__ieee754_pow+0x976>
 8017fd4:	0019      	movs	r1, r3
 8017fd6:	e7da      	b.n	8017f8e <__ieee754_pow+0x95a>
 8017fd8:	2300      	movs	r3, #0
 8017fda:	4c18      	ldr	r4, [pc, #96]	; (801803c <__ieee754_pow+0xa08>)
 8017fdc:	f7ff fbf1 	bl	80177c2 <__ieee754_pow+0x18e>
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	2400      	movs	r4, #0
 8017fe4:	f7ff fbed 	bl	80177c2 <__ieee754_pow+0x18e>
 8017fe8:	652b82fe 	.word	0x652b82fe
 8017fec:	3c971547 	.word	0x3c971547
 8017ff0:	3fe00000 	.word	0x3fe00000
 8017ff4:	fffffc02 	.word	0xfffffc02
 8017ff8:	fffffc01 	.word	0xfffffc01
 8017ffc:	000fffff 	.word	0x000fffff
 8018000:	3fe62e43 	.word	0x3fe62e43
 8018004:	fefa39ef 	.word	0xfefa39ef
 8018008:	3fe62e42 	.word	0x3fe62e42
 801800c:	0ca86c39 	.word	0x0ca86c39
 8018010:	be205c61 	.word	0xbe205c61
 8018014:	72bea4d0 	.word	0x72bea4d0
 8018018:	3e663769 	.word	0x3e663769
 801801c:	c5d26bf1 	.word	0xc5d26bf1
 8018020:	3ebbbd41 	.word	0x3ebbbd41
 8018024:	af25de2c 	.word	0xaf25de2c
 8018028:	3f11566a 	.word	0x3f11566a
 801802c:	16bebd93 	.word	0x16bebd93
 8018030:	3f66c16c 	.word	0x3f66c16c
 8018034:	5555553e 	.word	0x5555553e
 8018038:	3fc55555 	.word	0x3fc55555
 801803c:	3ff00000 	.word	0x3ff00000
 8018040:	4090cbff 	.word	0x4090cbff
 8018044:	3f6f3400 	.word	0x3f6f3400

08018048 <__ieee754_sqrt>:
 8018048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801804a:	000b      	movs	r3, r1
 801804c:	000c      	movs	r4, r1
 801804e:	4956      	ldr	r1, [pc, #344]	; (80181a8 <__ieee754_sqrt+0x160>)
 8018050:	0005      	movs	r5, r0
 8018052:	0002      	movs	r2, r0
 8018054:	0008      	movs	r0, r1
 8018056:	b085      	sub	sp, #20
 8018058:	4020      	ands	r0, r4
 801805a:	4288      	cmp	r0, r1
 801805c:	d10f      	bne.n	801807e <__ieee754_sqrt+0x36>
 801805e:	0028      	movs	r0, r5
 8018060:	0021      	movs	r1, r4
 8018062:	f7ea f87d 	bl	8002160 <__aeabi_dmul>
 8018066:	0002      	movs	r2, r0
 8018068:	000b      	movs	r3, r1
 801806a:	0028      	movs	r0, r5
 801806c:	0021      	movs	r1, r4
 801806e:	f7e9 f939 	bl	80012e4 <__aeabi_dadd>
 8018072:	0005      	movs	r5, r0
 8018074:	000c      	movs	r4, r1
 8018076:	0028      	movs	r0, r5
 8018078:	0021      	movs	r1, r4
 801807a:	b005      	add	sp, #20
 801807c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801807e:	2c00      	cmp	r4, #0
 8018080:	dc10      	bgt.n	80180a4 <__ieee754_sqrt+0x5c>
 8018082:	0061      	lsls	r1, r4, #1
 8018084:	0849      	lsrs	r1, r1, #1
 8018086:	4329      	orrs	r1, r5
 8018088:	d0f5      	beq.n	8018076 <__ieee754_sqrt+0x2e>
 801808a:	2100      	movs	r1, #0
 801808c:	428c      	cmp	r4, r1
 801808e:	d100      	bne.n	8018092 <__ieee754_sqrt+0x4a>
 8018090:	e080      	b.n	8018194 <__ieee754_sqrt+0x14c>
 8018092:	0028      	movs	r0, r5
 8018094:	0021      	movs	r1, r4
 8018096:	f7ea facf 	bl	8002638 <__aeabi_dsub>
 801809a:	0002      	movs	r2, r0
 801809c:	000b      	movs	r3, r1
 801809e:	f7e9 fc5d 	bl	800195c <__aeabi_ddiv>
 80180a2:	e7e6      	b.n	8018072 <__ieee754_sqrt+0x2a>
 80180a4:	1521      	asrs	r1, r4, #20
 80180a6:	d075      	beq.n	8018194 <__ieee754_sqrt+0x14c>
 80180a8:	4840      	ldr	r0, [pc, #256]	; (80181ac <__ieee754_sqrt+0x164>)
 80180aa:	031b      	lsls	r3, r3, #12
 80180ac:	180c      	adds	r4, r1, r0
 80180ae:	2080      	movs	r0, #128	; 0x80
 80180b0:	0b1b      	lsrs	r3, r3, #12
 80180b2:	0340      	lsls	r0, r0, #13
 80180b4:	4303      	orrs	r3, r0
 80180b6:	07c9      	lsls	r1, r1, #31
 80180b8:	d403      	bmi.n	80180c2 <__ieee754_sqrt+0x7a>
 80180ba:	0fd1      	lsrs	r1, r2, #31
 80180bc:	005b      	lsls	r3, r3, #1
 80180be:	185b      	adds	r3, r3, r1
 80180c0:	0052      	lsls	r2, r2, #1
 80180c2:	1061      	asrs	r1, r4, #1
 80180c4:	2400      	movs	r4, #0
 80180c6:	9103      	str	r1, [sp, #12]
 80180c8:	005b      	lsls	r3, r3, #1
 80180ca:	0fd1      	lsrs	r1, r2, #31
 80180cc:	185b      	adds	r3, r3, r1
 80180ce:	2180      	movs	r1, #128	; 0x80
 80180d0:	2516      	movs	r5, #22
 80180d2:	0020      	movs	r0, r4
 80180d4:	0052      	lsls	r2, r2, #1
 80180d6:	0389      	lsls	r1, r1, #14
 80180d8:	1846      	adds	r6, r0, r1
 80180da:	429e      	cmp	r6, r3
 80180dc:	dc02      	bgt.n	80180e4 <__ieee754_sqrt+0x9c>
 80180de:	1870      	adds	r0, r6, r1
 80180e0:	1b9b      	subs	r3, r3, r6
 80180e2:	1864      	adds	r4, r4, r1
 80180e4:	0fd6      	lsrs	r6, r2, #31
 80180e6:	005b      	lsls	r3, r3, #1
 80180e8:	3d01      	subs	r5, #1
 80180ea:	18f3      	adds	r3, r6, r3
 80180ec:	0052      	lsls	r2, r2, #1
 80180ee:	0849      	lsrs	r1, r1, #1
 80180f0:	2d00      	cmp	r5, #0
 80180f2:	d1f1      	bne.n	80180d8 <__ieee754_sqrt+0x90>
 80180f4:	2620      	movs	r6, #32
 80180f6:	2780      	movs	r7, #128	; 0x80
 80180f8:	0029      	movs	r1, r5
 80180fa:	9601      	str	r6, [sp, #4]
 80180fc:	063f      	lsls	r7, r7, #24
 80180fe:	197e      	adds	r6, r7, r5
 8018100:	46b4      	mov	ip, r6
 8018102:	4283      	cmp	r3, r0
 8018104:	dc02      	bgt.n	801810c <__ieee754_sqrt+0xc4>
 8018106:	d114      	bne.n	8018132 <__ieee754_sqrt+0xea>
 8018108:	4296      	cmp	r6, r2
 801810a:	d812      	bhi.n	8018132 <__ieee754_sqrt+0xea>
 801810c:	4665      	mov	r5, ip
 801810e:	4666      	mov	r6, ip
 8018110:	19ed      	adds	r5, r5, r7
 8018112:	9002      	str	r0, [sp, #8]
 8018114:	2e00      	cmp	r6, #0
 8018116:	da03      	bge.n	8018120 <__ieee754_sqrt+0xd8>
 8018118:	43ee      	mvns	r6, r5
 801811a:	0ff6      	lsrs	r6, r6, #31
 801811c:	1986      	adds	r6, r0, r6
 801811e:	9602      	str	r6, [sp, #8]
 8018120:	1a1b      	subs	r3, r3, r0
 8018122:	4562      	cmp	r2, ip
 8018124:	4180      	sbcs	r0, r0
 8018126:	4240      	negs	r0, r0
 8018128:	1a1b      	subs	r3, r3, r0
 801812a:	4660      	mov	r0, ip
 801812c:	1a12      	subs	r2, r2, r0
 801812e:	9802      	ldr	r0, [sp, #8]
 8018130:	19c9      	adds	r1, r1, r7
 8018132:	0fd6      	lsrs	r6, r2, #31
 8018134:	005b      	lsls	r3, r3, #1
 8018136:	199b      	adds	r3, r3, r6
 8018138:	9e01      	ldr	r6, [sp, #4]
 801813a:	0052      	lsls	r2, r2, #1
 801813c:	3e01      	subs	r6, #1
 801813e:	087f      	lsrs	r7, r7, #1
 8018140:	9601      	str	r6, [sp, #4]
 8018142:	2e00      	cmp	r6, #0
 8018144:	d1db      	bne.n	80180fe <__ieee754_sqrt+0xb6>
 8018146:	4313      	orrs	r3, r2
 8018148:	d003      	beq.n	8018152 <__ieee754_sqrt+0x10a>
 801814a:	1c4b      	adds	r3, r1, #1
 801814c:	d127      	bne.n	801819e <__ieee754_sqrt+0x156>
 801814e:	0031      	movs	r1, r6
 8018150:	3401      	adds	r4, #1
 8018152:	4b17      	ldr	r3, [pc, #92]	; (80181b0 <__ieee754_sqrt+0x168>)
 8018154:	1060      	asrs	r0, r4, #1
 8018156:	18c0      	adds	r0, r0, r3
 8018158:	0849      	lsrs	r1, r1, #1
 801815a:	07e3      	lsls	r3, r4, #31
 801815c:	d502      	bpl.n	8018164 <__ieee754_sqrt+0x11c>
 801815e:	2380      	movs	r3, #128	; 0x80
 8018160:	061b      	lsls	r3, r3, #24
 8018162:	4319      	orrs	r1, r3
 8018164:	9b03      	ldr	r3, [sp, #12]
 8018166:	000d      	movs	r5, r1
 8018168:	051c      	lsls	r4, r3, #20
 801816a:	1823      	adds	r3, r4, r0
 801816c:	001c      	movs	r4, r3
 801816e:	e782      	b.n	8018076 <__ieee754_sqrt+0x2e>
 8018170:	0ad3      	lsrs	r3, r2, #11
 8018172:	3815      	subs	r0, #21
 8018174:	0552      	lsls	r2, r2, #21
 8018176:	2b00      	cmp	r3, #0
 8018178:	d0fa      	beq.n	8018170 <__ieee754_sqrt+0x128>
 801817a:	2480      	movs	r4, #128	; 0x80
 801817c:	0364      	lsls	r4, r4, #13
 801817e:	4223      	tst	r3, r4
 8018180:	d00a      	beq.n	8018198 <__ieee754_sqrt+0x150>
 8018182:	2420      	movs	r4, #32
 8018184:	0016      	movs	r6, r2
 8018186:	1a64      	subs	r4, r4, r1
 8018188:	40e6      	lsrs	r6, r4
 801818a:	1e4d      	subs	r5, r1, #1
 801818c:	408a      	lsls	r2, r1
 801818e:	4333      	orrs	r3, r6
 8018190:	1b41      	subs	r1, r0, r5
 8018192:	e789      	b.n	80180a8 <__ieee754_sqrt+0x60>
 8018194:	2000      	movs	r0, #0
 8018196:	e7ee      	b.n	8018176 <__ieee754_sqrt+0x12e>
 8018198:	005b      	lsls	r3, r3, #1
 801819a:	3101      	adds	r1, #1
 801819c:	e7ef      	b.n	801817e <__ieee754_sqrt+0x136>
 801819e:	2301      	movs	r3, #1
 80181a0:	3101      	adds	r1, #1
 80181a2:	4399      	bics	r1, r3
 80181a4:	e7d5      	b.n	8018152 <__ieee754_sqrt+0x10a>
 80181a6:	46c0      	nop			; (mov r8, r8)
 80181a8:	7ff00000 	.word	0x7ff00000
 80181ac:	fffffc01 	.word	0xfffffc01
 80181b0:	3fe00000 	.word	0x3fe00000

080181b4 <with_errno>:
 80181b4:	b570      	push	{r4, r5, r6, lr}
 80181b6:	000d      	movs	r5, r1
 80181b8:	0016      	movs	r6, r2
 80181ba:	0004      	movs	r4, r0
 80181bc:	f7fc fa00 	bl	80145c0 <__errno>
 80181c0:	0029      	movs	r1, r5
 80181c2:	6006      	str	r6, [r0, #0]
 80181c4:	0020      	movs	r0, r4
 80181c6:	bd70      	pop	{r4, r5, r6, pc}

080181c8 <xflow>:
 80181c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80181ca:	0015      	movs	r5, r2
 80181cc:	001c      	movs	r4, r3
 80181ce:	2800      	cmp	r0, #0
 80181d0:	d010      	beq.n	80181f4 <xflow+0x2c>
 80181d2:	2380      	movs	r3, #128	; 0x80
 80181d4:	0010      	movs	r0, r2
 80181d6:	061b      	lsls	r3, r3, #24
 80181d8:	18e1      	adds	r1, r4, r3
 80181da:	9000      	str	r0, [sp, #0]
 80181dc:	9101      	str	r1, [sp, #4]
 80181de:	9a00      	ldr	r2, [sp, #0]
 80181e0:	9b01      	ldr	r3, [sp, #4]
 80181e2:	0028      	movs	r0, r5
 80181e4:	0021      	movs	r1, r4
 80181e6:	f7e9 ffbb 	bl	8002160 <__aeabi_dmul>
 80181ea:	2222      	movs	r2, #34	; 0x22
 80181ec:	f7ff ffe2 	bl	80181b4 <with_errno>
 80181f0:	b003      	add	sp, #12
 80181f2:	bd30      	pop	{r4, r5, pc}
 80181f4:	0010      	movs	r0, r2
 80181f6:	0019      	movs	r1, r3
 80181f8:	e7ef      	b.n	80181da <xflow+0x12>

080181fa <__math_uflow>:
 80181fa:	2380      	movs	r3, #128	; 0x80
 80181fc:	b510      	push	{r4, lr}
 80181fe:	2200      	movs	r2, #0
 8018200:	055b      	lsls	r3, r3, #21
 8018202:	f7ff ffe1 	bl	80181c8 <xflow>
 8018206:	bd10      	pop	{r4, pc}

08018208 <__math_oflow>:
 8018208:	23e0      	movs	r3, #224	; 0xe0
 801820a:	b510      	push	{r4, lr}
 801820c:	2200      	movs	r2, #0
 801820e:	05db      	lsls	r3, r3, #23
 8018210:	f7ff ffda 	bl	80181c8 <xflow>
 8018214:	bd10      	pop	{r4, pc}

08018216 <fabs>:
 8018216:	004b      	lsls	r3, r1, #1
 8018218:	0859      	lsrs	r1, r3, #1
 801821a:	4770      	bx	lr

0801821c <finite>:
 801821c:	4b02      	ldr	r3, [pc, #8]	; (8018228 <finite+0xc>)
 801821e:	0048      	lsls	r0, r1, #1
 8018220:	0840      	lsrs	r0, r0, #1
 8018222:	18c0      	adds	r0, r0, r3
 8018224:	0fc0      	lsrs	r0, r0, #31
 8018226:	4770      	bx	lr
 8018228:	80100000 	.word	0x80100000

0801822c <scalbn>:
 801822c:	004b      	lsls	r3, r1, #1
 801822e:	b570      	push	{r4, r5, r6, lr}
 8018230:	0d5b      	lsrs	r3, r3, #21
 8018232:	0014      	movs	r4, r2
 8018234:	000a      	movs	r2, r1
 8018236:	2b00      	cmp	r3, #0
 8018238:	d10d      	bne.n	8018256 <scalbn+0x2a>
 801823a:	004b      	lsls	r3, r1, #1
 801823c:	085b      	lsrs	r3, r3, #1
 801823e:	4303      	orrs	r3, r0
 8018240:	d010      	beq.n	8018264 <scalbn+0x38>
 8018242:	4b27      	ldr	r3, [pc, #156]	; (80182e0 <scalbn+0xb4>)
 8018244:	2200      	movs	r2, #0
 8018246:	f7e9 ff8b 	bl	8002160 <__aeabi_dmul>
 801824a:	4b26      	ldr	r3, [pc, #152]	; (80182e4 <scalbn+0xb8>)
 801824c:	429c      	cmp	r4, r3
 801824e:	da0a      	bge.n	8018266 <scalbn+0x3a>
 8018250:	4a25      	ldr	r2, [pc, #148]	; (80182e8 <scalbn+0xbc>)
 8018252:	4b26      	ldr	r3, [pc, #152]	; (80182ec <scalbn+0xc0>)
 8018254:	e019      	b.n	801828a <scalbn+0x5e>
 8018256:	4d26      	ldr	r5, [pc, #152]	; (80182f0 <scalbn+0xc4>)
 8018258:	42ab      	cmp	r3, r5
 801825a:	d108      	bne.n	801826e <scalbn+0x42>
 801825c:	0002      	movs	r2, r0
 801825e:	000b      	movs	r3, r1
 8018260:	f7e9 f840 	bl	80012e4 <__aeabi_dadd>
 8018264:	bd70      	pop	{r4, r5, r6, pc}
 8018266:	000a      	movs	r2, r1
 8018268:	004b      	lsls	r3, r1, #1
 801826a:	0d5b      	lsrs	r3, r3, #21
 801826c:	3b36      	subs	r3, #54	; 0x36
 801826e:	4d21      	ldr	r5, [pc, #132]	; (80182f4 <scalbn+0xc8>)
 8018270:	18e3      	adds	r3, r4, r3
 8018272:	42ab      	cmp	r3, r5
 8018274:	dd0c      	ble.n	8018290 <scalbn+0x64>
 8018276:	4c20      	ldr	r4, [pc, #128]	; (80182f8 <scalbn+0xcc>)
 8018278:	4d20      	ldr	r5, [pc, #128]	; (80182fc <scalbn+0xd0>)
 801827a:	2900      	cmp	r1, #0
 801827c:	da01      	bge.n	8018282 <scalbn+0x56>
 801827e:	4c1e      	ldr	r4, [pc, #120]	; (80182f8 <scalbn+0xcc>)
 8018280:	4d1f      	ldr	r5, [pc, #124]	; (8018300 <scalbn+0xd4>)
 8018282:	0020      	movs	r0, r4
 8018284:	0029      	movs	r1, r5
 8018286:	4a1c      	ldr	r2, [pc, #112]	; (80182f8 <scalbn+0xcc>)
 8018288:	4b1c      	ldr	r3, [pc, #112]	; (80182fc <scalbn+0xd0>)
 801828a:	f7e9 ff69 	bl	8002160 <__aeabi_dmul>
 801828e:	e7e9      	b.n	8018264 <scalbn+0x38>
 8018290:	2b00      	cmp	r3, #0
 8018292:	dd05      	ble.n	80182a0 <scalbn+0x74>
 8018294:	4c1b      	ldr	r4, [pc, #108]	; (8018304 <scalbn+0xd8>)
 8018296:	051b      	lsls	r3, r3, #20
 8018298:	4022      	ands	r2, r4
 801829a:	431a      	orrs	r2, r3
 801829c:	0011      	movs	r1, r2
 801829e:	e7e1      	b.n	8018264 <scalbn+0x38>
 80182a0:	001d      	movs	r5, r3
 80182a2:	3535      	adds	r5, #53	; 0x35
 80182a4:	da13      	bge.n	80182ce <scalbn+0xa2>
 80182a6:	4a18      	ldr	r2, [pc, #96]	; (8018308 <scalbn+0xdc>)
 80182a8:	0fcb      	lsrs	r3, r1, #31
 80182aa:	4294      	cmp	r4, r2
 80182ac:	dd08      	ble.n	80182c0 <scalbn+0x94>
 80182ae:	4812      	ldr	r0, [pc, #72]	; (80182f8 <scalbn+0xcc>)
 80182b0:	4912      	ldr	r1, [pc, #72]	; (80182fc <scalbn+0xd0>)
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d001      	beq.n	80182ba <scalbn+0x8e>
 80182b6:	4810      	ldr	r0, [pc, #64]	; (80182f8 <scalbn+0xcc>)
 80182b8:	4911      	ldr	r1, [pc, #68]	; (8018300 <scalbn+0xd4>)
 80182ba:	4a0f      	ldr	r2, [pc, #60]	; (80182f8 <scalbn+0xcc>)
 80182bc:	4b0f      	ldr	r3, [pc, #60]	; (80182fc <scalbn+0xd0>)
 80182be:	e7e4      	b.n	801828a <scalbn+0x5e>
 80182c0:	4809      	ldr	r0, [pc, #36]	; (80182e8 <scalbn+0xbc>)
 80182c2:	490a      	ldr	r1, [pc, #40]	; (80182ec <scalbn+0xc0>)
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d0c3      	beq.n	8018250 <scalbn+0x24>
 80182c8:	4807      	ldr	r0, [pc, #28]	; (80182e8 <scalbn+0xbc>)
 80182ca:	4910      	ldr	r1, [pc, #64]	; (801830c <scalbn+0xe0>)
 80182cc:	e7c0      	b.n	8018250 <scalbn+0x24>
 80182ce:	4c0d      	ldr	r4, [pc, #52]	; (8018304 <scalbn+0xd8>)
 80182d0:	3336      	adds	r3, #54	; 0x36
 80182d2:	4022      	ands	r2, r4
 80182d4:	051b      	lsls	r3, r3, #20
 80182d6:	4313      	orrs	r3, r2
 80182d8:	0019      	movs	r1, r3
 80182da:	2200      	movs	r2, #0
 80182dc:	4b0c      	ldr	r3, [pc, #48]	; (8018310 <scalbn+0xe4>)
 80182de:	e7d4      	b.n	801828a <scalbn+0x5e>
 80182e0:	43500000 	.word	0x43500000
 80182e4:	ffff3cb0 	.word	0xffff3cb0
 80182e8:	c2f8f359 	.word	0xc2f8f359
 80182ec:	01a56e1f 	.word	0x01a56e1f
 80182f0:	000007ff 	.word	0x000007ff
 80182f4:	000007fe 	.word	0x000007fe
 80182f8:	8800759c 	.word	0x8800759c
 80182fc:	7e37e43c 	.word	0x7e37e43c
 8018300:	fe37e43c 	.word	0xfe37e43c
 8018304:	800fffff 	.word	0x800fffff
 8018308:	0000c350 	.word	0x0000c350
 801830c:	81a56e1f 	.word	0x81a56e1f
 8018310:	3c900000 	.word	0x3c900000

08018314 <_init>:
 8018314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018316:	46c0      	nop			; (mov r8, r8)
 8018318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801831a:	bc08      	pop	{r3}
 801831c:	469e      	mov	lr, r3
 801831e:	4770      	bx	lr

08018320 <_fini>:
 8018320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018322:	46c0      	nop			; (mov r8, r8)
 8018324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018326:	bc08      	pop	{r3}
 8018328:	469e      	mov	lr, r3
 801832a:	4770      	bx	lr
